name: 'build' 
on: # rebuild any PRs and main branch changes
  pull_request:
  push:
    branches:
      - main
      - benchmarking

jobs:
  build-image:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    outputs:
      imageName: ${{ steps.imageName.outputs.imageName }}
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          # Adjust the cache path as needed
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-docker-${{ hashFiles('.devcontainer/Dockerfile') }}
          restore-keys: |
            ${{ runner.os }}-docker-

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: set lower case owner name
        id: imageName
        run: |
            echo "OWNER_LC=${OWNER,,}" >>${GITHUB_ENV}
            echo "imageName=ghcr.io/${OWNER,,}/r-compile-server" >>${GITHUB_OUTPUT}
        env:
            OWNER: '${{ github.repository_owner }}'

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .devcontainer
          push: true
          # Use the defined Docker image variable
          tags: |
            ghcr.io/${{  env.OWNER_LC }}/${{ github.event.repository.name }}:latest
            ghcr.io/${{ env.OWNER_LC }}/${{ github.event.repository.name }}:${{ github.sha }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache,new=true

  artifact:
    runs-on: ubuntu-latest
    needs: build-image
    container: ${{ needs.build-image.outputs.imageName }}:latest
    steps:
      - uses: actions/checkout@v3
      - name: Build artifact
        run: cd server ; mvn --batch-mode --update-snapshots -DskipTests package
      - run: mkdir staging && cp target/*.jar staging
        working-directory: server
      - name: Cache local Maven repository
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Upload snapshot as artifact
        uses: actions/upload-artifact@v4
        with:
          name: snapshot
          path: server/target/*-SNAPSHOT.jar
      # Optional: Uploads the full dependency graph to GitHub to improve the quality of Dependabot alerts this repository can receive
      - name: Update dependency graph
        uses: advanced-security/maven-dependency-submission-action@v4
        with:
          directory: server

  test:
    runs-on: ubuntu-latest
    needs: build-image 
    container: ${{ needs.build-image.outputs.imageName }}:latest
    steps:

      - name: Checkout (GitHub)
        uses: actions/checkout@v3    
      # See https://github.com/devcontainers/ci/blob/main/docs/github-action.md
      - name: Run tests in the dev container task
        run: cd server; mvn --batch-mode --update-snapshots test

  verify:
    runs-on: ubuntu-latest
    needs: build-image
    container: ${{ needs.build-image.outputs.imageName }}:latest
    steps:

      - name: Checkout (GitHub)
        uses: actions/checkout@v3 
      - name: Run linters in the container task
        run: cd server; mvn --batch-mode --update-snapshots verify

  test-client:
    runs-on: ubuntu-latest
    container: ${{ needs.build-image.outputs.imageName }}:latest
    needs: artifact
    steps:
      - uses: actions/checkout@v3
      - name: build client 
        run: ls -R /workspace/external; cd client/rsh; make install
      - uses: actions/download-artifact@v4
        with:
          name: snapshot
          path: artifact
      - name: start server 
        run: cd artifact; java -cp r-compile-server-0.1-SNAPSHOT.jar org.prlprg.server.CompileServer
        
      #TODO: run the client tests