name: 'build' 
on: # rebuild any PRs and main branch changes
  pull_request:
  push:
    branches:
      - main
      - benchmarking

jobs:
  build-devcontainer:
    runs-on: ubuntu-latest
    outputs:
      imageName: ${{ steps.imageName.outputs.imageName }}
    steps:
      - name: Checkout (GitHub)
        uses: actions/checkout@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2 
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: set lower case owner name
        id: imageName
        run: |
            echo "OWNER_LC=${OWNER,,}" >>${GITHUB_ENV}
            echo "imageName=ghcr.io/${OWNER,,}/r-compile-server" >>${GITHUB_OUTPUT}
        env:
            OWNER: '${{ github.repository_owner }}'

      - name: Pre-build dev container image
        uses: devcontainers/ci@v0.3
        with:
          imageName: ghcr.io/${{ env.OWNER_LC }}/r-compile-server
          cacheFrom: ghcr.io/${{ env.OWNER_LC }}/r-compile-server
          push: always

  artifact:
    runs-on: ubuntu-latest
    needs: build-devcontainer
    steps:
      - uses: actions/checkout@v3
      - name: Build artifact
        uses: devcontainers/ci@v0.3
        with:
          cacheFrom:  ${{ needs.build-devcontainer.outputs.imageName }}
          push: never
          runCmd: cd server ; mvn --batch-mode --update-snapshots -DskipTests package
      - run: mkdir staging && cp target/*.jar staging
        working-directory: server
      - name: Cache local Maven repository
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Upload snapshot as artifact
        uses: actions/upload-artifact@v4
        with:
          name: snapshot
          path: server/target/*-SNAPSHOT.jar
      # Optional: Uploads the full dependency graph to GitHub to improve the quality of Dependabot alerts this repository can receive
      - name: Update dependency graph
        uses: advanced-security/maven-dependency-submission-action@v4
        with:
          directory: server

  test:
    runs-on: ubuntu-latest
    needs: build-devcontainer
    steps:

      - name: Checkout (GitHub)
        uses: actions/checkout@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2 
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

    
      # See https://github.com/devcontainers/ci/blob/main/docs/github-action.md
      - name: Run tests in the dev container task
        uses: devcontainers/ci@v0.3
        with:
          cacheFrom:  ${{ needs.build-devcontainer.outputs.imageName }}
          push: never
          runCmd: cd server; mvn --batch-mode --update-snapshots test

  verify:
    runs-on: ubuntu-latest
    needs: build-devcontainer
    steps:

      - name: Checkout (GitHub)
        uses: actions/checkout@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2 
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

    
      - name: Run linters in the container task
        uses: devcontainers/ci@v0.3
        with:
          cacheFrom:  ${{ needs.build-devcontainer.outputs.imageName }}
          push: never
          runCmd: cd server; mvn --batch-mode --update-snapshots verify

  test-client:
    runs-on: ubuntu-latest
    needs: artifact
    steps:
      - uses: actions/checkout@v3
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2 
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: build client 
        uses: devcontainers/ci@v0.3
        with:
          cacheFrom:  ${{ needs.build-devcontainer.outputs.imageName }}
          push: never
          runCmd: ls /workspace/ ; ls /workspace/external/R; cd client/rsh; make install
      - uses: actions/download-artifact@v4
        with:
          name: snapshot
          path: artifact
      - name: start server 
        uses: devcontainers/ci@v0.3
        with:
          cacheFrom:  ${{ needs.build-devcontainer.outputs.imageName }}
          push: never
          runCmd: cd artifact; java -cp r-compile-server-0.1-SNAPSHOT.jar org.prlprg.server.CompileServer
        
      #TODO: run the client tests