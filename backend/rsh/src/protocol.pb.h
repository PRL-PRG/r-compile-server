// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protocol_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protocol_2eproto;
namespace rsh {
namespace server {
namespace protocol {
class CompileRequest;
class CompileRequestDefaultTypeInternal;
extern CompileRequestDefaultTypeInternal _CompileRequest_default_instance_;
class CompileResponse;
class CompileResponseDefaultTypeInternal;
extern CompileResponseDefaultTypeInternal _CompileResponse_default_instance_;
class CompileResponse_Result;
class CompileResponse_ResultDefaultTypeInternal;
extern CompileResponse_ResultDefaultTypeInternal _CompileResponse_Result_default_instance_;
class Request;
class RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
}  // namespace protocol
}  // namespace server
}  // namespace rsh
PROTOBUF_NAMESPACE_OPEN
template<> ::rsh::server::protocol::CompileRequest* Arena::CreateMaybeMessage<::rsh::server::protocol::CompileRequest>(Arena*);
template<> ::rsh::server::protocol::CompileResponse* Arena::CreateMaybeMessage<::rsh::server::protocol::CompileResponse>(Arena*);
template<> ::rsh::server::protocol::CompileResponse_Result* Arena::CreateMaybeMessage<::rsh::server::protocol::CompileResponse_Result>(Arena*);
template<> ::rsh::server::protocol::Request* Arena::CreateMaybeMessage<::rsh::server::protocol::Request>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace rsh {
namespace server {
namespace protocol {

// ===================================================================

class CompileRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rsh.server.protocol.CompileRequest) */ {
 public:
  inline CompileRequest() : CompileRequest(nullptr) {};
  virtual ~CompileRequest();

  CompileRequest(const CompileRequest& from);
  CompileRequest(CompileRequest&& from) noexcept
    : CompileRequest() {
    *this = ::std::move(from);
  }

  inline CompileRequest& operator=(const CompileRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CompileRequest& operator=(CompileRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CompileRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CompileRequest* internal_default_instance() {
    return reinterpret_cast<const CompileRequest*>(
               &_CompileRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CompileRequest& a, CompileRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CompileRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CompileRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CompileRequest* New() const final {
    return CreateMaybeMessage<CompileRequest>(nullptr);
  }

  CompileRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CompileRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CompileRequest& from);
  void MergeFrom(const CompileRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CompileRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rsh.server.protocol.CompileRequest";
  }
  protected:
  explicit CompileRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2eproto);
    return ::descriptor_table_protocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kClosureFieldNumber = 3,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bytes closure = 3;
  void clear_closure();
  const std::string& closure() const;
  void set_closure(const std::string& value);
  void set_closure(std::string&& value);
  void set_closure(const char* value);
  void set_closure(const void* value, size_t size);
  std::string* mutable_closure();
  std::string* release_closure();
  void set_allocated_closure(std::string* closure);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_closure();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_closure(
      std::string* closure);
  private:
  const std::string& _internal_closure() const;
  void _internal_set_closure(const std::string& value);
  std::string* _internal_mutable_closure();
  public:

  // @@protoc_insertion_point(class_scope:rsh.server.protocol.CompileRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr closure_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rsh.server.protocol.Request) */ {
 public:
  inline Request() : Request(nullptr) {};
  virtual ~Request();

  Request(const Request& from);
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request& operator=(Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Request& default_instance();

  enum DataCase {
    kCompile = 2,
    DATA_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }
  inline void Swap(Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Request* New() const final {
    return CreateMaybeMessage<Request>(nullptr);
  }

  Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rsh.server.protocol.Request";
  }
  protected:
  explicit Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2eproto);
    return ::descriptor_table_protocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCompileFieldNumber = 2,
  };
  // .rsh.server.protocol.CompileRequest compile = 2;
  bool has_compile() const;
  private:
  bool _internal_has_compile() const;
  public:
  void clear_compile();
  const ::rsh::server::protocol::CompileRequest& compile() const;
  ::rsh::server::protocol::CompileRequest* release_compile();
  ::rsh::server::protocol::CompileRequest* mutable_compile();
  void set_allocated_compile(::rsh::server::protocol::CompileRequest* compile);
  private:
  const ::rsh::server::protocol::CompileRequest& _internal_compile() const;
  ::rsh::server::protocol::CompileRequest* _internal_mutable_compile();
  public:
  void unsafe_arena_set_allocated_compile(
      ::rsh::server::protocol::CompileRequest* compile);
  ::rsh::server::protocol::CompileRequest* unsafe_arena_release_compile();

  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:rsh.server.protocol.Request)
 private:
  class _Internal;
  void set_has_compile();

  inline bool has_data() const;
  inline void clear_has_data();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union DataUnion {
    DataUnion() {}
    ::rsh::server::protocol::CompileRequest* compile_;
  } data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class CompileResponse_Result PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rsh.server.protocol.CompileResponse.Result) */ {
 public:
  inline CompileResponse_Result() : CompileResponse_Result(nullptr) {};
  virtual ~CompileResponse_Result();

  CompileResponse_Result(const CompileResponse_Result& from);
  CompileResponse_Result(CompileResponse_Result&& from) noexcept
    : CompileResponse_Result() {
    *this = ::std::move(from);
  }

  inline CompileResponse_Result& operator=(const CompileResponse_Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline CompileResponse_Result& operator=(CompileResponse_Result&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CompileResponse_Result& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CompileResponse_Result* internal_default_instance() {
    return reinterpret_cast<const CompileResponse_Result*>(
               &_CompileResponse_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CompileResponse_Result& a, CompileResponse_Result& b) {
    a.Swap(&b);
  }
  inline void Swap(CompileResponse_Result* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CompileResponse_Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CompileResponse_Result* New() const final {
    return CreateMaybeMessage<CompileResponse_Result>(nullptr);
  }

  CompileResponse_Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CompileResponse_Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CompileResponse_Result& from);
  void MergeFrom(const CompileResponse_Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CompileResponse_Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rsh.server.protocol.CompileResponse.Result";
  }
  protected:
  explicit CompileResponse_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2eproto);
    return ::descriptor_table_protocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNativeCodeFieldNumber = 3,
    kConstantPoolFieldNumber = 4,
  };
  // bytes native_code = 3;
  void clear_native_code();
  const std::string& native_code() const;
  void set_native_code(const std::string& value);
  void set_native_code(std::string&& value);
  void set_native_code(const char* value);
  void set_native_code(const void* value, size_t size);
  std::string* mutable_native_code();
  std::string* release_native_code();
  void set_allocated_native_code(std::string* native_code);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_native_code();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_native_code(
      std::string* native_code);
  private:
  const std::string& _internal_native_code() const;
  void _internal_set_native_code(const std::string& value);
  std::string* _internal_mutable_native_code();
  public:

  // bytes constant_pool = 4;
  void clear_constant_pool();
  const std::string& constant_pool() const;
  void set_constant_pool(const std::string& value);
  void set_constant_pool(std::string&& value);
  void set_constant_pool(const char* value);
  void set_constant_pool(const void* value, size_t size);
  std::string* mutable_constant_pool();
  std::string* release_constant_pool();
  void set_allocated_constant_pool(std::string* constant_pool);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_constant_pool();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_constant_pool(
      std::string* constant_pool);
  private:
  const std::string& _internal_constant_pool() const;
  void _internal_set_constant_pool(const std::string& value);
  std::string* _internal_mutable_constant_pool();
  public:

  // @@protoc_insertion_point(class_scope:rsh.server.protocol.CompileResponse.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr native_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr constant_pool_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class CompileResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rsh.server.protocol.CompileResponse) */ {
 public:
  inline CompileResponse() : CompileResponse(nullptr) {};
  virtual ~CompileResponse();

  CompileResponse(const CompileResponse& from);
  CompileResponse(CompileResponse&& from) noexcept
    : CompileResponse() {
    *this = ::std::move(from);
  }

  inline CompileResponse& operator=(const CompileResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CompileResponse& operator=(CompileResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CompileResponse& default_instance();

  enum DataCase {
    kFailure = 2,
    kResult = 3,
    DATA_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CompileResponse* internal_default_instance() {
    return reinterpret_cast<const CompileResponse*>(
               &_CompileResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CompileResponse& a, CompileResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CompileResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CompileResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CompileResponse* New() const final {
    return CreateMaybeMessage<CompileResponse>(nullptr);
  }

  CompileResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CompileResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CompileResponse& from);
  void MergeFrom(const CompileResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CompileResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rsh.server.protocol.CompileResponse";
  }
  protected:
  explicit CompileResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2eproto);
    return ::descriptor_table_protocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef CompileResponse_Result Result;

  // accessors -------------------------------------------------------

  enum : int {
    kFailureFieldNumber = 2,
    kResultFieldNumber = 3,
  };
  // string failure = 2;
  private:
  bool _internal_has_failure() const;
  public:
  void clear_failure();
  const std::string& failure() const;
  void set_failure(const std::string& value);
  void set_failure(std::string&& value);
  void set_failure(const char* value);
  void set_failure(const char* value, size_t size);
  std::string* mutable_failure();
  std::string* release_failure();
  void set_allocated_failure(std::string* failure);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_failure();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_failure(
      std::string* failure);
  private:
  const std::string& _internal_failure() const;
  void _internal_set_failure(const std::string& value);
  std::string* _internal_mutable_failure();
  public:

  // .rsh.server.protocol.CompileResponse.Result result = 3;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::rsh::server::protocol::CompileResponse_Result& result() const;
  ::rsh::server::protocol::CompileResponse_Result* release_result();
  ::rsh::server::protocol::CompileResponse_Result* mutable_result();
  void set_allocated_result(::rsh::server::protocol::CompileResponse_Result* result);
  private:
  const ::rsh::server::protocol::CompileResponse_Result& _internal_result() const;
  ::rsh::server::protocol::CompileResponse_Result* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::rsh::server::protocol::CompileResponse_Result* result);
  ::rsh::server::protocol::CompileResponse_Result* unsafe_arena_release_result();

  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:rsh.server.protocol.CompileResponse)
 private:
  class _Internal;
  void set_has_failure();
  void set_has_result();

  inline bool has_data() const;
  inline void clear_has_data();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union DataUnion {
    DataUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr failure_;
    ::rsh::server::protocol::CompileResponse_Result* result_;
  } data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_protocol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CompileRequest

// string name = 2;
inline void CompileRequest::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CompileRequest::name() const {
  // @@protoc_insertion_point(field_get:rsh.server.protocol.CompileRequest.name)
  return _internal_name();
}
inline void CompileRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:rsh.server.protocol.CompileRequest.name)
}
inline std::string* CompileRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:rsh.server.protocol.CompileRequest.name)
  return _internal_mutable_name();
}
inline const std::string& CompileRequest::_internal_name() const {
  return name_.Get();
}
inline void CompileRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CompileRequest::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rsh.server.protocol.CompileRequest.name)
}
inline void CompileRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:rsh.server.protocol.CompileRequest.name)
}
inline void CompileRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rsh.server.protocol.CompileRequest.name)
}
inline std::string* CompileRequest::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CompileRequest::release_name() {
  // @@protoc_insertion_point(field_release:rsh.server.protocol.CompileRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CompileRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rsh.server.protocol.CompileRequest.name)
}
inline std::string* CompileRequest::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rsh.server.protocol.CompileRequest.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CompileRequest::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rsh.server.protocol.CompileRequest.name)
}

// bytes closure = 3;
inline void CompileRequest::clear_closure() {
  closure_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CompileRequest::closure() const {
  // @@protoc_insertion_point(field_get:rsh.server.protocol.CompileRequest.closure)
  return _internal_closure();
}
inline void CompileRequest::set_closure(const std::string& value) {
  _internal_set_closure(value);
  // @@protoc_insertion_point(field_set:rsh.server.protocol.CompileRequest.closure)
}
inline std::string* CompileRequest::mutable_closure() {
  // @@protoc_insertion_point(field_mutable:rsh.server.protocol.CompileRequest.closure)
  return _internal_mutable_closure();
}
inline const std::string& CompileRequest::_internal_closure() const {
  return closure_.Get();
}
inline void CompileRequest::_internal_set_closure(const std::string& value) {
  
  closure_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CompileRequest::set_closure(std::string&& value) {
  
  closure_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rsh.server.protocol.CompileRequest.closure)
}
inline void CompileRequest::set_closure(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  closure_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:rsh.server.protocol.CompileRequest.closure)
}
inline void CompileRequest::set_closure(const void* value,
    size_t size) {
  
  closure_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rsh.server.protocol.CompileRequest.closure)
}
inline std::string* CompileRequest::_internal_mutable_closure() {
  
  return closure_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CompileRequest::release_closure() {
  // @@protoc_insertion_point(field_release:rsh.server.protocol.CompileRequest.closure)
  return closure_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CompileRequest::set_allocated_closure(std::string* closure) {
  if (closure != nullptr) {
    
  } else {
    
  }
  closure_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), closure,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rsh.server.protocol.CompileRequest.closure)
}
inline std::string* CompileRequest::unsafe_arena_release_closure() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rsh.server.protocol.CompileRequest.closure)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return closure_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CompileRequest::unsafe_arena_set_allocated_closure(
    std::string* closure) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (closure != nullptr) {
    
  } else {
    
  }
  closure_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      closure, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rsh.server.protocol.CompileRequest.closure)
}

// -------------------------------------------------------------------

// Request

// .rsh.server.protocol.CompileRequest compile = 2;
inline bool Request::_internal_has_compile() const {
  return data_case() == kCompile;
}
inline bool Request::has_compile() const {
  return _internal_has_compile();
}
inline void Request::set_has_compile() {
  _oneof_case_[0] = kCompile;
}
inline void Request::clear_compile() {
  if (_internal_has_compile()) {
    if (GetArena() == nullptr) {
      delete data_.compile_;
    }
    clear_has_data();
  }
}
inline ::rsh::server::protocol::CompileRequest* Request::release_compile() {
  // @@protoc_insertion_point(field_release:rsh.server.protocol.Request.compile)
  if (_internal_has_compile()) {
    clear_has_data();
      ::rsh::server::protocol::CompileRequest* temp = data_.compile_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.compile_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::rsh::server::protocol::CompileRequest& Request::_internal_compile() const {
  return _internal_has_compile()
      ? *data_.compile_
      : *reinterpret_cast< ::rsh::server::protocol::CompileRequest*>(&::rsh::server::protocol::_CompileRequest_default_instance_);
}
inline const ::rsh::server::protocol::CompileRequest& Request::compile() const {
  // @@protoc_insertion_point(field_get:rsh.server.protocol.Request.compile)
  return _internal_compile();
}
inline ::rsh::server::protocol::CompileRequest* Request::unsafe_arena_release_compile() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rsh.server.protocol.Request.compile)
  if (_internal_has_compile()) {
    clear_has_data();
    ::rsh::server::protocol::CompileRequest* temp = data_.compile_;
    data_.compile_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_compile(::rsh::server::protocol::CompileRequest* compile) {
  clear_data();
  if (compile) {
    set_has_compile();
    data_.compile_ = compile;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rsh.server.protocol.Request.compile)
}
inline ::rsh::server::protocol::CompileRequest* Request::_internal_mutable_compile() {
  if (!_internal_has_compile()) {
    clear_data();
    set_has_compile();
    data_.compile_ = CreateMaybeMessage< ::rsh::server::protocol::CompileRequest >(GetArena());
  }
  return data_.compile_;
}
inline ::rsh::server::protocol::CompileRequest* Request::mutable_compile() {
  // @@protoc_insertion_point(field_mutable:rsh.server.protocol.Request.compile)
  return _internal_mutable_compile();
}

inline bool Request::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void Request::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline Request::DataCase Request::data_case() const {
  return Request::DataCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// CompileResponse_Result

// bytes native_code = 3;
inline void CompileResponse_Result::clear_native_code() {
  native_code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CompileResponse_Result::native_code() const {
  // @@protoc_insertion_point(field_get:rsh.server.protocol.CompileResponse.Result.native_code)
  return _internal_native_code();
}
inline void CompileResponse_Result::set_native_code(const std::string& value) {
  _internal_set_native_code(value);
  // @@protoc_insertion_point(field_set:rsh.server.protocol.CompileResponse.Result.native_code)
}
inline std::string* CompileResponse_Result::mutable_native_code() {
  // @@protoc_insertion_point(field_mutable:rsh.server.protocol.CompileResponse.Result.native_code)
  return _internal_mutable_native_code();
}
inline const std::string& CompileResponse_Result::_internal_native_code() const {
  return native_code_.Get();
}
inline void CompileResponse_Result::_internal_set_native_code(const std::string& value) {
  
  native_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CompileResponse_Result::set_native_code(std::string&& value) {
  
  native_code_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rsh.server.protocol.CompileResponse.Result.native_code)
}
inline void CompileResponse_Result::set_native_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  native_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:rsh.server.protocol.CompileResponse.Result.native_code)
}
inline void CompileResponse_Result::set_native_code(const void* value,
    size_t size) {
  
  native_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rsh.server.protocol.CompileResponse.Result.native_code)
}
inline std::string* CompileResponse_Result::_internal_mutable_native_code() {
  
  return native_code_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CompileResponse_Result::release_native_code() {
  // @@protoc_insertion_point(field_release:rsh.server.protocol.CompileResponse.Result.native_code)
  return native_code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CompileResponse_Result::set_allocated_native_code(std::string* native_code) {
  if (native_code != nullptr) {
    
  } else {
    
  }
  native_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), native_code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rsh.server.protocol.CompileResponse.Result.native_code)
}
inline std::string* CompileResponse_Result::unsafe_arena_release_native_code() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rsh.server.protocol.CompileResponse.Result.native_code)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return native_code_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CompileResponse_Result::unsafe_arena_set_allocated_native_code(
    std::string* native_code) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (native_code != nullptr) {
    
  } else {
    
  }
  native_code_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      native_code, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rsh.server.protocol.CompileResponse.Result.native_code)
}

// bytes constant_pool = 4;
inline void CompileResponse_Result::clear_constant_pool() {
  constant_pool_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CompileResponse_Result::constant_pool() const {
  // @@protoc_insertion_point(field_get:rsh.server.protocol.CompileResponse.Result.constant_pool)
  return _internal_constant_pool();
}
inline void CompileResponse_Result::set_constant_pool(const std::string& value) {
  _internal_set_constant_pool(value);
  // @@protoc_insertion_point(field_set:rsh.server.protocol.CompileResponse.Result.constant_pool)
}
inline std::string* CompileResponse_Result::mutable_constant_pool() {
  // @@protoc_insertion_point(field_mutable:rsh.server.protocol.CompileResponse.Result.constant_pool)
  return _internal_mutable_constant_pool();
}
inline const std::string& CompileResponse_Result::_internal_constant_pool() const {
  return constant_pool_.Get();
}
inline void CompileResponse_Result::_internal_set_constant_pool(const std::string& value) {
  
  constant_pool_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CompileResponse_Result::set_constant_pool(std::string&& value) {
  
  constant_pool_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rsh.server.protocol.CompileResponse.Result.constant_pool)
}
inline void CompileResponse_Result::set_constant_pool(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  constant_pool_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:rsh.server.protocol.CompileResponse.Result.constant_pool)
}
inline void CompileResponse_Result::set_constant_pool(const void* value,
    size_t size) {
  
  constant_pool_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rsh.server.protocol.CompileResponse.Result.constant_pool)
}
inline std::string* CompileResponse_Result::_internal_mutable_constant_pool() {
  
  return constant_pool_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CompileResponse_Result::release_constant_pool() {
  // @@protoc_insertion_point(field_release:rsh.server.protocol.CompileResponse.Result.constant_pool)
  return constant_pool_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CompileResponse_Result::set_allocated_constant_pool(std::string* constant_pool) {
  if (constant_pool != nullptr) {
    
  } else {
    
  }
  constant_pool_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), constant_pool,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rsh.server.protocol.CompileResponse.Result.constant_pool)
}
inline std::string* CompileResponse_Result::unsafe_arena_release_constant_pool() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rsh.server.protocol.CompileResponse.Result.constant_pool)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return constant_pool_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CompileResponse_Result::unsafe_arena_set_allocated_constant_pool(
    std::string* constant_pool) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (constant_pool != nullptr) {
    
  } else {
    
  }
  constant_pool_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      constant_pool, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rsh.server.protocol.CompileResponse.Result.constant_pool)
}

// -------------------------------------------------------------------

// CompileResponse

// string failure = 2;
inline bool CompileResponse::_internal_has_failure() const {
  return data_case() == kFailure;
}
inline void CompileResponse::set_has_failure() {
  _oneof_case_[0] = kFailure;
}
inline void CompileResponse::clear_failure() {
  if (_internal_has_failure()) {
    data_.failure_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_data();
  }
}
inline const std::string& CompileResponse::failure() const {
  // @@protoc_insertion_point(field_get:rsh.server.protocol.CompileResponse.failure)
  return _internal_failure();
}
inline void CompileResponse::set_failure(const std::string& value) {
  _internal_set_failure(value);
  // @@protoc_insertion_point(field_set:rsh.server.protocol.CompileResponse.failure)
}
inline std::string* CompileResponse::mutable_failure() {
  // @@protoc_insertion_point(field_mutable:rsh.server.protocol.CompileResponse.failure)
  return _internal_mutable_failure();
}
inline const std::string& CompileResponse::_internal_failure() const {
  if (_internal_has_failure()) {
    return data_.failure_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void CompileResponse::_internal_set_failure(const std::string& value) {
  if (!_internal_has_failure()) {
    clear_data();
    set_has_failure();
    data_.failure_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.failure_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CompileResponse::set_failure(std::string&& value) {
  // @@protoc_insertion_point(field_set:rsh.server.protocol.CompileResponse.failure)
  if (!_internal_has_failure()) {
    clear_data();
    set_has_failure();
    data_.failure_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.failure_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rsh.server.protocol.CompileResponse.failure)
}
inline void CompileResponse::set_failure(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_failure()) {
    clear_data();
    set_has_failure();
    data_.failure_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.failure_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:rsh.server.protocol.CompileResponse.failure)
}
inline void CompileResponse::set_failure(const char* value,
                             size_t size) {
  if (!_internal_has_failure()) {
    clear_data();
    set_has_failure();
    data_.failure_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.failure_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:rsh.server.protocol.CompileResponse.failure)
}
inline std::string* CompileResponse::_internal_mutable_failure() {
  if (!_internal_has_failure()) {
    clear_data();
    set_has_failure();
    data_.failure_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return data_.failure_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CompileResponse::release_failure() {
  // @@protoc_insertion_point(field_release:rsh.server.protocol.CompileResponse.failure)
  if (_internal_has_failure()) {
    clear_has_data();
    return data_.failure_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void CompileResponse::set_allocated_failure(std::string* failure) {
  if (has_data()) {
    clear_data();
  }
  if (failure != nullptr) {
    set_has_failure();
    data_.failure_.UnsafeSetDefault(failure);
  }
  // @@protoc_insertion_point(field_set_allocated:rsh.server.protocol.CompileResponse.failure)
}
inline std::string* CompileResponse::unsafe_arena_release_failure() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rsh.server.protocol.CompileResponse.failure)
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (_internal_has_failure()) {
    clear_has_data();
    return data_.failure_.UnsafeArenaRelease(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void CompileResponse::unsafe_arena_set_allocated_failure(std::string* failure) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (!_internal_has_failure()) {
    data_.failure_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  clear_data();
  if (failure) {
    set_has_failure();
    data_.failure_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), failure, GetArena());
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rsh.server.protocol.CompileResponse.failure)
}

// .rsh.server.protocol.CompileResponse.Result result = 3;
inline bool CompileResponse::_internal_has_result() const {
  return data_case() == kResult;
}
inline bool CompileResponse::has_result() const {
  return _internal_has_result();
}
inline void CompileResponse::set_has_result() {
  _oneof_case_[0] = kResult;
}
inline void CompileResponse::clear_result() {
  if (_internal_has_result()) {
    if (GetArena() == nullptr) {
      delete data_.result_;
    }
    clear_has_data();
  }
}
inline ::rsh::server::protocol::CompileResponse_Result* CompileResponse::release_result() {
  // @@protoc_insertion_point(field_release:rsh.server.protocol.CompileResponse.result)
  if (_internal_has_result()) {
    clear_has_data();
      ::rsh::server::protocol::CompileResponse_Result* temp = data_.result_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.result_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::rsh::server::protocol::CompileResponse_Result& CompileResponse::_internal_result() const {
  return _internal_has_result()
      ? *data_.result_
      : *reinterpret_cast< ::rsh::server::protocol::CompileResponse_Result*>(&::rsh::server::protocol::_CompileResponse_Result_default_instance_);
}
inline const ::rsh::server::protocol::CompileResponse_Result& CompileResponse::result() const {
  // @@protoc_insertion_point(field_get:rsh.server.protocol.CompileResponse.result)
  return _internal_result();
}
inline ::rsh::server::protocol::CompileResponse_Result* CompileResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rsh.server.protocol.CompileResponse.result)
  if (_internal_has_result()) {
    clear_has_data();
    ::rsh::server::protocol::CompileResponse_Result* temp = data_.result_;
    data_.result_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CompileResponse::unsafe_arena_set_allocated_result(::rsh::server::protocol::CompileResponse_Result* result) {
  clear_data();
  if (result) {
    set_has_result();
    data_.result_ = result;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rsh.server.protocol.CompileResponse.result)
}
inline ::rsh::server::protocol::CompileResponse_Result* CompileResponse::_internal_mutable_result() {
  if (!_internal_has_result()) {
    clear_data();
    set_has_result();
    data_.result_ = CreateMaybeMessage< ::rsh::server::protocol::CompileResponse_Result >(GetArena());
  }
  return data_.result_;
}
inline ::rsh::server::protocol::CompileResponse_Result* CompileResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:rsh.server.protocol.CompileResponse.result)
  return _internal_mutable_result();
}

inline bool CompileResponse::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void CompileResponse::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline CompileResponse::DataCase CompileResponse::data_case() const {
  return CompileResponse::DataCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace server
}  // namespace rsh

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protocol_2eproto
