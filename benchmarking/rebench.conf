# Config file for ReBench
# Format is YAML
# Benchmark for the R compile server

# this run definition will be choosen if no parameters are given to rebench.py
default_experiment: all
default_data_file: 'benchmarks.data'


runs:
    invocations: 1
    warmup: 5
    iterations: 15
    min_iteration_time: 100


# TODO: reporting (with RebenchDB?)
benchmark_suites:
    are-we-fast-r:
        gauge_adapter: RebenchLog
        location: "%%BENCHMARKS_PATH%%/areWeFast"
        command: &R_BENCH_COMMAND " harness.r %(benchmark)s %(iterations)s "
        max_invocation_time: 6000
        benchmarks:
            - Mandelbrot:
                extra_args: 500
                codespeed_name: "[awf] mandel"
            - Bounce:
                extra_args: 35
                codespeed_name: "[awf] bounce"
            - Bounce_nonames:
                extra_args: 35
                codespeed_name: "[awf] bounce_nn"
            - Bounce_nonames_simple:
                extra_args: 35
                codespeed_name: "[awf] bounce_nn_s"
            - Storage:
                extra_args: 100
                codespeed_name: "[awf] store"

    shootout:
        gauge_adapter: RebenchLog
        location: "%%BENCHMARKS_PATH%%/shootout"
        command: *R_BENCH_COMMAND
        max_invocation_time: 6000
        benchmarks:  # extra_args: benchmarkParameter [innerIterations]
            - binarytrees:
                command: binarytrees/binarytrees
                extra_args: 9
                codespeed_name: "[shoot] bintree"
            - binarytrees_2:
                command: binarytrees/binarytrees_2
                extra_args: 9
                codespeed_name: "[shoot] bintree2"
            - binarytrees_naive:
                command: binarytrees/binarytrees_naive
                extra_args: 9
                codespeed_name: "[shoot] bintree_n"
            - fannkuchredux:
                command: fannkuch/fannkuchredux
                extra_args: 9
                codespeed_name: "[shoot] fannk"
            - fannkuchredux_naive:
                command: fannkuch/fannkuchredux_naive
                extra_args: 9
                codespeed_name: "[shoot] fannk_n"
            - fasta:
                command: fasta/fasta
                extra_args: 60000
                codespeed_name: "[shoot] fasta"
            - fasta_2:
                command: fasta/fasta_2
                extra_args: 60000
                codespeed_name: "[shoot] fasta2"
            - fasta_3:
                command: fasta/fasta_3
                extra_args: 60000
                codespeed_name: "[shoot] fasta3"
            - fasta_naive:
                command: fasta/fasta_naive
                extra_args: 80000
                codespeed_name: "[shoot] fasta_n"
            - fasta_naive_2:
                command: fasta/fasta_naive_2
                extra_args: 80000
                codespeed_name: "[shoot] fasta_n2"
            - fastaredux:
                command: fastaredux/fastaredux
                extra_args: 80000
                codespeed_name: "[shoot] fastar"
            - fastaredux_naive:
                command: fastaredux/fastaredux_naive
                extra_args: 80000
                codespeed_name: "[shoot] fastar_n"
            - knucleotide:
                command: knucleotide/knucleotide
                extra_args: 2000
                codespeed_name: "[shoot] knucleo"
            - knucleotide_brute:
                command: knucleotide/knucleotide_brute
                extra_args: 2000
                codespeed_name: "[shoot] knucleo_b"
            - knucleotide_brute_2:
                command: knucleotide/knucleotide_brute_2
                extra_args: 2000
                codespeed_name: "[shoot] knucleo_b2"
            - knucleotide_brute_3:
                command: knucleotide/knucleotide_brute_3
                extra_args: 2000
                codespeed_name: "[shoot] knucleo_b3"
            - mandelbrot_ascii:
                command: mandelbrot/mandelbrot_ascii
                extra_args: 300
                codespeed_name: "[shoot] mandel_a"
# turn off for now since they write binary data to stdout...
#            - mandelbrot:
#                command: mandelbrot/mandelbrot
#                extra_args: 2000
#                codespeed_name: "[shoot] mandel"
#            - mandelbrot_naive:
#                command: mandelbrot/mandelbrot_naive
#                extra_args: 400
#                codespeed_name: "[shoot] mandel_n"
            - mandelbrot_naive_ascii:
                command: mandelbrot/mandelbrot_naive_ascii
                extra_args: 200
                codespeed_name: "[shoot] mandel_n_a"
            - mandelbrot_noout:
                command: mandelbrot/mandelbrot_noout
                extra_args: 400
                codespeed_name: "[shoot] mandel_no"
            - mandelbrot_noout_naive:
                command: mandelbrot/mandelbrot_noout_naive
                extra_args: 500
                codespeed_name: "[shoot] mandel_no_n"
            - nbody:
                command: nbody/nbody
                extra_args: 25000
                codespeed_name: "[shoot] nbody"
            - nbody_2:
                command: nbody/nbody_2
                extra_args: 12000
                codespeed_name: "[shoot] nbody2"
            - nbody_3:
                command: nbody/nbody_3
                extra_args: 20000
                codespeed_name: "[shoot] nbody3"
            - nbody_naive:
                command: nbody/nbody_naive
                extra_args: 20000
                codespeed_name: "[shoot] nbody_n"
            - nbody_naive_2:
                command: nbody/nbody_naive_2
                extra_args: 20000
                codespeed_name: "[shoot] nbody_n2"
            - pidigits:
                command: pidigits/pidigits
                extra_args: 30
                codespeed_name: "[shoot] pidig"
            - regexdna:
                command: regexdna/regexdna
                extra_args: 500000
                codespeed_name: "[shoot] regex"
            - reversecomplement:
                command: reversecomplement/reversecomplement
                extra_args: 150000
                codespeed_name: "[shoot] revcom"
            - reversecomplement_2:
                command: reversecomplement/reversecomplement_2
                extra_args: 150000
                codespeed_name: "[shoot] revcom2"
            - reversecomplement_naive:
                command: reversecomplement/reversecomplement_naive
                extra_args: 50000
                codespeed_name: "[shoot] revcom_n"
            - spectralnorm:
                command: spectralnorm/spectralnorm
                extra_args: 1200
                codespeed_name: "[shoot] specnorm"
            - spectralnorm_alt:
                command: spectralnorm/spectralnorm_alt
                extra_args: 1500
                codespeed_name: "[shoot] specnorm_a"
            - spectralnorm_alt_2:
                command: spectralnorm/spectralnorm_alt_2
                extra_args: 1200
                codespeed_name: "[shoot] specnorm_a2"
            - spectralnorm_alt_3:
                command: spectralnorm/spectralnorm_alt_3
                extra_args: 250
                codespeed_name: "[shoot] specnorm_a3"
#            - spectralnorm_alt_4:
#                command: spectralnorm/spectralnorm_alt_4
#                extra_args: 250
#                codespeed_name: "[shoot] specnorm_a4"
            - spectralnorm_math:
                command: spectralnorm/spectralnorm_math
                extra_args: 1200
                codespeed_name: "[shoot] specnorm_m"
            - spectralnorm_naive:
                command: spectralnorm/spectralnorm_naive
                extra_args: 150
                codespeed_name: "[shoot] specnorm_n"

    simple_extra:
        # listWhile with graalvm 22.0.0.2 takes over 100 minutes
        # listFor with graalvm 22.0.0.2 takes over 80 minutes
        gauge_adapter: RebenchLog
        location: "%%BENCHMARKS_PATH%%/simple"
        command: *R_BENCH_COMMAND
        max_invocation_time: 6000
        benchmarks:  # extra_args: benchmarkParameter [innerIterations]
            - listFor:
                command: list-for
                extra_args: 500000
                codespeed_name: "[simple] list-for" 
            - listWhile:
                command: list-while
                extra_args: 500000
                codespeed_name: "[simple] list-while" 

    simple_reduced:
        gauge_adapter: RebenchLog
        location: "%%BENCHMARKS_PATH%%/simple"
        command: *R_BENCH_COMMAND
        max_invocation_time: 6000
        benchmarks:  # extra_args: benchmarkParameter [innerIterations]
            - bytecodes:
                command: bytecodes
                extra_args: 9000000
                codespeed_name: "[simple] bytecodes"
            - emptyFor:
                command: empty-for
                extra_args: 100000000
                codespeed_name: "[simple] empty-for"
            - emptyWhile:
                command: empty-while
                extra_args: 30000000
                codespeed_name: "[simple] empty-while"
            - lapply:
                command: lapply
                extra_args: 1000000
                codespeed_name: "[simple] lapply" 
            - lapplyDots:
                command: lapply-dots
                extra_args: 1000000
                codespeed_name: "[simple] lapply-dots" 
            - matrixFor:
                command: matrix-for
                extra_args: 2000
                codespeed_name: "[simple] matrix-for" 
            - profiler-microbenchmark:
                command: profiler-microbenchmark
                extra_args: 5000000
                codespeed_name: "[simple] profiler-microbenchmark" 
            - profiler-rsa:
                command: profiler-rsa
                extra_args: 600000
                codespeed_name: "[simple] profiler-rsa" 
            - profiler-shared:
                command: profiler-shared
                extra_args: 20
                codespeed_name: "[simple] profiler-shared" 
            - scalarFor:
                command: scalar-for
                extra_args: 100000000
                codespeed_name: "[simple] scalar-for" 
            - superWhile:
                command: super-while
                extra_args: 20000000
                codespeed_name: "[simple] super-while" 
            - vectorFor:
                command: vector-for
                extra_args: 15000000
                codespeed_name: "[simple] vector-for" 
            - vectorWhile:
                command: vector-while
                extra_args: 20000000
                codespeed_name: "[simple] vector-while" 
            - scalarWhile:
                command: scalar-while
                extra_args: 25000000
                codespeed_name: "[simple] scalar-while" 

    real_thing:
        gauge_adapter: RebenchLog
        location: "%%BENCHMARKS_PATH%%/RealThing"
        command: *R_BENCH_COMMAND
        max_invocation_time: 6000
        benchmarks:  # extra_args: benchmarkParameter [innerIterations]
            - convolution:
                command: convolution
                extra_args: 500
                codespeed_name: "[RealThing] convolution"
            - convolution_v:
                command: convolution_v
                extra_args: 1000
                codespeed_name: "[RealThing] convolution vectorized"
            - convolution_slow:
                command: convolution_slow
                extra_args: 1500
                codespeed_name: "[RealThing] convolution slow"
            - volcano:
                command: volcano
                extra_args: 1
                codespeed_name: "[RealThing] volcano"
            - flexclust:
                command: flexclust
                extra_args: 5
                codespeed_name: "[RealThing] flexclust"
            - flexclust_no_s4:
                command: flexclust_no_s4
                extra_args: 5
                codespeed_name: "[RealThing] flexclust_no_s4"


# VMs have a name and are specified by a path and the binary to be executed
executors:
# Standard configurations 
    GNU-R:
        executable: "/usr/bin/time -a -o /tmp/memory.data -f '%%C,%%E,%%M' %%GNU_VM%%/bin/Rscript"
    PIR-LLVM:
        executable: "/usr/bin/time -a -o /tmp/memory.data -f '%%C,%%E,%%M' %%RIR_VM%%/bin/Rscript"
    FASTR:
        executable: "/usr/bin/time -a -o /tmp/memory.data -f '%%C,%%E,%%M' %%FASTR_VM%%/bin/Rscript"

# define the benchmarks to be executed for a re-executable benchmark run
experiments:
    AreWeFast:
        executions:
          - PIR-LLVM:
              suites:
                - are-we-fast-r
                - shootout
                - simple_reduced
                - simple_extra
                - real_thing
          - GNU-R:
              suites:
                - are-we-fast-r
                - shootout
                - simple_reduced
                - simple_extra
                - real_thing
          - FASTR:
              suites:
                - are-we-fast-r
                - shootout
                - simple_reduced
                - real_thing