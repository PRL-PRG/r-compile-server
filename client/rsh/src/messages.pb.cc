// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#include "messages.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace rsh {
namespace protocol {
PROTOBUF_CONSTEXPR Version::Version(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.major_)*/0
  , /*decltype(_impl_.minor_)*/0
  , /*decltype(_impl_.patch_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VersionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VersionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VersionDefaultTypeInternal() {}
  union {
    Version _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VersionDefaultTypeInternal _Version_default_instance_;
PROTOBUF_CONSTEXPR InitRequest::InitRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.package_hash_)*/{}
  , /*decltype(_impl_.platform_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.rsh_version_)*/nullptr
  , /*decltype(_impl_.r_version_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InitRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InitRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InitRequestDefaultTypeInternal() {}
  union {
    InitRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InitRequestDefaultTypeInternal _InitRequest_default_instance_;
PROTOBUF_CONSTEXPR InitResponse::InitResponse(
    ::_pbi::ConstantInitialized) {}
struct InitResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InitResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InitResponseDefaultTypeInternal() {}
  union {
    InitResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InitResponseDefaultTypeInternal _InitResponse_default_instance_;
PROTOBUF_CONSTEXPR CompileRequest::CompileRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.function_)*/nullptr
  , /*decltype(_impl_.context_)*/nullptr
  , /*decltype(_impl_.environment_)*/nullptr
  , /*decltype(_impl_.tier_)*/0
  , /*decltype(_impl_.cc_opt_)*/0
  , /*decltype(_impl_.bc_opt_)*/0} {}
struct CompileRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CompileRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CompileRequestDefaultTypeInternal() {}
  union {
    CompileRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CompileRequestDefaultTypeInternal _CompileRequest_default_instance_;
PROTOBUF_CONSTEXPR CompileResponse::CompileResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.constants_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.hash_)*/uint64_t{0u}
  , /*decltype(_impl_.tier_)*/0} {}
struct CompileResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CompileResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CompileResponseDefaultTypeInternal() {}
  union {
    CompileResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CompileResponseDefaultTypeInternal _CompileResponse_default_instance_;
PROTOBUF_CONSTEXPR Function::Function(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.body_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.package_hash_)*/uint64_t{0u}
  , /*decltype(_impl_.hash_)*/uint64_t{0u}} {}
struct FunctionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FunctionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FunctionDefaultTypeInternal() {}
  union {
    Function _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FunctionDefaultTypeInternal _Function_default_instance_;
PROTOBUF_CONSTEXPR FunctionRequest::FunctionRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.hash_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FunctionRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FunctionRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FunctionRequestDefaultTypeInternal() {}
  union {
    FunctionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FunctionRequestDefaultTypeInternal _FunctionRequest_default_instance_;
PROTOBUF_CONSTEXPR Environment_ValuesEntry_DoNotUse::Environment_ValuesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct Environment_ValuesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Environment_ValuesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Environment_ValuesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Environment_ValuesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Environment_ValuesEntry_DoNotUseDefaultTypeInternal _Environment_ValuesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR Environment::Environment(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.values_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EnvironmentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnvironmentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnvironmentDefaultTypeInternal() {}
  union {
    Environment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnvironmentDefaultTypeInternal _Environment_default_instance_;
PROTOBUF_CONSTEXPR ValueRequest::ValueRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.hash_)*/{}
  , /*decltype(_impl_._hash_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ValueRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ValueRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ValueRequestDefaultTypeInternal() {}
  union {
    ValueRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ValueRequestDefaultTypeInternal _ValueRequest_default_instance_;
PROTOBUF_CONSTEXPR Value::Value(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.hash_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ValueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ValueDefaultTypeInternal() {}
  union {
    Value _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ValueDefaultTypeInternal _Value_default_instance_;
PROTOBUF_CONSTEXPR Values::Values(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.values_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ValuesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ValuesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ValuesDefaultTypeInternal() {}
  union {
    Values _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ValuesDefaultTypeInternal _Values_default_instance_;
PROTOBUF_CONSTEXPR Empty::Empty(
    ::_pbi::ConstantInitialized) {}
struct EmptyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EmptyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EmptyDefaultTypeInternal() {}
  union {
    Empty _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EmptyDefaultTypeInternal _Empty_default_instance_;
PROTOBUF_CONSTEXPR ClearCacheRequest::ClearCacheRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.hashes_)*/{}
  , /*decltype(_impl_._hashes_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ClearCacheRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClearCacheRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClearCacheRequestDefaultTypeInternal() {}
  union {
    ClearCacheRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClearCacheRequestDefaultTypeInternal _ClearCacheRequest_default_instance_;
PROTOBUF_CONSTEXPR ClearCacheResponse::ClearCacheResponse(
    ::_pbi::ConstantInitialized) {}
struct ClearCacheResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClearCacheResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClearCacheResponseDefaultTypeInternal() {}
  union {
    ClearCacheResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClearCacheResponseDefaultTypeInternal _ClearCacheResponse_default_instance_;
PROTOBUF_CONSTEXPR CallContext::CallContext(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.args_statically_matched_)*/false
  , /*decltype(_impl_.correct_number_of_args_)*/false
  , /*decltype(_impl_.correct_order_of_args_)*/false
  , /*decltype(_impl_.no_missing_args_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CallContextDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CallContextDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CallContextDefaultTypeInternal() {}
  union {
    CallContext _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CallContextDefaultTypeInternal _CallContext_default_instance_;
PROTOBUF_CONSTEXPR ArgumentContext::ArgumentContext(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.eager_)*/false
  , /*decltype(_impl_.reflection_)*/false
  , /*decltype(_impl_.object_)*/false
  , /*decltype(_impl_.type_)*/0} {}
struct ArgumentContextDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ArgumentContextDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ArgumentContextDefaultTypeInternal() {}
  union {
    ArgumentContext _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ArgumentContextDefaultTypeInternal _ArgumentContext_default_instance_;
PROTOBUF_CONSTEXPR Context::Context(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.argument_context_)*/{}
  , /*decltype(_impl_.call_context_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ContextDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ContextDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ContextDefaultTypeInternal() {}
  union {
    Context _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ContextDefaultTypeInternal _Context_default_instance_;
PROTOBUF_CONSTEXPR ContextRequest::ContextRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.function_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ContextRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ContextRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ContextRequestDefaultTypeInternal() {}
  union {
    ContextRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ContextRequestDefaultTypeInternal _ContextRequest_default_instance_;
PROTOBUF_CONSTEXPR TestFeedback::TestFeedback(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.test_lattice_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TestFeedbackDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestFeedbackDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestFeedbackDefaultTypeInternal() {}
  union {
    TestFeedback _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestFeedbackDefaultTypeInternal _TestFeedback_default_instance_;
PROTOBUF_CONSTEXPR CallFeedback::CallFeedback(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.n_calls_)*/int64_t{0}
  , /*decltype(_impl_.callee_hash_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CallFeedbackDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CallFeedbackDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CallFeedbackDefaultTypeInternal() {}
  union {
    CallFeedback _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CallFeedbackDefaultTypeInternal _CallFeedback_default_instance_;
PROTOBUF_CONSTEXPR ValueFeedback::ValueFeedback(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.scalar_)*/false
  , /*decltype(_impl_.object_)*/false
  , /*decltype(_impl_.accessed_attributes_)*/false
  , /*decltype(_impl_.vectorizable_)*/false
  , /*decltype(_impl_.is_promise_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ValueFeedbackDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ValueFeedbackDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ValueFeedbackDefaultTypeInternal() {}
  union {
    ValueFeedback _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ValueFeedbackDefaultTypeInternal _ValueFeedback_default_instance_;
PROTOBUF_CONSTEXPR TypeFeedback_Feedback::TypeFeedback_Feedback(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.feedback_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct TypeFeedback_FeedbackDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TypeFeedback_FeedbackDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TypeFeedback_FeedbackDefaultTypeInternal() {}
  union {
    TypeFeedback_Feedback _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TypeFeedback_FeedbackDefaultTypeInternal _TypeFeedback_Feedback_default_instance_;
PROTOBUF_CONSTEXPR TypeFeedback_TypesEntry_DoNotUse::TypeFeedback_TypesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct TypeFeedback_TypesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TypeFeedback_TypesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TypeFeedback_TypesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    TypeFeedback_TypesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TypeFeedback_TypesEntry_DoNotUseDefaultTypeInternal _TypeFeedback_TypesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TypeFeedback::TypeFeedback(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.types_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TypeFeedbackDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TypeFeedbackDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TypeFeedbackDefaultTypeInternal() {}
  union {
    TypeFeedback _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TypeFeedbackDefaultTypeInternal _TypeFeedback_default_instance_;
PROTOBUF_CONSTEXPR FeedbackRequest::FeedbackRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.function_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FeedbackRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FeedbackRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FeedbackRequestDefaultTypeInternal() {}
  union {
    FeedbackRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FeedbackRequestDefaultTypeInternal _FeedbackRequest_default_instance_;
PROTOBUF_CONSTEXPR PackageSource::PackageSource(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.source_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct PackageSourceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PackageSourceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PackageSourceDefaultTypeInternal() {}
  union {
    PackageSource _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PackageSourceDefaultTypeInternal _PackageSource_default_instance_;
PROTOBUF_CONSTEXPR Package::Package(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.function_hashes_)*/{}
  , /*decltype(_impl_._function_hashes_cached_byte_size_)*/{0}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.version_)*/nullptr
  , /*decltype(_impl_.source_)*/nullptr} {}
struct PackageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PackageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PackageDefaultTypeInternal() {}
  union {
    Package _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PackageDefaultTypeInternal _Package_default_instance_;
PROTOBUF_CONSTEXPR PackageRequest::PackageRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.hash_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PackageRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PackageRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PackageRequestDefaultTypeInternal() {}
  union {
    PackageRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PackageRequestDefaultTypeInternal _PackageRequest_default_instance_;
}  // namespace protocol
}  // namespace rsh
static ::_pb::Metadata file_level_metadata_messages_2eproto[29];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_messages_2eproto[3];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_messages_2eproto = nullptr;

const uint32_t TableStruct_messages_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rsh::protocol::Version, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rsh::protocol::Version, _impl_.major_),
  PROTOBUF_FIELD_OFFSET(::rsh::protocol::Version, _impl_.minor_),
  PROTOBUF_FIELD_OFFSET(::rsh::protocol::Version, _impl_.patch_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rsh::protocol::InitRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rsh::protocol::InitRequest, _impl_.rsh_version_),
  PROTOBUF_FIELD_OFFSET(::rsh::protocol::InitRequest, _impl_.r_version_),
  PROTOBUF_FIELD_OFFSET(::rsh::protocol::InitRequest, _impl_.platform_),
  PROTOBUF_FIELD_OFFSET(::rsh::protocol::InitRequest, _impl_.package_hash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rsh::protocol::InitResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rsh::protocol::CompileRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::rsh::protocol::CompileRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rsh::protocol::CompileRequest, _impl_.function_),
  PROTOBUF_FIELD_OFFSET(::rsh::protocol::CompileRequest, _impl_.tier_),
  PROTOBUF_FIELD_OFFSET(::rsh::protocol::CompileRequest, _impl_.cc_opt_),
  PROTOBUF_FIELD_OFFSET(::rsh::protocol::CompileRequest, _impl_.bc_opt_),
  PROTOBUF_FIELD_OFFSET(::rsh::protocol::CompileRequest, _impl_.context_),
  PROTOBUF_FIELD_OFFSET(::rsh::protocol::CompileRequest, _impl_.environment_),
  ~0u,
  2,
  3,
  4,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::rsh::protocol::CompileResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::rsh::protocol::CompileResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rsh::protocol::CompileResponse, _impl_.hash_),
  PROTOBUF_FIELD_OFFSET(::rsh::protocol::CompileResponse, _impl_.tier_),
  PROTOBUF_FIELD_OFFSET(::rsh::protocol::CompileResponse, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::rsh::protocol::CompileResponse, _impl_.constants_),
  ~0u,
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::rsh::protocol::Function, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::rsh::protocol::Function, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rsh::protocol::Function, _impl_.package_hash_),
  PROTOBUF_FIELD_OFFSET(::rsh::protocol::Function, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::rsh::protocol::Function, _impl_.hash_),
  PROTOBUF_FIELD_OFFSET(::rsh::protocol::Function, _impl_.body_),
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rsh::protocol::FunctionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rsh::protocol::FunctionRequest, _impl_.hash_),
  PROTOBUF_FIELD_OFFSET(::rsh::protocol::Environment_ValuesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rsh::protocol::Environment_ValuesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rsh::protocol::Environment_ValuesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::rsh::protocol::Environment_ValuesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rsh::protocol::Environment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rsh::protocol::Environment, _impl_.values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rsh::protocol::ValueRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rsh::protocol::ValueRequest, _impl_.hash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rsh::protocol::Value, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rsh::protocol::Value, _impl_.hash_),
  PROTOBUF_FIELD_OFFSET(::rsh::protocol::Value, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rsh::protocol::Values, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rsh::protocol::Values, _impl_.values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rsh::protocol::Empty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rsh::protocol::ClearCacheRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rsh::protocol::ClearCacheRequest, _impl_.hashes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rsh::protocol::ClearCacheResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rsh::protocol::CallContext, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rsh::protocol::CallContext, _impl_.args_statically_matched_),
  PROTOBUF_FIELD_OFFSET(::rsh::protocol::CallContext, _impl_.correct_number_of_args_),
  PROTOBUF_FIELD_OFFSET(::rsh::protocol::CallContext, _impl_.correct_order_of_args_),
  PROTOBUF_FIELD_OFFSET(::rsh::protocol::CallContext, _impl_.no_missing_args_),
  PROTOBUF_FIELD_OFFSET(::rsh::protocol::ArgumentContext, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::rsh::protocol::ArgumentContext, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rsh::protocol::ArgumentContext, _impl_.eager_),
  PROTOBUF_FIELD_OFFSET(::rsh::protocol::ArgumentContext, _impl_.reflection_),
  PROTOBUF_FIELD_OFFSET(::rsh::protocol::ArgumentContext, _impl_.object_),
  PROTOBUF_FIELD_OFFSET(::rsh::protocol::ArgumentContext, _impl_.type_),
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rsh::protocol::Context, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rsh::protocol::Context, _impl_.call_context_),
  PROTOBUF_FIELD_OFFSET(::rsh::protocol::Context, _impl_.argument_context_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rsh::protocol::ContextRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rsh::protocol::ContextRequest, _impl_.function_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rsh::protocol::TestFeedback, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rsh::protocol::TestFeedback, _impl_.test_lattice_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rsh::protocol::CallFeedback, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rsh::protocol::CallFeedback, _impl_.n_calls_),
  PROTOBUF_FIELD_OFFSET(::rsh::protocol::CallFeedback, _impl_.callee_hash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rsh::protocol::ValueFeedback, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rsh::protocol::ValueFeedback, _impl_.scalar_),
  PROTOBUF_FIELD_OFFSET(::rsh::protocol::ValueFeedback, _impl_.object_),
  PROTOBUF_FIELD_OFFSET(::rsh::protocol::ValueFeedback, _impl_.accessed_attributes_),
  PROTOBUF_FIELD_OFFSET(::rsh::protocol::ValueFeedback, _impl_.vectorizable_),
  PROTOBUF_FIELD_OFFSET(::rsh::protocol::ValueFeedback, _impl_.is_promise_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rsh::protocol::TypeFeedback_Feedback, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::rsh::protocol::TypeFeedback_Feedback, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::rsh::protocol::TypeFeedback_Feedback, _impl_.feedback_),
  PROTOBUF_FIELD_OFFSET(::rsh::protocol::TypeFeedback_TypesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rsh::protocol::TypeFeedback_TypesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rsh::protocol::TypeFeedback_TypesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::rsh::protocol::TypeFeedback_TypesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rsh::protocol::TypeFeedback, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rsh::protocol::TypeFeedback, _impl_.types_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rsh::protocol::FeedbackRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rsh::protocol::FeedbackRequest, _impl_.function_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rsh::protocol::PackageSource, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::rsh::protocol::PackageSource, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::rsh::protocol::PackageSource, _impl_.source_),
  PROTOBUF_FIELD_OFFSET(::rsh::protocol::Package, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::rsh::protocol::Package, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rsh::protocol::Package, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::rsh::protocol::Package, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::rsh::protocol::Package, _impl_.function_hashes_),
  PROTOBUF_FIELD_OFFSET(::rsh::protocol::Package, _impl_.source_),
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rsh::protocol::PackageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rsh::protocol::PackageRequest, _impl_.hash_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::rsh::protocol::Version)},
  { 9, -1, -1, sizeof(::rsh::protocol::InitRequest)},
  { 19, -1, -1, sizeof(::rsh::protocol::InitResponse)},
  { 25, 37, -1, sizeof(::rsh::protocol::CompileRequest)},
  { 43, 53, -1, sizeof(::rsh::protocol::CompileResponse)},
  { 57, 67, -1, sizeof(::rsh::protocol::Function)},
  { 71, -1, -1, sizeof(::rsh::protocol::FunctionRequest)},
  { 78, 86, -1, sizeof(::rsh::protocol::Environment_ValuesEntry_DoNotUse)},
  { 88, -1, -1, sizeof(::rsh::protocol::Environment)},
  { 95, -1, -1, sizeof(::rsh::protocol::ValueRequest)},
  { 102, -1, -1, sizeof(::rsh::protocol::Value)},
  { 110, -1, -1, sizeof(::rsh::protocol::Values)},
  { 117, -1, -1, sizeof(::rsh::protocol::Empty)},
  { 123, -1, -1, sizeof(::rsh::protocol::ClearCacheRequest)},
  { 130, -1, -1, sizeof(::rsh::protocol::ClearCacheResponse)},
  { 136, -1, -1, sizeof(::rsh::protocol::CallContext)},
  { 146, 156, -1, sizeof(::rsh::protocol::ArgumentContext)},
  { 160, -1, -1, sizeof(::rsh::protocol::Context)},
  { 168, -1, -1, sizeof(::rsh::protocol::ContextRequest)},
  { 175, -1, -1, sizeof(::rsh::protocol::TestFeedback)},
  { 182, -1, -1, sizeof(::rsh::protocol::CallFeedback)},
  { 190, -1, -1, sizeof(::rsh::protocol::ValueFeedback)},
  { 201, -1, -1, sizeof(::rsh::protocol::TypeFeedback_Feedback)},
  { 211, 219, -1, sizeof(::rsh::protocol::TypeFeedback_TypesEntry_DoNotUse)},
  { 221, -1, -1, sizeof(::rsh::protocol::TypeFeedback)},
  { 228, -1, -1, sizeof(::rsh::protocol::FeedbackRequest)},
  { 235, -1, -1, sizeof(::rsh::protocol::PackageSource)},
  { 244, 254, -1, sizeof(::rsh::protocol::Package)},
  { 258, -1, -1, sizeof(::rsh::protocol::PackageRequest)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::rsh::protocol::_Version_default_instance_._instance,
  &::rsh::protocol::_InitRequest_default_instance_._instance,
  &::rsh::protocol::_InitResponse_default_instance_._instance,
  &::rsh::protocol::_CompileRequest_default_instance_._instance,
  &::rsh::protocol::_CompileResponse_default_instance_._instance,
  &::rsh::protocol::_Function_default_instance_._instance,
  &::rsh::protocol::_FunctionRequest_default_instance_._instance,
  &::rsh::protocol::_Environment_ValuesEntry_DoNotUse_default_instance_._instance,
  &::rsh::protocol::_Environment_default_instance_._instance,
  &::rsh::protocol::_ValueRequest_default_instance_._instance,
  &::rsh::protocol::_Value_default_instance_._instance,
  &::rsh::protocol::_Values_default_instance_._instance,
  &::rsh::protocol::_Empty_default_instance_._instance,
  &::rsh::protocol::_ClearCacheRequest_default_instance_._instance,
  &::rsh::protocol::_ClearCacheResponse_default_instance_._instance,
  &::rsh::protocol::_CallContext_default_instance_._instance,
  &::rsh::protocol::_ArgumentContext_default_instance_._instance,
  &::rsh::protocol::_Context_default_instance_._instance,
  &::rsh::protocol::_ContextRequest_default_instance_._instance,
  &::rsh::protocol::_TestFeedback_default_instance_._instance,
  &::rsh::protocol::_CallFeedback_default_instance_._instance,
  &::rsh::protocol::_ValueFeedback_default_instance_._instance,
  &::rsh::protocol::_TypeFeedback_Feedback_default_instance_._instance,
  &::rsh::protocol::_TypeFeedback_TypesEntry_DoNotUse_default_instance_._instance,
  &::rsh::protocol::_TypeFeedback_default_instance_._instance,
  &::rsh::protocol::_FeedbackRequest_default_instance_._instance,
  &::rsh::protocol::_PackageSource_default_instance_._instance,
  &::rsh::protocol::_Package_default_instance_._instance,
  &::rsh::protocol::_PackageRequest_default_instance_._instance,
};

const char descriptor_table_protodef_messages_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016messages.proto\022\014rsh.protocol\"6\n\007Versio"
  "n\022\r\n\005major\030\001 \001(\005\022\r\n\005minor\030\002 \001(\005\022\r\n\005patch"
  "\030\003 \001(\005\"\213\001\n\013InitRequest\022*\n\013Rsh_version\030\001 "
  "\001(\0132\025.rsh.protocol.Version\022(\n\tR_version\030"
  "\002 \001(\0132\025.rsh.protocol.Version\022\020\n\010platform"
  "\030\003 \001(\t\022\024\n\014package_hash\030\004 \003(\014\"\016\n\014InitResp"
  "onse\"\250\002\n\016CompileRequest\022(\n\010function\030\002 \001("
  "\0132\026.rsh.protocol.Function\022%\n\004tier\030\004 \001(\0162"
  "\022.rsh.protocol.TierH\000\210\001\001\022\023\n\006cc_opt\030\005 \001(\005"
  "H\001\210\001\001\022\023\n\006bc_opt\030\006 \001(\005H\002\210\001\001\022+\n\007context\030\007 "
  "\001(\0132\025.rsh.protocol.ContextH\003\210\001\001\0223\n\013envir"
  "onment\030\010 \001(\0132\031.rsh.protocol.EnvironmentH"
  "\004\210\001\001B\007\n\005_tierB\t\n\007_cc_optB\t\n\007_bc_optB\n\n\010_"
  "contextB\016\n\014_environment\"\203\001\n\017CompileRespo"
  "nse\022\014\n\004hash\030\001 \001(\004\022 \n\004tier\030\002 \001(\0162\022.rsh.pr"
  "otocol.Tier\022\021\n\004code\030\003 \001(\014H\000\210\001\001\022\026\n\tconsta"
  "nts\030\004 \001(\014H\001\210\001\001B\007\n\005_codeB\014\n\n_constants\"X\n"
  "\010Function\022\024\n\014package_hash\030\001 \001(\004\022\014\n\004name\030"
  "\002 \001(\t\022\014\n\004hash\030\003 \001(\004\022\021\n\004body\030\004 \001(\014H\000\210\001\001B\007"
  "\n\005_body\"\037\n\017FunctionRequest\022\014\n\004hash\030\001 \001(\004"
  "\"s\n\013Environment\0225\n\006values\030\001 \003(\0132%.rsh.pr"
  "otocol.Environment.ValuesEntry\032-\n\013Values"
  "Entry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\004:\0028\001\"\034\n"
  "\014ValueRequest\022\014\n\004hash\030\001 \003(\004\"$\n\005Value\022\014\n\004"
  "hash\030\001 \001(\004\022\r\n\005value\030\002 \001(\014\"-\n\006Values\022#\n\006v"
  "alues\030\001 \003(\0132\023.rsh.protocol.Value\"\007\n\005Empt"
  "y\"#\n\021ClearCacheRequest\022\016\n\006hashes\030\001 \003(\004\"\024"
  "\n\022ClearCacheResponse\"\206\001\n\013CallContext\022\037\n\027"
  "args_statically_matched\030\001 \001(\010\022\036\n\026correct"
  "_number_of_args\030\002 \001(\010\022\035\n\025correct_order_o"
  "f_args\030\003 \001(\010\022\027\n\017no_missing_args\030\004 \001(\010\"t\n"
  "\017ArgumentContext\022\r\n\005eager\030\001 \001(\010\022\022\n\nrefle"
  "ction\030\002 \001(\010\022\016\n\006object\030\003 \001(\010\022%\n\004type\030\004 \001("
  "\0162\022.rsh.protocol.TypeH\000\210\001\001B\007\n\005_type\"s\n\007C"
  "ontext\022/\n\014call_context\030\001 \001(\0132\031.rsh.proto"
  "col.CallContext\0227\n\020argument_context\030\002 \003("
  "\0132\035.rsh.protocol.ArgumentContext\":\n\016Cont"
  "extRequest\022(\n\010function\030\001 \001(\0132\026.rsh.proto"
  "col.Function\"\?\n\014TestFeedback\022/\n\014test_lat"
  "tice\030\001 \001(\0162\031.rsh.protocol.TestLattice\"4\n"
  "\014CallFeedback\022\017\n\007n_calls\030\001 \001(\003\022\023\n\013callee"
  "_hash\030\002 \001(\004\"v\n\rValueFeedback\022\016\n\006scalar\030\001"
  " \001(\010\022\016\n\006object\030\002 \001(\010\022\033\n\023accessed_attribu"
  "tes\030\003 \001(\010\022\024\n\014vectorizable\030\004 \001(\010\022\022\n\nis_pr"
  "omise\030\005 \001(\010\"\321\002\n\014TypeFeedback\0224\n\005types\030\002 "
  "\003(\0132%.rsh.protocol.TypeFeedback.TypesEnt"
  "ry\032\267\001\n\010Feedback\0223\n\rtest_feedback\030\001 \001(\0132\032"
  ".rsh.protocol.TestFeedbackH\000\0223\n\rcall_fee"
  "dback\030\002 \001(\0132\032.rsh.protocol.CallFeedbackH"
  "\000\0225\n\016value_feedback\030\003 \001(\0132\033.rsh.protocol"
  ".ValueFeedbackH\000B\n\n\010feedback\032Q\n\nTypesEnt"
  "ry\022\013\n\003key\030\001 \001(\003\0222\n\005value\030\002 \001(\0132#.rsh.pro"
  "tocol.TypeFeedback.Feedback:\0028\001\";\n\017Feedb"
  "ackRequest\022(\n\010function\030\001 \001(\0132\026.rsh.proto"
  "col.Function\"C\n\rPackageSource\022\022\n\010r_mirro"
  "r\030\002 \001(\tH\000\022\024\n\ngithub_url\030\003 \001(\tH\000B\010\n\006sourc"
  "e\"\225\001\n\007Package\022\014\n\004name\030\001 \001(\t\022&\n\007version\030\002"
  " \001(\0132\025.rsh.protocol.Version\022\027\n\017function_"
  "hashes\030\004 \003(\004\0220\n\006source\030\005 \001(\0132\033.rsh.proto"
  "col.PackageSourceH\000\210\001\001B\t\n\007_source\"\036\n\016Pac"
  "kageRequest\022\014\n\004hash\030\001 \001(\004*#\n\004Tier\022\014\n\010BAS"
  "ELINE\020\000\022\r\n\tOPTIMIZED\020\001*@\n\013TestLattice\022\010\n"
  "\004BOTH\020\000\022\r\n\tONLY_TRUE\020\001\022\016\n\nONLY_FALSE\020\002\022\010"
  "\n\004NONE\020\003*&\n\004Type\022\007\n\003ANY\020\000\022\013\n\007INTEGER\020\001\022\010"
  "\n\004REAL\020\002B\023\n\021org.prlprg.serverb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_messages_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_messages_2eproto = {
    false, false, 2597, descriptor_table_protodef_messages_2eproto,
    "messages.proto",
    &descriptor_table_messages_2eproto_once, nullptr, 0, 29,
    schemas, file_default_instances, TableStruct_messages_2eproto::offsets,
    file_level_metadata_messages_2eproto, file_level_enum_descriptors_messages_2eproto,
    file_level_service_descriptors_messages_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_messages_2eproto_getter() {
  return &descriptor_table_messages_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_messages_2eproto(&descriptor_table_messages_2eproto);
namespace rsh {
namespace protocol {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Tier_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_messages_2eproto);
  return file_level_enum_descriptors_messages_2eproto[0];
}
bool Tier_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TestLattice_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_messages_2eproto);
  return file_level_enum_descriptors_messages_2eproto[1];
}
bool TestLattice_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_messages_2eproto);
  return file_level_enum_descriptors_messages_2eproto[2];
}
bool Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Version::_Internal {
 public:
};

Version::Version(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rsh.protocol.Version)
}
Version::Version(const Version& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Version* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.major_){}
    , decltype(_impl_.minor_){}
    , decltype(_impl_.patch_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.major_, &from._impl_.major_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.patch_) -
    reinterpret_cast<char*>(&_impl_.major_)) + sizeof(_impl_.patch_));
  // @@protoc_insertion_point(copy_constructor:rsh.protocol.Version)
}

inline void Version::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.major_){0}
    , decltype(_impl_.minor_){0}
    , decltype(_impl_.patch_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Version::~Version() {
  // @@protoc_insertion_point(destructor:rsh.protocol.Version)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Version::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Version::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Version::Clear() {
// @@protoc_insertion_point(message_clear_start:rsh.protocol.Version)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.major_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.patch_) -
      reinterpret_cast<char*>(&_impl_.major_)) + sizeof(_impl_.patch_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Version::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 major = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.major_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 minor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.minor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 patch = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.patch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Version::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rsh.protocol.Version)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 major = 1;
  if (this->_internal_major() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_major(), target);
  }

  // int32 minor = 2;
  if (this->_internal_minor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_minor(), target);
  }

  // int32 patch = 3;
  if (this->_internal_patch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_patch(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rsh.protocol.Version)
  return target;
}

size_t Version::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rsh.protocol.Version)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 major = 1;
  if (this->_internal_major() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_major());
  }

  // int32 minor = 2;
  if (this->_internal_minor() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_minor());
  }

  // int32 patch = 3;
  if (this->_internal_patch() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_patch());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Version::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Version::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Version::GetClassData() const { return &_class_data_; }


void Version::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Version*>(&to_msg);
  auto& from = static_cast<const Version&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rsh.protocol.Version)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_major() != 0) {
    _this->_internal_set_major(from._internal_major());
  }
  if (from._internal_minor() != 0) {
    _this->_internal_set_minor(from._internal_minor());
  }
  if (from._internal_patch() != 0) {
    _this->_internal_set_patch(from._internal_patch());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Version::CopyFrom(const Version& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rsh.protocol.Version)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Version::IsInitialized() const {
  return true;
}

void Version::InternalSwap(Version* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Version, _impl_.patch_)
      + sizeof(Version::_impl_.patch_)
      - PROTOBUF_FIELD_OFFSET(Version, _impl_.major_)>(
          reinterpret_cast<char*>(&_impl_.major_),
          reinterpret_cast<char*>(&other->_impl_.major_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Version::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[0]);
}

// ===================================================================

class InitRequest::_Internal {
 public:
  static const ::rsh::protocol::Version& rsh_version(const InitRequest* msg);
  static const ::rsh::protocol::Version& r_version(const InitRequest* msg);
};

const ::rsh::protocol::Version&
InitRequest::_Internal::rsh_version(const InitRequest* msg) {
  return *msg->_impl_.rsh_version_;
}
const ::rsh::protocol::Version&
InitRequest::_Internal::r_version(const InitRequest* msg) {
  return *msg->_impl_.r_version_;
}
InitRequest::InitRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rsh.protocol.InitRequest)
}
InitRequest::InitRequest(const InitRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InitRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.package_hash_){from._impl_.package_hash_}
    , decltype(_impl_.platform_){}
    , decltype(_impl_.rsh_version_){nullptr}
    , decltype(_impl_.r_version_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.platform_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.platform_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_platform().empty()) {
    _this->_impl_.platform_.Set(from._internal_platform(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_rsh_version()) {
    _this->_impl_.rsh_version_ = new ::rsh::protocol::Version(*from._impl_.rsh_version_);
  }
  if (from._internal_has_r_version()) {
    _this->_impl_.r_version_ = new ::rsh::protocol::Version(*from._impl_.r_version_);
  }
  // @@protoc_insertion_point(copy_constructor:rsh.protocol.InitRequest)
}

inline void InitRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.package_hash_){arena}
    , decltype(_impl_.platform_){}
    , decltype(_impl_.rsh_version_){nullptr}
    , decltype(_impl_.r_version_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.platform_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.platform_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

InitRequest::~InitRequest() {
  // @@protoc_insertion_point(destructor:rsh.protocol.InitRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InitRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.package_hash_.~RepeatedPtrField();
  _impl_.platform_.Destroy();
  if (this != internal_default_instance()) delete _impl_.rsh_version_;
  if (this != internal_default_instance()) delete _impl_.r_version_;
}

void InitRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InitRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:rsh.protocol.InitRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.package_hash_.Clear();
  _impl_.platform_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.rsh_version_ != nullptr) {
    delete _impl_.rsh_version_;
  }
  _impl_.rsh_version_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.r_version_ != nullptr) {
    delete _impl_.r_version_;
  }
  _impl_.r_version_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InitRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .rsh.protocol.Version Rsh_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_rsh_version(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .rsh.protocol.Version R_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_r_version(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string platform = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_platform();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rsh.protocol.InitRequest.platform"));
        } else
          goto handle_unusual;
        continue;
      // repeated bytes package_hash = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_package_hash();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InitRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rsh.protocol.InitRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .rsh.protocol.Version Rsh_version = 1;
  if (this->_internal_has_rsh_version()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::rsh_version(this),
        _Internal::rsh_version(this).GetCachedSize(), target, stream);
  }

  // .rsh.protocol.Version R_version = 2;
  if (this->_internal_has_r_version()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::r_version(this),
        _Internal::r_version(this).GetCachedSize(), target, stream);
  }

  // string platform = 3;
  if (!this->_internal_platform().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_platform().data(), static_cast<int>(this->_internal_platform().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rsh.protocol.InitRequest.platform");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_platform(), target);
  }

  // repeated bytes package_hash = 4;
  for (int i = 0, n = this->_internal_package_hash_size(); i < n; i++) {
    const auto& s = this->_internal_package_hash(i);
    target = stream->WriteBytes(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rsh.protocol.InitRequest)
  return target;
}

size_t InitRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rsh.protocol.InitRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes package_hash = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.package_hash_.size());
  for (int i = 0, n = _impl_.package_hash_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      _impl_.package_hash_.Get(i));
  }

  // string platform = 3;
  if (!this->_internal_platform().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_platform());
  }

  // .rsh.protocol.Version Rsh_version = 1;
  if (this->_internal_has_rsh_version()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rsh_version_);
  }

  // .rsh.protocol.Version R_version = 2;
  if (this->_internal_has_r_version()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.r_version_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InitRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InitRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InitRequest::GetClassData() const { return &_class_data_; }


void InitRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InitRequest*>(&to_msg);
  auto& from = static_cast<const InitRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rsh.protocol.InitRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.package_hash_.MergeFrom(from._impl_.package_hash_);
  if (!from._internal_platform().empty()) {
    _this->_internal_set_platform(from._internal_platform());
  }
  if (from._internal_has_rsh_version()) {
    _this->_internal_mutable_rsh_version()->::rsh::protocol::Version::MergeFrom(
        from._internal_rsh_version());
  }
  if (from._internal_has_r_version()) {
    _this->_internal_mutable_r_version()->::rsh::protocol::Version::MergeFrom(
        from._internal_r_version());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InitRequest::CopyFrom(const InitRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rsh.protocol.InitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitRequest::IsInitialized() const {
  return true;
}

void InitRequest::InternalSwap(InitRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.package_hash_.InternalSwap(&other->_impl_.package_hash_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.platform_, lhs_arena,
      &other->_impl_.platform_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InitRequest, _impl_.r_version_)
      + sizeof(InitRequest::_impl_.r_version_)
      - PROTOBUF_FIELD_OFFSET(InitRequest, _impl_.rsh_version_)>(
          reinterpret_cast<char*>(&_impl_.rsh_version_),
          reinterpret_cast<char*>(&other->_impl_.rsh_version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InitRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[1]);
}

// ===================================================================

class InitResponse::_Internal {
 public:
};

InitResponse::InitResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:rsh.protocol.InitResponse)
}
InitResponse::InitResponse(const InitResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  InitResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:rsh.protocol.InitResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InitResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InitResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata InitResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[2]);
}

// ===================================================================

class CompileRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CompileRequest>()._impl_._has_bits_);
  static const ::rsh::protocol::Function& function(const CompileRequest* msg);
  static void set_has_tier(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_cc_opt(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_bc_opt(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::rsh::protocol::Context& context(const CompileRequest* msg);
  static void set_has_context(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::rsh::protocol::Environment& environment(const CompileRequest* msg);
  static void set_has_environment(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::rsh::protocol::Function&
CompileRequest::_Internal::function(const CompileRequest* msg) {
  return *msg->_impl_.function_;
}
const ::rsh::protocol::Context&
CompileRequest::_Internal::context(const CompileRequest* msg) {
  return *msg->_impl_.context_;
}
const ::rsh::protocol::Environment&
CompileRequest::_Internal::environment(const CompileRequest* msg) {
  return *msg->_impl_.environment_;
}
CompileRequest::CompileRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rsh.protocol.CompileRequest)
}
CompileRequest::CompileRequest(const CompileRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CompileRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.function_){nullptr}
    , decltype(_impl_.context_){nullptr}
    , decltype(_impl_.environment_){nullptr}
    , decltype(_impl_.tier_){}
    , decltype(_impl_.cc_opt_){}
    , decltype(_impl_.bc_opt_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_function()) {
    _this->_impl_.function_ = new ::rsh::protocol::Function(*from._impl_.function_);
  }
  if (from._internal_has_context()) {
    _this->_impl_.context_ = new ::rsh::protocol::Context(*from._impl_.context_);
  }
  if (from._internal_has_environment()) {
    _this->_impl_.environment_ = new ::rsh::protocol::Environment(*from._impl_.environment_);
  }
  ::memcpy(&_impl_.tier_, &from._impl_.tier_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.bc_opt_) -
    reinterpret_cast<char*>(&_impl_.tier_)) + sizeof(_impl_.bc_opt_));
  // @@protoc_insertion_point(copy_constructor:rsh.protocol.CompileRequest)
}

inline void CompileRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.function_){nullptr}
    , decltype(_impl_.context_){nullptr}
    , decltype(_impl_.environment_){nullptr}
    , decltype(_impl_.tier_){0}
    , decltype(_impl_.cc_opt_){0}
    , decltype(_impl_.bc_opt_){0}
  };
}

CompileRequest::~CompileRequest() {
  // @@protoc_insertion_point(destructor:rsh.protocol.CompileRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CompileRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.function_;
  if (this != internal_default_instance()) delete _impl_.context_;
  if (this != internal_default_instance()) delete _impl_.environment_;
}

void CompileRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CompileRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:rsh.protocol.CompileRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.function_ != nullptr) {
    delete _impl_.function_;
  }
  _impl_.function_ = nullptr;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.context_ != nullptr);
      _impl_.context_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.environment_ != nullptr);
      _impl_.environment_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&_impl_.tier_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.bc_opt_) -
        reinterpret_cast<char*>(&_impl_.tier_)) + sizeof(_impl_.bc_opt_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CompileRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .rsh.protocol.Function function = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_function(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .rsh.protocol.Tier tier = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_tier(static_cast<::rsh::protocol::Tier>(val));
        } else
          goto handle_unusual;
        continue;
      // optional int32 cc_opt = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_cc_opt(&has_bits);
          _impl_.cc_opt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 bc_opt = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_bc_opt(&has_bits);
          _impl_.bc_opt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .rsh.protocol.Context context = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_context(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .rsh.protocol.Environment environment = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_environment(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CompileRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rsh.protocol.CompileRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .rsh.protocol.Function function = 2;
  if (this->_internal_has_function()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::function(this),
        _Internal::function(this).GetCachedSize(), target, stream);
  }

  // optional .rsh.protocol.Tier tier = 4;
  if (_internal_has_tier()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_tier(), target);
  }

  // optional int32 cc_opt = 5;
  if (_internal_has_cc_opt()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_cc_opt(), target);
  }

  // optional int32 bc_opt = 6;
  if (_internal_has_bc_opt()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_bc_opt(), target);
  }

  // optional .rsh.protocol.Context context = 7;
  if (_internal_has_context()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::context(this),
        _Internal::context(this).GetCachedSize(), target, stream);
  }

  // optional .rsh.protocol.Environment environment = 8;
  if (_internal_has_environment()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::environment(this),
        _Internal::environment(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rsh.protocol.CompileRequest)
  return target;
}

size_t CompileRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rsh.protocol.CompileRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .rsh.protocol.Function function = 2;
  if (this->_internal_has_function()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.function_);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .rsh.protocol.Context context = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.context_);
    }

    // optional .rsh.protocol.Environment environment = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.environment_);
    }

    // optional .rsh.protocol.Tier tier = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_tier());
    }

    // optional int32 cc_opt = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_cc_opt());
    }

    // optional int32 bc_opt = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_bc_opt());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CompileRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CompileRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CompileRequest::GetClassData() const { return &_class_data_; }


void CompileRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CompileRequest*>(&to_msg);
  auto& from = static_cast<const CompileRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rsh.protocol.CompileRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_function()) {
    _this->_internal_mutable_function()->::rsh::protocol::Function::MergeFrom(
        from._internal_function());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_context()->::rsh::protocol::Context::MergeFrom(
          from._internal_context());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_environment()->::rsh::protocol::Environment::MergeFrom(
          from._internal_environment());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.tier_ = from._impl_.tier_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.cc_opt_ = from._impl_.cc_opt_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.bc_opt_ = from._impl_.bc_opt_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CompileRequest::CopyFrom(const CompileRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rsh.protocol.CompileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompileRequest::IsInitialized() const {
  return true;
}

void CompileRequest::InternalSwap(CompileRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CompileRequest, _impl_.bc_opt_)
      + sizeof(CompileRequest::_impl_.bc_opt_)
      - PROTOBUF_FIELD_OFFSET(CompileRequest, _impl_.function_)>(
          reinterpret_cast<char*>(&_impl_.function_),
          reinterpret_cast<char*>(&other->_impl_.function_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CompileRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[3]);
}

// ===================================================================

class CompileResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CompileResponse>()._impl_._has_bits_);
  static void set_has_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_constants(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CompileResponse::CompileResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rsh.protocol.CompileResponse)
}
CompileResponse::CompileResponse(const CompileResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CompileResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.code_){}
    , decltype(_impl_.constants_){}
    , decltype(_impl_.hash_){}
    , decltype(_impl_.tier_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_code()) {
    _this->_impl_.code_.Set(from._internal_code(), 
      _this->GetArenaForAllocation());
  }
  _impl_.constants_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.constants_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_constants()) {
    _this->_impl_.constants_.Set(from._internal_constants(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.hash_, &from._impl_.hash_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.tier_) -
    reinterpret_cast<char*>(&_impl_.hash_)) + sizeof(_impl_.tier_));
  // @@protoc_insertion_point(copy_constructor:rsh.protocol.CompileResponse)
}

inline void CompileResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.code_){}
    , decltype(_impl_.constants_){}
    , decltype(_impl_.hash_){uint64_t{0u}}
    , decltype(_impl_.tier_){0}
  };
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.constants_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.constants_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CompileResponse::~CompileResponse() {
  // @@protoc_insertion_point(destructor:rsh.protocol.CompileResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CompileResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.code_.Destroy();
  _impl_.constants_.Destroy();
}

void CompileResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CompileResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:rsh.protocol.CompileResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.constants_.ClearNonDefaultToEmpty();
    }
  }
  ::memset(&_impl_.hash_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.tier_) -
      reinterpret_cast<char*>(&_impl_.hash_)) + sizeof(_impl_.tier_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CompileResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.hash_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .rsh.protocol.Tier tier = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_tier(static_cast<::rsh::protocol::Tier>(val));
        } else
          goto handle_unusual;
        continue;
      // optional bytes code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes constants = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_constants();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CompileResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rsh.protocol.CompileResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 hash = 1;
  if (this->_internal_hash() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_hash(), target);
  }

  // .rsh.protocol.Tier tier = 2;
  if (this->_internal_tier() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_tier(), target);
  }

  // optional bytes code = 3;
  if (_internal_has_code()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_code(), target);
  }

  // optional bytes constants = 4;
  if (_internal_has_constants()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_constants(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rsh.protocol.CompileResponse)
  return target;
}

size_t CompileResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rsh.protocol.CompileResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes code = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_code());
    }

    // optional bytes constants = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_constants());
    }

  }
  // uint64 hash = 1;
  if (this->_internal_hash() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_hash());
  }

  // .rsh.protocol.Tier tier = 2;
  if (this->_internal_tier() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_tier());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CompileResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CompileResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CompileResponse::GetClassData() const { return &_class_data_; }


void CompileResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CompileResponse*>(&to_msg);
  auto& from = static_cast<const CompileResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rsh.protocol.CompileResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_code(from._internal_code());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_constants(from._internal_constants());
    }
  }
  if (from._internal_hash() != 0) {
    _this->_internal_set_hash(from._internal_hash());
  }
  if (from._internal_tier() != 0) {
    _this->_internal_set_tier(from._internal_tier());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CompileResponse::CopyFrom(const CompileResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rsh.protocol.CompileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompileResponse::IsInitialized() const {
  return true;
}

void CompileResponse::InternalSwap(CompileResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.code_, lhs_arena,
      &other->_impl_.code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.constants_, lhs_arena,
      &other->_impl_.constants_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CompileResponse, _impl_.tier_)
      + sizeof(CompileResponse::_impl_.tier_)
      - PROTOBUF_FIELD_OFFSET(CompileResponse, _impl_.hash_)>(
          reinterpret_cast<char*>(&_impl_.hash_),
          reinterpret_cast<char*>(&other->_impl_.hash_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CompileResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[4]);
}

// ===================================================================

class Function::_Internal {
 public:
  using HasBits = decltype(std::declval<Function>()._impl_._has_bits_);
  static void set_has_body(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Function::Function(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rsh.protocol.Function)
}
Function::Function(const Function& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Function* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.body_){}
    , decltype(_impl_.package_hash_){}
    , decltype(_impl_.hash_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.body_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.body_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_body()) {
    _this->_impl_.body_.Set(from._internal_body(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.package_hash_, &from._impl_.package_hash_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.hash_) -
    reinterpret_cast<char*>(&_impl_.package_hash_)) + sizeof(_impl_.hash_));
  // @@protoc_insertion_point(copy_constructor:rsh.protocol.Function)
}

inline void Function::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.body_){}
    , decltype(_impl_.package_hash_){uint64_t{0u}}
    , decltype(_impl_.hash_){uint64_t{0u}}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.body_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.body_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Function::~Function() {
  // @@protoc_insertion_point(destructor:rsh.protocol.Function)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Function::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.body_.Destroy();
}

void Function::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Function::Clear() {
// @@protoc_insertion_point(message_clear_start:rsh.protocol.Function)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.body_.ClearNonDefaultToEmpty();
  }
  ::memset(&_impl_.package_hash_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.hash_) -
      reinterpret_cast<char*>(&_impl_.package_hash_)) + sizeof(_impl_.hash_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Function::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 package_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.package_hash_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rsh.protocol.Function.name"));
        } else
          goto handle_unusual;
        continue;
      // uint64 hash = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.hash_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes body = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_body();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Function::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rsh.protocol.Function)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 package_hash = 1;
  if (this->_internal_package_hash() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_package_hash(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rsh.protocol.Function.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // uint64 hash = 3;
  if (this->_internal_hash() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_hash(), target);
  }

  // optional bytes body = 4;
  if (_internal_has_body()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_body(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rsh.protocol.Function)
  return target;
}

size_t Function::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rsh.protocol.Function)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // optional bytes body = 4;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_body());
  }

  // uint64 package_hash = 1;
  if (this->_internal_package_hash() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_package_hash());
  }

  // uint64 hash = 3;
  if (this->_internal_hash() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_hash());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Function::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Function::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Function::GetClassData() const { return &_class_data_; }


void Function::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Function*>(&to_msg);
  auto& from = static_cast<const Function&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rsh.protocol.Function)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_has_body()) {
    _this->_internal_set_body(from._internal_body());
  }
  if (from._internal_package_hash() != 0) {
    _this->_internal_set_package_hash(from._internal_package_hash());
  }
  if (from._internal_hash() != 0) {
    _this->_internal_set_hash(from._internal_hash());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Function::CopyFrom(const Function& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rsh.protocol.Function)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Function::IsInitialized() const {
  return true;
}

void Function::InternalSwap(Function* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.body_, lhs_arena,
      &other->_impl_.body_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Function, _impl_.hash_)
      + sizeof(Function::_impl_.hash_)
      - PROTOBUF_FIELD_OFFSET(Function, _impl_.package_hash_)>(
          reinterpret_cast<char*>(&_impl_.package_hash_),
          reinterpret_cast<char*>(&other->_impl_.package_hash_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Function::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[5]);
}

// ===================================================================

class FunctionRequest::_Internal {
 public:
};

FunctionRequest::FunctionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rsh.protocol.FunctionRequest)
}
FunctionRequest::FunctionRequest(const FunctionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FunctionRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.hash_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.hash_ = from._impl_.hash_;
  // @@protoc_insertion_point(copy_constructor:rsh.protocol.FunctionRequest)
}

inline void FunctionRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.hash_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FunctionRequest::~FunctionRequest() {
  // @@protoc_insertion_point(destructor:rsh.protocol.FunctionRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FunctionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FunctionRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FunctionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:rsh.protocol.FunctionRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.hash_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FunctionRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.hash_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FunctionRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rsh.protocol.FunctionRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 hash = 1;
  if (this->_internal_hash() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rsh.protocol.FunctionRequest)
  return target;
}

size_t FunctionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rsh.protocol.FunctionRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 hash = 1;
  if (this->_internal_hash() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_hash());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FunctionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FunctionRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FunctionRequest::GetClassData() const { return &_class_data_; }


void FunctionRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FunctionRequest*>(&to_msg);
  auto& from = static_cast<const FunctionRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rsh.protocol.FunctionRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_hash() != 0) {
    _this->_internal_set_hash(from._internal_hash());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FunctionRequest::CopyFrom(const FunctionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rsh.protocol.FunctionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FunctionRequest::IsInitialized() const {
  return true;
}

void FunctionRequest::InternalSwap(FunctionRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.hash_, other->_impl_.hash_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FunctionRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[6]);
}

// ===================================================================

Environment_ValuesEntry_DoNotUse::Environment_ValuesEntry_DoNotUse() {}
Environment_ValuesEntry_DoNotUse::Environment_ValuesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Environment_ValuesEntry_DoNotUse::MergeFrom(const Environment_ValuesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Environment_ValuesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[7]);
}

// ===================================================================

class Environment::_Internal {
 public:
};

Environment::Environment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &Environment::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:rsh.protocol.Environment)
}
Environment::Environment(const Environment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Environment* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.values_)*/{}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.values_.MergeFrom(from._impl_.values_);
  // @@protoc_insertion_point(copy_constructor:rsh.protocol.Environment)
}

inline void Environment::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.values_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Environment::~Environment() {
  // @@protoc_insertion_point(destructor:rsh.protocol.Environment)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void Environment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.values_.Destruct();
  _impl_.values_.~MapField();
}

void Environment::ArenaDtor(void* object) {
  Environment* _this = reinterpret_cast< Environment* >(object);
  _this->_impl_.values_.Destruct();
}
void Environment::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Environment::Clear() {
// @@protoc_insertion_point(message_clear_start:rsh.protocol.Environment)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.values_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Environment::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, uint64> values = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.values_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Environment::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rsh.protocol.Environment)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, uint64> values = 1;
  if (!this->_internal_values().empty()) {
    using MapType = ::_pb::Map<std::string, uint64_t>;
    using WireHelper = Environment_ValuesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_values();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "rsh.protocol.Environment.ValuesEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rsh.protocol.Environment)
  return target;
}

size_t Environment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rsh.protocol.Environment)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, uint64> values = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_values_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, uint64_t >::const_iterator
      it = this->_internal_values().begin();
      it != this->_internal_values().end(); ++it) {
    total_size += Environment_ValuesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Environment::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Environment::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Environment::GetClassData() const { return &_class_data_; }


void Environment::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Environment*>(&to_msg);
  auto& from = static_cast<const Environment&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rsh.protocol.Environment)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.values_.MergeFrom(from._impl_.values_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Environment::CopyFrom(const Environment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rsh.protocol.Environment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Environment::IsInitialized() const {
  return true;
}

void Environment::InternalSwap(Environment* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.values_.InternalSwap(&other->_impl_.values_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Environment::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[8]);
}

// ===================================================================

class ValueRequest::_Internal {
 public:
};

ValueRequest::ValueRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rsh.protocol.ValueRequest)
}
ValueRequest::ValueRequest(const ValueRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ValueRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.hash_){from._impl_.hash_}
    , /*decltype(_impl_._hash_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:rsh.protocol.ValueRequest)
}

inline void ValueRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.hash_){arena}
    , /*decltype(_impl_._hash_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ValueRequest::~ValueRequest() {
  // @@protoc_insertion_point(destructor:rsh.protocol.ValueRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ValueRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.hash_.~RepeatedField();
}

void ValueRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ValueRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:rsh.protocol.ValueRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.hash_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ValueRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint64 hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_hash(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_hash(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ValueRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rsh.protocol.ValueRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 hash = 1;
  {
    int byte_size = _impl_._hash_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          1, _internal_hash(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rsh.protocol.ValueRequest)
  return target;
}

size_t ValueRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rsh.protocol.ValueRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 hash = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.hash_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._hash_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ValueRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ValueRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ValueRequest::GetClassData() const { return &_class_data_; }


void ValueRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ValueRequest*>(&to_msg);
  auto& from = static_cast<const ValueRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rsh.protocol.ValueRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.hash_.MergeFrom(from._impl_.hash_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ValueRequest::CopyFrom(const ValueRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rsh.protocol.ValueRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValueRequest::IsInitialized() const {
  return true;
}

void ValueRequest::InternalSwap(ValueRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.hash_.InternalSwap(&other->_impl_.hash_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ValueRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[9]);
}

// ===================================================================

class Value::_Internal {
 public:
};

Value::Value(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rsh.protocol.Value)
}
Value::Value(const Value& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Value* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , decltype(_impl_.hash_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    _this->_impl_.value_.Set(from._internal_value(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.hash_ = from._impl_.hash_;
  // @@protoc_insertion_point(copy_constructor:rsh.protocol.Value)
}

inline void Value::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , decltype(_impl_.hash_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Value::~Value() {
  // @@protoc_insertion_point(destructor:rsh.protocol.Value)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Value::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.value_.Destroy();
}

void Value::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Value::Clear() {
// @@protoc_insertion_point(message_clear_start:rsh.protocol.Value)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_.ClearToEmpty();
  _impl_.hash_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Value::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.hash_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Value::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rsh.protocol.Value)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 hash = 1;
  if (this->_internal_hash() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_hash(), target);
  }

  // bytes value = 2;
  if (!this->_internal_value().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rsh.protocol.Value)
  return target;
}

size_t Value::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rsh.protocol.Value)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes value = 2;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  // uint64 hash = 1;
  if (this->_internal_hash() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_hash());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Value::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Value::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Value::GetClassData() const { return &_class_data_; }


void Value::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Value*>(&to_msg);
  auto& from = static_cast<const Value&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rsh.protocol.Value)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_value().empty()) {
    _this->_internal_set_value(from._internal_value());
  }
  if (from._internal_hash() != 0) {
    _this->_internal_set_hash(from._internal_hash());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Value::CopyFrom(const Value& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rsh.protocol.Value)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Value::IsInitialized() const {
  return true;
}

void Value::InternalSwap(Value* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_, lhs_arena,
      &other->_impl_.value_, rhs_arena
  );
  swap(_impl_.hash_, other->_impl_.hash_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Value::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[10]);
}

// ===================================================================

class Values::_Internal {
 public:
};

Values::Values(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rsh.protocol.Values)
}
Values::Values(const Values& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Values* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){from._impl_.values_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:rsh.protocol.Values)
}

inline void Values::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Values::~Values() {
  // @@protoc_insertion_point(destructor:rsh.protocol.Values)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Values::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.values_.~RepeatedPtrField();
}

void Values::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Values::Clear() {
// @@protoc_insertion_point(message_clear_start:rsh.protocol.Values)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.values_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Values::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .rsh.protocol.Value values = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Values::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rsh.protocol.Values)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .rsh.protocol.Value values = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_values_size()); i < n; i++) {
    const auto& repfield = this->_internal_values(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rsh.protocol.Values)
  return target;
}

size_t Values::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rsh.protocol.Values)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .rsh.protocol.Value values = 1;
  total_size += 1UL * this->_internal_values_size();
  for (const auto& msg : this->_impl_.values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Values::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Values::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Values::GetClassData() const { return &_class_data_; }


void Values::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Values*>(&to_msg);
  auto& from = static_cast<const Values&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rsh.protocol.Values)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.values_.MergeFrom(from._impl_.values_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Values::CopyFrom(const Values& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rsh.protocol.Values)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Values::IsInitialized() const {
  return true;
}

void Values::InternalSwap(Values* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.values_.InternalSwap(&other->_impl_.values_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Values::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[11]);
}

// ===================================================================

class Empty::_Internal {
 public:
};

Empty::Empty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:rsh.protocol.Empty)
}
Empty::Empty(const Empty& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  Empty* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:rsh.protocol.Empty)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Empty::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Empty::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata Empty::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[12]);
}

// ===================================================================

class ClearCacheRequest::_Internal {
 public:
};

ClearCacheRequest::ClearCacheRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rsh.protocol.ClearCacheRequest)
}
ClearCacheRequest::ClearCacheRequest(const ClearCacheRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ClearCacheRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.hashes_){from._impl_.hashes_}
    , /*decltype(_impl_._hashes_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:rsh.protocol.ClearCacheRequest)
}

inline void ClearCacheRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.hashes_){arena}
    , /*decltype(_impl_._hashes_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ClearCacheRequest::~ClearCacheRequest() {
  // @@protoc_insertion_point(destructor:rsh.protocol.ClearCacheRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClearCacheRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.hashes_.~RepeatedField();
}

void ClearCacheRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ClearCacheRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:rsh.protocol.ClearCacheRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.hashes_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClearCacheRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint64 hashes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_hashes(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_hashes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClearCacheRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rsh.protocol.ClearCacheRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 hashes = 1;
  {
    int byte_size = _impl_._hashes_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          1, _internal_hashes(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rsh.protocol.ClearCacheRequest)
  return target;
}

size_t ClearCacheRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rsh.protocol.ClearCacheRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 hashes = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.hashes_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._hashes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClearCacheRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ClearCacheRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClearCacheRequest::GetClassData() const { return &_class_data_; }


void ClearCacheRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ClearCacheRequest*>(&to_msg);
  auto& from = static_cast<const ClearCacheRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rsh.protocol.ClearCacheRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.hashes_.MergeFrom(from._impl_.hashes_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClearCacheRequest::CopyFrom(const ClearCacheRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rsh.protocol.ClearCacheRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClearCacheRequest::IsInitialized() const {
  return true;
}

void ClearCacheRequest::InternalSwap(ClearCacheRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.hashes_.InternalSwap(&other->_impl_.hashes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClearCacheRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[13]);
}

// ===================================================================

class ClearCacheResponse::_Internal {
 public:
};

ClearCacheResponse::ClearCacheResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:rsh.protocol.ClearCacheResponse)
}
ClearCacheResponse::ClearCacheResponse(const ClearCacheResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  ClearCacheResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:rsh.protocol.ClearCacheResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClearCacheResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClearCacheResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ClearCacheResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[14]);
}

// ===================================================================

class CallContext::_Internal {
 public:
};

CallContext::CallContext(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rsh.protocol.CallContext)
}
CallContext::CallContext(const CallContext& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CallContext* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.args_statically_matched_){}
    , decltype(_impl_.correct_number_of_args_){}
    , decltype(_impl_.correct_order_of_args_){}
    , decltype(_impl_.no_missing_args_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.args_statically_matched_, &from._impl_.args_statically_matched_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.no_missing_args_) -
    reinterpret_cast<char*>(&_impl_.args_statically_matched_)) + sizeof(_impl_.no_missing_args_));
  // @@protoc_insertion_point(copy_constructor:rsh.protocol.CallContext)
}

inline void CallContext::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.args_statically_matched_){false}
    , decltype(_impl_.correct_number_of_args_){false}
    , decltype(_impl_.correct_order_of_args_){false}
    , decltype(_impl_.no_missing_args_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CallContext::~CallContext() {
  // @@protoc_insertion_point(destructor:rsh.protocol.CallContext)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CallContext::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CallContext::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CallContext::Clear() {
// @@protoc_insertion_point(message_clear_start:rsh.protocol.CallContext)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.args_statically_matched_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.no_missing_args_) -
      reinterpret_cast<char*>(&_impl_.args_statically_matched_)) + sizeof(_impl_.no_missing_args_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CallContext::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool args_statically_matched = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.args_statically_matched_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool correct_number_of_args = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.correct_number_of_args_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool correct_order_of_args = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.correct_order_of_args_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool no_missing_args = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.no_missing_args_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CallContext::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rsh.protocol.CallContext)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool args_statically_matched = 1;
  if (this->_internal_args_statically_matched() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_args_statically_matched(), target);
  }

  // bool correct_number_of_args = 2;
  if (this->_internal_correct_number_of_args() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_correct_number_of_args(), target);
  }

  // bool correct_order_of_args = 3;
  if (this->_internal_correct_order_of_args() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_correct_order_of_args(), target);
  }

  // bool no_missing_args = 4;
  if (this->_internal_no_missing_args() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_no_missing_args(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rsh.protocol.CallContext)
  return target;
}

size_t CallContext::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rsh.protocol.CallContext)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool args_statically_matched = 1;
  if (this->_internal_args_statically_matched() != 0) {
    total_size += 1 + 1;
  }

  // bool correct_number_of_args = 2;
  if (this->_internal_correct_number_of_args() != 0) {
    total_size += 1 + 1;
  }

  // bool correct_order_of_args = 3;
  if (this->_internal_correct_order_of_args() != 0) {
    total_size += 1 + 1;
  }

  // bool no_missing_args = 4;
  if (this->_internal_no_missing_args() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CallContext::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CallContext::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CallContext::GetClassData() const { return &_class_data_; }


void CallContext::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CallContext*>(&to_msg);
  auto& from = static_cast<const CallContext&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rsh.protocol.CallContext)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_args_statically_matched() != 0) {
    _this->_internal_set_args_statically_matched(from._internal_args_statically_matched());
  }
  if (from._internal_correct_number_of_args() != 0) {
    _this->_internal_set_correct_number_of_args(from._internal_correct_number_of_args());
  }
  if (from._internal_correct_order_of_args() != 0) {
    _this->_internal_set_correct_order_of_args(from._internal_correct_order_of_args());
  }
  if (from._internal_no_missing_args() != 0) {
    _this->_internal_set_no_missing_args(from._internal_no_missing_args());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CallContext::CopyFrom(const CallContext& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rsh.protocol.CallContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallContext::IsInitialized() const {
  return true;
}

void CallContext::InternalSwap(CallContext* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CallContext, _impl_.no_missing_args_)
      + sizeof(CallContext::_impl_.no_missing_args_)
      - PROTOBUF_FIELD_OFFSET(CallContext, _impl_.args_statically_matched_)>(
          reinterpret_cast<char*>(&_impl_.args_statically_matched_),
          reinterpret_cast<char*>(&other->_impl_.args_statically_matched_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CallContext::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[15]);
}

// ===================================================================

class ArgumentContext::_Internal {
 public:
  using HasBits = decltype(std::declval<ArgumentContext>()._impl_._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ArgumentContext::ArgumentContext(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rsh.protocol.ArgumentContext)
}
ArgumentContext::ArgumentContext(const ArgumentContext& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ArgumentContext* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.eager_){}
    , decltype(_impl_.reflection_){}
    , decltype(_impl_.object_){}
    , decltype(_impl_.type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.eager_, &from._impl_.eager_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.eager_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:rsh.protocol.ArgumentContext)
}

inline void ArgumentContext::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.eager_){false}
    , decltype(_impl_.reflection_){false}
    , decltype(_impl_.object_){false}
    , decltype(_impl_.type_){0}
  };
}

ArgumentContext::~ArgumentContext() {
  // @@protoc_insertion_point(destructor:rsh.protocol.ArgumentContext)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ArgumentContext::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ArgumentContext::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ArgumentContext::Clear() {
// @@protoc_insertion_point(message_clear_start:rsh.protocol.ArgumentContext)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.eager_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.object_) -
      reinterpret_cast<char*>(&_impl_.eager_)) + sizeof(_impl_.object_));
  _impl_.type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ArgumentContext::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool eager = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.eager_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool reflection = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.reflection_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool object = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.object_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .rsh.protocol.Type type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::rsh::protocol::Type>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ArgumentContext::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rsh.protocol.ArgumentContext)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool eager = 1;
  if (this->_internal_eager() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_eager(), target);
  }

  // bool reflection = 2;
  if (this->_internal_reflection() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_reflection(), target);
  }

  // bool object = 3;
  if (this->_internal_object() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_object(), target);
  }

  // optional .rsh.protocol.Type type = 4;
  if (_internal_has_type()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rsh.protocol.ArgumentContext)
  return target;
}

size_t ArgumentContext::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rsh.protocol.ArgumentContext)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool eager = 1;
  if (this->_internal_eager() != 0) {
    total_size += 1 + 1;
  }

  // bool reflection = 2;
  if (this->_internal_reflection() != 0) {
    total_size += 1 + 1;
  }

  // bool object = 3;
  if (this->_internal_object() != 0) {
    total_size += 1 + 1;
  }

  // optional .rsh.protocol.Type type = 4;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ArgumentContext::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ArgumentContext::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ArgumentContext::GetClassData() const { return &_class_data_; }


void ArgumentContext::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ArgumentContext*>(&to_msg);
  auto& from = static_cast<const ArgumentContext&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rsh.protocol.ArgumentContext)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_eager() != 0) {
    _this->_internal_set_eager(from._internal_eager());
  }
  if (from._internal_reflection() != 0) {
    _this->_internal_set_reflection(from._internal_reflection());
  }
  if (from._internal_object() != 0) {
    _this->_internal_set_object(from._internal_object());
  }
  if (from._internal_has_type()) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ArgumentContext::CopyFrom(const ArgumentContext& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rsh.protocol.ArgumentContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArgumentContext::IsInitialized() const {
  return true;
}

void ArgumentContext::InternalSwap(ArgumentContext* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ArgumentContext, _impl_.type_)
      + sizeof(ArgumentContext::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(ArgumentContext, _impl_.eager_)>(
          reinterpret_cast<char*>(&_impl_.eager_),
          reinterpret_cast<char*>(&other->_impl_.eager_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ArgumentContext::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[16]);
}

// ===================================================================

class Context::_Internal {
 public:
  static const ::rsh::protocol::CallContext& call_context(const Context* msg);
};

const ::rsh::protocol::CallContext&
Context::_Internal::call_context(const Context* msg) {
  return *msg->_impl_.call_context_;
}
Context::Context(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rsh.protocol.Context)
}
Context::Context(const Context& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Context* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.argument_context_){from._impl_.argument_context_}
    , decltype(_impl_.call_context_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_call_context()) {
    _this->_impl_.call_context_ = new ::rsh::protocol::CallContext(*from._impl_.call_context_);
  }
  // @@protoc_insertion_point(copy_constructor:rsh.protocol.Context)
}

inline void Context::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.argument_context_){arena}
    , decltype(_impl_.call_context_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Context::~Context() {
  // @@protoc_insertion_point(destructor:rsh.protocol.Context)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Context::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.argument_context_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.call_context_;
}

void Context::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Context::Clear() {
// @@protoc_insertion_point(message_clear_start:rsh.protocol.Context)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.argument_context_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.call_context_ != nullptr) {
    delete _impl_.call_context_;
  }
  _impl_.call_context_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Context::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .rsh.protocol.CallContext call_context = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_call_context(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .rsh.protocol.ArgumentContext argument_context = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_argument_context(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Context::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rsh.protocol.Context)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .rsh.protocol.CallContext call_context = 1;
  if (this->_internal_has_call_context()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::call_context(this),
        _Internal::call_context(this).GetCachedSize(), target, stream);
  }

  // repeated .rsh.protocol.ArgumentContext argument_context = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_argument_context_size()); i < n; i++) {
    const auto& repfield = this->_internal_argument_context(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rsh.protocol.Context)
  return target;
}

size_t Context::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rsh.protocol.Context)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .rsh.protocol.ArgumentContext argument_context = 2;
  total_size += 1UL * this->_internal_argument_context_size();
  for (const auto& msg : this->_impl_.argument_context_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .rsh.protocol.CallContext call_context = 1;
  if (this->_internal_has_call_context()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.call_context_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Context::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Context::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Context::GetClassData() const { return &_class_data_; }


void Context::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Context*>(&to_msg);
  auto& from = static_cast<const Context&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rsh.protocol.Context)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.argument_context_.MergeFrom(from._impl_.argument_context_);
  if (from._internal_has_call_context()) {
    _this->_internal_mutable_call_context()->::rsh::protocol::CallContext::MergeFrom(
        from._internal_call_context());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Context::CopyFrom(const Context& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rsh.protocol.Context)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Context::IsInitialized() const {
  return true;
}

void Context::InternalSwap(Context* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.argument_context_.InternalSwap(&other->_impl_.argument_context_);
  swap(_impl_.call_context_, other->_impl_.call_context_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Context::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[17]);
}

// ===================================================================

class ContextRequest::_Internal {
 public:
  static const ::rsh::protocol::Function& function(const ContextRequest* msg);
};

const ::rsh::protocol::Function&
ContextRequest::_Internal::function(const ContextRequest* msg) {
  return *msg->_impl_.function_;
}
ContextRequest::ContextRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rsh.protocol.ContextRequest)
}
ContextRequest::ContextRequest(const ContextRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ContextRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.function_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_function()) {
    _this->_impl_.function_ = new ::rsh::protocol::Function(*from._impl_.function_);
  }
  // @@protoc_insertion_point(copy_constructor:rsh.protocol.ContextRequest)
}

inline void ContextRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.function_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ContextRequest::~ContextRequest() {
  // @@protoc_insertion_point(destructor:rsh.protocol.ContextRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ContextRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.function_;
}

void ContextRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ContextRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:rsh.protocol.ContextRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.function_ != nullptr) {
    delete _impl_.function_;
  }
  _impl_.function_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContextRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .rsh.protocol.Function function = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_function(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ContextRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rsh.protocol.ContextRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .rsh.protocol.Function function = 1;
  if (this->_internal_has_function()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::function(this),
        _Internal::function(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rsh.protocol.ContextRequest)
  return target;
}

size_t ContextRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rsh.protocol.ContextRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .rsh.protocol.Function function = 1;
  if (this->_internal_has_function()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.function_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ContextRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ContextRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ContextRequest::GetClassData() const { return &_class_data_; }


void ContextRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ContextRequest*>(&to_msg);
  auto& from = static_cast<const ContextRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rsh.protocol.ContextRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_function()) {
    _this->_internal_mutable_function()->::rsh::protocol::Function::MergeFrom(
        from._internal_function());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ContextRequest::CopyFrom(const ContextRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rsh.protocol.ContextRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContextRequest::IsInitialized() const {
  return true;
}

void ContextRequest::InternalSwap(ContextRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.function_, other->_impl_.function_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ContextRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[18]);
}

// ===================================================================

class TestFeedback::_Internal {
 public:
};

TestFeedback::TestFeedback(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rsh.protocol.TestFeedback)
}
TestFeedback::TestFeedback(const TestFeedback& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TestFeedback* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.test_lattice_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.test_lattice_ = from._impl_.test_lattice_;
  // @@protoc_insertion_point(copy_constructor:rsh.protocol.TestFeedback)
}

inline void TestFeedback::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.test_lattice_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TestFeedback::~TestFeedback() {
  // @@protoc_insertion_point(destructor:rsh.protocol.TestFeedback)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestFeedback::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TestFeedback::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TestFeedback::Clear() {
// @@protoc_insertion_point(message_clear_start:rsh.protocol.TestFeedback)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.test_lattice_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestFeedback::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .rsh.protocol.TestLattice test_lattice = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_test_lattice(static_cast<::rsh::protocol::TestLattice>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestFeedback::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rsh.protocol.TestFeedback)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .rsh.protocol.TestLattice test_lattice = 1;
  if (this->_internal_test_lattice() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_test_lattice(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rsh.protocol.TestFeedback)
  return target;
}

size_t TestFeedback::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rsh.protocol.TestFeedback)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .rsh.protocol.TestLattice test_lattice = 1;
  if (this->_internal_test_lattice() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_test_lattice());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestFeedback::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TestFeedback::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestFeedback::GetClassData() const { return &_class_data_; }


void TestFeedback::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TestFeedback*>(&to_msg);
  auto& from = static_cast<const TestFeedback&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rsh.protocol.TestFeedback)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_test_lattice() != 0) {
    _this->_internal_set_test_lattice(from._internal_test_lattice());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestFeedback::CopyFrom(const TestFeedback& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rsh.protocol.TestFeedback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestFeedback::IsInitialized() const {
  return true;
}

void TestFeedback::InternalSwap(TestFeedback* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.test_lattice_, other->_impl_.test_lattice_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestFeedback::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[19]);
}

// ===================================================================

class CallFeedback::_Internal {
 public:
};

CallFeedback::CallFeedback(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rsh.protocol.CallFeedback)
}
CallFeedback::CallFeedback(const CallFeedback& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CallFeedback* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.n_calls_){}
    , decltype(_impl_.callee_hash_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.n_calls_, &from._impl_.n_calls_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.callee_hash_) -
    reinterpret_cast<char*>(&_impl_.n_calls_)) + sizeof(_impl_.callee_hash_));
  // @@protoc_insertion_point(copy_constructor:rsh.protocol.CallFeedback)
}

inline void CallFeedback::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.n_calls_){int64_t{0}}
    , decltype(_impl_.callee_hash_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CallFeedback::~CallFeedback() {
  // @@protoc_insertion_point(destructor:rsh.protocol.CallFeedback)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CallFeedback::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CallFeedback::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CallFeedback::Clear() {
// @@protoc_insertion_point(message_clear_start:rsh.protocol.CallFeedback)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.n_calls_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.callee_hash_) -
      reinterpret_cast<char*>(&_impl_.n_calls_)) + sizeof(_impl_.callee_hash_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CallFeedback::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 n_calls = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.n_calls_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 callee_hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.callee_hash_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CallFeedback::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rsh.protocol.CallFeedback)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 n_calls = 1;
  if (this->_internal_n_calls() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_n_calls(), target);
  }

  // uint64 callee_hash = 2;
  if (this->_internal_callee_hash() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_callee_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rsh.protocol.CallFeedback)
  return target;
}

size_t CallFeedback::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rsh.protocol.CallFeedback)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 n_calls = 1;
  if (this->_internal_n_calls() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_n_calls());
  }

  // uint64 callee_hash = 2;
  if (this->_internal_callee_hash() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_callee_hash());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CallFeedback::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CallFeedback::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CallFeedback::GetClassData() const { return &_class_data_; }


void CallFeedback::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CallFeedback*>(&to_msg);
  auto& from = static_cast<const CallFeedback&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rsh.protocol.CallFeedback)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_n_calls() != 0) {
    _this->_internal_set_n_calls(from._internal_n_calls());
  }
  if (from._internal_callee_hash() != 0) {
    _this->_internal_set_callee_hash(from._internal_callee_hash());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CallFeedback::CopyFrom(const CallFeedback& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rsh.protocol.CallFeedback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallFeedback::IsInitialized() const {
  return true;
}

void CallFeedback::InternalSwap(CallFeedback* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CallFeedback, _impl_.callee_hash_)
      + sizeof(CallFeedback::_impl_.callee_hash_)
      - PROTOBUF_FIELD_OFFSET(CallFeedback, _impl_.n_calls_)>(
          reinterpret_cast<char*>(&_impl_.n_calls_),
          reinterpret_cast<char*>(&other->_impl_.n_calls_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CallFeedback::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[20]);
}

// ===================================================================

class ValueFeedback::_Internal {
 public:
};

ValueFeedback::ValueFeedback(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rsh.protocol.ValueFeedback)
}
ValueFeedback::ValueFeedback(const ValueFeedback& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ValueFeedback* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.scalar_){}
    , decltype(_impl_.object_){}
    , decltype(_impl_.accessed_attributes_){}
    , decltype(_impl_.vectorizable_){}
    , decltype(_impl_.is_promise_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.scalar_, &from._impl_.scalar_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_promise_) -
    reinterpret_cast<char*>(&_impl_.scalar_)) + sizeof(_impl_.is_promise_));
  // @@protoc_insertion_point(copy_constructor:rsh.protocol.ValueFeedback)
}

inline void ValueFeedback::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.scalar_){false}
    , decltype(_impl_.object_){false}
    , decltype(_impl_.accessed_attributes_){false}
    , decltype(_impl_.vectorizable_){false}
    , decltype(_impl_.is_promise_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ValueFeedback::~ValueFeedback() {
  // @@protoc_insertion_point(destructor:rsh.protocol.ValueFeedback)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ValueFeedback::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ValueFeedback::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ValueFeedback::Clear() {
// @@protoc_insertion_point(message_clear_start:rsh.protocol.ValueFeedback)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.scalar_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.is_promise_) -
      reinterpret_cast<char*>(&_impl_.scalar_)) + sizeof(_impl_.is_promise_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ValueFeedback::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool scalar = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.scalar_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool object = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.object_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool accessed_attributes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.accessed_attributes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool vectorizable = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.vectorizable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_promise = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.is_promise_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ValueFeedback::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rsh.protocol.ValueFeedback)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool scalar = 1;
  if (this->_internal_scalar() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_scalar(), target);
  }

  // bool object = 2;
  if (this->_internal_object() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_object(), target);
  }

  // bool accessed_attributes = 3;
  if (this->_internal_accessed_attributes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_accessed_attributes(), target);
  }

  // bool vectorizable = 4;
  if (this->_internal_vectorizable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_vectorizable(), target);
  }

  // bool is_promise = 5;
  if (this->_internal_is_promise() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_is_promise(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rsh.protocol.ValueFeedback)
  return target;
}

size_t ValueFeedback::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rsh.protocol.ValueFeedback)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool scalar = 1;
  if (this->_internal_scalar() != 0) {
    total_size += 1 + 1;
  }

  // bool object = 2;
  if (this->_internal_object() != 0) {
    total_size += 1 + 1;
  }

  // bool accessed_attributes = 3;
  if (this->_internal_accessed_attributes() != 0) {
    total_size += 1 + 1;
  }

  // bool vectorizable = 4;
  if (this->_internal_vectorizable() != 0) {
    total_size += 1 + 1;
  }

  // bool is_promise = 5;
  if (this->_internal_is_promise() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ValueFeedback::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ValueFeedback::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ValueFeedback::GetClassData() const { return &_class_data_; }


void ValueFeedback::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ValueFeedback*>(&to_msg);
  auto& from = static_cast<const ValueFeedback&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rsh.protocol.ValueFeedback)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_scalar() != 0) {
    _this->_internal_set_scalar(from._internal_scalar());
  }
  if (from._internal_object() != 0) {
    _this->_internal_set_object(from._internal_object());
  }
  if (from._internal_accessed_attributes() != 0) {
    _this->_internal_set_accessed_attributes(from._internal_accessed_attributes());
  }
  if (from._internal_vectorizable() != 0) {
    _this->_internal_set_vectorizable(from._internal_vectorizable());
  }
  if (from._internal_is_promise() != 0) {
    _this->_internal_set_is_promise(from._internal_is_promise());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ValueFeedback::CopyFrom(const ValueFeedback& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rsh.protocol.ValueFeedback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValueFeedback::IsInitialized() const {
  return true;
}

void ValueFeedback::InternalSwap(ValueFeedback* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ValueFeedback, _impl_.is_promise_)
      + sizeof(ValueFeedback::_impl_.is_promise_)
      - PROTOBUF_FIELD_OFFSET(ValueFeedback, _impl_.scalar_)>(
          reinterpret_cast<char*>(&_impl_.scalar_),
          reinterpret_cast<char*>(&other->_impl_.scalar_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ValueFeedback::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[21]);
}

// ===================================================================

class TypeFeedback_Feedback::_Internal {
 public:
  static const ::rsh::protocol::TestFeedback& test_feedback(const TypeFeedback_Feedback* msg);
  static const ::rsh::protocol::CallFeedback& call_feedback(const TypeFeedback_Feedback* msg);
  static const ::rsh::protocol::ValueFeedback& value_feedback(const TypeFeedback_Feedback* msg);
};

const ::rsh::protocol::TestFeedback&
TypeFeedback_Feedback::_Internal::test_feedback(const TypeFeedback_Feedback* msg) {
  return *msg->_impl_.feedback_.test_feedback_;
}
const ::rsh::protocol::CallFeedback&
TypeFeedback_Feedback::_Internal::call_feedback(const TypeFeedback_Feedback* msg) {
  return *msg->_impl_.feedback_.call_feedback_;
}
const ::rsh::protocol::ValueFeedback&
TypeFeedback_Feedback::_Internal::value_feedback(const TypeFeedback_Feedback* msg) {
  return *msg->_impl_.feedback_.value_feedback_;
}
void TypeFeedback_Feedback::set_allocated_test_feedback(::rsh::protocol::TestFeedback* test_feedback) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_feedback();
  if (test_feedback) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(test_feedback);
    if (message_arena != submessage_arena) {
      test_feedback = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, test_feedback, submessage_arena);
    }
    set_has_test_feedback();
    _impl_.feedback_.test_feedback_ = test_feedback;
  }
  // @@protoc_insertion_point(field_set_allocated:rsh.protocol.TypeFeedback.Feedback.test_feedback)
}
void TypeFeedback_Feedback::set_allocated_call_feedback(::rsh::protocol::CallFeedback* call_feedback) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_feedback();
  if (call_feedback) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(call_feedback);
    if (message_arena != submessage_arena) {
      call_feedback = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, call_feedback, submessage_arena);
    }
    set_has_call_feedback();
    _impl_.feedback_.call_feedback_ = call_feedback;
  }
  // @@protoc_insertion_point(field_set_allocated:rsh.protocol.TypeFeedback.Feedback.call_feedback)
}
void TypeFeedback_Feedback::set_allocated_value_feedback(::rsh::protocol::ValueFeedback* value_feedback) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_feedback();
  if (value_feedback) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(value_feedback);
    if (message_arena != submessage_arena) {
      value_feedback = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value_feedback, submessage_arena);
    }
    set_has_value_feedback();
    _impl_.feedback_.value_feedback_ = value_feedback;
  }
  // @@protoc_insertion_point(field_set_allocated:rsh.protocol.TypeFeedback.Feedback.value_feedback)
}
TypeFeedback_Feedback::TypeFeedback_Feedback(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rsh.protocol.TypeFeedback.Feedback)
}
TypeFeedback_Feedback::TypeFeedback_Feedback(const TypeFeedback_Feedback& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TypeFeedback_Feedback* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.feedback_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_feedback();
  switch (from.feedback_case()) {
    case kTestFeedback: {
      _this->_internal_mutable_test_feedback()->::rsh::protocol::TestFeedback::MergeFrom(
          from._internal_test_feedback());
      break;
    }
    case kCallFeedback: {
      _this->_internal_mutable_call_feedback()->::rsh::protocol::CallFeedback::MergeFrom(
          from._internal_call_feedback());
      break;
    }
    case kValueFeedback: {
      _this->_internal_mutable_value_feedback()->::rsh::protocol::ValueFeedback::MergeFrom(
          from._internal_value_feedback());
      break;
    }
    case FEEDBACK_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:rsh.protocol.TypeFeedback.Feedback)
}

inline void TypeFeedback_Feedback::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.feedback_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_feedback();
}

TypeFeedback_Feedback::~TypeFeedback_Feedback() {
  // @@protoc_insertion_point(destructor:rsh.protocol.TypeFeedback.Feedback)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TypeFeedback_Feedback::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_feedback()) {
    clear_feedback();
  }
}

void TypeFeedback_Feedback::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TypeFeedback_Feedback::clear_feedback() {
// @@protoc_insertion_point(one_of_clear_start:rsh.protocol.TypeFeedback.Feedback)
  switch (feedback_case()) {
    case kTestFeedback: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.feedback_.test_feedback_;
      }
      break;
    }
    case kCallFeedback: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.feedback_.call_feedback_;
      }
      break;
    }
    case kValueFeedback: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.feedback_.value_feedback_;
      }
      break;
    }
    case FEEDBACK_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = FEEDBACK_NOT_SET;
}


void TypeFeedback_Feedback::Clear() {
// @@protoc_insertion_point(message_clear_start:rsh.protocol.TypeFeedback.Feedback)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_feedback();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TypeFeedback_Feedback::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .rsh.protocol.TestFeedback test_feedback = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_test_feedback(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .rsh.protocol.CallFeedback call_feedback = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_call_feedback(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .rsh.protocol.ValueFeedback value_feedback = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_value_feedback(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TypeFeedback_Feedback::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rsh.protocol.TypeFeedback.Feedback)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .rsh.protocol.TestFeedback test_feedback = 1;
  if (_internal_has_test_feedback()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::test_feedback(this),
        _Internal::test_feedback(this).GetCachedSize(), target, stream);
  }

  // .rsh.protocol.CallFeedback call_feedback = 2;
  if (_internal_has_call_feedback()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::call_feedback(this),
        _Internal::call_feedback(this).GetCachedSize(), target, stream);
  }

  // .rsh.protocol.ValueFeedback value_feedback = 3;
  if (_internal_has_value_feedback()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::value_feedback(this),
        _Internal::value_feedback(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rsh.protocol.TypeFeedback.Feedback)
  return target;
}

size_t TypeFeedback_Feedback::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rsh.protocol.TypeFeedback.Feedback)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (feedback_case()) {
    // .rsh.protocol.TestFeedback test_feedback = 1;
    case kTestFeedback: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.feedback_.test_feedback_);
      break;
    }
    // .rsh.protocol.CallFeedback call_feedback = 2;
    case kCallFeedback: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.feedback_.call_feedback_);
      break;
    }
    // .rsh.protocol.ValueFeedback value_feedback = 3;
    case kValueFeedback: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.feedback_.value_feedback_);
      break;
    }
    case FEEDBACK_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TypeFeedback_Feedback::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TypeFeedback_Feedback::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TypeFeedback_Feedback::GetClassData() const { return &_class_data_; }


void TypeFeedback_Feedback::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TypeFeedback_Feedback*>(&to_msg);
  auto& from = static_cast<const TypeFeedback_Feedback&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rsh.protocol.TypeFeedback.Feedback)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.feedback_case()) {
    case kTestFeedback: {
      _this->_internal_mutable_test_feedback()->::rsh::protocol::TestFeedback::MergeFrom(
          from._internal_test_feedback());
      break;
    }
    case kCallFeedback: {
      _this->_internal_mutable_call_feedback()->::rsh::protocol::CallFeedback::MergeFrom(
          from._internal_call_feedback());
      break;
    }
    case kValueFeedback: {
      _this->_internal_mutable_value_feedback()->::rsh::protocol::ValueFeedback::MergeFrom(
          from._internal_value_feedback());
      break;
    }
    case FEEDBACK_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TypeFeedback_Feedback::CopyFrom(const TypeFeedback_Feedback& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rsh.protocol.TypeFeedback.Feedback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TypeFeedback_Feedback::IsInitialized() const {
  return true;
}

void TypeFeedback_Feedback::InternalSwap(TypeFeedback_Feedback* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.feedback_, other->_impl_.feedback_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TypeFeedback_Feedback::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[22]);
}

// ===================================================================

TypeFeedback_TypesEntry_DoNotUse::TypeFeedback_TypesEntry_DoNotUse() {}
TypeFeedback_TypesEntry_DoNotUse::TypeFeedback_TypesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TypeFeedback_TypesEntry_DoNotUse::MergeFrom(const TypeFeedback_TypesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TypeFeedback_TypesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[23]);
}

// ===================================================================

class TypeFeedback::_Internal {
 public:
};

TypeFeedback::TypeFeedback(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &TypeFeedback::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:rsh.protocol.TypeFeedback)
}
TypeFeedback::TypeFeedback(const TypeFeedback& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TypeFeedback* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.types_)*/{}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.types_.MergeFrom(from._impl_.types_);
  // @@protoc_insertion_point(copy_constructor:rsh.protocol.TypeFeedback)
}

inline void TypeFeedback::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.types_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TypeFeedback::~TypeFeedback() {
  // @@protoc_insertion_point(destructor:rsh.protocol.TypeFeedback)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void TypeFeedback::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.types_.Destruct();
  _impl_.types_.~MapField();
}

void TypeFeedback::ArenaDtor(void* object) {
  TypeFeedback* _this = reinterpret_cast< TypeFeedback* >(object);
  _this->_impl_.types_.Destruct();
}
void TypeFeedback::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TypeFeedback::Clear() {
// @@protoc_insertion_point(message_clear_start:rsh.protocol.TypeFeedback)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.types_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TypeFeedback::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<int64, .rsh.protocol.TypeFeedback.Feedback> types = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.types_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TypeFeedback::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rsh.protocol.TypeFeedback)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int64, .rsh.protocol.TypeFeedback.Feedback> types = 2;
  if (!this->_internal_types().empty()) {
    using MapType = ::_pb::Map<int64_t, ::rsh::protocol::TypeFeedback_Feedback>;
    using WireHelper = TypeFeedback_TypesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_types();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rsh.protocol.TypeFeedback)
  return target;
}

size_t TypeFeedback::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rsh.protocol.TypeFeedback)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int64, .rsh.protocol.TypeFeedback.Feedback> types = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_types_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int64_t, ::rsh::protocol::TypeFeedback_Feedback >::const_iterator
      it = this->_internal_types().begin();
      it != this->_internal_types().end(); ++it) {
    total_size += TypeFeedback_TypesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TypeFeedback::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TypeFeedback::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TypeFeedback::GetClassData() const { return &_class_data_; }


void TypeFeedback::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TypeFeedback*>(&to_msg);
  auto& from = static_cast<const TypeFeedback&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rsh.protocol.TypeFeedback)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.types_.MergeFrom(from._impl_.types_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TypeFeedback::CopyFrom(const TypeFeedback& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rsh.protocol.TypeFeedback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TypeFeedback::IsInitialized() const {
  return true;
}

void TypeFeedback::InternalSwap(TypeFeedback* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.types_.InternalSwap(&other->_impl_.types_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TypeFeedback::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[24]);
}

// ===================================================================

class FeedbackRequest::_Internal {
 public:
  static const ::rsh::protocol::Function& function(const FeedbackRequest* msg);
};

const ::rsh::protocol::Function&
FeedbackRequest::_Internal::function(const FeedbackRequest* msg) {
  return *msg->_impl_.function_;
}
FeedbackRequest::FeedbackRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rsh.protocol.FeedbackRequest)
}
FeedbackRequest::FeedbackRequest(const FeedbackRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FeedbackRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.function_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_function()) {
    _this->_impl_.function_ = new ::rsh::protocol::Function(*from._impl_.function_);
  }
  // @@protoc_insertion_point(copy_constructor:rsh.protocol.FeedbackRequest)
}

inline void FeedbackRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.function_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FeedbackRequest::~FeedbackRequest() {
  // @@protoc_insertion_point(destructor:rsh.protocol.FeedbackRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FeedbackRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.function_;
}

void FeedbackRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FeedbackRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:rsh.protocol.FeedbackRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.function_ != nullptr) {
    delete _impl_.function_;
  }
  _impl_.function_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FeedbackRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .rsh.protocol.Function function = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_function(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FeedbackRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rsh.protocol.FeedbackRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .rsh.protocol.Function function = 1;
  if (this->_internal_has_function()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::function(this),
        _Internal::function(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rsh.protocol.FeedbackRequest)
  return target;
}

size_t FeedbackRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rsh.protocol.FeedbackRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .rsh.protocol.Function function = 1;
  if (this->_internal_has_function()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.function_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FeedbackRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FeedbackRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FeedbackRequest::GetClassData() const { return &_class_data_; }


void FeedbackRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FeedbackRequest*>(&to_msg);
  auto& from = static_cast<const FeedbackRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rsh.protocol.FeedbackRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_function()) {
    _this->_internal_mutable_function()->::rsh::protocol::Function::MergeFrom(
        from._internal_function());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FeedbackRequest::CopyFrom(const FeedbackRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rsh.protocol.FeedbackRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeedbackRequest::IsInitialized() const {
  return true;
}

void FeedbackRequest::InternalSwap(FeedbackRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.function_, other->_impl_.function_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FeedbackRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[25]);
}

// ===================================================================

class PackageSource::_Internal {
 public:
};

PackageSource::PackageSource(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rsh.protocol.PackageSource)
}
PackageSource::PackageSource(const PackageSource& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PackageSource* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.source_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_source();
  switch (from.source_case()) {
    case kRMirror: {
      _this->_internal_set_r_mirror(from._internal_r_mirror());
      break;
    }
    case kGithubUrl: {
      _this->_internal_set_github_url(from._internal_github_url());
      break;
    }
    case SOURCE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:rsh.protocol.PackageSource)
}

inline void PackageSource::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.source_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_source();
}

PackageSource::~PackageSource() {
  // @@protoc_insertion_point(destructor:rsh.protocol.PackageSource)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PackageSource::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_source()) {
    clear_source();
  }
}

void PackageSource::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PackageSource::clear_source() {
// @@protoc_insertion_point(one_of_clear_start:rsh.protocol.PackageSource)
  switch (source_case()) {
    case kRMirror: {
      _impl_.source_.r_mirror_.Destroy();
      break;
    }
    case kGithubUrl: {
      _impl_.source_.github_url_.Destroy();
      break;
    }
    case SOURCE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = SOURCE_NOT_SET;
}


void PackageSource::Clear() {
// @@protoc_insertion_point(message_clear_start:rsh.protocol.PackageSource)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_source();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PackageSource::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string r_mirror = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_r_mirror();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rsh.protocol.PackageSource.r_mirror"));
        } else
          goto handle_unusual;
        continue;
      // string github_url = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_github_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rsh.protocol.PackageSource.github_url"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PackageSource::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rsh.protocol.PackageSource)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string r_mirror = 2;
  if (_internal_has_r_mirror()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_r_mirror().data(), static_cast<int>(this->_internal_r_mirror().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rsh.protocol.PackageSource.r_mirror");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_r_mirror(), target);
  }

  // string github_url = 3;
  if (_internal_has_github_url()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_github_url().data(), static_cast<int>(this->_internal_github_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rsh.protocol.PackageSource.github_url");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_github_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rsh.protocol.PackageSource)
  return target;
}

size_t PackageSource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rsh.protocol.PackageSource)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (source_case()) {
    // string r_mirror = 2;
    case kRMirror: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_r_mirror());
      break;
    }
    // string github_url = 3;
    case kGithubUrl: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_github_url());
      break;
    }
    case SOURCE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PackageSource::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PackageSource::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PackageSource::GetClassData() const { return &_class_data_; }


void PackageSource::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PackageSource*>(&to_msg);
  auto& from = static_cast<const PackageSource&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rsh.protocol.PackageSource)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.source_case()) {
    case kRMirror: {
      _this->_internal_set_r_mirror(from._internal_r_mirror());
      break;
    }
    case kGithubUrl: {
      _this->_internal_set_github_url(from._internal_github_url());
      break;
    }
    case SOURCE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PackageSource::CopyFrom(const PackageSource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rsh.protocol.PackageSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PackageSource::IsInitialized() const {
  return true;
}

void PackageSource::InternalSwap(PackageSource* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.source_, other->_impl_.source_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata PackageSource::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[26]);
}

// ===================================================================

class Package::_Internal {
 public:
  using HasBits = decltype(std::declval<Package>()._impl_._has_bits_);
  static const ::rsh::protocol::Version& version(const Package* msg);
  static const ::rsh::protocol::PackageSource& source(const Package* msg);
  static void set_has_source(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::rsh::protocol::Version&
Package::_Internal::version(const Package* msg) {
  return *msg->_impl_.version_;
}
const ::rsh::protocol::PackageSource&
Package::_Internal::source(const Package* msg) {
  return *msg->_impl_.source_;
}
Package::Package(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rsh.protocol.Package)
}
Package::Package(const Package& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Package* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.function_hashes_){from._impl_.function_hashes_}
    , /*decltype(_impl_._function_hashes_cached_byte_size_)*/{0}
    , decltype(_impl_.name_){}
    , decltype(_impl_.version_){nullptr}
    , decltype(_impl_.source_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_version()) {
    _this->_impl_.version_ = new ::rsh::protocol::Version(*from._impl_.version_);
  }
  if (from._internal_has_source()) {
    _this->_impl_.source_ = new ::rsh::protocol::PackageSource(*from._impl_.source_);
  }
  // @@protoc_insertion_point(copy_constructor:rsh.protocol.Package)
}

inline void Package::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.function_hashes_){arena}
    , /*decltype(_impl_._function_hashes_cached_byte_size_)*/{0}
    , decltype(_impl_.name_){}
    , decltype(_impl_.version_){nullptr}
    , decltype(_impl_.source_){nullptr}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Package::~Package() {
  // @@protoc_insertion_point(destructor:rsh.protocol.Package)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Package::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.function_hashes_.~RepeatedField();
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.version_;
  if (this != internal_default_instance()) delete _impl_.source_;
}

void Package::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Package::Clear() {
// @@protoc_insertion_point(message_clear_start:rsh.protocol.Package)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.function_hashes_.Clear();
  _impl_.name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.version_ != nullptr) {
    delete _impl_.version_;
  }
  _impl_.version_ = nullptr;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.source_ != nullptr);
    _impl_.source_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Package::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rsh.protocol.Package.name"));
        } else
          goto handle_unusual;
        continue;
      // .rsh.protocol.Version version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_version(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 function_hashes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_function_hashes(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_function_hashes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .rsh.protocol.PackageSource source = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_source(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Package::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rsh.protocol.Package)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rsh.protocol.Package.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .rsh.protocol.Version version = 2;
  if (this->_internal_has_version()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::version(this),
        _Internal::version(this).GetCachedSize(), target, stream);
  }

  // repeated uint64 function_hashes = 4;
  {
    int byte_size = _impl_._function_hashes_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          4, _internal_function_hashes(), byte_size, target);
    }
  }

  // optional .rsh.protocol.PackageSource source = 5;
  if (_internal_has_source()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::source(this),
        _Internal::source(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rsh.protocol.Package)
  return target;
}

size_t Package::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rsh.protocol.Package)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 function_hashes = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.function_hashes_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._function_hashes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .rsh.protocol.Version version = 2;
  if (this->_internal_has_version()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.version_);
  }

  // optional .rsh.protocol.PackageSource source = 5;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.source_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Package::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Package::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Package::GetClassData() const { return &_class_data_; }


void Package::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Package*>(&to_msg);
  auto& from = static_cast<const Package&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rsh.protocol.Package)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.function_hashes_.MergeFrom(from._impl_.function_hashes_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_has_version()) {
    _this->_internal_mutable_version()->::rsh::protocol::Version::MergeFrom(
        from._internal_version());
  }
  if (from._internal_has_source()) {
    _this->_internal_mutable_source()->::rsh::protocol::PackageSource::MergeFrom(
        from._internal_source());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Package::CopyFrom(const Package& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rsh.protocol.Package)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Package::IsInitialized() const {
  return true;
}

void Package::InternalSwap(Package* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.function_hashes_.InternalSwap(&other->_impl_.function_hashes_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Package, _impl_.source_)
      + sizeof(Package::_impl_.source_)
      - PROTOBUF_FIELD_OFFSET(Package, _impl_.version_)>(
          reinterpret_cast<char*>(&_impl_.version_),
          reinterpret_cast<char*>(&other->_impl_.version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Package::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[27]);
}

// ===================================================================

class PackageRequest::_Internal {
 public:
};

PackageRequest::PackageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rsh.protocol.PackageRequest)
}
PackageRequest::PackageRequest(const PackageRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PackageRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.hash_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.hash_ = from._impl_.hash_;
  // @@protoc_insertion_point(copy_constructor:rsh.protocol.PackageRequest)
}

inline void PackageRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.hash_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PackageRequest::~PackageRequest() {
  // @@protoc_insertion_point(destructor:rsh.protocol.PackageRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PackageRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PackageRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PackageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:rsh.protocol.PackageRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.hash_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PackageRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.hash_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PackageRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rsh.protocol.PackageRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 hash = 1;
  if (this->_internal_hash() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rsh.protocol.PackageRequest)
  return target;
}

size_t PackageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rsh.protocol.PackageRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 hash = 1;
  if (this->_internal_hash() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_hash());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PackageRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PackageRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PackageRequest::GetClassData() const { return &_class_data_; }


void PackageRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PackageRequest*>(&to_msg);
  auto& from = static_cast<const PackageRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rsh.protocol.PackageRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_hash() != 0) {
    _this->_internal_set_hash(from._internal_hash());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PackageRequest::CopyFrom(const PackageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rsh.protocol.PackageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PackageRequest::IsInitialized() const {
  return true;
}

void PackageRequest::InternalSwap(PackageRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.hash_, other->_impl_.hash_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PackageRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[28]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace protocol
}  // namespace rsh
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::rsh::protocol::Version*
Arena::CreateMaybeMessage< ::rsh::protocol::Version >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rsh::protocol::Version >(arena);
}
template<> PROTOBUF_NOINLINE ::rsh::protocol::InitRequest*
Arena::CreateMaybeMessage< ::rsh::protocol::InitRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rsh::protocol::InitRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::rsh::protocol::InitResponse*
Arena::CreateMaybeMessage< ::rsh::protocol::InitResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rsh::protocol::InitResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::rsh::protocol::CompileRequest*
Arena::CreateMaybeMessage< ::rsh::protocol::CompileRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rsh::protocol::CompileRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::rsh::protocol::CompileResponse*
Arena::CreateMaybeMessage< ::rsh::protocol::CompileResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rsh::protocol::CompileResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::rsh::protocol::Function*
Arena::CreateMaybeMessage< ::rsh::protocol::Function >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rsh::protocol::Function >(arena);
}
template<> PROTOBUF_NOINLINE ::rsh::protocol::FunctionRequest*
Arena::CreateMaybeMessage< ::rsh::protocol::FunctionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rsh::protocol::FunctionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::rsh::protocol::Environment_ValuesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::rsh::protocol::Environment_ValuesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rsh::protocol::Environment_ValuesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::rsh::protocol::Environment*
Arena::CreateMaybeMessage< ::rsh::protocol::Environment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rsh::protocol::Environment >(arena);
}
template<> PROTOBUF_NOINLINE ::rsh::protocol::ValueRequest*
Arena::CreateMaybeMessage< ::rsh::protocol::ValueRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rsh::protocol::ValueRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::rsh::protocol::Value*
Arena::CreateMaybeMessage< ::rsh::protocol::Value >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rsh::protocol::Value >(arena);
}
template<> PROTOBUF_NOINLINE ::rsh::protocol::Values*
Arena::CreateMaybeMessage< ::rsh::protocol::Values >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rsh::protocol::Values >(arena);
}
template<> PROTOBUF_NOINLINE ::rsh::protocol::Empty*
Arena::CreateMaybeMessage< ::rsh::protocol::Empty >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rsh::protocol::Empty >(arena);
}
template<> PROTOBUF_NOINLINE ::rsh::protocol::ClearCacheRequest*
Arena::CreateMaybeMessage< ::rsh::protocol::ClearCacheRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rsh::protocol::ClearCacheRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::rsh::protocol::ClearCacheResponse*
Arena::CreateMaybeMessage< ::rsh::protocol::ClearCacheResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rsh::protocol::ClearCacheResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::rsh::protocol::CallContext*
Arena::CreateMaybeMessage< ::rsh::protocol::CallContext >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rsh::protocol::CallContext >(arena);
}
template<> PROTOBUF_NOINLINE ::rsh::protocol::ArgumentContext*
Arena::CreateMaybeMessage< ::rsh::protocol::ArgumentContext >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rsh::protocol::ArgumentContext >(arena);
}
template<> PROTOBUF_NOINLINE ::rsh::protocol::Context*
Arena::CreateMaybeMessage< ::rsh::protocol::Context >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rsh::protocol::Context >(arena);
}
template<> PROTOBUF_NOINLINE ::rsh::protocol::ContextRequest*
Arena::CreateMaybeMessage< ::rsh::protocol::ContextRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rsh::protocol::ContextRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::rsh::protocol::TestFeedback*
Arena::CreateMaybeMessage< ::rsh::protocol::TestFeedback >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rsh::protocol::TestFeedback >(arena);
}
template<> PROTOBUF_NOINLINE ::rsh::protocol::CallFeedback*
Arena::CreateMaybeMessage< ::rsh::protocol::CallFeedback >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rsh::protocol::CallFeedback >(arena);
}
template<> PROTOBUF_NOINLINE ::rsh::protocol::ValueFeedback*
Arena::CreateMaybeMessage< ::rsh::protocol::ValueFeedback >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rsh::protocol::ValueFeedback >(arena);
}
template<> PROTOBUF_NOINLINE ::rsh::protocol::TypeFeedback_Feedback*
Arena::CreateMaybeMessage< ::rsh::protocol::TypeFeedback_Feedback >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rsh::protocol::TypeFeedback_Feedback >(arena);
}
template<> PROTOBUF_NOINLINE ::rsh::protocol::TypeFeedback_TypesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::rsh::protocol::TypeFeedback_TypesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rsh::protocol::TypeFeedback_TypesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::rsh::protocol::TypeFeedback*
Arena::CreateMaybeMessage< ::rsh::protocol::TypeFeedback >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rsh::protocol::TypeFeedback >(arena);
}
template<> PROTOBUF_NOINLINE ::rsh::protocol::FeedbackRequest*
Arena::CreateMaybeMessage< ::rsh::protocol::FeedbackRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rsh::protocol::FeedbackRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::rsh::protocol::PackageSource*
Arena::CreateMaybeMessage< ::rsh::protocol::PackageSource >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rsh::protocol::PackageSource >(arena);
}
template<> PROTOBUF_NOINLINE ::rsh::protocol::Package*
Arena::CreateMaybeMessage< ::rsh::protocol::Package >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rsh::protocol::Package >(arena);
}
template<> PROTOBUF_NOINLINE ::rsh::protocol::PackageRequest*
Arena::CreateMaybeMessage< ::rsh::protocol::PackageRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rsh::protocol::PackageRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
