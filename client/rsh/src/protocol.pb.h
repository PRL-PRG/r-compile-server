// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protocol_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protocol_2eproto;
namespace rsh {
namespace server {
namespace protocol {
class CompileRequest;
struct CompileRequestDefaultTypeInternal;
extern CompileRequestDefaultTypeInternal _CompileRequest_default_instance_;
class CompileResponse;
struct CompileResponseDefaultTypeInternal;
extern CompileResponseDefaultTypeInternal _CompileResponse_default_instance_;
class CompiledFunction;
struct CompiledFunctionDefaultTypeInternal;
extern CompiledFunctionDefaultTypeInternal _CompiledFunction_default_instance_;
class HandshakeRequest;
struct HandshakeRequestDefaultTypeInternal;
extern HandshakeRequestDefaultTypeInternal _HandshakeRequest_default_instance_;
class Request;
struct RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
}  // namespace protocol
}  // namespace server
}  // namespace rsh
PROTOBUF_NAMESPACE_OPEN
template<> ::rsh::server::protocol::CompileRequest* Arena::CreateMaybeMessage<::rsh::server::protocol::CompileRequest>(Arena*);
template<> ::rsh::server::protocol::CompileResponse* Arena::CreateMaybeMessage<::rsh::server::protocol::CompileResponse>(Arena*);
template<> ::rsh::server::protocol::CompiledFunction* Arena::CreateMaybeMessage<::rsh::server::protocol::CompiledFunction>(Arena*);
template<> ::rsh::server::protocol::HandshakeRequest* Arena::CreateMaybeMessage<::rsh::server::protocol::HandshakeRequest>(Arena*);
template<> ::rsh::server::protocol::Request* Arena::CreateMaybeMessage<::rsh::server::protocol::Request>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace rsh {
namespace server {
namespace protocol {

// ===================================================================

class Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rsh.server.protocol.Request) */ {
 public:
  inline Request() : Request(nullptr) {}
  ~Request() override;
  explicit PROTOBUF_CONSTEXPR Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Request(const Request& from);
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request& operator=(Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Request& default_instance() {
    return *internal_default_instance();
  }
  enum PayloadCase {
    kHandshake = 1,
    kCompile = 2,
    PAYLOAD_NOT_SET = 0,
  };

  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }
  inline void Swap(Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Request& from) {
    Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rsh.server.protocol.Request";
  }
  protected:
  explicit Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHandshakeFieldNumber = 1,
    kCompileFieldNumber = 2,
  };
  // .rsh.server.protocol.HandshakeRequest handshake = 1;
  bool has_handshake() const;
  private:
  bool _internal_has_handshake() const;
  public:
  void clear_handshake();
  const ::rsh::server::protocol::HandshakeRequest& handshake() const;
  PROTOBUF_NODISCARD ::rsh::server::protocol::HandshakeRequest* release_handshake();
  ::rsh::server::protocol::HandshakeRequest* mutable_handshake();
  void set_allocated_handshake(::rsh::server::protocol::HandshakeRequest* handshake);
  private:
  const ::rsh::server::protocol::HandshakeRequest& _internal_handshake() const;
  ::rsh::server::protocol::HandshakeRequest* _internal_mutable_handshake();
  public:
  void unsafe_arena_set_allocated_handshake(
      ::rsh::server::protocol::HandshakeRequest* handshake);
  ::rsh::server::protocol::HandshakeRequest* unsafe_arena_release_handshake();

  // .rsh.server.protocol.CompileRequest compile = 2;
  bool has_compile() const;
  private:
  bool _internal_has_compile() const;
  public:
  void clear_compile();
  const ::rsh::server::protocol::CompileRequest& compile() const;
  PROTOBUF_NODISCARD ::rsh::server::protocol::CompileRequest* release_compile();
  ::rsh::server::protocol::CompileRequest* mutable_compile();
  void set_allocated_compile(::rsh::server::protocol::CompileRequest* compile);
  private:
  const ::rsh::server::protocol::CompileRequest& _internal_compile() const;
  ::rsh::server::protocol::CompileRequest* _internal_mutable_compile();
  public:
  void unsafe_arena_set_allocated_compile(
      ::rsh::server::protocol::CompileRequest* compile);
  ::rsh::server::protocol::CompileRequest* unsafe_arena_release_compile();

  void clear_payload();
  PayloadCase payload_case() const;
  // @@protoc_insertion_point(class_scope:rsh.server.protocol.Request)
 private:
  class _Internal;
  void set_has_handshake();
  void set_has_compile();

  inline bool has_payload() const;
  inline void clear_has_payload();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union PayloadUnion {
      constexpr PayloadUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::rsh::server::protocol::HandshakeRequest* handshake_;
      ::rsh::server::protocol::CompileRequest* compile_;
    } payload_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class HandshakeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rsh.server.protocol.HandshakeRequest) */ {
 public:
  inline HandshakeRequest() : HandshakeRequest(nullptr) {}
  ~HandshakeRequest() override;
  explicit PROTOBUF_CONSTEXPR HandshakeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HandshakeRequest(const HandshakeRequest& from);
  HandshakeRequest(HandshakeRequest&& from) noexcept
    : HandshakeRequest() {
    *this = ::std::move(from);
  }

  inline HandshakeRequest& operator=(const HandshakeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline HandshakeRequest& operator=(HandshakeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HandshakeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const HandshakeRequest* internal_default_instance() {
    return reinterpret_cast<const HandshakeRequest*>(
               &_HandshakeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(HandshakeRequest& a, HandshakeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(HandshakeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HandshakeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HandshakeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HandshakeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HandshakeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HandshakeRequest& from) {
    HandshakeRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HandshakeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rsh.server.protocol.HandshakeRequest";
  }
  protected:
  explicit HandshakeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPackagesFieldNumber = 4,
    kRshVersionFieldNumber = 1,
    kRVersionFieldNumber = 2,
    kPlatformFieldNumber = 3,
  };
  // repeated string packages = 4;
  int packages_size() const;
  private:
  int _internal_packages_size() const;
  public:
  void clear_packages();
  const std::string& packages(int index) const;
  std::string* mutable_packages(int index);
  void set_packages(int index, const std::string& value);
  void set_packages(int index, std::string&& value);
  void set_packages(int index, const char* value);
  void set_packages(int index, const char* value, size_t size);
  std::string* add_packages();
  void add_packages(const std::string& value);
  void add_packages(std::string&& value);
  void add_packages(const char* value);
  void add_packages(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& packages() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_packages();
  private:
  const std::string& _internal_packages(int index) const;
  std::string* _internal_add_packages();
  public:

  // string Rsh_version = 1;
  void clear_rsh_version();
  const std::string& rsh_version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rsh_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rsh_version();
  PROTOBUF_NODISCARD std::string* release_rsh_version();
  void set_allocated_rsh_version(std::string* rsh_version);
  private:
  const std::string& _internal_rsh_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rsh_version(const std::string& value);
  std::string* _internal_mutable_rsh_version();
  public:

  // string R_version = 2;
  void clear_r_version();
  const std::string& r_version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_r_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_r_version();
  PROTOBUF_NODISCARD std::string* release_r_version();
  void set_allocated_r_version(std::string* r_version);
  private:
  const std::string& _internal_r_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_r_version(const std::string& value);
  std::string* _internal_mutable_r_version();
  public:

  // string platform = 3;
  void clear_platform();
  const std::string& platform() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_platform(ArgT0&& arg0, ArgT... args);
  std::string* mutable_platform();
  PROTOBUF_NODISCARD std::string* release_platform();
  void set_allocated_platform(std::string* platform);
  private:
  const std::string& _internal_platform() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_platform(const std::string& value);
  std::string* _internal_mutable_platform();
  public:

  // @@protoc_insertion_point(class_scope:rsh.server.protocol.HandshakeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> packages_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rsh_version_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr r_version_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr platform_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class CompileRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rsh.server.protocol.CompileRequest) */ {
 public:
  inline CompileRequest() : CompileRequest(nullptr) {}
  ~CompileRequest() override;
  explicit PROTOBUF_CONSTEXPR CompileRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CompileRequest(const CompileRequest& from);
  CompileRequest(CompileRequest&& from) noexcept
    : CompileRequest() {
    *this = ::std::move(from);
  }

  inline CompileRequest& operator=(const CompileRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CompileRequest& operator=(CompileRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CompileRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CompileRequest* internal_default_instance() {
    return reinterpret_cast<const CompileRequest*>(
               &_CompileRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CompileRequest& a, CompileRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CompileRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CompileRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CompileRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CompileRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CompileRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CompileRequest& from) {
    CompileRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CompileRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rsh.server.protocol.CompileRequest";
  }
  protected:
  explicit CompileRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kClosureFieldNumber = 3,
    kBcOptimizationFieldNumber = 4,
    kCcOptimizationFieldNumber = 5,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bytes closure = 3;
  void clear_closure();
  const std::string& closure() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_closure(ArgT0&& arg0, ArgT... args);
  std::string* mutable_closure();
  PROTOBUF_NODISCARD std::string* release_closure();
  void set_allocated_closure(std::string* closure);
  private:
  const std::string& _internal_closure() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_closure(const std::string& value);
  std::string* _internal_mutable_closure();
  public:

  // uint32 bc_optimization = 4;
  void clear_bc_optimization();
  uint32_t bc_optimization() const;
  void set_bc_optimization(uint32_t value);
  private:
  uint32_t _internal_bc_optimization() const;
  void _internal_set_bc_optimization(uint32_t value);
  public:

  // uint32 cc_optimization = 5;
  void clear_cc_optimization();
  uint32_t cc_optimization() const;
  void set_cc_optimization(uint32_t value);
  private:
  uint32_t _internal_cc_optimization() const;
  void _internal_set_cc_optimization(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:rsh.server.protocol.CompileRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr closure_;
    uint32_t bc_optimization_;
    uint32_t cc_optimization_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class CompiledFunction final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rsh.server.protocol.CompiledFunction) */ {
 public:
  inline CompiledFunction() : CompiledFunction(nullptr) {}
  ~CompiledFunction() override;
  explicit PROTOBUF_CONSTEXPR CompiledFunction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CompiledFunction(const CompiledFunction& from);
  CompiledFunction(CompiledFunction&& from) noexcept
    : CompiledFunction() {
    *this = ::std::move(from);
  }

  inline CompiledFunction& operator=(const CompiledFunction& from) {
    CopyFrom(from);
    return *this;
  }
  inline CompiledFunction& operator=(CompiledFunction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CompiledFunction& default_instance() {
    return *internal_default_instance();
  }
  static inline const CompiledFunction* internal_default_instance() {
    return reinterpret_cast<const CompiledFunction*>(
               &_CompiledFunction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CompiledFunction& a, CompiledFunction& b) {
    a.Swap(&b);
  }
  inline void Swap(CompiledFunction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CompiledFunction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CompiledFunction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CompiledFunction>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CompiledFunction& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CompiledFunction& from) {
    CompiledFunction::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CompiledFunction* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rsh.server.protocol.CompiledFunction";
  }
  protected:
  explicit CompiledFunction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kNativeCodeFieldNumber = 3,
    kConstantsFieldNumber = 4,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bytes native_code = 3;
  void clear_native_code();
  const std::string& native_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_native_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_native_code();
  PROTOBUF_NODISCARD std::string* release_native_code();
  void set_allocated_native_code(std::string* native_code);
  private:
  const std::string& _internal_native_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_native_code(const std::string& value);
  std::string* _internal_mutable_native_code();
  public:

  // bytes constants = 4;
  void clear_constants();
  const std::string& constants() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_constants(ArgT0&& arg0, ArgT... args);
  std::string* mutable_constants();
  PROTOBUF_NODISCARD std::string* release_constants();
  void set_allocated_constants(std::string* constants);
  private:
  const std::string& _internal_constants() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_constants(const std::string& value);
  std::string* _internal_mutable_constants();
  public:

  // @@protoc_insertion_point(class_scope:rsh.server.protocol.CompiledFunction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr native_code_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr constants_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class CompileResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rsh.server.protocol.CompileResponse) */ {
 public:
  inline CompileResponse() : CompileResponse(nullptr) {}
  ~CompileResponse() override;
  explicit PROTOBUF_CONSTEXPR CompileResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CompileResponse(const CompileResponse& from);
  CompileResponse(CompileResponse&& from) noexcept
    : CompileResponse() {
    *this = ::std::move(from);
  }

  inline CompileResponse& operator=(const CompileResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CompileResponse& operator=(CompileResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CompileResponse& default_instance() {
    return *internal_default_instance();
  }
  enum DataCase {
    kFailure = 2,
    kResult = 3,
    DATA_NOT_SET = 0,
  };

  static inline const CompileResponse* internal_default_instance() {
    return reinterpret_cast<const CompileResponse*>(
               &_CompileResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CompileResponse& a, CompileResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CompileResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CompileResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CompileResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CompileResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CompileResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CompileResponse& from) {
    CompileResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CompileResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rsh.server.protocol.CompileResponse";
  }
  protected:
  explicit CompileResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFailureFieldNumber = 2,
    kResultFieldNumber = 3,
  };
  // string failure = 2;
  bool has_failure() const;
  private:
  bool _internal_has_failure() const;
  public:
  void clear_failure();
  const std::string& failure() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_failure(ArgT0&& arg0, ArgT... args);
  std::string* mutable_failure();
  PROTOBUF_NODISCARD std::string* release_failure();
  void set_allocated_failure(std::string* failure);
  private:
  const std::string& _internal_failure() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_failure(const std::string& value);
  std::string* _internal_mutable_failure();
  public:

  // .rsh.server.protocol.CompiledFunction result = 3;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::rsh::server::protocol::CompiledFunction& result() const;
  PROTOBUF_NODISCARD ::rsh::server::protocol::CompiledFunction* release_result();
  ::rsh::server::protocol::CompiledFunction* mutable_result();
  void set_allocated_result(::rsh::server::protocol::CompiledFunction* result);
  private:
  const ::rsh::server::protocol::CompiledFunction& _internal_result() const;
  ::rsh::server::protocol::CompiledFunction* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::rsh::server::protocol::CompiledFunction* result);
  ::rsh::server::protocol::CompiledFunction* unsafe_arena_release_result();

  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:rsh.server.protocol.CompileResponse)
 private:
  class _Internal;
  void set_has_failure();
  void set_has_result();

  inline bool has_data() const;
  inline void clear_has_data();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union DataUnion {
      constexpr DataUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr failure_;
      ::rsh::server::protocol::CompiledFunction* result_;
    } data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protocol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Request

// .rsh.server.protocol.HandshakeRequest handshake = 1;
inline bool Request::_internal_has_handshake() const {
  return payload_case() == kHandshake;
}
inline bool Request::has_handshake() const {
  return _internal_has_handshake();
}
inline void Request::set_has_handshake() {
  _impl_._oneof_case_[0] = kHandshake;
}
inline void Request::clear_handshake() {
  if (_internal_has_handshake()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.handshake_;
    }
    clear_has_payload();
  }
}
inline ::rsh::server::protocol::HandshakeRequest* Request::release_handshake() {
  // @@protoc_insertion_point(field_release:rsh.server.protocol.Request.handshake)
  if (_internal_has_handshake()) {
    clear_has_payload();
    ::rsh::server::protocol::HandshakeRequest* temp = _impl_.payload_.handshake_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.handshake_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::rsh::server::protocol::HandshakeRequest& Request::_internal_handshake() const {
  return _internal_has_handshake()
      ? *_impl_.payload_.handshake_
      : reinterpret_cast< ::rsh::server::protocol::HandshakeRequest&>(::rsh::server::protocol::_HandshakeRequest_default_instance_);
}
inline const ::rsh::server::protocol::HandshakeRequest& Request::handshake() const {
  // @@protoc_insertion_point(field_get:rsh.server.protocol.Request.handshake)
  return _internal_handshake();
}
inline ::rsh::server::protocol::HandshakeRequest* Request::unsafe_arena_release_handshake() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rsh.server.protocol.Request.handshake)
  if (_internal_has_handshake()) {
    clear_has_payload();
    ::rsh::server::protocol::HandshakeRequest* temp = _impl_.payload_.handshake_;
    _impl_.payload_.handshake_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_handshake(::rsh::server::protocol::HandshakeRequest* handshake) {
  clear_payload();
  if (handshake) {
    set_has_handshake();
    _impl_.payload_.handshake_ = handshake;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rsh.server.protocol.Request.handshake)
}
inline ::rsh::server::protocol::HandshakeRequest* Request::_internal_mutable_handshake() {
  if (!_internal_has_handshake()) {
    clear_payload();
    set_has_handshake();
    _impl_.payload_.handshake_ = CreateMaybeMessage< ::rsh::server::protocol::HandshakeRequest >(GetArenaForAllocation());
  }
  return _impl_.payload_.handshake_;
}
inline ::rsh::server::protocol::HandshakeRequest* Request::mutable_handshake() {
  ::rsh::server::protocol::HandshakeRequest* _msg = _internal_mutable_handshake();
  // @@protoc_insertion_point(field_mutable:rsh.server.protocol.Request.handshake)
  return _msg;
}

// .rsh.server.protocol.CompileRequest compile = 2;
inline bool Request::_internal_has_compile() const {
  return payload_case() == kCompile;
}
inline bool Request::has_compile() const {
  return _internal_has_compile();
}
inline void Request::set_has_compile() {
  _impl_._oneof_case_[0] = kCompile;
}
inline void Request::clear_compile() {
  if (_internal_has_compile()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.compile_;
    }
    clear_has_payload();
  }
}
inline ::rsh::server::protocol::CompileRequest* Request::release_compile() {
  // @@protoc_insertion_point(field_release:rsh.server.protocol.Request.compile)
  if (_internal_has_compile()) {
    clear_has_payload();
    ::rsh::server::protocol::CompileRequest* temp = _impl_.payload_.compile_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.compile_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::rsh::server::protocol::CompileRequest& Request::_internal_compile() const {
  return _internal_has_compile()
      ? *_impl_.payload_.compile_
      : reinterpret_cast< ::rsh::server::protocol::CompileRequest&>(::rsh::server::protocol::_CompileRequest_default_instance_);
}
inline const ::rsh::server::protocol::CompileRequest& Request::compile() const {
  // @@protoc_insertion_point(field_get:rsh.server.protocol.Request.compile)
  return _internal_compile();
}
inline ::rsh::server::protocol::CompileRequest* Request::unsafe_arena_release_compile() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rsh.server.protocol.Request.compile)
  if (_internal_has_compile()) {
    clear_has_payload();
    ::rsh::server::protocol::CompileRequest* temp = _impl_.payload_.compile_;
    _impl_.payload_.compile_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_compile(::rsh::server::protocol::CompileRequest* compile) {
  clear_payload();
  if (compile) {
    set_has_compile();
    _impl_.payload_.compile_ = compile;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rsh.server.protocol.Request.compile)
}
inline ::rsh::server::protocol::CompileRequest* Request::_internal_mutable_compile() {
  if (!_internal_has_compile()) {
    clear_payload();
    set_has_compile();
    _impl_.payload_.compile_ = CreateMaybeMessage< ::rsh::server::protocol::CompileRequest >(GetArenaForAllocation());
  }
  return _impl_.payload_.compile_;
}
inline ::rsh::server::protocol::CompileRequest* Request::mutable_compile() {
  ::rsh::server::protocol::CompileRequest* _msg = _internal_mutable_compile();
  // @@protoc_insertion_point(field_mutable:rsh.server.protocol.Request.compile)
  return _msg;
}

inline bool Request::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
inline void Request::clear_has_payload() {
  _impl_._oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline Request::PayloadCase Request::payload_case() const {
  return Request::PayloadCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// HandshakeRequest

// string Rsh_version = 1;
inline void HandshakeRequest::clear_rsh_version() {
  _impl_.rsh_version_.ClearToEmpty();
}
inline const std::string& HandshakeRequest::rsh_version() const {
  // @@protoc_insertion_point(field_get:rsh.server.protocol.HandshakeRequest.Rsh_version)
  return _internal_rsh_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HandshakeRequest::set_rsh_version(ArgT0&& arg0, ArgT... args) {
 
 _impl_.rsh_version_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rsh.server.protocol.HandshakeRequest.Rsh_version)
}
inline std::string* HandshakeRequest::mutable_rsh_version() {
  std::string* _s = _internal_mutable_rsh_version();
  // @@protoc_insertion_point(field_mutable:rsh.server.protocol.HandshakeRequest.Rsh_version)
  return _s;
}
inline const std::string& HandshakeRequest::_internal_rsh_version() const {
  return _impl_.rsh_version_.Get();
}
inline void HandshakeRequest::_internal_set_rsh_version(const std::string& value) {
  
  _impl_.rsh_version_.Set(value, GetArenaForAllocation());
}
inline std::string* HandshakeRequest::_internal_mutable_rsh_version() {
  
  return _impl_.rsh_version_.Mutable(GetArenaForAllocation());
}
inline std::string* HandshakeRequest::release_rsh_version() {
  // @@protoc_insertion_point(field_release:rsh.server.protocol.HandshakeRequest.Rsh_version)
  return _impl_.rsh_version_.Release();
}
inline void HandshakeRequest::set_allocated_rsh_version(std::string* rsh_version) {
  if (rsh_version != nullptr) {
    
  } else {
    
  }
  _impl_.rsh_version_.SetAllocated(rsh_version, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.rsh_version_.IsDefault()) {
    _impl_.rsh_version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rsh.server.protocol.HandshakeRequest.Rsh_version)
}

// string R_version = 2;
inline void HandshakeRequest::clear_r_version() {
  _impl_.r_version_.ClearToEmpty();
}
inline const std::string& HandshakeRequest::r_version() const {
  // @@protoc_insertion_point(field_get:rsh.server.protocol.HandshakeRequest.R_version)
  return _internal_r_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HandshakeRequest::set_r_version(ArgT0&& arg0, ArgT... args) {
 
 _impl_.r_version_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rsh.server.protocol.HandshakeRequest.R_version)
}
inline std::string* HandshakeRequest::mutable_r_version() {
  std::string* _s = _internal_mutable_r_version();
  // @@protoc_insertion_point(field_mutable:rsh.server.protocol.HandshakeRequest.R_version)
  return _s;
}
inline const std::string& HandshakeRequest::_internal_r_version() const {
  return _impl_.r_version_.Get();
}
inline void HandshakeRequest::_internal_set_r_version(const std::string& value) {
  
  _impl_.r_version_.Set(value, GetArenaForAllocation());
}
inline std::string* HandshakeRequest::_internal_mutable_r_version() {
  
  return _impl_.r_version_.Mutable(GetArenaForAllocation());
}
inline std::string* HandshakeRequest::release_r_version() {
  // @@protoc_insertion_point(field_release:rsh.server.protocol.HandshakeRequest.R_version)
  return _impl_.r_version_.Release();
}
inline void HandshakeRequest::set_allocated_r_version(std::string* r_version) {
  if (r_version != nullptr) {
    
  } else {
    
  }
  _impl_.r_version_.SetAllocated(r_version, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.r_version_.IsDefault()) {
    _impl_.r_version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rsh.server.protocol.HandshakeRequest.R_version)
}

// string platform = 3;
inline void HandshakeRequest::clear_platform() {
  _impl_.platform_.ClearToEmpty();
}
inline const std::string& HandshakeRequest::platform() const {
  // @@protoc_insertion_point(field_get:rsh.server.protocol.HandshakeRequest.platform)
  return _internal_platform();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HandshakeRequest::set_platform(ArgT0&& arg0, ArgT... args) {
 
 _impl_.platform_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rsh.server.protocol.HandshakeRequest.platform)
}
inline std::string* HandshakeRequest::mutable_platform() {
  std::string* _s = _internal_mutable_platform();
  // @@protoc_insertion_point(field_mutable:rsh.server.protocol.HandshakeRequest.platform)
  return _s;
}
inline const std::string& HandshakeRequest::_internal_platform() const {
  return _impl_.platform_.Get();
}
inline void HandshakeRequest::_internal_set_platform(const std::string& value) {
  
  _impl_.platform_.Set(value, GetArenaForAllocation());
}
inline std::string* HandshakeRequest::_internal_mutable_platform() {
  
  return _impl_.platform_.Mutable(GetArenaForAllocation());
}
inline std::string* HandshakeRequest::release_platform() {
  // @@protoc_insertion_point(field_release:rsh.server.protocol.HandshakeRequest.platform)
  return _impl_.platform_.Release();
}
inline void HandshakeRequest::set_allocated_platform(std::string* platform) {
  if (platform != nullptr) {
    
  } else {
    
  }
  _impl_.platform_.SetAllocated(platform, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.platform_.IsDefault()) {
    _impl_.platform_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rsh.server.protocol.HandshakeRequest.platform)
}

// repeated string packages = 4;
inline int HandshakeRequest::_internal_packages_size() const {
  return _impl_.packages_.size();
}
inline int HandshakeRequest::packages_size() const {
  return _internal_packages_size();
}
inline void HandshakeRequest::clear_packages() {
  _impl_.packages_.Clear();
}
inline std::string* HandshakeRequest::add_packages() {
  std::string* _s = _internal_add_packages();
  // @@protoc_insertion_point(field_add_mutable:rsh.server.protocol.HandshakeRequest.packages)
  return _s;
}
inline const std::string& HandshakeRequest::_internal_packages(int index) const {
  return _impl_.packages_.Get(index);
}
inline const std::string& HandshakeRequest::packages(int index) const {
  // @@protoc_insertion_point(field_get:rsh.server.protocol.HandshakeRequest.packages)
  return _internal_packages(index);
}
inline std::string* HandshakeRequest::mutable_packages(int index) {
  // @@protoc_insertion_point(field_mutable:rsh.server.protocol.HandshakeRequest.packages)
  return _impl_.packages_.Mutable(index);
}
inline void HandshakeRequest::set_packages(int index, const std::string& value) {
  _impl_.packages_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:rsh.server.protocol.HandshakeRequest.packages)
}
inline void HandshakeRequest::set_packages(int index, std::string&& value) {
  _impl_.packages_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:rsh.server.protocol.HandshakeRequest.packages)
}
inline void HandshakeRequest::set_packages(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.packages_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:rsh.server.protocol.HandshakeRequest.packages)
}
inline void HandshakeRequest::set_packages(int index, const char* value, size_t size) {
  _impl_.packages_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:rsh.server.protocol.HandshakeRequest.packages)
}
inline std::string* HandshakeRequest::_internal_add_packages() {
  return _impl_.packages_.Add();
}
inline void HandshakeRequest::add_packages(const std::string& value) {
  _impl_.packages_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:rsh.server.protocol.HandshakeRequest.packages)
}
inline void HandshakeRequest::add_packages(std::string&& value) {
  _impl_.packages_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:rsh.server.protocol.HandshakeRequest.packages)
}
inline void HandshakeRequest::add_packages(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.packages_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:rsh.server.protocol.HandshakeRequest.packages)
}
inline void HandshakeRequest::add_packages(const char* value, size_t size) {
  _impl_.packages_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:rsh.server.protocol.HandshakeRequest.packages)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
HandshakeRequest::packages() const {
  // @@protoc_insertion_point(field_list:rsh.server.protocol.HandshakeRequest.packages)
  return _impl_.packages_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
HandshakeRequest::mutable_packages() {
  // @@protoc_insertion_point(field_mutable_list:rsh.server.protocol.HandshakeRequest.packages)
  return &_impl_.packages_;
}

// -------------------------------------------------------------------

// CompileRequest

// string name = 2;
inline void CompileRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& CompileRequest::name() const {
  // @@protoc_insertion_point(field_get:rsh.server.protocol.CompileRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CompileRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rsh.server.protocol.CompileRequest.name)
}
inline std::string* CompileRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:rsh.server.protocol.CompileRequest.name)
  return _s;
}
inline const std::string& CompileRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void CompileRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* CompileRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* CompileRequest::release_name() {
  // @@protoc_insertion_point(field_release:rsh.server.protocol.CompileRequest.name)
  return _impl_.name_.Release();
}
inline void CompileRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rsh.server.protocol.CompileRequest.name)
}

// bytes closure = 3;
inline void CompileRequest::clear_closure() {
  _impl_.closure_.ClearToEmpty();
}
inline const std::string& CompileRequest::closure() const {
  // @@protoc_insertion_point(field_get:rsh.server.protocol.CompileRequest.closure)
  return _internal_closure();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CompileRequest::set_closure(ArgT0&& arg0, ArgT... args) {
 
 _impl_.closure_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rsh.server.protocol.CompileRequest.closure)
}
inline std::string* CompileRequest::mutable_closure() {
  std::string* _s = _internal_mutable_closure();
  // @@protoc_insertion_point(field_mutable:rsh.server.protocol.CompileRequest.closure)
  return _s;
}
inline const std::string& CompileRequest::_internal_closure() const {
  return _impl_.closure_.Get();
}
inline void CompileRequest::_internal_set_closure(const std::string& value) {
  
  _impl_.closure_.Set(value, GetArenaForAllocation());
}
inline std::string* CompileRequest::_internal_mutable_closure() {
  
  return _impl_.closure_.Mutable(GetArenaForAllocation());
}
inline std::string* CompileRequest::release_closure() {
  // @@protoc_insertion_point(field_release:rsh.server.protocol.CompileRequest.closure)
  return _impl_.closure_.Release();
}
inline void CompileRequest::set_allocated_closure(std::string* closure) {
  if (closure != nullptr) {
    
  } else {
    
  }
  _impl_.closure_.SetAllocated(closure, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.closure_.IsDefault()) {
    _impl_.closure_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rsh.server.protocol.CompileRequest.closure)
}

// uint32 bc_optimization = 4;
inline void CompileRequest::clear_bc_optimization() {
  _impl_.bc_optimization_ = 0u;
}
inline uint32_t CompileRequest::_internal_bc_optimization() const {
  return _impl_.bc_optimization_;
}
inline uint32_t CompileRequest::bc_optimization() const {
  // @@protoc_insertion_point(field_get:rsh.server.protocol.CompileRequest.bc_optimization)
  return _internal_bc_optimization();
}
inline void CompileRequest::_internal_set_bc_optimization(uint32_t value) {
  
  _impl_.bc_optimization_ = value;
}
inline void CompileRequest::set_bc_optimization(uint32_t value) {
  _internal_set_bc_optimization(value);
  // @@protoc_insertion_point(field_set:rsh.server.protocol.CompileRequest.bc_optimization)
}

// uint32 cc_optimization = 5;
inline void CompileRequest::clear_cc_optimization() {
  _impl_.cc_optimization_ = 0u;
}
inline uint32_t CompileRequest::_internal_cc_optimization() const {
  return _impl_.cc_optimization_;
}
inline uint32_t CompileRequest::cc_optimization() const {
  // @@protoc_insertion_point(field_get:rsh.server.protocol.CompileRequest.cc_optimization)
  return _internal_cc_optimization();
}
inline void CompileRequest::_internal_set_cc_optimization(uint32_t value) {
  
  _impl_.cc_optimization_ = value;
}
inline void CompileRequest::set_cc_optimization(uint32_t value) {
  _internal_set_cc_optimization(value);
  // @@protoc_insertion_point(field_set:rsh.server.protocol.CompileRequest.cc_optimization)
}

// -------------------------------------------------------------------

// CompiledFunction

// string name = 2;
inline void CompiledFunction::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& CompiledFunction::name() const {
  // @@protoc_insertion_point(field_get:rsh.server.protocol.CompiledFunction.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CompiledFunction::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rsh.server.protocol.CompiledFunction.name)
}
inline std::string* CompiledFunction::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:rsh.server.protocol.CompiledFunction.name)
  return _s;
}
inline const std::string& CompiledFunction::_internal_name() const {
  return _impl_.name_.Get();
}
inline void CompiledFunction::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* CompiledFunction::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* CompiledFunction::release_name() {
  // @@protoc_insertion_point(field_release:rsh.server.protocol.CompiledFunction.name)
  return _impl_.name_.Release();
}
inline void CompiledFunction::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rsh.server.protocol.CompiledFunction.name)
}

// bytes native_code = 3;
inline void CompiledFunction::clear_native_code() {
  _impl_.native_code_.ClearToEmpty();
}
inline const std::string& CompiledFunction::native_code() const {
  // @@protoc_insertion_point(field_get:rsh.server.protocol.CompiledFunction.native_code)
  return _internal_native_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CompiledFunction::set_native_code(ArgT0&& arg0, ArgT... args) {
 
 _impl_.native_code_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rsh.server.protocol.CompiledFunction.native_code)
}
inline std::string* CompiledFunction::mutable_native_code() {
  std::string* _s = _internal_mutable_native_code();
  // @@protoc_insertion_point(field_mutable:rsh.server.protocol.CompiledFunction.native_code)
  return _s;
}
inline const std::string& CompiledFunction::_internal_native_code() const {
  return _impl_.native_code_.Get();
}
inline void CompiledFunction::_internal_set_native_code(const std::string& value) {
  
  _impl_.native_code_.Set(value, GetArenaForAllocation());
}
inline std::string* CompiledFunction::_internal_mutable_native_code() {
  
  return _impl_.native_code_.Mutable(GetArenaForAllocation());
}
inline std::string* CompiledFunction::release_native_code() {
  // @@protoc_insertion_point(field_release:rsh.server.protocol.CompiledFunction.native_code)
  return _impl_.native_code_.Release();
}
inline void CompiledFunction::set_allocated_native_code(std::string* native_code) {
  if (native_code != nullptr) {
    
  } else {
    
  }
  _impl_.native_code_.SetAllocated(native_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.native_code_.IsDefault()) {
    _impl_.native_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rsh.server.protocol.CompiledFunction.native_code)
}

// bytes constants = 4;
inline void CompiledFunction::clear_constants() {
  _impl_.constants_.ClearToEmpty();
}
inline const std::string& CompiledFunction::constants() const {
  // @@protoc_insertion_point(field_get:rsh.server.protocol.CompiledFunction.constants)
  return _internal_constants();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CompiledFunction::set_constants(ArgT0&& arg0, ArgT... args) {
 
 _impl_.constants_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rsh.server.protocol.CompiledFunction.constants)
}
inline std::string* CompiledFunction::mutable_constants() {
  std::string* _s = _internal_mutable_constants();
  // @@protoc_insertion_point(field_mutable:rsh.server.protocol.CompiledFunction.constants)
  return _s;
}
inline const std::string& CompiledFunction::_internal_constants() const {
  return _impl_.constants_.Get();
}
inline void CompiledFunction::_internal_set_constants(const std::string& value) {
  
  _impl_.constants_.Set(value, GetArenaForAllocation());
}
inline std::string* CompiledFunction::_internal_mutable_constants() {
  
  return _impl_.constants_.Mutable(GetArenaForAllocation());
}
inline std::string* CompiledFunction::release_constants() {
  // @@protoc_insertion_point(field_release:rsh.server.protocol.CompiledFunction.constants)
  return _impl_.constants_.Release();
}
inline void CompiledFunction::set_allocated_constants(std::string* constants) {
  if (constants != nullptr) {
    
  } else {
    
  }
  _impl_.constants_.SetAllocated(constants, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.constants_.IsDefault()) {
    _impl_.constants_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rsh.server.protocol.CompiledFunction.constants)
}

// -------------------------------------------------------------------

// CompileResponse

// string failure = 2;
inline bool CompileResponse::_internal_has_failure() const {
  return data_case() == kFailure;
}
inline bool CompileResponse::has_failure() const {
  return _internal_has_failure();
}
inline void CompileResponse::set_has_failure() {
  _impl_._oneof_case_[0] = kFailure;
}
inline void CompileResponse::clear_failure() {
  if (_internal_has_failure()) {
    _impl_.data_.failure_.Destroy();
    clear_has_data();
  }
}
inline const std::string& CompileResponse::failure() const {
  // @@protoc_insertion_point(field_get:rsh.server.protocol.CompileResponse.failure)
  return _internal_failure();
}
template <typename ArgT0, typename... ArgT>
inline void CompileResponse::set_failure(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_failure()) {
    clear_data();
    set_has_failure();
    _impl_.data_.failure_.InitDefault();
  }
  _impl_.data_.failure_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rsh.server.protocol.CompileResponse.failure)
}
inline std::string* CompileResponse::mutable_failure() {
  std::string* _s = _internal_mutable_failure();
  // @@protoc_insertion_point(field_mutable:rsh.server.protocol.CompileResponse.failure)
  return _s;
}
inline const std::string& CompileResponse::_internal_failure() const {
  if (_internal_has_failure()) {
    return _impl_.data_.failure_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void CompileResponse::_internal_set_failure(const std::string& value) {
  if (!_internal_has_failure()) {
    clear_data();
    set_has_failure();
    _impl_.data_.failure_.InitDefault();
  }
  _impl_.data_.failure_.Set(value, GetArenaForAllocation());
}
inline std::string* CompileResponse::_internal_mutable_failure() {
  if (!_internal_has_failure()) {
    clear_data();
    set_has_failure();
    _impl_.data_.failure_.InitDefault();
  }
  return _impl_.data_.failure_.Mutable(      GetArenaForAllocation());
}
inline std::string* CompileResponse::release_failure() {
  // @@protoc_insertion_point(field_release:rsh.server.protocol.CompileResponse.failure)
  if (_internal_has_failure()) {
    clear_has_data();
    return _impl_.data_.failure_.Release();
  } else {
    return nullptr;
  }
}
inline void CompileResponse::set_allocated_failure(std::string* failure) {
  if (has_data()) {
    clear_data();
  }
  if (failure != nullptr) {
    set_has_failure();
    _impl_.data_.failure_.InitAllocated(failure, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:rsh.server.protocol.CompileResponse.failure)
}

// .rsh.server.protocol.CompiledFunction result = 3;
inline bool CompileResponse::_internal_has_result() const {
  return data_case() == kResult;
}
inline bool CompileResponse::has_result() const {
  return _internal_has_result();
}
inline void CompileResponse::set_has_result() {
  _impl_._oneof_case_[0] = kResult;
}
inline void CompileResponse::clear_result() {
  if (_internal_has_result()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.result_;
    }
    clear_has_data();
  }
}
inline ::rsh::server::protocol::CompiledFunction* CompileResponse::release_result() {
  // @@protoc_insertion_point(field_release:rsh.server.protocol.CompileResponse.result)
  if (_internal_has_result()) {
    clear_has_data();
    ::rsh::server::protocol::CompiledFunction* temp = _impl_.data_.result_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.data_.result_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::rsh::server::protocol::CompiledFunction& CompileResponse::_internal_result() const {
  return _internal_has_result()
      ? *_impl_.data_.result_
      : reinterpret_cast< ::rsh::server::protocol::CompiledFunction&>(::rsh::server::protocol::_CompiledFunction_default_instance_);
}
inline const ::rsh::server::protocol::CompiledFunction& CompileResponse::result() const {
  // @@protoc_insertion_point(field_get:rsh.server.protocol.CompileResponse.result)
  return _internal_result();
}
inline ::rsh::server::protocol::CompiledFunction* CompileResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rsh.server.protocol.CompileResponse.result)
  if (_internal_has_result()) {
    clear_has_data();
    ::rsh::server::protocol::CompiledFunction* temp = _impl_.data_.result_;
    _impl_.data_.result_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CompileResponse::unsafe_arena_set_allocated_result(::rsh::server::protocol::CompiledFunction* result) {
  clear_data();
  if (result) {
    set_has_result();
    _impl_.data_.result_ = result;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rsh.server.protocol.CompileResponse.result)
}
inline ::rsh::server::protocol::CompiledFunction* CompileResponse::_internal_mutable_result() {
  if (!_internal_has_result()) {
    clear_data();
    set_has_result();
    _impl_.data_.result_ = CreateMaybeMessage< ::rsh::server::protocol::CompiledFunction >(GetArenaForAllocation());
  }
  return _impl_.data_.result_;
}
inline ::rsh::server::protocol::CompiledFunction* CompileResponse::mutable_result() {
  ::rsh::server::protocol::CompiledFunction* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:rsh.server.protocol.CompileResponse.result)
  return _msg;
}

inline bool CompileResponse::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void CompileResponse::clear_has_data() {
  _impl_._oneof_case_[0] = DATA_NOT_SET;
}
inline CompileResponse::DataCase CompileResponse::data_case() const {
  return CompileResponse::DataCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace server
}  // namespace rsh

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protocol_2eproto
