// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: routes.proto

#include "routes.pb.h"
#include "routes.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace rsh {
namespace protocol {

static const char* CompileService_method_names[] = {
  "/rsh.protocol.CompileService/Compile",
  "/rsh.protocol.CompileService/Init",
};

std::unique_ptr< CompileService::Stub> CompileService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< CompileService::Stub> stub(new CompileService::Stub(channel, options));
  return stub;
}

CompileService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Compile_(CompileService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Init_(CompileService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status CompileService::Stub::Compile(::grpc::ClientContext* context, const ::rsh::protocol::CompileRequest& request, ::rsh::protocol::CompileResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::rsh::protocol::CompileRequest, ::rsh::protocol::CompileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Compile_, context, request, response);
}

void CompileService::Stub::async::Compile(::grpc::ClientContext* context, const ::rsh::protocol::CompileRequest* request, ::rsh::protocol::CompileResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::rsh::protocol::CompileRequest, ::rsh::protocol::CompileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Compile_, context, request, response, std::move(f));
}

void CompileService::Stub::async::Compile(::grpc::ClientContext* context, const ::rsh::protocol::CompileRequest* request, ::rsh::protocol::CompileResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Compile_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rsh::protocol::CompileResponse>* CompileService::Stub::PrepareAsyncCompileRaw(::grpc::ClientContext* context, const ::rsh::protocol::CompileRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::rsh::protocol::CompileResponse, ::rsh::protocol::CompileRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Compile_, context, request);
}

::grpc::ClientAsyncResponseReader< ::rsh::protocol::CompileResponse>* CompileService::Stub::AsyncCompileRaw(::grpc::ClientContext* context, const ::rsh::protocol::CompileRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCompileRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CompileService::Stub::Init(::grpc::ClientContext* context, const ::rsh::protocol::InitRequest& request, ::rsh::protocol::InitResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::rsh::protocol::InitRequest, ::rsh::protocol::InitResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Init_, context, request, response);
}

void CompileService::Stub::async::Init(::grpc::ClientContext* context, const ::rsh::protocol::InitRequest* request, ::rsh::protocol::InitResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::rsh::protocol::InitRequest, ::rsh::protocol::InitResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Init_, context, request, response, std::move(f));
}

void CompileService::Stub::async::Init(::grpc::ClientContext* context, const ::rsh::protocol::InitRequest* request, ::rsh::protocol::InitResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Init_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rsh::protocol::InitResponse>* CompileService::Stub::PrepareAsyncInitRaw(::grpc::ClientContext* context, const ::rsh::protocol::InitRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::rsh::protocol::InitResponse, ::rsh::protocol::InitRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Init_, context, request);
}

::grpc::ClientAsyncResponseReader< ::rsh::protocol::InitResponse>* CompileService::Stub::AsyncInitRaw(::grpc::ClientContext* context, const ::rsh::protocol::InitRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncInitRaw(context, request, cq);
  result->StartCall();
  return result;
}

CompileService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CompileService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CompileService::Service, ::rsh::protocol::CompileRequest, ::rsh::protocol::CompileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CompileService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::rsh::protocol::CompileRequest* req,
             ::rsh::protocol::CompileResponse* resp) {
               return service->Compile(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CompileService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CompileService::Service, ::rsh::protocol::InitRequest, ::rsh::protocol::InitResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CompileService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::rsh::protocol::InitRequest* req,
             ::rsh::protocol::InitResponse* resp) {
               return service->Init(ctx, req, resp);
             }, this)));
}

CompileService::Service::~Service() {
}

::grpc::Status CompileService::Service::Compile(::grpc::ServerContext* context, const ::rsh::protocol::CompileRequest* request, ::rsh::protocol::CompileResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CompileService::Service::Init(::grpc::ServerContext* context, const ::rsh::protocol::InitRequest* request, ::rsh::protocol::InitResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* FactService_method_names[] = {
  "/rsh.protocol.FactService/GetContext",
  "/rsh.protocol.FactService/GetTypeFeedback",
  "/rsh.protocol.FactService/GetValues",
  "/rsh.protocol.FactService/GetFunction",
};

std::unique_ptr< FactService::Stub> FactService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< FactService::Stub> stub(new FactService::Stub(channel, options));
  return stub;
}

FactService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetContext_(FactService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTypeFeedback_(FactService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetValues_(FactService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetFunction_(FactService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status FactService::Stub::GetContext(::grpc::ClientContext* context, const ::rsh::protocol::ContextRequest& request, ::rsh::protocol::Context* response) {
  return ::grpc::internal::BlockingUnaryCall< ::rsh::protocol::ContextRequest, ::rsh::protocol::Context, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetContext_, context, request, response);
}

void FactService::Stub::async::GetContext(::grpc::ClientContext* context, const ::rsh::protocol::ContextRequest* request, ::rsh::protocol::Context* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::rsh::protocol::ContextRequest, ::rsh::protocol::Context, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetContext_, context, request, response, std::move(f));
}

void FactService::Stub::async::GetContext(::grpc::ClientContext* context, const ::rsh::protocol::ContextRequest* request, ::rsh::protocol::Context* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetContext_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rsh::protocol::Context>* FactService::Stub::PrepareAsyncGetContextRaw(::grpc::ClientContext* context, const ::rsh::protocol::ContextRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::rsh::protocol::Context, ::rsh::protocol::ContextRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetContext_, context, request);
}

::grpc::ClientAsyncResponseReader< ::rsh::protocol::Context>* FactService::Stub::AsyncGetContextRaw(::grpc::ClientContext* context, const ::rsh::protocol::ContextRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetContextRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FactService::Stub::GetTypeFeedback(::grpc::ClientContext* context, const ::rsh::protocol::FeedbackRequest& request, ::rsh::protocol::TypeFeedback* response) {
  return ::grpc::internal::BlockingUnaryCall< ::rsh::protocol::FeedbackRequest, ::rsh::protocol::TypeFeedback, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetTypeFeedback_, context, request, response);
}

void FactService::Stub::async::GetTypeFeedback(::grpc::ClientContext* context, const ::rsh::protocol::FeedbackRequest* request, ::rsh::protocol::TypeFeedback* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::rsh::protocol::FeedbackRequest, ::rsh::protocol::TypeFeedback, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTypeFeedback_, context, request, response, std::move(f));
}

void FactService::Stub::async::GetTypeFeedback(::grpc::ClientContext* context, const ::rsh::protocol::FeedbackRequest* request, ::rsh::protocol::TypeFeedback* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTypeFeedback_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rsh::protocol::TypeFeedback>* FactService::Stub::PrepareAsyncGetTypeFeedbackRaw(::grpc::ClientContext* context, const ::rsh::protocol::FeedbackRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::rsh::protocol::TypeFeedback, ::rsh::protocol::FeedbackRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetTypeFeedback_, context, request);
}

::grpc::ClientAsyncResponseReader< ::rsh::protocol::TypeFeedback>* FactService::Stub::AsyncGetTypeFeedbackRaw(::grpc::ClientContext* context, const ::rsh::protocol::FeedbackRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetTypeFeedbackRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FactService::Stub::GetValues(::grpc::ClientContext* context, const ::rsh::protocol::ValueRequest& request, ::rsh::protocol::Values* response) {
  return ::grpc::internal::BlockingUnaryCall< ::rsh::protocol::ValueRequest, ::rsh::protocol::Values, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetValues_, context, request, response);
}

void FactService::Stub::async::GetValues(::grpc::ClientContext* context, const ::rsh::protocol::ValueRequest* request, ::rsh::protocol::Values* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::rsh::protocol::ValueRequest, ::rsh::protocol::Values, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetValues_, context, request, response, std::move(f));
}

void FactService::Stub::async::GetValues(::grpc::ClientContext* context, const ::rsh::protocol::ValueRequest* request, ::rsh::protocol::Values* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetValues_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rsh::protocol::Values>* FactService::Stub::PrepareAsyncGetValuesRaw(::grpc::ClientContext* context, const ::rsh::protocol::ValueRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::rsh::protocol::Values, ::rsh::protocol::ValueRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetValues_, context, request);
}

::grpc::ClientAsyncResponseReader< ::rsh::protocol::Values>* FactService::Stub::AsyncGetValuesRaw(::grpc::ClientContext* context, const ::rsh::protocol::ValueRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetValuesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FactService::Stub::GetFunction(::grpc::ClientContext* context, const ::rsh::protocol::FunctionRequest& request, ::rsh::protocol::Function* response) {
  return ::grpc::internal::BlockingUnaryCall< ::rsh::protocol::FunctionRequest, ::rsh::protocol::Function, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetFunction_, context, request, response);
}

void FactService::Stub::async::GetFunction(::grpc::ClientContext* context, const ::rsh::protocol::FunctionRequest* request, ::rsh::protocol::Function* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::rsh::protocol::FunctionRequest, ::rsh::protocol::Function, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetFunction_, context, request, response, std::move(f));
}

void FactService::Stub::async::GetFunction(::grpc::ClientContext* context, const ::rsh::protocol::FunctionRequest* request, ::rsh::protocol::Function* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetFunction_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rsh::protocol::Function>* FactService::Stub::PrepareAsyncGetFunctionRaw(::grpc::ClientContext* context, const ::rsh::protocol::FunctionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::rsh::protocol::Function, ::rsh::protocol::FunctionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetFunction_, context, request);
}

::grpc::ClientAsyncResponseReader< ::rsh::protocol::Function>* FactService::Stub::AsyncGetFunctionRaw(::grpc::ClientContext* context, const ::rsh::protocol::FunctionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetFunctionRaw(context, request, cq);
  result->StartCall();
  return result;
}

FactService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FactService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FactService::Service, ::rsh::protocol::ContextRequest, ::rsh::protocol::Context, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FactService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::rsh::protocol::ContextRequest* req,
             ::rsh::protocol::Context* resp) {
               return service->GetContext(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FactService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FactService::Service, ::rsh::protocol::FeedbackRequest, ::rsh::protocol::TypeFeedback, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FactService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::rsh::protocol::FeedbackRequest* req,
             ::rsh::protocol::TypeFeedback* resp) {
               return service->GetTypeFeedback(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FactService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FactService::Service, ::rsh::protocol::ValueRequest, ::rsh::protocol::Values, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FactService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::rsh::protocol::ValueRequest* req,
             ::rsh::protocol::Values* resp) {
               return service->GetValues(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FactService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FactService::Service, ::rsh::protocol::FunctionRequest, ::rsh::protocol::Function, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FactService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::rsh::protocol::FunctionRequest* req,
             ::rsh::protocol::Function* resp) {
               return service->GetFunction(ctx, req, resp);
             }, this)));
}

FactService::Service::~Service() {
}

::grpc::Status FactService::Service::GetContext(::grpc::ServerContext* context, const ::rsh::protocol::ContextRequest* request, ::rsh::protocol::Context* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FactService::Service::GetTypeFeedback(::grpc::ServerContext* context, const ::rsh::protocol::FeedbackRequest* request, ::rsh::protocol::TypeFeedback* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FactService::Service::GetValues(::grpc::ServerContext* context, const ::rsh::protocol::ValueRequest* request, ::rsh::protocol::Values* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FactService::Service::GetFunction(::grpc::ServerContext* context, const ::rsh::protocol::FunctionRequest* request, ::rsh::protocol::Function* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace rsh
}  // namespace protocol

