// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: routes.proto
#ifndef GRPC_routes_2eproto__INCLUDED
#define GRPC_routes_2eproto__INCLUDED

#include "routes.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace rsh {
namespace protocol {

// R sends requests to the compile server
class CompileService final {
 public:
  static constexpr char const* service_full_name() {
    return "rsh.protocol.CompileService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Compile(::grpc::ClientContext* context, const ::rsh::protocol::CompileRequest& request, ::rsh::protocol::CompileResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rsh::protocol::CompileResponse>> AsyncCompile(::grpc::ClientContext* context, const ::rsh::protocol::CompileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rsh::protocol::CompileResponse>>(AsyncCompileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rsh::protocol::CompileResponse>> PrepareAsyncCompile(::grpc::ClientContext* context, const ::rsh::protocol::CompileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rsh::protocol::CompileResponse>>(PrepareAsyncCompileRaw(context, request, cq));
    }
    virtual ::grpc::Status Init(::grpc::ClientContext* context, const ::rsh::protocol::InitRequest& request, ::rsh::protocol::InitResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rsh::protocol::InitResponse>> AsyncInit(::grpc::ClientContext* context, const ::rsh::protocol::InitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rsh::protocol::InitResponse>>(AsyncInitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rsh::protocol::InitResponse>> PrepareAsyncInit(::grpc::ClientContext* context, const ::rsh::protocol::InitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rsh::protocol::InitResponse>>(PrepareAsyncInitRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void Compile(::grpc::ClientContext* context, const ::rsh::protocol::CompileRequest* request, ::rsh::protocol::CompileResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Compile(::grpc::ClientContext* context, const ::rsh::protocol::CompileRequest* request, ::rsh::protocol::CompileResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Init(::grpc::ClientContext* context, const ::rsh::protocol::InitRequest* request, ::rsh::protocol::InitResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Init(::grpc::ClientContext* context, const ::rsh::protocol::InitRequest* request, ::rsh::protocol::InitResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rsh::protocol::CompileResponse>* AsyncCompileRaw(::grpc::ClientContext* context, const ::rsh::protocol::CompileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rsh::protocol::CompileResponse>* PrepareAsyncCompileRaw(::grpc::ClientContext* context, const ::rsh::protocol::CompileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rsh::protocol::InitResponse>* AsyncInitRaw(::grpc::ClientContext* context, const ::rsh::protocol::InitRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rsh::protocol::InitResponse>* PrepareAsyncInitRaw(::grpc::ClientContext* context, const ::rsh::protocol::InitRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Compile(::grpc::ClientContext* context, const ::rsh::protocol::CompileRequest& request, ::rsh::protocol::CompileResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rsh::protocol::CompileResponse>> AsyncCompile(::grpc::ClientContext* context, const ::rsh::protocol::CompileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rsh::protocol::CompileResponse>>(AsyncCompileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rsh::protocol::CompileResponse>> PrepareAsyncCompile(::grpc::ClientContext* context, const ::rsh::protocol::CompileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rsh::protocol::CompileResponse>>(PrepareAsyncCompileRaw(context, request, cq));
    }
    ::grpc::Status Init(::grpc::ClientContext* context, const ::rsh::protocol::InitRequest& request, ::rsh::protocol::InitResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rsh::protocol::InitResponse>> AsyncInit(::grpc::ClientContext* context, const ::rsh::protocol::InitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rsh::protocol::InitResponse>>(AsyncInitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rsh::protocol::InitResponse>> PrepareAsyncInit(::grpc::ClientContext* context, const ::rsh::protocol::InitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rsh::protocol::InitResponse>>(PrepareAsyncInitRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Compile(::grpc::ClientContext* context, const ::rsh::protocol::CompileRequest* request, ::rsh::protocol::CompileResponse* response, std::function<void(::grpc::Status)>) override;
      void Compile(::grpc::ClientContext* context, const ::rsh::protocol::CompileRequest* request, ::rsh::protocol::CompileResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Init(::grpc::ClientContext* context, const ::rsh::protocol::InitRequest* request, ::rsh::protocol::InitResponse* response, std::function<void(::grpc::Status)>) override;
      void Init(::grpc::ClientContext* context, const ::rsh::protocol::InitRequest* request, ::rsh::protocol::InitResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::rsh::protocol::CompileResponse>* AsyncCompileRaw(::grpc::ClientContext* context, const ::rsh::protocol::CompileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rsh::protocol::CompileResponse>* PrepareAsyncCompileRaw(::grpc::ClientContext* context, const ::rsh::protocol::CompileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rsh::protocol::InitResponse>* AsyncInitRaw(::grpc::ClientContext* context, const ::rsh::protocol::InitRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rsh::protocol::InitResponse>* PrepareAsyncInitRaw(::grpc::ClientContext* context, const ::rsh::protocol::InitRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Compile_;
    const ::grpc::internal::RpcMethod rpcmethod_Init_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Compile(::grpc::ServerContext* context, const ::rsh::protocol::CompileRequest* request, ::rsh::protocol::CompileResponse* response);
    virtual ::grpc::Status Init(::grpc::ServerContext* context, const ::rsh::protocol::InitRequest* request, ::rsh::protocol::InitResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Compile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Compile() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Compile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Compile(::grpc::ServerContext* /*context*/, const ::rsh::protocol::CompileRequest* /*request*/, ::rsh::protocol::CompileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCompile(::grpc::ServerContext* context, ::rsh::protocol::CompileRequest* request, ::grpc::ServerAsyncResponseWriter< ::rsh::protocol::CompileResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Init : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Init() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Init() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Init(::grpc::ServerContext* /*context*/, const ::rsh::protocol::InitRequest* /*request*/, ::rsh::protocol::InitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInit(::grpc::ServerContext* context, ::rsh::protocol::InitRequest* request, ::grpc::ServerAsyncResponseWriter< ::rsh::protocol::InitResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Compile<WithAsyncMethod_Init<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Compile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Compile() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::rsh::protocol::CompileRequest, ::rsh::protocol::CompileResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::rsh::protocol::CompileRequest* request, ::rsh::protocol::CompileResponse* response) { return this->Compile(context, request, response); }));}
    void SetMessageAllocatorFor_Compile(
        ::grpc::MessageAllocator< ::rsh::protocol::CompileRequest, ::rsh::protocol::CompileResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::rsh::protocol::CompileRequest, ::rsh::protocol::CompileResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Compile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Compile(::grpc::ServerContext* /*context*/, const ::rsh::protocol::CompileRequest* /*request*/, ::rsh::protocol::CompileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Compile(
      ::grpc::CallbackServerContext* /*context*/, const ::rsh::protocol::CompileRequest* /*request*/, ::rsh::protocol::CompileResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Init : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Init() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::rsh::protocol::InitRequest, ::rsh::protocol::InitResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::rsh::protocol::InitRequest* request, ::rsh::protocol::InitResponse* response) { return this->Init(context, request, response); }));}
    void SetMessageAllocatorFor_Init(
        ::grpc::MessageAllocator< ::rsh::protocol::InitRequest, ::rsh::protocol::InitResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::rsh::protocol::InitRequest, ::rsh::protocol::InitResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Init() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Init(::grpc::ServerContext* /*context*/, const ::rsh::protocol::InitRequest* /*request*/, ::rsh::protocol::InitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Init(
      ::grpc::CallbackServerContext* /*context*/, const ::rsh::protocol::InitRequest* /*request*/, ::rsh::protocol::InitResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Compile<WithCallbackMethod_Init<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Compile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Compile() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Compile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Compile(::grpc::ServerContext* /*context*/, const ::rsh::protocol::CompileRequest* /*request*/, ::rsh::protocol::CompileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Init : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Init() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Init() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Init(::grpc::ServerContext* /*context*/, const ::rsh::protocol::InitRequest* /*request*/, ::rsh::protocol::InitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Compile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Compile() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Compile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Compile(::grpc::ServerContext* /*context*/, const ::rsh::protocol::CompileRequest* /*request*/, ::rsh::protocol::CompileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCompile(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Init : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Init() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Init() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Init(::grpc::ServerContext* /*context*/, const ::rsh::protocol::InitRequest* /*request*/, ::rsh::protocol::InitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInit(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Compile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Compile() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Compile(context, request, response); }));
    }
    ~WithRawCallbackMethod_Compile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Compile(::grpc::ServerContext* /*context*/, const ::rsh::protocol::CompileRequest* /*request*/, ::rsh::protocol::CompileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Compile(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Init : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Init() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Init(context, request, response); }));
    }
    ~WithRawCallbackMethod_Init() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Init(::grpc::ServerContext* /*context*/, const ::rsh::protocol::InitRequest* /*request*/, ::rsh::protocol::InitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Init(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Compile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Compile() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::rsh::protocol::CompileRequest, ::rsh::protocol::CompileResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::rsh::protocol::CompileRequest, ::rsh::protocol::CompileResponse>* streamer) {
                       return this->StreamedCompile(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Compile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Compile(::grpc::ServerContext* /*context*/, const ::rsh::protocol::CompileRequest* /*request*/, ::rsh::protocol::CompileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCompile(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rsh::protocol::CompileRequest,::rsh::protocol::CompileResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Init : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Init() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::rsh::protocol::InitRequest, ::rsh::protocol::InitResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::rsh::protocol::InitRequest, ::rsh::protocol::InitResponse>* streamer) {
                       return this->StreamedInit(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Init() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Init(::grpc::ServerContext* /*context*/, const ::rsh::protocol::InitRequest* /*request*/, ::rsh::protocol::InitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedInit(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rsh::protocol::InitRequest,::rsh::protocol::InitResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Compile<WithStreamedUnaryMethod_Init<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Compile<WithStreamedUnaryMethod_Init<Service > > StreamedService;
};

// Used by the compile server to ask questions to R
// The server part there should be in the C++ code
class FactService final {
 public:
  static constexpr char const* service_full_name() {
    return "rsh.protocol.FactService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetContext(::grpc::ClientContext* context, const ::rsh::protocol::ContextRequest& request, ::rsh::protocol::Context* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rsh::protocol::Context>> AsyncGetContext(::grpc::ClientContext* context, const ::rsh::protocol::ContextRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rsh::protocol::Context>>(AsyncGetContextRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rsh::protocol::Context>> PrepareAsyncGetContext(::grpc::ClientContext* context, const ::rsh::protocol::ContextRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rsh::protocol::Context>>(PrepareAsyncGetContextRaw(context, request, cq));
    }
    virtual ::grpc::Status GetTypeFeedback(::grpc::ClientContext* context, const ::rsh::protocol::FeedbackRequest& request, ::rsh::protocol::TypeFeedback* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rsh::protocol::TypeFeedback>> AsyncGetTypeFeedback(::grpc::ClientContext* context, const ::rsh::protocol::FeedbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rsh::protocol::TypeFeedback>>(AsyncGetTypeFeedbackRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rsh::protocol::TypeFeedback>> PrepareAsyncGetTypeFeedback(::grpc::ClientContext* context, const ::rsh::protocol::FeedbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rsh::protocol::TypeFeedback>>(PrepareAsyncGetTypeFeedbackRaw(context, request, cq));
    }
    virtual ::grpc::Status GetValues(::grpc::ClientContext* context, const ::rsh::protocol::ValueRequest& request, ::rsh::protocol::Values* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rsh::protocol::Values>> AsyncGetValues(::grpc::ClientContext* context, const ::rsh::protocol::ValueRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rsh::protocol::Values>>(AsyncGetValuesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rsh::protocol::Values>> PrepareAsyncGetValues(::grpc::ClientContext* context, const ::rsh::protocol::ValueRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rsh::protocol::Values>>(PrepareAsyncGetValuesRaw(context, request, cq));
    }
    virtual ::grpc::Status GetFunction(::grpc::ClientContext* context, const ::rsh::protocol::FunctionRequest& request, ::rsh::protocol::Function* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rsh::protocol::Function>> AsyncGetFunction(::grpc::ClientContext* context, const ::rsh::protocol::FunctionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rsh::protocol::Function>>(AsyncGetFunctionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rsh::protocol::Function>> PrepareAsyncGetFunction(::grpc::ClientContext* context, const ::rsh::protocol::FunctionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rsh::protocol::Function>>(PrepareAsyncGetFunctionRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void GetContext(::grpc::ClientContext* context, const ::rsh::protocol::ContextRequest* request, ::rsh::protocol::Context* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetContext(::grpc::ClientContext* context, const ::rsh::protocol::ContextRequest* request, ::rsh::protocol::Context* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetTypeFeedback(::grpc::ClientContext* context, const ::rsh::protocol::FeedbackRequest* request, ::rsh::protocol::TypeFeedback* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetTypeFeedback(::grpc::ClientContext* context, const ::rsh::protocol::FeedbackRequest* request, ::rsh::protocol::TypeFeedback* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetValues(::grpc::ClientContext* context, const ::rsh::protocol::ValueRequest* request, ::rsh::protocol::Values* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetValues(::grpc::ClientContext* context, const ::rsh::protocol::ValueRequest* request, ::rsh::protocol::Values* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetFunction(::grpc::ClientContext* context, const ::rsh::protocol::FunctionRequest* request, ::rsh::protocol::Function* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetFunction(::grpc::ClientContext* context, const ::rsh::protocol::FunctionRequest* request, ::rsh::protocol::Function* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rsh::protocol::Context>* AsyncGetContextRaw(::grpc::ClientContext* context, const ::rsh::protocol::ContextRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rsh::protocol::Context>* PrepareAsyncGetContextRaw(::grpc::ClientContext* context, const ::rsh::protocol::ContextRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rsh::protocol::TypeFeedback>* AsyncGetTypeFeedbackRaw(::grpc::ClientContext* context, const ::rsh::protocol::FeedbackRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rsh::protocol::TypeFeedback>* PrepareAsyncGetTypeFeedbackRaw(::grpc::ClientContext* context, const ::rsh::protocol::FeedbackRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rsh::protocol::Values>* AsyncGetValuesRaw(::grpc::ClientContext* context, const ::rsh::protocol::ValueRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rsh::protocol::Values>* PrepareAsyncGetValuesRaw(::grpc::ClientContext* context, const ::rsh::protocol::ValueRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rsh::protocol::Function>* AsyncGetFunctionRaw(::grpc::ClientContext* context, const ::rsh::protocol::FunctionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rsh::protocol::Function>* PrepareAsyncGetFunctionRaw(::grpc::ClientContext* context, const ::rsh::protocol::FunctionRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetContext(::grpc::ClientContext* context, const ::rsh::protocol::ContextRequest& request, ::rsh::protocol::Context* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rsh::protocol::Context>> AsyncGetContext(::grpc::ClientContext* context, const ::rsh::protocol::ContextRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rsh::protocol::Context>>(AsyncGetContextRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rsh::protocol::Context>> PrepareAsyncGetContext(::grpc::ClientContext* context, const ::rsh::protocol::ContextRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rsh::protocol::Context>>(PrepareAsyncGetContextRaw(context, request, cq));
    }
    ::grpc::Status GetTypeFeedback(::grpc::ClientContext* context, const ::rsh::protocol::FeedbackRequest& request, ::rsh::protocol::TypeFeedback* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rsh::protocol::TypeFeedback>> AsyncGetTypeFeedback(::grpc::ClientContext* context, const ::rsh::protocol::FeedbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rsh::protocol::TypeFeedback>>(AsyncGetTypeFeedbackRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rsh::protocol::TypeFeedback>> PrepareAsyncGetTypeFeedback(::grpc::ClientContext* context, const ::rsh::protocol::FeedbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rsh::protocol::TypeFeedback>>(PrepareAsyncGetTypeFeedbackRaw(context, request, cq));
    }
    ::grpc::Status GetValues(::grpc::ClientContext* context, const ::rsh::protocol::ValueRequest& request, ::rsh::protocol::Values* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rsh::protocol::Values>> AsyncGetValues(::grpc::ClientContext* context, const ::rsh::protocol::ValueRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rsh::protocol::Values>>(AsyncGetValuesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rsh::protocol::Values>> PrepareAsyncGetValues(::grpc::ClientContext* context, const ::rsh::protocol::ValueRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rsh::protocol::Values>>(PrepareAsyncGetValuesRaw(context, request, cq));
    }
    ::grpc::Status GetFunction(::grpc::ClientContext* context, const ::rsh::protocol::FunctionRequest& request, ::rsh::protocol::Function* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rsh::protocol::Function>> AsyncGetFunction(::grpc::ClientContext* context, const ::rsh::protocol::FunctionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rsh::protocol::Function>>(AsyncGetFunctionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rsh::protocol::Function>> PrepareAsyncGetFunction(::grpc::ClientContext* context, const ::rsh::protocol::FunctionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rsh::protocol::Function>>(PrepareAsyncGetFunctionRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetContext(::grpc::ClientContext* context, const ::rsh::protocol::ContextRequest* request, ::rsh::protocol::Context* response, std::function<void(::grpc::Status)>) override;
      void GetContext(::grpc::ClientContext* context, const ::rsh::protocol::ContextRequest* request, ::rsh::protocol::Context* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetTypeFeedback(::grpc::ClientContext* context, const ::rsh::protocol::FeedbackRequest* request, ::rsh::protocol::TypeFeedback* response, std::function<void(::grpc::Status)>) override;
      void GetTypeFeedback(::grpc::ClientContext* context, const ::rsh::protocol::FeedbackRequest* request, ::rsh::protocol::TypeFeedback* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetValues(::grpc::ClientContext* context, const ::rsh::protocol::ValueRequest* request, ::rsh::protocol::Values* response, std::function<void(::grpc::Status)>) override;
      void GetValues(::grpc::ClientContext* context, const ::rsh::protocol::ValueRequest* request, ::rsh::protocol::Values* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetFunction(::grpc::ClientContext* context, const ::rsh::protocol::FunctionRequest* request, ::rsh::protocol::Function* response, std::function<void(::grpc::Status)>) override;
      void GetFunction(::grpc::ClientContext* context, const ::rsh::protocol::FunctionRequest* request, ::rsh::protocol::Function* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::rsh::protocol::Context>* AsyncGetContextRaw(::grpc::ClientContext* context, const ::rsh::protocol::ContextRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rsh::protocol::Context>* PrepareAsyncGetContextRaw(::grpc::ClientContext* context, const ::rsh::protocol::ContextRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rsh::protocol::TypeFeedback>* AsyncGetTypeFeedbackRaw(::grpc::ClientContext* context, const ::rsh::protocol::FeedbackRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rsh::protocol::TypeFeedback>* PrepareAsyncGetTypeFeedbackRaw(::grpc::ClientContext* context, const ::rsh::protocol::FeedbackRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rsh::protocol::Values>* AsyncGetValuesRaw(::grpc::ClientContext* context, const ::rsh::protocol::ValueRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rsh::protocol::Values>* PrepareAsyncGetValuesRaw(::grpc::ClientContext* context, const ::rsh::protocol::ValueRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rsh::protocol::Function>* AsyncGetFunctionRaw(::grpc::ClientContext* context, const ::rsh::protocol::FunctionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rsh::protocol::Function>* PrepareAsyncGetFunctionRaw(::grpc::ClientContext* context, const ::rsh::protocol::FunctionRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetContext_;
    const ::grpc::internal::RpcMethod rpcmethod_GetTypeFeedback_;
    const ::grpc::internal::RpcMethod rpcmethod_GetValues_;
    const ::grpc::internal::RpcMethod rpcmethod_GetFunction_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetContext(::grpc::ServerContext* context, const ::rsh::protocol::ContextRequest* request, ::rsh::protocol::Context* response);
    virtual ::grpc::Status GetTypeFeedback(::grpc::ServerContext* context, const ::rsh::protocol::FeedbackRequest* request, ::rsh::protocol::TypeFeedback* response);
    virtual ::grpc::Status GetValues(::grpc::ServerContext* context, const ::rsh::protocol::ValueRequest* request, ::rsh::protocol::Values* response);
    virtual ::grpc::Status GetFunction(::grpc::ServerContext* context, const ::rsh::protocol::FunctionRequest* request, ::rsh::protocol::Function* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetContext : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetContext() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetContext() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetContext(::grpc::ServerContext* /*context*/, const ::rsh::protocol::ContextRequest* /*request*/, ::rsh::protocol::Context* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetContext(::grpc::ServerContext* context, ::rsh::protocol::ContextRequest* request, ::grpc::ServerAsyncResponseWriter< ::rsh::protocol::Context>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTypeFeedback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetTypeFeedback() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetTypeFeedback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTypeFeedback(::grpc::ServerContext* /*context*/, const ::rsh::protocol::FeedbackRequest* /*request*/, ::rsh::protocol::TypeFeedback* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTypeFeedback(::grpc::ServerContext* context, ::rsh::protocol::FeedbackRequest* request, ::grpc::ServerAsyncResponseWriter< ::rsh::protocol::TypeFeedback>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetValues : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetValues() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetValues() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetValues(::grpc::ServerContext* /*context*/, const ::rsh::protocol::ValueRequest* /*request*/, ::rsh::protocol::Values* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetValues(::grpc::ServerContext* context, ::rsh::protocol::ValueRequest* request, ::grpc::ServerAsyncResponseWriter< ::rsh::protocol::Values>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetFunction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetFunction() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetFunction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFunction(::grpc::ServerContext* /*context*/, const ::rsh::protocol::FunctionRequest* /*request*/, ::rsh::protocol::Function* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetFunction(::grpc::ServerContext* context, ::rsh::protocol::FunctionRequest* request, ::grpc::ServerAsyncResponseWriter< ::rsh::protocol::Function>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetContext<WithAsyncMethod_GetTypeFeedback<WithAsyncMethod_GetValues<WithAsyncMethod_GetFunction<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetContext : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetContext() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::rsh::protocol::ContextRequest, ::rsh::protocol::Context>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::rsh::protocol::ContextRequest* request, ::rsh::protocol::Context* response) { return this->GetContext(context, request, response); }));}
    void SetMessageAllocatorFor_GetContext(
        ::grpc::MessageAllocator< ::rsh::protocol::ContextRequest, ::rsh::protocol::Context>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::rsh::protocol::ContextRequest, ::rsh::protocol::Context>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetContext() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetContext(::grpc::ServerContext* /*context*/, const ::rsh::protocol::ContextRequest* /*request*/, ::rsh::protocol::Context* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetContext(
      ::grpc::CallbackServerContext* /*context*/, const ::rsh::protocol::ContextRequest* /*request*/, ::rsh::protocol::Context* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetTypeFeedback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetTypeFeedback() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::rsh::protocol::FeedbackRequest, ::rsh::protocol::TypeFeedback>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::rsh::protocol::FeedbackRequest* request, ::rsh::protocol::TypeFeedback* response) { return this->GetTypeFeedback(context, request, response); }));}
    void SetMessageAllocatorFor_GetTypeFeedback(
        ::grpc::MessageAllocator< ::rsh::protocol::FeedbackRequest, ::rsh::protocol::TypeFeedback>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::rsh::protocol::FeedbackRequest, ::rsh::protocol::TypeFeedback>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetTypeFeedback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTypeFeedback(::grpc::ServerContext* /*context*/, const ::rsh::protocol::FeedbackRequest* /*request*/, ::rsh::protocol::TypeFeedback* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetTypeFeedback(
      ::grpc::CallbackServerContext* /*context*/, const ::rsh::protocol::FeedbackRequest* /*request*/, ::rsh::protocol::TypeFeedback* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetValues : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetValues() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::rsh::protocol::ValueRequest, ::rsh::protocol::Values>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::rsh::protocol::ValueRequest* request, ::rsh::protocol::Values* response) { return this->GetValues(context, request, response); }));}
    void SetMessageAllocatorFor_GetValues(
        ::grpc::MessageAllocator< ::rsh::protocol::ValueRequest, ::rsh::protocol::Values>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::rsh::protocol::ValueRequest, ::rsh::protocol::Values>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetValues() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetValues(::grpc::ServerContext* /*context*/, const ::rsh::protocol::ValueRequest* /*request*/, ::rsh::protocol::Values* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetValues(
      ::grpc::CallbackServerContext* /*context*/, const ::rsh::protocol::ValueRequest* /*request*/, ::rsh::protocol::Values* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetFunction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetFunction() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::rsh::protocol::FunctionRequest, ::rsh::protocol::Function>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::rsh::protocol::FunctionRequest* request, ::rsh::protocol::Function* response) { return this->GetFunction(context, request, response); }));}
    void SetMessageAllocatorFor_GetFunction(
        ::grpc::MessageAllocator< ::rsh::protocol::FunctionRequest, ::rsh::protocol::Function>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::rsh::protocol::FunctionRequest, ::rsh::protocol::Function>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetFunction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFunction(::grpc::ServerContext* /*context*/, const ::rsh::protocol::FunctionRequest* /*request*/, ::rsh::protocol::Function* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetFunction(
      ::grpc::CallbackServerContext* /*context*/, const ::rsh::protocol::FunctionRequest* /*request*/, ::rsh::protocol::Function* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetContext<WithCallbackMethod_GetTypeFeedback<WithCallbackMethod_GetValues<WithCallbackMethod_GetFunction<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetContext : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetContext() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetContext() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetContext(::grpc::ServerContext* /*context*/, const ::rsh::protocol::ContextRequest* /*request*/, ::rsh::protocol::Context* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetTypeFeedback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetTypeFeedback() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetTypeFeedback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTypeFeedback(::grpc::ServerContext* /*context*/, const ::rsh::protocol::FeedbackRequest* /*request*/, ::rsh::protocol::TypeFeedback* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetValues : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetValues() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetValues() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetValues(::grpc::ServerContext* /*context*/, const ::rsh::protocol::ValueRequest* /*request*/, ::rsh::protocol::Values* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetFunction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetFunction() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetFunction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFunction(::grpc::ServerContext* /*context*/, const ::rsh::protocol::FunctionRequest* /*request*/, ::rsh::protocol::Function* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetContext : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetContext() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetContext() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetContext(::grpc::ServerContext* /*context*/, const ::rsh::protocol::ContextRequest* /*request*/, ::rsh::protocol::Context* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetContext(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetTypeFeedback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetTypeFeedback() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetTypeFeedback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTypeFeedback(::grpc::ServerContext* /*context*/, const ::rsh::protocol::FeedbackRequest* /*request*/, ::rsh::protocol::TypeFeedback* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTypeFeedback(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetValues : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetValues() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetValues() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetValues(::grpc::ServerContext* /*context*/, const ::rsh::protocol::ValueRequest* /*request*/, ::rsh::protocol::Values* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetValues(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetFunction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetFunction() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetFunction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFunction(::grpc::ServerContext* /*context*/, const ::rsh::protocol::FunctionRequest* /*request*/, ::rsh::protocol::Function* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetFunction(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetContext : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetContext() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetContext(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetContext() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetContext(::grpc::ServerContext* /*context*/, const ::rsh::protocol::ContextRequest* /*request*/, ::rsh::protocol::Context* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetContext(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetTypeFeedback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetTypeFeedback() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetTypeFeedback(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetTypeFeedback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTypeFeedback(::grpc::ServerContext* /*context*/, const ::rsh::protocol::FeedbackRequest* /*request*/, ::rsh::protocol::TypeFeedback* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetTypeFeedback(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetValues : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetValues() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetValues(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetValues() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetValues(::grpc::ServerContext* /*context*/, const ::rsh::protocol::ValueRequest* /*request*/, ::rsh::protocol::Values* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetValues(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetFunction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetFunction() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetFunction(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetFunction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFunction(::grpc::ServerContext* /*context*/, const ::rsh::protocol::FunctionRequest* /*request*/, ::rsh::protocol::Function* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetFunction(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetContext : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetContext() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::rsh::protocol::ContextRequest, ::rsh::protocol::Context>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::rsh::protocol::ContextRequest, ::rsh::protocol::Context>* streamer) {
                       return this->StreamedGetContext(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetContext() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetContext(::grpc::ServerContext* /*context*/, const ::rsh::protocol::ContextRequest* /*request*/, ::rsh::protocol::Context* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetContext(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rsh::protocol::ContextRequest,::rsh::protocol::Context>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetTypeFeedback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetTypeFeedback() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::rsh::protocol::FeedbackRequest, ::rsh::protocol::TypeFeedback>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::rsh::protocol::FeedbackRequest, ::rsh::protocol::TypeFeedback>* streamer) {
                       return this->StreamedGetTypeFeedback(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetTypeFeedback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetTypeFeedback(::grpc::ServerContext* /*context*/, const ::rsh::protocol::FeedbackRequest* /*request*/, ::rsh::protocol::TypeFeedback* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetTypeFeedback(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rsh::protocol::FeedbackRequest,::rsh::protocol::TypeFeedback>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetValues : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetValues() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::rsh::protocol::ValueRequest, ::rsh::protocol::Values>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::rsh::protocol::ValueRequest, ::rsh::protocol::Values>* streamer) {
                       return this->StreamedGetValues(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetValues() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetValues(::grpc::ServerContext* /*context*/, const ::rsh::protocol::ValueRequest* /*request*/, ::rsh::protocol::Values* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetValues(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rsh::protocol::ValueRequest,::rsh::protocol::Values>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetFunction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetFunction() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::rsh::protocol::FunctionRequest, ::rsh::protocol::Function>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::rsh::protocol::FunctionRequest, ::rsh::protocol::Function>* streamer) {
                       return this->StreamedGetFunction(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetFunction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetFunction(::grpc::ServerContext* /*context*/, const ::rsh::protocol::FunctionRequest* /*request*/, ::rsh::protocol::Function* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetFunction(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rsh::protocol::FunctionRequest,::rsh::protocol::Function>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetContext<WithStreamedUnaryMethod_GetTypeFeedback<WithStreamedUnaryMethod_GetValues<WithStreamedUnaryMethod_GetFunction<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetContext<WithStreamedUnaryMethod_GetTypeFeedback<WithStreamedUnaryMethod_GetValues<WithStreamedUnaryMethod_GetFunction<Service > > > > StreamedService;
};

}  // namespace protocol
}  // namespace rsh


#endif  // GRPC_routes_2eproto__INCLUDED
