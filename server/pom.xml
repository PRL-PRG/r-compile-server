<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>org.prlprg</groupId>
  <artifactId>r-compile-server</artifactId>
  <version>0.1-SNAPSHOT</version>
  <packaging>jar</packaging>

  <name>r-jit-server</name>
  <url>https://maven.apache.org</url>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.compiler.source>24</maven.compiler.source>
    <maven.compiler.target>${maven.compiler.source}</maven.compiler.target>
    <protobuf.version>3.25.3</protobuf.version>
    <grpc.version>1.64.0</grpc.version>
  </properties>

  <dependencyManagement>
    <dependencies>
      <!-- JUnit5, unit tests -->
      <dependency>
        <groupId>org.junit</groupId>
        <artifactId>junit-bom</artifactId>
        <version>5.10.1</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <dependencies>
    <!-- ZeroMQ, socket communication -->
    <dependency>
      <groupId>org.zeromq</groupId>
      <artifactId>jeromq</artifactId>
      <version>0.6.0</version>
    </dependency>
    <!-- gRPC, RPC communication -->
    <dependency>
      <groupId>io.grpc</groupId>
      <artifactId>grpc-netty-shaded</artifactId>
      <version>${grpc.version}</version>
    </dependency>
    <dependency>
      <groupId>io.grpc</groupId>
      <artifactId>grpc-protobuf</artifactId>
      <version>${grpc.version}</version>
    </dependency>
    <dependency>
      <groupId>io.grpc</groupId>
      <artifactId>grpc-stub</artifactId>
      <version>${grpc.version}</version>
    </dependency>
    <dependency>
      <groupId>com.google.protobuf</groupId>
      <artifactId>protobuf-java</artifactId>
      <version>${protobuf.version}</version>
    </dependency>
    <dependency>
      <groupId>io.grpc</groupId>
      <artifactId>grpc-services</artifactId>
      <version>${grpc.version}</version>
    </dependency>
    <dependency>
      <groupId>io.grpc</groupId>
      <artifactId>grpc-inprocess</artifactId>
      <version>${grpc.version}</version>
    </dependency>
    <!-- To write unit tests for gRPC when using JUnit 5 -->
    <dependency>
      <groupId>com.asarkar.grpc</groupId>
      <artifactId>grpc-test</artifactId>
      <version>1.2.2</version>
    </dependency>
    <dependency>
      <!-- necessary for Java 9+ -->
      <groupId>org.apache.tomcat</groupId>
      <artifactId>annotations-api</artifactId>
      <version>6.0.53</version>
      <scope>provided</scope>
    </dependency>
    <!-- Guava, utilities -->
    <dependency>
      <groupId>com.google.guava</groupId>
      <artifactId>guava</artifactId>
      <version>33.1.0-jre</version>
    </dependency>
    <!-- jsr305, annotations for IDEs and static analyses -->
    <!-- (jsr305 is apparently deprecated, but seems to be the most well-supported annotation library) -->
    <dependency>
      <groupId>com.github.spotbugs</groupId>
      <artifactId>spotbugs-annotations</artifactId>
      <version>4.8.3</version>
      <optional>true</optional>
    </dependency>
    <!-- JetBrains annotations, specifically for `@Contract` and `@UnmodifiableView` -->
    <dependency>
      <groupId>org.jetbrains</groupId>
      <artifactId>annotations</artifactId>
      <version>24.1.0</version>
    </dependency>
    <!-- javac-warning-annotation, @Warning annotation so we can annotate unsafe methods -->
    <dependency>
      <groupId>com.pushtorefresh</groupId>
      <artifactId>javac-warning-annotation</artifactId>
      <version>1.0.0</version>
    </dependency>
    <!-- JUnit5, unit tests -->
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter</artifactId>
      <scope>test</scope>
    </dependency>
    <!-- Truth assertions, unit tests -->
    <dependency>
      <groupId>com.google.truth</groupId>
      <artifactId>truth</artifactId>
      <version>1.3.0</version>
      <scope>test</scope>
    </dependency>
    <!-- JQwik, property-based tests -->
    <dependency>
      <groupId>net.jqwik</groupId>
      <artifactId>jqwik</artifactId>
      <version>1.8.3</version>
      <scope>test</scope>
    </dependency>
  </dependencies>
  <build>
    <resources>
      <resource>
        <directory>src/main/resources</directory>
        <excludes>
          <exclude>**/*.proto</exclude>
        </excludes>
      </resource>
      <!-- If you had a separate resources entry pointing at src/main/proto, just remove it entirely. -->
    </resources>

    <!-- Snapshots aren't test resources, because we have to write to them, so we access them
                                     at their actual locations (bundled are overridden on recompile). -->
    <plugins>
      <!-- code gen for protobuf -->
      <plugin>
        <groupId>org.xolstice.maven.plugins</groupId>
        <artifactId>protobuf-maven-plugin</artifactId>
        <version>0.6.1</version>
        <configuration>
          <protocArtifact>com.google.protobuf:protoc:3.25.1:exe:${os.detected.classifier}</protocArtifact>
          <pluginId>grpc-java</pluginId>
          <pluginArtifact>io.grpc:protoc-gen-grpc-java:1.64.0:exe:${os.detected.classifier}</pluginArtifact>

          <!-- turn on timestamp-based staleness checking -->
          <checkStaleness>true</checkStaleness>
          <!-- (optional) minimum age in ms before considering a file stale;
              useful when building over NFS or other slow file systems -->
          <staleMillis>10000</staleMillis>

          <!-- do not attach .proto files as resources, otherwise, compilation takes ages -->
          <attachProtoSources>false</attachProtoSources>
        </configuration>
        <executions>
          <execution>
            <goals>
              <goal>compile</goal>
              <goal>compile-custom</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <!-- git-build-hook, install git hooks when you run any maven command so you don't forget -->
      <plugin>
        <groupId>com.rudikershaw.gitbuildhook</groupId>
        <artifactId>git-build-hook-maven-plugin</artifactId>
        <version>3.4.1</version>
        <configuration>
          <installHooks>
            <pre-commit>.githooks/pre-commit.sh</pre-commit>
          </installHooks>
        </configuration>
        <executions>
          <execution>
            <goals>
              <goal>install</goal>
            </goals>
            <phase>initialize</phase>
          </execution>
        </executions>
      </plugin>
      <!-- spotless, formatter better than checkstyle -->
      <plugin>
        <groupId>com.diffplug.spotless</groupId>
        <artifactId>spotless-maven-plugin</artifactId>
        <version>2.46.1</version>
        <configuration>
          <formats>
            <!-- Generally handle trailing whitespace and newline -->
            <format>
              <includes>
                <include>.gitignore</include>
                <include>.gitattributes</include>
                <include>.git-blame-ignore-revs</include>
                <include>.githooks/**</include>
              </includes>
              <trimTrailingWhitespace/>
              <endWithNewline/>
            </format>
            <!-- Makefile -->
            <format>
              <includes>
                <include>**/Makefile</include>
              </includes>
              <excludes>
                <exclude>target/**/*</exclude>
              </excludes>
              <indent>
                <tabs>true</tabs>
                <spacesPerTab>4</spacesPerTab>
              </indent>
              <trimTrailingWhitespace/>
              <endWithNewline/>
            </format>
          </formats>
          <java>
            <includes>
              <include>**/*.java</include>
            </includes>
            <excludes>
              <exclude>target/**/*</exclude>
            </excludes>
            <googleJavaFormat>
              <version>1.22.0</version>
              <style>GOOGLE</style>
              <formatJavadoc>true</formatJavadoc>
            </googleJavaFormat>
            <importOrder/>
            <removeUnusedImports/>
            <formatAnnotations/>
            <trimTrailingWhitespace/>
            <endWithNewline/>
          </java>
          <markdown>
            <includes>
              <include>**/*.md</include>
            </includes>
            <excludes>
              <exclude>target/**/*</exclude>
            </excludes>
            <indent>
              <spaces>true</spaces>
              <spacesPerTab>2</spacesPerTab>
            </indent>
            <flexmark/>
            <trimTrailingWhitespace/>
            <endWithNewline/>
          </markdown>
          <pom>
            <includes>
              <include>pom.xml</include>
            </includes>
            <indent>
              <spaces>true</spaces>
              <spacesPerTab>2</spacesPerTab>
            </indent>
            <sortPom>
              <expandEmptyElements>false</expandEmptyElements>
            </sortPom>
            <trimTrailingWhitespace/>
            <endWithNewline/>
          </pom>
          <yaml>
            <includes>
              <include>**/*.yaml</include>
              <include>**/*.yml</include>
            </includes>
            <excludes>
              <exclude>target/**/*</exclude>
            </excludes>
            <indent>
              <spaces>true</spaces>
              <spacesPerTab>2</spacesPerTab>
            </indent>
            <prettier/>
            <trimTrailingWhitespace/>
            <endWithNewline/>
          </yaml>
        </configuration>
        <!-- `executions` is required to run this on verify -->
        <executions>
          <execution>
            <goals>
              <goal>check</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <!-- Enable incremental compilation -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.13.0</version>
        <configuration>
          <!-- enable the compiler’s incremental mode -->
          <useIncrementalCompilation>false</useIncrementalCompilation>
          <source>24</source>
          <target>24</target>
          <compilerArgs>--enable-preview</compilerArgs>
        </configuration>
      </plugin>
      <!-- JUnit5, unit test runner -->
      <plugin>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>3.2.2</version>
        <!-- Run tests in parallel. You can annotate tests with @NotThreadSafe if necessary -->
        <configuration>
          <parallel>all</parallel>
          <threadCount>8</threadCount>
        </configuration>
        <!-- automatically runs on `test` (and `verify` because `verify` invokes `test`) -->
      </plugin>
      <!-- integration tests -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-failsafe-plugin</artifactId>
        <version>3.5.0</version>
        <executions>
          <execution>
            <goals>
              <goal>integration-test</goal>
              <goal>verify</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <!-- maven-javadoc-plugin, ensures there aren't javadoc issues -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-javadoc-plugin</artifactId>
        <version>3.7.0</version>
        <!-- `executions` is required to run this on verify -->
        <!-- disabled for now
                <executions>
                  <execution>
                    <goals>
                      <goal>javadoc</goal>
                      <goal>test-javadoc</goal>
                    </goals>
                    <phase>verify</phase>
                  </execution>
                </executions>
                -->
      </plugin>
      <plugin>
        <artifactId>maven-assembly-plugin</artifactId>
        <version>3.7.1</version>
        <configuration>
          <archive>
            <manifest>
              <mainClass>org.prlprg.server.Main</mainClass>
            </manifest>
          </archive>
          <descriptorRefs>
            <descriptorRef>jar-with-dependencies</descriptorRef>
          </descriptorRefs>
          <!--          <executions>-->
          <!--            <execution>-->
          <!--              <id>make-assembly</id>-->
          <!--              <phase>package</phase>-->
          <!--              <goals>-->
          <!--                <goal>single</goal>-->
          <!--              </goals>-->
          <!--            </execution>-->
          <!--          </executions>-->
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>exec-maven-plugin</artifactId>
        <version>3.5.0</version>
        <configuration>
          <mainClass>org.prlprg.server.CompileServer</mainClass>
        </configuration>
        <executions>
          <execution>
            <goals>
              <goal>java</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

    </plugins>
    <extensions>
      <!-- For gRPC/protobuf-->
      <extension>
        <groupId>kr.motd.maven</groupId>
        <artifactId>os-maven-plugin</artifactId>
        <version>1.7.1</version>
      </extension>
    </extensions>
  </build>
</project>
