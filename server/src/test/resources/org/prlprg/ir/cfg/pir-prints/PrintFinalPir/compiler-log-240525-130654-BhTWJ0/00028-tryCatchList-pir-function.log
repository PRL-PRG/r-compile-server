
┌──────────────────────────────────────────────────────────────────────────────┐
│ tryCatchList[0x55c7c46d08a0]                                                 │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;NonRefl2,!Obj2                       │
│ Properties:                                                                  │
├────── Final PIR Version
tryCatchList[0x55c7c46d08a0]
BB0
  val?^           %0.0  = LdArg                    3
  val?^           %0.1  = LdArg                    2
  val?^           %0.2  = LdArg                    1
  val?^           %0.3  = LdArg                    0
  val?^ | miss    %0.4  = LdVar              eR    length, ?
  lgl$#-          %0.5  = Identical                <blt length>, %0.4   <true>
  void                    Branch                   %0.5 -> BB16 (if true) | BB17 (if false)
BB16   <- [0]
  env             e16.0 = MkEnv              l     expr=%0.3, names=%0.2, parentenv=%0.1, handlers=%0.0, parent=?, context 1
  val?            %16.1 = Force!<lazy>       !v    %0.2, e16.0   <str->
  lgl$#-          %16.2 = IsType                   %16.1 isA val?-
  void                    Branch                   %16.2 -> BB18 (if true) | BB19 (if false)
BB17   <- [0]
  env             e17.0 = (MkEnv)            l     expr=%0.3, names=%0.2, parentenv=%0.1, handlers=%0.0, parent=?, context 1
  fs              %17.1 = FrameState         R     0x55c7c4383200+0: [], env=e17.0
  void                    Deopt              !v    %17.1, DeadBranchReached@0x55c7c432b4a0[Test#0], %0.5
BB18   <- [16]
  val?-           %18.0 = CastType           d     dn %16.1   <str->
  (int|real)$-    %18.1 = CallSafeBuiltin    wed   length(%18.0)    <int$->
  lgl$#-          %18.2 = IsType                   %18.1 isA int$-
  void                    Branch                   %18.2 -> BB20 (if true) | BB21 (if false)
BB19   <- [16]
  fs              %19.0 = FrameState         R     0x55c7c4383200+69: [<blt length>, %16.1], env=e16.0
  void                    Deopt              !v    %19.0, Typecheck@0x55c7c432b4a0[Type#1], %16.1   !
BB20   <- [18]
  int$-           %20.0 = CastType           d     dn %18.1
  void                    StVar              lW    nh, %20.0, e16.0
  void                    Visible            v     
  lgl$-           %20.3 = Gt                 vd    %20.0, 1L, elided   <lgl$->
  lgl$#-          %20.4 = CheckTrueFalse     e     %20.3
  void                    Branch                   %20.4 -> BB14 (if true) | BB9 (if false)
BB21   <- [18]
  fs              %21.0 = FrameState         R     0x55c7c4383200+91: [%18.1], env=e16.0
  void                    Deopt              !v    %21.0, Typecheck@0x55c7c432b4a0[Type#2], %18.1   !
BB14   <- [20]
  val?^ | miss    %14.0 = LdVar              eR    tryCatchOne, e16.0
  (cls|spec|blt)  %14.1 = CastType                 dn %14.0
  val+            %14.2 = CallSafeBuiltin          bodyCode(%14.1) 
  lgl$#-          %14.3 = Identical                %14.2, <(rir::DispatchTable*)0x55c7c4525a10>
  void                    Branch                   %14.3 -> BB22 (if true) | BB23 (if false)
BB9   <- [20]
  void                    Visible            v     
  lgl$-           %9.1  = Eq                 vd    %20.0, 1L, elided   <lgl$->
  lgl$#-          %9.2  = CheckTrueFalse     e     %9.1
  void                    Branch                   %9.2 -> BB13 (if true) | BB10 (if false)
BB22   <- [14]
  val?            %22.0 = Force!             d     %14.0, 
  prom-           %22.1 = MkArg                    unboundValue, tryCatchList[0x55c7c46d08a0]_p4, e16.0
  prom-           %22.2 = MkArg                    unboundValue, tryCatchList[0x55c7c46d08a0]_p11, e16.0
  prom-           %22.3 = MkArg                    unboundValue, tryCatchList[0x55c7c46d08a0]_p13, e16.0
  prom-           %22.4 = MkArg                    unboundValue, tryCatchList[0x55c7c46d08a0]_p14, e16.0
  (cls|spec|blt)  %22.5 = ChkFunction        e     %22.0
  val?            %22.6 = StaticCall         !     tryCatchOne[0x55c7c44af800](%22.1, %22.2, %22.3, %22.4) from %22.5 e16.0   <(str|vec)->
  val?            %22.7 = %22.6
  goto BB12
BB23   <- [14]
  void                    Nop                !     
  val+            %23.1 = %14.2
  dr              %23.2 = CallTarget@0x55c7c432b4a0[Call#2]
  goto BB7
BB13   <- [9]
  val?^ | miss    %13.0 = LdVar              eR    tryCatchOne, e16.0
  (cls|spec|blt)  %13.1 = CastType                 dn %13.0
  val+            %13.2 = CallSafeBuiltin          bodyCode(%13.1) 
  lgl$#-          %13.3 = Identical                %13.2, <(rir::DispatchTable*)0x55c7c4525a10>
  void                    Branch                   %13.3 -> BB24 (if true) | BB25 (if false)
BB10   <- [9]
  val?^ | miss    %10.0 = LdVar              eR    expr, e16.0
  void                    Visible            v     
  val?            %10.2 = Force!             !     %10.0, e16.0   <val?_>
  val?            %10.3 = %10.2
  goto BB11
BB12   <- [11, 22]
  val?            %12.0 = Phi                      %11.2:BB11, %22.7:BB22
  val?            %12.1 = %12.0
  void                    Return             l     %12.1
BB7   <- [23, 25]
  val?^ | miss    %7.0  = Phi                      %23.1:BB23, %25.1:BB25
  val?^ | miss    %7.1  = %7.0
  dr              %7.2  = Phi                      %23.2:BB23, %25.2:BB25
  dr              %7.3  = %7.2
  fs              %7.4  = FrameState         R     0x55c7c4383200+105: [], env=e16.0
  void                    Deopt              !v    %7.4, %7.3, %7.1   !
BB24   <- [13]
  val?            %24.0 = Force!             d     %13.0, 
  prom-           %24.1 = MkArg                    unboundValue, tryCatchList[0x55c7c46d08a0]_p0, e16.0
  prom-           %24.2 = MkArg                    unboundValue, tryCatchList[0x55c7c46d08a0]_p1, e16.0
  prom-           %24.3 = MkArg                    unboundValue, tryCatchList[0x55c7c46d08a0]_p2, e16.0
  prom-           %24.4 = MkArg                    unboundValue, tryCatchList[0x55c7c46d08a0]_p3, e16.0
  (cls|spec|blt)  %24.5 = ChkFunction        e     %24.0
  val?            %24.6 = StaticCall         !     tryCatchOne[0x55c7c44af800](%24.1, %24.2, %24.3, %24.4) from %24.5 e16.0   <(str|vec)->
  val?            %24.7 = %24.6
  goto BB11
BB25   <- [13]
  void                    Nop                !     
  val+            %25.1 = %13.2
  dr              %25.2 = CallTarget@0x55c7c432b4a0[Call#1]
  goto BB7
BB11   <- [10, 24]
  val?            %11.0 = Phi                      %10.3:BB10, %24.7:BB24
  val?            %11.1 = %11.0
  val?            %11.2 = %11.1
  goto BB12
Prom 0:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    expr, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <(str|vec)->
  void                    Return             l     %0.3
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    names, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    parentenv, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 3:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    handlers, e0.0
  val?            %0.2  = Force<lazy>        !v    %0.1, e0.0   <vec$+>
  val?            %0.3  = Extract2_1D        !v    %0.2, 1L, e0.0   <cls->
  void                    Visible            v     
  void                    Return             l     %0.3
Prom 4:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     tryCatchList, <0x55c7c44665f0>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, tryCatchList[0x55c7c46d08a0]_p5, e0.0
  prom-           %0.3  = MkArg                    unboundValue, tryCatchList[0x55c7c46d08a0]_p6, e0.0
  prom-           %0.4  = MkArg                    unboundValue, tryCatchList[0x55c7c46d08a0]_p8, e0.0
  prom-           %0.5  = MkArg                    unboundValue, tryCatchList[0x55c7c46d08a0]_p9, e0.0
  val?            %0.6  = Call               !     %0.1(%0.2, %0.3, %0.4, %0.5) e0.0   <vec->
  void                    Return             l     %0.6
Prom 5:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    expr, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <vec->
  void                    Return             l     %0.3
Prom 6:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    names, e0.0
  val?            %0.2  = Force<wrapped>     !v    %0.1, e0.0   <str->
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <true>
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    nh, e0.0
  val?            %2.1  = Force<value>       !v    %2.0, e0.0   <int$->
  val?            %2.2  = Minus              !v    %2.1, e0.0
  val?            %2.3  = %2.2
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, tryCatchList[0x55c7c46d08a0]_p7, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.3:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract1_1D        !v    %0.2, %3.1, e0.0   <str$->
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 7:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    nh, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  val?            %0.4  = Minus              !     %0.3, e0.0
  void                    Return             l     %0.4
Prom 8:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    parentenv, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 9:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    handlers, e0.0
  val?            %0.2  = Force<wrapped>     !v    %0.1, e0.0   <vec+>
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <true>
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    nh, e0.0
  val?            %2.1  = Force<value>       !v    %2.0, e0.0   <int$->
  val?            %2.2  = Minus              !v    %2.1, e0.0
  val?            %2.3  = %2.2
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, tryCatchList[0x55c7c46d08a0]_p10, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.3:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract1_1D        !v    %0.2, %3.1, e0.0   <vec$+>
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 10:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    nh, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  val?            %0.4  = Minus              !     %0.3, e0.0
  void                    Return             l     %0.4
Prom 11:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    names, e0.0
  val?            %0.2  = Force<wrapped>     !v    %0.1, e0.0   <str->
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <true>
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    nh, e0.0
  val?            %2.1  = Force<value>       !v    %2.0, e0.0   <int$->
  val?            %2.2  = %2.1
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, tryCatchList[0x55c7c46d08a0]_p12, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.2:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract1_1D        !v    %0.2, %3.1, e0.0   <str$->
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 12:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    nh, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 13:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    parentenv, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 14:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    handlers, e0.0
  val?            %0.2  = Force<lazy>        !v    %0.1, e0.0   <vec+>
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <true>
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    nh, e0.0
  val?            %2.1  = Force<value>       !v    %2.0, e0.0   <int$->
  val?            %2.2  = %2.1
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, tryCatchList[0x55c7c46d08a0]_p15, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.2:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract2_1D        !v    %0.2, %3.1, e0.0   <cls->
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 15:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    nh, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3

│ tryCatchList[0x55c7c46d08a0]                                                 │
└──────────────────────────────────────────────────────────────────────────────┘
