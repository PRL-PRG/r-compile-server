
┌──────────────────────────────────────────────────────────────────────────────┐
│ %in%[0x5638bc9d4780]                                                         │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;Eager0,NonRefl0,!Obj0                │
│ Properties:  Eager, ForceOrd: 0 1                                            │
├────── Final PIR Version
%in%[0x5638bc9d4780]
BB0
  val?^           %0.0  = LdArg                    1
  val?~+          %0.1  = LdArg                    0
  val+            %0.2  = Force<lazy>              %0.1,    <(int|str)+>
  env             e0.3  = (MkEnv)            l     x=%0.1, table=%0.0, parent=R_BaseNamespace, context 1
  val?            %0.4  = Force!<lazy>       !vL   %0.0, e0.3   <val?+>
  lgl$#-          %0.5  = IsType                   %0.4 isA val?+
  lgl$#-          %0.6  = IsEnvStub          R     , e0.3
  void                    Branch                   %0.6 -> BB6 (if true) | BB7 (if false)
BB6   <- [0]
  void                    Branch                   %0.5 -> BB8 (if true) | BB9 (if false)
BB7   <- [0]
  void                    Nop                !     
  env             e7.1  = e0.3
  dr              %7.2  = EnvStubMaterialized@0x5638bb0cc688[Call#unknown]
  goto BB5
BB8   <- [6]
  val?+           %8.0  = CastType           d     dn %0.4
  val+            %8.1  = CallSafeBuiltin    wed   match(%0.2, %8.0, 0L, nil)    <int->
  lgl$#-          %8.2  = IsType                   %8.1 isA int-
  void                    Visible            v     
  void                    Branch                   %8.2 -> BB10 (if true) | BB11 (if false)
BB9   <- [6]
  void                    Nop                !     
  val?            %9.1  = %0.4
  dr              %9.2  = Typecheck@0x5638bb0cc688[Type#1]
  goto BB5
BB5   <- [7, 9]
  val?^ | miss    %5.0  = Phi                      e7.1:BB7, %9.1:BB9
  val?^ | miss    %5.1  = %5.0
  dr              %5.2  = Phi                      %7.2:BB7, %9.2:BB9
  dr              %5.3  = %5.2
  env             e5.4  = MaterializeEnv           , e0.3   <@?>
  fs              %5.5  = FrameState         R     0x5638ba09a320+54: [], env=e5.4
  prom-           %5.6  = MkArg                    unboundValue, %in%[0x5638bc9d4780]_p1, e5.4
  val?^           %5.7  = CastType                 up %5.6
  prom-           %5.8  = MkArg                    %0.2, %in%[0x5638bc9d4780]_p0 (!refl), e5.4
  val?~           %5.9  = CastType                 up %5.8
  env             e5.10 = (MkEnv)            l     incomparables(miss)=nil, nomatch=0L, table=%5.7, x=%5.9, parent=R_BaseNamespace, context 0
  fs              %5.11 = FrameState         R     0x5638ba281d40+23: [%0.2], env=e5.10, next=%5.5
  fs              %5.12 = FrameState         R     0x5638ba09acb0+5(pr): [%0.4], env=e5.4, next=%5.11
  void                    Deopt              !v    %5.12, %5.3, %5.1   !
BB10   <- [8]
  int-            %10.0 = CastType           d     dn %8.1
  lgl-            %10.1 = Gt                 vwed  %10.0, 0L, elided   <lgl->
  void                    Return             l     %10.1
BB11   <- [8]
  env             e11.0 = MaterializeEnv           , e0.3   <@?>
  fs              %11.1 = FrameState         R     0x5638ba09a320+54: [], env=e11.0
  prom-           %11.2 = MkArg                    %8.0, %in%[0x5638bc9d4780]_p1 (!refl), e11.0
  val?~           %11.3 = CastType                 up %11.2
  prom-           %11.4 = MkArg                    %0.2, %in%[0x5638bc9d4780]_p0 (!refl), e11.0
  val?~           %11.5 = CastType                 up %11.4
  env             e11.6 = (MkEnv)            l     incomparables(miss)=nil, nomatch=0L, table=%11.3, x=%11.5, parent=R_BaseNamespace, context 0
  fs              %11.7 = FrameState         R     0x5638ba281d40+69: [%8.1], env=e11.6, next=%11.1
  void                    Deopt              !v    %11.7, Typecheck@0x5638bb0cc688[Type#2], %8.1   !
Prom 0:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    x, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <(int|str)+>
  void                    Return             l     %0.3
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    table, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <val?+>
  void                    Return             l     %0.3

│ %in%[0x5638bc9d4780]                                                         │
└──────────────────────────────────────────────────────────────────────────────┘
