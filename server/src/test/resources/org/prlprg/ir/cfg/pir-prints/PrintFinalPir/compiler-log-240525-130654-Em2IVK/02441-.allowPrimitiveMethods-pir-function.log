
┌──────────────────────────────────────────────────────────────────────────────┐
│ .allowPrimitiveMethods[0x556a27793e30]                                       │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;Eager0,NonRefl0,!Obj0                │
│ Properties:  Eager, ForceOrd: 0                                              │
├────── Final PIR Version
.allowPrimitiveMethods[0x556a27793e30]
BB0
  val?~+          %0.0  = LdArg                    0
  val+            %0.1  = Force<lazy>              %0.0,    <lgl$->
  lgl$#-          %0.2  = IsType                   %0.1 isA lgl$-
  void                    Branch                   %0.2 -> BB13 (if true) | BB14 (if false)
BB13   <- [0]
  lgl$-           %13.0 = CastType           d     dn %0.1
  lgl$#-          %13.1 = CheckTrueFalse     e     %13.0
  env             e13.2 = MkEnv              l     onOff=%0.0, parent=<env 0x556a1ba11378>, context 1
  void                    Branch                   %13.1 -> BB11 (if true) | BB3 (if false)
BB14   <- [0]
  env             e14.0 = (MkEnv)            l     onOff=%0.0, parent=<env 0x556a1ba11378>, context 1
  fs              %14.1 = FrameState         R     0x556a1e9cb710+9: [%0.1], env=e14.0
  void                    Deopt              !v    %14.1, Typecheck@0x556a1fdf3008[Type#0], %0.1
BB11   <- [13]
  void                    Nop                !     
  str$#-          %11.1 = "SET"
  goto BB4
BB3   <- [13]
  void                    Nop                !     
  str$#-          %3.1  = "CLEAR"
  goto BB4
BB4   <- [3, 11]
  str$#-          %4.0  = Phi                      %3.1:BB3, %11.1:BB11
  str$#-          %4.1  = %4.0
  void                    StVar              lW    code, %4.1, e13.2
  val?^ | miss    %4.3  = LdVar              eR    .Call, <env 0x556a1ba11378>
  lgl$#-          %4.4  = Identical                <blt .Call>, %4.3   <true>
  void                    Branch                   %4.4 -> BB15 (if true) | BB16 (if false)
BB15   <- [4]
  val?^ | miss    %15.0 = LdVar              eR    C_R_M_setPrimitiveMethods, <env 0x556a1ba11378>
  val?            %15.1 = Force!<value>      !v    %15.0, e13.2   <vec>
  val?^ | miss    %15.2 = LdVar              eR    code, e13.2
  lgl$#-          %15.3 = IsType                   %15.2 isA val?~- | miss
  void                    Branch                   %15.3 -> BB17 (if true) | BB18 (if false)
BB16   <- [4]
  fs              %16.0 = FrameState         R     0x556a1e9cb710+46: [], env=e13.2
  void                    Deopt              !v    %16.0, DeadBranchReached@0x556a1fdf3008[Test#0], %4.4
BB17   <- [15]
  val?~- | miss   %17.0 = CastType           d     dn %15.2
  val?-           %17.1 = Force!<value>            %17.0,    <str$->
  val?            %17.2 = CallBuiltin        !     .Call(%15.1, "", nil, %17.1, nil, nil) e13.2   <lgl$->
  lgl$#-          %17.3 = IsType                   %17.2 isA lgl$-
  void                    Branch                   %17.3 -> BB19 (if true) | BB20 (if false)
BB18   <- [15]
  fs              %18.0 = FrameState         R     0x556a1e9cb710+140: [<blt .Call>, %15.1], env=e13.2
  void                    Deopt              !v    %18.0, Typecheck@0x556a1fdf3008[Type#4], %15.2   !
BB19   <- [17]
  lgl$-           %19.0 = CastType           d     dn %17.2
  void                    Return             l     %19.0
BB20   <- [17]
  fs              %20.0 = FrameState         R     0x556a1e9cb710+200: [%17.2], env=e13.2
  void                    Deopt              !v    %20.0, Typecheck@0x556a1fdf3008[Type#5], %17.2   !

│ .allowPrimitiveMethods[0x556a27793e30]                                       │
└──────────────────────────────────────────────────────────────────────────────┘
