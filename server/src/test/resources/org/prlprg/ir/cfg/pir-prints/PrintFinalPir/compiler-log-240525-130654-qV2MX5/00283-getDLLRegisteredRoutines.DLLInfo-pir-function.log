
┌──────────────────────────────────────────────────────────────────────────────┐
│ getDLLRegisteredRoutines.DLLInfo[0x55de2bdbd4e0]                             │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;Eager1,NonRefl1,!Obj1                │
│ Properties:                                                                  │
├────── Final PIR Version
getDLLRegisteredRoutines.DLLInfo[0x55de2bdbd4e0]
BB0
  val?~+          %0.0  = LdArg                    1
  val?^           %0.1  = LdArg                    0
  env             e0.2  = MkEnv              l     dll=%0.1, addNames=%0.0, parent=R_BaseNamespace, context 1
  prom-           %0.3  = MkArg                    unboundValue, getDLLRegisteredRoutines.DLLInfo[0x55de2bdbd4e0]_p0, e0.2
  ct              %0.4  = PushContext        lCL   %0.3, "DLLInfo", inherits(dll, "DLLInfo"), function(x, what, which=FALSE) <(rir::Dispatch|..., e0.2
  val?^           %0.5  = CastType                 up %0.3
  env             e0.6  = MkEnv              l     x=%0.5, what="DLLInfo", which(miss)=false, parent=R_BaseNamespace, context 1
  val?            %0.7  = Force!<lazy>       !vL   %0.5, e0.6   <val?>
  val?            %0.8  = CallBuiltin        !v    inherits(%0.7, "DLLInfo", false) e0.6
  val?            %0.9  = PopContext         C     %0.8, %0.4   <lgl$->
  lgl$#-          %0.10 = IsType                   %0.9 isA lgl$-
  void                    Branch                   %0.10 -> BB10 (if true) | BB11 (if false)
BB10   <- [0]
  lgl$-           %10.0 = CastType           d     dn %0.9
  lgl$-           %10.1 = Not                d     %10.0, elided
  lgl$#-          %10.2 = CheckTrueFalse     e     %10.1
  void                    Branch                   %10.2 -> BB8 (if true) | BB3 (if false)
BB11   <- [0]
  fs              %11.0 = FrameState         R     0x55de2a610600+37: [%0.9], env=e0.2
  void                    Deopt              !v    %11.0, Typecheck@0x55de2aca6478[Type#1], %0.9   !
BB8   <- [10]
  (cls|spec|blt)  %8.0  = LdFun              !v    stop, e0.2
  fs              %8.1  = FrameState         R     0x55de2a610600+59: [%8.0], env=e0.2
  void                    Deopt              !v    %8.1, DeadCall@0x55de2aca6478[Call#1], %8.0   !
BB3   <- [10]
  val?^ | miss    %3.0  = LdVar              eR    dll, e0.2
  val?            %3.1  = Force!<wrapped>    !v    %3.0, e0.2   <vec>
  lgl$#-          %3.2  = IsType                   %3.1 isA val+   <false>
  void                    Branch                   %3.2 -> BB13 (if true) | BB12 (if false)
BB13   <- [3]
  fs              %13.0 = FrameState         R     0x55de2a610600+109: [%3.1], env=e0.2
  void                    Deopt              !v    %13.0, DeadBranchReached@0x55de2aca6478[Test#0], %3.2   !
BB12   <- [3]
  val?            %12.0 = Extract2_1D        !v    %3.1, "info", e0.2   <other>
  void                    StVar              lW    info, %12.0, e0.2
  val             %12.2 = ChkMissing         e     %12.0
  val?            %12.3 = CallBuiltin        !v    getRegisteredRoutines(%12.0) e0.2
  void                    StVar              lW    els, %12.3, e0.2
  val?^ | miss    %12.5 = LdVar              eR    addNames, e0.2
  val?            %12.6 = Force!<value>      !v    %12.5, e0.2   <lgl$->
  lgl$#-          %12.7 = CheckTrueFalse     we    %12.6
  void                    Branch                   %12.7 -> BB7 (if true) | BB6 (if false)
BB7   <- [12]
  (cls|spec|blt)  %7.0  = LdFun              !v    lapply, e0.2
  fs              %7.1  = FrameState         R     0x55de2a610600+233: [%7.0], env=e0.2
  void                    Deopt              !v    %7.1, DeadCall@0x55de2aca6478[Call#4], %7.0   !
BB6   <- [12]
  (cls|spec|blt)  %6.0  = LdFun              !v    <-, <0x55de28543da8>, e0.2
  prom-           %6.1  = MkArg                    unboundValue, getDLLRegisteredRoutines.DLLInfo[0x55de2bdbd4e0]_p1, e0.2
  val?            %6.2  = Call               !v    %6.0(%6.1, "DLLRegisteredRoutines") e0.2
  val?^ | miss    %6.3  = LdVar              eR    els, e0.2
  void                    Visible            v     
  val?            %6.5  = Force!<value>      !     %6.3, e0.2   <vec>
  void                    Return             l     %6.5
Prom 0:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    dll, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <vec>
  void                    Return             l     %0.3
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     class, e0.0
  prom-           %0.2  = MkArg                    unboundValue, getDLLRegisteredRoutines.DLLInfo[0x55de2bdbd4e0]_p2, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    els, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3

│ getDLLRegisteredRoutines.DLLInfo[0x55de2bdbd4e0]                             │
└──────────────────────────────────────────────────────────────────────────────┘
