
┌──────────────────────────────────────────────────────────────────────────────┐
│ array[0x5614ffa37320]                                                        │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;NonRefl1,NonRefl2                    │
│ Properties:  ForceOrd: 0                                                     │
├────── Final PIR Version
array[0x5614ffa37320]
BB0
  val?^           %0.0  = LdArg                    2
  val?^           %0.1  = LdArg                    1
  val?^           %0.2  = LdArg                    0
  env             e0.3  = MkEnv              l     data=%0.2, dim=%0.1, dimnames=%0.0, parent=R_BaseNamespace, context 1
  val?            %0.4  = Force!<lazy>       !v    %0.2, e0.3   <val?+>
  lgl$#-          %0.5  = IsType                   %0.4 isA val?+
  void                    Branch                   %0.5 -> BB74 (if true) | BB75 (if false)
BB74   <- [0]
  val?+           %74.0 = CastType           d     dn %0.4
  lgl$#-          %74.1 = CallSafeBuiltin    wed   is.atomic(%74.0)    <lgl$->
  void                    Branch                   %74.1 -> BB72 (if true) | BB5 (if false)
BB75   <- [0]
  fs              %75.0 = FrameState         R     0x5614fef8eda0+69: [<blt is.atomic>, %0.4], env=e0.3
  void                    Deopt              !v    %75.0, Typecheck@0x561505705f10[Type#3], %0.4   !
BB72   <- [74]
  val?^ | miss    %72.0 = LdVar              eR    is.object, e0.3
  lgl$#-          %72.1 = Identical                <blt is.object>, %72.0   <true>
  void                    Branch                   %72.1 -> BB76 (if true) | BB77 (if false)
BB5   <- [74]
  void                    Nop                !     
  lgl$#-          %5.1  = %74.1
  goto BB6
BB76   <- [72]
  val?^ | miss    %76.0 = LdVar              eR    data, e0.3
  val?            %76.1 = Force!<wrapped>    !v    %76.0, e0.3   <val?+>
  lgl$#-          %76.2 = CallSafeBuiltin    wed   is.object(%76.1)    <lgl$->
  lgl$#-          %76.3 = Not                d     %76.2, elided
  lgl$-           %76.4 = LAnd                     %74.1, %76.3
  lgl$-           %76.5 = %76.4
  goto BB6
BB77   <- [72]
  fs              %77.0 = FrameState         R     0x5614fef8eda0+91: [%74.1], env=e0.3
  void                    Deopt              !v    %77.0, DeadBranchReached@0x561505705f10[Test#1], %72.1   !
BB6   <- [5, 76]
  lgl$-           %6.0  = Phi                      %76.5:BB76, %5.1:BB5
  lgl$-           %6.1  = %6.0
  lgl$#-          %6.2  = CheckTrueFalse     e     %6.1
  void                    Branch                   %6.2 -> BB69 (if true) | BB7 (if false)
BB69   <- [6]
  val?^ | miss    %69.0 = LdVar              eR    data, e0.3
  val?            %69.1 = Force!<wrapped>    !v    %69.0, e0.3   <val?+>
  val?^ | miss    %69.2 = LdVar              eR    dim, e0.3
  val?            %69.3 = Force!<lazy>       !v    %69.2, e0.3   <(int|real)->
  val?^ | miss    %69.4 = LdVar              eR    dimnames, e0.3
  val?            %69.5 = Force!<lazy>       !v    %69.4, e0.3   <vec->
  lgl$#-          %69.6 = IsType                   %69.5 isA val?-
  lgl$#-          %69.7 = IsType                   %69.1 isA val?+
  lgl$#-          %69.8 = IsType                   %69.3 isA val?-
  void                    Branch                   %69.7 -> BB78 (if true) | BB79 (if false)
BB7   <- [6]
  (cls|spec|blt)  %7.0  = LdFun              !v    as.vector, e0.3
  prom-           %7.1  = MkArg                    unboundValue, array[0x5614ffa37320]_p0, e0.3
  val?            %7.2  = Call               !v    %7.0(%7.1) e0.3   <val?_>
  void                    StVar              lW    data, %7.2, e0.3
  val?^ | miss    %7.4  = LdVar              eR    is.object, e0.3
  lgl$#-          %7.5  = Identical                <blt is.object>, %7.4   <@?>
  void                    Branch                   %7.5 -> BB68 (if true) | BB8 (if false)
BB78   <- [69]
  val?+           %78.0 = CastType           d     dn %69.1
  void                    Branch                   %69.8 -> BB80 (if true) | BB81 (if false)
BB79   <- [69]
  void                    Nop                !     
  val?            %79.1 = %69.1
  dr              %79.2 = Typecheck@0x561505705f10[Type#8]
  goto BB70
BB68   <- [7]
  val             %68.0 = ChkMissing         e     %7.2
  lgl$#-          %68.1 = CallSafeBuiltin    wed   is.object(%7.2) 
  lgl$#-          %68.2 = %68.1
  goto BB9
BB8   <- [7]
  val             %8.0  = ChkMissing         e     %7.2
  lgl$#-          %8.1  = CallSafeBuiltin    wed   is.object(%7.2) 
  lgl$#-          %8.2  = %8.1
  goto BB9
BB80   <- [78]
  val?-           %80.0 = CastType           d     dn %69.3   <(int|real)->
  void                    Branch                   %69.6 -> BB82 (if true) | BB83 (if false)
BB81   <- [78]
  void                    Nop                !     
  val?            %81.1 = %69.3
  dr              %81.2 = Typecheck@0x561505705f10[Type#9]
  goto BB70
BB70   <- [79, 81, 83]
  val?^ | miss    %70.0 = Phi                      %79.1:BB79, %81.1:BB81, %83.1:BB83
  val?^ | miss    %70.1 = %70.0
  dr              %70.2 = Phi                      %79.2:BB79, %81.2:BB81, %83.2:BB83
  dr              %70.3 = %70.2
  fs              %70.4 = FrameState         R     0x5614fef8eda0+250: [%69.1, %69.3, %69.5], env=e0.3
  void                    Deopt              !v    %70.4, %70.3, %70.1   !
BB9   <- [68, 8]
  lgl$#-          %9.0  = Phi                      %8.2:BB8, %68.2:BB68   <val?_>
  lgl$#-          %9.1  = %9.0
  void                    Branch                   %9.1 -> BB15 (if true) | BB10 (if false)
BB82   <- [80]
  val?-           %82.0 = CastType           d     dn %69.5   <vec->
  val+            %82.1 = CallSafeBuiltin    vwed  array(%78.0, %80.0, %82.0) 
  val+            %82.2 = %82.1
  goto BB14
BB83   <- [80]
  void                    Nop                !     
  val?            %83.1 = %69.5
  dr              %83.2 = Typecheck@0x561505705f10[Type#10]
  goto BB70
BB15   <- [9]
  val?^ | miss    %15.0 = LdVar              eR    as.integer, e0.3
  lgl$#-          %15.1 = Identical                <blt as.integer>, %15.0   <@?>
  void                    Branch                   %15.1 -> BB65 (if true) | BB16 (if false)
BB10   <- [9]
  val             %10.0 = ChkMissing         e     %7.2
  val?^ | miss    %10.1 = LdVar              eR    dim, e0.3
  val?            %10.2 = Force!             !v    %10.1, e0.3   <val?_>
  val?^ | miss    %10.3 = LdVar              eR    dimnames, e0.3
  val?            %10.4 = Force!             !v    %10.3, e0.3   <val?_>
  lgl$#-          %10.5 = IsType                   %10.4 isA val?+
  lgl$#-          %10.6 = IsType                   %10.2 isA val?+
  lgl$#-          %10.7 = IsType                   %7.2 isA val?+
  void                    Branch                   %10.7 -> BB84 (if true) | BB85 (if false)
BB14   <- [13, 82]
  val?            %14.0 = Phi                      %13.2:BB13, %82.2:BB82
  val?            %14.1 = %14.0
  void                    Return             l     %14.1
BB65   <- [15]
  val?^ | miss    %65.0 = LdVar              eR    dim, e0.3
  val?            %65.1 = Force!             !v    %65.0, e0.3   <val?_>
  lgl$#-          %65.2 = IsType                   %65.1 isA val?+
  void                    Branch                   %65.2 -> BB90 (if true) | BB91 (if false)
BB16   <- [15]
  val?^ | miss    %16.0 = LdVar              eR    dim, e0.3
  val?            %16.1 = Force!             !v    %16.0, e0.3   <val?_>
  val?            %16.2 = CallBuiltin        !v    as.integer(%16.1) e0.3
  val?            %16.3 = %16.2
  goto BB17
BB84   <- [10]
  val?+           %84.0 = CastType           d     dn %7.2   <val?_>
  void                    Branch                   %10.6 -> BB86 (if true) | BB87 (if false)
BB85   <- [10]
  void                    Nop                !     
  val?            %85.1 = %7.2
  dr              %85.2 = Typecheck@0x561505705f10[Type#12]
  goto BB11
BB90   <- [65]
  val?+           %90.0 = CastType           d     dn %65.1   <val?_>
  int-            %90.1 = CallSafeBuiltin    wed   as.integer(%90.0) 
  int-            %90.2 = %90.1
  goto BB17
BB91   <- [65]
  fs              %91.0 = FrameState         R     0x5614fef8eda0+546: [<blt as.integer>, %65.1], env=e0.3
  void                    Deopt              !v    %91.0, Typecheck@0x561505705f10[Type#20], %65.1   !
BB17   <- [16, 90]
  val?            %17.0 = Phi                      %16.3:BB16, %90.2:BB90   <val?_>
  val?            %17.1 = %17.0
  void                    StVar              lW    dim, %17.1, e0.3
  val?^ | miss    %17.3 = LdVar              eR    length, e0.3
  lgl$#-          %17.4 = Identical                <blt length>, %17.3   <@?>
  void                    Branch                   %17.4 -> BB64 (if true) | BB20 (if false)
BB86   <- [84]
  val?+           %86.0 = CastType           d     dn %10.2   <val?_>
  void                    Branch                   %10.5 -> BB88 (if true) | BB89 (if false)
BB87   <- [84]
  void                    Nop                !     
  val?            %87.1 = %10.2
  dr              %87.2 = Typecheck@0x561505705f10[Type#17]
  goto BB11
BB11   <- [85, 87, 89]
  val?^ | miss    %11.0 = Phi                      %85.1:BB85, %87.1:BB87, %89.1:BB89
  val?^ | miss    %11.1 = %11.0
  dr              %11.2 = Phi                      %85.2:BB85, %87.2:BB87, %89.2:BB89
  dr              %11.3 = %11.2
  fs              %11.4 = FrameState         R     0x5614fef8eda0+454: [%7.2, %10.2, %10.4], env=e0.3
  void                    Deopt              !v    %11.4, %11.3, %11.1   !
BB64   <- [17]
  val             %64.0 = ChkMissing         e     %17.1
  lgl$#-          %64.1 = IsType                   %17.1 isA val?+
  void                    Branch                   %64.1 -> BB94 (if true) | BB95 (if false)
BB20   <- [17]
  val             %20.0 = ChkMissing         e     %17.1
  lgl$#-          %20.1 = IsType                   %17.1 isA val?+
  void                    Branch                   %20.1 -> BB92 (if true) | BB93 (if false)
BB88   <- [86]
  val?+           %88.0 = CastType           d     dn %10.4   <val?_>
  val+            %88.1 = CallSafeBuiltin    vwed  array(%84.0, %86.0, %88.0) 
  val+            %88.2 = %88.1
  goto BB13
BB89   <- [86]
  void                    Nop                !     
  val?            %89.1 = %10.4
  dr              %89.2 = Typecheck@0x561505705f10[Type#18]
  goto BB11
BB94   <- [64]
  val?+           %94.0 = CastType           d     dn %17.1   <val?_>
  (int|real)$-    %94.1 = CallSafeBuiltin    wed   length(%94.0) 
  (int|real)$-    %94.2 = %94.1
  goto BB21
BB95   <- [64]
  void                    Nop                !     
  val?            %95.1 = %17.1
  dr              %95.2 = Typecheck@0x561505705f10[Type#21]
  goto BB18
BB92   <- [20]
  val?+           %92.0 = CastType           d     dn %17.1   <val?_>
  (int|real)$-    %92.1 = CallSafeBuiltin    wed   length(%92.0) 
  (int|real)$-    %92.2 = %92.1
  goto BB21
BB93   <- [20]
  void                    Nop                !     
  val?            %93.1 = %17.1
  dr              %93.2 = Typecheck@0x561505705f10[Type#21]
  goto BB18
BB13   <- [41, 88]
  val?            %13.0 = Phi                      %88.2:BB88, %41.3:BB41
  val?            %13.1 = %13.0
  val?            %13.2 = %13.1
  goto BB14
BB21   <- [92, 94]
  (int|real)$-    %21.0 = Phi                      %92.2:BB92, %94.2:BB94   <val?_>
  (int|real)$-    %21.1 = %21.0
  lgl$-           %21.2 = Not                d     %21.1, elided
  lgl$#-          %21.3 = CheckTrueFalse     e     %21.2
  void                    Branch                   %21.3 -> BB63 (if true) | BB22 (if false)
BB18   <- [93, 95]
  val?            %18.0 = Phi                      %93.1:BB93, %95.1:BB95
  val?            %18.1 = %18.0
  dr              %18.2 = Phi                      %93.2:BB93, %95.2:BB95
  dr              %18.3 = %18.2
  fs              %18.4 = FrameState         R     0x5614fef8eda0+582: [], env=e0.3
  void                    Deopt              !v    %18.4, %18.3, %18.1   !
BB63   <- [21]
  (cls|spec|blt)  %63.0 = LdFun              !v    stop, e0.3
  val?            %63.1 = Call               !v    %63.0("'dim' cannot be of length 0") e0.3
  goto BB23
BB22   <- [21]
  void                    Nop                !     
  goto BB23
BB23   <- [63, 22]
  val?^ | miss    %23.0 = LdVar              eR    prod, e0.3
  lgl$#-          %23.1 = Identical                <blt prod>, %23.0   <@?>
  void                    Branch                   %23.1 -> BB60 (if true) | BB24 (if false)
BB60   <- [23]
  val?^ | miss    %60.0 = LdVar              eR    dim, e0.3
  val?            %60.1 = Force!             !v    %60.0, e0.3   <val?_>
  lgl$#-          %60.2 = IsType                   %60.1 isA val?+
  void                    Branch                   %60.2 -> BB96 (if true) | BB97 (if false)
BB24   <- [23]
  val?^ | miss    %24.0 = LdVar              eR    dim, e0.3
  val?            %24.1 = Force!             !v    %24.0, e0.3   <val?_>
  val?            %24.2 = CallBuiltin        !v    prod(%24.1) e0.3
  val?            %24.3 = %24.2
  goto BB25
BB96   <- [60]
  val?+           %96.0 = CastType           d     dn %60.1   <val?_>
  (real|complex)$- %96.1 = CallSafeBuiltin    wed   prod(%96.0) 
  (real|complex)$- %96.2 = %96.1
  goto BB25
BB97   <- [60]
  fs              %97.0 = FrameState         R     0x5614fef8eda0+792: [<blt prod>, %60.1], env=e0.3
  void                    Deopt              !v    %97.0, Typecheck@0x561505705f10[Type#26], %60.1   !
BB25   <- [24, 96]
  val?            %25.0 = Phi                      %24.3:BB24, %96.2:BB96   <val?_>
  val?            %25.1 = %25.0
  void                    StVar              lW    vl, %25.1, e0.3
  val?^ | miss    %25.3 = LdVar              eR    length, e0.3
  lgl$#-          %25.4 = Identical                <blt length>, %25.3   <@?>
  void                    Branch                   %25.4 -> BB57 (if true) | BB26 (if false)
BB57   <- [25]
  val?^ | miss    %57.0 = LdVar              eR    data, e0.3
  val?            %57.1 = Force!             !v    %57.0, e0.3   <val?_>
  lgl$#-          %57.2 = IsType                   %57.1 isA val?+
  void                    Branch                   %57.2 -> BB98 (if true) | BB99 (if false)
BB26   <- [25]
  val?^ | miss    %26.0 = LdVar              eR    data, e0.3
  val?            %26.1 = Force!             !v    %26.0, e0.3   <val?_>
  val?            %26.2 = CallBuiltin        !v    length(%26.1) e0.3
  val?            %26.3 = %26.2
  goto BB27
BB98   <- [57]
  val?+           %98.0 = CastType           d     dn %57.1   <val?_>
  (int|real)$-    %98.1 = CallSafeBuiltin    wed   length(%98.0) 
  (int|real)$-    %98.2 = %98.1
  goto BB27
BB99   <- [57]
  fs              %99.0 = FrameState         R     0x5614fef8eda0+897: [<blt length>, %57.1], env=e0.3
  void                    Deopt              !v    %99.0, Typecheck@0x561505705f10[Type#29], %57.1   !
BB27   <- [26, 98]
  val?            %27.0 = Phi                      %26.3:BB26, %98.2:BB98   <val?_>
  val?            %27.1 = %27.0
  val?^ | miss    %27.2 = LdVar              eR    vl, e0.3
  val?            %27.3 = Force!             !v    %27.2, e0.3   <val?_>
  lgl$#-          %27.4 = IsType                   %27.3 isA val?+
  lgl$#-          %27.5 = IsType                   %27.1 isA val?+
  void                    Branch                   %27.5 -> BB100 (if true) | BB101 (if false)
BB100   <- [27]
  val?+           %100.0 = CastType           d     dn %27.1   <val?_>
  void                    Branch                   %27.4 -> BB102 (if true) | BB103 (if false)
BB101   <- [27]
  void                    Nop                !     
  val?            %101.1 = %27.1
  dr              %101.2 = Typecheck@0x561505705f10[Type#30]
  goto BB28
BB102   <- [100]
  val?+           %102.0 = CastType           d     dn %27.3   <val?_>
  lgl             %102.1 = Neq                wed   %100.0, %102.0, elided   <val?_>
  lgl$#-          %102.2 = CheckTrueFalse     we    %102.1
  void                    Branch                   %102.2 -> BB51 (if true) | BB30 (if false)
BB103   <- [100]
  void                    Nop                !     
  val?            %103.1 = %27.3
  dr              %103.2 = Typecheck@0x561505705f10[Type#31]
  goto BB28
BB28   <- [101, 103]
  val?            %28.0 = Phi                      %101.1:BB101, %103.1:BB103
  val?            %28.1 = %28.0
  dr              %28.2 = Phi                      %101.2:BB101, %103.2:BB103
  dr              %28.3 = %28.2
  fs              %28.4 = FrameState         R     0x5614fef8eda0+933: [%27.1, %27.3], env=e0.3
  void                    Deopt              !v    %28.4, %28.3, %28.1   !
BB51   <- [102]
  val?^ | miss    %51.0 = LdVar              eR    vl, e0.3
  val?            %51.1 = Force!             !v    %51.0, e0.3   <val?_>
  (cls|spec|blt)  %51.2 = LdFun              !v    $, e0.3
  prom-           %51.3 = MkArg                    unboundValue, array[0x5614ffa37320]_p1, e0.3
  prom-           %51.4 = MkArg                    unboundValue, array[0x5614ffa37320]_p2, e0.3
  val?            %51.5 = Call               !v    %51.2(%51.3, %51.4) e0.3   <val?_>
  lgl$#-          %51.6 = IsType                   %51.5 isA val?+
  lgl$#-          %51.7 = IsType                   %51.1 isA val?+
  void                    Branch                   %51.7 -> BB104 (if true) | BB105 (if false)
BB30   <- [102]
  void                    Nop                !     
  goto BB31
BB104   <- [51]
  val?+           %104.0 = CastType           d     dn %51.1   <val?_>
  void                    Branch                   %51.6 -> BB108 (if true) | BB109 (if false)
BB105   <- [51]
  void                    Nop                !     
  val?            %105.1 = %51.1
  dr              %105.2 = Typecheck@0x561505705f10[Type#33]
  goto BB52
BB31   <- [30, 55]
  val?^ | miss    %31.0 = LdVar              eR    length, e0.3
  lgl$#-          %31.1 = Identical                <blt length>, %31.0   <@?>
  void                    Branch                   %31.1 -> BB48 (if true) | BB32 (if false)
BB108   <- [104]
  val?+           %108.0 = CastType           d     dn %51.5   <val?_>
  lgl             %108.1 = Gt                 wed   %104.0, %108.0, elided   <val?_>
  lgl$#-          %108.2 = CheckTrueFalse     we    %108.1
  void                    Branch                   %108.2 -> BB56 (if true) | BB54 (if false)
BB109   <- [104]
  void                    Nop                !     
  val?            %109.1 = %51.5
  dr              %109.2 = Typecheck@0x561505705f10[Type#36]
  goto BB52
BB52   <- [105, 109]
  val?^ | miss    %52.0 = Phi                      %105.1:BB105, %109.1:BB109
  val?^ | miss    %52.1 = %52.0
  dr              %52.2 = Phi                      %105.2:BB105, %109.2:BB109
  dr              %52.3 = %52.2
  fs              %52.4 = FrameState         R     0x5614fef8eda0+1006: [%51.1, %51.5], env=e0.3
  void                    Deopt              !v    %52.4, %52.3, %52.1   !
BB48   <- [31]
  val?^ | miss    %48.0 = LdVar              eR    dim, e0.3
  val?            %48.1 = Force!             !v    %48.0, e0.3   <val?_>
  lgl$#-          %48.2 = IsType                   %48.1 isA val?+
  void                    Branch                   %48.2 -> BB106 (if true) | BB107 (if false)
BB32   <- [31]
  val?^ | miss    %32.0 = LdVar              eR    dim, e0.3
  val?            %32.1 = Force!             !v    %32.0, e0.3   <val?_>
  val?            %32.2 = CallBuiltin        !v    length(%32.1) e0.3
  val?            %32.3 = %32.2
  goto BB33
BB56   <- [108]
  (cls|spec|blt)  %56.0 = LdFun              !v    stop, e0.3
  val?            %56.1 = Call               !v    %56.0("'dim' specifies too large an array") e0.3
  goto BB55
BB54   <- [108]
  void                    Nop                !     
  goto BB55
BB106   <- [48]
  val?+           %106.0 = CastType           d     dn %48.1   <val?_>
  (int|real)$-    %106.1 = CallSafeBuiltin    wed   length(%106.0) 
  (int|real)$-    %106.2 = %106.1
  goto BB33
BB107   <- [48]
  fs              %107.0 = FrameState         R     0x5614fef8eda0+1181: [<blt length>, %48.1], env=e0.3
  void                    Deopt              !v    %107.0, Typecheck@0x561505705f10[Type#42], %48.1   !
BB33   <- [32, 106]
  val?            %33.0 = Phi                      %32.3:BB32, %106.2:BB106   <val?_>
  val?            %33.1 = %33.0
  lgl$#-          %33.2 = CheckTrueFalse     we    %33.1
  void                    Branch                   %33.2 -> BB47 (if true) | BB34 (if false)
BB55   <- [54, 56]
  (cls|spec|blt)  %55.0 = LdFun              !v    rep_len, e0.3
  prom-           %55.1 = MkArg                    unboundValue, array[0x5614ffa37320]_p3, e0.3
  prom-           %55.2 = MkArg                    unboundValue, array[0x5614ffa37320]_p4, e0.3
  val?            %55.3 = Call               !v    %55.0(%55.1, %55.2) e0.3   <val?_>
  void                    StVar              lW    data, %55.3, e0.3
  goto BB31
BB47   <- [33]
  val?^ | miss    %47.0 = LdVar              eR    dim, e0.3
  val?            %47.1 = Force!             !v    %47.0, e0.3   <val?_>
  (cls|spec|blt)  %47.2 = LdFun              !v    dim<-, e0.3
  val?^ | miss    %47.3 = LdVar              eR    data, e0.3
  val?            %47.4 = Force!             !v    %47.3, e0.3   <val?_>
  val?            %47.5 = NamedCall          !v    %47.2(%47.4, value=%47.1) e0.3
  void                    StVar              lW    data, %47.5, e0.3
  goto BB35
BB34   <- [33]
  void                    Nop                !     
  goto BB35
BB35   <- [47, 34]
  val?^ | miss    %35.0 = LdVar              eR    dimnames, e0.3
  val?            %35.1 = Force!             !v    %35.0, e0.3   <val?_>
  lgl$-           %35.2 = Is                       %35.1, list
  lgl$-           %35.3 = AsLogical                %35.2
  lgl$#-          %35.4 = Identical                %35.3, false
  void                    Branch                   %35.4 -> BB46 (if true) | BB36 (if false)
BB46   <- [35]
  void                    Nop                !     
  lgl$-           %46.1 = %35.3
  goto BB39
BB36   <- [35]
  val?^ | miss    %36.0 = LdVar              eR    length, e0.3
  lgl$#-          %36.1 = Identical                <blt length>, %36.0   <@?>
  void                    Branch                   %36.1 -> BB43 (if true) | BB37 (if false)
BB39   <- [46, 38]
  lgl$-           %39.0 = Phi                      %38.4:BB38, %46.1:BB46
  lgl$-           %39.1 = %39.0
  lgl$#-          %39.2 = CheckTrueFalse     e     %39.1
  void                    Branch                   %39.2 -> BB42 (if true) | BB40 (if false)
BB43   <- [36]
  val?^ | miss    %43.0 = LdVar              eR    dimnames, e0.3
  val?            %43.1 = Force!             !v    %43.0, e0.3   <val?_>
  lgl$#-          %43.2 = IsType                   %43.1 isA val?+
  void                    Branch                   %43.2 -> BB110 (if true) | BB111 (if false)
BB37   <- [36]
  val?^ | miss    %37.0 = LdVar              eR    dimnames, e0.3
  val?            %37.1 = Force!             !v    %37.0, e0.3   <val?_>
  val?            %37.2 = CallBuiltin        !v    length(%37.1) e0.3
  val?            %37.3 = %37.2
  goto BB38
BB42   <- [39]
  val?^ | miss    %42.0 = LdVar              eR    dimnames, e0.3
  val?            %42.1 = Force!             !v    %42.0, e0.3   <val?_>
  (cls|spec|blt)  %42.2 = LdFun              !v    dimnames<-, e0.3
  val?^ | miss    %42.3 = LdVar              eR    data, e0.3
  val?            %42.4 = Force!             !v    %42.3, e0.3   <val?_>
  val?            %42.5 = NamedCall          !v    %42.2(%42.4, value=%42.1) e0.3
  void                    StVar              lW    data, %42.5, e0.3
  goto BB41
BB40   <- [39]
  void                    Nop                !     
  goto BB41
BB110   <- [43]
  val?+           %110.0 = CastType           d     dn %43.1   <val?_>
  real$-          %110.1 = CallSafeBuiltin    wed   length(%110.0) 
  real$-          %110.2 = %110.1
  goto BB38
BB111   <- [43]
  fs              %111.0 = FrameState         R     0x5614fef8eda0+1396: [%35.3, <blt length>, %43.1], env=e0.3
  void                    Deopt              !v    %111.0, Typecheck@0x561505705f10[Type#48], %43.1   !
BB38   <- [37, 110]
  val?            %38.0 = Phi                      %37.3:BB37, %110.2:BB110   <val?_>
  val?            %38.1 = %38.0
  lgl$-           %38.2 = AsLogical          e     %38.1
  lgl$-           %38.3 = LAnd                     %35.3, %38.2
  lgl$-           %38.4 = %38.3
  goto BB39
BB41   <- [42, 40]
  val?^ | miss    %41.0 = LdVar              eR    data, e0.3
  void                    Visible            v     
  val?            %41.2 = Force!             !     %41.0, e0.3   <val?_>
  val?            %41.3 = %41.2
  goto BB13
Prom 0:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    data, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    .Machine, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    integer.max, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 3:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    data, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 4:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    vl, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3

│ array[0x5614ffa37320]                                                        │
└──────────────────────────────────────────────────────────────────────────────┘
