
┌──────────────────────────────────────────────────────────────────────────────┐
│ tryCatchList[0x562e92007f00]                                                 │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;NonRefl1,NonRefl2,NonRefl3,!Obj1,!Obj2,!Obj3│
│ Properties:                                                                  │
├────── PIR Version After Optimizations
tryCatchList[0x562e92007f00]
BB0
  goto BB1
BB1   <- [0]
  val?^           %1.0  = LdArg                    3
  val?^           %1.1  = LdArg                    2
  val?^           %1.2  = LdArg                    1
  val?^           %1.3  = LdArg                    0
  cp              %1.4  = Checkpoint                -> BB2 (default) | BB13 (if assume failed)
BB2   <- [1]
  val?^ | miss    %2.0  = LdVar              eR    length, ?
  lgl$#-          %2.1  = Identical                <blt length>, %2.0   <true>
  void                    Assume             D     %2.1, %1.4 (DeadBranchReached@0x562e91cc0440[Test#0])
  env             e2.3  = MkEnv              l     expr=%1.3, names=%1.2, parentenv=%1.1, handlers=%1.0, parent=?, context 1
  val+            %2.4  = Force!<lazy>       !vr   %1.2,    <str->
  (int|real)$-    %2.5  = CallSafeBuiltin    wed   length(%2.4)    <int$->
  lgl$#-          %2.6  = IsType                   %2.5 isA int$-
  cp              %2.7  = Checkpoint                -> BB4 (default) | BB3 (if assume failed)
BB13   <- [1]
  env             e13.0 = (MkEnv)            l     expr=%1.3, names=%1.2, parentenv=%1.1, handlers=%1.0, parent=?, context 1
  fs              %13.1 = FrameState         R     0x562e91ce9a80+0: [], env=e13.0
  void                    Deopt              !v    %13.1
BB4   <- [2]
  void                    Assume             D     %2.6, %2.7 (Typecheck@0x562e91cc0440[Type#2])
  int$-           %4.1  = CastType           d     dn %2.5
  void                    StVar              lW    nh, %4.1, e2.3
  cp              %4.3  = Checkpoint                -> BB6 (default) | BB5 (if assume failed)
BB3   <- [2]
  fs              %3.0  = FrameState         R     0x562e91ce9a80+91: [%2.5], env=e2.3
  void                    Deopt              !v    %3.0
BB6   <- [4]
  void                    Visible            v     
  lgl$-           %6.1  = Gt                 vd    %4.1, 1L, elided   <lgl$->
  lgl$#-          %6.2  = CheckTrueFalse     e     %6.1
  void                    Branch                   %6.2 -> BB12 (if true) | BB7 (if false)
BB5   <- [4]
  fs              %5.0  = FrameState         R     0x562e91ce9a80+105: [], env=e2.3
  void                    Deopt              !v    %5.0
BB12   <- [6]
  val?^ | miss    %12.0 = LdVar              eR    tryCatchOne, ?
  (cls|spec|blt)  %12.1 = CastType                 dn %12.0
  val+            %12.2 = CallSafeBuiltin          bodyCode(%12.1) 
  lgl$#-          %12.3 = Identical                %12.2, <(rir::DispatchTable*)0x562e90f50400>
  void                    Assume             D     %12.3, %4.3 (CallTarget@0x562e91cc0440[Call#2])
  val?            %12.5 = Force!             d     %12.0, 
  prom-           %12.6 = MkArg                    unboundValue, tryCatchList[0x562e92007f00]_p4, e2.3
  prom-           %12.7 = MkArg                    unboundValue, tryCatchList[0x562e92007f00]_p11, e2.3
  prom-           %12.8 = MkArg                    unboundValue, tryCatchList[0x562e92007f00]_p13 (!refl), e2.3
  prom-           %12.9 = MkArg                    unboundValue, tryCatchList[0x562e92007f00]_p14, e2.3
  (cls|spec|blt)  %12.10 = ChkFunction        e     %12.5
  val?            %12.11 = StaticCall         !     tryCatchOne[0x562e91f1cd80](%12.6, %12.7, %12.8, %12.9) from %12.10 e2.3   <(str|vec)->
  goto BB10
BB7   <- [6]
  void                    Visible            v     
  lgl$-           %7.1  = Eq                 vd    %4.1, 1L, elided   <lgl$->
  lgl$#-          %7.2  = CheckTrueFalse     e     %7.1
  void                    Branch                   %7.2 -> BB11 (if true) | BB8 (if false)
BB10   <- [12, 9]
  val?            %10.0 = Phi                      %9.0:BB9, %12.11:BB12
  void                    Return             l     %10.0
BB11   <- [7]
  val?^ | miss    %11.0 = LdVar              eR    tryCatchOne, ?
  (cls|spec|blt)  %11.1 = CastType                 dn %11.0
  val+            %11.2 = CallSafeBuiltin          bodyCode(%11.1) 
  lgl$#-          %11.3 = Identical                %11.2, <(rir::DispatchTable*)0x562e90f50400>
  void                    Assume             D     %11.3, %4.3 (CallTarget@0x562e91cc0440[Call#1])
  val?            %11.5 = Force!             d     %11.0, 
  prom-           %11.6 = MkArg                    unboundValue, tryCatchList[0x562e92007f00]_p0, e2.3
  prom-           %11.7 = MkArg                    unboundValue, tryCatchList[0x562e92007f00]_p1 (!refl), e2.3
  prom-           %11.8 = MkArg                    unboundValue, tryCatchList[0x562e92007f00]_p2 (!refl), e2.3
  prom-           %11.9 = MkArg                    unboundValue, tryCatchList[0x562e92007f00]_p3, e2.3
  (cls|spec|blt)  %11.10 = ChkFunction        e     %11.5
  val?            %11.11 = StaticCall         !     tryCatchOne[0x562e920c0910](%11.6, %11.7, %11.8, %11.9) from %11.10 e2.3   <(str|vec)->
  goto BB9
BB8   <- [7]
  void                    Visible            v     
  val?            %8.1  = Force!             !     %1.3, e2.3   <val?_>
  goto BB9
BB9   <- [8, 11]
  val?            %9.0  = Phi                      %8.1:BB8, %11.11:BB11
  goto BB10
Prom 0:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    expr, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <(str|vec)->
  void                    Return             l     %1.3
Prom 1:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    names, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 2:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    parentenv, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <env->
  void                    Return             l     %1.3
Prom 3:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    handlers, e1.0
  val?            %1.2  = Force<lazy>        !v    %1.1, e1.0   <vec$+>
  val?            %1.3  = Extract2_1D        !v    %1.2, 1L, e1.0   <cls->
  void                    Visible            v     
  void                    Return             l     %1.3
Prom 4:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     tryCatchList, <0x562e91d79580>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, tryCatchList[0x562e92007f00]_p5, e1.0
  prom-           %1.3  = MkArg                    unboundValue, tryCatchList[0x562e92007f00]_p6, e1.0
  prom-           %1.4  = MkArg                    unboundValue, tryCatchList[0x562e92007f00]_p8, e1.0
  prom-           %1.5  = MkArg                    unboundValue, tryCatchList[0x562e92007f00]_p9, e1.0
  val?            %1.6  = Call               !     %1.1(%1.2, %1.3, %1.4, %1.5) e1.0   <vec->
  void                    Return             l     %1.6
Prom 5:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    expr, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <vec->
  void                    Return             l     %1.3
Prom 6:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    names, e1.0
  val?            %1.2  = Force<wrapped>     !v    %1.1, e1.0   <str->
  lgl$#-          %1.3  = IsType                   %1.2 isA val+   <true>
  void                    Branch                   %1.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [1]
  val?^ | miss    %2.0  = LdVar              eR    nh, e1.0
  val?            %2.1  = Force<value>       !v    %2.0, e1.0   <int$->
  val?            %2.2  = Minus              !v    %2.1, e1.0
  goto BB3
BB4   <- [1]
  prom-           %4.0  = MkArg                    unboundValue, tryCatchList[0x562e92007f00]_p7, e1.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.2:BB2, %4.0:BB4
  val?            %3.1  = Extract1_1D        !v    %1.2, %3.0, e1.0   <str$->
  void                    Visible            v     
  void                    Return             l     %3.1
Prom 7:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    nh, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  val?            %1.4  = Minus              !     %1.3, e1.0
  void                    Return             l     %1.4
Prom 8:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    parentenv, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <env->
  void                    Return             l     %1.3
Prom 9:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    handlers, e1.0
  val?            %1.2  = Force<wrapped>     !v    %1.1, e1.0   <vec+>
  lgl$#-          %1.3  = IsType                   %1.2 isA val+   <true>
  void                    Branch                   %1.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [1]
  val?^ | miss    %2.0  = LdVar              eR    nh, e1.0
  val?            %2.1  = Force<value>       !v    %2.0, e1.0   <int$->
  val?            %2.2  = Minus              !v    %2.1, e1.0
  goto BB3
BB4   <- [1]
  prom-           %4.0  = MkArg                    unboundValue, tryCatchList[0x562e92007f00]_p10, e1.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.2:BB2, %4.0:BB4
  val?            %3.1  = Extract1_1D        !v    %1.2, %3.0, e1.0   <vec$+>
  void                    Visible            v     
  void                    Return             l     %3.1
Prom 10:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    nh, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  val?            %1.4  = Minus              !     %1.3, e1.0
  void                    Return             l     %1.4
Prom 11:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    names, e1.0
  val?            %1.2  = Force<wrapped>     !v    %1.1, e1.0   <str->
  lgl$#-          %1.3  = IsType                   %1.2 isA val+   <true>
  void                    Branch                   %1.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [1]
  val?^ | miss    %2.0  = LdVar              eR    nh, e1.0
  val?            %2.1  = Force<value>       !v    %2.0, e1.0   <int$->
  goto BB3
BB4   <- [1]
  prom-           %4.0  = MkArg                    unboundValue, tryCatchList[0x562e92007f00]_p12, e1.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.1:BB2, %4.0:BB4
  val?            %3.1  = Extract1_1D        !v    %1.2, %3.0, e1.0   <str$->
  void                    Visible            v     
  void                    Return             l     %3.1
Prom 12:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    nh, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 13:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    parentenv, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <env->
  void                    Return             l     %1.3
Prom 14:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    handlers, e1.0
  val?            %1.2  = Force<lazy>        !v    %1.1, e1.0   <vec+>
  lgl$#-          %1.3  = IsType                   %1.2 isA val+   <true>
  void                    Branch                   %1.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [1]
  val?^ | miss    %2.0  = LdVar              eR    nh, e1.0
  val?            %2.1  = Force<value>       !v    %2.0, e1.0   <int$->
  goto BB3
BB4   <- [1]
  prom-           %4.0  = MkArg                    unboundValue, tryCatchList[0x562e92007f00]_p15, e1.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.1:BB2, %4.0:BB4
  val?            %3.1  = Extract2_1D        !v    %1.2, %3.0, e1.0   <cls->
  void                    Visible            v     
  void                    Return             l     %3.1
Prom 15:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    nh, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3

│ tryCatchList[0x562e92007f00]                                                 │
└──────────────────────────────────────────────────────────────────────────────┘
