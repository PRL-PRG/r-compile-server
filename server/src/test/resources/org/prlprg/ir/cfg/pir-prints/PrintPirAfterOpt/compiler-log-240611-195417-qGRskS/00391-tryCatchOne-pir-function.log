
┌──────────────────────────────────────────────────────────────────────────────┐
│ tryCatchOne[0x56166407a960]                                                  │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;NonRefl1,NonRefl2                    │
│ Properties:                                                                  │
├────── PIR Version After Optimizations
tryCatchOne[0x56166407a960]
BB0
  goto BB1
BB1   <- [0]
  val?^           %1.0  = LdArg                    3
  val?^           %1.1  = LdArg                    2
  val?^           %1.2  = LdArg                    1
  val?^           %1.3  = LdArg                    0
  env             e1.4  = MkEnv              l     expr=%1.3, name=%1.2, parentenv=%1.1, handler=%1.0, parent=?, context 1
  cls             %1.5  = MkCls                    doTryCatch, e1.4
  void                    StVar              lW    doTryCatch, %1.5, e1.4
  prom-           %1.7  = MkArg                    unboundValue, tryCatchOne[0x56166407a960]_p0, e1.4
  prom-           %1.8  = MkArg                    unboundValue, tryCatchOne[0x56166407a960]_p1 (!refl), e1.4
  prom-           %1.9  = MkArg                    unboundValue, tryCatchOne[0x56166407a960]_p2 (!refl), e1.4
  prom-           %1.10 = MkArg                    unboundValue, tryCatchOne[0x56166407a960]_p3, e1.4
  val?            %1.11 = StaticCall         !v    doTryCatch[0x561662eed680](%1.7, %1.8, %1.9, %1.10) from %1.5 e1.4   <val?_>
  void                    StVar              lW    value, %1.11, e1.4
  lgl$#-          %1.13 = IsType                   %1.11 isA val?+
  cp              %1.14 = Checkpoint                -> BB2 (default) | BB11 (if assume failed)
BB2   <- [1]
  val             %2.0  = ChkMissing         e     %1.11
  void                    Assume             D     %1.13, %1.14 (Typecheck@0x56166307f010[Type#4])
  val?+           %2.2  = CastType           d     dn %1.11   <val?_>
  val?            %2.3  = Extract2_1D        wed   %2.2, 1L, elided   <val?_>
  lgl$-           %2.4  = Is                       %2.3, NULL
  lgl$#-          %2.5  = CheckTrueFalse     e     %2.4
  void                    Branch                   %2.5 -> BB8 (if true) | BB3 (if false)
BB11   <- [1]
  fs              %11.0 = FrameState         R     0x561663021770+86: [], env=e1.4
  void                    Deopt              !v    %11.0   !
BB8   <- [2]
  val?            %8.0  = CallBuiltin        !v    geterrmessage() e1.4
  void                    StVar              lW    msg, %8.0, e1.4
  val?^ | miss    %8.2  = LdVar              eR    value, e1.4
  val?            %8.3  = Force!             !v    %8.2, e1.4   <val?_>
  lgl$#-          %8.4  = IsType                   %8.3 isA val?+
  cp              %8.5  = Checkpoint                -> BB10 (default) | BB9 (if assume failed)
BB3   <- [2]
  val?^ | miss    %3.0  = LdVar              eR    is.character, e1.4
  lgl$#-          %3.1  = Identical                <blt is.character>, %3.0   <@?>
  void                    Branch                   %3.1 -> BB5 (if true) | BB4 (if false)
BB10   <- [8]
  void                    Assume             D     %8.4, %8.5 (Typecheck@0x56166307f010[Type#21])
  val?+           %10.1 = CastType           d     dn %8.3   <val?_>
  val?            %10.2 = Extract2_1D        wed   %10.1, 2L, elided   <val?_>
  void                    StVar              lW    call, %10.2, e1.4
  (cls|spec|blt)  %10.4 = LdFun              !v    simpleError, e1.4
  fs              %10.5 = FrameState         R     0x561663021770+657: [%10.4], env=e1.4
  void                    Deopt              !v    %10.5, DeadCall@0x56166307f010[Call#3], %10.4   !
BB9   <- [8]
  fs              %9.0  = FrameState         R     0x561663021770+594: [%8.3], env=e1.4
  void                    Deopt              !v    %9.0   !
BB5   <- [3]
  lgl$#-          %5.0  = CallSafeBuiltin    wed   is.character(%2.3)    <val?_>
  void                    Branch                   %5.0 -> BB7 (if true) | BB6 (if false)
BB4   <- [3]
  (cls|spec|blt)  %4.0  = LdFun              !v    is.character, e1.4
  fs              %4.1  = FrameState         R     0x561663021770+183: [%4.0], env=e1.4
  void                    Deopt              !v    %4.1, DeadCall@0x56166307f010[Call#1], %4.0   !
BB7   <- [5]
  void                    StVar              lW    msg, %2.3, e1.4
  val?            %7.1  = Extract2_1D        wed   %2.2, 2L, elided   <val?_>
  void                    StVar              lW    call, %7.1, e1.4
  (cls|spec|blt)  %7.3  = LdFun              !v    simpleError, e1.4
  fs              %7.4  = FrameState         R     0x561663021770+512: [%7.3], env=e1.4
  void                    Deopt              !v    %7.4, DeadCall@0x56166307f010[Call#2], %7.3   !
BB6   <- [5]
  void                    StVar              lW    cond, %2.3, e1.4
  val?            %6.1  = Extract2_1D        wed   %2.2, 3L, elided   <val?_>
  (cls|spec|blt)  %6.2  = ChkFunction        e     %6.1
  fs              %6.3  = FrameState         R     0x561663021770+755: [%6.1], env=e1.4
  void                    Deopt              !v    %6.3, DeadCall@0x56166307f010[Call#4], %6.2   !
Prom 0:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    expr, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <val?+>
  void                    NonLocalReturn     !     %1.3, e1.0
Prom 1:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    name, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 2:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    parentenv, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <env->
  void                    Return             l     %1.3
Prom 3:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    handler, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <cls->
  void                    Return             l     %1.3

│ tryCatchOne[0x56166407a960]                                                  │
└──────────────────────────────────────────────────────────────────────────────┘
