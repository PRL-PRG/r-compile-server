
┌──────────────────────────────────────────────────────────────────────────────┐
│ osr[0x56166351dfa0]                                                          │
│ Context: CorrOrd,!TMany                                                      │
│ Properties:                                                                  │
├────── PIR Version After Optimizations
osr[0x56166351dfa0]
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  vec#-           %1.1  = LdArg                    0
  int$#-          %1.2  = LdArg                    1
  int$#-          %1.3  = LdArg                    2
  lgl$#-          %1.4  = LdArg                    3   <val?>
  (lgl|vec)#-     %1.5  = SetVecElt          e     %1.4, %1.1, %1.3
  goto BB2
BB2   <- [1, 4]
  int$-           %2.0  = Phi                      %1.3:BB1, %2.2:BB4
  val?            %2.1  = Phi                      %1.5:BB1, %4.6:BB4
  int$-           %2.2  = Inc                      %2.0
  lgl$-           %2.3  = Lt                 d     %1.2, %2.2, elided
  lgl$#-          %2.4  = Identical                %2.3, true
  void                    Branch                   %2.4 -> BB3 (if true) | BB4 (if false)
BB3   <- [2]
  void                    Visible            v     
  void                    Return             l     %2.1
BB4   <- [2]
  void                    StVar              lW    i, %2.2, e1.0
  (cls|spec|blt)  %4.1  = LdFun              !v    FUN, e1.0
  prom-           %4.2  = MkArg                    unboundValue, osr[0x56166351dfa0]_p0, e1.0
  (miss|dots)     %4.3  = LdDots             R     , e1.0
  *dots-          %4.4  = ExpandDots               %4.3
  val?            %4.5  = NamedCall          !v    %4.1(%4.2, .xpandDotsTrigger=%4.4) e1.0   <val?>
  val?            %4.6  = SetVecElt          e     %4.5, %2.1, %2.2
  goto BB2
Prom 0:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    X, e1.0
  val?            %1.2  = Force<wrapped>     !v    %1.1, e1.0   <(str|vec)->
  lgl$#-          %1.3  = IsType                   %1.2 isA val+   <true>
  void                    Branch                   %1.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [1]
  val?^ | miss    %2.0  = LdVar              eR    i, e1.0
  val?            %2.1  = Force<value>       !v    %2.0, e1.0   <int$->
  goto BB3
BB4   <- [1]
  prom-           %4.0  = MkArg                    unboundValue, osr[0x56166351dfa0]_p1, e1.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.1:BB2, %4.0:BB4
  val?            %3.1  = Extract2_1D        !v    %1.2, %3.0, e1.0   <val?>
  void                    Visible            v     
  void                    Return             l     %3.1
Prom 1:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    i, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3

│ osr[0x56166351dfa0]                                                          │
└──────────────────────────────────────────────────────────────────────────────┘
