
┌──────────────────────────────────────────────────────────────────────────────┐
│ eval[0x5571d47645f0]                                                         │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;NonRefl0,NonRefl1,!Obj0,!Obj1 miss: 1│
│ Properties:  Eager, ForceOrd: 0 1                                            │
├────── PIR Version After Optimizations
eval[0x5571d47645f0]
BB0
  goto BB1
BB1   <- [0]
  val?^           %1.0  = LdArg                    1
  val?^           %1.1  = LdArg                    0
  env             e1.2  = MkEnv              l     expr=%1.1, envir=%1.0, enclos(miss)=missingArg, parent=R_BaseNamespace, context 1
  prom-           %1.3  = MkArg                    unboundValue, eval[0x5571d47645f0]_p0, e1.2
  val?^ | miss    %1.4  = CastType                 up %1.3
  void                    StArg              lW    enclos, %1.4, e1.2
  val+            %1.6  = Force!<lazy>       !vr   %1.1,    <val?+>
  val+            %1.7  = Force!<lazy>       !vr   %1.0,    <(vec|env)>
  void                    Visible            v     
  val?            %1.9  = Force!<lazy>       !r    %1.4,    <env->
  val?            %1.10 = CallBuiltin        !     eval(%1.6, %1.7, %1.9) e1.2
  void                    Return             l     %1.10
Prom 0:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    envir, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <env->
  lgl$-           %1.4  = Is                       %1.3, list
  lgl$-           %1.5  = AsLogical                %1.4
  lgl$#-          %1.6  = Identical                %1.5, true
  void                    Branch                   %1.6 -> BB2 (if true) | BB7 (if false)
BB2   <- [1]
  goto BB3
BB7   <- [1]
  val?^ | miss    %7.0  = LdVar              eR    envir, e1.0
  void                    Visible            v     
  val?            %7.2  = Force<wrapped>     !     %7.0, e1.0   <env->
  lgl$-           %7.3  = Is                       %7.2, pairlist
  lgl$-           %7.4  = AsLogical                %7.3
  lgl$-           %7.5  = LOr                      %1.5, %7.4
  goto BB3
BB3   <- [2, 7]
  lgl$-           %3.0  = Phi                      %7.5:BB7, %1.5:BB2
  lgl$#-          %3.1  = CheckTrueFalse     e     %3.0
  void                    Branch                   %3.1 -> BB6 (if true) | BB4 (if false)
BB6   <- [3]
  (cls|spec|blt)  %6.0  = LdFun              !     parent.frame, e1.0
  val?            %6.1  = Call               !     %6.0() e1.0   <val?_>
  goto BB5
BB4   <- [3]
  (cls|spec|blt)  %4.0  = LdFun              !     baseenv, <0x5571d0e2e278>, e1.0
  val?            %4.1  = Call               !     %4.0() e1.0   <env->
  goto BB5
BB5   <- [4, 6]
  val?            %5.0  = Phi                      %4.1:BB4, %6.1:BB6
  void                    Return             l     %5.0

│ eval[0x5571d47645f0]                                                         │
└──────────────────────────────────────────────────────────────────────────────┘
