syntax = "proto3";

option java_package = "org.prlprg.server";

// Error handling
// grpc already has a way to handle errors
// Status message: https://grpc.github.io/grpc-java/javadoc/io/grpc/Status.html

message Version {
  int32 major = 1;
  int32 minor = 2;
  int32 patch = 3;
}

message Package {
  string name = 1;
  Version version = 2;
  optional bytes hash = 3;
  repeated Function functions = 4;
}

message InitRequest {
  Version Rsh_version = 1;
  Version R_version = 2;
  string platform = 3;
  repeated Package packages = 4;
}

message InitResponse {}

message Empty {}

message Function {
  optional string package = 1;// There can be only one version of a package loaded at a time
  string name = 2; //What if it is a closure passed to a HOF?
  optional bytes body = 3;
  optional bytes hash = 4;
}

message CallContext {
  bool args_statically_matched = 1;
  bool correct_number_of_args = 2;
  bool correct_order_of_args = 3;
  bool no_missing_args = 4;
}

message ArgumentContext {
  bool eager = 1;
  bool reflection = 2;
  bool object = 3;
  optional Type type = 4;
}

message Context {
  CallContext call_context = 1;
  repeated ArgumentContext argument_context = 2;
}

enum Type {
  ANY = 0;
  INTEGER = 1;
  REAL = 2;// Add more types
}

enum Tier {
  BASELINE = 0;// bytecode
  OPTIMIZED = 1; // native code
}

enum TestLattice {
  BOTH = 0;
  ONLY_TRUE = 1;
  ONLY_FALSE = 2;
  NONE = 3;
}

message TestFeedback {
  TestLattice test_lattice = 1;
}

message CallFeedback {
  int64 n_calls = 1;
  bytes callee_hash = 2;
}

message ValueFeedback {
  bool scalar = 1;
  bool object = 2;
  bool accessed_attributes = 3;
  bool vectorizable = 4;
  bool is_promise = 5;
}



message TypeFeedback {
  message Feedback {
    oneof feedback {
      TestFeedback test_feedback = 1;
      CallFeedback call_feedback = 2;
      ValueFeedback value_feedback = 3;
    }
  }
  map<int64, Feedback> types = 1;//Offset in the bytecode to the feedback
}

message CompileRequest {
  Function function = 2;// Add package version
  optional Tier tier = 4;//if not defined, let the compile server decide
  optional int32 optimization_level = 5;// if not defined, the server decides
  optional Context context = 6;
}

message CompileResponse {
  bytes hash = 1;
  Tier tier = 2;
  optional bytes native_code = 3;
  optional bytes constant_pool = 4;
}

message ContextRequest {
  Function function = 1;
}

message FactRequest {
  Function function = 1;
  string factName = 2;// Make it an enum when we know what kind of facts we would like to know about a function
}

message Fact {
  Function function = 1;// which function is that about
  string factName = 2;
  string factValue = 3;// Make it more typed when we know more about what kind of facts we want
}
