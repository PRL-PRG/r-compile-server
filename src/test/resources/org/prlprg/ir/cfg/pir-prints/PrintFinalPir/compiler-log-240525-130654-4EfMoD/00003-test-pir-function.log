
┌──────────────────────────────────────────────────────────────────────────────┐
│ test[0x562af79c2420]                                                         │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;Eager1,NonRefl1,!Obj1                │
│ Properties:                                                                  │
├────── Final PIR Version
test[0x562af79c2420]
BB0
  val?~+          %0.0  = LdArg                    1
  val?^           %0.1  = LdArg                    0
  val?^ | miss    %0.2  = LdVar              eR    rir.compile, R_GlobalEnv
  lgl$#-          %0.3  = Identical                %0.2, function(what) <(rir::DispatchTable*)0x562af79|...
  void                    Branch                   %0.3 -> BB39 (if true) | BB40 (if false)
BB39   <- [0]
  env             e39.0 = MkEnv              l     f=%0.1, expected=%0.0, parent=R_GlobalEnv, context 1
  prom-           %39.1 = MkArg                    unboundValue, test[0x562af79c2420]_p0, e39.0
  ct              %39.2 = PushContext        lCL   %39.1, rir.compile(f), function(what) <(rir::DispatchTable*)0x562af79|..., e39.0
  val?^           %39.3 = CastType                 up %39.1
  val?^ | miss    %39.4 = LdVar              eR    .Call, R_GlobalEnv
  lgl$#-          %39.5 = Identical                <blt .Call>, %39.4   <true>
  void                    Branch                   %39.5 -> BB41 (if true) | BB42 (if false)
BB40   <- [0]
  env             e40.0 = (MkEnv)            l     f=%0.1, expected=%0.0, parent=R_GlobalEnv, context 1
  fs              %40.1 = FrameState         R     0x562af5f18df0+0: [], env=e40.0
  void                    Deopt              !v    %40.1, CallTarget@0x562af705c238[Call#0], %0.2
BB41   <- [39]
  env             e41.0 = MkEnv              l     what=%39.3, parent=R_GlobalEnv, context 1
  val?            %41.1 = Force!<lazy>       !vL   %39.3, e41.0   <cls->
  val?            %41.2 = CallBuiltin        !v    .Call("rirCompile", %41.1) e41.0   <cls->
  val?            %41.3 = PopContext         C     %41.2, %39.2   <cls->
  void                    StVar              lW    f, %41.3, e39.0
  val?^ | miss    %41.5 = LdVar              eR    testrir, e39.0
  lgl$#-          %41.6 = IsType                   %41.5 isA lgl$-
  void                    Branch                   %41.6 -> BB43 (if true) | BB44 (if false)
BB42   <- [39]
  fs              %42.0 = FrameState         R     0x562af5f18df0+32: [], env=e39.0
  env             e42.1 = (MkEnv)            l     what=%39.3, parent=R_GlobalEnv, context 1
  fs              %42.2 = FrameState         R     0x562af6d36cb0+17: [<blt .Call>, %39.5], env=e42.1, next=%42.0
  void                    Deopt              !v    %42.2, DeadBranchReached@0x562af705c7b8[Test#0], %39.5   !
BB43   <- [41]
  lgl$-           %43.0 = CastType           d     dn %41.5
  lgl$#-          %43.1 = CheckTrueFalse     e     %43.0
  void                    Branch                   %43.1 -> BB27 (if true) | BB7 (if false)
BB44   <- [41]
  fs              %44.0 = FrameState         R     0x562af5f18df0+46: [], env=e39.0
  void                    Deopt              !v    %44.0, Typecheck@0x562af705c238[Type#2], %41.5   !
BB27   <- [43]
  (cls|spec|blt)  %27.0 = LdFun              !v    f, e39.0
  val?            %27.1 = Call               !v    %27.0() e39.0   <int$->
  lgl$#-          %27.2 = IsType                   %27.1 isA int$-
  void                    Branch                   %27.2 -> BB45 (if true) | BB46 (if false)
BB7   <- [43]
  void                    Nop                !     
  goto BB8
BB45   <- [27]
  int$-           %45.0 = CastType           d     dn %27.1
  void                    StVar              lW    res, %45.0, e39.0
  val?^ | miss    %45.2 = LdVar              eR    paste, e39.0
  lgl$#-          %45.3 = Identical                %45.2, function(..., sep=" ", collapse=NULL, recycle0|...
  void                    Branch                   %45.3 -> BB49 (if true) | BB50 (if false)
BB46   <- [27]
  fs              %46.0 = FrameState         R     0x562af5f18df0+98: [%27.1], env=e39.0
  void                    Deopt              !v    %46.0, Typecheck@0x562af705c238[Type#3], %27.1   !
BB8   <- [7, 36]
  (cls|spec|blt)  %8.0  = LdFun              !v    f, e39.0
  val?            %8.1  = Call               !v    %8.0() e39.0
  (cls|spec|blt)  %8.2  = LdFun              !v    f, e39.0
  val?            %8.3  = Call               !v    %8.2() e39.0
  (cls|spec|blt)  %8.4  = LdFun              !v    f, e39.0
  val?            %8.5  = Call               !v    %8.4() e39.0
  val?^ | miss    %8.6  = LdVar              eR    pir.compile, e39.0
  lgl$#-          %8.7  = Identical                %8.6, function(what, debugFlags, debugStyle, P_EARLY|...
  void                    Branch                   %8.7 -> BB47 (if true) | BB48 (if false)
BB49   <- [45]
  prom-           %49.0 = MkArg                    unboundValue, test[0x562af79c2420]_p5 (!refl), e39.0
  prom-           %49.1 = MkArg                    unboundValue, test[0x562af79c2420]_p6, e39.0
  dots-           %49.2 = DotsList           l     %49.0, %49.1
  val?^ | miss    %49.3 = CastType                 up %49.1
  env             e49.4 = MkEnv              l     ...=%49.2, sep(miss)=" ", collapse(miss)=nil, recycle0(miss)=false, parent=R_BaseNamespace, context 0
  val?            %49.5 = Force!             !vL   %49.3, e49.4
  val+            %49.6 = CallSafeBuiltin    wed   list(%45.0, %49.5)    <vec->
  val+            %49.7 = CallSafeBuiltin    wed   paste(%49.6, " ", nil, false)    <str$->
  val?^ | miss    %49.8 = LdVar              eR    expected, e39.0
  val?            %49.9 = Force!<lazy>       !v    %49.8, e39.0   <str$->
  lgl$#-          %49.10 = IsType                   %49.9 isA val?-
  lgl$#-          %49.11 = IsType                   %49.7 isA val?-
  void                    Branch                   %49.11 -> BB53 (if true) | BB54 (if false)
BB50   <- [45]
  fs              %50.0 = FrameState         R     0x562af5f18df0+112: [], env=e39.0
  void                    Deopt              !v    %50.0, CallTarget@0x562af705c238[Call#2], %45.2   !
BB47   <- [8]
  prom-           %47.0 = MkArg                    unboundValue, test[0x562af79c2420]_p1, e39.0
  ct              %47.1 = PushContext        lCL   %47.0, pir.compile(f), function(what, debugFlags, debugStyle, P_EARLY|..., e39.0
  val?^           %47.2 = CastType                 up %47.0
  val?^ | miss    %47.3 = LdVar              eR    .Call, R_GlobalEnv
  lgl$#-          %47.4 = Identical                <blt .Call>, %47.3   <true>
  void                    Branch                   %47.4 -> BB51 (if true) | BB52 (if false)
BB48   <- [8]
  fs              %48.0 = FrameState         R     0x562af5f18df0+331: [%8.5], env=e39.0
  void                    Deopt              !v    %48.0, CallTarget@0x562af705c238[Call#9], %8.6   !
BB53   <- [49]
  val-            %53.0 = CastType           d     dn %49.7   <str$->
  void                    Branch                   %49.10 -> BB57 (if true) | BB58 (if false)
BB54   <- [49]
  void                    Nop                !     
  val+            %54.1 = %49.7
  dr              %54.2 = Typecheck@0x562af705c238[Type#7]
  goto BB32
BB51   <- [47]
  env             e51.0 = MkEnv              l     what=%47.2, debugFlags=nil, debugStyle=nil, P_EARLY(miss)=false, P_FINAL(miss)=false, P_OPT(miss)=false, WARN(miss)=false, parent=R_GlobalEnv, context 1
  val?            %51.1 = Force!<lazy>       !vL   %47.2, e51.0   <cls->
  val?^ | miss    %51.2 = LdVar              eR    as.name, R_GlobalEnv
  lgl$#-          %51.3 = Identical                %51.2, function(x) <(rir::DispatchTable*)0x562af79100|...
  void                    Branch                   %51.3 -> BB55 (if true) | BB56 (if false)
BB52   <- [47]
  fs              %52.0 = FrameState         R     0x562af5f18df0+364: [], env=e39.0
  env             e52.1 = (MkEnv)            l     what=%47.2, debugFlags(miss)=missingArg, debugStyle(miss)=missingArg, P_EARLY(miss)=false, P_FINAL(miss)=false, P_OPT(miss)=false, WARN(miss)=false, parent=R_GlobalEnv, context 1
  fs              %52.2 = FrameState         R     0x562af5ed55b0+0: [], env=e52.1, next=%52.0
  void                    Deopt              !v    %52.2, DeadBranchReached@0x562af79e8850[Test#0], %47.4   !
BB57   <- [53]
  val?-           %57.0 = CastType           d     dn %49.9   <str$->
  lgl-            %57.1 = Neq                wed   %53.0, %57.0, elided   <lgl$->
  lgl$#-          %57.2 = IsType                   %57.1 isA lgl$-
  void                    Branch                   %57.2 -> BB69 (if true) | BB70 (if false)
BB58   <- [53]
  void                    Nop                !     
  val?            %58.1 = %49.9
  dr              %58.2 = Typecheck@0x562af705c238[Type#8]
  goto BB32
BB32   <- [54, 58]
  val?^ | miss    %32.0 = Phi                      %54.1:BB54, %58.1:BB58
  val?^ | miss    %32.1 = %32.0
  dr              %32.2 = Phi                      %54.2:BB54, %58.2:BB58
  dr              %32.3 = %32.2
  fs              %32.4 = FrameState         R     0x562af5f18df0+163: [%49.7, %49.9], env=e39.0
  void                    Deopt              !v    %32.4, %32.3, %32.1   !
BB55   <- [51]
  val?^ | miss    %55.0 = LdVar              eR    as.character, R_GlobalEnv
  lgl$#-          %55.1 = Identical                %55.0, <blt as.character>
  void                    Branch                   %55.1 -> BB59 (if true) | BB60 (if false)
BB56   <- [51]
  void                    Nop                !     
  val?^ | miss    %56.1 = %51.2
  dr              %56.2 = CallTarget@0x562af79e8850[Call#11]
  goto BB13
BB69   <- [57]
  lgl$-           %69.0 = CastType           d     dn %57.1
  lgl$#-          %69.1 = CheckTrueFalse     e     %69.0
  void                    Branch                   %69.1 -> BB37 (if true) | BB36 (if false)
BB70   <- [57]
  fs              %70.0 = FrameState         R     0x562af5f18df0+169: [%57.1], env=e39.0
  void                    Deopt              !v    %70.0, Typecheck@0x562af705c238[Type#9], %57.1   !
BB59   <- [55]
  (cls|spec|blt)  %59.0 = LdFun              !v    substitute, <0x562af5a39468>, R_GlobalEnv
  prom-           %59.1 = MkArg                    unboundValue, test[0x562af79c2420]_p20, e51.0
  val?            %59.2 = Call               !v    %59.0(%59.1) e51.0   <sym->
  val?            %59.3 = CallBuiltin        !v    as.character(%59.2) e51.0   <str$->
  lgl$#-          %59.4 = IsType                   %59.3 isA val?-
  void                    Branch                   %59.4 -> BB61 (if true) | BB62 (if false)
BB60   <- [55]
  void                    Nop                !     
  val?^ | miss    %60.1 = %55.0
  dr              %60.2 = CallTarget@0x562af79e8850[Call#12]
  goto BB13
BB13   <- [56, 60]
  val?^ | miss    %13.0 = Phi                      %56.1:BB56, %60.1:BB60
  val?^ | miss    %13.1 = %13.0
  dr              %13.2 = Phi                      %56.2:BB56, %60.2:BB60
  dr              %13.3 = %13.2
  fs              %13.4 = FrameState         R     0x562af5f18df0+364: [], env=e39.0
  fs              %13.5 = FrameState         R     0x562af5ed55b0+474: [<blt .Call>, "pirCompileWrapper", %51.1], env=e51.0, next=%13.4
  void                    Deopt              !v    %13.5, %13.3, %13.1   !
BB37   <- [69]
  (cls|spec|blt)  %37.0 = LdFun              !v    stop, e39.0
  fs              %37.1 = FrameState         R     0x562af5f18df0+190: [%37.0], env=e39.0
  void                    Deopt              !v    %37.1, DeadCall@0x562af705c238[Call#4], %37.0   !
BB36   <- [69]
  void                    Nop                !     
  goto BB8
BB61   <- [59]
  val?-           %61.0 = CastType           d     dn %59.3   <str$->
  val             %61.1 = CallSafeBuiltin    wed   as.vector(%61.0, "symbol")    <sym->
  val?^ | miss    %61.2 = LdVar              eR    debugFlags, e51.0
  val?            %61.3 = Force!<value>      !v    %61.2, e51.0   <nil->
  val?^ | miss    %61.4 = LdVar              eR    debugStyle, e51.0
  val?            %61.5 = Force!<value>      !v    %61.4, e51.0   <nil->
  val?            %61.6 = CallBuiltin        !v    .Call("pirCompileWrapper", %51.1, %61.1, %61.3, %61.5) e51.0   <cls->
  val?            %61.7 = PopContext         C     %61.6, %47.1   <cls->
  void                    StVar              lW    f, %61.7, e39.0
  (cls|spec|blt)  %61.9 = LdFun              !v    f, e39.0
  val?            %61.10 = Call               !v    %61.9() e39.0   <int$->
  lgl$#-          %61.11 = IsType                   %61.10 isA int$-
  void                    Branch                   %61.11 -> BB63 (if true) | BB64 (if false)
BB62   <- [59]
  fs              %62.0 = FrameState         R     0x562af5f18df0+364: [], env=e39.0
  fs              %62.1 = FrameState         R     0x562af5ed55b0+511: [<blt .Call>, "pirCompileWrapper", %51.1], env=e51.0, next=%62.0
  prom-           %62.2 = MkArg                    unboundValue, test[0x562af79c2420]_p18, e51.0
  val?^           %62.3 = CastType                 up %62.2
  env             e62.4 = (MkEnv)            l     x=%62.3, parent=R_BaseNamespace, context 0
  fs              %62.5 = FrameState         R     0x562af7924a50+9: [], env=e62.4, next=%62.1
  fs              %62.6 = FrameState         R     0x562af79b0110+32(pr): [%59.3], env=e51.0, next=%62.5
  void                    Deopt              !v    %62.6, Typecheck@0x562af7039bf8[Type#0], %59.3   !
BB63   <- [61]
  int$-           %63.0 = CastType           d     dn %61.10
  void                    StVar              lW    res, %63.0, e39.0
  val?^ | miss    %63.2 = LdVar              eR    paste, e39.0
  lgl$#-          %63.3 = Identical                %63.2, function(..., sep=" ", collapse=NULL, recycle0|...
  void                    Branch                   %63.3 -> BB65 (if true) | BB66 (if false)
BB64   <- [61]
  fs              %64.0 = FrameState         R     0x562af5f18df0+405: [%61.10], env=e39.0
  void                    Deopt              !v    %64.0, Typecheck@0x562af705c238[Type#16], %61.10   !
BB65   <- [63]
  prom-           %65.0 = MkArg                    unboundValue, test[0x562af79c2420]_p2 (!refl), e39.0
  prom-           %65.1 = MkArg                    unboundValue, test[0x562af79c2420]_p3, e39.0
  dots-           %65.2 = DotsList           l     %65.0, %65.1
  val?^ | miss    %65.3 = CastType                 up %65.0
  val?^ | miss    %65.4 = CastType                 up %65.1
  env             e65.5 = MkEnv              l     ...=%65.2, sep(miss)=" ", collapse(miss)=nil, recycle0(miss)=false, parent=R_BaseNamespace, context 0
  val?            %65.6 = Force!             !vrL  %65.3, e65.5
  val?            %65.7 = Force!             !vL   %65.4, e65.5
  val+            %65.8 = CallSafeBuiltin    wed   list(%65.6, %65.7)    <vec->
  val+            %65.9 = CallSafeBuiltin    wed   paste(%65.8, " ", nil, false)    <str$->
  val?^ | miss    %65.10 = LdVar              eR    expected, e39.0
  val?            %65.11 = Force!<wrapped>    !v    %65.10, e39.0   <str$->
  lgl$#-          %65.12 = IsType                   %65.11 isA val?-
  lgl$#-          %65.13 = IsType                   %65.9 isA val?-
  void                    Branch                   %65.13 -> BB67 (if true) | BB68 (if false)
BB66   <- [63]
  fs              %66.0 = FrameState         R     0x562af5f18df0+419: [], env=e39.0
  void                    Deopt              !v    %66.0, CallTarget@0x562af705c238[Call#11], %63.2   !
BB67   <- [65]
  val-            %67.0 = CastType           d     dn %65.9   <str$->
  void                    Branch                   %65.12 -> BB71 (if true) | BB72 (if false)
BB68   <- [65]
  void                    Nop                !     
  val+            %68.1 = %65.9
  dr              %68.2 = Typecheck@0x562af705c238[Type#20]
  goto BB21
BB71   <- [67]
  val?-           %71.0 = CastType           d     dn %65.11   <str$->
  lgl-            %71.1 = Neq                wed   %67.0, %71.0, elided   <lgl$->
  lgl$#-          %71.2 = IsType                   %71.1 isA lgl$-
  void                    Branch                   %71.2 -> BB73 (if true) | BB74 (if false)
BB72   <- [67]
  void                    Nop                !     
  val?            %72.1 = %65.11
  dr              %72.2 = Typecheck@0x562af705c238[Type#21]
  goto BB21
BB21   <- [68, 72]
  val?^ | miss    %21.0 = Phi                      %68.1:BB68, %72.1:BB72
  val?^ | miss    %21.1 = %21.0
  dr              %21.2 = Phi                      %68.2:BB68, %72.2:BB72
  dr              %21.3 = %21.2
  fs              %21.4 = FrameState         R     0x562af5f18df0+470: [%65.9, %65.11], env=e39.0
  void                    Deopt              !v    %21.4, %21.3, %21.1   !
BB73   <- [71]
  lgl$-           %73.0 = CastType           d     dn %71.1
  lgl$#-          %73.1 = CheckTrueFalse     e     %73.0
  void                    Branch                   %73.1 -> BB26 (if true) | BB25 (if false)
BB74   <- [71]
  fs              %74.0 = FrameState         R     0x562af5f18df0+476: [%71.1], env=e39.0
  void                    Deopt              !v    %74.0, Typecheck@0x562af705c238[Type#22], %71.1   !
BB26   <- [73]
  (cls|spec|blt)  %26.0 = LdFun              !v    stop, e39.0
  fs              %26.1 = FrameState         R     0x562af5f18df0+503: [%26.0], env=e39.0
  void                    Deopt              !v    %26.1, DeadCall@0x562af705c238[Call#13], %26.0   !
BB25   <- [73]
  void                    Invisible          v     
  void                    Return             l     nil
Prom 0:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    f, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <cls->
  void                    Return             l     %0.3
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    f, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls->
  void                    Return             l     %0.3
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    res, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <int$->
  void                    Return             l     %0.3
Prom 3:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     typeof, <0x562af78b2f78>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, test[0x562af79c2420]_p4, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <str$->
  void                    Return             l     %0.3
Prom 4:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    res, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <int$->
  void                    Return             l     %0.3
Prom 5:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    res, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <int$->
  void                    Return             l     %0.3
Prom 6:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     typeof, <0x562af78b2f78>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, test[0x562af79c2420]_p7, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <str$->
  void                    Return             l     %0.3
Prom 7:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    res, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <int$->
  void                    Return             l     %0.3
Prom 18:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     as.character, <0x562af5a47040>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, test[0x562af79c2420]_p19, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <str$->
  void                    Return             l     %0.3
Prom 19:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     substitute, <0x562af5a39468>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, test[0x562af79c2420]_p20, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <sym->
  void                    Return             l     %0.3
Prom 20:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    what, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3

│ test[0x562af79c2420]                                                         │
└──────────────────────────────────────────────────────────────────────────────┘
