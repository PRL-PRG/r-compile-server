
┌──────────────────────────────────────────────────────────────────────────────┐
│ as<-[0x560a35e969a0]                                                         │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;Eager0,Eager2,NonRefl0,NonRefl1,NonRefl2,!Obj1,!Obj2│
│ Properties:                                                                  │
├────── Final PIR Version
as<-[0x560a35e969a0]
BB0
  val?~+          %0.0  = LdArg                    2
  val?^           %0.1  = LdArg                    1
  val?~           %0.2  = LdArg                    0
  val?^ | miss    %0.3  = LdVar              eR    .class1, <env 0x560a342f8378>
  lgl$#-          %0.4  = Identical                %0.3, function(x) <(rir::DispatchTable*)0x560a35cf88|...
  void                    Branch                   %0.4 -> BB129 (if true) | BB130 (if false)
BB129   <- [0]
  env             e129.0 = MkEnv              l     object=%0.2, Class=%0.1, value=%0.0, parent=<env 0x560a342f8378>, context 1
  prom-           %129.1 = MkArg                    unboundValue, as<-[0x560a35e969a0]_p0 (!refl), e129.0
  ct              %129.2 = PushContext        lCL   %129.1, .class1(object), function(x) <(rir::DispatchTable*)0x560a35cf88|..., e129.0
  val?^           %129.3 = CastType                 up %129.1
  val?^ | miss    %129.4 = LdVar              eR    class, <env 0x560a342f8378>
  lgl$#-          %129.5 = Identical                <blt class>, %129.4   <true>
  void                    Branch                   %129.5 -> BB131 (if true) | BB132 (if false)
BB130   <- [0]
  env             e130.0 = (MkEnv)            l     object=%0.2, Class=%0.1, value=%0.0, parent=<env 0x560a342f8378>, context 1
  fs              %130.1 = FrameState         R     0x560a35f3cf50+0: [], env=e130.0
  void                    Deopt              !v    %130.1, CallTarget@0x560a35dcc8e0[Call#0], %0.3
BB131   <- [129]
  env             e131.0 = MkEnv              l     x=%129.3, parent=<env 0x560a342f8378>, context 1
  val?            %131.1 = Force!<lazy>       !vr   %129.3,    <val?>
  val?            %131.2 = CallBuiltin        !v    class(%131.1) e131.0   <str$+>
  void                    StVar              lW    cl, %131.2, e131.0
  lgl$#-          %131.4 = IsType                   %131.2 isA val?+
  val?^ | miss    %131.5 = LdVar              eR    length, e131.0
  lgl$#-          %131.6 = Identical                <blt length>, %131.5   <true>
  void                    Branch                   %131.6 -> BB133 (if true) | BB134 (if false)
BB132   <- [129]
  fs              %132.0 = FrameState         R     0x560a35f3cf50+32: [], env=e129.0
  env             e132.1 = (MkEnv)            l     x=%129.3, parent=<env 0x560a342f8378>, context 1
  fs              %132.2 = FrameState         R     0x560a35d56100+17: [<blt class>, %129.5], env=e132.1, next=%132.0
  void                    Deopt              !v    %132.2, DeadBranchReached@0x560a3510fd58[Test#0], %129.5   !
BB133   <- [131]
  val             %133.0 = ChkMissing         e     %131.2
  void                    Branch                   %131.4 -> BB135 (if true) | BB136 (if false)
BB134   <- [131]
  void                    Nop                !     
  lgl$#-          %134.1 = %131.6
  dr              %134.2 = DeadBranchReached@0x560a3510fd58[Test#1]
  goto BB5
BB135   <- [133]
  val?+           %135.0 = CastType           d     dn %131.2   <str$+>
  (int|real)$-    %135.1 = CallSafeBuiltin    wed   length(%135.0)    <int$->
  lgl$#-          %135.2 = IsType                   %135.1 isA int$-
  void                    Branch                   %135.2 -> BB137 (if true) | BB138 (if false)
BB136   <- [133]
  void                    Nop                !     
  val?            %136.1 = %131.2
  dr              %136.2 = Typecheck@0x560a3510fd58[Type#2]
  goto BB5
BB5   <- [134, 136]
  val?^ | miss    %5.0  = Phi                      %134.1:BB134, %136.1:BB136
  val?^ | miss    %5.1  = %5.0
  dr              %5.2  = Phi                      %134.2:BB134, %136.2:BB136
  dr              %5.3  = %5.2
  fs              %5.4  = FrameState         R     0x560a35f3cf50+32: [], env=e129.0
  fs              %5.5  = FrameState         R     0x560a35d56100+105: [], env=e131.0, next=%5.4
  void                    Deopt              !v    %5.5, %5.3, %5.1   !
BB137   <- [135]
  int$-           %137.0 = CastType           d     dn %135.1
  lgl$-           %137.1 = Gt                 d     %137.0, 1L, elided   <lgl$->
  lgl$#-          %137.2 = CheckTrueFalse     e     %137.1
  void                    Branch                   %137.2 -> BB127 (if true) | BB9 (if false)
BB138   <- [135]
  fs              %138.0 = FrameState         R     0x560a35f3cf50+32: [], env=e129.0
  fs              %138.1 = FrameState         R     0x560a35d56100+196: [%135.1], env=e131.0, next=%138.0
  void                    Deopt              !v    %138.1, Typecheck@0x560a3510fd58[Type#5], %135.1   !
BB127   <- [137]
  val?            %127.0 = Extract2_1D        wed   %135.0, 1L, elided   <val?_>
  val?            %127.1 = %127.0
  goto BB10
BB9   <- [137]
  void                    Nop                !     
  val?+           %9.1  = %135.0
  goto BB10
BB10   <- [9, 127]
  val?            %10.0 = Phi                      %9.1:BB9, %127.1:BB127
  val?            %10.1 = %10.0
  val?            %10.2 = PopContext         C     %10.1, %129.2   <str$+>
  void                    StVar              lW    thisClass, %10.2, e129.0
  val?^ | miss    %10.4 = LdVar              eR    .identC, e129.0
  lgl$#-          %10.5 = Identical                %10.4, function(c1=NULL, c2=NULL) <(rir::DispatchTabl|...
  void                    Branch                   %10.5 -> BB139 (if true) | BB140 (if false)
BB139   <- [10]
  prom-           %139.0 = MkArg                    unboundValue, as<-[0x560a35e969a0]_p1, e129.0
  prom-           %139.1 = MkArg                    unboundValue, as<-[0x560a35e969a0]_p3, e129.0
  ct              %139.2 = PushContext        lCL   %139.0, %139.1, .identC(.class1(value), Class), function(c1=NULL, c2=NULL) <(rir::DispatchTabl|..., e129.0
  val?^           %139.3 = CastType                 up %139.1
  val?^           %139.4 = CastType                 up %139.0
  val?^ | miss    %139.5 = LdVar              eR    .Call, <env 0x560a342f8378>
  lgl$#-          %139.6 = Identical                <blt .Call>, %139.5   <true>
  void                    Branch                   %139.6 -> BB141 (if true) | BB142 (if false)
BB140   <- [10]
  fs              %140.0 = FrameState         R     0x560a35f3cf50+46: [], env=e129.0
  void                    Deopt              !v    %140.0, CallTarget@0x560a35dcc8e0[Call#1], %10.4   !
BB141   <- [139]
  val?^ | miss    %141.0 = LdVar              eR    C_R_identC, <env 0x560a342f8378>
  env             e141.1 = MkEnv              l     c1=%139.4, c2=%139.3, parent=<env 0x560a342f8378>, context 1
  val?            %141.2 = Force!<value>      !v    %141.0, e141.1   <vec>
  val?^ | miss    %141.3 = LdVar              eR    c1, e141.1
  val?            %141.4 = Force!<lazy>       !v    %141.3, e141.1   <str$+>
  val?^ | miss    %141.5 = LdVar              eR    c2, e141.1
  val?            %141.6 = Force!<lazy>       !v    %141.5, e141.1   <str$+>
  val?            %141.7 = CallBuiltin        !v    .Call(%141.2, %141.4, %141.6) e141.1   <lgl$->
  lgl$#-          %141.8 = IsType                   %141.7 isA lgl$-
  void                    Branch                   %141.8 -> BB143 (if true) | BB144 (if false)
BB142   <- [139]
  fs              %142.0 = FrameState         R     0x560a35f3cf50+83: [], env=e129.0
  env             e142.1 = (MkEnv)            l     c1=%139.4, c2=%139.3, parent=<env 0x560a342f8378>, context 1
  fs              %142.2 = FrameState         R     0x560a3414bf30+17: [<blt .Call>, %139.6], env=e142.1, next=%142.0
  void                    Deopt              !v    %142.2, DeadBranchReached@0x560a352d9b38[Test#0], %139.6   !
BB143   <- [141]
  lgl$-           %143.0 = CastType           d     dn %141.7
  val?            %143.1 = PopContext         C     %143.0, %139.2   <lgl$->
  lgl$#-          %143.2 = IsType                   %143.1 isA lgl$-
  void                    Branch                   %143.2 -> BB145 (if true) | BB146 (if false)
BB144   <- [141]
  fs              %144.0 = FrameState         R     0x560a35f3cf50+83: [], env=e129.0
  fs              %144.1 = FrameState         R     0x560a3414bf30+129: [%141.7], env=e141.1, next=%144.0
  void                    Deopt              !v    %144.1, Typecheck@0x560a352d9b38[Type#6], %141.7   !
BB145   <- [143]
  lgl$-           %145.0 = CastType           d     dn %143.1
  lgl$-           %145.1 = Not                d     %145.0, elided
  lgl$#-          %145.2 = CheckTrueFalse     e     %145.1
  void                    Branch                   %145.2 -> BB126 (if true) | BB19 (if false)
BB146   <- [143]
  void                    Nop                !     
  val?            %146.1 = %143.1
  dr              %146.2 = Typecheck@0x560a35dcc8e0[Type#5]
  goto BB17
BB126   <- [145]
  (cls|spec|blt)  %126.0 = LdFun              !v    as, e129.0
  fs              %126.1 = FrameState         R     0x560a35f3cf50+105: [%126.0], env=e129.0
  void                    Deopt              !v    %126.1, DeadCall@0x560a35dcc8e0[Call#3], %126.0   !
BB19   <- [145]
  val?^ | miss    %19.0 = LdVar              eR    .classEnv, e129.0
  lgl$#-          %19.1 = Identical                %19.0, function(Class, default=.requirePackage("metho|...
  void                    Branch                   %19.1 -> BB147 (if true) | BB148 (if false)
BB17   <- [146, 148]
  val?^ | miss    %17.0 = Phi                      %146.1:BB146, %148.1:BB148
  val?^ | miss    %17.1 = %17.0
  dr              %17.2 = Phi                      %146.2:BB146, %148.2:BB148
  dr              %17.3 = %17.2
  fs              %17.4 = FrameState         R     0x560a35f3cf50+83: [%143.1], env=e129.0
  void                    Deopt              !v    %17.4, %17.3, %17.1   !
BB147   <- [19]
  prom-           %147.0 = MkArg                    unboundValue, as<-[0x560a35e969a0]_p4, e129.0
  ct              %147.1 = PushContext        lCL   %147.0, .classEnv(class(object)), function(Class, default=.requirePackage("metho|..., e129.0
  val?^           %147.2 = CastType                 up %147.0
  env             e147.3 = MkEnv              l     Class=%147.2, default(miss)=missingArg, mustFind(miss)=missingArg, parent=<env 0x560a342f8378>, context 1
  prom-           %147.4 = MkArg                    unboundValue, as<-[0x560a35e969a0]_p44, e147.3
  val?^ | miss    %147.5 = CastType                 up %147.4
  void                    StArg              lW    default, %147.5, e147.3
  void                    StArg              lW    mustFind, true, e147.3
  val?^ | miss    %147.8 = LdVar              eR    is.character, <env 0x560a342f8378>
  lgl$#-          %147.9 = Identical                <blt is.character>, %147.8   <true>
  void                    Branch                   %147.9 -> BB149 (if true) | BB150 (if false)
BB148   <- [19]
  void                    Nop                !     
  val?^ | miss    %148.1 = %19.0
  dr              %148.2 = CallTarget@0x560a35dcc8e0[Call#4]
  goto BB17
BB149   <- [147]
  val?            %149.0 = Force!<lazy>       !vL   %147.2, e147.3   <(str|other)>
  lgl$#-          %149.1 = CallSafeBuiltin    wed   is.character(%149.0)    <lgl$->
  void                    Branch                   %149.1 -> BB123 (if true) | BB24 (if false)
BB150   <- [147]
  fs              %150.0 = FrameState         R     0x560a35f3cf50+200: [], env=e129.0
  fs              %150.1 = FrameState         R     0x560a35d65060+0: [], env=e147.3, next=%150.0
  void                    Deopt              !v    %150.1, DeadBranchReached@0x560a35d03630[Test#0], %147.9   !
BB123   <- [149]
  val?^ | miss    %123.0 = LdVar              eR    packageSlot, <env 0x560a342f8378>
  lgl$#-          %123.1 = Identical                %123.0, function(object) <(rir::DispatchTable*)0x560a3|...
  void                    Branch                   %123.1 -> BB153 (if true) | BB154 (if false)
BB24   <- [149]
  (cls|spec|blt)  %24.0 = LdFun              !v    @, <0x560a33cf0bd8>, <env 0x560a342f8378>
  prom-           %24.1 = MkArg                    unboundValue, as<-[0x560a35e969a0]_p46, e147.3
  prom-           %24.2 = MkArg                    unboundValue, as<-[0x560a35e969a0]_p47, e147.3
  val?            %24.3 = Call               !v    %24.0(%24.1, %24.2) e147.3   <str$->
  val?            %24.4 = %24.3
  goto BB25
BB153   <- [123]
  prom-           %153.0 = MkArg                    unboundValue, as<-[0x560a35e969a0]_p45, e147.3
  ct              %153.1 = PushContext        lCL   %153.0, packageSlot(Class), function(object) <(rir::DispatchTable*)0x560a3|..., e147.3
  val?^           %153.2 = CastType                 up %153.0
  val?^ | miss    %153.3 = LdVar              eR    attr, <env 0x560a342f8378>
  lgl$#-          %153.4 = Identical                <blt attr>, %153.3   <true>
  void                    Branch                   %153.4 -> BB157 (if true) | BB158 (if false)
BB154   <- [123]
  fs              %154.0 = FrameState         R     0x560a35f3cf50+200: [], env=e129.0
  fs              %154.1 = FrameState         R     0x560a35d65060+91: [%149.1], env=e147.3, next=%154.0
  void                    Deopt              !v    %154.1, CallTarget@0x560a35d03630[Call#3], %123.0   !
BB25   <- [24, 157]
  val?            %25.0 = Phi                      %24.4:BB24, %157.4:BB157   <(nil|str)->
  val?            %25.1 = %25.0
  lgl$-           %25.2 = Is                       %25.1, NULL
  void                    StVar              lW    package, %25.1, e147.3
  val             %25.4 = ChkMissing         e     %25.1
  lgl$#-          %25.5 = CheckTrueFalse     e     %25.2
  void                    Branch                   %25.5 -> BB111 (if true) | BB28 (if false)
BB157   <- [153]
  env             e157.0 = MkEnv              l     object=%153.2, parent=<env 0x560a342f8378>, context 1
  val?            %157.1 = Force!<lazy>       !vL   %153.2, e157.0   <(str|other)>
  val?            %157.2 = CallBuiltin        !v    attr(%157.1, "package") e157.0   <(nil|str)->
  val?            %157.3 = PopContext         C     %157.2, %153.1   <(nil|str)->
  val?            %157.4 = %157.3
  goto BB25
BB158   <- [153]
  fs              %158.0 = FrameState         R     0x560a35f3cf50+200: [], env=e129.0
  fs              %158.1 = FrameState         R     0x560a35d65060+181: [], env=e147.3, next=%158.0
  env             e158.2 = (MkEnv)            l     object=%153.2, parent=<env 0x560a342f8378>, context 1
  fs              %158.3 = FrameState         R     0x560a35d65640+17: [<blt attr>, %153.4], env=e158.2, next=%158.1
  void                    Deopt              !v    %158.3, DeadBranchReached@0x560a350d9f78[Test#0], %153.4   !
BB111   <- [25]
  val?^ | miss    %111.0 = LdVar              eR    default, e147.3
  val?            %111.1 = Force!<lazy>       !v    %111.0, e147.3   <env->
  void                    StVar              lW    value, %111.1, e147.3
  val?^ | miss    %111.3 = LdVar              eR    getClassDef, e147.3
  lgl$#-          %111.4 = Identical                %111.3, function(Class, where=topenv(parent.frame()), |...
  void                    Branch                   %111.4 -> BB151 (if true) | BB152 (if false)
BB28   <- [25]
  val?^ | miss    %28.0 = LdVar              eR    .requirePackage, e147.3
  lgl$#-          %28.1 = Identical                %28.0, function(package, mustFind=TRUE) <(rir::Dispat|...
  void                    Branch                   %28.1 -> BB155 (if true) | BB156 (if false)
BB151   <- [111]
  prom-           %151.0 = MkArg                    unboundValue, as<-[0x560a35e969a0]_p49, e147.3
  prom-           %151.1 = MkArg                    unboundValue, as<-[0x560a35e969a0]_p50, e147.3
  val?            %151.2 = StaticCall         !v    getClassDef[0x560a36b782d0](%151.0, %151.1, nil) e147.3   <other>
  lgl$-           %151.3 = Is                       %151.2, NULL
  lgl$-           %151.4 = AsLogical                %151.3
  lgl$#-          %151.5 = Identical                %151.4, false
  void                    StVar              lW    def, %151.2, e147.3
  val             %151.7 = ChkMissing         e     %151.2
  lgl$#-          %151.8 = CheckTrueFalse     e     %151.3
  void                    Branch                   %151.8 -> BB122 (if true) | BB114 (if false)
BB152   <- [111]
  fs              %152.0 = FrameState         R     0x560a35f3cf50+200: [], env=e129.0
  fs              %152.1 = FrameState         R     0x560a35d65060+285: [], env=e147.3, next=%152.0
  void                    Deopt              !v    %152.1, CallTarget@0x560a35d03630[Call#5], %111.3   !
BB155   <- [28]
  prom-           %155.0 = MkArg                    unboundValue, as<-[0x560a35e969a0]_p48 (!refl), e147.3
  val?            %155.1 = StaticCall         !v    .requirePackage[0x560a36296400](%155.0) e147.3   <env->
  val?            %155.2 = %155.1
  goto BB29
BB156   <- [28]
  fs              %156.0 = FrameState         R     0x560a35f3cf50+200: [], env=e129.0
  fs              %156.1 = FrameState         R     0x560a35d65060+195: [], env=e147.3, next=%156.0
  void                    Deopt              !v    %156.1, CallTarget@0x560a35d03630[Call#4], %28.0   !
BB122   <- [151]
  fs              %122.0 = FrameState         R     0x560a35f3cf50+200: [], env=e129.0
  val?^ | miss    %122.1 = LdVar              eR    .GlobalEnv, e147.3
  val?            %122.2 = Force!             !v    %122.1, e147.3   <val?_>
  void                    StVar              lW    value, %122.2, e147.3
  (cls|spec|blt)  %122.4 = LdFun              !v    getClassDef, e147.3
  fs              %122.5 = FrameState         R     0x560a35d65060+399: [%122.4], env=e147.3, next=%122.0
  void                    Deopt              !v    %122.5, DeadCall@0x560a35d03630[Call#6], %122.4   !
BB114   <- [151]
  void                    Branch                   %151.5 -> BB121 (if true) | BB115 (if false)
BB29   <- [155, 159]
  val?            %29.0 = Phi                      %155.2:BB155, %159.2:BB159
  val?            %29.1 = %29.0
  val?            %29.2 = PopContext         C     %29.1, %147.1   <env->
  void                    StVar              lW    where, %29.2, e129.0
  val?^ | miss    %29.4 = LdVar              eR    getGeneric, e129.0
  lgl$#-          %29.5 = Identical                %29.4, function(f, mustFind=FALSE, where, package="")|...
  void                    Branch                   %29.5 -> BB161 (if true) | BB162 (if false)
BB121   <- [114]
  void                    Nop                !     
  lgl$-           %121.1 = %151.4
  goto BB116
BB115   <- [114]
  val?^ | miss    %115.0 = LdVar              eR    mustFind, e147.3
  val?            %115.1 = Force!             !v    %115.0, e147.3   <val?_>
  lgl$-           %115.2 = AsLogical          e     %115.1
  lgl$-           %115.3 = LAnd                     %151.4, %115.2
  lgl$-           %115.4 = %115.3
  goto BB116
BB161   <- [29]
  prom-           %161.0 = MkArg                    unboundValue, as<-[0x560a35e969a0]_p6 (!refl), e129.0
  val?            %161.1 = StaticCall         !v    getGeneric[0x560a360b9de0]("coerce<-", missingArg, %161.0) { 0 2n } e129.0   <cls>
  void                    StVar              lW    coerceFun, %161.1, e129.0
  val?^ | miss    %161.3 = LdVar              eR    getMethodsForDispatch, e129.0
  lgl$#-          %161.4 = Identical                %161.3, function(fdef, inherited=FALSE) <(rir::Dispatc|...
  void                    Branch                   %161.4 -> BB163 (if true) | BB164 (if false)
BB162   <- [29]
  fs              %162.0 = FrameState         R     0x560a35f3cf50+214: [], env=e129.0
  void                    Deopt              !v    %162.0, CallTarget@0x560a35dcc8e0[Call#6], %29.4   !
BB116   <- [121, 115]
  lgl$-           %116.0 = Phi                      %115.4:BB115, %121.1:BB121
  lgl$-           %116.1 = %116.0
  lgl$#-          %116.2 = CheckTrueFalse     e     %116.1
  void                    Branch                   %116.2 -> BB120 (if true) | BB119 (if false)
BB163   <- [161]
  prom-           %163.0 = MkArg                    unboundValue, as<-[0x560a35e969a0]_p7 (!refl), e129.0
  val?            %163.1 = StaticCall         !v    getMethodsForDispatch[0x560a362b15f0](%163.0) e129.0   <env->
  void                    StVar              lW    coerceMethods, %163.1, e129.0
  lgl$-           %163.3 = Is                       %163.1, NULL
  val?^ | miss    %163.4 = LdVar              eR    .quickCoerceSelect, e129.0
  lgl$#-          %163.5 = Identical                %163.4, function(from, to, fdef, methods, where) <(rir|...
  void                    Branch                   %163.5 -> BB165 (if true) | BB166 (if false)
BB164   <- [161]
  fs              %164.0 = FrameState         R     0x560a35f3cf50+273: [], env=e129.0
  void                    Deopt              !v    %164.0, CallTarget@0x560a35dcc8e0[Call#7], %161.3   !
BB120   <- [116]
  fs              %120.0 = FrameState         R     0x560a35f3cf50+200: [], env=e129.0
  (cls|spec|blt)  %120.1 = LdFun              !v    stop, e147.3
  fs              %120.2 = FrameState         R     0x560a35d65060+694: [%120.1], env=e147.3, next=%120.0
  void                    Deopt              !v    %120.2, DeadCall@0x560a35d03630[Call#10], %120.1   !
BB119   <- [116]
  val?^ | miss    %119.0 = LdVar              eR    value, e147.3
  lgl$#-          %119.1 = IsType                   %119.0 isA val?~- | miss
  void                    Branch                   %119.1 -> BB159 (if true) | BB160 (if false)
BB165   <- [163]
  prom-           %165.0 = MkArg                    unboundValue, as<-[0x560a35e969a0]_p8, e129.0
  prom-           %165.1 = MkArg                    unboundValue, as<-[0x560a35e969a0]_p9, e129.0
  prom-           %165.2 = MkArg                    unboundValue, as<-[0x560a35e969a0]_p10, e129.0
  prom-           %165.3 = MkArg                    unboundValue, as<-[0x560a35e969a0]_p11 (!refl), e129.0
  prom-           %165.4 = MkArg                    unboundValue, as<-[0x560a35e969a0]_p12, e129.0
  ct              %165.5 = PushContext        lCL   %165.0, %165.1, %165.2, %165.3, %165.4, .quickCoerceSelect(thisClass, Class, coerceFun|..., function(from, to, fdef, methods, where) <(rir|..., e129.0
  val?^           %165.6 = CastType                 up %165.4
  val?^           %165.7 = CastType                 up %165.3
  val?^           %165.8 = CastType                 up %165.2
  val?^           %165.9 = CastType                 up %165.1
  val?^           %165.10 = CastType                 up %165.0
  lgl$#-          %165.11 = CheckTrueFalse     e     %163.3
  env             e165.12 = MkEnv              l     from=%165.10, to=%165.9, fdef=%165.8, methods=%165.7, where=%165.6, parent=<env 0x560a342f8378>, context 1
  void                    Branch                   %165.11 -> BB110 (if true) | BB38 (if false)
BB166   <- [163]
  fs              %166.0 = FrameState         R     0x560a35f3cf50+319: [], env=e129.0
  void                    Deopt              !v    %166.0, CallTarget@0x560a35dcc8e0[Call#8], %163.4   !
BB159   <- [119]
  val?~- | miss   %159.0 = CastType           d     dn %119.0
  val?-           %159.1 = Force!<value>            %159.0,    <env->
  val?-           %159.2 = %159.1
  goto BB29
BB160   <- [119]
  fs              %160.0 = FrameState         R     0x560a35f3cf50+200: [], env=e129.0
  fs              %160.1 = FrameState         R     0x560a35d65060+678: [%116.1], env=e147.3, next=%160.0
  void                    Deopt              !v    %160.1, Typecheck@0x560a35d03630[Type#34], %119.0   !
BB110   <- [165]
  void                    Nop                !     
  nil-            %110.1 = nil
  goto BB47
BB38   <- [165]
  val?^ | miss    %38.0 = LdVar              eR    is.environment, <env 0x560a342f8378>
  lgl$#-          %38.1 = Identical                <blt is.environment>, %38.0   <true>
  void                    Branch                   %38.1 -> BB167 (if true) | BB168 (if false)
BB47   <- [110, 46]
  val?            %47.0 = Phi                      %46.2:BB46, %110.1:BB110
  val?            %47.1 = %47.0
  val?            %47.2 = PopContext         C     %47.1, %165.5   <(nil|cls)>
  lgl$-           %47.3 = Is                       %47.2, NULL
  void                    StVar              lW    asMethod, %47.2, e129.0
  val             %47.5 = ChkMissing         e     %47.2
  lgl$#-          %47.6 = CheckTrueFalse     e     %47.3
  void                    Branch                   %47.6 -> BB54 (if true) | BB50 (if false)
BB167   <- [38]
  lgl$#-          %167.0 = CallSafeBuiltin    wed   is.environment(%163.1)    <lgl$->
  void                    Branch                   %167.0 -> BB42 (if true) | BB41 (if false)
BB168   <- [38]
  fs              %168.0 = FrameState         R     0x560a35f3cf50+371: [], env=e129.0
  env             e168.1 = (MkEnv)            l     from=%165.10, to=%165.9, fdef=%165.8, methods=%165.7, where=%165.6, parent=<env 0x560a342f8378>, context 1
  fs              %168.2 = FrameState         R     0x560a35d89e80+9: [%163.1], env=e168.1, next=%168.0
  void                    Deopt              !v    %168.2, DeadBranchReached@0x560a35d8b7e0[Test#0], %38.1   !
BB54   <- [47]
  val?^ | miss    %54.0 = LdVar              eR    c, e129.0
  lgl$#-          %54.1 = Identical                <blt c>, %54.0   <true>
  void                    Branch                   %54.1 -> BB169 (if true) | BB170 (if false)
BB50   <- [47]
  void                    Nop                !     
  goto BB51
BB42   <- [167]
  val?^ | miss    %42.0 = LdVar              eR    .findMethodInTable, <env 0x560a342f8378>
  lgl$#-          %42.1 = Identical                %42.0, function(signature, table, fdef=NULL, expdSig=|...
  void                    Branch                   %42.1 -> BB173 (if true) | BB174 (if false)
BB41   <- [167]
  (cls|spec|blt)  %41.0 = LdFun              !v    @, <env 0x560a342f8378>
  fs              %41.1 = FrameState         R     0x560a35f3cf50+371: [], env=e129.0
  fs              %41.2 = FrameState         R     0x560a35d89e80+132: [%41.0], env=e165.12, next=%41.1
  void                    Deopt              !v    %41.2, DeadCall@0x560a35d8b7e0[Call#1], %41.0   !
BB169   <- [54]
  val?^ | miss    %169.0 = LdVar              eR    thisClass, e129.0
  lgl$#-          %169.1 = IsType                   %169.0 isA val?~+ | miss
  void                    Branch                   %169.1 -> BB171 (if true) | BB172 (if false)
BB170   <- [54]
  void                    Nop                !     
  lgl$#-          %170.1 = %54.1
  dr              %170.2 = DeadBranchReached@0x560a35dcc8e0[Test#0]
  goto BB48
BB51   <- [50, 65, 183]
  val?^ | miss    %51.0 = LdVar              eR    asMethod, e129.0
  void                    Visible            v     
  val?            %51.2 = Force!<value>      !     %51.0, e129.0   <cls>
  lgl$-           %51.3 = Is                       %51.2, NULL
  lgl$#-          %51.4 = CheckTrueFalse     e     %51.3
  void                    Branch                   %51.4 -> BB53 (if true) | BB52 (if false)
BB173   <- [42]
  prom-           %173.0 = MkArg                    unboundValue, as<-[0x560a35e969a0]_p40, e165.12
  prom-           %173.1 = MkArg                    unboundValue, as<-[0x560a35e969a0]_p43, e165.12
  val?            %173.2 = StaticCall         !v    .findMethodInTable[0x560a364c0b50](%173.0, %173.1) e165.12   <(nil|cls)>
  void                    StVar              lW    method, %173.2, e165.12
  val?^ | miss    %173.4 = LdVar              eR    is.environment, e165.12
  lgl$#-          %173.5 = Identical                <blt is.environment>, %173.4   <true>
  void                    Branch                   %173.5 -> BB175 (if true) | BB176 (if false)
BB174   <- [42]
  fs              %174.0 = FrameState         R     0x560a35f3cf50+371: [], env=e129.0
  fs              %174.1 = FrameState         R     0x560a35d89e80+116: [%167.0], env=e165.12, next=%174.0
  void                    Deopt              !v    %174.1, CallTarget@0x560a35d8b7e0[Call#8], %42.0   !
BB171   <- [169]
  val?~+ | miss   %171.0 = CastType           d     dn %169.0
  val?+           %171.1 = Force!<value>            %171.0,    <str$+>
  val?^ | miss    %171.2 = LdVar              eR    Class, e129.0
  val?            %171.3 = Force!<wrapped>    !v    %171.2, e129.0   <str$->
  val?            %171.4 = NamedCall          !v    <blt c>(from=%171.1, to=%171.3) e129.0   <str+>
  void                    StVar              lW    sig, %171.4, e129.0
  void                    StVar              lW    canCache, true, e129.0
  void                    StVar              lW    inherited, false, e129.0
  (cls|spec|blt)  %171.8 = LdFun              !v    selectMethod, <0x560a36a42b80>, e129.0
  prom-           %171.9 = MkArg                    unboundValue, as<-[0x560a35e969a0]_p16, e129.0
  prom-           %171.10 = MkArg                    unboundValue, as<-[0x560a35e969a0]_p17, e129.0
  prom-           %171.11 = MkArg                    unboundValue, as<-[0x560a35e969a0]_p18, e129.0
  val?            %171.12 = NamedCall          !v    %171.8("coerce<-", %171.9, true, false, fdef=%171.10, mlist=%171.11) e129.0   <nil->
  lgl$-           %171.13 = Is                       %171.12, NULL
  void                    StVar              lW    asMethod, %171.12, e129.0
  val             %171.15 = ChkMissing         e     %171.12
  lgl$#-          %171.16 = CheckTrueFalse     e     %171.13
  void                    Branch                   %171.16 -> BB68 (if true) | BB57 (if false)
BB172   <- [169]
  void                    Nop                !     
  val?^ | miss    %172.1 = %169.0
  dr              %172.2 = Typecheck@0x560a35dcc8e0[Type#25]
  goto BB48
BB48   <- [170, 172]
  val?^ | miss    %48.0 = Phi                      %170.1:BB170, %172.1:BB172
  val?^ | miss    %48.1 = %48.0
  dr              %48.2 = Phi                      %170.2:BB170, %172.2:BB172
  dr              %48.3 = %48.2
  fs              %48.4 = FrameState         R     0x560a35f3cf50+385: [], env=e129.0
  void                    Deopt              !v    %48.4, %48.3, %48.1   !
BB53   <- [51]
  (cls|spec|blt)  %53.0 = LdFun              !v    stop, e129.0
  fs              %53.1 = FrameState         R     0x560a35f3cf50+1575: [%53.0], env=e129.0
  void                    Deopt              !v    %53.1, DeadCall@0x560a35dcc8e0[Call#27], %53.0   !
BB52   <- [51]
  (cls|spec|blt)  %52.0 = LdFun              !     asMethod, e129.0
  prom-           %52.1 = MkArg                    unboundValue, as<-[0x560a35e969a0]_p13, e129.0
  prom-           %52.2 = MkArg                    unboundValue, as<-[0x560a35e969a0]_p14, e129.0
  prom-           %52.3 = MkArg                    unboundValue, as<-[0x560a35e969a0]_p15, e129.0
  val?            %52.4 = Call               !     %52.0(%52.1, %52.2, %52.3) e129.0   <(cls|other)>
  void                    Return             l     %52.4
BB175   <- [173]
  val             %175.0 = ChkMissing         e     %173.2
  lgl$#-          %175.1 = CallSafeBuiltin    wed   is.environment(%173.2) 
  void                    Branch                   %175.1 -> BB109 (if true) | BB45 (if false)
BB176   <- [173]
  fs              %176.0 = FrameState         R     0x560a35f3cf50+371: [], env=e129.0
  fs              %176.1 = FrameState         R     0x560a35d89e80+703: [], env=e165.12, next=%176.0
  void                    Deopt              !v    %176.1, DeadBranchReached@0x560a35d8b7e0[Test#5], %173.5   !
BB68   <- [171]
  val?^ | miss    %68.0 = LdVar              eR    is, e129.0
  lgl$#-          %68.1 = Identical                %68.0, function(object, class2) <(rir::DispatchTable*|...
  void                    Branch                   %68.1 -> BB177 (if true) | BB178 (if false)
BB57   <- [171]
  void                    Nop                !     
  val?            %57.1 = %171.12
  goto BB58
BB109   <- [175]
  void                    Nop                !     
  nil-            %109.1 = nil
  goto BB46
BB45   <- [175]
  void                    Nop                !     
  val?            %45.1 = %173.2
  goto BB46
BB177   <- [68]
  prom-           %177.0 = MkArg                    unboundValue, as<-[0x560a35e969a0]_p23, e129.0
  prom-           %177.1 = MkArg                    unboundValue, as<-[0x560a35e969a0]_p24, e129.0
  val?            %177.2 = Call               !v    function(object, class2) <(rir::DispatchTable*|...(%177.0, %177.1) e129.0   <lgl$->
  lgl$#-          %177.3 = IsType                   %177.2 isA lgl$-
  void                    Branch                   %177.3 -> BB181 (if true) | BB182 (if false)
BB178   <- [68]
  fs              %178.0 = FrameState         R     0x560a35f3cf50+680: [], env=e129.0
  void                    Deopt              !v    %178.0, CallTarget@0x560a35dcc8e0[Call#11], %68.0   !
BB58   <- [57, 93]
  val?            %58.0 = Phi                      %93.2:BB93, %57.1:BB57
  val?            %58.1 = %58.0
  val?^ | miss    %58.2 = LdVar              eR    canCache, e129.0
  lgl$#-          %58.3 = IsType                   %58.2 isA lgl$-
  void                    Branch                   %58.3 -> BB179 (if true) | BB180 (if false)
BB46   <- [109, 45]
  val?            %46.0 = Phi                      %45.1:BB45, %109.1:BB109
  val?            %46.1 = %46.0
  val?            %46.2 = %46.1
  goto BB47
BB181   <- [177]
  lgl$-           %181.0 = CastType           d     dn %177.2
  lgl$#-          %181.1 = CheckTrueFalse     e     %181.0
  void                    Branch                   %181.1 -> BB72 (if true) | BB71 (if false)
BB182   <- [177]
  void                    Nop                !     
  val?            %182.1 = %177.2
  dr              %182.2 = Typecheck@0x560a35dcc8e0[Type#35]
  goto BB69
BB179   <- [58]
  lgl$-           %179.0 = CastType           d     dn %58.2
  lgl$-           %179.1 = AsLogical                %179.0
  lgl$#-          %179.2 = Identical                %179.1, false
  void                    Branch                   %179.2 -> BB67 (if true) | BB61 (if false)
BB180   <- [58]
  fs              %180.0 = FrameState         R     0x560a35f3cf50+1413: [], env=e129.0
  void                    Deopt              !v    %180.0, Typecheck@0x560a35dcc8e0[Type#70], %58.2   !
BB72   <- [181]
  val?^ | miss    %72.0 = LdVar              eR    possibleExtends, e129.0
  lgl$#-          %72.1 = Identical                %72.0, function(class1, class2, ClassDef1=getClassDef|...
  void                    Branch                   %72.1 -> BB185 (if true) | BB186 (if false)
BB71   <- [181]
  (cls|spec|blt)  %71.0 = LdFun              !v    selectMethod, e129.0
  fs              %71.1 = FrameState         R     0x560a35f3cf50+763: [%71.0], env=e129.0
  void                    Deopt              !v    %71.1, DeadCall@0x560a35dcc8e0[Call#12], %71.0   !
BB69   <- [182, 186]
  val?^ | miss    %69.0 = Phi                      %182.1:BB182, %186.1:BB186
  val?^ | miss    %69.1 = %69.0
  dr              %69.2 = Phi                      %182.2:BB182, %186.2:BB186
  dr              %69.3 = %69.2
  fs              %69.4 = FrameState         R     0x560a35f3cf50+747: [%177.2], env=e129.0
  void                    Deopt              !v    %69.4, %69.3, %69.1   !
BB67   <- [179]
  void                    Nop                !     
  lgl$-           %67.1 = %179.1
  goto BB62
BB61   <- [179]
  val             %61.0 = ChkMissing         e     %58.1   <cls>
  lgl$-           %61.1 = Is                       %61.0, NULL
  lgl$-           %61.2 = Not                d     %61.1, elided
  lgl$-           %61.3 = AsLogical                %61.2
  lgl$-           %61.4 = LAnd                     %179.1, %61.3
  lgl$-           %61.5 = %61.4
  goto BB62
BB185   <- [72]
  prom-           %185.0 = MkArg                    unboundValue, as<-[0x560a35e969a0]_p25, e129.0
  prom-           %185.1 = MkArg                    unboundValue, as<-[0x560a35e969a0]_p26, e129.0
  val?            %185.2 = StaticCall         !v    possibleExtends[0x560a36e19410](%185.0, %185.1) e129.0   <other>
  void                    StVar              lW    asMethod, %185.2, e129.0
  val?^ | miss    %185.4 = LdVar              eR    isTRUE, e129.0
  lgl$#-          %185.5 = Identical                %185.4, function(x) <(rir::DispatchTable*)0x560a35cbd9|...
  void                    Branch                   %185.5 -> BB187 (if true) | BB188 (if false)
BB186   <- [72]
  void                    Nop                !     
  val?^ | miss    %186.1 = %72.0
  dr              %186.2 = CallTarget@0x560a35dcc8e0[Call#14]
  goto BB69
BB62   <- [67, 61]
  lgl$-           %62.0 = Phi                      %61.5:BB61, %67.1:BB67
  lgl$-           %62.1 = %62.0
  lgl$#-          %62.2 = CheckTrueFalse     e     %62.1
  void                    Branch                   %62.2 -> BB66 (if true) | BB65 (if false)
BB187   <- [185]
  val             %187.0 = ChkMissing         e     %185.2
  val+            %187.1 = CallSafeBuiltin    wed   is.logical(%185.2)    <lgl$->
  lgl$#-          %187.2 = IsType                   %187.1 isA lgl$-
  void                    Branch                   %187.2 -> BB189 (if true) | BB190 (if false)
BB188   <- [185]
  fs              %188.0 = FrameState         R     0x560a35f3cf50+915: [], env=e129.0
  void                    Deopt              !v    %188.0, CallTarget@0x560a35dcc8e0[Call#15], %185.4   !
BB66   <- [62]
  val?^ | miss    %66.0 = LdVar              eR    cacheMethod, e129.0
  lgl$#-          %66.1 = Identical                %66.0, function(f, sig, def, args=names(sig), fdef, i|...
  void                    Branch                   %66.1 -> BB183 (if true) | BB184 (if false)
BB65   <- [62]
  void                    Nop                !     
  goto BB51
BB189   <- [187]
  lgl$-           %189.0 = CastType           d     dn %187.1
  lgl$-           %189.1 = AsLogical                %189.0
  lgl$#-          %189.2 = Identical                %189.1, false
  void                    Branch                   %189.2 -> BB108 (if true) | BB77 (if false)
BB190   <- [187]
  void                    Nop                !     
  val+            %190.1 = %187.1
  dr              %190.2 = Typecheck@0x560a351701b8[Type#2]
  goto BB75
BB183   <- [66]
  prom-           %183.0 = MkArg                    unboundValue, as<-[0x560a35e969a0]_p19, e129.0
  prom-           %183.1 = MkArg                    unboundValue, as<-[0x560a35e969a0]_p20 (!refl), e129.0
  prom-           %183.2 = MkArg                    unboundValue, as<-[0x560a35e969a0]_p21, e129.0
  prom-           %183.3 = MkArg                    unboundValue, as<-[0x560a35e969a0]_p22, e129.0
  val?            %183.4 = StaticCall         !v    cacheMethod[0x560a36a32690]("coerce<-", %183.0, %183.1, missingArg, %183.2, %183.3) { 0 1 2 4n 5n } e129.0
  goto BB51
BB184   <- [66]
  fs              %184.0 = FrameState         R     0x560a35f3cf50+1456: [%62.1], env=e129.0
  void                    Deopt              !v    %184.0, CallTarget@0x560a35dcc8e0[Call#26], %66.0   !
BB108   <- [189]
  void                    Nop                !     
  lgl$-           %108.1 = %189.1
  goto BB78
BB77   <- [189]
  lgl$#-          %77.0 = IsType                   %185.2 isA lgl$-
  void                    Branch                   %77.0 -> BB193 (if true) | BB194 (if false)
BB75   <- [190, 192, 194]
  val?^ | miss    %75.0 = Phi                      %190.1:BB190, %192.1:BB192, %194.1:BB194
  val?^ | miss    %75.1 = %75.0
  dr              %75.2 = Phi                      %190.2:BB190, %192.2:BB192, %194.2:BB194
  dr              %75.3 = %75.2
  prom-           %75.4 = MkArg                    %185.2, as<-[0x560a35e969a0]_p27 (!refl), e129.0
  val?~           %75.5 = CastType                 up %75.4
  fs              %75.6 = FrameState         R     0x560a35f3cf50+947: [], env=e129.0
  env             e75.7 = (MkEnv)            l     x=%75.5, parent=R_BaseNamespace, context 0
  fs              %75.8 = FrameState         R     0x560a3474ec40+91: [%187.1], env=e75.7, next=%75.6
  void                    Deopt              !v    %75.8, %75.3, %75.1   !
BB78   <- [108, 193]
  lgl$-           %78.0 = Phi                      %193.1:BB193, %108.1:BB108
  lgl$-           %78.1 = %78.0
  lgl$-           %78.2 = AsLogical                %78.1
  lgl$#-          %78.3 = Identical                %78.2, false
  void                    Branch                   %78.3 -> BB107 (if true) | BB79 (if false)
BB193   <- [77]
  lgl$-           %193.0 = AsLogical                %189.1
  lgl$-           %193.1 = %193.0
  goto BB78
BB194   <- [77]
  void                    Nop                !     
  val?            %194.1 = %185.2
  dr              %194.2 = Typecheck@0x560a351701b8[Type#4]
  goto BB75
BB107   <- [78]
  void                    Nop                !     
  lgl$-           %107.1 = %78.2
  goto BB80
BB79   <- [78]
  lgl$#-          %79.0 = IsType                   %185.2 isA lgl$-
  void                    Branch                   %79.0 -> BB191 (if true) | BB192 (if false)
BB80   <- [107, 191]
  lgl$-           %80.0 = Phi                      %191.5:BB191, %107.1:BB107
  lgl$-           %80.1 = %80.0
  lgl$-           %80.2 = AsLogical                %80.1
  lgl$#-          %80.3 = Identical                %80.2, false
  void                    Branch                   %80.3 -> BB106 (if true) | BB81 (if false)
BB191   <- [79]
  lgl$-           %191.0 = CastType           d     dn %185.2   <other>
  lgl$-           %191.1 = CallSafeBuiltin    wed   is.na(%191.0)    <lgl$->
  lgl$-           %191.2 = Not                d     %191.1, elided
  lgl$-           %191.3 = AsLogical                %191.2
  lgl$-           %191.4 = LAnd                     %78.2, %191.3
  lgl$-           %191.5 = %191.4
  goto BB80
BB192   <- [79]
  void                    Nop                !     
  val?            %192.1 = %185.2
  dr              %192.2 = Typecheck@0x560a351701b8[Type#8]
  goto BB75
BB106   <- [80]
  void                    Nop                !     
  lgl$-           %106.1 = %80.2
  goto BB82
BB81   <- [80]
  lgl$-           %81.0 = AsLogical          e     %185.2
  lgl$-           %81.1 = LAnd                     %80.2, %81.0
  lgl$-           %81.2 = %81.1
  goto BB82
BB82   <- [106, 81]
  lgl$-           %82.0 = Phi                      %81.2:BB81, %106.1:BB106
  lgl$-           %82.1 = %82.0
  lgl$#-          %82.2 = CheckTrueFalse     e     %82.1
  void                    Branch                   %82.2 -> BB105 (if true) | BB83 (if false)
BB105   <- [82]
  (cls|spec|blt)  %105.0 = LdFun              !v    <-, e129.0
  fs              %105.1 = FrameState         R     0x560a35f3cf50+1365: [%105.0], env=e129.0
  void                    Deopt              !v    %105.1, DeadCall@0x560a35dcc8e0[Call#23], %105.0   !
BB83   <- [82]
  (cls|spec|blt)  %83.0 = LdFun              !v    @, <0x560a33cf0bd8>, e129.0
  prom-           %83.1 = MkArg                    unboundValue, as<-[0x560a35e969a0]_p28, e129.0
  prom-           %83.2 = MkArg                    unboundValue, as<-[0x560a35e969a0]_p29, e129.0
  val?            %83.3 = Call               !v    %83.0(%83.1, %83.2) e129.0   <cls->
  void                    StVar              lW    test, %83.3, e129.0
  (cls|spec|blt)  %83.5 = LdFun              !v    @, <0x560a33cf0bd8>, e129.0
  prom-           %83.6 = MkArg                    unboundValue, as<-[0x560a35e969a0]_p30, e129.0
  prom-           %83.7 = MkArg                    unboundValue, as<-[0x560a35e969a0]_p31, e129.0
  val?            %83.8 = Call               !v    %83.5(%83.6, %83.7) e129.0   <cls->
  void                    StVar              lW    asMethod, %83.8, e129.0
  val?^ | miss    %83.10 = LdVar              eR    is.function, e129.0
  lgl$#-          %83.11 = Identical                <blt is.function>, %83.10   <true>
  void                    Branch                   %83.11 -> BB195 (if true) | BB196 (if false)
BB195   <- [83]
  val?^ | miss    %195.0 = LdVar              eR    test, e129.0
  lgl$#-          %195.1 = IsType                   %195.0 isA val?~- | miss
  void                    Branch                   %195.1 -> BB197 (if true) | BB198 (if false)
BB196   <- [83]
  void                    Nop                !     
  lgl$#-          %196.1 = %83.11
  dr              %196.2 = DeadBranchReached@0x560a35dcc8e0[Test#1]
  goto BB84
BB197   <- [195]
  val?~- | miss   %197.0 = CastType           d     dn %195.0
  val?-           %197.1 = Force!<value>            %197.0,    <cls->
  lgl$#-          %197.2 = CallSafeBuiltin    wed   is.function(%197.1)    <lgl$->
  lgl$#-          %197.3 = Not                d     %197.2, elided
  void                    Branch                   %197.2 -> BB97 (if true) | BB88 (if false)
BB198   <- [195]
  void                    Nop                !     
  val?^ | miss    %198.1 = %195.0
  dr              %198.2 = Typecheck@0x560a35dcc8e0[Type#51]
  goto BB84
BB84   <- [196, 198]
  val?^ | miss    %84.0 = Phi                      %196.1:BB196, %198.1:BB198
  val?^ | miss    %84.1 = %84.0
  dr              %84.2 = Phi                      %196.2:BB196, %198.2:BB198
  dr              %84.3 = %84.2
  fs              %84.4 = FrameState         R     0x560a35f3cf50+1060: [], env=e129.0
  void                    Deopt              !v    %84.4, %84.3, %84.1   !
BB97   <- [197]
  val?^ | miss    %97.0 = LdVar              eR    isTRUE, e129.0
  lgl$#-          %97.1 = Identical                %97.0, function(x) <(rir::DispatchTable*)0x560a35cbd9|...
  void                    Branch                   %97.1 -> BB199 (if true) | BB200 (if false)
BB88   <- [197]
  void                    Nop                !     
  lgl$#-          %88.1 = %197.3
  goto BB89
BB199   <- [97]
  val?^ | miss    %199.0 = LdVar              eR    body, e129.0
  lgl$#-          %199.1 = Identical                %199.0, function(fun=sys.function(sys.parent())) <(rir|...
  void                    Branch                   %199.1 -> BB201 (if true) | BB202 (if false)
BB200   <- [97]
  void                    Nop                !     
  val?^ | miss    %200.1 = %97.0
  dr              %200.2 = CallTarget@0x560a35dcc8e0[Call#19]
  goto BB86
BB89   <- [88, 102]
  lgl$-           %89.0 = Phi                      %102.4:BB102, %88.1:BB88
  lgl$-           %89.1 = %89.0
  void                    StVar              lW    canCache, %89.1, e129.0
  lgl$#-          %89.3 = CheckTrueFalse     e     %89.1
  void                    Branch                   %89.3 -> BB94 (if true) | BB92 (if false)
BB201   <- [199]
  lgl$#-          %201.0 = CallSafeBuiltin    wed   is.character(%197.1)    <lgl$->
  void                    Branch                   %201.0 -> BB104 (if true) | BB98 (if false)
BB202   <- [199]
  void                    Nop                !     
  val?^ | miss    %202.1 = %199.0
  dr              %202.2 = CallTarget@0x560a35dcc8e0[Call#20]
  goto BB86
BB86   <- [200, 202]
  val?^ | miss    %86.0 = Phi                      %200.1:BB200, %202.1:BB202
  val?^ | miss    %86.1 = %86.0
  dr              %86.2 = Phi                      %200.2:BB200, %202.2:BB202
  dr              %86.3 = %86.2
  fs              %86.4 = FrameState         R     0x560a35f3cf50+1151: [%197.2], env=e129.0
  void                    Deopt              !v    %86.4, %86.3, %86.1   !
BB94   <- [89]
  val?^ | miss    %94.0 = LdVar              eR    getClassDef, e129.0
  lgl$#-          %94.1 = Identical                %94.0, function(Class, where=topenv(parent.frame()), |...
  void                    Branch                   %94.1 -> BB203 (if true) | BB204 (if false)
BB92   <- [89]
  void                    Nop                !     
  val?            %92.1 = %83.8
  goto BB93
BB104   <- [201]
  prom-           %104.0 = MkArg                    %197.1, as<-[0x560a35e969a0]_p33 (!refl), e129.0
  val?~           %104.1 = CastType                 up %104.0
  fs              %104.2 = FrameState         R     0x560a35f3cf50+1197: [%197.3], env=e129.0
  prom-           %104.3 = MkArg                    unboundValue, as<-[0x560a35e969a0]_p32, e129.0
  val?^           %104.4 = CastType                 up %104.3
  (cls|spec|blt)  %104.5 = LdFun              !v    get, R_BaseNamespace
  env             e104.6 = (MkEnv)            l     x=%104.4, parent=R_BaseNamespace, context 0
  fs              %104.7 = FrameState         R     0x560a3474ec40+69: [<blt is.logical>], env=e104.6, next=%104.2
  fs              %104.8 = FrameState         R     0x560a35ddbbd0+32(pr): [], env=e129.0, next=%104.7
  env             e104.9 = (MkEnv)            l     fun=%104.1, parent=R_BaseNamespace, context 0
  fs              %104.10 = FrameState         R     0x560a35cc4800+112: [%104.5], env=e104.9, next=%104.8
  void                    Deopt              !v    %104.10, DeadCall@0x560a351709f8[Call#3], %104.5   !
BB98   <- [201]
  val+            %98.0 = CallSafeBuiltin    wed   body(%197.1)    <lgl$->
  lgl$#-          %98.1 = IsType                   %98.0 isA lgl$-
  void                    Branch                   %98.1 -> BB207 (if true) | BB208 (if false)
BB203   <- [94]
  prom-           %203.0 = MkArg                    unboundValue, as<-[0x560a35e969a0]_p34, e129.0
  prom-           %203.1 = MkArg                    unboundValue, as<-[0x560a35e969a0]_p35, e129.0
  val?            %203.2 = StaticCall         !v    getClassDef[0x560a36e561b0](%203.0, %203.1) e129.0   <other>
  void                    StVar              lW    ClassDef, %203.2, e129.0
  val?^ | miss    %203.4 = LdVar              eR    .asCoerceMethod, e129.0
  lgl$#-          %203.5 = Identical                %203.4, function(def, thisClass, ClassDef, replace, wh|...
  void                    Branch                   %203.5 -> BB205 (if true) | BB206 (if false)
BB204   <- [94]
  fs              %204.0 = FrameState         R     0x560a35f3cf50+1213: [], env=e129.0
  void                    Deopt              !v    %204.0, CallTarget@0x560a35dcc8e0[Call#21], %94.0   !
BB93   <- [92, 205]
  val?            %93.0 = Phi                      %205.6:BB205, %92.1:BB92
  val?            %93.1 = %93.0
  val?            %93.2 = %93.1
  goto BB58
BB207   <- [98]
  lgl$-           %207.0 = CastType           d     dn %98.0
  lgl$-           %207.1 = CallSafeBuiltin    wed   is.na(%207.0)    <lgl$->
  lgl$-           %207.2 = Not                d     %207.1, elided
  lgl$-           %207.3 = AsLogical                %207.2
  lgl$-           %207.4 = AsLogical                %207.3
  lgl$-           %207.5 = AsLogical                %207.4
  lgl$#-          %207.6 = Identical                %207.5, false
  void                    Branch                   %207.6 -> BB103 (if true) | BB101 (if false)
BB208   <- [98]
  prom-           %208.0 = MkArg                    %197.1, as<-[0x560a35e969a0]_p33 (!refl), e129.0
  val?~           %208.1 = CastType                 up %208.0
  fs              %208.2 = FrameState         R     0x560a35f3cf50+1197: [%197.3], env=e129.0
  prom-           %208.3 = MkArg                    unboundValue, as<-[0x560a35e969a0]_p32, e129.0
  val?^           %208.4 = CastType                 up %208.3
  env             e208.5 = (MkEnv)            l     x=%208.4, parent=R_BaseNamespace, context 0
  fs              %208.6 = FrameState         R     0x560a3474ec40+69: [<blt is.logical>], env=e208.5, next=%208.2
  fs              %208.7 = FrameState         R     0x560a35ddbbd0+32(pr): [], env=e129.0, next=%208.6
  env             e208.8 = (MkEnv)            l     fun=%208.1, parent=R_BaseNamespace, context 0
  fs              %208.9 = FrameState         R     0x560a35cc4800+202: [%98.0], env=e208.8, next=%208.7
  void                    Deopt              !v    %208.9, Typecheck@0x560a35dcc8e0[Type#54], %98.0   !
BB205   <- [203]
  prom-           %205.0 = MkArg                    unboundValue, as<-[0x560a35e969a0]_p36, e129.0
  prom-           %205.1 = MkArg                    unboundValue, as<-[0x560a35e969a0]_p37, e129.0
  prom-           %205.2 = MkArg                    unboundValue, as<-[0x560a35e969a0]_p38 (!refl), e129.0
  prom-           %205.3 = MkArg                    unboundValue, as<-[0x560a35e969a0]_p39, e129.0
  val?            %205.4 = StaticCall         !v    .asCoerceMethod[0x560a36e19e10](%205.0, %205.1, %205.2, true, %205.3) e129.0   <cls>
  void                    StVar              lW    asMethod, %205.4, e129.0
  val?            %205.6 = %205.4
  goto BB93
BB206   <- [203]
  fs              %206.0 = FrameState         R     0x560a35f3cf50+1289: [], env=e129.0
  void                    Deopt              !v    %206.0, CallTarget@0x560a35dcc8e0[Call#22], %203.4   !
BB103   <- [207]
  void                    Nop                !     
  lgl$-           %103.1 = %207.5
  goto BB102
BB101   <- [207]
  lgl$-           %101.0 = AsLogical                %207.0
  lgl$-           %101.1 = LAnd                     %207.5, %101.0
  lgl$-           %101.2 = %101.1
  goto BB102
BB102   <- [103, 101]
  lgl$-           %102.0 = Phi                      %101.2:BB101, %103.1:BB103
  lgl$-           %102.1 = %102.0
  lgl$-           %102.2 = AsLogical                %102.1
  lgl$-           %102.3 = LOr                      %197.3, %102.2
  lgl$-           %102.4 = %102.3
  goto BB89
Prom 0:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    object, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <(cls|other)>
  void                    Return             l     %0.3
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     .class1, <0x560a35d48ec0>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, as<-[0x560a35e969a0]_p2, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <str$->
  void                    Return             l     %0.3
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    value, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <(complex|cls)->
  void                    Return             l     %0.3
Prom 3:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    Class, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 4:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     class, <0x560a33cf1748>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, as<-[0x560a35e969a0]_p5, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <str$+>
  void                    Return             l     %0.3
Prom 5:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    object, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <(cls|other)>
  void                    Return             l     %0.3
Prom 6:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 7:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    coerceFun, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 8:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    thisClass, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$+>
  void                    Return             l     %0.3
Prom 9:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    Class, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 10:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    coerceFun, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 11:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    coerceMethods, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 12:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 13:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    object, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <(cls|other)>
  void                    Return             l     %0.3
Prom 14:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    Class, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 15:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    value, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <(complex|cls)->
  void                    Return             l     %0.3
Prom 16:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    sig, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str+>
  void                    Return             l     %0.3
Prom 17:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    coerceFun, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 18:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    coerceMethods, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 19:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    sig, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str+>
  void                    Return             l     %0.3
Prom 20:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    asMethod, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 21:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    coerceFun, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 22:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    inherited, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <lgl$->
  void                    Return             l     %0.3
Prom 23:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    object, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <other>
  void                    Return             l     %0.3
Prom 24:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    Class, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 25:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    thisClass, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$+>
  void                    Return             l     %0.3
Prom 26:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    Class, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 27:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    asMethod, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <other>
  void                    Return             l     %0.3
Prom 28:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    asMethod, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 29:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    test, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 30:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    asMethod, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 31:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    replace, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 32:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     body, <0x560a35cc3670>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, as<-[0x560a35e969a0]_p33, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <lgl$->
  void                    Return             l     %0.3
Prom 33:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    test, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls->
  void                    Return             l     %0.3
Prom 34:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    Class, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 35:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 36:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    asMethod, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls->
  void                    Return             l     %0.3
Prom 37:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    thisClass, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$+>
  void                    Return             l     %0.3
Prom 38:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    ClassDef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <other>
  void                    Return             l     %0.3
Prom 39:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 40:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     c, <0x560a33cf1940>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, as<-[0x560a35e969a0]_p41, e0.0
  prom-           %0.3  = MkArg                    unboundValue, as<-[0x560a35e969a0]_p42, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <str->
  void                    Return             l     %0.4
Prom 41:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    from, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str$+>
  void                    Return             l     %0.3
Prom 42:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    to, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 43:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    methods, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 44:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     .requirePackage, <0x560a35d63a68>, e0.0
  val?            %0.2  = Call               !     %0.1("methods") e0.0   <env->
  void                    Return             l     %0.2
Prom 45:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    Class, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$+>
  void                    Return             l     %0.3
Prom 46:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    Class, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 47:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    package, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 48:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    package, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 49:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    Class, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 50:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    value, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3

│ as<-[0x560a35e969a0]                                                         │
└──────────────────────────────────────────────────────────────────────────────┘
