
┌──────────────────────────────────────────────────────────────────────────────┐
│ .removePreviousCoerce[0x560a38f74aa0]                                        │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;NonRefl0,NonRefl1,NonRefl2,NonRefl3,!Obj0,!Obj1,!Obj2,!Obj3│
│ Properties:                                                                  │
├────── Final PIR Version
.removePreviousCoerce[0x560a38f74aa0]
BB0
  val?^           %0.0  = LdArg                    3
  val?^           %0.1  = LdArg                    2
  val?^           %0.2  = LdArg                    1
  val?^           %0.3  = LdArg                    0
  val?^ | miss    %0.4  = LdVar              eR    c, <env 0x560a342f8378>
  lgl$#-          %0.5  = Identical                <blt c>, %0.4   <true>
  void                    Branch                   %0.5 -> BB29 (if true) | BB30 (if false)
BB29   <- [0]
  env             e29.0 = MkEnv              l     from=%0.3, to=%0.2, where=%0.1, prevIs=%0.0, parent=<env 0x560a342f8378>, context 1
  val+            %29.1 = Force!<lazy>       !vr   %0.3,    <str$->
  val+            %29.2 = Force!<lazy>       !vr   %0.2,    <str$+>
  val+            %29.3 = CallSafeBuiltin    wed   c(%29.1, %29.2)    <str->
  void                    StVar              lW    sig, %29.3, e29.0
  val?^ | miss    %29.5 = LdVar              eR    getGeneric, <env 0x560a342f8378>
  lgl$#-          %29.6 = Identical                %29.5, function(f, mustFind=FALSE, where, package="")|...
  void                    Branch                   %29.6 -> BB31 (if true) | BB32 (if false)
BB30   <- [0]
  env             e30.0 = (MkEnv)            l     from=%0.3, to=%0.2, where=%0.1, prevIs=%0.0, parent=<env 0x560a342f8378>, context 1
  fs              %30.1 = FrameState         R     0x560a35ee6460+17: [<blt c>, %0.5], env=e30.0
  void                    Deopt              !v    %30.1, DeadBranchReached@0x560a361f9460[Test#0], %0.5
BB31   <- [29]
  prom-           %31.0 = MkArg                    unboundValue, .removePreviousCoerce[0x560a38f74aa0]_p0 (!refl), e29.0
  val?            %31.1 = StaticCall         !v    getGeneric[0x560a3620a7c0]("coerce", missingArg, %31.0) { 0 2n } e29.0   <cls>
  lgl$-           %31.2 = Is                       %31.1, NULL
  void                    StVar              lW    cdef, %31.1, e29.0
  val             %31.4 = ChkMissing         e     %31.1
  lgl$#-          %31.5 = CheckTrueFalse     e     %31.2
  void                    Branch                   %31.5 -> BB27 (if true) | BB5 (if false)
BB32   <- [29]
  fs              %32.0 = FrameState         R     0x560a35ee6460+124: [], env=e29.0
  void                    Deopt              !v    %32.0, CallTarget@0x560a361f9460[Call#1], %29.5
BB27   <- [31]
  void                    Visible            v     
  lgl$#-          %27.1 = false
  goto BB15
BB5   <- [31]
  (cls|spec|blt)  %5.0  = LdFun              !v    selectMethod, <0x560a36a42b80>, e29.0
  prom-           %5.1  = MkArg                    unboundValue, .removePreviousCoerce[0x560a38f74aa0]_p1, e29.0
  prom-           %5.2  = MkArg                    unboundValue, .removePreviousCoerce[0x560a38f74aa0]_p2, e29.0
  val?            %5.3  = NamedCall          !v    %5.0("coerce", %5.1, true, false, fdef=%5.2) e29.0   <nil->
  lgl$-           %5.4  = Is                       %5.3, NULL
  lgl$-           %5.5  = Not                d     %5.4, elided
  void                    StVar              lW    prevCoerce, %5.5, e29.0
  val?^ | miss    %5.7  = LdVar              eR    getGeneric, e29.0
  lgl$#-          %5.8  = Identical                %5.7, function(f, mustFind=FALSE, where, package="")|...
  void                    Branch                   %5.8 -> BB33 (if true) | BB34 (if false)
BB15   <- [26, 27, 14]
  lgl$#-          %15.0 = Phi                      %14.2:BB14, %26.1:BB26, %27.1:BB27
  lgl$#-          %15.1 = %15.0
  void                    Return             l     %15.1
BB33   <- [5]
  prom-           %33.0 = MkArg                    unboundValue, .removePreviousCoerce[0x560a38f74aa0]_p3, e29.0
  val?            %33.1 = StaticCall         !v    getGeneric[0x560a3620a7c0]("coerce<-", missingArg, %33.0) { 0 2n } e29.0   <cls>
  lgl$-           %33.2 = Is                       %33.1, NULL
  void                    StVar              lW    rdef, %33.1, e29.0
  val             %33.4 = ChkMissing         e     %33.1
  lgl$#-          %33.5 = CheckTrueFalse     e     %33.2
  void                    Branch                   %33.5 -> BB26 (if true) | BB8 (if false)
BB34   <- [5]
  fs              %34.0 = FrameState         R     0x560a35ee6460+312: [], env=e29.0
  void                    Deopt              !v    %34.0, CallTarget@0x560a361f9460[Call#3], %5.7   !
BB26   <- [33]
  void                    Visible            v     
  lgl$#-          %26.1 = false
  goto BB15
BB8   <- [33]
  (cls|spec|blt)  %8.0  = LdFun              !v    selectMethod, <0x560a36a42b80>, e29.0
  prom-           %8.1  = MkArg                    unboundValue, .removePreviousCoerce[0x560a38f74aa0]_p4, e29.0
  prom-           %8.2  = MkArg                    unboundValue, .removePreviousCoerce[0x560a38f74aa0]_p5, e29.0
  val?            %8.3  = NamedCall          !v    %8.0("coerce<-", %8.1, true, false, fdef=%8.2) e29.0   <nil->
  lgl$-           %8.4  = Is                       %8.3, NULL
  lgl$-           %8.5  = Not                d     %8.4, elided
  void                    StVar              lW    prevRepl, %8.5, e29.0
  val?^ | miss    %8.7  = LdVar              eR    prevCoerce, e29.0
  lgl$#-          %8.8  = IsType                   %8.7 isA lgl$-
  void                    Branch                   %8.8 -> BB35 (if true) | BB36 (if false)
BB35   <- [8]
  lgl$-           %35.0 = CastType           d     dn %8.7
  lgl$-           %35.1 = AsLogical                %35.0
  lgl$#-          %35.2 = Identical                %35.1, true
  void                    Branch                   %35.2 -> BB25 (if true) | BB11 (if false)
BB36   <- [8]
  fs              %36.0 = FrameState         R     0x560a35ee6460+500: [], env=e29.0
  void                    Deopt              !v    %36.0, Typecheck@0x560a361f9460[Type#17], %8.7   !
BB25   <- [35]
  void                    Nop                !     
  lgl$-           %25.1 = %35.1
  goto BB12
BB11   <- [35]
  lgl$-           %11.0 = AsLogical                %8.5
  lgl$-           %11.1 = LOr                      %35.1, %11.0
  lgl$-           %11.2 = %11.1
  goto BB12
BB12   <- [25, 11]
  lgl$-           %12.0 = Phi                      %11.2:BB11, %25.1:BB25
  lgl$-           %12.1 = %12.0
  lgl$#-          %12.2 = CheckTrueFalse     e     %12.1
  void                    Branch                   %12.2 -> BB16 (if true) | BB13 (if false)
BB16   <- [12]
  val?^ | miss    %16.0 = LdVar              eR    prevIs, e29.0
  val?            %16.1 = Force!             !v    %16.0, e29.0   <val?_>
  lgl$#-          %16.2 = IsType                   %16.1 isA val?+
  void                    Branch                   %16.2 -> BB37 (if true) | BB38 (if false)
BB13   <- [12]
  void                    Visible            v     
  lgl$#-          %13.1 = false
  goto BB14
BB37   <- [16]
  val?+           %37.0 = CastType           d     dn %16.1   <val?_>
  lgl             %37.1 = Not                wed   %37.0, elided
  lgl$#-          %37.2 = CheckTrueFalse     we    %37.1
  void                    Branch                   %37.2 -> BB24 (if true) | BB19 (if false)
BB38   <- [16]
  fs              %38.0 = FrameState         R     0x560a35ee6460+563: [%16.1], env=e29.0
  void                    Deopt              !v    %38.0, Typecheck@0x560a361f9460[Type#19], %16.1   !
BB14   <- [13, 21]
  lgl$#-          %14.0 = Phi                      %13.1:BB13, %21.1:BB21
  lgl$#-          %14.1 = %14.0
  lgl$#-          %14.2 = %14.1
  goto BB15
BB24   <- [37]
  (cls|spec|blt)  %24.0 = LdFun              !v    warning, e29.0
  fs              %24.1 = FrameState         R     0x560a35ee6460+585: [%24.0], env=e29.0
  void                    Deopt              !v    %24.1, DeadCall@0x560a361f9460[Call#5], %24.0   !
BB19   <- [37]
  val?^ | miss    %19.0 = LdVar              eR    prevCoerce, e29.0
  val?            %19.1 = Force!             !v    %19.0, e29.0   <val?_>
  lgl$#-          %19.2 = CheckTrueFalse     we    %19.1
  void                    Branch                   %19.2 -> BB23 (if true) | BB20 (if false)
BB23   <- [19]
  (cls|spec|blt)  %23.0 = LdFun              !v    setMethod, e29.0
  fs              %23.1 = FrameState         R     0x560a35ee6460+656: [%23.0], env=e29.0
  void                    Deopt              !v    %23.1, DeadCall@0x560a361f9460[Call#9], %23.0   !
BB20   <- [19]
  val?^ | miss    %20.0 = LdVar              eR    prevRepl, e29.0
  val?            %20.1 = Force!             !v    %20.0, e29.0   <val?_>
  lgl$#-          %20.2 = CheckTrueFalse     we    %20.1
  void                    Branch                   %20.2 -> BB22 (if true) | BB21 (if false)
BB22   <- [20]
  (cls|spec|blt)  %22.0 = LdFun              !v    setMethod, e29.0
  fs              %22.1 = FrameState         R     0x560a35ee6460+745: [%22.0], env=e29.0
  void                    Deopt              !v    %22.1, DeadCall@0x560a361f9460[Call#10], %22.0   !
BB21   <- [20]
  void                    Visible            v     
  lgl$#-          %21.1 = true
  goto BB14
Prom 0:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    sig, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    cdef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 3:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 4:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    sig, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 5:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    rdef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3

│ .removePreviousCoerce[0x560a38f74aa0]                                        │
└──────────────────────────────────────────────────────────────────────────────┘
