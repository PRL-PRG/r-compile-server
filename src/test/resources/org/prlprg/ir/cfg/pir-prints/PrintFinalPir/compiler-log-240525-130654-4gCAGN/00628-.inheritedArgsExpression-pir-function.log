
┌──────────────────────────────────────────────────────────────────────────────┐
│ .inheritedArgsExpression[0x560a356fe3a0]                                     │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch                                      │
│ Properties:                                                                  │
├────── Final PIR Version
.inheritedArgsExpression[0x560a356fe3a0]
BB0
  val?^           %0.0  = LdArg                    2
  val?^           %0.1  = LdArg                    1
  val?^           %0.2  = LdArg                    0
  env             e0.3  = MkEnv              l     target=%0.2, defined=%0.1, body=%0.0, parent=<env 0x560a342f8378>, context 1
  (cls|spec|blt)  %0.4  = LdFun              !v    substitute, <0x560a33cf0468>, <env 0x560a342f8378>
  prom-           %0.5  = MkArg                    unboundValue, .inheritedArgsExpression[0x560a356fe3a0]_p1, e0.3
  val?            %0.6  = Call               !v    %0.4(nil, %0.5) e0.3   <code->
  void                    StVar              lW    expr, %0.6, e0.3
  val?^ | miss    %0.8  = LdVar              eR    names, e0.3
  lgl$#-          %0.9  = Identical                <blt names>, %0.8   <true>
  void                    Branch                   %0.9 -> BB37 (if true) | BB38 (if false)
BB37   <- [0]
  val?^ | miss    %37.0 = LdVar              eR    defined, e0.3
  val?            %37.1 = Force!<lazy>       !v    %37.0, e0.3   <str$>
  val?            %37.2 = CallBuiltin        !v    names(%37.1) e0.3   <str$->
  void                    StVar              lW    args, %37.2, e0.3
  val?^ | miss    %37.4 = LdVar              eR    seq_along, e0.3
  lgl$#-          %37.5 = Identical                <blt seq_along>, %37.4   <true>
  void                    Branch                   %37.5 -> BB39 (if true) | BB40 (if false)
BB38   <- [0]
  fs              %38.0 = FrameState         R     0x560a36338a70+51: [], env=e0.3
  void                    Deopt              !v    %38.0, DeadBranchReached@0x560a363a9810[Test#0], %0.9   !
BB39   <- [37]
  val?^ | miss    %39.0 = LdVar              eR    defined, e0.3
  val?            %39.1 = Force!<wrapped>    !v    %39.0, e0.3   <str$>
  val?            %39.2 = CallBuiltin        !v    seq_along(%39.1) e0.3   <int$->
  lgl$#-          %39.3 = IsType                   %39.2 isA int$-
  void                    Branch                   %39.3 -> BB41 (if true) | BB42 (if false)
BB40   <- [37]
  fs              %40.0 = FrameState         R     0x560a36338a70+156: [], env=e0.3
  void                    Deopt              !v    %40.0, DeadBranchReached@0x560a363a9810[Test#1], %37.5   !
BB41   <- [39]
  int$-           %41.0 = CastType           d     dn %39.2
  int$-           %41.1 = Inc                      0L
  lgl$-           %41.2 = Lt                 d     1L, %41.1, elided   <false>
  lgl$#-          %41.3 = Identical                %41.2, true
  void                    Branch                   %41.3 -> BB44 (if true) | BB43 (if false)
BB42   <- [39]
  void                    Nop                !     
  val?            %42.1 = %39.2
  dr              %42.2 = Typecheck@0x560a363a9810[Type#7]
  goto BB5
BB44   <- [41]
  void                    Nop                !     
  lgl$#-          %44.1 = %41.3
  dr              %44.2 = DeadBranchReached@0x560a363a9810[Test#2]
  goto BB5
BB43   <- [41]
  int$-           %43.0 = Extract2_1D        wed   %41.0, %41.1, elided
  void                    StVar              lW    i, %43.0, e0.3
  (cls|spec|blt)  %43.2 = LdFun              !v    extends, <0x560a35be1f20>, e0.3
  prom-           %43.3 = MkArg                    unboundValue, .inheritedArgsExpression[0x560a356fe3a0]_p2, e0.3
  prom-           %43.4 = MkArg                    unboundValue, .inheritedArgsExpression[0x560a356fe3a0]_p8, e0.3
  val?            %43.5 = NamedCall          !v    %43.2(%43.3, %43.4, fullInfo=true) e0.3   <(lgl|other)>
  void                    StVar              lW    ei, %43.5, e0.3
  val?^ | miss    %43.7 = LdVar              eR    is, e0.3
  lgl$#-          %43.8 = Identical                %43.7, function(object, class2) <(rir::DispatchTable*|...
  void                    Branch                   %43.8 -> BB45 (if true) | BB46 (if false)
BB5   <- [42, 44]
  val?^ | miss    %5.0  = Phi                      %42.1:BB42, %44.1:BB44
  val?^ | miss    %5.1  = %5.0
  dr              %5.2  = Phi                      %42.2:BB42, %44.2:BB44
  dr              %5.3  = %5.2
  fs              %5.4  = FrameState         R     0x560a36338a70+247: [%39.2], env=e0.3
  void                    Deopt              !v    %5.4, %5.3, %5.1   !
BB45   <- [43]
  prom-           %45.0 = MkArg                    unboundValue, .inheritedArgsExpression[0x560a356fe3a0]_p13 (!refl), e0.3
  val?            %45.1 = Call               !v    function(object, class2) <(rir::DispatchTable*|...(%45.0, "SClassExtension") e0.3   <lgl$->
  lgl$#-          %45.2 = IsType                   %45.1 isA lgl$-
  void                    Branch                   %45.2 -> BB47 (if true) | BB48 (if false)
BB46   <- [43]
  fs              %46.0 = FrameState         R     0x560a36338a70+360: [%41.0, 1L, %41.1], env=e0.3
  void                    Deopt              !v    %46.0, CallTarget@0x560a363a9810[Call#9], %43.7   !
BB47   <- [45]
  lgl$-           %47.0 = CastType           d     dn %45.1
  lgl$-           %47.1 = AsLogical                %47.0
  lgl$#-          %47.2 = Identical                %47.1, false
  void                    Branch                   %47.2 -> BB35 (if true) | BB11 (if false)
BB48   <- [45]
  fs              %48.0 = FrameState         R     0x560a36338a70+397: [%41.0, 1L, %41.1, %45.1], env=e0.3
  void                    Deopt              !v    %48.0, Typecheck@0x560a363a9810[Type#27], %45.1   !
BB35   <- [47]
  void                    Nop                !     
  lgl$-           %35.1 = %47.1
  goto BB14
BB11   <- [47]
  (cls|spec|blt)  %11.0 = LdFun              !v    @, <0x560a33cf0bd8>, e0.3
  prom-           %11.1 = MkArg                    unboundValue, .inheritedArgsExpression[0x560a356fe3a0]_p14, e0.3
  prom-           %11.2 = MkArg                    unboundValue, .inheritedArgsExpression[0x560a356fe3a0]_p15, e0.3
  val?            %11.3 = Call               !v    %11.0(%11.1, %11.2) e0.3   <lgl$->
  lgl$#-          %11.4 = IsType                   %11.3 isA lgl$-
  void                    Branch                   %11.4 -> BB49 (if true) | BB50 (if false)
BB14   <- [35, 49]
  lgl$-           %14.0 = Phi                      %49.4:BB49, %35.1:BB35
  lgl$-           %14.1 = %14.0
  lgl$#-          %14.2 = CheckTrueFalse     e     %14.1
  void                    Branch                   %14.2 -> BB30 (if true) | BB15 (if false)
BB49   <- [11]
  lgl$-           %49.0 = CastType           d     dn %11.3
  lgl$-           %49.1 = Not                d     %49.0, elided
  lgl$-           %49.2 = AsLogical                %49.1
  lgl$-           %49.3 = LAnd                     %47.1, %49.2
  lgl$-           %49.4 = %49.3
  goto BB14
BB50   <- [11]
  fs              %50.0 = FrameState         R     0x560a36338a70+446: [%41.0, 1L, %41.1, %47.1, %11.3], env=e0.3
  void                    Deopt              !v    %50.0, Typecheck@0x560a363a9810[Type#30], %11.3   !
BB30   <- [14]
  (cls|spec|blt)  %30.0 = LdFun              !v    substitute, <0x560a33cf0468>, e0.3
  prom-           %30.1 = MkArg                    unboundValue, .inheritedArgsExpression[0x560a356fe3a0]_p16, e0.3
  prom-           %30.2 = MkArg                    unboundValue, .inheritedArgsExpression[0x560a356fe3a0]_p19, e0.3
  val?            %30.3 = Call               !v    %30.0(%30.1, %30.2) e0.3   <code->
  val?^ | miss    %30.4 = LdVar              eR    expr !upd, e0.3
  lgl$#-          %30.5 = IsType                   %30.4 isA val?~- | miss
  void                    Branch                   %30.5 -> BB51 (if true) | BB52 (if false)
BB15   <- [14]
  void                    Nop                !     
  goto BB16
BB51   <- [30]
  val?~- | miss   %51.0 = CastType           d     dn %30.4
  val?-           %51.1 = Force!<value>            %51.0,    <code->
  val?^ | miss    %51.2 = LdVar              eR    length, e0.3
  lgl$#-          %51.3 = Identical                <blt length>, %51.2   <true>
  void                    Branch                   %51.3 -> BB53 (if true) | BB54 (if false)
BB52   <- [30]
  void                    Nop                !     
  val?^ | miss    %52.1 = %30.4
  dr              %52.2 = Typecheck@0x560a363a9810[Type#46]
  goto BB31
BB16   <- [15, 59]
  int$-           %16.0 = Inc                      %41.1
  lgl$-           %16.1 = Lt                 d     1L, %16.0, elided
  lgl$#-          %16.2 = Identical                %16.1, true
  void                    Branch                   %16.2 -> BB20 (if true) | BB19 (if false)
BB53   <- [51]
  (int|real)$-    %53.0 = CallSafeBuiltin    wed   length(%51.1)    <int$->
  lgl$#-          %53.1 = IsType                   %53.0 isA int$-
  void                    Branch                   %53.1 -> BB55 (if true) | BB56 (if false)
BB54   <- [51]
  void                    Nop                !     
  lgl$#-          %54.1 = %51.3
  dr              %54.2 = DeadBranchReached@0x560a363a9810[Test#8]
  goto BB31
BB31   <- [52, 54]
  val?^ | miss    %31.0 = Phi                      %52.1:BB52, %54.1:BB54
  val?^ | miss    %31.1 = %31.0
  dr              %31.2 = Phi                      %52.2:BB52, %54.2:BB54
  dr              %31.3 = %31.2
  fs              %31.4 = FrameState         R     0x560a36338a70+502: [%41.0, 1L, %41.1, %30.3], env=e0.3
  void                    Deopt              !v    %31.4, %31.3, %31.1   !
BB20   <- [16]
  val?^ | miss    %20.0 = LdVar              eR    length, e0.3
  lgl$#-          %20.1 = Identical                <blt length>, %20.0   <true>
  void                    Branch                   %20.1 -> BB57 (if true) | BB58 (if false)
BB19   <- [16]
  int$-           %19.0 = Extract2_1D        wed   %41.0, %16.0, elided
  void                    StVar              lW    i, %19.0, e0.3
  (cls|spec|blt)  %19.2 = LdFun              !v    extends, e0.3
  fs              %19.3 = FrameState         R     0x560a36338a70+674: [%41.0, 1L, %16.0, %19.2], env=e0.3
  void                    Deopt              !v    %19.3, DeadCall@0x560a363a9810[Call#17], %19.2   !
BB55   <- [53]
  int$-           %55.0 = CastType           d     dn %53.0
  int$-           %55.1 = Add                d     %55.0, 1L, elided   <int$->
  lgl$#-          %55.2 = IsType                   %30.3 isA val?-
  void                    Branch                   %55.2 -> BB59 (if true) | BB60 (if false)
BB56   <- [53]
  void                    Nop                !     
  (int|real)$-    %56.1 = %53.0
  dr              %56.2 = Typecheck@0x560a363a9810[Type#49]
  goto BB33
BB57   <- [20]
  val?^ | miss    %57.0 = LdVar              eR    expr, e0.3
  lgl$#-          %57.1 = IsType                   %57.0 isA val?~- | miss
  void                    Branch                   %57.1 -> BB61 (if true) | BB62 (if false)
BB58   <- [20]
  void                    Nop                !     
  lgl$#-          %58.1 = %20.1
  dr              %58.2 = DeadBranchReached@0x560a363a9810[Test#15]
  goto BB17
BB59   <- [55]
  val?-           %59.0 = CastType           d     dn %30.3   <code->
  val?-           %59.1 = Subassign2_1D      wed   %59.0, %51.1, %55.1, elided
  void                    StVar              lW    expr, %59.1, e0.3
  goto BB16
BB60   <- [55]
  void                    Nop                !     
  val?            %60.1 = %30.3
  dr              %60.2 = Typecheck@0x560a363a9810[Type#45]
  goto BB33
BB33   <- [56, 60]
  val?^ | miss    %33.0 = Phi                      %56.1:BB56, %60.1:BB60
  val?^ | miss    %33.1 = %33.0
  dr              %33.2 = Phi                      %56.2:BB56, %60.2:BB60
  dr              %33.3 = %33.2
  fs              %33.4 = FrameState         R     0x560a36338a70+613: [%41.0, 1L, %41.1, %30.3, %51.1, %53.0], env=e0.3
  void                    Deopt              !v    %33.4, %33.3, %33.1   !
BB61   <- [57]
  val?~- | miss   %61.0 = CastType           d     dn %57.0
  val?-           %61.1 = Force!<value>            %61.0,    <code->
  (int|real)$-    %61.2 = CallSafeBuiltin    wed   length(%61.1)    <int$->
  lgl$#-          %61.3 = IsType                   %61.2 isA int$-
  void                    Branch                   %61.3 -> BB63 (if true) | BB64 (if false)
BB62   <- [57]
  void                    Nop                !     
  val?^ | miss    %62.1 = %57.0
  dr              %62.2 = Typecheck@0x560a363a9810[Type#95]
  goto BB17
BB17   <- [58, 62]
  val?^ | miss    %17.0 = Phi                      %58.1:BB58, %62.1:BB62
  val?^ | miss    %17.1 = %17.0
  dr              %17.2 = Phi                      %58.2:BB58, %62.2:BB62
  dr              %17.3 = %17.2
  fs              %17.4 = FrameState         R     0x560a36338a70+640: [%41.0, 1L, %41.1], env=e0.3
  void                    Deopt              !v    %17.4, %17.3, %17.1   !
BB63   <- [61]
  int$-           %63.0 = CastType           d     dn %61.2
  lgl$-           %63.1 = Gt                 d     %63.0, 1L, elided   <lgl$->
  lgl$#-          %63.2 = CheckTrueFalse     e     %63.1
  void                    Branch                   %63.2 -> BB25 (if true) | BB23 (if false)
BB64   <- [61]
  void                    Nop                !     
  (int|real)$-    %64.1 = %61.2
  dr              %64.2 = Typecheck@0x560a363a9810[Type#96]
  goto BB21
BB25   <- [63]
  val?^ | miss    %25.0 = LdVar              eR    list, e0.3
  lgl$#-          %25.1 = Identical                <blt list>, %25.0   <true>
  void                    Branch                   %25.1 -> BB65 (if true) | BB66 (if false)
BB23   <- [63]
  void                    Visible            v     
  nil-            %23.1 = nil
  goto BB24
BB21   <- [64, 66]
  val?^ | miss    %21.0 = Phi                      %64.1:BB64, %66.1:BB66
  val?^ | miss    %21.1 = %21.0
  dr              %21.2 = Phi                      %64.2:BB64, %66.2:BB66
  dr              %21.3 = %21.2
  fs              %21.4 = FrameState         R     0x560a36338a70+1118: [%61.2], env=e0.3
  void                    Deopt              !v    %21.4, %21.3, %21.1   !
BB65   <- [25]
  val?^ | miss    %65.0 = LdVar              eR    body, e0.3
  val?            %65.1 = Force!<lazy>       !v    %65.0, e0.3   <code->
  val+            %65.2 = CallSafeBuiltin    wed   list(%65.1)    <vec$->
  val?^ | miss    %65.3 = LdVar              eR    expr !upd, e0.3
  lgl$#-          %65.4 = IsType                   %65.3 isA val?~- | miss
  void                    Branch                   %65.4 -> BB67 (if true) | BB68 (if false)
BB66   <- [25]
  void                    Nop                !     
  lgl$#-          %66.1 = %25.1
  dr              %66.2 = DeadBranchReached@0x560a363a9810[Test#16]
  goto BB21
BB24   <- [23, 71]
  val?+           %24.0 = Phi                      %23.1:BB23, %71.6:BB71
  val?+           %24.1 = %24.0
  void                    Return             l     %24.1
BB67   <- [65]
  val?~- | miss   %67.0 = CastType           d     dn %65.3
  val?-           %67.1 = Force!<value>            %67.0,    <code->
  val?^ | miss    %67.2 = LdVar              eR    length, e0.3
  lgl$#-          %67.3 = Identical                <blt length>, %67.2   <true>
  void                    Branch                   %67.3 -> BB69 (if true) | BB70 (if false)
BB68   <- [65]
  void                    Nop                !     
  val?^ | miss    %68.1 = %65.3
  dr              %68.2 = Typecheck@0x560a363a9810[Type#101]
  goto BB26
BB69   <- [67]
  (int|real)$-    %69.0 = CallSafeBuiltin    wed   length(%67.1)    <int$->
  lgl$#-          %69.1 = IsType                   %69.0 isA int$-
  void                    Branch                   %69.1 -> BB71 (if true) | BB72 (if false)
BB70   <- [67]
  void                    Nop                !     
  lgl$#-          %70.1 = %67.3
  dr              %70.2 = DeadBranchReached@0x560a363a9810[Test#17]
  goto BB26
BB26   <- [68, 70]
  val?^ | miss    %26.0 = Phi                      %68.1:BB68, %70.1:BB70
  val?^ | miss    %26.1 = %26.0
  dr              %26.2 = Phi                      %68.2:BB68, %70.2:BB70
  dr              %26.3 = %26.2
  fs              %26.4 = FrameState         R     0x560a36338a70+1243: [%65.2], env=e0.3
  void                    Deopt              !v    %26.4, %26.3, %26.1   !
BB71   <- [69]
  int$-           %71.0 = CastType           d     dn %69.0
  int$-           %71.1 = Add                d     %71.0, 1L, elided   <int$->
  val?+           %71.2 = Subassign1_1D      wed   %65.2, %67.1, %71.1, elided   <code->
  void                    StVar              lW    expr, %71.2, e0.3
  val+            %71.4 = ChkMissing         e     %71.2
  void                    Visible            v     
  val?+           %71.6 = %71.2
  goto BB24
BB72   <- [69]
  fs              %72.0 = FrameState         R     0x560a36338a70+1354: [%65.2, %67.1, %69.0], env=e0.3
  void                    Deopt              !v    %72.0, Typecheck@0x560a363a9810[Type#104], %69.0   !
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     list, e0.0
  val?            %0.2  = NamedCall          !     %0.1(DUMMY="") e0.0   <val?_>
  void                    Return             l     %0.2
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     setPackageSlot, <0x560a35cd9b48>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .inheritedArgsExpression[0x560a356fe3a0]_p3, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .inheritedArgsExpression[0x560a356fe3a0]_p5, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <str$+>
  void                    Return             l     %0.4
Prom 3:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    target, e0.0
  val?            %0.2  = Force<wrapped>     !v    %0.1, e0.0   <str$>
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <false>
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    i, e0.0
  val?            %2.1  = Force              !v    %2.0, e0.0   <val?_>
  val?            %2.2  = %2.1
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, .inheritedArgsExpression[0x560a356fe3a0]_p4, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.2:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract2_1D        !v    %0.2, %3.1, e0.0   <str$->
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 4:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    i, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <int$->
  void                    Return             l     %0.3
Prom 5:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !v    packageSlot, <0x560a35b73f48>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .inheritedArgsExpression[0x560a356fe3a0]_p6, e0.0
  val?            %0.3  = Call               !v    %0.1(%0.2) e0.0   <str$->
  lgl$#-          %0.4  = IsType                   %0.3 isA val+   <true>
  void                    Branch                   %0.4 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    i, e0.0
  val?            %2.1  = Force<value>       !v    %2.0, e0.0   <int$->
  val?            %2.2  = %2.1
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, .inheritedArgsExpression[0x560a356fe3a0]_p7, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.2:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract2_1D        !v    %0.3, %3.1, e0.0   <str$->
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 6:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    target, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str$>
  void                    Return             l     %0.3
Prom 7:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    i, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 8:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     setPackageSlot, <0x560a35cd9b48>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .inheritedArgsExpression[0x560a356fe3a0]_p9, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .inheritedArgsExpression[0x560a356fe3a0]_p11, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <str$+>
  void                    Return             l     %0.4
Prom 9:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    defined, e0.0
  val?            %0.2  = Force<wrapped>     !v    %0.1, e0.0   <str$>
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <false>
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    i, e0.0
  val?            %2.1  = Force              !v    %2.0, e0.0   <val?_>
  val?            %2.2  = %2.1
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, .inheritedArgsExpression[0x560a356fe3a0]_p10, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.2:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract2_1D        !v    %0.2, %3.1, e0.0   <str$->
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 10:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    i, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <int$->
  void                    Return             l     %0.3
Prom 11:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     packageSlot, <0x560a35b73f48>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .inheritedArgsExpression[0x560a356fe3a0]_p12, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <str$->
  void                    Return             l     %0.3
Prom 12:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    defined, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$>
  void                    Return             l     %0.3
Prom 13:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    ei, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <(lgl|other)>
  void                    Return             l     %0.3
Prom 14:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    ei, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 15:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    simple, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 16:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !v    as, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .inheritedArgsExpression[0x560a356fe3a0]_p17, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .inheritedArgsExpression[0x560a356fe3a0]_p18, e0.0
  val?            %0.4  = NamedCall          !v    %0.1(%0.2, %0.3, strict=false) e0.0   <val?_>
  void                    Invisible          v     
  void                    StVar              lW    ARG, %0.4, e0.0
  void                    Return             l     %0.4
Prom 17:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    ARG, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 18:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    DEFINED, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 19:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     list, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .inheritedArgsExpression[0x560a356fe3a0]_p20, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .inheritedArgsExpression[0x560a356fe3a0]_p23, e0.0
  val?            %0.4  = NamedCall          !     %0.1(ARG=%0.2, DEFINED=%0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 20:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     as.name, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .inheritedArgsExpression[0x560a356fe3a0]_p21, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 21:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    args, e0.0
  val?            %0.2  = Force              !v    %0.1, e0.0   <val?_>
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <@?>
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    i, e0.0
  val?            %2.1  = Force              !v    %2.0, e0.0   <val?_>
  val?            %2.2  = %2.1
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, .inheritedArgsExpression[0x560a356fe3a0]_p22, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.2:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract2_1D        !v    %0.2, %3.1, e0.0   <val?_>
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 22:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    i, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 23:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     as.character, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .inheritedArgsExpression[0x560a356fe3a0]_p24, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 24:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    defined, e0.0
  val?            %0.2  = Force              !v    %0.1, e0.0   <val?_>
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <@?>
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    i, e0.0
  val?            %2.1  = Force              !v    %2.0, e0.0   <val?_>
  val?            %2.2  = %2.1
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, .inheritedArgsExpression[0x560a356fe3a0]_p25, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.2:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract2_1D        !v    %0.2, %3.1, e0.0   <val?_>
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 25:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    i, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3

│ .inheritedArgsExpression[0x560a356fe3a0]                                     │
└──────────────────────────────────────────────────────────────────────────────┘
