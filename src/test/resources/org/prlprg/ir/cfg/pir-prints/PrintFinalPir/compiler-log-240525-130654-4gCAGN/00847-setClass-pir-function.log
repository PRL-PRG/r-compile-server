
┌──────────────────────────────────────────────────────────────────────────────┐
│ setClass[0x560a364a6db0]                                                     │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;Eager0,NonRefl0,!Obj0 miss: 10       │
│ Properties:                                                                  │
├────── Final PIR Version
setClass[0x560a364a6db0]
BB0
  val?^           %0.0  = LdArg                    1
  val?~+          %0.1  = LdArg                    0
  env             e0.2  = MkEnv              l     Class=%0.1, representation=%0.0, prototype(miss)=nil, contains(miss)=missingArg, validity(miss)=missingArg, access(miss)=missingArg, where(miss)=missingArg, version(miss)=missingArg, sealed(miss)=missingArg, package(miss)=missingArg, S3methods(miss)=missingArg, slots(miss)=missingArg, parent=<env 0x560a342f8378>, context 1
  prom-           %0.3  = MkArg                    unboundValue, setClass[0x560a364a6db0]_p1, e0.2
  val?^ | miss    %0.4  = CastType                 up %0.3
  void                    StArg              lW    contains, %0.4, e0.2
  void                    StArg              lW    validity, nil, e0.2
  prom-           %0.7  = MkArg                    unboundValue, setClass[0x560a364a6db0]_p3, e0.2
  val?^ | miss    %0.8  = CastType                 up %0.7
  void                    StArg              lW    access, %0.8, e0.2
  prom-           %0.10 = MkArg                    unboundValue, setClass[0x560a364a6db0]_p4, e0.2
  val?^ | miss    %0.11 = CastType                 up %0.10
  void                    StArg              lW    where, %0.11, e0.2
  prom-           %0.13 = MkArg                    unboundValue, setClass[0x560a364a6db0]_p6, e0.2
  val?^ | miss    %0.14 = CastType                 up %0.13
  void                    StArg              lW    version, %0.14, e0.2
  void                    StArg              lW    sealed, false, e0.2
  prom-           %0.17 = MkArg                    unboundValue, setClass[0x560a364a6db0]_p8, e0.2
  val?^ | miss    %0.18 = CastType                 up %0.17
  void                    StArg              lW    package, %0.18, e0.2
  void                    StArg              lW    S3methods, false, e0.2
  val?^ | miss    %0.21 = LdVar              eR    getClassDef, <env 0x560a342f8378>
  lgl$#-          %0.22 = Identical                %0.21, function(Class, where=topenv(parent.frame()), |...
  void                    Branch                   %0.22 -> BB155 (if true) | BB156 (if false)
BB155   <- [0]
  prom-           %155.0 = MkArg                    unboundValue, setClass[0x560a364a6db0]_p11 (!refl), e0.2
  prom-           %155.1 = MkArg                    unboundValue, setClass[0x560a364a6db0]_p12, e0.2
  val?            %155.2 = StaticCall         !v    getClassDef[0x560a35741c70](%155.0, %155.1) e0.2   <nil->
  void                    StVar              lW    oldDef, %155.2, e0.2
  val?^ | miss    %155.4 = LdVar              eR    is, e0.2
  lgl$#-          %155.5 = Identical                %155.4, function(object, class2) <(rir::DispatchTable*|...
  void                    Branch                   %155.5 -> BB157 (if true) | BB158 (if false)
BB156   <- [0]
  fs              %156.0 = FrameState         R     0x560a373a26e0+0: [], env=e0.2
  void                    Deopt              !v    %156.0, CallTarget@0x560a378953a0[Call#7], %0.21
BB157   <- [155]
  prom-           %157.0 = MkArg                    unboundValue, setClass[0x560a364a6db0]_p13 (!refl), e0.2
  val?            %157.1 = Call               !v    function(object, class2) <(rir::DispatchTable*|...(%157.0, "classRepresentation") e0.2   <lgl$->
  lgl$#-          %157.2 = IsType                   %157.1 isA lgl$-
  void                    Branch                   %157.2 -> BB159 (if true) | BB160 (if false)
BB158   <- [155]
  fs              %158.0 = FrameState         R     0x560a373a26e0+51: [], env=e0.2
  void                    Deopt              !v    %158.0, CallTarget@0x560a378953a0[Call#8], %155.4   !
BB159   <- [157]
  lgl$-           %159.0 = CastType           d     dn %157.1
  lgl$-           %159.1 = AsLogical                %159.0
  lgl$#-          %159.2 = Identical                %159.1, false
  void                    Branch                   %159.2 -> BB8 (if true) | BB7 (if false)
BB160   <- [157]
  void                    Nop                !     
  val?            %160.1 = %157.1
  dr              %160.2 = Typecheck@0x560a378953a0[Type#12]
  goto BB5
BB8   <- [159]
  lgl$#-          %8.0  = CheckTrueFalse     e     %159.1
  void                    Branch                   %8.0 -> BB153 (if true) | BB9 (if false)
BB7   <- [159]
  (cls|spec|blt)  %7.0  = LdFun              !v    @, e0.2
  fs              %7.1  = FrameState         R     0x560a373a26e0+105: [%159.1, %7.0], env=e0.2
  void                    Deopt              !v    %7.1, DeadCall@0x560a378953a0[Call#9], %7.0   !
BB5   <- [160, 162]
  val?^ | miss    %5.0  = Phi                      %160.1:BB160, %162.1:BB162
  val?^ | miss    %5.1  = %5.0
  dr              %5.2  = Phi                      %160.2:BB160, %162.2:BB162
  dr              %5.3  = %5.2
  fs              %5.4  = FrameState         R     0x560a373a26e0+88: [%157.1], env=e0.2
  void                    Deopt              !v    %5.4, %5.3, %5.1   !
BB153   <- [8]
  (cls|spec|blt)  %153.0 = LdFun              !v    stop, e0.2
  fs              %153.1 = FrameState         R     0x560a373a26e0+160: [%153.0], env=e0.2
  void                    Deopt              !v    %153.1, DeadCall@0x560a378953a0[Call#10], %153.0   !
BB9   <- [8]
  lgl$-           %9.0  = Missing            eR    slots, e0.2
  lgl$-           %9.1  = Not                d     %9.0, elided
  lgl$#-          %9.2  = CheckTrueFalse     e     %9.1
  void                    Branch                   %9.2 -> BB150 (if true) | BB10 (if false)
BB150   <- [9]
  lgl$-           %150.0 = Missing            eR    representation, e0.2
  lgl$-           %150.1 = Not                d     %150.0, elided
  lgl$#-          %150.2 = CheckTrueFalse     e     %150.1
  void                    Branch                   %150.2 -> BB152 (if true) | BB151 (if false)
BB10   <- [9]
  val?^ | miss    %10.0 = LdVar              eR    is, e0.2
  lgl$#-          %10.1 = Identical                %10.0, function(object, class2) <(rir::DispatchTable*|...
  void                    Branch                   %10.1 -> BB161 (if true) | BB162 (if false)
BB152   <- [150]
  (cls|spec|blt)  %152.0 = LdFun              !v    stop, e0.2
  fs              %152.1 = FrameState         R     0x560a373a26e0+1662: [%152.0], env=e0.2
  void                    Deopt              !v    %152.1, DeadCall@0x560a378953a0[Call#31], %152.0   !
BB151   <- [150]
  (cls|spec|blt)  %151.0 = LdFun              !v    inferProperties, e0.2
  fs              %151.1 = FrameState         R     0x560a373a26e0+1695: [%151.0], env=e0.2
  void                    Deopt              !v    %151.1, DeadCall@0x560a378953a0[Call#32], %151.0   !
BB161   <- [10]
  prom-           %161.0 = MkArg                    unboundValue, setClass[0x560a364a6db0]_p14, e0.2
  val?            %161.1 = Call               !v    function(object, class2) <(rir::DispatchTable*|...(%161.0, "classRepresentation") e0.2   <lgl$->
  lgl$#-          %161.2 = IsType                   %161.1 isA lgl$-
  void                    Branch                   %161.2 -> BB163 (if true) | BB164 (if false)
BB162   <- [10]
  void                    Nop                !     
  val?^ | miss    %162.1 = %10.0
  dr              %162.2 = CallTarget@0x560a378953a0[Call#13]
  goto BB5
BB163   <- [161]
  lgl$-           %163.0 = CastType           d     dn %161.1
  lgl$#-          %163.1 = CheckTrueFalse     e     %163.0
  void                    Branch                   %163.1 -> BB130 (if true) | BB13 (if false)
BB164   <- [161]
  void                    Nop                !     
  val?            %164.1 = %161.1
  dr              %164.2 = Typecheck@0x560a378953a0[Type#20]
  goto BB11
BB130   <- [163]
  val?^ | miss    %130.0 = LdVar              eR    representation, e0.2
  val?            %130.1 = Force!             !v    %130.0, e0.2   <val?_>
  void                    StVar              lW    classDef, %130.1, e0.2
  lgl$-           %130.3 = Missing            eR    prototype, e0.2
  lgl$-           %130.4 = AsLogical                %130.3
  lgl$#-          %130.5 = Identical                %130.4, false
  void                    Branch                   %130.5 -> BB149 (if true) | BB131 (if false)
BB13   <- [163]
  val?^ | miss    %13.0 = LdVar              eR    is.character, e0.2
  lgl$#-          %13.1 = Identical                <blt is.character>, %13.0   <true>
  void                    Branch                   %13.1 -> BB165 (if true) | BB166 (if false)
BB11   <- [164, 166]
  val?^ | miss    %11.0 = Phi                      %164.1:BB164, %166.1:BB166
  val?^ | miss    %11.1 = %11.0
  dr              %11.2 = Phi                      %164.2:BB164, %166.2:BB166
  dr              %11.3 = %11.2
  fs              %11.4 = FrameState         R     0x560a373a26e0+251: [%161.1], env=e0.2
  void                    Deopt              !v    %11.4, %11.3, %11.1   !
BB149   <- [130]
  void                    Nop                !     
  lgl$-           %149.1 = %130.4
  goto BB132
BB131   <- [130]
  lgl$-           %131.0 = Missing            eR    contains, e0.2
  lgl$-           %131.1 = AsLogical                %131.0
  lgl$-           %131.2 = LAnd                     %130.4, %131.1
  lgl$-           %131.3 = %131.2
  goto BB132
BB165   <- [13]
  val?^ | miss    %165.0 = LdVar              eR    representation, e0.2
  val?            %165.1 = Force!<wrapped>    !v    %165.0, e0.2   <vec+>
  lgl$#-          %165.2 = CallSafeBuiltin    wed   is.character(%165.1)    <lgl$->
  void                    Branch                   %165.2 -> BB125 (if true) | BB14 (if false)
BB166   <- [13]
  void                    Nop                !     
  lgl$#-          %166.1 = %13.1
  dr              %166.2 = DeadBranchReached@0x560a378953a0[Test#0]
  goto BB11
BB132   <- [131, 149]
  lgl$-           %132.0 = Phi                      %131.3:BB131, %149.1:BB149
  lgl$-           %132.1 = %132.0
  lgl$-           %132.2 = AsLogical                %132.1
  lgl$#-          %132.3 = Identical                %132.2, false
  void                    Branch                   %132.3 -> BB148 (if true) | BB133 (if false)
BB125   <- [165]
  val?^ | miss    %125.0 = LdVar              eR    length, e0.2
  lgl$#-          %125.1 = Identical                <blt length>, %125.0   <@?>
  void                    Branch                   %125.1 -> BB127 (if true) | BB126 (if false)
BB14   <- [165]
  void                    Nop                !     
  lgl$#-          %14.1 = %165.2
  goto BB15
BB148   <- [132]
  void                    Nop                !     
  lgl$-           %148.1 = %132.2
  goto BB134
BB133   <- [132]
  lgl$-           %133.0 = Missing            eR    validity, e0.2
  lgl$-           %133.1 = AsLogical                %133.0
  lgl$-           %133.2 = LAnd                     %132.2, %133.1
  lgl$-           %133.3 = %133.2
  goto BB134
BB127   <- [125]
  val?^ | miss    %127.0 = LdVar              eR    representation, e0.2
  val?            %127.1 = Force!             !v    %127.0, e0.2   <val?_>
  lgl$#-          %127.2 = IsType                   %127.1 isA val?+
  void                    Branch                   %127.2 -> BB167 (if true) | BB168 (if false)
BB126   <- [125]
  (cls|spec|blt)  %126.0 = LdFun              !v    length, e0.2
  fs              %126.1 = FrameState         R     0x560a373a26e0+393: [%165.2, %126.0], env=e0.2
  void                    Deopt              !v    %126.1, DeadCall@0x560a378953a0[Call#15], %126.0   !
BB15   <- [14, 167]
  lgl$-           %15.0 = Phi                      %167.5:BB167, %14.1:BB14
  lgl$-           %15.1 = %15.0
  lgl$-           %15.2 = AsLogical                %15.1
  lgl$#-          %15.3 = Identical                %15.2, false
  void                    Branch                   %15.3 -> BB124 (if true) | BB16 (if false)
BB134   <- [133, 148]
  lgl$-           %134.0 = Phi                      %133.3:BB133, %148.1:BB148
  lgl$-           %134.1 = %134.0
  lgl$-           %134.2 = AsLogical                %134.1
  lgl$#-          %134.3 = Identical                %134.2, false
  void                    Branch                   %134.3 -> BB147 (if true) | BB135 (if false)
BB167   <- [127]
  val?+           %167.0 = CastType           d     dn %127.1   <val?_>
  real$-          %167.1 = CallSafeBuiltin    wed   length(%167.0)    <val?_>
  lgl$-           %167.2 = Eq                 d     %167.1, 1L, elided   <val?_>
  lgl$-           %167.3 = AsLogical                %167.2
  lgl$-           %167.4 = LAnd                     %165.2, %167.3
  lgl$-           %167.5 = %167.4
  goto BB15
BB168   <- [127]
  fs              %168.0 = FrameState         R     0x560a373a26e0+434: [%165.2, <blt length>, %127.1], env=e0.2
  void                    Deopt              !v    %168.0, Typecheck@0x560a378953a0[Type#25], %127.1   !
BB124   <- [15]
  void                    Nop                !     
  lgl$-           %124.1 = %15.2
  goto BB21
BB16   <- [15]
  val?^ | miss    %16.0 = LdVar              eR    names, e0.2
  lgl$#-          %16.1 = Identical                <blt names>, %16.0   <@?>
  void                    Branch                   %16.1 -> BB18 (if true) | BB17 (if false)
BB147   <- [134]
  void                    Nop                !     
  lgl$-           %147.1 = %134.2
  goto BB136
BB135   <- [134]
  lgl$-           %135.0 = Missing            eR    access, e0.2
  lgl$-           %135.1 = AsLogical                %135.0
  lgl$-           %135.2 = LAnd                     %134.2, %135.1
  lgl$-           %135.3 = %135.2
  goto BB136
BB21   <- [124, 169]
  lgl$-           %21.0 = Phi                      %169.5:BB169, %124.1:BB124
  lgl$-           %21.1 = %21.0
  lgl$#-          %21.2 = CheckTrueFalse     e     %21.1
  void                    Branch                   %21.2 -> BB121 (if true) | BB22 (if false)
BB18   <- [16]
  val?^ | miss    %18.0 = LdVar              eR    representation, e0.2
  val?            %18.1 = Force!             !v    %18.0, e0.2   <val?_>
  lgl$#-          %18.2 = IsType                   %18.1 isA val?+
  void                    Branch                   %18.2 -> BB169 (if true) | BB170 (if false)
BB17   <- [16]
  (cls|spec|blt)  %17.0 = LdFun              !v    names, e0.2
  fs              %17.1 = FrameState         R     0x560a373a26e0+510: [%15.2, %17.0], env=e0.2
  void                    Deopt              !v    %17.1, DeadCall@0x560a378953a0[Call#16], %17.0   !
BB136   <- [135, 147]
  lgl$-           %136.0 = Phi                      %135.3:BB135, %147.1:BB147
  lgl$-           %136.1 = %136.0
  lgl$-           %136.2 = AsLogical                %136.1
  lgl$#-          %136.3 = Identical                %136.2, false
  void                    Branch                   %136.3 -> BB146 (if true) | BB137 (if false)
BB121   <- [21]
  val?^ | miss    %121.0 = LdVar              eR    list, e0.2
  lgl$#-          %121.1 = Identical                <blt list>, %121.0   <@?>
  void                    Branch                   %121.1 -> BB123 (if true) | BB122 (if false)
BB22   <- [21]
  void                    Nop                !     
  goto BB23
BB169   <- [18]
  val?+           %169.0 = CastType           d     dn %18.1   <val?_>
  val+            %169.1 = CallSafeBuiltin    wed   names(%169.0)    <val?_>
  lgl$-           %169.2 = Is                       %169.1, NULL
  lgl$-           %169.3 = AsLogical                %169.2
  lgl$-           %169.4 = LAnd                     %15.2, %169.3
  lgl$-           %169.5 = %169.4
  goto BB21
BB170   <- [18]
  fs              %170.0 = FrameState         R     0x560a373a26e0+551: [%15.2, <blt names>, %18.1], env=e0.2
  void                    Deopt              !v    %170.0, Typecheck@0x560a378953a0[Type#29], %18.1   !
BB146   <- [136]
  void                    Nop                !     
  lgl$-           %146.1 = %136.2
  goto BB138
BB137   <- [136]
  lgl$-           %137.0 = Missing            eR    version, e0.2
  lgl$-           %137.1 = AsLogical                %137.0
  lgl$-           %137.2 = LAnd                     %136.2, %137.1
  lgl$-           %137.3 = %137.2
  goto BB138
BB123   <- [121]
  val?^ | miss    %123.0 = LdVar              eR    representation, e0.2
  val?            %123.1 = Force!             !v    %123.0, e0.2   <val?_>
  val+            %123.2 = CallSafeBuiltin    wed   list(%123.1)    <val?_>
  void                    StVar              lW    representation, %123.2, e0.2
  goto BB23
BB122   <- [121]
  (cls|spec|blt)  %122.0 = LdFun              !v    list, e0.2
  fs              %122.1 = FrameState         R     0x560a373a26e0+624: [%122.0], env=e0.2
  void                    Deopt              !v    %122.1, DeadCall@0x560a378953a0[Call#17], %122.0   !
BB23   <- [22, 123]
  val?^ | miss    %23.0 = LdVar              eR    nzchar, e0.2
  lgl$#-          %23.1 = Identical                <blt nzchar>, %23.0   <true>
  void                    Branch                   %23.1 -> BB171 (if true) | BB172 (if false)
BB138   <- [137, 146]
  lgl$-           %138.0 = Phi                      %137.3:BB137, %146.1:BB146
  lgl$-           %138.1 = %138.0
  lgl$-           %138.2 = AsLogical                %138.1
  lgl$#-          %138.3 = Identical                %138.2, false
  void                    Branch                   %138.3 -> BB145 (if true) | BB139 (if false)
BB171   <- [23]
  val?^ | miss    %171.0 = LdVar              eR    allNames, e0.2
  lgl$#-          %171.1 = Identical                %171.0, function(x) <(rir::DispatchTable*)0x560a364509|...
  void                    Branch                   %171.1 -> BB173 (if true) | BB174 (if false)
BB172   <- [23]
  void                    Nop                !     
  lgl$#-          %172.1 = %23.1
  dr              %172.2 = DeadBranchReached@0x560a378953a0[Test#4]
  goto BB24
BB145   <- [138]
  void                    Nop                !     
  lgl$-           %145.1 = %138.2
  goto BB140
BB139   <- [138]
  lgl$-           %139.0 = Missing            eR    package, e0.2
  lgl$-           %139.1 = AsLogical                %139.0
  lgl$-           %139.2 = LAnd                     %138.2, %139.1
  lgl$-           %139.3 = %139.2
  goto BB140
BB173   <- [171]
  val?^ | miss    %173.0 = LdVar              eR    names, <env 0x560a342f8378>
  lgl$#-          %173.1 = Identical                <blt names>, %173.0   <true>
  void                    Branch                   %173.1 -> BB175 (if true) | BB176 (if false)
BB174   <- [171]
  void                    Nop                !     
  val?^ | miss    %174.1 = %171.0
  dr              %174.2 = CallTarget@0x560a378953a0[Call#20]
  goto BB24
BB24   <- [172, 174, 176]
  val?^ | miss    %24.0 = Phi                      %172.1:BB172, %174.1:BB174, %176.1:BB176
  val?^ | miss    %24.1 = %24.0
  dr              %24.2 = Phi                      %172.2:BB172, %174.2:BB174, %176.2:BB176
  dr              %24.3 = %24.2
  fs              %24.4 = FrameState         R     0x560a373a26e0+701: [], env=e0.2
  void                    Deopt              !v    %24.4, %24.3, %24.1   !
BB140   <- [139, 145]
  lgl$-           %140.0 = Phi                      %139.3:BB139, %145.1:BB145
  lgl$-           %140.1 = %140.0
  lgl$-           %140.2 = Not                d     %140.1, elided
  lgl$#-          %140.3 = CheckTrueFalse     e     %140.2
  void                    Branch                   %140.3 -> BB144 (if true) | BB141 (if false)
BB175   <- [173]
  val?^ | miss    %175.0 = LdVar              eR    representation, e0.2
  val?            %175.1 = Force!<wrapped>    !v    %175.0, e0.2   <vec+>
  prom-           %175.2 = MkArg                    %175.1, setClass[0x560a364a6db0]_p15 (!refl), e0.2
  val?~           %175.3 = CastType                 up %175.2
  lgl$#-          %175.4 = IsType                   %175.1 isA val?+
  void                    Branch                   %175.4 -> BB177 (if true) | BB178 (if false)
BB176   <- [173]
  void                    Nop                !     
  lgl$#-          %176.1 = %173.1
  dr              %176.2 = DeadBranchReached@0x560a36b696e8[Test#0]
  goto BB24
BB144   <- [140]
  (cls|spec|blt)  %144.0 = LdFun              !v    stop, e0.2
  fs              %144.1 = FrameState         R     0x560a373a26e0+1421: [%144.0], env=e0.2
  void                    Deopt              !v    %144.1, DeadCall@0x560a378953a0[Call#25], %144.0   !
BB141   <- [140]
  val?^ | miss    %141.0 = LdVar              eR    length, e0.2
  lgl$#-          %141.1 = Identical                <blt length>, %141.0   <@?>
  void                    Branch                   %141.1 -> BB143 (if true) | BB142 (if false)
BB177   <- [175]
  val?+           %177.0 = CastType           d     dn %175.1   <(nil|vec)+>
  val+            %177.1 = CallSafeBuiltin    wed   names(%177.0)    <(nil|str)->
  lgl$-           %177.2 = Is                       %177.1, NULL
  lgl$#-          %177.3 = CheckTrueFalse     e     %177.2
  env             e177.4 = (MkEnv)            l     x=%175.3, value=%177.1, parent=<env 0x560a342f8378>, context 0
  void                    Branch                   %177.3 -> BB118 (if true) | BB30 (if false)
BB178   <- [175]
  fs              %178.0 = FrameState         R     0x560a373a26e0+793: [<blt nzchar>], env=e0.2
  env             e178.1 = (MkEnv)            l     x=%175.3, value=unboundValue, parent=<env 0x560a342f8378>, context 0
  fs              %178.2 = FrameState         R     0x560a36289dc0+69: [<blt names>, %175.1], env=e178.1, next=%178.0
  void                    Deopt              !v    %178.2, Typecheck@0x560a36b696e8[Type#1], %175.1   !
BB143   <- [141]
  (cls|spec|blt)  %143.0 = LdFun              !v    @, e0.2
  fs              %143.1 = FrameState         R     0x560a373a26e0+1514: [<blt length>, %143.0], env=e0.2
  void                    Deopt              !v    %143.1, DeadCall@0x560a378953a0[Call#28], %143.0   !
BB142   <- [141]
  (cls|spec|blt)  %142.0 = LdFun              !v    length, e0.2
  fs              %142.1 = FrameState         R     0x560a373a26e0+1477: [%142.0], env=e0.2
  void                    Deopt              !v    %142.1, DeadCall@0x560a378953a0[Call#26], %142.0   !
BB118   <- [177]
  val?^ | miss    %118.0 = LdVar              eR    character, <env 0x560a342f8378>
  lgl$#-          %118.1 = Identical                %118.0, function(length=0L) <(rir::DispatchTable*)0x56|...
  void                    Branch                   %118.1 -> BB179 (if true) | BB180 (if false)
BB30   <- [177]
  void                    Nop                !     
  val+            %30.1 = %177.1
  goto BB31
BB179   <- [118]
  val?^ | miss    %179.0 = LdVar              eR    length, <env 0x560a342f8378>
  lgl$#-          %179.1 = Identical                %179.0, <blt length>
  void                    Branch                   %179.1 -> BB189 (if true) | BB190 (if false)
BB180   <- [118]
  void                    Nop                !     
  val?^ | miss    %180.1 = %118.0
  dr              %180.2 = CallTarget@0x560a36b696e8[Call#1]
  goto BB28
BB31   <- [30, 191]
  val+            %31.0 = Phi                      %30.1:BB30, %191.2:BB191   <str->
  val+            %31.1 = %31.0
  val?            %31.2 = CallBuiltin        !v    nzchar(%31.1) e0.2   <lgl->
  void                    StVar              lW    slots, %31.2, e0.2
  val?^ | miss    %31.4 = LdVar              eR    c, e0.2
  lgl$#-          %31.5 = Identical                <blt c>, %31.4   <true>
  void                    Branch                   %31.5 -> BB181 (if true) | BB182 (if false)
BB189   <- [179]
  (int|real)$-    %189.0 = CallSafeBuiltin    wed   length(%177.0)    <int$->
  lgl$#-          %189.1 = IsType                   %189.0 isA int$-
  void                    Branch                   %189.1 -> BB191 (if true) | BB192 (if false)
BB190   <- [179]
  void                    Nop                !     
  val?^ | miss    %190.1 = %179.0
  dr              %190.2 = CallTarget@0x560a36b696e8[Call#2]
  goto BB28
BB28   <- [180, 190]
  val?^ | miss    %28.0 = Phi                      %180.1:BB180, %190.1:BB190
  val?^ | miss    %28.1 = %28.0
  dr              %28.2 = Phi                      %180.2:BB180, %190.2:BB190
  dr              %28.3 = %28.2
  fs              %28.4 = FrameState         R     0x560a373a26e0+793: [<blt nzchar>], env=e0.2
  env             e28.5 = (MkEnv)            l     x=%175.3, value=%177.1, parent=<env 0x560a342f8378>, context 0
  fs              %28.6 = FrameState         R     0x560a36289dc0+105: [], env=e28.5, next=%28.4
  void                    Deopt              !v    %28.6, %28.3, %28.1   !
BB181   <- [31]
  val?^ | miss    %181.0 = LdVar              eR    as.character, e0.2
  lgl$#-          %181.1 = Identical                <blt as.character>, %181.0   <true>
  void                    Branch                   %181.1 -> BB183 (if true) | BB184 (if false)
BB182   <- [31]
  void                    Nop                !     
  lgl$#-          %182.1 = %31.5
  dr              %182.2 = DeadBranchReached@0x560a378953a0[Test#5]
  goto BB32
BB191   <- [189]
  int$-           %191.0 = CastType           d     dn %189.0
  str-            %191.1 = CallSafeBuiltin    wed   vector("character", %191.0)    <str->
  str-            %191.2 = %191.1
  goto BB31
BB192   <- [189]
  env             e192.0 = MaterializeEnv           , e177.4   <@?>
  fs              %192.1 = FrameState         R     0x560a373a26e0+793: [<blt nzchar>], env=e0.2
  fs              %192.2 = FrameState         R     0x560a36289dc0+181: [], env=e192.0, next=%192.1
  prom-           %192.3 = MkArg                    unboundValue, setClass[0x560a364a6db0]_p63, e192.0
  val?^           %192.4 = CastType                 up %192.3
  env             e192.5 = (MkEnv)            l     length=%192.4, parent=R_BaseNamespace, context -1
  fs              %192.6 = FrameState         R     0x560a35dfed10+15: ["character"], env=e192.5, next=%192.2
  fs              %192.7 = FrameState         R     0x560a360acc60+32(pr): [%189.0], env=e192.0, next=%192.6
  void                    Deopt              !v    %192.7, Typecheck@0x560a36b696e8[Type#6], %189.0   !
BB183   <- [181]
  val?^ | miss    %183.0 = LdVar              eR    representation, e0.2
  val?            %183.1 = Force!<wrapped>    !v    %183.0, e0.2   <vec+>
  lgl$#-          %183.2 = IsType                   %183.1 isA val+   <true>
  void                    Branch                   %183.2 -> BB185 (if true) | BB186 (if false)
BB184   <- [181]
  void                    Nop                !     
  lgl$#-          %184.1 = %181.1
  dr              %184.2 = DeadBranchReached@0x560a378953a0[Test#7]
  goto BB32
BB32   <- [182, 184]
  val?^ | miss    %32.0 = Phi                      %182.1:BB182, %184.1:BB184
  val?^ | miss    %32.1 = %32.0
  dr              %32.2 = Phi                      %182.2:BB182, %184.2:BB184
  dr              %32.3 = %32.2
  fs              %32.4 = FrameState         R     0x560a373a26e0+829: [], env=e0.2
  void                    Deopt              !v    %32.4, %32.3, %32.1   !
BB185   <- [183]
  val?^ | miss    %185.0 = LdVar              eR    slots, e0.2
  lgl$#-          %185.1 = IsType                   %185.0 isA lgl-
  void                    Branch                   %185.1 -> BB187 (if true) | BB188 (if false)
BB186   <- [183]
  void                    Nop                !     
  lgl$#-          %186.1 = %183.2
  dr              %186.2 = DeadBranchReached@0x560a378953a0[Test#9]
  goto BB34
BB187   <- [185]
  lgl-            %187.0 = CastType           d     dn %185.0
  lgl-            %187.1 = Not                wed   %187.0, elided
  lgl$#-          %187.2 = IsType                   %183.1 isA val?+
  void                    Branch                   %187.2 -> BB193 (if true) | BB194 (if false)
BB188   <- [185]
  void                    Nop                !     
  val?^ | miss    %188.1 = %185.0
  dr              %188.2 = Typecheck@0x560a378953a0[Type#51]
  goto BB34
BB34   <- [186, 188]
  val?^ | miss    %34.0 = Phi                      %186.1:BB186, %188.1:BB188
  val?^ | miss    %34.1 = %34.0
  dr              %34.2 = Phi                      %186.2:BB186, %188.2:BB188
  dr              %34.3 = %34.2
  fs              %34.4 = FrameState         R     0x560a373a26e0+963: [<blt c>, <blt as.character>, %183.1], env=e0.2
  void                    Deopt              !v    %34.4, %34.3, %34.1   !
BB193   <- [187]
  val?+           %193.0 = CastType           d     dn %183.1   <vec+>
  val?            %193.1 = Extract1_1D        wed   %193.0, %187.1, elided   <vec+>
  lgl$#-          %193.2 = IsType                   %193.1 isA val?+
  void                    Branch                   %193.2 -> BB195 (if true) | BB196 (if false)
BB194   <- [187]
  fs              %194.0 = FrameState         R     0x560a373a26e0+1014: [<blt c>, <blt as.character>, %183.1, %187.1], env=e0.2
  void                    Deopt              !v    %194.0, Typecheck@0x560a378953a0[Type#49], %183.1   !
BB195   <- [193]
  val?+           %195.0 = CastType           d     dn %193.1   <vec+>
  val+            %195.1 = CallSafeBuiltin    wed   as.character(%195.0)    <str->
  val?^ | miss    %195.2 = LdVar              eR    contains, e0.2
  val?            %195.3 = Force!<lazy>       !v    %195.2, e0.2   <str$->
  lgl$#-          %195.4 = IsType                   %195.3 isA val?-
  void                    Branch                   %195.4 -> BB197 (if true) | BB198 (if false)
BB196   <- [193]
  fs              %196.0 = FrameState         R     0x560a373a26e0+1015: [<blt c>, <blt as.character>, %193.1], env=e0.2
  void                    Deopt              !v    %196.0, Typecheck@0x560a378953a0[Type#52], %193.1   !
BB197   <- [195]
  val?-           %197.0 = CastType           d     dn %195.3   <str$->
  val+            %197.1 = CallSafeBuiltin    wed   c(%195.1, %197.0)    <str$->
  void                    StVar              lW    superClasses, %197.1, e0.2
  val?^ | miss    %197.3 = LdVar              eR    representation, e0.2
  val?            %197.4 = Force!<wrapped>    !v    %197.3, e0.2   <vec+>
  lgl$#-          %197.5 = IsType                   %197.4 isA val+   <true>
  lgl$#-          %197.6 = IsType                   %197.4 isA val?+
  void                    Branch                   %197.5 -> BB199 (if true) | BB200 (if false)
BB198   <- [195]
  fs              %198.0 = FrameState         R     0x560a373a26e0+1052: [<blt c>, %195.1, %195.3], env=e0.2
  void                    Deopt              !v    %198.0, Typecheck@0x560a378953a0[Type#54], %195.3   !
BB199   <- [197]
  val?^ | miss    %199.0 = LdVar              eR    slots, e0.2
  lgl$#-          %199.1 = IsType                   %199.0 isA lgl-
  void                    Branch                   %199.1 -> BB201 (if true) | BB202 (if false)
BB200   <- [197]
  void                    Nop                !     
  lgl$#-          %200.1 = %197.5
  dr              %200.2 = DeadBranchReached@0x560a378953a0[Test#10]
  goto BB42
BB201   <- [199]
  lgl-            %201.0 = CastType           d     dn %199.0
  void                    Branch                   %197.6 -> BB203 (if true) | BB204 (if false)
BB202   <- [199]
  void                    Nop                !     
  val?^ | miss    %202.1 = %199.0
  dr              %202.2 = Typecheck@0x560a378953a0[Type#58]
  goto BB42
BB42   <- [200, 202, 204]
  val?^ | miss    %42.0 = Phi                      %200.1:BB200, %202.1:BB202, %204.1:BB204
  val?^ | miss    %42.1 = %42.0
  dr              %42.2 = Phi                      %200.2:BB200, %202.2:BB202, %204.2:BB204
  dr              %42.3 = %42.2
  fs              %42.4 = FrameState         R     0x560a373a26e0+1097: [%197.4], env=e0.2
  void                    Deopt              !v    %42.4, %42.3, %42.1   !
BB203   <- [201]
  val?+           %203.0 = CastType           d     dn %197.4   <vec+>
  val?            %203.1 = Extract1_1D        wed   %203.0, %201.0, elided   <vec+>
  void                    StVar              lW    properties, %203.1, e0.2
  (cls|spec|blt)  %203.3 = LdFun              !v    makeClassRepresentation, <0x560a35b85d30>, e0.2
  prom-           %203.4 = MkArg                    unboundValue, setClass[0x560a364a6db0]_p16, e0.2
  prom-           %203.5 = MkArg                    unboundValue, setClass[0x560a364a6db0]_p17, e0.2
  prom-           %203.6 = MkArg                    unboundValue, setClass[0x560a364a6db0]_p18, e0.2
  prom-           %203.7 = MkArg                    unboundValue, setClass[0x560a364a6db0]_p19, e0.2
  prom-           %203.8 = MkArg                    unboundValue, setClass[0x560a364a6db0]_p20, e0.2
  prom-           %203.9 = MkArg                    unboundValue, setClass[0x560a364a6db0]_p21, e0.2
  prom-           %203.10 = MkArg                    unboundValue, setClass[0x560a364a6db0]_p22, e0.2
  prom-           %203.11 = MkArg                    unboundValue, setClass[0x560a364a6db0]_p23, e0.2
  prom-           %203.12 = MkArg                    unboundValue, setClass[0x560a364a6db0]_p24, e0.2
  prom-           %203.13 = MkArg                    unboundValue, setClass[0x560a364a6db0]_p25, e0.2
  val?            %203.14 = NamedCall          !v    %203.3(%203.4, %203.5, %203.6, %203.7, %203.8, %203.9, %203.10, %203.11, %203.12, where=%203.13) e0.2   <other>
  void                    StVar              lW    classDef, %203.14, e0.2
  val?^ | miss    %203.16 = LdVar              eR    names, e0.2
  lgl$#-          %203.17 = Identical                <blt names>, %203.16   <true>
  void                    Branch                   %203.17 -> BB205 (if true) | BB206 (if false)
BB204   <- [201]
  void                    Nop                !     
  val?            %204.1 = %197.4
  dr              %204.2 = Typecheck@0x560a378953a0[Type#56]
  goto BB42
BB205   <- [203]
  (cls|spec|blt)  %205.0 = LdFun              !v    @, <0x560a33cf0bd8>, e0.2
  prom-           %205.1 = MkArg                    unboundValue, setClass[0x560a364a6db0]_p26, e0.2
  prom-           %205.2 = MkArg                    unboundValue, setClass[0x560a364a6db0]_p27, e0.2
  val?            %205.3 = Call               !v    %205.0(%205.1, %205.2) e0.2   <vec$+>
  lgl$#-          %205.4 = IsType                   %205.3 isA val?+
  void                    Branch                   %205.4 -> BB207 (if true) | BB208 (if false)
BB206   <- [203]
  fs              %206.0 = FrameState         R     0x560a373a26e0+1294: [], env=e0.2
  void                    Deopt              !v    %206.0, DeadBranchReached@0x560a378953a0[Test#12], %203.17   !
BB207   <- [205]
  val?+           %207.0 = CastType           d     dn %205.3   <vec$+>
  val+            %207.1 = CallSafeBuiltin    wed   names(%207.0)    <str$->
  void                    StVar              lW    superClasses, %207.1, e0.2
  val?^ | miss    %207.3 = LdVar              eR    completeClassDefinition, e0.2
  lgl$#-          %207.4 = Identical                %207.3, function(Class, ClassDef=getClassDef(Class), w|...
  void                    Branch                   %207.4 -> BB209 (if true) | BB210 (if false)
BB208   <- [205]
  fs              %208.0 = FrameState         R     0x560a373a26e0+1969: [<blt names>, %205.3], env=e0.2
  void                    Deopt              !v    %208.0, Typecheck@0x560a378953a0[Type#102], %205.3   !
BB209   <- [207]
  prom-           %209.0 = MkArg                    unboundValue, setClass[0x560a364a6db0]_p28, e0.2
  prom-           %209.1 = MkArg                    unboundValue, setClass[0x560a364a6db0]_p29, e0.2
  prom-           %209.2 = MkArg                    unboundValue, setClass[0x560a364a6db0]_p30, e0.2
  val?            %209.3 = StaticCall         !v    completeClassDefinition[0x560a364435b0](%209.0, %209.1, %209.2, false) { 0 1 2 3n } e0.2   <other>
  void                    StVar              lW    classDef, %209.3, e0.2
  val?^ | miss    %209.5 = LdVar              eR    .uncacheClass, e0.2
  lgl$#-          %209.6 = Identical                %209.5, function(name, def) <(rir::DispatchTable*)0x56|...
  void                    Branch                   %209.6 -> BB211 (if true) | BB212 (if false)
BB210   <- [207]
  fs              %210.0 = FrameState         R     0x560a373a26e0+2005: [], env=e0.2
  void                    Deopt              !v    %210.0, CallTarget@0x560a378953a0[Call#37], %207.3   !
BB211   <- [209]
  prom-           %211.0 = MkArg                    unboundValue, setClass[0x560a364a6db0]_p31, e0.2
  prom-           %211.1 = MkArg                    unboundValue, setClass[0x560a364a6db0]_p32 (!refl), e0.2
  val?^           %211.2 = CastType                 up %211.1
  val?^           %211.3 = CastType                 up %211.0
  val?^ | miss    %211.4 = LdVar              eR    .classTable, <env 0x560a342f8378>
  env             e211.5 = (MkEnv)            l     name=%211.3, def=%211.2, prev=unboundValue, parent=<env 0x560a342f8378>, context 0
  val?            %211.6 = Force!<wrapped>    !vL   %211.4, e211.5   <env->
  lgl$#-          %211.7 = IsType                   %211.6 isA val+   <true>
  lgl$#-          %211.8 = IsEnvStub          R     , e211.5
  void                    Branch                   %211.8 -> BB213 (if true) | BB214 (if false)
BB212   <- [209]
  fs              %212.0 = FrameState         R     0x560a373a26e0+2082: [], env=e0.2
  void                    Deopt              !v    %212.0, CallTarget@0x560a378953a0[Call#38], %209.5   !
BB213   <- [211]
  void                    Branch                   %211.7 -> BB215 (if true) | BB216 (if false)
BB214   <- [211]
  void                    Nop                !     
  env             e214.1 = e211.5
  dr              %214.2 = EnvStubMaterialized@0x560a3763e768[Call#unknown]
  goto BB52
BB215   <- [213]
  val?            %215.0 = Force!<lazy>       !vL   %211.3, e211.5   <str$->
  lgl$#-          %215.1 = IsType                   %215.0 isA val?-
  lgl$#-          %215.2 = IsEnvStub          R     , e211.5
  void                    Branch                   %215.2 -> BB217 (if true) | BB218 (if false)
BB216   <- [213]
  void                    Nop                !     
  lgl$#-          %216.1 = %211.7
  dr              %216.2 = DeadBranchReached@0x560a3763e768[Test#0]
  goto BB52
BB52   <- [214, 216]
  val?^ | miss    %52.0 = Phi                      e214.1:BB214, %216.1:BB216
  val?^ | miss    %52.1 = %52.0
  dr              %52.2 = Phi                      %214.2:BB214, %216.2:BB216
  dr              %52.3 = %52.2
  fs              %52.4 = FrameState         R     0x560a373a26e0+2119: [], env=e0.2
  fs              %52.5 = FrameState         R     0x560a367d7b20+9: [%211.6], env=e211.5, next=%52.4
  void                    Deopt              !v    %52.5, %52.3, %52.1   !
BB217   <- [215]
  lgl$#-          %217.0 = IsType                   %211.6 isA val?-
  void                    Branch                   %217.0 -> BB219 (if true) | BB220 (if false)
BB218   <- [215]
  void                    Nop                !     
  env             e218.1 = e211.5
  dr              %218.2 = EnvStubMaterialized@0x560a3763e768[Call#unknown]
  goto BB54
BB219   <- [217]
  val?-           %219.0 = CastType           d     dn %211.6   <env->
  void                    Branch                   %215.1 -> BB221 (if true) | BB222 (if false)
BB220   <- [217]
  void                    Nop                !     
  val?            %220.1 = %211.6
  dr              %220.2 = Typecheck@0x560a3763e768[Type#0]
  goto BB54
BB54   <- [218, 220, 222]
  val?^ | miss    %54.0 = Phi                      e218.1:BB218, %220.1:BB220, %222.1:BB222
  val?^ | miss    %54.1 = %54.0
  dr              %54.2 = Phi                      %218.2:BB218, %220.2:BB220, %222.2:BB222
  dr              %54.3 = %54.2
  fs              %54.4 = FrameState         R     0x560a373a26e0+2119: [], env=e0.2
  fs              %54.5 = FrameState         R     0x560a367d7b20+54: [%211.6, %215.0], env=e211.5, next=%54.4
  void                    Deopt              !v    %54.5, %54.3, %54.1   !
BB221   <- [219]
  val?-           %221.0 = CastType           d     dn %215.0   <str$->
  val?            %221.1 = Extract2_1D        wed   %219.0, %221.0, elided   <nil->
  lgl$-           %221.2 = Is                       %221.1, NULL
  void                    StVar              lWd   prev, %221.1, e211.5
  lgl$-           %221.4 = Not                d     %221.2, elided
  lgl$#-          %221.5 = CheckTrueFalse     e     %221.4
  void                    Branch                   %221.5 -> BB117 (if true) | BB58 (if false)
BB222   <- [219]
  void                    Nop                !     
  val?            %222.1 = %215.0
  dr              %222.2 = Typecheck@0x560a3763e768[Type#2]
  goto BB54
BB117   <- [221]
  fs              %117.0 = FrameState         R     0x560a373a26e0+2119: [], env=e0.2
  env             e117.1 = MaterializeEnv           , e211.5   <@?>
  (cls|spec|blt)  %117.2 = LdFun              !v    is, e117.1
  fs              %117.3 = FrameState         R     0x560a367d7b20+105: [%117.2], env=e117.1, next=%117.0
  void                    Deopt              !v    %117.3, DeadCall@0x560a3763e768[Call#0], %117.2   !
BB58   <- [221]
  val?^ | miss    %58.0 = LdVar              eR    length, e0.2
  lgl$#-          %58.1 = Identical                <blt length>, %58.0   <true>
  void                    Branch                   %58.1 -> BB223 (if true) | BB224 (if false)
BB223   <- [58]
  val?^ | miss    %223.0 = LdVar              eR    superClasses, e0.2
  lgl$#-          %223.1 = IsType                   %223.0 isA val?~- | miss
  void                    Branch                   %223.1 -> BB225 (if true) | BB226 (if false)
BB224   <- [58]
  void                    Nop                !     
  lgl$#-          %224.1 = %58.1
  dr              %224.2 = DeadBranchReached@0x560a378953a0[Test#13]
  goto BB56
BB225   <- [223]
  val?~- | miss   %225.0 = CastType           d     dn %223.0
  val?-           %225.1 = Force!<value>            %225.0,    <str$->
  (int|real)$-    %225.2 = CallSafeBuiltin    wed   length(%225.1)    <int$->
  lgl$#-          %225.3 = IsType                   %225.2 isA int$-
  void                    Branch                   %225.3 -> BB227 (if true) | BB228 (if false)
BB226   <- [223]
  void                    Nop                !     
  val?^ | miss    %226.1 = %223.0
  dr              %226.2 = Typecheck@0x560a378953a0[Type#111]
  goto BB56
BB56   <- [224, 226]
  val?^ | miss    %56.0 = Phi                      %224.1:BB224, %226.1:BB226
  val?^ | miss    %56.1 = %56.0
  dr              %56.2 = Phi                      %224.2:BB224, %226.2:BB226
  dr              %56.3 = %56.2
  fs              %56.4 = FrameState         R     0x560a373a26e0+2119: [], env=e0.2
  fs              %56.5 = FrameState         R     0x560a367d7b20+77: [%221.1], env=e211.5, next=%56.4
  void                    Deopt              !v    %56.5, %56.3, %56.1   !
BB227   <- [225]
  int$-           %227.0 = CastType           d     dn %225.2
  lgl$-           %227.1 = Gt                 d     %227.0, 0L, elided   <lgl$->
  lgl$#-          %227.2 = CheckTrueFalse     e     %227.1
  void                    Branch                   %227.2 -> BB79 (if true) | BB61 (if false)
BB228   <- [225]
  fs              %228.0 = FrameState         R     0x560a373a26e0+2211: [%225.2], env=e0.2
  void                    Deopt              !v    %228.0, Typecheck@0x560a378953a0[Type#112], %225.2   !
BB79   <- [227]
  (cls|spec|blt)  %79.0 = LdFun              !v    @, <0x560a33cf0bd8>, e0.2
  prom-           %79.1 = MkArg                    unboundValue, setClass[0x560a364a6db0]_p38, e0.2
  prom-           %79.2 = MkArg                    unboundValue, setClass[0x560a364a6db0]_p39, e0.2
  val?            %79.3 = Call               !v    %79.0(%79.1, %79.2) e0.2   <lgl$->
  lgl$#-          %79.4 = IsType                   %79.3 isA lgl$-
  void                    Branch                   %79.4 -> BB229 (if true) | BB230 (if false)
BB61   <- [227]
  void                    Nop                !     
  goto BB62
BB229   <- [79]
  lgl$-           %229.0 = CastType           d     dn %79.3
  void                    StVar              lW    sealed, %229.0, e0.2
  (cls|spec|blt)  %229.2 = LdFun              !v    <-, <0x560a33ce5da8>, e0.2
  prom-           %229.3 = MkArg                    unboundValue, setClass[0x560a364a6db0]_p40, e0.2
  val?            %229.4 = Call               !v    %229.2(%229.3, false) e0.2
  val?^ | miss    %229.5 = LdVar              eR    assignClassDef, e0.2
  lgl$#-          %229.6 = Identical                %229.5, function(Class, def, where=.GlobalEnv, force=F|...
  void                    Branch                   %229.6 -> BB231 (if true) | BB232 (if false)
BB230   <- [79]
  fs              %230.0 = FrameState         R     0x560a373a26e0+2276: [%79.3], env=e0.2
  void                    Deopt              !v    %230.0, Typecheck@0x560a378953a0[Type#116], %79.3   !
BB62   <- [61, 107]
  val?^ | miss    %62.0 = LdVar              eR    S3methods, e0.2
  val?            %62.1 = Force!<lazy>       !v    %62.0, e0.2   <lgl$->
  lgl$#-          %62.2 = CheckTrueFalse     we    %62.1
  void                    Branch                   %62.2 -> BB78 (if true) | BB65 (if false)
BB231   <- [229]
  prom-           %231.0 = MkArg                    unboundValue, setClass[0x560a364a6db0]_p43, e0.2
  prom-           %231.1 = MkArg                    unboundValue, setClass[0x560a364a6db0]_p44, e0.2
  prom-           %231.2 = MkArg                    unboundValue, setClass[0x560a364a6db0]_p45, e0.2
  val?            %231.3 = StaticCall         !v    assignClassDef[0x560a36de58b0](%231.0, %231.1, %231.2) e0.2
  val?^ | miss    %231.4 = LdVar              eR    character, e0.2
  lgl$#-          %231.5 = Identical                %231.4, function(length=0L) <(rir::DispatchTable*)0x56|...
  void                    Branch                   %231.5 -> BB233 (if true) | BB234 (if false)
BB232   <- [229]
  fs              %232.0 = FrameState         R     0x560a373a26e0+2327: [%229.4], env=e0.2
  void                    Deopt              !v    %232.0, CallTarget@0x560a378953a0[Call#43], %229.5   !
BB78   <- [62]
  (cls|spec|blt)  %78.0 = LdFun              !v    .setS3MethodsOn, e0.2
  fs              %78.1 = FrameState         R     0x560a373a26e0+4164: [%78.0], env=e0.2
  void                    Deopt              !v    %78.1, DeadCall@0x560a378953a0[Call#104], %78.0   !
BB65   <- [62]
  val?^ | miss    %65.0 = LdVar              eR    assignClassDef, e0.2
  lgl$#-          %65.1 = Identical                %65.0, function(Class, def, where=.GlobalEnv, force=F|...
  void                    Branch                   %65.1 -> BB235 (if true) | BB236 (if false)
BB233   <- [231]
  str-            %233.0 = CallSafeBuiltin    wed   vector("character", 0L)    <str->
  void                    StVar              lW    badContains, %233.0, e0.2
  (cls|spec|blt)  %233.2 = LdFun              !v    @, <0x560a33cf0bd8>, e0.2
  prom-           %233.3 = MkArg                    unboundValue, setClass[0x560a364a6db0]_p46, e0.2
  prom-           %233.4 = MkArg                    unboundValue, setClass[0x560a364a6db0]_p47, e0.2
  val?            %233.5 = Call               !v    %233.2(%233.3, %233.4) e0.2   <vec$+>
  val?+           %233.6 = ToForSeq           e     %233.5
  int$-           %233.7 = Length                   %233.6
  int$-           %233.8 = Inc                      0L
  lgl$-           %233.9 = Lt                 d     %233.7, %233.8, elided   <false>
  lgl$#-          %233.10 = Identical                %233.9, true
  void                    Branch                   %233.10 -> BB238 (if true) | BB237 (if false)
BB234   <- [231]
  fs              %234.0 = FrameState         R     0x560a373a26e0+2370: [%231.3], env=e0.2
  void                    Deopt              !v    %234.0, CallTarget@0x560a378953a0[Call#44], %231.4   !
BB235   <- [65]
  prom-           %235.0 = MkArg                    unboundValue, setClass[0x560a364a6db0]_p33, e0.2
  prom-           %235.1 = MkArg                    unboundValue, setClass[0x560a364a6db0]_p34, e0.2
  prom-           %235.2 = MkArg                    unboundValue, setClass[0x560a364a6db0]_p35, e0.2
  val?            %235.3 = StaticCall         !v    assignClassDef[0x560a36de58b0](%235.0, %235.1, %235.2) e0.2
  val?^ | miss    %235.4 = LdVar              eR    invisible, e0.2
  lgl$#-          %235.5 = Identical                <blt invisible>, %235.4   <true>
  void                    Branch                   %235.5 -> BB239 (if true) | BB240 (if false)
BB236   <- [65]
  fs              %236.0 = FrameState         R     0x560a373a26e0+4149: [%62.2], env=e0.2
  void                    Deopt              !v    %236.0, CallTarget@0x560a378953a0[Call#105], %65.0   !
BB238   <- [233]
  fs              %238.0 = FrameState         R     0x560a373a26e0+2449: [%233.5], env=e0.2
  void                    Deopt              !v    %238.0, DeadBranchReached@0x560a378953a0[Test#14], %233.10   !
BB237   <- [233]
  val?            %237.0 = Extract2_1D        wed   %233.6, %233.8, elided
  void                    StVar              lW    ext, %237.0, e0.2
  (cls|spec|blt)  %237.2 = LdFun              !v    @, <0x560a33cf0bd8>, e0.2
  prom-           %237.3 = MkArg                    unboundValue, setClass[0x560a364a6db0]_p48, e0.2
  prom-           %237.4 = MkArg                    unboundValue, setClass[0x560a364a6db0]_p49, e0.2
  val?            %237.5 = Call               !v    %237.2(%237.3, %237.4) e0.2   <str$+>
  void                    StVar              lW    class2, %237.5, e0.2
  val?^ | miss    %237.7 = LdVar              eR    is, e0.2
  lgl$#-          %237.8 = Identical                %237.7, function(object, class2) <(rir::DispatchTable*|...
  void                    Branch                   %237.8 -> BB241 (if true) | BB242 (if false)
BB239   <- [235]
  val?^ | miss    %239.0 = LdVar              eR    classGeneratorFunction, e0.2
  lgl$#-          %239.1 = Identical                %239.0, function(classDef, env=topenv(parent.frame()))|...
  void                    Branch                   %239.1 -> BB243 (if true) | BB244 (if false)
BB240   <- [235]
  void                    Nop                !     
  lgl$#-          %240.1 = %235.5
  dr              %240.2 = DeadBranchReached@0x560a378953a0[Test#20]
  goto BB66
BB241   <- [237]
  prom-           %241.0 = MkArg                    unboundValue, setClass[0x560a364a6db0]_p50, e0.2
  val?            %241.1 = Call               !v    function(object, class2) <(rir::DispatchTable*|...(%241.0, "try-error") e0.2   <lgl$->
  lgl$#-          %241.2 = IsType                   %241.1 isA lgl$-
  void                    Branch                   %241.2 -> BB247 (if true) | BB248 (if false)
BB242   <- [237]
  fs              %242.0 = FrameState         R     0x560a373a26e0+2545: [%233.6, %233.7, %233.8], env=e0.2
  void                    Deopt              !v    %242.0, CallTarget@0x560a378953a0[Call#47], %237.7   !
BB243   <- [239]
  prom-           %243.0 = MkArg                    unboundValue, setClass[0x560a364a6db0]_p36, e0.2
  prom-           %243.1 = MkArg                    unboundValue, setClass[0x560a364a6db0]_p37, e0.2
  ct              %243.2 = PushContext        lCL   %243.0, %243.1, classGeneratorFunction(classDef, where), function(classDef, env=topenv(parent.frame()))|..., e0.2
  val?^           %243.3 = CastType                 up %243.1
  val?^           %243.4 = CastType                 up %243.0
  env             e243.5 = MkEnv              l     classDef=%243.4, env=%243.3, parent=<env 0x560a342f8378>, context 1
  cls             %243.6 = MkCls                    , e243.5
  val?^ | miss    %243.7 = LdVar              eR    is, <env 0x560a342f8378>
  lgl$#-          %243.8 = Identical                %243.7, function(object, class2) <(rir::DispatchTable*|...
  void                    Branch                   %243.8 -> BB245 (if true) | BB246 (if false)
BB244   <- [239]
  void                    Nop                !     
  val?^ | miss    %244.1 = %239.0
  dr              %244.2 = CallTarget@0x560a378953a0[Call#108]
  goto BB66
BB66   <- [240, 244, 246]
  val?^ | miss    %66.0 = Phi                      %240.1:BB240, %244.1:BB244, %246.1:BB246
  val?^ | miss    %66.1 = %66.0
  dr              %66.2 = Phi                      %240.2:BB240, %244.2:BB244, %246.2:BB246
  dr              %66.3 = %66.2
  fs              %66.4 = FrameState         R     0x560a373a26e0+4247: [%235.3], env=e0.2
  void                    Deopt              !v    %66.4, %66.3, %66.1   !
BB247   <- [241]
  lgl$-           %247.0 = CastType           d     dn %241.1
  lgl$#-          %247.1 = CheckTrueFalse     e     %247.0
  void                    Branch                   %247.1 -> BB112 (if true) | BB92 (if false)
BB248   <- [241]
  void                    Nop                !     
  val?            %248.1 = %241.1
  dr              %248.2 = Typecheck@0x560a378953a0[Type#136]
  goto BB90
BB245   <- [243]
  prom-           %245.0 = MkArg                    unboundValue, setClass[0x560a364a6db0]_p66, e243.5
  val?            %245.1 = Call               !v    function(object, class2) <(rir::DispatchTable*|...(%245.0, "classRepresentation") e243.5   <lgl$->
  lgl$#-          %245.2 = IsType                   %245.1 isA lgl$-
  void                    Branch                   %245.2 -> BB249 (if true) | BB250 (if false)
BB246   <- [243]
  void                    DropContext        C     
  val?^ | miss    %246.1 = %243.7
  dr              %246.2 = CallTarget@0x560a379211c8[Call#2]
  goto BB66
BB112   <- [247]
  val?^ | miss    %112.0 = LdVar              eR    c, e0.2
  lgl$#-          %112.1 = Identical                <blt c>, %112.0   <@?>
  void                    Branch                   %112.1 -> BB114 (if true) | BB113 (if false)
BB92   <- [247]
  val?^ | miss    %92.0 = LdVar              eR    getClassDef, e0.2
  lgl$#-          %92.1 = Identical                %92.0, function(Class, where=topenv(parent.frame()), |...
  void                    Branch                   %92.1 -> BB255 (if true) | BB256 (if false)
BB90   <- [248, 256]
  val?^ | miss    %90.0 = Phi                      %248.1:BB248, %256.1:BB256
  val?^ | miss    %90.1 = %90.0
  dr              %90.2 = Phi                      %248.2:BB248, %256.2:BB256
  dr              %90.3 = %90.2
  fs              %90.4 = FrameState         R     0x560a373a26e0+2582: [%233.6, %233.7, %233.8, %241.1], env=e0.2
  void                    Deopt              !v    %90.4, %90.3, %90.1   !
BB249   <- [245]
  lgl$-           %249.0 = CastType           d     dn %245.1
  lgl$#-          %249.1 = CheckTrueFalse     e     %249.0
  void                    Branch                   %249.1 -> BB71 (if true) | BB70 (if false)
BB250   <- [245]
  fs              %250.0 = FrameState         R     0x560a373a26e0+4345: [<blt invisible>], env=e0.2
  fs              %250.1 = FrameState         R     0x560a362dc9f0+37: [%245.1], env=e243.5, next=%250.0
  void                    Deopt              !v    %250.1, Typecheck@0x560a379211c8[Type#3], %245.1   !
BB114   <- [112]
  val?^ | miss    %114.0 = LdVar              eR    badContains, e0.2
  val?            %114.1 = Force!             !v    %114.0, e0.2   <val?_>
  val?^ | miss    %114.2 = LdVar              eR    class2, e0.2
  val?            %114.3 = Force!             !v    %114.2, e0.2   <val?_>
  lgl$#-          %114.4 = IsType                   %114.3 isA val?+
  lgl$#-          %114.5 = IsType                   %114.1 isA val?+
  void                    Branch                   %114.5 -> BB257 (if true) | BB258 (if false)
BB113   <- [112]
  (cls|spec|blt)  %113.0 = LdFun              !v    c, e0.2
  fs              %113.1 = FrameState         R     0x560a373a26e0+2761: [%233.6, %233.7, %233.8, %113.0], env=e0.2
  void                    Deopt              !v    %113.1, DeadCall@0x560a378953a0[Call#54], %113.0   !
BB255   <- [92]
  prom-           %255.0 = MkArg                    unboundValue, setClass[0x560a364a6db0]_p56, e0.2
  prom-           %255.1 = MkArg                    unboundValue, setClass[0x560a364a6db0]_p57, e0.2
  val?            %255.2 = StaticCall         !v    getClassDef[0x560a35741c70](%255.0, %255.1) { 0 1n } e0.2   <other>
  lgl$-           %255.3 = Is                       %255.2, NULL
  void                    StVar              lW    classDef, %255.2, e0.2
  val             %255.5 = ChkMissing         e     %255.2
  lgl$#-          %255.6 = CheckTrueFalse     e     %255.3
  void                    Branch                   %255.6 -> BB111 (if true) | BB93 (if false)
BB256   <- [92]
  void                    Nop                !     
  val?^ | miss    %256.1 = %92.0
  dr              %256.2 = CallTarget@0x560a378953a0[Call#50]
  goto BB90
BB71   <- [249]
  void                    StVar              lW    fun, %243.6, e243.5
  (cls|spec|blt)  %71.1 = LdFun              !v    substitute, <0x560a33cf0468>, e243.5
  prom-           %71.2 = MkArg                    unboundValue, setClass[0x560a364a6db0]_p67, e243.5
  prom-           %71.3 = MkArg                    unboundValue, setClass[0x560a364a6db0]_p69, e243.5
  val?            %71.4 = Call               !v    %71.1(%71.2, %71.3) e243.5   <code->
  val?^ | miss    %71.5 = LdVar              eR    body<-, e243.5
  lgl$#-          %71.6 = Identical                %71.5, function(fun, envir=environment(fun), value) <|...
  void                    Branch                   %71.6 -> BB251 (if true) | BB252 (if false)
BB70   <- [249]
  fs              %70.0 = FrameState         R     0x560a373a26e0+4345: [<blt invisible>], env=e0.2
  (cls|spec|blt)  %70.1 = LdFun              !v    is, e243.5
  fs              %70.2 = FrameState         R     0x560a362dc9f0+53: [%70.1], env=e243.5, next=%70.0
  void                    Deopt              !v    %70.2, DeadCall@0x560a379211c8[Call#3], %70.1   !
BB257   <- [114]
  val?+           %257.0 = CastType           d     dn %114.1   <val?_>
  void                    Branch                   %114.4 -> BB259 (if true) | BB260 (if false)
BB258   <- [114]
  void                    Nop                !     
  val?            %258.1 = %114.1
  dr              %258.2 = Typecheck@0x560a378953a0[Type#146]
  goto BB115
BB111   <- [255]
  (cls|spec|blt)  %111.0 = LdFun              !v    stop, e0.2
  fs              %111.1 = FrameState         R     0x560a373a26e0+2687: [%233.6, %233.7, %233.8, %111.0], env=e0.2
  void                    Deopt              !v    %111.1, DeadCall@0x560a378953a0[Call#51], %111.0   !
BB93   <- [255]
  void                    Nop                !     
  goto BB94
BB251   <- [71]
  val?^ | miss    %251.0 = LdVar              eR    fun, e243.5
  lgl$#-          %251.1 = IsType                   %251.0 isA val?~- | miss
  void                    Branch                   %251.1 -> BB253 (if true) | BB254 (if false)
BB252   <- [71]
  void                    Nop                !     
  val?^ | miss    %252.1 = %71.5
  dr              %252.2 = CallTarget@0x560a379211c8[Call#12]
  goto BB72
BB259   <- [257]
  val?+           %259.0 = CastType           d     dn %114.3   <val?_>
  val+            %259.1 = CallSafeBuiltin    wed   c(%257.0, %259.0)    <val?_>
  void                    StVar              lW    badContains, %259.1, e0.2
  goto BB94
BB260   <- [257]
  void                    Nop                !     
  val?            %260.1 = %114.3
  dr              %260.2 = Typecheck@0x560a378953a0[Type#147]
  goto BB115
BB115   <- [258, 260]
  val?^ | miss    %115.0 = Phi                      %258.1:BB258, %260.1:BB260
  val?^ | miss    %115.1 = %115.0
  dr              %115.2 = Phi                      %258.2:BB258, %260.2:BB260
  dr              %115.3 = %115.2
  fs              %115.4 = FrameState         R     0x560a373a26e0+2821: [%233.6, %233.7, %233.8, <blt c>, %114.1, %114.3], env=e0.2
  void                    Deopt              !v    %115.4, %115.3, %115.1   !
BB94   <- [93, 259]
  int$-           %94.0 = Inc                      %233.8
  lgl$-           %94.1 = Lt                 d     %233.7, %94.0, elided
  lgl$#-          %94.2 = Identical                %94.1, true
  void                    Branch                   %94.2 -> BB98 (if true) | BB97 (if false)
BB253   <- [251]
  val?~- | miss   %253.0 = CastType           d     dn %251.0
  val?-           %253.1 = Force!<value>            %253.0,    <cls->
  val?            %253.2 = StaticCall         !v    body<-[0x560a3774b270](%253.1, missingArg, %71.4) { 0 2n } e243.5
  void                    StVar              lW    fun, %253.2, e243.5
  val?^ | miss    %253.4 = LdVar              eR    env, e243.5
  val?            %253.5 = Force!<lazy>       !v    %253.4, e243.5   <env->
  (cls|spec|blt)  %253.6 = LdFun              !v    environment<-, <0x560a33d05128>, e243.5
  val?^ | miss    %253.7 = LdVar              eR    fun, e243.5
  lgl$#-          %253.8 = IsType                   %253.7 isA val?~- | miss
  void                    Branch                   %253.8 -> BB261 (if true) | BB262 (if false)
BB254   <- [251]
  void                    Nop                !     
  val?^ | miss    %254.1 = %251.0
  dr              %254.2 = Typecheck@0x560a379211c8[Type#20]
  goto BB72
BB72   <- [252, 254]
  val?^ | miss    %72.0 = Phi                      %252.1:BB252, %254.1:BB254
  val?^ | miss    %72.1 = %72.0
  dr              %72.2 = Phi                      %252.2:BB252, %254.2:BB254
  dr              %72.3 = %72.2
  fs              %72.4 = FrameState         R     0x560a373a26e0+4345: [<blt invisible>], env=e0.2
  fs              %72.5 = FrameState         R     0x560a362dc9f0+354: [%71.4], env=e243.5, next=%72.4
  void                    Deopt              !v    %72.5, %72.3, %72.1   !
BB98   <- [94]
  val?^ | miss    %98.0 = LdVar              eR    length, e0.2
  lgl$#-          %98.1 = Identical                <blt length>, %98.0   <true>
  void                    Branch                   %98.1 -> BB265 (if true) | BB266 (if false)
BB97   <- [94]
  val?            %97.0 = Extract2_1D        wed   %233.6, %94.0, elided
  void                    StVar              lW    ext, %97.0, e0.2
  (cls|spec|blt)  %97.2 = LdFun              !v    @, e0.2
  fs              %97.3 = FrameState         R     0x560a373a26e0+2891: [%233.6, %233.7, %94.0, %97.2], env=e0.2
  void                    Deopt              !v    %97.3, DeadCall@0x560a378953a0[Call#55], %97.2   !
BB261   <- [253]
  val?~- | miss   %261.0 = CastType           d     dn %253.7
  val?-           %261.1 = Force!<value>            %261.0,    <cls->
  val?            %261.2 = NamedCall          !v    %253.6(%261.1, value=%253.5) e243.5
  void                    StVar              lW    fun, %261.2, e243.5
  val?^ | miss    %261.4 = LdVar              eR    as, e243.5
  lgl$#-          %261.5 = Identical                %261.4, function(object, Class, strict=TRUE, ext=possi|...
  void                    Branch                   %261.5 -> BB263 (if true) | BB264 (if false)
BB262   <- [253]
  fs              %262.0 = FrameState         R     0x560a373a26e0+4345: [<blt invisible>], env=e0.2
  fs              %262.1 = FrameState         R     0x560a362dc9f0+441: [%253.5], env=e243.5, next=%262.0
  void                    Deopt              !v    %262.1, Typecheck@0x560a379211c8[Type#22], %253.7   !
BB265   <- [98]
  val?^ | miss    %265.0 = LdVar              eR    badContains, e0.2
  lgl$#-          %265.1 = IsType                   %265.0 isA val?~- | miss
  void                    Branch                   %265.1 -> BB267 (if true) | BB268 (if false)
BB266   <- [98]
  void                    Nop                !     
  lgl$#-          %266.1 = %98.1
  dr              %266.2 = DeadBranchReached@0x560a378953a0[Test#17]
  goto BB95
BB263   <- [261]
  prom-           %263.0 = MkArg                    unboundValue, setClass[0x560a364a6db0]_p75 (!refl), e243.5
  val?            %263.1 = Call               !v    function(object, Class, strict=TRUE, ext=possi|...(%263.0, "classGeneratorFunction") e243.5   <cls>
  void                    StVar              lW    fun, %263.1, e243.5
  (cls|spec|blt)  %263.3 = LdFun              !v    <-, <0x560a33ce5da8>, e243.5
  prom-           %263.4 = MkArg                    unboundValue, setClass[0x560a364a6db0]_p76, e243.5
  prom-           %263.5 = MkArg                    unboundValue, setClass[0x560a364a6db0]_p79, e243.5
  val?            %263.6 = Call               !v    %263.3(%263.4, %263.5) e243.5
  (cls|spec|blt)  %263.7 = LdFun              !v    <-, <0x560a33ce5da8>, e243.5
  prom-           %263.8 = MkArg                    unboundValue, setClass[0x560a364a6db0]_p82, e243.5
  prom-           %263.9 = MkArg                    unboundValue, setClass[0x560a364a6db0]_p85, e243.5
  val?            %263.10 = Call               !v    %263.7(%263.8, %263.9) e243.5
  val?^ | miss    %263.11 = LdVar              eR    fun, e243.5
  val?            %263.12 = Force!<value>      !v    %263.11, e243.5   <cls>
  val?            %263.13 = PopContext         C     %263.12, %243.2   <cls>
  void                    Invisible          v     
  void                    Return             l     %263.13
BB264   <- [261]
  fs              %264.0 = FrameState         R     0x560a373a26e0+4345: [<blt invisible>], env=e0.2
  fs              %264.1 = FrameState         R     0x560a362dc9f0+509: [], env=e243.5, next=%264.0
  void                    Deopt              !v    %264.1, CallTarget@0x560a379211c8[Call#14], %261.4   !
BB267   <- [265]
  val?~- | miss   %267.0 = CastType           d     dn %265.0
  val?-           %267.1 = Force!<value>            %267.0,    <str->
  (int|real)$-    %267.2 = CallSafeBuiltin    wed   length(%267.1)    <int$->
  lgl$#-          %267.3 = IsType                   %267.2 isA int$-
  void                    Branch                   %267.3 -> BB269 (if true) | BB270 (if false)
BB268   <- [265]
  void                    Nop                !     
  val?^ | miss    %268.1 = %265.0
  dr              %268.2 = Typecheck@0x560a378953a0[Type#172]
  goto BB95
BB95   <- [266, 268]
  val?^ | miss    %95.0 = Phi                      %266.1:BB266, %268.1:BB268
  val?^ | miss    %95.1 = %95.0
  dr              %95.2 = Phi                      %266.2:BB266, %268.2:BB268
  dr              %95.3 = %95.2
  fs              %95.4 = FrameState         R     0x560a373a26e0+2857: [%233.6, %233.7, %233.8], env=e0.2
  void                    Deopt              !v    %95.4, %95.3, %95.1   !
BB269   <- [267]
  int$-           %269.0 = CastType           d     dn %267.2
  lgl$#-          %269.1 = CheckTrueFalse     e     %269.0
  void                    Branch                   %269.1 -> BB110 (if true) | BB101 (if false)
BB270   <- [267]
  void                    Nop                !     
  (int|real)$-    %270.1 = %267.2
  dr              %270.2 = Typecheck@0x560a378953a0[Type#173]
  goto BB99
BB110   <- [269]
  (cls|spec|blt)  %110.0 = LdFun              !v    paste, e0.2
  fs              %110.1 = FrameState         R     0x560a373a26e0+3371: [%110.0], env=e0.2
  void                    Deopt              !v    %110.1, DeadCall@0x560a378953a0[Call#65], %110.0   !
BB101   <- [269]
  val?^ | miss    %101.0 = LdVar              eR    attr, e0.2
  lgl$#-          %101.1 = Identical                <blt attr>, %101.0   <true>
  void                    Branch                   %101.1 -> BB271 (if true) | BB272 (if false)
BB99   <- [270, 272]
  val?^ | miss    %99.0 = Phi                      %270.1:BB270, %272.1:BB272
  val?^ | miss    %99.1 = %99.0
  dr              %99.2 = Phi                      %270.2:BB270, %272.2:BB272
  dr              %99.3 = %99.2
  fs              %99.4 = FrameState         R     0x560a373a26e0+3350: [%267.2], env=e0.2
  void                    Deopt              !v    %99.4, %99.3, %99.1   !
BB271   <- [101]
  (cls|spec|blt)  %271.0 = LdFun              !v    @, <0x560a33cf0bd8>, e0.2
  prom-           %271.1 = MkArg                    unboundValue, setClass[0x560a364a6db0]_p58, e0.2
  prom-           %271.2 = MkArg                    unboundValue, setClass[0x560a364a6db0]_p59, e0.2
  val?            %271.3 = Call               !v    %271.0(%271.1, %271.2) e0.2   <vec+>
  val?            %271.4 = CallBuiltin        !v    attr(%271.3, "conflicts") e0.2   <nil->
  lgl$#-          %271.5 = IsType                   %271.4 isA val?-
  void                    Branch                   %271.5 -> BB273 (if true) | BB274 (if false)
BB272   <- [101]
  void                    Nop                !     
  lgl$#-          %272.1 = %101.1
  dr              %272.2 = DeadBranchReached@0x560a378953a0[Test#19]
  goto BB99
BB273   <- [271]
  val?-           %273.0 = CastType           d     dn %271.4   <nil->
  (int|real)$-    %273.1 = CallSafeBuiltin    wed   length(%273.0)    <int$->
  lgl$#-          %273.2 = IsType                   %273.1 isA int$-
  void                    Branch                   %273.2 -> BB275 (if true) | BB276 (if false)
BB274   <- [271]
  fs              %274.0 = FrameState         R     0x560a373a26e0+3935: [<blt length>, %271.4], env=e0.2
  void                    Deopt              !v    %274.0, Typecheck@0x560a378953a0[Type#227], %271.4   !
BB275   <- [273]
  int$-           %275.0 = CastType           d     dn %273.1
  lgl$-           %275.1 = Gt                 d     %275.0, 0, elided   <lgl$->
  lgl$#-          %275.2 = CheckTrueFalse     e     %275.1
  void                    Branch                   %275.2 -> BB109 (if true) | BB106 (if false)
BB276   <- [273]
  void                    Nop                !     
  (int|real)$-    %276.1 = %273.1
  dr              %276.2 = Typecheck@0x560a378953a0[Type#228]
  goto BB104
BB109   <- [275]
  (cls|spec|blt)  %109.0 = LdFun              !v    .reportSuperclassConflicts, e0.2
  fs              %109.1 = FrameState         R     0x560a373a26e0+3990: [%109.0], env=e0.2
  void                    Deopt              !v    %109.1, DeadCall@0x560a378953a0[Call#99], %109.0   !
BB106   <- [275]
  val?^ | miss    %106.0 = LdVar              eR    .checkRequiredGenerics, e0.2
  lgl$#-          %106.1 = Identical                %106.0, function(Class, classDef, where) <(rir::Dispat|...
  void                    Branch                   %106.1 -> BB277 (if true) | BB278 (if false)
BB104   <- [276, 278]
  val?^ | miss    %104.0 = Phi                      %276.1:BB276, %278.1:BB278
  val?^ | miss    %104.1 = %104.0
  dr              %104.2 = Phi                      %276.2:BB276, %278.2:BB278
  dr              %104.3 = %104.2
  fs              %104.4 = FrameState         R     0x560a373a26e0+3957: [%273.1], env=e0.2
  void                    Deopt              !v    %104.4, %104.3, %104.1   !
BB277   <- [106]
  prom-           %277.0 = MkArg                    unboundValue, setClass[0x560a364a6db0]_p60, e0.2
  prom-           %277.1 = MkArg                    unboundValue, setClass[0x560a364a6db0]_p61, e0.2
  prom-           %277.2 = MkArg                    unboundValue, setClass[0x560a364a6db0]_p62, e0.2
  val?            %277.3 = StaticCall         !v    .checkRequiredGenerics[0x560a373b14a0](%277.0, %277.1, %277.2) e0.2
  val?^ | miss    %277.4 = LdVar              eR    sealed, e0.2
  val?            %277.5 = Force!<value>      !v    %277.4, e0.2   <lgl$->
  lgl$#-          %277.6 = CheckTrueFalse     we    %277.5
  void                    Branch                   %277.6 -> BB108 (if true) | BB107 (if false)
BB278   <- [106]
  void                    Nop                !     
  val?^ | miss    %278.1 = %106.0
  dr              %278.2 = CallTarget@0x560a378953a0[Call#101]
  goto BB104
BB108   <- [277]
  (cls|spec|blt)  %108.0 = LdFun              !v    <-, e0.2
  fs              %108.1 = FrameState         R     0x560a373a26e0+4101: [%108.0], env=e0.2
  void                    Deopt              !v    %108.1, DeadCall@0x560a378953a0[Call#102], %108.0   !
BB107   <- [277]
  void                    Nop                !     
  goto BB62
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     character, e0.0
  val?            %0.2  = Call               !     %0.1() e0.0   <val?_>
  void                    Return             l     %0.2
Prom 3:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     list, <0x560a33d055c0>, e0.0
  val?            %0.2  = Call               !     %0.1() e0.0   <vec->
  void                    Return             l     %0.2
Prom 4:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     topenv, <0x560a35b70b98>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, setClass[0x560a364a6db0]_p5, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <env->
  void                    Return             l     %0.3
Prom 5:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     parent.frame, <0x560a33e05170>, e0.0
  val?            %0.2  = Call               !     %0.1() e0.0   <env->
  void                    Return             l     %0.2
Prom 6:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     .newExternalptr, <0x560a35d2ee70>, e0.0
  val?            %0.2  = Call               !     %0.1() e0.0   <other->
  void                    Return             l     %0.2
Prom 8:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     getPackageName, <0x560a35d059f8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, setClass[0x560a364a6db0]_p9, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <str$->
  void                    Return             l     %0.3
Prom 9:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 11:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    Class, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 12:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 13:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    oldDef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <nil->
  void                    Return             l     %0.3
Prom 14:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    representation, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 15:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    representation, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 16:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    Class, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 17:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    properties, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 18:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    superClasses, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 19:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    prototype, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <nil->
  void                    Return             l     %0.3
Prom 20:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    package, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 21:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    validity, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <nil->
  void                    Return             l     %0.3
Prom 22:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    access, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <vec->
  void                    Return             l     %0.3
Prom 23:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    version, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <other->
  void                    Return             l     %0.3
Prom 24:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    sealed, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <lgl$->
  void                    Return             l     %0.3
Prom 25:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 26:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    classDef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 27:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    contains, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 28:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    Class, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 29:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    classDef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <other>
  void                    Return             l     %0.3
Prom 30:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 31:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    Class, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 32:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    classDef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 33:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    Class, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 34:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    classDef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <other>
  void                    Return             l     %0.3
Prom 35:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 36:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    classDef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <other>
  void                    Return             l     %0.3
Prom 37:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 38:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    classDef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 39:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    sealed, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 40:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, e0.0
  prom-           %0.2  = MkArg                    unboundValue, setClass[0x560a364a6db0]_p41, e0.0
  prom-           %0.3  = MkArg                    unboundValue, setClass[0x560a364a6db0]_p42, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 41:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    classDef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 42:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    sealed, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 43:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    Class, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 44:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    classDef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <other>
  void                    Return             l     %0.3
Prom 45:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 46:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    classDef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 47:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    contains, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 48:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    ext, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 49:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    superClass, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 50:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     try, <0x560a34305428>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, setClass[0x560a364a6db0]_p51, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <other>
  void                    Return             l     %0.3
Prom 51:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     setIs, <0x560a36740020>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, setClass[0x560a364a6db0]_p52, e0.0
  prom-           %0.3  = MkArg                    unboundValue, setClass[0x560a364a6db0]_p53, e0.0
  prom-           %0.4  = MkArg                    unboundValue, setClass[0x560a364a6db0]_p54, e0.0
  prom-           %0.5  = MkArg                    unboundValue, setClass[0x560a364a6db0]_p55, e0.0
  val?            %0.6  = NamedCall          !     %0.1(%0.2, %0.3, classDef=%0.4, where=%0.5) e0.0   <other>
  void                    Return             l     %0.6
Prom 52:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    Class, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 53:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    class2, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$+>
  void                    Return             l     %0.3
Prom 54:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    classDef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <other>
  void                    Return             l     %0.3
Prom 55:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 56:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    Class, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 57:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 58:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    classDef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 59:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    contains, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 60:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    Class, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 61:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    classDef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <other>
  void                    Return             l     %0.3
Prom 62:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 63:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     length, <0x560a33cf1a90>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, setClass[0x560a364a6db0]_p64, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <int$->
  void                    Return             l     %0.3
Prom 64:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    x, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <(nil|vec)->
  void                    Return             l     %0.3
Prom 66:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    classDef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <other>
  void                    Return             l     %0.3
Prom 67:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     new, e0.0
  prom-           %0.2  = MkArg                    unboundValue, setClass[0x560a364a6db0]_p68, e0.0
  (miss|dots)     %0.3  = LdDots             R     , e0.0
  *dots-          %0.4  = ExpandDots               %0.3
  val?            %0.5  = NamedCall          !     %0.1(%0.2, .xpandDotsTrigger=%0.4) e0.0   <val?_>
  void                    Return             l     %0.5
Prom 68:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    CLASS, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 69:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     list, e0.0
  prom-           %0.2  = MkArg                    unboundValue, setClass[0x560a364a6db0]_p70, e0.0
  val?            %0.3  = NamedCall          !     %0.1(CLASS=%0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 70:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, e0.0
  prom-           %0.2  = MkArg                    unboundValue, setClass[0x560a364a6db0]_p71, e0.0
  prom-           %0.3  = MkArg                    unboundValue, setClass[0x560a364a6db0]_p72, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 71:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    classDef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 72:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    className, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 75:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fun, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls->
  void                    Return             l     %0.3
Prom 76:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, e0.0
  prom-           %0.2  = MkArg                    unboundValue, setClass[0x560a364a6db0]_p77, e0.0
  prom-           %0.3  = MkArg                    unboundValue, setClass[0x560a364a6db0]_p78, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 77:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fun, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 78:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    className, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 79:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, e0.0
  prom-           %0.2  = MkArg                    unboundValue, setClass[0x560a364a6db0]_p80, e0.0
  prom-           %0.3  = MkArg                    unboundValue, setClass[0x560a364a6db0]_p81, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 80:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    classDef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 81:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    className, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 82:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, e0.0
  prom-           %0.2  = MkArg                    unboundValue, setClass[0x560a364a6db0]_p83, e0.0
  prom-           %0.3  = MkArg                    unboundValue, setClass[0x560a364a6db0]_p84, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 83:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fun, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 84:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    package, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 85:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, e0.0
  prom-           %0.2  = MkArg                    unboundValue, setClass[0x560a364a6db0]_p86, e0.0
  prom-           %0.3  = MkArg                    unboundValue, setClass[0x560a364a6db0]_p87, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 86:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    classDef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 87:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    package, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3

│ setClass[0x560a364a6db0]                                                     │
└──────────────────────────────────────────────────────────────────────────────┘
