
┌──────────────────────────────────────────────────────────────────────────────┐
│ rir.compile[0x560912f09610]                                                  │
│ Context: CorrOrd,!TMany                                                      │
│ Properties:  Eager                                                           │
├────── Final PIR Version
rir.compile[0x560912f09610]
BB0
  env             e0.0  = MkEnv              l     parent=R_GlobalEnv, context 1
  (cls|spec|blt)  %0.1  = LdFun              !v    matrix, R_GlobalEnv
  prom-           %0.2  = MkArg                    unboundValue, rir.compile[0x560912f09610]_p0 (!refl), 
  val?            %0.3  = NamedCall          !v    %0.1(%0.2, nrow=2, ncol=3, byrow=true) e0.0   <val?_>
  void                    StVar              lW    x, %0.3, e0.0
  (cls|spec|blt)  %0.5  = LdFun              !v    matrix, e0.0
  prom-           %0.6  = MkArg                    unboundValue, rir.compile[0x560912f09610]_p1 (!refl), 
  val?            %0.7  = NamedCall          !v    %0.5(%0.6, nrow=3, ncol=4, byrow=true) e0.0   <val?_>
  void                    StVar              lW    y, %0.7, e0.0
  (cls|spec|blt)  %0.9  = LdFun              !v    stopifnot, e0.0
  prom-           %0.10 = MkArg                    unboundValue, rir.compile[0x560912f09610]_p2, e0.0
  val?            %0.11 = Call               !v    %0.9(%0.10) e0.0
  (cls|spec|blt)  %0.12 = LdFun              !v    nrow, e0.0
  prom-           %0.13 = MkArg                    unboundValue, rir.compile[0x560912f09610]_p5, e0.0
  val?            %0.14 = Call               !v    %0.12(%0.13) e0.0   <val?_>
  void                    StVar              lW    rows, %0.14, e0.0
  (cls|spec|blt)  %0.16 = LdFun              !v    ncol, e0.0
  prom-           %0.17 = MkArg                    unboundValue, rir.compile[0x560912f09610]_p6, e0.0
  val?            %0.18 = Call               !v    %0.16(%0.17) e0.0   <val?_>
  void                    StVar              lW    cols, %0.18, e0.0
  (cls|spec|blt)  %0.20 = LdFun              !v    ncol, e0.0
  prom-           %0.21 = MkArg                    unboundValue, rir.compile[0x560912f09610]_p7, e0.0
  val?            %0.22 = Call               !v    %0.20(%0.21) e0.0   <val?_>
  void                    StVar              lW    inner, %0.22, e0.0
  val?^ | miss    %0.24 = LdVar              eR    %*%, e0.0
  lgl$#-          %0.25 = Identical                <blt %*%>, %0.24   <@?>
  void                    Branch                   %0.25 -> BB2 (if true) | BB75 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    x, e0.0
  val?            %2.1  = Force!             !v    %2.0, e0.0   <val?_>
  val?^ | miss    %2.2  = LdVar              eR    y, e0.0
  val?            %2.3  = Force!             !v    %2.2, e0.0   <val?_>
  lgl$#-          %2.4  = IsType                   %2.3 isA val?+
  lgl$#-          %2.5  = IsType                   %2.1 isA val?+
  void                    Branch                   %2.5 -> BB76 (if true) | BB77 (if false)
BB75   <- [0]
  val?^ | miss    %75.0 = LdVar              eR    x, e0.0
  val?            %75.1 = Force!             !v    %75.0, e0.0   <val?_>
  val?^ | miss    %75.2 = LdVar              eR    y, e0.0
  val?            %75.3 = Force!             !v    %75.2, e0.0   <val?_>
  val?            %75.4 = CallBuiltin        !v    %*%(%75.1, %75.3) e0.0
  val?            %75.5 = %75.4
  goto BB5
BB76   <- [2]
  val?+           %76.0 = CastType           d     dn %2.1   <val?_>
  void                    Branch                   %2.4 -> BB78 (if true) | BB79 (if false)
BB77   <- [2]
  void                    Nop                !     
  val?            %77.1 = %2.1
  dr              %77.2 = Typecheck@0x560912081648[Type#17]
  goto BB3
BB5   <- [75, 78]
  val?            %5.0  = Phi                      %75.5:BB75, %78.2:BB78   <val?_>
  val?            %5.1  = %5.0
  void                    StVar              lW    res1, %5.1, e0.0
  (cls|spec|blt)  %5.3  = LdFun              !v    matrix, e0.0
  prom-           %5.4  = MkArg                    unboundValue, rir.compile[0x560912f09610]_p10, e0.0
  prom-           %5.5  = MkArg                    unboundValue, rir.compile[0x560912f09610]_p11, e0.0
  val?            %5.6  = NamedCall          !v    %5.3(0, nrow=%5.4, ncol=%5.5) e0.0   <val?_>
  void                    StVar              lW    res2, %5.6, e0.0
  void                    StVar              lW    c, 1, e0.0
  goto BB6
BB78   <- [76]
  val?+           %78.0 = CastType           d     dn %2.3   <val?_>
  val+            %78.1 = CallSafeBuiltin    wed   %*%(%76.0, %78.0) 
  val+            %78.2 = %78.1
  goto BB5
BB79   <- [76]
  void                    Nop                !     
  val?            %79.1 = %2.3
  dr              %79.2 = Typecheck@0x560912081648[Type#18]
  goto BB3
BB3   <- [77, 79]
  val?^ | miss    %3.0  = Phi                      %77.1:BB77, %79.1:BB79
  val?^ | miss    %3.1  = %3.0
  dr              %3.2  = Phi                      %77.2:BB77, %79.2:BB79
  dr              %3.3  = %3.2
  fs              %3.4  = FrameState         R     0x560912dd2d70+413: [<blt %*%>, %2.1, %2.3], env=e0.0
  void                    Deopt              !v    %3.4, %3.3, %3.1   !
BB6   <- [55, 5]
  void                    StVar              lW    r, 1, e0.0
  goto BB7
BB7   <- [49, 6]
  void                    StVar              lW    i, 1, e0.0
  val?^ | miss    %7.1  = LdVar              eR    res2 !upd, e0.0
  val?            %7.2  = Force!             !v    %7.1, e0.0
  val?^ | miss    %7.3  = LdVar              eR    res2, e0.0
  val?            %7.4  = Force!             !v    %7.3, e0.0   <val?_>
  lgl$#-          %7.5  = IsType                   %7.4 isA val+   <@?>
  void                    Branch                   %7.5 -> BB74 (if true) | BB8 (if false)
BB74   <- [7]
  val?^ | miss    %74.0 = LdVar              eR    r, e0.0
  val?            %74.1 = Force!             !v    %74.0, e0.0   <val?_>
  val?^ | miss    %74.2 = LdVar              eR    c, e0.0
  val?            %74.3 = Force!             !v    %74.2, e0.0   <val?_>
  val?            %74.4 = %74.3
  val?            %74.5 = %74.1
  goto BB9
BB8   <- [7]
  prom-           %8.0  = MkArg                    unboundValue, rir.compile[0x560912f09610]_p22, e0.0
  prom-           %8.1  = MkArg                    unboundValue, rir.compile[0x560912f09610]_p23, e0.0
  prom-           %8.2  = %8.1
  prom-           %8.3  = %8.0
  goto BB9
BB9   <- [8, 74]
  val?            %9.0  = Phi                      %74.4:BB74, %8.2:BB8
  val?            %9.1  = %9.0
  val?            %9.2  = Phi                      %74.5:BB74, %8.3:BB8
  val?            %9.3  = %9.2
  val?            %9.4  = Extract1_2D        !v    %7.4, %9.3, %9.1, e0.0   <val?_>
  val?^ | miss    %9.5  = LdVar              eR    x, e0.0
  val?            %9.6  = Force!             !v    %9.5, e0.0   <val?_>
  lgl$#-          %9.7  = IsType                   %9.6 isA val+   <@?>
  void                    Branch                   %9.7 -> BB73 (if true) | BB10 (if false)
BB73   <- [9]
  val?^ | miss    %73.0 = LdVar              eR    r, e0.0
  val?            %73.1 = Force!             !v    %73.0, e0.0   <val?_>
  val?^ | miss    %73.2 = LdVar              eR    i, e0.0
  val?            %73.3 = Force!             !v    %73.2, e0.0   <val?_>
  val?            %73.4 = %73.3
  val?            %73.5 = %73.1
  goto BB11
BB10   <- [9]
  prom-           %10.0 = MkArg                    unboundValue, rir.compile[0x560912f09610]_p20, e0.0
  prom-           %10.1 = MkArg                    unboundValue, rir.compile[0x560912f09610]_p21, e0.0
  prom-           %10.2 = %10.1
  prom-           %10.3 = %10.0
  goto BB11
BB11   <- [10, 73]
  val?            %11.0 = Phi                      %73.4:BB73, %10.2:BB10
  val?            %11.1 = %11.0
  val?            %11.2 = Phi                      %73.5:BB73, %10.3:BB10
  val?            %11.3 = %11.2
  val?            %11.4 = Extract1_2D        !v    %9.6, %11.3, %11.1, e0.0   <val?_>
  val?^ | miss    %11.5 = LdVar              eR    y, e0.0
  val?            %11.6 = Force!             !v    %11.5, e0.0   <val?_>
  lgl$#-          %11.7 = IsType                   %11.6 isA val+   <@?>
  void                    Branch                   %11.7 -> BB72 (if true) | BB12 (if false)
BB72   <- [11]
  val?^ | miss    %72.0 = LdVar              eR    i, e0.0
  val?            %72.1 = Force!             !v    %72.0, e0.0   <val?_>
  val?^ | miss    %72.2 = LdVar              eR    c, e0.0
  val?            %72.3 = Force!             !v    %72.2, e0.0   <val?_>
  val?            %72.4 = %72.3
  val?            %72.5 = %72.1
  goto BB13
BB12   <- [11]
  prom-           %12.0 = MkArg                    unboundValue, rir.compile[0x560912f09610]_p18, e0.0
  prom-           %12.1 = MkArg                    unboundValue, rir.compile[0x560912f09610]_p19, e0.0
  prom-           %12.2 = %12.1
  prom-           %12.3 = %12.0
  goto BB13
BB13   <- [12, 72]
  val?            %13.0 = Phi                      %72.4:BB72, %12.2:BB12
  val?            %13.1 = %13.0
  val?            %13.2 = Phi                      %72.5:BB72, %12.3:BB12
  val?            %13.3 = %13.2
  val?            %13.4 = Extract1_2D        !v    %11.6, %13.3, %13.1, e0.0   <val?_>
  lgl$#-          %13.5 = IsType                   %13.4 isA val?+
  lgl$#-          %13.6 = IsType                   %11.4 isA val?+
  void                    Branch                   %13.6 -> BB80 (if true) | BB81 (if false)
BB80   <- [13]
  val?+           %80.0 = CastType           d     dn %11.4   <val?_>
  void                    Branch                   %13.5 -> BB82 (if true) | BB83 (if false)
BB81   <- [13]
  void                    Nop                !     
  val?            %81.1 = %11.4
  dr              %81.2 = Typecheck@0x560912081648[Type#34]
  goto BB14
BB82   <- [80]
  val?+           %82.0 = CastType           d     dn %13.4   <val?_>
  (int|real|complex)+ %82.1 = Mul                wed   %80.0, %82.0, elided   <val?_>
  lgl$#-          %82.2 = IsType                   %9.4 isA val?+
  void                    Branch                   %82.2 -> BB84 (if true) | BB85 (if false)
BB83   <- [80]
  void                    Nop                !     
  val?            %83.1 = %13.4
  dr              %83.2 = Typecheck@0x560912081648[Type#40]
  goto BB14
BB14   <- [81, 83]
  val?^ | miss    %14.0 = Phi                      %81.1:BB81, %83.1:BB83
  val?^ | miss    %14.1 = %14.0
  dr              %14.2 = Phi                      %81.2:BB81, %83.2:BB83
  dr              %14.3 = %14.2
  fs              %14.4 = FrameState         R     0x560912dd2d70+822: [%9.4, %11.4, %13.4], env=e0.0
  void                    Deopt              !v    %14.4, %14.3, %14.1   !
BB84   <- [82]
  val?+           %84.0 = CastType           d     dn %9.4   <val?_>
  (int|real|complex)+ %84.1 = Add                wed   %84.0, %82.1, elided   <val?_>
  val?^ | miss    %84.2 = LdVar              eR    res2, e0.0
  val?            %84.3 = Force!             !v    %84.2, e0.0   <val?_>
  val?^ | miss    %84.4 = LdVar              eR    r, e0.0
  val?            %84.5 = Force!             !v    %84.4, e0.0   <val?_>
  val?^ | miss    %84.6 = LdVar              eR    c, e0.0
  val?            %84.7 = Force!             !v    %84.6, e0.0   <val?_>
  lgl$#-          %84.8 = IsType                   %84.7 isA val?+
  lgl$#-          %84.9 = IsType                   %84.3 isA val?+
  lgl$#-          %84.10 = IsType                   %84.5 isA val?+
  void                    Branch                   %84.9 -> BB86 (if true) | BB87 (if false)
BB85   <- [82]
  fs              %85.0 = FrameState         R     0x560912dd2d70+829: [%9.4, %82.1], env=e0.0
  void                    Deopt              !v    %85.0, Typecheck@0x560912081648[Type#28], %9.4   !
BB86   <- [84]
  val?+           %86.0 = CastType           d     dn %84.3   <val?_>
  void                    Branch                   %84.10 -> BB88 (if true) | BB89 (if false)
BB87   <- [84]
  void                    Nop                !     
  val?            %87.1 = %84.3
  dr              %87.2 = Typecheck@0x560912081648[Type#43]
  goto BB18
BB88   <- [86]
  val?+           %88.0 = CastType           d     dn %84.5   <val?_>
  void                    Branch                   %84.8 -> BB90 (if true) | BB91 (if false)
BB89   <- [86]
  void                    Nop                !     
  val?            %89.1 = %84.5
  dr              %89.2 = Typecheck@0x560912081648[Type#44]
  goto BB18
BB18   <- [87, 89, 91]
  val?^ | miss    %18.0 = Phi                      %87.1:BB87, %89.1:BB89, %91.1:BB91
  val?^ | miss    %18.1 = %18.0
  dr              %18.2 = Phi                      %87.2:BB87, %89.2:BB89, %91.2:BB91
  dr              %18.3 = %18.2
  fs              %18.4 = FrameState         R     0x560912dd2d70+877: [%84.1, %84.3, %84.5, %84.7], env=e0.0
  void                    Deopt              !v    %18.4, %18.3, %18.1   !
BB90   <- [88]
  val?+           %90.0 = CastType           d     dn %84.7   <val?_>
  val?+           %90.1 = Subassign1_2D      wed   %84.1, %86.0, %88.0, %90.0, elided
  void                    StVar              lW    res2, %90.1, e0.0
  val?^ | miss    %90.3 = LdVar              eR    i, e0.0
  val?            %90.4 = Force!             !v    %90.3, e0.0   <val?_>
  lgl$#-          %90.5 = IsType                   %90.4 isA val?+
  void                    Branch                   %90.5 -> BB92 (if true) | BB93 (if false)
BB91   <- [88]
  void                    Nop                !     
  val?            %91.1 = %84.7
  dr              %91.2 = Typecheck@0x560912081648[Type#45]
  goto BB18
BB92   <- [90]
  val?+           %92.0 = CastType           d     dn %90.4   <val?_>
  (real|complex)+ %92.1 = Add                wed   %92.0, 1, elided   <val?_>
  void                    StVar              lW    i, %92.1, e0.0
  val?^ | miss    %92.3 = LdVar              eR    inner, e0.0
  val?            %92.4 = Force!             !v    %92.3, e0.0   <val?_>
  lgl$#-          %92.5 = IsType                   %92.4 isA val?+
  void                    Branch                   %92.5 -> BB94 (if true) | BB95 (if false)
BB93   <- [90]
  fs              %93.0 = FrameState         R     0x560912dd2d70+901: [%90.4], env=e0.0
  void                    Deopt              !v    %93.0, Typecheck@0x560912081648[Type#46], %90.4   !
BB94   <- [92]
  val?+           %94.0 = CastType           d     dn %92.4   <val?_>
  lgl             %94.1 = Gt                 wed   %92.1, %94.0, elided   <val?_>
  lgl$#-          %94.2 = CheckTrueFalse     we    %94.1
  void                    Branch                   %94.2 -> BB71 (if true) | BB24 (if false)
BB95   <- [92]
  fs              %95.0 = FrameState         R     0x560912dd2d70+950: [%92.1, %92.4], env=e0.0
  void                    Deopt              !v    %95.0, Typecheck@0x560912081648[Type#49], %92.4   !
BB71   <- [94]
  void                    Nop                !     
  goto BB44
BB24   <- [94]
  void                    Nop                !     
  goto BB25
BB44   <- [43, 71]
  val?^ | miss    %44.0 = LdVar              eR    r, e0.0
  val?            %44.1 = Force!             !v    %44.0, e0.0   <val?_>
  lgl$#-          %44.2 = IsType                   %44.1 isA val?+
  void                    Branch                   %44.2 -> BB96 (if true) | BB97 (if false)
BB25   <- [24, 42]
  val?^ | miss    %25.0 = LdVar              eR    res2 !upd, e0.0
  val?            %25.1 = Force!             !v    %25.0, e0.0
  val?^ | miss    %25.2 = LdVar              eR    res2, e0.0
  val?            %25.3 = Force!             !v    %25.2, e0.0   <val?_>
  lgl$#-          %25.4 = IsType                   %25.3 isA val+   <@?>
  void                    Branch                   %25.4 -> BB70 (if true) | BB26 (if false)
BB96   <- [44]
  val?+           %96.0 = CastType           d     dn %44.1   <val?_>
  (real|complex)+ %96.1 = Add                wed   %96.0, 1, elided   <val?_>
  void                    StVar              lW    r, %96.1, e0.0
  val?^ | miss    %96.3 = LdVar              eR    rows, e0.0
  val?            %96.4 = Force!             !v    %96.3, e0.0   <val?_>
  lgl$#-          %96.5 = IsType                   %96.4 isA val?+
  void                    Branch                   %96.5 -> BB98 (if true) | BB99 (if false)
BB97   <- [44]
  fs              %97.0 = FrameState         R     0x560912dd2d70+1416: [%44.1], env=e0.0
  void                    Deopt              !v    %97.0, Typecheck@0x560912081648[Type#79], %44.1   !
BB70   <- [25]
  val?^ | miss    %70.0 = LdVar              eR    r, e0.0
  val?            %70.1 = Force!             !v    %70.0, e0.0   <val?_>
  val?^ | miss    %70.2 = LdVar              eR    c, e0.0
  val?            %70.3 = Force!             !v    %70.2, e0.0   <val?_>
  val?            %70.4 = %70.3
  val?            %70.5 = %70.1
  goto BB27
BB26   <- [25]
  prom-           %26.0 = MkArg                    unboundValue, rir.compile[0x560912f09610]_p16, e0.0
  prom-           %26.1 = MkArg                    unboundValue, rir.compile[0x560912f09610]_p17, e0.0
  prom-           %26.2 = %26.1
  prom-           %26.3 = %26.0
  goto BB27
BB98   <- [96]
  val?+           %98.0 = CastType           d     dn %96.4   <val?_>
  lgl             %98.1 = Gt                 wed   %96.1, %98.0, elided   <val?_>
  lgl$#-          %98.2 = CheckTrueFalse     we    %98.1
  void                    Branch                   %98.2 -> BB50 (if true) | BB49 (if false)
BB99   <- [96]
  fs              %99.0 = FrameState         R     0x560912dd2d70+1465: [%96.1, %96.4], env=e0.0
  void                    Deopt              !v    %99.0, Typecheck@0x560912081648[Type#82], %96.4   !
BB27   <- [26, 70]
  val?            %27.0 = Phi                      %70.4:BB70, %26.2:BB26
  val?            %27.1 = %27.0
  val?            %27.2 = Phi                      %70.5:BB70, %26.3:BB26
  val?            %27.3 = %27.2
  val?            %27.4 = Extract1_2D        !v    %25.3, %27.3, %27.1, e0.0   <val?_>
  val?^ | miss    %27.5 = LdVar              eR    x, e0.0
  val?            %27.6 = Force!             !v    %27.5, e0.0   <val?_>
  lgl$#-          %27.7 = IsType                   %27.6 isA val+   <@?>
  void                    Branch                   %27.7 -> BB69 (if true) | BB28 (if false)
BB50   <- [98]
  val?^ | miss    %50.0 = LdVar              eR    c, e0.0
  val?            %50.1 = Force!             !v    %50.0, e0.0   <val?_>
  lgl$#-          %50.2 = IsType                   %50.1 isA val?+
  void                    Branch                   %50.2 -> BB100 (if true) | BB101 (if false)
BB49   <- [98]
  void                    Nop                !     
  goto BB7
BB69   <- [27]
  val?^ | miss    %69.0 = LdVar              eR    r, e0.0
  val?            %69.1 = Force!             !v    %69.0, e0.0   <val?_>
  val?^ | miss    %69.2 = LdVar              eR    i, e0.0
  val?            %69.3 = Force!             !v    %69.2, e0.0   <val?_>
  val?            %69.4 = %69.3
  val?            %69.5 = %69.1
  goto BB29
BB28   <- [27]
  prom-           %28.0 = MkArg                    unboundValue, rir.compile[0x560912f09610]_p14, e0.0
  prom-           %28.1 = MkArg                    unboundValue, rir.compile[0x560912f09610]_p15, e0.0
  prom-           %28.2 = %28.1
  prom-           %28.3 = %28.0
  goto BB29
BB100   <- [50]
  val?+           %100.0 = CastType           d     dn %50.1   <val?_>
  (real|complex)+ %100.1 = Add                wed   %100.0, 1, elided   <val?_>
  void                    StVar              lW    c, %100.1, e0.0
  val?^ | miss    %100.3 = LdVar              eR    cols, e0.0
  val?            %100.4 = Force!             !v    %100.3, e0.0   <val?_>
  lgl$#-          %100.5 = IsType                   %100.4 isA val?+
  void                    Branch                   %100.5 -> BB102 (if true) | BB103 (if false)
BB101   <- [50]
  fs              %101.0 = FrameState         R     0x560912dd2d70+1511: [%50.1], env=e0.0
  void                    Deopt              !v    %101.0, Typecheck@0x560912081648[Type#84], %50.1   !
BB29   <- [28, 69]
  val?            %29.0 = Phi                      %69.4:BB69, %28.2:BB28
  val?            %29.1 = %29.0
  val?            %29.2 = Phi                      %69.5:BB69, %28.3:BB28
  val?            %29.3 = %29.2
  val?            %29.4 = Extract1_2D        !v    %27.6, %29.3, %29.1, e0.0   <val?_>
  val?^ | miss    %29.5 = LdVar              eR    y, e0.0
  val?            %29.6 = Force!             !v    %29.5, e0.0   <val?_>
  lgl$#-          %29.7 = IsType                   %29.6 isA val+   <@?>
  void                    Branch                   %29.7 -> BB68 (if true) | BB30 (if false)
BB102   <- [100]
  val?+           %102.0 = CastType           d     dn %100.4   <val?_>
  lgl             %102.1 = Gt                 wed   %100.1, %102.0, elided   <val?_>
  lgl$#-          %102.2 = CheckTrueFalse     we    %102.1
  void                    Branch                   %102.2 -> BB56 (if true) | BB55 (if false)
BB103   <- [100]
  fs              %103.0 = FrameState         R     0x560912dd2d70+1560: [%100.1, %100.4], env=e0.0
  void                    Deopt              !v    %103.0, Typecheck@0x560912081648[Type#87], %100.4   !
BB68   <- [29]
  val?^ | miss    %68.0 = LdVar              eR    i, e0.0
  val?            %68.1 = Force!             !v    %68.0, e0.0   <val?_>
  val?^ | miss    %68.2 = LdVar              eR    c, e0.0
  val?            %68.3 = Force!             !v    %68.2, e0.0   <val?_>
  val?            %68.4 = %68.3
  val?            %68.5 = %68.1
  goto BB31
BB30   <- [29]
  prom-           %30.0 = MkArg                    unboundValue, rir.compile[0x560912f09610]_p12, e0.0
  prom-           %30.1 = MkArg                    unboundValue, rir.compile[0x560912f09610]_p13, e0.0
  prom-           %30.2 = %30.1
  prom-           %30.3 = %30.0
  goto BB31
BB56   <- [102]
  void                    Nop                !     
  real$#-         %56.1 = 0
  real$#-         %56.2 = 1
  goto BB57
BB55   <- [102]
  void                    Nop                !     
  goto BB6
BB31   <- [30, 68]
  val?            %31.0 = Phi                      %68.4:BB68, %30.2:BB30
  val?            %31.1 = %31.0
  val?            %31.2 = Phi                      %68.5:BB68, %30.3:BB30
  val?            %31.3 = %31.2
  val?            %31.4 = Extract1_2D        !v    %29.6, %31.3, %31.1, e0.0   <val?_>
  lgl$#-          %31.5 = IsType                   %31.4 isA val?+
  lgl$#-          %31.6 = IsType                   %29.4 isA val?+
  void                    Branch                   %31.6 -> BB104 (if true) | BB105 (if false)
BB57   <- [61, 56]
  real$#-         %57.0 = Phi                      %56.1:BB56, %61.1:BB61   <val?_>
  real$#-         %57.1 = %57.0
  real$#-         %57.2 = Phi                      %56.2:BB56, %61.2:BB61   <val?_>
  real$#-         %57.3 = %57.2
  real$#-         %57.4 = Mul                d     %57.3, 10, elided   <val?_>
  void                    StVar              lW    x2, %57.4, e0.0
  real$#-         %57.6 = Add                d     %57.1, %57.4, elided   <val?_>
  real$#-         %57.7 = Add                d     %57.6, 3, elided   <val?_>
  real$#-         %57.8 = 2
  real$#-         %57.9 = %57.7
  goto BB58
BB104   <- [31]
  val?+           %104.0 = CastType           d     dn %29.4   <val?_>
  void                    Branch                   %31.5 -> BB106 (if true) | BB107 (if false)
BB105   <- [31]
  void                    Nop                !     
  val?            %105.1 = %29.4
  dr              %105.2 = Typecheck@0x560912081648[Type#62]
  goto BB32
BB58   <- [59, 57]
  real$#-         %58.0 = Phi                      %57.8:BB57, %59.1:BB59   <val?_>
  real$#-         %58.1 = %58.0
  real$#-         %58.2 = Phi                      %57.9:BB57, %59.2:BB59   <val?_>
  real$#-         %58.3 = %58.2
  real$#-         %58.4 = Add                d     %58.1, 2, elided   <val?_>
  void                    StVar              lW    y2, %58.4, e0.0
  real$#-         %58.6 = Add                d     %58.3, %57.4, elided   <val?_>
  real$#-         %58.7 = Add                d     %58.6, %58.4, elided   <val?_>
  void                    StVar              lW    last, %58.7, e0.0
  real$#-         %58.9 = Add                d     %58.1, 1, elided   <val?_>
  void                    StVar              lW    j, %58.9, e0.0
  lgl$#-          %58.11 = Gt                 d     %58.9, 10, elided   <val?_>
  void                    Branch                   %58.11 -> BB60 (if true) | BB59 (if false)
BB106   <- [104]
  val?+           %106.0 = CastType           d     dn %31.4   <val?_>
  (int|real|complex)+ %106.1 = Mul                wed   %104.0, %106.0, elided   <val?_>
  lgl$#-          %106.2 = IsType                   %27.4 isA val?+
  void                    Branch                   %106.2 -> BB108 (if true) | BB109 (if false)
BB107   <- [104]
  void                    Nop                !     
  val?            %107.1 = %31.4
  dr              %107.2 = Typecheck@0x560912081648[Type#68]
  goto BB32
BB32   <- [105, 107]
  val?^ | miss    %32.0 = Phi                      %105.1:BB105, %107.1:BB107
  val?^ | miss    %32.1 = %32.0
  dr              %32.2 = Phi                      %105.2:BB105, %107.2:BB107
  dr              %32.3 = %32.2
  fs              %32.4 = FrameState         R     0x560912dd2d70+1242: [%27.4, %29.4, %31.4], env=e0.0
  void                    Deopt              !v    %32.4, %32.3, %32.1   !
BB60   <- [58]
  real$#-         %60.0 = Add                d     %57.3, 1, elided   <val?_>
  void                    StVar              lW    i, %60.0, e0.0
  lgl$#-          %60.2 = Gt                 d     %60.0, 10, elided   <val?_>
  void                    Branch                   %60.2 -> BB62 (if true) | BB61 (if false)
BB59   <- [58]
  void                    Nop                !     
  real$#-         %59.1 = %58.9
  real$#-         %59.2 = %58.7
  goto BB58
BB108   <- [106]
  val?+           %108.0 = CastType           d     dn %27.4   <val?_>
  (int|real|complex)+ %108.1 = Add                wed   %108.0, %106.1, elided   <val?_>
  val?^ | miss    %108.2 = LdVar              eR    res2, e0.0
  val?            %108.3 = Force!             !v    %108.2, e0.0   <val?_>
  val?^ | miss    %108.4 = LdVar              eR    r, e0.0
  val?            %108.5 = Force!             !v    %108.4, e0.0   <val?_>
  val?^ | miss    %108.6 = LdVar              eR    c, e0.0
  val?            %108.7 = Force!             !v    %108.6, e0.0   <val?_>
  lgl$#-          %108.8 = IsType                   %108.7 isA val?+
  lgl$#-          %108.9 = IsType                   %108.3 isA val?+
  lgl$#-          %108.10 = IsType                   %108.5 isA val?+
  void                    Branch                   %108.9 -> BB110 (if true) | BB111 (if false)
BB109   <- [106]
  fs              %109.0 = FrameState         R     0x560912dd2d70+1249: [%27.4, %106.1], env=e0.0
  void                    Deopt              !v    %109.0, Typecheck@0x560912081648[Type#56], %27.4   !
BB62   <- [60]
  void                    Visible            v     
  lgl$#-          %62.1 = Eq                 vd    %58.7, 6250, elided   <val?_>
  void                    Branch                   %62.1 -> BB65 (if true) | BB63 (if false)
BB61   <- [60]
  void                    Nop                !     
  real$#-         %61.1 = %58.7
  real$#-         %61.2 = %60.0
  goto BB57
BB110   <- [108]
  val?+           %110.0 = CastType           d     dn %108.3   <val?_>
  void                    Branch                   %108.10 -> BB112 (if true) | BB113 (if false)
BB111   <- [108]
  void                    Nop                !     
  val?            %111.1 = %108.3
  dr              %111.2 = Typecheck@0x560912081648[Type#71]
  goto BB36
BB65   <- [62]
  val?^ | miss    %65.0 = LdVar              eR    res1, e0.0
  val?            %65.1 = Force!             !v    %65.0, e0.0   <val?_>
  val?^ | miss    %65.2 = LdVar              eR    res2, e0.0
  void                    Visible            v     
  val?            %65.4 = Force!             !     %65.2, e0.0   <val?_>
  lgl$#-          %65.5 = IsType                   %65.4 isA val?+
  lgl$#-          %65.6 = IsType                   %65.1 isA val?+
  void                    Branch                   %65.6 -> BB116 (if true) | BB117 (if false)
BB63   <- [62]
  void                    Nop                !     
  lgl$#-          %63.1 = %62.1
  goto BB64
BB112   <- [110]
  val?+           %112.0 = CastType           d     dn %108.5   <val?_>
  void                    Branch                   %108.8 -> BB114 (if true) | BB115 (if false)
BB113   <- [110]
  void                    Nop                !     
  val?            %113.1 = %108.5
  dr              %113.2 = Typecheck@0x560912081648[Type#72]
  goto BB36
BB36   <- [111, 113, 115]
  val?^ | miss    %36.0 = Phi                      %111.1:BB111, %113.1:BB113, %115.1:BB115
  val?^ | miss    %36.1 = %36.0
  dr              %36.2 = Phi                      %111.2:BB111, %113.2:BB113, %115.2:BB115
  dr              %36.3 = %36.2
  fs              %36.4 = FrameState         R     0x560912dd2d70+1297: [%108.1, %108.3, %108.5, %108.7], env=e0.0
  void                    Deopt              !v    %36.4, %36.3, %36.1   !
BB116   <- [65]
  val?+           %116.0 = CastType           d     dn %65.1   <val?_>
  void                    Branch                   %65.5 -> BB118 (if true) | BB119 (if false)
BB117   <- [65]
  void                    Nop                !     
  val?            %117.1 = %65.1
  dr              %117.2 = Typecheck@0x560912081648[Type#119]
  goto BB66
BB64   <- [63, 118]
  lgl$-           %64.0 = Phi                      %118.4:BB118, %63.1:BB63
  lgl$-           %64.1 = %64.0
  void                    Return             l     %64.1
BB114   <- [112]
  val?+           %114.0 = CastType           d     dn %108.7   <val?_>
  val?+           %114.1 = Subassign1_2D      wed   %108.1, %110.0, %112.0, %114.0, elided
  void                    StVar              lW    res2, %114.1, e0.0
  val?^ | miss    %114.3 = LdVar              eR    i, e0.0
  val?            %114.4 = Force!             !v    %114.3, e0.0   <val?_>
  lgl$#-          %114.5 = IsType                   %114.4 isA val?+
  void                    Branch                   %114.5 -> BB120 (if true) | BB121 (if false)
BB115   <- [112]
  void                    Nop                !     
  val?            %115.1 = %108.7
  dr              %115.2 = Typecheck@0x560912081648[Type#73]
  goto BB36
BB118   <- [116]
  val?+           %118.0 = CastType           d     dn %65.4   <val?_>
  lgl             %118.1 = Eq                 vwed  %116.0, %118.0, elided   <val?_>
  lgl$-           %118.2 = AsLogical          e     %118.1
  lgl$-           %118.3 = LAnd                     %62.1, %118.2
  lgl$-           %118.4 = %118.3
  goto BB64
BB119   <- [116]
  void                    Nop                !     
  val?            %119.1 = %65.4
  dr              %119.2 = Typecheck@0x560912081648[Type#120]
  goto BB66
BB66   <- [117, 119]
  val?^ | miss    %66.0 = Phi                      %117.1:BB117, %119.1:BB119
  val?^ | miss    %66.1 = %66.0
  dr              %66.2 = Phi                      %117.2:BB117, %119.2:BB119
  dr              %66.3 = %66.2
  fs              %66.4 = FrameState         R     0x560912dd2d70+2185: [%62.1, %65.1, %65.4], env=e0.0
  void                    Deopt              !v    %66.4, %66.3, %66.1   !
BB120   <- [114]
  val?+           %120.0 = CastType           d     dn %114.4   <val?_>
  (real|complex)+ %120.1 = Add                wed   %120.0, 1, elided   <val?_>
  void                    StVar              lW    i, %120.1, e0.0
  val?^ | miss    %120.3 = LdVar              eR    inner, e0.0
  val?            %120.4 = Force!             !v    %120.3, e0.0   <val?_>
  lgl$#-          %120.5 = IsType                   %120.4 isA val?+
  void                    Branch                   %120.5 -> BB122 (if true) | BB123 (if false)
BB121   <- [114]
  fs              %121.0 = FrameState         R     0x560912dd2d70+1321: [%114.4], env=e0.0
  void                    Deopt              !v    %121.0, Typecheck@0x560912081648[Type#74], %114.4   !
BB122   <- [120]
  val?+           %122.0 = CastType           d     dn %120.4   <val?_>
  lgl             %122.1 = Gt                 wed   %120.1, %122.0, elided   <val?_>
  lgl$#-          %122.2 = CheckTrueFalse     we    %122.1
  void                    Branch                   %122.2 -> BB43 (if true) | BB42 (if false)
BB123   <- [120]
  fs              %123.0 = FrameState         R     0x560912dd2d70+1370: [%120.1, %120.4], env=e0.0
  void                    Deopt              !v    %123.0, Typecheck@0x560912081648[Type#77], %120.4   !
BB43   <- [122]
  void                    Nop                !     
  goto BB44
BB42   <- [122]
  void                    Nop                !     
  goto BB25
Prom 0:
BB0
  int-            %0.0  = Colon              vd    1L, 6L, elided   <val?_>
  void                    Return             l     %0.0
Prom 1:
BB0
  int-            %0.0  = Colon              vd    1L, 12L, elided   <val?_>
  void                    Return             l     %0.0
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     ncol, e0.0
  prom-           %0.2  = MkArg                    unboundValue, rir.compile[0x560912f09610]_p3, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <val?_>
  (cls|spec|blt)  %0.4  = LdFun              !     nrow, e0.0
  prom-           %0.5  = MkArg                    unboundValue, rir.compile[0x560912f09610]_p4, e0.0
  val?            %0.6  = Call               !     %0.4(%0.5) e0.0   <val?_>
  val?            %0.7  = Eq                 !     %0.3, %0.6, e0.0   <val?_>
  void                    Return             l     %0.7
Prom 3:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    x, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 4:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    y, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 5:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    x, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 6:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    y, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 7:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    x, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 10:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    rows, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 11:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    cols, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 12:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    i, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 13:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    c, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 14:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    r, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 15:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    i, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 16:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    r, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 17:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    c, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 18:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    i, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 19:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    c, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 20:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    r, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 21:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    i, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 22:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    r, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 23:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    c, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3

│ rir.compile[0x560912f09610]                                                  │
└──────────────────────────────────────────────────────────────────────────────┘
