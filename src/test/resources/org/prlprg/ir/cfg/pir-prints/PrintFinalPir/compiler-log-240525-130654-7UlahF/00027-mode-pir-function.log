
┌──────────────────────────────────────────────────────────────────────────────┐
│ mode[0x56034abd8a70]                                                         │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch                                      │
│ Properties:  Eager, ForceOrd: 0                                              │
├────── Final PIR Version
mode[0x56034abd8a70]
BB0
  val?^           %0.0  = LdArg                    0
  env             e0.1  = MkEnv              l     x=%0.0, parent=R_BaseNamespace, context 1
  val?            %0.2  = Force!<lazy>       !v    %0.0, e0.1   <val?->
  lgl$#-          %0.3  = IsType                   %0.2 isA val?-
  void                    Branch                   %0.3 -> BB37 (if true) | BB38 (if false)
BB37   <- [0]
  val?-           %37.0 = CastType           d     dn %0.2
  lgl$#-          %37.1 = CallSafeBuiltin    wed   is.expression(%37.0)    <lgl$->
  void                    Branch                   %37.1 -> BB35 (if true) | BB5 (if false)
BB38   <- [0]
  fs              %38.0 = FrameState         R     0x56034a933570+69: [<blt is.expression>, %0.2], env=e0.1
  void                    Deopt              !v    %38.0, Typecheck@0x56034a064508[Type#1], %0.2   !
BB35   <- [37]
  void                    Visible            v     
  str$#-          %35.1 = "expression"
  goto BB19
BB5   <- [37]
  val?^ | miss    %5.0  = LdVar              eR    is.call, e0.1
  lgl$#-          %5.1  = Identical                <blt is.call>, %5.0   <true>
  void                    Branch                   %5.1 -> BB39 (if true) | BB40 (if false)
BB19   <- [35, 18, 81]
  str$-           %19.0 = Phi                      %18.2:BB18, %81.1:BB81, %35.1:BB35
  str$-           %19.1 = %19.0
  void                    Return             l     %19.1
BB39   <- [5]
  val?^ | miss    %39.0 = LdVar              eR    x, e0.1
  lgl$#-          %39.1 = IsType                   %39.0 isA val?~-
  void                    Branch                   %39.1 -> BB41 (if true) | BB42 (if false)
BB40   <- [5]
  void                    Nop                !     
  lgl$#-          %40.1 = %5.1
  dr              %40.2 = DeadBranchReached@0x56034a064508[Test#1]
  goto BB3
BB41   <- [39]
  val?~-          %41.0 = CastType           d     dn %39.0
  val?-           %41.1 = Force!<wrapped>          %41.0,    <val?->
  lgl$#-          %41.2 = CallSafeBuiltin    wed   is.call(%41.1)    <lgl$->
  void                    Branch                   %41.2 -> BB22 (if true) | BB8 (if false)
BB42   <- [39]
  void                    Nop                !     
  val?^ | miss    %42.1 = %39.0
  dr              %42.2 = Typecheck@0x56034a064508[Type#4]
  goto BB3
BB3   <- [40, 42]
  val?^ | miss    %3.0  = Phi                      %40.1:BB40, %42.1:BB42
  val?^ | miss    %3.1  = %3.0
  dr              %3.2  = Phi                      %40.2:BB40, %42.2:BB42
  dr              %3.3  = %3.2
  fs              %3.4  = FrameState         R     0x56034a933570+91: [%37.1], env=e0.1
  void                    Deopt              !v    %3.4, %3.3, %3.1   !
BB22   <- [41]
  val?^ | miss    %22.0 = LdVar              eR    deparse, e0.1
  lgl$#-          %22.1 = Identical                %22.0, function(expr, width.cutoff=60L, backtick=%in%|...
  void                    Branch                   %22.1 -> BB43 (if true) | BB44 (if false)
BB8   <- [41]
  val?^ | miss    %8.0  = LdVar              eR    is.name, e0.1
  lgl$#-          %8.1  = Identical                <blt is.symbol>, %8.0   <true>
  void                    Branch                   %8.1 -> BB45 (if true) | BB46 (if false)
BB43   <- [22]
  prom-           %43.0 = MkArg                    unboundValue, mode[0x56034abd8a70]_p1, e0.1
  ct              %43.1 = PushContext        lCL   %43.0, deparse([[(x, 1L)), function(expr, width.cutoff=60L, backtick=%in%|..., e0.1
  val?^           %43.2 = CastType                 up %43.0
  env             e43.3 = MkEnv              l     expr=%43.2, width.cutoff(miss)=60L, backtick(miss)=missingArg, control(miss)=missingArg, nlines(miss)=missingArg, parent=R_BaseNamespace, context 1
  prom-           %43.4 = MkArg                    unboundValue, mode[0x56034abd8a70]_p3, e43.3
  val?^ | miss    %43.5 = CastType                 up %43.4
  void                    StArg              lW    backtick, %43.5, e43.3
  prom-           %43.7 = MkArg                    unboundValue, mode[0x56034abd8a70]_p7, e43.3
  val?^ | miss    %43.8 = CastType                 up %43.7
  void                    StArg              lW    control, %43.8, e43.3
  prom-           %43.10 = MkArg                    unboundValue, mode[0x56034abd8a70]_p8 (!refl), 
  val?^ | miss    %43.11 = CastType                 up %43.10
  void                    StArg              lW    nlines, %43.11, e43.3
  val?            %43.13 = Force!<lazy>       !vL   %43.2, e43.3   <(sym|code)->
  val?            %43.14 = Force!<lazy>       !v    %43.5, e43.3   <lgl$->
  val?^ | miss    %43.15 = LdVar              eR    .deparseOpts, e43.3
  lgl$#-          %43.16 = Identical                %43.15, function(control) <(rir::DispatchTable*)0x5603|...
  void                    Branch                   %43.16 -> BB47 (if true) | BB48 (if false)
BB44   <- [22]
  void                    Nop                !     
  val?^ | miss    %44.1 = %22.0
  dr              %44.2 = CallTarget@0x56034a064508[Call#2]
  goto BB6
BB45   <- [8]
  lgl$#-          %45.0 = CallSafeBuiltin    wed   is.symbol(%41.1)    <lgl$->
  void                    Branch                   %45.0 -> BB21 (if true) | BB11 (if false)
BB46   <- [8]
  void                    Nop                !     
  lgl$#-          %46.1 = %8.1
  dr              %46.2 = DeadBranchReached@0x56034a064508[Test#12]
  goto BB6
BB47   <- [43]
  val?^ | miss    %47.0 = LdVar              eR    control, e43.3
  val?            %47.1 = Force!<lazy>       !v    %47.0, e43.3   <str->
  prom-           %47.2 = MkArg                    %47.1, mode[0x56034abd8a70]_p9 (!refl), 
  val?            %47.3 = StaticCall         !v    .deparseOpts[0x56034aa94b30](%47.2) e43.3   <real$->
  lgl$#-          %47.4 = IsType                   %47.3 isA real$-
  void                    Branch                   %47.4 -> BB49 (if true) | BB50 (if false)
BB48   <- [43]
  fs              %48.0 = FrameState         R     0x56034a933570+253: [], env=e0.1
  fs              %48.1 = FrameState         R     0x560349dcf120+37: [%43.13, 60L, %43.14], env=e43.3, next=%48.0
  void                    Deopt              !v    %48.1, CallTarget@0x560348d70440[Call#4], %43.15   !
BB6   <- [44, 46]
  val?^ | miss    %6.0  = Phi                      %44.1:BB44, %46.1:BB46
  val?^ | miss    %6.1  = %6.0
  dr              %6.2  = Phi                      %44.2:BB44, %46.2:BB46
  dr              %6.3  = %6.2
  fs              %6.4  = FrameState         R     0x56034a933570+205: [%41.2], env=e0.1
  void                    Deopt              !v    %6.4, %6.3, %6.1   !
BB21   <- [45]
  void                    Visible            v     
  str$#-          %21.1 = "name"
  goto BB18
BB11   <- [45]
  val?^ | miss    %11.0 = LdVar              eR    typeof, e0.1
  lgl$#-          %11.1 = Identical                %11.0, function(x) <(rir::DispatchTable*)0x56034aadd5|...
  void                    Branch                   %11.1 -> BB55 (if true) | BB56 (if false)
BB49   <- [47]
  real$-          %49.0 = CastType           d     dn %47.3
  val?^ | miss    %49.1 = LdVar              eR    nlines, e43.3
  val?            %49.2 = Force!<lazy>       !v    %49.1, e43.3   <int$->
  val?            %49.3 = CallBuiltin        !v    deparse(%43.13, 60L, %43.14, %49.0, %49.2) e43.3
  val?            %49.4 = PopContext         C     %49.3, %43.1   <str$->
  lgl$#-          %49.5 = IsType                   %49.4 isA val+   <true>
  lgl$#-          %49.6 = IsType                   %49.4 isA val?-
  void                    Branch                   %49.5 -> BB51 (if true) | BB52 (if false)
BB50   <- [47]
  fs              %50.0 = FrameState         R     0x56034a933570+253: [], env=e0.1
  fs              %50.1 = FrameState         R     0x560349dcf120+74: [%43.13, 60L, %43.14, %47.3], env=e43.3, next=%50.0
  void                    Deopt              !v    %50.1, Typecheck@0x560348d70440[Type#9], %47.3   !
BB18   <- [21, 17]
  str$-           %18.0 = Phi                      %17.2:BB17, %21.1:BB21
  str$-           %18.1 = %18.0
  str$-           %18.2 = %18.1
  goto BB19
BB55   <- [11]
  str$-           %55.0 = CallSafeBuiltin    wed   typeof(%41.1)    <str$->
  int$-           %55.1 = Length                   %55.0
  void                    StVar              lW    tx, %55.0, e0.1
  lgl$-           %55.3 = Eq                 d     %55.1, 1L, elided   <true>
  lgl$#-          %55.4 = Identical                %55.3, true
  void                    Branch                   %55.4 -> BB59 (if true) | BB60 (if false)
BB56   <- [11]
  fs              %56.0 = FrameState         R     0x56034a933570+649: [%45.0], env=e0.1
  void                    Deopt              !v    %56.0, CallTarget@0x56034a064508[Call#4], %11.0   !
BB51   <- [49]
  void                    Branch                   %49.6 -> BB53 (if true) | BB54 (if false)
BB52   <- [49]
  void                    Nop                !     
  lgl$#-          %52.1 = %49.5
  dr              %52.2 = DeadBranchReached@0x56034a064508[Test#3]
  goto BB27
BB59   <- [55]
  lgl$-           %59.0 = CallSafeBuiltin    wed   is.na(%55.0) 
  lgl$#-          %59.1 = CheckTrueFalse     e     %59.0   <false>
  void                    Branch                   %59.1 -> BB62 (if true) | BB61 (if false)
BB60   <- [55]
  fs              %60.0 = FrameState         R     0x56034a933570+708: [%55.0], env=e0.1
  void                    Deopt              !v    %60.0, DeadBranchReached@0x56034a064508[Test#14], %55.4   !
BB53   <- [51]
  val?-           %53.0 = CastType           d     dn %49.4   <str$->
  val?            %53.1 = Extract1_1D        wed   %53.0, 1L, elided   <str$->
  lgl$-           %53.2 = Is                       %53.1, logical
  lgl$-           %53.3 = Is                       %53.1, integer
  lgl$-           %53.4 = Is                       %53.1, double
  lgl$-           %53.5 = Is                       %53.1, complex
  lgl$-           %53.6 = Is                       %53.1, character   <true>
  lgl$-           %53.7 = Is                       %53.1, raw
  lgl$-           %53.8 = Is                       %53.1, list
  lgl$-           %53.9 = Is                       %53.1, expression
  lgl$-           %53.10 = LOr                      %53.9, %53.8
  lgl$-           %53.11 = LOr                      %53.10, %53.7
  lgl$-           %53.12 = LOr                      %53.11, %53.6
  lgl$-           %53.13 = LOr                      %53.12, %53.5
  lgl$-           %53.14 = LOr                      %53.13, %53.4
  lgl$-           %53.15 = LOr                      %53.14, %53.3
  lgl$-           %53.16 = LOr                      %53.15, %53.2   <true>
  lgl$#-          %53.17 = Identical                %53.16, true
  int$-           %53.18 = Length                   %53.1
  lgl$-           %53.19 = Is                       %53.1, Factor   <false>
  lgl$#-          %53.20 = Identical                %53.19, false
  lgl$#-          %53.21 = Identical                %53.6, true
  lgl$#-          %53.22 = IsType                   %53.1 isA val?-
  void                    Branch                   %53.17 -> BB57 (if true) | BB58 (if false)
BB54   <- [51]
  void                    Nop                !     
  val?            %54.1 = %49.4
  dr              %54.2 = Typecheck@0x56034a064508[Type#8]
  goto BB27
BB27   <- [52, 54]
  val?^ | miss    %27.0 = Phi                      %52.1:BB52, %54.1:BB54
  val?^ | miss    %27.1 = %27.0
  dr              %27.2 = Phi                      %52.2:BB52, %54.2:BB54
  dr              %27.3 = %27.2
  fs              %27.4 = FrameState         R     0x56034a933570+253: [%49.4], env=e0.1
  void                    Deopt              !v    %27.4, %27.3, %27.1   !
BB62   <- [59]
  void                    Nop                !     
  lgl$#-          %62.1 = %59.1
  dr              %62.2 = DeadBranchReached@0x56034a064508[Test#23]
  goto BB14
BB61   <- [59]
  lgl$-           %61.0 = Eq                 d     %55.0, double, elided
  lgl$#-          %61.1 = CheckTrueFalse     e     %61.0
  void                    Branch                   %61.1 -> BB20 (if true) | BB16 (if false)
BB57   <- [53]
  lgl$-           %57.0 = Eq                 d     %53.18, 1L, elided   <true>
  lgl$#-          %57.1 = Identical                %57.0, true
  void                    Branch                   %57.1 -> BB67 (if true) | BB68 (if false)
BB58   <- [53]
  void                    Nop                !     
  lgl$#-          %58.1 = %53.17
  dr              %58.2 = DeadBranchReached@0x56034a064508[Test#4]
  goto BB29
BB14   <- [62, 64, 66, 72, 76]
  val?^ | miss    %14.0 = Phi                      %62.1:BB62, %64.1:BB64, %66.1:BB66, %72.1:BB72, %76.1:BB76
  val?^ | miss    %14.1 = %14.0
  dr              %14.2 = Phi                      %62.2:BB62, %64.2:BB64, %66.2:BB66, %72.2:BB72, %76.2:BB76
  dr              %14.3 = %14.2
  fs              %14.4 = FrameState         R     0x56034a933570+965: [%55.0, %59.0], env=e0.1
  void                    Deopt              !v    %14.4, %14.3, %14.1   !
BB20   <- [61]
  void                    Visible            v     
  str$#-          %20.1 = "numeric"
  goto BB17
BB16   <- [61]
  lgl$-           %16.0 = Eq                 d     %55.0, integer, elided
  lgl$#-          %16.1 = CheckTrueFalse     e     %16.0   <false>
  void                    Branch                   %16.1 -> BB64 (if true) | BB63 (if false)
BB67   <- [57]
  void                    Branch                   %53.20 -> BB69 (if true) | BB70 (if false)
BB68   <- [57]
  void                    Nop                !     
  lgl$#-          %68.1 = %57.1
  dr              %68.2 = DeadBranchReached@0x56034a064508[Test#5]
  goto BB29
BB29   <- [58, 68, 70, 74, 78]
  val?^ | miss    %29.0 = Phi                      %58.1:BB58, %68.1:BB68, %70.1:BB70, %74.1:BB74, %78.1:BB78
  val?^ | miss    %29.1 = %29.0
  dr              %29.2 = Phi                      %58.2:BB58, %68.2:BB68, %70.2:BB70, %74.2:BB74, %78.2:BB78
  dr              %29.3 = %29.2
  fs              %29.4 = FrameState         R     0x56034a933570+296: [%53.1], env=e0.1
  void                    Deopt              !v    %29.4, %29.3, %29.1   !
BB17   <- [20, 75]
  str$-           %17.0 = Phi                      %75.1:BB75, %20.1:BB20
  str$-           %17.1 = %17.0
  str$-           %17.2 = %17.1
  goto BB18
BB64   <- [16]
  void                    Nop                !     
  lgl$#-          %64.1 = %16.1
  dr              %64.2 = DeadBranchReached@0x56034a064508[Test#25]
  goto BB14
BB63   <- [16]
  lgl$-           %63.0 = Eq                 d     %55.0, closure, elided
  lgl$#-          %63.1 = CheckTrueFalse     e     %63.0   <false>
  void                    Branch                   %63.1 -> BB66 (if true) | BB65 (if false)
BB69   <- [67]
  void                    Branch                   %53.21 -> BB73 (if true) | BB74 (if false)
BB70   <- [67]
  void                    Nop                !     
  lgl$#-          %70.1 = %53.20
  dr              %70.2 = DeadBranchReached@0x56034a064508[Test#6]
  goto BB29
BB66   <- [63]
  void                    Nop                !     
  lgl$#-          %66.1 = %63.1
  dr              %66.2 = DeadBranchReached@0x56034a064508[Test#26]
  goto BB14
BB65   <- [63]
  lgl$-           %65.0 = Eq                 d     %55.0, builtin, elided
  lgl$#-          %65.1 = CheckTrueFalse     e     %65.0   <false>
  void                    Branch                   %65.1 -> BB72 (if true) | BB71 (if false)
BB73   <- [69]
  void                    Branch                   %53.22 -> BB77 (if true) | BB78 (if false)
BB74   <- [69]
  void                    Nop                !     
  lgl$#-          %74.1 = %53.21
  dr              %74.2 = DeadBranchReached@0x56034a064508[Test#7]
  goto BB29
BB72   <- [65]
  void                    Nop                !     
  lgl$#-          %72.1 = %65.1
  dr              %72.2 = DeadBranchReached@0x56034a064508[Test#27]
  goto BB14
BB71   <- [65]
  lgl$-           %71.0 = Eq                 d     %55.0, special, elided
  lgl$#-          %71.1 = CheckTrueFalse     e     %71.0   <false>
  void                    Branch                   %71.1 -> BB76 (if true) | BB75 (if false)
BB77   <- [73]
  val?-           %77.0 = CastType           d     dn %53.1   <str$->
  lgl-            %77.1 = CallSafeBuiltin    wed   is.na(%77.0) 
  lgl$#-          %77.2 = CheckTrueFalse     we    %77.1   <false>
  void                    Branch                   %77.2 -> BB80 (if true) | BB79 (if false)
BB78   <- [73]
  void                    Nop                !     
  val?            %78.1 = %53.1
  dr              %78.2 = Typecheck@0x56034a064508[Type#9]
  goto BB29
BB76   <- [71]
  void                    Nop                !     
  lgl$#-          %76.1 = %71.1
  dr              %76.2 = DeadBranchReached@0x56034a064508[Test#28]
  goto BB14
BB75   <- [71]
  void                    Visible            v     
  str$-           %75.1 = %55.0
  goto BB17
BB80   <- [77]
  fs              %80.0 = FrameState         R     0x56034a933570+488: [%77.0, %77.2], env=e0.1
  void                    Deopt              !v    %80.0, DeadBranchReached@0x56034a064508[Test#10], %77.2   !
BB79   <- [77]
  lgl-            %79.0 = Eq                 wed   %77.0, (, elided
  lgl$#-          %79.1 = CheckTrueFalse     we    %79.0   <false>
  void                    Branch                   %79.1 -> BB82 (if true) | BB81 (if false)
BB82   <- [79]
  fs              %82.0 = FrameState         R     0x56034a933570+512: [%77.0, %79.1], env=e0.1
  void                    Deopt              !v    %82.0, DeadBranchReached@0x56034a064508[Test#11], %79.1   !
BB81   <- [79]
  void                    Visible            v     
  str$#-          %81.1 = "call"
  goto BB19
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    x, e0.0
  val?            %0.2  = Force<wrapped>     !v    %0.1, e0.0   <code->
  val?            %0.3  = Extract2_1D        !v    %0.2, 1L, e0.0   <(sym|code)->
  void                    Visible            v     
  void                    Return             l     %0.3
Prom 3:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     %in%, <0x560348d92c40>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, mode[0x56034abd8a70]_p4, e0.0
  prom-           %0.3  = MkArg                    unboundValue, mode[0x56034abd8a70]_p6, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <lgl$->
  void                    Return             l     %0.4
Prom 4:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     mode, <0x560349b60140>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, mode[0x56034abd8a70]_p5, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <str$->
  void                    Return             l     %0.3
Prom 5:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    expr, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <(sym|code)->
  void                    Return             l     %0.3
Prom 6:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     c, <0x560348a7c940>, e0.0
  val?            %0.2  = Call               !     %0.1("call", "expression", "(", "function") e0.0   <str->
  void                    Return             l     %0.2
Prom 7:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     c, <0x560348a7c940>, e0.0
  val?            %0.2  = Call               !     %0.1("keepNA", "keepInteger", "niceNames", "showAttributes") e0.0   <str->
  void                    Return             l     %0.2
Prom 8:
BB0
  void                    Visible            v     
  void                    Return             l     -1L
Prom 9:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    control, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str->
  void                    Return             l     %0.3

│ mode[0x56034abd8a70]                                                         │
└──────────────────────────────────────────────────────────────────────────────┘
