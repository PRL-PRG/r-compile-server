
┌──────────────────────────────────────────────────────────────────────────────┐
│ deparse[0x56034aa07d40]                                                      │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;Eager1,NonRefl0,NonRefl1,!Obj0,!Obj1,SimpleInt1 miss: 2│
│ Properties:  Eager, ForceOrd: 0 1 2                                          │
├────── Final PIR Version
deparse[0x56034aa07d40]
BB0
  val?^           %0.0  = LdArg                    2
  (int|miss)$~-   %0.1  = LdArg                    1
  val?^           %0.2  = LdArg                    0
  env             e0.3  = MkEnv              l     expr=%0.2, width.cutoff=%0.1, backtick=%0.0, control(miss)=missingArg, nlines(miss)=missingArg, parent=R_BaseNamespace, context 1
  prom-           %0.4  = MkArg                    unboundValue, deparse[0x56034aa07d40]_p0, e0.3
  val?^ | miss    %0.5  = CastType                 up %0.4
  void                    StArg              lW    control, %0.5, e0.3
  prom-           %0.7  = MkArg                    unboundValue, deparse[0x56034aa07d40]_p1 (!refl), 
  val?^ | miss    %0.8  = CastType                 up %0.7
  void                    StArg              lW    nlines, %0.8, e0.3
  val+            %0.10 = Force!<lazy>       !vr   %0.2,    <(sym|code)->
  int$-           %0.11 = Force!<lazy>             %0.1,    <int$->
  val?            %0.12 = Force!<lazy>       !v    %0.0, e0.3   <lgl$->
  val?^ | miss    %0.13 = LdVar              eR    .deparseOpts, e0.3
  lgl$#-          %0.14 = Identical                %0.13, function(control) <(rir::DispatchTable*)0x5603|...
  void                    Branch                   %0.14 -> BB6 (if true) | BB7 (if false)
BB6   <- [0]
  val?^ | miss    %6.0  = LdVar              eR    control, e0.3
  val?            %6.1  = Force!<lazy>       !v    %6.0, e0.3   <str->
  prom-           %6.2  = MkArg                    %6.1, deparse[0x56034aa07d40]_p2 (!refl), 
  val?            %6.3  = StaticCall         !v    .deparseOpts[0x56034b815370](%6.2) e0.3   <real$->
  lgl$#-          %6.4  = IsType                   %6.3 isA real$-
  void                    Branch                   %6.4 -> BB8 (if true) | BB9 (if false)
BB7   <- [0]
  fs              %7.0  = FrameState         R     0x560349dcf120+37: [%0.10, %0.11, %0.12], env=e0.3
  void                    Deopt              !v    %7.0, CallTarget@0x560348d70440[Call#4], %0.13   !
BB8   <- [6]
  real$-          %8.0  = CastType           d     dn %6.3
  val?^ | miss    %8.1  = LdVar              eR    nlines, e0.3
  val?            %8.2  = Force!<lazy>       !v    %8.1, e0.3   <int$->
  val?            %8.3  = CallBuiltin        !     deparse(%0.10, %0.11, %0.12, %8.0, %8.2) e0.3
  void                    Return             l     %8.3
BB9   <- [6]
  fs              %9.0  = FrameState         R     0x560349dcf120+74: [%0.10, %0.11, %0.12, %6.3], env=e0.3
  void                    Deopt              !v    %9.0, Typecheck@0x560348d70440[Type#9], %6.3   !
Prom 0:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     c, <0x560348a7c940>, e0.0
  val?            %0.2  = Call               !     %0.1("keepNA", "keepInteger", "niceNames", "showAttributes") e0.0   <str->
  void                    Return             l     %0.2
Prom 1:
BB0
  void                    Visible            v     
  void                    Return             l     -1L
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    control, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str->
  void                    Return             l     %0.3

│ deparse[0x56034aa07d40]                                                      │
└──────────────────────────────────────────────────────────────────────────────┘
