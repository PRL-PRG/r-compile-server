
┌──────────────────────────────────────────────────────────────────────────────┐
│ .cacheClass[0x5619861fed60]                                                  │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch                                      │
│ Properties:                                                                  │
├────── Final PIR Version
.cacheClass[0x5619861fed60]
BB0
  val?^           %0.0  = LdArg                    3
  val?^           %0.1  = LdArg                    2
  val?^           %0.2  = LdArg                    1
  val?^           %0.3  = LdArg                    0
  val?^ | miss    %0.4  = LdVar              eR    isFALSE, <env 0x561983284378>
  lgl$#-          %0.5  = Identical                %0.4, function(x) <(rir::DispatchTable*)0x5619857a61|...
  void                    Branch                   %0.5 -> BB48 (if true) | BB49 (if false)
BB48   <- [0]
  env             e48.0 = MkEnv              l     name=%0.3, def=%0.2, doSubclasses=%0.1, env=%0.0, parent=<env 0x561983284378>, context 1
  val?            %48.1 = Force!<lazy>       !v    %0.1, e48.0   <lgl$->
  lgl$#-          %48.2 = IsType                   %48.1 isA lgl$-
  void                    Branch                   %48.2 -> BB50 (if true) | BB51 (if false)
BB49   <- [0]
  env             e49.0 = (MkEnv)            l     name=%0.3, def=%0.2, doSubclasses=%0.1, env=%0.0, parent=<env 0x561983284378>, context 1
  fs              %49.1 = FrameState         R     0x5619851e7640+0: [], env=e49.0
  void                    Deopt              !v    %49.1, CallTarget@0x561984f27340[Call#0], %0.4
BB50   <- [48]
  lgl$-           %50.0 = CastType           d     dn %48.1
  lgl$-           %50.1 = CallSafeBuiltin    wed   is.na(%50.0)    <lgl$->
  lgl$-           %50.2 = Not                d     %50.1, elided
  lgl$-           %50.3 = AsLogical                %50.2
  lgl$-           %50.4 = AsLogical                %50.3
  lgl$-           %50.5 = AsLogical                %50.4
  lgl$#-          %50.6 = Identical                %50.5, false
  void                    Branch                   %50.6 -> BB46 (if true) | BB7 (if false)
BB51   <- [48]
  prom-           %51.0 = MkArg                    unboundValue, .cacheClass[0x5619861fed60]_p0, e48.0
  val?^           %51.1 = CastType                 up %51.0
  fs              %51.2 = FrameState         R     0x5619851e7640+32: [], env=e48.0
  env             e51.3 = (MkEnv)            l     x=%51.1, parent=R_BaseNamespace, context 0
  fs              %51.4 = FrameState         R     0x561985005700+69: [<blt is.logical>], env=e51.3, next=%51.2
  fs              %51.5 = FrameState         R     0x561985adf070+5(pr): [%48.1], env=e48.0, next=%51.4
  void                    Deopt              !v    %51.5, Typecheck@0x561984f27340[Type#0], %48.1   !
BB46   <- [50]
  void                    Nop                !     
  lgl$-           %46.1 = %50.5
  goto BB8
BB7   <- [50]
  lgl$-           %7.0  = Not                d     %50.0, elided
  lgl$-           %7.1  = AsLogical                %7.0
  lgl$-           %7.2  = LAnd                     %50.5, %7.1
  lgl$-           %7.3  = %7.2
  goto BB8
BB8   <- [46, 7]
  lgl$-           %8.0  = Phi                      %7.3:BB7, %46.1:BB46
  lgl$-           %8.1  = %8.0
  lgl$-           %8.2  = Not                d     %8.1, elided
  lgl$#-          %8.3  = CheckTrueFalse     e     %8.2
  void                    Branch                   %8.3 -> BB45 (if true) | BB9 (if false)
BB45   <- [8]
  val?^ | miss    %45.0 = LdVar              eR    .recacheSubclasses, e48.0
  lgl$#-          %45.1 = Identical                %45.0, function(class, def, env) <(rir::DispatchTable|...
  void                    Branch                   %45.1 -> BB52 (if true) | BB53 (if false)
BB9   <- [8]
  void                    Nop                !     
  goto BB10
BB52   <- [45]
  prom-           %52.0 = MkArg                    unboundValue, .cacheClass[0x5619861fed60]_p11, e48.0
  prom-           %52.1 = MkArg                    unboundValue, .cacheClass[0x5619861fed60]_p14, e48.0
  prom-           %52.2 = MkArg                    unboundValue, .cacheClass[0x5619861fed60]_p15, e48.0
  val?            %52.3 = StaticCall         !v    .recacheSubclasses[0x561985517d90](%52.0, %52.1, %52.2) e48.0
  goto BB10
BB53   <- [45]
  fs              %53.0 = FrameState         R     0x5619851e7640+32: [], env=e48.0
  prom-           %53.1 = MkArg                    %50.0, .cacheClass[0x5619861fed60]_p0 (!refl), e48.0
  val?~           %53.2 = CastType                 up %53.1
  env             e53.3 = (MkEnv)            l     x=%53.2, parent=R_BaseNamespace, context 0
  fs              %53.4 = FrameState         R     0x561985005700+311: [true, %50.1], env=e53.3, next=%53.0
  void                    Deopt              !v    %53.4, CallTarget@0x561984f27340[Call#1], %45.0   !
BB10   <- [9, 52]
  val?^ | miss    %10.0 = LdVar              eR    .classTable, e48.0
  val?            %10.1 = Force!<wrapped>    !v    %10.0, e48.0   <env->
  lgl$#-          %10.2 = IsType                   %10.1 isA val+   <true>
  void                    Branch                   %10.2 -> BB54 (if true) | BB55 (if false)
BB54   <- [10]
  val?^ | miss    %54.0 = LdVar              eR    name, e48.0
  val?            %54.1 = Force!<lazy>       !v    %54.0, e48.0   <str$->
  lgl$#-          %54.2 = IsType                   %54.1 isA val?-
  lgl$#-          %54.3 = IsType                   %10.1 isA val?-
  void                    Branch                   %54.3 -> BB56 (if true) | BB57 (if false)
BB55   <- [10]
  fs              %55.0 = FrameState         R     0x5619851e7640+101: [%10.1], env=e48.0
  void                    Deopt              !v    %55.0, DeadBranchReached@0x561984f27340[Test#0], %10.2   !
BB56   <- [54]
  val?-           %56.0 = CastType           d     dn %10.1   <env->
  void                    Branch                   %54.2 -> BB58 (if true) | BB59 (if false)
BB57   <- [54]
  void                    Nop                !     
  val?            %57.1 = %10.1
  dr              %57.2 = Typecheck@0x561984f27340[Type#7]
  goto BB13
BB58   <- [56]
  val?-           %58.0 = CastType           d     dn %54.1   <str$->
  val?            %58.1 = Extract2_1D        wed   %56.0, %58.0, elided   <other>
  lgl$-           %58.2 = Is                       %58.1, NULL
  void                    StVar              lW    prev, %58.1, e48.0
  lgl$-           %58.4 = Not                d     %58.2, elided
  lgl$#-          %58.5 = CheckTrueFalse     e     %58.4
  void                    Branch                   %58.5 -> BB20 (if true) | BB15 (if false)
BB59   <- [56]
  void                    Nop                !     
  val?            %59.1 = %54.1
  dr              %59.2 = Typecheck@0x561984f27340[Type#9]
  goto BB13
BB13   <- [57, 59]
  val?^ | miss    %13.0 = Phi                      %57.1:BB57, %59.1:BB59
  val?^ | miss    %13.1 = %13.0
  dr              %13.2 = Phi                      %57.2:BB57, %59.2:BB59
  dr              %13.3 = %13.2
  fs              %13.4 = FrameState         R     0x5619851e7640+146: [%10.1, %54.1], env=e48.0
  void                    Deopt              !v    %13.4, %13.3, %13.1   !
BB20   <- [58]
  (cls|spec|blt)  %20.0 = LdFun              !v    @, <0x561982c7cbd8>, e48.0
  prom-           %20.1 = MkArg                    unboundValue, .cacheClass[0x5619861fed60]_p1, e48.0
  prom-           %20.2 = MkArg                    unboundValue, .cacheClass[0x5619861fed60]_p2, e48.0
  val?            %20.3 = Call               !v    %20.0(%20.1, %20.2) e48.0   <str$->
  void                    StVar              lW    newpkg, %20.3, e48.0
  val?^ | miss    %20.5 = LdVar              eR    is, e48.0
  lgl$#-          %20.6 = Identical                %20.5, function(object, class2) <(rir::DispatchTable*|...
  void                    Branch                   %20.6 -> BB60 (if true) | BB61 (if false)
BB15   <- [58]
  void                    Nop                !     
  goto BB16
BB60   <- [20]
  prom-           %60.0 = MkArg                    unboundValue, .cacheClass[0x5619861fed60]_p3, e48.0
  val?            %60.1 = Call               !v    function(object, class2) <(rir::DispatchTable*|...(%60.0, "classRepresentation") e48.0   <lgl$->
  lgl$#-          %60.2 = IsType                   %60.1 isA lgl$-
  void                    Branch                   %60.2 -> BB62 (if true) | BB63 (if false)
BB61   <- [20]
  fs              %61.0 = FrameState         R     0x5619851e7640+237: [], env=e48.0
  void                    Deopt              !v    %61.0, CallTarget@0x561984f27340[Call#4], %20.5   !
BB16   <- [15, 30]
  val?^ | miss    %16.0 = LdVar              eR    def, e48.0
  val?            %16.1 = Force!             !v    %16.0, e48.0   <val?_>
  val?^ | miss    %16.2 = LdVar              eR    .classTable, e48.0
  val?            %16.3 = Force!             !v    %16.2, e48.0   <val?_>
  val?^ | miss    %16.4 = LdVar              eR    name, e48.0
  val?            %16.5 = Force!             !v    %16.4, e48.0   <val?_>
  lgl$#-          %16.6 = IsType                   %16.5 isA val?+
  lgl$#-          %16.7 = IsType                   %16.1 isA val?+
  lgl$#-          %16.8 = IsType                   %16.3 isA val?+
  void                    Branch                   %16.7 -> BB68 (if true) | BB69 (if false)
BB62   <- [60]
  lgl$-           %62.0 = CastType           d     dn %60.1
  lgl$#-          %62.1 = CheckTrueFalse     e     %62.0
  void                    Branch                   %62.1 -> BB32 (if true) | BB25 (if false)
BB63   <- [60]
  void                    Nop                !     
  val?            %63.1 = %60.1
  dr              %63.2 = Typecheck@0x561984f27340[Type#15]
  goto BB23
BB68   <- [16]
  val?+           %68.0 = CastType           d     dn %16.1   <val?_>
  void                    Branch                   %16.8 -> BB70 (if true) | BB71 (if false)
BB69   <- [16]
  void                    Nop                !     
  val?            %69.1 = %16.1
  dr              %69.2 = Typecheck@0x561984f27340[Type#50]
  goto BB17
BB32   <- [62]
  val?^ | miss    %32.0 = LdVar              eR    identical, e48.0
  lgl$#-          %32.1 = Identical                %32.0, function(x, y, num.eq=TRUE, single.NA=TRUE, at|...
  void                    Branch                   %32.1 -> BB64 (if true) | BB65 (if false)
BB25   <- [62]
  val?^ | miss    %25.0 = LdVar              eR    def, e48.0
  val?            %25.1 = Force!             !v    %25.0, e48.0   <val?_>
  val?^ | miss    %25.2 = LdVar              eR    prev !upd, e48.0
  val?            %25.3 = Force!             !v    %25.2, e48.0   <val?_>
  val?^ | miss    %25.4 = LdVar              eR    newpkg, e48.0
  val?            %25.5 = Force!             !v    %25.4, e48.0   <val?_>
  lgl$#-          %25.6 = IsType                   %25.5 isA val?+
  lgl$#-          %25.7 = IsType                   %25.1 isA val?+
  lgl$#-          %25.8 = IsType                   %25.3 isA val?+
  void                    Branch                   %25.7 -> BB74 (if true) | BB75 (if false)
BB23   <- [63, 65]
  val?^ | miss    %23.0 = Phi                      %63.1:BB63, %65.1:BB65
  val?^ | miss    %23.1 = %23.0
  dr              %23.2 = Phi                      %63.2:BB63, %65.2:BB65
  dr              %23.3 = %23.2
  fs              %23.4 = FrameState         R     0x5619851e7640+274: [%60.1], env=e48.0
  void                    Deopt              !v    %23.4, %23.3, %23.1   !
BB70   <- [68]
  val?+           %70.0 = CastType           d     dn %16.3   <val?_>
  void                    Branch                   %16.6 -> BB72 (if true) | BB73 (if false)
BB71   <- [68]
  void                    Nop                !     
  val?            %71.1 = %16.3
  dr              %71.2 = Typecheck@0x561984f27340[Type#51]
  goto BB17
BB17   <- [69, 71, 73]
  val?^ | miss    %17.0 = Phi                      %69.1:BB69, %71.1:BB71, %73.1:BB73
  val?^ | miss    %17.1 = %17.0
  dr              %17.2 = Phi                      %69.2:BB69, %71.2:BB71, %73.2:BB73
  dr              %17.3 = %17.2
  fs              %17.4 = FrameState         R     0x5619851e7640+1155: [%16.1, %16.1, %16.3, %16.5], env=e48.0
  void                    Deopt              !v    %17.4, %17.3, %17.1   !
BB64   <- [32]
  prom-           %64.0 = MkArg                    unboundValue, .cacheClass[0x5619861fed60]_p4, e48.0
  prom-           %64.1 = MkArg                    unboundValue, .cacheClass[0x5619861fed60]_p5, e48.0
  ct              %64.2 = PushContext        lCL   %64.0, %64.1, identical(prev, def), function(x, y, num.eq=TRUE, single.NA=TRUE, at|..., e48.0
  val?^           %64.3 = CastType                 up %64.1
  val?^           %64.4 = CastType                 up %64.0
  env             e64.5 = MkEnv              l     x=%64.4, y=%64.3, num.eq(miss)=true, single.NA(miss)=true, attrib.as.set(miss)=true, ignore.bytecode(miss)=true, ignore.environment(miss)=false, ignore.srcref(miss)=true, parent=R_BaseNamespace, context 1
  val?            %64.6 = Force!<lazy>       !vL   %64.4, e64.5   <val?>
  val?            %64.7 = Force!<lazy>       !vL   %64.3, e64.5   <val?>
  val?            %64.8 = CallBuiltin        !     identical(%64.6, %64.7, true, true, true, true, false, true) e64.5
  val?            %64.9 = PopContext         C     %64.8, %64.2   <lgl$->
  lgl$#-          %64.10 = IsType                   %64.9 isA lgl$-
  void                    Branch                   %64.10 -> BB66 (if true) | BB67 (if false)
BB65   <- [32]
  void                    Nop                !     
  val?^ | miss    %65.1 = %32.0
  dr              %65.2 = CallTarget@0x561984f27340[Call#5]
  goto BB23
BB74   <- [25]
  val?+           %74.0 = CastType           d     dn %25.1   <val?_>
  void                    Branch                   %25.8 -> BB78 (if true) | BB79 (if false)
BB75   <- [25]
  void                    Nop                !     
  val?            %75.1 = %25.1
  dr              %75.2 = Typecheck@0x561984f27340[Type#42]
  goto BB26
BB72   <- [70]
  val?+           %72.0 = CastType           d     dn %16.5   <val?_>
  val?+           %72.1 = Subassign2_1D      wed   %68.0, %70.0, %72.0, elided
  void                    StVar              lW    .classTable, %72.1, e48.0
  void                    Invisible          v     
  val?            %72.4 = %16.1
  goto BB19
BB73   <- [70]
  void                    Nop                !     
  val?            %73.1 = %16.5
  dr              %73.2 = Typecheck@0x561984f27340[Type#52]
  goto BB17
BB66   <- [64]
  lgl$-           %66.0 = CastType           d     dn %64.9
  lgl$#-          %66.1 = CheckTrueFalse     e     %66.0
  void                    Branch                   %66.1 -> BB44 (if true) | BB35 (if false)
BB67   <- [64]
  fs              %67.0 = FrameState         R     0x5619851e7640+327: [%64.9], env=e48.0
  void                    Deopt              !v    %67.0, Typecheck@0x561984f27340[Type#18], %64.9   !
BB78   <- [74]
  val?+           %78.0 = CastType           d     dn %25.3   <val?_>
  void                    Branch                   %25.6 -> BB80 (if true) | BB81 (if false)
BB79   <- [74]
  void                    Nop                !     
  val?            %79.1 = %25.3
  dr              %79.2 = Typecheck@0x561984f27340[Type#43]
  goto BB26
BB26   <- [75, 79, 81]
  val?^ | miss    %26.0 = Phi                      %75.1:BB75, %79.1:BB79, %81.1:BB81
  val?^ | miss    %26.1 = %26.0
  dr              %26.2 = Phi                      %75.2:BB75, %79.2:BB79, %81.2:BB81
  dr              %26.3 = %26.2
  fs              %26.4 = FrameState         R     0x5619851e7640+926: [%25.1, %25.3, %25.5], env=e48.0
  void                    Deopt              !v    %26.4, %26.3, %26.1   !
BB19   <- [44, 72, 86]
  val?            %19.0 = Phi                      %72.4:BB72, %86.18:BB86, %44.1:BB44
  val?            %19.1 = %19.0
  void                    Return             l     %19.1
BB44   <- [66]
  void                    Nop                !     
  nil-            %44.1 = nil
  goto BB19
BB35   <- [66]
  (cls|spec|blt)  %35.0 = LdFun              !v    @, <0x561982c7cbd8>, e48.0
  prom-           %35.1 = MkArg                    unboundValue, .cacheClass[0x5619861fed60]_p6, e48.0
  prom-           %35.2 = MkArg                    unboundValue, .cacheClass[0x5619861fed60]_p7, e48.0
  val?            %35.3 = Call               !v    %35.0(%35.1, %35.2) e48.0   <str$->
  void                    StVar              lW    pkg, %35.3, e48.0
  val?^ | miss    %35.5 = LdVar              eR    identical, e48.0
  lgl$#-          %35.6 = Identical                %35.5, function(x, y, num.eq=TRUE, single.NA=TRUE, at|...
  void                    Branch                   %35.6 -> BB76 (if true) | BB77 (if false)
BB80   <- [78]
  val?+           %80.0 = CastType           d     dn %25.5   <val?_>
  val?+           %80.1 = Subassign2_1D      wed   %74.0, %78.0, %80.0, elided   <val?_>
  void                    StVar              lW    prev, %80.1, e48.0
  val+            %80.3 = ChkMissing         e     %80.1
  void                    StVar              lW    def, %80.1, e48.0
  val?^ | miss    %80.5 = LdVar              eR    length, e48.0
  lgl$#-          %80.6 = Identical                <blt length>, %80.5   <@?>
  void                    Branch                   %80.6 -> BB29 (if true) | BB28 (if false)
BB81   <- [78]
  void                    Nop                !     
  val?            %81.1 = %25.5
  dr              %81.2 = Typecheck@0x561984f27340[Type#44]
  goto BB26
BB76   <- [35]
  prom-           %76.0 = MkArg                    unboundValue, .cacheClass[0x5619861fed60]_p8 (!refl), e48.0
  prom-           %76.1 = MkArg                    unboundValue, .cacheClass[0x5619861fed60]_p9, e48.0
  ct              %76.2 = PushContext        lCL   %76.0, %76.1, identical(pkg, newpkg), function(x, y, num.eq=TRUE, single.NA=TRUE, at|..., e48.0
  val?^           %76.3 = CastType                 up %76.1
  val?^           %76.4 = CastType                 up %76.0
  env             e76.5 = MkEnv              l     x=%76.4, y=%76.3, num.eq(miss)=true, single.NA(miss)=true, attrib.as.set(miss)=true, ignore.bytecode(miss)=true, ignore.environment(miss)=false, ignore.srcref(miss)=true, parent=R_BaseNamespace, context 1
  val?            %76.6 = Force!<lazy>       !vL   %76.3, e76.5   <val?>
  val?            %76.7 = CallBuiltin        !v    identical(%35.3, %76.6, true, true, true, true, false, true) e76.5
  val?            %76.8 = PopContext         C     %76.7, %76.2   <lgl$->
  lgl$#-          %76.9 = IsType                   %76.8 isA lgl$-
  void                    Branch                   %76.9 -> BB82 (if true) | BB83 (if false)
BB77   <- [35]
  fs              %77.0 = FrameState         R     0x5619851e7640+400: [], env=e48.0
  void                    Deopt              !v    %77.0, CallTarget@0x561984f27340[Call#7], %35.5   !
BB29   <- [80]
  real$-          %29.0 = CallSafeBuiltin    wed   length(%80.1)    <val?_>
  lgl$-           %29.1 = Gt                 d     %29.0, 1L, elided   <val?_>
  lgl$#-          %29.2 = CheckTrueFalse     e     %29.1
  void                    Branch                   %29.2 -> BB31 (if true) | BB30 (if false)
BB28   <- [80]
  (cls|spec|blt)  %28.0 = LdFun              !v    length, e48.0
  fs              %28.1 = FrameState         R     0x5619851e7640+992: [%28.0], env=e48.0
  void                    Deopt              !v    %28.1, DeadCall@0x561984f27340[Call#14], %28.0   !
BB82   <- [76]
  lgl$-           %82.0 = CastType           d     dn %76.8
  lgl$#-          %82.1 = CheckTrueFalse     e     %82.0
  void                    Branch                   %82.1 -> BB41 (if true) | BB40 (if false)
BB83   <- [76]
  void                    Nop                !     
  val?            %83.1 = %76.8
  dr              %83.2 = Typecheck@0x561984f27340[Type#24]
  goto BB38
BB31   <- [29]
  (cls|spec|blt)  %31.0 = LdFun              !v    .duplicateClassesExist, e48.0
  fs              %31.1 = FrameState         R     0x5619851e7640+1088: [%31.0], env=e48.0
  void                    Deopt              !v    %31.1, DeadCall@0x561984f27340[Call#15], %31.0   !
BB30   <- [29]
  void                    Nop                !     
  goto BB16
BB41   <- [82]
  val?^ | miss    %41.0 = LdVar              eR    .cache_class, e48.0
  lgl$#-          %41.1 = Identical                <blt .cache_class>, %41.0   <true>
  void                    Branch                   %41.1 -> BB84 (if true) | BB85 (if false)
BB40   <- [82]
  (cls|spec|blt)  %40.0 = LdFun              !v    .simpleDuplicateClass, e48.0
  fs              %40.1 = FrameState         R     0x5619851e7640+453: [%40.0], env=e48.0
  void                    Deopt              !v    %40.1, DeadCall@0x561984f27340[Call#8], %40.0   !
BB38   <- [83, 85]
  val?^ | miss    %38.0 = Phi                      %83.1:BB83, %85.1:BB85
  val?^ | miss    %38.1 = %38.0
  dr              %38.2 = Phi                      %83.2:BB83, %85.2:BB85
  dr              %38.3 = %38.2
  fs              %38.4 = FrameState         R     0x5619851e7640+437: [%76.8], env=e48.0
  void                    Deopt              !v    %38.4, %38.3, %38.1   !
BB84   <- [41]
  val?^ | miss    %84.0 = LdVar              eR    name, e48.0
  val?            %84.1 = Force!<wrapped>    !v    %84.0, e48.0   <str$->
  val?^ | miss    %84.2 = LdVar              eR    .extendsForS3, e48.0
  lgl$#-          %84.3 = Identical                %84.2, function(Class) <(rir::DispatchTable*)0x561985|...
  void                    Branch                   %84.3 -> BB86 (if true) | BB87 (if false)
BB85   <- [41]
  void                    Nop                !     
  lgl$#-          %85.1 = %41.1
  dr              %85.2 = DeadBranchReached@0x561984f27340[Test#1]
  goto BB38
BB86   <- [84]
  prom-           %86.0 = MkArg                    unboundValue, .cacheClass[0x5619861fed60]_p10, e48.0
  ct              %86.1 = PushContext        lCL   %86.0, .extendsForS3(def), function(Class) <(rir::DispatchTable*)0x561985|..., e48.0
  val?^           %86.2 = CastType                 up %86.0
  env             e86.3 = MkEnv              l     Class=%86.2, parent=<env 0x561983284378>, context 1
  (cls|spec|blt)  %86.4 = LdFun              !v    extends, <0x561984ba93f0>, <env 0x561983284378>
  prom-           %86.5 = MkArg                    unboundValue, .cacheClass[0x5619861fed60]_p28, e86.3
  val?            %86.6 = NamedCall          !v    %86.4(%86.5, maybe=false) e86.3   <str->
  val?            %86.7 = PopContext         C     %86.6, %86.1   <str->
  val?            %86.8 = CallBuiltin        !v    .cache_class(%84.1, %86.7) e48.0
  val?^ | miss    %86.9 = LdVar              eR    def, e48.0
  val?            %86.10 = Force!<wrapped>    !v    %86.9, e48.0   <other>
  val?^ | miss    %86.11 = LdVar              eR    .classTable, e48.0
  val?            %86.12 = Force!<wrapped>    !v    %86.11, e48.0   <env->
  val?^ | miss    %86.13 = LdVar              eR    name, e48.0
  val?            %86.14 = Force!<wrapped>    !v    %86.13, e48.0   <str$->
  val?            %86.15 = Subassign2_1D      !v    %86.10, %86.12, %86.14, e48.0
  void                    StVar              lW    .classTable, %86.15, e48.0
  void                    Invisible          v     
  val?            %86.18 = %86.10
  goto BB19
BB87   <- [84]
  fs              %87.0 = FrameState         R     0x5619851e7640+586: [<blt .cache_class>, %84.1], env=e48.0
  void                    Deopt              !v    %87.0, CallTarget@0x561984f27340[Call#11], %84.2   !
Prom 0:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    doSubclasses, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <lgl$->
  void                    Return             l     %0.3
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    def, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    package, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 3:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    prev, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <other>
  void                    Return             l     %0.3
Prom 4:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    prev, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <other>
  void                    Return             l     %0.3
Prom 5:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    def, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <other>
  void                    Return             l     %0.3
Prom 6:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    prev, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 7:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    package, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 8:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    pkg, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 9:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    newpkg, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 10:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    def, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <other>
  void                    Return             l     %0.3
Prom 11:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, <0x561982c7cbd8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .cacheClass[0x5619861fed60]_p12, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .cacheClass[0x5619861fed60]_p13, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <str$+>
  void                    Return             l     %0.4
Prom 12:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    def, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 13:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    className, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 14:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    def, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <other>
  void                    Return             l     %0.3
Prom 15:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    env, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 28:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    Class, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <other>
  void                    Return             l     %0.3

│ .cacheClass[0x5619861fed60]                                                  │
└──────────────────────────────────────────────────────────────────────────────┘
