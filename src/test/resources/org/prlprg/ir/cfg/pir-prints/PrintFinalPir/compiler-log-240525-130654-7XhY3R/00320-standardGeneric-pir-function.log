
┌──────────────────────────────────────────────────────────────────────────────┐
│ standardGeneric[0x561985d25c20]                                              │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;Eager0,NonRefl0,!Obj0                │
│ Properties:                                                                  │
├────── Final PIR Version
standardGeneric[0x561985d25c20]
BB0
  val?~+          %0.0  = LdArg                    0
  val?^ | miss    %0.1  = LdVar              eR    sys.frame, <env 0x561984c370d0>
  lgl$#-          %0.2  = Identical                %0.1, function(which=0L) <(rir::DispatchTable*)0x561|...
  void                    Branch                   %0.2 -> BB36 (if true) | BB37 (if false)
BB36   <- [0]
  env             e36.0 = MkEnv              l     name=%0.0, parent=<env 0x561984c370d0>, context 1
  prom-           %36.1 = MkArg                    unboundValue, standardGeneric[0x561985d25c20]_p0, e36.0
  val?            %36.2 = StaticCall         !v    sys.frame[0x56198503f300](%36.1) e36.0   <env->
  void                    StVar              lW    env, %36.2, e36.0
  val?^ | miss    %36.4 = LdVar              eR    eval, e36.0
  lgl$#-          %36.5 = Identical                %36.4, function(expr, envir=parent.frame(), enclos=if|...
  void                    Branch                   %36.5 -> BB38 (if true) | BB39 (if false)
BB37   <- [0]
  env             e37.0 = (MkEnv)            l     name=%0.0, parent=<env 0x561984c370d0>, context 1
  fs              %37.1 = FrameState         R     0x561986274f30+0: [], env=e37.0
  void                    Deopt              !v    %37.1, CallTarget@0x5619864259a8[Call#0], %0.1
BB38   <- [36]
  prom-           %38.0 = MkArg                    unboundValue, standardGeneric[0x561985d25c20]_p2 (!refl), e36.0
  val?            %38.1 = StaticCall         !v    eval[0x56198502f600](list(...), %38.0) e36.0   <vec->
  void                    StVar              lW    dots, %38.1, e36.0
  val?^ | miss    %38.3 = LdVar              eR    unique, e36.0
  lgl$#-          %38.4 = Identical                %38.3, function(x, incomparables=FALSE, ...) <(rir::D|...
  void                    Branch                   %38.4 -> BB40 (if true) | BB41 (if false)
BB39   <- [36]
  fs              %39.0 = FrameState         R     0x561986274f30+46: [], env=e36.0
  void                    Deopt              !v    %39.0, CallTarget@0x5619864259a8[Call#2], %36.4   !
BB40   <- [38]
  val?^ | miss    %40.0 = LdVar              eR    unlist, e36.0
  lgl$#-          %40.1 = Identical                %40.0, function(x, recursive=TRUE, use.names=TRUE) <(|...
  void                    Branch                   %40.1 -> BB42 (if true) | BB43 (if false)
BB41   <- [38]
  void                    Nop                !     
  val?^ | miss    %41.1 = %38.3
  dr              %41.2 = CallTarget@0x5619864259a8[Call#3]
  goto BB5
BB42   <- [40]
  prom-           %42.0 = MkArg                    unboundValue, standardGeneric[0x561985d25c20]_p15, e36.0
  val?            %42.1 = StaticCall         !v    unknown--fromConstant[0x561985656e10](%42.0) from function(x, recursive=TRUE, use.names=TRUE) <(|... { 0 } e36.0   <str->
  val?            %42.2 = StaticCall         !v    unique[0x561986563d20](%42.1) { 0 } e36.0   <str->
  void                    StVar              lW    classes, %42.2, e36.0
  (cls|spec|blt)  %42.4 = LdFun              !v    :::, <0x561982c7de10>, e36.0
  prom-           %42.5 = MkArg                    unboundValue, standardGeneric[0x561985d25c20]_p20, e36.0
  prom-           %42.6 = MkArg                    unboundValue, standardGeneric[0x561985d25c20]_p21, e36.0
  val?            %42.7 = Call               !v    %42.4(%42.5, %42.6) e36.0   <cls->
  (cls|spec|blt)  %42.8 = ChkFunction        e     %42.7
  prom-           %42.9 = MkArg                    unboundValue, standardGeneric[0x561985d25c20]_p22, e36.0
  prom-           %42.10 = MkArg                    unboundValue, standardGeneric[0x561985d25c20]_p23, e36.0
  prom-           %42.11 = MkArg                    unboundValue, standardGeneric[0x561985d25c20]_p24, e36.0
  val?            %42.12 = Call               !v    %42.8(%42.9, %42.10, %42.11) e36.0   <cls>
  lgl$-           %42.13 = Is                       %42.12, NULL
  void                    StVar              lW    method, %42.12, e36.0
  val             %42.15 = ChkMissing         e     %42.12
  lgl$#-          %42.16 = CheckTrueFalse     e     %42.13
  void                    Branch                   %42.16 -> BB34 (if true) | BB9 (if false)
BB43   <- [40]
  void                    Nop                !     
  val?^ | miss    %43.1 = %40.0
  dr              %43.2 = CallTarget@0x5619864259a8[Call#4]
  goto BB5
BB5   <- [41, 43]
  val?^ | miss    %5.0  = Phi                      %41.1:BB41, %43.1:BB43
  val?^ | miss    %5.1  = %5.0
  dr              %5.2  = Phi                      %41.2:BB41, %43.2:BB43
  dr              %5.3  = %5.2
  fs              %5.4  = FrameState         R     0x561986274f30+97: [], env=e36.0
  void                    Deopt              !v    %5.4, %5.3, %5.1   !
BB34   <- [42]
  (cls|spec|blt)  %34.0 = LdFun              !v    stop, e36.0
  fs              %34.1 = FrameState         R     0x561986274f30+272: [%34.0], env=e36.0
  void                    Deopt              !v    %34.1, DeadCall@0x5619864259a8[Call#9], %34.0   !
BB9   <- [42]
  val?^ | miss    %9.0  = LdVar              eR    match.call, e36.0
  lgl$#-          %9.1  = Identical                %9.0, function(definition=sys.function(sys.parent())|...
  void                    Branch                   %9.1 -> BB44 (if true) | BB45 (if false)
BB44   <- [9]
  prom-           %44.0 = MkArg                    unboundValue, standardGeneric[0x561985d25c20]_p25, e36.0
  prom-           %44.1 = MkArg                    unboundValue, standardGeneric[0x561985d25c20]_p27, e36.0
  prom-           %44.2 = MkArg                    unboundValue, standardGeneric[0x561985d25c20]_p29, e36.0
  val?            %44.3 = StaticCall         !v    match.call[0x56198526c340](%44.0, %44.1, false, %44.2) { 0 1 2n 3n } e36.0   <code->
  void                    StVar              lW    mc, %44.3, e36.0
  lgl$#-          %44.5 = IsType                   %44.3 isA val?-
  val?^ | miss    %44.6 = LdVar              eR    names, e36.0
  lgl$#-          %44.7 = Identical                <blt names>, %44.6   <true>
  void                    Branch                   %44.7 -> BB46 (if true) | BB47 (if false)
BB45   <- [9]
  fs              %45.0 = FrameState         R     0x561986274f30+237: [], env=e36.0
  void                    Deopt              !v    %45.0, CallTarget@0x5619864259a8[Call#14], %9.0   !
BB46   <- [44]
  val             %46.0 = ChkMissing         e     %44.3
  void                    Branch                   %44.5 -> BB48 (if true) | BB49 (if false)
BB47   <- [44]
  void                    Nop                !     
  lgl$#-          %47.1 = %44.7
  dr              %47.2 = DeadBranchReached@0x5619864259a8[Test#0]
  goto BB10
BB48   <- [46]
  val?-           %48.0 = CastType           d     dn %44.3   <code->
  val+            %48.1 = CallSafeBuiltin    wed   names(%48.0)    <str->
  val?            %48.2 = Extract1_1D        wed   %48.1, -1L, elided   <str$->
  void                    StVar              lW    args, %48.2, e36.0
  val?^ | miss    %48.4 = LdVar              eR    lapply, e36.0
  lgl$#-          %48.5 = Identical                %48.4, function(X, FUN, ...) <(rir::DispatchTable*)0x|...
  void                    Branch                   %48.5 -> BB50 (if true) | BB51 (if false)
BB49   <- [46]
  void                    Nop                !     
  val?            %49.1 = %44.3
  dr              %49.2 = Typecheck@0x5619864259a8[Type#28]
  goto BB10
BB10   <- [47, 49]
  val?^ | miss    %10.0 = Phi                      %47.1:BB47, %49.1:BB49
  val?^ | miss    %10.1 = %10.0
  dr              %10.2 = Phi                      %47.2:BB47, %49.2:BB49
  dr              %10.3 = %10.2
  fs              %10.4 = FrameState         R     0x561986274f30+390: [], env=e36.0
  void                    Deopt              !v    %10.4, %10.3, %10.1   !
BB50   <- [48]
  prom-           %50.0 = MkArg                    unboundValue, standardGeneric[0x561985d25c20]_p30 (!refl), e36.0
  prom-           %50.1 = MkArg                    unboundValue, standardGeneric[0x561985d25c20]_p31, e36.0
  ct              %50.2 = PushContext        lCL   %50.0, %50.1, lapply(args, as.name), function(X, FUN, ...) <(rir::DispatchTable*)0x|..., e36.0
  val?^           %50.3 = CastType                 up %50.1
  val?^           %50.4 = CastType                 up %50.0
  env             e50.5 = MkEnv              l     X=%50.4, FUN=%50.3, ...(miss)=missingArg, parent=R_BaseNamespace, context 1
  prom-           %50.6 = MkArg                    unboundValue, standardGeneric[0x561985d25c20]_p44, e50.5
  val?            %50.7 = StaticCall         !v    match.fun[0x561985006450](%50.6) e50.5   <cls->
  void                    StVar              lW    FUN, %50.7, e50.5
  val?^ | miss    %50.9 = LdVar              eR    is.vector, e50.5
  lgl$#-          %50.10 = Identical                %50.9, function(x, mode="any") <(rir::DispatchTable*)|...
  void                    Branch                   %50.10 -> BB52 (if true) | BB53 (if false)
BB51   <- [48]
  fs              %51.0 = FrameState         R     0x561986274f30+540: [], env=e36.0
  void                    Deopt              !v    %51.0, CallTarget@0x5619864259a8[Call#21], %48.4   !
BB52   <- [50]
  val?^ | miss    %52.0 = LdVar              eR    X, e50.5
  val?            %52.1 = Force!<lazy>       !v    %52.0, e50.5   <(str|vec)->
  lgl$#-          %52.2 = CallSafeBuiltin    wed   is.vector(%52.1, "any")    <lgl$->
  lgl$#-          %52.3 = Not                d     %52.2, elided
  void                    Branch                   %52.2 -> BB33 (if true) | BB18 (if false)
BB53   <- [50]
  fs              %53.0 = FrameState         R     0x561986274f30+577: [], env=e36.0
  fs              %53.1 = FrameState         R     0x5619851bfb20+46: [], env=e50.5, next=%53.0
  void                    Deopt              !v    %53.1, CallTarget@0x561985171d60[Call#1], %50.9   !
BB33   <- [52]
  val?^ | miss    %33.0 = LdVar              eR    is.object, e50.5
  lgl$#-          %33.1 = Identical                <blt is.object>, %33.0   <true>
  void                    Branch                   %33.1 -> BB54 (if true) | BB55 (if false)
BB18   <- [52]
  void                    Nop                !     
  lgl$#-          %18.1 = %52.3
  goto BB19
BB54   <- [33]
  val?^ | miss    %54.0 = LdVar              eR    X, e50.5
  val?            %54.1 = Force!<wrapped>    !v    %54.0, e50.5   <(str|vec)->
  lgl$#-          %54.2 = CallSafeBuiltin    wed   is.object(%54.1)    <lgl$->
  lgl$-           %54.3 = LOr                      %52.3, %54.2
  lgl$-           %54.4 = %54.3
  goto BB19
BB55   <- [33]
  fs              %55.0 = FrameState         R     0x561986274f30+577: [], env=e36.0
  fs              %55.1 = FrameState         R     0x5619851bfb20+78: [], env=e50.5, next=%55.0
  prom-           %55.2 = MkArg                    %52.1, standardGeneric[0x561985d25c20]_p47 (!refl), e50.5
  val?~           %55.3 = CastType                 up %55.2
  env             e55.4 = (MkEnv)            l     mode(miss)="any", x=%55.3, parent=R_BaseNamespace, context 0
  fs              %55.5 = FrameState         R     0x561984c4d9e0+41: [%52.2], env=e55.4, next=%55.1
  void                    Deopt              !v    %55.5, DeadBranchReached@0x561985171d60[Test#0], %33.1   !
BB19   <- [18, 54]
  lgl$-           %19.0 = Phi                      %54.4:BB54, %18.1:BB18
  lgl$-           %19.1 = %19.0
  lgl$#-          %19.2 = CheckTrueFalse     e     %19.1
  void                    Branch                   %19.2 -> BB32 (if true) | BB20 (if false)
BB32   <- [19]
  fs              %32.0 = FrameState         R     0x561986274f30+577: [], env=e36.0
  (cls|spec|blt)  %32.1 = LdFun              !v    as.list, e50.5
  fs              %32.2 = FrameState         R     0x5619851bfb20+205: [%32.1], env=e50.5, next=%32.0
  void                    Deopt              !v    %32.2, DeadCall@0x561985171d60[Call#3], %32.1   !
BB20   <- [19]
  val?^ | miss    %20.0 = LdVar              eR    X, e50.5
  val?            %20.1 = Force!<wrapped>    !v    %20.0, e50.5   <(str|vec)->
  (nil|str)-      %20.2 = Names                    %20.1
  int$-           %20.3 = Length                   %20.1
  vec-            %20.4 = CallSafeBuiltin    wed   vector("list", %20.3) 
  val+            %20.5 = SetNames           e     %20.4, %20.2
  int$#-          %20.6 = 0L
  val+            %20.7 = %20.5
  goto BB21
BB21   <- [20, 22]
  int$-           %21.0 = Phi                      %20.6:BB20, %22.7:BB22
  int$-           %21.1 = %21.0
  val?            %21.2 = Phi                      %20.7:BB20, %22.8:BB22
  val?            %21.3 = %21.2
  int$-           %21.4 = Inc                      %21.1
  lgl$-           %21.5 = Lt                 d     %20.3, %21.4, elided
  lgl$#-          %21.6 = Identical                %21.5, true
  void                    Branch                   %21.6 -> BB23 (if true) | BB22 (if false)
BB23   <- [21]
  val?            %23.0 = PopContext         C     %21.3, %50.2   <vec$->
  lgl$#-          %23.1 = IsType                   %23.0 isA val?-
  val?^ | miss    %23.2 = LdVar              eR    mc !upd, e36.0
  lgl$#-          %23.3 = IsType                   %23.2 isA val?~- | miss
  void                    Branch                   %23.3 -> BB56 (if true) | BB57 (if false)
BB22   <- [21]
  void                    StVar              lW    i, %21.4, e50.5
  (cls|spec|blt)  %22.1 = LdFun              !v    FUN, e50.5
  prom-           %22.2 = MkArg                    unboundValue, standardGeneric[0x561985d25c20]_p48, e50.5
  (miss|dots)     %22.3 = LdDots             R     , e50.5
  *dots-          %22.4 = ExpandDots               %22.3
  val?            %22.5 = NamedCall          !v    %22.1(%22.2, .xpandDotsTrigger=%22.4) e50.5   <(sym|str)->
  val?            %22.6 = SetVecElt          e     %22.5, %21.3, %21.4
  int$-           %22.7 = %21.4
  val?            %22.8 = %22.6
  goto BB21
BB56   <- [23]
  val?~- | miss   %56.0 = CastType           d     dn %23.2
  val?-           %56.1 = Force!<value>            %56.0,    <code->
  val?^ | miss    %56.2 = LdVar              eR    args, e36.0
  lgl$#-          %56.3 = IsType                   %56.2 isA val?~- | miss
  void                    Branch                   %56.3 -> BB58 (if true) | BB59 (if false)
BB57   <- [23]
  void                    Nop                !     
  val?^ | miss    %57.1 = %23.2
  dr              %57.2 = Typecheck@0x5619864259a8[Type#36]
  goto BB24
BB58   <- [56]
  val?~- | miss   %58.0 = CastType           d     dn %56.2
  val?-           %58.1 = Force!<value>            %58.0,    <str$->
  void                    Branch                   %23.1 -> BB60 (if true) | BB61 (if false)
BB59   <- [56]
  void                    Nop                !     
  val?^ | miss    %59.1 = %56.2
  dr              %59.2 = Typecheck@0x5619864259a8[Type#37]
  goto BB24
BB24   <- [57, 59, 61]
  val?^ | miss    %24.0 = Phi                      %57.1:BB57, %59.1:BB59, %61.1:BB61
  val?^ | miss    %24.1 = %24.0
  dr              %24.2 = Phi                      %57.2:BB57, %59.2:BB59, %61.2:BB61
  dr              %24.3 = %24.2
  fs              %24.4 = FrameState         R     0x561986274f30+577: [%23.0], env=e36.0
  void                    Deopt              !v    %24.4, %24.3, %24.1   !
BB60   <- [58]
  val?-           %60.0 = CastType           d     dn %23.0   <vec$->
  val?+           %60.1 = Subassign1_1D      wed   %60.0, %56.1, %58.1, elided
  void                    StVar              lW    mc, %60.1, e36.0
  (cls|spec|blt)  %60.3 = LdFun              !v    <-, <0x561982c71da8>, e36.0
  prom-           %60.4 = MkArg                    unboundValue, standardGeneric[0x561985d25c20]_p32, e36.0
  val?            %60.5 = Call               !v    %60.3(%60.4, "") e36.0
  val?^ | miss    %60.6 = LdVar              eR    mc !upd, e36.0
  lgl$#-          %60.7 = IsType                   %60.6 isA val?~- | miss
  void                    Branch                   %60.7 -> BB62 (if true) | BB63 (if false)
BB61   <- [58]
  void                    Nop                !     
  val?            %61.1 = %23.0
  dr              %61.2 = Typecheck@0x5619864259a8[Type#35]
  goto BB24
BB62   <- [60]
  val?~- | miss   %62.0 = CastType           d     dn %60.6
  val?-           %62.1 = Force!<value>            %62.0,    <code->
  void                    Visible            v     
  val?-           %62.3 = Subassign2_1D      vwed  cc, %62.1, 1L, elided
  void                    StVar              lW    mc, %62.3, e36.0
  val?^ | miss    %62.5 = LdVar              eR    assign, e36.0
  lgl$#-          %62.6 = Identical                %62.5, function(x, value, pos=-(1), envir=as.environm|...
  void                    Branch                   %62.6 -> BB64 (if true) | BB65 (if false)
BB63   <- [60]
  fs              %63.0 = FrameState         R     0x561986274f30+657: [%60.5], env=e36.0
  void                    Deopt              !v    %63.0, Typecheck@0x5619864259a8[Type#47], %60.6   !
BB64   <- [62]
  prom-           %64.0 = MkArg                    unboundValue, standardGeneric[0x561985d25c20]_p37, e36.0
  prom-           %64.1 = MkArg                    unboundValue, standardGeneric[0x561985d25c20]_p38, e36.0
  prom-           %64.2 = MkArg                    unboundValue, standardGeneric[0x561985d25c20]_p39, e36.0
  val?            %64.3 = StaticCall         !     assign[0x5619854d5b20](%64.0, %64.1, %64.2) e36.0
  val?^ | miss    %64.4 = LdVar              eR    eval, e36.0
  lgl$#-          %64.5 = Identical                %64.4, function(expr, envir=parent.frame(), enclos=if|...
  void                    Branch                   %64.5 -> BB66 (if true) | BB67 (if false)
BB65   <- [62]
  fs              %65.0 = FrameState         R     0x561986274f30+693: [], env=e36.0
  void                    Deopt              !v    %65.0, CallTarget@0x5619864259a8[Call#26], %62.5   !
BB66   <- [64]
  prom-           %66.0 = MkArg                    unboundValue, standardGeneric[0x561985d25c20]_p40, e36.0
  prom-           %66.1 = MkArg                    unboundValue, standardGeneric[0x561985d25c20]_p41, e36.0
  val?            %66.2 = StaticCall         !     eval[0x5619850b68c0](%66.0, %66.1) e36.0   <complex$->
  void                    Return             l     %66.2
BB67   <- [64]
  fs              %67.0 = FrameState         R     0x561986274f30+735: [%64.3], env=e36.0
  void                    Deopt              !v    %67.0, CallTarget@0x5619864259a8[Call#27], %64.4   !
Prom 0:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     sys.parent, <0x561983c21590>, e0.0
  val?            %0.2  = Call               !     %0.1() e0.0   <int$->
  void                    Return             l     %0.2
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    env, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 15:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     lapply, <0x561982dbc040>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, standardGeneric[0x561985d25c20]_p16, e0.0
  prom-           %0.3  = MkArg                    unboundValue, standardGeneric[0x561985d25c20]_p17, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <vec->
  void                    Return             l     %0.4
Prom 16:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    dots, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <vec->
  void                    Return             l     %0.3
Prom 17:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     :::, <0x561982c7de10>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, standardGeneric[0x561985d25c20]_p18, e0.0
  prom-           %0.3  = MkArg                    unboundValue, standardGeneric[0x561985d25c20]_p19, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <cls->
  void                    Return             l     %0.4
Prom 18:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    methods, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 19:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    .class1, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 20:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    methods, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 21:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    .selectDotsMethod, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 22:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    classes, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 23:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    .MTable, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 24:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    .AllMTable, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 25:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     sys.function, <0x56198345a1b0>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, standardGeneric[0x561985d25c20]_p26, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <cls>
  void                    Return             l     %0.3
Prom 26:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     sys.parent, <0x561983c21590>, e0.0
  val?            %0.2  = Call               !     %0.1() e0.0   <int$->
  void                    Return             l     %0.2
Prom 27:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     sys.call, <0x5619852934d8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, standardGeneric[0x561985d25c20]_p28, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <code->
  void                    Return             l     %0.3
Prom 28:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     sys.parent, <0x561983c21590>, e0.0
  val?            %0.2  = Call               !     %0.1() e0.0   <int$->
  void                    Return             l     %0.2
Prom 29:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     parent.frame, <0x561982d91170>, e0.0
  val?            %0.2  = Call               !     %0.1(2) e0.0   <env->
  void                    Return             l     %0.2
Prom 30:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    args, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 31:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    as.name, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <cls->
  void                    Return             l     %0.3
Prom 32:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !v    names, e0.0
  prom-           %0.2  = MkArg                    unboundValue, standardGeneric[0x561985d25c20]_p33, e0.0
  val?            %0.3  = Call               !v    %0.1(%0.2) e0.0   <val?_>
  lgl$#-          %0.4  = IsType                   %0.3 isA val+   <@?>
  void                    Branch                   %0.4 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  (cls|spec|blt)  %2.0  = LdFun              !v    names, e0.0
  prom-           %2.1  = MkArg                    unboundValue, standardGeneric[0x561985d25c20]_p34, e0.0
  val?            %2.2  = Call               !v    %2.0(%2.1) e0.0   <val?_>
  val?            %2.3  = Eq                 !v    %2.2, "...", e0.0   <val?_>
  val?            %2.4  = %2.3
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, standardGeneric[0x561985d25c20]_p35, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.4:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract1_1D        !v    %0.3, %3.1, e0.0   <val?_>
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 33:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    mc, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 34:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    mc, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 35:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !v    names, e0.0
  prom-           %0.2  = MkArg                    unboundValue, standardGeneric[0x561985d25c20]_p36, e0.0
  val?            %0.3  = Call               !v    %0.1(%0.2) e0.0   <val?_>
  void                    Visible            v     
  val?            %0.5  = Eq                 !     %0.3, "...", e0.0   <val?_>
  void                    Return             l     %0.5
Prom 36:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    mc, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 37:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    name, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 38:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    method, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 39:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    env, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 40:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    mc, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <code->
  void                    Return             l     %0.3
Prom 41:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    env, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 44:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    FUN, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <cls->
  void                    Return             l     %0.3
Prom 47:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    X, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <(str|vec)->
  void                    Return             l     %0.3
Prom 48:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    X, e0.0
  val?            %0.2  = Force<wrapped>     !v    %0.1, e0.0   <(str|vec)->
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <true>
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    i, e0.0
  val?            %2.1  = Force<value>       !v    %2.0, e0.0   <int$->
  val?            %2.2  = %2.1
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, standardGeneric[0x561985d25c20]_p49, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.2:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract2_1D        !v    %0.2, %3.1, e0.0   <val?->
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 49:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    i, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3

│ standardGeneric[0x561985d25c20]                                              │
└──────────────────────────────────────────────────────────────────────────────┘
