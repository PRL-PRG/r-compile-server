
┌──────────────────────────────────────────────────────────────────────────────┐
│ tryCatch[0x55eeddd49f50]                                                     │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;Eager1,NonRefl1,!Obj1 miss: 1        │
│ Properties:                                                                  │
├────── Final PIR Version
tryCatch[0x55eeddd49f50]
BB0
  dots+           %0.0  = LdArg                    1
  val?^           %0.1  = LdArg                    0
  env             e0.2  = MkEnv              l     expr=%0.1, ...=%0.0, finally(miss)=missingArg, parent=R_BaseNamespace, context 1
  cls             %0.3  = MkCls                    tryCatchList, e0.2
  cls             %0.4  = MkCls                    tryCatchOne, e0.2
  *dots-          %0.5  = ExpandDots               %0.0
  void                    StVar              lW    tryCatchList, %0.3, e0.2
  void                    StVar              lW    tryCatchOne, %0.4, e0.2
  val?            %0.8  = NamedCall          !v    <blt list>(.xpandDotsTrigger=%0.5) e0.2   <vec$+>
  void                    StVar              lW    handlers, %0.8, e0.2
  lgl$#-          %0.10 = IsType                   %0.8 isA val?+
  val?^ | miss    %0.11 = LdVar              eR    names, e0.2
  lgl$#-          %0.12 = Identical                <blt names>, %0.11   <true>
  void                    Branch                   %0.12 -> BB40 (if true) | BB41 (if false)
BB40   <- [0]
  val             %40.0 = ChkMissing         e     %0.8
  void                    Branch                   %0.10 -> BB42 (if true) | BB43 (if false)
BB41   <- [0]
  void                    Nop                !     
  lgl$#-          %41.1 = %0.12
  dr              %41.2 = DeadBranchReached@0x55eedd478a10[Test#0]
  goto BB39
BB42   <- [40]
  val?+           %42.0 = CastType           d     dn %0.8   <vec$+>
  val+            %42.1 = CallSafeBuiltin    wed   names(%42.0)    <str$->
  void                    StVar              lW    classes, %42.1, e0.2
  val?^ | miss    %42.3 = LdVar              eR    parent.frame, e0.2
  lgl$#-          %42.4 = Identical                %42.3, function(n=1) <(rir::DispatchTable*)0x55eedda2|...
  void                    Branch                   %42.4 -> BB44 (if true) | BB45 (if false)
BB43   <- [40]
  void                    Nop                !     
  val?            %43.1 = %0.8
  dr              %43.2 = Typecheck@0x55eedd478a10[Type#1]
  goto BB39
BB39   <- [41, 43]
  val?^ | miss    %39.0 = Phi                      %41.1:BB41, %43.1:BB43
  val?^ | miss    %39.1 = %39.0
  dr              %39.2 = Phi                      %41.2:BB41, %43.2:BB43
  dr              %39.3 = %39.2
  fs              %39.4 = FrameState         R     0x55eedda283a0+151: [], env=e0.2
  void                    Deopt              !v    %39.4, %39.3, %39.1   !
BB44   <- [42]
  val?            %44.0 = StaticCall         !v    parent.frame[0x55eeddc8e6e0]() e0.2   <env->
  void                    StVar              lW    parentenv, %44.0, e0.2
  val?^ | miss    %44.2 = LdVar              eR    length, e0.2
  lgl$#-          %44.3 = Identical                <blt length>, %44.2   <true>
  void                    Branch                   %44.3 -> BB46 (if true) | BB47 (if false)
BB45   <- [42]
  fs              %45.0 = FrameState         R     0x55eedda283a0+256: [], env=e0.2
  void                    Deopt              !v    %45.0, CallTarget@0x55eedd478a10[Call#3], %42.3   !
BB46   <- [44]
  val?^ | miss    %46.0 = LdVar              eR    classes, e0.2
  lgl$#-          %46.1 = IsType                   %46.0 isA val?~- | miss
  void                    Branch                   %46.1 -> BB48 (if true) | BB49 (if false)
BB47   <- [44]
  void                    Nop                !     
  lgl$#-          %47.1 = %44.3
  dr              %47.2 = DeadBranchReached@0x55eedd478a10[Test#1]
  goto BB5
BB48   <- [46]
  val?~- | miss   %48.0 = CastType           d     dn %46.0
  val?-           %48.1 = Force!<value>            %48.0,    <str$->
  (int|real)$-    %48.2 = CallSafeBuiltin    wed   length(%48.1)    <int$->
  lgl$#-          %48.3 = IsType                   %48.2 isA int$-
  void                    Branch                   %48.3 -> BB50 (if true) | BB51 (if false)
BB49   <- [46]
  void                    Nop                !     
  val?^ | miss    %49.1 = %46.0
  dr              %49.2 = Typecheck@0x55eedd478a10[Type#7]
  goto BB5
BB5   <- [47, 49]
  val?^ | miss    %5.0  = Phi                      %47.1:BB47, %49.1:BB49
  val?^ | miss    %5.1  = %5.0
  dr              %5.2  = Phi                      %47.2:BB47, %49.2:BB49
  dr              %5.3  = %5.2
  fs              %5.4  = FrameState         R     0x55eedda283a0+297: [], env=e0.2
  void                    Deopt              !v    %5.4, %5.3, %5.1   !
BB50   <- [48]
  int$-           %50.0 = CastType           d     dn %48.2
  val?^ | miss    %50.1 = LdVar              eR    handlers, e0.2
  lgl$#-          %50.2 = IsType                   %50.1 isA val?~+ | miss
  void                    Branch                   %50.2 -> BB52 (if true) | BB53 (if false)
BB51   <- [48]
  void                    Nop                !     
  (int|real)$-    %51.1 = %48.2
  dr              %51.2 = Typecheck@0x55eedd478a10[Type#8]
  goto BB7
BB52   <- [50]
  val?~+ | miss   %52.0 = CastType           d     dn %50.1
  val?+           %52.1 = Force!<value>            %52.0,    <vec$+>
  (int|real)$-    %52.2 = CallSafeBuiltin    wed   length(%52.1)    <int$->
  lgl$#-          %52.3 = IsType                   %52.2 isA int$-
  void                    Branch                   %52.3 -> BB54 (if true) | BB55 (if false)
BB53   <- [50]
  void                    Nop                !     
  val?^ | miss    %53.1 = %50.1
  dr              %53.2 = Typecheck@0x55eedd478a10[Type#10]
  goto BB7
BB7   <- [51, 53]
  val?^ | miss    %7.0  = Phi                      %51.1:BB51, %53.1:BB53
  val?^ | miss    %7.1  = %7.0
  dr              %7.2  = Phi                      %51.2:BB51, %53.2:BB53
  dr              %7.3  = %7.2
  fs              %7.4  = FrameState         R     0x55eedda283a0+388: [%48.2], env=e0.2
  void                    Deopt              !v    %7.4, %7.3, %7.1   !
BB54   <- [52]
  int$-           %54.0 = CastType           d     dn %52.2
  lgl$-           %54.1 = Neq                d     %50.0, %54.0, elided   <lgl$->
  lgl$#-          %54.2 = CheckTrueFalse     e     %54.1
  void                    Branch                   %54.2 -> BB38 (if true) | BB11 (if false)
BB55   <- [52]
  void                    Nop                !     
  (int|real)$-    %55.1 = %52.2
  dr              %55.2 = Typecheck@0x55eedd478a10[Type#11]
  goto BB9
BB38   <- [54]
  (cls|spec|blt)  %38.0 = LdFun              !v    stop, e0.2
  fs              %38.1 = FrameState         R     0x55eedda283a0+511: [%38.0], env=e0.2
  void                    Deopt              !v    %38.1, DeadCall@0x55eedd478a10[Call#6], %38.0   !
BB11   <- [54]
  val?^ | miss    %11.0 = LdVar              eR    tryCatchList, e0.2
  lgl$#-          %11.1 = Identical                %11.0, %0.3
  void                    Branch                   %11.1 -> BB56 (if true) | BB57 (if false)
BB9   <- [55, 57]
  val?^ | miss    %9.0  = Phi                      %55.1:BB55, %57.1:BB57
  val?^ | miss    %9.1  = %9.0
  dr              %9.2  = Phi                      %55.2:BB55, %57.2:BB57
  dr              %9.3  = %9.2
  fs              %9.4  = FrameState         R     0x55eedda283a0+484: [%50.0, %52.2], env=e0.2
  void                    Deopt              !v    %9.4, %9.3, %9.1   !
BB56   <- [11]
  prom-           %56.0 = MkArg                    unboundValue, tryCatch[0x55eeddd49f50]_p0, e0.2
  prom-           %56.1 = MkArg                    unboundValue, tryCatch[0x55eeddd49f50]_p1, e0.2
  prom-           %56.2 = MkArg                    unboundValue, tryCatch[0x55eeddd49f50]_p2 (!refl), e0.2
  prom-           %56.3 = MkArg                    unboundValue, tryCatch[0x55eeddd49f50]_p3, e0.2
  ct              %56.4 = PushContext        lCL   %56.0, %56.1, %56.2, %56.3, tryCatchList(expr, classes, parentenv, handlers), %0.3, e0.2
  val?^           %56.5 = CastType                 up %56.3
  val?^           %56.6 = CastType                 up %56.2
  val?^           %56.7 = CastType                 up %56.1
  val?^           %56.8 = CastType                 up %56.0
  env             e56.9 = MkEnv              l     expr=%56.8, names=%56.7, parentenv=%56.6, handlers=%56.5, parent=e0.2, context 1
  val?            %56.10 = Force!<lazy>       !vL   %56.7, e56.9   <str$->
  lgl$#-          %56.11 = IsType                   %56.10 isA val?-
  void                    Branch                   %56.11 -> BB58 (if true) | BB59 (if false)
BB57   <- [11]
  void                    Nop                !     
  val?^ | miss    %57.1 = %11.0
  dr              %57.2 = CallTarget@0x55eedd478a10[Call#7]
  goto BB9
BB58   <- [56]
  val?-           %58.0 = CastType           d     dn %56.10   <str$->
  (int|real)$-    %58.1 = CallSafeBuiltin    wed   length(%58.0)    <int$->
  lgl$#-          %58.2 = IsType                   %58.1 isA int$-
  void                    Branch                   %58.2 -> BB60 (if true) | BB61 (if false)
BB59   <- [56]
  fs              %59.0 = FrameState         R     0x55eedda283a0+586: [], env=e0.2
  fs              %59.1 = FrameState         R     0x55eedda24250+69: [<blt length>, %56.10], env=e56.9, next=%59.0
  void                    Deopt              !v    %59.1, Typecheck@0x55eedcd45520[Type#1], %56.10   !
BB60   <- [58]
  int$-           %60.0 = CastType           d     dn %58.1
  void                    StVar              lW    nh, %60.0, e56.9
  lgl$-           %60.2 = Gt                 d     %60.0, 1L, elided   <lgl$->
  lgl$#-          %60.3 = CheckTrueFalse     e     %60.2
  void                    Branch                   %60.3 -> BB37 (if true) | BB18 (if false)
BB61   <- [58]
  fs              %61.0 = FrameState         R     0x55eedda283a0+586: [], env=e0.2
  fs              %61.1 = FrameState         R     0x55eedda24250+91: [%58.1], env=e56.9, next=%61.0
  void                    Deopt              !v    %61.1, Typecheck@0x55eedcd45520[Type#2], %58.1   !
BB37   <- [60]
  fs              %37.0 = FrameState         R     0x55eedda283a0+586: [], env=e0.2
  (cls|spec|blt)  %37.1 = LdFun              !v    tryCatchOne, e0.2
  fs              %37.2 = FrameState         R     0x55eedda24250+250: [%37.1], env=e56.9, next=%37.0
  void                    Deopt              !v    %37.2, DeadCall@0x55eedcd45520[Call#2], %37.1   !
BB18   <- [60]
  lgl$-           %18.0 = Eq                 d     %60.0, 1L, elided   <lgl$->
  lgl$#-          %18.1 = CheckTrueFalse     e     %18.0
  void                    Branch                   %18.1 -> BB21 (if true) | BB19 (if false)
BB21   <- [18]
  val?^ | miss    %21.0 = LdVar              eR    tryCatchOne, e56.9
  (cls|spec|blt)  %21.1 = CastType                 dn %21.0
  val+            %21.2 = CallSafeBuiltin          bodyCode(%21.1) 
  lgl$#-          %21.3 = Identical                %21.2, <(rir::DispatchTable*)0x55eedda27c10>
  void                    Branch                   %21.3 -> BB62 (if true) | BB63 (if false)
BB19   <- [18]
  void                    Visible            v     
  val?            %19.1 = Force!             !L    %56.8, e56.9   <val?_>
  val?            %19.2 = %19.1
  goto BB20
BB62   <- [21]
  val?            %62.0 = Force!             d     %21.0, 
  prom-           %62.1 = MkArg                    unboundValue, tryCatch[0x55eeddd49f50]_p4, e56.9
  prom-           %62.2 = MkArg                    unboundValue, tryCatch[0x55eeddd49f50]_p5, e56.9
  prom-           %62.3 = MkArg                    unboundValue, tryCatch[0x55eeddd49f50]_p6, e56.9
  prom-           %62.4 = MkArg                    unboundValue, tryCatch[0x55eeddd49f50]_p7, e56.9
  (cls|spec|blt)  %62.5 = ChkFunction        e     %62.0
  env             e62.6 = CallSafeBuiltin          environment(%62.5) 
  ct              %62.7 = PushContext        lCL   %62.1, %62.2, %62.3, %62.4, tryCatchOne(expr, names, parentenv, [[(handler|..., %62.5, e56.9
  val?^           %62.8 = CastType                 up %62.4
  val?^           %62.9 = CastType                 up %62.3
  val?^           %62.10 = CastType                 up %62.2
  val?^           %62.11 = CastType                 up %62.1
  env             e62.12 = MkEnv              l     expr=%62.11, name=%62.10, parentenv=%62.9, handler=%62.8, parent=e62.6, context 1
  cls             %62.13 = MkCls                    doTryCatch, e62.12
  void                    StVar              lW    doTryCatch, %62.13, e62.12
  prom-           %62.15 = MkArg                    unboundValue, tryCatch[0x55eeddd49f50]_p8, e62.12
  prom-           %62.16 = MkArg                    unboundValue, tryCatch[0x55eeddd49f50]_p9, e62.12
  prom-           %62.17 = MkArg                    unboundValue, tryCatch[0x55eeddd49f50]_p10, e62.12
  prom-           %62.18 = MkArg                    unboundValue, tryCatch[0x55eeddd49f50]_p11, e62.12
  val?            %62.19 = StaticCall         !v    doTryCatch[0x55eeddae2070](%62.15, %62.16, %62.17, %62.18) from %62.13 e62.12   <vec->
  void                    StVar              lW    value, %62.19, e62.12
  lgl$#-          %62.21 = IsType                   %62.19 isA val+   <true>
  lgl$#-          %62.22 = IsType                   %62.19 isA val?-
  val             %62.23 = ChkMissing         e     %62.19
  void                    Branch                   %62.21 -> BB64 (if true) | BB65 (if false)
BB63   <- [21]
  fs              %63.0 = FrameState         R     0x55eedda283a0+586: [], env=e0.2
  fs              %63.1 = FrameState         R     0x55eedda24250+105: [], env=e56.9, next=%63.0
  void                    Deopt              !v    %63.1, CallTarget@0x55eedcd45520[Call#1], %21.2   !
BB20   <- [19, 74]
  val?            %20.0 = Phi                      %19.2:BB19, %74.6:BB74
  val?            %20.1 = %20.0
  val?            %20.2 = PopContext         C     %20.1, %56.4   <nil->
  void                    Return             l     %20.2
BB64   <- [62]
  void                    Branch                   %62.22 -> BB66 (if true) | BB67 (if false)
BB65   <- [62]
  void                    Nop                !     
  lgl$#-          %65.1 = %62.21
  dr              %65.2 = DeadBranchReached@0x55eedda27b40[Test#0]
  goto BB22
BB66   <- [64]
  val?-           %66.0 = CastType           d     dn %62.19   <vec->
  val?            %66.1 = Extract2_1D        wed   %66.0, 1L, elided   <vec>
  lgl$-           %66.2 = Is                       %66.1, NULL
  lgl$#-          %66.3 = CheckTrueFalse     e     %66.2
  void                    Branch                   %66.3 -> BB32 (if true) | BB26 (if false)
BB67   <- [64]
  void                    Nop                !     
  val?            %67.1 = %62.19
  dr              %67.2 = Typecheck@0x55eedda27b40[Type#4]
  goto BB22
BB22   <- [65, 67]
  val?^ | miss    %22.0 = Phi                      %65.1:BB65, %67.1:BB67
  val?^ | miss    %22.1 = %22.0
  dr              %22.2 = Phi                      %65.2:BB65, %67.2:BB67
  dr              %22.3 = %22.2
  fs              %22.4 = FrameState         R     0x55eedda283a0+586: [], env=e0.2
  fs              %22.5 = FrameState         R     0x55eedda24250+235: [], env=e56.9, next=%22.4
  fs              %22.6 = FrameState         R     0x55eedda25480+86: [], env=e62.12, next=%22.5
  void                    Deopt              !v    %22.6, %22.3, %22.1   !
BB32   <- [66]
  val?            %32.0 = CallBuiltin        !v    geterrmessage() e62.12
  void                    StVar              lW    msg, %32.0, e62.12
  val?^ | miss    %32.2 = LdVar              eR    value, e62.12
  val?            %32.3 = Force!             !v    %32.2, e62.12   <val?_>
  lgl$#-          %32.4 = IsType                   %32.3 isA val?+
  void                    Branch                   %32.4 -> BB70 (if true) | BB71 (if false)
BB26   <- [66]
  val?^ | miss    %26.0 = LdVar              eR    is.character, e62.12
  lgl$#-          %26.1 = Identical                <blt is.character>, %26.0   <true>
  void                    Branch                   %26.1 -> BB68 (if true) | BB69 (if false)
BB70   <- [32]
  val?+           %70.0 = CastType           d     dn %32.3   <val?_>
  val?            %70.1 = Extract2_1D        wed   %70.0, 2L, elided   <val?_>
  void                    StVar              lW    call, %70.1, e62.12
  val?^ | miss    %70.3 = LdVar              eR    simpleError, e62.12
  lgl$#-          %70.4 = Identical                %70.3, function(message, call=NULL) <(rir::DispatchTa|...
  void                    Branch                   %70.4 -> BB76 (if true) | BB77 (if false)
BB71   <- [32]
  fs              %71.0 = FrameState         R     0x55eedda283a0+586: [], env=e0.2
  fs              %71.1 = FrameState         R     0x55eedda24250+235: [], env=e56.9, next=%71.0
  fs              %71.2 = FrameState         R     0x55eedda25480+594: [%32.3], env=e62.12, next=%71.1
  void                    Deopt              !v    %71.2, Typecheck@0x55eedda27b40[Type#21], %32.3   !
BB68   <- [26]
  lgl$#-          %68.0 = CallSafeBuiltin    wed   is.character(%66.1)    <lgl$->
  void                    Branch                   %68.0 -> BB31 (if true) | BB27 (if false)
BB69   <- [26]
  fs              %69.0 = FrameState         R     0x55eedda283a0+586: [], env=e0.2
  fs              %69.1 = FrameState         R     0x55eedda24250+235: [], env=e56.9, next=%69.0
  fs              %69.2 = FrameState         R     0x55eedda25480+138: [%66.1], env=e62.12, next=%69.1
  void                    Deopt              !v    %69.2, DeadBranchReached@0x55eedda27b40[Test#1], %26.1   !
BB76   <- [70]
  prom-           %76.0 = MkArg                    unboundValue, tryCatch[0x55eeddd49f50]_p12, e62.12
  prom-           %76.1 = MkArg                    unboundValue, tryCatch[0x55eeddd49f50]_p13 (!refl), e62.12
  val?            %76.2 = StaticCall         !v    simpleError[0x55eeddb96e80](%76.0, %76.1) e62.12   <vec>
  void                    StVar              lW    cond, %76.2, e62.12
  goto BB28
BB77   <- [70]
  fs              %77.0 = FrameState         R     0x55eedda283a0+586: [], env=e0.2
  fs              %77.1 = FrameState         R     0x55eedda24250+235: [], env=e56.9, next=%77.0
  fs              %77.2 = FrameState         R     0x55eedda25480+652: [], env=e62.12, next=%77.1
  void                    Deopt              !v    %77.2, CallTarget@0x55eedda27b40[Call#3], %70.3   !
BB31   <- [68]
  fs              %31.0 = FrameState         R     0x55eedda283a0+586: [], env=e0.2
  fs              %31.1 = FrameState         R     0x55eedda24250+235: [], env=e56.9, next=%31.0
  void                    StVar              lW    msg, %66.1, e62.12
  val?            %31.3 = Extract2_1D        wed   %66.0, 2L, elided   <val?_>
  void                    StVar              lW    call, %31.3, e62.12
  (cls|spec|blt)  %31.5 = LdFun              !v    simpleError, e62.12
  fs              %31.6 = FrameState         R     0x55eedda25480+512: [%31.5], env=e62.12, next=%31.1
  void                    Deopt              !v    %31.6, DeadCall@0x55eedda27b40[Call#2], %31.5   !
BB27   <- [68]
  void                    StVar              lW    cond, %66.1, e62.12
  goto BB28
BB28   <- [27, 76]
  val?^ | miss    %28.0 = LdVar              eR    value, e62.12
  lgl$#-          %28.1 = IsType                   %28.0 isA val?~- | miss
  void                    Branch                   %28.1 -> BB72 (if true) | BB73 (if false)
BB72   <- [28]
  val?~- | miss   %72.0 = CastType           d     dn %28.0
  val?-           %72.1 = Force!<value>            %72.0,    <vec->
  lgl$#-          %72.2 = IsType                   %72.1 isA val+   <true>
  void                    Branch                   %72.2 -> BB74 (if true) | BB75 (if false)
BB73   <- [28]
  void                    Nop                !     
  val?^ | miss    %73.1 = %28.0
  dr              %73.2 = Typecheck@0x55eedda27b40[Type#26]
  goto BB29
BB74   <- [72]
  val?            %74.0 = Extract2_1D        wed   %72.1, 3L, elided   <cls->
  (cls|spec|blt)  %74.1 = ChkFunction        e     %74.0
  void                    Visible            v     
  prom-           %74.3 = MkArg                    unboundValue, tryCatch[0x55eeddd49f50]_p14 (!refl), e62.12
  val?            %74.4 = Call               !     %74.1(%74.3) e62.12   <nil->
  val?            %74.5 = PopContext         C     %74.4, %62.7   <nil->
  val?            %74.6 = %74.5
  goto BB20
BB75   <- [72]
  void                    Nop                !     
  lgl$#-          %75.1 = %72.2
  dr              %75.2 = DeadBranchReached@0x55eedda27b40[Test#8]
  goto BB29
BB29   <- [73, 75]
  val?^ | miss    %29.0 = Phi                      %73.1:BB73, %75.1:BB75
  val?^ | miss    %29.1 = %29.0
  dr              %29.2 = Phi                      %73.2:BB73, %75.2:BB75
  dr              %29.3 = %29.2
  fs              %29.4 = FrameState         R     0x55eedda283a0+586: [], env=e0.2
  fs              %29.5 = FrameState         R     0x55eedda24250+235: [], env=e56.9, next=%29.4
  fs              %29.6 = FrameState         R     0x55eedda25480+703: [], env=e62.12, next=%29.5
  void                    Deopt              !v    %29.6, %29.3, %29.1   !
Prom 0:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    expr, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    classes, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    parentenv, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 3:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    handlers, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <vec$+>
  void                    Return             l     %0.3
Prom 4:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    expr, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 5:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    names, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 6:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    parentenv, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 7:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    handlers, e0.0
  val?            %0.2  = Force<lazy>        !v    %0.1, e0.0   <vec$+>
  val?            %0.3  = Extract2_1D        !v    %0.2, 1L, e0.0   <cls->
  void                    Visible            v     
  void                    Return             l     %0.3
Prom 8:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    expr, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    NonLocalReturn     !     %0.3, e0.0
Prom 9:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    name, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 10:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    parentenv, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 11:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    handler, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <cls->
  void                    Return             l     %0.3
Prom 12:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    msg, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 13:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    call, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <code->
  void                    Return             l     %0.3
Prom 14:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    cond, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <vec>
  void                    Return             l     %0.3

│ tryCatch[0x55eeddd49f50]                                                     │
└──────────────────────────────────────────────────────────────────────────────┘
