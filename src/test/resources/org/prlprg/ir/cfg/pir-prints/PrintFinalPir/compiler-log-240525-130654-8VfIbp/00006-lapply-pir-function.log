
┌──────────────────────────────────────────────────────────────────────────────┐
│ lapply[0x555ea24c0360]                                                       │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;NonRefl0,NonRefl1,!Obj0,!Obj1 miss: 1│
│ Properties:                                                                  │
├────── Final PIR Version
lapply[0x555ea24c0360]
BB0
  val?^           %0.0  = LdArg                    1
  val?^           %0.1  = LdArg                    0
  env             e0.2  = MkEnv              l     X=%0.1, FUN=%0.0, ...(miss)=missingArg, parent=R_BaseNamespace, context 1
  prom-           %0.3  = MkArg                    unboundValue, lapply[0x555ea24c0360]_p0 (!refl), e0.2
  val?            %0.4  = StaticCall         !v    match.fun[0x555ea23a8670](%0.3) e0.2   <cls->
  void                    StVar              lW    FUN, %0.4, e0.2
  val?^ | miss    %0.6  = LdVar              eR    is.vector, e0.2
  lgl$#-          %0.7  = Identical                %0.6, function(x, mode="any") <(rir::DispatchTable*)|...
  void                    Branch                   %0.7 -> BB16 (if true) | BB17 (if false)
BB16   <- [0]
  val?^ | miss    %16.0 = LdVar              eR    X, e0.2
  val?            %16.1 = Force!<lazy>       !v    %16.0, e0.2   <vec->
  lgl$#-          %16.2 = CallSafeBuiltin    wed   is.vector(%16.1, "any")    <lgl$->
  lgl$#-          %16.3 = Not                d     %16.2, elided
  void                    Branch                   %16.2 -> BB14 (if true) | BB5 (if false)
BB17   <- [0]
  fs              %17.0 = FrameState         R     0x555ea24a1860+46: [], env=e0.2
  void                    Deopt              !v    %17.0, CallTarget@0x555ea241e190[Call#1], %0.6   !
BB14   <- [16]
  val?^ | miss    %14.0 = LdVar              eR    is.object, e0.2
  lgl$#-          %14.1 = Identical                <blt is.object>, %14.0   <true>
  void                    Branch                   %14.1 -> BB18 (if true) | BB19 (if false)
BB5   <- [16]
  void                    Nop                !     
  lgl$#-          %5.1  = %16.3
  goto BB6
BB18   <- [14]
  val?^ | miss    %18.0 = LdVar              eR    X, e0.2
  val?            %18.1 = Force!<wrapped>    !v    %18.0, e0.2   <vec->
  lgl$#-          %18.2 = CallSafeBuiltin    wed   is.object(%18.1)    <lgl$->
  lgl$-           %18.3 = LOr                      %16.3, %18.2
  lgl$-           %18.4 = %18.3
  goto BB6
BB19   <- [14]
  fs              %19.0 = FrameState         R     0x555ea24a1860+78: [], env=e0.2
  prom-           %19.1 = MkArg                    %16.1, lapply[0x555ea24c0360]_p1 (!refl), e0.2
  val?~           %19.2 = CastType                 up %19.1
  env             e19.3 = (MkEnv)            l     mode(miss)="any", x=%19.2, parent=R_BaseNamespace, context 0
  fs              %19.4 = FrameState         R     0x555ea233f160+41: [%16.2], env=e19.3, next=%19.0
  void                    Deopt              !v    %19.4, DeadBranchReached@0x555ea241e190[Test#0], %14.1   !
BB6   <- [5, 18]
  lgl$-           %6.0  = Phi                      %18.4:BB18, %5.1:BB5
  lgl$-           %6.1  = %6.0
  lgl$#-          %6.2  = CheckTrueFalse     e     %6.1
  void                    Branch                   %6.2 -> BB13 (if true) | BB7 (if false)
BB13   <- [6]
  (cls|spec|blt)  %13.0 = LdFun              !v    as.list, e0.2
  fs              %13.1 = FrameState         R     0x555ea24a1860+205: [%13.0], env=e0.2
  void                    Deopt              !v    %13.1, DeadCall@0x555ea241e190[Call#3], %13.0   !
BB7   <- [6]
  val?^ | miss    %7.0  = LdVar              eR    X, e0.2
  val?            %7.1  = Force!<wrapped>    !v    %7.0, e0.2   <vec->
  (nil|str)-      %7.2  = Names                    %7.1
  int$-           %7.3  = Length                   %7.1
  vec-            %7.4  = CallSafeBuiltin    wed   vector("list", %7.3) 
  val+            %7.5  = SetNames           e     %7.4, %7.2
  int$#-          %7.6  = 0L
  val+            %7.7  = %7.5
  goto BB8
BB8   <- [7, 20]
  int$-           %8.0  = Phi                      %7.6:BB7, %20.7:BB20
  int$-           %8.1  = %8.0
  val?            %8.2  = Phi                      %7.7:BB7, %20.8:BB20
  val?            %8.3  = %8.2
  int$-           %8.4  = Inc                      %8.1
  lgl$-           %8.5  = Lt                 d     %7.3, %8.4, elided
  lgl$#-          %8.6  = Identical                %8.5, true
  void                    Branch                   %8.6 -> BB12 (if true) | BB9 (if false)
BB12   <- [8]
  void                    Visible            v     
  void                    Return             l     %8.3
BB9   <- [8]
  void                    StVar              lW    i, %8.4, e0.2
  val?^ | miss    %9.1  = LdVar              eR    FUN, e0.2
  (cls|spec|blt)  %9.2  = CastType                 dn %9.1
  val+            %9.3  = CallSafeBuiltin          bodyCode(%9.2) 
  lgl$#-          %9.4  = Identical                %9.3, <(rir::DispatchTable*)0x555ea075b0a0>
  void                    Branch                   %9.4 -> BB20 (if true) | BB21 (if false)
BB20   <- [9]
  val?            %20.0 = Force!             d     %9.1, 
  prom-           %20.1 = MkArg                    unboundValue, lapply[0x555ea24c0360]_p2, e0.2
  (miss|dots)     %20.2 = LdDots             R     , e0.2
  *dots-          %20.3 = ExpandDots               %20.2
  (cls|spec|blt)  %20.4 = ChkFunction        e     %20.0
  val?            %20.5 = NamedCall          !v    %20.4(%20.1, .xpandDotsTrigger=%20.3) e0.2   <real->
  val?            %20.6 = SetVecElt          e     %20.5, %8.3, %8.4
  int$-           %20.7 = %8.4
  val?            %20.8 = %20.6
  goto BB8
BB21   <- [9]
  fs              %21.0 = FrameState         R     0x555ea24a1860+310: [%8.3, %7.3, %8.4], env=e0.2
  void                    Deopt              !v    %21.0, CallTarget@0x555ea241e190[Call#4], %9.3   !
Prom 0:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    FUN, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <cls->
  void                    Return             l     %0.3
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    X, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <vec->
  void                    Return             l     %0.3
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    X, e0.0
  val?            %0.2  = Force<wrapped>     !v    %0.1, e0.0   <vec->
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <true>
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    i, e0.0
  val?            %2.1  = Force<value>       !v    %2.0, e0.0   <int$->
  val?            %2.2  = %2.1
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, lapply[0x555ea24c0360]_p3, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.2:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract2_1D        !v    %0.2, %3.1, e0.0   <real->
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 3:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    i, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3

│ lapply[0x555ea24c0360]                                                       │
└──────────────────────────────────────────────────────────────────────────────┘
