
┌──────────────────────────────────────────────────────────────────────────────┐
│ FUN[0x563fa8078ee0]                                                          │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch                                      │
│ Properties:                                                                  │
├────── Final PIR Version
FUN[0x563fa8078ee0]
BB0
  val?^           %0.0  = LdArg                    0
  env             e0.1  = MkEnv              l     x=%0.0, parent=R_BaseNamespace, context 1
  prom-           %0.2  = MkArg                    unboundValue, FUN[0x563fa8078ee0]_p0, e0.1
  ct              %0.3  = PushContext        lCL   %0.2, is.numeric_version(x), function(x) <(rir::DispatchTable*)0x563fa79731|..., e0.1
  val?^           %0.4  = CastType                 up %0.2
  env             e0.5  = MkEnv              l     x=%0.4, parent=R_BaseNamespace, context 1
  prom-           %0.6  = MkArg                    unboundValue, FUN[0x563fa8078ee0]_p3, e0.5
  ct              %0.7  = PushContext        lCL   %0.6, "numeric_version", inherits(x, "numeric_version"), function(x, what, which=FALSE) <(rir::Dispatch|..., e0.5
  val?^           %0.8  = CastType                 up %0.6
  env             e0.9  = MkEnv              l     x=%0.8, what="numeric_version", which(miss)=false, parent=R_BaseNamespace, context 1
  val?            %0.10 = Force!<lazy>       !vr   %0.8,    <val?>
  val?            %0.11 = CallBuiltin        !v    inherits(%0.10, "numeric_version", false) e0.9
  val?            %0.12 = PopContext         C     %0.11, %0.7   <lgl$->
  lgl$#-          %0.13 = IsType                   %0.12 isA lgl$-
  void                    Branch                   %0.13 -> BB103 (if true) | BB104 (if false)
BB103   <- [0]
  lgl$-           %103.0 = CastType           d     dn %0.12
  val?            %103.1 = PopContext         C     %103.0, %0.3   <lgl$->
  lgl$#-          %103.2 = IsType                   %103.1 isA lgl$-
  void                    Branch                   %103.2 -> BB105 (if true) | BB106 (if false)
BB104   <- [0]
  fs              %104.0 = FrameState         R     0x563fa79499e0+32: [], env=e0.1
  fs              %104.1 = FrameState         R     0x563fa796e0f0+37: [%0.12], env=e0.5, next=%104.0
  void                    Deopt              !v    %104.1, Typecheck@0x563fa707fb28[Type#1], %0.12   !
BB105   <- [103]
  lgl$-           %105.0 = CastType           d     dn %103.1
  lgl$#-          %105.1 = CheckTrueFalse     e     %105.0
  void                    Branch                   %105.1 -> BB101 (if true) | BB5 (if false)
BB106   <- [103]
  void                    Nop                !     
  val?            %106.1 = %103.1
  dr              %106.2 = Typecheck@0x563fa704c778[Type#1]
  goto BB3
BB101   <- [105]
  val?^ | miss    %101.0 = LdVar              eR    x, e0.1
  void                    Visible            v     
  val?            %101.2 = Force!<wrapped>    !     %101.0, e0.1   <vec$>
  val?            %101.3 = %101.2
  goto BB46
BB5   <- [105]
  val?^ | miss    %5.0  = LdVar              eR    is.package_version, e0.1
  lgl$#-          %5.1  = Identical                %5.0, function(x) <(rir::DispatchTable*)0x563fa79977|...
  void                    Branch                   %5.1 -> BB107 (if true) | BB108 (if false)
BB3   <- [106, 108]
  val?^ | miss    %3.0  = Phi                      %106.1:BB106, %108.1:BB108
  val?^ | miss    %3.1  = %3.0
  dr              %3.2  = Phi                      %106.2:BB106, %108.2:BB108
  dr              %3.3  = %3.2
  fs              %3.4  = FrameState         R     0x563fa79499e0+32: [%103.1], env=e0.1
  void                    Deopt              !v    %3.4, %3.3, %3.1   !
BB46   <- [101, 149]
  val?            %46.0 = Phi                      %149.13:BB149, %101.3:BB101
  val?            %46.1 = %46.0
  void                    Return             l     %46.1
BB107   <- [5]
  prom-           %107.0 = MkArg                    unboundValue, FUN[0x563fa8078ee0]_p1, e0.1
  ct              %107.1 = PushContext        lCL   %107.0, is.package_version(x), function(x) <(rir::DispatchTable*)0x563fa79977|..., e0.1
  val?^           %107.2 = CastType                 up %107.0
  env             e107.3 = MkEnv              l     x=%107.2, parent=R_BaseNamespace, context 1
  prom-           %107.4 = MkArg                    unboundValue, FUN[0x563fa8078ee0]_p4, e107.3
  ct              %107.5 = PushContext        lCL   %107.4, "package_version", inherits(x, "package_version"), function(x, what, which=FALSE) <(rir::Dispatch|..., e107.3
  val?^           %107.6 = CastType                 up %107.4
  env             e107.7 = MkEnv              l     x=%107.6, what="package_version", which(miss)=false, parent=R_BaseNamespace, context 1
  val?            %107.8 = Force!<lazy>       !vL   %107.6, e107.7   <val?>
  val?            %107.9 = CallBuiltin        !v    inherits(%107.8, "package_version", false) e107.7
  val?            %107.10 = PopContext         C     %107.9, %107.5   <lgl$->
  lgl$#-          %107.11 = IsType                   %107.10 isA lgl$-
  void                    Branch                   %107.11 -> BB109 (if true) | BB110 (if false)
BB108   <- [5]
  void                    Nop                !     
  val?^ | miss    %108.1 = %5.0
  dr              %108.2 = CallTarget@0x563fa704c778[Call#1]
  goto BB3
BB109   <- [107]
  lgl$-           %109.0 = CastType           d     dn %107.10
  val?            %109.1 = PopContext         C     %109.0, %107.1   <lgl$->
  lgl$#-          %109.2 = IsType                   %109.1 isA lgl$-
  void                    Branch                   %109.2 -> BB111 (if true) | BB112 (if false)
BB110   <- [107]
  fs              %110.0 = FrameState         R     0x563fa79499e0+75: [], env=e0.1
  fs              %110.1 = FrameState         R     0x563fa7998080+37: [%107.10], env=e107.3, next=%110.0
  void                    Deopt              !v    %110.1, Typecheck@0x563fa704cb98[Type#1], %107.10   !
BB111   <- [109]
  lgl$-           %111.0 = CastType           d     dn %109.1
  lgl$#-          %111.1 = CheckTrueFalse     e     %111.0
  void                    Branch                   %111.1 -> BB100 (if true) | BB10 (if false)
BB112   <- [109]
  fs              %112.0 = FrameState         R     0x563fa79499e0+75: [%109.1], env=e0.1
  void                    Deopt              !v    %112.0, Typecheck@0x563fa704c778[Type#3], %109.1   !
BB100   <- [111]
  (cls|spec|blt)  %100.0 = LdFun              !v    structure, e0.1
  fs              %100.1 = FrameState         R     0x563fa79499e0+596: [%100.0], env=e0.1
  void                    Deopt              !v    %100.1, DeadCall@0x563fa704c778[Call#14], %100.0   !
BB10   <- [111]
  val?^ | miss    %10.0 = LdVar              eR    x, e0.1
  val?            %10.1 = Force!<wrapped>    !v    %10.0, e0.1   <str$->
  lgl$-           %10.2 = Is                       %10.1, list
  lgl$-           %10.3 = AsLogical                %10.2
  lgl$#-          %10.4 = Identical                %10.3, false
  void                    Branch                   %10.4 -> BB16 (if true) | BB13 (if false)
BB16   <- [10]
  lgl$#-          %16.0 = CheckTrueFalse     e     %10.3
  void                    Branch                   %16.0 -> BB99 (if true) | BB17 (if false)
BB13   <- [10]
  val?^ | miss    %13.0 = LdVar              eR    all, e0.1
  lgl$#-          %13.1 = Identical                <blt all>, %13.0   <@?>
  void                    Branch                   %13.1 -> BB15 (if true) | BB14 (if false)
BB99   <- [16]
  (cls|spec|blt)  %99.0 = LdFun              !v    vapply, e0.1
  fs              %99.1 = FrameState         R     0x563fa79499e0+296: [%99.0], env=e0.1
  void                    Deopt              !v    %99.1, DeadCall@0x563fa704c778[Call#6], %99.0   !
BB17   <- [16]
  val?^ | miss    %17.0 = LdVar              eR    numeric_version, e0.1
  lgl$#-          %17.1 = Identical                %17.0, function(x, strict=TRUE) <(rir::DispatchTable*|...
  void                    Branch                   %17.1 -> BB113 (if true) | BB114 (if false)
BB15   <- [13]
  (cls|spec|blt)  %15.0 = LdFun              !v    vapply, e0.1
  fs              %15.1 = FrameState         R     0x563fa79499e0+177: [%10.3, <blt all>, %15.0], env=e0.1
  void                    Deopt              !v    %15.1, DeadCall@0x563fa704c778[Call#4], %15.0   !
BB14   <- [13]
  (cls|spec|blt)  %14.0 = LdFun              !v    all, e0.1
  fs              %14.1 = FrameState         R     0x563fa79499e0+140: [%10.3, %14.0], env=e0.1
  void                    Deopt              !v    %14.1, DeadCall@0x563fa704c778[Call#2], %14.0   !
BB113   <- [17]
  prom-           %113.0 = MkArg                    unboundValue, FUN[0x563fa8078ee0]_p2, e0.1
  ct              %113.1 = PushContext        lCL   %113.0, numeric_version(x), function(x, strict=TRUE) <(rir::DispatchTable*|..., e0.1
  val?^           %113.2 = CastType                 up %113.0
  val?^ | miss    %113.3 = LdVar              eR    .make_numeric_version, R_BaseNamespace
  lgl$#-          %113.4 = Identical                %113.3, function(x, strict=TRUE, regexp, classes=NULL)|...
  void                    Branch                   %113.4 -> BB115 (if true) | BB116 (if false)
BB114   <- [17]
  fs              %114.0 = FrameState         R     0x563fa79499e0+95: [%10.1], env=e0.1
  void                    Deopt              !v    %114.0, CallTarget@0x563fa704c778[Call#5], %17.0   !
BB115   <- [113]
  env             e115.0 = MkEnv              l     x=%113.2, strict(miss)=true, parent=R_BaseNamespace, context 1
  prom-           %115.1 = MkArg                    unboundValue, FUN[0x563fa8078ee0]_p6, e115.0
  prom-           %115.2 = MkArg                    unboundValue, FUN[0x563fa8078ee0]_p7 (!refl), e115.0
  prom-           %115.3 = MkArg                    unboundValue, FUN[0x563fa8078ee0]_p8, e115.0
  ct              %115.4 = PushContext        lCL   %115.1, %115.2, %115.3, .make_numeric_version(x, strict, $(.standard_r|..., function(x, strict=TRUE, regexp, classes=NULL)|..., e115.0
  val?^           %115.5 = CastType                 up %115.3
  val?^           %115.6 = CastType                 up %115.2
  val?^           %115.7 = CastType                 up %115.1
  val?^ | miss    %115.8 = LdVar              eR    names, R_GlobalEnv
  lgl$#-          %115.9 = Identical                <blt names>, %115.8   <true>
  void                    Branch                   %115.9 -> BB117 (if true) | BB118 (if false)
BB116   <- [113]
  fs              %116.0 = FrameState         R     0x563fa79499e0+281: [], env=e0.1
  env             e116.1 = (MkEnv)            l     x=%113.2, strict(miss)=true, parent=R_BaseNamespace, context 1
  fs              %116.2 = FrameState         R     0x563fa799ff80+0: [], env=e116.1, next=%116.0
  void                    Deopt              !v    %116.2, CallTarget@0x563fa704cc48[Call#0], %113.3   !
BB117   <- [115]
  env             e117.0 = MkEnv              l     x=%115.7, strict=%115.6, regexp=%115.5, classes(miss)=nil, parent=R_GlobalEnv, context 1
  val?            %117.1 = Force!<lazy>       !vL   %115.7, e117.0   <str$->
  lgl$#-          %117.2 = IsType                   %117.1 isA val?-
  void                    Branch                   %117.2 -> BB119 (if true) | BB120 (if false)
BB118   <- [115]
  fs              %118.0 = FrameState         R     0x563fa79499e0+281: [], env=e0.1
  fs              %118.1 = FrameState         R     0x563fa799ff80+42: [], env=e115.0, next=%118.0
  env             e118.2 = (MkEnv)            l     x=%115.7, strict=%115.6, regexp=%115.5, classes(miss)=nil, parent=R_GlobalEnv, context 1
  fs              %118.3 = FrameState         R     0x563fa793fb90+17: [<blt names>, %115.9], env=e118.2, next=%118.1
  void                    Deopt              !v    %118.3, DeadBranchReached@0x563fa79391c0[Test#0], %115.9   !
BB119   <- [117]
  val?-           %119.0 = CastType           d     dn %117.1   <str$->
  val+            %119.1 = CallSafeBuiltin    wed   names(%119.0)    <nil->
  void                    StVar              lW    nms, %119.1, e117.0
  val?^ | miss    %119.3 = LdVar              eR    as.character, R_GlobalEnv
  lgl$#-          %119.4 = Identical                <blt as.character>, %119.3   <true>
  void                    Branch                   %119.4 -> BB121 (if true) | BB122 (if false)
BB120   <- [117]
  fs              %120.0 = FrameState         R     0x563fa79499e0+281: [], env=e0.1
  fs              %120.1 = FrameState         R     0x563fa799ff80+42: [], env=e115.0, next=%120.0
  fs              %120.2 = FrameState         R     0x563fa793fb90+69: [<blt names>, %117.1], env=e117.0, next=%120.1
  void                    Deopt              !v    %120.2, Typecheck@0x563fa79391c0[Type#1], %117.1   !
BB121   <- [119]
  val+            %121.0 = CallSafeBuiltin    wed   as.character(%119.0)    <str$->
  void                    StVar              lW    x, %121.0, e117.0
  val?^ | miss    %121.2 = LdVar              eR    rep.int, R_GlobalEnv
  lgl$#-          %121.3 = Identical                %121.2, function(x, times) <(rir::DispatchTable*)0x563|...
  void                    Branch                   %121.3 -> BB123 (if true) | BB124 (if false)
BB122   <- [119]
  fs              %122.0 = FrameState         R     0x563fa79499e0+281: [], env=e0.1
  fs              %122.1 = FrameState         R     0x563fa799ff80+42: [], env=e115.0, next=%122.0
  fs              %122.2 = FrameState         R     0x563fa793fb90+105: [], env=e117.0, next=%122.1
  void                    Deopt              !v    %122.2, DeadBranchReached@0x563fa79391c0[Test#1], %119.4   !
BB123   <- [121]
  val?^ | miss    %123.0 = LdVar              eR    list, R_GlobalEnv
  lgl$#-          %123.1 = Identical                %123.0, <blt list>
  void                    Branch                   %123.1 -> BB125 (if true) | BB126 (if false)
BB124   <- [121]
  void                    Nop                !     
  val?^ | miss    %124.1 = %121.2
  dr              %124.2 = CallTarget@0x563fa79391c0[Call#2]
  goto BB26
BB125   <- [123]
  val?^ | miss    %125.0 = LdVar              eR    integer, R_GlobalEnv
  lgl$#-          %125.1 = Identical                %125.0, function(length=0L) <(rir::DispatchTable*)0x56|...
  void                    Branch                   %125.1 -> BB127 (if true) | BB128 (if false)
BB126   <- [123]
  void                    Nop                !     
  val?^ | miss    %126.1 = %123.0
  dr              %126.2 = CallTarget@0x563fa79391c0[Call#3]
  goto BB26
BB26   <- [124, 126, 128]
  val?^ | miss    %26.0 = Phi                      %124.1:BB124, %126.1:BB126, %128.1:BB128
  val?^ | miss    %26.1 = %26.0
  dr              %26.2 = Phi                      %124.2:BB124, %126.2:BB126, %128.2:BB128
  dr              %26.3 = %26.2
  fs              %26.4 = FrameState         R     0x563fa79499e0+281: [], env=e0.1
  fs              %26.5 = FrameState         R     0x563fa799ff80+42: [], env=e115.0, next=%26.4
  fs              %26.6 = FrameState         R     0x563fa793fb90+210: [], env=e117.0, next=%26.5
  void                    Deopt              !v    %26.6, %26.3, %26.1   !
BB127   <- [125]
  int-            %127.0 = StaticCall         !vrL  unknown--fromConstant[0x563fa856fa30]() from function(length=0L) <(rir::DispatchTable*)0x56|... e117.0   <int->
  val+            %127.1 = CallSafeBuiltin    wed   list(%127.0)    <vec$->
  val?^ | miss    %127.2 = LdVar              eR    length, R_GlobalEnv
  lgl$#-          %127.3 = Identical                %127.2, <blt length>
  void                    Branch                   %127.3 -> BB129 (if true) | BB130 (if false)
BB128   <- [125]
  void                    Nop                !     
  val?^ | miss    %128.1 = %125.0
  dr              %128.2 = CallTarget@0x563fa79391c0[Call#4]
  goto BB26
BB129   <- [127]
  (int|real)$-    %129.0 = CallSafeBuiltin    wed   length(%121.0)    <int$->
  lgl$#-          %129.1 = IsType                   %129.0 isA int-
  lgl$#-          %129.2 = IsType                   %127.1 isA val?-
  void                    Branch                   %129.2 -> BB131 (if true) | BB132 (if false)
BB130   <- [127]
  fs              %130.0 = FrameState         R     0x563fa79499e0+281: [], env=e0.1
  fs              %130.1 = FrameState         R     0x563fa799ff80+42: [], env=e115.0, next=%130.0
  fs              %130.2 = FrameState         R     0x563fa793fb90+247: [], env=e117.0, next=%130.1
  prom-           %130.3 = MkArg                    unboundValue, FUN[0x563fa8078ee0]_p15, e117.0
  val?^           %130.4 = CastType                 up %130.3
  prom-           %130.5 = MkArg                    unboundValue, FUN[0x563fa8078ee0]_p13, e117.0
  val?^           %130.6 = CastType                 up %130.5
  env             e130.7 = (MkEnv)            l     x=%130.6, times=%130.4, parent=R_BaseNamespace, context 0
  fs              %130.8 = FrameState         R     0x563fa7937dc0+9: [], env=e130.7, next=%130.2
  fs              %130.9 = FrameState         R     0x563fa7937280+32(pr): [%127.1], env=e117.0, next=%130.8
  void                    Deopt              !v    %130.9, CallTarget@0x563fa79391c0[Call#5], %127.2   !
BB131   <- [129]
  val-            %131.0 = CastType           d     dn %127.1   <(int|vec)->
  void                    Branch                   %129.1 -> BB133 (if true) | BB134 (if false)
BB132   <- [129]
  void                    Nop                !     
  val+            %132.1 = %127.1
  dr              %132.2 = Typecheck@0x563fa70cbdd8[Type#0]
  goto BB30
BB133   <- [131]
  int$-           %133.0 = CastType           d     dn %129.0   <int$->
  val+            %133.1 = CallSafeBuiltin    wed   rep.int(%131.0, %133.0)    <vec$->
  void                    StVar              lW    y, %133.1, e117.0
  val?^ | miss    %133.3 = LdVar              eR    sprintf, R_GlobalEnv
  lgl$#-          %133.4 = Identical                %133.3, function(fmt, ...) <(rir::DispatchTable*)0x563|...
  void                    Branch                   %133.4 -> BB135 (if true) | BB136 (if false)
BB134   <- [131]
  void                    Nop                !     
  (int|real)$-    %134.1 = %129.0
  dr              %134.2 = Typecheck@0x563fa70cbdd8[Type#1]
  goto BB30
BB30   <- [132, 134]
  val?^ | miss    %30.0 = Phi                      %132.1:BB132, %134.1:BB134
  val?^ | miss    %30.1 = %30.0
  dr              %30.2 = Phi                      %132.2:BB132, %134.2:BB134
  dr              %30.3 = %30.2
  fs              %30.4 = FrameState         R     0x563fa79499e0+281: [], env=e0.1
  fs              %30.5 = FrameState         R     0x563fa799ff80+42: [], env=e115.0, next=%30.4
  prom-           %30.6 = MkArg                    %127.1, FUN[0x563fa8078ee0]_p13 (!refl), e117.0
  val?~           %30.7 = CastType                 up %30.6
  fs              %30.8 = FrameState         R     0x563fa793fb90+247: [], env=e117.0, next=%30.5
  prom-           %30.9 = MkArg                    %129.0, FUN[0x563fa8078ee0]_p15 (!refl), e117.0
  val?~           %30.10 = CastType                 up %30.9
  env             e30.11 = (MkEnv)            l     times=%30.10, x=%30.7, parent=R_BaseNamespace, context 0
  fs              %30.12 = FrameState         R     0x563fa7937dc0+23: [%127.1, %129.0], env=e30.11, next=%30.8
  void                    Deopt              !v    %30.12, %30.3, %30.1   !
BB135   <- [133]
  prom-           %135.0 = MkArg                    unboundValue, FUN[0x563fa8078ee0]_p17, e117.0
  dots-           %135.1 = DotsList           l     %135.0
  ct              %135.2 = PushContext        lCL   "^%s$", %135.1, sprintf("^%s$", regexp), function(fmt, ...) <(rir::DispatchTable*)0x563|..., e117.0
  val?^ | miss    %135.3 = CastType                 up %135.0
  env             e135.4 = MkEnv              l     fmt="^%s$", ...=%135.1, parent=R_BaseNamespace, context 1
  val?            %135.5 = Force!             !vL   %135.3, e135.4
  val?            %135.6 = CallBuiltin        !v    sprintf("^%s$", %135.5) e135.4
  val?            %135.7 = PopContext         C     %135.6, %135.2   <str$->
  void                    StVar              lW    valid_numeric_version_regexp, %135.7, e117.0
  val?^ | miss    %135.9 = LdVar              eR    length, e117.0
  lgl$#-          %135.10 = Identical                <blt length>, %135.9   <true>
  void                    Branch                   %135.10 -> BB137 (if true) | BB138 (if false)
BB136   <- [133]
  fs              %136.0 = FrameState         R     0x563fa79499e0+281: [], env=e0.1
  fs              %136.1 = FrameState         R     0x563fa799ff80+42: [], env=e115.0, next=%136.0
  fs              %136.2 = FrameState         R     0x563fa793fb90+261: [], env=e117.0, next=%136.1
  void                    Deopt              !v    %136.2, CallTarget@0x563fa79391c0[Call#6], %133.3   !
BB137   <- [135]
  val?^ | miss    %137.0 = LdVar              eR    x, e117.0
  val?            %137.1 = Force!<value>      !v    %137.0, e117.0   <str$->
  lgl$#-          %137.2 = IsType                   %137.1 isA val?-
  void                    Branch                   %137.2 -> BB139 (if true) | BB140 (if false)
BB138   <- [135]
  fs              %138.0 = FrameState         R     0x563fa79499e0+281: [], env=e0.1
  fs              %138.1 = FrameState         R     0x563fa799ff80+42: [], env=e115.0, next=%138.0
  fs              %138.2 = FrameState         R     0x563fa793fb90+312: [], env=e117.0, next=%138.1
  void                    Deopt              !v    %138.2, DeadBranchReached@0x563fa79391c0[Test#2], %135.10   !
BB139   <- [137]
  val?-           %139.0 = CastType           d     dn %137.1   <str$->
  (int|real)$-    %139.1 = CallSafeBuiltin    wed   length(%139.0)    <int$->
  lgl$#-          %139.2 = IsType                   %139.1 isA int$-
  void                    Branch                   %139.2 -> BB141 (if true) | BB142 (if false)
BB140   <- [137]
  fs              %140.0 = FrameState         R     0x563fa79499e0+281: [], env=e0.1
  fs              %140.1 = FrameState         R     0x563fa799ff80+42: [], env=e115.0, next=%140.0
  fs              %140.2 = FrameState         R     0x563fa793fb90+381: [<blt length>, %137.1], env=e117.0, next=%140.1
  void                    Deopt              !v    %140.2, Typecheck@0x563fa79391c0[Type#14], %137.1   !
BB141   <- [139]
  int$-           %141.0 = CastType           d     dn %139.1
  lgl$#-          %141.1 = CheckTrueFalse     e     %141.0
  void                    Branch                   %141.1 -> BB47 (if true) | BB40 (if false)
BB142   <- [139]
  void                    Nop                !     
  (int|real)$-    %142.1 = %139.1
  dr              %142.2 = Typecheck@0x563fa79391c0[Type#15]
  goto BB38
BB47   <- [141]
  val?^ | miss    %47.0 = LdVar              eR    grepl, e117.0
  lgl$#-          %47.1 = Identical                %47.0, function(pattern, x, ignore.case=FALSE, perl=F|...
  void                    Branch                   %47.1 -> BB143 (if true) | BB144 (if false)
BB40   <- [141]
  void                    Nop                !     
  goto BB41
BB38   <- [142, 144]
  val?^ | miss    %38.0 = Phi                      %142.1:BB142, %144.1:BB144
  val?^ | miss    %38.1 = %38.0
  dr              %38.2 = Phi                      %142.2:BB142, %144.2:BB144
  dr              %38.3 = %38.2
  fs              %38.4 = FrameState         R     0x563fa79499e0+281: [], env=e0.1
  fs              %38.5 = FrameState         R     0x563fa799ff80+42: [], env=e115.0, next=%38.4
  fs              %38.6 = FrameState         R     0x563fa793fb90+403: [%139.1], env=e117.0, next=%38.5
  void                    Deopt              !v    %38.6, %38.3, %38.1   !
BB143   <- [47]
  prom-           %143.0 = MkArg                    unboundValue, FUN[0x563fa8078ee0]_p18, e117.0
  prom-           %143.1 = MkArg                    unboundValue, FUN[0x563fa8078ee0]_p19, e117.0
  ct              %143.2 = PushContext        lCL   %143.0, %143.1, grepl(valid_numeric_version_regexp, x), function(pattern, x, ignore.case=FALSE, perl=F|..., e117.0
  val?^           %143.3 = CastType                 up %143.1
  val?^           %143.4 = CastType                 up %143.0
  env             e143.5 = MkEnv              l     pattern=%143.4, x=%143.3, ignore.case(miss)=false, perl(miss)=false, fixed(miss)=false, useBytes(miss)=false, parent=R_BaseNamespace, context 1
  prom-           %143.6 = MkArg                    unboundValue, FUN[0x563fa8078ee0]_p34, e143.5
  ct              %143.7 = PushContext        lCL   %143.6, is.factor(x), function(x) <(rir::DispatchTable*)0x563fa794da|..., e143.5
  val?^           %143.8 = CastType                 up %143.6
  env             e143.9 = MkEnv              l     x=%143.8, parent=R_BaseNamespace, context 1
  prom-           %143.10 = MkArg                    unboundValue, FUN[0x563fa8078ee0]_p35, e143.9
  ct              %143.11 = PushContext        lCL   %143.10, "factor", inherits(x, "factor"), function(x, what, which=FALSE) <(rir::Dispatch|..., e143.9
  val?^           %143.12 = CastType                 up %143.10
  env             e143.13 = MkEnv              l     x=%143.12, what="factor", which(miss)=false, parent=R_BaseNamespace, context 1
  val?            %143.14 = Force!<lazy>       !vr   %143.12,    <val?>
  val?            %143.15 = CallBuiltin        !v    inherits(%143.14, "factor", false) e143.13
  val?            %143.16 = PopContext         C     %143.15, %143.11   <lgl$->
  lgl$#-          %143.17 = IsType                   %143.16 isA lgl$-
  void                    Branch                   %143.17 -> BB147 (if true) | BB148 (if false)
BB144   <- [47]
  void                    Nop                !     
  val?^ | miss    %144.1 = %47.0
  dr              %144.2 = CallTarget@0x563fa79391c0[Call#8]
  goto BB38
BB41   <- [40, 179]
  val?^ | miss    %41.0 = LdVar              eR    nms, e117.0
  lgl$#-          %41.1 = IsType                   %41.0 isA val?~- | miss
  void                    Branch                   %41.1 -> BB145 (if true) | BB146 (if false)
BB147   <- [143]
  lgl$-           %147.0 = CastType           d     dn %143.16
  val?            %147.1 = PopContext         C     %147.0, %143.7   <lgl$->
  lgl$#-          %147.2 = IsType                   %147.1 isA lgl$-
  void                    Branch                   %147.2 -> BB151 (if true) | BB152 (if false)
BB148   <- [143]
  fs              %148.0 = FrameState         R     0x563fa79499e0+281: [], env=e0.1
  fs              %148.1 = FrameState         R     0x563fa799ff80+42: [], env=e115.0, next=%148.0
  fs              %148.2 = FrameState         R     0x563fa793fb90+456: [], env=e117.0, next=%148.1
  fs              %148.3 = FrameState         R     0x563fa794c320+32: [], env=e143.5, next=%148.2
  fs              %148.4 = FrameState         R     0x563fa7949120+37: [%143.16], env=e143.9, next=%148.3
  void                    Deopt              !v    %148.4, Typecheck@0x563fa70b2a08[Type#1], %143.16   !
BB145   <- [41]
  val?~- | miss   %145.0 = CastType           d     dn %41.0
  val?-           %145.1 = Force!<value>            %145.0,    <nil->
  (cls|spec|blt)  %145.2 = LdFun              !v    names<-, <0x563fa5acb438>, e117.0
  val?^ | miss    %145.3 = LdVar              eR    y, e117.0
  lgl$#-          %145.4 = IsType                   %145.3 isA val?~- | miss
  void                    Branch                   %145.4 -> BB149 (if true) | BB150 (if false)
BB146   <- [41]
  fs              %146.0 = FrameState         R     0x563fa79499e0+281: [], env=e0.1
  fs              %146.1 = FrameState         R     0x563fa799ff80+42: [], env=e115.0, next=%146.0
  fs              %146.2 = FrameState         R     0x563fa793fb90+736: [], env=e117.0, next=%146.1
  void                    Deopt              !v    %146.2, Typecheck@0x563fa79391c0[Type#40], %41.0   !
BB151   <- [147]
  lgl$-           %151.0 = CastType           d     dn %147.1
  lgl$-           %151.1 = AsLogical                %151.0
  lgl$#-          %151.2 = Identical                %151.1, false
  void                    Branch                   %151.2 -> BB55 (if true) | BB52 (if false)
BB152   <- [147]
  void                    Nop                !     
  val?            %152.1 = %147.1
  dr              %152.2 = Typecheck@0x563fa722fdc0[Type#1]
  goto BB50
BB149   <- [145]
  val?~- | miss   %149.0 = CastType           d     dn %145.3
  val?-           %149.1 = Force!<value>            %149.0,    <vec$->
  val?            %149.2 = NamedCall          !v    %145.2(%149.1, value=%145.1) e117.0
  void                    StVar              lW    y, %149.2, e117.0
  (cls|spec|blt)  %149.4 = LdFun              !v    <-, <0x563fa5abfda8>, e117.0
  prom-           %149.5 = MkArg                    unboundValue, FUN[0x563fa8078ee0]_p20, e117.0
  prom-           %149.6 = MkArg                    unboundValue, FUN[0x563fa8078ee0]_p22, e117.0
  val?            %149.7 = Call               !v    %149.4(%149.5, %149.6) e117.0
  val?^ | miss    %149.8 = LdVar              eR    y, e117.0
  void                    Visible            v     
  val?            %149.10 = Force!<value>      !     %149.8, e117.0   <vec$>
  val?            %149.11 = PopContext         C     %149.10, %115.4   <vec$>
  val?            %149.12 = PopContext         C     %149.11, %113.1   <vec$>
  val?            %149.13 = %149.12
  goto BB46
BB150   <- [145]
  fs              %150.0 = FrameState         R     0x563fa79499e0+281: [], env=e0.1
  fs              %150.1 = FrameState         R     0x563fa799ff80+42: [], env=e115.0, next=%150.0
  fs              %150.2 = FrameState         R     0x563fa793fb90+750: [%145.1], env=e117.0, next=%150.1
  void                    Deopt              !v    %150.2, Typecheck@0x563fa79391c0[Type#41], %145.3   !
BB55   <- [151]
  lgl$#-          %55.0 = CheckTrueFalse     e     %151.1
  void                    Branch                   %55.0 -> BB98 (if true) | BB56 (if false)
BB52   <- [151]
  val?^ | miss    %52.0 = LdVar              eR    length, e143.5
  lgl$#-          %52.1 = Identical                <blt length>, %52.0   <@?>
  void                    Branch                   %52.1 -> BB54 (if true) | BB53 (if false)
BB50   <- [152, 154]
  val?^ | miss    %50.0 = Phi                      %152.1:BB152, %154.1:BB154
  val?^ | miss    %50.1 = %50.0
  dr              %50.2 = Phi                      %152.2:BB152, %154.2:BB154
  dr              %50.3 = %50.2
  fs              %50.4 = FrameState         R     0x563fa79499e0+281: [], env=e0.1
  fs              %50.5 = FrameState         R     0x563fa799ff80+42: [], env=e115.0, next=%50.4
  fs              %50.6 = FrameState         R     0x563fa793fb90+456: [], env=e117.0, next=%50.5
  fs              %50.7 = FrameState         R     0x563fa794c320+32: [%147.1], env=e143.5, next=%50.6
  void                    Deopt              !v    %50.7, %50.3, %50.1   !
BB98   <- [55]
  fs              %98.0 = FrameState         R     0x563fa79499e0+281: [], env=e0.1
  fs              %98.1 = FrameState         R     0x563fa799ff80+42: [], env=e115.0, next=%98.0
  fs              %98.2 = FrameState         R     0x563fa793fb90+456: [], env=e117.0, next=%98.1
  (cls|spec|blt)  %98.3 = LdFun              !v    grepl, e143.5
  fs              %98.4 = FrameState         R     0x563fa794c320+687: [%98.3], env=e143.5, next=%98.2
  void                    Deopt              !v    %98.4, DeadCall@0x563fa722fdc0[Call#8], %98.3   !
BB56   <- [55]
  val?^ | miss    %56.0 = LdVar              eR    is.character, e143.5
  lgl$#-          %56.1 = Identical                <blt is.character>, %56.0   <true>
  void                    Branch                   %56.1 -> BB153 (if true) | BB154 (if false)
BB54   <- [52]
  fs              %54.0 = FrameState         R     0x563fa79499e0+281: [], env=e0.1
  fs              %54.1 = FrameState         R     0x563fa799ff80+42: [], env=e115.0, next=%54.0
  fs              %54.2 = FrameState         R     0x563fa793fb90+456: [], env=e117.0, next=%54.1
  (cls|spec|blt)  %54.3 = LdFun              !v    levels, e143.5
  fs              %54.4 = FrameState         R     0x563fa794c320+109: [%151.1, <blt length>, %54.3], env=e143.5, next=%54.2
  void                    Deopt              !v    %54.4, DeadCall@0x563fa722fdc0[Call#3], %54.3   !
BB53   <- [52]
  fs              %53.0 = FrameState         R     0x563fa79499e0+281: [], env=e0.1
  fs              %53.1 = FrameState         R     0x563fa799ff80+42: [], env=e115.0, next=%53.0
  fs              %53.2 = FrameState         R     0x563fa793fb90+456: [], env=e117.0, next=%53.1
  (cls|spec|blt)  %53.3 = LdFun              !v    length, e143.5
  fs              %53.4 = FrameState         R     0x563fa794c320+72: [%151.1, %53.3], env=e143.5, next=%53.2
  void                    Deopt              !v    %53.4, DeadCall@0x563fa722fdc0[Call#1], %53.3   !
BB153   <- [56]
  val?^ | miss    %153.0 = LdVar              eR    x, e143.5
  val?            %153.1 = Force!<wrapped>    !v    %153.0, e143.5   <str$->
  lgl$#-          %153.2 = CallSafeBuiltin    wed   is.character(%153.1)    <lgl$->
  void                    Branch                   %153.2 -> BB97 (if true) | BB57 (if false)
BB154   <- [56]
  void                    Nop                !     
  lgl$#-          %154.1 = %56.1
  dr              %154.2 = DeadBranchReached@0x563fa722fdc0[Test#2]
  goto BB50
BB97   <- [153]
  void                    Nop                !     
  goto BB62
BB57   <- [153]
  val?^ | miss    %57.0 = LdVar              eR    as.character, e143.5
  lgl$#-          %57.1 = Identical                <blt as.character>, %57.0   <@?>
  void                    Branch                   %57.1 -> BB59 (if true) | BB58 (if false)
BB62   <- [97, 157]
  val?^ | miss    %62.0 = LdVar              eR    as.character, e143.5
  lgl$#-          %62.1 = Identical                <blt as.character>, %62.0   <true>
  void                    Branch                   %62.1 -> BB155 (if true) | BB156 (if false)
BB59   <- [57]
  val?^ | miss    %59.0 = LdVar              eR    x, e143.5
  val?            %59.1 = Force!             !v    %59.0, e143.5   <val?_>
  lgl$#-          %59.2 = IsType                   %59.1 isA val?+
  void                    Branch                   %59.2 -> BB157 (if true) | BB158 (if false)
BB58   <- [57]
  fs              %58.0 = FrameState         R     0x563fa79499e0+281: [], env=e0.1
  fs              %58.1 = FrameState         R     0x563fa799ff80+42: [], env=e115.0, next=%58.0
  fs              %58.2 = FrameState         R     0x563fa793fb90+456: [], env=e117.0, next=%58.1
  (cls|spec|blt)  %58.3 = LdFun              !v    as.character, e143.5
  fs              %58.4 = FrameState         R     0x563fa794c320+409: [%58.3], env=e143.5, next=%58.2
  void                    Deopt              !v    %58.4, DeadCall@0x563fa722fdc0[Call#6], %58.3   !
BB155   <- [62]
  val?^ | miss    %155.0 = LdVar              eR    pattern, e143.5
  val?            %155.1 = Force!<lazy>       !v    %155.0, e143.5   <str$->
  lgl$#-          %155.2 = IsType                   %155.1 isA val?-
  void                    Branch                   %155.2 -> BB159 (if true) | BB160 (if false)
BB156   <- [62]
  fs              %156.0 = FrameState         R     0x563fa79499e0+281: [], env=e0.1
  fs              %156.1 = FrameState         R     0x563fa799ff80+42: [], env=e115.0, next=%156.0
  fs              %156.2 = FrameState         R     0x563fa793fb90+456: [], env=e117.0, next=%156.1
  fs              %156.3 = FrameState         R     0x563fa794c320+486: [], env=e143.5, next=%156.2
  void                    Deopt              !v    %156.3, DeadBranchReached@0x563fa722fdc0[Test#4], %62.1   !
BB157   <- [59]
  val?+           %157.0 = CastType           d     dn %59.1   <val?_>
  val+            %157.1 = CallSafeBuiltin    wed   as.character(%157.0)    <val?_>
  void                    StVar              lW    x, %157.1, e143.5
  goto BB62
BB158   <- [59]
  fs              %158.0 = FrameState         R     0x563fa79499e0+281: [], env=e0.1
  fs              %158.1 = FrameState         R     0x563fa799ff80+42: [], env=e115.0, next=%158.0
  fs              %158.2 = FrameState         R     0x563fa793fb90+456: [], env=e117.0, next=%158.1
  fs              %158.3 = FrameState         R     0x563fa794c320+450: [<blt as.character>, %59.1], env=e143.5, next=%158.2
  void                    Deopt              !v    %158.3, Typecheck@0x563fa722fdc0[Type#15], %59.1   !
BB159   <- [155]
  val?-           %159.0 = CastType           d     dn %155.1   <str$->
  val+            %159.1 = CallSafeBuiltin    wed   as.character(%159.0)    <str$->
  val?^ | miss    %159.2 = LdVar              eR    x, e143.5
  val?            %159.3 = Force!<wrapped>    !v    %159.2, e143.5   <str$->
  val?^ | miss    %159.4 = LdVar              eR    ignore.case, e143.5
  val?            %159.5 = Force!<lazy>       !v    %159.4, e143.5   <lgl$->
  val?^ | miss    %159.6 = LdVar              eR    perl, e143.5
  val?            %159.7 = Force!<lazy>       !v    %159.6, e143.5   <lgl$->
  val?^ | miss    %159.8 = LdVar              eR    fixed, e143.5
  val?            %159.9 = Force!<lazy>       !v    %159.8, e143.5   <lgl$->
  val?^ | miss    %159.10 = LdVar              eR    useBytes, e143.5
  val?            %159.11 = Force!<lazy>       !v    %159.10, e143.5   <lgl$->
  val?            %159.12 = CallBuiltin        !v    grepl(%159.1, %159.3, %159.5, false, %159.7, %159.9, %159.11, false) e143.5
  val?            %159.13 = PopContext         C     %159.12, %143.2   <lgl$->
  lgl$#-          %159.14 = IsType                   %159.13 isA lgl$-
  void                    Branch                   %159.14 -> BB161 (if true) | BB162 (if false)
BB160   <- [155]
  fs              %160.0 = FrameState         R     0x563fa79499e0+281: [], env=e0.1
  fs              %160.1 = FrameState         R     0x563fa799ff80+42: [], env=e115.0, next=%160.0
  fs              %160.2 = FrameState         R     0x563fa793fb90+456: [], env=e117.0, next=%160.1
  fs              %160.3 = FrameState         R     0x563fa794c320+555: [<blt as.character>, %155.1], env=e143.5, next=%160.2
  void                    Deopt              !v    %160.3, Typecheck@0x563fa722fdc0[Type#18], %155.1   !
BB161   <- [159]
  lgl$-           %161.0 = CastType           d     dn %159.13
  void                    StVar              lW    ok, %161.0, e117.0
  val?^ | miss    %161.2 = LdVar              eR    all, e117.0
  lgl$#-          %161.3 = Identical                <blt all>, %161.2   <true>
  void                    Branch                   %161.3 -> BB163 (if true) | BB164 (if false)
BB162   <- [159]
  fs              %162.0 = FrameState         R     0x563fa79499e0+281: [], env=e0.1
  fs              %162.1 = FrameState         R     0x563fa799ff80+42: [], env=e115.0, next=%162.0
  fs              %162.2 = FrameState         R     0x563fa793fb90+456: [%159.13], env=e117.0, next=%162.1
  void                    Deopt              !v    %162.2, Typecheck@0x563fa79391c0[Type#18], %159.13   !
BB163   <- [161]
  val?            %163.0 = CallBuiltin        !v    all(%161.0) e117.0   <lgl$->
  lgl$#-          %163.1 = IsType                   %163.0 isA lgl$-
  void                    Branch                   %163.1 -> BB165 (if true) | BB166 (if false)
BB164   <- [161]
  fs              %164.0 = FrameState         R     0x563fa79499e0+281: [], env=e0.1
  fs              %164.1 = FrameState         R     0x563fa799ff80+42: [], env=e115.0, next=%164.0
  fs              %164.2 = FrameState         R     0x563fa793fb90+470: [], env=e117.0, next=%164.1
  void                    Deopt              !v    %164.2, DeadBranchReached@0x563fa79391c0[Test#3], %161.3   !
BB165   <- [163]
  lgl$-           %165.0 = CastType           d     dn %163.0
  lgl$-           %165.1 = Not                d     %165.0, elided
  lgl$-           %165.2 = AsLogical                %165.1
  lgl$#-          %165.3 = Identical                %165.2, false
  void                    Branch                   %165.3 -> BB96 (if true) | BB73 (if false)
BB166   <- [163]
  fs              %166.0 = FrameState         R     0x563fa79499e0+281: [], env=e0.1
  fs              %166.1 = FrameState         R     0x563fa799ff80+42: [], env=e115.0, next=%166.0
  fs              %166.2 = FrameState         R     0x563fa793fb90+561: [%163.0], env=e117.0, next=%166.1
  void                    Deopt              !v    %166.2, Typecheck@0x563fa79391c0[Type#21], %163.0   !
BB96   <- [165]
  void                    Nop                !     
  lgl$-           %96.1 = %165.2
  goto BB74
BB73   <- [165]
  val?^ | miss    %73.0 = LdVar              eR    strict, e117.0
  val?            %73.1 = Force!             !v    %73.0, e117.0   <val?_>
  lgl$-           %73.2 = AsLogical          e     %73.1
  lgl$-           %73.3 = LAnd                     %165.2, %73.2
  lgl$-           %73.4 = %73.3
  goto BB74
BB74   <- [96, 73]
  lgl$-           %74.0 = Phi                      %73.4:BB73, %96.1:BB96
  lgl$-           %74.1 = %74.0
  lgl$#-          %74.2 = CheckTrueFalse     e     %74.1
  void                    Branch                   %74.2 -> BB95 (if true) | BB77 (if false)
BB95   <- [74]
  fs              %95.0 = FrameState         R     0x563fa79499e0+281: [], env=e0.1
  fs              %95.1 = FrameState         R     0x563fa799ff80+42: [], env=e115.0, next=%95.0
  (cls|spec|blt)  %95.2 = LdFun              !v    stop, e117.0
  fs              %95.3 = FrameState         R     0x563fa793fb90+606: [%95.2], env=e117.0, next=%95.1
  void                    Deopt              !v    %95.3, DeadCall@0x563fa79391c0[Call#10], %95.2   !
BB77   <- [74]
  val?^ | miss    %77.0 = LdVar              eR    lapply, e117.0
  lgl$#-          %77.1 = Identical                %77.0, function(X, FUN, ...) <(rir::DispatchTable*)0x|...
  void                    Branch                   %77.1 -> BB167 (if true) | BB168 (if false)
BB167   <- [77]
  prom-           %167.0 = MkArg                    unboundValue, FUN[0x563fa8078ee0]_p25, e117.0
  prom-           %167.1 = MkArg                    unboundValue, FUN[0x563fa8078ee0]_p28, e117.0
  ct              %167.2 = PushContext        lCL   %167.0, %167.1, lapply(strsplit([(x, ok), "[.-]"), as.integer), function(X, FUN, ...) <(rir::DispatchTable*)0x|..., e117.0
  val?^           %167.3 = CastType                 up %167.1
  val?^           %167.4 = CastType                 up %167.0
  env             e167.5 = MkEnv              l     X=%167.4, FUN=%167.3, ...(miss)=missingArg, parent=R_BaseNamespace, context 1
  prom-           %167.6 = MkArg                    unboundValue, FUN[0x563fa8078ee0]_p29, e167.5
  val?            %167.7 = StaticCall         !v    match.fun[0x563fa834ad10](%167.6) e167.5   <(cls|blt)->
  void                    StVar              lW    FUN, %167.7, e167.5
  val?^ | miss    %167.9 = LdVar              eR    is.vector, e167.5
  lgl$#-          %167.10 = Identical                %167.9, function(x, mode="any") <(rir::DispatchTable*)|...
  void                    Branch                   %167.10 -> BB169 (if true) | BB170 (if false)
BB168   <- [77]
  fs              %168.0 = FrameState         R     0x563fa79499e0+281: [], env=e0.1
  fs              %168.1 = FrameState         R     0x563fa799ff80+42: [], env=e115.0, next=%168.0
  fs              %168.2 = FrameState         R     0x563fa793fb90+590: [%74.1], env=e117.0, next=%168.1
  void                    Deopt              !v    %168.2, CallTarget@0x563fa79391c0[Call#15], %77.0   !
BB169   <- [167]
  val?^ | miss    %169.0 = LdVar              eR    X, e167.5
  val?            %169.1 = Force!<lazy>       !v    %169.0, e167.5   <vec>
  lgl$#-          %169.2 = CallSafeBuiltin    wed   is.vector(%169.1, "any")    <lgl$->
  lgl$#-          %169.3 = Not                d     %169.2, elided
  void                    Branch                   %169.2 -> BB94 (if true) | BB82 (if false)
BB170   <- [167]
  fs              %170.0 = FrameState         R     0x563fa79499e0+281: [], env=e0.1
  fs              %170.1 = FrameState         R     0x563fa799ff80+42: [], env=e115.0, next=%170.0
  fs              %170.2 = FrameState         R     0x563fa793fb90+693: [], env=e117.0, next=%170.1
  fs              %170.3 = FrameState         R     0x563fa6528c40+46: [], env=e167.5, next=%170.2
  void                    Deopt              !v    %170.3, CallTarget@0x563fa73aba10[Call#1], %167.9   !
BB94   <- [169]
  val?^ | miss    %94.0 = LdVar              eR    is.object, e167.5
  lgl$#-          %94.1 = Identical                <blt is.object>, %94.0   <true>
  void                    Branch                   %94.1 -> BB171 (if true) | BB172 (if false)
BB82   <- [169]
  void                    Nop                !     
  lgl$#-          %82.1 = %169.3
  goto BB83
BB171   <- [94]
  val?^ | miss    %171.0 = LdVar              eR    X, e167.5
  val?            %171.1 = Force!<wrapped>    !v    %171.0, e167.5   <vec->
  lgl$#-          %171.2 = CallSafeBuiltin    wed   is.object(%171.1)    <lgl$->
  lgl$-           %171.3 = LOr                      %169.3, %171.2
  lgl$-           %171.4 = %171.3
  goto BB83
BB172   <- [94]
  fs              %172.0 = FrameState         R     0x563fa79499e0+281: [], env=e0.1
  fs              %172.1 = FrameState         R     0x563fa799ff80+42: [], env=e115.0, next=%172.0
  fs              %172.2 = FrameState         R     0x563fa793fb90+693: [], env=e117.0, next=%172.1
  fs              %172.3 = FrameState         R     0x563fa6528c40+78: [], env=e167.5, next=%172.2
  prom-           %172.4 = MkArg                    %169.1, FUN[0x563fa8078ee0]_p31 (!refl), e167.5
  val?~           %172.5 = CastType                 up %172.4
  env             e172.6 = (MkEnv)            l     mode(miss)="any", x=%172.5, parent=R_BaseNamespace, context 0
  fs              %172.7 = FrameState         R     0x563fa794ef80+41: [%169.2], env=e172.6, next=%172.3
  void                    Deopt              !v    %172.7, DeadBranchReached@0x563fa73aba10[Test#0], %94.1   !
BB83   <- [82, 171]
  lgl$-           %83.0 = Phi                      %171.4:BB171, %82.1:BB82
  lgl$-           %83.1 = %83.0
  lgl$#-          %83.2 = CheckTrueFalse     e     %83.1
  void                    Branch                   %83.2 -> BB93 (if true) | BB86 (if false)
BB93   <- [83]
  val?^ | miss    %93.0 = LdVar              eR    as.list, e167.5
  lgl$#-          %93.1 = Identical                %93.0, function(x, ...) <(rir::DispatchTable*)0x563fa|...
  void                    Branch                   %93.1 -> BB173 (if true) | BB174 (if false)
BB86   <- [83]
  void                    Nop                !     
  goto BB87
BB173   <- [93]
  val?^ | miss    %173.0 = LdVar              eR    X, e167.5
  val?            %173.1 = Force!<wrapped>    !v    %173.0, e167.5   <vec>
  val?            %173.2 = StaticCall         !v    as.list[0x563fa8560ca0](%173.1) { 0 } e167.5   <vec>
  void                    StVar              lW    X, %173.2, e167.5
  goto BB87
BB174   <- [93]
  fs              %174.0 = FrameState         R     0x563fa79499e0+281: [], env=e0.1
  fs              %174.1 = FrameState         R     0x563fa799ff80+42: [], env=e115.0, next=%174.0
  fs              %174.2 = FrameState         R     0x563fa793fb90+693: [], env=e117.0, next=%174.1
  fs              %174.3 = FrameState         R     0x563fa6528c40+189: [%83.1], env=e167.5, next=%174.2
  void                    Deopt              !v    %174.3, CallTarget@0x563fa73aba10[Call#3], %93.0   !
BB87   <- [86, 173]
  val?^ | miss    %87.0 = LdVar              eR    X, e167.5
  val?            %87.1 = Force!<wrapped>    !v    %87.0, e167.5   <vec>
  (nil|str)-      %87.2 = Names                    %87.1
  int$-           %87.3 = Length                   %87.1
  vec-            %87.4 = CallSafeBuiltin    wed   vector("list", %87.3) 
  val+            %87.5 = SetNames           e     %87.4, %87.2
  int$#-          %87.6 = 0L
  val+            %87.7 = %87.5
  goto BB88
BB88   <- [89, 87]
  int$-           %88.0 = Phi                      %87.6:BB87, %89.7:BB89
  int$-           %88.1 = %88.0
  val?            %88.2 = Phi                      %87.7:BB87, %89.8:BB89
  val?            %88.3 = %88.2
  int$-           %88.4 = Inc                      %88.1
  lgl$-           %88.5 = Lt                 d     %87.3, %88.4, elided
  lgl$#-          %88.6 = Identical                %88.5, true
  void                    Branch                   %88.6 -> BB90 (if true) | BB89 (if false)
BB90   <- [88]
  val?            %90.0 = PopContext         C     %88.3, %167.2   <vec$->
  lgl$#-          %90.1 = IsType                   %90.0 isA val?-
  val?^ | miss    %90.2 = LdVar              eR    y !upd, e117.0
  lgl$#-          %90.3 = IsType                   %90.2 isA val?~- | miss
  void                    Branch                   %90.3 -> BB175 (if true) | BB176 (if false)
BB89   <- [88]
  void                    StVar              lW    i, %88.4, e167.5
  (cls|spec|blt)  %89.1 = LdFun              !v    FUN, e167.5
  prom-           %89.2 = MkArg                    unboundValue, FUN[0x563fa8078ee0]_p32, e167.5
  (miss|dots)     %89.3 = LdDots             R     , e167.5
  *dots-          %89.4 = ExpandDots               %89.3
  val?            %89.5 = NamedCall          !v    %89.1(%89.2, .xpandDotsTrigger=%89.4) e167.5   <val?>
  val?            %89.6 = SetVecElt          e     %89.5, %88.3, %88.4
  int$-           %89.7 = %88.4
  val?            %89.8 = %89.6
  goto BB88
BB175   <- [90]
  val?~- | miss   %175.0 = CastType           d     dn %90.2
  val?-           %175.1 = Force!<value>            %175.0,    <vec$->
  val?^ | miss    %175.2 = LdVar              eR    ok, e117.0
  lgl$#-          %175.3 = IsType                   %175.2 isA lgl$-
  void                    Branch                   %175.3 -> BB177 (if true) | BB178 (if false)
BB176   <- [90]
  void                    Nop                !     
  val?^ | miss    %176.1 = %90.2
  dr              %176.2 = Typecheck@0x563fa79391c0[Type#38]
  goto BB91
BB177   <- [175]
  lgl$-           %177.0 = CastType           d     dn %175.2
  void                    Branch                   %90.1 -> BB179 (if true) | BB180 (if false)
BB178   <- [175]
  void                    Nop                !     
  val?^ | miss    %178.1 = %175.2
  dr              %178.2 = Typecheck@0x563fa79391c0[Type#39]
  goto BB91
BB91   <- [176, 178, 180]
  val?^ | miss    %91.0 = Phi                      %176.1:BB176, %178.1:BB178, %180.1:BB180
  val?^ | miss    %91.1 = %91.0
  dr              %91.2 = Phi                      %176.2:BB176, %178.2:BB178, %180.2:BB180
  dr              %91.3 = %91.2
  fs              %91.4 = FrameState         R     0x563fa79499e0+281: [], env=e0.1
  fs              %91.5 = FrameState         R     0x563fa799ff80+42: [], env=e115.0, next=%91.4
  fs              %91.6 = FrameState         R     0x563fa793fb90+693: [%90.0], env=e117.0, next=%91.5
  void                    Deopt              !v    %91.6, %91.3, %91.1   !
BB179   <- [177]
  val?-           %179.0 = CastType           d     dn %90.0   <vec$->
  val?-           %179.1 = Subassign1_1D      wed   %179.0, %175.1, %177.0, elided
  void                    StVar              lW    y, %179.1, e117.0
  goto BB41
BB180   <- [177]
  void                    Nop                !     
  val?            %180.1 = %90.0
  dr              %180.2 = Typecheck@0x563fa79391c0[Type#37]
  goto BB91
Prom 0:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    x, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <(str|vec)$>
  void                    Return             l     %0.3
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    x, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    x, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 3:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    x, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <(str|vec)>
  void                    Return             l     %0.3
Prom 4:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    x, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 6:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    x, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 7:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    strict, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 8:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     $, <0x563fa5acac10>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, FUN[0x563fa8078ee0]_p9, e0.0
  prom-           %0.3  = MkArg                    unboundValue, FUN[0x563fa8078ee0]_p10, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <str$->
  void                    Return             l     %0.4
Prom 9:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     .standard_regexps, <0x563fa5f3eef8>, e0.0
  val?            %0.2  = Call               !     %0.1() e0.0   <vec+>
  void                    Return             l     %0.2
Prom 10:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    valid_numeric_version, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 13:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     list, <0x563fa5adf5c0>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, FUN[0x563fa8078ee0]_p14, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <vec$->
  void                    Return             l     %0.3
Prom 14:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     integer, <0x563fa5f3f710>, e0.0
  val?            %0.2  = Call               !     %0.1() e0.0   <int->
  void                    Return             l     %0.2
Prom 15:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     length, <0x563fa5acba90>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, FUN[0x563fa8078ee0]_p16, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <int$->
  void                    Return             l     %0.3
Prom 16:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    x, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 17:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    regexp, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 18:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    valid_numeric_version_regexp, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 19:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    x, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 20:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     class, e0.0
  prom-           %0.2  = MkArg                    unboundValue, FUN[0x563fa8078ee0]_p21, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 21:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    y, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 22:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     unique, e0.0
  prom-           %0.2  = MkArg                    unboundValue, FUN[0x563fa8078ee0]_p23, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 23:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     c, e0.0
  prom-           %0.2  = MkArg                    unboundValue, FUN[0x563fa8078ee0]_p24, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2, "numeric_version") e0.0   <val?_>
  void                    Return             l     %0.3
Prom 24:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    classes, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 25:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     strsplit, <0x563fa5e15588>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, FUN[0x563fa8078ee0]_p26, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2, "[.-]") e0.0   <vec$->
  void                    Return             l     %0.3
Prom 26:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    x, e0.0
  val?            %0.2  = Force<value>       !v    %0.1, e0.0   <str$->
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <true>
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    ok, e0.0
  val?            %2.1  = Force<value>       !v    %2.0, e0.0   <lgl$->
  val?            %2.2  = %2.1
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, FUN[0x563fa8078ee0]_p27, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.2:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract1_1D        !v    %0.2, %3.1, e0.0   <str$->
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 27:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    ok, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 28:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    as.integer, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <blt->
  void                    Return             l     %0.3
Prom 29:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    FUN, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <(cls|blt)->
  void                    Return             l     %0.3
Prom 31:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    X, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <vec>
  void                    Return             l     %0.3
Prom 32:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    X, e0.0
  val?            %0.2  = Force<wrapped>     !v    %0.1, e0.0   <vec>
  lgl$#-          %0.3  = IsType                   %0.2 isA val+
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    i, e0.0
  val?            %2.1  = Force<value>       !v    %2.0, e0.0   <int$->
  val?            %2.2  = %2.1
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, FUN[0x563fa8078ee0]_p33, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.2:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract2_1D        !v    %0.2, %3.1, e0.0   <val?>
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 33:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    i, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <int$->
  void                    Return             l     %0.3
Prom 34:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    x, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 35:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    x, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <(int|str)->
  void                    Return             l     %0.3

│ FUN[0x563fa8078ee0]                                                          │
└──────────────────────────────────────────────────────────────────────────────┘
