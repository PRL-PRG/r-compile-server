
┌──────────────────────────────────────────────────────────────────────────────┐
│ numeric_version[0x563fa8967960]                                              │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;NonRefl0,!Obj0 miss: 1               │
│ Properties:                                                                  │
├────── Final PIR Version
numeric_version[0x563fa8967960]
BB0
  val?^           %0.0  = LdArg                    0
  void                    Visible            v     
  val?^ | miss    %0.2  = LdVar              eR    .make_numeric_version, R_BaseNamespace
  lgl$#-          %0.3  = Identical                %0.2, function(x, strict=TRUE, regexp, classes=NULL)|...
  void                    Branch                   %0.3 -> BB4 (if true) | BB5 (if false)
BB4   <- [0]
  env             e4.0  = MkEnv              l     x=%0.0, strict(miss)=true, parent=R_BaseNamespace, context 1
  prom-           %4.1  = MkArg                    unboundValue, numeric_version[0x563fa8967960]_p1 (!refl), e4.0
  prom-           %4.2  = MkArg                    unboundValue, numeric_version[0x563fa8967960]_p2 (!refl), e4.0
  prom-           %4.3  = MkArg                    unboundValue, numeric_version[0x563fa8967960]_p3, e4.0
  val?            %4.4  = StaticCall         !     .make_numeric_version[0x563fa8967c00](%4.1, %4.2, %4.3) e4.0   <vec$>
  void                    Return             l     %4.4
BB5   <- [0]
  env             e5.0  = (MkEnv)            l     x=%0.0, strict(miss)=true, parent=R_BaseNamespace, context 1
  fs              %5.1  = FrameState         R     0x563fa799ff80+0: [], env=e5.0
  void                    Deopt              !v    %5.1, CallTarget@0x563fa704cc48[Call#0], %0.2
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    x, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    strict, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 3:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     $, <0x563fa5acac10>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, numeric_version[0x563fa8967960]_p4, e0.0
  prom-           %0.3  = MkArg                    unboundValue, numeric_version[0x563fa8967960]_p5, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <str$->
  void                    Return             l     %0.4
Prom 4:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     .standard_regexps, <0x563fa5f3eef8>, e0.0
  val?            %0.2  = Call               !     %0.1() e0.0   <vec+>
  void                    Return             l     %0.2
Prom 5:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    valid_numeric_version, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3

│ numeric_version[0x563fa8967960]                                              │
└──────────────────────────────────────────────────────────────────────────────┘
