
┌──────────────────────────────────────────────────────────────────────────────┐
│ .encode_numeric_version[0x563fa8b33110]                                      │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch                                      │
│ Properties:                                                                  │
├────── Final PIR Version
.encode_numeric_version[0x563fa8b33110]
BB0
  val?^           %0.0  = LdArg                    0
  env             e0.1  = MkEnv              l     x=%0.0, parent=R_BaseNamespace, context 1
  cls             %0.2  = MkCls                    .encode_numeric_version>strlpad@0, e0.1
  cls             %0.3  = MkCls                    strrpad, e0.1
  void                    StVar              lW    strlpad, %0.2, e0.1
  void                    StVar              lW    strrpad, %0.3, e0.1
  prom-           %0.6  = MkArg                    unboundValue, .encode_numeric_version[0x563fa8b33110]_p0, e0.1
  ct              %0.7  = PushContext        lCL   %0.6, is.numeric_version(x), function(x) <(rir::DispatchTable*)0x563fa79731|..., e0.1
  val?^           %0.8  = CastType                 up %0.6
  env             e0.9  = MkEnv              l     x=%0.8, parent=R_BaseNamespace, context 1
  prom-           %0.10 = MkArg                    unboundValue, .encode_numeric_version[0x563fa8b33110]_p20, e0.9
  ct              %0.11 = PushContext        lCL   %0.10, "numeric_version", inherits(x, "numeric_version"), function(x, what, which=FALSE) <(rir::Dispatch|..., e0.9
  val?^           %0.12 = CastType                 up %0.10
  env             e0.13 = MkEnv              l     x=%0.12, what="numeric_version", which(miss)=false, parent=R_BaseNamespace, context 1
  val?            %0.14 = Force!<lazy>       !vr   %0.12,    <val?>
  val?            %0.15 = CallBuiltin        !v    inherits(%0.14, "numeric_version", false) e0.13
  val?            %0.16 = PopContext         C     %0.15, %0.11   <lgl$->
  lgl$#-          %0.17 = IsType                   %0.16 isA lgl$-
  void                    Branch                   %0.17 -> BB107 (if true) | BB108 (if false)
BB107   <- [0]
  lgl$-           %107.0 = CastType           d     dn %0.16
  val?            %107.1 = PopContext         C     %107.0, %0.7   <lgl$->
  lgl$#-          %107.2 = IsType                   %107.1 isA lgl$-
  void                    Branch                   %107.2 -> BB109 (if true) | BB110 (if false)
BB108   <- [0]
  fs              %108.0 = FrameState         R     0x563fa7972360+82: [], env=e0.1
  fs              %108.1 = FrameState         R     0x563fa796e0f0+37: [%0.16], env=e0.9, next=%108.0
  void                    Deopt              !v    %108.1, Typecheck@0x563fa707fb28[Type#1], %0.16   !
BB109   <- [107]
  lgl$-           %109.0 = CastType           d     dn %107.1
  lgl$-           %109.1 = Not                d     %109.0, elided
  lgl$#-          %109.2 = CheckTrueFalse     e     %109.1
  void                    Branch                   %109.2 -> BB105 (if true) | BB5 (if false)
BB110   <- [107]
  void                    Nop                !     
  val?            %110.1 = %107.1
  dr              %110.2 = Typecheck@0x563fa7080578[Type#1]
  goto BB3
BB105   <- [109]
  (cls|spec|blt)  %105.0 = LdFun              !v    stop, e0.1
  fs              %105.1 = FrameState         R     0x563fa7972360+104: [%105.0], env=e0.1
  void                    Deopt              !v    %105.1, DeadCall@0x563fa7080578[Call#1], %105.0   !
BB5   <- [109]
  val?^ | miss    %5.0  = LdVar              eR    class, e0.1
  lgl$#-          %5.1  = Identical                <blt class>, %5.0   <true>
  void                    Branch                   %5.1 -> BB111 (if true) | BB112 (if false)
BB3   <- [110, 112]
  val?^ | miss    %3.0  = Phi                      %110.1:BB110, %112.1:BB112
  val?^ | miss    %3.1  = %3.0
  dr              %3.2  = Phi                      %110.2:BB110, %112.2:BB112
  dr              %3.3  = %3.2
  fs              %3.4  = FrameState         R     0x563fa7972360+82: [%107.1], env=e0.1
  void                    Deopt              !v    %3.4, %3.3, %3.1   !
BB111   <- [5]
  val?^ | miss    %111.0 = LdVar              eR    x, e0.1
  val?            %111.1 = Force!<wrapped>    !v    %111.0, e0.1   <vec>
  val?            %111.2 = CallBuiltin        !v    class(%111.1) e0.1   <str->
  void                    StVar              lW    classes, %111.2, e0.1
  val?^ | miss    %111.4 = LdVar              eR    names, e0.1
  lgl$#-          %111.5 = Identical                <blt names>, %111.4   <true>
  void                    Branch                   %111.5 -> BB113 (if true) | BB114 (if false)
BB112   <- [5]
  void                    Nop                !     
  lgl$#-          %112.1 = %5.1
  dr              %112.2 = DeadBranchReached@0x563fa7080578[Test#0]
  goto BB3
BB113   <- [111]
  val?^ | miss    %113.0 = LdVar              eR    x, e0.1
  val?            %113.1 = Force!<wrapped>    !v    %113.0, e0.1   <vec>
  val?            %113.2 = CallBuiltin        !v    names(%113.1) e0.1   <nil->
  void                    StVar              lW    nms, %113.2, e0.1
  val?^ | miss    %113.4 = LdVar              eR    unclass, e0.1
  lgl$#-          %113.5 = Identical                <blt unclass>, %113.4   <true>
  void                    Branch                   %113.5 -> BB115 (if true) | BB116 (if false)
BB114   <- [111]
  fs              %114.0 = FrameState         R     0x563fa7972360+237: [], env=e0.1
  void                    Deopt              !v    %114.0, DeadBranchReached@0x563fa7080578[Test#1], %111.5   !
BB115   <- [113]
  val?^ | miss    %115.0 = LdVar              eR    x, e0.1
  val?            %115.1 = Force!<wrapped>    !v    %115.0, e0.1   <vec>
  val?            %115.2 = CallBuiltin        !v    unclass(%115.1) e0.1   <vec->
  void                    StVar              lW    x, %115.2, e0.1
  val?^ | miss    %115.4 = LdVar              eR    vapply, e0.1
  lgl$#-          %115.5 = Identical                %115.4, function(X, FUN, FUN.VALUE, ..., USE.NAMES=TRU|...
  void                    Branch                   %115.5 -> BB117 (if true) | BB118 (if false)
BB116   <- [113]
  fs              %116.0 = FrameState         R     0x563fa7972360+342: [], env=e0.1
  void                    Deopt              !v    %116.0, DeadBranchReached@0x563fa7080578[Test#2], %113.5   !
BB117   <- [115]
  prom-           %117.0 = MkArg                    unboundValue, .encode_numeric_version[0x563fa8b33110]_p1 (!refl), e0.1
  prom-           %117.1 = MkArg                    unboundValue, .encode_numeric_version[0x563fa8b33110]_p2, e0.1
  ct              %117.2 = PushContext        lCL   %117.0, %117.1, 0L, vapply(x, length, 0L), function(X, FUN, FUN.VALUE, ..., USE.NAMES=TRU|..., e0.1
  val?^           %117.3 = CastType                 up %117.1
  val?^           %117.4 = CastType                 up %117.0
  env             e117.5 = MkEnv              l     X=%117.4, FUN=%117.3, FUN.VALUE=0L, ...(miss)=missingArg, USE.NAMES(miss)=true, parent=R_BaseNamespace, context 1
  prom-           %117.6 = MkArg                    unboundValue, .encode_numeric_version[0x563fa8b33110]_p48, e117.5
  val?            %117.7 = StaticCall         !v    match.fun[0x563fa7e68710](%117.6) e117.5   <(cls|blt)->
  void                    StVar              lW    FUN, %117.7, e117.5
  val?^ | miss    %117.9 = LdVar              eR    is.vector, e117.5
  lgl$#-          %117.10 = Identical                %117.9, function(x, mode="any") <(rir::DispatchTable*)|...
  void                    Branch                   %117.10 -> BB119 (if true) | BB120 (if false)
BB118   <- [115]
  fs              %118.0 = FrameState         R     0x563fa7972360+447: [], env=e0.1
  void                    Deopt              !v    %118.0, CallTarget@0x563fa7080578[Call#5], %115.4   !
BB119   <- [117]
  val?^ | miss    %119.0 = LdVar              eR    X, e117.5
  val?            %119.1 = Force!<lazy>       !v    %119.0, e117.5   <(str|vec)>
  lgl$#-          %119.2 = CallSafeBuiltin    wed   is.vector(%119.1, "any")    <lgl$->
  lgl$#-          %119.3 = Not                d     %119.2, elided
  void                    Branch                   %119.2 -> BB104 (if true) | BB16 (if false)
BB120   <- [117]
  fs              %120.0 = FrameState         R     0x563fa7972360+489: [], env=e0.1
  fs              %120.1 = FrameState         R     0x563fa6331660+46: [], env=e117.5, next=%120.0
  void                    Deopt              !v    %120.1, CallTarget@0x563fa5dc0920[Call#1], %117.9   !
BB104   <- [119]
  val?^ | miss    %104.0 = LdVar              eR    is.object, e117.5
  lgl$#-          %104.1 = Identical                <blt is.object>, %104.0   <true>
  void                    Branch                   %104.1 -> BB121 (if true) | BB122 (if false)
BB16   <- [119]
  void                    Nop                !     
  lgl$#-          %16.1 = %119.3
  goto BB17
BB121   <- [104]
  val?^ | miss    %121.0 = LdVar              eR    X, e117.5
  val?            %121.1 = Force!<wrapped>    !v    %121.0, e117.5   <(str|vec)+>
  lgl$#-          %121.2 = CallSafeBuiltin    wed   is.object(%121.1)    <lgl$->
  lgl$-           %121.3 = LOr                      %119.3, %121.2
  lgl$-           %121.4 = %121.3
  goto BB17
BB122   <- [104]
  fs              %122.0 = FrameState         R     0x563fa7972360+489: [], env=e0.1
  fs              %122.1 = FrameState         R     0x563fa6331660+78: [], env=e117.5, next=%122.0
  prom-           %122.2 = MkArg                    %119.1, .encode_numeric_version[0x563fa8b33110]_p50 (!refl), e117.5
  val?~           %122.3 = CastType                 up %122.2
  env             e122.4 = (MkEnv)            l     mode(miss)="any", x=%122.3, parent=R_BaseNamespace, context 0
  fs              %122.5 = FrameState         R     0x563fa794ef80+41: [%119.2], env=e122.4, next=%122.1
  void                    Deopt              !v    %122.5, DeadBranchReached@0x563fa5dc0920[Test#0], %104.1   !
BB17   <- [16, 121]
  lgl$-           %17.0 = Phi                      %121.4:BB121, %16.1:BB16
  lgl$-           %17.1 = %17.0
  lgl$#-          %17.2 = CheckTrueFalse     e     %17.1
  void                    Branch                   %17.2 -> BB103 (if true) | BB20 (if false)
BB103   <- [17]
  val?^ | miss    %103.0 = LdVar              eR    as.list, e117.5
  lgl$#-          %103.1 = Identical                %103.0, function(x, ...) <(rir::DispatchTable*)0x563fa|...
  void                    Branch                   %103.1 -> BB123 (if true) | BB124 (if false)
BB20   <- [17]
  void                    Nop                !     
  goto BB21
BB123   <- [103]
  val?^ | miss    %123.0 = LdVar              eR    X, e117.5
  val?            %123.1 = Force!<wrapped>    !v    %123.0, e117.5   <vec>
  val?            %123.2 = StaticCall         !v    as.list[0x563fa84f63f0](%123.1) { 0 } e117.5   <vec>
  void                    StVar              lW    X, %123.2, e117.5
  goto BB21
BB124   <- [103]
  fs              %124.0 = FrameState         R     0x563fa7972360+489: [], env=e0.1
  fs              %124.1 = FrameState         R     0x563fa6331660+189: [%17.1], env=e117.5, next=%124.0
  void                    Deopt              !v    %124.1, CallTarget@0x563fa5dc0920[Call#3], %103.0   !
BB21   <- [20, 123]
  (cls|spec|blt)  %21.0 = LdFun              !v    .Internal, <0x563fa5aca698>, e117.5
  prom-           %21.1 = MkArg                    unboundValue, .encode_numeric_version[0x563fa8b33110]_p51, e117.5
  val?            %21.2 = Call               !v    %21.0(%21.1) e117.5   <val?+>
  val?            %21.3 = PopContext         C     %21.2, %117.2   <int->
  void                    StVar              lW    lens, %21.3, e0.1
  val?^ | miss    %21.5 = LdVar              eR    lapply, e0.1
  lgl$#-          %21.6 = Identical                %21.5, function(X, FUN, ...) <(rir::DispatchTable*)0x|...
  void                    Branch                   %21.6 -> BB125 (if true) | BB126 (if false)
BB125   <- [21]
  prom-           %125.0 = MkArg                    unboundValue, .encode_numeric_version[0x563fa8b33110]_p3, e0.1
  cls             %125.1 = MkCls                    .encode_numeric_version@Prom(4)0, e0.1
  prom-           %125.2 = MkArg                    %125.1, .encode_numeric_version[0x563fa8b33110]_p4 (!refl), e0.1
  ct              %125.3 = PushContext        lCL   %125.0, %125.2, lapply(x, function(<lst e=R_MissingArg>, sprin|..., function(X, FUN, ...) <(rir::DispatchTable*)0x|..., e0.1
  cls~            %125.4 = CastType                 up %125.2
  val?^           %125.5 = CastType                 up %125.0
  env             e125.6 = MkEnv              l     X=%125.5, FUN=%125.4, ...(miss)=missingArg, parent=R_BaseNamespace, context 1
  prom-           %125.7 = MkArg                    unboundValue, .encode_numeric_version[0x563fa8b33110]_p58 (!refl), e125.6
  val?            %125.8 = StaticCall         !v    match.fun[0x563fa7e68710](%125.7) e125.6   <(cls|blt)->
  void                    StVar              lW    FUN, %125.8, e125.6
  val?^ | miss    %125.10 = LdVar              eR    is.vector, e125.6
  lgl$#-          %125.11 = Identical                %125.10, function(x, mode="any") <(rir::DispatchTable*)|...
  void                    Branch                   %125.11 -> BB127 (if true) | BB128 (if false)
BB126   <- [21]
  fs              %126.0 = FrameState         R     0x563fa7972360+503: [], env=e0.1
  void                    Deopt              !v    %126.0, CallTarget@0x563fa7080578[Call#6], %21.5   !
BB127   <- [125]
  val?^ | miss    %127.0 = LdVar              eR    X, e125.6
  val?            %127.1 = Force!<lazy>       !v    %127.0, e125.6   <vec>
  lgl$#-          %127.2 = CallSafeBuiltin    wed   is.vector(%127.1, "any")    <lgl$->
  lgl$#-          %127.3 = Not                d     %127.2, elided
  void                    Branch                   %127.2 -> BB102 (if true) | BB28 (if false)
BB128   <- [125]
  fs              %128.0 = FrameState         R     0x563fa7972360+540: [], env=e0.1
  fs              %128.1 = FrameState         R     0x563fa6528c40+46: [], env=e125.6, next=%128.0
  void                    Deopt              !v    %128.1, CallTarget@0x563fa73aba10[Call#1], %125.10   !
BB102   <- [127]
  val?^ | miss    %102.0 = LdVar              eR    is.object, e125.6
  lgl$#-          %102.1 = Identical                <blt is.object>, %102.0   <true>
  void                    Branch                   %102.1 -> BB129 (if true) | BB130 (if false)
BB28   <- [127]
  void                    Nop                !     
  lgl$#-          %28.1 = %127.3
  goto BB29
BB129   <- [102]
  val?^ | miss    %129.0 = LdVar              eR    X, e125.6
  val?            %129.1 = Force!<wrapped>    !v    %129.0, e125.6   <vec->
  lgl$#-          %129.2 = CallSafeBuiltin    wed   is.object(%129.1)    <lgl$->
  lgl$-           %129.3 = LOr                      %127.3, %129.2
  lgl$-           %129.4 = %129.3
  goto BB29
BB130   <- [102]
  fs              %130.0 = FrameState         R     0x563fa7972360+540: [], env=e0.1
  fs              %130.1 = FrameState         R     0x563fa6528c40+78: [], env=e125.6, next=%130.0
  prom-           %130.2 = MkArg                    %127.1, .encode_numeric_version[0x563fa8b33110]_p60 (!refl), e125.6
  val?~           %130.3 = CastType                 up %130.2
  env             e130.4 = (MkEnv)            l     mode(miss)="any", x=%130.3, parent=R_BaseNamespace, context 0
  fs              %130.5 = FrameState         R     0x563fa794ef80+41: [%127.2], env=e130.4, next=%130.1
  void                    Deopt              !v    %130.5, DeadBranchReached@0x563fa73aba10[Test#0], %102.1   !
BB29   <- [28, 129]
  lgl$-           %29.0 = Phi                      %129.4:BB129, %28.1:BB28
  lgl$-           %29.1 = %29.0
  lgl$#-          %29.2 = CheckTrueFalse     e     %29.1
  void                    Branch                   %29.2 -> BB101 (if true) | BB32 (if false)
BB101   <- [29]
  val?^ | miss    %101.0 = LdVar              eR    as.list, e125.6
  lgl$#-          %101.1 = Identical                %101.0, function(x, ...) <(rir::DispatchTable*)0x563fa|...
  void                    Branch                   %101.1 -> BB131 (if true) | BB132 (if false)
BB32   <- [29]
  void                    Nop                !     
  goto BB33
BB131   <- [101]
  val?^ | miss    %131.0 = LdVar              eR    X, e125.6
  val?            %131.1 = Force!<wrapped>    !v    %131.0, e125.6   <vec>
  val?            %131.2 = StaticCall         !v    as.list[0x563fa84f63f0](%131.1) { 0 } e125.6   <vec>
  void                    StVar              lW    X, %131.2, e125.6
  goto BB33
BB132   <- [101]
  fs              %132.0 = FrameState         R     0x563fa7972360+540: [], env=e0.1
  fs              %132.1 = FrameState         R     0x563fa6528c40+189: [%29.1], env=e125.6, next=%132.0
  void                    Deopt              !v    %132.1, CallTarget@0x563fa73aba10[Call#3], %101.0   !
BB33   <- [32, 131]
  val?^ | miss    %33.0 = LdVar              eR    X, e125.6
  val?            %33.1 = Force!<wrapped>    !v    %33.0, e125.6   <vec>
  (nil|str)-      %33.2 = Names                    %33.1
  int$-           %33.3 = Length                   %33.1
  vec-            %33.4 = CallSafeBuiltin    wed   vector("list", %33.3) 
  val+            %33.5 = SetNames           e     %33.4, %33.2
  int$#-          %33.6 = 0L
  val+            %33.7 = %33.5
  goto BB34
BB34   <- [35, 33]
  int$-           %34.0 = Phi                      %33.6:BB33, %35.7:BB35
  int$-           %34.1 = %34.0
  val?            %34.2 = Phi                      %33.7:BB33, %35.8:BB35
  val?            %34.3 = %34.2
  int$-           %34.4 = Inc                      %34.1
  lgl$-           %34.5 = Lt                 d     %33.3, %34.4, elided
  lgl$#-          %34.6 = Identical                %34.5, true
  void                    Branch                   %34.6 -> BB36 (if true) | BB35 (if false)
BB36   <- [34]
  val?            %36.0 = PopContext         C     %34.3, %125.3   <vec->
  void                    StVar              lW    y, %36.0, e0.1
  val?^ | miss    %36.2 = LdVar              eR    max, e0.1
  lgl$#-          %36.3 = Identical                <blt max>, %36.2   <true>
  void                    Branch                   %36.3 -> BB133 (if true) | BB134 (if false)
BB35   <- [34]
  void                    StVar              lW    i, %34.4, e125.6
  (cls|spec|blt)  %35.1 = LdFun              !v    FUN, e125.6
  prom-           %35.2 = MkArg                    unboundValue, .encode_numeric_version[0x563fa8b33110]_p61, e125.6
  (miss|dots)     %35.3 = LdDots             R     , e125.6
  *dots-          %35.4 = ExpandDots               %35.3
  val?            %35.5 = NamedCall          !v    %35.1(%35.2, .xpandDotsTrigger=%35.4) e125.6   <val?>
  val?            %35.6 = SetVecElt          e     %35.5, %34.3, %34.4
  int$-           %35.7 = %34.4
  val?            %35.8 = %35.6
  goto BB34
BB133   <- [36]
  val?^ | miss    %133.0 = LdVar              eR    nchar, e0.1
  lgl$#-          %133.1 = Identical                %133.0, function(x, type="chars", allowNA=FALSE, keepN|...
  void                    Branch                   %133.1 -> BB135 (if true) | BB136 (if false)
BB134   <- [36]
  void                    Nop                !     
  lgl$#-          %134.1 = %36.3
  dr              %134.2 = DeadBranchReached@0x563fa7080578[Test#3]
  goto BB37
BB135   <- [133]
  val?^ | miss    %135.0 = LdVar              eR    unlist, e0.1
  lgl$#-          %135.1 = Identical                %135.0, function(x, recursive=TRUE, use.names=TRUE) <(|...
  void                    Branch                   %135.1 -> BB137 (if true) | BB138 (if false)
BB136   <- [133]
  void                    Nop                !     
  val?^ | miss    %136.1 = %133.0
  dr              %136.2 = CallTarget@0x563fa7080578[Call#10]
  goto BB37
BB37   <- [134, 136, 138]
  val?^ | miss    %37.0 = Phi                      %134.1:BB134, %136.1:BB136, %138.1:BB138
  val?^ | miss    %37.1 = %37.0
  dr              %37.2 = Phi                      %134.2:BB134, %136.2:BB136, %138.2:BB138
  dr              %37.3 = %37.2
  fs              %37.4 = FrameState         R     0x563fa7972360+554: [], env=e0.1
  void                    Deopt              !v    %37.4, %37.3, %37.1   !
BB137   <- [135]
  prom-           %137.0 = MkArg                    unboundValue, .encode_numeric_version[0x563fa8b33110]_p6 (!refl), e0.1
  ct              %137.1 = PushContext        lCL   %137.0, unlist(y), function(x, recursive=TRUE, use.names=TRUE) <(|..., e0.1
  val?^           %137.2 = CastType                 up %137.0
  env             e137.3 = MkEnv              l     x=%137.2, recursive(miss)=true, use.names(miss)=true, parent=R_BaseNamespace, context 1
  cls             %137.4 = MkCls                    unknown--fromConstant@127, e137.3
  cls             %137.5 = MkCls                    unknown--fromConstant>URapply@148, e137.3
  val?            %137.6 = Force!<lazy>       !vrL  %137.2, e137.3   <vec+>
  val?            %137.7 = CallBuiltin        !v    islistfactor(%137.6, true) e137.3
  lgl$#-          %137.8 = CheckTrueFalse     we    %137.7
  void                    Branch                   %137.8 -> BB97 (if true) | BB39 (if false)
BB138   <- [135]
  void                    Nop                !     
  val?^ | miss    %138.1 = %135.0
  dr              %138.2 = CallTarget@0x563fa7080578[Call#11]
  goto BB37
BB97   <- [137]
  val?^ | miss    %97.0 = LdVar              eR    recursive, e137.3
  val?            %97.1 = Force!             !v    %97.0, e137.3   <val?_>
  lgl$#-          %97.2 = CheckTrueFalse     we    %97.1
  void                    Branch                   %97.2 -> BB100 (if true) | BB98 (if false)
BB39   <- [137]
  val?^ | miss    %39.0 = LdVar              eR    x, e137.3
  val?            %39.1 = Force!<wrapped>    !v    %39.0, e137.3   <vec+>
  val?^ | miss    %39.2 = LdVar              eR    recursive, e137.3
  val?            %39.3 = Force!<wrapped>    !v    %39.2, e137.3   <lgl$->
  val?^ | miss    %39.4 = LdVar              eR    use.names, e137.3
  val?            %39.5 = Force!<lazy>       !v    %39.4, e137.3   <lgl$->
  val?            %39.6 = CallBuiltin        !v    unlist(%39.1, %39.3, %39.5) e137.3
  val?            %39.7 = PopContext         C     %39.6, %137.1   <str+>
  lgl$#-          %39.8 = IsType                   %39.7 isA val?+
  void                    Branch                   %39.8 -> BB139 (if true) | BB140 (if false)
BB100   <- [97]
  void                    Nop                !     
  cls             %100.1 = %137.5
  goto BB99
BB98   <- [97]
  void                    Nop                !     
  cls             %98.1 = %137.4
  goto BB99
BB139   <- [39]
  val?+           %139.0 = CastType           d     dn %39.7   <str+>
  val+            %139.1 = CallSafeBuiltin    wed   nchar(%139.0, "chars", false, na-lgl)    <int+>
  lgl$#-          %139.2 = IsType                   %139.1 isA int+
  void                    Branch                   %139.2 -> BB141 (if true) | BB142 (if false)
BB140   <- [39]
  fs              %140.0 = FrameState         R     0x563fa7972360+651: [<blt max>], env=e0.1
  prom-           %140.1 = MkArg                    unboundValue, .encode_numeric_version[0x563fa8b33110]_p5, e0.1
  val?^           %140.2 = CastType                 up %140.1
  env             e140.3 = (MkEnv)            l     keepNA(miss)=na-lgl, allowNA(miss)=false, type(miss)="chars", x=%140.2, parent=R_BaseNamespace, context 0
  fs              %140.4 = FrameState         R     0x563fa7974fe0+9: [], env=e140.3, next=%140.0
  fs              %140.5 = FrameState         R     0x563fa62b3180+32(pr): [%39.7], env=e0.1, next=%140.4
  void                    Deopt              !v    %140.5, Typecheck@0x563fa5dbfa90[Type#0], %39.7   !
BB99   <- [100, 98]
  fs              %99.0 = FrameState         R     0x563fa7972360+651: [<blt max>], env=e0.1
  prom-           %99.1 = MkArg                    unboundValue, .encode_numeric_version[0x563fa8b33110]_p5, e0.1
  val?^           %99.2 = CastType                 up %99.1
  cls             %99.3 = Phi                      %98.1:BB98, %100.1:BB100
  cls             %99.4 = %99.3
  void                    StVar              lW    URapply, %99.4, e137.3
  (cls|spec|blt)  %99.6 = LdFun              !v    unique, e137.3
  env             e99.7 = (MkEnv)            l     keepNA(miss)=na-lgl, allowNA(miss)=false, type(miss)="chars", x=%99.2, parent=R_BaseNamespace, context 0
  fs              %99.8 = FrameState         R     0x563fa7974fe0+9: [], env=e99.7, next=%99.0
  fs              %99.9 = FrameState         R     0x563fa62b3180+32(pr): [], env=e0.1, next=%99.8
  fs              %99.10 = FrameState         R     0x563fa797cd10+178: [%99.6], env=e137.3, next=%99.9
  void                    Deopt              !v    %99.10, DeadCall@0x563fa60a2730[Call#0], %99.6   !
BB141   <- [139]
  int+            %141.0 = CastType           d     dn %139.1
  int$-           %141.1 = CallSafeBuiltin    wed   max(%141.0, 0L)    <int$->
  void                    StVar              lW    width, %141.1, e0.1
  val?^ | miss    %141.3 = LdVar              eR    vapply, e0.1
  lgl$#-          %141.4 = Identical                %141.3, function(X, FUN, FUN.VALUE, ..., USE.NAMES=TRU|...
  void                    Branch                   %141.4 -> BB143 (if true) | BB144 (if false)
BB142   <- [139]
  fs              %142.0 = FrameState         R     0x563fa7972360+651: [<blt max>], env=e0.1
  prom-           %142.1 = MkArg                    %139.0, .encode_numeric_version[0x563fa8b33110]_p5 (!refl), e0.1
  val?~           %142.2 = CastType                 up %142.1
  env             e142.3 = (MkEnv)            l     keepNA(miss)=na-lgl, allowNA(miss)=false, type(miss)="chars", x=%142.2, parent=R_BaseNamespace, context 0
  fs              %142.4 = FrameState         R     0x563fa7974fe0+69: [%139.1], env=e142.3, next=%142.0
  void                    Deopt              !v    %142.4, Typecheck@0x563fa7080578[Type#21], %139.1   !
BB143   <- [141]
  prom-           %143.0 = MkArg                    unboundValue, .encode_numeric_version[0x563fa8b33110]_p7, e0.1
  cls             %143.1 = MkCls                    .encode_numeric_version@Prom(8)0, e0.1
  prom-           %143.2 = MkArg                    %143.1, .encode_numeric_version[0x563fa8b33110]_p8 (!refl), e0.1
  ct              %143.3 = PushContext        lCL   %143.0, %143.2, "", vapply(y, function(<lst e=R_MissingArg>, paste|..., function(X, FUN, FUN.VALUE, ..., USE.NAMES=TRU|..., e0.1
  cls~            %143.4 = CastType                 up %143.2
  val?^           %143.5 = CastType                 up %143.0
  env             e143.6 = MkEnv              l     X=%143.5, FUN=%143.4, FUN.VALUE="", ...(miss)=missingArg, USE.NAMES(miss)=true, parent=R_BaseNamespace, context 1
  prom-           %143.7 = MkArg                    unboundValue, .encode_numeric_version[0x563fa8b33110]_p33 (!refl), e143.6
  val?            %143.8 = StaticCall         !v    match.fun[0x563fa7e68710](%143.7) e143.6   <(cls|blt)->
  void                    StVar              lW    FUN, %143.8, e143.6
  val?^ | miss    %143.10 = LdVar              eR    is.vector, e143.6
  lgl$#-          %143.11 = Identical                %143.10, function(x, mode="any") <(rir::DispatchTable*)|...
  void                    Branch                   %143.11 -> BB145 (if true) | BB146 (if false)
BB144   <- [141]
  fs              %144.0 = FrameState         R     0x563fa7972360+693: [], env=e0.1
  void                    Deopt              !v    %144.0, CallTarget@0x563fa7080578[Call#12], %141.3   !
BB145   <- [143]
  val?^ | miss    %145.0 = LdVar              eR    X, e143.6
  val?            %145.1 = Force!<lazy>       !v    %145.0, e143.6   <(str|vec)>
  lgl$#-          %145.2 = CallSafeBuiltin    wed   is.vector(%145.1, "any")    <lgl$->
  lgl$#-          %145.3 = Not                d     %145.2, elided
  void                    Branch                   %145.2 -> BB96 (if true) | BB50 (if false)
BB146   <- [143]
  fs              %146.0 = FrameState         R     0x563fa7972360+735: [], env=e0.1
  fs              %146.1 = FrameState         R     0x563fa6331660+46: [], env=e143.6, next=%146.0
  void                    Deopt              !v    %146.1, CallTarget@0x563fa5dc0920[Call#1], %143.10   !
BB96   <- [145]
  val?^ | miss    %96.0 = LdVar              eR    is.object, e143.6
  lgl$#-          %96.1 = Identical                <blt is.object>, %96.0   <true>
  void                    Branch                   %96.1 -> BB147 (if true) | BB148 (if false)
BB50   <- [145]
  void                    Nop                !     
  lgl$#-          %50.1 = %145.3
  goto BB51
BB147   <- [96]
  val?^ | miss    %147.0 = LdVar              eR    X, e143.6
  val?            %147.1 = Force!<wrapped>    !v    %147.0, e143.6   <(str|vec)+>
  lgl$#-          %147.2 = CallSafeBuiltin    wed   is.object(%147.1)    <lgl$->
  lgl$-           %147.3 = LOr                      %145.3, %147.2
  lgl$-           %147.4 = %147.3
  goto BB51
BB148   <- [96]
  fs              %148.0 = FrameState         R     0x563fa7972360+735: [], env=e0.1
  fs              %148.1 = FrameState         R     0x563fa6331660+78: [], env=e143.6, next=%148.0
  prom-           %148.2 = MkArg                    %145.1, .encode_numeric_version[0x563fa8b33110]_p36 (!refl), e143.6
  val?~           %148.3 = CastType                 up %148.2
  env             e148.4 = (MkEnv)            l     mode(miss)="any", x=%148.3, parent=R_BaseNamespace, context 0
  fs              %148.5 = FrameState         R     0x563fa794ef80+41: [%145.2], env=e148.4, next=%148.1
  void                    Deopt              !v    %148.5, DeadBranchReached@0x563fa5dc0920[Test#0], %96.1   !
BB51   <- [50, 147]
  lgl$-           %51.0 = Phi                      %147.4:BB147, %50.1:BB50
  lgl$-           %51.1 = %51.0
  lgl$#-          %51.2 = CheckTrueFalse     e     %51.1
  void                    Branch                   %51.2 -> BB95 (if true) | BB54 (if false)
BB95   <- [51]
  val?^ | miss    %95.0 = LdVar              eR    as.list, e143.6
  lgl$#-          %95.1 = Identical                %95.0, function(x, ...) <(rir::DispatchTable*)0x563fa|...
  void                    Branch                   %95.1 -> BB149 (if true) | BB150 (if false)
BB54   <- [51]
  void                    Nop                !     
  goto BB55
BB149   <- [95]
  val?^ | miss    %149.0 = LdVar              eR    X, e143.6
  val?            %149.1 = Force!<wrapped>    !v    %149.0, e143.6   <vec>
  val?            %149.2 = StaticCall         !v    as.list[0x563fa84f63f0](%149.1) { 0 } e143.6   <vec>
  void                    StVar              lW    X, %149.2, e143.6
  goto BB55
BB150   <- [95]
  fs              %150.0 = FrameState         R     0x563fa7972360+735: [], env=e0.1
  fs              %150.1 = FrameState         R     0x563fa6331660+189: [%51.1], env=e143.6, next=%150.0
  void                    Deopt              !v    %150.1, CallTarget@0x563fa5dc0920[Call#3], %95.0   !
BB55   <- [54, 149]
  (cls|spec|blt)  %55.0 = LdFun              !v    .Internal, <0x563fa5aca698>, e143.6
  prom-           %55.1 = MkArg                    unboundValue, .encode_numeric_version[0x563fa8b33110]_p37, e143.6
  val?            %55.2 = Call               !v    %55.0(%55.1) e143.6   <val?+>
  val?            %55.3 = PopContext         C     %55.2, %143.3   <str+>
  void                    StVar              lW    y, %55.3, e0.1
  val?^ | miss    %55.5 = LdVar              eR    strrpad, e0.1
  lgl$#-          %55.6 = Identical                %55.5, %0.3
  void                    Branch                   %55.6 -> BB151 (if true) | BB152 (if false)
BB151   <- [55]
  prom-           %151.0 = MkArg                    unboundValue, .encode_numeric_version[0x563fa8b33110]_p9 (!refl), e0.1
  prom-           %151.1 = MkArg                    unboundValue, .encode_numeric_version[0x563fa8b33110]_p10, e0.1
  ct              %151.2 = PushContext        lCL   %151.0, "0", %151.1, strrpad(y, "0", max(nchar(y), 0L)), %0.3, e0.1
  val?^           %151.3 = CastType                 up %151.1
  val?^           %151.4 = CastType                 up %151.0
  env             e151.5 = MkEnv              l     x=%151.4, char="0", width=%151.3, parent=e0.1, context 1
  val?^ | miss    %151.6 = LdVar              eR    paste0, e151.5
  lgl$#-          %151.7 = Identical                %151.6, function(..., collapse=NULL, recycle0=FALSE) <|...
  void                    Branch                   %151.7 -> BB153 (if true) | BB154 (if false)
BB152   <- [55]
  fs              %152.0 = FrameState         R     0x563fa7972360+749: [], env=e0.1
  void                    Deopt              !v    %152.0, CallTarget@0x563fa7080578[Call#13], %55.5   !
BB153   <- [151]
  prom-           %153.0 = MkArg                    unboundValue, .encode_numeric_version[0x563fa8b33110]_p25, e151.5
  prom-           %153.1 = MkArg                    unboundValue, .encode_numeric_version[0x563fa8b33110]_p26, e151.5
  dots-           %153.2 = DotsList           l     %153.0, %153.1
  ct              %153.3 = PushContext        lCL   %153.2, paste0(x, strrep(char, -(width, nchar(x)))), function(..., collapse=NULL, recycle0=FALSE) <|..., e151.5
  val?^ | miss    %153.4 = CastType                 up %153.0
  val?^ | miss    %153.5 = CastType                 up %153.1
  env             e153.6 = MkEnv              l     ...=%153.2, collapse(miss)=nil, recycle0(miss)=false, parent=R_BaseNamespace, context 1
  val?            %153.7 = Force!             !vL   %153.4, e153.6
  val?            %153.8 = Force!             !vL   %153.5, e153.6
  val+            %153.9 = CallSafeBuiltin    wed   list(%153.7, %153.8)    <vec->
  val?            %153.10 = CallBuiltin        !v    paste0(%153.9, nil, false) e153.6
  val?            %153.11 = PopContext         C     %153.10, %153.3   <str->
  val?            %153.12 = PopContext         C     %153.11, %151.2   <str->
  void                    StVar              lW    y, %153.12, e0.1
  val?^ | miss    %153.14 = LdVar              eR    structure, e0.1
  lgl$#-          %153.15 = Identical                %153.14, function(.Data, ...) <(rir::DispatchTable*)0x5|...
  void                    Branch                   %153.15 -> BB155 (if true) | BB156 (if false)
BB154   <- [151]
  fs              %154.0 = FrameState         R     0x563fa7972360+791: [], env=e0.1
  env             e154.1 = (MkEnv)            l     x=%151.4, char="0", width=%151.3, parent=e0.1, context 1
  fs              %154.2 = FrameState         R     0x563fa7974280+0: [], env=e154.1, next=%154.0
  void                    Deopt              !v    %154.2, CallTarget@0x563fa650efe0[Call#0], %151.6   !
BB155   <- [153]
  prom-           %155.0 = MkArg                    unboundValue, .encode_numeric_version[0x563fa8b33110]_p13, e0.1
  prom-           %155.1 = MkArg                    unboundValue, .encode_numeric_version[0x563fa8b33110]_p16, e0.1
  prom-           %155.2 = MkArg                    unboundValue, .encode_numeric_version[0x563fa8b33110]_p17, e0.1
  prom-           %155.3 = MkArg                    unboundValue, .encode_numeric_version[0x563fa8b33110]_p18, e0.1
  prom-           %155.4 = MkArg                    unboundValue, .encode_numeric_version[0x563fa8b33110]_p19, e0.1
  dots-           %155.5 = DotsList           l     width=%155.1, lens=%155.2, .classes=%155.3, names=%155.4
  ct              %155.6 = PushContext        lCL   %155.0, %155.5, structure(ifelse(>(lens, 0L), y, NA), width=wi|..., function(.Data, ...) <(rir::DispatchTable*)0x5|..., e0.1
  val?^           %155.7 = CastType                 up %155.0
  env             e155.8 = MkEnv              l     .Data=%155.7, ...=%155.5, parent=R_BaseNamespace, context 1
  val?            %155.9 = Force!<lazy>       !vL   %155.7, e155.8   <(str|vec)+>
  lgl$-           %155.10 = Is                       %155.9, NULL
  lgl$#-          %155.11 = CheckTrueFalse     e     %155.10
  void                    Branch                   %155.11 -> BB94 (if true) | BB62 (if false)
BB156   <- [153]
  fs              %156.0 = FrameState         R     0x563fa7972360+805: [], env=e0.1
  void                    Deopt              !v    %156.0, CallTarget@0x563fa7080578[Call#16], %153.14   !
BB94   <- [155]
  fs              %94.0 = FrameState         R     0x563fa7972360+877: [], env=e0.1
  (cls|spec|blt)  %94.1 = LdFun              !v    warning, R_BaseNamespace
  fs              %94.2 = FrameState         R     0x563fa795e8f0+35: [%94.1], env=e155.8, next=%94.0
  void                    Deopt              !v    %94.2, DeadCall@0x563fa70b3f58[Call#0], %94.1   !
BB62   <- [155]
  val?            %62.0 = NamedCall          !v    <blt list>(width=%155.1, lens=%155.2, .classes=%155.3, names=%155.4) e155.8   <vec+>
  void                    StVar              lW    attrib, %62.0, e155.8
  lgl$#-          %62.2 = IsType                   %62.0 isA val?+
  val?^ | miss    %62.3 = LdVar              eR    length, e155.8
  lgl$#-          %62.4 = Identical                <blt length>, %62.3   <true>
  void                    Branch                   %62.4 -> BB157 (if true) | BB158 (if false)
BB157   <- [62]
  val             %157.0 = ChkMissing         e     %62.0
  void                    Branch                   %62.2 -> BB159 (if true) | BB160 (if false)
BB158   <- [62]
  void                    Nop                !     
  lgl$#-          %158.1 = %62.4
  dr              %158.2 = DeadBranchReached@0x563fa70b3f58[Test#0]
  goto BB63
BB159   <- [157]
  val?+           %159.0 = CastType           d     dn %62.0   <vec+>
  (int|real)$-    %159.1 = CallSafeBuiltin    wed   length(%159.0)    <int$->
  lgl$#-          %159.2 = IsType                   %159.1 isA int$-
  void                    Branch                   %159.2 -> BB161 (if true) | BB162 (if false)
BB160   <- [157]
  void                    Nop                !     
  val?            %160.1 = %62.0
  dr              %160.2 = Typecheck@0x563fa70b3f58[Type#1]
  goto BB63
BB63   <- [158, 160]
  val?^ | miss    %63.0 = Phi                      %158.1:BB158, %160.1:BB160
  val?^ | miss    %63.1 = %63.0
  dr              %63.2 = Phi                      %158.2:BB158, %160.2:BB160
  dr              %63.3 = %63.2
  fs              %63.4 = FrameState         R     0x563fa7972360+877: [], env=e0.1
  fs              %63.5 = FrameState         R     0x563fa795e8f0+113: [], env=e155.8, next=%63.4
  void                    Deopt              !v    %63.5, %63.3, %63.1   !
BB161   <- [159]
  int$-           %161.0 = CastType           d     dn %159.1
  lgl$#-          %161.1 = CheckTrueFalse     e     %161.0
  void                    Branch                   %161.1 -> BB69 (if true) | BB67 (if false)
BB162   <- [159]
  void                    Nop                !     
  (int|real)$-    %162.1 = %159.1
  dr              %162.2 = Typecheck@0x563fa70b3f58[Type#4]
  goto BB65
BB69   <- [161]
  val?^ | miss    %69.0 = LdVar              eR    c, e155.8
  lgl$#-          %69.1 = Identical                <blt c>, %69.0   <true>
  void                    Branch                   %69.1 -> BB163 (if true) | BB164 (if false)
BB67   <- [161]
  void                    Nop                !     
  goto BB68
BB65   <- [162, 164]
  val?^ | miss    %65.0 = Phi                      %162.1:BB162, %164.1:BB164
  val?^ | miss    %65.1 = %65.0
  dr              %65.2 = Phi                      %162.2:BB162, %164.2:BB164
  dr              %65.3 = %65.2
  fs              %65.4 = FrameState         R     0x563fa7972360+877: [], env=e0.1
  fs              %65.5 = FrameState         R     0x563fa795e8f0+204: [%159.1], env=e155.8, next=%65.4
  void                    Deopt              !v    %65.5, %65.3, %65.1   !
BB163   <- [69]
  str-            %163.0 = CallSafeBuiltin    wed   c(".Dim", ".Dimnames", ".Names", ".Tsp", ".Label")    <str->
  void                    StVar              lW    specials, %163.0, e155.8
  val?^ | miss    %163.2 = LdVar              eR    names, e155.8
  lgl$#-          %163.3 = Identical                <blt names>, %163.2   <true>
  void                    Branch                   %163.3 -> BB165 (if true) | BB166 (if false)
BB164   <- [69]
  void                    Nop                !     
  lgl$#-          %164.1 = %69.1
  dr              %164.2 = DeadBranchReached@0x563fa70b3f58[Test#1]
  goto BB65
BB68   <- [67, 189]
  val?^ | miss    %68.0 = LdVar              eR    .Data, e155.8
  void                    Visible            v     
  val?            %68.2 = Force!<value>      !     %68.0, e155.8   <(str|vec)>
  val?            %68.3 = PopContext         C     %68.2, %155.6   <str+>
  void                    Return             l     %68.3
BB165   <- [163]
  val+            %165.0 = CallSafeBuiltin    wed   names(%159.0)    <str->
  void                    StVar              lW    attrnames, %165.0, e155.8
  val?^ | miss    %165.2 = LdVar              eR    match, e155.8
  lgl$#-          %165.3 = Identical                %165.2, function(x, table, nomatch=NA, incomparables=N|...
  void                    Branch                   %165.3 -> BB167 (if true) | BB168 (if false)
BB166   <- [163]
  fs              %166.0 = FrameState         R     0x563fa7972360+877: [], env=e0.1
  fs              %166.1 = FrameState         R     0x563fa795e8f0+361: [], env=e155.8, next=%166.0
  void                    Deopt              !v    %166.1, DeadBranchReached@0x563fa70b3f58[Test#2], %163.3   !
BB167   <- [165]
  val+            %167.0 = CallSafeBuiltin    wed   match(%165.0, %163.0, NA, nil)    <int->
  void                    StVar              lW    m, %167.0, e155.8
  lgl$#-          %167.2 = IsType                   %167.0 isA int-
  val?^ | miss    %167.3 = LdVar              eR    is.na, e155.8
  lgl$#-          %167.4 = Identical                <blt is.na>, %167.3   <true>
  void                    Branch                   %167.4 -> BB169 (if true) | BB170 (if false)
BB168   <- [165]
  fs              %168.0 = FrameState         R     0x563fa7972360+877: [], env=e0.1
  fs              %168.1 = FrameState         R     0x563fa795e8f0+466: [], env=e155.8, next=%168.0
  void                    Deopt              !v    %168.1, CallTarget@0x563fa70b3f58[Call#5], %165.2   !
BB169   <- [167]
  void                    Branch                   %167.2 -> BB171 (if true) | BB172 (if false)
BB170   <- [167]
  void                    Nop                !     
  lgl$#-          %170.1 = %167.4
  dr              %170.2 = DeadBranchReached@0x563fa70b3f58[Test#3]
  goto BB74
BB171   <- [169]
  int-            %171.0 = CastType           d     dn %167.0
  lgl-            %171.1 = CallSafeBuiltin    wed   is.na(%171.0)    <lgl->
  lgl-            %171.2 = Not                wed   %171.1, elided   <lgl->
  void                    StVar              lW    ok, %171.2, e155.8
  val?^ | miss    %171.4 = LdVar              eR    any, e155.8
  lgl$#-          %171.5 = Identical                <blt any>, %171.4   <true>
  void                    Branch                   %171.5 -> BB173 (if true) | BB174 (if false)
BB172   <- [169]
  void                    Nop                !     
  val+            %172.1 = %167.0
  dr              %172.2 = Typecheck@0x563fa70b3f58[Type#11]
  goto BB74
BB74   <- [170, 172]
  val?^ | miss    %74.0 = Phi                      %170.1:BB170, %172.1:BB172
  val?^ | miss    %74.1 = %74.0
  dr              %74.2 = Phi                      %170.2:BB170, %172.2:BB172
  dr              %74.3 = %74.2
  fs              %74.4 = FrameState         R     0x563fa7972360+877: [], env=e0.1
  fs              %74.5 = FrameState         R     0x563fa795e8f0+517: [], env=e155.8, next=%74.4
  void                    Deopt              !v    %74.5, %74.3, %74.1   !
BB173   <- [171]
  val?            %173.0 = CallBuiltin        !v    any(%171.2) e155.8   <lgl$->
  lgl$#-          %173.1 = IsType                   %173.0 isA lgl$-
  void                    Branch                   %173.1 -> BB175 (if true) | BB176 (if false)
BB174   <- [171]
  fs              %174.0 = FrameState         R     0x563fa7972360+877: [], env=e0.1
  fs              %174.1 = FrameState         R     0x563fa795e8f0+623: [], env=e155.8, next=%174.0
  void                    Deopt              !v    %174.1, DeadBranchReached@0x563fa70b3f58[Test#4], %171.5   !
BB175   <- [173]
  lgl$-           %175.0 = CastType           d     dn %173.0
  lgl$#-          %175.1 = CheckTrueFalse     e     %175.0
  void                    Branch                   %175.1 -> BB91 (if true) | BB80 (if false)
BB176   <- [173]
  void                    Nop                !     
  val?            %176.1 = %173.0
  dr              %176.2 = Typecheck@0x563fa70b3f58[Type#17]
  goto BB78
BB91   <- [175]
  val?^ | miss    %91.0 = LdVar              eR    c, e155.8
  lgl$#-          %91.1 = Identical                <blt c>, %91.0   <@?>
  void                    Branch                   %91.1 -> BB93 (if true) | BB92 (if false)
BB80   <- [175]
  val?^ | miss    %80.0 = LdVar              eR    any, e155.8
  lgl$#-          %80.1 = Identical                <blt any>, %80.0   <true>
  void                    Branch                   %80.1 -> BB177 (if true) | BB178 (if false)
BB78   <- [176, 178]
  val?^ | miss    %78.0 = Phi                      %176.1:BB176, %178.1:BB178
  val?^ | miss    %78.1 = %78.0
  dr              %78.2 = Phi                      %176.2:BB176, %178.2:BB178
  dr              %78.3 = %78.2
  fs              %78.4 = FrameState         R     0x563fa7972360+877: [], env=e0.1
  fs              %78.5 = FrameState         R     0x563fa795e8f0+714: [%173.0], env=e155.8, next=%78.4
  void                    Deopt              !v    %78.5, %78.3, %78.1   !
BB93   <- [91]
  fs              %93.0 = FrameState         R     0x563fa7972360+877: [], env=e0.1
  str-            %93.1 = CallSafeBuiltin    wed   c("dim", "dimnames", "names", "tsp", "levels")    <val?_>
  void                    StVar              lW    replace, %93.1, e155.8
  (cls|spec|blt)  %93.3 = LdFun              !v    <-, e155.8
  fs              %93.4 = FrameState         R     0x563fa795e8f0+876: [%93.3], env=e155.8, next=%93.0
  void                    Deopt              !v    %93.4, DeadCall@0x563fa70b3f58[Call#9], %93.3   !
BB92   <- [91]
  fs              %92.0 = FrameState         R     0x563fa7972360+877: [], env=e0.1
  (cls|spec|blt)  %92.1 = LdFun              !v    c, e155.8
  fs              %92.2 = FrameState         R     0x563fa795e8f0+758: [%92.1], env=e155.8, next=%92.0
  void                    Deopt              !v    %92.2, DeadCall@0x563fa70b3f58[Call#8], %92.1   !
BB177   <- [80]
  (cls|spec|blt)  %177.0 = LdFun              !v    [[, <0x563fa5acac48>, e155.8
  prom-           %177.1 = MkArg                    unboundValue, .encode_numeric_version[0x563fa8b33110]_p46, e155.8
  val?            %177.2 = NamedCall          !v    %177.0(%177.1, "class", exact=true) e155.8   <(nil|str)->
  lgl$#-          %177.3 = IsType                   %177.2 isA val?-
  void                    Branch                   %177.3 -> BB179 (if true) | BB180 (if false)
BB178   <- [80]
  void                    Nop                !     
  lgl$#-          %178.1 = %80.1
  dr              %178.2 = DeadBranchReached@0x563fa70b3f58[Test#10]
  goto BB78
BB179   <- [177]
  val?-           %179.0 = CastType           d     dn %177.2   <(nil|str)->
  lgl-            %179.1 = Eq                 wed   %179.0, "factor", elided   <lgl->
  val?            %179.2 = CallBuiltin        !v    any(%179.1) e155.8   <lgl$->
  lgl$#-          %179.3 = IsType                   %179.2 isA lgl$-
  void                    Branch                   %179.3 -> BB181 (if true) | BB182 (if false)
BB180   <- [177]
  fs              %180.0 = FrameState         R     0x563fa7972360+877: [], env=e0.1
  fs              %180.1 = FrameState         R     0x563fa795e8f0+1023: [<blt any>, %177.2], env=e155.8, next=%180.0
  void                    Deopt              !v    %180.1, Typecheck@0x563fa70b3f58[Type#38], %177.2   !
BB181   <- [179]
  lgl$-           %181.0 = CastType           d     dn %179.2
  lgl$-           %181.1 = AsLogical                %181.0
  lgl$#-          %181.2 = Identical                %181.1, false
  void                    Branch                   %181.2 -> BB86 (if true) | BB85 (if false)
BB182   <- [179]
  void                    Nop                !     
  val?            %182.1 = %179.2
  dr              %182.2 = Typecheck@0x563fa70b3f58[Type#40]
  goto BB83
BB86   <- [181]
  lgl$#-          %86.0 = CheckTrueFalse     e     %181.1
  void                    Branch                   %86.0 -> BB90 (if true) | BB87 (if false)
BB85   <- [181]
  fs              %85.0 = FrameState         R     0x563fa7972360+877: [], env=e0.1
  (cls|spec|blt)  %85.1 = LdFun              !v    typeof, e155.8
  fs              %85.2 = FrameState         R     0x563fa795e8f0+1074: [%181.1, %85.1], env=e155.8, next=%85.0
  void                    Deopt              !v    %85.2, DeadCall@0x563fa70b3f58[Call#14], %85.1   !
BB83   <- [182, 184, 186]
  val?^ | miss    %83.0 = Phi                      %182.1:BB182, %184.1:BB184, %186.1:BB186
  val?^ | miss    %83.1 = %83.0
  dr              %83.2 = Phi                      %182.2:BB182, %184.2:BB184, %186.2:BB186
  dr              %83.3 = %83.2
  fs              %83.4 = FrameState         R     0x563fa7972360+877: [], env=e0.1
  fs              %83.5 = FrameState         R     0x563fa795e8f0+1057: [%179.2], env=e155.8, next=%83.4
  void                    Deopt              !v    %83.5, %83.3, %83.1   !
BB90   <- [86]
  fs              %90.0 = FrameState         R     0x563fa7972360+877: [], env=e0.1
  (cls|spec|blt)  %90.1 = LdFun              !v    storage.mode<-, e155.8
  fs              %90.2 = FrameState         R     0x563fa795e8f0+1142: ["integer", %90.1], env=e155.8, next=%90.0
  void                    Deopt              !v    %90.2, DeadCall@0x563fa70b3f58[Call#15], %90.1   !
BB87   <- [86]
  val?^ | miss    %87.0 = LdVar              eR    c, e155.8
  lgl$#-          %87.1 = Identical                <blt c>, %87.0   <true>
  void                    Branch                   %87.1 -> BB183 (if true) | BB184 (if false)
BB183   <- [87]
  val?^ | miss    %183.0 = LdVar              eR    attributes, e155.8
  lgl$#-          %183.1 = Identical                <blt attributes>, %183.0   <true>
  void                    Branch                   %183.1 -> BB185 (if true) | BB186 (if false)
BB184   <- [87]
  void                    Nop                !     
  lgl$#-          %184.1 = %87.1
  dr              %184.2 = DeadBranchReached@0x563fa70b3f58[Test#11]
  goto BB83
BB185   <- [183]
  val?^ | miss    %185.0 = LdVar              eR    .Data, e155.8
  val?            %185.1 = Force!<wrapped>    !v    %185.0, e155.8   <(str|vec)+>
  val?            %185.2 = CallBuiltin        !v    attributes(%185.1) e155.8   <(nil|vec)+>
  lgl$#-          %185.3 = IsType                   %185.2 isA val?+
  val?^ | miss    %185.4 = LdVar              eR    attrib, e155.8
  lgl$#-          %185.5 = IsType                   %185.4 isA val?~+ | miss
  void                    Branch                   %185.5 -> BB187 (if true) | BB188 (if false)
BB186   <- [183]
  void                    Nop                !     
  lgl$#-          %186.1 = %183.1
  dr              %186.2 = DeadBranchReached@0x563fa70b3f58[Test#12]
  goto BB83
BB187   <- [185]
  val?~+ | miss   %187.0 = CastType           d     dn %185.4
  val?+           %187.1 = Force!<value>            %187.0,    <vec+>
  void                    Branch                   %185.3 -> BB189 (if true) | BB190 (if false)
BB188   <- [185]
  void                    Nop                !     
  val?^ | miss    %188.1 = %185.4
  dr              %188.2 = Typecheck@0x563fa70b3f58[Type#51]
  goto BB88
BB189   <- [187]
  val?+           %189.0 = CastType           d     dn %185.2   <(nil|vec)+>
  val+            %189.1 = CallSafeBuiltin    wed   c(%189.0, %187.1)    <vec+>
  (cls|spec|blt)  %189.2 = LdFun              !v    attributes<-, <0x563fa5acb128>, e155.8
  val?^ | miss    %189.3 = LdVar              eR    .Data, e155.8
  val?            %189.4 = Force!<wrapped>    !v    %189.3, e155.8   <(str|vec)+>
  val?            %189.5 = NamedCall          !v    %189.2(%189.4, value=%189.1) e155.8
  void                    StVar              lW    .Data, %189.5, e155.8
  goto BB68
BB190   <- [187]
  void                    Nop                !     
  val?            %190.1 = %185.2
  dr              %190.2 = Typecheck@0x563fa70b3f58[Type#50]
  goto BB88
BB88   <- [188, 190]
  val?^ | miss    %88.0 = Phi                      %188.1:BB188, %190.1:BB190
  val?^ | miss    %88.1 = %88.0
  dr              %88.2 = Phi                      %188.2:BB188, %190.2:BB190
  dr              %88.3 = %88.2
  fs              %88.4 = FrameState         R     0x563fa7972360+877: [], env=e0.1
  fs              %88.5 = FrameState         R     0x563fa795e8f0+1361: [<blt c>, %185.2], env=e155.8, next=%88.4
  void                    Deopt              !v    %88.5, %88.3, %88.1   !
Prom 0:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    x, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <vec>
  void                    Return             l     %0.3
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    x, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <vec->
  void                    Return             l     %0.3
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    length, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <blt->
  void                    Return             l     %0.3
Prom 3:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    x, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <vec->
  void                    Return             l     %0.3
Prom 4:
BB0
  env             e0.0  = LdFunctionEnv            
  cls             %0.1  = MkCls                    .encode_numeric_version@Prom(4)0, e0.0
  void                    Return             l     %0.1
Prom 5:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     unlist, <0x563fa5de1508>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .encode_numeric_version[0x563fa8b33110]_p6, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <str+>
  void                    Return             l     %0.3
Prom 6:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    y, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <vec->
  void                    Return             l     %0.3
Prom 7:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    y, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 8:
BB0
  env             e0.0  = LdFunctionEnv            
  cls             %0.1  = MkCls                    .encode_numeric_version@Prom(8)0, e0.0
  void                    Return             l     %0.1
Prom 9:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    y, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str+>
  void                    Return             l     %0.3
Prom 10:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     max, <0x563fa5ad8580>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .encode_numeric_version[0x563fa8b33110]_p11, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2, 0L) e0.0   <int$->
  void                    Return             l     %0.3
Prom 11:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     nchar, <0x563fa5e30d80>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .encode_numeric_version[0x563fa8b33110]_p12, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <int+>
  void                    Return             l     %0.3
Prom 12:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    y, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str+>
  void                    Return             l     %0.3
Prom 13:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     ifelse, <0x563fa5f61040>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .encode_numeric_version[0x563fa8b33110]_p14, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .encode_numeric_version[0x563fa8b33110]_p15, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3, NA) e0.0   <str+>
  void                    Return             l     %0.4
Prom 14:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    lens, e0.0
  val?            %0.2  = Force<value>       !v    %0.1, e0.0   <int+>
  void                    Visible            v     
  val?            %0.4  = Gt                 !     %0.2, 0L, e0.0   <lgl+>
  void                    Return             l     %0.4
Prom 15:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    y, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 16:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    width, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <int$->
  void                    Return             l     %0.3
Prom 17:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    lens, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <int+>
  void                    Return             l     %0.3
Prom 18:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    classes, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 19:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    nms, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <(nil|str)->
  void                    Return             l     %0.3
Prom 20:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    x, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <(str|vec)>
  void                    Return             l     %0.3
Prom 25:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    x, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str+>
  void                    Return             l     %0.3
Prom 26:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     strrep, <0x563fa5f5ca68>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .encode_numeric_version[0x563fa8b33110]_p27, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .encode_numeric_version[0x563fa8b33110]_p28, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <str->
  void                    Return             l     %0.4
Prom 27:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    char, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 28:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    width, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <int$->
  (cls|spec|blt)  %0.4  = LdFun              !     nchar, <0x563fa5e30d80>, e0.0
  prom-           %0.5  = MkArg                    unboundValue, .encode_numeric_version[0x563fa8b33110]_p29, e0.0
  val?            %0.6  = Call               !     %0.4(%0.5) e0.0   <int+>
  val?            %0.7  = Sub                !     %0.3, %0.6, e0.0   <int+>
  void                    Return             l     %0.7
Prom 29:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    x, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str+>
  void                    Return             l     %0.3
Prom 33:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    FUN, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <(cls|blt)->
  void                    Return             l     %0.3
Prom 36:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    X, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <(str|vec)>
  void                    Return             l     %0.3
Prom 37:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     vapply, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .encode_numeric_version[0x563fa8b33110]_p38, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .encode_numeric_version[0x563fa8b33110]_p39, e0.0
  prom-           %0.4  = MkArg                    unboundValue, .encode_numeric_version[0x563fa8b33110]_p40, e0.0
  prom-           %0.5  = MkArg                    unboundValue, .encode_numeric_version[0x563fa8b33110]_p41, e0.0
  val?            %0.6  = Call               !     %0.1(%0.2, %0.3, %0.4, %0.5) e0.0   <val?_>
  void                    Return             l     %0.6
Prom 38:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    X, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 39:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    FUN, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 40:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    FUN.VALUE, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 41:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    USE.NAMES, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 46:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    attrib, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 48:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    FUN, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <(cls|blt)->
  void                    Return             l     %0.3
Prom 50:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    X, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <(str|vec)>
  void                    Return             l     %0.3
Prom 51:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     vapply, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .encode_numeric_version[0x563fa8b33110]_p52, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .encode_numeric_version[0x563fa8b33110]_p53, e0.0
  prom-           %0.4  = MkArg                    unboundValue, .encode_numeric_version[0x563fa8b33110]_p54, e0.0
  prom-           %0.5  = MkArg                    unboundValue, .encode_numeric_version[0x563fa8b33110]_p55, e0.0
  val?            %0.6  = Call               !     %0.1(%0.2, %0.3, %0.4, %0.5) e0.0   <val?_>
  void                    Return             l     %0.6
Prom 52:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    X, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 53:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    FUN, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 54:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    FUN.VALUE, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 55:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    USE.NAMES, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 58:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    FUN, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <(cls|blt)->
  void                    Return             l     %0.3
Prom 60:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    X, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <vec>
  void                    Return             l     %0.3
Prom 61:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    X, e0.0
  val?            %0.2  = Force<wrapped>     !v    %0.1, e0.0   <vec>
  lgl$#-          %0.3  = IsType                   %0.2 isA val+
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    i, e0.0
  val?            %2.1  = Force<value>       !v    %2.0, e0.0   <int$->
  val?            %2.2  = %2.1
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, .encode_numeric_version[0x563fa8b33110]_p62, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.2:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract2_1D        !v    %0.2, %3.1, e0.0   <val?>
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 62:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    i, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <int$->
  void                    Return             l     %0.3

│ .encode_numeric_version[0x563fa8b33110]                                      │
└──────────────────────────────────────────────────────────────────────────────┘
