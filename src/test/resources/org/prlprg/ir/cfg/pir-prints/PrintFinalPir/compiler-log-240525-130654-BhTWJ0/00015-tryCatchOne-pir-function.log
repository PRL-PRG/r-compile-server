
┌──────────────────────────────────────────────────────────────────────────────┐
│ tryCatchOne[0x55c7c475beb0]                                                  │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;NonRefl2,!Obj2                       │
│ Properties:                                                                  │
├────── Final PIR Version
tryCatchOne[0x55c7c475beb0]
BB0
  val?^           %0.0  = LdArg                    3
  val?^           %0.1  = LdArg                    2
  val?^           %0.2  = LdArg                    1
  val?^           %0.3  = LdArg                    0
  env             e0.4  = MkEnv              l     expr=%0.3, name=%0.2, parentenv=%0.1, handler=%0.0, parent=?, context 1
  cls             %0.5  = MkCls                    doTryCatch, e0.4
  void                    StVar              lW    doTryCatch, %0.5, e0.4
  prom-           %0.7  = MkArg                    unboundValue, tryCatchOne[0x55c7c475beb0]_p0, e0.4
  prom-           %0.8  = MkArg                    unboundValue, tryCatchOne[0x55c7c475beb0]_p1, e0.4
  prom-           %0.9  = MkArg                    unboundValue, tryCatchOne[0x55c7c475beb0]_p2 (!refl), e0.4
  prom-           %0.10 = MkArg                    unboundValue, tryCatchOne[0x55c7c475beb0]_p3, e0.4
  val?            %0.11 = StaticCall         !v    doTryCatch[0x55c7c4441150](%0.7, %0.8, %0.9, %0.10) from %0.5 e0.4   <vec->
  void                    StVar              lW    value, %0.11, e0.4
  lgl$#-          %0.13 = IsType                   %0.11 isA val+   <true>
  lgl$#-          %0.14 = IsType                   %0.11 isA val?-
  val             %0.15 = ChkMissing         e     %0.11
  void                    Branch                   %0.13 -> BB16 (if true) | BB17 (if false)
BB16   <- [0]
  void                    Branch                   %0.14 -> BB18 (if true) | BB19 (if false)
BB17   <- [0]
  void                    Nop                !     
  lgl$#-          %17.1 = %0.13
  dr              %17.2 = DeadBranchReached@0x55c7c4462f70[Test#0]
  goto BB15
BB18   <- [16]
  val?-           %18.0 = CastType           d     dn %0.11   <vec->
  val?            %18.1 = Extract2_1D        wed   %18.0, 1L, elided   <vec>
  lgl$-           %18.2 = Is                       %18.1, NULL
  lgl$#-          %18.3 = CheckTrueFalse     e     %18.2
  void                    Branch                   %18.3 -> BB12 (if true) | BB5 (if false)
BB19   <- [16]
  void                    Nop                !     
  val?            %19.1 = %0.11
  dr              %19.2 = Typecheck@0x55c7c4462f70[Type#4]
  goto BB15
BB15   <- [17, 19]
  val?^ | miss    %15.0 = Phi                      %17.1:BB17, %19.1:BB19
  val?^ | miss    %15.1 = %15.0
  dr              %15.2 = Phi                      %17.2:BB17, %19.2:BB19
  dr              %15.3 = %15.2
  fs              %15.4 = FrameState         R     0x55c7c4318da0+86: [], env=e0.4
  void                    Deopt              !v    %15.4, %15.3, %15.1   !
BB12   <- [18]
  val?            %12.0 = CallBuiltin        !v    geterrmessage() e0.4
  void                    StVar              lW    msg, %12.0, e0.4
  val?^ | miss    %12.2 = LdVar              eR    value, e0.4
  val?            %12.3 = Force!             !v    %12.2, e0.4   <val?_>
  lgl$#-          %12.4 = IsType                   %12.3 isA val?+
  void                    Branch                   %12.4 -> BB22 (if true) | BB23 (if false)
BB5   <- [18]
  val?^ | miss    %5.0  = LdVar              eR    is.character, e0.4
  lgl$#-          %5.1  = Identical                <blt is.character>, %5.0   <true>
  void                    Branch                   %5.1 -> BB20 (if true) | BB21 (if false)
BB22   <- [12]
  val?+           %22.0 = CastType           d     dn %12.3   <val?_>
  val?            %22.1 = Extract2_1D        wed   %22.0, 2L, elided   <val?_>
  void                    StVar              lW    call, %22.1, e0.4
  (cls|spec|blt)  %22.3 = LdFun              !v    simpleError, e0.4
  fs              %22.4 = FrameState         R     0x55c7c4318da0+657: [%22.3], env=e0.4
  void                    Deopt              !v    %22.4, DeadCall@0x55c7c4462f70[Call#3], %22.3   !
BB23   <- [12]
  fs              %23.0 = FrameState         R     0x55c7c4318da0+594: [%12.3], env=e0.4
  void                    Deopt              !v    %23.0, Typecheck@0x55c7c4462f70[Type#21], %12.3   !
BB20   <- [5]
  lgl$#-          %20.0 = CallSafeBuiltin    wed   is.character(%18.1)    <lgl$->
  void                    Branch                   %20.0 -> BB11 (if true) | BB6 (if false)
BB21   <- [5]
  fs              %21.0 = FrameState         R     0x55c7c4318da0+138: [%18.1], env=e0.4
  void                    Deopt              !v    %21.0, DeadBranchReached@0x55c7c4462f70[Test#1], %5.1   !
BB11   <- [20]
  void                    StVar              lW    msg, %18.1, e0.4
  val?            %11.1 = Extract2_1D        wed   %18.0, 2L, elided   <val?_>
  void                    StVar              lW    call, %11.1, e0.4
  (cls|spec|blt)  %11.3 = LdFun              !v    simpleError, e0.4
  fs              %11.4 = FrameState         R     0x55c7c4318da0+512: [%11.3], env=e0.4
  void                    Deopt              !v    %11.4, DeadCall@0x55c7c4462f70[Call#2], %11.3   !
BB6   <- [20]
  void                    StVar              lW    cond, %18.1, e0.4
  val?            %6.1  = Extract2_1D        wed   %18.0, 3L, elided   <cls->
  void                    Visible            v     
  (cls|spec|blt)  %6.3  = ChkFunction        e     %6.1
  prom-           %6.4  = MkArg                    unboundValue, tryCatchOne[0x55c7c475beb0]_p4 (!refl), e0.4
  val+            %6.5  = CallSafeBuiltin          bodyCode(%6.3) 
  lgl$#-          %6.6  = Identical                %6.5, <(rir::DispatchTable*)0x55c7c433b250>
  env             e6.7  = CallSafeBuiltin          environment(%6.3) 
  val?^           %6.8  = CastType                 up %6.4
  void                    Branch                   %6.6 -> BB24 (if true) | BB25 (if false)
BB24   <- [6]
  ct              %24.0 = PushContext        lCL   %6.4, [[(value, 3L)(cond), %6.3, e0.4
  val?^ | miss    %24.1 = LdVar              eR    tryCatch, e6.7
  lgl$#-          %24.2 = Identical                %24.1, function(expr, ..., finally) <(rir::DispatchTa|...
  void                    Branch                   %24.2 -> BB26 (if true) | BB27 (if false)
BB25   <- [6]
  fs              %25.0 = FrameState         R     0x55c7c4318da0+755: [%6.1], env=e0.4
  void                    Deopt              !v    %25.0, CallTarget@0x55c7c4462f70[Call#4], %6.5   !
BB26   <- [24]
  env             e26.0 = MkEnv              l     warning=%6.8, parent=e6.7, context 1
  prom-           %26.1 = MkArg                    unboundValue, tryCatchOne[0x55c7c475beb0]_p5, e26.0
  cls             %26.2 = MkCls                    @Prom(6)0, e26.0
  prom-           %26.3 = MkArg                    %26.2, tryCatchOne[0x55c7c475beb0]_p11 (!refl), e26.0
  dots-           %26.4 = DotsList           l     error=%26.3
  val?            %26.5 = StaticCall         !     tryCatch[0x55c7c42e1f00](%26.1, %26.4) { 0 1n } e26.0   <str$->
  val?            %26.6 = PopContext         C     %26.5, %24.0   <str$->
  void                    Return             l     %26.6
BB27   <- [24]
  fs              %27.0 = FrameState         R     0x55c7c4318da0+789: [], env=e0.4
  env             e27.1 = (MkEnv)            l     warning=%6.8, parent=e6.7, context 1
  fs              %27.2 = FrameState         R     0x55c7c4331e20+0: [], env=e27.1, next=%27.0
  void                    Deopt              !v    %27.2, CallTarget@0x55c7c3a2d2f8[Call#0], %24.1   !
Prom 0:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    expr, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <(str|vec)->
  void                    NonLocalReturn     !     %0.3, e0.0
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    name, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    parentenv, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 3:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    handler, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <cls->
  void                    Return             l     %0.3
Prom 4:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    cond, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <vec>
  void                    Return             l     %0.3
Prom 5:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     suppressWarnings, <0x55c7c3e532f0>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, tryCatchOne[0x55c7c475beb0]_p6, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0
  (cls|spec|blt)  %0.4  = LdFun              !     paste, <0x55c7c273bda8>, e0.0
  prom-           %0.5  = MkArg                    unboundValue, tryCatchOne[0x55c7c475beb0]_p9, e0.0
  val?            %0.6  = Call               !     %0.4("warning:", %0.5) e0.0   <str$->
  void                    Return             l     %0.6
Prom 6:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     f, <0x55c7c442c770>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, tryCatchOne[0x55c7c475beb0]_p7, e0.0
  prom-           %0.3  = MkArg                    unboundValue, tryCatchOne[0x55c7c475beb0]_p8, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <vec->
  void                    Return             l     %0.4
Prom 7:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    lhs, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <real->
  void                    Return             l     %0.3
Prom 8:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    rhs, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <real$->
  void                    Return             l     %0.3
Prom 9:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     conditionMessage, <0x55c7c44b5010>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, tryCatchOne[0x55c7c475beb0]_p10, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <str$->
  void                    Return             l     %0.3
Prom 10:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    warning, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <vec>
  void                    Return             l     %0.3
Prom 11:
BB0
  env             e0.0  = LdFunctionEnv            
  cls             %0.1  = MkCls                    @Prom(6)0, e0.0
  void                    Return             l     %0.1

│ tryCatchOne[0x55c7c475beb0]                                                  │
└──────────────────────────────────────────────────────────────────────────────┘
