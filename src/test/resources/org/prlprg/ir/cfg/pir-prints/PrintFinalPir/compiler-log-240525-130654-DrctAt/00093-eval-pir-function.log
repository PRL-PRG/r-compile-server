
┌──────────────────────────────────────────────────────────────────────────────┐
│ eval[0x5638bbd831c0]                                                         │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch miss: 1                              │
│ Properties:  ForceOrd: 0                                                     │
├────── Final PIR Version
eval[0x5638bbd831c0]
BB0
  val?^           %0.0  = LdArg                    1
  val?^           %0.1  = LdArg                    0
  env             e0.2  = MkEnv              l     expr=%0.1, envir=%0.0, enclos(miss)=missingArg, parent=R_BaseNamespace, context 1
  prom-           %0.3  = MkArg                    unboundValue, eval[0x5638bbd831c0]_p0, e0.2
  val?^ | miss    %0.4  = CastType                 up %0.3
  void                    StArg              lW    enclos, %0.4, e0.2
  val?            %0.6  = Force!<lazy>       !v    %0.1, e0.2   <(code|ast)->
  lgl$#-          %0.7  = IsType                   %0.6 isA val?-
  void                    Branch                   %0.7 -> BB4 (if true) | BB5 (if false)
BB4   <- [0]
  val?-           %4.0  = CastType           d     dn %0.6   <(code|ast)->
  val?^ | miss    %4.1  = LdVar              eR    envir, e0.2
  val?            %4.2  = Force!<lazy>       !v    %4.1, e0.2   <env->
  val?^ | miss    %4.3  = LdVar              eR    enclos, e0.2
  void                    Visible            v     
  val?            %4.5  = Force!<lazy>       !     %4.3, e0.2   <env->
  val?            %4.6  = CallBuiltin        !     eval(%4.0, %4.2, %4.5) e0.2
  void                    Return             l     %4.6
BB5   <- [0]
  fs              %5.0  = FrameState         R     0x5638bbb58dc0+9: [%0.6], env=e0.2
  void                    Deopt              !v    %5.0, Typecheck@0x5638bc10f7f0[Type#5], %0.6   !
Prom 0:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    envir, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <env->
  lgl$-           %0.4  = Is                       %0.3, list
  lgl$-           %0.5  = AsLogical                %0.4
  lgl$#-          %0.6  = Identical                %0.5, true
  void                    Branch                   %0.6 -> BB2 (if true) | BB7 (if false)
BB2   <- [0]
  void                    Nop                !     
  lgl$-           %2.1  = %0.5
  goto BB3
BB7   <- [0]
  val?^ | miss    %7.0  = LdVar              eR    envir, e0.0
  void                    Visible            v     
  val?            %7.2  = Force<wrapped>     !     %7.0, e0.0   <env->
  lgl$-           %7.3  = Is                       %7.2, pairlist
  lgl$-           %7.4  = AsLogical                %7.3
  lgl$-           %7.5  = LOr                      %0.5, %7.4
  lgl$-           %7.6  = %7.5
  goto BB3
BB3   <- [2, 7]
  lgl$-           %3.0  = Phi                      %7.6:BB7, %2.1:BB2
  lgl$-           %3.1  = %3.0
  lgl$#-          %3.2  = CheckTrueFalse     e     %3.1
  void                    Branch                   %3.2 -> BB6 (if true) | BB4 (if false)
BB6   <- [3]
  (cls|spec|blt)  %6.0  = LdFun              !     parent.frame, e0.0
  val?            %6.1  = Call               !     %6.0() e0.0   <val?_>
  val?            %6.2  = %6.1
  goto BB5
BB4   <- [3]
  (cls|spec|blt)  %4.0  = LdFun              !     baseenv, <0x5638b9a81278>, e0.0
  val?            %4.1  = Call               !     %4.0() e0.0   <env->
  val?            %4.2  = %4.1
  goto BB5
BB5   <- [4, 6]
  val?            %5.0  = Phi                      %4.2:BB4, %6.2:BB6
  val?            %5.1  = %5.0
  void                    Return             l     %5.1

│ eval[0x5638bbd831c0]                                                         │
└──────────────────────────────────────────────────────────────────────────────┘
