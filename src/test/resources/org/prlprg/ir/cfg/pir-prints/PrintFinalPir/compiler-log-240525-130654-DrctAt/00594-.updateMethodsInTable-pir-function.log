
┌──────────────────────────────────────────────────────────────────────────────┐
│ .updateMethodsInTable[0x5638b9f96180]                                        │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;NonRefl0,NonRefl1,NonRefl2,!Obj1,!Obj2│
│ Properties:                                                                  │
├────── Final PIR Version
.updateMethodsInTable[0x5638b9f96180]
BB0
  val?^           %0.0  = LdArg                    2
  val?^           %0.1  = LdArg                    1
  val?^           %0.2  = LdArg                    0
  val?^ | miss    %0.3  = LdVar              eR    environment, <env 0x5638ba074378>
  lgl$#-          %0.4  = Identical                %0.3, function(fun=NULL) <(rir::DispatchTable*)0x563|...
  void                    Branch                   %0.4 -> BB60 (if true) | BB61 (if false)
BB60   <- [0]
  env             e60.0 = MkEnv              l     generic=%0.2, where=%0.1, attach=%0.0, parent=<env 0x5638ba074378>, context 1
  val?            %60.1 = Force!<lazy>       !vr   %0.2,    <cls>
  prom-           %60.2 = MkArg                    %60.1, .updateMethodsInTable[0x5638b9f96180]_p0 (!refl), 
  val?            %60.3 = StaticCall         !v    environment[0x5638bbc47dc0](%60.2) e60.0   <env->
  void                    StVar              lW    fenv, %60.3, e60.0
  val?^ | miss    %60.5 = LdVar              eR    identical, e60.0
  lgl$#-          %60.6 = Identical                %60.5, function(x, y, num.eq=TRUE, single.NA=TRUE, at|...
  void                    Branch                   %60.6 -> BB62 (if true) | BB63 (if false)
BB61   <- [0]
  env             e61.0 = (MkEnv)            l     generic=%0.2, where=%0.1, attach=%0.0, parent=<env 0x5638ba074378>, context 1
  fs              %61.1 = FrameState         R     0x5638b9d627c0+0: [], env=e61.0
  void                    Deopt              !v    %61.1, CallTarget@0x5638ba8b9a80[Call#0], %0.3
BB62   <- [60]
  prom-           %62.0 = MkArg                    unboundValue, .updateMethodsInTable[0x5638b9f96180]_p1, e60.0
  ct              %62.1 = PushContext        lCL   %62.0, "reset", identical(attach, "reset"), function(x, y, num.eq=TRUE, single.NA=TRUE, at|..., e60.0
  val?^           %62.2 = CastType                 up %62.0
  env             e62.3 = MkEnv              l     x=%62.2, y="reset", num.eq(miss)=true, single.NA(miss)=true, attrib.as.set(miss)=true, ignore.bytecode(miss)=true, ignore.environment(miss)=false, ignore.srcref(miss)=true, parent=R_BaseNamespace, context 1
  val?            %62.4 = Force!<lazy>       !vL   %62.2, e62.3   <val?>
  val?            %62.5 = CallBuiltin        !v    identical(%62.4, "reset", true, true, true, true, false, true) e62.3
  val?            %62.6 = PopContext         C     %62.5, %62.1   <lgl$->
  lgl$#-          %62.7 = IsType                   %62.6 isA lgl$-
  void                    Branch                   %62.7 -> BB64 (if true) | BB65 (if false)
BB63   <- [60]
  fs              %63.0 = FrameState         R     0x5638b9d627c0+46: [], env=e60.0
  void                    Deopt              !v    %63.0, CallTarget@0x5638ba8b9a80[Call#1], %60.5   !
BB64   <- [62]
  lgl$-           %64.0 = CastType           d     dn %62.6
  void                    StVar              lW    reset, %64.0, e60.0
  (cls|spec|blt)  %64.2 = LdFun              !v    $, <0x5638b9a6cc10>, e60.0
  prom-           %64.3 = MkArg                    unboundValue, .updateMethodsInTable[0x5638b9f96180]_p2, e60.0
  prom-           %64.4 = MkArg                    unboundValue, .updateMethodsInTable[0x5638b9f96180]_p3, e60.0
  val?            %64.5 = Call               !v    %64.2(%64.3, %64.4) e60.0   <env->
  lgl$-           %64.6 = Is                       %64.5, NULL
  void                    StVar              lW    mtable, %64.5, e60.0
  lgl$#-          %64.8 = CheckTrueFalse     e     %64.6
  void                    Branch                   %64.8 -> BB58 (if true) | BB9 (if false)
BB65   <- [62]
  fs              %65.0 = FrameState         R     0x5638b9d627c0+83: [%62.6], env=e60.0
  void                    Deopt              !v    %65.0, Typecheck@0x5638ba8b9a80[Type#3], %62.6   !
BB58   <- [64]
  (cls|spec|blt)  %58.0 = LdFun              !v    .setupMethodsTables, e60.0
  fs              %58.1 = FrameState         R     0x5638b9d627c0+171: [%58.0], env=e60.0
  void                    Deopt              !v    %58.1, DeadCall@0x5638ba8b9a80[Call#3], %58.0   !
BB9   <- [64]
  val?^ | miss    %9.0  = LdVar              eR    reset, e60.0
  lgl$#-          %9.1  = IsType                   %9.0 isA lgl$-
  void                    Branch                   %9.1 -> BB66 (if true) | BB67 (if false)
BB66   <- [9]
  lgl$-           %66.0 = CastType           d     dn %9.0
  lgl$-           %66.1 = Not                d     %66.0, elided
  lgl$#-          %66.2 = CheckTrueFalse     e     %66.1
  void                    Branch                   %66.2 -> BB45 (if true) | BB10 (if false)
BB67   <- [9]
  void                    Nop                !     
  val?^ | miss    %67.1 = %9.0
  dr              %67.2 = Typecheck@0x5638ba8b9a80[Type#10]
  goto BB7
BB45   <- [66]
  val?^ | miss    %45.0 = LdVar              eR    as.environment, e60.0
  lgl$#-          %45.1 = Identical                <blt as.environment>, %45.0   <true>
  void                    Branch                   %45.1 -> BB68 (if true) | BB69 (if false)
BB10   <- [66]
  void                    Nop                !     
  goto BB11
BB7   <- [67, 69]
  val?^ | miss    %7.0  = Phi                      %67.1:BB67, %69.1:BB69
  val?^ | miss    %7.1  = %7.0
  dr              %7.2  = Phi                      %67.2:BB67, %69.2:BB69
  dr              %7.3  = %7.2
  fs              %7.4  = FrameState         R     0x5638b9d627c0+150: [%64.5], env=e60.0
  void                    Deopt              !v    %7.4, %7.3, %7.1   !
BB68   <- [45]
  val?^ | miss    %68.0 = LdVar              eR    where, e60.0
  val?            %68.1 = Force!<lazy>       !v    %68.0, e60.0   <env->
  val?            %68.2 = CallBuiltin        !v    as.environment(%68.1) e60.0   <env->
  void                    StVar              lW    env, %68.2, e60.0
  val?^ | miss    %68.4 = LdVar              eR    .TableMetaName, e60.0
  lgl$#-          %68.5 = Identical                %68.4, function(name, package) <(rir::DispatchTable*)|...
  void                    Branch                   %68.5 -> BB78 (if true) | BB79 (if false)
BB69   <- [45]
  void                    Nop                !     
  lgl$#-          %69.1 = %45.1
  dr              %69.2 = DeadBranchReached@0x5638ba8b9a80[Test#0]
  goto BB7
BB11   <- [10, 56, 114]
  val?^ | miss    %11.0 = LdVar              eR    length, e60.0
  lgl$#-          %11.1 = Identical                <blt length>, %11.0   <true>
  void                    Branch                   %11.1 -> BB70 (if true) | BB71 (if false)
BB78   <- [68]
  prom-           %78.0 = MkArg                    unboundValue, .updateMethodsInTable[0x5638b9f96180]_p23, e60.0
  prom-           %78.1 = MkArg                    unboundValue, .updateMethodsInTable[0x5638b9f96180]_p26, e60.0
  ct              %78.2 = PushContext        lCL   %78.0, %78.1, .TableMetaName(@(generic, generic), @(generic,|..., function(name, package) <(rir::DispatchTable*)|..., e60.0
  val?^           %78.3 = CastType                 up %78.1
  val?^           %78.4 = CastType                 up %78.0
  val?^ | miss    %78.5 = LdVar              eR    methodsPackageMetaName, <env 0x5638ba074378>
  lgl$#-          %78.6 = Identical                %78.5, function(prefix, name, package="") <(rir::Disp|...
  void                    Branch                   %78.6 -> BB80 (if true) | BB81 (if false)
BB79   <- [68]
  fs              %79.0 = FrameState         R     0x5638b9d627c0+389: [], env=e60.0
  void                    Deopt              !v    %79.0, CallTarget@0x5638ba8b9a80[Call#6], %68.4   !
BB70   <- [11]
  (cls|spec|blt)  %70.0 = LdFun              !v    @, <0x5638b9a6cbd8>, e60.0
  prom-           %70.1 = MkArg                    unboundValue, .updateMethodsInTable[0x5638b9f96180]_p4, e60.0
  prom-           %70.2 = MkArg                    unboundValue, .updateMethodsInTable[0x5638b9f96180]_p5, e60.0
  val?            %70.3 = Call               !v    %70.0(%70.1, %70.2) e60.0   <vec->
  lgl$#-          %70.4 = IsType                   %70.3 isA val?-
  void                    Branch                   %70.4 -> BB72 (if true) | BB73 (if false)
BB71   <- [11]
  fs              %71.0 = FrameState         R     0x5638b9d627c0+582: [], env=e60.0
  void                    Deopt              !v    %71.0, DeadBranchReached@0x5638ba8b9a80[Test#2], %11.1   !
BB80   <- [78]
  env             e80.0 = MkEnv              l     name=%78.4, package=%78.3, parent=<env 0x5638ba074378>, context 1
  prom-           %80.1 = MkArg                    unboundValue, .updateMethodsInTable[0x5638b9f96180]_p39, e80.0
  ct              %80.2 = PushContext        lCL   "T", %80.1, methodsPackageMetaName("T", paste(name, packag|..., function(prefix, name, package="") <(rir::Disp|..., e80.0
  val?^           %80.3 = CastType                 up %80.1
  val?^ | miss    %80.4 = LdVar              eR    .Call, <env 0x5638ba074378>
  lgl$#-          %80.5 = Identical                <blt .Call>, %80.4   <true>
  void                    Branch                   %80.5 -> BB94 (if true) | BB95 (if false)
BB81   <- [78]
  fs              %81.0 = FrameState         R     0x5638b9d627c0+426: [], env=e60.0
  env             e81.1 = (MkEnv)            l     name=%78.4, package=%78.3, parent=<env 0x5638ba074378>, context 1
  fs              %81.2 = FrameState         R     0x5638ba772030+0: [], env=e81.1, next=%81.0
  void                    Deopt              !v    %81.2, CallTarget@0x5638bdd80978[Call#0], %78.5   !
BB72   <- [70]
  val?-           %72.0 = CastType           d     dn %70.3   <vec->
  (int|real)$-    %72.1 = CallSafeBuiltin    wed   length(%72.0)    <int$->
  lgl$#-          %72.2 = IsType                   %72.1 isA int$-
  void                    Branch                   %72.2 -> BB74 (if true) | BB75 (if false)
BB73   <- [70]
  fs              %73.0 = FrameState         R     0x5638b9d627c0+679: [<blt length>, %70.3], env=e60.0
  void                    Deopt              !v    %73.0, Typecheck@0x5638ba8b9a80[Type#34], %70.3   !
BB94   <- [80]
  val?^ | miss    %94.0 = LdVar              eR    C_R_methodsPackageMetaName, <env 0x5638ba074378>
  env             e94.1 = MkEnv              l     prefix="T", name=%80.3, package(miss)="", parent=<env 0x5638ba074378>, context 1
  val?            %94.2 = Force!<value>      !v    %94.0, e94.1   <vec>
  val?^ | miss    %94.3 = LdVar              eR    prefix, e94.1
  val?            %94.4 = Force!<value>      !v    %94.3, e94.1   <str$->
  val?^ | miss    %94.5 = LdVar              eR    name, e94.1
  val?            %94.6 = Force!<lazy>       !v    %94.5, e94.1   <str$->
  val?^ | miss    %94.7 = LdVar              eR    package, e94.1
  val?            %94.8 = Force!<lazy>       !v    %94.7, e94.1   <str$->
  val?            %94.9 = CallBuiltin        !v    .Call(%94.2, %94.4, %94.6, %94.8) e94.1   <str$->
  val?            %94.10 = PopContext         C     %94.9, %80.2   <str$->
  val?            %94.11 = PopContext         C     %94.10, %78.2   <str$->
  void                    StVar              lW    tname, %94.11, e60.0
  val?^ | miss    %94.13 = LdVar              eR    env, e60.0
  lgl$#-          %94.14 = IsType                   %94.13 isA val?~- | miss
  void                    Branch                   %94.14 -> BB102 (if true) | BB103 (if false)
BB95   <- [80]
  fs              %95.0 = FrameState         R     0x5638b9d627c0+426: [], env=e60.0
  fs              %95.1 = FrameState         R     0x5638ba772030+37: [], env=e80.0, next=%95.0
  env             e95.2 = (MkEnv)            l     prefix="T", name=%80.3, package(miss)="", parent=<env 0x5638ba074378>, context 1
  fs              %95.3 = FrameState         R     0x5638bc218260+0: [], env=e95.2, next=%95.1
  void                    Deopt              !v    %95.3, DeadBranchReached@0x5638bccf8f10[Test#0], %80.5   !
BB74   <- [72]
  int$-           %74.0 = CastType           d     dn %72.1
  lgl$#-          %74.1 = CheckTrueFalse     e     %74.0
  void                    Branch                   %74.1 -> BB28 (if true) | BB18 (if false)
BB75   <- [72]
  void                    Nop                !     
  (int|real)$-    %75.1 = %72.1
  dr              %75.2 = Typecheck@0x5638ba8b9a80[Type#35]
  goto BB16
BB102   <- [94]
  val?~- | miss   %102.0 = CastType           d     dn %94.13
  val?-           %102.1 = Force!<value>            %102.0,    <env->
  lgl$#-          %102.2 = IsType                   %102.1 isA val+   <true>
  void                    Branch                   %102.2 -> BB104 (if true) | BB105 (if false)
BB103   <- [94]
  void                    Nop                !     
  val?^ | miss    %103.1 = %94.13
  dr              %103.2 = Typecheck@0x5638ba8b9a80[Type#21]
  goto BB52
BB28   <- [74]
  val?^ | miss    %28.0 = LdVar              eR    as.list, e60.0
  lgl$#-          %28.1 = Identical                %28.0, function(x, ...) <(rir::DispatchTable*)0x5638b|...
  void                    Branch                   %28.1 -> BB76 (if true) | BB77 (if false)
BB18   <- [74]
  void                    Nop                !     
  goto BB19
BB16   <- [75, 77]
  val?^ | miss    %16.0 = Phi                      %75.1:BB75, %77.1:BB77
  val?^ | miss    %16.1 = %16.0
  dr              %16.2 = Phi                      %75.2:BB75, %77.2:BB77
  dr              %16.3 = %16.2
  fs              %16.4 = FrameState         R     0x5638b9d627c0+701: [%72.1], env=e60.0
  void                    Deopt              !v    %16.4, %16.3, %16.1   !
BB104   <- [102]
  val             %104.0 = ChkMissing         e     %94.11
  lgl$#-          %104.1 = IsType                   %104.0 isA val?~- | miss
  void                    Branch                   %104.1 -> BB108 (if true) | BB109 (if false)
BB105   <- [102]
  void                    Nop                !     
  lgl$#-          %105.1 = %102.2
  dr              %105.2 = DeadBranchReached@0x5638ba8b9a80[Test#1]
  goto BB52
BB52   <- [103, 105, 109]
  val?^ | miss    %52.0 = Phi                      %103.1:BB103, %105.1:BB105, %109.1:BB109
  val?^ | miss    %52.1 = %52.0
  dr              %52.2 = Phi                      %103.2:BB103, %105.2:BB105, %109.2:BB109
  dr              %52.3 = %52.2
  fs              %52.4 = FrameState         R     0x5638b9d627c0+440: [], env=e60.0
  void                    Deopt              !v    %52.4, %52.3, %52.1   !
BB76   <- [28]
  (cls|spec|blt)  %76.0 = LdFun              !v    @, <0x5638b9a6cbd8>, e60.0
  prom-           %76.1 = MkArg                    unboundValue, .updateMethodsInTable[0x5638b9f96180]_p15, e60.0
  prom-           %76.2 = MkArg                    unboundValue, .updateMethodsInTable[0x5638b9f96180]_p16, e60.0
  val?            %76.3 = Call               !v    %76.0(%76.1, %76.2) e60.0   <vec$->
  val?            %76.4 = StaticCall         !v    as.list[0x5638bac9a9e0](%76.3) { 0 } e60.0   <vec$->
  void                    StVar              lW    groups, %76.4, e60.0
  val?^ | miss    %76.6 = LdVar              eR    vector, e60.0
  lgl$#-          %76.7 = Identical                %76.6, function(mode="logical", length=0L) <(rir::Dis|...
  void                    Branch                   %76.7 -> BB88 (if true) | BB89 (if false)
BB77   <- [28]
  void                    Nop                !     
  val?^ | miss    %77.1 = %28.0
  dr              %77.2 = CallTarget@0x5638ba8b9a80[Call#13]
  goto BB16
BB19   <- [18, 120]
  val?^ | miss    %19.0 = LdVar              eR    is, e60.0
  lgl$#-          %19.1 = Identical                %19.0, function(object, class2) <(rir::DispatchTable*|...
  void                    Branch                   %19.1 -> BB82 (if true) | BB83 (if false)
BB108   <- [104]
  val-            %108.0 = CastType           d     dn %104.0   <str$->
  val?            %108.1 = Extract2_1D        wed   %102.1, %108.0, elided   <env->
  lgl$-           %108.2 = Is                       %108.1, NULL
  void                    StVar              lW    tt, %108.1, e60.0
  lgl$-           %108.4 = Not                d     %108.2, elided
  lgl$#-          %108.5 = CheckTrueFalse     e     %108.4
  void                    Branch                   %108.5 -> BB57 (if true) | BB56 (if false)
BB109   <- [104]
  void                    Nop                !     
  val             %109.1 = %104.0
  dr              %109.2 = Typecheck@0x5638ba8b9a80[Type#23]
  goto BB52
BB88   <- [76]
  val?^ | miss    %88.0 = LdVar              eR    length, e60.0
  lgl$#-          %88.1 = Identical                %88.0, <blt length>
  void                    Branch                   %88.1 -> BB92 (if true) | BB93 (if false)
BB89   <- [76]
  void                    Nop                !     
  val?^ | miss    %89.1 = %76.6
  dr              %89.2 = CallTarget@0x5638ba8b9a80[Call#15]
  goto BB29
BB82   <- [19]
  prom-           %82.0 = MkArg                    unboundValue, .updateMethodsInTable[0x5638b9f96180]_p6, e60.0
  val?            %82.1 = Call               !v    function(object, class2) <(rir::DispatchTable*|...(%82.0, "groupGenericFunction") e60.0   <lgl$->
  lgl$#-          %82.2 = IsType                   %82.1 isA lgl$-
  void                    Branch                   %82.2 -> BB84 (if true) | BB85 (if false)
BB83   <- [19]
  fs              %83.0 = FrameState         R     0x5638b9d627c0+1177: [], env=e60.0
  void                    Deopt              !v    %83.0, CallTarget@0x5638ba8b9a80[Call#21], %19.0   !
BB57   <- [108]
  val?^ | miss    %57.0 = LdVar              eR    .mergeMethodsTable, e60.0
  lgl$#-          %57.1 = Identical                %57.0, function(generic, table, newtable, add=TRUE) <|...
  void                    Branch                   %57.1 -> BB114 (if true) | BB115 (if false)
BB56   <- [108]
  void                    Nop                !     
  goto BB11
BB92   <- [88]
  val             %92.0 = ChkMissing         e     %76.4
  lgl$#-          %92.1 = IsType                   %92.0 isA val?~- | miss
  void                    Branch                   %92.1 -> BB96 (if true) | BB97 (if false)
BB93   <- [88]
  void                    Nop                !     
  val?^ | miss    %93.1 = %88.0
  dr              %93.2 = CallTarget@0x5638ba8b9a80[Call#16]
  goto BB29
BB29   <- [89, 93, 97]
  val?^ | miss    %29.0 = Phi                      %89.1:BB89, %93.1:BB93, %97.1:BB97
  val?^ | miss    %29.1 = %29.0
  dr              %29.2 = Phi                      %89.2:BB89, %93.2:BB93, %97.2:BB97
  dr              %29.3 = %29.2
  fs              %29.4 = FrameState         R     0x5638b9d627c0+763: [], env=e60.0
  void                    Deopt              !v    %29.4, %29.3, %29.1   !
BB84   <- [82]
  lgl$-           %84.0 = CastType           d     dn %82.1
  lgl$#-          %84.1 = CheckTrueFalse     e     %84.0
  void                    Branch                   %84.1 -> BB27 (if true) | BB24 (if false)
BB85   <- [82]
  void                    Nop                !     
  val?            %85.1 = %82.1
  dr              %85.2 = Typecheck@0x5638ba8b9a80[Type#63]
  goto BB22
BB114   <- [57]
  prom-           %114.0 = MkArg                    unboundValue, .updateMethodsInTable[0x5638b9f96180]_p29, e60.0
  prom-           %114.1 = MkArg                    unboundValue, .updateMethodsInTable[0x5638b9f96180]_p30, e60.0
  prom-           %114.2 = MkArg                    unboundValue, .updateMethodsInTable[0x5638b9f96180]_p31 (!refl), e60.0
  prom-           %114.3 = MkArg                    unboundValue, .updateMethodsInTable[0x5638b9f96180]_p32, e60.0
  val?            %114.4 = Call               !v    function(generic, table, newtable, add=TRUE) <|...(%114.0, %114.1, %114.2, %114.3) e60.0
  goto BB11
BB115   <- [57]
  fs              %115.0 = FrameState         R     0x5638b9d627c0+517: [%108.1], env=e60.0
  void                    Deopt              !v    %115.0, CallTarget@0x5638ba8b9a80[Call#9], %57.0   !
BB96   <- [92]
  val-            %96.0 = CastType           d     dn %92.0   <vec$->
  (int|real)$-    %96.1 = CallSafeBuiltin    wed   length(%96.0)    <int$->
  lgl$#-          %96.2 = IsType                   %96.1 isA int$-
  void                    Branch                   %96.2 -> BB98 (if true) | BB99 (if false)
BB97   <- [92]
  void                    Nop                !     
  val             %97.1 = %92.0
  dr              %97.2 = Typecheck@0x5638ba8b9a80[Type#40]
  goto BB29
BB27   <- [84]
  (cls|spec|blt)  %27.0 = LdFun              !v    .checkGroupSigLength, e60.0
  fs              %27.1 = FrameState         R     0x5638b9d627c0+1235: [%27.0], env=e60.0
  void                    Deopt              !v    %27.1, DeadCall@0x5638ba8b9a80[Call#22], %27.0   !
BB24   <- [84]
  val?^ | miss    %24.0 = LdVar              eR    .resetInheritedMethods, e60.0
  lgl$#-          %24.1 = Identical                %24.0, function(fenv, mtable) <(rir::DispatchTable*)0|...
  void                    Branch                   %24.1 -> BB86 (if true) | BB87 (if false)
BB22   <- [85, 87]
  val?^ | miss    %22.0 = Phi                      %85.1:BB85, %87.1:BB87
  val?^ | miss    %22.1 = %22.0
  dr              %22.2 = Phi                      %85.2:BB85, %87.2:BB87
  dr              %22.3 = %22.2
  fs              %22.4 = FrameState         R     0x5638b9d627c0+1214: [%82.1], env=e60.0
  void                    Deopt              !v    %22.4, %22.3, %22.1   !
BB98   <- [96]
  int$-           %98.0 = CastType           d     dn %96.1
  vec-            %98.1 = CallSafeBuiltin    wed   vector("list", %98.0)    <vec$->
  void                    StVar              lW    generics, %98.1, e60.0
  val?^ | miss    %98.3 = LdVar              eR    seq_along, e60.0
  lgl$#-          %98.4 = Identical                <blt seq_along>, %98.3   <true>
  void                    Branch                   %98.4 -> BB100 (if true) | BB101 (if false)
BB99   <- [96]
  fs              %99.0 = FrameState         R     0x5638b9d627c0+800: [], env=e60.0
  prom-           %99.1 = MkArg                    unboundValue, .updateMethodsInTable[0x5638b9f96180]_p17, e60.0
  val?^           %99.2 = CastType                 up %99.1
  env             e99.3 = (MkEnv)            l     length=%99.2, mode="list", parent=R_BaseNamespace, context 0
  fs              %99.4 = FrameState         R     0x5638bb967640+23: ["list"], env=e99.3, next=%99.0
  fs              %99.5 = FrameState         R     0x5638bac40c00+32(pr): [%96.1], env=e60.0, next=%99.4
  void                    Deopt              !v    %99.5, Typecheck@0x5638ba8b9a80[Type#41], %96.1   !
BB86   <- [24]
  prom-           %86.0 = MkArg                    unboundValue, .updateMethodsInTable[0x5638b9f96180]_p7, e60.0
  prom-           %86.1 = MkArg                    unboundValue, .updateMethodsInTable[0x5638b9f96180]_p8, e60.0
  val?            %86.2 = StaticCall         !v    .resetInheritedMethods[0x5638bc8d89c0](%86.0, %86.1) e60.0
  val?^ | miss    %86.3 = LdVar              eR    mtable, e60.0
  lgl$#-          %86.4 = IsType                   %86.3 isA val?~- | miss
  void                    Branch                   %86.4 -> BB90 (if true) | BB91 (if false)
BB87   <- [24]
  void                    Nop                !     
  val?^ | miss    %87.1 = %24.0
  dr              %87.2 = CallTarget@0x5638ba8b9a80[Call#31]
  goto BB22
BB100   <- [98]
  val?            %100.0 = CallBuiltin        !v    seq_along(%96.0) e60.0   <int$->
  lgl$#-          %100.1 = IsType                   %100.0 isA int$-
  void                    Branch                   %100.1 -> BB106 (if true) | BB107 (if false)
BB101   <- [98]
  fs              %101.0 = FrameState         R     0x5638b9d627c0+814: [], env=e60.0
  void                    Deopt              !v    %101.0, DeadBranchReached@0x5638ba8b9a80[Test#3], %98.4   !
BB90   <- [86]
  val?~- | miss   %90.0 = CastType           d     dn %86.3
  void                    Visible            v     
  val?-           %90.2 = Force!<value>            %90.0,    <env->
  void                    Return             l     %90.2
BB91   <- [86]
  fs              %91.0 = FrameState         R     0x5638b9d627c0+1507: [%86.2], env=e60.0
  void                    Deopt              !v    %91.0, Typecheck@0x5638ba8b9a80[Type#82], %86.3   !
BB106   <- [100]
  int$-           %106.0 = CastType           d     dn %100.0
  int$-           %106.1 = Inc                      0L
  lgl$-           %106.2 = Lt                 d     1L, %106.1, elided   <false>
  lgl$#-          %106.3 = Identical                %106.2, true
  void                    Branch                   %106.3 -> BB111 (if true) | BB110 (if false)
BB107   <- [100]
  void                    Nop                !     
  val?            %107.1 = %100.0
  dr              %107.2 = Typecheck@0x5638ba8b9a80[Type#45]
  goto BB35
BB111   <- [106]
  void                    Nop                !     
  lgl$#-          %111.1 = %106.3
  dr              %111.2 = DeadBranchReached@0x5638ba8b9a80[Test#4]
  goto BB35
BB110   <- [106]
  int$-           %110.0 = Extract2_1D        wed   %106.0, %106.1, elided
  void                    StVar              lW    i, %110.0, e60.0
  val?^ | miss    %110.2 = LdVar              eR    getGeneric, e60.0
  lgl$#-          %110.3 = Identical                %110.2, function(f, mustFind=FALSE, where, package="")|...
  void                    Branch                   %110.3 -> BB112 (if true) | BB113 (if false)
BB35   <- [107, 111]
  val?^ | miss    %35.0 = Phi                      %107.1:BB107, %111.1:BB111
  val?^ | miss    %35.1 = %35.0
  dr              %35.2 = Phi                      %107.2:BB107, %111.2:BB111
  dr              %35.3 = %35.2
  fs              %35.4 = FrameState         R     0x5638b9d627c0+905: [%100.0], env=e60.0
  void                    Deopt              !v    %35.4, %35.3, %35.1   !
BB112   <- [110]
  prom-           %112.0 = MkArg                    unboundValue, .updateMethodsInTable[0x5638b9f96180]_p19, e60.0
  val?            %112.1 = StaticCall         !v    getGeneric[0x5638bc4d0d10](%112.0) e60.0   <cls>
  val?^ | miss    %112.2 = LdVar              eR    generics !upd, e60.0
  lgl$#-          %112.3 = IsType                   %112.2 isA val?~- | miss
  void                    Branch                   %112.3 -> BB116 (if true) | BB117 (if false)
BB113   <- [110]
  fs              %113.0 = FrameState         R     0x5638b9d627c0+950: [%106.0, 1L, %106.1], env=e60.0
  void                    Deopt              !v    %113.0, CallTarget@0x5638ba8b9a80[Call#18], %110.2   !
BB116   <- [112]
  val?~- | miss   %116.0 = CastType           d     dn %112.2
  val?-           %116.1 = Force!<value>            %116.0,    <vec$->
  val?^ | miss    %116.2 = LdVar              eR    i, e60.0
  lgl$#-          %116.3 = IsType                   %116.2 isA int$-
  void                    Branch                   %116.3 -> BB118 (if true) | BB119 (if false)
BB117   <- [112]
  void                    Nop                !     
  val?^ | miss    %117.1 = %112.2
  dr              %117.2 = Typecheck@0x5638ba8b9a80[Type#51]
  goto BB39
BB118   <- [116]
  int$-           %118.0 = CastType           d     dn %116.2
  val?            %118.1 = Subassign2_1D      !v    %112.1, %116.1, %118.0, e60.0
  void                    StVar              lW    generics, %118.1, e60.0
  int$-           %118.3 = Inc                      %106.1
  lgl$-           %118.4 = Lt                 d     1L, %118.3, elided
  lgl$#-          %118.5 = Identical                %118.4, true
  void                    Branch                   %118.5 -> BB44 (if true) | BB43 (if false)
BB119   <- [116]
  void                    Nop                !     
  val?^ | miss    %119.1 = %116.2
  dr              %119.2 = Typecheck@0x5638ba8b9a80[Type#52]
  goto BB39
BB39   <- [117, 119]
  val?^ | miss    %39.0 = Phi                      %117.1:BB117, %119.1:BB119
  val?^ | miss    %39.1 = %39.0
  dr              %39.2 = Phi                      %117.2:BB117, %119.2:BB119
  dr              %39.3 = %39.2
  fs              %39.4 = FrameState         R     0x5638b9d627c0+982: [%106.0, 1L, %106.1, %112.1], env=e60.0
  void                    Deopt              !v    %39.4, %39.3, %39.1   !
BB44   <- [118]
  val?^ | miss    %44.0 = LdVar              eR    .checkGroupSigLength, e60.0
  lgl$#-          %44.1 = Identical                %44.0, function(gnames, generics=lapply(gnames, getGe|...
  void                    Branch                   %44.1 -> BB120 (if true) | BB121 (if false)
BB43   <- [118]
  int$-           %43.0 = Extract2_1D        wed   %106.0, %118.3, elided
  void                    StVar              lW    i, %43.0, e60.0
  (cls|spec|blt)  %43.2 = LdFun              !v    getGeneric, e60.0
  fs              %43.3 = FrameState         R     0x5638b9d627c0+1059: [%106.0, 1L, %118.3, %43.2], env=e60.0
  void                    Deopt              !v    %43.3, DeadCall@0x5638ba8b9a80[Call#19], %43.2   !
BB120   <- [44]
  prom-           %120.0 = MkArg                    unboundValue, .updateMethodsInTable[0x5638b9f96180]_p21, e60.0
  prom-           %120.1 = MkArg                    unboundValue, .updateMethodsInTable[0x5638b9f96180]_p22 (!refl), e60.0
  val?            %120.2 = Call               !v    function(gnames, generics=lapply(gnames, getGe|...(%120.0, %120.1) e60.0
  goto BB19
BB121   <- [44]
  fs              %121.0 = FrameState         R     0x5638b9d627c0+1025: [%106.0, 1L, %106.1], env=e60.0
  void                    Deopt              !v    %121.0, CallTarget@0x5638ba8b9a80[Call#20], %44.0   !
Prom 0:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    generic, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    attach, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <lgl$->
  void                    Return             l     %0.3
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fenv, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 3:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    .MTable, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 4:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    generic, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 5:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    group, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 6:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    generic, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 7:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fenv, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 8:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    mtable, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 15:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    generic, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 16:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    group, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 17:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     length, <0x5638b9a6da90>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .updateMethodsInTable[0x5638b9f96180]_p18, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <int$->
  void                    Return             l     %0.3
Prom 18:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    groups, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <vec$->
  void                    Return             l     %0.3
Prom 19:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    groups, e0.0
  val?            %0.2  = Force<value>       !v    %0.1, e0.0   <vec$->
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <true>
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    i, e0.0
  val?            %2.1  = Force<value>       !v    %2.0, e0.0   <int$->
  val?            %2.2  = %2.1
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, .updateMethodsInTable[0x5638b9f96180]_p20, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.2:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract2_1D        !v    %0.2, %3.1, e0.0   <str$->
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 20:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    i, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 21:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    groups, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <vec$->
  void                    Return             l     %0.3
Prom 22:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    generics, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <vec$->
  void                    Return             l     %0.3
Prom 23:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, <0x5638b9a6cbd8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .updateMethodsInTable[0x5638b9f96180]_p24, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .updateMethodsInTable[0x5638b9f96180]_p25, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <str$+>
  void                    Return             l     %0.4
Prom 24:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    generic, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 25:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    generic, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 26:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, <0x5638b9a6cbd8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .updateMethodsInTable[0x5638b9f96180]_p27, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .updateMethodsInTable[0x5638b9f96180]_p28, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <str$->
  void                    Return             l     %0.4
Prom 27:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    generic, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 28:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    package, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 29:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    generic, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 30:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    mtable, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 31:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    tt, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 32:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    attach, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <lgl$->
  void                    Return             l     %0.3
Prom 39:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     paste, <0x5638b9d63da8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .updateMethodsInTable[0x5638b9f96180]_p40, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .updateMethodsInTable[0x5638b9f96180]_p41, e0.0
  val?            %0.4  = NamedCall          !     %0.1(%0.2, %0.3, sep=":") e0.0   <str$->
  void                    Return             l     %0.4
Prom 40:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    name, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str$+>
  void                    Return             l     %0.3
Prom 41:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    package, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3

│ .updateMethodsInTable[0x5638b9f96180]                                        │
└──────────────────────────────────────────────────────────────────────────────┘
