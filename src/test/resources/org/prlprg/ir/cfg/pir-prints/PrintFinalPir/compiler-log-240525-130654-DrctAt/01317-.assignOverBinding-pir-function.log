
┌──────────────────────────────────────────────────────────────────────────────┐
│ .assignOverBinding[0x5638bbb5bdd0]                                           │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;Eager3,NonRefl0,NonRefl1,NonRefl2,NonRefl3,!Obj0,!Obj2,!Obj3│
│ Properties:  ForceOrd: 3                                                     │
├────── Final PIR Version
.assignOverBinding[0x5638bbb5bdd0]
BB0
  val?~+          %0.0  = LdArg                    3
  val?^           %0.1  = LdArg                    2
  val?^           %0.2  = LdArg                    1
  val?^           %0.3  = LdArg                    0
  val+            %0.4  = Force<value>             %0.0,    <lgl$->
  lgl$#-          %0.5  = CheckTrueFalse     we    %0.4
  void                    Branch                   %0.5 -> BB42 (if true) | BB3 (if false)
BB42   <- [0]
  env             e42.0 = (MkEnv)            l     what=%0.3, value=%0.2, where=%0.1, verbose=%0.0, parent=<env 0x5638ba074378>, context 1
  (cls|spec|blt)  %42.1 = LdFun              !v    getPackageName, <env 0x5638ba074378>
  fs              %42.2 = FrameState         R     0x5638bbc92fd0+30: [%42.1], env=e42.0
  void                    Deopt              !v    %42.2, DeadCall@0x5638bcb3f7e0[Call#0], %42.1
BB3   <- [0]
  val?^ | miss    %3.0  = LdVar              eR    options, <env 0x5638ba074378>
  lgl$#-          %3.1  = Identical                %3.0, function(...) <(rir::DispatchTable*)0x5638bb9d|...
  void                    Branch                   %3.1 -> BB44 (if true) | BB45 (if false)
BB44   <- [3]
  prom-           %44.0 = MkArg                    unboundValue, .assignOverBinding[0x5638bbb5bdd0]_p0 (!refl), 
  dots-           %44.1 = DotsList           l     warn=%44.0
  env             e44.2 = MkEnv              l     what=%0.3, value=%0.2, where=%0.1, verbose=%0.0, parent=<env 0x5638ba074378>, context 1
  ct              %44.3 = PushContext        lCL   %44.1, options(warn=-(1)), function(...) <(rir::DispatchTable*)0x5638bb9d|..., e44.2
  env             e44.4 = MkEnv              l     ...=%44.1, parent=R_BaseNamespace, context 1
  val?            %44.5 = NamedCall          !v    <blt options>(warn=%44.0) e44.4
  val?            %44.6 = PopContext         C     %44.5, %44.3   <vec$+>
  void                    StVar              lW    warnOpt, %44.6, e44.2
  (cls|spec|blt)  %44.8 = LdFun              !v    on.exit, <0x5638b9a6c270>, e44.2
  prom-           %44.9 = MkArg                    unboundValue, .assignOverBinding[0x5638bbb5bdd0]_p1, e44.2
  val?            %44.10 = Call               !v    %44.8(%44.9) e44.2
  val?^ | miss    %44.11 = LdVar              eR    is.function, e44.2
  lgl$#-          %44.12 = Identical                <blt is.function>, %44.11   <true>
  void                    Branch                   %44.12 -> BB46 (if true) | BB47 (if false)
BB45   <- [3]
  env             e45.0 = (MkEnv)            l     what=%0.3, value=%0.2, where=%0.1, verbose=%0.0, parent=<env 0x5638ba074378>, context 1
  fs              %45.1 = FrameState         R     0x5638bbc92fd0+15: [%0.5], env=e45.0
  void                    Deopt              !v    %45.1, CallTarget@0x5638bcb3f7e0[Call#6], %3.0
BB46   <- [44]
  val?^ | miss    %46.0 = LdVar              eR    value, e44.2
  val?            %46.1 = Force!<lazy>       !v    %46.0, e44.2   <cls>
  val?            %46.2 = CallBuiltin        !     is.function(%46.1) e44.2   <lgl$->
  lgl$#-          %46.3 = IsType                   %46.2 isA lgl$-
  void                    Branch                   %46.3 -> BB48 (if true) | BB49 (if false)
BB47   <- [44]
  fs              %47.0 = FrameState         R     0x5638bbc92fd0+255: [%44.10], env=e44.2
  void                    Deopt              !v    %47.0, DeadBranchReached@0x5638bcb3f7e0[Test#0], %44.12   !
BB48   <- [46]
  lgl$-           %48.0 = CastType           d     dn %46.2
  lgl$#-          %48.1 = CheckTrueFalse     e     %48.0
  void                    Branch                   %48.1 -> BB23 (if true) | BB8 (if false)
BB49   <- [46]
  void                    Nop                !     
  val?            %49.1 = %46.2
  dr              %49.2 = Typecheck@0x5638bcb3f7e0[Type#15]
  goto BB6
BB23   <- [48]
  val?^ | miss    %23.0 = LdVar              eR    environment, e44.2
  lgl$#-          %23.1 = Identical                %23.0, function(fun=NULL) <(rir::DispatchTable*)0x563|...
  void                    Branch                   %23.1 -> BB50 (if true) | BB51 (if false)
BB8   <- [48]
  void                    Nop                !     
  goto BB9
BB6   <- [49, 51]
  val?^ | miss    %6.0  = Phi                      %49.1:BB49, %51.1:BB51
  val?^ | miss    %6.1  = %6.0
  dr              %6.2  = Phi                      %49.2:BB49, %51.2:BB51
  dr              %6.3  = %6.2
  fs              %6.4  = FrameState         R     0x5638bbc92fd0+347: [%46.2], env=e44.2
  void                    Deopt              !v    %6.4, %6.3, %6.1   !
BB50   <- [23]
  val?^ | miss    %50.0 = LdVar              eR    value, e44.2
  val?            %50.1 = Force!<wrapped>    !v    %50.0, e44.2   <cls>
  prom-           %50.2 = MkArg                    %50.1, .assignOverBinding[0x5638bbb5bdd0]_p10 (!refl), 
  val?            %50.3 = StaticCall         !v    environment[0x5638bdee55d0](%50.2) e44.2   <env->
  lgl$-           %50.4 = Is                       %50.3, NULL
  void                    StVar              lW    fenv, %50.3, e44.2
  val             %50.6 = ChkMissing         e     %50.3
  lgl$#-          %50.7 = CheckTrueFalse     e     %50.4
  void                    Branch                   %50.7 -> BB39 (if true) | BB24 (if false)
BB51   <- [23]
  void                    Nop                !     
  val?^ | miss    %51.1 = %23.0
  dr              %51.2 = CallTarget@0x5638bcb3f7e0[Call#10]
  goto BB6
BB9   <- [8, 36]
  val?^ | miss    %9.0  = LdVar              eR    exists, e44.2
  lgl$#-          %9.1  = Identical                %9.0, function(x, where=-(1), envir=if(missing(frame|...
  void                    Branch                   %9.1 -> BB52 (if true) | BB53 (if false)
BB39   <- [50]
  val?^ | miss    %39.0 = LdVar              eR    baseenv, e44.2
  lgl$#-          %39.1 = Identical                <blt baseenv>, %39.0   <@?>
  void                    Branch                   %39.1 -> BB41 (if true) | BB40 (if false)
BB24   <- [50]
  void                    Nop                !     
  goto BB25
BB52   <- [9]
  prom-           %52.0 = MkArg                    unboundValue, .assignOverBinding[0x5638bbb5bdd0]_p3, e44.2
  prom-           %52.1 = MkArg                    unboundValue, .assignOverBinding[0x5638bbb5bdd0]_p4, e44.2
  val?            %52.2 = StaticCall         !     exists[0x5638bd1d6e20](%52.0, missingArg, %52.1, missingArg, missingArg, false) { 0 2n 5n } e44.2   <lgl$->
  lgl$#-          %52.3 = IsType                   %52.2 isA lgl$-
  void                    Branch                   %52.3 -> BB60 (if true) | BB61 (if false)
BB53   <- [9]
  fs              %53.0 = FrameState         R     0x5638bbc92fd0+817: [], env=e44.2
  void                    Deopt              !v    %53.0, CallTarget@0x5638bcb3f7e0[Call#18], %9.0   !
BB41   <- [39]
  val?            %41.0 = CallBuiltin        !v    baseenv() e44.2   <val?_>
  void                    StVar              lW    fenv, %41.0, e44.2
  goto BB25
BB40   <- [39]
  (cls|spec|blt)  %40.0 = LdFun              !v    baseenv, e44.2
  fs              %40.1 = FrameState         R     0x5638bbc92fd0+467: [%40.0], env=e44.2
  void                    Deopt              !v    %40.1, DeadCall@0x5638bcb3f7e0[Call#11], %40.0   !
BB25   <- [24, 41]
  val?^ | miss    %25.0 = LdVar              eR    identical, e44.2
  lgl$#-          %25.1 = Identical                %25.0, function(x, y, num.eq=TRUE, single.NA=TRUE, at|...
  void                    Branch                   %25.1 -> BB54 (if true) | BB55 (if false)
BB60   <- [52]
  lgl$-           %60.0 = CastType           d     dn %52.2
  lgl$-           %60.1 = AsLogical                %60.0
  lgl$#-          %60.2 = Identical                %60.1, false
  void                    Branch                   %60.2 -> BB22 (if true) | BB14 (if false)
BB61   <- [52]
  void                    Nop                !     
  val?            %61.1 = %52.2
  dr              %61.2 = Typecheck@0x5638bcb3f7e0[Type#38]
  goto BB12
BB54   <- [25]
  prom-           %54.0 = MkArg                    unboundValue, .assignOverBinding[0x5638bbb5bdd0]_p11 (!refl), e44.2
  prom-           %54.1 = MkArg                    unboundValue, .assignOverBinding[0x5638bbb5bdd0]_p12, e44.2
  ct              %54.2 = PushContext        lCL   %54.0, %54.1, identical(fenv, where), function(x, y, num.eq=TRUE, single.NA=TRUE, at|..., e44.2
  val?^           %54.3 = CastType                 up %54.1
  val?^           %54.4 = CastType                 up %54.0
  env             e54.5 = MkEnv              l     x=%54.4, y=%54.3, num.eq(miss)=true, single.NA(miss)=true, attrib.as.set(miss)=true, ignore.bytecode(miss)=true, ignore.environment(miss)=false, ignore.srcref(miss)=true, parent=R_BaseNamespace, context 1
  val?            %54.6 = Force!<lazy>       !vrL  %54.4, e54.5   <val?>
  val?            %54.7 = Force!<lazy>       !vL   %54.3, e54.5   <val?>
  val?            %54.8 = CallBuiltin        !     identical(%54.6, %54.7, true, true, true, true, false, true) e54.5
  val?            %54.9 = PopContext         C     %54.8, %54.2   <lgl$->
  lgl$#-          %54.10 = IsType                   %54.9 isA lgl$-
  void                    Branch                   %54.10 -> BB56 (if true) | BB57 (if false)
BB55   <- [25]
  fs              %55.0 = FrameState         R     0x5638bbc92fd0+525: [], env=e44.2
  void                    Deopt              !v    %55.0, CallTarget@0x5638bcb3f7e0[Call#12], %25.0   !
BB22   <- [60]
  void                    Nop                !     
  lgl$-           %22.1 = %60.1
  goto BB17
BB14   <- [60]
  val?^ | miss    %14.0 = LdVar              eR    bindingIsLocked, e44.2
  lgl$#-          %14.1 = Identical                %14.0, function(sym, env) <(rir::DispatchTable*)0x563|...
  void                    Branch                   %14.1 -> BB64 (if true) | BB65 (if false)
BB12   <- [61, 65]
  val?^ | miss    %12.0 = Phi                      %61.1:BB61, %65.1:BB65
  val?^ | miss    %12.1 = %12.0
  dr              %12.2 = Phi                      %61.2:BB61, %65.2:BB65
  dr              %12.3 = %12.2
  fs              %12.4 = FrameState         R     0x5638bbc92fd0+871: [%52.2], env=e44.2
  void                    Deopt              !v    %12.4, %12.3, %12.1   !
BB56   <- [54]
  lgl$-           %56.0 = CastType           d     dn %54.9
  lgl$-           %56.1 = Not                vd    %56.0, elided
  lgl$-           %56.2 = AsLogical                %56.1
  lgl$#-          %56.3 = Identical                %56.2, false
  void                    Branch                   %56.3 -> BB38 (if true) | BB30 (if false)
BB57   <- [54]
  void                    Nop                !     
  val?            %57.1 = %54.9
  dr              %57.2 = Typecheck@0x5638bcb3f7e0[Type#22]
  goto BB28
BB17   <- [22, 68]
  lgl$-           %17.0 = Phi                      %68.3:BB68, %22.1:BB22
  lgl$-           %17.1 = %17.0
  lgl$#-          %17.2 = CheckTrueFalse     e     %17.1
  void                    Branch                   %17.2 -> BB21 (if true) | BB20 (if false)
BB64   <- [14]
  prom-           %64.0 = MkArg                    unboundValue, .assignOverBinding[0x5638bbb5bdd0]_p6, e44.2
  val?^ | miss    %64.1 = LdVar              eR    what, e44.2
  void                    Visible            v     
  val?            %64.3 = Force!<wrapped>    !     %64.1, e44.2   <str$->
  prom-           %64.4 = MkArg                    %64.3, .assignOverBinding[0x5638bbb5bdd0]_p5 (!refl), 
  val?            %64.5 = StaticCall         !     bindingIsLocked[0x5638bfdb1640](%64.4, %64.0) e44.2   <lgl$->
  lgl$#-          %64.6 = IsType                   %64.5 isA lgl$-
  void                    Branch                   %64.6 -> BB68 (if true) | BB69 (if false)
BB65   <- [14]
  void                    Nop                !     
  val?^ | miss    %65.1 = %14.0
  dr              %65.2 = CallTarget@0x5638bcb3f7e0[Call#19]
  goto BB12
BB38   <- [56]
  void                    Nop                !     
  lgl$-           %38.1 = %56.2
  goto BB33
BB30   <- [56]
  val?^ | miss    %30.0 = LdVar              eR    exists, e44.2
  lgl$#-          %30.1 = Identical                %30.0, function(x, where=-(1), envir=if(missing(frame|...
  void                    Branch                   %30.1 -> BB58 (if true) | BB59 (if false)
BB28   <- [57, 59]
  val?^ | miss    %28.0 = Phi                      %57.1:BB57, %59.1:BB59
  val?^ | miss    %28.1 = %28.0
  dr              %28.2 = Phi                      %57.2:BB57, %59.2:BB59
  dr              %28.3 = %28.2
  fs              %28.4 = FrameState         R     0x5638bbc92fd0+562: [%54.9], env=e44.2
  void                    Deopt              !v    %28.4, %28.3, %28.1   !
BB21   <- [17]
  (cls|spec|blt)  %21.0 = LdFun              !v    unlockBinding, e44.2
  fs              %21.1 = FrameState         R     0x5638bbc92fd0+990: [%21.0], env=e44.2
  void                    Deopt              !v    %21.1, DeadCall@0x5638bcb3f7e0[Call#21], %21.0   !
BB20   <- [17]
  val?^ | miss    %20.0 = LdVar              eR    assign, e44.2
  lgl$#-          %20.1 = Identical                %20.0, function(x, value, pos=-(1), envir=as.environm|...
  void                    Branch                   %20.1 -> BB66 (if true) | BB67 (if false)
BB68   <- [64]
  lgl$-           %68.0 = CastType           d     dn %64.5
  lgl$-           %68.1 = AsLogical                %68.0
  lgl$-           %68.2 = LAnd                     %60.1, %68.1
  lgl$-           %68.3 = %68.2
  goto BB17
BB69   <- [64]
  fs              %69.0 = FrameState         R     0x5638bbc92fd0+920: [%60.1, %64.5], env=e44.2
  void                    Deopt              !v    %69.0, Typecheck@0x5638bcb3f7e0[Type#41], %64.5   !
BB33   <- [38, 62]
  lgl$-           %33.0 = Phi                      %62.3:BB62, %38.1:BB38
  lgl$-           %33.1 = %33.0
  lgl$-           %33.2 = AsLogical                %33.1
  lgl$#-          %33.3 = Identical                %33.2, false
  void                    Branch                   %33.3 -> BB35 (if true) | BB34 (if false)
BB58   <- [30]
  prom-           %58.0 = MkArg                    unboundValue, .assignOverBinding[0x5638bbb5bdd0]_p13, e44.2
  prom-           %58.1 = MkArg                    unboundValue, .assignOverBinding[0x5638bbb5bdd0]_p14, e44.2
  val?            %58.2 = StaticCall         !     exists[0x5638bd1d6e20](%58.0, missingArg, %58.1, missingArg, missingArg, false) { 0 2n 5n } e44.2   <lgl$->
  lgl$#-          %58.3 = IsType                   %58.2 isA lgl$-
  void                    Branch                   %58.3 -> BB62 (if true) | BB63 (if false)
BB59   <- [30]
  void                    Nop                !     
  val?^ | miss    %59.1 = %30.0
  dr              %59.2 = CallTarget@0x5638bcb3f7e0[Call#13]
  goto BB28
BB66   <- [20]
  prom-           %66.0 = MkArg                    unboundValue, .assignOverBinding[0x5638bbb5bdd0]_p7, e44.2
  prom-           %66.1 = MkArg                    unboundValue, .assignOverBinding[0x5638bbb5bdd0]_p8, e44.2
  prom-           %66.2 = MkArg                    unboundValue, .assignOverBinding[0x5638bbb5bdd0]_p9, e44.2
  val?            %66.3 = StaticCall         !     assign[0x5638bf1ba320](%66.0, %66.1, %66.2) e44.2   <cls>
  void                    Return             l     %66.3
BB67   <- [20]
  fs              %67.0 = FrameState         R     0x5638bbc92fd0+927: [%17.1], env=e44.2
  void                    Deopt              !v    %67.0, CallTarget@0x5638bcb3f7e0[Call#20], %20.0   !
BB35   <- [33]
  lgl$#-          %35.0 = CheckTrueFalse     e     %33.2
  void                    Branch                   %35.0 -> BB37 (if true) | BB36 (if false)
BB34   <- [33]
  (cls|spec|blt)  %34.0 = LdFun              !v    bindingIsLocked, e44.2
  fs              %34.1 = FrameState         R     0x5638bbc92fd0+648: [%33.2, %34.0], env=e44.2
  void                    Deopt              !v    %34.1, DeadCall@0x5638bcb3f7e0[Call#14], %34.0   !
BB62   <- [58]
  lgl$-           %62.0 = CastType           d     dn %58.2
  lgl$-           %62.1 = AsLogical                %62.0
  lgl$-           %62.2 = LAnd                     %56.2, %62.1
  lgl$-           %62.3 = %62.2
  goto BB33
BB63   <- [58]
  fs              %63.0 = FrameState         R     0x5638bbc92fd0+629: [%56.2, %58.2], env=e44.2
  void                    Deopt              !v    %63.0, Typecheck@0x5638bcb3f7e0[Type#25], %58.2   !
BB37   <- [35]
  (cls|spec|blt)  %37.0 = LdFun              !v    unlockBinding, e44.2
  fs              %37.1 = FrameState         R     0x5638bbc92fd0+703: [%37.0], env=e44.2
  void                    Deopt              !v    %37.1, DeadCall@0x5638bcb3f7e0[Call#15], %37.0   !
BB36   <- [35]
  void                    Nop                !     
  goto BB9
Prom 0:
BB0
  void                    Visible            v     
  void                    Return             l     -1
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     options, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .assignOverBinding[0x5638bbb5bdd0]_p2, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    warnOpt, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 3:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    what, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 4:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 5:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    what, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 6:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 7:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    what, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 8:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    value, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 9:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 10:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    value, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 11:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fenv, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 12:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 13:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    what, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 14:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fenv, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <env->
  void                    Return             l     %0.3

│ .assignOverBinding[0x5638bbb5bdd0]                                           │
└──────────────────────────────────────────────────────────────────────────────┘
