
┌──────────────────────────────────────────────────────────────────────────────┐
│ setClass[0x5638bd443bd0]                                                     │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;Eager0,NonRefl0,!Obj0 miss: 11       │
│ Properties:                                                                  │
├────── Final PIR Version
setClass[0x5638bd443bd0]
BB0
  val?~+          %0.0  = LdArg                    0
  env             e0.1  = MkEnv              l     Class=%0.0, representation(miss)=missingArg, prototype(miss)=missingArg, contains(miss)=missingArg, validity(miss)=missingArg, access(miss)=missingArg, where(miss)=missingArg, version(miss)=missingArg, sealed(miss)=missingArg, package(miss)=missingArg, S3methods(miss)=missingArg, slots(miss)=missingArg, parent=<env 0x5638ba074378>, context 1
  prom-           %0.2  = MkArg                    unboundValue, setClass[0x5638bd443bd0]_p0, e0.1
  val?^ | miss    %0.3  = CastType                 up %0.2
  void                    StArg              lW    representation, %0.3, e0.1
  void                    StArg              lW    prototype, nil, e0.1
  prom-           %0.6  = MkArg                    unboundValue, setClass[0x5638bd443bd0]_p2, e0.1
  val?^ | miss    %0.7  = CastType                 up %0.6
  void                    StArg              lW    contains, %0.7, e0.1
  void                    StArg              lW    validity, nil, e0.1
  prom-           %0.10 = MkArg                    unboundValue, setClass[0x5638bd443bd0]_p4, e0.1
  val?^ | miss    %0.11 = CastType                 up %0.10
  void                    StArg              lW    access, %0.11, e0.1
  prom-           %0.13 = MkArg                    unboundValue, setClass[0x5638bd443bd0]_p5, e0.1
  val?^ | miss    %0.14 = CastType                 up %0.13
  void                    StArg              lW    where, %0.14, e0.1
  prom-           %0.16 = MkArg                    unboundValue, setClass[0x5638bd443bd0]_p7, e0.1
  val?^ | miss    %0.17 = CastType                 up %0.16
  void                    StArg              lW    version, %0.17, e0.1
  void                    StArg              lW    sealed, false, e0.1
  prom-           %0.20 = MkArg                    unboundValue, setClass[0x5638bd443bd0]_p9, e0.1
  val?^ | miss    %0.21 = CastType                 up %0.20
  void                    StArg              lW    package, %0.21, e0.1
  void                    StArg              lW    S3methods, false, e0.1
  val?^ | miss    %0.24 = LdVar              eR    getClassDef, <env 0x5638ba074378>
  lgl$#-          %0.25 = Identical                %0.24, function(Class, where=topenv(parent.frame()), |...
  void                    Branch                   %0.25 -> BB116 (if true) | BB117 (if false)
BB116   <- [0]
  prom-           %116.0 = MkArg                    unboundValue, setClass[0x5638bd443bd0]_p12 (!refl), e0.1
  prom-           %116.1 = MkArg                    unboundValue, setClass[0x5638bd443bd0]_p13, e0.1
  val?            %116.2 = StaticCall         !v    getClassDef[0x5638beb34f60](%116.0, %116.1) e0.1   <(nil|other)>
  void                    StVar              lW    oldDef, %116.2, e0.1
  val?^ | miss    %116.4 = LdVar              eR    is, e0.1
  lgl$#-          %116.5 = Identical                %116.4, function(object, class2) <(rir::DispatchTable*|...
  void                    Branch                   %116.5 -> BB118 (if true) | BB119 (if false)
BB117   <- [0]
  fs              %117.0 = FrameState         R     0x5638c5814fa0+0: [], env=e0.1
  void                    Deopt              !v    %117.0, CallTarget@0x5638bd89be00[Call#7], %0.24
BB118   <- [116]
  prom-           %118.0 = MkArg                    unboundValue, setClass[0x5638bd443bd0]_p14 (!refl), e0.1
  val?            %118.1 = Call               !v    function(object, class2) <(rir::DispatchTable*|...(%118.0, "classRepresentation") e0.1   <lgl$->
  lgl$#-          %118.2 = IsType                   %118.1 isA lgl$-
  void                    Branch                   %118.2 -> BB120 (if true) | BB121 (if false)
BB119   <- [116]
  fs              %119.0 = FrameState         R     0x5638c5814fa0+51: [], env=e0.1
  void                    Deopt              !v    %119.0, CallTarget@0x5638bd89be00[Call#8], %116.4   !
BB120   <- [118]
  lgl$-           %120.0 = CastType           d     dn %118.1
  lgl$-           %120.1 = AsLogical                %120.0
  lgl$#-          %120.2 = Identical                %120.1, false
  void                    Branch                   %120.2 -> BB114 (if true) | BB7 (if false)
BB121   <- [118]
  fs              %121.0 = FrameState         R     0x5638c5814fa0+88: [%118.1], env=e0.1
  void                    Deopt              !v    %121.0, Typecheck@0x5638bd89be00[Type#12], %118.1   !
BB114   <- [120]
  void                    Nop                !     
  lgl$-           %114.1 = %120.1
  goto BB10
BB7   <- [120]
  (cls|spec|blt)  %7.0  = LdFun              !v    @, <0x5638b9a6cbd8>, e0.1
  prom-           %7.1  = MkArg                    unboundValue, setClass[0x5638bd443bd0]_p15, e0.1
  prom-           %7.2  = MkArg                    unboundValue, setClass[0x5638bd443bd0]_p16, e0.1
  val?            %7.3  = Call               !v    %7.0(%7.1, %7.2) e0.1   <lgl$->
  lgl$#-          %7.4  = IsType                   %7.3 isA lgl$-
  void                    Branch                   %7.4 -> BB122 (if true) | BB123 (if false)
BB10   <- [114, 122]
  lgl$-           %10.0 = Phi                      %122.3:BB122, %114.1:BB114
  lgl$-           %10.1 = %10.0
  lgl$#-          %10.2 = CheckTrueFalse     e     %10.1
  void                    Branch                   %10.2 -> BB113 (if true) | BB13 (if false)
BB122   <- [7]
  lgl$-           %122.0 = CastType           d     dn %7.3
  lgl$-           %122.1 = AsLogical                %122.0
  lgl$-           %122.2 = LAnd                     %120.1, %122.1
  lgl$-           %122.3 = %122.2
  goto BB10
BB123   <- [7]
  fs              %123.0 = FrameState         R     0x5638c5814fa0+137: [%120.1, %7.3], env=e0.1
  void                    Deopt              !v    %123.0, Typecheck@0x5638bd89be00[Type#15], %7.3   !
BB113   <- [10]
  (cls|spec|blt)  %113.0 = LdFun              !v    stop, e0.1
  fs              %113.1 = FrameState         R     0x5638c5814fa0+160: [%113.0], env=e0.1
  void                    Deopt              !v    %113.1, DeadCall@0x5638bd89be00[Call#10], %113.0   !
BB13   <- [10]
  lgl$-           %13.0 = Missing            eR    slots, e0.1
  lgl$-           %13.1 = Not                d     %13.0, elided
  lgl$#-          %13.2 = CheckTrueFalse     e     %13.1
  void                    Branch                   %13.2 -> BB110 (if true) | BB14 (if false)
BB110   <- [13]
  lgl$-           %110.0 = Missing            eR    representation, e0.1
  lgl$-           %110.1 = Not                d     %110.0, elided
  lgl$#-          %110.2 = CheckTrueFalse     e     %110.1
  void                    Branch                   %110.2 -> BB112 (if true) | BB111 (if false)
BB14   <- [13]
  val?^ | miss    %14.0 = LdVar              eR    is, e0.1
  lgl$#-          %14.1 = Identical                %14.0, function(object, class2) <(rir::DispatchTable*|...
  void                    Branch                   %14.1 -> BB124 (if true) | BB125 (if false)
BB112   <- [110]
  (cls|spec|blt)  %112.0 = LdFun              !v    stop, e0.1
  fs              %112.1 = FrameState         R     0x5638c5814fa0+1662: [%112.0], env=e0.1
  void                    Deopt              !v    %112.1, DeadCall@0x5638bd89be00[Call#31], %112.0   !
BB111   <- [110]
  (cls|spec|blt)  %111.0 = LdFun              !v    inferProperties, e0.1
  fs              %111.1 = FrameState         R     0x5638c5814fa0+1695: [%111.0], env=e0.1
  void                    Deopt              !v    %111.1, DeadCall@0x5638bd89be00[Call#32], %111.0   !
BB124   <- [14]
  prom-           %124.0 = MkArg                    unboundValue, setClass[0x5638bd443bd0]_p17, e0.1
  val?            %124.1 = Call               !v    function(object, class2) <(rir::DispatchTable*|...(%124.0, "classRepresentation") e0.1   <lgl$->
  lgl$#-          %124.2 = IsType                   %124.1 isA lgl$-
  void                    Branch                   %124.2 -> BB126 (if true) | BB127 (if false)
BB125   <- [14]
  fs              %125.0 = FrameState         R     0x5638c5814fa0+144: [%10.1], env=e0.1
  void                    Deopt              !v    %125.0, CallTarget@0x5638bd89be00[Call#13], %14.0   !
BB126   <- [124]
  lgl$-           %126.0 = CastType           d     dn %124.1
  lgl$#-          %126.1 = CheckTrueFalse     e     %126.0
  void                    Branch                   %126.1 -> BB90 (if true) | BB17 (if false)
BB127   <- [124]
  void                    Nop                !     
  val?            %127.1 = %124.1
  dr              %127.2 = Typecheck@0x5638bd89be00[Type#20]
  goto BB15
BB90   <- [126]
  val?^ | miss    %90.0 = LdVar              eR    representation, e0.1
  val?            %90.1 = Force!             !v    %90.0, e0.1   <val?_>
  void                    StVar              lW    classDef, %90.1, e0.1
  lgl$-           %90.3 = Missing            eR    prototype, e0.1
  lgl$-           %90.4 = AsLogical                %90.3
  lgl$#-          %90.5 = Identical                %90.4, false
  void                    Branch                   %90.5 -> BB109 (if true) | BB91 (if false)
BB17   <- [126]
  val?^ | miss    %17.0 = LdVar              eR    is.character, e0.1
  lgl$#-          %17.1 = Identical                <blt is.character>, %17.0   <true>
  void                    Branch                   %17.1 -> BB128 (if true) | BB129 (if false)
BB15   <- [127, 129]
  val?^ | miss    %15.0 = Phi                      %127.1:BB127, %129.1:BB129
  val?^ | miss    %15.1 = %15.0
  dr              %15.2 = Phi                      %127.2:BB127, %129.2:BB129
  dr              %15.3 = %15.2
  fs              %15.4 = FrameState         R     0x5638c5814fa0+251: [%124.1], env=e0.1
  void                    Deopt              !v    %15.4, %15.3, %15.1   !
BB109   <- [90]
  void                    Nop                !     
  lgl$-           %109.1 = %90.4
  goto BB92
BB91   <- [90]
  lgl$-           %91.0 = Missing            eR    contains, e0.1
  lgl$-           %91.1 = AsLogical                %91.0
  lgl$-           %91.2 = LAnd                     %90.4, %91.1
  lgl$-           %91.3 = %91.2
  goto BB92
BB128   <- [17]
  val?^ | miss    %128.0 = LdVar              eR    representation, e0.1
  val?            %128.1 = Force!<wrapped>    !v    %128.0, e0.1   <vec->
  lgl$#-          %128.2 = CallSafeBuiltin    wed   is.character(%128.1)    <lgl$->
  void                    Branch                   %128.2 -> BB85 (if true) | BB18 (if false)
BB129   <- [17]
  void                    Nop                !     
  lgl$#-          %129.1 = %17.1
  dr              %129.2 = DeadBranchReached@0x5638bd89be00[Test#0]
  goto BB15
BB92   <- [91, 109]
  lgl$-           %92.0 = Phi                      %91.3:BB91, %109.1:BB109
  lgl$-           %92.1 = %92.0
  lgl$-           %92.2 = AsLogical                %92.1
  lgl$#-          %92.3 = Identical                %92.2, false
  void                    Branch                   %92.3 -> BB108 (if true) | BB93 (if false)
BB85   <- [128]
  val?^ | miss    %85.0 = LdVar              eR    length, e0.1
  lgl$#-          %85.1 = Identical                <blt length>, %85.0   <@?>
  void                    Branch                   %85.1 -> BB87 (if true) | BB86 (if false)
BB18   <- [128]
  void                    Nop                !     
  lgl$#-          %18.1 = %128.2
  goto BB19
BB108   <- [92]
  void                    Nop                !     
  lgl$-           %108.1 = %92.2
  goto BB94
BB93   <- [92]
  lgl$-           %93.0 = Missing            eR    validity, e0.1
  lgl$-           %93.1 = AsLogical                %93.0
  lgl$-           %93.2 = LAnd                     %92.2, %93.1
  lgl$-           %93.3 = %93.2
  goto BB94
BB87   <- [85]
  val?^ | miss    %87.0 = LdVar              eR    representation, e0.1
  val?            %87.1 = Force!             !v    %87.0, e0.1   <val?_>
  lgl$#-          %87.2 = IsType                   %87.1 isA val?+
  void                    Branch                   %87.2 -> BB132 (if true) | BB133 (if false)
BB86   <- [85]
  (cls|spec|blt)  %86.0 = LdFun              !v    length, e0.1
  fs              %86.1 = FrameState         R     0x5638c5814fa0+393: [%128.2, %86.0], env=e0.1
  void                    Deopt              !v    %86.1, DeadCall@0x5638bd89be00[Call#15], %86.0   !
BB19   <- [18, 132]
  lgl$-           %19.0 = Phi                      %132.5:BB132, %18.1:BB18
  lgl$-           %19.1 = %19.0
  lgl$-           %19.2 = AsLogical                %19.1
  lgl$#-          %19.3 = Identical                %19.2, false
  void                    Branch                   %19.3 -> BB84 (if true) | BB20 (if false)
BB94   <- [93, 108]
  lgl$-           %94.0 = Phi                      %93.3:BB93, %108.1:BB108
  lgl$-           %94.1 = %94.0
  lgl$-           %94.2 = AsLogical                %94.1
  lgl$#-          %94.3 = Identical                %94.2, false
  void                    Branch                   %94.3 -> BB107 (if true) | BB95 (if false)
BB132   <- [87]
  val?+           %132.0 = CastType           d     dn %87.1   <val?_>
  real$-          %132.1 = CallSafeBuiltin    wed   length(%132.0)    <val?_>
  lgl$-           %132.2 = Eq                 d     %132.1, 1L, elided   <val?_>
  lgl$-           %132.3 = AsLogical                %132.2
  lgl$-           %132.4 = LAnd                     %128.2, %132.3
  lgl$-           %132.5 = %132.4
  goto BB19
BB133   <- [87]
  fs              %133.0 = FrameState         R     0x5638c5814fa0+434: [%128.2, <blt length>, %87.1], env=e0.1
  void                    Deopt              !v    %133.0, Typecheck@0x5638bd89be00[Type#25], %87.1   !
BB84   <- [19]
  void                    Nop                !     
  lgl$-           %84.1 = %19.2
  goto BB25
BB20   <- [19]
  val?^ | miss    %20.0 = LdVar              eR    names, e0.1
  lgl$#-          %20.1 = Identical                <blt names>, %20.0   <@?>
  void                    Branch                   %20.1 -> BB22 (if true) | BB21 (if false)
BB107   <- [94]
  void                    Nop                !     
  lgl$-           %107.1 = %94.2
  goto BB96
BB95   <- [94]
  lgl$-           %95.0 = Missing            eR    access, e0.1
  lgl$-           %95.1 = AsLogical                %95.0
  lgl$-           %95.2 = LAnd                     %94.2, %95.1
  lgl$-           %95.3 = %95.2
  goto BB96
BB25   <- [84, 130]
  lgl$-           %25.0 = Phi                      %130.5:BB130, %84.1:BB84
  lgl$-           %25.1 = %25.0
  lgl$#-          %25.2 = CheckTrueFalse     e     %25.1
  void                    Branch                   %25.2 -> BB81 (if true) | BB26 (if false)
BB22   <- [20]
  val?^ | miss    %22.0 = LdVar              eR    representation, e0.1
  val?            %22.1 = Force!             !v    %22.0, e0.1   <val?_>
  lgl$#-          %22.2 = IsType                   %22.1 isA val?+
  void                    Branch                   %22.2 -> BB130 (if true) | BB131 (if false)
BB21   <- [20]
  (cls|spec|blt)  %21.0 = LdFun              !v    names, e0.1
  fs              %21.1 = FrameState         R     0x5638c5814fa0+510: [%19.2, %21.0], env=e0.1
  void                    Deopt              !v    %21.1, DeadCall@0x5638bd89be00[Call#16], %21.0   !
BB96   <- [95, 107]
  lgl$-           %96.0 = Phi                      %95.3:BB95, %107.1:BB107
  lgl$-           %96.1 = %96.0
  lgl$-           %96.2 = AsLogical                %96.1
  lgl$#-          %96.3 = Identical                %96.2, false
  void                    Branch                   %96.3 -> BB106 (if true) | BB97 (if false)
BB81   <- [25]
  val?^ | miss    %81.0 = LdVar              eR    list, e0.1
  lgl$#-          %81.1 = Identical                <blt list>, %81.0   <@?>
  void                    Branch                   %81.1 -> BB83 (if true) | BB82 (if false)
BB26   <- [25]
  void                    Nop                !     
  goto BB27
BB130   <- [22]
  val?+           %130.0 = CastType           d     dn %22.1   <val?_>
  val+            %130.1 = CallSafeBuiltin    wed   names(%130.0)    <val?_>
  lgl$-           %130.2 = Is                       %130.1, NULL
  lgl$-           %130.3 = AsLogical                %130.2
  lgl$-           %130.4 = LAnd                     %19.2, %130.3
  lgl$-           %130.5 = %130.4
  goto BB25
BB131   <- [22]
  fs              %131.0 = FrameState         R     0x5638c5814fa0+551: [%19.2, <blt names>, %22.1], env=e0.1
  void                    Deopt              !v    %131.0, Typecheck@0x5638bd89be00[Type#29], %22.1   !
BB106   <- [96]
  void                    Nop                !     
  lgl$-           %106.1 = %96.2
  goto BB98
BB97   <- [96]
  lgl$-           %97.0 = Missing            eR    version, e0.1
  lgl$-           %97.1 = AsLogical                %97.0
  lgl$-           %97.2 = LAnd                     %96.2, %97.1
  lgl$-           %97.3 = %97.2
  goto BB98
BB83   <- [81]
  val?^ | miss    %83.0 = LdVar              eR    representation, e0.1
  val?            %83.1 = Force!             !v    %83.0, e0.1   <val?_>
  val+            %83.2 = CallSafeBuiltin    wed   list(%83.1)    <val?_>
  void                    StVar              lW    representation, %83.2, e0.1
  goto BB27
BB82   <- [81]
  (cls|spec|blt)  %82.0 = LdFun              !v    list, e0.1
  fs              %82.1 = FrameState         R     0x5638c5814fa0+624: [%82.0], env=e0.1
  void                    Deopt              !v    %82.1, DeadCall@0x5638bd89be00[Call#17], %82.0   !
BB27   <- [26, 83]
  val?^ | miss    %27.0 = LdVar              eR    nzchar, e0.1
  lgl$#-          %27.1 = Identical                <blt nzchar>, %27.0   <true>
  void                    Branch                   %27.1 -> BB134 (if true) | BB135 (if false)
BB98   <- [97, 106]
  lgl$-           %98.0 = Phi                      %97.3:BB97, %106.1:BB106
  lgl$-           %98.1 = %98.0
  lgl$-           %98.2 = AsLogical                %98.1
  lgl$#-          %98.3 = Identical                %98.2, false
  void                    Branch                   %98.3 -> BB105 (if true) | BB99 (if false)
BB134   <- [27]
  val?^ | miss    %134.0 = LdVar              eR    allNames, e0.1
  lgl$#-          %134.1 = Identical                %134.0, function(x) <(rir::DispatchTable*)0x5638c0a4a1|...
  void                    Branch                   %134.1 -> BB136 (if true) | BB137 (if false)
BB135   <- [27]
  void                    Nop                !     
  lgl$#-          %135.1 = %27.1
  dr              %135.2 = DeadBranchReached@0x5638bd89be00[Test#4]
  goto BB28
BB105   <- [98]
  void                    Nop                !     
  lgl$-           %105.1 = %98.2
  goto BB100
BB99   <- [98]
  lgl$-           %99.0 = Missing            eR    package, e0.1
  lgl$-           %99.1 = AsLogical                %99.0
  lgl$-           %99.2 = LAnd                     %98.2, %99.1
  lgl$-           %99.3 = %99.2
  goto BB100
BB136   <- [134]
  val?^ | miss    %136.0 = LdVar              eR    names, <env 0x5638ba074378>
  lgl$#-          %136.1 = Identical                <blt names>, %136.0   <true>
  void                    Branch                   %136.1 -> BB138 (if true) | BB139 (if false)
BB137   <- [134]
  void                    Nop                !     
  val?^ | miss    %137.1 = %134.0
  dr              %137.2 = CallTarget@0x5638bd89be00[Call#20]
  goto BB28
BB28   <- [135, 137, 139]
  val?^ | miss    %28.0 = Phi                      %135.1:BB135, %137.1:BB137, %139.1:BB139
  val?^ | miss    %28.1 = %28.0
  dr              %28.2 = Phi                      %135.2:BB135, %137.2:BB137, %139.2:BB139
  dr              %28.3 = %28.2
  fs              %28.4 = FrameState         R     0x5638c5814fa0+701: [], env=e0.1
  void                    Deopt              !v    %28.4, %28.3, %28.1   !
BB100   <- [99, 105]
  lgl$-           %100.0 = Phi                      %99.3:BB99, %105.1:BB105
  lgl$-           %100.1 = %100.0
  lgl$-           %100.2 = Not                d     %100.1, elided
  lgl$#-          %100.3 = CheckTrueFalse     e     %100.2
  void                    Branch                   %100.3 -> BB104 (if true) | BB101 (if false)
BB138   <- [136]
  val?^ | miss    %138.0 = LdVar              eR    representation, e0.1
  val?            %138.1 = Force!<wrapped>    !v    %138.0, e0.1   <vec->
  prom-           %138.2 = MkArg                    %138.1, setClass[0x5638bd443bd0]_p18 (!refl), e0.1
  val?~           %138.3 = CastType                 up %138.2
  lgl$#-          %138.4 = IsType                   %138.1 isA val?+
  void                    Branch                   %138.4 -> BB140 (if true) | BB141 (if false)
BB139   <- [136]
  void                    Nop                !     
  lgl$#-          %139.1 = %136.1
  dr              %139.2 = DeadBranchReached@0x5638c58fdc88[Test#0]
  goto BB28
BB104   <- [100]
  (cls|spec|blt)  %104.0 = LdFun              !v    stop, e0.1
  fs              %104.1 = FrameState         R     0x5638c5814fa0+1421: [%104.0], env=e0.1
  void                    Deopt              !v    %104.1, DeadCall@0x5638bd89be00[Call#25], %104.0   !
BB101   <- [100]
  val?^ | miss    %101.0 = LdVar              eR    length, e0.1
  lgl$#-          %101.1 = Identical                <blt length>, %101.0   <@?>
  void                    Branch                   %101.1 -> BB103 (if true) | BB102 (if false)
BB140   <- [138]
  val?+           %140.0 = CastType           d     dn %138.1   <vec+>
  val+            %140.1 = CallSafeBuiltin    wed   names(%140.0)    <(nil|str)->
  lgl$-           %140.2 = Is                       %140.1, NULL
  lgl$#-          %140.3 = CheckTrueFalse     e     %140.2
  env             e140.4 = (MkEnv)            l     x=%138.3, value=%140.1, parent=<env 0x5638ba074378>, context 0
  void                    Branch                   %140.3 -> BB78 (if true) | BB34 (if false)
BB141   <- [138]
  fs              %141.0 = FrameState         R     0x5638c5814fa0+793: [<blt nzchar>], env=e0.1
  env             e141.1 = (MkEnv)            l     x=%138.3, value=unboundValue, parent=<env 0x5638ba074378>, context 0
  fs              %141.2 = FrameState         R     0x5638c58c5380+69: [<blt names>, %138.1], env=e141.1, next=%141.0
  void                    Deopt              !v    %141.2, Typecheck@0x5638c58fdc88[Type#1], %138.1   !
BB103   <- [101]
  (cls|spec|blt)  %103.0 = LdFun              !v    @, e0.1
  fs              %103.1 = FrameState         R     0x5638c5814fa0+1514: [<blt length>, %103.0], env=e0.1
  void                    Deopt              !v    %103.1, DeadCall@0x5638bd89be00[Call#28], %103.0   !
BB102   <- [101]
  (cls|spec|blt)  %102.0 = LdFun              !v    length, e0.1
  fs              %102.1 = FrameState         R     0x5638c5814fa0+1477: [%102.0], env=e0.1
  void                    Deopt              !v    %102.1, DeadCall@0x5638bd89be00[Call#26], %102.0   !
BB78   <- [140]
  val?^ | miss    %78.0 = LdVar              eR    character, <env 0x5638ba074378>
  lgl$#-          %78.1 = Identical                %78.0, function(length=0L) <(rir::DispatchTable*)0x56|...
  void                    Branch                   %78.1 -> BB142 (if true) | BB143 (if false)
BB34   <- [140]
  void                    Nop                !     
  val+            %34.1 = %140.1
  goto BB35
BB142   <- [78]
  val?^ | miss    %142.0 = LdVar              eR    length, <env 0x5638ba074378>
  lgl$#-          %142.1 = Identical                %142.0, <blt length>
  void                    Branch                   %142.1 -> BB144 (if true) | BB145 (if false)
BB143   <- [78]
  void                    Nop                !     
  val?^ | miss    %143.1 = %78.0
  dr              %143.2 = CallTarget@0x5638c58fdc88[Call#1]
  goto BB32
BB35   <- [34, 146]
  val+            %35.0 = Phi                      %34.1:BB34, %146.2:BB146   <str->
  val+            %35.1 = %35.0
  val?            %35.2 = CallBuiltin        !v    nzchar(%35.1) e0.1   <lgl->
  void                    StVar              lW    slots, %35.2, e0.1
  val?^ | miss    %35.4 = LdVar              eR    c, e0.1
  lgl$#-          %35.5 = Identical                <blt c>, %35.4   <true>
  void                    Branch                   %35.5 -> BB148 (if true) | BB149 (if false)
BB144   <- [142]
  (int|real)$-    %144.0 = CallSafeBuiltin    wed   length(%140.0)    <int$->
  lgl$#-          %144.1 = IsType                   %144.0 isA int$-
  void                    Branch                   %144.1 -> BB146 (if true) | BB147 (if false)
BB145   <- [142]
  void                    Nop                !     
  val?^ | miss    %145.1 = %142.0
  dr              %145.2 = CallTarget@0x5638c58fdc88[Call#2]
  goto BB32
BB32   <- [143, 145]
  val?^ | miss    %32.0 = Phi                      %143.1:BB143, %145.1:BB145
  val?^ | miss    %32.1 = %32.0
  dr              %32.2 = Phi                      %143.2:BB143, %145.2:BB145
  dr              %32.3 = %32.2
  fs              %32.4 = FrameState         R     0x5638c5814fa0+793: [<blt nzchar>], env=e0.1
  env             e32.5 = (MkEnv)            l     x=%138.3, value=%140.1, parent=<env 0x5638ba074378>, context 0
  fs              %32.6 = FrameState         R     0x5638c58c5380+105: [], env=e32.5, next=%32.4
  void                    Deopt              !v    %32.6, %32.3, %32.1   !
BB148   <- [35]
  val?^ | miss    %148.0 = LdVar              eR    as.character, e0.1
  lgl$#-          %148.1 = Identical                <blt as.character>, %148.0   <true>
  void                    Branch                   %148.1 -> BB150 (if true) | BB151 (if false)
BB149   <- [35]
  void                    Nop                !     
  lgl$#-          %149.1 = %35.5
  dr              %149.2 = DeadBranchReached@0x5638bd89be00[Test#5]
  goto BB36
BB146   <- [144]
  int$-           %146.0 = CastType           d     dn %144.0
  str-            %146.1 = CallSafeBuiltin    wed   vector("character", %146.0)    <str->
  str-            %146.2 = %146.1
  goto BB35
BB147   <- [144]
  env             e147.0 = MaterializeEnv           , e140.4   <@?>
  fs              %147.1 = FrameState         R     0x5638c5814fa0+793: [<blt nzchar>], env=e0.1
  fs              %147.2 = FrameState         R     0x5638c58c5380+181: [], env=e147.0, next=%147.1
  prom-           %147.3 = MkArg                    unboundValue, setClass[0x5638bd443bd0]_p41, e147.0
  val?^           %147.4 = CastType                 up %147.3
  env             e147.5 = (MkEnv)            l     length=%147.4, parent=R_BaseNamespace, context -1
  fs              %147.6 = FrameState         R     0x5638bb9599f0+15: ["character"], env=e147.5, next=%147.2
  fs              %147.7 = FrameState         R     0x5638be16fa80+32(pr): [%144.0], env=e147.0, next=%147.6
  void                    Deopt              !v    %147.7, Typecheck@0x5638c58fdc88[Type#6], %144.0   !
BB150   <- [148]
  val?^ | miss    %150.0 = LdVar              eR    representation, e0.1
  val?            %150.1 = Force!<wrapped>    !v    %150.0, e0.1   <vec->
  lgl$#-          %150.2 = IsType                   %150.1 isA val+   <true>
  void                    Branch                   %150.2 -> BB152 (if true) | BB153 (if false)
BB151   <- [148]
  void                    Nop                !     
  lgl$#-          %151.1 = %148.1
  dr              %151.2 = DeadBranchReached@0x5638bd89be00[Test#7]
  goto BB36
BB36   <- [149, 151]
  val?^ | miss    %36.0 = Phi                      %149.1:BB149, %151.1:BB151
  val?^ | miss    %36.1 = %36.0
  dr              %36.2 = Phi                      %149.2:BB149, %151.2:BB151
  dr              %36.3 = %36.2
  fs              %36.4 = FrameState         R     0x5638c5814fa0+829: [], env=e0.1
  void                    Deopt              !v    %36.4, %36.3, %36.1   !
BB152   <- [150]
  val?^ | miss    %152.0 = LdVar              eR    slots, e0.1
  lgl$#-          %152.1 = IsType                   %152.0 isA lgl-
  void                    Branch                   %152.1 -> BB154 (if true) | BB155 (if false)
BB153   <- [150]
  void                    Nop                !     
  lgl$#-          %153.1 = %150.2
  dr              %153.2 = DeadBranchReached@0x5638bd89be00[Test#9]
  goto BB38
BB154   <- [152]
  lgl-            %154.0 = CastType           d     dn %152.0
  lgl-            %154.1 = Not                wed   %154.0, elided
  lgl$#-          %154.2 = IsType                   %150.1 isA val?-
  void                    Branch                   %154.2 -> BB156 (if true) | BB157 (if false)
BB155   <- [152]
  void                    Nop                !     
  val?^ | miss    %155.1 = %152.0
  dr              %155.2 = Typecheck@0x5638bd89be00[Type#51]
  goto BB38
BB38   <- [153, 155]
  val?^ | miss    %38.0 = Phi                      %153.1:BB153, %155.1:BB155
  val?^ | miss    %38.1 = %38.0
  dr              %38.2 = Phi                      %153.2:BB153, %155.2:BB155
  dr              %38.3 = %38.2
  fs              %38.4 = FrameState         R     0x5638c5814fa0+963: [<blt c>, <blt as.character>, %150.1], env=e0.1
  void                    Deopt              !v    %38.4, %38.3, %38.1   !
BB156   <- [154]
  val?-           %156.0 = CastType           d     dn %150.1   <vec->
  val?            %156.1 = Extract1_1D        wed   %156.0, %154.1, elided   <vec->
  lgl$#-          %156.2 = IsType                   %156.1 isA val?-
  void                    Branch                   %156.2 -> BB158 (if true) | BB159 (if false)
BB157   <- [154]
  fs              %157.0 = FrameState         R     0x5638c5814fa0+1014: [<blt c>, <blt as.character>, %150.1, %154.1], env=e0.1
  void                    Deopt              !v    %157.0, Typecheck@0x5638bd89be00[Type#49], %150.1   !
BB158   <- [156]
  val?-           %158.0 = CastType           d     dn %156.1   <vec->
  val+            %158.1 = CallSafeBuiltin    wed   as.character(%158.0)    <str->
  val?^ | miss    %158.2 = LdVar              eR    contains, e0.1
  val?            %158.3 = Force!<lazy>       !v    %158.2, e0.1   <str->
  lgl$#-          %158.4 = IsType                   %158.3 isA val?-
  void                    Branch                   %158.4 -> BB160 (if true) | BB161 (if false)
BB159   <- [156]
  fs              %159.0 = FrameState         R     0x5638c5814fa0+1015: [<blt c>, <blt as.character>, %156.1], env=e0.1
  void                    Deopt              !v    %159.0, Typecheck@0x5638bd89be00[Type#52], %156.1   !
BB160   <- [158]
  val?-           %160.0 = CastType           d     dn %158.3   <str->
  val+            %160.1 = CallSafeBuiltin    wed   c(%158.1, %160.0)    <str->
  void                    StVar              lW    superClasses, %160.1, e0.1
  val?^ | miss    %160.3 = LdVar              eR    representation, e0.1
  val?            %160.4 = Force!<wrapped>    !v    %160.3, e0.1   <vec->
  lgl$#-          %160.5 = IsType                   %160.4 isA val+   <true>
  lgl$#-          %160.6 = IsType                   %160.4 isA val?-
  void                    Branch                   %160.5 -> BB162 (if true) | BB163 (if false)
BB161   <- [158]
  fs              %161.0 = FrameState         R     0x5638c5814fa0+1052: [<blt c>, %158.1, %158.3], env=e0.1
  void                    Deopt              !v    %161.0, Typecheck@0x5638bd89be00[Type#54], %158.3   !
BB162   <- [160]
  val?^ | miss    %162.0 = LdVar              eR    slots, e0.1
  lgl$#-          %162.1 = IsType                   %162.0 isA lgl-
  void                    Branch                   %162.1 -> BB164 (if true) | BB165 (if false)
BB163   <- [160]
  void                    Nop                !     
  lgl$#-          %163.1 = %160.5
  dr              %163.2 = DeadBranchReached@0x5638bd89be00[Test#10]
  goto BB46
BB164   <- [162]
  lgl-            %164.0 = CastType           d     dn %162.0
  void                    Branch                   %160.6 -> BB166 (if true) | BB167 (if false)
BB165   <- [162]
  void                    Nop                !     
  val?^ | miss    %165.1 = %162.0
  dr              %165.2 = Typecheck@0x5638bd89be00[Type#58]
  goto BB46
BB46   <- [163, 165, 167]
  val?^ | miss    %46.0 = Phi                      %163.1:BB163, %165.1:BB165, %167.1:BB167
  val?^ | miss    %46.1 = %46.0
  dr              %46.2 = Phi                      %163.2:BB163, %165.2:BB165, %167.2:BB167
  dr              %46.3 = %46.2
  fs              %46.4 = FrameState         R     0x5638c5814fa0+1097: [%160.4], env=e0.1
  void                    Deopt              !v    %46.4, %46.3, %46.1   !
BB166   <- [164]
  val?-           %166.0 = CastType           d     dn %160.4   <vec->
  val?            %166.1 = Extract1_1D        wed   %166.0, %164.0, elided   <vec->
  void                    StVar              lW    properties, %166.1, e0.1
  (cls|spec|blt)  %166.3 = LdFun              !v    makeClassRepresentation, <0x5638c5a05410>, e0.1
  prom-           %166.4 = MkArg                    unboundValue, setClass[0x5638bd443bd0]_p19, e0.1
  prom-           %166.5 = MkArg                    unboundValue, setClass[0x5638bd443bd0]_p20, e0.1
  prom-           %166.6 = MkArg                    unboundValue, setClass[0x5638bd443bd0]_p21, e0.1
  prom-           %166.7 = MkArg                    unboundValue, setClass[0x5638bd443bd0]_p22, e0.1
  prom-           %166.8 = MkArg                    unboundValue, setClass[0x5638bd443bd0]_p23, e0.1
  prom-           %166.9 = MkArg                    unboundValue, setClass[0x5638bd443bd0]_p24, e0.1
  prom-           %166.10 = MkArg                    unboundValue, setClass[0x5638bd443bd0]_p25, e0.1
  prom-           %166.11 = MkArg                    unboundValue, setClass[0x5638bd443bd0]_p26, e0.1
  prom-           %166.12 = MkArg                    unboundValue, setClass[0x5638bd443bd0]_p27, e0.1
  prom-           %166.13 = MkArg                    unboundValue, setClass[0x5638bd443bd0]_p28, e0.1
  val?            %166.14 = NamedCall          !v    %166.3(%166.4, %166.5, %166.6, %166.7, %166.8, %166.9, %166.10, %166.11, %166.12, where=%166.13) e0.1   <other>
  void                    StVar              lW    classDef, %166.14, e0.1
  val?^ | miss    %166.16 = LdVar              eR    names, e0.1
  lgl$#-          %166.17 = Identical                <blt names>, %166.16   <true>
  void                    Branch                   %166.17 -> BB168 (if true) | BB169 (if false)
BB167   <- [164]
  void                    Nop                !     
  val?            %167.1 = %160.4
  dr              %167.2 = Typecheck@0x5638bd89be00[Type#56]
  goto BB46
BB168   <- [166]
  (cls|spec|blt)  %168.0 = LdFun              !v    @, <0x5638b9a6cbd8>, e0.1
  prom-           %168.1 = MkArg                    unboundValue, setClass[0x5638bd443bd0]_p29, e0.1
  prom-           %168.2 = MkArg                    unboundValue, setClass[0x5638bd443bd0]_p30, e0.1
  val?            %168.3 = Call               !v    %168.0(%168.1, %168.2) e0.1   <vec->
  lgl$#-          %168.4 = IsType                   %168.3 isA val?-
  void                    Branch                   %168.4 -> BB170 (if true) | BB171 (if false)
BB169   <- [166]
  fs              %169.0 = FrameState         R     0x5638c5814fa0+1294: [], env=e0.1
  void                    Deopt              !v    %169.0, DeadBranchReached@0x5638bd89be00[Test#12], %166.17   !
BB170   <- [168]
  val?-           %170.0 = CastType           d     dn %168.3   <vec->
  val+            %170.1 = CallSafeBuiltin    wed   names(%170.0)    <nil->
  void                    StVar              lW    superClasses, %170.1, e0.1
  val?^ | miss    %170.3 = LdVar              eR    completeClassDefinition, e0.1
  lgl$#-          %170.4 = Identical                %170.3, function(Class, ClassDef=getClassDef(Class), w|...
  void                    Branch                   %170.4 -> BB172 (if true) | BB173 (if false)
BB171   <- [168]
  fs              %171.0 = FrameState         R     0x5638c5814fa0+1969: [<blt names>, %168.3], env=e0.1
  void                    Deopt              !v    %171.0, Typecheck@0x5638bd89be00[Type#102], %168.3   !
BB172   <- [170]
  prom-           %172.0 = MkArg                    unboundValue, setClass[0x5638bd443bd0]_p31, e0.1
  prom-           %172.1 = MkArg                    unboundValue, setClass[0x5638bd443bd0]_p32, e0.1
  prom-           %172.2 = MkArg                    unboundValue, setClass[0x5638bd443bd0]_p33, e0.1
  val?            %172.3 = StaticCall         !v    completeClassDefinition[0x5638bdc3acd0](%172.0, %172.1, %172.2, false) { 0 1 2 3n } e0.1   <other>
  void                    StVar              lW    classDef, %172.3, e0.1
  val?^ | miss    %172.5 = LdVar              eR    .uncacheClass, e0.1
  lgl$#-          %172.6 = Identical                %172.5, function(name, def) <(rir::DispatchTable*)0x56|...
  void                    Branch                   %172.6 -> BB174 (if true) | BB175 (if false)
BB173   <- [170]
  fs              %173.0 = FrameState         R     0x5638c5814fa0+2005: [], env=e0.1
  void                    Deopt              !v    %173.0, CallTarget@0x5638bd89be00[Call#37], %170.3   !
BB174   <- [172]
  prom-           %174.0 = MkArg                    unboundValue, setClass[0x5638bd443bd0]_p34, e0.1
  prom-           %174.1 = MkArg                    unboundValue, setClass[0x5638bd443bd0]_p35 (!refl), e0.1
  val?            %174.2 = StaticCall         !v    .uncacheClass[0x5638bcc09350](%174.0, %174.1) e0.1
  val?^ | miss    %174.3 = LdVar              eR    length, e0.1
  lgl$#-          %174.4 = Identical                <blt length>, %174.3   <true>
  void                    Branch                   %174.4 -> BB176 (if true) | BB177 (if false)
BB175   <- [172]
  fs              %175.0 = FrameState         R     0x5638c5814fa0+2082: [], env=e0.1
  void                    Deopt              !v    %175.0, CallTarget@0x5638bd89be00[Call#38], %172.5   !
BB176   <- [174]
  val?^ | miss    %176.0 = LdVar              eR    superClasses, e0.1
  lgl$#-          %176.1 = IsType                   %176.0 isA val?~- | miss
  void                    Branch                   %176.1 -> BB178 (if true) | BB179 (if false)
BB177   <- [174]
  void                    Nop                !     
  lgl$#-          %177.1 = %174.4
  dr              %177.2 = DeadBranchReached@0x5638bd89be00[Test#13]
  goto BB56
BB178   <- [176]
  val?~- | miss   %178.0 = CastType           d     dn %176.0
  val?-           %178.1 = Force!<value>            %178.0,    <nil->
  (int|real)$-    %178.2 = CallSafeBuiltin    wed   length(%178.1)    <int$->
  lgl$#-          %178.3 = IsType                   %178.2 isA int$-
  void                    Branch                   %178.3 -> BB180 (if true) | BB181 (if false)
BB179   <- [176]
  void                    Nop                !     
  val?^ | miss    %179.1 = %176.0
  dr              %179.2 = Typecheck@0x5638bd89be00[Type#111]
  goto BB56
BB56   <- [177, 179]
  val?^ | miss    %56.0 = Phi                      %177.1:BB177, %179.1:BB179
  val?^ | miss    %56.1 = %56.0
  dr              %56.2 = Phi                      %177.2:BB177, %179.2:BB179
  dr              %56.3 = %56.2
  fs              %56.4 = FrameState         R     0x5638c5814fa0+2119: [%174.2], env=e0.1
  void                    Deopt              !v    %56.4, %56.3, %56.1   !
BB180   <- [178]
  int$-           %180.0 = CastType           d     dn %178.2
  lgl$-           %180.1 = Gt                 d     %180.0, 0L, elided   <lgl$->
  lgl$#-          %180.2 = CheckTrueFalse     e     %180.1
  void                    Branch                   %180.2 -> BB77 (if true) | BB60 (if false)
BB181   <- [178]
  fs              %181.0 = FrameState         R     0x5638c5814fa0+2211: [%178.2], env=e0.1
  void                    Deopt              !v    %181.0, Typecheck@0x5638bd89be00[Type#112], %178.2   !
BB77   <- [180]
  (cls|spec|blt)  %77.0 = LdFun              !v    @, e0.1
  fs              %77.1 = FrameState         R     0x5638c5814fa0+2244: [%77.0], env=e0.1
  void                    Deopt              !v    %77.1, DeadCall@0x5638bd89be00[Call#40], %77.0   !
BB60   <- [180]
  val?^ | miss    %60.0 = LdVar              eR    S3methods, e0.1
  val?            %60.1 = Force!<lazy>       !v    %60.0, e0.1   <lgl$->
  lgl$#-          %60.2 = CheckTrueFalse     we    %60.1
  void                    Branch                   %60.2 -> BB76 (if true) | BB63 (if false)
BB76   <- [60]
  (cls|spec|blt)  %76.0 = LdFun              !v    .setS3MethodsOn, e0.1
  fs              %76.1 = FrameState         R     0x5638c5814fa0+4164: [%76.0], env=e0.1
  void                    Deopt              !v    %76.1, DeadCall@0x5638bd89be00[Call#104], %76.0   !
BB63   <- [60]
  val?^ | miss    %63.0 = LdVar              eR    assignClassDef, e0.1
  lgl$#-          %63.1 = Identical                %63.0, function(Class, def, where=.GlobalEnv, force=F|...
  void                    Branch                   %63.1 -> BB182 (if true) | BB183 (if false)
BB182   <- [63]
  prom-           %182.0 = MkArg                    unboundValue, setClass[0x5638bd443bd0]_p36, e0.1
  prom-           %182.1 = MkArg                    unboundValue, setClass[0x5638bd443bd0]_p37, e0.1
  prom-           %182.2 = MkArg                    unboundValue, setClass[0x5638bd443bd0]_p38, e0.1
  val?            %182.3 = StaticCall         !v    assignClassDef[0x5638c06e4120](%182.0, %182.1, %182.2) e0.1
  val?^ | miss    %182.4 = LdVar              eR    invisible, e0.1
  lgl$#-          %182.5 = Identical                <blt invisible>, %182.4   <true>
  void                    Branch                   %182.5 -> BB184 (if true) | BB185 (if false)
BB183   <- [63]
  fs              %183.0 = FrameState         R     0x5638c5814fa0+4149: [%60.2], env=e0.1
  void                    Deopt              !v    %183.0, CallTarget@0x5638bd89be00[Call#105], %63.0   !
BB184   <- [182]
  val?^ | miss    %184.0 = LdVar              eR    classGeneratorFunction, e0.1
  lgl$#-          %184.1 = Identical                %184.0, function(classDef, env=topenv(parent.frame()))|...
  void                    Branch                   %184.1 -> BB186 (if true) | BB187 (if false)
BB185   <- [182]
  void                    Nop                !     
  lgl$#-          %185.1 = %182.5
  dr              %185.2 = DeadBranchReached@0x5638bd89be00[Test#20]
  goto BB64
BB186   <- [184]
  prom-           %186.0 = MkArg                    unboundValue, setClass[0x5638bd443bd0]_p39, e0.1
  prom-           %186.1 = MkArg                    unboundValue, setClass[0x5638bd443bd0]_p40, e0.1
  ct              %186.2 = PushContext        lCL   %186.0, %186.1, classGeneratorFunction(classDef, where), function(classDef, env=topenv(parent.frame()))|..., e0.1
  val?^           %186.3 = CastType                 up %186.1
  val?^           %186.4 = CastType                 up %186.0
  env             e186.5 = MkEnv              l     classDef=%186.4, env=%186.3, parent=<env 0x5638ba074378>, context 1
  cls             %186.6 = MkCls                    , e186.5
  val?^ | miss    %186.7 = LdVar              eR    is, <env 0x5638ba074378>
  lgl$#-          %186.8 = Identical                %186.7, function(object, class2) <(rir::DispatchTable*|...
  void                    Branch                   %186.8 -> BB188 (if true) | BB189 (if false)
BB187   <- [184]
  void                    Nop                !     
  val?^ | miss    %187.1 = %184.0
  dr              %187.2 = CallTarget@0x5638bd89be00[Call#108]
  goto BB64
BB64   <- [185, 187, 189]
  val?^ | miss    %64.0 = Phi                      %185.1:BB185, %187.1:BB187, %189.1:BB189
  val?^ | miss    %64.1 = %64.0
  dr              %64.2 = Phi                      %185.2:BB185, %187.2:BB187, %189.2:BB189
  dr              %64.3 = %64.2
  fs              %64.4 = FrameState         R     0x5638c5814fa0+4247: [%182.3], env=e0.1
  void                    Deopt              !v    %64.4, %64.3, %64.1   !
BB188   <- [186]
  prom-           %188.0 = MkArg                    unboundValue, setClass[0x5638bd443bd0]_p43, e186.5
  val?            %188.1 = Call               !v    function(object, class2) <(rir::DispatchTable*|...(%188.0, "classRepresentation") e186.5   <lgl$->
  lgl$#-          %188.2 = IsType                   %188.1 isA lgl$-
  void                    Branch                   %188.2 -> BB190 (if true) | BB191 (if false)
BB189   <- [186]
  void                    DropContext        C     
  val?^ | miss    %189.1 = %186.7
  dr              %189.2 = CallTarget@0x5638c5b43f18[Call#2]
  goto BB64
BB190   <- [188]
  lgl$-           %190.0 = CastType           d     dn %188.1
  lgl$#-          %190.1 = CheckTrueFalse     e     %190.0
  void                    Branch                   %190.1 -> BB69 (if true) | BB68 (if false)
BB191   <- [188]
  fs              %191.0 = FrameState         R     0x5638c5814fa0+4345: [<blt invisible>], env=e0.1
  fs              %191.1 = FrameState         R     0x5638c16eb540+37: [%188.1], env=e186.5, next=%191.0
  void                    Deopt              !v    %191.1, Typecheck@0x5638c5b43f18[Type#3], %188.1   !
BB69   <- [190]
  void                    StVar              lW    fun, %186.6, e186.5
  (cls|spec|blt)  %69.1 = LdFun              !v    substitute, <0x5638b9a6c468>, e186.5
  prom-           %69.2 = MkArg                    unboundValue, setClass[0x5638bd443bd0]_p44, e186.5
  prom-           %69.3 = MkArg                    unboundValue, setClass[0x5638bd443bd0]_p46, e186.5
  val?            %69.4 = Call               !v    %69.1(%69.2, %69.3) e186.5   <code->
  val?^ | miss    %69.5 = LdVar              eR    body<-, e186.5
  lgl$#-          %69.6 = Identical                %69.5, function(fun, envir=environment(fun), value) <|...
  void                    Branch                   %69.6 -> BB192 (if true) | BB193 (if false)
BB68   <- [190]
  fs              %68.0 = FrameState         R     0x5638c5814fa0+4345: [<blt invisible>], env=e0.1
  (cls|spec|blt)  %68.1 = LdFun              !v    is, e186.5
  fs              %68.2 = FrameState         R     0x5638c16eb540+53: [%68.1], env=e186.5, next=%68.0
  void                    Deopt              !v    %68.2, DeadCall@0x5638c5b43f18[Call#3], %68.1   !
BB192   <- [69]
  val?^ | miss    %192.0 = LdVar              eR    fun, e186.5
  lgl$#-          %192.1 = IsType                   %192.0 isA val?~- | miss
  void                    Branch                   %192.1 -> BB194 (if true) | BB195 (if false)
BB193   <- [69]
  void                    Nop                !     
  val?^ | miss    %193.1 = %69.5
  dr              %193.2 = CallTarget@0x5638c5b43f18[Call#12]
  goto BB70
BB194   <- [192]
  val?~- | miss   %194.0 = CastType           d     dn %192.0
  val?-           %194.1 = Force!<value>            %194.0,    <cls->
  val?            %194.2 = StaticCall         !v    body<-[0x5638c6048a50](%194.1, missingArg, %69.4) { 0 2n } e186.5
  void                    StVar              lW    fun, %194.2, e186.5
  val?^ | miss    %194.4 = LdVar              eR    env, e186.5
  val?            %194.5 = Force!<lazy>       !v    %194.4, e186.5   <env->
  (cls|spec|blt)  %194.6 = LdFun              !v    environment<-, <0x5638b9a81128>, e186.5
  val?^ | miss    %194.7 = LdVar              eR    fun, e186.5
  lgl$#-          %194.8 = IsType                   %194.7 isA val?~- | miss
  void                    Branch                   %194.8 -> BB196 (if true) | BB197 (if false)
BB195   <- [192]
  void                    Nop                !     
  val?^ | miss    %195.1 = %192.0
  dr              %195.2 = Typecheck@0x5638c5b43f18[Type#20]
  goto BB70
BB70   <- [193, 195]
  val?^ | miss    %70.0 = Phi                      %193.1:BB193, %195.1:BB195
  val?^ | miss    %70.1 = %70.0
  dr              %70.2 = Phi                      %193.2:BB193, %195.2:BB195
  dr              %70.3 = %70.2
  fs              %70.4 = FrameState         R     0x5638c5814fa0+4345: [<blt invisible>], env=e0.1
  fs              %70.5 = FrameState         R     0x5638c16eb540+354: [%69.4], env=e186.5, next=%70.4
  void                    Deopt              !v    %70.5, %70.3, %70.1   !
BB196   <- [194]
  val?~- | miss   %196.0 = CastType           d     dn %194.7
  val?-           %196.1 = Force!<value>            %196.0,    <cls->
  val?            %196.2 = NamedCall          !v    %194.6(%196.1, value=%194.5) e186.5
  void                    StVar              lW    fun, %196.2, e186.5
  val?^ | miss    %196.4 = LdVar              eR    as, e186.5
  lgl$#-          %196.5 = Identical                %196.4, function(object, Class, strict=TRUE, ext=possi|...
  void                    Branch                   %196.5 -> BB198 (if true) | BB199 (if false)
BB197   <- [194]
  fs              %197.0 = FrameState         R     0x5638c5814fa0+4345: [<blt invisible>], env=e0.1
  fs              %197.1 = FrameState         R     0x5638c16eb540+441: [%194.5], env=e186.5, next=%197.0
  void                    Deopt              !v    %197.1, Typecheck@0x5638c5b43f18[Type#22], %194.7   !
BB198   <- [196]
  prom-           %198.0 = MkArg                    unboundValue, setClass[0x5638bd443bd0]_p52 (!refl), e186.5
  val?            %198.1 = Call               !v    function(object, Class, strict=TRUE, ext=possi|...(%198.0, "classGeneratorFunction") e186.5   <cls>
  void                    StVar              lW    fun, %198.1, e186.5
  (cls|spec|blt)  %198.3 = LdFun              !v    <-, <0x5638b9a61da8>, e186.5
  prom-           %198.4 = MkArg                    unboundValue, setClass[0x5638bd443bd0]_p53, e186.5
  prom-           %198.5 = MkArg                    unboundValue, setClass[0x5638bd443bd0]_p56, e186.5
  val?            %198.6 = Call               !v    %198.3(%198.4, %198.5) e186.5
  (cls|spec|blt)  %198.7 = LdFun              !v    <-, <0x5638b9a61da8>, e186.5
  prom-           %198.8 = MkArg                    unboundValue, setClass[0x5638bd443bd0]_p59, e186.5
  prom-           %198.9 = MkArg                    unboundValue, setClass[0x5638bd443bd0]_p62, e186.5
  val?            %198.10 = Call               !v    %198.7(%198.8, %198.9) e186.5
  val?^ | miss    %198.11 = LdVar              eR    fun, e186.5
  val?            %198.12 = Force!<value>      !v    %198.11, e186.5   <cls>
  val?            %198.13 = PopContext         C     %198.12, %186.2   <cls>
  void                    Invisible          v     
  void                    Return             l     %198.13
BB199   <- [196]
  fs              %199.0 = FrameState         R     0x5638c5814fa0+4345: [<blt invisible>], env=e0.1
  fs              %199.1 = FrameState         R     0x5638c16eb540+509: [], env=e186.5, next=%199.0
  void                    Deopt              !v    %199.1, CallTarget@0x5638c5b43f18[Call#14], %196.4   !
Prom 0:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     list, <0x5638b9a815c0>, e0.0
  val?            %0.2  = Call               !     %0.1() e0.0   <vec->
  void                    Return             l     %0.2
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     character, <0x5638ba2067e0>, e0.0
  val?            %0.2  = Call               !     %0.1() e0.0   <str->
  void                    Return             l     %0.2
Prom 4:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     list, <0x5638b9a815c0>, e0.0
  val?            %0.2  = Call               !     %0.1() e0.0   <vec->
  void                    Return             l     %0.2
Prom 5:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     topenv, <0x5638b9f91b08>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, setClass[0x5638bd443bd0]_p6, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <env->
  void                    Return             l     %0.3
Prom 6:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     parent.frame, <0x5638b9b81170>, e0.0
  val?            %0.2  = Call               !     %0.1() e0.0   <env->
  void                    Return             l     %0.2
Prom 7:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     .newExternalptr, <0x5638c58deb90>, e0.0
  val?            %0.2  = Call               !     %0.1() e0.0   <other->
  void                    Return             l     %0.2
Prom 9:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     getPackageName, <0x5638bc9af858>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, setClass[0x5638bd443bd0]_p10, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <str$->
  void                    Return             l     %0.3
Prom 10:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 12:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    Class, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 13:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 14:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    oldDef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <(nil|other)>
  void                    Return             l     %0.3
Prom 15:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    oldDef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 16:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    sealed, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 17:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    representation, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <vec->
  void                    Return             l     %0.3
Prom 18:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    representation, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <vec->
  void                    Return             l     %0.3
Prom 19:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    Class, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 20:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    properties, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <vec->
  void                    Return             l     %0.3
Prom 21:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    superClasses, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 22:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    prototype, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <nil->
  void                    Return             l     %0.3
Prom 23:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    package, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 24:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    validity, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <nil->
  void                    Return             l     %0.3
Prom 25:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    access, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <vec->
  void                    Return             l     %0.3
Prom 26:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    version, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <other->
  void                    Return             l     %0.3
Prom 27:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    sealed, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <lgl$->
  void                    Return             l     %0.3
Prom 28:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 29:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    classDef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 30:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    contains, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 31:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    Class, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 32:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    classDef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <other>
  void                    Return             l     %0.3
Prom 33:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 34:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    Class, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 35:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    classDef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <other>
  void                    Return             l     %0.3
Prom 36:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    Class, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 37:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    classDef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <other>
  void                    Return             l     %0.3
Prom 38:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 39:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    classDef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <other>
  void                    Return             l     %0.3
Prom 40:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 41:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     length, <0x5638b9a6da90>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, setClass[0x5638bd443bd0]_p42, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <int$->
  void                    Return             l     %0.3
Prom 42:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    x, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <vec->
  void                    Return             l     %0.3
Prom 43:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    classDef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <other>
  void                    Return             l     %0.3
Prom 44:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     new, e0.0
  prom-           %0.2  = MkArg                    unboundValue, setClass[0x5638bd443bd0]_p45, e0.0
  (miss|dots)     %0.3  = LdDots             R     , e0.0
  *dots-          %0.4  = ExpandDots               %0.3
  val?            %0.5  = NamedCall          !     %0.1(%0.2, .xpandDotsTrigger=%0.4) e0.0   <val?_>
  void                    Return             l     %0.5
Prom 45:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    CLASS, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 46:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     list, e0.0
  prom-           %0.2  = MkArg                    unboundValue, setClass[0x5638bd443bd0]_p47, e0.0
  val?            %0.3  = NamedCall          !     %0.1(CLASS=%0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 47:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, e0.0
  prom-           %0.2  = MkArg                    unboundValue, setClass[0x5638bd443bd0]_p48, e0.0
  prom-           %0.3  = MkArg                    unboundValue, setClass[0x5638bd443bd0]_p49, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 48:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    classDef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 49:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    className, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 52:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fun, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls->
  void                    Return             l     %0.3
Prom 53:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, e0.0
  prom-           %0.2  = MkArg                    unboundValue, setClass[0x5638bd443bd0]_p54, e0.0
  prom-           %0.3  = MkArg                    unboundValue, setClass[0x5638bd443bd0]_p55, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 54:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fun, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 55:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    className, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 56:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, e0.0
  prom-           %0.2  = MkArg                    unboundValue, setClass[0x5638bd443bd0]_p57, e0.0
  prom-           %0.3  = MkArg                    unboundValue, setClass[0x5638bd443bd0]_p58, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 57:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    classDef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 58:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    className, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 59:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, e0.0
  prom-           %0.2  = MkArg                    unboundValue, setClass[0x5638bd443bd0]_p60, e0.0
  prom-           %0.3  = MkArg                    unboundValue, setClass[0x5638bd443bd0]_p61, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 60:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fun, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 61:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    package, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 62:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, e0.0
  prom-           %0.2  = MkArg                    unboundValue, setClass[0x5638bd443bd0]_p63, e0.0
  prom-           %0.3  = MkArg                    unboundValue, setClass[0x5638bd443bd0]_p64, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 63:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    classDef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 64:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    package, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3

│ setClass[0x5638bd443bd0]                                                     │
└──────────────────────────────────────────────────────────────────────────────┘
