
┌──────────────────────────────────────────────────────────────────────────────┐
│ possibleExtends[0x5638b9d71df0]                                              │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;NonRefl0,NonRefl1,NonRefl2,NonRefl3,!Obj0,!Obj1│
│ Properties:                                                                  │
├────── Final PIR Version
possibleExtends[0x5638b9d71df0]
BB0
  val?^           %0.0  = LdArg                    3
  val?^           %0.1  = LdArg                    2
  val?^           %0.2  = LdArg                    1
  val?^           %0.3  = LdArg                    0
  val?^ | miss    %0.4  = LdVar              eR    .identC, <env 0x5638ba074378>
  lgl$#-          %0.5  = Identical                %0.4, function(c1=NULL, c2=NULL) <(rir::DispatchTabl|...
  void                    Branch                   %0.5 -> BB56 (if true) | BB57 (if false)
BB56   <- [0]
  env             e56.0 = MkEnv              l     class1=%0.3, class2=%0.2, ClassDef1=%0.1, ClassDef2=%0.0, parent=<env 0x5638ba074378>, context 1
  prom-           %56.1 = MkArg                    unboundValue, possibleExtends[0x5638b9d71df0]_p0, e56.0
  prom-           %56.2 = MkArg                    unboundValue, possibleExtends[0x5638b9d71df0]_p1 (!refl), e56.0
  val?            %56.3 = StaticCall         !v    .identC[0x5638c0c1bf60](%56.1, %56.2) e56.0   <lgl$->
  lgl$#-          %56.4 = IsType                   %56.3 isA lgl$-
  void                    Branch                   %56.4 -> BB58 (if true) | BB59 (if false)
BB57   <- [0]
  env             e57.0 = (MkEnv)            l     class1=%0.3, class2=%0.2, ClassDef1=%0.1, ClassDef2=%0.0, parent=<env 0x5638ba074378>, context 1
  fs              %57.1 = FrameState         R     0x5638bce09660+0: [], env=e57.0
  void                    Deopt              !v    %57.1, CallTarget@0x5638bdeac8f0[Call#3], %0.4
BB58   <- [56]
  lgl$-           %58.0 = CastType           d     dn %56.3
  lgl$-           %58.1 = AsLogical                %58.0
  lgl$#-          %58.2 = Identical                %58.1, true
  void                    Branch                   %58.2 -> BB54 (if true) | BB5 (if false)
BB59   <- [56]
  void                    Nop                !     
  val?            %59.1 = %56.3
  dr              %59.2 = Typecheck@0x5638bdeac8f0[Type#9]
  goto BB3
BB54   <- [58]
  void                    Nop                !     
  lgl$-           %54.1 = %58.1
  goto BB8
BB5   <- [58]
  val?^ | miss    %5.0  = LdVar              eR    .identC, e56.0
  lgl$#-          %5.1  = Identical                %5.0, function(c1=NULL, c2=NULL) <(rir::DispatchTabl|...
  void                    Branch                   %5.1 -> BB60 (if true) | BB61 (if false)
BB3   <- [59, 61]
  val?^ | miss    %3.0  = Phi                      %59.1:BB59, %61.1:BB61
  val?^ | miss    %3.1  = %3.0
  dr              %3.2  = Phi                      %59.2:BB59, %61.2:BB61
  dr              %3.3  = %3.2
  fs              %3.4  = FrameState         R     0x5638bce09660+37: [%56.3], env=e56.0
  void                    Deopt              !v    %3.4, %3.3, %3.1   !
BB8   <- [54, 62]
  lgl$-           %8.0  = Phi                      %62.3:BB62, %54.1:BB54
  lgl$-           %8.1  = %8.0
  lgl$#-          %8.2  = CheckTrueFalse     e     %8.1
  void                    Branch                   %8.2 -> BB53 (if true) | BB9 (if false)
BB60   <- [5]
  prom-           %60.0 = MkArg                    unboundValue, possibleExtends[0x5638b9d71df0]_p2, e56.0
  val?            %60.1 = StaticCall         !v    .identC[0x5638bc2f3900](%60.0, "ANY") e56.0   <lgl$->
  lgl$#-          %60.2 = IsType                   %60.1 isA lgl$-
  void                    Branch                   %60.2 -> BB62 (if true) | BB63 (if false)
BB61   <- [5]
  void                    Nop                !     
  val?^ | miss    %61.1 = %5.0
  dr              %61.2 = CallTarget@0x5638bdeac8f0[Call#4]
  goto BB3
BB53   <- [8]
  void                    Visible            v     
  lgl$#-          %53.1 = true
  goto BB40
BB9   <- [8]
  val?^ | miss    %9.0  = LdVar              eR    ClassDef1, e56.0
  val?            %9.1  = Force!<lazy>       !v    %9.0, e56.0   <other>
  lgl$-           %9.2  = Is                       %9.1, NULL
  lgl$#-          %9.3  = CheckTrueFalse     e     %9.2
  void                    Branch                   %9.3 -> BB52 (if true) | BB10 (if false)
BB62   <- [60]
  lgl$-           %62.0 = CastType           d     dn %60.1
  lgl$-           %62.1 = AsLogical                %62.0
  lgl$-           %62.2 = LOr                      %58.1, %62.1
  lgl$-           %62.3 = %62.2
  goto BB8
BB63   <- [60]
  fs              %63.0 = FrameState         R     0x5638bce09660+86: [%58.1, %60.1], env=e56.0
  void                    Deopt              !v    %63.0, Typecheck@0x5638bdeac8f0[Type#11], %60.1   !
BB40   <- [52, 53, 39]
  val?            %40.0 = Phi                      %39.2:BB39, %52.1:BB52, %53.1:BB53
  val?            %40.1 = %40.0
  void                    Return             l     %40.1
BB52   <- [9]
  void                    Visible            v     
  lgl$#-          %52.1 = false
  goto BB40
BB10   <- [9]
  (cls|spec|blt)  %10.0 = LdFun              !v    @, <0x5638b9a6cbd8>, e56.0
  prom-           %10.1 = MkArg                    unboundValue, possibleExtends[0x5638b9d71df0]_p3, e56.0
  prom-           %10.2 = MkArg                    unboundValue, possibleExtends[0x5638b9d71df0]_p4, e56.0
  val?            %10.3 = Call               !v    %10.0(%10.1, %10.2) e56.0   <vec+>
  void                    StVar              lW    ext, %10.3, e56.0
  lgl$#-          %10.5 = IsType                   %10.3 isA val+   <true>
  val             %10.6 = ChkMissing         e     %10.3
  void                    Branch                   %10.5 -> BB64 (if true) | BB65 (if false)
BB64   <- [10]
  val?^ | miss    %64.0 = LdVar              eR    class2, e56.0
  val?            %64.1 = Force!<wrapped>    !v    %64.0, e56.0   <str$+>
  lgl$#-          %64.2 = IsType                   %64.1 isA val?+
  lgl$#-          %64.3 = IsType                   %10.3 isA val?+
  void                    Branch                   %64.3 -> BB66 (if true) | BB67 (if false)
BB65   <- [10]
  fs              %65.0 = FrameState         R     0x5638bce09660+199: [], env=e56.0
  void                    Deopt              !v    %65.0, DeadBranchReached@0x5638bdeac8f0[Test#1], %10.5   !
BB66   <- [64]
  val?+           %66.0 = CastType           d     dn %10.3   <vec+>
  void                    Branch                   %64.2 -> BB68 (if true) | BB69 (if false)
BB67   <- [64]
  void                    Nop                !     
  val?            %67.1 = %10.3
  dr              %67.2 = Typecheck@0x5638bdeac8f0[Type#15]
  goto BB13
BB68   <- [66]
  val?+           %68.0 = CastType           d     dn %64.1   <str$+>
  val?            %68.1 = Extract2_1D        wed   %66.0, %68.0, elided   <(nil|other)>
  lgl$-           %68.2 = Is                       %68.1, NULL
  void                    StVar              lW    contained, %68.1, e56.0
  lgl$-           %68.4 = Not                d     %68.2, elided
  lgl$#-          %68.5 = CheckTrueFalse     e     %68.4
  void                    Branch                   %68.5 -> BB51 (if true) | BB15 (if false)
BB69   <- [66]
  void                    Nop                !     
  val?            %69.1 = %64.1
  dr              %69.2 = Typecheck@0x5638bdeac8f0[Type#18]
  goto BB13
BB13   <- [67, 69]
  val?^ | miss    %13.0 = Phi                      %67.1:BB67, %69.1:BB69
  val?^ | miss    %13.1 = %13.0
  dr              %13.2 = Phi                      %67.2:BB67, %69.2:BB69
  dr              %13.3 = %13.2
  fs              %13.4 = FrameState         R     0x5638bce09660+253: [%10.3, %64.1], env=e56.0
  void                    Deopt              !v    %13.4, %13.3, %13.1   !
BB51   <- [68]
  val             %51.0 = ChkMissing         e     %68.1
  void                    Visible            v     
  val?            %51.2 = %68.1
  goto BB39
BB15   <- [68]
  val?^ | miss    %15.0 = LdVar              eR    ClassDef2, e56.0
  val?            %15.1 = Force!<lazy>       !v    %15.0, e56.0   <other>
  lgl$-           %15.2 = Is                       %15.1, NULL
  lgl$#-          %15.3 = CheckTrueFalse     e     %15.2
  void                    Branch                   %15.3 -> BB50 (if true) | BB16 (if false)
BB39   <- [51, 38]
  val?            %39.0 = Phi                      %38.2:BB38, %51.2:BB51
  val?            %39.1 = %39.0
  val?            %39.2 = %39.1
  goto BB40
BB50   <- [15]
  void                    Visible            v     
  lgl$#-          %50.1 = false
  goto BB38
BB16   <- [15]
  (cls|spec|blt)  %16.0 = LdFun              !v    @, <0x5638b9a6cbd8>, e56.0
  prom-           %16.1 = MkArg                    unboundValue, possibleExtends[0x5638b9d71df0]_p5, e56.0
  prom-           %16.2 = MkArg                    unboundValue, possibleExtends[0x5638b9d71df0]_p6, e56.0
  val?            %16.3 = Call               !v    %16.0(%16.1, %16.2) e56.0   <vec+>
  void                    StVar              lW    subs, %16.3, e56.0
  val?^ | miss    %16.5 = LdVar              eR    .identC, e56.0
  lgl$#-          %16.6 = Identical                %16.5, function(c1=NULL, c2=NULL) <(rir::DispatchTabl|...
  void                    Branch                   %16.6 -> BB70 (if true) | BB71 (if false)
BB38   <- [50, 37]
  val?            %38.0 = Phi                      %37.2:BB37, %50.1:BB50
  val?            %38.1 = %38.0
  val?            %38.2 = %38.1
  goto BB39
BB70   <- [16]
  prom-           %70.0 = MkArg                    unboundValue, possibleExtends[0x5638b9d71df0]_p7, e56.0
  val?            %70.1 = StaticCall         !v    .identC[0x5638bc2f3900](%70.0, "classRepresentation") e56.0   <lgl$->
  lgl$#-          %70.2 = IsType                   %70.1 isA lgl$-
  void                    Branch                   %70.2 -> BB72 (if true) | BB73 (if false)
BB71   <- [16]
  fs              %71.0 = FrameState         R     0x5638bce09660+364: [], env=e56.0
  void                    Deopt              !v    %71.0, CallTarget@0x5638bdeac8f0[Call#7], %16.5   !
BB72   <- [70]
  lgl$-           %72.0 = CastType           d     dn %70.1
  lgl$-           %72.1 = Not                d     %72.0, elided
  lgl$-           %72.2 = AsLogical                %72.1
  lgl$#-          %72.3 = Identical                %72.2, false
  void                    Branch                   %72.3 -> BB22 (if true) | BB21 (if false)
BB73   <- [70]
  void                    Nop                !     
  val?            %73.1 = %70.1
  dr              %73.2 = Typecheck@0x5638bdeac8f0[Type#26]
  goto BB19
BB22   <- [72]
  lgl$#-          %22.0 = CheckTrueFalse     e     %72.2
  void                    Branch                   %22.0 -> BB47 (if true) | BB23 (if false)
BB21   <- [72]
  (cls|spec|blt)  %21.0 = LdFun              !v    isClassUnion, e56.0
  fs              %21.1 = FrameState         R     0x5638bce09660+419: [%72.2, %21.0], env=e56.0
  void                    Deopt              !v    %21.1, DeadCall@0x5638bdeac8f0[Call#9], %21.0   !
BB19   <- [73, 75]
  val?^ | miss    %19.0 = Phi                      %73.1:BB73, %75.1:BB75
  val?^ | miss    %19.1 = %19.0
  dr              %19.2 = Phi                      %73.2:BB73, %75.2:BB75
  dr              %19.3 = %19.2
  fs              %19.4 = FrameState         R     0x5638bce09660+401: [%70.1], env=e56.0
  void                    Deopt              !v    %19.4, %19.3, %19.1   !
BB47   <- [22]
  val?^ | miss    %47.0 = LdVar              eR    any, e56.0
  lgl$#-          %47.1 = Identical                <blt any>, %47.0   <@?>
  void                    Branch                   %47.1 -> BB49 (if true) | BB48 (if false)
BB23   <- [22]
  val?^ | miss    %23.0 = LdVar              eR    match, e56.0
  lgl$#-          %23.1 = Identical                %23.0, function(x, table, nomatch=NA, incomparables=N|...
  void                    Branch                   %23.1 -> BB74 (if true) | BB75 (if false)
BB49   <- [47]
  (cls|spec|blt)  %49.0 = LdFun              !v    %in%, e56.0
  fs              %49.1 = FrameState         R     0x5638bce09660+961: [<blt any>, %49.0], env=e56.0
  void                    Deopt              !v    %49.1, DeadCall@0x5638bdeac8f0[Call#20], %49.0   !
BB48   <- [47]
  (cls|spec|blt)  %48.0 = LdFun              !v    any, e56.0
  fs              %48.1 = FrameState         R     0x5638bce09660+924: [%48.0], env=e56.0
  void                    Deopt              !v    %48.1, DeadCall@0x5638bdeac8f0[Call#15], %48.0   !
BB74   <- [23]
  val?^ | miss    %74.0 = LdVar              eR    class1, e56.0
  val?            %74.1 = Force!<wrapped>    !v    %74.0, e56.0   <str$+>
  val?^ | miss    %74.2 = LdVar              eR    names, e56.0
  lgl$#-          %74.3 = Identical                %74.2, <blt names>
  void                    Branch                   %74.3 -> BB76 (if true) | BB77 (if false)
BB75   <- [23]
  void                    Nop                !     
  val?^ | miss    %75.1 = %23.0
  dr              %75.2 = CallTarget@0x5638bdeac8f0[Call#10]
  goto BB19
BB76   <- [74]
  val?^ | miss    %76.0 = LdVar              eR    subs, e56.0
  val?            %76.1 = Force!<value>      !v    %76.0, e56.0   <vec+>
  val?            %76.2 = CallBuiltin        !v    names(%76.1) e56.0   <(nil|str)->
  lgl$#-          %76.3 = IsType                   %76.2 isA val?+
  lgl$#-          %76.4 = IsType                   %74.1 isA val?+
  void                    Branch                   %76.4 -> BB78 (if true) | BB79 (if false)
BB77   <- [74]
  prom-           %77.0 = MkArg                    %74.1, possibleExtends[0x5638b9d71df0]_p9 (!refl), e56.0
  val?~           %77.1 = CastType                 up %77.0
  prom-           %77.2 = MkArg                    unboundValue, possibleExtends[0x5638b9d71df0]_p10, e56.0
  val?^           %77.3 = CastType                 up %77.2
  fs              %77.4 = FrameState         R     0x5638bce09660+496: [], env=e56.0
  env             e77.5 = (MkEnv)            l     x=%77.1, table=%77.3, nomatch(miss)=NA, incomparables(miss)=nil, parent=R_BaseNamespace, context 0
  fs              %77.6 = FrameState         R     0x5638ba281d40+9: [%74.1], env=e77.5, next=%77.4
  void                    Deopt              !v    %77.6, CallTarget@0x5638bdeac8f0[Call#11], %74.2   !
BB78   <- [76]
  val?+           %78.0 = CastType           d     dn %74.1   <(int|str)+>
  void                    Branch                   %76.3 -> BB80 (if true) | BB81 (if false)
BB79   <- [76]
  void                    Nop                !     
  val?            %79.1 = %74.1
  dr              %79.2 = Typecheck@0x5638ba2d4cb0[Type#0]
  goto BB26
BB80   <- [78]
  val?+           %80.0 = CastType           d     dn %76.2   <(nil|str)->
  val+            %80.1 = CallSafeBuiltin    wed   match(%78.0, %80.0, NA, nil)    <int$->
  lgl$#-          %80.2 = IsType                   %80.1 isA int$-
  void                    Branch                   %80.2 -> BB82 (if true) | BB83 (if false)
BB81   <- [78]
  void                    Nop                !     
  val?            %81.1 = %76.2
  dr              %81.2 = Typecheck@0x5638ba2d4cb0[Type#1]
  goto BB26
BB26   <- [79, 81]
  val?^ | miss    %26.0 = Phi                      %79.1:BB79, %81.1:BB81
  val?^ | miss    %26.1 = %26.0
  dr              %26.2 = Phi                      %79.2:BB79, %81.2:BB81
  dr              %26.3 = %26.2
  prom-           %26.4 = MkArg                    %76.2, possibleExtends[0x5638b9d71df0]_p10 (!refl), e56.0
  val?~           %26.5 = CastType                 up %26.4
  prom-           %26.6 = MkArg                    %74.1, possibleExtends[0x5638b9d71df0]_p9 (!refl), e56.0
  val?~           %26.7 = CastType                 up %26.6
  fs              %26.8 = FrameState         R     0x5638bce09660+496: [], env=e56.0
  env             e26.9 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%26.5, x=%26.7, parent=R_BaseNamespace, context 0
  fs              %26.10 = FrameState         R     0x5638ba281d40+23: [%74.1, %76.2], env=e26.9, next=%26.8
  void                    Deopt              !v    %26.10, %26.3, %26.1   !
BB82   <- [80]
  int$-           %82.0 = CastType           d     dn %80.1
  void                    StVar              lW    i, %82.0, e56.0
  val?^ | miss    %82.2 = LdVar              eR    is.na, e56.0
  lgl$#-          %82.3 = Identical                <blt is.na>, %82.2   <true>
  void                    Branch                   %82.3 -> BB84 (if true) | BB85 (if false)
BB83   <- [80]
  prom-           %83.0 = MkArg                    %80.0, possibleExtends[0x5638b9d71df0]_p10 (!refl), e56.0
  val?~           %83.1 = CastType                 up %83.0
  prom-           %83.2 = MkArg                    %78.0, possibleExtends[0x5638b9d71df0]_p9 (!refl), e56.0
  val?~           %83.3 = CastType                 up %83.2
  fs              %83.4 = FrameState         R     0x5638bce09660+496: [], env=e56.0
  env             e83.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%83.1, x=%83.3, parent=R_BaseNamespace, context 0
  fs              %83.6 = FrameState         R     0x5638ba281d40+69: [%80.1], env=e83.5, next=%83.4
  void                    Deopt              !v    %83.6, Typecheck@0x5638bdeac8f0[Type#32], %80.1   !
BB84   <- [82]
  lgl$-           %84.0 = CallSafeBuiltin    wed   is.na(%82.0)    <lgl$->
  lgl$-           %84.1 = Not                d     %84.0, elided
  int-            %84.2 = Extract1_1D        wed   %82.0, %84.1, elided   <int->
  void                    StVar              lW    i, %84.2, e56.0
  val?^ | miss    %84.4 = LdVar              eR    length, e56.0
  lgl$#-          %84.5 = Identical                <blt length>, %84.4   <true>
  void                    Branch                   %84.5 -> BB86 (if true) | BB87 (if false)
BB85   <- [82]
  fs              %85.0 = FrameState         R     0x5638bce09660+510: [], env=e56.0
  void                    Deopt              !v    %85.0, DeadBranchReached@0x5638bdeac8f0[Test#3], %82.3   !
BB86   <- [84]
  (int|real)$-    %86.0 = CallSafeBuiltin    wed   length(%84.2)    <int$->
  lgl$#-          %86.1 = IsType                   %86.0 isA int$-
  void                    Branch                   %86.1 -> BB88 (if true) | BB89 (if false)
BB87   <- [84]
  fs              %87.0 = FrameState         R     0x5638bce09660+668: [], env=e56.0
  void                    Deopt              !v    %87.0, DeadBranchReached@0x5638bdeac8f0[Test#4], %84.5   !
BB88   <- [86]
  int$-           %88.0 = CastType           d     dn %86.0
  lgl$#-          %88.1 = CheckTrueFalse     e     %88.0
  void                    Branch                   %88.1 -> BB41 (if true) | BB36 (if false)
BB89   <- [86]
  fs              %89.0 = FrameState         R     0x5638bce09660+759: [%86.0], env=e56.0
  void                    Deopt              !v    %89.0, Typecheck@0x5638bdeac8f0[Type#42], %86.0   !
BB41   <- [88]
  val?^ | miss    %41.0 = LdVar              eR    subs, e56.0
  val?            %41.1 = Force!             !v    %41.0, e56.0   <val?_>
  lgl$#-          %41.2 = IsType                   %41.1 isA val+   <@?>
  void                    Branch                   %41.2 -> BB44 (if true) | BB42 (if false)
BB36   <- [88]
  void                    Visible            v     
  lgl$#-          %36.1 = false
  goto BB37
BB44   <- [41]
  val?^ | miss    %44.0 = LdVar              eR    i, e56.0
  val?            %44.1 = Force!             !v    %44.0, e56.0   <val?_>
  lgl$#-          %44.2 = IsType                   %44.1 isA val?+
  void                    Branch                   %44.2 -> BB90 (if true) | BB91 (if false)
BB42   <- [41]
  prom-           %42.0 = MkArg                    unboundValue, possibleExtends[0x5638b9d71df0]_p12, e56.0
  prom-           %42.1 = %42.0
  goto BB43
BB37   <- [36, 43]
  val?            %37.0 = Phi                      %36.1:BB36, %43.4:BB43
  val?            %37.1 = %37.0
  val?            %37.2 = %37.1
  goto BB38
BB90   <- [44]
  val?+           %90.0 = CastType           d     dn %44.1   <val?_>
  val?            %90.1 = Extract1_1D        wed   %90.0, 1L, elided   <val?_>
  val?            %90.2 = %90.1
  goto BB43
BB91   <- [44]
  fs              %91.0 = FrameState         R     0x5638bce09660+835: [%41.1, %44.1], env=e56.0
  void                    Deopt              !v    %91.0, Typecheck@0x5638bdeac8f0[Type#46], %44.1   !
BB43   <- [42, 90]
  val?            %43.0 = Phi                      %90.2:BB90, %42.1:BB42
  val?            %43.1 = %43.0
  val?            %43.2 = Extract2_1D        !v    %41.1, %43.1, e56.0   <val?_>
  void                    Visible            v     
  val?            %43.4 = %43.2
  goto BB37
Prom 0:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    class1, e0.0
  val?            %0.2  = Force<lazy>        !v    %0.1, e0.0   <str$+>
  val?            %0.3  = Extract2_1D        !v    %0.2, 1L, e0.0   <str$->
  void                    Visible            v     
  void                    Return             l     %0.3
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    class2, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str$+>
  void                    Return             l     %0.3
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    class2, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$+>
  void                    Return             l     %0.3
Prom 3:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    ClassDef1, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 4:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    contains, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 5:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    ClassDef2, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 6:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    subclasses, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 7:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     class, <0x5638b9a6d748>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, possibleExtends[0x5638b9d71df0]_p8, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <str$+>
  void                    Return             l     %0.3
Prom 8:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    ClassDef2, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <other>
  void                    Return             l     %0.3
Prom 9:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    class1, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$+>
  void                    Return             l     %0.3
Prom 10:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     names, <0x5638b9a6d470>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, possibleExtends[0x5638b9d71df0]_p11, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <(nil|str)->
  void                    Return             l     %0.3
Prom 11:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    subs, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 12:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    i, e0.0
  val?            %0.2  = Force              !v    %0.1, e0.0   <val?_>
  val?            %0.3  = Extract1_1D        !v    %0.2, 1L, e0.0   <val?_>
  void                    Visible            v     
  void                    Return             l     %0.3

│ possibleExtends[0x5638b9d71df0]                                              │
└──────────────────────────────────────────────────────────────────────────────┘
