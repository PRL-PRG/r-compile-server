
┌──────────────────────────────────────────────────────────────────────────────┐
│ .assignOverBinding[0x5638bea8bd70]                                           │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;Eager3,NonRefl3,!Obj3                │
│ Properties:  ForceOrd: 3                                                     │
├────── Final PIR Version
.assignOverBinding[0x5638bea8bd70]
BB0
  val?~+          %0.0  = LdArg                    3
  val?^           %0.1  = LdArg                    2
  val?^           %0.2  = LdArg                    1
  val?^           %0.3  = LdArg                    0
  val+            %0.4  = Force<value>             %0.0,    <lgl$->
  lgl$#-          %0.5  = CheckTrueFalse     we    %0.4
  void                    Branch                   %0.5 -> BB47 (if true) | BB3 (if false)
BB47   <- [0]
  env             e47.0 = (MkEnv)            l     what=%0.3, value=%0.2, where=%0.1, verbose=%0.0, parent=<env 0x5638ba074378>, context 1
  (cls|spec|blt)  %47.1 = LdFun              !v    getPackageName, <env 0x5638ba074378>
  fs              %47.2 = FrameState         R     0x5638bbc92fd0+30: [%47.1], env=e47.0
  void                    Deopt              !v    %47.2, DeadCall@0x5638bcb3f7e0[Call#0], %47.1
BB3   <- [0]
  val?^ | miss    %3.0  = LdVar              eR    options, <env 0x5638ba074378>
  lgl$#-          %3.1  = Identical                %3.0, function(...) <(rir::DispatchTable*)0x5638bb9d|...
  void                    Branch                   %3.1 -> BB49 (if true) | BB50 (if false)
BB49   <- [3]
  prom-           %49.0 = MkArg                    unboundValue, .assignOverBinding[0x5638bea8bd70]_p0 (!refl), 
  dots-           %49.1 = DotsList           l     warn=%49.0
  env             e49.2 = MkEnv              l     what=%0.3, value=%0.2, where=%0.1, verbose=%0.0, parent=<env 0x5638ba074378>, context 1
  ct              %49.3 = PushContext        lCL   %49.1, options(warn=-(1)), function(...) <(rir::DispatchTable*)0x5638bb9d|..., e49.2
  env             e49.4 = MkEnv              l     ...=%49.1, parent=R_BaseNamespace, context 1
  val?            %49.5 = NamedCall          !v    <blt options>(warn=%49.0) e49.4
  val?            %49.6 = PopContext         C     %49.5, %49.3   <vec$+>
  void                    StVar              lW    warnOpt, %49.6, e49.2
  (cls|spec|blt)  %49.8 = LdFun              !v    on.exit, <0x5638b9a6c270>, e49.2
  prom-           %49.9 = MkArg                    unboundValue, .assignOverBinding[0x5638bea8bd70]_p1, e49.2
  val?            %49.10 = Call               !v    %49.8(%49.9) e49.2
  val?^ | miss    %49.11 = LdVar              eR    is.function, e49.2
  lgl$#-          %49.12 = Identical                <blt is.function>, %49.11   <true>
  void                    Branch                   %49.12 -> BB51 (if true) | BB52 (if false)
BB50   <- [3]
  env             e50.0 = (MkEnv)            l     what=%0.3, value=%0.2, where=%0.1, verbose=%0.0, parent=<env 0x5638ba074378>, context 1
  fs              %50.1 = FrameState         R     0x5638bbc92fd0+15: [%0.5], env=e50.0
  void                    Deopt              !v    %50.1, CallTarget@0x5638bcb3f7e0[Call#6], %3.0
BB51   <- [49]
  val?^ | miss    %51.0 = LdVar              eR    value, e49.2
  val?            %51.1 = Force!<lazy>       !v    %51.0, e49.2   <cls>
  val?            %51.2 = CallBuiltin        !     is.function(%51.1) e49.2   <lgl$->
  lgl$#-          %51.3 = IsType                   %51.2 isA lgl$-
  void                    Branch                   %51.3 -> BB53 (if true) | BB54 (if false)
BB52   <- [49]
  fs              %52.0 = FrameState         R     0x5638bbc92fd0+255: [%49.10], env=e49.2
  void                    Deopt              !v    %52.0, DeadBranchReached@0x5638bcb3f7e0[Test#0], %49.12   !
BB53   <- [51]
  lgl$-           %53.0 = CastType           d     dn %51.2
  lgl$#-          %53.1 = CheckTrueFalse     e     %53.0
  void                    Branch                   %53.1 -> BB28 (if true) | BB8 (if false)
BB54   <- [51]
  void                    Nop                !     
  val?            %54.1 = %51.2
  dr              %54.2 = Typecheck@0x5638bcb3f7e0[Type#15]
  goto BB6
BB28   <- [53]
  val?^ | miss    %28.0 = LdVar              eR    environment, e49.2
  lgl$#-          %28.1 = Identical                %28.0, function(fun=NULL) <(rir::DispatchTable*)0x563|...
  void                    Branch                   %28.1 -> BB55 (if true) | BB56 (if false)
BB8   <- [53]
  void                    Nop                !     
  goto BB9
BB6   <- [54, 56]
  val?^ | miss    %6.0  = Phi                      %54.1:BB54, %56.1:BB56
  val?^ | miss    %6.1  = %6.0
  dr              %6.2  = Phi                      %54.2:BB54, %56.2:BB56
  dr              %6.3  = %6.2
  fs              %6.4  = FrameState         R     0x5638bbc92fd0+347: [%51.2], env=e49.2
  void                    Deopt              !v    %6.4, %6.3, %6.1   !
BB55   <- [28]
  val?^ | miss    %55.0 = LdVar              eR    value, e49.2
  val?            %55.1 = Force!<wrapped>    !v    %55.0, e49.2   <cls>
  prom-           %55.2 = MkArg                    %55.1, .assignOverBinding[0x5638bea8bd70]_p17 (!refl), 
  val?            %55.3 = StaticCall         !v    environment[0x5638c5c4a890](%55.2) e49.2   <env->
  lgl$-           %55.4 = Is                       %55.3, NULL
  void                    StVar              lW    fenv, %55.3, e49.2
  val             %55.6 = ChkMissing         e     %55.3
  lgl$#-          %55.7 = CheckTrueFalse     e     %55.4
  void                    Branch                   %55.7 -> BB44 (if true) | BB29 (if false)
BB56   <- [28]
  void                    Nop                !     
  val?^ | miss    %56.1 = %28.0
  dr              %56.2 = CallTarget@0x5638bcb3f7e0[Call#10]
  goto BB6
BB9   <- [8, 41]
  val?^ | miss    %9.0  = LdVar              eR    exists, e49.2
  lgl$#-          %9.1  = Identical                %9.0, function(x, where=-(1), envir=if(missing(frame|...
  void                    Branch                   %9.1 -> BB57 (if true) | BB58 (if false)
BB44   <- [55]
  val?^ | miss    %44.0 = LdVar              eR    baseenv, e49.2
  lgl$#-          %44.1 = Identical                <blt baseenv>, %44.0   <@?>
  void                    Branch                   %44.1 -> BB46 (if true) | BB45 (if false)
BB29   <- [55]
  void                    Nop                !     
  goto BB30
BB57   <- [9]
  prom-           %57.0 = MkArg                    unboundValue, .assignOverBinding[0x5638bea8bd70]_p3, e49.2
  prom-           %57.1 = MkArg                    unboundValue, .assignOverBinding[0x5638bea8bd70]_p4, e49.2
  val?            %57.2 = StaticCall         !     exists[0x5638c63146a0](%57.0, missingArg, %57.1, missingArg, missingArg, false) { 0 2n 5n } e49.2   <lgl$->
  lgl$#-          %57.3 = IsType                   %57.2 isA lgl$-
  void                    Branch                   %57.3 -> BB65 (if true) | BB66 (if false)
BB58   <- [9]
  fs              %58.0 = FrameState         R     0x5638bbc92fd0+817: [], env=e49.2
  void                    Deopt              !v    %58.0, CallTarget@0x5638bcb3f7e0[Call#18], %9.0   !
BB46   <- [44]
  val?            %46.0 = CallBuiltin        !v    baseenv() e49.2   <val?_>
  void                    StVar              lW    fenv, %46.0, e49.2
  goto BB30
BB45   <- [44]
  (cls|spec|blt)  %45.0 = LdFun              !v    baseenv, e49.2
  fs              %45.1 = FrameState         R     0x5638bbc92fd0+467: [%45.0], env=e49.2
  void                    Deopt              !v    %45.1, DeadCall@0x5638bcb3f7e0[Call#11], %45.0   !
BB30   <- [29, 46]
  val?^ | miss    %30.0 = LdVar              eR    identical, e49.2
  lgl$#-          %30.1 = Identical                %30.0, function(x, y, num.eq=TRUE, single.NA=TRUE, at|...
  void                    Branch                   %30.1 -> BB59 (if true) | BB60 (if false)
BB65   <- [57]
  lgl$-           %65.0 = CastType           d     dn %57.2
  lgl$-           %65.1 = AsLogical                %65.0
  lgl$#-          %65.2 = Identical                %65.1, false
  void                    Branch                   %65.2 -> BB27 (if true) | BB14 (if false)
BB66   <- [57]
  void                    Nop                !     
  val?            %66.1 = %57.2
  dr              %66.2 = Typecheck@0x5638bcb3f7e0[Type#38]
  goto BB12
BB59   <- [30]
  prom-           %59.0 = MkArg                    unboundValue, .assignOverBinding[0x5638bea8bd70]_p18 (!refl), e49.2
  prom-           %59.1 = MkArg                    unboundValue, .assignOverBinding[0x5638bea8bd70]_p19, e49.2
  ct              %59.2 = PushContext        lCL   %59.0, %59.1, identical(fenv, where), function(x, y, num.eq=TRUE, single.NA=TRUE, at|..., e49.2
  val?^           %59.3 = CastType                 up %59.1
  val?^           %59.4 = CastType                 up %59.0
  env             e59.5 = MkEnv              l     x=%59.4, y=%59.3, num.eq(miss)=true, single.NA(miss)=true, attrib.as.set(miss)=true, ignore.bytecode(miss)=true, ignore.environment(miss)=false, ignore.srcref(miss)=true, parent=R_BaseNamespace, context 1
  val?            %59.6 = Force!<lazy>       !vrL  %59.4, e59.5   <val?>
  val?            %59.7 = Force!<lazy>       !vL   %59.3, e59.5   <val?>
  val?            %59.8 = CallBuiltin        !     identical(%59.6, %59.7, true, true, true, true, false, true) e59.5
  val?            %59.9 = PopContext         C     %59.8, %59.2   <lgl$->
  lgl$#-          %59.10 = IsType                   %59.9 isA lgl$-
  void                    Branch                   %59.10 -> BB61 (if true) | BB62 (if false)
BB60   <- [30]
  fs              %60.0 = FrameState         R     0x5638bbc92fd0+525: [], env=e49.2
  void                    Deopt              !v    %60.0, CallTarget@0x5638bcb3f7e0[Call#12], %30.0   !
BB27   <- [65]
  void                    Nop                !     
  lgl$-           %27.1 = %65.1
  goto BB17
BB14   <- [65]
  val?^ | miss    %14.0 = LdVar              eR    bindingIsLocked, e49.2
  lgl$#-          %14.1 = Identical                %14.0, function(sym, env) <(rir::DispatchTable*)0x563|...
  void                    Branch                   %14.1 -> BB69 (if true) | BB70 (if false)
BB12   <- [66, 70]
  val?^ | miss    %12.0 = Phi                      %66.1:BB66, %70.1:BB70
  val?^ | miss    %12.1 = %12.0
  dr              %12.2 = Phi                      %66.2:BB66, %70.2:BB70
  dr              %12.3 = %12.2
  fs              %12.4 = FrameState         R     0x5638bbc92fd0+871: [%57.2], env=e49.2
  void                    Deopt              !v    %12.4, %12.3, %12.1   !
BB61   <- [59]
  lgl$-           %61.0 = CastType           d     dn %59.9
  lgl$-           %61.1 = Not                vd    %61.0, elided
  lgl$-           %61.2 = AsLogical                %61.1
  lgl$#-          %61.3 = Identical                %61.2, false
  void                    Branch                   %61.3 -> BB43 (if true) | BB35 (if false)
BB62   <- [59]
  void                    Nop                !     
  val?            %62.1 = %59.9
  dr              %62.2 = Typecheck@0x5638bcb3f7e0[Type#22]
  goto BB33
BB17   <- [27, 75]
  lgl$-           %17.0 = Phi                      %75.3:BB75, %27.1:BB27
  lgl$-           %17.1 = %17.0
  lgl$#-          %17.2 = CheckTrueFalse     e     %17.1
  void                    Branch                   %17.2 -> BB22 (if true) | BB20 (if false)
BB69   <- [14]
  prom-           %69.0 = MkArg                    unboundValue, .assignOverBinding[0x5638bea8bd70]_p6, e49.2
  val?^ | miss    %69.1 = LdVar              eR    what, e49.2
  void                    Visible            v     
  val?            %69.3 = Force!<wrapped>    !     %69.1, e49.2   <str$->
  prom-           %69.4 = MkArg                    %69.3, .assignOverBinding[0x5638bea8bd70]_p5 (!refl), 
  val?            %69.5 = StaticCall         !     bindingIsLocked[0x5638bfc4ff10](%69.4, %69.0) e49.2   <lgl$->
  lgl$#-          %69.6 = IsType                   %69.5 isA lgl$-
  void                    Branch                   %69.6 -> BB75 (if true) | BB76 (if false)
BB70   <- [14]
  void                    Nop                !     
  val?^ | miss    %70.1 = %14.0
  dr              %70.2 = CallTarget@0x5638bcb3f7e0[Call#19]
  goto BB12
BB43   <- [61]
  void                    Nop                !     
  lgl$-           %43.1 = %61.2
  goto BB38
BB35   <- [61]
  val?^ | miss    %35.0 = LdVar              eR    exists, e49.2
  lgl$#-          %35.1 = Identical                %35.0, function(x, where=-(1), envir=if(missing(frame|...
  void                    Branch                   %35.1 -> BB63 (if true) | BB64 (if false)
BB33   <- [62, 64]
  val?^ | miss    %33.0 = Phi                      %62.1:BB62, %64.1:BB64
  val?^ | miss    %33.1 = %33.0
  dr              %33.2 = Phi                      %62.2:BB62, %64.2:BB64
  dr              %33.3 = %33.2
  fs              %33.4 = FrameState         R     0x5638bbc92fd0+562: [%59.9], env=e49.2
  void                    Deopt              !v    %33.4, %33.3, %33.1   !
BB22   <- [17]
  val?^ | miss    %22.0 = LdVar              eR    unlockBinding, e49.2
  lgl$#-          %22.1 = Identical                %22.0, function(sym, env) <(rir::DispatchTable*)0x563|...
  void                    Branch                   %22.1 -> BB73 (if true) | BB74 (if false)
BB20   <- [17]
  val?^ | miss    %20.0 = LdVar              eR    assign, e49.2
  lgl$#-          %20.1 = Identical                %20.0, function(x, value, pos=-(1), envir=as.environm|...
  void                    Branch                   %20.1 -> BB71 (if true) | BB72 (if false)
BB75   <- [69]
  lgl$-           %75.0 = CastType           d     dn %69.5
  lgl$-           %75.1 = AsLogical                %75.0
  lgl$-           %75.2 = LAnd                     %65.1, %75.1
  lgl$-           %75.3 = %75.2
  goto BB17
BB76   <- [69]
  fs              %76.0 = FrameState         R     0x5638bbc92fd0+920: [%65.1, %69.5], env=e49.2
  void                    Deopt              !v    %76.0, Typecheck@0x5638bcb3f7e0[Type#41], %69.5   !
BB38   <- [43, 67]
  lgl$-           %38.0 = Phi                      %67.3:BB67, %43.1:BB43
  lgl$-           %38.1 = %38.0
  lgl$-           %38.2 = AsLogical                %38.1
  lgl$#-          %38.3 = Identical                %38.2, false
  void                    Branch                   %38.3 -> BB40 (if true) | BB39 (if false)
BB63   <- [35]
  prom-           %63.0 = MkArg                    unboundValue, .assignOverBinding[0x5638bea8bd70]_p20, e49.2
  prom-           %63.1 = MkArg                    unboundValue, .assignOverBinding[0x5638bea8bd70]_p21, e49.2
  val?            %63.2 = StaticCall         !     exists[0x5638c63146a0](%63.0, missingArg, %63.1, missingArg, missingArg, false) { 0 2n 5n } e49.2   <lgl$->
  lgl$#-          %63.3 = IsType                   %63.2 isA lgl$-
  void                    Branch                   %63.3 -> BB67 (if true) | BB68 (if false)
BB64   <- [35]
  void                    Nop                !     
  val?^ | miss    %64.1 = %35.0
  dr              %64.2 = CallTarget@0x5638bcb3f7e0[Call#13]
  goto BB33
BB73   <- [22]
  prom-           %73.0 = MkArg                    unboundValue, .assignOverBinding[0x5638bea8bd70]_p11, e49.2
  val?^ | miss    %73.1 = LdVar              eR    what, e49.2
  void                    Visible            v     
  val?            %73.3 = Force!<wrapped>    !     %73.1, e49.2   <str$->
  prom-           %73.4 = MkArg                    %73.3, .assignOverBinding[0x5638bea8bd70]_p10 (!refl), 
  val?            %73.5 = StaticCall         !     unlockBinding[0x5638bf3ea3e0](%73.4, %73.0) e49.2
  val?^ | miss    %73.6 = LdVar              eR    assign, e49.2
  lgl$#-          %73.7 = Identical                %73.6, function(x, value, pos=-(1), envir=as.environm|...
  void                    Branch                   %73.7 -> BB77 (if true) | BB78 (if false)
BB74   <- [22]
  void                    Nop                !     
  val?^ | miss    %74.1 = %22.0
  dr              %74.2 = CallTarget@0x5638bcb3f7e0[Call#21]
  goto BB18
BB71   <- [20]
  prom-           %71.0 = MkArg                    unboundValue, .assignOverBinding[0x5638bea8bd70]_p7, e49.2
  prom-           %71.1 = MkArg                    unboundValue, .assignOverBinding[0x5638bea8bd70]_p8, e49.2
  prom-           %71.2 = MkArg                    unboundValue, .assignOverBinding[0x5638bea8bd70]_p9, e49.2
  val?            %71.3 = StaticCall         !     assign[0x5638c0766860](%71.0, %71.1, %71.2) e49.2   <cls>
  val?            %71.4 = %71.3
  goto BB21
BB72   <- [20]
  void                    Nop                !     
  val?^ | miss    %72.1 = %20.0
  dr              %72.2 = CallTarget@0x5638bcb3f7e0[Call#20]
  goto BB18
BB40   <- [38]
  lgl$#-          %40.0 = CheckTrueFalse     e     %38.2
  void                    Branch                   %40.0 -> BB42 (if true) | BB41 (if false)
BB39   <- [38]
  (cls|spec|blt)  %39.0 = LdFun              !v    bindingIsLocked, e49.2
  fs              %39.1 = FrameState         R     0x5638bbc92fd0+648: [%38.2, %39.0], env=e49.2
  void                    Deopt              !v    %39.1, DeadCall@0x5638bcb3f7e0[Call#14], %39.0   !
BB67   <- [63]
  lgl$-           %67.0 = CastType           d     dn %63.2
  lgl$-           %67.1 = AsLogical                %67.0
  lgl$-           %67.2 = LAnd                     %61.2, %67.1
  lgl$-           %67.3 = %67.2
  goto BB38
BB68   <- [63]
  fs              %68.0 = FrameState         R     0x5638bbc92fd0+629: [%61.2, %63.2], env=e49.2
  void                    Deopt              !v    %68.0, Typecheck@0x5638bcb3f7e0[Type#25], %63.2   !
BB77   <- [73]
  prom-           %77.0 = MkArg                    unboundValue, .assignOverBinding[0x5638bea8bd70]_p12, e49.2
  prom-           %77.1 = MkArg                    unboundValue, .assignOverBinding[0x5638bea8bd70]_p13, e49.2
  prom-           %77.2 = MkArg                    unboundValue, .assignOverBinding[0x5638bea8bd70]_p14, e49.2
  val?            %77.3 = StaticCall         !     assign[0x5638c0766860](%77.0, %77.1, %77.2) e49.2
  val?^ | miss    %77.4 = LdVar              eR    lockBinding, e49.2
  lgl$#-          %77.5 = Identical                %77.4, function(sym, env) <(rir::DispatchTable*)0x563|...
  void                    Branch                   %77.5 -> BB79 (if true) | BB80 (if false)
BB78   <- [73]
  fs              %78.0 = FrameState         R     0x5638bbc92fd0+1022: [%73.5], env=e49.2
  void                    Deopt              !v    %78.0, CallTarget@0x5638bcb3f7e0[Call#22], %73.6   !
BB18   <- [72, 74]
  val?^ | miss    %18.0 = Phi                      %72.1:BB72, %74.1:BB74
  val?^ | miss    %18.1 = %18.0
  dr              %18.2 = Phi                      %72.2:BB72, %74.2:BB74
  dr              %18.3 = %18.2
  fs              %18.4 = FrameState         R     0x5638bbc92fd0+927: [%17.1], env=e49.2
  void                    Deopt              !v    %18.4, %18.3, %18.1   !
BB21   <- [71, 79]
  val?            %21.0 = Phi                      %71.4:BB71, %79.6:BB79
  val?            %21.1 = %21.0
  void                    Return             l     %21.1
BB42   <- [40]
  (cls|spec|blt)  %42.0 = LdFun              !v    unlockBinding, e49.2
  fs              %42.1 = FrameState         R     0x5638bbc92fd0+703: [%42.0], env=e49.2
  void                    Deopt              !v    %42.1, DeadCall@0x5638bcb3f7e0[Call#15], %42.0   !
BB41   <- [40]
  void                    Nop                !     
  goto BB9
BB79   <- [77]
  prom-           %79.0 = MkArg                    unboundValue, .assignOverBinding[0x5638bea8bd70]_p15, e49.2
  prom-           %79.1 = MkArg                    unboundValue, .assignOverBinding[0x5638bea8bd70]_p16, e49.2
  val?^ | miss    %79.2 = CastType                 up %79.0
  val?            %79.3 = Force              !     %79.2, 
  prom-           %79.4 = MkArg                    %79.3, .assignOverBinding[0x5638bea8bd70]_p15 (!refl), 
  val?            %79.5 = StaticCall         !     lockBinding[0x5638bcb5a120](%79.4, %79.1) e49.2   <nil->
  val?            %79.6 = %79.5
  goto BB21
BB80   <- [77]
  fs              %80.0 = FrameState         R     0x5638bbc92fd0+1065: [%77.3], env=e49.2
  void                    Deopt              !v    %80.0, CallTarget@0x5638bcb3f7e0[Call#23], %77.4   !
Prom 0:
BB0
  void                    Visible            v     
  void                    Return             l     -1
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     options, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .assignOverBinding[0x5638bea8bd70]_p2, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    warnOpt, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 3:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    what, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 4:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 5:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    what, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 6:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 7:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    what, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 8:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    value, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 9:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 10:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    what, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 11:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <env+>
  void                    Return             l     %0.3
Prom 12:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    what, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 13:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    value, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <other>
  void                    Return             l     %0.3
Prom 14:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <env+>
  void                    Return             l     %0.3
Prom 15:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    what, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 16:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <env+>
  void                    Return             l     %0.3
Prom 17:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    value, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 18:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fenv, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 19:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 20:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    what, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 21:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fenv, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <env->
  void                    Return             l     %0.3

│ .assignOverBinding[0x5638bea8bd70]                                           │
└──────────────────────────────────────────────────────────────────────────────┘
