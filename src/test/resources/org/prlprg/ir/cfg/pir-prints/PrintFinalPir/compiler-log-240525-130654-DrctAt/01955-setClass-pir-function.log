
┌──────────────────────────────────────────────────────────────────────────────┐
│ setClass[0x5638beccc380]                                                     │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;Eager0,Eager1,NonRefl0,NonRefl1,!Obj0,!Obj1 miss: 10│
│ Properties:                                                                  │
├────── Final PIR Version
setClass[0x5638beccc380]
BB0
  val?~+          %0.0  = LdArg                    1
  val?~+          %0.1  = LdArg                    0
  env             e0.2  = MkEnv              l     Class=%0.1, representation=%0.0, prototype(miss)=nil, contains(miss)=missingArg, validity(miss)=missingArg, access(miss)=missingArg, where(miss)=missingArg, version(miss)=missingArg, sealed(miss)=missingArg, package(miss)=missingArg, S3methods(miss)=missingArg, slots(miss)=missingArg, parent=<env 0x5638ba074378>, context 1
  prom-           %0.3  = MkArg                    unboundValue, setClass[0x5638beccc380]_p1, e0.2
  val?^ | miss    %0.4  = CastType                 up %0.3
  void                    StArg              lW    contains, %0.4, e0.2
  void                    StArg              lW    validity, nil, e0.2
  prom-           %0.7  = MkArg                    unboundValue, setClass[0x5638beccc380]_p3, e0.2
  val?^ | miss    %0.8  = CastType                 up %0.7
  void                    StArg              lW    access, %0.8, e0.2
  prom-           %0.10 = MkArg                    unboundValue, setClass[0x5638beccc380]_p4, e0.2
  val?^ | miss    %0.11 = CastType                 up %0.10
  void                    StArg              lW    where, %0.11, e0.2
  prom-           %0.13 = MkArg                    unboundValue, setClass[0x5638beccc380]_p6, e0.2
  val?^ | miss    %0.14 = CastType                 up %0.13
  void                    StArg              lW    version, %0.14, e0.2
  void                    StArg              lW    sealed, false, e0.2
  prom-           %0.17 = MkArg                    unboundValue, setClass[0x5638beccc380]_p8, e0.2
  val?^ | miss    %0.18 = CastType                 up %0.17
  void                    StArg              lW    package, %0.18, e0.2
  void                    StArg              lW    S3methods, false, e0.2
  val?^ | miss    %0.21 = LdVar              eR    getClassDef, <env 0x5638ba074378>
  lgl$#-          %0.22 = Identical                %0.21, function(Class, where=topenv(parent.frame()), |...
  void                    Branch                   %0.22 -> BB144 (if true) | BB145 (if false)
BB144   <- [0]
  prom-           %144.0 = MkArg                    unboundValue, setClass[0x5638beccc380]_p11 (!refl), e0.2
  prom-           %144.1 = MkArg                    unboundValue, setClass[0x5638beccc380]_p12, e0.2
  val?            %144.2 = StaticCall         !v    getClassDef[0x5638c56beae0](%144.0, %144.1) e0.2   <(nil|other)>
  void                    StVar              lW    oldDef, %144.2, e0.2
  val?^ | miss    %144.4 = LdVar              eR    is, e0.2
  lgl$#-          %144.5 = Identical                %144.4, function(object, class2) <(rir::DispatchTable*|...
  void                    Branch                   %144.5 -> BB146 (if true) | BB147 (if false)
BB145   <- [0]
  fs              %145.0 = FrameState         R     0x5638c5814fa0+0: [], env=e0.2
  void                    Deopt              !v    %145.0, CallTarget@0x5638bd89be00[Call#7], %0.21
BB146   <- [144]
  prom-           %146.0 = MkArg                    unboundValue, setClass[0x5638beccc380]_p13 (!refl), e0.2
  val?            %146.1 = Call               !v    function(object, class2) <(rir::DispatchTable*|...(%146.0, "classRepresentation") e0.2   <lgl$->
  lgl$#-          %146.2 = IsType                   %146.1 isA lgl$-
  void                    Branch                   %146.2 -> BB148 (if true) | BB149 (if false)
BB147   <- [144]
  fs              %147.0 = FrameState         R     0x5638c5814fa0+51: [], env=e0.2
  void                    Deopt              !v    %147.0, CallTarget@0x5638bd89be00[Call#8], %144.4   !
BB148   <- [146]
  lgl$-           %148.0 = CastType           d     dn %146.1
  lgl$-           %148.1 = AsLogical                %148.0
  lgl$#-          %148.2 = Identical                %148.1, false
  void                    Branch                   %148.2 -> BB142 (if true) | BB7 (if false)
BB149   <- [146]
  fs              %149.0 = FrameState         R     0x5638c5814fa0+88: [%146.1], env=e0.2
  void                    Deopt              !v    %149.0, Typecheck@0x5638bd89be00[Type#12], %146.1   !
BB142   <- [148]
  void                    Nop                !     
  lgl$-           %142.1 = %148.1
  goto BB10
BB7   <- [148]
  (cls|spec|blt)  %7.0  = LdFun              !v    @, <0x5638b9a6cbd8>, e0.2
  prom-           %7.1  = MkArg                    unboundValue, setClass[0x5638beccc380]_p14, e0.2
  prom-           %7.2  = MkArg                    unboundValue, setClass[0x5638beccc380]_p15, e0.2
  val?            %7.3  = Call               !v    %7.0(%7.1, %7.2) e0.2   <lgl$->
  lgl$#-          %7.4  = IsType                   %7.3 isA lgl$-
  void                    Branch                   %7.4 -> BB150 (if true) | BB151 (if false)
BB10   <- [142, 150]
  lgl$-           %10.0 = Phi                      %150.3:BB150, %142.1:BB142
  lgl$-           %10.1 = %10.0
  lgl$#-          %10.2 = CheckTrueFalse     e     %10.1
  void                    Branch                   %10.2 -> BB141 (if true) | BB13 (if false)
BB150   <- [7]
  lgl$-           %150.0 = CastType           d     dn %7.3
  lgl$-           %150.1 = AsLogical                %150.0
  lgl$-           %150.2 = LAnd                     %148.1, %150.1
  lgl$-           %150.3 = %150.2
  goto BB10
BB151   <- [7]
  fs              %151.0 = FrameState         R     0x5638c5814fa0+137: [%148.1, %7.3], env=e0.2
  void                    Deopt              !v    %151.0, Typecheck@0x5638bd89be00[Type#15], %7.3   !
BB141   <- [10]
  (cls|spec|blt)  %141.0 = LdFun              !v    stop, e0.2
  fs              %141.1 = FrameState         R     0x5638c5814fa0+160: [%141.0], env=e0.2
  void                    Deopt              !v    %141.1, DeadCall@0x5638bd89be00[Call#10], %141.0   !
BB13   <- [10]
  lgl$-           %13.0 = Missing            eR    slots, e0.2
  lgl$-           %13.1 = Not                d     %13.0, elided
  lgl$#-          %13.2 = CheckTrueFalse     e     %13.1
  void                    Branch                   %13.2 -> BB138 (if true) | BB14 (if false)
BB138   <- [13]
  lgl$-           %138.0 = Missing            eR    representation, e0.2
  lgl$-           %138.1 = Not                d     %138.0, elided
  lgl$#-          %138.2 = CheckTrueFalse     e     %138.1
  void                    Branch                   %138.2 -> BB140 (if true) | BB139 (if false)
BB14   <- [13]
  val?^ | miss    %14.0 = LdVar              eR    is, e0.2
  lgl$#-          %14.1 = Identical                %14.0, function(object, class2) <(rir::DispatchTable*|...
  void                    Branch                   %14.1 -> BB152 (if true) | BB153 (if false)
BB140   <- [138]
  (cls|spec|blt)  %140.0 = LdFun              !v    stop, e0.2
  fs              %140.1 = FrameState         R     0x5638c5814fa0+1662: [%140.0], env=e0.2
  void                    Deopt              !v    %140.1, DeadCall@0x5638bd89be00[Call#31], %140.0   !
BB139   <- [138]
  (cls|spec|blt)  %139.0 = LdFun              !v    inferProperties, e0.2
  fs              %139.1 = FrameState         R     0x5638c5814fa0+1695: [%139.0], env=e0.2
  void                    Deopt              !v    %139.1, DeadCall@0x5638bd89be00[Call#32], %139.0   !
BB152   <- [14]
  prom-           %152.0 = MkArg                    unboundValue, setClass[0x5638beccc380]_p16, e0.2
  val?            %152.1 = Call               !v    function(object, class2) <(rir::DispatchTable*|...(%152.0, "classRepresentation") e0.2   <lgl$->
  lgl$#-          %152.2 = IsType                   %152.1 isA lgl$-
  void                    Branch                   %152.2 -> BB154 (if true) | BB155 (if false)
BB153   <- [14]
  fs              %153.0 = FrameState         R     0x5638c5814fa0+144: [%10.1], env=e0.2
  void                    Deopt              !v    %153.0, CallTarget@0x5638bd89be00[Call#13], %14.0   !
BB154   <- [152]
  lgl$-           %154.0 = CastType           d     dn %152.1
  lgl$#-          %154.1 = CheckTrueFalse     e     %154.0
  void                    Branch                   %154.1 -> BB118 (if true) | BB17 (if false)
BB155   <- [152]
  void                    Nop                !     
  val?            %155.1 = %152.1
  dr              %155.2 = Typecheck@0x5638bd89be00[Type#20]
  goto BB15
BB118   <- [154]
  val?^ | miss    %118.0 = LdVar              eR    representation, e0.2
  val?            %118.1 = Force!             !v    %118.0, e0.2   <val?_>
  void                    StVar              lW    classDef, %118.1, e0.2
  lgl$-           %118.3 = Missing            eR    prototype, e0.2
  lgl$-           %118.4 = AsLogical                %118.3
  lgl$#-          %118.5 = Identical                %118.4, false
  void                    Branch                   %118.5 -> BB137 (if true) | BB119 (if false)
BB17   <- [154]
  val?^ | miss    %17.0 = LdVar              eR    is.character, e0.2
  lgl$#-          %17.1 = Identical                <blt is.character>, %17.0   <true>
  void                    Branch                   %17.1 -> BB156 (if true) | BB157 (if false)
BB15   <- [155, 157]
  val?^ | miss    %15.0 = Phi                      %155.1:BB155, %157.1:BB157
  val?^ | miss    %15.1 = %15.0
  dr              %15.2 = Phi                      %155.2:BB155, %157.2:BB157
  dr              %15.3 = %15.2
  fs              %15.4 = FrameState         R     0x5638c5814fa0+251: [%152.1], env=e0.2
  void                    Deopt              !v    %15.4, %15.3, %15.1   !
BB137   <- [118]
  void                    Nop                !     
  lgl$-           %137.1 = %118.4
  goto BB120
BB119   <- [118]
  lgl$-           %119.0 = Missing            eR    contains, e0.2
  lgl$-           %119.1 = AsLogical                %119.0
  lgl$-           %119.2 = LAnd                     %118.4, %119.1
  lgl$-           %119.3 = %119.2
  goto BB120
BB156   <- [17]
  val?^ | miss    %156.0 = LdVar              eR    representation, e0.2
  val?            %156.1 = Force!<wrapped>    !v    %156.0, e0.2   <vec->
  lgl$#-          %156.2 = CallSafeBuiltin    wed   is.character(%156.1)    <lgl$->
  void                    Branch                   %156.2 -> BB113 (if true) | BB18 (if false)
BB157   <- [17]
  void                    Nop                !     
  lgl$#-          %157.1 = %17.1
  dr              %157.2 = DeadBranchReached@0x5638bd89be00[Test#0]
  goto BB15
BB120   <- [119, 137]
  lgl$-           %120.0 = Phi                      %119.3:BB119, %137.1:BB137
  lgl$-           %120.1 = %120.0
  lgl$-           %120.2 = AsLogical                %120.1
  lgl$#-          %120.3 = Identical                %120.2, false
  void                    Branch                   %120.3 -> BB136 (if true) | BB121 (if false)
BB113   <- [156]
  val?^ | miss    %113.0 = LdVar              eR    length, e0.2
  lgl$#-          %113.1 = Identical                <blt length>, %113.0   <@?>
  void                    Branch                   %113.1 -> BB115 (if true) | BB114 (if false)
BB18   <- [156]
  void                    Nop                !     
  lgl$#-          %18.1 = %156.2
  goto BB19
BB136   <- [120]
  void                    Nop                !     
  lgl$-           %136.1 = %120.2
  goto BB122
BB121   <- [120]
  lgl$-           %121.0 = Missing            eR    validity, e0.2
  lgl$-           %121.1 = AsLogical                %121.0
  lgl$-           %121.2 = LAnd                     %120.2, %121.1
  lgl$-           %121.3 = %121.2
  goto BB122
BB115   <- [113]
  val?^ | miss    %115.0 = LdVar              eR    representation, e0.2
  val?            %115.1 = Force!             !v    %115.0, e0.2   <val?_>
  lgl$#-          %115.2 = IsType                   %115.1 isA val?+
  void                    Branch                   %115.2 -> BB160 (if true) | BB161 (if false)
BB114   <- [113]
  (cls|spec|blt)  %114.0 = LdFun              !v    length, e0.2
  fs              %114.1 = FrameState         R     0x5638c5814fa0+393: [%156.2, %114.0], env=e0.2
  void                    Deopt              !v    %114.1, DeadCall@0x5638bd89be00[Call#15], %114.0   !
BB19   <- [18, 160]
  lgl$-           %19.0 = Phi                      %160.5:BB160, %18.1:BB18
  lgl$-           %19.1 = %19.0
  lgl$-           %19.2 = AsLogical                %19.1
  lgl$#-          %19.3 = Identical                %19.2, false
  void                    Branch                   %19.3 -> BB112 (if true) | BB20 (if false)
BB122   <- [121, 136]
  lgl$-           %122.0 = Phi                      %121.3:BB121, %136.1:BB136
  lgl$-           %122.1 = %122.0
  lgl$-           %122.2 = AsLogical                %122.1
  lgl$#-          %122.3 = Identical                %122.2, false
  void                    Branch                   %122.3 -> BB135 (if true) | BB123 (if false)
BB160   <- [115]
  val?+           %160.0 = CastType           d     dn %115.1   <val?_>
  real$-          %160.1 = CallSafeBuiltin    wed   length(%160.0)    <val?_>
  lgl$-           %160.2 = Eq                 d     %160.1, 1L, elided   <val?_>
  lgl$-           %160.3 = AsLogical                %160.2
  lgl$-           %160.4 = LAnd                     %156.2, %160.3
  lgl$-           %160.5 = %160.4
  goto BB19
BB161   <- [115]
  fs              %161.0 = FrameState         R     0x5638c5814fa0+434: [%156.2, <blt length>, %115.1], env=e0.2
  void                    Deopt              !v    %161.0, Typecheck@0x5638bd89be00[Type#25], %115.1   !
BB112   <- [19]
  void                    Nop                !     
  lgl$-           %112.1 = %19.2
  goto BB25
BB20   <- [19]
  val?^ | miss    %20.0 = LdVar              eR    names, e0.2
  lgl$#-          %20.1 = Identical                <blt names>, %20.0   <@?>
  void                    Branch                   %20.1 -> BB22 (if true) | BB21 (if false)
BB135   <- [122]
  void                    Nop                !     
  lgl$-           %135.1 = %122.2
  goto BB124
BB123   <- [122]
  lgl$-           %123.0 = Missing            eR    access, e0.2
  lgl$-           %123.1 = AsLogical                %123.0
  lgl$-           %123.2 = LAnd                     %122.2, %123.1
  lgl$-           %123.3 = %123.2
  goto BB124
BB25   <- [112, 158]
  lgl$-           %25.0 = Phi                      %158.5:BB158, %112.1:BB112
  lgl$-           %25.1 = %25.0
  lgl$#-          %25.2 = CheckTrueFalse     e     %25.1
  void                    Branch                   %25.2 -> BB109 (if true) | BB26 (if false)
BB22   <- [20]
  val?^ | miss    %22.0 = LdVar              eR    representation, e0.2
  val?            %22.1 = Force!             !v    %22.0, e0.2   <val?_>
  lgl$#-          %22.2 = IsType                   %22.1 isA val?+
  void                    Branch                   %22.2 -> BB158 (if true) | BB159 (if false)
BB21   <- [20]
  (cls|spec|blt)  %21.0 = LdFun              !v    names, e0.2
  fs              %21.1 = FrameState         R     0x5638c5814fa0+510: [%19.2, %21.0], env=e0.2
  void                    Deopt              !v    %21.1, DeadCall@0x5638bd89be00[Call#16], %21.0   !
BB124   <- [123, 135]
  lgl$-           %124.0 = Phi                      %123.3:BB123, %135.1:BB135
  lgl$-           %124.1 = %124.0
  lgl$-           %124.2 = AsLogical                %124.1
  lgl$#-          %124.3 = Identical                %124.2, false
  void                    Branch                   %124.3 -> BB134 (if true) | BB125 (if false)
BB109   <- [25]
  val?^ | miss    %109.0 = LdVar              eR    list, e0.2
  lgl$#-          %109.1 = Identical                <blt list>, %109.0   <@?>
  void                    Branch                   %109.1 -> BB111 (if true) | BB110 (if false)
BB26   <- [25]
  void                    Nop                !     
  goto BB27
BB158   <- [22]
  val?+           %158.0 = CastType           d     dn %22.1   <val?_>
  val+            %158.1 = CallSafeBuiltin    wed   names(%158.0)    <val?_>
  lgl$-           %158.2 = Is                       %158.1, NULL
  lgl$-           %158.3 = AsLogical                %158.2
  lgl$-           %158.4 = LAnd                     %19.2, %158.3
  lgl$-           %158.5 = %158.4
  goto BB25
BB159   <- [22]
  fs              %159.0 = FrameState         R     0x5638c5814fa0+551: [%19.2, <blt names>, %22.1], env=e0.2
  void                    Deopt              !v    %159.0, Typecheck@0x5638bd89be00[Type#29], %22.1   !
BB134   <- [124]
  void                    Nop                !     
  lgl$-           %134.1 = %124.2
  goto BB126
BB125   <- [124]
  lgl$-           %125.0 = Missing            eR    version, e0.2
  lgl$-           %125.1 = AsLogical                %125.0
  lgl$-           %125.2 = LAnd                     %124.2, %125.1
  lgl$-           %125.3 = %125.2
  goto BB126
BB111   <- [109]
  val?^ | miss    %111.0 = LdVar              eR    representation, e0.2
  val?            %111.1 = Force!             !v    %111.0, e0.2   <val?_>
  val+            %111.2 = CallSafeBuiltin    wed   list(%111.1)    <val?_>
  void                    StVar              lW    representation, %111.2, e0.2
  goto BB27
BB110   <- [109]
  (cls|spec|blt)  %110.0 = LdFun              !v    list, e0.2
  fs              %110.1 = FrameState         R     0x5638c5814fa0+624: [%110.0], env=e0.2
  void                    Deopt              !v    %110.1, DeadCall@0x5638bd89be00[Call#17], %110.0   !
BB27   <- [26, 111]
  val?^ | miss    %27.0 = LdVar              eR    nzchar, e0.2
  lgl$#-          %27.1 = Identical                <blt nzchar>, %27.0   <true>
  void                    Branch                   %27.1 -> BB162 (if true) | BB163 (if false)
BB126   <- [125, 134]
  lgl$-           %126.0 = Phi                      %125.3:BB125, %134.1:BB134
  lgl$-           %126.1 = %126.0
  lgl$-           %126.2 = AsLogical                %126.1
  lgl$#-          %126.3 = Identical                %126.2, false
  void                    Branch                   %126.3 -> BB133 (if true) | BB127 (if false)
BB162   <- [27]
  val?^ | miss    %162.0 = LdVar              eR    allNames, e0.2
  lgl$#-          %162.1 = Identical                %162.0, function(x) <(rir::DispatchTable*)0x5638c0a4a1|...
  void                    Branch                   %162.1 -> BB164 (if true) | BB165 (if false)
BB163   <- [27]
  void                    Nop                !     
  lgl$#-          %163.1 = %27.1
  dr              %163.2 = DeadBranchReached@0x5638bd89be00[Test#4]
  goto BB28
BB133   <- [126]
  void                    Nop                !     
  lgl$-           %133.1 = %126.2
  goto BB128
BB127   <- [126]
  lgl$-           %127.0 = Missing            eR    package, e0.2
  lgl$-           %127.1 = AsLogical                %127.0
  lgl$-           %127.2 = LAnd                     %126.2, %127.1
  lgl$-           %127.3 = %127.2
  goto BB128
BB164   <- [162]
  val?^ | miss    %164.0 = LdVar              eR    names, <env 0x5638ba074378>
  lgl$#-          %164.1 = Identical                <blt names>, %164.0   <true>
  void                    Branch                   %164.1 -> BB166 (if true) | BB167 (if false)
BB165   <- [162]
  void                    Nop                !     
  val?^ | miss    %165.1 = %162.0
  dr              %165.2 = CallTarget@0x5638bd89be00[Call#20]
  goto BB28
BB28   <- [163, 165, 167]
  val?^ | miss    %28.0 = Phi                      %163.1:BB163, %165.1:BB165, %167.1:BB167
  val?^ | miss    %28.1 = %28.0
  dr              %28.2 = Phi                      %163.2:BB163, %165.2:BB165, %167.2:BB167
  dr              %28.3 = %28.2
  fs              %28.4 = FrameState         R     0x5638c5814fa0+701: [], env=e0.2
  void                    Deopt              !v    %28.4, %28.3, %28.1   !
BB128   <- [127, 133]
  lgl$-           %128.0 = Phi                      %127.3:BB127, %133.1:BB133
  lgl$-           %128.1 = %128.0
  lgl$-           %128.2 = Not                d     %128.1, elided
  lgl$#-          %128.3 = CheckTrueFalse     e     %128.2
  void                    Branch                   %128.3 -> BB132 (if true) | BB129 (if false)
BB166   <- [164]
  val?^ | miss    %166.0 = LdVar              eR    representation, e0.2
  val?            %166.1 = Force!<wrapped>    !v    %166.0, e0.2   <vec->
  prom-           %166.2 = MkArg                    %166.1, setClass[0x5638beccc380]_p17 (!refl), e0.2
  val?~           %166.3 = CastType                 up %166.2
  lgl$#-          %166.4 = IsType                   %166.1 isA val?+
  void                    Branch                   %166.4 -> BB168 (if true) | BB169 (if false)
BB167   <- [164]
  void                    Nop                !     
  lgl$#-          %167.1 = %164.1
  dr              %167.2 = DeadBranchReached@0x5638c58fdc88[Test#0]
  goto BB28
BB132   <- [128]
  (cls|spec|blt)  %132.0 = LdFun              !v    stop, e0.2
  fs              %132.1 = FrameState         R     0x5638c5814fa0+1421: [%132.0], env=e0.2
  void                    Deopt              !v    %132.1, DeadCall@0x5638bd89be00[Call#25], %132.0   !
BB129   <- [128]
  val?^ | miss    %129.0 = LdVar              eR    length, e0.2
  lgl$#-          %129.1 = Identical                <blt length>, %129.0   <@?>
  void                    Branch                   %129.1 -> BB131 (if true) | BB130 (if false)
BB168   <- [166]
  val?+           %168.0 = CastType           d     dn %166.1   <(nil|vec)+>
  val+            %168.1 = CallSafeBuiltin    wed   names(%168.0)    <(nil|str)->
  lgl$-           %168.2 = Is                       %168.1, NULL
  lgl$#-          %168.3 = CheckTrueFalse     e     %168.2
  env             e168.4 = (MkEnv)            l     x=%166.3, value=%168.1, parent=<env 0x5638ba074378>, context 0
  void                    Branch                   %168.3 -> BB106 (if true) | BB34 (if false)
BB169   <- [166]
  fs              %169.0 = FrameState         R     0x5638c5814fa0+793: [<blt nzchar>], env=e0.2
  env             e169.1 = (MkEnv)            l     x=%166.3, value=unboundValue, parent=<env 0x5638ba074378>, context 0
  fs              %169.2 = FrameState         R     0x5638c58c5380+69: [<blt names>, %166.1], env=e169.1, next=%169.0
  void                    Deopt              !v    %169.2, Typecheck@0x5638c58fdc88[Type#1], %166.1   !
BB131   <- [129]
  (cls|spec|blt)  %131.0 = LdFun              !v    @, e0.2
  fs              %131.1 = FrameState         R     0x5638c5814fa0+1514: [<blt length>, %131.0], env=e0.2
  void                    Deopt              !v    %131.1, DeadCall@0x5638bd89be00[Call#28], %131.0   !
BB130   <- [129]
  (cls|spec|blt)  %130.0 = LdFun              !v    length, e0.2
  fs              %130.1 = FrameState         R     0x5638c5814fa0+1477: [%130.0], env=e0.2
  void                    Deopt              !v    %130.1, DeadCall@0x5638bd89be00[Call#26], %130.0   !
BB106   <- [168]
  val?^ | miss    %106.0 = LdVar              eR    character, <env 0x5638ba074378>
  lgl$#-          %106.1 = Identical                %106.0, function(length=0L) <(rir::DispatchTable*)0x56|...
  void                    Branch                   %106.1 -> BB170 (if true) | BB171 (if false)
BB34   <- [168]
  void                    Nop                !     
  val+            %34.1 = %168.1
  goto BB35
BB170   <- [106]
  val?^ | miss    %170.0 = LdVar              eR    length, <env 0x5638ba074378>
  lgl$#-          %170.1 = Identical                %170.0, <blt length>
  void                    Branch                   %170.1 -> BB172 (if true) | BB173 (if false)
BB171   <- [106]
  void                    Nop                !     
  val?^ | miss    %171.1 = %106.0
  dr              %171.2 = CallTarget@0x5638c58fdc88[Call#1]
  goto BB32
BB35   <- [34, 174]
  val+            %35.0 = Phi                      %34.1:BB34, %174.2:BB174   <str->
  val+            %35.1 = %35.0
  val?            %35.2 = CallBuiltin        !v    nzchar(%35.1) e0.2   <lgl->
  void                    StVar              lW    slots, %35.2, e0.2
  val?^ | miss    %35.4 = LdVar              eR    c, e0.2
  lgl$#-          %35.5 = Identical                <blt c>, %35.4   <true>
  void                    Branch                   %35.5 -> BB176 (if true) | BB177 (if false)
BB172   <- [170]
  (int|real)$-    %172.0 = CallSafeBuiltin    wed   length(%168.0)    <int$->
  lgl$#-          %172.1 = IsType                   %172.0 isA int$-
  void                    Branch                   %172.1 -> BB174 (if true) | BB175 (if false)
BB173   <- [170]
  void                    Nop                !     
  val?^ | miss    %173.1 = %170.0
  dr              %173.2 = CallTarget@0x5638c58fdc88[Call#2]
  goto BB32
BB32   <- [171, 173]
  val?^ | miss    %32.0 = Phi                      %171.1:BB171, %173.1:BB173
  val?^ | miss    %32.1 = %32.0
  dr              %32.2 = Phi                      %171.2:BB171, %173.2:BB173
  dr              %32.3 = %32.2
  fs              %32.4 = FrameState         R     0x5638c5814fa0+793: [<blt nzchar>], env=e0.2
  env             e32.5 = (MkEnv)            l     x=%166.3, value=%168.1, parent=<env 0x5638ba074378>, context 0
  fs              %32.6 = FrameState         R     0x5638c58c5380+105: [], env=e32.5, next=%32.4
  void                    Deopt              !v    %32.6, %32.3, %32.1   !
BB176   <- [35]
  val?^ | miss    %176.0 = LdVar              eR    as.character, e0.2
  lgl$#-          %176.1 = Identical                <blt as.character>, %176.0   <true>
  void                    Branch                   %176.1 -> BB178 (if true) | BB179 (if false)
BB177   <- [35]
  void                    Nop                !     
  lgl$#-          %177.1 = %35.5
  dr              %177.2 = DeadBranchReached@0x5638bd89be00[Test#5]
  goto BB36
BB174   <- [172]
  int$-           %174.0 = CastType           d     dn %172.0
  str-            %174.1 = CallSafeBuiltin    wed   vector("character", %174.0)    <str->
  str-            %174.2 = %174.1
  goto BB35
BB175   <- [172]
  env             e175.0 = MaterializeEnv           , e168.4   <@?>
  fs              %175.1 = FrameState         R     0x5638c5814fa0+793: [<blt nzchar>], env=e0.2
  fs              %175.2 = FrameState         R     0x5638c58c5380+181: [], env=e175.0, next=%175.1
  prom-           %175.3 = MkArg                    unboundValue, setClass[0x5638beccc380]_p65, e175.0
  val?^           %175.4 = CastType                 up %175.3
  env             e175.5 = (MkEnv)            l     length=%175.4, parent=R_BaseNamespace, context -1
  fs              %175.6 = FrameState         R     0x5638bb9599f0+15: ["character"], env=e175.5, next=%175.2
  fs              %175.7 = FrameState         R     0x5638be16fa80+32(pr): [%172.0], env=e175.0, next=%175.6
  void                    Deopt              !v    %175.7, Typecheck@0x5638c58fdc88[Type#6], %172.0   !
BB178   <- [176]
  val?^ | miss    %178.0 = LdVar              eR    representation, e0.2
  val?            %178.1 = Force!<wrapped>    !v    %178.0, e0.2   <vec+>
  lgl$#-          %178.2 = IsType                   %178.1 isA val+   <true>
  void                    Branch                   %178.2 -> BB180 (if true) | BB181 (if false)
BB179   <- [176]
  void                    Nop                !     
  lgl$#-          %179.1 = %176.1
  dr              %179.2 = DeadBranchReached@0x5638bd89be00[Test#7]
  goto BB36
BB36   <- [177, 179]
  val?^ | miss    %36.0 = Phi                      %177.1:BB177, %179.1:BB179
  val?^ | miss    %36.1 = %36.0
  dr              %36.2 = Phi                      %177.2:BB177, %179.2:BB179
  dr              %36.3 = %36.2
  fs              %36.4 = FrameState         R     0x5638c5814fa0+829: [], env=e0.2
  void                    Deopt              !v    %36.4, %36.3, %36.1   !
BB180   <- [178]
  val?^ | miss    %180.0 = LdVar              eR    slots, e0.2
  lgl$#-          %180.1 = IsType                   %180.0 isA lgl-
  void                    Branch                   %180.1 -> BB182 (if true) | BB183 (if false)
BB181   <- [178]
  void                    Nop                !     
  lgl$#-          %181.1 = %178.2
  dr              %181.2 = DeadBranchReached@0x5638bd89be00[Test#9]
  goto BB38
BB182   <- [180]
  lgl-            %182.0 = CastType           d     dn %180.0
  lgl-            %182.1 = Not                wed   %182.0, elided
  lgl$#-          %182.2 = IsType                   %178.1 isA val?+
  void                    Branch                   %182.2 -> BB184 (if true) | BB185 (if false)
BB183   <- [180]
  void                    Nop                !     
  val?^ | miss    %183.1 = %180.0
  dr              %183.2 = Typecheck@0x5638bd89be00[Type#51]
  goto BB38
BB38   <- [181, 183]
  val?^ | miss    %38.0 = Phi                      %181.1:BB181, %183.1:BB183
  val?^ | miss    %38.1 = %38.0
  dr              %38.2 = Phi                      %181.2:BB181, %183.2:BB183
  dr              %38.3 = %38.2
  fs              %38.4 = FrameState         R     0x5638c5814fa0+963: [<blt c>, <blt as.character>, %178.1], env=e0.2
  void                    Deopt              !v    %38.4, %38.3, %38.1   !
BB184   <- [182]
  val?+           %184.0 = CastType           d     dn %178.1   <vec+>
  val?            %184.1 = Extract1_1D        wed   %184.0, %182.1, elided   <vec+>
  lgl$#-          %184.2 = IsType                   %184.1 isA val?+
  void                    Branch                   %184.2 -> BB186 (if true) | BB187 (if false)
BB185   <- [182]
  fs              %185.0 = FrameState         R     0x5638c5814fa0+1014: [<blt c>, <blt as.character>, %178.1, %182.1], env=e0.2
  void                    Deopt              !v    %185.0, Typecheck@0x5638bd89be00[Type#49], %178.1   !
BB186   <- [184]
  val?+           %186.0 = CastType           d     dn %184.1   <vec+>
  val+            %186.1 = CallSafeBuiltin    wed   as.character(%186.0)    <str->
  val?^ | miss    %186.2 = LdVar              eR    contains, e0.2
  val?            %186.3 = Force!<lazy>       !v    %186.2, e0.2   <str->
  lgl$#-          %186.4 = IsType                   %186.3 isA val?-
  void                    Branch                   %186.4 -> BB188 (if true) | BB189 (if false)
BB187   <- [184]
  fs              %187.0 = FrameState         R     0x5638c5814fa0+1015: [<blt c>, <blt as.character>, %184.1], env=e0.2
  void                    Deopt              !v    %187.0, Typecheck@0x5638bd89be00[Type#52], %184.1   !
BB188   <- [186]
  val?-           %188.0 = CastType           d     dn %186.3   <str->
  val+            %188.1 = CallSafeBuiltin    wed   c(%186.1, %188.0)    <str->
  void                    StVar              lW    superClasses, %188.1, e0.2
  val?^ | miss    %188.3 = LdVar              eR    representation, e0.2
  val?            %188.4 = Force!<wrapped>    !v    %188.3, e0.2   <vec+>
  lgl$#-          %188.5 = IsType                   %188.4 isA val+   <true>
  lgl$#-          %188.6 = IsType                   %188.4 isA val?+
  void                    Branch                   %188.5 -> BB190 (if true) | BB191 (if false)
BB189   <- [186]
  fs              %189.0 = FrameState         R     0x5638c5814fa0+1052: [<blt c>, %186.1, %186.3], env=e0.2
  void                    Deopt              !v    %189.0, Typecheck@0x5638bd89be00[Type#54], %186.3   !
BB190   <- [188]
  val?^ | miss    %190.0 = LdVar              eR    slots, e0.2
  lgl$#-          %190.1 = IsType                   %190.0 isA lgl-
  void                    Branch                   %190.1 -> BB192 (if true) | BB193 (if false)
BB191   <- [188]
  void                    Nop                !     
  lgl$#-          %191.1 = %188.5
  dr              %191.2 = DeadBranchReached@0x5638bd89be00[Test#10]
  goto BB46
BB192   <- [190]
  lgl-            %192.0 = CastType           d     dn %190.0
  void                    Branch                   %188.6 -> BB194 (if true) | BB195 (if false)
BB193   <- [190]
  void                    Nop                !     
  val?^ | miss    %193.1 = %190.0
  dr              %193.2 = Typecheck@0x5638bd89be00[Type#58]
  goto BB46
BB46   <- [191, 193, 195]
  val?^ | miss    %46.0 = Phi                      %191.1:BB191, %193.1:BB193, %195.1:BB195
  val?^ | miss    %46.1 = %46.0
  dr              %46.2 = Phi                      %191.2:BB191, %193.2:BB193, %195.2:BB195
  dr              %46.3 = %46.2
  fs              %46.4 = FrameState         R     0x5638c5814fa0+1097: [%188.4], env=e0.2
  void                    Deopt              !v    %46.4, %46.3, %46.1   !
BB194   <- [192]
  val?+           %194.0 = CastType           d     dn %188.4   <vec+>
  val?            %194.1 = Extract1_1D        wed   %194.0, %192.0, elided   <vec+>
  void                    StVar              lW    properties, %194.1, e0.2
  (cls|spec|blt)  %194.3 = LdFun              !v    makeClassRepresentation, <0x5638c5a05410>, e0.2
  prom-           %194.4 = MkArg                    unboundValue, setClass[0x5638beccc380]_p18, e0.2
  prom-           %194.5 = MkArg                    unboundValue, setClass[0x5638beccc380]_p19, e0.2
  prom-           %194.6 = MkArg                    unboundValue, setClass[0x5638beccc380]_p20, e0.2
  prom-           %194.7 = MkArg                    unboundValue, setClass[0x5638beccc380]_p21, e0.2
  prom-           %194.8 = MkArg                    unboundValue, setClass[0x5638beccc380]_p22, e0.2
  prom-           %194.9 = MkArg                    unboundValue, setClass[0x5638beccc380]_p23, e0.2
  prom-           %194.10 = MkArg                    unboundValue, setClass[0x5638beccc380]_p24, e0.2
  prom-           %194.11 = MkArg                    unboundValue, setClass[0x5638beccc380]_p25, e0.2
  prom-           %194.12 = MkArg                    unboundValue, setClass[0x5638beccc380]_p26, e0.2
  prom-           %194.13 = MkArg                    unboundValue, setClass[0x5638beccc380]_p27, e0.2
  val?            %194.14 = NamedCall          !v    %194.3(%194.4, %194.5, %194.6, %194.7, %194.8, %194.9, %194.10, %194.11, %194.12, where=%194.13) e0.2   <other>
  void                    StVar              lW    classDef, %194.14, e0.2
  val?^ | miss    %194.16 = LdVar              eR    names, e0.2
  lgl$#-          %194.17 = Identical                <blt names>, %194.16   <true>
  void                    Branch                   %194.17 -> BB196 (if true) | BB197 (if false)
BB195   <- [192]
  void                    Nop                !     
  val?            %195.1 = %188.4
  dr              %195.2 = Typecheck@0x5638bd89be00[Type#56]
  goto BB46
BB196   <- [194]
  (cls|spec|blt)  %196.0 = LdFun              !v    @, <0x5638b9a6cbd8>, e0.2
  prom-           %196.1 = MkArg                    unboundValue, setClass[0x5638beccc380]_p28, e0.2
  prom-           %196.2 = MkArg                    unboundValue, setClass[0x5638beccc380]_p29, e0.2
  val?            %196.3 = Call               !v    %196.0(%196.1, %196.2) e0.2   <vec+>
  lgl$#-          %196.4 = IsType                   %196.3 isA val?+
  void                    Branch                   %196.4 -> BB198 (if true) | BB199 (if false)
BB197   <- [194]
  fs              %197.0 = FrameState         R     0x5638c5814fa0+1294: [], env=e0.2
  void                    Deopt              !v    %197.0, DeadBranchReached@0x5638bd89be00[Test#12], %194.17   !
BB198   <- [196]
  val?+           %198.0 = CastType           d     dn %196.3   <vec+>
  val+            %198.1 = CallSafeBuiltin    wed   names(%198.0)    <(nil|str)->
  void                    StVar              lW    superClasses, %198.1, e0.2
  val?^ | miss    %198.3 = LdVar              eR    completeClassDefinition, e0.2
  lgl$#-          %198.4 = Identical                %198.3, function(Class, ClassDef=getClassDef(Class), w|...
  void                    Branch                   %198.4 -> BB200 (if true) | BB201 (if false)
BB199   <- [196]
  fs              %199.0 = FrameState         R     0x5638c5814fa0+1969: [<blt names>, %196.3], env=e0.2
  void                    Deopt              !v    %199.0, Typecheck@0x5638bd89be00[Type#102], %196.3   !
BB200   <- [198]
  prom-           %200.0 = MkArg                    unboundValue, setClass[0x5638beccc380]_p30, e0.2
  prom-           %200.1 = MkArg                    unboundValue, setClass[0x5638beccc380]_p31, e0.2
  prom-           %200.2 = MkArg                    unboundValue, setClass[0x5638beccc380]_p32, e0.2
  val?            %200.3 = StaticCall         !v    completeClassDefinition[0x5638c1821cb0](%200.0, %200.1, %200.2, false) { 0 1 2 3n } e0.2   <other>
  void                    StVar              lW    classDef, %200.3, e0.2
  val?^ | miss    %200.5 = LdVar              eR    .uncacheClass, e0.2
  lgl$#-          %200.6 = Identical                %200.5, function(name, def) <(rir::DispatchTable*)0x56|...
  void                    Branch                   %200.6 -> BB202 (if true) | BB203 (if false)
BB201   <- [198]
  fs              %201.0 = FrameState         R     0x5638c5814fa0+2005: [], env=e0.2
  void                    Deopt              !v    %201.0, CallTarget@0x5638bd89be00[Call#37], %198.3   !
BB202   <- [200]
  prom-           %202.0 = MkArg                    unboundValue, setClass[0x5638beccc380]_p33, e0.2
  prom-           %202.1 = MkArg                    unboundValue, setClass[0x5638beccc380]_p34 (!refl), e0.2
  val?            %202.2 = StaticCall         !v    .uncacheClass[0x5638c3c848f0](%202.0, %202.1) e0.2
  val?^ | miss    %202.3 = LdVar              eR    length, e0.2
  lgl$#-          %202.4 = Identical                <blt length>, %202.3   <true>
  void                    Branch                   %202.4 -> BB204 (if true) | BB205 (if false)
BB203   <- [200]
  fs              %203.0 = FrameState         R     0x5638c5814fa0+2082: [], env=e0.2
  void                    Deopt              !v    %203.0, CallTarget@0x5638bd89be00[Call#38], %200.5   !
BB204   <- [202]
  val?^ | miss    %204.0 = LdVar              eR    superClasses, e0.2
  lgl$#-          %204.1 = IsType                   %204.0 isA val?~- | miss
  void                    Branch                   %204.1 -> BB206 (if true) | BB207 (if false)
BB205   <- [202]
  void                    Nop                !     
  lgl$#-          %205.1 = %202.4
  dr              %205.2 = DeadBranchReached@0x5638bd89be00[Test#13]
  goto BB56
BB206   <- [204]
  val?~- | miss   %206.0 = CastType           d     dn %204.0
  val?-           %206.1 = Force!<value>            %206.0,    <(nil|str)->
  (int|real)$-    %206.2 = CallSafeBuiltin    wed   length(%206.1)    <int$->
  lgl$#-          %206.3 = IsType                   %206.2 isA int$-
  void                    Branch                   %206.3 -> BB208 (if true) | BB209 (if false)
BB207   <- [204]
  void                    Nop                !     
  val?^ | miss    %207.1 = %204.0
  dr              %207.2 = Typecheck@0x5638bd89be00[Type#111]
  goto BB56
BB56   <- [205, 207]
  val?^ | miss    %56.0 = Phi                      %205.1:BB205, %207.1:BB207
  val?^ | miss    %56.1 = %56.0
  dr              %56.2 = Phi                      %205.2:BB205, %207.2:BB207
  dr              %56.3 = %56.2
  fs              %56.4 = FrameState         R     0x5638c5814fa0+2119: [%202.2], env=e0.2
  void                    Deopt              !v    %56.4, %56.3, %56.1   !
BB208   <- [206]
  int$-           %208.0 = CastType           d     dn %206.2
  lgl$-           %208.1 = Gt                 d     %208.0, 0L, elided   <lgl$->
  lgl$#-          %208.2 = CheckTrueFalse     e     %208.1
  void                    Branch                   %208.2 -> BB68 (if true) | BB60 (if false)
BB209   <- [206]
  fs              %209.0 = FrameState         R     0x5638c5814fa0+2211: [%206.2], env=e0.2
  void                    Deopt              !v    %209.0, Typecheck@0x5638bd89be00[Type#112], %206.2   !
BB68   <- [208]
  (cls|spec|blt)  %68.0 = LdFun              !v    @, <0x5638b9a6cbd8>, e0.2
  prom-           %68.1 = MkArg                    unboundValue, setClass[0x5638beccc380]_p40, e0.2
  prom-           %68.2 = MkArg                    unboundValue, setClass[0x5638beccc380]_p41, e0.2
  val?            %68.3 = Call               !v    %68.0(%68.1, %68.2) e0.2   <lgl$->
  lgl$#-          %68.4 = IsType                   %68.3 isA lgl$-
  void                    Branch                   %68.4 -> BB210 (if true) | BB211 (if false)
BB60   <- [208]
  void                    Nop                !     
  goto BB61
BB210   <- [68]
  lgl$-           %210.0 = CastType           d     dn %68.3
  void                    StVar              lW    sealed, %210.0, e0.2
  (cls|spec|blt)  %210.2 = LdFun              !v    <-, <0x5638b9a61da8>, e0.2
  prom-           %210.3 = MkArg                    unboundValue, setClass[0x5638beccc380]_p42, e0.2
  val?            %210.4 = Call               !v    %210.2(%210.3, false) e0.2
  val?^ | miss    %210.5 = LdVar              eR    assignClassDef, e0.2
  lgl$#-          %210.6 = Identical                %210.5, function(Class, def, where=.GlobalEnv, force=F|...
  void                    Branch                   %210.6 -> BB212 (if true) | BB213 (if false)
BB211   <- [68]
  fs              %211.0 = FrameState         R     0x5638c5814fa0+2276: [%68.3], env=e0.2
  void                    Deopt              !v    %211.0, Typecheck@0x5638bd89be00[Type#116], %68.3   !
BB61   <- [60, 96]
  val?^ | miss    %61.0 = LdVar              eR    S3methods, e0.2
  val?            %61.1 = Force!<lazy>       !v    %61.0, e0.2   <lgl$->
  lgl$#-          %61.2 = CheckTrueFalse     we    %61.1
  void                    Branch                   %61.2 -> BB67 (if true) | BB64 (if false)
BB212   <- [210]
  prom-           %212.0 = MkArg                    unboundValue, setClass[0x5638beccc380]_p45, e0.2
  prom-           %212.1 = MkArg                    unboundValue, setClass[0x5638beccc380]_p46, e0.2
  prom-           %212.2 = MkArg                    unboundValue, setClass[0x5638beccc380]_p47, e0.2
  val?            %212.3 = StaticCall         !v    assignClassDef[0x5638b9d57cd0](%212.0, %212.1, %212.2) e0.2
  val?^ | miss    %212.4 = LdVar              eR    character, e0.2
  lgl$#-          %212.5 = Identical                %212.4, function(length=0L) <(rir::DispatchTable*)0x56|...
  void                    Branch                   %212.5 -> BB216 (if true) | BB217 (if false)
BB213   <- [210]
  fs              %213.0 = FrameState         R     0x5638c5814fa0+2327: [%210.4], env=e0.2
  void                    Deopt              !v    %213.0, CallTarget@0x5638bd89be00[Call#43], %210.5   !
BB67   <- [61]
  (cls|spec|blt)  %67.0 = LdFun              !v    .setS3MethodsOn, e0.2
  fs              %67.1 = FrameState         R     0x5638c5814fa0+4164: [%67.0], env=e0.2
  void                    Deopt              !v    %67.1, DeadCall@0x5638bd89be00[Call#104], %67.0   !
BB64   <- [61]
  val?^ | miss    %64.0 = LdVar              eR    assignClassDef, e0.2
  lgl$#-          %64.1 = Identical                %64.0, function(Class, def, where=.GlobalEnv, force=F|...
  void                    Branch                   %64.1 -> BB214 (if true) | BB215 (if false)
BB216   <- [212]
  str-            %216.0 = CallSafeBuiltin    wed   vector("character", 0L)    <str->
  void                    StVar              lW    badContains, %216.0, e0.2
  (cls|spec|blt)  %216.2 = LdFun              !v    @, <0x5638b9a6cbd8>, e0.2
  prom-           %216.3 = MkArg                    unboundValue, setClass[0x5638beccc380]_p48, e0.2
  prom-           %216.4 = MkArg                    unboundValue, setClass[0x5638beccc380]_p49, e0.2
  val?            %216.5 = Call               !v    %216.2(%216.3, %216.4) e0.2   <vec$+>
  val?+           %216.6 = ToForSeq           e     %216.5
  int$-           %216.7 = Length                   %216.6
  int$-           %216.8 = Inc                      0L
  lgl$-           %216.9 = Lt                 d     %216.7, %216.8, elided   <false>
  lgl$#-          %216.10 = Identical                %216.9, true
  void                    Branch                   %216.10 -> BB223 (if true) | BB222 (if false)
BB217   <- [212]
  fs              %217.0 = FrameState         R     0x5638c5814fa0+2370: [%212.3], env=e0.2
  void                    Deopt              !v    %217.0, CallTarget@0x5638bd89be00[Call#44], %212.4   !
BB214   <- [64]
  prom-           %214.0 = MkArg                    unboundValue, setClass[0x5638beccc380]_p35, e0.2
  prom-           %214.1 = MkArg                    unboundValue, setClass[0x5638beccc380]_p36, e0.2
  prom-           %214.2 = MkArg                    unboundValue, setClass[0x5638beccc380]_p37, e0.2
  val?            %214.3 = StaticCall         !v    assignClassDef[0x5638b9d57cd0](%214.0, %214.1, %214.2) e0.2
  val?^ | miss    %214.4 = LdVar              eR    invisible, e0.2
  lgl$#-          %214.5 = Identical                <blt invisible>, %214.4   <true>
  void                    Branch                   %214.5 -> BB218 (if true) | BB219 (if false)
BB215   <- [64]
  fs              %215.0 = FrameState         R     0x5638c5814fa0+4149: [%61.2], env=e0.2
  void                    Deopt              !v    %215.0, CallTarget@0x5638bd89be00[Call#105], %64.0   !
BB223   <- [216]
  fs              %223.0 = FrameState         R     0x5638c5814fa0+2449: [%216.5], env=e0.2
  void                    Deopt              !v    %223.0, DeadBranchReached@0x5638bd89be00[Test#14], %216.10   !
BB222   <- [216]
  val?            %222.0 = Extract2_1D        wed   %216.6, %216.8, elided
  void                    StVar              lW    ext, %222.0, e0.2
  (cls|spec|blt)  %222.2 = LdFun              !v    @, <0x5638b9a6cbd8>, e0.2
  prom-           %222.3 = MkArg                    unboundValue, setClass[0x5638beccc380]_p50, e0.2
  prom-           %222.4 = MkArg                    unboundValue, setClass[0x5638beccc380]_p51, e0.2
  val?            %222.5 = Call               !v    %222.2(%222.3, %222.4) e0.2   <str$+>
  void                    StVar              lW    class2, %222.5, e0.2
  val?^ | miss    %222.7 = LdVar              eR    is, e0.2
  lgl$#-          %222.8 = Identical                %222.7, function(object, class2) <(rir::DispatchTable*|...
  void                    Branch                   %222.8 -> BB224 (if true) | BB225 (if false)
BB218   <- [214]
  val?^ | miss    %218.0 = LdVar              eR    classGeneratorFunction, e0.2
  lgl$#-          %218.1 = Identical                %218.0, function(classDef, env=topenv(parent.frame()))|...
  void                    Branch                   %218.1 -> BB220 (if true) | BB221 (if false)
BB219   <- [214]
  void                    Nop                !     
  lgl$#-          %219.1 = %214.5
  dr              %219.2 = DeadBranchReached@0x5638bd89be00[Test#20]
  goto BB65
BB224   <- [222]
  prom-           %224.0 = MkArg                    unboundValue, setClass[0x5638beccc380]_p52, e0.2
  val?            %224.1 = Call               !v    function(object, class2) <(rir::DispatchTable*|...(%224.0, "try-error") e0.2   <lgl$->
  lgl$#-          %224.2 = IsType                   %224.1 isA lgl$-
  void                    Branch                   %224.2 -> BB226 (if true) | BB227 (if false)
BB225   <- [222]
  fs              %225.0 = FrameState         R     0x5638c5814fa0+2545: [%216.6, %216.7, %216.8], env=e0.2
  void                    Deopt              !v    %225.0, CallTarget@0x5638bd89be00[Call#47], %222.7   !
BB220   <- [218]
  prom-           %220.0 = MkArg                    unboundValue, setClass[0x5638beccc380]_p38, e0.2
  prom-           %220.1 = MkArg                    unboundValue, setClass[0x5638beccc380]_p39, e0.2
  val?            %220.2 = StaticCall         !v    classGeneratorFunction[0x5638c617ffa0](%220.0, %220.1) e0.2   <cls>
  void                    Invisible          v     
  void                    Return             l     %220.2
BB221   <- [218]
  void                    Nop                !     
  val?^ | miss    %221.1 = %218.0
  dr              %221.2 = CallTarget@0x5638bd89be00[Call#108]
  goto BB65
BB65   <- [219, 221]
  val?^ | miss    %65.0 = Phi                      %219.1:BB219, %221.1:BB221
  val?^ | miss    %65.1 = %65.0
  dr              %65.2 = Phi                      %219.2:BB219, %221.2:BB221
  dr              %65.3 = %65.2
  fs              %65.4 = FrameState         R     0x5638c5814fa0+4247: [%214.3], env=e0.2
  void                    Deopt              !v    %65.4, %65.3, %65.1   !
BB226   <- [224]
  lgl$-           %226.0 = CastType           d     dn %224.1
  lgl$#-          %226.1 = CheckTrueFalse     e     %226.0
  void                    Branch                   %226.1 -> BB101 (if true) | BB81 (if false)
BB227   <- [224]
  void                    Nop                !     
  val?            %227.1 = %224.1
  dr              %227.2 = Typecheck@0x5638bd89be00[Type#136]
  goto BB79
BB101   <- [226]
  val?^ | miss    %101.0 = LdVar              eR    c, e0.2
  lgl$#-          %101.1 = Identical                <blt c>, %101.0   <@?>
  void                    Branch                   %101.1 -> BB103 (if true) | BB102 (if false)
BB81   <- [226]
  val?^ | miss    %81.0 = LdVar              eR    getClassDef, e0.2
  lgl$#-          %81.1 = Identical                %81.0, function(Class, where=topenv(parent.frame()), |...
  void                    Branch                   %81.1 -> BB232 (if true) | BB233 (if false)
BB79   <- [227, 233]
  val?^ | miss    %79.0 = Phi                      %227.1:BB227, %233.1:BB233
  val?^ | miss    %79.1 = %79.0
  dr              %79.2 = Phi                      %227.2:BB227, %233.2:BB233
  dr              %79.3 = %79.2
  fs              %79.4 = FrameState         R     0x5638c5814fa0+2582: [%216.6, %216.7, %216.8, %224.1], env=e0.2
  void                    Deopt              !v    %79.4, %79.3, %79.1   !
BB103   <- [101]
  val?^ | miss    %103.0 = LdVar              eR    badContains, e0.2
  val?            %103.1 = Force!             !v    %103.0, e0.2   <val?_>
  val?^ | miss    %103.2 = LdVar              eR    class2, e0.2
  val?            %103.3 = Force!             !v    %103.2, e0.2   <val?_>
  lgl$#-          %103.4 = IsType                   %103.3 isA val?+
  lgl$#-          %103.5 = IsType                   %103.1 isA val?+
  void                    Branch                   %103.5 -> BB228 (if true) | BB229 (if false)
BB102   <- [101]
  (cls|spec|blt)  %102.0 = LdFun              !v    c, e0.2
  fs              %102.1 = FrameState         R     0x5638c5814fa0+2761: [%216.6, %216.7, %216.8, %102.0], env=e0.2
  void                    Deopt              !v    %102.1, DeadCall@0x5638bd89be00[Call#54], %102.0   !
BB232   <- [81]
  prom-           %232.0 = MkArg                    unboundValue, setClass[0x5638beccc380]_p58, e0.2
  prom-           %232.1 = MkArg                    unboundValue, setClass[0x5638beccc380]_p59, e0.2
  val?            %232.2 = StaticCall         !v    getClassDef[0x5638c56beae0](%232.0, %232.1) { 0 1n } e0.2   <other>
  lgl$-           %232.3 = Is                       %232.2, NULL
  void                    StVar              lW    classDef, %232.2, e0.2
  val             %232.5 = ChkMissing         e     %232.2
  lgl$#-          %232.6 = CheckTrueFalse     e     %232.3
  void                    Branch                   %232.6 -> BB100 (if true) | BB82 (if false)
BB233   <- [81]
  void                    Nop                !     
  val?^ | miss    %233.1 = %81.0
  dr              %233.2 = CallTarget@0x5638bd89be00[Call#50]
  goto BB79
BB228   <- [103]
  val?+           %228.0 = CastType           d     dn %103.1   <val?_>
  void                    Branch                   %103.4 -> BB230 (if true) | BB231 (if false)
BB229   <- [103]
  void                    Nop                !     
  val?            %229.1 = %103.1
  dr              %229.2 = Typecheck@0x5638bd89be00[Type#146]
  goto BB104
BB100   <- [232]
  (cls|spec|blt)  %100.0 = LdFun              !v    stop, e0.2
  fs              %100.1 = FrameState         R     0x5638c5814fa0+2687: [%216.6, %216.7, %216.8, %100.0], env=e0.2
  void                    Deopt              !v    %100.1, DeadCall@0x5638bd89be00[Call#51], %100.0   !
BB82   <- [232]
  void                    Nop                !     
  goto BB83
BB230   <- [228]
  val?+           %230.0 = CastType           d     dn %103.3   <val?_>
  val+            %230.1 = CallSafeBuiltin    wed   c(%228.0, %230.0)    <val?_>
  void                    StVar              lW    badContains, %230.1, e0.2
  goto BB83
BB231   <- [228]
  void                    Nop                !     
  val?            %231.1 = %103.3
  dr              %231.2 = Typecheck@0x5638bd89be00[Type#147]
  goto BB104
BB104   <- [229, 231]
  val?^ | miss    %104.0 = Phi                      %229.1:BB229, %231.1:BB231
  val?^ | miss    %104.1 = %104.0
  dr              %104.2 = Phi                      %229.2:BB229, %231.2:BB231
  dr              %104.3 = %104.2
  fs              %104.4 = FrameState         R     0x5638c5814fa0+2821: [%216.6, %216.7, %216.8, <blt c>, %103.1, %103.3], env=e0.2
  void                    Deopt              !v    %104.4, %104.3, %104.1   !
BB83   <- [82, 230]
  int$-           %83.0 = Inc                      %216.8
  lgl$-           %83.1 = Lt                 d     %216.7, %83.0, elided
  lgl$#-          %83.2 = Identical                %83.1, true
  void                    Branch                   %83.2 -> BB87 (if true) | BB86 (if false)
BB87   <- [83]
  val?^ | miss    %87.0 = LdVar              eR    length, e0.2
  lgl$#-          %87.1 = Identical                <blt length>, %87.0   <true>
  void                    Branch                   %87.1 -> BB234 (if true) | BB235 (if false)
BB86   <- [83]
  val?            %86.0 = Extract2_1D        wed   %216.6, %83.0, elided
  void                    StVar              lW    ext, %86.0, e0.2
  (cls|spec|blt)  %86.2 = LdFun              !v    @, e0.2
  fs              %86.3 = FrameState         R     0x5638c5814fa0+2891: [%216.6, %216.7, %83.0, %86.2], env=e0.2
  void                    Deopt              !v    %86.3, DeadCall@0x5638bd89be00[Call#55], %86.2   !
BB234   <- [87]
  val?^ | miss    %234.0 = LdVar              eR    badContains, e0.2
  lgl$#-          %234.1 = IsType                   %234.0 isA val?~- | miss
  void                    Branch                   %234.1 -> BB236 (if true) | BB237 (if false)
BB235   <- [87]
  void                    Nop                !     
  lgl$#-          %235.1 = %87.1
  dr              %235.2 = DeadBranchReached@0x5638bd89be00[Test#17]
  goto BB84
BB236   <- [234]
  val?~- | miss   %236.0 = CastType           d     dn %234.0
  val?-           %236.1 = Force!<value>            %236.0,    <str->
  (int|real)$-    %236.2 = CallSafeBuiltin    wed   length(%236.1)    <int$->
  lgl$#-          %236.3 = IsType                   %236.2 isA int$-
  void                    Branch                   %236.3 -> BB238 (if true) | BB239 (if false)
BB237   <- [234]
  void                    Nop                !     
  val?^ | miss    %237.1 = %234.0
  dr              %237.2 = Typecheck@0x5638bd89be00[Type#172]
  goto BB84
BB84   <- [235, 237]
  val?^ | miss    %84.0 = Phi                      %235.1:BB235, %237.1:BB237
  val?^ | miss    %84.1 = %84.0
  dr              %84.2 = Phi                      %235.2:BB235, %237.2:BB237
  dr              %84.3 = %84.2
  fs              %84.4 = FrameState         R     0x5638c5814fa0+2857: [%216.6, %216.7, %216.8], env=e0.2
  void                    Deopt              !v    %84.4, %84.3, %84.1   !
BB238   <- [236]
  int$-           %238.0 = CastType           d     dn %236.2
  lgl$#-          %238.1 = CheckTrueFalse     e     %238.0
  void                    Branch                   %238.1 -> BB99 (if true) | BB90 (if false)
BB239   <- [236]
  void                    Nop                !     
  (int|real)$-    %239.1 = %236.2
  dr              %239.2 = Typecheck@0x5638bd89be00[Type#173]
  goto BB88
BB99   <- [238]
  (cls|spec|blt)  %99.0 = LdFun              !v    paste, e0.2
  fs              %99.1 = FrameState         R     0x5638c5814fa0+3371: [%99.0], env=e0.2
  void                    Deopt              !v    %99.1, DeadCall@0x5638bd89be00[Call#65], %99.0   !
BB90   <- [238]
  val?^ | miss    %90.0 = LdVar              eR    attr, e0.2
  lgl$#-          %90.1 = Identical                <blt attr>, %90.0   <true>
  void                    Branch                   %90.1 -> BB240 (if true) | BB241 (if false)
BB88   <- [239, 241]
  val?^ | miss    %88.0 = Phi                      %239.1:BB239, %241.1:BB241
  val?^ | miss    %88.1 = %88.0
  dr              %88.2 = Phi                      %239.2:BB239, %241.2:BB241
  dr              %88.3 = %88.2
  fs              %88.4 = FrameState         R     0x5638c5814fa0+3350: [%236.2], env=e0.2
  void                    Deopt              !v    %88.4, %88.3, %88.1   !
BB240   <- [90]
  (cls|spec|blt)  %240.0 = LdFun              !v    @, <0x5638b9a6cbd8>, e0.2
  prom-           %240.1 = MkArg                    unboundValue, setClass[0x5638beccc380]_p60, e0.2
  prom-           %240.2 = MkArg                    unboundValue, setClass[0x5638beccc380]_p61, e0.2
  val?            %240.3 = Call               !v    %240.0(%240.1, %240.2) e0.2   <vec+>
  val?            %240.4 = CallBuiltin        !v    attr(%240.3, "conflicts") e0.2   <nil->
  lgl$#-          %240.5 = IsType                   %240.4 isA val?-
  void                    Branch                   %240.5 -> BB242 (if true) | BB243 (if false)
BB241   <- [90]
  void                    Nop                !     
  lgl$#-          %241.1 = %90.1
  dr              %241.2 = DeadBranchReached@0x5638bd89be00[Test#19]
  goto BB88
BB242   <- [240]
  val?-           %242.0 = CastType           d     dn %240.4   <nil->
  (int|real)$-    %242.1 = CallSafeBuiltin    wed   length(%242.0)    <int$->
  lgl$#-          %242.2 = IsType                   %242.1 isA int$-
  void                    Branch                   %242.2 -> BB244 (if true) | BB245 (if false)
BB243   <- [240]
  fs              %243.0 = FrameState         R     0x5638c5814fa0+3935: [<blt length>, %240.4], env=e0.2
  void                    Deopt              !v    %243.0, Typecheck@0x5638bd89be00[Type#227], %240.4   !
BB244   <- [242]
  int$-           %244.0 = CastType           d     dn %242.1
  lgl$-           %244.1 = Gt                 d     %244.0, 0, elided   <lgl$->
  lgl$#-          %244.2 = CheckTrueFalse     e     %244.1
  void                    Branch                   %244.2 -> BB98 (if true) | BB95 (if false)
BB245   <- [242]
  void                    Nop                !     
  (int|real)$-    %245.1 = %242.1
  dr              %245.2 = Typecheck@0x5638bd89be00[Type#228]
  goto BB93
BB98   <- [244]
  (cls|spec|blt)  %98.0 = LdFun              !v    .reportSuperclassConflicts, e0.2
  fs              %98.1 = FrameState         R     0x5638c5814fa0+3990: [%98.0], env=e0.2
  void                    Deopt              !v    %98.1, DeadCall@0x5638bd89be00[Call#99], %98.0   !
BB95   <- [244]
  val?^ | miss    %95.0 = LdVar              eR    .checkRequiredGenerics, e0.2
  lgl$#-          %95.1 = Identical                %95.0, function(Class, classDef, where) <(rir::Dispat|...
  void                    Branch                   %95.1 -> BB246 (if true) | BB247 (if false)
BB93   <- [245, 247]
  val?^ | miss    %93.0 = Phi                      %245.1:BB245, %247.1:BB247
  val?^ | miss    %93.1 = %93.0
  dr              %93.2 = Phi                      %245.2:BB245, %247.2:BB247
  dr              %93.3 = %93.2
  fs              %93.4 = FrameState         R     0x5638c5814fa0+3957: [%242.1], env=e0.2
  void                    Deopt              !v    %93.4, %93.3, %93.1   !
BB246   <- [95]
  prom-           %246.0 = MkArg                    unboundValue, setClass[0x5638beccc380]_p62, e0.2
  prom-           %246.1 = MkArg                    unboundValue, setClass[0x5638beccc380]_p63, e0.2
  prom-           %246.2 = MkArg                    unboundValue, setClass[0x5638beccc380]_p64, e0.2
  val?            %246.3 = StaticCall         !v    .checkRequiredGenerics[0x5638c5c0e5e0](%246.0, %246.1, %246.2) e0.2
  val?^ | miss    %246.4 = LdVar              eR    sealed, e0.2
  val?            %246.5 = Force!<value>      !v    %246.4, e0.2   <lgl$->
  lgl$#-          %246.6 = CheckTrueFalse     we    %246.5
  void                    Branch                   %246.6 -> BB97 (if true) | BB96 (if false)
BB247   <- [95]
  void                    Nop                !     
  val?^ | miss    %247.1 = %95.0
  dr              %247.2 = CallTarget@0x5638bd89be00[Call#101]
  goto BB93
BB97   <- [246]
  (cls|spec|blt)  %97.0 = LdFun              !v    <-, e0.2
  fs              %97.1 = FrameState         R     0x5638c5814fa0+4101: [%97.0], env=e0.2
  void                    Deopt              !v    %97.1, DeadCall@0x5638bd89be00[Call#102], %97.0   !
BB96   <- [246]
  void                    Nop                !     
  goto BB61
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     character, <0x5638ba2067e0>, e0.0
  val?            %0.2  = Call               !     %0.1() e0.0   <str->
  void                    Return             l     %0.2
Prom 3:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     list, <0x5638b9a815c0>, e0.0
  val?            %0.2  = Call               !     %0.1() e0.0   <vec->
  void                    Return             l     %0.2
Prom 4:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     topenv, <0x5638b9f91b08>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, setClass[0x5638beccc380]_p5, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <env->
  void                    Return             l     %0.3
Prom 5:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     parent.frame, <0x5638b9b81170>, e0.0
  val?            %0.2  = Call               !     %0.1() e0.0   <env->
  void                    Return             l     %0.2
Prom 6:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     .newExternalptr, <0x5638c58deb90>, e0.0
  val?            %0.2  = Call               !     %0.1() e0.0   <other->
  void                    Return             l     %0.2
Prom 8:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     getPackageName, <0x5638bc9af858>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, setClass[0x5638beccc380]_p9, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <str$->
  void                    Return             l     %0.3
Prom 9:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 11:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    Class, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 12:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 13:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    oldDef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <(nil|other)>
  void                    Return             l     %0.3
Prom 14:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    oldDef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 15:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    sealed, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 16:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    representation, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <vec->
  void                    Return             l     %0.3
Prom 17:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    representation, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <vec->
  void                    Return             l     %0.3
Prom 18:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    Class, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 19:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    properties, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 20:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    superClasses, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 21:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    prototype, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <nil->
  void                    Return             l     %0.3
Prom 22:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    package, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 23:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    validity, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <nil->
  void                    Return             l     %0.3
Prom 24:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    access, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <vec->
  void                    Return             l     %0.3
Prom 25:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    version, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <other->
  void                    Return             l     %0.3
Prom 26:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    sealed, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <lgl$->
  void                    Return             l     %0.3
Prom 27:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 28:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    classDef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 29:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    contains, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 30:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    Class, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 31:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    classDef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <other>
  void                    Return             l     %0.3
Prom 32:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 33:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    Class, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 34:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    classDef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <other>
  void                    Return             l     %0.3
Prom 35:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    Class, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 36:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    classDef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <other>
  void                    Return             l     %0.3
Prom 37:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 38:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    classDef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <other>
  void                    Return             l     %0.3
Prom 39:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 40:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    classDef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 41:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    sealed, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 42:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, e0.0
  prom-           %0.2  = MkArg                    unboundValue, setClass[0x5638beccc380]_p43, e0.0
  prom-           %0.3  = MkArg                    unboundValue, setClass[0x5638beccc380]_p44, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 43:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    classDef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 44:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    sealed, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 45:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    Class, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 46:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    classDef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <other>
  void                    Return             l     %0.3
Prom 47:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 48:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    classDef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 49:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    contains, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 50:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    ext, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 51:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    superClass, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 52:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     try, <0x5638ba081428>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, setClass[0x5638beccc380]_p53, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <other>
  void                    Return             l     %0.3
Prom 53:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     setIs, <0x5638c2112e40>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, setClass[0x5638beccc380]_p54, e0.0
  prom-           %0.3  = MkArg                    unboundValue, setClass[0x5638beccc380]_p55, e0.0
  prom-           %0.4  = MkArg                    unboundValue, setClass[0x5638beccc380]_p56, e0.0
  prom-           %0.5  = MkArg                    unboundValue, setClass[0x5638beccc380]_p57, e0.0
  val?            %0.6  = NamedCall          !     %0.1(%0.2, %0.3, classDef=%0.4, where=%0.5) e0.0   <other>
  void                    Return             l     %0.6
Prom 54:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    Class, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 55:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    class2, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$+>
  void                    Return             l     %0.3
Prom 56:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    classDef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <other>
  void                    Return             l     %0.3
Prom 57:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 58:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    Class, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 59:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 60:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    classDef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 61:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    contains, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 62:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    Class, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 63:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    classDef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <other>
  void                    Return             l     %0.3
Prom 64:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 65:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     length, <0x5638b9a6da90>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, setClass[0x5638beccc380]_p66, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <int$->
  void                    Return             l     %0.3
Prom 66:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    x, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <(nil|vec)->
  void                    Return             l     %0.3

│ setClass[0x5638beccc380]                                                     │
└──────────────────────────────────────────────────────────────────────────────┘
