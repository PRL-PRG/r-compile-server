
┌──────────────────────────────────────────────────────────────────────────────┐
│ reconcilePropertiesAndPrototype[0x5638c44fa010]                              │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;NonRefl0,NonRefl1,NonRefl2,NonRefl3,NonRefl4,!Obj0,!Obj1,!Obj2,!Obj3,!Obj4│
│ Properties:                                                                  │
├────── Final PIR Version
reconcilePropertiesAndPrototype[0x5638c44fa010]
BB0
  val?^           %0.0  = LdArg                    4
  val?^           %0.1  = LdArg                    3
  val?^           %0.2  = LdArg                    2
  val?^           %0.3  = LdArg                    1
  val?^           %0.4  = LdArg                    0
  val?^ | miss    %0.5  = LdVar              eR    defaultPrototype, <env 0x5638ba074378>
  lgl$#-          %0.6  = Identical                %0.5, function() <(rir::DispatchTable*)0x5638c5c10ef|...
  void                    Branch                   %0.6 -> BB331 (if true) | BB332 (if false)
BB331   <- [0]
  val?^ | miss    %331.0 = LdVar              eR    .defaultPrototype, <env 0x5638ba074378>
  env             e331.1 = MkEnv              l     name=%0.4, properties=%0.3, prototype=%0.2, superClasses=%0.1, where=%0.0, parent=<env 0x5638ba074378>, context 1
  val?            %331.2 = Force!<wrapped>    !vr   %331.0,    <other->
  void                    StVar              lW    StandardPrototype, %331.2, e331.1
  val?^ | miss    %331.4 = LdVar              eR    validSlotNames, <env 0x5638ba074378>
  lgl$#-          %331.5 = Identical                %331.4, function(names) <(rir::DispatchTable*)0x5638be|...
  void                    Branch                   %331.5 -> BB333 (if true) | BB334 (if false)
BB332   <- [0]
  env             e332.0 = (MkEnv)            l     name=%0.4, properties=%0.3, prototype=%0.2, superClasses=%0.1, where=%0.0, parent=<env 0x5638ba074378>, context 1
  fs              %332.1 = FrameState         R     0x5638c6adad00+0: [], env=e332.0
  void                    Deopt              !v    %332.1, CallTarget@0x5638bfa02a10[Call#0], %0.5
BB333   <- [331]
  prom-           %333.0 = MkArg                    unboundValue, reconcilePropertiesAndPrototype[0x5638c44fa010]_p0, e331.1
  val?^           %333.1 = CastType                 up %333.0
  val?^ | miss    %333.2 = LdVar              eR    is.na, <env 0x5638ba074378>
  lgl$#-          %333.3 = Identical                <blt is.na>, %333.2   <true>
  void                    Branch                   %333.3 -> BB335 (if true) | BB336 (if false)
BB334   <- [331]
  void                    Nop                !     
  val?^ | miss    %334.1 = %331.4
  dr              %334.2 = CallTarget@0x5638bfa02a10[Call#1]
  goto BB3
BB335   <- [333]
  val?^ | miss    %335.0 = LdVar              eR    match, <env 0x5638ba074378>
  lgl$#-          %335.1 = Identical                %335.0, function(x, table, nomatch=NA, incomparables=N|...
  void                    Branch                   %335.1 -> BB337 (if true) | BB338 (if false)
BB336   <- [333]
  void                    Nop                !     
  lgl$#-          %336.1 = %333.3
  dr              %336.2 = DeadBranchReached@0x5638c63fb608[Test#0]
  goto BB3
BB3   <- [334, 336, 338, 340]
  val?^ | miss    %3.0  = Phi                      %334.1:BB334, %336.1:BB336, %338.1:BB338, %340.1:BB340
  val?^ | miss    %3.1  = %3.0
  dr              %3.2  = Phi                      %334.2:BB334, %336.2:BB336, %338.2:BB338, %340.2:BB340
  dr              %3.3  = %3.2
  fs              %3.4  = FrameState         R     0x5638c6adad00+41: [], env=e331.1
  void                    Deopt              !v    %3.4, %3.3, %3.1
BB337   <- [335]
  val?^ | miss    %337.0 = LdVar              eR    allNames, <env 0x5638ba074378>
  lgl$#-          %337.1 = Identical                %337.0, function(x) <(rir::DispatchTable*)0x5638c0a4a1|...
  void                    Branch                   %337.1 -> BB339 (if true) | BB340 (if false)
BB338   <- [335]
  void                    Nop                !     
  val?^ | miss    %338.1 = %335.0
  dr              %338.2 = CallTarget@0x5638c63fb608[Call#2]
  goto BB3
BB339   <- [337]
  prom-           %339.0 = MkArg                    unboundValue, reconcilePropertiesAndPrototype[0x5638c44fa010]_p1 (!refl), e331.1
  ct              %339.1 = PushContext        lCL   %339.0, allNames(properties), function(x) <(rir::DispatchTable*)0x5638c0a4a1|..., e331.1
  val?^           %339.2 = CastType                 up %339.0
  val?^ | miss    %339.3 = LdVar              eR    names, <env 0x5638ba074378>
  lgl$#-          %339.4 = Identical                <blt names>, %339.3   <true>
  void                    Branch                   %339.4 -> BB341 (if true) | BB342 (if false)
BB340   <- [337]
  void                    Nop                !     
  val?^ | miss    %340.1 = %337.0
  dr              %340.2 = CallTarget@0x5638bfa02a10[Call#2]
  goto BB3
BB341   <- [339]
  env             e341.0 = (MkEnv)            l     names=%333.1, parent=<env 0x5638ba074378>, context 1
  env             e341.1 = MkEnv              l     x=%339.2, parent=<env 0x5638ba074378>, context 1
  val?            %341.2 = Force!<lazy>       !vr   %339.2,    <(nil|vec)+>
  val?            %341.3 = CallBuiltin        !v    names(%341.2) e341.1   <(nil|str)->
  void                    StVar              lW    value, %341.3, e341.1
  lgl$-           %341.5 = Is                       %341.3, NULL
  val             %341.6 = ChkMissing         e     %341.3
  lgl$#-          %341.7 = CheckTrueFalse     e     %341.5
  void                    Branch                   %341.7 -> BB329 (if true) | BB9 (if false)
BB342   <- [339]
  env             e342.0 = (MkEnv)            l     names=%333.1, parent=<env 0x5638ba074378>, context 1
  env             e342.1 = MaterializeEnv           , e342.0   <@?>
  prom-           %342.2 = MkArg                    unboundValue, reconcilePropertiesAndPrototype[0x5638c44fa010]_p81, e342.1
  val?^           %342.3 = CastType                 up %342.2
  fs              %342.4 = FrameState         R     0x5638c6adad00+73: [], env=e331.1
  fs              %342.5 = FrameState         R     0x5638bef8afe0+97: [<blt is.na>], env=e342.1, next=%342.4
  env             e342.6 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%342.3, x="class", parent=R_BaseNamespace, context 0
  fs              %342.7 = FrameState         R     0x5638ba281d40+23: ["class"], env=e342.6, next=%342.5
  fs              %342.8 = FrameState         R     0x5638c5e9a930+5(pr): [], env=e342.1, next=%342.7
  fs              %342.9 = FrameState         R     0x5638c67906f0+32(pr): [], env=e331.1, next=%342.8
  env             e342.10 = (MkEnv)            l     x=%339.2, parent=<env 0x5638ba074378>, context 1
  fs              %342.11 = FrameState         R     0x5638c58c5380+17: [<blt names>, %339.4], env=e342.10, next=%342.9
  void                    Deopt              !v    %342.11, DeadBranchReached@0x5638c58fdc88[Test#0], %339.4   !
BB329   <- [341]
  val?^ | miss    %329.0 = LdVar              eR    character, e341.1
  lgl$#-          %329.1 = Identical                %329.0, function(length=0L) <(rir::DispatchTable*)0x56|...
  void                    Branch                   %329.1 -> BB343 (if true) | BB344 (if false)
BB9   <- [341]
  void                    Nop                !     
  val?            %9.1  = %341.3
  goto BB10
BB343   <- [329]
  prom-           %343.0 = MkArg                    unboundValue, reconcilePropertiesAndPrototype[0x5638c44fa010]_p129, e341.1
  ct              %343.1 = PushContext        lCL   %343.0, character(length(x)), function(length=0L) <(rir::DispatchTable*)0x56|..., e341.1
  val?^           %343.2 = CastType                 up %343.0
  env             e343.3 = MkEnv              l     length=%343.2, parent=R_BaseNamespace, context 1
  val?            %343.4 = Force!<lazy>       !vL   %343.2, e343.3   <(int|real)$->
  val?            %343.5 = CallBuiltin        !v    vector("character", %343.4) e343.3
  val?            %343.6 = PopContext         C     %343.5, %343.1   <str->
  val?            %343.7 = %343.6
  goto BB10
BB344   <- [329]
  env             e344.0 = MaterializeEnv           , e341.0   <@?>
  prom-           %344.1 = MkArg                    unboundValue, reconcilePropertiesAndPrototype[0x5638c44fa010]_p81, e344.0
  val?^           %344.2 = CastType                 up %344.1
  fs              %344.3 = FrameState         R     0x5638c6adad00+73: [], env=e331.1
  fs              %344.4 = FrameState         R     0x5638bef8afe0+97: [<blt is.na>], env=e344.0, next=%344.3
  env             e344.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%344.2, x="class", parent=R_BaseNamespace, context 0
  fs              %344.6 = FrameState         R     0x5638ba281d40+23: ["class"], env=e344.5, next=%344.4
  fs              %344.7 = FrameState         R     0x5638c5e9a930+5(pr): [], env=e344.0, next=%344.6
  fs              %344.8 = FrameState         R     0x5638c67906f0+32(pr): [], env=e331.1, next=%344.7
  fs              %344.9 = FrameState         R     0x5638c58c5380+105: [], env=e341.1, next=%344.8
  void                    Deopt              !v    %344.9, CallTarget@0x5638c58fdc88[Call#1], %329.0   !
BB10   <- [9, 343]
  val?            %10.0 = Phi                      %9.1:BB9, %343.7:BB343
  val?            %10.1 = %10.0
  val?            %10.2 = PopContext         C     %10.1, %339.1   <str->
  prom-           %10.3 = MkArg                    %10.2, reconcilePropertiesAndPrototype[0x5638c44fa010]_p0 (!refl), e331.1
  val?~           %10.4 = CastType                 up %10.3
  void                    StArg              lWd   names, %10.4, e341.0
  lgl$#-          %10.6 = IsType                   %10.2 isA val?+
  void                    Branch                   %10.6 -> BB345 (if true) | BB346 (if false)
BB345   <- [10]
  val?+           %345.0 = CastType           d     dn %10.2   <str->
  val+            %345.1 = CallSafeBuiltin    wed   match("class", %345.0, NA, nil)    <int$->
  lgl$#-          %345.2 = IsType                   %345.1 isA int$-
  void                    Branch                   %345.2 -> BB347 (if true) | BB348 (if false)
BB346   <- [10]
  env             e346.0 = MaterializeEnv           , e341.0   <@?>
  prom-           %346.1 = MkArg                    unboundValue, reconcilePropertiesAndPrototype[0x5638c44fa010]_p81 (!refl), e346.0
  val?^           %346.2 = CastType                 up %346.1
  fs              %346.3 = FrameState         R     0x5638c6adad00+73: [], env=e331.1
  fs              %346.4 = FrameState         R     0x5638bef8afe0+97: [<blt is.na>], env=e346.0, next=%346.3
  env             e346.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%346.2, x="class", parent=R_BaseNamespace, context -1
  fs              %346.6 = FrameState         R     0x5638ba281d40+23: ["class"], env=e346.5, next=%346.4
  fs              %346.7 = FrameState         R     0x5638c5e9a930+5(pr): [%10.2], env=e346.0, next=%346.6
  void                    Deopt              !v    %346.7, Typecheck@0x5638ba2d4cb0[Type#1], %10.2   !
BB347   <- [345]
  int$-           %347.0 = CastType           d     dn %345.1
  lgl$-           %347.1 = CallSafeBuiltin    wed   is.na(%347.0)    <lgl$->
  lgl$#-          %347.2 = CheckTrueFalse     e     %347.1
  void                    Branch                   %347.2 -> BB16 (if true) | BB15 (if false)
BB348   <- [345]
  env             e348.0 = MaterializeEnv           , e341.0   <@?>
  fs              %348.1 = FrameState         R     0x5638c6adad00+73: [], env=e331.1
  fs              %348.2 = FrameState         R     0x5638bef8afe0+97: [<blt is.na>], env=e348.0, next=%348.1
  prom-           %348.3 = MkArg                    %345.0, reconcilePropertiesAndPrototype[0x5638c44fa010]_p81 (!refl), e348.0
  val?~           %348.4 = CastType                 up %348.3
  env             e348.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%348.4, x="class", parent=R_BaseNamespace, context -1
  fs              %348.6 = FrameState         R     0x5638ba281d40+69: [%345.1], env=e348.5, next=%348.2
  void                    Deopt              !v    %348.6, Typecheck@0x5638c63fb608[Type#3], %345.1   !
BB16   <- [347]
  void                    StVar              lW    slots, %345.0, e331.1
  val?^ | miss    %16.1 = LdVar              eR    elNamed, e331.1
  lgl$#-          %16.2 = Identical                %16.1, function(x, name, mustFind=FALSE) <(rir::Dispa|...
  void                    Branch                   %16.2 -> BB349 (if true) | BB350 (if false)
BB15   <- [347]
  fs              %15.0 = FrameState         R     0x5638c6adad00+73: [], env=e331.1
  (cls|spec|blt)  %15.1 = LdFun              !v    stop, <env 0x5638ba074378>
  fs              %15.2 = FrameState         R     0x5638bef8afe0+135: [%15.1], env=e341.0, next=%15.0
  void                    Deopt              !v    %15.2, DeadCall@0x5638c63fb608[Call#3], %15.1   !
BB349   <- [16]
  prom-           %349.0 = MkArg                    unboundValue, reconcilePropertiesAndPrototype[0x5638c44fa010]_p2, e331.1
  ct              %349.1 = PushContext        lCL   %349.0, ".Data", elNamed(properties, ".Data"), function(x, name, mustFind=FALSE) <(rir::Dispa|..., e331.1
  val?^           %349.2 = CastType                 up %349.0
  val?^ | miss    %349.3 = LdVar              eR    match, <env 0x5638ba074378>
  lgl$#-          %349.4 = Identical                %349.3, function(x, table, nomatch=NA, incomparables=N|...
  void                    Branch                   %349.4 -> BB351 (if true) | BB352 (if false)
BB350   <- [16]
  fs              %350.0 = FrameState         R     0x5638c6adad00+87: [], env=e331.1
  void                    Deopt              !v    %350.0, CallTarget@0x5638bfa02a10[Call#3], %16.1   !
BB351   <- [349]
  val?^ | miss    %351.0 = LdVar              eR    names, <env 0x5638ba074378>
  lgl$#-          %351.1 = Identical                %351.0, <blt names>
  void                    Branch                   %351.1 -> BB353 (if true) | BB354 (if false)
BB352   <- [349]
  void                    Nop                !     
  val?^ | miss    %352.1 = %349.3
  dr              %352.2 = CallTarget@0x5638bd1496a0[Call#0]
  goto BB19
BB353   <- [351]
  env             e353.0 = MkEnv              l     x=%349.2, name=".Data", mustFind(miss)=false, parent=<env 0x5638ba074378>, context 1
  val?            %353.1 = Force!<lazy>       !vL   %349.2, e353.0   <(str|vec)+>
  val?            %353.2 = CallBuiltin        !v    names(%353.1) e353.0   <(nil|str)->
  lgl$#-          %353.3 = IsType                   %353.2 isA val?+
  void                    Branch                   %353.3 -> BB355 (if true) | BB356 (if false)
BB354   <- [351]
  void                    Nop                !     
  val?^ | miss    %354.1 = %351.0
  dr              %354.2 = CallTarget@0x5638bd1496a0[Call#1]
  goto BB19
BB19   <- [352, 354]
  val?^ | miss    %19.0 = Phi                      %352.1:BB352, %354.1:BB354
  val?^ | miss    %19.1 = %19.0
  dr              %19.2 = Phi                      %352.2:BB352, %354.2:BB354
  dr              %19.3 = %19.2
  fs              %19.4 = FrameState         R     0x5638c6adad00+124: [], env=e331.1
  env             e19.5 = (MkEnv)            l     x=%349.2, name=".Data", mustFind(miss)=false, parent=<env 0x5638ba074378>, context 1
  fs              %19.6 = FrameState         R     0x5638bf9ae030+0: [], env=e19.5, next=%19.4
  void                    Deopt              !v    %19.6, %19.3, %19.1   !
BB355   <- [353]
  val?+           %355.0 = CastType           d     dn %353.2   <(nil|str)->
  val+            %355.1 = CallSafeBuiltin    wed   match(".Data", %355.0, NA, nil)    <int$->
  lgl$#-          %355.2 = IsType                   %355.1 isA int$-
  void                    Branch                   %355.2 -> BB357 (if true) | BB358 (if false)
BB356   <- [353]
  fs              %356.0 = FrameState         R     0x5638c6adad00+124: [], env=e331.1
  prom-           %356.1 = MkArg                    unboundValue, reconcilePropertiesAndPrototype[0x5638c44fa010]_p115, e353.0
  val?^           %356.2 = CastType                 up %356.1
  prom-           %356.3 = MkArg                    unboundValue, reconcilePropertiesAndPrototype[0x5638c44fa010]_p114, e353.0
  val?^           %356.4 = CastType                 up %356.3
  fs              %356.5 = FrameState         R     0x5638bf9ae030+37: [], env=e353.0, next=%356.0
  env             e356.6 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%356.2, x=%356.4, parent=R_BaseNamespace, context 0
  fs              %356.7 = FrameState         R     0x5638ba281d40+23: [".Data"], env=e356.6, next=%356.5
  fs              %356.8 = FrameState         R     0x5638bfa65e40+32(pr): [%353.2], env=e353.0, next=%356.7
  void                    Deopt              !v    %356.8, Typecheck@0x5638ba2d4cb0[Type#1], %353.2   !
BB357   <- [355]
  int$-           %357.0 = CastType           d     dn %355.1
  void                    StVar              lW    i, %357.0, e353.0
  val?^ | miss    %357.2 = LdVar              eR    is.na, e353.0
  lgl$#-          %357.3 = Identical                <blt is.na>, %357.2   <true>
  void                    Branch                   %357.3 -> BB359 (if true) | BB360 (if false)
BB358   <- [355]
  fs              %358.0 = FrameState         R     0x5638c6adad00+124: [], env=e331.1
  prom-           %358.1 = MkArg                    unboundValue, reconcilePropertiesAndPrototype[0x5638c44fa010]_p114, e353.0
  val?^           %358.2 = CastType                 up %358.1
  prom-           %358.3 = MkArg                    %355.0, reconcilePropertiesAndPrototype[0x5638c44fa010]_p115 (!refl), e353.0
  val?~           %358.4 = CastType                 up %358.3
  fs              %358.5 = FrameState         R     0x5638bf9ae030+37: [], env=e353.0, next=%358.0
  env             e358.6 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%358.4, x=%358.2, parent=R_BaseNamespace, context 0
  fs              %358.7 = FrameState         R     0x5638ba281d40+69: [%355.1], env=e358.6, next=%358.5
  void                    Deopt              !v    %358.7, Typecheck@0x5638bd1496a0[Type#3], %355.1   !
BB359   <- [357]
  lgl$-           %359.0 = CallSafeBuiltin    wed   is.na(%357.0)    <lgl$->
  lgl$#-          %359.1 = CheckTrueFalse     e     %359.0
  void                    Branch                   %359.1 -> BB326 (if true) | BB27 (if false)
BB360   <- [357]
  fs              %360.0 = FrameState         R     0x5638c6adad00+124: [], env=e331.1
  fs              %360.1 = FrameState         R     0x5638bf9ae030+51: [], env=e353.0, next=%360.0
  void                    Deopt              !v    %360.1, DeadBranchReached@0x5638bd1496a0[Test#0], %357.3   !
BB326   <- [359]
  val?^ | miss    %326.0 = LdVar              eR    mustFind, e353.0
  val?            %326.1 = Force!<lazy>       !v    %326.0, e353.0   <lgl$->
  lgl$#-          %326.2 = CheckTrueFalse     we    %326.1
  void                    Branch                   %326.2 -> BB328 (if true) | BB327 (if false)
BB27   <- [359]
  val?^ | miss    %27.0 = LdVar              eR    x, e353.0
  val?            %27.1 = Force!<wrapped>    !v    %27.0, e353.0   <(str|vec)+>
  lgl$#-          %27.2 = IsType                   %27.1 isA val+   <true>
  lgl$#-          %27.3 = IsType                   %27.1 isA val?+
  void                    Branch                   %27.2 -> BB361 (if true) | BB362 (if false)
BB328   <- [326]
  fs              %328.0 = FrameState         R     0x5638c6adad00+124: [], env=e331.1
  (cls|spec|blt)  %328.1 = LdFun              !v    stop, e353.0
  fs              %328.2 = FrameState         R     0x5638bf9ae030+260: [%328.1], env=e353.0, next=%328.0
  void                    Deopt              !v    %328.2, DeadCall@0x5638bd1496a0[Call#3], %328.1   !
BB327   <- [326]
  void                    Nop                !     
  nil-            %327.1 = nil
  goto BB30
BB361   <- [27]
  val?^ | miss    %361.0 = LdVar              eR    i, e353.0
  lgl$#-          %361.1 = IsType                   %361.0 isA int$-
  void                    Branch                   %361.1 -> BB363 (if true) | BB364 (if false)
BB362   <- [27]
  void                    Nop                !     
  lgl$#-          %362.1 = %27.2
  dr              %362.2 = DeadBranchReached@0x5638bd1496a0[Test#1]
  goto BB28
BB30   <- [327, 365]
  val?            %30.0 = Phi                      %365.2:BB365, %327.1:BB327
  val?            %30.1 = %30.0
  val?            %30.2 = PopContext         C     %30.1, %349.1   <nil->
  lgl$-           %30.3 = Is                       %30.2, NULL
  void                    StVar              lW    dataPartClass, %30.2, e331.1
  void                    StVar              lW    dataPartValue, false, e331.1
  val             %30.6 = ChkMissing         e     %30.2
  lgl$-           %30.7 = Not                d     %30.3, elided
  lgl$-           %30.8 = AsLogical                %30.7
  lgl$#-          %30.9 = Identical                %30.8, false
  void                    Branch                   %30.9 -> BB34 (if true) | BB33 (if false)
BB363   <- [361]
  int$-           %363.0 = CastType           d     dn %361.0
  void                    Branch                   %27.3 -> BB365 (if true) | BB366 (if false)
BB364   <- [361]
  void                    Nop                !     
  val?^ | miss    %364.1 = %361.0
  dr              %364.2 = Typecheck@0x5638bd1496a0[Type#9]
  goto BB28
BB28   <- [362, 364, 366]
  val?^ | miss    %28.0 = Phi                      %362.1:BB362, %364.1:BB364, %366.1:BB366
  val?^ | miss    %28.1 = %28.0
  dr              %28.2 = Phi                      %362.2:BB362, %364.2:BB364, %366.2:BB366
  dr              %28.3 = %28.2
  fs              %28.4 = FrameState         R     0x5638c6adad00+124: [], env=e331.1
  fs              %28.5 = FrameState         R     0x5638bf9ae030+162: [%27.1], env=e353.0, next=%28.4
  void                    Deopt              !v    %28.5, %28.3, %28.1   !
BB34   <- [30]
  lgl$#-          %34.0 = CheckTrueFalse     e     %30.8
  void                    Branch                   %34.0 -> BB325 (if true) | BB35 (if false)
BB33   <- [30]
  (cls|spec|blt)  %33.0 = LdFun              !v    .validDataPartClass, e331.1
  fs              %33.1 = FrameState         R     0x5638c6adad00+185: [%30.8, %33.0], env=e331.1
  void                    Deopt              !v    %33.1, DeadCall@0x5638bfa02a10[Call#4], %33.0   !
BB365   <- [363]
  val?+           %365.0 = CastType           d     dn %27.1   <(str|vec)+>
  val?            %365.1 = Extract2_1D        wed   %365.0, %363.0, elided   <str$+>
  val?            %365.2 = %365.1
  goto BB30
BB366   <- [363]
  void                    Nop                !     
  val?            %366.1 = %27.1
  dr              %366.2 = Typecheck@0x5638bd1496a0[Type#7]
  goto BB28
BB325   <- [34]
  (cls|spec|blt)  %325.0 = LdFun              !v    stop, e331.1
  fs              %325.1 = FrameState         R     0x5638c6adad00+245: [%325.0], env=e331.1
  void                    Deopt              !v    %325.1, DeadCall@0x5638bfa02a10[Call#5], %325.0   !
BB35   <- [34]
  val?^ | miss    %35.0 = LdVar              eR    getClass, e331.1
  lgl$#-          %35.1 = Identical                %35.0, function(Class, .Force=FALSE, where=.classEnv(|...
  void                    Branch                   %35.1 -> BB367 (if true) | BB368 (if false)
BB367   <- [35]
  prom-           %367.0 = MkArg                    unboundValue, reconcilePropertiesAndPrototype[0x5638c44fa010]_p3, e331.1
  prom-           %367.1 = MkArg                    unboundValue, reconcilePropertiesAndPrototype[0x5638c44fa010]_p5, e331.1
  val?            %367.2 = StaticCall         !v    getClass[0x5638c695dbf0](%367.0, missingArg, %367.1) { 0 2n } e331.1   <other>
  void                    StVar              lW    prototypeClass, %367.2, e331.1
  val?^ | miss    %367.4 = LdVar              eR    dataPartClass, e331.1
  lgl$#-          %367.5 = IsType                   %367.4 isA val?~- | miss
  void                    Branch                   %367.5 -> BB369 (if true) | BB370 (if false)
BB368   <- [35]
  fs              %368.0 = FrameState         R     0x5638c6adad00+153: [], env=e331.1
  void                    Deopt              !v    %368.0, CallTarget@0x5638bfa02a10[Call#9], %35.0   !
BB369   <- [367]
  val?~- | miss   %369.0 = CastType           d     dn %367.4
  val?-           %369.1 = Force!<value>            %369.0,    <nil->
  lgl$-           %369.2 = Is                       %369.1, NULL
  lgl$-           %369.3 = Not                d     %369.2, elided
  lgl$-           %369.4 = AsLogical                %369.3
  lgl$#-          %369.5 = Identical                %369.4, true
  void                    Branch                   %369.5 -> BB324 (if true) | BB38 (if false)
BB370   <- [367]
  void                    Nop                !     
  val?^ | miss    %370.1 = %367.4
  dr              %370.2 = Typecheck@0x5638bfa02a10[Type#19]
  goto BB36
BB324   <- [369]
  void                    Nop                !     
  lgl$-           %324.1 = %369.4
  goto BB43
BB38   <- [369]
  val?^ | miss    %38.0 = LdVar              eR    length, e331.1
  lgl$#-          %38.1 = Identical                <blt length>, %38.0   <true>
  void                    Branch                   %38.1 -> BB371 (if true) | BB372 (if false)
BB36   <- [370, 372]
  val?^ | miss    %36.0 = Phi                      %370.1:BB370, %372.1:BB372
  val?^ | miss    %36.1 = %36.0
  dr              %36.2 = Phi                      %370.2:BB370, %372.2:BB372
  dr              %36.3 = %36.2
  fs              %36.4 = FrameState         R     0x5638c6adad00+345: [], env=e331.1
  void                    Deopt              !v    %36.4, %36.3, %36.1   !
BB43   <- [324, 381]
  lgl$-           %43.0 = Phi                      %381.3:BB381, %324.1:BB324
  lgl$-           %43.1 = %43.0
  lgl$#-          %43.2 = CheckTrueFalse     e     %43.1
  void                    Branch                   %43.2 -> BB260 (if true) | BB44 (if false)
BB371   <- [38]
  val?^ | miss    %371.0 = LdVar              eR    superClasses, e331.1
  val?            %371.1 = Force!<lazy>       !v    %371.0, e331.1   <str->
  lgl$#-          %371.2 = IsType                   %371.1 isA val?-
  void                    Branch                   %371.2 -> BB377 (if true) | BB378 (if false)
BB372   <- [38]
  void                    Nop                !     
  lgl$#-          %372.1 = %38.1
  dr              %372.2 = DeadBranchReached@0x5638bfa02a10[Test#0]
  goto BB36
BB260   <- [43]
  val?^ | miss    %260.0 = LdVar              eR    superClasses, e331.1
  val?            %260.1 = Force!<wrapped>    !v    %260.0, e331.1   <str->
  val?+           %260.2 = ToForSeq           e     %260.1
  int$-           %260.3 = Length                   %260.2
  int$-           %260.4 = Inc                      0L
  lgl$-           %260.5 = Lt                 d     %260.3, %260.4, elided   <false>
  lgl$#-          %260.6 = Identical                %260.5, true
  void                    Branch                   %260.6 -> BB374 (if true) | BB373 (if false)
BB44   <- [43]
  void                    Nop                !     
  goto BB45
BB377   <- [371]
  val?-           %377.0 = CastType           d     dn %371.1   <str->
  (int|real)$-    %377.1 = CallSafeBuiltin    wed   length(%377.0)    <int$->
  lgl$#-          %377.2 = IsType                   %377.1 isA int$-
  void                    Branch                   %377.2 -> BB381 (if true) | BB382 (if false)
BB378   <- [371]
  fs              %378.0 = FrameState         R     0x5638c6adad00+441: [%369.4, <blt length>, %371.1], env=e331.1
  void                    Deopt              !v    %378.0, Typecheck@0x5638bfa02a10[Type#21], %371.1   !
BB374   <- [260]
  fs              %374.0 = FrameState         R     0x5638c6adad00+491: [%260.1], env=e331.1
  void                    Deopt              !v    %374.0, DeadBranchReached@0x5638bfa02a10[Test#1], %260.6   !
BB373   <- [260]
  val?            %373.0 = Extract2_1D        wed   %260.2, %260.4, elided
  void                    StVar              lW    cl, %373.0, e331.1
  val?^ | miss    %373.2 = LdVar              eR    getClassDef, e331.1
  lgl$#-          %373.3 = Identical                %373.2, function(Class, where=topenv(parent.frame()), |...
  void                    Branch                   %373.3 -> BB375 (if true) | BB376 (if false)
BB45   <- [44, 286, 287]
  val?^ | miss    %45.0 = LdVar              eR    properties, e331.1
  val?            %45.1 = Force!<wrapped>    !v    %45.0, e331.1   <vec+>
  void                    StVar              lW    allProps, %45.1, e331.1
  val?^ | miss    %45.3 = LdVar              eR    superClasses, e331.1
  val?            %45.4 = Force!<wrapped>    !v    %45.3, e331.1   <str->
  val?+           %45.5 = ToForSeq           e     %45.4
  int$-           %45.6 = Length                   %45.5
  int$#-          %45.7 = 0L
  goto BB46
BB381   <- [377]
  int$-           %381.0 = CastType           d     dn %377.1
  lgl$-           %381.1 = AsLogical                %381.0
  lgl$-           %381.2 = LOr                      %369.4, %381.1
  lgl$-           %381.3 = %381.2
  goto BB43
BB382   <- [377]
  fs              %382.0 = FrameState         R     0x5638c6adad00+463: [%369.4, %377.1], env=e331.1
  void                    Deopt              !v    %382.0, Typecheck@0x5638bfa02a10[Type#22], %377.1   !
BB375   <- [373]
  prom-           %375.0 = MkArg                    unboundValue, reconcilePropertiesAndPrototype[0x5638c44fa010]_p58 (!refl), e331.1
  prom-           %375.1 = MkArg                    unboundValue, reconcilePropertiesAndPrototype[0x5638c44fa010]_p59, e331.1
  val?            %375.2 = StaticCall         !v    getClassDef[0x5638c5be3120](%375.0, %375.1) { 0 1n } e331.1   <other>
  lgl$-           %375.3 = Is                       %375.2, NULL
  void                    StVar              lW    clDef, %375.2, e331.1
  val             %375.5 = ChkMissing         e     %375.2
  lgl$#-          %375.6 = CheckTrueFalse     e     %375.3
  void                    Branch                   %375.6 -> BB323 (if true) | BB267 (if false)
BB376   <- [373]
  fs              %376.0 = FrameState         R     0x5638c6adad00+536: [%260.2, %260.3, %260.4], env=e331.1
  void                    Deopt              !v    %376.0, CallTarget@0x5638bfa02a10[Call#12], %373.2   !
BB46   <- [45, 93]
  int$-           %46.0 = Phi                      %45.7:BB45, %93.1:BB93
  int$-           %46.1 = %46.0
  int$-           %46.2 = Inc                      %46.1
  lgl$-           %46.3 = Lt                 d     %45.6, %46.2, elided
  lgl$#-          %46.4 = Identical                %46.3, true
  void                    Branch                   %46.4 -> BB100 (if true) | BB49 (if false)
BB323   <- [375]
  (cls|spec|blt)  %323.0 = LdFun              !v    stop, e331.1
  fs              %323.1 = FrameState         R     0x5638c6adad00+630: [%260.2, %260.3, %260.4, %323.0], env=e331.1
  void                    Deopt              !v    %323.1, DeadCall@0x5638bfa02a10[Call#13], %323.0   !
BB267   <- [375]
  val?^ | miss    %267.0 = LdVar              eR    .validDataPartClass, e331.1
  lgl$#-          %267.1 = Identical                %267.0, function(cl, where, prevDataPartClass=NULL) <(|...
  void                    Branch                   %267.1 -> BB379 (if true) | BB380 (if false)
BB100   <- [46]
  val?^ | miss    %100.0 = LdVar              eR    setdiff, e331.1
  lgl$#-          %100.1 = Identical                %100.0, function(x, y) <(rir::DispatchTable*)0x5638bcf|...
  void                    Branch                   %100.1 -> BB383 (if true) | BB384 (if false)
BB49   <- [46]
  val?            %49.0 = Extract2_1D        wed   %45.5, %46.2, elided
  void                    StVar              lW    cl, %49.0, e331.1
  val?^ | miss    %49.2 = LdVar              eR    getClassDef, e331.1
  lgl$#-          %49.3 = Identical                %49.2, function(Class, where=topenv(parent.frame()), |...
  void                    Branch                   %49.3 -> BB385 (if true) | BB386 (if false)
BB379   <- [267]
  prom-           %379.0 = MkArg                    unboundValue, reconcilePropertiesAndPrototype[0x5638c44fa010]_p60 (!refl), e331.1
  prom-           %379.1 = MkArg                    unboundValue, reconcilePropertiesAndPrototype[0x5638c44fa010]_p61, e331.1
  prom-           %379.2 = MkArg                    unboundValue, reconcilePropertiesAndPrototype[0x5638c44fa010]_p62, e331.1
  val?            %379.3 = Call               !v    function(cl, where, prevDataPartClass=NULL) <(|...(%379.0, %379.1, %379.2) e331.1   <str$->
  lgl$-           %379.4 = Is                       %379.3, NULL
  void                    StVar              lW    thisDataPart, %379.3, e331.1
  val             %379.6 = ChkMissing         e     %379.3
  lgl$-           %379.7 = Not                d     %379.4, elided
  lgl$#-          %379.8 = CheckTrueFalse     e     %379.7
  void                    Branch                   %379.8 -> BB307 (if true) | BB268 (if false)
BB380   <- [267]
  fs              %380.0 = FrameState         R     0x5638c6adad00+595: [%260.2, %260.3, %260.4], env=e331.1
  void                    Deopt              !v    %380.0, CallTarget@0x5638bfa02a10[Call#17], %267.0   !
BB383   <- [100]
  prom-           %383.0 = MkArg                    unboundValue, reconcilePropertiesAndPrototype[0x5638c44fa010]_p14, e331.1
  prom-           %383.1 = MkArg                    unboundValue, reconcilePropertiesAndPrototype[0x5638c44fa010]_p16, e331.1
  ct              %383.2 = PushContext        lCL   %383.0, %383.1, setdiff(names(prototype), names(allProps)), function(x, y) <(rir::DispatchTable*)0x5638bcf|..., e331.1
  val?^           %383.3 = CastType                 up %383.1
  val?^           %383.4 = CastType                 up %383.0
  env             e383.5 = MkEnv              l     x=%383.4, y=%383.3, parent=R_BaseNamespace, context 1
  val?            %383.6 = Force!<lazy>       !vL   %383.4, e383.5   <str->
  lgl$#-          %383.7 = IsType                   %383.6 isA val?-
  void                    Branch                   %383.7 -> BB387 (if true) | BB388 (if false)
BB384   <- [100]
  fs              %384.0 = FrameState         R     0x5638c6adad00+3767: [%45.5, %45.6, %46.1], env=e331.1
  void                    Deopt              !v    %384.0, CallTarget@0x5638bfa02a10[Call#127], %100.0   !
BB385   <- [49]
  prom-           %385.0 = MkArg                    unboundValue, reconcilePropertiesAndPrototype[0x5638c44fa010]_p6 (!refl), e331.1
  prom-           %385.1 = MkArg                    unboundValue, reconcilePropertiesAndPrototype[0x5638c44fa010]_p7, e331.1
  val?            %385.2 = StaticCall         !v    getClassDef[0x5638c5be3120](%385.0, %385.1) e331.1   <other>
  void                    StVar              lW    clDef, %385.2, e331.1
  val?^ | miss    %385.4 = LdVar              eR    is, e331.1
  lgl$#-          %385.5 = Identical                %385.4, function(object, class2) <(rir::DispatchTable*|...
  void                    Branch                   %385.5 -> BB391 (if true) | BB392 (if false)
BB386   <- [49]
  fs              %386.0 = FrameState         R     0x5638c6adad00+3796: [%45.5, %45.6, %46.2], env=e331.1
  void                    Deopt              !v    %386.0, CallTarget@0x5638bfa02a10[Call#89], %49.2   !
BB307   <- [379]
  void                    StVar              lW    dataPartClass, %379.3, e331.1
  (cls|spec|blt)  %307.1 = LdFun              !v    @, <0x5638b9a6cbd8>, e331.1
  prom-           %307.2 = MkArg                    unboundValue, reconcilePropertiesAndPrototype[0x5638c44fa010]_p72, e331.1
  prom-           %307.3 = MkArg                    unboundValue, reconcilePropertiesAndPrototype[0x5638c44fa010]_p73, e331.1
  val?            %307.4 = Call               !v    %307.1(%307.2, %307.3) e331.1   <real->
  lgl$-           %307.5 = Is                       %307.4, NULL
  lgl$-           %307.6 = Not                d     %307.5, elided
  lgl$#-          %307.7 = CheckTrueFalse     e     %307.6
  void                    Branch                   %307.7 -> BB311 (if true) | BB310 (if false)
BB268   <- [379]
  void                    Nop                !     
  int$-           %268.1 = %260.4
  goto BB269
BB387   <- [383]
  val?-           %387.0 = CastType           d     dn %383.6   <str->
  val             %387.1 = CallSafeBuiltin    wed   as.vector(%387.0, "any")    <str->
  void                    StVar              lW    x, %387.1, e383.5
  val?            %387.3 = Force!<lazy>       !vL   %383.3, e383.5   <str->
  lgl$#-          %387.4 = IsType                   %387.3 isA val?-
  void                    Branch                   %387.4 -> BB393 (if true) | BB394 (if false)
BB388   <- [383]
  prom-           %388.0 = MkArg                    unboundValue, reconcilePropertiesAndPrototype[0x5638c44fa010]_p119, e383.5
  val?^           %388.1 = CastType                 up %388.0
  fs              %388.2 = FrameState         R     0x5638c6adad00+4997: [], env=e331.1
  fs              %388.3 = FrameState         R     0x5638bd33efc0+32: [], env=e383.5, next=%388.2
  env             e388.4 = (MkEnv)            l     mode(miss)="any", x=%388.1, parent=R_BaseNamespace, context 0
  fs              %388.5 = FrameState         R     0x5638bc623a90+9: [], env=e388.4, next=%388.3
  fs              %388.6 = FrameState         R     0x5638ba142ac0+5(pr): [%383.6], env=e383.5, next=%388.5
  void                    Deopt              !v    %388.6, Typecheck@0x5638bd324808[Type#0], %383.6   !
BB391   <- [385]
  prom-           %391.0 = MkArg                    unboundValue, reconcilePropertiesAndPrototype[0x5638c44fa010]_p8 (!refl), e331.1
  val?            %391.1 = Call               !v    function(object, class2) <(rir::DispatchTable*|...(%391.0, "classRepresentation") e331.1   <lgl$->
  lgl$#-          %391.2 = IsType                   %391.1 isA lgl$-
  void                    Branch                   %391.2 -> BB401 (if true) | BB402 (if false)
BB392   <- [385]
  fs              %392.0 = FrameState         R     0x5638c6adad00+3847: [%45.5, %45.6, %46.2], env=e331.1
  void                    Deopt              !v    %392.0, CallTarget@0x5638bfa02a10[Call#90], %385.4   !
BB311   <- [307]
  val?^ | miss    %311.0 = LdVar              eR    class, e331.1
  lgl$#-          %311.1 = Identical                <blt class>, %311.0   <true>
  void                    Branch                   %311.1 -> BB395 (if true) | BB396 (if false)
BB310   <- [307]
  void                    Nop                !     
  int$-           %310.1 = %260.4
  goto BB269
BB269   <- [268, 310, 278, 318]
  int$-           %269.0 = Phi                      %268.1:BB268, %278.1:BB278, %310.1:BB310, %318.6:BB318
  int$-           %269.1 = %269.0
  int$-           %269.2 = Inc                      %269.1
  lgl$-           %269.3 = Lt                 d     %260.3, %269.2, elided
  lgl$#-          %269.4 = Identical                %269.3, true
  void                    Branch                   %269.4 -> BB281 (if true) | BB272 (if false)
BB393   <- [387]
  val?-           %393.0 = CastType           d     dn %387.3   <str->
  val             %393.1 = CallSafeBuiltin    wed   as.vector(%393.0, "any")    <str->
  void                    StVar              lW    y, %393.1, e383.5
  lgl$#-          %393.3 = IsType                   %387.1 isA val-
  void                    Branch                   %393.3 -> BB403 (if true) | BB404 (if false)
BB394   <- [387]
  prom-           %394.0 = MkArg                    unboundValue, reconcilePropertiesAndPrototype[0x5638c44fa010]_p121, e383.5
  val?^           %394.1 = CastType                 up %394.0
  fs              %394.2 = FrameState         R     0x5638c6adad00+4997: [], env=e331.1
  fs              %394.3 = FrameState         R     0x5638bd33efc0+78: [], env=e383.5, next=%394.2
  env             e394.4 = (MkEnv)            l     mode(miss)="any", x=%394.1, parent=R_BaseNamespace, context 0
  fs              %394.5 = FrameState         R     0x5638bc623a90+9: [], env=e394.4, next=%394.3
  fs              %394.6 = FrameState         R     0x5638ba82a8f0+5(pr): [%387.3], env=e383.5, next=%394.5
  void                    Deopt              !v    %394.6, Typecheck@0x5638bd324808[Type#0], %387.3   !
BB401   <- [391]
  lgl$-           %401.0 = CastType           d     dn %391.1
  lgl$#-          %401.1 = CheckTrueFalse     e     %401.0
  void                    Branch                   %401.1 -> BB57 (if true) | BB56 (if false)
BB402   <- [391]
  void                    Nop                !     
  val?            %402.1 = %391.1
  dr              %402.2 = Typecheck@0x5638bfa02a10[Type#209]
  goto BB54
BB395   <- [311]
  (cls|spec|blt)  %395.0 = LdFun              !v    @, <0x5638b9a6cbd8>, e331.1
  prom-           %395.1 = MkArg                    unboundValue, reconcilePropertiesAndPrototype[0x5638c44fa010]_p74, e331.1
  prom-           %395.2 = MkArg                    unboundValue, reconcilePropertiesAndPrototype[0x5638c44fa010]_p75, e331.1
  val?            %395.3 = Call               !v    %395.0(%395.1, %395.2) e331.1   <real->
  val?            %395.4 = CallBuiltin        !v    class(%395.3) e331.1   <str$->
  lgl$#-          %395.5 = IsType                   %395.4 isA val+   <true>
  lgl$#-          %395.6 = IsType                   %395.4 isA val?-
  void                    Branch                   %395.5 -> BB413 (if true) | BB414 (if false)
BB396   <- [311]
  fs              %396.0 = FrameState         R     0x5638c6adad00+818: [%260.2, %260.3, %260.4, %307.4], env=e331.1
  void                    Deopt              !v    %396.0, DeadBranchReached@0x5638bfa02a10[Test#2], %311.1   !
BB281   <- [269]
  val?^ | miss    %281.0 = LdVar              eR    length, e331.1
  lgl$#-          %281.1 = Identical                <blt length>, %281.0   <true>
  void                    Branch                   %281.1 -> BB389 (if true) | BB390 (if false)
BB272   <- [269]
  val?            %272.0 = Extract2_1D        wed   %260.2, %269.2, elided
  void                    StVar              lW    cl, %272.0, e331.1
  val?^ | miss    %272.2 = LdVar              eR    getClassDef, e331.1
  lgl$#-          %272.3 = Identical                %272.2, function(Class, where=topenv(parent.frame()), |...
  void                    Branch                   %272.3 -> BB397 (if true) | BB398 (if false)
BB403   <- [393]
  val-            %403.0 = CastType           d     dn %387.1   <str->
  real$-          %403.1 = CallSafeBuiltin    wed   length(%403.0)    <int$->
  lgl$-           %403.2 = AsLogical                %403.1
  lgl$#-          %403.3 = Identical                %403.2, true
  void                    Branch                   %403.3 -> BB259 (if true) | BB107 (if false)
BB404   <- [393]
  fs              %404.0 = FrameState         R     0x5638c6adad00+4997: [], env=e331.1
  fs              %404.1 = FrameState         R     0x5638bd33efc0+92: [], env=e383.5, next=%404.0
  void                    Deopt              !v    %404.1, Typecheck@0x5638bd31eef8[Type#1], %387.1   !
BB57   <- [401]
  val?^ | miss    %57.0 = LdVar              eR    getSlots, e331.1
  lgl$#-          %57.1 = Identical                %57.0, function(x) <(rir::DispatchTable*)0x5638c6129a|...
  void                    Branch                   %57.1 -> BB409 (if true) | BB410 (if false)
BB56   <- [401]
  (cls|spec|blt)  %56.0 = LdFun              !v    stop, e331.1
  fs              %56.1 = FrameState         R     0x5638c6adad00+3900: [%45.5, %45.6, %46.2, %56.0], env=e331.1
  void                    Deopt              !v    %56.1, DeadCall@0x5638bfa02a10[Call#91], %56.0   !
BB54   <- [402, 410]
  val?^ | miss    %54.0 = Phi                      %402.1:BB402, %410.1:BB410
  val?^ | miss    %54.1 = %54.0
  dr              %54.2 = Phi                      %402.2:BB402, %410.2:BB410
  dr              %54.3 = %54.2
  fs              %54.4 = FrameState         R     0x5638c6adad00+3884: [%45.5, %45.6, %46.2, %391.1], env=e331.1
  void                    Deopt              !v    %54.4, %54.3, %54.1   !
BB413   <- [395]
  void                    Branch                   %395.6 -> BB415 (if true) | BB416 (if false)
BB414   <- [395]
  void                    Nop                !     
  lgl$#-          %414.1 = %395.5
  dr              %414.2 = DeadBranchReached@0x5638bfa02a10[Test#3]
  goto BB312
BB389   <- [281]
  val?^ | miss    %389.0 = LdVar              eR    dataPartClass, e331.1
  lgl$#-          %389.1 = IsType                   %389.0 isA val?~- | miss
  void                    Branch                   %389.1 -> BB399 (if true) | BB400 (if false)
BB390   <- [281]
  void                    Nop                !     
  lgl$#-          %390.1 = %281.1
  dr              %390.2 = DeadBranchReached@0x5638bfa02a10[Test#8]
  goto BB270
BB397   <- [272]
  prom-           %397.0 = MkArg                    unboundValue, reconcilePropertiesAndPrototype[0x5638c44fa010]_p63 (!refl), e331.1
  prom-           %397.1 = MkArg                    unboundValue, reconcilePropertiesAndPrototype[0x5638c44fa010]_p64, e331.1
  val?            %397.2 = StaticCall         !v    getClassDef[0x5638c5be3120](%397.0, %397.1) { 0 1n } e331.1   <other>
  lgl$-           %397.3 = Is                       %397.2, NULL
  void                    StVar              lW    clDef, %397.2, e331.1
  val             %397.5 = ChkMissing         e     %397.2
  lgl$#-          %397.6 = CheckTrueFalse     e     %397.3
  void                    Branch                   %397.6 -> BB280 (if true) | BB277 (if false)
BB398   <- [272]
  fs              %398.0 = FrameState         R     0x5638c6adad00+1282: [%260.2, %260.3, %269.2], env=e331.1
  void                    Deopt              !v    %398.0, CallTarget@0x5638bfa02a10[Call#26], %272.2   !
BB259   <- [403]
  void                    Nop                !     
  lgl$-           %259.1 = %403.2
  goto BB108
BB107   <- [403]
  val?            %107.0 = CallBuiltin        !v    length(%393.1) e383.5   <int$->
  lgl$-           %107.1 = AsLogical          e     %107.0
  lgl$-           %107.2 = LOr                      %403.2, %107.1
  lgl$-           %107.3 = %107.2
  goto BB108
BB409   <- [57]
  prom-           %409.0 = MkArg                    unboundValue, reconcilePropertiesAndPrototype[0x5638c44fa010]_p9, e331.1
  ct              %409.1 = PushContext        lCL   %409.0, getSlots(clDef), function(x) <(rir::DispatchTable*)0x5638c6129a|..., e331.1
  val?^           %409.2 = CastType                 up %409.0
  env             e409.3 = MkEnv              l     x=%409.2, parent=<env 0x5638ba074378>, context 1
  val?^ | miss    %409.4 = LdVar              eR    isClassDef, e409.3
  lgl$#-          %409.5 = Identical                %409.4, function(object) <(rir::DispatchTable*)0x5638b|...
  void                    Branch                   %409.5 -> BB411 (if true) | BB412 (if false)
BB410   <- [57]
  void                    Nop                !     
  val?^ | miss    %410.1 = %57.0
  dr              %410.2 = CallTarget@0x5638bfa02a10[Call#95]
  goto BB54
BB415   <- [413]
  val?-           %415.0 = CastType           d     dn %395.4   <str$->
  val?            %415.1 = Extract1_1D        wed   %415.0, 1L, elided   <str$->
  void                    StVar              lW    protoClass, %415.1, e331.1
  val?^ | miss    %415.3 = LdVar              eR    %in%, e331.1
  lgl$#-          %415.4 = Identical                %415.3, function(x, table) <(rir::DispatchTable*)0x563|...
  void                    Branch                   %415.4 -> BB421 (if true) | BB422 (if false)
BB416   <- [413]
  void                    Nop                !     
  val?            %416.1 = %395.4
  dr              %416.2 = Typecheck@0x5638bfa02a10[Type#48]
  goto BB312
BB312   <- [414, 416]
  val?^ | miss    %312.0 = Phi                      %414.1:BB414, %416.1:BB416
  val?^ | miss    %312.1 = %312.0
  dr              %312.2 = Phi                      %414.2:BB414, %416.2:BB416
  dr              %312.3 = %312.2
  fs              %312.4 = FrameState         R     0x5638c6adad00+959: [%260.2, %260.3, %260.4, %395.4], env=e331.1
  void                    Deopt              !v    %312.4, %312.3, %312.1   !
BB399   <- [389]
  val?~- | miss   %399.0 = CastType           d     dn %389.0
  val?-           %399.1 = Force!<value>            %399.0,    <str$->
  (int|real)$-    %399.2 = CallSafeBuiltin    wed   length(%399.1)    <int$->
  lgl$#-          %399.3 = IsType                   %399.2 isA int$-
  void                    Branch                   %399.3 -> BB407 (if true) | BB408 (if false)
BB400   <- [389]
  void                    Nop                !     
  val?^ | miss    %400.1 = %389.0
  dr              %400.2 = Typecheck@0x5638bfa02a10[Type#105]
  goto BB270
BB270   <- [390, 400]
  val?^ | miss    %270.0 = Phi                      %390.1:BB390, %400.1:BB400
  val?^ | miss    %270.1 = %270.0
  dr              %270.2 = Phi                      %390.2:BB390, %400.2:BB400
  dr              %270.3 = %270.2
  fs              %270.4 = FrameState         R     0x5638c6adad00+1253: [%260.2, %260.3, %269.1], env=e331.1
  void                    Deopt              !v    %270.4, %270.3, %270.1   !
BB280   <- [397]
  (cls|spec|blt)  %280.0 = LdFun              !v    stop, e331.1
  fs              %280.1 = FrameState         R     0x5638c6adad00+1376: [%260.2, %260.3, %269.2, %280.0], env=e331.1
  void                    Deopt              !v    %280.1, DeadCall@0x5638bfa02a10[Call#27], %280.0   !
BB277   <- [397]
  val?^ | miss    %277.0 = LdVar              eR    .validDataPartClass, e331.1
  lgl$#-          %277.1 = Identical                %277.0, function(cl, where, prevDataPartClass=NULL) <(|...
  void                    Branch                   %277.1 -> BB405 (if true) | BB406 (if false)
BB108   <- [259, 107]
  lgl$-           %108.0 = Phi                      %107.3:BB107, %259.1:BB259
  lgl$-           %108.1 = %108.0
  lgl$#-          %108.2 = CheckTrueFalse     e     %108.1
  void                    Branch                   %108.2 -> BB255 (if true) | BB109 (if false)
BB411   <- [409]
  prom-           %411.0 = MkArg                    unboundValue, reconcilePropertiesAndPrototype[0x5638c44fa010]_p82, e409.3
  ct              %411.1 = PushContext        lCL   %411.0, isClassDef(x), function(object) <(rir::DispatchTable*)0x5638b|..., e409.3
  val?^           %411.2 = CastType                 up %411.0
  val?^ | miss    %411.3 = LdVar              eR    is, <env 0x5638ba074378>
  lgl$#-          %411.4 = Identical                %411.3, function(object, class2) <(rir::DispatchTable*|...
  void                    Branch                   %411.4 -> BB419 (if true) | BB420 (if false)
BB412   <- [409]
  fs              %412.0 = FrameState         R     0x5638c6adad00+3978: [%45.5, %45.6, %46.2], env=e331.1
  env             e412.1 = (MkEnv)            l     x=%409.2, parent=<env 0x5638ba074378>, context 1
  fs              %412.2 = FrameState         R     0x5638c63240a0+0: [], env=e412.1, next=%412.0
  void                    Deopt              !v    %412.2, CallTarget@0x5638c63fa588[Call#0], %409.4   !
BB421   <- [415]
  prom-           %421.0 = MkArg                    unboundValue, reconcilePropertiesAndPrototype[0x5638c44fa010]_p77, e331.1
  val             %421.1 = ChkMissing         e     %415.1
  prom-           %421.2 = MkArg                    %415.1, reconcilePropertiesAndPrototype[0x5638c44fa010]_p76 (!refl), 
  val?            %421.3 = StaticCall         !v    %in%[0x5638bcd02a00](%421.2, %421.0) e331.1   <lgl$->
  lgl$#-          %421.4 = IsType                   %421.3 isA lgl$-
  void                    Branch                   %421.4 -> BB423 (if true) | BB424 (if false)
BB422   <- [415]
  fs              %422.0 = FrameState         R     0x5638c6adad00+1017: [%260.2, %260.3, %260.4], env=e331.1
  void                    Deopt              !v    %422.0, CallTarget@0x5638bfa02a10[Call#22], %415.3   !
BB407   <- [399]
  int$-           %407.0 = CastType           d     dn %399.2
  lgl$#-          %407.1 = CheckTrueFalse     e     %407.0
  void                    Branch                   %407.1 -> BB288 (if true) | BB284 (if false)
BB408   <- [399]
  void                    Nop                !     
  (int|real)$-    %408.1 = %399.2
  dr              %408.2 = Typecheck@0x5638bfa02a10[Type#106]
  goto BB282
BB405   <- [277]
  prom-           %405.0 = MkArg                    unboundValue, reconcilePropertiesAndPrototype[0x5638c44fa010]_p65 (!refl), e331.1
  prom-           %405.1 = MkArg                    unboundValue, reconcilePropertiesAndPrototype[0x5638c44fa010]_p66, e331.1
  prom-           %405.2 = MkArg                    unboundValue, reconcilePropertiesAndPrototype[0x5638c44fa010]_p67, e331.1
  val?            %405.3 = Call               !v    function(cl, where, prevDataPartClass=NULL) <(|...(%405.0, %405.1, %405.2) e331.1   <nil->
  lgl$-           %405.4 = Is                       %405.3, NULL
  void                    StVar              lW    thisDataPart, %405.3, e331.1
  val             %405.6 = ChkMissing         e     %405.3
  lgl$-           %405.7 = Not                d     %405.4, elided
  lgl$#-          %405.8 = CheckTrueFalse     e     %405.7
  void                    Branch                   %405.8 -> BB279 (if true) | BB278 (if false)
BB406   <- [277]
  fs              %406.0 = FrameState         R     0x5638c6adad00+1341: [%260.2, %260.3, %269.2], env=e331.1
  void                    Deopt              !v    %406.0, CallTarget@0x5638bfa02a10[Call#31], %277.0   !
BB255   <- [108]
  val?^ | miss    %255.0 = LdVar              eR    x, e383.5
  val?            %255.1 = Force!<value>      !v    %255.0, e383.5   <str->
  lgl$#-          %255.2 = IsType                   %255.1 isA val+   <true>
  void                    Branch                   %255.2 -> BB258 (if true) | BB256 (if false)
BB109   <- [108]
  val?^ | miss    %109.0 = LdVar              eR    x, e383.5
  val?            %109.1 = Force!             !v    %109.0, e383.5   <val?_>
  val?            %109.2 = %109.1
  goto BB110
BB419   <- [411]
  env             e419.0 = MkEnv              l     object=%411.2, parent=<env 0x5638ba074378>, context 1
  prom-           %419.1 = MkArg                    unboundValue, reconcilePropertiesAndPrototype[0x5638c44fa010]_p112, e419.0
  val?            %419.2 = Call               !v    function(object, class2) <(rir::DispatchTable*|...(%419.1, "classRepresentation") e419.0   <lgl$->
  lgl$#-          %419.3 = IsType                   %419.2 isA lgl$-
  void                    Branch                   %419.3 -> BB433 (if true) | BB434 (if false)
BB420   <- [411]
  fs              %420.0 = FrameState         R     0x5638c6adad00+3978: [%45.5, %45.6, %46.2], env=e331.1
  fs              %420.1 = FrameState         R     0x5638c63240a0+32: [], env=e409.3, next=%420.0
  env             e420.2 = (MkEnv)            l     object=%411.2, parent=<env 0x5638ba074378>, context 1
  fs              %420.3 = FrameState         R     0x5638c02fc740+0: [], env=e420.2, next=%420.1
  void                    Deopt              !v    %420.3, CallTarget@0x5638c63fa428[Call#0], %411.3   !
BB423   <- [421]
  lgl$-           %423.0 = CastType           d     dn %421.3
  lgl$#-          %423.1 = CheckTrueFalse     e     %423.0
  void                    Branch                   %423.1 -> BB319 (if true) | BB318 (if false)
BB424   <- [421]
  fs              %424.0 = FrameState         R     0x5638c6adad00+1054: [%260.2, %260.3, %260.4, %421.3], env=e331.1
  void                    Deopt              !v    %424.0, Typecheck@0x5638bfa02a10[Type#52], %421.3   !
BB288   <- [407]
  val?^ | miss    %288.0 = LdVar              eR    is.na, e331.1
  lgl$#-          %288.1 = Identical                <blt is.na>, %288.0   <true>
  void                    Branch                   %288.1 -> BB417 (if true) | BB418 (if false)
BB284   <- [407]
  void                    Nop                !     
  goto BB285
BB282   <- [408, 418, 426, 428]
  val?^ | miss    %282.0 = Phi                      %408.1:BB408, %418.1:BB418, %426.1:BB426, %428.1:BB428
  val?^ | miss    %282.1 = %282.0
  dr              %282.2 = Phi                      %408.2:BB408, %418.2:BB418, %426.2:BB426, %428.2:BB428
  dr              %282.3 = %282.2
  fs              %282.4 = FrameState         R     0x5638c6adad00+2100: [%399.2], env=e331.1
  void                    Deopt              !v    %282.4, %282.3, %282.1   !
BB279   <- [405]
  void                    StVar              lW    dataPartClass, %405.3, e331.1
  (cls|spec|blt)  %279.1 = LdFun              !v    @, e331.1
  fs              %279.2 = FrameState         R     0x5638c6adad00+1532: [%260.2, %260.3, %269.2, %279.1], env=e331.1
  void                    Deopt              !v    %279.2, DeadCall@0x5638bfa02a10[Call#32], %279.1   !
BB278   <- [405]
  void                    Nop                !     
  int$-           %278.1 = %269.2
  goto BB269
BB258   <- [255]
  (cls|spec|blt)  %258.0 = LdFun              !v    match, <0x5638bb898f38>, e383.5
  prom-           %258.1 = MkArg                    unboundValue, reconcilePropertiesAndPrototype[0x5638c44fa010]_p124, e383.5
  prom-           %258.2 = MkArg                    unboundValue, reconcilePropertiesAndPrototype[0x5638c44fa010]_p125, e383.5
  val?            %258.3 = Call               !v    %258.0(%258.1, %258.2, 0L) e383.5   <int->
  val?            %258.4 = Eq                 !v    %258.3, 0L, e383.5   <lgl->
  val?            %258.5 = %258.4
  goto BB257
BB256   <- [255]
  prom-           %256.0 = MkArg                    unboundValue, reconcilePropertiesAndPrototype[0x5638c44fa010]_p126, e383.5
  prom-           %256.1 = %256.0
  goto BB257
BB110   <- [109, 257]
  val?            %110.0 = Phi                      %109.2:BB109, %257.3:BB257
  val?            %110.1 = %110.0
  val?            %110.2 = StaticCall         !v    unique[0x5638bf97f150](%110.1) { 0 } e383.5   <str->
  val?            %110.3 = PopContext         C     %110.2, %383.2   <nil->
  void                    StVar              lW    undefinedPrototypeSlots, %110.3, e331.1
  lgl$#-          %110.5 = IsType                   %110.3 isA val?-
  val?^ | miss    %110.6 = LdVar              eR    length, e331.1
  lgl$#-          %110.7 = Identical                <blt length>, %110.6   <true>
  void                    Branch                   %110.7 -> BB429 (if true) | BB430 (if false)
BB433   <- [419]
  lgl$-           %433.0 = CastType           d     dn %419.2
  val?            %433.1 = PopContext         C     %433.0, %411.1   <lgl$->
  lgl$#-          %433.2 = IsType                   %433.1 isA lgl$-
  void                    Branch                   %433.2 -> BB437 (if true) | BB438 (if false)
BB434   <- [419]
  fs              %434.0 = FrameState         R     0x5638c6adad00+3978: [%45.5, %45.6, %46.2], env=e331.1
  fs              %434.1 = FrameState         R     0x5638c63240a0+32: [], env=e409.3, next=%434.0
  fs              %434.2 = FrameState         R     0x5638c02fc740+37: [%419.2], env=e419.0, next=%434.1
  void                    Deopt              !v    %434.2, Typecheck@0x5638c63fa428[Type#1], %419.2   !
BB319   <- [423]
  val?^ | miss    %319.0 = LdVar              eR    .indirectAbnormalClasses, e331.1
  val?            %319.1 = Force!             !v    %319.0, e331.1   <val?_>
  lgl$#-          %319.2 = IsType                   %319.1 isA val+   <@?>
  void                    Branch                   %319.2 -> BB322 (if true) | BB320 (if false)
BB318   <- [423]
  (cls|spec|blt)  %318.0 = LdFun              !v    @, <0x5638b9a6cbd8>, e331.1
  prom-           %318.1 = MkArg                    unboundValue, reconcilePropertiesAndPrototype[0x5638c44fa010]_p78, e331.1
  prom-           %318.2 = MkArg                    unboundValue, reconcilePropertiesAndPrototype[0x5638c44fa010]_p79, e331.1
  val?            %318.3 = Call               !v    %318.0(%318.1, %318.2) e331.1   <real->
  void                    StVar              lW    newObject, %318.3, e331.1
  void                    StVar              lW    dataPartValue, true, e331.1
  int$-           %318.6 = %260.4
  goto BB269
BB417   <- [288]
  val?^ | miss    %417.0 = LdVar              eR    match, e331.1
  lgl$#-          %417.1 = Identical                %417.0, function(x, table, nomatch=NA, incomparables=N|...
  void                    Branch                   %417.1 -> BB425 (if true) | BB426 (if false)
BB418   <- [288]
  void                    Nop                !     
  lgl$#-          %418.1 = %288.1
  dr              %418.2 = DeadBranchReached@0x5638bfa02a10[Test#9]
  goto BB282
BB285   <- [284, 549]
  val?^ | miss    %285.0 = LdVar              eR    prototype, e331.1
  val?            %285.1 = Force!<value>      !v    %285.0, e331.1   <real->
  lgl$-           %285.2 = Is                       %285.1, NULL
  lgl$#-          %285.3 = CheckTrueFalse     e     %285.2
  void                    Branch                   %285.3 -> BB287 (if true) | BB286 (if false)
BB257   <- [258, 256]
  val?            %257.0 = Phi                      %258.5:BB258, %256.1:BB256
  val?            %257.1 = %257.0
  val?            %257.2 = Extract1_1D        !v    %255.1, %257.1, e383.5   <str->
  val?            %257.3 = %257.2
  goto BB110
BB429   <- [110]
  val             %429.0 = ChkMissing         e     %110.3
  void                    Branch                   %110.5 -> BB435 (if true) | BB436 (if false)
BB430   <- [110]
  void                    Nop                !     
  lgl$#-          %430.1 = %110.7
  dr              %430.2 = DeadBranchReached@0x5638bfa02a10[Test#24]
  goto BB111
BB437   <- [433]
  lgl$-           %437.0 = CastType           d     dn %433.1
  lgl$#-          %437.1 = CheckTrueFalse     e     %437.0
  void                    Branch                   %437.1 -> BB67 (if true) | BB66 (if false)
BB438   <- [433]
  fs              %438.0 = FrameState         R     0x5638c6adad00+3978: [%45.5, %45.6, %46.2], env=e331.1
  fs              %438.1 = FrameState         R     0x5638c63240a0+32: [%433.1], env=e409.3, next=%438.0
  void                    Deopt              !v    %438.1, Typecheck@0x5638c63fa588[Type#1], %433.1   !
BB322   <- [319]
  val?^ | miss    %322.0 = LdVar              eR    protoClass, e331.1
  val?            %322.1 = Force!             !v    %322.0, e331.1   <val?_>
  val?            %322.2 = %322.1
  goto BB321
BB320   <- [319]
  prom-           %320.0 = MkArg                    unboundValue, reconcilePropertiesAndPrototype[0x5638c44fa010]_p80, e331.1
  prom-           %320.1 = %320.0
  goto BB321
BB425   <- [417]
  val?^ | miss    %425.0 = LdVar              eR    slots, e331.1
  lgl$#-          %425.1 = IsType                   %425.0 isA val?~- | miss
  void                    Branch                   %425.1 -> BB427 (if true) | BB428 (if false)
BB426   <- [417]
  void                    Nop                !     
  val?^ | miss    %426.1 = %417.0
  dr              %426.2 = CallTarget@0x5638bfa02a10[Call#43]
  goto BB282
BB287   <- [285]
  val?^ | miss    %287.0 = LdVar              eR    StandardPrototype, e331.1
  val?            %287.1 = Force!             !v    %287.0, e331.1   <val?_>
  void                    StVar              lW    prototype, %287.1, e331.1
  goto BB45
BB286   <- [285]
  void                    Nop                !     
  goto BB45
BB435   <- [429]
  val?-           %435.0 = CastType           d     dn %110.3   <nil->
  (int|real)$-    %435.1 = CallSafeBuiltin    wed   length(%435.0)    <int$->
  lgl$#-          %435.2 = IsType                   %435.1 isA int$-
  void                    Branch                   %435.2 -> BB439 (if true) | BB440 (if false)
BB436   <- [429]
  void                    Nop                !     
  val?            %436.1 = %110.3
  dr              %436.2 = Typecheck@0x5638bfa02a10[Type#300]
  goto BB111
BB111   <- [430, 436]
  val?^ | miss    %111.0 = Phi                      %430.1:BB430, %436.1:BB436
  val?^ | miss    %111.1 = %111.0
  dr              %111.2 = Phi                      %430.2:BB430, %436.2:BB436
  dr              %111.3 = %111.2
  fs              %111.4 = FrameState         R     0x5638c6adad00+5011: [], env=e331.1
  void                    Deopt              !v    %111.4, %111.3, %111.1   !
BB67   <- [437]
  val?^ | miss    %67.0 = LdVar              eR    x, e409.3
  val?            %67.1 = Force!<wrapped>    !v    %67.0, e409.3   <other>
  void                    StVar              lW    classDef, %67.1, e409.3
  (cls|spec|blt)  %67.3 = LdFun              !v    @, <0x5638b9a6cbd8>, e409.3
  prom-           %67.4 = MkArg                    unboundValue, reconcilePropertiesAndPrototype[0x5638c44fa010]_p83, e409.3
  prom-           %67.5 = MkArg                    unboundValue, reconcilePropertiesAndPrototype[0x5638c44fa010]_p84, e409.3
  val?            %67.6 = Call               !v    %67.3(%67.4, %67.5) e409.3   <vec+>
  void                    StVar              lW    props, %67.6, e409.3
  lgl$#-          %67.8 = IsType                   %67.6 isA val?+
  val?^ | miss    %67.9 = LdVar              eR    as.character, e409.3
  lgl$#-          %67.10 = Identical                <blt as.character>, %67.9   <true>
  void                    Branch                   %67.10 -> BB445 (if true) | BB446 (if false)
BB66   <- [437]
  (cls|spec|blt)  %66.0 = LdFun              !v    getClass, e409.3
  fs              %66.1 = FrameState         R     0x5638c6adad00+3978: [%45.5, %45.6, %46.2], env=e331.1
  fs              %66.2 = FrameState         R     0x5638c63240a0+48: [%66.0], env=e409.3, next=%66.1
  void                    Deopt              !v    %66.2, DeadCall@0x5638c63fa588[Call#1], %66.0   !
BB321   <- [320, 322]
  val?            %321.0 = Phi                      %322.2:BB322, %320.1:BB320
  val?            %321.1 = %321.0
  val?            %321.2 = Extract1_1D        !v    %319.1, %321.1, e331.1   <val?_>
  void                    StVar              lW    indirect, %321.2, e331.1
  (cls|spec|blt)  %321.4 = LdFun              !v    @, e331.1
  fs              %321.5 = FrameState         R     0x5638c6adad00+1192: [%260.2, %260.3, %260.4, %321.4], env=e331.1
  void                    Deopt              !v    %321.5, DeadCall@0x5638bfa02a10[Call#24], %321.4   !
BB427   <- [425]
  val?~- | miss   %427.0 = CastType           d     dn %425.0
  val?-           %427.1 = Force!<value>            %427.0,    <str->
  val+            %427.2 = CallSafeBuiltin    wed   match(".Data", %427.1, NA, nil)    <int$->
  lgl$#-          %427.3 = IsType                   %427.2 isA int$-
  void                    Branch                   %427.3 -> BB431 (if true) | BB432 (if false)
BB428   <- [425]
  void                    Nop                !     
  val?^ | miss    %428.1 = %425.0
  dr              %428.2 = Typecheck@0x5638bfa02a10[Type#109]
  goto BB282
BB439   <- [435]
  int$-           %439.0 = CastType           d     dn %435.1
  lgl$-           %439.1 = Gt                 d     %439.0, 0L, elided   <lgl$->
  lgl$#-          %439.2 = CheckTrueFalse     e     %439.1
  void                    Branch                   %439.2 -> BB254 (if true) | BB115 (if false)
BB440   <- [435]
  void                    Nop                !     
  (int|real)$-    %440.1 = %435.1
  dr              %440.2 = Typecheck@0x5638bfa02a10[Type#303]
  goto BB113
BB445   <- [67]
  val             %445.0 = ChkMissing         e     %67.6
  void                    Branch                   %67.8 -> BB447 (if true) | BB448 (if false)
BB446   <- [67]
  void                    Nop                !     
  lgl$#-          %446.1 = %67.10
  dr              %446.2 = DeadBranchReached@0x5638c63fa588[Test#0]
  goto BB68
BB431   <- [427]
  int$-           %431.0 = CastType           d     dn %427.2
  lgl$-           %431.1 = CallSafeBuiltin    wed   is.na(%431.0)    <lgl$->
  lgl$#-          %431.2 = CheckTrueFalse     e     %431.1
  void                    Branch                   %431.2 -> BB294 (if true) | BB293 (if false)
BB432   <- [427]
  fs              %432.0 = FrameState         R     0x5638c6adad00+2213: [<blt is.na>], env=e331.1
  prom-           %432.1 = MkArg                    %427.1, reconcilePropertiesAndPrototype[0x5638c44fa010]_p68 (!refl), e331.1
  val?~           %432.2 = CastType                 up %432.1
  env             e432.3 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%432.2, x=".Data", parent=R_BaseNamespace, context 0
  fs              %432.4 = FrameState         R     0x5638ba281d40+69: [%427.2], env=e432.3, next=%432.0
  void                    Deopt              !v    %432.4, Typecheck@0x5638bfa02a10[Type#110], %427.2   !
BB254   <- [439]
  (cls|spec|blt)  %254.0 = LdFun              !v    stop, e331.1
  fs              %254.1 = FrameState         R     0x5638c6adad00+5135: [%254.0], env=e331.1
  void                    Deopt              !v    %254.1, DeadCall@0x5638bfa02a10[Call#131], %254.0   !
BB115   <- [439]
  val?^ | miss    %115.0 = LdVar              eR    dataPartClass, e331.1
  lgl$#-          %115.1 = IsType                   %115.0 isA val?~- | miss
  void                    Branch                   %115.1 -> BB441 (if true) | BB442 (if false)
BB113   <- [440, 442, 450, 452]
  val?^ | miss    %113.0 = Phi                      %440.1:BB440, %442.1:BB442, %450.1:BB450, %452.1:BB452
  val?^ | miss    %113.1 = %113.0
  dr              %113.2 = Phi                      %440.2:BB440, %442.2:BB442, %450.2:BB450, %452.2:BB452
  dr              %113.3 = %113.2
  fs              %113.4 = FrameState         R     0x5638c6adad00+5102: [%435.1], env=e331.1
  void                    Deopt              !v    %113.4, %113.3, %113.1   !
BB447   <- [445]
  val?+           %447.0 = CastType           d     dn %67.6   <vec+>
  val+            %447.1 = CallSafeBuiltin    wed   as.character(%447.0)    <str->
  void                    StVar              lW    value, %447.1, e409.3
  val?^ | miss    %447.3 = LdVar              eR    names, e409.3
  lgl$#-          %447.4 = Identical                <blt names>, %447.3   <true>
  void                    Branch                   %447.4 -> BB457 (if true) | BB458 (if false)
BB448   <- [445]
  void                    Nop                !     
  val?            %448.1 = %67.6
  dr              %448.2 = Typecheck@0x5638c63fa588[Type#7]
  goto BB68
BB68   <- [446, 448]
  val?^ | miss    %68.0 = Phi                      %446.1:BB446, %448.1:BB448
  val?^ | miss    %68.1 = %68.0
  dr              %68.2 = Phi                      %446.2:BB446, %448.2:BB448
  dr              %68.3 = %68.2
  fs              %68.4 = FrameState         R     0x5638c6adad00+3978: [%45.5, %45.6, %46.2], env=e331.1
  fs              %68.5 = FrameState         R     0x5638c63240a0+159: [], env=e409.3, next=%68.4
  void                    Deopt              !v    %68.5, %68.3, %68.1   !
BB294   <- [431]
  val?^ | miss    %294.0 = LdVar              eR    c, e331.1
  lgl$#-          %294.1 = Identical                <blt c>, %294.0   <true>
  void                    Branch                   %294.1 -> BB443 (if true) | BB444 (if false)
BB293   <- [431]
  (cls|spec|blt)  %293.0 = LdFun              !v    extends, e331.1
  fs              %293.1 = FrameState         R     0x5638c6adad00+2251: [%293.0], env=e331.1
  void                    Deopt              !v    %293.1, DeadCall@0x5638bfa02a10[Call#44], %293.0   !
BB441   <- [115]
  val?~- | miss   %441.0 = CastType           d     dn %115.0
  val?-           %441.1 = Force!<value>            %441.0,    <(nil|str)->
  lgl$-           %441.2 = Is                       %441.1, NULL
  lgl$#-          %441.3 = CheckTrueFalse     e     %441.2
  void                    Branch                   %441.3 -> BB243 (if true) | BB116 (if false)
BB442   <- [115]
  void                    Nop                !     
  val?^ | miss    %442.1 = %115.0
  dr              %442.2 = Typecheck@0x5638bfa02a10[Type#310]
  goto BB113
BB457   <- [447]
  val+            %457.0 = CallSafeBuiltin    wed   names(%447.0)    <(nil|str)->
  (cls|spec|blt)  %457.1 = LdFun              !v    names<-, <0x5638b9a6d438>, e409.3
  val?^ | miss    %457.2 = LdVar              eR    value, e409.3
  lgl$#-          %457.3 = IsType                   %457.2 isA val?~- | miss
  void                    Branch                   %457.3 -> BB459 (if true) | BB460 (if false)
BB458   <- [447]
  fs              %458.0 = FrameState         R     0x5638c6adad00+3978: [%45.5, %45.6, %46.2], env=e331.1
  fs              %458.1 = FrameState         R     0x5638c63240a0+264: [], env=e409.3, next=%458.0
  void                    Deopt              !v    %458.1, DeadBranchReached@0x5638c63fa588[Test#1], %447.4   !
BB443   <- [294]
  val?^ | miss    %443.0 = LdVar              eR    list, e331.1
  lgl$#-          %443.1 = Identical                <blt list>, %443.0   <true>
  void                    Branch                   %443.1 -> BB455 (if true) | BB456 (if false)
BB444   <- [294]
  void                    Nop                !     
  lgl$#-          %444.1 = %294.1
  dr              %444.2 = DeadBranchReached@0x5638bfa02a10[Test#10]
  goto BB291
BB243   <- [441]
  val?^ | miss    %243.0 = LdVar              eR    extends, e331.1
  lgl$#-          %243.1 = Identical                %243.0, function(class1, class2, maybe=TRUE, fullInfo=|...
  void                    Branch                   %243.1 -> BB451 (if true) | BB452 (if false)
BB116   <- [441]
  val?^ | miss    %116.0 = LdVar              eR    getClass, e331.1
  lgl$#-          %116.1 = Identical                %116.0, function(Class, .Force=FALSE, where=.classEnv(|...
  void                    Branch                   %116.1 -> BB449 (if true) | BB450 (if false)
BB459   <- [457]
  val?~- | miss   %459.0 = CastType           d     dn %457.2
  val?-           %459.1 = Force!<value>            %459.0,    <str->
  val?            %459.2 = NamedCall          !v    %457.1(%459.1, value=%457.0) e409.3   <str+>
  void                    StVar              lW    value, %459.2, e409.3
  val             %459.4 = ChkMissing         e     %459.2
  val?            %459.5 = PopContext         C     %459.2, %409.1   <str->
  void                    StVar              lW    theseProperties, %459.5, e331.1
  lgl$#-          %459.7 = IsType                   %459.5 isA val?-
  val?^ | miss    %459.8 = LdVar              eR    names, e331.1
  lgl$#-          %459.9 = Identical                <blt names>, %459.8   <true>
  void                    Branch                   %459.9 -> BB461 (if true) | BB462 (if false)
BB460   <- [457]
  fs              %460.0 = FrameState         R     0x5638c6adad00+3978: [%45.5, %45.6, %46.2], env=e331.1
  fs              %460.1 = FrameState         R     0x5638c63240a0+360: [%457.0], env=e409.3, next=%460.0
  void                    Deopt              !v    %460.1, Typecheck@0x5638c63fa588[Type#14], %457.2   !
BB455   <- [443]
  val?            %455.0 = NamedCall          !v    <blt list>(.Data=%399.1) e331.1   <vec$+>
  val?^ | miss    %455.1 = LdVar              eR    properties, e331.1
  val?            %455.2 = Force!<wrapped>    !v    %455.1, e331.1   <vec->
  lgl$#-          %455.3 = IsType                   %455.2 isA val?-
  lgl$#-          %455.4 = IsType                   %455.0 isA val?+
  void                    Branch                   %455.4 -> BB471 (if true) | BB472 (if false)
BB456   <- [443]
  void                    Nop                !     
  lgl$#-          %456.1 = %443.1
  dr              %456.2 = DeadBranchReached@0x5638bfa02a10[Test#11]
  goto BB291
BB291   <- [444, 456]
  val?^ | miss    %291.0 = Phi                      %444.1:BB444, %456.1:BB456
  val?^ | miss    %291.1 = %291.0
  dr              %291.2 = Phi                      %444.2:BB444, %456.2:BB456
  dr              %291.3 = %291.2
  fs              %291.4 = FrameState         R     0x5638c6adad00+2235: [%431.1], env=e331.1
  void                    Deopt              !v    %291.4, %291.3, %291.1   !
BB451   <- [243]
  prom-           %451.0 = MkArg                    unboundValue, reconcilePropertiesAndPrototype[0x5638c44fa010]_p57, e331.1
  val?            %451.1 = Call               !v    function(class1, class2, maybe=TRUE, fullInfo=|...(%451.0, "classPrototypeDef") e331.1   <lgl$->
  lgl$#-          %451.2 = IsType                   %451.1 isA lgl$-
  void                    Branch                   %451.2 -> BB453 (if true) | BB454 (if false)
BB452   <- [243]
  void                    Nop                !     
  val?^ | miss    %452.1 = %243.0
  dr              %452.2 = CallTarget@0x5638bfa02a10[Call#155]
  goto BB113
BB449   <- [116]
  prom-           %449.0 = MkArg                    unboundValue, reconcilePropertiesAndPrototype[0x5638c44fa010]_p18, e331.1
  val?            %449.1 = StaticCall         !v    getClass[0x5638c659e050](%449.0) e331.1   <other>
  void                    StVar              lW    dataPartDef, %449.1, e331.1
  val?^ | miss    %449.3 = LdVar              eR    isXS3Class, e331.1
  lgl$#-          %449.4 = Identical                %449.3, function(classDef) <(rir::DispatchTable*)0x563|...
  void                    Branch                   %449.4 -> BB467 (if true) | BB468 (if false)
BB450   <- [116]
  void                    Nop                !     
  val?^ | miss    %450.1 = %116.0
  dr              %450.2 = CallTarget@0x5638bfa02a10[Call#135]
  goto BB113
BB461   <- [459]
  val             %461.0 = ChkMissing         e     %459.5
  void                    Branch                   %459.7 -> BB463 (if true) | BB464 (if false)
BB462   <- [459]
  void                    Nop                !     
  lgl$#-          %462.1 = %459.9
  dr              %462.2 = DeadBranchReached@0x5638bfa02a10[Test#16]
  goto BB74
BB471   <- [455]
  val?+           %471.0 = CastType           d     dn %455.0   <vec$+>
  void                    Branch                   %455.3 -> BB487 (if true) | BB488 (if false)
BB472   <- [455]
  void                    Nop                !     
  val?            %472.1 = %455.0
  dr              %472.2 = Typecheck@0x5638bfa02a10[Type#127]
  goto BB295
BB453   <- [451]
  lgl$-           %453.0 = CastType           d     dn %451.1
  lgl$#-          %453.1 = CheckTrueFalse     e     %453.0
  void                    Branch                   %453.1 -> BB253 (if true) | BB246 (if false)
BB454   <- [451]
  fs              %454.0 = FrameState         R     0x5638c6adad00+6189: [%451.1], env=e331.1
  void                    Deopt              !v    %454.0, Typecheck@0x5638bfa02a10[Type#353], %451.1   !
BB467   <- [449]
  prom-           %467.0 = MkArg                    unboundValue, reconcilePropertiesAndPrototype[0x5638c44fa010]_p19 (!refl), e331.1
  ct              %467.1 = PushContext        lCL   %467.0, isXS3Class(dataPartDef), function(classDef) <(rir::DispatchTable*)0x563|..., e331.1
  val?^           %467.2 = CastType                 up %467.0
  val?^ | miss    %467.3 = LdVar              eR    %in%, <env 0x5638ba074378>
  lgl$#-          %467.4 = Identical                %467.3, function(x, table) <(rir::DispatchTable*)0x563|...
  void                    Branch                   %467.4 -> BB479 (if true) | BB480 (if false)
BB468   <- [449]
  fs              %468.0 = FrameState         R     0x5638c6adad00+5234: [], env=e331.1
  void                    Deopt              !v    %468.0, CallTarget@0x5638bfa02a10[Call#136], %449.3   !
BB463   <- [461]
  val?-           %463.0 = CastType           d     dn %459.5   <str->
  val+            %463.1 = CallSafeBuiltin    wed   names(%463.0)    <nil->
  void                    StVar              lW    theseSlots, %463.1, e331.1
  lgl             %463.3 = Neq                wed   %463.1, ".Data", elided   <lgl->
  lgl$#-          %463.4 = IsType                   %463.3 isA lgl-
  lgl$#-          %463.5 = Identical                %459.8, <blt names>
  void                    Branch                   %463.4 -> BB465 (if true) | BB466 (if false)
BB464   <- [461]
  void                    Nop                !     
  val?            %464.1 = %459.5
  dr              %464.2 = Typecheck@0x5638bfa02a10[Type#216]
  goto BB74
BB74   <- [462, 464]
  val?^ | miss    %74.0 = Phi                      %462.1:BB462, %464.1:BB464
  val?^ | miss    %74.1 = %74.0
  dr              %74.2 = Phi                      %462.2:BB462, %464.2:BB464
  dr              %74.3 = %74.2
  fs              %74.4 = FrameState         R     0x5638c6adad00+3992: [%45.5, %45.6, %46.2], env=e331.1
  void                    Deopt              !v    %74.4, %74.3, %74.1   !
BB487   <- [471]
  val?-           %487.0 = CastType           d     dn %455.2   <vec->
  val+            %487.1 = CallSafeBuiltin    wed   c(%471.0, %487.0)    <vec$+>
  void                    StVar              lW    properties, %487.1, e331.1
  val?^ | miss    %487.3 = LdVar              eR    names, e331.1
  lgl$#-          %487.4 = Identical                <blt names>, %487.3   <true>
  void                    Branch                   %487.4 -> BB509 (if true) | BB510 (if false)
BB488   <- [471]
  void                    Nop                !     
  val?            %488.1 = %455.2
  dr              %488.2 = Typecheck@0x5638bfa02a10[Type#128]
  goto BB295
BB295   <- [472, 488]
  val?^ | miss    %295.0 = Phi                      %472.1:BB472, %488.1:BB488
  val?^ | miss    %295.1 = %295.0
  dr              %295.2 = Phi                      %472.2:BB472, %488.2:BB488
  dr              %295.3 = %295.2
  fs              %295.4 = FrameState         R     0x5638c6adad00+2529: [<blt c>, %455.0, %455.2], env=e331.1
  void                    Deopt              !v    %295.4, %295.3, %295.1   !
BB253   <- [453]
  void                    Nop                !     
  goto BB140
BB246   <- [453]
  val?^ | miss    %246.0 = LdVar              eR    prototype, e331.1
  val?            %246.1 = Force!<wrapped>    !v    %246.0, e331.1   <nil->
  lgl$-           %246.2 = Is                       %246.1, list
  lgl$#-          %246.3 = CheckTrueFalse     e     %246.2
  void                    Branch                   %246.3 -> BB252 (if true) | BB247 (if false)
BB479   <- [467]
  env             e479.0 = MkEnv              l     classDef=%467.2, parent=<env 0x5638ba074378>, context 1
  prom-           %479.1 = MkArg                    unboundValue, reconcilePropertiesAndPrototype[0x5638c44fa010]_p86, e479.0
  val?            %479.2 = StaticCall         !v    %in%[0x5638bc9d4780](".S3Class", %479.1) e479.0   <lgl$->
  lgl$#-          %479.3 = IsType                   %479.2 isA lgl$-
  void                    Branch                   %479.3 -> BB495 (if true) | BB496 (if false)
BB480   <- [467]
  fs              %480.0 = FrameState         R     0x5638c6adad00+5266: [], env=e331.1
  env             e480.1 = (MkEnv)            l     classDef=%467.2, parent=<env 0x5638ba074378>, context 1
  fs              %480.2 = FrameState         R     0x5638c62f56a0+0: [], env=e480.1, next=%480.0
  void                    Deopt              !v    %480.2, CallTarget@0x5638c640c498[Call#0], %467.3   !
BB465   <- [463]
  lgl-            %465.0 = CastType           d     dn %463.3
  val?            %465.1 = Extract1_1D        wed   %463.1, %465.0, elided   <nil->
  void                    StVar              lW    theseSlots, %465.1, e331.1
  val?^ | miss    %465.3 = LdVar              eR    is.na, e331.1
  lgl$#-          %465.4 = Identical                <blt is.na>, %465.3   <true>
  void                    Branch                   %465.4 -> BB473 (if true) | BB474 (if false)
BB466   <- [463]
  fs              %466.0 = FrameState         R     0x5638c6adad00+4163: [%45.5, %45.6, %46.2, %463.1, %463.3], env=e331.1
  void                    Deopt              !v    %466.0, Typecheck@0x5638bfa02a10[Type#224], %463.3   !
BB509   <- [487]
  val+            %509.0 = CallSafeBuiltin    wed   names(%487.1)    <str$->
  void                    StVar              lW    slots, %509.0, e331.1
  val?^ | miss    %509.2 = LdVar              eR    prototype, e331.1
  val?            %509.3 = Force!<wrapped>    !v    %509.2, e331.1   <nil->
  lgl$-           %509.4 = Is                       %509.3, NULL
  lgl$#-          %509.5 = CheckTrueFalse     e     %509.4
  void                    Branch                   %509.5 -> BB302 (if true) | BB301 (if false)
BB510   <- [487]
  fs              %510.0 = FrameState         R     0x5638c6adad00+2565: [], env=e331.1
  void                    Deopt              !v    %510.0, DeadBranchReached@0x5638bfa02a10[Test#12], %487.4   !
BB140   <- [250, 253, 139, 469]
  val?^ | miss    %140.0 = LdVar              eR    extends, e331.1
  lgl$#-          %140.1 = Identical                %140.0, function(class1, class2, maybe=TRUE, fullInfo=|...
  void                    Branch                   %140.1 -> BB481 (if true) | BB482 (if false)
BB252   <- [246]
  (cls|spec|blt)  %252.0 = LdFun              !v    do.call, e331.1
  fs              %252.1 = FrameState         R     0x5638c6adad00+6235: [%252.0], env=e331.1
  void                    Deopt              !v    %252.1, DeadCall@0x5638bfa02a10[Call#156], %252.0   !
BB247   <- [246]
  val?^ | miss    %247.0 = LdVar              eR    prototype, e331.1
  val?            %247.1 = Force!<wrapped>    !v    %247.0, e331.1   <nil->
  lgl$-           %247.2 = Is                       %247.1, NULL
  lgl$#-          %247.3 = CheckTrueFalse     e     %247.2
  void                    Branch                   %247.3 -> BB251 (if true) | BB250 (if false)
BB495   <- [479]
  lgl$-           %495.0 = CastType           d     dn %479.2
  val?            %495.1 = PopContext         C     %495.0, %467.1   <lgl$->
  lgl$#-          %495.2 = IsType                   %495.1 isA lgl$-
  void                    Branch                   %495.2 -> BB503 (if true) | BB504 (if false)
BB496   <- [479]
  fs              %496.0 = FrameState         R     0x5638c6adad00+5266: [], env=e331.1
  fs              %496.1 = FrameState         R     0x5638c62f56a0+37: [%479.2], env=e479.0, next=%496.0
  void                    Deopt              !v    %496.1, Typecheck@0x5638c640c498[Type#4], %479.2   !
BB473   <- [465]
  val?^ | miss    %473.0 = LdVar              eR    match, e331.1
  lgl$#-          %473.1 = Identical                %473.0, function(x, table, nomatch=NA, incomparables=N|...
  void                    Branch                   %473.1 -> BB475 (if true) | BB476 (if false)
BB474   <- [465]
  void                    Nop                !     
  lgl$#-          %474.1 = %465.4
  dr              %474.2 = DeadBranchReached@0x5638bfa02a10[Test#18]
  goto BB78
BB302   <- [509]
  val?^ | miss    %302.0 = LdVar              eR    dataPartValue, e331.1
  lgl$#-          %302.1 = IsType                   %302.0 isA lgl$-
  void                    Branch                   %302.1 -> BB521 (if true) | BB522 (if false)
BB301   <- [509]
  (cls|spec|blt)  %301.0 = LdFun              !v    extends, e331.1
  fs              %301.1 = FrameState         R     0x5638c6adad00+2700: [%301.0], env=e331.1
  void                    Deopt              !v    %301.1, DeadCall@0x5638bfa02a10[Call#55], %301.0   !
BB481   <- [140]
  prom-           %481.0 = MkArg                    unboundValue, reconcilePropertiesAndPrototype[0x5638c44fa010]_p23, e331.1
  val?            %481.1 = Call               !v    function(class1, class2, maybe=TRUE, fullInfo=|...(%481.0, "classPrototypeDef") e331.1   <lgl$->
  lgl$#-          %481.2 = IsType                   %481.1 isA lgl$-
  void                    Branch                   %481.2 -> BB483 (if true) | BB484 (if false)
BB482   <- [140]
  fs              %482.0 = FrameState         R     0x5638c6adad00+6334: [], env=e331.1
  void                    Deopt              !v    %482.0, CallTarget@0x5638bfa02a10[Call#157], %140.0   !
BB251   <- [247]
  val?^ | miss    %251.0 = LdVar              eR    StandardPrototype, e331.1
  lgl$#-          %251.1 = IsType                   %251.0 isA val?~- | miss
  void                    Branch                   %251.1 -> BB469 (if true) | BB470 (if false)
BB250   <- [247]
  void                    Nop                !     
  goto BB140
BB503   <- [495]
  lgl$-           %503.0 = CastType           d     dn %495.1
  lgl$-           %503.1 = Not                d     %503.0, elided   <lgl$->
  void                    StVar              lW    checkDataPart, %503.1, e331.1
  lgl$#-          %503.3 = CheckTrueFalse     e     %503.1
  void                    Branch                   %503.3 -> BB227 (if true) | BB127 (if false)
BB504   <- [495]
  fs              %504.0 = FrameState         R     0x5638c6adad00+5266: [%495.1], env=e331.1
  void                    Deopt              !v    %504.0, Typecheck@0x5638bfa02a10[Type#314], %495.1   !
BB475   <- [473]
  val             %475.0 = ChkMissing         e     %465.1
  void                    Branch                   %463.5 -> BB477 (if true) | BB478 (if false)
BB476   <- [473]
  void                    Nop                !     
  val?^ | miss    %476.1 = %473.0
  dr              %476.2 = CallTarget@0x5638bfa02a10[Call#100]
  goto BB78
BB78   <- [474, 476, 478]
  val?^ | miss    %78.0 = Phi                      %474.1:BB474, %476.1:BB476, %478.1:BB478
  val?^ | miss    %78.1 = %78.0
  dr              %78.2 = Phi                      %474.2:BB474, %476.2:BB476, %478.2:BB478
  dr              %78.3 = %78.2
  fs              %78.4 = FrameState         R     0x5638c6adad00+4184: [%45.5, %45.6, %46.2], env=e331.1
  void                    Deopt              !v    %78.4, %78.3, %78.1   !
BB521   <- [302]
  lgl$-           %521.0 = CastType           d     dn %302.0
  lgl$#-          %521.1 = CheckTrueFalse     e     %521.0
  void                    Branch                   %521.1 -> BB304 (if true) | BB303 (if false)
BB522   <- [302]
  void                    Nop                !     
  val?^ | miss    %522.1 = %302.0
  dr              %522.2 = Typecheck@0x5638bfa02a10[Type#189]
  goto BB299
BB483   <- [481]
  lgl$-           %483.0 = CastType           d     dn %481.1
  lgl$#-          %483.1 = CheckTrueFalse     e     %483.0
  void                    Branch                   %483.1 -> BB209 (if true) | BB145 (if false)
BB484   <- [481]
  void                    Nop                !     
  val?            %484.1 = %481.1
  dr              %484.2 = Typecheck@0x5638bfa02a10[Type#360]
  goto BB143
BB469   <- [251]
  val?~- | miss   %469.0 = CastType           d     dn %251.0
  val?-           %469.1 = Force!<value>            %469.0,    <other->
  void                    StVar              lW    prototype, %469.1, e331.1
  goto BB140
BB470   <- [251]
  fs              %470.0 = FrameState         R     0x5638c6adad00+6290: [%247.1], env=e331.1
  void                    Deopt              !v    %470.0, Typecheck@0x5638bfa02a10[Type#358], %251.0   !
BB227   <- [503]
  val?^ | miss    %227.0 = LdVar              eR    is.na, e331.1
  lgl$#-          %227.1 = Identical                <blt is.na>, %227.0   <true>
  void                    Branch                   %227.1 -> BB513 (if true) | BB514 (if false)
BB127   <- [503]
  void                    Nop                !     
  lgl$-           %127.1 = %503.1
  goto BB128
BB477   <- [475]
  val?^ | miss    %477.0 = LdVar              eR    allProps, e331.1
  val?            %477.1 = Force!<value>      !v    %477.0, e331.1   <vec$+>
  val?            %477.2 = CallBuiltin        !v    names(%477.1) e331.1   <str$->
  lgl$#-          %477.3 = IsType                   %477.2 isA val?+
  lgl$#-          %477.4 = IsType                   %465.1 isA val?+
  void                    Branch                   %477.4 -> BB489 (if true) | BB490 (if false)
BB478   <- [475]
  void                    Nop                !     
  val?^ | miss    %478.1 = %459.8
  dr              %478.2 = CallTarget@0x5638bfa02a10[Call#101]
  goto BB78
BB304   <- [521]
  val?^ | miss    %304.0 = LdVar              eR    newObject, e331.1
  lgl$#-          %304.1 = IsType                   %304.0 isA real-
  void                    Branch                   %304.1 -> BB547 (if true) | BB548 (if false)
BB303   <- [521]
  (cls|spec|blt)  %303.0 = LdFun              !v    isVirtualClass, e331.1
  fs              %303.1 = FrameState         R     0x5638c6adad00+3436: [%303.0], env=e331.1
  void                    Deopt              !v    %303.1, DeadCall@0x5638bfa02a10[Call#84], %303.0   !
BB299   <- [522, 548]
  val?^ | miss    %299.0 = Phi                      %522.1:BB522, %548.1:BB548
  val?^ | miss    %299.1 = %299.0
  dr              %299.2 = Phi                      %522.2:BB522, %548.2:BB548
  dr              %299.3 = %299.2
  fs              %299.4 = FrameState         R     0x5638c6adad00+2679: [%509.3], env=e331.1
  void                    Deopt              !v    %299.4, %299.3, %299.1   !
BB209   <- [483]
  (cls|spec|blt)  %209.0 = LdFun              !v    @, e331.1
  fs              %209.1 = FrameState         R     0x5638c6adad00+6438: [%209.0], env=e331.1
  void                    Deopt              !v    %209.1, DeadCall@0x5638bfa02a10[Call#160], %209.0   !
BB145   <- [483]
  val?^ | miss    %145.0 = LdVar              eR    allNames, e331.1
  lgl$#-          %145.1 = Identical                %145.0, function(x) <(rir::DispatchTable*)0x5638c0a4a1|...
  void                    Branch                   %145.1 -> BB485 (if true) | BB486 (if false)
BB143   <- [484, 486, 498, 506]
  val?^ | miss    %143.0 = Phi                      %484.1:BB484, %486.1:BB486, %498.1:BB498, %506.1:BB506
  val?^ | miss    %143.1 = %143.0
  dr              %143.2 = Phi                      %484.2:BB484, %486.2:BB486, %498.2:BB498, %506.2:BB506
  dr              %143.3 = %143.2
  fs              %143.4 = FrameState         R     0x5638c6adad00+6371: [%481.1], env=e331.1
  void                    Deopt              !v    %143.4, %143.3, %143.1   !
BB513   <- [227]
  val?^ | miss    %513.0 = LdVar              eR    match, e331.1
  lgl$#-          %513.1 = Identical                %513.0, function(x, table, nomatch=NA, incomparables=N|...
  void                    Branch                   %513.1 -> BB517 (if true) | BB518 (if false)
BB514   <- [227]
  void                    Nop                !     
  lgl$#-          %514.1 = %227.1
  dr              %514.2 = DeadBranchReached@0x5638bfa02a10[Test#25]
  goto BB125
BB128   <- [127, 241]
  lgl$-           %128.0 = Phi                      %241.3:BB241, %127.1:BB127
  lgl$-           %128.1 = %128.0
  lgl$#-          %128.2 = CheckTrueFalse     e     %128.1
  void                    Branch                   %128.2 -> BB226 (if true) | BB131 (if false)
BB489   <- [477]
  val?+           %489.0 = CastType           d     dn %465.1   <(int|str)+>
  void                    Branch                   %477.3 -> BB491 (if true) | BB492 (if false)
BB490   <- [477]
  void                    Nop                !     
  val?            %490.1 = %465.1
  dr              %490.2 = Typecheck@0x5638ba2d4cb0[Type#0]
  goto BB80
BB547   <- [304]
  real-           %547.0 = CastType           d     dn %304.0
  void                    StVar              lW    prototype, %547.0, e331.1
  val?^ | miss    %547.2 = LdVar              eR    getClass, e331.1
  lgl$#-          %547.3 = Identical                %547.2, function(Class, .Force=FALSE, where=.classEnv(|...
  void                    Branch                   %547.3 -> BB549 (if true) | BB550 (if false)
BB548   <- [304]
  void                    Nop                !     
  val?^ | miss    %548.1 = %304.0
  dr              %548.2 = Typecheck@0x5638bfa02a10[Type#196]
  goto BB299
BB485   <- [145]
  val?^ | miss    %485.0 = LdVar              eR    names, <env 0x5638ba074378>
  lgl$#-          %485.1 = Identical                <blt names>, %485.0   <true>
  void                    Branch                   %485.1 -> BB497 (if true) | BB498 (if false)
BB486   <- [145]
  void                    Nop                !     
  val?^ | miss    %486.1 = %145.0
  dr              %486.2 = CallTarget@0x5638bfa02a10[Call#158]
  goto BB143
BB517   <- [513]
  val?^ | miss    %517.0 = LdVar              eR    dataPartClass, e331.1
  lgl$#-          %517.1 = IsType                   %517.0 isA val?~- | miss
  void                    Branch                   %517.1 -> BB525 (if true) | BB526 (if false)
BB518   <- [513]
  void                    Nop                !     
  val?^ | miss    %518.1 = %513.0
  dr              %518.2 = CallTarget@0x5638bfa02a10[Call#139]
  goto BB125
BB125   <- [514, 518, 526]
  val?^ | miss    %125.0 = Phi                      %514.1:BB514, %518.1:BB518, %526.1:BB526
  val?^ | miss    %125.1 = %125.0
  dr              %125.2 = Phi                      %514.2:BB514, %518.2:BB518, %526.2:BB526
  dr              %125.3 = %125.2
  fs              %125.4 = FrameState         R     0x5638c6adad00+5281: [], env=e331.1
  void                    Deopt              !v    %125.4, %125.3, %125.1   !
BB226   <- [128]
  (cls|spec|blt)  %226.0 = LdFun              !v    stop, e331.1
  fs              %226.1 = FrameState         R     0x5638c6adad00+5651: [%226.0], env=e331.1
  void                    Deopt              !v    %226.1, DeadCall@0x5638bfa02a10[Call#144], %226.0   !
BB131   <- [128]
  val?^ | miss    %131.0 = LdVar              eR    extends, e331.1
  lgl$#-          %131.1 = Identical                %131.0, function(class1, class2, maybe=TRUE, fullInfo=|...
  void                    Branch                   %131.1 -> BB515 (if true) | BB516 (if false)
BB491   <- [489]
  val?+           %491.0 = CastType           d     dn %477.2   <str$->
  val+            %491.1 = CallSafeBuiltin    wed   match(%489.0, %491.0, NA, nil)    <int->
  lgl$#-          %491.2 = IsType                   %491.1 isA int-
  void                    Branch                   %491.2 -> BB493 (if true) | BB494 (if false)
BB492   <- [489]
  void                    Nop                !     
  val?            %492.1 = %477.2
  dr              %492.2 = Typecheck@0x5638ba2d4cb0[Type#1]
  goto BB80
BB80   <- [490, 492]
  val?^ | miss    %80.0 = Phi                      %490.1:BB490, %492.1:BB492
  val?^ | miss    %80.1 = %80.0
  dr              %80.2 = Phi                      %490.2:BB490, %492.2:BB492
  dr              %80.3 = %80.2
  prom-           %80.4 = MkArg                    %477.2, reconcilePropertiesAndPrototype[0x5638c44fa010]_p11 (!refl), e331.1
  val?~           %80.5 = CastType                 up %80.4
  prom-           %80.6 = MkArg                    %465.1, reconcilePropertiesAndPrototype[0x5638c44fa010]_p10 (!refl), e331.1
  val?~           %80.7 = CastType                 up %80.6
  fs              %80.8 = FrameState         R     0x5638c6adad00+4281: [%45.5, %45.6, %46.2, <blt is.na>], env=e331.1
  env             e80.9 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%80.5, x=%80.7, parent=R_BaseNamespace, context 0
  fs              %80.10 = FrameState         R     0x5638ba281d40+23: [%465.1, %477.2], env=e80.9, next=%80.8
  void                    Deopt              !v    %80.10, %80.3, %80.1   !
BB549   <- [547]
  prom-           %549.0 = MkArg                    unboundValue, reconcilePropertiesAndPrototype[0x5638c44fa010]_p69, e331.1
  prom-           %549.1 = MkArg                    unboundValue, reconcilePropertiesAndPrototype[0x5638c44fa010]_p71, e331.1
  val?            %549.2 = StaticCall         !v    getClass[0x5638c695dbf0](%549.0, missingArg, %549.1) { 0 2n } e331.1   <other>
  void                    StVar              lW    prototypeClass, %549.2, e331.1
  goto BB285
BB550   <- [547]
  fs              %550.0 = FrameState         R     0x5638c6adad00+3612: [], env=e331.1
  void                    Deopt              !v    %550.0, CallTarget@0x5638bfa02a10[Call#87], %547.2   !
BB497   <- [485]
  val?^ | miss    %497.0 = LdVar              eR    attributes, e331.1
  lgl$#-          %497.1 = Identical                %497.0, <blt attributes>
  void                    Branch                   %497.1 -> BB505 (if true) | BB506 (if false)
BB498   <- [485]
  void                    Nop                !     
  lgl$#-          %498.1 = %485.1
  dr              %498.2 = DeadBranchReached@0x5638c58fdc88[Test#0]
  goto BB143
BB525   <- [517]
  val?~- | miss   %525.0 = CastType           d     dn %517.0
  val?-           %525.1 = Force!<value>            %525.0,    <str$->
  val?^ | miss    %525.2 = LdVar              eR    .BasicClasses, e331.1
  val?            %525.3 = Force!<wrapped>    !v    %525.2, e331.1   <str->
  lgl$#-          %525.4 = IsType                   %525.3 isA val?+
  void                    Branch                   %525.4 -> BB553 (if true) | BB554 (if false)
BB526   <- [517]
  void                    Nop                !     
  val?^ | miss    %526.1 = %517.0
  dr              %526.2 = Typecheck@0x5638bfa02a10[Type#319]
  goto BB125
BB515   <- [131]
  prom-           %515.0 = MkArg                    unboundValue, reconcilePropertiesAndPrototype[0x5638c44fa010]_p20, e331.1
  val?            %515.1 = Call               !v    function(class1, class2, maybe=TRUE, fullInfo=|...(%515.0, "classPrototypeDef") e331.1   <lgl$->
  lgl$#-          %515.2 = IsType                   %515.1 isA lgl$-
  void                    Branch                   %515.2 -> BB519 (if true) | BB520 (if false)
BB516   <- [131]
  fs              %516.0 = FrameState         R     0x5638c6adad00+5621: [], env=e331.1
  void                    Deopt              !v    %516.0, CallTarget@0x5638bfa02a10[Call#147], %131.0   !
BB493   <- [491]
  int-            %493.0 = CastType           d     dn %491.1
  lgl-            %493.1 = CallSafeBuiltin    wed   is.na(%493.0)    <lgl->
  lgl-            %493.2 = Not                wed   %493.1, elided
  void                    StVar              lW    dups, %493.2, e331.1
  val?^ | miss    %493.4 = LdVar              eR    theseSlots, e331.1
  lgl$#-          %493.5 = IsType                   %493.4 isA val?~- | miss
  void                    Branch                   %493.5 -> BB499 (if true) | BB500 (if false)
BB494   <- [491]
  prom-           %494.0 = MkArg                    %491.0, reconcilePropertiesAndPrototype[0x5638c44fa010]_p11 (!refl), e331.1
  val?~           %494.1 = CastType                 up %494.0
  prom-           %494.2 = MkArg                    %489.0, reconcilePropertiesAndPrototype[0x5638c44fa010]_p10 (!refl), e331.1
  val?~           %494.3 = CastType                 up %494.2
  fs              %494.4 = FrameState         R     0x5638c6adad00+4281: [%45.5, %45.6, %46.2, <blt is.na>], env=e331.1
  env             e494.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%494.1, x=%494.3, parent=R_BaseNamespace, context 0
  fs              %494.6 = FrameState         R     0x5638ba281d40+69: [%491.1], env=e494.5, next=%494.4
  void                    Deopt              !v    %494.6, Typecheck@0x5638bfa02a10[Type#233], %491.1   !
BB505   <- [497]
  val?^ | miss    %505.0 = LdVar              eR    prototype, e331.1
  val?            %505.1 = Force<value>       !v    %505.0, e331.1   <(real|other)->
  val?            %505.2 = CallBuiltin        !v    attributes(%505.1) e331.1   <nil->
  prom-           %505.3 = MkArg                    %505.2, reconcilePropertiesAndPrototype[0x5638c44fa010]_p24 (!refl), e331.1
  val?~           %505.4 = CastType                 up %505.3
  lgl$#-          %505.5 = IsType                   %505.2 isA val?+
  void                    Branch                   %505.5 -> BB507 (if true) | BB508 (if false)
BB506   <- [497]
  void                    Nop                !     
  val?^ | miss    %506.1 = %497.0
  dr              %506.2 = CallTarget@0x5638bfa02a10[Call#159]
  goto BB143
BB553   <- [525]
  val?+           %553.0 = CastType           d     dn %525.3   <str->
  val+            %553.1 = CallSafeBuiltin    wed   match(%525.1, %553.0, NA, nil)    <int$->
  lgl$#-          %553.2 = IsType                   %553.1 isA int$-
  void                    Branch                   %553.2 -> BB557 (if true) | BB558 (if false)
BB554   <- [525]
  fs              %554.0 = FrameState         R     0x5638c6adad00+5403: [<blt is.na>], env=e331.1
  prom-           %554.1 = MkArg                    unboundValue, reconcilePropertiesAndPrototype[0x5638c44fa010]_p54, e331.1
  val?^           %554.2 = CastType                 up %554.1
  prom-           %554.3 = MkArg                    %525.1, reconcilePropertiesAndPrototype[0x5638c44fa010]_p53 (!refl), e331.1
  val?~           %554.4 = CastType                 up %554.3
  env             e554.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%554.2, x=%554.4, parent=R_BaseNamespace, context 0
  fs              %554.6 = FrameState         R     0x5638ba281d40+23: [%525.1], env=e554.5, next=%554.0
  fs              %554.7 = FrameState         R     0x5638c3b36ff0+5(pr): [%525.3], env=e331.1, next=%554.6
  void                    Deopt              !v    %554.7, Typecheck@0x5638ba2d4cb0[Type#1], %525.3   !
BB519   <- [515]
  lgl$-           %519.0 = CastType           d     dn %515.1
  lgl$#-          %519.1 = CheckTrueFalse     e     %519.0
  void                    Branch                   %519.1 -> BB225 (if true) | BB134 (if false)
BB520   <- [515]
  void                    Nop                !     
  val?            %520.1 = %515.1
  dr              %520.2 = Typecheck@0x5638bfa02a10[Type#337]
  goto BB132
BB499   <- [493]
  val?~- | miss   %499.0 = CastType           d     dn %493.4
  val?-           %499.1 = Force!<value>            %499.0,    <nil->
  lgl$#-          %499.2 = IsType                   %499.1 isA val+   <true>
  void                    Branch                   %499.2 -> BB501 (if true) | BB502 (if false)
BB500   <- [493]
  void                    Nop                !     
  val?^ | miss    %500.1 = %493.4
  dr              %500.2 = Typecheck@0x5638bfa02a10[Type#235]
  goto BB84
BB507   <- [505]
  val?+           %507.0 = CastType           d     dn %505.2   <(nil|vec)+>
  val+            %507.1 = CallSafeBuiltin    wed   names(%507.0)    <(nil|str)->
  lgl$-           %507.2 = Is                       %507.1, NULL
  lgl$#-          %507.3 = CheckTrueFalse     e     %507.2
  env             e507.4 = (MkEnv)            l     x=%505.4, value=%507.1, parent=<env 0x5638ba074378>, context 0
  void                    Branch                   %507.3 -> BB206 (if true) | BB150 (if false)
BB508   <- [505]
  fs              %508.0 = FrameState         R     0x5638c6adad00+6414: [], env=e331.1
  env             e508.1 = (MkEnv)            l     x=%505.4, value=unboundValue, parent=<env 0x5638ba074378>, context 0
  fs              %508.2 = FrameState         R     0x5638c58c5380+69: [<blt names>, %505.2], env=e508.1, next=%508.0
  void                    Deopt              !v    %508.2, Typecheck@0x5638c58fdc88[Type#1], %505.2   !
BB557   <- [553]
  int$-           %557.0 = CastType           d     dn %553.1
  lgl$-           %557.1 = CallSafeBuiltin    wed   is.na(%557.0)    <lgl$->
  lgl$-           %557.2 = AsLogical                %557.1
  lgl$#-          %557.3 = Identical                %557.2, false
  lgl$-           %557.4 = AsLogical                %557.2
  lgl$#-          %557.5 = Identical                %557.4, true
  void                    Branch                   %557.3 -> BB235 (if true) | BB234 (if false)
BB558   <- [553]
  fs              %558.0 = FrameState         R     0x5638c6adad00+5403: [<blt is.na>], env=e331.1
  prom-           %558.1 = MkArg                    %553.0, reconcilePropertiesAndPrototype[0x5638c44fa010]_p54 (!refl), e331.1
  val?~           %558.2 = CastType                 up %558.1
  prom-           %558.3 = MkArg                    %525.1, reconcilePropertiesAndPrototype[0x5638c44fa010]_p53 (!refl), e331.1
  val?~           %558.4 = CastType                 up %558.3
  env             e558.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%558.2, x=%558.4, parent=R_BaseNamespace, context 0
  fs              %558.6 = FrameState         R     0x5638ba281d40+69: [%553.1], env=e558.5, next=%558.0
  void                    Deopt              !v    %558.6, Typecheck@0x5638bfa02a10[Type#321], %553.1   !
BB225   <- [519]
  void                    Nop                !     
  goto BB139
BB134   <- [519]
  val?^ | miss    %134.0 = LdVar              eR    extends, e331.1
  lgl$#-          %134.1 = Identical                %134.0, function(class1, class2, maybe=TRUE, fullInfo=|...
  void                    Branch                   %134.1 -> BB527 (if true) | BB528 (if false)
BB132   <- [520, 528]
  val?^ | miss    %132.0 = Phi                      %520.1:BB520, %528.1:BB528
  val?^ | miss    %132.1 = %132.0
  dr              %132.2 = Phi                      %520.2:BB520, %528.2:BB528
  dr              %132.3 = %132.2
  fs              %132.4 = FrameState         R     0x5638c6adad00+5729: [%515.1], env=e331.1
  void                    Deopt              !v    %132.4, %132.3, %132.1   !
BB501   <- [499]
  val?            %501.0 = Extract1_1D        wed   %499.1, %493.2, elided   <nil->
  val?+           %501.1 = ToForSeq           e     %501.0
  int$-           %501.2 = Length                   %501.1
  int$-           %501.3 = Inc                      0L
  lgl$-           %501.4 = Lt                 d     %501.2, %501.3, elided   <true>
  lgl$#-          %501.5 = Identical                %501.4, true
  void                    Branch                   %501.5 -> BB511 (if true) | BB512 (if false)
BB502   <- [499]
  void                    Nop                !     
  lgl$#-          %502.1 = %499.2
  dr              %502.2 = DeadBranchReached@0x5638bfa02a10[Test#19]
  goto BB84
BB84   <- [500, 502]
  val?^ | miss    %84.0 = Phi                      %500.1:BB500, %502.1:BB502
  val?^ | miss    %84.1 = %84.0
  dr              %84.2 = Phi                      %500.2:BB500, %502.2:BB502
  dr              %84.3 = %84.2
  fs              %84.4 = FrameState         R     0x5638c6adad00+4318: [%45.5, %45.6, %46.2], env=e331.1
  void                    Deopt              !v    %84.4, %84.3, %84.1   !
BB206   <- [507]
  val?^ | miss    %206.0 = LdVar              eR    character, <env 0x5638ba074378>
  lgl$#-          %206.1 = Identical                %206.0, function(length=0L) <(rir::DispatchTable*)0x56|...
  void                    Branch                   %206.1 -> BB529 (if true) | BB530 (if false)
BB150   <- [507]
  void                    Nop                !     
  val+            %150.1 = %507.1
  goto BB151
BB235   <- [557]
  void                    Branch                   %557.5 -> BB242 (if true) | BB236 (if false)
BB234   <- [557]
  (cls|spec|blt)  %234.0 = LdFun              !v    isVirtualClass, e331.1
  fs              %234.1 = FrameState         R     0x5638c6adad00+5442: [%557.2, %234.0], env=e331.1
  void                    Deopt              !v    %234.1, DeadCall@0x5638bfa02a10[Call#140], %234.0   !
BB139   <- [222, 225, 138]
  void                    Nop                !     
  goto BB140
BB527   <- [134]
  prom-           %527.0 = MkArg                    unboundValue, reconcilePropertiesAndPrototype[0x5638c44fa010]_p21, e331.1
  prom-           %527.1 = MkArg                    unboundValue, reconcilePropertiesAndPrototype[0x5638c44fa010]_p22, e331.1
  val?            %527.2 = Call               !v    function(class1, class2, maybe=TRUE, fullInfo=|...(%527.0, %527.1) e331.1   <lgl$->
  lgl$#-          %527.3 = IsType                   %527.2 isA lgl$-
  void                    Branch                   %527.3 -> BB537 (if true) | BB538 (if false)
BB528   <- [134]
  void                    Nop                !     
  val?^ | miss    %528.1 = %134.0
  dr              %528.2 = CallTarget@0x5638bfa02a10[Call#148]
  goto BB132
BB511   <- [501]
  val?            %511.0 = Extract1_1D        wed   %499.1, %493.1, elided   <nil->
  void                    StVar              lW    theseSlots, %511.0, e331.1
  lgl$#-          %511.2 = IsType                   %511.0 isA val?-
  val?^ | miss    %511.3 = LdVar              eR    length, e331.1
  lgl$#-          %511.4 = Identical                <blt length>, %511.3   <true>
  void                    Branch                   %511.4 -> BB523 (if true) | BB524 (if false)
BB512   <- [501]
  fs              %512.0 = FrameState         R     0x5638c6adad00+4378: [%45.5, %45.6, %46.2, %501.0], env=e331.1
  void                    Deopt              !v    %512.0, DeadBranchReached@0x5638bfa02a10[Test#20], %501.5   !
BB529   <- [206]
  val?^ | miss    %529.0 = LdVar              eR    length, <env 0x5638ba074378>
  lgl$#-          %529.1 = Identical                %529.0, <blt length>
  void                    Branch                   %529.1 -> BB531 (if true) | BB532 (if false)
BB530   <- [206]
  void                    Nop                !     
  val?^ | miss    %530.1 = %206.0
  dr              %530.2 = CallTarget@0x5638c58fdc88[Call#1]
  goto BB148
BB151   <- [150, 533]
  val+            %151.0 = Phi                      %150.1:BB150, %533.2:BB533   <str->
  val+            %151.1 = %151.0
  void                    StVar              lW    pnames, %151.1, e331.1
  val?^ | miss    %151.3 = LdVar              eR    seq_along, e331.1
  lgl$#-          %151.4 = Identical                <blt seq_along>, %151.3   <true>
  void                    Branch                   %151.4 -> BB541 (if true) | BB542 (if false)
BB242   <- [235]
  void                    Nop                !     
  lgl$-           %242.1 = %557.4
  goto BB241
BB236   <- [235]
  val?^ | miss    %236.0 = LdVar              eR    length, e331.1
  lgl$#-          %236.1 = Identical                <blt length>, %236.0   <true>
  void                    Branch                   %236.1 -> BB571 (if true) | BB572 (if false)
BB537   <- [527]
  lgl$-           %537.0 = CastType           d     dn %527.2
  lgl$#-          %537.1 = CheckTrueFalse     e     %537.0
  void                    Branch                   %537.1 -> BB211 (if true) | BB137 (if false)
BB538   <- [527]
  void                    Nop                !     
  val?            %538.1 = %527.2
  dr              %538.2 = Typecheck@0x5638bfa02a10[Type#340]
  goto BB135
BB523   <- [511]
  val             %523.0 = ChkMissing         e     %511.0
  void                    Branch                   %511.2 -> BB535 (if true) | BB536 (if false)
BB524   <- [511]
  void                    Nop                !     
  lgl$#-          %524.1 = %511.4
  dr              %524.2 = DeadBranchReached@0x5638bfa02a10[Test#22]
  goto BB88
BB531   <- [529]
  (int|real)$-    %531.0 = CallSafeBuiltin    wed   length(%507.0)    <int$->
  lgl$#-          %531.1 = IsType                   %531.0 isA int$-
  void                    Branch                   %531.1 -> BB533 (if true) | BB534 (if false)
BB532   <- [529]
  void                    Nop                !     
  val?^ | miss    %532.1 = %529.0
  dr              %532.2 = CallTarget@0x5638c58fdc88[Call#2]
  goto BB148
BB148   <- [530, 532]
  val?^ | miss    %148.0 = Phi                      %530.1:BB530, %532.1:BB532
  val?^ | miss    %148.1 = %148.0
  dr              %148.2 = Phi                      %530.2:BB530, %532.2:BB532
  dr              %148.3 = %148.2
  fs              %148.4 = FrameState         R     0x5638c6adad00+6414: [], env=e331.1
  env             e148.5 = (MkEnv)            l     x=%505.4, value=%507.1, parent=<env 0x5638ba074378>, context 0
  fs              %148.6 = FrameState         R     0x5638c58c5380+105: [], env=e148.5, next=%148.4
  void                    Deopt              !v    %148.6, %148.3, %148.1   !
BB541   <- [151]
  val?^ | miss    %541.0 = LdVar              eR    properties, e331.1
  val?            %541.1 = Force!<wrapped>    !v    %541.0, e331.1   <vec+>
  val?            %541.2 = CallBuiltin        !v    seq_along(%541.1) e331.1   <int->
  void                    StVar              lW    what, %541.2, e331.1
  val?^ | miss    %541.4 = LdVar              eR    properties, e331.1
  val?            %541.5 = Force!<wrapped>    !v    %541.4, e331.1   <vec+>
  lgl$#-          %541.6 = IsType                   %541.5 isA val+   <true>
  lgl$#-          %541.7 = IsType                   %541.5 isA val?+
  void                    Branch                   %541.6 -> BB543 (if true) | BB544 (if false)
BB542   <- [151]
  fs              %542.0 = FrameState         R     0x5638c6adad00+6428: [], env=e331.1
  void                    Deopt              !v    %542.0, DeadBranchReached@0x5638bfa02a10[Test#32], %151.4   !
BB241   <- [242, 583]
  lgl$-           %241.0 = Phi                      %583.3:BB583, %242.1:BB242
  lgl$-           %241.1 = %241.0
  void                    StVar              lW    checkDataPart, %241.1, e331.1
  lgl$-           %241.3 = %241.1
  goto BB128
BB571   <- [236]
  (cls|spec|blt)  %571.0 = LdFun              !v    @, <0x5638b9a6cbd8>, e331.1
  prom-           %571.1 = MkArg                    unboundValue, reconcilePropertiesAndPrototype[0x5638c44fa010]_p55, e331.1
  prom-           %571.2 = MkArg                    unboundValue, reconcilePropertiesAndPrototype[0x5638c44fa010]_p56, e331.1
  val?            %571.3 = Call               !v    %571.0(%571.1, %571.2) e331.1   <vec->
  lgl$#-          %571.4 = IsType                   %571.3 isA val?-
  void                    Branch                   %571.4 -> BB581 (if true) | BB582 (if false)
BB572   <- [236]
  fs              %572.0 = FrameState         R     0x5638c6adad00+5425: [%557.1], env=e331.1
  void                    Deopt              !v    %572.0, DeadBranchReached@0x5638bfa02a10[Test#26], %236.1   !
BB211   <- [537]
  val?^ | miss    %211.0 = LdVar              eR    extends, e331.1
  lgl$#-          %211.1 = Identical                %211.0, function(class1, class2, maybe=TRUE, fullInfo=|...
  void                    Branch                   %211.1 -> BB539 (if true) | BB540 (if false)
BB137   <- [537]
  val?^ | miss    %137.0 = LdVar              eR    prototype, e331.1
  val?            %137.1 = Force!             !v    %137.0, e331.1   <val?_>
  lgl$-           %137.2 = Is                       %137.1, list
  lgl$#-          %137.3 = CheckTrueFalse     e     %137.2
  void                    Branch                   %137.3 -> BB210 (if true) | BB138 (if false)
BB135   <- [538, 540]
  val?^ | miss    %135.0 = Phi                      %538.1:BB538, %540.1:BB540
  val?^ | miss    %135.1 = %135.0
  dr              %135.2 = Phi                      %538.2:BB538, %540.2:BB540
  dr              %135.3 = %135.2
  fs              %135.4 = FrameState         R     0x5638c6adad00+5777: [%527.2], env=e331.1
  void                    Deopt              !v    %135.4, %135.3, %135.1   !
BB535   <- [523]
  val?-           %535.0 = CastType           d     dn %511.0   <nil->
  (int|real)$-    %535.1 = CallSafeBuiltin    wed   length(%535.0)    <int$->
  lgl$#-          %535.2 = IsType                   %535.1 isA int$-
  void                    Branch                   %535.2 -> BB551 (if true) | BB552 (if false)
BB536   <- [523]
  void                    Nop                !     
  val?            %536.1 = %511.0
  dr              %536.2 = Typecheck@0x5638bfa02a10[Type#286]
  goto BB88
BB88   <- [524, 536]
  val?^ | miss    %88.0 = Phi                      %524.1:BB524, %536.1:BB536
  val?^ | miss    %88.1 = %88.0
  dr              %88.2 = Phi                      %524.2:BB524, %536.2:BB536
  dr              %88.3 = %88.2
  fs              %88.4 = FrameState         R     0x5638c6adad00+4739: [%45.5, %45.6, %46.2], env=e331.1
  void                    Deopt              !v    %88.4, %88.3, %88.1   !
BB533   <- [531]
  int$-           %533.0 = CastType           d     dn %531.0
  str-            %533.1 = CallSafeBuiltin    wed   vector("character", %533.0)    <str->
  str-            %533.2 = %533.1
  goto BB151
BB534   <- [531]
  env             e534.0 = MaterializeEnv           , e507.4   <@?>
  fs              %534.1 = FrameState         R     0x5638c6adad00+6414: [], env=e331.1
  fs              %534.2 = FrameState         R     0x5638c58c5380+181: [], env=e534.0, next=%534.1
  prom-           %534.3 = MkArg                    unboundValue, reconcilePropertiesAndPrototype[0x5638c44fa010]_p92, e534.0
  val?^           %534.4 = CastType                 up %534.3
  env             e534.5 = (MkEnv)            l     length=%534.4, parent=R_BaseNamespace, context -1
  fs              %534.6 = FrameState         R     0x5638bb9599f0+15: ["character"], env=e534.5, next=%534.2
  fs              %534.7 = FrameState         R     0x5638be16fa80+32(pr): [%531.0], env=e534.0, next=%534.6
  void                    Deopt              !v    %534.7, Typecheck@0x5638c58fdc88[Type#6], %531.0   !
BB543   <- [541]
  val?^ | miss    %543.0 = LdVar              eR    what, e331.1
  lgl$#-          %543.1 = IsType                   %543.0 isA int-
  void                    Branch                   %543.1 -> BB545 (if true) | BB546 (if false)
BB544   <- [541]
  void                    Nop                !     
  lgl$#-          %544.1 = %541.6
  dr              %544.2 = DeadBranchReached@0x5638bfa02a10[Test#33]
  goto BB154
BB581   <- [571]
  val?-           %581.0 = CastType           d     dn %571.3   <vec->
  (int|real)$-    %581.1 = CallSafeBuiltin    wed   length(%581.0)    <int$->
  lgl$#-          %581.2 = IsType                   %581.1 isA int$-
  void                    Branch                   %581.2 -> BB583 (if true) | BB584 (if false)
BB582   <- [571]
  fs              %582.0 = FrameState         R     0x5638c6adad00+5582: [%557.4, <blt length>, %571.3], env=e331.1
  void                    Deopt              !v    %582.0, Typecheck@0x5638bfa02a10[Type#330], %571.3   !
BB539   <- [211]
  prom-           %539.0 = MkArg                    unboundValue, reconcilePropertiesAndPrototype[0x5638c44fa010]_p52, e331.1
  val?            %539.1 = Call               !v    function(class1, class2, maybe=TRUE, fullInfo=|...(%539.0, "list") e331.1   <lgl$->
  lgl$#-          %539.2 = IsType                   %539.1 isA lgl$-
  void                    Branch                   %539.2 -> BB559 (if true) | BB560 (if false)
BB540   <- [211]
  void                    Nop                !     
  val?^ | miss    %540.1 = %211.0
  dr              %540.2 = CallTarget@0x5638bfa02a10[Call#150]
  goto BB135
BB210   <- [137]
  (cls|spec|blt)  %210.0 = LdFun              !v    do.call, e331.1
  fs              %210.1 = FrameState         R     0x5638c6adad00+5823: [%210.0], env=e331.1
  void                    Deopt              !v    %210.1, DeadCall@0x5638bfa02a10[Call#149], %210.0   !
BB138   <- [137]
  void                    Nop                !     
  goto BB139
BB551   <- [535]
  int$-           %551.0 = CastType           d     dn %535.1
  lgl$#-          %551.1 = CheckTrueFalse     e     %551.0
  void                    Branch                   %551.1 -> BB94 (if true) | BB92 (if false)
BB552   <- [535]
  fs              %552.0 = FrameState         R     0x5638c6adad00+4830: [%45.5, %45.6, %46.2, %535.1], env=e331.1
  void                    Deopt              !v    %552.0, Typecheck@0x5638bfa02a10[Type#289], %535.1   !
BB545   <- [543]
  int-            %545.0 = CastType           d     dn %543.0
  void                    Branch                   %541.7 -> BB555 (if true) | BB556 (if false)
BB546   <- [543]
  void                    Nop                !     
  val?^ | miss    %546.1 = %543.0
  dr              %546.2 = Typecheck@0x5638bfa02a10[Type#405]
  goto BB154
BB154   <- [544, 546, 556]
  val?^ | miss    %154.0 = Phi                      %544.1:BB544, %546.1:BB546, %556.1:BB556
  val?^ | miss    %154.1 = %154.0
  dr              %154.2 = Phi                      %544.2:BB544, %546.2:BB546, %556.2:BB556
  dr              %154.3 = %154.2
  fs              %154.4 = FrameState         R     0x5638c6adad00+6947: [%541.5], env=e331.1
  void                    Deopt              !v    %154.4, %154.3, %154.1   !
BB583   <- [581]
  int$-           %583.0 = CastType           d     dn %581.1
  lgl$-           %583.1 = AsLogical                %583.0
  lgl$-           %583.2 = LOr                      %557.4, %583.1
  lgl$-           %583.3 = %583.2
  goto BB241
BB584   <- [581]
  fs              %584.0 = FrameState         R     0x5638c6adad00+5604: [%557.4, %581.1], env=e331.1
  void                    Deopt              !v    %584.0, Typecheck@0x5638bfa02a10[Type#331], %581.1   !
BB559   <- [539]
  lgl$-           %559.0 = CastType           d     dn %539.1
  lgl$-           %559.1 = AsLogical                %559.0
  lgl$#-          %559.2 = Identical                %559.1, false
  void                    Branch                   %559.2 -> BB224 (if true) | BB214 (if false)
BB560   <- [539]
  fs              %560.0 = FrameState         R     0x5638c6adad00+5911: [%539.1], env=e331.1
  void                    Deopt              !v    %560.0, Typecheck@0x5638bfa02a10[Type#345], %539.1   !
BB94   <- [551]
  val?^ | miss    %94.0 = LdVar              eR    theseProperties, e331.1
  val?            %94.1 = Force!             !v    %94.0, e331.1   <val?_>
  lgl$#-          %94.2 = IsType                   %94.1 isA val+   <@?>
  void                    Branch                   %94.2 -> BB99 (if true) | BB95 (if false)
BB92   <- [551]
  void                    Nop                !     
  goto BB93
BB555   <- [545]
  val?+           %555.0 = CastType           d     dn %541.5   <vec+>
  val?            %555.1 = Extract1_1D        wed   %555.0, %545.0, elided   <vec+>
  void                    StVar              lW    props, %555.1, e331.1
  val?^ | miss    %555.3 = LdVar              eR    slots, e331.1
  lgl$#-          %555.4 = IsType                   %555.3 isA val?~- | miss
  void                    Branch                   %555.4 -> BB561 (if true) | BB562 (if false)
BB556   <- [545]
  void                    Nop                !     
  val?            %556.1 = %541.5
  dr              %556.2 = Typecheck@0x5638bfa02a10[Type#403]
  goto BB154
BB224   <- [559]
  void                    Nop                !     
  lgl$-           %224.1 = %559.1
  goto BB221
BB214   <- [559]
  val?^ | miss    %214.0 = LdVar              eR    length, e331.1
  lgl$#-          %214.1 = Identical                <blt length>, %214.0   <@?>
  void                    Branch                   %214.1 -> BB216 (if true) | BB215 (if false)
BB99   <- [94]
  val?^ | miss    %99.0 = LdVar              eR    theseSlots, e331.1
  val?            %99.1 = Force!             !v    %99.0, e331.1   <val?_>
  val?            %99.2 = %99.1
  goto BB96
BB95   <- [94]
  prom-           %95.0 = MkArg                    unboundValue, reconcilePropertiesAndPrototype[0x5638c44fa010]_p13, e331.1
  prom-           %95.1 = %95.0
  goto BB96
BB93   <- [92, 569]
  void                    Nop                !     
  int$-           %93.1 = %46.2
  goto BB46
BB561   <- [555]
  val?~- | miss   %561.0 = CastType           d     dn %555.3
  val?-           %561.1 = Force!<value>            %561.0,    <str->
  lgl$#-          %561.2 = IsType                   %561.1 isA val+   <true>
  void                    Branch                   %561.2 -> BB567 (if true) | BB568 (if false)
BB562   <- [555]
  void                    Nop                !     
  val?^ | miss    %562.1 = %555.3
  dr              %562.2 = Typecheck@0x5638bfa02a10[Type#407]
  goto BB156
BB221   <- [224, 577]
  lgl$-           %221.0 = Phi                      %577.5:BB577, %224.1:BB224
  lgl$-           %221.1 = %221.0
  lgl$#-          %221.2 = CheckTrueFalse     e     %221.1
  void                    Branch                   %221.2 -> BB223 (if true) | BB222 (if false)
BB216   <- [214]
  val?^ | miss    %216.0 = LdVar              eR    names, e331.1
  lgl$#-          %216.1 = Identical                <blt names>, %216.0   <@?>
  void                    Branch                   %216.1 -> BB218 (if true) | BB217 (if false)
BB215   <- [214]
  (cls|spec|blt)  %215.0 = LdFun              !v    length, e331.1
  fs              %215.1 = FrameState         R     0x5638c6adad00+5951: [%559.1, %215.0], env=e331.1
  void                    Deopt              !v    %215.1, DeadCall@0x5638bfa02a10[Call#151], %215.0   !
BB96   <- [95, 99]
  val?            %96.0 = Phi                      %99.2:BB99, %95.1:BB95
  val?            %96.1 = %96.0
  val?            %96.2 = Extract1_1D        !v    %94.1, %96.1, e331.1   <val?_>
  val?^ | miss    %96.3 = LdVar              eR    allProps, e331.1
  val?            %96.4 = Force!             !v    %96.3, e331.1   <val?_>
  val?^ | miss    %96.5 = LdVar              eR    theseSlots, e331.1
  val?            %96.6 = Force!             !v    %96.5, e331.1   <val?_>
  lgl$#-          %96.7 = IsType                   %96.6 isA val?+
  lgl$#-          %96.8 = IsType                   %96.2 isA val?+
  lgl$#-          %96.9 = IsType                   %96.4 isA val?+
  void                    Branch                   %96.8 -> BB563 (if true) | BB564 (if false)
BB567   <- [561]
  val?            %567.0 = Extract1_1D        wed   %561.1, %545.0, elided   <str->
  void                    StVar              lW    what, %567.0, e331.1
  val?^ | miss    %567.2 = LdVar              eR    names, e331.1
  lgl$#-          %567.3 = Identical                <blt names>, %567.2   <true>
  void                    Branch                   %567.3 -> BB573 (if true) | BB574 (if false)
BB568   <- [561]
  void                    Nop                !     
  lgl$#-          %568.1 = %561.2
  dr              %568.2 = DeadBranchReached@0x5638bfa02a10[Test#34]
  goto BB156
BB156   <- [562, 568]
  val?^ | miss    %156.0 = Phi                      %562.1:BB562, %568.1:BB568
  val?^ | miss    %156.1 = %156.0
  dr              %156.2 = Phi                      %562.2:BB562, %568.2:BB568
  dr              %156.3 = %156.2
  fs              %156.4 = FrameState         R     0x5638c6adad00+7013: [], env=e331.1
  void                    Deopt              !v    %156.4, %156.3, %156.1   !
BB223   <- [221]
  (cls|spec|blt)  %223.0 = LdFun              !v    warning, e331.1
  fs              %223.1 = FrameState         R     0x5638c6adad00+6119: [%223.0], env=e331.1
  void                    Deopt              !v    %223.1, DeadCall@0x5638bfa02a10[Call#154], %223.0   !
BB222   <- [221]
  void                    Nop                !     
  goto BB139
BB218   <- [216]
  val?^ | miss    %218.0 = LdVar              eR    prototype, e331.1
  val?            %218.1 = Force!             !v    %218.0, e331.1   <val?_>
  lgl$#-          %218.2 = IsType                   %218.1 isA val?+
  void                    Branch                   %218.2 -> BB577 (if true) | BB578 (if false)
BB217   <- [216]
  (cls|spec|blt)  %217.0 = LdFun              !v    names, e331.1
  fs              %217.1 = FrameState         R     0x5638c6adad00+6011: [%559.1, <blt length>, %217.0], env=e331.1
  void                    Deopt              !v    %217.1, DeadCall@0x5638bfa02a10[Call#153], %217.0   !
BB563   <- [96]
  val?+           %563.0 = CastType           d     dn %96.2   <val?_>
  void                    Branch                   %96.9 -> BB565 (if true) | BB566 (if false)
BB564   <- [96]
  void                    Nop                !     
  val?            %564.1 = %96.2
  dr              %564.2 = Typecheck@0x5638bfa02a10[Type#293]
  goto BB97
BB573   <- [567]
  val?^ | miss    %573.0 = LdVar              eR    attributes, e331.1
  lgl$#-          %573.1 = Identical                <blt attributes>, %573.0   <true>
  void                    Branch                   %573.1 -> BB575 (if true) | BB576 (if false)
BB574   <- [567]
  void                    Nop                !     
  lgl$#-          %574.1 = %567.3
  dr              %574.2 = DeadBranchReached@0x5638bfa02a10[Test#35]
  goto BB158
BB577   <- [218]
  val?+           %577.0 = CastType           d     dn %218.1   <val?_>
  val+            %577.1 = CallSafeBuiltin    wed   names(%577.0)    <val?_>
  real$-          %577.2 = CallSafeBuiltin    wed   length(%577.1)    <val?_>
  lgl$-           %577.3 = AsLogical                %577.2
  lgl$-           %577.4 = LAnd                     %559.1, %577.3
  lgl$-           %577.5 = %577.4
  goto BB221
BB578   <- [218]
  fs              %578.0 = FrameState         R     0x5638c6adad00+6052: [%559.1, <blt length>, <blt names>, %218.1], env=e331.1
  void                    Deopt              !v    %578.0, Typecheck@0x5638bfa02a10[Type#349], %218.1   !
BB565   <- [563]
  val?+           %565.0 = CastType           d     dn %96.4   <val?_>
  void                    Branch                   %96.7 -> BB569 (if true) | BB570 (if false)
BB566   <- [563]
  void                    Nop                !     
  val?            %566.1 = %96.4
  dr              %566.2 = Typecheck@0x5638bfa02a10[Type#294]
  goto BB97
BB97   <- [564, 566, 570]
  val?^ | miss    %97.0 = Phi                      %564.1:BB564, %566.1:BB566, %570.1:BB570
  val?^ | miss    %97.1 = %97.0
  dr              %97.2 = Phi                      %564.2:BB564, %566.2:BB566, %570.2:BB570
  dr              %97.3 = %97.2
  fs              %97.4 = FrameState         R     0x5638c6adad00+4935: [%45.5, %45.6, %46.2, %96.2, %96.4, %96.6], env=e331.1
  void                    Deopt              !v    %97.4, %97.3, %97.1   !
BB575   <- [573]
  val?^ | miss    %575.0 = LdVar              eR    prototype, e331.1
  val?            %575.1 = Force!<value>      !v    %575.0, e331.1   <(real|other)->
  val?            %575.2 = CallBuiltin        !v    attributes(%575.1) e331.1   <nil->
  lgl$#-          %575.3 = IsType                   %575.2 isA val?-
  void                    Branch                   %575.3 -> BB579 (if true) | BB580 (if false)
BB576   <- [573]
  void                    Nop                !     
  lgl$#-          %576.1 = %573.1
  dr              %576.2 = DeadBranchReached@0x5638bfa02a10[Test#36]
  goto BB158
BB158   <- [574, 576]
  val?^ | miss    %158.0 = Phi                      %574.1:BB574, %576.1:BB576
  val?^ | miss    %158.1 = %158.0
  dr              %158.2 = Phi                      %574.2:BB574, %576.2:BB576
  dr              %158.3 = %158.2
  fs              %158.4 = FrameState         R     0x5638c6adad00+7088: [], env=e331.1
  void                    Deopt              !v    %158.4, %158.3, %158.1   !
BB569   <- [565]
  val?+           %569.0 = CastType           d     dn %96.6   <val?_>
  val?+           %569.1 = Subassign1_1D      wed   %563.0, %565.0, %569.0, elided
  void                    StVar              lW    allProps, %569.1, e331.1
  goto BB93
BB570   <- [565]
  void                    Nop                !     
  val?            %570.1 = %96.6
  dr              %570.2 = Typecheck@0x5638bfa02a10[Type#295]
  goto BB97
BB579   <- [575]
  val?-           %579.0 = CastType           d     dn %575.2   <nil->
  val+            %579.1 = CallSafeBuiltin    wed   names(%579.0)    <nil->
  void                    StVar              lW    nm, %579.1, e331.1
  val?^ | miss    %579.3 = LdVar              eR    seq_along, e331.1
  lgl$#-          %579.4 = Identical                <blt seq_along>, %579.3   <true>
  void                    Branch                   %579.4 -> BB585 (if true) | BB586 (if false)
BB580   <- [575]
  fs              %580.0 = FrameState         R     0x5638c6adad00+7239: [<blt names>, %575.2], env=e331.1
  void                    Deopt              !v    %580.0, Typecheck@0x5638bfa02a10[Type#415], %575.2   !
BB585   <- [579]
  val?^ | miss    %585.0 = LdVar              eR    what, e331.1
  lgl$#-          %585.1 = IsType                   %585.0 isA val?~- | miss
  void                    Branch                   %585.1 -> BB587 (if true) | BB588 (if false)
BB586   <- [579]
  void                    Nop                !     
  lgl$#-          %586.1 = %579.4
  dr              %586.2 = DeadBranchReached@0x5638bfa02a10[Test#37]
  goto BB162
BB587   <- [585]
  val?~- | miss   %587.0 = CastType           d     dn %585.0
  val?-           %587.1 = Force!<value>            %587.0,    <str->
  val?            %587.2 = CallBuiltin        !v    seq_along(%587.1) e331.1   <int->
  val?+           %587.3 = ToForSeq           e     %587.2
  int$-           %587.4 = Length                   %587.3
  int$-           %587.5 = Inc                      0L
  lgl$-           %587.6 = Lt                 d     %587.4, %587.5, elided   <false>
  lgl$#-          %587.7 = Identical                %587.6, true
  void                    Branch                   %587.7 -> BB590 (if true) | BB589 (if false)
BB588   <- [585]
  void                    Nop                !     
  val?^ | miss    %588.1 = %585.0
  dr              %588.2 = Typecheck@0x5638bfa02a10[Type#418]
  goto BB162
BB162   <- [586, 588]
  val?^ | miss    %162.0 = Phi                      %586.1:BB586, %588.1:BB588
  val?^ | miss    %162.1 = %162.0
  dr              %162.2 = Phi                      %586.2:BB586, %588.2:BB588
  dr              %162.3 = %162.2
  fs              %162.4 = FrameState         R     0x5638c6adad00+7275: [], env=e331.1
  void                    Deopt              !v    %162.4, %162.3, %162.1   !
BB590   <- [587]
  fs              %590.0 = FrameState         R     0x5638c6adad00+7366: [%587.2], env=e331.1
  void                    Deopt              !v    %590.0, DeadBranchReached@0x5638bfa02a10[Test#38], %587.7   !
BB589   <- [587]
  val?            %589.0 = Extract2_1D        wed   %587.3, %587.5, elided   <int$->
  lgl$#-          %589.1 = IsType                   %589.0 isA int$-
  void                    Branch                   %589.1 -> BB591 (if true) | BB592 (if false)
BB591   <- [589]
  int$-           %591.0 = CastType           d     dn %589.0
  void                    StVar              lW    i, %591.0, e331.1
  val?^ | miss    %591.2 = LdVar              eR    el, e331.1
  lgl$#-          %591.3 = Identical                %591.2, function(object, where) <(rir::DispatchTable*)|...
  void                    Branch                   %591.3 -> BB593 (if true) | BB594 (if false)
BB592   <- [589]
  fs              %592.0 = FrameState         R     0x5638c6adad00+7402: [%587.3, %587.4, %587.5, %589.0], env=e331.1
  void                    Deopt              !v    %592.0, Typecheck@0x5638bfa02a10[Type#421], %589.0   !
BB593   <- [591]
  val?^ | miss    %593.0 = LdVar              eR    what, e331.1
  lgl$#-          %593.1 = IsType                   %593.0 isA val?~- | miss
  void                    Branch                   %593.1 -> BB595 (if true) | BB596 (if false)
BB594   <- [591]
  void                    Nop                !     
  val?^ | miss    %594.1 = %591.2
  dr              %594.2 = CallTarget@0x5638bfa02a10[Call#183]
  goto BB168
BB595   <- [593]
  val?~- | miss   %595.0 = CastType           d     dn %593.0
  val?-           %595.1 = Force!<value>            %595.0,    <str->
  lgl$#-          %595.2 = IsType                   %595.1 isA val+   <true>
  void                    Branch                   %595.2 -> BB597 (if true) | BB598 (if false)
BB596   <- [593]
  void                    Nop                !     
  val?^ | miss    %596.1 = %593.0
  dr              %596.2 = Typecheck@0x5638bfa02a10[Type#420]
  goto BB168
BB168   <- [594, 596, 598]
  val?^ | miss    %168.0 = Phi                      %594.1:BB594, %596.1:BB596, %598.1:BB598
  val?^ | miss    %168.1 = %168.0
  dr              %168.2 = Phi                      %594.2:BB594, %596.2:BB596, %598.2:BB598
  dr              %168.3 = %168.2
  fs              %168.4 = FrameState         R     0x5638c6adad00+7411: [%587.3, %587.4, %587.5], env=e331.1
  void                    Deopt              !v    %168.4, %168.3, %168.1   !
BB597   <- [595]
  val?            %597.0 = Extract1_1D        wed   %595.1, %591.0, elided   <(str|vec)$+>
  lgl$#-          %597.1 = IsType                   %597.0 isA val+   <true>
  lgl$#-          %597.2 = IsType                   %597.0 isA val?+
  void                    Branch                   %597.1 -> BB599 (if true) | BB600 (if false)
BB598   <- [595]
  void                    Nop                !     
  lgl$#-          %598.1 = %595.2
  dr              %598.2 = DeadBranchReached@0x5638c640b418[Test#0]
  goto BB168
BB599   <- [597]
  void                    Branch                   %597.2 -> BB601 (if true) | BB602 (if false)
BB600   <- [597]
  void                    Nop                !     
  lgl$#-          %600.1 = %597.1
  dr              %600.2 = DeadBranchReached@0x5638c640b418[Test#1]
  goto BB170
BB601   <- [599]
  val?+           %601.0 = CastType           d     dn %597.0   <(str|vec)$+>
  val?            %601.1 = Extract2_1D        wed   %601.0, 1L, elided   <str$->
  void                    StVar              lW    propName, %601.1, e331.1
  val?^ | miss    %601.3 = LdVar              eR    identical, e331.1
  lgl$#-          %601.4 = Identical                %601.3, function(x, y, num.eq=TRUE, single.NA=TRUE, at|...
  void                    Branch                   %601.4 -> BB603 (if true) | BB604 (if false)
BB602   <- [599]
  void                    Nop                !     
  val?            %602.1 = %597.0
  dr              %602.2 = Typecheck@0x5638c640b418[Type#3]
  goto BB170
BB170   <- [600, 602]
  val?^ | miss    %170.0 = Phi                      %600.1:BB600, %602.1:BB602
  val?^ | miss    %170.1 = %170.0
  dr              %170.2 = Phi                      %600.2:BB600, %602.2:BB602
  dr              %170.3 = %170.2
  fs              %170.4 = FrameState         R     0x5638c6adad00+7448: [%587.3, %587.4, %587.5], env=e331.1
  prom-           %170.5 = MkArg                    %591.0, reconcilePropertiesAndPrototype[0x5638c44fa010]_p27 (!refl), e331.1
  val?~           %170.6 = CastType                 up %170.5
  prom-           %170.7 = MkArg                    %595.1, reconcilePropertiesAndPrototype[0x5638c44fa010]_p26 (!refl), e331.1
  val?~           %170.8 = CastType                 up %170.7
  env             e170.9 = (MkEnv)            l     where=%170.6, object=%170.8, parent=<env 0x5638ba074378>, context 0
  fs              %170.10 = FrameState         R     0x5638c6294030+60: [%597.0], env=e170.9, next=%170.4
  void                    Deopt              !v    %170.10, %170.3, %170.1   !
BB603   <- [601]
  prom-           %603.0 = MkArg                    unboundValue, reconcilePropertiesAndPrototype[0x5638c44fa010]_p28 (!refl), e331.1
  ct              %603.1 = PushContext        lCL   %603.0, ".Data", identical(propName, ".Data"), function(x, y, num.eq=TRUE, single.NA=TRUE, at|..., e331.1
  val?^           %603.2 = CastType                 up %603.0
  env             e603.3 = MkEnv              l     x=%603.2, y=".Data", num.eq(miss)=true, single.NA(miss)=true, attrib.as.set(miss)=true, ignore.bytecode(miss)=true, ignore.environment(miss)=false, ignore.srcref(miss)=true, parent=R_BaseNamespace, context 1
  val?            %603.4 = CallBuiltin        !v    identical(%601.1, ".Data", true, true, true, true, false, true) e603.3
  val?            %603.5 = PopContext         C     %603.4, %603.1   <lgl$->
  lgl$#-          %603.6 = IsType                   %603.5 isA lgl$-
  void                    Branch                   %603.6 -> BB605 (if true) | BB606 (if false)
BB604   <- [601]
  fs              %604.0 = FrameState         R     0x5638c6adad00+7462: [%587.3, %587.4, %587.5], env=e331.1
  void                    Deopt              !v    %604.0, CallTarget@0x5638bfa02a10[Call#184], %601.3   !
BB605   <- [603]
  lgl$-           %605.0 = CastType           d     dn %603.5
  lgl$-           %605.1 = Not                d     %605.0, elided
  lgl$-           %605.2 = AsLogical                %605.1
  lgl$#-          %605.3 = Identical                %605.2, false
  void                    Branch                   %605.3 -> BB205 (if true) | BB176 (if false)
BB606   <- [603]
  void                    Nop                !     
  val?            %606.1 = %603.5
  dr              %606.2 = Typecheck@0x5638bfa02a10[Type#424]
  goto BB174
BB205   <- [605]
  void                    Nop                !     
  lgl$-           %205.1 = %605.2
  goto BB179
BB176   <- [605]
  val?^ | miss    %176.0 = LdVar              eR    %in%, e331.1
  lgl$#-          %176.1 = Identical                %176.0, function(x, table) <(rir::DispatchTable*)0x563|...
  void                    Branch                   %176.1 -> BB607 (if true) | BB608 (if false)
BB174   <- [606, 608]
  val?^ | miss    %174.0 = Phi                      %606.1:BB606, %608.1:BB608
  val?^ | miss    %174.1 = %174.0
  dr              %174.2 = Phi                      %606.2:BB606, %608.2:BB608
  dr              %174.3 = %174.2
  fs              %174.4 = FrameState         R     0x5638c6adad00+7499: [%587.3, %587.4, %587.5, %603.5], env=e331.1
  void                    Deopt              !v    %174.4, %174.3, %174.1   !
BB179   <- [205, 609]
  lgl$-           %179.0 = Phi                      %609.4:BB609, %205.1:BB205
  lgl$-           %179.1 = %179.0
  lgl$#-          %179.2 = CheckTrueFalse     e     %179.1
  void                    Branch                   %179.2 -> BB204 (if true) | BB180 (if false)
BB607   <- [176]
  prom-           %607.0 = MkArg                    unboundValue, reconcilePropertiesAndPrototype[0x5638c44fa010]_p30, e331.1
  val?^ | miss    %607.1 = LdVar              eR    propName, e331.1
  val?            %607.2 = Force!<value>      !v    %607.1, e331.1   <str$->
  prom-           %607.3 = MkArg                    %607.2, reconcilePropertiesAndPrototype[0x5638c44fa010]_p29 (!refl), 
  val?            %607.4 = StaticCall         !v    %in%[0x5638bcd02a00](%607.3, %607.0) e331.1   <lgl$->
  lgl$#-          %607.5 = IsType                   %607.4 isA lgl$-
  void                    Branch                   %607.5 -> BB609 (if true) | BB610 (if false)
BB608   <- [176]
  void                    Nop                !     
  val?^ | miss    %608.1 = %176.0
  dr              %608.2 = CallTarget@0x5638bfa02a10[Call#185]
  goto BB174
BB204   <- [179]
  (cls|spec|blt)  %204.0 = LdFun              !v    <-, <0x5638b9a61da8>, e331.1
  prom-           %204.1 = MkArg                    unboundValue, reconcilePropertiesAndPrototype[0x5638c44fa010]_p44, e331.1
  prom-           %204.2 = MkArg                    unboundValue, reconcilePropertiesAndPrototype[0x5638c44fa010]_p47, e331.1
  val?            %204.3 = Call               !v    %204.0(%204.1, %204.2) e331.1
  int$-           %204.4 = %587.5
  goto BB181
BB180   <- [179]
  void                    Nop                !     
  int$-           %180.1 = %587.5
  goto BB181
BB609   <- [607]
  lgl$-           %609.0 = CastType           d     dn %607.4
  lgl$-           %609.1 = Not                d     %609.0, elided
  lgl$-           %609.2 = AsLogical                %609.1
  lgl$-           %609.3 = LAnd                     %605.2, %609.2
  lgl$-           %609.4 = %609.3
  goto BB179
BB610   <- [607]
  fs              %610.0 = FrameState         R     0x5638c6adad00+7549: [%587.3, %587.4, %587.5, %605.2, %607.4], env=e331.1
  void                    Deopt              !v    %610.0, Typecheck@0x5638bfa02a10[Type#427], %607.4   !
BB181   <- [180, 204, 200]
  int$-           %181.0 = Phi                      %180.1:BB180, %200.1:BB200, %204.4:BB204
  int$-           %181.1 = %181.0
  int$-           %181.2 = Inc                      %181.1
  lgl$-           %181.3 = Lt                 d     %587.4, %181.2, elided
  lgl$#-          %181.4 = Identical                %181.3, true
  void                    Branch                   %181.4 -> BB203 (if true) | BB184 (if false)
BB203   <- [181]
  val?^ | miss    %203.0 = LdVar              eR    list, e331.1
  lgl$#-          %203.1 = Identical                <blt list>, %203.0   <true>
  void                    Branch                   %203.1 -> BB611 (if true) | BB612 (if false)
BB184   <- [181]
  val?            %184.0 = Extract2_1D        wed   %587.3, %181.2, elided   <int$->
  lgl$#-          %184.1 = IsType                   %184.0 isA int$-
  void                    Branch                   %184.1 -> BB613 (if true) | BB614 (if false)
BB611   <- [203]
  val?^ | miss    %611.0 = LdVar              eR    properties, e331.1
  val?            %611.1 = Force!<wrapped>    !v    %611.0, e331.1   <vec+>
  val?^ | miss    %611.2 = LdVar              eR    prototype, e331.1
  void                    Visible            v     
  val?            %611.4 = Force!<value>      !     %611.2, e331.1   <(real|other)+>
  val?            %611.5 = NamedCall          !     <blt list>(properties=%611.1, prototype=%611.4) e331.1   <vec+>
  void                    Return             l     %611.5
BB612   <- [203]
  fs              %612.0 = FrameState         R     0x5638c6adad00+7606: [%587.3, %587.4, %181.1], env=e331.1
  void                    Deopt              !v    %612.0, DeadBranchReached@0x5638bfa02a10[Test#39], %203.1   !
BB613   <- [184]
  int$-           %613.0 = CastType           d     dn %184.0
  void                    StVar              lW    i, %613.0, e331.1
  val?^ | miss    %613.2 = LdVar              eR    el, e331.1
  lgl$#-          %613.3 = Identical                %613.2, function(object, where) <(rir::DispatchTable*)|...
  void                    Branch                   %613.3 -> BB615 (if true) | BB616 (if false)
BB614   <- [184]
  fs              %614.0 = FrameState         R     0x5638c6adad00+7626: [%587.3, %587.4, %181.2, %184.0], env=e331.1
  void                    Deopt              !v    %614.0, Typecheck@0x5638bfa02a10[Type#437], %184.0   !
BB615   <- [613]
  val?^ | miss    %615.0 = LdVar              eR    what, e331.1
  lgl$#-          %615.1 = IsType                   %615.0 isA val?~- | miss
  void                    Branch                   %615.1 -> BB617 (if true) | BB618 (if false)
BB616   <- [613]
  void                    Nop                !     
  val?^ | miss    %616.1 = %613.2
  dr              %616.2 = CallTarget@0x5638bfa02a10[Call#190]
  goto BB187
BB617   <- [615]
  val?~- | miss   %617.0 = CastType           d     dn %615.0
  val?-           %617.1 = Force!<value>            %617.0,    <str->
  lgl$#-          %617.2 = IsType                   %617.1 isA val+   <true>
  void                    Branch                   %617.2 -> BB619 (if true) | BB620 (if false)
BB618   <- [615]
  void                    Nop                !     
  val?^ | miss    %618.1 = %615.0
  dr              %618.2 = Typecheck@0x5638bfa02a10[Type#436]
  goto BB187
BB187   <- [616, 618, 620]
  val?^ | miss    %187.0 = Phi                      %616.1:BB616, %618.1:BB618, %620.1:BB620
  val?^ | miss    %187.1 = %187.0
  dr              %187.2 = Phi                      %616.2:BB616, %618.2:BB618, %620.2:BB620
  dr              %187.3 = %187.2
  fs              %187.4 = FrameState         R     0x5638c6adad00+7635: [%587.3, %587.4, %181.2], env=e331.1
  void                    Deopt              !v    %187.4, %187.3, %187.1   !
BB619   <- [617]
  val?            %619.0 = Extract1_1D        wed   %617.1, %613.0, elided   <(str|vec)$+>
  lgl$#-          %619.1 = IsType                   %619.0 isA val+   <true>
  lgl$#-          %619.2 = IsType                   %619.0 isA val?+
  void                    Branch                   %619.1 -> BB621 (if true) | BB622 (if false)
BB620   <- [617]
  void                    Nop                !     
  lgl$#-          %620.1 = %617.2
  dr              %620.2 = DeadBranchReached@0x5638c640b418[Test#0]
  goto BB187
BB621   <- [619]
  void                    Branch                   %619.2 -> BB623 (if true) | BB624 (if false)
BB622   <- [619]
  void                    Nop                !     
  lgl$#-          %622.1 = %619.1
  dr              %622.2 = DeadBranchReached@0x5638c640b418[Test#1]
  goto BB189
BB623   <- [621]
  val?+           %623.0 = CastType           d     dn %619.0   <(str|vec)$+>
  val?            %623.1 = Extract2_1D        wed   %623.0, 1L, elided   <str$->
  void                    StVar              lW    propName, %623.1, e331.1
  val?^ | miss    %623.3 = LdVar              eR    identical, e331.1
  lgl$#-          %623.4 = Identical                %623.3, function(x, y, num.eq=TRUE, single.NA=TRUE, at|...
  void                    Branch                   %623.4 -> BB625 (if true) | BB626 (if false)
BB624   <- [621]
  void                    Nop                !     
  val?            %624.1 = %619.0
  dr              %624.2 = Typecheck@0x5638c640b418[Type#3]
  goto BB189
BB189   <- [622, 624]
  val?^ | miss    %189.0 = Phi                      %622.1:BB622, %624.1:BB624
  val?^ | miss    %189.1 = %189.0
  dr              %189.2 = Phi                      %622.2:BB622, %624.2:BB624
  dr              %189.3 = %189.2
  prom-           %189.4 = MkArg                    %613.0, reconcilePropertiesAndPrototype[0x5638c44fa010]_p32 (!refl), e331.1
  val?~           %189.5 = CastType                 up %189.4
  prom-           %189.6 = MkArg                    %617.1, reconcilePropertiesAndPrototype[0x5638c44fa010]_p31 (!refl), e331.1
  val?~           %189.7 = CastType                 up %189.6
  fs              %189.8 = FrameState         R     0x5638c6adad00+7672: [%587.3, %587.4, %181.2], env=e331.1
  env             e189.9 = (MkEnv)            l     where=%189.5, object=%189.7, parent=<env 0x5638ba074378>, context 0
  fs              %189.10 = FrameState         R     0x5638c6294030+60: [%619.0], env=e189.9, next=%189.8
  void                    Deopt              !v    %189.10, %189.3, %189.1   !
BB625   <- [623]
  prom-           %625.0 = MkArg                    unboundValue, reconcilePropertiesAndPrototype[0x5638c44fa010]_p33 (!refl), e331.1
  ct              %625.1 = PushContext        lCL   %625.0, ".Data", identical(propName, ".Data"), function(x, y, num.eq=TRUE, single.NA=TRUE, at|..., e331.1
  val?^           %625.2 = CastType                 up %625.0
  env             e625.3 = MkEnv              l     x=%625.2, y=".Data", num.eq(miss)=true, single.NA(miss)=true, attrib.as.set(miss)=true, ignore.bytecode(miss)=true, ignore.environment(miss)=false, ignore.srcref(miss)=true, parent=R_BaseNamespace, context 1
  val?            %625.4 = Force!<lazy>       !vr   %625.2, e625.3   <val?>
  val?^ | miss    %625.5 = LdVar              eR    y, e625.3
  val?            %625.6 = Force!<lazy>       !v    %625.5, e625.3   <val?>
  val?^ | miss    %625.7 = LdVar              eR    num.eq, e625.3
  val?            %625.8 = Force!<lazy>       !v    %625.7, e625.3   <lgl$->
  val?^ | miss    %625.9 = LdVar              eR    single.NA, e625.3
  val?            %625.10 = Force!<lazy>       !v    %625.9, e625.3   <lgl$->
  val?^ | miss    %625.11 = LdVar              eR    attrib.as.set, e625.3
  val?            %625.12 = Force!<lazy>       !v    %625.11, e625.3   <lgl$->
  val?^ | miss    %625.13 = LdVar              eR    ignore.bytecode, e625.3
  val?            %625.14 = Force!<lazy>       !v    %625.13, e625.3   <lgl$->
  val?^ | miss    %625.15 = LdVar              eR    ignore.environment, e625.3
  val?            %625.16 = Force!<lazy>       !v    %625.15, e625.3   <lgl$->
  val?^ | miss    %625.17 = LdVar              eR    ignore.srcref, e625.3
  val?            %625.18 = Force!<lazy>       !v    %625.17, e625.3   <lgl$->
  val?            %625.19 = CallBuiltin        !v    identical(%625.4, %625.6, %625.8, %625.10, %625.12, %625.14, %625.16, %625.18) e625.3
  val?            %625.20 = PopContext         C     %625.19, %625.1   <lgl$->
  lgl$#-          %625.21 = IsType                   %625.20 isA lgl$-
  void                    Branch                   %625.21 -> BB627 (if true) | BB628 (if false)
BB626   <- [623]
  fs              %626.0 = FrameState         R     0x5638c6adad00+7686: [%587.3, %587.4, %181.2], env=e331.1
  void                    Deopt              !v    %626.0, CallTarget@0x5638bfa02a10[Call#191], %623.3   !
BB627   <- [625]
  lgl$-           %627.0 = CastType           d     dn %625.20
  lgl$-           %627.1 = Not                d     %627.0, elided
  lgl$-           %627.2 = AsLogical                %627.1
  lgl$#-          %627.3 = Identical                %627.2, false
  void                    Branch                   %627.3 -> BB202 (if true) | BB195 (if false)
BB628   <- [625]
  void                    Nop                !     
  val?            %628.1 = %625.20
  dr              %628.2 = Typecheck@0x5638bfa02a10[Type#440]
  goto BB193
BB202   <- [627]
  void                    Nop                !     
  lgl$-           %202.1 = %627.2
  goto BB198
BB195   <- [627]
  val?^ | miss    %195.0 = LdVar              eR    %in%, e331.1
  lgl$#-          %195.1 = Identical                %195.0, function(x, table) <(rir::DispatchTable*)0x563|...
  void                    Branch                   %195.1 -> BB629 (if true) | BB630 (if false)
BB193   <- [628, 630]
  val?^ | miss    %193.0 = Phi                      %628.1:BB628, %630.1:BB630
  val?^ | miss    %193.1 = %193.0
  dr              %193.2 = Phi                      %628.2:BB628, %630.2:BB630
  dr              %193.3 = %193.2
  fs              %193.4 = FrameState         R     0x5638c6adad00+7723: [%587.3, %587.4, %181.2, %625.20], env=e331.1
  void                    Deopt              !v    %193.4, %193.3, %193.1   !
BB198   <- [202, 631]
  lgl$-           %198.0 = Phi                      %631.4:BB631, %202.1:BB202
  lgl$-           %198.1 = %198.0
  lgl$#-          %198.2 = CheckTrueFalse     e     %198.1
  void                    Branch                   %198.2 -> BB201 (if true) | BB199 (if false)
BB629   <- [195]
  prom-           %629.0 = MkArg                    unboundValue, reconcilePropertiesAndPrototype[0x5638c44fa010]_p35, e331.1
  val?^ | miss    %629.1 = LdVar              eR    propName, e331.1
  val?            %629.2 = Force!<value>      !v    %629.1, e331.1   <str$->
  prom-           %629.3 = MkArg                    %629.2, reconcilePropertiesAndPrototype[0x5638c44fa010]_p34 (!refl), 
  val?            %629.4 = StaticCall         !v    %in%[0x5638bcd02a00](%629.3, %629.0) e331.1   <lgl$->
  lgl$#-          %629.5 = IsType                   %629.4 isA lgl$-
  void                    Branch                   %629.5 -> BB631 (if true) | BB632 (if false)
BB630   <- [195]
  void                    Nop                !     
  val?^ | miss    %630.1 = %195.0
  dr              %630.2 = CallTarget@0x5638bfa02a10[Call#192]
  goto BB193
BB201   <- [198]
  (cls|spec|blt)  %201.0 = LdFun              !v    <-, <0x5638b9a61da8>, e331.1
  prom-           %201.1 = MkArg                    unboundValue, reconcilePropertiesAndPrototype[0x5638c44fa010]_p36, e331.1
  prom-           %201.2 = MkArg                    unboundValue, reconcilePropertiesAndPrototype[0x5638c44fa010]_p39, e331.1
  val?            %201.3 = Call               !v    %201.0(%201.1, %201.2) e331.1
  goto BB200
BB199   <- [198]
  void                    Nop                !     
  goto BB200
BB631   <- [629]
  lgl$-           %631.0 = CastType           d     dn %629.4
  lgl$-           %631.1 = Not                d     %631.0, elided
  lgl$-           %631.2 = AsLogical                %631.1
  lgl$-           %631.3 = LAnd                     %627.2, %631.2
  lgl$-           %631.4 = %631.3
  goto BB198
BB632   <- [629]
  fs              %632.0 = FrameState         R     0x5638c6adad00+7773: [%587.3, %587.4, %181.2, %627.2, %629.4], env=e331.1
  void                    Deopt              !v    %632.0, Typecheck@0x5638bfa02a10[Type#443], %629.4   !
BB200   <- [199, 201]
  void                    Nop                !     
  int$-           %200.1 = %181.2
  goto BB181
Prom 0:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     allNames, <0x5638c5a06670>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, reconcilePropertiesAndPrototype[0x5638c44fa010]_p1, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <str->
  void                    Return             l     %0.3
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    properties, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    properties, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 3:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     class, <0x5638b9a6d748>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, reconcilePropertiesAndPrototype[0x5638c44fa010]_p4, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <str$->
  void                    Return             l     %0.3
Prom 4:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    prototype, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <nil->
  void                    Return             l     %0.3
Prom 5:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 6:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    cl, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 7:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 8:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    clDef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <other>
  void                    Return             l     %0.3
Prom 9:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    clDef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <other>
  void                    Return             l     %0.3
Prom 10:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    theseSlots, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <nil->
  void                    Return             l     %0.3
Prom 11:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     names, <0x5638b9a6d470>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, reconcilePropertiesAndPrototype[0x5638c44fa010]_p12, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <str$->
  void                    Return             l     %0.3
Prom 12:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    allProps, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <vec$+>
  void                    Return             l     %0.3
Prom 13:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    theseSlots, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 14:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     names, <0x5638b9a6d470>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, reconcilePropertiesAndPrototype[0x5638c44fa010]_p15, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <nil->
  void                    Return             l     %0.3
Prom 15:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    prototype, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <(nil|real)->
  void                    Return             l     %0.3
Prom 16:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     names, <0x5638b9a6d470>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, reconcilePropertiesAndPrototype[0x5638c44fa010]_p17, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <str->
  void                    Return             l     %0.3
Prom 17:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    allProps, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 18:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    dataPartClass, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 19:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    dataPartDef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <other>
  void                    Return             l     %0.3
Prom 20:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    prototypeClass, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <other>
  void                    Return             l     %0.3
Prom 21:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    prototypeClass, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <other>
  void                    Return             l     %0.3
Prom 22:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    dataPartClass, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 23:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    prototypeClass, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <other>
  void                    Return             l     %0.3
Prom 24:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     attributes, <0x5638b9a6d1d0>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, reconcilePropertiesAndPrototype[0x5638c44fa010]_p25, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <nil->
  void                    Return             l     %0.3
Prom 25:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    prototype, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <(real|other)->
  void                    Return             l     %0.3
Prom 26:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    what, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 27:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    i, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <int$->
  void                    Return             l     %0.3
Prom 28:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    propName, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 29:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    propName, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 30:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    nm, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <nil->
  void                    Return             l     %0.3
Prom 31:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    what, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 32:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    i, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <int$->
  void                    Return             l     %0.3
Prom 33:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    propName, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 34:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    propName, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 35:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    nm, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <nil->
  void                    Return             l     %0.3
Prom 36:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     slot, e0.0
  prom-           %0.2  = MkArg                    unboundValue, reconcilePropertiesAndPrototype[0x5638c44fa010]_p37, e0.0
  prom-           %0.3  = MkArg                    unboundValue, reconcilePropertiesAndPrototype[0x5638c44fa010]_p38, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3, false) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 37:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    prototype, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 38:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    propName, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 39:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     tryNew, e0.0
  prom-           %0.2  = MkArg                    unboundValue, reconcilePropertiesAndPrototype[0x5638c44fa010]_p40, e0.0
  prom-           %0.3  = MkArg                    unboundValue, reconcilePropertiesAndPrototype[0x5638c44fa010]_p43, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 40:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     el, e0.0
  prom-           %0.2  = MkArg                    unboundValue, reconcilePropertiesAndPrototype[0x5638c44fa010]_p41, e0.0
  prom-           %0.3  = MkArg                    unboundValue, reconcilePropertiesAndPrototype[0x5638c44fa010]_p42, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 41:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    props, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 42:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    i, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 43:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 44:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     slot, e0.0
  prom-           %0.2  = MkArg                    unboundValue, reconcilePropertiesAndPrototype[0x5638c44fa010]_p45, e0.0
  prom-           %0.3  = MkArg                    unboundValue, reconcilePropertiesAndPrototype[0x5638c44fa010]_p46, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3, false) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 45:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    prototype, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 46:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    propName, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 47:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     tryNew, e0.0
  prom-           %0.2  = MkArg                    unboundValue, reconcilePropertiesAndPrototype[0x5638c44fa010]_p48, e0.0
  prom-           %0.3  = MkArg                    unboundValue, reconcilePropertiesAndPrototype[0x5638c44fa010]_p51, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 48:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     el, e0.0
  prom-           %0.2  = MkArg                    unboundValue, reconcilePropertiesAndPrototype[0x5638c44fa010]_p49, e0.0
  prom-           %0.3  = MkArg                    unboundValue, reconcilePropertiesAndPrototype[0x5638c44fa010]_p50, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 49:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    props, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 50:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    i, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 51:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 52:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    prototypeClass, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <other>
  void                    Return             l     %0.3
Prom 53:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    dataPartClass, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 54:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    .BasicClasses, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 55:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    dataPartDef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 56:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    slots, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 57:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    prototypeClass, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <other>
  void                    Return             l     %0.3
Prom 58:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    cl, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 59:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 60:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    clDef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <other>
  void                    Return             l     %0.3
Prom 61:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 62:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    dataPartClass, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <nil->
  void                    Return             l     %0.3
Prom 63:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    cl, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 64:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 65:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    clDef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <other>
  void                    Return             l     %0.3
Prom 66:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 67:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    dataPartClass, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 68:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    slots, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 69:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     class, <0x5638b9a6d748>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, reconcilePropertiesAndPrototype[0x5638c44fa010]_p70, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <str$->
  void                    Return             l     %0.3
Prom 70:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    prototype, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <real->
  void                    Return             l     %0.3
Prom 71:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 72:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    clDef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 73:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    prototype, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 74:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    clDef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 75:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    prototype, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 76:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    protoClass, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 77:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    .AbnormalTypes, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 78:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    clDef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 79:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    prototype, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 80:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    protoClass, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 81:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    names, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 82:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    x, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <other>
  void                    Return             l     %0.3
Prom 83:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    classDef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 84:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    slots, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 86:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     names, <0x5638b9a6d470>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, reconcilePropertiesAndPrototype[0x5638c44fa010]_p87, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <nil->
  void                    Return             l     %0.3
Prom 87:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, <0x5638b9a6cbd8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, reconcilePropertiesAndPrototype[0x5638c44fa010]_p88, e0.0
  prom-           %0.3  = MkArg                    unboundValue, reconcilePropertiesAndPrototype[0x5638c44fa010]_p89, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <vec->
  void                    Return             l     %0.4
Prom 88:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    classDef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 89:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    slots, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 92:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     length, <0x5638b9a6da90>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, reconcilePropertiesAndPrototype[0x5638c44fa010]_p93, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <int$->
  void                    Return             l     %0.3
Prom 93:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    x, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <(nil|vec)->
  void                    Return             l     %0.3
Prom 112:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    object, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <(str|other)>
  void                    Return             l     %0.3
Prom 114:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    name, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 115:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     names, <0x5638b9a6d470>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, reconcilePropertiesAndPrototype[0x5638c44fa010]_p116, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <(nil|str)->
  void                    Return             l     %0.3
Prom 116:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    x, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <(str|vec)+>
  void                    Return             l     %0.3
Prom 119:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    x, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 121:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    y, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 124:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    x, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 125:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    y, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 126:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !v    match, e0.0
  prom-           %0.2  = MkArg                    unboundValue, reconcilePropertiesAndPrototype[0x5638c44fa010]_p127, e0.0
  prom-           %0.3  = MkArg                    unboundValue, reconcilePropertiesAndPrototype[0x5638c44fa010]_p128, e0.0
  val?            %0.4  = Call               !v    %0.1(%0.2, %0.3, 0L) e0.0   <val?_>
  void                    Visible            v     
  val?            %0.6  = Eq                 !     %0.4, 0L, e0.0   <val?_>
  void                    Return             l     %0.6
Prom 127:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    x, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 128:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    y, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 129:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     length, <0x5638b9a6da90>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, reconcilePropertiesAndPrototype[0x5638c44fa010]_p130, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <int$->
  void                    Return             l     %0.3
Prom 130:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    x, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <(nil|vec)->
  void                    Return             l     %0.3

│ reconcilePropertiesAndPrototype[0x5638c44fa010]                              │
└──────────────────────────────────────────────────────────────────────────────┘
