
┌──────────────────────────────────────────────────────────────────────────────┐
│ .walkClassGraph[0x5638c5d27ed0]                                              │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;Eager1,NonRefl0,NonRefl1,NonRefl2,!Obj1,!Obj2│
│ Properties:                                                                  │
├────── Final PIR Version
.walkClassGraph[0x5638c5d27ed0]
BB0
  val?^           %0.0  = LdArg                    3
  val?^           %0.1  = LdArg                    2
  val?~+          %0.2  = LdArg                    1
  val?^           %0.3  = LdArg                    0
  val?^ | miss    %0.4  = LdVar              eR    slot, <env 0x5638ba074378>
  lgl$#-          %0.5  = Identical                %0.4, function(object, name) <(rir::DispatchTable*)0|...
  void                    Branch                   %0.5 -> BB102 (if true) | BB103 (if false)
BB102   <- [0]
  env             e102.0 = MkEnv              l     ClassDef=%0.3, slotName=%0.2, where=%0.1, conflicts=%0.0, parent=<env 0x5638ba074378>, context 1
  prom-           %102.1 = MkArg                    unboundValue, .walkClassGraph[0x5638c5d27ed0]_p0 (!refl), e102.0
  prom-           %102.2 = MkArg                    unboundValue, .walkClassGraph[0x5638c5d27ed0]_p1 (!refl), e102.0
  ct              %102.3 = PushContext        lCL   %102.1, %102.2, slot(ClassDef, slotName), function(object, name) <(rir::DispatchTable*)0|..., e102.0
  val?^           %102.4 = CastType                 up %102.2
  val?^           %102.5 = CastType                 up %102.1
  val?^ | miss    %102.6 = LdVar              eR    .Call, <env 0x5638ba074378>
  lgl$#-          %102.7 = Identical                <blt .Call>, %102.6   <true>
  void                    Branch                   %102.7 -> BB104 (if true) | BB105 (if false)
BB103   <- [0]
  env             e103.0 = (MkEnv)            l     ClassDef=%0.3, slotName=%0.2, where=%0.1, conflicts=%0.0, parent=<env 0x5638ba074378>, context 1
  fs              %103.1 = FrameState         R     0x5638c40ffa90+0: [], env=e103.0
  void                    Deopt              !v    %103.1, CallTarget@0x5638bf92c370[Call#1], %0.4
BB104   <- [102]
  val?^ | miss    %104.0 = LdVar              eR    C_R_get_slot, <env 0x5638ba074378>
  env             e104.1 = MkEnv              l     object=%102.5, name=%102.4, parent=<env 0x5638ba074378>, context 1
  val?            %104.2 = Force!<value>      !v    %104.0, e104.1   <vec>
  val?^ | miss    %104.3 = LdVar              eR    object, e104.1
  val?            %104.4 = Force!<lazy>       !v    %104.3, e104.1   <(cls|other)>
  val?^ | miss    %104.5 = LdVar              eR    name, e104.1
  val?            %104.6 = Force!<lazy>       !v    %104.5, e104.1   <str$->
  val?            %104.7 = CallBuiltin        !v    .Call(%104.2, %104.4, %104.6) e104.1   <val?+>
  val?            %104.8 = PopContext         C     %104.7, %102.3   <vec$+>
  void                    StVar              lW    ext, %104.8, e102.0
  lgl$#-          %104.10 = IsType                   %104.8 isA val?+
  val?^ | miss    %104.11 = LdVar              eR    length, e102.0
  lgl$#-          %104.12 = Identical                <blt length>, %104.11   <true>
  void                    Branch                   %104.12 -> BB106 (if true) | BB107 (if false)
BB105   <- [102]
  fs              %105.0 = FrameState         R     0x5638c40ffa90+37: [], env=e102.0
  env             e105.1 = (MkEnv)            l     object=%102.5, name=%102.4, parent=<env 0x5638ba074378>, context 1
  fs              %105.2 = FrameState         R     0x5638bed82520+17: [<blt .Call>, %102.7], env=e105.1, next=%105.0
  void                    Deopt              !v    %105.2, DeadBranchReached@0x5638c5ea7388[Test#0], %102.7   !
BB106   <- [104]
  val             %106.0 = ChkMissing         e     %104.8
  void                    Branch                   %104.10 -> BB108 (if true) | BB109 (if false)
BB107   <- [104]
  void                    Nop                !     
  lgl$#-          %107.1 = %104.12
  dr              %107.2 = DeadBranchReached@0x5638bf92c370[Test#0]
  goto BB5
BB108   <- [106]
  val?+           %108.0 = CastType           d     dn %104.8   <vec$+>
  (int|real)$-    %108.1 = CallSafeBuiltin    wed   length(%108.0)    <int$->
  lgl$#-          %108.2 = IsType                   %108.1 isA int$-
  void                    Branch                   %108.2 -> BB110 (if true) | BB111 (if false)
BB109   <- [106]
  void                    Nop                !     
  val?            %109.1 = %104.8
  dr              %109.2 = Typecheck@0x5638bf92c370[Type#3]
  goto BB5
BB5   <- [107, 109]
  val?^ | miss    %5.0  = Phi                      %107.1:BB107, %109.1:BB109
  val?^ | miss    %5.1  = %5.0
  dr              %5.2  = Phi                      %107.2:BB107, %109.2:BB109
  dr              %5.3  = %5.2
  fs              %5.4  = FrameState         R     0x5638c40ffa90+51: [], env=e102.0
  void                    Deopt              !v    %5.4, %5.3, %5.1   !
BB110   <- [108]
  int$-           %110.0 = CastType           d     dn %108.1
  lgl$-           %110.1 = Eq                 d     %110.0, 0, elided   <lgl$->
  lgl$#-          %110.2 = CheckTrueFalse     e     %110.1
  void                    Branch                   %110.2 -> BB100 (if true) | BB9 (if false)
BB111   <- [108]
  fs              %111.0 = FrameState         R     0x5638c40ffa90+142: [%108.1], env=e102.0
  void                    Deopt              !v    %111.0, Typecheck@0x5638bf92c370[Type#6], %108.1   !
BB100   <- [110]
  void                    Visible            v     
  val?+           %100.1 = %108.0
  goto BB84
BB9   <- [110]
  (cls|spec|blt)  %9.0  = LdFun              !v    @, <0x5638b9a6cbd8>, e102.0
  prom-           %9.1  = MkArg                    unboundValue, .walkClassGraph[0x5638c5d27ed0]_p2, e102.0
  prom-           %9.2  = MkArg                    unboundValue, .walkClassGraph[0x5638c5d27ed0]_p3, e102.0
  val?            %9.3  = Call               !v    %9.0(%9.1, %9.2) e102.0   <str$+>
  void                    StVar              lW    className, %9.3, e102.0
  val?^ | miss    %9.5  = LdVar              eR    identical, e102.0
  lgl$#-          %9.6  = Identical                %9.5, function(x, y, num.eq=TRUE, single.NA=TRUE, at|...
  void                    Branch                   %9.6 -> BB112 (if true) | BB113 (if false)
BB84   <- [100, 204]
  val?+           %84.0 = Phi                      %204.3:BB204, %100.1:BB100
  val?+           %84.1 = %84.0
  void                    Return             l     %84.1
BB112   <- [9]
  prom-           %112.0 = MkArg                    unboundValue, .walkClassGraph[0x5638c5d27ed0]_p4, e102.0
  ct              %112.1 = PushContext        lCL   %112.0, "contains", identical(slotName, "contains"), function(x, y, num.eq=TRUE, single.NA=TRUE, at|..., e102.0
  val?^           %112.2 = CastType                 up %112.0
  env             e112.3 = MkEnv              l     x=%112.2, y="contains", num.eq(miss)=true, single.NA(miss)=true, attrib.as.set(miss)=true, ignore.bytecode(miss)=true, ignore.environment(miss)=false, ignore.srcref(miss)=true, parent=R_BaseNamespace, context 1
  val?            %112.4 = Force!<lazy>       !vL   %112.2, e112.3   <val?>
  val?            %112.5 = CallBuiltin        !v    identical(%112.4, "contains", true, true, true, true, false, true) e112.3
  val?            %112.6 = PopContext         C     %112.5, %112.1   <lgl$->
  lgl$#-          %112.7 = IsType                   %112.6 isA lgl$-
  void                    Branch                   %112.7 -> BB114 (if true) | BB115 (if false)
BB113   <- [9]
  fs              %113.0 = FrameState         R     0x5638c40ffa90+236: [], env=e102.0
  void                    Deopt              !v    %113.0, CallTarget@0x5638bf92c370[Call#4], %9.5   !
BB114   <- [112]
  lgl$-           %114.0 = CastType           d     dn %112.6
  void                    StVar              lW    superClassCase, %114.0, e102.0
  val?^ | miss    %114.2 = LdVar              eR    names, e102.0
  lgl$#-          %114.3 = Identical                <blt names>, %114.2   <true>
  void                    Branch                   %114.3 -> BB116 (if true) | BB117 (if false)
BB115   <- [112]
  fs              %115.0 = FrameState         R     0x5638c40ffa90+273: [%112.6], env=e102.0
  void                    Deopt              !v    %115.0, Typecheck@0x5638bf92c370[Type#13], %112.6   !
BB116   <- [114]
  val?^ | miss    %116.0 = LdVar              eR    ext, e102.0
  lgl$#-          %116.1 = IsType                   %116.0 isA val?~+ | miss
  void                    Branch                   %116.1 -> BB118 (if true) | BB119 (if false)
BB117   <- [114]
  void                    Nop                !     
  lgl$#-          %117.1 = %114.3
  dr              %117.2 = DeadBranchReached@0x5638bf92c370[Test#1]
  goto BB14
BB118   <- [116]
  val?~+ | miss   %118.0 = CastType           d     dn %116.0
  val?+           %118.1 = Force!<value>            %118.0,    <vec$+>
  val+            %118.2 = CallSafeBuiltin    wed   names(%118.1)    <str$->
  void                    StVar              lW    what, %118.2, e102.0
  val?^ | miss    %118.4 = LdVar              eR    seq_along, e102.0
  lgl$#-          %118.5 = Identical                <blt seq_along>, %118.4   <true>
  void                    Branch                   %118.5 -> BB120 (if true) | BB121 (if false)
BB119   <- [116]
  void                    Nop                !     
  val?^ | miss    %119.1 = %116.0
  dr              %119.2 = Typecheck@0x5638bf92c370[Type#15]
  goto BB14
BB14   <- [117, 119]
  val?^ | miss    %14.0 = Phi                      %117.1:BB117, %119.1:BB119
  val?^ | miss    %14.1 = %14.0
  dr              %14.2 = Phi                      %117.2:BB117, %119.2:BB119
  dr              %14.3 = %14.2
  fs              %14.4 = FrameState         R     0x5638c40ffa90+287: [], env=e102.0
  void                    Deopt              !v    %14.4, %14.3, %14.1   !
BB120   <- [118]
  val?            %120.0 = CallBuiltin        !v    seq_along(%118.1) e102.0   <int$->
  lgl$#-          %120.1 = IsType                   %120.0 isA int$-
  void                    Branch                   %120.1 -> BB122 (if true) | BB123 (if false)
BB121   <- [118]
  fs              %121.0 = FrameState         R     0x5638c40ffa90+392: [], env=e102.0
  void                    Deopt              !v    %121.0, DeadBranchReached@0x5638bf92c370[Test#2], %118.5   !
BB122   <- [120]
  int$-           %122.0 = CastType           d     dn %120.0
  int$-           %122.1 = Inc                      0L
  lgl$-           %122.2 = Lt                 d     1L, %122.1, elided   <false>
  lgl$#-          %122.3 = Identical                %122.2, true
  void                    Branch                   %122.3 -> BB125 (if true) | BB124 (if false)
BB123   <- [120]
  void                    Nop                !     
  val?            %123.1 = %120.0
  dr              %123.2 = Typecheck@0x5638bf92c370[Type#19]
  goto BB18
BB125   <- [122]
  void                    Nop                !     
  lgl$#-          %125.1 = %122.3
  dr              %125.2 = DeadBranchReached@0x5638bf92c370[Test#3]
  goto BB18
BB124   <- [122]
  int$-           %124.0 = Extract2_1D        wed   %122.0, %122.1, elided
  void                    StVar              lW    i, %124.0, e102.0
  val?^ | miss    %124.2 = LdVar              eR    what, e102.0
  lgl$#-          %124.3 = IsType                   %124.2 isA val?~- | miss
  void                    Branch                   %124.3 -> BB126 (if true) | BB127 (if false)
BB18   <- [123, 125]
  val?^ | miss    %18.0 = Phi                      %123.1:BB123, %125.1:BB125
  val?^ | miss    %18.1 = %18.0
  dr              %18.2 = Phi                      %123.2:BB123, %125.2:BB125
  dr              %18.3 = %18.2
  fs              %18.4 = FrameState         R     0x5638c40ffa90+483: [%120.0], env=e102.0
  void                    Deopt              !v    %18.4, %18.3, %18.1   !
BB126   <- [124]
  val?~- | miss   %126.0 = CastType           d     dn %124.2
  val?-           %126.1 = Force!<value>            %126.0,    <str$->
  lgl$#-          %126.2 = IsType                   %126.1 isA val+   <true>
  void                    Branch                   %126.2 -> BB128 (if true) | BB129 (if false)
BB127   <- [124]
  void                    Nop                !     
  val?^ | miss    %127.1 = %124.2
  dr              %127.2 = Typecheck@0x5638bf92c370[Type#20]
  goto BB20
BB128   <- [126]
  val?            %128.0 = Extract2_1D        wed   %126.1, %124.0, elided   <str$->
  void                    StVar              lW    by, %128.0, e102.0
  val?^ | miss    %128.2 = LdVar              eR    isClass, e102.0
  lgl$#-          %128.3 = Identical                %128.2, function(Class, formal=TRUE, where=topenv(pare|...
  void                    Branch                   %128.3 -> BB130 (if true) | BB131 (if false)
BB129   <- [126]
  void                    Nop                !     
  lgl$#-          %129.1 = %126.2
  dr              %129.2 = DeadBranchReached@0x5638bf92c370[Test#4]
  goto BB20
BB20   <- [127, 129]
  val?^ | miss    %20.0 = Phi                      %127.1:BB127, %129.1:BB129
  val?^ | miss    %20.1 = %20.0
  dr              %20.2 = Phi                      %127.2:BB127, %129.2:BB129
  dr              %20.3 = %20.2
  fs              %20.4 = FrameState         R     0x5638c40ffa90+528: [%122.0, 1L, %122.1], env=e102.0
  void                    Deopt              !v    %20.4, %20.3, %20.1   !
BB130   <- [128]
  prom-           %130.0 = MkArg                    unboundValue, .walkClassGraph[0x5638c5d27ed0]_p5 (!refl), e102.0
  prom-           %130.1 = MkArg                    unboundValue, .walkClassGraph[0x5638c5d27ed0]_p6, e102.0
  val?            %130.2 = StaticCall         !v    isClass[0x5638bc646b70](%130.0, missingArg, %130.1) { 0 2n } e102.0   <lgl$->
  lgl$#-          %130.3 = IsType                   %130.2 isA lgl$-
  void                    Branch                   %130.3 -> BB132 (if true) | BB133 (if false)
BB131   <- [128]
  fs              %131.0 = FrameState         R     0x5638c40ffa90+603: [%122.0, 1L, %122.1], env=e102.0
  void                    Deopt              !v    %131.0, CallTarget@0x5638bf92c370[Call#7], %128.2   !
BB132   <- [130]
  lgl$-           %132.0 = CastType           d     dn %130.2
  lgl$#-          %132.1 = CheckTrueFalse     e     %132.0
  void                    Branch                   %132.1 -> BB27 (if true) | BB26 (if false)
BB133   <- [130]
  void                    Nop                !     
  val?            %133.1 = %130.2
  dr              %133.2 = Typecheck@0x5638bf92c370[Type#30]
  goto BB24
BB27   <- [132]
  val?^ | miss    %27.0 = LdVar              eR    getClassDef, e102.0
  lgl$#-          %27.1 = Identical                %27.0, function(Class, where=topenv(parent.frame()), |...
  void                    Branch                   %27.1 -> BB134 (if true) | BB135 (if false)
BB26   <- [132]
  (cls|spec|blt)  %26.0 = LdFun              !v    stop, e102.0
  fs              %26.1 = FrameState         R     0x5638c40ffa90+664: [%122.0, 1L, %122.1, %26.0], env=e102.0
  void                    Deopt              !v    %26.1, DeadCall@0x5638bf92c370[Call#9], %26.0   !
BB24   <- [133, 135]
  val?^ | miss    %24.0 = Phi                      %133.1:BB133, %135.1:BB135
  val?^ | miss    %24.1 = %24.0
  dr              %24.2 = Phi                      %133.2:BB133, %135.2:BB135
  dr              %24.3 = %24.2
  fs              %24.4 = FrameState         R     0x5638c40ffa90+648: [%122.0, 1L, %122.1, %130.2], env=e102.0
  void                    Deopt              !v    %24.4, %24.3, %24.1   !
BB134   <- [27]
  prom-           %134.0 = MkArg                    unboundValue, .walkClassGraph[0x5638c5d27ed0]_p9, e102.0
  prom-           %134.1 = MkArg                    unboundValue, .walkClassGraph[0x5638c5d27ed0]_p10, e102.0
  val?            %134.2 = StaticCall         !v    getClassDef[0x5638bd57f9e0](%134.0, missingArg, %134.1) { 0 2n } e102.0   <other>
  void                    StVar              lW    byDef, %134.2, e102.0
  val?^ | miss    %134.4 = LdVar              eR    slot, e102.0
  lgl$#-          %134.5 = Identical                %134.4, function(object, name) <(rir::DispatchTable*)0|...
  void                    Branch                   %134.5 -> BB136 (if true) | BB137 (if false)
BB135   <- [27]
  void                    Nop                !     
  val?^ | miss    %135.1 = %27.0
  dr              %135.2 = CallTarget@0x5638bf92c370[Call#14]
  goto BB24
BB136   <- [134]
  prom-           %136.0 = MkArg                    unboundValue, .walkClassGraph[0x5638c5d27ed0]_p13 (!refl), e102.0
  prom-           %136.1 = MkArg                    unboundValue, .walkClassGraph[0x5638c5d27ed0]_p14, e102.0
  ct              %136.2 = PushContext        lCL   %136.0, %136.1, slot(byDef, slotName), function(object, name) <(rir::DispatchTable*)0|..., e102.0
  val?^           %136.3 = CastType                 up %136.1
  val?^           %136.4 = CastType                 up %136.0
  val?^ | miss    %136.5 = LdVar              eR    .Call, <env 0x5638ba074378>
  lgl$#-          %136.6 = Identical                <blt .Call>, %136.5   <true>
  void                    Branch                   %136.6 -> BB138 (if true) | BB139 (if false)
BB137   <- [134]
  fs              %137.0 = FrameState         R     0x5638c40ffa90+769: [%122.0, 1L, %122.1], env=e102.0
  void                    Deopt              !v    %137.0, CallTarget@0x5638bf92c370[Call#16], %134.4   !
BB138   <- [136]
  val?^ | miss    %138.0 = LdVar              eR    C_R_get_slot, <env 0x5638ba074378>
  env             e138.1 = MkEnv              l     object=%136.4, name=%136.3, parent=<env 0x5638ba074378>, context 1
  val?            %138.2 = Force!<value>      !v    %138.0, e138.1   <vec>
  val?^ | miss    %138.3 = LdVar              eR    object, e138.1
  val?            %138.4 = Force!<lazy>       !v    %138.3, e138.1   <(cls|other)>
  val?^ | miss    %138.5 = LdVar              eR    name, e138.1
  val?            %138.6 = Force!<lazy>       !v    %138.5, e138.1   <str$->
  val?            %138.7 = CallBuiltin        !v    .Call(%138.2, %138.4, %138.6) e138.1   <val?+>
  val?            %138.8 = PopContext         C     %138.7, %136.2   <vec+>
  void                    StVar              lW    exti, %138.8, e102.0
  val?^ | miss    %138.10 = LdVar              eR    attr, e102.0
  lgl$#-          %138.11 = Identical                <blt attr>, %138.10   <true>
  void                    Branch                   %138.11 -> BB140 (if true) | BB141 (if false)
BB139   <- [136]
  fs              %139.0 = FrameState         R     0x5638c40ffa90+806: [%122.0, 1L, %122.1], env=e102.0
  env             e139.1 = (MkEnv)            l     object=%136.4, name=%136.3, parent=<env 0x5638ba074378>, context 1
  fs              %139.2 = FrameState         R     0x5638bed82520+17: [<blt .Call>, %136.6], env=e139.1, next=%139.0
  void                    Deopt              !v    %139.2, DeadBranchReached@0x5638c5ea7388[Test#0], %136.6   !
BB140   <- [138]
  val             %140.0 = ChkMissing         e     %138.8
  val?            %140.1 = CallBuiltin        !v    attr(%138.8, "conflicts") e102.0   <nil->
  void                    StVar              lW    coni, %140.1, e102.0
  val?^ | miss    %140.3 = LdVar              eR    superClassCase, e102.0
  lgl$#-          %140.4 = IsType                   %140.3 isA lgl$-
  void                    Branch                   %140.4 -> BB142 (if true) | BB143 (if false)
BB141   <- [138]
  fs              %141.0 = FrameState         R     0x5638c40ffa90+820: [%122.0, 1L, %122.1], env=e102.0
  void                    Deopt              !v    %141.0, DeadBranchReached@0x5638bf92c370[Test#7], %138.11   !
BB142   <- [140]
  lgl$-           %142.0 = CastType           d     dn %140.3
  lgl$-           %142.1 = AsLogical                %142.0
  lgl$#-          %142.2 = Identical                %142.1, false
  void                    Branch                   %142.2 -> BB99 (if true) | BB36 (if false)
BB143   <- [140]
  void                    Nop                !     
  val?^ | miss    %143.1 = %140.3
  dr              %143.2 = Typecheck@0x5638bf92c370[Type#51]
  goto BB34
BB99   <- [142]
  void                    Nop                !     
  lgl$-           %99.1 = %142.1
  goto BB39
BB36   <- [142]
  val?^ | miss    %36.0 = LdVar              eR    length, e102.0
  lgl$#-          %36.1 = Identical                <blt length>, %36.0   <true>
  void                    Branch                   %36.1 -> BB144 (if true) | BB145 (if false)
BB34   <- [143, 145, 149]
  val?^ | miss    %34.0 = Phi                      %143.1:BB143, %145.1:BB145, %149.1:BB149
  val?^ | miss    %34.1 = %34.0
  dr              %34.2 = Phi                      %143.2:BB143, %145.2:BB145, %149.2:BB149
  dr              %34.3 = %34.2
  fs              %34.4 = FrameState         R     0x5638c40ffa90+936: [%122.0, 1L, %122.1], env=e102.0
  void                    Deopt              !v    %34.4, %34.3, %34.1   !
BB39   <- [99, 150]
  lgl$-           %39.0 = Phi                      %150.4:BB150, %99.1:BB99
  lgl$-           %39.1 = %39.0
  lgl$#-          %39.2 = CheckTrueFalse     e     %39.1
  void                    Branch                   %39.2 -> BB98 (if true) | BB42 (if false)
BB144   <- [36]
  val             %144.0 = ChkMissing         e     %140.1
  lgl$#-          %144.1 = IsType                   %144.0 isA val?~- | miss
  void                    Branch                   %144.1 -> BB148 (if true) | BB149 (if false)
BB145   <- [36]
  void                    Nop                !     
  lgl$#-          %145.1 = %36.1
  dr              %145.2 = DeadBranchReached@0x5638bf92c370[Test#8]
  goto BB34
BB98   <- [39]
  (cls|spec|blt)  %98.0 = LdFun              !v    unique, e102.0
  fs              %98.1 = FrameState         R     0x5638c40ffa90+1083: [%122.0, 1L, %122.1, %98.0], env=e102.0
  void                    Deopt              !v    %98.1, DeadCall@0x5638bf92c370[Call#19], %98.0   !
BB42   <- [39]
  val?^ | miss    %42.0 = LdVar              eR    exti, e102.0
  lgl$#-          %42.1 = IsType                   %42.0 isA val?~+ | miss
  void                    Branch                   %42.1 -> BB146 (if true) | BB147 (if false)
BB148   <- [144]
  val-            %148.0 = CastType           d     dn %144.0   <nil->
  (int|real)$-    %148.1 = CallSafeBuiltin    wed   length(%148.0)    <int$->
  lgl$#-          %148.2 = IsType                   %148.1 isA int$-
  void                    Branch                   %148.2 -> BB150 (if true) | BB151 (if false)
BB149   <- [144]
  void                    Nop                !     
  val             %149.1 = %144.0
  dr              %149.2 = Typecheck@0x5638bf92c370[Type#53]
  goto BB34
BB146   <- [42]
  val?~+ | miss   %146.0 = CastType           d     dn %42.0
  val?+           %146.1 = Force!<value>            %146.0,    <vec+>
  lgl$#-          %146.2 = IsType                   %146.1 isA val+   <true>
  void                    Branch                   %146.2 -> BB152 (if true) | BB153 (if false)
BB147   <- [42]
  void                    Nop                !     
  val?^ | miss    %147.1 = %42.0
  dr              %147.2 = Typecheck@0x5638bf92c370[Type#70]
  goto BB40
BB150   <- [148]
  int$-           %150.0 = CastType           d     dn %148.1
  lgl$-           %150.1 = Gt                 d     %150.0, 0, elided   <lgl$->
  lgl$-           %150.2 = AsLogical                %150.1
  lgl$-           %150.3 = LAnd                     %142.1, %150.2
  lgl$-           %150.4 = %150.3
  goto BB39
BB151   <- [148]
  fs              %151.0 = FrameState         R     0x5638c40ffa90+1048: [%122.0, 1L, %122.1, %142.1, %148.1], env=e102.0
  void                    Deopt              !v    %151.0, Typecheck@0x5638bf92c370[Type#54], %148.1   !
BB152   <- [146]
  val?^ | miss    %152.0 = LdVar              eR    is.na, e102.0
  lgl$#-          %152.1 = Identical                <blt is.na>, %152.0   <true>
  void                    Branch                   %152.1 -> BB154 (if true) | BB155 (if false)
BB153   <- [146]
  void                    Nop                !     
  lgl$#-          %153.1 = %146.2
  dr              %153.2 = DeadBranchReached@0x5638bf92c370[Test#9]
  goto BB40
BB40   <- [147, 153, 155, 157, 159]
  val?^ | miss    %40.0 = Phi                      %147.1:BB147, %153.1:BB153, %155.1:BB155, %157.1:BB157, %159.1:BB159
  val?^ | miss    %40.1 = %40.0
  dr              %40.2 = Phi                      %147.2:BB147, %153.2:BB153, %155.2:BB155, %157.2:BB157, %159.2:BB159
  dr              %40.3 = %40.2
  fs              %40.4 = FrameState         R     0x5638c40ffa90+1067: [%122.0, 1L, %122.1, %39.1], env=e102.0
  void                    Deopt              !v    %40.4, %40.3, %40.1   !
BB154   <- [152]
  val?^ | miss    %154.0 = LdVar              eR    match, e102.0
  lgl$#-          %154.1 = Identical                %154.0, function(x, table, nomatch=NA, incomparables=N|...
  void                    Branch                   %154.1 -> BB156 (if true) | BB157 (if false)
BB155   <- [152]
  void                    Nop                !     
  lgl$#-          %155.1 = %152.1
  dr              %155.2 = DeadBranchReached@0x5638bf92c370[Test#10]
  goto BB40
BB156   <- [154]
  val?^ | miss    %156.0 = LdVar              eR    names, e102.0
  lgl$#-          %156.1 = Identical                %156.0, <blt names>
  void                    Branch                   %156.1 -> BB158 (if true) | BB159 (if false)
BB157   <- [154]
  void                    Nop                !     
  val?^ | miss    %157.1 = %154.0
  dr              %157.2 = CallTarget@0x5638bf92c370[Call#27]
  goto BB40
BB158   <- [156]
  val+            %158.0 = CallSafeBuiltin    wed   names(%146.1)    <(nil|str)->
  val?^ | miss    %158.1 = LdVar              eR    what, e102.0
  lgl$#-          %158.2 = IsType                   %158.1 isA val?~- | miss
  void                    Branch                   %158.2 -> BB160 (if true) | BB161 (if false)
BB159   <- [156]
  void                    Nop                !     
  val?^ | miss    %159.1 = %156.0
  dr              %159.2 = CallTarget@0x5638bf92c370[Call#28]
  goto BB40
BB160   <- [158]
  val?~- | miss   %160.0 = CastType           d     dn %158.1
  val?-           %160.1 = Force!<value>            %160.0,    <str$->
  val+            %160.2 = CallSafeBuiltin    wed   match(%158.0, %160.1, NA, nil)    <int->
  lgl$#-          %160.3 = IsType                   %160.2 isA int-
  void                    Branch                   %160.3 -> BB162 (if true) | BB163 (if false)
BB161   <- [158]
  fs              %161.0 = FrameState         R     0x5638c40ffa90+1266: [%122.0, 1L, %122.1, %146.1, <blt is.na>], env=e102.0
  prom-           %161.1 = MkArg                    unboundValue, .walkClassGraph[0x5638c5d27ed0]_p17, e102.0
  val?^           %161.2 = CastType                 up %161.1
  prom-           %161.3 = MkArg                    unboundValue, .walkClassGraph[0x5638c5d27ed0]_p15, e102.0
  val?^           %161.4 = CastType                 up %161.3
  env             e161.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%161.2, x=%161.4, parent=R_BaseNamespace, context 0
  fs              %161.6 = FrameState         R     0x5638ba281d40+9: [], env=e161.5, next=%161.0
  fs              %161.7 = FrameState         R     0x5638bde692d0+32(pr): [%158.0], env=e102.0, next=%161.6
  void                    Deopt              !v    %161.7, Typecheck@0x5638bf92c370[Type#72], %158.1   !
BB162   <- [160]
  int-            %162.0 = CastType           d     dn %160.2
  lgl-            %162.1 = CallSafeBuiltin    wed   is.na(%162.0)    <lgl->
  val?            %162.2 = Extract1_1D        wed   %146.1, %162.1, elided   <vec+>
  void                    StVar              lW    exti, %162.2, e102.0
  lgl$#-          %162.4 = IsType                   %162.2 isA val?+
  val?^ | miss    %162.5 = LdVar              eR    length, e102.0
  lgl$#-          %162.6 = Identical                <blt length>, %162.5   <true>
  void                    Branch                   %162.6 -> BB164 (if true) | BB165 (if false)
BB163   <- [160]
  fs              %163.0 = FrameState         R     0x5638c40ffa90+1266: [%122.0, 1L, %122.1, %146.1, <blt is.na>], env=e102.0
  prom-           %163.1 = MkArg                    %160.1, .walkClassGraph[0x5638c5d27ed0]_p17 (!refl), e102.0
  val?~           %163.2 = CastType                 up %163.1
  prom-           %163.3 = MkArg                    %158.0, .walkClassGraph[0x5638c5d27ed0]_p15 (!refl), e102.0
  val?~           %163.4 = CastType                 up %163.3
  env             e163.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%163.2, x=%163.4, parent=R_BaseNamespace, context 0
  fs              %163.6 = FrameState         R     0x5638ba281d40+69: [%160.2], env=e163.5, next=%163.0
  void                    Deopt              !v    %163.6, Typecheck@0x5638bf92c370[Type#73], %160.2   !
BB164   <- [162]
  val             %164.0 = ChkMissing         e     %162.2
  void                    Branch                   %162.4 -> BB166 (if true) | BB167 (if false)
BB165   <- [162]
  void                    Nop                !     
  lgl$#-          %165.1 = %162.6
  dr              %165.2 = DeadBranchReached@0x5638bf92c370[Test#11]
  goto BB47
BB166   <- [164]
  val?+           %166.0 = CastType           d     dn %162.2   <vec+>
  (int|real)$-    %166.1 = CallSafeBuiltin    wed   length(%166.0)    <int$->
  lgl$#-          %166.2 = IsType                   %166.1 isA int$-
  void                    Branch                   %166.2 -> BB168 (if true) | BB169 (if false)
BB167   <- [164]
  void                    Nop                !     
  val?            %167.1 = %162.2
  dr              %167.2 = Typecheck@0x5638bf92c370[Type#75]
  goto BB47
BB47   <- [165, 167]
  val?^ | miss    %47.0 = Phi                      %165.1:BB165, %167.1:BB167
  val?^ | miss    %47.1 = %47.0
  dr              %47.2 = Phi                      %165.2:BB165, %167.2:BB167
  dr              %47.3 = %47.2
  fs              %47.4 = FrameState         R     0x5638c40ffa90+1309: [%122.0, 1L, %122.1], env=e102.0
  void                    Deopt              !v    %47.4, %47.3, %47.1   !
BB168   <- [166]
  int$-           %168.0 = CastType           d     dn %166.1
  lgl$#-          %168.1 = CheckTrueFalse     e     %168.0
  void                    Branch                   %168.1 -> BB91 (if true) | BB51 (if false)
BB169   <- [166]
  fs              %169.0 = FrameState         R     0x5638c40ffa90+1400: [%122.0, 1L, %122.1, %166.1], env=e102.0
  void                    Deopt              !v    %169.0, Typecheck@0x5638bf92c370[Type#78], %166.1   !
BB91   <- [168]
  lgl$#-          %91.0 = CheckTrueFalse     e     %142.0
  void                    Branch                   %91.0 -> BB93 (if true) | BB92 (if false)
BB51   <- [168]
  void                    Nop                !     
  goto BB52
BB93   <- [91]
  void                    StVar              lW    strictBy, true, e102.0
  val?^ | miss    %93.1 = LdVar              eR    .transitiveExtends, e102.0
  lgl$#-          %93.2 = Identical                %93.1, function(from, by, byExt, moreExts, strictBy) |...
  void                    Branch                   %93.2 -> BB170 (if true) | BB171 (if false)
BB92   <- [91]
  void                    StVar              lW    strictBy, true, e102.0
  (cls|spec|blt)  %92.1 = LdFun              !v    .transitiveSubclasses, e102.0
  fs              %92.2 = FrameState         R     0x5638c40ffa90+1456: [%122.0, 1L, %122.1, %92.1], env=e102.0
  void                    Deopt              !v    %92.2, DeadCall@0x5638bf92c370[Call#30], %92.1   !
BB52   <- [51, 182]
  int$-           %52.0 = Inc                      %122.1
  lgl$-           %52.1 = Lt                 d     1L, %52.0, elided
  lgl$#-          %52.2 = Identical                %52.1, true
  void                    Branch                   %52.2 -> BB59 (if true) | BB55 (if false)
BB170   <- [93]
  prom-           %170.0 = MkArg                    unboundValue, .walkClassGraph[0x5638c5d27ed0]_p26, e102.0
  prom-           %170.1 = MkArg                    unboundValue, .walkClassGraph[0x5638c5d27ed0]_p27, e102.0
  prom-           %170.2 = MkArg                    unboundValue, .walkClassGraph[0x5638c5d27ed0]_p28, e102.0
  prom-           %170.3 = MkArg                    unboundValue, .walkClassGraph[0x5638c5d27ed0]_p30 (!refl), e102.0
  prom-           %170.4 = MkArg                    unboundValue, .walkClassGraph[0x5638c5d27ed0]_p31 (!refl), e102.0
  val?            %170.5 = StaticCall         !v    .transitiveExtends[0x5638bd2b8a60](%170.0, %170.1, %170.2, %170.3, %170.4) e102.0   <vec+>
  void                    StVar              lW    exti, %170.5, e102.0
  val?^ | miss    %170.7 = LdVar              eR    c, e102.0
  lgl$#-          %170.8 = Identical                <blt c>, %170.7   <true>
  void                    Branch                   %170.8 -> BB176 (if true) | BB177 (if false)
BB171   <- [93]
  fs              %171.0 = FrameState         R     0x5638c40ffa90+1537: [%122.0, 1L, %122.1], env=e102.0
  void                    Deopt              !v    %171.0, CallTarget@0x5638bf92c370[Call#31], %93.1   !
BB59   <- [52]
  val?^ | miss    %59.0 = LdVar              eR    names, e102.0
  lgl$#-          %59.1 = Identical                <blt names>, %59.0   <true>
  void                    Branch                   %59.1 -> BB172 (if true) | BB173 (if false)
BB55   <- [52]
  int$-           %55.0 = Extract2_1D        wed   %122.0, %52.0, elided
  void                    StVar              lW    i, %55.0, e102.0
  val?^ | miss    %55.2 = LdVar              eR    what, e102.0
  val?            %55.3 = Force!             !v    %55.2, e102.0   <val?_>
  lgl$#-          %55.4 = IsType                   %55.3 isA val+   <@?>
  void                    Branch                   %55.4 -> BB58 (if true) | BB56 (if false)
BB176   <- [170]
  val?^ | miss    %176.0 = LdVar              eR    ext, e102.0
  lgl$#-          %176.1 = IsType                   %176.0 isA val?~+ | miss
  void                    Branch                   %176.1 -> BB180 (if true) | BB181 (if false)
BB177   <- [170]
  void                    Nop                !     
  lgl$#-          %177.1 = %170.8
  dr              %177.2 = DeadBranchReached@0x5638bf92c370[Test#14]
  goto BB96
BB172   <- [59]
  val?^ | miss    %172.0 = LdVar              eR    ext, e102.0
  lgl$#-          %172.1 = IsType                   %172.0 isA val?~+ | miss
  void                    Branch                   %172.1 -> BB174 (if true) | BB175 (if false)
BB173   <- [59]
  void                    Nop                !     
  lgl$#-          %173.1 = %59.1
  dr              %173.2 = DeadBranchReached@0x5638bf92c370[Test#26]
  goto BB53
BB58   <- [55]
  val?^ | miss    %58.0 = LdVar              eR    i, e102.0
  val?            %58.1 = Force!             !v    %58.0, e102.0   <val?_>
  val?            %58.2 = %58.1
  goto BB57
BB56   <- [55]
  prom-           %56.0 = MkArg                    unboundValue, .walkClassGraph[0x5638c5d27ed0]_p18, e102.0
  prom-           %56.1 = %56.0
  goto BB57
BB180   <- [176]
  val?~+ | miss   %180.0 = CastType           d     dn %176.0
  val?+           %180.1 = Force!<value>            %180.0,    <vec$+>
  val             %180.2 = ChkMissing         e     %170.5
  lgl$#-          %180.3 = IsType                   %180.2 isA val?~+ | miss
  void                    Branch                   %180.3 -> BB182 (if true) | BB183 (if false)
BB181   <- [176]
  void                    Nop                !     
  val?^ | miss    %181.1 = %176.0
  dr              %181.2 = Typecheck@0x5638bf92c370[Type#100]
  goto BB96
BB96   <- [177, 181, 183]
  val?^ | miss    %96.0 = Phi                      %177.1:BB177, %181.1:BB181, %183.1:BB183
  val?^ | miss    %96.1 = %96.0
  dr              %96.2 = Phi                      %177.2:BB177, %181.2:BB181, %183.2:BB183
  dr              %96.3 = %96.2
  fs              %96.4 = FrameState         R     0x5638c40ffa90+1603: [%122.0, 1L, %122.1], env=e102.0
  void                    Deopt              !v    %96.4, %96.3, %96.1   !
BB174   <- [172]
  val?~+ | miss   %174.0 = CastType           d     dn %172.0
  val?+           %174.1 = Force!<value>            %174.0,    <vec+>
  val+            %174.2 = CallSafeBuiltin    wed   names(%174.1)    <str->
  void                    StVar              lW    what, %174.2, e102.0
  val?^ | miss    %174.4 = LdVar              eR    all, e102.0
  lgl$#-          %174.5 = Identical                <blt all>, %174.4   <true>
  void                    Branch                   %174.5 -> BB178 (if true) | BB179 (if false)
BB175   <- [172]
  void                    Nop                !     
  val?^ | miss    %175.1 = %172.0
  dr              %175.2 = Typecheck@0x5638bf92c370[Type#187]
  goto BB53
BB53   <- [173, 175]
  val?^ | miss    %53.0 = Phi                      %173.1:BB173, %175.1:BB175
  val?^ | miss    %53.1 = %53.0
  dr              %53.2 = Phi                      %173.2:BB173, %175.2:BB175
  dr              %53.3 = %53.2
  fs              %53.4 = FrameState         R     0x5638c40ffa90+1727: [%122.0, 1L, %122.1], env=e102.0
  void                    Deopt              !v    %53.4, %53.3, %53.1   !
BB57   <- [56, 58]
  val?            %57.0 = Phi                      %58.2:BB58, %56.1:BB56
  val?            %57.1 = %57.0
  val?            %57.2 = Extract2_1D        !v    %55.3, %57.1, e102.0   <val?_>
  void                    StVar              lW    by, %57.2, e102.0
  (cls|spec|blt)  %57.4 = LdFun              !v    isClass, e102.0
  fs              %57.5 = FrameState         R     0x5638c40ffa90+1836: [%122.0, 1L, %52.0, %57.4], env=e102.0
  void                    Deopt              !v    %57.5, DeadCall@0x5638bf92c370[Call#33], %57.4   !
BB182   <- [180]
  val+            %182.0 = CastType           d     dn %180.2   <vec+>
  val+            %182.1 = CallSafeBuiltin    wed   c(%180.1, %182.0)    <vec+>
  void                    StVar              lW    ext, %182.1, e102.0
  goto BB52
BB183   <- [180]
  void                    Nop                !     
  val             %183.1 = %180.2
  dr              %183.2 = Typecheck@0x5638bf92c370[Type#101]
  goto BB96
BB178   <- [174]
  val?^ | miss    %178.0 = LdVar              eR    is.na, e102.0
  lgl$#-          %178.1 = Identical                <blt is.na>, %178.0   <true>
  void                    Branch                   %178.1 -> BB184 (if true) | BB185 (if false)
BB179   <- [174]
  void                    Nop                !     
  lgl$#-          %179.1 = %174.5
  dr              %179.2 = DeadBranchReached@0x5638bf92c370[Test#27]
  goto BB60
BB184   <- [178]
  val?^ | miss    %184.0 = LdVar              eR    match, e102.0
  lgl$#-          %184.1 = Identical                %184.0, function(x, table, nomatch=NA, incomparables=N|...
  void                    Branch                   %184.1 -> BB186 (if true) | BB187 (if false)
BB185   <- [178]
  void                    Nop                !     
  lgl$#-          %185.1 = %178.1
  dr              %185.2 = DeadBranchReached@0x5638bf92c370[Test#28]
  goto BB60
BB60   <- [179, 185, 187, 189]
  val?^ | miss    %60.0 = Phi                      %179.1:BB179, %185.1:BB185, %187.1:BB187, %189.1:BB189
  val?^ | miss    %60.1 = %60.0
  dr              %60.2 = Phi                      %179.2:BB179, %185.2:BB185, %187.2:BB187, %189.2:BB189
  dr              %60.3 = %60.2
  fs              %60.4 = FrameState         R     0x5638c40ffa90+3070: [], env=e102.0
  void                    Deopt              !v    %60.4, %60.3, %60.1   !
BB186   <- [184]
  val?^ | miss    %186.0 = LdVar              eR    className, e102.0
  lgl$#-          %186.1 = IsType                   %186.0 isA val?~+ | miss
  void                    Branch                   %186.1 -> BB188 (if true) | BB189 (if false)
BB187   <- [184]
  void                    Nop                !     
  val?^ | miss    %187.1 = %184.0
  dr              %187.2 = CallTarget@0x5638bf92c370[Call#65]
  goto BB60
BB188   <- [186]
  val?~+ | miss   %188.0 = CastType           d     dn %186.0
  val?+           %188.1 = Force!<value>            %188.0,    <str$+>
  val+            %188.2 = CallSafeBuiltin    wed   match(%174.2, %188.1, NA, nil)    <int->
  lgl$#-          %188.3 = IsType                   %188.2 isA int-
  void                    Branch                   %188.3 -> BB190 (if true) | BB191 (if false)
BB189   <- [186]
  void                    Nop                !     
  val?^ | miss    %189.1 = %186.0
  dr              %189.2 = Typecheck@0x5638bf92c370[Type#197]
  goto BB60
BB190   <- [188]
  int-            %190.0 = CastType           d     dn %188.2
  lgl-            %190.1 = CallSafeBuiltin    wed   is.na(%190.0)    <lgl->
  val?            %190.2 = CallBuiltin        !v    all(%190.1) e102.0   <lgl$->
  lgl$#-          %190.3 = IsType                   %190.2 isA lgl$-
  void                    Branch                   %190.3 -> BB192 (if true) | BB193 (if false)
BB191   <- [188]
  prom-           %191.0 = MkArg                    unboundValue, .walkClassGraph[0x5638c5d27ed0]_p19 (!refl), e102.0
  val?^           %191.1 = CastType                 up %191.0
  prom-           %191.2 = MkArg                    %188.1, .walkClassGraph[0x5638c5d27ed0]_p20 (!refl), e102.0
  val?~           %191.3 = CastType                 up %191.2
  fs              %191.4 = FrameState         R     0x5638c40ffa90+3227: [<blt all>, <blt is.na>], env=e102.0
  env             e191.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%191.3, x=%191.1, parent=R_BaseNamespace, context 0
  fs              %191.6 = FrameState         R     0x5638ba281d40+69: [%188.2], env=e191.5, next=%191.4
  void                    Deopt              !v    %191.6, Typecheck@0x5638bf92c370[Type#198], %188.2   !
BB192   <- [190]
  lgl$-           %192.0 = CastType           d     dn %190.2
  lgl$-           %192.1 = Not                d     %192.0, elided
  lgl$#-          %192.2 = CheckTrueFalse     e     %192.1
  void                    Branch                   %192.2 -> BB88 (if true) | BB66 (if false)
BB193   <- [190]
  void                    Nop                !     
  val?            %193.1 = %190.2
  dr              %193.2 = Typecheck@0x5638bf92c370[Type#200]
  goto BB64
BB88   <- [192]
  val?^ | miss    %88.0 = LdVar              eR    is.na, e102.0
  lgl$#-          %88.1 = Identical                <blt is.na>, %88.0   <@?>
  void                    Branch                   %88.1 -> BB90 (if true) | BB89 (if false)
BB66   <- [192]
  val?^ | miss    %66.0 = LdVar              eR    sort.list, e102.0
  lgl$#-          %66.1 = Identical                %66.0, function(x, partial=NULL, na.last=TRUE, decrea|...
  void                    Branch                   %66.1 -> BB194 (if true) | BB195 (if false)
BB64   <- [193, 195]
  val?^ | miss    %64.0 = Phi                      %193.1:BB193, %195.1:BB195
  val?^ | miss    %64.1 = %64.0
  dr              %64.2 = Phi                      %193.2:BB193, %195.2:BB195
  dr              %64.3 = %64.2
  fs              %64.4 = FrameState         R     0x5638c40ffa90+3271: [%190.2], env=e102.0
  void                    Deopt              !v    %64.4, %64.3, %64.1   !
BB90   <- [88]
  (cls|spec|blt)  %90.0 = LdFun              !v    match, e102.0
  fs              %90.1 = FrameState         R     0x5638c40ffa90+3353: [<blt is.na>, %90.0], env=e102.0
  void                    Deopt              !v    %90.1, DeadCall@0x5638bf92c370[Call#68], %90.0   !
BB89   <- [88]
  (cls|spec|blt)  %89.0 = LdFun              !v    is.na, e102.0
  fs              %89.1 = FrameState         R     0x5638c40ffa90+3316: [%89.0], env=e102.0
  void                    Deopt              !v    %89.1, DeadCall@0x5638bf92c370[Call#66], %89.0   !
BB194   <- [66]
  prom-           %194.0 = MkArg                    unboundValue, .walkClassGraph[0x5638c5d27ed0]_p21, e102.0
  val?            %194.1 = Call               !v    function(x, partial=NULL, na.last=TRUE, decrea|...(%194.0) e102.0   <int->
  void                    StVar              lW    distOrder, %194.1, e102.0
  val?^ | miss    %194.3 = LdVar              eR    ext, e102.0
  lgl$#-          %194.4 = IsType                   %194.3 isA val?~+ | miss
  void                    Branch                   %194.4 -> BB196 (if true) | BB197 (if false)
BB195   <- [66]
  void                    Nop                !     
  val?^ | miss    %195.1 = %66.0
  dr              %195.2 = CallTarget@0x5638bf92c370[Call#84]
  goto BB64
BB196   <- [194]
  val?~+ | miss   %196.0 = CastType           d     dn %194.3
  val?+           %196.1 = Force!<value>            %196.0,    <vec+>
  lgl$#-          %196.2 = IsType                   %196.1 isA val+   <true>
  void                    Branch                   %196.2 -> BB198 (if true) | BB199 (if false)
BB197   <- [194]
  void                    Nop                !     
  val?^ | miss    %197.1 = %194.3
  dr              %197.2 = Typecheck@0x5638bf92c370[Type#255]
  goto BB67
BB198   <- [196]
  val             %198.0 = ChkMissing         e     %194.1
  lgl$#-          %198.1 = IsType                   %198.0 isA int-
  void                    Branch                   %198.1 -> BB200 (if true) | BB201 (if false)
BB199   <- [196]
  void                    Nop                !     
  lgl$#-          %199.1 = %196.2
  dr              %199.2 = DeadBranchReached@0x5638bf92c370[Test#36]
  goto BB67
BB67   <- [197, 199, 201]
  val?^ | miss    %67.0 = Phi                      %197.1:BB197, %199.1:BB199, %201.1:BB201
  val?^ | miss    %67.1 = %67.0
  dr              %67.2 = Phi                      %197.2:BB197, %199.2:BB199, %201.2:BB201
  dr              %67.3 = %67.2
  fs              %67.4 = FrameState         R     0x5638c40ffa90+4230: [], env=e102.0
  void                    Deopt              !v    %67.4, %67.3, %67.1   !
BB200   <- [198]
  int-            %200.0 = CastType           d     dn %198.0
  val?            %200.1 = Extract1_1D        wed   %196.1, %200.0, elided   <vec+>
  void                    StVar              lW    ext, %200.1, e102.0
  val?^ | miss    %200.3 = LdVar              eR    superClassCase, e102.0
  lgl$#-          %200.4 = IsType                   %200.3 isA lgl$-
  void                    Branch                   %200.4 -> BB202 (if true) | BB203 (if false)
BB201   <- [198]
  void                    Nop                !     
  val             %201.1 = %198.0
  dr              %201.2 = Typecheck@0x5638bf92c370[Type#257]
  goto BB67
BB202   <- [200]
  lgl$-           %202.0 = CastType           d     dn %200.3
  lgl$-           %202.1 = AsLogical                %202.0
  lgl$#-          %202.2 = Identical                %202.1, false
  void                    Branch                   %202.2 -> BB87 (if true) | BB71 (if false)
BB203   <- [200]
  void                    Nop                !     
  val?^ | miss    %203.1 = %200.3
  dr              %203.2 = Typecheck@0x5638bf92c370[Type#259]
  goto BB69
BB87   <- [202]
  void                    Nop                !     
  lgl$-           %87.1 = %202.1
  goto BB80
BB71   <- [202]
  val?^ | miss    %71.0 = LdVar              eR    anyDuplicated, e102.0
  lgl$#-          %71.1 = Identical                %71.0, function(x, incomparables=FALSE, ...) <(rir::D|...
  void                    Branch                   %71.1 -> BB206 (if true) | BB207 (if false)
BB69   <- [203, 207, 209]
  val?^ | miss    %69.0 = Phi                      %203.1:BB203, %207.1:BB207, %209.1:BB209
  val?^ | miss    %69.1 = %69.0
  dr              %69.2 = Phi                      %203.2:BB203, %207.2:BB207, %209.2:BB209
  dr              %69.3 = %69.2
  fs              %69.4 = FrameState         R     0x5638c40ffa90+4305: [], env=e102.0
  void                    Deopt              !v    %69.4, %69.3, %69.1   !
BB80   <- [87, 79]
  lgl$-           %80.0 = Phi                      %79.4:BB79, %87.1:BB87
  lgl$-           %80.1 = %80.0
  lgl$#-          %80.2 = CheckTrueFalse     e     %80.1
  void                    Branch                   %80.2 -> BB85 (if true) | BB83 (if false)
BB206   <- [71]
  val?^ | miss    %206.0 = LdVar              eR    what, e102.0
  lgl$#-          %206.1 = IsType                   %206.0 isA val?~- | miss
  void                    Branch                   %206.1 -> BB208 (if true) | BB209 (if false)
BB207   <- [71]
  void                    Nop                !     
  val?^ | miss    %207.1 = %71.0
  dr              %207.2 = CallTarget@0x5638bf92c370[Call#86]
  goto BB69
BB85   <- [80]
  (cls|spec|blt)  %85.0 = LdFun              !v    .resolveSuperclasses, e102.0
  fs              %85.1 = FrameState         R     0x5638c40ffa90+4499: [%85.0], env=e102.0
  void                    Deopt              !v    %85.1, DeadCall@0x5638bf92c370[Call#88], %85.0   !
BB83   <- [80]
  val?^ | miss    %83.0 = LdVar              eR    ext, e102.0
  lgl$#-          %83.1 = IsType                   %83.0 isA val?~+ | miss
  void                    Branch                   %83.1 -> BB204 (if true) | BB205 (if false)
BB208   <- [206]
  val?~- | miss   %208.0 = CastType           d     dn %206.0
  val?-           %208.1 = Force!<value>            %208.0,    <str->
  val?            %208.2 = StaticCall         !v    anyDuplicated[0x5638beb8bec0](%208.1) { 0 } e102.0   <int$->
  lgl$#-          %208.3 = IsType                   %208.2 isA int$-
  void                    Branch                   %208.3 -> BB210 (if true) | BB211 (if false)
BB209   <- [206]
  void                    Nop                !     
  val?^ | miss    %209.1 = %206.0
  dr              %209.2 = Typecheck@0x5638bf92c370[Type#260]
  goto BB69
BB204   <- [83]
  val?~+ | miss   %204.0 = CastType           d     dn %83.0
  void                    Visible            v     
  val?+           %204.2 = Force!<value>            %204.0,    <vec+>
  val?+           %204.3 = %204.2
  goto BB84
BB205   <- [83]
  fs              %205.0 = FrameState         R     0x5638c40ffa90+4483: [%80.1], env=e102.0
  void                    Deopt              !v    %205.0, Typecheck@0x5638bf92c370[Type#271], %83.0   !
BB210   <- [208]
  int$-           %210.0 = CastType           d     dn %208.2
  lgl$-           %210.1 = AsLogical                %210.0
  lgl$#-          %210.2 = Identical                %210.1, true
  void                    Branch                   %210.2 -> BB86 (if true) | BB74 (if false)
BB211   <- [208]
  void                    Nop                !     
  val?            %211.1 = %208.2
  dr              %211.2 = Typecheck@0x5638bf92c370[Type#261]
  goto BB72
BB86   <- [210]
  void                    Nop                !     
  lgl$-           %86.1 = %210.1
  goto BB79
BB74   <- [210]
  val?^ | miss    %74.0 = LdVar              eR    length, e102.0
  lgl$#-          %74.1 = Identical                <blt length>, %74.0   <true>
  void                    Branch                   %74.1 -> BB212 (if true) | BB213 (if false)
BB72   <- [211, 213]
  val?^ | miss    %72.0 = Phi                      %211.1:BB211, %213.1:BB213
  val?^ | miss    %72.1 = %72.0
  dr              %72.2 = Phi                      %211.2:BB211, %213.2:BB213
  dr              %72.3 = %72.2
  fs              %72.4 = FrameState         R     0x5638c40ffa90+4358: [%202.1, %208.2], env=e102.0
  void                    Deopt              !v    %72.4, %72.3, %72.1   !
BB79   <- [86, 216]
  lgl$-           %79.0 = Phi                      %216.4:BB216, %86.1:BB86
  lgl$-           %79.1 = %79.0
  lgl$-           %79.2 = AsLogical                %79.1
  lgl$-           %79.3 = LAnd                     %202.1, %79.2
  lgl$-           %79.4 = %79.3
  goto BB80
BB212   <- [74]
  val?^ | miss    %212.0 = LdVar              eR    conflicts, e102.0
  val?            %212.1 = Force!<lazy>       !v    %212.0, e102.0   <nil->
  lgl$#-          %212.2 = IsType                   %212.1 isA val?-
  void                    Branch                   %212.2 -> BB214 (if true) | BB215 (if false)
BB213   <- [74]
  void                    Nop                !     
  lgl$#-          %213.1 = %74.1
  dr              %213.2 = DeadBranchReached@0x5638bf92c370[Test#37]
  goto BB72
BB214   <- [212]
  val?-           %214.0 = CastType           d     dn %212.1   <nil->
  (int|real)$-    %214.1 = CallSafeBuiltin    wed   length(%214.0)    <int$->
  lgl$#-          %214.2 = IsType                   %214.1 isA int$-
  void                    Branch                   %214.2 -> BB216 (if true) | BB217 (if false)
BB215   <- [212]
  fs              %215.0 = FrameState         R     0x5638c40ffa90+4439: [%202.1, %210.1, <blt length>, %212.1], env=e102.0
  void                    Deopt              !v    %215.0, Typecheck@0x5638bf92c370[Type#263], %212.1   !
BB216   <- [214]
  int$-           %216.0 = CastType           d     dn %214.1
  lgl$-           %216.1 = Gt                 d     %216.0, 0, elided   <lgl$->
  lgl$-           %216.2 = AsLogical                %216.1
  lgl$-           %216.3 = LOr                      %210.1, %216.2
  lgl$-           %216.4 = %216.3
  goto BB79
BB217   <- [214]
  fs              %217.0 = FrameState         R     0x5638c40ffa90+4461: [%202.1, %210.1, %214.1], env=e102.0
  void                    Deopt              !v    %217.0, Typecheck@0x5638bf92c370[Type#264], %214.1   !
Prom 0:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    ClassDef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <other>
  void                    Return             l     %0.3
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    slotName, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    ClassDef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 3:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    className, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 4:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    slotName, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 5:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    by, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 6:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     packageSlot, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .walkClassGraph[0x5638c5d27ed0]_p7, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 7:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    ext, e0.0
  val?            %0.2  = Force              !v    %0.1, e0.0   <val?_>
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <@?>
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    i, e0.0
  val?            %2.1  = Force              !v    %2.0, e0.0   <val?_>
  val?            %2.2  = %2.1
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, .walkClassGraph[0x5638c5d27ed0]_p8, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.2:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract2_1D        !v    %0.2, %3.1, e0.0   <val?_>
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 8:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    i, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 9:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    by, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 10:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     packageSlot, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .walkClassGraph[0x5638c5d27ed0]_p11, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 11:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    ext, e0.0
  val?            %0.2  = Force              !v    %0.1, e0.0   <val?_>
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <@?>
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    i, e0.0
  val?            %2.1  = Force              !v    %2.0, e0.0   <val?_>
  val?            %2.2  = %2.1
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, .walkClassGraph[0x5638c5d27ed0]_p12, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.2:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract2_1D        !v    %0.2, %3.1, e0.0   <val?_>
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 12:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    i, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 13:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    byDef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <other>
  void                    Return             l     %0.3
Prom 14:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    slotName, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 15:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     names, <0x5638b9a6d470>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .walkClassGraph[0x5638c5d27ed0]_p16, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <(nil|str)->
  void                    Return             l     %0.3
Prom 16:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    exti, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 17:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    what, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 18:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    i, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 19:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    what, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 20:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    className, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$+>
  void                    Return             l     %0.3
Prom 21:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     vapply, <0x5638b9b8a9e8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .walkClassGraph[0x5638c5d27ed0]_p22, e0.0
  cls             %0.3  = MkCls                    .walkClassGraph@Prom(23)0, e0.0
  prom-           %0.4  = MkArg                    %0.3, .walkClassGraph[0x5638c5d27ed0]_p23 (!refl), e0.0
  val?            %0.5  = Call               !     %0.1(%0.2, %0.4, 1) e0.0   <real+>
  void                    Return             l     %0.5
Prom 22:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    ext, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 23:
BB0
  env             e0.0  = LdFunctionEnv            
  cls             %0.1  = MkCls                    .walkClassGraph@Prom(23)0, e0.0
  void                    Return             l     %0.1
Prom 26:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    className, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 27:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    by, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 28:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    ext, e0.0
  val?            %0.2  = Force<value>       !v    %0.1, e0.0   <vec$+>
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <true>
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    i, e0.0
  val?            %2.1  = Force<value>       !v    %2.0, e0.0   <int$->
  val?            %2.2  = %2.1
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, .walkClassGraph[0x5638c5d27ed0]_p29, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.2:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract2_1D        !v    %0.2, %3.1, e0.0   <other>
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 29:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    i, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 30:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    exti, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 31:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    strictBy, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <lgl$->
  void                    Return             l     %0.3

│ .walkClassGraph[0x5638c5d27ed0]                                              │
└──────────────────────────────────────────────────────────────────────────────┘
