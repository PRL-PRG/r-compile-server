
┌──────────────────────────────────────────────────────────────────────────────┐
│ .cacheClass[0x556a1c213420]                                                  │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;NonRefl0,NonRefl1,NonRefl3,!Obj0,!Obj3│
│ Properties:                                                                  │
├────── Final PIR Version
.cacheClass[0x556a1c213420]
BB0
  val?^           %0.0  = LdArg                    3
  val?^           %0.1  = LdArg                    2
  val?^           %0.2  = LdArg                    1
  val?^           %0.3  = LdArg                    0
  val?^ | miss    %0.4  = LdVar              eR    isFALSE, <env 0x556a1ba11378>
  lgl$#-          %0.5  = Identical                %0.4, function(x) <(rir::DispatchTable*)0x556a1f0336|...
  void                    Branch                   %0.5 -> BB46 (if true) | BB47 (if false)
BB46   <- [0]
  env             e46.0 = MkEnv              l     name=%0.3, def=%0.2, doSubclasses=%0.1, env=%0.0, parent=<env 0x556a1ba11378>, context 1
  val?            %46.1 = Force!<lazy>       !v    %0.1, e46.0   <lgl$->
  lgl$#-          %46.2 = IsType                   %46.1 isA lgl$-
  void                    Branch                   %46.2 -> BB48 (if true) | BB49 (if false)
BB47   <- [0]
  env             e47.0 = (MkEnv)            l     name=%0.3, def=%0.2, doSubclasses=%0.1, env=%0.0, parent=<env 0x556a1ba11378>, context 1
  fs              %47.1 = FrameState         R     0x556a1eb706f0+0: [], env=e47.0
  void                    Deopt              !v    %47.1, CallTarget@0x556a1ed56af0[Call#0], %0.4
BB48   <- [46]
  lgl$-           %48.0 = CastType           d     dn %46.1
  lgl$-           %48.1 = CallSafeBuiltin    wed   is.na(%48.0)    <lgl$->
  lgl$-           %48.2 = Not                d     %48.1, elided
  lgl$-           %48.3 = AsLogical                %48.2
  lgl$-           %48.4 = AsLogical                %48.3
  lgl$-           %48.5 = AsLogical                %48.4
  lgl$#-          %48.6 = Identical                %48.5, false
  void                    Branch                   %48.6 -> BB44 (if true) | BB7 (if false)
BB49   <- [46]
  prom-           %49.0 = MkArg                    unboundValue, .cacheClass[0x556a1c213420]_p0, e46.0
  val?^           %49.1 = CastType                 up %49.0
  fs              %49.2 = FrameState         R     0x556a1eb706f0+32: [], env=e46.0
  env             e49.3 = (MkEnv)            l     x=%49.1, parent=R_BaseNamespace, context 0
  fs              %49.4 = FrameState         R     0x556a1dc24180+69: [<blt is.logical>], env=e49.3, next=%49.2
  fs              %49.5 = FrameState         R     0x556a1d5f6710+5(pr): [%46.1], env=e46.0, next=%49.4
  void                    Deopt              !v    %49.5, Typecheck@0x556a1ed56af0[Type#0], %46.1   !
BB44   <- [48]
  void                    Nop                !     
  lgl$-           %44.1 = %48.5
  goto BB8
BB7   <- [48]
  lgl$-           %7.0  = Not                d     %48.0, elided
  lgl$-           %7.1  = AsLogical                %7.0
  lgl$-           %7.2  = LAnd                     %48.5, %7.1
  lgl$-           %7.3  = %7.2
  goto BB8
BB8   <- [44, 7]
  lgl$-           %8.0  = Phi                      %7.3:BB7, %44.1:BB44
  lgl$-           %8.1  = %8.0
  lgl$-           %8.2  = Not                d     %8.1, elided
  lgl$#-          %8.3  = CheckTrueFalse     e     %8.2
  void                    Branch                   %8.3 -> BB43 (if true) | BB9 (if false)
BB43   <- [8]
  val?^ | miss    %43.0 = LdVar              eR    .recacheSubclasses, e46.0
  lgl$#-          %43.1 = Identical                %43.0, function(class, def, env) <(rir::DispatchTable|...
  void                    Branch                   %43.1 -> BB50 (if true) | BB51 (if false)
BB9   <- [8]
  void                    Nop                !     
  goto BB10
BB50   <- [43]
  prom-           %50.0 = MkArg                    unboundValue, .cacheClass[0x556a1c213420]_p11, e46.0
  prom-           %50.1 = MkArg                    unboundValue, .cacheClass[0x556a1c213420]_p14, e46.0
  prom-           %50.2 = MkArg                    unboundValue, .cacheClass[0x556a1c213420]_p15, e46.0
  val?            %50.3 = StaticCall         !v    .recacheSubclasses[0x556a1b754710](%50.0, %50.1, %50.2) e46.0
  goto BB10
BB51   <- [43]
  fs              %51.0 = FrameState         R     0x556a1eb706f0+32: [], env=e46.0
  prom-           %51.1 = MkArg                    %48.0, .cacheClass[0x556a1c213420]_p0 (!refl), e46.0
  val?~           %51.2 = CastType                 up %51.1
  env             e51.3 = (MkEnv)            l     x=%51.2, parent=R_BaseNamespace, context 0
  fs              %51.4 = FrameState         R     0x556a1dc24180+311: [true, %48.1], env=e51.3, next=%51.0
  void                    Deopt              !v    %51.4, CallTarget@0x556a1ed56af0[Call#1], %43.0   !
BB10   <- [9, 50]
  val?^ | miss    %10.0 = LdVar              eR    .classTable, e46.0
  val?            %10.1 = Force!<wrapped>    !v    %10.0, e46.0   <env->
  lgl$#-          %10.2 = IsType                   %10.1 isA val+   <true>
  void                    Branch                   %10.2 -> BB52 (if true) | BB53 (if false)
BB52   <- [10]
  val?^ | miss    %52.0 = LdVar              eR    name, e46.0
  val?            %52.1 = Force!<lazy>       !v    %52.0, e46.0   <str$->
  lgl$#-          %52.2 = IsType                   %52.1 isA val?-
  lgl$#-          %52.3 = IsType                   %10.1 isA val?-
  void                    Branch                   %52.3 -> BB54 (if true) | BB55 (if false)
BB53   <- [10]
  fs              %53.0 = FrameState         R     0x556a1eb706f0+101: [%10.1], env=e46.0
  void                    Deopt              !v    %53.0, DeadBranchReached@0x556a1ed56af0[Test#0], %10.2   !
BB54   <- [52]
  val?-           %54.0 = CastType           d     dn %10.1   <env->
  void                    Branch                   %52.2 -> BB56 (if true) | BB57 (if false)
BB55   <- [52]
  void                    Nop                !     
  val?            %55.1 = %10.1
  dr              %55.2 = Typecheck@0x556a1ed56af0[Type#7]
  goto BB13
BB56   <- [54]
  val?-           %56.0 = CastType           d     dn %52.1   <str$->
  val?            %56.1 = Extract2_1D        wed   %54.0, %56.0, elided   <(nil|other)>
  lgl$-           %56.2 = Is                       %56.1, NULL
  void                    StVar              lW    prev, %56.1, e46.0
  lgl$-           %56.4 = Not                d     %56.2, elided
  lgl$#-          %56.5 = CheckTrueFalse     e     %56.4
  void                    Branch                   %56.5 -> BB18 (if true) | BB15 (if false)
BB57   <- [54]
  void                    Nop                !     
  val?            %57.1 = %52.1
  dr              %57.2 = Typecheck@0x556a1ed56af0[Type#9]
  goto BB13
BB13   <- [55, 57]
  val?^ | miss    %13.0 = Phi                      %55.1:BB55, %57.1:BB57
  val?^ | miss    %13.1 = %13.0
  dr              %13.2 = Phi                      %55.2:BB55, %57.2:BB57
  dr              %13.3 = %13.2
  fs              %13.4 = FrameState         R     0x556a1eb706f0+146: [%10.1, %52.1], env=e46.0
  void                    Deopt              !v    %13.4, %13.3, %13.1   !
BB18   <- [56]
  (cls|spec|blt)  %18.0 = LdFun              !v    @, <0x556a1b409bd8>, e46.0
  prom-           %18.1 = MkArg                    unboundValue, .cacheClass[0x556a1c213420]_p1, e46.0
  prom-           %18.2 = MkArg                    unboundValue, .cacheClass[0x556a1c213420]_p2, e46.0
  val?            %18.3 = Call               !v    %18.0(%18.1, %18.2) e46.0   <str$->
  void                    StVar              lW    newpkg, %18.3, e46.0
  val?^ | miss    %18.5 = LdVar              eR    is, e46.0
  lgl$#-          %18.6 = Identical                %18.5, function(object, class2) <(rir::DispatchTable*|...
  void                    Branch                   %18.6 -> BB58 (if true) | BB59 (if false)
BB15   <- [56]
  void                    Nop                !     
  goto BB16
BB58   <- [18]
  prom-           %58.0 = MkArg                    unboundValue, .cacheClass[0x556a1c213420]_p3, e46.0
  val?            %58.1 = Call               !v    function(object, class2) <(rir::DispatchTable*|...(%58.0, "classRepresentation") e46.0   <lgl$->
  lgl$#-          %58.2 = IsType                   %58.1 isA lgl$-
  void                    Branch                   %58.2 -> BB60 (if true) | BB61 (if false)
BB59   <- [18]
  fs              %59.0 = FrameState         R     0x556a1eb706f0+237: [], env=e46.0
  void                    Deopt              !v    %59.0, CallTarget@0x556a1ed56af0[Call#4], %18.5   !
BB16   <- [15, 28]
  val?^ | miss    %16.0 = LdVar              eR    def, e46.0
  val?            %16.1 = Force!<lazy>       !v    %16.0, e46.0   <other>
  val?^ | miss    %16.2 = LdVar              eR    .classTable, e46.0
  val?            %16.3 = Force!<wrapped>    !v    %16.2, e46.0   <env->
  val?^ | miss    %16.4 = LdVar              eR    name, e46.0
  val?            %16.5 = Force!<wrapped>    !v    %16.4, e46.0   <str$->
  val?            %16.6 = Subassign2_1D      !v    %16.1, %16.3, %16.5, e46.0
  void                    StVar              lW    .classTable, %16.6, e46.0
  void                    Invisible          v     
  val?            %16.9 = %16.1
  goto BB17
BB60   <- [58]
  lgl$-           %60.0 = CastType           d     dn %58.1
  lgl$#-          %60.1 = CheckTrueFalse     e     %60.0
  void                    Branch                   %60.1 -> BB30 (if true) | BB23 (if false)
BB61   <- [58]
  void                    Nop                !     
  val?            %61.1 = %58.1
  dr              %61.2 = Typecheck@0x556a1ed56af0[Type#15]
  goto BB21
BB17   <- [42, 16, 78]
  val?            %17.0 = Phi                      %16.9:BB16, %78.18:BB78, %42.1:BB42
  val?            %17.1 = %17.0
  void                    Return             l     %17.1
BB30   <- [60]
  val?^ | miss    %30.0 = LdVar              eR    identical, e46.0
  lgl$#-          %30.1 = Identical                %30.0, function(x, y, num.eq=TRUE, single.NA=TRUE, at|...
  void                    Branch                   %30.1 -> BB62 (if true) | BB63 (if false)
BB23   <- [60]
  val?^ | miss    %23.0 = LdVar              eR    def, e46.0
  val?            %23.1 = Force!             !v    %23.0, e46.0   <val?_>
  val?^ | miss    %23.2 = LdVar              eR    prev !upd, e46.0
  val?            %23.3 = Force!             !v    %23.2, e46.0   <val?_>
  val?^ | miss    %23.4 = LdVar              eR    newpkg, e46.0
  val?            %23.5 = Force!             !v    %23.4, e46.0   <val?_>
  lgl$#-          %23.6 = IsType                   %23.5 isA val?+
  lgl$#-          %23.7 = IsType                   %23.1 isA val?+
  lgl$#-          %23.8 = IsType                   %23.3 isA val?+
  void                    Branch                   %23.7 -> BB64 (if true) | BB65 (if false)
BB21   <- [61, 63]
  val?^ | miss    %21.0 = Phi                      %61.1:BB61, %63.1:BB63
  val?^ | miss    %21.1 = %21.0
  dr              %21.2 = Phi                      %61.2:BB61, %63.2:BB63
  dr              %21.3 = %21.2
  fs              %21.4 = FrameState         R     0x556a1eb706f0+274: [%58.1], env=e46.0
  void                    Deopt              !v    %21.4, %21.3, %21.1   !
BB62   <- [30]
  prom-           %62.0 = MkArg                    unboundValue, .cacheClass[0x556a1c213420]_p4, e46.0
  prom-           %62.1 = MkArg                    unboundValue, .cacheClass[0x556a1c213420]_p5, e46.0
  ct              %62.2 = PushContext        lCL   %62.0, %62.1, identical(prev, def), function(x, y, num.eq=TRUE, single.NA=TRUE, at|..., e46.0
  val?^           %62.3 = CastType                 up %62.1
  val?^           %62.4 = CastType                 up %62.0
  env             e62.5 = MkEnv              l     x=%62.4, y=%62.3, num.eq(miss)=true, single.NA(miss)=true, attrib.as.set(miss)=true, ignore.bytecode(miss)=true, ignore.environment(miss)=false, ignore.srcref(miss)=true, parent=R_BaseNamespace, context 1
  val?            %62.6 = Force!<lazy>       !vL   %62.4, e62.5   <val?>
  val?            %62.7 = Force!<lazy>       !vL   %62.3, e62.5   <val?>
  val?            %62.8 = CallBuiltin        !     identical(%62.6, %62.7, true, true, true, true, false, true) e62.5
  val?            %62.9 = PopContext         C     %62.8, %62.2   <lgl$->
  lgl$#-          %62.10 = IsType                   %62.9 isA lgl$-
  void                    Branch                   %62.10 -> BB66 (if true) | BB67 (if false)
BB63   <- [30]
  void                    Nop                !     
  val?^ | miss    %63.1 = %30.0
  dr              %63.2 = CallTarget@0x556a1ed56af0[Call#5]
  goto BB21
BB64   <- [23]
  val?+           %64.0 = CastType           d     dn %23.1   <val?_>
  void                    Branch                   %23.8 -> BB68 (if true) | BB69 (if false)
BB65   <- [23]
  void                    Nop                !     
  val?            %65.1 = %23.1
  dr              %65.2 = Typecheck@0x556a1ed56af0[Type#42]
  goto BB24
BB66   <- [62]
  lgl$-           %66.0 = CastType           d     dn %62.9
  lgl$#-          %66.1 = CheckTrueFalse     e     %66.0
  void                    Branch                   %66.1 -> BB42 (if true) | BB33 (if false)
BB67   <- [62]
  fs              %67.0 = FrameState         R     0x556a1eb706f0+327: [%62.9], env=e46.0
  void                    Deopt              !v    %67.0, Typecheck@0x556a1ed56af0[Type#18], %62.9   !
BB68   <- [64]
  val?+           %68.0 = CastType           d     dn %23.3   <val?_>
  void                    Branch                   %23.6 -> BB72 (if true) | BB73 (if false)
BB69   <- [64]
  void                    Nop                !     
  val?            %69.1 = %23.3
  dr              %69.2 = Typecheck@0x556a1ed56af0[Type#43]
  goto BB24
BB24   <- [65, 69, 73]
  val?^ | miss    %24.0 = Phi                      %65.1:BB65, %69.1:BB69, %73.1:BB73
  val?^ | miss    %24.1 = %24.0
  dr              %24.2 = Phi                      %65.2:BB65, %69.2:BB69, %73.2:BB73
  dr              %24.3 = %24.2
  fs              %24.4 = FrameState         R     0x556a1eb706f0+926: [%23.1, %23.3, %23.5], env=e46.0
  void                    Deopt              !v    %24.4, %24.3, %24.1   !
BB42   <- [66]
  void                    Nop                !     
  nil-            %42.1 = nil
  goto BB17
BB33   <- [66]
  (cls|spec|blt)  %33.0 = LdFun              !v    @, <0x556a1b409bd8>, e46.0
  prom-           %33.1 = MkArg                    unboundValue, .cacheClass[0x556a1c213420]_p6, e46.0
  prom-           %33.2 = MkArg                    unboundValue, .cacheClass[0x556a1c213420]_p7, e46.0
  val?            %33.3 = Call               !v    %33.0(%33.1, %33.2) e46.0   <str$->
  void                    StVar              lW    pkg, %33.3, e46.0
  val?^ | miss    %33.5 = LdVar              eR    identical, e46.0
  lgl$#-          %33.6 = Identical                %33.5, function(x, y, num.eq=TRUE, single.NA=TRUE, at|...
  void                    Branch                   %33.6 -> BB70 (if true) | BB71 (if false)
BB72   <- [68]
  val?+           %72.0 = CastType           d     dn %23.5   <val?_>
  val?+           %72.1 = Subassign2_1D      wed   %64.0, %68.0, %72.0, elided   <val?_>
  void                    StVar              lW    prev, %72.1, e46.0
  val+            %72.3 = ChkMissing         e     %72.1
  void                    StVar              lW    def, %72.1, e46.0
  val?^ | miss    %72.5 = LdVar              eR    length, e46.0
  lgl$#-          %72.6 = Identical                <blt length>, %72.5   <@?>
  void                    Branch                   %72.6 -> BB27 (if true) | BB26 (if false)
BB73   <- [68]
  void                    Nop                !     
  val?            %73.1 = %23.5
  dr              %73.2 = Typecheck@0x556a1ed56af0[Type#44]
  goto BB24
BB70   <- [33]
  prom-           %70.0 = MkArg                    unboundValue, .cacheClass[0x556a1c213420]_p8 (!refl), e46.0
  prom-           %70.1 = MkArg                    unboundValue, .cacheClass[0x556a1c213420]_p9, e46.0
  ct              %70.2 = PushContext        lCL   %70.0, %70.1, identical(pkg, newpkg), function(x, y, num.eq=TRUE, single.NA=TRUE, at|..., e46.0
  val?^           %70.3 = CastType                 up %70.1
  val?^           %70.4 = CastType                 up %70.0
  env             e70.5 = MkEnv              l     x=%70.4, y=%70.3, num.eq(miss)=true, single.NA(miss)=true, attrib.as.set(miss)=true, ignore.bytecode(miss)=true, ignore.environment(miss)=false, ignore.srcref(miss)=true, parent=R_BaseNamespace, context 1
  val?            %70.6 = Force!<lazy>       !vL   %70.3, e70.5   <val?>
  val?            %70.7 = CallBuiltin        !v    identical(%33.3, %70.6, true, true, true, true, false, true) e70.5
  val?            %70.8 = PopContext         C     %70.7, %70.2   <lgl$->
  lgl$#-          %70.9 = IsType                   %70.8 isA lgl$-
  void                    Branch                   %70.9 -> BB74 (if true) | BB75 (if false)
BB71   <- [33]
  fs              %71.0 = FrameState         R     0x556a1eb706f0+400: [], env=e46.0
  void                    Deopt              !v    %71.0, CallTarget@0x556a1ed56af0[Call#7], %33.5   !
BB27   <- [72]
  real$-          %27.0 = CallSafeBuiltin    wed   length(%72.1)    <val?_>
  lgl$-           %27.1 = Gt                 d     %27.0, 1L, elided   <val?_>
  lgl$#-          %27.2 = CheckTrueFalse     e     %27.1
  void                    Branch                   %27.2 -> BB29 (if true) | BB28 (if false)
BB26   <- [72]
  (cls|spec|blt)  %26.0 = LdFun              !v    length, e46.0
  fs              %26.1 = FrameState         R     0x556a1eb706f0+992: [%26.0], env=e46.0
  void                    Deopt              !v    %26.1, DeadCall@0x556a1ed56af0[Call#14], %26.0   !
BB74   <- [70]
  lgl$-           %74.0 = CastType           d     dn %70.8
  lgl$#-          %74.1 = CheckTrueFalse     e     %74.0
  void                    Branch                   %74.1 -> BB39 (if true) | BB38 (if false)
BB75   <- [70]
  void                    Nop                !     
  val?            %75.1 = %70.8
  dr              %75.2 = Typecheck@0x556a1ed56af0[Type#24]
  goto BB36
BB29   <- [27]
  (cls|spec|blt)  %29.0 = LdFun              !v    .duplicateClassesExist, e46.0
  fs              %29.1 = FrameState         R     0x556a1eb706f0+1088: [%29.0], env=e46.0
  void                    Deopt              !v    %29.1, DeadCall@0x556a1ed56af0[Call#15], %29.0   !
BB28   <- [27]
  void                    Nop                !     
  goto BB16
BB39   <- [74]
  val?^ | miss    %39.0 = LdVar              eR    .cache_class, e46.0
  lgl$#-          %39.1 = Identical                <blt .cache_class>, %39.0   <true>
  void                    Branch                   %39.1 -> BB76 (if true) | BB77 (if false)
BB38   <- [74]
  (cls|spec|blt)  %38.0 = LdFun              !v    .simpleDuplicateClass, e46.0
  fs              %38.1 = FrameState         R     0x556a1eb706f0+453: [%38.0], env=e46.0
  void                    Deopt              !v    %38.1, DeadCall@0x556a1ed56af0[Call#8], %38.0   !
BB36   <- [75, 77]
  val?^ | miss    %36.0 = Phi                      %75.1:BB75, %77.1:BB77
  val?^ | miss    %36.1 = %36.0
  dr              %36.2 = Phi                      %75.2:BB75, %77.2:BB77
  dr              %36.3 = %36.2
  fs              %36.4 = FrameState         R     0x556a1eb706f0+437: [%70.8], env=e46.0
  void                    Deopt              !v    %36.4, %36.3, %36.1   !
BB76   <- [39]
  val?^ | miss    %76.0 = LdVar              eR    name, e46.0
  val?            %76.1 = Force!<wrapped>    !v    %76.0, e46.0   <str$->
  val?^ | miss    %76.2 = LdVar              eR    .extendsForS3, e46.0
  lgl$#-          %76.3 = Identical                %76.2, function(Class) <(rir::DispatchTable*)0x556a1e|...
  void                    Branch                   %76.3 -> BB78 (if true) | BB79 (if false)
BB77   <- [39]
  void                    Nop                !     
  lgl$#-          %77.1 = %39.1
  dr              %77.2 = DeadBranchReached@0x556a1ed56af0[Test#1]
  goto BB36
BB78   <- [76]
  prom-           %78.0 = MkArg                    unboundValue, .cacheClass[0x556a1c213420]_p10, e46.0
  ct              %78.1 = PushContext        lCL   %78.0, .extendsForS3(def), function(Class) <(rir::DispatchTable*)0x556a1e|..., e46.0
  val?^           %78.2 = CastType                 up %78.0
  env             e78.3 = MkEnv              l     Class=%78.2, parent=<env 0x556a1ba11378>, context 1
  (cls|spec|blt)  %78.4 = LdFun              !v    extends, <0x556a1fdc4f48>, <env 0x556a1ba11378>
  prom-           %78.5 = MkArg                    unboundValue, .cacheClass[0x556a1c213420]_p28, e78.3
  val?            %78.6 = NamedCall          !v    %78.4(%78.5, maybe=false) e78.3   <str->
  val?            %78.7 = PopContext         C     %78.6, %78.1   <str->
  val?            %78.8 = CallBuiltin        !v    .cache_class(%76.1, %78.7) e46.0
  val?^ | miss    %78.9 = LdVar              eR    def, e46.0
  val?            %78.10 = Force!<wrapped>    !v    %78.9, e46.0   <other>
  val?^ | miss    %78.11 = LdVar              eR    .classTable, e46.0
  val?            %78.12 = Force!<wrapped>    !v    %78.11, e46.0   <env->
  val?^ | miss    %78.13 = LdVar              eR    name, e46.0
  val?            %78.14 = Force!<wrapped>    !v    %78.13, e46.0   <str$->
  val?            %78.15 = Subassign2_1D      !v    %78.10, %78.12, %78.14, e46.0
  void                    StVar              lW    .classTable, %78.15, e46.0
  void                    Invisible          v     
  val?            %78.18 = %78.10
  goto BB17
BB79   <- [76]
  fs              %79.0 = FrameState         R     0x556a1eb706f0+586: [<blt .cache_class>, %76.1], env=e46.0
  void                    Deopt              !v    %79.0, CallTarget@0x556a1ed56af0[Call#11], %76.2   !
Prom 0:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    doSubclasses, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <lgl$->
  void                    Return             l     %0.3
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    def, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    package, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 3:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    prev, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <other>
  void                    Return             l     %0.3
Prom 4:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    prev, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <other>
  void                    Return             l     %0.3
Prom 5:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    def, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <other>
  void                    Return             l     %0.3
Prom 6:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    prev, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 7:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    package, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 8:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    pkg, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 9:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    newpkg, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 10:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    def, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <other>
  void                    Return             l     %0.3
Prom 11:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, <0x556a1b409bd8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .cacheClass[0x556a1c213420]_p12, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .cacheClass[0x556a1c213420]_p13, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <str$+>
  void                    Return             l     %0.4
Prom 12:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    def, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 13:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    className, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 14:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    def, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <other>
  void                    Return             l     %0.3
Prom 15:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    env, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 28:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    Class, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <other>
  void                    Return             l     %0.3

│ .cacheClass[0x556a1c213420]                                                  │
└──────────────────────────────────────────────────────────────────────────────┘
