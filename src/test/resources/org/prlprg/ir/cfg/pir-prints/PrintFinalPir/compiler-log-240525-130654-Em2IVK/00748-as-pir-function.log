
┌──────────────────────────────────────────────────────────────────────────────┐
│ as[0x556a1f3c9300]                                                           │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;NonRefl1,!Obj1 miss: 2               │
│ Properties:                                                                  │
├────── Final PIR Version
as[0x556a1f3c9300]
BB0
  val?^           %0.0  = LdArg                    1
  val?^           %0.1  = LdArg                    0
  env             e0.2  = MkEnv              l     object=%0.1, Class=%0.0, strict(miss)=true, ext(miss)=missingArg, parent=<env 0x556a1ba11378>, context 1
  prom-           %0.3  = MkArg                    unboundValue, as[0x556a1f3c9300]_p1, e0.2
  val?^ | miss    %0.4  = CastType                 up %0.3
  void                    StArg              lW    ext, %0.4, e0.2
  val?^ | miss    %0.6  = LdVar              eR    .class1, <env 0x556a1ba11378>
  lgl$#-          %0.7  = Identical                %0.6, function(x) <(rir::DispatchTable*)0x556a1df270|...
  void                    Branch                   %0.7 -> BB96 (if true) | BB97 (if false)
BB96   <- [0]
  prom-           %96.0 = MkArg                    unboundValue, as[0x556a1f3c9300]_p4, e0.2
  ct              %96.1 = PushContext        lCL   %96.0, .class1(object), function(x) <(rir::DispatchTable*)0x556a1df270|..., e0.2
  val?^           %96.2 = CastType                 up %96.0
  val?^ | miss    %96.3 = LdVar              eR    class, <env 0x556a1ba11378>
  lgl$#-          %96.4 = Identical                <blt class>, %96.3   <true>
  void                    Branch                   %96.4 -> BB98 (if true) | BB99 (if false)
BB97   <- [0]
  fs              %97.0 = FrameState         R     0x556a1f30ffd0+0: [], env=e0.2
  void                    Deopt              !v    %97.0, CallTarget@0x556a1e904f70[Call#1], %0.6
BB98   <- [96]
  env             e98.0 = MkEnv              l     x=%96.2, parent=<env 0x556a1ba11378>, context 1
  val?            %98.1 = Force!<lazy>       !vL   %96.2, e98.0   <(str|cls)>
  val?            %98.2 = CallBuiltin        !v    class(%98.1) e98.0   <str$+>
  void                    StVar              lW    cl, %98.2, e98.0
  lgl$#-          %98.4 = IsType                   %98.2 isA val?+
  val?^ | miss    %98.5 = LdVar              eR    length, e98.0
  lgl$#-          %98.6 = Identical                <blt length>, %98.5   <true>
  void                    Branch                   %98.6 -> BB100 (if true) | BB101 (if false)
BB99   <- [96]
  fs              %99.0 = FrameState         R     0x556a1f30ffd0+32: [], env=e0.2
  env             e99.1 = (MkEnv)            l     x=%96.2, parent=<env 0x556a1ba11378>, context 1
  fs              %99.2 = FrameState         R     0x556a1c23ff40+17: [<blt class>, %96.4], env=e99.1, next=%99.0
  void                    Deopt              !v    %99.2, DeadBranchReached@0x556a1e4e4728[Test#0], %96.4   !
BB100   <- [98]
  val             %100.0 = ChkMissing         e     %98.2
  void                    Branch                   %98.4 -> BB102 (if true) | BB103 (if false)
BB101   <- [98]
  void                    Nop                !     
  lgl$#-          %101.1 = %98.6
  dr              %101.2 = DeadBranchReached@0x556a1e4e4728[Test#1]
  goto BB5
BB102   <- [100]
  val?+           %102.0 = CastType           d     dn %98.2   <str$+>
  (int|real)$-    %102.1 = CallSafeBuiltin    wed   length(%102.0)    <int$->
  lgl$#-          %102.2 = IsType                   %102.1 isA int$-
  void                    Branch                   %102.2 -> BB104 (if true) | BB105 (if false)
BB103   <- [100]
  void                    Nop                !     
  val?            %103.1 = %98.2
  dr              %103.2 = Typecheck@0x556a1e4e4728[Type#2]
  goto BB5
BB5   <- [101, 103]
  val?^ | miss    %5.0  = Phi                      %101.1:BB101, %103.1:BB103
  val?^ | miss    %5.1  = %5.0
  dr              %5.2  = Phi                      %101.2:BB101, %103.2:BB103
  dr              %5.3  = %5.2
  fs              %5.4  = FrameState         R     0x556a1f30ffd0+32: [], env=e0.2
  fs              %5.5  = FrameState         R     0x556a1c23ff40+105: [], env=e98.0, next=%5.4
  void                    Deopt              !v    %5.5, %5.3, %5.1   !
BB104   <- [102]
  int$-           %104.0 = CastType           d     dn %102.1
  lgl$-           %104.1 = Gt                 d     %104.0, 1L, elided   <lgl$->
  lgl$#-          %104.2 = CheckTrueFalse     e     %104.1
  void                    Branch                   %104.2 -> BB94 (if true) | BB9 (if false)
BB105   <- [102]
  fs              %105.0 = FrameState         R     0x556a1f30ffd0+32: [], env=e0.2
  fs              %105.1 = FrameState         R     0x556a1c23ff40+196: [%102.1], env=e98.0, next=%105.0
  void                    Deopt              !v    %105.1, Typecheck@0x556a1e4e4728[Type#5], %102.1   !
BB94   <- [104]
  val?            %94.0 = Extract2_1D        wed   %102.0, 1L, elided   <val?_>
  val?            %94.1 = %94.0
  goto BB10
BB9   <- [104]
  void                    Nop                !     
  val?+           %9.1  = %102.0
  goto BB10
BB10   <- [9, 94]
  val?            %10.0 = Phi                      %9.1:BB9, %94.1:BB94
  val?            %10.1 = %10.0
  val?            %10.2 = PopContext         C     %10.1, %96.1   <str$+>
  void                    StVar              lW    thisClass, %10.2, e0.2
  val?^ | miss    %10.4 = LdVar              eR    .identC, e0.2
  lgl$#-          %10.5 = Identical                %10.4, function(c1=NULL, c2=NULL) <(rir::DispatchTabl|...
  void                    Branch                   %10.5 -> BB106 (if true) | BB107 (if false)
BB106   <- [10]
  prom-           %106.0 = MkArg                    unboundValue, as[0x556a1f3c9300]_p5 (!refl), e0.2
  prom-           %106.1 = MkArg                    unboundValue, as[0x556a1f3c9300]_p6, e0.2
  ct              %106.2 = PushContext        lCL   %106.0, %106.1, .identC(thisClass, Class), function(c1=NULL, c2=NULL) <(rir::DispatchTabl|..., e0.2
  val?^           %106.3 = CastType                 up %106.1
  val?^           %106.4 = CastType                 up %106.0
  val?^ | miss    %106.5 = LdVar              eR    .Call, <env 0x556a1ba11378>
  lgl$#-          %106.6 = Identical                <blt .Call>, %106.5   <true>
  void                    Branch                   %106.6 -> BB108 (if true) | BB109 (if false)
BB107   <- [10]
  fs              %107.0 = FrameState         R     0x556a1f30ffd0+46: [], env=e0.2
  void                    Deopt              !v    %107.0, CallTarget@0x556a1e904f70[Call#2], %10.4   !
BB108   <- [106]
  val?^ | miss    %108.0 = LdVar              eR    C_R_identC, <env 0x556a1ba11378>
  env             e108.1 = MkEnv              l     c1=%106.4, c2=%106.3, parent=<env 0x556a1ba11378>, context 1
  val?            %108.2 = Force!<value>      !v    %108.0, e108.1   <vec>
  val?^ | miss    %108.3 = LdVar              eR    c1, e108.1
  val?            %108.4 = Force!<lazy>       !v    %108.3, e108.1   <str$+>
  val?^ | miss    %108.5 = LdVar              eR    c2, e108.1
  val?            %108.6 = Force!<lazy>       !v    %108.5, e108.1   <str$+>
  val?            %108.7 = CallBuiltin        !v    .Call(%108.2, %108.4, %108.6) e108.1   <lgl$->
  lgl$#-          %108.8 = IsType                   %108.7 isA lgl$-
  void                    Branch                   %108.8 -> BB110 (if true) | BB111 (if false)
BB109   <- [106]
  fs              %109.0 = FrameState         R     0x556a1f30ffd0+83: [], env=e0.2
  env             e109.1 = (MkEnv)            l     c1=%106.4, c2=%106.3, parent=<env 0x556a1ba11378>, context 1
  fs              %109.2 = FrameState         R     0x556a1e037380+17: [<blt .Call>, %106.6], env=e109.1, next=%109.0
  void                    Deopt              !v    %109.2, DeadBranchReached@0x556a1c6ee018[Test#0], %106.6   !
BB110   <- [108]
  lgl$-           %110.0 = CastType           d     dn %108.7
  val?            %110.1 = PopContext         C     %110.0, %106.2   <lgl$->
  lgl$#-          %110.2 = IsType                   %110.1 isA lgl$-
  void                    Branch                   %110.2 -> BB112 (if true) | BB113 (if false)
BB111   <- [108]
  fs              %111.0 = FrameState         R     0x556a1f30ffd0+83: [], env=e0.2
  fs              %111.1 = FrameState         R     0x556a1e037380+129: [%108.7], env=e108.1, next=%111.0
  void                    Deopt              !v    %111.1, Typecheck@0x556a1c6ee018[Type#6], %108.7   !
BB112   <- [110]
  lgl$-           %112.0 = CastType           d     dn %110.1
  lgl$-           %112.1 = AsLogical                %112.0
  lgl$#-          %112.2 = Identical                %112.1, true
  void                    Branch                   %112.2 -> BB93 (if true) | BB19 (if false)
BB113   <- [110]
  void                    Nop                !     
  val?            %113.1 = %110.1
  dr              %113.2 = Typecheck@0x556a1e904f70[Type#7]
  goto BB17
BB93   <- [112]
  void                    Nop                !     
  lgl$-           %93.1 = %112.1
  goto BB26
BB19   <- [112]
  val?^ | miss    %19.0 = LdVar              eR    .identC, e0.2
  lgl$#-          %19.1 = Identical                %19.0, function(c1=NULL, c2=NULL) <(rir::DispatchTabl|...
  void                    Branch                   %19.1 -> BB114 (if true) | BB115 (if false)
BB17   <- [113, 115]
  val?^ | miss    %17.0 = Phi                      %113.1:BB113, %115.1:BB115
  val?^ | miss    %17.1 = %17.0
  dr              %17.2 = Phi                      %113.2:BB113, %115.2:BB115
  dr              %17.3 = %17.2
  fs              %17.4 = FrameState         R     0x556a1f30ffd0+83: [%110.1], env=e0.2
  void                    Deopt              !v    %17.4, %17.3, %17.1   !
BB26   <- [93, 128]
  lgl$-           %26.0 = Phi                      %128.3:BB128, %93.1:BB93
  lgl$-           %26.1 = %26.0
  lgl$#-          %26.2 = CheckTrueFalse     e     %26.1
  void                    Branch                   %26.2 -> BB92 (if true) | BB29 (if false)
BB114   <- [19]
  prom-           %114.0 = MkArg                    unboundValue, as[0x556a1f3c9300]_p7, e0.2
  ct              %114.1 = PushContext        lCL   %114.0, "ANY", .identC(Class, "ANY"), function(c1=NULL, c2=NULL) <(rir::DispatchTabl|..., e0.2
  val?^           %114.2 = CastType                 up %114.0
  val?^ | miss    %114.3 = LdVar              eR    .Call, <env 0x556a1ba11378>
  lgl$#-          %114.4 = Identical                <blt .Call>, %114.3   <true>
  void                    Branch                   %114.4 -> BB124 (if true) | BB125 (if false)
BB115   <- [19]
  void                    Nop                !     
  val?^ | miss    %115.1 = %19.0
  dr              %115.2 = CallTarget@0x556a1e904f70[Call#3]
  goto BB17
BB92   <- [26]
  val?^ | miss    %92.0 = LdVar              eR    object, e0.2
  void                    Visible            v     
  val?            %92.2 = Force!<wrapped>    !     %92.0, e0.2   <(str|cls)->
  val?            %92.3 = %92.2
  goto BB40
BB29   <- [26]
  val?^ | miss    %29.0 = LdVar              eR    .classEnv, e0.2
  lgl$#-          %29.1 = Identical                %29.0, function(Class, default=.requirePackage("metho|...
  void                    Branch                   %29.1 -> BB116 (if true) | BB117 (if false)
BB124   <- [114]
  val?^ | miss    %124.0 = LdVar              eR    C_R_identC, <env 0x556a1ba11378>
  env             e124.1 = MkEnv              l     c1=%114.2, c2="ANY", parent=<env 0x556a1ba11378>, context 1
  val?            %124.2 = Force!<value>      !v    %124.0, e124.1   <vec>
  val?^ | miss    %124.3 = LdVar              eR    c1, e124.1
  val?            %124.4 = Force!<lazy>       !v    %124.3, e124.1   <str$+>
  val?^ | miss    %124.5 = LdVar              eR    c2, e124.1
  val?            %124.6 = Force!<lazy>       !v    %124.5, e124.1   <str$+>
  val?            %124.7 = CallBuiltin        !v    .Call(%124.2, %124.4, %124.6) e124.1   <lgl$->
  lgl$#-          %124.8 = IsType                   %124.7 isA lgl$-
  void                    Branch                   %124.8 -> BB126 (if true) | BB127 (if false)
BB125   <- [114]
  fs              %125.0 = FrameState         R     0x556a1f30ffd0+132: [%112.1], env=e0.2
  env             e125.1 = (MkEnv)            l     c1=%114.2, c2="ANY", parent=<env 0x556a1ba11378>, context 1
  fs              %125.2 = FrameState         R     0x556a1e037380+17: [<blt .Call>, %114.4], env=e125.1, next=%125.0
  void                    Deopt              !v    %125.2, DeadBranchReached@0x556a1c6ee018[Test#0], %114.4   !
BB40   <- [92, 39]
  val?            %40.0 = Phi                      %39.3:BB39, %92.3:BB92
  val?            %40.1 = %40.0
  void                    Return             l     %40.1
BB116   <- [29]
  prom-           %116.0 = MkArg                    unboundValue, as[0x556a1f3c9300]_p8, e0.2
  val?            %116.1 = StaticCall         !v    .classEnv[0x556a1fd0af00](%116.0, missingArg, false) { 0 2n } e0.2   <env->
  void                    StVar              lW    where, %116.1, e0.2
  val?^ | miss    %116.3 = LdVar              eR    getGeneric, e0.2
  lgl$#-          %116.4 = Identical                %116.3, function(f, mustFind=FALSE, where, package="")|...
  void                    Branch                   %116.4 -> BB118 (if true) | BB119 (if false)
BB117   <- [29]
  fs              %117.0 = FrameState         R     0x556a1f30ffd0+139: [%26.1], env=e0.2
  void                    Deopt              !v    %117.0, CallTarget@0x556a1e904f70[Call#4], %29.0   !
BB126   <- [124]
  lgl$-           %126.0 = CastType           d     dn %124.7
  val?            %126.1 = PopContext         C     %126.0, %114.1   <lgl$->
  lgl$#-          %126.2 = IsType                   %126.1 isA lgl$-
  void                    Branch                   %126.2 -> BB128 (if true) | BB129 (if false)
BB127   <- [124]
  fs              %127.0 = FrameState         R     0x556a1f30ffd0+132: [%112.1], env=e0.2
  fs              %127.1 = FrameState         R     0x556a1e037380+129: [%124.7], env=e124.1, next=%127.0
  void                    Deopt              !v    %127.1, Typecheck@0x556a1c6ee018[Type#6], %124.7   !
BB118   <- [116]
  prom-           %118.0 = MkArg                    unboundValue, as[0x556a1f3c9300]_p9 (!refl), e0.2
  val?            %118.1 = StaticCall         !v    getGeneric[0x556a1ef521b0]("coerce", missingArg, %118.0) { 0 2n } e0.2   <cls>
  void                    StVar              lW    coerceFun, %118.1, e0.2
  val?^ | miss    %118.3 = LdVar              eR    .getMethodsTable, e0.2
  lgl$#-          %118.4 = Identical                %118.3, function(fdef, env=environment(fdef), check=TR|...
  void                    Branch                   %118.4 -> BB120 (if true) | BB121 (if false)
BB119   <- [116]
  fs              %119.0 = FrameState         R     0x556a1f30ffd0+224: [], env=e0.2
  void                    Deopt              !v    %119.0, CallTarget@0x556a1e904f70[Call#5], %116.3   !
BB128   <- [126]
  lgl$-           %128.0 = CastType           d     dn %126.1
  lgl$-           %128.1 = AsLogical                %128.0
  lgl$-           %128.2 = LOr                      %112.1, %128.1
  lgl$-           %128.3 = %128.2
  goto BB26
BB129   <- [126]
  fs              %129.0 = FrameState         R     0x556a1f30ffd0+132: [%112.1, %126.1], env=e0.2
  void                    Deopt              !v    %129.0, Typecheck@0x556a1e904f70[Type#9], %126.1   !
BB120   <- [118]
  prom-           %120.0 = MkArg                    unboundValue, as[0x556a1f3c9300]_p10 (!refl), e0.2
  prom-           %120.1 = MkArg                    unboundValue, as[0x556a1f3c9300]_p11, e0.2
  val?            %120.2 = StaticCall         !v    .getMethodsTable[0x556a1fade970](%120.0, %120.1, missingArg, true) { 0 1 3n } e0.2   <env->
  void                    StVar              lW    coerceMethods, %120.2, e0.2
  val?^ | miss    %120.4 = LdVar              eR    .quickCoerceSelect, e0.2
  lgl$#-          %120.5 = Identical                %120.4, function(from, to, fdef, methods, where) <(rir|...
  void                    Branch                   %120.5 -> BB122 (if true) | BB123 (if false)
BB121   <- [118]
  fs              %121.0 = FrameState         R     0x556a1f30ffd0+283: [], env=e0.2
  void                    Deopt              !v    %121.0, CallTarget@0x556a1e904f70[Call#6], %118.3   !
BB122   <- [120]
  prom-           %122.0 = MkArg                    unboundValue, as[0x556a1f3c9300]_p13, e0.2
  prom-           %122.1 = MkArg                    unboundValue, as[0x556a1f3c9300]_p14, e0.2
  prom-           %122.2 = MkArg                    unboundValue, as[0x556a1f3c9300]_p15, e0.2
  prom-           %122.3 = MkArg                    unboundValue, as[0x556a1f3c9300]_p16 (!refl), e0.2
  prom-           %122.4 = MkArg                    unboundValue, as[0x556a1f3c9300]_p17, e0.2
  val?            %122.5 = StaticCall         !v    .quickCoerceSelect[0x556a1e016e70](%122.0, %122.1, %122.2, %122.3, %122.4) e0.2   <cls>
  lgl$-           %122.6 = Is                       %122.5, NULL
  void                    StVar              lW    asMethod, %122.5, e0.2
  val             %122.8 = ChkMissing         e     %122.5
  lgl$#-          %122.9 = CheckTrueFalse     e     %122.6
  void                    Branch                   %122.9 -> BB41 (if true) | BB36 (if false)
BB123   <- [120]
  fs              %123.0 = FrameState         R     0x556a1f30ffd0+351: [], env=e0.2
  void                    Deopt              !v    %123.0, CallTarget@0x556a1e904f70[Call#8], %120.4   !
BB41   <- [122]
  val?^ | miss    %41.0 = LdVar              eR    c, e0.2
  lgl$#-          %41.1 = Identical                <blt c>, %41.0   <@?>
  void                    Branch                   %41.1 -> BB43 (if true) | BB42 (if false)
BB36   <- [122]
  void                    Nop                !     
  goto BB37
BB43   <- [41]
  val?^ | miss    %43.0 = LdVar              eR    thisClass, e0.2
  val?            %43.1 = Force!             !v    %43.0, e0.2   <val?_>
  val?^ | miss    %43.2 = LdVar              eR    Class, e0.2
  val?            %43.3 = Force!             !v    %43.2, e0.2   <val?_>
  val?            %43.4 = NamedCall          !v    <blt c>(from=%43.1, to=%43.3) e0.2   <val?_>
  void                    StVar              lW    sig, %43.4, e0.2
  (cls|spec|blt)  %43.6 = LdFun              !v    selectMethod, <0x556a20ff5108>, e0.2
  prom-           %43.7 = MkArg                    unboundValue, as[0x556a1f3c9300]_p19, e0.2
  prom-           %43.8 = MkArg                    unboundValue, as[0x556a1f3c9300]_p20, e0.2
  prom-           %43.9 = MkArg                    unboundValue, as[0x556a1f3c9300]_p21, e0.2
  val?            %43.10 = NamedCall          !v    %43.6("coerce", %43.7, optional=true, useInherited=false, fdef=%43.8, mlist=%43.9) e0.2   <nil->
  lgl$-           %43.11 = Is                       %43.10, NULL
  void                    StVar              lW    asMethod, %43.10, e0.2
  val             %43.13 = ChkMissing         e     %43.10
  lgl$#-          %43.14 = CheckTrueFalse     e     %43.11
  void                    Branch                   %43.14 -> BB45 (if true) | BB44 (if false)
BB42   <- [41]
  (cls|spec|blt)  %42.0 = LdFun              !v    c, e0.2
  fs              %42.1 = FrameState         R     0x556a1f30ffd0+475: [%42.0], env=e0.2
  void                    Deopt              !v    %42.1, DeadCall@0x556a1e904f70[Call#9], %42.0   !
BB37   <- [36, 44, 64]
  val?^ | miss    %37.0 = LdVar              eR    strict, e0.2
  void                    Visible            v     
  val?            %37.2 = Force!<lazy>       !     %37.0, e0.2   <lgl$->
  lgl$#-          %37.3 = CheckTrueFalse     we    %37.2
  void                    Branch                   %37.3 -> BB39 (if true) | BB38 (if false)
BB45   <- [43]
  void                    StVar              lW    canCache, true, e0.2
  void                    StVar              lW    inherited, false, e0.2
  val?^ | miss    %45.2 = LdVar              eR    is, e0.2
  lgl$#-          %45.3 = Identical                %45.2, function(object, class2) <(rir::DispatchTable*|...
  void                    Branch                   %45.3 -> BB130 (if true) | BB131 (if false)
BB44   <- [43]
  void                    Nop                !     
  goto BB37
BB39   <- [37]
  (cls|spec|blt)  %39.0 = LdFun              !     asMethod, e0.2
  prom-           %39.1 = MkArg                    unboundValue, as[0x556a1f3c9300]_p18, e0.2
  val?            %39.2 = Call               !     %39.0(%39.1) e0.2   <(str|cls)>
  val?            %39.3 = %39.2
  goto BB40
BB38   <- [37]
  (cls|spec|blt)  %38.0 = LdFun              !v    asMethod, e0.2
  fs              %38.1 = FrameState         R     0x556a1f30ffd0+1947: [%38.0], env=e0.2
  void                    Deopt              !v    %38.1, DeadCall@0x556a1e904f70[Call#38], %38.0   !
BB130   <- [45]
  prom-           %130.0 = MkArg                    unboundValue, as[0x556a1f3c9300]_p23, e0.2
  prom-           %130.1 = MkArg                    unboundValue, as[0x556a1f3c9300]_p24, e0.2
  val?            %130.2 = Call               !v    function(object, class2) <(rir::DispatchTable*|...(%130.0, %130.1) e0.2   <lgl$->
  lgl$#-          %130.3 = IsType                   %130.2 isA lgl$-
  void                    Branch                   %130.3 -> BB132 (if true) | BB133 (if false)
BB131   <- [45]
  fs              %131.0 = FrameState         R     0x556a1f30ffd0+742: [], env=e0.2
  void                    Deopt              !v    %131.0, CallTarget@0x556a1e904f70[Call#12], %45.2   !
BB132   <- [130]
  lgl$-           %132.0 = CastType           d     dn %130.2
  lgl$#-          %132.1 = CheckTrueFalse     e     %132.0
  void                    Branch                   %132.1 -> BB70 (if true) | BB50 (if false)
BB133   <- [130]
  void                    Nop                !     
  val?            %133.1 = %130.2
  dr              %133.2 = Typecheck@0x556a1e904f70[Type#39]
  goto BB48
BB70   <- [132]
  val?^ | miss    %70.0 = LdVar              eR    getClassDef, e0.2
  lgl$#-          %70.1 = Identical                %70.0, function(Class, where=topenv(parent.frame()), |...
  void                    Branch                   %70.1 -> BB134 (if true) | BB135 (if false)
BB50   <- [132]
  void                    Nop                !     
  goto BB51
BB48   <- [133, 135]
  val?^ | miss    %48.0 = Phi                      %133.1:BB133, %135.1:BB135
  val?^ | miss    %48.1 = %48.0
  dr              %48.2 = Phi                      %133.2:BB133, %135.2:BB135
  dr              %48.3 = %48.2
  fs              %48.4 = FrameState         R     0x556a1f30ffd0+779: [%130.2], env=e0.2
  void                    Deopt              !v    %48.4, %48.3, %48.1   !
BB134   <- [70]
  prom-           %134.0 = MkArg                    unboundValue, as[0x556a1f3c9300]_p33, e0.2
  prom-           %134.1 = MkArg                    unboundValue, as[0x556a1f3c9300]_p34, e0.2
  val?            %134.2 = StaticCall         !v    getClassDef[0x556a1f93b960](%134.0, %134.1) e0.2   <other>
  void                    StVar              lW    ClassDef, %134.2, e0.2
  val?^ | miss    %134.4 = LdVar              eR    isFALSE, e0.2
  lgl$#-          %134.5 = Identical                %134.4, function(x) <(rir::DispatchTable*)0x556a1f0336|...
  void                    Branch                   %134.5 -> BB136 (if true) | BB137 (if false)
BB135   <- [70]
  void                    Nop                !     
  val?^ | miss    %135.1 = %70.0
  dr              %135.2 = CallTarget@0x556a1e904f70[Call#13]
  goto BB48
BB51   <- [50, 86]
  val?^ | miss    %51.0 = LdVar              eR    asMethod, e0.2
  lgl$#-          %51.1 = IsType                   %51.0 isA val?~- | miss
  void                    Branch                   %51.1 -> BB140 (if true) | BB141 (if false)
BB136   <- [134]
  val?^ | miss    %136.0 = LdVar              eR    ext, e0.2
  val?            %136.1 = Force!<lazy>       !v    %136.0, e0.2   <other>
  prom-           %136.2 = MkArg                    %136.1, as[0x556a1f3c9300]_p35 (!refl), 
  val?            %136.3 = StaticCall         !v    isFALSE[0x556a1d3742f0](%136.2) e0.2   <lgl$->
  lgl$#-          %136.4 = IsType                   %136.3 isA lgl$-
  void                    Branch                   %136.4 -> BB138 (if true) | BB139 (if false)
BB137   <- [134]
  fs              %137.0 = FrameState         R     0x556a1f30ffd0+846: [], env=e0.2
  void                    Deopt              !v    %137.0, CallTarget@0x556a1e904f70[Call#14], %134.4   !
BB140   <- [51]
  val?~- | miss   %140.0 = CastType           d     dn %51.0
  val?-           %140.1 = Force!<value>            %140.0,    <cls->
  lgl$-           %140.2 = Is                       %140.1, NULL
  lgl$-           %140.3 = AsLogical                %140.2
  lgl$#-          %140.4 = Identical                %140.3, false
  void                    Branch                   %140.4 -> BB55 (if true) | BB54 (if false)
BB141   <- [51]
  void                    Nop                !     
  val?^ | miss    %141.1 = %51.0
  dr              %141.2 = Typecheck@0x556a1e904f70[Type#74]
  goto BB52
BB138   <- [136]
  lgl$-           %138.0 = CastType           d     dn %136.3
  lgl$#-          %138.1 = CheckTrueFalse     e     %138.0
  void                    Branch                   %138.1 -> BB91 (if true) | BB75 (if false)
BB139   <- [136]
  void                    Nop                !     
  val?            %139.1 = %136.3
  dr              %139.2 = Typecheck@0x556a1e904f70[Type#44]
  goto BB73
BB55   <- [140]
  lgl$#-          %55.0 = CheckTrueFalse     e     %140.3
  void                    Branch                   %55.0 -> BB69 (if true) | BB56 (if false)
BB54   <- [140]
  (cls|spec|blt)  %54.0 = LdFun              !v    extends, e0.2
  fs              %54.1 = FrameState         R     0x556a1f30ffd0+1355: [%140.3, %54.0], env=e0.2
  void                    Deopt              !v    %54.1, DeadCall@0x556a1e904f70[Call#27], %54.0   !
BB52   <- [141, 143, 147]
  val?^ | miss    %52.0 = Phi                      %141.1:BB141, %143.1:BB143, %147.1:BB147
  val?^ | miss    %52.1 = %52.0
  dr              %52.2 = Phi                      %141.2:BB141, %143.2:BB143, %147.2:BB147
  dr              %52.3 = %52.2
  fs              %52.4 = FrameState         R     0x556a1f30ffd0+1324: [], env=e0.2
  void                    Deopt              !v    %52.4, %52.3, %52.1   !
BB91   <- [138]
  (cls|spec|blt)  %91.0 = LdFun              !v    stop, e0.2
  fs              %91.1 = FrameState         R     0x556a1f30ffd0+1283: [%91.0], env=e0.2
  void                    Deopt              !v    %91.1, DeadCall@0x556a1e904f70[Call#24], %91.0   !
BB75   <- [138]
  val?^ | miss    %75.0 = LdVar              eR    isTRUE, e0.2
  lgl$#-          %75.1 = Identical                %75.0, function(x) <(rir::DispatchTable*)0x556a1d2de8|...
  void                    Branch                   %75.1 -> BB144 (if true) | BB145 (if false)
BB73   <- [139, 145]
  val?^ | miss    %73.0 = Phi                      %139.1:BB139, %145.1:BB145
  val?^ | miss    %73.1 = %73.0
  dr              %73.2 = Phi                      %139.2:BB139, %145.2:BB145
  dr              %73.3 = %73.2
  fs              %73.4 = FrameState         R     0x556a1f30ffd0+878: [%136.3], env=e0.2
  void                    Deopt              !v    %73.4, %73.3, %73.1   !
BB69   <- [55]
  (cls|spec|blt)  %69.0 = LdFun              !v    getClassDef, e0.2
  fs              %69.1 = FrameState         R     0x556a1f30ffd0+1410: [%69.0], env=e0.2
  void                    Deopt              !v    %69.1, DeadCall@0x556a1e904f70[Call#28], %69.0   !
BB56   <- [55]
  lgl$#-          %56.0 = CheckTrueFalse     e     %140.2
  void                    Branch                   %56.0 -> BB68 (if true) | BB57 (if false)
BB144   <- [75]
  val?^ | miss    %144.0 = LdVar              eR    ext, e0.2
  val?            %144.1 = Force!<wrapped>    !v    %144.0, e0.2   <other>
  prom-           %144.2 = MkArg                    %144.1, as[0x556a1f3c9300]_p36 (!refl), 
  val?            %144.3 = StaticCall         !v    isTRUE[0x556a1ec6de60](%144.2) e0.2   <lgl$->
  lgl$#-          %144.4 = IsType                   %144.3 isA lgl$-
  void                    Branch                   %144.4 -> BB148 (if true) | BB149 (if false)
BB145   <- [75]
  void                    Nop                !     
  val?^ | miss    %145.1 = %75.0
  dr              %145.2 = CallTarget@0x556a1e904f70[Call#15]
  goto BB73
BB68   <- [56]
  (cls|spec|blt)  %68.0 = LdFun              !v    selectMethod, e0.2
  fs              %68.1 = FrameState         R     0x556a1f30ffd0+1643: [%68.0], env=e0.2
  void                    Deopt              !v    %68.1, DeadCall@0x556a1e904f70[Call#31], %68.0   !
BB57   <- [56]
  val?^ | miss    %57.0 = LdVar              eR    canCache, e0.2
  lgl$#-          %57.1 = IsType                   %57.0 isA lgl$-
  void                    Branch                   %57.1 -> BB142 (if true) | BB143 (if false)
BB148   <- [144]
  lgl$-           %148.0 = CastType           d     dn %144.3
  lgl$#-          %148.1 = CheckTrueFalse     e     %148.0
  void                    Branch                   %148.1 -> BB90 (if true) | BB78 (if false)
BB149   <- [144]
  fs              %149.0 = FrameState         R     0x556a1f30ffd0+921: [%144.3], env=e0.2
  void                    Deopt              !v    %149.0, Typecheck@0x556a1e904f70[Type#46], %144.3   !
BB142   <- [57]
  lgl$-           %142.0 = CastType           d     dn %57.0
  lgl$#-          %142.1 = CheckTrueFalse     e     %142.0
  void                    Branch                   %142.1 -> BB67 (if true) | BB58 (if false)
BB143   <- [57]
  void                    Nop                !     
  val?^ | miss    %143.1 = %57.0
  dr              %143.2 = Typecheck@0x556a1e904f70[Type#87]
  goto BB52
BB90   <- [148]
  (cls|spec|blt)  %90.0 = LdFun              !v    .makeAsMethod, e0.2
  fs              %90.1 = FrameState         R     0x556a1f30ffd0+1212: [%90.0], env=e0.2
  void                    Deopt              !v    %90.1, DeadCall@0x556a1e904f70[Call#23], %90.0   !
BB78   <- [148]
  (cls|spec|blt)  %78.0 = LdFun              !v    @, <0x556a1b409bd8>, e0.2
  prom-           %78.1 = MkArg                    unboundValue, as[0x556a1f3c9300]_p37, e0.2
  prom-           %78.2 = MkArg                    unboundValue, as[0x556a1f3c9300]_p38, e0.2
  val?            %78.3 = Call               !v    %78.0(%78.1, %78.2) e0.2   <cls->
  void                    StVar              lW    test, %78.3, e0.2
  val?^ | miss    %78.5 = LdVar              eR    .makeAsMethod, e0.2
  lgl$#-          %78.6 = Identical                %78.5, function(expr, simple, Class, ClassDef, where)|...
  void                    Branch                   %78.6 -> BB154 (if true) | BB155 (if false)
BB67   <- [142]
  val?^ | miss    %67.0 = LdVar              eR    .asCoerceMethod, e0.2
  lgl$#-          %67.1 = Identical                %67.0, function(def, thisClass, ClassDef, replace, wh|...
  void                    Branch                   %67.1 -> BB146 (if true) | BB147 (if false)
BB58   <- [142]
  void                    Nop                !     
  goto BB59
BB154   <- [78]
  prom-           %154.0 = MkArg                    unboundValue, as[0x556a1f3c9300]_p39, e0.2
  prom-           %154.1 = MkArg                    unboundValue, as[0x556a1f3c9300]_p42, e0.2
  prom-           %154.2 = MkArg                    unboundValue, as[0x556a1f3c9300]_p45, e0.2
  prom-           %154.3 = MkArg                    unboundValue, as[0x556a1f3c9300]_p46, e0.2
  prom-           %154.4 = MkArg                    unboundValue, as[0x556a1f3c9300]_p47, e0.2
  val?            %154.5 = StaticCall         !v    .makeAsMethod[0x556a1db4ec00](%154.0, %154.1, %154.2, %154.3, %154.4) e0.2   <cls->
  void                    StVar              lW    asMethod, %154.5, e0.2
  val?^ | miss    %154.7 = LdVar              eR    is.function, e0.2
  lgl$#-          %154.8 = Identical                <blt is.function>, %154.7   <true>
  void                    Branch                   %154.8 -> BB156 (if true) | BB157 (if false)
BB155   <- [78]
  fs              %155.0 = FrameState         R     0x556a1f30ffd0+983: [], env=e0.2
  void                    Deopt              !v    %155.0, CallTarget@0x556a1e904f70[Call#17], %78.5   !
BB146   <- [67]
  prom-           %146.0 = MkArg                    unboundValue, as[0x556a1f3c9300]_p29, e0.2
  prom-           %146.1 = MkArg                    unboundValue, as[0x556a1f3c9300]_p30, e0.2
  prom-           %146.2 = MkArg                    unboundValue, as[0x556a1f3c9300]_p31, e0.2
  prom-           %146.3 = MkArg                    unboundValue, as[0x556a1f3c9300]_p32, e0.2
  val?            %146.4 = StaticCall         !v    .asCoerceMethod[0x556a1e8048c0](%146.0, %146.1, %146.2, false, %146.3) e0.2   <cls>
  void                    StVar              lW    asMethod, %146.4, e0.2
  goto BB59
BB147   <- [67]
  void                    Nop                !     
  val?^ | miss    %147.1 = %67.0
  dr              %147.2 = CallTarget@0x556a1e904f70[Call#30]
  goto BB52
BB59   <- [58, 146]
  val?^ | miss    %59.0 = LdVar              eR    asMethod, e0.2
  val?            %59.1 = Force!<value>      !v    %59.0, e0.2   <cls>
  lgl$-           %59.2 = Is                       %59.1, NULL
  lgl$#-          %59.3 = CheckTrueFalse     e     %59.2
  void                    Branch                   %59.3 -> BB66 (if true) | BB62 (if false)
BB156   <- [154]
  val?^ | miss    %156.0 = LdVar              eR    test, e0.2
  lgl$#-          %156.1 = IsType                   %156.0 isA val?~- | miss
  void                    Branch                   %156.1 -> BB158 (if true) | BB159 (if false)
BB157   <- [154]
  void                    Nop                !     
  lgl$#-          %157.1 = %154.8
  dr              %157.2 = DeadBranchReached@0x556a1e904f70[Test#1]
  goto BB81
BB66   <- [59]
  (cls|spec|blt)  %66.0 = LdFun              !v    stop, e0.2
  fs              %66.1 = FrameState         R     0x556a1f30ffd0+1881: [%66.0], env=e0.2
  void                    Deopt              !v    %66.1, DeadCall@0x556a1e904f70[Call#34], %66.0   !
BB62   <- [59]
  val?^ | miss    %62.0 = LdVar              eR    canCache, e0.2
  lgl$#-          %62.1 = IsType                   %62.0 isA lgl$-
  void                    Branch                   %62.1 -> BB150 (if true) | BB151 (if false)
BB158   <- [156]
  val?~- | miss   %158.0 = CastType           d     dn %156.0
  val?-           %158.1 = Force!<value>            %158.0,    <cls->
  lgl$#-          %158.2 = CallSafeBuiltin    wed   is.function(%158.1)    <lgl$->
  lgl$#-          %158.3 = Not                d     %158.2, elided
  void                    Branch                   %158.2 -> BB87 (if true) | BB85 (if false)
BB159   <- [156]
  void                    Nop                !     
  val?^ | miss    %159.1 = %156.0
  dr              %159.2 = Typecheck@0x556a1e904f70[Type#61]
  goto BB81
BB81   <- [157, 159]
  val?^ | miss    %81.0 = Phi                      %157.1:BB157, %159.1:BB159
  val?^ | miss    %81.1 = %81.0
  dr              %81.2 = Phi                      %157.2:BB157, %159.2:BB159
  dr              %81.3 = %81.2
  fs              %81.4 = FrameState         R     0x556a1f30ffd0+1049: [], env=e0.2
  void                    Deopt              !v    %81.4, %81.3, %81.1   !
BB150   <- [62]
  lgl$-           %150.0 = CastType           d     dn %62.0
  lgl$#-          %150.1 = CheckTrueFalse     e     %150.0
  void                    Branch                   %150.1 -> BB65 (if true) | BB63 (if false)
BB151   <- [62]
  void                    Nop                !     
  val?^ | miss    %151.1 = %62.0
  dr              %151.2 = Typecheck@0x556a1e904f70[Type#99]
  goto BB60
BB87   <- [158]
  val?^ | miss    %87.0 = LdVar              eR    isTRUE, e0.2
  lgl$#-          %87.1 = Identical                %87.0, function(x) <(rir::DispatchTable*)0x556a1d2de8|...
  void                    Branch                   %87.1 -> BB160 (if true) | BB161 (if false)
BB85   <- [158]
  void                    Nop                !     
  lgl$#-          %85.1 = %158.3
  goto BB86
BB65   <- [150]
  val?^ | miss    %65.0 = LdVar              eR    cacheMethod, e0.2
  lgl$#-          %65.1 = Identical                %65.0, function(f, sig, def, args=names(sig), fdef, i|...
  void                    Branch                   %65.1 -> BB152 (if true) | BB153 (if false)
BB63   <- [150]
  void                    Nop                !     
  goto BB64
BB60   <- [151, 153]
  val?^ | miss    %60.0 = Phi                      %151.1:BB151, %153.1:BB153
  val?^ | miss    %60.1 = %60.0
  dr              %60.2 = Phi                      %151.2:BB151, %153.2:BB153
  dr              %60.3 = %60.2
  fs              %60.4 = FrameState         R     0x556a1f30ffd0+1757: [%59.1], env=e0.2
  void                    Deopt              !v    %60.4, %60.3, %60.1   !
BB160   <- [87]
  prom-           %160.0 = MkArg                    unboundValue, as[0x556a1f3c9300]_p48, e0.2
  val?            %160.1 = StaticCall         !v    isTRUE[0x556a1e7e3100](%160.0) e0.2   <lgl$->
  lgl$#-          %160.2 = IsType                   %160.1 isA lgl$-
  void                    Branch                   %160.2 -> BB162 (if true) | BB163 (if false)
BB161   <- [87]
  fs              %161.0 = FrameState         R     0x556a1f30ffd0+1140: [%158.2], env=e0.2
  void                    Deopt              !v    %161.0, CallTarget@0x556a1e904f70[Call#21], %87.0   !
BB86   <- [85, 162]
  lgl$-           %86.0 = Phi                      %162.3:BB162, %85.1:BB85
  lgl$-           %86.1 = %86.0
  void                    StVar              lW    canCache, %86.1, e0.2
  goto BB51
BB152   <- [65]
  prom-           %152.0 = MkArg                    unboundValue, as[0x556a1f3c9300]_p25, e0.2
  prom-           %152.1 = MkArg                    unboundValue, as[0x556a1f3c9300]_p26, e0.2
  prom-           %152.2 = MkArg                    unboundValue, as[0x556a1f3c9300]_p27, e0.2
  prom-           %152.3 = MkArg                    unboundValue, as[0x556a1f3c9300]_p28, e0.2
  val?            %152.4 = StaticCall         !v    cacheMethod[0x556a1ff169f0]("coerce", %152.0, %152.1, missingArg, %152.2, %152.3) { 0 1 2 4n 5n } e0.2
  goto BB64
BB153   <- [65]
  void                    Nop                !     
  val?^ | miss    %153.1 = %65.0
  dr              %153.2 = CallTarget@0x556a1e904f70[Call#33]
  goto BB60
BB64   <- [63, 152]
  void                    Nop                !     
  goto BB37
BB162   <- [160]
  lgl$-           %162.0 = CastType           d     dn %160.1
  lgl$-           %162.1 = AsLogical                %162.0
  lgl$-           %162.2 = LOr                      %158.3, %162.1
  lgl$-           %162.3 = %162.2
  goto BB86
BB163   <- [160]
  fs              %163.0 = FrameState         R     0x556a1f30ffd0+1186: [%158.3, %160.1], env=e0.2
  void                    Deopt              !v    %163.0, Typecheck@0x556a1e904f70[Type#65], %160.1   !
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     possibleExtends, e0.0
  prom-           %0.2  = MkArg                    unboundValue, as[0x556a1f3c9300]_p2, e0.0
  prom-           %0.3  = MkArg                    unboundValue, as[0x556a1f3c9300]_p3, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    thisClass, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 3:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    Class, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 4:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    object, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <(str|cls)>
  void                    Return             l     %0.3
Prom 5:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    thisClass, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$+>
  void                    Return             l     %0.3
Prom 6:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    Class, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 7:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    Class, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 8:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    thisClass, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$+>
  void                    Return             l     %0.3
Prom 9:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 10:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    coerceFun, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 11:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     environment, <0x556a1b7b0b68>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, as[0x556a1f3c9300]_p12, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <env->
  void                    Return             l     %0.3
Prom 12:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    coerceFun, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 13:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    thisClass, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$+>
  void                    Return             l     %0.3
Prom 14:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    Class, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 15:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    coerceFun, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 16:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    coerceMethods, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 17:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 18:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    object, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <(str|cls)>
  void                    Return             l     %0.3
Prom 19:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    sig, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str+>
  void                    Return             l     %0.3
Prom 20:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    coerceFun, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 21:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     getMethodsForDispatch, <0x556a1e0572f0>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, as[0x556a1f3c9300]_p22, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <env->
  void                    Return             l     %0.3
Prom 22:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    coerceFun, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 23:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    object, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 24:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    Class, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 25:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    sig, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str+>
  void                    Return             l     %0.3
Prom 26:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    asMethod, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 27:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    coerceFun, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 28:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    inherited, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <lgl$->
  void                    Return             l     %0.3
Prom 29:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    asMethod, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls->
  void                    Return             l     %0.3
Prom 30:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    thisClass, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$+>
  void                    Return             l     %0.3
Prom 31:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    ClassDef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <other>
  void                    Return             l     %0.3
Prom 32:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 33:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    Class, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 34:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 35:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    ext, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <other>
  void                    Return             l     %0.3
Prom 36:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    ext, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <other>
  void                    Return             l     %0.3
Prom 37:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    ext, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 38:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    test, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 39:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, <0x556a1b409bd8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, as[0x556a1f3c9300]_p40, e0.0
  prom-           %0.3  = MkArg                    unboundValue, as[0x556a1f3c9300]_p41, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <cls->
  void                    Return             l     %0.4
Prom 40:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    ext, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 41:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    coerce, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 42:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, <0x556a1b409bd8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, as[0x556a1f3c9300]_p43, e0.0
  prom-           %0.3  = MkArg                    unboundValue, as[0x556a1f3c9300]_p44, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <lgl$->
  void                    Return             l     %0.4
Prom 43:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    ext, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 44:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    simple, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 45:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    Class, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 46:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    ClassDef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 47:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 48:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     body, <0x556a1e5313f8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, as[0x556a1f3c9300]_p49, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <lgl$->
  void                    Return             l     %0.3
Prom 49:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    test, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls->
  void                    Return             l     %0.3

│ as[0x556a1f3c9300]                                                           │
└──────────────────────────────────────────────────────────────────────────────┘
