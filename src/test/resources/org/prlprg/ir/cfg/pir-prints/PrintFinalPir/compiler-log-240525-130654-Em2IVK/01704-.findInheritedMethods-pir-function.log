
┌──────────────────────────────────────────────────────────────────────────────┐
│ .findInheritedMethods[0x556a226bd4a0]                                        │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch miss: 7                              │
│ Properties:                                                                  │
├────── Final PIR Version
.findInheritedMethods[0x556a226bd4a0]
BB0
  val?^           %0.0  = LdArg                    2
  val?^           %0.1  = LdArg                    1
  val?^           %0.2  = LdArg                    0
  env             e0.3  = MkEnv              l     classes=%0.2, fdef=%0.1, mtable=%0.0, table(miss)=missingArg, excluded(miss)=missingArg, useInherited(miss)=missingArg, simpleOnly(miss)=missingArg, verbose(miss)=missingArg, doCache(miss)=missingArg, where(miss)=missingArg, parent=<env 0x556a1ba11378>, context 1
  prom-           %0.4  = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p0, e0.3
  val?^ | miss    %0.5  = CastType                 up %0.4
  void                    StArg              lW    table, %0.5, e0.3
  void                    StArg              lW    excluded, nil, e0.3
  prom-           %0.8  = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p4, e0.3
  val?^ | miss    %0.9  = CastType                 up %0.8
  void                    StArg              lW    simpleOnly, %0.9, e0.3
  void                    StArg              lW    verbose, false, e0.3
  prom-           %0.12 = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p7, e0.3
  val?^ | miss    %0.13 = CastType                 up %0.12
  void                    StArg              lW    doCache, %0.13, e0.3
  prom-           %0.15 = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p9, e0.3
  val?^ | miss    %0.16 = CastType                 up %0.15
  void                    StArg              lW    where, %0.16, e0.3
  cls             %0.18 = MkCls                    .findInheritedMethods>plist@677, e0.3
  val?^ | miss    %0.19 = LdVar              eR    .allowPrimitiveMethods, <env 0x556a1ba11378>
  lgl$#-          %0.20 = Identical                %0.19, function(onOff) <(rir::DispatchTable*)0x556a1e|...
  void                    Branch                   %0.20 -> BB282 (if true) | BB283 (if false)
BB282   <- [0]
  ct              %282.0 = PushContext        lCL   false, .allowPrimitiveMethods(FALSE), function(onOff) <(rir::DispatchTable*)0x556a1e|..., e0.3
  val?^ | miss    %282.1 = LdVar              eR    .Call, <env 0x556a1ba11378>
  lgl$#-          %282.2 = Identical                <blt .Call>, %282.1   <true>
  void                    Branch                   %282.2 -> BB284 (if true) | BB285 (if false)
BB283   <- [0]
  fs              %283.0 = FrameState         R     0x556a23f8da70+0: [], env=e0.3
  void                    Deopt              !v    %283.0, CallTarget@0x556a225cd830[Call#5], %0.19
BB284   <- [282]
  val?^ | miss    %284.0 = LdVar              eR    C_R_M_setPrimitiveMethods, <env 0x556a1ba11378>
  env             e284.1 = MkEnv              l     onOff=false, code="CLEAR", parent=<env 0x556a1ba11378>, context 1
  val?            %284.2 = Force!<value>      !v    %284.0, e284.1   <vec>
  val?^ | miss    %284.3 = LdVar              eR    code, e284.1
  val?            %284.4 = Force!<value>      !v    %284.3, e284.1   <str$->
  val?            %284.5 = CallBuiltin        !v    .Call(%284.2, "", nil, %284.4, nil, nil) e284.1   <lgl$->
  lgl$#-          %284.6 = IsType                   %284.5 isA lgl$-
  void                    Branch                   %284.6 -> BB286 (if true) | BB287 (if false)
BB285   <- [282]
  fs              %285.0 = FrameState         R     0x556a23f8da70+32: [], env=e0.3
  env             e285.1 = (MkEnv)            l     onOff=false, parent=<env 0x556a1ba11378>, context 1
  fs              %285.2 = FrameState         R     0x556a1e9cb710+15: [false], env=e285.1, next=%285.0
  void                    Deopt              !v    %285.2, DeadBranchReached@0x556a1fdf3008[Test#0], %282.2   !
BB286   <- [284]
  lgl$-           %286.0 = CastType           d     dn %284.5
  val?            %286.1 = PopContext         C     %286.0, %282.0   <lgl$->
  lgl$#-          %286.2 = IsType                   %286.1 isA lgl$-
  void                    Branch                   %286.2 -> BB288 (if true) | BB289 (if false)
BB287   <- [284]
  fs              %287.0 = FrameState         R     0x556a23f8da70+32: [], env=e0.3
  fs              %287.1 = FrameState         R     0x556a1e9cb710+200: [%284.5], env=e284.1, next=%287.0
  void                    Deopt              !v    %287.1, Typecheck@0x556a1fdf3008[Type#5], %284.5   !
BB288   <- [286]
  lgl$-           %288.0 = CastType           d     dn %286.1
  void                    StVar              lW    primMethods, %288.0, e0.3
  (cls|spec|blt)  %288.2 = LdFun              !v    on.exit, <0x556a1b409270>, e0.3
  prom-           %288.3 = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p11, e0.3
  val?            %288.4 = Call               !v    %288.2(%288.3) e0.3
  val?^ | miss    %288.5 = LdVar              eR    is.environment, e0.3
  lgl$#-          %288.6 = Identical                <blt is.environment>, %288.5   <true>
  void                    Branch                   %288.6 -> BB290 (if true) | BB291 (if false)
BB289   <- [286]
  fs              %289.0 = FrameState         R     0x556a23f8da70+32: [%286.1], env=e0.3
  void                    Deopt              !v    %289.0, Typecheck@0x556a225cd830[Type#9], %286.1   !
BB290   <- [288]
  val?^ | miss    %290.0 = LdVar              eR    table, e0.3
  val?            %290.1 = Force!<lazy>       !v    %290.0, e0.3   <env->
  lgl$#-          %290.2 = CallSafeBuiltin    wed   is.environment(%290.1)    <lgl$->
  void                    Branch                   %290.2 -> BB14 (if true) | BB13 (if false)
BB291   <- [288]
  fs              %291.0 = FrameState         R     0x556a23f8da70+78: [%288.4], env=e0.3
  void                    Deopt              !v    %291.0, DeadBranchReached@0x556a225cd830[Test#0], %288.6   !
BB14   <- [290]
  val?^ | miss    %14.0 = LdVar              eR    length, e0.3
  lgl$#-          %14.1 = Identical                <blt length>, %14.0   <true>
  void                    Branch                   %14.1 -> BB292 (if true) | BB293 (if false)
BB13   <- [290]
  (cls|spec|blt)  %13.0 = LdFun              !v    is, e0.3
  fs              %13.1 = FrameState         R     0x556a23f8da70+192: [%13.0], env=e0.3
  void                    Deopt              !v    %13.1, DeadCall@0x556a225cd830[Call#9], %13.0   !
BB292   <- [14]
  (cls|spec|blt)  %292.0 = LdFun              !v    @, <0x556a1b409bd8>, e0.3
  prom-           %292.1 = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p13, e0.3
  prom-           %292.2 = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p14, e0.3
  val?            %292.3 = Call               !v    %292.0(%292.1, %292.2) e0.3   <vec->
  lgl$#-          %292.4 = IsType                   %292.3 isA val?-
  void                    Branch                   %292.4 -> BB294 (if true) | BB295 (if false)
BB293   <- [14]
  fs              %293.0 = FrameState         R     0x556a23f8da70+170: [%290.2], env=e0.3
  void                    Deopt              !v    %293.0, DeadBranchReached@0x556a225cd830[Test#1], %14.1   !
BB294   <- [292]
  val?-           %294.0 = CastType           d     dn %292.3   <vec->
  (int|real)$-    %294.1 = CallSafeBuiltin    wed   length(%294.0)    <int$->
  lgl$#-          %294.2 = IsType                   %294.1 isA int$-
  void                    Branch                   %294.2 -> BB296 (if true) | BB297 (if false)
BB295   <- [292]
  fs              %295.0 = FrameState         R     0x556a23f8da70+416: [<blt length>, %292.3], env=e0.3
  void                    Deopt              !v    %295.0, Typecheck@0x556a225cd830[Type#27], %292.3   !
BB296   <- [294]
  int$-           %296.0 = CastType           d     dn %294.1
  lgl$-           %296.1 = Gt                 d     %296.0, 0L, elided   <lgl$->
  void                    StVar              lW    hasGroup, %296.1, e0.3
  lgl$#-          %296.3 = CheckTrueFalse     e     %296.1
  void                    Branch                   %296.3 -> BB280 (if true) | BB21 (if false)
BB297   <- [294]
  fs              %297.0 = FrameState         R     0x556a23f8da70+438: [%294.1], env=e0.3
  void                    Deopt              !v    %297.0, Typecheck@0x556a225cd830[Type#28], %294.1   !
BB280   <- [296]
  (cls|spec|blt)  %280.0 = LdFun              !v    .getAllGroups, e0.3
  fs              %280.1 = FrameState         R     0x556a23f8da70+494: [%280.0], env=e0.3
  void                    Deopt              !v    %280.1, DeadCall@0x556a225cd830[Call#18], %280.0   !
BB21   <- [296]
  val?^ | miss    %21.0 = LdVar              eR    length, e0.3
  lgl$#-          %21.1 = Identical                <blt length>, %21.0   <true>
  void                    Branch                   %21.1 -> BB298 (if true) | BB299 (if false)
BB298   <- [21]
  val?^ | miss    %298.0 = LdVar              eR    excluded, e0.3
  val?            %298.1 = Force!<lazy>       !v    %298.0, e0.3   <(nil|str)->
  lgl$#-          %298.2 = IsType                   %298.1 isA val?-
  void                    Branch                   %298.2 -> BB300 (if true) | BB301 (if false)
BB299   <- [21]
  fs              %299.0 = FrameState         R     0x556a23f8da70+464: [], env=e0.3
  void                    Deopt              !v    %299.0, DeadBranchReached@0x556a225cd830[Test#2], %21.1   !
BB300   <- [298]
  val?-           %300.0 = CastType           d     dn %298.1   <(nil|str)->
  (int|real)$-    %300.1 = CallSafeBuiltin    wed   length(%300.0)    <int$->
  lgl$#-          %300.2 = IsType                   %300.1 isA int$-
  void                    Branch                   %300.2 -> BB302 (if true) | BB303 (if false)
BB301   <- [298]
  fs              %301.0 = FrameState         R     0x556a23f8da70+604: [<blt length>, %298.1], env=e0.3
  void                    Deopt              !v    %301.0, Typecheck@0x556a225cd830[Type#35], %298.1   !
BB302   <- [300]
  int$-           %302.0 = CastType           d     dn %300.1
  lgl$-           %302.1 = Gt                 d     %302.0, 0L, elided   <lgl$->
  void                    StVar              lW    doExcluded, %302.1, e0.3
  val?^ | miss    %302.3 = LdVar              eR    verbose, e0.3
  val?            %302.4 = Force!<lazy>       !v    %302.3, e0.3   <lgl$->
  lgl$#-          %302.5 = CheckTrueFalse     we    %302.4
  void                    Branch                   %302.5 -> BB279 (if true) | BB28 (if false)
BB303   <- [300]
  fs              %303.0 = FrameState         R     0x556a23f8da70+626: [%300.1], env=e0.3
  void                    Deopt              !v    %303.0, Typecheck@0x556a225cd830[Type#36], %300.1   !
BB279   <- [302]
  void                    StVar              lW    plist, %0.18, e0.3
  (cls|spec|blt)  %279.1 = LdFun              !v    cat, e0.3
  fs              %279.2 = FrameState         R     0x556a23f8da70+707: [%279.1], env=e0.3
  void                    Deopt              !v    %279.2, DeadCall@0x556a225cd830[Call#21], %279.1   !
BB28   <- [302]
  val?^ | miss    %28.0 = LdVar              eR    length, e0.3
  lgl$#-          %28.1 = Identical                <blt length>, %28.0   <true>
  void                    Branch                   %28.1 -> BB304 (if true) | BB305 (if false)
BB304   <- [28]
  val?^ | miss    %304.0 = LdVar              eR    classes, e0.3
  val?            %304.1 = Force!<lazy>       !v    %304.0, e0.3   <(str|vec)>
  val?            %304.2 = CallBuiltin        !v    length(%304.1) e0.3   <int$->
  lgl$#-          %304.3 = IsType                   %304.2 isA int$-
  void                    Branch                   %304.3 -> BB306 (if true) | BB307 (if false)
BB305   <- [28]
  fs              %305.0 = FrameState         R     0x556a23f8da70+667: [%302.5], env=e0.3
  void                    Deopt              !v    %305.0, DeadBranchReached@0x556a225cd830[Test#4], %28.1   !
BB306   <- [304]
  int$-           %306.0 = CastType           d     dn %304.2
  void                    StVar              lW    nargs, %306.0, e0.3
  lgl$-           %306.2 = Missing            eR    useInherited, e0.3
  lgl$-           %306.3 = Not                d     %306.2, elided
  lgl$-           %306.4 = AsLogical                %306.3
  lgl$#-          %306.5 = Identical                %306.4, false
  void                    Branch                   %306.5 -> BB278 (if true) | BB31 (if false)
BB307   <- [304]
  fs              %307.0 = FrameState         R     0x556a23f8da70+866: [%304.2], env=e0.3
  void                    Deopt              !v    %307.0, Typecheck@0x556a225cd830[Type#61], %304.2   !
BB278   <- [306]
  void                    Nop                !     
  lgl$-           %278.1 = %306.4
  goto BB38
BB31   <- [306]
  val?^ | miss    %31.0 = LdVar              eR    length, e0.3
  lgl$#-          %31.1 = Identical                <blt length>, %31.0   <@?>
  void                    Branch                   %31.1 -> BB33 (if true) | BB32 (if false)
BB38   <- [278, 310]
  lgl$-           %38.0 = Phi                      %310.4:BB310, %278.1:BB278
  lgl$-           %38.1 = %38.0
  lgl$#-          %38.2 = CheckTrueFalse     e     %38.1
  void                    Branch                   %38.2 -> BB277 (if true) | BB41 (if false)
BB33   <- [31]
  val?^ | miss    %33.0 = LdVar              eR    useInherited, e0.3
  val?            %33.1 = Force!             !v    %33.0, e0.3   <val?_>
  lgl$#-          %33.2 = IsType                   %33.1 isA val?+
  void                    Branch                   %33.2 -> BB308 (if true) | BB309 (if false)
BB32   <- [31]
  (cls|spec|blt)  %32.0 = LdFun              !v    length, e0.3
  fs              %32.1 = FrameState         R     0x556a23f8da70+922: [%306.4, %32.0], env=e0.3
  void                    Deopt              !v    %32.1, DeadCall@0x556a225cd830[Call#31], %32.0   !
BB277   <- [38]
  (cls|spec|blt)  %277.0 = LdFun              !v    rep, e0.3
  fs              %277.1 = FrameState         R     0x556a23f8da70+1028: [%277.0], env=e0.3
  void                    Deopt              !v    %277.1, DeadCall@0x556a225cd830[Call#32], %277.0   !
BB41   <- [38]
  val?^ | miss    %41.0 = LdVar              eR    hasGroup, e0.3
  lgl$#-          %41.1 = IsType                   %41.0 isA lgl$-
  void                    Branch                   %41.1 -> BB312 (if true) | BB313 (if false)
BB308   <- [33]
  val?+           %308.0 = CastType           d     dn %33.1   <val?_>
  (int|real)$-    %308.1 = CallSafeBuiltin    wed   length(%308.0)    <val?_>
  val?^ | miss    %308.2 = LdVar              eR    nargs, e0.3
  val?            %308.3 = Force!             !v    %308.2, e0.3   <val?_>
  lgl$#-          %308.4 = IsType                   %308.3 isA val?+
  void                    Branch                   %308.4 -> BB310 (if true) | BB311 (if false)
BB309   <- [33]
  fs              %309.0 = FrameState         R     0x556a23f8da70+963: [%306.4, <blt length>, %33.1], env=e0.3
  void                    Deopt              !v    %309.0, Typecheck@0x556a225cd830[Type#63], %33.1   !
BB312   <- [41]
  lgl$-           %312.0 = CastType           d     dn %41.0
  lgl$-           %312.1 = AsLogical                %312.0
  lgl$#-          %312.2 = Identical                %312.1, false
  void                    Branch                   %312.2 -> BB276 (if true) | BB42 (if false)
BB313   <- [41]
  fs              %313.0 = FrameState         R     0x556a23f8da70+1012: [%38.1], env=e0.3
  void                    Deopt              !v    %313.0, Typecheck@0x556a225cd830[Type#70], %41.0   !
BB310   <- [308]
  val?+           %310.0 = CastType           d     dn %308.3   <val?_>
  lgl             %310.1 = Lt                 wed   %308.1, %310.0, elided   <val?_>
  lgl$-           %310.2 = AsLogical          e     %310.1
  lgl$-           %310.3 = LAnd                     %306.4, %310.2
  lgl$-           %310.4 = %310.3
  goto BB38
BB311   <- [308]
  fs              %311.0 = FrameState         R     0x556a23f8da70+999: [%306.4, %308.1, %308.3], env=e0.3
  void                    Deopt              !v    %311.0, Typecheck@0x556a225cd830[Type#65], %308.3   !
BB276   <- [312]
  void                    Nop                !     
  lgl$-           %276.1 = %312.1
  goto BB45
BB42   <- [312]
  val?^ | miss    %42.0 = LdVar              eR    doExcluded, e0.3
  val?            %42.1 = Force!             !v    %42.0, e0.3   <val?_>
  lgl$#-          %42.2 = IsType                   %42.1 isA val?+
  void                    Branch                   %42.2 -> BB314 (if true) | BB315 (if false)
BB45   <- [276, 314]
  lgl$-           %45.0 = Phi                      %314.4:BB314, %276.1:BB276
  lgl$-           %45.1 = %45.0
  lgl$#-          %45.2 = CheckTrueFalse     e     %45.1
  void                    Branch                   %45.2 -> BB275 (if true) | BB46 (if false)
BB314   <- [42]
  val?+           %314.0 = CastType           d     dn %42.1   <val?_>
  lgl             %314.1 = Not                wed   %314.0, elided
  lgl$-           %314.2 = AsLogical          e     %314.1
  lgl$-           %314.3 = LAnd                     %312.1, %314.2
  lgl$-           %314.4 = %314.3
  goto BB45
BB315   <- [42]
  fs              %315.0 = FrameState         R     0x556a23f8da70+1112: [%312.1, %42.1], env=e0.3
  void                    Deopt              !v    %315.0, Typecheck@0x556a225cd830[Type#71], %42.1   !
BB275   <- [45]
  (cls|spec|blt)  %275.0 = LdFun              !v    .sigLabel, e0.3
  fs              %275.1 = FrameState         R     0x556a23f8da70+1136: [%275.0], env=e0.3
  void                    Deopt              !v    %275.1, DeadCall@0x556a225cd830[Call#33], %275.0   !
BB46   <- [45]
  val?^ | miss    %46.0 = LdVar              eR    classes, e0.3
  val?            %46.1 = Force!<wrapped>    !v    %46.0, e0.3   <(str|vec)>
  val?            %46.2 = Extract2_1D        !v    %46.1, 1L, e0.3   <str$+>
  void                    StVar              lW    cl1, %46.2, e0.3
  val?^ | miss    %46.4 = LdVar              eR    getClass, e0.3
  lgl$#-          %46.5 = Identical                %46.4, function(Class, .Force=FALSE, where=.classEnv(|...
  void                    Branch                   %46.5 -> BB316 (if true) | BB317 (if false)
BB316   <- [46]
  prom-           %316.0 = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p15 (!refl), e0.3
  prom-           %316.1 = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p16, e0.3
  val?            %316.2 = StaticCall         !v    getClass[0x556a27b16190](%316.0, true, %316.1) { 0 2n 1n } e0.3   <other>
  void                    StVar              lW    def, %316.2, e0.3
  lgl$-           %316.4 = Missing            eR    useInherited, e0.3
  lgl$-           %316.5 = AsLogical                %316.4
  lgl$#-          %316.6 = Identical                %316.5, true
  void                    Branch                   %316.6 -> BB274 (if true) | BB49 (if false)
BB317   <- [46]
  fs              %317.0 = FrameState         R     0x556a23f8da70+1502: [], env=e0.3
  void                    Deopt              !v    %317.0, CallTarget@0x556a225cd830[Call#37], %46.4   !
BB274   <- [316]
  void                    Nop                !     
  lgl$-           %274.1 = %316.5
  goto BB52
BB49   <- [316]
  val?^ | miss    %49.0 = LdVar              eR    useInherited, e0.3
  val?            %49.1 = Force!             !v    %49.0, e0.3   <val?_>
  lgl$#-          %49.2 = IsType                   %49.1 isA val?+
  void                    Branch                   %49.2 -> BB318 (if true) | BB319 (if false)
BB52   <- [274, 318]
  lgl$-           %52.0 = Phi                      %318.4:BB318, %274.1:BB274
  lgl$-           %52.1 = %52.0
  lgl$#-          %52.2 = CheckTrueFalse     e     %52.1
  void                    Branch                   %52.2 -> BB258 (if true) | BB55 (if false)
BB318   <- [49]
  val?+           %318.0 = CastType           d     dn %49.1   <val?_>
  val?            %318.1 = Extract2_1D        wed   %318.0, 1L, elided   <val?_>
  lgl$-           %318.2 = AsLogical          e     %318.1
  lgl$-           %318.3 = LOr                      %316.5, %318.2
  lgl$-           %318.4 = %318.3
  goto BB52
BB319   <- [49]
  fs              %319.0 = FrameState         R     0x556a23f8da70+1592: [%316.5, %49.1], env=e0.3
  void                    Deopt              !v    %319.0, Typecheck@0x556a225cd830[Type#91], %49.1   !
BB258   <- [52]
  val?^ | miss    %258.0 = LdVar              eR    c, e0.3
  lgl$#-          %258.1 = Identical                <blt c>, %258.0   <true>
  void                    Branch                   %258.1 -> BB320 (if true) | BB321 (if false)
BB55   <- [52]
  val?^ | miss    %55.0 = LdVar              eR    cl1, e0.3
  val?            %55.1 = Force!             !v    %55.0, e0.3   <val?_>
  val?            %55.2 = %55.1
  goto BB56
BB320   <- [258]
  val?^ | miss    %320.0 = LdVar              eR    cl1, e0.3
  lgl$#-          %320.1 = IsType                   %320.0 isA val?~+ | miss
  void                    Branch                   %320.1 -> BB324 (if true) | BB325 (if false)
BB321   <- [258]
  void                    Nop                !     
  lgl$#-          %321.1 = %258.1
  dr              %321.2 = DeadBranchReached@0x556a225cd830[Test#10]
  goto BB53
BB56   <- [55, 376]
  val?            %56.0 = Phi                      %55.2:BB55, %376.2:BB376   <str->
  val?            %56.1 = %56.0
  void                    StVar              lW    labels, %56.1, e0.3
  val?^ | miss    %56.3 = LdVar              eR    list, e0.3
  lgl$#-          %56.4 = Identical                <blt list>, %56.3   <true>
  void                    Branch                   %56.4 -> BB322 (if true) | BB323 (if false)
BB324   <- [320]
  val?~+ | miss   %324.0 = CastType           d     dn %320.0
  val?+           %324.1 = Force!<value>            %324.0,    <str$+>
  val?^ | miss    %324.2 = LdVar              eR    .eligibleSuperClasses, e0.3
  lgl$#-          %324.3 = Identical                %324.2, function(contains, simpleOnly) <(rir::Dispatch|...
  void                    Branch                   %324.3 -> BB326 (if true) | BB327 (if false)
BB325   <- [320]
  void                    Nop                !     
  val?^ | miss    %325.1 = %320.0
  dr              %325.2 = Typecheck@0x556a225cd830[Type#100]
  goto BB53
BB53   <- [321, 325, 327]
  val?^ | miss    %53.0 = Phi                      %321.1:BB321, %325.1:BB325, %327.1:BB327
  val?^ | miss    %53.1 = %53.0
  dr              %53.2 = Phi                      %321.2:BB321, %325.2:BB325, %327.2:BB327
  dr              %53.3 = %53.2
  fs              %53.4 = FrameState         R     0x556a23f8da70+1643: [%52.1], env=e0.3
  void                    Deopt              !v    %53.4, %53.3, %53.1   !
BB322   <- [56]
  val             %322.0 = ChkMissing         e     %56.1
  val+            %322.1 = CallSafeBuiltin    wed   list(%56.1)    <vec$->
  void                    StVar              lW    supersList, %322.1, e0.3
  val?^ | miss    %322.3 = LdVar              eR    vector, e0.3
  lgl$#-          %322.4 = Identical                %322.3, function(mode="logical", length=0L) <(rir::Dis|...
  void                    Branch                   %322.4 -> BB328 (if true) | BB329 (if false)
BB323   <- [56]
  fs              %323.0 = FrameState         R     0x556a23f8da70+1831: [], env=e0.3
  void                    Deopt              !v    %323.0, DeadBranchReached@0x556a225cd830[Test#11], %56.4   !
BB326   <- [324]
  prom-           %326.0 = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p90, e0.3
  prom-           %326.1 = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p93, e0.3
  ct              %326.2 = PushContext        lCL   %326.0, %326.1, .eligibleSuperClasses(@(def, contains), simple|..., function(contains, simpleOnly) <(rir::Dispatch|..., e0.3
  val?^           %326.3 = CastType                 up %326.1
  val?^           %326.4 = CastType                 up %326.0
  val?^ | miss    %326.5 = LdVar              eR    names, <env 0x556a1ba11378>
  lgl$#-          %326.6 = Identical                <blt names>, %326.5   <true>
  void                    Branch                   %326.6 -> BB334 (if true) | BB335 (if false)
BB327   <- [324]
  void                    Nop                !     
  val?^ | miss    %327.1 = %324.2
  dr              %327.2 = CallTarget@0x556a225cd830[Call#41]
  goto BB53
BB328   <- [322]
  val?^ | miss    %328.0 = LdVar              eR    nargs, e0.3
  lgl$#-          %328.1 = IsType                   %328.0 isA int$-
  void                    Branch                   %328.1 -> BB330 (if true) | BB331 (if false)
BB329   <- [322]
  void                    Nop                !     
  val?^ | miss    %329.1 = %322.3
  dr              %329.2 = CallTarget@0x556a225cd830[Call#44]
  goto BB59
BB334   <- [326]
  env             e334.0 = MkEnv              l     contains=%326.4, simpleOnly=%326.3, parent=<env 0x556a1ba11378>, context 1
  val?            %334.1 = Force!<lazy>       !vL   %326.4, e334.0   <vec+>
  lgl$#-          %334.2 = IsType                   %334.1 isA val?+
  void                    Branch                   %334.2 -> BB338 (if true) | BB339 (if false)
BB335   <- [326]
  fs              %335.0 = FrameState         R     0x556a23f8da70+1789: [<blt c>, %324.1], env=e0.3
  env             e335.1 = (MkEnv)            l     contains=%326.4, simpleOnly=%326.3, parent=<env 0x556a1ba11378>, context 1
  fs              %335.2 = FrameState         R     0x556a211579f0+17: [<blt names>, %326.6], env=e335.1, next=%335.0
  void                    Deopt              !v    %335.2, DeadBranchReached@0x556a225da788[Test#0], %326.6   !
BB330   <- [328]
  int$-           %330.0 = CastType           d     dn %328.0
  vec-            %330.1 = CallSafeBuiltin    wed   vector("list", %330.0)    <vec->
  void                    StVar              lW    classDefs, %330.1, e0.3
  val?^ | miss    %330.3 = LdVar              eR    def, e0.3
  val?            %330.4 = Force!<value>      !v    %330.3, e0.3   <other>
  val?^ | miss    %330.5 = LdVar              eR    classDefs !upd, e0.3
  lgl$#-          %330.6 = IsType                   %330.5 isA val?~- | miss
  void                    Branch                   %330.6 -> BB332 (if true) | BB333 (if false)
BB331   <- [328]
  void                    Nop                !     
  val?^ | miss    %331.1 = %328.0
  dr              %331.2 = Typecheck@0x556a225cd830[Type#110]
  goto BB59
BB59   <- [329, 331]
  val?^ | miss    %59.0 = Phi                      %329.1:BB329, %331.1:BB331
  val?^ | miss    %59.1 = %59.0
  dr              %59.2 = Phi                      %329.2:BB329, %331.2:BB331
  dr              %59.3 = %59.2
  fs              %59.4 = FrameState         R     0x556a23f8da70+1936: [], env=e0.3
  void                    Deopt              !v    %59.4, %59.3, %59.1   !
BB338   <- [334]
  val?+           %338.0 = CastType           d     dn %334.1   <vec+>
  val+            %338.1 = CallSafeBuiltin    wed   names(%338.0)    <(nil|str)->
  void                    StVar              lW    what, %338.1, e334.0
  val?^ | miss    %338.3 = LdVar              eR    length, <env 0x556a1ba11378>
  lgl$#-          %338.4 = Identical                <blt length>, %338.3   <true>
  void                    Branch                   %338.4 -> BB340 (if true) | BB341 (if false)
BB339   <- [334]
  fs              %339.0 = FrameState         R     0x556a23f8da70+1789: [<blt c>, %324.1], env=e0.3
  fs              %339.1 = FrameState         R     0x556a211579f0+69: [<blt names>, %334.1], env=e334.0, next=%339.0
  void                    Deopt              !v    %339.1, Typecheck@0x556a225da788[Type#1], %334.1   !
BB332   <- [330]
  val?~- | miss   %332.0 = CastType           d     dn %330.5
  val?-           %332.1 = Force!<value>            %332.0,    <vec->
  val?            %332.2 = Subassign2_1D      !v    %330.4, %332.1, 1L, e0.3
  void                    StVar              lW    classDefs, %332.2, e0.3
  val?^ | miss    %332.4 = LdVar              eR    nargs, e0.3
  lgl$#-          %332.5 = IsType                   %332.4 isA int$-
  void                    Branch                   %332.5 -> BB336 (if true) | BB337 (if false)
BB333   <- [330]
  fs              %333.0 = FrameState         R     0x556a23f8da70+1996: [%330.4], env=e0.3
  void                    Deopt              !v    %333.0, Typecheck@0x556a225cd830[Type#113], %330.5   !
BB340   <- [338]
  (int|real)$-    %340.0 = CallSafeBuiltin    wed   length(%338.1)    <int$->
  lgl$#-          %340.1 = IsType                   %340.0 isA int$-
  void                    Branch                   %340.1 -> BB354 (if true) | BB355 (if false)
BB341   <- [338]
  fs              %341.0 = FrameState         R     0x556a23f8da70+1789: [<blt c>, %324.1], env=e0.3
  fs              %341.1 = FrameState         R     0x556a211579f0+105: [], env=e334.0, next=%341.0
  void                    Deopt              !v    %341.1, DeadBranchReached@0x556a225da788[Test#1], %338.4   !
BB336   <- [332]
  int$-           %336.0 = CastType           d     dn %332.4
  lgl$-           %336.1 = Gt                 d     %336.0, 1, elided   <lgl$->
  lgl$#-          %336.2 = CheckTrueFalse     e     %336.1
  void                    Branch                   %336.2 -> BB189 (if true) | BB65 (if false)
BB337   <- [332]
  void                    Nop                !     
  val?^ | miss    %337.1 = %332.4
  dr              %337.2 = Typecheck@0x556a225cd830[Type#114]
  goto BB63
BB354   <- [340]
  int$-           %354.0 = CastType           d     dn %340.0
  lgl$-           %354.1 = Not                d     %354.0, elided
  lgl$#-          %354.2 = CheckTrueFalse     e     %354.1
  void                    Branch                   %354.2 -> BB273 (if true) | BB267 (if false)
BB355   <- [340]
  void                    Nop                !     
  (int|real)$-    %355.1 = %340.0
  dr              %355.2 = Typecheck@0x556a225da788[Type#5]
  goto BB265
BB189   <- [336]
  lgl$#-          %189.0 = ColonInputEffects        2, %336.0   <true>
  void                    Branch                   %189.0 -> BB342 (if true) | BB343 (if false)
BB65   <- [336]
  void                    Nop                !     
  goto BB66
BB63   <- [337, 343, 349, 351]
  val?^ | miss    %63.0 = Phi                      %337.1:BB337, %343.1:BB343, %349.1:BB349, %351.1:BB351
  val?^ | miss    %63.1 = %63.0
  dr              %63.2 = Phi                      %337.2:BB337, %343.2:BB343, %349.2:BB349, %351.2:BB351
  dr              %63.3 = %63.2
  fs              %63.4 = FrameState         R     0x556a23f8da70+2031: [], env=e0.3
  void                    Deopt              !v    %63.4, %63.3, %63.1   !
BB273   <- [354]
  void                    Nop                !     
  val+            %273.1 = %338.1
  goto BB270
BB267   <- [354]
  val?^ | miss    %267.0 = LdVar              eR    vapply, <env 0x556a1ba11378>
  lgl$#-          %267.1 = Identical                %267.0, function(X, FUN, FUN.VALUE, ..., USE.NAMES=TRU|...
  void                    Branch                   %267.1 -> BB364 (if true) | BB365 (if false)
BB265   <- [355, 365]
  val?^ | miss    %265.0 = Phi                      %355.1:BB355, %365.1:BB365
  val?^ | miss    %265.1 = %265.0
  dr              %265.2 = Phi                      %355.2:BB355, %365.2:BB365
  dr              %265.3 = %265.2
  fs              %265.4 = FrameState         R     0x556a23f8da70+1789: [<blt c>, %324.1], env=e0.3
  fs              %265.5 = FrameState         R     0x556a211579f0+196: [%340.0], env=e334.0, next=%265.4
  void                    Deopt              !v    %265.5, %265.3, %265.1   !
BB342   <- [189]
  int$#-          %342.0 = ColonCastRhs       e     2L, %336.0   <int$->
  lgl$#-          %342.1 = Lte                d     2L, %342.0, elided   <true>
  void                    Branch                   %342.1 -> BB348 (if true) | BB349 (if false)
BB343   <- [189]
  void                    Nop                !     
  lgl$#-          %343.1 = %189.0
  dr              %343.2 = DeadBranchReached@0x556a225cd830[Test#12]
  goto BB63
BB66   <- [65, 211]
  val?^ | miss    %66.0 = LdVar              eR    labels, e0.3
  lgl$#-          %66.1 = IsType                   %66.0 isA val?~- | miss
  void                    Branch                   %66.1 -> BB344 (if true) | BB345 (if false)
BB270   <- [273, 372]
  val?            %270.0 = Phi                      %372.2:BB372, %273.1:BB273
  val?            %270.1 = %270.0
  val?            %270.2 = PopContext         C     %270.1, %326.2   <str->
  lgl$#-          %270.3 = IsType                   %270.2 isA val?-
  void                    Branch                   %270.3 -> BB376 (if true) | BB377 (if false)
BB364   <- [267]
  prom-           %364.0 = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p124, e334.0
  prom-           %364.1 = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p125, e334.0
  val?            %364.2 = StaticCall         !v    vapply[0x556a276d9870](%364.0, %364.1, na-lgl) { 0 1 2 } e334.0   <lgl+>
  void                    StVar              lW    eligible, %364.2, e334.0
  val?^ | miss    %364.4 = LdVar              eR    what, e334.0
  lgl$#-          %364.5 = IsType                   %364.4 isA val?~- | miss
  void                    Branch                   %364.5 -> BB368 (if true) | BB369 (if false)
BB365   <- [267]
  void                    Nop                !     
  val?^ | miss    %365.1 = %267.0
  dr              %365.2 = CallTarget@0x556a225da788[Call#2]
  goto BB265
BB348   <- [342]
  lgl$#-          %348.0 = Neq                d     %342.0, 2L, elided   <true>
  void                    Branch                   %348.0 -> BB350 (if true) | BB351 (if false)
BB349   <- [342]
  void                    Nop                !     
  lgl$#-          %349.1 = %342.1
  dr              %349.2 = DeadBranchReached@0x556a225cd830[Test#15]
  goto BB63
BB344   <- [66]
  val?~- | miss   %344.0 = CastType           d     dn %66.0
  val?-           %344.1 = Force!<value>            %344.0,    <str->
  lgl$#-          %344.2 = IsType                   %344.1 isA val+   <true>
  void                    Branch                   %344.2 -> BB346 (if true) | BB347 (if false)
BB345   <- [66]
  void                    Nop                !     
  val?^ | miss    %345.1 = %66.0
  dr              %345.2 = Typecheck@0x556a225cd830[Type#238]
  goto BB67
BB376   <- [270]
  val?-           %376.0 = CastType           d     dn %270.2   <str->
  (list|sym|char|lgl|int|real|str|vec|complex|raw|cls|spec|blt|prom|_|code|env|ast|expressions|dots|other)+ %376.1 = CallSafeBuiltin    wed   c(%324.1, %376.0, "ANY")    <str->
  (list|sym|char|lgl|int|real|str|vec|complex|raw|cls|spec|blt|prom|_|code|env|ast|expressions|dots|other)+ %376.2 = %376.1
  goto BB56
BB377   <- [270]
  fs              %377.0 = FrameState         R     0x556a23f8da70+1789: [<blt c>, %324.1, %270.2], env=e0.3
  void                    Deopt              !v    %377.0, Typecheck@0x556a225cd830[Type#105], %270.2   !
BB368   <- [364]
  val?~- | miss   %368.0 = CastType           d     dn %364.4
  val?-           %368.1 = Force!<value>            %368.0,    <str->
  lgl$#-          %368.2 = IsType                   %368.1 isA val+   <true>
  void                    Branch                   %368.2 -> BB370 (if true) | BB371 (if false)
BB369   <- [364]
  void                    Nop                !     
  val?^ | miss    %369.1 = %364.4
  dr              %369.2 = Typecheck@0x556a225da788[Type#9]
  goto BB268
BB350   <- [348]
  void                    StVar              lW    i, 2L, e0.3
  val?^ | miss    %350.1 = LdVar              eR    getClass, e0.3
  lgl$#-          %350.2 = Identical                %350.1, function(Class, .Force=FALSE, where=.classEnv(|...
  void                    Branch                   %350.2 -> BB352 (if true) | BB353 (if false)
BB351   <- [348]
  void                    Nop                !     
  lgl$#-          %351.1 = %348.0
  dr              %351.2 = DeadBranchReached@0x556a225cd830[Test#16]
  goto BB63
BB346   <- [344]
  val?            %346.0 = Extract1_1D        wed   %344.1, -1L, elided   <str->
  void                    StVar              lW    labels, %346.0, e0.3
  val?^ | miss    %346.2 = LdVar              eR    unique, e0.3
  lgl$#-          %346.3 = Identical                %346.2, function(x, incomparables=FALSE, ...) <(rir::D|...
  void                    Branch                   %346.3 -> BB356 (if true) | BB357 (if false)
BB347   <- [344]
  void                    Nop                !     
  lgl$#-          %347.1 = %344.2
  dr              %347.2 = DeadBranchReached@0x556a225cd830[Test#27]
  goto BB67
BB67   <- [345, 347]
  val?^ | miss    %67.0 = Phi                      %345.1:BB345, %347.1:BB347
  val?^ | miss    %67.1 = %67.0
  dr              %67.2 = Phi                      %345.2:BB345, %347.2:BB347
  dr              %67.3 = %67.2
  fs              %67.4 = FrameState         R     0x556a23f8da70+3635: [], env=e0.3
  void                    Deopt              !v    %67.4, %67.3, %67.1   !
BB370   <- [368]
  val             %370.0 = ChkMissing         e     %364.2
  lgl$#-          %370.1 = IsType                   %370.0 isA lgl+
  void                    Branch                   %370.1 -> BB372 (if true) | BB373 (if false)
BB371   <- [368]
  void                    Nop                !     
  lgl$#-          %371.1 = %368.2
  dr              %371.2 = DeadBranchReached@0x556a225da788[Test#2]
  goto BB268
BB268   <- [369, 371, 373]
  val?^ | miss    %268.0 = Phi                      %369.1:BB369, %371.1:BB371, %373.1:BB373
  val?^ | miss    %268.1 = %268.0
  dr              %268.2 = Phi                      %369.2:BB369, %371.2:BB371, %373.2:BB373
  dr              %268.3 = %268.2
  fs              %268.4 = FrameState         R     0x556a23f8da70+1789: [<blt c>, %324.1], env=e0.3
  fs              %268.5 = FrameState         R     0x556a211579f0+264: [], env=e334.0, next=%268.4
  void                    Deopt              !v    %268.5, %268.3, %268.1   !
BB352   <- [350]
  prom-           %352.0 = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p66, e0.3
  prom-           %352.1 = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p68, e0.3
  val?            %352.2 = StaticCall         !v    getClass[0x556a1e1c9500](%352.0, true, %352.1) { 0 2n 1n } e0.3   <other>
  val?^ | miss    %352.3 = LdVar              eR    classDefs !upd, e0.3
  lgl$#-          %352.4 = IsType                   %352.3 isA val?~- | miss
  void                    Branch                   %352.4 -> BB358 (if true) | BB359 (if false)
BB353   <- [350]
  fs              %353.0 = FrameState         R     0x556a23f8da70+2212: [1L, %342.0, 2L], env=e0.3
  void                    Deopt              !v    %353.0, CallTarget@0x556a225cd830[Call#54], %350.1   !
BB356   <- [346]
  val             %356.0 = ChkMissing         e     %346.0
  val?            %356.1 = StaticCall         !v    unique[0x556a21419290](%346.0) { 0 } e0.3   <str->
  void                    StVar              lW    labels, %356.1, e0.3
  val?^ | miss    %356.3 = LdVar              eR    verbose, e0.3
  val?            %356.4 = Force!<wrapped>    !v    %356.3, e0.3   <lgl$->
  lgl$#-          %356.5 = CheckTrueFalse     we    %356.4
  void                    Branch                   %356.5 -> BB188 (if true) | BB73 (if false)
BB357   <- [346]
  fs              %357.0 = FrameState         R     0x556a23f8da70+3703: [], env=e0.3
  void                    Deopt              !v    %357.0, CallTarget@0x556a225cd830[Call#80], %346.2   !
BB372   <- [370]
  lgl+            %372.0 = CastType           d     dn %370.0
  val?            %372.1 = Extract1_1D        wed   %368.1, %372.0, elided   <str->
  val?            %372.2 = %372.1
  goto BB270
BB373   <- [370]
  void                    Nop                !     
  val             %373.1 = %370.0
  dr              %373.2 = Typecheck@0x556a225da788[Type#11]
  goto BB268
BB358   <- [352]
  val?~- | miss   %358.0 = CastType           d     dn %352.3
  val?-           %358.1 = Force!<value>            %358.0,    <vec->
  val?^ | miss    %358.2 = LdVar              eR    i, e0.3
  lgl$#-          %358.3 = IsType                   %358.2 isA int$-
  void                    Branch                   %358.3 -> BB360 (if true) | BB361 (if false)
BB359   <- [352]
  void                    Nop                !     
  val?^ | miss    %359.1 = %352.3
  dr              %359.2 = Typecheck@0x556a225cd830[Type#158]
  goto BB192
BB188   <- [356]
  (cls|spec|blt)  %188.0 = LdFun              !v    cat, e0.3
  fs              %188.1 = FrameState         R     0x556a23f8da70+3779: [%188.0], env=e0.3
  void                    Deopt              !v    %188.1, DeadCall@0x556a225cd830[Call#81], %188.0   !
BB73   <- [356]
  val?^ | miss    %73.0 = LdVar              eR    names, e0.3
  lgl$#-          %73.1 = Identical                <blt names>, %73.0   <true>
  void                    Branch                   %73.1 -> BB362 (if true) | BB363 (if false)
BB360   <- [358]
  int$-           %360.0 = CastType           d     dn %358.2
  val?            %360.1 = Subassign2_1D      !v    %352.2, %358.1, %360.0, e0.3
  void                    StVar              lW    classDefs, %360.1, e0.3
  void                    StVar              lW    cc, %352.2, e0.3
  lgl$-           %360.4 = Missing            eR    useInherited, e0.3
  lgl$-           %360.5 = AsLogical                %360.4
  lgl$#-          %360.6 = Identical                %360.5, true
  void                    Branch                   %360.6 -> BB257 (if true) | BB194 (if false)
BB361   <- [358]
  void                    Nop                !     
  val?^ | miss    %361.1 = %358.2
  dr              %361.2 = Typecheck@0x556a225cd830[Type#159]
  goto BB192
BB192   <- [359, 361]
  val?^ | miss    %192.0 = Phi                      %359.1:BB359, %361.1:BB361
  val?^ | miss    %192.1 = %192.0
  dr              %192.2 = Phi                      %359.2:BB359, %361.2:BB361
  dr              %192.3 = %192.2
  fs              %192.4 = FrameState         R     0x556a23f8da70+2273: [1L, %342.0, 3L, %352.2], env=e0.3
  void                    Deopt              !v    %192.4, %192.3, %192.1   !
BB362   <- [73]
  val?^ | miss    %362.0 = LdVar              eR    table, e0.3
  val?            %362.1 = Force!<wrapped>    !v    %362.0, e0.3   <env->
  lgl$#-          %362.2 = IsType                   %362.1 isA val?-
  void                    Branch                   %362.2 -> BB366 (if true) | BB367 (if false)
BB363   <- [73]
  fs              %363.0 = FrameState         R     0x556a23f8da70+3764: [%356.5], env=e0.3
  void                    Deopt              !v    %363.0, DeadBranchReached@0x556a225cd830[Test#28], %73.1   !
BB257   <- [360]
  void                    Nop                !     
  lgl$-           %257.1 = %360.5
  goto BB197
BB194   <- [360]
  val?^ | miss    %194.0 = LdVar              eR    useInherited, e0.3
  val?            %194.1 = Force!             !v    %194.0, e0.3   <val?_>
  lgl$#-          %194.2 = IsType                   %194.1 isA val+   <@?>
  void                    Branch                   %194.2 -> BB256 (if true) | BB195 (if false)
BB366   <- [362]
  val?-           %366.0 = CastType           d     dn %362.1   <env->
  val+            %366.1 = CallSafeBuiltin    wed   names(%366.0)    <str->
  void                    StVar              lW    allMethods, %366.1, e0.3
  val?^ | miss    %366.3 = LdVar              eR    match, e0.3
  lgl$#-          %366.4 = Identical                %366.3, function(x, table, nomatch=NA, incomparables=N|...
  void                    Branch                   %366.4 -> BB382 (if true) | BB383 (if false)
BB367   <- [362]
  fs              %367.0 = FrameState         R     0x556a23f8da70+3984: [<blt names>, %362.1], env=e0.3
  void                    Deopt              !v    %367.0, Typecheck@0x556a225cd830[Type#249], %362.1   !
BB197   <- [257, 196]
  lgl$-           %197.0 = Phi                      %196.5:BB196, %257.1:BB257
  lgl$-           %197.1 = %197.0
  lgl$#-          %197.2 = CheckTrueFalse     e     %197.1
  void                    Branch                   %197.2 -> BB201 (if true) | BB200 (if false)
BB256   <- [194]
  val?^ | miss    %256.0 = LdVar              eR    i, e0.3
  val?            %256.1 = Force!             !v    %256.0, e0.3   <val?_>
  val?            %256.2 = %256.1
  goto BB196
BB195   <- [194]
  prom-           %195.0 = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p89, e0.3
  prom-           %195.1 = %195.0
  goto BB196
BB382   <- [366]
  val?^ | miss    %382.0 = LdVar              eR    labels, e0.3
  lgl$#-          %382.1 = IsType                   %382.0 isA val?~- | miss
  void                    Branch                   %382.1 -> BB384 (if true) | BB385 (if false)
BB383   <- [366]
  void                    Nop                !     
  val?^ | miss    %383.1 = %366.3
  dr              %383.2 = CallTarget@0x556a225cd830[Call#86]
  goto BB76
BB201   <- [197]
  val?^ | miss    %201.0 = LdVar              eR    c, e0.3
  lgl$#-          %201.1 = Identical                <blt c>, %201.0   <true>
  void                    Branch                   %201.1 -> BB374 (if true) | BB375 (if false)
BB200   <- [197]
  (cls|spec|blt)  %200.0 = LdFun              !v    @, e0.3
  fs              %200.1 = FrameState         R     0x556a23f8da70+2420: [1L, %342.0, 3L, %200.0], env=e0.3
  void                    Deopt              !v    %200.1, DeadCall@0x556a225cd830[Call#55], %200.0   !
BB196   <- [195, 256]
  val?            %196.0 = Phi                      %256.2:BB256, %195.1:BB195
  val?            %196.1 = %196.0
  val?            %196.2 = Extract2_1D        !v    %194.1, %196.1, e0.3   <val?_>
  lgl$-           %196.3 = AsLogical          e     %196.2
  lgl$-           %196.4 = LOr                      %360.5, %196.3
  lgl$-           %196.5 = %196.4
  goto BB197
BB384   <- [382]
  val?~- | miss   %384.0 = CastType           d     dn %382.0
  val?-           %384.1 = Force!<value>            %384.0,    <str->
  val?^ | miss    %384.2 = LdVar              eR    .fillSignatures, e0.3
  lgl$#-          %384.3 = Identical                %384.2, function(sigs, n) <(rir::DispatchTable*)0x556a|...
  void                    Branch                   %384.3 -> BB386 (if true) | BB387 (if false)
BB385   <- [382]
  void                    Nop                !     
  val?^ | miss    %385.1 = %382.0
  dr              %385.2 = Typecheck@0x556a225cd830[Type#251]
  goto BB76
BB76   <- [383, 385, 387, 391]
  val?^ | miss    %76.0 = Phi                      %383.1:BB383, %385.1:BB385, %387.1:BB387, %391.1:BB391
  val?^ | miss    %76.1 = %76.0
  dr              %76.2 = Phi                      %383.2:BB383, %385.2:BB385, %387.2:BB387, %391.2:BB391
  dr              %76.3 = %76.2
  fs              %76.4 = FrameState         R     0x556a23f8da70+4020: [], env=e0.3
  void                    Deopt              !v    %76.4, %76.3, %76.1   !
BB374   <- [201]
  (cls|spec|blt)  %374.0 = LdFun              !v    @, <0x556a1b409bd8>, e0.3
  prom-           %374.1 = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p69, e0.3
  prom-           %374.2 = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p70, e0.3
  val?            %374.3 = Call               !v    %374.0(%374.1, %374.2) e0.3   <str$+>
  val?^ | miss    %374.4 = LdVar              eR    .eligibleSuperClasses, e0.3
  lgl$#-          %374.5 = Identical                %374.4, function(contains, simpleOnly) <(rir::Dispatch|...
  void                    Branch                   %374.5 -> BB378 (if true) | BB379 (if false)
BB375   <- [201]
  fs              %375.0 = FrameState         R     0x556a23f8da70+2409: [1L, %342.0, 3L, %197.1], env=e0.3
  void                    Deopt              !v    %375.0, DeadBranchReached@0x556a225cd830[Test#19], %201.1   !
BB386   <- [384]
  prom-           %386.0 = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p22 (!refl), e0.3
  prom-           %386.1 = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p23, e0.3
  ct              %386.2 = PushContext        lCL   %386.0, %386.1, .fillSignatures(allMethods, length(classes)), function(sigs, n) <(rir::DispatchTable*)0x556a|..., e0.3
  val?^           %386.3 = CastType                 up %386.1
  val?^           %386.4 = CastType                 up %386.0
  val?^ | miss    %386.5 = LdVar              eR    lengths, <env 0x556a1ba11378>
  lgl$#-          %386.6 = Identical                %386.5, function(x, use.names=TRUE) <(rir::DispatchTab|...
  void                    Branch                   %386.6 -> BB390 (if true) | BB391 (if false)
BB387   <- [384]
  void                    Nop                !     
  val?^ | miss    %387.1 = %384.2
  dr              %387.2 = CallTarget@0x556a225cd830[Call#87]
  goto BB76
BB378   <- [374]
  prom-           %378.0 = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p71, e0.3
  prom-           %378.1 = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p74, e0.3
  val?            %378.2 = StaticCall         !v    .eligibleSuperClasses[0x556a2795b390](%378.0, %378.1) e0.3   <nil->
  lgl$#-          %378.3 = IsType                   %378.2 isA val?-
  lgl$#-          %378.4 = IsType                   %374.3 isA val?+
  void                    Branch                   %378.4 -> BB380 (if true) | BB381 (if false)
BB379   <- [374]
  fs              %379.0 = FrameState         R     0x556a23f8da70+2569: [1L, %342.0, 3L, <blt c>, %374.3], env=e0.3
  void                    Deopt              !v    %379.0, CallTarget@0x556a225cd830[Call#61], %374.4   !
BB390   <- [386]
  env             e390.0 = MkEnv              l     sigs=%386.4, n=%386.3, parent=<env 0x556a1ba11378>, context 1
  prom-           %390.1 = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p130, e390.0
  ct              %390.2 = PushContext        lCL   %390.1, lengths(strsplit(sigs, "#", fixed=TRUE)), function(x, use.names=TRUE) <(rir::DispatchTab|..., e390.0
  val?^           %390.3 = CastType                 up %390.1
  env             e390.4 = MkEnv              l     x=%390.3, use.names(miss)=true, parent=R_BaseNamespace, context 1
  val?            %390.5 = Force!<lazy>       !vr   %390.3,    <vec+>
  val?            %390.6 = CallBuiltin        !v    lengths(%390.5, true) e390.4
  val?            %390.7 = PopContext         C     %390.6, %390.2   <int->
  void                    StVar              lW    siglens, %390.7, e390.0
  val?^ | miss    %390.9 = LdVar              eR    n, e390.0
  val?            %390.10 = Force!<lazy>       !v    %390.9, e390.0   <int$->
  cls             %390.11 = MkCls                    unknown--fromConstant@Prom(4)0, e390.0
  val?^ | miss    %390.12 = LdVar              eR    siglens, e390.0
  lgl$#-          %390.13 = IsType                   %390.12 isA int-
  void                    Branch                   %390.13 -> BB396 (if true) | BB397 (if false)
BB391   <- [386]
  void                    DropContext        C     
  val?^ | miss    %391.1 = %386.5
  dr              %391.2 = CallTarget@0x556a225da368[Call#0]
  goto BB76
BB380   <- [378]
  val?+           %380.0 = CastType           d     dn %374.3   <str$+>
  void                    Branch                   %378.3 -> BB388 (if true) | BB389 (if false)
BB381   <- [378]
  void                    Nop                !     
  val?            %381.1 = %374.3
  dr              %381.2 = Typecheck@0x556a225cd830[Type#177]
  goto BB204
BB396   <- [390]
  int-            %396.0 = CastType           d     dn %390.12
  val?            %396.1 = Gt                 !v    %390.10, %396.0, e390.0   <lgl->
  void                    StVar              lW    short, %396.1, e390.0
  val?^ | miss    %396.3 = LdVar              eR    vapply, e390.0
  lgl$#-          %396.4 = Identical                %396.3, function(X, FUN, FUN.VALUE, ..., USE.NAMES=TRU|...
  void                    Branch                   %396.4 -> BB400 (if true) | BB401 (if false)
BB397   <- [390]
  fs              %397.0 = FrameState         R     0x556a23f8da70+4057: [], env=e0.3
  prom-           %397.1 = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p21, e0.3
  val?^           %397.2 = CastType                 up %397.1
  prom-           %397.3 = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p20, e0.3
  val?^           %397.4 = CastType                 up %397.3
  env             e397.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%397.2, x=%397.4, parent=R_BaseNamespace, context 0
  fs              %397.6 = FrameState         R     0x556a1bc1ed40+23: [%384.1], env=e397.5, next=%397.0
  fs              %397.7 = FrameState         R     0x556a1f67ffc0+37(pr): [], env=e0.3, next=%397.6
  fs              %397.8 = FrameState         R     0x556a20b896b0+55: [%390.10], env=e390.0, next=%397.7
  void                    Deopt              !v    %397.8, Typecheck@0x556a225da368[Type#4], %390.12   !
BB388   <- [380]
  val?-           %388.0 = CastType           d     dn %378.2   <nil->
  (list|sym|char|lgl|int|real|str|vec|complex|raw|cls|spec|blt|prom|_|code|env|ast|expressions|dots|other)+ %388.1 = CallSafeBuiltin    wed   c(%380.0, %388.0, "ANY")    <str->
  void                    StVar              lW    allLabels, %388.1, e0.3
  val?^ | miss    %388.3 = LdVar              eR    outerLabels, e0.3
  lgl$#-          %388.4 = Identical                %388.3, function(labels, new) <(rir::DispatchTable*)0x|...
  void                    Branch                   %388.4 -> BB392 (if true) | BB393 (if false)
BB389   <- [380]
  void                    Nop                !     
  val?            %389.1 = %378.2
  dr              %389.2 = Typecheck@0x556a225cd830[Type#182]
  goto BB204
BB204   <- [381, 389]
  val?^ | miss    %204.0 = Phi                      %381.1:BB381, %389.1:BB389
  val?^ | miss    %204.1 = %204.0
  dr              %204.2 = Phi                      %381.2:BB381, %389.2:BB389
  dr              %204.3 = %204.2
  fs              %204.4 = FrameState         R     0x556a23f8da70+2611: [1L, %342.0, 3L, <blt c>, %374.3, %378.2], env=e0.3
  void                    Deopt              !v    %204.4, %204.3, %204.1   !
BB400   <- [396]
  prom-           %400.0 = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p132, e390.0
  prom-           %400.1 = MkArg                    %390.11, .findInheritedMethods[0x556a226bd4a0]_p134 (!refl), e390.0
  prom-           %400.2 = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p135, e390.0
  val?            %400.3 = StaticCall         !v    vapply[0x556a2750baf0](%400.0, %400.1, %400.2) { 0 1 2 } e390.0   <str->
  void                    StVar              lW    suffix, %400.3, e390.0
  val?^ | miss    %400.5 = LdVar              eR    sigs !upd, e390.0
  val?            %400.6 = Force!             !v    %400.5, e390.0
  val?^ | miss    %400.7 = LdVar              eR    paste, e390.0
  lgl$#-          %400.8 = Identical                %400.7, function(..., sep=" ", collapse=NULL, recycle0|...
  void                    Branch                   %400.8 -> BB406 (if true) | BB407 (if false)
BB401   <- [396]
  fs              %401.0 = FrameState         R     0x556a23f8da70+4057: [], env=e0.3
  prom-           %401.1 = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p21, e0.3
  val?^           %401.2 = CastType                 up %401.1
  prom-           %401.3 = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p20, e0.3
  val?^           %401.4 = CastType                 up %401.3
  env             e401.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%401.2, x=%401.4, parent=R_BaseNamespace, context 0
  fs              %401.6 = FrameState         R     0x556a1bc1ed40+23: [%384.1], env=e401.5, next=%401.0
  fs              %401.7 = FrameState         R     0x556a1f67ffc0+37(pr): [], env=e0.3, next=%401.6
  fs              %401.8 = FrameState         R     0x556a20b896b0+89: [], env=e390.0, next=%401.7
  void                    Deopt              !v    %401.8, CallTarget@0x556a225da368[Call#2], %396.3   !
BB392   <- [388]
  prom-           %392.0 = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p75, e0.3
  prom-           %392.1 = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p76 (!refl), e0.3
  val?            %392.2 = StaticCall         !v    outerLabels[0x556a1e179be0](%392.0, %392.1) e0.3   <str->
  void                    StVar              lW    labels, %392.2, e0.3
  val?^ | miss    %392.4 = LdVar              eR    c, e0.3
  lgl$#-          %392.5 = Identical                <blt c>, %392.4   <true>
  void                    Branch                   %392.5 -> BB394 (if true) | BB395 (if false)
BB393   <- [388]
  fs              %393.0 = FrameState         R     0x556a23f8da70+2653: [1L, %342.0, 3L], env=e0.3
  void                    Deopt              !v    %393.0, CallTarget@0x556a225cd830[Call#63], %388.3   !
BB406   <- [400]
  prom-           %406.0 = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p136, e390.0
  prom-           %406.1 = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p138, e390.0
  dots-           %406.2 = DotsList           l     %406.0, %406.1
  val?^ | miss    %406.3 = CastType                 up %406.0
  env             e406.4 = MkEnv              l     ...=%406.2, sep="#", collapse(miss)=nil, recycle0(miss)=false, parent=R_BaseNamespace, context 0
  val?            %406.5 = Force!             !vL   %406.3, e406.4
  val?^ | miss    %406.6 = CastType                 up %406.1
  val?            %406.7 = Force!             !vL   %406.6, e406.4
  val+            %406.8 = CallSafeBuiltin    wed   list(%406.5, %406.7)    <vec->
  lgl$#-          %406.9 = IsType                   %406.8 isA val?-
  void                    Branch                   %406.9 -> BB408 (if true) | BB409 (if false)
BB407   <- [400]
  fs              %407.0 = FrameState         R     0x556a23f8da70+4057: [], env=e0.3
  prom-           %407.1 = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p21, e0.3
  val?^           %407.2 = CastType                 up %407.1
  prom-           %407.3 = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p20, e0.3
  val?^           %407.4 = CastType                 up %407.3
  env             e407.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%407.2, x=%407.4, parent=R_BaseNamespace, context 0
  fs              %407.6 = FrameState         R     0x556a1bc1ed40+23: [%384.1], env=e407.5, next=%407.0
  fs              %407.7 = FrameState         R     0x556a1f67ffc0+37(pr): [], env=e0.3, next=%407.6
  fs              %407.8 = FrameState         R     0x556a20b896b0+154: [%400.6], env=e390.0, next=%407.7
  void                    Deopt              !v    %407.8, CallTarget@0x556a225da368[Call#4], %400.7   !
BB394   <- [392]
  val?^ | miss    %394.0 = LdVar              eR    supersList, e0.3
  lgl$#-          %394.1 = IsType                   %394.0 isA val?~- | miss
  void                    Branch                   %394.1 -> BB398 (if true) | BB399 (if false)
BB395   <- [392]
  void                    Nop                !     
  lgl$#-          %395.1 = %392.5
  dr              %395.2 = DeadBranchReached@0x556a225cd830[Test#20]
  goto BB208
BB408   <- [406]
  val-            %408.0 = CastType           d     dn %406.8   <vec->
  val+            %408.1 = CallSafeBuiltin    wed   paste(%408.0, "#", nil, false)    <str->
  val?^ | miss    %408.2 = LdVar              eR    sigs !upd, e390.0
  val?            %408.3 = Force!<wrapped>    !v    %408.2, e390.0   <str->
  val?^ | miss    %408.4 = LdVar              eR    short, e390.0
  lgl$#-          %408.5 = IsType                   %408.4 isA lgl-
  void                    Branch                   %408.5 -> BB410 (if true) | BB411 (if false)
BB409   <- [406]
  fs              %409.0 = FrameState         R     0x556a23f8da70+4057: [], env=e0.3
  prom-           %409.1 = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p21, e0.3
  val?^           %409.2 = CastType                 up %409.1
  prom-           %409.3 = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p20, e0.3
  val?^           %409.4 = CastType                 up %409.3
  env             e409.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%409.2, x=%409.4, parent=R_BaseNamespace, context 0
  fs              %409.6 = FrameState         R     0x556a1bc1ed40+23: [%384.1], env=e409.5, next=%409.0
  fs              %409.7 = FrameState         R     0x556a1f67ffc0+37(pr): [], env=e0.3, next=%409.6
  fs              %409.8 = FrameState         R     0x556a20b896b0+210: [], env=e390.0, next=%409.7
  fs              %409.9 = FrameState         R     0x556a1d357610+78: [%406.8, "#", nil, false], env=e406.4, next=%409.8
  void                    Deopt              !v    %409.9, Typecheck@0x556a1d357750[Type#0], %406.8   !
BB398   <- [394]
  val?~- | miss   %398.0 = CastType           d     dn %394.0
  val?-           %398.1 = Force!<value>            %398.0,    <vec$->
  val?^ | miss    %398.2 = LdVar              eR    list, e0.3
  lgl$#-          %398.3 = Identical                <blt list>, %398.2   <true>
  void                    Branch                   %398.3 -> BB402 (if true) | BB403 (if false)
BB399   <- [394]
  void                    Nop                !     
  val?^ | miss    %399.1 = %394.0
  dr              %399.2 = Typecheck@0x556a225cd830[Type#190]
  goto BB208
BB208   <- [395, 399, 403, 405]
  val?^ | miss    %208.0 = Phi                      %395.1:BB395, %399.1:BB399, %403.1:BB403, %405.1:BB405
  val?^ | miss    %208.1 = %208.0
  dr              %208.2 = Phi                      %395.2:BB395, %399.2:BB399, %403.2:BB403, %405.2:BB405
  dr              %208.3 = %208.2
  fs              %208.4 = FrameState         R     0x556a23f8da70+2704: [1L, %342.0, 3L], env=e0.3
  void                    Deopt              !v    %208.4, %208.3, %208.1   !
BB410   <- [408]
  lgl-            %410.0 = CastType           d     dn %408.4
  val?            %410.1 = Subassign1_1D      wed   %408.1, %408.3, %410.0, e390.0   <str->
  void                    StVar              lW    sigs, %410.1, e390.0
  val             %410.3 = ChkMissing         e     %410.1
  val?            %410.4 = PopContext         C     %410.1, %386.2   <str->
  lgl$#-          %410.5 = IsType                   %410.4 isA val?-
  void                    Branch                   %410.5 -> BB412 (if true) | BB413 (if false)
BB411   <- [408]
  fs              %411.0 = FrameState         R     0x556a23f8da70+4057: [], env=e0.3
  prom-           %411.1 = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p21, e0.3
  val?^           %411.2 = CastType                 up %411.1
  prom-           %411.3 = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p20, e0.3
  val?^           %411.4 = CastType                 up %411.3
  env             e411.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%411.2, x=%411.4, parent=R_BaseNamespace, context 0
  fs              %411.6 = FrameState         R     0x556a1bc1ed40+23: [%384.1], env=e411.5, next=%411.0
  fs              %411.7 = FrameState         R     0x556a1f67ffc0+37(pr): [], env=e0.3, next=%411.6
  fs              %411.8 = FrameState         R     0x556a20b896b0+224: [%408.1, %408.3], env=e390.0, next=%411.7
  void                    Deopt              !v    %411.8, Typecheck@0x556a225da368[Type#21], %408.4   !
BB402   <- [398]
  val?^ | miss    %402.0 = LdVar              eR    allLabels, e0.3
  lgl$#-          %402.1 = IsType                   %402.0 isA val?~- | miss
  void                    Branch                   %402.1 -> BB404 (if true) | BB405 (if false)
BB403   <- [398]
  void                    Nop                !     
  lgl$#-          %403.1 = %398.3
  dr              %403.2 = DeadBranchReached@0x556a225cd830[Test#21]
  goto BB208
BB412   <- [410]
  val?-           %412.0 = CastType           d     dn %410.4   <str->
  val+            %412.1 = CallSafeBuiltin    wed   match(%384.1, %412.0, NA, nil)    <int->
  void                    StVar              lW    m, %412.1, e0.3
  lgl$#-          %412.3 = IsType                   %412.1 isA int-
  val?^ | miss    %412.4 = LdVar              eR    is.na, e0.3
  lgl$#-          %412.5 = Identical                <blt is.na>, %412.4   <true>
  void                    Branch                   %412.5 -> BB416 (if true) | BB417 (if false)
BB413   <- [410]
  fs              %413.0 = FrameState         R     0x556a23f8da70+4057: [], env=e0.3
  prom-           %413.1 = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p21, e0.3
  val?^           %413.2 = CastType                 up %413.1
  prom-           %413.3 = MkArg                    %384.1, .findInheritedMethods[0x556a226bd4a0]_p20 (!refl), e0.3
  val?~           %413.4 = CastType                 up %413.3
  env             e413.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%413.2, x=%413.4, parent=R_BaseNamespace, context 0
  fs              %413.6 = FrameState         R     0x556a1bc1ed40+23: [%384.1], env=e413.5, next=%413.0
  fs              %413.7 = FrameState         R     0x556a1f67ffc0+37(pr): [%410.4], env=e0.3, next=%413.6
  void                    Deopt              !v    %413.7, Typecheck@0x556a1bc71cb0[Type#1], %410.4   !
BB404   <- [402]
  val?~- | miss   %404.0 = CastType           d     dn %402.0
  val?-           %404.1 = Force!<value>            %404.0,    <str->
  val+            %404.2 = CallSafeBuiltin    wed   list(%404.1)    <vec$->
  val+            %404.3 = CallSafeBuiltin    wed   c(%398.1, %404.2)    <vec->
  void                    StVar              lW    supersList, %404.3, e0.3
  int$#-          %404.5 = 3L
  goto BB210
BB405   <- [402]
  void                    Nop                !     
  val?^ | miss    %405.1 = %402.0
  dr              %405.2 = Typecheck@0x556a225cd830[Type#192]
  goto BB208
BB416   <- [412]
  void                    Branch                   %412.3 -> BB418 (if true) | BB419 (if false)
BB417   <- [412]
  void                    Nop                !     
  lgl$#-          %417.1 = %412.5
  dr              %417.2 = DeadBranchReached@0x556a225cd830[Test#29]
  goto BB90
BB210   <- [404, 526]
  int$#-          %210.0 = Phi                      %404.5:BB404, %526.5:BB526
  int$#-          %210.1 = %210.0
  lgl$#-          %210.2 = Neq                d     %342.0, %210.1, elided
  void                    Branch                   %210.2 -> BB212 (if true) | BB211 (if false)
BB418   <- [416]
  int-            %418.0 = CastType           d     dn %412.1
  lgl-            %418.1 = CallSafeBuiltin    wed   is.na(%418.0)    <lgl->
  lgl-            %418.2 = Not                wed   %418.1, elided
  void                    StVar              lW    found, %418.2, e0.3
  val?^ | miss    %418.4 = LdVar              eR    mget, e0.3
  lgl$#-          %418.5 = Identical                %418.4, function(x, envir=as.environment(-(1L)), mode=|...
  void                    Branch                   %418.5 -> BB422 (if true) | BB423 (if false)
BB419   <- [416]
  void                    Nop                !     
  val+            %419.1 = %412.1
  dr              %419.2 = Typecheck@0x556a225cd830[Type#256]
  goto BB90
BB90   <- [417, 419]
  val?^ | miss    %90.0 = Phi                      %417.1:BB417, %419.1:BB419
  val?^ | miss    %90.1 = %90.0
  dr              %90.2 = Phi                      %417.2:BB417, %419.2:BB419
  dr              %90.3 = %90.2
  fs              %90.4 = FrameState         R     0x556a23f8da70+4071: [], env=e0.3
  void                    Deopt              !v    %90.4, %90.3, %90.1   !
BB212   <- [210]
  void                    StVar              lW    i, %210.1, e0.3
  int$#-          %212.1 = Add                d     %210.1, 1L, elided
  val?^ | miss    %212.2 = LdVar              eR    getClass, e0.3
  lgl$#-          %212.3 = Identical                %212.2, function(Class, .Force=FALSE, where=.classEnv(|...
  void                    Branch                   %212.3 -> BB414 (if true) | BB415 (if false)
BB211   <- [210]
  void                    Nop                !     
  goto BB66
BB422   <- [418]
  prom-           %422.0 = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p25, e0.3
  prom-           %422.1 = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p29, e0.3
  ct              %422.2 = PushContext        lCL   %422.0, %422.1, mget([(allMethods, [(m, found)), table), function(x, envir=as.environment(-(1L)), mode=|..., e0.3
  val?^           %422.3 = CastType                 up %422.1
  val?^           %422.4 = CastType                 up %422.0
  env             e422.5 = MkEnv              l     x=%422.4, envir=%422.3, mode(miss)="any", ifnotfound(miss)=missingArg, inherits(miss)=false, parent=R_BaseNamespace, context 1
  cls             %422.6 = MkCls                    mget@133, e422.5
  val?            %422.7 = Force!<lazy>       !vL   %422.4, e422.5   <str+>
  val?            %422.8 = Force!<lazy>       !vL   %422.3, e422.5   <env->
  val?^ | miss    %422.9 = LdVar              eR    list, e422.5
  lgl$#-          %422.10 = Identical                <blt list>, %422.9   <true>
  void                    Branch                   %422.10 -> BB424 (if true) | BB425 (if false)
BB423   <- [418]
  fs              %423.0 = FrameState         R     0x556a23f8da70+4177: [], env=e0.3
  void                    Deopt              !v    %423.0, CallTarget@0x556a225cd830[Call#90], %418.4   !
BB414   <- [212]
  prom-           %414.0 = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p77, e0.3
  prom-           %414.1 = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p79, e0.3
  val?            %414.2 = StaticCall         !v    getClass[0x556a1e1c9500](%414.0, true, %414.1) { 0 2n 1n } e0.3   <other>
  val?^ | miss    %414.3 = LdVar              eR    classDefs !upd, e0.3
  lgl$#-          %414.4 = IsType                   %414.3 isA val?~- | miss
  void                    Branch                   %414.4 -> BB420 (if true) | BB421 (if false)
BB415   <- [212]
  fs              %415.0 = FrameState         R     0x556a23f8da70+2927: [1L, %342.0, %210.1], env=e0.3
  void                    Deopt              !v    %415.0, CallTarget@0x556a225cd830[Call#67], %212.2   !
BB424   <- [422]
  val+            %424.0 = CallSafeBuiltin    wed   list(%422.6)    <vec$->
  val?            %424.1 = CallBuiltin        !v    mget(%422.7, %422.8, "any", %424.0, false) e422.5
  val?            %424.2 = PopContext         C     %424.1, %422.2   <vec+>
  void                    StVar              lW    methods, %424.2, e0.3
  val?^ | miss    %424.4 = LdVar              eR    verbose, e0.3
  val?            %424.5 = Force!<wrapped>    !v    %424.4, e0.3   <lgl$->
  lgl$#-          %424.6 = CheckTrueFalse     we    %424.5
  void                    Branch                   %424.6 -> BB187 (if true) | BB98 (if false)
BB425   <- [422]
  fs              %425.0 = FrameState         R     0x556a23f8da70+4214: [], env=e0.3
  fs              %425.1 = FrameState         R     0x556a1d6f1b00+37: [%422.7, %422.8, "any"], env=e422.5, next=%425.0
  void                    Deopt              !v    %425.1, DeadBranchReached@0x556a1d4c2b30[Test#0], %422.10   !
BB420   <- [414]
  val?~- | miss   %420.0 = CastType           d     dn %414.3
  val?-           %420.1 = Force!<value>            %420.0,    <vec->
  val?^ | miss    %420.2 = LdVar              eR    i, e0.3
  lgl$#-          %420.3 = IsType                   %420.2 isA int$-
  void                    Branch                   %420.3 -> BB426 (if true) | BB427 (if false)
BB421   <- [414]
  void                    Nop                !     
  val?^ | miss    %421.1 = %414.3
  dr              %421.2 = Typecheck@0x556a225cd830[Type#201]
  goto BB215
BB187   <- [424]
  (cls|spec|blt)  %187.0 = LdFun              !v    cat, e0.3
  fs              %187.1 = FrameState         R     0x556a23f8da70+4258: [%187.0], env=e0.3
  void                    Deopt              !v    %187.1, DeadCall@0x556a225cd830[Call#91], %187.0   !
BB98   <- [424]
  val?^ | miss    %98.0 = LdVar              eR    hasGroup, e0.3
  lgl$#-          %98.1 = IsType                   %98.0 isA lgl$-
  void                    Branch                   %98.1 -> BB428 (if true) | BB429 (if false)
BB426   <- [420]
  int$-           %426.0 = CastType           d     dn %420.2
  val?            %426.1 = Subassign2_1D      !v    %414.2, %420.1, %426.0, e0.3
  void                    StVar              lW    classDefs, %426.1, e0.3
  void                    StVar              lW    cc, %414.2, e0.3
  lgl$-           %426.4 = Missing            eR    useInherited, e0.3
  lgl$-           %426.5 = AsLogical                %426.4
  lgl$#-          %426.6 = Identical                %426.5, true
  void                    Branch                   %426.6 -> BB255 (if true) | BB217 (if false)
BB427   <- [420]
  void                    Nop                !     
  val?^ | miss    %427.1 = %420.2
  dr              %427.2 = Typecheck@0x556a225cd830[Type#202]
  goto BB215
BB215   <- [421, 427]
  val?^ | miss    %215.0 = Phi                      %421.1:BB421, %427.1:BB427
  val?^ | miss    %215.1 = %215.0
  dr              %215.2 = Phi                      %421.2:BB421, %427.2:BB427
  dr              %215.3 = %215.2
  fs              %215.4 = FrameState         R     0x556a23f8da70+2988: [1L, %342.0, %212.1, %414.2], env=e0.3
  void                    Deopt              !v    %215.4, %215.3, %215.1   !
BB428   <- [98]
  lgl$-           %428.0 = CastType           d     dn %98.0
  lgl$#-          %428.1 = CheckTrueFalse     e     %428.0
  void                    Branch                   %428.1 -> BB186 (if true) | BB99 (if false)
BB429   <- [98]
  fs              %429.0 = FrameState         R     0x556a23f8da70+4243: [%424.6], env=e0.3
  void                    Deopt              !v    %429.0, Typecheck@0x556a225cd830[Type#275], %98.0   !
BB255   <- [426]
  void                    Nop                !     
  lgl$-           %255.1 = %426.5
  goto BB220
BB217   <- [426]
  val?^ | miss    %217.0 = LdVar              eR    useInherited, e0.3
  val?            %217.1 = Force!             !v    %217.0, e0.3   <val?_>
  lgl$#-          %217.2 = IsType                   %217.1 isA val+   <@?>
  void                    Branch                   %217.2 -> BB254 (if true) | BB218 (if false)
BB186   <- [428]
  (cls|spec|blt)  %186.0 = LdFun              !v    .getGroupMethods, e0.3
  fs              %186.1 = FrameState         R     0x556a23f8da70+4377: [%186.0], env=e0.3
  void                    Deopt              !v    %186.1, DeadCall@0x556a225cd830[Call#95], %186.0   !
BB99   <- [428]
  (cls|spec|blt)  %99.0 = LdFun              !v    rep, <0x556a1b41e9b0>, e0.3
  prom-           %99.1 = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p30, e0.3
  val?            %99.2 = Call               !v    %99.0(false, %99.1) e0.3   <lgl->
  void                    StVar              lW    fromGroup, %99.2, e0.3
  val?^ | miss    %99.4 = LdVar              eR    .duplicateClassesExist, e0.3
  lgl$#-          %99.5 = Identical                %99.4, function(on) <(rir::DispatchTable*)0x556a1ffd1|...
  void                    Branch                   %99.5 -> BB430 (if true) | BB431 (if false)
BB220   <- [255, 219]
  lgl$-           %220.0 = Phi                      %219.5:BB219, %255.1:BB255
  lgl$-           %220.1 = %220.0
  lgl$#-          %220.2 = CheckTrueFalse     e     %220.1
  void                    Branch                   %220.2 -> BB224 (if true) | BB223 (if false)
BB254   <- [217]
  val?^ | miss    %254.0 = LdVar              eR    i, e0.3
  val?            %254.1 = Force!             !v    %254.0, e0.3   <val?_>
  val?            %254.2 = %254.1
  goto BB219
BB218   <- [217]
  prom-           %218.0 = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p88, e0.3
  prom-           %218.1 = %218.0
  goto BB219
BB430   <- [99]
  val?            %430.0 = StaticCall         !v    .duplicateClassesExist[0x556a1f16c5f0]() e0.3   <lgl$->
  lgl$#-          %430.1 = IsType                   %430.0 isA lgl$-
  void                    Branch                   %430.1 -> BB436 (if true) | BB437 (if false)
BB431   <- [99]
  fs              %431.0 = FrameState         R     0x556a23f8da70+4367: [], env=e0.3
  void                    Deopt              !v    %431.0, CallTarget@0x556a225cd830[Call#108], %99.4   !
BB224   <- [220]
  val?^ | miss    %224.0 = LdVar              eR    c, e0.3
  lgl$#-          %224.1 = Identical                <blt c>, %224.0   <true>
  void                    Branch                   %224.1 -> BB432 (if true) | BB433 (if false)
BB223   <- [220]
  (cls|spec|blt)  %223.0 = LdFun              !v    @, e0.3
  fs              %223.1 = FrameState         R     0x556a23f8da70+3135: [1L, %342.0, %212.1, %223.0], env=e0.3
  void                    Deopt              !v    %223.1, DeadCall@0x556a225cd830[Call#68], %223.0   !
BB219   <- [218, 254]
  val?            %219.0 = Phi                      %254.2:BB254, %218.1:BB218
  val?            %219.1 = %219.0
  val?            %219.2 = Extract2_1D        !v    %217.1, %219.1, e0.3   <val?_>
  lgl$-           %219.3 = AsLogical          e     %219.2
  lgl$-           %219.4 = LOr                      %426.5, %219.3
  lgl$-           %219.5 = %219.4
  goto BB220
BB436   <- [430]
  lgl$-           %436.0 = CastType           d     dn %430.0
  lgl$#-          %436.1 = CheckTrueFalse     e     %436.0
  void                    Branch                   %436.1 -> BB185 (if true) | BB104 (if false)
BB437   <- [430]
  void                    Nop                !     
  val?            %437.1 = %430.0
  dr              %437.2 = Typecheck@0x556a225cd830[Type#304]
  goto BB102
BB432   <- [224]
  (cls|spec|blt)  %432.0 = LdFun              !v    @, <0x556a1b409bd8>, e0.3
  prom-           %432.1 = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p80, e0.3
  prom-           %432.2 = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p81, e0.3
  val?            %432.3 = Call               !v    %432.0(%432.1, %432.2) e0.3   <str$->
  val?^ | miss    %432.4 = LdVar              eR    .eligibleSuperClasses, e0.3
  lgl$#-          %432.5 = Identical                %432.4, function(contains, simpleOnly) <(rir::Dispatch|...
  void                    Branch                   %432.5 -> BB434 (if true) | BB435 (if false)
BB433   <- [224]
  fs              %433.0 = FrameState         R     0x556a23f8da70+3124: [1L, %342.0, %212.1, %220.1], env=e0.3
  void                    Deopt              !v    %433.0, DeadBranchReached@0x556a225cd830[Test#24], %224.1   !
BB185   <- [436]
  (cls|spec|blt)  %185.0 = LdFun              !v    integer, e0.3
  fs              %185.1 = FrameState         R     0x556a23f8da70+4848: [%185.0], env=e0.3
  void                    Deopt              !v    %185.1, DeadCall@0x556a225cd830[Call#109], %185.0   !
BB104   <- [436]
  val?^ | miss    %104.0 = LdVar              eR    doExcluded, e0.3
  lgl$#-          %104.1 = IsType                   %104.0 isA lgl$-
  void                    Branch                   %104.1 -> BB444 (if true) | BB445 (if false)
BB102   <- [437, 445, 453, 455, 461, 463, 471]
  val?^ | miss    %102.0 = Phi                      %437.1:BB437, %445.1:BB445, %453.1:BB453, %455.1:BB455, %461.1:BB461, %463.1:BB463, %471.1:BB471
  val?^ | miss    %102.1 = %102.0
  dr              %102.2 = Phi                      %437.2:BB437, %445.2:BB445, %453.2:BB453, %455.2:BB455, %461.2:BB461, %463.2:BB463, %471.2:BB471
  dr              %102.3 = %102.2
  fs              %102.4 = FrameState         R     0x556a23f8da70+4827: [%430.0], env=e0.3
  void                    Deopt              !v    %102.4, %102.3, %102.1   !
BB434   <- [432]
  prom-           %434.0 = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p82, e0.3
  prom-           %434.1 = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p85, e0.3
  ct              %434.2 = PushContext        lCL   %434.0, %434.1, .eligibleSuperClasses(@(cc, contains), simpleOnly), function(contains, simpleOnly) <(rir::Dispatch|..., e0.3
  val?^           %434.3 = CastType                 up %434.1
  val?^           %434.4 = CastType                 up %434.0
  val?^ | miss    %434.5 = LdVar              eR    names, <env 0x556a1ba11378>
  lgl$#-          %434.6 = Identical                <blt names>, %434.5   <true>
  void                    Branch                   %434.6 -> BB438 (if true) | BB439 (if false)
BB435   <- [432]
  void                    Nop                !     
  val?^ | miss    %435.1 = %432.4
  dr              %435.2 = CallTarget@0x556a225cd830[Call#74]
  goto BB225
BB444   <- [104]
  lgl$-           %444.0 = CastType           d     dn %104.0
  lgl$#-          %444.1 = CheckTrueFalse     e     %444.0
  void                    Branch                   %444.1 -> BB178 (if true) | BB105 (if false)
BB445   <- [104]
  void                    Nop                !     
  val?^ | miss    %445.1 = %104.0
  dr              %445.2 = Typecheck@0x556a225cd830[Type#363]
  goto BB102
BB438   <- [434]
  env             e438.0 = MkEnv              l     contains=%434.4, simpleOnly=%434.3, parent=<env 0x556a1ba11378>, context 1
  val?            %438.1 = Force!<lazy>       !v    %434.4, e438.0   <vec+>
  lgl$#-          %438.2 = IsType                   %438.1 isA val?+
  void                    Branch                   %438.2 -> BB440 (if true) | BB441 (if false)
BB439   <- [434]
  void                    DropContext        C     
  lgl$#-          %439.1 = %434.6
  dr              %439.2 = DeadBranchReached@0x556a225da788[Test#0]
  goto BB225
BB225   <- [435, 439]
  val?^ | miss    %225.0 = Phi                      %435.1:BB435, %439.1:BB439
  val?^ | miss    %225.1 = %225.0
  dr              %225.2 = Phi                      %435.2:BB435, %439.2:BB439
  dr              %225.3 = %225.2
  fs              %225.4 = FrameState         R     0x556a23f8da70+3284: [1L, %342.0, %212.1, <blt c>, %432.3], env=e0.3
  void                    Deopt              !v    %225.4, %225.3, %225.1   !
BB178   <- [444]
  val?^ | miss    %178.0 = LdVar              eR    methods, e0.3
  lgl$#-          %178.1 = IsType                   %178.0 isA val?~+ | miss
  void                    Branch                   %178.1 -> BB452 (if true) | BB453 (if false)
BB105   <- [444]
  void                    Nop                !     
  goto BB106
BB440   <- [438]
  val?+           %440.0 = CastType           d     dn %438.1   <vec+>
  val+            %440.1 = CallSafeBuiltin    wed   names(%440.0)    <(nil|str)->
  void                    StVar              lW    what, %440.1, e438.0
  val?^ | miss    %440.3 = LdVar              eR    length, e438.0
  lgl$#-          %440.4 = Identical                <blt length>, %440.3   <true>
  void                    Branch                   %440.4 -> BB442 (if true) | BB443 (if false)
BB441   <- [438]
  fs              %441.0 = FrameState         R     0x556a23f8da70+3326: [1L, %342.0, %212.1, <blt c>, %432.3], env=e0.3
  fs              %441.1 = FrameState         R     0x556a211579f0+69: [<blt names>, %438.1], env=e438.0, next=%441.0
  void                    Deopt              !v    %441.1, Typecheck@0x556a225da788[Type#1], %438.1   !
BB452   <- [178]
  val?~+ | miss   %452.0 = CastType           d     dn %178.0
  val?+           %452.1 = Force!<value>            %452.0,    <vec$+>
  lgl$#-          %452.2 = IsType                   %452.1 isA val+   <true>
  void                    Branch                   %452.2 -> BB454 (if true) | BB455 (if false)
BB453   <- [178]
  void                    Nop                !     
  val?^ | miss    %453.1 = %178.0
  dr              %453.2 = Typecheck@0x556a225cd830[Type#376]
  goto BB102
BB106   <- [105, 492]
  val?^ | miss    %106.0 = LdVar              eR    length, e0.3
  lgl$#-          %106.1 = Identical                <blt length>, %106.0   <true>
  void                    Branch                   %106.1 -> BB464 (if true) | BB465 (if false)
BB442   <- [440]
  (int|real)$-    %442.0 = CallSafeBuiltin    wed   length(%440.1)    <int$->
  lgl$#-          %442.1 = IsType                   %442.0 isA int$-
  void                    Branch                   %442.1 -> BB446 (if true) | BB447 (if false)
BB443   <- [440]
  fs              %443.0 = FrameState         R     0x556a23f8da70+3326: [1L, %342.0, %212.1, <blt c>, %432.3], env=e0.3
  fs              %443.1 = FrameState         R     0x556a211579f0+105: [], env=e438.0, next=%443.0
  void                    Deopt              !v    %443.1, DeadBranchReached@0x556a225da788[Test#1], %440.4   !
BB454   <- [452]
  val?^ | miss    %454.0 = LdVar              eR    is.na, e0.3
  lgl$#-          %454.1 = Identical                <blt is.na>, %454.0   <true>
  void                    Branch                   %454.1 -> BB460 (if true) | BB461 (if false)
BB455   <- [452]
  void                    Nop                !     
  lgl$#-          %455.1 = %452.2
  dr              %455.2 = DeadBranchReached@0x556a225cd830[Test#48]
  goto BB102
BB464   <- [106]
  val?^ | miss    %464.0 = LdVar              eR    methods, e0.3
  lgl$#-          %464.1 = IsType                   %464.0 isA val?~+ | miss
  void                    Branch                   %464.1 -> BB474 (if true) | BB475 (if false)
BB465   <- [106]
  void                    Nop                !     
  lgl$#-          %465.1 = %106.1
  dr              %465.2 = DeadBranchReached@0x556a225cd830[Test#50]
  goto BB107
BB446   <- [442]
  int$-           %446.0 = CastType           d     dn %442.0
  lgl$-           %446.1 = Not                d     %446.0, elided
  lgl$#-          %446.2 = CheckTrueFalse     e     %446.1
  void                    Branch                   %446.2 -> BB253 (if true) | BB233 (if false)
BB447   <- [442]
  void                    Nop                !     
  (int|real)$-    %447.1 = %442.0
  dr              %447.2 = Typecheck@0x556a225da788[Type#5]
  goto BB231
BB460   <- [454]
  val?^ | miss    %460.0 = LdVar              eR    match, e0.3
  lgl$#-          %460.1 = Identical                %460.0, function(x, table, nomatch=NA, incomparables=N|...
  void                    Branch                   %460.1 -> BB462 (if true) | BB463 (if false)
BB461   <- [454]
  void                    Nop                !     
  lgl$#-          %461.1 = %454.1
  dr              %461.2 = DeadBranchReached@0x556a225cd830[Test#49]
  goto BB102
BB474   <- [464]
  val?~+ | miss   %474.0 = CastType           d     dn %464.0
  val?+           %474.1 = Force!<value>            %474.0,    <vec+>
  (int|real)$-    %474.2 = CallSafeBuiltin    wed   length(%474.1)    <int$->
  lgl$#-          %474.3 = IsType                   %474.2 isA int$-
  void                    Branch                   %474.3 -> BB480 (if true) | BB481 (if false)
BB475   <- [464]
  void                    Nop                !     
  val?^ | miss    %475.1 = %464.0
  dr              %475.2 = Typecheck@0x556a225cd830[Type#384]
  goto BB107
BB107   <- [465, 475]
  val?^ | miss    %107.0 = Phi                      %465.1:BB465, %475.1:BB475
  val?^ | miss    %107.1 = %107.0
  dr              %107.2 = Phi                      %465.2:BB465, %475.2:BB475
  dr              %107.3 = %107.2
  fs              %107.4 = FrameState         R     0x556a23f8da70+6458: [], env=e0.3
  void                    Deopt              !v    %107.4, %107.3, %107.1   !
BB253   <- [446]
  void                    Nop                !     
  val+            %253.1 = %440.1
  goto BB236
BB233   <- [446]
  val?^ | miss    %233.0 = LdVar              eR    vapply, e438.0
  lgl$#-          %233.1 = Identical                %233.0, function(X, FUN, FUN.VALUE, ..., USE.NAMES=TRU|...
  void                    Branch                   %233.1 -> BB448 (if true) | BB449 (if false)
BB231   <- [447, 449]
  val?^ | miss    %231.0 = Phi                      %447.1:BB447, %449.1:BB449
  val?^ | miss    %231.1 = %231.0
  dr              %231.2 = Phi                      %447.2:BB447, %449.2:BB449
  dr              %231.3 = %231.2
  fs              %231.4 = FrameState         R     0x556a23f8da70+3326: [1L, %342.0, %212.1, <blt c>, %432.3], env=e0.3
  fs              %231.5 = FrameState         R     0x556a211579f0+196: [%442.0], env=e438.0, next=%231.4
  void                    Deopt              !v    %231.5, %231.3, %231.1   !
BB462   <- [460]
  val?^ | miss    %462.0 = LdVar              eR    names, e0.3
  lgl$#-          %462.1 = Identical                %462.0, <blt names>
  void                    Branch                   %462.1 -> BB470 (if true) | BB471 (if false)
BB463   <- [460]
  void                    Nop                !     
  val?^ | miss    %463.1 = %460.0
  dr              %463.2 = CallTarget@0x556a225cd830[Call#129]
  goto BB102
BB480   <- [474]
  int$-           %480.0 = CastType           d     dn %474.2
  lgl$-           %480.1 = Gt                 d     %480.0, 1L, elided   <lgl$->
  lgl$#-          %480.2 = CheckTrueFalse     e     %480.1
  void                    Branch                   %480.2 -> BB165 (if true) | BB111 (if false)
BB481   <- [474]
  void                    Nop                !     
  (int|real)$-    %481.1 = %474.2
  dr              %481.2 = Typecheck@0x556a225cd830[Type#385]
  goto BB109
BB236   <- [253, 476]
  val?            %236.0 = Phi                      %476.2:BB476, %253.1:BB253
  val?            %236.1 = %236.0
  val?            %236.2 = PopContext         C     %236.1, %434.2   <str->
  lgl$#-          %236.3 = IsType                   %236.2 isA val?-
  lgl$#-          %236.4 = IsType                   %432.3 isA val?-
  void                    Branch                   %236.4 -> BB450 (if true) | BB451 (if false)
BB448   <- [233]
  prom-           %448.0 = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p128, e438.0
  prom-           %448.1 = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p129, e438.0
  val?            %448.2 = StaticCall         !v    vapply[0x556a276d9870](%448.0, %448.1, na-lgl) { 0 1 2 } e438.0   <lgl+>
  void                    StVar              lW    eligible, %448.2, e438.0
  val?^ | miss    %448.4 = LdVar              eR    what, e438.0
  lgl$#-          %448.5 = IsType                   %448.4 isA val?~- | miss
  void                    Branch                   %448.5 -> BB456 (if true) | BB457 (if false)
BB449   <- [233]
  void                    Nop                !     
  val?^ | miss    %449.1 = %233.0
  dr              %449.2 = CallTarget@0x556a225da788[Call#2]
  goto BB231
BB470   <- [462]
  val+            %470.0 = CallSafeBuiltin    wed   names(%452.1)    <str$->
  val?^ | miss    %470.1 = LdVar              eR    as.character, e0.3
  lgl$#-          %470.2 = Identical                %470.1, <blt as.character>
  void                    Branch                   %470.2 -> BB472 (if true) | BB473 (if false)
BB471   <- [462]
  void                    Nop                !     
  val?^ | miss    %471.1 = %462.0
  dr              %471.2 = CallTarget@0x556a225cd830[Call#130]
  goto BB102
BB165   <- [480]
  val?^ | miss    %165.0 = LdVar              eR    paste, e0.3
  lgl$#-          %165.1 = Identical                %165.0, function(..., sep=" ", collapse=NULL, recycle0|...
  void                    Branch                   %165.1 -> BB490 (if true) | BB491 (if false)
BB111   <- [480]
  void                    Nop                !     
  goto BB112
BB109   <- [481, 491]
  val?^ | miss    %109.0 = Phi                      %481.1:BB481, %491.1:BB491
  val?^ | miss    %109.1 = %109.0
  dr              %109.2 = Phi                      %481.2:BB481, %491.2:BB491
  dr              %109.3 = %109.2
  fs              %109.4 = FrameState         R     0x556a23f8da70+6549: [%474.2], env=e0.3
  void                    Deopt              !v    %109.4, %109.3, %109.1   !
BB450   <- [236]
  val?-           %450.0 = CastType           d     dn %432.3   <str$->
  void                    Branch                   %236.3 -> BB458 (if true) | BB459 (if false)
BB451   <- [236]
  void                    Nop                !     
  val?            %451.1 = %432.3
  dr              %451.2 = Typecheck@0x556a225cd830[Type#220]
  goto BB237
BB456   <- [448]
  val?~- | miss   %456.0 = CastType           d     dn %448.4
  val?-           %456.1 = Force!<value>            %456.0,    <str->
  lgl$#-          %456.2 = IsType                   %456.1 isA val+   <true>
  void                    Branch                   %456.2 -> BB466 (if true) | BB467 (if false)
BB457   <- [448]
  void                    Nop                !     
  val?^ | miss    %457.1 = %448.4
  dr              %457.2 = Typecheck@0x556a225da788[Type#9]
  goto BB234
BB472   <- [470]
  val?^ | miss    %472.0 = LdVar              eR    excluded, e0.3
  val?            %472.1 = Force!<wrapped>    !v    %472.0, e0.3   <str$->
  val?            %472.2 = CallBuiltin        !v    as.character(%472.1) e0.3   <str$->
  lgl$#-          %472.3 = IsType                   %472.2 isA val?-
  void                    Branch                   %472.3 -> BB488 (if true) | BB489 (if false)
BB473   <- [470]
  fs              %473.0 = FrameState         R     0x556a23f8da70+6415: [%452.1, <blt is.na>], env=e0.3
  prom-           %473.1 = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p64, e0.3
  val?^           %473.2 = CastType                 up %473.1
  prom-           %473.3 = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p62, e0.3
  val?^           %473.4 = CastType                 up %473.3
  env             e473.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%473.2, x=%473.4, parent=R_BaseNamespace, context 0
  fs              %473.6 = FrameState         R     0x556a1bc1ed40+9: [], env=e473.5, next=%473.0
  fs              %473.7 = FrameState         R     0x556a21157860+32(pr): [%470.0], env=e0.3, next=%473.6
  void                    Deopt              !v    %473.7, CallTarget@0x556a225cd830[Call#131], %470.1   !
BB490   <- [165]
  prom-           %490.0 = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p57, e0.3
  dots-           %490.1 = DotsList           l     %490.0
  val?^ | miss    %490.2 = CastType                 up %490.0
  env             e490.3 = MkEnv              l     ...=%490.1, sep(miss)=" ", collapse="#", recycle0(miss)=false, parent=R_BaseNamespace, context 0
  val?            %490.4 = Force!             !vL   %490.2, e490.3
  val+            %490.5 = CallSafeBuiltin    wed   list(%490.4)    <vec->
  val+            %490.6 = CallSafeBuiltin    wed   paste(%490.5, " ", "#", false)    <str$->
  void                    StVar              lW    defaultLabel, %490.6, e0.3
  val?^ | miss    %490.8 = LdVar              eR    match, e0.3
  lgl$#-          %490.9 = Identical                %490.8, function(x, table, nomatch=NA, incomparables=N|...
  void                    Branch                   %490.9 -> BB494 (if true) | BB495 (if false)
BB491   <- [165]
  void                    Nop                !     
  val?^ | miss    %491.1 = %165.0
  dr              %491.2 = CallTarget@0x556a225cd830[Call#133]
  goto BB109
BB112   <- [111, 174, 542]
  val?^ | miss    %112.0 = LdVar              eR    length, e0.3
  lgl$#-          %112.1 = Identical                <blt length>, %112.0   <true>
  void                    Branch                   %112.1 -> BB496 (if true) | BB497 (if false)
BB458   <- [450]
  val?-           %458.0 = CastType           d     dn %236.2   <str->
  (list|sym|char|lgl|int|real|str|vec|complex|raw|cls|spec|blt|prom|_|code|env|ast|expressions|dots|other)+ %458.1 = CallSafeBuiltin    wed   c(%450.0, %458.0, "ANY")    <str->
  void                    StVar              lW    allLabels, %458.1, e0.3
  val?^ | miss    %458.3 = LdVar              eR    outerLabels, e0.3
  lgl$#-          %458.4 = Identical                %458.3, function(labels, new) <(rir::DispatchTable*)0x|...
  void                    Branch                   %458.4 -> BB468 (if true) | BB469 (if false)
BB459   <- [450]
  void                    Nop                !     
  val?            %459.1 = %236.2
  dr              %459.2 = Typecheck@0x556a225cd830[Type#225]
  goto BB237
BB237   <- [451, 459]
  val?^ | miss    %237.0 = Phi                      %451.1:BB451, %459.1:BB459
  val?^ | miss    %237.1 = %237.0
  dr              %237.2 = Phi                      %451.2:BB451, %459.2:BB459
  dr              %237.3 = %237.2
  fs              %237.4 = FrameState         R     0x556a23f8da70+3326: [1L, %342.0, %212.1, <blt c>, %432.3, %236.2], env=e0.3
  void                    Deopt              !v    %237.4, %237.3, %237.1   !
BB466   <- [456]
  val             %466.0 = ChkMissing         e     %448.2
  lgl$#-          %466.1 = IsType                   %466.0 isA lgl+
  void                    Branch                   %466.1 -> BB476 (if true) | BB477 (if false)
BB467   <- [456]
  void                    Nop                !     
  lgl$#-          %467.1 = %456.2
  dr              %467.2 = DeadBranchReached@0x556a225da788[Test#2]
  goto BB234
BB234   <- [457, 467, 477]
  val?^ | miss    %234.0 = Phi                      %457.1:BB457, %467.1:BB467, %477.1:BB477
  val?^ | miss    %234.1 = %234.0
  dr              %234.2 = Phi                      %457.2:BB457, %467.2:BB467, %477.2:BB477
  dr              %234.3 = %234.2
  fs              %234.4 = FrameState         R     0x556a23f8da70+3326: [1L, %342.0, %212.1, <blt c>, %432.3], env=e0.3
  fs              %234.5 = FrameState         R     0x556a211579f0+264: [], env=e438.0, next=%234.4
  void                    Deopt              !v    %234.5, %234.3, %234.1   !
BB488   <- [472]
  val?-           %488.0 = CastType           d     dn %472.2   <str$->
  val+            %488.1 = CallSafeBuiltin    wed   match(%470.0, %488.0, NA, nil)    <int$->
  lgl$#-          %488.2 = IsType                   %488.1 isA int$-
  void                    Branch                   %488.2 -> BB492 (if true) | BB493 (if false)
BB489   <- [472]
  fs              %489.0 = FrameState         R     0x556a23f8da70+6415: [%452.1, <blt is.na>], env=e0.3
  prom-           %489.1 = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p64, e0.3
  val?^           %489.2 = CastType                 up %489.1
  prom-           %489.3 = MkArg                    %470.0, .findInheritedMethods[0x556a226bd4a0]_p62 (!refl), e0.3
  val?~           %489.4 = CastType                 up %489.3
  env             e489.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%489.2, x=%489.4, parent=R_BaseNamespace, context 0
  fs              %489.6 = FrameState         R     0x556a1bc1ed40+23: [%470.0], env=e489.5, next=%489.0
  fs              %489.7 = FrameState         R     0x556a2157e280+32(pr): [%472.2], env=e0.3, next=%489.6
  void                    Deopt              !v    %489.7, Typecheck@0x556a1bc71cb0[Type#1], %472.2   !
BB494   <- [490]
  val?^ | miss    %494.0 = LdVar              eR    names, e0.3
  lgl$#-          %494.1 = Identical                %494.0, <blt names>
  void                    Branch                   %494.1 -> BB500 (if true) | BB501 (if false)
BB495   <- [490]
  void                    Nop                !     
  val?^ | miss    %495.1 = %490.8
  dr              %495.2 = CallTarget@0x556a225cd830[Call#135]
  goto BB166
BB496   <- [112]
  val?^ | miss    %496.0 = LdVar              eR    methods, e0.3
  lgl$#-          %496.1 = IsType                   %496.0 isA val?~+ | miss
  void                    Branch                   %496.1 -> BB502 (if true) | BB503 (if false)
BB497   <- [112]
  void                    Nop                !     
  lgl$#-          %497.1 = %112.1
  dr              %497.2 = DeadBranchReached@0x556a225cd830[Test#53]
  goto BB113
BB468   <- [458]
  prom-           %468.0 = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p87 (!refl), e0.3
  val?^           %468.1 = CastType                 up %468.0
  val?^ | miss    %468.2 = LdVar              eR    length, <env 0x556a1ba11378>
  lgl$#-          %468.3 = Identical                <blt length>, %468.2   <true>
  void                    Branch                   %468.3 -> BB478 (if true) | BB479 (if false)
BB469   <- [458]
  void                    Nop                !     
  val?^ | miss    %469.1 = %458.3
  dr              %469.2 = CallTarget@0x556a225cd830[Call#76]
  goto BB239
BB476   <- [466]
  lgl+            %476.0 = CastType           d     dn %466.0
  val?            %476.1 = Extract1_1D        wed   %456.1, %476.0, elided   <str->
  val?            %476.2 = %476.1
  goto BB236
BB477   <- [466]
  void                    Nop                !     
  val             %477.1 = %466.0
  dr              %477.2 = Typecheck@0x556a225da788[Type#11]
  goto BB234
BB492   <- [488]
  int$-           %492.0 = CastType           d     dn %488.1
  lgl$-           %492.1 = CallSafeBuiltin    wed   is.na(%492.0)    <lgl$->
  val?            %492.2 = Extract1_1D        wed   %452.1, %492.1, elided   <vec$+>
  void                    StVar              lW    methods, %492.2, e0.3
  goto BB106
BB493   <- [488]
  fs              %493.0 = FrameState         R     0x556a23f8da70+6415: [%452.1, <blt is.na>], env=e0.3
  prom-           %493.1 = MkArg                    %488.0, .findInheritedMethods[0x556a226bd4a0]_p64 (!refl), e0.3
  val?~           %493.2 = CastType                 up %493.1
  prom-           %493.3 = MkArg                    %470.0, .findInheritedMethods[0x556a226bd4a0]_p62 (!refl), e0.3
  val?~           %493.4 = CastType                 up %493.3
  env             e493.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%493.2, x=%493.4, parent=R_BaseNamespace, context 0
  fs              %493.6 = FrameState         R     0x556a1bc1ed40+69: [%488.1], env=e493.5, next=%493.0
  void                    Deopt              !v    %493.6, Typecheck@0x556a225cd830[Type#380], %488.1   !
BB500   <- [494]
  val?^ | miss    %500.0 = LdVar              eR    methods, e0.3
  lgl$#-          %500.1 = IsType                   %500.0 isA val?~+ | miss
  void                    Branch                   %500.1 -> BB506 (if true) | BB507 (if false)
BB501   <- [494]
  void                    Nop                !     
  val?^ | miss    %501.1 = %494.0
  dr              %501.2 = CallTarget@0x556a225cd830[Call#136]
  goto BB166
BB166   <- [495, 501, 507]
  val?^ | miss    %166.0 = Phi                      %495.1:BB495, %501.1:BB501, %507.1:BB507
  val?^ | miss    %166.1 = %166.0
  dr              %166.2 = Phi                      %495.2:BB495, %501.2:BB501, %507.2:BB507
  dr              %166.3 = %166.2
  fs              %166.4 = FrameState         R     0x556a23f8da70+6636: [], env=e0.3
  void                    Deopt              !v    %166.4, %166.3, %166.1   !
BB502   <- [496]
  val?~+ | miss   %502.0 = CastType           d     dn %496.0
  val?+           %502.1 = Force!<value>            %502.0,    <vec+>
  (int|real)$-    %502.2 = CallSafeBuiltin    wed   length(%502.1)    <int$->
  lgl$#-          %502.3 = IsType                   %502.2 isA int$-
  void                    Branch                   %502.3 -> BB504 (if true) | BB505 (if false)
BB503   <- [496]
  void                    Nop                !     
  val?^ | miss    %503.1 = %496.0
  dr              %503.2 = Typecheck@0x556a225cd830[Type#405]
  goto BB113
BB113   <- [497, 503]
  val?^ | miss    %113.0 = Phi                      %497.1:BB497, %503.1:BB503
  val?^ | miss    %113.1 = %113.0
  dr              %113.2 = Phi                      %497.2:BB497, %503.2:BB503
  dr              %113.3 = %113.2
  fs              %113.4 = FrameState         R     0x556a23f8da70+6881: [], env=e0.3
  void                    Deopt              !v    %113.4, %113.3, %113.1   !
BB478   <- [468]
  val?^ | miss    %478.0 = LdVar              eR    labels, e0.3
  val?            %478.1 = Force!<value>      !v    %478.0, e0.3   <str->
  prom-           %478.2 = MkArg                    %478.1, .findInheritedMethods[0x556a226bd4a0]_p86 (!refl), e0.3
  val?~           %478.3 = CastType                 up %478.2
  lgl$#-          %478.4 = IsType                   %478.1 isA val?-
  void                    Branch                   %478.4 -> BB482 (if true) | BB483 (if false)
BB479   <- [468]
  void                    Nop                !     
  lgl$#-          %479.1 = %468.3
  dr              %479.2 = DeadBranchReached@0x556a274dbc88[Test#0]
  goto BB239
BB239   <- [469, 479]
  val?^ | miss    %239.0 = Phi                      %469.1:BB469, %479.1:BB479
  val?^ | miss    %239.1 = %239.0
  dr              %239.2 = Phi                      %469.2:BB469, %479.2:BB479
  dr              %239.3 = %239.2
  fs              %239.4 = FrameState         R     0x556a23f8da70+3368: [1L, %342.0, %212.1], env=e0.3
  void                    Deopt              !v    %239.4, %239.3, %239.1   !
BB506   <- [500]
  val?~+ | miss   %506.0 = CastType           d     dn %500.0
  val?+           %506.1 = Force!<value>            %506.0,    <vec+>
  val+            %506.2 = CallSafeBuiltin    wed   names(%506.1)    <str->
  lgl$#-          %506.3 = IsType                   %506.2 isA val?-
  lgl$#-          %506.4 = IsType                   %490.6 isA val?-
  void                    Branch                   %506.4 -> BB508 (if true) | BB509 (if false)
BB507   <- [500]
  void                    Nop                !     
  val?^ | miss    %507.1 = %500.0
  dr              %507.2 = Typecheck@0x556a225cd830[Type#391]
  goto BB166
BB504   <- [502]
  int$-           %504.0 = CastType           d     dn %502.2
  lgl$-           %504.1 = Gt                 d     %504.0, 1L, elided   <lgl$->
  lgl$#-          %504.2 = CheckTrueFalse     e     %504.1
  void                    Branch                   %504.2 -> BB158 (if true) | BB117 (if false)
BB505   <- [502]
  fs              %505.0 = FrameState         R     0x556a23f8da70+6972: [%502.2], env=e0.3
  void                    Deopt              !v    %505.0, Typecheck@0x556a225cd830[Type#406], %502.2   !
BB482   <- [478]
  val?-           %482.0 = CastType           d     dn %478.1   <str->
  (int|real)$-    %482.1 = CallSafeBuiltin    wed   length(%482.0)    <int$->
  lgl$#-          %482.2 = IsType                   %482.1 isA int$-
  void                    Branch                   %482.2 -> BB484 (if true) | BB485 (if false)
BB483   <- [478]
  fs              %483.0 = FrameState         R     0x556a23f8da70+3405: [1L, %342.0, %212.1], env=e0.3
  env             e483.1 = (MkEnv)            l     labels=%478.3, new=%468.1, parent=<env 0x556a1ba11378>, context 0
  fs              %483.2 = FrameState         R     0x556a224ed6b0+69: [<blt length>, %478.1], env=e483.1, next=%483.0
  void                    Deopt              !v    %483.2, Typecheck@0x556a274dbc88[Type#1], %478.1   !
BB508   <- [506]
  val-            %508.0 = CastType           d     dn %490.6   <str$->
  void                    Branch                   %506.3 -> BB510 (if true) | BB511 (if false)
BB509   <- [506]
  void                    Nop                !     
  val+            %509.1 = %490.6
  dr              %509.2 = Typecheck@0x556a225cd830[Type#389]
  goto BB168
BB158   <- [504]
  val?^ | miss    %158.0 = LdVar              eR    verbose, e0.3
  val?            %158.1 = Force!<wrapped>    !v    %158.0, e0.3   <lgl$->
  lgl$#-          %158.2 = CheckTrueFalse     we    %158.1
  void                    Branch                   %158.2 -> BB164 (if true) | BB159 (if false)
BB117   <- [504]
  void                    Nop                !     
  goto BB118
BB484   <- [482]
  int$-           %484.0 = CastType           d     dn %482.1
  env             e484.1 = MkEnv              l     labels=%478.3, new=%468.1, n=%484.0, parent=<env 0x556a1ba11378>, context 0
  val?^ | miss    %484.2 = LdVar              eR    length, e484.1
  lgl$#-          %484.3 = Identical                <blt length>, %484.2   <true>
  void                    Branch                   %484.3 -> BB486 (if true) | BB487 (if false)
BB485   <- [482]
  void                    Nop                !     
  (int|real)$-    %485.1 = %482.1
  dr              %485.2 = Typecheck@0x556a274dbc88[Type#2]
  goto BB243
BB510   <- [508]
  val-            %510.0 = CastType           d     dn %506.2   <str->
  val+            %510.1 = CallSafeBuiltin    wed   match(%508.0, %510.0, 0L, nil)    <int$->
  lgl$#-          %510.2 = IsType                   %510.1 isA int$-
  void                    Branch                   %510.2 -> BB528 (if true) | BB529 (if false)
BB511   <- [508]
  void                    Nop                !     
  val+            %511.1 = %506.2
  dr              %511.2 = Typecheck@0x556a1bc71cb0[Type#1]
  goto BB168
BB168   <- [509, 511]
  val?^ | miss    %168.0 = Phi                      %509.1:BB509, %511.1:BB511
  val?^ | miss    %168.1 = %168.0
  dr              %168.2 = Phi                      %509.2:BB509, %511.2:BB511
  dr              %168.3 = %168.2
  fs              %168.4 = FrameState         R     0x556a23f8da70+6678: [], env=e0.3
  prom-           %168.5 = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p60, e0.3
  val?^           %168.6 = CastType                 up %168.5
  prom-           %168.7 = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p59 (!refl), e0.3
  val?^           %168.8 = CastType                 up %168.7
  env             e168.9 = (MkEnv)            l     incomparables(miss)=nil, nomatch=0L, table=%168.6, x=%168.8, parent=R_BaseNamespace, context 0
  fs              %168.10 = FrameState         R     0x556a1bc1ed40+23: [%490.6], env=e168.9, next=%168.4
  fs              %168.11 = FrameState         R     0x556a1fffbc40+32(pr): [%506.2], env=e0.3, next=%168.10
  void                    Deopt              !v    %168.11, %168.3, %168.1   !
BB164   <- [158]
  (cls|spec|blt)  %164.0 = LdFun              !v    cat, e0.3
  fs              %164.1 = FrameState         R     0x556a23f8da70+7030: [%164.0], env=e0.3
  void                    Deopt              !v    %164.1, DeadCall@0x556a225cd830[Call#138], %164.0   !
BB159   <- [158]
  (cls|spec|blt)  %159.0 = LdFun              !v    .getBestMethods, <0x556a277001a0>, e0.3
  prom-           %159.1 = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p53, e0.3
  prom-           %159.2 = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p54, e0.3
  prom-           %159.3 = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p55, e0.3
  prom-           %159.4 = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p56, e0.3
  val?            %159.5 = NamedCall          !v    %159.0(%159.1, %159.2, %159.3, verbose=%159.4) e0.3   <int$->
  lgl$#-          %159.6 = IsType                   %159.5 isA int$-
  void                    Branch                   %159.6 -> BB512 (if true) | BB513 (if false)
BB118   <- [117, 532]
  val?^ | miss    %118.0 = LdVar              eR    simpleOnly, e0.3
  val?            %118.1 = Force!<wrapped>    !v    %118.0, e0.3   <lgl$->
  lgl$-           %118.2 = AsLogical          e     %118.1
  lgl$#-          %118.3 = Identical                %118.2, false
  void                    Branch                   %118.3 -> BB157 (if true) | BB121 (if false)
BB486   <- [484]
  val?            %486.0 = Force!<lazy>       !vr   %468.1, e484.1   <str->
  lgl$#-          %486.1 = IsType                   %486.0 isA val?-
  void                    Branch                   %486.1 -> BB498 (if true) | BB499 (if false)
BB487   <- [484]
  void                    Nop                !     
  lgl$#-          %487.1 = %484.3
  dr              %487.2 = DeadBranchReached@0x556a274dbc88[Test#1]
  goto BB243
BB243   <- [485, 487]
  val?^ | miss    %243.0 = Phi                      %485.1:BB485, %487.1:BB487
  val?^ | miss    %243.1 = %243.0
  dr              %243.2 = Phi                      %485.2:BB485, %487.2:BB487
  dr              %243.3 = %243.2
  fs              %243.4 = FrameState         R     0x556a23f8da70+3405: [1L, %342.0, %212.1], env=e0.3
  env             e243.5 = (MkEnv)            l     labels=%478.3, new=%468.1, parent=<env 0x556a1ba11378>, context 0
  fs              %243.6 = FrameState         R     0x556a224ed6b0+91: [%482.1], env=e243.5, next=%243.4
  void                    Deopt              !v    %243.6, %243.3, %243.1   !
BB528   <- [510]
  int$-           %528.0 = CastType           d     dn %510.1
  void                    StVar              lW    i, %528.0, e0.3
  lgl$-           %528.2 = Gt                 d     %528.0, 0L, elided   <lgl$->
  lgl$#-          %528.3 = CheckTrueFalse     e     %528.2
  void                    Branch                   %528.3 -> BB175 (if true) | BB174 (if false)
BB529   <- [510]
  prom-           %529.0 = MkArg                    %510.0, .findInheritedMethods[0x556a226bd4a0]_p60 (!refl), e0.3
  val?~           %529.1 = CastType                 up %529.0
  fs              %529.2 = FrameState         R     0x556a23f8da70+6678: [], env=e0.3
  prom-           %529.3 = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p59 (!refl), e0.3
  val?^           %529.4 = CastType                 up %529.3
  env             e529.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch=0L, table=%529.1, x=%529.4, parent=R_BaseNamespace, context 0
  fs              %529.6 = FrameState         R     0x556a1bc1ed40+69: [%510.1], env=e529.5, next=%529.2
  void                    Deopt              !v    %529.6, Typecheck@0x556a225cd830[Type#393], %510.1   !
BB512   <- [159]
  int$-           %512.0 = CastType           d     dn %159.5
  void                    StVar              lW    select, %512.0, e0.3
  val?^ | miss    %512.2 = LdVar              eR    length, e0.3
  lgl$#-          %512.3 = Identical                <blt length>, %512.2   <true>
  void                    Branch                   %512.3 -> BB522 (if true) | BB523 (if false)
BB513   <- [159]
  fs              %513.0 = FrameState         R     0x556a23f8da70+7131: [%159.5], env=e0.3
  void                    Deopt              !v    %513.0, Typecheck@0x556a225cd830[Type#415], %159.5   !
BB157   <- [118]
  void                    Nop                !     
  lgl$-           %157.1 = %118.2
  goto BB124
BB121   <- [118]
  val?^ | miss    %121.0 = LdVar              eR    length, e0.3
  lgl$#-          %121.1 = Identical                <blt length>, %121.0   <true>
  void                    Branch                   %121.1 -> BB534 (if true) | BB535 (if false)
BB498   <- [486]
  val?-           %498.0 = CastType           d     dn %486.0   <str->
  (int|real)$-    %498.1 = CallSafeBuiltin    wed   length(%498.0)    <int$->
  lgl$#-          %498.2 = IsType                   %498.1 isA int$-
  void                    Branch                   %498.2 -> BB514 (if true) | BB515 (if false)
BB499   <- [486]
  fs              %499.0 = FrameState         R     0x556a23f8da70+3405: [1L, %342.0, %212.1], env=e0.3
  fs              %499.1 = FrameState         R     0x556a224ed6b0+174: [<blt length>, %486.0], env=e484.1, next=%499.0
  void                    Deopt              !v    %499.1, Typecheck@0x556a274dbc88[Type#4], %486.0   !
BB175   <- [528]
  lgl$#-          %175.0 = IsType                   %506.1 isA val+   <true>
  void                    Branch                   %175.0 -> BB538 (if true) | BB539 (if false)
BB174   <- [528]
  void                    Nop                !     
  goto BB112
BB522   <- [512]
  val?^ | miss    %522.0 = LdVar              eR    methods, e0.3
  lgl$#-          %522.1 = IsType                   %522.0 isA val?~+ | miss
  void                    Branch                   %522.1 -> BB530 (if true) | BB531 (if false)
BB523   <- [512]
  void                    Nop                !     
  lgl$#-          %523.1 = %512.3
  dr              %523.2 = DeadBranchReached@0x556a225cd830[Test#54]
  goto BB162
BB124   <- [157, 540]
  lgl$-           %124.0 = Phi                      %540.4:BB540, %157.1:BB157
  lgl$-           %124.1 = %124.0
  lgl$#-          %124.2 = CheckTrueFalse     e     %124.1
  void                    Branch                   %124.2 -> BB156 (if true) | BB127 (if false)
BB534   <- [121]
  val?^ | miss    %534.0 = LdVar              eR    methods, e0.3
  lgl$#-          %534.1 = IsType                   %534.0 isA val?~+ | miss
  void                    Branch                   %534.1 -> BB536 (if true) | BB537 (if false)
BB535   <- [121]
  void                    Nop                !     
  lgl$#-          %535.1 = %121.1
  dr              %535.2 = DeadBranchReached@0x556a225cd830[Test#57]
  goto BB119
BB514   <- [498]
  int$-           %514.0 = CastType           d     dn %498.1
  void                    StVar              lW    m, %514.0, e484.1
  val?^ | miss    %514.2 = LdVar              eR    paste, e484.1
  lgl$#-          %514.3 = Identical                %514.2, function(..., sep=" ", collapse=NULL, recycle0|...
  void                    Branch                   %514.3 -> BB516 (if true) | BB517 (if false)
BB515   <- [498]
  fs              %515.0 = FrameState         R     0x556a23f8da70+3405: [1L, %342.0, %212.1], env=e0.3
  fs              %515.1 = FrameState         R     0x556a224ed6b0+196: [%498.1], env=e484.1, next=%515.0
  void                    Deopt              !v    %515.1, Typecheck@0x556a274dbc88[Type#5], %498.1   !
BB538   <- [175]
  int$-           %538.0 = Minus              d     %528.0, elided
  val?            %538.1 = Extract1_1D        wed   %506.1, %538.0, elided   <vec+>
  void                    StVar              lW    methods, %538.1, e0.3
  val?^ | miss    %538.3 = LdVar              eR    fromGroup, e0.3
  lgl$#-          %538.4 = IsType                   %538.3 isA lgl-
  void                    Branch                   %538.4 -> BB542 (if true) | BB543 (if false)
BB539   <- [175]
  fs              %539.0 = FrameState         R     0x556a23f8da70+6692: [], env=e0.3
  void                    Deopt              !v    %539.0, DeadBranchReached@0x556a225cd830[Test#51], %175.0   !
BB530   <- [522]
  val?~+ | miss   %530.0 = CastType           d     dn %522.0
  val?+           %530.1 = Force!<value>            %530.0,    <vec+>
  lgl$#-          %530.2 = IsType                   %530.1 isA val+   <true>
  void                    Branch                   %530.2 -> BB532 (if true) | BB533 (if false)
BB531   <- [522]
  void                    Nop                !     
  val?^ | miss    %531.1 = %522.0
  dr              %531.2 = Typecheck@0x556a225cd830[Type#446]
  goto BB162
BB162   <- [523, 531, 533]
  val?^ | miss    %162.0 = Phi                      %523.1:BB523, %531.1:BB531, %533.1:BB533
  val?^ | miss    %162.1 = %162.0
  dr              %162.2 = Phi                      %523.2:BB523, %531.2:BB531, %533.2:BB533
  dr              %162.3 = %162.2
  fs              %162.4 = FrameState         R     0x556a23f8da70+7145: [], env=e0.3
  void                    Deopt              !v    %162.4, %162.3, %162.1   !
BB156   <- [124]
  (cls|spec|blt)  %156.0 = LdFun              !v    Recall, e0.3
  fs              %156.1 = FrameState         R     0x556a23f8da70+7866: [%156.0], env=e0.3
  void                    Deopt              !v    %156.1, DeadCall@0x556a225cd830[Call#154], %156.0   !
BB127   <- [124]
  val?^ | miss    %127.0 = LdVar              eR    length, e0.3
  lgl$#-          %127.1 = Identical                <blt length>, %127.0   <true>
  void                    Branch                   %127.1 -> BB544 (if true) | BB545 (if false)
BB536   <- [534]
  val?~+ | miss   %536.0 = CastType           d     dn %534.0
  val?+           %536.1 = Force!<value>            %536.0,    <vec$+>
  (int|real)$-    %536.2 = CallSafeBuiltin    wed   length(%536.1)    <int$->
  lgl$#-          %536.3 = IsType                   %536.2 isA int$-
  void                    Branch                   %536.3 -> BB540 (if true) | BB541 (if false)
BB537   <- [534]
  void                    Nop                !     
  val?^ | miss    %537.1 = %534.0
  dr              %537.2 = Typecheck@0x556a225cd830[Type#452]
  goto BB119
BB119   <- [535, 537]
  val?^ | miss    %119.0 = Phi                      %535.1:BB535, %537.1:BB537
  val?^ | miss    %119.1 = %119.0
  dr              %119.2 = Phi                      %535.2:BB535, %537.2:BB537
  dr              %119.3 = %119.2
  fs              %119.4 = FrameState         R     0x556a23f8da70+7728: [%118.1], env=e0.3
  void                    Deopt              !v    %119.4, %119.3, %119.1   !
BB516   <- [514]
  prom-           %516.0 = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p104, e484.1
  prom-           %516.1 = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p114, e484.1
  dots-           %516.2 = DotsList           l     %516.0, %516.1
  val?^ | miss    %516.3 = CastType                 up %516.0
  val?^ | miss    %516.4 = CastType                 up %516.1
  env             e516.5 = MkEnv              l     ...=%516.2, sep="#", collapse(miss)=nil, recycle0(miss)=false, parent=R_BaseNamespace, context -1
  val?            %516.6 = Force!             !vL   %516.3, e516.5
  val?            %516.7 = Force!             !vL   %516.4, e516.5
  val+            %516.8 = CallSafeBuiltin    wed   list(%516.6, %516.7)    <vec->
  val+            %516.9 = CallSafeBuiltin    wed   paste(%516.8, "#", nil, false)    <str->
  void                    StVar              lW    labels, %516.9, e0.3
  val?^ | miss    %516.11 = LdVar              eR    c, e0.3
  lgl$#-          %516.12 = Identical                <blt c>, %516.11   <true>
  void                    Branch                   %516.12 -> BB518 (if true) | BB519 (if false)
BB517   <- [514]
  fs              %517.0 = FrameState         R     0x556a23f8da70+3405: [1L, %342.0, %212.1], env=e0.3
  fs              %517.1 = FrameState         R     0x556a224ed6b0+210: [], env=e484.1, next=%517.0
  void                    Deopt              !v    %517.1, CallTarget@0x556a274dbc88[Call#2], %514.2   !
BB542   <- [538]
  lgl-            %542.0 = CastType           d     dn %538.3
  lgl-            %542.1 = Extract1_1D        wed   %542.0, %538.0, elided   <lgl->
  void                    StVar              lW    fromGroup, %542.1, e0.3
  goto BB112
BB543   <- [538]
  fs              %543.0 = FrameState         R     0x556a23f8da70+6805: [], env=e0.3
  void                    Deopt              !v    %543.0, Typecheck@0x556a225cd830[Type#400], %538.3   !
BB532   <- [530]
  val?            %532.0 = Extract1_1D        wed   %530.1, %512.0, elided   <vec$+>
  void                    StVar              lW    methods, %532.0, e0.3
  goto BB118
BB533   <- [530]
  void                    Nop                !     
  lgl$#-          %533.1 = %530.2
  dr              %533.2 = DeadBranchReached@0x556a225cd830[Test#56]
  goto BB162
BB544   <- [127]
  val?^ | miss    %544.0 = LdVar              eR    methods, e0.3
  lgl$#-          %544.1 = IsType                   %544.0 isA val?~+ | miss
  void                    Branch                   %544.1 -> BB546 (if true) | BB547 (if false)
BB545   <- [127]
  void                    Nop                !     
  lgl$#-          %545.1 = %127.1
  dr              %545.2 = DeadBranchReached@0x556a225cd830[Test#59]
  goto BB125
BB540   <- [536]
  int$-           %540.0 = CastType           d     dn %536.2
  lgl$-           %540.1 = Eq                 d     %540.0, 0L, elided   <lgl$->
  lgl$-           %540.2 = AsLogical                %540.1
  lgl$-           %540.3 = LAnd                     %118.2, %540.2
  lgl$-           %540.4 = %540.3
  goto BB124
BB541   <- [536]
  fs              %541.0 = FrameState         R     0x556a23f8da70+7831: [%118.2, %536.2], env=e0.3
  void                    Deopt              !v    %541.0, Typecheck@0x556a225cd830[Type#453], %536.2   !
BB518   <- [516]
  val?^ | miss    %518.0 = LdVar              eR    supersList, e0.3
  lgl$#-          %518.1 = IsType                   %518.0 isA val?~- | miss
  void                    Branch                   %518.1 -> BB520 (if true) | BB521 (if false)
BB519   <- [516]
  void                    Nop                !     
  lgl$#-          %519.1 = %516.12
  dr              %519.2 = DeadBranchReached@0x556a225cd830[Test#25]
  goto BB251
BB546   <- [544]
  val?~+ | miss   %546.0 = CastType           d     dn %544.0
  val?+           %546.1 = Force!<value>            %546.0,    <vec$+>
  (int|real)$-    %546.2 = CallSafeBuiltin    wed   length(%546.1)    <int$->
  lgl$#-          %546.3 = IsType                   %546.2 isA int$-
  void                    Branch                   %546.3 -> BB548 (if true) | BB549 (if false)
BB547   <- [544]
  void                    Nop                !     
  val?^ | miss    %547.1 = %544.0
  dr              %547.2 = Typecheck@0x556a225cd830[Type#474]
  goto BB125
BB125   <- [545, 547]
  val?^ | miss    %125.0 = Phi                      %545.1:BB545, %547.1:BB547
  val?^ | miss    %125.1 = %125.0
  dr              %125.2 = Phi                      %545.2:BB545, %547.2:BB547
  dr              %125.3 = %125.2
  fs              %125.4 = FrameState         R     0x556a23f8da70+7850: [%124.1], env=e0.3
  void                    Deopt              !v    %125.4, %125.3, %125.1   !
BB520   <- [518]
  val?~- | miss   %520.0 = CastType           d     dn %518.0
  val?-           %520.1 = Force!<value>            %520.0,    <vec->
  val?^ | miss    %520.2 = LdVar              eR    list, e0.3
  lgl$#-          %520.3 = Identical                <blt list>, %520.2   <true>
  void                    Branch                   %520.3 -> BB524 (if true) | BB525 (if false)
BB521   <- [518]
  void                    Nop                !     
  val?^ | miss    %521.1 = %518.0
  dr              %521.2 = Typecheck@0x556a225cd830[Type#233]
  goto BB251
BB251   <- [519, 521, 525, 527]
  val?^ | miss    %251.0 = Phi                      %519.1:BB519, %521.1:BB521, %525.1:BB525, %527.1:BB527
  val?^ | miss    %251.1 = %251.0
  dr              %251.2 = Phi                      %519.2:BB519, %521.2:BB521, %525.2:BB525, %527.2:BB527
  dr              %251.3 = %251.2
  fs              %251.4 = FrameState         R     0x556a23f8da70+3419: [1L, %342.0, %212.1], env=e0.3
  void                    Deopt              !v    %251.4, %251.3, %251.1   !
BB548   <- [546]
  int$-           %548.0 = CastType           d     dn %546.2
  lgl$#-          %548.1 = CheckTrueFalse     e     %548.0
  void                    Branch                   %548.1 -> BB134 (if true) | BB130 (if false)
BB549   <- [546]
  void                    Nop                !     
  (int|real)$-    %549.1 = %546.2
  dr              %549.2 = Typecheck@0x556a225cd830[Type#475]
  goto BB128
BB524   <- [520]
  val?^ | miss    %524.0 = LdVar              eR    allLabels, e0.3
  lgl$#-          %524.1 = IsType                   %524.0 isA val?~- | miss
  void                    Branch                   %524.1 -> BB526 (if true) | BB527 (if false)
BB525   <- [520]
  void                    Nop                !     
  lgl$#-          %525.1 = %520.3
  dr              %525.2 = DeadBranchReached@0x556a225cd830[Test#26]
  goto BB251
BB134   <- [548]
  val?^ | miss    %134.0 = LdVar              eR    .sigLabel, e0.3
  lgl$#-          %134.1 = Identical                %134.0, function(sig) <(rir::DispatchTable*)0x556a1f73|...
  void                    Branch                   %134.1 -> BB550 (if true) | BB551 (if false)
BB130   <- [548]
  void                    Nop                !     
  goto BB131
BB128   <- [549, 551, 553]
  val?^ | miss    %128.0 = Phi                      %549.1:BB549, %551.1:BB551, %553.1:BB553
  val?^ | miss    %128.1 = %128.0
  dr              %128.2 = Phi                      %549.2:BB549, %551.2:BB551, %553.2:BB553
  dr              %128.3 = %128.2
  fs              %128.4 = FrameState         R     0x556a23f8da70+8203: [%546.2], env=e0.3
  void                    Deopt              !v    %128.4, %128.3, %128.1   !
BB526   <- [524]
  val?~- | miss   %526.0 = CastType           d     dn %524.0
  val?-           %526.1 = Force!<value>            %526.0,    <str->
  val+            %526.2 = CallSafeBuiltin    wed   list(%526.1)    <vec$->
  val+            %526.3 = CallSafeBuiltin    wed   c(%520.1, %526.2)    <vec->
  void                    StVar              lW    supersList, %526.3, e0.3
  int$#-          %526.5 = %212.1
  goto BB210
BB527   <- [524]
  void                    Nop                !     
  val?^ | miss    %527.1 = %524.0
  dr              %527.2 = Typecheck@0x556a225cd830[Type#235]
  goto BB251
BB550   <- [134]
  prom-           %550.0 = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p32, e0.3
  val?^           %550.1 = CastType                 up %550.0
  val?^ | miss    %550.2 = LdVar              eR    paste, <env 0x556a1ba11378>
  lgl$#-          %550.3 = Identical                %550.2, function(..., sep=" ", collapse=NULL, recycle0|...
  void                    Branch                   %550.3 -> BB552 (if true) | BB553 (if false)
BB551   <- [134]
  void                    Nop                !     
  val?^ | miss    %551.1 = %134.0
  dr              %551.2 = CallTarget@0x556a225cd830[Call#161]
  goto BB128
BB131   <- [130, 143, 566]
  val?^ | miss    %131.0 = LdVar              eR    methods, e0.3
  lgl$#-          %131.1 = IsType                   %131.0 isA val?~+ | miss
  void                    Branch                   %131.1 -> BB554 (if true) | BB555 (if false)
BB552   <- [550]
  env             e552.0 = MkEnv              l     sig=%550.1, parent=<env 0x556a1ba11378>, context 0
  prom-           %552.1 = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p120, e552.0
  dots-           %552.2 = DotsList           l     %552.1
  val?^ | miss    %552.3 = CastType                 up %552.1
  env             e552.4 = MkEnv              l     ...=%552.2, sep(miss)=" ", collapse="#", recycle0(miss)=false, parent=R_BaseNamespace, context -1
  val?            %552.5 = Force!             !vL   %552.3, e552.4
  val+            %552.6 = CallSafeBuiltin    wed   list(%552.5)    <vec->
  val+            %552.7 = CallSafeBuiltin    wed   paste(%552.6, " ", "#", false)    <str$->
  void                    StVar              lW    tlabel, %552.7, e0.3
  val?^ | miss    %552.9 = LdVar              eR    methods, e0.3
  lgl$#-          %552.10 = IsType                   %552.9 isA val?~+ | miss
  void                    Branch                   %552.10 -> BB556 (if true) | BB557 (if false)
BB553   <- [550]
  void                    Nop                !     
  val?^ | miss    %553.1 = %550.2
  dr              %553.2 = CallTarget@0x556a1e4e2af8[Call#0]
  goto BB128
BB554   <- [131]
  val?~+ | miss   %554.0 = CastType           d     dn %131.0
  void                    Visible            v     
  val?+           %554.2 = Force!<value>            %554.0,    <vec$+>
  void                    Return             l     %554.2
BB555   <- [131]
  fs              %555.0 = FrameState         R     0x556a23f8da70+8774: [], env=e0.3
  void                    Deopt              !v    %555.0, Typecheck@0x556a225cd830[Type#509], %131.0   !
BB556   <- [552]
  val?~+ | miss   %556.0 = CastType           d     dn %552.9
  val?+           %556.1 = Force!<value>            %556.0,    <vec$+>
  lgl$#-          %556.2 = IsType                   %556.1 isA val+   <true>
  void                    Branch                   %556.2 -> BB558 (if true) | BB559 (if false)
BB557   <- [552]
  void                    Nop                !     
  val?^ | miss    %557.1 = %552.9
  dr              %557.2 = Typecheck@0x556a225cd830[Type#478]
  goto BB135
BB558   <- [556]
  val?            %558.0 = Extract2_1D        wed   %556.1, 1L, elided   <cls>
  void                    StVar              lW    m, %558.0, e0.3
  val?^ | miss    %558.2 = LdVar              eR    is, e0.3
  lgl$#-          %558.3 = Identical                %558.2, function(object, class2) <(rir::DispatchTable*|...
  void                    Branch                   %558.3 -> BB560 (if true) | BB561 (if false)
BB559   <- [556]
  void                    Nop                !     
  lgl$#-          %559.1 = %556.2
  dr              %559.2 = DeadBranchReached@0x556a225cd830[Test#60]
  goto BB135
BB135   <- [557, 559]
  val?^ | miss    %135.0 = Phi                      %557.1:BB557, %559.1:BB559
  val?^ | miss    %135.1 = %135.0
  dr              %135.2 = Phi                      %557.2:BB557, %559.2:BB559
  dr              %135.3 = %135.2
  fs              %135.4 = FrameState         R     0x556a23f8da70+8265: [], env=e0.3
  void                    Deopt              !v    %135.4, %135.3, %135.1   !
BB560   <- [558]
  prom-           %560.0 = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p33 (!refl), e0.3
  val?            %560.1 = Call               !v    function(object, class2) <(rir::DispatchTable*|...(%560.0, "MethodDefinition") e0.3   <lgl$->
  lgl$#-          %560.2 = IsType                   %560.1 isA lgl$-
  void                    Branch                   %560.2 -> BB562 (if true) | BB563 (if false)
BB561   <- [558]
  fs              %561.0 = FrameState         R     0x556a23f8da70+8332: [], env=e0.3
  void                    Deopt              !v    %561.0, CallTarget@0x556a225cd830[Call#162], %558.2   !
BB562   <- [560]
  lgl$-           %562.0 = CastType           d     dn %560.1
  lgl$#-          %562.1 = CheckTrueFalse     e     %562.0
  void                    Branch                   %562.1 -> BB149 (if true) | BB141 (if false)
BB563   <- [560]
  fs              %563.0 = FrameState         R     0x556a23f8da70+8369: [%560.1], env=e0.3
  void                    Deopt              !v    %563.0, Typecheck@0x556a225cd830[Type#481], %560.1   !
BB149   <- [562]
  (cls|spec|blt)  %149.0 = LdFun              !v    <-, <0x556a1b3feda8>, e0.3
  prom-           %149.1 = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p37, e0.3
  prom-           %149.2 = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p40, e0.3
  val?            %149.3 = Call               !v    %149.0(%149.1, %149.2) e0.3
  val?^ | miss    %149.4 = LdVar              eR    .inheritedArgsExpression, e0.3
  lgl$#-          %149.5 = Identical                %149.4, function(target, defined, body) <(rir::Dispatc|...
  void                    Branch                   %149.5 -> BB564 (if true) | BB565 (if false)
BB141   <- [562]
  void                    Nop                !     
  goto BB142
BB564   <- [149]
  prom-           %564.0 = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p45, e0.3
  prom-           %564.1 = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p48, e0.3
  prom-           %564.2 = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p51, e0.3
  val?            %564.3 = StaticCall         !v    .inheritedArgsExpression[0x556a278472b0](%564.0, %564.1, %564.2) e0.3   <nil->
  lgl$-           %564.4 = Is                       %564.3, NULL
  void                    StVar              lW    coerce, %564.3, e0.3
  val             %564.6 = ChkMissing         e     %564.3
  lgl$-           %564.7 = Not                d     %564.4, elided
  lgl$#-          %564.8 = CheckTrueFalse     e     %564.7
  void                    Branch                   %564.8 -> BB155 (if true) | BB152 (if false)
BB565   <- [149]
  fs              %565.0 = FrameState         R     0x556a23f8da70+8422: [%149.3], env=e0.3
  void                    Deopt              !v    %565.0, CallTarget@0x556a225cd830[Call#167], %149.4   !
BB142   <- [141, 568]
  val?^ | miss    %142.0 = LdVar              eR    doCache, e0.3
  val?            %142.1 = Force!<lazy>       !v    %142.0, e0.3   <lgl$->
  lgl$#-          %142.2 = CheckTrueFalse     we    %142.1
  void                    Branch                   %142.2 -> BB144 (if true) | BB143 (if false)
BB155   <- [564]
  (cls|spec|blt)  %155.0 = LdFun              !v    body<-, e0.3
  fs              %155.1 = FrameState         R     0x556a23f8da70+8529: [%564.3, %155.0], env=e0.3
  void                    Deopt              !v    %155.1, DeadCall@0x556a225cd830[Call#171], %155.0   !
BB152   <- [564]
  val?^ | miss    %152.0 = LdVar              eR    m, e0.3
  val?            %152.1 = Force!<value>      !v    %152.0, e0.3   <cls>
  val?^ | miss    %152.2 = LdVar              eR    methods !upd, e0.3
  lgl$#-          %152.3 = IsType                   %152.2 isA val?~+ | miss
  void                    Branch                   %152.3 -> BB568 (if true) | BB569 (if false)
BB144   <- [142]
  val?^ | miss    %144.0 = LdVar              eR    verbose, e0.3
  val?            %144.1 = Force!<wrapped>    !v    %144.0, e0.3   <lgl$->
  lgl$#-          %144.2 = CheckTrueFalse     we    %144.1
  void                    Branch                   %144.2 -> BB148 (if true) | BB147 (if false)
BB143   <- [142]
  void                    Nop                !     
  goto BB131
BB568   <- [152]
  val?~+ | miss   %568.0 = CastType           d     dn %152.2
  val?+           %568.1 = Force!<value>            %568.0,    <vec$+>
  val?            %568.2 = Subassign2_1D      !v    %152.1, %568.1, 1L, e0.3
  void                    StVar              lW    methods, %568.2, e0.3
  goto BB142
BB569   <- [152]
  fs              %569.0 = FrameState         R     0x556a23f8da70+8601: [%152.1], env=e0.3
  void                    Deopt              !v    %569.0, Typecheck@0x556a225cd830[Type#503], %152.2   !
BB148   <- [144]
  (cls|spec|blt)  %148.0 = LdFun              !v    cat, e0.3
  fs              %148.1 = FrameState         R     0x556a23f8da70+8691: [%148.0], env=e0.3
  void                    Deopt              !v    %148.1, DeadCall@0x556a225cd830[Call#172], %148.0   !
BB147   <- [144]
  val?^ | miss    %147.0 = LdVar              eR    assign, e0.3
  lgl$#-          %147.1 = Identical                %147.0, function(x, value, pos=-(1), envir=as.environm|...
  void                    Branch                   %147.1 -> BB566 (if true) | BB567 (if false)
BB566   <- [147]
  prom-           %566.0 = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p34, e0.3
  prom-           %566.1 = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p35, e0.3
  prom-           %566.2 = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p36, e0.3
  val?            %566.3 = StaticCall         !v    assign[0x556a274c7ad0](%566.0, %566.1, missingArg, %566.2) { 0 1 3n } e0.3
  goto BB131
BB567   <- [147]
  fs              %567.0 = FrameState         R     0x556a23f8da70+8676: [%144.2], env=e0.3
  void                    Deopt              !v    %567.0, CallTarget@0x556a225cd830[Call#173], %147.0   !
Prom 0:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     get, <0x556a1c32fe78>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p1, e0.0
  val?            %0.3  = NamedCall          !     %0.1(".MTable", envir=%0.2) e0.0   <env->
  void                    Return             l     %0.3
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     environment, <0x556a1b7b0b68>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p2, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <env->
  void                    Return             l     %0.3
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fdef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 4:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     .simpleInheritanceGeneric, <0x556a20d2bf08>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p5, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <lgl$->
  void                    Return             l     %0.3
Prom 5:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fdef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 7:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     is.environment, <0x556a1b419e18>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p8, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <lgl$->
  void                    Return             l     %0.3
Prom 8:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    mtable, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <(nil|env)->
  void                    Return             l     %0.3
Prom 9:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     environment, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p10, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 10:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fdef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 11:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     .allowPrimitiveMethods, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p12, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 12:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    primMethods, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 13:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fdef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 14:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    group, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 15:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    cl1, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$+>
  void                    Return             l     %0.3
Prom 16:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 20:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    labels, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 21:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     .fillSignatures, <0x556a20d2fae0>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p22, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p23, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <str->
  void                    Return             l     %0.4
Prom 22:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    allMethods, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 23:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     length, <0x556a1b40aa90>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p24, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <int$->
  void                    Return             l     %0.3
Prom 24:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    classes, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <(str|vec)>
  void                    Return             l     %0.3
Prom 25:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    allMethods, e0.0
  val?            %0.2  = Force<value>       !v    %0.1, e0.0   <str->
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <true>
  void                    Branch                   %0.3 -> BB2 (if true) | BB7 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    m, e0.0
  val?            %2.1  = Force<value>       !v    %2.0, e0.0   <int->
  lgl$#-          %2.2  = IsType                   %2.1 isA val+   <true>
  void                    Branch                   %2.2 -> BB6 (if true) | BB3 (if false)
BB7   <- [0]
  prom-           %7.0  = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p27, e0.0
  prom-           %7.1  = %7.0
  goto BB5
BB6   <- [2]
  val?^ | miss    %6.0  = LdVar              eR    found, e0.0
  val?            %6.1  = Force<value>       !v    %6.0, e0.0   <lgl->
  val?            %6.2  = %6.1
  goto BB4
BB3   <- [2]
  prom-           %3.0  = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p26, e0.0
  prom-           %3.1  = %3.0
  goto BB4
BB5   <- [7, 4]
  val?            %5.0  = Phi                      %4.3:BB4, %7.1:BB7
  val?            %5.1  = %5.0
  val?            %5.2  = Extract1_1D        !v    %0.2, %5.1, e0.0   <str->
  void                    Visible            v     
  void                    Return             l     %5.2
BB4   <- [3, 6]
  val?            %4.0  = Phi                      %6.2:BB6, %3.1:BB3
  val?            %4.1  = %4.0
  val?            %4.2  = Extract1_1D        !v    %2.1, %4.1, e0.0   <int->
  val?            %4.3  = %4.2
  goto BB5
Prom 26:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    found, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 27:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    m, e0.0
  val?            %0.2  = Force              !v    %0.1, e0.0   <val?_>
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <@?>
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    found, e0.0
  val?            %2.1  = Force              !v    %2.0, e0.0   <val?_>
  val?            %2.2  = %2.1
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p28, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.2:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract1_1D        !v    %0.2, %3.1, e0.0   <val?_>
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 28:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    found, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 29:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    table, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 30:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     length, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p31, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 31:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    methods, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 32:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    classes, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <(str|vec)>
  void                    Return             l     %0.3
Prom 33:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    m, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 34:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    tlabel, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 35:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    m, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 36:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    mtable, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 37:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p38, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p39, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 38:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    m, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 39:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    target, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 40:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     .newSignature, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p41, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p42, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 41:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    classes, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 42:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p43, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p44, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 43:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fdef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 44:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    signature, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 45:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, <0x556a1b409bd8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p46, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p47, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <str>
  void                    Return             l     %0.4
Prom 46:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    m, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 47:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    target, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 48:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, <0x556a1b409bd8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p49, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p50, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <str>
  void                    Return             l     %0.4
Prom 49:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    m, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 50:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    defined, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 51:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     body, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p52, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 52:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    m, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 53:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    methods, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 54:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    supersList, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <vec->
  void                    Return             l     %0.3
Prom 55:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fromGroup, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 56:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    verbose, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <lgl$->
  void                    Return             l     %0.3
Prom 57:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     rep.int, <0x556a1d33f9f0>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p58, e0.0
  val?            %0.3  = Call               !     %0.1("ANY", %0.2) e0.0   <str->
  void                    Return             l     %0.3
Prom 58:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    nargs, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <int$->
  void                    Return             l     %0.3
Prom 59:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    defaultLabel, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 60:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     names, <0x556a1b40a470>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p61, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <str->
  void                    Return             l     %0.3
Prom 61:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    methods, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 62:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     names, <0x556a1b40a470>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p63, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <str$->
  void                    Return             l     %0.3
Prom 63:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    methods, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <vec$+>
  void                    Return             l     %0.3
Prom 64:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     as.character, <0x556a1b417040>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p65, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <str$->
  void                    Return             l     %0.3
Prom 65:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    excluded, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 66:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    classes, e0.0
  val?            %0.2  = Force<wrapped>     !v    %0.1, e0.0   <vec->
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <true>
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    i, e0.0
  val?            %2.1  = Force<value>       !v    %2.0, e0.0   <int$->
  val?            %2.2  = %2.1
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p67, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.2:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract2_1D        !v    %0.2, %3.1, e0.0   <str$+>
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 67:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    i, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 68:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 69:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    cc, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 70:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    className, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 71:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, <0x556a1b409bd8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p72, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p73, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <vec->
  void                    Return             l     %0.4
Prom 72:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    cc, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 73:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    contains, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 74:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    simpleOnly, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 75:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    labels, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 76:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    allLabels, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 77:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    classes, e0.0
  val?            %0.2  = Force<wrapped>     !v    %0.1, e0.0   <vec->
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <true>
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    i, e0.0
  val?            %2.1  = Force<value>       !v    %2.0, e0.0   <int$->
  val?            %2.2  = %2.1
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p78, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.2:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract2_1D        !v    %0.2, %3.1, e0.0   <str$->
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 78:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    i, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 79:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 80:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    cc, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 81:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    className, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 82:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, <0x556a1b409bd8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p83, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p84, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <vec+>
  void                    Return             l     %0.4
Prom 83:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    cc, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 84:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    contains, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 85:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    simpleOnly, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <lgl$->
  void                    Return             l     %0.3
Prom 86:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    labels, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 87:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    allLabels, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 88:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    i, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 89:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    i, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 90:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, <0x556a1b409bd8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p91, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p92, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <vec+>
  void                    Return             l     %0.4
Prom 91:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    def, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 92:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    contains, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 93:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    simpleOnly, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <lgl$->
  void                    Return             l     %0.3
Prom 104:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    labels, e0.0
  val?            %0.2  = Force<wrapped>     !v    %0.1, e0.0   <str->
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <true>
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  (cls|spec|blt)  %2.0  = LdFun              !v    rep.int, <0x556a1d33f9f0>, e0.0
  prom-           %2.1  = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p105, e0.0
  prom-           %2.2  = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p106, e0.0
  val?            %2.3  = Call               !v    %2.0(%2.1, %2.2) e0.0   <int->
  val?            %2.4  = %2.3
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p109, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.4:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract1_1D        !v    %0.2, %3.1, e0.0   <str->
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 105:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    n, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <int$->
  val?            %0.4  = Colon              !     1L, %0.3, e0.0   <int->
  void                    Return             l     %0.4
Prom 106:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     rep.int, <0x556a1d33f9f0>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p107, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p108, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <int->
  void                    Return             l     %0.4
Prom 107:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    m, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <int$->
  void                    Return             l     %0.3
Prom 108:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    n, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <int$->
  void                    Return             l     %0.3
Prom 109:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     rep.int, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p110, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p111, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 110:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    n, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  val?            %0.4  = Colon              !     1L, %0.3, e0.0   <val?_>
  void                    Return             l     %0.4
Prom 111:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     rep.int, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p112, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p113, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 112:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    m, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 113:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    n, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 114:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    new, e0.0
  val?            %0.2  = Force<wrapped>     !v    %0.1, e0.0   <str->
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <true>
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  (cls|spec|blt)  %2.0  = LdFun              !v    rep.int, <0x556a1d33f9f0>, e0.0
  prom-           %2.1  = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p115, e0.0
  prom-           %2.2  = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p116, e0.0
  val?            %2.3  = Call               !v    %2.0(%2.1, %2.2) e0.0   <int->
  val?            %2.4  = %2.3
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p117, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.4:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract1_1D        !v    %0.2, %3.1, e0.0   <str->
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 115:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    m, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <int$->
  val?            %0.4  = Colon              !     1L, %0.3, e0.0   <int->
  void                    Return             l     %0.4
Prom 116:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    n, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <int$->
  void                    Return             l     %0.3
Prom 117:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     rep.int, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p118, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p119, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 118:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    m, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  val?            %0.4  = Colon              !     1L, %0.3, e0.0   <val?_>
  void                    Return             l     %0.4
Prom 119:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    n, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 120:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    sig, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <(str|vec)>
  void                    Return             l     %0.3
Prom 124:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    contains, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 125:
BB0
  env             e0.0  = LdFunctionEnv            
  cls             %0.1  = MkCls                    .eligibleSuperClasses@Prom(1)16, e0.0
  cls             %0.2  = MkCls                    .eligibleSuperClasses@Prom(1)37, e0.0
  val?^ | miss    %0.3  = LdVar              eR    simpleOnly, e0.0
  void                    Visible            v     
  val?            %0.5  = Force<lazy>        !     %0.3, e0.0   <lgl$->
  lgl$#-          %0.6  = CheckTrueFalse     we    %0.5
  void                    Branch                   %0.6 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  void                    Nop                !     
  cls             %2.1  = %0.2
  goto BB3
BB4   <- [0]
  void                    Nop                !     
  cls             %4.1  = %0.1
  goto BB3
BB3   <- [4, 2]
  cls             %3.0  = Phi                      %4.1:BB4, %2.1:BB2
  cls             %3.1  = %3.0
  void                    Return             l     %3.1
Prom 128:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    contains, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 129:
BB0
  env             e0.0  = LdFunctionEnv            
  cls             %0.1  = MkCls                    .eligibleSuperClasses@Prom(1)16, e0.0
  cls             %0.2  = MkCls                    .eligibleSuperClasses@Prom(1)37, e0.0
  val?^ | miss    %0.3  = LdVar              eR    simpleOnly, e0.0
  void                    Visible            v     
  val?            %0.5  = Force<lazy>        !     %0.3, e0.0   <lgl$->
  lgl$#-          %0.6  = CheckTrueFalse     we    %0.5
  void                    Branch                   %0.6 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  void                    Nop                !     
  cls             %2.1  = %0.2
  goto BB3
BB4   <- [0]
  void                    Nop                !     
  cls             %4.1  = %0.1
  goto BB3
BB3   <- [2, 4]
  cls             %3.0  = Phi                      %4.1:BB4, %2.1:BB2
  cls             %3.1  = %3.0
  void                    Return             l     %3.1
Prom 130:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     strsplit, <0x556a1b754588>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p131, e0.0
  val?            %0.3  = NamedCall          !     %0.1(%0.2, "#", fixed=true) e0.0   <vec->
  void                    Return             l     %0.3
Prom 131:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    sigs, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 132:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    n, e0.0
  val?            %0.2  = Force<wrapped>     !v    %0.1, e0.0   <int$->
  val?^ | miss    %0.3  = LdVar              eR    siglens, e0.0
  val?            %0.4  = Force<value>       !v    %0.3, e0.0   <int->
  lgl$#-          %0.5  = IsType                   %0.4 isA val+   <true>
  void                    Branch                   %0.5 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    short, e0.0
  val?            %2.1  = Force<value>       !v    %2.0, e0.0   <lgl->
  val?            %2.2  = %2.1
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p133, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.2:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract1_1D        !v    %0.4, %3.1, e0.0   <int->
  void                    Visible            v     
  val?            %3.4  = Sub                !     %0.2, %3.2, e0.0   <int->
  void                    Return             l     %3.4
Prom 133:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    short, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 134:
BB0
  env             e0.0  = LdFunctionEnv            
  cls             %0.1  = MkCls                    unknown--fromConstant@Prom(4)0, e0.0
  void                    Return             l     %0.1
Prom 135:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     character, <0x556a1bba37e0>, e0.0
  val?            %0.2  = Call               !     %0.1(1L) e0.0   <str$->
  void                    Return             l     %0.2
Prom 136:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    sigs, e0.0
  val?            %0.2  = Force<wrapped>     !v    %0.1, e0.0   <str->
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <true>
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    short, e0.0
  val?            %2.1  = Force<value>       !v    %2.0, e0.0   <lgl->
  val?            %2.2  = %2.1
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, .findInheritedMethods[0x556a226bd4a0]_p137, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.2:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract1_1D        !v    %0.2, %3.1, e0.0   <str->
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 137:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    short, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 138:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    suffix, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str->
  void                    Return             l     %0.3

│ .findInheritedMethods[0x556a226bd4a0]                                        │
└──────────────────────────────────────────────────────────────────────────────┘
