
┌──────────────────────────────────────────────────────────────────────────────┐
│ match.arg[0x556a2760a7b0]                                                    │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch miss: 2                              │
│ Properties:                                                                  │
├────── Final PIR Version
match.arg[0x556a2760a7b0]
BB0
  val?^           %0.0  = LdArg                    0
  env             e0.1  = MkEnv              l     arg=%0.0, choices(miss)=missingArg, several.ok(miss)=false, parent=R_BaseNamespace, context 1
  prom-           %0.2  = MkArg                    unboundValue, match.arg[0x556a2760a7b0]_p5, e0.1
  val?            %0.3  = StaticCall         !v    formals[0x556a1e1d12e0](%0.2) e0.1   <list->
  void                    StVar              lW    formal.args, %0.3, e0.1
  val?^ | miss    %0.5  = LdVar              eR    eval, e0.1
  lgl$#-          %0.6  = Identical                %0.5, function(expr, envir=parent.frame(), enclos=if|...
  void                    Branch                   %0.6 -> BB57 (if true) | BB58 (if false)
BB57   <- [0]
  prom-           %57.0 = MkArg                    unboundValue, match.arg[0x556a2760a7b0]_p7, e0.1
  prom-           %57.1 = MkArg                    unboundValue, match.arg[0x556a2760a7b0]_p13, e0.1
  val?            %57.2 = StaticCall         !v    eval[0x556a27559340](%57.0, %57.1) { 0 1n } e0.1   <str->
  void                    StVar              lW    choices, %57.2, e0.1
  val?^ | miss    %57.4 = LdVar              eR    arg, e0.1
  val?            %57.5 = Force!<lazy>       !v    %57.4, e0.1   <str->
  lgl$-           %57.6 = Is                       %57.5, NULL
  lgl$#-          %57.7 = CheckTrueFalse     e     %57.6
  void                    Branch                   %57.7 -> BB53 (if true) | BB5 (if false)
BB58   <- [0]
  fs              %58.0 = FrameState         R     0x556a1dfe24d0+63: [], env=e0.1
  void                    Deopt              !v    %58.0, CallTarget@0x556a1d51e270[Call#3], %0.5   !
BB53   <- [57]
  val?^ | miss    %53.0 = LdVar              eR    choices, e0.1
  val?            %53.1 = Force!             !v    %53.0, e0.1   <val?_>
  lgl$#-          %53.2 = IsType                   %53.1 isA val?+
  void                    Branch                   %53.2 -> BB59 (if true) | BB60 (if false)
BB5   <- [57]
  val?^ | miss    %5.0  = LdVar              eR    is.character, e0.1
  lgl$#-          %5.1  = Identical                <blt is.character>, %5.0   <true>
  void                    Branch                   %5.1 -> BB61 (if true) | BB62 (if false)
BB59   <- [53]
  val?+           %59.0 = CastType           d     dn %53.1   <val?_>
  val?            %59.1 = Extract1_1D        wed   %59.0, 1L, elided   <val?_>
  void                    Visible            v     
  val?            %59.3 = %59.1
  goto BB35
BB60   <- [53]
  fs              %60.0 = FrameState         R     0x556a1dfe24d0+302: [%53.1], env=e0.1
  void                    Deopt              !v    %60.0, Typecheck@0x556a1d51e270[Type#18], %53.1   !
BB61   <- [5]
  val?^ | miss    %61.0 = LdVar              eR    arg, e0.1
  val?            %61.1 = Force!<wrapped>    !v    %61.0, e0.1   <str->
  lgl$#-          %61.2 = CallSafeBuiltin    wed   is.character(%61.1)    <lgl$->
  void                    Branch                   %61.2 -> BB7 (if true) | BB6 (if false)
BB62   <- [5]
  fs              %62.0 = FrameState         R     0x556a1dfe24d0+131: [%57.5], env=e0.1
  void                    Deopt              !v    %62.0, DeadBranchReached@0x556a1d51e270[Test#1], %5.1   !
BB35   <- [59, 71, 103]
  val?            %35.0 = Phi                      %103.3:BB103, %71.3:BB71, %59.3:BB59
  val?            %35.1 = %35.0
  void                    Return             l     %35.1
BB7   <- [61]
  val?^ | miss    %7.0  = LdVar              eR    several.ok, e0.1
  val?            %7.1  = Force!<lazy>       !v    %7.0, e0.1   <lgl$->
  lgl$#-          %7.2  = IsType                   %7.1 isA lgl$-
  void                    Branch                   %7.2 -> BB63 (if true) | BB64 (if false)
BB6   <- [61]
  (cls|spec|blt)  %6.0  = LdFun              !v    stop, e0.1
  fs              %6.1  = FrameState         R     0x556a1dfe24d0+260: [%6.0], env=e0.1
  void                    Deopt              !v    %6.1, DeadCall@0x556a1d51e270[Call#10], %6.0   !
BB63   <- [7]
  lgl$-           %63.0 = CastType           d     dn %7.1
  lgl$-           %63.1 = Not                d     %63.0, elided
  lgl$#-          %63.2 = CheckTrueFalse     e     %63.1
  void                    Branch                   %63.2 -> BB40 (if true) | BB10 (if false)
BB64   <- [7]
  void                    Nop                !     
  val?            %64.1 = %7.1
  dr              %64.2 = Typecheck@0x556a1d51e270[Type#20]
  goto BB8
BB40   <- [63]
  val?^ | miss    %40.0 = LdVar              eR    identical, e0.1
  lgl$#-          %40.1 = Identical                %40.0, function(x, y, num.eq=TRUE, single.NA=TRUE, at|...
  void                    Branch                   %40.1 -> BB65 (if true) | BB66 (if false)
BB10   <- [63]
  val?^ | miss    %10.0 = LdVar              eR    length, e0.1
  lgl$#-          %10.1 = Identical                <blt length>, %10.0   <@?>
  void                    Branch                   %10.1 -> BB12 (if true) | BB11 (if false)
BB8   <- [64, 66]
  val?^ | miss    %8.0  = Phi                      %64.1:BB64, %66.1:BB66
  val?^ | miss    %8.1  = %8.0
  dr              %8.2  = Phi                      %64.2:BB64, %66.2:BB66
  dr              %8.3  = %8.2
  fs              %8.4  = FrameState         R     0x556a1dfe24d0+361: [%7.1], env=e0.1
  void                    Deopt              !v    %8.4, %8.3, %8.1   !
BB65   <- [40]
  prom-           %65.0 = MkArg                    unboundValue, match.arg[0x556a2760a7b0]_p3, e0.1
  prom-           %65.1 = MkArg                    unboundValue, match.arg[0x556a2760a7b0]_p4, e0.1
  ct              %65.2 = PushContext        lCL   %65.0, %65.1, identical(arg, choices), function(x, y, num.eq=TRUE, single.NA=TRUE, at|..., e0.1
  val?^           %65.3 = CastType                 up %65.1
  val?^           %65.4 = CastType                 up %65.0
  env             e65.5 = MkEnv              l     x=%65.4, y=%65.3, num.eq(miss)=true, single.NA(miss)=true, attrib.as.set(miss)=true, ignore.bytecode(miss)=true, ignore.environment(miss)=false, ignore.srcref(miss)=true, parent=R_BaseNamespace, context 1
  val?            %65.6 = Force!<lazy>       !vL   %65.4, e65.5   <val?>
  val?            %65.7 = Force!<lazy>       !vL   %65.3, e65.5   <val?>
  val?            %65.8 = CallBuiltin        !v    identical(%65.6, %65.7, true, true, true, true, false, true) e65.5
  val?            %65.9 = PopContext         C     %65.8, %65.2   <lgl$->
  lgl$#-          %65.10 = IsType                   %65.9 isA lgl$-
  void                    Branch                   %65.10 -> BB67 (if true) | BB68 (if false)
BB66   <- [40]
  void                    Nop                !     
  val?^ | miss    %66.1 = %40.0
  dr              %66.2 = CallTarget@0x556a1d51e270[Call#13]
  goto BB8
BB12   <- [10]
  val?^ | miss    %12.0 = LdVar              eR    arg, e0.1
  val?            %12.1 = Force!             !v    %12.0, e0.1   <val?_>
  lgl$#-          %12.2 = IsType                   %12.1 isA val?+
  void                    Branch                   %12.2 -> BB77 (if true) | BB78 (if false)
BB11   <- [10]
  (cls|spec|blt)  %11.0 = LdFun              !v    length, e0.1
  fs              %11.1 = FrameState         R     0x556a1dfe24d0+401: [%11.0], env=e0.1
  void                    Deopt              !v    %11.1, DeadCall@0x556a1d51e270[Call#11], %11.0   !
BB67   <- [65]
  lgl$-           %67.0 = CastType           d     dn %65.9
  lgl$#-          %67.1 = CheckTrueFalse     e     %67.0
  void                    Branch                   %67.1 -> BB50 (if true) | BB43 (if false)
BB68   <- [65]
  void                    Nop                !     
  val?            %68.1 = %65.9
  dr              %68.2 = Typecheck@0x556a1d51e270[Type#27]
  goto BB41
BB77   <- [12]
  val?+           %77.0 = CastType           d     dn %12.1   <val?_>
  real$-          %77.1 = CallSafeBuiltin    wed   length(%77.0)    <val?_>
  lgl$-           %77.2 = Eq                 d     %77.1, 0L, elided   <val?_>
  lgl$#-          %77.3 = CheckTrueFalse     e     %77.2
  void                    Branch                   %77.3 -> BB39 (if true) | BB15 (if false)
BB78   <- [12]
  fs              %78.0 = FrameState         R     0x556a1dfe24d0+442: [<blt length>, %12.1], env=e0.1
  void                    Deopt              !v    %78.0, Typecheck@0x556a1d51e270[Type#22], %12.1   !
BB50   <- [67]
  val?^ | miss    %50.0 = LdVar              eR    arg, e0.1
  val?            %50.1 = Force!<wrapped>    !v    %50.0, e0.1   <str->
  lgl$#-          %50.2 = IsType                   %50.1 isA val+   <true>
  lgl$#-          %50.3 = IsType                   %50.1 isA val?-
  void                    Branch                   %50.2 -> BB69 (if true) | BB70 (if false)
BB43   <- [67]
  val?^ | miss    %43.0 = LdVar              eR    length, e0.1
  lgl$#-          %43.1 = Identical                <blt length>, %43.0   <true>
  void                    Branch                   %43.1 -> BB73 (if true) | BB74 (if false)
BB41   <- [68, 74]
  val?^ | miss    %41.0 = Phi                      %68.1:BB68, %74.1:BB74
  val?^ | miss    %41.1 = %41.0
  dr              %41.2 = Phi                      %68.2:BB68, %74.2:BB74
  dr              %41.3 = %41.2
  fs              %41.4 = FrameState         R     0x556a1dfe24d0+567: [%65.9], env=e0.1
  void                    Deopt              !v    %41.4, %41.3, %41.1   !
BB39   <- [77]
  (cls|spec|blt)  %39.0 = LdFun              !v    stop, e0.1
  fs              %39.1 = FrameState         R     0x556a1dfe24d0+497: [%39.0], env=e0.1
  void                    Deopt              !v    %39.1, DeadCall@0x556a1d51e270[Call#12], %39.0   !
BB15   <- [77]
  void                    Nop                !     
  goto BB16
BB69   <- [50]
  void                    Branch                   %50.3 -> BB71 (if true) | BB72 (if false)
BB70   <- [50]
  void                    Nop                !     
  lgl$#-          %70.1 = %50.2
  dr              %70.2 = DeadBranchReached@0x556a1d51e270[Test#4]
  goto BB51
BB73   <- [43]
  val?^ | miss    %73.0 = LdVar              eR    arg, e0.1
  val?            %73.1 = Force!<wrapped>    !v    %73.0, e0.1   <str$->
  lgl$#-          %73.2 = IsType                   %73.1 isA val?-
  void                    Branch                   %73.2 -> BB75 (if true) | BB76 (if false)
BB74   <- [43]
  void                    Nop                !     
  lgl$#-          %74.1 = %43.1
  dr              %74.2 = DeadBranchReached@0x556a1d51e270[Test#5]
  goto BB41
BB16   <- [48, 15]
  val?^ | miss    %16.0 = LdVar              eR    pmatch, e0.1
  lgl$#-          %16.1 = Identical                %16.0, function(x, table, nomatch=NA, duplicates.ok=F|...
  void                    Branch                   %16.1 -> BB81 (if true) | BB82 (if false)
BB71   <- [69]
  val?-           %71.0 = CastType           d     dn %50.1   <str->
  val?            %71.1 = Extract1_1D        wed   %71.0, 1L, elided   <str$->
  void                    Visible            v     
  val?            %71.3 = %71.1
  goto BB35
BB72   <- [69]
  void                    Nop                !     
  val?            %72.1 = %50.1
  dr              %72.2 = Typecheck@0x556a1d51e270[Type#28]
  goto BB51
BB51   <- [70, 72]
  val?^ | miss    %51.0 = Phi                      %70.1:BB70, %72.1:BB72
  val?^ | miss    %51.1 = %51.0
  dr              %51.2 = Phi                      %70.2:BB70, %72.2:BB72
  dr              %51.3 = %51.2
  fs              %51.4 = FrameState         R     0x556a1dfe24d0+592: [%50.1], env=e0.1
  void                    Deopt              !v    %51.4, %51.3, %51.1   !
BB75   <- [73]
  val?-           %75.0 = CastType           d     dn %73.1   <str$->
  (int|real)$-    %75.1 = CallSafeBuiltin    wed   length(%75.0)    <int$->
  lgl$#-          %75.2 = IsType                   %75.1 isA int$-
  void                    Branch                   %75.2 -> BB79 (if true) | BB80 (if false)
BB76   <- [73]
  fs              %76.0 = FrameState         R     0x556a1dfe24d0+711: [<blt length>, %73.1], env=e0.1
  void                    Deopt              !v    %76.0, Typecheck@0x556a1d51e270[Type#31], %73.1   !
BB81   <- [16]
  prom-           %81.0 = MkArg                    unboundValue, match.arg[0x556a2760a7b0]_p2, e0.1
  val?^ | miss    %81.1 = LdVar              eR    arg, e0.1
  val?            %81.2 = Force!<wrapped>    !v    %81.1, e0.1   <str$->
  prom-           %81.3 = MkArg                    %81.2, match.arg[0x556a2760a7b0]_p1 (!refl), 
  val?            %81.4 = StaticCall         !v    pmatch[0x556a22905760](%81.3, %81.0, 0L, true) { 0 1 2n 3n } e0.1   <int$->
  lgl$#-          %81.5 = IsType                   %81.4 isA int$-
  void                    Branch                   %81.5 -> BB83 (if true) | BB84 (if false)
BB82   <- [16]
  fs              %82.0 = FrameState         R     0x556a1dfe24d0+794: [], env=e0.1
  void                    Deopt              !v    %82.0, CallTarget@0x556a1d51e270[Call#16], %16.0   !
BB79   <- [75]
  int$-           %79.0 = CastType           d     dn %75.1
  lgl$-           %79.1 = Gt                 d     %79.0, 1L, elided   <lgl$->
  lgl$#-          %79.2 = CheckTrueFalse     e     %79.1
  void                    Branch                   %79.2 -> BB49 (if true) | BB48 (if false)
BB80   <- [75]
  fs              %80.0 = FrameState         R     0x556a1dfe24d0+733: [%75.1], env=e0.1
  void                    Deopt              !v    %80.0, Typecheck@0x556a1d51e270[Type#32], %75.1   !
BB83   <- [81]
  int$-           %83.0 = CastType           d     dn %81.4
  void                    StVar              lW    i, %83.0, e0.1
  val?^ | miss    %83.2 = LdVar              eR    all, e0.1
  lgl$#-          %83.3 = Identical                <blt all>, %83.2   <true>
  void                    Branch                   %83.3 -> BB85 (if true) | BB86 (if false)
BB84   <- [81]
  fs              %84.0 = FrameState         R     0x556a1dfe24d0+857: [%81.4], env=e0.1
  void                    Deopt              !v    %84.0, Typecheck@0x556a1d51e270[Type#36], %81.4   !
BB49   <- [79]
  (cls|spec|blt)  %49.0 = LdFun              !v    stop, e0.1
  fs              %49.1 = FrameState         R     0x556a1dfe24d0+766: [%49.0], env=e0.1
  void                    Deopt              !v    %49.1, DeadCall@0x556a1d51e270[Call#15], %49.0   !
BB48   <- [79]
  void                    Nop                !     
  goto BB16
BB85   <- [83]
  lgl$-           %85.0 = Eq                 d     %83.0, 0L, elided   <lgl$->
  val?            %85.1 = CallBuiltin        !v    all(%85.0) e0.1   <lgl$->
  lgl$#-          %85.2 = IsType                   %85.1 isA lgl$-
  void                    Branch                   %85.2 -> BB87 (if true) | BB88 (if false)
BB86   <- [83]
  fs              %86.0 = FrameState         R     0x556a1dfe24d0+871: [], env=e0.1
  void                    Deopt              !v    %86.0, DeadBranchReached@0x556a1d51e270[Test#6], %83.3   !
BB87   <- [85]
  lgl$-           %87.0 = CastType           d     dn %85.1
  lgl$#-          %87.1 = CheckTrueFalse     e     %87.0
  void                    Branch                   %87.1 -> BB38 (if true) | BB25 (if false)
BB88   <- [85]
  void                    Nop                !     
  val?            %88.1 = %85.1
  dr              %88.2 = Typecheck@0x556a1d51e270[Type#41]
  goto BB23
BB38   <- [87]
  (cls|spec|blt)  %38.0 = LdFun              !v    stop, e0.1
  fs              %38.1 = FrameState         R     0x556a1dfe24d0+995: [%38.0], env=e0.1
  void                    Deopt              !v    %38.1, DeadCall@0x556a1d51e270[Call#18], %38.0   !
BB25   <- [87]
  val?^ | miss    %25.0 = LdVar              eR    i, e0.1
  lgl$#-          %25.1 = IsType                   %25.0 isA int$-
  void                    Branch                   %25.1 -> BB89 (if true) | BB90 (if false)
BB23   <- [88, 90]
  val?^ | miss    %23.0 = Phi                      %88.1:BB88, %90.1:BB90
  val?^ | miss    %23.1 = %23.0
  dr              %23.2 = Phi                      %88.2:BB88, %90.2:BB90
  dr              %23.3 = %23.2
  fs              %23.4 = FrameState         R     0x556a1dfe24d0+974: [%85.1], env=e0.1
  void                    Deopt              !v    %23.4, %23.3, %23.1   !
BB89   <- [25]
  int$-           %89.0 = CastType           d     dn %25.0
  lgl$-           %89.1 = Gt                 d     %89.0, 0L, elided   <lgl$->
  int-            %89.2 = Extract1_1D        wed   %89.0, %89.1, elided   <int$->
  lgl$#-          %89.3 = IsType                   %89.2 isA int$-
  void                    Branch                   %89.3 -> BB91 (if true) | BB92 (if false)
BB90   <- [25]
  void                    Nop                !     
  val?^ | miss    %90.1 = %25.0
  dr              %90.2 = Typecheck@0x556a1d51e270[Type#46]
  goto BB23
BB91   <- [89]
  int$-           %91.0 = CastType           d     dn %89.2
  void                    StVar              lW    i, %91.0, e0.1
  val?^ | miss    %91.2 = LdVar              eR    several.ok, e0.1
  val?            %91.3 = Force!<wrapped>    !v    %91.2, e0.1   <lgl$->
  lgl$#-          %91.4 = IsType                   %91.3 isA lgl$-
  void                    Branch                   %91.4 -> BB93 (if true) | BB94 (if false)
BB92   <- [89]
  fs              %92.0 = FrameState         R     0x556a1dfe24d0+1108: [%89.2], env=e0.1
  void                    Deopt              !v    %92.0, Typecheck@0x556a1d51e270[Type#51], %89.2   !
BB93   <- [91]
  lgl$-           %93.0 = CastType           d     dn %91.3
  lgl$-           %93.1 = Not                d     %93.0, elided
  lgl$-           %93.2 = AsLogical                %93.1
  lgl$#-          %93.3 = Identical                %93.2, false
  void                    Branch                   %93.3 -> BB37 (if true) | BB30 (if false)
BB94   <- [91]
  void                    Nop                !     
  val?            %94.1 = %91.3
  dr              %94.2 = Typecheck@0x556a1d51e270[Type#52]
  goto BB28
BB37   <- [93]
  void                    Nop                !     
  lgl$-           %37.1 = %93.2
  goto BB31
BB30   <- [93]
  val?^ | miss    %30.0 = LdVar              eR    length, e0.1
  lgl$#-          %30.1 = Identical                <blt length>, %30.0   <true>
  void                    Branch                   %30.1 -> BB95 (if true) | BB96 (if false)
BB28   <- [94, 96, 98]
  val?^ | miss    %28.0 = Phi                      %94.1:BB94, %96.1:BB96, %98.1:BB98
  val?^ | miss    %28.1 = %28.0
  dr              %28.2 = Phi                      %94.2:BB94, %96.2:BB96, %98.2:BB98
  dr              %28.3 = %28.2
  fs              %28.4 = FrameState         R     0x556a1dfe24d0+1132: [%91.3], env=e0.1
  void                    Deopt              !v    %28.4, %28.3, %28.1   !
BB31   <- [37, 97]
  lgl$-           %31.0 = Phi                      %97.1:BB97, %37.1:BB37
  lgl$-           %31.1 = %31.0
  lgl$#-          %31.2 = CheckTrueFalse     e     %31.1
  void                    Branch                   %31.2 -> BB36 (if true) | BB32 (if false)
BB95   <- [30]
  val?^ | miss    %95.0 = LdVar              eR    i, e0.1
  lgl$#-          %95.1 = IsType                   %95.0 isA int$-
  void                    Branch                   %95.1 -> BB97 (if true) | BB98 (if false)
BB96   <- [30]
  void                    Nop                !     
  lgl$#-          %96.1 = %30.1
  dr              %96.2 = DeadBranchReached@0x556a1d51e270[Test#8]
  goto BB28
BB36   <- [31]
  (cls|spec|blt)  %36.0 = LdFun              !v    stop, e0.1
  fs              %36.1 = FrameState         R     0x556a1dfe24d0+1271: [%36.0], env=e0.1
  void                    Deopt              !v    %36.1, DeadCall@0x556a1d51e270[Call#23], %36.0   !
BB32   <- [31]
  val?^ | miss    %32.0 = LdVar              eR    choices, e0.1
  val?            %32.1 = Force!<value>      !v    %32.0, e0.1   <str->
  lgl$#-          %32.2 = IsType                   %32.1 isA val+   <true>
  lgl$#-          %32.3 = IsType                   %32.1 isA val?-
  void                    Branch                   %32.2 -> BB99 (if true) | BB100 (if false)
BB97   <- [95]
  void                    Nop                !     
  lgl$#-          %97.1 = false
  goto BB31
BB98   <- [95]
  void                    Nop                !     
  val?^ | miss    %98.1 = %95.0
  dr              %98.2 = Typecheck@0x556a1d51e270[Type#54]
  goto BB28
BB99   <- [32]
  val?^ | miss    %99.0 = LdVar              eR    i, e0.1
  lgl$#-          %99.1 = IsType                   %99.0 isA int$-
  void                    Branch                   %99.1 -> BB101 (if true) | BB102 (if false)
BB100   <- [32]
  void                    Nop                !     
  lgl$#-          %100.1 = %32.2
  dr              %100.2 = DeadBranchReached@0x556a1d51e270[Test#9]
  goto BB33
BB101   <- [99]
  int$-           %101.0 = CastType           d     dn %99.0
  void                    Branch                   %32.3 -> BB103 (if true) | BB104 (if false)
BB102   <- [99]
  void                    Nop                !     
  val?^ | miss    %102.1 = %99.0
  dr              %102.2 = Typecheck@0x556a1d51e270[Type#59]
  goto BB33
BB33   <- [100, 102, 104]
  val?^ | miss    %33.0 = Phi                      %100.1:BB100, %102.1:BB102, %104.1:BB104
  val?^ | miss    %33.1 = %33.0
  dr              %33.2 = Phi                      %100.2:BB100, %102.2:BB102, %104.2:BB104
  dr              %33.3 = %33.2
  fs              %33.4 = FrameState         R     0x556a1dfe24d0+1308: [%32.1], env=e0.1
  void                    Deopt              !v    %33.4, %33.3, %33.1   !
BB103   <- [101]
  val?-           %103.0 = CastType           d     dn %32.1   <str->
  val?            %103.1 = Extract1_1D        wed   %103.0, %101.0, elided   <str$->
  void                    Visible            v     
  val?            %103.3 = %103.1
  goto BB35
BB104   <- [101]
  void                    Nop                !     
  val?            %104.1 = %32.1
  dr              %104.2 = Typecheck@0x556a1d51e270[Type#57]
  goto BB33
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    arg, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    choices, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 3:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    arg, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 4:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    choices, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 5:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     sys.function, <0x556a1bbe71b0>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, match.arg[0x556a2760a7b0]_p6, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <cls->
  void                    Return             l     %0.3
Prom 6:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !v    sys.parent, <0x556a1c3ae590>, e0.0
  val?            %0.2  = Call               !v    %0.1() e0.0   <int$->
  void                    Invisible          v     
  void                    StVar              lW    sysP, %0.2, e0.0
  void                    Return             l     %0.2
Prom 7:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    formal.args, e0.0
  val?            %0.2  = Force<value>       !v    %0.1, e0.0   <list->
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <true>
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  (cls|spec|blt)  %2.0  = LdFun              !v    as.character, <0x556a1b417040>, e0.0
  prom-           %2.1  = MkArg                    unboundValue, match.arg[0x556a2760a7b0]_p8, e0.0
  val?            %2.2  = Call               !v    %2.0(%2.1) e0.0   <str$->
  val?            %2.3  = %2.2
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, match.arg[0x556a2760a7b0]_p10, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.3:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract2_1D        !v    %0.2, %3.1, e0.0   <code->
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 8:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     substitute, <0x556a1b409468>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, match.arg[0x556a2760a7b0]_p9, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <sym->
  void                    Return             l     %0.3
Prom 9:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    arg, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 10:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     as.character, e0.0
  prom-           %0.2  = MkArg                    unboundValue, match.arg[0x556a2760a7b0]_p11, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 11:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     substitute, e0.0
  prom-           %0.2  = MkArg                    unboundValue, match.arg[0x556a2760a7b0]_p12, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 12:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    arg, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 13:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     sys.frame, <0x556a1b9e0110>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, match.arg[0x556a2760a7b0]_p14, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <env->
  void                    Return             l     %0.3
Prom 14:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    sysP, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <int$->
  void                    Return             l     %0.3

│ match.arg[0x556a2760a7b0]                                                    │
└──────────────────────────────────────────────────────────────────────────────┘
