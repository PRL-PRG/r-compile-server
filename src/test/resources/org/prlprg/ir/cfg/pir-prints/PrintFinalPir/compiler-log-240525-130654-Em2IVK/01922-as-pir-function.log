
┌──────────────────────────────────────────────────────────────────────────────┐
│ as[0x556a1edd5cc0]                                                           │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;NonRefl1,!Obj1 miss: 2               │
│ Properties:                                                                  │
├────── Final PIR Version
as[0x556a1edd5cc0]
BB0
  val?^           %0.0  = LdArg                    1
  val?^           %0.1  = LdArg                    0
  env             e0.2  = MkEnv              l     object=%0.1, Class=%0.0, strict(miss)=true, ext(miss)=missingArg, parent=<env 0x556a1ba11378>, context 1
  prom-           %0.3  = MkArg                    unboundValue, as[0x556a1edd5cc0]_p1, e0.2
  val?^ | miss    %0.4  = CastType                 up %0.3
  void                    StArg              lW    ext, %0.4, e0.2
  val?^ | miss    %0.6  = LdVar              eR    .class1, <env 0x556a1ba11378>
  lgl$#-          %0.7  = Identical                %0.6, function(x) <(rir::DispatchTable*)0x556a1df270|...
  void                    Branch                   %0.7 -> BB97 (if true) | BB98 (if false)
BB97   <- [0]
  prom-           %97.0 = MkArg                    unboundValue, as[0x556a1edd5cc0]_p4, e0.2
  ct              %97.1 = PushContext        lCL   %97.0, .class1(object), function(x) <(rir::DispatchTable*)0x556a1df270|..., e0.2
  val?^           %97.2 = CastType                 up %97.0
  val?^ | miss    %97.3 = LdVar              eR    class, <env 0x556a1ba11378>
  lgl$#-          %97.4 = Identical                <blt class>, %97.3   <true>
  void                    Branch                   %97.4 -> BB99 (if true) | BB100 (if false)
BB98   <- [0]
  fs              %98.0 = FrameState         R     0x556a1f30ffd0+0: [], env=e0.2
  void                    Deopt              !v    %98.0, CallTarget@0x556a1e904f70[Call#1], %0.6
BB99   <- [97]
  env             e99.0 = MkEnv              l     x=%97.2, parent=<env 0x556a1ba11378>, context 1
  val?            %99.1 = Force!<lazy>       !vL   %97.2, e99.0   <val?>
  val?            %99.2 = CallBuiltin        !v    class(%99.1) e99.0   <str+>
  void                    StVar              lW    cl, %99.2, e99.0
  lgl$#-          %99.4 = IsType                   %99.2 isA val?+
  val?^ | miss    %99.5 = LdVar              eR    length, e99.0
  lgl$#-          %99.6 = Identical                <blt length>, %99.5   <true>
  void                    Branch                   %99.6 -> BB101 (if true) | BB102 (if false)
BB100   <- [97]
  fs              %100.0 = FrameState         R     0x556a1f30ffd0+32: [], env=e0.2
  env             e100.1 = (MkEnv)            l     x=%97.2, parent=<env 0x556a1ba11378>, context 1
  fs              %100.2 = FrameState         R     0x556a1c23ff40+17: [<blt class>, %97.4], env=e100.1, next=%100.0
  void                    Deopt              !v    %100.2, DeadBranchReached@0x556a1e4e4728[Test#0], %97.4   !
BB101   <- [99]
  val             %101.0 = ChkMissing         e     %99.2
  void                    Branch                   %99.4 -> BB103 (if true) | BB104 (if false)
BB102   <- [99]
  void                    Nop                !     
  lgl$#-          %102.1 = %99.6
  dr              %102.2 = DeadBranchReached@0x556a1e4e4728[Test#1]
  goto BB5
BB103   <- [101]
  val?+           %103.0 = CastType           d     dn %99.2   <str+>
  (int|real)$-    %103.1 = CallSafeBuiltin    wed   length(%103.0)    <int$->
  lgl$#-          %103.2 = IsType                   %103.1 isA int$-
  void                    Branch                   %103.2 -> BB105 (if true) | BB106 (if false)
BB104   <- [101]
  void                    Nop                !     
  val?            %104.1 = %99.2
  dr              %104.2 = Typecheck@0x556a1e4e4728[Type#2]
  goto BB5
BB5   <- [102, 104]
  val?^ | miss    %5.0  = Phi                      %102.1:BB102, %104.1:BB104
  val?^ | miss    %5.1  = %5.0
  dr              %5.2  = Phi                      %102.2:BB102, %104.2:BB104
  dr              %5.3  = %5.2
  fs              %5.4  = FrameState         R     0x556a1f30ffd0+32: [], env=e0.2
  fs              %5.5  = FrameState         R     0x556a1c23ff40+105: [], env=e99.0, next=%5.4
  void                    Deopt              !v    %5.5, %5.3, %5.1   !
BB105   <- [103]
  int$-           %105.0 = CastType           d     dn %103.1
  lgl$-           %105.1 = Gt                 d     %105.0, 1L, elided   <lgl$->
  lgl$#-          %105.2 = CheckTrueFalse     e     %105.1
  void                    Branch                   %105.2 -> BB95 (if true) | BB9 (if false)
BB106   <- [103]
  void                    Nop                !     
  (int|real)$-    %106.1 = %103.1
  dr              %106.2 = Typecheck@0x556a1e4e4728[Type#5]
  goto BB7
BB95   <- [105]
  lgl$#-          %95.0 = IsType                   %103.0 isA val+   <true>
  void                    Branch                   %95.0 -> BB107 (if true) | BB108 (if false)
BB9   <- [105]
  void                    Nop                !     
  val?+           %9.1  = %103.0
  goto BB10
BB7   <- [106, 108, 110]
  val?^ | miss    %7.0  = Phi                      %106.1:BB106, %108.1:BB108, %110.1:BB110
  val?^ | miss    %7.1  = %7.0
  dr              %7.2  = Phi                      %106.2:BB106, %108.2:BB108, %110.2:BB110
  dr              %7.3  = %7.2
  fs              %7.4  = FrameState         R     0x556a1f30ffd0+32: [], env=e0.2
  fs              %7.5  = FrameState         R     0x556a1c23ff40+196: [%103.1], env=e99.0, next=%7.4
  void                    Deopt              !v    %7.5, %7.3, %7.1   !
BB107   <- [95]
  lgl$#-          %107.0 = IsType                   %103.0 isA val?-
  void                    Branch                   %107.0 -> BB109 (if true) | BB110 (if false)
BB108   <- [95]
  void                    Nop                !     
  lgl$#-          %108.1 = %95.0
  dr              %108.2 = DeadBranchReached@0x556a1e4e4728[Test#2]
  goto BB7
BB10   <- [9, 109]
  val?            %10.0 = Phi                      %9.1:BB9, %109.2:BB109
  val?            %10.1 = %10.0
  val?            %10.2 = PopContext         C     %10.1, %97.1   <str$+>
  void                    StVar              lW    thisClass, %10.2, e0.2
  val?^ | miss    %10.4 = LdVar              eR    .identC, e0.2
  lgl$#-          %10.5 = Identical                %10.4, function(c1=NULL, c2=NULL) <(rir::DispatchTabl|...
  void                    Branch                   %10.5 -> BB111 (if true) | BB112 (if false)
BB109   <- [107]
  val?-           %109.0 = CastType           d     dn %103.0   <str->
  val?            %109.1 = Extract2_1D        wed   %109.0, 1L, elided   <str$->
  val?            %109.2 = %109.1
  goto BB10
BB110   <- [107]
  void                    Nop                !     
  val?+           %110.1 = %103.0
  dr              %110.2 = Typecheck@0x556a1e4e4728[Type#8]
  goto BB7
BB111   <- [10]
  prom-           %111.0 = MkArg                    unboundValue, as[0x556a1edd5cc0]_p5 (!refl), e0.2
  prom-           %111.1 = MkArg                    unboundValue, as[0x556a1edd5cc0]_p6, e0.2
  val?            %111.2 = StaticCall         !v    .identC[0x556a27975490](%111.0, %111.1) e0.2   <lgl$->
  lgl$#-          %111.3 = IsType                   %111.2 isA lgl$-
  void                    Branch                   %111.3 -> BB113 (if true) | BB114 (if false)
BB112   <- [10]
  fs              %112.0 = FrameState         R     0x556a1f30ffd0+46: [], env=e0.2
  void                    Deopt              !v    %112.0, CallTarget@0x556a1e904f70[Call#2], %10.4   !
BB113   <- [111]
  lgl$-           %113.0 = CastType           d     dn %111.2
  lgl$-           %113.1 = AsLogical                %113.0
  lgl$#-          %113.2 = Identical                %113.1, true
  void                    Branch                   %113.2 -> BB94 (if true) | BB15 (if false)
BB114   <- [111]
  void                    Nop                !     
  val?            %114.1 = %111.2
  dr              %114.2 = Typecheck@0x556a1e904f70[Type#7]
  goto BB13
BB94   <- [113]
  void                    Nop                !     
  lgl$-           %94.1 = %113.1
  goto BB18
BB15   <- [113]
  val?^ | miss    %15.0 = LdVar              eR    .identC, e0.2
  lgl$#-          %15.1 = Identical                %15.0, function(c1=NULL, c2=NULL) <(rir::DispatchTabl|...
  void                    Branch                   %15.1 -> BB115 (if true) | BB116 (if false)
BB13   <- [114, 116]
  val?^ | miss    %13.0 = Phi                      %114.1:BB114, %116.1:BB116
  val?^ | miss    %13.1 = %13.0
  dr              %13.2 = Phi                      %114.2:BB114, %116.2:BB116
  dr              %13.3 = %13.2
  fs              %13.4 = FrameState         R     0x556a1f30ffd0+83: [%111.2], env=e0.2
  void                    Deopt              !v    %13.4, %13.3, %13.1   !
BB18   <- [94, 119]
  lgl$-           %18.0 = Phi                      %119.3:BB119, %94.1:BB94
  lgl$-           %18.1 = %18.0
  lgl$#-          %18.2 = CheckTrueFalse     e     %18.1
  void                    Branch                   %18.2 -> BB93 (if true) | BB21 (if false)
BB115   <- [15]
  prom-           %115.0 = MkArg                    unboundValue, as[0x556a1edd5cc0]_p7, e0.2
  val?            %115.1 = StaticCall         !v    .identC[0x556a27fd1c10](%115.0, "ANY") e0.2   <lgl$->
  lgl$#-          %115.2 = IsType                   %115.1 isA lgl$-
  void                    Branch                   %115.2 -> BB119 (if true) | BB120 (if false)
BB116   <- [15]
  void                    Nop                !     
  val?^ | miss    %116.1 = %15.0
  dr              %116.2 = CallTarget@0x556a1e904f70[Call#3]
  goto BB13
BB93   <- [18]
  val?^ | miss    %93.0 = LdVar              eR    object, e0.2
  void                    Visible            v     
  val?            %93.2 = Force!<wrapped>    !     %93.0, e0.2   <(str|cls)->
  val?            %93.3 = %93.2
  goto BB36
BB21   <- [18]
  val?^ | miss    %21.0 = LdVar              eR    .classEnv, e0.2
  lgl$#-          %21.1 = Identical                %21.0, function(Class, default=.requirePackage("metho|...
  void                    Branch                   %21.1 -> BB117 (if true) | BB118 (if false)
BB119   <- [115]
  lgl$-           %119.0 = CastType           d     dn %115.1
  lgl$-           %119.1 = AsLogical                %119.0
  lgl$-           %119.2 = LOr                      %113.1, %119.1
  lgl$-           %119.3 = %119.2
  goto BB18
BB120   <- [115]
  fs              %120.0 = FrameState         R     0x556a1f30ffd0+132: [%113.1, %115.1], env=e0.2
  void                    Deopt              !v    %120.0, Typecheck@0x556a1e904f70[Type#9], %115.1   !
BB36   <- [93, 35]
  val?            %36.0 = Phi                      %35.2:BB35, %93.3:BB93
  val?            %36.1 = %36.0
  void                    Return             l     %36.1
BB117   <- [21]
  prom-           %117.0 = MkArg                    unboundValue, as[0x556a1edd5cc0]_p8, e0.2
  val?            %117.1 = StaticCall         !v    .classEnv[0x556a1e7826a0](%117.0, missingArg, false) { 0 2n } e0.2   <env->
  void                    StVar              lW    where, %117.1, e0.2
  val?^ | miss    %117.3 = LdVar              eR    getGeneric, e0.2
  lgl$#-          %117.4 = Identical                %117.3, function(f, mustFind=FALSE, where, package="")|...
  void                    Branch                   %117.4 -> BB121 (if true) | BB122 (if false)
BB118   <- [21]
  fs              %118.0 = FrameState         R     0x556a1f30ffd0+139: [%18.1], env=e0.2
  void                    Deopt              !v    %118.0, CallTarget@0x556a1e904f70[Call#4], %21.0   !
BB121   <- [117]
  prom-           %121.0 = MkArg                    unboundValue, as[0x556a1edd5cc0]_p9 (!refl), e0.2
  val?            %121.1 = StaticCall         !v    getGeneric[0x556a1e5e4f30]("coerce", missingArg, %121.0) { 0 2n } e0.2   <cls>
  void                    StVar              lW    coerceFun, %121.1, e0.2
  val?^ | miss    %121.3 = LdVar              eR    .getMethodsTable, e0.2
  lgl$#-          %121.4 = Identical                %121.3, function(fdef, env=environment(fdef), check=TR|...
  void                    Branch                   %121.4 -> BB123 (if true) | BB124 (if false)
BB122   <- [117]
  fs              %122.0 = FrameState         R     0x556a1f30ffd0+224: [], env=e0.2
  void                    Deopt              !v    %122.0, CallTarget@0x556a1e904f70[Call#5], %117.3   !
BB123   <- [121]
  prom-           %123.0 = MkArg                    unboundValue, as[0x556a1edd5cc0]_p10 (!refl), e0.2
  prom-           %123.1 = MkArg                    unboundValue, as[0x556a1edd5cc0]_p11, e0.2
  val?            %123.2 = StaticCall         !v    .getMethodsTable[0x556a1d76a6d0](%123.0, %123.1, missingArg, true) { 0 1 3n } e0.2   <env->
  void                    StVar              lW    coerceMethods, %123.2, e0.2
  val?^ | miss    %123.4 = LdVar              eR    .quickCoerceSelect, e0.2
  lgl$#-          %123.5 = Identical                %123.4, function(from, to, fdef, methods, where) <(rir|...
  void                    Branch                   %123.5 -> BB125 (if true) | BB126 (if false)
BB124   <- [121]
  fs              %124.0 = FrameState         R     0x556a1f30ffd0+283: [], env=e0.2
  void                    Deopt              !v    %124.0, CallTarget@0x556a1e904f70[Call#6], %121.3   !
BB125   <- [123]
  prom-           %125.0 = MkArg                    unboundValue, as[0x556a1edd5cc0]_p13, e0.2
  prom-           %125.1 = MkArg                    unboundValue, as[0x556a1edd5cc0]_p14, e0.2
  prom-           %125.2 = MkArg                    unboundValue, as[0x556a1edd5cc0]_p15, e0.2
  prom-           %125.3 = MkArg                    unboundValue, as[0x556a1edd5cc0]_p16 (!refl), e0.2
  prom-           %125.4 = MkArg                    unboundValue, as[0x556a1edd5cc0]_p17, e0.2
  val?            %125.5 = StaticCall         !v    .quickCoerceSelect[0x556a2192f3b0](%125.0, %125.1, %125.2, %125.3, %125.4) e0.2   <(nil|cls)>
  lgl$-           %125.6 = Is                       %125.5, NULL
  void                    StVar              lW    asMethod, %125.5, e0.2
  val             %125.8 = ChkMissing         e     %125.5
  lgl$#-          %125.9 = CheckTrueFalse     e     %125.6
  void                    Branch                   %125.9 -> BB38 (if true) | BB30 (if false)
BB126   <- [123]
  fs              %126.0 = FrameState         R     0x556a1f30ffd0+351: [], env=e0.2
  void                    Deopt              !v    %126.0, CallTarget@0x556a1e904f70[Call#8], %123.4   !
BB38   <- [125]
  val?^ | miss    %38.0 = LdVar              eR    c, e0.2
  lgl$#-          %38.1 = Identical                <blt c>, %38.0   <true>
  void                    Branch                   %38.1 -> BB127 (if true) | BB128 (if false)
BB30   <- [125]
  void                    Nop                !     
  goto BB31
BB127   <- [38]
  val?^ | miss    %127.0 = LdVar              eR    thisClass, e0.2
  lgl$#-          %127.1 = IsType                   %127.0 isA val?~+ | miss
  void                    Branch                   %127.1 -> BB129 (if true) | BB130 (if false)
BB128   <- [38]
  void                    Nop                !     
  lgl$#-          %128.1 = %38.1
  dr              %128.2 = DeadBranchReached@0x556a1e904f70[Test#0]
  goto BB28
BB31   <- [30, 39, 64]
  val?^ | miss    %31.0 = LdVar              eR    strict, e0.2
  void                    Visible            v     
  val?            %31.2 = Force!<lazy>       !     %31.0, e0.2   <lgl$->
  lgl$#-          %31.3 = CheckTrueFalse     we    %31.2
  void                    Branch                   %31.3 -> BB37 (if true) | BB34 (if false)
BB129   <- [127]
  val?~+ | miss   %129.0 = CastType           d     dn %127.0
  val?+           %129.1 = Force!<value>            %129.0,    <str$+>
  val?^ | miss    %129.2 = LdVar              eR    Class, e0.2
  val?            %129.3 = Force!<wrapped>    !v    %129.2, e0.2   <str$+>
  val?            %129.4 = NamedCall          !v    <blt c>(from=%129.1, to=%129.3) e0.2   <str+>
  void                    StVar              lW    sig, %129.4, e0.2
  (cls|spec|blt)  %129.6 = LdFun              !v    selectMethod, <0x556a20ff5108>, e0.2
  prom-           %129.7 = MkArg                    unboundValue, as[0x556a1edd5cc0]_p20, e0.2
  prom-           %129.8 = MkArg                    unboundValue, as[0x556a1edd5cc0]_p21, e0.2
  prom-           %129.9 = MkArg                    unboundValue, as[0x556a1edd5cc0]_p22, e0.2
  val?            %129.10 = NamedCall          !v    %129.6("coerce", %129.7, optional=true, useInherited=false, fdef=%129.8, mlist=%129.9) e0.2   <nil->
  lgl$-           %129.11 = Is                       %129.10, NULL
  void                    StVar              lW    asMethod, %129.10, e0.2
  val             %129.13 = ChkMissing         e     %129.10
  lgl$#-          %129.14 = CheckTrueFalse     e     %129.11
  void                    Branch                   %129.14 -> BB40 (if true) | BB39 (if false)
BB130   <- [127]
  void                    Nop                !     
  val?^ | miss    %130.1 = %127.0
  dr              %130.2 = Typecheck@0x556a1e904f70[Type#28]
  goto BB28
BB28   <- [128, 130]
  val?^ | miss    %28.0 = Phi                      %128.1:BB128, %130.1:BB130
  val?^ | miss    %28.1 = %28.0
  dr              %28.2 = Phi                      %128.2:BB128, %130.2:BB130
  dr              %28.3 = %28.2
  fs              %28.4 = FrameState         R     0x556a1f30ffd0+417: [], env=e0.2
  void                    Deopt              !v    %28.4, %28.3, %28.1   !
BB37   <- [31]
  (cls|spec|blt)  %37.0 = LdFun              !     asMethod, e0.2
  prom-           %37.1 = MkArg                    unboundValue, as[0x556a1edd5cc0]_p19, e0.2
  val?            %37.2 = Call               !     %37.0(%37.1) e0.2   <val?>
  val?            %37.3 = %37.2
  goto BB35
BB34   <- [31]
  val?^ | miss    %34.0 = LdVar              eR    asMethod, e0.2
  lgl$#-          %34.1 = Identical                %34.0, function(from, to=<str |a|>, strict=TRUE) <(ri|...
  void                    Branch                   %34.1 -> BB133 (if true) | BB134 (if false)
BB40   <- [129]
  void                    StVar              lW    canCache, true, e0.2
  void                    StVar              lW    inherited, false, e0.2
  val?^ | miss    %40.2 = LdVar              eR    is, e0.2
  lgl$#-          %40.3 = Identical                %40.2, function(object, class2) <(rir::DispatchTable*|...
  void                    Branch                   %40.3 -> BB131 (if true) | BB132 (if false)
BB39   <- [129]
  void                    Nop                !     
  goto BB31
BB35   <- [37, 133]
  val?            %35.0 = Phi                      %133.2:BB133, %37.3:BB37
  val?            %35.1 = %35.0
  val?            %35.2 = %35.1
  goto BB36
BB133   <- [34]
  prom-           %133.0 = MkArg                    unboundValue, as[0x556a1edd5cc0]_p18, e0.2
  val?            %133.1 = StaticCall         !     asMethod[0x556a27758ca0](%133.0, missingArg, false) { 0 2n } e0.2   <cls>
  val?            %133.2 = %133.1
  goto BB35
BB134   <- [34]
  fs              %134.0 = FrameState         R     0x556a1f30ffd0+1937: [%31.3], env=e0.2
  void                    Deopt              !v    %134.0, CallTarget@0x556a1e904f70[Call#38], %34.0   !
BB131   <- [40]
  prom-           %131.0 = MkArg                    unboundValue, as[0x556a1edd5cc0]_p24, e0.2
  prom-           %131.1 = MkArg                    unboundValue, as[0x556a1edd5cc0]_p25, e0.2
  val?            %131.2 = Call               !v    function(object, class2) <(rir::DispatchTable*|...(%131.0, %131.1) e0.2   <lgl$->
  lgl$#-          %131.3 = IsType                   %131.2 isA lgl$-
  void                    Branch                   %131.3 -> BB135 (if true) | BB136 (if false)
BB132   <- [40]
  fs              %132.0 = FrameState         R     0x556a1f30ffd0+742: [], env=e0.2
  void                    Deopt              !v    %132.0, CallTarget@0x556a1e904f70[Call#12], %40.2   !
BB135   <- [131]
  lgl$-           %135.0 = CastType           d     dn %131.2
  lgl$#-          %135.1 = CheckTrueFalse     e     %135.0
  void                    Branch                   %135.1 -> BB71 (if true) | BB45 (if false)
BB136   <- [131]
  void                    Nop                !     
  val?            %136.1 = %131.2
  dr              %136.2 = Typecheck@0x556a1e904f70[Type#39]
  goto BB43
BB71   <- [135]
  val?^ | miss    %71.0 = LdVar              eR    getClassDef, e0.2
  lgl$#-          %71.1 = Identical                %71.0, function(Class, where=topenv(parent.frame()), |...
  void                    Branch                   %71.1 -> BB137 (if true) | BB138 (if false)
BB45   <- [135]
  void                    Nop                !     
  goto BB46
BB43   <- [136, 138]
  val?^ | miss    %43.0 = Phi                      %136.1:BB136, %138.1:BB138
  val?^ | miss    %43.1 = %43.0
  dr              %43.2 = Phi                      %136.2:BB136, %138.2:BB138
  dr              %43.3 = %43.2
  fs              %43.4 = FrameState         R     0x556a1f30ffd0+779: [%131.2], env=e0.2
  void                    Deopt              !v    %43.4, %43.3, %43.1   !
BB137   <- [71]
  prom-           %137.0 = MkArg                    unboundValue, as[0x556a1edd5cc0]_p40, e0.2
  prom-           %137.1 = MkArg                    unboundValue, as[0x556a1edd5cc0]_p41, e0.2
  val?            %137.2 = StaticCall         !v    getClassDef[0x556a1c32a7d0](%137.0, %137.1) e0.2   <other>
  void                    StVar              lW    ClassDef, %137.2, e0.2
  val?^ | miss    %137.4 = LdVar              eR    isFALSE, e0.2
  lgl$#-          %137.5 = Identical                %137.4, function(x) <(rir::DispatchTable*)0x556a1f0336|...
  void                    Branch                   %137.5 -> BB139 (if true) | BB140 (if false)
BB138   <- [71]
  void                    Nop                !     
  val?^ | miss    %138.1 = %71.0
  dr              %138.2 = CallTarget@0x556a1e904f70[Call#13]
  goto BB43
BB46   <- [45, 87]
  val?^ | miss    %46.0 = LdVar              eR    asMethod, e0.2
  lgl$#-          %46.1 = IsType                   %46.0 isA val?~- | miss
  void                    Branch                   %46.1 -> BB145 (if true) | BB146 (if false)
BB139   <- [137]
  val?^ | miss    %139.0 = LdVar              eR    ext, e0.2
  val?            %139.1 = Force!<lazy>       !v    %139.0, e0.2   <other>
  prom-           %139.2 = MkArg                    %139.1, as[0x556a1edd5cc0]_p42 (!refl), 
  val?            %139.3 = StaticCall         !v    isFALSE[0x556a27be95c0](%139.2) e0.2   <lgl$->
  lgl$#-          %139.4 = IsType                   %139.3 isA lgl$-
  void                    Branch                   %139.4 -> BB141 (if true) | BB142 (if false)
BB140   <- [137]
  fs              %140.0 = FrameState         R     0x556a1f30ffd0+846: [], env=e0.2
  void                    Deopt              !v    %140.0, CallTarget@0x556a1e904f70[Call#14], %137.4   !
BB145   <- [46]
  val?~- | miss   %145.0 = CastType           d     dn %46.0
  val?-           %145.1 = Force!<value>            %145.0,    <cls->
  lgl$-           %145.2 = Is                       %145.1, NULL
  lgl$-           %145.3 = AsLogical                %145.2
  lgl$#-          %145.4 = Identical                %145.3, false
  void                    Branch                   %145.4 -> BB70 (if true) | BB49 (if false)
BB146   <- [46]
  void                    Nop                !     
  val?^ | miss    %146.1 = %46.0
  dr              %146.2 = Typecheck@0x556a1e904f70[Type#74]
  goto BB47
BB141   <- [139]
  lgl$-           %141.0 = CastType           d     dn %139.3
  lgl$#-          %141.1 = CheckTrueFalse     e     %141.0
  void                    Branch                   %141.1 -> BB92 (if true) | BB76 (if false)
BB142   <- [139]
  void                    Nop                !     
  val?            %142.1 = %139.3
  dr              %142.2 = Typecheck@0x556a1e904f70[Type#44]
  goto BB74
BB70   <- [145]
  void                    Nop                !     
  lgl$-           %70.1 = %145.3
  goto BB52
BB49   <- [145]
  val?^ | miss    %49.0 = LdVar              eR    extends, e0.2
  lgl$#-          %49.1 = Identical                %49.0, function(class1, class2, maybe=TRUE, fullInfo=|...
  void                    Branch                   %49.1 -> BB147 (if true) | BB148 (if false)
BB47   <- [146, 148]
  val?^ | miss    %47.0 = Phi                      %146.1:BB146, %148.1:BB148
  val?^ | miss    %47.1 = %47.0
  dr              %47.2 = Phi                      %146.2:BB146, %148.2:BB148
  dr              %47.3 = %47.2
  fs              %47.4 = FrameState         R     0x556a1f30ffd0+1324: [], env=e0.2
  void                    Deopt              !v    %47.4, %47.3, %47.1   !
BB92   <- [141]
  (cls|spec|blt)  %92.0 = LdFun              !v    stop, e0.2
  fs              %92.1 = FrameState         R     0x556a1f30ffd0+1283: [%92.0], env=e0.2
  void                    Deopt              !v    %92.1, DeadCall@0x556a1e904f70[Call#24], %92.0   !
BB76   <- [141]
  val?^ | miss    %76.0 = LdVar              eR    isTRUE, e0.2
  lgl$#-          %76.1 = Identical                %76.0, function(x) <(rir::DispatchTable*)0x556a1d2de8|...
  void                    Branch                   %76.1 -> BB143 (if true) | BB144 (if false)
BB74   <- [142, 144]
  val?^ | miss    %74.0 = Phi                      %142.1:BB142, %144.1:BB144
  val?^ | miss    %74.1 = %74.0
  dr              %74.2 = Phi                      %142.2:BB142, %144.2:BB144
  dr              %74.3 = %74.2
  fs              %74.4 = FrameState         R     0x556a1f30ffd0+878: [%139.3], env=e0.2
  void                    Deopt              !v    %74.4, %74.3, %74.1   !
BB52   <- [70, 149]
  lgl$-           %52.0 = Phi                      %149.3:BB149, %70.1:BB70
  lgl$-           %52.1 = %52.0
  lgl$#-          %52.2 = CheckTrueFalse     e     %52.1
  void                    Branch                   %52.2 -> BB69 (if true) | BB55 (if false)
BB147   <- [49]
  prom-           %147.0 = MkArg                    unboundValue, as[0x556a1edd5cc0]_p26, e0.2
  prom-           %147.1 = MkArg                    unboundValue, as[0x556a1edd5cc0]_p27, e0.2
  val?            %147.2 = Call               !v    function(class1, class2, maybe=TRUE, fullInfo=|...(%147.0, %147.1) e0.2   <lgl$->
  lgl$#-          %147.3 = IsType                   %147.2 isA lgl$-
  void                    Branch                   %147.3 -> BB149 (if true) | BB150 (if false)
BB148   <- [49]
  void                    Nop                !     
  val?^ | miss    %148.1 = %49.0
  dr              %148.2 = CallTarget@0x556a1e904f70[Call#27]
  goto BB47
BB143   <- [76]
  val?^ | miss    %143.0 = LdVar              eR    ext, e0.2
  val?            %143.1 = Force!<wrapped>    !v    %143.0, e0.2   <other>
  prom-           %143.2 = MkArg                    %143.1, as[0x556a1edd5cc0]_p43 (!refl), 
  val?            %143.3 = StaticCall         !v    isTRUE[0x556a212b5310](%143.2) e0.2   <lgl$->
  lgl$#-          %143.4 = IsType                   %143.3 isA lgl$-
  void                    Branch                   %143.4 -> BB151 (if true) | BB152 (if false)
BB144   <- [76]
  void                    Nop                !     
  val?^ | miss    %144.1 = %76.0
  dr              %144.2 = CallTarget@0x556a1e904f70[Call#15]
  goto BB74
BB69   <- [52]
  (cls|spec|blt)  %69.0 = LdFun              !v    getClassDef, e0.2
  fs              %69.1 = FrameState         R     0x556a1f30ffd0+1410: [%69.0], env=e0.2
  void                    Deopt              !v    %69.1, DeadCall@0x556a1e904f70[Call#28], %69.0   !
BB55   <- [52]
  val?^ | miss    %55.0 = LdVar              eR    asMethod, e0.2
  lgl$#-          %55.1 = IsType                   %55.0 isA val?~- | miss
  void                    Branch                   %55.1 -> BB153 (if true) | BB154 (if false)
BB149   <- [147]
  lgl$-           %149.0 = CastType           d     dn %147.2
  lgl$-           %149.1 = AsLogical                %149.0
  lgl$-           %149.2 = LAnd                     %145.3, %149.1
  lgl$-           %149.3 = %149.2
  goto BB52
BB150   <- [147]
  fs              %150.0 = FrameState         R     0x556a1f30ffd0+1387: [%145.3, %147.2], env=e0.2
  void                    Deopt              !v    %150.0, Typecheck@0x556a1e904f70[Type#77], %147.2   !
BB151   <- [143]
  lgl$-           %151.0 = CastType           d     dn %143.3
  lgl$#-          %151.1 = CheckTrueFalse     e     %151.0
  void                    Branch                   %151.1 -> BB91 (if true) | BB79 (if false)
BB152   <- [143]
  fs              %152.0 = FrameState         R     0x556a1f30ffd0+921: [%143.3], env=e0.2
  void                    Deopt              !v    %152.0, Typecheck@0x556a1e904f70[Type#46], %143.3   !
BB153   <- [55]
  val?~- | miss   %153.0 = CastType           d     dn %55.0
  val?-           %153.1 = Force!<value>            %153.0,    <(nil|cls)->
  lgl$-           %153.2 = Is                       %153.1, NULL
  lgl$#-          %153.3 = CheckTrueFalse     e     %153.2
  void                    Branch                   %153.3 -> BB68 (if true) | BB56 (if false)
BB154   <- [55]
  void                    Nop                !     
  val?^ | miss    %154.1 = %55.0
  dr              %154.2 = Typecheck@0x556a1e904f70[Type#86]
  goto BB53
BB91   <- [151]
  (cls|spec|blt)  %91.0 = LdFun              !v    .makeAsMethod, e0.2
  fs              %91.1 = FrameState         R     0x556a1f30ffd0+1212: [%91.0], env=e0.2
  void                    Deopt              !v    %91.1, DeadCall@0x556a1e904f70[Call#23], %91.0   !
BB79   <- [151]
  (cls|spec|blt)  %79.0 = LdFun              !v    @, <0x556a1b409bd8>, e0.2
  prom-           %79.1 = MkArg                    unboundValue, as[0x556a1edd5cc0]_p44, e0.2
  prom-           %79.2 = MkArg                    unboundValue, as[0x556a1edd5cc0]_p45, e0.2
  val?            %79.3 = Call               !v    %79.0(%79.1, %79.2) e0.2   <cls->
  void                    StVar              lW    test, %79.3, e0.2
  val?^ | miss    %79.5 = LdVar              eR    .makeAsMethod, e0.2
  lgl$#-          %79.6 = Identical                %79.5, function(expr, simple, Class, ClassDef, where)|...
  void                    Branch                   %79.6 -> BB155 (if true) | BB156 (if false)
BB68   <- [153]
  (cls|spec|blt)  %68.0 = LdFun              !v    selectMethod, <0x556a20ff5108>, e0.2
  prom-           %68.1 = MkArg                    unboundValue, as[0x556a1edd5cc0]_p36, e0.2
  prom-           %68.2 = MkArg                    unboundValue, as[0x556a1edd5cc0]_p37, e0.2
  prom-           %68.3 = MkArg                    unboundValue, as[0x556a1edd5cc0]_p38, e0.2
  prom-           %68.4 = MkArg                    unboundValue, as[0x556a1edd5cc0]_p39, e0.2
  val?            %68.5 = NamedCall          !v    %68.0("coerce", %68.1, optional=true, %68.2, fdef=%68.3, mlist=%68.4) e0.2   <cls>
  void                    StVar              lW    asMethod, %68.5, e0.2
  void                    StVar              lW    inherited, true, e0.2
  goto BB59
BB56   <- [153]
  val?^ | miss    %56.0 = LdVar              eR    canCache, e0.2
  lgl$#-          %56.1 = IsType                   %56.0 isA lgl$-
  void                    Branch                   %56.1 -> BB161 (if true) | BB162 (if false)
BB53   <- [154, 162, 164]
  val?^ | miss    %53.0 = Phi                      %154.1:BB154, %162.1:BB162, %164.1:BB164
  val?^ | miss    %53.1 = %53.0
  dr              %53.2 = Phi                      %154.2:BB154, %162.2:BB162, %164.2:BB164
  dr              %53.3 = %53.2
  fs              %53.4 = FrameState         R     0x556a1f30ffd0+1394: [%52.1], env=e0.2
  void                    Deopt              !v    %53.4, %53.3, %53.1   !
BB155   <- [79]
  prom-           %155.0 = MkArg                    unboundValue, as[0x556a1edd5cc0]_p46, e0.2
  prom-           %155.1 = MkArg                    unboundValue, as[0x556a1edd5cc0]_p49, e0.2
  prom-           %155.2 = MkArg                    unboundValue, as[0x556a1edd5cc0]_p52, e0.2
  prom-           %155.3 = MkArg                    unboundValue, as[0x556a1edd5cc0]_p53, e0.2
  prom-           %155.4 = MkArg                    unboundValue, as[0x556a1edd5cc0]_p54, e0.2
  val?            %155.5 = StaticCall         !v    .makeAsMethod[0x556a215e7230](%155.0, %155.1, %155.2, %155.3, %155.4) e0.2   <cls->
  void                    StVar              lW    asMethod, %155.5, e0.2
  val?^ | miss    %155.7 = LdVar              eR    is.function, e0.2
  lgl$#-          %155.8 = Identical                <blt is.function>, %155.7   <true>
  void                    Branch                   %155.8 -> BB157 (if true) | BB158 (if false)
BB156   <- [79]
  fs              %156.0 = FrameState         R     0x556a1f30ffd0+983: [], env=e0.2
  void                    Deopt              !v    %156.0, CallTarget@0x556a1e904f70[Call#17], %79.5   !
BB59   <- [68, 58]
  val?^ | miss    %59.0 = LdVar              eR    asMethod, e0.2
  val?            %59.1 = Force!<value>      !v    %59.0, e0.2   <cls>
  lgl$-           %59.2 = Is                       %59.1, NULL
  lgl$#-          %59.3 = CheckTrueFalse     e     %59.2
  void                    Branch                   %59.3 -> BB66 (if true) | BB62 (if false)
BB161   <- [56]
  lgl$-           %161.0 = CastType           d     dn %56.0
  lgl$#-          %161.1 = CheckTrueFalse     e     %161.0
  void                    Branch                   %161.1 -> BB67 (if true) | BB57 (if false)
BB162   <- [56]
  void                    Nop                !     
  val?^ | miss    %162.1 = %56.0
  dr              %162.2 = Typecheck@0x556a1e904f70[Type#87]
  goto BB53
BB157   <- [155]
  val?^ | miss    %157.0 = LdVar              eR    test, e0.2
  lgl$#-          %157.1 = IsType                   %157.0 isA val?~- | miss
  void                    Branch                   %157.1 -> BB159 (if true) | BB160 (if false)
BB158   <- [155]
  void                    Nop                !     
  lgl$#-          %158.1 = %155.8
  dr              %158.2 = DeadBranchReached@0x556a1e904f70[Test#1]
  goto BB82
BB66   <- [59]
  (cls|spec|blt)  %66.0 = LdFun              !v    stop, e0.2
  fs              %66.1 = FrameState         R     0x556a1f30ffd0+1881: [%66.0], env=e0.2
  void                    Deopt              !v    %66.1, DeadCall@0x556a1e904f70[Call#34], %66.0   !
BB62   <- [59]
  val?^ | miss    %62.0 = LdVar              eR    canCache, e0.2
  lgl$#-          %62.1 = IsType                   %62.0 isA lgl$-
  void                    Branch                   %62.1 -> BB167 (if true) | BB168 (if false)
BB67   <- [161]
  val?^ | miss    %67.0 = LdVar              eR    .asCoerceMethod, e0.2
  lgl$#-          %67.1 = Identical                %67.0, function(def, thisClass, ClassDef, replace, wh|...
  void                    Branch                   %67.1 -> BB163 (if true) | BB164 (if false)
BB57   <- [161]
  void                    Nop                !     
  goto BB58
BB159   <- [157]
  val?~- | miss   %159.0 = CastType           d     dn %157.0
  val?-           %159.1 = Force!<value>            %159.0,    <cls->
  lgl$#-          %159.2 = CallSafeBuiltin    wed   is.function(%159.1)    <lgl$->
  lgl$#-          %159.3 = Not                d     %159.2, elided
  void                    Branch                   %159.2 -> BB88 (if true) | BB86 (if false)
BB160   <- [157]
  void                    Nop                !     
  val?^ | miss    %160.1 = %157.0
  dr              %160.2 = Typecheck@0x556a1e904f70[Type#61]
  goto BB82
BB82   <- [158, 160]
  val?^ | miss    %82.0 = Phi                      %158.1:BB158, %160.1:BB160
  val?^ | miss    %82.1 = %82.0
  dr              %82.2 = Phi                      %158.2:BB158, %160.2:BB160
  dr              %82.3 = %82.2
  fs              %82.4 = FrameState         R     0x556a1f30ffd0+1049: [], env=e0.2
  void                    Deopt              !v    %82.4, %82.3, %82.1   !
BB167   <- [62]
  lgl$-           %167.0 = CastType           d     dn %62.0
  lgl$#-          %167.1 = CheckTrueFalse     e     %167.0
  void                    Branch                   %167.1 -> BB65 (if true) | BB63 (if false)
BB168   <- [62]
  void                    Nop                !     
  val?^ | miss    %168.1 = %62.0
  dr              %168.2 = Typecheck@0x556a1e904f70[Type#99]
  goto BB60
BB163   <- [67]
  prom-           %163.0 = MkArg                    unboundValue, as[0x556a1edd5cc0]_p32, e0.2
  prom-           %163.1 = MkArg                    unboundValue, as[0x556a1edd5cc0]_p33, e0.2
  prom-           %163.2 = MkArg                    unboundValue, as[0x556a1edd5cc0]_p34, e0.2
  prom-           %163.3 = MkArg                    unboundValue, as[0x556a1edd5cc0]_p35, e0.2
  val?            %163.4 = StaticCall         !v    .asCoerceMethod[0x556a2784c430](%163.0, %163.1, %163.2, false, %163.3) e0.2   <cls>
  void                    StVar              lW    asMethod, %163.4, e0.2
  goto BB58
BB164   <- [67]
  void                    Nop                !     
  val?^ | miss    %164.1 = %67.0
  dr              %164.2 = CallTarget@0x556a1e904f70[Call#30]
  goto BB53
BB58   <- [57, 163]
  void                    Nop                !     
  goto BB59
BB88   <- [159]
  val?^ | miss    %88.0 = LdVar              eR    isTRUE, e0.2
  lgl$#-          %88.1 = Identical                %88.0, function(x) <(rir::DispatchTable*)0x556a1d2de8|...
  void                    Branch                   %88.1 -> BB165 (if true) | BB166 (if false)
BB86   <- [159]
  void                    Nop                !     
  lgl$#-          %86.1 = %159.3
  goto BB87
BB65   <- [167]
  val?^ | miss    %65.0 = LdVar              eR    cacheMethod, e0.2
  lgl$#-          %65.1 = Identical                %65.0, function(f, sig, def, args=names(sig), fdef, i|...
  void                    Branch                   %65.1 -> BB171 (if true) | BB172 (if false)
BB63   <- [167]
  void                    Nop                !     
  goto BB64
BB60   <- [168, 172]
  val?^ | miss    %60.0 = Phi                      %168.1:BB168, %172.1:BB172
  val?^ | miss    %60.1 = %60.0
  dr              %60.2 = Phi                      %168.2:BB168, %172.2:BB172
  dr              %60.3 = %60.2
  fs              %60.4 = FrameState         R     0x556a1f30ffd0+1757: [%59.1], env=e0.2
  void                    Deopt              !v    %60.4, %60.3, %60.1   !
BB165   <- [88]
  prom-           %165.0 = MkArg                    unboundValue, as[0x556a1edd5cc0]_p55, e0.2
  val?            %165.1 = StaticCall         !v    isTRUE[0x556a27760ea0](%165.0) e0.2   <lgl$->
  lgl$#-          %165.2 = IsType                   %165.1 isA lgl$-
  void                    Branch                   %165.2 -> BB169 (if true) | BB170 (if false)
BB166   <- [88]
  fs              %166.0 = FrameState         R     0x556a1f30ffd0+1140: [%159.2], env=e0.2
  void                    Deopt              !v    %166.0, CallTarget@0x556a1e904f70[Call#21], %88.0   !
BB87   <- [86, 169]
  lgl$-           %87.0 = Phi                      %169.3:BB169, %86.1:BB86
  lgl$-           %87.1 = %87.0
  void                    StVar              lW    canCache, %87.1, e0.2
  goto BB46
BB171   <- [65]
  prom-           %171.0 = MkArg                    unboundValue, as[0x556a1edd5cc0]_p28, e0.2
  prom-           %171.1 = MkArg                    unboundValue, as[0x556a1edd5cc0]_p29, e0.2
  prom-           %171.2 = MkArg                    unboundValue, as[0x556a1edd5cc0]_p30, e0.2
  prom-           %171.3 = MkArg                    unboundValue, as[0x556a1edd5cc0]_p31, e0.2
  val?            %171.4 = StaticCall         !v    cacheMethod[0x556a28968530]("coerce", %171.0, %171.1, missingArg, %171.2, %171.3) { 0 1 2 4n 5n } e0.2
  goto BB64
BB172   <- [65]
  void                    Nop                !     
  val?^ | miss    %172.1 = %65.0
  dr              %172.2 = CallTarget@0x556a1e904f70[Call#33]
  goto BB60
BB64   <- [63, 171]
  void                    Nop                !     
  goto BB31
BB169   <- [165]
  lgl$-           %169.0 = CastType           d     dn %165.1
  lgl$-           %169.1 = AsLogical                %169.0
  lgl$-           %169.2 = LOr                      %159.3, %169.1
  lgl$-           %169.3 = %169.2
  goto BB87
BB170   <- [165]
  fs              %170.0 = FrameState         R     0x556a1f30ffd0+1186: [%159.3, %165.1], env=e0.2
  void                    Deopt              !v    %170.0, Typecheck@0x556a1e904f70[Type#65], %165.1   !
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     possibleExtends, <0x556a21012a60>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, as[0x556a1edd5cc0]_p2, e0.0
  prom-           %0.3  = MkArg                    unboundValue, as[0x556a1edd5cc0]_p3, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <other>
  void                    Return             l     %0.4
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    thisClass, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$+>
  void                    Return             l     %0.3
Prom 3:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    Class, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$+>
  void                    Return             l     %0.3
Prom 4:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    object, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <val?>
  void                    Return             l     %0.3
Prom 5:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    thisClass, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$+>
  void                    Return             l     %0.3
Prom 6:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    Class, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str$+>
  void                    Return             l     %0.3
Prom 7:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    Class, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$+>
  void                    Return             l     %0.3
Prom 8:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    thisClass, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$+>
  void                    Return             l     %0.3
Prom 9:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 10:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    coerceFun, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 11:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     environment, <0x556a1b7b0b68>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, as[0x556a1edd5cc0]_p12, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <env->
  void                    Return             l     %0.3
Prom 12:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    coerceFun, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 13:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    thisClass, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$+>
  void                    Return             l     %0.3
Prom 14:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    Class, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$+>
  void                    Return             l     %0.3
Prom 15:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    coerceFun, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 16:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    coerceMethods, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 17:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 18:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    object, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 19:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    object, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <val?>
  void                    Return             l     %0.3
Prom 20:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    sig, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str+>
  void                    Return             l     %0.3
Prom 21:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    coerceFun, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 22:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     getMethodsForDispatch, <0x556a1e0572f0>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, as[0x556a1edd5cc0]_p23, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <env->
  void                    Return             l     %0.3
Prom 23:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    coerceFun, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 24:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    object, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 25:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    Class, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$+>
  void                    Return             l     %0.3
Prom 26:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    Class, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 27:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    thisClass, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$+>
  void                    Return             l     %0.3
Prom 28:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    sig, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str+>
  void                    Return             l     %0.3
Prom 29:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    asMethod, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 30:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    coerceFun, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 31:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    inherited, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <lgl$->
  void                    Return             l     %0.3
Prom 32:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    asMethod, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls->
  void                    Return             l     %0.3
Prom 33:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    thisClass, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$+>
  void                    Return             l     %0.3
Prom 34:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    ClassDef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <other>
  void                    Return             l     %0.3
Prom 35:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 36:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    sig, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str+>
  void                    Return             l     %0.3
Prom 37:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     c, <0x556a1b40a940>, e0.0
  val?            %0.2  = NamedCall          !     %0.1(from=true, to=false) e0.0   <lgl+>
  void                    Return             l     %0.2
Prom 38:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    coerceFun, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 39:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    coerceMethods, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 40:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    Class, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$+>
  void                    Return             l     %0.3
Prom 41:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 42:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    ext, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <other>
  void                    Return             l     %0.3
Prom 43:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    ext, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <other>
  void                    Return             l     %0.3
Prom 44:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    ext, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 45:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    test, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 46:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, <0x556a1b409bd8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, as[0x556a1edd5cc0]_p47, e0.0
  prom-           %0.3  = MkArg                    unboundValue, as[0x556a1edd5cc0]_p48, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <cls->
  void                    Return             l     %0.4
Prom 47:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    ext, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 48:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    coerce, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 49:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, <0x556a1b409bd8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, as[0x556a1edd5cc0]_p50, e0.0
  prom-           %0.3  = MkArg                    unboundValue, as[0x556a1edd5cc0]_p51, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <lgl$->
  void                    Return             l     %0.4
Prom 50:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    ext, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 51:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    simple, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 52:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    Class, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 53:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    ClassDef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 54:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 55:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     body, <0x556a1e5313f8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, as[0x556a1edd5cc0]_p56, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <lgl$->
  void                    Return             l     %0.3
Prom 56:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    test, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls->
  void                    Return             l     %0.3

│ as[0x556a1edd5cc0]                                                           │
└──────────────────────────────────────────────────────────────────────────────┘
