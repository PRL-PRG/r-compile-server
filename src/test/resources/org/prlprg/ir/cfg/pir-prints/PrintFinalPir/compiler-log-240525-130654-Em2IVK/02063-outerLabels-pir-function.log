
┌──────────────────────────────────────────────────────────────────────────────┐
│ outerLabels[0x556a2291aa40]                                                  │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;NonRefl1                             │
│ Properties:                                                                  │
├────── Final PIR Version
outerLabels[0x556a2291aa40]
BB0
  val?^           %0.0  = LdArg                    1
  val?^           %0.1  = LdArg                    0
  val?^ | miss    %0.2  = LdVar              eR    length, <env 0x556a1ba11378>
  lgl$#-          %0.3  = Identical                <blt length>, %0.2   <true>
  void                    Branch                   %0.3 -> BB16 (if true) | BB17 (if false)
BB16   <- [0]
  env             e16.0 = MkEnv              l     labels=%0.1, new=%0.0, parent=<env 0x556a1ba11378>, context 1
  val?            %16.1 = Force!<lazy>       !v    %0.1, e16.0   <str->
  lgl$#-          %16.2 = IsType                   %16.1 isA val?-
  void                    Branch                   %16.2 -> BB18 (if true) | BB19 (if false)
BB17   <- [0]
  env             e17.0 = (MkEnv)            l     labels=%0.1, new=%0.0, parent=<env 0x556a1ba11378>, context 1
  fs              %17.1 = FrameState         R     0x556a224ed6b0+0: [], env=e17.0
  void                    Deopt              !v    %17.1, DeadBranchReached@0x556a274dbc88[Test#0], %0.3
BB18   <- [16]
  val?-           %18.0 = CastType           d     dn %16.1   <str->
  (int|real)$-    %18.1 = CallSafeBuiltin    wed   length(%18.0)    <int$->
  lgl$#-          %18.2 = IsType                   %18.1 isA int$-
  void                    Branch                   %18.2 -> BB20 (if true) | BB21 (if false)
BB19   <- [16]
  fs              %19.0 = FrameState         R     0x556a224ed6b0+69: [<blt length>, %16.1], env=e16.0
  void                    Deopt              !v    %19.0, Typecheck@0x556a274dbc88[Type#1], %16.1   !
BB20   <- [18]
  int$-           %20.0 = CastType           d     dn %18.1
  void                    StVar              lW    n, %20.0, e16.0
  val?^ | miss    %20.2 = LdVar              eR    length, e16.0
  lgl$#-          %20.3 = Identical                <blt length>, %20.2   <true>
  void                    Branch                   %20.3 -> BB22 (if true) | BB23 (if false)
BB21   <- [18]
  fs              %21.0 = FrameState         R     0x556a224ed6b0+91: [%18.1], env=e16.0
  void                    Deopt              !v    %21.0, Typecheck@0x556a274dbc88[Type#2], %18.1   !
BB22   <- [20]
  val?^ | miss    %22.0 = LdVar              eR    new, e16.0
  val?            %22.1 = Force!<lazy>       !v    %22.0, e16.0   <str+>
  lgl$#-          %22.2 = IsType                   %22.1 isA val?+
  void                    Branch                   %22.2 -> BB24 (if true) | BB25 (if false)
BB23   <- [20]
  fs              %23.0 = FrameState         R     0x556a224ed6b0+105: [], env=e16.0
  void                    Deopt              !v    %23.0, DeadBranchReached@0x556a274dbc88[Test#1], %20.3   !
BB24   <- [22]
  val?+           %24.0 = CastType           d     dn %22.1   <str+>
  (int|real)$-    %24.1 = CallSafeBuiltin    wed   length(%24.0)    <int$->
  lgl$#-          %24.2 = IsType                   %24.1 isA int$-
  void                    Branch                   %24.2 -> BB26 (if true) | BB27 (if false)
BB25   <- [22]
  fs              %25.0 = FrameState         R     0x556a224ed6b0+174: [<blt length>, %22.1], env=e16.0
  void                    Deopt              !v    %25.0, Typecheck@0x556a274dbc88[Type#4], %22.1   !
BB26   <- [24]
  int$-           %26.0 = CastType           d     dn %24.1
  void                    StVar              lW    m, %26.0, e16.0
  val?^ | miss    %26.2 = LdVar              eR    paste, e16.0
  lgl$#-          %26.3 = Identical                %26.2, function(..., sep=" ", collapse=NULL, recycle0|...
  void                    Branch                   %26.3 -> BB28 (if true) | BB29 (if false)
BB27   <- [24]
  fs              %27.0 = FrameState         R     0x556a224ed6b0+196: [%24.1], env=e16.0
  void                    Deopt              !v    %27.0, Typecheck@0x556a274dbc88[Type#5], %24.1   !
BB28   <- [26]
  prom-           %28.0 = MkArg                    unboundValue, outerLabels[0x556a2291aa40]_p0, e16.0
  prom-           %28.1 = MkArg                    unboundValue, outerLabels[0x556a2291aa40]_p10, e16.0
  dots-           %28.2 = DotsList           l     %28.0, %28.1
  val?^ | miss    %28.3 = CastType                 up %28.0
  val?^ | miss    %28.4 = CastType                 up %28.1
  env             e28.5 = MkEnv              l     ...=%28.2, sep="#", collapse(miss)=nil, recycle0(miss)=false, parent=R_BaseNamespace, context 0
  val?            %28.6 = Force!             !vL   %28.3, e28.5
  val?            %28.7 = Force!             !vL   %28.4, e28.5
  val+            %28.8 = CallSafeBuiltin    wed   list(%28.6, %28.7)    <vec->
  val+            %28.9 = CallSafeBuiltin    vwed  paste(%28.8, "#", nil, false)    <str->
  void                    Return             l     %28.9
BB29   <- [26]
  fs              %29.0 = FrameState         R     0x556a224ed6b0+210: [], env=e16.0
  void                    Deopt              !v    %29.0, CallTarget@0x556a274dbc88[Call#2], %26.2   !
Prom 0:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    labels, e0.0
  val?            %0.2  = Force<wrapped>     !v    %0.1, e0.0   <str->
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <true>
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  (cls|spec|blt)  %2.0  = LdFun              !v    rep.int, <0x556a1d33f9f0>, e0.0
  prom-           %2.1  = MkArg                    unboundValue, outerLabels[0x556a2291aa40]_p1, e0.0
  prom-           %2.2  = MkArg                    unboundValue, outerLabels[0x556a2291aa40]_p2, e0.0
  val?            %2.3  = Call               !v    %2.0(%2.1, %2.2) e0.0   <int->
  val?            %2.4  = %2.3
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, outerLabels[0x556a2291aa40]_p5, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [2, 4]
  val?            %3.0  = Phi                      %2.4:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract1_1D        !v    %0.2, %3.1, e0.0   <str->
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    n, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <int$->
  val?            %0.4  = Colon              !     1L, %0.3, e0.0   <int->
  void                    Return             l     %0.4
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     rep.int, <0x556a1d33f9f0>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, outerLabels[0x556a2291aa40]_p3, e0.0
  prom-           %0.3  = MkArg                    unboundValue, outerLabels[0x556a2291aa40]_p4, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <int->
  void                    Return             l     %0.4
Prom 3:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    m, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <int$->
  void                    Return             l     %0.3
Prom 4:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    n, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <int$->
  void                    Return             l     %0.3
Prom 5:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     rep.int, e0.0
  prom-           %0.2  = MkArg                    unboundValue, outerLabels[0x556a2291aa40]_p6, e0.0
  prom-           %0.3  = MkArg                    unboundValue, outerLabels[0x556a2291aa40]_p7, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 6:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    n, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  val?            %0.4  = Colon              !     1L, %0.3, e0.0   <val?_>
  void                    Return             l     %0.4
Prom 7:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     rep.int, e0.0
  prom-           %0.2  = MkArg                    unboundValue, outerLabels[0x556a2291aa40]_p8, e0.0
  prom-           %0.3  = MkArg                    unboundValue, outerLabels[0x556a2291aa40]_p9, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 8:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    m, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 9:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    n, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 10:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    new, e0.0
  val?            %0.2  = Force<wrapped>     !v    %0.1, e0.0   <str+>
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <true>
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  (cls|spec|blt)  %2.0  = LdFun              !v    rep.int, <0x556a1d33f9f0>, e0.0
  prom-           %2.1  = MkArg                    unboundValue, outerLabels[0x556a2291aa40]_p11, e0.0
  prom-           %2.2  = MkArg                    unboundValue, outerLabels[0x556a2291aa40]_p12, e0.0
  val?            %2.3  = Call               !v    %2.0(%2.1, %2.2) e0.0   <int->
  val?            %2.4  = %2.3
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, outerLabels[0x556a2291aa40]_p13, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [2, 4]
  val?            %3.0  = Phi                      %2.4:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract1_1D        !v    %0.2, %3.1, e0.0   <str->
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 11:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    m, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <int$->
  val?            %0.4  = Colon              !     1L, %0.3, e0.0   <int->
  void                    Return             l     %0.4
Prom 12:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    n, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <int$->
  void                    Return             l     %0.3
Prom 13:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     rep.int, e0.0
  prom-           %0.2  = MkArg                    unboundValue, outerLabels[0x556a2291aa40]_p14, e0.0
  prom-           %0.3  = MkArg                    unboundValue, outerLabels[0x556a2291aa40]_p15, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 14:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    m, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  val?            %0.4  = Colon              !     1L, %0.3, e0.0   <val?_>
  void                    Return             l     %0.4
Prom 15:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    n, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3

│ outerLabels[0x556a2291aa40]                                                  │
└──────────────────────────────────────────────────────────────────────────────┘
