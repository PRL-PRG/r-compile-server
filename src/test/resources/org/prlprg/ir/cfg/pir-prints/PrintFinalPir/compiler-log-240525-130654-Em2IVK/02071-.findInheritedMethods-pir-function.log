
┌──────────────────────────────────────────────────────────────────────────────┐
│ .findInheritedMethods[0x556a2174b210]                                        │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch miss: 7                              │
│ Properties:                                                                  │
├────── Final PIR Version
.findInheritedMethods[0x556a2174b210]
BB0
  val?^           %0.0  = LdArg                    2
  val?^           %0.1  = LdArg                    1
  val?^           %0.2  = LdArg                    0
  env             e0.3  = MkEnv              l     classes=%0.2, fdef=%0.1, mtable=%0.0, table(miss)=missingArg, excluded(miss)=missingArg, useInherited(miss)=missingArg, simpleOnly(miss)=missingArg, verbose(miss)=missingArg, doCache(miss)=missingArg, where(miss)=missingArg, parent=<env 0x556a1ba11378>, context 1
  prom-           %0.4  = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p0, e0.3
  val?^ | miss    %0.5  = CastType                 up %0.4
  void                    StArg              lW    table, %0.5, e0.3
  void                    StArg              lW    excluded, nil, e0.3
  prom-           %0.8  = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p4, e0.3
  val?^ | miss    %0.9  = CastType                 up %0.8
  void                    StArg              lW    simpleOnly, %0.9, e0.3
  void                    StArg              lW    verbose, false, e0.3
  prom-           %0.12 = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p7, e0.3
  val?^ | miss    %0.13 = CastType                 up %0.12
  void                    StArg              lW    doCache, %0.13, e0.3
  prom-           %0.15 = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p9, e0.3
  val?^ | miss    %0.16 = CastType                 up %0.15
  void                    StArg              lW    where, %0.16, e0.3
  cls             %0.18 = MkCls                    .findInheritedMethods>plist@677, e0.3
  val?^ | miss    %0.19 = LdVar              eR    .allowPrimitiveMethods, <env 0x556a1ba11378>
  lgl$#-          %0.20 = Identical                %0.19, function(onOff) <(rir::DispatchTable*)0x556a1e|...
  void                    Branch                   %0.20 -> BB288 (if true) | BB289 (if false)
BB288   <- [0]
  ct              %288.0 = PushContext        lCL   false, .allowPrimitiveMethods(FALSE), function(onOff) <(rir::DispatchTable*)0x556a1e|..., e0.3
  val?^ | miss    %288.1 = LdVar              eR    .Call, <env 0x556a1ba11378>
  lgl$#-          %288.2 = Identical                <blt .Call>, %288.1   <true>
  void                    Branch                   %288.2 -> BB290 (if true) | BB291 (if false)
BB289   <- [0]
  fs              %289.0 = FrameState         R     0x556a23f8da70+0: [], env=e0.3
  void                    Deopt              !v    %289.0, CallTarget@0x556a225cd830[Call#5], %0.19
BB290   <- [288]
  val?^ | miss    %290.0 = LdVar              eR    C_R_M_setPrimitiveMethods, <env 0x556a1ba11378>
  env             e290.1 = MkEnv              l     onOff=false, code="CLEAR", parent=<env 0x556a1ba11378>, context 1
  val?            %290.2 = Force!<value>      !v    %290.0, e290.1   <vec>
  val?^ | miss    %290.3 = LdVar              eR    code, e290.1
  val?            %290.4 = Force!<value>      !v    %290.3, e290.1   <str$->
  val?            %290.5 = CallBuiltin        !v    .Call(%290.2, "", nil, %290.4, nil, nil) e290.1   <lgl$->
  lgl$#-          %290.6 = IsType                   %290.5 isA lgl$-
  void                    Branch                   %290.6 -> BB292 (if true) | BB293 (if false)
BB291   <- [288]
  fs              %291.0 = FrameState         R     0x556a23f8da70+32: [], env=e0.3
  env             e291.1 = (MkEnv)            l     onOff=false, parent=<env 0x556a1ba11378>, context 1
  fs              %291.2 = FrameState         R     0x556a1e9cb710+15: [false], env=e291.1, next=%291.0
  void                    Deopt              !v    %291.2, DeadBranchReached@0x556a1fdf3008[Test#0], %288.2   !
BB292   <- [290]
  lgl$-           %292.0 = CastType           d     dn %290.5
  val?            %292.1 = PopContext         C     %292.0, %288.0   <lgl$->
  lgl$#-          %292.2 = IsType                   %292.1 isA lgl$-
  void                    Branch                   %292.2 -> BB294 (if true) | BB295 (if false)
BB293   <- [290]
  fs              %293.0 = FrameState         R     0x556a23f8da70+32: [], env=e0.3
  fs              %293.1 = FrameState         R     0x556a1e9cb710+200: [%290.5], env=e290.1, next=%293.0
  void                    Deopt              !v    %293.1, Typecheck@0x556a1fdf3008[Type#5], %290.5   !
BB294   <- [292]
  lgl$-           %294.0 = CastType           d     dn %292.1
  void                    StVar              lW    primMethods, %294.0, e0.3
  (cls|spec|blt)  %294.2 = LdFun              !v    on.exit, <0x556a1b409270>, e0.3
  prom-           %294.3 = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p11, e0.3
  val?            %294.4 = Call               !v    %294.2(%294.3) e0.3
  val?^ | miss    %294.5 = LdVar              eR    is.environment, e0.3
  lgl$#-          %294.6 = Identical                <blt is.environment>, %294.5   <true>
  void                    Branch                   %294.6 -> BB296 (if true) | BB297 (if false)
BB295   <- [292]
  fs              %295.0 = FrameState         R     0x556a23f8da70+32: [%292.1], env=e0.3
  void                    Deopt              !v    %295.0, Typecheck@0x556a225cd830[Type#9], %292.1   !
BB296   <- [294]
  val?^ | miss    %296.0 = LdVar              eR    table, e0.3
  val?            %296.1 = Force!<lazy>       !v    %296.0, e0.3   <env->
  lgl$#-          %296.2 = CallSafeBuiltin    wed   is.environment(%296.1)    <lgl$->
  void                    Branch                   %296.2 -> BB14 (if true) | BB13 (if false)
BB297   <- [294]
  fs              %297.0 = FrameState         R     0x556a23f8da70+78: [%294.4], env=e0.3
  void                    Deopt              !v    %297.0, DeadBranchReached@0x556a225cd830[Test#0], %294.6   !
BB14   <- [296]
  val?^ | miss    %14.0 = LdVar              eR    length, e0.3
  lgl$#-          %14.1 = Identical                <blt length>, %14.0   <true>
  void                    Branch                   %14.1 -> BB298 (if true) | BB299 (if false)
BB13   <- [296]
  (cls|spec|blt)  %13.0 = LdFun              !v    is, e0.3
  fs              %13.1 = FrameState         R     0x556a23f8da70+192: [%13.0], env=e0.3
  void                    Deopt              !v    %13.1, DeadCall@0x556a225cd830[Call#9], %13.0   !
BB298   <- [14]
  (cls|spec|blt)  %298.0 = LdFun              !v    @, <0x556a1b409bd8>, e0.3
  prom-           %298.1 = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p13, e0.3
  prom-           %298.2 = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p14, e0.3
  val?            %298.3 = Call               !v    %298.0(%298.1, %298.2) e0.3   <vec->
  lgl$#-          %298.4 = IsType                   %298.3 isA val?-
  void                    Branch                   %298.4 -> BB300 (if true) | BB301 (if false)
BB299   <- [14]
  fs              %299.0 = FrameState         R     0x556a23f8da70+170: [%296.2], env=e0.3
  void                    Deopt              !v    %299.0, DeadBranchReached@0x556a225cd830[Test#1], %14.1   !
BB300   <- [298]
  val?-           %300.0 = CastType           d     dn %298.3   <vec->
  (int|real)$-    %300.1 = CallSafeBuiltin    wed   length(%300.0)    <int$->
  lgl$#-          %300.2 = IsType                   %300.1 isA int$-
  void                    Branch                   %300.2 -> BB302 (if true) | BB303 (if false)
BB301   <- [298]
  fs              %301.0 = FrameState         R     0x556a23f8da70+416: [<blt length>, %298.3], env=e0.3
  void                    Deopt              !v    %301.0, Typecheck@0x556a225cd830[Type#27], %298.3   !
BB302   <- [300]
  int$-           %302.0 = CastType           d     dn %300.1
  lgl$-           %302.1 = Gt                 d     %302.0, 0L, elided   <lgl$->
  void                    StVar              lW    hasGroup, %302.1, e0.3
  lgl$#-          %302.3 = CheckTrueFalse     e     %302.1
  void                    Branch                   %302.3 -> BB286 (if true) | BB21 (if false)
BB303   <- [300]
  fs              %303.0 = FrameState         R     0x556a23f8da70+438: [%300.1], env=e0.3
  void                    Deopt              !v    %303.0, Typecheck@0x556a225cd830[Type#28], %300.1   !
BB286   <- [302]
  val?^ | miss    %286.0 = LdVar              eR    .getAllGroups, e0.3
  lgl$#-          %286.1 = Identical                %286.0, function(funs) <(rir::DispatchTable*)0x556a279|...
  void                    Branch                   %286.1 -> BB304 (if true) | BB305 (if false)
BB21   <- [302]
  void                    Nop                !     
  goto BB22
BB304   <- [286]
  prom-           %304.0 = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p108, e0.3
  val?            %304.1 = StaticCall         !v    .getAllGroups[0x556a2176ea50](%304.0) e0.3   <vec->
  void                    StVar              lW    groupGenerics, %304.1, e0.3
  goto BB22
BB305   <- [286]
  fs              %305.0 = FrameState         R     0x556a23f8da70+464: [], env=e0.3
  void                    Deopt              !v    %305.0, CallTarget@0x556a225cd830[Call#18], %286.0   !
BB22   <- [21, 304]
  val?^ | miss    %22.0 = LdVar              eR    length, e0.3
  lgl$#-          %22.1 = Identical                <blt length>, %22.0   <true>
  void                    Branch                   %22.1 -> BB306 (if true) | BB307 (if false)
BB306   <- [22]
  val?^ | miss    %306.0 = LdVar              eR    excluded, e0.3
  val?            %306.1 = Force!<lazy>       !v    %306.0, e0.3   <(nil|str)->
  lgl$#-          %306.2 = IsType                   %306.1 isA val?-
  void                    Branch                   %306.2 -> BB308 (if true) | BB309 (if false)
BB307   <- [22]
  fs              %307.0 = FrameState         R     0x556a23f8da70+535: [], env=e0.3
  void                    Deopt              !v    %307.0, DeadBranchReached@0x556a225cd830[Test#2], %22.1   !
BB308   <- [306]
  val?-           %308.0 = CastType           d     dn %306.1   <(nil|str)->
  (int|real)$-    %308.1 = CallSafeBuiltin    wed   length(%308.0)    <int$->
  lgl$#-          %308.2 = IsType                   %308.1 isA int$-
  void                    Branch                   %308.2 -> BB310 (if true) | BB311 (if false)
BB309   <- [306]
  fs              %309.0 = FrameState         R     0x556a23f8da70+604: [<blt length>, %306.1], env=e0.3
  void                    Deopt              !v    %309.0, Typecheck@0x556a225cd830[Type#35], %306.1   !
BB310   <- [308]
  int$-           %310.0 = CastType           d     dn %308.1
  lgl$-           %310.1 = Gt                 d     %310.0, 0L, elided   <lgl$->
  void                    StVar              lW    doExcluded, %310.1, e0.3
  val?^ | miss    %310.3 = LdVar              eR    verbose, e0.3
  val?            %310.4 = Force!<lazy>       !v    %310.3, e0.3   <lgl$->
  lgl$#-          %310.5 = CheckTrueFalse     we    %310.4
  void                    Branch                   %310.5 -> BB285 (if true) | BB31 (if false)
BB311   <- [308]
  fs              %311.0 = FrameState         R     0x556a23f8da70+626: [%308.1], env=e0.3
  void                    Deopt              !v    %311.0, Typecheck@0x556a225cd830[Type#36], %308.1   !
BB285   <- [310]
  void                    StVar              lW    plist, %0.18, e0.3
  (cls|spec|blt)  %285.1 = LdFun              !v    cat, e0.3
  fs              %285.2 = FrameState         R     0x556a23f8da70+707: [%285.1], env=e0.3
  void                    Deopt              !v    %285.2, DeadCall@0x556a225cd830[Call#21], %285.1   !
BB31   <- [310]
  val?^ | miss    %31.0 = LdVar              eR    length, e0.3
  lgl$#-          %31.1 = Identical                <blt length>, %31.0   <true>
  void                    Branch                   %31.1 -> BB312 (if true) | BB313 (if false)
BB312   <- [31]
  val?^ | miss    %312.0 = LdVar              eR    classes, e0.3
  val?            %312.1 = Force!<lazy>       !v    %312.0, e0.3   <(str|vec)>
  val?            %312.2 = CallBuiltin        !v    length(%312.1) e0.3   <int$->
  lgl$#-          %312.3 = IsType                   %312.2 isA int$-
  void                    Branch                   %312.3 -> BB314 (if true) | BB315 (if false)
BB313   <- [31]
  fs              %313.0 = FrameState         R     0x556a23f8da70+667: [%310.5], env=e0.3
  void                    Deopt              !v    %313.0, DeadBranchReached@0x556a225cd830[Test#4], %31.1   !
BB314   <- [312]
  int$-           %314.0 = CastType           d     dn %312.2
  void                    StVar              lW    nargs, %314.0, e0.3
  lgl$-           %314.2 = Missing            eR    useInherited, e0.3
  lgl$-           %314.3 = Not                d     %314.2, elided
  lgl$-           %314.4 = AsLogical                %314.3
  lgl$#-          %314.5 = Identical                %314.4, false
  void                    Branch                   %314.5 -> BB284 (if true) | BB36 (if false)
BB315   <- [312]
  fs              %315.0 = FrameState         R     0x556a23f8da70+866: [%312.2], env=e0.3
  void                    Deopt              !v    %315.0, Typecheck@0x556a225cd830[Type#61], %312.2   !
BB284   <- [314]
  void                    Nop                !     
  lgl$-           %284.1 = %314.4
  goto BB41
BB36   <- [314]
  val?^ | miss    %36.0 = LdVar              eR    length, e0.3
  lgl$#-          %36.1 = Identical                <blt length>, %36.0   <true>
  void                    Branch                   %36.1 -> BB316 (if true) | BB317 (if false)
BB41   <- [284, 324]
  lgl$-           %41.0 = Phi                      %324.4:BB324, %284.1:BB284
  lgl$-           %41.1 = %41.0
  lgl$#-          %41.2 = CheckTrueFalse     e     %41.1
  void                    Branch                   %41.2 -> BB283 (if true) | BB44 (if false)
BB316   <- [36]
  val?^ | miss    %316.0 = LdVar              eR    useInherited, e0.3
  val?            %316.1 = Force!<lazy>       !v    %316.0, e0.3   <lgl+>
  lgl$#-          %316.2 = IsType                   %316.1 isA lgl+
  void                    Branch                   %316.2 -> BB318 (if true) | BB319 (if false)
BB317   <- [36]
  fs              %317.0 = FrameState         R     0x556a23f8da70+880: [], env=e0.3
  void                    Deopt              !v    %317.0, DeadBranchReached@0x556a225cd830[Test#5], %36.1   !
BB283   <- [41]
  (cls|spec|blt)  %283.0 = LdFun              !v    rep, e0.3
  fs              %283.1 = FrameState         R     0x556a23f8da70+1028: [%283.0], env=e0.3
  void                    Deopt              !v    %283.1, DeadCall@0x556a225cd830[Call#32], %283.0   !
BB44   <- [41]
  val?^ | miss    %44.0 = LdVar              eR    hasGroup, e0.3
  lgl$#-          %44.1 = IsType                   %44.0 isA lgl$-
  void                    Branch                   %44.1 -> BB320 (if true) | BB321 (if false)
BB318   <- [316]
  lgl+            %318.0 = CastType           d     dn %316.1
  (int|real)$-    %318.1 = CallSafeBuiltin    wed   length(%318.0)    <int$->
  lgl$#-          %318.2 = IsType                   %318.1 isA int$-
  void                    Branch                   %318.2 -> BB322 (if true) | BB323 (if false)
BB319   <- [316]
  fs              %319.0 = FrameState         R     0x556a23f8da70+963: [%314.4, <blt length>, %316.1], env=e0.3
  void                    Deopt              !v    %319.0, Typecheck@0x556a225cd830[Type#63], %316.1   !
BB320   <- [44]
  lgl$-           %320.0 = CastType           d     dn %44.0
  lgl$-           %320.1 = AsLogical                %320.0
  lgl$#-          %320.2 = Identical                %320.1, false
  void                    Branch                   %320.2 -> BB282 (if true) | BB45 (if false)
BB321   <- [44]
  void                    Nop                !     
  val?^ | miss    %321.1 = %44.0
  dr              %321.2 = Typecheck@0x556a225cd830[Type#70]
  goto BB42
BB322   <- [318]
  int$-           %322.0 = CastType           d     dn %318.1
  val?^ | miss    %322.1 = LdVar              eR    nargs, e0.3
  lgl$#-          %322.2 = IsType                   %322.1 isA int$-
  void                    Branch                   %322.2 -> BB324 (if true) | BB325 (if false)
BB323   <- [318]
  void                    Nop                !     
  (int|real)$-    %323.1 = %318.1
  dr              %323.2 = Typecheck@0x556a225cd830[Type#64]
  goto BB39
BB282   <- [320]
  void                    Nop                !     
  lgl$-           %282.1 = %320.1
  goto BB46
BB45   <- [320]
  val?^ | miss    %45.0 = LdVar              eR    doExcluded, e0.3
  lgl$#-          %45.1 = IsType                   %45.0 isA lgl$-
  void                    Branch                   %45.1 -> BB326 (if true) | BB327 (if false)
BB42   <- [321, 327]
  val?^ | miss    %42.0 = Phi                      %321.1:BB321, %327.1:BB327
  val?^ | miss    %42.1 = %42.0
  dr              %42.2 = Phi                      %321.2:BB321, %327.2:BB327
  dr              %42.3 = %42.2
  fs              %42.4 = FrameState         R     0x556a23f8da70+1012: [%41.1], env=e0.3
  void                    Deopt              !v    %42.4, %42.3, %42.1   !
BB324   <- [322]
  int$-           %324.0 = CastType           d     dn %322.1
  lgl$-           %324.1 = Lt                 d     %322.0, %324.0, elided   <lgl$->
  lgl$-           %324.2 = AsLogical                %324.1
  lgl$-           %324.3 = LAnd                     %314.4, %324.2
  lgl$-           %324.4 = %324.3
  goto BB41
BB325   <- [322]
  void                    Nop                !     
  val?^ | miss    %325.1 = %322.1
  dr              %325.2 = Typecheck@0x556a225cd830[Type#65]
  goto BB39
BB39   <- [323, 325]
  val?^ | miss    %39.0 = Phi                      %323.1:BB323, %325.1:BB325
  val?^ | miss    %39.1 = %39.0
  dr              %39.2 = Phi                      %323.2:BB323, %325.2:BB325
  dr              %39.3 = %39.2
  fs              %39.4 = FrameState         R     0x556a23f8da70+985: [%314.4, %318.1], env=e0.3
  void                    Deopt              !v    %39.4, %39.3, %39.1   !
BB46   <- [282, 326]
  lgl$-           %46.0 = Phi                      %326.4:BB326, %282.1:BB282
  lgl$-           %46.1 = %46.0
  lgl$#-          %46.2 = CheckTrueFalse     e     %46.1
  void                    Branch                   %46.2 -> BB266 (if true) | BB49 (if false)
BB326   <- [45]
  lgl$-           %326.0 = CastType           d     dn %45.0
  lgl$-           %326.1 = Not                d     %326.0, elided
  lgl$-           %326.2 = AsLogical                %326.1
  lgl$-           %326.3 = LAnd                     %320.1, %326.2
  lgl$-           %326.4 = %326.3
  goto BB46
BB327   <- [45]
  void                    Nop                !     
  val?^ | miss    %327.1 = %45.0
  dr              %327.2 = Typecheck@0x556a225cd830[Type#71]
  goto BB42
BB266   <- [46]
  val?^ | miss    %266.0 = LdVar              eR    .sigLabel, e0.3
  lgl$#-          %266.1 = Identical                %266.0, function(sig) <(rir::DispatchTable*)0x556a1f73|...
  void                    Branch                   %266.1 -> BB328 (if true) | BB329 (if false)
BB49   <- [46]
  void                    Nop                !     
  goto BB50
BB328   <- [266]
  prom-           %328.0 = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p102, e0.3
  val?^           %328.1 = CastType                 up %328.0
  val?^ | miss    %328.2 = LdVar              eR    paste, <env 0x556a1ba11378>
  lgl$#-          %328.3 = Identical                %328.2, function(..., sep=" ", collapse=NULL, recycle0|...
  void                    Branch                   %328.3 -> BB330 (if true) | BB331 (if false)
BB329   <- [266]
  void                    Nop                !     
  val?^ | miss    %329.1 = %266.0
  dr              %329.2 = CallTarget@0x556a225cd830[Call#33]
  goto BB47
BB50   <- [49, 273]
  val?^ | miss    %50.0 = LdVar              eR    classes, e0.3
  val?            %50.1 = Force!<wrapped>    !v    %50.0, e0.3   <(str|vec)>
  val?            %50.2 = Extract2_1D        !v    %50.1, 1L, e0.3   <str$+>
  void                    StVar              lW    cl1, %50.2, e0.3
  val?^ | miss    %50.4 = LdVar              eR    getClass, e0.3
  lgl$#-          %50.5 = Identical                %50.4, function(Class, .Force=FALSE, where=.classEnv(|...
  void                    Branch                   %50.5 -> BB334 (if true) | BB335 (if false)
BB330   <- [328]
  env             e330.0 = MkEnv              l     sig=%328.1, parent=<env 0x556a1ba11378>, context 0
  prom-           %330.1 = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p126, e330.0
  dots-           %330.2 = DotsList           l     %330.1
  val?^ | miss    %330.3 = CastType                 up %330.1
  env             e330.4 = MkEnv              l     ...=%330.2, sep(miss)=" ", collapse="#", recycle0(miss)=false, parent=R_BaseNamespace, context -1
  val?            %330.5 = Force!             !vL   %330.3, e330.4
  val+            %330.6 = CallSafeBuiltin    wed   list(%330.5)    <vec->
  val+            %330.7 = CallSafeBuiltin    wed   paste(%330.6, " ", "#", false)    <str$->
  void                    StVar              lW    label, %330.7, e0.3
  val?^ | miss    %330.9 = LdVar              eR    .getGroupMethods, e0.3
  lgl$#-          %330.10 = Identical                %330.9, function(labels, generics, found) <(rir::Dispa|...
  void                    Branch                   %330.10 -> BB332 (if true) | BB333 (if false)
BB331   <- [328]
  void                    Nop                !     
  val?^ | miss    %331.1 = %328.2
  dr              %331.2 = CallTarget@0x556a1e4e2af8[Call#0]
  goto BB47
BB47   <- [329, 331]
  val?^ | miss    %47.0 = Phi                      %329.1:BB329, %331.1:BB331
  val?^ | miss    %47.1 = %47.0
  dr              %47.2 = Phi                      %329.2:BB329, %331.2:BB331
  dr              %47.3 = %47.2
  fs              %47.4 = FrameState         R     0x556a23f8da70+1120: [%46.1], env=e0.3
  void                    Deopt              !v    %47.4, %47.3, %47.1   !
BB334   <- [50]
  prom-           %334.0 = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p15 (!refl), e0.3
  prom-           %334.1 = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p16, e0.3
  val?            %334.2 = StaticCall         !v    getClass[0x556a29028db0](%334.0, true, %334.1) { 0 2n 1n } e0.3   <other>
  void                    StVar              lW    def, %334.2, e0.3
  lgl$-           %334.4 = Missing            eR    useInherited, e0.3
  lgl$-           %334.5 = AsLogical                %334.4
  lgl$#-          %334.6 = Identical                %334.5, true
  void                    Branch                   %334.6 -> BB265 (if true) | BB53 (if false)
BB335   <- [50]
  fs              %335.0 = FrameState         R     0x556a23f8da70+1502: [], env=e0.3
  void                    Deopt              !v    %335.0, CallTarget@0x556a225cd830[Call#37], %50.4   !
BB332   <- [330]
  prom-           %332.0 = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p103 (!refl), e0.3
  prom-           %332.1 = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p104, e0.3
  val?            %332.2 = StaticCall         !v    .getGroupMethods[0x556a25b54bf0](%332.0, %332.1, false) e0.3   <vec+>
  void                    StVar              lW    direct, %332.2, e0.3
  lgl$#-          %332.4 = IsType                   %332.2 isA val?+
  val?^ | miss    %332.5 = LdVar              eR    length, e0.3
  lgl$#-          %332.6 = Identical                <blt length>, %332.5   <true>
  void                    Branch                   %332.6 -> BB338 (if true) | BB339 (if false)
BB333   <- [330]
  fs              %333.0 = FrameState         R     0x556a23f8da70+1177: [], env=e0.3
  void                    Deopt              !v    %333.0, CallTarget@0x556a225cd830[Call#34], %330.9   !
BB265   <- [334]
  void                    Nop                !     
  lgl$-           %265.1 = %334.5
  goto BB56
BB53   <- [334]
  val?^ | miss    %53.0 = LdVar              eR    useInherited, e0.3
  val?            %53.1 = Force!<wrapped>    !v    %53.0, e0.3   <lgl+>
  lgl$#-          %53.2 = IsType                   %53.1 isA val+   <true>
  lgl$#-          %53.3 = IsType                   %53.1 isA lgl+
  void                    Branch                   %53.2 -> BB340 (if true) | BB341 (if false)
BB338   <- [332]
  val             %338.0 = ChkMissing         e     %332.2
  void                    Branch                   %332.4 -> BB344 (if true) | BB345 (if false)
BB339   <- [332]
  void                    Nop                !     
  lgl$#-          %339.1 = %332.6
  dr              %339.2 = DeadBranchReached@0x556a225cd830[Test#6]
  goto BB269
BB56   <- [265, 346]
  lgl$-           %56.0 = Phi                      %346.4:BB346, %265.1:BB265
  lgl$-           %56.1 = %56.0
  lgl$#-          %56.2 = CheckTrueFalse     e     %56.1
  void                    Branch                   %56.2 -> BB249 (if true) | BB59 (if false)
BB340   <- [53]
  void                    Branch                   %53.3 -> BB346 (if true) | BB347 (if false)
BB341   <- [53]
  void                    Nop                !     
  lgl$#-          %341.1 = %53.2
  dr              %341.2 = DeadBranchReached@0x556a225cd830[Test#9]
  goto BB54
BB344   <- [338]
  val?+           %344.0 = CastType           d     dn %332.2   <vec+>
  (int|real)$-    %344.1 = CallSafeBuiltin    wed   length(%344.0)    <int$->
  lgl$#-          %344.2 = IsType                   %344.1 isA int$-
  void                    Branch                   %344.2 -> BB352 (if true) | BB353 (if false)
BB345   <- [338]
  void                    Nop                !     
  val?            %345.1 = %332.2
  dr              %345.2 = Typecheck@0x556a225cd830[Type#76]
  goto BB269
BB269   <- [339, 345]
  val?^ | miss    %269.0 = Phi                      %339.1:BB339, %345.1:BB345
  val?^ | miss    %269.1 = %269.0
  dr              %269.2 = Phi                      %339.2:BB339, %345.2:BB345
  dr              %269.3 = %269.2
  fs              %269.4 = FrameState         R     0x556a23f8da70+1233: [], env=e0.3
  void                    Deopt              !v    %269.4, %269.3, %269.1   !
BB249   <- [56]
  val?^ | miss    %249.0 = LdVar              eR    c, e0.3
  lgl$#-          %249.1 = Identical                <blt c>, %249.0   <true>
  void                    Branch                   %249.1 -> BB336 (if true) | BB337 (if false)
BB59   <- [56]
  val?^ | miss    %59.0 = LdVar              eR    cl1, e0.3
  val?            %59.1 = Force!             !v    %59.0, e0.3   <val?_>
  val?            %59.2 = %59.1
  goto BB60
BB346   <- [340]
  lgl+            %346.0 = CastType           d     dn %53.1
  lgl$-           %346.1 = Extract2_1D        wed   %346.0, 1L, elided   <lgl$->
  lgl$-           %346.2 = AsLogical                %346.1
  lgl$-           %346.3 = LOr                      %334.5, %346.2
  lgl$-           %346.4 = %346.3
  goto BB56
BB347   <- [340]
  void                    Nop                !     
  val?            %347.1 = %53.1
  dr              %347.2 = Typecheck@0x556a225cd830[Type#91]
  goto BB54
BB54   <- [341, 347]
  val?^ | miss    %54.0 = Phi                      %341.1:BB341, %347.1:BB347
  val?^ | miss    %54.1 = %54.0
  dr              %54.2 = Phi                      %341.2:BB341, %347.2:BB347
  dr              %54.3 = %54.2
  fs              %54.4 = FrameState         R     0x556a23f8da70+1592: [%334.5, %53.1], env=e0.3
  void                    Deopt              !v    %54.4, %54.3, %54.1   !
BB352   <- [344]
  int$-           %352.0 = CastType           d     dn %344.1
  lgl$#-          %352.1 = CheckTrueFalse     e     %352.0
  void                    Branch                   %352.1 -> BB274 (if true) | BB273 (if false)
BB353   <- [344]
  fs              %353.0 = FrameState         R     0x556a23f8da70+1324: [%344.1], env=e0.3
  void                    Deopt              !v    %353.0, Typecheck@0x556a225cd830[Type#79], %344.1   !
BB336   <- [249]
  val?^ | miss    %336.0 = LdVar              eR    cl1, e0.3
  lgl$#-          %336.1 = IsType                   %336.0 isA val?~+ | miss
  void                    Branch                   %336.1 -> BB342 (if true) | BB343 (if false)
BB337   <- [249]
  void                    Nop                !     
  lgl$#-          %337.1 = %249.1
  dr              %337.2 = DeadBranchReached@0x556a225cd830[Test#10]
  goto BB57
BB60   <- [59, 372]
  val?            %60.0 = Phi                      %59.2:BB59, %372.2:BB372   <str->
  val?            %60.1 = %60.0
  void                    StVar              lW    labels, %60.1, e0.3
  val?^ | miss    %60.3 = LdVar              eR    list, e0.3
  lgl$#-          %60.4 = Identical                <blt list>, %60.3   <true>
  void                    Branch                   %60.4 -> BB348 (if true) | BB349 (if false)
BB274   <- [352]
  val?^ | miss    %274.0 = LdVar              eR    doCache, e0.3
  val?            %274.1 = Force!<lazy>       !v    %274.0, e0.3   <lgl$->
  lgl$#-          %274.2 = CheckTrueFalse     we    %274.1
  void                    Branch                   %274.2 -> BB281 (if true) | BB277 (if false)
BB273   <- [352]
  void                    Nop                !     
  goto BB50
BB342   <- [336]
  val?~+ | miss   %342.0 = CastType           d     dn %336.0
  val?+           %342.1 = Force!<value>            %342.0,    <str$+>
  val?^ | miss    %342.2 = LdVar              eR    .eligibleSuperClasses, e0.3
  lgl$#-          %342.3 = Identical                %342.2, function(contains, simpleOnly) <(rir::Dispatch|...
  void                    Branch                   %342.3 -> BB350 (if true) | BB351 (if false)
BB343   <- [336]
  void                    Nop                !     
  val?^ | miss    %343.1 = %336.0
  dr              %343.2 = Typecheck@0x556a225cd830[Type#100]
  goto BB57
BB57   <- [337, 343, 351]
  val?^ | miss    %57.0 = Phi                      %337.1:BB337, %343.1:BB343, %351.1:BB351
  val?^ | miss    %57.1 = %57.0
  dr              %57.2 = Phi                      %337.2:BB337, %343.2:BB343, %351.2:BB351
  dr              %57.3 = %57.2
  fs              %57.4 = FrameState         R     0x556a23f8da70+1643: [%56.1], env=e0.3
  void                    Deopt              !v    %57.4, %57.3, %57.1   !
BB348   <- [60]
  val             %348.0 = ChkMissing         e     %60.1
  val+            %348.1 = CallSafeBuiltin    wed   list(%60.1)    <vec$->
  void                    StVar              lW    supersList, %348.1, e0.3
  val?^ | miss    %348.3 = LdVar              eR    vector, e0.3
  lgl$#-          %348.4 = Identical                %348.3, function(mode="logical", length=0L) <(rir::Dis|...
  void                    Branch                   %348.4 -> BB358 (if true) | BB359 (if false)
BB349   <- [60]
  fs              %349.0 = FrameState         R     0x556a23f8da70+1831: [], env=e0.3
  void                    Deopt              !v    %349.0, DeadBranchReached@0x556a225cd830[Test#11], %60.4   !
BB281   <- [274]
  val?^ | miss    %281.0 = LdVar              eR    assign, e0.3
  lgl$#-          %281.1 = Identical                %281.0, function(x, value, pos=-(1), envir=as.environm|...
  void                    Branch                   %281.1 -> BB364 (if true) | BB365 (if false)
BB277   <- [274]
  void                    Nop                !     
  goto BB278
BB350   <- [342]
  prom-           %350.0 = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p98, e0.3
  prom-           %350.1 = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p101, e0.3
  ct              %350.2 = PushContext        lCL   %350.0, %350.1, .eligibleSuperClasses(@(def, contains), simple|..., function(contains, simpleOnly) <(rir::Dispatch|..., e0.3
  val?^           %350.3 = CastType                 up %350.1
  val?^           %350.4 = CastType                 up %350.0
  val?^ | miss    %350.5 = LdVar              eR    names, <env 0x556a1ba11378>
  lgl$#-          %350.6 = Identical                <blt names>, %350.5   <true>
  void                    Branch                   %350.6 -> BB354 (if true) | BB355 (if false)
BB351   <- [342]
  void                    Nop                !     
  val?^ | miss    %351.1 = %342.2
  dr              %351.2 = CallTarget@0x556a225cd830[Call#41]
  goto BB57
BB358   <- [348]
  val?^ | miss    %358.0 = LdVar              eR    nargs, e0.3
  lgl$#-          %358.1 = IsType                   %358.0 isA int$-
  void                    Branch                   %358.1 -> BB360 (if true) | BB361 (if false)
BB359   <- [348]
  void                    Nop                !     
  val?^ | miss    %359.1 = %348.3
  dr              %359.2 = CallTarget@0x556a225cd830[Call#44]
  goto BB63
BB364   <- [281]
  prom-           %364.0 = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p105, e0.3
  prom-           %364.1 = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p106, e0.3
  prom-           %364.2 = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p107, e0.3
  val?            %364.3 = StaticCall         !v    assign[0x556a27394a90](%364.0, %364.1, missingArg, %364.2) { 0 1 3n } e0.3
  goto BB278
BB365   <- [281]
  fs              %365.0 = FrameState         R     0x556a23f8da70+1355: [%274.2], env=e0.3
  void                    Deopt              !v    %365.0, CallTarget@0x556a225cd830[Call#36], %281.0   !
BB278   <- [277, 364]
  val?^ | miss    %278.0 = LdVar              eR    direct, e0.3
  lgl$#-          %278.1 = IsType                   %278.0 isA val?~+ | miss
  void                    Branch                   %278.1 -> BB368 (if true) | BB369 (if false)
BB354   <- [350]
  env             e354.0 = MkEnv              l     contains=%350.4, simpleOnly=%350.3, parent=<env 0x556a1ba11378>, context 1
  val?            %354.1 = Force!<lazy>       !vL   %350.4, e354.0   <vec+>
  lgl$#-          %354.2 = IsType                   %354.1 isA val?+
  void                    Branch                   %354.2 -> BB356 (if true) | BB357 (if false)
BB355   <- [350]
  fs              %355.0 = FrameState         R     0x556a23f8da70+1789: [<blt c>, %342.1], env=e0.3
  env             e355.1 = (MkEnv)            l     contains=%350.4, simpleOnly=%350.3, parent=<env 0x556a1ba11378>, context 1
  fs              %355.2 = FrameState         R     0x556a211579f0+17: [<blt names>, %350.6], env=e355.1, next=%355.0
  void                    Deopt              !v    %355.2, DeadBranchReached@0x556a225da788[Test#0], %350.6   !
BB360   <- [358]
  int$-           %360.0 = CastType           d     dn %358.0
  vec-            %360.1 = CallSafeBuiltin    wed   vector("list", %360.0)    <vec->
  void                    StVar              lW    classDefs, %360.1, e0.3
  val?^ | miss    %360.3 = LdVar              eR    def, e0.3
  val?            %360.4 = Force!<value>      !v    %360.3, e0.3   <other>
  val?^ | miss    %360.5 = LdVar              eR    classDefs !upd, e0.3
  lgl$#-          %360.6 = IsType                   %360.5 isA val?~- | miss
  void                    Branch                   %360.6 -> BB370 (if true) | BB371 (if false)
BB361   <- [358]
  void                    Nop                !     
  val?^ | miss    %361.1 = %358.0
  dr              %361.2 = Typecheck@0x556a225cd830[Type#110]
  goto BB63
BB63   <- [359, 361]
  val?^ | miss    %63.0 = Phi                      %359.1:BB359, %361.1:BB361
  val?^ | miss    %63.1 = %63.0
  dr              %63.2 = Phi                      %359.2:BB359, %361.2:BB361
  dr              %63.3 = %63.2
  fs              %63.4 = FrameState         R     0x556a23f8da70+1936: [], env=e0.3
  void                    Deopt              !v    %63.4, %63.3, %63.1   !
BB368   <- [278]
  val?~+ | miss   %368.0 = CastType           d     dn %278.0
  void                    Visible            v     
  val?+           %368.2 = Force!<value>            %368.0,    <vec$+>
  val?+           %368.3 = %368.2
  goto BB137
BB369   <- [278]
  fs              %369.0 = FrameState         R     0x556a23f8da70+1420: [], env=e0.3
  void                    Deopt              !v    %369.0, Typecheck@0x556a225cd830[Type#85], %278.0   !
BB356   <- [354]
  val?+           %356.0 = CastType           d     dn %354.1   <vec+>
  val+            %356.1 = CallSafeBuiltin    wed   names(%356.0)    <(nil|str)->
  void                    StVar              lW    what, %356.1, e354.0
  val?^ | miss    %356.3 = LdVar              eR    length, <env 0x556a1ba11378>
  lgl$#-          %356.4 = Identical                <blt length>, %356.3   <true>
  void                    Branch                   %356.4 -> BB362 (if true) | BB363 (if false)
BB357   <- [354]
  fs              %357.0 = FrameState         R     0x556a23f8da70+1789: [<blt c>, %342.1], env=e0.3
  fs              %357.1 = FrameState         R     0x556a211579f0+69: [<blt names>, %354.1], env=e354.0, next=%357.0
  void                    Deopt              !v    %357.1, Typecheck@0x556a225da788[Type#1], %354.1   !
BB370   <- [360]
  val?~- | miss   %370.0 = CastType           d     dn %360.5
  val?-           %370.1 = Force!<value>            %370.0,    <vec->
  val?            %370.2 = Subassign2_1D      !v    %360.4, %370.1, 1L, e0.3
  void                    StVar              lW    classDefs, %370.2, e0.3
  val?^ | miss    %370.4 = LdVar              eR    nargs, e0.3
  lgl$#-          %370.5 = IsType                   %370.4 isA int$-
  void                    Branch                   %370.5 -> BB374 (if true) | BB375 (if false)
BB371   <- [360]
  fs              %371.0 = FrameState         R     0x556a23f8da70+1996: [%360.4], env=e0.3
  void                    Deopt              !v    %371.0, Typecheck@0x556a225cd830[Type#113], %360.5   !
BB137   <- [368, 572]
  val?+           %137.0 = Phi                      %572.3:BB572, %368.3:BB368
  val?+           %137.1 = %137.0
  void                    Return             l     %137.1
BB362   <- [356]
  (int|real)$-    %362.0 = CallSafeBuiltin    wed   length(%356.1)    <int$->
  lgl$#-          %362.1 = IsType                   %362.0 isA int$-
  void                    Branch                   %362.1 -> BB366 (if true) | BB367 (if false)
BB363   <- [356]
  fs              %363.0 = FrameState         R     0x556a23f8da70+1789: [<blt c>, %342.1], env=e0.3
  fs              %363.1 = FrameState         R     0x556a211579f0+105: [], env=e354.0, next=%363.0
  void                    Deopt              !v    %363.1, DeadBranchReached@0x556a225da788[Test#1], %356.4   !
BB374   <- [370]
  int$-           %374.0 = CastType           d     dn %370.4
  lgl$-           %374.1 = Gt                 d     %374.0, 1, elided   <lgl$->
  lgl$#-          %374.2 = CheckTrueFalse     e     %374.1
  void                    Branch                   %374.2 -> BB201 (if true) | BB69 (if false)
BB375   <- [370]
  void                    Nop                !     
  val?^ | miss    %375.1 = %370.4
  dr              %375.2 = Typecheck@0x556a225cd830[Type#114]
  goto BB67
BB366   <- [362]
  int$-           %366.0 = CastType           d     dn %362.0
  lgl$-           %366.1 = Not                d     %366.0, elided
  lgl$#-          %366.2 = CheckTrueFalse     e     %366.1
  void                    Branch                   %366.2 -> BB264 (if true) | BB258 (if false)
BB367   <- [362]
  void                    Nop                !     
  (int|real)$-    %367.1 = %362.0
  dr              %367.2 = Typecheck@0x556a225da788[Type#5]
  goto BB256
BB201   <- [374]
  lgl$#-          %201.0 = ColonInputEffects        2, %374.0   <true>
  void                    Branch                   %201.0 -> BB382 (if true) | BB383 (if false)
BB69   <- [374]
  void                    Nop                !     
  goto BB70
BB67   <- [375, 383, 385, 389]
  val?^ | miss    %67.0 = Phi                      %375.1:BB375, %383.1:BB383, %385.1:BB385, %389.1:BB389
  val?^ | miss    %67.1 = %67.0
  dr              %67.2 = Phi                      %375.2:BB375, %383.2:BB383, %385.2:BB385, %389.2:BB389
  dr              %67.3 = %67.2
  fs              %67.4 = FrameState         R     0x556a23f8da70+2031: [], env=e0.3
  void                    Deopt              !v    %67.4, %67.3, %67.1   !
BB264   <- [366]
  void                    Nop                !     
  val+            %264.1 = %356.1
  goto BB261
BB258   <- [366]
  val?^ | miss    %258.0 = LdVar              eR    vapply, <env 0x556a1ba11378>
  lgl$#-          %258.1 = Identical                %258.0, function(X, FUN, FUN.VALUE, ..., USE.NAMES=TRU|...
  void                    Branch                   %258.1 -> BB376 (if true) | BB377 (if false)
BB256   <- [367, 377]
  val?^ | miss    %256.0 = Phi                      %367.1:BB367, %377.1:BB377
  val?^ | miss    %256.1 = %256.0
  dr              %256.2 = Phi                      %367.2:BB367, %377.2:BB377
  dr              %256.3 = %256.2
  fs              %256.4 = FrameState         R     0x556a23f8da70+1789: [<blt c>, %342.1], env=e0.3
  fs              %256.5 = FrameState         R     0x556a211579f0+196: [%362.0], env=e354.0, next=%256.4
  void                    Deopt              !v    %256.5, %256.3, %256.1   !
BB382   <- [201]
  int$#-          %382.0 = ColonCastRhs       e     2L, %374.0   <int$->
  lgl$#-          %382.1 = Lte                d     2L, %382.0, elided   <true>
  void                    Branch                   %382.1 -> BB384 (if true) | BB385 (if false)
BB383   <- [201]
  void                    Nop                !     
  lgl$#-          %383.1 = %201.0
  dr              %383.2 = DeadBranchReached@0x556a225cd830[Test#12]
  goto BB67
BB70   <- [69, 219]
  val?^ | miss    %70.0 = LdVar              eR    labels, e0.3
  lgl$#-          %70.1 = IsType                   %70.0 isA val?~- | miss
  void                    Branch                   %70.1 -> BB378 (if true) | BB379 (if false)
BB261   <- [264, 394]
  val?            %261.0 = Phi                      %394.2:BB394, %264.1:BB264
  val?            %261.1 = %261.0
  val?            %261.2 = PopContext         C     %261.1, %350.2   <str->
  lgl$#-          %261.3 = IsType                   %261.2 isA val?-
  void                    Branch                   %261.3 -> BB372 (if true) | BB373 (if false)
BB376   <- [258]
  prom-           %376.0 = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p110, e354.0
  prom-           %376.1 = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p111, e354.0
  val?            %376.2 = StaticCall         !v    vapply[0x556a27bce660](%376.0, %376.1, na-lgl) { 0 1 2 } e354.0   <lgl+>
  void                    StVar              lW    eligible, %376.2, e354.0
  val?^ | miss    %376.4 = LdVar              eR    what, e354.0
  lgl$#-          %376.5 = IsType                   %376.4 isA val?~- | miss
  void                    Branch                   %376.5 -> BB390 (if true) | BB391 (if false)
BB377   <- [258]
  void                    Nop                !     
  val?^ | miss    %377.1 = %258.0
  dr              %377.2 = CallTarget@0x556a225da788[Call#2]
  goto BB256
BB384   <- [382]
  lgl$#-          %384.0 = Neq                d     %382.0, 2L, elided   <true>
  void                    Branch                   %384.0 -> BB388 (if true) | BB389 (if false)
BB385   <- [382]
  void                    Nop                !     
  lgl$#-          %385.1 = %382.1
  dr              %385.2 = DeadBranchReached@0x556a225cd830[Test#15]
  goto BB67
BB378   <- [70]
  val?~- | miss   %378.0 = CastType           d     dn %70.0
  val?-           %378.1 = Force!<value>            %378.0,    <str->
  lgl$#-          %378.2 = IsType                   %378.1 isA val+   <true>
  void                    Branch                   %378.2 -> BB380 (if true) | BB381 (if false)
BB379   <- [70]
  void                    Nop                !     
  val?^ | miss    %379.1 = %70.0
  dr              %379.2 = Typecheck@0x556a225cd830[Type#238]
  goto BB71
BB372   <- [261]
  val?-           %372.0 = CastType           d     dn %261.2   <str->
  (list|sym|char|lgl|int|real|str|vec|complex|raw|cls|spec|blt|prom|_|code|env|ast|expressions|dots|other)+ %372.1 = CallSafeBuiltin    wed   c(%342.1, %372.0, "ANY")    <str->
  (list|sym|char|lgl|int|real|str|vec|complex|raw|cls|spec|blt|prom|_|code|env|ast|expressions|dots|other)+ %372.2 = %372.1
  goto BB60
BB373   <- [261]
  fs              %373.0 = FrameState         R     0x556a23f8da70+1789: [<blt c>, %342.1, %261.2], env=e0.3
  void                    Deopt              !v    %373.0, Typecheck@0x556a225cd830[Type#105], %261.2   !
BB390   <- [376]
  val?~- | miss   %390.0 = CastType           d     dn %376.4
  val?-           %390.1 = Force!<value>            %390.0,    <str->
  lgl$#-          %390.2 = IsType                   %390.1 isA val+   <true>
  void                    Branch                   %390.2 -> BB392 (if true) | BB393 (if false)
BB391   <- [376]
  void                    Nop                !     
  val?^ | miss    %391.1 = %376.4
  dr              %391.2 = Typecheck@0x556a225da788[Type#9]
  goto BB259
BB388   <- [384]
  void                    StVar              lW    i, 2L, e0.3
  val?^ | miss    %388.1 = LdVar              eR    getClass, e0.3
  lgl$#-          %388.2 = Identical                %388.1, function(Class, .Force=FALSE, where=.classEnv(|...
  void                    Branch                   %388.2 -> BB398 (if true) | BB399 (if false)
BB389   <- [384]
  void                    Nop                !     
  lgl$#-          %389.1 = %384.0
  dr              %389.2 = DeadBranchReached@0x556a225cd830[Test#16]
  goto BB67
BB380   <- [378]
  val?            %380.0 = Extract1_1D        wed   %378.1, -1L, elided   <str->
  void                    StVar              lW    labels, %380.0, e0.3
  val?^ | miss    %380.2 = LdVar              eR    unique, e0.3
  lgl$#-          %380.3 = Identical                %380.2, function(x, incomparables=FALSE, ...) <(rir::D|...
  void                    Branch                   %380.3 -> BB386 (if true) | BB387 (if false)
BB381   <- [378]
  void                    Nop                !     
  lgl$#-          %381.1 = %378.2
  dr              %381.2 = DeadBranchReached@0x556a225cd830[Test#27]
  goto BB71
BB71   <- [379, 381]
  val?^ | miss    %71.0 = Phi                      %379.1:BB379, %381.1:BB381
  val?^ | miss    %71.1 = %71.0
  dr              %71.2 = Phi                      %379.2:BB379, %381.2:BB381
  dr              %71.3 = %71.2
  fs              %71.4 = FrameState         R     0x556a23f8da70+3635: [], env=e0.3
  void                    Deopt              !v    %71.4, %71.3, %71.1   !
BB392   <- [390]
  val             %392.0 = ChkMissing         e     %376.2
  lgl$#-          %392.1 = IsType                   %392.0 isA lgl+
  void                    Branch                   %392.1 -> BB394 (if true) | BB395 (if false)
BB393   <- [390]
  void                    Nop                !     
  lgl$#-          %393.1 = %390.2
  dr              %393.2 = DeadBranchReached@0x556a225da788[Test#2]
  goto BB259
BB259   <- [391, 393, 395]
  val?^ | miss    %259.0 = Phi                      %391.1:BB391, %393.1:BB393, %395.1:BB395
  val?^ | miss    %259.1 = %259.0
  dr              %259.2 = Phi                      %391.2:BB391, %393.2:BB393, %395.2:BB395
  dr              %259.3 = %259.2
  fs              %259.4 = FrameState         R     0x556a23f8da70+1789: [<blt c>, %342.1], env=e0.3
  fs              %259.5 = FrameState         R     0x556a211579f0+264: [], env=e354.0, next=%259.4
  void                    Deopt              !v    %259.5, %259.3, %259.1   !
BB398   <- [388]
  prom-           %398.0 = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p73, e0.3
  prom-           %398.1 = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p75, e0.3
  val?            %398.2 = StaticCall         !v    getClass[0x556a1e8980d0](%398.0, true, %398.1) { 0 2n 1n } e0.3   <other>
  val?^ | miss    %398.3 = LdVar              eR    classDefs !upd, e0.3
  lgl$#-          %398.4 = IsType                   %398.3 isA val?~- | miss
  void                    Branch                   %398.4 -> BB400 (if true) | BB401 (if false)
BB399   <- [388]
  fs              %399.0 = FrameState         R     0x556a23f8da70+2212: [1L, %382.0, 2L], env=e0.3
  void                    Deopt              !v    %399.0, CallTarget@0x556a225cd830[Call#54], %388.1   !
BB386   <- [380]
  val             %386.0 = ChkMissing         e     %380.0
  val?            %386.1 = StaticCall         !v    unique[0x556a271c6f80](%380.0) { 0 } e0.3   <str->
  void                    StVar              lW    labels, %386.1, e0.3
  val?^ | miss    %386.3 = LdVar              eR    verbose, e0.3
  val?            %386.4 = Force!<wrapped>    !v    %386.3, e0.3   <lgl$->
  lgl$#-          %386.5 = CheckTrueFalse     we    %386.4
  void                    Branch                   %386.5 -> BB200 (if true) | BB77 (if false)
BB387   <- [380]
  fs              %387.0 = FrameState         R     0x556a23f8da70+3703: [], env=e0.3
  void                    Deopt              !v    %387.0, CallTarget@0x556a225cd830[Call#80], %380.2   !
BB394   <- [392]
  lgl+            %394.0 = CastType           d     dn %392.0
  val?            %394.1 = Extract1_1D        wed   %390.1, %394.0, elided   <str->
  val?            %394.2 = %394.1
  goto BB261
BB395   <- [392]
  void                    Nop                !     
  val             %395.1 = %392.0
  dr              %395.2 = Typecheck@0x556a225da788[Type#11]
  goto BB259
BB400   <- [398]
  val?~- | miss   %400.0 = CastType           d     dn %398.3
  val?-           %400.1 = Force!<value>            %400.0,    <vec->
  val?^ | miss    %400.2 = LdVar              eR    i, e0.3
  lgl$#-          %400.3 = IsType                   %400.2 isA int$-
  void                    Branch                   %400.3 -> BB402 (if true) | BB403 (if false)
BB401   <- [398]
  void                    Nop                !     
  val?^ | miss    %401.1 = %398.3
  dr              %401.2 = Typecheck@0x556a225cd830[Type#158]
  goto BB204
BB200   <- [386]
  (cls|spec|blt)  %200.0 = LdFun              !v    cat, e0.3
  fs              %200.1 = FrameState         R     0x556a23f8da70+3779: [%200.0], env=e0.3
  void                    Deopt              !v    %200.1, DeadCall@0x556a225cd830[Call#81], %200.0   !
BB77   <- [386]
  val?^ | miss    %77.0 = LdVar              eR    names, e0.3
  lgl$#-          %77.1 = Identical                <blt names>, %77.0   <true>
  void                    Branch                   %77.1 -> BB396 (if true) | BB397 (if false)
BB402   <- [400]
  int$-           %402.0 = CastType           d     dn %400.2
  val?            %402.1 = Subassign2_1D      !v    %398.2, %400.1, %402.0, e0.3
  void                    StVar              lW    classDefs, %402.1, e0.3
  void                    StVar              lW    cc, %398.2, e0.3
  lgl$-           %402.4 = Missing            eR    useInherited, e0.3
  lgl$-           %402.5 = AsLogical                %402.4
  lgl$#-          %402.6 = Identical                %402.5, true
  void                    Branch                   %402.6 -> BB248 (if true) | BB206 (if false)
BB403   <- [400]
  void                    Nop                !     
  val?^ | miss    %403.1 = %400.2
  dr              %403.2 = Typecheck@0x556a225cd830[Type#159]
  goto BB204
BB204   <- [401, 403]
  val?^ | miss    %204.0 = Phi                      %401.1:BB401, %403.1:BB403
  val?^ | miss    %204.1 = %204.0
  dr              %204.2 = Phi                      %401.2:BB401, %403.2:BB403
  dr              %204.3 = %204.2
  fs              %204.4 = FrameState         R     0x556a23f8da70+2273: [1L, %382.0, 3L, %398.2], env=e0.3
  void                    Deopt              !v    %204.4, %204.3, %204.1   !
BB396   <- [77]
  val?^ | miss    %396.0 = LdVar              eR    table, e0.3
  val?            %396.1 = Force!<wrapped>    !v    %396.0, e0.3   <env->
  lgl$#-          %396.2 = IsType                   %396.1 isA val?-
  void                    Branch                   %396.2 -> BB404 (if true) | BB405 (if false)
BB397   <- [77]
  fs              %397.0 = FrameState         R     0x556a23f8da70+3764: [%386.5], env=e0.3
  void                    Deopt              !v    %397.0, DeadBranchReached@0x556a225cd830[Test#28], %77.1   !
BB248   <- [402]
  void                    Nop                !     
  lgl$-           %248.1 = %402.5
  goto BB209
BB206   <- [402]
  val?^ | miss    %206.0 = LdVar              eR    useInherited, e0.3
  val?            %206.1 = Force!<wrapped>    !v    %206.0, e0.3   <lgl+>
  lgl$#-          %206.2 = IsType                   %206.1 isA val+   <true>
  lgl$#-          %206.3 = IsType                   %206.1 isA lgl+
  void                    Branch                   %206.2 -> BB406 (if true) | BB407 (if false)
BB404   <- [396]
  val?-           %404.0 = CastType           d     dn %396.1   <env->
  val+            %404.1 = CallSafeBuiltin    wed   names(%404.0)    <str->
  void                    StVar              lW    allMethods, %404.1, e0.3
  val?^ | miss    %404.3 = LdVar              eR    match, e0.3
  lgl$#-          %404.4 = Identical                %404.3, function(x, table, nomatch=NA, incomparables=N|...
  void                    Branch                   %404.4 -> BB408 (if true) | BB409 (if false)
BB405   <- [396]
  fs              %405.0 = FrameState         R     0x556a23f8da70+3984: [<blt names>, %396.1], env=e0.3
  void                    Deopt              !v    %405.0, Typecheck@0x556a225cd830[Type#249], %396.1   !
BB209   <- [248, 424]
  lgl$-           %209.0 = Phi                      %424.4:BB424, %248.1:BB248
  lgl$-           %209.1 = %209.0
  lgl$#-          %209.2 = CheckTrueFalse     e     %209.1
  void                    Branch                   %209.2 -> BB243 (if true) | BB212 (if false)
BB406   <- [206]
  val?^ | miss    %406.0 = LdVar              eR    i, e0.3
  lgl$#-          %406.1 = IsType                   %406.0 isA int$-
  void                    Branch                   %406.1 -> BB410 (if true) | BB411 (if false)
BB407   <- [206]
  void                    Nop                !     
  lgl$#-          %407.1 = %206.2
  dr              %407.2 = DeadBranchReached@0x556a225cd830[Test#18]
  goto BB207
BB408   <- [404]
  val?^ | miss    %408.0 = LdVar              eR    labels, e0.3
  lgl$#-          %408.1 = IsType                   %408.0 isA val?~- | miss
  void                    Branch                   %408.1 -> BB412 (if true) | BB413 (if false)
BB409   <- [404]
  void                    Nop                !     
  val?^ | miss    %409.1 = %404.3
  dr              %409.2 = CallTarget@0x556a225cd830[Call#86]
  goto BB80
BB243   <- [209]
  val?^ | miss    %243.0 = LdVar              eR    c, e0.3
  lgl$#-          %243.1 = Identical                <blt c>, %243.0   <true>
  void                    Branch                   %243.1 -> BB428 (if true) | BB429 (if false)
BB212   <- [209]
  (cls|spec|blt)  %212.0 = LdFun              !v    @, <0x556a1b409bd8>, e0.3
  prom-           %212.1 = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p76, e0.3
  prom-           %212.2 = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p77, e0.3
  val?            %212.3 = Call               !v    %212.0(%212.1, %212.2) e0.3   <str$+>
  val?            %212.4 = %212.3
  goto BB213
BB410   <- [406]
  int$-           %410.0 = CastType           d     dn %406.0
  void                    Branch                   %206.3 -> BB424 (if true) | BB425 (if false)
BB411   <- [406]
  void                    Nop                !     
  val?^ | miss    %411.1 = %406.0
  dr              %411.2 = Typecheck@0x556a225cd830[Type#162]
  goto BB207
BB207   <- [407, 411, 425]
  val?^ | miss    %207.0 = Phi                      %407.1:BB407, %411.1:BB411, %425.1:BB425
  val?^ | miss    %207.1 = %207.0
  dr              %207.2 = Phi                      %407.2:BB407, %411.2:BB411, %425.2:BB425
  dr              %207.3 = %207.2
  fs              %207.4 = FrameState         R     0x556a23f8da70+2350: [1L, %382.0, 3L, %402.5, %206.1], env=e0.3
  void                    Deopt              !v    %207.4, %207.3, %207.1   !
BB412   <- [408]
  val?~- | miss   %412.0 = CastType           d     dn %408.0
  val?-           %412.1 = Force!<value>            %412.0,    <str->
  val?^ | miss    %412.2 = LdVar              eR    .fillSignatures, e0.3
  lgl$#-          %412.3 = Identical                %412.2, function(sigs, n) <(rir::DispatchTable*)0x556a|...
  void                    Branch                   %412.3 -> BB414 (if true) | BB415 (if false)
BB413   <- [408]
  void                    Nop                !     
  val?^ | miss    %413.1 = %408.0
  dr              %413.2 = Typecheck@0x556a225cd830[Type#251]
  goto BB80
BB80   <- [409, 413, 415, 417]
  val?^ | miss    %80.0 = Phi                      %409.1:BB409, %413.1:BB413, %415.1:BB415, %417.1:BB417
  val?^ | miss    %80.1 = %80.0
  dr              %80.2 = Phi                      %409.2:BB409, %413.2:BB413, %415.2:BB415, %417.2:BB417
  dr              %80.3 = %80.2
  fs              %80.4 = FrameState         R     0x556a23f8da70+4020: [], env=e0.3
  void                    Deopt              !v    %80.4, %80.3, %80.1   !
BB428   <- [243]
  (cls|spec|blt)  %428.0 = LdFun              !v    @, <0x556a1b409bd8>, e0.3
  prom-           %428.1 = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p92, e0.3
  prom-           %428.2 = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p93, e0.3
  val?            %428.3 = Call               !v    %428.0(%428.1, %428.2) e0.3   <str$+>
  val?^ | miss    %428.4 = LdVar              eR    .eligibleSuperClasses, e0.3
  lgl$#-          %428.5 = Identical                %428.4, function(contains, simpleOnly) <(rir::Dispatch|...
  void                    Branch                   %428.5 -> BB434 (if true) | BB435 (if false)
BB429   <- [243]
  fs              %429.0 = FrameState         R     0x556a23f8da70+2409: [1L, %382.0, 3L, %209.1], env=e0.3
  void                    Deopt              !v    %429.0, DeadBranchReached@0x556a225cd830[Test#19], %243.1   !
BB213   <- [212, 442]
  val?            %213.0 = Phi                      %212.4:BB212, %442.2:BB442
  val?            %213.1 = %213.0
  void                    StVar              lW    allLabels, %213.1, e0.3
  val?^ | miss    %213.3 = LdVar              eR    outerLabels, e0.3
  lgl$#-          %213.4 = Identical                %213.3, function(labels, new) <(rir::DispatchTable*)0x|...
  void                    Branch                   %213.4 -> BB438 (if true) | BB439 (if false)
BB424   <- [410]
  lgl+            %424.0 = CastType           d     dn %206.1
  lgl$-           %424.1 = Extract2_1D        wed   %424.0, %410.0, elided   <lgl$->
  lgl$-           %424.2 = AsLogical                %424.1
  lgl$-           %424.3 = LOr                      %402.5, %424.2
  lgl$-           %424.4 = %424.3
  goto BB209
BB425   <- [410]
  void                    Nop                !     
  val?            %425.1 = %206.1
  dr              %425.2 = Typecheck@0x556a225cd830[Type#160]
  goto BB207
BB414   <- [412]
  prom-           %414.0 = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p22 (!refl), e0.3
  prom-           %414.1 = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p23, e0.3
  ct              %414.2 = PushContext        lCL   %414.0, %414.1, .fillSignatures(allMethods, length(classes)), function(sigs, n) <(rir::DispatchTable*)0x556a|..., e0.3
  val?^           %414.3 = CastType                 up %414.1
  val?^           %414.4 = CastType                 up %414.0
  val?^ | miss    %414.5 = LdVar              eR    lengths, <env 0x556a1ba11378>
  lgl$#-          %414.6 = Identical                %414.5, function(x, use.names=TRUE) <(rir::DispatchTab|...
  void                    Branch                   %414.6 -> BB416 (if true) | BB417 (if false)
BB415   <- [412]
  void                    Nop                !     
  val?^ | miss    %415.1 = %412.2
  dr              %415.2 = CallTarget@0x556a225cd830[Call#87]
  goto BB80
BB434   <- [428]
  prom-           %434.0 = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p94, e0.3
  prom-           %434.1 = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p97, e0.3
  val?            %434.2 = StaticCall         !v    .eligibleSuperClasses[0x556a29036340](%434.0, %434.1) e0.3   <(nil|str)->
  lgl$#-          %434.3 = IsType                   %434.2 isA val?-
  lgl$#-          %434.4 = IsType                   %428.3 isA val?+
  void                    Branch                   %434.4 -> BB436 (if true) | BB437 (if false)
BB435   <- [428]
  fs              %435.0 = FrameState         R     0x556a23f8da70+2569: [1L, %382.0, 3L, <blt c>, %428.3], env=e0.3
  void                    Deopt              !v    %435.0, CallTarget@0x556a225cd830[Call#61], %428.4   !
BB438   <- [213]
  prom-           %438.0 = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p78, e0.3
  prom-           %438.1 = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p79 (!refl), e0.3
  val?            %438.2 = StaticCall         !v    outerLabels[0x556a2108fa30](%438.0, %438.1) e0.3   <str->
  void                    StVar              lW    labels, %438.2, e0.3
  val?^ | miss    %438.4 = LdVar              eR    c, e0.3
  lgl$#-          %438.5 = Identical                <blt c>, %438.4   <true>
  void                    Branch                   %438.5 -> BB444 (if true) | BB445 (if false)
BB439   <- [213]
  fs              %439.0 = FrameState         R     0x556a23f8da70+2653: [1L, %382.0, 3L], env=e0.3
  void                    Deopt              !v    %439.0, CallTarget@0x556a225cd830[Call#63], %213.3   !
BB416   <- [414]
  env             e416.0 = MkEnv              l     sigs=%414.4, n=%414.3, parent=<env 0x556a1ba11378>, context 1
  prom-           %416.1 = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p127, e416.0
  ct              %416.2 = PushContext        lCL   %416.1, lengths(strsplit(sigs, "#", fixed=TRUE)), function(x, use.names=TRUE) <(rir::DispatchTab|..., e416.0
  val?^           %416.3 = CastType                 up %416.1
  env             e416.4 = MkEnv              l     x=%416.3, use.names(miss)=true, parent=R_BaseNamespace, context 1
  val?            %416.5 = Force!<lazy>       !vr   %416.3,    <vec+>
  val?            %416.6 = CallBuiltin        !v    lengths(%416.5, true) e416.4
  val?            %416.7 = PopContext         C     %416.6, %416.2   <int->
  void                    StVar              lW    siglens, %416.7, e416.0
  val?^ | miss    %416.9 = LdVar              eR    n, e416.0
  val?            %416.10 = Force!<lazy>       !v    %416.9, e416.0   <int$->
  cls             %416.11 = MkCls                    unknown--fromConstant@Prom(4)0, e416.0
  val?^ | miss    %416.12 = LdVar              eR    siglens, e416.0
  lgl$#-          %416.13 = IsType                   %416.12 isA int-
  void                    Branch                   %416.13 -> BB418 (if true) | BB419 (if false)
BB417   <- [414]
  void                    DropContext        C     
  val?^ | miss    %417.1 = %414.5
  dr              %417.2 = CallTarget@0x556a225da368[Call#0]
  goto BB80
BB436   <- [434]
  val?+           %436.0 = CastType           d     dn %428.3   <str$+>
  void                    Branch                   %434.3 -> BB442 (if true) | BB443 (if false)
BB437   <- [434]
  void                    Nop                !     
  val?            %437.1 = %428.3
  dr              %437.2 = Typecheck@0x556a225cd830[Type#177]
  goto BB246
BB444   <- [438]
  val?^ | miss    %444.0 = LdVar              eR    supersList, e0.3
  lgl$#-          %444.1 = IsType                   %444.0 isA val?~- | miss
  void                    Branch                   %444.1 -> BB448 (if true) | BB449 (if false)
BB445   <- [438]
  void                    Nop                !     
  lgl$#-          %445.1 = %438.5
  dr              %445.2 = DeadBranchReached@0x556a225cd830[Test#20]
  goto BB216
BB418   <- [416]
  int-            %418.0 = CastType           d     dn %416.12
  val?            %418.1 = Gt                 !v    %416.10, %418.0, e416.0   <lgl->
  void                    StVar              lW    short, %418.1, e416.0
  val?^ | miss    %418.3 = LdVar              eR    vapply, e416.0
  lgl$#-          %418.4 = Identical                %418.3, function(X, FUN, FUN.VALUE, ..., USE.NAMES=TRU|...
  void                    Branch                   %418.4 -> BB420 (if true) | BB421 (if false)
BB419   <- [416]
  fs              %419.0 = FrameState         R     0x556a23f8da70+4057: [], env=e0.3
  prom-           %419.1 = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p21, e0.3
  val?^           %419.2 = CastType                 up %419.1
  prom-           %419.3 = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p20, e0.3
  val?^           %419.4 = CastType                 up %419.3
  env             e419.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%419.2, x=%419.4, parent=R_BaseNamespace, context 0
  fs              %419.6 = FrameState         R     0x556a1bc1ed40+23: [%412.1], env=e419.5, next=%419.0
  fs              %419.7 = FrameState         R     0x556a1f67ffc0+37(pr): [], env=e0.3, next=%419.6
  fs              %419.8 = FrameState         R     0x556a20b896b0+55: [%416.10], env=e416.0, next=%419.7
  void                    Deopt              !v    %419.8, Typecheck@0x556a225da368[Type#4], %416.12   !
BB442   <- [436]
  val?-           %442.0 = CastType           d     dn %434.2   <(nil|str)->
  (list|sym|char|lgl|int|real|str|vec|complex|raw|cls|spec|blt|prom|_|code|env|ast|expressions|dots|other)+ %442.1 = CallSafeBuiltin    wed   c(%436.0, %442.0, "ANY")    <str->
  (list|sym|char|lgl|int|real|str|vec|complex|raw|cls|spec|blt|prom|_|code|env|ast|expressions|dots|other)+ %442.2 = %442.1
  goto BB213
BB443   <- [436]
  void                    Nop                !     
  val?            %443.1 = %434.2
  dr              %443.2 = Typecheck@0x556a225cd830[Type#182]
  goto BB246
BB246   <- [437, 443]
  val?^ | miss    %246.0 = Phi                      %437.1:BB437, %443.1:BB443
  val?^ | miss    %246.1 = %246.0
  dr              %246.2 = Phi                      %437.2:BB437, %443.2:BB443
  dr              %246.3 = %246.2
  fs              %246.4 = FrameState         R     0x556a23f8da70+2611: [1L, %382.0, 3L, <blt c>, %428.3, %434.2], env=e0.3
  void                    Deopt              !v    %246.4, %246.3, %246.1   !
BB448   <- [444]
  val?~- | miss   %448.0 = CastType           d     dn %444.0
  val?-           %448.1 = Force!<value>            %448.0,    <vec$->
  val?^ | miss    %448.2 = LdVar              eR    list, e0.3
  lgl$#-          %448.3 = Identical                <blt list>, %448.2   <true>
  void                    Branch                   %448.3 -> BB450 (if true) | BB451 (if false)
BB449   <- [444]
  void                    Nop                !     
  val?^ | miss    %449.1 = %444.0
  dr              %449.2 = Typecheck@0x556a225cd830[Type#190]
  goto BB216
BB216   <- [445, 449, 451, 453]
  val?^ | miss    %216.0 = Phi                      %445.1:BB445, %449.1:BB449, %451.1:BB451, %453.1:BB453
  val?^ | miss    %216.1 = %216.0
  dr              %216.2 = Phi                      %445.2:BB445, %449.2:BB449, %451.2:BB451, %453.2:BB453
  dr              %216.3 = %216.2
  fs              %216.4 = FrameState         R     0x556a23f8da70+2704: [1L, %382.0, 3L], env=e0.3
  void                    Deopt              !v    %216.4, %216.3, %216.1   !
BB420   <- [418]
  prom-           %420.0 = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p129, e416.0
  prom-           %420.1 = MkArg                    %416.11, .findInheritedMethods[0x556a2174b210]_p131 (!refl), e416.0
  prom-           %420.2 = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p132, e416.0
  val?            %420.3 = StaticCall         !v    vapply[0x556a1fdb9c50](%420.0, %420.1, %420.2) { 0 1 2 } e416.0   <str->
  void                    StVar              lW    suffix, %420.3, e416.0
  val?^ | miss    %420.5 = LdVar              eR    sigs !upd, e416.0
  val?            %420.6 = Force!             !v    %420.5, e416.0
  val?^ | miss    %420.7 = LdVar              eR    paste, e416.0
  lgl$#-          %420.8 = Identical                %420.7, function(..., sep=" ", collapse=NULL, recycle0|...
  void                    Branch                   %420.8 -> BB422 (if true) | BB423 (if false)
BB421   <- [418]
  fs              %421.0 = FrameState         R     0x556a23f8da70+4057: [], env=e0.3
  prom-           %421.1 = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p21, e0.3
  val?^           %421.2 = CastType                 up %421.1
  prom-           %421.3 = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p20, e0.3
  val?^           %421.4 = CastType                 up %421.3
  env             e421.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%421.2, x=%421.4, parent=R_BaseNamespace, context 0
  fs              %421.6 = FrameState         R     0x556a1bc1ed40+23: [%412.1], env=e421.5, next=%421.0
  fs              %421.7 = FrameState         R     0x556a1f67ffc0+37(pr): [], env=e0.3, next=%421.6
  fs              %421.8 = FrameState         R     0x556a20b896b0+89: [], env=e416.0, next=%421.7
  void                    Deopt              !v    %421.8, CallTarget@0x556a225da368[Call#2], %418.3   !
BB450   <- [448]
  val?^ | miss    %450.0 = LdVar              eR    allLabels, e0.3
  lgl$#-          %450.1 = IsType                   %450.0 isA val?~+ | miss
  void                    Branch                   %450.1 -> BB452 (if true) | BB453 (if false)
BB451   <- [448]
  void                    Nop                !     
  lgl$#-          %451.1 = %448.3
  dr              %451.2 = DeadBranchReached@0x556a225cd830[Test#21]
  goto BB216
BB422   <- [420]
  prom-           %422.0 = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p133, e416.0
  prom-           %422.1 = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p135, e416.0
  dots-           %422.2 = DotsList           l     %422.0, %422.1
  val?^ | miss    %422.3 = CastType                 up %422.0
  env             e422.4 = MkEnv              l     ...=%422.2, sep="#", collapse(miss)=nil, recycle0(miss)=false, parent=R_BaseNamespace, context 0
  val?            %422.5 = Force!             !vL   %422.3, e422.4
  val?^ | miss    %422.6 = CastType                 up %422.1
  val?            %422.7 = Force!             !vL   %422.6, e422.4
  val+            %422.8 = CallSafeBuiltin    wed   list(%422.5, %422.7)    <vec->
  lgl$#-          %422.9 = IsType                   %422.8 isA val?-
  void                    Branch                   %422.9 -> BB426 (if true) | BB427 (if false)
BB423   <- [420]
  fs              %423.0 = FrameState         R     0x556a23f8da70+4057: [], env=e0.3
  prom-           %423.1 = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p21, e0.3
  val?^           %423.2 = CastType                 up %423.1
  prom-           %423.3 = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p20, e0.3
  val?^           %423.4 = CastType                 up %423.3
  env             e423.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%423.2, x=%423.4, parent=R_BaseNamespace, context 0
  fs              %423.6 = FrameState         R     0x556a1bc1ed40+23: [%412.1], env=e423.5, next=%423.0
  fs              %423.7 = FrameState         R     0x556a1f67ffc0+37(pr): [], env=e0.3, next=%423.6
  fs              %423.8 = FrameState         R     0x556a20b896b0+154: [%420.6], env=e416.0, next=%423.7
  void                    Deopt              !v    %423.8, CallTarget@0x556a225da368[Call#4], %420.7   !
BB452   <- [450]
  val?~+ | miss   %452.0 = CastType           d     dn %450.0
  val?+           %452.1 = Force!<value>            %452.0,    <str+>
  val+            %452.2 = CallSafeBuiltin    wed   list(%452.1)    <vec$->
  val+            %452.3 = CallSafeBuiltin    wed   c(%448.1, %452.2)    <vec->
  void                    StVar              lW    supersList, %452.3, e0.3
  int$#-          %452.5 = 3L
  goto BB218
BB453   <- [450]
  void                    Nop                !     
  val?^ | miss    %453.1 = %450.0
  dr              %453.2 = Typecheck@0x556a225cd830[Type#192]
  goto BB216
BB426   <- [422]
  val-            %426.0 = CastType           d     dn %422.8   <vec->
  val+            %426.1 = CallSafeBuiltin    wed   paste(%426.0, "#", nil, false)    <str->
  val?^ | miss    %426.2 = LdVar              eR    sigs !upd, e416.0
  val?            %426.3 = Force!<wrapped>    !v    %426.2, e416.0   <str->
  val?^ | miss    %426.4 = LdVar              eR    short, e416.0
  lgl$#-          %426.5 = IsType                   %426.4 isA lgl-
  void                    Branch                   %426.5 -> BB430 (if true) | BB431 (if false)
BB427   <- [422]
  fs              %427.0 = FrameState         R     0x556a23f8da70+4057: [], env=e0.3
  prom-           %427.1 = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p21, e0.3
  val?^           %427.2 = CastType                 up %427.1
  prom-           %427.3 = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p20, e0.3
  val?^           %427.4 = CastType                 up %427.3
  env             e427.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%427.2, x=%427.4, parent=R_BaseNamespace, context 0
  fs              %427.6 = FrameState         R     0x556a1bc1ed40+23: [%412.1], env=e427.5, next=%427.0
  fs              %427.7 = FrameState         R     0x556a1f67ffc0+37(pr): [], env=e0.3, next=%427.6
  fs              %427.8 = FrameState         R     0x556a20b896b0+210: [], env=e416.0, next=%427.7
  fs              %427.9 = FrameState         R     0x556a1d357610+78: [%422.8, "#", nil, false], env=e422.4, next=%427.8
  void                    Deopt              !v    %427.9, Typecheck@0x556a1d357750[Type#0], %422.8   !
BB218   <- [452, 524]
  int$#-          %218.0 = Phi                      %452.5:BB452, %524.5:BB524
  int$#-          %218.1 = %218.0
  lgl$#-          %218.2 = Neq                d     %382.0, %218.1, elided
  void                    Branch                   %218.2 -> BB220 (if true) | BB219 (if false)
BB430   <- [426]
  lgl-            %430.0 = CastType           d     dn %426.4
  val?            %430.1 = Subassign1_1D      wed   %426.1, %426.3, %430.0, e416.0   <str->
  void                    StVar              lW    sigs, %430.1, e416.0
  val             %430.3 = ChkMissing         e     %430.1
  val?            %430.4 = PopContext         C     %430.1, %414.2   <str->
  lgl$#-          %430.5 = IsType                   %430.4 isA val?+
  void                    Branch                   %430.5 -> BB432 (if true) | BB433 (if false)
BB431   <- [426]
  fs              %431.0 = FrameState         R     0x556a23f8da70+4057: [], env=e0.3
  prom-           %431.1 = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p21, e0.3
  val?^           %431.2 = CastType                 up %431.1
  prom-           %431.3 = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p20, e0.3
  val?^           %431.4 = CastType                 up %431.3
  env             e431.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%431.2, x=%431.4, parent=R_BaseNamespace, context 0
  fs              %431.6 = FrameState         R     0x556a1bc1ed40+23: [%412.1], env=e431.5, next=%431.0
  fs              %431.7 = FrameState         R     0x556a1f67ffc0+37(pr): [], env=e0.3, next=%431.6
  fs              %431.8 = FrameState         R     0x556a20b896b0+224: [%426.1, %426.3], env=e416.0, next=%431.7
  void                    Deopt              !v    %431.8, Typecheck@0x556a225da368[Type#21], %426.4   !
BB220   <- [218]
  void                    StVar              lW    i, %218.1, e0.3
  int$#-          %220.1 = Add                d     %218.1, 1L, elided
  val?^ | miss    %220.2 = LdVar              eR    getClass, e0.3
  lgl$#-          %220.3 = Identical                %220.2, function(Class, .Force=FALSE, where=.classEnv(|...
  void                    Branch                   %220.3 -> BB456 (if true) | BB457 (if false)
BB219   <- [218]
  void                    Nop                !     
  goto BB70
BB432   <- [430]
  val?+           %432.0 = CastType           d     dn %430.4   <str->
  val+            %432.1 = CallSafeBuiltin    wed   match(%412.1, %432.0, NA, nil)    <int->
  void                    StVar              lW    m, %432.1, e0.3
  lgl$#-          %432.3 = IsType                   %432.1 isA int-
  val?^ | miss    %432.4 = LdVar              eR    is.na, e0.3
  lgl$#-          %432.5 = Identical                <blt is.na>, %432.4   <true>
  void                    Branch                   %432.5 -> BB440 (if true) | BB441 (if false)
BB433   <- [430]
  fs              %433.0 = FrameState         R     0x556a23f8da70+4057: [], env=e0.3
  prom-           %433.1 = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p21, e0.3
  val?^           %433.2 = CastType                 up %433.1
  prom-           %433.3 = MkArg                    %412.1, .findInheritedMethods[0x556a2174b210]_p20 (!refl), e0.3
  val?~           %433.4 = CastType                 up %433.3
  env             e433.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%433.2, x=%433.4, parent=R_BaseNamespace, context 0
  fs              %433.6 = FrameState         R     0x556a1bc1ed40+23: [%412.1], env=e433.5, next=%433.0
  fs              %433.7 = FrameState         R     0x556a1f67ffc0+37(pr): [%430.4], env=e0.3, next=%433.6
  void                    Deopt              !v    %433.7, Typecheck@0x556a1bc71cb0[Type#1], %430.4   !
BB456   <- [220]
  prom-           %456.0 = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p80, e0.3
  prom-           %456.1 = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p82, e0.3
  val?            %456.2 = StaticCall         !v    getClass[0x556a1e8980d0](%456.0, true, %456.1) { 0 2n 1n } e0.3   <other>
  val?^ | miss    %456.3 = LdVar              eR    classDefs !upd, e0.3
  lgl$#-          %456.4 = IsType                   %456.3 isA val?~- | miss
  void                    Branch                   %456.4 -> BB458 (if true) | BB459 (if false)
BB457   <- [220]
  fs              %457.0 = FrameState         R     0x556a23f8da70+2927: [1L, %382.0, %218.1], env=e0.3
  void                    Deopt              !v    %457.0, CallTarget@0x556a225cd830[Call#67], %220.2   !
BB440   <- [432]
  void                    Branch                   %432.3 -> BB446 (if true) | BB447 (if false)
BB441   <- [432]
  void                    Nop                !     
  lgl$#-          %441.1 = %432.5
  dr              %441.2 = DeadBranchReached@0x556a225cd830[Test#29]
  goto BB94
BB458   <- [456]
  val?~- | miss   %458.0 = CastType           d     dn %456.3
  val?-           %458.1 = Force!<value>            %458.0,    <vec->
  val?^ | miss    %458.2 = LdVar              eR    i, e0.3
  lgl$#-          %458.3 = IsType                   %458.2 isA int$-
  void                    Branch                   %458.3 -> BB460 (if true) | BB461 (if false)
BB459   <- [456]
  void                    Nop                !     
  val?^ | miss    %459.1 = %456.3
  dr              %459.2 = Typecheck@0x556a225cd830[Type#201]
  goto BB223
BB446   <- [440]
  int-            %446.0 = CastType           d     dn %432.1
  lgl-            %446.1 = CallSafeBuiltin    wed   is.na(%446.0)    <lgl->
  lgl-            %446.2 = Not                wed   %446.1, elided
  void                    StVar              lW    found, %446.2, e0.3
  val?^ | miss    %446.4 = LdVar              eR    mget, e0.3
  lgl$#-          %446.5 = Identical                %446.4, function(x, envir=as.environment(-(1L)), mode=|...
  void                    Branch                   %446.5 -> BB454 (if true) | BB455 (if false)
BB447   <- [440]
  void                    Nop                !     
  val+            %447.1 = %432.1
  dr              %447.2 = Typecheck@0x556a225cd830[Type#256]
  goto BB94
BB94   <- [441, 447]
  val?^ | miss    %94.0 = Phi                      %441.1:BB441, %447.1:BB447
  val?^ | miss    %94.1 = %94.0
  dr              %94.2 = Phi                      %441.2:BB441, %447.2:BB447
  dr              %94.3 = %94.2
  fs              %94.4 = FrameState         R     0x556a23f8da70+4071: [], env=e0.3
  void                    Deopt              !v    %94.4, %94.3, %94.1   !
BB460   <- [458]
  int$-           %460.0 = CastType           d     dn %458.2
  val?            %460.1 = Subassign2_1D      !v    %456.2, %458.1, %460.0, e0.3
  void                    StVar              lW    classDefs, %460.1, e0.3
  void                    StVar              lW    cc, %456.2, e0.3
  lgl$-           %460.4 = Missing            eR    useInherited, e0.3
  lgl$-           %460.5 = AsLogical                %460.4
  lgl$#-          %460.6 = Identical                %460.5, true
  void                    Branch                   %460.6 -> BB242 (if true) | BB225 (if false)
BB461   <- [458]
  void                    Nop                !     
  val?^ | miss    %461.1 = %458.2
  dr              %461.2 = Typecheck@0x556a225cd830[Type#202]
  goto BB223
BB223   <- [459, 461]
  val?^ | miss    %223.0 = Phi                      %459.1:BB459, %461.1:BB461
  val?^ | miss    %223.1 = %223.0
  dr              %223.2 = Phi                      %459.2:BB459, %461.2:BB461
  dr              %223.3 = %223.2
  fs              %223.4 = FrameState         R     0x556a23f8da70+2988: [1L, %382.0, %220.1, %456.2], env=e0.3
  void                    Deopt              !v    %223.4, %223.3, %223.1   !
BB454   <- [446]
  prom-           %454.0 = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p25, e0.3
  prom-           %454.1 = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p29, e0.3
  ct              %454.2 = PushContext        lCL   %454.0, %454.1, mget([(allMethods, [(m, found)), table), function(x, envir=as.environment(-(1L)), mode=|..., e0.3
  val?^           %454.3 = CastType                 up %454.1
  val?^           %454.4 = CastType                 up %454.0
  env             e454.5 = MkEnv              l     x=%454.4, envir=%454.3, mode(miss)="any", ifnotfound(miss)=missingArg, inherits(miss)=false, parent=R_BaseNamespace, context 1
  cls             %454.6 = MkCls                    mget@133, e454.5
  val?            %454.7 = Force!<lazy>       !vL   %454.4, e454.5   <str+>
  val?            %454.8 = Force!<lazy>       !vL   %454.3, e454.5   <env->
  val+            %454.9 = CallSafeBuiltin    wed   list(%454.6)    <vec$->
  val?            %454.10 = CallBuiltin        !v    mget(%454.7, %454.8, "any", %454.9, false) e454.5
  val?            %454.11 = PopContext         C     %454.10, %454.2   <vec+>
  void                    StVar              lW    methods, %454.11, e0.3
  val?^ | miss    %454.13 = LdVar              eR    verbose, e0.3
  val?            %454.14 = Force!<wrapped>    !v    %454.13, e0.3   <lgl$->
  lgl$#-          %454.15 = CheckTrueFalse     we    %454.14
  void                    Branch                   %454.15 -> BB199 (if true) | BB100 (if false)
BB455   <- [446]
  fs              %455.0 = FrameState         R     0x556a23f8da70+4177: [], env=e0.3
  void                    Deopt              !v    %455.0, CallTarget@0x556a225cd830[Call#90], %446.4   !
BB242   <- [460]
  void                    Nop                !     
  lgl$-           %242.1 = %460.5
  goto BB228
BB225   <- [460]
  val?^ | miss    %225.0 = LdVar              eR    useInherited, e0.3
  val?            %225.1 = Force!             !v    %225.0, e0.3   <val?_>
  lgl$#-          %225.2 = IsType                   %225.1 isA val+   <@?>
  void                    Branch                   %225.2 -> BB241 (if true) | BB226 (if false)
BB199   <- [454]
  (cls|spec|blt)  %199.0 = LdFun              !v    cat, e0.3
  fs              %199.1 = FrameState         R     0x556a23f8da70+4258: [%199.0], env=e0.3
  void                    Deopt              !v    %199.1, DeadCall@0x556a225cd830[Call#91], %199.0   !
BB100   <- [454]
  val?^ | miss    %100.0 = LdVar              eR    hasGroup, e0.3
  lgl$#-          %100.1 = IsType                   %100.0 isA lgl$-
  void                    Branch                   %100.1 -> BB462 (if true) | BB463 (if false)
BB228   <- [242, 227]
  lgl$-           %228.0 = Phi                      %227.5:BB227, %242.1:BB242
  lgl$-           %228.1 = %228.0
  lgl$#-          %228.2 = CheckTrueFalse     e     %228.1
  void                    Branch                   %228.2 -> BB232 (if true) | BB231 (if false)
BB241   <- [225]
  val?^ | miss    %241.0 = LdVar              eR    i, e0.3
  val?            %241.1 = Force!             !v    %241.0, e0.3   <val?_>
  val?            %241.2 = %241.1
  goto BB227
BB226   <- [225]
  prom-           %226.0 = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p91, e0.3
  prom-           %226.1 = %226.0
  goto BB227
BB462   <- [100]
  lgl$-           %462.0 = CastType           d     dn %100.0
  lgl$#-          %462.1 = CheckTrueFalse     e     %462.0
  void                    Branch                   %462.1 -> BB190 (if true) | BB101 (if false)
BB463   <- [100]
  void                    Nop                !     
  val?^ | miss    %463.1 = %100.0
  dr              %463.2 = Typecheck@0x556a225cd830[Type#275]
  goto BB98
BB232   <- [228]
  val?^ | miss    %232.0 = LdVar              eR    c, e0.3
  lgl$#-          %232.1 = Identical                <blt c>, %232.0   <true>
  void                    Branch                   %232.1 -> BB472 (if true) | BB473 (if false)
BB231   <- [228]
  (cls|spec|blt)  %231.0 = LdFun              !v    @, e0.3
  fs              %231.1 = FrameState         R     0x556a23f8da70+3135: [1L, %382.0, %220.1, %231.0], env=e0.3
  void                    Deopt              !v    %231.1, DeadCall@0x556a225cd830[Call#68], %231.0   !
BB227   <- [226, 241]
  val?            %227.0 = Phi                      %241.2:BB241, %226.1:BB226
  val?            %227.1 = %227.0
  val?            %227.2 = Extract2_1D        !v    %225.1, %227.1, e0.3   <val?_>
  lgl$-           %227.3 = AsLogical          e     %227.2
  lgl$-           %227.4 = LOr                      %460.5, %227.3
  lgl$-           %227.5 = %227.4
  goto BB228
BB190   <- [462]
  val?^ | miss    %190.0 = LdVar              eR    .getGroupMethods, e0.3
  lgl$#-          %190.1 = Identical                %190.0, function(labels, generics, found) <(rir::Dispa|...
  void                    Branch                   %190.1 -> BB464 (if true) | BB465 (if false)
BB101   <- [462]
  (cls|spec|blt)  %101.0 = LdFun              !v    rep, <0x556a1b41e9b0>, e0.3
  prom-           %101.1 = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p30, e0.3
  val?            %101.2 = Call               !v    %101.0(false, %101.1) e0.3   <lgl->
  void                    StVar              lW    fromGroup, %101.2, e0.3
  goto BB102
BB98   <- [463, 465]
  val?^ | miss    %98.0 = Phi                      %463.1:BB463, %465.1:BB465
  val?^ | miss    %98.1 = %98.0
  dr              %98.2 = Phi                      %463.2:BB463, %465.2:BB465
  dr              %98.3 = %98.2
  fs              %98.4 = FrameState         R     0x556a23f8da70+4243: [%454.15], env=e0.3
  void                    Deopt              !v    %98.4, %98.3, %98.1   !
BB472   <- [232]
  (cls|spec|blt)  %472.0 = LdFun              !v    @, <0x556a1b409bd8>, e0.3
  prom-           %472.1 = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p83, e0.3
  prom-           %472.2 = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p84, e0.3
  val?            %472.3 = Call               !v    %472.0(%472.1, %472.2) e0.3   <str$->
  val?^ | miss    %472.4 = LdVar              eR    .eligibleSuperClasses, e0.3
  lgl$#-          %472.5 = Identical                %472.4, function(contains, simpleOnly) <(rir::Dispatch|...
  void                    Branch                   %472.5 -> BB480 (if true) | BB481 (if false)
BB473   <- [232]
  fs              %473.0 = FrameState         R     0x556a23f8da70+3124: [1L, %382.0, %220.1, %228.1], env=e0.3
  void                    Deopt              !v    %473.0, DeadBranchReached@0x556a225cd830[Test#24], %232.1   !
BB464   <- [190]
  prom-           %464.0 = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p66, e0.3
  prom-           %464.1 = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p67, e0.3
  prom-           %464.2 = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p68, e0.3
  val?            %464.3 = StaticCall         !v    .getGroupMethods[0x556a1e1d7470](%464.0, %464.1, %464.2) e0.3   <vec+>
  void                    StVar              lW    groupmethods, %464.3, e0.3
  val?^ | miss    %464.5 = LdVar              eR    c, e0.3
  lgl$#-          %464.6 = Identical                <blt c>, %464.5   <true>
  void                    Branch                   %464.6 -> BB466 (if true) | BB467 (if false)
BB465   <- [190]
  void                    Nop                !     
  val?^ | miss    %465.1 = %190.0
  dr              %465.2 = CallTarget@0x556a225cd830[Call#95]
  goto BB98
BB102   <- [101, 512]
  val?^ | miss    %102.0 = LdVar              eR    .duplicateClassesExist, e0.3
  lgl$#-          %102.1 = Identical                %102.0, function(on) <(rir::DispatchTable*)0x556a1ffd1|...
  void                    Branch                   %102.1 -> BB468 (if true) | BB469 (if false)
BB480   <- [472]
  prom-           %480.0 = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p85, e0.3
  prom-           %480.1 = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p88, e0.3
  val?            %480.2 = StaticCall         !v    .eligibleSuperClasses[0x556a29036340](%480.0, %480.1) e0.3   <str->
  lgl$#-          %480.3 = IsType                   %480.2 isA val?-
  lgl$#-          %480.4 = IsType                   %472.3 isA val?-
  void                    Branch                   %480.4 -> BB486 (if true) | BB487 (if false)
BB481   <- [472]
  fs              %481.0 = FrameState         R     0x556a23f8da70+3284: [1L, %382.0, %220.1, <blt c>, %472.3], env=e0.3
  void                    Deopt              !v    %481.0, CallTarget@0x556a225cd830[Call#74], %472.4   !
BB466   <- [464]
  (cls|spec|blt)  %466.0 = LdFun              !v    rep, <0x556a1b41e9b0>, e0.3
  prom-           %466.1 = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p69, e0.3
  val?            %466.2 = Call               !v    %466.0(false, %466.1) e0.3   <lgl->
  (cls|spec|blt)  %466.3 = LdFun              !v    rep, <0x556a1b41e9b0>, e0.3
  prom-           %466.4 = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p71, e0.3
  val?            %466.5 = Call               !v    %466.3(true, %466.4) e0.3   <lgl->
  lgl$#-          %466.6 = IsType                   %466.5 isA lgl-
  lgl$#-          %466.7 = IsType                   %466.2 isA lgl-
  void                    Branch                   %466.7 -> BB470 (if true) | BB471 (if false)
BB467   <- [464]
  fs              %467.0 = FrameState         R     0x556a23f8da70+4428: [], env=e0.3
  void                    Deopt              !v    %467.0, DeadBranchReached@0x556a225cd830[Test#33], %464.6   !
BB468   <- [102]
  val?            %468.0 = StaticCall         !v    .duplicateClassesExist[0x556a27995c10]() e0.3   <lgl$->
  lgl$#-          %468.1 = IsType                   %468.0 isA lgl$-
  void                    Branch                   %468.1 -> BB474 (if true) | BB475 (if false)
BB469   <- [102]
  fs              %469.0 = FrameState         R     0x556a23f8da70+4800: [], env=e0.3
  void                    Deopt              !v    %469.0, CallTarget@0x556a225cd830[Call#108], %102.0   !
BB486   <- [480]
  val?-           %486.0 = CastType           d     dn %472.3   <str$->
  void                    Branch                   %480.3 -> BB488 (if true) | BB489 (if false)
BB487   <- [480]
  void                    Nop                !     
  val?            %487.1 = %472.3
  dr              %487.2 = Typecheck@0x556a225cd830[Type#220]
  goto BB235
BB470   <- [466]
  lgl-            %470.0 = CastType           d     dn %466.2
  void                    Branch                   %466.6 -> BB478 (if true) | BB479 (if false)
BB471   <- [466]
  void                    Nop                !     
  val?            %471.1 = %466.2
  dr              %471.2 = Typecheck@0x556a225cd830[Type#291]
  goto BB193
BB474   <- [468]
  lgl$-           %474.0 = CastType           d     dn %468.0
  lgl$#-          %474.1 = CheckTrueFalse     e     %474.0
  void                    Branch                   %474.1 -> BB189 (if true) | BB107 (if false)
BB475   <- [468]
  void                    Nop                !     
  val?            %475.1 = %468.0
  dr              %475.2 = Typecheck@0x556a225cd830[Type#304]
  goto BB105
BB488   <- [486]
  val?-           %488.0 = CastType           d     dn %480.2   <str->
  (list|sym|char|lgl|int|real|str|vec|complex|raw|cls|spec|blt|prom|_|code|env|ast|expressions|dots|other)+ %488.1 = CallSafeBuiltin    wed   c(%486.0, %488.0, "ANY")    <str->
  void                    StVar              lW    allLabels, %488.1, e0.3
  val?^ | miss    %488.3 = LdVar              eR    outerLabels, e0.3
  lgl$#-          %488.4 = Identical                %488.3, function(labels, new) <(rir::DispatchTable*)0x|...
  void                    Branch                   %488.4 -> BB496 (if true) | BB497 (if false)
BB489   <- [486]
  void                    Nop                !     
  val?            %489.1 = %480.2
  dr              %489.2 = Typecheck@0x556a225cd830[Type#225]
  goto BB235
BB235   <- [487, 489]
  val?^ | miss    %235.0 = Phi                      %487.1:BB487, %489.1:BB489
  val?^ | miss    %235.1 = %235.0
  dr              %235.2 = Phi                      %487.2:BB487, %489.2:BB489
  dr              %235.3 = %235.2
  fs              %235.4 = FrameState         R     0x556a23f8da70+3326: [1L, %382.0, %220.1, <blt c>, %472.3, %480.2], env=e0.3
  void                    Deopt              !v    %235.4, %235.3, %235.1   !
BB478   <- [470]
  lgl-            %478.0 = CastType           d     dn %466.5
  lgl-            %478.1 = CallSafeBuiltin    wed   c(%470.0, %478.0)    <lgl->
  void                    StVar              lW    fromGroup, %478.1, e0.3
  val?^ | miss    %478.3 = LdVar              eR    verbose, e0.3
  val?            %478.4 = Force!<wrapped>    !v    %478.3, e0.3   <lgl$->
  lgl$#-          %478.5 = CheckTrueFalse     we    %478.4
  void                    Branch                   %478.5 -> BB198 (if true) | BB197 (if false)
BB479   <- [470]
  void                    Nop                !     
  val?            %479.1 = %466.5
  dr              %479.2 = Typecheck@0x556a225cd830[Type#294]
  goto BB193
BB193   <- [471, 479]
  val?^ | miss    %193.0 = Phi                      %471.1:BB471, %479.1:BB479
  val?^ | miss    %193.1 = %193.0
  dr              %193.2 = Phi                      %471.2:BB471, %479.2:BB479
  dr              %193.3 = %193.2
  fs              %193.4 = FrameState         R     0x556a23f8da70+4572: [<blt c>, %466.2, %466.5], env=e0.3
  void                    Deopt              !v    %193.4, %193.3, %193.1   !
BB189   <- [474]
  (cls|spec|blt)  %189.0 = LdFun              !v    integer, e0.3
  fs              %189.1 = FrameState         R     0x556a23f8da70+4848: [%189.0], env=e0.3
  void                    Deopt              !v    %189.1, DeadCall@0x556a225cd830[Call#109], %189.0   !
BB107   <- [474]
  val?^ | miss    %107.0 = LdVar              eR    doExcluded, e0.3
  lgl$#-          %107.1 = IsType                   %107.0 isA lgl$-
  void                    Branch                   %107.1 -> BB476 (if true) | BB477 (if false)
BB105   <- [475, 477, 483, 485, 491, 493, 499]
  val?^ | miss    %105.0 = Phi                      %475.1:BB475, %477.1:BB477, %483.1:BB483, %485.1:BB485, %491.1:BB491, %493.1:BB493, %499.1:BB499
  val?^ | miss    %105.1 = %105.0
  dr              %105.2 = Phi                      %475.2:BB475, %477.2:BB477, %483.2:BB483, %485.2:BB485, %491.2:BB491, %493.2:BB493, %499.2:BB499
  dr              %105.3 = %105.2
  fs              %105.4 = FrameState         R     0x556a23f8da70+4827: [%468.0], env=e0.3
  void                    Deopt              !v    %105.4, %105.3, %105.1   !
BB496   <- [488]
  prom-           %496.0 = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p89, e0.3
  prom-           %496.1 = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p90 (!refl), e0.3
  val?            %496.2 = StaticCall         !v    outerLabels[0x556a2108fa30](%496.0, %496.1) e0.3   <str->
  void                    StVar              lW    labels, %496.2, e0.3
  val?^ | miss    %496.4 = LdVar              eR    c, e0.3
  lgl$#-          %496.5 = Identical                <blt c>, %496.4   <true>
  void                    Branch                   %496.5 -> BB514 (if true) | BB515 (if false)
BB497   <- [488]
  fs              %497.0 = FrameState         R     0x556a23f8da70+3368: [1L, %382.0, %220.1], env=e0.3
  void                    Deopt              !v    %497.0, CallTarget@0x556a225cd830[Call#76], %488.3   !
BB198   <- [478]
  (cls|spec|blt)  %198.0 = LdFun              !v    cat, e0.3
  fs              %198.1 = FrameState         R     0x556a23f8da70+4638: [%198.0], env=e0.3
  void                    Deopt              !v    %198.1, DeadCall@0x556a225cd830[Call#105], %198.0   !
BB197   <- [478]
  val?^ | miss    %197.0 = LdVar              eR    c, e0.3
  lgl$#-          %197.1 = Identical                <blt c>, %197.0   <true>
  void                    Branch                   %197.1 -> BB494 (if true) | BB495 (if false)
BB476   <- [107]
  lgl$-           %476.0 = CastType           d     dn %107.0
  lgl$#-          %476.1 = CheckTrueFalse     e     %476.0
  void                    Branch                   %476.1 -> BB182 (if true) | BB108 (if false)
BB477   <- [107]
  void                    Nop                !     
  val?^ | miss    %477.1 = %107.0
  dr              %477.2 = Typecheck@0x556a225cd830[Type#363]
  goto BB105
BB514   <- [496]
  val?^ | miss    %514.0 = LdVar              eR    supersList, e0.3
  lgl$#-          %514.1 = IsType                   %514.0 isA val?~- | miss
  void                    Branch                   %514.1 -> BB516 (if true) | BB517 (if false)
BB515   <- [496]
  void                    Nop                !     
  lgl$#-          %515.1 = %496.5
  dr              %515.2 = DeadBranchReached@0x556a225cd830[Test#25]
  goto BB239
BB494   <- [197]
  val?^ | miss    %494.0 = LdVar              eR    methods, e0.3
  lgl$#-          %494.1 = IsType                   %494.0 isA val?~+ | miss
  void                    Branch                   %494.1 -> BB504 (if true) | BB505 (if false)
BB495   <- [197]
  void                    Nop                !     
  lgl$#-          %495.1 = %197.1
  dr              %495.2 = DeadBranchReached@0x556a225cd830[Test#34]
  goto BB195
BB182   <- [476]
  val?^ | miss    %182.0 = LdVar              eR    methods, e0.3
  lgl$#-          %182.1 = IsType                   %182.0 isA val?~+ | miss
  void                    Branch                   %182.1 -> BB482 (if true) | BB483 (if false)
BB108   <- [476]
  void                    Nop                !     
  goto BB109
BB516   <- [514]
  val?~- | miss   %516.0 = CastType           d     dn %514.0
  val?-           %516.1 = Force!<value>            %516.0,    <vec->
  val?^ | miss    %516.2 = LdVar              eR    list, e0.3
  lgl$#-          %516.3 = Identical                <blt list>, %516.2   <true>
  void                    Branch                   %516.3 -> BB518 (if true) | BB519 (if false)
BB517   <- [514]
  void                    Nop                !     
  val?^ | miss    %517.1 = %514.0
  dr              %517.2 = Typecheck@0x556a225cd830[Type#233]
  goto BB239
BB239   <- [515, 517, 519, 525]
  val?^ | miss    %239.0 = Phi                      %515.1:BB515, %517.1:BB517, %519.1:BB519, %525.1:BB525
  val?^ | miss    %239.1 = %239.0
  dr              %239.2 = Phi                      %515.2:BB515, %517.2:BB517, %519.2:BB519, %525.2:BB525
  dr              %239.3 = %239.2
  fs              %239.4 = FrameState         R     0x556a23f8da70+3419: [1L, %382.0, %220.1], env=e0.3
  void                    Deopt              !v    %239.4, %239.3, %239.1   !
BB504   <- [494]
  val?~+ | miss   %504.0 = CastType           d     dn %494.0
  val?+           %504.1 = Force!<value>            %504.0,    <vec+>
  val?^ | miss    %504.2 = LdVar              eR    groupmethods, e0.3
  lgl$#-          %504.3 = IsType                   %504.2 isA val?~+ | miss
  void                    Branch                   %504.3 -> BB512 (if true) | BB513 (if false)
BB505   <- [494]
  void                    Nop                !     
  val?^ | miss    %505.1 = %494.0
  dr              %505.2 = Typecheck@0x556a225cd830[Type#301]
  goto BB195
BB195   <- [495, 505, 513]
  val?^ | miss    %195.0 = Phi                      %495.1:BB495, %505.1:BB505, %513.1:BB513
  val?^ | miss    %195.1 = %195.0
  dr              %195.2 = Phi                      %495.2:BB495, %505.2:BB505, %513.2:BB513
  dr              %195.3 = %195.2
  fs              %195.4 = FrameState         R     0x556a23f8da70+4623: [%478.5], env=e0.3
  void                    Deopt              !v    %195.4, %195.3, %195.1   !
BB482   <- [182]
  val?~+ | miss   %482.0 = CastType           d     dn %182.0
  val?+           %482.1 = Force!<value>            %482.0,    <vec+>
  lgl$#-          %482.2 = IsType                   %482.1 isA val+   <true>
  void                    Branch                   %482.2 -> BB484 (if true) | BB485 (if false)
BB483   <- [182]
  void                    Nop                !     
  val?^ | miss    %483.1 = %182.0
  dr              %483.2 = Typecheck@0x556a225cd830[Type#376]
  goto BB105
BB109   <- [108, 508]
  val?^ | miss    %109.0 = LdVar              eR    length, e0.3
  lgl$#-          %109.1 = Identical                <blt length>, %109.0   <true>
  void                    Branch                   %109.1 -> BB502 (if true) | BB503 (if false)
BB518   <- [516]
  val?^ | miss    %518.0 = LdVar              eR    allLabels, e0.3
  lgl$#-          %518.1 = IsType                   %518.0 isA val?~- | miss
  void                    Branch                   %518.1 -> BB524 (if true) | BB525 (if false)
BB519   <- [516]
  void                    Nop                !     
  lgl$#-          %519.1 = %516.3
  dr              %519.2 = DeadBranchReached@0x556a225cd830[Test#26]
  goto BB239
BB512   <- [504]
  val?~+ | miss   %512.0 = CastType           d     dn %504.2
  val?+           %512.1 = Force!<value>            %512.0,    <vec+>
  val+            %512.2 = CallSafeBuiltin    wed   c(%504.1, %512.1)    <vec+>
  void                    StVar              lW    methods, %512.2, e0.3
  goto BB102
BB513   <- [504]
  void                    Nop                !     
  val?^ | miss    %513.1 = %504.2
  dr              %513.2 = Typecheck@0x556a225cd830[Type#302]
  goto BB195
BB484   <- [482]
  val?^ | miss    %484.0 = LdVar              eR    is.na, e0.3
  lgl$#-          %484.1 = Identical                <blt is.na>, %484.0   <true>
  void                    Branch                   %484.1 -> BB490 (if true) | BB491 (if false)
BB485   <- [482]
  void                    Nop                !     
  lgl$#-          %485.1 = %482.2
  dr              %485.2 = DeadBranchReached@0x556a225cd830[Test#48]
  goto BB105
BB502   <- [109]
  val?^ | miss    %502.0 = LdVar              eR    methods, e0.3
  lgl$#-          %502.1 = IsType                   %502.0 isA val?~+ | miss
  void                    Branch                   %502.1 -> BB510 (if true) | BB511 (if false)
BB503   <- [109]
  void                    Nop                !     
  lgl$#-          %503.1 = %109.1
  dr              %503.2 = DeadBranchReached@0x556a225cd830[Test#50]
  goto BB110
BB524   <- [518]
  val?~- | miss   %524.0 = CastType           d     dn %518.0
  val?-           %524.1 = Force!<value>            %524.0,    <str->
  val+            %524.2 = CallSafeBuiltin    wed   list(%524.1)    <vec$->
  val+            %524.3 = CallSafeBuiltin    wed   c(%516.1, %524.2)    <vec->
  void                    StVar              lW    supersList, %524.3, e0.3
  int$#-          %524.5 = %220.1
  goto BB218
BB525   <- [518]
  void                    Nop                !     
  val?^ | miss    %525.1 = %518.0
  dr              %525.2 = Typecheck@0x556a225cd830[Type#235]
  goto BB239
BB490   <- [484]
  val?^ | miss    %490.0 = LdVar              eR    match, e0.3
  lgl$#-          %490.1 = Identical                %490.0, function(x, table, nomatch=NA, incomparables=N|...
  void                    Branch                   %490.1 -> BB492 (if true) | BB493 (if false)
BB491   <- [484]
  void                    Nop                !     
  lgl$#-          %491.1 = %484.1
  dr              %491.2 = DeadBranchReached@0x556a225cd830[Test#49]
  goto BB105
BB510   <- [502]
  val?~+ | miss   %510.0 = CastType           d     dn %502.0
  val?+           %510.1 = Force!<value>            %510.0,    <vec+>
  (int|real)$-    %510.2 = CallSafeBuiltin    wed   length(%510.1)    <int$->
  lgl$#-          %510.3 = IsType                   %510.2 isA int$-
  void                    Branch                   %510.3 -> BB520 (if true) | BB521 (if false)
BB511   <- [502]
  void                    Nop                !     
  val?^ | miss    %511.1 = %502.0
  dr              %511.2 = Typecheck@0x556a225cd830[Type#384]
  goto BB110
BB110   <- [503, 511]
  val?^ | miss    %110.0 = Phi                      %503.1:BB503, %511.1:BB511
  val?^ | miss    %110.1 = %110.0
  dr              %110.2 = Phi                      %503.2:BB503, %511.2:BB511
  dr              %110.3 = %110.2
  fs              %110.4 = FrameState         R     0x556a23f8da70+6458: [], env=e0.3
  void                    Deopt              !v    %110.4, %110.3, %110.1   !
BB492   <- [490]
  val?^ | miss    %492.0 = LdVar              eR    names, e0.3
  lgl$#-          %492.1 = Identical                %492.0, <blt names>
  void                    Branch                   %492.1 -> BB498 (if true) | BB499 (if false)
BB493   <- [490]
  void                    Nop                !     
  val?^ | miss    %493.1 = %490.0
  dr              %493.2 = CallTarget@0x556a225cd830[Call#129]
  goto BB105
BB520   <- [510]
  int$-           %520.0 = CastType           d     dn %510.2
  lgl$-           %520.1 = Gt                 d     %520.0, 1L, elided   <lgl$->
  lgl$#-          %520.2 = CheckTrueFalse     e     %520.1
  void                    Branch                   %520.2 -> BB169 (if true) | BB114 (if false)
BB521   <- [510]
  void                    Nop                !     
  (int|real)$-    %521.1 = %510.2
  dr              %521.2 = Typecheck@0x556a225cd830[Type#385]
  goto BB112
BB498   <- [492]
  val+            %498.0 = CallSafeBuiltin    wed   names(%482.1)    <str->
  val?^ | miss    %498.1 = LdVar              eR    as.character, e0.3
  lgl$#-          %498.2 = Identical                %498.1, <blt as.character>
  void                    Branch                   %498.2 -> BB500 (if true) | BB501 (if false)
BB499   <- [492]
  void                    Nop                !     
  val?^ | miss    %499.1 = %492.0
  dr              %499.2 = CallTarget@0x556a225cd830[Call#130]
  goto BB105
BB169   <- [520]
  val?^ | miss    %169.0 = LdVar              eR    paste, e0.3
  lgl$#-          %169.1 = Identical                %169.0, function(..., sep=" ", collapse=NULL, recycle0|...
  void                    Branch                   %169.1 -> BB522 (if true) | BB523 (if false)
BB114   <- [520]
  void                    Nop                !     
  goto BB115
BB112   <- [521, 523]
  val?^ | miss    %112.0 = Phi                      %521.1:BB521, %523.1:BB523
  val?^ | miss    %112.1 = %112.0
  dr              %112.2 = Phi                      %521.2:BB521, %523.2:BB523
  dr              %112.3 = %112.2
  fs              %112.4 = FrameState         R     0x556a23f8da70+6549: [%510.2], env=e0.3
  void                    Deopt              !v    %112.4, %112.3, %112.1   !
BB500   <- [498]
  val?^ | miss    %500.0 = LdVar              eR    excluded, e0.3
  val?            %500.1 = Force!<wrapped>    !v    %500.0, e0.3   <str$->
  val?            %500.2 = CallBuiltin        !v    as.character(%500.1) e0.3   <str$->
  lgl$#-          %500.3 = IsType                   %500.2 isA val?+
  void                    Branch                   %500.3 -> BB506 (if true) | BB507 (if false)
BB501   <- [498]
  fs              %501.0 = FrameState         R     0x556a23f8da70+6415: [%482.1, <blt is.na>], env=e0.3
  prom-           %501.1 = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p64, e0.3
  val?^           %501.2 = CastType                 up %501.1
  prom-           %501.3 = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p62, e0.3
  val?^           %501.4 = CastType                 up %501.3
  env             e501.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%501.2, x=%501.4, parent=R_BaseNamespace, context 0
  fs              %501.6 = FrameState         R     0x556a1bc1ed40+9: [], env=e501.5, next=%501.0
  fs              %501.7 = FrameState         R     0x556a21157860+32(pr): [%498.0], env=e0.3, next=%501.6
  void                    Deopt              !v    %501.7, CallTarget@0x556a225cd830[Call#131], %498.1   !
BB522   <- [169]
  prom-           %522.0 = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p57, e0.3
  dots-           %522.1 = DotsList           l     %522.0
  val?^ | miss    %522.2 = CastType                 up %522.0
  env             e522.3 = MkEnv              l     ...=%522.1, sep(miss)=" ", collapse="#", recycle0(miss)=false, parent=R_BaseNamespace, context 0
  val?            %522.4 = Force!             !vL   %522.2, e522.3
  val+            %522.5 = CallSafeBuiltin    wed   list(%522.4)    <vec->
  val+            %522.6 = CallSafeBuiltin    wed   paste(%522.5, " ", "#", false)    <str$->
  void                    StVar              lW    defaultLabel, %522.6, e0.3
  val?^ | miss    %522.8 = LdVar              eR    match, e0.3
  lgl$#-          %522.9 = Identical                %522.8, function(x, table, nomatch=NA, incomparables=N|...
  void                    Branch                   %522.9 -> BB532 (if true) | BB533 (if false)
BB523   <- [169]
  void                    Nop                !     
  val?^ | miss    %523.1 = %169.0
  dr              %523.2 = CallTarget@0x556a225cd830[Call#133]
  goto BB112
BB115   <- [114, 178, 564]
  val?^ | miss    %115.0 = LdVar              eR    length, e0.3
  lgl$#-          %115.1 = Identical                <blt length>, %115.0   <true>
  void                    Branch                   %115.1 -> BB526 (if true) | BB527 (if false)
BB506   <- [500]
  val?+           %506.0 = CastType           d     dn %500.2   <str$->
  val+            %506.1 = CallSafeBuiltin    wed   match(%498.0, %506.0, NA, nil)    <int->
  lgl$#-          %506.2 = IsType                   %506.1 isA int-
  void                    Branch                   %506.2 -> BB508 (if true) | BB509 (if false)
BB507   <- [500]
  fs              %507.0 = FrameState         R     0x556a23f8da70+6415: [%482.1, <blt is.na>], env=e0.3
  prom-           %507.1 = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p64, e0.3
  val?^           %507.2 = CastType                 up %507.1
  prom-           %507.3 = MkArg                    %498.0, .findInheritedMethods[0x556a2174b210]_p62 (!refl), e0.3
  val?~           %507.4 = CastType                 up %507.3
  env             e507.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%507.2, x=%507.4, parent=R_BaseNamespace, context 0
  fs              %507.6 = FrameState         R     0x556a1bc1ed40+23: [%498.0], env=e507.5, next=%507.0
  fs              %507.7 = FrameState         R     0x556a2157e280+32(pr): [%500.2], env=e0.3, next=%507.6
  void                    Deopt              !v    %507.7, Typecheck@0x556a1bc71cb0[Type#1], %500.2   !
BB532   <- [522]
  val?^ | miss    %532.0 = LdVar              eR    names, e0.3
  lgl$#-          %532.1 = Identical                %532.0, <blt names>
  void                    Branch                   %532.1 -> BB534 (if true) | BB535 (if false)
BB533   <- [522]
  void                    Nop                !     
  val?^ | miss    %533.1 = %522.8
  dr              %533.2 = CallTarget@0x556a225cd830[Call#135]
  goto BB170
BB526   <- [115]
  val?^ | miss    %526.0 = LdVar              eR    methods, e0.3
  lgl$#-          %526.1 = IsType                   %526.0 isA val?~+ | miss
  void                    Branch                   %526.1 -> BB528 (if true) | BB529 (if false)
BB527   <- [115]
  void                    Nop                !     
  lgl$#-          %527.1 = %115.1
  dr              %527.2 = DeadBranchReached@0x556a225cd830[Test#53]
  goto BB116
BB508   <- [506]
  int-            %508.0 = CastType           d     dn %506.1
  lgl-            %508.1 = CallSafeBuiltin    wed   is.na(%508.0)    <lgl->
  val?            %508.2 = Extract1_1D        wed   %482.1, %508.1, elided   <vec+>
  void                    StVar              lW    methods, %508.2, e0.3
  goto BB109
BB509   <- [506]
  fs              %509.0 = FrameState         R     0x556a23f8da70+6415: [%482.1, <blt is.na>], env=e0.3
  prom-           %509.1 = MkArg                    %506.0, .findInheritedMethods[0x556a2174b210]_p64 (!refl), e0.3
  val?~           %509.2 = CastType                 up %509.1
  prom-           %509.3 = MkArg                    %498.0, .findInheritedMethods[0x556a2174b210]_p62 (!refl), e0.3
  val?~           %509.4 = CastType                 up %509.3
  env             e509.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%509.2, x=%509.4, parent=R_BaseNamespace, context 0
  fs              %509.6 = FrameState         R     0x556a1bc1ed40+69: [%506.1], env=e509.5, next=%509.0
  void                    Deopt              !v    %509.6, Typecheck@0x556a225cd830[Type#380], %506.1   !
BB534   <- [532]
  val?^ | miss    %534.0 = LdVar              eR    methods, e0.3
  lgl$#-          %534.1 = IsType                   %534.0 isA val?~+ | miss
  void                    Branch                   %534.1 -> BB536 (if true) | BB537 (if false)
BB535   <- [532]
  void                    Nop                !     
  val?^ | miss    %535.1 = %532.0
  dr              %535.2 = CallTarget@0x556a225cd830[Call#136]
  goto BB170
BB170   <- [533, 535, 537]
  val?^ | miss    %170.0 = Phi                      %533.1:BB533, %535.1:BB535, %537.1:BB537
  val?^ | miss    %170.1 = %170.0
  dr              %170.2 = Phi                      %533.2:BB533, %535.2:BB535, %537.2:BB537
  dr              %170.3 = %170.2
  fs              %170.4 = FrameState         R     0x556a23f8da70+6636: [], env=e0.3
  void                    Deopt              !v    %170.4, %170.3, %170.1   !
BB528   <- [526]
  val?~+ | miss   %528.0 = CastType           d     dn %526.0
  val?+           %528.1 = Force!<value>            %528.0,    <vec+>
  (int|real)$-    %528.2 = CallSafeBuiltin    wed   length(%528.1)    <int$->
  lgl$#-          %528.3 = IsType                   %528.2 isA int$-
  void                    Branch                   %528.3 -> BB530 (if true) | BB531 (if false)
BB529   <- [526]
  void                    Nop                !     
  val?^ | miss    %529.1 = %526.0
  dr              %529.2 = Typecheck@0x556a225cd830[Type#405]
  goto BB116
BB116   <- [527, 529]
  val?^ | miss    %116.0 = Phi                      %527.1:BB527, %529.1:BB529
  val?^ | miss    %116.1 = %116.0
  dr              %116.2 = Phi                      %527.2:BB527, %529.2:BB529
  dr              %116.3 = %116.2
  fs              %116.4 = FrameState         R     0x556a23f8da70+6881: [], env=e0.3
  void                    Deopt              !v    %116.4, %116.3, %116.1   !
BB536   <- [534]
  val?~+ | miss   %536.0 = CastType           d     dn %534.0
  val?+           %536.1 = Force!<value>            %536.0,    <vec+>
  val+            %536.2 = CallSafeBuiltin    wed   names(%536.1)    <str->
  lgl$#-          %536.3 = IsType                   %522.6 isA val?-
  void                    Branch                   %536.3 -> BB542 (if true) | BB543 (if false)
BB537   <- [534]
  void                    Nop                !     
  val?^ | miss    %537.1 = %534.0
  dr              %537.2 = Typecheck@0x556a225cd830[Type#391]
  goto BB170
BB530   <- [528]
  int$-           %530.0 = CastType           d     dn %528.2
  lgl$-           %530.1 = Gt                 d     %530.0, 1L, elided   <lgl$->
  lgl$#-          %530.2 = CheckTrueFalse     e     %530.1
  void                    Branch                   %530.2 -> BB162 (if true) | BB120 (if false)
BB531   <- [528]
  fs              %531.0 = FrameState         R     0x556a23f8da70+6972: [%528.2], env=e0.3
  void                    Deopt              !v    %531.0, Typecheck@0x556a225cd830[Type#406], %528.2   !
BB542   <- [536]
  val-            %542.0 = CastType           d     dn %522.6   <str$->
  val+            %542.1 = CallSafeBuiltin    wed   match(%542.0, %536.2, 0L, nil)    <int$->
  lgl$#-          %542.2 = IsType                   %542.1 isA int$-
  void                    Branch                   %542.2 -> BB546 (if true) | BB547 (if false)
BB543   <- [536]
  fs              %543.0 = FrameState         R     0x556a23f8da70+6678: [], env=e0.3
  prom-           %543.1 = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p60, e0.3
  val?^           %543.2 = CastType                 up %543.1
  prom-           %543.3 = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p59 (!refl), e0.3
  val?^           %543.4 = CastType                 up %543.3
  env             e543.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch=0L, table=%543.2, x=%543.4, parent=R_BaseNamespace, context 0
  fs              %543.6 = FrameState         R     0x556a1bc1ed40+23: [%522.6], env=e543.5, next=%543.0
  fs              %543.7 = FrameState         R     0x556a1fffbc40+32(pr): [%536.2], env=e0.3, next=%543.6
  void                    Deopt              !v    %543.7, Typecheck@0x556a225cd830[Type#389], %522.6   !
BB162   <- [530]
  val?^ | miss    %162.0 = LdVar              eR    verbose, e0.3
  val?            %162.1 = Force!<wrapped>    !v    %162.0, e0.3   <lgl$->
  lgl$#-          %162.2 = CheckTrueFalse     we    %162.1
  void                    Branch                   %162.2 -> BB168 (if true) | BB163 (if false)
BB120   <- [530]
  void                    Nop                !     
  goto BB121
BB546   <- [542]
  int$-           %546.0 = CastType           d     dn %542.1
  void                    StVar              lW    i, %546.0, e0.3
  lgl$-           %546.2 = Gt                 d     %546.0, 0L, elided   <lgl$->
  lgl$#-          %546.3 = CheckTrueFalse     e     %546.2
  void                    Branch                   %546.3 -> BB179 (if true) | BB178 (if false)
BB547   <- [542]
  fs              %547.0 = FrameState         R     0x556a23f8da70+6678: [], env=e0.3
  prom-           %547.1 = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p59 (!refl), e0.3
  val?^           %547.2 = CastType                 up %547.1
  prom-           %547.3 = MkArg                    %536.2, .findInheritedMethods[0x556a2174b210]_p60 (!refl), e0.3
  val?~           %547.4 = CastType                 up %547.3
  env             e547.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch=0L, table=%547.4, x=%547.2, parent=R_BaseNamespace, context 0
  fs              %547.6 = FrameState         R     0x556a1bc1ed40+69: [%542.1], env=e547.5, next=%547.0
  void                    Deopt              !v    %547.6, Typecheck@0x556a225cd830[Type#393], %542.1   !
BB168   <- [162]
  (cls|spec|blt)  %168.0 = LdFun              !v    cat, e0.3
  fs              %168.1 = FrameState         R     0x556a23f8da70+7030: [%168.0], env=e0.3
  void                    Deopt              !v    %168.1, DeadCall@0x556a225cd830[Call#138], %168.0   !
BB163   <- [162]
  (cls|spec|blt)  %163.0 = LdFun              !v    .getBestMethods, <0x556a277001a0>, e0.3
  prom-           %163.1 = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p53, e0.3
  prom-           %163.2 = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p54, e0.3
  prom-           %163.3 = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p55, e0.3
  prom-           %163.4 = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p56, e0.3
  val?            %163.5 = NamedCall          !v    %163.0(%163.1, %163.2, %163.3, verbose=%163.4) e0.3   <int$->
  lgl$#-          %163.6 = IsType                   %163.5 isA int$-
  void                    Branch                   %163.6 -> BB538 (if true) | BB539 (if false)
BB121   <- [120, 556]
  val?^ | miss    %121.0 = LdVar              eR    simpleOnly, e0.3
  val?            %121.1 = Force!<wrapped>    !v    %121.0, e0.3   <lgl$->
  lgl$-           %121.2 = AsLogical          e     %121.1
  lgl$#-          %121.3 = Identical                %121.2, false
  void                    Branch                   %121.3 -> BB161 (if true) | BB124 (if false)
BB179   <- [546]
  lgl$#-          %179.0 = IsType                   %536.1 isA val+   <true>
  void                    Branch                   %179.0 -> BB562 (if true) | BB563 (if false)
BB178   <- [546]
  void                    Nop                !     
  goto BB115
BB538   <- [163]
  int$-           %538.0 = CastType           d     dn %163.5
  void                    StVar              lW    select, %538.0, e0.3
  val?^ | miss    %538.2 = LdVar              eR    length, e0.3
  lgl$#-          %538.3 = Identical                <blt length>, %538.2   <true>
  void                    Branch                   %538.3 -> BB548 (if true) | BB549 (if false)
BB539   <- [163]
  fs              %539.0 = FrameState         R     0x556a23f8da70+7131: [%163.5], env=e0.3
  void                    Deopt              !v    %539.0, Typecheck@0x556a225cd830[Type#415], %163.5   !
BB161   <- [121]
  void                    Nop                !     
  lgl$-           %161.1 = %121.2
  goto BB127
BB124   <- [121]
  val?^ | miss    %124.0 = LdVar              eR    length, e0.3
  lgl$#-          %124.1 = Identical                <blt length>, %124.0   <true>
  void                    Branch                   %124.1 -> BB540 (if true) | BB541 (if false)
BB562   <- [179]
  int$-           %562.0 = Minus              d     %546.0, elided
  val?            %562.1 = Extract1_1D        wed   %536.1, %562.0, elided   <vec+>
  void                    StVar              lW    methods, %562.1, e0.3
  val?^ | miss    %562.3 = LdVar              eR    fromGroup, e0.3
  lgl$#-          %562.4 = IsType                   %562.3 isA lgl-
  void                    Branch                   %562.4 -> BB564 (if true) | BB565 (if false)
BB563   <- [179]
  fs              %563.0 = FrameState         R     0x556a23f8da70+6692: [], env=e0.3
  void                    Deopt              !v    %563.0, DeadBranchReached@0x556a225cd830[Test#51], %179.0   !
BB548   <- [538]
  val?^ | miss    %548.0 = LdVar              eR    methods, e0.3
  lgl$#-          %548.1 = IsType                   %548.0 isA val?~+ | miss
  void                    Branch                   %548.1 -> BB554 (if true) | BB555 (if false)
BB549   <- [538]
  void                    Nop                !     
  lgl$#-          %549.1 = %538.3
  dr              %549.2 = DeadBranchReached@0x556a225cd830[Test#54]
  goto BB166
BB127   <- [161, 558]
  lgl$-           %127.0 = Phi                      %558.4:BB558, %161.1:BB161
  lgl$-           %127.1 = %127.0
  lgl$#-          %127.2 = CheckTrueFalse     e     %127.1
  void                    Branch                   %127.2 -> BB160 (if true) | BB130 (if false)
BB540   <- [124]
  val?^ | miss    %540.0 = LdVar              eR    methods, e0.3
  lgl$#-          %540.1 = IsType                   %540.0 isA val?~+ | miss
  void                    Branch                   %540.1 -> BB544 (if true) | BB545 (if false)
BB541   <- [124]
  void                    Nop                !     
  lgl$#-          %541.1 = %124.1
  dr              %541.2 = DeadBranchReached@0x556a225cd830[Test#57]
  goto BB122
BB564   <- [562]
  lgl-            %564.0 = CastType           d     dn %562.3
  lgl-            %564.1 = Extract1_1D        wed   %564.0, %562.0, elided   <lgl->
  void                    StVar              lW    fromGroup, %564.1, e0.3
  goto BB115
BB565   <- [562]
  fs              %565.0 = FrameState         R     0x556a23f8da70+6805: [], env=e0.3
  void                    Deopt              !v    %565.0, Typecheck@0x556a225cd830[Type#400], %562.3   !
BB554   <- [548]
  val?~+ | miss   %554.0 = CastType           d     dn %548.0
  val?+           %554.1 = Force!<value>            %554.0,    <vec+>
  lgl$#-          %554.2 = IsType                   %554.1 isA val+   <true>
  void                    Branch                   %554.2 -> BB556 (if true) | BB557 (if false)
BB555   <- [548]
  void                    Nop                !     
  val?^ | miss    %555.1 = %548.0
  dr              %555.2 = Typecheck@0x556a225cd830[Type#446]
  goto BB166
BB166   <- [549, 555, 557]
  val?^ | miss    %166.0 = Phi                      %549.1:BB549, %555.1:BB555, %557.1:BB557
  val?^ | miss    %166.1 = %166.0
  dr              %166.2 = Phi                      %549.2:BB549, %555.2:BB555, %557.2:BB557
  dr              %166.3 = %166.2
  fs              %166.4 = FrameState         R     0x556a23f8da70+7145: [], env=e0.3
  void                    Deopt              !v    %166.4, %166.3, %166.1   !
BB160   <- [127]
  (cls|spec|blt)  %160.0 = LdFun              !v    Recall, e0.3
  fs              %160.1 = FrameState         R     0x556a23f8da70+7866: [%160.0], env=e0.3
  void                    Deopt              !v    %160.1, DeadCall@0x556a225cd830[Call#154], %160.0   !
BB130   <- [127]
  val?^ | miss    %130.0 = LdVar              eR    length, e0.3
  lgl$#-          %130.1 = Identical                <blt length>, %130.0   <true>
  void                    Branch                   %130.1 -> BB550 (if true) | BB551 (if false)
BB544   <- [540]
  val?~+ | miss   %544.0 = CastType           d     dn %540.0
  val?+           %544.1 = Force!<value>            %544.0,    <vec$+>
  (int|real)$-    %544.2 = CallSafeBuiltin    wed   length(%544.1)    <int$->
  lgl$#-          %544.3 = IsType                   %544.2 isA int$-
  void                    Branch                   %544.3 -> BB558 (if true) | BB559 (if false)
BB545   <- [540]
  void                    Nop                !     
  val?^ | miss    %545.1 = %540.0
  dr              %545.2 = Typecheck@0x556a225cd830[Type#452]
  goto BB122
BB122   <- [541, 545]
  val?^ | miss    %122.0 = Phi                      %541.1:BB541, %545.1:BB545
  val?^ | miss    %122.1 = %122.0
  dr              %122.2 = Phi                      %541.2:BB541, %545.2:BB545
  dr              %122.3 = %122.2
  fs              %122.4 = FrameState         R     0x556a23f8da70+7728: [%121.1], env=e0.3
  void                    Deopt              !v    %122.4, %122.3, %122.1   !
BB556   <- [554]
  val?            %556.0 = Extract1_1D        wed   %554.1, %538.0, elided   <vec$+>
  void                    StVar              lW    methods, %556.0, e0.3
  goto BB121
BB557   <- [554]
  void                    Nop                !     
  lgl$#-          %557.1 = %554.2
  dr              %557.2 = DeadBranchReached@0x556a225cd830[Test#56]
  goto BB166
BB550   <- [130]
  val?^ | miss    %550.0 = LdVar              eR    methods, e0.3
  lgl$#-          %550.1 = IsType                   %550.0 isA val?~+ | miss
  void                    Branch                   %550.1 -> BB552 (if true) | BB553 (if false)
BB551   <- [130]
  void                    Nop                !     
  lgl$#-          %551.1 = %130.1
  dr              %551.2 = DeadBranchReached@0x556a225cd830[Test#59]
  goto BB128
BB558   <- [544]
  int$-           %558.0 = CastType           d     dn %544.2
  lgl$-           %558.1 = Eq                 d     %558.0, 0L, elided   <lgl$->
  lgl$-           %558.2 = AsLogical                %558.1
  lgl$-           %558.3 = LAnd                     %121.2, %558.2
  lgl$-           %558.4 = %558.3
  goto BB127
BB559   <- [544]
  fs              %559.0 = FrameState         R     0x556a23f8da70+7831: [%121.2, %544.2], env=e0.3
  void                    Deopt              !v    %559.0, Typecheck@0x556a225cd830[Type#453], %544.2   !
BB552   <- [550]
  val?~+ | miss   %552.0 = CastType           d     dn %550.0
  val?+           %552.1 = Force!<value>            %552.0,    <vec$+>
  (int|real)$-    %552.2 = CallSafeBuiltin    wed   length(%552.1)    <int$->
  lgl$#-          %552.3 = IsType                   %552.2 isA int$-
  void                    Branch                   %552.3 -> BB560 (if true) | BB561 (if false)
BB553   <- [550]
  void                    Nop                !     
  val?^ | miss    %553.1 = %550.0
  dr              %553.2 = Typecheck@0x556a225cd830[Type#474]
  goto BB128
BB128   <- [551, 553]
  val?^ | miss    %128.0 = Phi                      %551.1:BB551, %553.1:BB553
  val?^ | miss    %128.1 = %128.0
  dr              %128.2 = Phi                      %551.2:BB551, %553.2:BB553
  dr              %128.3 = %128.2
  fs              %128.4 = FrameState         R     0x556a23f8da70+7850: [%127.1], env=e0.3
  void                    Deopt              !v    %128.4, %128.3, %128.1   !
BB560   <- [552]
  int$-           %560.0 = CastType           d     dn %552.2
  lgl$#-          %560.1 = CheckTrueFalse     e     %560.0
  void                    Branch                   %560.1 -> BB138 (if true) | BB133 (if false)
BB561   <- [552]
  void                    Nop                !     
  (int|real)$-    %561.1 = %552.2
  dr              %561.2 = Typecheck@0x556a225cd830[Type#475]
  goto BB131
BB138   <- [560]
  val?^ | miss    %138.0 = LdVar              eR    .sigLabel, e0.3
  lgl$#-          %138.1 = Identical                %138.0, function(sig) <(rir::DispatchTable*)0x556a1f73|...
  void                    Branch                   %138.1 -> BB566 (if true) | BB567 (if false)
BB133   <- [560]
  void                    Nop                !     
  goto BB134
BB131   <- [561, 567, 569]
  val?^ | miss    %131.0 = Phi                      %561.1:BB561, %567.1:BB567, %569.1:BB569
  val?^ | miss    %131.1 = %131.0
  dr              %131.2 = Phi                      %561.2:BB561, %567.2:BB567, %569.2:BB569
  dr              %131.3 = %131.2
  fs              %131.4 = FrameState         R     0x556a23f8da70+8203: [%552.2], env=e0.3
  void                    Deopt              !v    %131.4, %131.3, %131.1   !
BB566   <- [138]
  prom-           %566.0 = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p32, e0.3
  val?^           %566.1 = CastType                 up %566.0
  val?^ | miss    %566.2 = LdVar              eR    paste, <env 0x556a1ba11378>
  lgl$#-          %566.3 = Identical                %566.2, function(..., sep=" ", collapse=NULL, recycle0|...
  void                    Branch                   %566.3 -> BB568 (if true) | BB569 (if false)
BB567   <- [138]
  void                    Nop                !     
  val?^ | miss    %567.1 = %138.0
  dr              %567.2 = CallTarget@0x556a225cd830[Call#161]
  goto BB131
BB134   <- [133, 147, 582]
  val?^ | miss    %134.0 = LdVar              eR    methods, e0.3
  lgl$#-          %134.1 = IsType                   %134.0 isA val?~+ | miss
  void                    Branch                   %134.1 -> BB572 (if true) | BB573 (if false)
BB568   <- [566]
  env             e568.0 = MkEnv              l     sig=%566.1, parent=<env 0x556a1ba11378>, context 0
  prom-           %568.1 = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p122, e568.0
  dots-           %568.2 = DotsList           l     %568.1
  val?^ | miss    %568.3 = CastType                 up %568.1
  env             e568.4 = MkEnv              l     ...=%568.2, sep(miss)=" ", collapse="#", recycle0(miss)=false, parent=R_BaseNamespace, context -1
  val?            %568.5 = Force!             !vL   %568.3, e568.4
  val+            %568.6 = CallSafeBuiltin    wed   list(%568.5)    <vec->
  val+            %568.7 = CallSafeBuiltin    wed   paste(%568.6, " ", "#", false)    <str$->
  void                    StVar              lW    tlabel, %568.7, e0.3
  val?^ | miss    %568.9 = LdVar              eR    methods, e0.3
  lgl$#-          %568.10 = IsType                   %568.9 isA val?~+ | miss
  void                    Branch                   %568.10 -> BB570 (if true) | BB571 (if false)
BB569   <- [566]
  void                    Nop                !     
  val?^ | miss    %569.1 = %566.2
  dr              %569.2 = CallTarget@0x556a1e4e2af8[Call#0]
  goto BB131
BB572   <- [134]
  val?~+ | miss   %572.0 = CastType           d     dn %134.0
  void                    Visible            v     
  val?+           %572.2 = Force!<value>            %572.0,    <vec$+>
  val?+           %572.3 = %572.2
  goto BB137
BB573   <- [134]
  fs              %573.0 = FrameState         R     0x556a23f8da70+8774: [], env=e0.3
  void                    Deopt              !v    %573.0, Typecheck@0x556a225cd830[Type#509], %134.0   !
BB570   <- [568]
  val?~+ | miss   %570.0 = CastType           d     dn %568.9
  val?+           %570.1 = Force!<value>            %570.0,    <vec$+>
  lgl$#-          %570.2 = IsType                   %570.1 isA val+   <true>
  void                    Branch                   %570.2 -> BB574 (if true) | BB575 (if false)
BB571   <- [568]
  void                    Nop                !     
  val?^ | miss    %571.1 = %568.9
  dr              %571.2 = Typecheck@0x556a225cd830[Type#478]
  goto BB139
BB574   <- [570]
  val?            %574.0 = Extract2_1D        wed   %570.1, 1L, elided   <cls>
  void                    StVar              lW    m, %574.0, e0.3
  val?^ | miss    %574.2 = LdVar              eR    is, e0.3
  lgl$#-          %574.3 = Identical                %574.2, function(object, class2) <(rir::DispatchTable*|...
  void                    Branch                   %574.3 -> BB576 (if true) | BB577 (if false)
BB575   <- [570]
  void                    Nop                !     
  lgl$#-          %575.1 = %570.2
  dr              %575.2 = DeadBranchReached@0x556a225cd830[Test#60]
  goto BB139
BB139   <- [571, 575]
  val?^ | miss    %139.0 = Phi                      %571.1:BB571, %575.1:BB575
  val?^ | miss    %139.1 = %139.0
  dr              %139.2 = Phi                      %571.2:BB571, %575.2:BB575
  dr              %139.3 = %139.2
  fs              %139.4 = FrameState         R     0x556a23f8da70+8265: [], env=e0.3
  void                    Deopt              !v    %139.4, %139.3, %139.1   !
BB576   <- [574]
  prom-           %576.0 = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p33 (!refl), e0.3
  val?            %576.1 = Call               !v    function(object, class2) <(rir::DispatchTable*|...(%576.0, "MethodDefinition") e0.3   <lgl$->
  lgl$#-          %576.2 = IsType                   %576.1 isA lgl$-
  void                    Branch                   %576.2 -> BB578 (if true) | BB579 (if false)
BB577   <- [574]
  fs              %577.0 = FrameState         R     0x556a23f8da70+8332: [], env=e0.3
  void                    Deopt              !v    %577.0, CallTarget@0x556a225cd830[Call#162], %574.2   !
BB578   <- [576]
  lgl$-           %578.0 = CastType           d     dn %576.1
  lgl$#-          %578.1 = CheckTrueFalse     e     %578.0
  void                    Branch                   %578.1 -> BB153 (if true) | BB145 (if false)
BB579   <- [576]
  fs              %579.0 = FrameState         R     0x556a23f8da70+8369: [%576.1], env=e0.3
  void                    Deopt              !v    %579.0, Typecheck@0x556a225cd830[Type#481], %576.1   !
BB153   <- [578]
  (cls|spec|blt)  %153.0 = LdFun              !v    <-, <0x556a1b3feda8>, e0.3
  prom-           %153.1 = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p37, e0.3
  prom-           %153.2 = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p40, e0.3
  val?            %153.3 = Call               !v    %153.0(%153.1, %153.2) e0.3
  val?^ | miss    %153.4 = LdVar              eR    .inheritedArgsExpression, e0.3
  lgl$#-          %153.5 = Identical                %153.4, function(target, defined, body) <(rir::Dispatc|...
  void                    Branch                   %153.5 -> BB580 (if true) | BB581 (if false)
BB145   <- [578]
  void                    Nop                !     
  goto BB146
BB580   <- [153]
  prom-           %580.0 = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p45, e0.3
  prom-           %580.1 = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p48, e0.3
  prom-           %580.2 = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p51, e0.3
  val?            %580.3 = StaticCall         !v    .inheritedArgsExpression[0x556a1b8bf560](%580.0, %580.1, %580.2) e0.3   <nil->
  lgl$-           %580.4 = Is                       %580.3, NULL
  void                    StVar              lW    coerce, %580.3, e0.3
  val             %580.6 = ChkMissing         e     %580.3
  lgl$-           %580.7 = Not                d     %580.4, elided
  lgl$#-          %580.8 = CheckTrueFalse     e     %580.7
  void                    Branch                   %580.8 -> BB159 (if true) | BB156 (if false)
BB581   <- [153]
  fs              %581.0 = FrameState         R     0x556a23f8da70+8422: [%153.3], env=e0.3
  void                    Deopt              !v    %581.0, CallTarget@0x556a225cd830[Call#167], %153.4   !
BB146   <- [145, 584]
  val?^ | miss    %146.0 = LdVar              eR    doCache, e0.3
  val?            %146.1 = Force!<lazy>       !v    %146.0, e0.3   <lgl$->
  lgl$#-          %146.2 = CheckTrueFalse     we    %146.1
  void                    Branch                   %146.2 -> BB148 (if true) | BB147 (if false)
BB159   <- [580]
  (cls|spec|blt)  %159.0 = LdFun              !v    body<-, e0.3
  fs              %159.1 = FrameState         R     0x556a23f8da70+8529: [%580.3, %159.0], env=e0.3
  void                    Deopt              !v    %159.1, DeadCall@0x556a225cd830[Call#171], %159.0   !
BB156   <- [580]
  val?^ | miss    %156.0 = LdVar              eR    m, e0.3
  val?            %156.1 = Force!<value>      !v    %156.0, e0.3   <cls>
  val?^ | miss    %156.2 = LdVar              eR    methods !upd, e0.3
  lgl$#-          %156.3 = IsType                   %156.2 isA val?~+ | miss
  void                    Branch                   %156.3 -> BB584 (if true) | BB585 (if false)
BB148   <- [146]
  val?^ | miss    %148.0 = LdVar              eR    verbose, e0.3
  val?            %148.1 = Force!<wrapped>    !v    %148.0, e0.3   <lgl$->
  lgl$#-          %148.2 = CheckTrueFalse     we    %148.1
  void                    Branch                   %148.2 -> BB152 (if true) | BB151 (if false)
BB147   <- [146]
  void                    Nop                !     
  goto BB134
BB584   <- [156]
  val?~+ | miss   %584.0 = CastType           d     dn %156.2
  val?+           %584.1 = Force!<value>            %584.0,    <vec$+>
  val?            %584.2 = Subassign2_1D      !v    %156.1, %584.1, 1L, e0.3
  void                    StVar              lW    methods, %584.2, e0.3
  goto BB146
BB585   <- [156]
  fs              %585.0 = FrameState         R     0x556a23f8da70+8601: [%156.1], env=e0.3
  void                    Deopt              !v    %585.0, Typecheck@0x556a225cd830[Type#503], %156.2   !
BB152   <- [148]
  (cls|spec|blt)  %152.0 = LdFun              !v    cat, e0.3
  fs              %152.1 = FrameState         R     0x556a23f8da70+8691: [%152.0], env=e0.3
  void                    Deopt              !v    %152.1, DeadCall@0x556a225cd830[Call#172], %152.0   !
BB151   <- [148]
  val?^ | miss    %151.0 = LdVar              eR    assign, e0.3
  lgl$#-          %151.1 = Identical                %151.0, function(x, value, pos=-(1), envir=as.environm|...
  void                    Branch                   %151.1 -> BB582 (if true) | BB583 (if false)
BB582   <- [151]
  prom-           %582.0 = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p34, e0.3
  prom-           %582.1 = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p35, e0.3
  prom-           %582.2 = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p36, e0.3
  val?            %582.3 = StaticCall         !v    assign[0x556a27394a90](%582.0, %582.1, missingArg, %582.2) { 0 1 3n } e0.3
  goto BB134
BB583   <- [151]
  fs              %583.0 = FrameState         R     0x556a23f8da70+8676: [%148.2], env=e0.3
  void                    Deopt              !v    %583.0, CallTarget@0x556a225cd830[Call#173], %151.0   !
Prom 0:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     get, <0x556a1c32fe78>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p1, e0.0
  val?            %0.3  = NamedCall          !     %0.1(".MTable", envir=%0.2) e0.0   <env->
  void                    Return             l     %0.3
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     environment, <0x556a1b7b0b68>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p2, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <env->
  void                    Return             l     %0.3
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fdef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 4:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     .simpleInheritanceGeneric, <0x556a20d2bf08>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p5, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <lgl$->
  void                    Return             l     %0.3
Prom 5:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fdef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 7:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     is.environment, <0x556a1b419e18>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p8, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <lgl$->
  void                    Return             l     %0.3
Prom 8:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    mtable, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <(nil|env)->
  void                    Return             l     %0.3
Prom 9:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     environment, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p10, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 10:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fdef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 11:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     .allowPrimitiveMethods, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p12, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 12:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    primMethods, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 13:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fdef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 14:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    group, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 15:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    cl1, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$+>
  void                    Return             l     %0.3
Prom 16:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 20:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    labels, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 21:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     .fillSignatures, <0x556a20d2fae0>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p22, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p23, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <str->
  void                    Return             l     %0.4
Prom 22:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    allMethods, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 23:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     length, <0x556a1b40aa90>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p24, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <int$->
  void                    Return             l     %0.3
Prom 24:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    classes, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <(str|vec)>
  void                    Return             l     %0.3
Prom 25:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    allMethods, e0.0
  val?            %0.2  = Force<value>       !v    %0.1, e0.0   <str->
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <true>
  void                    Branch                   %0.3 -> BB2 (if true) | BB7 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    m, e0.0
  val?            %2.1  = Force<value>       !v    %2.0, e0.0   <int->
  lgl$#-          %2.2  = IsType                   %2.1 isA val+   <true>
  void                    Branch                   %2.2 -> BB6 (if true) | BB3 (if false)
BB7   <- [0]
  prom-           %7.0  = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p27, e0.0
  prom-           %7.1  = %7.0
  goto BB5
BB6   <- [2]
  val?^ | miss    %6.0  = LdVar              eR    found, e0.0
  val?            %6.1  = Force<value>       !v    %6.0, e0.0   <lgl->
  val?            %6.2  = %6.1
  goto BB4
BB3   <- [2]
  prom-           %3.0  = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p26, e0.0
  prom-           %3.1  = %3.0
  goto BB4
BB5   <- [7, 4]
  val?            %5.0  = Phi                      %4.3:BB4, %7.1:BB7
  val?            %5.1  = %5.0
  val?            %5.2  = Extract1_1D        !v    %0.2, %5.1, e0.0   <str->
  void                    Visible            v     
  void                    Return             l     %5.2
BB4   <- [3, 6]
  val?            %4.0  = Phi                      %6.2:BB6, %3.1:BB3
  val?            %4.1  = %4.0
  val?            %4.2  = Extract1_1D        !v    %2.1, %4.1, e0.0   <int->
  val?            %4.3  = %4.2
  goto BB5
Prom 26:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    found, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 27:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    m, e0.0
  val?            %0.2  = Force              !v    %0.1, e0.0   <val?_>
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <@?>
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    found, e0.0
  val?            %2.1  = Force              !v    %2.0, e0.0   <val?_>
  val?            %2.2  = %2.1
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p28, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.2:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract1_1D        !v    %0.2, %3.1, e0.0   <val?_>
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 28:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    found, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 29:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    table, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 30:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     length, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p31, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 31:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    methods, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 32:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    classes, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <(str|vec)>
  void                    Return             l     %0.3
Prom 33:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    m, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 34:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    tlabel, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 35:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    m, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 36:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    mtable, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 37:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p38, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p39, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 38:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    m, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 39:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    target, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 40:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     .newSignature, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p41, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p42, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 41:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    classes, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 42:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p43, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p44, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 43:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fdef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 44:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    signature, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 45:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, <0x556a1b409bd8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p46, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p47, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <str>
  void                    Return             l     %0.4
Prom 46:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    m, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 47:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    target, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 48:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, <0x556a1b409bd8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p49, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p50, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <str>
  void                    Return             l     %0.4
Prom 49:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    m, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 50:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    defined, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 51:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     body, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p52, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 52:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    m, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 53:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    methods, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 54:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    supersList, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <vec->
  void                    Return             l     %0.3
Prom 55:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fromGroup, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 56:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    verbose, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <lgl$->
  void                    Return             l     %0.3
Prom 57:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     rep.int, <0x556a1d33f9f0>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p58, e0.0
  val?            %0.3  = Call               !     %0.1("ANY", %0.2) e0.0   <str->
  void                    Return             l     %0.3
Prom 58:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    nargs, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <int$->
  void                    Return             l     %0.3
Prom 59:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    defaultLabel, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 60:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     names, <0x556a1b40a470>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p61, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <str->
  void                    Return             l     %0.3
Prom 61:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    methods, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 62:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     names, <0x556a1b40a470>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p63, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <str->
  void                    Return             l     %0.3
Prom 63:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    methods, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 64:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     as.character, <0x556a1b417040>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p65, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <str$->
  void                    Return             l     %0.3
Prom 65:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    excluded, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 66:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    labels, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 67:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    groupGenerics, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <vec->
  void                    Return             l     %0.3
Prom 68:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    found, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <lgl->
  void                    Return             l     %0.3
Prom 69:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     length, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p70, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 70:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    methods, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 71:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     length, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p72, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 72:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    groupmethods, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 73:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    classes, e0.0
  val?            %0.2  = Force<wrapped>     !v    %0.1, e0.0   <(str|vec)+>
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <true>
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    i, e0.0
  val?            %2.1  = Force<value>       !v    %2.0, e0.0   <int$->
  val?            %2.2  = %2.1
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p74, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.2:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract2_1D        !v    %0.2, %3.1, e0.0   <str$+>
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 74:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    i, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 75:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 76:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    cc, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 77:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    className, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 78:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    labels, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 79:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    allLabels, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str+>
  void                    Return             l     %0.3
Prom 80:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    classes, e0.0
  val?            %0.2  = Force<wrapped>     !v    %0.1, e0.0   <vec->
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <true>
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    i, e0.0
  val?            %2.1  = Force<value>       !v    %2.0, e0.0   <int$->
  val?            %2.2  = %2.1
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p81, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.2:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract2_1D        !v    %0.2, %3.1, e0.0   <str$->
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 81:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    i, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 82:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 83:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    cc, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 84:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    className, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 85:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, <0x556a1b409bd8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p86, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p87, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <vec+>
  void                    Return             l     %0.4
Prom 86:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    cc, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 87:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    contains, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 88:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    simpleOnly, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <lgl$->
  void                    Return             l     %0.3
Prom 89:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    labels, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 90:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    allLabels, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 91:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    i, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 92:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    cc, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 93:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    className, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 94:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, <0x556a1b409bd8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p95, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p96, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <vec+>
  void                    Return             l     %0.4
Prom 95:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    cc, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 96:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    contains, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 97:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    simpleOnly, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <lgl$->
  void                    Return             l     %0.3
Prom 98:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, <0x556a1b409bd8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p99, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p100, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <vec+>
  void                    Return             l     %0.4
Prom 99:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    def, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 100:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    contains, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 101:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    simpleOnly, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <lgl$->
  void                    Return             l     %0.3
Prom 102:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    classes, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <vec->
  void                    Return             l     %0.3
Prom 103:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    label, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 104:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    groupGenerics, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <vec->
  void                    Return             l     %0.3
Prom 105:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    label, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 106:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    direct, e0.0
  val?            %0.2  = Force<value>       !v    %0.1, e0.0   <vec$+>
  val?            %0.3  = Extract2_1D        !v    %0.2, 1L, e0.0   <cls>
  void                    Visible            v     
  void                    Return             l     %0.3
Prom 107:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    mtable, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 108:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     list, <0x556a1b41e5c0>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p109, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <vec$->
  void                    Return             l     %0.3
Prom 109:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fdef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 110:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    contains, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 111:
BB0
  env             e0.0  = LdFunctionEnv            
  cls             %0.1  = MkCls                    .eligibleSuperClasses@Prom(1)16, e0.0
  cls             %0.2  = MkCls                    .eligibleSuperClasses@Prom(1)37, e0.0
  val?^ | miss    %0.3  = LdVar              eR    simpleOnly, e0.0
  void                    Visible            v     
  val?            %0.5  = Force<lazy>        !     %0.3, e0.0   <lgl$->
  lgl$#-          %0.6  = CheckTrueFalse     we    %0.5
  void                    Branch                   %0.6 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  void                    Nop                !     
  cls             %2.1  = %0.2
  goto BB3
BB4   <- [0]
  void                    Nop                !     
  cls             %4.1  = %0.1
  goto BB3
BB3   <- [4, 2]
  cls             %3.0  = Phi                      %4.1:BB4, %2.1:BB2
  cls             %3.1  = %3.0
  void                    Return             l     %3.1
Prom 122:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    sig, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <(str|vec)>
  void                    Return             l     %0.3
Prom 126:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    sig, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <(str|vec)>
  void                    Return             l     %0.3
Prom 127:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     strsplit, <0x556a1b754588>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p128, e0.0
  val?            %0.3  = NamedCall          !     %0.1(%0.2, "#", fixed=true) e0.0   <vec->
  void                    Return             l     %0.3
Prom 128:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    sigs, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 129:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    n, e0.0
  val?            %0.2  = Force<wrapped>     !v    %0.1, e0.0   <int$->
  val?^ | miss    %0.3  = LdVar              eR    siglens, e0.0
  val?            %0.4  = Force<value>       !v    %0.3, e0.0   <int->
  lgl$#-          %0.5  = IsType                   %0.4 isA val+   <true>
  void                    Branch                   %0.5 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    short, e0.0
  val?            %2.1  = Force<value>       !v    %2.0, e0.0   <lgl->
  val?            %2.2  = %2.1
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p130, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.2:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract1_1D        !v    %0.4, %3.1, e0.0   <int->
  void                    Visible            v     
  val?            %3.4  = Sub                !     %0.2, %3.2, e0.0   <int->
  void                    Return             l     %3.4
Prom 130:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    short, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 131:
BB0
  env             e0.0  = LdFunctionEnv            
  cls             %0.1  = MkCls                    unknown--fromConstant@Prom(4)0, e0.0
  void                    Return             l     %0.1
Prom 132:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     character, <0x556a1bba37e0>, e0.0
  val?            %0.2  = Call               !     %0.1(1L) e0.0   <str$->
  void                    Return             l     %0.2
Prom 133:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    sigs, e0.0
  val?            %0.2  = Force<wrapped>     !v    %0.1, e0.0   <str->
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <true>
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    short, e0.0
  val?            %2.1  = Force<value>       !v    %2.0, e0.0   <lgl->
  val?            %2.2  = %2.1
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, .findInheritedMethods[0x556a2174b210]_p134, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.2:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract1_1D        !v    %0.2, %3.1, e0.0   <str->
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 134:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    short, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 135:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    suffix, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str->
  void                    Return             l     %0.3

│ .findInheritedMethods[0x556a2174b210]                                        │
└──────────────────────────────────────────────────────────────────────────────┘
