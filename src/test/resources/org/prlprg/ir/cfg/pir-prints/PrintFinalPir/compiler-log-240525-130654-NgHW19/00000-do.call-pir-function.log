
┌──────────────────────────────────────────────────────────────────────────────┐
│ do.call[0x56096bfef8f0]                                                      │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;Eager2,NonRefl2,!Obj2 miss: 1        │
│ Properties:  ForceOrd: 1                                                     │
├────── Final PIR Version
do.call[0x56096bfef8f0]
BB0
  val?~+          %0.0  = LdArg                    2
  val?^           %0.1  = LdArg                    1
  val?^           %0.2  = LdArg                    0
  env             e0.3  = MkEnv              l     what=%0.2, args=%0.1, quote=%0.0, envir(miss)=missingArg, parent=R_BaseNamespace, context 1
  prom-           %0.4  = MkArg                    unboundValue, do.call[0x56096bfef8f0]_p0, e0.3
  val?^ | miss    %0.5  = CastType                 up %0.4
  void                    StArg              lW    envir, %0.5, e0.3
  val?            %0.7  = Force!<lazy>       !v    %0.1, e0.3   <vec+>
  lgl$-           %0.8  = Is                       %0.7, list
  lgl$#-          %0.9  = IsType                   %0.7 isA val?+
  void                    Branch                   %0.9 -> BB23 (if true) | BB24 (if false)
BB23   <- [0]
  lgl$-           %23.0 = Not                d     %0.8, elided
  lgl$#-          %23.1 = CheckTrueFalse     e     %23.0
  void                    Branch                   %23.1 -> BB21 (if true) | BB3 (if false)
BB24   <- [0]
  fs              %24.0 = FrameState         R     0x56096c0675b0+9: [%0.7], env=e0.3
  void                    Deopt              !v    %24.0, Typecheck@0x56096c01c600[Type#1], %0.7   !
BB21   <- [23]
  (cls|spec|blt)  %21.0 = LdFun              !v    stop, e0.3
  fs              %21.1 = FrameState         R     0x56096c0675b0+36: [%21.0], env=e0.3
  void                    Deopt              !v    %21.1, DeadCall@0x56096c01c600[Call#1], %21.0   !
BB3   <- [23]
  val?^ | miss    %3.0  = LdVar              eR    quote, e0.3
  val?            %3.1  = Force!<value>      !v    %3.0, e0.3   <lgl$->
  lgl$#-          %3.2  = CheckTrueFalse     we    %3.1
  void                    Branch                   %3.2 -> BB8 (if true) | BB6 (if false)
BB8   <- [3]
  val?^ | miss    %8.0  = LdVar              eR    lapply, e0.3
  lgl$#-          %8.1  = Identical                %8.0, function(X, FUN, ...) <(rir::DispatchTable*)0x|...
  void                    Branch                   %8.1 -> BB25 (if true) | BB26 (if false)
BB6   <- [3]
  void                    Nop                !     
  goto BB7
BB25   <- [8]
  prom-           %25.0 = MkArg                    unboundValue, do.call[0x56096bfef8f0]_p1, e0.3
  prom-           %25.1 = MkArg                    unboundValue, do.call[0x56096bfef8f0]_p2, e0.3
  ct              %25.2 = PushContext        lCL   %25.0, %25.1, lapply(args, enquote), function(X, FUN, ...) <(rir::DispatchTable*)0x|..., e0.3
  val?^           %25.3 = CastType                 up %25.1
  val?^           %25.4 = CastType                 up %25.0
  env             e25.5 = MkEnv              l     X=%25.4, FUN=%25.3, ...(miss)=missingArg, parent=R_BaseNamespace, context 1
  prom-           %25.6 = MkArg                    unboundValue, do.call[0x56096bfef8f0]_p3, e25.5
  val?            %25.7 = StaticCall         !v    match.fun[0x56096c0014c0](%25.6) e25.5   <cls->
  void                    StVar              lW    FUN, %25.7, e25.5
  val?^ | miss    %25.9 = LdVar              eR    is.vector, e25.5
  lgl$#-          %25.10 = Identical                %25.9, function(x, mode="any") <(rir::DispatchTable*)|...
  void                    Branch                   %25.10 -> BB27 (if true) | BB28 (if false)
BB26   <- [8]
  fs              %26.0 = FrameState         R     0x56096c0675b0+79: [%3.2], env=e0.3
  void                    Deopt              !v    %26.0, CallTarget@0x56096c01c600[Call#2], %8.0   !
BB7   <- [6, 18]
  val?^ | miss    %7.0  = LdVar              eR    what, e0.3
  val?            %7.1  = Force!<lazy>       !v    %7.0, e0.3   <cls->
  val?^ | miss    %7.2  = LdVar              eR    args, e0.3
  val?            %7.3  = Force!<value>      !v    %7.2, e0.3   <vec+>
  val?^ | miss    %7.4  = LdVar              eR    envir, e0.3
  void                    Visible            v     
  val?            %7.6  = Force!<lazy>       !     %7.4, e0.3   <env->
  val?            %7.7  = CallBuiltin        !     do.call(%7.1, %7.3, %7.6) e0.3
  void                    Return             l     %7.7
BB27   <- [25]
  val?^ | miss    %27.0 = LdVar              eR    X, e25.5
  val?            %27.1 = Force!<lazy>       !v    %27.0, e25.5   <(str|vec)+>
  lgl$#-          %27.2 = CallSafeBuiltin    wed   is.vector(%27.1, "any")    <lgl$->
  lgl$#-          %27.3 = Not                d     %27.2, elided
  void                    Branch                   %27.2 -> BB20 (if true) | BB13 (if false)
BB28   <- [25]
  fs              %28.0 = FrameState         R     0x56096c0675b0+126: [], env=e0.3
  fs              %28.1 = FrameState         R     0x56096c060de0+46: [], env=e25.5, next=%28.0
  void                    Deopt              !v    %28.1, CallTarget@0x56096c01e520[Call#1], %25.9   !
BB20   <- [27]
  val?^ | miss    %20.0 = LdVar              eR    is.object, e25.5
  lgl$#-          %20.1 = Identical                <blt is.object>, %20.0   <true>
  void                    Branch                   %20.1 -> BB29 (if true) | BB30 (if false)
BB13   <- [27]
  void                    Nop                !     
  lgl$#-          %13.1 = %27.3
  goto BB14
BB29   <- [20]
  val?^ | miss    %29.0 = LdVar              eR    X, e25.5
  val?            %29.1 = Force!<wrapped>    !v    %29.0, e25.5   <(str|vec)+>
  lgl$#-          %29.2 = CallSafeBuiltin    wed   is.object(%29.1)    <lgl$->
  lgl$-           %29.3 = LOr                      %27.3, %29.2
  lgl$-           %29.4 = %29.3
  goto BB14
BB30   <- [20]
  fs              %30.0 = FrameState         R     0x56096c0675b0+126: [], env=e0.3
  fs              %30.1 = FrameState         R     0x56096c060de0+78: [], env=e25.5, next=%30.0
  prom-           %30.2 = MkArg                    %27.1, do.call[0x56096bfef8f0]_p4 (!refl), e25.5
  val?~           %30.3 = CastType                 up %30.2
  env             e30.4 = (MkEnv)            l     mode(miss)="any", x=%30.3, parent=R_BaseNamespace, context 0
  fs              %30.5 = FrameState         R     0x56096c018880+41: [%27.2], env=e30.4, next=%30.1
  void                    Deopt              !v    %30.5, DeadBranchReached@0x56096c01e520[Test#0], %20.1   !
BB14   <- [13, 29]
  lgl$-           %14.0 = Phi                      %29.4:BB29, %13.1:BB13
  lgl$-           %14.1 = %14.0
  lgl$#-          %14.2 = CheckTrueFalse     e     %14.1
  void                    Branch                   %14.2 -> BB19 (if true) | BB15 (if false)
BB19   <- [14]
  fs              %19.0 = FrameState         R     0x56096c0675b0+126: [], env=e0.3
  (cls|spec|blt)  %19.1 = LdFun              !v    as.list, e25.5
  fs              %19.2 = FrameState         R     0x56096c060de0+205: [%19.1], env=e25.5, next=%19.0
  void                    Deopt              !v    %19.2, DeadCall@0x56096c01e520[Call#3], %19.1   !
BB15   <- [14]
  val?^ | miss    %15.0 = LdVar              eR    X, e25.5
  val?            %15.1 = Force!<wrapped>    !v    %15.0, e25.5   <(str|vec)+>
  (nil|str)-      %15.2 = Names                    %15.1
  int$-           %15.3 = Length                   %15.1
  vec-            %15.4 = CallSafeBuiltin    wed   vector("list", %15.3) 
  val+            %15.5 = SetNames           e     %15.4, %15.2
  int$#-          %15.6 = 0L
  val+            %15.7 = %15.5
  goto BB16
BB16   <- [15, 17]
  int$-           %16.0 = Phi                      %15.6:BB15, %17.7:BB17
  int$-           %16.1 = %16.0
  val?            %16.2 = Phi                      %15.7:BB15, %17.8:BB17
  val?            %16.3 = %16.2
  int$-           %16.4 = Inc                      %16.1
  lgl$-           %16.5 = Lt                 d     %15.3, %16.4, elided
  lgl$#-          %16.6 = Identical                %16.5, true
  void                    Branch                   %16.6 -> BB18 (if true) | BB17 (if false)
BB18   <- [16]
  val?            %18.0 = PopContext         C     %16.3, %25.2   <vec+>
  void                    StVar              lW    args, %18.0, e0.3
  goto BB7
BB17   <- [16]
  void                    StVar              lW    i, %16.4, e25.5
  (cls|spec|blt)  %17.1 = LdFun              !v    FUN, e25.5
  prom-           %17.2 = MkArg                    unboundValue, do.call[0x56096bfef8f0]_p5, e25.5
  (miss|dots)     %17.3 = LdDots             R     , e25.5
  *dots-          %17.4 = ExpandDots               %17.3
  val?            %17.5 = NamedCall          !v    %17.1(%17.2, .xpandDotsTrigger=%17.4) e25.5   <val?->
  val?            %17.6 = SetVecElt          e     %17.5, %16.3, %16.4
  int$-           %17.7 = %16.4
  val?            %17.8 = %17.6
  goto BB16
Prom 0:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     parent.frame, <0x56096a0fa170>, e0.0
  val?            %0.2  = Call               !     %0.1() e0.0   <env->
  void                    Return             l     %0.2
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    args, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    enquote, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <cls->
  void                    Return             l     %0.3
Prom 3:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    FUN, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <cls->
  void                    Return             l     %0.3
Prom 4:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    X, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <(str|vec)+>
  void                    Return             l     %0.3
Prom 5:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    X, e0.0
  val?            %0.2  = Force<wrapped>     !v    %0.1, e0.0   <(str|vec)+>
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <true>
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    i, e0.0
  val?            %2.1  = Force<value>       !v    %2.0, e0.0   <int$->
  val?            %2.2  = %2.1
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, do.call[0x56096bfef8f0]_p6, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.2:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract2_1D        !v    %0.2, %3.1, e0.0   <val?->
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 6:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    i, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3

│ do.call[0x56096bfef8f0]                                                      │
└──────────────────────────────────────────────────────────────────────────────┘
