
┌──────────────────────────────────────────────────────────────────────────────┐
│ as[0x56096d10e380]                                                           │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;NonRefl1,!Obj1 miss: 2               │
│ Properties:                                                                  │
├────── Final PIR Version
as[0x56096d10e380]
BB0
  val?^           %0.0  = LdArg                    1
  val?^           %0.1  = LdArg                    0
  env             e0.2  = MkEnv              l     object=%0.1, Class=%0.0, strict(miss)=true, ext(miss)=missingArg, parent=<env 0x56096a5ed378>, context 1
  prom-           %0.3  = MkArg                    unboundValue, as[0x56096d10e380]_p1, e0.2
  val?^ | miss    %0.4  = CastType                 up %0.3
  void                    StArg              lW    ext, %0.4, e0.2
  val?^ | miss    %0.6  = LdVar              eR    .class1, <env 0x56096a5ed378>
  lgl$#-          %0.7  = Identical                %0.6, function(x) <(rir::DispatchTable*)0x56096ca6c4|...
  void                    Branch                   %0.7 -> BB121 (if true) | BB122 (if false)
BB121   <- [0]
  prom-           %121.0 = MkArg                    unboundValue, as[0x56096d10e380]_p4, e0.2
  ct              %121.1 = PushContext        lCL   %121.0, .class1(object), function(x) <(rir::DispatchTable*)0x56096ca6c4|..., e0.2
  val?^           %121.2 = CastType                 up %121.0
  val?^ | miss    %121.3 = LdVar              eR    class, <env 0x56096a5ed378>
  lgl$#-          %121.4 = Identical                <blt class>, %121.3   <true>
  void                    Branch                   %121.4 -> BB123 (if true) | BB124 (if false)
BB122   <- [0]
  fs              %122.0 = FrameState         R     0x56096ca98270+0: [], env=e0.2
  void                    Deopt              !v    %122.0, CallTarget@0x56096cf10d70[Call#1], %0.6
BB123   <- [121]
  env             e123.0 = MkEnv              l     x=%121.2, parent=<env 0x56096a5ed378>, context 1
  val?            %123.1 = Force!<lazy>       !vL   %121.2, e123.0   <(str|cls)>
  val?            %123.2 = CallBuiltin        !v    class(%123.1) e123.0   <str$+>
  void                    StVar              lW    cl, %123.2, e123.0
  lgl$#-          %123.4 = IsType                   %123.2 isA val?+
  val?^ | miss    %123.5 = LdVar              eR    length, e123.0
  lgl$#-          %123.6 = Identical                <blt length>, %123.5   <true>
  void                    Branch                   %123.6 -> BB125 (if true) | BB126 (if false)
BB124   <- [121]
  fs              %124.0 = FrameState         R     0x56096ca98270+32: [], env=e0.2
  env             e124.1 = (MkEnv)            l     x=%121.2, parent=<env 0x56096a5ed378>, context 1
  fs              %124.2 = FrameState         R     0x56096cd35860+17: [<blt class>, %121.4], env=e124.1, next=%124.0
  void                    Deopt              !v    %124.2, DeadBranchReached@0x56096cf0ce48[Test#0], %121.4   !
BB125   <- [123]
  val             %125.0 = ChkMissing         e     %123.2
  void                    Branch                   %123.4 -> BB127 (if true) | BB128 (if false)
BB126   <- [123]
  void                    Nop                !     
  lgl$#-          %126.1 = %123.6
  dr              %126.2 = DeadBranchReached@0x56096cf0ce48[Test#1]
  goto BB5
BB127   <- [125]
  val?+           %127.0 = CastType           d     dn %123.2   <str$+>
  (int|real)$-    %127.1 = CallSafeBuiltin    wed   length(%127.0)    <int$->
  lgl$#-          %127.2 = IsType                   %127.1 isA int$-
  void                    Branch                   %127.2 -> BB129 (if true) | BB130 (if false)
BB128   <- [125]
  void                    Nop                !     
  val?            %128.1 = %123.2
  dr              %128.2 = Typecheck@0x56096cf0ce48[Type#2]
  goto BB5
BB5   <- [126, 128]
  val?^ | miss    %5.0  = Phi                      %126.1:BB126, %128.1:BB128
  val?^ | miss    %5.1  = %5.0
  dr              %5.2  = Phi                      %126.2:BB126, %128.2:BB128
  dr              %5.3  = %5.2
  fs              %5.4  = FrameState         R     0x56096ca98270+32: [], env=e0.2
  fs              %5.5  = FrameState         R     0x56096cd35860+105: [], env=e123.0, next=%5.4
  void                    Deopt              !v    %5.5, %5.3, %5.1   !
BB129   <- [127]
  int$-           %129.0 = CastType           d     dn %127.1
  lgl$-           %129.1 = Gt                 d     %129.0, 1L, elided   <lgl$->
  lgl$#-          %129.2 = CheckTrueFalse     e     %129.1
  void                    Branch                   %129.2 -> BB119 (if true) | BB9 (if false)
BB130   <- [127]
  fs              %130.0 = FrameState         R     0x56096ca98270+32: [], env=e0.2
  fs              %130.1 = FrameState         R     0x56096cd35860+196: [%127.1], env=e123.0, next=%130.0
  void                    Deopt              !v    %130.1, Typecheck@0x56096cf0ce48[Type#5], %127.1   !
BB119   <- [129]
  val?            %119.0 = Extract2_1D        wed   %127.0, 1L, elided   <val?_>
  val?            %119.1 = %119.0
  goto BB10
BB9   <- [129]
  void                    Nop                !     
  val?+           %9.1  = %127.0
  goto BB10
BB10   <- [9, 119]
  val?            %10.0 = Phi                      %9.1:BB9, %119.1:BB119
  val?            %10.1 = %10.0
  val?            %10.2 = PopContext         C     %10.1, %121.1   <str$+>
  void                    StVar              lW    thisClass, %10.2, e0.2
  val?^ | miss    %10.4 = LdVar              eR    .identC, e0.2
  lgl$#-          %10.5 = Identical                %10.4, function(c1=NULL, c2=NULL) <(rir::DispatchTabl|...
  void                    Branch                   %10.5 -> BB131 (if true) | BB132 (if false)
BB131   <- [10]
  prom-           %131.0 = MkArg                    unboundValue, as[0x56096d10e380]_p5 (!refl), e0.2
  prom-           %131.1 = MkArg                    unboundValue, as[0x56096d10e380]_p6, e0.2
  ct              %131.2 = PushContext        lCL   %131.0, %131.1, .identC(thisClass, Class), function(c1=NULL, c2=NULL) <(rir::DispatchTabl|..., e0.2
  val?^           %131.3 = CastType                 up %131.1
  val?^           %131.4 = CastType                 up %131.0
  val?^ | miss    %131.5 = LdVar              eR    .Call, <env 0x56096a5ed378>
  lgl$#-          %131.6 = Identical                <blt .Call>, %131.5   <true>
  void                    Branch                   %131.6 -> BB133 (if true) | BB134 (if false)
BB132   <- [10]
  fs              %132.0 = FrameState         R     0x56096ca98270+46: [], env=e0.2
  void                    Deopt              !v    %132.0, CallTarget@0x56096cf10d70[Call#2], %10.4   !
BB133   <- [131]
  val?^ | miss    %133.0 = LdVar              eR    C_R_identC, <env 0x56096a5ed378>
  env             e133.1 = MkEnv              l     c1=%131.4, c2=%131.3, parent=<env 0x56096a5ed378>, context 1
  val?            %133.2 = Force!<value>      !v    %133.0, e133.1   <vec>
  val?^ | miss    %133.3 = LdVar              eR    c1, e133.1
  val?            %133.4 = Force!<lazy>       !v    %133.3, e133.1   <str$+>
  val?^ | miss    %133.5 = LdVar              eR    c2, e133.1
  val?            %133.6 = Force!<lazy>       !v    %133.5, e133.1   <str$+>
  val?            %133.7 = CallBuiltin        !v    .Call(%133.2, %133.4, %133.6) e133.1   <lgl$->
  lgl$#-          %133.8 = IsType                   %133.7 isA lgl$-
  void                    Branch                   %133.8 -> BB135 (if true) | BB136 (if false)
BB134   <- [131]
  fs              %134.0 = FrameState         R     0x56096ca98270+83: [], env=e0.2
  env             e134.1 = (MkEnv)            l     c1=%131.4, c2=%131.3, parent=<env 0x56096a5ed378>, context 1
  fs              %134.2 = FrameState         R     0x56096c960880+17: [<blt .Call>, %131.6], env=e134.1, next=%134.0
  void                    Deopt              !v    %134.2, DeadBranchReached@0x56096c7d2438[Test#0], %131.6   !
BB135   <- [133]
  lgl$-           %135.0 = CastType           d     dn %133.7
  val?            %135.1 = PopContext         C     %135.0, %131.2   <lgl$->
  lgl$#-          %135.2 = IsType                   %135.1 isA lgl$-
  void                    Branch                   %135.2 -> BB137 (if true) | BB138 (if false)
BB136   <- [133]
  fs              %136.0 = FrameState         R     0x56096ca98270+83: [], env=e0.2
  fs              %136.1 = FrameState         R     0x56096c960880+129: [%133.7], env=e133.1, next=%136.0
  void                    Deopt              !v    %136.1, Typecheck@0x56096c7d2438[Type#6], %133.7   !
BB137   <- [135]
  lgl$-           %137.0 = CastType           d     dn %135.1
  lgl$-           %137.1 = AsLogical                %137.0
  lgl$#-          %137.2 = Identical                %137.1, true
  void                    Branch                   %137.2 -> BB118 (if true) | BB19 (if false)
BB138   <- [135]
  void                    Nop                !     
  val?            %138.1 = %135.1
  dr              %138.2 = Typecheck@0x56096cf10d70[Type#7]
  goto BB17
BB118   <- [137]
  void                    Nop                !     
  lgl$-           %118.1 = %137.1
  goto BB26
BB19   <- [137]
  val?^ | miss    %19.0 = LdVar              eR    .identC, e0.2
  lgl$#-          %19.1 = Identical                %19.0, function(c1=NULL, c2=NULL) <(rir::DispatchTabl|...
  void                    Branch                   %19.1 -> BB139 (if true) | BB140 (if false)
BB17   <- [138, 140]
  val?^ | miss    %17.0 = Phi                      %138.1:BB138, %140.1:BB140
  val?^ | miss    %17.1 = %17.0
  dr              %17.2 = Phi                      %138.2:BB138, %140.2:BB140
  dr              %17.3 = %17.2
  fs              %17.4 = FrameState         R     0x56096ca98270+83: [%135.1], env=e0.2
  void                    Deopt              !v    %17.4, %17.3, %17.1   !
BB26   <- [118, 159]
  lgl$-           %26.0 = Phi                      %159.3:BB159, %118.1:BB118
  lgl$-           %26.1 = %26.0
  lgl$#-          %26.2 = CheckTrueFalse     e     %26.1
  void                    Branch                   %26.2 -> BB117 (if true) | BB29 (if false)
BB139   <- [19]
  prom-           %139.0 = MkArg                    unboundValue, as[0x56096d10e380]_p7, e0.2
  ct              %139.1 = PushContext        lCL   %139.0, "ANY", .identC(Class, "ANY"), function(c1=NULL, c2=NULL) <(rir::DispatchTabl|..., e0.2
  val?^           %139.2 = CastType                 up %139.0
  val?^ | miss    %139.3 = LdVar              eR    .Call, <env 0x56096a5ed378>
  lgl$#-          %139.4 = Identical                <blt .Call>, %139.3   <true>
  void                    Branch                   %139.4 -> BB149 (if true) | BB150 (if false)
BB140   <- [19]
  void                    Nop                !     
  val?^ | miss    %140.1 = %19.0
  dr              %140.2 = CallTarget@0x56096cf10d70[Call#3]
  goto BB17
BB117   <- [26]
  val?^ | miss    %117.0 = LdVar              eR    object, e0.2
  void                    Visible            v     
  val?            %117.2 = Force!<wrapped>    !     %117.0, e0.2   <str->
  val?            %117.3 = %117.2
  goto BB46
BB29   <- [26]
  val?^ | miss    %29.0 = LdVar              eR    .classEnv, e0.2
  lgl$#-          %29.1 = Identical                %29.0, function(Class, default=.requirePackage("metho|...
  void                    Branch                   %29.1 -> BB141 (if true) | BB142 (if false)
BB149   <- [139]
  val?^ | miss    %149.0 = LdVar              eR    C_R_identC, <env 0x56096a5ed378>
  env             e149.1 = MkEnv              l     c1=%139.2, c2="ANY", parent=<env 0x56096a5ed378>, context 1
  val?            %149.2 = Force!<value>      !v    %149.0, e149.1   <vec>
  val?^ | miss    %149.3 = LdVar              eR    c1, e149.1
  val?            %149.4 = Force!<lazy>       !v    %149.3, e149.1   <str$+>
  val?^ | miss    %149.5 = LdVar              eR    c2, e149.1
  val?            %149.6 = Force!<lazy>       !v    %149.5, e149.1   <str$+>
  val?            %149.7 = CallBuiltin        !v    .Call(%149.2, %149.4, %149.6) e149.1   <lgl$->
  lgl$#-          %149.8 = IsType                   %149.7 isA lgl$-
  void                    Branch                   %149.8 -> BB151 (if true) | BB152 (if false)
BB150   <- [139]
  fs              %150.0 = FrameState         R     0x56096ca98270+132: [%137.1], env=e0.2
  env             e150.1 = (MkEnv)            l     c1=%139.2, c2="ANY", parent=<env 0x56096a5ed378>, context 1
  fs              %150.2 = FrameState         R     0x56096c960880+17: [<blt .Call>, %139.4], env=e150.1, next=%150.0
  void                    Deopt              !v    %150.2, DeadBranchReached@0x56096c7d2438[Test#0], %139.4   !
BB46   <- [117, 45]
  val?            %46.0 = Phi                      %45.3:BB45, %117.3:BB117
  val?            %46.1 = %46.0
  void                    Return             l     %46.1
BB141   <- [29]
  prom-           %141.0 = MkArg                    unboundValue, as[0x56096d10e380]_p8, e0.2
  val?            %141.1 = StaticCall         !v    .classEnv[0x56096c163600](%141.0, missingArg, false) { 0 2n } e0.2   <env->
  void                    StVar              lW    where, %141.1, e0.2
  val?^ | miss    %141.3 = LdVar              eR    getGeneric, e0.2
  lgl$#-          %141.4 = Identical                %141.3, function(f, mustFind=FALSE, where, package="")|...
  void                    Branch                   %141.4 -> BB143 (if true) | BB144 (if false)
BB142   <- [29]
  fs              %142.0 = FrameState         R     0x56096ca98270+139: [%26.1], env=e0.2
  void                    Deopt              !v    %142.0, CallTarget@0x56096cf10d70[Call#4], %29.0   !
BB151   <- [149]
  lgl$-           %151.0 = CastType           d     dn %149.7
  val?            %151.1 = PopContext         C     %151.0, %139.1   <lgl$->
  lgl$#-          %151.2 = IsType                   %151.1 isA lgl$-
  void                    Branch                   %151.2 -> BB159 (if true) | BB160 (if false)
BB152   <- [149]
  fs              %152.0 = FrameState         R     0x56096ca98270+132: [%137.1], env=e0.2
  fs              %152.1 = FrameState         R     0x56096c960880+129: [%149.7], env=e149.1, next=%152.0
  void                    Deopt              !v    %152.1, Typecheck@0x56096c7d2438[Type#6], %149.7   !
BB143   <- [141]
  prom-           %143.0 = MkArg                    unboundValue, as[0x56096d10e380]_p9 (!refl), e0.2
  val?            %143.1 = StaticCall         !v    getGeneric[0x56096cd49020]("coerce", missingArg, %143.0) { 0 2n } e0.2   <cls>
  void                    StVar              lW    coerceFun, %143.1, e0.2
  val?^ | miss    %143.3 = LdVar              eR    .getMethodsTable, e0.2
  lgl$#-          %143.4 = Identical                %143.3, function(fdef, env=environment(fdef), check=TR|...
  void                    Branch                   %143.4 -> BB145 (if true) | BB146 (if false)
BB144   <- [141]
  fs              %144.0 = FrameState         R     0x56096ca98270+224: [], env=e0.2
  void                    Deopt              !v    %144.0, CallTarget@0x56096cf10d70[Call#5], %141.3   !
BB159   <- [151]
  lgl$-           %159.0 = CastType           d     dn %151.1
  lgl$-           %159.1 = AsLogical                %159.0
  lgl$-           %159.2 = LOr                      %137.1, %159.1
  lgl$-           %159.3 = %159.2
  goto BB26
BB160   <- [151]
  fs              %160.0 = FrameState         R     0x56096ca98270+132: [%137.1, %151.1], env=e0.2
  void                    Deopt              !v    %160.0, Typecheck@0x56096cf10d70[Type#9], %151.1   !
BB145   <- [143]
  prom-           %145.0 = MkArg                    unboundValue, as[0x56096d10e380]_p10 (!refl), e0.2
  prom-           %145.1 = MkArg                    unboundValue, as[0x56096d10e380]_p11, e0.2
  val?            %145.2 = StaticCall         !v    .getMethodsTable[0x56096d0830f0](%145.0, %145.1, missingArg, true) { 0 1 3n } e0.2   <env->
  void                    StVar              lW    coerceMethods, %145.2, e0.2
  val?^ | miss    %145.4 = LdVar              eR    .quickCoerceSelect, e0.2
  lgl$#-          %145.5 = Identical                %145.4, function(from, to, fdef, methods, where) <(rir|...
  void                    Branch                   %145.5 -> BB147 (if true) | BB148 (if false)
BB146   <- [143]
  fs              %146.0 = FrameState         R     0x56096ca98270+283: [], env=e0.2
  void                    Deopt              !v    %146.0, CallTarget@0x56096cf10d70[Call#6], %143.3   !
BB147   <- [145]
  prom-           %147.0 = MkArg                    unboundValue, as[0x56096d10e380]_p13, e0.2
  prom-           %147.1 = MkArg                    unboundValue, as[0x56096d10e380]_p14, e0.2
  prom-           %147.2 = MkArg                    unboundValue, as[0x56096d10e380]_p15, e0.2
  prom-           %147.3 = MkArg                    unboundValue, as[0x56096d10e380]_p16 (!refl), e0.2
  prom-           %147.4 = MkArg                    unboundValue, as[0x56096d10e380]_p17, e0.2
  val?            %147.5 = StaticCall         !v    .quickCoerceSelect[0x56096d40d680](%147.0, %147.1, %147.2, %147.3, %147.4) e0.2   <nil->
  lgl$-           %147.6 = Is                       %147.5, NULL
  void                    StVar              lW    asMethod, %147.5, e0.2
  val             %147.8 = ChkMissing         e     %147.5
  lgl$#-          %147.9 = CheckTrueFalse     e     %147.6
  void                    Branch                   %147.9 -> BB48 (if true) | BB38 (if false)
BB148   <- [145]
  fs              %148.0 = FrameState         R     0x56096ca98270+351: [], env=e0.2
  void                    Deopt              !v    %148.0, CallTarget@0x56096cf10d70[Call#8], %145.4   !
BB48   <- [147]
  val?^ | miss    %48.0 = LdVar              eR    c, e0.2
  lgl$#-          %48.1 = Identical                <blt c>, %48.0   <true>
  void                    Branch                   %48.1 -> BB153 (if true) | BB154 (if false)
BB38   <- [147]
  void                    Nop                !     
  goto BB39
BB153   <- [48]
  val?^ | miss    %153.0 = LdVar              eR    thisClass, e0.2
  lgl$#-          %153.1 = IsType                   %153.0 isA val?~+ | miss
  void                    Branch                   %153.1 -> BB155 (if true) | BB156 (if false)
BB154   <- [48]
  void                    Nop                !     
  lgl$#-          %154.1 = %48.1
  dr              %154.2 = DeadBranchReached@0x56096cf10d70[Test#0]
  goto BB36
BB39   <- [38, 49, 69]
  val?^ | miss    %39.0 = LdVar              eR    strict, e0.2
  val?            %39.1 = Force!<lazy>       !v    %39.0, e0.2   <lgl$->
  lgl$#-          %39.2 = CheckTrueFalse     we    %39.1
  void                    Branch                   %39.2 -> BB43 (if true) | BB42 (if false)
BB155   <- [153]
  val?~+ | miss   %155.0 = CastType           d     dn %153.0
  val?+           %155.1 = Force!<value>            %155.0,    <str$+>
  val?^ | miss    %155.2 = LdVar              eR    Class, e0.2
  val?            %155.3 = Force!<wrapped>    !v    %155.2, e0.2   <str$->
  val?            %155.4 = NamedCall          !v    <blt c>(from=%155.1, to=%155.3) e0.2   <str+>
  void                    StVar              lW    sig, %155.4, e0.2
  (cls|spec|blt)  %155.6 = LdFun              !v    selectMethod, <0x56096cf47ff8>, e0.2
  prom-           %155.7 = MkArg                    unboundValue, as[0x56096d10e380]_p19, e0.2
  prom-           %155.8 = MkArg                    unboundValue, as[0x56096d10e380]_p20, e0.2
  prom-           %155.9 = MkArg                    unboundValue, as[0x56096d10e380]_p21, e0.2
  val?            %155.10 = NamedCall          !v    %155.6("coerce", %155.7, optional=true, useInherited=false, fdef=%155.8, mlist=%155.9) e0.2   <nil->
  lgl$-           %155.11 = Is                       %155.10, NULL
  void                    StVar              lW    asMethod, %155.10, e0.2
  val             %155.13 = ChkMissing         e     %155.10
  lgl$#-          %155.14 = CheckTrueFalse     e     %155.11
  void                    Branch                   %155.14 -> BB50 (if true) | BB49 (if false)
BB156   <- [153]
  void                    Nop                !     
  val?^ | miss    %156.1 = %153.0
  dr              %156.2 = Typecheck@0x56096cf10d70[Type#28]
  goto BB36
BB36   <- [154, 156]
  val?^ | miss    %36.0 = Phi                      %154.1:BB154, %156.1:BB156
  val?^ | miss    %36.1 = %36.0
  dr              %36.2 = Phi                      %154.2:BB154, %156.2:BB156
  dr              %36.3 = %36.2
  fs              %36.4 = FrameState         R     0x56096ca98270+417: [], env=e0.2
  void                    Deopt              !v    %36.4, %36.3, %36.1   !
BB43   <- [39]
  val?^ | miss    %43.0 = LdVar              eR    asMethod, e0.2
  lgl$#-          %43.1 = Identical                %43.0, function(from, to="function", strict=TRUE) <(r|...
  void                    Branch                   %43.1 -> BB157 (if true) | BB158 (if false)
BB42   <- [39]
  (cls|spec|blt)  %42.0 = LdFun              !v    asMethod, e0.2
  fs              %42.1 = FrameState         R     0x56096ca98270+1947: [%42.0], env=e0.2
  void                    Deopt              !v    %42.1, DeadCall@0x56096cf10d70[Call#38], %42.0   !
BB50   <- [155]
  void                    StVar              lW    canCache, true, e0.2
  void                    StVar              lW    inherited, false, e0.2
  val?^ | miss    %50.2 = LdVar              eR    is, e0.2
  lgl$#-          %50.3 = Identical                %50.2, function(object, class2) <(rir::DispatchTable*|...
  void                    Branch                   %50.3 -> BB161 (if true) | BB162 (if false)
BB49   <- [155]
  void                    Nop                !     
  goto BB39
BB157   <- [43]
  prom-           %157.0 = MkArg                    unboundValue, as[0x56096d10e380]_p18, e0.2
  ct              %157.1 = PushContext        lCL   %157.0, asMethod(object), function(from, to="function", strict=TRUE) <(r|..., e0.2
  val?^           %157.2 = CastType                 up %157.0
  env             e157.3 = MkEnv              l     from=%157.2, to(miss)="function", strict(miss)=true, parent=<env 0x56096a5ed378>, context 1
  (cls|spec|blt)  %157.4 = LdFun              !v    <-, <0x560969fdada8>, <env 0x56096a5ed378>
  prom-           %157.5 = MkArg                    unboundValue, as[0x56096d10e380]_p52, e157.3
  val?            %157.6 = Call               !v    %157.4(%157.5, <str |a|>) e157.3
  val?^ | miss    %157.7 = LdVar              eR    from, e157.3
  val?            %157.8 = Force!<value>      !v    %157.7, e157.3   <cls>
  void                    StVar              lW    from, %157.8, e157.3
  val?^ | miss    %157.10 = LdVar              eR    strict, e157.3
  void                    Visible            v     
  val?            %157.12 = Force!<wrapped>    !     %157.10, e157.3   <lgl$->
  lgl$#-          %157.13 = CheckTrueFalse     we    %157.12
  void                    Branch                   %157.13 -> BB47 (if true) | BB44 (if false)
BB158   <- [43]
  fs              %158.0 = FrameState         R     0x56096ca98270+1937: [%39.2], env=e0.2
  void                    Deopt              !v    %158.0, CallTarget@0x56096cf10d70[Call#39], %43.0   !
BB161   <- [50]
  prom-           %161.0 = MkArg                    unboundValue, as[0x56096d10e380]_p23, e0.2
  prom-           %161.1 = MkArg                    unboundValue, as[0x56096d10e380]_p24, e0.2
  val?            %161.2 = Call               !v    function(object, class2) <(rir::DispatchTable*|...(%161.0, %161.1) e0.2   <lgl$->
  lgl$#-          %161.3 = IsType                   %161.2 isA lgl$-
  void                    Branch                   %161.3 -> BB163 (if true) | BB164 (if false)
BB162   <- [50]
  fs              %162.0 = FrameState         R     0x56096ca98270+742: [], env=e0.2
  void                    Deopt              !v    %162.0, CallTarget@0x56096cf10d70[Call#12], %50.2   !
BB47   <- [157]
  (cls|spec|blt)  %47.0 = LdFun              !     @, <0x560969fe5bd8>, e157.3
  prom-           %47.1 = MkArg                    unboundValue, as[0x56096d10e380]_p54, e157.3
  prom-           %47.2 = MkArg                    unboundValue, as[0x56096d10e380]_p55, e157.3
  val?            %47.3 = Call               !     %47.0(%47.1, %47.2) e157.3   <cls->
  val?            %47.4 = %47.3
  goto BB45
BB44   <- [157]
  void                    Invisible          v     
  nil-            %44.1 = nil
  goto BB45
BB163   <- [161]
  lgl$-           %163.0 = CastType           d     dn %161.2
  lgl$#-          %163.1 = CheckTrueFalse     e     %163.0
  void                    Branch                   %163.1 -> BB75 (if true) | BB55 (if false)
BB164   <- [161]
  void                    Nop                !     
  val?            %164.1 = %161.2
  dr              %164.2 = Typecheck@0x56096cf10d70[Type#39]
  goto BB53
BB45   <- [44, 47]
  val?            %45.0 = Phi                      %44.1:BB44, %47.4:BB47
  val?            %45.1 = %45.0
  val?            %45.2 = PopContext         C     %45.1, %157.1   <cls->
  val?            %45.3 = %45.2
  goto BB46
BB75   <- [163]
  val?^ | miss    %75.0 = LdVar              eR    getClassDef, e0.2
  lgl$#-          %75.1 = Identical                %75.0, function(Class, where=topenv(parent.frame()), |...
  void                    Branch                   %75.1 -> BB165 (if true) | BB166 (if false)
BB55   <- [163]
  void                    Nop                !     
  goto BB56
BB53   <- [164, 166]
  val?^ | miss    %53.0 = Phi                      %164.1:BB164, %166.1:BB166
  val?^ | miss    %53.1 = %53.0
  dr              %53.2 = Phi                      %164.2:BB164, %166.2:BB166
  dr              %53.3 = %53.2
  fs              %53.4 = FrameState         R     0x56096ca98270+779: [%161.2], env=e0.2
  void                    Deopt              !v    %53.4, %53.3, %53.1   !
BB165   <- [75]
  prom-           %165.0 = MkArg                    unboundValue, as[0x56096d10e380]_p33, e0.2
  prom-           %165.1 = MkArg                    unboundValue, as[0x56096d10e380]_p34, e0.2
  val?            %165.2 = StaticCall         !v    getClassDef[0x56096d097eb0](%165.0, %165.1) e0.2   <other>
  void                    StVar              lW    ClassDef, %165.2, e0.2
  val?^ | miss    %165.4 = LdVar              eR    isFALSE, e0.2
  lgl$#-          %165.5 = Identical                %165.4, function(x) <(rir::DispatchTable*)0x56096c07eb|...
  void                    Branch                   %165.5 -> BB169 (if true) | BB170 (if false)
BB166   <- [75]
  void                    Nop                !     
  val?^ | miss    %166.1 = %75.0
  dr              %166.2 = CallTarget@0x56096cf10d70[Call#13]
  goto BB53
BB56   <- [55, 97]
  val?^ | miss    %56.0 = LdVar              eR    asMethod, e0.2
  lgl$#-          %56.1 = IsType                   %56.0 isA val?~- | miss
  void                    Branch                   %56.1 -> BB167 (if true) | BB168 (if false)
BB169   <- [165]
  val?^ | miss    %169.0 = LdVar              eR    ext, e0.2
  val?            %169.1 = Force!<lazy>       !v    %169.0, e0.2   <other>
  prom-           %169.2 = MkArg                    %169.1, as[0x56096d10e380]_p35 (!refl), 
  val?            %169.3 = StaticCall         !v    isFALSE[0x56096d2e1a00](%169.2) e0.2   <lgl$->
  lgl$#-          %169.4 = IsType                   %169.3 isA lgl$-
  void                    Branch                   %169.4 -> BB173 (if true) | BB174 (if false)
BB170   <- [165]
  fs              %170.0 = FrameState         R     0x56096ca98270+846: [], env=e0.2
  void                    Deopt              !v    %170.0, CallTarget@0x56096cf10d70[Call#14], %165.4   !
BB167   <- [56]
  val?~- | miss   %167.0 = CastType           d     dn %56.0
  val?-           %167.1 = Force!<value>            %167.0,    <cls->
  lgl$-           %167.2 = Is                       %167.1, NULL
  lgl$-           %167.3 = AsLogical                %167.2
  lgl$#-          %167.4 = Identical                %167.3, false
  void                    Branch                   %167.4 -> BB60 (if true) | BB59 (if false)
BB168   <- [56]
  void                    Nop                !     
  val?^ | miss    %168.1 = %56.0
  dr              %168.2 = Typecheck@0x56096cf10d70[Type#74]
  goto BB57
BB173   <- [169]
  lgl$-           %173.0 = CastType           d     dn %169.3
  lgl$#-          %173.1 = CheckTrueFalse     e     %173.0
  void                    Branch                   %173.1 -> BB116 (if true) | BB80 (if false)
BB174   <- [169]
  void                    Nop                !     
  val?            %174.1 = %169.3
  dr              %174.2 = Typecheck@0x56096cf10d70[Type#44]
  goto BB78
BB60   <- [167]
  lgl$#-          %60.0 = CheckTrueFalse     e     %167.3
  void                    Branch                   %60.0 -> BB74 (if true) | BB61 (if false)
BB59   <- [167]
  (cls|spec|blt)  %59.0 = LdFun              !v    extends, e0.2
  fs              %59.1 = FrameState         R     0x56096ca98270+1355: [%167.3, %59.0], env=e0.2
  void                    Deopt              !v    %59.1, DeadCall@0x56096cf10d70[Call#27], %59.0   !
BB57   <- [168, 172, 176]
  val?^ | miss    %57.0 = Phi                      %168.1:BB168, %172.1:BB172, %176.1:BB176
  val?^ | miss    %57.1 = %57.0
  dr              %57.2 = Phi                      %168.2:BB168, %172.2:BB172, %176.2:BB176
  dr              %57.3 = %57.2
  fs              %57.4 = FrameState         R     0x56096ca98270+1324: [], env=e0.2
  void                    Deopt              !v    %57.4, %57.3, %57.1   !
BB116   <- [173]
  (cls|spec|blt)  %116.0 = LdFun              !v    stop, e0.2
  fs              %116.1 = FrameState         R     0x56096ca98270+1283: [%116.0], env=e0.2
  void                    Deopt              !v    %116.1, DeadCall@0x56096cf10d70[Call#24], %116.0   !
BB80   <- [173]
  val?^ | miss    %80.0 = LdVar              eR    isTRUE, e0.2
  lgl$#-          %80.1 = Identical                %80.0, function(x) <(rir::DispatchTable*)0x56096c0fee|...
  void                    Branch                   %80.1 -> BB177 (if true) | BB178 (if false)
BB78   <- [174, 178]
  val?^ | miss    %78.0 = Phi                      %174.1:BB174, %178.1:BB178
  val?^ | miss    %78.1 = %78.0
  dr              %78.2 = Phi                      %174.2:BB174, %178.2:BB178
  dr              %78.3 = %78.2
  fs              %78.4 = FrameState         R     0x56096ca98270+878: [%169.3], env=e0.2
  void                    Deopt              !v    %78.4, %78.3, %78.1   !
BB74   <- [60]
  (cls|spec|blt)  %74.0 = LdFun              !v    getClassDef, e0.2
  fs              %74.1 = FrameState         R     0x56096ca98270+1410: [%74.0], env=e0.2
  void                    Deopt              !v    %74.1, DeadCall@0x56096cf10d70[Call#28], %74.0   !
BB61   <- [60]
  lgl$#-          %61.0 = CheckTrueFalse     e     %167.2
  void                    Branch                   %61.0 -> BB73 (if true) | BB62 (if false)
BB177   <- [80]
  val?^ | miss    %177.0 = LdVar              eR    ext, e0.2
  val?            %177.1 = Force!<wrapped>    !v    %177.0, e0.2   <other>
  val+            %177.2 = CallSafeBuiltin    wed   is.logical(%177.1)    <lgl$->
  lgl$#-          %177.3 = IsType                   %177.2 isA lgl$-
  void                    Branch                   %177.3 -> BB179 (if true) | BB180 (if false)
BB178   <- [80]
  void                    Nop                !     
  val?^ | miss    %178.1 = %80.0
  dr              %178.2 = CallTarget@0x56096cf10d70[Call#15]
  goto BB78
BB73   <- [61]
  (cls|spec|blt)  %73.0 = LdFun              !v    selectMethod, e0.2
  fs              %73.1 = FrameState         R     0x56096ca98270+1643: [%73.0], env=e0.2
  void                    Deopt              !v    %73.1, DeadCall@0x56096cf10d70[Call#31], %73.0   !
BB62   <- [61]
  val?^ | miss    %62.0 = LdVar              eR    canCache, e0.2
  lgl$#-          %62.1 = IsType                   %62.0 isA lgl$-
  void                    Branch                   %62.1 -> BB171 (if true) | BB172 (if false)
BB179   <- [177]
  lgl$-           %179.0 = CastType           d     dn %177.2
  lgl$-           %179.1 = AsLogical                %179.0
  lgl$#-          %179.2 = Identical                %179.1, false
  void                    Branch                   %179.2 -> BB115 (if true) | BB83 (if false)
BB180   <- [177]
  void                    Nop                !     
  val+            %180.1 = %177.2
  dr              %180.2 = Typecheck@0x56096c780878[Type#2]
  goto BB81
BB171   <- [62]
  lgl$-           %171.0 = CastType           d     dn %62.0
  lgl$#-          %171.1 = CheckTrueFalse     e     %171.0
  void                    Branch                   %171.1 -> BB72 (if true) | BB63 (if false)
BB172   <- [62]
  void                    Nop                !     
  val?^ | miss    %172.1 = %62.0
  dr              %172.2 = Typecheck@0x56096cf10d70[Type#87]
  goto BB57
BB115   <- [179]
  void                    Nop                !     
  lgl$-           %115.1 = %179.1
  goto BB84
BB83   <- [179]
  lgl$#-          %83.0 = IsType                   %177.1 isA lgl$-
  void                    Branch                   %83.0 -> BB187 (if true) | BB188 (if false)
BB81   <- [180, 186, 188]
  val?^ | miss    %81.0 = Phi                      %180.1:BB180, %186.1:BB186, %188.1:BB188
  val?^ | miss    %81.1 = %81.0
  dr              %81.2 = Phi                      %180.2:BB180, %186.2:BB186, %188.2:BB188
  dr              %81.3 = %81.2
  fs              %81.4 = FrameState         R     0x56096ca98270+921: [], env=e0.2
  prom-           %81.5 = MkArg                    %177.1, as[0x56096d10e380]_p36 (!refl), e0.2
  val?~           %81.6 = CastType                 up %81.5
  env             e81.7 = (MkEnv)            l     x=%81.6, parent=R_BaseNamespace, context 0
  fs              %81.8 = FrameState         R     0x56096ca09830+91: [%177.2], env=e81.7, next=%81.4
  void                    Deopt              !v    %81.8, %81.3, %81.1   !
BB72   <- [171]
  val?^ | miss    %72.0 = LdVar              eR    .asCoerceMethod, e0.2
  lgl$#-          %72.1 = Identical                %72.0, function(def, thisClass, ClassDef, replace, wh|...
  void                    Branch                   %72.1 -> BB175 (if true) | BB176 (if false)
BB63   <- [171]
  void                    Nop                !     
  goto BB64
BB84   <- [115, 187]
  lgl$-           %84.0 = Phi                      %187.1:BB187, %115.1:BB115
  lgl$-           %84.1 = %84.0
  lgl$-           %84.2 = AsLogical                %84.1
  lgl$#-          %84.3 = Identical                %84.2, false
  void                    Branch                   %84.3 -> BB114 (if true) | BB85 (if false)
BB187   <- [83]
  lgl$-           %187.0 = AsLogical                %179.1
  lgl$-           %187.1 = %187.0
  goto BB84
BB188   <- [83]
  void                    Nop                !     
  val?            %188.1 = %177.1
  dr              %188.2 = Typecheck@0x56096c780878[Type#4]
  goto BB81
BB175   <- [72]
  prom-           %175.0 = MkArg                    unboundValue, as[0x56096d10e380]_p29, e0.2
  prom-           %175.1 = MkArg                    unboundValue, as[0x56096d10e380]_p30, e0.2
  prom-           %175.2 = MkArg                    unboundValue, as[0x56096d10e380]_p31, e0.2
  prom-           %175.3 = MkArg                    unboundValue, as[0x56096d10e380]_p32, e0.2
  val?            %175.4 = StaticCall         !v    .asCoerceMethod[0x56096cd2d0a0](%175.0, %175.1, %175.2, false, %175.3) e0.2   <cls>
  void                    StVar              lW    asMethod, %175.4, e0.2
  goto BB64
BB176   <- [72]
  void                    Nop                !     
  val?^ | miss    %176.1 = %72.0
  dr              %176.2 = CallTarget@0x56096cf10d70[Call#30]
  goto BB57
BB64   <- [63, 175]
  val?^ | miss    %64.0 = LdVar              eR    asMethod, e0.2
  val?            %64.1 = Force!<value>      !v    %64.0, e0.2   <cls>
  lgl$-           %64.2 = Is                       %64.1, NULL
  lgl$#-          %64.3 = CheckTrueFalse     e     %64.2
  void                    Branch                   %64.3 -> BB71 (if true) | BB67 (if false)
BB114   <- [84]
  void                    Nop                !     
  lgl$-           %114.1 = %84.2
  goto BB86
BB85   <- [84]
  lgl$#-          %85.0 = IsType                   %177.1 isA lgl$-
  void                    Branch                   %85.0 -> BB185 (if true) | BB186 (if false)
BB71   <- [64]
  (cls|spec|blt)  %71.0 = LdFun              !v    stop, e0.2
  fs              %71.1 = FrameState         R     0x56096ca98270+1881: [%71.0], env=e0.2
  void                    Deopt              !v    %71.1, DeadCall@0x56096cf10d70[Call#34], %71.0   !
BB67   <- [64]
  val?^ | miss    %67.0 = LdVar              eR    canCache, e0.2
  lgl$#-          %67.1 = IsType                   %67.0 isA lgl$-
  void                    Branch                   %67.1 -> BB181 (if true) | BB182 (if false)
BB86   <- [114, 185]
  lgl$-           %86.0 = Phi                      %185.5:BB185, %114.1:BB114
  lgl$-           %86.1 = %86.0
  lgl$-           %86.2 = AsLogical                %86.1
  lgl$#-          %86.3 = Identical                %86.2, false
  void                    Branch                   %86.3 -> BB113 (if true) | BB87 (if false)
BB185   <- [85]
  lgl$-           %185.0 = CastType           d     dn %177.1   <other>
  lgl$-           %185.1 = CallSafeBuiltin    wed   is.na(%185.0)    <lgl$->
  lgl$-           %185.2 = Not                d     %185.1, elided
  lgl$-           %185.3 = AsLogical                %185.2
  lgl$-           %185.4 = LAnd                     %84.2, %185.3
  lgl$-           %185.5 = %185.4
  goto BB86
BB186   <- [85]
  void                    Nop                !     
  val?            %186.1 = %177.1
  dr              %186.2 = Typecheck@0x56096c780878[Type#8]
  goto BB81
BB181   <- [67]
  lgl$-           %181.0 = CastType           d     dn %67.0
  lgl$#-          %181.1 = CheckTrueFalse     e     %181.0
  void                    Branch                   %181.1 -> BB70 (if true) | BB68 (if false)
BB182   <- [67]
  void                    Nop                !     
  val?^ | miss    %182.1 = %67.0
  dr              %182.2 = Typecheck@0x56096cf10d70[Type#99]
  goto BB65
BB113   <- [86]
  void                    Nop                !     
  lgl$-           %113.1 = %86.2
  goto BB88
BB87   <- [86]
  lgl$-           %87.0 = AsLogical          e     %177.1
  lgl$-           %87.1 = LAnd                     %86.2, %87.0
  lgl$-           %87.2 = %87.1
  goto BB88
BB70   <- [181]
  val?^ | miss    %70.0 = LdVar              eR    cacheMethod, e0.2
  lgl$#-          %70.1 = Identical                %70.0, function(f, sig, def, args=names(sig), fdef, i|...
  void                    Branch                   %70.1 -> BB183 (if true) | BB184 (if false)
BB68   <- [181]
  void                    Nop                !     
  goto BB69
BB65   <- [182, 184]
  val?^ | miss    %65.0 = Phi                      %182.1:BB182, %184.1:BB184
  val?^ | miss    %65.1 = %65.0
  dr              %65.2 = Phi                      %182.2:BB182, %184.2:BB184
  dr              %65.3 = %65.2
  fs              %65.4 = FrameState         R     0x56096ca98270+1757: [%64.1], env=e0.2
  void                    Deopt              !v    %65.4, %65.3, %65.1   !
BB88   <- [113, 87]
  lgl$-           %88.0 = Phi                      %87.2:BB87, %113.1:BB113
  lgl$-           %88.1 = %88.0
  lgl$#-          %88.2 = CheckTrueFalse     e     %88.1
  void                    Branch                   %88.2 -> BB112 (if true) | BB89 (if false)
BB183   <- [70]
  prom-           %183.0 = MkArg                    unboundValue, as[0x56096d10e380]_p25, e0.2
  prom-           %183.1 = MkArg                    unboundValue, as[0x56096d10e380]_p26, e0.2
  prom-           %183.2 = MkArg                    unboundValue, as[0x56096d10e380]_p27, e0.2
  prom-           %183.3 = MkArg                    unboundValue, as[0x56096d10e380]_p28, e0.2
  val?            %183.4 = StaticCall         !v    cacheMethod[0x56096d333690]("coerce", %183.0, %183.1, missingArg, %183.2, %183.3) { 0 1 2 4n 5n } e0.2
  goto BB69
BB184   <- [70]
  void                    Nop                !     
  val?^ | miss    %184.1 = %70.0
  dr              %184.2 = CallTarget@0x56096cf10d70[Call#33]
  goto BB65
BB69   <- [68, 183]
  void                    Nop                !     
  goto BB39
BB112   <- [88]
  (cls|spec|blt)  %112.0 = LdFun              !v    .makeAsMethod, e0.2
  fs              %112.1 = FrameState         R     0x56096ca98270+1212: [%112.0], env=e0.2
  void                    Deopt              !v    %112.1, DeadCall@0x56096cf10d70[Call#23], %112.0   !
BB89   <- [88]
  (cls|spec|blt)  %89.0 = LdFun              !v    @, <0x560969fe5bd8>, e0.2
  prom-           %89.1 = MkArg                    unboundValue, as[0x56096d10e380]_p37, e0.2
  prom-           %89.2 = MkArg                    unboundValue, as[0x56096d10e380]_p38, e0.2
  val?            %89.3 = Call               !v    %89.0(%89.1, %89.2) e0.2   <cls->
  void                    StVar              lW    test, %89.3, e0.2
  val?^ | miss    %89.5 = LdVar              eR    .makeAsMethod, e0.2
  lgl$#-          %89.6 = Identical                %89.5, function(expr, simple, Class, ClassDef, where)|...
  void                    Branch                   %89.6 -> BB189 (if true) | BB190 (if false)
BB189   <- [89]
  prom-           %189.0 = MkArg                    unboundValue, as[0x56096d10e380]_p39, e0.2
  prom-           %189.1 = MkArg                    unboundValue, as[0x56096d10e380]_p42, e0.2
  prom-           %189.2 = MkArg                    unboundValue, as[0x56096d10e380]_p45, e0.2
  prom-           %189.3 = MkArg                    unboundValue, as[0x56096d10e380]_p46, e0.2
  prom-           %189.4 = MkArg                    unboundValue, as[0x56096d10e380]_p47, e0.2
  val?            %189.5 = StaticCall         !v    .makeAsMethod[0x56096ce66230](%189.0, %189.1, %189.2, %189.3, %189.4) e0.2   <cls->
  void                    StVar              lW    asMethod, %189.5, e0.2
  val?^ | miss    %189.7 = LdVar              eR    is.function, e0.2
  lgl$#-          %189.8 = Identical                <blt is.function>, %189.7   <true>
  void                    Branch                   %189.8 -> BB191 (if true) | BB192 (if false)
BB190   <- [89]
  fs              %190.0 = FrameState         R     0x56096ca98270+983: [], env=e0.2
  void                    Deopt              !v    %190.0, CallTarget@0x56096cf10d70[Call#17], %89.5   !
BB191   <- [189]
  val?^ | miss    %191.0 = LdVar              eR    test, e0.2
  lgl$#-          %191.1 = IsType                   %191.0 isA val?~- | miss
  void                    Branch                   %191.1 -> BB193 (if true) | BB194 (if false)
BB192   <- [189]
  void                    Nop                !     
  lgl$#-          %192.1 = %189.8
  dr              %192.2 = DeadBranchReached@0x56096cf10d70[Test#1]
  goto BB92
BB193   <- [191]
  val?~- | miss   %193.0 = CastType           d     dn %191.0
  val?-           %193.1 = Force!<value>            %193.0,    <cls->
  lgl$#-          %193.2 = CallSafeBuiltin    wed   is.function(%193.1)    <lgl$->
  lgl$#-          %193.3 = Not                d     %193.2, elided
  void                    Branch                   %193.2 -> BB98 (if true) | BB96 (if false)
BB194   <- [191]
  void                    Nop                !     
  val?^ | miss    %194.1 = %191.0
  dr              %194.2 = Typecheck@0x56096cf10d70[Type#61]
  goto BB92
BB92   <- [192, 194]
  val?^ | miss    %92.0 = Phi                      %192.1:BB192, %194.1:BB194
  val?^ | miss    %92.1 = %92.0
  dr              %92.2 = Phi                      %192.2:BB192, %194.2:BB194
  dr              %92.3 = %92.2
  fs              %92.4 = FrameState         R     0x56096ca98270+1049: [], env=e0.2
  void                    Deopt              !v    %92.4, %92.3, %92.1   !
BB98   <- [193]
  val?^ | miss    %98.0 = LdVar              eR    isTRUE, e0.2
  lgl$#-          %98.1 = Identical                %98.0, function(x) <(rir::DispatchTable*)0x56096c0fee|...
  void                    Branch                   %98.1 -> BB195 (if true) | BB196 (if false)
BB96   <- [193]
  void                    Nop                !     
  lgl$#-          %96.1 = %193.3
  goto BB97
BB195   <- [98]
  val?^ | miss    %195.0 = LdVar              eR    body, e0.2
  lgl$#-          %195.1 = Identical                %195.0, function(fun=sys.function(sys.parent())) <(rir|...
  void                    Branch                   %195.1 -> BB197 (if true) | BB198 (if false)
BB196   <- [98]
  void                    Nop                !     
  val?^ | miss    %196.1 = %98.0
  dr              %196.2 = CallTarget@0x56096cf10d70[Call#21]
  goto BB94
BB97   <- [96, 107]
  lgl$-           %97.0 = Phi                      %107.4:BB107, %96.1:BB96
  lgl$-           %97.1 = %97.0
  void                    StVar              lW    canCache, %97.1, e0.2
  goto BB56
BB197   <- [195]
  lgl$#-          %197.0 = CallSafeBuiltin    wed   is.character(%193.1)    <lgl$->
  void                    Branch                   %197.0 -> BB111 (if true) | BB99 (if false)
BB198   <- [195]
  void                    Nop                !     
  val?^ | miss    %198.1 = %195.0
  dr              %198.2 = CallTarget@0x56096cf10d70[Call#22]
  goto BB94
BB94   <- [196, 198]
  val?^ | miss    %94.0 = Phi                      %196.1:BB196, %198.1:BB198
  val?^ | miss    %94.1 = %94.0
  dr              %94.2 = Phi                      %196.2:BB196, %198.2:BB198
  dr              %94.3 = %94.2
  fs              %94.4 = FrameState         R     0x56096ca98270+1140: [%193.2], env=e0.2
  void                    Deopt              !v    %94.4, %94.3, %94.1   !
BB111   <- [197]
  prom-           %111.0 = MkArg                    %193.1, as[0x56096d10e380]_p49 (!refl), e0.2
  val?~           %111.1 = CastType                 up %111.0
  fs              %111.2 = FrameState         R     0x56096ca98270+1186: [%193.3], env=e0.2
  prom-           %111.3 = MkArg                    unboundValue, as[0x56096d10e380]_p48, e0.2
  val?^           %111.4 = CastType                 up %111.3
  (cls|spec|blt)  %111.5 = LdFun              !v    get, R_BaseNamespace
  env             e111.6 = (MkEnv)            l     x=%111.4, parent=R_BaseNamespace, context 0
  fs              %111.7 = FrameState         R     0x56096ca09830+69: [<blt is.logical>], env=e111.6, next=%111.2
  fs              %111.8 = FrameState         R     0x56096cf1b680+32(pr): [], env=e0.2, next=%111.7
  env             e111.9 = (MkEnv)            l     fun=%111.1, parent=R_BaseNamespace, context 0
  fs              %111.10 = FrameState         R     0x56096cd425e0+112: [%111.5], env=e111.9, next=%111.8
  void                    Deopt              !v    %111.10, DeadCall@0x56096cf0d7e8[Call#3], %111.5   !
BB99   <- [197]
  val+            %99.0 = CallSafeBuiltin    wed   body(%193.1)    <lgl$->
  val+            %99.1 = CallSafeBuiltin    wed   is.logical(%99.0)    <lgl$->
  lgl$#-          %99.2 = IsType                   %99.1 isA lgl$-
  void                    Branch                   %99.2 -> BB199 (if true) | BB200 (if false)
BB199   <- [99]
  lgl$-           %199.0 = CastType           d     dn %99.1
  lgl$-           %199.1 = AsLogical                %199.0
  lgl$#-          %199.2 = Identical                %199.1, false
  void                    Branch                   %199.2 -> BB110 (if true) | BB102 (if false)
BB200   <- [99]
  void                    Nop                !     
  val+            %200.1 = %99.1
  dr              %200.2 = Typecheck@0x56096c780878[Type#2]
  goto BB100
BB110   <- [199]
  void                    Nop                !     
  lgl$-           %110.1 = %199.1
  goto BB103
BB102   <- [199]
  lgl$#-          %102.0 = IsType                   %99.0 isA lgl$-
  void                    Branch                   %102.0 -> BB201 (if true) | BB202 (if false)
BB100   <- [200, 202, 204]
  val?^ | miss    %100.0 = Phi                      %200.1:BB200, %202.1:BB202, %204.1:BB204
  val?^ | miss    %100.1 = %100.0
  dr              %100.2 = Phi                      %200.2:BB200, %202.2:BB202, %204.2:BB204
  dr              %100.3 = %100.2
  fs              %100.4 = FrameState         R     0x56096ca98270+1186: [%193.3], env=e0.2
  prom-           %100.5 = MkArg                    %99.0, as[0x56096d10e380]_p48 (!refl), e0.2
  val?~           %100.6 = CastType                 up %100.5
  env             e100.7 = (MkEnv)            l     x=%100.6, parent=R_BaseNamespace, context 0
  fs              %100.8 = FrameState         R     0x56096ca09830+91: [%99.1], env=e100.7, next=%100.4
  void                    Deopt              !v    %100.8, %100.3, %100.1   !
BB103   <- [110, 201]
  lgl$-           %103.0 = Phi                      %201.1:BB201, %110.1:BB110
  lgl$-           %103.1 = %103.0
  lgl$-           %103.2 = AsLogical                %103.1
  lgl$#-          %103.3 = Identical                %103.2, false
  void                    Branch                   %103.3 -> BB109 (if true) | BB104 (if false)
BB201   <- [102]
  lgl$-           %201.0 = AsLogical                %199.1
  lgl$-           %201.1 = %201.0
  goto BB103
BB202   <- [102]
  void                    Nop                !     
  val+            %202.1 = %99.0
  dr              %202.2 = Typecheck@0x56096c780878[Type#4]
  goto BB100
BB109   <- [103]
  void                    Nop                !     
  lgl$-           %109.1 = %103.2
  goto BB105
BB104   <- [103]
  lgl$#-          %104.0 = IsType                   %99.0 isA lgl$-
  void                    Branch                   %104.0 -> BB203 (if true) | BB204 (if false)
BB105   <- [109, 203]
  lgl$-           %105.0 = Phi                      %203.5:BB203, %109.1:BB109
  lgl$-           %105.1 = %105.0
  lgl$-           %105.2 = AsLogical                %105.1
  lgl$#-          %105.3 = Identical                %105.2, false
  void                    Branch                   %105.3 -> BB108 (if true) | BB106 (if false)
BB203   <- [104]
  lgl$-           %203.0 = CastType           d     dn %99.0
  lgl$-           %203.1 = CallSafeBuiltin    wed   is.na(%203.0)    <lgl$->
  lgl$-           %203.2 = Not                d     %203.1, elided
  lgl$-           %203.3 = AsLogical                %203.2
  lgl$-           %203.4 = LAnd                     %103.2, %203.3
  lgl$-           %203.5 = %203.4
  goto BB105
BB204   <- [104]
  void                    Nop                !     
  val+            %204.1 = %99.0
  dr              %204.2 = Typecheck@0x56096c780878[Type#8]
  goto BB100
BB108   <- [105]
  void                    Nop                !     
  lgl$-           %108.1 = %105.2
  goto BB107
BB106   <- [105]
  lgl$-           %106.0 = AsLogical          e     %99.0
  lgl$-           %106.1 = LAnd                     %105.2, %106.0
  lgl$-           %106.2 = %106.1
  goto BB107
BB107   <- [108, 106]
  lgl$-           %107.0 = Phi                      %106.2:BB106, %108.1:BB108
  lgl$-           %107.1 = %107.0
  lgl$-           %107.2 = AsLogical                %107.1
  lgl$-           %107.3 = LOr                      %193.3, %107.2
  lgl$-           %107.4 = %107.3
  goto BB97
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     possibleExtends, e0.0
  prom-           %0.2  = MkArg                    unboundValue, as[0x56096d10e380]_p2, e0.0
  prom-           %0.3  = MkArg                    unboundValue, as[0x56096d10e380]_p3, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    thisClass, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 3:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    Class, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 4:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    object, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <(str|cls)>
  void                    Return             l     %0.3
Prom 5:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    thisClass, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$+>
  void                    Return             l     %0.3
Prom 6:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    Class, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 7:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    Class, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 8:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    thisClass, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$+>
  void                    Return             l     %0.3
Prom 9:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 10:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    coerceFun, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 11:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     environment, <0x56096a38cb68>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, as[0x56096d10e380]_p12, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <env->
  void                    Return             l     %0.3
Prom 12:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    coerceFun, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 13:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    thisClass, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$+>
  void                    Return             l     %0.3
Prom 14:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    Class, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 15:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    coerceFun, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 16:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    coerceMethods, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 17:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 18:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    object, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 19:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    sig, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str+>
  void                    Return             l     %0.3
Prom 20:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    coerceFun, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 21:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     getMethodsForDispatch, <0x56096cd37620>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, as[0x56096d10e380]_p22, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <env->
  void                    Return             l     %0.3
Prom 22:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    coerceFun, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 23:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    object, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 24:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    Class, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 25:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    sig, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str+>
  void                    Return             l     %0.3
Prom 26:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    asMethod, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 27:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    coerceFun, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 28:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    inherited, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <lgl$->
  void                    Return             l     %0.3
Prom 29:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    asMethod, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls->
  void                    Return             l     %0.3
Prom 30:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    thisClass, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$+>
  void                    Return             l     %0.3
Prom 31:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    ClassDef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <other>
  void                    Return             l     %0.3
Prom 32:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 33:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    Class, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 34:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 35:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    ext, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <other>
  void                    Return             l     %0.3
Prom 36:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    ext, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <other>
  void                    Return             l     %0.3
Prom 37:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    ext, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 38:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    test, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 39:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, <0x560969fe5bd8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, as[0x56096d10e380]_p40, e0.0
  prom-           %0.3  = MkArg                    unboundValue, as[0x56096d10e380]_p41, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <cls->
  void                    Return             l     %0.4
Prom 40:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    ext, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 41:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    coerce, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 42:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, <0x560969fe5bd8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, as[0x56096d10e380]_p43, e0.0
  prom-           %0.3  = MkArg                    unboundValue, as[0x56096d10e380]_p44, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <lgl$->
  void                    Return             l     %0.4
Prom 43:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    ext, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 44:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    simple, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 45:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    Class, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 46:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    ClassDef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 47:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 48:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     body, <0x56096cbd92a8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, as[0x56096d10e380]_p49, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <lgl$->
  void                    Return             l     %0.3
Prom 49:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    test, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls->
  void                    Return             l     %0.3
Prom 52:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     class, e0.0
  prom-           %0.2  = MkArg                    unboundValue, as[0x56096d10e380]_p53, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 53:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    from, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 54:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    from, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 55:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    .Data, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3

│ as[0x56096d10e380]                                                           │
└──────────────────────────────────────────────────────────────────────────────┘
