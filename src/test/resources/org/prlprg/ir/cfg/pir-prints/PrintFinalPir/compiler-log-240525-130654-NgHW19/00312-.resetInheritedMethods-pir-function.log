
┌──────────────────────────────────────────────────────────────────────────────┐
│ .resetInheritedMethods[0x56096d5fd6b0]                                       │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch                                      │
│ Properties:                                                                  │
├────── Final PIR Version
.resetInheritedMethods[0x56096d5fd6b0]
BB0
  val?^           %0.0  = LdArg                    1
  val?^           %0.1  = LdArg                    0
  val?^ | miss    %0.2  = LdVar              eR    character, <env 0x56096a5ed378>
  lgl$#-          %0.3  = Identical                %0.2, function(length=0L) <(rir::DispatchTable*)0x56|...
  void                    Branch                   %0.3 -> BB45 (if true) | BB46 (if false)
BB45   <- [0]
  str-            %45.0 = CallSafeBuiltin    wed   vector("character", 0L)    <str->
  val?^ | miss    %45.1 = LdVar              eR    names, <env 0x56096a5ed378>
  lgl$#-          %45.2 = Identical                <blt names>, %45.1   <true>
  void                    Branch                   %45.2 -> BB47 (if true) | BB48 (if false)
BB46   <- [0]
  env             e46.0 = (MkEnv)            l     fenv=%0.1, mtable=%0.0, parent=<env 0x56096a5ed378>, context 1
  fs              %46.1 = FrameState         R     0x56096cdce780+0: [], env=e46.0
  void                    Deopt              !v    %46.1, CallTarget@0x56096d2dafd8[Call#0], %0.2
BB47   <- [45]
  env             e47.0 = MkEnv              l     fenv=%0.1, mtable=%0.0, allObjects=%45.0, parent=<env 0x56096a5ed378>, context 1
  val?            %47.1 = Force!<lazy>       !v    %0.0, e47.0   <env->
  lgl$#-          %47.2 = IsType                   %47.1 isA val?-
  void                    Branch                   %47.2 -> BB49 (if true) | BB50 (if false)
BB48   <- [45]
  env             e48.0 = (MkEnv)            l     fenv=%0.1, mtable=%0.0, parent=<env 0x56096a5ed378>, context 1
  fs              %48.1 = FrameState         R     0x56096cdce780+27: [], env=e48.0
  env             e48.2 = (MkEnv)            l     length=0L, parent=R_BaseNamespace, context 0
  fs              %48.3 = FrameState         R     0x56096c420c30+33: [%45.0], env=e48.2, next=%48.1
  void                    Deopt              !v    %48.3, DeadBranchReached@0x56096d2dafd8[Test#0], %45.2
BB49   <- [47]
  val?-           %49.0 = CastType           d     dn %47.1   <env->
  val+            %49.1 = CallSafeBuiltin    wed   names(%49.0)    <str$->
  void                    StVar              lW    direct, %49.1, e47.0
  (cls|spec|blt)  %49.3 = LdFun              !v    $, <0x560969fe5c10>, e47.0
  prom-           %49.4 = MkArg                    unboundValue, .resetInheritedMethods[0x56096d5fd6b0]_p0, e47.0
  prom-           %49.5 = MkArg                    unboundValue, .resetInheritedMethods[0x56096d5fd6b0]_p1, e47.0
  val?            %49.6 = Call               !v    %49.3(%49.4, %49.5) e47.0   <(nil|env)->
  lgl$-           %49.7 = Is                       %49.6, NULL
  void                    StVar              lW    allTable, %49.6, e47.0
  lgl$-           %49.9 = Not                d     %49.7, elided
  lgl$#-          %49.10 = CheckTrueFalse     e     %49.9
  void                    Branch                   %49.10 -> BB41 (if true) | BB9 (if false)
BB50   <- [47]
  fs              %50.0 = FrameState         R     0x56096cdce780+110: [<blt names>, %47.1], env=e47.0
  void                    Deopt              !v    %50.0, Typecheck@0x56096d2dafd8[Type#2], %47.1   !
BB41   <- [49]
  val?^ | miss    %41.0 = LdVar              eR    names, e47.0
  lgl$#-          %41.1 = Identical                <blt names>, %41.0   <true>
  void                    Branch                   %41.1 -> BB51 (if true) | BB52 (if false)
BB9   <- [49]
  val?^ | miss    %9.0  = LdVar              eR    new.env, e47.0
  lgl$#-          %9.1  = Identical                %9.0, function(hash=TRUE, parent=parent.frame(), siz|...
  void                    Branch                   %9.1 -> BB53 (if true) | BB54 (if false)
BB51   <- [41]
  val             %51.0 = ChkMissing         e     %49.6
  lgl$#-          %51.1 = IsType                   %49.6 isA val?-
  void                    Branch                   %51.1 -> BB55 (if true) | BB56 (if false)
BB52   <- [41]
  void                    Nop                !     
  lgl$#-          %52.1 = %41.1
  dr              %52.2 = DeadBranchReached@0x56096d2dafd8[Test#1]
  goto BB7
BB53   <- [9]
  val?^ | miss    %53.0 = LdVar              eR    fenv, e47.0
  val?            %53.1 = Force!<wrapped>    !v    %53.0, e47.0   <env->
  lgl$#-          %53.2 = IsType                   %53.1 isA val?+
  void                    Branch                   %53.2 -> BB57 (if true) | BB58 (if false)
BB54   <- [9]
  void                    Nop                !     
  val?^ | miss    %54.1 = %9.0
  dr              %54.2 = CallTarget@0x56096d2dafd8[Call#3]
  goto BB7
BB55   <- [51]
  val?-           %55.0 = CastType           d     dn %49.6   <(nil|env)->
  val+            %55.1 = CallSafeBuiltin    wed   names(%55.0)    <str$->
  void                    StVar              lW    allObjects, %55.1, e47.0
  val?^ | miss    %55.3 = LdVar              eR    remove, e47.0
  lgl$#-          %55.4 = Identical                %55.3, function(..., list=character(), pos=-(1), envi|...
  void                    Branch                   %55.4 -> BB59 (if true) | BB60 (if false)
BB56   <- [51]
  void                    Nop                !     
  val?            %56.1 = %49.6
  dr              %56.2 = Typecheck@0x56096d2dafd8[Type#6]
  goto BB7
BB7   <- [52, 54, 56]
  val?^ | miss    %7.0  = Phi                      %52.1:BB52, %54.1:BB54, %56.1:BB56
  val?^ | miss    %7.1  = %7.0
  dr              %7.2  = Phi                      %52.2:BB52, %54.2:BB54, %56.2:BB56
  dr              %7.3  = %7.2
  fs              %7.4  = FrameState         R     0x56096cdce780+199: [%49.6], env=e47.0
  void                    Deopt              !v    %7.4, %7.3, %7.1   !
BB57   <- [53]
  val?+           %57.0 = CastType           d     dn %53.1   <env+>
  val+            %57.1 = CallSafeBuiltin    wed   new.env(true, %57.0, 29L)    <env->
  void                    StVar              lW    allTable, %57.1, e47.0
  val?^ | miss    %57.3 = LdVar              eR    assign, e47.0
  lgl$#-          %57.4 = Identical                %57.3, function(x, value, pos=-(1), envir=as.environm|...
  void                    Branch                   %57.4 -> BB65 (if true) | BB66 (if false)
BB58   <- [53]
  prom-           %58.0 = MkArg                    unboundValue, .resetInheritedMethods[0x56096d5fd6b0]_p2, e47.0
  val?^           %58.1 = CastType                 up %58.0
  fs              %58.2 = FrameState         R     0x56096cdce780+248: [], env=e47.0
  env             e58.3 = (MkEnv)            l     size(miss)=29L, parent=%58.1, hash=true, parent=R_BaseNamespace, context 0
  fs              %58.4 = FrameState         R     0x56096c4b99e0+23: [true], env=e58.3, next=%58.2
  fs              %58.5 = FrameState         R     0x56096d02c290+5(pr): [%53.1], env=e47.0, next=%58.4
  void                    Deopt              !v    %58.5, Typecheck@0x56096c3be0b0[Type#2], %53.1   !
BB59   <- [55]
  prom-           %59.0 = MkArg                    unboundValue, .resetInheritedMethods[0x56096d5fd6b0]_p12, e47.0
  prom-           %59.1 = MkArg                    unboundValue, .resetInheritedMethods[0x56096d5fd6b0]_p15 (!refl), e47.0
  val?            %59.2 = StaticCall         !v    remove[0x56096d34bd10](missingArg, %59.0, missingArg, %59.1) { 1n 3n } e47.0
  goto BB14
BB60   <- [55]
  fs              %60.0 = FrameState         R     0x56096cdce780+427: [], env=e47.0
  void                    Deopt              !v    %60.0, CallTarget@0x56096d2dafd8[Call#6], %55.3   !
BB65   <- [57]
  prom-           %65.0 = MkArg                    unboundValue, .resetInheritedMethods[0x56096d5fd6b0]_p3 (!refl), e47.0
  prom-           %65.1 = MkArg                    unboundValue, .resetInheritedMethods[0x56096d5fd6b0]_p4, e47.0
  val?            %65.2 = StaticCall         !v    assign[0x56096d366770](".AllMTable", %65.0, missingArg, %65.1) { 0 1 3n } e47.0
  goto BB14
BB66   <- [57]
  fs              %66.0 = FrameState         R     0x56096cdce780+262: [], env=e47.0
  void                    Deopt              !v    %66.0, CallTarget@0x56096d2dafd8[Call#4], %57.3   !
BB14   <- [59, 65]
  val?^ | miss    %14.0 = LdVar              eR    anyNA, e47.0
  lgl$#-          %14.1 = Identical                <blt anyNA>, %14.0   <true>
  void                    Branch                   %14.1 -> BB61 (if true) | BB62 (if false)
BB61   <- [14]
  val?^ | miss    %61.0 = LdVar              eR    match, e47.0
  lgl$#-          %61.1 = Identical                %61.0, function(x, table, nomatch=NA, incomparables=N|...
  void                    Branch                   %61.1 -> BB63 (if true) | BB64 (if false)
BB62   <- [14]
  void                    Nop                !     
  lgl$#-          %62.1 = %14.1
  dr              %62.2 = DeadBranchReached@0x56096d2dafd8[Test#2]
  goto BB15
BB63   <- [61]
  val?^ | miss    %63.0 = LdVar              eR    direct, e47.0
  lgl$#-          %63.1 = IsType                   %63.0 isA val?~- | miss
  void                    Branch                   %63.1 -> BB67 (if true) | BB68 (if false)
BB64   <- [61]
  void                    Nop                !     
  val?^ | miss    %64.1 = %61.0
  dr              %64.2 = CallTarget@0x56096d2dafd8[Call#10]
  goto BB15
BB15   <- [62, 64, 68]
  val?^ | miss    %15.0 = Phi                      %62.1:BB62, %64.1:BB64, %68.1:BB68
  val?^ | miss    %15.1 = %15.0
  dr              %15.2 = Phi                      %62.2:BB62, %64.2:BB64, %68.2:BB68
  dr              %15.3 = %15.2
  fs              %15.4 = FrameState         R     0x56096cdce780+482: [], env=e47.0
  void                    Deopt              !v    %15.4, %15.3, %15.1   !
BB67   <- [63]
  val?~- | miss   %67.0 = CastType           d     dn %63.0
  val?-           %67.1 = Force!<value>            %67.0,    <str$->
  val?^ | miss    %67.2 = LdVar              eR    allObjects, e47.0
  val?            %67.3 = Force!<value>      !v    %67.2, e47.0   <str->
  lgl$#-          %67.4 = IsType                   %67.3 isA val?+
  void                    Branch                   %67.4 -> BB69 (if true) | BB70 (if false)
BB68   <- [63]
  void                    Nop                !     
  val?^ | miss    %68.1 = %63.0
  dr              %68.2 = Typecheck@0x56096d2dafd8[Type#21]
  goto BB15
BB69   <- [67]
  val?+           %69.0 = CastType           d     dn %67.3   <(int|str)+>
  val+            %69.1 = CallSafeBuiltin    wed   match(%67.1, %69.0, NA, nil)    <int$->
  lgl$#-          %69.2 = IsType                   %69.1 isA int$-
  void                    Branch                   %69.2 -> BB71 (if true) | BB72 (if false)
BB70   <- [67]
  fs              %70.0 = FrameState         R     0x56096cdce780+579: [<blt anyNA>], env=e47.0
  prom-           %70.1 = MkArg                    unboundValue, .resetInheritedMethods[0x56096d5fd6b0]_p6, e47.0
  val?^           %70.2 = CastType                 up %70.1
  prom-           %70.3 = MkArg                    %67.1, .resetInheritedMethods[0x56096d5fd6b0]_p5 (!refl), e47.0
  val?~           %70.4 = CastType                 up %70.3
  env             e70.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%70.2, x=%70.4, parent=R_BaseNamespace, context 0
  fs              %70.6 = FrameState         R     0x56096a7fad40+23: [%67.1], env=e70.5, next=%70.0
  fs              %70.7 = FrameState         R     0x56096cd9c740+5(pr): [%67.3], env=e47.0, next=%70.6
  void                    Deopt              !v    %70.7, Typecheck@0x56096a84dcb0[Type#1], %67.3   !
BB71   <- [69]
  int$-           %71.0 = CastType           d     dn %69.1
  val+            %71.1 = CallSafeBuiltin    wed   anyNA(%71.0)    <lgl$->
  lgl$#-          %71.2 = IsType                   %71.1 isA lgl$-
  void                    Branch                   %71.2 -> BB73 (if true) | BB74 (if false)
BB72   <- [69]
  fs              %72.0 = FrameState         R     0x56096cdce780+579: [<blt anyNA>], env=e47.0
  prom-           %72.1 = MkArg                    %69.0, .resetInheritedMethods[0x56096d5fd6b0]_p6 (!refl), e47.0
  val?~           %72.2 = CastType                 up %72.1
  prom-           %72.3 = MkArg                    %67.1, .resetInheritedMethods[0x56096d5fd6b0]_p5 (!refl), e47.0
  val?~           %72.4 = CastType                 up %72.3
  env             e72.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%72.2, x=%72.4, parent=R_BaseNamespace, context 0
  fs              %72.6 = FrameState         R     0x56096a7fad40+69: [%69.1], env=e72.5, next=%72.0
  void                    Deopt              !v    %72.6, Typecheck@0x56096d2dafd8[Type#23], %69.1   !
BB73   <- [71]
  lgl$-           %73.0 = CastType           d     dn %71.1
  lgl$#-          %73.1 = CheckTrueFalse     e     %73.0
  void                    Branch                   %73.1 -> BB40 (if true) | BB23 (if false)
BB74   <- [71]
  void                    Nop                !     
  val+            %74.1 = %71.1
  dr              %74.2 = Typecheck@0x56096d2dafd8[Type#24]
  goto BB21
BB40   <- [73]
  val?^ | miss    %40.0 = LdVar              eR    list2env, e47.0
  lgl$#-          %40.1 = Identical                %40.0, function(x, envir=NULL, parent=parent.frame(),|...
  void                    Branch                   %40.1 -> BB77 (if true) | BB78 (if false)
BB23   <- [73]
  void                    Nop                !     
  goto BB24
BB21   <- [74, 78]
  val?^ | miss    %21.0 = Phi                      %74.1:BB74, %78.1:BB78
  val?^ | miss    %21.1 = %21.0
  dr              %21.2 = Phi                      %74.2:BB74, %78.2:BB78
  dr              %21.3 = %21.2
  fs              %21.4 = FrameState         R     0x56096cdce780+601: [%71.1], env=e47.0
  void                    Deopt              !v    %21.4, %21.3, %21.1   !
BB77   <- [40]
  prom-           %77.0 = MkArg                    unboundValue, .resetInheritedMethods[0x56096d5fd6b0]_p9, e47.0
  prom-           %77.1 = MkArg                    unboundValue, .resetInheritedMethods[0x56096d5fd6b0]_p11, e47.0
  val?            %77.2 = StaticCall         !v    list2env[0x56096cda3250](%77.0, %77.1) e47.0
  goto BB24
BB78   <- [40]
  void                    Nop                !     
  val?^ | miss    %78.1 = %40.0
  dr              %78.2 = CallTarget@0x56096d2dafd8[Call#11]
  goto BB21
BB24   <- [23, 77]
  val?^ | miss    %24.0 = LdVar              eR    direct, e47.0
  lgl$#-          %24.1 = IsType                   %24.0 isA val?~- | miss
  void                    Branch                   %24.1 -> BB75 (if true) | BB76 (if false)
BB75   <- [24]
  val?~- | miss   %75.0 = CastType           d     dn %24.0
  val?-           %75.1 = Force!<value>            %75.0,    <str$->
  int$-           %75.2 = Length                   %75.1
  int$-           %75.3 = Inc                      0L
  lgl$-           %75.4 = Lt                 d     %75.2, %75.3, elided   <false>
  lgl$#-          %75.5 = Identical                %75.4, true
  void                    Branch                   %75.5 -> BB80 (if true) | BB79 (if false)
BB76   <- [24]
  void                    Nop                !     
  val?^ | miss    %76.1 = %24.0
  dr              %76.2 = Typecheck@0x56096d2dafd8[Type#28]
  goto BB25
BB80   <- [75]
  void                    Nop                !     
  lgl$#-          %80.1 = %75.5
  dr              %80.2 = DeadBranchReached@0x56096d2dafd8[Test#3]
  goto BB25
BB79   <- [75]
  val?            %79.0 = Extract2_1D        wed   %75.1, %75.3, elided
  void                    StVar              lW    d, %79.0, e47.0
  val?^ | miss    %79.2 = LdVar              eR    allTable, e47.0
  lgl$#-          %79.3 = IsType                   %79.2 isA val?~- | miss
  void                    Branch                   %79.3 -> BB81 (if true) | BB82 (if false)
BB25   <- [76, 80]
  val?^ | miss    %25.0 = Phi                      %76.1:BB76, %80.1:BB80
  val?^ | miss    %25.1 = %25.0
  dr              %25.2 = Phi                      %76.2:BB76, %80.2:BB80
  dr              %25.3 = %25.2
  fs              %25.4 = FrameState         R     0x56096cdce780+655: [], env=e47.0
  void                    Deopt              !v    %25.4, %25.3, %25.1   !
BB81   <- [79]
  val?~- | miss   %81.0 = CastType           d     dn %79.2
  val?-           %81.1 = Force!<value>            %81.0,    <env->
  lgl$#-          %81.2 = IsType                   %81.1 isA val+   <true>
  void                    Branch                   %81.2 -> BB83 (if true) | BB84 (if false)
BB82   <- [79]
  void                    Nop                !     
  val?^ | miss    %82.1 = %79.2
  dr              %82.2 = Typecheck@0x56096d2dafd8[Type#29]
  goto BB27
BB83   <- [81]
  val             %83.0 = ChkMissing         e     %79.0
  lgl$#-          %83.1 = IsType                   %83.0 isA val?~- | miss
  void                    Branch                   %83.1 -> BB85 (if true) | BB86 (if false)
BB84   <- [81]
  void                    Nop                !     
  lgl$#-          %84.1 = %81.2
  dr              %84.2 = DeadBranchReached@0x56096d2dafd8[Test#4]
  goto BB27
BB27   <- [82, 84, 86]
  val?^ | miss    %27.0 = Phi                      %82.1:BB82, %84.1:BB84, %86.1:BB86
  val?^ | miss    %27.1 = %27.0
  dr              %27.2 = Phi                      %82.2:BB82, %84.2:BB84, %86.2:BB86
  dr              %27.3 = %27.2
  fs              %27.4 = FrameState         R     0x56096cdce780+709: [%75.1, %75.2, %75.3], env=e47.0
  void                    Deopt              !v    %27.4, %27.3, %27.1   !
BB85   <- [83]
  val-            %85.0 = CastType           d     dn %83.0   <str$->
  val?            %85.1 = Extract2_1D        wed   %81.1, %85.0, elided   <cls>
  void                    StVar              lW    m, %85.1, e47.0
  val?^ | miss    %85.3 = LdVar              eR    is, e47.0
  lgl$#-          %85.4 = Identical                %85.3, function(object, class2) <(rir::DispatchTable*|...
  void                    Branch                   %85.4 -> BB87 (if true) | BB88 (if false)
BB86   <- [83]
  void                    Nop                !     
  val             %86.1 = %83.0
  dr              %86.2 = Typecheck@0x56096d2dafd8[Type#31]
  goto BB27
BB87   <- [85]
  prom-           %87.0 = MkArg                    unboundValue, .resetInheritedMethods[0x56096d5fd6b0]_p7 (!refl), e47.0
  val?            %87.1 = Call               !v    function(object, class2) <(rir::DispatchTable*|...(%87.0, "MethodWithNext") e47.0   <lgl$->
  lgl$#-          %87.2 = IsType                   %87.1 isA lgl$-
  void                    Branch                   %87.2 -> BB89 (if true) | BB90 (if false)
BB88   <- [85]
  fs              %88.0 = FrameState         R     0x56096cdce780+784: [%75.1, %75.2, %75.3], env=e47.0
  void                    Deopt              !v    %88.0, CallTarget@0x56096d2dafd8[Call#13], %85.3   !
BB89   <- [87]
  lgl$-           %89.0 = CastType           d     dn %87.1
  lgl$#-          %89.1 = CheckTrueFalse     e     %89.0
  void                    Branch                   %89.1 -> BB39 (if true) | BB33 (if false)
BB90   <- [87]
  fs              %90.0 = FrameState         R     0x56096cdce780+821: [%75.1, %75.2, %75.3, %87.1], env=e47.0
  void                    Deopt              !v    %90.0, Typecheck@0x56096d2dafd8[Type#34], %87.1   !
BB39   <- [89]
  (cls|spec|blt)  %39.0 = LdFun              !v    as, e47.0
  fs              %39.1 = FrameState         R     0x56096cdce780+842: [%75.1, %75.2, %75.3, %39.0], env=e47.0
  void                    Deopt              !v    %39.1, DeadCall@0x56096d2dafd8[Call#14], %39.0   !
BB33   <- [89]
  int$-           %33.0 = Inc                      %75.3
  lgl$-           %33.1 = Lt                 d     %75.2, %33.0, elided
  lgl$#-          %33.2 = Identical                %33.1, true
  void                    Branch                   %33.2 -> BB38 (if true) | BB34 (if false)
BB38   <- [33]
  void                    Visible            v     
  void                    Return             l     nil
BB34   <- [33]
  val?            %34.0 = Extract2_1D        wed   %75.1, %33.0, elided
  void                    StVar              lW    d, %34.0, e47.0
  val?^ | miss    %34.2 = LdVar              eR    allTable, e47.0
  val?            %34.3 = Force!             !v    %34.2, e47.0   <val?_>
  lgl$#-          %34.4 = IsType                   %34.3 isA val+   <@?>
  void                    Branch                   %34.4 -> BB37 (if true) | BB35 (if false)
BB37   <- [34]
  val?^ | miss    %37.0 = LdVar              eR    d, e47.0
  val?            %37.1 = Force!             !v    %37.0, e47.0   <val?_>
  val?            %37.2 = %37.1
  goto BB36
BB35   <- [34]
  prom-           %35.0 = MkArg                    unboundValue, .resetInheritedMethods[0x56096d5fd6b0]_p8, e47.0
  prom-           %35.1 = %35.0
  goto BB36
BB36   <- [35, 37]
  val?            %36.0 = Phi                      %37.2:BB37, %35.1:BB35
  val?            %36.1 = %36.0
  val?            %36.2 = Extract2_1D        !v    %34.3, %36.1, e47.0   <val?_>
  void                    StVar              lW    m, %36.2, e47.0
  (cls|spec|blt)  %36.4 = LdFun              !v    is, e47.0
  fs              %36.5 = FrameState         R     0x56096cdce780+1026: [%75.1, %75.2, %33.0, %36.4], env=e47.0
  void                    Deopt              !v    %36.5, DeadCall@0x56096d2dafd8[Call#15], %36.4   !
Prom 0:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fenv, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    .AllMTable, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fenv, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 3:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    allTable, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 4:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fenv, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 5:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    direct, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 6:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    allObjects, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 7:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    m, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 8:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    d, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 9:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     as.list, <0x56096a110810>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .resetInheritedMethods[0x56096d5fd6b0]_p10, e0.0
  val?            %0.3  = NamedCall          !     %0.1(%0.2, all.names=true) e0.0   <vec$+>
  void                    Return             l     %0.3
Prom 10:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    mtable, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 11:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    allTable, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 12:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     setdiff, <0x56096a4fe350>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .resetInheritedMethods[0x56096d5fd6b0]_p13, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .resetInheritedMethods[0x56096d5fd6b0]_p14, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <str->
  void                    Return             l     %0.4
Prom 13:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    allObjects, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 14:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    direct, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 15:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    allTable, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <env->
  void                    Return             l     %0.3

│ .resetInheritedMethods[0x56096d5fd6b0]                                       │
└──────────────────────────────────────────────────────────────────────────────┘
