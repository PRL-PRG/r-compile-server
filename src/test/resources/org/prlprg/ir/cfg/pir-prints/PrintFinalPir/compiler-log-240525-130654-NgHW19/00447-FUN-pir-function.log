
┌──────────────────────────────────────────────────────────────────────────────┐
│ FUN[0x56096cc367d0]                                                          │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;Eager0,NonRefl0,!Obj0                │
│ Properties:                                                                  │
├────── Final PIR Version
FUN[0x56096cc367d0]
BB0
  val?~+          %0.0  = LdArg                    0
  val?^ | miss    %0.1  = LdVar              eR    is.primitive, ?
  lgl$#-          %0.2  = Identical                %0.1, function(x) <(rir::DispatchTable*)0x56096c254d|...
  void                    Branch                   %0.2 -> BB8 (if true) | BB9 (if false)
BB8   <- [0]
  env             e8.0  = MkEnv              l     what=%0.0, parent=?, context 1
  (cls|spec|blt)  %8.1  = LdFun              !v    get, <0x56096af0be78>, ?
  prom-           %8.2  = MkArg                    unboundValue, FUN[0x56096cc367d0]_p1 (!refl), e8.0
  prom-           %8.3  = MkArg                    unboundValue, FUN[0x56096cc367d0]_p2, e8.0
  val?            %8.4  = NamedCall          !v    %8.1(%8.2, mode="function", envir=%8.3) e8.0   <cls>
  str$-           %8.5  = CallSafeBuiltin    wed   typeof(%8.4)    <str$->
  int$-           %8.6  = Length                   %8.5
  lgl$-           %8.7  = Eq                 d     %8.6, 1L, elided   <true>
  lgl$#-          %8.8  = Identical                %8.7, true
  void                    Branch                   %8.8 -> BB10 (if true) | BB11 (if false)
BB9   <- [0]
  env             e9.0  = (MkEnv)            l     what=%0.0, parent=?, context 1
  fs              %9.1  = FrameState         R     0x56096c1f80c0+0: [], env=e9.0
  void                    Deopt              !v    %9.1, CallTarget@0x56096c7810b8[Call#0], %0.1
BB10   <- [8]
  lgl$-           %10.0 = CallSafeBuiltin    wed   is.na(%8.5) 
  lgl$#-          %10.1 = CheckTrueFalse     e     %10.0   <false>
  void                    Branch                   %10.1 -> BB13 (if true) | BB12 (if false)
BB11   <- [8]
  prom-           %11.0 = MkArg                    %8.4, FUN[0x56096cc367d0]_p0 (!refl), e8.0
  val?~           %11.1 = CastType                 up %11.0
  env             e11.2 = (MkEnv)            l     x=%11.1, parent=R_BaseNamespace, context 0
  env             e11.3 = MaterializeEnv           , e11.2   <@?>
  fs              %11.4 = FrameState         R     0x56096c1f80c0+32: [], env=e8.0
  fs              %11.5 = FrameState         R     0x56096c0c20b0+32: [], env=e11.3, next=%11.4
  prom-           %11.6 = MkArg                    %8.4, FUN[0x56096cc367d0]_p3 (!refl), e11.3
  val?~           %11.7 = CastType                 up %11.6
  env             e11.8 = (MkEnv)            l     x=%11.7, parent=R_BaseNamespace, context -1
  fs              %11.9 = FrameState         R     0x56096c0a79f0+27: [%8.5], env=e11.8, next=%11.5
  void                    Deopt              !v    %11.9, DeadBranchReached@0x56096c56c7c8[Test#1], %8.8   !
BB13   <- [10]
  void                    Nop                !     
  lgl$#-          %13.1 = %10.1
  dr              %13.2 = DeadBranchReached@0x56096c56c7c8[Test#7]
  goto BB5
BB12   <- [10]
  lgl$-           %12.0 = Eq                 d     %8.5, special, elided
  lgl$#-          %12.1 = CheckTrueFalse     e     %12.0   <false>
  void                    Branch                   %12.1 -> BB15 (if true) | BB14 (if false)
BB5   <- [13, 15, 17]
  val?^ | miss    %5.0  = Phi                      %13.1:BB13, %15.1:BB15, %17.1:BB17
  val?^ | miss    %5.1  = %5.0
  dr              %5.2  = Phi                      %13.2:BB13, %15.2:BB15, %17.2:BB17
  dr              %5.3  = %5.2
  prom-           %5.4  = MkArg                    %8.4, FUN[0x56096cc367d0]_p0 (!refl), e8.0
  val?~           %5.5  = CastType                 up %5.4
  fs              %5.6  = FrameState         R     0x56096c1f80c0+32: [], env=e8.0
  env             e5.7  = (MkEnv)            l     x=%5.5, parent=R_BaseNamespace, context 0
  fs              %5.8  = FrameState         R     0x56096c0c20b0+240: [%8.5, %10.0], env=e5.7, next=%5.6
  void                    Deopt              !v    %5.8, %5.3, %5.1   !
BB15   <- [12]
  void                    Nop                !     
  lgl$#-          %15.1 = %12.1
  dr              %15.2 = DeadBranchReached@0x56096c56c7c8[Test#8]
  goto BB5
BB14   <- [12]
  lgl$-           %14.0 = Eq                 d     %8.5, builtin, elided
  lgl$#-          %14.1 = CheckTrueFalse     e     %14.0   <false>
  void                    Branch                   %14.1 -> BB17 (if true) | BB16 (if false)
BB17   <- [14]
  void                    Nop                !     
  lgl$#-          %17.1 = %14.1
  dr              %17.2 = DeadBranchReached@0x56096c56c7c8[Test#9]
  goto BB5
BB16   <- [14]
  void                    Visible            v     
  void                    Return             l     true
Prom 0:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     get, <0x56096af0be78>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, FUN[0x56096cc367d0]_p1, e0.0
  prom-           %0.3  = MkArg                    unboundValue, FUN[0x56096cc367d0]_p2, e0.0
  val?            %0.4  = NamedCall          !     %0.1(%0.2, mode="function", envir=%0.3) e0.0   <cls>
  void                    Return             l     %0.4
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    what, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    ns, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 3:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    x, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3

│ FUN[0x56096cc367d0]                                                          │
└──────────────────────────────────────────────────────────────────────────────┘
