
┌──────────────────────────────────────────────────────────────────────────────┐
│ functionArgs[0x55d000743730]                                                 │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch miss: 4                              │
│ Properties:                                                                  │
├────── Final PIR Version
functionArgs[0x55d000743730]
BB0
  val?^           %0.0  = LdArg                    1
  val?^           %0.1  = LdArg                    0
  env             e0.2  = MkEnv              l     fun=%0.1, text=%0.0, S3methods(miss)=missingArg, S4methods(miss)=missingArg, keep.dots(miss)=missingArg, add.args(miss)=missingArg, parent=<env 0x55cfff1f98c8>, context 1
  prom-           %0.3  = MkArg                    unboundValue, functionArgs[0x55d000743730]_p0, e0.2
  val?^ | miss    %0.4  = CastType                 up %0.3
  void                    StArg              lW    S3methods, %0.4, e0.2
  void                    StArg              lW    S4methods, false, e0.2
  prom-           %0.7  = MkArg                    unboundValue, functionArgs[0x55d000743730]_p4, e0.2
  val?^ | miss    %0.8  = CastType                 up %0.7
  void                    StArg              lW    keep.dots, %0.8, e0.2
  prom-           %0.10 = MkArg                    unboundValue, functionArgs[0x55d000743730]_p7, e0.2
  val?^ | miss    %0.11 = CastType                 up %0.10
  void                    StArg              lW    add.args, %0.11, e0.2
  val?^ | miss    %0.13 = LdVar              eR    length, <env 0x55cfff1f98c8>
  lgl$#-          %0.14 = Identical                <blt length>, %0.13   <true>
  void                    Branch                   %0.14 -> BB110 (if true) | BB111 (if false)
BB110   <- [0]
  val?            %110.0 = Force!<lazy>       !v    %0.1, e0.2   <str->
  lgl$#-          %110.1 = IsType                   %110.0 isA val?-
  void                    Branch                   %110.1 -> BB112 (if true) | BB113 (if false)
BB111   <- [0]
  fs              %111.0 = FrameState         R     0x55d000176300+0: [], env=e0.2
  void                    Deopt              !v    %111.0, DeadBranchReached@0x55d00013e2e0[Test#2], %0.14
BB112   <- [110]
  val?-           %112.0 = CastType           d     dn %110.0   <str->
  (int|real)$-    %112.1 = CallSafeBuiltin    wed   length(%112.0)    <int$->
  lgl$#-          %112.2 = IsType                   %112.1 isA int$-
  void                    Branch                   %112.2 -> BB114 (if true) | BB115 (if false)
BB113   <- [110]
  fs              %113.0 = FrameState         R     0x55d000176300+69: [<blt length>, %110.0], env=e0.2
  void                    Deopt              !v    %113.0, Typecheck@0x55d00013e2e0[Type#10], %110.0   !
BB114   <- [112]
  int$-           %114.0 = CastType           d     dn %112.1
  lgl$-           %114.1 = Lt                 d     %114.0, 1L, elided   <lgl$->
  lgl$-           %114.2 = AsLogical                %114.1
  lgl$#-          %114.3 = Identical                %114.2, true
  void                    Branch                   %114.3 -> BB108 (if true) | BB7 (if false)
BB115   <- [112]
  void                    Nop                !     
  (int|real)$-    %115.1 = %112.1
  dr              %115.2 = Typecheck@0x55d00013e2e0[Type#11]
  goto BB5
BB108   <- [114]
  void                    Nop                !     
  lgl$-           %108.1 = %114.2
  goto BB14
BB7   <- [114]
  val?^ | miss    %7.0  = LdVar              eR    any, e0.2
  lgl$#-          %7.1  = Identical                <blt any>, %7.0   <true>
  void                    Branch                   %7.1 -> BB116 (if true) | BB117 (if false)
BB5   <- [115, 117]
  val?^ | miss    %5.0  = Phi                      %115.1:BB115, %117.1:BB117
  val?^ | miss    %5.1  = %5.0
  dr              %5.2  = Phi                      %115.2:BB115, %117.2:BB117
  dr              %5.3  = %5.2
  fs              %5.4  = FrameState         R     0x55d000176300+91: [%112.1], env=e0.2
  void                    Deopt              !v    %5.4, %5.3, %5.1   !
BB14   <- [108, 138]
  lgl$-           %14.0 = Phi                      %138.3:BB138, %108.1:BB108
  lgl$-           %14.1 = %14.0
  lgl$#-          %14.2 = CheckTrueFalse     e     %14.1
  void                    Branch                   %14.2 -> BB107 (if true) | BB17 (if false)
BB116   <- [7]
  val?^ | miss    %116.0 = LdVar              eR    fun, e0.2
  val?            %116.1 = Force!<wrapped>    !v    %116.0, e0.2   <str$->
  lgl$#-          %116.2 = IsType                   %116.1 isA val?-
  void                    Branch                   %116.2 -> BB120 (if true) | BB121 (if false)
BB117   <- [7]
  void                    Nop                !     
  lgl$#-          %117.1 = %7.1
  dr              %117.2 = DeadBranchReached@0x55d00013e2e0[Test#3]
  goto BB5
BB107   <- [14]
  val?^ | miss    %107.0 = LdVar              eR    character, e0.2
  lgl$#-          %107.1 = Identical                %107.0, function(length=0L) <(rir::DispatchTable*)0x55|...
  void                    Branch                   %107.1 -> BB122 (if true) | BB123 (if false)
BB17   <- [14]
  val?^ | miss    %17.0 = LdVar              eR    specialFunctionArgs, e0.2
  lgl$#-          %17.1 = Identical                %17.0, function(fun, text) <(rir::DispatchTable*)0x55|...
  void                    Branch                   %17.1 -> BB118 (if true) | BB119 (if false)
BB120   <- [116]
  val?-           %120.0 = CastType           d     dn %116.1   <str$->
  lgl-            %120.1 = Eq                 wed   %120.0, "", elided   <lgl$->
  lgl$#-          %120.2 = IsType                   %120.1 isA lgl$-
  void                    Branch                   %120.2 -> BB126 (if true) | BB127 (if false)
BB121   <- [116]
  fs              %121.0 = FrameState         R     0x55d000176300+184: [%114.2, <blt any>, %116.1], env=e0.2
  void                    Deopt              !v    %121.0, Typecheck@0x55d00013e2e0[Type#15], %116.1   !
BB122   <- [107]
  str-            %122.0 = CallSafeBuiltin    vwed  vector("character", 0L)    <str->
  str-            %122.1 = %122.0
  goto BB85
BB123   <- [107]
  void                    Nop                !     
  val?^ | miss    %123.1 = %107.0
  dr              %123.2 = CallTarget@0x55d00013e2e0[Call#5]
  goto BB15
BB118   <- [17]
  prom-           %118.0 = MkArg                    unboundValue, functionArgs[0x55d000743730]_p9, e0.2
  val?^ | miss    %118.1 = LdVar              eR    fun, e0.2
  val?            %118.2 = Force!<wrapped>    !v    %118.1, e0.2   <str$->
  prom-           %118.3 = MkArg                    %118.2, functionArgs[0x55d000743730]_p8 (!refl), 
  val?            %118.4 = StaticCall         !v    specialFunctionArgs[0x55d0008a5a00](%118.3, %118.0) e0.2   <str->
  void                    StVar              lW    specialFunArgs, %118.4, e0.2
  val?^ | miss    %118.6 = LdVar              eR    S3methods, e0.2
  val?            %118.7 = Force!<lazy>       !v    %118.6, e0.2   <lgl$->
  lgl$-           %118.8 = AsLogical          e     %118.7
  lgl$#-          %118.9 = Identical                %118.8, false
  void                    Branch                   %118.9 -> BB106 (if true) | BB20 (if false)
BB119   <- [17]
  void                    Nop                !     
  val?^ | miss    %119.1 = %17.0
  dr              %119.2 = CallTarget@0x55d00013e2e0[Call#6]
  goto BB15
BB126   <- [120]
  lgl$-           %126.0 = CastType           d     dn %120.1
  val?            %126.1 = CallBuiltin        !v    any(%126.0) e0.2   <lgl$->
  lgl$#-          %126.2 = IsType                   %126.1 isA lgl$-
  void                    Branch                   %126.2 -> BB138 (if true) | BB139 (if false)
BB127   <- [120]
  fs              %127.0 = FrameState         R     0x55d000176300+196: [%114.2, <blt any>, %120.1], env=e0.2
  void                    Deopt              !v    %127.0, Typecheck@0x55d00013e2e0[Type#16], %120.1   !
BB85   <- [122, 190]
  val+            %85.0 = Phi                      %190.3:BB190, %122.1:BB122
  val+            %85.1 = %85.0
  void                    Return             l     %85.1
BB15   <- [119, 123]
  val?^ | miss    %15.0 = Phi                      %119.1:BB119, %123.1:BB123
  val?^ | miss    %15.1 = %15.0
  dr              %15.2 = Phi                      %119.2:BB119, %123.2:BB123
  dr              %15.3 = %15.2
  fs              %15.4 = FrameState         R     0x55d000176300+225: [%14.1], env=e0.2
  void                    Deopt              !v    %15.4, %15.3, %15.1   !
BB106   <- [118]
  void                    Nop                !     
  lgl$-           %106.1 = %118.8
  goto BB23
BB20   <- [118]
  val?^ | miss    %20.0 = LdVar              eR    exists, e0.2
  lgl$#-          %20.1 = Identical                %20.0, function(x, where=-(1), envir=if(missing(frame|...
  void                    Branch                   %20.1 -> BB124 (if true) | BB125 (if false)
BB138   <- [126]
  lgl$-           %138.0 = CastType           d     dn %126.1
  lgl$-           %138.1 = AsLogical                %138.0
  lgl$-           %138.2 = LOr                      %114.2, %138.1
  lgl$-           %138.3 = %138.2
  goto BB14
BB139   <- [126]
  fs              %139.0 = FrameState         R     0x55d000176300+218: [%114.2, %126.1], env=e0.2
  void                    Deopt              !v    %139.0, Typecheck@0x55d00013e2e0[Type#17], %126.1   !
BB23   <- [106, 128]
  lgl$-           %23.0 = Phi                      %128.3:BB128, %106.1:BB106
  lgl$-           %23.1 = %23.0
  lgl$#-          %23.2 = CheckTrueFalse     e     %23.1
  void                    Branch                   %23.2 -> BB101 (if true) | BB26 (if false)
BB124   <- [20]
  prom-           %124.0 = MkArg                    unboundValue, functionArgs[0x55d000743730]_p10, e0.2
  val?            %124.1 = StaticCall         !v    exists[0x55d000f99e00](%124.0, missingArg, missingArg, missingArg, "function") { 0 4n } e0.2   <lgl$->
  lgl$#-          %124.2 = IsType                   %124.1 isA lgl$-
  void                    Branch                   %124.2 -> BB128 (if true) | BB129 (if false)
BB125   <- [20]
  fs              %125.0 = FrameState         R     0x55d000176300+329: [%118.7], env=e0.2
  void                    Deopt              !v    %125.0, CallTarget@0x55d00013e2e0[Call#7], %20.0   !
BB101   <- [23]
  val?^ | miss    %101.0 = LdVar              eR    c, e0.2
  lgl$#-          %101.1 = Identical                <blt c>, %101.0   <true>
  void                    Branch                   %101.1 -> BB130 (if true) | BB131 (if false)
BB26   <- [23]
  void                    Nop                !     
  goto BB27
BB128   <- [124]
  lgl$-           %128.0 = CastType           d     dn %124.1
  lgl$-           %128.1 = AsLogical                %128.0
  lgl$-           %128.2 = LAnd                     %118.8, %128.1
  lgl$-           %128.3 = %128.2
  goto BB23
BB129   <- [124]
  fs              %129.0 = FrameState         R     0x55d000176300+386: [%118.8, %124.1], env=e0.2
  void                    Deopt              !v    %129.0, Typecheck@0x55d00013e2e0[Type#24], %124.1   !
BB130   <- [101]
  val?^ | miss    %130.0 = LdVar              eR    fun, e0.2
  val?            %130.1 = Force!<wrapped>    !v    %130.0, e0.2   <str$->
  val?^ | miss    %130.2 = LdVar              eR    tryCatch, e0.2
  lgl$#-          %130.3 = Identical                %130.2, function(expr, ..., finally) <(rir::DispatchTa|...
  void                    Branch                   %130.3 -> BB132 (if true) | BB133 (if false)
BB131   <- [101]
  fs              %131.0 = FrameState         R     0x55d000176300+393: [%23.1], env=e0.2
  void                    Deopt              !v    %131.0, DeadBranchReached@0x55d00013e2e0[Test#4], %101.1   !
BB27   <- [26, 136]
  val?^ | miss    %27.0 = LdVar              eR    S4methods, e0.2
  val?            %27.1 = Force!<lazy>       !v    %27.0, e0.2   <lgl$->
  lgl$#-          %27.2 = CheckTrueFalse     we    %27.1
  void                    Branch                   %27.2 -> BB100 (if true) | BB30 (if false)
BB132   <- [130]
  prom-           %132.0 = MkArg                    unboundValue, functionArgs[0x55d000743730]_p29, e0.2
  cls             %132.1 = MkCls                    functionArgs@Prom(31)0, e0.2
  prom-           %132.2 = MkArg                    %132.1, functionArgs[0x55d000743730]_p31 (!refl), e0.2
  cls             %132.3 = MkCls                    functionArgs@Prom(32)0, e0.2
  prom-           %132.4 = MkArg                    %132.3, functionArgs[0x55d000743730]_p32 (!refl), e0.2
  dots-           %132.5 = DotsList           l     warning=%132.2, error=%132.4
  val?            %132.6 = StaticCall         !v    tryCatch[0x55d000c5b9a0](%132.0, %132.5) { 0 1n 2n } e0.2   <nil->
  lgl$#-          %132.7 = IsType                   %132.6 isA val?-
  lgl$#-          %132.8 = IsType                   %130.1 isA val?-
  void                    Branch                   %132.8 -> BB134 (if true) | BB135 (if false)
BB133   <- [130]
  fs              %133.0 = FrameState         R     0x55d000176300+478: [<blt c>, %130.1], env=e0.2
  void                    Deopt              !v    %133.0, CallTarget@0x55d00013e2e0[Call#11], %130.2   !
BB100   <- [27]
  (cls|spec|blt)  %100.0 = LdFun              !v    warning, e0.2
  fs              %100.1 = FrameState         R     0x55d000176300+603: [%100.0], env=e0.2
  void                    Deopt              !v    %100.1, DeadCall@0x55d00013e2e0[Call#13], %100.0   !
BB30   <- [27]
  val?^ | miss    %30.0 = LdVar              eR    unique, e0.2
  lgl$#-          %30.1 = Identical                %30.0, function(x, incomparables=FALSE, ...) <(rir::D|...
  void                    Branch                   %30.1 -> BB140 (if true) | BB141 (if false)
BB134   <- [132]
  val?-           %134.0 = CastType           d     dn %130.1   <str$->
  void                    Branch                   %132.7 -> BB136 (if true) | BB137 (if false)
BB135   <- [132]
  void                    Nop                !     
  val?            %135.1 = %130.1
  dr              %135.2 = Typecheck@0x55d00013e2e0[Type#29]
  goto BB104
BB140   <- [30]
  val?^ | miss    %140.0 = LdVar              eR    unlist, e0.2
  lgl$#-          %140.1 = Identical                %140.0, function(x, recursive=TRUE, use.names=TRUE) <(|...
  void                    Branch                   %140.1 -> BB142 (if true) | BB143 (if false)
BB141   <- [30]
  void                    Nop                !     
  val?^ | miss    %141.1 = %30.0
  dr              %141.2 = CallTarget@0x55d00013e2e0[Call#14]
  goto BB28
BB136   <- [134]
  val?-           %136.0 = CastType           d     dn %132.6   <nil->
  val+            %136.1 = CallSafeBuiltin    wed   c(%134.0, %136.0)    <str$->
  void                    StVar              lW    fun, %136.1, e0.2
  goto BB27
BB137   <- [134]
  void                    Nop                !     
  val?            %137.1 = %132.6
  dr              %137.2 = Typecheck@0x55d00013e2e0[Type#32]
  goto BB104
BB104   <- [135, 137]
  val?^ | miss    %104.0 = Phi                      %135.1:BB135, %137.1:BB137
  val?^ | miss    %104.1 = %104.0
  dr              %104.2 = Phi                      %135.2:BB135, %137.2:BB137
  dr              %104.3 = %104.2
  fs              %104.4 = FrameState         R     0x55d000176300+537: [<blt c>, %130.1, %132.6], env=e0.2
  void                    Deopt              !v    %104.4, %104.3, %104.1   !
BB142   <- [140]
  prom-           %142.0 = MkArg                    unboundValue, functionArgs[0x55d000743730]_p19, e0.2
  val?            %142.1 = StaticCall         !v    unknown--fromConstant[0x55d0011b76a0](%142.0) from function(x, recursive=TRUE, use.names=TRUE) <(|... { 0 } e0.2   <str->
  val?            %142.2 = StaticCall         !v    unique[0x55d000da6f10](%142.1) { 0 } e0.2   <str->
  void                    StVar              lW    allArgs, %142.2, e0.2
  val?^ | miss    %142.4 = LdVar              eR    findMatches, e0.2
  lgl$#-          %142.5 = Identical                %142.4, function(pattern, values) <(rir::DispatchTable|...
  void                    Branch                   %142.5 -> BB144 (if true) | BB145 (if false)
BB143   <- [140]
  void                    Nop                !     
  val?^ | miss    %143.1 = %140.0
  dr              %143.2 = CallTarget@0x55d00013e2e0[Call#15]
  goto BB28
BB28   <- [141, 143]
  val?^ | miss    %28.0 = Phi                      %141.1:BB141, %143.1:BB143
  val?^ | miss    %28.1 = %28.0
  dr              %28.2 = Phi                      %141.2:BB141, %143.2:BB143
  dr              %28.3 = %28.2
  fs              %28.4 = FrameState         R     0x55d000176300+588: [%27.2], env=e0.2
  void                    Deopt              !v    %28.4, %28.3, %28.1   !
BB144   <- [142]
  prom-           %144.0 = MkArg                    unboundValue, functionArgs[0x55d000743730]_p22, e0.2
  prom-           %144.1 = MkArg                    unboundValue, functionArgs[0x55d000743730]_p25 (!refl), e0.2
  ct              %144.2 = PushContext        lCL   %144.0, %144.1, findMatches(sprintf("^%s", makeRegexpSafe(text|..., function(pattern, values) <(rir::DispatchTable|..., e0.2
  val?^           %144.3 = CastType                 up %144.1
  val?^           %144.4 = CastType                 up %144.0
  env             e144.5 = MkEnv              l     pattern=%144.4, values=%144.3, parent=<env 0x55cfff1f98c8>, context 1
  (cls|spec|blt)  %144.6 = LdFun              !v    $, <0x55cffe0e4c10>, <env 0x55cfff1f98c8>
  prom-           %144.7 = MkArg                    unboundValue, functionArgs[0x55d000743730]_p34, e144.5
  prom-           %144.8 = MkArg                    unboundValue, functionArgs[0x55d000743730]_p35, e144.5
  val?            %144.9 = Call               !v    %144.6(%144.7, %144.8) e144.5   <vec+>
  lgl$#-          %144.10 = IsType                   %144.9 isA val+   <true>
  lgl$#-          %144.11 = IsType                   %144.9 isA val?+
  void                    Branch                   %144.10 -> BB146 (if true) | BB147 (if false)
BB145   <- [142]
  fs              %145.0 = FrameState         R     0x55d000176300+677: [], env=e0.2
  void                    Deopt              !v    %145.0, CallTarget@0x55d00013e2e0[Call#17], %142.4   !
BB146   <- [144]
  void                    Branch                   %144.11 -> BB148 (if true) | BB149 (if false)
BB147   <- [144]
  void                    Nop                !     
  lgl$#-          %147.1 = %144.10
  dr              %147.2 = DeadBranchReached@0x55cfff4cf6d8[Test#0]
  goto BB33
BB148   <- [146]
  val?+           %148.0 = CastType           d     dn %144.9   <vec+>
  val?            %148.1 = Extract2_1D        wed   %148.0, "fuzzy", elided   <lgl$->
  lgl$#-          %148.2 = IsType                   %148.1 isA lgl$-
  void                    Branch                   %148.2 -> BB150 (if true) | BB151 (if false)
BB149   <- [146]
  void                    Nop                !     
  val?            %149.1 = %144.9
  dr              %149.2 = Typecheck@0x55cfff4cf6d8[Type#2]
  goto BB33
BB33   <- [147, 149]
  val?^ | miss    %33.0 = Phi                      %147.1:BB147, %149.1:BB149
  val?^ | miss    %33.1 = %33.0
  dr              %33.2 = Phi                      %147.2:BB147, %149.2:BB149
  dr              %33.3 = %33.2
  fs              %33.4 = FrameState         R     0x55d000176300+714: [], env=e0.2
  fs              %33.5 = FrameState         R     0x55d00022e520+37: [%144.9], env=e144.5, next=%33.4
  void                    Deopt              !v    %33.5, %33.3, %33.1   !
BB150   <- [148]
  lgl$-           %150.0 = CastType           d     dn %148.1
  lgl$#-          %150.1 = CheckTrueFalse     e     %150.0
  void                    Branch                   %150.1 -> BB99 (if true) | BB37 (if false)
BB151   <- [148]
  void                    Nop                !     
  val?            %151.1 = %148.1
  dr              %151.2 = Typecheck@0x55cfff4cf6d8[Type#3]
  goto BB35
BB99   <- [150]
  fs              %99.0 = FrameState         R     0x55d000176300+714: [], env=e0.2
  (cls|spec|blt)  %99.1 = LdFun              !v    findFuzzyMatches, e144.5
  fs              %99.2 = FrameState         R     0x55d00022e520+144: [%99.1], env=e144.5, next=%99.0
  void                    Deopt              !v    %99.2, DeadCall@0x55cfff4cf6d8[Call#2], %99.1   !
BB37   <- [150]
  val?^ | miss    %37.0 = LdVar              eR    findExactMatches, e144.5
  lgl$#-          %37.1 = Identical                %37.0, function(pattern, values) <(rir::DispatchTable|...
  void                    Branch                   %37.1 -> BB152 (if true) | BB153 (if false)
BB35   <- [151, 153]
  val?^ | miss    %35.0 = Phi                      %151.1:BB151, %153.1:BB153
  val?^ | miss    %35.1 = %35.0
  dr              %35.2 = Phi                      %151.2:BB151, %153.2:BB153
  dr              %35.3 = %35.2
  fs              %35.4 = FrameState         R     0x55d000176300+714: [], env=e0.2
  fs              %35.5 = FrameState         R     0x55d00022e520+80: [%148.1], env=e144.5, next=%35.4
  void                    Deopt              !v    %35.5, %35.3, %35.1   !
BB152   <- [37]
  prom-           %152.0 = MkArg                    unboundValue, functionArgs[0x55d000743730]_p36, e144.5
  prom-           %152.1 = MkArg                    unboundValue, functionArgs[0x55d000743730]_p37, e144.5
  ct              %152.2 = PushContext        lCL   %152.0, %152.1, findExactMatches(pattern, values), function(pattern, values) <(rir::DispatchTable|..., e144.5
  val?^           %152.3 = CastType                 up %152.1
  val?^           %152.4 = CastType                 up %152.0
  env             e152.5 = MkEnv              l     pattern=%152.4, values=%152.3, parent=<env 0x55cfff1f98c8>, context 1
  val?^ | miss    %152.6 = LdVar              eR    grep, e152.5
  lgl$#-          %152.7 = Identical                %152.6, function(pattern, x, ignore.case=FALSE, perl=F|...
  void                    Branch                   %152.7 -> BB154 (if true) | BB155 (if false)
BB153   <- [37]
  void                    Nop                !     
  val?^ | miss    %153.1 = %37.0
  dr              %153.2 = CallTarget@0x55cfff4cf6d8[Call#1]
  goto BB35
BB154   <- [152]
  prom-           %154.0 = MkArg                    unboundValue, functionArgs[0x55d000743730]_p38, e152.5
  prom-           %154.1 = MkArg                    unboundValue, functionArgs[0x55d000743730]_p39, e152.5
  ct              %154.2 = PushContext        lCL   %154.0, %154.1, missingArg, missingArg, true, grep(pattern, values, value=TRUE), function(pattern, x, ignore.case=FALSE, perl=F|..., e152.5
  val?^           %154.3 = CastType                 up %154.1
  val?^           %154.4 = CastType                 up %154.0
  env             e154.5 = MkEnv              l     pattern=%154.4, x=%154.3, ignore.case(miss)=false, perl(miss)=false, value=true, fixed(miss)=false, useBytes(miss)=false, invert(miss)=false, parent=R_BaseNamespace, context 1
  val?            %154.6 = Force!<lazy>       !vL   %154.4, e154.5   <str$->
  lgl$#-          %154.7 = IsType                   %154.6 isA val?-
  void                    Branch                   %154.7 -> BB156 (if true) | BB157 (if false)
BB155   <- [152]
  fs              %155.0 = FrameState         R     0x55d000176300+714: [], env=e0.2
  fs              %155.1 = FrameState         R     0x55d00022e520+129: [], env=e144.5, next=%155.0
  env             e155.2 = (MkEnv)            l     pattern=%152.4, values=%152.3, parent=<env 0x55cfff1f98c8>, context 1
  fs              %155.3 = FrameState         R     0x55d000175dd0+0: [], env=e155.2, next=%155.1
  void                    Deopt              !v    %155.3, CallTarget@0x55cfff4cfba8[Call#0], %152.6   !
BB156   <- [154]
  val?-           %156.0 = CastType           d     dn %154.6   <str$->
  val+            %156.1 = CallSafeBuiltin    wed   as.character(%156.0)    <str$->
  void                    StVar              lW    pattern, %156.1, e154.5
  prom-           %156.3 = MkArg                    unboundValue, functionArgs[0x55d000743730]_p45, e154.5
  ct              %156.4 = PushContext        lCL   %156.3, is.factor(x), function(x) <(rir::DispatchTable*)0x55d00008fe|..., e154.5
  val?^           %156.5 = CastType                 up %156.3
  env             e156.6 = MkEnv              l     x=%156.5, parent=R_BaseNamespace, context 1
  prom-           %156.7 = MkArg                    unboundValue, functionArgs[0x55d000743730]_p46, e156.6
  ct              %156.8 = PushContext        lCL   %156.7, "factor", inherits(x, "factor"), function(x, what, which=FALSE) <(rir::Dispatch|..., e156.6
  val?^           %156.9 = CastType                 up %156.7
  env             e156.10 = MkEnv              l     x=%156.9, what="factor", which(miss)=false, parent=R_BaseNamespace, context 1
  val?            %156.11 = Force!<lazy>       !vL   %156.9, e156.10   <val?>
  val?            %156.12 = CallBuiltin        !v    inherits(%156.11, "factor", false) e156.10
  val?            %156.13 = PopContext         C     %156.12, %156.8   <lgl$->
  lgl$#-          %156.14 = IsType                   %156.13 isA lgl$-
  void                    Branch                   %156.14 -> BB158 (if true) | BB159 (if false)
BB157   <- [154]
  fs              %157.0 = FrameState         R     0x55d000176300+714: [], env=e0.2
  fs              %157.1 = FrameState         R     0x55d00022e520+129: [], env=e144.5, next=%157.0
  fs              %157.2 = FrameState         R     0x55d000175dd0+54: [], env=e152.5, next=%157.1
  fs              %157.3 = FrameState         R     0x55d00013d0a0+69: [<blt as.character>, %154.6], env=e154.5, next=%157.2
  void                    Deopt              !v    %157.3, Typecheck@0x55d0001dd310[Type#1], %154.6   !
BB158   <- [156]
  lgl$-           %158.0 = CastType           d     dn %156.13
  val?            %158.1 = PopContext         C     %158.0, %156.4   <lgl$->
  lgl$#-          %158.2 = IsType                   %158.1 isA lgl$-
  void                    Branch                   %158.2 -> BB160 (if true) | BB161 (if false)
BB159   <- [156]
  fs              %159.0 = FrameState         R     0x55d000176300+714: [], env=e0.2
  fs              %159.1 = FrameState         R     0x55d00022e520+129: [], env=e144.5, next=%159.0
  fs              %159.2 = FrameState         R     0x55d000175dd0+54: [], env=e152.5, next=%159.1
  fs              %159.3 = FrameState         R     0x55d00013d0a0+137: [], env=e154.5, next=%159.2
  fs              %159.4 = FrameState         R     0x55d00008be10+37: [%156.13], env=e156.6, next=%159.3
  void                    Deopt              !v    %159.4, Typecheck@0x55cfff5d5428[Type#1], %156.13   !
BB160   <- [158]
  lgl$-           %160.0 = CastType           d     dn %158.1
  lgl$-           %160.1 = AsLogical                %160.0
  lgl$#-          %160.2 = Identical                %160.1, false
  lgl$-           %160.3 = AsLogical                %160.1
  lgl$#-          %160.4 = Identical                %160.3, false
  void                    Branch                   %160.2 -> BB49 (if true) | BB46 (if false)
BB161   <- [158]
  fs              %161.0 = FrameState         R     0x55d000176300+714: [], env=e0.2
  fs              %161.1 = FrameState         R     0x55d00022e520+129: [], env=e144.5, next=%161.0
  fs              %161.2 = FrameState         R     0x55d000175dd0+54: [], env=e152.5, next=%161.1
  fs              %161.3 = FrameState         R     0x55d00013d0a0+137: [%158.1], env=e154.5, next=%161.2
  void                    Deopt              !v    %161.3, Typecheck@0x55d0001dd310[Type#4], %158.1   !
BB49   <- [160]
  void                    Branch                   %160.4 -> BB98 (if true) | BB50 (if false)
BB46   <- [160]
  val?^ | miss    %46.0 = LdVar              eR    length, e154.5
  lgl$#-          %46.1 = Identical                <blt length>, %46.0   <@?>
  void                    Branch                   %46.1 -> BB48 (if true) | BB47 (if false)
BB98   <- [49]
  void                    Nop                !     
  lgl$-           %98.1 = %160.3
  goto BB57
BB50   <- [49]
  val?^ | miss    %50.0 = LdVar              eR    is.na, e154.5
  lgl$#-          %50.1 = Identical                <blt is.na>, %50.0   <@?>
  void                    Branch                   %50.1 -> BB52 (if true) | BB51 (if false)
BB48   <- [46]
  fs              %48.0 = FrameState         R     0x55d000176300+714: [], env=e0.2
  fs              %48.1 = FrameState         R     0x55d00022e520+129: [], env=e144.5, next=%48.0
  fs              %48.2 = FrameState         R     0x55d000175dd0+54: [], env=e152.5, next=%48.1
  (cls|spec|blt)  %48.3 = LdFun              !v    levels, e154.5
  fs              %48.4 = FrameState         R     0x55d00013d0a0+214: [%160.1, <blt length>, %48.3], env=e154.5, next=%48.2
  void                    Deopt              !v    %48.4, DeadCall@0x55d0001dd310[Call#4], %48.3   !
BB47   <- [46]
  fs              %47.0 = FrameState         R     0x55d000176300+714: [], env=e0.2
  fs              %47.1 = FrameState         R     0x55d00022e520+129: [], env=e144.5, next=%47.0
  fs              %47.2 = FrameState         R     0x55d000175dd0+54: [], env=e152.5, next=%47.1
  (cls|spec|blt)  %47.3 = LdFun              !v    length, e154.5
  fs              %47.4 = FrameState         R     0x55d00013d0a0+177: [%160.1, %47.3], env=e154.5, next=%47.2
  void                    Deopt              !v    %47.4, DeadCall@0x55d0001dd310[Call#2], %47.3   !
BB57   <- [98, 166]
  lgl$-           %57.0 = Phi                      %166.5:BB166, %98.1:BB98
  lgl$-           %57.1 = %57.0
  lgl$#-          %57.2 = CheckTrueFalse     e     %57.1
  void                    Branch                   %57.2 -> BB95 (if true) | BB60 (if false)
BB52   <- [50]
  val?^ | miss    %52.0 = LdVar              eR    pattern, e154.5
  val?            %52.1 = Force!             !v    %52.0, e154.5   <val?_>
  lgl$#-          %52.2 = IsType                   %52.1 isA val?+
  void                    Branch                   %52.2 -> BB164 (if true) | BB165 (if false)
BB51   <- [50]
  fs              %51.0 = FrameState         R     0x55d000176300+714: [], env=e0.2
  fs              %51.1 = FrameState         R     0x55d00022e520+129: [], env=e144.5, next=%51.0
  fs              %51.2 = FrameState         R     0x55d000175dd0+54: [], env=e152.5, next=%51.1
  (cls|spec|blt)  %51.3 = LdFun              !v    is.na, e154.5
  fs              %51.4 = FrameState         R     0x55d00013d0a0+418: [%160.3, %51.3], env=e154.5, next=%51.2
  void                    Deopt              !v    %51.4, DeadCall@0x55d0001dd310[Call#6], %51.3   !
BB95   <- [57]
  val?^ | miss    %95.0 = LdVar              eR    is.character, e154.5
  lgl$#-          %95.1 = Identical                <blt is.character>, %95.0   <@?>
  void                    Branch                   %95.1 -> BB97 (if true) | BB96 (if false)
BB60   <- [57]
  val?^ | miss    %60.0 = LdVar              eR    is.character, e154.5
  lgl$#-          %60.1 = Identical                <blt is.character>, %60.0   <true>
  void                    Branch                   %60.1 -> BB162 (if true) | BB163 (if false)
BB164   <- [52]
  val?+           %164.0 = CastType           d     dn %52.1   <val?_>
  val?            %164.1 = Extract1_1D        wed   %164.0, 1L, elided   <val?_>
  lgl$#-          %164.2 = IsType                   %164.1 isA val?+
  void                    Branch                   %164.2 -> BB166 (if true) | BB167 (if false)
BB165   <- [52]
  fs              %165.0 = FrameState         R     0x55d000176300+714: [], env=e0.2
  fs              %165.1 = FrameState         R     0x55d00022e520+129: [], env=e144.5, next=%165.0
  fs              %165.2 = FrameState         R     0x55d000175dd0+54: [], env=e152.5, next=%165.1
  fs              %165.3 = FrameState         R     0x55d00013d0a0+459: [%160.3, <blt is.na>, %52.1], env=e154.5, next=%165.2
  void                    Deopt              !v    %165.3, Typecheck@0x55d0001dd310[Type#16], %52.1   !
BB97   <- [95]
  fs              %97.0 = FrameState         R     0x55d000176300+714: [], env=e0.2
  fs              %97.1 = FrameState         R     0x55d00022e520+129: [], env=e144.5, next=%97.0
  fs              %97.2 = FrameState         R     0x55d000175dd0+54: [], env=e152.5, next=%97.1
  (cls|spec|blt)  %97.3 = LdFun              !v    suppressWarnings, e154.5
  fs              %97.4 = FrameState         R     0x55d00013d0a0+901: [<blt is.character>, %97.3], env=e154.5, next=%97.2
  void                    Deopt              !v    %97.4, DeadCall@0x55d0001dd310[Call#14], %97.3   !
BB96   <- [95]
  fs              %96.0 = FrameState         R     0x55d000176300+714: [], env=e0.2
  fs              %96.1 = FrameState         R     0x55d00022e520+129: [], env=e144.5, next=%96.0
  fs              %96.2 = FrameState         R     0x55d000175dd0+54: [], env=e152.5, next=%96.1
  (cls|spec|blt)  %96.3 = LdFun              !v    is.character, e154.5
  fs              %96.4 = FrameState         R     0x55d00013d0a0+864: [%96.3], env=e154.5, next=%96.2
  void                    Deopt              !v    %96.4, DeadCall@0x55d0001dd310[Call#11], %96.3   !
BB162   <- [60]
  val?^ | miss    %162.0 = LdVar              eR    x, e154.5
  val?            %162.1 = Force!<wrapped>    !v    %162.0, e154.5   <str->
  lgl$#-          %162.2 = CallSafeBuiltin    wed   is.character(%162.1)    <lgl$->
  void                    Branch                   %162.2 -> BB62 (if true) | BB61 (if false)
BB163   <- [60]
  fs              %163.0 = FrameState         R     0x55d000176300+714: [], env=e0.2
  fs              %163.1 = FrameState         R     0x55d00022e520+129: [], env=e144.5, next=%163.0
  fs              %163.2 = FrameState         R     0x55d000175dd0+54: [], env=e152.5, next=%163.1
  fs              %163.3 = FrameState         R     0x55d00013d0a0+533: [%57.1], env=e154.5, next=%163.2
  void                    Deopt              !v    %163.3, DeadBranchReached@0x55d0001dd310[Test#6], %60.1   !
BB166   <- [164]
  val?+           %166.0 = CastType           d     dn %164.1   <val?_>
  lgl+            %166.1 = CallSafeBuiltin    wed   is.na(%166.0)    <val?_>
  lgl             %166.2 = Not                wed   %166.1, elided
  lgl$-           %166.3 = AsLogical          e     %166.2
  lgl$-           %166.4 = LAnd                     %160.3, %166.3
  lgl$-           %166.5 = %166.4
  goto BB57
BB167   <- [164]
  fs              %167.0 = FrameState         R     0x55d000176300+714: [], env=e0.2
  fs              %167.1 = FrameState         R     0x55d00022e520+129: [], env=e144.5, next=%167.0
  fs              %167.2 = FrameState         R     0x55d000175dd0+54: [], env=e152.5, next=%167.1
  fs              %167.3 = FrameState         R     0x55d00013d0a0+502: [%160.3, <blt is.na>, %164.1], env=e154.5, next=%167.2
  void                    Deopt              !v    %167.3, Typecheck@0x55d0001dd310[Type#17], %164.1   !
BB62   <- [162]
  val?^ | miss    %62.0 = LdVar              eR    pattern, e154.5
  val?            %62.1 = Force!<value>      !v    %62.0, e154.5   <str$->
  val?^ | miss    %62.2 = LdVar              eR    x, e154.5
  val?            %62.3 = Force!<wrapped>    !v    %62.2, e154.5   <str->
  val?^ | miss    %62.4 = LdVar              eR    ignore.case, e154.5
  val?            %62.5 = Force!<lazy>       !v    %62.4, e154.5   <lgl$->
  val?^ | miss    %62.6 = LdVar              eR    value, e154.5
  val?            %62.7 = Force!<lazy>       !v    %62.6, e154.5   <lgl$->
  val?^ | miss    %62.8 = LdVar              eR    perl, e154.5
  val?            %62.9 = Force!<lazy>       !v    %62.8, e154.5   <lgl$->
  val?^ | miss    %62.10 = LdVar              eR    fixed, e154.5
  val?            %62.11 = Force!<lazy>       !v    %62.10, e154.5   <lgl$->
  val?^ | miss    %62.12 = LdVar              eR    useBytes, e154.5
  val?            %62.13 = Force!<lazy>       !v    %62.12, e154.5   <lgl$->
  val?^ | miss    %62.14 = LdVar              eR    invert, e154.5
  val?            %62.15 = Force!<lazy>       !v    %62.14, e154.5   <lgl$->
  val?            %62.16 = CallBuiltin        !v    grep(%62.1, %62.3, %62.5, %62.7, %62.9, %62.11, %62.13, %62.15) e154.5
  val?            %62.17 = PopContext         C     %62.16, %154.2   <str->
  val?            %62.18 = PopContext         C     %62.17, %152.2   <str->
  val?            %62.19 = PopContext         C     %62.18, %144.2   <str->
  void                    StVar              lW    ans, %62.19, e0.2
  lgl$#-          %62.21 = IsType                   %62.19 isA val?-
  val?^ | miss    %62.22 = LdVar              eR    length, e0.2
  lgl$#-          %62.23 = Identical                <blt length>, %62.22   <true>
  void                    Branch                   %62.23 -> BB168 (if true) | BB169 (if false)
BB61   <- [162]
  fs              %61.0 = FrameState         R     0x55d000176300+714: [], env=e0.2
  fs              %61.1 = FrameState         R     0x55d00022e520+129: [], env=e144.5, next=%61.0
  fs              %61.2 = FrameState         R     0x55d000175dd0+54: [], env=e152.5, next=%61.1
  (cls|spec|blt)  %61.3 = LdFun              !v    structure, e154.5
  fs              %61.4 = FrameState         R     0x55d00013d0a0+652: [%61.3], env=e154.5, next=%61.2
  void                    Deopt              !v    %61.4, DeadCall@0x55d0001dd310[Call#8], %61.3   !
BB168   <- [62]
  val             %168.0 = ChkMissing         e     %62.19
  void                    Branch                   %62.21 -> BB170 (if true) | BB171 (if false)
BB169   <- [62]
  void                    Nop                !     
  lgl$#-          %169.1 = %62.23
  dr              %169.2 = DeadBranchReached@0x55d00013e2e0[Test#5]
  goto BB63
BB170   <- [168]
  val?-           %170.0 = CastType           d     dn %62.19   <str->
  (int|real)$-    %170.1 = CallSafeBuiltin    wed   length(%170.0)    <int$->
  lgl$#-          %170.2 = IsType                   %170.1 isA int$-
  void                    Branch                   %170.2 -> BB172 (if true) | BB173 (if false)
BB171   <- [168]
  void                    Nop                !     
  val?            %171.1 = %62.19
  dr              %171.2 = Typecheck@0x55d00013e2e0[Type#44]
  goto BB63
BB63   <- [169, 171]
  val?^ | miss    %63.0 = Phi                      %169.1:BB169, %171.1:BB171
  val?^ | miss    %63.1 = %63.0
  dr              %63.2 = Phi                      %169.2:BB169, %171.2:BB171
  dr              %63.3 = %63.2
  fs              %63.4 = FrameState         R     0x55d000176300+728: [], env=e0.2
  void                    Deopt              !v    %63.4, %63.3, %63.1   !
BB172   <- [170]
  int$-           %172.0 = CastType           d     dn %170.1
  lgl$-           %172.1 = AsLogical                %172.0
  lgl$#-          %172.2 = Identical                %172.1, false
  void                    Branch                   %172.2 -> BB94 (if true) | BB67 (if false)
BB173   <- [170]
  fs              %173.0 = FrameState         R     0x55d000176300+819: [%170.1], env=e0.2
  void                    Deopt              !v    %173.0, Typecheck@0x55d00013e2e0[Type#47], %170.1   !
BB94   <- [172]
  void                    Nop                !     
  lgl$-           %94.1 = %172.1
  goto BB70
BB67   <- [172]
  val?^ | miss    %67.0 = LdVar              eR    keep.dots, e0.2
  val?            %67.1 = Force!<lazy>       !v    %67.0, e0.2   <lgl$->
  lgl$#-          %67.2 = IsType                   %67.1 isA lgl$-
  void                    Branch                   %67.2 -> BB178 (if true) | BB179 (if false)
BB70   <- [94, 178]
  lgl$-           %70.0 = Phi                      %178.4:BB178, %94.1:BB94
  lgl$-           %70.1 = %70.0
  lgl$#-          %70.2 = CheckTrueFalse     e     %70.1
  void                    Branch                   %70.2 -> BB88 (if true) | BB71 (if false)
BB178   <- [67]
  lgl$-           %178.0 = CastType           d     dn %67.1
  lgl$-           %178.1 = Not                d     %178.0, elided
  lgl$-           %178.2 = AsLogical                %178.1
  lgl$-           %178.3 = LAnd                     %172.1, %178.2
  lgl$-           %178.4 = %178.3
  goto BB70
BB179   <- [67]
  fs              %179.0 = FrameState         R     0x55d000176300+840: [%172.1, %67.1], env=e0.2
  void                    Deopt              !v    %179.0, Typecheck@0x55d00013e2e0[Type#48], %67.1   !
BB88   <- [70]
  val?^ | miss    %88.0 = LdVar              eR    ans, e0.2
  val?            %88.1 = Force!             !v    %88.0, e0.2   <val?_>
  lgl$#-          %88.2 = IsType                   %88.1 isA val+   <@?>
  void                    Branch                   %88.2 -> BB91 (if true) | BB89 (if false)
BB71   <- [70]
  void                    Nop                !     
  goto BB72
BB91   <- [88]
  val?^ | miss    %91.0 = LdVar              eR    ans, e0.2
  val?            %91.1 = Force!             !v    %91.0, e0.2   <val?_>
  lgl$#-          %91.2 = IsType                   %91.1 isA val?+
  void                    Branch                   %91.2 -> BB180 (if true) | BB181 (if false)
BB89   <- [88]
  prom-           %89.0 = MkArg                    unboundValue, functionArgs[0x55d000743730]_p28, e0.2
  prom-           %89.1 = %89.0
  goto BB90
BB72   <- [71, 90]
  val?^ | miss    %72.0 = LdVar              eR    length, e0.2
  lgl$#-          %72.1 = Identical                <blt length>, %72.0   <true>
  void                    Branch                   %72.1 -> BB174 (if true) | BB175 (if false)
BB180   <- [91]
  val?+           %180.0 = CastType           d     dn %91.1   <val?_>
  lgl             %180.1 = Neq                wed   %180.0, "...", elided   <val?_>
  lgl             %180.2 = %180.1
  goto BB90
BB181   <- [91]
  fs              %181.0 = FrameState         R     0x55d000176300+913: [%88.1, %91.1], env=e0.2
  void                    Deopt              !v    %181.0, Typecheck@0x55d00013e2e0[Type#52], %91.1   !
BB90   <- [89, 180]
  (lgl|prom)      %90.0 = Phi                      %180.2:BB180, %89.1:BB89
  (lgl|prom)      %90.1 = %90.0
  val?            %90.2 = Extract1_1D        !v    %88.1, %90.1, e0.2   <val?_>
  void                    StVar              lW    ans, %90.2, e0.2
  goto BB72
BB174   <- [72]
  val?^ | miss    %174.0 = LdVar              eR    ans, e0.2
  lgl$#-          %174.1 = IsType                   %174.0 isA val?~- | miss
  void                    Branch                   %174.1 -> BB176 (if true) | BB177 (if false)
BB175   <- [72]
  void                    Nop                !     
  lgl$#-          %175.1 = %72.1
  dr              %175.2 = DeadBranchReached@0x55d00013e2e0[Test#7]
  goto BB73
BB176   <- [174]
  val?~- | miss   %176.0 = CastType           d     dn %174.0
  val?-           %176.1 = Force!<value>            %176.0,    <str->
  (int|real)$-    %176.2 = CallSafeBuiltin    wed   length(%176.1)    <int$->
  lgl$#-          %176.3 = IsType                   %176.2 isA int$-
  void                    Branch                   %176.3 -> BB182 (if true) | BB183 (if false)
BB177   <- [174]
  void                    Nop                !     
  val?^ | miss    %177.1 = %174.0
  dr              %177.2 = Typecheck@0x55d00013e2e0[Type#56]
  goto BB73
BB73   <- [175, 177]
  val?^ | miss    %73.0 = Phi                      %175.1:BB175, %177.1:BB177
  val?^ | miss    %73.1 = %73.0
  dr              %73.2 = Phi                      %175.2:BB175, %177.2:BB177
  dr              %73.3 = %73.2
  fs              %73.4 = FrameState         R     0x55d000176300+946: [], env=e0.2
  void                    Deopt              !v    %73.4, %73.3, %73.1   !
BB182   <- [176]
  int$-           %182.0 = CastType           d     dn %176.2
  lgl$-           %182.1 = AsLogical                %182.0
  lgl$#-          %182.2 = Identical                %182.1, false
  void                    Branch                   %182.2 -> BB87 (if true) | BB77 (if false)
BB183   <- [176]
  fs              %183.0 = FrameState         R     0x55d000176300+1037: [%176.2], env=e0.2
  void                    Deopt              !v    %183.0, Typecheck@0x55d00013e2e0[Type#57], %176.2   !
BB87   <- [182]
  void                    Nop                !     
  lgl$-           %87.1 = %182.1
  goto BB78
BB77   <- [182]
  val?^ | miss    %77.0 = LdVar              eR    add.args, e0.2
  val?            %77.1 = Force!<lazy>       !v    %77.0, e0.2   <str$->
  lgl$-           %77.2 = Is                       %77.1, NULL
  lgl$-           %77.3 = Not                d     %77.2, elided
  lgl$-           %77.4 = AsLogical                %77.3
  lgl$-           %77.5 = LAnd                     %182.1, %77.4
  lgl$-           %77.6 = %77.5
  goto BB78
BB78   <- [87, 77]
  lgl$-           %78.0 = Phi                      %77.6:BB77, %87.1:BB87
  lgl$-           %78.1 = %78.0
  lgl$#-          %78.2 = CheckTrueFalse     e     %78.1
  void                    Branch                   %78.2 -> BB86 (if true) | BB81 (if false)
BB86   <- [78]
  val?^ | miss    %86.0 = LdVar              eR    sprintf, e0.2
  lgl$#-          %86.1 = Identical                %86.0, function(fmt, ...) <(rir::DispatchTable*)0x55d|...
  void                    Branch                   %86.1 -> BB184 (if true) | BB185 (if false)
BB81   <- [78]
  void                    Nop                !     
  goto BB82
BB184   <- [86]
  prom-           %184.0 = MkArg                    unboundValue, functionArgs[0x55d000743730]_p26, e0.2
  prom-           %184.1 = MkArg                    unboundValue, functionArgs[0x55d000743730]_p27, e0.2
  dots-           %184.2 = DotsList           l     %184.0, %184.1
  ct              %184.3 = PushContext        lCL   "%s%s", %184.2, sprintf("%s%s", ans, add.args), function(fmt, ...) <(rir::DispatchTable*)0x55d|..., e0.2
  val?^ | miss    %184.4 = CastType                 up %184.0
  env             e184.5 = MkEnv              l     fmt="%s%s", ...=%184.2, parent=R_BaseNamespace, context 1
  val?            %184.6 = Force!             !vL   %184.4, e184.5
  val?^ | miss    %184.7 = CastType                 up %184.1
  val?            %184.8 = Force!             !vL   %184.7, e184.5
  val?            %184.9 = CallBuiltin        !v    sprintf("%s%s", %184.6, %184.8) e184.5
  val?            %184.10 = PopContext         C     %184.9, %184.3   <str->
  void                    StVar              lW    ans, %184.10, e0.2
  goto BB82
BB185   <- [86]
  fs              %185.0 = FrameState         R     0x55d000176300+1071: [%78.1], env=e0.2
  void                    Deopt              !v    %185.0, CallTarget@0x55d00013e2e0[Call#22], %86.0   !
BB82   <- [81, 184]
  val?^ | miss    %82.0 = LdVar              eR    c, e0.2
  lgl$#-          %82.1 = Identical                <blt c>, %82.0   <true>
  void                    Branch                   %82.1 -> BB186 (if true) | BB187 (if false)
BB186   <- [82]
  val?^ | miss    %186.0 = LdVar              eR    specialFunArgs, e0.2
  lgl$#-          %186.1 = IsType                   %186.0 isA val?~- | miss
  void                    Branch                   %186.1 -> BB188 (if true) | BB189 (if false)
BB187   <- [82]
  void                    Nop                !     
  lgl$#-          %187.1 = %82.1
  dr              %187.2 = DeadBranchReached@0x55d00013e2e0[Test#8]
  goto BB83
BB188   <- [186]
  val?~- | miss   %188.0 = CastType           d     dn %186.0
  val?-           %188.1 = Force!<value>            %188.0,    <str->
  val?^ | miss    %188.2 = LdVar              eR    ans, e0.2
  lgl$#-          %188.3 = IsType                   %188.2 isA val?~- | miss
  void                    Branch                   %188.3 -> BB190 (if true) | BB191 (if false)
BB189   <- [186]
  void                    Nop                !     
  val?^ | miss    %189.1 = %186.0
  dr              %189.2 = Typecheck@0x55d00013e2e0[Type#64]
  goto BB83
BB83   <- [187, 189, 191]
  val?^ | miss    %83.0 = Phi                      %187.1:BB187, %189.1:BB189, %191.1:BB191
  val?^ | miss    %83.1 = %83.0
  dr              %83.2 = Phi                      %187.2:BB187, %189.2:BB189, %191.2:BB191
  dr              %83.3 = %83.2
  fs              %83.4 = FrameState         R     0x55d000176300+1138: [], env=e0.2
  void                    Deopt              !v    %83.4, %83.3, %83.1   !
BB190   <- [188]
  val?~- | miss   %190.0 = CastType           d     dn %188.2
  val?-           %190.1 = Force!<value>            %190.0,    <str->
  val+            %190.2 = CallSafeBuiltin    vwed  c(%188.1, %190.1)    <str->
  val+            %190.3 = %190.2
  goto BB85
BB191   <- [188]
  void                    Nop                !     
  val?^ | miss    %191.1 = %188.2
  dr              %191.2 = Typecheck@0x55d00013e2e0[Type#65]
  goto BB83
Prom 0:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !v    $, <0x55cffe0e4c10>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, functionArgs[0x55d000743730]_p1, e0.0
  prom-           %0.3  = MkArg                    unboundValue, functionArgs[0x55d000743730]_p2, e0.0
  val?            %0.4  = Call               !v    %0.1(%0.2, %0.3) e0.0   <vec+>
  val?            %0.5  = Extract2_1D        !v    %0.4, "S3", e0.0   <lgl$->
  void                    Visible            v     
  void                    Return             l     %0.5
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    .CompletionEnv, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    settings, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 4:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !v    $, <0x55cffe0e4c10>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, functionArgs[0x55d000743730]_p5, e0.0
  prom-           %0.3  = MkArg                    unboundValue, functionArgs[0x55d000743730]_p6, e0.0
  val?            %0.4  = Call               !v    %0.1(%0.2, %0.3) e0.0   <vec+>
  val?            %0.5  = Extract2_1D        !v    %0.4, "dots", e0.0   <lgl$->
  void                    Visible            v     
  void                    Return             l     %0.5
Prom 5:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    .CompletionEnv, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 6:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    settings, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 7:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     rc.getOption, <0x55cffff85dd0>, e0.0
  val?            %0.2  = Call               !     %0.1("funarg.suffix") e0.0   <str$->
  void                    Return             l     %0.2
Prom 8:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fun, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 9:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    text, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 10:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fun, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 19:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     lapply, <0x55cffe224040>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, functionArgs[0x55d000743730]_p20, e0.0
  prom-           %0.3  = MkArg                    unboundValue, functionArgs[0x55d000743730]_p21, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <vec$->
  void                    Return             l     %0.4
Prom 20:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fun, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 21:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    argNames, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls->
  void                    Return             l     %0.3
Prom 22:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     sprintf, <0x55cffe3edcb8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, functionArgs[0x55d000743730]_p23, e0.0
  val?            %0.3  = Call               !     %0.1("^%s", %0.2) e0.0   <str$->
  void                    Return             l     %0.3
Prom 23:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     makeRegexpSafe, <0x55d000271400>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, functionArgs[0x55d000743730]_p24, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <str$->
  void                    Return             l     %0.3
Prom 24:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    text, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 25:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    allArgs, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 26:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    ans, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 27:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    add.args, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 28:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    ans, e0.0
  val?            %0.2  = Force              !v    %0.1, e0.0   <val?_>
  void                    Visible            v     
  val?            %0.4  = Neq                !     %0.2, "...", e0.0   <val?_>
  void                    Return             l     %0.4
Prom 29:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     methods, <0x55d000763580>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, functionArgs[0x55d000743730]_p30, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 30:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fun, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 31:
BB0
  env             e0.0  = LdFunctionEnv            
  cls             %0.1  = MkCls                    functionArgs@Prom(31)0, e0.0
  void                    Return             l     %0.1
Prom 32:
BB0
  env             e0.0  = LdFunctionEnv            
  cls             %0.1  = MkCls                    functionArgs@Prom(32)0, e0.0
  void                    Return             l     %0.1
Prom 34:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    .CompletionEnv, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 35:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    settings, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 36:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    pattern, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 37:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    values, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 38:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    pattern, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 39:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    values, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 45:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    x, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 46:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    x, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <(lgl|str)+>
  void                    Return             l     %0.3

│ functionArgs[0x55d000743730]                                                 │
└──────────────────────────────────────────────────────────────────────────────┘
