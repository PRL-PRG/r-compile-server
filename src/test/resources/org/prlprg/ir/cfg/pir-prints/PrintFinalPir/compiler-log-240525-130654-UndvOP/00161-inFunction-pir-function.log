
┌──────────────────────────────────────────────────────────────────────────────┐
│ inFunction[0x55d000d779b0]                                                   │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch                                      │
│ Properties:                                                                  │
├────── Final PIR Version
inFunction[0x55d000d779b0]
BB0
  val?^           %0.0  = LdArg                    1
  val?^           %0.1  = LdArg                    0
  val?^ | miss    %0.2  = LdVar              eR    sapply, <env 0x55cfff1f98c8>
  lgl$#-          %0.3  = Identical                %0.2, function(X, FUN, ..., simplify=TRUE, USE.NAMES|...
  void                    Branch                   %0.3 -> BB151 (if true) | BB152 (if false)
BB151   <- [0]
  env             e151.0 = MkEnv              l     line=%0.1, cursor=%0.0, parent=<env 0x55cfff1f98c8>, context 1
  prom-           %151.1 = MkArg                    unboundValue, inFunction[0x55d000d779b0]_p0, e151.0
  cls             %151.2 = MkCls                    inFunction@Prom(1)0, e151.0
  prom-           %151.3 = MkArg                    %151.2, inFunction[0x55d000d779b0]_p1 (!refl), e151.0
  ct              %151.4 = PushContext        lCL   %151.1, %151.3, missingArg, false, sapply(c("(", ")"), function(<lst s=R_MissingA|..., function(X, FUN, ..., simplify=TRUE, USE.NAMES|..., e151.0
  cls~            %151.5 = CastType                 up %151.3
  val?^           %151.6 = CastType                 up %151.1
  env             e151.7 = MkEnv              l     X=%151.6, FUN=%151.5, ...(miss)=missingArg, simplify=false, USE.NAMES(miss)=true, parent=R_BaseNamespace, context 1
  prom-           %151.8 = MkArg                    unboundValue, inFunction[0x55d000d779b0]_p38 (!refl), e151.7
  val?            %151.9 = StaticCall         !v    match.fun[0x55d001080210](%151.8) e151.7   <cls->
  void                    StVar              lW    FUN, %151.9, e151.7
  val?^ | miss    %151.11 = LdVar              eR    lapply, e151.7
  lgl$#-          %151.12 = Identical                %151.11, function(X, FUN, ...) <(rir::DispatchTable*)0x|...
  void                    Branch                   %151.12 -> BB153 (if true) | BB154 (if false)
BB152   <- [0]
  env             e152.0 = (MkEnv)            l     line=%0.1, cursor=%0.0, parent=<env 0x55cfff1f98c8>, context 1
  fs              %152.1 = FrameState         R     0x55d0000ad500+0: [], env=e152.0
  void                    Deopt              !v    %152.1, CallTarget@0x55cfff5a36c8[Call#0], %0.2
BB153   <- [151]
  prom-           %153.0 = MkArg                    unboundValue, inFunction[0x55d000d779b0]_p39, e151.7
  prom-           %153.1 = MkArg                    unboundValue, inFunction[0x55d000d779b0]_p40 (!refl), e151.7
  (miss|dots)     %153.2 = LdDots             R     , e151.7
  *dots-          %153.3 = ExpandDots               %153.2
  val?            %153.4 = NamedCall          !v    function(X, FUN, ...) <(rir::DispatchTable*)0x|...(X=%153.0, FUN=%153.1, .xpandDotsTrigger=%153.3) e151.7   <vec+>
  void                    StVar              lW    answer, %153.4, e151.7
  val?^ | miss    %153.6 = LdVar              eR    USE.NAMES, e151.7
  val?            %153.7 = Force!<lazy>       !v    %153.6, e151.7   <lgl$->
  lgl$-           %153.8 = AsLogical          e     %153.7
  lgl$#-          %153.9 = Identical                %153.8, false
  void                    Branch                   %153.9 -> BB149 (if true) | BB7 (if false)
BB154   <- [151]
  fs              %154.0 = FrameState         R     0x55d0000ad500+54: [], env=e151.0
  fs              %154.1 = FrameState         R     0x55d0000b1fa0+46: [], env=e151.7, next=%154.0
  void                    Deopt              !v    %154.1, CallTarget@0x55d0000ae2a0[Call#1], %151.11   !
BB149   <- [153]
  void                    Nop                !     
  lgl$-           %149.1 = %153.8
  goto BB8
BB7   <- [153]
  val?^ | miss    %7.0  = LdVar              eR    is.character, e151.7
  lgl$#-          %7.1  = Identical                <blt is.character>, %7.0   <true>
  void                    Branch                   %7.1 -> BB155 (if true) | BB156 (if false)
BB8   <- [149, 155]
  lgl$-           %8.0  = Phi                      %155.4:BB155, %149.1:BB149
  lgl$-           %8.1  = %8.0
  lgl$-           %8.2  = AsLogical                %8.1
  lgl$#-          %8.3  = Identical                %8.2, false
  void                    Branch                   %8.3 -> BB148 (if true) | BB11 (if false)
BB155   <- [7]
  val?^ | miss    %155.0 = LdVar              eR    X, e151.7
  val?            %155.1 = Force!<wrapped>    !v    %155.0, e151.7   <(str|vec)+>
  lgl$#-          %155.2 = CallSafeBuiltin    wed   is.character(%155.1)    <lgl$->
  lgl$-           %155.3 = LAnd                     %153.8, %155.2
  lgl$-           %155.4 = %155.3
  goto BB8
BB156   <- [7]
  fs              %156.0 = FrameState         R     0x55d0000ad500+54: [], env=e151.0
  fs              %156.1 = FrameState         R     0x55d0000b1fa0+123: [%153.7], env=e151.7, next=%156.0
  void                    Deopt              !v    %156.1, DeadBranchReached@0x55d0000ae2a0[Test#0], %7.1   !
BB148   <- [8]
  void                    Nop                !     
  lgl$-           %148.1 = %8.2
  goto BB12
BB11   <- [8]
  val?^ | miss    %11.0 = LdVar              eR    names, e151.7
  lgl$#-          %11.1 = Identical                <blt names>, %11.0   <true>
  void                    Branch                   %11.1 -> BB157 (if true) | BB158 (if false)
BB12   <- [148, 159]
  lgl$-           %12.0 = Phi                      %159.6:BB159, %148.1:BB148
  lgl$-           %12.1 = %12.0
  lgl$#-          %12.2 = CheckTrueFalse     e     %12.1
  void                    Branch                   %12.2 -> BB145 (if true) | BB13 (if false)
BB157   <- [11]
  val?^ | miss    %157.0 = LdVar              eR    answer, e151.7
  lgl$#-          %157.1 = IsType                   %157.0 isA val?~- | miss
  void                    Branch                   %157.1 -> BB159 (if true) | BB160 (if false)
BB158   <- [11]
  void                    Nop                !     
  lgl$#-          %158.1 = %11.1
  dr              %158.2 = DeadBranchReached@0x55d0000ae2a0[Test#1]
  goto BB9
BB145   <- [12]
  val?^ | miss    %145.0 = LdVar              eR    X, e151.7
  val?            %145.1 = Force!<wrapped>    !v    %145.0, e151.7   <str->
  (cls|spec|blt)  %145.2 = LdFun              !v    names<-, <0x55cffe0e5438>, e151.7
  val?^ | miss    %145.3 = LdVar              eR    answer, e151.7
  lgl$#-          %145.4 = IsType                   %145.3 isA val?~- | miss
  void                    Branch                   %145.4 -> BB161 (if true) | BB162 (if false)
BB13   <- [12]
  void                    Nop                !     
  goto BB14
BB159   <- [157]
  val?~- | miss   %159.0 = CastType           d     dn %157.0
  val?-           %159.1 = Force!<value>            %159.0,    <vec->
  val+            %159.2 = CallSafeBuiltin    wed   names(%159.1)    <nil->
  lgl$-           %159.3 = Is                       %159.2, NULL
  lgl$-           %159.4 = AsLogical                %159.3
  lgl$-           %159.5 = LAnd                     %8.2, %159.4
  lgl$-           %159.6 = %159.5
  goto BB12
BB160   <- [157]
  void                    Nop                !     
  val?^ | miss    %160.1 = %157.0
  dr              %160.2 = Typecheck@0x55d0000ae2a0[Type#10]
  goto BB9
BB9   <- [158, 160]
  val?^ | miss    %9.0  = Phi                      %158.1:BB158, %160.1:BB160
  val?^ | miss    %9.1  = %9.0
  dr              %9.2  = Phi                      %158.2:BB158, %160.2:BB160
  dr              %9.3  = %9.2
  fs              %9.4  = FrameState         R     0x55d0000ad500+54: [], env=e151.0
  fs              %9.5  = FrameState         R     0x55d0000b1fa0+233: [%8.1], env=e151.7, next=%9.4
  void                    Deopt              !v    %9.5, %9.3, %9.1   !
BB161   <- [145]
  val?~- | miss   %161.0 = CastType           d     dn %145.3
  val?-           %161.1 = Force!<value>            %161.0,    <vec->
  val?            %161.2 = NamedCall          !v    %145.2(%161.1, value=%145.1) e151.7
  void                    StVar              lW    answer, %161.2, e151.7
  goto BB14
BB162   <- [145]
  fs              %162.0 = FrameState         R     0x55d0000ad500+54: [], env=e151.0
  fs              %162.1 = FrameState         R     0x55d0000b1fa0+368: [%145.1], env=e151.7, next=%162.0
  void                    Deopt              !v    %162.1, Typecheck@0x55d0000ae2a0[Type#13], %145.3   !
BB14   <- [13, 161]
  val?^ | miss    %14.0 = LdVar              eR    isFALSE, e151.7
  lgl$#-          %14.1 = Identical                %14.0, function(x) <(rir::DispatchTable*)0x55d0000b52|...
  void                    Branch                   %14.1 -> BB163 (if true) | BB164 (if false)
BB163   <- [14]
  val?^ | miss    %163.0 = LdVar              eR    simplify, e151.7
  val?            %163.1 = Force!<lazy>       !v    %163.0, e151.7   <lgl$->
  prom-           %163.2 = MkArg                    %163.1, inFunction[0x55d000d779b0]_p41 (!refl), e151.7
  val?~           %163.3 = CastType                 up %163.2
  val+            %163.4 = CallSafeBuiltin    wed   is.logical(%163.1)    <lgl$->
  lgl$#-          %163.5 = IsType                   %163.4 isA lgl$-
  void                    Branch                   %163.5 -> BB165 (if true) | BB166 (if false)
BB164   <- [14]
  fs              %164.0 = FrameState         R     0x55d0000ad500+54: [], env=e151.0
  fs              %164.1 = FrameState         R     0x55d0000b1fa0+436: [], env=e151.7, next=%164.0
  void                    Deopt              !v    %164.1, CallTarget@0x55d0000ae2a0[Call#5], %14.0   !
BB165   <- [163]
  lgl$-           %165.0 = CastType           d     dn %163.4
  lgl$-           %165.1 = AsLogical                %165.0
  lgl$#-          %165.2 = Identical                %165.1, false
  env             e165.3 = (MkEnv)            l     x=%163.3, parent=R_BaseNamespace, context 0
  void                    Branch                   %165.2 -> BB144 (if true) | BB19 (if false)
BB166   <- [163]
  void                    Nop                !     
  val+            %166.1 = %163.4
  dr              %166.2 = Typecheck@0x55cfff5a41c8[Type#2]
  goto BB17
BB144   <- [165]
  void                    Nop                !     
  lgl$-           %144.1 = %165.1
  goto BB20
BB19   <- [165]
  val?^ | miss    %19.0 = LdVar              eRd   length, R_BaseNamespace
  lgl$#-          %19.1 = Identical                <blt length>, %19.0   <true>
  void                    Branch                   %19.1 -> BB169 (if true) | BB170 (if false)
BB17   <- [166, 168, 170, 172, 174]
  val?^ | miss    %17.0 = Phi                      %166.1:BB166, %168.1:BB168, %170.1:BB170, %172.1:BB172, %174.1:BB174
  val?^ | miss    %17.1 = %17.0
  dr              %17.2 = Phi                      %166.2:BB166, %168.2:BB168, %170.2:BB170, %172.2:BB172, %174.2:BB174
  dr              %17.3 = %17.2
  fs              %17.4 = FrameState         R     0x55d0000ad500+54: [], env=e151.0
  fs              %17.5 = FrameState         R     0x55d0000b1fa0+468: [], env=e151.7, next=%17.4
  env             e17.6 = (MkEnv)            l     x=%163.3, parent=R_BaseNamespace, context 0
  fs              %17.7 = FrameState         R     0x55d0000baea0+91: [%163.4], env=e17.6, next=%17.5
  void                    Deopt              !v    %17.7, %17.3, %17.1   !
BB20   <- [144, 171]
  lgl$-           %20.0 = Phi                      %171.1:BB171, %144.1:BB144
  lgl$-           %20.1 = %20.0
  lgl$-           %20.2 = AsLogical                %20.1
  lgl$#-          %20.3 = Identical                %20.2, false
  void                    Branch                   %20.3 -> BB143 (if true) | BB21 (if false)
BB169   <- [19]
  lgl$#-          %169.0 = IsType                   %163.1 isA lgl$-
  void                    Branch                   %169.0 -> BB171 (if true) | BB172 (if false)
BB170   <- [19]
  void                    Nop                !     
  lgl$#-          %170.1 = %19.1
  dr              %170.2 = DeadBranchReached@0x55cfff5a41c8[Test#1]
  goto BB17
BB143   <- [20]
  void                    Nop                !     
  lgl$-           %143.1 = %20.2
  goto BB22
BB21   <- [20]
  val?^ | miss    %21.0 = LdVar              eRd   is.na, R_BaseNamespace
  lgl$#-          %21.1 = Identical                <blt is.na>, %21.0   <true>
  void                    Branch                   %21.1 -> BB167 (if true) | BB168 (if false)
BB171   <- [169]
  lgl$-           %171.0 = AsLogical                %165.1
  lgl$-           %171.1 = %171.0
  goto BB20
BB172   <- [169]
  void                    Nop                !     
  val?            %172.1 = %163.1
  dr              %172.2 = Typecheck@0x55cfff5a41c8[Type#4]
  goto BB17
BB22   <- [143, 173]
  lgl$-           %22.0 = Phi                      %173.5:BB173, %143.1:BB143
  lgl$-           %22.1 = %22.0
  lgl$-           %22.2 = AsLogical                %22.1
  lgl$#-          %22.3 = Identical                %22.2, false
  void                    Branch                   %22.3 -> BB142 (if true) | BB25 (if false)
BB167   <- [21]
  lgl$#-          %167.0 = IsType                   %163.1 isA lgl$-
  void                    Branch                   %167.0 -> BB173 (if true) | BB174 (if false)
BB168   <- [21]
  void                    Nop                !     
  lgl$#-          %168.1 = %21.1
  dr              %168.2 = DeadBranchReached@0x55cfff5a41c8[Test#2]
  goto BB17
BB142   <- [22]
  void                    Nop                !     
  lgl$-           %142.1 = %22.2
  goto BB26
BB25   <- [22]
  lgl$#-          %25.0 = IsType                   %163.1 isA lgl$-
  void                    Branch                   %25.0 -> BB179 (if true) | BB180 (if false)
BB173   <- [167]
  lgl$-           %173.0 = CastType           d     dn %163.1
  lgl$-           %173.1 = CallSafeBuiltin    wed   is.na(%173.0)    <lgl$->
  lgl$-           %173.2 = Not                d     %173.1, elided
  lgl$-           %173.3 = AsLogical                %173.2
  lgl$-           %173.4 = LAnd                     %20.2, %173.3
  lgl$-           %173.5 = %173.4
  goto BB22
BB174   <- [167]
  void                    Nop                !     
  val?            %174.1 = %163.1
  dr              %174.2 = Typecheck@0x55cfff5a41c8[Type#8]
  goto BB17
BB26   <- [142, 179]
  lgl$-           %26.0 = Phi                      %179.4:BB179, %142.1:BB142
  lgl$-           %26.1 = %26.0
  lgl$-           %26.2 = Not                d     %26.1, elided
  lgl$#-          %26.3 = CheckTrueFalse     e     %26.2
  void                    Branch                   %26.3 -> BB141 (if true) | BB27 (if false)
BB179   <- [25]
  lgl$-           %179.0 = CastType           d     dn %163.1
  lgl$-           %179.1 = Not                d     %179.0, elided
  lgl$-           %179.2 = AsLogical                %179.1
  lgl$-           %179.3 = LAnd                     %22.2, %179.2
  lgl$-           %179.4 = %179.3
  goto BB26
BB180   <- [25]
  void                    Nop                !     
  val?            %180.1 = %163.1
  dr              %180.2 = Typecheck@0x55cfff5a41c8[Type#10]
  goto BB23
BB141   <- [26]
  (cls|spec|blt)  %141.0 = LdFun              !v    simplify2array, <0x55cfff19e438>, e151.7
  prom-           %141.1 = MkArg                    unboundValue, inFunction[0x55d000d779b0]_p43, e151.7
  prom-           %141.2 = MkArg                    unboundValue, inFunction[0x55d000d779b0]_p44, e151.7
  val?            %141.3 = NamedCall          !v    %141.0(%141.1, higher=%141.2) e151.7   <int+>
  val?            %141.4 = %141.3
  goto BB28
BB27   <- [26]
  val?^ | miss    %27.0 = LdVar              eR    answer, e151.7
  lgl$#-          %27.1 = IsType                   %27.0 isA val?~+ | miss
  void                    Branch                   %27.1 -> BB175 (if true) | BB176 (if false)
BB23   <- [176, 180]
  val?^ | miss    %23.0 = Phi                      %176.1:BB176, %180.1:BB180
  val?^ | miss    %23.1 = %23.0
  dr              %23.2 = Phi                      %176.2:BB176, %180.2:BB180
  dr              %23.3 = %23.2
  fs              %23.4 = FrameState         R     0x55d0000ad500+54: [], env=e151.0
  fs              %23.5 = FrameState         R     0x55d0000b1fa0+468: [], env=e151.7, next=%23.4
  fs              %23.6 = FrameState         R     0x55d0000baea0+319: [%22.1], env=e165.3, next=%23.5
  void                    Deopt              !v    %23.6, %23.3, %23.1   !
BB28   <- [141, 175]
  val?            %28.0 = Phi                      %175.2:BB175, %141.4:BB141
  val?            %28.1 = %28.0
  val?            %28.2 = PopContext         C     %28.1, %151.4   <vec+>
  void                    StVar              lW    parens, %28.2, e151.0
  val?^ | miss    %28.4 = LdVar              eR    lapply, e151.0
  lgl$#-          %28.5 = Identical                %28.4, function(X, FUN, ...) <(rir::DispatchTable*)0x|...
  void                    Branch                   %28.5 -> BB177 (if true) | BB178 (if false)
BB175   <- [27]
  val?~+ | miss   %175.0 = CastType           d     dn %27.0
  val?+           %175.1 = Force!<value>            %175.0,    <vec+>
  val?+           %175.2 = %175.1
  goto BB28
BB176   <- [27]
  void                    Nop                !     
  val?^ | miss    %176.1 = %27.0
  dr              %176.2 = Typecheck@0x55d0000ae2a0[Type#16]
  goto BB23
BB177   <- [28]
  prom-           %177.0 = MkArg                    unboundValue, inFunction[0x55d000d779b0]_p2 (!refl), e151.0
  cls             %177.1 = MkCls                    inFunction@Prom(3)0, e151.0
  prom-           %177.2 = MkArg                    %177.1, inFunction[0x55d000d779b0]_p3 (!refl), e151.0
  ct              %177.3 = PushContext        lCL   %177.0, %177.2, lapply(parens, function(<lst x=R_MissingArg>, |..., function(X, FUN, ...) <(rir::DispatchTable*)0x|..., e151.0
  cls~            %177.4 = CastType                 up %177.2
  val?^           %177.5 = CastType                 up %177.0
  env             e177.6 = MkEnv              l     X=%177.5, FUN=%177.4, ...(miss)=missingArg, parent=R_BaseNamespace, context 1
  prom-           %177.7 = MkArg                    unboundValue, inFunction[0x55d000d779b0]_p45 (!refl), e177.6
  val?            %177.8 = StaticCall         !v    match.fun[0x55d001080210](%177.7) e177.6   <(cls|blt)->
  void                    StVar              lW    FUN, %177.8, e177.6
  val?^ | miss    %177.10 = LdVar              eR    is.vector, e177.6
  lgl$#-          %177.11 = Identical                %177.10, function(x, mode="any") <(rir::DispatchTable*)|...
  void                    Branch                   %177.11 -> BB181 (if true) | BB182 (if false)
BB178   <- [28]
  fs              %178.0 = FrameState         R     0x55d0000ad500+68: [], env=e151.0
  void                    Deopt              !v    %178.0, CallTarget@0x55cfff5a36c8[Call#2], %28.4   !
BB181   <- [177]
  val?^ | miss    %181.0 = LdVar              eR    X, e177.6
  val?            %181.1 = Force!<lazy>       !v    %181.0, e177.6   <val?>
  lgl$#-          %181.2 = CallSafeBuiltin    wed   is.vector(%181.1, "any")    <lgl$->
  lgl$#-          %181.3 = Not                d     %181.2, elided
  void                    Branch                   %181.2 -> BB140 (if true) | BB35 (if false)
BB182   <- [177]
  fs              %182.0 = FrameState         R     0x55d0000ad500+105: [], env=e151.0
  fs              %182.1 = FrameState         R     0x55cffe3d13e0+46: [], env=e177.6, next=%182.0
  void                    Deopt              !v    %182.1, CallTarget@0x55d000072490[Call#1], %177.10   !
BB140   <- [181]
  val?^ | miss    %140.0 = LdVar              eR    is.object, e177.6
  lgl$#-          %140.1 = Identical                <blt is.object>, %140.0   <true>
  void                    Branch                   %140.1 -> BB183 (if true) | BB184 (if false)
BB35   <- [181]
  void                    Nop                !     
  lgl$#-          %35.1 = %181.3
  goto BB36
BB183   <- [140]
  val?^ | miss    %183.0 = LdVar              eR    X, e177.6
  val?            %183.1 = Force!<wrapped>    !v    %183.0, e177.6   <val?+>
  lgl$#-          %183.2 = CallSafeBuiltin    wed   is.object(%183.1)    <lgl$->
  lgl$-           %183.3 = LOr                      %181.3, %183.2
  lgl$-           %183.4 = %183.3
  goto BB36
BB184   <- [140]
  fs              %184.0 = FrameState         R     0x55d0000ad500+105: [], env=e151.0
  fs              %184.1 = FrameState         R     0x55cffe3d13e0+78: [], env=e177.6, next=%184.0
  prom-           %184.2 = MkArg                    %181.1, inFunction[0x55d000d779b0]_p46 (!refl), e177.6
  val?~           %184.3 = CastType                 up %184.2
  env             e184.4 = (MkEnv)            l     mode(miss)="any", x=%184.3, parent=R_BaseNamespace, context 0
  fs              %184.5 = FrameState         R     0x55d0000b1150+41: [%181.2], env=e184.4, next=%184.1
  void                    Deopt              !v    %184.5, DeadBranchReached@0x55d000072490[Test#0], %140.1   !
BB36   <- [35, 183]
  lgl$-           %36.0 = Phi                      %183.4:BB183, %35.1:BB35
  lgl$-           %36.1 = %36.0
  lgl$#-          %36.2 = CheckTrueFalse     e     %36.1
  void                    Branch                   %36.2 -> BB139 (if true) | BB39 (if false)
BB139   <- [36]
  val?^ | miss    %139.0 = LdVar              eR    as.list, e177.6
  lgl$#-          %139.1 = Identical                %139.0, function(x, ...) <(rir::DispatchTable*)0x55d00|...
  void                    Branch                   %139.1 -> BB185 (if true) | BB186 (if false)
BB39   <- [36]
  void                    Nop                !     
  goto BB40
BB185   <- [139]
  val?^ | miss    %185.0 = LdVar              eR    X, e177.6
  val?            %185.1 = Force!<wrapped>    !v    %185.0, e177.6   <vec>
  val?            %185.2 = StaticCall         !v    as.list[0x55d000fb9be0](%185.1) { 0 } e177.6   <vec>
  void                    StVar              lW    X, %185.2, e177.6
  goto BB40
BB186   <- [139]
  fs              %186.0 = FrameState         R     0x55d0000ad500+105: [], env=e151.0
  fs              %186.1 = FrameState         R     0x55cffe3d13e0+189: [%36.1], env=e177.6, next=%186.0
  void                    Deopt              !v    %186.1, CallTarget@0x55d000072490[Call#3], %139.0   !
BB40   <- [39, 185]
  val?^ | miss    %40.0 = LdVar              eR    X, e177.6
  val?            %40.1 = Force!<wrapped>    !v    %40.0, e177.6   <val?>
  (nil|str)-      %40.2 = Names                    %40.1
  int$-           %40.3 = Length                   %40.1
  vec-            %40.4 = CallSafeBuiltin    wed   vector("list", %40.3) 
  val+            %40.5 = SetNames           e     %40.4, %40.2
  int$#-          %40.6 = 0L
  val+            %40.7 = %40.5
  goto BB41
BB41   <- [42, 40]
  int$-           %41.0 = Phi                      %40.6:BB40, %42.7:BB42
  int$-           %41.1 = %41.0
  val?            %41.2 = Phi                      %40.7:BB40, %42.8:BB42
  val?            %41.3 = %41.2
  int$-           %41.4 = Inc                      %41.1
  lgl$-           %41.5 = Lt                 d     %40.3, %41.4, elided
  lgl$#-          %41.6 = Identical                %41.5, true
  void                    Branch                   %41.6 -> BB43 (if true) | BB42 (if false)
BB43   <- [41]
  val?            %43.0 = PopContext         C     %41.3, %177.3   <vec+>
  void                    StVar              lW    parens, %43.0, e151.0
  (cls|spec|blt)  %43.2 = LdFun              !v    data.frame, <0x55cffffad950>, e151.0
  prom-           %43.3 = MkArg                    unboundValue, inFunction[0x55d000d779b0]_p4, e151.0
  prom-           %43.4 = MkArg                    unboundValue, inFunction[0x55d000d779b0]_p7, e151.0
  val?            %43.5 = NamedCall          !v    %43.2(i=%43.3, c=%43.4) e151.0   <vec>
  void                    StVar              lW    temp, %43.5, e151.0
  val?^ | miss    %43.7 = LdVar              eR    nrow, e151.0
  lgl$#-          %43.8 = Identical                %43.7, function(x) <(rir::DispatchTable*)0x55d0001bf9|...
  void                    Branch                   %43.8 -> BB187 (if true) | BB188 (if false)
BB42   <- [41]
  void                    StVar              lW    i, %41.4, e177.6
  (cls|spec|blt)  %42.1 = LdFun              !v    FUN, e177.6
  prom-           %42.2 = MkArg                    unboundValue, inFunction[0x55d000d779b0]_p47, e177.6
  (miss|dots)     %42.3 = LdDots             R     , e177.6
  *dots-          %42.4 = ExpandDots               %42.3
  val?            %42.5 = NamedCall          !v    %42.1(%42.2, .xpandDotsTrigger=%42.4) e177.6   <val?>
  val?            %42.6 = SetVecElt          e     %42.5, %41.3, %41.4
  int$-           %42.7 = %41.4
  val?            %42.8 = %42.6
  goto BB41
BB187   <- [43]
  prom-           %187.0 = MkArg                    unboundValue, inFunction[0x55d000d779b0]_p12 (!refl), e151.0
  ct              %187.1 = PushContext        lCL   %187.0, nrow(temp), function(x) <(rir::DispatchTable*)0x55d0001bf9|..., e151.0
  val?^           %187.2 = CastType                 up %187.0
  env             e187.3 = (MkEnv)            l     x=%187.2, parent=R_BaseNamespace, context 1
  val?            %187.4 = Force!<lazy>       !vrL  %187.2, e187.3   <(str|vec)>
  lgl$#-          %187.5 = IsEnvStub          R     , e187.3
  void                    Branch                   %187.5 -> BB189 (if true) | BB190 (if false)
BB188   <- [43]
  fs              %188.0 = FrameState         R     0x55d0000ad500+178: [], env=e151.0
  void                    Deopt              !v    %188.0, CallTarget@0x55cfff5a36c8[Call#8], %43.7   !
BB189   <- [187]
  val?            %189.0 = CallBuiltin        !vL   dim(%187.4) e187.3   <int->
  lgl$#-          %189.1 = IsType                   %189.0 isA val+   <true>
  lgl$#-          %189.2 = IsType                   %189.0 isA int-
  lgl$#-          %189.3 = IsEnvStub          R     , e187.3
  void                    Branch                   %189.3 -> BB191 (if true) | BB192 (if false)
BB190   <- [187]
  fs              %190.0 = FrameState         R     0x55d0000ad500+210: [], env=e151.0
  fs              %190.1 = FrameState         R     0x55d00018d310+69: [<blt dim>, %187.4], env=e187.3, next=%190.0
  void                    Deopt              !v    %190.1, EnvStubMaterialized@0x55cfff552ee8[Call#unknown], e187.3   !
BB191   <- [189]
  void                    Branch                   %189.1 -> BB193 (if true) | BB194 (if false)
BB192   <- [189]
  void                    Nop                !     
  env             e192.1 = e187.3
  dr              %192.2 = EnvStubMaterialized@0x55cfff552ee8[Call#unknown]
  goto BB48
BB193   <- [191]
  void                    Branch                   %189.2 -> BB195 (if true) | BB196 (if false)
BB194   <- [191]
  void                    Nop                !     
  lgl$#-          %194.1 = %189.1
  dr              %194.2 = DeadBranchReached@0x55cfff552ee8[Test#1]
  goto BB48
BB48   <- [192, 194, 196]
  val?^ | miss    %48.0 = Phi                      e192.1:BB192, %194.1:BB194, %196.1:BB196
  val?^ | miss    %48.1 = %48.0
  dr              %48.2 = Phi                      %192.2:BB192, %194.2:BB194, %196.2:BB196
  dr              %48.3 = %48.2
  fs              %48.4 = FrameState         R     0x55d0000ad500+210: [], env=e151.0
  fs              %48.5 = FrameState         R     0x55d00018d310+91: [%189.0], env=e187.3, next=%48.4
  void                    Deopt              !v    %48.5, %48.3, %48.1   !
BB195   <- [193]
  int-            %195.0 = CastType           d     dn %189.0
  int$-           %195.1 = Extract1_1D        wed   %195.0, 1L, elided   <int$->
  val?            %195.2 = PopContext         C     %195.1, %187.1   <int$->
  lgl$#-          %195.3 = IsType                   %195.2 isA int$-
  void                    Branch                   %195.3 -> BB197 (if true) | BB198 (if false)
BB196   <- [193]
  void                    Nop                !     
  val?            %196.1 = %189.0
  dr              %196.2 = Typecheck@0x55cfff552ee8[Type#2]
  goto BB48
BB197   <- [195]
  int$-           %197.0 = CastType           d     dn %195.2
  lgl$-           %197.1 = Eq                 d     %197.0, 0, elided   <lgl$->
  lgl$#-          %197.2 = CheckTrueFalse     e     %197.1
  void                    Branch                   %197.2 -> BB138 (if true) | BB52 (if false)
BB198   <- [195]
  void                    Nop                !     
  val?            %198.1 = %195.2
  dr              %198.2 = Typecheck@0x55cfff5a36c8[Type#19]
  goto BB50
BB138   <- [197]
  val?^ | miss    %138.0 = LdVar              eR    character, e151.0
  lgl$#-          %138.1 = Identical                %138.0, function(length=0L) <(rir::DispatchTable*)0x55|...
  void                    Branch                   %138.1 -> BB205 (if true) | BB206 (if false)
BB52   <- [197]
  (cls|spec|blt)  %52.0 = LdFun              !v    [, <0x55cffe0e4c80>, e151.0
  prom-           %52.1 = MkArg                    unboundValue, inFunction[0x55d000d779b0]_p13, e151.0
  prom-           %52.2 = MkArg                    unboundValue, inFunction[0x55d000d779b0]_p14, e151.0
  val?            %52.3 = NamedCall          !v    %52.0(%52.1, %52.2, missingArg, drop=false) e151.0   <vec>
  void                    StVar              lW    temp, %52.3, e151.0
  val?^ | miss    %52.5 = LdVar              eR    which, e151.0
  lgl$#-          %52.6 = Identical                %52.5, function(x, arr.ind=FALSE, useNames=TRUE) <(ri|...
  void                    Branch                   %52.6 -> BB199 (if true) | BB200 (if false)
BB50   <- [198, 206]
  val?^ | miss    %50.0 = Phi                      %198.1:BB198, %206.1:BB206
  val?^ | miss    %50.1 = %50.0
  dr              %50.2 = Phi                      %198.2:BB198, %206.2:BB206
  dr              %50.3 = %50.2
  fs              %50.4 = FrameState         R     0x55d0000ad500+210: [%195.2], env=e151.0
  void                    Deopt              !v    %50.4, %50.3, %50.1   !
BB205   <- [138]
  str-            %205.0 = CallSafeBuiltin    vwed  vector("character", 0L)    <str->
  str-            %205.1 = %205.0
  goto BB130
BB206   <- [138]
  void                    Nop                !     
  val?^ | miss    %206.1 = %138.0
  dr              %206.2 = CallTarget@0x55cfff5a36c8[Call#9]
  goto BB50
BB199   <- [52]
  val?^ | miss    %199.0 = LdVar              eR    cumsum, e151.0
  lgl$#-          %199.1 = Identical                %199.0, <blt cumsum>
  void                    Branch                   %199.1 -> BB201 (if true) | BB202 (if false)
BB200   <- [52]
  void                    Nop                !     
  val?^ | miss    %200.1 = %52.5
  dr              %200.2 = CallTarget@0x55cfff5a36c8[Call#13]
  goto BB53
BB130   <- [205, 293]
  val?            %130.0 = Phi                      %293.2:BB293, %205.1:BB205
  val?            %130.1 = %130.0
  void                    Return             l     %130.1
BB201   <- [199]
  (cls|spec|blt)  %201.0 = LdFun              !v    $, <0x55cffe0e4c10>, e151.0
  prom-           %201.1 = MkArg                    unboundValue, inFunction[0x55d000d779b0]_p20, e151.0
  prom-           %201.2 = MkArg                    unboundValue, inFunction[0x55d000d779b0]_p21, e151.0
  val?            %201.3 = Call               !v    %201.0(%201.1, %201.2) e151.0   <real$->
  val?            %201.4 = CallBuiltin        !v    cumsum(%201.3) e151.0   <real$->
  lgl$#-          %201.5 = IsType                   %201.4 isA real$-
  void                    Branch                   %201.5 -> BB203 (if true) | BB204 (if false)
BB202   <- [199]
  void                    Nop                !     
  val?^ | miss    %202.1 = %199.0
  dr              %202.2 = CallTarget@0x55cfff5a36c8[Call#14]
  goto BB53
BB53   <- [200, 202]
  val?^ | miss    %53.0 = Phi                      %200.1:BB200, %202.1:BB202
  val?^ | miss    %53.1 = %53.0
  dr              %53.2 = Phi                      %200.2:BB200, %202.2:BB202
  dr              %53.3 = %53.2
  fs              %53.4 = FrameState         R     0x55d0000ad500+348: [], env=e151.0
  void                    Deopt              !v    %53.4, %53.3, %53.1   !
BB203   <- [201]
  real$-          %203.0 = CastType           d     dn %201.4
  lgl$-           %203.1 = Gt                 d     %203.0, 0, elided   <lgl$->
  val+            %203.2 = CallSafeBuiltin    wed   which(%203.1)    <int->
  void                    StVar              lW    wp, %203.2, e151.0
  lgl$#-          %203.4 = IsType                   %203.2 isA int$-
  val?^ | miss    %203.5 = LdVar              eR    length, e151.0
  lgl$#-          %203.6 = Identical                <blt length>, %203.5   <true>
  void                    Branch                   %203.6 -> BB207 (if true) | BB208 (if false)
BB204   <- [201]
  prom-           %204.0 = MkArg                    unboundValue, inFunction[0x55d000d779b0]_p18, e151.0
  val?^           %204.1 = CastType                 up %204.0
  fs              %204.2 = FrameState         R     0x55d0000ad500+380: [], env=e151.0
  env             e204.3 = (MkEnv)            l     wh=unboundValue, d=unboundValue, useNames(miss)=true, arr.ind(miss)=false, x=%204.1, parent=R_BaseNamespace, context 0
  fs              %204.4 = FrameState         R     0x55d00007f240+9: [], env=e204.3, next=%204.2
  fs              %204.5 = FrameState         R     0x55d0000a4c00+32(pr): [%201.4], env=e151.0, next=%204.4
  void                    Deopt              !v    %204.5, Typecheck@0x55cfff5a36c8[Type#31], %201.4   !
BB207   <- [203]
  void                    Branch                   %203.4 -> BB209 (if true) | BB210 (if false)
BB208   <- [203]
  void                    Nop                !     
  lgl$#-          %208.1 = %203.6
  dr              %208.2 = DeadBranchReached@0x55cfff5a36c8[Test#4]
  goto BB57
BB209   <- [207]
  (cls|spec|blt)  %209.0 = LdFun              !v    $, <0x55cffe0e4c10>, e151.0
  prom-           %209.1 = MkArg                    unboundValue, inFunction[0x55d000d779b0]_p22, e151.0
  prom-           %209.2 = MkArg                    unboundValue, inFunction[0x55d000d779b0]_p23, e151.0
  val?            %209.3 = Call               !v    %209.0(%209.1, %209.2) e151.0   <int$->
  lgl$#-          %209.4 = IsType                   %209.3 isA val+   <true>
  lgl$#-          %209.5 = IsType                   %209.3 isA int$-
  void                    Branch                   %209.5 -> BB211 (if true) | BB212 (if false)
BB210   <- [207]
  void                    Nop                !     
  val+            %210.1 = %203.2
  dr              %210.2 = Typecheck@0x55cfff5a36c8[Type#33]
  goto BB57
BB57   <- [208, 210]
  val?^ | miss    %57.0 = Phi                      %208.1:BB208, %210.1:BB210
  val?^ | miss    %57.1 = %57.0
  dr              %57.2 = Phi                      %208.2:BB208, %210.2:BB210
  dr              %57.3 = %57.2
  fs              %57.4 = FrameState         R     0x55d0000ad500+394: [], env=e151.0
  void                    Deopt              !v    %57.4, %57.3, %57.1   !
BB211   <- [209]
  int$-           %211.0 = CastType           d     dn %209.3
  void                    Branch                   %209.4 -> BB213 (if true) | BB214 (if false)
BB212   <- [209]
  void                    Nop                !     
  val?            %212.1 = %209.3
  dr              %212.2 = Typecheck@0x55cfff5a36c8[Type#40]
  goto BB59
BB213   <- [211]
  val?^ | miss    %213.0 = LdVar              eR    wp, e151.0
  lgl$#-          %213.1 = IsType                   %213.0 isA int$-
  void                    Branch                   %213.1 -> BB215 (if true) | BB216 (if false)
BB214   <- [211]
  void                    Nop                !     
  lgl$#-          %214.1 = %209.4
  dr              %214.2 = DeadBranchReached@0x55cfff5a36c8[Test#5]
  goto BB59
BB59   <- [212, 214, 216]
  val?^ | miss    %59.0 = Phi                      %212.1:BB212, %214.1:BB214, %216.1:BB216
  val?^ | miss    %59.1 = %59.0
  dr              %59.2 = Phi                      %212.2:BB212, %214.2:BB214, %216.2:BB216
  dr              %59.3 = %59.2
  fs              %59.4 = FrameState         R     0x55d0000ad500+571: [%209.3], env=e151.0
  void                    Deopt              !v    %59.4, %59.3, %59.1   !
BB215   <- [213]
  int$-           %215.0 = CastType           d     dn %213.0
  int$-           %215.1 = Extract1_1D        wed   %215.0, 1L, elided   <int$->
  int-            %215.2 = Extract1_1D        wed   %211.0, %215.1, elided   <int$->
  lgl$#-          %215.3 = IsType                   %215.2 isA int$-
  void                    Branch                   %215.3 -> BB217 (if true) | BB218 (if false)
BB216   <- [213]
  void                    Nop                !     
  val?^ | miss    %216.1 = %213.0
  dr              %216.2 = Typecheck@0x55cfff5a36c8[Type#43]
  goto BB59
BB217   <- [215]
  int$-           %217.0 = CastType           d     dn %215.2
  void                    StVar              lW    index, %217.0, e151.0
  val?^ | miss    %217.2 = LdVar              eR    substr, e151.0
  lgl$#-          %217.3 = Identical                %217.2, function(x, start, stop) <(rir::DispatchTable*|...
  void                    Branch                   %217.3 -> BB219 (if true) | BB220 (if false)
BB218   <- [215]
  fs              %218.0 = FrameState         R     0x55d0000ad500+666: [%215.2], env=e151.0
  void                    Deopt              !v    %218.0, Typecheck@0x55cfff5a36c8[Type#45], %215.2   !
BB219   <- [217]
  prom-           %219.0 = MkArg                    unboundValue, inFunction[0x55d000d779b0]_p24, e151.0
  prom-           %219.1 = MkArg                    unboundValue, inFunction[0x55d000d779b0]_p25, e151.0
  ct              %219.2 = PushContext        lCL   %219.0, 1L, %219.1, substr(line, 1L, -(index, 1L)), function(x, start, stop) <(rir::DispatchTable*|..., e151.0
  val?^           %219.3 = CastType                 up %219.1
  val?^           %219.4 = CastType                 up %219.0
  env             e219.5 = MkEnv              l     x=%219.4, start=1L, stop=%219.3, parent=R_BaseNamespace, context 1
  val?            %219.6 = Force!<lazy>       !vL   %219.4, e219.5   <str->
  lgl$#-          %219.7 = CallSafeBuiltin    wed   is.character(%219.6)    <lgl$->
  void                    Branch                   %219.7 -> BB137 (if true) | BB65 (if false)
BB220   <- [217]
  fs              %220.0 = FrameState         R     0x55d0000ad500+681: [], env=e151.0
  void                    Deopt              !v    %220.0, CallTarget@0x55cfff5a36c8[Call#19], %217.2   !
BB137   <- [219]
  void                    Nop                !     
  val?^           %137.1 = %219.4
  goto BB70
BB65   <- [219]
  val?^ | miss    %65.0 = LdVar              eR    as.character, e219.5
  lgl$#-          %65.1 = Identical                <blt as.character>, %65.0   <@?>
  void                    Branch                   %65.1 -> BB67 (if true) | BB66 (if false)
BB70   <- [137, 221]
  val?^           %70.0 = Phi                      %137.1:BB137, %221.3:BB221
  val?^           %70.1 = %70.0
  val?            %70.2 = Force!<wrapped>    !v    %70.1, e219.5   <str->
  val?^ | miss    %70.3 = LdVar              eR    as.integer, e219.5
  lgl$#-          %70.4 = Identical                <blt as.integer>, %70.3   <true>
  void                    Branch                   %70.4 -> BB223 (if true) | BB224 (if false)
BB67   <- [65]
  lgl$#-          %67.0 = IsType                   %219.6 isA val?+
  void                    Branch                   %67.0 -> BB221 (if true) | BB222 (if false)
BB66   <- [65]
  fs              %66.0 = FrameState         R     0x55d0000ad500+723: [], env=e151.0
  (cls|spec|blt)  %66.1 = LdFun              !v    as.character, R_BaseNamespace
  fs              %66.2 = FrameState         R     0x55d00007eb80+136: [%66.1], env=e219.5, next=%66.0
  void                    Deopt              !v    %66.2, DeadCall@0x55cffeb28fe0[Call#1], %66.1   !
BB223   <- [70]
  val?^ | miss    %223.0 = LdVar              eR    start, e219.5
  val?            %223.1 = Force!<lazy>       !v    %223.0, e219.5   <int$->
  lgl$#-          %223.2 = IsType                   %223.1 isA int$-
  void                    Branch                   %223.2 -> BB225 (if true) | BB226 (if false)
BB224   <- [70]
  fs              %224.0 = FrameState         R     0x55d0000ad500+723: [], env=e151.0
  fs              %224.1 = FrameState         R     0x55d00007eb80+222: [%70.2], env=e219.5, next=%224.0
  void                    Deopt              !v    %224.1, DeadBranchReached@0x55cffeb28fe0[Test#2], %70.4   !
BB221   <- [67]
  val?+           %221.0 = CastType           d     dn %219.6   <val?_>
  val+            %221.1 = CallSafeBuiltin    wed   as.character(%221.0)    <val?_>
  void                    StVar              lW    x, %221.1, e219.5
  val+            %221.3 = %221.1
  goto BB70
BB222   <- [67]
  fs              %222.0 = FrameState         R     0x55d0000ad500+723: [], env=e151.0
  fs              %222.1 = FrameState         R     0x55d00007eb80+177: [<blt as.character>, %219.6], env=e219.5, next=%222.0
  void                    Deopt              !v    %222.1, Typecheck@0x55cffeb28fe0[Type#4], %219.6   !
BB225   <- [223]
  int$-           %225.0 = CastType           d     dn %223.1
  val?^ | miss    %225.1 = LdVar              eR    as.integer, e219.5
  lgl$#-          %225.2 = Identical                <blt as.integer>, %225.1   <true>
  void                    Branch                   %225.2 -> BB227 (if true) | BB228 (if false)
BB226   <- [223]
  void                    Nop                !     
  val?            %226.1 = %223.1
  dr              %226.2 = Typecheck@0x55cffeb28fe0[Type#8]
  goto BB73
BB227   <- [225]
  val?^ | miss    %227.0 = LdVar              eR    stop, e219.5
  val?            %227.1 = Force!<lazy>       !v    %227.0, e219.5   <int$->
  lgl$#-          %227.2 = IsType                   %227.1 isA int$-
  void                    Branch                   %227.2 -> BB229 (if true) | BB230 (if false)
BB228   <- [225]
  void                    Nop                !     
  lgl$#-          %228.1 = %225.2
  dr              %228.2 = DeadBranchReached@0x55cffeb28fe0[Test#3]
  goto BB73
BB73   <- [226, 228]
  val?^ | miss    %73.0 = Phi                      %226.1:BB226, %228.1:BB228
  val?^ | miss    %73.1 = %73.0
  dr              %73.2 = Phi                      %226.2:BB226, %228.2:BB228
  dr              %73.3 = %73.2
  fs              %73.4 = FrameState         R     0x55d0000ad500+723: [], env=e151.0
  fs              %73.5 = FrameState         R     0x55d00007eb80+296: [%70.2, <blt as.integer>, %223.1], env=e219.5, next=%73.4
  void                    Deopt              !v    %73.5, %73.3, %73.1   !
BB229   <- [227]
  int$-           %229.0 = CastType           d     dn %227.1
  val?            %229.1 = CallBuiltin        !v    substr(%70.2, %225.0, %229.0) e219.5
  val?            %229.2 = PopContext         C     %229.1, %219.2   <str$->
  void                    StVar              lW    prefix, %229.2, e151.0
  val?^ | miss    %229.4 = LdVar              eR    substr, e151.0
  lgl$#-          %229.5 = Identical                %229.4, function(x, start, stop) <(rir::DispatchTable*|...
  void                    Branch                   %229.5 -> BB231 (if true) | BB232 (if false)
BB230   <- [227]
  fs              %230.0 = FrameState         R     0x55d0000ad500+723: [], env=e151.0
  fs              %230.1 = FrameState         R     0x55d00007eb80+392: [%70.2, %225.0, <blt as.integer>, %227.1], env=e219.5, next=%230.0
  void                    Deopt              !v    %230.1, Typecheck@0x55cffeb28fe0[Type#11], %227.1   !
BB231   <- [229]
  prom-           %231.0 = MkArg                    unboundValue, inFunction[0x55d000d779b0]_p26, e151.0
  prom-           %231.1 = MkArg                    unboundValue, inFunction[0x55d000d779b0]_p27, e151.0
  prom-           %231.2 = MkArg                    unboundValue, inFunction[0x55d000d779b0]_p28, e151.0
  ct              %231.3 = PushContext        lCL   %231.0, %231.1, %231.2, substr(line, +(index, 1L), +(cursor, 1L)), function(x, start, stop) <(rir::DispatchTable*|..., e151.0
  val?^           %231.4 = CastType                 up %231.2
  val?^           %231.5 = CastType                 up %231.1
  val?^           %231.6 = CastType                 up %231.0
  env             e231.7 = MkEnv              l     x=%231.6, start=%231.5, stop=%231.4, parent=R_BaseNamespace, context 1
  val?            %231.8 = Force!<lazy>       !vL   %231.6, e231.7   <str->
  lgl$#-          %231.9 = CallSafeBuiltin    wed   is.character(%231.8)    <lgl$->
  void                    Branch                   %231.9 -> BB136 (if true) | BB79 (if false)
BB232   <- [229]
  fs              %232.0 = FrameState         R     0x55d0000ad500+737: [], env=e151.0
  void                    Deopt              !v    %232.0, CallTarget@0x55cfff5a36c8[Call#20], %229.4   !
BB136   <- [231]
  void                    Nop                !     
  val?^           %136.1 = %231.6
  goto BB84
BB79   <- [231]
  val?^ | miss    %79.0 = LdVar              eR    as.character, e231.7
  lgl$#-          %79.1 = Identical                <blt as.character>, %79.0   <@?>
  void                    Branch                   %79.1 -> BB81 (if true) | BB80 (if false)
BB84   <- [136, 237]
  val?^           %84.0 = Phi                      %136.1:BB136, %237.3:BB237
  val?^           %84.1 = %84.0
  val?            %84.2 = Force!<wrapped>    !v    %84.1, e231.7   <str->
  val?^ | miss    %84.3 = LdVar              eR    as.integer, e231.7
  lgl$#-          %84.4 = Identical                <blt as.integer>, %84.3   <true>
  void                    Branch                   %84.4 -> BB233 (if true) | BB234 (if false)
BB81   <- [79]
  lgl$#-          %81.0 = IsType                   %231.8 isA val?+
  void                    Branch                   %81.0 -> BB237 (if true) | BB238 (if false)
BB80   <- [79]
  fs              %80.0 = FrameState         R     0x55d0000ad500+779: [], env=e151.0
  (cls|spec|blt)  %80.1 = LdFun              !v    as.character, R_BaseNamespace
  fs              %80.2 = FrameState         R     0x55d00007eb80+136: [%80.1], env=e231.7, next=%80.0
  void                    Deopt              !v    %80.2, DeadCall@0x55cffeb28fe0[Call#1], %80.1   !
BB233   <- [84]
  val?^ | miss    %233.0 = LdVar              eR    start, e231.7
  val?            %233.1 = Force!<lazy>       !v    %233.0, e231.7   <int$->
  lgl$#-          %233.2 = IsType                   %233.1 isA int$-
  void                    Branch                   %233.2 -> BB235 (if true) | BB236 (if false)
BB234   <- [84]
  fs              %234.0 = FrameState         R     0x55d0000ad500+779: [], env=e151.0
  fs              %234.1 = FrameState         R     0x55d00007eb80+222: [%84.2], env=e231.7, next=%234.0
  void                    Deopt              !v    %234.1, DeadBranchReached@0x55cffeb28fe0[Test#2], %84.4   !
BB237   <- [81]
  val?+           %237.0 = CastType           d     dn %231.8   <val?_>
  val+            %237.1 = CallSafeBuiltin    wed   as.character(%237.0)    <val?_>
  void                    StVar              lW    x, %237.1, e231.7
  val+            %237.3 = %237.1
  goto BB84
BB238   <- [81]
  fs              %238.0 = FrameState         R     0x55d0000ad500+779: [], env=e151.0
  fs              %238.1 = FrameState         R     0x55d00007eb80+177: [<blt as.character>, %231.8], env=e231.7, next=%238.0
  void                    Deopt              !v    %238.1, Typecheck@0x55cffeb28fe0[Type#4], %231.8   !
BB235   <- [233]
  int$-           %235.0 = CastType           d     dn %233.1
  val?^ | miss    %235.1 = LdVar              eR    as.integer, e231.7
  lgl$#-          %235.2 = Identical                <blt as.integer>, %235.1   <true>
  void                    Branch                   %235.2 -> BB239 (if true) | BB240 (if false)
BB236   <- [233]
  void                    Nop                !     
  val?            %236.1 = %233.1
  dr              %236.2 = Typecheck@0x55cffeb28fe0[Type#8]
  goto BB87
BB239   <- [235]
  val?^ | miss    %239.0 = LdVar              eR    stop, e231.7
  val?            %239.1 = Force!<lazy>       !v    %239.0, e231.7   <int$->
  lgl$#-          %239.2 = IsType                   %239.1 isA int$-
  void                    Branch                   %239.2 -> BB241 (if true) | BB242 (if false)
BB240   <- [235]
  void                    Nop                !     
  lgl$#-          %240.1 = %235.2
  dr              %240.2 = DeadBranchReached@0x55cffeb28fe0[Test#3]
  goto BB87
BB87   <- [236, 240]
  val?^ | miss    %87.0 = Phi                      %236.1:BB236, %240.1:BB240
  val?^ | miss    %87.1 = %87.0
  dr              %87.2 = Phi                      %236.2:BB236, %240.2:BB240
  dr              %87.3 = %87.2
  fs              %87.4 = FrameState         R     0x55d0000ad500+779: [], env=e151.0
  fs              %87.5 = FrameState         R     0x55d00007eb80+296: [%84.2, <blt as.integer>, %233.1], env=e231.7, next=%87.4
  void                    Deopt              !v    %87.5, %87.3, %87.1   !
BB241   <- [239]
  int$-           %241.0 = CastType           d     dn %239.1
  val?            %241.1 = CallBuiltin        !v    substr(%84.2, %235.0, %241.0) e231.7
  val?            %241.2 = PopContext         C     %241.1, %231.3   <str$->
  void                    StVar              lW    suffix, %241.2, e151.0
  val?^ | miss    %241.4 = LdVar              eR    length, e151.0
  lgl$#-          %241.5 = Identical                <blt length>, %241.4   <true>
  void                    Branch                   %241.5 -> BB243 (if true) | BB244 (if false)
BB242   <- [239]
  fs              %242.0 = FrameState         R     0x55d0000ad500+779: [], env=e151.0
  fs              %242.1 = FrameState         R     0x55d00007eb80+392: [%84.2, %235.0, <blt as.integer>, %239.1], env=e231.7, next=%242.0
  void                    Deopt              !v    %242.1, Typecheck@0x55cffeb28fe0[Type#11], %239.1   !
BB243   <- [241]
  val?^ | miss    %243.0 = LdVar              eR    grep, e151.0
  lgl$#-          %243.1 = Identical                %243.0, function(pattern, x, ignore.case=FALSE, perl=F|...
  void                    Branch                   %243.1 -> BB245 (if true) | BB246 (if false)
BB244   <- [241]
  void                    Nop                !     
  lgl$#-          %244.1 = %241.5
  dr              %244.2 = DeadBranchReached@0x55cfff5a36c8[Test#8]
  goto BB91
BB245   <- [243]
  prom-           %245.0 = MkArg                    unboundValue, inFunction[0x55d000d779b0]_p29 (!refl), e151.0
  val?            %245.1 = StaticCall         !v    grep[0x55d000cf70b0]("=", %245.0, missingArg, missingArg, missingArg, true) { 0 1 5n } e151.0   <int->
  lgl$#-          %245.2 = IsType                   %245.1 isA int-
  void                    Branch                   %245.2 -> BB247 (if true) | BB248 (if false)
BB246   <- [243]
  void                    Nop                !     
  val?^ | miss    %246.1 = %243.0
  dr              %246.2 = CallTarget@0x55cfff5a36c8[Call#23]
  goto BB91
BB91   <- [244, 246]
  val?^ | miss    %91.0 = Phi                      %244.1:BB244, %246.1:BB246
  val?^ | miss    %91.1 = %91.0
  dr              %91.2 = Phi                      %244.2:BB244, %246.2:BB246
  dr              %91.3 = %91.2
  fs              %91.4 = FrameState         R     0x55d0000ad500+793: [], env=e151.0
  void                    Deopt              !v    %91.4, %91.3, %91.1   !
BB247   <- [245]
  int-            %247.0 = CastType           d     dn %245.1
  (int|real)$-    %247.1 = CallSafeBuiltin    wed   length(%247.0)    <int$->
  lgl$#-          %247.2 = IsType                   %247.1 isA int$-
  void                    Branch                   %247.2 -> BB249 (if true) | BB250 (if false)
BB248   <- [245]
  fs              %248.0 = FrameState         R     0x55d0000ad500+907: [<blt length>, %245.1], env=e151.0
  void                    Deopt              !v    %248.0, Typecheck@0x55cfff5a36c8[Type#59], %245.1   !
BB249   <- [247]
  int$-           %249.0 = CastType           d     dn %247.1
  lgl$-           %249.1 = Eq                 d     %249.0, 0L, elided   <lgl$->
  lgl$-           %249.2 = AsLogical                %249.1
  lgl$#-          %249.3 = Identical                %249.2, false
  void                    Branch                   %249.3 -> BB135 (if true) | BB97 (if false)
BB250   <- [247]
  void                    Nop                !     
  (int|real)$-    %250.1 = %247.1
  dr              %250.2 = Typecheck@0x55cfff5a36c8[Type#60]
  goto BB95
BB135   <- [249]
  void                    Nop                !     
  lgl$-           %135.1 = %249.2
  goto BB102
BB97   <- [249]
  val?^ | miss    %97.0 = LdVar              eR    length, e151.0
  lgl$#-          %97.1 = Identical                <blt length>, %97.0   <true>
  void                    Branch                   %97.1 -> BB251 (if true) | BB252 (if false)
BB95   <- [250, 252, 256]
  val?^ | miss    %95.0 = Phi                      %250.1:BB250, %252.1:BB252, %256.1:BB256
  val?^ | miss    %95.1 = %95.0
  dr              %95.2 = Phi                      %250.2:BB250, %252.2:BB252, %256.2:BB256
  dr              %95.3 = %95.2
  fs              %95.4 = FrameState         R     0x55d0000ad500+929: [%247.1], env=e151.0
  void                    Deopt              !v    %95.4, %95.3, %95.1   !
BB102   <- [135, 265]
  lgl$-           %102.0 = Phi                      %265.4:BB265, %135.1:BB135
  lgl$-           %102.1 = %102.0
  lgl$#-          %102.2 = CheckTrueFalse     e     %102.1
  void                    Branch                   %102.2 -> BB132 (if true) | BB105 (if false)
BB251   <- [97]
  val?^ | miss    %251.0 = LdVar              eR    grep, e151.0
  lgl$#-          %251.1 = Identical                %251.0, function(pattern, x, ignore.case=FALSE, perl=F|...
  void                    Branch                   %251.1 -> BB255 (if true) | BB256 (if false)
BB252   <- [97]
  void                    Nop                !     
  lgl$#-          %252.1 = %97.1
  dr              %252.2 = DeadBranchReached@0x55cfff5a36c8[Test#9]
  goto BB95
BB132   <- [102]
  val?^ | miss    %132.0 = LdVar              eR    setIsFirstArg, e151.0
  lgl$#-          %132.1 = Identical                %132.0, function(v) <(rir::DispatchTable*)0x55d0000a77|...
  void                    Branch                   %132.1 -> BB253 (if true) | BB254 (if false)
BB105   <- [102]
  void                    Nop                !     
  goto BB106
BB255   <- [251]
  prom-           %255.0 = MkArg                    unboundValue, inFunction[0x55d000d779b0]_p30, e151.0
  val?            %255.1 = StaticCall         !v    grep[0x55d000cf70b0](",", %255.0, missingArg, missingArg, missingArg, true) { 0 1 5n } e151.0   <int->
  lgl$#-          %255.2 = IsType                   %255.1 isA int-
  void                    Branch                   %255.2 -> BB257 (if true) | BB258 (if false)
BB256   <- [251]
  void                    Nop                !     
  val?^ | miss    %256.1 = %251.0
  dr              %256.2 = CallTarget@0x55cfff5a36c8[Call#26]
  goto BB95
BB253   <- [132]
  val?^ | miss    %253.0 = LdVar              eR    .CompletionEnv !upd, <env 0x55cfff1f98c8>
  env             e253.1 = (MkEnv)            l     v=true, .CompletionEnv=unboundValue, parent=<env 0x55cfff1f98c8>, context 0
  val?            %253.2 = Force!<wrapped>    !vL   %253.0, e253.1   <env->
  lgl$#-          %253.3 = IsType                   %253.2 isA val?-
  lgl$#-          %253.4 = IsEnvStub          R     , e253.1
  void                    Branch                   %253.4 -> BB261 (if true) | BB262 (if false)
BB254   <- [132]
  fs              %254.0 = FrameState         R     0x55d0000ad500+1110: [%102.1], env=e151.0
  void                    Deopt              !v    %254.0, CallTarget@0x55cfff5a36c8[Call#27], %132.0   !
BB106   <- [105, 263]
  val?^ | miss    %106.0 = LdVar              eR    length, e151.0
  lgl$#-          %106.1 = Identical                <blt length>, %106.0   <true>
  void                    Branch                   %106.1 -> BB259 (if true) | BB260 (if false)
BB257   <- [255]
  int-            %257.0 = CastType           d     dn %255.1
  (int|real)$-    %257.1 = CallSafeBuiltin    wed   length(%257.0)    <int$->
  lgl$#-          %257.2 = IsType                   %257.1 isA int$-
  void                    Branch                   %257.2 -> BB265 (if true) | BB266 (if false)
BB258   <- [255]
  fs              %258.0 = FrameState         R     0x55d0000ad500+1068: [%249.2, <blt length>, %255.1], env=e151.0
  void                    Deopt              !v    %258.0, Typecheck@0x55cfff5a36c8[Type#65], %255.1   !
BB261   <- [253]
  void                    Branch                   %253.3 -> BB263 (if true) | BB264 (if false)
BB262   <- [253]
  void                    Nop                !     
  env             e262.1 = e253.1
  dr              %262.2 = EnvStubMaterialized@0x55cfff5a2e88[Call#unknown]
  goto BB133
BB259   <- [106]
  val?^ | miss    %259.0 = LdVar              eR    grep, e151.0
  lgl$#-          %259.1 = Identical                %259.0, function(pattern, x, ignore.case=FALSE, perl=F|...
  void                    Branch                   %259.1 -> BB267 (if true) | BB268 (if false)
BB260   <- [106]
  void                    Nop                !     
  lgl$#-          %260.1 = %106.1
  dr              %260.2 = DeadBranchReached@0x55cfff5a36c8[Test#10]
  goto BB107
BB265   <- [257]
  int$-           %265.0 = CastType           d     dn %257.1
  lgl$-           %265.1 = Eq                 d     %265.0, 0L, elided   <lgl$->
  lgl$-           %265.2 = AsLogical                %265.1
  lgl$-           %265.3 = LAnd                     %249.2, %265.2
  lgl$-           %265.4 = %265.3
  goto BB102
BB266   <- [257]
  fs              %266.0 = FrameState         R     0x55d0000ad500+1090: [%249.2, %257.1], env=e151.0
  void                    Deopt              !v    %266.0, Typecheck@0x55cfff5a36c8[Type#66], %257.1   !
BB263   <- [261]
  val?-           %263.0 = CastType           d     dn %253.2   <env->
  val?+           %263.1 = Subassign2_1D      wed   true, %263.0, "isFirstArg", elided
  goto BB106
BB264   <- [261]
  void                    Nop                !     
  val?            %264.1 = %253.2
  dr              %264.2 = Typecheck@0x55cfff5a2e88[Type#1]
  goto BB133
BB133   <- [262, 264]
  val?^ | miss    %133.0 = Phi                      e262.1:BB262, %264.1:BB264
  val?^ | miss    %133.1 = %133.0
  dr              %133.2 = Phi                      %262.2:BB262, %264.2:BB264
  dr              %133.3 = %133.2
  fs              %133.4 = FrameState         R     0x55d0000ad500+1153: [], env=e151.0
  fs              %133.5 = FrameState         R     0x55d0000a7650+25: [true, true, %253.2], env=e253.1, next=%133.4
  void                    Deopt              !v    %133.5, %133.3, %133.1   !
BB267   <- [259]
  prom-           %267.0 = MkArg                    unboundValue, inFunction[0x55d000d779b0]_p31, e151.0
  val?            %267.1 = StaticCall         !v    grep[0x55d000cf70b0]("=", %267.0, missingArg, missingArg, missingArg, true) { 0 1 5n } e151.0   <int->
  lgl$#-          %267.2 = IsType                   %267.1 isA int-
  void                    Branch                   %267.2 -> BB269 (if true) | BB270 (if false)
BB268   <- [259]
  void                    Nop                !     
  val?^ | miss    %268.1 = %259.0
  dr              %268.2 = CallTarget@0x55cfff5a36c8[Call#30]
  goto BB107
BB107   <- [260, 268]
  val?^ | miss    %107.0 = Phi                      %260.1:BB260, %268.1:BB268
  val?^ | miss    %107.1 = %107.0
  dr              %107.2 = Phi                      %260.2:BB260, %268.2:BB268
  dr              %107.3 = %107.2
  fs              %107.4 = FrameState         R     0x55d0000ad500+1154: [], env=e151.0
  void                    Deopt              !v    %107.4, %107.3, %107.1   !
BB269   <- [267]
  int-            %269.0 = CastType           d     dn %267.1
  (int|real)$-    %269.1 = CallSafeBuiltin    wed   length(%269.0)    <int$->
  lgl$#-          %269.2 = IsType                   %269.1 isA int$-
  void                    Branch                   %269.2 -> BB271 (if true) | BB272 (if false)
BB270   <- [267]
  fs              %270.0 = FrameState         R     0x55d0000ad500+1268: [<blt length>, %267.1], env=e151.0
  void                    Deopt              !v    %270.0, Typecheck@0x55cfff5a36c8[Type#71], %267.1   !
BB271   <- [269]
  int$-           %271.0 = CastType           d     dn %269.1
  lgl$-           %271.1 = AsLogical                %271.0
  lgl$#-          %271.2 = Identical                %271.1, false
  void                    Branch                   %271.2 -> BB116 (if true) | BB113 (if false)
BB272   <- [269]
  void                    Nop                !     
  (int|real)$-    %272.1 = %269.1
  dr              %272.2 = Typecheck@0x55cfff5a36c8[Type#72]
  goto BB111
BB116   <- [271]
  lgl$#-          %116.0 = CheckTrueFalse     e     %271.1
  void                    Branch                   %116.0 -> BB131 (if true) | BB117 (if false)
BB113   <- [271]
  val?^ | miss    %113.0 = LdVar              eR    length, e151.0
  lgl$#-          %113.1 = Identical                <blt length>, %113.0   <@?>
  void                    Branch                   %113.1 -> BB115 (if true) | BB114 (if false)
BB111   <- [272, 274]
  val?^ | miss    %111.0 = Phi                      %272.1:BB272, %274.1:BB274
  val?^ | miss    %111.1 = %111.0
  dr              %111.2 = Phi                      %272.2:BB272, %274.2:BB274
  dr              %111.3 = %111.2
  fs              %111.4 = FrameState         R     0x55d0000ad500+1290: [%269.1], env=e151.0
  void                    Deopt              !v    %111.4, %111.3, %111.1   !
BB131   <- [116]
  (cls|spec|blt)  %131.0 = LdFun              !v    character, e151.0
  fs              %131.1 = FrameState         R     0x55d0000ad500+1905: [%131.0], env=e151.0
  void                    Deopt              !v    %131.1, DeadCall@0x55cfff5a36c8[Call#47], %131.0   !
BB117   <- [116]
  val?^ | miss    %117.0 = LdVar              eR    suppressWarnings, e151.0
  lgl$#-          %117.1 = Identical                %117.0, function(expr, classes="warning") <(rir::Dispa|...
  void                    Branch                   %117.1 -> BB273 (if true) | BB274 (if false)
BB115   <- [113]
  (cls|spec|blt)  %115.0 = LdFun              !v    grep, e151.0
  fs              %115.1 = FrameState         R     0x55d0000ad500+1368: [%271.1, <blt length>, %115.0], env=e151.0
  void                    Deopt              !v    %115.1, DeadCall@0x55cfff5a36c8[Call#36], %115.0   !
BB114   <- [113]
  (cls|spec|blt)  %114.0 = LdFun              !v    length, e151.0
  fs              %114.1 = FrameState         R     0x55d0000ad500+1331: [%271.1, %114.0], env=e151.0
  void                    Deopt              !v    %114.1, DeadCall@0x55cfff5a36c8[Call#31], %114.0   !
BB273   <- [117]
  prom-           %273.0 = MkArg                    unboundValue, inFunction[0x55d000d779b0]_p32, e151.0
  ct              %273.1 = PushContext        lCL   %273.0, suppressWarnings(strsplit(prefix, breakRE, per|..., function(expr, classes="warning") <(rir::Dispa|..., e151.0
  val?^           %273.2 = CastType                 up %273.0
  env             e273.3 = MkEnv              l     expr=%273.2, classes(miss)="warning", parent=R_BaseNamespace, context 1
  prom-           %273.4 = MkArg                    unboundValue, inFunction[0x55d000d779b0]_p53, e273.3
  cls             %273.5 = MkCls                    suppressWarnings@Prom(2)0, e273.3
  prom-           %273.6 = MkArg                    %273.5, inFunction[0x55d000d779b0]_p54 (!refl), e273.3
  dots-           %273.7 = DotsList           l     warning=%273.6
  val?            %273.8 = StaticCall         !v    withCallingHandlers[0x55d0011b75e0](%273.4, %273.7) { 0 1n } e273.3   <vec$->
  val?            %273.9 = PopContext         C     %273.8, %273.1   <vec$->
  lgl$#-          %273.10 = IsType                   %273.9 isA val+   <true>
  lgl$#-          %273.11 = IsType                   %273.9 isA val?-
  void                    Branch                   %273.10 -> BB275 (if true) | BB276 (if false)
BB274   <- [117]
  void                    Nop                !     
  val?^ | miss    %274.1 = %117.0
  dr              %274.2 = CallTarget@0x55cfff5a36c8[Call#40]
  goto BB111
BB275   <- [273]
  void                    Branch                   %273.11 -> BB277 (if true) | BB278 (if false)
BB276   <- [273]
  void                    Nop                !     
  lgl$#-          %276.1 = %273.10
  dr              %276.2 = DeadBranchReached@0x55cfff5a36c8[Test#14]
  goto BB118
BB277   <- [275]
  val?-           %277.0 = CastType           d     dn %273.9   <vec$->
  val?            %277.1 = Extract2_1D        wed   %277.0, 1L, elided   <str$->
  void                    StVar              lW    possible, %277.1, e151.0
  lgl$#-          %277.3 = IsType                   %277.1 isA val+   <true>
  val             %277.4 = ChkMissing         e     %277.1
  void                    Branch                   %277.3 -> BB279 (if true) | BB280 (if false)
BB278   <- [275]
  void                    Nop                !     
  val?            %278.1 = %273.9
  dr              %278.2 = Typecheck@0x55cfff5a36c8[Type#92]
  goto BB118
BB118   <- [276, 278]
  val?^ | miss    %118.0 = Phi                      %276.1:BB276, %278.1:BB278
  val?^ | miss    %118.1 = %118.0
  dr              %118.2 = Phi                      %276.2:BB276, %278.2:BB278
  dr              %118.3 = %118.2
  fs              %118.4 = FrameState         R     0x55d0000ad500+1497: [%273.9], env=e151.0
  void                    Deopt              !v    %118.4, %118.3, %118.1   !
BB279   <- [277]
  val?^ | miss    %279.0 = LdVar              eR    nzchar, e151.0
  lgl$#-          %279.1 = Identical                <blt nzchar>, %279.0   <true>
  void                    Branch                   %279.1 -> BB281 (if true) | BB282 (if false)
BB280   <- [277]
  void                    Nop                !     
  lgl$#-          %280.1 = %277.3
  dr              %280.2 = DeadBranchReached@0x55cfff5a36c8[Test#15]
  goto BB120
BB281   <- [279]
  val?            %281.0 = CallBuiltin        !v    nzchar(%277.1) e151.0   <lgl$->
  lgl$#-          %281.1 = IsType                   %281.0 isA lgl$-
  void                    Branch                   %281.1 -> BB283 (if true) | BB284 (if false)
BB282   <- [279]
  void                    Nop                !     
  lgl$#-          %282.1 = %279.1
  dr              %282.2 = DeadBranchReached@0x55cfff5a36c8[Test#16]
  goto BB120
BB120   <- [280, 282]
  val?^ | miss    %120.0 = Phi                      %280.1:BB280, %282.1:BB282
  val?^ | miss    %120.1 = %120.0
  dr              %120.2 = Phi                      %280.2:BB280, %282.2:BB282
  dr              %120.3 = %120.2
  fs              %120.4 = FrameState         R     0x55d0000ad500+1555: [], env=e151.0
  void                    Deopt              !v    %120.4, %120.3, %120.1   !
BB283   <- [281]
  lgl$-           %283.0 = CastType           d     dn %281.0
  lgl$#-          %283.1 = IsType                   %277.1 isA val?-
  void                    Branch                   %283.1 -> BB285 (if true) | BB286 (if false)
BB284   <- [281]
  void                    Nop                !     
  val?            %284.1 = %281.0
  dr              %284.2 = Typecheck@0x55cfff5a36c8[Type#99]
  goto BB122
BB285   <- [283]
  val?-           %285.0 = CastType           d     dn %277.1   <str$->
  val?            %285.1 = Extract1_1D        wed   %285.0, %283.0, elided   <str$->
  void                    StVar              lW    possible, %285.1, e151.0
  lgl$#-          %285.3 = IsType                   %285.1 isA val?-
  val?^ | miss    %285.4 = LdVar              eR    length, e151.0
  lgl$#-          %285.5 = Identical                <blt length>, %285.4   <true>
  void                    Branch                   %285.5 -> BB287 (if true) | BB288 (if false)
BB286   <- [283]
  void                    Nop                !     
  val?            %286.1 = %277.1
  dr              %286.2 = Typecheck@0x55cfff5a36c8[Type#93]
  goto BB122
BB122   <- [284, 286]
  val?^ | miss    %122.0 = Phi                      %284.1:BB284, %286.1:BB286
  val?^ | miss    %122.1 = %122.0
  dr              %122.2 = Phi                      %284.2:BB284, %286.2:BB286
  dr              %122.3 = %122.2
  fs              %122.4 = FrameState         R     0x55d0000ad500+1691: [%277.1, %281.0], env=e151.0
  void                    Deopt              !v    %122.4, %122.3, %122.1   !
BB287   <- [285]
  val             %287.0 = ChkMissing         e     %285.1
  void                    Branch                   %285.3 -> BB289 (if true) | BB290 (if false)
BB288   <- [285]
  void                    Nop                !     
  lgl$#-          %288.1 = %285.5
  dr              %288.2 = DeadBranchReached@0x55cfff5a36c8[Test#17]
  goto BB124
BB289   <- [287]
  val?-           %289.0 = CastType           d     dn %285.1   <str$->
  (int|real)$-    %289.1 = CallSafeBuiltin    vwed  length(%289.0)    <int$->
  lgl$#-          %289.2 = IsType                   %289.1 isA int$-
  void                    Branch                   %289.2 -> BB291 (if true) | BB292 (if false)
BB290   <- [287]
  void                    Nop                !     
  val?            %290.1 = %285.1
  dr              %290.2 = Typecheck@0x55cfff5a36c8[Type#100]
  goto BB124
BB124   <- [288, 290]
  val?^ | miss    %124.0 = Phi                      %288.1:BB288, %290.1:BB290
  val?^ | miss    %124.1 = %124.0
  dr              %124.2 = Phi                      %288.2:BB288, %290.2:BB290
  dr              %124.3 = %124.2
  fs              %124.4 = FrameState         R     0x55d0000ad500+1712: [], env=e151.0
  void                    Deopt              !v    %124.4, %124.3, %124.1   !
BB291   <- [289]
  int$-           %291.0 = CastType           d     dn %289.1
  lgl$#-          %291.1 = CheckTrueFalse     e     %291.0
  void                    Branch                   %291.1 -> BB129 (if true) | BB128 (if false)
BB292   <- [289]
  void                    Nop                !     
  (int|real)$-    %292.1 = %289.1
  dr              %292.2 = Typecheck@0x55cfff5a36c8[Type#103]
  goto BB126
BB129   <- [291]
  val?^ | miss    %129.0 = LdVar              eR    tail.default, e151.0
  lgl$#-          %129.1 = Identical                %129.0, function(x, n=6L, keepnums=FALSE, addrownums, |...
  void                    Branch                   %129.1 -> BB293 (if true) | BB294 (if false)
BB128   <- [291]
  (cls|spec|blt)  %128.0 = LdFun              !v    character, e151.0
  fs              %128.1 = FrameState         R     0x55d0000ad500+1819: [%128.0], env=e151.0
  void                    Deopt              !v    %128.1, DeadCall@0x55cfff5a36c8[Call#45], %128.0   !
BB126   <- [292, 294]
  val?^ | miss    %126.0 = Phi                      %292.1:BB292, %294.1:BB294
  val?^ | miss    %126.1 = %126.0
  dr              %126.2 = Phi                      %292.2:BB292, %294.2:BB294
  dr              %126.3 = %126.2
  fs              %126.4 = FrameState         R     0x55d0000ad500+1803: [%289.1], env=e151.0
  void                    Deopt              !v    %126.4, %126.3, %126.1   !
BB293   <- [129]
  prom-           %293.0 = MkArg                    unboundValue, inFunction[0x55d000d779b0]_p35 (!refl), e151.0
  val?            %293.1 = StaticCall         !     tail.default[0x55d001133c90](%293.0, 1) { 0 1 } e151.0   <str$->
  val?            %293.2 = %293.1
  goto BB130
BB294   <- [129]
  void                    Nop                !     
  val?^ | miss    %294.1 = %129.0
  dr              %294.2 = CallTarget@0x55cfff5a36c8[Call#46]
  goto BB126
Prom 0:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     c, <0x55cffe0e5940>, e0.0
  val?            %0.2  = Call               !     %0.1("(", ")") e0.0   <str->
  void                    Return             l     %0.2
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  cls             %0.1  = MkCls                    inFunction@Prom(1)0, e0.0
  void                    Return             l     %0.1
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    parens, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 3:
BB0
  env             e0.0  = LdFunctionEnv            
  cls             %0.1  = MkCls                    inFunction@Prom(3)0, e0.0
  void                    Return             l     %0.1
Prom 4:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     c, <0x55cffe0e5940>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, inFunction[0x55d000d779b0]_p5, e0.0
  prom-           %0.3  = MkArg                    unboundValue, inFunction[0x55d000d779b0]_p6, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <int->
  void                    Return             l     %0.4
Prom 5:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    parens, e0.0
  val?            %0.2  = Force<value>       !v    %0.1, e0.0   <vec+>
  val?            %0.3  = Extract2_1D        !v    %0.2, "(", e0.0   <int->
  void                    Visible            v     
  void                    Return             l     %0.3
Prom 6:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    parens, e0.0
  val?            %0.2  = Force<value>       !v    %0.1, e0.0   <vec+>
  val?            %0.3  = Extract2_1D        !v    %0.2, ")", e0.0   <int->
  void                    Visible            v     
  void                    Return             l     %0.3
Prom 7:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     rep.int, <0x55d0000e5bb0>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, inFunction[0x55d000d779b0]_p8, e0.0
  prom-           %0.3  = MkArg                    unboundValue, inFunction[0x55d000d779b0]_p10, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <real->
  void                    Return             l     %0.4
Prom 8:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     c, <0x55cffe0e5940>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, inFunction[0x55d000d779b0]_p9, 
  val?            %0.3  = Call               !     %0.1(1, %0.2) e0.0   <real->
  void                    Return             l     %0.3
Prom 9:
BB0
  void                    Visible            v     
  void                    Return             l     -1
Prom 10:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     lengths, <0x55cfff176fc0>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, inFunction[0x55d000d779b0]_p11, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <int+>
  void                    Return             l     %0.3
Prom 11:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    parens, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 12:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    temp, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <vec>
  void                    Return             l     %0.3
Prom 13:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    temp, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 14:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     order, e0.0
  prom-           %0.2  = MkArg                    unboundValue, inFunction[0x55d000d779b0]_p15, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 15:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     $, e0.0
  prom-           %0.2  = MkArg                    unboundValue, inFunction[0x55d000d779b0]_p16, e0.0
  prom-           %0.3  = MkArg                    unboundValue, inFunction[0x55d000d779b0]_p17, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <val?_>
  val?            %0.5  = Minus              !     %0.4, e0.0
  void                    Return             l     %0.5
Prom 16:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    temp, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 17:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    i, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 18:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !v    cumsum, <0x55cffe0f22e0>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, inFunction[0x55d000d779b0]_p19, e0.0
  val?            %0.3  = Call               !v    %0.1(%0.2) e0.0   <real$->
  void                    Visible            v     
  val?            %0.5  = Gt                 !     %0.3, 0, e0.0   <lgl$->
  void                    Return             l     %0.5
Prom 19:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     $, <0x55cffe0e4c10>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, inFunction[0x55d000d779b0]_p20, e0.0
  prom-           %0.3  = MkArg                    unboundValue, inFunction[0x55d000d779b0]_p21, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <real$->
  void                    Return             l     %0.4
Prom 20:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    temp, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <vec>
  void                    Return             l     %0.3
Prom 21:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    c, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 22:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    temp, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <vec>
  void                    Return             l     %0.3
Prom 23:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    i, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 24:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    line, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 25:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    index, e0.0
  val?            %0.2  = Force<value>       !v    %0.1, e0.0   <int$->
  void                    Visible            v     
  val?            %0.4  = Sub                !     %0.2, 1L, e0.0   <int$->
  void                    Return             l     %0.4
Prom 26:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    line, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 27:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    index, e0.0
  val?            %0.2  = Force<value>       !v    %0.1, e0.0   <int$->
  void                    Visible            v     
  val?            %0.4  = Add                !     %0.2, 1L, e0.0   <int$->
  void                    Return             l     %0.4
Prom 28:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    cursor, e0.0
  val?            %0.2  = Force<wrapped>     !v    %0.1, e0.0   <int$->
  void                    Visible            v     
  val?            %0.4  = Add                !     %0.2, 1L, e0.0   <int$->
  void                    Return             l     %0.4
Prom 29:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    suffix, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 30:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    suffix, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 31:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    suffix, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 32:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     strsplit, <0x55cffe42f588>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, inFunction[0x55d000d779b0]_p33, e0.0
  prom-           %0.3  = MkArg                    unboundValue, inFunction[0x55d000d779b0]_p34, e0.0
  val?            %0.4  = NamedCall          !     %0.1(%0.2, %0.3, perl=true) e0.0   <vec$->
  void                    Return             l     %0.4
Prom 33:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    prefix, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 34:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    breakRE, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 35:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    possible, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 38:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    FUN, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <cls->
  void                    Return             l     %0.3
Prom 39:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    X, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <(str|vec)+>
  void                    Return             l     %0.3
Prom 40:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    FUN, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls->
  void                    Return             l     %0.3
Prom 41:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    simplify, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <lgl$->
  void                    Return             l     %0.3
Prom 43:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    answer, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 44:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    simplify, e0.0
  val?            %0.2  = Force              !v    %0.1, e0.0   <val?_>
  val?            %0.3  = Eq                 !v    %0.2, "array", e0.0   <val?_>
  void                    Visible            v     
  void                    Return             l     %0.3
Prom 45:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    FUN, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <(cls|blt)->
  void                    Return             l     %0.3
Prom 46:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    X, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <val?>
  void                    Return             l     %0.3
Prom 47:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    X, e0.0
  val?            %0.2  = Force<wrapped>     !v    %0.1, e0.0   <val?>
  lgl$#-          %0.3  = IsType                   %0.2 isA val+
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    i, e0.0
  val?            %2.1  = Force<value>       !v    %2.0, e0.0   <int$->
  val?            %2.2  = %2.1
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, inFunction[0x55d000d779b0]_p48, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.2:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract2_1D        !v    %0.2, %3.1, e0.0   <val?>
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 48:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    i, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <int$->
  void                    Return             l     %0.3
Prom 53:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    expr, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <vec$->
  void                    Return             l     %0.3
Prom 54:
BB0
  env             e0.0  = LdFunctionEnv            
  cls             %0.1  = MkCls                    suppressWarnings@Prom(2)0, e0.0
  void                    Return             l     %0.1

│ inFunction[0x55d000d779b0]                                                   │
└──────────────────────────────────────────────────────────────────────────────┘
