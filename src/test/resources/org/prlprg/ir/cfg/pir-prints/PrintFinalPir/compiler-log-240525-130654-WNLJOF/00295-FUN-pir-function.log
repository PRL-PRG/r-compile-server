
┌──────────────────────────────────────────────────────────────────────────────┐
│ FUN[0x55fa0ddf1d40]                                                          │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch                                      │
│ Properties:                                                                  │
├────── Final PIR Version
FUN[0x55fa0ddf1d40]
BB0
  val?^           %0.0  = LdArg                    0
  val?^ | miss    %0.1  = LdVar              eR    lapply, <env 0x55fa0e0f6d90>
  lgl$#-          %0.2  = Identical                %0.1, function(X, FUN, ...) <(rir::DispatchTable*)0x|...
  void                    Branch                   %0.2 -> BB19 (if true) | BB20 (if false)
BB19   <- [0]
  env             e19.0 = MkEnv              l     type=%0.0, parent=<env 0x55fa0e0f6d90>, context 1
  prom-           %19.1 = MkArg                    unboundValue, FUN[0x55fa0ddf1d40]_p0, e19.0
  cls             %19.2 = MkCls                    FUN@Prom(1)0, e19.0
  prom-           %19.3 = MkArg                    %19.2, FUN[0x55fa0ddf1d40]_p1 (!refl), e19.0
  ct              %19.4 = PushContext        lCL   %19.1, %19.3, lapply(type, function(<lst sym=R_MissingArg>, |..., function(X, FUN, ...) <(rir::DispatchTable*)0x|..., e19.0
  cls~            %19.5 = CastType                 up %19.3
  val?^           %19.6 = CastType                 up %19.1
  env             e19.7 = MkEnv              l     X=%19.6, FUN=%19.5, ...(miss)=missingArg, parent=R_BaseNamespace, context 1
  prom-           %19.8 = MkArg                    unboundValue, FUN[0x55fa0ddf1d40]_p2 (!refl), e19.7
  val?            %19.9 = StaticCall         !v    match.fun[0x55fa0de904e0](%19.8) e19.7   <(cls|blt)->
  void                    StVar              lW    FUN, %19.9, e19.7
  val?^ | miss    %19.11 = LdVar              eR    is.vector, e19.7
  lgl$#-          %19.12 = Identical                %19.11, function(x, mode="any") <(rir::DispatchTable*)|...
  void                    Branch                   %19.12 -> BB21 (if true) | BB22 (if false)
BB20   <- [0]
  env             e20.0 = (MkEnv)            l     type=%0.0, parent=<env 0x55fa0e0f6d90>, context 1
  fs              %20.1 = FrameState         R     0x55fa0da80380+0: [], env=e20.0
  void                    Deopt              !v    %20.1, CallTarget@0x55fa0e4cfab8[Call#0], %0.1
BB21   <- [19]
  val?^ | miss    %21.0 = LdVar              eR    X, e19.7
  val?            %21.1 = Force!<lazy>       !v    %21.0, e19.7   <(str|vec)>
  lgl$#-          %21.2 = CallSafeBuiltin    wed   is.vector(%21.1, "any")    <lgl$->
  lgl$#-          %21.3 = Not                d     %21.2, elided
  void                    Branch                   %21.2 -> BB17 (if true) | BB7 (if false)
BB22   <- [19]
  fs              %22.0 = FrameState         R     0x55fa0da80380+37: [], env=e19.0
  fs              %22.1 = FrameState         R     0x55fa0b7b1c40+46: [], env=e19.7, next=%22.0
  void                    Deopt              !v    %22.1, CallTarget@0x55fa0cc2ca20[Call#1], %19.11   !
BB17   <- [21]
  val?^ | miss    %17.0 = LdVar              eR    is.object, e19.7
  lgl$#-          %17.1 = Identical                <blt is.object>, %17.0   <true>
  void                    Branch                   %17.1 -> BB23 (if true) | BB24 (if false)
BB7   <- [21]
  void                    Nop                !     
  lgl$#-          %7.1  = %21.3
  goto BB8
BB23   <- [17]
  val?^ | miss    %23.0 = LdVar              eR    X, e19.7
  val?            %23.1 = Force!<wrapped>    !v    %23.0, e19.7   <(str|vec)->
  lgl$#-          %23.2 = CallSafeBuiltin    wed   is.object(%23.1)    <lgl$->
  lgl$-           %23.3 = LOr                      %21.3, %23.2
  lgl$-           %23.4 = %23.3
  goto BB8
BB24   <- [17]
  fs              %24.0 = FrameState         R     0x55fa0da80380+37: [], env=e19.0
  fs              %24.1 = FrameState         R     0x55fa0b7b1c40+78: [], env=e19.7, next=%24.0
  prom-           %24.2 = MkArg                    %21.1, FUN[0x55fa0ddf1d40]_p4 (!refl), e19.7
  val?~           %24.3 = CastType                 up %24.2
  env             e24.4 = (MkEnv)            l     mode(miss)="any", x=%24.3, parent=R_BaseNamespace, context 0
  fs              %24.5 = FrameState         R     0x55fa0cc3d9f0+41: [%21.2], env=e24.4, next=%24.1
  void                    Deopt              !v    %24.5, DeadBranchReached@0x55fa0cc2ca20[Test#0], %17.1   !
BB8   <- [7, 23]
  lgl$-           %8.0  = Phi                      %23.4:BB23, %7.1:BB7
  lgl$-           %8.1  = %8.0
  lgl$#-          %8.2  = CheckTrueFalse     e     %8.1
  void                    Branch                   %8.2 -> BB16 (if true) | BB11 (if false)
BB16   <- [8]
  val?^ | miss    %16.0 = LdVar              eR    as.list, e19.7
  lgl$#-          %16.1 = Identical                %16.0, function(x, ...) <(rir::DispatchTable*)0x55fa0|...
  void                    Branch                   %16.1 -> BB25 (if true) | BB26 (if false)
BB11   <- [8]
  void                    Nop                !     
  goto BB12
BB25   <- [16]
  val?^ | miss    %25.0 = LdVar              eR    X, e19.7
  val?            %25.1 = Force!<wrapped>    !v    %25.0, e19.7   <vec>
  val?            %25.2 = StaticCall         !v    as.list[0x55fa0cf017a0](%25.1) { 0 } e19.7   <vec>
  void                    StVar              lW    X, %25.2, e19.7
  goto BB12
BB26   <- [16]
  fs              %26.0 = FrameState         R     0x55fa0da80380+37: [], env=e19.0
  fs              %26.1 = FrameState         R     0x55fa0b7b1c40+189: [%8.1], env=e19.7, next=%26.0
  void                    Deopt              !v    %26.1, CallTarget@0x55fa0cc2ca20[Call#3], %16.0   !
BB12   <- [11, 25]
  val?^ | miss    %12.0 = LdVar              eR    X, e19.7
  val?            %12.1 = Force!<wrapped>    !v    %12.0, e19.7   <(str|vec)>
  (nil|str)-      %12.2 = Names                    %12.1
  int$-           %12.3 = Length                   %12.1
  vec-            %12.4 = CallSafeBuiltin    wed   vector("list", %12.3) 
  val+            %12.5 = SetNames           e     %12.4, %12.2
  int$#-          %12.6 = 0L
  val+            %12.7 = %12.5
  goto BB13
BB13   <- [12, 14]
  int$-           %13.0 = Phi                      %12.6:BB12, %14.7:BB14
  int$-           %13.1 = %13.0
  val?            %13.2 = Phi                      %12.7:BB12, %14.8:BB14
  val?            %13.3 = %13.2
  int$-           %13.4 = Inc                      %13.1
  lgl$-           %13.5 = Lt                 d     %12.3, %13.4, elided
  lgl$#-          %13.6 = Identical                %13.5, true
  void                    Branch                   %13.6 -> BB15 (if true) | BB14 (if false)
BB15   <- [13]
  void                    Visible            v     
  val?            %15.1 = PopContext         C     %13.3, %19.4   <vec->
  void                    Return             l     %15.1
BB14   <- [13]
  void                    StVar              lW    i, %13.4, e19.7
  (cls|spec|blt)  %14.1 = LdFun              !v    FUN, e19.7
  prom-           %14.2 = MkArg                    unboundValue, FUN[0x55fa0ddf1d40]_p5, e19.7
  (miss|dots)     %14.3 = LdDots             R     , e19.7
  *dots-          %14.4 = ExpandDots               %14.3
  val?            %14.5 = NamedCall          !v    %14.1(%14.2, .xpandDotsTrigger=%14.4) e19.7   <val?>
  val?            %14.6 = SetVecElt          e     %14.5, %13.3, %13.4
  int$-           %14.7 = %13.4
  val?            %14.8 = %14.6
  goto BB13
Prom 0:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    type, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <vec>
  void                    Return             l     %0.3
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  cls             %0.1  = MkCls                    FUN@Prom(1)0, e0.0
  void                    Return             l     %0.1
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    FUN, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <(cls|blt)->
  void                    Return             l     %0.3
Prom 4:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    X, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <(str|vec)>
  void                    Return             l     %0.3
Prom 5:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    X, e0.0
  val?            %0.2  = Force<wrapped>     !v    %0.1, e0.0   <(str|vec)>
  lgl$#-          %0.3  = IsType                   %0.2 isA val+
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    i, e0.0
  val?            %2.1  = Force<value>       !v    %2.0, e0.0   <int$->
  val?            %2.2  = %2.1
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, FUN[0x55fa0ddf1d40]_p6, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.2:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract2_1D        !v    %0.2, %3.1, e0.0   <val?>
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 6:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    i, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <int$->
  void                    Return             l     %0.3

│ FUN[0x55fa0ddf1d40]                                                          │
└──────────────────────────────────────────────────────────────────────────────┘
