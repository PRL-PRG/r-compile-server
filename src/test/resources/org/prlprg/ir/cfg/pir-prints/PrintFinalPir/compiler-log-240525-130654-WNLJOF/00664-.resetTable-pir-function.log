
┌──────────────────────────────────────────────────────────────────────────────┐
│ .resetTable[0x55fa0ccefb00]                                                  │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;NonRefl0,NonRefl1,NonRefl2,!Obj0,!Obj1,!Obj2,SimpleInt1│
│ Properties:                                                                  │
├────── Final PIR Version
.resetTable[0x55fa0ccefb00]
BB0
  val?^           %0.0  = LdArg                    2
  val?^           %0.1  = LdArg                    1
  val?^           %0.2  = LdArg                    0
  val?^ | miss    %0.3  = LdVar              eR    .allowPrimitiveMethods, <env 0x55fa0b35b378>
  lgl$#-          %0.4  = Identical                %0.3, function(onOff) <(rir::DispatchTable*)0x55fa0e|...
  void                    Branch                   %0.4 -> BB84 (if true) | BB85 (if false)
BB84   <- [0]
  env             e84.0 = MkEnv              l     table=%0.2, n=%0.1, signames=%0.0, parent=<env 0x55fa0b35b378>, context 1
  ct              %84.1 = PushContext        lCL   false, .allowPrimitiveMethods(FALSE), function(onOff) <(rir::DispatchTable*)0x55fa0e|..., e84.0
  val?^ | miss    %84.2 = LdVar              eR    .Call, <env 0x55fa0b35b378>
  lgl$#-          %84.3 = Identical                <blt .Call>, %84.2   <true>
  void                    Branch                   %84.3 -> BB86 (if true) | BB87 (if false)
BB85   <- [0]
  env             e85.0 = (MkEnv)            l     table=%0.2, n=%0.1, signames=%0.0, parent=<env 0x55fa0b35b378>, context 1
  fs              %85.1 = FrameState         R     0x55fa0e749810+0: [], env=e85.0
  void                    Deopt              !v    %85.1, CallTarget@0x55fa0cee07b0[Call#0], %0.3
BB86   <- [84]
  val?^ | miss    %86.0 = LdVar              eR    C_R_M_setPrimitiveMethods, <env 0x55fa0b35b378>
  env             e86.1 = MkEnv              l     onOff=false, code="CLEAR", parent=<env 0x55fa0b35b378>, context 1
  val?            %86.2 = Force!<value>      !v    %86.0, e86.1   <vec>
  val?^ | miss    %86.3 = LdVar              eR    code, e86.1
  val?            %86.4 = Force!<value>      !v    %86.3, e86.1   <str$->
  val?            %86.5 = CallBuiltin        !v    .Call(%86.2, "", nil, %86.4, nil, nil) e86.1   <lgl$->
  lgl$#-          %86.6 = IsType                   %86.5 isA lgl$-
  void                    Branch                   %86.6 -> BB88 (if true) | BB89 (if false)
BB87   <- [84]
  fs              %87.0 = FrameState         R     0x55fa0e749810+32: [], env=e84.0
  env             e87.1 = (MkEnv)            l     onOff=false, parent=<env 0x55fa0b35b378>, context 1
  fs              %87.2 = FrameState         R     0x55fa0b8ac370+15: [false], env=e87.1, next=%87.0
  void                    Deopt              !v    %87.2, DeadBranchReached@0x55fa0f39ccb8[Test#0], %84.3   !
BB88   <- [86]
  lgl$-           %88.0 = CastType           d     dn %86.5
  val?            %88.1 = PopContext         C     %88.0, %84.1   <lgl$->
  lgl$#-          %88.2 = IsType                   %88.1 isA lgl$-
  void                    Branch                   %88.2 -> BB90 (if true) | BB91 (if false)
BB89   <- [86]
  fs              %89.0 = FrameState         R     0x55fa0e749810+32: [], env=e84.0
  fs              %89.1 = FrameState         R     0x55fa0b8ac370+200: [%86.5], env=e86.1, next=%89.0
  void                    Deopt              !v    %89.1, Typecheck@0x55fa0f39ccb8[Type#5], %86.5   !
BB90   <- [88]
  lgl$-           %90.0 = CastType           d     dn %88.1
  void                    StVar              lW    primMethods, %90.0, e84.0
  (cls|spec|blt)  %90.2 = LdFun              !v    on.exit, <0x55fa0ad53270>, e84.0
  prom-           %90.3 = MkArg                    unboundValue, .resetTable[0x55fa0ccefb00]_p0, e84.0
  val?            %90.4 = Call               !v    %90.2(%90.3) e84.0
  (cls|spec|blt)  %90.5 = LdFun              !v    rep, <0x55fa0ad689b0>, e84.0
  prom-           %90.6 = MkArg                    unboundValue, .resetTable[0x55fa0ccefb00]_p2, e84.0
  val?            %90.7 = Call               !v    %90.5("ANY", %90.6) e84.0   <str->
  void                    StVar              lW    anyLabel, %90.7, e84.0
  (cls|spec|blt)  %90.9 = LdFun              !v    rep, <0x55fa0ad689b0>, e84.0
  prom-           %90.10 = MkArg                    unboundValue, .resetTable[0x55fa0ccefb00]_p3, e84.0
  val?            %90.11 = Call               !v    %90.9("methods", %90.10) e84.0   <str->
  void                    StVar              lW    anyPkg, %90.11, e84.0
  val?^ | miss    %90.13 = LdVar              eR    n, e84.0
  val?            %90.14 = Force!<wrapped>    !v    %90.13, e84.0   <int$->
  lgl$#-          %90.15 = IsType                   %90.14 isA int$-
  void                    Branch                   %90.15 -> BB92 (if true) | BB93 (if false)
BB91   <- [88]
  fs              %91.0 = FrameState         R     0x55fa0e749810+32: [%88.1], env=e84.0
  void                    Deopt              !v    %91.0, Typecheck@0x55fa0cee07b0[Type#0], %88.1   !
BB92   <- [90]
  int$-           %92.0 = CastType           d     dn %90.14
  int-            %92.1 = Colon              d     1L, %92.0, elided   <int->
  void                    StVar              lW    seqN, %92.1, e84.0
  val?^ | miss    %92.3 = LdVar              eR    names, e84.0
  lgl$#-          %92.4 = Identical                <blt names>, %92.3   <true>
  void                    Branch                   %92.4 -> BB94 (if true) | BB95 (if false)
BB93   <- [90]
  fs              %93.0 = FrameState         R     0x55fa0e749810+196: [1L, %90.14], env=e84.0
  void                    Deopt              !v    %93.0, Typecheck@0x55fa0cee07b0[Type#7], %90.14   !
BB94   <- [92]
  val?^ | miss    %94.0 = LdVar              eR    table, e84.0
  val?            %94.1 = Force!<lazy>       !v    %94.0, e84.0   <env->
  lgl$#-          %94.2 = IsType                   %94.1 isA val?-
  void                    Branch                   %94.2 -> BB96 (if true) | BB97 (if false)
BB95   <- [92]
  fs              %95.0 = FrameState         R     0x55fa0e749810+216: [], env=e84.0
  void                    Deopt              !v    %95.0, DeadBranchReached@0x55fa0cee07b0[Test#0], %92.4   !
BB96   <- [94]
  val?-           %96.0 = CastType           d     dn %94.1   <env->
  val+            %96.1 = CallSafeBuiltin    wed   names(%96.0)    <str->
  int$-           %96.2 = Length                   %96.1
  void                    StVar              lW    labels, %96.1, e84.0
  int$-           %96.4 = Inc                      0L
  lgl$-           %96.5 = Lt                 d     %96.2, %96.4, elided   <false>
  lgl$#-          %96.6 = Identical                %96.5, true
  void                    Branch                   %96.6 -> BB99 (if true) | BB98 (if false)
BB97   <- [94]
  fs              %97.0 = FrameState         R     0x55fa0e749810+285: [<blt names>, %94.1], env=e84.0
  void                    Deopt              !v    %97.0, Typecheck@0x55fa0cee07b0[Type#10], %94.1   !
BB99   <- [96]
  fs              %99.0 = FrameState         R     0x55fa0e749810+321: [], env=e84.0
  void                    Deopt              !v    %99.0, DeadBranchReached@0x55fa0cee07b0[Test#1], %96.6   !
BB98   <- [96]
  val?            %98.0 = Extract2_1D        wed   %96.1, %96.4, elided
  void                    StVar              lW    what, %98.0, e84.0
  val?^ | miss    %98.2 = LdVar              eR    get, e84.0
  lgl$#-          %98.3 = Identical                %98.2, function(x, pos=-(1L), envir=as.environment(po|...
  void                    Branch                   %98.3 -> BB100 (if true) | BB101 (if false)
BB100   <- [98]
  prom-           %100.0 = MkArg                    unboundValue, .resetTable[0x55fa0ccefb00]_p4 (!refl), e84.0
  prom-           %100.1 = MkArg                    unboundValue, .resetTable[0x55fa0ccefb00]_p5, e84.0
  val?            %100.2 = StaticCall         !v    get[0x55fa0cb33380](%100.0, missingArg, %100.1) { 0 2n } e84.0   <cls>
  void                    StVar              lW    method, %100.2, e84.0
  val?^ | miss    %100.4 = LdVar              eR    is.primitive, e84.0
  lgl$#-          %100.5 = Identical                %100.4, function(x) <(rir::DispatchTable*)0x55fa0b6938|...
  void                    Branch                   %100.5 -> BB102 (if true) | BB103 (if false)
BB101   <- [98]
  fs              %101.0 = FrameState         R     0x55fa0e749810+375: [%96.1, %96.2, %96.4], env=e84.0
  void                    Deopt              !v    %101.0, CallTarget@0x55fa0cee07b0[Call#6], %98.2   !
BB102   <- [100]
  val             %102.0 = ChkMissing         e     %100.2
  str$-           %102.1 = CallSafeBuiltin    wed   typeof(%100.2)    <str$->
  int$-           %102.2 = Length                   %102.1
  lgl$-           %102.3 = Eq                 d     %102.2, 1L, elided   <true>
  lgl$#-          %102.4 = Identical                %102.3, true
  void                    Branch                   %102.4 -> BB104 (if true) | BB105 (if false)
BB103   <- [100]
  fs              %103.0 = FrameState         R     0x55fa0e749810+434: [%96.1, %96.2, %96.4], env=e84.0
  void                    Deopt              !v    %103.0, CallTarget@0x55fa0cee07b0[Call#7], %100.4   !
BB104   <- [102]
  lgl$-           %104.0 = CallSafeBuiltin    wed   is.na(%102.1) 
  lgl$#-          %104.1 = CheckTrueFalse     e     %104.0   <false>
  void                    Branch                   %104.1 -> BB107 (if true) | BB106 (if false)
BB105   <- [102]
  prom-           %105.0 = MkArg                    %100.2, .resetTable[0x55fa0ccefb00]_p6 (!refl), e84.0
  val?~           %105.1 = CastType                 up %105.0
  env             e105.2 = (MkEnv)            l     x=%105.1, parent=R_BaseNamespace, context 0
  env             e105.3 = MaterializeEnv           , e105.2   <@?>
  prom-           %105.4 = MkArg                    %100.2, .resetTable[0x55fa0ccefb00]_p57 (!refl), e105.3
  val?~           %105.5 = CastType                 up %105.4
  fs              %105.6 = FrameState         R     0x55fa0e749810+466: [%96.1, %96.2, %96.4], env=e84.0
  fs              %105.7 = FrameState         R     0x55fa0e0e18e0+32: [], env=e105.3, next=%105.6
  env             e105.8 = (MkEnv)            l     x=%105.5, parent=R_BaseNamespace, context -1
  fs              %105.9 = FrameState         R     0x55fa0cca7680+27: [%102.1], env=e105.8, next=%105.7
  void                    Deopt              !v    %105.9, DeadBranchReached@0x55fa0f4f10b8[Test#1], %102.4   !
BB107   <- [104]
  void                    Nop                !     
  lgl$#-          %107.1 = %104.1
  dr              %107.2 = DeadBranchReached@0x55fa0f4f10b8[Test#7]
  goto BB23
BB106   <- [104]
  lgl$-           %106.0 = Eq                 d     %102.1, special, elided
  lgl$#-          %106.1 = CheckTrueFalse     e     %106.0
  void                    Branch                   %106.1 -> BB82 (if true) | BB25 (if false)
BB23   <- [107, 111]
  val?^ | miss    %23.0 = Phi                      %107.1:BB107, %111.1:BB111
  val?^ | miss    %23.1 = %23.0
  dr              %23.2 = Phi                      %107.2:BB107, %111.2:BB111
  dr              %23.3 = %23.2
  prom-           %23.4 = MkArg                    %100.2, .resetTable[0x55fa0ccefb00]_p6 (!refl), e84.0
  val?~           %23.5 = CastType                 up %23.4
  fs              %23.6 = FrameState         R     0x55fa0e749810+466: [%96.1, %96.2, %96.4], env=e84.0
  env             e23.7 = (MkEnv)            l     x=%23.5, parent=R_BaseNamespace, context 0
  fs              %23.8 = FrameState         R     0x55fa0e0e18e0+240: [%102.1, %104.0], env=e23.7, next=%23.6
  void                    Deopt              !v    %23.8, %23.3, %23.1   !
BB82   <- [106]
  void                    Nop                !     
  goto BB81
BB25   <- [106]
  lgl$-           %25.0 = Eq                 d     %102.1, builtin, elided
  lgl$#-          %25.1 = CheckTrueFalse     e     %25.0
  void                    Branch                   %25.1 -> BB80 (if true) | BB26 (if false)
BB81   <- [82, 80]
  void                    Nop                !     
  lgl$#-          %81.1 = true
  goto BB27
BB80   <- [25]
  void                    Nop                !     
  goto BB81
BB26   <- [25]
  void                    Nop                !     
  lgl$#-          %26.1 = false
  goto BB27
BB27   <- [26, 81]
  lgl$#-          %27.0 = Phi                      %26.1:BB26, %81.1:BB81
  lgl$#-          %27.1 = %27.0
  void                    Branch                   %27.1 -> BB79 (if true) | BB28 (if false)
BB79   <- [27]
  val?^ | miss    %79.0 = LdVar              eR    anyLabel, e84.0
  val?            %79.1 = Force!             !v    %79.0, e84.0   <val?_>
  void                    StVar              lW    newSig, %79.1, e84.0
  goto BB33
BB28   <- [27]
  val?^ | miss    %28.0 = LdVar              eR    is, e84.0
  lgl$#-          %28.1 = Identical                %28.0, function(object, class2) <(rir::DispatchTable*|...
  void                    Branch                   %28.1 -> BB110 (if true) | BB111 (if false)
BB33   <- [79, 32]
  val?^ | miss    %33.0 = LdVar              eR    is, e84.0
  lgl$#-          %33.1 = Identical                %33.0, function(object, class2) <(rir::DispatchTable*|...
  void                    Branch                   %33.1 -> BB108 (if true) | BB109 (if false)
BB110   <- [28]
  prom-           %110.0 = MkArg                    unboundValue, .resetTable[0x55fa0ccefb00]_p7 (!refl), e84.0
  val?            %110.1 = Call               !v    function(object, class2) <(rir::DispatchTable*|...(%110.0, "MethodDefinition") e84.0   <lgl$->
  lgl$#-          %110.2 = IsType                   %110.1 isA lgl$-
  void                    Branch                   %110.2 -> BB114 (if true) | BB115 (if false)
BB111   <- [28]
  void                    Nop                !     
  val?^ | miss    %111.1 = %28.0
  dr              %111.2 = CallTarget@0x55fa0cee07b0[Call#8]
  goto BB23
BB108   <- [33]
  prom-           %108.0 = MkArg                    unboundValue, .resetTable[0x55fa0ccefb00]_p10, e84.0
  val?            %108.1 = Call               !v    function(object, class2) <(rir::DispatchTable*|...(%108.0, "MethodDefinition") e84.0   <lgl$->
  lgl$#-          %108.2 = IsType                   %108.1 isA lgl$-
  void                    Branch                   %108.2 -> BB112 (if true) | BB113 (if false)
BB109   <- [33]
  fs              %109.0 = FrameState         R     0x55fa0e749810+863: [%96.1, %96.2, %96.4], env=e84.0
  void                    Deopt              !v    %109.0, CallTarget@0x55fa0cee07b0[Call#18], %33.0   !
BB114   <- [110]
  lgl$-           %114.0 = CastType           d     dn %110.1
  lgl$#-          %114.1 = CheckTrueFalse     e     %114.0
  void                    Branch                   %114.1 -> BB32 (if true) | BB31 (if false)
BB115   <- [110]
  fs              %115.0 = FrameState         R     0x55fa0e749810+514: [%96.1, %96.2, %96.4, %110.1], env=e84.0
  void                    Deopt              !v    %115.0, Typecheck@0x55fa0cee07b0[Type#19], %110.1   !
BB112   <- [108]
  lgl$-           %112.0 = CastType           d     dn %108.1
  lgl$#-          %112.1 = CheckTrueFalse     e     %112.0
  void                    Branch                   %112.1 -> BB39 (if true) | BB38 (if false)
BB113   <- [108]
  void                    Nop                !     
  val?            %113.1 = %108.1
  dr              %113.2 = Typecheck@0x55fa0cee07b0[Type#39]
  goto BB36
BB32   <- [114]
  (cls|spec|blt)  %32.0 = LdFun              !v    @, <0x55fa0ad53bd8>, e84.0
  prom-           %32.1 = MkArg                    unboundValue, .resetTable[0x55fa0ccefb00]_p8, e84.0
  prom-           %32.2 = MkArg                    unboundValue, .resetTable[0x55fa0ccefb00]_p9, e84.0
  val?            %32.3 = Call               !v    %32.0(%32.1, %32.2) e84.0   <str$>
  void                    StVar              lW    newSig, %32.3, e84.0
  goto BB33
BB31   <- [114]
  (cls|spec|blt)  %31.0 = LdFun              !v    is, e84.0
  fs              %31.1 = FrameState         R     0x55fa0e749810+530: [%96.1, %96.2, %96.4, %31.0], env=e84.0
  void                    Deopt              !v    %31.1, DeadCall@0x55fa0cee07b0[Call#9], %31.0   !
BB39   <- [112]
  val?^ | miss    %39.0 = LdVar              eR    packageSlot, e84.0
  lgl$#-          %39.1 = Identical                %39.0, function(object) <(rir::DispatchTable*)0x55fa0|...
  void                    Branch                   %39.1 -> BB116 (if true) | BB117 (if false)
BB38   <- [112]
  (cls|spec|blt)  %38.0 = LdFun              !v    .sigLabel, e84.0
  fs              %38.1 = FrameState         R     0x55fa0e749810+916: [%96.1, %96.2, %96.4, %38.0], env=e84.0
  void                    Deopt              !v    %38.1, DeadCall@0x55fa0cee07b0[Call#19], %38.0   !
BB36   <- [113, 117]
  val?^ | miss    %36.0 = Phi                      %113.1:BB113, %117.1:BB117
  val?^ | miss    %36.1 = %36.0
  dr              %36.2 = Phi                      %113.2:BB113, %117.2:BB117
  dr              %36.3 = %36.2
  fs              %36.4 = FrameState         R     0x55fa0e749810+900: [%96.1, %96.2, %96.4, %108.1], env=e84.0
  void                    Deopt              !v    %36.4, %36.3, %36.1   !
BB116   <- [39]
  prom-           %116.0 = MkArg                    unboundValue, .resetTable[0x55fa0ccefb00]_p11, e84.0
  ct              %116.1 = PushContext        lCL   %116.0, packageSlot(newSig), function(object) <(rir::DispatchTable*)0x55fa0|..., e84.0
  val?^           %116.2 = CastType                 up %116.0
  val?^ | miss    %116.3 = LdVar              eR    attr, <env 0x55fa0b35b378>
  lgl$#-          %116.4 = Identical                <blt attr>, %116.3   <true>
  void                    Branch                   %116.4 -> BB118 (if true) | BB119 (if false)
BB117   <- [39]
  void                    Nop                !     
  val?^ | miss    %117.1 = %39.0
  dr              %117.2 = CallTarget@0x55fa0cee07b0[Call#22]
  goto BB36
BB118   <- [116]
  env             e118.0 = MkEnv              l     object=%116.2, parent=<env 0x55fa0b35b378>, context 1
  val?            %118.1 = Force!<lazy>       !vL   %116.2, e118.0   <(str|other)>
  val?            %118.2 = CallBuiltin        !v    attr(%118.1, "package") e118.0   <(nil|str)->
  val?            %118.3 = PopContext         C     %118.2, %116.1   <str$->
  void                    StVar              lW    pkgs, %118.3, e84.0
  val?^ | miss    %118.5 = LdVar              eR    as, e84.0
  lgl$#-          %118.6 = Identical                %118.5, function(object, Class, strict=TRUE, ext=possi|...
  void                    Branch                   %118.6 -> BB120 (if true) | BB121 (if false)
BB119   <- [116]
  fs              %119.0 = FrameState         R     0x55fa0e749810+994: [%96.1, %96.2, %96.4], env=e84.0
  env             e119.1 = (MkEnv)            l     object=%116.2, parent=<env 0x55fa0b35b378>, context 1
  fs              %119.2 = FrameState         R     0x55fa0cd91810+17: [<blt attr>, %116.4], env=e119.1, next=%119.0
  void                    Deopt              !v    %119.2, DeadBranchReached@0x55fa0eb379b8[Test#0], %116.4   !
BB120   <- [118]
  prom-           %120.0 = MkArg                    unboundValue, .resetTable[0x55fa0ccefb00]_p12, e84.0
  val?            %120.1 = Call               !v    function(object, Class, strict=TRUE, ext=possi|...(%120.0, "signature") e84.0   <str>
  void                    StVar              lW    newSig, %120.1, e84.0
  (cls|spec|blt)  %120.3 = LdFun              !v    <-, <0x55fa0ad48da8>, e84.0
  prom-           %120.4 = MkArg                    unboundValue, .resetTable[0x55fa0ccefb00]_p17, e84.0
  prom-           %120.5 = MkArg                    unboundValue, .resetTable[0x55fa0ccefb00]_p20, e84.0
  val?            %120.6 = Call               !v    %120.3(%120.4, %120.5) e84.0
  (cls|spec|blt)  %120.7 = LdFun              !v    <-, <0x55fa0ad48da8>, e84.0
  prom-           %120.8 = MkArg                    unboundValue, .resetTable[0x55fa0ccefb00]_p21, e84.0
  prom-           %120.9 = MkArg                    unboundValue, .resetTable[0x55fa0ccefb00]_p24, e84.0
  val?            %120.10 = Call               !v    %120.7(%120.8, %120.9) e84.0
  (cls|spec|blt)  %120.11 = LdFun              !v    <-, <0x55fa0ad48da8>, e84.0
  prom-           %120.12 = MkArg                    unboundValue, .resetTable[0x55fa0ccefb00]_p29, e84.0
  prom-           %120.13 = MkArg                    unboundValue, .resetTable[0x55fa0ccefb00]_p32, e84.0
  val?            %120.14 = Call               !v    %120.11(%120.12, %120.13) e84.0
  val?^ | miss    %120.15 = LdVar              eR    .sigLabel, e84.0
  lgl$#-          %120.16 = Identical                %120.15, function(sig) <(rir::DispatchTable*)0x55fa0e8b|...
  void                    Branch                   %120.16 -> BB122 (if true) | BB123 (if false)
BB121   <- [118]
  fs              %121.0 = FrameState         R     0x55fa0e749810+1008: [%96.1, %96.2, %96.4], env=e84.0
  void                    Deopt              !v    %121.0, CallTarget@0x55fa0cee07b0[Call#23], %118.5   !
BB122   <- [120]
  prom-           %122.0 = MkArg                    unboundValue, .resetTable[0x55fa0ccefb00]_p37, e84.0
  val?^           %122.1 = CastType                 up %122.0
  val?^ | miss    %122.2 = LdVar              eR    paste, <env 0x55fa0b35b378>
  lgl$#-          %122.3 = Identical                %122.2, function(..., sep=" ", collapse=NULL, recycle0|...
  void                    Branch                   %122.3 -> BB124 (if true) | BB125 (if false)
BB123   <- [120]
  void                    Nop                !     
  val?^ | miss    %123.1 = %120.15
  dr              %123.2 = CallTarget@0x55fa0cee07b0[Call#36]
  goto BB44
BB124   <- [122]
  env             e124.0 = MkEnv              l     sig=%122.1, parent=<env 0x55fa0b35b378>, context 0
  prom-           %124.1 = MkArg                    unboundValue, .resetTable[0x55fa0ccefb00]_p58, e124.0
  dots-           %124.2 = DotsList           l     %124.1
  val?^ | miss    %124.3 = CastType                 up %124.1
  env             e124.4 = MkEnv              l     ...=%124.2, sep(miss)=" ", collapse="#", recycle0(miss)=false, parent=R_BaseNamespace, context -1
  val?            %124.5 = Force!             !vL   %124.3, e124.4
  val+            %124.6 = CallSafeBuiltin    wed   list(%124.5)    <vec->
  val+            %124.7 = CallSafeBuiltin    wed   paste(%124.6, " ", "#", false)    <str$->
  void                    StVar              lW    newLabel, %124.7, e84.0
  val?^ | miss    %124.9 = LdVar              eR    remove, e84.0
  lgl$#-          %124.10 = Identical                %124.9, function(..., list=character(), pos=-(1), envi|...
  void                    Branch                   %124.10 -> BB126 (if true) | BB127 (if false)
BB125   <- [122]
  void                    Nop                !     
  val?^ | miss    %125.1 = %122.2
  dr              %125.2 = CallTarget@0x55fa0e407028[Call#0]
  goto BB44
BB44   <- [123, 125]
  val?^ | miss    %44.0 = Phi                      %123.1:BB123, %125.1:BB125
  val?^ | miss    %44.1 = %44.0
  dr              %44.2 = Phi                      %123.2:BB123, %125.2:BB125
  dr              %44.3 = %44.2
  fs              %44.4 = FrameState         R     0x55fa0e749810+1172: [%96.1, %96.2, %96.4, %120.14], env=e84.0
  void                    Deopt              !v    %44.4, %44.3, %44.1   !
BB126   <- [124]
  prom-           %126.0 = MkArg                    unboundValue, .resetTable[0x55fa0ccefb00]_p38, e84.0
  prom-           %126.1 = MkArg                    unboundValue, .resetTable[0x55fa0ccefb00]_p39, e84.0
  val?            %126.2 = StaticCall         !v    remove[0x55fa0b586870](missingArg, %126.0, missingArg, %126.1) { 1n 3n } e84.0
  val?^ | miss    %126.3 = LdVar              eR    assign, e84.0
  lgl$#-          %126.4 = Identical                %126.3, function(x, value, pos=-(1), envir=as.environm|...
  void                    Branch                   %126.4 -> BB128 (if true) | BB129 (if false)
BB127   <- [124]
  fs              %127.0 = FrameState         R     0x55fa0e749810+1219: [%96.1, %96.2, %96.4], env=e84.0
  void                    Deopt              !v    %127.0, CallTarget@0x55fa0cee07b0[Call#37], %124.9   !
BB128   <- [126]
  prom-           %128.0 = MkArg                    unboundValue, .resetTable[0x55fa0ccefb00]_p40, e84.0
  prom-           %128.1 = MkArg                    unboundValue, .resetTable[0x55fa0ccefb00]_p41, e84.0
  prom-           %128.2 = MkArg                    unboundValue, .resetTable[0x55fa0ccefb00]_p42, e84.0
  val?            %128.3 = StaticCall         !v    assign[0x55fa0cc07a10](%128.0, %128.1, missingArg, %128.2) { 0 1 3n } e84.0
  int$-           %128.4 = %96.4
  goto BB50
BB129   <- [126]
  fs              %129.0 = FrameState         R     0x55fa0e749810+1273: [%96.1, %96.2, %96.4, %126.2], env=e84.0
  void                    Deopt              !v    %129.0, CallTarget@0x55fa0cee07b0[Call#38], %126.3   !
BB50   <- [128, 150]
  int$-           %50.0 = Phi                      %128.4:BB128, %150.4:BB150
  int$-           %50.1 = %50.0
  int$-           %50.2 = Inc                      %50.1
  lgl$-           %50.3 = Lt                 d     %96.2, %50.2, elided
  lgl$#-          %50.4 = Identical                %50.3, true
  void                    Branch                   %50.4 -> BB78 (if true) | BB51 (if false)
BB78   <- [50]
  void                    Visible            v     
  void                    Return             l     nil
BB51   <- [50]
  val?            %51.0 = Extract2_1D        wed   %96.1, %50.2, elided
  void                    StVar              lW    what, %51.0, e84.0
  val?^ | miss    %51.2 = LdVar              eR    get, e84.0
  lgl$#-          %51.3 = Identical                %51.2, function(x, pos=-(1L), envir=as.environment(po|...
  void                    Branch                   %51.3 -> BB130 (if true) | BB131 (if false)
BB130   <- [51]
  prom-           %130.0 = MkArg                    unboundValue, .resetTable[0x55fa0ccefb00]_p43 (!refl), e84.0
  prom-           %130.1 = MkArg                    unboundValue, .resetTable[0x55fa0ccefb00]_p44, e84.0
  val?            %130.2 = StaticCall         !v    get[0x55fa0cb33380](%130.0, missingArg, %130.1) { 0 2n } e84.0   <spec->
  void                    StVar              lW    method, %130.2, e84.0
  val?^ | miss    %130.4 = LdVar              eR    is.primitive, e84.0
  lgl$#-          %130.5 = Identical                %130.4, function(x) <(rir::DispatchTable*)0x55fa0b6938|...
  void                    Branch                   %130.5 -> BB132 (if true) | BB133 (if false)
BB131   <- [51]
  fs              %131.0 = FrameState         R     0x55fa0e749810+1358: [%96.1, %96.2, %50.2], env=e84.0
  void                    Deopt              !v    %131.0, CallTarget@0x55fa0cee07b0[Call#39], %51.2   !
BB132   <- [130]
  val             %132.0 = ChkMissing         e     %130.2
  str$-           %132.1 = CallSafeBuiltin    wed   typeof(%130.2)    <str$->
  int$-           %132.2 = Length                   %132.1
  lgl$-           %132.3 = Eq                 d     %132.2, 1L, elided   <true>
  lgl$#-          %132.4 = Identical                %132.3, true
  void                    Branch                   %132.4 -> BB134 (if true) | BB135 (if false)
BB133   <- [130]
  fs              %133.0 = FrameState         R     0x55fa0e749810+1417: [%96.1, %96.2, %50.2], env=e84.0
  void                    Deopt              !v    %133.0, CallTarget@0x55fa0cee07b0[Call#40], %130.4   !
BB134   <- [132]
  lgl$-           %134.0 = CallSafeBuiltin    wed   is.na(%132.1) 
  lgl$#-          %134.1 = CheckTrueFalse     e     %134.0   <false>
  void                    Branch                   %134.1 -> BB137 (if true) | BB136 (if false)
BB135   <- [132]
  prom-           %135.0 = MkArg                    %130.2, .resetTable[0x55fa0ccefb00]_p45 (!refl), e84.0
  val?~           %135.1 = CastType                 up %135.0
  env             e135.2 = MkEnv              l     x=%135.1, parent=R_BaseNamespace, context 0
  prom-           %135.3 = MkArg                    %130.2, .resetTable[0x55fa0ccefb00]_p59 (!refl), e135.2
  val?~           %135.4 = CastType                 up %135.3
  fs              %135.5 = FrameState         R     0x55fa0e749810+1449: [%96.1, %96.2, %50.2], env=e84.0
  fs              %135.6 = FrameState         R     0x55fa0e0e18e0+32: [], env=e135.2, next=%135.5
  env             e135.7 = (MkEnv)            l     x=%135.4, parent=R_BaseNamespace, context -1
  fs              %135.8 = FrameState         R     0x55fa0cca7680+27: [%132.1], env=e135.7, next=%135.6
  void                    Deopt              !v    %135.8, DeadBranchReached@0x55fa0f4f10b8[Test#1], %132.4   !
BB137   <- [134]
  void                    Nop                !     
  lgl$#-          %137.1 = %134.1
  dr              %137.2 = DeadBranchReached@0x55fa0f4f10b8[Test#7]
  goto BB58
BB136   <- [134]
  lgl$-           %136.0 = Eq                 d     %132.1, special, elided
  lgl$#-          %136.1 = CheckTrueFalse     e     %136.0
  void                    Branch                   %136.1 -> BB77 (if true) | BB60 (if false)
BB58   <- [137, 139]
  val?^ | miss    %58.0 = Phi                      %137.1:BB137, %139.1:BB139
  val?^ | miss    %58.1 = %58.0
  dr              %58.2 = Phi                      %137.2:BB137, %139.2:BB139
  dr              %58.3 = %58.2
  prom-           %58.4 = MkArg                    %130.2, .resetTable[0x55fa0ccefb00]_p45 (!refl), e84.0
  val?~           %58.5 = CastType                 up %58.4
  fs              %58.6 = FrameState         R     0x55fa0e749810+1449: [%96.1, %96.2, %50.2], env=e84.0
  env             e58.7 = (MkEnv)            l     x=%58.5, parent=R_BaseNamespace, context 0
  fs              %58.8 = FrameState         R     0x55fa0e0e18e0+240: [%132.1, %134.0], env=e58.7, next=%58.6
  void                    Deopt              !v    %58.8, %58.3, %58.1   !
BB77   <- [136]
  void                    Nop                !     
  goto BB76
BB60   <- [136]
  lgl$-           %60.0 = Eq                 d     %132.1, builtin, elided
  lgl$#-          %60.1 = CheckTrueFalse     e     %60.0
  void                    Branch                   %60.1 -> BB75 (if true) | BB61 (if false)
BB76   <- [77, 75]
  void                    Nop                !     
  lgl$#-          %76.1 = true
  goto BB62
BB75   <- [60]
  void                    Nop                !     
  goto BB76
BB61   <- [60]
  void                    Nop                !     
  lgl$#-          %61.1 = false
  goto BB62
BB62   <- [61, 76]
  lgl$#-          %62.0 = Phi                      %61.1:BB61, %76.1:BB76
  lgl$#-          %62.1 = %62.0
  void                    Branch                   %62.1 -> BB64 (if true) | BB63 (if false)
BB64   <- [62]
  val?^ | miss    %64.0 = LdVar              eR    anyLabel, e84.0
  lgl$#-          %64.1 = IsType                   %64.0 isA val?~- | miss
  void                    Branch                   %64.1 -> BB138 (if true) | BB139 (if false)
BB63   <- [62]
  (cls|spec|blt)  %63.0 = LdFun              !v    is, e84.0
  fs              %63.1 = FrameState         R     0x55fa0e749810+1465: [%96.1, %96.2, %50.2, %63.0], env=e84.0
  void                    Deopt              !v    %63.1, DeadCall@0x55fa0cee07b0[Call#41], %63.0   !
BB138   <- [64]
  val?~- | miss   %138.0 = CastType           d     dn %64.0
  val?-           %138.1 = Force!<value>            %138.0,    <str->
  void                    StVar              lW    newSig, %138.1, e84.0
  val?^ | miss    %138.3 = LdVar              eR    is, e84.0
  lgl$#-          %138.4 = Identical                %138.3, function(object, class2) <(rir::DispatchTable*|...
  void                    Branch                   %138.4 -> BB140 (if true) | BB141 (if false)
BB139   <- [64]
  void                    Nop                !     
  val?^ | miss    %139.1 = %64.0
  dr              %139.2 = Typecheck@0x55fa0cee07b0[Type#111]
  goto BB58
BB140   <- [138]
  prom-           %140.0 = MkArg                    unboundValue, .resetTable[0x55fa0ccefb00]_p46 (!refl), e84.0
  val?            %140.1 = Call               !v    function(object, class2) <(rir::DispatchTable*|...(%140.0, "MethodDefinition") e84.0   <lgl$->
  lgl$#-          %140.2 = IsType                   %140.1 isA lgl$-
  void                    Branch                   %140.2 -> BB142 (if true) | BB143 (if false)
BB141   <- [138]
  fs              %141.0 = FrameState         R     0x55fa0e749810+1846: [%96.1, %96.2, %50.2], env=e84.0
  void                    Deopt              !v    %141.0, CallTarget@0x55fa0cee07b0[Call#51], %138.3   !
BB142   <- [140]
  lgl$-           %142.0 = CastType           d     dn %140.1
  lgl$#-          %142.1 = CheckTrueFalse     e     %142.0
  void                    Branch                   %142.1 -> BB74 (if true) | BB69 (if false)
BB143   <- [140]
  void                    Nop                !     
  val?            %143.1 = %140.1
  dr              %143.2 = Typecheck@0x55fa0cee07b0[Type#113]
  goto BB67
BB74   <- [142]
  (cls|spec|blt)  %74.0 = LdFun              !v    packageSlot, e84.0
  fs              %74.1 = FrameState         R     0x55fa0e749810+1950: [%96.1, %96.2, %50.2, %74.0], env=e84.0
  void                    Deopt              !v    %74.1, DeadCall@0x55fa0cee07b0[Call#55], %74.0   !
BB69   <- [142]
  val?^ | miss    %69.0 = LdVar              eR    .sigLabel, e84.0
  lgl$#-          %69.1 = Identical                %69.0, function(sig) <(rir::DispatchTable*)0x55fa0e8b|...
  void                    Branch                   %69.1 -> BB144 (if true) | BB145 (if false)
BB67   <- [143, 145, 147]
  val?^ | miss    %67.0 = Phi                      %143.1:BB143, %145.1:BB145, %147.1:BB147
  val?^ | miss    %67.1 = %67.0
  dr              %67.2 = Phi                      %143.2:BB143, %145.2:BB145, %147.2:BB147
  dr              %67.3 = %67.2
  fs              %67.4 = FrameState         R     0x55fa0e749810+1883: [%96.1, %96.2, %50.2, %140.1], env=e84.0
  void                    Deopt              !v    %67.4, %67.3, %67.1   !
BB144   <- [69]
  prom-           %144.0 = MkArg                    unboundValue, .resetTable[0x55fa0ccefb00]_p47, e84.0
  val?^           %144.1 = CastType                 up %144.0
  env             e144.2 = MkEnv              l     sig=%144.1, parent=<env 0x55fa0b35b378>, context 0
  val?^ | miss    %144.3 = LdVar              eR    paste, e144.2
  lgl$#-          %144.4 = Identical                %144.3, function(..., sep=" ", collapse=NULL, recycle0|...
  void                    Branch                   %144.4 -> BB146 (if true) | BB147 (if false)
BB145   <- [69]
  void                    Nop                !     
  val?^ | miss    %145.1 = %69.0
  dr              %145.2 = CallTarget@0x55fa0cee07b0[Call#52]
  goto BB67
BB146   <- [144]
  prom-           %146.0 = MkArg                    unboundValue, .resetTable[0x55fa0ccefb00]_p60, e144.2
  dots-           %146.1 = DotsList           l     %146.0
  val?^ | miss    %146.2 = CastType                 up %146.0
  env             e146.3 = MkEnv              l     ...=%146.1, sep(miss)=" ", collapse="#", recycle0(miss)=false, parent=R_BaseNamespace, context -1
  val?            %146.4 = Force!             !vL   %146.2, e146.3
  val+            %146.5 = CallSafeBuiltin    wed   list(%146.4)    <vec->
  val+            %146.6 = CallSafeBuiltin    wed   paste(%146.5, " ", "#", false)    <str$->
  void                    StVar              lW    newLabel, %146.6, e84.0
  val?^ | miss    %146.8 = LdVar              eR    remove, e84.0
  lgl$#-          %146.9 = Identical                %146.8, function(..., list=character(), pos=-(1), envi|...
  void                    Branch                   %146.9 -> BB148 (if true) | BB149 (if false)
BB147   <- [144]
  void                    Nop                !     
  val?^ | miss    %147.1 = %144.3
  dr              %147.2 = CallTarget@0x55fa0e407028[Call#0]
  goto BB67
BB148   <- [146]
  prom-           %148.0 = MkArg                    unboundValue, .resetTable[0x55fa0ccefb00]_p52, e84.0
  prom-           %148.1 = MkArg                    unboundValue, .resetTable[0x55fa0ccefb00]_p53, e84.0
  val?            %148.2 = StaticCall         !v    remove[0x55fa0b586870](missingArg, %148.0, missingArg, %148.1) { 1n 3n } e84.0
  val?^ | miss    %148.3 = LdVar              eR    assign, e84.0
  lgl$#-          %148.4 = Identical                %148.3, function(x, value, pos=-(1), envir=as.environm|...
  void                    Branch                   %148.4 -> BB150 (if true) | BB151 (if false)
BB149   <- [146]
  fs              %149.0 = FrameState         R     0x55fa0e749810+1940: [%96.1, %96.2, %50.2], env=e84.0
  void                    Deopt              !v    %149.0, CallTarget@0x55fa0cee07b0[Call#70], %146.8   !
BB150   <- [148]
  prom-           %150.0 = MkArg                    unboundValue, .resetTable[0x55fa0ccefb00]_p54, e84.0
  prom-           %150.1 = MkArg                    unboundValue, .resetTable[0x55fa0ccefb00]_p55, e84.0
  prom-           %150.2 = MkArg                    unboundValue, .resetTable[0x55fa0ccefb00]_p56, e84.0
  val?            %150.3 = StaticCall         !v    assign[0x55fa0cc07a10](%150.0, %150.1, missingArg, %150.2) { 0 1 3n } e84.0
  int$-           %150.4 = %50.2
  goto BB50
BB151   <- [148]
  fs              %151.0 = FrameState         R     0x55fa0e749810+2256: [%96.1, %96.2, %50.2, %148.2], env=e84.0
  void                    Deopt              !v    %151.0, CallTarget@0x55fa0cee07b0[Call#71], %148.3   !
Prom 0:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     .allowPrimitiveMethods, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .resetTable[0x55fa0ccefb00]_p1, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    primMethods, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    n, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 3:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    n, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 4:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    what, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 5:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    table, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 6:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    method, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 7:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    method, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 8:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    method, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 9:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    defined, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 10:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    method, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 11:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    newSig, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$>
  void                    Return             l     %0.3
Prom 12:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     ifelse, <0x55fa0b1ea040>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .resetTable[0x55fa0ccefb00]_p13, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .resetTable[0x55fa0ccefb00]_p15, e0.0
  prom-           %0.4  = MkArg                    unboundValue, .resetTable[0x55fa0ccefb00]_p16, e0.0
  val?            %0.5  = Call               !     %0.1(%0.2, %0.3, %0.4) e0.0   <str->
  void                    Return             l     %0.5
Prom 13:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    seqN, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <int->
  (cls|spec|blt)  %0.4  = LdFun              !     length, <0x55fa0ad54a90>, e0.0
  prom-           %0.5  = MkArg                    unboundValue, .resetTable[0x55fa0ccefb00]_p14, e0.0
  val?            %0.6  = Call               !     %0.4(%0.5) e0.0   <int$->
  val?            %0.7  = Gt                 !     %0.3, %0.6, e0.0   <lgl->
  void                    Return             l     %0.7
Prom 14:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    newSig, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$>
  void                    Return             l     %0.3
Prom 15:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    anyLabel, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 16:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    newSig, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$>
  void                    Return             l     %0.3
Prom 17:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .resetTable[0x55fa0ccefb00]_p18, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .resetTable[0x55fa0ccefb00]_p19, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 18:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    newSig, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 19:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    names, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 20:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    signames, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 21:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .resetTable[0x55fa0ccefb00]_p22, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .resetTable[0x55fa0ccefb00]_p23, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 22:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    newSig, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 23:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    package, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 24:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     ifelse, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .resetTable[0x55fa0ccefb00]_p25, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .resetTable[0x55fa0ccefb00]_p27, e0.0
  prom-           %0.4  = MkArg                    unboundValue, .resetTable[0x55fa0ccefb00]_p28, e0.0
  val?            %0.5  = Call               !     %0.1(%0.2, %0.3, %0.4) e0.0   <val?_>
  void                    Return             l     %0.5
Prom 25:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    seqN, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  (cls|spec|blt)  %0.4  = LdFun              !     length, e0.0
  prom-           %0.5  = MkArg                    unboundValue, .resetTable[0x55fa0ccefb00]_p26, e0.0
  val?            %0.6  = Call               !     %0.4(%0.5) e0.0   <val?_>
  val?            %0.7  = Gt                 !     %0.3, %0.6, e0.0   <val?_>
  void                    Return             l     %0.7
Prom 26:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    pkgs, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 27:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    anyPkg, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 28:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    pkgs, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 29:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .resetTable[0x55fa0ccefb00]_p30, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .resetTable[0x55fa0ccefb00]_p31, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 30:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    method, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 31:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    defined, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 32:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     <-, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .resetTable[0x55fa0ccefb00]_p33, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .resetTable[0x55fa0ccefb00]_p36, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 33:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .resetTable[0x55fa0ccefb00]_p34, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .resetTable[0x55fa0ccefb00]_p35, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 34:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    method, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 35:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    target, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 36:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    newSig, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 37:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    newSig, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str>
  void                    Return             l     %0.3
Prom 38:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    what, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 39:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    table, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 40:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    newLabel, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 41:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    method, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 42:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    table, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 43:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    what, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 44:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    table, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 45:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    method, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <spec->
  void                    Return             l     %0.3
Prom 46:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    method, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <spec->
  void                    Return             l     %0.3
Prom 47:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     ifelse, <0x55fa0b1ea040>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .resetTable[0x55fa0ccefb00]_p48, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .resetTable[0x55fa0ccefb00]_p50, e0.0
  prom-           %0.4  = MkArg                    unboundValue, .resetTable[0x55fa0ccefb00]_p51, e0.0
  val?            %0.5  = Call               !     %0.1(%0.2, %0.3, %0.4) e0.0   <str->
  void                    Return             l     %0.5
Prom 48:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    seqN, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <int->
  (cls|spec|blt)  %0.4  = LdFun              !     length, <0x55fa0ad54a90>, e0.0
  prom-           %0.5  = MkArg                    unboundValue, .resetTable[0x55fa0ccefb00]_p49, e0.0
  val?            %0.6  = Call               !     %0.4(%0.5) e0.0   <int$->
  val?            %0.7  = Gt                 !     %0.3, %0.6, e0.0   <lgl->
  void                    Return             l     %0.7
Prom 49:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    newSig, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 50:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    anyLabel, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 51:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    newSig, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 52:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    what, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 53:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    table, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 54:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    newLabel, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 55:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    method, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <spec->
  void                    Return             l     %0.3
Prom 56:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    table, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 57:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    x, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <val?>
  void                    Return             l     %0.3
Prom 58:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    sig, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str>
  void                    Return             l     %0.3
Prom 59:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    x, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <val?>
  void                    Return             l     %0.3
Prom 60:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    sig, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str>
  void                    Return             l     %0.3

│ .resetTable[0x55fa0ccefb00]                                                  │
└──────────────────────────────────────────────────────────────────────────────┘
