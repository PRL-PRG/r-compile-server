
┌──────────────────────────────────────────────────────────────────────────────┐
│ getGeneric[0x55fa0d88e5c0]                                                   │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;Eager1,NonRefl1,!Obj1 miss: 1        │
│ Properties:                                                                  │
├────── Final PIR Version
getGeneric[0x55fa0d88e5c0]
BB0
  val?^           %0.0  = LdArg                    2
  val?~+          %0.1  = LdArg                    1
  val?^           %0.2  = LdArg                    0
  val?^ | miss    %0.3  = LdVar              eR    is.function, <env 0x55fa0b35b378>
  lgl$#-          %0.4  = Identical                <blt is.function>, %0.3   <true>
  void                    Branch                   %0.4 -> BB75 (if true) | BB76 (if false)
BB75   <- [0]
  env             e75.0 = MkEnv              l     f=%0.2, mustFind=%0.1, where=%0.0, package(miss)="", parent=<env 0x55fa0b35b378>, context 1
  val?            %75.1 = Force!<lazy>       !v    %0.2, e75.0   <(str|cls)>
  val?            %75.2 = CallBuiltin        !     is.function(%75.1) e75.0   <lgl$->
  lgl$#-          %75.3 = IsType                   %75.2 isA lgl$-
  void                    Branch                   %75.3 -> BB77 (if true) | BB78 (if false)
BB76   <- [0]
  env             e76.0 = (MkEnv)            l     f=%0.2, mustFind=%0.1, where=%0.0, package(miss)="", parent=<env 0x55fa0b35b378>, context 1
  fs              %76.1 = FrameState         R     0x55fa0f4536e0+0: [], env=e76.0
  void                    Deopt              !v    %76.1, DeadBranchReached@0x55fa0ea1c140[Test#0], %0.4
BB77   <- [75]
  lgl$-           %77.0 = CastType           d     dn %75.2
  lgl$#-          %77.1 = CheckTrueFalse     e     %77.0
  void                    Branch                   %77.1 -> BB67 (if true) | BB5 (if false)
BB78   <- [75]
  void                    Nop                !     
  val?            %78.1 = %75.2
  dr              %78.2 = Typecheck@0x55fa0ea1c140[Type#2]
  goto BB3
BB67   <- [77]
  val?^ | miss    %67.0 = LdVar              eR    is, e75.0
  lgl$#-          %67.1 = Identical                %67.0, function(object, class2) <(rir::DispatchTable*|...
  void                    Branch                   %67.1 -> BB79 (if true) | BB80 (if false)
BB5   <- [77]
  void                    Nop                !     
  goto BB6
BB3   <- [78, 80]
  val?^ | miss    %3.0  = Phi                      %78.1:BB78, %80.1:BB80
  val?^ | miss    %3.1  = %3.0
  dr              %3.2  = Phi                      %78.2:BB78, %80.2:BB80
  dr              %3.3  = %3.2
  fs              %3.4  = FrameState         R     0x55fa0f4536e0+91: [%75.2], env=e75.0
  void                    Deopt              !v    %3.4, %3.3, %3.1   !
BB79   <- [67]
  prom-           %79.0 = MkArg                    unboundValue, getGeneric[0x55fa0d88e5c0]_p26, e75.0
  val?            %79.1 = Call               !     function(object, class2) <(rir::DispatchTable*|...(%79.0, "genericFunction") e75.0   <lgl$->
  lgl$#-          %79.2 = IsType                   %79.1 isA lgl$-
  void                    Branch                   %79.2 -> BB83 (if true) | BB84 (if false)
BB80   <- [67]
  void                    Nop                !     
  val?^ | miss    %80.1 = %67.0
  dr              %80.2 = CallTarget@0x55fa0ea1c140[Call#1]
  goto BB3
BB6   <- [5, 71]
  lgl$-           %6.0  = Missing            eR    where, e75.0
  lgl$#-          %6.1  = CheckTrueFalse     e     %6.0
  void                    Branch                   %6.1 -> BB66 (if true) | BB9 (if false)
BB83   <- [79]
  lgl$-           %83.0 = CastType           d     dn %79.1
  lgl$#-          %83.1 = CheckTrueFalse     e     %83.0
  void                    Branch                   %83.1 -> BB73 (if true) | BB70 (if false)
BB84   <- [79]
  fs              %84.0 = FrameState         R     0x55fa0f4536e0+144: [%79.1], env=e75.0
  void                    Deopt              !v    %84.0, Typecheck@0x55fa0ea1c140[Type#4], %79.1   !
BB66   <- [6]
  val?^ | miss    %66.0 = LdVar              eR    .getGeneric, e75.0
  lgl$#-          %66.1 = Identical                %66.0, function(f, where=.GlobalEnv, package="") <(ri|...
  void                    Branch                   %66.1 -> BB85 (if true) | BB86 (if false)
BB9   <- [6]
  val?^ | miss    %9.0  = LdVar              eR    .getGeneric, e75.0
  lgl$#-          %9.1  = Identical                %9.0, function(f, where=.GlobalEnv, package="") <(ri|...
  void                    Branch                   %9.1 -> BB81 (if true) | BB82 (if false)
BB73   <- [83]
  val?^ | miss    %73.0 = LdVar              eR    f, e75.0
  void                    Visible            v     
  val?            %73.2 = Force!<wrapped>    !     %73.0, e75.0   <cls>
  val?            %73.3 = %73.2
  goto BB43
BB70   <- [83]
  (cls|spec|blt)  %70.0 = LdFun              !     is.primitive, e75.0
  prom-           %70.1 = MkArg                    unboundValue, getGeneric[0x55fa0d88e5c0]_p27, e75.0
  val?            %70.2 = Call               !     %70.0(%70.1) e75.0   <>
  lgl$#-          %70.3 = CheckTrueFalse     we    %70.2
  void                    Branch                   %70.3 -> BB72 (if true) | BB71 (if false)
BB85   <- [66]
  prom-           %85.0 = MkArg                    unboundValue, getGeneric[0x55fa0d88e5c0]_p24, e75.0
  prom-           %85.1 = MkArg                    unboundValue, getGeneric[0x55fa0d88e5c0]_p25, e75.0
  val?            %85.2 = StaticCall         !v    .getGeneric[0x55fa0ae75090](%85.0, missingArg, %85.1) e75.0   <cls>
  val?            %85.3 = %85.2
  goto BB10
BB86   <- [66]
  void                    Nop                !     
  val?^ | miss    %86.1 = %66.0
  dr              %86.2 = CallTarget@0x55fa0ea1c140[Call#7]
  goto BB7
BB81   <- [9]
  prom-           %81.0 = MkArg                    unboundValue, getGeneric[0x55fa0d88e5c0]_p1, e75.0
  prom-           %81.1 = MkArg                    unboundValue, getGeneric[0x55fa0d88e5c0]_p2, e75.0
  prom-           %81.2 = MkArg                    unboundValue, getGeneric[0x55fa0d88e5c0]_p3, e75.0
  val?            %81.3 = StaticCall         !v    .getGeneric[0x55fa0e6c9550](%81.0, %81.1, %81.2) e75.0   <(nil|cls)>
  val?            %81.4 = %81.3
  goto BB10
BB82   <- [9]
  void                    Nop                !     
  val?^ | miss    %82.1 = %9.0
  dr              %82.2 = CallTarget@0x55fa0ea1c140[Call#6]
  goto BB7
BB43   <- [73, 72, 42]
  val?            %43.0 = Phi                      %42.2:BB42, %72.4:BB72, %73.3:BB73
  val?            %43.1 = %43.0
  void                    Return             l     %43.1
BB72   <- [70]
  (cls|spec|blt)  %72.0 = LdFun              !     genericForBasic, e75.0
  prom-           %72.1 = MkArg                    unboundValue, getGeneric[0x55fa0d88e5c0]_p28, e75.0
  prom-           %72.2 = MkArg                    unboundValue, getGeneric[0x55fa0d88e5c0]_p30, e75.0
  val?            %72.3 = NamedCall          !     %72.0(%72.1, mustFind=%72.2) e75.0   <>
  val?            %72.4 = %72.3
  goto BB43
BB71   <- [70]
  (cls|spec|blt)  %71.0 = LdFun              !v    stop, e75.0
  val?            %71.1 = Call               !v    %71.0("argument 'f' must be a string, generic functi|...) e75.0
  goto BB6
BB10   <- [81, 85]
  val?            %10.0 = Phi                      %81.4:BB81, %85.3:BB85   <(nil|cls)>
  val?            %10.1 = %10.0
  lgl$-           %10.2 = Is                       %10.1, NULL
  lgl$-           %10.3 = AsLogical                %10.2
  lgl$#-          %10.4 = Identical                %10.3, false
  void                    StVar              lW    value, %10.1, e75.0
  val             %10.6 = ChkMissing         e     %10.1
  void                    Branch                   %10.4 -> BB65 (if true) | BB13 (if false)
BB7   <- [82, 86]
  val?^ | miss    %7.0  = Phi                      %82.1:BB82, %86.1:BB86
  val?^ | miss    %7.1  = %7.0
  dr              %7.2  = Phi                      %82.2:BB82, %86.2:BB86
  dr              %7.3  = %7.2
  fs              %7.4  = FrameState         R     0x55fa0f4536e0+307: [], env=e75.0
  void                    Deopt              !v    %7.4, %7.3, %7.1   !
BB65   <- [10]
  void                    Nop                !     
  lgl$-           %65.1 = %10.3
  goto BB18
BB13   <- [10]
  val?^ | miss    %13.0 = LdVar              eR    baseenv, e75.0
  lgl$#-          %13.1 = Identical                <blt baseenv>, %13.0   <true>
  void                    Branch                   %13.1 -> BB87 (if true) | BB88 (if false)
BB18   <- [65, 101]
  lgl$-           %18.0 = Phi                      %101.7:BB101, %65.1:BB65
  lgl$-           %18.1 = %18.0
  lgl$#-          %18.2 = CheckTrueFalse     e     %18.1
  void                    Branch                   %18.2 -> BB52 (if true) | BB21 (if false)
BB87   <- [13]
  val?            %87.0 = CallBuiltin        !v    baseenv() e75.0   <env->
  lgl$#-          %87.1 = IsType                   %87.0 isA val+   <true>
  void                    Branch                   %87.1 -> BB93 (if true) | BB94 (if false)
BB88   <- [13]
  fs              %88.0 = FrameState         R     0x55fa0f4536e0+427: [], env=e75.0
  void                    Deopt              !v    %88.0, DeadBranchReached@0x55fa0ea1c140[Test#1], %13.1   !
BB52   <- [18]
  val?^ | miss    %52.0 = LdVar              eR    is.function, e75.0
  lgl$#-          %52.1 = Identical                <blt is.function>, %52.0   <true>
  void                    Branch                   %52.1 -> BB89 (if true) | BB90 (if false)
BB21   <- [18]
  void                    Nop                !     
  goto BB22
BB93   <- [87]
  val?^ | miss    %93.0 = LdVar              eR    f, e75.0
  val?            %93.1 = Force!<wrapped>    !v    %93.0, e75.0   <str$->
  lgl$#-          %93.2 = IsType                   %93.1 isA val?-
  lgl$#-          %93.3 = IsType                   %87.0 isA val?-
  void                    Branch                   %93.3 -> BB99 (if true) | BB100 (if false)
BB94   <- [87]
  fs              %94.0 = FrameState         R     0x55fa0f4536e0+525: [%10.3, %87.0], env=e75.0
  void                    Deopt              !v    %94.0, DeadBranchReached@0x55fa0ea1c140[Test#2], %87.1   !
BB89   <- [52]
  val?^ | miss    %89.0 = LdVar              eR    baseDef, e75.0
  lgl$#-          %89.1 = IsType                   %89.0 isA val?~- | miss
  void                    Branch                   %89.1 -> BB91 (if true) | BB92 (if false)
BB90   <- [52]
  void                    Nop                !     
  lgl$#-          %90.1 = %52.1
  dr              %90.2 = DeadBranchReached@0x55fa0ea1c140[Test#3]
  goto BB19
BB22   <- [21, 55, 61, 109]
  val?^ | miss    %22.0 = LdVar              eR    is.function, e75.0
  lgl$#-          %22.1 = Identical                <blt is.function>, %22.0   <true>
  void                    Branch                   %22.1 -> BB103 (if true) | BB104 (if false)
BB99   <- [93]
  val?-           %99.0 = CastType           d     dn %87.0   <env->
  void                    Branch                   %93.2 -> BB101 (if true) | BB102 (if false)
BB100   <- [93]
  void                    Nop                !     
  val?            %100.1 = %87.0
  dr              %100.2 = Typecheck@0x55fa0ea1c140[Type#20]
  goto BB16
BB91   <- [89]
  val?~- | miss   %91.0 = CastType           d     dn %89.0
  val?-           %91.1 = Force!<value>            %91.0,    <blt->
  lgl$#-          %91.2 = CallSafeBuiltin    wed   is.function(%91.1)    <lgl$->
  void                    Branch                   %91.2 -> BB56 (if true) | BB55 (if false)
BB92   <- [89]
  void                    Nop                !     
  val?^ | miss    %92.1 = %89.0
  dr              %92.2 = Typecheck@0x55fa0ea1c140[Type#25]
  goto BB19
BB19   <- [90, 92]
  val?^ | miss    %19.0 = Phi                      %90.1:BB90, %92.1:BB92
  val?^ | miss    %19.1 = %19.0
  dr              %19.2 = Phi                      %90.2:BB90, %92.2:BB92
  dr              %19.3 = %19.2
  fs              %19.4 = FrameState         R     0x55fa0f4536e0+601: [%18.1], env=e75.0
  void                    Deopt              !v    %19.4, %19.3, %19.1   !
BB103   <- [22]
  val?^ | miss    %103.0 = LdVar              eR    value, e75.0
  val?            %103.1 = Force!<value>      !v    %103.0, e75.0   <cls>
  val?            %103.2 = CallBuiltin        !v    is.function(%103.1) e75.0   <lgl$->
  lgl$#-          %103.3 = IsType                   %103.2 isA lgl$-
  void                    Branch                   %103.3 -> BB111 (if true) | BB112 (if false)
BB104   <- [22]
  fs              %104.0 = FrameState         R     0x55fa0f4536e0+882: [], env=e75.0
  void                    Deopt              !v    %104.0, DeadBranchReached@0x55fa0ea1c140[Test#4], %22.1   !
BB101   <- [99]
  val?-           %101.0 = CastType           d     dn %93.1   <str$->
  val?            %101.1 = Extract2_1D        wed   %99.0, %101.0, elided   <blt->
  lgl$-           %101.2 = Is                       %101.1, NULL
  void                    StVar              lW    baseDef, %101.1, e75.0
  lgl$-           %101.4 = Not                d     %101.2, elided
  lgl$-           %101.5 = AsLogical                %101.4
  lgl$-           %101.6 = LAnd                     %10.3, %101.5
  lgl$-           %101.7 = %101.6
  goto BB18
BB102   <- [99]
  void                    Nop                !     
  val?            %102.1 = %93.1
  dr              %102.2 = Typecheck@0x55fa0ea1c140[Type#22]
  goto BB16
BB16   <- [100, 102]
  val?^ | miss    %16.0 = Phi                      %100.1:BB100, %102.1:BB102
  val?^ | miss    %16.1 = %16.0
  dr              %16.2 = Phi                      %100.2:BB100, %102.2:BB102
  dr              %16.3 = %16.2
  fs              %16.4 = FrameState         R     0x55fa0f4536e0+570: [%10.3, %87.0, %93.1], env=e75.0
  void                    Deopt              !v    %16.4, %16.3, %16.1   !
BB56   <- [91]
  val?^ | miss    %56.0 = LdVar              eR    genericForBasic, e75.0
  lgl$#-          %56.1 = Identical                %56.0, function(f, where=topenv(parent.frame()), must|...
  void                    Branch                   %56.1 -> BB95 (if true) | BB96 (if false)
BB55   <- [91]
  void                    Nop                !     
  goto BB22
BB111   <- [103]
  lgl$-           %111.0 = CastType           d     dn %103.2
  lgl$#-          %111.1 = CheckTrueFalse     e     %111.0
  void                    Branch                   %111.1 -> BB51 (if true) | BB27 (if false)
BB112   <- [103]
  fs              %112.0 = FrameState         R     0x55fa0f4536e0+973: [%103.2], env=e75.0
  void                    Deopt              !v    %112.0, Typecheck@0x55fa0ea1c140[Type#36], %103.2   !
BB95   <- [56]
  prom-           %95.0 = MkArg                    unboundValue, getGeneric[0x55fa0d88e5c0]_p20, e75.0
  val?            %95.1 = StaticCall         !v    genericForBasic[0x55fa124e8ce0](%95.0, missingArg, false) { 0 2n } e75.0   <cls>
  void                    StVar              lW    value, %95.1, e75.0
  val?^ | miss    %95.3 = LdVar              eR    is, e75.0
  lgl$#-          %95.4 = Identical                %95.3, function(object, class2) <(rir::DispatchTable*|...
  void                    Branch                   %95.4 -> BB97 (if true) | BB98 (if false)
BB96   <- [56]
  fs              %96.0 = FrameState         R     0x55fa0f4536e0+703: [%91.2], env=e75.0
  void                    Deopt              !v    %96.0, CallTarget@0x55fa0ea1c140[Call#10], %56.0   !
BB51   <- [111]
  val?^ | miss    %51.0 = LdVar              eR    value, e75.0
  void                    Visible            v     
  val?            %51.2 = Force!<value>      !     %51.0, e75.0   <cls>
  val?            %51.3 = %51.2
  goto BB42
BB27   <- [111]
  val?^ | miss    %27.0 = LdVar              eR    nzchar, e75.0
  lgl$#-          %27.1 = Identical                <blt nzchar>, %27.0   <@?>
  void                    Branch                   %27.1 -> BB50 (if true) | BB28 (if false)
BB97   <- [95]
  prom-           %97.0 = MkArg                    unboundValue, getGeneric[0x55fa0d88e5c0]_p21 (!refl), e75.0
  val?            %97.1 = Call               !v    function(object, class2) <(rir::DispatchTable*|...(%97.0, "genericFunction") e75.0   <lgl$->
  lgl$#-          %97.2 = IsType                   %97.1 isA lgl$-
  void                    Branch                   %97.2 -> BB105 (if true) | BB106 (if false)
BB98   <- [95]
  fs              %98.0 = FrameState         R     0x55fa0f4536e0+778: [], env=e75.0
  void                    Deopt              !v    %98.0, CallTarget@0x55fa0ea1c140[Call#11], %95.3   !
BB42   <- [51, 41]
  val?            %42.0 = Phi                      %41.2:BB41, %51.3:BB51
  val?            %42.1 = %42.0
  val?            %42.2 = %42.1
  goto BB43
BB50   <- [27]
  val?^ | miss    %50.0 = LdVar              eR    package, e75.0
  val?            %50.1 = Force!             !v    %50.0, e75.0   <>
  val?            %50.2 = CallBuiltin        !v    nzchar(%50.1) e75.0
  val?            %50.3 = %50.2
  goto BB29
BB28   <- [27]
  val?^ | miss    %28.0 = LdVar              eR    package, e75.0
  val?            %28.1 = Force!             !v    %28.0, e75.0   <>
  val?            %28.2 = CallBuiltin        !v    nzchar(%28.1) e75.0
  val?            %28.3 = %28.2
  goto BB29
BB105   <- [97]
  lgl$-           %105.0 = CastType           d     dn %97.1
  lgl$#-          %105.1 = CheckTrueFalse     e     %105.0
  void                    Branch                   %105.1 -> BB62 (if true) | BB61 (if false)
BB106   <- [97]
  void                    Nop                !     
  val?            %106.1 = %97.1
  dr              %106.2 = Typecheck@0x55fa0ea1c140[Type#30]
  goto BB59
BB29   <- [28, 50]
  val?            %29.0 = Phi                      %28.3:BB28, %50.3:BB50   <>
  val?            %29.1 = %29.0
  lgl$-           %29.2 = AsLogical          e     %29.1
  lgl$#-          %29.3 = Identical                %29.2, false
  void                    Branch                   %29.3 -> BB49 (if true) | BB30 (if false)
BB62   <- [105]
  val?^ | miss    %62.0 = LdVar              eR    .cacheGeneric, e75.0
  lgl$#-          %62.1 = Identical                %62.0, function(name, def) <(rir::DispatchTable*)0x55|...
  void                    Branch                   %62.1 -> BB107 (if true) | BB108 (if false)
BB61   <- [105]
  void                    Nop                !     
  goto BB22
BB59   <- [106, 108]
  val?^ | miss    %59.0 = Phi                      %106.1:BB106, %108.1:BB108
  val?^ | miss    %59.1 = %59.0
  dr              %59.2 = Phi                      %106.2:BB106, %108.2:BB108
  dr              %59.3 = %59.2
  fs              %59.4 = FrameState         R     0x55fa0f4536e0+815: [%97.1], env=e75.0
  void                    Deopt              !v    %59.4, %59.3, %59.1   !
BB49   <- [29]
  void                    Nop                !     
  lgl$-           %49.1 = %29.2
  goto BB33
BB30   <- [29]
  val?^ | miss    %30.0 = LdVar              eR    is.na, e75.0
  lgl$#-          %30.1 = Identical                <blt is.na>, %30.0   <@?>
  void                    Branch                   %30.1 -> BB48 (if true) | BB31 (if false)
BB107   <- [62]
  prom-           %107.0 = MkArg                    unboundValue, getGeneric[0x55fa0d88e5c0]_p22, e75.0
  prom-           %107.1 = MkArg                    unboundValue, getGeneric[0x55fa0d88e5c0]_p23, e75.0
  ct              %107.2 = PushContext        lCL   %107.0, %107.1, .cacheGeneric(f, value), function(name, def) <(rir::DispatchTable*)0x55|..., e75.0
  val?^           %107.3 = CastType                 up %107.1
  val?^           %107.4 = CastType                 up %107.0
  val?^ | miss    %107.5 = LdVar              eR    .cacheGenericTable, <env 0x55fa0b35b378>
  lgl$#-          %107.6 = Identical                %107.5, function(name, def, table) <(rir::DispatchTabl|...
  void                    Branch                   %107.6 -> BB109 (if true) | BB110 (if false)
BB108   <- [62]
  void                    Nop                !     
  val?^ | miss    %108.1 = %62.0
  dr              %108.2 = CallTarget@0x55fa0ea1c140[Call#12]
  goto BB59
BB33   <- [49, 32]
  lgl$-           %33.0 = Phi                      %32.4:BB32, %49.1:BB49
  lgl$-           %33.1 = %33.0
  lgl$#-          %33.2 = CheckTrueFalse     e     %33.1
  void                    Branch                   %33.2 -> BB47 (if true) | BB34 (if false)
BB48   <- [30]
  (cls|spec|blt)  %48.0 = LdFun              !v    match, e75.0
  prom-           %48.1 = MkArg                    unboundValue, getGeneric[0x55fa0d88e5c0]_p18, e75.0
  prom-           %48.2 = MkArg                    unboundValue, getGeneric[0x55fa0d88e5c0]_p19, e75.0
  val?            %48.3 = Call               !v    %48.0(%48.1, %48.2) e75.0   <>
  val?            %48.4 = CallBuiltin        !v    is.na(%48.3) e75.0
  val?            %48.5 = %48.4
  goto BB32
BB31   <- [30]
  (cls|spec|blt)  %31.0 = LdFun              !v    match, e75.0
  prom-           %31.1 = MkArg                    unboundValue, getGeneric[0x55fa0d88e5c0]_p6, e75.0
  prom-           %31.2 = MkArg                    unboundValue, getGeneric[0x55fa0d88e5c0]_p7, e75.0
  val?            %31.3 = Call               !v    %31.0(%31.1, %31.2) e75.0   <>
  val?            %31.4 = CallBuiltin        !v    is.na(%31.3) e75.0
  val?            %31.5 = %31.4
  goto BB32
BB109   <- [107]
  env             e109.0 = MkEnv              l     name=%107.4, def=%107.3, parent=<env 0x55fa0b35b378>, context 1
  prom-           %109.1 = MkArg                    unboundValue, getGeneric[0x55fa0d88e5c0]_p31, e109.0
  prom-           %109.2 = MkArg                    unboundValue, getGeneric[0x55fa0d88e5c0]_p32, e109.0
  prom-           %109.3 = MkArg                    unboundValue, getGeneric[0x55fa0d88e5c0]_p33, e109.0
  val?            %109.4 = StaticCall         !v    .cacheGenericTable[0x55fa108700c0](%109.1, %109.2, %109.3) e109.0   <cls>
  val?            %109.5 = PopContext         C     %109.4, %107.2   <cls>
  void                    StVar              lW    value, %109.5, e75.0
  goto BB22
BB110   <- [107]
  fs              %110.0 = FrameState         R     0x55fa0f4536e0+868: [], env=e75.0
  env             e110.1 = (MkEnv)            l     name=%107.4, def=%107.3, parent=<env 0x55fa0b35b378>, context 1
  fs              %110.2 = FrameState         R     0x55fa0dc50440+0: [], env=e110.1, next=%110.0
  void                    Deopt              !v    %110.2, CallTarget@0x55fa0d6fcf18[Call#0], %107.5   !
BB47   <- [33]
  (cls|spec|blt)  %47.0 = LdFun              !v    tryCatch, e75.0
  prom-           %47.1 = MkArg                    unboundValue, getGeneric[0x55fa0d88e5c0]_p12, e75.0
  cls             %47.2 = MkCls                    getGeneric@Prom(17)0, e75.0
  prom-           %47.3 = MkArg                    %47.2, getGeneric[0x55fa0d88e5c0]_p17 (!refl), e75.0
  val?            %47.4 = NamedCall          !v    %47.0(%47.1, error=%47.3) e75.0   <>
  void                    StVar              lW    value, %47.4, e75.0
  goto BB35
BB34   <- [33]
  void                    Nop                !     
  goto BB35
BB32   <- [31, 48]
  val?            %32.0 = Phi                      %31.5:BB31, %48.5:BB48   <>
  val?            %32.1 = %32.0
  lgl$-           %32.2 = AsLogical          e     %32.1
  lgl$-           %32.3 = LAnd                     %29.2, %32.2
  lgl$-           %32.4 = %32.3
  goto BB33
BB35   <- [34, 47]
  val?^ | miss    %35.0 = LdVar              eR    is.function, e75.0
  lgl$#-          %35.1 = Identical                <blt is.function>, %35.0   <@?>
  void                    Branch                   %35.1 -> BB46 (if true) | BB36 (if false)
BB46   <- [35]
  val?^ | miss    %46.0 = LdVar              eR    value, e75.0
  val?            %46.1 = Force!             !v    %46.0, e75.0   <>
  val?            %46.2 = CallBuiltin        !v    is.function(%46.1) e75.0
  val?            %46.3 = %46.2
  goto BB37
BB36   <- [35]
  val?^ | miss    %36.0 = LdVar              eR    value, e75.0
  val?            %36.1 = Force!             !v    %36.0, e75.0   <>
  val?            %36.2 = CallBuiltin        !v    is.function(%36.1) e75.0
  val?            %36.3 = %36.2
  goto BB37
BB37   <- [46, 36]
  val?            %37.0 = Phi                      %36.3:BB36, %46.3:BB46   <>
  val?            %37.1 = %37.0
  lgl$#-          %37.2 = CheckTrueFalse     we    %37.1
  void                    Branch                   %37.2 -> BB45 (if true) | BB38 (if false)
BB45   <- [37]
  val?^ | miss    %45.0 = LdVar              eR    value, e75.0
  void                    Visible            v     
  val?            %45.2 = Force!             !     %45.0, e75.0   <>
  val?            %45.3 = %45.2
  goto BB41
BB38   <- [37]
  val?^ | miss    %38.0 = LdVar              eR    mustFind, e75.0
  void                    Visible            v     
  val?            %38.2 = Force!             !     %38.0, e75.0   <>
  lgl$#-          %38.3 = CheckTrueFalse     we    %38.2
  void                    Branch                   %38.3 -> BB44 (if true) | BB39 (if false)
BB41   <- [45, 40]
  val?            %41.0 = Phi                      %40.2:BB40, %45.3:BB45
  val?            %41.1 = %41.0
  val?            %41.2 = %41.1
  goto BB42
BB44   <- [38]
  (cls|spec|blt)  %44.0 = LdFun              !     stop, e75.0
  prom-           %44.1 = MkArg                    unboundValue, getGeneric[0x55fa0d88e5c0]_p9, e75.0
  val?            %44.2 = NamedCall          !     %44.0(%44.1, domain=na-lgl) e75.0   <>
  val?            %44.3 = %44.2
  goto BB40
BB39   <- [38]
  void                    Visible            v     
  nil-            %39.1 = nil
  goto BB40
BB40   <- [39, 44]
  val?            %40.0 = Phi                      %39.1:BB39, %44.3:BB44
  val?            %40.1 = %40.0
  val?            %40.2 = %40.1
  goto BB41
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    f, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 3:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    package, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 6:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    package, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <>
  void                    Return             l     %0.3
Prom 7:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     c, e0.0
  val?            %0.2  = Call               !     %0.1("methods", "base") e0.0   <>
  void                    Return             l     %0.2
Prom 9:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     gettextf, e0.0
  prom-           %0.2  = MkArg                    unboundValue, getGeneric[0x55fa0d88e5c0]_p10, e0.0
  val?            %0.3  = Call               !     %0.1("no generic function found for %s", %0.2) e0.0   <>
  void                    Return             l     %0.3
Prom 10:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     sQuote, e0.0
  prom-           %0.2  = MkArg                    unboundValue, getGeneric[0x55fa0d88e5c0]_p11, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <>
  void                    Return             l     %0.3
Prom 11:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    f, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <>
  void                    Return             l     %0.3
Prom 12:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     getNamespace, e0.0
  prom-           %0.2  = MkArg                    unboundValue, getGeneric[0x55fa0d88e5c0]_p13, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <>
  void                    StVar              lW    ev, %0.3, e0.0
  (cls|spec|blt)  %0.5  = LdFun              !     .getGeneric, e0.0
  prom-           %0.6  = MkArg                    unboundValue, getGeneric[0x55fa0d88e5c0]_p14, e0.0
  prom-           %0.7  = MkArg                    unboundValue, getGeneric[0x55fa0d88e5c0]_p15, e0.0
  prom-           %0.8  = MkArg                    unboundValue, getGeneric[0x55fa0d88e5c0]_p16, e0.0
  val?            %0.9  = Call               !     %0.5(%0.6, %0.7, %0.8) e0.0   <>
  void                    Return             l     %0.9
Prom 13:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    package, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <>
  void                    Return             l     %0.3
Prom 14:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    f, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <>
  void                    Return             l     %0.3
Prom 15:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    ev, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <>
  void                    Return             l     %0.3
Prom 16:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    package, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <>
  void                    Return             l     %0.3
Prom 17:
BB0
  env             e0.0  = LdFunctionEnv            
  cls             %0.1  = MkCls                    getGeneric@Prom(17)0, e0.0
  void                    Return             l     %0.1
Prom 18:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    package, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <>
  void                    Return             l     %0.3
Prom 19:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     c, e0.0
  val?            %0.2  = Call               !     %0.1("methods", "base") e0.0   <>
  void                    Return             l     %0.2
Prom 20:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    f, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 21:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    value, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 22:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    f, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 23:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    value, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 24:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    f, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 25:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    package, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 26:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    f, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 27:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    f, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <>
  void                    Return             l     %0.3
Prom 28:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     .primname, e0.0
  prom-           %0.2  = MkArg                    unboundValue, getGeneric[0x55fa0d88e5c0]_p29, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <>
  void                    Return             l     %0.3
Prom 29:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    f, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <>
  void                    Return             l     %0.3
Prom 30:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    mustFind, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <>
  void                    Return             l     %0.3
Prom 31:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    name, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 32:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    def, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 33:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    .genericTable, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <env->
  void                    Return             l     %0.3

│ getGeneric[0x55fa0d88e5c0]                                                   │
└──────────────────────────────────────────────────────────────────────────────┘
