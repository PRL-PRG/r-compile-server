
┌──────────────────────────────────────────────────────────────────────────────┐
│ .findInheritedMethods[0x55fa0d0cd1d0]                                        │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch miss: 7                              │
│ Properties:                                                                  │
├────── Final PIR Version
.findInheritedMethods[0x55fa0d0cd1d0]
BB0
  val?^           %0.0  = LdArg                    2
  val?^           %0.1  = LdArg                    1
  val?^           %0.2  = LdArg                    0
  env             e0.3  = MkEnv              l     classes=%0.2, fdef=%0.1, mtable=%0.0, table(miss)=missingArg, excluded(miss)=missingArg, useInherited(miss)=missingArg, simpleOnly(miss)=missingArg, verbose(miss)=missingArg, doCache(miss)=missingArg, where(miss)=missingArg, parent=<env 0x55fa0b35b378>, context 1
  prom-           %0.4  = MkArg                    unboundValue, .findInheritedMethods[0x55fa0d0cd1d0]_p0, e0.3
  val?^ | miss    %0.5  = CastType                 up %0.4
  void                    StArg              lW    table, %0.5, e0.3
  void                    StArg              lW    excluded, nil, e0.3
  prom-           %0.8  = MkArg                    unboundValue, .findInheritedMethods[0x55fa0d0cd1d0]_p4, e0.3
  val?^ | miss    %0.9  = CastType                 up %0.8
  void                    StArg              lW    simpleOnly, %0.9, e0.3
  void                    StArg              lW    verbose, false, e0.3
  prom-           %0.12 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0d0cd1d0]_p7, e0.3
  val?^ | miss    %0.13 = CastType                 up %0.12
  void                    StArg              lW    doCache, %0.13, e0.3
  prom-           %0.15 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0d0cd1d0]_p9, e0.3
  val?^ | miss    %0.16 = CastType                 up %0.15
  void                    StArg              lW    where, %0.16, e0.3
  cls             %0.18 = MkCls                    .findInheritedMethods>plist@677, e0.3
  val?^ | miss    %0.19 = LdVar              eR    .allowPrimitiveMethods, <env 0x55fa0b35b378>
  lgl$#-          %0.20 = Identical                %0.19, function(onOff) <(rir::DispatchTable*)0x55fa0e|...
  void                    Branch                   %0.20 -> BB201 (if true) | BB202 (if false)
BB201   <- [0]
  ct              %201.0 = PushContext        lCL   false, .allowPrimitiveMethods(FALSE), function(onOff) <(rir::DispatchTable*)0x55fa0e|..., e0.3
  val?^ | miss    %201.1 = LdVar              eR    .Call, <env 0x55fa0b35b378>
  lgl$#-          %201.2 = Identical                <blt .Call>, %201.1   <true>
  void                    Branch                   %201.2 -> BB203 (if true) | BB204 (if false)
BB202   <- [0]
  fs              %202.0 = FrameState         R     0x55fa136cd470+0: [], env=e0.3
  void                    Deopt              !v    %202.0, CallTarget@0x55fa0e5780e0[Call#5], %0.19
BB203   <- [201]
  val?^ | miss    %203.0 = LdVar              eR    C_R_M_setPrimitiveMethods, <env 0x55fa0b35b378>
  env             e203.1 = MkEnv              l     onOff=false, code="CLEAR", parent=<env 0x55fa0b35b378>, context 1
  val?            %203.2 = Force!<value>      !v    %203.0, e203.1   <vec>
  val?^ | miss    %203.3 = LdVar              eR    code, e203.1
  val?            %203.4 = Force!<value>      !v    %203.3, e203.1   <str$->
  val?            %203.5 = CallBuiltin        !v    .Call(%203.2, "", nil, %203.4, nil, nil) e203.1   <lgl$->
  lgl$#-          %203.6 = IsType                   %203.5 isA lgl$-
  void                    Branch                   %203.6 -> BB205 (if true) | BB206 (if false)
BB204   <- [201]
  fs              %204.0 = FrameState         R     0x55fa136cd470+32: [], env=e0.3
  env             e204.1 = (MkEnv)            l     onOff=false, parent=<env 0x55fa0b35b378>, context 1
  fs              %204.2 = FrameState         R     0x55fa0b8ac370+15: [false], env=e204.1, next=%204.0
  void                    Deopt              !v    %204.2, DeadBranchReached@0x55fa0f39ccb8[Test#0], %201.2   !
BB205   <- [203]
  lgl$-           %205.0 = CastType           d     dn %203.5
  val?            %205.1 = PopContext         C     %205.0, %201.0   <lgl$->
  lgl$#-          %205.2 = IsType                   %205.1 isA lgl$-
  void                    Branch                   %205.2 -> BB207 (if true) | BB208 (if false)
BB206   <- [203]
  fs              %206.0 = FrameState         R     0x55fa136cd470+32: [], env=e0.3
  fs              %206.1 = FrameState         R     0x55fa0b8ac370+200: [%203.5], env=e203.1, next=%206.0
  void                    Deopt              !v    %206.1, Typecheck@0x55fa0f39ccb8[Type#5], %203.5   !
BB207   <- [205]
  lgl$-           %207.0 = CastType           d     dn %205.1
  void                    StVar              lW    primMethods, %207.0, e0.3
  (cls|spec|blt)  %207.2 = LdFun              !v    on.exit, <0x55fa0ad53270>, e0.3
  prom-           %207.3 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0d0cd1d0]_p11, e0.3
  val?            %207.4 = Call               !v    %207.2(%207.3) e0.3
  val?^ | miss    %207.5 = LdVar              eR    is.environment, e0.3
  lgl$#-          %207.6 = Identical                <blt is.environment>, %207.5   <true>
  void                    Branch                   %207.6 -> BB209 (if true) | BB210 (if false)
BB208   <- [205]
  fs              %208.0 = FrameState         R     0x55fa136cd470+32: [%205.1], env=e0.3
  void                    Deopt              !v    %208.0, Typecheck@0x55fa0e5780e0[Type#9], %205.1   !
BB209   <- [207]
  val?^ | miss    %209.0 = LdVar              eR    table, e0.3
  val?            %209.1 = Force!<lazy>       !v    %209.0, e0.3   <env->
  lgl$#-          %209.2 = CallSafeBuiltin    wed   is.environment(%209.1)    <lgl$->
  void                    Branch                   %209.2 -> BB14 (if true) | BB13 (if false)
BB210   <- [207]
  fs              %210.0 = FrameState         R     0x55fa136cd470+78: [%207.4], env=e0.3
  void                    Deopt              !v    %210.0, DeadBranchReached@0x55fa0e5780e0[Test#0], %207.6   !
BB14   <- [209]
  val?^ | miss    %14.0 = LdVar              eR    length, e0.3
  lgl$#-          %14.1 = Identical                <blt length>, %14.0   <true>
  void                    Branch                   %14.1 -> BB211 (if true) | BB212 (if false)
BB13   <- [209]
  (cls|spec|blt)  %13.0 = LdFun              !v    is, e0.3
  fs              %13.1 = FrameState         R     0x55fa136cd470+192: [%13.0], env=e0.3
  void                    Deopt              !v    %13.1, DeadCall@0x55fa0e5780e0[Call#9], %13.0   !
BB211   <- [14]
  (cls|spec|blt)  %211.0 = LdFun              !v    @, <0x55fa0ad53bd8>, e0.3
  prom-           %211.1 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0d0cd1d0]_p13, e0.3
  prom-           %211.2 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0d0cd1d0]_p14, e0.3
  val?            %211.3 = Call               !v    %211.0(%211.1, %211.2) e0.3   <vec->
  lgl$#-          %211.4 = IsType                   %211.3 isA val?-
  void                    Branch                   %211.4 -> BB213 (if true) | BB214 (if false)
BB212   <- [14]
  fs              %212.0 = FrameState         R     0x55fa136cd470+170: [%209.2], env=e0.3
  void                    Deopt              !v    %212.0, DeadBranchReached@0x55fa0e5780e0[Test#1], %14.1   !
BB213   <- [211]
  val?-           %213.0 = CastType           d     dn %211.3   <vec->
  (int|real)$-    %213.1 = CallSafeBuiltin    wed   length(%213.0)    <int$->
  lgl$#-          %213.2 = IsType                   %213.1 isA int$-
  void                    Branch                   %213.2 -> BB215 (if true) | BB216 (if false)
BB214   <- [211]
  fs              %214.0 = FrameState         R     0x55fa136cd470+416: [<blt length>, %211.3], env=e0.3
  void                    Deopt              !v    %214.0, Typecheck@0x55fa0e5780e0[Type#27], %211.3   !
BB215   <- [213]
  int$-           %215.0 = CastType           d     dn %213.1
  lgl$-           %215.1 = Gt                 d     %215.0, 0L, elided   <lgl$->
  void                    StVar              lW    hasGroup, %215.1, e0.3
  lgl$#-          %215.3 = CheckTrueFalse     e     %215.1
  void                    Branch                   %215.3 -> BB199 (if true) | BB21 (if false)
BB216   <- [213]
  fs              %216.0 = FrameState         R     0x55fa136cd470+438: [%213.1], env=e0.3
  void                    Deopt              !v    %216.0, Typecheck@0x55fa0e5780e0[Type#28], %213.1   !
BB199   <- [215]
  (cls|spec|blt)  %199.0 = LdFun              !v    .getAllGroups, e0.3
  fs              %199.1 = FrameState         R     0x55fa136cd470+494: [%199.0], env=e0.3
  void                    Deopt              !v    %199.1, DeadCall@0x55fa0e5780e0[Call#18], %199.0   !
BB21   <- [215]
  val?^ | miss    %21.0 = LdVar              eR    length, e0.3
  lgl$#-          %21.1 = Identical                <blt length>, %21.0   <true>
  void                    Branch                   %21.1 -> BB217 (if true) | BB218 (if false)
BB217   <- [21]
  val?^ | miss    %217.0 = LdVar              eR    excluded, e0.3
  val?            %217.1 = Force!<lazy>       !v    %217.0, e0.3   <nil->
  lgl$#-          %217.2 = IsType                   %217.1 isA val?-
  void                    Branch                   %217.2 -> BB219 (if true) | BB220 (if false)
BB218   <- [21]
  fs              %218.0 = FrameState         R     0x55fa136cd470+464: [], env=e0.3
  void                    Deopt              !v    %218.0, DeadBranchReached@0x55fa0e5780e0[Test#2], %21.1   !
BB219   <- [217]
  val?-           %219.0 = CastType           d     dn %217.1   <nil->
  (int|real)$-    %219.1 = CallSafeBuiltin    wed   length(%219.0)    <int$->
  lgl$#-          %219.2 = IsType                   %219.1 isA int$-
  void                    Branch                   %219.2 -> BB221 (if true) | BB222 (if false)
BB220   <- [217]
  fs              %220.0 = FrameState         R     0x55fa136cd470+604: [<blt length>, %217.1], env=e0.3
  void                    Deopt              !v    %220.0, Typecheck@0x55fa0e5780e0[Type#35], %217.1   !
BB221   <- [219]
  int$-           %221.0 = CastType           d     dn %219.1
  lgl$-           %221.1 = Gt                 d     %221.0, 0L, elided   <lgl$->
  void                    StVar              lW    doExcluded, %221.1, e0.3
  val?^ | miss    %221.3 = LdVar              eR    verbose, e0.3
  val?            %221.4 = Force!<lazy>       !v    %221.3, e0.3   <lgl$->
  lgl$#-          %221.5 = CheckTrueFalse     we    %221.4
  void                    Branch                   %221.5 -> BB198 (if true) | BB28 (if false)
BB222   <- [219]
  fs              %222.0 = FrameState         R     0x55fa136cd470+626: [%219.1], env=e0.3
  void                    Deopt              !v    %222.0, Typecheck@0x55fa0e5780e0[Type#36], %219.1   !
BB198   <- [221]
  void                    StVar              lW    plist, %0.18, e0.3
  (cls|spec|blt)  %198.1 = LdFun              !v    cat, e0.3
  fs              %198.2 = FrameState         R     0x55fa136cd470+707: [%198.1], env=e0.3
  void                    Deopt              !v    %198.2, DeadCall@0x55fa0e5780e0[Call#21], %198.1   !
BB28   <- [221]
  val?^ | miss    %28.0 = LdVar              eR    length, e0.3
  lgl$#-          %28.1 = Identical                <blt length>, %28.0   <true>
  void                    Branch                   %28.1 -> BB223 (if true) | BB224 (if false)
BB223   <- [28]
  val?^ | miss    %223.0 = LdVar              eR    classes, e0.3
  val?            %223.1 = Force!<lazy>       !v    %223.0, e0.3   <vec$->
  lgl$#-          %223.2 = IsType                   %223.1 isA val?-
  void                    Branch                   %223.2 -> BB225 (if true) | BB226 (if false)
BB224   <- [28]
  fs              %224.0 = FrameState         R     0x55fa136cd470+667: [%221.5], env=e0.3
  void                    Deopt              !v    %224.0, DeadBranchReached@0x55fa0e5780e0[Test#4], %28.1   !
BB225   <- [223]
  val?-           %225.0 = CastType           d     dn %223.1   <vec$->
  (int|real)$-    %225.1 = CallSafeBuiltin    wed   length(%225.0)    <int$->
  lgl$#-          %225.2 = IsType                   %225.1 isA int$-
  void                    Branch                   %225.2 -> BB227 (if true) | BB228 (if false)
BB226   <- [223]
  fs              %226.0 = FrameState         R     0x55fa136cd470+844: [<blt length>, %223.1], env=e0.3
  void                    Deopt              !v    %226.0, Typecheck@0x55fa0e5780e0[Type#60], %223.1   !
BB227   <- [225]
  int$-           %227.0 = CastType           d     dn %225.1
  void                    StVar              lW    nargs, %227.0, e0.3
  lgl$-           %227.2 = Missing            eR    useInherited, e0.3
  lgl$-           %227.3 = Not                d     %227.2, elided
  lgl$-           %227.4 = AsLogical                %227.3
  lgl$#-          %227.5 = Identical                %227.4, false
  void                    Branch                   %227.5 -> BB197 (if true) | BB33 (if false)
BB228   <- [225]
  fs              %228.0 = FrameState         R     0x55fa136cd470+866: [%225.1], env=e0.3
  void                    Deopt              !v    %228.0, Typecheck@0x55fa0e5780e0[Type#61], %225.1   !
BB197   <- [227]
  void                    Nop                !     
  lgl$-           %197.1 = %227.4
  goto BB40
BB33   <- [227]
  val?^ | miss    %33.0 = LdVar              eR    length, e0.3
  lgl$#-          %33.1 = Identical                <blt length>, %33.0   <@?>
  void                    Branch                   %33.1 -> BB35 (if true) | BB34 (if false)
BB40   <- [197, 231]
  lgl$-           %40.0 = Phi                      %231.4:BB231, %197.1:BB197
  lgl$-           %40.1 = %40.0
  lgl$#-          %40.2 = CheckTrueFalse     e     %40.1
  void                    Branch                   %40.2 -> BB196 (if true) | BB43 (if false)
BB35   <- [33]
  val?^ | miss    %35.0 = LdVar              eR    useInherited, e0.3
  val?            %35.1 = Force!             !v    %35.0, e0.3   <val?_>
  lgl$#-          %35.2 = IsType                   %35.1 isA val?+
  void                    Branch                   %35.2 -> BB229 (if true) | BB230 (if false)
BB34   <- [33]
  (cls|spec|blt)  %34.0 = LdFun              !v    length, e0.3
  fs              %34.1 = FrameState         R     0x55fa136cd470+922: [%227.4, %34.0], env=e0.3
  void                    Deopt              !v    %34.1, DeadCall@0x55fa0e5780e0[Call#31], %34.0   !
BB196   <- [40]
  (cls|spec|blt)  %196.0 = LdFun              !v    rep, e0.3
  fs              %196.1 = FrameState         R     0x55fa136cd470+1028: [%196.0], env=e0.3
  void                    Deopt              !v    %196.1, DeadCall@0x55fa0e5780e0[Call#32], %196.0   !
BB43   <- [40]
  val?^ | miss    %43.0 = LdVar              eR    hasGroup, e0.3
  lgl$#-          %43.1 = IsType                   %43.0 isA lgl$-
  void                    Branch                   %43.1 -> BB233 (if true) | BB234 (if false)
BB229   <- [35]
  val?+           %229.0 = CastType           d     dn %35.1   <val?_>
  (int|real)$-    %229.1 = CallSafeBuiltin    wed   length(%229.0)    <val?_>
  val?^ | miss    %229.2 = LdVar              eR    nargs, e0.3
  val?            %229.3 = Force!             !v    %229.2, e0.3   <val?_>
  lgl$#-          %229.4 = IsType                   %229.3 isA val?+
  void                    Branch                   %229.4 -> BB231 (if true) | BB232 (if false)
BB230   <- [35]
  fs              %230.0 = FrameState         R     0x55fa136cd470+963: [%227.4, <blt length>, %35.1], env=e0.3
  void                    Deopt              !v    %230.0, Typecheck@0x55fa0e5780e0[Type#63], %35.1   !
BB233   <- [43]
  lgl$-           %233.0 = CastType           d     dn %43.0
  lgl$-           %233.1 = AsLogical                %233.0
  lgl$#-          %233.2 = Identical                %233.1, false
  void                    Branch                   %233.2 -> BB195 (if true) | BB44 (if false)
BB234   <- [43]
  fs              %234.0 = FrameState         R     0x55fa136cd470+1012: [%40.1], env=e0.3
  void                    Deopt              !v    %234.0, Typecheck@0x55fa0e5780e0[Type#70], %43.0   !
BB231   <- [229]
  val?+           %231.0 = CastType           d     dn %229.3   <val?_>
  lgl             %231.1 = Lt                 wed   %229.1, %231.0, elided   <val?_>
  lgl$-           %231.2 = AsLogical          e     %231.1
  lgl$-           %231.3 = LAnd                     %227.4, %231.2
  lgl$-           %231.4 = %231.3
  goto BB40
BB232   <- [229]
  fs              %232.0 = FrameState         R     0x55fa136cd470+999: [%227.4, %229.1, %229.3], env=e0.3
  void                    Deopt              !v    %232.0, Typecheck@0x55fa0e5780e0[Type#65], %229.3   !
BB195   <- [233]
  void                    Nop                !     
  lgl$-           %195.1 = %233.1
  goto BB47
BB44   <- [233]
  val?^ | miss    %44.0 = LdVar              eR    doExcluded, e0.3
  val?            %44.1 = Force!             !v    %44.0, e0.3   <val?_>
  lgl$#-          %44.2 = IsType                   %44.1 isA val?+
  void                    Branch                   %44.2 -> BB235 (if true) | BB236 (if false)
BB47   <- [195, 235]
  lgl$-           %47.0 = Phi                      %235.4:BB235, %195.1:BB195
  lgl$-           %47.1 = %47.0
  lgl$#-          %47.2 = CheckTrueFalse     e     %47.1
  void                    Branch                   %47.2 -> BB194 (if true) | BB48 (if false)
BB235   <- [44]
  val?+           %235.0 = CastType           d     dn %44.1   <val?_>
  lgl             %235.1 = Not                wed   %235.0, elided
  lgl$-           %235.2 = AsLogical          e     %235.1
  lgl$-           %235.3 = LAnd                     %233.1, %235.2
  lgl$-           %235.4 = %235.3
  goto BB47
BB236   <- [44]
  fs              %236.0 = FrameState         R     0x55fa136cd470+1112: [%233.1, %44.1], env=e0.3
  void                    Deopt              !v    %236.0, Typecheck@0x55fa0e5780e0[Type#71], %44.1   !
BB194   <- [47]
  (cls|spec|blt)  %194.0 = LdFun              !v    .sigLabel, e0.3
  fs              %194.1 = FrameState         R     0x55fa136cd470+1136: [%194.0], env=e0.3
  void                    Deopt              !v    %194.1, DeadCall@0x55fa0e5780e0[Call#33], %194.0   !
BB48   <- [47]
  val?^ | miss    %48.0 = LdVar              eR    classes, e0.3
  val?            %48.1 = Force!<wrapped>    !v    %48.0, e0.3   <vec$->
  lgl$#-          %48.2 = IsType                   %48.1 isA val+   <true>
  lgl$#-          %48.3 = IsType                   %48.1 isA val?-
  void                    Branch                   %48.2 -> BB237 (if true) | BB238 (if false)
BB237   <- [48]
  void                    Branch                   %48.3 -> BB239 (if true) | BB240 (if false)
BB238   <- [48]
  void                    Nop                !     
  lgl$#-          %238.1 = %48.2
  dr              %238.2 = DeadBranchReached@0x55fa0e5780e0[Test#8]
  goto BB49
BB239   <- [237]
  val?-           %239.0 = CastType           d     dn %48.1   <vec$->
  val?            %239.1 = Extract2_1D        wed   %239.0, 1L, elided   <str$+>
  void                    StVar              lW    cl1, %239.1, e0.3
  val?^ | miss    %239.3 = LdVar              eR    getClass, e0.3
  lgl$#-          %239.4 = Identical                %239.3, function(Class, .Force=FALSE, where=.classEnv(|...
  void                    Branch                   %239.4 -> BB241 (if true) | BB242 (if false)
BB240   <- [237]
  void                    Nop                !     
  val?            %240.1 = %48.1
  dr              %240.2 = Typecheck@0x55fa0e5780e0[Type#86]
  goto BB49
BB49   <- [238, 240]
  val?^ | miss    %49.0 = Phi                      %238.1:BB238, %240.1:BB240
  val?^ | miss    %49.1 = %49.0
  dr              %49.2 = Phi                      %238.2:BB238, %240.2:BB240
  dr              %49.3 = %49.2
  fs              %49.4 = FrameState         R     0x55fa136cd470+1444: [%48.1], env=e0.3
  void                    Deopt              !v    %49.4, %49.3, %49.1   !
BB241   <- [239]
  prom-           %241.0 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0d0cd1d0]_p15 (!refl), e0.3
  prom-           %241.1 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0d0cd1d0]_p16, e0.3
  val?            %241.2 = StaticCall         !v    getClass[0x55fa11c454a0](%241.0, true, %241.1) { 0 2n 1n } e0.3   <other>
  void                    StVar              lW    def, %241.2, e0.3
  lgl$-           %241.4 = Missing            eR    useInherited, e0.3
  lgl$-           %241.5 = AsLogical                %241.4
  lgl$#-          %241.6 = Identical                %241.5, true
  void                    Branch                   %241.6 -> BB193 (if true) | BB53 (if false)
BB242   <- [239]
  fs              %242.0 = FrameState         R     0x55fa136cd470+1502: [], env=e0.3
  void                    Deopt              !v    %242.0, CallTarget@0x55fa0e5780e0[Call#37], %239.3   !
BB193   <- [241]
  void                    Nop                !     
  lgl$-           %193.1 = %241.5
  goto BB56
BB53   <- [241]
  val?^ | miss    %53.0 = LdVar              eR    useInherited, e0.3
  val?            %53.1 = Force!             !v    %53.0, e0.3   <val?_>
  lgl$#-          %53.2 = IsType                   %53.1 isA val?+
  void                    Branch                   %53.2 -> BB243 (if true) | BB244 (if false)
BB56   <- [193, 243]
  lgl$-           %56.0 = Phi                      %243.4:BB243, %193.1:BB193
  lgl$-           %56.1 = %56.0
  lgl$#-          %56.2 = CheckTrueFalse     e     %56.1
  void                    Branch                   %56.2 -> BB177 (if true) | BB59 (if false)
BB243   <- [53]
  val?+           %243.0 = CastType           d     dn %53.1   <val?_>
  val?            %243.1 = Extract2_1D        wed   %243.0, 1L, elided   <val?_>
  lgl$-           %243.2 = AsLogical          e     %243.1
  lgl$-           %243.3 = LOr                      %241.5, %243.2
  lgl$-           %243.4 = %243.3
  goto BB56
BB244   <- [53]
  fs              %244.0 = FrameState         R     0x55fa136cd470+1592: [%241.5, %53.1], env=e0.3
  void                    Deopt              !v    %244.0, Typecheck@0x55fa0e5780e0[Type#91], %53.1   !
BB177   <- [56]
  val?^ | miss    %177.0 = LdVar              eR    c, e0.3
  lgl$#-          %177.1 = Identical                <blt c>, %177.0   <true>
  void                    Branch                   %177.1 -> BB245 (if true) | BB246 (if false)
BB59   <- [56]
  val?^ | miss    %59.0 = LdVar              eR    cl1, e0.3
  val?            %59.1 = Force!             !v    %59.0, e0.3   <val?_>
  val?            %59.2 = %59.1
  goto BB60
BB245   <- [177]
  val?^ | miss    %245.0 = LdVar              eR    cl1, e0.3
  lgl$#-          %245.1 = IsType                   %245.0 isA val?~+ | miss
  void                    Branch                   %245.1 -> BB247 (if true) | BB248 (if false)
BB246   <- [177]
  void                    Nop                !     
  lgl$#-          %246.1 = %177.1
  dr              %246.2 = DeadBranchReached@0x55fa0e5780e0[Test#10]
  goto BB57
BB60   <- [59, 281]
  val?            %60.0 = Phi                      %59.2:BB59, %281.2:BB281   <str->
  val?            %60.1 = %60.0
  void                    StVar              lW    labels, %60.1, e0.3
  val?^ | miss    %60.3 = LdVar              eR    list, e0.3
  lgl$#-          %60.4 = Identical                <blt list>, %60.3   <true>
  void                    Branch                   %60.4 -> BB249 (if true) | BB250 (if false)
BB247   <- [245]
  val?~+ | miss   %247.0 = CastType           d     dn %245.0
  val?+           %247.1 = Force!<value>            %247.0,    <str$+>
  val?^ | miss    %247.2 = LdVar              eR    .eligibleSuperClasses, e0.3
  lgl$#-          %247.3 = Identical                %247.2, function(contains, simpleOnly) <(rir::Dispatch|...
  void                    Branch                   %247.3 -> BB255 (if true) | BB256 (if false)
BB248   <- [245]
  void                    Nop                !     
  val?^ | miss    %248.1 = %245.0
  dr              %248.2 = Typecheck@0x55fa0e5780e0[Type#100]
  goto BB57
BB57   <- [246, 248, 256]
  val?^ | miss    %57.0 = Phi                      %246.1:BB246, %248.1:BB248, %256.1:BB256
  val?^ | miss    %57.1 = %57.0
  dr              %57.2 = Phi                      %246.2:BB246, %248.2:BB248, %256.2:BB256
  dr              %57.3 = %57.2
  fs              %57.4 = FrameState         R     0x55fa136cd470+1643: [%56.1], env=e0.3
  void                    Deopt              !v    %57.4, %57.3, %57.1   !
BB249   <- [60]
  val             %249.0 = ChkMissing         e     %60.1
  val+            %249.1 = CallSafeBuiltin    wed   list(%60.1)    <vec$->
  void                    StVar              lW    supersList, %249.1, e0.3
  val?^ | miss    %249.3 = LdVar              eR    vector, e0.3
  lgl$#-          %249.4 = Identical                %249.3, function(mode="logical", length=0L) <(rir::Dis|...
  void                    Branch                   %249.4 -> BB251 (if true) | BB252 (if false)
BB250   <- [60]
  fs              %250.0 = FrameState         R     0x55fa136cd470+1831: [], env=e0.3
  void                    Deopt              !v    %250.0, DeadBranchReached@0x55fa0e5780e0[Test#11], %60.4   !
BB255   <- [247]
  prom-           %255.0 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0d0cd1d0]_p80, e0.3
  prom-           %255.1 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0d0cd1d0]_p83, e0.3
  ct              %255.2 = PushContext        lCL   %255.0, %255.1, .eligibleSuperClasses(@(def, contains), simple|..., function(contains, simpleOnly) <(rir::Dispatch|..., e0.3
  val?^           %255.3 = CastType                 up %255.1
  val?^           %255.4 = CastType                 up %255.0
  val?^ | miss    %255.5 = LdVar              eR    names, <env 0x55fa0b35b378>
  lgl$#-          %255.6 = Identical                <blt names>, %255.5   <true>
  void                    Branch                   %255.6 -> BB259 (if true) | BB260 (if false)
BB256   <- [247]
  void                    Nop                !     
  val?^ | miss    %256.1 = %247.2
  dr              %256.2 = CallTarget@0x55fa0e5780e0[Call#41]
  goto BB57
BB251   <- [249]
  val?^ | miss    %251.0 = LdVar              eR    nargs, e0.3
  lgl$#-          %251.1 = IsType                   %251.0 isA int$-
  void                    Branch                   %251.1 -> BB253 (if true) | BB254 (if false)
BB252   <- [249]
  void                    Nop                !     
  val?^ | miss    %252.1 = %249.3
  dr              %252.2 = CallTarget@0x55fa0e5780e0[Call#44]
  goto BB63
BB259   <- [255]
  env             e259.0 = MkEnv              l     contains=%255.4, simpleOnly=%255.3, parent=<env 0x55fa0b35b378>, context 1
  val?            %259.1 = Force!<lazy>       !vL   %255.4, e259.0   <vec+>
  lgl$#-          %259.2 = IsType                   %259.1 isA val?+
  void                    Branch                   %259.2 -> BB261 (if true) | BB262 (if false)
BB260   <- [255]
  fs              %260.0 = FrameState         R     0x55fa136cd470+1789: [<blt c>, %247.1], env=e0.3
  env             e260.1 = (MkEnv)            l     contains=%255.4, simpleOnly=%255.3, parent=<env 0x55fa0b35b378>, context 1
  fs              %260.2 = FrameState         R     0x55fa106a07f0+17: [<blt names>, %255.6], env=e260.1, next=%260.0
  void                    Deopt              !v    %260.2, DeadBranchReached@0x55fa11c90868[Test#0], %255.6   !
BB253   <- [251]
  int$-           %253.0 = CastType           d     dn %251.0
  vec-            %253.1 = CallSafeBuiltin    wed   vector("list", %253.0)    <vec$->
  void                    StVar              lW    classDefs, %253.1, e0.3
  val?^ | miss    %253.3 = LdVar              eR    def, e0.3
  val?            %253.4 = Force!<value>      !v    %253.3, e0.3   <other>
  val?^ | miss    %253.5 = LdVar              eR    classDefs !upd, e0.3
  lgl$#-          %253.6 = IsType                   %253.5 isA val?~- | miss
  void                    Branch                   %253.6 -> BB257 (if true) | BB258 (if false)
BB254   <- [251]
  void                    Nop                !     
  val?^ | miss    %254.1 = %251.0
  dr              %254.2 = Typecheck@0x55fa0e5780e0[Type#110]
  goto BB63
BB63   <- [252, 254]
  val?^ | miss    %63.0 = Phi                      %252.1:BB252, %254.1:BB254
  val?^ | miss    %63.1 = %63.0
  dr              %63.2 = Phi                      %252.2:BB252, %254.2:BB254
  dr              %63.3 = %63.2
  fs              %63.4 = FrameState         R     0x55fa136cd470+1936: [], env=e0.3
  void                    Deopt              !v    %63.4, %63.3, %63.1   !
BB261   <- [259]
  val?+           %261.0 = CastType           d     dn %259.1   <vec+>
  val+            %261.1 = CallSafeBuiltin    wed   names(%261.0)    <str->
  void                    StVar              lW    what, %261.1, e259.0
  val?^ | miss    %261.3 = LdVar              eR    length, <env 0x55fa0b35b378>
  lgl$#-          %261.4 = Identical                <blt length>, %261.3   <true>
  void                    Branch                   %261.4 -> BB265 (if true) | BB266 (if false)
BB262   <- [259]
  fs              %262.0 = FrameState         R     0x55fa136cd470+1789: [<blt c>, %247.1], env=e0.3
  fs              %262.1 = FrameState         R     0x55fa106a07f0+69: [<blt names>, %259.1], env=e259.0, next=%262.0
  void                    Deopt              !v    %262.1, Typecheck@0x55fa11c90868[Type#1], %259.1   !
BB257   <- [253]
  val?~- | miss   %257.0 = CastType           d     dn %253.5
  val?-           %257.1 = Force!<value>            %257.0,    <vec$->
  val?            %257.2 = Subassign2_1D      !v    %253.4, %257.1, 1L, e0.3
  void                    StVar              lW    classDefs, %257.2, e0.3
  val?^ | miss    %257.4 = LdVar              eR    nargs, e0.3
  lgl$#-          %257.5 = IsType                   %257.4 isA int$-
  void                    Branch                   %257.5 -> BB263 (if true) | BB264 (if false)
BB258   <- [253]
  fs              %258.0 = FrameState         R     0x55fa136cd470+1996: [%253.4], env=e0.3
  void                    Deopt              !v    %258.0, Typecheck@0x55fa0e5780e0[Type#113], %253.5   !
BB265   <- [261]
  (int|real)$-    %265.0 = CallSafeBuiltin    wed   length(%261.1)    <int$->
  lgl$#-          %265.1 = IsType                   %265.0 isA int$-
  void                    Branch                   %265.1 -> BB271 (if true) | BB272 (if false)
BB266   <- [261]
  fs              %266.0 = FrameState         R     0x55fa136cd470+1789: [<blt c>, %247.1], env=e0.3
  fs              %266.1 = FrameState         R     0x55fa106a07f0+105: [], env=e259.0, next=%266.0
  void                    Deopt              !v    %266.1, DeadBranchReached@0x55fa11c90868[Test#1], %261.4   !
BB263   <- [257]
  int$-           %263.0 = CastType           d     dn %257.4
  lgl$-           %263.1 = Gt                 d     %263.0, 1, elided   <lgl$->
  lgl$#-          %263.2 = CheckTrueFalse     e     %263.1
  void                    Branch                   %263.2 -> BB169 (if true) | BB69 (if false)
BB264   <- [257]
  fs              %264.0 = FrameState         R     0x55fa136cd470+2031: [], env=e0.3
  void                    Deopt              !v    %264.0, Typecheck@0x55fa0e5780e0[Type#114], %257.4   !
BB271   <- [265]
  int$-           %271.0 = CastType           d     dn %265.0
  lgl$-           %271.1 = Not                d     %271.0, elided
  lgl$#-          %271.2 = CheckTrueFalse     e     %271.1
  void                    Branch                   %271.2 -> BB192 (if true) | BB186 (if false)
BB272   <- [265]
  void                    Nop                !     
  (int|real)$-    %272.1 = %265.0
  dr              %272.2 = Typecheck@0x55fa11c90868[Type#5]
  goto BB184
BB169   <- [263]
  lgl$#-          %169.0 = ColonInputEffects        2, %263.0   <@?>
  void                    Branch                   %169.0 -> BB171 (if true) | BB170 (if false)
BB69   <- [263]
  void                    Nop                !     
  goto BB70
BB192   <- [271]
  void                    Nop                !     
  val+            %192.1 = %261.1
  goto BB189
BB186   <- [271]
  val?^ | miss    %186.0 = LdVar              eR    vapply, <env 0x55fa0b35b378>
  lgl$#-          %186.1 = Identical                %186.0, function(X, FUN, FUN.VALUE, ..., USE.NAMES=TRU|...
  void                    Branch                   %186.1 -> BB273 (if true) | BB274 (if false)
BB184   <- [272, 274]
  val?^ | miss    %184.0 = Phi                      %272.1:BB272, %274.1:BB274
  val?^ | miss    %184.1 = %184.0
  dr              %184.2 = Phi                      %272.2:BB272, %274.2:BB274
  dr              %184.3 = %184.2
  fs              %184.4 = FrameState         R     0x55fa136cd470+1789: [<blt c>, %247.1], env=e0.3
  fs              %184.5 = FrameState         R     0x55fa106a07f0+196: [%265.0], env=e259.0, next=%184.4
  void                    Deopt              !v    %184.5, %184.3, %184.1   !
BB171   <- [169]
  int$#-          %171.0 = ColonCastRhs       e     2L, %263.0   <val?_>
  lgl$#-          %171.1 = Lte                d     2L, %171.0, elided   <@?>
  void                    Branch                   %171.1 -> BB176 (if true) | BB172 (if false)
BB170   <- [169]
  int-            %170.0 = Colon              d     2L, %263.0, elided
  (cls|spec|blt)  %170.1 = LdFun              !v    for, e0.3
  prom-           %170.2 = MkArg                    %170.0, .findInheritedMethods[0x55fa0d0cd1d0]_p59 (!refl), e0.3
  prom-           %170.3 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0d0cd1d0]_p60, e0.3
  val?            %170.4 = Call               !v    %170.1(%170.2, %170.3) e0.3
  goto BB70
BB70   <- [69, 174, 170]
  val?^ | miss    %70.0 = LdVar              eR    labels, e0.3
  lgl$#-          %70.1 = IsType                   %70.0 isA val?~- | miss
  void                    Branch                   %70.1 -> BB267 (if true) | BB268 (if false)
BB189   <- [192, 283]
  val?            %189.0 = Phi                      %283.2:BB283, %192.1:BB192
  val?            %189.1 = %189.0
  val?            %189.2 = PopContext         C     %189.1, %255.2   <str->
  lgl$#-          %189.3 = IsType                   %189.2 isA val?-
  void                    Branch                   %189.3 -> BB281 (if true) | BB282 (if false)
BB273   <- [186]
  prom-           %273.0 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0d0cd1d0]_p84, e259.0
  prom-           %273.1 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0d0cd1d0]_p85, e259.0
  val?            %273.2 = StaticCall         !v    vapply[0x55fa0ebb4750](%273.0, %273.1, na-lgl) { 0 1 2 } e259.0   <lgl+>
  void                    StVar              lW    eligible, %273.2, e259.0
  val?^ | miss    %273.4 = LdVar              eR    what, e259.0
  lgl$#-          %273.5 = IsType                   %273.4 isA val?~- | miss
  void                    Branch                   %273.5 -> BB275 (if true) | BB276 (if false)
BB274   <- [186]
  void                    Nop                !     
  val?^ | miss    %274.1 = %186.0
  dr              %274.2 = CallTarget@0x55fa11c90868[Call#2]
  goto BB184
BB176   <- [171]
  void                    Nop                !     
  int$#-          %176.1 = 1L
  goto BB173
BB172   <- [171]
  void                    Nop                !     
  int$#-          %172.1 = -1L
  goto BB173
BB267   <- [70]
  val?~- | miss   %267.0 = CastType           d     dn %70.0
  val?-           %267.1 = Force!<value>            %267.0,    <str->
  lgl$#-          %267.2 = IsType                   %267.1 isA val+   <true>
  void                    Branch                   %267.2 -> BB269 (if true) | BB270 (if false)
BB268   <- [70]
  void                    Nop                !     
  val?^ | miss    %268.1 = %70.0
  dr              %268.2 = Typecheck@0x55fa0e5780e0[Type#238]
  goto BB71
BB281   <- [189]
  val?-           %281.0 = CastType           d     dn %189.2   <str->
  (list|sym|char|lgl|int|real|str|vec|complex|raw|cls|spec|blt|prom|_|code|env|ast|expressions|dots|other)+ %281.1 = CallSafeBuiltin    wed   c(%247.1, %281.0, "ANY")    <str->
  (list|sym|char|lgl|int|real|str|vec|complex|raw|cls|spec|blt|prom|_|code|env|ast|expressions|dots|other)+ %281.2 = %281.1
  goto BB60
BB282   <- [189]
  fs              %282.0 = FrameState         R     0x55fa136cd470+1789: [<blt c>, %247.1, %189.2], env=e0.3
  void                    Deopt              !v    %282.0, Typecheck@0x55fa0e5780e0[Type#105], %189.2   !
BB275   <- [273]
  val?~- | miss   %275.0 = CastType           d     dn %273.4
  val?-           %275.1 = Force!<value>            %275.0,    <str->
  lgl$#-          %275.2 = IsType                   %275.1 isA val+   <true>
  void                    Branch                   %275.2 -> BB279 (if true) | BB280 (if false)
BB276   <- [273]
  void                    Nop                !     
  val?^ | miss    %276.1 = %273.4
  dr              %276.2 = Typecheck@0x55fa11c90868[Type#9]
  goto BB187
BB173   <- [176, 172]
  int$#-          %173.0 = Phi                      %176.1:BB176, %172.1:BB172
  int$#-          %173.1 = %173.0
  lgl$#-          %173.2 = Neq                d     %171.0, 2L, elided   <@?>
  void                    Branch                   %173.2 -> BB175 (if true) | BB174 (if false)
BB269   <- [267]
  val?            %269.0 = Extract1_1D        wed   %267.1, -1L, elided   <str->
  void                    StVar              lW    labels, %269.0, e0.3
  val?^ | miss    %269.2 = LdVar              eR    unique, e0.3
  lgl$#-          %269.3 = Identical                %269.2, function(x, incomparables=FALSE, ...) <(rir::D|...
  void                    Branch                   %269.3 -> BB277 (if true) | BB278 (if false)
BB270   <- [267]
  void                    Nop                !     
  lgl$#-          %270.1 = %267.2
  dr              %270.2 = DeadBranchReached@0x55fa0e5780e0[Test#27]
  goto BB71
BB71   <- [268, 270]
  val?^ | miss    %71.0 = Phi                      %268.1:BB268, %270.1:BB270
  val?^ | miss    %71.1 = %71.0
  dr              %71.2 = Phi                      %268.2:BB268, %270.2:BB270
  dr              %71.3 = %71.2
  fs              %71.4 = FrameState         R     0x55fa136cd470+3635: [], env=e0.3
  void                    Deopt              !v    %71.4, %71.3, %71.1   !
BB279   <- [275]
  val             %279.0 = ChkMissing         e     %273.2
  lgl$#-          %279.1 = IsType                   %279.0 isA lgl+
  void                    Branch                   %279.1 -> BB283 (if true) | BB284 (if false)
BB280   <- [275]
  void                    Nop                !     
  lgl$#-          %280.1 = %275.2
  dr              %280.2 = DeadBranchReached@0x55fa11c90868[Test#2]
  goto BB187
BB187   <- [276, 280, 284]
  val?^ | miss    %187.0 = Phi                      %276.1:BB276, %280.1:BB280, %284.1:BB284
  val?^ | miss    %187.1 = %187.0
  dr              %187.2 = Phi                      %276.2:BB276, %280.2:BB280, %284.2:BB284
  dr              %187.3 = %187.2
  fs              %187.4 = FrameState         R     0x55fa136cd470+1789: [<blt c>, %247.1], env=e0.3
  fs              %187.5 = FrameState         R     0x55fa106a07f0+264: [], env=e259.0, next=%187.4
  void                    Deopt              !v    %187.5, %187.3, %187.1   !
BB175   <- [173]
  void                    StVar              lW    i, 2L, e0.3
  int$-           %175.1 = Add                d     2L, %173.1, elided
  (cls|spec|blt)  %175.2 = LdFun              !v    getClass, e0.3
  fs              %175.3 = FrameState         R     0x55fa136cd470+2224: [%173.1, %171.0, %175.1, %175.2], env=e0.3
  void                    Deopt              !v    %175.3, DeadCall@0x55fa0e5780e0[Call#54], %175.2   !
BB174   <- [173]
  void                    Nop                !     
  goto BB70
BB277   <- [269]
  val             %277.0 = ChkMissing         e     %269.0
  val?            %277.1 = StaticCall         !v    unique[0x55fa11a70400](%269.0) { 0 } e0.3   <str->
  void                    StVar              lW    labels, %277.1, e0.3
  val?^ | miss    %277.3 = LdVar              eR    verbose, e0.3
  val?            %277.4 = Force!<wrapped>    !v    %277.3, e0.3   <lgl$->
  lgl$#-          %277.5 = CheckTrueFalse     we    %277.4
  void                    Branch                   %277.5 -> BB168 (if true) | BB77 (if false)
BB278   <- [269]
  fs              %278.0 = FrameState         R     0x55fa136cd470+3703: [], env=e0.3
  void                    Deopt              !v    %278.0, CallTarget@0x55fa0e5780e0[Call#80], %269.2   !
BB283   <- [279]
  lgl+            %283.0 = CastType           d     dn %279.0
  val?            %283.1 = Extract1_1D        wed   %275.1, %283.0, elided   <str->
  val?            %283.2 = %283.1
  goto BB189
BB284   <- [279]
  void                    Nop                !     
  val             %284.1 = %279.0
  dr              %284.2 = Typecheck@0x55fa11c90868[Type#11]
  goto BB187
BB168   <- [277]
  (cls|spec|blt)  %168.0 = LdFun              !v    cat, e0.3
  fs              %168.1 = FrameState         R     0x55fa136cd470+3779: [%168.0], env=e0.3
  void                    Deopt              !v    %168.1, DeadCall@0x55fa0e5780e0[Call#81], %168.0   !
BB77   <- [277]
  val?^ | miss    %77.0 = LdVar              eR    names, e0.3
  lgl$#-          %77.1 = Identical                <blt names>, %77.0   <true>
  void                    Branch                   %77.1 -> BB285 (if true) | BB286 (if false)
BB285   <- [77]
  val?^ | miss    %285.0 = LdVar              eR    table, e0.3
  val?            %285.1 = Force!<wrapped>    !v    %285.0, e0.3   <env->
  lgl$#-          %285.2 = IsType                   %285.1 isA val?-
  void                    Branch                   %285.2 -> BB287 (if true) | BB288 (if false)
BB286   <- [77]
  fs              %286.0 = FrameState         R     0x55fa136cd470+3764: [%277.5], env=e0.3
  void                    Deopt              !v    %286.0, DeadBranchReached@0x55fa0e5780e0[Test#28], %77.1   !
BB287   <- [285]
  val?-           %287.0 = CastType           d     dn %285.1   <env->
  val+            %287.1 = CallSafeBuiltin    wed   names(%287.0)    <str->
  void                    StVar              lW    allMethods, %287.1, e0.3
  val?^ | miss    %287.3 = LdVar              eR    match, e0.3
  lgl$#-          %287.4 = Identical                %287.3, function(x, table, nomatch=NA, incomparables=N|...
  void                    Branch                   %287.4 -> BB289 (if true) | BB290 (if false)
BB288   <- [285]
  fs              %288.0 = FrameState         R     0x55fa136cd470+3984: [<blt names>, %285.1], env=e0.3
  void                    Deopt              !v    %288.0, Typecheck@0x55fa0e5780e0[Type#249], %285.1   !
BB289   <- [287]
  val?^ | miss    %289.0 = LdVar              eR    labels, e0.3
  lgl$#-          %289.1 = IsType                   %289.0 isA val?~- | miss
  void                    Branch                   %289.1 -> BB291 (if true) | BB292 (if false)
BB290   <- [287]
  void                    Nop                !     
  val?^ | miss    %290.1 = %287.3
  dr              %290.2 = CallTarget@0x55fa0e5780e0[Call#86]
  goto BB80
BB291   <- [289]
  val?~- | miss   %291.0 = CastType           d     dn %289.0
  val?-           %291.1 = Force!<value>            %291.0,    <str->
  val?^ | miss    %291.2 = LdVar              eR    .fillSignatures, e0.3
  lgl$#-          %291.3 = Identical                %291.2, function(sigs, n) <(rir::DispatchTable*)0x55fa|...
  void                    Branch                   %291.3 -> BB293 (if true) | BB294 (if false)
BB292   <- [289]
  void                    Nop                !     
  val?^ | miss    %292.1 = %289.0
  dr              %292.2 = Typecheck@0x55fa0e5780e0[Type#251]
  goto BB80
BB80   <- [290, 292, 294, 296]
  val?^ | miss    %80.0 = Phi                      %290.1:BB290, %292.1:BB292, %294.1:BB294, %296.1:BB296
  val?^ | miss    %80.1 = %80.0
  dr              %80.2 = Phi                      %290.2:BB290, %292.2:BB292, %294.2:BB294, %296.2:BB296
  dr              %80.3 = %80.2
  fs              %80.4 = FrameState         R     0x55fa136cd470+4020: [], env=e0.3
  void                    Deopt              !v    %80.4, %80.3, %80.1   !
BB293   <- [291]
  prom-           %293.0 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0d0cd1d0]_p22 (!refl), e0.3
  prom-           %293.1 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0d0cd1d0]_p23, e0.3
  ct              %293.2 = PushContext        lCL   %293.0, %293.1, .fillSignatures(allMethods, length(classes)), function(sigs, n) <(rir::DispatchTable*)0x55fa|..., e0.3
  val?^           %293.3 = CastType                 up %293.1
  val?^           %293.4 = CastType                 up %293.0
  val?^ | miss    %293.5 = LdVar              eR    lengths, <env 0x55fa0b35b378>
  lgl$#-          %293.6 = Identical                %293.5, function(x, use.names=TRUE) <(rir::DispatchTab|...
  void                    Branch                   %293.6 -> BB295 (if true) | BB296 (if false)
BB294   <- [291]
  void                    Nop                !     
  val?^ | miss    %294.1 = %291.2
  dr              %294.2 = CallTarget@0x55fa0e5780e0[Call#87]
  goto BB80
BB295   <- [293]
  env             e295.0 = MkEnv              l     sigs=%293.4, n=%293.3, parent=<env 0x55fa0b35b378>, context 1
  prom-           %295.1 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0d0cd1d0]_p94, e295.0
  ct              %295.2 = PushContext        lCL   %295.1, lengths(strsplit(sigs, "#", fixed=TRUE)), function(x, use.names=TRUE) <(rir::DispatchTab|..., e295.0
  val?^           %295.3 = CastType                 up %295.1
  env             e295.4 = MkEnv              l     x=%295.3, use.names(miss)=true, parent=R_BaseNamespace, context 1
  val?            %295.5 = Force!<lazy>       !vr   %295.3,    <vec+>
  val?            %295.6 = CallBuiltin        !v    lengths(%295.5, true) e295.4
  val?            %295.7 = PopContext         C     %295.6, %295.2   <int->
  void                    StVar              lW    siglens, %295.7, e295.0
  val?^ | miss    %295.9 = LdVar              eR    n, e295.0
  val?            %295.10 = Force!<lazy>       !v    %295.9, e295.0   <int$->
  cls             %295.11 = MkCls                    unknown--fromConstant@Prom(4)0, e295.0
  val?^ | miss    %295.12 = LdVar              eR    siglens, e295.0
  lgl$#-          %295.13 = IsType                   %295.12 isA int-
  void                    Branch                   %295.13 -> BB297 (if true) | BB298 (if false)
BB296   <- [293]
  void                    DropContext        C     
  val?^ | miss    %296.1 = %293.5
  dr              %296.2 = CallTarget@0x55fa11c90448[Call#0]
  goto BB80
BB297   <- [295]
  int-            %297.0 = CastType           d     dn %295.12
  val?            %297.1 = Gt                 !v    %295.10, %297.0, e295.0   <lgl->
  void                    StVar              lW    short, %297.1, e295.0
  val?^ | miss    %297.3 = LdVar              eR    vapply, e295.0
  lgl$#-          %297.4 = Identical                %297.3, function(X, FUN, FUN.VALUE, ..., USE.NAMES=TRU|...
  void                    Branch                   %297.4 -> BB299 (if true) | BB300 (if false)
BB298   <- [295]
  fs              %298.0 = FrameState         R     0x55fa136cd470+4057: [], env=e0.3
  prom-           %298.1 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0d0cd1d0]_p21, e0.3
  val?^           %298.2 = CastType                 up %298.1
  prom-           %298.3 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0d0cd1d0]_p20, e0.3
  val?^           %298.4 = CastType                 up %298.3
  env             e298.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%298.2, x=%298.4, parent=R_BaseNamespace, context 0
  fs              %298.6 = FrameState         R     0x55fa0b568d40+23: [%291.1], env=e298.5, next=%298.0
  fs              %298.7 = FrameState         R     0x55fa11deebc0+37(pr): [], env=e0.3, next=%298.6
  fs              %298.8 = FrameState         R     0x55fa0ba91500+55: [%295.10], env=e295.0, next=%298.7
  void                    Deopt              !v    %298.8, Typecheck@0x55fa11c90448[Type#4], %295.12   !
BB299   <- [297]
  prom-           %299.0 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0d0cd1d0]_p96, e295.0
  prom-           %299.1 = MkArg                    %295.11, .findInheritedMethods[0x55fa0d0cd1d0]_p98 (!refl), e295.0
  prom-           %299.2 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0d0cd1d0]_p99, e295.0
  val?            %299.3 = StaticCall         !v    vapply[0x55fa0cfc6210](%299.0, %299.1, %299.2) { 0 1 2 } e295.0   <str->
  void                    StVar              lW    suffix, %299.3, e295.0
  val?^ | miss    %299.5 = LdVar              eR    sigs !upd, e295.0
  val?            %299.6 = Force!             !v    %299.5, e295.0
  val?^ | miss    %299.7 = LdVar              eR    paste, e295.0
  lgl$#-          %299.8 = Identical                %299.7, function(..., sep=" ", collapse=NULL, recycle0|...
  void                    Branch                   %299.8 -> BB301 (if true) | BB302 (if false)
BB300   <- [297]
  fs              %300.0 = FrameState         R     0x55fa136cd470+4057: [], env=e0.3
  prom-           %300.1 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0d0cd1d0]_p21, e0.3
  val?^           %300.2 = CastType                 up %300.1
  prom-           %300.3 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0d0cd1d0]_p20, e0.3
  val?^           %300.4 = CastType                 up %300.3
  env             e300.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%300.2, x=%300.4, parent=R_BaseNamespace, context 0
  fs              %300.6 = FrameState         R     0x55fa0b568d40+23: [%291.1], env=e300.5, next=%300.0
  fs              %300.7 = FrameState         R     0x55fa11deebc0+37(pr): [], env=e0.3, next=%300.6
  fs              %300.8 = FrameState         R     0x55fa0ba91500+89: [], env=e295.0, next=%300.7
  void                    Deopt              !v    %300.8, CallTarget@0x55fa11c90448[Call#2], %297.3   !
BB301   <- [299]
  prom-           %301.0 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0d0cd1d0]_p100, e295.0
  prom-           %301.1 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0d0cd1d0]_p102, e295.0
  dots-           %301.2 = DotsList           l     %301.0, %301.1
  val?^ | miss    %301.3 = CastType                 up %301.0
  env             e301.4 = MkEnv              l     ...=%301.2, sep="#", collapse(miss)=nil, recycle0(miss)=false, parent=R_BaseNamespace, context 0
  val?            %301.5 = Force!             !vL   %301.3, e301.4
  val?^ | miss    %301.6 = CastType                 up %301.1
  val?            %301.7 = Force!             !vL   %301.6, e301.4
  val+            %301.8 = CallSafeBuiltin    wed   list(%301.5, %301.7)    <vec->
  lgl$#-          %301.9 = IsType                   %301.8 isA val?-
  void                    Branch                   %301.9 -> BB303 (if true) | BB304 (if false)
BB302   <- [299]
  fs              %302.0 = FrameState         R     0x55fa136cd470+4057: [], env=e0.3
  prom-           %302.1 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0d0cd1d0]_p21, e0.3
  val?^           %302.2 = CastType                 up %302.1
  prom-           %302.3 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0d0cd1d0]_p20, e0.3
  val?^           %302.4 = CastType                 up %302.3
  env             e302.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%302.2, x=%302.4, parent=R_BaseNamespace, context 0
  fs              %302.6 = FrameState         R     0x55fa0b568d40+23: [%291.1], env=e302.5, next=%302.0
  fs              %302.7 = FrameState         R     0x55fa11deebc0+37(pr): [], env=e0.3, next=%302.6
  fs              %302.8 = FrameState         R     0x55fa0ba91500+154: [%299.6], env=e295.0, next=%302.7
  void                    Deopt              !v    %302.8, CallTarget@0x55fa11c90448[Call#4], %299.7   !
BB303   <- [301]
  val-            %303.0 = CastType           d     dn %301.8   <vec->
  val+            %303.1 = CallSafeBuiltin    wed   paste(%303.0, "#", nil, false)    <str->
  val?^ | miss    %303.2 = LdVar              eR    sigs !upd, e295.0
  val?            %303.3 = Force!<wrapped>    !v    %303.2, e295.0   <str->
  val?^ | miss    %303.4 = LdVar              eR    short, e295.0
  lgl$#-          %303.5 = IsType                   %303.4 isA lgl-
  void                    Branch                   %303.5 -> BB305 (if true) | BB306 (if false)
BB304   <- [301]
  fs              %304.0 = FrameState         R     0x55fa136cd470+4057: [], env=e0.3
  prom-           %304.1 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0d0cd1d0]_p21, e0.3
  val?^           %304.2 = CastType                 up %304.1
  prom-           %304.3 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0d0cd1d0]_p20, e0.3
  val?^           %304.4 = CastType                 up %304.3
  env             e304.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%304.2, x=%304.4, parent=R_BaseNamespace, context 0
  fs              %304.6 = FrameState         R     0x55fa0b568d40+23: [%291.1], env=e304.5, next=%304.0
  fs              %304.7 = FrameState         R     0x55fa11deebc0+37(pr): [], env=e0.3, next=%304.6
  fs              %304.8 = FrameState         R     0x55fa0ba91500+210: [], env=e295.0, next=%304.7
  fs              %304.9 = FrameState         R     0x55fa0cca1800+78: [%301.8, "#", nil, false], env=e301.4, next=%304.8
  void                    Deopt              !v    %304.9, Typecheck@0x55fa0cca1940[Type#0], %301.8   !
BB305   <- [303]
  lgl-            %305.0 = CastType           d     dn %303.4
  val?            %305.1 = Subassign1_1D      wed   %303.1, %303.3, %305.0, e295.0   <str->
  void                    StVar              lW    sigs, %305.1, e295.0
  val             %305.3 = ChkMissing         e     %305.1
  val?            %305.4 = PopContext         C     %305.1, %293.2   <str->
  lgl$#-          %305.5 = IsType                   %305.4 isA val?-
  void                    Branch                   %305.5 -> BB307 (if true) | BB308 (if false)
BB306   <- [303]
  fs              %306.0 = FrameState         R     0x55fa136cd470+4057: [], env=e0.3
  prom-           %306.1 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0d0cd1d0]_p21, e0.3
  val?^           %306.2 = CastType                 up %306.1
  prom-           %306.3 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0d0cd1d0]_p20, e0.3
  val?^           %306.4 = CastType                 up %306.3
  env             e306.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%306.2, x=%306.4, parent=R_BaseNamespace, context 0
  fs              %306.6 = FrameState         R     0x55fa0b568d40+23: [%291.1], env=e306.5, next=%306.0
  fs              %306.7 = FrameState         R     0x55fa11deebc0+37(pr): [], env=e0.3, next=%306.6
  fs              %306.8 = FrameState         R     0x55fa0ba91500+224: [%303.1, %303.3], env=e295.0, next=%306.7
  void                    Deopt              !v    %306.8, Typecheck@0x55fa11c90448[Type#21], %303.4   !
BB307   <- [305]
  val?-           %307.0 = CastType           d     dn %305.4   <str->
  val+            %307.1 = CallSafeBuiltin    wed   match(%291.1, %307.0, NA, nil)    <int->
  void                    StVar              lW    m, %307.1, e0.3
  lgl$#-          %307.3 = IsType                   %307.1 isA int-
  val?^ | miss    %307.4 = LdVar              eR    is.na, e0.3
  lgl$#-          %307.5 = Identical                <blt is.na>, %307.4   <true>
  void                    Branch                   %307.5 -> BB309 (if true) | BB310 (if false)
BB308   <- [305]
  fs              %308.0 = FrameState         R     0x55fa136cd470+4057: [], env=e0.3
  prom-           %308.1 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0d0cd1d0]_p21, e0.3
  val?^           %308.2 = CastType                 up %308.1
  prom-           %308.3 = MkArg                    %291.1, .findInheritedMethods[0x55fa0d0cd1d0]_p20 (!refl), e0.3
  val?~           %308.4 = CastType                 up %308.3
  env             e308.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%308.2, x=%308.4, parent=R_BaseNamespace, context 0
  fs              %308.6 = FrameState         R     0x55fa0b568d40+23: [%291.1], env=e308.5, next=%308.0
  fs              %308.7 = FrameState         R     0x55fa11deebc0+37(pr): [%305.4], env=e0.3, next=%308.6
  void                    Deopt              !v    %308.7, Typecheck@0x55fa0b5bbcb0[Type#1], %305.4   !
BB309   <- [307]
  void                    Branch                   %307.3 -> BB311 (if true) | BB312 (if false)
BB310   <- [307]
  void                    Nop                !     
  lgl$#-          %310.1 = %307.5
  dr              %310.2 = DeadBranchReached@0x55fa0e5780e0[Test#29]
  goto BB94
BB311   <- [309]
  int-            %311.0 = CastType           d     dn %307.1
  lgl-            %311.1 = CallSafeBuiltin    wed   is.na(%311.0)    <lgl->
  lgl-            %311.2 = Not                wed   %311.1, elided
  void                    StVar              lW    found, %311.2, e0.3
  val?^ | miss    %311.4 = LdVar              eR    mget, e0.3
  lgl$#-          %311.5 = Identical                %311.4, function(x, envir=as.environment(-(1L)), mode=|...
  void                    Branch                   %311.5 -> BB313 (if true) | BB314 (if false)
BB312   <- [309]
  void                    Nop                !     
  val+            %312.1 = %307.1
  dr              %312.2 = Typecheck@0x55fa0e5780e0[Type#256]
  goto BB94
BB94   <- [310, 312]
  val?^ | miss    %94.0 = Phi                      %310.1:BB310, %312.1:BB312
  val?^ | miss    %94.1 = %94.0
  dr              %94.2 = Phi                      %310.2:BB310, %312.2:BB312
  dr              %94.3 = %94.2
  fs              %94.4 = FrameState         R     0x55fa136cd470+4071: [], env=e0.3
  void                    Deopt              !v    %94.4, %94.3, %94.1   !
BB313   <- [311]
  prom-           %313.0 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0d0cd1d0]_p25, e0.3
  prom-           %313.1 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0d0cd1d0]_p29, e0.3
  ct              %313.2 = PushContext        lCL   %313.0, %313.1, mget([(allMethods, [(m, found)), table), function(x, envir=as.environment(-(1L)), mode=|..., e0.3
  val?^           %313.3 = CastType                 up %313.1
  val?^           %313.4 = CastType                 up %313.0
  env             e313.5 = MkEnv              l     x=%313.4, envir=%313.3, mode(miss)="any", ifnotfound(miss)=missingArg, inherits(miss)=false, parent=R_BaseNamespace, context 1
  cls             %313.6 = MkCls                    mget@133, e313.5
  val?            %313.7 = Force!<lazy>       !vL   %313.4, e313.5   <str+>
  val?            %313.8 = Force!<lazy>       !vL   %313.3, e313.5   <env->
  val?^ | miss    %313.9 = LdVar              eR    list, e313.5
  lgl$#-          %313.10 = Identical                <blt list>, %313.9   <true>
  void                    Branch                   %313.10 -> BB315 (if true) | BB316 (if false)
BB314   <- [311]
  fs              %314.0 = FrameState         R     0x55fa136cd470+4177: [], env=e0.3
  void                    Deopt              !v    %314.0, CallTarget@0x55fa0e5780e0[Call#90], %311.4   !
BB315   <- [313]
  val+            %315.0 = CallSafeBuiltin    wed   list(%313.6)    <vec$->
  val?            %315.1 = CallBuiltin        !v    mget(%313.7, %313.8, "any", %315.0, false) e313.5
  val?            %315.2 = PopContext         C     %315.1, %313.2   <vec$+>
  void                    StVar              lW    methods, %315.2, e0.3
  val?^ | miss    %315.4 = LdVar              eR    verbose, e0.3
  val?            %315.5 = Force!<wrapped>    !v    %315.4, e0.3   <lgl$->
  lgl$#-          %315.6 = CheckTrueFalse     we    %315.5
  void                    Branch                   %315.6 -> BB167 (if true) | BB102 (if false)
BB316   <- [313]
  fs              %316.0 = FrameState         R     0x55fa136cd470+4214: [], env=e0.3
  fs              %316.1 = FrameState         R     0x55fa0db8bf30+37: [%313.7, %313.8, "any"], env=e313.5, next=%316.0
  void                    Deopt              !v    %316.1, DeadBranchReached@0x55fa0ccef970[Test#0], %313.10   !
BB167   <- [315]
  (cls|spec|blt)  %167.0 = LdFun              !v    cat, e0.3
  fs              %167.1 = FrameState         R     0x55fa136cd470+4258: [%167.0], env=e0.3
  void                    Deopt              !v    %167.1, DeadCall@0x55fa0e5780e0[Call#91], %167.0   !
BB102   <- [315]
  val?^ | miss    %102.0 = LdVar              eR    hasGroup, e0.3
  lgl$#-          %102.1 = IsType                   %102.0 isA lgl$-
  void                    Branch                   %102.1 -> BB317 (if true) | BB318 (if false)
BB317   <- [102]
  lgl$-           %317.0 = CastType           d     dn %102.0
  lgl$#-          %317.1 = CheckTrueFalse     e     %317.0
  void                    Branch                   %317.1 -> BB166 (if true) | BB103 (if false)
BB318   <- [102]
  fs              %318.0 = FrameState         R     0x55fa136cd470+4243: [%315.6], env=e0.3
  void                    Deopt              !v    %318.0, Typecheck@0x55fa0e5780e0[Type#275], %102.0   !
BB166   <- [317]
  (cls|spec|blt)  %166.0 = LdFun              !v    .getGroupMethods, e0.3
  fs              %166.1 = FrameState         R     0x55fa136cd470+4377: [%166.0], env=e0.3
  void                    Deopt              !v    %166.1, DeadCall@0x55fa0e5780e0[Call#95], %166.0   !
BB103   <- [317]
  (cls|spec|blt)  %103.0 = LdFun              !v    rep, <0x55fa0ad689b0>, e0.3
  prom-           %103.1 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0d0cd1d0]_p30, e0.3
  val?            %103.2 = Call               !v    %103.0(false, %103.1) e0.3   <lgl$->
  lgl$#-          %103.3 = IsType                   %103.2 isA lgl$-
  void                    Branch                   %103.3 -> BB319 (if true) | BB320 (if false)
BB319   <- [103]
  lgl$-           %319.0 = CastType           d     dn %103.2
  void                    StVar              lW    fromGroup, %319.0, e0.3
  val?^ | miss    %319.2 = LdVar              eR    .duplicateClassesExist, e0.3
  lgl$#-          %319.3 = Identical                %319.2, function(on) <(rir::DispatchTable*)0x55fa0cd60|...
  void                    Branch                   %319.3 -> BB321 (if true) | BB322 (if false)
BB320   <- [103]
  fs              %320.0 = FrameState         R     0x55fa136cd470+4353: [%103.2], env=e0.3
  void                    Deopt              !v    %320.0, Typecheck@0x55fa0e5780e0[Type#278], %103.2   !
BB321   <- [319]
  val?            %321.0 = StaticCall         !v    .duplicateClassesExist[0x55fa0e1ca220]() e0.3   <lgl$->
  lgl$#-          %321.1 = IsType                   %321.0 isA lgl$-
  void                    Branch                   %321.1 -> BB323 (if true) | BB324 (if false)
BB322   <- [319]
  fs              %322.0 = FrameState         R     0x55fa136cd470+4367: [], env=e0.3
  void                    Deopt              !v    %322.0, CallTarget@0x55fa0e5780e0[Call#108], %319.2   !
BB323   <- [321]
  lgl$-           %323.0 = CastType           d     dn %321.0
  lgl$#-          %323.1 = CheckTrueFalse     e     %323.0
  void                    Branch                   %323.1 -> BB165 (if true) | BB110 (if false)
BB324   <- [321]
  void                    Nop                !     
  val?            %324.1 = %321.0
  dr              %324.2 = Typecheck@0x55fa0e5780e0[Type#304]
  goto BB108
BB165   <- [323]
  (cls|spec|blt)  %165.0 = LdFun              !v    integer, e0.3
  fs              %165.1 = FrameState         R     0x55fa136cd470+4848: [%165.0], env=e0.3
  void                    Deopt              !v    %165.1, DeadCall@0x55fa0e5780e0[Call#109], %165.0   !
BB110   <- [323]
  val?^ | miss    %110.0 = LdVar              eR    doExcluded, e0.3
  lgl$#-          %110.1 = IsType                   %110.0 isA lgl$-
  void                    Branch                   %110.1 -> BB325 (if true) | BB326 (if false)
BB108   <- [324, 326]
  val?^ | miss    %108.0 = Phi                      %324.1:BB324, %326.1:BB326
  val?^ | miss    %108.1 = %108.0
  dr              %108.2 = Phi                      %324.2:BB324, %326.2:BB326
  dr              %108.3 = %108.2
  fs              %108.4 = FrameState         R     0x55fa136cd470+4827: [%321.0], env=e0.3
  void                    Deopt              !v    %108.4, %108.3, %108.1   !
BB325   <- [110]
  lgl$-           %325.0 = CastType           d     dn %110.0
  lgl$#-          %325.1 = CheckTrueFalse     e     %325.0
  void                    Branch                   %325.1 -> BB158 (if true) | BB111 (if false)
BB326   <- [110]
  void                    Nop                !     
  val?^ | miss    %326.1 = %110.0
  dr              %326.2 = Typecheck@0x55fa0e5780e0[Type#363]
  goto BB108
BB158   <- [325]
  val?^ | miss    %158.0 = LdVar              eR    methods, e0.3
  val?            %158.1 = Force!             !v    %158.0, e0.3   <val?_>
  lgl$#-          %158.2 = IsType                   %158.1 isA val+   <@?>
  void                    Branch                   %158.2 -> BB162 (if true) | BB161 (if false)
BB111   <- [325]
  void                    Nop                !     
  goto BB112
BB162   <- [158]
  val?^ | miss    %162.0 = LdVar              eR    is.na, e0.3
  lgl$#-          %162.1 = Identical                <blt is.na>, %162.0   <@?>
  void                    Branch                   %162.1 -> BB164 (if true) | BB163 (if false)
BB161   <- [158]
  prom-           %161.0 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0d0cd1d0]_p53, e0.3
  lgl$#-          %161.1 = IsType                   %158.1 isA val?+
  void                    Branch                   %161.1 -> BB327 (if true) | BB328 (if false)
BB112   <- [111, 327]
  val?^ | miss    %112.0 = LdVar              eR    length, e0.3
  lgl$#-          %112.1 = Identical                <blt length>, %112.0   <true>
  void                    Branch                   %112.1 -> BB329 (if true) | BB330 (if false)
BB164   <- [162]
  (cls|spec|blt)  %164.0 = LdFun              !v    match, e0.3
  fs              %164.1 = FrameState         R     0x55fa136cd470+6383: [%158.1, <blt is.na>, %164.0], env=e0.3
  void                    Deopt              !v    %164.1, DeadCall@0x55fa0e5780e0[Call#129], %164.0   !
BB163   <- [162]
  (cls|spec|blt)  %163.0 = LdFun              !v    is.na, e0.3
  fs              %163.1 = FrameState         R     0x55fa136cd470+6346: [%158.1, %163.0], env=e0.3
  void                    Deopt              !v    %163.1, DeadCall@0x55fa0e5780e0[Call#125], %163.0   !
BB327   <- [161]
  val?+           %327.0 = CastType           d     dn %158.1   <val?_>
  val?            %327.1 = Extract1_1D        wed   %327.0, %161.0, elided   <val?_>
  void                    StVar              lW    methods, %327.1, e0.3
  goto BB112
BB328   <- [161]
  fs              %328.0 = FrameState         R     0x55fa136cd470+6282: [%158.1], env=e0.3
  void                    Deopt              !v    %328.0, Typecheck@0x55fa0e5780e0[Type#364], %158.1   !
BB329   <- [112]
  val?^ | miss    %329.0 = LdVar              eR    methods, e0.3
  lgl$#-          %329.1 = IsType                   %329.0 isA val?~+ | miss
  void                    Branch                   %329.1 -> BB331 (if true) | BB332 (if false)
BB330   <- [112]
  void                    Nop                !     
  lgl$#-          %330.1 = %112.1
  dr              %330.2 = DeadBranchReached@0x55fa0e5780e0[Test#50]
  goto BB113
BB331   <- [329]
  val?~+ | miss   %331.0 = CastType           d     dn %329.0
  val?+           %331.1 = Force!<value>            %331.0,    <vec$+>
  (int|real)$-    %331.2 = CallSafeBuiltin    wed   length(%331.1)    <int$->
  lgl$#-          %331.3 = IsType                   %331.2 isA int$-
  void                    Branch                   %331.3 -> BB333 (if true) | BB334 (if false)
BB332   <- [329]
  void                    Nop                !     
  val?^ | miss    %332.1 = %329.0
  dr              %332.2 = Typecheck@0x55fa0e5780e0[Type#384]
  goto BB113
BB113   <- [330, 332]
  val?^ | miss    %113.0 = Phi                      %330.1:BB330, %332.1:BB332
  val?^ | miss    %113.1 = %113.0
  dr              %113.2 = Phi                      %330.2:BB330, %332.2:BB332
  dr              %113.3 = %113.2
  fs              %113.4 = FrameState         R     0x55fa136cd470+6458: [], env=e0.3
  void                    Deopt              !v    %113.4, %113.3, %113.1   !
BB333   <- [331]
  int$-           %333.0 = CastType           d     dn %331.2
  lgl$-           %333.1 = Gt                 d     %333.0, 1L, elided   <lgl$->
  lgl$#-          %333.2 = CheckTrueFalse     e     %333.1
  void                    Branch                   %333.2 -> BB157 (if true) | BB117 (if false)
BB334   <- [331]
  fs              %334.0 = FrameState         R     0x55fa136cd470+6549: [%331.2], env=e0.3
  void                    Deopt              !v    %334.0, Typecheck@0x55fa0e5780e0[Type#385], %331.2   !
BB157   <- [333]
  (cls|spec|blt)  %157.0 = LdFun              !v    paste, e0.3
  fs              %157.1 = FrameState         R     0x55fa136cd470+6582: [%157.0], env=e0.3
  void                    Deopt              !v    %157.1, DeadCall@0x55fa0e5780e0[Call#133], %157.0   !
BB117   <- [333]
  val?^ | miss    %117.0 = LdVar              eR    simpleOnly, e0.3
  val?            %117.1 = Force!<wrapped>    !v    %117.0, e0.3   <lgl$->
  lgl$-           %117.2 = AsLogical          e     %117.1
  lgl$#-          %117.3 = Identical                %117.2, false
  void                    Branch                   %117.3 -> BB156 (if true) | BB120 (if false)
BB156   <- [117]
  void                    Nop                !     
  lgl$-           %156.1 = %117.2
  goto BB123
BB120   <- [117]
  val?^ | miss    %120.0 = LdVar              eR    length, e0.3
  lgl$#-          %120.1 = Identical                <blt length>, %120.0   <true>
  void                    Branch                   %120.1 -> BB335 (if true) | BB336 (if false)
BB123   <- [156, 339]
  lgl$-           %123.0 = Phi                      %339.4:BB339, %156.1:BB156
  lgl$-           %123.1 = %123.0
  lgl$#-          %123.2 = CheckTrueFalse     e     %123.1
  void                    Branch                   %123.2 -> BB155 (if true) | BB126 (if false)
BB335   <- [120]
  val?^ | miss    %335.0 = LdVar              eR    methods, e0.3
  lgl$#-          %335.1 = IsType                   %335.0 isA val?~+ | miss
  void                    Branch                   %335.1 -> BB337 (if true) | BB338 (if false)
BB336   <- [120]
  void                    Nop                !     
  lgl$#-          %336.1 = %120.1
  dr              %336.2 = DeadBranchReached@0x55fa0e5780e0[Test#57]
  goto BB118
BB155   <- [123]
  (cls|spec|blt)  %155.0 = LdFun              !v    Recall, e0.3
  fs              %155.1 = FrameState         R     0x55fa136cd470+7866: [%155.0], env=e0.3
  void                    Deopt              !v    %155.1, DeadCall@0x55fa0e5780e0[Call#154], %155.0   !
BB126   <- [123]
  val?^ | miss    %126.0 = LdVar              eR    length, e0.3
  lgl$#-          %126.1 = Identical                <blt length>, %126.0   <true>
  void                    Branch                   %126.1 -> BB341 (if true) | BB342 (if false)
BB337   <- [335]
  val?~+ | miss   %337.0 = CastType           d     dn %335.0
  val?+           %337.1 = Force!<value>            %337.0,    <vec$+>
  (int|real)$-    %337.2 = CallSafeBuiltin    wed   length(%337.1)    <int$->
  lgl$#-          %337.3 = IsType                   %337.2 isA int$-
  void                    Branch                   %337.3 -> BB339 (if true) | BB340 (if false)
BB338   <- [335]
  void                    Nop                !     
  val?^ | miss    %338.1 = %335.0
  dr              %338.2 = Typecheck@0x55fa0e5780e0[Type#452]
  goto BB118
BB118   <- [336, 338]
  val?^ | miss    %118.0 = Phi                      %336.1:BB336, %338.1:BB338
  val?^ | miss    %118.1 = %118.0
  dr              %118.2 = Phi                      %336.2:BB336, %338.2:BB338
  dr              %118.3 = %118.2
  fs              %118.4 = FrameState         R     0x55fa136cd470+7728: [%117.1], env=e0.3
  void                    Deopt              !v    %118.4, %118.3, %118.1   !
BB341   <- [126]
  val?^ | miss    %341.0 = LdVar              eR    methods, e0.3
  lgl$#-          %341.1 = IsType                   %341.0 isA val?~+ | miss
  void                    Branch                   %341.1 -> BB343 (if true) | BB344 (if false)
BB342   <- [126]
  void                    Nop                !     
  lgl$#-          %342.1 = %126.1
  dr              %342.2 = DeadBranchReached@0x55fa0e5780e0[Test#59]
  goto BB124
BB339   <- [337]
  int$-           %339.0 = CastType           d     dn %337.2
  lgl$-           %339.1 = Eq                 d     %339.0, 0L, elided   <lgl$->
  lgl$-           %339.2 = AsLogical                %339.1
  lgl$-           %339.3 = LAnd                     %117.2, %339.2
  lgl$-           %339.4 = %339.3
  goto BB123
BB340   <- [337]
  fs              %340.0 = FrameState         R     0x55fa136cd470+7831: [%117.2, %337.2], env=e0.3
  void                    Deopt              !v    %340.0, Typecheck@0x55fa0e5780e0[Type#453], %337.2   !
BB343   <- [341]
  val?~+ | miss   %343.0 = CastType           d     dn %341.0
  val?+           %343.1 = Force!<value>            %343.0,    <vec$+>
  (int|real)$-    %343.2 = CallSafeBuiltin    wed   length(%343.1)    <int$->
  lgl$#-          %343.3 = IsType                   %343.2 isA int$-
  void                    Branch                   %343.3 -> BB345 (if true) | BB346 (if false)
BB344   <- [341]
  void                    Nop                !     
  val?^ | miss    %344.1 = %341.0
  dr              %344.2 = Typecheck@0x55fa0e5780e0[Type#474]
  goto BB124
BB124   <- [342, 344]
  val?^ | miss    %124.0 = Phi                      %342.1:BB342, %344.1:BB344
  val?^ | miss    %124.1 = %124.0
  dr              %124.2 = Phi                      %342.2:BB342, %344.2:BB344
  dr              %124.3 = %124.2
  fs              %124.4 = FrameState         R     0x55fa136cd470+7850: [%123.1], env=e0.3
  void                    Deopt              !v    %124.4, %124.3, %124.1   !
BB345   <- [343]
  int$-           %345.0 = CastType           d     dn %343.2
  lgl$#-          %345.1 = CheckTrueFalse     e     %345.0
  void                    Branch                   %345.1 -> BB133 (if true) | BB129 (if false)
BB346   <- [343]
  void                    Nop                !     
  (int|real)$-    %346.1 = %343.2
  dr              %346.2 = Typecheck@0x55fa0e5780e0[Type#475]
  goto BB127
BB133   <- [345]
  val?^ | miss    %133.0 = LdVar              eR    .sigLabel, e0.3
  lgl$#-          %133.1 = Identical                %133.0, function(sig) <(rir::DispatchTable*)0x55fa0e8b|...
  void                    Branch                   %133.1 -> BB347 (if true) | BB348 (if false)
BB129   <- [345]
  void                    Nop                !     
  goto BB130
BB127   <- [346, 348, 350]
  val?^ | miss    %127.0 = Phi                      %346.1:BB346, %348.1:BB348, %350.1:BB350
  val?^ | miss    %127.1 = %127.0
  dr              %127.2 = Phi                      %346.2:BB346, %348.2:BB348, %350.2:BB350
  dr              %127.3 = %127.2
  fs              %127.4 = FrameState         R     0x55fa136cd470+8203: [%343.2], env=e0.3
  void                    Deopt              !v    %127.4, %127.3, %127.1   !
BB347   <- [133]
  prom-           %347.0 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0d0cd1d0]_p32, e0.3
  val?^           %347.1 = CastType                 up %347.0
  val?^ | miss    %347.2 = LdVar              eR    paste, <env 0x55fa0b35b378>
  lgl$#-          %347.3 = Identical                %347.2, function(..., sep=" ", collapse=NULL, recycle0|...
  void                    Branch                   %347.3 -> BB349 (if true) | BB350 (if false)
BB348   <- [133]
  void                    Nop                !     
  val?^ | miss    %348.1 = %133.0
  dr              %348.2 = CallTarget@0x55fa0e5780e0[Call#161]
  goto BB127
BB130   <- [129, 142, 361]
  val?^ | miss    %130.0 = LdVar              eR    methods, e0.3
  lgl$#-          %130.1 = IsType                   %130.0 isA val?~+ | miss
  void                    Branch                   %130.1 -> BB351 (if true) | BB352 (if false)
BB349   <- [347]
  env             e349.0 = MkEnv              l     sig=%347.1, parent=<env 0x55fa0b35b378>, context 0
  prom-           %349.1 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0d0cd1d0]_p90, e349.0
  dots-           %349.2 = DotsList           l     %349.1
  val?^ | miss    %349.3 = CastType                 up %349.1
  env             e349.4 = MkEnv              l     ...=%349.2, sep(miss)=" ", collapse="#", recycle0(miss)=false, parent=R_BaseNamespace, context -1
  val?            %349.5 = Force!             !vL   %349.3, e349.4
  val+            %349.6 = CallSafeBuiltin    wed   list(%349.5)    <vec->
  val+            %349.7 = CallSafeBuiltin    wed   paste(%349.6, " ", "#", false)    <str$->
  void                    StVar              lW    tlabel, %349.7, e0.3
  val?^ | miss    %349.9 = LdVar              eR    methods, e0.3
  lgl$#-          %349.10 = IsType                   %349.9 isA val?~+ | miss
  void                    Branch                   %349.10 -> BB353 (if true) | BB354 (if false)
BB350   <- [347]
  void                    Nop                !     
  val?^ | miss    %350.1 = %347.2
  dr              %350.2 = CallTarget@0x55fa0e407028[Call#0]
  goto BB127
BB351   <- [130]
  val?~+ | miss   %351.0 = CastType           d     dn %130.0
  void                    Visible            v     
  val?+           %351.2 = Force!<value>            %351.0,    <vec$+>
  void                    Return             l     %351.2
BB352   <- [130]
  fs              %352.0 = FrameState         R     0x55fa136cd470+8774: [], env=e0.3
  void                    Deopt              !v    %352.0, Typecheck@0x55fa0e5780e0[Type#509], %130.0   !
BB353   <- [349]
  val?~+ | miss   %353.0 = CastType           d     dn %349.9
  val?+           %353.1 = Force!<value>            %353.0,    <vec$+>
  lgl$#-          %353.2 = IsType                   %353.1 isA val+   <true>
  void                    Branch                   %353.2 -> BB355 (if true) | BB356 (if false)
BB354   <- [349]
  void                    Nop                !     
  val?^ | miss    %354.1 = %349.9
  dr              %354.2 = Typecheck@0x55fa0e5780e0[Type#478]
  goto BB134
BB355   <- [353]
  val?            %355.0 = Extract2_1D        wed   %353.1, 1L, elided   <cls>
  void                    StVar              lW    m, %355.0, e0.3
  val?^ | miss    %355.2 = LdVar              eR    is, e0.3
  lgl$#-          %355.3 = Identical                %355.2, function(object, class2) <(rir::DispatchTable*|...
  void                    Branch                   %355.3 -> BB357 (if true) | BB358 (if false)
BB356   <- [353]
  void                    Nop                !     
  lgl$#-          %356.1 = %353.2
  dr              %356.2 = DeadBranchReached@0x55fa0e5780e0[Test#60]
  goto BB134
BB134   <- [354, 356]
  val?^ | miss    %134.0 = Phi                      %354.1:BB354, %356.1:BB356
  val?^ | miss    %134.1 = %134.0
  dr              %134.2 = Phi                      %354.2:BB354, %356.2:BB356
  dr              %134.3 = %134.2
  fs              %134.4 = FrameState         R     0x55fa136cd470+8265: [], env=e0.3
  void                    Deopt              !v    %134.4, %134.3, %134.1   !
BB357   <- [355]
  prom-           %357.0 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0d0cd1d0]_p33 (!refl), e0.3
  val?            %357.1 = Call               !v    function(object, class2) <(rir::DispatchTable*|...(%357.0, "MethodDefinition") e0.3   <lgl$->
  lgl$#-          %357.2 = IsType                   %357.1 isA lgl$-
  void                    Branch                   %357.2 -> BB359 (if true) | BB360 (if false)
BB358   <- [355]
  fs              %358.0 = FrameState         R     0x55fa136cd470+8332: [], env=e0.3
  void                    Deopt              !v    %358.0, CallTarget@0x55fa0e5780e0[Call#162], %355.2   !
BB359   <- [357]
  lgl$-           %359.0 = CastType           d     dn %357.1
  lgl$#-          %359.1 = CheckTrueFalse     e     %359.0
  void                    Branch                   %359.1 -> BB148 (if true) | BB140 (if false)
BB360   <- [357]
  fs              %360.0 = FrameState         R     0x55fa136cd470+8369: [%357.1], env=e0.3
  void                    Deopt              !v    %360.0, Typecheck@0x55fa0e5780e0[Type#481], %357.1   !
BB148   <- [359]
  (cls|spec|blt)  %148.0 = LdFun              !v    <-, <0x55fa0ad48da8>, e0.3
  prom-           %148.1 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0d0cd1d0]_p37, e0.3
  prom-           %148.2 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0d0cd1d0]_p40, e0.3
  val?            %148.3 = Call               !v    %148.0(%148.1, %148.2) e0.3
  val?^ | miss    %148.4 = LdVar              eR    .inheritedArgsExpression, e0.3
  lgl$#-          %148.5 = Identical                %148.4, function(target, defined, body) <(rir::Dispatc|...
  void                    Branch                   %148.5 -> BB363 (if true) | BB364 (if false)
BB140   <- [359]
  void                    Nop                !     
  goto BB141
BB363   <- [148]
  prom-           %363.0 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0d0cd1d0]_p45, e0.3
  prom-           %363.1 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0d0cd1d0]_p48, e0.3
  prom-           %363.2 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0d0cd1d0]_p51, e0.3
  val?            %363.3 = StaticCall         !v    .inheritedArgsExpression[0x55fa0d19d420](%363.0, %363.1, %363.2) e0.3   <nil->
  lgl$-           %363.4 = Is                       %363.3, NULL
  void                    StVar              lW    coerce, %363.3, e0.3
  val             %363.6 = ChkMissing         e     %363.3
  lgl$-           %363.7 = Not                d     %363.4, elided
  lgl$#-          %363.8 = CheckTrueFalse     e     %363.7
  void                    Branch                   %363.8 -> BB154 (if true) | BB151 (if false)
BB364   <- [148]
  fs              %364.0 = FrameState         R     0x55fa136cd470+8422: [%148.3], env=e0.3
  void                    Deopt              !v    %364.0, CallTarget@0x55fa0e5780e0[Call#167], %148.4   !
BB141   <- [140, 365]
  val?^ | miss    %141.0 = LdVar              eR    doCache, e0.3
  val?            %141.1 = Force!<lazy>       !v    %141.0, e0.3   <lgl$->
  lgl$#-          %141.2 = CheckTrueFalse     we    %141.1
  void                    Branch                   %141.2 -> BB143 (if true) | BB142 (if false)
BB154   <- [363]
  (cls|spec|blt)  %154.0 = LdFun              !v    body<-, e0.3
  fs              %154.1 = FrameState         R     0x55fa136cd470+8529: [%363.3, %154.0], env=e0.3
  void                    Deopt              !v    %154.1, DeadCall@0x55fa0e5780e0[Call#171], %154.0   !
BB151   <- [363]
  val?^ | miss    %151.0 = LdVar              eR    m, e0.3
  val?            %151.1 = Force!<value>      !v    %151.0, e0.3   <cls>
  val?^ | miss    %151.2 = LdVar              eR    methods !upd, e0.3
  lgl$#-          %151.3 = IsType                   %151.2 isA val?~+ | miss
  void                    Branch                   %151.3 -> BB365 (if true) | BB366 (if false)
BB143   <- [141]
  val?^ | miss    %143.0 = LdVar              eR    verbose, e0.3
  val?            %143.1 = Force!<wrapped>    !v    %143.0, e0.3   <lgl$->
  lgl$#-          %143.2 = CheckTrueFalse     we    %143.1
  void                    Branch                   %143.2 -> BB147 (if true) | BB146 (if false)
BB142   <- [141]
  void                    Nop                !     
  goto BB130
BB365   <- [151]
  val?~+ | miss   %365.0 = CastType           d     dn %151.2
  val?+           %365.1 = Force!<value>            %365.0,    <vec$+>
  val?            %365.2 = Subassign2_1D      !v    %151.1, %365.1, 1L, e0.3
  void                    StVar              lW    methods, %365.2, e0.3
  goto BB141
BB366   <- [151]
  fs              %366.0 = FrameState         R     0x55fa136cd470+8601: [%151.1], env=e0.3
  void                    Deopt              !v    %366.0, Typecheck@0x55fa0e5780e0[Type#503], %151.2   !
BB147   <- [143]
  (cls|spec|blt)  %147.0 = LdFun              !v    cat, e0.3
  fs              %147.1 = FrameState         R     0x55fa136cd470+8691: [%147.0], env=e0.3
  void                    Deopt              !v    %147.1, DeadCall@0x55fa0e5780e0[Call#172], %147.0   !
BB146   <- [143]
  val?^ | miss    %146.0 = LdVar              eR    assign, e0.3
  lgl$#-          %146.1 = Identical                %146.0, function(x, value, pos=-(1), envir=as.environm|...
  void                    Branch                   %146.1 -> BB361 (if true) | BB362 (if false)
BB361   <- [146]
  prom-           %361.0 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0d0cd1d0]_p34, e0.3
  prom-           %361.1 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0d0cd1d0]_p35, e0.3
  prom-           %361.2 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0d0cd1d0]_p36, e0.3
  val?            %361.3 = StaticCall         !v    assign[0x55fa106a1690](%361.0, %361.1, missingArg, %361.2) { 0 1 3n } e0.3
  goto BB130
BB362   <- [146]
  fs              %362.0 = FrameState         R     0x55fa136cd470+8676: [%143.2], env=e0.3
  void                    Deopt              !v    %362.0, CallTarget@0x55fa0e5780e0[Call#173], %146.0   !
Prom 0:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     get, <0x55fa0bc79e78>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55fa0d0cd1d0]_p1, e0.0
  val?            %0.3  = NamedCall          !     %0.1(".MTable", envir=%0.2) e0.0   <env->
  void                    Return             l     %0.3
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     environment, <0x55fa0b0fab68>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55fa0d0cd1d0]_p2, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <env->
  void                    Return             l     %0.3
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fdef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 4:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     .simpleInheritanceGeneric, <0x55fa10628540>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55fa0d0cd1d0]_p5, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <lgl$->
  void                    Return             l     %0.3
Prom 5:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fdef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 7:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     is.environment, <0x55fa0ad63e18>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55fa0d0cd1d0]_p8, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <lgl$->
  void                    Return             l     %0.3
Prom 8:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    mtable, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 9:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     environment, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55fa0d0cd1d0]_p10, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 10:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fdef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 11:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     .allowPrimitiveMethods, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55fa0d0cd1d0]_p12, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 12:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    primMethods, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 13:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fdef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 14:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    group, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 15:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    cl1, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$+>
  void                    Return             l     %0.3
Prom 16:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 20:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    labels, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 21:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     .fillSignatures, <0x55fa1062c118>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55fa0d0cd1d0]_p22, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x55fa0d0cd1d0]_p23, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <str->
  void                    Return             l     %0.4
Prom 22:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    allMethods, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 23:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     length, <0x55fa0ad54a90>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55fa0d0cd1d0]_p24, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <int$->
  void                    Return             l     %0.3
Prom 24:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    classes, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <vec$->
  void                    Return             l     %0.3
Prom 25:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    allMethods, e0.0
  val?            %0.2  = Force<value>       !v    %0.1, e0.0   <str->
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <true>
  void                    Branch                   %0.3 -> BB2 (if true) | BB7 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    m, e0.0
  val?            %2.1  = Force<value>       !v    %2.0, e0.0   <int->
  lgl$#-          %2.2  = IsType                   %2.1 isA val+   <true>
  void                    Branch                   %2.2 -> BB6 (if true) | BB3 (if false)
BB7   <- [0]
  prom-           %7.0  = MkArg                    unboundValue, .findInheritedMethods[0x55fa0d0cd1d0]_p27, e0.0
  prom-           %7.1  = %7.0
  goto BB5
BB6   <- [2]
  val?^ | miss    %6.0  = LdVar              eR    found, e0.0
  val?            %6.1  = Force<value>       !v    %6.0, e0.0   <lgl->
  val?            %6.2  = %6.1
  goto BB4
BB3   <- [2]
  prom-           %3.0  = MkArg                    unboundValue, .findInheritedMethods[0x55fa0d0cd1d0]_p26, e0.0
  prom-           %3.1  = %3.0
  goto BB4
BB5   <- [7, 4]
  val?            %5.0  = Phi                      %4.3:BB4, %7.1:BB7
  val?            %5.1  = %5.0
  val?            %5.2  = Extract1_1D        !v    %0.2, %5.1, e0.0   <str$->
  void                    Visible            v     
  void                    Return             l     %5.2
BB4   <- [3, 6]
  val?            %4.0  = Phi                      %6.2:BB6, %3.1:BB3
  val?            %4.1  = %4.0
  val?            %4.2  = Extract1_1D        !v    %2.1, %4.1, e0.0   <int$->
  val?            %4.3  = %4.2
  goto BB5
Prom 26:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    found, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 27:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    m, e0.0
  val?            %0.2  = Force              !v    %0.1, e0.0   <val?_>
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <@?>
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    found, e0.0
  val?            %2.1  = Force              !v    %2.0, e0.0   <val?_>
  val?            %2.2  = %2.1
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, .findInheritedMethods[0x55fa0d0cd1d0]_p28, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.2:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract1_1D        !v    %0.2, %3.1, e0.0   <val?_>
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 28:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    found, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 29:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    table, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 30:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     length, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55fa0d0cd1d0]_p31, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 31:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    methods, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 32:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    classes, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <vec$->
  void                    Return             l     %0.3
Prom 33:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    m, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 34:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    tlabel, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 35:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    m, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 36:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    mtable, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 37:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55fa0d0cd1d0]_p38, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x55fa0d0cd1d0]_p39, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 38:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    m, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 39:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    target, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 40:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     .newSignature, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55fa0d0cd1d0]_p41, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x55fa0d0cd1d0]_p42, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 41:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    classes, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 42:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55fa0d0cd1d0]_p43, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x55fa0d0cd1d0]_p44, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 43:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fdef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 44:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    signature, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 45:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, <0x55fa0ad53bd8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55fa0d0cd1d0]_p46, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x55fa0d0cd1d0]_p47, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <str$>
  void                    Return             l     %0.4
Prom 46:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    m, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 47:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    target, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 48:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, <0x55fa0ad53bd8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55fa0d0cd1d0]_p49, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x55fa0d0cd1d0]_p50, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <str$>
  void                    Return             l     %0.4
Prom 49:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    m, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 50:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    defined, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 51:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     body, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55fa0d0cd1d0]_p52, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 52:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    m, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 53:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     is.na, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55fa0d0cd1d0]_p54, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 54:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     match, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55fa0d0cd1d0]_p55, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x55fa0d0cd1d0]_p57, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 55:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     names, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55fa0d0cd1d0]_p56, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 56:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    methods, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 57:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     as.character, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55fa0d0cd1d0]_p58, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 58:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    excluded, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 59:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    nargs, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  val?            %0.4  = Colon              !     2L, %0.3, e0.0   <val?_>
  void                    Return             l     %0.4
Prom 60:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !v    getClass, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55fa0d0cd1d0]_p61, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x55fa0d0cd1d0]_p63, e0.0
  val?            %0.4  = NamedCall          !v    %0.1(%0.2, where=%0.3, .Force=true) e0.0   <val?_>
  val?^ | miss    %0.5  = LdVar              eR    classDefs, e0.0
  val?            %0.6  = Force              !v    %0.5, e0.0   <val?_>
  val?^ | miss    %0.7  = LdVar              eR    i, e0.0
  val?            %0.8  = Force              !v    %0.7, e0.0   <val?_>
  val?            %0.9  = Subassign2_1D      !v    %0.4, %0.6, %0.8, e0.0
  void                    StVar              lW    classDefs, %0.9, e0.0
  void                    StVar              lW    cc, %0.4, e0.0
  lgl$-           %0.12 = Missing            eR    useInherited, e0.0
  lgl$-           %0.13 = AsLogical                %0.12
  lgl$#-          %0.14 = Identical                %0.13, true
  void                    Branch                   %0.14 -> BB2 (if true) | BB7 (if false)
BB2   <- [0]
  void                    Nop                !     
  lgl$-           %2.1  = %0.13
  goto BB3
BB7   <- [0]
  val?^ | miss    %7.0  = LdVar              eR    useInherited, e0.0
  val?            %7.1  = Force              !v    %7.0, e0.0   <val?_>
  lgl$#-          %7.2  = IsType                   %7.1 isA val+   <@?>
  void                    Branch                   %7.2 -> BB8 (if true) | BB10 (if false)
BB3   <- [2, 9]
  lgl$-           %3.0  = Phi                      %9.5:BB9, %2.1:BB2
  lgl$-           %3.1  = %3.0
  lgl$#-          %3.2  = CheckTrueFalse     e     %3.1
  void                    Branch                   %3.2 -> BB6 (if true) | BB4 (if false)
BB8   <- [7]
  val?^ | miss    %8.0  = LdVar              eR    i, e0.0
  val?            %8.1  = Force              !v    %8.0, e0.0   <val?_>
  val?            %8.2  = %8.1
  goto BB9
BB10   <- [7]
  prom-           %10.0 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0d0cd1d0]_p79, e0.0
  prom-           %10.1 = %10.0
  goto BB9
BB6   <- [3]
  (cls|spec|blt)  %6.0  = LdFun              !v    c, e0.0
  prom-           %6.1  = MkArg                    unboundValue, .findInheritedMethods[0x55fa0d0cd1d0]_p71, e0.0
  prom-           %6.2  = MkArg                    unboundValue, .findInheritedMethods[0x55fa0d0cd1d0]_p74, e0.0
  val?            %6.3  = Call               !v    %6.0(%6.1, %6.2, "ANY") e0.0   <val?_>
  val?            %6.4  = %6.3
  goto BB5
BB4   <- [3]
  (cls|spec|blt)  %4.0  = LdFun              !v    @, e0.0
  prom-           %4.1  = MkArg                    unboundValue, .findInheritedMethods[0x55fa0d0cd1d0]_p64, e0.0
  prom-           %4.2  = MkArg                    unboundValue, .findInheritedMethods[0x55fa0d0cd1d0]_p65, e0.0
  val?            %4.3  = Call               !v    %4.0(%4.1, %4.2) e0.0   <val?_>
  val?            %4.4  = %4.3
  goto BB5
BB9   <- [10, 8]
  val?            %9.0  = Phi                      %8.2:BB8, %10.1:BB10
  val?            %9.1  = %9.0
  val?            %9.2  = Extract2_1D        !v    %7.1, %9.1, e0.0   <val?_>
  lgl$-           %9.3  = AsLogical          e     %9.2
  lgl$-           %9.4  = LOr                      %0.13, %9.3
  lgl$-           %9.5  = %9.4
  goto BB3
BB5   <- [4, 6]
  val?            %5.0  = Phi                      %4.4:BB4, %6.4:BB6
  val?            %5.1  = %5.0
  void                    StVar              lW    allLabels, %5.1, e0.0
  (cls|spec|blt)  %5.3  = LdFun              !v    outerLabels, e0.0
  prom-           %5.4  = MkArg                    unboundValue, .findInheritedMethods[0x55fa0d0cd1d0]_p66, e0.0
  prom-           %5.5  = MkArg                    unboundValue, .findInheritedMethods[0x55fa0d0cd1d0]_p67, e0.0
  val?            %5.6  = Call               !v    %5.3(%5.4, %5.5) e0.0   <val?_>
  void                    StVar              lW    labels, %5.6, e0.0
  (cls|spec|blt)  %5.8  = LdFun              !v    c, e0.0
  prom-           %5.9  = MkArg                    unboundValue, .findInheritedMethods[0x55fa0d0cd1d0]_p68, e0.0
  prom-           %5.10 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0d0cd1d0]_p69, e0.0
  val?            %5.11 = Call               !v    %5.8(%5.9, %5.10) e0.0   <val?_>
  void                    Invisible          v     
  void                    StVar              lW    supersList, %5.11, e0.0
  void                    Return             l     %5.11
Prom 61:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    classes, e0.0
  val?            %0.2  = Force              !v    %0.1, e0.0   <val?_>
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <@?>
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    i, e0.0
  val?            %2.1  = Force              !v    %2.0, e0.0   <val?_>
  val?            %2.2  = %2.1
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, .findInheritedMethods[0x55fa0d0cd1d0]_p62, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.2:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract2_1D        !v    %0.2, %3.1, e0.0   <val?_>
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 62:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    i, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 63:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 64:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    cc, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 65:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    className, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 66:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    labels, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 67:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    allLabels, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 68:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    supersList, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 69:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     list, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55fa0d0cd1d0]_p70, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 70:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    allLabels, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 71:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55fa0d0cd1d0]_p72, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x55fa0d0cd1d0]_p73, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 72:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    cc, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 73:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    className, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 74:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     .eligibleSuperClasses, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55fa0d0cd1d0]_p75, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x55fa0d0cd1d0]_p78, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 75:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55fa0d0cd1d0]_p76, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x55fa0d0cd1d0]_p77, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 76:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    cc, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 77:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    contains, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 78:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    simpleOnly, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 79:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    i, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 80:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, <0x55fa0ad53bd8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55fa0d0cd1d0]_p81, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x55fa0d0cd1d0]_p82, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <vec+>
  void                    Return             l     %0.4
Prom 81:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    def, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 82:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    contains, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 83:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    simpleOnly, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <lgl$->
  void                    Return             l     %0.3
Prom 84:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    contains, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 85:
BB0
  env             e0.0  = LdFunctionEnv            
  cls             %0.1  = MkCls                    .eligibleSuperClasses@Prom(1)16, e0.0
  cls             %0.2  = MkCls                    .eligibleSuperClasses@Prom(1)37, e0.0
  val?^ | miss    %0.3  = LdVar              eR    simpleOnly, e0.0
  void                    Visible            v     
  val?            %0.5  = Force<lazy>        !     %0.3, e0.0   <lgl$->
  lgl$#-          %0.6  = CheckTrueFalse     we    %0.5
  void                    Branch                   %0.6 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  void                    Nop                !     
  cls             %2.1  = %0.2
  goto BB3
BB4   <- [0]
  void                    Nop                !     
  cls             %4.1  = %0.1
  goto BB3
BB3   <- [4, 2]
  cls             %3.0  = Phi                      %4.1:BB4, %2.1:BB2
  cls             %3.1  = %3.0
  void                    Return             l     %3.1
Prom 90:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    sig, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <(str|vec)>
  void                    Return             l     %0.3
Prom 94:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     strsplit, <0x55fa0b09e588>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55fa0d0cd1d0]_p95, e0.0
  val?            %0.3  = NamedCall          !     %0.1(%0.2, "#", fixed=true) e0.0   <vec->
  void                    Return             l     %0.3
Prom 95:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    sigs, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 96:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    n, e0.0
  val?            %0.2  = Force<wrapped>     !v    %0.1, e0.0   <int$->
  val?^ | miss    %0.3  = LdVar              eR    siglens, e0.0
  val?            %0.4  = Force<value>       !v    %0.3, e0.0   <int->
  lgl$#-          %0.5  = IsType                   %0.4 isA val+   <true>
  void                    Branch                   %0.5 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    short, e0.0
  val?            %2.1  = Force<value>       !v    %2.0, e0.0   <lgl->
  val?            %2.2  = %2.1
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, .findInheritedMethods[0x55fa0d0cd1d0]_p97, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.2:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract1_1D        !v    %0.4, %3.1, e0.0   <int->
  void                    Visible            v     
  val?            %3.4  = Sub                !     %0.2, %3.2, e0.0   <int->
  void                    Return             l     %3.4
Prom 97:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    short, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 98:
BB0
  env             e0.0  = LdFunctionEnv            
  cls             %0.1  = MkCls                    unknown--fromConstant@Prom(4)0, e0.0
  void                    Return             l     %0.1
Prom 99:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     character, <0x55fa0b4ed7e0>, e0.0
  val?            %0.2  = Call               !     %0.1(1L) e0.0   <str$->
  void                    Return             l     %0.2
Prom 100:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    sigs, e0.0
  val?            %0.2  = Force<wrapped>     !v    %0.1, e0.0   <str->
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <true>
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    short, e0.0
  val?            %2.1  = Force<value>       !v    %2.0, e0.0   <lgl->
  val?            %2.2  = %2.1
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, .findInheritedMethods[0x55fa0d0cd1d0]_p101, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.2:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract1_1D        !v    %0.2, %3.1, e0.0   <str->
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 101:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    short, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 102:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    suffix, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str->
  void                    Return             l     %0.3

│ .findInheritedMethods[0x55fa0d0cd1d0]                                        │
└──────────────────────────────────────────────────────────────────────────────┘
