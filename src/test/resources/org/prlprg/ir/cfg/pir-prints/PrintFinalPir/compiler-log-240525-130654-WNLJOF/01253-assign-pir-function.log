
┌──────────────────────────────────────────────────────────────────────────────┐
│ assign[0x55fa106a1690]                                                       │
│ Context: CorrOrd,!TMany,Argmatch;Eager2,NonRefl2 miss: 2                     │
│ Properties:  ForceOrd: 0                                                     │
├────── Final PIR Version
assign[0x55fa106a1690]
BB0
  val?^ | miss    %0.0  = LdArg                    3
  val?~ | miss    %0.1  = LdArg                    2
  val?^ | miss    %0.2  = LdArg                    1
  val?^ | miss    %0.3  = LdArg                    0
  lgl$#-          %0.4  = Identical                %0.1, missingArg
  lgl$#-          %0.5  = Identical                %0.0, missingArg
  env             e0.6  = MkEnv              l     x=%0.3, value=%0.2, pos=%0.1, envir=%0.0, inherits(miss)=missingArg, immediate(miss)=missingArg, parent=R_BaseNamespace, context 1
  void                    Branch                   %0.4 -> BB2 (if true) | BB9 (if false)
BB2   <- [0]
  prom-           %2.0  = MkArg                    unboundValue, assign[0x55fa106a1690]_p0 (!refl), 
  val?^ | miss    %2.1  = CastType                 up %2.0
  void                    StArg              lW    pos, %2.1, e0.6
  goto BB3
BB9   <- [0]
  void                    Nop                !     
  goto BB3
BB3   <- [2, 9]
  void                    Branch                   %0.5 -> BB8 (if true) | BB4 (if false)
BB8   <- [3]
  prom-           %8.0  = MkArg                    unboundValue, assign[0x55fa106a1690]_p1, e0.6
  val?^ | miss    %8.1  = CastType                 up %8.0
  void                    StArg              lW    envir, %8.1, e0.6
  goto BB5
BB4   <- [3]
  void                    Nop                !     
  goto BB5
BB5   <- [8, 4]
  void                    StArg              lW    inherits, false, e0.6
  void                    StArg              lW    immediate, true, e0.6
  val?^           %5.2  = ChkMissing         e     %0.3
  val?            %5.3  = Force!<lazy>       !v    %5.2, e0.6   <str$->
  lgl$#-          %5.4  = IsType                   %5.3 isA val?-
  void                    Branch                   %5.4 -> BB10 (if true) | BB11 (if false)
BB10   <- [5]
  val?-           %10.0 = CastType           d     dn %5.3   <str$->
  val?^ | miss    %10.1 = LdVar              eR    value, e0.6
  val?            %10.2 = Force!<lazy>       !v    %10.1, e0.6   <val?>
  val?^ | miss    %10.3 = LdVar              eR    envir, e0.6
  val?            %10.4 = Force!<lazy>       !v    %10.3, e0.6   <env->
  val?^ | miss    %10.5 = LdVar              eR    inherits, e0.6
  val?            %10.6 = Force!<lazy>       !v    %10.5, e0.6   <lgl$->
  val?            %10.7 = CallBuiltin        !     assign(%10.0, %10.2, %10.4, %10.6) e0.6
  void                    Return             l     %10.7
BB11   <- [5]
  fs              %11.0 = FrameState         R     0x55fa0df83390+9: [%5.3], env=e0.6
  void                    Deopt              !v    %11.0, Typecheck@0x55fa0e8c6d50[Type#2], %5.3   !
Prom 0:
BB0
  void                    Visible            v     
  void                    Return             l     -1
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     as.environment, <0x55fa0ad60b70>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, assign[0x55fa106a1690]_p2, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <env->
  void                    Return             l     %0.3
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    pos, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <env->
  void                    Return             l     %0.3

│ assign[0x55fa106a1690]                                                       │
└──────────────────────────────────────────────────────────────────────────────┘
