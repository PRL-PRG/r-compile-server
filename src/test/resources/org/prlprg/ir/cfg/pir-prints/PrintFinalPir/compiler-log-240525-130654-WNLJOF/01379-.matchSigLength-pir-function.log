
┌──────────────────────────────────────────────────────────────────────────────┐
│ .matchSigLength[0x55fa1211eb60]                                              │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;Eager3,NonRefl3,!Obj3                │
│ Properties:                                                                  │
├────── Final PIR Version
.matchSigLength[0x55fa1211eb60]
BB0
  val?~+          %0.0  = LdArg                    3
  val?^           %0.1  = LdArg                    2
  val?^           %0.2  = LdArg                    1
  val?^           %0.3  = LdArg                    0
  val?^ | miss    %0.4  = LdVar              eR    .getGenericSigLength, <env 0x55fa0b35b378>
  lgl$#-          %0.5  = Identical                %0.4, function(fdef, env=environment(fdef), check=TR|...
  void                    Branch                   %0.5 -> BB88 (if true) | BB89 (if false)
BB88   <- [0]
  env             e88.0 = MkEnv              l     sig=%0.3, fdef=%0.2, fenv=%0.1, reset=%0.0, parent=<env 0x55fa0b35b378>, context 1
  prom-           %88.1 = MkArg                    unboundValue, .matchSigLength[0x55fa1211eb60]_p0, e88.0
  prom-           %88.2 = MkArg                    unboundValue, .matchSigLength[0x55fa1211eb60]_p1, e88.0
  val?            %88.3 = StaticCall         !v    .getGenericSigLength[0x55fa0ee1fac0](%88.1, %88.2, true) e88.0   <int$->
  lgl$#-          %88.4 = IsType                   %88.3 isA int$-
  void                    Branch                   %88.4 -> BB90 (if true) | BB91 (if false)
BB89   <- [0]
  env             e89.0 = (MkEnv)            l     sig=%0.3, fdef=%0.2, fenv=%0.1, reset=%0.0, parent=<env 0x55fa0b35b378>, context 1
  fs              %89.1 = FrameState         R     0x55fa0bc72fd0+0: [], env=e89.0
  void                    Deopt              !v    %89.1, CallTarget@0x55fa0f3b2e50[Call#0], %0.4
BB90   <- [88]
  int$-           %90.0 = CastType           d     dn %88.3
  void                    StVar              lW    nargs, %90.0, e88.0
  val?^ | miss    %90.2 = LdVar              eR    length, e88.0
  lgl$#-          %90.3 = Identical                <blt length>, %90.2   <true>
  void                    Branch                   %90.3 -> BB92 (if true) | BB93 (if false)
BB91   <- [88]
  fs              %91.0 = FrameState         R     0x55fa0bc72fd0+42: [%88.3], env=e88.0
  void                    Deopt              !v    %91.0, Typecheck@0x55fa0f3b2e50[Type#2], %88.3   !
BB92   <- [90]
  val?^ | miss    %92.0 = LdVar              eR    sig, e88.0
  val?            %92.1 = Force!<lazy>       !v    %92.0, e88.0   <str+>
  lgl$#-          %92.2 = IsType                   %92.1 isA val?+
  void                    Branch                   %92.2 -> BB94 (if true) | BB95 (if false)
BB93   <- [90]
  fs              %93.0 = FrameState         R     0x55fa0bc72fd0+56: [], env=e88.0
  void                    Deopt              !v    %93.0, DeadBranchReached@0x55fa0f3b2e50[Test#0], %90.3   !
BB94   <- [92]
  val?+           %94.0 = CastType           d     dn %92.1   <str+>
  (int|real)$-    %94.1 = CallSafeBuiltin    wed   length(%94.0)    <int$->
  lgl$#-          %94.2 = IsType                   %94.1 isA int$-
  void                    Branch                   %94.2 -> BB96 (if true) | BB97 (if false)
BB95   <- [92]
  fs              %95.0 = FrameState         R     0x55fa0bc72fd0+125: [<blt length>, %92.1], env=e88.0
  void                    Deopt              !v    %95.0, Typecheck@0x55fa0f3b2e50[Type#4], %92.1   !
BB96   <- [94]
  int$-           %96.0 = CastType           d     dn %94.1
  void                    StVar              lW    n, %96.0, e88.0
  val?^ | miss    %96.2 = LdVar              eR    packageSlot, e88.0
  lgl$#-          %96.3 = Identical                %96.2, function(object) <(rir::DispatchTable*)0x55fa0|...
  void                    Branch                   %96.3 -> BB98 (if true) | BB99 (if false)
BB97   <- [94]
  fs              %97.0 = FrameState         R     0x55fa0bc72fd0+147: [%94.1], env=e88.0
  void                    Deopt              !v    %97.0, Typecheck@0x55fa0f3b2e50[Type#5], %94.1   !
BB98   <- [96]
  prom-           %98.0 = MkArg                    unboundValue, .matchSigLength[0x55fa1211eb60]_p2, e88.0
  ct              %98.1 = PushContext        lCL   %98.0, packageSlot(sig), function(object) <(rir::DispatchTable*)0x55fa0|..., e88.0
  val?^           %98.2 = CastType                 up %98.0
  val?^ | miss    %98.3 = LdVar              eR    attr, <env 0x55fa0b35b378>
  lgl$#-          %98.4 = Identical                <blt attr>, %98.3   <true>
  void                    Branch                   %98.4 -> BB100 (if true) | BB101 (if false)
BB99   <- [96]
  fs              %99.0 = FrameState         R     0x55fa0bc72fd0+161: [], env=e88.0
  void                    Deopt              !v    %99.0, CallTarget@0x55fa0f3b2e50[Call#2], %96.2   !
BB100   <- [98]
  env             e100.0 = MkEnv              l     object=%98.2, parent=<env 0x55fa0b35b378>, context 1
  val?            %100.1 = Force!<lazy>       !vL   %98.2, e100.0   <(str|other)>
  val?            %100.2 = CallBuiltin        !v    attr(%100.1, "package") e100.0   <(nil|str)->
  val?            %100.3 = PopContext         C     %100.2, %98.1   <nil->
  void                    StVar              lW    pkgs, %100.3, e88.0
  val?^ | miss    %100.5 = LdVar              eR    n, e88.0
  lgl$#-          %100.6 = IsType                   %100.5 isA int$-
  void                    Branch                   %100.6 -> BB102 (if true) | BB103 (if false)
BB101   <- [98]
  fs              %101.0 = FrameState         R     0x55fa0bc72fd0+193: [], env=e88.0
  env             e101.1 = (MkEnv)            l     object=%98.2, parent=<env 0x55fa0b35b378>, context 1
  fs              %101.2 = FrameState         R     0x55fa0cd91810+17: [<blt attr>, %98.4], env=e101.1, next=%101.0
  void                    Deopt              !v    %101.2, DeadBranchReached@0x55fa0eb379b8[Test#0], %98.4   !
BB102   <- [100]
  int$-           %102.0 = CastType           d     dn %100.5
  val?^ | miss    %102.1 = LdVar              eR    nargs, e88.0
  lgl$#-          %102.2 = IsType                   %102.1 isA int$-
  void                    Branch                   %102.2 -> BB104 (if true) | BB105 (if false)
BB103   <- [100]
  void                    Nop                !     
  val?^ | miss    %103.1 = %100.5
  dr              %103.2 = Typecheck@0x55fa0f3b2e50[Type#8]
  goto BB15
BB104   <- [102]
  int$-           %104.0 = CastType           d     dn %102.1
  lgl$-           %104.1 = Lt                 d     %102.0, %104.0, elided   <lgl$->
  lgl$#-          %104.2 = CheckTrueFalse     e     %104.1
  void                    Branch                   %104.2 -> BB71 (if true) | BB17 (if false)
BB105   <- [102]
  void                    Nop                !     
  val?^ | miss    %105.1 = %102.1
  dr              %105.2 = Typecheck@0x55fa0f3b2e50[Type#9]
  goto BB15
BB15   <- [103, 105]
  val?^ | miss    %15.0 = Phi                      %103.1:BB103, %105.1:BB105
  val?^ | miss    %15.1 = %15.0
  dr              %15.2 = Phi                      %103.2:BB103, %105.2:BB105
  dr              %15.3 = %15.2
  fs              %15.4 = FrameState         R     0x55fa0bc72fd0+207: [], env=e88.0
  void                    Deopt              !v    %15.4, %15.3, %15.1   !
BB71   <- [104]
  int$-           %71.0 = Sub                d     %104.0, %102.0, elided   <val?_>
  void                    StVar              lW    more, %71.0, e88.0
  val?^ | miss    %71.2 = LdVar              eR    c, e88.0
  lgl$#-          %71.3 = Identical                <blt c>, %71.2   <@?>
  void                    Branch                   %71.3 -> BB84 (if true) | BB72 (if false)
BB17   <- [104]
  lgl$-           %17.0 = Gt                 d     %102.0, %104.0, elided   <lgl$->
  lgl$#-          %17.1 = CheckTrueFalse     e     %17.0
  void                    Branch                   %17.1 -> BB23 (if true) | BB18 (if false)
BB84   <- [71]
  val             %84.0 = ChkMissing         e     %100.3
  (cls|spec|blt)  %84.1 = LdFun              !v    rep, e88.0
  prom-           %84.2 = MkArg                    unboundValue, .matchSigLength[0x55fa1211eb60]_p24, e88.0
  val?            %84.3 = Call               !v    %84.1("methods", %84.2) e88.0   <val?_>
  lgl$#-          %84.4 = IsType                   %84.3 isA val?+
  lgl$#-          %84.5 = IsType                   %100.3 isA val?+
  void                    Branch                   %84.5 -> BB106 (if true) | BB107 (if false)
BB72   <- [71]
  val             %72.0 = ChkMissing         e     %100.3
  (cls|spec|blt)  %72.1 = LdFun              !v    rep, e88.0
  prom-           %72.2 = MkArg                    unboundValue, .matchSigLength[0x55fa1211eb60]_p17, e88.0
  val?            %72.3 = Call               !v    %72.1("methods", %72.2) e88.0   <val?_>
  val?            %72.4 = CallBuiltin        !v    c(%100.3, %72.3) e88.0
  val?            %72.5 = %72.4
  goto BB73
BB23   <- [17]
  val?^ | miss    %23.0 = LdVar              eR    all, e88.0
  lgl$#-          %23.1 = Identical                <blt all>, %23.0   <@?>
  void                    Branch                   %23.1 -> BB59 (if true) | BB24 (if false)
BB18   <- [17]
  void                    Nop                !     
  goto BB19
BB106   <- [84]
  val?+           %106.0 = CastType           d     dn %100.3   <val?_>
  void                    Branch                   %84.4 -> BB112 (if true) | BB113 (if false)
BB107   <- [84]
  void                    Nop                !     
  val?            %107.1 = %100.3
  dr              %107.2 = Typecheck@0x55fa0f3b2e50[Type#70]
  goto BB85
BB73   <- [72, 112]
  val?            %73.0 = Phi                      %72.5:BB72, %112.2:BB112   <val?_>
  val?            %73.1 = %73.0
  void                    StVar              lW    pkgs, %73.1, e88.0
  val?^ | miss    %73.3 = LdVar              eR    c, e88.0
  lgl$#-          %73.4 = Identical                <blt c>, %73.3   <@?>
  void                    Branch                   %73.4 -> BB76 (if true) | BB74 (if false)
BB59   <- [23]
  val?^ | miss    %59.0 = LdVar              eR    sig, e88.0
  val?            %59.1 = Force!             !v    %59.0, e88.0   <val?_>
  lgl$#-          %59.2 = IsType                   %59.1 isA val+   <@?>
  void                    Branch                   %59.2 -> BB66 (if true) | BB60 (if false)
BB24   <- [23]
  val?^ | miss    %24.0 = LdVar              eR    sig, e88.0
  val?            %24.1 = Force!             !v    %24.0, e88.0   <val?_>
  lgl$#-          %24.2 = IsType                   %24.1 isA val+   <@?>
  void                    Branch                   %24.2 -> BB58 (if true) | BB25 (if false)
BB19   <- [18, 56, 57, 38]
  void                    Nop                !     
  goto BB20
BB112   <- [106]
  val?+           %112.0 = CastType           d     dn %84.3   <val?_>
  val+            %112.1 = CallSafeBuiltin    wed   c(%106.0, %112.0) 
  val+            %112.2 = %112.1
  goto BB73
BB113   <- [106]
  void                    Nop                !     
  val?            %113.1 = %84.3
  dr              %113.2 = Typecheck@0x55fa0f3b2e50[Type#72]
  goto BB85
BB85   <- [107, 113]
  val?^ | miss    %85.0 = Phi                      %107.1:BB107, %113.1:BB113
  val?^ | miss    %85.1 = %85.0
  dr              %85.2 = Phi                      %107.2:BB107, %113.2:BB113
  dr              %85.3 = %85.2
  fs              %85.4 = FrameState         R     0x55fa0bc72fd0+1361: [<blt c>, %100.3, %84.3], env=e88.0
  void                    Deopt              !v    %85.4, %85.3, %85.1   !
BB76   <- [73]
  val?^ | miss    %76.0 = LdVar              eR    as.character, e88.0
  lgl$#-          %76.1 = Identical                <blt as.character>, %76.0   <@?>
  void                    Branch                   %76.1 -> BB81 (if true) | BB77 (if false)
BB74   <- [73]
  val?^ | miss    %74.0 = LdVar              eR    sig, e88.0
  val?            %74.1 = Force!             !v    %74.0, e88.0   <val?_>
  val?            %74.2 = CallBuiltin        !v    as.character(%74.1) e88.0   <val?_>
  (cls|spec|blt)  %74.3 = LdFun              !v    rep, e88.0
  prom-           %74.4 = MkArg                    unboundValue, .matchSigLength[0x55fa1211eb60]_p21, e88.0
  val?            %74.5 = Call               !v    %74.3("ANY", %74.4) e88.0   <val?_>
  val?            %74.6 = CallBuiltin        !v    c(%74.2, %74.5) e88.0
  val?            %74.7 = %74.6
  goto BB75
BB66   <- [59]
  val?^ | miss    %66.0 = LdVar              eR    nargs, e88.0
  val?            %66.1 = Force!             !v    %66.0, e88.0   <val?_>
  lgl$#-          %66.2 = IsType                   %66.1 isA val?+
  void                    Branch                   %66.2 -> BB118 (if true) | BB119 (if false)
BB60   <- [59]
  prom-           %60.0 = MkArg                    unboundValue, .matchSigLength[0x55fa1211eb60]_p14, e88.0
  prom-           %60.1 = %60.0
  goto BB61
BB58   <- [24]
  val?^ | miss    %58.0 = LdVar              eR    nargs, e88.0
  val?            %58.1 = Force!             !v    %58.0, e88.0   <val?_>
  val?            %58.2 = Add                !v    %58.1, 1, e88.0   <val?_>
  val?^ | miss    %58.3 = LdVar              eR    n, e88.0
  val?            %58.4 = Force!             !v    %58.3, e88.0   <val?_>
  val?            %58.5 = Colon              !v    %58.2, %58.4, e88.0   <val?_>
  val?            %58.6 = %58.5
  goto BB26
BB25   <- [24]
  prom-           %25.0 = MkArg                    unboundValue, .matchSigLength[0x55fa1211eb60]_p5, e88.0
  prom-           %25.1 = %25.0
  goto BB26
BB20   <- [19, 75]
  val?^ | miss    %20.0 = LdVar              eR    pkgs, e88.0
  lgl$#-          %20.1 = IsType                   %20.0 isA val?~- | miss
  void                    Branch                   %20.1 -> BB114 (if true) | BB115 (if false)
BB81   <- [76]
  val?^ | miss    %81.0 = LdVar              eR    sig, e88.0
  val?            %81.1 = Force!             !v    %81.0, e88.0   <val?_>
  lgl$#-          %81.2 = IsType                   %81.1 isA val?+
  void                    Branch                   %81.2 -> BB120 (if true) | BB121 (if false)
BB77   <- [76]
  val?^ | miss    %77.0 = LdVar              eR    sig, e88.0
  val?            %77.1 = Force!             !v    %77.0, e88.0   <val?_>
  val?            %77.2 = CallBuiltin        !v    as.character(%77.1) e88.0
  val?            %77.3 = %77.2
  goto BB78
BB75   <- [74, 126]
  val?            %75.0 = Phi                      %74.7:BB74, %126.2:BB126   <val?_>
  val?            %75.1 = %75.0
  void                    StVar              lW    sig, %75.1, e88.0
  goto BB20
BB118   <- [66]
  val?+           %118.0 = CastType           d     dn %66.1   <val?_>
  (real|complex)+ %118.1 = Add                wed   %118.0, 1, elided   <val?_>
  val?^ | miss    %118.2 = LdVar              eR    n, e88.0
  val?            %118.3 = Force!             !v    %118.2, e88.0   <val?_>
  lgl$#-          %118.4 = IsType                   %118.3 isA val?+
  void                    Branch                   %118.4 -> BB128 (if true) | BB129 (if false)
BB119   <- [66]
  fs              %119.0 = FrameState         R     0x55fa0bc72fd0+406: [<blt all>, %59.1, %66.1], env=e88.0
  void                    Deopt              !v    %119.0, Typecheck@0x55fa0f3b2e50[Type#30], %66.1   !
BB61   <- [60, 128]
  (int|real|complex|prom)+ %61.0 = Phi                      %128.2:BB128, %60.1:BB60
  (int|real|complex|prom)+ %61.1 = %61.0
  lgl$#-          %61.2 = IsType                   %59.1 isA val?+
  void                    Branch                   %61.2 -> BB108 (if true) | BB109 (if false)
BB26   <- [25, 58]
  val?            %26.0 = Phi                      %58.6:BB58, %25.1:BB25
  val?            %26.1 = %26.0
  val?            %26.2 = Extract1_1D        !v    %24.1, %26.1, e88.0   <val?_>
  val?            %26.3 = Eq                 !v    %26.2, "ANY", e88.0   <val?_>
  val?            %26.4 = CallBuiltin        !v    all(%26.3) e88.0
  val?            %26.5 = %26.4
  goto BB27
BB114   <- [20]
  val?~- | miss   %114.0 = CastType           d     dn %20.0
  val?-           %114.1 = Force!<value>            %114.0,    <nil->
  val?^ | miss    %114.2 = LdVar              eR    packageSlot<-, e88.0
  lgl$#-          %114.3 = Identical                %114.2, function(object, value) <(rir::DispatchTable*)|...
  void                    Branch                   %114.3 -> BB116 (if true) | BB117 (if false)
BB115   <- [20]
  void                    Nop                !     
  val?^ | miss    %115.1 = %20.0
  dr              %115.2 = Typecheck@0x55fa0f3b2e50[Type#84]
  goto BB21
BB120   <- [81]
  val?+           %120.0 = CastType           d     dn %81.1   <val?_>
  val+            %120.1 = CallSafeBuiltin    wed   as.character(%120.0) 
  val+            %120.2 = %120.1
  goto BB78
BB121   <- [81]
  fs              %121.0 = FrameState         R     0x55fa0bc72fd0+1531: [<blt c>, <blt as.character>, %81.1], env=e88.0
  void                    Deopt              !v    %121.0, Typecheck@0x55fa0f3b2e50[Type#79], %81.1   !
BB78   <- [77, 120]
  val?            %78.0 = Phi                      %77.3:BB77, %120.2:BB120   <val?_>
  val?            %78.1 = %78.0
  (cls|spec|blt)  %78.2 = LdFun              !v    rep, e88.0
  prom-           %78.3 = MkArg                    unboundValue, .matchSigLength[0x55fa1211eb60]_p23, e88.0
  val?            %78.4 = Call               !v    %78.2("ANY", %78.3) e88.0   <val?_>
  lgl$#-          %78.5 = IsType                   %78.4 isA val?+
  lgl$#-          %78.6 = IsType                   %78.1 isA val?+
  void                    Branch                   %78.6 -> BB124 (if true) | BB125 (if false)
BB128   <- [118]
  val?+           %128.0 = CastType           d     dn %118.3   <val?_>
  (int|real|complex)+ %128.1 = Colon              wed   %118.1, %128.0, elided   <val?_>
  (int|real|complex)+ %128.2 = %128.1
  goto BB61
BB129   <- [118]
  fs              %129.0 = FrameState         R     0x55fa0bc72fd0+433: [<blt all>, %59.1, %118.1, %118.3], env=e88.0
  void                    Deopt              !v    %129.0, Typecheck@0x55fa0f3b2e50[Type#32], %118.3   !
BB108   <- [61]
  val?+           %108.0 = CastType           d     dn %59.1   <val?_>
  val?            %108.1 = Extract1_1D        wed   %108.0, %61.1, elided   <val?_>
  lgl$#-          %108.2 = IsType                   %108.1 isA val?+
  void                    Branch                   %108.2 -> BB110 (if true) | BB111 (if false)
BB109   <- [61]
  fs              %109.0 = FrameState         R     0x55fa0bc72fd0+444: [<blt all>, %59.1, %61.1], env=e88.0
  void                    Deopt              !v    %109.0, Typecheck@0x55fa0f3b2e50[Type#25], %59.1   !
BB27   <- [26, 110]
  val?            %27.0 = Phi                      %26.5:BB26, %110.3:BB110   <val?_>
  val?            %27.1 = %27.0
  lgl$#-          %27.2 = CheckTrueFalse     we    %27.1
  void                    Branch                   %27.2 -> BB55 (if true) | BB28 (if false)
BB116   <- [114]
  val?^ | miss    %116.0 = LdVar              eR    sig, e88.0
  val?            %116.1 = Force!<wrapped>    !v    %116.0, e88.0   <str+>
  ct              %116.2 = PushContext        lCL   %116.1, %114.1, packageSlot<-(sig, value=pkgs), function(object, value) <(rir::DispatchTable*)|..., e88.0
  env             e116.3 = MkEnv              l     object=%116.1, value=%114.1, parent=<env 0x55fa0b35b378>, context 1
  (cls|spec|blt)  %116.4 = LdFun              !v    attr<-, <0x55fa0ad57e08>, <env 0x55fa0b35b378>
  val?            %116.5 = NamedCall          !v    %116.4(%116.1, "package", value=%114.1) e116.3   <str+>
  void                    StVar              lW    object, %116.5, e116.3
  val             %116.7 = ChkMissing         e     %116.5
  val?            %116.8 = PopContext         C     %116.5, %116.2   <str+>
  void                    StVar              lW    sig, %116.8, e88.0
  val             %116.10 = ChkMissing         e     %116.8
  void                    Visible            v     
  void                    Return             l     %116.8
BB117   <- [114]
  void                    Nop                !     
  val?^ | miss    %117.1 = %114.2
  dr              %117.2 = CallTarget@0x55fa0f3b2e50[Call#17]
  goto BB21
BB21   <- [115, 117]
  val?^ | miss    %21.0 = Phi                      %115.1:BB115, %117.1:BB117
  val?^ | miss    %21.1 = %21.0
  dr              %21.2 = Phi                      %115.2:BB115, %117.2:BB117
  dr              %21.3 = %21.2
  fs              %21.4 = FrameState         R     0x55fa0bc72fd0+1631: [], env=e88.0
  void                    Deopt              !v    %21.4, %21.3, %21.1   !
BB124   <- [78]
  val?+           %124.0 = CastType           d     dn %78.1   <val?_>
  void                    Branch                   %78.5 -> BB126 (if true) | BB127 (if false)
BB125   <- [78]
  void                    Nop                !     
  val?            %125.1 = %78.1
  dr              %125.2 = Typecheck@0x55fa0f3b2e50[Type#80]
  goto BB79
BB110   <- [108]
  val?+           %110.0 = CastType           d     dn %108.1   <val?_>
  lgl             %110.1 = Eq                 wed   %110.0, "ANY", elided   <val?_>
  val?            %110.2 = CallBuiltin        !v    all(%110.1) e88.0
  val?            %110.3 = %110.2
  goto BB27
BB111   <- [108]
  fs              %111.0 = FrameState         R     0x55fa0bc72fd0+445: [<blt all>, %108.1], env=e88.0
  void                    Deopt              !v    %111.0, Typecheck@0x55fa0f3b2e50[Type#34], %108.1   !
BB55   <- [27]
  val?^ | miss    %55.0 = LdVar              eR    nargs, e88.0
  val?            %55.1 = Force!             !v    %55.0, e88.0   <val?_>
  (cls|spec|blt)  %55.2 = LdFun              !v    length<-, e88.0
  val?^ | miss    %55.3 = LdVar              eR    sig, e88.0
  val?            %55.4 = Force!             !v    %55.3, e88.0   <val?_>
  val?            %55.5 = NamedCall          !v    %55.2(%55.4, value=%55.1) e88.0
  void                    StVar              lW    sig, %55.5, e88.0
  val?^ | miss    %55.7 = LdVar              eR    pkgs, e88.0
  val?            %55.8 = Force!             !v    %55.7, e88.0   <val?_>
  lgl$-           %55.9 = Is                       %55.8, NULL
  lgl$-           %55.10 = Not                d     %55.9, elided
  lgl$#-          %55.11 = CheckTrueFalse     e     %55.10
  void                    Branch                   %55.11 -> BB57 (if true) | BB56 (if false)
BB28   <- [27]
  val?^ | miss    %28.0 = LdVar              eR    sig, e88.0
  val?            %28.1 = Force!             !v    %28.0, e88.0   <val?_>
  lgl$#-          %28.2 = IsType                   %28.1 isA val+   <@?>
  void                    Branch                   %28.2 -> BB54 (if true) | BB29 (if false)
BB126   <- [124]
  val?+           %126.0 = CastType           d     dn %78.4   <val?_>
  val+            %126.1 = CallSafeBuiltin    wed   c(%124.0, %126.0) 
  val+            %126.2 = %126.1
  goto BB75
BB127   <- [124]
  void                    Nop                !     
  val?            %127.1 = %78.4
  dr              %127.2 = Typecheck@0x55fa0f3b2e50[Type#82]
  goto BB79
BB79   <- [125, 127]
  val?            %79.0 = Phi                      %125.1:BB125, %127.1:BB127
  val?            %79.1 = %79.0
  dr              %79.2 = Phi                      %125.2:BB125, %127.2:BB127
  dr              %79.3 = %79.2
  fs              %79.4 = FrameState         R     0x55fa0bc72fd0+1595: [<blt c>, %78.1, %78.4], env=e88.0
  void                    Deopt              !v    %79.4, %79.3, %79.1   !
BB57   <- [55]
  val?^ | miss    %57.0 = LdVar              eR    nargs, e88.0
  val?            %57.1 = Force!             !v    %57.0, e88.0   <val?_>
  (cls|spec|blt)  %57.2 = LdFun              !v    length<-, e88.0
  val?^ | miss    %57.3 = LdVar              eR    pkgs, e88.0
  val?            %57.4 = Force!             !v    %57.3, e88.0   <val?_>
  val?            %57.5 = NamedCall          !v    %57.2(%57.4, value=%57.1) e88.0
  void                    StVar              lW    pkgs, %57.5, e88.0
  goto BB19
BB56   <- [55]
  void                    Nop                !     
  goto BB19
BB54   <- [28]
  val?^ | miss    %54.0 = LdVar              eR    n, e88.0
  val?            %54.1 = Force!             !v    %54.0, e88.0   <val?_>
  val?            %54.2 = %54.1
  goto BB30
BB29   <- [28]
  prom-           %29.0 = MkArg                    unboundValue, .matchSigLength[0x55fa1211eb60]_p11, e88.0
  prom-           %29.1 = %29.0
  goto BB30
BB30   <- [29, 54]
  val?            %30.0 = Phi                      %54.2:BB54, %29.1:BB29
  val?            %30.1 = %30.0
  val?            %30.2 = Extract2_1D        !v    %28.1, %30.1, e88.0   <val?_>
  lgl$#-          %30.3 = IsType                   %30.2 isA val?+
  void                    Branch                   %30.3 -> BB122 (if true) | BB123 (if false)
BB122   <- [30]
  val?+           %122.0 = CastType           d     dn %30.2   <val?_>
  lgl             %122.1 = Eq                 wed   %122.0, "ANY", elided   <val?_>
  lgl$#-          %122.2 = CheckTrueFalse     we    %122.1   <@?>
  void                    Branch                   %122.2 -> BB41 (if true) | BB33 (if false)
BB123   <- [30]
  fs              %123.0 = FrameState         R     0x55fa0bc72fd0+551: [%30.2], env=e88.0
  void                    Deopt              !v    %123.0, Typecheck@0x55fa0f3b2e50[Type#40], %30.2   !
BB41   <- [122]
  val?^ | miss    %41.0 = LdVar              eR    n, e88.0
  val?            %41.1 = Force!             !v    %41.0, e88.0   <val?_>
  lgl$#-          %41.2 = IsType                   %41.1 isA val?+
  void                    Branch                   %41.2 -> BB130 (if true) | BB131 (if false)
BB33   <- [122]
  void                    Nop                !     
  goto BB34
BB130   <- [41]
  val?+           %130.0 = CastType           d     dn %41.1   <val?_>
  (real|complex)+ %130.1 = Sub                wed   %130.0, 1, elided   <val?_>
  void                    StVar              lW    n, %130.1, e88.0
  goto BB44
BB131   <- [41]
  fs              %131.0 = FrameState         R     0x55fa0bc72fd0+589: [%41.1], env=e88.0
  void                    Deopt              !v    %131.0, Typecheck@0x55fa0f3b2e50[Type#42], %41.1   !
BB34   <- [49, 33]
  val?^ | miss    %34.0 = LdVar              eR    reset, e88.0
  val?            %34.1 = Force!             !v    %34.0, e88.0   <val?_>
  lgl$#-          %34.2 = CheckTrueFalse     we    %34.1
  void                    Branch                   %34.2 -> BB40 (if true) | BB35 (if false)
BB44   <- [130, 134]
  val?^ | miss    %44.0 = LdVar              eR    sig, e88.0
  val?            %44.1 = Force!             !v    %44.0, e88.0   <val?_>
  lgl$#-          %44.2 = IsType                   %44.1 isA val+   <@?>
  void                    Branch                   %44.2 -> BB53 (if true) | BB45 (if false)
BB40   <- [34]
  (cls|spec|blt)  %40.0 = LdFun              !v    .resetSigLength, e88.0
  prom-           %40.1 = MkArg                    unboundValue, .matchSigLength[0x55fa1211eb60]_p8, e88.0
  prom-           %40.2 = MkArg                    unboundValue, .matchSigLength[0x55fa1211eb60]_p9, e88.0
  val?            %40.3 = Call               !v    %40.0(%40.1, %40.2) e88.0
  goto BB36
BB35   <- [34]
  void                    Nop                !     
  goto BB36
BB53   <- [44]
  val?^ | miss    %53.0 = LdVar              eR    n, e88.0
  val?            %53.1 = Force!             !v    %53.0, e88.0   <val?_>
  val?            %53.2 = %53.1
  goto BB46
BB45   <- [44]
  prom-           %45.0 = MkArg                    unboundValue, .matchSigLength[0x55fa1211eb60]_p10, e88.0
  prom-           %45.1 = %45.0
  goto BB46
BB36   <- [35, 40]
  val?^ | miss    %36.0 = LdVar              eR    n, e88.0
  val?            %36.1 = Force!             !v    %36.0, e88.0   <val?_>
  (cls|spec|blt)  %36.2 = LdFun              !v    length<-, e88.0
  val?^ | miss    %36.3 = LdVar              eR    sig, e88.0
  val?            %36.4 = Force!             !v    %36.3, e88.0   <val?_>
  val?            %36.5 = NamedCall          !v    %36.2(%36.4, value=%36.1) e88.0
  void                    StVar              lW    sig, %36.5, e88.0
  val?^ | miss    %36.7 = LdVar              eR    pkgs, e88.0
  val?            %36.8 = Force!             !v    %36.7, e88.0   <val?_>
  lgl$-           %36.9 = Is                       %36.8, NULL
  lgl$-           %36.10 = Not                d     %36.9, elided
  lgl$#-          %36.11 = CheckTrueFalse     e     %36.10
  void                    Branch                   %36.11 -> BB39 (if true) | BB37 (if false)
BB46   <- [45, 53]
  val?            %46.0 = Phi                      %53.2:BB53, %45.1:BB45
  val?            %46.1 = %46.0
  val?            %46.2 = Extract2_1D        !v    %44.1, %46.1, e88.0   <val?_>
  lgl$#-          %46.3 = IsType                   %46.2 isA val?+
  void                    Branch                   %46.3 -> BB132 (if true) | BB133 (if false)
BB39   <- [36]
  val?^ | miss    %39.0 = LdVar              eR    n, e88.0
  val?            %39.1 = Force!             !v    %39.0, e88.0   <val?_>
  (cls|spec|blt)  %39.2 = LdFun              !v    length<-, e88.0
  val?^ | miss    %39.3 = LdVar              eR    pkgs, e88.0
  val?            %39.4 = Force!             !v    %39.3, e88.0   <val?_>
  val?            %39.5 = NamedCall          !v    %39.2(%39.4, value=%39.1) e88.0
  void                    StVar              lW    pkgs, %39.5, e88.0
  goto BB38
BB37   <- [36]
  void                    Nop                !     
  goto BB38
BB132   <- [46]
  val?+           %132.0 = CastType           d     dn %46.2   <val?_>
  lgl             %132.1 = Eq                 wed   %132.0, "ANY", elided   <val?_>
  lgl$#-          %132.2 = CheckTrueFalse     we    %132.1
  void                    Branch                   %132.2 -> BB50 (if true) | BB49 (if false)
BB133   <- [46]
  fs              %133.0 = FrameState         R     0x55fa0bc72fd0+675: [%46.2], env=e88.0
  void                    Deopt              !v    %133.0, Typecheck@0x55fa0f3b2e50[Type#47], %46.2   !
BB38   <- [37, 39]
  void                    Nop                !     
  goto BB19
BB50   <- [132]
  val?^ | miss    %50.0 = LdVar              eR    n, e88.0
  val?            %50.1 = Force!             !v    %50.0, e88.0   <val?_>
  lgl$#-          %50.2 = IsType                   %50.1 isA val?+
  void                    Branch                   %50.2 -> BB134 (if true) | BB135 (if false)
BB49   <- [132]
  void                    Nop                !     
  goto BB34
BB134   <- [50]
  val?+           %134.0 = CastType           d     dn %50.1   <val?_>
  (real|complex)+ %134.1 = Sub                wed   %134.0, 1, elided   <val?_>
  void                    StVar              lW    n, %134.1, e88.0
  goto BB44
BB135   <- [50]
  fs              %135.0 = FrameState         R     0x55fa0bc72fd0+708: [%50.1], env=e88.0
  void                    Deopt              !v    %135.0, Typecheck@0x55fa0f3b2e50[Type#49], %50.1   !
Prom 0:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fdef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fenv, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    sig, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str+>
  void                    Return             l     %0.3
Prom 5:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    nargs, e0.0
  val?            %0.2  = Force              !v    %0.1, e0.0   <val?_>
  val?            %0.3  = Add                !v    %0.2, 1, e0.0   <val?_>
  val?^ | miss    %0.4  = LdVar              eR    n, e0.0
  void                    Visible            v     
  val?            %0.6  = Force              !     %0.4, e0.0   <val?_>
  val?            %0.7  = Colon              !     %0.3, %0.6, e0.0   <val?_>
  void                    Return             l     %0.7
Prom 8:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fdef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 9:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    n, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 10:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    n, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 11:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    n, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 14:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    nargs, e0.0
  val?            %0.2  = Force              !v    %0.1, e0.0   <val?_>
  val?            %0.3  = Add                !v    %0.2, 1, e0.0   <val?_>
  val?^ | miss    %0.4  = LdVar              eR    n, e0.0
  void                    Visible            v     
  val?            %0.6  = Force              !     %0.4, e0.0   <val?_>
  val?            %0.7  = Colon              !     %0.3, %0.6, e0.0   <val?_>
  void                    Return             l     %0.7
Prom 17:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    more, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 21:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    more, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 23:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    more, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 24:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    more, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3

│ .matchSigLength[0x55fa1211eb60]                                              │
└──────────────────────────────────────────────────────────────────────────────┘
