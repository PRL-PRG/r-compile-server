
┌──────────────────────────────────────────────────────────────────────────────┐
│ .fillSignatures[0x55fa0f3f8d90]                                              │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;NonRefl0,!Obj0                       │
│ Properties:                                                                  │
├────── Final PIR Version
.fillSignatures[0x55fa0f3f8d90]
BB0
  val?^           %0.0  = LdArg                    1
  val?^           %0.1  = LdArg                    0
  val?^ | miss    %0.2  = LdVar              eR    lengths, <env 0x55fa0b35b378>
  lgl$#-          %0.3  = Identical                %0.2, function(x, use.names=TRUE) <(rir::DispatchTab|...
  void                    Branch                   %0.3 -> BB12 (if true) | BB13 (if false)
BB12   <- [0]
  env             e12.0 = MkEnv              l     sigs=%0.1, n=%0.0, parent=<env 0x55fa0b35b378>, context 1
  prom-           %12.1 = MkArg                    unboundValue, .fillSignatures[0x55fa0f3f8d90]_p0, e12.0
  ct              %12.2 = PushContext        lCL   %12.1, lengths(strsplit(sigs, "#", fixed=TRUE)), function(x, use.names=TRUE) <(rir::DispatchTab|..., e12.0
  val?^           %12.3 = CastType                 up %12.1
  env             e12.4 = MkEnv              l     x=%12.3, use.names(miss)=true, parent=R_BaseNamespace, context 1
  val?            %12.5 = Force!<lazy>       !vr   %12.3,    <vec+>
  val?            %12.6 = CallBuiltin        !v    lengths(%12.5, true) e12.4
  val?            %12.7 = PopContext         C     %12.6, %12.2   <int->
  void                    StVar              lW    siglens, %12.7, e12.0
  val?^ | miss    %12.9 = LdVar              eR    n, e12.0
  val?            %12.10 = Force!<lazy>       !v    %12.9, e12.0   <int$->
  lgl$#-          %12.11 = IsType                   %12.10 isA int$-
  cls             %12.12 = MkCls                    .fillSignatures@Prom(4)0, e12.0
  val?^ | miss    %12.13 = LdVar              eR    siglens, e12.0
  lgl$#-          %12.14 = IsType                   %12.13 isA int-
  void                    Branch                   %12.14 -> BB14 (if true) | BB15 (if false)
BB13   <- [0]
  env             e13.0 = (MkEnv)            l     sigs=%0.1, n=%0.0, parent=<env 0x55fa0b35b378>, context 1
  fs              %13.1 = FrameState         R     0x55fa0ba91500+0: [], env=e13.0
  void                    Deopt              !v    %13.1, CallTarget@0x55fa11c90448[Call#0], %0.2
BB14   <- [12]
  int-            %14.0 = CastType           d     dn %12.13
  void                    Branch                   %12.11 -> BB16 (if true) | BB17 (if false)
BB15   <- [12]
  void                    Nop                !     
  val?^ | miss    %15.1 = %12.13
  dr              %15.2 = Typecheck@0x55fa11c90448[Type#4]
  goto BB3
BB16   <- [14]
  int$-           %16.0 = CastType           d     dn %12.10
  lgl-            %16.1 = Gt                 wed   %16.0, %14.0, elided   <lgl->
  void                    StVar              lW    short, %16.1, e12.0
  val?^ | miss    %16.3 = LdVar              eR    vapply, e12.0
  lgl$#-          %16.4 = Identical                %16.3, function(X, FUN, FUN.VALUE, ..., USE.NAMES=TRU|...
  void                    Branch                   %16.4 -> BB18 (if true) | BB19 (if false)
BB17   <- [14]
  void                    Nop                !     
  val?            %17.1 = %12.10
  dr              %17.2 = Typecheck@0x55fa11c90448[Type#3]
  goto BB3
BB3   <- [15, 17]
  val?^ | miss    %3.0  = Phi                      %15.1:BB15, %17.1:BB17
  val?^ | miss    %3.1  = %3.0
  dr              %3.2  = Phi                      %15.2:BB15, %17.2:BB17
  dr              %3.3  = %3.2
  fs              %3.4  = FrameState         R     0x55fa0ba91500+55: [%12.10], env=e12.0
  void                    Deopt              !v    %3.4, %3.3, %3.1   !
BB18   <- [16]
  prom-           %18.0 = MkArg                    unboundValue, .fillSignatures[0x55fa0f3f8d90]_p2, e12.0
  prom-           %18.1 = MkArg                    %12.12, .fillSignatures[0x55fa0f3f8d90]_p4 (!refl), e12.0
  prom-           %18.2 = MkArg                    unboundValue, .fillSignatures[0x55fa0f3f8d90]_p5, e12.0
  val?            %18.3 = StaticCall         !v    vapply[0x55fa0da72d00](%18.0, %18.1, %18.2) { 0 1 2 } e12.0   <str->
  void                    StVar              lW    suffix, %18.3, e12.0
  val?^ | miss    %18.5 = LdVar              eR    sigs !upd, e12.0
  val?            %18.6 = Force!             !v    %18.5, e12.0
  val?^ | miss    %18.7 = LdVar              eR    paste, e12.0
  lgl$#-          %18.8 = Identical                %18.7, function(..., sep=" ", collapse=NULL, recycle0|...
  void                    Branch                   %18.8 -> BB20 (if true) | BB21 (if false)
BB19   <- [16]
  fs              %19.0 = FrameState         R     0x55fa0ba91500+89: [], env=e12.0
  void                    Deopt              !v    %19.0, CallTarget@0x55fa11c90448[Call#2], %16.3   !
BB20   <- [18]
  prom-           %20.0 = MkArg                    unboundValue, .fillSignatures[0x55fa0f3f8d90]_p6, e12.0
  prom-           %20.1 = MkArg                    unboundValue, .fillSignatures[0x55fa0f3f8d90]_p8, e12.0
  dots-           %20.2 = DotsList           l     %20.0, %20.1
  val?^ | miss    %20.3 = CastType                 up %20.0
  val?^ | miss    %20.4 = CastType                 up %20.1
  env             e20.5 = MkEnv              l     ...=%20.2, sep="#", collapse(miss)=nil, recycle0(miss)=false, parent=R_BaseNamespace, context 0
  val?            %20.6 = Force!             !vL   %20.3, e20.5
  val?            %20.7 = Force!             !vL   %20.4, e20.5
  val+            %20.8 = CallSafeBuiltin    wed   list(%20.6, %20.7)    <vec->
  val+            %20.9 = CallSafeBuiltin    wed   paste(%20.8, "#", nil, false)    <str->
  val?^ | miss    %20.10 = LdVar              eR    sigs !upd, e12.0
  val?            %20.11 = Force!<wrapped>    !v    %20.10, e12.0   <str->
  lgl$#-          %20.12 = IsType                   %20.11 isA val?-
  lgl$#-          %20.13 = IsType                   %20.9 isA val?-
  val?^ | miss    %20.14 = LdVar              eR    short, e12.0
  lgl$#-          %20.15 = IsType                   %20.14 isA lgl-
  void                    Branch                   %20.15 -> BB22 (if true) | BB23 (if false)
BB21   <- [18]
  fs              %21.0 = FrameState         R     0x55fa0ba91500+154: [%18.6], env=e12.0
  void                    Deopt              !v    %21.0, CallTarget@0x55fa11c90448[Call#4], %18.7   !
BB22   <- [20]
  lgl-            %22.0 = CastType           d     dn %20.14
  void                    Branch                   %20.13 -> BB24 (if true) | BB25 (if false)
BB23   <- [20]
  void                    Nop                !     
  val?^ | miss    %23.1 = %20.14
  dr              %23.2 = Typecheck@0x55fa11c90448[Type#21]
  goto BB9
BB24   <- [22]
  val-            %24.0 = CastType           d     dn %20.9   <str->
  void                    Branch                   %20.12 -> BB26 (if true) | BB27 (if false)
BB25   <- [22]
  void                    Nop                !     
  val+            %25.1 = %20.9
  dr              %25.2 = Typecheck@0x55fa11c90448[Type#19]
  goto BB9
BB9   <- [23, 25, 27]
  val?^ | miss    %9.0  = Phi                      %23.1:BB23, %25.1:BB25, %27.1:BB27
  val?^ | miss    %9.1  = %9.0
  dr              %9.2  = Phi                      %23.2:BB23, %25.2:BB25, %27.2:BB27
  dr              %9.3  = %9.2
  fs              %9.4  = FrameState         R     0x55fa0ba91500+224: [%20.9, %20.11], env=e12.0
  void                    Deopt              !v    %9.4, %9.3, %9.1   !
BB26   <- [24]
  val?-           %26.0 = CastType           d     dn %20.11   <str->
  val?-           %26.1 = Subassign1_1D      wed   %24.0, %26.0, %22.0, elided   <str->
  void                    StVar              lW    sigs, %26.1, e12.0
  val-            %26.3 = ChkMissing         e     %26.1
  void                    Visible            v     
  void                    Return             l     %26.1
BB27   <- [24]
  void                    Nop                !     
  val?            %27.1 = %20.11
  dr              %27.2 = Typecheck@0x55fa11c90448[Type#20]
  goto BB9
Prom 0:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     strsplit, <0x55fa0b09e588>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .fillSignatures[0x55fa0f3f8d90]_p1, e0.0
  val?            %0.3  = NamedCall          !     %0.1(%0.2, "#", fixed=true) e0.0   <vec->
  void                    Return             l     %0.3
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    sigs, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    n, e0.0
  val?            %0.2  = Force<wrapped>     !v    %0.1, e0.0   <int$->
  val?^ | miss    %0.3  = LdVar              eR    siglens, e0.0
  val?            %0.4  = Force<value>       !v    %0.3, e0.0   <int->
  lgl$#-          %0.5  = IsType                   %0.4 isA val+   <true>
  void                    Branch                   %0.5 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    short, e0.0
  val?            %2.1  = Force<value>       !v    %2.0, e0.0   <lgl->
  val?            %2.2  = %2.1
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, .fillSignatures[0x55fa0f3f8d90]_p3, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.2:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract1_1D        !v    %0.4, %3.1, e0.0   <int->
  void                    Visible            v     
  val?            %3.4  = Sub                !     %0.2, %3.2, e0.0   <int->
  void                    Return             l     %3.4
Prom 3:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    short, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 4:
BB0
  env             e0.0  = LdFunctionEnv            
  cls             %0.1  = MkCls                    .fillSignatures@Prom(4)0, e0.0
  void                    Return             l     %0.1
Prom 5:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     character, <0x55fa0b4ed7e0>, e0.0
  val?            %0.2  = Call               !     %0.1(1L) e0.0   <str$->
  void                    Return             l     %0.2
Prom 6:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    sigs, e0.0
  val?            %0.2  = Force<wrapped>     !v    %0.1, e0.0   <str->
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <true>
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    short, e0.0
  val?            %2.1  = Force<value>       !v    %2.0, e0.0   <lgl->
  val?            %2.2  = %2.1
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, .fillSignatures[0x55fa0f3f8d90]_p7, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.2:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract1_1D        !v    %0.2, %3.1, e0.0   <str->
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 7:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    short, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 8:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    suffix, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str->
  void                    Return             l     %0.3

│ .fillSignatures[0x55fa0f3f8d90]                                              │
└──────────────────────────────────────────────────────────────────────────────┘
