
┌──────────────────────────────────────────────────────────────────────────────┐
│ as[0x55fa17bc95c0]                                                           │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;Eager2,NonRefl0,NonRefl1,NonRefl2,!Obj1,!Obj2 miss: 1│
│ Properties:                                                                  │
├────── Final PIR Version
as[0x55fa17bc95c0]
BB0
  val?~+          %0.0  = LdArg                    2
  val?^           %0.1  = LdArg                    1
  val?^           %0.2  = LdArg                    0
  env             e0.3  = MkEnv              l     object=%0.2, Class=%0.1, strict=%0.0, ext(miss)=missingArg, parent=<env 0x55fa0b35b378>, context 1
  prom-           %0.4  = MkArg                    unboundValue, as[0x55fa17bc95c0]_p0, e0.3
  val?^ | miss    %0.5  = CastType                 up %0.4
  void                    StArg              lW    ext, %0.5, e0.3
  val?^ | miss    %0.7  = LdVar              eR    .class1, <env 0x55fa0b35b378>
  lgl$#-          %0.8  = Identical                %0.7, function(x) <(rir::DispatchTable*)0x55fa0b8c6a|...
  void                    Branch                   %0.8 -> BB91 (if true) | BB92 (if false)
BB91   <- [0]
  prom-           %91.0 = MkArg                    unboundValue, as[0x55fa17bc95c0]_p3 (!refl), e0.3
  ct              %91.1 = PushContext        lCL   %91.0, .class1(object), function(x) <(rir::DispatchTable*)0x55fa0b8c6a|..., e0.3
  val?^           %91.2 = CastType                 up %91.0
  val?^ | miss    %91.3 = LdVar              eR    class, <env 0x55fa0b35b378>
  lgl$#-          %91.4 = Identical                <blt class>, %91.3   <true>
  void                    Branch                   %91.4 -> BB93 (if true) | BB94 (if false)
BB92   <- [0]
  fs              %92.0 = FrameState         R     0x55fa0b8ce200+0: [], env=e0.3
  void                    Deopt              !v    %92.0, CallTarget@0x55fa0e336840[Call#1], %0.7
BB93   <- [91]
  env             e93.0 = MkEnv              l     x=%91.2, parent=<env 0x55fa0b35b378>, context 1
  val?            %93.1 = Force!<lazy>       !vr   %91.2,    <(str|cls)>
  val?            %93.2 = CallBuiltin        !v    class(%93.1) e93.0   <str$+>
  void                    StVar              lW    cl, %93.2, e93.0
  lgl$#-          %93.4 = IsType                   %93.2 isA val?+
  val?^ | miss    %93.5 = LdVar              eR    length, e93.0
  lgl$#-          %93.6 = Identical                <blt length>, %93.5   <true>
  void                    Branch                   %93.6 -> BB95 (if true) | BB96 (if false)
BB94   <- [91]
  fs              %94.0 = FrameState         R     0x55fa0b8ce200+32: [], env=e0.3
  env             e94.1 = (MkEnv)            l     x=%91.2, parent=<env 0x55fa0b35b378>, context 1
  fs              %94.2 = FrameState         R     0x55fa0e1cd190+17: [<blt class>, %91.4], env=e94.1, next=%94.0
  void                    Deopt              !v    %94.2, DeadBranchReached@0x55fa0e3ff038[Test#0], %91.4   !
BB95   <- [93]
  val             %95.0 = ChkMissing         e     %93.2
  void                    Branch                   %93.4 -> BB97 (if true) | BB98 (if false)
BB96   <- [93]
  void                    Nop                !     
  lgl$#-          %96.1 = %93.6
  dr              %96.2 = DeadBranchReached@0x55fa0e3ff038[Test#1]
  goto BB5
BB97   <- [95]
  val?+           %97.0 = CastType           d     dn %93.2   <str$+>
  (int|real)$-    %97.1 = CallSafeBuiltin    wed   length(%97.0)    <int$->
  lgl$#-          %97.2 = IsType                   %97.1 isA int$-
  void                    Branch                   %97.2 -> BB99 (if true) | BB100 (if false)
BB98   <- [95]
  void                    Nop                !     
  val?            %98.1 = %93.2
  dr              %98.2 = Typecheck@0x55fa0e3ff038[Type#2]
  goto BB5
BB5   <- [96, 98]
  val?^ | miss    %5.0  = Phi                      %96.1:BB96, %98.1:BB98
  val?^ | miss    %5.1  = %5.0
  dr              %5.2  = Phi                      %96.2:BB96, %98.2:BB98
  dr              %5.3  = %5.2
  fs              %5.4  = FrameState         R     0x55fa0b8ce200+32: [], env=e0.3
  fs              %5.5  = FrameState         R     0x55fa0e1cd190+105: [], env=e93.0, next=%5.4
  void                    Deopt              !v    %5.5, %5.3, %5.1   !
BB99   <- [97]
  int$-           %99.0 = CastType           d     dn %97.1
  lgl$-           %99.1 = Gt                 d     %99.0, 1L, elided   <lgl$->
  lgl$#-          %99.2 = CheckTrueFalse     e     %99.1
  void                    Branch                   %99.2 -> BB89 (if true) | BB9 (if false)
BB100   <- [97]
  fs              %100.0 = FrameState         R     0x55fa0b8ce200+32: [], env=e0.3
  fs              %100.1 = FrameState         R     0x55fa0e1cd190+196: [%97.1], env=e93.0, next=%100.0
  void                    Deopt              !v    %100.1, Typecheck@0x55fa0e3ff038[Type#5], %97.1   !
BB89   <- [99]
  val?            %89.0 = Extract2_1D        wed   %97.0, 1L, elided   <val?_>
  val?            %89.1 = %89.0
  goto BB10
BB9   <- [99]
  void                    Nop                !     
  val?+           %9.1  = %97.0
  goto BB10
BB10   <- [9, 89]
  val?            %10.0 = Phi                      %9.1:BB9, %89.1:BB89
  val?            %10.1 = %10.0
  val?            %10.2 = PopContext         C     %10.1, %91.1   <str$+>
  void                    StVar              lW    thisClass, %10.2, e0.3
  val?^ | miss    %10.4 = LdVar              eR    .identC, e0.3
  lgl$#-          %10.5 = Identical                %10.4, function(c1=NULL, c2=NULL) <(rir::DispatchTabl|...
  void                    Branch                   %10.5 -> BB101 (if true) | BB102 (if false)
BB101   <- [10]
  prom-           %101.0 = MkArg                    unboundValue, as[0x55fa17bc95c0]_p4 (!refl), e0.3
  prom-           %101.1 = MkArg                    unboundValue, as[0x55fa17bc95c0]_p5, e0.3
  val?            %101.2 = StaticCall         !v    .identC[0x55fa16fe77b0](%101.0, %101.1) e0.3   <lgl$->
  lgl$#-          %101.3 = IsType                   %101.2 isA lgl$-
  void                    Branch                   %101.3 -> BB103 (if true) | BB104 (if false)
BB102   <- [10]
  fs              %102.0 = FrameState         R     0x55fa0b8ce200+46: [], env=e0.3
  void                    Deopt              !v    %102.0, CallTarget@0x55fa0e336840[Call#2], %10.4   !
BB103   <- [101]
  lgl$-           %103.0 = CastType           d     dn %101.2
  lgl$-           %103.1 = AsLogical                %103.0
  lgl$#-          %103.2 = Identical                %103.1, true
  void                    Branch                   %103.2 -> BB88 (if true) | BB15 (if false)
BB104   <- [101]
  void                    Nop                !     
  val?            %104.1 = %101.2
  dr              %104.2 = Typecheck@0x55fa0e336840[Type#7]
  goto BB13
BB88   <- [103]
  void                    Nop                !     
  lgl$-           %88.1 = %103.1
  goto BB18
BB15   <- [103]
  val?^ | miss    %15.0 = LdVar              eR    .identC, e0.3
  lgl$#-          %15.1 = Identical                %15.0, function(c1=NULL, c2=NULL) <(rir::DispatchTabl|...
  void                    Branch                   %15.1 -> BB105 (if true) | BB106 (if false)
BB13   <- [104, 106]
  val?^ | miss    %13.0 = Phi                      %104.1:BB104, %106.1:BB106
  val?^ | miss    %13.1 = %13.0
  dr              %13.2 = Phi                      %104.2:BB104, %106.2:BB106
  dr              %13.3 = %13.2
  fs              %13.4 = FrameState         R     0x55fa0b8ce200+83: [%101.2], env=e0.3
  void                    Deopt              !v    %13.4, %13.3, %13.1   !
BB18   <- [88, 109]
  lgl$-           %18.0 = Phi                      %109.3:BB109, %88.1:BB88
  lgl$-           %18.1 = %18.0
  lgl$#-          %18.2 = CheckTrueFalse     e     %18.1
  void                    Branch                   %18.2 -> BB87 (if true) | BB21 (if false)
BB105   <- [15]
  prom-           %105.0 = MkArg                    unboundValue, as[0x55fa17bc95c0]_p6, e0.3
  val?            %105.1 = StaticCall         !v    .identC[0x55fa18131260](%105.0, "ANY") e0.3   <lgl$->
  lgl$#-          %105.2 = IsType                   %105.1 isA lgl$-
  void                    Branch                   %105.2 -> BB109 (if true) | BB110 (if false)
BB106   <- [15]
  void                    Nop                !     
  val?^ | miss    %106.1 = %15.0
  dr              %106.2 = CallTarget@0x55fa0e336840[Call#3]
  goto BB13
BB87   <- [18]
  val?^ | miss    %87.0 = LdVar              eR    object, e0.3
  void                    Visible            v     
  val?            %87.2 = Force!<wrapped>    !     %87.0, e0.3   <(str|cls)->
  val?            %87.3 = %87.2
  goto BB36
BB21   <- [18]
  val?^ | miss    %21.0 = LdVar              eR    .classEnv, e0.3
  lgl$#-          %21.1 = Identical                %21.0, function(Class, default=.requirePackage("metho|...
  void                    Branch                   %21.1 -> BB107 (if true) | BB108 (if false)
BB109   <- [105]
  lgl$-           %109.0 = CastType           d     dn %105.1
  lgl$-           %109.1 = AsLogical                %109.0
  lgl$-           %109.2 = LOr                      %103.1, %109.1
  lgl$-           %109.3 = %109.2
  goto BB18
BB110   <- [105]
  fs              %110.0 = FrameState         R     0x55fa0b8ce200+132: [%103.1, %105.1], env=e0.3
  void                    Deopt              !v    %110.0, Typecheck@0x55fa0e336840[Type#9], %105.1   !
BB36   <- [87, 35]
  val?            %36.0 = Phi                      %35.2:BB35, %87.3:BB87
  val?            %36.1 = %36.0
  void                    Return             l     %36.1
BB107   <- [21]
  prom-           %107.0 = MkArg                    unboundValue, as[0x55fa17bc95c0]_p7, e0.3
  val?            %107.1 = StaticCall         !v    .classEnv[0x55fa16ab1650](%107.0, missingArg, false) { 0 2n } e0.3   <env->
  void                    StVar              lW    where, %107.1, e0.3
  val?^ | miss    %107.3 = LdVar              eR    getGeneric, e0.3
  lgl$#-          %107.4 = Identical                %107.3, function(f, mustFind=FALSE, where, package="")|...
  void                    Branch                   %107.4 -> BB111 (if true) | BB112 (if false)
BB108   <- [21]
  fs              %108.0 = FrameState         R     0x55fa0b8ce200+139: [%18.1], env=e0.3
  void                    Deopt              !v    %108.0, CallTarget@0x55fa0e336840[Call#4], %21.0   !
BB111   <- [107]
  prom-           %111.0 = MkArg                    unboundValue, as[0x55fa17bc95c0]_p8 (!refl), e0.3
  val?            %111.1 = StaticCall         !v    getGeneric[0x55fa1091c7a0]("coerce", missingArg, %111.0) { 0 2n } e0.3   <cls>
  void                    StVar              lW    coerceFun, %111.1, e0.3
  val?^ | miss    %111.3 = LdVar              eR    .getMethodsTable, e0.3
  lgl$#-          %111.4 = Identical                %111.3, function(fdef, env=environment(fdef), check=TR|...
  void                    Branch                   %111.4 -> BB113 (if true) | BB114 (if false)
BB112   <- [107]
  fs              %112.0 = FrameState         R     0x55fa0b8ce200+224: [], env=e0.3
  void                    Deopt              !v    %112.0, CallTarget@0x55fa0e336840[Call#5], %107.3   !
BB113   <- [111]
  prom-           %113.0 = MkArg                    unboundValue, as[0x55fa17bc95c0]_p9 (!refl), e0.3
  prom-           %113.1 = MkArg                    unboundValue, as[0x55fa17bc95c0]_p10, e0.3
  val?            %113.2 = StaticCall         !v    .getMethodsTable[0x55fa171d7500](%113.0, %113.1, missingArg, true) { 0 1 3n } e0.3   <env->
  void                    StVar              lW    coerceMethods, %113.2, e0.3
  val?^ | miss    %113.4 = LdVar              eR    .quickCoerceSelect, e0.3
  lgl$#-          %113.5 = Identical                %113.4, function(from, to, fdef, methods, where) <(rir|...
  void                    Branch                   %113.5 -> BB115 (if true) | BB116 (if false)
BB114   <- [111]
  fs              %114.0 = FrameState         R     0x55fa0b8ce200+283: [], env=e0.3
  void                    Deopt              !v    %114.0, CallTarget@0x55fa0e336840[Call#6], %111.3   !
BB115   <- [113]
  prom-           %115.0 = MkArg                    unboundValue, as[0x55fa17bc95c0]_p12, e0.3
  prom-           %115.1 = MkArg                    unboundValue, as[0x55fa17bc95c0]_p13, e0.3
  prom-           %115.2 = MkArg                    unboundValue, as[0x55fa17bc95c0]_p14, e0.3
  prom-           %115.3 = MkArg                    unboundValue, as[0x55fa17bc95c0]_p15 (!refl), e0.3
  prom-           %115.4 = MkArg                    unboundValue, as[0x55fa17bc95c0]_p16, e0.3
  val?            %115.5 = StaticCall         !v    .quickCoerceSelect[0x55fa16cf2ab0](%115.0, %115.1, %115.2, %115.3, %115.4) e0.3   <(nil|cls)>
  lgl$-           %115.6 = Is                       %115.5, NULL
  void                    StVar              lW    asMethod, %115.5, e0.3
  val             %115.8 = ChkMissing         e     %115.5
  lgl$#-          %115.9 = CheckTrueFalse     e     %115.6
  void                    Branch                   %115.9 -> BB38 (if true) | BB30 (if false)
BB116   <- [113]
  fs              %116.0 = FrameState         R     0x55fa0b8ce200+351: [], env=e0.3
  void                    Deopt              !v    %116.0, CallTarget@0x55fa0e336840[Call#8], %113.4   !
BB38   <- [115]
  val?^ | miss    %38.0 = LdVar              eR    c, e0.3
  lgl$#-          %38.1 = Identical                <blt c>, %38.0   <true>
  void                    Branch                   %38.1 -> BB117 (if true) | BB118 (if false)
BB30   <- [115]
  void                    Nop                !     
  goto BB31
BB117   <- [38]
  val?^ | miss    %117.0 = LdVar              eR    thisClass, e0.3
  lgl$#-          %117.1 = IsType                   %117.0 isA val?~+ | miss
  void                    Branch                   %117.1 -> BB119 (if true) | BB120 (if false)
BB118   <- [38]
  void                    Nop                !     
  lgl$#-          %118.1 = %38.1
  dr              %118.2 = DeadBranchReached@0x55fa0e336840[Test#0]
  goto BB28
BB31   <- [30, 39, 59]
  val?^ | miss    %31.0 = LdVar              eR    strict, e0.3
  void                    Visible            v     
  val?            %31.2 = Force!<lazy>       !     %31.0, e0.3   <lgl$->
  lgl$#-          %31.3 = CheckTrueFalse     we    %31.2
  void                    Branch                   %31.3 -> BB37 (if true) | BB34 (if false)
BB119   <- [117]
  val?~+ | miss   %119.0 = CastType           d     dn %117.0
  val?+           %119.1 = Force!<value>            %119.0,    <str$+>
  val?^ | miss    %119.2 = LdVar              eR    Class, e0.3
  val?            %119.3 = Force!<wrapped>    !v    %119.2, e0.3   <str$+>
  val?            %119.4 = NamedCall          !v    <blt c>(from=%119.1, to=%119.3) e0.3   <str+>
  void                    StVar              lW    sig, %119.4, e0.3
  (cls|spec|blt)  %119.6 = LdFun              !v    selectMethod, <0x55fa0ef041a0>, e0.3
  prom-           %119.7 = MkArg                    unboundValue, as[0x55fa17bc95c0]_p19, e0.3
  prom-           %119.8 = MkArg                    unboundValue, as[0x55fa17bc95c0]_p20, e0.3
  prom-           %119.9 = MkArg                    unboundValue, as[0x55fa17bc95c0]_p21, e0.3
  val?            %119.10 = NamedCall          !v    %119.6("coerce", %119.7, optional=true, useInherited=false, fdef=%119.8, mlist=%119.9) e0.3   <nil->
  lgl$-           %119.11 = Is                       %119.10, NULL
  void                    StVar              lW    asMethod, %119.10, e0.3
  val             %119.13 = ChkMissing         e     %119.10
  lgl$#-          %119.14 = CheckTrueFalse     e     %119.11
  void                    Branch                   %119.14 -> BB40 (if true) | BB39 (if false)
BB120   <- [117]
  void                    Nop                !     
  val?^ | miss    %120.1 = %117.0
  dr              %120.2 = Typecheck@0x55fa0e336840[Type#28]
  goto BB28
BB28   <- [118, 120]
  val?^ | miss    %28.0 = Phi                      %118.1:BB118, %120.1:BB120
  val?^ | miss    %28.1 = %28.0
  dr              %28.2 = Phi                      %118.2:BB118, %120.2:BB120
  dr              %28.3 = %28.2
  fs              %28.4 = FrameState         R     0x55fa0b8ce200+417: [], env=e0.3
  void                    Deopt              !v    %28.4, %28.3, %28.1   !
BB37   <- [31]
  (cls|spec|blt)  %37.0 = LdFun              !     asMethod, e0.3
  prom-           %37.1 = MkArg                    unboundValue, as[0x55fa17bc95c0]_p18, e0.3
  val?            %37.2 = Call               !     %37.0(%37.1) e0.3   <(str|cls)>
  val?            %37.3 = %37.2
  goto BB35
BB34   <- [31]
  val?^ | miss    %34.0 = LdVar              eR    asMethod, e0.3
  lgl$#-          %34.1 = Identical                %34.0, function(from, to=<str |a|>, strict=TRUE) <(ri|...
  void                    Branch                   %34.1 -> BB121 (if true) | BB122 (if false)
BB40   <- [119]
  void                    StVar              lW    canCache, true, e0.3
  void                    StVar              lW    inherited, false, e0.3
  val?^ | miss    %40.2 = LdVar              eR    is, e0.3
  lgl$#-          %40.3 = Identical                %40.2, function(object, class2) <(rir::DispatchTable*|...
  void                    Branch                   %40.3 -> BB123 (if true) | BB124 (if false)
BB39   <- [119]
  void                    Nop                !     
  goto BB31
BB35   <- [37, 121]
  val?            %35.0 = Phi                      %121.2:BB121, %37.3:BB37
  val?            %35.1 = %35.0
  val?            %35.2 = %35.1
  goto BB36
BB121   <- [34]
  prom-           %121.0 = MkArg                    unboundValue, as[0x55fa17bc95c0]_p17, e0.3
  val?            %121.1 = StaticCall         !     asMethod[0x55fa16d6c310](%121.0, missingArg, false) { 0 2n } e0.3   <cls>
  val?            %121.2 = %121.1
  goto BB35
BB122   <- [34]
  fs              %122.0 = FrameState         R     0x55fa0b8ce200+1937: [%31.3], env=e0.3
  void                    Deopt              !v    %122.0, CallTarget@0x55fa0e336840[Call#38], %34.0   !
BB123   <- [40]
  prom-           %123.0 = MkArg                    unboundValue, as[0x55fa17bc95c0]_p23, e0.3
  prom-           %123.1 = MkArg                    unboundValue, as[0x55fa17bc95c0]_p24, e0.3
  val?            %123.2 = Call               !v    function(object, class2) <(rir::DispatchTable*|...(%123.0, %123.1) e0.3   <lgl$->
  lgl$#-          %123.3 = IsType                   %123.2 isA lgl$-
  void                    Branch                   %123.3 -> BB125 (if true) | BB126 (if false)
BB124   <- [40]
  fs              %124.0 = FrameState         R     0x55fa0b8ce200+742: [], env=e0.3
  void                    Deopt              !v    %124.0, CallTarget@0x55fa0e336840[Call#12], %40.2   !
BB125   <- [123]
  lgl$-           %125.0 = CastType           d     dn %123.2
  lgl$#-          %125.1 = CheckTrueFalse     e     %125.0
  void                    Branch                   %125.1 -> BB65 (if true) | BB45 (if false)
BB126   <- [123]
  void                    Nop                !     
  val?            %126.1 = %123.2
  dr              %126.2 = Typecheck@0x55fa0e336840[Type#39]
  goto BB43
BB65   <- [125]
  val?^ | miss    %65.0 = LdVar              eR    getClassDef, e0.3
  lgl$#-          %65.1 = Identical                %65.0, function(Class, where=topenv(parent.frame()), |...
  void                    Branch                   %65.1 -> BB127 (if true) | BB128 (if false)
BB45   <- [125]
  void                    Nop                !     
  goto BB46
BB43   <- [126, 128]
  val?^ | miss    %43.0 = Phi                      %126.1:BB126, %128.1:BB128
  val?^ | miss    %43.1 = %43.0
  dr              %43.2 = Phi                      %126.2:BB126, %128.2:BB128
  dr              %43.3 = %43.2
  fs              %43.4 = FrameState         R     0x55fa0b8ce200+779: [%123.2], env=e0.3
  void                    Deopt              !v    %43.4, %43.3, %43.1   !
BB127   <- [65]
  prom-           %127.0 = MkArg                    unboundValue, as[0x55fa17bc95c0]_p33, e0.3
  prom-           %127.1 = MkArg                    unboundValue, as[0x55fa17bc95c0]_p34, e0.3
  val?            %127.2 = StaticCall         !v    getClassDef[0x55fa16ec3030](%127.0, %127.1) e0.3   <other>
  void                    StVar              lW    ClassDef, %127.2, e0.3
  val?^ | miss    %127.4 = LdVar              eR    isFALSE, e0.3
  lgl$#-          %127.5 = Identical                %127.4, function(x) <(rir::DispatchTable*)0x55fa0db2a2|...
  void                    Branch                   %127.5 -> BB129 (if true) | BB130 (if false)
BB128   <- [65]
  void                    Nop                !     
  val?^ | miss    %128.1 = %65.0
  dr              %128.2 = CallTarget@0x55fa0e336840[Call#13]
  goto BB43
BB46   <- [45, 81]
  val?^ | miss    %46.0 = LdVar              eR    asMethod, e0.3
  lgl$#-          %46.1 = IsType                   %46.0 isA val?~- | miss
  void                    Branch                   %46.1 -> BB131 (if true) | BB132 (if false)
BB129   <- [127]
  val?^ | miss    %129.0 = LdVar              eR    ext, e0.3
  val?            %129.1 = Force!<lazy>       !v    %129.0, e0.3   <other>
  prom-           %129.2 = MkArg                    %129.1, as[0x55fa17bc95c0]_p35 (!refl), 
  val?            %129.3 = StaticCall         !v    isFALSE[0x55fa0cb3ddf0](%129.2) e0.3   <lgl$->
  lgl$#-          %129.4 = IsType                   %129.3 isA lgl$-
  void                    Branch                   %129.4 -> BB133 (if true) | BB134 (if false)
BB130   <- [127]
  fs              %130.0 = FrameState         R     0x55fa0b8ce200+846: [], env=e0.3
  void                    Deopt              !v    %130.0, CallTarget@0x55fa0e336840[Call#14], %127.4   !
BB131   <- [46]
  val?~- | miss   %131.0 = CastType           d     dn %46.0
  val?-           %131.1 = Force!<value>            %131.0,    <cls->
  lgl$-           %131.2 = Is                       %131.1, NULL
  lgl$-           %131.3 = AsLogical                %131.2
  lgl$#-          %131.4 = Identical                %131.3, false
  void                    Branch                   %131.4 -> BB50 (if true) | BB49 (if false)
BB132   <- [46]
  void                    Nop                !     
  val?^ | miss    %132.1 = %46.0
  dr              %132.2 = Typecheck@0x55fa0e336840[Type#74]
  goto BB47
BB133   <- [129]
  lgl$-           %133.0 = CastType           d     dn %129.3
  lgl$#-          %133.1 = CheckTrueFalse     e     %133.0
  void                    Branch                   %133.1 -> BB86 (if true) | BB70 (if false)
BB134   <- [129]
  void                    Nop                !     
  val?            %134.1 = %129.3
  dr              %134.2 = Typecheck@0x55fa0e336840[Type#44]
  goto BB68
BB50   <- [131]
  lgl$#-          %50.0 = CheckTrueFalse     e     %131.3
  void                    Branch                   %50.0 -> BB64 (if true) | BB51 (if false)
BB49   <- [131]
  (cls|spec|blt)  %49.0 = LdFun              !v    extends, e0.3
  fs              %49.1 = FrameState         R     0x55fa0b8ce200+1355: [%131.3, %49.0], env=e0.3
  void                    Deopt              !v    %49.1, DeadCall@0x55fa0e336840[Call#27], %49.0   !
BB47   <- [132, 136, 138]
  val?^ | miss    %47.0 = Phi                      %132.1:BB132, %136.1:BB136, %138.1:BB138
  val?^ | miss    %47.1 = %47.0
  dr              %47.2 = Phi                      %132.2:BB132, %136.2:BB136, %138.2:BB138
  dr              %47.3 = %47.2
  fs              %47.4 = FrameState         R     0x55fa0b8ce200+1324: [], env=e0.3
  void                    Deopt              !v    %47.4, %47.3, %47.1   !
BB86   <- [133]
  (cls|spec|blt)  %86.0 = LdFun              !v    stop, e0.3
  fs              %86.1 = FrameState         R     0x55fa0b8ce200+1283: [%86.0], env=e0.3
  void                    Deopt              !v    %86.1, DeadCall@0x55fa0e336840[Call#24], %86.0   !
BB70   <- [133]
  val?^ | miss    %70.0 = LdVar              eR    isTRUE, e0.3
  lgl$#-          %70.1 = Identical                %70.0, function(x) <(rir::DispatchTable*)0x55fa0cc4d8|...
  void                    Branch                   %70.1 -> BB139 (if true) | BB140 (if false)
BB68   <- [134, 140]
  val?^ | miss    %68.0 = Phi                      %134.1:BB134, %140.1:BB140
  val?^ | miss    %68.1 = %68.0
  dr              %68.2 = Phi                      %134.2:BB134, %140.2:BB140
  dr              %68.3 = %68.2
  fs              %68.4 = FrameState         R     0x55fa0b8ce200+878: [%129.3], env=e0.3
  void                    Deopt              !v    %68.4, %68.3, %68.1   !
BB64   <- [50]
  (cls|spec|blt)  %64.0 = LdFun              !v    getClassDef, e0.3
  fs              %64.1 = FrameState         R     0x55fa0b8ce200+1410: [%64.0], env=e0.3
  void                    Deopt              !v    %64.1, DeadCall@0x55fa0e336840[Call#28], %64.0   !
BB51   <- [50]
  lgl$#-          %51.0 = CheckTrueFalse     e     %131.2
  void                    Branch                   %51.0 -> BB63 (if true) | BB52 (if false)
BB139   <- [70]
  val?^ | miss    %139.0 = LdVar              eR    ext, e0.3
  val?            %139.1 = Force!<wrapped>    !v    %139.0, e0.3   <other>
  prom-           %139.2 = MkArg                    %139.1, as[0x55fa17bc95c0]_p36 (!refl), 
  val?            %139.3 = StaticCall         !v    isTRUE[0x55fa0d1dfd30](%139.2) e0.3   <lgl$->
  lgl$#-          %139.4 = IsType                   %139.3 isA lgl$-
  void                    Branch                   %139.4 -> BB141 (if true) | BB142 (if false)
BB140   <- [70]
  void                    Nop                !     
  val?^ | miss    %140.1 = %70.0
  dr              %140.2 = CallTarget@0x55fa0e336840[Call#15]
  goto BB68
BB63   <- [51]
  (cls|spec|blt)  %63.0 = LdFun              !v    selectMethod, e0.3
  fs              %63.1 = FrameState         R     0x55fa0b8ce200+1643: [%63.0], env=e0.3
  void                    Deopt              !v    %63.1, DeadCall@0x55fa0e336840[Call#31], %63.0   !
BB52   <- [51]
  val?^ | miss    %52.0 = LdVar              eR    canCache, e0.3
  lgl$#-          %52.1 = IsType                   %52.0 isA lgl$-
  void                    Branch                   %52.1 -> BB135 (if true) | BB136 (if false)
BB141   <- [139]
  lgl$-           %141.0 = CastType           d     dn %139.3
  lgl$#-          %141.1 = CheckTrueFalse     e     %141.0
  void                    Branch                   %141.1 -> BB85 (if true) | BB73 (if false)
BB142   <- [139]
  fs              %142.0 = FrameState         R     0x55fa0b8ce200+921: [%139.3], env=e0.3
  void                    Deopt              !v    %142.0, Typecheck@0x55fa0e336840[Type#46], %139.3   !
BB135   <- [52]
  lgl$-           %135.0 = CastType           d     dn %52.0
  lgl$#-          %135.1 = CheckTrueFalse     e     %135.0
  void                    Branch                   %135.1 -> BB62 (if true) | BB53 (if false)
BB136   <- [52]
  void                    Nop                !     
  val?^ | miss    %136.1 = %52.0
  dr              %136.2 = Typecheck@0x55fa0e336840[Type#87]
  goto BB47
BB85   <- [141]
  (cls|spec|blt)  %85.0 = LdFun              !v    .makeAsMethod, e0.3
  fs              %85.1 = FrameState         R     0x55fa0b8ce200+1212: [%85.0], env=e0.3
  void                    Deopt              !v    %85.1, DeadCall@0x55fa0e336840[Call#23], %85.0   !
BB73   <- [141]
  (cls|spec|blt)  %73.0 = LdFun              !v    @, <0x55fa0ad53bd8>, e0.3
  prom-           %73.1 = MkArg                    unboundValue, as[0x55fa17bc95c0]_p37, e0.3
  prom-           %73.2 = MkArg                    unboundValue, as[0x55fa17bc95c0]_p38, e0.3
  val?            %73.3 = Call               !v    %73.0(%73.1, %73.2) e0.3   <cls->
  void                    StVar              lW    test, %73.3, e0.3
  val?^ | miss    %73.5 = LdVar              eR    .makeAsMethod, e0.3
  lgl$#-          %73.6 = Identical                %73.5, function(expr, simple, Class, ClassDef, where)|...
  void                    Branch                   %73.6 -> BB145 (if true) | BB146 (if false)
BB62   <- [135]
  val?^ | miss    %62.0 = LdVar              eR    .asCoerceMethod, e0.3
  lgl$#-          %62.1 = Identical                %62.0, function(def, thisClass, ClassDef, replace, wh|...
  void                    Branch                   %62.1 -> BB137 (if true) | BB138 (if false)
BB53   <- [135]
  void                    Nop                !     
  goto BB54
BB145   <- [73]
  prom-           %145.0 = MkArg                    unboundValue, as[0x55fa17bc95c0]_p39, e0.3
  prom-           %145.1 = MkArg                    unboundValue, as[0x55fa17bc95c0]_p42, e0.3
  prom-           %145.2 = MkArg                    unboundValue, as[0x55fa17bc95c0]_p45, e0.3
  prom-           %145.3 = MkArg                    unboundValue, as[0x55fa17bc95c0]_p46, e0.3
  prom-           %145.4 = MkArg                    unboundValue, as[0x55fa17bc95c0]_p47, e0.3
  val?            %145.5 = StaticCall         !v    .makeAsMethod[0x55fa173c6b40](%145.0, %145.1, %145.2, %145.3, %145.4) e0.3   <cls->
  void                    StVar              lW    asMethod, %145.5, e0.3
  val?^ | miss    %145.7 = LdVar              eR    is.function, e0.3
  lgl$#-          %145.8 = Identical                <blt is.function>, %145.7   <true>
  void                    Branch                   %145.8 -> BB149 (if true) | BB150 (if false)
BB146   <- [73]
  fs              %146.0 = FrameState         R     0x55fa0b8ce200+983: [], env=e0.3
  void                    Deopt              !v    %146.0, CallTarget@0x55fa0e336840[Call#17], %73.5   !
BB137   <- [62]
  prom-           %137.0 = MkArg                    unboundValue, as[0x55fa17bc95c0]_p29, e0.3
  prom-           %137.1 = MkArg                    unboundValue, as[0x55fa17bc95c0]_p30, e0.3
  prom-           %137.2 = MkArg                    unboundValue, as[0x55fa17bc95c0]_p31, e0.3
  prom-           %137.3 = MkArg                    unboundValue, as[0x55fa17bc95c0]_p32, e0.3
  val?            %137.4 = StaticCall         !v    .asCoerceMethod[0x55fa16ebc9d0](%137.0, %137.1, %137.2, false, %137.3) e0.3   <cls>
  void                    StVar              lW    asMethod, %137.4, e0.3
  goto BB54
BB138   <- [62]
  void                    Nop                !     
  val?^ | miss    %138.1 = %62.0
  dr              %138.2 = CallTarget@0x55fa0e336840[Call#30]
  goto BB47
BB54   <- [53, 137]
  val?^ | miss    %54.0 = LdVar              eR    asMethod, e0.3
  val?            %54.1 = Force!<value>      !v    %54.0, e0.3   <cls>
  lgl$-           %54.2 = Is                       %54.1, NULL
  lgl$#-          %54.3 = CheckTrueFalse     e     %54.2
  void                    Branch                   %54.3 -> BB61 (if true) | BB57 (if false)
BB149   <- [145]
  val?^ | miss    %149.0 = LdVar              eR    test, e0.3
  lgl$#-          %149.1 = IsType                   %149.0 isA val?~- | miss
  void                    Branch                   %149.1 -> BB151 (if true) | BB152 (if false)
BB150   <- [145]
  void                    Nop                !     
  lgl$#-          %150.1 = %145.8
  dr              %150.2 = DeadBranchReached@0x55fa0e336840[Test#1]
  goto BB76
BB61   <- [54]
  (cls|spec|blt)  %61.0 = LdFun              !v    stop, e0.3
  fs              %61.1 = FrameState         R     0x55fa0b8ce200+1881: [%61.0], env=e0.3
  void                    Deopt              !v    %61.1, DeadCall@0x55fa0e336840[Call#34], %61.0   !
BB57   <- [54]
  val?^ | miss    %57.0 = LdVar              eR    canCache, e0.3
  lgl$#-          %57.1 = IsType                   %57.0 isA lgl$-
  void                    Branch                   %57.1 -> BB143 (if true) | BB144 (if false)
BB151   <- [149]
  val?~- | miss   %151.0 = CastType           d     dn %149.0
  val?-           %151.1 = Force!<value>            %151.0,    <cls->
  lgl$#-          %151.2 = CallSafeBuiltin    wed   is.function(%151.1)    <lgl$->
  lgl$#-          %151.3 = Not                d     %151.2, elided
  void                    Branch                   %151.2 -> BB82 (if true) | BB80 (if false)
BB152   <- [149]
  void                    Nop                !     
  val?^ | miss    %152.1 = %149.0
  dr              %152.2 = Typecheck@0x55fa0e336840[Type#61]
  goto BB76
BB76   <- [150, 152]
  val?^ | miss    %76.0 = Phi                      %150.1:BB150, %152.1:BB152
  val?^ | miss    %76.1 = %76.0
  dr              %76.2 = Phi                      %150.2:BB150, %152.2:BB152
  dr              %76.3 = %76.2
  fs              %76.4 = FrameState         R     0x55fa0b8ce200+1049: [], env=e0.3
  void                    Deopt              !v    %76.4, %76.3, %76.1   !
BB143   <- [57]
  lgl$-           %143.0 = CastType           d     dn %57.0
  lgl$#-          %143.1 = CheckTrueFalse     e     %143.0
  void                    Branch                   %143.1 -> BB60 (if true) | BB58 (if false)
BB144   <- [57]
  void                    Nop                !     
  val?^ | miss    %144.1 = %57.0
  dr              %144.2 = Typecheck@0x55fa0e336840[Type#99]
  goto BB55
BB82   <- [151]
  val?^ | miss    %82.0 = LdVar              eR    isTRUE, e0.3
  lgl$#-          %82.1 = Identical                %82.0, function(x) <(rir::DispatchTable*)0x55fa0cc4d8|...
  void                    Branch                   %82.1 -> BB153 (if true) | BB154 (if false)
BB80   <- [151]
  void                    Nop                !     
  lgl$#-          %80.1 = %151.3
  goto BB81
BB60   <- [143]
  val?^ | miss    %60.0 = LdVar              eR    cacheMethod, e0.3
  lgl$#-          %60.1 = Identical                %60.0, function(f, sig, def, args=names(sig), fdef, i|...
  void                    Branch                   %60.1 -> BB147 (if true) | BB148 (if false)
BB58   <- [143]
  void                    Nop                !     
  goto BB59
BB55   <- [144, 148]
  val?^ | miss    %55.0 = Phi                      %144.1:BB144, %148.1:BB148
  val?^ | miss    %55.1 = %55.0
  dr              %55.2 = Phi                      %144.2:BB144, %148.2:BB148
  dr              %55.3 = %55.2
  fs              %55.4 = FrameState         R     0x55fa0b8ce200+1757: [%54.1], env=e0.3
  void                    Deopt              !v    %55.4, %55.3, %55.1   !
BB153   <- [82]
  prom-           %153.0 = MkArg                    unboundValue, as[0x55fa17bc95c0]_p48, e0.3
  val?            %153.1 = StaticCall         !v    isTRUE[0x55fa0aef51b0](%153.0) e0.3   <lgl$->
  lgl$#-          %153.2 = IsType                   %153.1 isA lgl$-
  void                    Branch                   %153.2 -> BB155 (if true) | BB156 (if false)
BB154   <- [82]
  fs              %154.0 = FrameState         R     0x55fa0b8ce200+1140: [%151.2], env=e0.3
  void                    Deopt              !v    %154.0, CallTarget@0x55fa0e336840[Call#21], %82.0   !
BB81   <- [80, 155]
  lgl$-           %81.0 = Phi                      %155.3:BB155, %80.1:BB80
  lgl$-           %81.1 = %81.0
  void                    StVar              lW    canCache, %81.1, e0.3
  goto BB46
BB147   <- [60]
  prom-           %147.0 = MkArg                    unboundValue, as[0x55fa17bc95c0]_p25, e0.3
  prom-           %147.1 = MkArg                    unboundValue, as[0x55fa17bc95c0]_p26, e0.3
  prom-           %147.2 = MkArg                    unboundValue, as[0x55fa17bc95c0]_p27, e0.3
  prom-           %147.3 = MkArg                    unboundValue, as[0x55fa17bc95c0]_p28, e0.3
  val?            %147.4 = StaticCall         !v    cacheMethod[0x55fa0fe68920]("coerce", %147.0, %147.1, missingArg, %147.2, %147.3) { 0 1 2 4n 5n } e0.3
  goto BB59
BB148   <- [60]
  void                    Nop                !     
  val?^ | miss    %148.1 = %60.0
  dr              %148.2 = CallTarget@0x55fa0e336840[Call#33]
  goto BB55
BB59   <- [58, 147]
  void                    Nop                !     
  goto BB31
BB155   <- [153]
  lgl$-           %155.0 = CastType           d     dn %153.1
  lgl$-           %155.1 = AsLogical                %155.0
  lgl$-           %155.2 = LOr                      %151.3, %155.1
  lgl$-           %155.3 = %155.2
  goto BB81
BB156   <- [153]
  fs              %156.0 = FrameState         R     0x55fa0b8ce200+1186: [%151.3, %153.1], env=e0.3
  void                    Deopt              !v    %156.0, Typecheck@0x55fa0e336840[Type#65], %153.1   !
Prom 0:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     possibleExtends, <0x55fa0ef25928>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, as[0x55fa17bc95c0]_p1, e0.0
  prom-           %0.3  = MkArg                    unboundValue, as[0x55fa17bc95c0]_p2, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <other>
  void                    Return             l     %0.4
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    thisClass, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$+>
  void                    Return             l     %0.3
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    Class, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$+>
  void                    Return             l     %0.3
Prom 3:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    object, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <(str|cls)>
  void                    Return             l     %0.3
Prom 4:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    thisClass, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$+>
  void                    Return             l     %0.3
Prom 5:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    Class, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str$+>
  void                    Return             l     %0.3
Prom 6:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    Class, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$+>
  void                    Return             l     %0.3
Prom 7:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    thisClass, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$+>
  void                    Return             l     %0.3
Prom 8:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 9:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    coerceFun, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 10:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     environment, <0x55fa0b0fab68>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, as[0x55fa17bc95c0]_p11, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <env->
  void                    Return             l     %0.3
Prom 11:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    coerceFun, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 12:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    thisClass, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$+>
  void                    Return             l     %0.3
Prom 13:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    Class, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$+>
  void                    Return             l     %0.3
Prom 14:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    coerceFun, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 15:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    coerceMethods, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 16:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 17:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    object, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 18:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    object, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <(str|cls)>
  void                    Return             l     %0.3
Prom 19:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    sig, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str+>
  void                    Return             l     %0.3
Prom 20:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    coerceFun, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 21:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     getMethodsForDispatch, <0x55fa0d470580>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, as[0x55fa17bc95c0]_p22, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <env->
  void                    Return             l     %0.3
Prom 22:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    coerceFun, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 23:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    object, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 24:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    Class, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$+>
  void                    Return             l     %0.3
Prom 25:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    sig, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str+>
  void                    Return             l     %0.3
Prom 26:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    asMethod, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 27:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    coerceFun, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 28:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    inherited, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <lgl$->
  void                    Return             l     %0.3
Prom 29:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    asMethod, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls->
  void                    Return             l     %0.3
Prom 30:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    thisClass, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$+>
  void                    Return             l     %0.3
Prom 31:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    ClassDef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <other>
  void                    Return             l     %0.3
Prom 32:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 33:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    Class, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$+>
  void                    Return             l     %0.3
Prom 34:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 35:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    ext, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <other>
  void                    Return             l     %0.3
Prom 36:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    ext, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <other>
  void                    Return             l     %0.3
Prom 37:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    ext, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 38:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    test, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 39:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, <0x55fa0ad53bd8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, as[0x55fa17bc95c0]_p40, e0.0
  prom-           %0.3  = MkArg                    unboundValue, as[0x55fa17bc95c0]_p41, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <cls->
  void                    Return             l     %0.4
Prom 40:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    ext, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 41:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    coerce, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 42:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, <0x55fa0ad53bd8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, as[0x55fa17bc95c0]_p43, e0.0
  prom-           %0.3  = MkArg                    unboundValue, as[0x55fa17bc95c0]_p44, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <lgl$->
  void                    Return             l     %0.4
Prom 43:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    ext, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 44:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    simple, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 45:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    Class, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 46:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    ClassDef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 47:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 48:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     body, <0x55fa0ea220f0>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, as[0x55fa17bc95c0]_p49, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <lgl$->
  void                    Return             l     %0.3
Prom 49:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    test, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls->
  void                    Return             l     %0.3

│ as[0x55fa17bc95c0]                                                           │
└──────────────────────────────────────────────────────────────────────────────┘
