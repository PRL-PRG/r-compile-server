
┌──────────────────────────────────────────────────────────────────────────────┐
│ .findInheritedMethods[0x55fa0fbcee30]                                        │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch miss: 7                              │
│ Properties:                                                                  │
├────── Final PIR Version
.findInheritedMethods[0x55fa0fbcee30]
BB0
  val?^           %0.0  = LdArg                    2
  val?^           %0.1  = LdArg                    1
  val?^           %0.2  = LdArg                    0
  env             e0.3  = MkEnv              l     classes=%0.2, fdef=%0.1, mtable=%0.0, table(miss)=missingArg, excluded(miss)=missingArg, useInherited(miss)=missingArg, simpleOnly(miss)=missingArg, verbose(miss)=missingArg, doCache(miss)=missingArg, where(miss)=missingArg, parent=<env 0x55fa0b35b378>, context 1
  prom-           %0.4  = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p0, e0.3
  val?^ | miss    %0.5  = CastType                 up %0.4
  void                    StArg              lW    table, %0.5, e0.3
  void                    StArg              lW    excluded, nil, e0.3
  prom-           %0.8  = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p4, e0.3
  val?^ | miss    %0.9  = CastType                 up %0.8
  void                    StArg              lW    simpleOnly, %0.9, e0.3
  void                    StArg              lW    verbose, false, e0.3
  prom-           %0.12 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p7, e0.3
  val?^ | miss    %0.13 = CastType                 up %0.12
  void                    StArg              lW    doCache, %0.13, e0.3
  prom-           %0.15 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p9, e0.3
  val?^ | miss    %0.16 = CastType                 up %0.15
  void                    StArg              lW    where, %0.16, e0.3
  cls             %0.18 = MkCls                    .findInheritedMethods>plist@677, e0.3
  val?^ | miss    %0.19 = LdVar              eR    .allowPrimitiveMethods, <env 0x55fa0b35b378>
  lgl$#-          %0.20 = Identical                %0.19, function(onOff) <(rir::DispatchTable*)0x55fa0e|...
  void                    Branch                   %0.20 -> BB310 (if true) | BB311 (if false)
BB310   <- [0]
  ct              %310.0 = PushContext        lCL   false, .allowPrimitiveMethods(FALSE), function(onOff) <(rir::DispatchTable*)0x55fa0e|..., e0.3
  val?^ | miss    %310.1 = LdVar              eR    .Call, <env 0x55fa0b35b378>
  lgl$#-          %310.2 = Identical                <blt .Call>, %310.1   <true>
  void                    Branch                   %310.2 -> BB312 (if true) | BB313 (if false)
BB311   <- [0]
  fs              %311.0 = FrameState         R     0x55fa136cd470+0: [], env=e0.3
  void                    Deopt              !v    %311.0, CallTarget@0x55fa0e5780e0[Call#5], %0.19
BB312   <- [310]
  val?^ | miss    %312.0 = LdVar              eR    C_R_M_setPrimitiveMethods, <env 0x55fa0b35b378>
  env             e312.1 = MkEnv              l     onOff=false, code="CLEAR", parent=<env 0x55fa0b35b378>, context 1
  val?            %312.2 = Force!<value>      !v    %312.0, e312.1   <vec>
  val?^ | miss    %312.3 = LdVar              eR    code, e312.1
  val?            %312.4 = Force!<value>      !v    %312.3, e312.1   <str$->
  val?            %312.5 = CallBuiltin        !v    .Call(%312.2, "", nil, %312.4, nil, nil) e312.1   <lgl$->
  lgl$#-          %312.6 = IsType                   %312.5 isA lgl$-
  void                    Branch                   %312.6 -> BB314 (if true) | BB315 (if false)
BB313   <- [310]
  fs              %313.0 = FrameState         R     0x55fa136cd470+32: [], env=e0.3
  env             e313.1 = (MkEnv)            l     onOff=false, parent=<env 0x55fa0b35b378>, context 1
  fs              %313.2 = FrameState         R     0x55fa0b8ac370+15: [false], env=e313.1, next=%313.0
  void                    Deopt              !v    %313.2, DeadBranchReached@0x55fa0f39ccb8[Test#0], %310.2   !
BB314   <- [312]
  lgl$-           %314.0 = CastType           d     dn %312.5
  val?            %314.1 = PopContext         C     %314.0, %310.0   <lgl$->
  lgl$#-          %314.2 = IsType                   %314.1 isA lgl$-
  void                    Branch                   %314.2 -> BB316 (if true) | BB317 (if false)
BB315   <- [312]
  fs              %315.0 = FrameState         R     0x55fa136cd470+32: [], env=e0.3
  fs              %315.1 = FrameState         R     0x55fa0b8ac370+200: [%312.5], env=e312.1, next=%315.0
  void                    Deopt              !v    %315.1, Typecheck@0x55fa0f39ccb8[Type#5], %312.5   !
BB316   <- [314]
  lgl$-           %316.0 = CastType           d     dn %314.1
  void                    StVar              lW    primMethods, %316.0, e0.3
  (cls|spec|blt)  %316.2 = LdFun              !v    on.exit, <0x55fa0ad53270>, e0.3
  prom-           %316.3 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p11, e0.3
  val?            %316.4 = Call               !v    %316.2(%316.3) e0.3
  val?^ | miss    %316.5 = LdVar              eR    is.environment, e0.3
  lgl$#-          %316.6 = Identical                <blt is.environment>, %316.5   <true>
  void                    Branch                   %316.6 -> BB318 (if true) | BB319 (if false)
BB317   <- [314]
  fs              %317.0 = FrameState         R     0x55fa136cd470+32: [%314.1], env=e0.3
  void                    Deopt              !v    %317.0, Typecheck@0x55fa0e5780e0[Type#9], %314.1   !
BB318   <- [316]
  val?^ | miss    %318.0 = LdVar              eR    table, e0.3
  val?            %318.1 = Force!<lazy>       !v    %318.0, e0.3   <env->
  lgl$#-          %318.2 = CallSafeBuiltin    wed   is.environment(%318.1)    <lgl$->
  void                    Branch                   %318.2 -> BB14 (if true) | BB13 (if false)
BB319   <- [316]
  fs              %319.0 = FrameState         R     0x55fa136cd470+78: [%316.4], env=e0.3
  void                    Deopt              !v    %319.0, DeadBranchReached@0x55fa0e5780e0[Test#0], %316.6   !
BB14   <- [318]
  val?^ | miss    %14.0 = LdVar              eR    length, e0.3
  lgl$#-          %14.1 = Identical                <blt length>, %14.0   <true>
  void                    Branch                   %14.1 -> BB320 (if true) | BB321 (if false)
BB13   <- [318]
  (cls|spec|blt)  %13.0 = LdFun              !v    is, e0.3
  fs              %13.1 = FrameState         R     0x55fa136cd470+192: [%13.0], env=e0.3
  void                    Deopt              !v    %13.1, DeadCall@0x55fa0e5780e0[Call#9], %13.0   !
BB320   <- [14]
  (cls|spec|blt)  %320.0 = LdFun              !v    @, <0x55fa0ad53bd8>, e0.3
  prom-           %320.1 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p13, e0.3
  prom-           %320.2 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p14, e0.3
  val?            %320.3 = Call               !v    %320.0(%320.1, %320.2) e0.3   <vec->
  lgl$#-          %320.4 = IsType                   %320.3 isA val?-
  void                    Branch                   %320.4 -> BB322 (if true) | BB323 (if false)
BB321   <- [14]
  fs              %321.0 = FrameState         R     0x55fa136cd470+170: [%318.2], env=e0.3
  void                    Deopt              !v    %321.0, DeadBranchReached@0x55fa0e5780e0[Test#1], %14.1   !
BB322   <- [320]
  val?-           %322.0 = CastType           d     dn %320.3   <vec->
  (int|real)$-    %322.1 = CallSafeBuiltin    wed   length(%322.0)    <int$->
  lgl$#-          %322.2 = IsType                   %322.1 isA int$-
  void                    Branch                   %322.2 -> BB324 (if true) | BB325 (if false)
BB323   <- [320]
  fs              %323.0 = FrameState         R     0x55fa136cd470+416: [<blt length>, %320.3], env=e0.3
  void                    Deopt              !v    %323.0, Typecheck@0x55fa0e5780e0[Type#27], %320.3   !
BB324   <- [322]
  int$-           %324.0 = CastType           d     dn %322.1
  lgl$-           %324.1 = Gt                 d     %324.0, 0L, elided   <lgl$->
  void                    StVar              lW    hasGroup, %324.1, e0.3
  lgl$#-          %324.3 = CheckTrueFalse     e     %324.1
  void                    Branch                   %324.3 -> BB308 (if true) | BB21 (if false)
BB325   <- [322]
  fs              %325.0 = FrameState         R     0x55fa136cd470+438: [%322.1], env=e0.3
  void                    Deopt              !v    %325.0, Typecheck@0x55fa0e5780e0[Type#28], %322.1   !
BB308   <- [324]
  val?^ | miss    %308.0 = LdVar              eR    .getAllGroups, e0.3
  lgl$#-          %308.1 = Identical                %308.0, function(funs) <(rir::DispatchTable*)0x55fa171|...
  void                    Branch                   %308.1 -> BB326 (if true) | BB327 (if false)
BB21   <- [324]
  void                    Nop                !     
  goto BB22
BB326   <- [308]
  prom-           %326.0 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p120, e0.3
  val?            %326.1 = StaticCall         !v    .getAllGroups[0x55fa16d62e20](%326.0) e0.3   <vec->
  void                    StVar              lW    groupGenerics, %326.1, e0.3
  goto BB22
BB327   <- [308]
  fs              %327.0 = FrameState         R     0x55fa136cd470+464: [], env=e0.3
  void                    Deopt              !v    %327.0, CallTarget@0x55fa0e5780e0[Call#18], %308.0   !
BB22   <- [21, 326]
  val?^ | miss    %22.0 = LdVar              eR    length, e0.3
  lgl$#-          %22.1 = Identical                <blt length>, %22.0   <true>
  void                    Branch                   %22.1 -> BB328 (if true) | BB329 (if false)
BB328   <- [22]
  val?^ | miss    %328.0 = LdVar              eR    excluded, e0.3
  val?            %328.1 = Force!<lazy>       !v    %328.0, e0.3   <(nil|str)->
  lgl$#-          %328.2 = IsType                   %328.1 isA val?-
  void                    Branch                   %328.2 -> BB330 (if true) | BB331 (if false)
BB329   <- [22]
  fs              %329.0 = FrameState         R     0x55fa136cd470+535: [], env=e0.3
  void                    Deopt              !v    %329.0, DeadBranchReached@0x55fa0e5780e0[Test#2], %22.1   !
BB330   <- [328]
  val?-           %330.0 = CastType           d     dn %328.1   <(nil|str)->
  (int|real)$-    %330.1 = CallSafeBuiltin    wed   length(%330.0)    <int$->
  lgl$#-          %330.2 = IsType                   %330.1 isA int$-
  void                    Branch                   %330.2 -> BB332 (if true) | BB333 (if false)
BB331   <- [328]
  fs              %331.0 = FrameState         R     0x55fa136cd470+604: [<blt length>, %328.1], env=e0.3
  void                    Deopt              !v    %331.0, Typecheck@0x55fa0e5780e0[Type#35], %328.1   !
BB332   <- [330]
  int$-           %332.0 = CastType           d     dn %330.1
  lgl$-           %332.1 = Gt                 d     %332.0, 0L, elided   <lgl$->
  void                    StVar              lW    doExcluded, %332.1, e0.3
  val?^ | miss    %332.3 = LdVar              eR    verbose, e0.3
  val?            %332.4 = Force!<lazy>       !v    %332.3, e0.3   <lgl$->
  lgl$#-          %332.5 = CheckTrueFalse     we    %332.4
  void                    Branch                   %332.5 -> BB307 (if true) | BB31 (if false)
BB333   <- [330]
  fs              %333.0 = FrameState         R     0x55fa136cd470+626: [%330.1], env=e0.3
  void                    Deopt              !v    %333.0, Typecheck@0x55fa0e5780e0[Type#36], %330.1   !
BB307   <- [332]
  void                    StVar              lW    plist, %0.18, e0.3
  (cls|spec|blt)  %307.1 = LdFun              !v    cat, e0.3
  fs              %307.2 = FrameState         R     0x55fa136cd470+707: [%307.1], env=e0.3
  void                    Deopt              !v    %307.2, DeadCall@0x55fa0e5780e0[Call#21], %307.1   !
BB31   <- [332]
  val?^ | miss    %31.0 = LdVar              eR    length, e0.3
  lgl$#-          %31.1 = Identical                <blt length>, %31.0   <true>
  void                    Branch                   %31.1 -> BB334 (if true) | BB335 (if false)
BB334   <- [31]
  val?^ | miss    %334.0 = LdVar              eR    classes, e0.3
  val?            %334.1 = Force!<lazy>       !v    %334.0, e0.3   <(str|vec)>
  val?            %334.2 = CallBuiltin        !v    length(%334.1) e0.3   <int$->
  lgl$#-          %334.3 = IsType                   %334.2 isA int$-
  void                    Branch                   %334.3 -> BB336 (if true) | BB337 (if false)
BB335   <- [31]
  fs              %335.0 = FrameState         R     0x55fa136cd470+667: [%332.5], env=e0.3
  void                    Deopt              !v    %335.0, DeadBranchReached@0x55fa0e5780e0[Test#4], %31.1   !
BB336   <- [334]
  int$-           %336.0 = CastType           d     dn %334.2
  void                    StVar              lW    nargs, %336.0, e0.3
  lgl$-           %336.2 = Missing            eR    useInherited, e0.3
  lgl$-           %336.3 = Not                d     %336.2, elided
  lgl$-           %336.4 = AsLogical                %336.3
  lgl$#-          %336.5 = Identical                %336.4, false
  void                    Branch                   %336.5 -> BB306 (if true) | BB36 (if false)
BB337   <- [334]
  fs              %337.0 = FrameState         R     0x55fa136cd470+866: [%334.2], env=e0.3
  void                    Deopt              !v    %337.0, Typecheck@0x55fa0e5780e0[Type#61], %334.2   !
BB306   <- [336]
  void                    Nop                !     
  lgl$-           %306.1 = %336.4
  goto BB41
BB36   <- [336]
  val?^ | miss    %36.0 = LdVar              eR    length, e0.3
  lgl$#-          %36.1 = Identical                <blt length>, %36.0   <true>
  void                    Branch                   %36.1 -> BB338 (if true) | BB339 (if false)
BB41   <- [306, 346]
  lgl$-           %41.0 = Phi                      %346.4:BB346, %306.1:BB306
  lgl$-           %41.1 = %41.0
  lgl$#-          %41.2 = CheckTrueFalse     e     %41.1
  void                    Branch                   %41.2 -> BB305 (if true) | BB44 (if false)
BB338   <- [36]
  val?^ | miss    %338.0 = LdVar              eR    useInherited, e0.3
  val?            %338.1 = Force!<lazy>       !v    %338.0, e0.3   <lgl+>
  lgl$#-          %338.2 = IsType                   %338.1 isA lgl+
  void                    Branch                   %338.2 -> BB340 (if true) | BB341 (if false)
BB339   <- [36]
  fs              %339.0 = FrameState         R     0x55fa136cd470+880: [], env=e0.3
  void                    Deopt              !v    %339.0, DeadBranchReached@0x55fa0e5780e0[Test#5], %36.1   !
BB305   <- [41]
  (cls|spec|blt)  %305.0 = LdFun              !v    rep, e0.3
  fs              %305.1 = FrameState         R     0x55fa136cd470+1028: [%305.0], env=e0.3
  void                    Deopt              !v    %305.1, DeadCall@0x55fa0e5780e0[Call#32], %305.0   !
BB44   <- [41]
  val?^ | miss    %44.0 = LdVar              eR    hasGroup, e0.3
  lgl$#-          %44.1 = IsType                   %44.0 isA lgl$-
  void                    Branch                   %44.1 -> BB342 (if true) | BB343 (if false)
BB340   <- [338]
  lgl+            %340.0 = CastType           d     dn %338.1
  (int|real)$-    %340.1 = CallSafeBuiltin    wed   length(%340.0)    <int$->
  lgl$#-          %340.2 = IsType                   %340.1 isA int$-
  void                    Branch                   %340.2 -> BB344 (if true) | BB345 (if false)
BB341   <- [338]
  fs              %341.0 = FrameState         R     0x55fa136cd470+963: [%336.4, <blt length>, %338.1], env=e0.3
  void                    Deopt              !v    %341.0, Typecheck@0x55fa0e5780e0[Type#63], %338.1   !
BB342   <- [44]
  lgl$-           %342.0 = CastType           d     dn %44.0
  lgl$-           %342.1 = AsLogical                %342.0
  lgl$#-          %342.2 = Identical                %342.1, false
  void                    Branch                   %342.2 -> BB304 (if true) | BB45 (if false)
BB343   <- [44]
  void                    Nop                !     
  val?^ | miss    %343.1 = %44.0
  dr              %343.2 = Typecheck@0x55fa0e5780e0[Type#70]
  goto BB42
BB344   <- [340]
  int$-           %344.0 = CastType           d     dn %340.1
  val?^ | miss    %344.1 = LdVar              eR    nargs, e0.3
  lgl$#-          %344.2 = IsType                   %344.1 isA int$-
  void                    Branch                   %344.2 -> BB346 (if true) | BB347 (if false)
BB345   <- [340]
  void                    Nop                !     
  (int|real)$-    %345.1 = %340.1
  dr              %345.2 = Typecheck@0x55fa0e5780e0[Type#64]
  goto BB39
BB304   <- [342]
  void                    Nop                !     
  lgl$-           %304.1 = %342.1
  goto BB46
BB45   <- [342]
  val?^ | miss    %45.0 = LdVar              eR    doExcluded, e0.3
  lgl$#-          %45.1 = IsType                   %45.0 isA lgl$-
  void                    Branch                   %45.1 -> BB348 (if true) | BB349 (if false)
BB42   <- [343, 349]
  val?^ | miss    %42.0 = Phi                      %343.1:BB343, %349.1:BB349
  val?^ | miss    %42.1 = %42.0
  dr              %42.2 = Phi                      %343.2:BB343, %349.2:BB349
  dr              %42.3 = %42.2
  fs              %42.4 = FrameState         R     0x55fa136cd470+1012: [%41.1], env=e0.3
  void                    Deopt              !v    %42.4, %42.3, %42.1   !
BB346   <- [344]
  int$-           %346.0 = CastType           d     dn %344.1
  lgl$-           %346.1 = Lt                 d     %344.0, %346.0, elided   <lgl$->
  lgl$-           %346.2 = AsLogical                %346.1
  lgl$-           %346.3 = LAnd                     %336.4, %346.2
  lgl$-           %346.4 = %346.3
  goto BB41
BB347   <- [344]
  void                    Nop                !     
  val?^ | miss    %347.1 = %344.1
  dr              %347.2 = Typecheck@0x55fa0e5780e0[Type#65]
  goto BB39
BB39   <- [345, 347]
  val?^ | miss    %39.0 = Phi                      %345.1:BB345, %347.1:BB347
  val?^ | miss    %39.1 = %39.0
  dr              %39.2 = Phi                      %345.2:BB345, %347.2:BB347
  dr              %39.3 = %39.2
  fs              %39.4 = FrameState         R     0x55fa136cd470+985: [%336.4, %340.1], env=e0.3
  void                    Deopt              !v    %39.4, %39.3, %39.1   !
BB46   <- [304, 348]
  lgl$-           %46.0 = Phi                      %348.4:BB348, %304.1:BB304
  lgl$-           %46.1 = %46.0
  lgl$#-          %46.2 = CheckTrueFalse     e     %46.1
  void                    Branch                   %46.2 -> BB288 (if true) | BB49 (if false)
BB348   <- [45]
  lgl$-           %348.0 = CastType           d     dn %45.0
  lgl$-           %348.1 = Not                d     %348.0, elided
  lgl$-           %348.2 = AsLogical                %348.1
  lgl$-           %348.3 = LAnd                     %342.1, %348.2
  lgl$-           %348.4 = %348.3
  goto BB46
BB349   <- [45]
  void                    Nop                !     
  val?^ | miss    %349.1 = %45.0
  dr              %349.2 = Typecheck@0x55fa0e5780e0[Type#71]
  goto BB42
BB288   <- [46]
  val?^ | miss    %288.0 = LdVar              eR    .sigLabel, e0.3
  lgl$#-          %288.1 = Identical                %288.0, function(sig) <(rir::DispatchTable*)0x55fa0e8b|...
  void                    Branch                   %288.1 -> BB350 (if true) | BB351 (if false)
BB49   <- [46]
  void                    Nop                !     
  goto BB50
BB350   <- [288]
  prom-           %350.0 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p114, e0.3
  val?^           %350.1 = CastType                 up %350.0
  val?^ | miss    %350.2 = LdVar              eR    paste, <env 0x55fa0b35b378>
  lgl$#-          %350.3 = Identical                %350.2, function(..., sep=" ", collapse=NULL, recycle0|...
  void                    Branch                   %350.3 -> BB352 (if true) | BB353 (if false)
BB351   <- [288]
  void                    Nop                !     
  val?^ | miss    %351.1 = %288.0
  dr              %351.2 = CallTarget@0x55fa0e5780e0[Call#33]
  goto BB47
BB50   <- [49, 295]
  val?^ | miss    %50.0 = LdVar              eR    classes, e0.3
  val?            %50.1 = Force!<wrapped>    !v    %50.0, e0.3   <(str|vec)>
  val?            %50.2 = Extract2_1D        !v    %50.1, 1L, e0.3   <str$+>
  void                    StVar              lW    cl1, %50.2, e0.3
  val?^ | miss    %50.4 = LdVar              eR    getClass, e0.3
  lgl$#-          %50.5 = Identical                %50.4, function(Class, .Force=FALSE, where=.classEnv(|...
  void                    Branch                   %50.5 -> BB356 (if true) | BB357 (if false)
BB352   <- [350]
  env             e352.0 = MkEnv              l     sig=%350.1, parent=<env 0x55fa0b35b378>, context 0
  prom-           %352.1 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p138, e352.0
  dots-           %352.2 = DotsList           l     %352.1
  val?^ | miss    %352.3 = CastType                 up %352.1
  env             e352.4 = MkEnv              l     ...=%352.2, sep(miss)=" ", collapse="#", recycle0(miss)=false, parent=R_BaseNamespace, context -1
  val?            %352.5 = Force!             !vL   %352.3, e352.4
  val+            %352.6 = CallSafeBuiltin    wed   list(%352.5)    <vec->
  val+            %352.7 = CallSafeBuiltin    wed   paste(%352.6, " ", "#", false)    <str$->
  void                    StVar              lW    label, %352.7, e0.3
  val?^ | miss    %352.9 = LdVar              eR    .getGroupMethods, e0.3
  lgl$#-          %352.10 = Identical                %352.9, function(labels, generics, found) <(rir::Dispa|...
  void                    Branch                   %352.10 -> BB354 (if true) | BB355 (if false)
BB353   <- [350]
  void                    Nop                !     
  val?^ | miss    %353.1 = %350.2
  dr              %353.2 = CallTarget@0x55fa0e407028[Call#0]
  goto BB47
BB47   <- [351, 353]
  val?^ | miss    %47.0 = Phi                      %351.1:BB351, %353.1:BB353
  val?^ | miss    %47.1 = %47.0
  dr              %47.2 = Phi                      %351.2:BB351, %353.2:BB353
  dr              %47.3 = %47.2
  fs              %47.4 = FrameState         R     0x55fa136cd470+1120: [%46.1], env=e0.3
  void                    Deopt              !v    %47.4, %47.3, %47.1   !
BB356   <- [50]
  prom-           %356.0 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p15 (!refl), e0.3
  prom-           %356.1 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p16, e0.3
  val?            %356.2 = StaticCall         !v    getClass[0x55fa107c1210](%356.0, true, %356.1) { 0 2n 1n } e0.3   <other>
  void                    StVar              lW    def, %356.2, e0.3
  lgl$-           %356.4 = Missing            eR    useInherited, e0.3
  lgl$-           %356.5 = AsLogical                %356.4
  lgl$#-          %356.6 = Identical                %356.5, true
  void                    Branch                   %356.6 -> BB287 (if true) | BB53 (if false)
BB357   <- [50]
  fs              %357.0 = FrameState         R     0x55fa136cd470+1502: [], env=e0.3
  void                    Deopt              !v    %357.0, CallTarget@0x55fa0e5780e0[Call#37], %50.4   !
BB354   <- [352]
  prom-           %354.0 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p115 (!refl), e0.3
  prom-           %354.1 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p116, e0.3
  val?            %354.2 = StaticCall         !v    .getGroupMethods[0x55fa10c8c150](%354.0, %354.1, false) e0.3   <vec+>
  void                    StVar              lW    direct, %354.2, e0.3
  lgl$#-          %354.4 = IsType                   %354.2 isA val?+
  val?^ | miss    %354.5 = LdVar              eR    length, e0.3
  lgl$#-          %354.6 = Identical                <blt length>, %354.5   <true>
  void                    Branch                   %354.6 -> BB360 (if true) | BB361 (if false)
BB355   <- [352]
  fs              %355.0 = FrameState         R     0x55fa136cd470+1177: [], env=e0.3
  void                    Deopt              !v    %355.0, CallTarget@0x55fa0e5780e0[Call#34], %352.9   !
BB287   <- [356]
  void                    Nop                !     
  lgl$-           %287.1 = %356.5
  goto BB56
BB53   <- [356]
  val?^ | miss    %53.0 = LdVar              eR    useInherited, e0.3
  val?            %53.1 = Force!<wrapped>    !v    %53.0, e0.3   <lgl+>
  lgl$#-          %53.2 = IsType                   %53.1 isA val+   <true>
  lgl$#-          %53.3 = IsType                   %53.1 isA lgl+
  void                    Branch                   %53.2 -> BB362 (if true) | BB363 (if false)
BB360   <- [354]
  val             %360.0 = ChkMissing         e     %354.2
  void                    Branch                   %354.4 -> BB366 (if true) | BB367 (if false)
BB361   <- [354]
  void                    Nop                !     
  lgl$#-          %361.1 = %354.6
  dr              %361.2 = DeadBranchReached@0x55fa0e5780e0[Test#6]
  goto BB291
BB56   <- [287, 368]
  lgl$-           %56.0 = Phi                      %368.4:BB368, %287.1:BB287
  lgl$-           %56.1 = %56.0
  lgl$#-          %56.2 = CheckTrueFalse     e     %56.1
  void                    Branch                   %56.2 -> BB271 (if true) | BB59 (if false)
BB362   <- [53]
  void                    Branch                   %53.3 -> BB368 (if true) | BB369 (if false)
BB363   <- [53]
  void                    Nop                !     
  lgl$#-          %363.1 = %53.2
  dr              %363.2 = DeadBranchReached@0x55fa0e5780e0[Test#9]
  goto BB54
BB366   <- [360]
  val?+           %366.0 = CastType           d     dn %354.2   <vec+>
  (int|real)$-    %366.1 = CallSafeBuiltin    wed   length(%366.0)    <int$->
  lgl$#-          %366.2 = IsType                   %366.1 isA int$-
  void                    Branch                   %366.2 -> BB374 (if true) | BB375 (if false)
BB367   <- [360]
  void                    Nop                !     
  val?            %367.1 = %354.2
  dr              %367.2 = Typecheck@0x55fa0e5780e0[Type#76]
  goto BB291
BB291   <- [361, 367]
  val?^ | miss    %291.0 = Phi                      %361.1:BB361, %367.1:BB367
  val?^ | miss    %291.1 = %291.0
  dr              %291.2 = Phi                      %361.2:BB361, %367.2:BB367
  dr              %291.3 = %291.2
  fs              %291.4 = FrameState         R     0x55fa136cd470+1233: [], env=e0.3
  void                    Deopt              !v    %291.4, %291.3, %291.1   !
BB271   <- [56]
  val?^ | miss    %271.0 = LdVar              eR    c, e0.3
  lgl$#-          %271.1 = Identical                <blt c>, %271.0   <true>
  void                    Branch                   %271.1 -> BB358 (if true) | BB359 (if false)
BB59   <- [56]
  val?^ | miss    %59.0 = LdVar              eR    cl1, e0.3
  val?            %59.1 = Force!             !v    %59.0, e0.3   <val?_>
  val?            %59.2 = %59.1
  goto BB60
BB368   <- [362]
  lgl+            %368.0 = CastType           d     dn %53.1
  lgl$-           %368.1 = Extract2_1D        wed   %368.0, 1L, elided   <lgl$->
  lgl$-           %368.2 = AsLogical                %368.1
  lgl$-           %368.3 = LOr                      %356.5, %368.2
  lgl$-           %368.4 = %368.3
  goto BB56
BB369   <- [362]
  void                    Nop                !     
  val?            %369.1 = %53.1
  dr              %369.2 = Typecheck@0x55fa0e5780e0[Type#91]
  goto BB54
BB54   <- [363, 369]
  val?^ | miss    %54.0 = Phi                      %363.1:BB363, %369.1:BB369
  val?^ | miss    %54.1 = %54.0
  dr              %54.2 = Phi                      %363.2:BB363, %369.2:BB369
  dr              %54.3 = %54.2
  fs              %54.4 = FrameState         R     0x55fa136cd470+1592: [%356.5, %53.1], env=e0.3
  void                    Deopt              !v    %54.4, %54.3, %54.1   !
BB374   <- [366]
  int$-           %374.0 = CastType           d     dn %366.1
  lgl$#-          %374.1 = CheckTrueFalse     e     %374.0
  void                    Branch                   %374.1 -> BB296 (if true) | BB295 (if false)
BB375   <- [366]
  fs              %375.0 = FrameState         R     0x55fa136cd470+1324: [%366.1], env=e0.3
  void                    Deopt              !v    %375.0, Typecheck@0x55fa0e5780e0[Type#79], %366.1   !
BB358   <- [271]
  val?^ | miss    %358.0 = LdVar              eR    cl1, e0.3
  lgl$#-          %358.1 = IsType                   %358.0 isA val?~+ | miss
  void                    Branch                   %358.1 -> BB364 (if true) | BB365 (if false)
BB359   <- [271]
  void                    Nop                !     
  lgl$#-          %359.1 = %271.1
  dr              %359.2 = DeadBranchReached@0x55fa0e5780e0[Test#10]
  goto BB57
BB60   <- [59, 394]
  val?            %60.0 = Phi                      %59.2:BB59, %394.2:BB394   <str->
  val?            %60.1 = %60.0
  void                    StVar              lW    labels, %60.1, e0.3
  val?^ | miss    %60.3 = LdVar              eR    list, e0.3
  lgl$#-          %60.4 = Identical                <blt list>, %60.3   <true>
  void                    Branch                   %60.4 -> BB370 (if true) | BB371 (if false)
BB296   <- [374]
  val?^ | miss    %296.0 = LdVar              eR    doCache, e0.3
  val?            %296.1 = Force!<lazy>       !v    %296.0, e0.3   <lgl$->
  lgl$#-          %296.2 = CheckTrueFalse     we    %296.1
  void                    Branch                   %296.2 -> BB303 (if true) | BB299 (if false)
BB295   <- [374]
  void                    Nop                !     
  goto BB50
BB364   <- [358]
  val?~+ | miss   %364.0 = CastType           d     dn %358.0
  val?+           %364.1 = Force!<value>            %364.0,    <str$+>
  val?^ | miss    %364.2 = LdVar              eR    .eligibleSuperClasses, e0.3
  lgl$#-          %364.3 = Identical                %364.2, function(contains, simpleOnly) <(rir::Dispatch|...
  void                    Branch                   %364.3 -> BB372 (if true) | BB373 (if false)
BB365   <- [358]
  void                    Nop                !     
  val?^ | miss    %365.1 = %358.0
  dr              %365.2 = Typecheck@0x55fa0e5780e0[Type#100]
  goto BB57
BB57   <- [359, 365, 373]
  val?^ | miss    %57.0 = Phi                      %359.1:BB359, %365.1:BB365, %373.1:BB373
  val?^ | miss    %57.1 = %57.0
  dr              %57.2 = Phi                      %359.2:BB359, %365.2:BB365, %373.2:BB373
  dr              %57.3 = %57.2
  fs              %57.4 = FrameState         R     0x55fa136cd470+1643: [%56.1], env=e0.3
  void                    Deopt              !v    %57.4, %57.3, %57.1   !
BB370   <- [60]
  val             %370.0 = ChkMissing         e     %60.1
  val+            %370.1 = CallSafeBuiltin    wed   list(%60.1)    <vec$->
  void                    StVar              lW    supersList, %370.1, e0.3
  val?^ | miss    %370.3 = LdVar              eR    vector, e0.3
  lgl$#-          %370.4 = Identical                %370.3, function(mode="logical", length=0L) <(rir::Dis|...
  void                    Branch                   %370.4 -> BB380 (if true) | BB381 (if false)
BB371   <- [60]
  fs              %371.0 = FrameState         R     0x55fa136cd470+1831: [], env=e0.3
  void                    Deopt              !v    %371.0, DeadBranchReached@0x55fa0e5780e0[Test#11], %60.4   !
BB303   <- [296]
  val?^ | miss    %303.0 = LdVar              eR    assign, e0.3
  lgl$#-          %303.1 = Identical                %303.0, function(x, value, pos=-(1), envir=as.environm|...
  void                    Branch                   %303.1 -> BB386 (if true) | BB387 (if false)
BB299   <- [296]
  void                    Nop                !     
  goto BB300
BB372   <- [364]
  prom-           %372.0 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p110, e0.3
  prom-           %372.1 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p113, e0.3
  ct              %372.2 = PushContext        lCL   %372.0, %372.1, .eligibleSuperClasses(@(def, contains), simple|..., function(contains, simpleOnly) <(rir::Dispatch|..., e0.3
  val?^           %372.3 = CastType                 up %372.1
  val?^           %372.4 = CastType                 up %372.0
  val?^ | miss    %372.5 = LdVar              eR    names, <env 0x55fa0b35b378>
  lgl$#-          %372.6 = Identical                <blt names>, %372.5   <true>
  void                    Branch                   %372.6 -> BB376 (if true) | BB377 (if false)
BB373   <- [364]
  void                    Nop                !     
  val?^ | miss    %373.1 = %364.2
  dr              %373.2 = CallTarget@0x55fa0e5780e0[Call#41]
  goto BB57
BB380   <- [370]
  val?^ | miss    %380.0 = LdVar              eR    nargs, e0.3
  lgl$#-          %380.1 = IsType                   %380.0 isA int$-
  void                    Branch                   %380.1 -> BB382 (if true) | BB383 (if false)
BB381   <- [370]
  void                    Nop                !     
  val?^ | miss    %381.1 = %370.3
  dr              %381.2 = CallTarget@0x55fa0e5780e0[Call#44]
  goto BB63
BB386   <- [303]
  prom-           %386.0 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p117, e0.3
  prom-           %386.1 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p118, e0.3
  prom-           %386.2 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p119, e0.3
  val?            %386.3 = StaticCall         !v    assign[0x55fa16db2f90](%386.0, %386.1, missingArg, %386.2) { 0 1 3n } e0.3
  goto BB300
BB387   <- [303]
  fs              %387.0 = FrameState         R     0x55fa136cd470+1355: [%296.2], env=e0.3
  void                    Deopt              !v    %387.0, CallTarget@0x55fa0e5780e0[Call#36], %303.0   !
BB300   <- [299, 386]
  val?^ | miss    %300.0 = LdVar              eR    direct, e0.3
  lgl$#-          %300.1 = IsType                   %300.0 isA val?~+ | miss
  void                    Branch                   %300.1 -> BB390 (if true) | BB391 (if false)
BB376   <- [372]
  env             e376.0 = MkEnv              l     contains=%372.4, simpleOnly=%372.3, parent=<env 0x55fa0b35b378>, context 1
  val?            %376.1 = Force!<lazy>       !vL   %372.4, e376.0   <vec+>
  lgl$#-          %376.2 = IsType                   %376.1 isA val?+
  void                    Branch                   %376.2 -> BB378 (if true) | BB379 (if false)
BB377   <- [372]
  fs              %377.0 = FrameState         R     0x55fa136cd470+1789: [<blt c>, %364.1], env=e0.3
  env             e377.1 = (MkEnv)            l     contains=%372.4, simpleOnly=%372.3, parent=<env 0x55fa0b35b378>, context 1
  fs              %377.2 = FrameState         R     0x55fa106a07f0+17: [<blt names>, %372.6], env=e377.1, next=%377.0
  void                    Deopt              !v    %377.2, DeadBranchReached@0x55fa11c90868[Test#0], %372.6   !
BB382   <- [380]
  int$-           %382.0 = CastType           d     dn %380.0
  vec-            %382.1 = CallSafeBuiltin    wed   vector("list", %382.0)    <vec->
  void                    StVar              lW    classDefs, %382.1, e0.3
  val?^ | miss    %382.3 = LdVar              eR    def, e0.3
  val?            %382.4 = Force!<value>      !v    %382.3, e0.3   <other>
  val?^ | miss    %382.5 = LdVar              eR    classDefs !upd, e0.3
  lgl$#-          %382.6 = IsType                   %382.5 isA val?~- | miss
  void                    Branch                   %382.6 -> BB392 (if true) | BB393 (if false)
BB383   <- [380]
  void                    Nop                !     
  val?^ | miss    %383.1 = %380.0
  dr              %383.2 = Typecheck@0x55fa0e5780e0[Type#110]
  goto BB63
BB63   <- [381, 383]
  val?^ | miss    %63.0 = Phi                      %381.1:BB381, %383.1:BB383
  val?^ | miss    %63.1 = %63.0
  dr              %63.2 = Phi                      %381.2:BB381, %383.2:BB383
  dr              %63.3 = %63.2
  fs              %63.4 = FrameState         R     0x55fa136cd470+1936: [], env=e0.3
  void                    Deopt              !v    %63.4, %63.3, %63.1   !
BB390   <- [300]
  val?~+ | miss   %390.0 = CastType           d     dn %300.0
  void                    Visible            v     
  val?+           %390.2 = Force!<value>            %390.0,    <vec$+>
  val?+           %390.3 = %390.2
  goto BB139
BB391   <- [300]
  fs              %391.0 = FrameState         R     0x55fa136cd470+1420: [], env=e0.3
  void                    Deopt              !v    %391.0, Typecheck@0x55fa0e5780e0[Type#85], %300.0   !
BB378   <- [376]
  val?+           %378.0 = CastType           d     dn %376.1   <vec+>
  val+            %378.1 = CallSafeBuiltin    wed   names(%378.0)    <str->
  void                    StVar              lW    what, %378.1, e376.0
  val?^ | miss    %378.3 = LdVar              eR    length, <env 0x55fa0b35b378>
  lgl$#-          %378.4 = Identical                <blt length>, %378.3   <true>
  void                    Branch                   %378.4 -> BB384 (if true) | BB385 (if false)
BB379   <- [376]
  fs              %379.0 = FrameState         R     0x55fa136cd470+1789: [<blt c>, %364.1], env=e0.3
  fs              %379.1 = FrameState         R     0x55fa106a07f0+69: [<blt names>, %376.1], env=e376.0, next=%379.0
  void                    Deopt              !v    %379.1, Typecheck@0x55fa11c90868[Type#1], %376.1   !
BB392   <- [382]
  val?~- | miss   %392.0 = CastType           d     dn %382.5
  val?-           %392.1 = Force!<value>            %392.0,    <vec->
  val?            %392.2 = Subassign2_1D      !v    %382.4, %392.1, 1L, e0.3
  void                    StVar              lW    classDefs, %392.2, e0.3
  val?^ | miss    %392.4 = LdVar              eR    nargs, e0.3
  lgl$#-          %392.5 = IsType                   %392.4 isA int$-
  void                    Branch                   %392.5 -> BB396 (if true) | BB397 (if false)
BB393   <- [382]
  fs              %393.0 = FrameState         R     0x55fa136cd470+1996: [%382.4], env=e0.3
  void                    Deopt              !v    %393.0, Typecheck@0x55fa0e5780e0[Type#113], %382.5   !
BB139   <- [390, 600]
  val?+           %139.0 = Phi                      %600.3:BB600, %390.3:BB390
  val?+           %139.1 = %139.0
  void                    Return             l     %139.1
BB384   <- [378]
  (int|real)$-    %384.0 = CallSafeBuiltin    wed   length(%378.1)    <int$->
  lgl$#-          %384.1 = IsType                   %384.0 isA int$-
  void                    Branch                   %384.1 -> BB388 (if true) | BB389 (if false)
BB385   <- [378]
  fs              %385.0 = FrameState         R     0x55fa136cd470+1789: [<blt c>, %364.1], env=e0.3
  fs              %385.1 = FrameState         R     0x55fa106a07f0+105: [], env=e376.0, next=%385.0
  void                    Deopt              !v    %385.1, DeadBranchReached@0x55fa11c90868[Test#1], %378.4   !
BB396   <- [392]
  int$-           %396.0 = CastType           d     dn %392.4
  lgl$-           %396.1 = Gt                 d     %396.0, 1, elided   <lgl$->
  lgl$#-          %396.2 = CheckTrueFalse     e     %396.1
  void                    Branch                   %396.2 -> BB223 (if true) | BB69 (if false)
BB397   <- [392]
  void                    Nop                !     
  val?^ | miss    %397.1 = %392.4
  dr              %397.2 = Typecheck@0x55fa0e5780e0[Type#114]
  goto BB67
BB388   <- [384]
  int$-           %388.0 = CastType           d     dn %384.0
  lgl$-           %388.1 = Not                d     %388.0, elided
  lgl$#-          %388.2 = CheckTrueFalse     e     %388.1
  void                    Branch                   %388.2 -> BB286 (if true) | BB280 (if false)
BB389   <- [384]
  void                    Nop                !     
  (int|real)$-    %389.1 = %384.0
  dr              %389.2 = Typecheck@0x55fa11c90868[Type#5]
  goto BB278
BB223   <- [396]
  lgl$#-          %223.0 = ColonInputEffects        2, %396.0   <true>
  void                    Branch                   %223.0 -> BB404 (if true) | BB405 (if false)
BB69   <- [396]
  void                    Nop                !     
  goto BB70
BB67   <- [397, 405, 407, 411]
  val?^ | miss    %67.0 = Phi                      %397.1:BB397, %405.1:BB405, %407.1:BB407, %411.1:BB411
  val?^ | miss    %67.1 = %67.0
  dr              %67.2 = Phi                      %397.2:BB397, %405.2:BB405, %407.2:BB407, %411.2:BB411
  dr              %67.3 = %67.2
  fs              %67.4 = FrameState         R     0x55fa136cd470+2031: [], env=e0.3
  void                    Deopt              !v    %67.4, %67.3, %67.1   !
BB286   <- [388]
  void                    Nop                !     
  val+            %286.1 = %378.1
  goto BB283
BB280   <- [388]
  val?^ | miss    %280.0 = LdVar              eR    vapply, <env 0x55fa0b35b378>
  lgl$#-          %280.1 = Identical                %280.0, function(X, FUN, FUN.VALUE, ..., USE.NAMES=TRU|...
  void                    Branch                   %280.1 -> BB398 (if true) | BB399 (if false)
BB278   <- [389, 399]
  val?^ | miss    %278.0 = Phi                      %389.1:BB389, %399.1:BB399
  val?^ | miss    %278.1 = %278.0
  dr              %278.2 = Phi                      %389.2:BB389, %399.2:BB399
  dr              %278.3 = %278.2
  fs              %278.4 = FrameState         R     0x55fa136cd470+1789: [<blt c>, %364.1], env=e0.3
  fs              %278.5 = FrameState         R     0x55fa106a07f0+196: [%384.0], env=e376.0, next=%278.4
  void                    Deopt              !v    %278.5, %278.3, %278.1   !
BB404   <- [223]
  int$#-          %404.0 = ColonCastRhs       e     2L, %396.0   <int$->
  lgl$#-          %404.1 = Lte                d     2L, %404.0, elided   <true>
  void                    Branch                   %404.1 -> BB406 (if true) | BB407 (if false)
BB405   <- [223]
  void                    Nop                !     
  lgl$#-          %405.1 = %223.0
  dr              %405.2 = DeadBranchReached@0x55fa0e5780e0[Test#12]
  goto BB67
BB70   <- [69, 241]
  val?^ | miss    %70.0 = LdVar              eR    labels, e0.3
  lgl$#-          %70.1 = IsType                   %70.0 isA val?~- | miss
  void                    Branch                   %70.1 -> BB400 (if true) | BB401 (if false)
BB283   <- [286, 416]
  val?            %283.0 = Phi                      %416.2:BB416, %286.1:BB286
  val?            %283.1 = %283.0
  val?            %283.2 = PopContext         C     %283.1, %372.2   <str->
  lgl$#-          %283.3 = IsType                   %283.2 isA val?-
  void                    Branch                   %283.3 -> BB394 (if true) | BB395 (if false)
BB398   <- [280]
  prom-           %398.0 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p136, e376.0
  prom-           %398.1 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p137, e376.0
  val?            %398.2 = StaticCall         !v    vapply[0x55fa0ea37990](%398.0, %398.1, na-lgl) { 0 1 2 } e376.0   <lgl+>
  void                    StVar              lW    eligible, %398.2, e376.0
  val?^ | miss    %398.4 = LdVar              eR    what, e376.0
  lgl$#-          %398.5 = IsType                   %398.4 isA val?~- | miss
  void                    Branch                   %398.5 -> BB412 (if true) | BB413 (if false)
BB399   <- [280]
  void                    Nop                !     
  val?^ | miss    %399.1 = %280.0
  dr              %399.2 = CallTarget@0x55fa11c90868[Call#2]
  goto BB278
BB406   <- [404]
  lgl$#-          %406.0 = Neq                d     %404.0, 2L, elided   <true>
  void                    Branch                   %406.0 -> BB410 (if true) | BB411 (if false)
BB407   <- [404]
  void                    Nop                !     
  lgl$#-          %407.1 = %404.1
  dr              %407.2 = DeadBranchReached@0x55fa0e5780e0[Test#15]
  goto BB67
BB400   <- [70]
  val?~- | miss   %400.0 = CastType           d     dn %70.0
  val?-           %400.1 = Force!<value>            %400.0,    <str->
  lgl$#-          %400.2 = IsType                   %400.1 isA val+   <true>
  void                    Branch                   %400.2 -> BB402 (if true) | BB403 (if false)
BB401   <- [70]
  void                    Nop                !     
  val?^ | miss    %401.1 = %70.0
  dr              %401.2 = Typecheck@0x55fa0e5780e0[Type#238]
  goto BB71
BB394   <- [283]
  val?-           %394.0 = CastType           d     dn %283.2   <str->
  (list|sym|char|lgl|int|real|str|vec|complex|raw|cls|spec|blt|prom|_|code|env|ast|expressions|dots|other)+ %394.1 = CallSafeBuiltin    wed   c(%364.1, %394.0, "ANY")    <str->
  (list|sym|char|lgl|int|real|str|vec|complex|raw|cls|spec|blt|prom|_|code|env|ast|expressions|dots|other)+ %394.2 = %394.1
  goto BB60
BB395   <- [283]
  fs              %395.0 = FrameState         R     0x55fa136cd470+1789: [<blt c>, %364.1, %283.2], env=e0.3
  void                    Deopt              !v    %395.0, Typecheck@0x55fa0e5780e0[Type#105], %283.2   !
BB412   <- [398]
  val?~- | miss   %412.0 = CastType           d     dn %398.4
  val?-           %412.1 = Force!<value>            %412.0,    <str->
  lgl$#-          %412.2 = IsType                   %412.1 isA val+   <true>
  void                    Branch                   %412.2 -> BB414 (if true) | BB415 (if false)
BB413   <- [398]
  void                    Nop                !     
  val?^ | miss    %413.1 = %398.4
  dr              %413.2 = Typecheck@0x55fa11c90868[Type#9]
  goto BB281
BB410   <- [406]
  void                    StVar              lW    i, 2L, e0.3
  val?^ | miss    %410.1 = LdVar              eR    getClass, e0.3
  lgl$#-          %410.2 = Identical                %410.1, function(Class, .Force=FALSE, where=.classEnv(|...
  void                    Branch                   %410.2 -> BB420 (if true) | BB421 (if false)
BB411   <- [406]
  void                    Nop                !     
  lgl$#-          %411.1 = %406.0
  dr              %411.2 = DeadBranchReached@0x55fa0e5780e0[Test#16]
  goto BB67
BB402   <- [400]
  val?            %402.0 = Extract1_1D        wed   %400.1, -1L, elided   <str->
  void                    StVar              lW    labels, %402.0, e0.3
  val?^ | miss    %402.2 = LdVar              eR    unique, e0.3
  lgl$#-          %402.3 = Identical                %402.2, function(x, incomparables=FALSE, ...) <(rir::D|...
  void                    Branch                   %402.3 -> BB408 (if true) | BB409 (if false)
BB403   <- [400]
  void                    Nop                !     
  lgl$#-          %403.1 = %400.2
  dr              %403.2 = DeadBranchReached@0x55fa0e5780e0[Test#27]
  goto BB71
BB71   <- [401, 403]
  val?^ | miss    %71.0 = Phi                      %401.1:BB401, %403.1:BB403
  val?^ | miss    %71.1 = %71.0
  dr              %71.2 = Phi                      %401.2:BB401, %403.2:BB403
  dr              %71.3 = %71.2
  fs              %71.4 = FrameState         R     0x55fa136cd470+3635: [], env=e0.3
  void                    Deopt              !v    %71.4, %71.3, %71.1   !
BB414   <- [412]
  val             %414.0 = ChkMissing         e     %398.2
  lgl$#-          %414.1 = IsType                   %414.0 isA lgl+
  void                    Branch                   %414.1 -> BB416 (if true) | BB417 (if false)
BB415   <- [412]
  void                    Nop                !     
  lgl$#-          %415.1 = %412.2
  dr              %415.2 = DeadBranchReached@0x55fa11c90868[Test#2]
  goto BB281
BB281   <- [413, 415, 417]
  val?^ | miss    %281.0 = Phi                      %413.1:BB413, %415.1:BB415, %417.1:BB417
  val?^ | miss    %281.1 = %281.0
  dr              %281.2 = Phi                      %413.2:BB413, %415.2:BB415, %417.2:BB417
  dr              %281.3 = %281.2
  fs              %281.4 = FrameState         R     0x55fa136cd470+1789: [<blt c>, %364.1], env=e0.3
  fs              %281.5 = FrameState         R     0x55fa106a07f0+264: [], env=e376.0, next=%281.4
  void                    Deopt              !v    %281.5, %281.3, %281.1   !
BB420   <- [410]
  prom-           %420.0 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p85, e0.3
  prom-           %420.1 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p87, e0.3
  val?            %420.2 = StaticCall         !v    getClass[0x55fa0b7a2480](%420.0, true, %420.1) { 0 2n 1n } e0.3   <other>
  val?^ | miss    %420.3 = LdVar              eR    classDefs !upd, e0.3
  lgl$#-          %420.4 = IsType                   %420.3 isA val?~- | miss
  void                    Branch                   %420.4 -> BB422 (if true) | BB423 (if false)
BB421   <- [410]
  fs              %421.0 = FrameState         R     0x55fa136cd470+2212: [1L, %404.0, 2L], env=e0.3
  void                    Deopt              !v    %421.0, CallTarget@0x55fa0e5780e0[Call#54], %410.1   !
BB408   <- [402]
  val             %408.0 = ChkMissing         e     %402.0
  val?            %408.1 = StaticCall         !v    unique[0x55fa107ffa70](%402.0) { 0 } e0.3   <str->
  void                    StVar              lW    labels, %408.1, e0.3
  val?^ | miss    %408.3 = LdVar              eR    verbose, e0.3
  val?            %408.4 = Force!<wrapped>    !v    %408.3, e0.3   <lgl$->
  lgl$#-          %408.5 = CheckTrueFalse     we    %408.4
  void                    Branch                   %408.5 -> BB222 (if true) | BB77 (if false)
BB409   <- [402]
  fs              %409.0 = FrameState         R     0x55fa136cd470+3703: [], env=e0.3
  void                    Deopt              !v    %409.0, CallTarget@0x55fa0e5780e0[Call#80], %402.2   !
BB416   <- [414]
  lgl+            %416.0 = CastType           d     dn %414.0
  val?            %416.1 = Extract1_1D        wed   %412.1, %416.0, elided   <str->
  val?            %416.2 = %416.1
  goto BB283
BB417   <- [414]
  void                    Nop                !     
  val             %417.1 = %414.0
  dr              %417.2 = Typecheck@0x55fa11c90868[Type#11]
  goto BB281
BB422   <- [420]
  val?~- | miss   %422.0 = CastType           d     dn %420.3
  val?-           %422.1 = Force!<value>            %422.0,    <vec->
  val?^ | miss    %422.2 = LdVar              eR    i, e0.3
  lgl$#-          %422.3 = IsType                   %422.2 isA int$-
  void                    Branch                   %422.3 -> BB424 (if true) | BB425 (if false)
BB423   <- [420]
  void                    Nop                !     
  val?^ | miss    %423.1 = %420.3
  dr              %423.2 = Typecheck@0x55fa0e5780e0[Type#158]
  goto BB226
BB222   <- [408]
  (cls|spec|blt)  %222.0 = LdFun              !v    cat, e0.3
  fs              %222.1 = FrameState         R     0x55fa136cd470+3779: [%222.0], env=e0.3
  void                    Deopt              !v    %222.1, DeadCall@0x55fa0e5780e0[Call#81], %222.0   !
BB77   <- [408]
  val?^ | miss    %77.0 = LdVar              eR    names, e0.3
  lgl$#-          %77.1 = Identical                <blt names>, %77.0   <true>
  void                    Branch                   %77.1 -> BB418 (if true) | BB419 (if false)
BB424   <- [422]
  int$-           %424.0 = CastType           d     dn %422.2
  val?            %424.1 = Subassign2_1D      !v    %420.2, %422.1, %424.0, e0.3
  void                    StVar              lW    classDefs, %424.1, e0.3
  void                    StVar              lW    cc, %420.2, e0.3
  lgl$-           %424.4 = Missing            eR    useInherited, e0.3
  lgl$-           %424.5 = AsLogical                %424.4
  lgl$#-          %424.6 = Identical                %424.5, true
  void                    Branch                   %424.6 -> BB270 (if true) | BB228 (if false)
BB425   <- [422]
  void                    Nop                !     
  val?^ | miss    %425.1 = %422.2
  dr              %425.2 = Typecheck@0x55fa0e5780e0[Type#159]
  goto BB226
BB226   <- [423, 425]
  val?^ | miss    %226.0 = Phi                      %423.1:BB423, %425.1:BB425
  val?^ | miss    %226.1 = %226.0
  dr              %226.2 = Phi                      %423.2:BB423, %425.2:BB425
  dr              %226.3 = %226.2
  fs              %226.4 = FrameState         R     0x55fa136cd470+2273: [1L, %404.0, 3L, %420.2], env=e0.3
  void                    Deopt              !v    %226.4, %226.3, %226.1   !
BB418   <- [77]
  val?^ | miss    %418.0 = LdVar              eR    table, e0.3
  val?            %418.1 = Force!<wrapped>    !v    %418.0, e0.3   <env->
  lgl$#-          %418.2 = IsType                   %418.1 isA val?-
  void                    Branch                   %418.2 -> BB426 (if true) | BB427 (if false)
BB419   <- [77]
  fs              %419.0 = FrameState         R     0x55fa136cd470+3764: [%408.5], env=e0.3
  void                    Deopt              !v    %419.0, DeadBranchReached@0x55fa0e5780e0[Test#28], %77.1   !
BB270   <- [424]
  void                    Nop                !     
  lgl$-           %270.1 = %424.5
  goto BB231
BB228   <- [424]
  val?^ | miss    %228.0 = LdVar              eR    useInherited, e0.3
  val?            %228.1 = Force!<wrapped>    !v    %228.0, e0.3   <lgl+>
  lgl$#-          %228.2 = IsType                   %228.1 isA val+   <true>
  lgl$#-          %228.3 = IsType                   %228.1 isA lgl+
  void                    Branch                   %228.2 -> BB428 (if true) | BB429 (if false)
BB426   <- [418]
  val?-           %426.0 = CastType           d     dn %418.1   <env->
  val+            %426.1 = CallSafeBuiltin    wed   names(%426.0)    <str->
  void                    StVar              lW    allMethods, %426.1, e0.3
  val?^ | miss    %426.3 = LdVar              eR    match, e0.3
  lgl$#-          %426.4 = Identical                %426.3, function(x, table, nomatch=NA, incomparables=N|...
  void                    Branch                   %426.4 -> BB430 (if true) | BB431 (if false)
BB427   <- [418]
  fs              %427.0 = FrameState         R     0x55fa136cd470+3984: [<blt names>, %418.1], env=e0.3
  void                    Deopt              !v    %427.0, Typecheck@0x55fa0e5780e0[Type#249], %418.1   !
BB231   <- [270, 446]
  lgl$-           %231.0 = Phi                      %446.4:BB446, %270.1:BB270
  lgl$-           %231.1 = %231.0
  lgl$#-          %231.2 = CheckTrueFalse     e     %231.1
  void                    Branch                   %231.2 -> BB265 (if true) | BB234 (if false)
BB428   <- [228]
  val?^ | miss    %428.0 = LdVar              eR    i, e0.3
  lgl$#-          %428.1 = IsType                   %428.0 isA int$-
  void                    Branch                   %428.1 -> BB432 (if true) | BB433 (if false)
BB429   <- [228]
  void                    Nop                !     
  lgl$#-          %429.1 = %228.2
  dr              %429.2 = DeadBranchReached@0x55fa0e5780e0[Test#18]
  goto BB229
BB430   <- [426]
  val?^ | miss    %430.0 = LdVar              eR    labels, e0.3
  lgl$#-          %430.1 = IsType                   %430.0 isA val?~- | miss
  void                    Branch                   %430.1 -> BB434 (if true) | BB435 (if false)
BB431   <- [426]
  void                    Nop                !     
  val?^ | miss    %431.1 = %426.3
  dr              %431.2 = CallTarget@0x55fa0e5780e0[Call#86]
  goto BB80
BB265   <- [231]
  val?^ | miss    %265.0 = LdVar              eR    c, e0.3
  lgl$#-          %265.1 = Identical                <blt c>, %265.0   <true>
  void                    Branch                   %265.1 -> BB450 (if true) | BB451 (if false)
BB234   <- [231]
  (cls|spec|blt)  %234.0 = LdFun              !v    @, <0x55fa0ad53bd8>, e0.3
  prom-           %234.1 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p88, e0.3
  prom-           %234.2 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p89, e0.3
  val?            %234.3 = Call               !v    %234.0(%234.1, %234.2) e0.3   <str$+>
  val?            %234.4 = %234.3
  goto BB235
BB432   <- [428]
  int$-           %432.0 = CastType           d     dn %428.0
  void                    Branch                   %228.3 -> BB446 (if true) | BB447 (if false)
BB433   <- [428]
  void                    Nop                !     
  val?^ | miss    %433.1 = %428.0
  dr              %433.2 = Typecheck@0x55fa0e5780e0[Type#162]
  goto BB229
BB229   <- [429, 433, 447]
  val?^ | miss    %229.0 = Phi                      %429.1:BB429, %433.1:BB433, %447.1:BB447
  val?^ | miss    %229.1 = %229.0
  dr              %229.2 = Phi                      %429.2:BB429, %433.2:BB433, %447.2:BB447
  dr              %229.3 = %229.2
  fs              %229.4 = FrameState         R     0x55fa136cd470+2350: [1L, %404.0, 3L, %424.5, %228.1], env=e0.3
  void                    Deopt              !v    %229.4, %229.3, %229.1   !
BB434   <- [430]
  val?~- | miss   %434.0 = CastType           d     dn %430.0
  val?-           %434.1 = Force!<value>            %434.0,    <str->
  val?^ | miss    %434.2 = LdVar              eR    .fillSignatures, e0.3
  lgl$#-          %434.3 = Identical                %434.2, function(sigs, n) <(rir::DispatchTable*)0x55fa|...
  void                    Branch                   %434.3 -> BB436 (if true) | BB437 (if false)
BB435   <- [430]
  void                    Nop                !     
  val?^ | miss    %435.1 = %430.0
  dr              %435.2 = Typecheck@0x55fa0e5780e0[Type#251]
  goto BB80
BB80   <- [431, 435, 437, 439]
  val?^ | miss    %80.0 = Phi                      %431.1:BB431, %435.1:BB435, %437.1:BB437, %439.1:BB439
  val?^ | miss    %80.1 = %80.0
  dr              %80.2 = Phi                      %431.2:BB431, %435.2:BB435, %437.2:BB437, %439.2:BB439
  dr              %80.3 = %80.2
  fs              %80.4 = FrameState         R     0x55fa136cd470+4020: [], env=e0.3
  void                    Deopt              !v    %80.4, %80.3, %80.1   !
BB450   <- [265]
  (cls|spec|blt)  %450.0 = LdFun              !v    @, <0x55fa0ad53bd8>, e0.3
  prom-           %450.1 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p104, e0.3
  prom-           %450.2 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p105, e0.3
  val?            %450.3 = Call               !v    %450.0(%450.1, %450.2) e0.3   <str$+>
  val?^ | miss    %450.4 = LdVar              eR    .eligibleSuperClasses, e0.3
  lgl$#-          %450.5 = Identical                %450.4, function(contains, simpleOnly) <(rir::Dispatch|...
  void                    Branch                   %450.5 -> BB456 (if true) | BB457 (if false)
BB451   <- [265]
  fs              %451.0 = FrameState         R     0x55fa136cd470+2409: [1L, %404.0, 3L, %231.1], env=e0.3
  void                    Deopt              !v    %451.0, DeadBranchReached@0x55fa0e5780e0[Test#19], %265.1   !
BB235   <- [234, 464]
  val?            %235.0 = Phi                      %234.4:BB234, %464.2:BB464
  val?            %235.1 = %235.0
  void                    StVar              lW    allLabels, %235.1, e0.3
  val?^ | miss    %235.3 = LdVar              eR    outerLabels, e0.3
  lgl$#-          %235.4 = Identical                %235.3, function(labels, new) <(rir::DispatchTable*)0x|...
  void                    Branch                   %235.4 -> BB460 (if true) | BB461 (if false)
BB446   <- [432]
  lgl+            %446.0 = CastType           d     dn %228.1
  lgl$-           %446.1 = Extract2_1D        wed   %446.0, %432.0, elided   <lgl$->
  lgl$-           %446.2 = AsLogical                %446.1
  lgl$-           %446.3 = LOr                      %424.5, %446.2
  lgl$-           %446.4 = %446.3
  goto BB231
BB447   <- [432]
  void                    Nop                !     
  val?            %447.1 = %228.1
  dr              %447.2 = Typecheck@0x55fa0e5780e0[Type#160]
  goto BB229
BB436   <- [434]
  prom-           %436.0 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p22 (!refl), e0.3
  prom-           %436.1 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p23, e0.3
  ct              %436.2 = PushContext        lCL   %436.0, %436.1, .fillSignatures(allMethods, length(classes)), function(sigs, n) <(rir::DispatchTable*)0x55fa|..., e0.3
  val?^           %436.3 = CastType                 up %436.1
  val?^           %436.4 = CastType                 up %436.0
  val?^ | miss    %436.5 = LdVar              eR    lengths, <env 0x55fa0b35b378>
  lgl$#-          %436.6 = Identical                %436.5, function(x, use.names=TRUE) <(rir::DispatchTab|...
  void                    Branch                   %436.6 -> BB438 (if true) | BB439 (if false)
BB437   <- [434]
  void                    Nop                !     
  val?^ | miss    %437.1 = %434.2
  dr              %437.2 = CallTarget@0x55fa0e5780e0[Call#87]
  goto BB80
BB456   <- [450]
  prom-           %456.0 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p106, e0.3
  prom-           %456.1 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p109, e0.3
  val?            %456.2 = StaticCall         !v    .eligibleSuperClasses[0x55fa1701d6a0](%456.0, %456.1) e0.3   <str->
  lgl$#-          %456.3 = IsType                   %456.2 isA val?-
  lgl$#-          %456.4 = IsType                   %450.3 isA val?+
  void                    Branch                   %456.4 -> BB458 (if true) | BB459 (if false)
BB457   <- [450]
  fs              %457.0 = FrameState         R     0x55fa136cd470+2569: [1L, %404.0, 3L, <blt c>, %450.3], env=e0.3
  void                    Deopt              !v    %457.0, CallTarget@0x55fa0e5780e0[Call#61], %450.4   !
BB460   <- [235]
  prom-           %460.0 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p90, e0.3
  prom-           %460.1 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p91 (!refl), e0.3
  val?            %460.2 = StaticCall         !v    outerLabels[0x55fa16c5b780](%460.0, %460.1) e0.3   <str->
  void                    StVar              lW    labels, %460.2, e0.3
  val?^ | miss    %460.4 = LdVar              eR    c, e0.3
  lgl$#-          %460.5 = Identical                <blt c>, %460.4   <true>
  void                    Branch                   %460.5 -> BB466 (if true) | BB467 (if false)
BB461   <- [235]
  fs              %461.0 = FrameState         R     0x55fa136cd470+2653: [1L, %404.0, 3L], env=e0.3
  void                    Deopt              !v    %461.0, CallTarget@0x55fa0e5780e0[Call#63], %235.3   !
BB438   <- [436]
  env             e438.0 = MkEnv              l     sigs=%436.4, n=%436.3, parent=<env 0x55fa0b35b378>, context 1
  prom-           %438.1 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p139, e438.0
  ct              %438.2 = PushContext        lCL   %438.1, lengths(strsplit(sigs, "#", fixed=TRUE)), function(x, use.names=TRUE) <(rir::DispatchTab|..., e438.0
  val?^           %438.3 = CastType                 up %438.1
  env             e438.4 = MkEnv              l     x=%438.3, use.names(miss)=true, parent=R_BaseNamespace, context 1
  val?            %438.5 = Force!<lazy>       !vr   %438.3,    <vec+>
  val?            %438.6 = CallBuiltin        !v    lengths(%438.5, true) e438.4
  val?            %438.7 = PopContext         C     %438.6, %438.2   <int->
  void                    StVar              lW    siglens, %438.7, e438.0
  val?^ | miss    %438.9 = LdVar              eR    n, e438.0
  val?            %438.10 = Force!<lazy>       !v    %438.9, e438.0   <int$->
  cls             %438.11 = MkCls                    unknown--fromConstant@Prom(4)0, e438.0
  val?^ | miss    %438.12 = LdVar              eR    siglens, e438.0
  lgl$#-          %438.13 = IsType                   %438.12 isA int-
  void                    Branch                   %438.13 -> BB440 (if true) | BB441 (if false)
BB439   <- [436]
  void                    DropContext        C     
  val?^ | miss    %439.1 = %436.5
  dr              %439.2 = CallTarget@0x55fa11c90448[Call#0]
  goto BB80
BB458   <- [456]
  val?+           %458.0 = CastType           d     dn %450.3   <str$+>
  void                    Branch                   %456.3 -> BB464 (if true) | BB465 (if false)
BB459   <- [456]
  void                    Nop                !     
  val?            %459.1 = %450.3
  dr              %459.2 = Typecheck@0x55fa0e5780e0[Type#177]
  goto BB268
BB466   <- [460]
  val?^ | miss    %466.0 = LdVar              eR    supersList, e0.3
  lgl$#-          %466.1 = IsType                   %466.0 isA val?~- | miss
  void                    Branch                   %466.1 -> BB470 (if true) | BB471 (if false)
BB467   <- [460]
  void                    Nop                !     
  lgl$#-          %467.1 = %460.5
  dr              %467.2 = DeadBranchReached@0x55fa0e5780e0[Test#20]
  goto BB238
BB440   <- [438]
  int-            %440.0 = CastType           d     dn %438.12
  val?            %440.1 = Gt                 !v    %438.10, %440.0, e438.0   <lgl->
  void                    StVar              lW    short, %440.1, e438.0
  val?^ | miss    %440.3 = LdVar              eR    vapply, e438.0
  lgl$#-          %440.4 = Identical                %440.3, function(X, FUN, FUN.VALUE, ..., USE.NAMES=TRU|...
  void                    Branch                   %440.4 -> BB442 (if true) | BB443 (if false)
BB441   <- [438]
  fs              %441.0 = FrameState         R     0x55fa136cd470+4057: [], env=e0.3
  prom-           %441.1 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p21, e0.3
  val?^           %441.2 = CastType                 up %441.1
  prom-           %441.3 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p20, e0.3
  val?^           %441.4 = CastType                 up %441.3
  env             e441.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%441.2, x=%441.4, parent=R_BaseNamespace, context 0
  fs              %441.6 = FrameState         R     0x55fa0b568d40+23: [%434.1], env=e441.5, next=%441.0
  fs              %441.7 = FrameState         R     0x55fa11deebc0+37(pr): [], env=e0.3, next=%441.6
  fs              %441.8 = FrameState         R     0x55fa0ba91500+55: [%438.10], env=e438.0, next=%441.7
  void                    Deopt              !v    %441.8, Typecheck@0x55fa11c90448[Type#4], %438.12   !
BB464   <- [458]
  val?-           %464.0 = CastType           d     dn %456.2   <str->
  (list|sym|char|lgl|int|real|str|vec|complex|raw|cls|spec|blt|prom|_|code|env|ast|expressions|dots|other)+ %464.1 = CallSafeBuiltin    wed   c(%458.0, %464.0, "ANY")    <str->
  (list|sym|char|lgl|int|real|str|vec|complex|raw|cls|spec|blt|prom|_|code|env|ast|expressions|dots|other)+ %464.2 = %464.1
  goto BB235
BB465   <- [458]
  void                    Nop                !     
  val?            %465.1 = %456.2
  dr              %465.2 = Typecheck@0x55fa0e5780e0[Type#182]
  goto BB268
BB268   <- [459, 465]
  val?^ | miss    %268.0 = Phi                      %459.1:BB459, %465.1:BB465
  val?^ | miss    %268.1 = %268.0
  dr              %268.2 = Phi                      %459.2:BB459, %465.2:BB465
  dr              %268.3 = %268.2
  fs              %268.4 = FrameState         R     0x55fa136cd470+2611: [1L, %404.0, 3L, <blt c>, %450.3, %456.2], env=e0.3
  void                    Deopt              !v    %268.4, %268.3, %268.1   !
BB470   <- [466]
  val?~- | miss   %470.0 = CastType           d     dn %466.0
  val?-           %470.1 = Force!<value>            %470.0,    <vec$->
  val?^ | miss    %470.2 = LdVar              eR    list, e0.3
  lgl$#-          %470.3 = Identical                <blt list>, %470.2   <true>
  void                    Branch                   %470.3 -> BB472 (if true) | BB473 (if false)
BB471   <- [466]
  void                    Nop                !     
  val?^ | miss    %471.1 = %466.0
  dr              %471.2 = Typecheck@0x55fa0e5780e0[Type#190]
  goto BB238
BB238   <- [467, 471, 473, 475]
  val?^ | miss    %238.0 = Phi                      %467.1:BB467, %471.1:BB471, %473.1:BB473, %475.1:BB475
  val?^ | miss    %238.1 = %238.0
  dr              %238.2 = Phi                      %467.2:BB467, %471.2:BB471, %473.2:BB473, %475.2:BB475
  dr              %238.3 = %238.2
  fs              %238.4 = FrameState         R     0x55fa136cd470+2704: [1L, %404.0, 3L], env=e0.3
  void                    Deopt              !v    %238.4, %238.3, %238.1   !
BB442   <- [440]
  prom-           %442.0 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p141, e438.0
  prom-           %442.1 = MkArg                    %438.11, .findInheritedMethods[0x55fa0fbcee30]_p143 (!refl), e438.0
  prom-           %442.2 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p144, e438.0
  val?            %442.3 = StaticCall         !v    vapply[0x55fa17642060](%442.0, %442.1, %442.2) { 0 1 2 } e438.0   <str->
  void                    StVar              lW    suffix, %442.3, e438.0
  val?^ | miss    %442.5 = LdVar              eR    sigs !upd, e438.0
  val?            %442.6 = Force!             !v    %442.5, e438.0
  val?^ | miss    %442.7 = LdVar              eR    paste, e438.0
  lgl$#-          %442.8 = Identical                %442.7, function(..., sep=" ", collapse=NULL, recycle0|...
  void                    Branch                   %442.8 -> BB444 (if true) | BB445 (if false)
BB443   <- [440]
  fs              %443.0 = FrameState         R     0x55fa136cd470+4057: [], env=e0.3
  prom-           %443.1 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p21, e0.3
  val?^           %443.2 = CastType                 up %443.1
  prom-           %443.3 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p20, e0.3
  val?^           %443.4 = CastType                 up %443.3
  env             e443.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%443.2, x=%443.4, parent=R_BaseNamespace, context 0
  fs              %443.6 = FrameState         R     0x55fa0b568d40+23: [%434.1], env=e443.5, next=%443.0
  fs              %443.7 = FrameState         R     0x55fa11deebc0+37(pr): [], env=e0.3, next=%443.6
  fs              %443.8 = FrameState         R     0x55fa0ba91500+89: [], env=e438.0, next=%443.7
  void                    Deopt              !v    %443.8, CallTarget@0x55fa11c90448[Call#2], %440.3   !
BB472   <- [470]
  val?^ | miss    %472.0 = LdVar              eR    allLabels, e0.3
  lgl$#-          %472.1 = IsType                   %472.0 isA val?~+ | miss
  void                    Branch                   %472.1 -> BB474 (if true) | BB475 (if false)
BB473   <- [470]
  void                    Nop                !     
  lgl$#-          %473.1 = %470.3
  dr              %473.2 = DeadBranchReached@0x55fa0e5780e0[Test#21]
  goto BB238
BB444   <- [442]
  prom-           %444.0 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p145, e438.0
  prom-           %444.1 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p147, e438.0
  dots-           %444.2 = DotsList           l     %444.0, %444.1
  val?^ | miss    %444.3 = CastType                 up %444.0
  env             e444.4 = MkEnv              l     ...=%444.2, sep="#", collapse(miss)=nil, recycle0(miss)=false, parent=R_BaseNamespace, context 0
  val?            %444.5 = Force!             !vL   %444.3, e444.4
  val?^ | miss    %444.6 = CastType                 up %444.1
  val?            %444.7 = Force!             !vL   %444.6, e444.4
  val+            %444.8 = CallSafeBuiltin    wed   list(%444.5, %444.7)    <vec->
  lgl$#-          %444.9 = IsType                   %444.8 isA val?-
  void                    Branch                   %444.9 -> BB448 (if true) | BB449 (if false)
BB445   <- [442]
  fs              %445.0 = FrameState         R     0x55fa136cd470+4057: [], env=e0.3
  prom-           %445.1 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p21, e0.3
  val?^           %445.2 = CastType                 up %445.1
  prom-           %445.3 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p20, e0.3
  val?^           %445.4 = CastType                 up %445.3
  env             e445.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%445.2, x=%445.4, parent=R_BaseNamespace, context 0
  fs              %445.6 = FrameState         R     0x55fa0b568d40+23: [%434.1], env=e445.5, next=%445.0
  fs              %445.7 = FrameState         R     0x55fa11deebc0+37(pr): [], env=e0.3, next=%445.6
  fs              %445.8 = FrameState         R     0x55fa0ba91500+154: [%442.6], env=e438.0, next=%445.7
  void                    Deopt              !v    %445.8, CallTarget@0x55fa11c90448[Call#4], %442.7   !
BB474   <- [472]
  val?~+ | miss   %474.0 = CastType           d     dn %472.0
  val?+           %474.1 = Force!<value>            %474.0,    <str+>
  val+            %474.2 = CallSafeBuiltin    wed   list(%474.1)    <vec$->
  val+            %474.3 = CallSafeBuiltin    wed   c(%470.1, %474.2)    <vec->
  void                    StVar              lW    supersList, %474.3, e0.3
  int$#-          %474.5 = 3L
  goto BB240
BB475   <- [472]
  void                    Nop                !     
  val?^ | miss    %475.1 = %472.0
  dr              %475.2 = Typecheck@0x55fa0e5780e0[Type#192]
  goto BB238
BB448   <- [444]
  val-            %448.0 = CastType           d     dn %444.8   <vec->
  val+            %448.1 = CallSafeBuiltin    wed   paste(%448.0, "#", nil, false)    <str->
  val?^ | miss    %448.2 = LdVar              eR    sigs !upd, e438.0
  val?            %448.3 = Force!<wrapped>    !v    %448.2, e438.0   <str->
  val?^ | miss    %448.4 = LdVar              eR    short, e438.0
  lgl$#-          %448.5 = IsType                   %448.4 isA lgl-
  void                    Branch                   %448.5 -> BB452 (if true) | BB453 (if false)
BB449   <- [444]
  fs              %449.0 = FrameState         R     0x55fa136cd470+4057: [], env=e0.3
  prom-           %449.1 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p21, e0.3
  val?^           %449.2 = CastType                 up %449.1
  prom-           %449.3 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p20, e0.3
  val?^           %449.4 = CastType                 up %449.3
  env             e449.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%449.2, x=%449.4, parent=R_BaseNamespace, context 0
  fs              %449.6 = FrameState         R     0x55fa0b568d40+23: [%434.1], env=e449.5, next=%449.0
  fs              %449.7 = FrameState         R     0x55fa11deebc0+37(pr): [], env=e0.3, next=%449.6
  fs              %449.8 = FrameState         R     0x55fa0ba91500+210: [], env=e438.0, next=%449.7
  fs              %449.9 = FrameState         R     0x55fa0cca1800+78: [%444.8, "#", nil, false], env=e444.4, next=%449.8
  void                    Deopt              !v    %449.9, Typecheck@0x55fa0cca1940[Type#0], %444.8   !
BB240   <- [474, 536]
  int$#-          %240.0 = Phi                      %474.5:BB474, %536.5:BB536
  int$#-          %240.1 = %240.0
  lgl$#-          %240.2 = Neq                d     %404.0, %240.1, elided
  void                    Branch                   %240.2 -> BB242 (if true) | BB241 (if false)
BB452   <- [448]
  lgl-            %452.0 = CastType           d     dn %448.4
  val?            %452.1 = Subassign1_1D      wed   %448.1, %448.3, %452.0, e438.0   <str->
  void                    StVar              lW    sigs, %452.1, e438.0
  val             %452.3 = ChkMissing         e     %452.1
  val?            %452.4 = PopContext         C     %452.1, %436.2   <str->
  lgl$#-          %452.5 = IsType                   %452.4 isA val?+
  void                    Branch                   %452.5 -> BB454 (if true) | BB455 (if false)
BB453   <- [448]
  fs              %453.0 = FrameState         R     0x55fa136cd470+4057: [], env=e0.3
  prom-           %453.1 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p21, e0.3
  val?^           %453.2 = CastType                 up %453.1
  prom-           %453.3 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p20, e0.3
  val?^           %453.4 = CastType                 up %453.3
  env             e453.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%453.2, x=%453.4, parent=R_BaseNamespace, context 0
  fs              %453.6 = FrameState         R     0x55fa0b568d40+23: [%434.1], env=e453.5, next=%453.0
  fs              %453.7 = FrameState         R     0x55fa11deebc0+37(pr): [], env=e0.3, next=%453.6
  fs              %453.8 = FrameState         R     0x55fa0ba91500+224: [%448.1, %448.3], env=e438.0, next=%453.7
  void                    Deopt              !v    %453.8, Typecheck@0x55fa11c90448[Type#21], %448.4   !
BB242   <- [240]
  void                    StVar              lW    i, %240.1, e0.3
  int$#-          %242.1 = Add                d     %240.1, 1L, elided
  val?^ | miss    %242.2 = LdVar              eR    getClass, e0.3
  lgl$#-          %242.3 = Identical                %242.2, function(Class, .Force=FALSE, where=.classEnv(|...
  void                    Branch                   %242.3 -> BB478 (if true) | BB479 (if false)
BB241   <- [240]
  void                    Nop                !     
  goto BB70
BB454   <- [452]
  val?+           %454.0 = CastType           d     dn %452.4   <str->
  val+            %454.1 = CallSafeBuiltin    wed   match(%434.1, %454.0, NA, nil)    <int->
  void                    StVar              lW    m, %454.1, e0.3
  lgl$#-          %454.3 = IsType                   %454.1 isA int-
  val?^ | miss    %454.4 = LdVar              eR    is.na, e0.3
  lgl$#-          %454.5 = Identical                <blt is.na>, %454.4   <true>
  void                    Branch                   %454.5 -> BB462 (if true) | BB463 (if false)
BB455   <- [452]
  fs              %455.0 = FrameState         R     0x55fa136cd470+4057: [], env=e0.3
  prom-           %455.1 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p21, e0.3
  val?^           %455.2 = CastType                 up %455.1
  prom-           %455.3 = MkArg                    %434.1, .findInheritedMethods[0x55fa0fbcee30]_p20 (!refl), e0.3
  val?~           %455.4 = CastType                 up %455.3
  env             e455.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%455.2, x=%455.4, parent=R_BaseNamespace, context 0
  fs              %455.6 = FrameState         R     0x55fa0b568d40+23: [%434.1], env=e455.5, next=%455.0
  fs              %455.7 = FrameState         R     0x55fa11deebc0+37(pr): [%452.4], env=e0.3, next=%455.6
  void                    Deopt              !v    %455.7, Typecheck@0x55fa0b5bbcb0[Type#1], %452.4   !
BB478   <- [242]
  prom-           %478.0 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p92, e0.3
  prom-           %478.1 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p94, e0.3
  val?            %478.2 = StaticCall         !v    getClass[0x55fa0b7a2480](%478.0, true, %478.1) { 0 2n 1n } e0.3   <other>
  val?^ | miss    %478.3 = LdVar              eR    classDefs !upd, e0.3
  lgl$#-          %478.4 = IsType                   %478.3 isA val?~- | miss
  void                    Branch                   %478.4 -> BB480 (if true) | BB481 (if false)
BB479   <- [242]
  fs              %479.0 = FrameState         R     0x55fa136cd470+2927: [1L, %404.0, %240.1], env=e0.3
  void                    Deopt              !v    %479.0, CallTarget@0x55fa0e5780e0[Call#67], %242.2   !
BB462   <- [454]
  void                    Branch                   %454.3 -> BB468 (if true) | BB469 (if false)
BB463   <- [454]
  void                    Nop                !     
  lgl$#-          %463.1 = %454.5
  dr              %463.2 = DeadBranchReached@0x55fa0e5780e0[Test#29]
  goto BB94
BB480   <- [478]
  val?~- | miss   %480.0 = CastType           d     dn %478.3
  val?-           %480.1 = Force!<value>            %480.0,    <vec->
  val?^ | miss    %480.2 = LdVar              eR    i, e0.3
  lgl$#-          %480.3 = IsType                   %480.2 isA int$-
  void                    Branch                   %480.3 -> BB482 (if true) | BB483 (if false)
BB481   <- [478]
  void                    Nop                !     
  val?^ | miss    %481.1 = %478.3
  dr              %481.2 = Typecheck@0x55fa0e5780e0[Type#201]
  goto BB245
BB468   <- [462]
  int-            %468.0 = CastType           d     dn %454.1
  lgl-            %468.1 = CallSafeBuiltin    wed   is.na(%468.0)    <lgl->
  lgl-            %468.2 = Not                wed   %468.1, elided
  void                    StVar              lW    found, %468.2, e0.3
  val?^ | miss    %468.4 = LdVar              eR    mget, e0.3
  lgl$#-          %468.5 = Identical                %468.4, function(x, envir=as.environment(-(1L)), mode=|...
  void                    Branch                   %468.5 -> BB476 (if true) | BB477 (if false)
BB469   <- [462]
  void                    Nop                !     
  val+            %469.1 = %454.1
  dr              %469.2 = Typecheck@0x55fa0e5780e0[Type#256]
  goto BB94
BB94   <- [463, 469]
  val?^ | miss    %94.0 = Phi                      %463.1:BB463, %469.1:BB469
  val?^ | miss    %94.1 = %94.0
  dr              %94.2 = Phi                      %463.2:BB463, %469.2:BB469
  dr              %94.3 = %94.2
  fs              %94.4 = FrameState         R     0x55fa136cd470+4071: [], env=e0.3
  void                    Deopt              !v    %94.4, %94.3, %94.1   !
BB482   <- [480]
  int$-           %482.0 = CastType           d     dn %480.2
  val?            %482.1 = Subassign2_1D      !v    %478.2, %480.1, %482.0, e0.3
  void                    StVar              lW    classDefs, %482.1, e0.3
  void                    StVar              lW    cc, %478.2, e0.3
  lgl$-           %482.4 = Missing            eR    useInherited, e0.3
  lgl$-           %482.5 = AsLogical                %482.4
  lgl$#-          %482.6 = Identical                %482.5, true
  void                    Branch                   %482.6 -> BB264 (if true) | BB247 (if false)
BB483   <- [480]
  void                    Nop                !     
  val?^ | miss    %483.1 = %480.2
  dr              %483.2 = Typecheck@0x55fa0e5780e0[Type#202]
  goto BB245
BB245   <- [481, 483]
  val?^ | miss    %245.0 = Phi                      %481.1:BB481, %483.1:BB483
  val?^ | miss    %245.1 = %245.0
  dr              %245.2 = Phi                      %481.2:BB481, %483.2:BB483
  dr              %245.3 = %245.2
  fs              %245.4 = FrameState         R     0x55fa136cd470+2988: [1L, %404.0, %242.1, %478.2], env=e0.3
  void                    Deopt              !v    %245.4, %245.3, %245.1   !
BB476   <- [468]
  prom-           %476.0 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p25, e0.3
  prom-           %476.1 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p29, e0.3
  ct              %476.2 = PushContext        lCL   %476.0, %476.1, mget([(allMethods, [(m, found)), table), function(x, envir=as.environment(-(1L)), mode=|..., e0.3
  val?^           %476.3 = CastType                 up %476.1
  val?^           %476.4 = CastType                 up %476.0
  env             e476.5 = MkEnv              l     x=%476.4, envir=%476.3, mode(miss)="any", ifnotfound(miss)=missingArg, inherits(miss)=false, parent=R_BaseNamespace, context 1
  cls             %476.6 = MkCls                    mget@133, e476.5
  val?            %476.7 = Force!<lazy>       !vL   %476.4, e476.5   <str+>
  val?            %476.8 = Force!<lazy>       !vL   %476.3, e476.5   <env->
  val?^ | miss    %476.9 = LdVar              eR    list, e476.5
  lgl$#-          %476.10 = Identical                <blt list>, %476.9   <true>
  void                    Branch                   %476.10 -> BB484 (if true) | BB485 (if false)
BB477   <- [468]
  fs              %477.0 = FrameState         R     0x55fa136cd470+4177: [], env=e0.3
  void                    Deopt              !v    %477.0, CallTarget@0x55fa0e5780e0[Call#90], %468.4   !
BB264   <- [482]
  void                    Nop                !     
  lgl$-           %264.1 = %482.5
  goto BB250
BB247   <- [482]
  val?^ | miss    %247.0 = LdVar              eR    useInherited, e0.3
  val?            %247.1 = Force!             !v    %247.0, e0.3   <val?_>
  lgl$#-          %247.2 = IsType                   %247.1 isA val+   <@?>
  void                    Branch                   %247.2 -> BB263 (if true) | BB248 (if false)
BB484   <- [476]
  val+            %484.0 = CallSafeBuiltin    wed   list(%476.6)    <vec$->
  val?            %484.1 = CallBuiltin        !v    mget(%476.7, %476.8, "any", %484.0, false) e476.5
  val?            %484.2 = PopContext         C     %484.1, %476.2   <vec+>
  void                    StVar              lW    methods, %484.2, e0.3
  val?^ | miss    %484.4 = LdVar              eR    verbose, e0.3
  val?            %484.5 = Force!<wrapped>    !v    %484.4, e0.3   <lgl$->
  lgl$#-          %484.6 = CheckTrueFalse     we    %484.5
  void                    Branch                   %484.6 -> BB221 (if true) | BB102 (if false)
BB485   <- [476]
  fs              %485.0 = FrameState         R     0x55fa136cd470+4214: [], env=e0.3
  fs              %485.1 = FrameState         R     0x55fa0db8bf30+37: [%476.7, %476.8, "any"], env=e476.5, next=%485.0
  void                    Deopt              !v    %485.1, DeadBranchReached@0x55fa0ccef970[Test#0], %476.10   !
BB250   <- [264, 249]
  lgl$-           %250.0 = Phi                      %249.5:BB249, %264.1:BB264
  lgl$-           %250.1 = %250.0
  lgl$#-          %250.2 = CheckTrueFalse     e     %250.1
  void                    Branch                   %250.2 -> BB254 (if true) | BB253 (if false)
BB263   <- [247]
  val?^ | miss    %263.0 = LdVar              eR    i, e0.3
  val?            %263.1 = Force!             !v    %263.0, e0.3   <val?_>
  val?            %263.2 = %263.1
  goto BB249
BB248   <- [247]
  prom-           %248.0 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p103, e0.3
  prom-           %248.1 = %248.0
  goto BB249
BB221   <- [484]
  (cls|spec|blt)  %221.0 = LdFun              !v    cat, e0.3
  fs              %221.1 = FrameState         R     0x55fa136cd470+4258: [%221.0], env=e0.3
  void                    Deopt              !v    %221.1, DeadCall@0x55fa0e5780e0[Call#91], %221.0   !
BB102   <- [484]
  val?^ | miss    %102.0 = LdVar              eR    hasGroup, e0.3
  lgl$#-          %102.1 = IsType                   %102.0 isA lgl$-
  void                    Branch                   %102.1 -> BB486 (if true) | BB487 (if false)
BB254   <- [250]
  val?^ | miss    %254.0 = LdVar              eR    c, e0.3
  lgl$#-          %254.1 = Identical                <blt c>, %254.0   <true>
  void                    Branch                   %254.1 -> BB488 (if true) | BB489 (if false)
BB253   <- [250]
  (cls|spec|blt)  %253.0 = LdFun              !v    @, e0.3
  fs              %253.1 = FrameState         R     0x55fa136cd470+3135: [1L, %404.0, %242.1, %253.0], env=e0.3
  void                    Deopt              !v    %253.1, DeadCall@0x55fa0e5780e0[Call#68], %253.0   !
BB249   <- [248, 263]
  val?            %249.0 = Phi                      %263.2:BB263, %248.1:BB248
  val?            %249.1 = %249.0
  val?            %249.2 = Extract2_1D        !v    %247.1, %249.1, e0.3   <val?_>
  lgl$-           %249.3 = AsLogical          e     %249.2
  lgl$-           %249.4 = LOr                      %482.5, %249.3
  lgl$-           %249.5 = %249.4
  goto BB250
BB486   <- [102]
  lgl$-           %486.0 = CastType           d     dn %102.0
  lgl$#-          %486.1 = CheckTrueFalse     e     %486.0
  void                    Branch                   %486.1 -> BB212 (if true) | BB103 (if false)
BB487   <- [102]
  void                    Nop                !     
  val?^ | miss    %487.1 = %102.0
  dr              %487.2 = Typecheck@0x55fa0e5780e0[Type#275]
  goto BB100
BB488   <- [254]
  (cls|spec|blt)  %488.0 = LdFun              !v    @, <0x55fa0ad53bd8>, e0.3
  prom-           %488.1 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p95, e0.3
  prom-           %488.2 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p96, e0.3
  val?            %488.3 = Call               !v    %488.0(%488.1, %488.2) e0.3   <str$->
  val?^ | miss    %488.4 = LdVar              eR    .eligibleSuperClasses, e0.3
  lgl$#-          %488.5 = Identical                %488.4, function(contains, simpleOnly) <(rir::Dispatch|...
  void                    Branch                   %488.5 -> BB492 (if true) | BB493 (if false)
BB489   <- [254]
  fs              %489.0 = FrameState         R     0x55fa136cd470+3124: [1L, %404.0, %242.1, %250.1], env=e0.3
  void                    Deopt              !v    %489.0, DeadBranchReached@0x55fa0e5780e0[Test#24], %254.1   !
BB212   <- [486]
  val?^ | miss    %212.0 = LdVar              eR    .getGroupMethods, e0.3
  lgl$#-          %212.1 = Identical                %212.0, function(labels, generics, found) <(rir::Dispa|...
  void                    Branch                   %212.1 -> BB490 (if true) | BB491 (if false)
BB103   <- [486]
  (cls|spec|blt)  %103.0 = LdFun              !v    rep, <0x55fa0ad689b0>, e0.3
  prom-           %103.1 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p30, e0.3
  val?            %103.2 = Call               !v    %103.0(false, %103.1) e0.3   <lgl->
  void                    StVar              lW    fromGroup, %103.2, e0.3
  goto BB104
BB100   <- [487, 491]
  val?^ | miss    %100.0 = Phi                      %487.1:BB487, %491.1:BB491
  val?^ | miss    %100.1 = %100.0
  dr              %100.2 = Phi                      %487.2:BB487, %491.2:BB491
  dr              %100.3 = %100.2
  fs              %100.4 = FrameState         R     0x55fa136cd470+4243: [%484.6], env=e0.3
  void                    Deopt              !v    %100.4, %100.3, %100.1   !
BB492   <- [488]
  prom-           %492.0 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p97, e0.3
  prom-           %492.1 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p100, e0.3
  val?            %492.2 = StaticCall         !v    .eligibleSuperClasses[0x55fa1701d6a0](%492.0, %492.1) e0.3   <str->
  lgl$#-          %492.3 = IsType                   %492.2 isA val?-
  lgl$#-          %492.4 = IsType                   %488.3 isA val?-
  void                    Branch                   %492.4 -> BB496 (if true) | BB497 (if false)
BB493   <- [488]
  fs              %493.0 = FrameState         R     0x55fa136cd470+3284: [1L, %404.0, %242.1, <blt c>, %488.3], env=e0.3
  void                    Deopt              !v    %493.0, CallTarget@0x55fa0e5780e0[Call#74], %488.4   !
BB490   <- [212]
  prom-           %490.0 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p78, e0.3
  prom-           %490.1 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p79, e0.3
  prom-           %490.2 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p80, e0.3
  val?            %490.3 = StaticCall         !v    .getGroupMethods[0x55fa17c5bb10](%490.0, %490.1, %490.2) e0.3   <vec+>
  void                    StVar              lW    groupmethods, %490.3, e0.3
  val?^ | miss    %490.5 = LdVar              eR    c, e0.3
  lgl$#-          %490.6 = Identical                <blt c>, %490.5   <true>
  void                    Branch                   %490.6 -> BB494 (if true) | BB495 (if false)
BB491   <- [212]
  void                    Nop                !     
  val?^ | miss    %491.1 = %212.0
  dr              %491.2 = CallTarget@0x55fa0e5780e0[Call#95]
  goto BB100
BB104   <- [103, 530]
  val?^ | miss    %104.0 = LdVar              eR    .duplicateClassesExist, e0.3
  lgl$#-          %104.1 = Identical                %104.0, function(on) <(rir::DispatchTable*)0x55fa0cd60|...
  void                    Branch                   %104.1 -> BB500 (if true) | BB501 (if false)
BB496   <- [492]
  val?-           %496.0 = CastType           d     dn %488.3   <str$->
  void                    Branch                   %492.3 -> BB498 (if true) | BB499 (if false)
BB497   <- [492]
  void                    Nop                !     
  val?            %497.1 = %488.3
  dr              %497.2 = Typecheck@0x55fa0e5780e0[Type#220]
  goto BB257
BB494   <- [490]
  (cls|spec|blt)  %494.0 = LdFun              !v    rep, <0x55fa0ad689b0>, e0.3
  prom-           %494.1 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p81, e0.3
  val?            %494.2 = Call               !v    %494.0(false, %494.1) e0.3   <lgl->
  (cls|spec|blt)  %494.3 = LdFun              !v    rep, <0x55fa0ad689b0>, e0.3
  prom-           %494.4 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p83, e0.3
  val?            %494.5 = Call               !v    %494.3(true, %494.4) e0.3   <lgl->
  lgl$#-          %494.6 = IsType                   %494.5 isA lgl-
  lgl$#-          %494.7 = IsType                   %494.2 isA lgl-
  void                    Branch                   %494.7 -> BB502 (if true) | BB503 (if false)
BB495   <- [490]
  fs              %495.0 = FrameState         R     0x55fa136cd470+4428: [], env=e0.3
  void                    Deopt              !v    %495.0, DeadBranchReached@0x55fa0e5780e0[Test#33], %490.6   !
BB500   <- [104]
  val?            %500.0 = StaticCall         !v    .duplicateClassesExist[0x55fa1776ad10]() e0.3   <lgl$->
  lgl$#-          %500.1 = IsType                   %500.0 isA lgl$-
  void                    Branch                   %500.1 -> BB504 (if true) | BB505 (if false)
BB501   <- [104]
  fs              %501.0 = FrameState         R     0x55fa136cd470+4800: [], env=e0.3
  void                    Deopt              !v    %501.0, CallTarget@0x55fa0e5780e0[Call#108], %104.0   !
BB498   <- [496]
  val?-           %498.0 = CastType           d     dn %492.2   <str->
  (list|sym|char|lgl|int|real|str|vec|complex|raw|cls|spec|blt|prom|_|code|env|ast|expressions|dots|other)+ %498.1 = CallSafeBuiltin    wed   c(%496.0, %498.0, "ANY")    <str->
  void                    StVar              lW    allLabels, %498.1, e0.3
  val?^ | miss    %498.3 = LdVar              eR    outerLabels, e0.3
  lgl$#-          %498.4 = Identical                %498.3, function(labels, new) <(rir::DispatchTable*)0x|...
  void                    Branch                   %498.4 -> BB510 (if true) | BB511 (if false)
BB499   <- [496]
  void                    Nop                !     
  val?            %499.1 = %492.2
  dr              %499.2 = Typecheck@0x55fa0e5780e0[Type#225]
  goto BB257
BB257   <- [497, 499]
  val?^ | miss    %257.0 = Phi                      %497.1:BB497, %499.1:BB499
  val?^ | miss    %257.1 = %257.0
  dr              %257.2 = Phi                      %497.2:BB497, %499.2:BB499
  dr              %257.3 = %257.2
  fs              %257.4 = FrameState         R     0x55fa136cd470+3326: [1L, %404.0, %242.1, <blt c>, %488.3, %492.2], env=e0.3
  void                    Deopt              !v    %257.4, %257.3, %257.1   !
BB502   <- [494]
  lgl-            %502.0 = CastType           d     dn %494.2
  void                    Branch                   %494.6 -> BB508 (if true) | BB509 (if false)
BB503   <- [494]
  void                    Nop                !     
  val?            %503.1 = %494.2
  dr              %503.2 = Typecheck@0x55fa0e5780e0[Type#291]
  goto BB215
BB504   <- [500]
  lgl$-           %504.0 = CastType           d     dn %500.0
  lgl$#-          %504.1 = CheckTrueFalse     e     %504.0
  void                    Branch                   %504.1 -> BB211 (if true) | BB109 (if false)
BB505   <- [500]
  void                    Nop                !     
  val?            %505.1 = %500.0
  dr              %505.2 = Typecheck@0x55fa0e5780e0[Type#304]
  goto BB107
BB510   <- [498]
  prom-           %510.0 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p101, e0.3
  prom-           %510.1 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p102 (!refl), e0.3
  val?            %510.2 = StaticCall         !v    outerLabels[0x55fa16c5b780](%510.0, %510.1) e0.3   <str->
  void                    StVar              lW    labels, %510.2, e0.3
  val?^ | miss    %510.4 = LdVar              eR    c, e0.3
  lgl$#-          %510.5 = Identical                <blt c>, %510.4   <true>
  void                    Branch                   %510.5 -> BB522 (if true) | BB523 (if false)
BB511   <- [498]
  fs              %511.0 = FrameState         R     0x55fa136cd470+3368: [1L, %404.0, %242.1], env=e0.3
  void                    Deopt              !v    %511.0, CallTarget@0x55fa0e5780e0[Call#76], %498.3   !
BB508   <- [502]
  lgl-            %508.0 = CastType           d     dn %494.5
  lgl-            %508.1 = CallSafeBuiltin    wed   c(%502.0, %508.0)    <lgl->
  void                    StVar              lW    fromGroup, %508.1, e0.3
  val?^ | miss    %508.3 = LdVar              eR    verbose, e0.3
  val?            %508.4 = Force!<value>      !v    %508.3, e0.3   <lgl$->
  lgl$#-          %508.5 = CheckTrueFalse     we    %508.4
  void                    Branch                   %508.5 -> BB220 (if true) | BB219 (if false)
BB509   <- [502]
  void                    Nop                !     
  val?            %509.1 = %494.5
  dr              %509.2 = Typecheck@0x55fa0e5780e0[Type#294]
  goto BB215
BB215   <- [503, 509]
  val?^ | miss    %215.0 = Phi                      %503.1:BB503, %509.1:BB509
  val?^ | miss    %215.1 = %215.0
  dr              %215.2 = Phi                      %503.2:BB503, %509.2:BB509
  dr              %215.3 = %215.2
  fs              %215.4 = FrameState         R     0x55fa136cd470+4572: [<blt c>, %494.2, %494.5], env=e0.3
  void                    Deopt              !v    %215.4, %215.3, %215.1   !
BB211   <- [504]
  (cls|spec|blt)  %211.0 = LdFun              !v    integer, e0.3
  fs              %211.1 = FrameState         R     0x55fa136cd470+4848: [%211.0], env=e0.3
  void                    Deopt              !v    %211.1, DeadCall@0x55fa0e5780e0[Call#109], %211.0   !
BB109   <- [504]
  val?^ | miss    %109.0 = LdVar              eR    doExcluded, e0.3
  lgl$#-          %109.1 = IsType                   %109.0 isA lgl$-
  void                    Branch                   %109.1 -> BB506 (if true) | BB507 (if false)
BB107   <- [505, 507, 515, 525, 539, 553, 559]
  val?^ | miss    %107.0 = Phi                      %505.1:BB505, %507.1:BB507, %515.1:BB515, %525.1:BB525, %539.1:BB539, %553.1:BB553, %559.1:BB559
  val?^ | miss    %107.1 = %107.0
  dr              %107.2 = Phi                      %505.2:BB505, %507.2:BB507, %515.2:BB515, %525.2:BB525, %539.2:BB539, %553.2:BB553, %559.2:BB559
  dr              %107.3 = %107.2
  fs              %107.4 = FrameState         R     0x55fa136cd470+4827: [%500.0], env=e0.3
  void                    Deopt              !v    %107.4, %107.3, %107.1   !
BB522   <- [510]
  val?^ | miss    %522.0 = LdVar              eR    supersList, e0.3
  lgl$#-          %522.1 = IsType                   %522.0 isA val?~- | miss
  void                    Branch                   %522.1 -> BB532 (if true) | BB533 (if false)
BB523   <- [510]
  void                    Nop                !     
  lgl$#-          %523.1 = %510.5
  dr              %523.2 = DeadBranchReached@0x55fa0e5780e0[Test#25]
  goto BB261
BB220   <- [508]
  (cls|spec|blt)  %220.0 = LdFun              !v    cat, e0.3
  fs              %220.1 = FrameState         R     0x55fa136cd470+4638: [%220.0], env=e0.3
  void                    Deopt              !v    %220.1, DeadCall@0x55fa0e5780e0[Call#105], %220.0   !
BB219   <- [508]
  val?^ | miss    %219.0 = LdVar              eR    c, e0.3
  lgl$#-          %219.1 = Identical                <blt c>, %219.0   <true>
  void                    Branch                   %219.1 -> BB512 (if true) | BB513 (if false)
BB506   <- [109]
  lgl$-           %506.0 = CastType           d     dn %109.0
  lgl$#-          %506.1 = CheckTrueFalse     e     %506.0
  void                    Branch                   %506.1 -> BB204 (if true) | BB110 (if false)
BB507   <- [109]
  void                    Nop                !     
  val?^ | miss    %507.1 = %109.0
  dr              %507.2 = Typecheck@0x55fa0e5780e0[Type#363]
  goto BB107
BB532   <- [522]
  val?~- | miss   %532.0 = CastType           d     dn %522.0
  val?-           %532.1 = Force!<value>            %532.0,    <vec->
  val?^ | miss    %532.2 = LdVar              eR    list, e0.3
  lgl$#-          %532.3 = Identical                <blt list>, %532.2   <true>
  void                    Branch                   %532.3 -> BB534 (if true) | BB535 (if false)
BB533   <- [522]
  void                    Nop                !     
  val?^ | miss    %533.1 = %522.0
  dr              %533.2 = Typecheck@0x55fa0e5780e0[Type#233]
  goto BB261
BB261   <- [523, 533, 535, 537]
  val?^ | miss    %261.0 = Phi                      %523.1:BB523, %533.1:BB533, %535.1:BB535, %537.1:BB537
  val?^ | miss    %261.1 = %261.0
  dr              %261.2 = Phi                      %523.2:BB523, %533.2:BB533, %535.2:BB535, %537.2:BB537
  dr              %261.3 = %261.2
  fs              %261.4 = FrameState         R     0x55fa136cd470+3419: [1L, %404.0, %242.1], env=e0.3
  void                    Deopt              !v    %261.4, %261.3, %261.1   !
BB512   <- [219]
  val?^ | miss    %512.0 = LdVar              eR    methods, e0.3
  lgl$#-          %512.1 = IsType                   %512.0 isA val?~+ | miss
  void                    Branch                   %512.1 -> BB520 (if true) | BB521 (if false)
BB513   <- [219]
  void                    Nop                !     
  lgl$#-          %513.1 = %219.1
  dr              %513.2 = DeadBranchReached@0x55fa0e5780e0[Test#34]
  goto BB217
BB204   <- [506]
  val?^ | miss    %204.0 = LdVar              eR    methods, e0.3
  lgl$#-          %204.1 = IsType                   %204.0 isA val?~+ | miss
  void                    Branch                   %204.1 -> BB514 (if true) | BB515 (if false)
BB110   <- [506]
  void                    Nop                !     
  goto BB111
BB534   <- [532]
  val?^ | miss    %534.0 = LdVar              eR    allLabels, e0.3
  lgl$#-          %534.1 = IsType                   %534.0 isA val?~- | miss
  void                    Branch                   %534.1 -> BB536 (if true) | BB537 (if false)
BB535   <- [532]
  void                    Nop                !     
  lgl$#-          %535.1 = %532.3
  dr              %535.2 = DeadBranchReached@0x55fa0e5780e0[Test#26]
  goto BB261
BB520   <- [512]
  val?~+ | miss   %520.0 = CastType           d     dn %512.0
  val?+           %520.1 = Force!<value>            %520.0,    <vec+>
  val?^ | miss    %520.2 = LdVar              eR    groupmethods, e0.3
  lgl$#-          %520.3 = IsType                   %520.2 isA val?~+ | miss
  void                    Branch                   %520.3 -> BB530 (if true) | BB531 (if false)
BB521   <- [512]
  void                    Nop                !     
  val?^ | miss    %521.1 = %512.0
  dr              %521.2 = Typecheck@0x55fa0e5780e0[Type#301]
  goto BB217
BB217   <- [513, 521, 531]
  val?^ | miss    %217.0 = Phi                      %513.1:BB513, %521.1:BB521, %531.1:BB531
  val?^ | miss    %217.1 = %217.0
  dr              %217.2 = Phi                      %513.2:BB513, %521.2:BB521, %531.2:BB531
  dr              %217.3 = %217.2
  fs              %217.4 = FrameState         R     0x55fa136cd470+4623: [%508.5], env=e0.3
  void                    Deopt              !v    %217.4, %217.3, %217.1   !
BB514   <- [204]
  val?~+ | miss   %514.0 = CastType           d     dn %204.0
  val?+           %514.1 = Force!<value>            %514.0,    <vec+>
  lgl$#-          %514.2 = IsType                   %514.1 isA val+   <true>
  void                    Branch                   %514.2 -> BB524 (if true) | BB525 (if false)
BB515   <- [204]
  void                    Nop                !     
  val?^ | miss    %515.1 = %204.0
  dr              %515.2 = Typecheck@0x55fa0e5780e0[Type#376]
  goto BB107
BB111   <- [110, 570]
  val?^ | miss    %111.0 = LdVar              eR    length, e0.3
  lgl$#-          %111.1 = Identical                <blt length>, %111.0   <true>
  void                    Branch                   %111.1 -> BB516 (if true) | BB517 (if false)
BB536   <- [534]
  val?~- | miss   %536.0 = CastType           d     dn %534.0
  val?-           %536.1 = Force!<value>            %536.0,    <str->
  val+            %536.2 = CallSafeBuiltin    wed   list(%536.1)    <vec$->
  val+            %536.3 = CallSafeBuiltin    wed   c(%532.1, %536.2)    <vec->
  void                    StVar              lW    supersList, %536.3, e0.3
  int$#-          %536.5 = %242.1
  goto BB240
BB537   <- [534]
  void                    Nop                !     
  val?^ | miss    %537.1 = %534.0
  dr              %537.2 = Typecheck@0x55fa0e5780e0[Type#235]
  goto BB261
BB530   <- [520]
  val?~+ | miss   %530.0 = CastType           d     dn %520.2
  val?+           %530.1 = Force!<value>            %530.0,    <vec+>
  val+            %530.2 = CallSafeBuiltin    wed   c(%520.1, %530.1)    <vec+>
  void                    StVar              lW    methods, %530.2, e0.3
  goto BB104
BB531   <- [520]
  void                    Nop                !     
  val?^ | miss    %531.1 = %520.2
  dr              %531.2 = Typecheck@0x55fa0e5780e0[Type#302]
  goto BB217
BB524   <- [514]
  val?^ | miss    %524.0 = LdVar              eR    is.na, e0.3
  lgl$#-          %524.1 = Identical                <blt is.na>, %524.0   <true>
  void                    Branch                   %524.1 -> BB538 (if true) | BB539 (if false)
BB525   <- [514]
  void                    Nop                !     
  lgl$#-          %525.1 = %514.2
  dr              %525.2 = DeadBranchReached@0x55fa0e5780e0[Test#48]
  goto BB107
BB516   <- [111]
  val?^ | miss    %516.0 = LdVar              eR    methods, e0.3
  lgl$#-          %516.1 = IsType                   %516.0 isA val?~+ | miss
  void                    Branch                   %516.1 -> BB518 (if true) | BB519 (if false)
BB517   <- [111]
  void                    Nop                !     
  lgl$#-          %517.1 = %111.1
  dr              %517.2 = DeadBranchReached@0x55fa0e5780e0[Test#50]
  goto BB112
BB538   <- [524]
  val?^ | miss    %538.0 = LdVar              eR    match, e0.3
  lgl$#-          %538.1 = Identical                %538.0, function(x, table, nomatch=NA, incomparables=N|...
  void                    Branch                   %538.1 -> BB552 (if true) | BB553 (if false)
BB539   <- [524]
  void                    Nop                !     
  lgl$#-          %539.1 = %524.1
  dr              %539.2 = DeadBranchReached@0x55fa0e5780e0[Test#49]
  goto BB107
BB518   <- [516]
  val?~+ | miss   %518.0 = CastType           d     dn %516.0
  val?+           %518.1 = Force!<value>            %518.0,    <vec+>
  (int|real)$-    %518.2 = CallSafeBuiltin    wed   length(%518.1)    <int$->
  lgl$#-          %518.3 = IsType                   %518.2 isA int$-
  void                    Branch                   %518.3 -> BB526 (if true) | BB527 (if false)
BB519   <- [516]
  void                    Nop                !     
  val?^ | miss    %519.1 = %516.0
  dr              %519.2 = Typecheck@0x55fa0e5780e0[Type#384]
  goto BB112
BB112   <- [517, 519]
  val?^ | miss    %112.0 = Phi                      %517.1:BB517, %519.1:BB519
  val?^ | miss    %112.1 = %112.0
  dr              %112.2 = Phi                      %517.2:BB517, %519.2:BB519
  dr              %112.3 = %112.2
  fs              %112.4 = FrameState         R     0x55fa136cd470+6458: [], env=e0.3
  void                    Deopt              !v    %112.4, %112.3, %112.1   !
BB552   <- [538]
  val?^ | miss    %552.0 = LdVar              eR    names, e0.3
  lgl$#-          %552.1 = Identical                %552.0, <blt names>
  void                    Branch                   %552.1 -> BB558 (if true) | BB559 (if false)
BB553   <- [538]
  void                    Nop                !     
  val?^ | miss    %553.1 = %538.0
  dr              %553.2 = CallTarget@0x55fa0e5780e0[Call#129]
  goto BB107
BB526   <- [518]
  int$-           %526.0 = CastType           d     dn %518.2
  lgl$-           %526.1 = Gt                 d     %526.0, 1L, elided   <lgl$->
  lgl$#-          %526.2 = CheckTrueFalse     e     %526.1
  void                    Branch                   %526.2 -> BB191 (if true) | BB116 (if false)
BB527   <- [518]
  void                    Nop                !     
  (int|real)$-    %527.1 = %518.2
  dr              %527.2 = Typecheck@0x55fa0e5780e0[Type#385]
  goto BB114
BB558   <- [552]
  val+            %558.0 = CallSafeBuiltin    wed   names(%514.1)    <str->
  val?^ | miss    %558.1 = LdVar              eR    as.character, e0.3
  lgl$#-          %558.2 = Identical                %558.1, <blt as.character>
  void                    Branch                   %558.2 -> BB560 (if true) | BB561 (if false)
BB559   <- [552]
  void                    Nop                !     
  val?^ | miss    %559.1 = %552.0
  dr              %559.2 = CallTarget@0x55fa0e5780e0[Call#130]
  goto BB107
BB191   <- [526]
  val?^ | miss    %191.0 = LdVar              eR    paste, e0.3
  lgl$#-          %191.1 = Identical                %191.0, function(..., sep=" ", collapse=NULL, recycle0|...
  void                    Branch                   %191.1 -> BB528 (if true) | BB529 (if false)
BB116   <- [526]
  void                    Nop                !     
  goto BB117
BB114   <- [527, 529]
  val?^ | miss    %114.0 = Phi                      %527.1:BB527, %529.1:BB529
  val?^ | miss    %114.1 = %114.0
  dr              %114.2 = Phi                      %527.2:BB527, %529.2:BB529
  dr              %114.3 = %114.2
  fs              %114.4 = FrameState         R     0x55fa136cd470+6549: [%518.2], env=e0.3
  void                    Deopt              !v    %114.4, %114.3, %114.1   !
BB560   <- [558]
  val?^ | miss    %560.0 = LdVar              eR    excluded, e0.3
  val?            %560.1 = Force!<wrapped>    !v    %560.0, e0.3   <str$->
  val?            %560.2 = CallBuiltin        !v    as.character(%560.1) e0.3   <str$->
  lgl$#-          %560.3 = IsType                   %560.2 isA val?+
  void                    Branch                   %560.3 -> BB566 (if true) | BB567 (if false)
BB561   <- [558]
  fs              %561.0 = FrameState         R     0x55fa136cd470+6415: [%514.1, <blt is.na>], env=e0.3
  prom-           %561.1 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p76, e0.3
  val?^           %561.2 = CastType                 up %561.1
  prom-           %561.3 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p74, e0.3
  val?^           %561.4 = CastType                 up %561.3
  env             e561.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%561.2, x=%561.4, parent=R_BaseNamespace, context 0
  fs              %561.6 = FrameState         R     0x55fa0b568d40+9: [], env=e561.5, next=%561.0
  fs              %561.7 = FrameState         R     0x55fa12106e90+32(pr): [%558.0], env=e0.3, next=%561.6
  void                    Deopt              !v    %561.7, CallTarget@0x55fa0e5780e0[Call#131], %558.1   !
BB528   <- [191]
  prom-           %528.0 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p69, e0.3
  dots-           %528.1 = DotsList           l     %528.0
  val?^ | miss    %528.2 = CastType                 up %528.0
  env             e528.3 = MkEnv              l     ...=%528.1, sep(miss)=" ", collapse="#", recycle0(miss)=false, parent=R_BaseNamespace, context 0
  val?            %528.4 = Force!             !vL   %528.2, e528.3
  val+            %528.5 = CallSafeBuiltin    wed   list(%528.4)    <vec->
  val+            %528.6 = CallSafeBuiltin    wed   paste(%528.5, " ", "#", false)    <str$->
  void                    StVar              lW    defaultLabel, %528.6, e0.3
  val?^ | miss    %528.8 = LdVar              eR    match, e0.3
  lgl$#-          %528.9 = Identical                %528.8, function(x, table, nomatch=NA, incomparables=N|...
  void                    Branch                   %528.9 -> BB544 (if true) | BB545 (if false)
BB529   <- [191]
  void                    Nop                !     
  val?^ | miss    %529.1 = %191.0
  dr              %529.2 = CallTarget@0x55fa0e5780e0[Call#133]
  goto BB114
BB117   <- [116, 200, 576]
  val?^ | miss    %117.0 = LdVar              eR    length, e0.3
  lgl$#-          %117.1 = Identical                <blt length>, %117.0   <true>
  void                    Branch                   %117.1 -> BB540 (if true) | BB541 (if false)
BB566   <- [560]
  val?+           %566.0 = CastType           d     dn %560.2   <str$->
  val+            %566.1 = CallSafeBuiltin    wed   match(%558.0, %566.0, NA, nil)    <int->
  lgl$#-          %566.2 = IsType                   %566.1 isA int-
  void                    Branch                   %566.2 -> BB570 (if true) | BB571 (if false)
BB567   <- [560]
  fs              %567.0 = FrameState         R     0x55fa136cd470+6415: [%514.1, <blt is.na>], env=e0.3
  prom-           %567.1 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p76, e0.3
  val?^           %567.2 = CastType                 up %567.1
  prom-           %567.3 = MkArg                    %558.0, .findInheritedMethods[0x55fa0fbcee30]_p74 (!refl), e0.3
  val?~           %567.4 = CastType                 up %567.3
  env             e567.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%567.2, x=%567.4, parent=R_BaseNamespace, context 0
  fs              %567.6 = FrameState         R     0x55fa0b568d40+23: [%558.0], env=e567.5, next=%567.0
  fs              %567.7 = FrameState         R     0x55fa0e74c920+32(pr): [%560.2], env=e0.3, next=%567.6
  void                    Deopt              !v    %567.7, Typecheck@0x55fa0b5bbcb0[Type#1], %560.2   !
BB544   <- [528]
  val?^ | miss    %544.0 = LdVar              eR    names, e0.3
  lgl$#-          %544.1 = Identical                %544.0, <blt names>
  void                    Branch                   %544.1 -> BB546 (if true) | BB547 (if false)
BB545   <- [528]
  void                    Nop                !     
  val?^ | miss    %545.1 = %528.8
  dr              %545.2 = CallTarget@0x55fa0e5780e0[Call#135]
  goto BB192
BB540   <- [117]
  val?^ | miss    %540.0 = LdVar              eR    methods, e0.3
  lgl$#-          %540.1 = IsType                   %540.0 isA val?~+ | miss
  void                    Branch                   %540.1 -> BB542 (if true) | BB543 (if false)
BB541   <- [117]
  void                    Nop                !     
  lgl$#-          %541.1 = %117.1
  dr              %541.2 = DeadBranchReached@0x55fa0e5780e0[Test#53]
  goto BB118
BB570   <- [566]
  int-            %570.0 = CastType           d     dn %566.1
  lgl-            %570.1 = CallSafeBuiltin    wed   is.na(%570.0)    <lgl->
  val?            %570.2 = Extract1_1D        wed   %514.1, %570.1, elided   <vec+>
  void                    StVar              lW    methods, %570.2, e0.3
  goto BB111
BB571   <- [566]
  fs              %571.0 = FrameState         R     0x55fa136cd470+6415: [%514.1, <blt is.na>], env=e0.3
  prom-           %571.1 = MkArg                    %566.0, .findInheritedMethods[0x55fa0fbcee30]_p76 (!refl), e0.3
  val?~           %571.2 = CastType                 up %571.1
  prom-           %571.3 = MkArg                    %558.0, .findInheritedMethods[0x55fa0fbcee30]_p74 (!refl), e0.3
  val?~           %571.4 = CastType                 up %571.3
  env             e571.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%571.2, x=%571.4, parent=R_BaseNamespace, context 0
  fs              %571.6 = FrameState         R     0x55fa0b568d40+69: [%566.1], env=e571.5, next=%571.0
  void                    Deopt              !v    %571.6, Typecheck@0x55fa0e5780e0[Type#380], %566.1   !
BB546   <- [544]
  val?^ | miss    %546.0 = LdVar              eR    methods, e0.3
  lgl$#-          %546.1 = IsType                   %546.0 isA val?~+ | miss
  void                    Branch                   %546.1 -> BB548 (if true) | BB549 (if false)
BB547   <- [544]
  void                    Nop                !     
  val?^ | miss    %547.1 = %544.0
  dr              %547.2 = CallTarget@0x55fa0e5780e0[Call#136]
  goto BB192
BB192   <- [545, 547, 549]
  val?^ | miss    %192.0 = Phi                      %545.1:BB545, %547.1:BB547, %549.1:BB549
  val?^ | miss    %192.1 = %192.0
  dr              %192.2 = Phi                      %545.2:BB545, %547.2:BB547, %549.2:BB549
  dr              %192.3 = %192.2
  fs              %192.4 = FrameState         R     0x55fa136cd470+6636: [], env=e0.3
  void                    Deopt              !v    %192.4, %192.3, %192.1   !
BB542   <- [540]
  val?~+ | miss   %542.0 = CastType           d     dn %540.0
  val?+           %542.1 = Force!<value>            %542.0,    <vec+>
  (int|real)$-    %542.2 = CallSafeBuiltin    wed   length(%542.1)    <int$->
  lgl$#-          %542.3 = IsType                   %542.2 isA int$-
  void                    Branch                   %542.3 -> BB554 (if true) | BB555 (if false)
BB543   <- [540]
  void                    Nop                !     
  val?^ | miss    %543.1 = %540.0
  dr              %543.2 = Typecheck@0x55fa0e5780e0[Type#405]
  goto BB118
BB118   <- [541, 543]
  val?^ | miss    %118.0 = Phi                      %541.1:BB541, %543.1:BB543
  val?^ | miss    %118.1 = %118.0
  dr              %118.2 = Phi                      %541.2:BB541, %543.2:BB543
  dr              %118.3 = %118.2
  fs              %118.4 = FrameState         R     0x55fa136cd470+6881: [], env=e0.3
  void                    Deopt              !v    %118.4, %118.3, %118.1   !
BB548   <- [546]
  val?~+ | miss   %548.0 = CastType           d     dn %546.0
  val?+           %548.1 = Force!<value>            %548.0,    <vec+>
  val+            %548.2 = CallSafeBuiltin    wed   names(%548.1)    <str->
  lgl$#-          %548.3 = IsType                   %528.6 isA val?-
  void                    Branch                   %548.3 -> BB550 (if true) | BB551 (if false)
BB549   <- [546]
  void                    Nop                !     
  val?^ | miss    %549.1 = %546.0
  dr              %549.2 = Typecheck@0x55fa0e5780e0[Type#391]
  goto BB192
BB554   <- [542]
  int$-           %554.0 = CastType           d     dn %542.2
  lgl$-           %554.1 = Gt                 d     %554.0, 1L, elided   <lgl$->
  lgl$#-          %554.2 = CheckTrueFalse     e     %554.1
  void                    Branch                   %554.2 -> BB164 (if true) | BB122 (if false)
BB555   <- [542]
  fs              %555.0 = FrameState         R     0x55fa136cd470+6972: [%542.2], env=e0.3
  void                    Deopt              !v    %555.0, Typecheck@0x55fa0e5780e0[Type#406], %542.2   !
BB550   <- [548]
  val-            %550.0 = CastType           d     dn %528.6   <str$->
  val+            %550.1 = CallSafeBuiltin    wed   match(%550.0, %548.2, 0L, nil)    <int$->
  lgl$#-          %550.2 = IsType                   %550.1 isA int$-
  void                    Branch                   %550.2 -> BB556 (if true) | BB557 (if false)
BB551   <- [548]
  fs              %551.0 = FrameState         R     0x55fa136cd470+6678: [], env=e0.3
  prom-           %551.1 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p72, e0.3
  val?^           %551.2 = CastType                 up %551.1
  prom-           %551.3 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p71 (!refl), e0.3
  val?^           %551.4 = CastType                 up %551.3
  env             e551.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch=0L, table=%551.2, x=%551.4, parent=R_BaseNamespace, context 0
  fs              %551.6 = FrameState         R     0x55fa0b568d40+23: [%528.6], env=e551.5, next=%551.0
  fs              %551.7 = FrameState         R     0x55fa0e022770+32(pr): [%548.2], env=e0.3, next=%551.6
  void                    Deopt              !v    %551.7, Typecheck@0x55fa0e5780e0[Type#389], %528.6   !
BB164   <- [554]
  val?^ | miss    %164.0 = LdVar              eR    verbose, e0.3
  val?            %164.1 = Force!<wrapped>    !v    %164.0, e0.3   <lgl$->
  lgl$#-          %164.2 = CheckTrueFalse     we    %164.1
  void                    Branch                   %164.2 -> BB190 (if true) | BB165 (if false)
BB122   <- [554]
  void                    Nop                !     
  goto BB123
BB556   <- [550]
  int$-           %556.0 = CastType           d     dn %550.1
  void                    StVar              lW    i, %556.0, e0.3
  lgl$-           %556.2 = Gt                 d     %556.0, 0L, elided   <lgl$->
  lgl$#-          %556.3 = CheckTrueFalse     e     %556.2
  void                    Branch                   %556.3 -> BB201 (if true) | BB200 (if false)
BB557   <- [550]
  fs              %557.0 = FrameState         R     0x55fa136cd470+6678: [], env=e0.3
  prom-           %557.1 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p71 (!refl), e0.3
  val?^           %557.2 = CastType                 up %557.1
  prom-           %557.3 = MkArg                    %548.2, .findInheritedMethods[0x55fa0fbcee30]_p72 (!refl), e0.3
  val?~           %557.4 = CastType                 up %557.3
  env             e557.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch=0L, table=%557.4, x=%557.2, parent=R_BaseNamespace, context 0
  fs              %557.6 = FrameState         R     0x55fa0b568d40+69: [%550.1], env=e557.5, next=%557.0
  void                    Deopt              !v    %557.6, Typecheck@0x55fa0e5780e0[Type#393], %550.1   !
BB190   <- [164]
  (cls|spec|blt)  %190.0 = LdFun              !v    cat, e0.3
  fs              %190.1 = FrameState         R     0x55fa136cd470+7030: [%190.0], env=e0.3
  void                    Deopt              !v    %190.1, DeadCall@0x55fa0e5780e0[Call#138], %190.0   !
BB165   <- [164]
  (cls|spec|blt)  %165.0 = LdFun              !v    .getBestMethods, <0x55fa170b79e8>, e0.3
  prom-           %165.1 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p53, e0.3
  prom-           %165.2 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p54, e0.3
  prom-           %165.3 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p55, e0.3
  prom-           %165.4 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p56, e0.3
  val?            %165.5 = NamedCall          !v    %165.0(%165.1, %165.2, %165.3, verbose=%165.4) e0.3   <int->
  void                    StVar              lW    select, %165.5, e0.3
  lgl$#-          %165.7 = IsType                   %165.5 isA int-
  val?^ | miss    %165.8 = LdVar              eR    length, e0.3
  lgl$#-          %165.9 = Identical                <blt length>, %165.8   <true>
  void                    Branch                   %165.9 -> BB562 (if true) | BB563 (if false)
BB123   <- [122, 594]
  val?^ | miss    %123.0 = LdVar              eR    simpleOnly, e0.3
  val?            %123.1 = Force!<wrapped>    !v    %123.0, e0.3   <lgl$->
  lgl$-           %123.2 = AsLogical          e     %123.1
  lgl$#-          %123.3 = Identical                %123.2, false
  void                    Branch                   %123.3 -> BB163 (if true) | BB126 (if false)
BB201   <- [556]
  lgl$#-          %201.0 = IsType                   %548.1 isA val+   <true>
  void                    Branch                   %201.0 -> BB568 (if true) | BB569 (if false)
BB200   <- [556]
  void                    Nop                !     
  goto BB117
BB562   <- [165]
  val             %562.0 = ChkMissing         e     %165.5
  void                    Branch                   %165.7 -> BB564 (if true) | BB565 (if false)
BB563   <- [165]
  void                    Nop                !     
  lgl$#-          %563.1 = %165.9
  dr              %563.2 = DeadBranchReached@0x55fa0e5780e0[Test#54]
  goto BB166
BB163   <- [123]
  void                    Nop                !     
  lgl$-           %163.1 = %123.2
  goto BB129
BB126   <- [123]
  val?^ | miss    %126.0 = LdVar              eR    length, e0.3
  lgl$#-          %126.1 = Identical                <blt length>, %126.0   <true>
  void                    Branch                   %126.1 -> BB572 (if true) | BB573 (if false)
BB568   <- [201]
  int$-           %568.0 = Minus              d     %556.0, elided
  val?            %568.1 = Extract1_1D        wed   %548.1, %568.0, elided   <vec+>
  void                    StVar              lW    methods, %568.1, e0.3
  val?^ | miss    %568.3 = LdVar              eR    fromGroup, e0.3
  lgl$#-          %568.4 = IsType                   %568.3 isA lgl-
  void                    Branch                   %568.4 -> BB576 (if true) | BB577 (if false)
BB569   <- [201]
  fs              %569.0 = FrameState         R     0x55fa136cd470+6692: [], env=e0.3
  void                    Deopt              !v    %569.0, DeadBranchReached@0x55fa0e5780e0[Test#51], %201.0   !
BB564   <- [562]
  int-            %564.0 = CastType           d     dn %165.5
  (int|real)$-    %564.1 = CallSafeBuiltin    wed   length(%564.0)    <int$->
  lgl$#-          %564.2 = IsType                   %564.1 isA int$-
  void                    Branch                   %564.2 -> BB574 (if true) | BB575 (if false)
BB565   <- [562]
  void                    Nop                !     
  val?            %565.1 = %165.5
  dr              %565.2 = Typecheck@0x55fa0e5780e0[Type#415]
  goto BB166
BB166   <- [563, 565]
  val?^ | miss    %166.0 = Phi                      %563.1:BB563, %565.1:BB565
  val?^ | miss    %166.1 = %166.0
  dr              %166.2 = Phi                      %563.2:BB563, %565.2:BB565
  dr              %166.3 = %166.2
  fs              %166.4 = FrameState         R     0x55fa136cd470+7145: [], env=e0.3
  void                    Deopt              !v    %166.4, %166.3, %166.1   !
BB129   <- [163, 584]
  lgl$-           %129.0 = Phi                      %584.4:BB584, %163.1:BB163
  lgl$-           %129.1 = %129.0
  lgl$#-          %129.2 = CheckTrueFalse     e     %129.1
  void                    Branch                   %129.2 -> BB162 (if true) | BB132 (if false)
BB572   <- [126]
  val?^ | miss    %572.0 = LdVar              eR    methods, e0.3
  lgl$#-          %572.1 = IsType                   %572.0 isA val?~+ | miss
  void                    Branch                   %572.1 -> BB578 (if true) | BB579 (if false)
BB573   <- [126]
  void                    Nop                !     
  lgl$#-          %573.1 = %126.1
  dr              %573.2 = DeadBranchReached@0x55fa0e5780e0[Test#57]
  goto BB124
BB576   <- [568]
  lgl-            %576.0 = CastType           d     dn %568.3
  lgl-            %576.1 = Extract1_1D        wed   %576.0, %568.0, elided   <lgl->
  void                    StVar              lW    fromGroup, %576.1, e0.3
  goto BB117
BB577   <- [568]
  fs              %577.0 = FrameState         R     0x55fa136cd470+6805: [], env=e0.3
  void                    Deopt              !v    %577.0, Typecheck@0x55fa0e5780e0[Type#400], %568.3   !
BB574   <- [564]
  int$-           %574.0 = CastType           d     dn %564.1
  lgl$-           %574.1 = Gt                 d     %574.0, 1L, elided   <lgl$->
  lgl$#-          %574.2 = CheckTrueFalse     e     %574.1
  void                    Branch                   %574.2 -> BB174 (if true) | BB170 (if false)
BB575   <- [564]
  fs              %575.0 = FrameState         R     0x55fa136cd470+7236: [%564.1], env=e0.3
  void                    Deopt              !v    %575.0, Typecheck@0x55fa0e5780e0[Type#418], %564.1   !
BB162   <- [129]
  (cls|spec|blt)  %162.0 = LdFun              !v    Recall, e0.3
  fs              %162.1 = FrameState         R     0x55fa136cd470+7866: [%162.0], env=e0.3
  void                    Deopt              !v    %162.1, DeadCall@0x55fa0e5780e0[Call#154], %162.0   !
BB132   <- [129]
  val?^ | miss    %132.0 = LdVar              eR    length, e0.3
  lgl$#-          %132.1 = Identical                <blt length>, %132.0   <true>
  void                    Branch                   %132.1 -> BB580 (if true) | BB581 (if false)
BB578   <- [572]
  val?~+ | miss   %578.0 = CastType           d     dn %572.0
  val?+           %578.1 = Force!<value>            %578.0,    <vec$+>
  (int|real)$-    %578.2 = CallSafeBuiltin    wed   length(%578.1)    <int$->
  lgl$#-          %578.3 = IsType                   %578.2 isA int$-
  void                    Branch                   %578.3 -> BB584 (if true) | BB585 (if false)
BB579   <- [572]
  void                    Nop                !     
  val?^ | miss    %579.1 = %572.0
  dr              %579.2 = Typecheck@0x55fa0e5780e0[Type#452]
  goto BB124
BB124   <- [573, 579]
  val?^ | miss    %124.0 = Phi                      %573.1:BB573, %579.1:BB579
  val?^ | miss    %124.1 = %124.0
  dr              %124.2 = Phi                      %573.2:BB573, %579.2:BB579
  dr              %124.3 = %124.2
  fs              %124.4 = FrameState         R     0x55fa136cd470+7728: [%123.1], env=e0.3
  void                    Deopt              !v    %124.4, %124.3, %124.1   !
BB174   <- [574]
  val?^ | miss    %174.0 = LdVar              eR    verbose, e0.3
  val?            %174.1 = Force!<value>      !v    %174.0, e0.3   <lgl$->
  lgl$#-          %174.2 = CheckTrueFalse     we    %174.1
  void                    Branch                   %174.2 -> BB189 (if true) | BB177 (if false)
BB170   <- [574]
  void                    Nop                !     
  int-            %170.1 = %564.0
  goto BB171
BB580   <- [132]
  val?^ | miss    %580.0 = LdVar              eR    methods, e0.3
  lgl$#-          %580.1 = IsType                   %580.0 isA val?~+ | miss
  void                    Branch                   %580.1 -> BB582 (if true) | BB583 (if false)
BB581   <- [132]
  void                    Nop                !     
  lgl$#-          %581.1 = %132.1
  dr              %581.2 = DeadBranchReached@0x55fa0e5780e0[Test#59]
  goto BB130
BB584   <- [578]
  int$-           %584.0 = CastType           d     dn %578.2
  lgl$-           %584.1 = Eq                 d     %584.0, 0L, elided   <lgl$->
  lgl$-           %584.2 = AsLogical                %584.1
  lgl$-           %584.3 = LAnd                     %123.2, %584.2
  lgl$-           %584.4 = %584.3
  goto BB129
BB585   <- [578]
  fs              %585.0 = FrameState         R     0x55fa136cd470+7831: [%123.2, %578.2], env=e0.3
  void                    Deopt              !v    %585.0, Typecheck@0x55fa0e5780e0[Type#453], %578.2   !
BB189   <- [174]
  (cls|spec|blt)  %189.0 = LdFun              !v    cat, e0.3
  fs              %189.1 = FrameState         R     0x55fa136cd470+7294: [%189.0], env=e0.3
  void                    Deopt              !v    %189.1, DeadCall@0x55fa0e5780e0[Call#142], %189.0   !
BB177   <- [174]
  val?^ | miss    %177.0 = LdVar              eR    getOption, e0.3
  lgl$#-          %177.1 = Identical                %177.0, function(x, default=NULL) <(rir::DispatchTable|...
  void                    Branch                   %177.1 -> BB592 (if true) | BB593 (if false)
BB171   <- [170, 610]
  int-            %171.0 = Phi                      %610.2:BB610, %170.1:BB170
  int-            %171.1 = %171.0
  lgl$#-          %171.2 = IsType                   %171.1 isA int$-
  val?^ | miss    %171.3 = LdVar              eR    methods, e0.3
  lgl$#-          %171.4 = IsType                   %171.3 isA val?~+ | miss
  void                    Branch                   %171.4 -> BB588 (if true) | BB589 (if false)
BB582   <- [580]
  val?~+ | miss   %582.0 = CastType           d     dn %580.0
  val?+           %582.1 = Force!<value>            %582.0,    <vec$+>
  (int|real)$-    %582.2 = CallSafeBuiltin    wed   length(%582.1)    <int$->
  lgl$#-          %582.3 = IsType                   %582.2 isA int$-
  void                    Branch                   %582.3 -> BB586 (if true) | BB587 (if false)
BB583   <- [580]
  void                    Nop                !     
  val?^ | miss    %583.1 = %580.0
  dr              %583.2 = Typecheck@0x55fa0e5780e0[Type#474]
  goto BB130
BB130   <- [581, 583]
  val?^ | miss    %130.0 = Phi                      %581.1:BB581, %583.1:BB583
  val?^ | miss    %130.1 = %130.0
  dr              %130.2 = Phi                      %581.2:BB581, %583.2:BB583
  dr              %130.3 = %130.2
  fs              %130.4 = FrameState         R     0x55fa136cd470+7850: [%129.1], env=e0.3
  void                    Deopt              !v    %130.4, %130.3, %130.1   !
BB592   <- [177]
  val?            %592.0 = StaticCall         !v    getOption[0x55fa0df7b070]("ambiguousMethodSelection") e0.3   <cls->
  lgl$-           %592.1 = Is                       %592.0, NULL
  void                    StVar              lW    condAction, %592.0, e0.3
  val             %592.3 = ChkMissing         e     %592.0
  lgl$#-          %592.4 = CheckTrueFalse     e     %592.1
  void                    Branch                   %592.4 -> BB188 (if true) | BB180 (if false)
BB593   <- [177]
  fs              %593.0 = FrameState         R     0x55fa136cd470+7279: [%174.2], env=e0.3
  void                    Deopt              !v    %593.0, CallTarget@0x55fa0e5780e0[Call#144], %177.0   !
BB588   <- [171]
  val?~+ | miss   %588.0 = CastType           d     dn %171.3
  val?+           %588.1 = Force!<value>            %588.0,    <vec+>
  lgl$#-          %588.2 = IsType                   %588.1 isA val+   <true>
  void                    Branch                   %588.2 -> BB590 (if true) | BB591 (if false)
BB589   <- [171]
  void                    Nop                !     
  val?^ | miss    %589.1 = %171.3
  dr              %589.2 = Typecheck@0x55fa0e5780e0[Type#446]
  goto BB172
BB586   <- [582]
  int$-           %586.0 = CastType           d     dn %582.2
  lgl$#-          %586.1 = CheckTrueFalse     e     %586.0
  void                    Branch                   %586.1 -> BB140 (if true) | BB135 (if false)
BB587   <- [582]
  void                    Nop                !     
  (int|real)$-    %587.1 = %582.2
  dr              %587.2 = Typecheck@0x55fa0e5780e0[Type#475]
  goto BB133
BB188   <- [592]
  val?^ | miss    %188.0 = LdVar              eR    .ambiguousMethodMessage, e0.3
  val?            %188.1 = Force!             !v    %188.0, e0.3   <val?_>
  void                    StVar              lW    condAction, %188.1, e0.3
  goto BB183
BB180   <- [592]
  val?^ | miss    %180.0 = LdVar              eR    is.function, e0.3
  lgl$#-          %180.1 = Identical                <blt is.function>, %180.0   <true>
  void                    Branch                   %180.1 -> BB604 (if true) | BB605 (if false)
BB590   <- [588]
  void                    Branch                   %171.2 -> BB594 (if true) | BB595 (if false)
BB591   <- [588]
  void                    Nop                !     
  lgl$#-          %591.1 = %588.2
  dr              %591.2 = DeadBranchReached@0x55fa0e5780e0[Test#56]
  goto BB172
BB172   <- [589, 591, 595]
  val?^ | miss    %172.0 = Phi                      %589.1:BB589, %591.1:BB591, %595.1:BB595
  val?^ | miss    %172.1 = %172.0
  dr              %172.2 = Phi                      %589.2:BB589, %591.2:BB591, %595.2:BB595
  dr              %172.3 = %172.2
  fs              %172.4 = FrameState         R     0x55fa136cd470+7644: [], env=e0.3
  void                    Deopt              !v    %172.4, %172.3, %172.1   !
BB140   <- [586]
  val?^ | miss    %140.0 = LdVar              eR    .sigLabel, e0.3
  lgl$#-          %140.1 = Identical                %140.0, function(sig) <(rir::DispatchTable*)0x55fa0e8b|...
  void                    Branch                   %140.1 -> BB596 (if true) | BB597 (if false)
BB135   <- [586]
  void                    Nop                !     
  goto BB136
BB133   <- [587, 597, 599]
  val?^ | miss    %133.0 = Phi                      %587.1:BB587, %597.1:BB597, %599.1:BB599
  val?^ | miss    %133.1 = %133.0
  dr              %133.2 = Phi                      %587.2:BB587, %597.2:BB597, %599.2:BB599
  dr              %133.3 = %133.2
  fs              %133.4 = FrameState         R     0x55fa136cd470+8203: [%582.2], env=e0.3
  void                    Deopt              !v    %133.4, %133.3, %133.1   !
BB183   <- [182, 188]
  val?^ | miss    %183.0 = LdVar              eR    withCallingHandlers, e0.3
  lgl$#-          %183.1 = Identical                %183.0, function(expr, ...) <(rir::DispatchTable*)0x55|...
  void                    Branch                   %183.1 -> BB602 (if true) | BB603 (if false)
BB604   <- [180]
  lgl$#-          %604.0 = IsType                   %592.0 isA val?-
  void                    Branch                   %604.0 -> BB612 (if true) | BB613 (if false)
BB605   <- [180]
  void                    Nop                !     
  lgl$#-          %605.1 = %180.1
  dr              %605.2 = DeadBranchReached@0x55fa0e5780e0[Test#55]
  goto BB178
BB594   <- [590]
  int$-           %594.0 = CastType           d     dn %171.1
  val?            %594.1 = Extract1_1D        wed   %588.1, %594.0, elided   <vec$+>
  void                    StVar              lW    methods, %594.1, e0.3
  goto BB123
BB595   <- [590]
  void                    Nop                !     
  int-            %595.1 = %171.1
  dr              %595.2 = Typecheck@0x55fa0e5780e0[Type#448]
  goto BB172
BB596   <- [140]
  prom-           %596.0 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p32, e0.3
  val?^           %596.1 = CastType                 up %596.0
  val?^ | miss    %596.2 = LdVar              eR    paste, <env 0x55fa0b35b378>
  lgl$#-          %596.3 = Identical                %596.2, function(..., sep=" ", collapse=NULL, recycle0|...
  void                    Branch                   %596.3 -> BB598 (if true) | BB599 (if false)
BB597   <- [140]
  void                    Nop                !     
  val?^ | miss    %597.1 = %140.0
  dr              %597.2 = CallTarget@0x55fa0e5780e0[Call#161]
  goto BB133
BB136   <- [135, 149, 622]
  val?^ | miss    %136.0 = LdVar              eR    methods, e0.3
  lgl$#-          %136.1 = IsType                   %136.0 isA val?~+ | miss
  void                    Branch                   %136.1 -> BB600 (if true) | BB601 (if false)
BB602   <- [183]
  prom-           %602.0 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p57, e0.3
  prom-           %602.1 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p68, e0.3
  dots-           %602.2 = DotsList           l     ambiguousMethodSelection=%602.1
  val?            %602.3 = StaticCall         !v    withCallingHandlers[0x55fa16c3c580](%602.0, %602.2) { 0 1n } e0.3   <int$->
  lgl$#-          %602.4 = IsType                   %602.3 isA int$-
  void                    Branch                   %602.4 -> BB610 (if true) | BB611 (if false)
BB603   <- [183]
  fs              %603.0 = FrameState         R     0x55fa136cd470+7585: [], env=e0.3
  void                    Deopt              !v    %603.0, CallTarget@0x55fa0e5780e0[Call#150], %183.0   !
BB612   <- [604]
  val?-           %612.0 = CastType           d     dn %592.0   <cls->
  lgl$#-          %612.1 = CallSafeBuiltin    wed   is.function(%612.0)    <lgl$->
  void                    Branch                   %612.1 -> BB182 (if true) | BB181 (if false)
BB613   <- [604]
  void                    Nop                !     
  val?            %613.1 = %592.0
  dr              %613.2 = Typecheck@0x55fa0e5780e0[Type#423]
  goto BB178
BB178   <- [605, 613]
  val?^ | miss    %178.0 = Phi                      %605.1:BB605, %613.1:BB613
  val?^ | miss    %178.1 = %178.0
  dr              %178.2 = Phi                      %605.2:BB605, %613.2:BB613
  dr              %178.3 = %178.2
  fs              %178.4 = FrameState         R     0x55fa136cd470+7378: [], env=e0.3
  void                    Deopt              !v    %178.4, %178.3, %178.1   !
BB598   <- [596]
  env             e598.0 = MkEnv              l     sig=%596.1, parent=<env 0x55fa0b35b378>, context 0
  prom-           %598.1 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p132, e598.0
  dots-           %598.2 = DotsList           l     %598.1
  val?^ | miss    %598.3 = CastType                 up %598.1
  env             e598.4 = MkEnv              l     ...=%598.2, sep(miss)=" ", collapse="#", recycle0(miss)=false, parent=R_BaseNamespace, context -1
  val?            %598.5 = Force!             !vL   %598.3, e598.4
  val+            %598.6 = CallSafeBuiltin    wed   list(%598.5)    <vec->
  val+            %598.7 = CallSafeBuiltin    wed   paste(%598.6, " ", "#", false)    <str$->
  void                    StVar              lW    tlabel, %598.7, e0.3
  val?^ | miss    %598.9 = LdVar              eR    methods, e0.3
  lgl$#-          %598.10 = IsType                   %598.9 isA val?~+ | miss
  void                    Branch                   %598.10 -> BB606 (if true) | BB607 (if false)
BB599   <- [596]
  void                    Nop                !     
  val?^ | miss    %599.1 = %596.2
  dr              %599.2 = CallTarget@0x55fa0e407028[Call#0]
  goto BB133
BB600   <- [136]
  val?~+ | miss   %600.0 = CastType           d     dn %136.0
  void                    Visible            v     
  val?+           %600.2 = Force!<value>            %600.0,    <vec$+>
  val?+           %600.3 = %600.2
  goto BB139
BB601   <- [136]
  fs              %601.0 = FrameState         R     0x55fa136cd470+8774: [], env=e0.3
  void                    Deopt              !v    %601.0, Typecheck@0x55fa0e5780e0[Type#509], %136.0   !
BB610   <- [602]
  int$-           %610.0 = CastType           d     dn %602.3
  void                    StVar              lW    select, %610.0, e0.3
  int$-           %610.2 = %610.0
  goto BB171
BB611   <- [602]
  fs              %611.0 = FrameState         R     0x55fa136cd470+7630: [%602.3], env=e0.3
  void                    Deopt              !v    %611.0, Typecheck@0x55fa0e5780e0[Type#445], %602.3   !
BB182   <- [612]
  void                    Nop                !     
  goto BB183
BB181   <- [612]
  (cls|spec|blt)  %181.0 = LdFun              !v    stop, e0.3
  fs              %181.1 = FrameState         R     0x55fa136cd470+7516: [%181.0], env=e0.3
  void                    Deopt              !v    %181.1, DeadCall@0x55fa0e5780e0[Call#146], %181.0   !
BB606   <- [598]
  val?~+ | miss   %606.0 = CastType           d     dn %598.9
  val?+           %606.1 = Force!<value>            %606.0,    <vec$+>
  lgl$#-          %606.2 = IsType                   %606.1 isA val+   <true>
  void                    Branch                   %606.2 -> BB608 (if true) | BB609 (if false)
BB607   <- [598]
  void                    Nop                !     
  val?^ | miss    %607.1 = %598.9
  dr              %607.2 = Typecheck@0x55fa0e5780e0[Type#478]
  goto BB141
BB608   <- [606]
  val?            %608.0 = Extract2_1D        wed   %606.1, 1L, elided   <cls>
  void                    StVar              lW    m, %608.0, e0.3
  val?^ | miss    %608.2 = LdVar              eR    is, e0.3
  lgl$#-          %608.3 = Identical                %608.2, function(object, class2) <(rir::DispatchTable*|...
  void                    Branch                   %608.3 -> BB614 (if true) | BB615 (if false)
BB609   <- [606]
  void                    Nop                !     
  lgl$#-          %609.1 = %606.2
  dr              %609.2 = DeadBranchReached@0x55fa0e5780e0[Test#60]
  goto BB141
BB141   <- [607, 609]
  val?^ | miss    %141.0 = Phi                      %607.1:BB607, %609.1:BB609
  val?^ | miss    %141.1 = %141.0
  dr              %141.2 = Phi                      %607.2:BB607, %609.2:BB609
  dr              %141.3 = %141.2
  fs              %141.4 = FrameState         R     0x55fa136cd470+8265: [], env=e0.3
  void                    Deopt              !v    %141.4, %141.3, %141.1   !
BB614   <- [608]
  prom-           %614.0 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p33 (!refl), e0.3
  val?            %614.1 = Call               !v    function(object, class2) <(rir::DispatchTable*|...(%614.0, "MethodDefinition") e0.3   <lgl$->
  lgl$#-          %614.2 = IsType                   %614.1 isA lgl$-
  void                    Branch                   %614.2 -> BB616 (if true) | BB617 (if false)
BB615   <- [608]
  fs              %615.0 = FrameState         R     0x55fa136cd470+8332: [], env=e0.3
  void                    Deopt              !v    %615.0, CallTarget@0x55fa0e5780e0[Call#162], %608.2   !
BB616   <- [614]
  lgl$-           %616.0 = CastType           d     dn %614.1
  lgl$#-          %616.1 = CheckTrueFalse     e     %616.0
  void                    Branch                   %616.1 -> BB155 (if true) | BB147 (if false)
BB617   <- [614]
  fs              %617.0 = FrameState         R     0x55fa136cd470+8369: [%614.1], env=e0.3
  void                    Deopt              !v    %617.0, Typecheck@0x55fa0e5780e0[Type#481], %614.1   !
BB155   <- [616]
  (cls|spec|blt)  %155.0 = LdFun              !v    <-, <0x55fa0ad48da8>, e0.3
  prom-           %155.1 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p37, e0.3
  prom-           %155.2 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p40, e0.3
  val?            %155.3 = Call               !v    %155.0(%155.1, %155.2) e0.3
  val?^ | miss    %155.4 = LdVar              eR    .inheritedArgsExpression, e0.3
  lgl$#-          %155.5 = Identical                %155.4, function(target, defined, body) <(rir::Dispatc|...
  void                    Branch                   %155.5 -> BB618 (if true) | BB619 (if false)
BB147   <- [616]
  void                    Nop                !     
  goto BB148
BB618   <- [155]
  prom-           %618.0 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p45, e0.3
  prom-           %618.1 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p48, e0.3
  prom-           %618.2 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p51, e0.3
  val?            %618.3 = StaticCall         !v    .inheritedArgsExpression[0x55fa11ae0b40](%618.0, %618.1, %618.2) e0.3   <nil->
  lgl$-           %618.4 = Is                       %618.3, NULL
  void                    StVar              lW    coerce, %618.3, e0.3
  val             %618.6 = ChkMissing         e     %618.3
  lgl$-           %618.7 = Not                d     %618.4, elided
  lgl$#-          %618.8 = CheckTrueFalse     e     %618.7
  void                    Branch                   %618.8 -> BB161 (if true) | BB158 (if false)
BB619   <- [155]
  fs              %619.0 = FrameState         R     0x55fa136cd470+8422: [%155.3], env=e0.3
  void                    Deopt              !v    %619.0, CallTarget@0x55fa0e5780e0[Call#167], %155.4   !
BB148   <- [147, 620]
  val?^ | miss    %148.0 = LdVar              eR    doCache, e0.3
  val?            %148.1 = Force!<lazy>       !v    %148.0, e0.3   <lgl$->
  lgl$#-          %148.2 = CheckTrueFalse     we    %148.1
  void                    Branch                   %148.2 -> BB150 (if true) | BB149 (if false)
BB161   <- [618]
  (cls|spec|blt)  %161.0 = LdFun              !v    body<-, e0.3
  fs              %161.1 = FrameState         R     0x55fa136cd470+8529: [%618.3, %161.0], env=e0.3
  void                    Deopt              !v    %161.1, DeadCall@0x55fa0e5780e0[Call#171], %161.0   !
BB158   <- [618]
  val?^ | miss    %158.0 = LdVar              eR    m, e0.3
  val?            %158.1 = Force!<value>      !v    %158.0, e0.3   <cls>
  val?^ | miss    %158.2 = LdVar              eR    methods !upd, e0.3
  lgl$#-          %158.3 = IsType                   %158.2 isA val?~+ | miss
  void                    Branch                   %158.3 -> BB620 (if true) | BB621 (if false)
BB150   <- [148]
  val?^ | miss    %150.0 = LdVar              eR    verbose, e0.3
  val?            %150.1 = Force!<wrapped>    !v    %150.0, e0.3   <lgl$->
  lgl$#-          %150.2 = CheckTrueFalse     we    %150.1
  void                    Branch                   %150.2 -> BB154 (if true) | BB153 (if false)
BB149   <- [148]
  void                    Nop                !     
  goto BB136
BB620   <- [158]
  val?~+ | miss   %620.0 = CastType           d     dn %158.2
  val?+           %620.1 = Force!<value>            %620.0,    <vec$+>
  val?            %620.2 = Subassign2_1D      !v    %158.1, %620.1, 1L, e0.3
  void                    StVar              lW    methods, %620.2, e0.3
  goto BB148
BB621   <- [158]
  fs              %621.0 = FrameState         R     0x55fa136cd470+8601: [%158.1], env=e0.3
  void                    Deopt              !v    %621.0, Typecheck@0x55fa0e5780e0[Type#503], %158.2   !
BB154   <- [150]
  (cls|spec|blt)  %154.0 = LdFun              !v    cat, e0.3
  fs              %154.1 = FrameState         R     0x55fa136cd470+8691: [%154.0], env=e0.3
  void                    Deopt              !v    %154.1, DeadCall@0x55fa0e5780e0[Call#172], %154.0   !
BB153   <- [150]
  val?^ | miss    %153.0 = LdVar              eR    assign, e0.3
  lgl$#-          %153.1 = Identical                %153.0, function(x, value, pos=-(1), envir=as.environm|...
  void                    Branch                   %153.1 -> BB622 (if true) | BB623 (if false)
BB622   <- [153]
  prom-           %622.0 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p34, e0.3
  prom-           %622.1 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p35, e0.3
  prom-           %622.2 = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p36, e0.3
  val?            %622.3 = StaticCall         !v    assign[0x55fa16db2f90](%622.0, %622.1, missingArg, %622.2) { 0 1 3n } e0.3
  goto BB136
BB623   <- [153]
  fs              %623.0 = FrameState         R     0x55fa136cd470+8676: [%150.2], env=e0.3
  void                    Deopt              !v    %623.0, CallTarget@0x55fa0e5780e0[Call#173], %153.0   !
Prom 0:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     get, <0x55fa0bc79e78>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p1, e0.0
  val?            %0.3  = NamedCall          !     %0.1(".MTable", envir=%0.2) e0.0   <env->
  void                    Return             l     %0.3
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     environment, <0x55fa0b0fab68>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p2, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <env->
  void                    Return             l     %0.3
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fdef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 4:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     .simpleInheritanceGeneric, <0x55fa10628540>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p5, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <lgl$->
  void                    Return             l     %0.3
Prom 5:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fdef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 7:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     is.environment, <0x55fa0ad63e18>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p8, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <lgl$->
  void                    Return             l     %0.3
Prom 8:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    mtable, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <(nil|env)->
  void                    Return             l     %0.3
Prom 9:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     environment, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p10, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 10:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fdef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 11:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     .allowPrimitiveMethods, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p12, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 12:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    primMethods, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 13:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fdef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 14:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    group, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 15:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    cl1, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$+>
  void                    Return             l     %0.3
Prom 16:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 20:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    labels, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 21:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     .fillSignatures, <0x55fa1062c118>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p22, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p23, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <str->
  void                    Return             l     %0.4
Prom 22:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    allMethods, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 23:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     length, <0x55fa0ad54a90>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p24, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <int$->
  void                    Return             l     %0.3
Prom 24:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    classes, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <(str|vec)>
  void                    Return             l     %0.3
Prom 25:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    allMethods, e0.0
  val?            %0.2  = Force<value>       !v    %0.1, e0.0   <str->
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <true>
  void                    Branch                   %0.3 -> BB2 (if true) | BB7 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    m, e0.0
  val?            %2.1  = Force<value>       !v    %2.0, e0.0   <int->
  lgl$#-          %2.2  = IsType                   %2.1 isA val+   <true>
  void                    Branch                   %2.2 -> BB6 (if true) | BB3 (if false)
BB7   <- [0]
  prom-           %7.0  = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p27, e0.0
  prom-           %7.1  = %7.0
  goto BB5
BB6   <- [2]
  val?^ | miss    %6.0  = LdVar              eR    found, e0.0
  val?            %6.1  = Force<value>       !v    %6.0, e0.0   <lgl->
  val?            %6.2  = %6.1
  goto BB4
BB3   <- [2]
  prom-           %3.0  = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p26, e0.0
  prom-           %3.1  = %3.0
  goto BB4
BB5   <- [7, 4]
  val?            %5.0  = Phi                      %4.3:BB4, %7.1:BB7
  val?            %5.1  = %5.0
  val?            %5.2  = Extract1_1D        !v    %0.2, %5.1, e0.0   <str->
  void                    Visible            v     
  void                    Return             l     %5.2
BB4   <- [3, 6]
  val?            %4.0  = Phi                      %6.2:BB6, %3.1:BB3
  val?            %4.1  = %4.0
  val?            %4.2  = Extract1_1D        !v    %2.1, %4.1, e0.0   <int->
  val?            %4.3  = %4.2
  goto BB5
Prom 26:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    found, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 27:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    m, e0.0
  val?            %0.2  = Force              !v    %0.1, e0.0   <val?_>
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <@?>
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    found, e0.0
  val?            %2.1  = Force              !v    %2.0, e0.0   <val?_>
  val?            %2.2  = %2.1
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p28, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.2:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract1_1D        !v    %0.2, %3.1, e0.0   <val?_>
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 28:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    found, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 29:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    table, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 30:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     length, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p31, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 31:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    methods, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 32:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    classes, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <(str|vec)>
  void                    Return             l     %0.3
Prom 33:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    m, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 34:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    tlabel, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 35:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    m, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 36:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    mtable, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 37:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p38, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p39, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 38:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    m, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 39:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    target, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 40:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     .newSignature, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p41, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p42, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 41:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    classes, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 42:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p43, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p44, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 43:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fdef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 44:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    signature, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 45:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, <0x55fa0ad53bd8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p46, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p47, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <str>
  void                    Return             l     %0.4
Prom 46:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    m, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 47:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    target, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 48:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, <0x55fa0ad53bd8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p49, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p50, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <str>
  void                    Return             l     %0.4
Prom 49:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    m, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 50:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    defined, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 51:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     body, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p52, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 52:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    m, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 53:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    methods, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 54:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    supersList, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <vec->
  void                    Return             l     %0.3
Prom 55:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fromGroup, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 56:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    verbose, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <lgl$->
  void                    Return             l     %0.3
Prom 57:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     .disambiguateMethods, <0x55fa12dca8e0>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p58, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p59, e0.0
  prom-           %0.4  = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p60, e0.0
  prom-           %0.5  = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p63, e0.0
  prom-           %0.6  = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p64, e0.0
  prom-           %0.7  = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p65, e0.0
  prom-           %0.8  = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p66, e0.0
  prom-           %0.9  = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p67, e0.0
  val?            %0.10 = Call               !     %0.1(%0.2, %0.3, %0.4, %0.5, %0.6, %0.7, %0.8, %0.9) e0.0   <int$->
  void                    Return             l     %0.10
Prom 58:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    classes, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <vec->
  void                    Return             l     %0.3
Prom 59:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    select, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <int->
  void                    Return             l     %0.3
Prom 60:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, <0x55fa0ad53bd8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p61, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p62, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <str$+>
  void                    Return             l     %0.4
Prom 61:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fdef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 62:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    generic, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 63:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    methods, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 64:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    supersList, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 65:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fromGroup, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <lgl->
  void                    Return             l     %0.3
Prom 66:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    classDefs, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <vec->
  void                    Return             l     %0.3
Prom 67:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    verbose, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <lgl$->
  void                    Return             l     %0.3
Prom 68:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    condAction, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls->
  void                    Return             l     %0.3
Prom 69:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     rep.int, <0x55fa0cc892b8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p70, e0.0
  val?            %0.3  = Call               !     %0.1("ANY", %0.2) e0.0   <str->
  void                    Return             l     %0.3
Prom 70:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    nargs, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <int$->
  void                    Return             l     %0.3
Prom 71:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    defaultLabel, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 72:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     names, <0x55fa0ad54470>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p73, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <str->
  void                    Return             l     %0.3
Prom 73:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    methods, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 74:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     names, <0x55fa0ad54470>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p75, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <str->
  void                    Return             l     %0.3
Prom 75:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    methods, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 76:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     as.character, <0x55fa0ad61040>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p77, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <str$->
  void                    Return             l     %0.3
Prom 77:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    excluded, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 78:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    labels, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 79:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    groupGenerics, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <vec->
  void                    Return             l     %0.3
Prom 80:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    found, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <lgl->
  void                    Return             l     %0.3
Prom 81:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     length, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p82, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 82:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    methods, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 83:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     length, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p84, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 84:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    groupmethods, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 85:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    classes, e0.0
  val?            %0.2  = Force<wrapped>     !v    %0.1, e0.0   <(str|vec)+>
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <true>
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    i, e0.0
  val?            %2.1  = Force<value>       !v    %2.0, e0.0   <int$->
  val?            %2.2  = %2.1
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p86, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.2:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract2_1D        !v    %0.2, %3.1, e0.0   <str$->
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 86:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    i, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 87:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 88:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    cc, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 89:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    className, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 90:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    labels, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 91:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    allLabels, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str+>
  void                    Return             l     %0.3
Prom 92:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    classes, e0.0
  val?            %0.2  = Force<wrapped>     !v    %0.1, e0.0   <vec->
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <true>
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    i, e0.0
  val?            %2.1  = Force<value>       !v    %2.0, e0.0   <int$->
  val?            %2.2  = %2.1
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p93, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.2:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract2_1D        !v    %0.2, %3.1, e0.0   <str$->
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 93:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    i, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 94:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 95:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    cc, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 96:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    className, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 97:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, <0x55fa0ad53bd8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p98, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p99, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <vec+>
  void                    Return             l     %0.4
Prom 98:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    cc, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 99:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    contains, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 100:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    simpleOnly, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <lgl$->
  void                    Return             l     %0.3
Prom 101:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    labels, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 102:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    allLabels, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 103:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    i, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 104:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    cc, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 105:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    className, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 106:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, <0x55fa0ad53bd8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p107, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p108, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <vec+>
  void                    Return             l     %0.4
Prom 107:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    cc, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 108:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    contains, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 109:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    simpleOnly, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <lgl$->
  void                    Return             l     %0.3
Prom 110:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, <0x55fa0ad53bd8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p111, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p112, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <vec+>
  void                    Return             l     %0.4
Prom 111:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    def, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 112:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    contains, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 113:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    simpleOnly, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <lgl$->
  void                    Return             l     %0.3
Prom 114:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    classes, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <vec->
  void                    Return             l     %0.3
Prom 115:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    label, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 116:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    groupGenerics, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <vec->
  void                    Return             l     %0.3
Prom 117:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    label, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 118:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    direct, e0.0
  val?            %0.2  = Force<value>       !v    %0.1, e0.0   <vec$+>
  val?            %0.3  = Extract2_1D        !v    %0.2, 1L, e0.0   <cls>
  void                    Visible            v     
  void                    Return             l     %0.3
Prom 119:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    mtable, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 120:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     list, <0x55fa0ad685c0>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p121, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <vec$->
  void                    Return             l     %0.3
Prom 121:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fdef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 132:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    sig, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <(str|vec)>
  void                    Return             l     %0.3
Prom 136:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    contains, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 137:
BB0
  env             e0.0  = LdFunctionEnv            
  cls             %0.1  = MkCls                    .eligibleSuperClasses@Prom(1)16, e0.0
  cls             %0.2  = MkCls                    .eligibleSuperClasses@Prom(1)37, e0.0
  val?^ | miss    %0.3  = LdVar              eR    simpleOnly, e0.0
  void                    Visible            v     
  val?            %0.5  = Force<lazy>        !     %0.3, e0.0   <lgl$->
  lgl$#-          %0.6  = CheckTrueFalse     we    %0.5
  void                    Branch                   %0.6 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  void                    Nop                !     
  cls             %2.1  = %0.2
  goto BB3
BB4   <- [0]
  void                    Nop                !     
  cls             %4.1  = %0.1
  goto BB3
BB3   <- [4, 2]
  cls             %3.0  = Phi                      %4.1:BB4, %2.1:BB2
  cls             %3.1  = %3.0
  void                    Return             l     %3.1
Prom 138:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    sig, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <(str|vec)>
  void                    Return             l     %0.3
Prom 139:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     strsplit, <0x55fa0b09e588>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p140, e0.0
  val?            %0.3  = NamedCall          !     %0.1(%0.2, "#", fixed=true) e0.0   <vec->
  void                    Return             l     %0.3
Prom 140:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    sigs, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 141:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    n, e0.0
  val?            %0.2  = Force<wrapped>     !v    %0.1, e0.0   <int$->
  val?^ | miss    %0.3  = LdVar              eR    siglens, e0.0
  val?            %0.4  = Force<value>       !v    %0.3, e0.0   <int->
  lgl$#-          %0.5  = IsType                   %0.4 isA val+   <true>
  void                    Branch                   %0.5 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    short, e0.0
  val?            %2.1  = Force<value>       !v    %2.0, e0.0   <lgl->
  val?            %2.2  = %2.1
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p142, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.2:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract1_1D        !v    %0.4, %3.1, e0.0   <int->
  void                    Visible            v     
  val?            %3.4  = Sub                !     %0.2, %3.2, e0.0   <int->
  void                    Return             l     %3.4
Prom 142:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    short, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 143:
BB0
  env             e0.0  = LdFunctionEnv            
  cls             %0.1  = MkCls                    unknown--fromConstant@Prom(4)0, e0.0
  void                    Return             l     %0.1
Prom 144:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     character, <0x55fa0b4ed7e0>, e0.0
  val?            %0.2  = Call               !     %0.1(1L) e0.0   <str$->
  void                    Return             l     %0.2
Prom 145:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    sigs, e0.0
  val?            %0.2  = Force<wrapped>     !v    %0.1, e0.0   <str->
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <true>
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    short, e0.0
  val?            %2.1  = Force<value>       !v    %2.0, e0.0   <lgl->
  val?            %2.2  = %2.1
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, .findInheritedMethods[0x55fa0fbcee30]_p146, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.2:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract1_1D        !v    %0.2, %3.1, e0.0   <str->
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 146:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    short, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 147:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    suffix, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str->
  void                    Return             l     %0.3

│ .findInheritedMethods[0x55fa0fbcee30]                                        │
└──────────────────────────────────────────────────────────────────────────────┘
