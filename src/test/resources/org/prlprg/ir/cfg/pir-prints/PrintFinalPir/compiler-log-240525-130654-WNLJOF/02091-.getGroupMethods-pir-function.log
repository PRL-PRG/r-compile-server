
┌──────────────────────────────────────────────────────────────────────────────┐
│ .getGroupMethods[0x55fa17c5bb10]                                             │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch                                      │
│ Properties:                                                                  │
├────── Final PIR Version
.getGroupMethods[0x55fa17c5bb10]
BB0
  val?^           %0.0  = LdArg                    2
  val?^           %0.1  = LdArg                    1
  val?^           %0.2  = LdArg                    0
  val?^ | miss    %0.3  = LdVar              eR    list, <env 0x55fa0b35b378>
  lgl$#-          %0.4  = Identical                <blt list>, %0.3   <true>
  void                    Branch                   %0.4 -> BB79 (if true) | BB80 (if false)
BB79   <- [0]
  val?^ | miss    %79.0 = LdVar              eR    seq_along, <env 0x55fa0b35b378>
  lgl$#-          %79.1 = Identical                <blt seq_along>, %79.0   <true>
  void                    Branch                   %79.1 -> BB81 (if true) | BB82 (if false)
BB80   <- [0]
  void                    Nop                !     
  lgl$#-          %80.1 = %0.4
  dr              %80.2 = DeadBranchReached@0x55fa0e989890[Test#0]
  goto BB78
BB81   <- [79]
  env             e81.0 = MkEnv              l     labels=%0.2, generics=%0.1, found=%0.0, methods=list(), parent=<env 0x55fa0b35b378>, context 1
  val?            %81.1 = Force!<lazy>       !v    %0.1, e81.0   <vec->
  lgl$#-          %81.2 = IsType                   %81.1 isA val?-
  void                    Branch                   %81.2 -> BB83 (if true) | BB84 (if false)
BB82   <- [79]
  void                    Nop                !     
  lgl$#-          %82.1 = %79.1
  dr              %82.2 = DeadBranchReached@0x55fa0e989890[Test#1]
  goto BB78
BB78   <- [80, 82]
  val?^ | miss    %78.0 = Phi                      %80.1:BB80, %82.1:BB82
  val?^ | miss    %78.1 = %78.0
  dr              %78.2 = Phi                      %80.2:BB80, %82.2:BB82
  dr              %78.3 = %78.2
  env             e78.4 = (MkEnv)            l     labels=%0.2, generics=%0.1, found=%0.0, parent=<env 0x55fa0b35b378>, context 1
  fs              %78.5 = FrameState         R     0x55fa171a90d0+0: [], env=e78.4
  void                    Deopt              !v    %78.5, %78.3, %78.1
BB83   <- [81]
  val?-           %83.0 = CastType           d     dn %81.1   <vec->
  val?            %83.1 = CallBuiltin        !v    seq_along(%83.0) e81.0   <int->
  val?+           %83.2 = ToForSeq           e     %83.1
  int$-           %83.3 = Length                   %83.2
  int$-           %83.4 = Inc                      0L
  lgl$-           %83.5 = Lt                 d     %83.3, %83.4, elided   <false>
  lgl$#-          %83.6 = Identical                %83.5, true
  void                    Branch                   %83.6 -> BB86 (if true) | BB85 (if false)
BB84   <- [81]
  fs              %84.0 = FrameState         R     0x55fa171a90d0+155: [<blt seq_along>, %81.1], env=e81.0
  void                    Deopt              !v    %84.0, Typecheck@0x55fa0e989890[Type#2], %81.1   !
BB86   <- [83]
  fs              %86.0 = FrameState         R     0x55fa171a90d0+177: [%83.1], env=e81.0
  void                    Deopt              !v    %86.0, DeadBranchReached@0x55fa0e989890[Test#2], %83.6   !
BB85   <- [83]
  val?            %85.0 = Extract2_1D        wed   %83.2, %83.4, elided
  void                    StVar              lW    i, %85.0, e81.0
  val?^ | miss    %85.2 = LdVar              eR    generics, e81.0
  val?            %85.3 = Force!<wrapped>    !v    %85.2, e81.0   <vec->
  lgl$#-          %85.4 = IsType                   %85.3 isA val+   <true>
  lgl$#-          %85.5 = IsType                   %85.3 isA val?-
  void                    Branch                   %85.4 -> BB87 (if true) | BB88 (if false)
BB87   <- [85]
  val?^ | miss    %87.0 = LdVar              eR    i, e81.0
  lgl$#-          %87.1 = IsType                   %87.0 isA int$-
  void                    Branch                   %87.1 -> BB89 (if true) | BB90 (if false)
BB88   <- [85]
  void                    Nop                !     
  lgl$#-          %88.1 = %85.4
  dr              %88.2 = DeadBranchReached@0x55fa0e989890[Test#3]
  goto BB7
BB89   <- [87]
  int$-           %89.0 = CastType           d     dn %87.0
  void                    Branch                   %85.5 -> BB91 (if true) | BB92 (if false)
BB90   <- [87]
  void                    Nop                !     
  val?^ | miss    %90.1 = %87.0
  dr              %90.2 = Typecheck@0x55fa0e989890[Type#6]
  goto BB7
BB7   <- [88, 90, 92]
  val?^ | miss    %7.0  = Phi                      %88.1:BB88, %90.1:BB90, %92.1:BB92
  val?^ | miss    %7.1  = %7.0
  dr              %7.2  = Phi                      %88.2:BB88, %90.2:BB90, %92.2:BB92
  dr              %7.3  = %7.2
  fs              %7.4  = FrameState         R     0x55fa171a90d0+231: [%83.2, %83.3, %83.4, %85.3], env=e81.0
  void                    Deopt              !v    %7.4, %7.3, %7.1   !
BB91   <- [89]
  val?-           %91.0 = CastType           d     dn %85.3   <vec->
  val?            %91.1 = Extract2_1D        wed   %91.0, %89.0, elided   <cls>
  void                    StVar              lW    gen, %91.1, e81.0
  val?^ | miss    %91.3 = LdVar              eR    is, e81.0
  lgl$#-          %91.4 = Identical                %91.3, function(object, class2) <(rir::DispatchTable*|...
  void                    Branch                   %91.4 -> BB93 (if true) | BB94 (if false)
BB92   <- [89]
  void                    Nop                !     
  val?            %92.1 = %85.3
  dr              %92.2 = Typecheck@0x55fa0e989890[Type#4]
  goto BB7
BB93   <- [91]
  prom-           %93.0 = MkArg                    unboundValue, .getGroupMethods[0x55fa17c5bb10]_p0 (!refl), e81.0
  val?            %93.1 = Call               !v    function(object, class2) <(rir::DispatchTable*|...(%93.0, "genericFunction") e81.0   <lgl$->
  lgl$#-          %93.2 = IsType                   %93.1 isA lgl$-
  void                    Branch                   %93.2 -> BB95 (if true) | BB96 (if false)
BB94   <- [91]
  fs              %94.0 = FrameState         R     0x55fa171a90d0+297: [%83.2, %83.3, %83.4], env=e81.0
  void                    Deopt              !v    %94.0, CallTarget@0x55fa0e989890[Call#2], %91.3   !
BB95   <- [93]
  lgl$-           %95.0 = CastType           d     dn %93.1
  lgl$-           %95.1 = Not                d     %95.0, elided
  lgl$#-          %95.2 = CheckTrueFalse     e     %95.1
  void                    Branch                   %95.2 -> BB77 (if true) | BB13 (if false)
BB96   <- [93]
  void                    Nop                !     
  val?            %96.1 = %93.1
  dr              %96.2 = Typecheck@0x55fa0e989890[Type#9]
  goto BB11
BB77   <- [95]
  (cls|spec|blt)  %77.0 = LdFun              !v    stop, e81.0
  fs              %77.1 = FrameState         R     0x55fa171a90d0+356: [%83.2, %83.3, %83.4, %77.0], env=e81.0
  void                    Deopt              !v    %77.1, DeadCall@0x55fa0e989890[Call#3], %77.0   !
BB13   <- [95]
  val?^ | miss    %13.0 = LdVar              eR    .getMethodsTable, e81.0
  lgl$#-          %13.1 = Identical                %13.0, function(fdef, env=environment(fdef), check=TR|...
  void                    Branch                   %13.1 -> BB97 (if true) | BB98 (if false)
BB11   <- [96, 98]
  val?^ | miss    %11.0 = Phi                      %96.1:BB96, %98.1:BB98
  val?^ | miss    %11.1 = %11.0
  dr              %11.2 = Phi                      %96.2:BB96, %98.2:BB98
  dr              %11.3 = %11.2
  fs              %11.4 = FrameState         R     0x55fa171a90d0+334: [%83.2, %83.3, %83.4, %93.1], env=e81.0
  void                    Deopt              !v    %11.4, %11.3, %11.1   !
BB97   <- [13]
  prom-           %97.0 = MkArg                    unboundValue, .getGroupMethods[0x55fa17c5bb10]_p1, e81.0
  val?            %97.1 = StaticCall         !v    .getMethodsTable[0x55fa17d07f40](%97.0) e81.0   <env->
  void                    StVar              lW    table, %97.1, e81.0
  val?^ | miss    %97.3 = LdVar              eR    sort, e81.0
  lgl$#-          %97.4 = Identical                %97.3, function(x, decreasing=FALSE, ...) <(rir::Disp|...
  void                    Branch                   %97.4 -> BB99 (if true) | BB100 (if false)
BB98   <- [13]
  void                    Nop                !     
  val?^ | miss    %98.1 = %13.0
  dr              %98.2 = CallTarget@0x55fa0e989890[Call#7]
  goto BB11
BB99   <- [97]
  prom-           %99.0 = MkArg                    unboundValue, .getGroupMethods[0x55fa17c5bb10]_p2, e81.0
  val?            %99.1 = StaticCall         !v    sort[0x55fa11e6bf60](%99.0) { 0 } e81.0   <str->
  void                    StVar              lW    allMethods, %99.1, e81.0
  (cls|spec|blt)  %99.3 = LdFun              !v    rep, <0x55fa0ad689b0>, e81.0
  prom-           %99.4 = MkArg                    unboundValue, .getGroupMethods[0x55fa17c5bb10]_p4, e81.0
  val?            %99.5 = Call               !v    %99.3(false, %99.4) e81.0   <lgl->
  void                    StVar              lW    newFound, %99.5, e81.0
  val?^ | miss    %99.7 = LdVar              eR    %in%, e81.0
  lgl$#-          %99.8 = Identical                %99.7, function(x, table) <(rir::DispatchTable*)0x55f|...
  void                    Branch                   %99.8 -> BB101 (if true) | BB102 (if false)
BB100   <- [97]
  fs              %100.0 = FrameState         R     0x55fa171a90d0+443: [%83.2, %83.3, %83.4], env=e81.0
  void                    Deopt              !v    %100.0, CallTarget@0x55fa0e989890[Call#8], %97.3   !
BB101   <- [99]
  prom-           %101.0 = MkArg                    unboundValue, .getGroupMethods[0x55fa17c5bb10]_p6, e81.0
  prom-           %101.1 = MkArg                    unboundValue, .getGroupMethods[0x55fa17c5bb10]_p8, e81.0
  val?^           %101.2 = CastType                 up %101.1
  val?^           %101.3 = CastType                 up %101.0
  env             e101.4 = MkEnv              l     x=%101.3, table=%101.2, parent=R_BaseNamespace, context 0
  prom-           %101.5 = MkArg                    unboundValue, .getGroupMethods[0x55fa17c5bb10]_p24, e101.4
  prom-           %101.6 = MkArg                    unboundValue, .getGroupMethods[0x55fa17c5bb10]_p25, e101.4
  val?^           %101.7 = CastType                 up %101.6
  val?^           %101.8 = CastType                 up %101.5
  val?^ | miss    %101.9 = LdVar              eR    labels, e81.0
  val?            %101.10 = Force!<lazy>       !v    %101.9, e81.0   <str->
  lgl$#-          %101.11 = IsType                   %101.10 isA val+   <true>
  env             e101.12 = (MkEnv)            l     x=%101.8, table=%101.7, nomatch=0L, incomparables(miss)=nil, parent=R_BaseNamespace, context -1
  void                    Branch                   %101.11 -> BB74 (if true) | BB18 (if false)
BB102   <- [99]
  fs              %102.0 = FrameState         R     0x55fa171a90d0+540: [%83.2, %83.3, %83.4], env=e81.0
  void                    Deopt              !v    %102.0, CallTarget@0x55fa0e989890[Call#12], %99.7   !
BB74   <- [101]
  val?^ | miss    %74.0 = LdVar              eR    found, e81.0
  val?            %74.1 = Force!<wrapped>    !v    %74.0, e81.0   <lgl->
  lgl$#-          %74.2 = IsType                   %74.1 isA lgl-
  void                    Branch                   %74.2 -> BB103 (if true) | BB104 (if false)
BB18   <- [101]
  prom-           %18.0 = MkArg                    unboundValue, .getGroupMethods[0x55fa17c5bb10]_p7, e81.0
  prom-           %18.1 = %18.0
  goto BB19
BB103   <- [74]
  lgl-            %103.0 = CastType           d     dn %74.1
  lgl-            %103.1 = Not                wed   %103.0, elided
  lgl-            %103.2 = %103.1
  goto BB19
BB104   <- [74]
  fs              %104.0 = FrameState         R     0x55fa171a90d0+577: [%83.2, %83.3, %83.4], env=e81.0
  fs              %104.1 = FrameState         R     0x55fa0b381320+54: [], env=e101.4, next=%104.0
  fs              %104.2 = FrameState         R     0x55fa0b568d40+9: [], env=e101.12, next=%104.1
  fs              %104.3 = FrameState         R     0x55fa0b381bc0+5(pr): [], env=e101.4, next=%104.2
  fs              %104.4 = FrameState         R     0x55fa12ca9680+46(pr): [%101.10, %74.1], env=e81.0, next=%104.3
  void                    Deopt              !v    %104.4, Typecheck@0x55fa0e989890[Type#24], %74.1   !
BB19   <- [18, 103]
  (lgl|prom)-     %19.0 = Phi                      %103.2:BB103, %18.1:BB18
  (lgl|prom)-     %19.1 = %19.0
  lgl$#-          %19.2 = IsType                   %101.10 isA val?-
  void                    Branch                   %19.2 -> BB105 (if true) | BB106 (if false)
BB105   <- [19]
  val?-           %105.0 = CastType           d     dn %101.10   <str->
  val?            %105.1 = Extract1_1D        wed   %105.0, %19.1, elided   <str->
  prom-           %105.2 = MkArg                    %105.1, .getGroupMethods[0x55fa17c5bb10]_p6 (!refl), e81.0
  val?~           %105.3 = CastType                 up %105.2
  void                    StArg              lW    x, %105.3, e101.4
  prom-           %105.5 = MkArg                    %105.1, .getGroupMethods[0x55fa17c5bb10]_p24 (!refl), e101.4
  val?~           %105.6 = CastType                 up %105.5
  void                    StArg              lWd   x, %105.6, e101.12
  lgl$#-          %105.8 = IsEnvStub          R     , e101.12
  void                    Branch                   %105.8 -> BB107 (if true) | BB108 (if false)
BB106   <- [19]
  fs              %106.0 = FrameState         R     0x55fa171a90d0+577: [%83.2, %83.3, %83.4], env=e81.0
  fs              %106.1 = FrameState         R     0x55fa0b381320+54: [], env=e101.4, next=%106.0
  fs              %106.2 = FrameState         R     0x55fa0b568d40+9: [], env=e101.12, next=%106.1
  fs              %106.3 = FrameState         R     0x55fa0b381bc0+5(pr): [], env=e101.4, next=%106.2
  fs              %106.4 = FrameState         R     0x55fa12ca9680+52(pr): [%101.10, %19.1], env=e81.0, next=%106.3
  void                    Deopt              !v    %106.4, Typecheck@0x55fa0e989890[Type#22], %101.10   !
BB107   <- [105]
  val?            %107.0 = Force!<lazy>       !vL   %101.7, e101.12   <val?+>
  lgl$#-          %107.1 = IsType                   %107.0 isA val?+
  lgl$#-          %107.2 = IsEnvStub          R     , e101.12
  void                    Branch                   %107.2 -> BB109 (if true) | BB110 (if false)
BB108   <- [105]
  fs              %108.0 = FrameState         R     0x55fa171a90d0+577: [%83.2, %83.3, %83.4], env=e81.0
  fs              %108.1 = FrameState         R     0x55fa0b381320+54: [], env=e101.4, next=%108.0
  fs              %108.2 = FrameState         R     0x55fa0b568d40+9: [%105.1], env=e101.12, next=%108.1
  void                    Deopt              !v    %108.2, EnvStubMaterialized@0x55fa0b5bbcb0[Call#unknown], e101.12   !
BB109   <- [107]
  lgl$#-          %109.0 = IsType                   %105.1 isA val?+
  void                    Branch                   %109.0 -> BB111 (if true) | BB112 (if false)
BB110   <- [107]
  void                    Nop                !     
  env             e110.1 = e101.12
  dr              %110.2 = EnvStubMaterialized@0x55fa0b5bbcb0[Call#unknown]
  goto BB24
BB111   <- [109]
  val?+           %111.0 = CastType           d     dn %105.1   <(int|str)+>
  void                    Branch                   %107.1 -> BB113 (if true) | BB114 (if false)
BB112   <- [109]
  void                    Nop                !     
  val?            %112.1 = %105.1
  dr              %112.2 = Typecheck@0x55fa0b5bbcb0[Type#0]
  goto BB24
BB24   <- [110, 112, 114]
  val?^ | miss    %24.0 = Phi                      e110.1:BB110, %112.1:BB112, %114.1:BB114
  val?^ | miss    %24.1 = %24.0
  dr              %24.2 = Phi                      %110.2:BB110, %112.2:BB112, %114.2:BB114
  dr              %24.3 = %24.2
  fs              %24.4 = FrameState         R     0x55fa171a90d0+577: [%83.2, %83.3, %83.4], env=e81.0
  fs              %24.5 = FrameState         R     0x55fa0b381320+54: [], env=e101.4, next=%24.4
  fs              %24.6 = FrameState         R     0x55fa0b568d40+23: [%105.1, %107.0], env=e101.12, next=%24.5
  void                    Deopt              !v    %24.6, %24.3, %24.1   !
BB113   <- [111]
  val?+           %113.0 = CastType           d     dn %107.0
  val+            %113.1 = CallSafeBuiltin    wed   match(%111.0, %113.0, 0L, nil)    <int->
  lgl$#-          %113.2 = IsType                   %113.1 isA int-
  void                    Branch                   %113.2 -> BB115 (if true) | BB116 (if false)
BB114   <- [111]
  void                    Nop                !     
  val?            %114.1 = %107.0
  dr              %114.2 = Typecheck@0x55fa0b5bbcb0[Type#1]
  goto BB24
BB115   <- [113]
  int-            %115.0 = CastType           d     dn %113.1
  lgl-            %115.1 = Gt                 wed   %115.0, 0L, elided   <lgl->
  val?^ | miss    %115.2 = LdVar              eR    newFound !upd, e81.0
  lgl$#-          %115.3 = IsType                   %115.2 isA lgl-
  void                    Branch                   %115.3 -> BB117 (if true) | BB118 (if false)
BB116   <- [113]
  fs              %116.0 = FrameState         R     0x55fa171a90d0+577: [%83.2, %83.3, %83.4], env=e81.0
  fs              %116.1 = FrameState         R     0x55fa0b381320+54: [], env=e101.4, next=%116.0
  fs              %116.2 = FrameState         R     0x55fa0b568d40+69: [%113.1], env=e101.12, next=%116.1
  void                    Deopt              !v    %116.2, Typecheck@0x55fa0c3b3688[Type#2], %113.1   !
BB117   <- [115]
  lgl-            %117.0 = CastType           d     dn %115.2
  val?^ | miss    %117.1 = LdVar              eR    found, e81.0
  lgl$#-          %117.2 = IsType                   %117.1 isA lgl~-
  void                    Branch                   %117.2 -> BB119 (if true) | BB120 (if false)
BB118   <- [115]
  void                    Nop                !     
  val?^ | miss    %118.1 = %115.2
  dr              %118.2 = Typecheck@0x55fa0e989890[Type#28]
  goto BB28
BB119   <- [117]
  lgl~-           %119.0 = CastType           d     dn %117.1
  lgl-            %119.1 = Force!<wrapped>          %119.0,    <lgl->
  lgl-            %119.2 = Not                wed   %119.1, elided
  lgl-            %119.3 = Subassign1_1D      wed   %115.1, %117.0, %119.2, elided
  void                    StVar              lW    newFound, %119.3, e81.0
  val?^ | miss    %119.5 = LdVar              eR    |, e81.0
  lgl$#-          %119.6 = Identical                <blt |>, %119.5   <true>
  void                    Branch                   %119.6 -> BB121 (if true) | BB122 (if false)
BB120   <- [117]
  void                    Nop                !     
  val?^ | miss    %120.1 = %117.1
  dr              %120.2 = Typecheck@0x55fa0e989890[Type#29]
  goto BB28
BB28   <- [118, 120]
  val?^ | miss    %28.0 = Phi                      %118.1:BB118, %120.1:BB120
  val?^ | miss    %28.1 = %28.0
  dr              %28.2 = Phi                      %118.2:BB118, %120.2:BB120
  dr              %28.3 = %28.2
  fs              %28.4 = FrameState         R     0x55fa171a90d0+577: [%83.2, %83.3, %83.4], env=e81.0
  fs              %28.5 = FrameState         R     0x55fa0b381320+66: [%115.1], env=e101.4, next=%28.4
  void                    Deopt              !v    %28.5, %28.3, %28.1   !
BB121   <- [119]
  val+            %121.0 = CallSafeBuiltin    wed   |(%119.1, %119.3)    <lgl->
  void                    StVar              lW    found, %121.0, e81.0
  val?^ | miss    %121.2 = LdVar              eR    mget, e81.0
  lgl$#-          %121.3 = Identical                %121.2, function(x, envir=as.environment(-(1L)), mode=|...
  void                    Branch                   %121.3 -> BB123 (if true) | BB124 (if false)
BB122   <- [119]
  fs              %122.0 = FrameState         R     0x55fa171a90d0+621: [%83.2, %83.3, %83.4], env=e81.0
  void                    Deopt              !v    %122.0, DeadBranchReached@0x55fa0e989890[Test#5], %119.6   !
BB123   <- [121]
  prom-           %123.0 = MkArg                    unboundValue, .getGroupMethods[0x55fa17c5bb10]_p9, e81.0
  prom-           %123.1 = MkArg                    unboundValue, .getGroupMethods[0x55fa17c5bb10]_p11, e81.0
  ct              %123.2 = PushContext        lCL   %123.0, %123.1, mget([(labels, newFound), table), function(x, envir=as.environment(-(1L)), mode=|..., e81.0
  val?^           %123.3 = CastType                 up %123.1
  val?^           %123.4 = CastType                 up %123.0
  env             e123.5 = MkEnv              l     x=%123.4, envir=%123.3, mode(miss)="any", ifnotfound(miss)=missingArg, inherits(miss)=false, parent=R_BaseNamespace, context 1
  cls             %123.6 = MkCls                    mget@133, e123.5
  val?            %123.7 = Force!<lazy>       !vL   %123.4, e123.5   <str+>
  val?            %123.8 = Force!<lazy>       !vL   %123.3, e123.5   <env->
  val+            %123.9 = CallSafeBuiltin    wed   list(%123.6)    <vec$->
  val?            %123.10 = CallBuiltin        !v    mget(%123.7, %123.8, "any", %123.9, false) e123.5
  val?            %123.11 = PopContext         C     %123.10, %123.2   <vec+>
  val?^ | miss    %123.12 = LdVar              eR    methods !upd, e81.0
  val?            %123.13 = Force!<value>      !v    %123.12, e81.0   <vec->
  val?^ | miss    %123.14 = LdVar              eR    labels, e81.0
  val?            %123.15 = Force!<wrapped>    !v    %123.14, e81.0   <str->
  lgl$#-          %123.16 = IsType                   %123.15 isA val+   <true>
  lgl$#-          %123.17 = IsType                   %123.15 isA val?-
  void                    Branch                   %123.16 -> BB125 (if true) | BB126 (if false)
BB124   <- [121]
  fs              %124.0 = FrameState         R     0x55fa171a90d0+745: [%83.2, %83.3, %83.4], env=e81.0
  void                    Deopt              !v    %124.0, CallTarget@0x55fa0e989890[Call#14], %121.2   !
BB125   <- [123]
  val?^ | miss    %125.0 = LdVar              eR    newFound, e81.0
  lgl$#-          %125.1 = IsType                   %125.0 isA lgl-
  void                    Branch                   %125.1 -> BB127 (if true) | BB128 (if false)
BB126   <- [123]
  void                    Nop                !     
  lgl$#-          %126.1 = %123.16
  dr              %126.2 = DeadBranchReached@0x55fa0e989890[Test#7]
  goto BB34
BB127   <- [125]
  lgl-            %127.0 = CastType           d     dn %125.0
  void                    Branch                   %123.17 -> BB129 (if true) | BB130 (if false)
BB128   <- [125]
  void                    Nop                !     
  val?^ | miss    %128.1 = %125.0
  dr              %128.2 = Typecheck@0x55fa0e989890[Type#44]
  goto BB34
BB34   <- [126, 128, 130]
  val?^ | miss    %34.0 = Phi                      %126.1:BB126, %128.1:BB128, %130.1:BB130
  val?^ | miss    %34.1 = %34.0
  dr              %34.2 = Phi                      %126.2:BB126, %128.2:BB128, %130.2:BB130
  dr              %34.3 = %34.2
  fs              %34.4 = FrameState         R     0x55fa171a90d0+810: [%83.2, %83.3, %83.4, %123.11, %123.13, %123.15], env=e81.0
  void                    Deopt              !v    %34.4, %34.3, %34.1   !
BB129   <- [127]
  val?-           %129.0 = CastType           d     dn %123.15   <str->
  val?            %129.1 = Extract1_1D        wed   %129.0, %127.0, elided   <str->
  lgl$#-          %129.2 = IsType                   %129.1 isA val?-
  lgl$#-          %129.3 = IsType                   %123.11 isA val?+
  void                    Branch                   %129.3 -> BB131 (if true) | BB132 (if false)
BB130   <- [127]
  void                    Nop                !     
  val?            %130.1 = %123.15
  dr              %130.2 = Typecheck@0x55fa0e989890[Type#42]
  goto BB34
BB131   <- [129]
  val?+           %131.0 = CastType           d     dn %123.11   <vec+>
  lgl$#-          %131.1 = IsType                   %123.13 isA val?-
  void                    Branch                   %131.1 -> BB133 (if true) | BB134 (if false)
BB132   <- [129]
  void                    Nop                !     
  val?            %132.1 = %123.11
  dr              %132.2 = Typecheck@0x55fa0e989890[Type#40]
  goto BB36
BB133   <- [131]
  val?-           %133.0 = CastType           d     dn %123.13   <vec->
  void                    Branch                   %129.2 -> BB135 (if true) | BB136 (if false)
BB134   <- [131]
  void                    Nop                !     
  val?            %134.1 = %123.13
  dr              %134.2 = Typecheck@0x55fa0e989890[Type#41]
  goto BB36
BB36   <- [132, 134, 136]
  val?^ | miss    %36.0 = Phi                      %132.1:BB132, %134.1:BB134, %136.1:BB136
  val?^ | miss    %36.1 = %36.0
  dr              %36.2 = Phi                      %132.2:BB132, %134.2:BB134, %136.2:BB136
  dr              %36.3 = %36.2
  fs              %36.4 = FrameState         R     0x55fa171a90d0+861: [%83.2, %83.3, %83.4, %123.11, %123.13, %129.1], env=e81.0
  void                    Deopt              !v    %36.4, %36.3, %36.1   !
BB135   <- [133]
  val?-           %135.0 = CastType           d     dn %129.1   <str->
  val?+           %135.1 = Subassign1_1D      wed   %131.0, %133.0, %135.0, elided
  void                    StVar              lW    methods, %135.1, e81.0
  val?+           %135.3 = %135.1
  int$-           %135.4 = %83.4
  goto BB38
BB136   <- [133]
  void                    Nop                !     
  val?            %136.1 = %129.1
  dr              %136.2 = Typecheck@0x55fa0e989890[Type#45]
  goto BB36
BB38   <- [135, 185]
  val?+           %38.0 = Phi                      %135.3:BB135, %185.3:BB185
  val?+           %38.1 = %38.0
  int$-           %38.2 = Phi                      %135.4:BB135, %185.4:BB185
  int$-           %38.3 = %38.2
  int$-           %38.4 = Inc                      %38.3
  lgl$-           %38.5 = Lt                 d     %83.3, %38.4, elided
  lgl$#-          %38.6 = Identical                %38.5, true
  void                    Branch                   %38.6 -> BB73 (if true) | BB39 (if false)
BB73   <- [38]
  val+            %73.0 = ChkMissing         e     %38.1   <vec+>
  void                    Visible            v     
  void                    Return             l     %73.0
BB39   <- [38]
  val?            %39.0 = Extract2_1D        wed   %83.2, %38.4, elided
  void                    StVar              lW    i, %39.0, e81.0
  val?^ | miss    %39.2 = LdVar              eR    generics, e81.0
  val?            %39.3 = Force!<wrapped>    !v    %39.2, e81.0   <vec->
  lgl$#-          %39.4 = IsType                   %39.3 isA val+   <true>
  lgl$#-          %39.5 = IsType                   %39.3 isA val?-
  void                    Branch                   %39.4 -> BB137 (if true) | BB138 (if false)
BB137   <- [39]
  val?^ | miss    %137.0 = LdVar              eR    i, e81.0
  lgl$#-          %137.1 = IsType                   %137.0 isA int$-
  void                    Branch                   %137.1 -> BB139 (if true) | BB140 (if false)
BB138   <- [39]
  void                    Nop                !     
  lgl$#-          %138.1 = %39.4
  dr              %138.2 = DeadBranchReached@0x55fa0e989890[Test#8]
  goto BB40
BB139   <- [137]
  int$-           %139.0 = CastType           d     dn %137.0
  void                    Branch                   %39.5 -> BB141 (if true) | BB142 (if false)
BB140   <- [137]
  void                    Nop                !     
  val?^ | miss    %140.1 = %137.0
  dr              %140.2 = Typecheck@0x55fa0e989890[Type#48]
  goto BB40
BB40   <- [138, 140, 142]
  val?^ | miss    %40.0 = Phi                      %138.1:BB138, %140.1:BB140, %142.1:BB142
  val?^ | miss    %40.1 = %40.0
  dr              %40.2 = Phi                      %138.2:BB138, %140.2:BB140, %142.2:BB142
  dr              %40.3 = %40.2
  fs              %40.4 = FrameState         R     0x55fa171a90d0+915: [%83.2, %83.3, %38.4, %39.3], env=e81.0
  void                    Deopt              !v    %40.4, %40.3, %40.1   !
BB141   <- [139]
  val?-           %141.0 = CastType           d     dn %39.3   <vec->
  val?            %141.1 = Extract2_1D        wed   %141.0, %139.0, elided   <cls>
  void                    StVar              lW    gen, %141.1, e81.0
  val?^ | miss    %141.3 = LdVar              eR    is, e81.0
  lgl$#-          %141.4 = Identical                %141.3, function(object, class2) <(rir::DispatchTable*|...
  void                    Branch                   %141.4 -> BB143 (if true) | BB144 (if false)
BB142   <- [139]
  void                    Nop                !     
  val?            %142.1 = %39.3
  dr              %142.2 = Typecheck@0x55fa0e989890[Type#46]
  goto BB40
BB143   <- [141]
  prom-           %143.0 = MkArg                    unboundValue, .getGroupMethods[0x55fa17c5bb10]_p12 (!refl), e81.0
  val?            %143.1 = Call               !v    function(object, class2) <(rir::DispatchTable*|...(%143.0, "genericFunction") e81.0   <lgl$->
  lgl$#-          %143.2 = IsType                   %143.1 isA lgl$-
  void                    Branch                   %143.2 -> BB145 (if true) | BB146 (if false)
BB144   <- [141]
  fs              %144.0 = FrameState         R     0x55fa171a90d0+981: [%83.2, %83.3, %38.4], env=e81.0
  void                    Deopt              !v    %144.0, CallTarget@0x55fa0e989890[Call#15], %141.3   !
BB145   <- [143]
  lgl$-           %145.0 = CastType           d     dn %143.1
  lgl$-           %145.1 = Not                d     %145.0, elided
  lgl$#-          %145.2 = CheckTrueFalse     e     %145.1
  void                    Branch                   %145.2 -> BB72 (if true) | BB46 (if false)
BB146   <- [143]
  void                    Nop                !     
  val?            %146.1 = %143.1
  dr              %146.2 = Typecheck@0x55fa0e989890[Type#51]
  goto BB44
BB72   <- [145]
  (cls|spec|blt)  %72.0 = LdFun              !v    stop, e81.0
  fs              %72.1 = FrameState         R     0x55fa171a90d0+1040: [%83.2, %83.3, %38.4, %72.0], env=e81.0
  void                    Deopt              !v    %72.1, DeadCall@0x55fa0e989890[Call#16], %72.0   !
BB46   <- [145]
  val?^ | miss    %46.0 = LdVar              eR    .getMethodsTable, e81.0
  lgl$#-          %46.1 = Identical                %46.0, function(fdef, env=environment(fdef), check=TR|...
  void                    Branch                   %46.1 -> BB147 (if true) | BB148 (if false)
BB44   <- [146, 148]
  val?^ | miss    %44.0 = Phi                      %146.1:BB146, %148.1:BB148
  val?^ | miss    %44.1 = %44.0
  dr              %44.2 = Phi                      %146.2:BB146, %148.2:BB148
  dr              %44.3 = %44.2
  fs              %44.4 = FrameState         R     0x55fa171a90d0+1018: [%83.2, %83.3, %38.4, %143.1], env=e81.0
  void                    Deopt              !v    %44.4, %44.3, %44.1   !
BB147   <- [46]
  prom-           %147.0 = MkArg                    unboundValue, .getGroupMethods[0x55fa17c5bb10]_p13, e81.0
  val?            %147.1 = StaticCall         !v    .getMethodsTable[0x55fa17d07f40](%147.0) e81.0   <env->
  void                    StVar              lW    table, %147.1, e81.0
  val?^ | miss    %147.3 = LdVar              eR    sort, e81.0
  lgl$#-          %147.4 = Identical                %147.3, function(x, decreasing=FALSE, ...) <(rir::Disp|...
  void                    Branch                   %147.4 -> BB149 (if true) | BB150 (if false)
BB148   <- [46]
  void                    Nop                !     
  val?^ | miss    %148.1 = %46.0
  dr              %148.2 = CallTarget@0x55fa0e989890[Call#20]
  goto BB44
BB149   <- [147]
  prom-           %149.0 = MkArg                    unboundValue, .getGroupMethods[0x55fa17c5bb10]_p14, e81.0
  val?            %149.1 = StaticCall         !v    sort[0x55fa11e6bf60](%149.0) { 0 } e81.0   <str->
  void                    StVar              lW    allMethods, %149.1, e81.0
  (cls|spec|blt)  %149.3 = LdFun              !v    rep, <0x55fa0ad689b0>, e81.0
  prom-           %149.4 = MkArg                    unboundValue, .getGroupMethods[0x55fa17c5bb10]_p16, e81.0
  val?            %149.5 = Call               !v    %149.3(false, %149.4) e81.0   <lgl->
  void                    StVar              lW    newFound, %149.5, e81.0
  val?^ | miss    %149.7 = LdVar              eR    %in%, e81.0
  lgl$#-          %149.8 = Identical                %149.7, function(x, table) <(rir::DispatchTable*)0x55f|...
  void                    Branch                   %149.8 -> BB151 (if true) | BB152 (if false)
BB150   <- [147]
  fs              %150.0 = FrameState         R     0x55fa171a90d0+1127: [%83.2, %83.3, %38.4], env=e81.0
  void                    Deopt              !v    %150.0, CallTarget@0x55fa0e989890[Call#21], %147.3   !
BB151   <- [149]
  prom-           %151.0 = MkArg                    unboundValue, .getGroupMethods[0x55fa17c5bb10]_p18, e81.0
  prom-           %151.1 = MkArg                    unboundValue, .getGroupMethods[0x55fa17c5bb10]_p20, e81.0
  val?^           %151.2 = CastType                 up %151.1
  val?^           %151.3 = CastType                 up %151.0
  env             e151.4 = MkEnv              l     x=%151.3, table=%151.2, parent=R_BaseNamespace, context 0
  val?^ | miss    %151.5 = LdVar              eR    match, e151.4
  lgl$#-          %151.6 = Identical                %151.5, function(x, table, nomatch=NA, incomparables=N|...
  void                    Branch                   %151.6 -> BB153 (if true) | BB154 (if false)
BB152   <- [149]
  void                    Nop                !     
  val?^ | miss    %152.1 = %149.7
  dr              %152.2 = CallTarget@0x55fa0e989890[Call#25]
  goto BB49
BB153   <- [151]
  prom-           %153.0 = MkArg                    unboundValue, .getGroupMethods[0x55fa17c5bb10]_p29, e151.4
  prom-           %153.1 = MkArg                    unboundValue, .getGroupMethods[0x55fa17c5bb10]_p30, e151.4
  val?^           %153.2 = CastType                 up %153.1
  val?^           %153.3 = CastType                 up %153.0
  env             e153.4 = (MkEnv)            l     x=%153.3, table=%153.2, nomatch=0L, incomparables(miss)=nil, parent=R_BaseNamespace, context -1
  val?            %153.5 = Force!<lazy>       !vL   %151.3, e153.4   <(int|str)+>
  prom-           %153.6 = MkArg                    %153.5, .getGroupMethods[0x55fa17c5bb10]_p29 (!refl), e151.4
  val?~           %153.7 = CastType                 up %153.6
  void                    StArg              lWd   x, %153.7, e153.4
  lgl$#-          %153.9 = IsEnvStub          R     , e153.4
  void                    Branch                   %153.9 -> BB155 (if true) | BB156 (if false)
BB154   <- [151]
  void                    Nop                !     
  val?^ | miss    %154.1 = %151.5
  dr              %154.2 = CallTarget@0x55fa0c3b3688[Call#0]
  goto BB49
BB49   <- [152, 154]
  val?^ | miss    %49.0 = Phi                      %152.1:BB152, %154.1:BB154
  val?^ | miss    %49.1 = %49.0
  dr              %49.2 = Phi                      %152.2:BB152, %154.2:BB154
  dr              %49.3 = %49.2
  fs              %49.4 = FrameState         R     0x55fa171a90d0+1224: [%83.2, %83.3, %38.4], env=e81.0
  void                    Deopt              !v    %49.4, %49.3, %49.1   !
BB155   <- [153]
  val?            %155.0 = Force!<lazy>       !vL   %153.2, e153.4   <val?+>
  lgl$#-          %155.1 = IsType                   %155.0 isA val?+
  lgl$#-          %155.2 = IsEnvStub          R     , e153.4
  void                    Branch                   %155.2 -> BB157 (if true) | BB158 (if false)
BB156   <- [153]
  fs              %156.0 = FrameState         R     0x55fa171a90d0+1261: [%83.2, %83.3, %38.4], env=e81.0
  fs              %156.1 = FrameState         R     0x55fa0b381320+54: [], env=e151.4, next=%156.0
  fs              %156.2 = FrameState         R     0x55fa0b568d40+9: [%153.5], env=e153.4, next=%156.1
  void                    Deopt              !v    %156.2, EnvStubMaterialized@0x55fa0b5bbcb0[Call#unknown], e153.4   !
BB157   <- [155]
  lgl$#-          %157.0 = IsType                   %153.5 isA val?+
  void                    Branch                   %157.0 -> BB159 (if true) | BB160 (if false)
BB158   <- [155]
  void                    Nop                !     
  env             e158.1 = e153.4
  dr              %158.2 = EnvStubMaterialized@0x55fa0b5bbcb0[Call#unknown]
  goto BB53
BB159   <- [157]
  val?+           %159.0 = CastType           d     dn %153.5   <(int|str)+>
  void                    Branch                   %155.1 -> BB161 (if true) | BB162 (if false)
BB160   <- [157]
  void                    Nop                !     
  val?            %160.1 = %153.5
  dr              %160.2 = Typecheck@0x55fa0b5bbcb0[Type#0]
  goto BB53
BB53   <- [158, 160, 162]
  val?^ | miss    %53.0 = Phi                      e158.1:BB158, %160.1:BB160, %162.1:BB162
  val?^ | miss    %53.1 = %53.0
  dr              %53.2 = Phi                      %158.2:BB158, %160.2:BB160, %162.2:BB162
  dr              %53.3 = %53.2
  fs              %53.4 = FrameState         R     0x55fa171a90d0+1261: [%83.2, %83.3, %38.4], env=e81.0
  fs              %53.5 = FrameState         R     0x55fa0b381320+54: [], env=e151.4, next=%53.4
  fs              %53.6 = FrameState         R     0x55fa0b568d40+23: [%153.5, %155.0], env=e153.4, next=%53.5
  void                    Deopt              !v    %53.6, %53.3, %53.1   !
BB161   <- [159]
  val?+           %161.0 = CastType           d     dn %155.0
  val+            %161.1 = CallSafeBuiltin    wed   match(%159.0, %161.0, 0L, nil)    <int->
  lgl$#-          %161.2 = IsType                   %161.1 isA int-
  void                    Branch                   %161.2 -> BB163 (if true) | BB164 (if false)
BB162   <- [159]
  void                    Nop                !     
  val?            %162.1 = %155.0
  dr              %162.2 = Typecheck@0x55fa0b5bbcb0[Type#1]
  goto BB53
BB163   <- [161]
  int-            %163.0 = CastType           d     dn %161.1
  lgl-            %163.1 = Gt                 wed   %163.0, 0L, elided   <lgl->
  val?^ | miss    %163.2 = LdVar              eR    newFound !upd, e81.0
  lgl$#-          %163.3 = IsType                   %163.2 isA lgl-
  void                    Branch                   %163.3 -> BB165 (if true) | BB166 (if false)
BB164   <- [161]
  fs              %164.0 = FrameState         R     0x55fa171a90d0+1261: [%83.2, %83.3, %38.4], env=e81.0
  fs              %164.1 = FrameState         R     0x55fa0b381320+54: [], env=e151.4, next=%164.0
  fs              %164.2 = FrameState         R     0x55fa0b568d40+69: [%161.1], env=e153.4, next=%164.1
  void                    Deopt              !v    %164.2, Typecheck@0x55fa0c3b3688[Type#2], %161.1   !
BB165   <- [163]
  lgl-            %165.0 = CastType           d     dn %163.2
  val?^ | miss    %165.1 = LdVar              eR    found, e81.0
  lgl$#-          %165.2 = IsType                   %165.1 isA lgl-
  void                    Branch                   %165.2 -> BB167 (if true) | BB168 (if false)
BB166   <- [163]
  void                    Nop                !     
  val?^ | miss    %166.1 = %163.2
  dr              %166.2 = Typecheck@0x55fa0e989890[Type#70]
  goto BB57
BB167   <- [165]
  lgl-            %167.0 = CastType           d     dn %165.1
  lgl-            %167.1 = Not                wed   %167.0, elided
  lgl-            %167.2 = Subassign1_1D      wed   %163.1, %165.0, %167.1, elided
  void                    StVar              lW    newFound, %167.2, e81.0
  val?^ | miss    %167.4 = LdVar              eR    |, e81.0
  lgl$#-          %167.5 = Identical                <blt |>, %167.4   <true>
  void                    Branch                   %167.5 -> BB169 (if true) | BB170 (if false)
BB168   <- [165]
  void                    Nop                !     
  val?^ | miss    %168.1 = %165.1
  dr              %168.2 = Typecheck@0x55fa0e989890[Type#71]
  goto BB57
BB57   <- [166, 168]
  val?^ | miss    %57.0 = Phi                      %166.1:BB166, %168.1:BB168
  val?^ | miss    %57.1 = %57.0
  dr              %57.2 = Phi                      %166.2:BB166, %168.2:BB168
  dr              %57.3 = %57.2
  fs              %57.4 = FrameState         R     0x55fa171a90d0+1261: [%83.2, %83.3, %38.4], env=e81.0
  fs              %57.5 = FrameState         R     0x55fa0b381320+66: [%163.1], env=e151.4, next=%57.4
  void                    Deopt              !v    %57.5, %57.3, %57.1   !
BB169   <- [167]
  val+            %169.0 = CallSafeBuiltin    wed   |(%167.0, %167.2)    <lgl->
  void                    StVar              lW    found, %169.0, e81.0
  val?^ | miss    %169.2 = LdVar              eR    mget, e81.0
  lgl$#-          %169.3 = Identical                %169.2, function(x, envir=as.environment(-(1L)), mode=|...
  void                    Branch                   %169.3 -> BB171 (if true) | BB172 (if false)
BB170   <- [167]
  fs              %170.0 = FrameState         R     0x55fa171a90d0+1305: [%83.2, %83.3, %38.4], env=e81.0
  void                    Deopt              !v    %170.0, DeadBranchReached@0x55fa0e989890[Test#10], %167.5   !
BB171   <- [169]
  prom-           %171.0 = MkArg                    unboundValue, .getGroupMethods[0x55fa17c5bb10]_p21, e81.0
  prom-           %171.1 = MkArg                    unboundValue, .getGroupMethods[0x55fa17c5bb10]_p23, e81.0
  ct              %171.2 = PushContext        lCL   %171.0, %171.1, mget([(labels, newFound), table), function(x, envir=as.environment(-(1L)), mode=|..., e81.0
  val?^           %171.3 = CastType                 up %171.1
  val?^           %171.4 = CastType                 up %171.0
  env             e171.5 = MkEnv              l     x=%171.4, envir=%171.3, mode(miss)="any", ifnotfound(miss)=missingArg, inherits(miss)=false, parent=R_BaseNamespace, context 1
  cls             %171.6 = MkCls                    mget@133, e171.5
  val?            %171.7 = Force!<lazy>       !v    %171.4, e171.5   <str+>
  val?^ | miss    %171.8 = LdVar              eR    envir, e171.5
  val?            %171.9 = Force!<lazy>       !v    %171.8, e171.5   <env->
  val?^ | miss    %171.10 = LdVar              eR    mode, e171.5
  val?            %171.11 = Force!<lazy>       !v    %171.10, e171.5   <str$->
  lgl$-           %171.12 = Missing            eR    ifnotfound, e171.5
  lgl$#-          %171.13 = CheckTrueFalse     e     %171.12
  void                    Branch                   %171.13 -> BB71 (if true) | BB65 (if false)
BB172   <- [169]
  fs              %172.0 = FrameState         R     0x55fa171a90d0+1429: [%83.2, %83.3, %38.4], env=e81.0
  void                    Deopt              !v    %172.0, CallTarget@0x55fa0e989890[Call#27], %169.2   !
BB71   <- [171]
  val?^ | miss    %71.0 = LdVar              eR    list, e171.5
  lgl$#-          %71.1 = Identical                <blt list>, %71.0   <true>
  void                    Branch                   %71.1 -> BB173 (if true) | BB174 (if false)
BB65   <- [171]
  val?^ | miss    %65.0 = LdVar              eR    ifnotfound, e171.5
  val?            %65.1 = Force!             !v    %65.0, e171.5   <val?_>
  val?            %65.2 = %65.1
  goto BB66
BB173   <- [71]
  val+            %173.0 = CallSafeBuiltin    wed   list(%171.6)    <vec$->
  val+            %173.1 = %173.0
  goto BB66
BB174   <- [71]
  fs              %174.0 = FrameState         R     0x55fa171a90d0+1466: [%83.2, %83.3, %38.4], env=e81.0
  fs              %174.1 = FrameState         R     0x55fa0db8bf30+37: [%171.7, %171.9, %171.11], env=e171.5, next=%174.0
  void                    Deopt              !v    %174.1, DeadBranchReached@0x55fa0ccef970[Test#0], %71.1   !
BB66   <- [65, 173]
  val?            %66.0 = Phi                      %65.2:BB65, %173.1:BB173
  val?            %66.1 = %66.0
  val?^ | miss    %66.2 = LdVar              eR    inherits, e171.5
  val?            %66.3 = Force!<lazy>       !v    %66.2, e171.5   <lgl$->
  val?            %66.4 = CallBuiltin        !v    mget(%171.7, %171.9, %171.11, %66.1, %66.3) e171.5
  val?            %66.5 = PopContext         C     %66.4, %171.2   <vec+>
  val?^ | miss    %66.6 = LdVar              eR    methods !upd, e81.0
  val?            %66.7 = Force!<value>      !v    %66.6, e81.0   <vec+>
  val?^ | miss    %66.8 = LdVar              eR    labels, e81.0
  val?            %66.9 = Force!<wrapped>    !v    %66.8, e81.0   <str->
  lgl$#-          %66.10 = IsType                   %66.9 isA val+   <true>
  lgl$#-          %66.11 = IsType                   %66.9 isA val?-
  void                    Branch                   %66.10 -> BB175 (if true) | BB176 (if false)
BB175   <- [66]
  val?^ | miss    %175.0 = LdVar              eR    newFound, e81.0
  lgl$#-          %175.1 = IsType                   %175.0 isA lgl-
  void                    Branch                   %175.1 -> BB177 (if true) | BB178 (if false)
BB176   <- [66]
  void                    Nop                !     
  lgl$#-          %176.1 = %66.10
  dr              %176.2 = DeadBranchReached@0x55fa0e989890[Test#12]
  goto BB67
BB177   <- [175]
  lgl-            %177.0 = CastType           d     dn %175.0
  void                    Branch                   %66.11 -> BB179 (if true) | BB180 (if false)
BB178   <- [175]
  void                    Nop                !     
  val?^ | miss    %178.1 = %175.0
  dr              %178.2 = Typecheck@0x55fa0e989890[Type#86]
  goto BB67
BB67   <- [176, 178, 180]
  val?^ | miss    %67.0 = Phi                      %176.1:BB176, %178.1:BB178, %180.1:BB180
  val?^ | miss    %67.1 = %67.0
  dr              %67.2 = Phi                      %176.2:BB176, %178.2:BB178, %180.2:BB180
  dr              %67.3 = %67.2
  fs              %67.4 = FrameState         R     0x55fa171a90d0+1494: [%83.2, %83.3, %38.4, %66.5, %66.7, %66.9], env=e81.0
  void                    Deopt              !v    %67.4, %67.3, %67.1   !
BB179   <- [177]
  val?-           %179.0 = CastType           d     dn %66.9   <str->
  val?            %179.1 = Extract1_1D        wed   %179.0, %177.0, elided   <str->
  lgl$#-          %179.2 = IsType                   %179.1 isA val?-
  lgl$#-          %179.3 = IsType                   %66.5 isA val?+
  void                    Branch                   %179.3 -> BB181 (if true) | BB182 (if false)
BB180   <- [177]
  void                    Nop                !     
  val?            %180.1 = %66.9
  dr              %180.2 = Typecheck@0x55fa0e989890[Type#84]
  goto BB67
BB181   <- [179]
  val?+           %181.0 = CastType           d     dn %66.5   <vec+>
  lgl$#-          %181.1 = IsType                   %66.7 isA val?+
  void                    Branch                   %181.1 -> BB183 (if true) | BB184 (if false)
BB182   <- [179]
  void                    Nop                !     
  val?            %182.1 = %66.5
  dr              %182.2 = Typecheck@0x55fa0e989890[Type#82]
  goto BB69
BB183   <- [181]
  val?+           %183.0 = CastType           d     dn %66.7   <vec+>
  void                    Branch                   %179.2 -> BB185 (if true) | BB186 (if false)
BB184   <- [181]
  void                    Nop                !     
  val?            %184.1 = %66.7
  dr              %184.2 = Typecheck@0x55fa0e989890[Type#83]
  goto BB69
BB69   <- [182, 184, 186]
  val?^ | miss    %69.0 = Phi                      %182.1:BB182, %184.1:BB184, %186.1:BB186
  val?^ | miss    %69.1 = %69.0
  dr              %69.2 = Phi                      %182.2:BB182, %184.2:BB184, %186.2:BB186
  dr              %69.3 = %69.2
  fs              %69.4 = FrameState         R     0x55fa171a90d0+1545: [%83.2, %83.3, %38.4, %66.5, %66.7, %179.1], env=e81.0
  void                    Deopt              !v    %69.4, %69.3, %69.1   !
BB185   <- [183]
  val?-           %185.0 = CastType           d     dn %179.1   <str->
  val?+           %185.1 = Subassign1_1D      wed   %181.0, %183.0, %185.0, elided
  void                    StVar              lW    methods, %185.1, e81.0
  val?+           %185.3 = %185.1
  int$-           %185.4 = %38.4
  goto BB38
BB186   <- [183]
  void                    Nop                !     
  val?            %186.1 = %179.1
  dr              %186.2 = Typecheck@0x55fa0e989890[Type#87]
  goto BB69
Prom 0:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    gen, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    gen, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     names, <0x55fa0ad54470>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .getGroupMethods[0x55fa17c5bb10]_p3, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <str->
  void                    Return             l     %0.3
Prom 3:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    table, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 4:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     length, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .getGroupMethods[0x55fa17c5bb10]_p5, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 5:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    found, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 6:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    labels, e0.0
  val?            %0.2  = Force<lazy>        !v    %0.1, e0.0   <str->
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <true>
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    found, e0.0
  val?            %2.1  = Force<wrapped>     !v    %2.0, e0.0   <lgl->
  val?            %2.2  = Not                !v    %2.1, e0.0
  val?            %2.3  = %2.2
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, .getGroupMethods[0x55fa17c5bb10]_p7, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.3:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract1_1D        !v    %0.2, %3.1, e0.0   <str->
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 7:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    found, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  val?            %0.4  = Not                !     %0.3, e0.0
  void                    Return             l     %0.4
Prom 8:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    allMethods, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 9:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    labels, e0.0
  val?            %0.2  = Force<wrapped>     !v    %0.1, e0.0   <str->
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <true>
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    newFound, e0.0
  val?            %2.1  = Force<value>       !v    %2.0, e0.0   <lgl->
  val?            %2.2  = %2.1
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, .getGroupMethods[0x55fa17c5bb10]_p10, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.2:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract1_1D        !v    %0.2, %3.1, e0.0   <str->
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 10:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    newFound, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 11:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    table, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 12:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    gen, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 13:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    gen, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 14:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     names, <0x55fa0ad54470>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .getGroupMethods[0x55fa17c5bb10]_p15, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <str->
  void                    Return             l     %0.3
Prom 15:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    table, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 16:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     length, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .getGroupMethods[0x55fa17c5bb10]_p17, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 17:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    found, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 18:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    labels, e0.0
  val?            %0.2  = Force<wrapped>     !v    %0.1, e0.0   <str->
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <true>
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    found, e0.0
  val?            %2.1  = Force<value>       !v    %2.0, e0.0   <lgl->
  val?            %2.2  = Not                !v    %2.1, e0.0
  val?            %2.3  = %2.2
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, .getGroupMethods[0x55fa17c5bb10]_p19, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.3:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract1_1D        !v    %0.2, %3.1, e0.0   <str->
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 19:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    found, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  val?            %0.4  = Not                !     %0.3, e0.0
  void                    Return             l     %0.4
Prom 20:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    allMethods, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 21:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    labels, e0.0
  val?            %0.2  = Force<wrapped>     !v    %0.1, e0.0   <str->
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <true>
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    newFound, e0.0
  val?            %2.1  = Force<value>       !v    %2.0, e0.0   <lgl->
  val?            %2.2  = %2.1
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, .getGroupMethods[0x55fa17c5bb10]_p22, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.2:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract1_1D        !v    %0.2, %3.1, e0.0   <str->
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 22:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    newFound, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 23:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    table, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 24:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    x, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <(int|str)+>
  void                    Return             l     %0.3
Prom 25:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    table, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <val?->
  void                    Return             l     %0.3
Prom 29:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    x, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <(int|str)+>
  void                    Return             l     %0.3
Prom 30:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    table, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <val?->
  void                    Return             l     %0.3

│ .getGroupMethods[0x55fa17c5bb10]                                             │
└──────────────────────────────────────────────────────────────────────────────┘
