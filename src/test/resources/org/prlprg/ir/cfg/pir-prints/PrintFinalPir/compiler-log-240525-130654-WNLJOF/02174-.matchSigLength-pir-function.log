
┌──────────────────────────────────────────────────────────────────────────────┐
│ .matchSigLength[0x55fa10cc3550]                                              │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;Eager3,NonRefl3,!Obj3                │
│ Properties:                                                                  │
├────── Final PIR Version
.matchSigLength[0x55fa10cc3550]
BB0
  val?~+          %0.0  = LdArg                    3
  val?^           %0.1  = LdArg                    2
  val?^           %0.2  = LdArg                    1
  val?^           %0.3  = LdArg                    0
  val?^ | miss    %0.4  = LdVar              eR    .getGenericSigLength, <env 0x55fa0b35b378>
  lgl$#-          %0.5  = Identical                %0.4, function(fdef, env=environment(fdef), check=TR|...
  void                    Branch                   %0.5 -> BB66 (if true) | BB67 (if false)
BB66   <- [0]
  env             e66.0 = MkEnv              l     sig=%0.3, fdef=%0.2, fenv=%0.1, reset=%0.0, parent=<env 0x55fa0b35b378>, context 1
  prom-           %66.1 = MkArg                    unboundValue, .matchSigLength[0x55fa10cc3550]_p0, e66.0
  prom-           %66.2 = MkArg                    unboundValue, .matchSigLength[0x55fa10cc3550]_p1, e66.0
  val?            %66.3 = StaticCall         !v    .getGenericSigLength[0x55fa10575070](%66.1, %66.2, true) e66.0   <(int|real)$->
  void                    StVar              lW    nargs, %66.3, e66.0
  val?^ | miss    %66.5 = LdVar              eR    length, e66.0
  lgl$#-          %66.6 = Identical                <blt length>, %66.5   <true>
  void                    Branch                   %66.6 -> BB68 (if true) | BB69 (if false)
BB67   <- [0]
  env             e67.0 = (MkEnv)            l     sig=%0.3, fdef=%0.2, fenv=%0.1, reset=%0.0, parent=<env 0x55fa0b35b378>, context 1
  fs              %67.1 = FrameState         R     0x55fa0bc72fd0+0: [], env=e67.0
  void                    Deopt              !v    %67.1, CallTarget@0x55fa0f3b2e50[Call#0], %0.4
BB68   <- [66]
  val?^ | miss    %68.0 = LdVar              eR    sig, e66.0
  val?            %68.1 = Force!<lazy>       !v    %68.0, e66.0   <str>
  val?            %68.2 = CallBuiltin        !v    length(%68.1) e66.0   <int$->
  lgl$#-          %68.3 = IsType                   %68.2 isA int$-
  void                    Branch                   %68.3 -> BB70 (if true) | BB71 (if false)
BB69   <- [66]
  fs              %69.0 = FrameState         R     0x55fa0bc72fd0+56: [], env=e66.0
  void                    Deopt              !v    %69.0, DeadBranchReached@0x55fa0f3b2e50[Test#0], %66.6   !
BB70   <- [68]
  int$-           %70.0 = CastType           d     dn %68.2
  void                    StVar              lW    n, %70.0, e66.0
  val?^ | miss    %70.2 = LdVar              eR    packageSlot, e66.0
  lgl$#-          %70.3 = Identical                %70.2, function(object) <(rir::DispatchTable*)0x55fa0|...
  void                    Branch                   %70.3 -> BB72 (if true) | BB73 (if false)
BB71   <- [68]
  fs              %71.0 = FrameState         R     0x55fa0bc72fd0+147: [%68.2], env=e66.0
  void                    Deopt              !v    %71.0, Typecheck@0x55fa0f3b2e50[Type#5], %68.2   !
BB72   <- [70]
  prom-           %72.0 = MkArg                    unboundValue, .matchSigLength[0x55fa10cc3550]_p2, e66.0
  ct              %72.1 = PushContext        lCL   %72.0, packageSlot(sig), function(object) <(rir::DispatchTable*)0x55fa0|..., e66.0
  val?^           %72.2 = CastType                 up %72.0
  val?^ | miss    %72.3 = LdVar              eR    attr, <env 0x55fa0b35b378>
  lgl$#-          %72.4 = Identical                <blt attr>, %72.3   <true>
  void                    Branch                   %72.4 -> BB74 (if true) | BB75 (if false)
BB73   <- [70]
  fs              %73.0 = FrameState         R     0x55fa0bc72fd0+161: [], env=e66.0
  void                    Deopt              !v    %73.0, CallTarget@0x55fa0f3b2e50[Call#2], %70.2   !
BB74   <- [72]
  env             e74.0 = MkEnv              l     object=%72.2, parent=<env 0x55fa0b35b378>, context 1
  val?            %74.1 = Force!<lazy>       !vL   %72.2, e74.0   <(str|other)>
  val?            %74.2 = CallBuiltin        !v    attr(%74.1, "package") e74.0   <(nil|str)->
  val?            %74.3 = PopContext         C     %74.2, %72.1   <(nil|str)->
  void                    StVar              lW    pkgs, %74.3, e66.0
  val?^ | miss    %74.5 = LdVar              eR    n, e66.0
  lgl$#-          %74.6 = IsType                   %74.5 isA int$-
  void                    Branch                   %74.6 -> BB76 (if true) | BB77 (if false)
BB75   <- [72]
  fs              %75.0 = FrameState         R     0x55fa0bc72fd0+193: [], env=e66.0
  env             e75.1 = (MkEnv)            l     object=%72.2, parent=<env 0x55fa0b35b378>, context 1
  fs              %75.2 = FrameState         R     0x55fa0cd91810+17: [<blt attr>, %72.4], env=e75.1, next=%75.0
  void                    Deopt              !v    %75.2, DeadBranchReached@0x55fa0eb379b8[Test#0], %72.4   !
BB76   <- [74]
  int$-           %76.0 = CastType           d     dn %74.5   <>
  val?^ | miss    %76.1 = LdVar              eR    nargs, e66.0
  lgl$#-          %76.2 = IsType                   %76.1 isA val?~- | miss
  void                    Branch                   %76.2 -> BB78 (if true) | BB79 (if false)
BB77   <- [74]
  void                    Nop                !     
  val?^ | miss    %77.1 = %74.5
  dr              %77.2 = Typecheck@0x55fa0f3b2e50[Type#8]
  goto BB11
BB78   <- [76]
  val?~- | miss   %78.0 = CastType           d     dn %76.1
  val?-           %78.1 = Force!<value>            %78.0,    <(int|real)$->
  lgl-            %78.2 = Lt                 wed   %76.0, %78.1, elided   <lgl$->
  lgl$#-          %78.3 = IsType                   %78.2 isA lgl$-
  void                    Branch                   %78.3 -> BB80 (if true) | BB81 (if false)
BB79   <- [76]
  void                    Nop                !     
  val?^ | miss    %79.1 = %76.1
  dr              %79.2 = Typecheck@0x55fa0f3b2e50[Type#9]
  goto BB11
BB11   <- [77, 79]
  val?^ | miss    %11.0 = Phi                      %77.1:BB77, %79.1:BB79
  val?^ | miss    %11.1 = %11.0
  dr              %11.2 = Phi                      %77.2:BB77, %79.2:BB79
  dr              %11.3 = %11.2
  fs              %11.4 = FrameState         R     0x55fa0bc72fd0+207: [], env=e66.0
  void                    Deopt              !v    %11.4, %11.3, %11.1   !
BB80   <- [78]
  lgl$-           %80.0 = CastType           d     dn %78.2
  lgl$#-          %80.1 = CheckTrueFalse     e     %80.0
  void                    Branch                   %80.1 -> BB55 (if true) | BB15 (if false)
BB81   <- [78]
  fs              %81.0 = FrameState         R     0x55fa0bc72fd0+236: [%78.2], env=e66.0
  void                    Deopt              !v    %81.0, Typecheck@0x55fa0f3b2e50[Type#10], %78.2   !
BB55   <- [80]
  (int|real|complex)- %55.0 = Sub                wed   %78.1, %76.0, elided   <>
  void                    StVar              lW    more, %55.0, e66.0
  val?^ | miss    %55.2 = LdVar              eR    c, e66.0
  lgl$#-          %55.3 = Identical                <blt c>, %55.2   <@?>
  void                    Branch                   %55.3 -> BB64 (if true) | BB56 (if false)
BB15   <- [80]
  lgl-            %15.0 = Gt                 wed   %76.0, %78.1, elided   <lgl$->
  lgl$#-          %15.1 = IsType                   %15.0 isA lgl$-
  void                    Branch                   %15.1 -> BB82 (if true) | BB83 (if false)
BB64   <- [55]
  val             %64.0 = ChkMissing         e     %74.3
  (cls|spec|blt)  %64.1 = LdFun              !v    rep, e66.0
  prom-           %64.2 = MkArg                    unboundValue, .matchSigLength[0x55fa10cc3550]_p24, e66.0
  val?            %64.3 = Call               !v    %64.1("methods", %64.2) e66.0   <>
  val?            %64.4 = CallBuiltin        !v    c(%74.3, %64.3) e66.0
  val?            %64.5 = %64.4
  goto BB57
BB56   <- [55]
  val             %56.0 = ChkMissing         e     %74.3
  (cls|spec|blt)  %56.1 = LdFun              !v    rep, e66.0
  prom-           %56.2 = MkArg                    unboundValue, .matchSigLength[0x55fa10cc3550]_p17, e66.0
  val?            %56.3 = Call               !v    %56.1("methods", %56.2) e66.0   <>
  val?            %56.4 = CallBuiltin        !v    c(%74.3, %56.3) e66.0
  val?            %56.5 = %56.4
  goto BB57
BB82   <- [15]
  lgl$-           %82.0 = CastType           d     dn %15.0
  lgl$#-          %82.1 = CheckTrueFalse     e     %82.0
  void                    Branch                   %82.1 -> BB23 (if true) | BB18 (if false)
BB83   <- [15]
  fs              %83.0 = FrameState         R     0x55fa0bc72fd0+276: [%15.0], env=e66.0
  void                    Deopt              !v    %83.0, Typecheck@0x55fa0f3b2e50[Type#13], %15.0   !
BB57   <- [56, 64]
  val?            %57.0 = Phi                      %56.5:BB56, %64.5:BB64   <>
  val?            %57.1 = %57.0
  void                    StVar              lW    pkgs, %57.1, e66.0
  val?^ | miss    %57.3 = LdVar              eR    c, e66.0
  lgl$#-          %57.4 = Identical                <blt c>, %57.3   <@?>
  void                    Branch                   %57.4 -> BB60 (if true) | BB58 (if false)
BB23   <- [82]
  val?^ | miss    %23.0 = LdVar              eR    all, e66.0
  lgl$#-          %23.1 = Identical                <blt all>, %23.0   <@?>
  void                    Branch                   %23.1 -> BB51 (if true) | BB24 (if false)
BB18   <- [82]
  void                    Nop                !     
  goto BB19
BB60   <- [57]
  val?^ | miss    %60.0 = LdVar              eR    as.character, e66.0
  lgl$#-          %60.1 = Identical                <blt as.character>, %60.0   <@?>
  void                    Branch                   %60.1 -> BB63 (if true) | BB61 (if false)
BB58   <- [57]
  val?^ | miss    %58.0 = LdVar              eR    sig, e66.0
  val?            %58.1 = Force!             !v    %58.0, e66.0   <>
  val?            %58.2 = CallBuiltin        !v    as.character(%58.1) e66.0   <>
  (cls|spec|blt)  %58.3 = LdFun              !v    rep, e66.0
  prom-           %58.4 = MkArg                    unboundValue, .matchSigLength[0x55fa10cc3550]_p21, e66.0
  val?            %58.5 = Call               !v    %58.3("ANY", %58.4) e66.0   <>
  val?            %58.6 = CallBuiltin        !v    c(%58.2, %58.5) e66.0
  val?            %58.7 = %58.6
  goto BB59
BB51   <- [23]
  val?^ | miss    %51.0 = LdVar              eR    sig, e66.0
  val?            %51.1 = Force!             !v    %51.0, e66.0   <>
  lgl$#-          %51.2 = IsType                   %51.1 isA val+   <@?>
  void                    Branch                   %51.2 -> BB54 (if true) | BB52 (if false)
BB24   <- [23]
  val?^ | miss    %24.0 = LdVar              eR    sig, e66.0
  val?            %24.1 = Force!             !v    %24.0, e66.0   <>
  lgl$#-          %24.2 = IsType                   %24.1 isA val+   <@?>
  void                    Branch                   %24.2 -> BB50 (if true) | BB25 (if false)
BB19   <- [18, 48, 49, 36]
  void                    Nop                !     
  goto BB20
BB63   <- [60]
  val?^ | miss    %63.0 = LdVar              eR    sig, e66.0
  val?            %63.1 = Force!             !v    %63.0, e66.0   <>
  val?            %63.2 = CallBuiltin        !v    as.character(%63.1) e66.0
  val?            %63.3 = %63.2
  goto BB62
BB61   <- [60]
  val?^ | miss    %61.0 = LdVar              eR    sig, e66.0
  val?            %61.1 = Force!             !v    %61.0, e66.0   <>
  val?            %61.2 = CallBuiltin        !v    as.character(%61.1) e66.0
  val?            %61.3 = %61.2
  goto BB62
BB59   <- [58, 62]
  val?            %59.0 = Phi                      %58.7:BB58, %62.6:BB62   <>
  val?            %59.1 = %59.0
  void                    StVar              lW    sig, %59.1, e66.0
  goto BB20
BB54   <- [51]
  val?^ | miss    %54.0 = LdVar              eR    nargs, e66.0
  val?            %54.1 = Force!             !v    %54.0, e66.0   <>
  val?            %54.2 = Add                !v    %54.1, 1, e66.0   <>
  val?^ | miss    %54.3 = LdVar              eR    n, e66.0
  val?            %54.4 = Force!             !v    %54.3, e66.0   <>
  val?            %54.5 = Colon              !v    %54.2, %54.4, e66.0   <>
  val?            %54.6 = %54.5
  goto BB53
BB52   <- [51]
  prom-           %52.0 = MkArg                    unboundValue, .matchSigLength[0x55fa10cc3550]_p14, e66.0
  prom-           %52.1 = %52.0
  goto BB53
BB50   <- [24]
  val?^ | miss    %50.0 = LdVar              eR    nargs, e66.0
  val?            %50.1 = Force!             !v    %50.0, e66.0   <>
  val?            %50.2 = Add                !v    %50.1, 1, e66.0   <>
  val?^ | miss    %50.3 = LdVar              eR    n, e66.0
  val?            %50.4 = Force!             !v    %50.3, e66.0   <>
  val?            %50.5 = Colon              !v    %50.2, %50.4, e66.0   <>
  val?            %50.6 = %50.5
  goto BB26
BB25   <- [24]
  prom-           %25.0 = MkArg                    unboundValue, .matchSigLength[0x55fa10cc3550]_p5, e66.0
  prom-           %25.1 = %25.0
  goto BB26
BB20   <- [19, 59]
  val?^ | miss    %20.0 = LdVar              eR    pkgs, e66.0
  lgl$#-          %20.1 = IsType                   %20.0 isA val?~- | miss
  void                    Branch                   %20.1 -> BB84 (if true) | BB85 (if false)
BB62   <- [61, 63]
  val?            %62.0 = Phi                      %61.3:BB61, %63.3:BB63   <>
  val?            %62.1 = %62.0
  (cls|spec|blt)  %62.2 = LdFun              !v    rep, e66.0
  prom-           %62.3 = MkArg                    unboundValue, .matchSigLength[0x55fa10cc3550]_p23, e66.0
  val?            %62.4 = Call               !v    %62.2("ANY", %62.3) e66.0   <>
  val?            %62.5 = CallBuiltin        !v    c(%62.1, %62.4) e66.0
  val?            %62.6 = %62.5
  goto BB59
BB53   <- [52, 54]
  val?            %53.0 = Phi                      %54.6:BB54, %52.1:BB52
  val?            %53.1 = %53.0
  val?            %53.2 = Extract1_1D        !v    %51.1, %53.1, e66.0   <>
  val?            %53.3 = Eq                 !v    %53.2, "ANY", e66.0   <>
  val?            %53.4 = CallBuiltin        !v    all(%53.3) e66.0
  val?            %53.5 = %53.4
  goto BB27
BB26   <- [25, 50]
  val?            %26.0 = Phi                      %50.6:BB50, %25.1:BB25
  val?            %26.1 = %26.0
  val?            %26.2 = Extract1_1D        !v    %24.1, %26.1, e66.0   <>
  val?            %26.3 = Eq                 !v    %26.2, "ANY", e66.0   <>
  val?            %26.4 = CallBuiltin        !v    all(%26.3) e66.0
  val?            %26.5 = %26.4
  goto BB27
BB84   <- [20]
  val?~- | miss   %84.0 = CastType           d     dn %20.0
  val?-           %84.1 = Force!<value>            %84.0,    <(nil|str)->
  val?^ | miss    %84.2 = LdVar              eR    packageSlot<-, e66.0
  lgl$#-          %84.3 = Identical                %84.2, function(object, value) <(rir::DispatchTable*)|...
  void                    Branch                   %84.3 -> BB86 (if true) | BB87 (if false)
BB85   <- [20]
  void                    Nop                !     
  val?^ | miss    %85.1 = %20.0
  dr              %85.2 = Typecheck@0x55fa0f3b2e50[Type#84]
  goto BB21
BB27   <- [26, 53]
  val?            %27.0 = Phi                      %26.5:BB26, %53.5:BB53   <>
  val?            %27.1 = %27.0
  lgl$#-          %27.2 = CheckTrueFalse     we    %27.1
  void                    Branch                   %27.2 -> BB47 (if true) | BB28 (if false)
BB86   <- [84]
  val?^ | miss    %86.0 = LdVar              eR    sig, e66.0
  val?            %86.1 = Force!<wrapped>    !v    %86.0, e66.0   <str>
  ct              %86.2 = PushContext        lCL   %86.1, %84.1, packageSlot<-(sig, value=pkgs), function(object, value) <(rir::DispatchTable*)|..., e66.0
  env             e86.3 = MkEnv              l     object=%86.1, value=%84.1, parent=<env 0x55fa0b35b378>, context 1
  (cls|spec|blt)  %86.4 = LdFun              !v    attr<-, <0x55fa0ad57e08>, <env 0x55fa0b35b378>
  val?            %86.5 = NamedCall          !v    %86.4(%86.1, "package", value=%84.1) e86.3   <str>
  void                    StVar              lW    object, %86.5, e86.3
  val             %86.7 = ChkMissing         e     %86.5
  val?            %86.8 = PopContext         C     %86.5, %86.2   <str>
  void                    StVar              lW    sig, %86.8, e66.0
  val             %86.10 = ChkMissing         e     %86.8
  void                    Visible            v     
  void                    Return             l     %86.8
BB87   <- [84]
  void                    Nop                !     
  val?^ | miss    %87.1 = %84.2
  dr              %87.2 = CallTarget@0x55fa0f3b2e50[Call#17]
  goto BB21
BB21   <- [85, 87]
  val?^ | miss    %21.0 = Phi                      %85.1:BB85, %87.1:BB87
  val?^ | miss    %21.1 = %21.0
  dr              %21.2 = Phi                      %85.2:BB85, %87.2:BB87
  dr              %21.3 = %21.2
  fs              %21.4 = FrameState         R     0x55fa0bc72fd0+1631: [], env=e66.0
  void                    Deopt              !v    %21.4, %21.3, %21.1   !
BB47   <- [27]
  val?^ | miss    %47.0 = LdVar              eR    nargs, e66.0
  val?            %47.1 = Force!             !v    %47.0, e66.0   <>
  (cls|spec|blt)  %47.2 = LdFun              !v    length<-, e66.0
  val?^ | miss    %47.3 = LdVar              eR    sig, e66.0
  val?            %47.4 = Force!             !v    %47.3, e66.0   <>
  val?            %47.5 = NamedCall          !v    %47.2(%47.4, value=%47.1) e66.0
  void                    StVar              lW    sig, %47.5, e66.0
  val?^ | miss    %47.7 = LdVar              eR    pkgs, e66.0
  val?            %47.8 = Force!             !v    %47.7, e66.0   <>
  lgl$-           %47.9 = Is                       %47.8, NULL
  lgl$-           %47.10 = Not                d     %47.9, elided
  lgl$#-          %47.11 = CheckTrueFalse     e     %47.10
  void                    Branch                   %47.11 -> BB49 (if true) | BB48 (if false)
BB28   <- [27]
  val?^ | miss    %28.0 = LdVar              eR    sig, e66.0
  val?            %28.1 = Force!             !v    %28.0, e66.0   <>
  lgl$#-          %28.2 = IsType                   %28.1 isA val+   <@?>
  void                    Branch                   %28.2 -> BB46 (if true) | BB29 (if false)
BB49   <- [47]
  val?^ | miss    %49.0 = LdVar              eR    nargs, e66.0
  val?            %49.1 = Force!             !v    %49.0, e66.0   <>
  (cls|spec|blt)  %49.2 = LdFun              !v    length<-, e66.0
  val?^ | miss    %49.3 = LdVar              eR    pkgs, e66.0
  val?            %49.4 = Force!             !v    %49.3, e66.0   <>
  val?            %49.5 = NamedCall          !v    %49.2(%49.4, value=%49.1) e66.0
  void                    StVar              lW    pkgs, %49.5, e66.0
  goto BB19
BB48   <- [47]
  void                    Nop                !     
  goto BB19
BB46   <- [28]
  val?^ | miss    %46.0 = LdVar              eR    n, e66.0
  val?            %46.1 = Force!             !v    %46.0, e66.0   <>
  val?            %46.2 = %46.1
  goto BB30
BB29   <- [28]
  prom-           %29.0 = MkArg                    unboundValue, .matchSigLength[0x55fa10cc3550]_p11, e66.0
  prom-           %29.1 = %29.0
  goto BB30
BB30   <- [29, 46]
  val?            %30.0 = Phi                      %46.2:BB46, %29.1:BB29
  val?            %30.1 = %30.0
  val?            %30.2 = Extract2_1D        !v    %28.1, %30.1, e66.0   <>
  val?            %30.3 = Eq                 !v    %30.2, "ANY", e66.0   <>
  lgl$#-          %30.4 = CheckTrueFalse     we    %30.3   <@?>
  void                    Branch                   %30.4 -> BB39 (if true) | BB31 (if false)
BB39   <- [30]
  val?^ | miss    %39.0 = LdVar              eR    n, e66.0
  val?            %39.1 = Force!             !v    %39.0, e66.0   <>
  val?            %39.2 = Sub                !v    %39.1, 1, e66.0   <>
  void                    StVar              lW    n, %39.2, e66.0
  goto BB40
BB31   <- [30]
  void                    Nop                !     
  goto BB32
BB40   <- [39, 44]
  val?^ | miss    %40.0 = LdVar              eR    sig, e66.0
  val?            %40.1 = Force!             !v    %40.0, e66.0   <>
  lgl$#-          %40.2 = IsType                   %40.1 isA val+   <@?>
  void                    Branch                   %40.2 -> BB45 (if true) | BB41 (if false)
BB32   <- [43, 31]
  val?^ | miss    %32.0 = LdVar              eR    reset, e66.0
  val?            %32.1 = Force!             !v    %32.0, e66.0   <>
  lgl$#-          %32.2 = CheckTrueFalse     we    %32.1
  void                    Branch                   %32.2 -> BB38 (if true) | BB33 (if false)
BB45   <- [40]
  val?^ | miss    %45.0 = LdVar              eR    n, e66.0
  val?            %45.1 = Force!             !v    %45.0, e66.0   <>
  val?            %45.2 = %45.1
  goto BB42
BB41   <- [40]
  prom-           %41.0 = MkArg                    unboundValue, .matchSigLength[0x55fa10cc3550]_p10, e66.0
  prom-           %41.1 = %41.0
  goto BB42
BB38   <- [32]
  (cls|spec|blt)  %38.0 = LdFun              !v    .resetSigLength, e66.0
  prom-           %38.1 = MkArg                    unboundValue, .matchSigLength[0x55fa10cc3550]_p8, e66.0
  prom-           %38.2 = MkArg                    unboundValue, .matchSigLength[0x55fa10cc3550]_p9, e66.0
  val?            %38.3 = Call               !v    %38.0(%38.1, %38.2) e66.0
  goto BB34
BB33   <- [32]
  void                    Nop                !     
  goto BB34
BB42   <- [41, 45]
  val?            %42.0 = Phi                      %45.2:BB45, %41.1:BB41
  val?            %42.1 = %42.0
  val?            %42.2 = Extract2_1D        !v    %40.1, %42.1, e66.0   <>
  val?            %42.3 = Eq                 !v    %42.2, "ANY", e66.0   <>
  lgl$#-          %42.4 = CheckTrueFalse     we    %42.3
  void                    Branch                   %42.4 -> BB44 (if true) | BB43 (if false)
BB34   <- [33, 38]
  val?^ | miss    %34.0 = LdVar              eR    n, e66.0
  val?            %34.1 = Force!             !v    %34.0, e66.0   <>
  (cls|spec|blt)  %34.2 = LdFun              !v    length<-, e66.0
  val?^ | miss    %34.3 = LdVar              eR    sig, e66.0
  val?            %34.4 = Force!             !v    %34.3, e66.0   <>
  val?            %34.5 = NamedCall          !v    %34.2(%34.4, value=%34.1) e66.0
  void                    StVar              lW    sig, %34.5, e66.0
  val?^ | miss    %34.7 = LdVar              eR    pkgs, e66.0
  val?            %34.8 = Force!             !v    %34.7, e66.0   <>
  lgl$-           %34.9 = Is                       %34.8, NULL
  lgl$-           %34.10 = Not                d     %34.9, elided
  lgl$#-          %34.11 = CheckTrueFalse     e     %34.10
  void                    Branch                   %34.11 -> BB37 (if true) | BB35 (if false)
BB44   <- [42]
  val?^ | miss    %44.0 = LdVar              eR    n, e66.0
  val?            %44.1 = Force!             !v    %44.0, e66.0   <>
  val?            %44.2 = Sub                !v    %44.1, 1, e66.0   <>
  void                    StVar              lW    n, %44.2, e66.0
  goto BB40
BB43   <- [42]
  void                    Nop                !     
  goto BB32
BB37   <- [34]
  val?^ | miss    %37.0 = LdVar              eR    n, e66.0
  val?            %37.1 = Force!             !v    %37.0, e66.0   <>
  (cls|spec|blt)  %37.2 = LdFun              !v    length<-, e66.0
  val?^ | miss    %37.3 = LdVar              eR    pkgs, e66.0
  val?            %37.4 = Force!             !v    %37.3, e66.0   <>
  val?            %37.5 = NamedCall          !v    %37.2(%37.4, value=%37.1) e66.0
  void                    StVar              lW    pkgs, %37.5, e66.0
  goto BB36
BB35   <- [34]
  void                    Nop                !     
  goto BB36
BB36   <- [35, 37]
  void                    Nop                !     
  goto BB19
Prom 0:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fdef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <>
  void                    Return             l     %0.3
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fenv, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    sig, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str>
  void                    Return             l     %0.3
Prom 5:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    nargs, e0.0
  val?            %0.2  = Force              !v    %0.1, e0.0   <>
  val?            %0.3  = Add                !v    %0.2, 1, e0.0   <>
  val?^ | miss    %0.4  = LdVar              eR    n, e0.0
  void                    Visible            v     
  val?            %0.6  = Force              !     %0.4, e0.0   <>
  val?            %0.7  = Colon              !     %0.3, %0.6, e0.0   <>
  void                    Return             l     %0.7
Prom 8:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fdef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <>
  void                    Return             l     %0.3
Prom 9:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    n, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <>
  void                    Return             l     %0.3
Prom 10:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    n, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <>
  void                    Return             l     %0.3
Prom 11:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    n, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <>
  void                    Return             l     %0.3
Prom 14:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    nargs, e0.0
  val?            %0.2  = Force              !v    %0.1, e0.0   <>
  val?            %0.3  = Add                !v    %0.2, 1, e0.0   <>
  val?^ | miss    %0.4  = LdVar              eR    n, e0.0
  void                    Visible            v     
  val?            %0.6  = Force              !     %0.4, e0.0   <>
  val?            %0.7  = Colon              !     %0.3, %0.6, e0.0   <>
  void                    Return             l     %0.7
Prom 17:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    more, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <>
  void                    Return             l     %0.3
Prom 21:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    more, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <>
  void                    Return             l     %0.3
Prom 23:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    more, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <>
  void                    Return             l     %0.3
Prom 24:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    more, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <>
  void                    Return             l     %0.3

│ .matchSigLength[0x55fa10cc3550]                                              │
└──────────────────────────────────────────────────────────────────────────────┘
