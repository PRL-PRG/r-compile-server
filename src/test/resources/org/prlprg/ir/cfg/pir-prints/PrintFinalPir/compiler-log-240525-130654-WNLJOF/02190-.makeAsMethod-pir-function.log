
┌──────────────────────────────────────────────────────────────────────────────┐
│ .makeAsMethod[0x55fa1131fe50]                                                │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch                                      │
│ Properties:                                                                  │
├────── Final PIR Version
.makeAsMethod[0x55fa1131fe50]
BB0
  val?^           %0.0  = LdArg                    4
  val?^           %0.1  = LdArg                    3
  val?^           %0.2  = LdArg                    2
  val?^           %0.3  = LdArg                    1
  val?^           %0.4  = LdArg                    0
  val?^ | miss    %0.5  = LdVar              eR    is.function, <env 0x55fa0b35b378>
  lgl$#-          %0.6  = Identical                <blt is.function>, %0.5   <true>
  void                    Branch                   %0.6 -> BB36 (if true) | BB37 (if false)
BB36   <- [0]
  env             e36.0 = MkEnv              l     expr=%0.4, simple=%0.3, Class=%0.2, ClassDef=%0.1, where=%0.0, parent=<env 0x55fa0b35b378>, context 1
  val?            %36.1 = Force!<lazy>       !v    %0.4, e36.0   <cls->
  lgl$#-          %36.2 = IsType                   %36.1 isA val?-
  void                    Branch                   %36.2 -> BB38 (if true) | BB39 (if false)
BB37   <- [0]
  env             e37.0 = (MkEnv)            l     expr=%0.4, simple=%0.3, Class=%0.2, ClassDef=%0.1, where=%0.0, parent=<env 0x55fa0b35b378>, context 1
  fs              %37.1 = FrameState         R     0x55fa109cc340+0: [], env=e37.0
  void                    Deopt              !v    %37.1, DeadBranchReached@0x55fa0fb3edc0[Test#0], %0.6
BB38   <- [36]
  val?-           %38.0 = CastType           d     dn %36.1   <cls->
  lgl$#-          %38.1 = CallSafeBuiltin    wed   is.function(%38.0)    <lgl$->
  void                    Branch                   %38.1 -> BB21 (if true) | BB7 (if false)
BB39   <- [36]
  fs              %39.0 = FrameState         R     0x55fa109cc340+69: [<blt is.function>, %36.1], env=e36.0
  void                    Deopt              !v    %39.0, Typecheck@0x55fa0fb3edc0[Type#1], %36.1   !
BB21   <- [38]
  val?^ | miss    %21.0 = LdVar              eR    environment, e36.0
  lgl$#-          %21.1 = Identical                %21.0, function(fun=NULL) <(rir::DispatchTable*)0x55f|...
  void                    Branch                   %21.1 -> BB40 (if true) | BB41 (if false)
BB7   <- [38]
  void                    Nop                !     
  goto BB8
BB40   <- [21]
  val?^ | miss    %40.0 = LdVar              eR    expr, e36.0
  val?            %40.1 = Force!<wrapped>    !v    %40.0, e36.0   <cls->
  prom-           %40.2 = MkArg                    %40.1, .makeAsMethod[0x55fa1131fe50]_p7 (!refl), 
  val?            %40.3 = StaticCall         !v    environment[0x55fa106a1690](%40.2) e36.0   <env->
  void                    StVar              lW    where, %40.3, e36.0
  val?^ | miss    %40.5 = LdVar              eR    formalArgs, e36.0
  lgl$#-          %40.6 = Identical                %40.5, function(def) <(rir::DispatchTable*)0x55fa0edf|...
  void                    Branch                   %40.6 -> BB42 (if true) | BB43 (if false)
BB41   <- [21]
  fs              %41.0 = FrameState         R     0x55fa109cc340+91: [%38.1], env=e36.0
  void                    Deopt              !v    %41.0, CallTarget@0x55fa0fb3edc0[Call#1], %21.0   !
BB8   <- [7, 32]
  val?^ | miss    %8.0  = LdVar              eR    expr, e36.0
  val?            %8.1  = Force!<value>      !v    %8.0, e36.0   <(sym|code)->
  void                    StVar              lW    value, %8.1, e36.0
  val?^ | miss    %8.3  = LdVar              eR    simple, e36.0
  val?            %8.4  = Force!<lazy>       !v    %8.3, e36.0   <lgl$->
  lgl$-           %8.5  = AsLogical          e     %8.4
  lgl$#-          %8.6  = Identical                %8.5, false
  void                    Branch                   %8.6 -> BB20 (if true) | BB11 (if false)
BB42   <- [40]
  prom-           %42.0 = MkArg                    unboundValue, .makeAsMethod[0x55fa1131fe50]_p8, e36.0
  val?            %42.1 = StaticCall         !v    formalArgs[0x55fa17169ee0](%42.0) e36.0   <str->
  void                    StVar              lW    args, %42.1, e36.0
  val?^ | miss    %42.3 = LdVar              eR    identical, e36.0
  lgl$#-          %42.4 = Identical                %42.3, function(x, y, num.eq=TRUE, single.NA=TRUE, at|...
  void                    Branch                   %42.4 -> BB44 (if true) | BB45 (if false)
BB43   <- [40]
  fs              %43.0 = FrameState         R     0x55fa109cc340+153: [], env=e36.0
  void                    Deopt              !v    %43.0, CallTarget@0x55fa0fb3edc0[Call#2], %40.5   !
BB20   <- [8]
  void                    Nop                !     
  lgl$-           %20.1 = %8.5
  goto BB14
BB11   <- [8]
  val?^ | miss    %11.0 = LdVar              eR    identical, e36.0
  lgl$#-          %11.1 = Identical                %11.0, function(x, y, num.eq=TRUE, single.NA=TRUE, at|...
  void                    Branch                   %11.1 -> BB46 (if true) | BB47 (if false)
BB44   <- [42]
  prom-           %44.0 = MkArg                    unboundValue, .makeAsMethod[0x55fa1131fe50]_p9 (!refl), e36.0
  ct              %44.1 = PushContext        lCL   %44.0, "from", identical(args, "from"), function(x, y, num.eq=TRUE, single.NA=TRUE, at|..., e36.0
  val?^           %44.2 = CastType                 up %44.0
  env             e44.3 = MkEnv              l     x=%44.2, y="from", num.eq(miss)=true, single.NA(miss)=true, attrib.as.set(miss)=true, ignore.bytecode(miss)=true, ignore.environment(miss)=false, ignore.srcref(miss)=true, parent=R_BaseNamespace, context 1
  val?            %44.4 = CallBuiltin        !v    identical(%42.1, "from", true, true, true, true, false, true) e44.3
  val?            %44.5 = PopContext         C     %44.4, %44.1   <lgl$->
  lgl$#-          %44.6 = IsType                   %44.5 isA lgl$-
  void                    Branch                   %44.6 -> BB50 (if true) | BB51 (if false)
BB45   <- [42]
  fs              %45.0 = FrameState         R     0x55fa109cc340+199: [], env=e36.0
  void                    Deopt              !v    %45.0, CallTarget@0x55fa0fb3edc0[Call#3], %42.3   !
BB14   <- [20, 48]
  lgl$-           %14.0 = Phi                      %48.4:BB48, %20.1:BB20
  lgl$-           %14.1 = %14.0
  lgl$#-          %14.2 = CheckTrueFalse     e     %14.1
  void                    Branch                   %14.2 -> BB19 (if true) | BB15 (if false)
BB46   <- [11]
  prom-           %46.0 = MkArg                    unboundValue, .makeAsMethod[0x55fa1131fe50]_p0, e36.0
  ct              %46.1 = PushContext        lCL   %46.0, from, identical(expr, quote(from)), function(x, y, num.eq=TRUE, single.NA=TRUE, at|..., e36.0
  val?^           %46.2 = CastType                 up %46.0
  env             e46.3 = MkEnv              l     x=%46.2, y=from, num.eq(miss)=true, single.NA(miss)=true, attrib.as.set(miss)=true, ignore.bytecode(miss)=true, ignore.environment(miss)=false, ignore.srcref(miss)=true, parent=R_BaseNamespace, context 1
  val?            %46.4 = Force!<lazy>       !vL   %46.2, e46.3   <val?>
  val?            %46.5 = CallBuiltin        !v    identical(%46.4, from, true, true, true, true, false, true) e46.3
  val?            %46.6 = PopContext         C     %46.5, %46.1   <lgl$->
  lgl$#-          %46.7 = IsType                   %46.6 isA lgl$-
  void                    Branch                   %46.7 -> BB48 (if true) | BB49 (if false)
BB47   <- [11]
  fs              %47.0 = FrameState         R     0x55fa109cc340+382: [%8.4], env=e36.0
  void                    Deopt              !v    %47.0, CallTarget@0x55fa0fb3edc0[Call#7], %11.0   !
BB50   <- [44]
  lgl$-           %50.0 = CastType           d     dn %44.5
  lgl$-           %50.1 = Not                d     %50.0, elided
  lgl$#-          %50.2 = CheckTrueFalse     e     %50.1
  void                    Branch                   %50.2 -> BB34 (if true) | BB28 (if false)
BB51   <- [44]
  void                    Nop                !     
  val?            %51.1 = %44.5
  dr              %51.2 = Typecheck@0x55fa0fb3edc0[Type#8]
  goto BB26
BB19   <- [14]
  (cls|spec|blt)  %19.0 = LdFun              !v    substitute, <0x55fa0ad53468>, e36.0
  prom-           %19.1 = MkArg                    unboundValue, .makeAsMethod[0x55fa1131fe50]_p4, e36.0
  prom-           %19.2 = MkArg                    unboundValue, .makeAsMethod[0x55fa1131fe50]_p5, e36.0
  val?            %19.3 = Call               !v    %19.0(%19.1, %19.2) e36.0   <code->
  void                    StVar              lW    value, %19.3, e36.0
  goto BB16
BB15   <- [14]
  void                    Nop                !     
  goto BB16
BB48   <- [46]
  lgl$-           %48.0 = CastType           d     dn %46.6
  lgl$-           %48.1 = Not                d     %48.0, elided
  lgl$-           %48.2 = AsLogical                %48.1
  lgl$-           %48.3 = LAnd                     %8.5, %48.2
  lgl$-           %48.4 = %48.3
  goto BB14
BB49   <- [46]
  fs              %49.0 = FrameState         R     0x55fa109cc340+431: [%8.5, %46.6], env=e36.0
  void                    Deopt              !v    %49.0, Typecheck@0x55fa0fb3edc0[Type#21], %46.6   !
BB34   <- [50]
  val?^ | miss    %34.0 = LdVar              eR    .ChangeFormals, e36.0
  lgl$#-          %34.1 = Identical                %34.0, function(def, defForArgs, msg="<unidentified c|...
  void                    Branch                   %34.1 -> BB52 (if true) | BB53 (if false)
BB28   <- [50]
  void                    Nop                !     
  goto BB29
BB26   <- [51, 53]
  val?^ | miss    %26.0 = Phi                      %51.1:BB51, %53.1:BB53
  val?^ | miss    %26.1 = %26.0
  dr              %26.2 = Phi                      %51.2:BB51, %53.2:BB53
  dr              %26.3 = %26.2
  fs              %26.4 = FrameState         R     0x55fa109cc340+236: [%44.5], env=e36.0
  void                    Deopt              !v    %26.4, %26.3, %26.1   !
BB16   <- [15, 19]
  val?^ | miss    %16.0 = LdVar              eR    .simpleExtCoerce, e36.0
  val?            %16.1 = Force!<wrapped>    !v    %16.0, e36.0   <cls->
  void                    StVar              lW    f, %16.1, e36.0
  val?^ | miss    %16.3 = LdVar              eR    value, e36.0
  lgl$#-          %16.4 = IsType                   %16.3 isA val?~- | miss
  void                    Branch                   %16.4 -> BB54 (if true) | BB55 (if false)
BB52   <- [34]
  prom-           %52.0 = MkArg                    unboundValue, .makeAsMethod[0x55fa1131fe50]_p11, e36.0
  prom-           %52.1 = MkArg                    unboundValue, .makeAsMethod[0x55fa1131fe50]_p12, e36.0
  val?            %52.2 = Call               !v    function(def, defForArgs, msg="<unidentified c|...(%52.0, %52.1) e36.0   <cls->
  void                    StVar              lW    expr, %52.2, e36.0
  goto BB29
BB53   <- [34]
  void                    Nop                !     
  val?^ | miss    %53.1 = %34.0
  dr              %53.2 = CallTarget@0x55fa0fb3edc0[Call#4]
  goto BB26
BB29   <- [28, 52]
  val?^ | miss    %29.0 = LdVar              eR    body, e36.0
  lgl$#-          %29.1 = Identical                %29.0, function(fun=sys.function(sys.parent())) <(rir|...
  void                    Branch                   %29.1 -> BB56 (if true) | BB57 (if false)
BB54   <- [16]
  val?~- | miss   %54.0 = CastType           d     dn %16.3
  val?-           %54.1 = Force!<value>            %54.0,    <(sym|code)->
  val?^ | miss    %54.2 = LdVar              eR    body<-, e36.0
  lgl$#-          %54.3 = Identical                %54.2, function(fun, envir=environment(fun), value) <|...
  void                    Branch                   %54.3 -> BB58 (if true) | BB59 (if false)
BB55   <- [16]
  void                    Nop                !     
  val?^ | miss    %55.1 = %16.3
  dr              %55.2 = Typecheck@0x55fa0fb3edc0[Type#29]
  goto BB17
BB56   <- [29]
  val?^ | miss    %56.0 = LdVar              eR    expr, e36.0
  val?            %56.1 = Force!<value>      !v    %56.0, e36.0   <cls->
  lgl$#-          %56.2 = CallSafeBuiltin    wed   is.character(%56.1)    <lgl$->
  void                    Branch                   %56.2 -> BB33 (if true) | BB32 (if false)
BB57   <- [29]
  fs              %57.0 = FrameState         R     0x55fa109cc340+304: [], env=e36.0
  void                    Deopt              !v    %57.0, CallTarget@0x55fa0fb3edc0[Call#6], %29.0   !
BB58   <- [54]
  val             %58.0 = ChkMissing         e     %16.1
  lgl$#-          %58.1 = IsType                   %58.0 isA val?~- | miss
  void                    Branch                   %58.1 -> BB60 (if true) | BB61 (if false)
BB59   <- [54]
  void                    Nop                !     
  val?^ | miss    %59.1 = %54.2
  dr              %59.2 = CallTarget@0x55fa0fb3edc0[Call#10]
  goto BB17
BB17   <- [55, 59, 61]
  val?^ | miss    %17.0 = Phi                      %55.1:BB55, %59.1:BB59, %61.1:BB61
  val?^ | miss    %17.1 = %17.0
  dr              %17.2 = Phi                      %55.2:BB55, %59.2:BB59, %61.2:BB61
  dr              %17.3 = %17.2
  fs              %17.4 = FrameState         R     0x55fa109cc340+524: [], env=e36.0
  void                    Deopt              !v    %17.4, %17.3, %17.1   !
BB33   <- [56]
  prom-           %33.0 = MkArg                    %56.1, .makeAsMethod[0x55fa1131fe50]_p10 (!refl), e36.0
  val?~           %33.1 = CastType                 up %33.0
  fs              %33.2 = FrameState         R     0x55fa109cc340+336: [], env=e36.0
  env             e33.3 = (MkEnv)            l     fun=%33.1, parent=R_BaseNamespace, context 0
  env             e33.4 = MaterializeEnv           , e33.3   <@?>
  (cls|spec|blt)  %33.5 = LdFun              !v    get, e33.4
  fs              %33.6 = FrameState         R     0x55fa0e954100+112: [%33.5], env=e33.4, next=%33.2
  void                    Deopt              !v    %33.6, DeadCall@0x55fa0ea25ae8[Call#3], %33.5   !
BB32   <- [56]
  val+            %32.0 = CallSafeBuiltin    wed   body(%56.1)    <(sym|code)->
  void                    StVar              lW    expr, %32.0, e36.0
  goto BB8
BB60   <- [58]
  val-            %60.0 = CastType           d     dn %58.0   <cls->
  prom-           %60.1 = MkArg                    unboundValue, .makeAsMethod[0x55fa1131fe50]_p2, e36.0
  val?            %60.2 = StaticCall         !v    body<-[0x55fa0db66af0](%60.0, %60.1, %54.1) { 0 1n 2n } e36.0   <cls->
  void                    StVar              lW    f, %60.2, e36.0
  val             %60.4 = ChkMissing         e     %60.2
  void                    Visible            v     
  void                    Return             l     %60.2
BB61   <- [58]
  void                    Nop                !     
  val             %61.1 = %58.0
  dr              %61.2 = Typecheck@0x55fa0fb3edc0[Type#30]
  goto BB17
Prom 0:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    expr, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <(sym|code)->
  void                    Return             l     %0.3
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 4:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    strict, e0.0
  val?            %0.2  = Force              !v    %0.1, e0.0   <val?_>
  lgl$#-          %0.3  = CheckTrueFalse     we    %0.2
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    EXPR, e0.0
  void                    Visible            v     
  val?            %2.2  = Force              !     %2.0, e0.0   <val?_>
  val?            %2.3  = %2.2
  goto BB3
BB4   <- [0]
  val?^ | miss    %4.0  = LdVar              eR    from, e0.0
  void                    Visible            v     
  val?            %4.2  = Force              !     %4.0, e0.0   <val?_>
  val?            %4.3  = %4.2
  goto BB3
BB3   <- [2, 4]
  val?            %3.0  = Phi                      %4.3:BB4, %2.3:BB2
  val?            %3.1  = %3.0
  void                    Return             l     %3.1
Prom 5:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     list, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .makeAsMethod[0x55fa1131fe50]_p6, e0.0
  val?            %0.3  = NamedCall          !     %0.1(EXPR=%0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 6:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    expr, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 7:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    expr, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <cls->
  void                    Return             l     %0.3
Prom 8:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    expr, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <cls->
  void                    Return             l     %0.3
Prom 9:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    args, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 10:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    expr, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls->
  void                    Return             l     %0.3
Prom 11:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    expr, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <cls->
  void                    Return             l     %0.3
Prom 12:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !v    length, <0x55fa0ad54a90>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .makeAsMethod[0x55fa1131fe50]_p13, e0.0
  val?            %0.3  = Call               !v    %0.1(%0.2) e0.0   <int$->
  val?            %0.4  = Gt                 !v    %0.3, 1, e0.0   <lgl$->
  lgl$#-          %0.5  = CheckTrueFalse     we    %0.4
  void                    Branch                   %0.5 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    .simpleExtCoerce, e0.0
  void                    Visible            v     
  val?            %2.2  = Force<wrapped>     !     %2.0, e0.0   <cls->
  val?            %2.3  = %2.2
  goto BB3
BB4   <- [0]
  val?^ | miss    %4.0  = LdVar              eR    .simpleIsCoerce, e0.0
  void                    Visible            v     
  val?            %4.2  = Force              !     %4.0, e0.0   <val?_>
  val?            %4.3  = %4.2
  goto BB3
BB3   <- [2, 4]
  val?            %3.0  = Phi                      %4.3:BB4, %2.3:BB2
  val?            %3.1  = %3.0
  void                    Return             l     %3.1
Prom 13:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    args, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str->
  void                    Return             l     %0.3

│ .makeAsMethod[0x55fa1131fe50]                                                │
└──────────────────────────────────────────────────────────────────────────────┘
