
┌──────────────────────────────────────────────────────────────────────────────┐
│ .diag2tT[0x55fa11cb9160]                                                     │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;NonRefl0                             │
│ Properties:                                                                  │
├────── Final PIR Version
.diag2tT[0x55fa11cb9160]
BB0
  val?^           %0.0  = LdArg                    3
  val?^           %0.1  = LdArg                    2
  val?^           %0.2  = LdArg                    1
  val?^           %0.3  = LdArg                    0
  env             e0.4  = MkEnv              l     from=%0.3, uplo=%0.2, kind=%0.1, drop0=%0.0, parent=<env 0x55fa0d1a9f20>, context 1
  (cls|spec|blt)  %0.5  = LdFun              !v    @, <0x55fa0ad53bd8>, <env 0x55fa0d1a9f20>
  prom-           %0.6  = MkArg                    unboundValue, .diag2tT[0x55fa11cb9160]_p0 (!refl), e0.4
  prom-           %0.7  = MkArg                    unboundValue, .diag2tT[0x55fa11cb9160]_p1, e0.4
  val?            %0.8  = Call               !v    %0.5(%0.6, %0.7) e0.4   <real->
  void                    StVar              lW    x, %0.8, e0.4
  (cls|spec|blt)  %0.10 = LdFun              !v    @, <0x55fa0ad53bd8>, e0.4
  prom-           %0.11 = MkArg                    unboundValue, .diag2tT[0x55fa11cb9160]_p2, e0.4
  prom-           %0.12 = MkArg                    unboundValue, .diag2tT[0x55fa11cb9160]_p3, e0.4
  val?            %0.13 = Call               !v    %0.10(%0.11, %0.12) e0.4   <str$->
  lgl$#-          %0.14 = IsType                   %0.13 isA val?-
  void                    Branch                   %0.14 -> BB26 (if true) | BB27 (if false)
BB26   <- [0]
  val?-           %26.0 = CastType           d     dn %0.13   <str$->
  lgl-            %26.1 = Eq                 wed   %26.0, "U", elided   <lgl$->
  lgl$#-          %26.2 = IsType                   %26.1 isA lgl$-
  void                    Branch                   %26.2 -> BB28 (if true) | BB29 (if false)
BB27   <- [0]
  fs              %27.0 = FrameState         R     0x55fa16f83260+88: [%0.13], env=e0.4
  void                    Deopt              !v    %27.0, Typecheck@0x55fa1041b0b0[Type#7], %0.13   !
BB28   <- [26]
  lgl$-           %28.0 = CastType           d     dn %26.1
  lgl$#-          %28.1 = CheckTrueFalse     e     %28.0
  void                    Branch                   %28.1 -> BB24 (if true) | BB5 (if false)
BB29   <- [26]
  void                    Nop                !     
  lgl-            %29.1 = %26.1
  dr              %29.2 = Typecheck@0x55fa1041b0b0[Type#8]
  goto BB3
BB24   <- [28]
  (cls|spec|blt)  %24.0 = LdFun              !v    integer, e0.4
  fs              %24.1 = FrameState         R     0x55fa16f83260+597: [%24.0], env=e0.4
  void                    Deopt              !v    %24.1, DeadCall@0x55fa1041b0b0[Call#11], %24.0   !
BB5   <- [28]
  val?^ | miss    %5.0  = LdVar              eR    &, e0.4
  lgl$#-          %5.1  = Identical                <blt &>, %5.0   <true>
  void                    Branch                   %5.1 -> BB30 (if true) | BB31 (if false)
BB3   <- [29, 31]
  val?^ | miss    %3.0  = Phi                      %29.1:BB29, %31.1:BB31
  val?^ | miss    %3.1  = %3.0
  dr              %3.2  = Phi                      %29.2:BB29, %31.2:BB31
  dr              %3.3  = %3.2
  fs              %3.4  = FrameState         R     0x55fa16f83260+100: [%26.1], env=e0.4
  void                    Deopt              !v    %3.4, %3.3, %3.1   !
BB30   <- [5]
  val?^ | miss    %30.0 = LdVar              eR    drop0, e0.4
  val?            %30.1 = Force!<lazy>       !v    %30.0, e0.4   <lgl$->
  val?^ | miss    %30.2 = LdVar              eR    any0, e0.4
  lgl$#-          %30.3 = Identical                %30.2, function(x) <(rir::DispatchTable*)0x55fa0b4692|...
  void                    Branch                   %30.3 -> BB32 (if true) | BB33 (if false)
BB31   <- [5]
  void                    Nop                !     
  lgl$#-          %31.1 = %5.1
  dr              %31.2 = DeadBranchReached@0x55fa1041b0b0[Test#0]
  goto BB3
BB32   <- [30]
  prom-           %32.0 = MkArg                    unboundValue, .diag2tT[0x55fa11cb9160]_p4, e0.4
  ct              %32.1 = PushContext        lCL   %32.0, any0(x), function(x) <(rir::DispatchTable*)0x55fa0b4692|..., e0.4
  val?^           %32.2 = CastType                 up %32.0
  val?^ | miss    %32.3 = LdVar              eR    is.atomic, <env 0x55fa0d1a9f20>
  lgl$#-          %32.4 = Identical                <blt is.atomic>, %32.3   <true>
  void                    Branch                   %32.4 -> BB34 (if true) | BB35 (if false)
BB33   <- [30]
  fs              %33.0 = FrameState         R     0x55fa16f83260+185: [<blt &>, %30.1], env=e0.4
  void                    Deopt              !v    %33.0, CallTarget@0x55fa1041b0b0[Call#5], %30.2   !
BB34   <- [32]
  env             e34.0 = MkEnv              l     x=%32.2, parent=<env 0x55fa0d1a9f20>, context 1
  val?            %34.1 = Force!<lazy>       !vL   %32.2, e34.0   <real->
  lgl$#-          %34.2 = IsType                   %34.1 isA real-
  void                    Branch                   %34.2 -> BB36 (if true) | BB37 (if false)
BB35   <- [32]
  fs              %35.0 = FrameState         R     0x55fa16f83260+222: [<blt &>, %30.1], env=e0.4
  env             e35.1 = (MkEnv)            l     x=%32.2, parent=<env 0x55fa0d1a9f20>, context 1
  fs              %35.2 = FrameState         R     0x55fa1693ccf0+17: [<blt is.atomic>, %32.4], env=e35.1, next=%35.0
  void                    Deopt              !v    %35.2, DeadBranchReached@0x55fa16b308e8[Test#0], %32.4   !
BB36   <- [34]
  val?^ | miss    %36.0 = LdVar              eR    .Call, e34.0
  lgl$#-          %36.1 = Identical                <blt .Call>, %36.0   <true>
  void                    Branch                   %36.1 -> BB38 (if true) | BB39 (if false)
BB37   <- [34]
  void                    Nop                !     
  val?            %37.1 = %34.1
  dr              %37.2 = Typecheck@0x55fa16b308e8[Type#1]
  goto BB10
BB38   <- [36]
  val?^ | miss    %38.0 = LdVar              eR    R_any0, e34.0
  val?            %38.1 = Force!<value>      !v    %38.0, e34.0   <vec>
  val?^ | miss    %38.2 = LdVar              eR    x, e34.0
  val?            %38.3 = Force!<wrapped>    !v    %38.2, e34.0   <real->
  val?            %38.4 = CallBuiltin        !v    .Call(%38.1, %38.3) e34.0   <lgl$->
  lgl$#-          %38.5 = IsType                   %38.4 isA lgl$-
  void                    Branch                   %38.5 -> BB40 (if true) | BB41 (if false)
BB39   <- [36]
  void                    Nop                !     
  lgl$#-          %39.1 = %36.1
  dr              %39.2 = DeadBranchReached@0x55fa16b308e8[Test#1]
  goto BB10
BB10   <- [37, 39]
  val?^ | miss    %10.0 = Phi                      %37.1:BB37, %39.1:BB39
  val?^ | miss    %10.1 = %10.0
  dr              %10.2 = Phi                      %37.2:BB37, %39.2:BB39
  dr              %10.3 = %10.2
  fs              %10.4 = FrameState         R     0x55fa16f83260+222: [<blt &>, %30.1], env=e0.4
  fs              %10.5 = FrameState         R     0x55fa1693ccf0+69: [<blt is.atomic>, %34.1], env=e34.0, next=%10.4
  void                    Deopt              !v    %10.5, %10.3, %10.1   !
BB40   <- [38]
  lgl$-           %40.0 = CastType           d     dn %38.4
  val?            %40.1 = PopContext         C     %40.0, %32.1   <lgl$->
  lgl$#-          %40.2 = IsType                   %40.1 isA lgl$-
  void                    Branch                   %40.2 -> BB42 (if true) | BB43 (if false)
BB41   <- [38]
  fs              %41.0 = FrameState         R     0x55fa16f83260+222: [<blt &>, %30.1], env=e0.4
  fs              %41.1 = FrameState         R     0x55fa1693ccf0+254: [%38.4], env=e34.0, next=%41.0
  void                    Deopt              !v    %41.1, Typecheck@0x55fa16b308e8[Type#10], %38.4   !
BB42   <- [40]
  lgl$-           %42.0 = CastType           d     dn %40.1
  lgl$#-          %42.1 = IsType                   %30.1 isA lgl$-
  void                    Branch                   %42.1 -> BB44 (if true) | BB45 (if false)
BB43   <- [40]
  void                    Nop                !     
  val?            %43.1 = %40.1
  dr              %43.2 = Typecheck@0x55fa1041b0b0[Type#14]
  goto BB14
BB44   <- [42]
  lgl$-           %44.0 = CastType           d     dn %30.1
  val+            %44.1 = CallSafeBuiltin    wed   &(%44.0, %42.0)    <lgl$->
  lgl$#-          %44.2 = IsType                   %44.1 isA lgl$-
  void                    Branch                   %44.2 -> BB46 (if true) | BB47 (if false)
BB45   <- [42]
  void                    Nop                !     
  val?            %45.1 = %30.1
  dr              %45.2 = Typecheck@0x55fa1041b0b0[Type#12]
  goto BB14
BB14   <- [43, 45]
  val?^ | miss    %14.0 = Phi                      %43.1:BB43, %45.1:BB45
  val?^ | miss    %14.1 = %14.0
  dr              %14.2 = Phi                      %43.2:BB43, %45.2:BB45
  dr              %14.3 = %14.2
  fs              %14.4 = FrameState         R     0x55fa16f83260+222: [<blt &>, %30.1, %40.1], env=e0.4
  void                    Deopt              !v    %14.4, %14.3, %14.1   !
BB46   <- [44]
  lgl$-           %46.0 = CastType           d     dn %44.1
  lgl$#-          %46.1 = CheckTrueFalse     e     %46.0
  void                    Branch                   %46.1 -> BB23 (if true) | BB18 (if false)
BB47   <- [44]
  void                    Nop                !     
  val+            %47.1 = %44.1
  dr              %47.2 = Typecheck@0x55fa1041b0b0[Type#15]
  goto BB16
BB23   <- [46]
  (cls|spec|blt)  %23.0 = LdFun              !v    which, e0.4
  fs              %23.1 = FrameState         R     0x55fa16f83260+445: [%23.0], env=e0.4
  void                    Deopt              !v    %23.1, DeadCall@0x55fa1041b0b0[Call#9], %23.0   !
BB18   <- [46]
  val?^ | miss    %18.0 = LdVar              eR    seq_len, e0.4
  lgl$#-          %18.1 = Identical                <blt seq_len>, %18.0   <true>
  void                    Branch                   %18.1 -> BB48 (if true) | BB49 (if false)
BB16   <- [47, 49]
  val?^ | miss    %16.0 = Phi                      %47.1:BB47, %49.1:BB49
  val?^ | miss    %16.1 = %16.0
  dr              %16.2 = Phi                      %47.2:BB47, %49.2:BB49
  dr              %16.3 = %16.2
  fs              %16.4 = FrameState         R     0x55fa16f83260+244: [%44.1], env=e0.4
  void                    Deopt              !v    %16.4, %16.3, %16.1   !
BB48   <- [18]
  (cls|spec|blt)  %48.0 = LdFun              !v    @, <0x55fa0ad53bd8>, e0.4
  prom-           %48.1 = MkArg                    unboundValue, .diag2tT[0x55fa11cb9160]_p5, e0.4
  prom-           %48.2 = MkArg                    unboundValue, .diag2tT[0x55fa11cb9160]_p6, e0.4
  val?            %48.3 = Call               !v    %48.0(%48.1, %48.2) e0.4   <int->
  lgl$#-          %48.4 = IsType                   %48.3 isA val+   <true>
  lgl$#-          %48.5 = IsType                   %48.3 isA int-
  void                    Branch                   %48.4 -> BB50 (if true) | BB51 (if false)
BB49   <- [18]
  void                    Nop                !     
  lgl$#-          %49.1 = %18.1
  dr              %49.2 = DeadBranchReached@0x55fa1041b0b0[Test#1]
  goto BB16
BB50   <- [48]
  void                    Branch                   %48.5 -> BB52 (if true) | BB53 (if false)
BB51   <- [48]
  void                    Nop                !     
  lgl$#-          %51.1 = %48.4
  dr              %51.2 = DeadBranchReached@0x55fa1041b0b0[Test#3]
  goto BB19
BB52   <- [50]
  int-            %52.0 = CastType           d     dn %48.3
  int$-           %52.1 = Extract1_1D        wed   %52.0, 1, elided   <int$->
  val+            %52.2 = CallSafeBuiltin    wed   seq_len(%52.1)    <int->
  void                    Visible            v     
  (int|real|complex)+ %52.4 = Sub                vwed  %52.2, 1L, elided   <int->
  void                    StVar              lW    i, %52.4, e0.4
  val?^ | miss    %52.6 = LdVar              eR    new, e0.4
  lgl$#-          %52.7 = Identical                %52.6, function(Class, ...) <(rir::DispatchTable*)0x5|...
  void                    Branch                   %52.7 -> BB54 (if true) | BB55 (if false)
BB53   <- [50]
  void                    Nop                !     
  val?            %53.1 = %48.3
  dr              %53.2 = Typecheck@0x55fa1041b0b0[Type#22]
  goto BB19
BB19   <- [51, 53]
  val?^ | miss    %19.0 = Phi                      %51.1:BB51, %53.1:BB53
  val?^ | miss    %19.1 = %19.0
  dr              %19.2 = Phi                      %51.2:BB51, %53.2:BB53
  dr              %19.3 = %19.2
  fs              %19.4 = FrameState         R     0x55fa16f83260+352: [<blt seq_len>, %48.3], env=e0.4
  void                    Deopt              !v    %19.4, %19.3, %19.1   !
BB54   <- [52]
  prom-           %54.0 = MkArg                    unboundValue, .diag2tT[0x55fa11cb9160]_p7, e0.4
  prom-           %54.1 = MkArg                    unboundValue, .diag2tT[0x55fa11cb9160]_p9, e0.4
  prom-           %54.2 = MkArg                    unboundValue, .diag2tT[0x55fa11cb9160]_p12, e0.4
  prom-           %54.3 = MkArg                    unboundValue, .diag2tT[0x55fa11cb9160]_p15, e0.4
  prom-           %54.4 = MkArg                    unboundValue, .diag2tT[0x55fa11cb9160]_p18, e0.4
  prom-           %54.5 = MkArg                    unboundValue, .diag2tT[0x55fa11cb9160]_p19, e0.4
  prom-           %54.6 = MkArg                    unboundValue, .diag2tT[0x55fa11cb9160]_p20 (!refl), e0.4
  prom-           %54.7 = MkArg                    unboundValue, .diag2tT[0x55fa11cb9160]_p21 (!refl), e0.4
  dots-           %54.8 = DotsList           l     diag=%54.1, Dim=%54.2, Dimnames=%54.3, uplo=%54.4, x=%54.5, i=%54.6, j=%54.7
  val?            %54.9 = StaticCall         !     new[0x55fa0b7a2370](%54.0, %54.8) { 0 1n 2n 3n 4n 5n 6n 7n } e0.4   <other>
  void                    Return             l     %54.9
BB55   <- [52]
  fs              %55.0 = FrameState         R     0x55fa16f83260+638: [], env=e0.4
  void                    Deopt              !v    %55.0, CallTarget@0x55fa1041b0b0[Call#12], %52.6   !
Prom 0:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    from, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    x, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    from, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 3:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    diag, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 4:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    x, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <real->
  void                    Return             l     %0.3
Prom 5:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    from, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 6:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    Dim, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 7:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     paste0, <0x55fa0ae9d3c8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .diag2tT[0x55fa11cb9160]_p8, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2, "tTMatrix") e0.0   <str$->
  void                    Return             l     %0.3
Prom 8:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    kind, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 9:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, <0x55fa0ad53bd8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .diag2tT[0x55fa11cb9160]_p10, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .diag2tT[0x55fa11cb9160]_p11, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <str$->
  void                    Return             l     %0.4
Prom 10:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    from, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 11:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    diag, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 12:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, <0x55fa0ad53bd8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .diag2tT[0x55fa11cb9160]_p13, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .diag2tT[0x55fa11cb9160]_p14, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <int->
  void                    Return             l     %0.4
Prom 13:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    from, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 14:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    Dim, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 15:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, <0x55fa0ad53bd8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .diag2tT[0x55fa11cb9160]_p16, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .diag2tT[0x55fa11cb9160]_p17, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <vec->
  void                    Return             l     %0.4
Prom 16:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    from, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 17:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    Dimnames, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 18:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    uplo, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 19:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    x, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <real->
  void                    Return             l     %0.3
Prom 20:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    i, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <int->
  void                    Return             l     %0.3
Prom 21:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    i, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <int->
  void                    Return             l     %0.3

│ .diag2tT[0x55fa11cb9160]                                                     │
└──────────────────────────────────────────────────────────────────────────────┘
