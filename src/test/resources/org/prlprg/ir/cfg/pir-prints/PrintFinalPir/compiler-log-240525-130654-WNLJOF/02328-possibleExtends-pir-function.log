
┌──────────────────────────────────────────────────────────────────────────────┐
│ possibleExtends[0x55fa17750c10]                                              │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch                                      │
│ Properties:                                                                  │
├────── Final PIR Version
possibleExtends[0x55fa17750c10]
BB0
  val?^           %0.0  = LdArg                    3
  val?^           %0.1  = LdArg                    2
  val?^           %0.2  = LdArg                    1
  val?^           %0.3  = LdArg                    0
  val?^ | miss    %0.4  = LdVar              eR    .identC, <env 0x55fa0b35b378>
  lgl$#-          %0.5  = Identical                %0.4, function(c1=NULL, c2=NULL) <(rir::DispatchTabl|...
  void                    Branch                   %0.5 -> BB61 (if true) | BB62 (if false)
BB61   <- [0]
  env             e61.0 = MkEnv              l     class1=%0.3, class2=%0.2, ClassDef1=%0.1, ClassDef2=%0.0, parent=<env 0x55fa0b35b378>, context 1
  prom-           %61.1 = MkArg                    unboundValue, possibleExtends[0x55fa17750c10]_p0, e61.0
  prom-           %61.2 = MkArg                    unboundValue, possibleExtends[0x55fa17750c10]_p1, e61.0
  val?            %61.3 = StaticCall         !v    .identC[0x55fa0e7caf10](%61.1, %61.2) e61.0   <lgl$->
  lgl$#-          %61.4 = IsType                   %61.3 isA lgl$-
  void                    Branch                   %61.4 -> BB63 (if true) | BB64 (if false)
BB62   <- [0]
  env             e62.0 = (MkEnv)            l     class1=%0.3, class2=%0.2, ClassDef1=%0.1, ClassDef2=%0.0, parent=<env 0x55fa0b35b378>, context 1
  fs              %62.1 = FrameState         R     0x55fa0b7e65d0+0: [], env=e62.0
  void                    Deopt              !v    %62.1, CallTarget@0x55fa0d79bf80[Call#3], %0.4
BB63   <- [61]
  lgl$-           %63.0 = CastType           d     dn %61.3
  lgl$-           %63.1 = AsLogical                %63.0
  lgl$#-          %63.2 = Identical                %63.1, true
  void                    Branch                   %63.2 -> BB59 (if true) | BB5 (if false)
BB64   <- [61]
  void                    Nop                !     
  val?            %64.1 = %61.3
  dr              %64.2 = Typecheck@0x55fa0d79bf80[Type#9]
  goto BB3
BB59   <- [63]
  void                    Nop                !     
  lgl$-           %59.1 = %63.1
  goto BB8
BB5   <- [63]
  val?^ | miss    %5.0  = LdVar              eR    .identC, e61.0
  lgl$#-          %5.1  = Identical                %5.0, function(c1=NULL, c2=NULL) <(rir::DispatchTabl|...
  void                    Branch                   %5.1 -> BB65 (if true) | BB66 (if false)
BB3   <- [64, 66]
  val?^ | miss    %3.0  = Phi                      %64.1:BB64, %66.1:BB66
  val?^ | miss    %3.1  = %3.0
  dr              %3.2  = Phi                      %64.2:BB64, %66.2:BB66
  dr              %3.3  = %3.2
  fs              %3.4  = FrameState         R     0x55fa0b7e65d0+37: [%61.3], env=e61.0
  void                    Deopt              !v    %3.4, %3.3, %3.1   !
BB8   <- [59, 67]
  lgl$-           %8.0  = Phi                      %67.3:BB67, %59.1:BB59
  lgl$-           %8.1  = %8.0
  lgl$#-          %8.2  = CheckTrueFalse     e     %8.1
  void                    Branch                   %8.2 -> BB58 (if true) | BB9 (if false)
BB65   <- [5]
  prom-           %65.0 = MkArg                    unboundValue, possibleExtends[0x55fa17750c10]_p2, e61.0
  val?            %65.1 = StaticCall         !v    .identC[0x55fa0caf9b20](%65.0, "ANY") e61.0   <lgl$->
  lgl$#-          %65.2 = IsType                   %65.1 isA lgl$-
  void                    Branch                   %65.2 -> BB67 (if true) | BB68 (if false)
BB66   <- [5]
  void                    Nop                !     
  val?^ | miss    %66.1 = %5.0
  dr              %66.2 = CallTarget@0x55fa0d79bf80[Call#4]
  goto BB3
BB58   <- [8]
  void                    Visible            v     
  lgl$#-          %58.1 = true
  goto BB43
BB9   <- [8]
  val?^ | miss    %9.0  = LdVar              eR    ClassDef1, e61.0
  val?            %9.1  = Force!<lazy>       !v    %9.0, e61.0   <other>
  lgl$-           %9.2  = Is                       %9.1, NULL
  lgl$#-          %9.3  = CheckTrueFalse     e     %9.2
  void                    Branch                   %9.3 -> BB57 (if true) | BB10 (if false)
BB67   <- [65]
  lgl$-           %67.0 = CastType           d     dn %65.1
  lgl$-           %67.1 = AsLogical                %67.0
  lgl$-           %67.2 = LOr                      %63.1, %67.1
  lgl$-           %67.3 = %67.2
  goto BB8
BB68   <- [65]
  fs              %68.0 = FrameState         R     0x55fa0b7e65d0+86: [%63.1, %65.1], env=e61.0
  void                    Deopt              !v    %68.0, Typecheck@0x55fa0d79bf80[Type#11], %65.1   !
BB43   <- [57, 58, 42]
  val?            %43.0 = Phi                      %42.2:BB42, %57.1:BB57, %58.1:BB58
  val?            %43.1 = %43.0
  void                    Return             l     %43.1
BB57   <- [9]
  void                    Visible            v     
  lgl$#-          %57.1 = false
  goto BB43
BB10   <- [9]
  (cls|spec|blt)  %10.0 = LdFun              !v    @, <0x55fa0ad53bd8>, e61.0
  prom-           %10.1 = MkArg                    unboundValue, possibleExtends[0x55fa17750c10]_p3, e61.0
  prom-           %10.2 = MkArg                    unboundValue, possibleExtends[0x55fa17750c10]_p4, e61.0
  val?            %10.3 = Call               !v    %10.0(%10.1, %10.2) e61.0   <vec+>
  void                    StVar              lW    ext, %10.3, e61.0
  lgl$#-          %10.5 = IsType                   %10.3 isA val+   <true>
  val             %10.6 = ChkMissing         e     %10.3
  void                    Branch                   %10.5 -> BB69 (if true) | BB70 (if false)
BB69   <- [10]
  val?^ | miss    %69.0 = LdVar              eR    class2, e61.0
  val?            %69.1 = Force!<wrapped>    !v    %69.0, e61.0   <str$+>
  lgl$#-          %69.2 = IsType                   %69.1 isA val?+
  lgl$#-          %69.3 = IsType                   %10.3 isA val?+
  void                    Branch                   %69.3 -> BB71 (if true) | BB72 (if false)
BB70   <- [10]
  fs              %70.0 = FrameState         R     0x55fa0b7e65d0+199: [], env=e61.0
  void                    Deopt              !v    %70.0, DeadBranchReached@0x55fa0d79bf80[Test#1], %10.5   !
BB71   <- [69]
  val?+           %71.0 = CastType           d     dn %10.3   <vec+>
  void                    Branch                   %69.2 -> BB73 (if true) | BB74 (if false)
BB72   <- [69]
  void                    Nop                !     
  val?            %72.1 = %10.3
  dr              %72.2 = Typecheck@0x55fa0d79bf80[Type#15]
  goto BB13
BB73   <- [71]
  val?+           %73.0 = CastType           d     dn %69.1   <str$+>
  val?            %73.1 = Extract2_1D        wed   %71.0, %73.0, elided   <(nil|other)>
  lgl$-           %73.2 = Is                       %73.1, NULL
  void                    StVar              lW    contained, %73.1, e61.0
  lgl$-           %73.4 = Not                d     %73.2, elided
  lgl$#-          %73.5 = CheckTrueFalse     e     %73.4
  void                    Branch                   %73.5 -> BB56 (if true) | BB15 (if false)
BB74   <- [71]
  void                    Nop                !     
  val?            %74.1 = %69.1
  dr              %74.2 = Typecheck@0x55fa0d79bf80[Type#18]
  goto BB13
BB13   <- [72, 74]
  val?^ | miss    %13.0 = Phi                      %72.1:BB72, %74.1:BB74
  val?^ | miss    %13.1 = %13.0
  dr              %13.2 = Phi                      %72.2:BB72, %74.2:BB74
  dr              %13.3 = %13.2
  fs              %13.4 = FrameState         R     0x55fa0b7e65d0+253: [%10.3, %69.1], env=e61.0
  void                    Deopt              !v    %13.4, %13.3, %13.1   !
BB56   <- [73]
  val             %56.0 = ChkMissing         e     %73.1
  void                    Visible            v     
  val?            %56.2 = %73.1
  goto BB42
BB15   <- [73]
  val?^ | miss    %15.0 = LdVar              eR    ClassDef2, e61.0
  val?            %15.1 = Force!<lazy>       !v    %15.0, e61.0   <other>
  lgl$-           %15.2 = Is                       %15.1, NULL
  lgl$#-          %15.3 = CheckTrueFalse     e     %15.2
  void                    Branch                   %15.3 -> BB55 (if true) | BB16 (if false)
BB42   <- [56, 41]
  val?            %42.0 = Phi                      %41.2:BB41, %56.2:BB56
  val?            %42.1 = %42.0
  val?            %42.2 = %42.1
  goto BB43
BB55   <- [15]
  void                    Visible            v     
  lgl$#-          %55.1 = false
  goto BB41
BB16   <- [15]
  (cls|spec|blt)  %16.0 = LdFun              !v    @, <0x55fa0ad53bd8>, e61.0
  prom-           %16.1 = MkArg                    unboundValue, possibleExtends[0x55fa17750c10]_p5, e61.0
  prom-           %16.2 = MkArg                    unboundValue, possibleExtends[0x55fa17750c10]_p6, e61.0
  val?            %16.3 = Call               !v    %16.0(%16.1, %16.2) e61.0   <vec+>
  void                    StVar              lW    subs, %16.3, e61.0
  val?^ | miss    %16.5 = LdVar              eR    .identC, e61.0
  lgl$#-          %16.6 = Identical                %16.5, function(c1=NULL, c2=NULL) <(rir::DispatchTabl|...
  void                    Branch                   %16.6 -> BB75 (if true) | BB76 (if false)
BB41   <- [55, 40]
  val?            %41.0 = Phi                      %40.2:BB40, %55.1:BB55
  val?            %41.1 = %41.0
  val?            %41.2 = %41.1
  goto BB42
BB75   <- [16]
  prom-           %75.0 = MkArg                    unboundValue, possibleExtends[0x55fa17750c10]_p7, e61.0
  val?            %75.1 = StaticCall         !v    .identC[0x55fa0caf9b20](%75.0, "classRepresentation") e61.0   <lgl$->
  lgl$#-          %75.2 = IsType                   %75.1 isA lgl$-
  void                    Branch                   %75.2 -> BB77 (if true) | BB78 (if false)
BB76   <- [16]
  fs              %76.0 = FrameState         R     0x55fa0b7e65d0+364: [], env=e61.0
  void                    Deopt              !v    %76.0, CallTarget@0x55fa0d79bf80[Call#7], %16.5   !
BB77   <- [75]
  lgl$-           %77.0 = CastType           d     dn %75.1
  lgl$-           %77.1 = Not                d     %77.0, elided
  lgl$-           %77.2 = AsLogical                %77.1
  lgl$#-          %77.3 = Identical                %77.2, false
  void                    Branch                   %77.3 -> BB54 (if true) | BB21 (if false)
BB78   <- [75]
  fs              %78.0 = FrameState         R     0x55fa0b7e65d0+401: [%75.1], env=e61.0
  void                    Deopt              !v    %78.0, Typecheck@0x55fa0d79bf80[Type#26], %75.1   !
BB54   <- [77]
  void                    Nop                !     
  lgl$-           %54.1 = %77.2
  goto BB22
BB21   <- [77]
  (cls|spec|blt)  %21.0 = LdFun              !v    isClassUnion, e61.0
  prom-           %21.1 = MkArg                    unboundValue, possibleExtends[0x55fa17750c10]_p9, e61.0
  val?            %21.2 = Call               !v    %21.0(%21.1) e61.0   <val?_>
  lgl$-           %21.3 = AsLogical          e     %21.2
  lgl$-           %21.4 = LAnd                     %77.2, %21.3
  lgl$-           %21.5 = %21.4
  goto BB22
BB22   <- [54, 21]
  lgl$-           %22.0 = Phi                      %21.5:BB21, %54.1:BB54
  lgl$-           %22.1 = %22.0
  lgl$#-          %22.2 = CheckTrueFalse     e     %22.1
  void                    Branch                   %22.2 -> BB50 (if true) | BB25 (if false)
BB50   <- [22]
  val?^ | miss    %50.0 = LdVar              eR    any, e61.0
  lgl$#-          %50.1 = Identical                <blt any>, %50.0   <@?>
  void                    Branch                   %50.1 -> BB53 (if true) | BB51 (if false)
BB25   <- [22]
  val?^ | miss    %25.0 = LdVar              eR    match, e61.0
  lgl$#-          %25.1 = Identical                %25.0, function(x, table, nomatch=NA, incomparables=N|...
  void                    Branch                   %25.1 -> BB79 (if true) | BB80 (if false)
BB53   <- [50]
  (cls|spec|blt)  %53.0 = LdFun              !v    %in%, e61.0
  prom-           %53.1 = MkArg                    unboundValue, possibleExtends[0x55fa17750c10]_p21, e61.0
  prom-           %53.2 = MkArg                    unboundValue, possibleExtends[0x55fa17750c10]_p25, e61.0
  val?            %53.3 = Call               !v    %53.0(%53.1, %53.2) e61.0   <val?_>
  val?            %53.4 = CallBuiltin        !     any(%53.3) e61.0
  val?            %53.5 = %53.4
  goto BB52
BB51   <- [50]
  (cls|spec|blt)  %51.0 = LdFun              !v    %in%, e61.0
  prom-           %51.1 = MkArg                    unboundValue, possibleExtends[0x55fa17750c10]_p15, e61.0
  prom-           %51.2 = MkArg                    unboundValue, possibleExtends[0x55fa17750c10]_p19, e61.0
  val?            %51.3 = Call               !v    %51.0(%51.1, %51.2) e61.0   <val?_>
  val?            %51.4 = CallBuiltin        !     any(%51.3) e61.0
  val?            %51.5 = %51.4
  goto BB52
BB79   <- [25]
  val?^ | miss    %79.0 = LdVar              eR    class1, e61.0
  val?            %79.1 = Force!<wrapped>    !v    %79.0, e61.0   <str$+>
  val?^ | miss    %79.2 = LdVar              eR    names, e61.0
  lgl$#-          %79.3 = Identical                %79.2, <blt names>
  void                    Branch                   %79.3 -> BB81 (if true) | BB82 (if false)
BB80   <- [25]
  fs              %80.0 = FrameState         R     0x55fa0b7e65d0+453: [%22.1], env=e61.0
  void                    Deopt              !v    %80.0, CallTarget@0x55fa0d79bf80[Call#10], %25.0   !
BB52   <- [51, 53]
  val?            %52.0 = Phi                      %51.5:BB51, %53.5:BB53   <val?_>
  val?            %52.1 = %52.0
  val?            %52.2 = %52.1
  goto BB40
BB81   <- [79]
  val?^ | miss    %81.0 = LdVar              eR    subs, e61.0
  val?            %81.1 = Force!<value>      !v    %81.0, e61.0   <vec+>
  val?            %81.2 = CallBuiltin        !v    names(%81.1) e61.0   <(nil|str)->
  lgl$#-          %81.3 = IsType                   %81.2 isA val?+
  lgl$#-          %81.4 = IsType                   %79.1 isA val?+
  void                    Branch                   %81.4 -> BB83 (if true) | BB84 (if false)
BB82   <- [79]
  prom-           %82.0 = MkArg                    %79.1, possibleExtends[0x55fa17750c10]_p10 (!refl), e61.0
  val?~           %82.1 = CastType                 up %82.0
  prom-           %82.2 = MkArg                    unboundValue, possibleExtends[0x55fa17750c10]_p11, e61.0
  val?^           %82.3 = CastType                 up %82.2
  fs              %82.4 = FrameState         R     0x55fa0b7e65d0+496: [], env=e61.0
  env             e82.5 = (MkEnv)            l     x=%82.1, table=%82.3, nomatch(miss)=NA, incomparables(miss)=nil, parent=R_BaseNamespace, context 0
  fs              %82.6 = FrameState         R     0x55fa0b568d40+9: [%79.1], env=e82.5, next=%82.4
  void                    Deopt              !v    %82.6, CallTarget@0x55fa0d79bf80[Call#11], %79.2   !
BB40   <- [52, 39]
  val?            %40.0 = Phi                      %39.2:BB39, %52.2:BB52
  val?            %40.1 = %40.0
  val?            %40.2 = %40.1
  goto BB41
BB83   <- [81]
  val?+           %83.0 = CastType           d     dn %79.1   <(int|str)+>
  void                    Branch                   %81.3 -> BB85 (if true) | BB86 (if false)
BB84   <- [81]
  void                    Nop                !     
  val?            %84.1 = %79.1
  dr              %84.2 = Typecheck@0x55fa0b5bbcb0[Type#0]
  goto BB28
BB85   <- [83]
  val?+           %85.0 = CastType           d     dn %81.2   <(nil|str)->
  val+            %85.1 = CallSafeBuiltin    wed   match(%83.0, %85.0, NA, nil)    <int$->
  lgl$#-          %85.2 = IsType                   %85.1 isA int$-
  void                    Branch                   %85.2 -> BB87 (if true) | BB88 (if false)
BB86   <- [83]
  void                    Nop                !     
  val?            %86.1 = %81.2
  dr              %86.2 = Typecheck@0x55fa0b5bbcb0[Type#1]
  goto BB28
BB28   <- [84, 86]
  val?^ | miss    %28.0 = Phi                      %84.1:BB84, %86.1:BB86
  val?^ | miss    %28.1 = %28.0
  dr              %28.2 = Phi                      %84.2:BB84, %86.2:BB86
  dr              %28.3 = %28.2
  prom-           %28.4 = MkArg                    %81.2, possibleExtends[0x55fa17750c10]_p11 (!refl), e61.0
  val?~           %28.5 = CastType                 up %28.4
  prom-           %28.6 = MkArg                    %79.1, possibleExtends[0x55fa17750c10]_p10 (!refl), e61.0
  val?~           %28.7 = CastType                 up %28.6
  fs              %28.8 = FrameState         R     0x55fa0b7e65d0+496: [], env=e61.0
  env             e28.9 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%28.5, x=%28.7, parent=R_BaseNamespace, context 0
  fs              %28.10 = FrameState         R     0x55fa0b568d40+23: [%79.1, %81.2], env=e28.9, next=%28.8
  void                    Deopt              !v    %28.10, %28.3, %28.1   !
BB87   <- [85]
  int$-           %87.0 = CastType           d     dn %85.1
  void                    StVar              lW    i, %87.0, e61.0
  val?^ | miss    %87.2 = LdVar              eR    is.na, e61.0
  lgl$#-          %87.3 = Identical                <blt is.na>, %87.2   <true>
  void                    Branch                   %87.3 -> BB89 (if true) | BB90 (if false)
BB88   <- [85]
  prom-           %88.0 = MkArg                    %85.0, possibleExtends[0x55fa17750c10]_p11 (!refl), e61.0
  val?~           %88.1 = CastType                 up %88.0
  prom-           %88.2 = MkArg                    %83.0, possibleExtends[0x55fa17750c10]_p10 (!refl), e61.0
  val?~           %88.3 = CastType                 up %88.2
  fs              %88.4 = FrameState         R     0x55fa0b7e65d0+496: [], env=e61.0
  env             e88.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%88.1, x=%88.3, parent=R_BaseNamespace, context 0
  fs              %88.6 = FrameState         R     0x55fa0b568d40+69: [%85.1], env=e88.5, next=%88.4
  void                    Deopt              !v    %88.6, Typecheck@0x55fa0d79bf80[Type#32], %85.1   !
BB89   <- [87]
  lgl$-           %89.0 = CallSafeBuiltin    wed   is.na(%87.0)    <lgl$->
  lgl$-           %89.1 = Not                d     %89.0, elided
  int-            %89.2 = Extract1_1D        wed   %87.0, %89.1, elided   <int->
  void                    StVar              lW    i, %89.2, e61.0
  val?^ | miss    %89.4 = LdVar              eR    length, e61.0
  lgl$#-          %89.5 = Identical                <blt length>, %89.4   <true>
  void                    Branch                   %89.5 -> BB91 (if true) | BB92 (if false)
BB90   <- [87]
  fs              %90.0 = FrameState         R     0x55fa0b7e65d0+510: [], env=e61.0
  void                    Deopt              !v    %90.0, DeadBranchReached@0x55fa0d79bf80[Test#3], %87.3   !
BB91   <- [89]
  (int|real)$-    %91.0 = CallSafeBuiltin    wed   length(%89.2)    <int$->
  lgl$#-          %91.1 = IsType                   %91.0 isA int$-
  void                    Branch                   %91.1 -> BB93 (if true) | BB94 (if false)
BB92   <- [89]
  fs              %92.0 = FrameState         R     0x55fa0b7e65d0+668: [], env=e61.0
  void                    Deopt              !v    %92.0, DeadBranchReached@0x55fa0d79bf80[Test#4], %89.5   !
BB93   <- [91]
  int$-           %93.0 = CastType           d     dn %91.0
  lgl$#-          %93.1 = CheckTrueFalse     e     %93.0
  void                    Branch                   %93.1 -> BB44 (if true) | BB38 (if false)
BB94   <- [91]
  fs              %94.0 = FrameState         R     0x55fa0b7e65d0+759: [%91.0], env=e61.0
  void                    Deopt              !v    %94.0, Typecheck@0x55fa0d79bf80[Type#42], %91.0   !
BB44   <- [93]
  val?^ | miss    %44.0 = LdVar              eR    subs, e61.0
  val?            %44.1 = Force!             !v    %44.0, e61.0   <val?_>
  lgl$#-          %44.2 = IsType                   %44.1 isA val+   <@?>
  void                    Branch                   %44.2 -> BB47 (if true) | BB45 (if false)
BB38   <- [93]
  void                    Visible            v     
  lgl$#-          %38.1 = false
  goto BB39
BB47   <- [44]
  val?^ | miss    %47.0 = LdVar              eR    i, e61.0
  val?            %47.1 = Force!             !v    %47.0, e61.0   <val?_>
  lgl$#-          %47.2 = IsType                   %47.1 isA val?+
  void                    Branch                   %47.2 -> BB95 (if true) | BB96 (if false)
BB45   <- [44]
  prom-           %45.0 = MkArg                    unboundValue, possibleExtends[0x55fa17750c10]_p13, e61.0
  prom-           %45.1 = %45.0
  goto BB46
BB39   <- [38, 46]
  val?            %39.0 = Phi                      %38.1:BB38, %46.4:BB46
  val?            %39.1 = %39.0
  val?            %39.2 = %39.1
  goto BB40
BB95   <- [47]
  val?+           %95.0 = CastType           d     dn %47.1   <val?_>
  val?            %95.1 = Extract1_1D        wed   %95.0, 1L, elided   <val?_>
  val?            %95.2 = %95.1
  goto BB46
BB96   <- [47]
  fs              %96.0 = FrameState         R     0x55fa0b7e65d0+835: [%44.1, %47.1], env=e61.0
  void                    Deopt              !v    %96.0, Typecheck@0x55fa0d79bf80[Type#46], %47.1   !
BB46   <- [45, 95]
  val?            %46.0 = Phi                      %95.2:BB95, %45.1:BB45
  val?            %46.1 = %46.0
  val?            %46.2 = Extract2_1D        !v    %44.1, %46.1, e61.0   <val?_>
  void                    Visible            v     
  val?            %46.4 = %46.2
  goto BB39
Prom 0:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    class1, e0.0
  val?            %0.2  = Force<lazy>        !v    %0.1, e0.0   <str$+>
  val?            %0.3  = Extract2_1D        !v    %0.2, 1L, e0.0   <str$->
  void                    Visible            v     
  void                    Return             l     %0.3
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    class2, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str$+>
  void                    Return             l     %0.3
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    class2, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$+>
  void                    Return             l     %0.3
Prom 3:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    ClassDef1, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 4:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    contains, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 5:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    ClassDef2, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 6:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    subclasses, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 7:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     class, <0x55fa0ad54748>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, possibleExtends[0x55fa17750c10]_p8, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <str$+>
  void                    Return             l     %0.3
Prom 8:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    ClassDef2, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <other>
  void                    Return             l     %0.3
Prom 9:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    ClassDef2, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 10:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    class1, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$+>
  void                    Return             l     %0.3
Prom 11:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     names, <0x55fa0ad54470>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, possibleExtends[0x55fa17750c10]_p12, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <(nil|str)->
  void                    Return             l     %0.3
Prom 12:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    subs, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 13:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    i, e0.0
  val?            %0.2  = Force              !v    %0.1, e0.0   <val?_>
  val?            %0.3  = Extract1_1D        !v    %0.2, 1L, e0.0   <val?_>
  void                    Visible            v     
  void                    Return             l     %0.3
Prom 15:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     c, e0.0
  prom-           %0.2  = MkArg                    unboundValue, possibleExtends[0x55fa17750c10]_p16, e0.0
  prom-           %0.3  = MkArg                    unboundValue, possibleExtends[0x55fa17750c10]_p17, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 16:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    class1, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 17:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     names, e0.0
  prom-           %0.2  = MkArg                    unboundValue, possibleExtends[0x55fa17750c10]_p18, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 18:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    ext, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 19:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     names, e0.0
  prom-           %0.2  = MkArg                    unboundValue, possibleExtends[0x55fa17750c10]_p20, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 20:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    subs, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 21:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     c, e0.0
  prom-           %0.2  = MkArg                    unboundValue, possibleExtends[0x55fa17750c10]_p22, e0.0
  prom-           %0.3  = MkArg                    unboundValue, possibleExtends[0x55fa17750c10]_p23, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 22:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    class1, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 23:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     names, e0.0
  prom-           %0.2  = MkArg                    unboundValue, possibleExtends[0x55fa17750c10]_p24, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 24:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    ext, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 25:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     names, e0.0
  prom-           %0.2  = MkArg                    unboundValue, possibleExtends[0x55fa17750c10]_p26, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 26:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    subs, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3

│ possibleExtends[0x55fa17750c10]                                              │
└──────────────────────────────────────────────────────────────────────────────┘
