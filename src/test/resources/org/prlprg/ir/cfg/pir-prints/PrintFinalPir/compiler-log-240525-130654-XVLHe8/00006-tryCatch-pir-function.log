
┌──────────────────────────────────────────────────────────────────────────────┐
│ tryCatch[0x557a4a6c1e70]                                                     │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;Eager1,NonRefl1,!Obj1 miss: 1        │
│ Properties:                                                                  │
├────── Final PIR Version
tryCatch[0x557a4a6c1e70]
BB0
  dots+           %0.0  = LdArg                    1
  val?^           %0.1  = LdArg                    0
  env             e0.2  = MkEnv              l     expr=%0.1, ...=%0.0, finally(miss)=missingArg, parent=R_BaseNamespace, context 1
  cls             %0.3  = MkCls                    tryCatchList, e0.2
  cls             %0.4  = MkCls                    tryCatchOne, e0.2
  *dots-          %0.5  = ExpandDots               %0.0
  void                    StVar              lW    tryCatchList, %0.3, e0.2
  void                    StVar              lW    tryCatchOne, %0.4, e0.2
  val?            %0.8  = NamedCall          !v    <blt list>(.xpandDotsTrigger=%0.5) e0.2   <vec$+>
  void                    StVar              lW    handlers, %0.8, e0.2
  lgl$#-          %0.10 = IsType                   %0.8 isA val?+
  val?^ | miss    %0.11 = LdVar              eR    names, e0.2
  lgl$#-          %0.12 = Identical                <blt names>, %0.11   <true>
  void                    Branch                   %0.12 -> BB46 (if true) | BB47 (if false)
BB46   <- [0]
  val             %46.0 = ChkMissing         e     %0.8
  void                    Branch                   %0.10 -> BB48 (if true) | BB49 (if false)
BB47   <- [0]
  void                    Nop                !     
  lgl$#-          %47.1 = %0.12
  dr              %47.2 = DeadBranchReached@0x557a49338da0[Test#0]
  goto BB45
BB48   <- [46]
  val?+           %48.0 = CastType           d     dn %0.8   <vec$+>
  val+            %48.1 = CallSafeBuiltin    wed   names(%48.0)    <str$->
  void                    StVar              lW    classes, %48.1, e0.2
  val?^ | miss    %48.3 = LdVar              eR    parent.frame, e0.2
  lgl$#-          %48.4 = Identical                %48.3, function(n=1) <(rir::DispatchTable*)0x557a4a57|...
  void                    Branch                   %48.4 -> BB50 (if true) | BB51 (if false)
BB49   <- [46]
  void                    Nop                !     
  val?            %49.1 = %0.8
  dr              %49.2 = Typecheck@0x557a49338da0[Type#1]
  goto BB45
BB45   <- [47, 49]
  val?^ | miss    %45.0 = Phi                      %47.1:BB47, %49.1:BB49
  val?^ | miss    %45.1 = %45.0
  dr              %45.2 = Phi                      %47.2:BB47, %49.2:BB49
  dr              %45.3 = %45.2
  fs              %45.4 = FrameState         R     0x557a4a57f9a0+151: [], env=e0.2
  void                    Deopt              !v    %45.4, %45.3, %45.1   !
BB50   <- [48]
  val?            %50.0 = StaticCall         !v    parent.frame[0x557a4a5fb6f0]() e0.2   <env->
  void                    StVar              lW    parentenv, %50.0, e0.2
  val?^ | miss    %50.2 = LdVar              eR    length, e0.2
  lgl$#-          %50.3 = Identical                <blt length>, %50.2   <true>
  void                    Branch                   %50.3 -> BB52 (if true) | BB53 (if false)
BB51   <- [48]
  fs              %51.0 = FrameState         R     0x557a4a57f9a0+256: [], env=e0.2
  void                    Deopt              !v    %51.0, CallTarget@0x557a49338da0[Call#3], %48.3   !
BB52   <- [50]
  val?^ | miss    %52.0 = LdVar              eR    classes, e0.2
  lgl$#-          %52.1 = IsType                   %52.0 isA val?~- | miss
  void                    Branch                   %52.1 -> BB54 (if true) | BB55 (if false)
BB53   <- [50]
  void                    Nop                !     
  lgl$#-          %53.1 = %50.3
  dr              %53.2 = DeadBranchReached@0x557a49338da0[Test#1]
  goto BB5
BB54   <- [52]
  val?~- | miss   %54.0 = CastType           d     dn %52.0
  val?-           %54.1 = Force!<value>            %54.0,    <str$->
  (int|real)$-    %54.2 = CallSafeBuiltin    wed   length(%54.1)    <int$->
  lgl$#-          %54.3 = IsType                   %54.2 isA int$-
  void                    Branch                   %54.3 -> BB56 (if true) | BB57 (if false)
BB55   <- [52]
  void                    Nop                !     
  val?^ | miss    %55.1 = %52.0
  dr              %55.2 = Typecheck@0x557a49338da0[Type#7]
  goto BB5
BB5   <- [53, 55]
  val?^ | miss    %5.0  = Phi                      %53.1:BB53, %55.1:BB55
  val?^ | miss    %5.1  = %5.0
  dr              %5.2  = Phi                      %53.2:BB53, %55.2:BB55
  dr              %5.3  = %5.2
  fs              %5.4  = FrameState         R     0x557a4a57f9a0+297: [], env=e0.2
  void                    Deopt              !v    %5.4, %5.3, %5.1   !
BB56   <- [54]
  int$-           %56.0 = CastType           d     dn %54.2
  val?^ | miss    %56.1 = LdVar              eR    handlers, e0.2
  lgl$#-          %56.2 = IsType                   %56.1 isA val?~+ | miss
  void                    Branch                   %56.2 -> BB58 (if true) | BB59 (if false)
BB57   <- [54]
  void                    Nop                !     
  (int|real)$-    %57.1 = %54.2
  dr              %57.2 = Typecheck@0x557a49338da0[Type#8]
  goto BB7
BB58   <- [56]
  val?~+ | miss   %58.0 = CastType           d     dn %56.1
  val?+           %58.1 = Force!<value>            %58.0,    <vec$+>
  (int|real)$-    %58.2 = CallSafeBuiltin    wed   length(%58.1)    <int$->
  lgl$#-          %58.3 = IsType                   %58.2 isA int$-
  void                    Branch                   %58.3 -> BB60 (if true) | BB61 (if false)
BB59   <- [56]
  void                    Nop                !     
  val?^ | miss    %59.1 = %56.1
  dr              %59.2 = Typecheck@0x557a49338da0[Type#10]
  goto BB7
BB7   <- [57, 59]
  val?^ | miss    %7.0  = Phi                      %57.1:BB57, %59.1:BB59
  val?^ | miss    %7.1  = %7.0
  dr              %7.2  = Phi                      %57.2:BB57, %59.2:BB59
  dr              %7.3  = %7.2
  fs              %7.4  = FrameState         R     0x557a4a57f9a0+388: [%54.2], env=e0.2
  void                    Deopt              !v    %7.4, %7.3, %7.1   !
BB60   <- [58]
  int$-           %60.0 = CastType           d     dn %58.2
  lgl$-           %60.1 = Neq                d     %56.0, %60.0, elided   <lgl$->
  lgl$#-          %60.2 = CheckTrueFalse     e     %60.1
  void                    Branch                   %60.2 -> BB44 (if true) | BB11 (if false)
BB61   <- [58]
  void                    Nop                !     
  (int|real)$-    %61.1 = %58.2
  dr              %61.2 = Typecheck@0x557a49338da0[Type#11]
  goto BB9
BB44   <- [60]
  (cls|spec|blt)  %44.0 = LdFun              !v    stop, e0.2
  fs              %44.1 = FrameState         R     0x557a4a57f9a0+511: [%44.0], env=e0.2
  void                    Deopt              !v    %44.1, DeadCall@0x557a49338da0[Call#6], %44.0   !
BB11   <- [60]
  val?^ | miss    %11.0 = LdVar              eR    tryCatchList, e0.2
  lgl$#-          %11.1 = Identical                %11.0, %0.3
  void                    Branch                   %11.1 -> BB62 (if true) | BB63 (if false)
BB9   <- [61, 63]
  val?^ | miss    %9.0  = Phi                      %61.1:BB61, %63.1:BB63
  val?^ | miss    %9.1  = %9.0
  dr              %9.2  = Phi                      %61.2:BB61, %63.2:BB63
  dr              %9.3  = %9.2
  fs              %9.4  = FrameState         R     0x557a4a57f9a0+484: [%56.0, %58.2], env=e0.2
  void                    Deopt              !v    %9.4, %9.3, %9.1   !
BB62   <- [11]
  prom-           %62.0 = MkArg                    unboundValue, tryCatch[0x557a4a6c1e70]_p0, e0.2
  prom-           %62.1 = MkArg                    unboundValue, tryCatch[0x557a4a6c1e70]_p1, e0.2
  prom-           %62.2 = MkArg                    unboundValue, tryCatch[0x557a4a6c1e70]_p2 (!refl), e0.2
  prom-           %62.3 = MkArg                    unboundValue, tryCatch[0x557a4a6c1e70]_p3, e0.2
  ct              %62.4 = PushContext        lCL   %62.0, %62.1, %62.2, %62.3, tryCatchList(expr, classes, parentenv, handlers), %0.3, e0.2
  val?^           %62.5 = CastType                 up %62.3
  val?^           %62.6 = CastType                 up %62.2
  val?^           %62.7 = CastType                 up %62.1
  val?^           %62.8 = CastType                 up %62.0
  env             e62.9 = MkEnv              l     expr=%62.8, names=%62.7, parentenv=%62.6, handlers=%62.5, parent=e0.2, context 1
  val?            %62.10 = Force!<lazy>       !vL   %62.7, e62.9   <str$->
  lgl$#-          %62.11 = IsType                   %62.10 isA val?-
  void                    Branch                   %62.11 -> BB64 (if true) | BB65 (if false)
BB63   <- [11]
  void                    Nop                !     
  val?^ | miss    %63.1 = %11.0
  dr              %63.2 = CallTarget@0x557a49338da0[Call#7]
  goto BB9
BB64   <- [62]
  val?-           %64.0 = CastType           d     dn %62.10   <str$->
  (int|real)$-    %64.1 = CallSafeBuiltin    wed   length(%64.0)    <int$->
  lgl$#-          %64.2 = IsType                   %64.1 isA int$-
  void                    Branch                   %64.2 -> BB66 (if true) | BB67 (if false)
BB65   <- [62]
  fs              %65.0 = FrameState         R     0x557a4a57f9a0+586: [], env=e0.2
  fs              %65.1 = FrameState         R     0x557a4a573890+69: [<blt length>, %62.10], env=e62.9, next=%65.0
  void                    Deopt              !v    %65.1, Typecheck@0x557a48eda840[Type#1], %62.10   !
BB66   <- [64]
  int$-           %66.0 = CastType           d     dn %64.1
  void                    StVar              lW    nh, %66.0, e62.9
  lgl$-           %66.2 = Gt                 d     %66.0, 1L, elided   <lgl$->
  lgl$#-          %66.3 = CheckTrueFalse     e     %66.2
  void                    Branch                   %66.3 -> BB43 (if true) | BB18 (if false)
BB67   <- [64]
  fs              %67.0 = FrameState         R     0x557a4a57f9a0+586: [], env=e0.2
  fs              %67.1 = FrameState         R     0x557a4a573890+91: [%64.1], env=e62.9, next=%67.0
  void                    Deopt              !v    %67.1, Typecheck@0x557a48eda840[Type#2], %64.1   !
BB43   <- [66]
  fs              %43.0 = FrameState         R     0x557a4a57f9a0+586: [], env=e0.2
  (cls|spec|blt)  %43.1 = LdFun              !v    tryCatchOne, e0.2
  fs              %43.2 = FrameState         R     0x557a4a573890+250: [%43.1], env=e62.9, next=%43.0
  void                    Deopt              !v    %43.2, DeadCall@0x557a48eda840[Call#2], %43.1   !
BB18   <- [66]
  lgl$-           %18.0 = Eq                 d     %66.0, 1L, elided   <lgl$->
  lgl$#-          %18.1 = CheckTrueFalse     e     %18.0
  void                    Branch                   %18.1 -> BB23 (if true) | BB19 (if false)
BB23   <- [18]
  val?^ | miss    %23.0 = LdVar              eR    tryCatchOne, e62.9
  (cls|spec|blt)  %23.1 = CastType                 dn %23.0
  val+            %23.2 = CallSafeBuiltin          bodyCode(%23.1) 
  lgl$#-          %23.3 = Identical                %23.2, <(rir::DispatchTable*)0x557a4a57f210>
  void                    Branch                   %23.3 -> BB68 (if true) | BB69 (if false)
BB19   <- [18]
  void                    Visible            v     
  val?            %19.1 = Force!             !L    %62.8, e62.9   <val?_>
  val?            %19.2 = %19.1
  goto BB20
BB68   <- [23]
  val?            %68.0 = Force!             d     %23.0, 
  prom-           %68.1 = MkArg                    unboundValue, tryCatch[0x557a4a6c1e70]_p4, e62.9
  prom-           %68.2 = MkArg                    unboundValue, tryCatch[0x557a4a6c1e70]_p5, e62.9
  prom-           %68.3 = MkArg                    unboundValue, tryCatch[0x557a4a6c1e70]_p6, e62.9
  prom-           %68.4 = MkArg                    unboundValue, tryCatch[0x557a4a6c1e70]_p7, e62.9
  (cls|spec|blt)  %68.5 = ChkFunction        e     %68.0
  env             e68.6 = CallSafeBuiltin          environment(%68.5) 
  ct              %68.7 = PushContext        lCL   %68.1, %68.2, %68.3, %68.4, tryCatchOne(expr, names, parentenv, [[(handler|..., %68.5, e62.9
  val?^           %68.8 = CastType                 up %68.4
  val?^           %68.9 = CastType                 up %68.3
  val?^           %68.10 = CastType                 up %68.2
  val?^           %68.11 = CastType                 up %68.1
  env             e68.12 = MkEnv              l     expr=%68.11, name=%68.10, parentenv=%68.9, handler=%68.8, parent=e68.6, context 1
  cls             %68.13 = MkCls                    doTryCatch, e68.12
  void                    StVar              lW    doTryCatch, %68.13, e68.12
  prom-           %68.15 = MkArg                    unboundValue, tryCatch[0x557a4a6c1e70]_p8, e68.12
  prom-           %68.16 = MkArg                    unboundValue, tryCatch[0x557a4a6c1e70]_p9, e68.12
  prom-           %68.17 = MkArg                    unboundValue, tryCatch[0x557a4a6c1e70]_p10, e68.12
  prom-           %68.18 = MkArg                    unboundValue, tryCatch[0x557a4a6c1e70]_p11, e68.12
  val?            %68.19 = StaticCall         !v    doTryCatch[0x557a4a6fe360](%68.15, %68.16, %68.17, %68.18) from %68.13 e68.12   <vec->
  void                    StVar              lW    value, %68.19, e68.12
  lgl$#-          %68.21 = IsType                   %68.19 isA val+   <true>
  lgl$#-          %68.22 = IsType                   %68.19 isA val?-
  val             %68.23 = ChkMissing         e     %68.19
  void                    Branch                   %68.21 -> BB72 (if true) | BB73 (if false)
BB69   <- [23]
  fs              %69.0 = FrameState         R     0x557a4a57f9a0+586: [], env=e0.2
  fs              %69.1 = FrameState         R     0x557a4a573890+105: [], env=e62.9, next=%69.0
  void                    Deopt              !v    %69.1, CallTarget@0x557a48eda840[Call#1], %23.2   !
BB20   <- [19, 88]
  val?            %20.0 = Phi                      %19.2:BB19, %88.1:BB88
  val?            %20.1 = %20.0
  val?            %20.2 = PopContext         C     %20.1, %62.4   <lgl$->
  lgl$#-          %20.3 = IsType                   %20.2 isA lgl$-
  void                    Branch                   %20.3 -> BB70 (if true) | BB71 (if false)
BB72   <- [68]
  void                    Branch                   %68.22 -> BB74 (if true) | BB75 (if false)
BB73   <- [68]
  void                    Nop                !     
  lgl$#-          %73.1 = %68.21
  dr              %73.2 = DeadBranchReached@0x557a4a57f140[Test#0]
  goto BB24
BB70   <- [20]
  lgl$-           %70.0 = CastType           d     dn %20.2
  void                    Return             l     %70.0
BB71   <- [20]
  fs              %71.0 = FrameState         R     0x557a4a57f9a0+586: [%20.2], env=e0.2
  void                    Deopt              !v    %71.0, Typecheck@0x557a49338da0[Type#17], %20.2   !
BB74   <- [72]
  val?-           %74.0 = CastType           d     dn %68.19   <vec->
  val?            %74.1 = Extract2_1D        wed   %74.0, 1L, elided   <nil->
  lgl$-           %74.2 = Is                       %74.1, NULL
  lgl$#-          %74.3 = CheckTrueFalse     e     %74.2
  void                    Branch                   %74.3 -> BB38 (if true) | BB26 (if false)
BB75   <- [72]
  void                    Nop                !     
  val?            %75.1 = %68.19
  dr              %75.2 = Typecheck@0x557a4a57f140[Type#4]
  goto BB24
BB24   <- [73, 75]
  val?^ | miss    %24.0 = Phi                      %73.1:BB73, %75.1:BB75
  val?^ | miss    %24.1 = %24.0
  dr              %24.2 = Phi                      %73.2:BB73, %75.2:BB75
  dr              %24.3 = %24.2
  fs              %24.4 = FrameState         R     0x557a4a57f9a0+586: [], env=e0.2
  fs              %24.5 = FrameState         R     0x557a4a573890+235: [], env=e62.9, next=%24.4
  fs              %24.6 = FrameState         R     0x557a4a56f120+86: [], env=e68.12, next=%24.5
  void                    Deopt              !v    %24.6, %24.3, %24.1   !
BB38   <- [74]
  val?            %38.0 = CallBuiltin        !v    geterrmessage() e68.12
  void                    StVar              lW    msg, %38.0, e68.12
  val?^ | miss    %38.2 = LdVar              eR    value, e68.12
  lgl$#-          %38.3 = IsType                   %38.2 isA val?~- | miss
  void                    Branch                   %38.3 -> BB76 (if true) | BB77 (if false)
BB26   <- [74]
  val?^ | miss    %26.0 = LdVar              eR    is.character, e68.12
  lgl$#-          %26.1 = Identical                <blt is.character>, %26.0   <@?>
  void                    Branch                   %26.1 -> BB28 (if true) | BB27 (if false)
BB76   <- [38]
  val?~- | miss   %76.0 = CastType           d     dn %38.2
  val?-           %76.1 = Force!<value>            %76.0,    <vec->
  lgl$#-          %76.2 = IsType                   %76.1 isA val+   <true>
  void                    Branch                   %76.2 -> BB80 (if true) | BB81 (if false)
BB77   <- [38]
  void                    Nop                !     
  val?^ | miss    %77.1 = %38.2
  dr              %77.2 = Typecheck@0x557a4a57f140[Type#21]
  goto BB39
BB28   <- [26]
  lgl$#-          %28.0 = CallSafeBuiltin    wed   is.character(%74.1)    <val?_>
  void                    Branch                   %28.0 -> BB37 (if true) | BB29 (if false)
BB27   <- [26]
  fs              %27.0 = FrameState         R     0x557a4a57f9a0+586: [], env=e0.2
  fs              %27.1 = FrameState         R     0x557a4a573890+235: [], env=e62.9, next=%27.0
  (cls|spec|blt)  %27.2 = LdFun              !v    is.character, e68.12
  fs              %27.3 = FrameState         R     0x557a4a56f120+183: [%27.2], env=e68.12, next=%27.1
  void                    Deopt              !v    %27.3, DeadCall@0x557a4a57f140[Call#1], %27.2   !
BB80   <- [76]
  val?            %80.0 = Extract2_1D        wed   %76.1, 2L, elided   <code->
  void                    StVar              lW    call, %80.0, e68.12
  val?^ | miss    %80.2 = LdVar              eR    simpleError, e68.12
  lgl$#-          %80.3 = Identical                %80.2, function(message, call=NULL) <(rir::DispatchTa|...
  void                    Branch                   %80.3 -> BB84 (if true) | BB85 (if false)
BB81   <- [76]
  void                    Nop                !     
  lgl$#-          %81.1 = %76.2
  dr              %81.2 = DeadBranchReached@0x557a4a57f140[Test#7]
  goto BB39
BB39   <- [77, 81]
  val?^ | miss    %39.0 = Phi                      %77.1:BB77, %81.1:BB81
  val?^ | miss    %39.1 = %39.0
  dr              %39.2 = Phi                      %77.2:BB77, %81.2:BB81
  dr              %39.3 = %39.2
  fs              %39.4 = FrameState         R     0x557a4a57f9a0+586: [], env=e0.2
  fs              %39.5 = FrameState         R     0x557a4a573890+235: [], env=e62.9, next=%39.4
  fs              %39.6 = FrameState         R     0x557a4a56f120+585: [], env=e68.12, next=%39.5
  void                    Deopt              !v    %39.6, %39.3, %39.1   !
BB37   <- [28]
  fs              %37.0 = FrameState         R     0x557a4a57f9a0+586: [], env=e0.2
  fs              %37.1 = FrameState         R     0x557a4a573890+235: [], env=e62.9, next=%37.0
  void                    StVar              lW    msg, %74.1, e68.12
  val?            %37.3 = Extract2_1D        wed   %74.0, 2L, elided   <val?_>
  void                    StVar              lW    call, %37.3, e68.12
  (cls|spec|blt)  %37.5 = LdFun              !v    simpleError, e68.12
  fs              %37.6 = FrameState         R     0x557a4a56f120+512: [%37.5], env=e68.12, next=%37.1
  void                    Deopt              !v    %37.6, DeadCall@0x557a4a57f140[Call#2], %37.5   !
BB29   <- [28]
  void                    StVar              lW    cond, %74.1, e68.12
  goto BB30
BB84   <- [80]
  prom-           %84.0 = MkArg                    unboundValue, tryCatch[0x557a4a6c1e70]_p12 (!refl), e68.12
  prom-           %84.1 = MkArg                    unboundValue, tryCatch[0x557a4a6c1e70]_p13 (!refl), e68.12
  val?            %84.2 = StaticCall         !v    simpleError[0x557a4a74a0b0](%84.0, %84.1) e68.12   <vec>
  void                    StVar              lW    cond, %84.2, e68.12
  goto BB30
BB85   <- [80]
  fs              %85.0 = FrameState         R     0x557a4a57f9a0+586: [], env=e0.2
  fs              %85.1 = FrameState         R     0x557a4a573890+235: [], env=e62.9, next=%85.0
  fs              %85.2 = FrameState         R     0x557a4a56f120+652: [], env=e68.12, next=%85.1
  void                    Deopt              !v    %85.2, CallTarget@0x557a4a57f140[Call#3], %80.2   !
BB30   <- [29, 84]
  val?^ | miss    %30.0 = LdVar              eR    value, e68.12
  lgl$#-          %30.1 = IsType                   %30.0 isA val?~- | miss
  void                    Branch                   %30.1 -> BB78 (if true) | BB79 (if false)
BB78   <- [30]
  val?~- | miss   %78.0 = CastType           d     dn %30.0
  val?-           %78.1 = Force!<value>            %78.0,    <vec->
  lgl$#-          %78.2 = IsType                   %78.1 isA val+   <true>
  void                    Branch                   %78.2 -> BB82 (if true) | BB83 (if false)
BB79   <- [30]
  void                    Nop                !     
  val?^ | miss    %79.1 = %30.0
  dr              %79.2 = Typecheck@0x557a4a57f140[Type#26]
  goto BB31
BB82   <- [78]
  val?            %82.0 = Extract2_1D        wed   %78.1, 3L, elided   <cls->
  (cls|spec|blt)  %82.1 = ChkFunction        e     %82.0
  prom-           %82.2 = MkArg                    unboundValue, tryCatch[0x557a4a6c1e70]_p14 (!refl), e68.12
  val+            %82.3 = CallSafeBuiltin          bodyCode(%82.1) 
  lgl$#-          %82.4 = Identical                %82.3, <(rir::DispatchTable*)0x557a496366e0>
  env             e82.5 = CallSafeBuiltin          environment(%82.1) 
  val?^           %82.6 = CastType                 up %82.2
  void                    Branch                   %82.4 -> BB86 (if true) | BB87 (if false)
BB83   <- [78]
  void                    Nop                !     
  lgl$#-          %83.1 = %78.2
  dr              %83.2 = DeadBranchReached@0x557a4a57f140[Test#8]
  goto BB31
BB31   <- [79, 83]
  val?^ | miss    %31.0 = Phi                      %79.1:BB79, %83.1:BB83
  val?^ | miss    %31.1 = %31.0
  dr              %31.2 = Phi                      %79.2:BB79, %83.2:BB83
  dr              %31.3 = %31.2
  fs              %31.4 = FrameState         R     0x557a4a57f9a0+586: [], env=e0.2
  fs              %31.5 = FrameState         R     0x557a4a573890+235: [], env=e62.9, next=%31.4
  fs              %31.6 = FrameState         R     0x557a4a56f120+703: [], env=e68.12, next=%31.5
  void                    Deopt              !v    %31.6, %31.3, %31.1   !
BB86   <- [82]
  void                    Invisible          v     
  env             e86.1 = (MkEnv)            l     e=%82.6, parent=e82.5, context 0
  void                    StVarSuper         lRW   threw, true, e86.1
  val?            %86.3 = PopContext         C     true, %68.7   <lgl$->
  lgl$#-          %86.4 = IsType                   %86.3 isA lgl$-
  void                    Branch                   %86.4 -> BB88 (if true) | BB89 (if false)
BB87   <- [82]
  fs              %87.0 = FrameState         R     0x557a4a57f9a0+586: [], env=e0.2
  fs              %87.1 = FrameState         R     0x557a4a573890+235: [], env=e62.9, next=%87.0
  fs              %87.2 = FrameState         R     0x557a4a56f120+755: [%82.0], env=e68.12, next=%87.1
  void                    Deopt              !v    %87.2, CallTarget@0x557a4a57f140[Call#4], %82.3   !
BB88   <- [86]
  void                    Nop                !     
  val?            %88.1 = %86.3
  goto BB20
BB89   <- [86]
  fs              %89.0 = FrameState         R     0x557a4a57f9a0+586: [], env=e0.2
  fs              %89.1 = FrameState         R     0x557a4a573890+235: [%86.3], env=e62.9, next=%89.0
  void                    Deopt              !v    %89.1, Typecheck@0x557a48eda840[Type#13], %86.3   !
Prom 0:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    expr, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    classes, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    parentenv, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 3:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    handlers, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <vec$+>
  void                    Return             l     %0.3
Prom 4:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    expr, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 5:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    names, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 6:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    parentenv, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 7:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    handlers, e0.0
  val?            %0.2  = Force<lazy>        !v    %0.1, e0.0   <vec$+>
  val?            %0.3  = Extract2_1D        !v    %0.2, 1L, e0.0   <cls->
  void                    Visible            v     
  void                    Return             l     %0.3
Prom 8:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    expr, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    NonLocalReturn     !     %0.3, e0.0
Prom 9:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    name, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 10:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    parentenv, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 11:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    handler, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <cls->
  void                    Return             l     %0.3
Prom 12:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    msg, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 13:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    call, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <code->
  void                    Return             l     %0.3
Prom 14:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    cond, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3

│ tryCatch[0x557a4a6c1e70]                                                     │
└──────────────────────────────────────────────────────────────────────────────┘
