
┌──────────────────────────────────────────────────────────────────────────────┐
│ isUMEif[0x55c698ffc920]                                                      │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;NonRefl0,!Obj0                       │
│ Properties:                                                                  │
├────── Final PIR Version
isUMEif[0x55c698ffc920]
BB0
  val?^           %0.0  = LdArg                    0
  val?^ | miss    %0.1  = LdVar              eR    print, ?
  lgl$#-          %0.2  = Identical                %0.1, function(x, ...) <(rir::DispatchTable*)0x55c69|...
  void                    Branch                   %0.2 -> BB21 (if true) | BB22 (if false)
BB21   <- [0]
  env             e21.0 = MkEnv              l     e=%0.0, parent=?, context 1
  ct              %21.1 = PushContext        lCL   "now", print("now"), function(x, digits=NULL, quote=TRUE, na.print=|..., e21.0
  env             e21.2 = MkEnv              l     x="now", digits(miss)=nil, quote(miss)=true, na.print(miss)=nil, print.gap(miss)=nil, right(miss)=false, max(miss)=nil, width(miss)=nil, useSource(miss)=true, ...(miss)=missingArg, parent=R_BaseNamespace, context 1
  prom-           %21.3 = MkArg                    unboundValue, isUMEif[0x55c698ffc920]_p9 (!refl), e21.2
  prom-           %21.4 = MkArg                    unboundValue, isUMEif[0x55c698ffc920]_p10 (!refl), e21.2
  prom-           %21.5 = MkArg                    unboundValue, isUMEif[0x55c698ffc920]_p11 (!refl), e21.2
  prom-           %21.6 = MkArg                    unboundValue, isUMEif[0x55c698ffc920]_p12 (!refl), e21.2
  prom-           %21.7 = MkArg                    unboundValue, isUMEif[0x55c698ffc920]_p13 (!refl), e21.2
  prom-           %21.8 = MkArg                    unboundValue, isUMEif[0x55c698ffc920]_p14 (!refl), e21.2
  prom-           %21.9 = MkArg                    unboundValue, isUMEif[0x55c698ffc920]_p15 (!refl), e21.2
  prom-           %21.10 = MkArg                    unboundValue, isUMEif[0x55c698ffc920]_p16 (!refl), e21.2
  dots-           %21.11 = DotsList           l     digits=%21.3, quote=%21.4, na.print=%21.5, print.gap=%21.6, right=%21.7, max=%21.8, width=%21.9, useSource=%21.10
  ct              %21.12 = PushContext        lCL   %21.11, pairlist(digits=digits, quote=quote, na.print=|..., function(...) <(rir::DispatchTable*)0x55c6991b|..., e21.2
  env             e21.13 = MkEnv              l     ...=%21.11, parent=R_BaseNamespace, context 1
  val?            %21.14 = NamedCall          !v    <blt list>(digits=%21.3, quote=%21.4, na.print=%21.5, print.gap=%21.6, right=%21.7, max=%21.8, width=%21.9, useSource=%21.10) e21.13   <vec+>
  lgl$#-          %21.15 = IsType                   %21.14 isA val?+
  void                    Branch                   %21.15 -> BB23 (if true) | BB24 (if false)
BB22   <- [0]
  env             e22.0 = (MkEnv)            l     e=%0.0, parent=?, context 1
  fs              %22.1 = FrameState         R     0x55c69915da80+0: [], env=e22.0
  void                    Deopt              !v    %22.1, CallTarget@0x55c6985ced58[Call#0], %0.1
BB23   <- [21]
  val?+           %23.0 = CastType           d     dn %21.14   <vec+>
  val             %23.1 = CallSafeBuiltin    wed   as.vector(%23.0, "pairlist")    <list->
  val?            %23.2 = PopContext         C     %23.1, %21.12   <list->
  void                    StVar              lW    args, %23.2, e21.2
  val?^ | miss    %23.4 = LdVar              eR    c, e21.2
  lgl$#-          %23.5 = Identical                <blt c>, %23.4   <true>
  void                    Branch                   %23.5 -> BB25 (if true) | BB26 (if false)
BB24   <- [21]
  fs              %24.0 = FrameState         R     0x55c69915da80+32: [], env=e21.0
  fs              %24.1 = FrameState         R     0x55c69902f280+108: [], env=e21.2, next=%24.0
  fs              %24.2 = FrameState         R     0x55c6990ded10+32: [], env=e21.13, next=%24.1
  prom-           %24.3 = MkArg                    unboundValue, isUMEif[0x55c698ffc920]_p17, e21.13
  val?^           %24.4 = CastType                 up %24.3
  env             e24.5 = (MkEnv)            l     x=%24.4, parent=R_BaseNamespace, context 0
  fs              %24.6 = FrameState         R     0x55c6991d0e10+9: [], env=e24.5, next=%24.2
  fs              %24.7 = FrameState         R     0x55c699110fa0+36(pr): [%21.14], env=e21.13, next=%24.6
  void                    Deopt              !v    %24.7, Typecheck@0x55c698583be8[Type#0], %21.14   !
BB25   <- [23]
  lgl$-           %25.0 = Missing            eR    digits, e21.2
  lgl$-           %25.1 = Missing            eR    quote, e21.2
  lgl$-           %25.2 = Missing            eR    na.print, e21.2
  lgl$-           %25.3 = Missing            eR    print.gap, e21.2
  lgl$-           %25.4 = Missing            eR    right, e21.2
  lgl$-           %25.5 = Missing            eR    max, e21.2
  lgl$-           %25.6 = Missing            eR    width, e21.2
  lgl$-           %25.7 = Missing            eR    useSource, e21.2
  lgl-            %25.8 = CallSafeBuiltin    wed   c(%25.0, %25.1, %25.2, %25.3, %25.4, %25.5, %25.6, %25.7)    <lgl->
  void                    StVar              lW    missings, %25.8, e21.2
  val?^ | miss    %25.10 = LdVar              eR    x, e21.2
  val?            %25.11 = Force!<value>      !v    %25.10, e21.2   <str$->
  val?^ | miss    %25.12 = LdVar              eR    args, e21.2
  lgl$#-          %25.13 = IsType                   %25.12 isA val?~- | miss
  void                    Branch                   %25.13 -> BB27 (if true) | BB28 (if false)
BB26   <- [23]
  fs              %26.0 = FrameState         R     0x55c69915da80+32: [], env=e21.0
  fs              %26.1 = FrameState         R     0x55c69902f280+122: [], env=e21.2, next=%26.0
  void                    Deopt              !v    %26.1, DeadBranchReached@0x55c698f7a730[Test#0], %23.5   !
BB27   <- [25]
  val?~- | miss   %27.0 = CastType           d     dn %25.12
  val?-           %27.1 = Force!<value>            %27.0,    <list->
  val?^ | miss    %27.2 = LdVar              eR    missings, e21.2
  lgl$#-          %27.3 = IsType                   %27.2 isA lgl-
  void                    Branch                   %27.3 -> BB29 (if true) | BB30 (if false)
BB28   <- [25]
  void                    Nop                !     
  val?^ | miss    %28.1 = %25.12
  dr              %28.2 = Typecheck@0x55c698f7a730[Type#11]
  goto BB7
BB29   <- [27]
  lgl-            %29.0 = CastType           d     dn %27.2
  val?            %29.1 = CallBuiltin        !v    print.default(%25.11, %27.1, %29.0) e21.2
  val?            %29.2 = PopContext         C     %29.1, %21.1
  val?^ | miss    %29.3 = LdVar              eR    length, e21.0
  lgl$#-          %29.4 = Identical                <blt length>, %29.3   <true>
  void                    Branch                   %29.4 -> BB31 (if true) | BB32 (if false)
BB30   <- [27]
  void                    Nop                !     
  val?^ | miss    %30.1 = %27.2
  dr              %30.2 = Typecheck@0x55c698f7a730[Type#12]
  goto BB7
BB7   <- [28, 30]
  val?^ | miss    %7.0  = Phi                      %28.1:BB28, %30.1:BB30
  val?^ | miss    %7.1  = %7.0
  dr              %7.2  = Phi                      %28.2:BB28, %30.2:BB30
  dr              %7.3  = %7.2
  fs              %7.4  = FrameState         R     0x55c69915da80+32: [], env=e21.0
  fs              %7.5  = FrameState         R     0x55c69902f280+305: [%25.11], env=e21.2, next=%7.4
  void                    Deopt              !v    %7.5, %7.3, %7.1   !
BB31   <- [29]
  val?^ | miss    %31.0 = LdVar              eR    e, e21.0
  val?            %31.1 = Force!<lazy>       !v    %31.0, e21.0   <code->
  lgl$#-          %31.2 = IsType                   %31.1 isA val?-
  void                    Branch                   %31.2 -> BB33 (if true) | BB34 (if false)
BB32   <- [29]
  fs              %32.0 = FrameState         R     0x55c69915da80+32: [%29.2], env=e21.0
  void                    Deopt              !v    %32.0, DeadBranchReached@0x55c6985ced58[Test#0], %29.4   !
BB33   <- [31]
  val?-           %33.0 = CastType           d     dn %31.1   <code->
  (int|real)$-    %33.1 = CallSafeBuiltin    wed   length(%33.0)    <int$->
  lgl$#-          %33.2 = IsType                   %33.1 isA int$-
  void                    Branch                   %33.2 -> BB35 (if true) | BB36 (if false)
BB34   <- [31]
  fs              %34.0 = FrameState         R     0x55c69915da80+102: [<blt length>, %31.1], env=e21.0
  void                    Deopt              !v    %34.0, Typecheck@0x55c6985ced58[Type#1], %31.1   !
BB35   <- [33]
  int$-           %35.0 = CastType           d     dn %33.1
  void                    Visible            v     
  lgl$-           %35.2 = Eq                 vd    %35.0, 3L, elided   <lgl$->
  lgl$#-          %35.3 = CheckTrueFalse     e     %35.2
  void                    Branch                   %35.3 -> BB19 (if true) | BB15 (if false)
BB36   <- [33]
  void                    Nop                !     
  (int|real)$-    %36.1 = %33.1
  dr              %36.2 = Typecheck@0x55c6985ced58[Type#2]
  goto BB13
BB19   <- [35]
  val?^ | miss    %19.0 = LdVar              eR    isUME, e21.0
  (cls|spec|blt)  %19.1 = CastType                 dn %19.0
  val+            %19.2 = CallSafeBuiltin          bodyCode(%19.1) 
  lgl$#-          %19.3 = Identical                %19.2, <(rir::DispatchTable*)0x55c6991d9a80>
  void                    Branch                   %19.3 -> BB37 (if true) | BB38 (if false)
BB15   <- [35]
  val?^ | miss    %15.0 = LdVar              eR    e, e21.0
  val?            %15.1 = Force!<wrapped>    !v    %15.0, e21.0   <code->
  lgl$#-          %15.2 = IsType                   %15.1 isA val+   <true>
  lgl$#-          %15.3 = IsType                   %15.1 isA val?-
  void                    Branch                   %15.2 -> BB39 (if true) | BB40 (if false)
BB13   <- [36, 38]
  val?^ | miss    %13.0 = Phi                      %36.1:BB36, %38.1:BB38
  val?^ | miss    %13.1 = %13.0
  dr              %13.2 = Phi                      %36.2:BB36, %38.2:BB38
  dr              %13.3 = %13.2
  fs              %13.4 = FrameState         R     0x55c69915da80+124: [%33.1], env=e21.0
  void                    Deopt              !v    %13.4, %13.3, %13.1   !
BB37   <- [19]
  val?            %37.0 = Force!             d     %19.0, 
  prom-           %37.1 = MkArg                    unboundValue, isUMEif[0x55c698ffc920]_p0, e21.0
  (cls|spec|blt)  %37.2 = ChkFunction        e     %37.0
  val?            %37.3 = StaticCall         !     isUME[0x55c69904cd60](%37.1) from %37.2 e21.0   <(real|str)$->
  val?            %37.4 = %37.3
  goto BB18
BB38   <- [19]
  void                    Nop                !     
  val+            %38.1 = %19.2
  dr              %38.2 = CallTarget@0x55c6985ced58[Call#2]
  goto BB13
BB39   <- [15]
  void                    Branch                   %15.3 -> BB41 (if true) | BB42 (if false)
BB40   <- [15]
  void                    Nop                !     
  lgl$#-          %40.1 = %15.2
  dr              %40.2 = DeadBranchReached@0x55c6985ced58[Test#1]
  goto BB16
BB18   <- [37, 41]
  val?            %18.0 = Phi                      %41.3:BB41, %37.4:BB37
  val?            %18.1 = %18.0
  void                    Return             l     %18.1
BB41   <- [39]
  val?-           %41.0 = CastType           d     dn %15.1   <code->
  val?            %41.1 = Extract2_1D        wed   %41.0, 4L, elided
  void                    Visible            v     
  real$#-         %41.3 = 1
  goto BB18
BB42   <- [39]
  void                    Nop                !     
  val?            %42.1 = %15.1
  dr              %42.2 = Typecheck@0x55c6985ced58[Type#4]
  goto BB16
BB16   <- [40, 42]
  val?^ | miss    %16.0 = Phi                      %40.1:BB40, %42.1:BB42
  val?^ | miss    %16.1 = %16.0
  dr              %16.2 = Phi                      %40.2:BB40, %42.2:BB42
  dr              %16.3 = %16.2
  fs              %16.4 = FrameState         R     0x55c69915da80+156: [%15.1], env=e21.0
  void                    Deopt              !v    %16.4, %16.3, %16.1   !
Prom 0:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    e, e0.0
  val?            %0.2  = Force<wrapped>     !v    %0.1, e0.0   <code->
  val?            %0.3  = Extract2_1D        !v    %0.2, 3L, e0.0   <code->
  void                    Visible            v     
  void                    Return             l     %0.3
Prom 9:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    digits, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <nil->
  void                    Return             l     %0.3
Prom 10:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    quote, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <lgl$->
  void                    Return             l     %0.3
Prom 11:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    na.print, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <nil->
  void                    Return             l     %0.3
Prom 12:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    print.gap, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <nil->
  void                    Return             l     %0.3
Prom 13:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    right, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <lgl$->
  void                    Return             l     %0.3
Prom 14:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    max, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <nil->
  void                    Return             l     %0.3
Prom 15:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    width, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <nil->
  void                    Return             l     %0.3
Prom 16:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    useSource, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <lgl$->
  void                    Return             l     %0.3
Prom 17:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     list, <0x55c6970a85c0>, e0.0
  (miss|dots)     %0.2  = LdDots             R     , e0.0
  *dots-          %0.3  = ExpandDots               %0.2
  val?            %0.4  = NamedCall          !     %0.1(.xpandDotsTrigger=%0.3) e0.0   <vec+>
  void                    Return             l     %0.4

│ isUMEif[0x55c698ffc920]                                                      │
└──────────────────────────────────────────────────────────────────────────────┘
