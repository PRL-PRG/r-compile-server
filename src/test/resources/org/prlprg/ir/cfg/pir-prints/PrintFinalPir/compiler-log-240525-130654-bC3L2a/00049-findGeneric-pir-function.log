
┌──────────────────────────────────────────────────────────────────────────────┐
│ findGeneric[0x55c69936c020]                                                  │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch                                      │
│ Properties:  Eager                                                           │
├────── Final PIR Version
findGeneric[0x55c69936c020]
BB0
  env             e0.0  = MkEnv              l     parent=R_GlobalEnv, context 1
  cls             %0.1  = MkCls                    isUMEbrace, e0.0
  cls             %0.2  = MkCls                    isUMEif, e0.0
  cls             %0.3  = MkCls                    isUME, e0.0
  val?^ | miss    %0.4  = LdVar              eR    print, R_GlobalEnv
  lgl$#-          %0.5  = Identical                %0.4, function(x, ...) <(rir::DispatchTable*)0x55c69|...
  void                    Branch                   %0.5 -> BB12 (if true) | BB13 (if false)
BB12   <- [0]
  ct              %12.0 = PushContext        lCL   "=============================================|..., print("=======================================|..., function(x, digits=NULL, quote=TRUE, na.print=|..., e0.0
  env             e12.1 = MkEnv              l     x="=============================================|..., digits(miss)=nil, quote(miss)=true, na.print(miss)=nil, print.gap(miss)=nil, right(miss)=false, max(miss)=nil, width(miss)=nil, useSource(miss)=true, ...(miss)=missingArg, parent=R_BaseNamespace, context 1
  prom-           %12.2 = MkArg                    unboundValue, findGeneric[0x55c69936c020]_p10 (!refl), e12.1
  prom-           %12.3 = MkArg                    unboundValue, findGeneric[0x55c69936c020]_p11 (!refl), e12.1
  prom-           %12.4 = MkArg                    unboundValue, findGeneric[0x55c69936c020]_p12 (!refl), e12.1
  prom-           %12.5 = MkArg                    unboundValue, findGeneric[0x55c69936c020]_p13 (!refl), e12.1
  prom-           %12.6 = MkArg                    unboundValue, findGeneric[0x55c69936c020]_p14 (!refl), e12.1
  prom-           %12.7 = MkArg                    unboundValue, findGeneric[0x55c69936c020]_p15 (!refl), e12.1
  prom-           %12.8 = MkArg                    unboundValue, findGeneric[0x55c69936c020]_p16 (!refl), e12.1
  prom-           %12.9 = MkArg                    unboundValue, findGeneric[0x55c69936c020]_p17 (!refl), e12.1
  dots-           %12.10 = DotsList           l     digits=%12.2, quote=%12.3, na.print=%12.4, print.gap=%12.5, right=%12.6, max=%12.7, width=%12.8, useSource=%12.9
  ct              %12.11 = PushContext        lCL   %12.10, pairlist(digits=digits, quote=quote, na.print=|..., function(...) <(rir::DispatchTable*)0x55c6991b|..., e12.1
  env             e12.12 = MkEnv              l     ...=%12.10, parent=R_BaseNamespace, context 1
  val?            %12.13 = NamedCall          !v    <blt list>(digits=%12.2, quote=%12.3, na.print=%12.4, print.gap=%12.5, right=%12.6, max=%12.7, width=%12.8, useSource=%12.9) e12.12   <vec+>
  lgl$#-          %12.14 = IsType                   %12.13 isA val?+
  void                    Branch                   %12.14 -> BB14 (if true) | BB15 (if false)
BB13   <- [0]
  fs              %13.0 = FrameState         R     0x55c698f89c40+0: [], env=e0.0
  void                    Deopt              !v    %13.0, CallTarget@0x55c6985cf388[Call#0], %0.4
BB14   <- [12]
  val?+           %14.0 = CastType           d     dn %12.13   <vec+>
  val             %14.1 = CallSafeBuiltin    wed   as.vector(%14.0, "pairlist")    <list->
  val?            %14.2 = PopContext         C     %14.1, %12.11   <list->
  void                    StVar              lW    args, %14.2, e12.1
  val?^ | miss    %14.4 = LdVar              eR    c, e12.1
  lgl$#-          %14.5 = Identical                <blt c>, %14.4   <true>
  void                    Branch                   %14.5 -> BB16 (if true) | BB17 (if false)
BB15   <- [12]
  fs              %15.0 = FrameState         R     0x55c698f89c40+32: [], env=e0.0
  fs              %15.1 = FrameState         R     0x55c69902f280+108: [], env=e12.1, next=%15.0
  fs              %15.2 = FrameState         R     0x55c6990ded10+32: [], env=e12.12, next=%15.1
  prom-           %15.3 = MkArg                    unboundValue, findGeneric[0x55c69936c020]_p18, e12.12
  val?^           %15.4 = CastType                 up %15.3
  env             e15.5 = (MkEnv)            l     x=%15.4, parent=R_BaseNamespace, context 0
  fs              %15.6 = FrameState         R     0x55c6991d0e10+9: [], env=e15.5, next=%15.2
  fs              %15.7 = FrameState         R     0x55c699110fa0+36(pr): [%12.13], env=e12.12, next=%15.6
  void                    Deopt              !v    %15.7, Typecheck@0x55c698583be8[Type#0], %12.13   !
BB16   <- [14]
  lgl$-           %16.0 = Missing            eR    digits, e12.1
  lgl$-           %16.1 = Missing            eR    quote, e12.1
  lgl$-           %16.2 = Missing            eR    na.print, e12.1
  lgl$-           %16.3 = Missing            eR    print.gap, e12.1
  lgl$-           %16.4 = Missing            eR    right, e12.1
  lgl$-           %16.5 = Missing            eR    max, e12.1
  lgl$-           %16.6 = Missing            eR    width, e12.1
  lgl$-           %16.7 = Missing            eR    useSource, e12.1
  lgl-            %16.8 = CallSafeBuiltin    wed   c(%16.0, %16.1, %16.2, %16.3, %16.4, %16.5, %16.6, %16.7)    <lgl->
  void                    StVar              lW    missings, %16.8, e12.1
  val?^ | miss    %16.10 = LdVar              eR    x, e12.1
  val?            %16.11 = Force!<value>      !v    %16.10, e12.1   <str$->
  val?^ | miss    %16.12 = LdVar              eR    args, e12.1
  lgl$#-          %16.13 = IsType                   %16.12 isA val?~- | miss
  void                    Branch                   %16.13 -> BB18 (if true) | BB19 (if false)
BB17   <- [14]
  fs              %17.0 = FrameState         R     0x55c698f89c40+32: [], env=e0.0
  fs              %17.1 = FrameState         R     0x55c69902f280+122: [], env=e12.1, next=%17.0
  void                    Deopt              !v    %17.1, DeadBranchReached@0x55c698f7a730[Test#0], %14.5   !
BB18   <- [16]
  val?~- | miss   %18.0 = CastType           d     dn %16.12
  val?-           %18.1 = Force!<value>            %18.0,    <list->
  val?^ | miss    %18.2 = LdVar              eR    missings, e12.1
  lgl$#-          %18.3 = IsType                   %18.2 isA lgl-
  void                    Branch                   %18.3 -> BB20 (if true) | BB21 (if false)
BB19   <- [16]
  void                    Nop                !     
  val?^ | miss    %19.1 = %16.12
  dr              %19.2 = Typecheck@0x55c698f7a730[Type#11]
  goto BB7
BB20   <- [18]
  lgl-            %20.0 = CastType           d     dn %18.2
  val?            %20.1 = CallBuiltin        !v    print.default(%16.11, %18.1, %20.0) e12.1
  val?            %20.2 = PopContext         C     %20.1, %12.0
  val?^ | miss    %20.3 = LdVar              eR    as, e0.0
  void                    Visible            v     
  val?            %20.5 = Force!<wrapped>    !     %20.3, e0.0   <cls->
  void                    StVar              lW    f, %20.5, e0.0
  void                    StVar              lW    isUMEbrace, %0.1, e0.0
  void                    StVar              lW    isUMEif, %0.2, e0.0
  void                    StVar              lW    isUME, %0.3, e0.0
  prom-           %20.10 = MkArg                    unboundValue, findGeneric[0x55c69936c020]_p0, e0.0
  val?            %20.11 = StaticCall         !     isUME[0x55c6991730d0](%20.10) from %0.3 e0.0   <real$->
  lgl$#-          %20.12 = IsType                   %20.11 isA real$-
  void                    Branch                   %20.12 -> BB22 (if true) | BB23 (if false)
BB21   <- [18]
  void                    Nop                !     
  val?^ | miss    %21.1 = %18.2
  dr              %21.2 = Typecheck@0x55c698f7a730[Type#12]
  goto BB7
BB7   <- [19, 21]
  val?^ | miss    %7.0  = Phi                      %19.1:BB19, %21.1:BB21
  val?^ | miss    %7.1  = %7.0
  dr              %7.2  = Phi                      %19.2:BB19, %21.2:BB21
  dr              %7.3  = %7.2
  fs              %7.4  = FrameState         R     0x55c698f89c40+32: [], env=e0.0
  fs              %7.5  = FrameState         R     0x55c69902f280+305: [%16.11], env=e12.1, next=%7.4
  void                    Deopt              !v    %7.5, %7.3, %7.1   !
BB22   <- [20]
  real$-          %22.0 = CastType           d     dn %20.11
  void                    Return             l     %22.0
BB23   <- [20]
  fs              %23.0 = FrameState         R     0x55c698f89c40+163: [%20.11], env=e0.0
  void                    Deopt              !v    %23.0, Typecheck@0x55c6985cf388[Type#3], %20.11   !
Prom 0:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     body, <0x55c6990935d8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, findGeneric[0x55c69936c020]_p1, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <code->
  void                    Return             l     %0.3
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    f, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls->
  void                    Return             l     %0.3
Prom 10:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    digits, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <nil->
  void                    Return             l     %0.3
Prom 11:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    quote, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <lgl$->
  void                    Return             l     %0.3
Prom 12:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    na.print, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <nil->
  void                    Return             l     %0.3
Prom 13:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    print.gap, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <nil->
  void                    Return             l     %0.3
Prom 14:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    right, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <lgl$->
  void                    Return             l     %0.3
Prom 15:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    max, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <nil->
  void                    Return             l     %0.3
Prom 16:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    width, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <nil->
  void                    Return             l     %0.3
Prom 17:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    useSource, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <lgl$->
  void                    Return             l     %0.3
Prom 18:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     list, <0x55c6970a85c0>, e0.0
  (miss|dots)     %0.2  = LdDots             R     , e0.0
  *dots-          %0.3  = ExpandDots               %0.2
  val?            %0.4  = NamedCall          !     %0.1(.xpandDotsTrigger=%0.3) e0.0   <vec+>
  void                    Return             l     %0.4

│ findGeneric[0x55c69936c020]                                                  │
└──────────────────────────────────────────────────────────────────────────────┘
