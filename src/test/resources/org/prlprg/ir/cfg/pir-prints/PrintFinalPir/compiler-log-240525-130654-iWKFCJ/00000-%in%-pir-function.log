
┌──────────────────────────────────────────────────────────────────────────────┐
│ %in%[0x5642d68691d0]                                                         │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch                                      │
│ Properties:  ForceOrd: 0                                                     │
├────── Final PIR Version
%in%[0x5642d68691d0]
BB0
  val?^           %0.0  = LdArg                    1
  val?^           %0.1  = LdArg                    0
  env             e0.2  = (MkEnv)            l     x=%0.1, table=%0.0, parent=R_BaseNamespace, context 1
  val?            %0.3  = Force!<lazy>       !vL   %0.1, e0.2   <(int|str)$->
  lgl$#-          %0.4  = IsType                   %0.3 isA val?-
  lgl$#-          %0.5  = IsEnvStub          R     , e0.2
  void                    Branch                   %0.5 -> BB8 (if true) | BB9 (if false)
BB8   <- [0]
  void                    Branch                   %0.4 -> BB10 (if true) | BB11 (if false)
BB9   <- [0]
  void                    Nop                !     
  env             e9.1  = e0.2
  dr              %9.2  = EnvStubMaterialized@0x5642d6026688[Call#unknown]
  goto BB7
BB10   <- [8]
  val?-           %10.0 = CastType           d     dn %0.3   <(int|str)$->
  val?            %10.1 = Force!<lazy>       !vL   %0.0, e0.2   <(int|str)->
  lgl$#-          %10.2 = IsType                   %10.1 isA val?-
  lgl$#-          %10.3 = IsEnvStub          R     , e0.2
  void                    Branch                   %10.3 -> BB12 (if true) | BB13 (if false)
BB11   <- [8]
  void                    Nop                !     
  val?            %11.1 = %0.3
  dr              %11.2 = Typecheck@0x5642d6026688[Type#0]
  goto BB7
BB7   <- [9, 11]
  val?^ | miss    %7.0  = Phi                      e9.1:BB9, %11.1:BB11
  val?^ | miss    %7.1  = %7.0
  dr              %7.2  = Phi                      %9.2:BB9, %11.2:BB11
  dr              %7.3  = %7.2
  env             e7.4  = MaterializeEnv           , e0.2   <@?>
  prom-           %7.5  = MkArg                    unboundValue, %in%[0x5642d68691d0]_p1, e7.4
  val?^           %7.6  = CastType                 up %7.5
  prom-           %7.7  = MkArg                    unboundValue, %in%[0x5642d68691d0]_p0, e7.4
  val?^           %7.8  = CastType                 up %7.7
  fs              %7.9  = FrameState         R     0x5642d4ff4320+54: [], env=e7.4
  env             e7.10 = (MkEnv)            l     x=%7.8, table=%7.6, nomatch=0L, incomparables(miss)=nil, parent=R_BaseNamespace, context 0
  fs              %7.11 = FrameState         R     0x5642d51dbd40+9: [], env=e7.10, next=%7.9
  fs              %7.12 = FrameState         R     0x5642d4ff4bc0+5(pr): [%0.3], env=e7.4, next=%7.11
  void                    Deopt              !v    %7.12, %7.3, %7.1   !
BB12   <- [10]
  void                    Branch                   %10.2 -> BB14 (if true) | BB15 (if false)
BB13   <- [10]
  void                    Nop                !     
  env             e13.1 = e0.2
  dr              %13.2 = EnvStubMaterialized@0x5642d6026688[Call#unknown]
  goto BB3
BB14   <- [12]
  val?-           %14.0 = CastType           d     dn %10.1   <(int|str)->
  val+            %14.1 = CallSafeBuiltin    wed   match(%10.0, %14.0, 0L, nil)    <int$->
  lgl$#-          %14.2 = IsType                   %14.1 isA int$-
  void                    Branch                   %14.2 -> BB16 (if true) | BB17 (if false)
BB15   <- [12]
  void                    Nop                !     
  val?            %15.1 = %10.1
  dr              %15.2 = Typecheck@0x5642d522ecb0[Type#1]
  goto BB3
BB3   <- [13, 15]
  val?^ | miss    %3.0  = Phi                      e13.1:BB13, %15.1:BB15
  val?^ | miss    %3.1  = %3.0
  dr              %3.2  = Phi                      %13.2:BB13, %15.2:BB15
  dr              %3.3  = %3.2
  env             e3.4  = MaterializeEnv           , e0.2   <@?>
  prom-           %3.5  = MkArg                    %10.1, %in%[0x5642d68691d0]_p1 (!refl), e3.4
  val?~           %3.6  = CastType                 up %3.5
  prom-           %3.7  = MkArg                    %10.0, %in%[0x5642d68691d0]_p0 (!refl), e3.4
  val?~           %3.8  = CastType                 up %3.7
  fs              %3.9  = FrameState         R     0x5642d4ff4320+54: [], env=e3.4
  env             e3.10 = (MkEnv)            l     incomparables(miss)=nil, nomatch=0L, table=%3.6, x=%3.8, parent=R_BaseNamespace, context 0
  fs              %3.11 = FrameState         R     0x5642d51dbd40+23: [%10.0, %10.1], env=e3.10, next=%3.9
  void                    Deopt              !v    %3.11, %3.3, %3.1   !
BB16   <- [14]
  int$-           %16.0 = CastType           d     dn %14.1
  void                    Visible            v     
  lgl$-           %16.2 = Gt                 vd    %16.0, 0L, elided   <lgl$->
  void                    Return             l     %16.2
BB17   <- [14]
  env             e17.0 = MaterializeEnv           , e0.2   <@?>
  prom-           %17.1 = MkArg                    %14.0, %in%[0x5642d68691d0]_p1 (!refl), e17.0
  val?~           %17.2 = CastType                 up %17.1
  prom-           %17.3 = MkArg                    %10.0, %in%[0x5642d68691d0]_p0 (!refl), e17.0
  val?~           %17.4 = CastType                 up %17.3
  fs              %17.5 = FrameState         R     0x5642d4ff4320+54: [], env=e17.0
  env             e17.6 = (MkEnv)            l     incomparables(miss)=nil, nomatch=0L, table=%17.2, x=%17.4, parent=R_BaseNamespace, context 0
  fs              %17.7 = FrameState         R     0x5642d51dbd40+69: [%14.1], env=e17.6, next=%17.5
  void                    Deopt              !v    %17.7, Typecheck@0x5642d6026688[Type#2], %14.1   !
Prom 0:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    x, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <(int|str)$->
  void                    Return             l     %0.3
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    table, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <(int|str)->
  void                    Return             l     %0.3

│ %in%[0x5642d68691d0]                                                         │
└──────────────────────────────────────────────────────────────────────────────┘
