
┌──────────────────────────────────────────────────────────────────────────────┐
│ deparse[0x5642d6ba5200]                                                      │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch miss: 4                              │
│ Properties:  Eager, ForceOrd: 0                                              │
├────── Final PIR Version
deparse[0x5642d6ba5200]
BB0
  val?^           %0.0  = LdArg                    0
  env             e0.1  = MkEnv              l     expr=%0.0, width.cutoff(miss)=60L, backtick(miss)=missingArg, control(miss)=missingArg, nlines(miss)=missingArg, parent=R_BaseNamespace, context 1
  prom-           %0.2  = MkArg                    unboundValue, deparse[0x5642d6ba5200]_p1, e0.1
  val?^ | miss    %0.3  = CastType                 up %0.2
  void                    StArg              lW    backtick, %0.3, e0.1
  prom-           %0.5  = MkArg                    unboundValue, deparse[0x5642d6ba5200]_p5, e0.1
  val?^ | miss    %0.6  = CastType                 up %0.5
  void                    StArg              lW    control, %0.6, e0.1
  prom-           %0.8  = MkArg                    unboundValue, deparse[0x5642d6ba5200]_p6 (!refl), 
  val?^ | miss    %0.9  = CastType                 up %0.8
  void                    StArg              lW    nlines, %0.9, e0.1
  val?            %0.11 = Force!<lazy>       !v    %0.0, e0.1   <(sym|code)->
  lgl$#-          %0.12 = IsType                   %0.11 isA val?-
  void                    Branch                   %0.12 -> BB8 (if true) | BB9 (if false)
BB8   <- [0]
  val?-           %8.0  = CastType           d     dn %0.11   <(sym|code)->
  val?^ | miss    %8.1  = LdVar              eR    width.cutoff, e0.1
  val?            %8.2  = Force!<lazy>       !v    %8.1, e0.1   <int$->
  val?^ | miss    %8.3  = LdVar              eR    backtick, e0.1
  val?            %8.4  = Force!<lazy>       !v    %8.3, e0.1   <lgl$->
  val?^ | miss    %8.5  = LdVar              eR    .deparseOpts, e0.1
  lgl$#-          %8.6  = Identical                %8.5, function(control) <(rir::DispatchTable*)0x5642|...
  void                    Branch                   %8.6 -> BB10 (if true) | BB11 (if false)
BB9   <- [0]
  fs              %9.0  = FrameState         R     0x5642d687fc70+9: [%0.11], env=e0.1
  void                    Deopt              !v    %9.0, Typecheck@0x5642d6874a30[Type#5], %0.11   !
BB10   <- [8]
  val?^ | miss    %10.0 = LdVar              eR    control, e0.1
  val?            %10.1 = Force!<lazy>       !v    %10.0, e0.1   <str->
  prom-           %10.2 = MkArg                    %10.1, deparse[0x5642d6ba5200]_p7 (!refl), 
  val?            %10.3 = StaticCall         !v    .deparseOpts[0x5642d698d8d0](%10.2) e0.1   <real$->
  lgl$#-          %10.4 = IsType                   %10.3 isA real$-
  void                    Branch                   %10.4 -> BB12 (if true) | BB13 (if false)
BB11   <- [8]
  fs              %11.0 = FrameState         R     0x5642d687fc70+37: [%8.0, %8.2, %8.4], env=e0.1
  void                    Deopt              !v    %11.0, CallTarget@0x5642d6874a30[Call#4], %8.5   !
BB12   <- [10]
  real$-          %12.0 = CastType           d     dn %10.3
  val?^ | miss    %12.1 = LdVar              eR    nlines, e0.1
  val?            %12.2 = Force!<lazy>       !v    %12.1, e0.1   <int$->
  val?            %12.3 = CallBuiltin        !     deparse(%8.0, %8.2, %8.4, %12.0, %12.2) e0.1
  void                    Return             l     %12.3
BB13   <- [10]
  fs              %13.0 = FrameState         R     0x5642d687fc70+74: [%8.0, %8.2, %8.4, %10.3], env=e0.1
  void                    Deopt              !v    %13.0, Typecheck@0x5642d6874a30[Type#9], %10.3   !
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     %in%, <0x5642d4cddc40>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, deparse[0x5642d6ba5200]_p2, e0.0
  prom-           %0.3  = MkArg                    unboundValue, deparse[0x5642d6ba5200]_p4, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <lgl$->
  void                    Return             l     %0.4
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     mode, <0x5642d5aab140>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, deparse[0x5642d6ba5200]_p3, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <str$->
  void                    Return             l     %0.3
Prom 3:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    expr, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <(sym|code)->
  void                    Return             l     %0.3
Prom 4:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     c, <0x5642d49c7940>, e0.0
  val?            %0.2  = Call               !     %0.1("call", "expression", "(", "function") e0.0   <str->
  void                    Return             l     %0.2
Prom 5:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     c, <0x5642d49c7940>, e0.0
  val?            %0.2  = Call               !     %0.1("keepNA", "keepInteger", "niceNames", "showAttributes") e0.0   <str->
  void                    Return             l     %0.2
Prom 6:
BB0
  void                    Visible            v     
  void                    Return             l     -1L
Prom 7:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    control, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str->
  void                    Return             l     %0.3

│ deparse[0x5642d6ba5200]                                                      │
└──────────────────────────────────────────────────────────────────────────────┘
