
┌──────────────────────────────────────────────────────────────────────────────┐
│ h[0x55804ea0f740]                                                            │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;NonRefl0,NonRefl1,!Obj0,!Obj1        │
│ Properties:                                                                  │
├────── Final PIR Version
h[0x55804ea0f740]
BB0
  val?^           %0.0  = LdArg                    1
  val?^           %0.1  = LdArg                    0
  env             e0.2  = MkEnv              l     e=%0.1, w=%0.0, parent=<env 0x55804e699488>, context 1
  (cls|spec|blt)  %0.3  = LdFun              !     $, <0x55804bee0c10>, <env 0x55804e699488>
  prom-           %0.4  = MkArg                    unboundValue, h[0x55804ea0f740]_p0 (!refl), e0.2
  prom-           %0.5  = MkArg                    unboundValue, h[0x55804ea0f740]_p1, e0.2
  val?            %0.6  = Call               !     %0.3(%0.4, %0.5) e0.2   <cls->
  (cls|spec|blt)  %0.7  = ChkFunction        e     %0.6
  prom-           %0.8  = MkArg                    unboundValue, h[0x55804ea0f740]_p2, e0.2
  prom-           %0.9  = MkArg                    unboundValue, h[0x55804ea0f740]_p4, e0.2
  prom-           %0.10 = MkArg                    unboundValue, h[0x55804ea0f740]_p5, e0.2
  lgl$#-          %0.11 = Identical                %0.7, function(v, e, w) <(rir::DispatchTable*)0x5580|...
  val?^           %0.12 = CastType                 up %0.10
  val?^           %0.13 = CastType                 up %0.9
  val?^           %0.14 = CastType                 up %0.8
  void                    Branch                   %0.11 -> BB12 (if true) | BB13 (if false)
BB12   <- [0]
  ct              %12.0 = PushContext        lCL   %0.8, %0.9, %0.10, $(w, collect)(getAssignedVar(e), e, w), function(v, e, w) <(rir::DispatchTable*)0x5580|..., e0.2
  val?^ | miss    %12.1 = LdVar              eR    assign, <env 0x55804e95eaf0>
  lgl$#-          %12.2 = Identical                %12.1, function(x, value, pos=-(1), envir=as.environm|...
  void                    Branch                   %12.2 -> BB14 (if true) | BB15 (if false)
BB13   <- [0]
  fs              %13.0 = FrameState         R     0x55804e8c54e0+37: [%0.6], env=e0.2
  void                    Deopt              !v    %13.0, CallTarget@0x55804c64f098[Call#1], %0.7   !
BB14   <- [12]
  env             e14.0 = MkEnv              l     v=%0.14, e=%0.13, w=%0.12, parent=<env 0x55804e95eaf0>, context 1
  prom-           %14.1 = MkArg                    unboundValue, h[0x55804ea0f740]_p10, e14.0
  prom-           %14.2 = MkArg                    unboundValue, h[0x55804ea0f740]_p11, e14.0
  val?            %14.3 = StaticCall         !     assign[0x55804e9a62b0](%14.1, true, missingArg, %14.2) { 0 1 3n } e14.0   <lgl$->
  lgl$#-          %14.4 = IsType                   %14.3 isA lgl$-
  void                    Branch                   %14.4 -> BB16 (if true) | BB17 (if false)
BB15   <- [12]
  fs              %15.0 = FrameState         R     0x55804e8c54e0+80: [], env=e0.2
  env             e15.1 = (MkEnv)            l     v=%0.14, e=%0.13, w=%0.12, parent=<env 0x55804e95eaf0>, context 1
  fs              %15.2 = FrameState         R     0x55804e12e370+0: [], env=e15.1, next=%15.0
  void                    Deopt              !v    %15.2, CallTarget@0x55804eccc360[Call#0], %12.1   !
BB16   <- [14]
  lgl$-           %16.0 = CastType           d     dn %14.3
  val?            %16.1 = PopContext         C     %16.0, %12.0
  val?^ | miss    %16.2 = LdVar              eR    walkCode, e0.2
  lgl$#-          %16.3 = Identical                %16.2, function(e, w=makeCodeWalker()) <(rir::Dispatc|...
  void                    Branch                   %16.3 -> BB18 (if true) | BB19 (if false)
BB17   <- [14]
  fs              %17.0 = FrameState         R     0x55804e8c54e0+80: [], env=e0.2
  fs              %17.1 = FrameState         R     0x55804e12e370+54: [%14.3], env=e14.0, next=%17.0
  void                    Deopt              !v    %17.1, Typecheck@0x55804eccc360[Type#2], %14.3   !
BB18   <- [16]
  prom-           %18.0 = MkArg                    unboundValue, h[0x55804ea0f740]_p6, e0.2
  prom-           %18.1 = MkArg                    unboundValue, h[0x55804ea0f740]_p7, e0.2
  val?            %18.2 = StaticCall         !     walkCode[0x55804e3d64d0](%18.0, %18.1) e0.2
  val?^ | miss    %18.3 = LdVar              eR    walkCode, e0.2
  lgl$#-          %18.4 = Identical                %18.3, function(e, w=makeCodeWalker()) <(rir::Dispatc|...
  void                    Branch                   %18.4 -> BB20 (if true) | BB21 (if false)
BB19   <- [16]
  fs              %19.0 = FrameState         R     0x55804e8c54e0+80: [%16.1], env=e0.2
  void                    Deopt              !v    %19.0, CallTarget@0x55804c64f098[Call#3], %16.2   !
BB20   <- [18]
  prom-           %20.0 = MkArg                    unboundValue, h[0x55804ea0f740]_p8, e0.2
  prom-           %20.1 = MkArg                    unboundValue, h[0x55804ea0f740]_p9, e0.2
  val?            %20.2 = StaticCall         !     walkCode[0x55804e3d64d0](%20.0, %20.1) e0.2   <nil->
  void                    Return             l     %20.2
BB21   <- [18]
  fs              %21.0 = FrameState         R     0x55804e8c54e0+118: [%18.2], env=e0.2
  void                    Deopt              !v    %21.0, CallTarget@0x55804c64f098[Call#4], %18.3   !
Prom 0:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    w, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    collect, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     getAssignedVar, <0x55804e596bb0>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, h[0x55804ea0f740]_p3, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <str$->
  void                    Return             l     %0.3
Prom 3:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    e, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <code->
  void                    Return             l     %0.3
Prom 4:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    e, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 5:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    w, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 6:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    e, e0.0
  val?            %0.2  = Force<wrapped>     !v    %0.1, e0.0   <code->
  val?            %0.3  = Extract2_1D        !v    %0.2, 2, e0.0   <sym->
  void                    Visible            v     
  void                    Return             l     %0.3
Prom 7:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    w, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 8:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    e, e0.0
  val?            %0.2  = Force<wrapped>     !v    %0.1, e0.0   <code->
  val?            %0.3  = Extract2_1D        !v    %0.2, 3, e0.0   <code->
  void                    Visible            v     
  void                    Return             l     %0.3
Prom 9:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    w, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 10:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    v, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 11:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    env, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <env->
  void                    Return             l     %0.3

│ h[0x55804ea0f740]                                                            │
└──────────────────────────────────────────────────────────────────────────────┘
