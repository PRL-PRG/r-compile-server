
┌──────────────────────────────────────────────────────────────────────────────┐
│ getAssignedVar[0x55804e498cd0]                                               │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;NonRefl0,!Obj0                       │
│ Properties:  Eager, ForceOrd: 0                                              │
├────── Final PIR Version
getAssignedVar[0x55804e498cd0]
BB0
  val?^           %0.0  = LdArg                    0
  env             e0.1  = MkEnv              l     e=%0.0, parent=<env 0x55804e699488>, context 1
  val+            %0.2  = Force!<lazy>       !vr   %0.0,    <code->
  val?            %0.3  = Extract2_1D        wed   %0.2, 2, elided   <sym->
  void                    StVar              lW    v, %0.3, e0.1
  lgl$-           %0.5  = Missing            eR    v, e0.1
  lgl$#-          %0.6  = CheckTrueFalse     e     %0.5
  void                    Branch                   %0.6 -> BB12 (if true) | BB3 (if false)
BB12   <- [0]
  (cls|spec|blt)  %12.0 = LdFun              !v    stop0, <env 0x55804e699488>
  fs              %12.1 = FrameState         R     0x55804e7e9290+1085: [%12.0], env=e0.1
  void                    Deopt              !v    %12.1, DeadCall@0x55804c64f618[Call#25], %12.0
BB3   <- [0]
  val?^ | miss    %3.0  = LdVar              eR    %in%, <env 0x55804e699488>
  lgl$#-          %3.1  = Identical                %3.0, function(x, table) <(rir::DispatchTable*)0x558|...
  void                    Branch                   %3.1 -> BB14 (if true) | BB15 (if false)
BB14   <- [3]
  val?^ | miss    %14.0 = LdVar              eR    typeof, <env 0x55804e699488>
  lgl$#-          %14.1 = Identical                %14.0, function(x) <(rir::DispatchTable*)0x55804e1c3c|...
  void                    Branch                   %14.1 -> BB16 (if true) | BB17 (if false)
BB15   <- [3]
  void                    Nop                !     
  val?^ | miss    %15.1 = %3.0
  dr              %15.2 = CallTarget@0x55804c64f618[Call#0]
  goto BB13
BB16   <- [14]
  val             %16.0 = ChkMissing         e     %0.3
  lgl$#-          %16.1 = IsType                   %16.0 isA val?~- | miss
  void                    Branch                   %16.1 -> BB18 (if true) | BB19 (if false)
BB17   <- [14]
  void                    Nop                !     
  val?^ | miss    %17.1 = %14.0
  dr              %17.2 = CallTarget@0x55804c64f618[Call#1]
  goto BB13
BB13   <- [15, 17, 19]
  val?^ | miss    %13.0 = Phi                      %15.1:BB15, %17.1:BB17, %19.1:BB19
  val?^ | miss    %13.1 = %13.0
  dr              %13.2 = Phi                      %15.2:BB15, %17.2:BB17, %19.2:BB19
  dr              %13.3 = %13.2
  fs              %13.4 = FrameState         R     0x55804e7e9290+67: [], env=e0.1
  void                    Deopt              !v    %13.4, %13.3, %13.1
BB18   <- [16]
  val-            %18.0 = CastType           d     dn %16.0   <sym->
  str$-           %18.1 = CallSafeBuiltin    wed   typeof(%18.0) 
  (cls|spec|blt)  %18.2 = LdFun              !v    c, <0x55804bee1940>, <env 0x55804e699488>
  val?            %18.3 = Call               !v    %18.2("symbol", "character") e0.1   <str->
  lgl$#-          %18.4 = IsType                   %18.3 isA val?-
  void                    Branch                   %18.4 -> BB20 (if true) | BB21 (if false)
BB19   <- [16]
  void                    Nop                !     
  val             %19.1 = %16.0
  dr              %19.2 = Typecheck@0x55804c64f618[Type#2]
  goto BB13
BB20   <- [18]
  val?-           %20.0 = CastType           d     dn %18.3   <str->
  val+            %20.1 = CallSafeBuiltin    wed   match(%18.1, %20.0, 0L, nil)    <int->
  lgl$#-          %20.2 = IsType                   %20.1 isA int-
  void                    Branch                   %20.2 -> BB22 (if true) | BB23 (if false)
BB21   <- [18]
  prom-           %21.0 = MkArg                    unboundValue, getAssignedVar[0x55804e498cd0]_p2, e0.1
  val?^           %21.1 = CastType                 up %21.0
  prom-           %21.2 = MkArg                    %18.1, getAssignedVar[0x55804e498cd0]_p0 (!refl), e0.1
  val?~           %21.3 = CastType                 up %21.2
  env             e21.4 = (MkEnv)            l     x=%21.3, table=%21.1, parent=R_BaseNamespace, context 0
  env             e21.5 = MaterializeEnv           , e21.4   <@?>
  fs              %21.6 = FrameState         R     0x55804e7e9290+116: [], env=e0.1
  fs              %21.7 = FrameState         R     0x55804c50e320+54: [], env=e21.5, next=%21.6
  prom-           %21.8 = MkArg                    unboundValue, getAssignedVar[0x55804e498cd0]_p4, e21.5
  val?^           %21.9 = CastType                 up %21.8
  prom-           %21.10 = MkArg                    %18.1, getAssignedVar[0x55804e498cd0]_p3 (!refl), e21.5
  val?~           %21.11 = CastType                 up %21.10
  env             e21.12 = (MkEnv)            l     incomparables(miss)=nil, nomatch=0L, table=%21.9, x=%21.11, parent=R_BaseNamespace, context -1
  fs              %21.13 = FrameState         R     0x55804c6f5d40+23: [%18.1, %18.3], env=e21.12, next=%21.7
  void                    Deopt              !v    %21.13, Typecheck@0x55804c748cb0[Type#1], %18.3   !
BB22   <- [20]
  int-            %22.0 = CastType           d     dn %20.1
  lgl-            %22.1 = Gt                 wed   %22.0, 0L, elided   <lgl->
  lgl$#-          %22.2 = CheckTrueFalse     we    %22.1
  void                    Branch                   %22.2 -> BB11 (if true) | BB10 (if false)
BB23   <- [20]
  prom-           %23.0 = MkArg                    unboundValue, getAssignedVar[0x55804e498cd0]_p2, e0.1
  val?^           %23.1 = CastType                 up %23.0
  prom-           %23.2 = MkArg                    %18.1, getAssignedVar[0x55804e498cd0]_p0 (!refl), e0.1
  val?~           %23.3 = CastType                 up %23.2
  env             e23.4 = (MkEnv)            l     x=%23.3, table=%23.1, parent=R_BaseNamespace, context 0
  env             e23.5 = MaterializeEnv           , e23.4   <@?>
  fs              %23.6 = FrameState         R     0x55804e7e9290+116: [], env=e0.1
  fs              %23.7 = FrameState         R     0x55804c50e320+54: [], env=e23.5, next=%23.6
  prom-           %23.8 = MkArg                    unboundValue, getAssignedVar[0x55804e498cd0]_p4, e23.5
  val?^           %23.9 = CastType                 up %23.8
  prom-           %23.10 = MkArg                    %18.1, getAssignedVar[0x55804e498cd0]_p3 (!refl), e23.5
  val?~           %23.11 = CastType                 up %23.10
  env             e23.12 = (MkEnv)            l     incomparables(miss)=nil, nomatch=0L, table=%23.9, x=%23.11, parent=R_BaseNamespace, context -1
  fs              %23.13 = FrameState         R     0x55804c6f5d40+69: [%20.1], env=e23.12, next=%23.7
  void                    Deopt              !v    %23.13, Typecheck@0x55804d540688[Type#2], %20.1   !
BB11   <- [22]
  val?^ | miss    %11.0 = LdVar              eR    as.character, e0.1
  lgl$#-          %11.1 = Identical                <blt as.character>, %11.0   <true>
  void                    Branch                   %11.1 -> BB24 (if true) | BB25 (if false)
BB10   <- [22]
  (cls|spec|blt)  %10.0 = LdFun              !v    typeof, e0.1
  fs              %10.1 = FrameState         R     0x55804e7e9290+132: [%10.0], env=e0.1
  void                    Deopt              !v    %10.1, DeadCall@0x55804c64f618[Call#3], %10.0   !
BB24   <- [11]
  val?^ | miss    %24.0 = LdVar              eR    v, e0.1
  lgl$#-          %24.1 = IsType                   %24.0 isA val?~- | miss
  void                    Branch                   %24.1 -> BB26 (if true) | BB27 (if false)
BB25   <- [11]
  void                    Nop                !     
  lgl$#-          %25.1 = %11.1
  dr              %25.2 = DeadBranchReached@0x55804c64f618[Test#7]
  goto BB8
BB26   <- [24]
  val?~- | miss   %26.0 = CastType           d     dn %24.0
  val?-           %26.1 = Force!<value>            %26.0,    <sym->
  val+            %26.2 = CallSafeBuiltin    vwed  as.character(%26.1)    <str$->
  void                    Return             l     %26.2
BB27   <- [24]
  void                    Nop                !     
  val?^ | miss    %27.1 = %24.0
  dr              %27.2 = Typecheck@0x55804c64f618[Type#46]
  goto BB8
BB8   <- [25, 27]
  val?^ | miss    %8.0  = Phi                      %25.1:BB25, %27.1:BB27
  val?^ | miss    %8.1  = %8.0
  dr              %8.2  = Phi                      %25.2:BB25, %27.2:BB27
  dr              %8.3  = %8.2
  fs              %8.4  = FrameState         R     0x55804e7e9290+122: [%22.2], env=e0.1
  void                    Deopt              !v    %8.4, %8.3, %8.1   !
Prom 0:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     typeof, <0x55804e68e748>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, getAssignedVar[0x55804e498cd0]_p1, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <str$->
  void                    Return             l     %0.3
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    v, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <sym->
  void                    Return             l     %0.3
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     c, <0x55804bee1940>, e0.0
  val?            %0.2  = Call               !     %0.1("symbol", "character") e0.0   <str->
  void                    Return             l     %0.2
Prom 3:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    x, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <(int|str)+>
  void                    Return             l     %0.3
Prom 4:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    table, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <val?->
  void                    Return             l     %0.3

│ getAssignedVar[0x55804e498cd0]                                               │
└──────────────────────────────────────────────────────────────────────────────┘
