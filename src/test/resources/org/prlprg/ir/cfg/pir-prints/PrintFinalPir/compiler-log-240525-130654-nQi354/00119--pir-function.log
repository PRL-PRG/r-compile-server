
┌──────────────────────────────────────────────────────────────────────────────┐
│ [0x55804e237fe0]                                                             │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;NonRefl1,!Obj1                       │
│ Properties:                                                                  │
├────── Final PIR Version
[0x55804e237fe0]
BB0
  val?^           %0.0  = LdArg                    1
  val?^           %0.1  = LdArg                    0
  val?^ | miss    %0.2  = LdVar              eR    exists, <env 0x55804e699488>
  lgl$#-          %0.3  = Identical                %0.2, function(x, where=-(1), envir=if(missing(frame|...
  void                    Branch                   %0.3 -> BB47 (if true) | BB48 (if false)
BB47   <- [0]
  env             e47.0 = MkEnv              l     v=%0.1, w=%0.0, parent=<env 0x55804e699488>, context 1
  prom-           %47.1 = MkArg                    unboundValue, [0x55804e237fe0]_p0, e47.0
  prom-           %47.2 = MkArg                    unboundValue, [0x55804e237fe0]_p1, e47.0
  val?            %47.3 = StaticCall         !     exists[0x55804e460d90](%47.1, missingArg, %47.2, missingArg, missingArg, false) { 0 2n 5n } e47.0   <lgl$->
  lgl$#-          %47.4 = IsType                   %47.3 isA lgl$-
  void                    Branch                   %47.4 -> BB49 (if true) | BB50 (if false)
BB48   <- [0]
  env             e48.0 = (MkEnv)            l     v=%0.1, w=%0.0, parent=<env 0x55804e699488>, context 1
  fs              %48.1 = FrameState         R     0x55804e810840+0: [], env=e48.0
  void                    Deopt              !v    %48.1, CallTarget@0x55804e5e3578[Call#0], %0.2
BB49   <- [47]
  lgl$-           %49.0 = CastType           d     dn %47.3
  lgl$-           %49.1 = AsLogical                %49.0
  lgl$#-          %49.2 = Identical                %49.1, false
  void                    Branch                   %49.2 -> BB45 (if true) | BB5 (if false)
BB50   <- [47]
  void                    Nop                !     
  val?            %50.1 = %47.3
  dr              %50.2 = Typecheck@0x55804e5e3578[Type#2]
  goto BB3
BB45   <- [49]
  void                    Nop                !     
  lgl$-           %45.1 = %49.1
  goto BB36
BB5   <- [49]
  val?^ | miss    %5.0  = LdVar              eR    isBaseVar, e47.0
  lgl$#-          %5.1  = Identical                %5.0, function(v, env) <(rir::DispatchTable*)0x55804|...
  void                    Branch                   %5.1 -> BB51 (if true) | BB52 (if false)
BB3   <- [50, 52]
  val?^ | miss    %3.0  = Phi                      %50.1:BB50, %52.1:BB52
  val?^ | miss    %3.1  = %3.0
  dr              %3.2  = Phi                      %50.2:BB50, %52.2:BB52
  dr              %3.3  = %3.2
  fs              %3.4  = FrameState         R     0x55804e810840+54: [%47.3], env=e47.0
  void                    Deopt              !v    %3.4, %3.3, %3.1   !
BB36   <- [45, 35]
  lgl$-           %36.0 = Phi                      %35.5:BB35, %45.1:BB45
  lgl$-           %36.1 = %36.0
  lgl$#-          %36.2 = CheckTrueFalse     e     %36.1
  void                    Branch                   %36.2 -> BB41 (if true) | BB39 (if false)
BB51   <- [5]
  prom-           %51.0 = MkArg                    unboundValue, [0x55804e237fe0]_p2, e47.0
  prom-           %51.1 = MkArg                    unboundValue, [0x55804e237fe0]_p3, e47.0
  ct              %51.2 = PushContext        lCL   %51.0, %51.1, isBaseVar(v, $(w, env)), function(v, env) <(rir::DispatchTable*)0x55804|..., e47.0
  val?^           %51.3 = CastType                 up %51.1
  val?^           %51.4 = CastType                 up %51.0
  val?^ | miss    %51.5 = LdVar              eR    findOwnerEnv, <env 0x55804e699488>
  lgl$#-          %51.6 = Identical                %51.5, function(v, env, stop=NA, default=NA) <(rir::D|...
  void                    Branch                   %51.6 -> BB53 (if true) | BB54 (if false)
BB52   <- [5]
  void                    Nop                !     
  val?^ | miss    %52.1 = %5.0
  dr              %52.2 = CallTarget@0x55804e5e3578[Call#1]
  goto BB3
BB41   <- [36]
  val?^ | miss    %41.0 = LdVar              eR    get, e47.0
  lgl$#-          %41.1 = Identical                %41.0, function(x, pos=-(1L), envir=as.environment(po|...
  void                    Branch                   %41.1 -> BB55 (if true) | BB56 (if false)
BB39   <- [36]
  void                    Invisible          v     
  nil-            %39.1 = nil
  goto BB40
BB53   <- [51]
  env             e53.0 = MkEnv              l     v=%51.4, env=%51.3, parent=<env 0x55804e699488>, context 1
  prom-           %53.1 = MkArg                    unboundValue, [0x55804e237fe0]_p8, e53.0
  prom-           %53.2 = MkArg                    unboundValue, [0x55804e237fe0]_p9, e53.0
  val?            %53.3 = StaticCall         !v    findOwnerEnv[0x55804e306db0](%53.1, %53.2) e53.0   <(lgl|env)->
  void                    StVar              lW    e, %53.3, e53.0
  val?^ | miss    %53.5 = LdVar              eR    is.baseenv, e53.0
  lgl$#-          %53.6 = Identical                %53.5, function(e) <(rir::DispatchTable*)0x55804e41e7|...
  void                    Branch                   %53.6 -> BB57 (if true) | BB58 (if false)
BB54   <- [51]
  fs              %54.0 = FrameState         R     0x55804e810840+103: [%49.1], env=e47.0
  env             e54.1 = (MkEnv)            l     v=%51.4, env=%51.3, parent=<env 0x55804e699488>, context 1
  fs              %54.2 = FrameState         R     0x55804ea138f0+0: [], env=e54.1, next=%54.0
  void                    Deopt              !v    %54.2, CallTarget@0x55804ea24858[Call#0], %51.5   !
BB55   <- [41]
  prom-           %55.0 = MkArg                    unboundValue, [0x55804e237fe0]_p6, e47.0
  prom-           %55.1 = MkArg                    unboundValue, [0x55804e237fe0]_p7, e47.0
  val?            %55.2 = StaticCall         !     get[0x55804e097880](%55.0, missingArg, %55.1) { 0 2n } e47.0   <cls->
  val?            %55.3 = %55.2
  goto BB40
BB56   <- [41]
  fs              %56.0 = FrameState         R     0x55804e810840+248: [%36.1], env=e47.0
  void                    Deopt              !v    %56.0, CallTarget@0x55804e5e3578[Call#7], %41.0   !
BB40   <- [39, 55]
  val?            %40.0 = Phi                      %39.1:BB39, %55.3:BB55
  val?            %40.1 = %40.0
  void                    Return             l     %40.1
BB57   <- [53]
  prom-           %57.0 = MkArg                    unboundValue, [0x55804e237fe0]_p10 (!refl), e53.0
  ct              %57.1 = PushContext        lCL   %57.0, is.baseenv(e), function(e) <(rir::DispatchTable*)0x55804e41e7|..., e53.0
  val?^           %57.2 = CastType                 up %57.0
  val?^ | miss    %57.3 = LdVar              eR    identical, <env 0x55804e699488>
  lgl$#-          %57.4 = Identical                %57.3, function(x, y, num.eq=TRUE, single.NA=TRUE, at|...
  void                    Branch                   %57.4 -> BB59 (if true) | BB60 (if false)
BB58   <- [53]
  fs              %58.0 = FrameState         R     0x55804e810840+103: [%49.1], env=e47.0
  fs              %58.1 = FrameState         R     0x55804ea138f0+51: [], env=e53.0, next=%58.0
  void                    Deopt              !v    %58.1, CallTarget@0x55804ea24858[Call#1], %53.5   !
BB59   <- [57]
  env             e59.0 = MkEnv              l     e=%57.2, parent=<env 0x55804e699488>, context 1
  prom-           %59.1 = MkArg                    unboundValue, [0x55804e237fe0]_p13, e59.0
  prom-           %59.2 = MkArg                    unboundValue, [0x55804e237fe0]_p14, e59.0
  ct              %59.3 = PushContext        lCL   %59.1, %59.2, identical(e, .BaseEnv), function(x, y, num.eq=TRUE, single.NA=TRUE, at|..., e59.0
  val?^           %59.4 = CastType                 up %59.2
  val?^           %59.5 = CastType                 up %59.1
  env             e59.6 = MkEnv              l     x=%59.5, y=%59.4, num.eq(miss)=true, single.NA(miss)=true, attrib.as.set(miss)=true, ignore.bytecode(miss)=true, ignore.environment(miss)=false, ignore.srcref(miss)=true, parent=R_BaseNamespace, context 1
  val?            %59.7 = Force!<lazy>       !vL   %59.5, e59.6   <val?+>
  val?            %59.8 = Force!<lazy>       !vL   %59.4, e59.6   <val?+>
  val?            %59.9 = CallBuiltin        !v    identical(%59.7, %59.8, true, true, true, true, false, true) e59.6
  val?            %59.10 = PopContext         C     %59.9, %59.3   <lgl$->
  lgl$#-          %59.11 = IsType                   %59.10 isA lgl$-
  void                    Branch                   %59.11 -> BB61 (if true) | BB62 (if false)
BB60   <- [57]
  fs              %60.0 = FrameState         R     0x55804e810840+103: [%49.1], env=e47.0
  fs              %60.1 = FrameState         R     0x55804ea138f0+83: [], env=e53.0, next=%60.0
  env             e60.2 = (MkEnv)            l     e=%57.2, parent=<env 0x55804e699488>, context 1
  fs              %60.3 = FrameState         R     0x55804eb37490+0: [], env=e60.2, next=%60.1
  void                    Deopt              !v    %60.3, CallTarget@0x55804ea246f8[Call#0], %57.3   !
BB61   <- [59]
  lgl$-           %61.0 = CastType           d     dn %59.10
  val?            %61.1 = PopContext         C     %61.0, %57.1   <lgl$->
  lgl$#-          %61.2 = IsType                   %61.1 isA lgl$-
  void                    Branch                   %61.2 -> BB63 (if true) | BB64 (if false)
BB62   <- [59]
  fs              %62.0 = FrameState         R     0x55804e810840+103: [%49.1], env=e47.0
  fs              %62.1 = FrameState         R     0x55804ea138f0+83: [], env=e53.0, next=%62.0
  fs              %62.2 = FrameState         R     0x55804eb37490+37: [%59.10], env=e59.0, next=%62.1
  void                    Deopt              !v    %62.2, Typecheck@0x55804ea246f8[Type#2], %59.10   !
BB63   <- [61]
  lgl$-           %63.0 = CastType           d     dn %61.1
  lgl$-           %63.1 = AsLogical                %63.0
  lgl$#-          %63.2 = Identical                %63.1, true
  void                    Branch                   %63.2 -> BB44 (if true) | BB16 (if false)
BB64   <- [61]
  void                    Nop                !     
  val?            %64.1 = %61.1
  dr              %64.2 = Typecheck@0x55804ea24858[Type#4]
  goto BB14
BB44   <- [63]
  void                    Nop                !     
  lgl$-           %44.1 = %63.1
  goto BB19
BB16   <- [63]
  val?^ | miss    %16.0 = LdVar              eR    identical, e53.0
  lgl$#-          %16.1 = Identical                %16.0, function(x, y, num.eq=TRUE, single.NA=TRUE, at|...
  void                    Branch                   %16.1 -> BB65 (if true) | BB66 (if false)
BB14   <- [64, 66]
  val?^ | miss    %14.0 = Phi                      %64.1:BB64, %66.1:BB66
  val?^ | miss    %14.1 = %14.0
  dr              %14.2 = Phi                      %64.2:BB64, %66.2:BB66
  dr              %14.3 = %14.2
  fs              %14.4 = FrameState         R     0x55804e810840+103: [%49.1], env=e47.0
  fs              %14.5 = FrameState         R     0x55804ea138f0+83: [%61.1], env=e53.0, next=%14.4
  void                    Deopt              !v    %14.5, %14.3, %14.1   !
BB19   <- [44, 67]
  lgl$-           %19.0 = Phi                      %67.3:BB67, %44.1:BB44
  lgl$-           %19.1 = %19.0
  lgl$-           %19.2 = AsLogical                %19.1
  lgl$#-          %19.3 = Identical                %19.2, true
  void                    Branch                   %19.3 -> BB43 (if true) | BB20 (if false)
BB65   <- [16]
  prom-           %65.0 = MkArg                    unboundValue, [0x55804e237fe0]_p11, e53.0
  prom-           %65.1 = MkArg                    unboundValue, [0x55804e237fe0]_p12, e53.0
  ct              %65.2 = PushContext        lCL   %65.0, %65.1, identical(e, .BaseNamespaceEnv), function(x, y, num.eq=TRUE, single.NA=TRUE, at|..., e53.0
  val?^           %65.3 = CastType                 up %65.1
  val?^           %65.4 = CastType                 up %65.0
  env             e65.5 = MkEnv              l     x=%65.4, y=%65.3, num.eq(miss)=true, single.NA(miss)=true, attrib.as.set(miss)=true, ignore.bytecode(miss)=true, ignore.environment(miss)=false, ignore.srcref(miss)=true, parent=R_BaseNamespace, context 1
  val?            %65.6 = Force!<lazy>       !vL   %65.4, e65.5   <val?+>
  val?            %65.7 = Force!<lazy>       !vL   %65.3, e65.5   <val?+>
  val?            %65.8 = CallBuiltin        !v    identical(%65.6, %65.7, true, true, true, true, false, true) e65.5
  val?            %65.9 = PopContext         C     %65.8, %65.2   <lgl$->
  lgl$#-          %65.10 = IsType                   %65.9 isA lgl$-
  void                    Branch                   %65.10 -> BB67 (if true) | BB68 (if false)
BB66   <- [16]
  void                    Nop                !     
  val?^ | miss    %66.1 = %16.0
  dr              %66.2 = CallTarget@0x55804ea24858[Call#2]
  goto BB14
BB43   <- [19]
  void                    Nop                !     
  lgl$-           %43.1 = %19.2
  goto BB25
BB20   <- [19]
  val?^ | miss    %20.0 = LdVar              eR    v, e53.0
  val?            %20.1 = Force!<wrapped>    !v    %20.0, e53.0   <str$->
  lgl$#-          %20.2 = IsType                   %20.1 isA val?-
  void                    Branch                   %20.2 -> BB71 (if true) | BB72 (if false)
BB67   <- [65]
  lgl$-           %67.0 = CastType           d     dn %65.9
  lgl$-           %67.1 = AsLogical                %67.0
  lgl$-           %67.2 = LOr                      %63.1, %67.1
  lgl$-           %67.3 = %67.2
  goto BB19
BB68   <- [65]
  fs              %68.0 = FrameState         R     0x55804e810840+103: [%49.1], env=e47.0
  fs              %68.1 = FrameState         R     0x55804ea138f0+132: [%63.1, %65.9], env=e53.0, next=%68.0
  void                    Deopt              !v    %68.1, Typecheck@0x55804ea24858[Type#7], %65.9   !
BB25   <- [43, 73]
  lgl$-           %25.0 = Phi                      %73.3:BB73, %43.1:BB43
  lgl$-           %25.1 = %25.0
  val?            %25.2 = PopContext         C     %25.1, %51.2   <lgl$->
  lgl$#-          %25.3 = IsType                   %25.2 isA lgl$-
  void                    Branch                   %25.3 -> BB69 (if true) | BB70 (if false)
BB71   <- [20]
  val?-           %71.0 = CastType           d     dn %20.1   <str$->
  lgl-            %71.1 = Eq                 wed   %71.0, "@<-", elided   <lgl$->
  lgl$#-          %71.2 = IsType                   %71.1 isA lgl$-
  void                    Branch                   %71.2 -> BB73 (if true) | BB74 (if false)
BB72   <- [20]
  fs              %72.0 = FrameState         R     0x55804e810840+103: [%49.1], env=e47.0
  fs              %72.1 = FrameState         R     0x55804ea138f0+155: [%19.2, %20.1], env=e53.0, next=%72.0
  void                    Deopt              !v    %72.1, Typecheck@0x55804ea24858[Type#8], %20.1   !
BB69   <- [25]
  lgl$-           %69.0 = CastType           d     dn %25.2
  lgl$-           %69.1 = AsLogical                %69.0
  lgl$#-          %69.2 = Identical                %69.1, true
  lgl$-           %69.3 = AsLogical                %69.1
  lgl$#-          %69.4 = Identical                %69.3, true
  lgl$-           %69.5 = AsLogical                %69.3
  lgl$#-          %69.6 = Identical                %69.5, true
  void                    Branch                   %69.2 -> BB29 (if true) | BB28 (if false)
BB70   <- [25]
  fs              %70.0 = FrameState         R     0x55804e810840+103: [%49.1, %25.2], env=e47.0
  void                    Deopt              !v    %70.0, Typecheck@0x55804e5e3578[Type#7], %25.2   !
BB73   <- [71]
  lgl$-           %73.0 = CastType           d     dn %71.1
  lgl$-           %73.1 = AsLogical                %73.0
  lgl$-           %73.2 = LOr                      %19.2, %73.1
  lgl$-           %73.3 = %73.2
  goto BB25
BB74   <- [71]
  fs              %74.0 = FrameState         R     0x55804e810840+103: [%49.1], env=e47.0
  fs              %74.1 = FrameState         R     0x55804ea138f0+167: [%19.2, %71.1], env=e53.0, next=%74.0
  void                    Deopt              !v    %74.1, Typecheck@0x55804ea24858[Type#9], %71.1   !
BB29   <- [69]
  void                    Branch                   %69.4 -> BB31 (if true) | BB30 (if false)
BB28   <- [69]
  (cls|spec|blt)  %28.0 = LdFun              !v    isStatsVar, e47.0
  fs              %28.1 = FrameState         R     0x55804e810840+120: [%49.1, %69.1, %28.0], env=e47.0
  void                    Deopt              !v    %28.1, DeadCall@0x55804e5e3578[Call#3], %28.0   !
BB31   <- [29]
  void                    Branch                   %69.6 -> BB42 (if true) | BB32 (if false)
BB30   <- [29]
  (cls|spec|blt)  %30.0 = LdFun              !v    isUtilsVar, e47.0
  fs              %30.1 = FrameState         R     0x55804e810840+171: [%49.1, %69.3, %30.0], env=e47.0
  void                    Deopt              !v    %30.1, DeadCall@0x55804e5e3578[Call#5], %30.0   !
BB42   <- [31]
  void                    Nop                !     
  lgl$-           %42.1 = %69.5
  goto BB35
BB32   <- [31]
  val?^ | miss    %32.0 = LdVar              eR    v, e47.0
  val?            %32.1 = Force!             !v    %32.0, e47.0   <val?_>
  lgl$#-          %32.2 = IsType                   %32.1 isA val?+
  void                    Branch                   %32.2 -> BB75 (if true) | BB76 (if false)
BB35   <- [42, 75]
  lgl$-           %35.0 = Phi                      %75.4:BB75, %42.1:BB42
  lgl$-           %35.1 = %35.0
  lgl$-           %35.2 = AsLogical                %35.1
  lgl$-           %35.3 = LAnd                     %49.1, %35.2
  void                    Visible            v     
  lgl$-           %35.5 = %35.3
  goto BB36
BB75   <- [32]
  val?+           %75.0 = CastType           d     dn %32.1   <val?_>
  lgl             %75.1 = Eq                 wed   %75.0, "Quote", elided   <val?_>
  lgl$-           %75.2 = AsLogical          e     %75.1
  lgl$-           %75.3 = LOr                      %69.5, %75.2
  lgl$-           %75.4 = %75.3
  goto BB35
BB76   <- [32]
  fs              %76.0 = FrameState         R     0x55804e810840+226: [%49.1, %69.5, %32.1], env=e47.0
  void                    Deopt              !v    %76.0, Typecheck@0x55804e5e3578[Type#18], %32.1   !
Prom 0:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    v, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    collectUsageHandlers, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    v, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 3:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     $, <0x55804bee0c10>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, [0x55804e237fe0]_p4, e0.0
  prom-           %0.3  = MkArg                    unboundValue, [0x55804e237fe0]_p5, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <env+>
  void                    Return             l     %0.4
Prom 4:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    w, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 5:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    env, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 6:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    v, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 7:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    collectUsageHandlers, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 8:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    v, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 9:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    env, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <env+>
  void                    Return             l     %0.3
Prom 10:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    e, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <(lgl|env)->
  void                    Return             l     %0.3
Prom 11:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    e, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <(lgl|env)->
  void                    Return             l     %0.3
Prom 12:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    .BaseNamespaceEnv, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 13:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    e, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <(lgl|env)+>
  void                    Return             l     %0.3
Prom 14:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    .BaseEnv, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <env->
  void                    Return             l     %0.3

│ [0x55804e237fe0]                                                             │
└──────────────────────────────────────────────────────────────────────────────┘
