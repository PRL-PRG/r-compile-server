
┌──────────────────────────────────────────────────────────────────────────────┐
│ [0x55804ecaf480]                                                             │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;Eager0,NonRefl0,NonRefl1,NonRefl2,NonRefl3,!Obj0,!Obj1,!Obj2,!Obj3│
│ Properties:                                                                  │
├────── Final PIR Version
[0x55804ecaf480]
BB0
  val?^           %0.0  = LdArg                    3
  val?^           %0.1  = LdArg                    2
  val?^           %0.2  = LdArg                    1
  val?~+          %0.3  = LdArg                    0
  val+            %0.4  = Force<value>             %0.3,    <str$->
  val?^ | miss    %0.5  = LdVar              eR    %in%, <env 0x55804e699488>
  lgl$#-          %0.6  = Identical                %0.5, function(x, table) <(rir::DispatchTable*)0x558|...
  void                    Branch                   %0.6 -> BB96 (if true) | BB97 (if false)
BB96   <- [0]
  env             e96.0 = MkEnv              l     type=%0.3, n=%0.2, e=%0.1, w=%0.0, parent=<env 0x55804e699488>, context 1
  (cls|spec|blt)  %96.1 = LdFun              !v    c, <0x55804bee1940>, <env 0x55804e699488>
  lgl$#-          %96.2 = Identical                %96.1, <blt c>
  void                    Branch                   %96.2 -> BB98 (if true) | BB99 (if false)
BB97   <- [0]
  void                    Nop                !     
  val?^ | miss    %97.1 = %0.5
  dr              %97.2 = CallTarget@0x55804e19e1f0[Call#0]
  goto BB95
BB98   <- [96]
  str-            %98.0 = CallSafeBuiltin    wed   c("<-", "<<-")    <str->
  val+            %98.1 = CallSafeBuiltin    wed   match(%0.4, %98.0, 0L, nil)    <int->
  lgl$#-          %98.2 = IsType                   %98.1 isA int-
  void                    Branch                   %98.2 -> BB100 (if true) | BB101 (if false)
BB99   <- [96]
  void                    Nop                !     
  (cls|spec|blt)  %99.1 = %96.1
  dr              %99.2 = CallTarget@0x55804e19e1f0[Call#1]
  goto BB95
BB95   <- [97, 99]
  val?^ | miss    %95.0 = Phi                      %97.1:BB97, %99.1:BB99
  val?^ | miss    %95.1 = %95.0
  dr              %95.2 = Phi                      %97.2:BB97, %99.2:BB99
  dr              %95.3 = %95.2
  env             e95.4 = (MkEnv)            l     type=%0.3, n=%0.2, e=%0.1, w=%0.0, parent=<env 0x55804e699488>, context 1
  fs              %95.5 = FrameState         R     0x55804ec9bac0+0: [], env=e95.4
  void                    Deopt              !v    %95.5, %95.3, %95.1
BB100   <- [98]
  int-            %100.0 = CastType           d     dn %98.1
  lgl-            %100.1 = Gt                 wed   %100.0, 0L, elided   <lgl->
  lgl$-           %100.2 = AsLogical                %100.1
  lgl$#-          %100.3 = Identical                %100.2, false
  void                    Branch                   %100.3 -> BB94 (if true) | BB7 (if false)
BB101   <- [98]
  prom-           %101.0 = MkArg                    %98.0, [0x55804ecaf480]_p1 (!refl), e96.0
  val?~           %101.1 = CastType                 up %101.0
  prom-           %101.2 = MkArg                    %0.4, [0x55804ecaf480]_p0 (!refl), e96.0
  val?~           %101.3 = CastType                 up %101.2
  env             e101.4 = (MkEnv)            l     x=%101.3, table=%101.1, parent=R_BaseNamespace, context 0
  env             e101.5 = MaterializeEnv           , e101.4   <@?>
  fs              %101.6 = FrameState         R     0x55804ec9bac0+37: [], env=e96.0
  fs              %101.7 = FrameState         R     0x55804c50e320+54: [], env=e101.5, next=%101.6
  prom-           %101.8 = MkArg                    unboundValue, [0x55804ecaf480]_p16 (!refl), e101.5
  val?^           %101.9 = CastType                 up %101.8
  prom-           %101.10 = MkArg                    %0.4, [0x55804ecaf480]_p15 (!refl), e101.5
  val?~           %101.11 = CastType                 up %101.10
  env             e101.12 = (MkEnv)            l     incomparables(miss)=nil, nomatch=0L, table=%101.9, x=%101.11, parent=R_BaseNamespace, context -1
  fs              %101.13 = FrameState         R     0x55804c6f5d40+69: [%98.1], env=e101.12, next=%101.7
  void                    Deopt              !v    %101.13, Typecheck@0x55804d540688[Type#2], %98.1
BB94   <- [100]
  void                    Nop                !     
  lgl$-           %94.1 = %100.2
  goto BB10
BB7   <- [100]
  val?^ | miss    %7.0  = LdVar              eR    isSimpleFunDef, e96.0
  lgl$#-          %7.1  = Identical                %7.0, function(e, w) <(rir::DispatchTable*)0x55804e1|...
  void                    Branch                   %7.1 -> BB102 (if true) | BB103 (if false)
BB10   <- [94, 106]
  lgl$-           %10.0 = Phi                      %106.3:BB106, %94.1:BB94
  lgl$-           %10.1 = %10.0
  lgl$#-          %10.2 = CheckTrueFalse     e     %10.1
  void                    Branch                   %10.2 -> BB93 (if true) | BB11 (if false)
BB102   <- [7]
  prom-           %102.0 = MkArg                    unboundValue, [0x55804ecaf480]_p2 (!refl), e96.0
  prom-           %102.1 = MkArg                    unboundValue, [0x55804ecaf480]_p3 (!refl), e96.0
  val?            %102.2 = StaticCall         !v    isSimpleFunDef[0x55804f12c470](%102.0, %102.1) e96.0   <lgl$->
  lgl$#-          %102.3 = IsType                   %102.2 isA lgl$-
  void                    Branch                   %102.3 -> BB106 (if true) | BB107 (if false)
BB103   <- [7]
  prom-           %103.0 = MkArg                    %98.0, [0x55804ecaf480]_p1 (!refl), e96.0
  val?~           %103.1 = CastType                 up %103.0
  prom-           %103.2 = MkArg                    %0.4, [0x55804ecaf480]_p0 (!refl), e96.0
  val?~           %103.3 = CastType                 up %103.2
  fs              %103.4 = FrameState         R     0x55804ec9bac0+37: [], env=e96.0
  env             e103.5 = (MkEnv)            l     x=%103.3, table=%103.1, parent=R_BaseNamespace, context 0
  fs              %103.6 = FrameState         R     0x55804c50e320+66: [%100.1], env=e103.5, next=%103.4
  void                    Deopt              !v    %103.6, CallTarget@0x55804e19e1f0[Call#2], %7.0
BB93   <- [10]
  void                    StVar              lW    type, "fundef", e96.0
  goto BB12
BB11   <- [10]
  void                    Nop                !     
  goto BB12
BB106   <- [102]
  lgl$-           %106.0 = CastType           d     dn %102.2
  lgl$-           %106.1 = AsLogical                %106.0
  lgl$-           %106.2 = LAnd                     %100.2, %106.1
  lgl$-           %106.3 = %106.2
  goto BB10
BB107   <- [102]
  fs              %107.0 = FrameState         R     0x55804ec9bac0+86: [%100.2, %102.2], env=e96.0
  void                    Deopt              !v    %107.0, Typecheck@0x55804e19e1f0[Type#5], %102.2   !
BB12   <- [11, 93]
  val?^ | miss    %12.0 = LdVar              eR    type, e96.0
  val?            %12.1 = Force!<value>      !v    %12.0, e96.0   <str$->
  lgl$-           %12.2 = Is                       %12.1, logical
  lgl$-           %12.3 = Is                       %12.1, integer
  lgl$-           %12.4 = Is                       %12.1, double
  lgl$-           %12.5 = Is                       %12.1, complex
  lgl$-           %12.6 = Is                       %12.1, character   <true>
  lgl$-           %12.7 = Is                       %12.1, raw
  lgl$-           %12.8 = Is                       %12.1, list
  lgl$-           %12.9 = Is                       %12.1, expression
  lgl$-           %12.10 = LOr                      %12.9, %12.8
  lgl$-           %12.11 = LOr                      %12.10, %12.7
  lgl$-           %12.12 = LOr                      %12.11, %12.6
  lgl$-           %12.13 = LOr                      %12.12, %12.5
  lgl$-           %12.14 = LOr                      %12.13, %12.4
  lgl$-           %12.15 = LOr                      %12.14, %12.3
  lgl$-           %12.16 = LOr                      %12.15, %12.2   <true>
  lgl$#-          %12.17 = Identical                %12.16, true
  int$-           %12.18 = Length                   %12.1
  lgl$-           %12.19 = Is                       %12.1, Factor   <false>
  lgl$#-          %12.20 = Identical                %12.19, false
  lgl$#-          %12.21 = Identical                %12.6, true
  lgl$#-          %12.22 = IsType                   %12.1 isA val?-
  void                    Branch                   %12.17 -> BB104 (if true) | BB105 (if false)
BB104   <- [12]
  lgl$-           %104.0 = Eq                 d     %12.18, 1L, elided   <true>
  lgl$#-          %104.1 = Identical                %104.0, true
  void                    Branch                   %104.1 -> BB108 (if true) | BB109 (if false)
BB105   <- [12]
  void                    Nop                !     
  lgl$#-          %105.1 = %12.17
  dr              %105.2 = DeadBranchReached@0x55804e19e1f0[Test#0]
  goto BB13
BB108   <- [104]
  void                    Branch                   %12.20 -> BB110 (if true) | BB111 (if false)
BB109   <- [104]
  void                    Nop                !     
  lgl$#-          %109.1 = %104.1
  dr              %109.2 = DeadBranchReached@0x55804e19e1f0[Test#1]
  goto BB13
BB13   <- [105, 109, 111, 113, 115]
  val?^ | miss    %13.0 = Phi                      %105.1:BB105, %109.1:BB109, %111.1:BB111, %113.1:BB113, %115.1:BB115
  val?^ | miss    %13.1 = %13.0
  dr              %13.2 = Phi                      %105.2:BB105, %109.2:BB109, %111.2:BB111, %113.2:BB113, %115.2:BB115
  dr              %13.3 = %13.2
  fs              %13.4 = FrameState         R     0x55804ec9bac0+128: [%12.1], env=e96.0
  void                    Deopt              !v    %13.4, %13.3, %13.1   !
BB110   <- [108]
  void                    Branch                   %12.21 -> BB112 (if true) | BB113 (if false)
BB111   <- [108]
  void                    Nop                !     
  lgl$#-          %111.1 = %12.20
  dr              %111.2 = DeadBranchReached@0x55804e19e1f0[Test#2]
  goto BB13
BB112   <- [110]
  void                    Branch                   %12.22 -> BB114 (if true) | BB115 (if false)
BB113   <- [110]
  void                    Nop                !     
  lgl$#-          %113.1 = %12.21
  dr              %113.2 = DeadBranchReached@0x55804e19e1f0[Test#3]
  goto BB13
BB114   <- [112]
  val?-           %114.0 = CastType           d     dn %12.1   <str$->
  lgl-            %114.1 = CallSafeBuiltin    wed   is.na(%114.0) 
  lgl$#-          %114.2 = CheckTrueFalse     we    %114.1   <false>
  void                    Branch                   %114.2 -> BB117 (if true) | BB116 (if false)
BB115   <- [112]
  void                    Nop                !     
  val?            %115.1 = %12.1
  dr              %115.2 = Typecheck@0x55804e19e1f0[Type#6]
  goto BB13
BB117   <- [114]
  fs              %117.0 = FrameState         R     0x55804ec9bac0+391: [%114.0, %114.2], env=e96.0
  void                    Deopt              !v    %117.0, DeadBranchReached@0x55804e19e1f0[Test#10], %114.2   !
BB116   <- [114]
  lgl-            %116.0 = Eq                 wed   %114.0, <-, elided
  lgl$#-          %116.1 = CheckTrueFalse     we    %116.0
  void                    Branch                   %116.1 -> BB90 (if true) | BB19 (if false)
BB90   <- [116]
  val?^ | miss    %90.0 = LdVar              eR    incLocalUsageValue, e96.0
  lgl$#-          %90.1 = Identical                %90.0, function(vn, which, w) <(rir::DispatchTable*)0|...
  void                    Branch                   %90.1 -> BB118 (if true) | BB119 (if false)
BB19   <- [116]
  lgl-            %19.0 = Eq                 wed   %114.0, <<-, elided
  lgl$#-          %19.1 = CheckTrueFalse     we    %19.0   <false>
  void                    Branch                   %19.1 -> BB127 (if true) | BB126 (if false)
BB118   <- [90]
  prom-           %118.0 = MkArg                    unboundValue, [0x55804ecaf480]_p13, e96.0
  prom-           %118.1 = MkArg                    unboundValue, [0x55804ecaf480]_p14, e96.0
  val?            %118.2 = StaticCall         !v    incLocalUsageValue[0x55804eef8eb0](%118.0, "assigns", %118.1) e96.0   <real$->
  lgl$#-          %118.3 = IsType                   %118.2 isA real$-
  void                    Branch                   %118.3 -> BB120 (if true) | BB121 (if false)
BB119   <- [90]
  fs              %119.0 = FrameState         R     0x55804ec9bac0+415: [%114.0, %116.1], env=e96.0
  void                    Deopt              !v    %119.0, CallTarget@0x55804e19e1f0[Call#3], %90.0   !
BB127   <- [19]
  fs              %127.0 = FrameState         R     0x55804ec9bac0+433: [%114.0, %19.1], env=e96.0
  void                    Deopt              !v    %127.0, DeadBranchReached@0x55804e19e1f0[Test#12], %19.1   !
BB126   <- [19]
  lgl-            %126.0 = Eq                 wed   %114.0, variable, elided
  lgl$#-          %126.1 = CheckTrueFalse     we    %126.0
  void                    Branch                   %126.1 -> BB57 (if true) | BB24 (if false)
BB120   <- [118]
  void                    Nop                !     
  val?            %120.1 = %118.2
  goto BB32
BB121   <- [118]
  fs              %121.0 = FrameState         R     0x55804ec9bac0+587: [%118.2], env=e96.0
  void                    Deopt              !v    %121.0, Typecheck@0x55804e19e1f0[Type#9], %118.2   !
BB57   <- [126]
  val?^ | miss    %57.0 = LdVar              eR    incLocalUsageValue, e96.0
  lgl$#-          %57.1 = Identical                %57.0, function(vn, which, w) <(rir::DispatchTable*)0|...
  void                    Branch                   %57.1 -> BB130 (if true) | BB131 (if false)
BB24   <- [126]
  lgl-            %24.0 = Eq                 wed   %114.0, function, elided
  lgl$#-          %24.1 = CheckTrueFalse     we    %24.0
  void                    Branch                   %24.1 -> BB54 (if true) | BB27 (if false)
BB32   <- [120, 146, 154, 178]
  val?            %32.0 = Phi                      %154.4:BB154, %146.1:BB146, %178.1:BB178, %120.1:BB120
  val?            %32.1 = %32.0
  val?^ | miss    %32.2 = LdVar              eR    incLocalSrcInfo, e96.0
  lgl$#-          %32.3 = Identical                %32.2, function(vn, w) <(rir::DispatchTable*)0x55804e|...
  void                    Branch                   %32.3 -> BB122 (if true) | BB123 (if false)
BB130   <- [57]
  prom-           %130.0 = MkArg                    unboundValue, [0x55804ecaf480]_p11, e96.0
  prom-           %130.1 = MkArg                    unboundValue, [0x55804ecaf480]_p12, e96.0
  ct              %130.2 = PushContext        lCL   %130.0, "varuses", %130.1, incLocalUsageValue(n, "varuses", w), function(vn, which, w) <(rir::DispatchTable*)0|..., e96.0
  val?^           %130.3 = CastType                 up %130.1
  val?^           %130.4 = CastType                 up %130.0
  val?^ | miss    %130.5 = LdVar              eR    getLocalUsageEntry, <env 0x55804e699488>
  lgl$#-          %130.6 = Identical                %130.5, function(vn, w) <(rir::DispatchTable*)0x55804e|...
  void                    Branch                   %130.6 -> BB136 (if true) | BB137 (if false)
BB131   <- [57]
  fs              %131.0 = FrameState         R     0x55804ec9bac0+451: [%114.0, %126.1], env=e96.0
  void                    Deopt              !v    %131.0, CallTarget@0x55804e19e1f0[Call#4], %57.0   !
BB54   <- [24]
  val?^ | miss    %54.0 = LdVar              eR    incLocalUsageValue, e96.0
  lgl$#-          %54.1 = Identical                %54.0, function(vn, which, w) <(rir::DispatchTable*)0|...
  void                    Branch                   %54.1 -> BB132 (if true) | BB133 (if false)
BB27   <- [24]
  lgl-            %27.0 = Eq                 wed   %114.0, for, elided
  lgl$#-          %27.1 = CheckTrueFalse     we    %27.0   <false>
  void                    Branch                   %27.1 -> BB145 (if true) | BB144 (if false)
BB122   <- [32]
  prom-           %122.0 = MkArg                    unboundValue, [0x55804ecaf480]_p7, e96.0
  prom-           %122.1 = MkArg                    unboundValue, [0x55804ecaf480]_p8, e96.0
  ct              %122.2 = PushContext        lCL   %122.0, %122.1, incLocalSrcInfo(n, w), function(vn, w) <(rir::DispatchTable*)0x55804e|..., e96.0
  val?^           %122.3 = CastType                 up %122.1
  val?^           %122.4 = CastType                 up %122.0
  val?^ | miss    %122.5 = LdVar              eR    getLocalUsageEntry, <env 0x55804e699488>
  lgl$#-          %122.6 = Identical                %122.5, function(vn, w) <(rir::DispatchTable*)0x55804e|...
  void                    Branch                   %122.6 -> BB124 (if true) | BB125 (if false)
BB123   <- [32]
  void                    Nop                !     
  val?^ | miss    %123.1 = %32.2
  dr              %123.2 = CallTarget@0x55804e19e1f0[Call#8]
  goto BB33
BB136   <- [130]
  env             e136.0 = MkEnv              l     vn=%130.4, which="varuses", w=%130.3, parent=<env 0x55804e699488>, context 1
  prom-           %136.1 = MkArg                    unboundValue, [0x55804ecaf480]_p18, e136.0
  prom-           %136.2 = MkArg                    unboundValue, [0x55804ecaf480]_p19, e136.0
  ct              %136.3 = PushContext        lCL   %136.1, %136.2, getLocalUsageEntry(vn, w), function(vn, w) <(rir::DispatchTable*)0x55804e|..., e136.0
  val?^           %136.4 = CastType                 up %136.2
  val?^           %136.5 = CastType                 up %136.1
  val?^ | miss    %136.6 = LdVar              eR    findOwnerEnv, <env 0x55804e699488>
  lgl$#-          %136.7 = Identical                %136.6, function(v, env, stop=NA, default=NA) <(rir::D|...
  void                    Branch                   %136.7 -> BB138 (if true) | BB139 (if false)
BB137   <- [130]
  fs              %137.0 = FrameState         R     0x55804ec9bac0+640: [], env=e96.0
  env             e137.1 = (MkEnv)            l     vn=%130.4, which="varuses", w=%130.3, parent=<env 0x55804e699488>, context 1
  fs              %137.2 = FrameState         R     0x55804e9d77b0+0: [], env=e137.1, next=%137.0
  void                    Deopt              !v    %137.2, CallTarget@0x55804e3d1be0[Call#0], %130.5   !
BB132   <- [54]
  prom-           %132.0 = MkArg                    unboundValue, [0x55804ecaf480]_p9, e96.0
  prom-           %132.1 = MkArg                    unboundValue, [0x55804ecaf480]_p10, e96.0
  val?            %132.2 = StaticCall         !v    incLocalUsageValue[0x55804eef8eb0](%132.0, "funuses", %132.1) e96.0   <real$->
  lgl$#-          %132.3 = IsType                   %132.2 isA real$-
  void                    Branch                   %132.3 -> BB146 (if true) | BB147 (if false)
BB133   <- [54]
  fs              %133.0 = FrameState         R     0x55804ec9bac0+469: [%114.0, %24.1], env=e96.0
  void                    Deopt              !v    %133.0, CallTarget@0x55804e19e1f0[Call#5], %54.0   !
BB145   <- [27]
  fs              %145.0 = FrameState         R     0x55804ec9bac0+487: [%114.0, %27.1], env=e96.0
  void                    Deopt              !v    %145.0, DeadBranchReached@0x55804e19e1f0[Test#15], %27.1   !
BB144   <- [27]
  lgl-            %144.0 = Eq                 wed   %114.0, fundef, elided
  lgl$#-          %144.1 = CheckTrueFalse     we    %144.0   <true>
  void                    Branch                   %144.1 -> BB150 (if true) | BB151 (if false)
BB124   <- [122]
  env             e124.0 = MkEnv              l     vn=%122.4, w=%122.3, parent=<env 0x55804e699488>, context 1
  prom-           %124.1 = MkArg                    unboundValue, [0x55804ecaf480]_p53, e124.0
  prom-           %124.2 = MkArg                    unboundValue, [0x55804ecaf480]_p54, e124.0
  val?            %124.3 = StaticCall         !v    getLocalUsageEntry[0x55804e62aaf0](%124.1, %124.2) e124.0   <env->
  void                    StVar              lW    entry, %124.3, e124.0
  val?^ | miss    %124.5 = LdVar              eR    get, e124.0
  lgl$#-          %124.6 = Identical                %124.5, function(x, pos=-(1L), envir=as.environment(po|...
  void                    Branch                   %124.6 -> BB128 (if true) | BB129 (if false)
BB125   <- [122]
  void                    DropContext        C     
  val?^ | miss    %125.1 = %122.5
  dr              %125.2 = CallTarget@0x55804eaea788[Call#0]
  goto BB33
BB33   <- [123, 125]
  val?^ | miss    %33.0 = Phi                      %123.1:BB123, %125.1:BB125
  val?^ | miss    %33.1 = %33.0
  dr              %33.2 = Phi                      %123.2:BB123, %125.2:BB125
  dr              %33.3 = %33.2
  fs              %33.4 = FrameState         R     0x55804ec9bac0+815: [%32.1], env=e96.0
  void                    Deopt              !v    %33.4, %33.3, %33.1   !
BB138   <- [136]
  env             e138.0 = MkEnv              l     vn=%136.5, w=%136.4, parent=<env 0x55804e699488>, context 1
  prom-           %138.1 = MkArg                    unboundValue, [0x55804ecaf480]_p25, e138.0
  prom-           %138.2 = MkArg                    unboundValue, [0x55804ecaf480]_p26, e138.0
  prom-           %138.3 = MkArg                    unboundValue, [0x55804ecaf480]_p29, e138.0
  prom-           %138.4 = MkArg                    unboundValue, [0x55804ecaf480]_p32, e138.0
  val?            %138.5 = StaticCall         !v    findOwnerEnv[0x55804d014d70](%138.1, %138.2, %138.3, %138.4) { 0 1 2n 3n } e138.0   <env+>
  void                    StVar              lW    env, %138.5, e138.0
  val?^ | miss    %138.7 = LdVar              eR    is.baseenv, e138.0
  lgl$#-          %138.8 = Identical                %138.7, function(e) <(rir::DispatchTable*)0x55804e41e7|...
  void                    Branch                   %138.8 -> BB140 (if true) | BB141 (if false)
BB139   <- [136]
  fs              %139.0 = FrameState         R     0x55804ec9bac0+640: [], env=e96.0
  fs              %139.1 = FrameState         R     0x55804e9d77b0+37: [], env=e136.0, next=%139.0
  env             e139.2 = (MkEnv)            l     vn=%136.5, w=%136.4, parent=<env 0x55804e699488>, context 1
  fs              %139.3 = FrameState         R     0x55804e1e4250+0: [], env=e139.2, next=%139.1
  void                    Deopt              !v    %139.3, CallTarget@0x55804eaea998[Call#0], %136.6   !
BB146   <- [132]
  void                    Nop                !     
  val?            %146.1 = %132.2
  goto BB32
BB147   <- [132]
  fs              %147.0 = FrameState         R     0x55804ec9bac0+693: [%132.2], env=e96.0
  void                    Deopt              !v    %147.0, Typecheck@0x55804e19e1f0[Type#15], %132.2   !
BB150   <- [144]
  val?^ | miss    %150.0 = LdVar              eR    addLocalFunDef, e96.0
  lgl$#-          %150.1 = Identical                %150.0, function(vn, e, w) <(rir::DispatchTable*)0x558|...
  void                    Branch                   %150.1 -> BB154 (if true) | BB155 (if false)
BB151   <- [144]
  void                    Nop                !     
  lgl$#-          %151.1 = %144.1
  dr              %151.2 = DeadBranchReached@0x55804e19e1f0[Test#16]
  goto BB30
BB128   <- [124]
  prom-           %128.0 = MkArg                    unboundValue, [0x55804ecaf480]_p55 (!refl), e124.0
  val?            %128.1 = StaticCall         !v    get[0x55804e8de4d0]("srcinfo", %128.0, missingArg, missingArg, false) { 0 1 4n } e124.0   <nil->
  void                    StVar              lW    value, %128.1, e124.0
  val?^ | miss    %128.3 = LdVar              eR    list, e124.0
  lgl$#-          %128.4 = Identical                <blt list>, %128.3   <true>
  void                    Branch                   %128.4 -> BB134 (if true) | BB135 (if false)
BB129   <- [124]
  fs              %129.0 = FrameState         R     0x55804ec9bac0+853: [], env=e96.0
  fs              %129.1 = FrameState         R     0x55804ed682c0+51: [], env=e124.0, next=%129.0
  void                    Deopt              !v    %129.1, CallTarget@0x55804eaea788[Call#1], %124.5   !
BB140   <- [138]
  prom-           %140.0 = MkArg                    unboundValue, [0x55804ecaf480]_p33 (!refl), e138.0
  ct              %140.1 = PushContext        lCL   %140.0, is.baseenv(env), function(e) <(rir::DispatchTable*)0x55804e41e7|..., e138.0
  val?^           %140.2 = CastType                 up %140.0
  val?^ | miss    %140.3 = LdVar              eR    identical, <env 0x55804e699488>
  lgl$#-          %140.4 = Identical                %140.3, function(x, y, num.eq=TRUE, single.NA=TRUE, at|...
  void                    Branch                   %140.4 -> BB142 (if true) | BB143 (if false)
BB141   <- [138]
  fs              %141.0 = FrameState         R     0x55804ec9bac0+640: [], env=e96.0
  fs              %141.1 = FrameState         R     0x55804e9d77b0+37: [], env=e136.0, next=%141.0
  fs              %141.2 = FrameState         R     0x55804e1e4250+77: [], env=e138.0, next=%141.1
  void                    Deopt              !v    %141.2, CallTarget@0x55804eaea998[Call#3], %138.7   !
BB154   <- [150]
  prom-           %154.0 = MkArg                    unboundValue, [0x55804ecaf480]_p4, e96.0
  prom-           %154.1 = MkArg                    unboundValue, [0x55804ecaf480]_p5, e96.0
  prom-           %154.2 = MkArg                    unboundValue, [0x55804ecaf480]_p6, e96.0
  val?            %154.3 = StaticCall         !v    addLocalFunDef[0x55804f573710](%154.0, %154.1, %154.2) e96.0   <vec$->
  val?            %154.4 = %154.3
  goto BB32
BB155   <- [150]
  void                    Nop                !     
  val?^ | miss    %155.1 = %150.0
  dr              %155.2 = CallTarget@0x55804e19e1f0[Call#7]
  goto BB30
BB30   <- [151, 155]
  val?^ | miss    %30.0 = Phi                      %151.1:BB151, %155.1:BB155
  val?^ | miss    %30.1 = %30.0
  dr              %30.2 = Phi                      %151.2:BB151, %155.2:BB155
  dr              %30.3 = %30.2
  fs              %30.4 = FrameState         R     0x55804ec9bac0+505: [%114.0, %144.1], env=e96.0
  void                    Deopt              !v    %30.4, %30.3, %30.1   !
BB134   <- [128]
  (cls|spec|blt)  %134.0 = LdFun              !v    $, <0x55804bee0c10>, e124.0
  prom-           %134.1 = MkArg                    unboundValue, [0x55804ecaf480]_p56, e124.0
  prom-           %134.2 = MkArg                    unboundValue, [0x55804ecaf480]_p57, e124.0
  val?            %134.3 = Call               !v    %134.0(%134.1, %134.2) e124.0   <nil->
  lgl$-           %134.4 = Is                       %134.3, NULL
  lgl$#-          %134.5 = CheckTrueFalse     e     %134.4
  void                    Branch                   %134.5 -> BB40 (if true) | BB39 (if false)
BB135   <- [128]
  fs              %135.0 = FrameState         R     0x55804ec9bac0+853: [], env=e96.0
  fs              %135.1 = FrameState         R     0x55804ed682c0+119: [], env=e124.0, next=%135.0
  void                    Deopt              !v    %135.1, DeadBranchReached@0x55804eaea788[Test#0], %128.4   !
BB142   <- [140]
  env             e142.0 = MkEnv              l     e=%140.2, parent=<env 0x55804e699488>, context 1
  prom-           %142.1 = MkArg                    unboundValue, [0x55804ecaf480]_p34, e142.0
  prom-           %142.2 = MkArg                    unboundValue, [0x55804ecaf480]_p35, e142.0
  ct              %142.3 = PushContext        lCL   %142.1, %142.2, identical(e, .BaseEnv), function(x, y, num.eq=TRUE, single.NA=TRUE, at|..., e142.0
  val?^           %142.4 = CastType                 up %142.2
  val?^           %142.5 = CastType                 up %142.1
  env             e142.6 = MkEnv              l     x=%142.5, y=%142.4, num.eq(miss)=true, single.NA(miss)=true, attrib.as.set(miss)=true, ignore.bytecode(miss)=true, ignore.environment(miss)=false, ignore.srcref(miss)=true, parent=R_BaseNamespace, context 1
  val?            %142.7 = Force!<lazy>       !vL   %142.5, e142.6   <val?+>
  val?            %142.8 = Force!<lazy>       !vL   %142.4, e142.6   <val?+>
  val?            %142.9 = CallBuiltin        !v    identical(%142.7, %142.8, true, true, true, true, false, true) e142.6
  val?            %142.10 = PopContext         C     %142.9, %142.3   <lgl$->
  lgl$#-          %142.11 = IsType                   %142.10 isA lgl$-
  void                    Branch                   %142.11 -> BB152 (if true) | BB153 (if false)
BB143   <- [140]
  fs              %143.0 = FrameState         R     0x55804ec9bac0+640: [], env=e96.0
  fs              %143.1 = FrameState         R     0x55804e9d77b0+37: [], env=e136.0, next=%143.0
  fs              %143.2 = FrameState         R     0x55804e1e4250+109: [], env=e138.0, next=%143.1
  env             e143.3 = (MkEnv)            l     e=%140.2, parent=<env 0x55804e699488>, context 1
  fs              %143.4 = FrameState         R     0x55804eb37490+0: [], env=e143.3, next=%143.2
  void                    Deopt              !v    %143.4, CallTarget@0x55804ea246f8[Call#0], %140.3   !
BB40   <- [134]
  (cls|spec|blt)  %40.0 = LdFun              !v    $, <0x55804bee0c10>, e124.0
  prom-           %40.1 = MkArg                    unboundValue, [0x55804ecaf480]_p58, e124.0
  prom-           %40.2 = MkArg                    unboundValue, [0x55804ecaf480]_p59, e124.0
  val?            %40.3 = Call               !v    %40.0(%40.1, %40.2) e124.0   <nil->
  lgl$-           %40.4 = Is                       %40.3, NULL
  lgl$#-          %40.5 = CheckTrueFalse     e     %40.4
  void                    Branch                   %40.5 -> BB42 (if true) | BB41 (if false)
BB39   <- [134]
  fs              %39.0 = FrameState         R     0x55804ec9bac0+853: [], env=e96.0
  (cls|spec|blt)  %39.1 = LdFun              !v    $, e124.0
  fs              %39.2 = FrameState         R     0x55804ed682c0+259: [<blt list>, %39.1], env=e124.0, next=%39.0
  void                    Deopt              !v    %39.2, DeadCall@0x55804eaea788[Call#10], %39.1   !
BB152   <- [142]
  lgl$-           %152.0 = CastType           d     dn %142.10
  val?            %152.1 = PopContext         C     %152.0, %140.1   <lgl$->
  lgl$#-          %152.2 = IsType                   %152.1 isA lgl$-
  void                    Branch                   %152.2 -> BB160 (if true) | BB161 (if false)
BB153   <- [142]
  fs              %153.0 = FrameState         R     0x55804ec9bac0+640: [], env=e96.0
  fs              %153.1 = FrameState         R     0x55804e9d77b0+37: [], env=e136.0, next=%153.0
  fs              %153.2 = FrameState         R     0x55804e1e4250+109: [], env=e138.0, next=%153.1
  fs              %153.3 = FrameState         R     0x55804eb37490+37: [%142.10], env=e142.0, next=%153.2
  void                    Deopt              !v    %153.3, Typecheck@0x55804ea246f8[Type#2], %142.10   !
BB42   <- [40]
  (cls|spec|blt)  %42.0 = LdFun              !v    $, <0x55804bee0c10>, e124.0
  prom-           %42.1 = MkArg                    unboundValue, [0x55804ecaf480]_p60, e124.0
  prom-           %42.2 = MkArg                    unboundValue, [0x55804ecaf480]_p61, e124.0
  val?            %42.3 = Call               !v    %42.0(%42.1, %42.2) e124.0   <nil->
  lgl$-           %42.4 = Is                       %42.3, NULL
  lgl$#-          %42.5 = CheckTrueFalse     e     %42.4
  void                    Branch                   %42.5 -> BB44 (if true) | BB43 (if false)
BB41   <- [40]
  fs              %41.0 = FrameState         R     0x55804ec9bac0+853: [], env=e96.0
  (cls|spec|blt)  %41.1 = LdFun              !v    $, e124.0
  fs              %41.2 = FrameState         R     0x55804ed682c0+365: [<blt list>, NA, %41.1], env=e124.0, next=%41.0
  void                    Deopt              !v    %41.2, DeadCall@0x55804eaea788[Call#12], %41.1   !
BB160   <- [152]
  lgl$-           %160.0 = CastType           d     dn %152.1
  lgl$#-          %160.1 = CheckTrueFalse     e     %160.0
  void                    Branch                   %160.1 -> BB89 (if true) | BB70 (if false)
BB161   <- [152]
  void                    Nop                !     
  val?            %161.1 = %152.1
  dr              %161.2 = Typecheck@0x55804eaea998[Type#10]
  goto BB68
BB44   <- [42]
  val?            %44.0 = NamedCall          !v    <blt list>(srcfile=NA, frow=NA, lrow=NA) e124.0   <vec+>
  void                    StVar              lW    new, %44.0, e124.0
  val?^ | miss    %44.2 = LdVar              eR    as.data.frame, e124.0
  lgl$#-          %44.3 = Identical                %44.2, function(x, row.names=NULL, optional=FALSE, ..|...
  void                    Branch                   %44.3 -> BB148 (if true) | BB149 (if false)
BB43   <- [42]
  fs              %43.0 = FrameState         R     0x55804ec9bac0+853: [], env=e96.0
  (cls|spec|blt)  %43.1 = LdFun              !v    $, e124.0
  fs              %43.2 = FrameState         R     0x55804ed682c0+471: [<blt list>, NA, NA, %43.1], env=e124.0, next=%43.0
  void                    Deopt              !v    %43.2, DeadCall@0x55804eaea788[Call#14], %43.1   !
BB89   <- [160]
  fs              %89.0 = FrameState         R     0x55804ec9bac0+640: [], env=e96.0
  fs              %89.1 = FrameState         R     0x55804e9d77b0+37: [], env=e136.0, next=%89.0
  (cls|spec|blt)  %89.2 = LdFun              !v    stop, e138.0
  fs              %89.3 = FrameState         R     0x55804e1e4250+130: [%89.2], env=e138.0, next=%89.1
  void                    Deopt              !v    %89.3, DeadCall@0x55804eaea998[Call#4], %89.2   !
BB70   <- [160]
  val?^ | miss    %70.0 = LdVar              eR    identical, e138.0
  lgl$#-          %70.1 = Identical                %70.0, function(x, y, num.eq=TRUE, single.NA=TRUE, at|...
  void                    Branch                   %70.1 -> BB162 (if true) | BB163 (if false)
BB68   <- [161, 163]
  val?^ | miss    %68.0 = Phi                      %161.1:BB161, %163.1:BB163
  val?^ | miss    %68.1 = %68.0
  dr              %68.2 = Phi                      %161.2:BB161, %163.2:BB163
  dr              %68.3 = %68.2
  fs              %68.4 = FrameState         R     0x55804ec9bac0+640: [], env=e96.0
  fs              %68.5 = FrameState         R     0x55804e9d77b0+37: [], env=e136.0, next=%68.4
  fs              %68.6 = FrameState         R     0x55804e1e4250+109: [%152.1], env=e138.0, next=%68.5
  void                    Deopt              !v    %68.6, %68.3, %68.1   !
BB148   <- [44]
  prom-           %148.0 = MkArg                    unboundValue, [0x55804ecaf480]_p62 (!refl), e124.0
  dots-           %148.1 = DotsList           l     stringsAsFactors=false
  val?            %148.2 = StaticCall         !v    as.data.frame[0x55804f2bf7f0](%148.0, missingArg, missingArg, %148.1) { 0 3n } e124.0   <vec>
  void                    StVar              lW    new, %148.2, e124.0
  val?^ | miss    %148.4 = LdVar              eR    value, e124.0
  val?            %148.5 = Force!<value>      !v    %148.4, e124.0   <(nil|vec)>
  lgl$-           %148.6 = Is                       %148.5, NULL
  lgl$#-          %148.7 = CheckTrueFalse     e     %148.6
  void                    Branch                   %148.7 -> BB53 (if true) | BB49 (if false)
BB149   <- [44]
  fs              %149.0 = FrameState         R     0x55804ec9bac0+853: [], env=e96.0
  fs              %149.1 = FrameState         R     0x55804ed682c0+562: [], env=e124.0, next=%149.0
  void                    Deopt              !v    %149.1, CallTarget@0x55804eaea788[Call#15], %44.2   !
BB162   <- [70]
  prom-           %162.0 = MkArg                    unboundValue, [0x55804ecaf480]_p42, e138.0
  prom-           %162.1 = MkArg                    unboundValue, [0x55804ecaf480]_p43, e138.0
  ct              %162.2 = PushContext        lCL   %162.0, %162.1, identical(env, attr(env, "checkUsageFrame")), function(x, y, num.eq=TRUE, single.NA=TRUE, at|..., e138.0
  val?^           %162.3 = CastType                 up %162.1
  val?^           %162.4 = CastType                 up %162.0
  env             e162.5 = MkEnv              l     x=%162.4, y=%162.3, num.eq(miss)=true, single.NA(miss)=true, attrib.as.set(miss)=true, ignore.bytecode(miss)=true, ignore.environment(miss)=false, ignore.srcref(miss)=true, parent=R_BaseNamespace, context 1
  val?            %162.6 = Force!<lazy>       !vL   %162.4, e162.5   <val?+>
  val?            %162.7 = Force!<lazy>       !vL   %162.3, e162.5   <val?+>
  val?            %162.8 = CallBuiltin        !v    identical(%162.6, %162.7, true, true, true, true, false, true) e162.5
  val?            %162.9 = PopContext         C     %162.8, %162.2   <lgl$->
  lgl$#-          %162.10 = IsType                   %162.9 isA lgl$-
  void                    Branch                   %162.10 -> BB164 (if true) | BB165 (if false)
BB163   <- [70]
  void                    Nop                !     
  val?^ | miss    %163.1 = %70.0
  dr              %163.2 = CallTarget@0x55804eaea998[Call#5]
  goto BB68
BB53   <- [148]
  val?^ | miss    %53.0 = LdVar              eR    new, e124.0
  void                    Visible            v     
  val?            %53.2 = Force!<value>      !     %53.0, e124.0   <vec>
  void                    StVar              lW    value, %53.2, e124.0
  goto BB50
BB49   <- [148]
  val?^ | miss    %49.0 = LdVar              eR    rbind, e124.0
  lgl$#-          %49.1 = Identical                %49.0, function(..., deparse.level=1) <(rir::Dispatch|...
  void                    Branch                   %49.1 -> BB156 (if true) | BB157 (if false)
BB164   <- [162]
  lgl$-           %164.0 = CastType           d     dn %162.9
  lgl$-           %164.1 = Not                d     %164.0, elided
  lgl$#-          %164.2 = CheckTrueFalse     e     %164.1
  void                    Branch                   %164.2 -> BB88 (if true) | BB73 (if false)
BB165   <- [162]
  void                    Nop                !     
  val?            %165.1 = %162.9
  dr              %165.2 = Typecheck@0x55804eaea998[Type#14]
  goto BB71
BB50   <- [53, 156]
  val?^ | miss    %50.0 = LdVar              eR    assign, e124.0
  lgl$#-          %50.1 = Identical                %50.0, function(x, value, pos=-(1), envir=as.environm|...
  void                    Branch                   %50.1 -> BB158 (if true) | BB159 (if false)
BB156   <- [49]
  prom-           %156.0 = MkArg                    unboundValue, [0x55804ecaf480]_p63, e124.0
  prom-           %156.1 = MkArg                    unboundValue, [0x55804ecaf480]_p64, e124.0
  dots-           %156.2 = DotsList           l     %156.0, %156.1
  ct              %156.3 = PushContext        lCL   %156.2, rbind(value, new), function(..., deparse.level=1) <(rir::Dispatch|..., e124.0
  void                    Visible            v     
  env             e156.5 = MkEnv              l     ...=%156.2, deparse.level(miss)=1, parent=R_BaseNamespace, context 1
  prom-           %156.6 = MkArg                    unboundValue, [0x55804ecaf480]_p65, e156.5
  val?            %156.7 = Call               !     <spec .Internal>(%156.6) e156.5   <vec>
  val?            %156.8 = PopContext         C     %156.7, %156.3   <vec>
  void                    StVar              lW    value, %156.8, e124.0
  goto BB50
BB157   <- [49]
  fs              %157.0 = FrameState         R     0x55804ec9bac0+853: [], env=e96.0
  fs              %157.1 = FrameState         R     0x55804ed682c0+630: [%148.5], env=e124.0, next=%157.0
  void                    Deopt              !v    %157.1, CallTarget@0x55804eaea788[Call#16], %49.0   !
BB88   <- [164]
  fs              %88.0 = FrameState         R     0x55804ec9bac0+640: [], env=e96.0
  fs              %88.1 = FrameState         R     0x55804e9d77b0+37: [], env=e136.0, next=%88.0
  (cls|spec|blt)  %88.2 = LdFun              !v    stop, e138.0
  fs              %88.3 = FrameState         R     0x55804e1e4250+217: [%88.2], env=e138.0, next=%88.1
  void                    Deopt              !v    %88.3, DeadCall@0x55804eaea998[Call#7], %88.2   !
BB73   <- [164]
  val?^ | miss    %73.0 = LdVar              eR    get, e138.0
  lgl$#-          %73.1 = Identical                %73.0, function(x, pos=-(1L), envir=as.environment(po|...
  void                    Branch                   %73.1 -> BB166 (if true) | BB167 (if false)
BB71   <- [165, 167]
  val?^ | miss    %71.0 = Phi                      %165.1:BB165, %167.1:BB167
  val?^ | miss    %71.1 = %71.0
  dr              %71.2 = Phi                      %165.2:BB165, %167.2:BB167
  dr              %71.3 = %71.2
  fs              %71.4 = FrameState         R     0x55804ec9bac0+640: [], env=e96.0
  fs              %71.5 = FrameState         R     0x55804e9d77b0+37: [], env=e136.0, next=%71.4
  fs              %71.6 = FrameState         R     0x55804e1e4250+195: [%162.9], env=e138.0, next=%71.5
  void                    Deopt              !v    %71.6, %71.3, %71.1   !
BB158   <- [50]
  prom-           %158.0 = MkArg                    unboundValue, [0x55804ecaf480]_p67, e124.0
  prom-           %158.1 = MkArg                    unboundValue, [0x55804ecaf480]_p68, e124.0
  val?            %158.2 = StaticCall         !     assign[0x55804ef45020]("srcinfo", %158.0, %158.1) e124.0   <vec>
  val?            %158.3 = PopContext         C     %158.2, %122.2   <vec>
  void                    Return             l     %158.3
BB159   <- [50]
  fs              %159.0 = FrameState         R     0x55804ec9bac0+853: [], env=e96.0
  fs              %159.1 = FrameState         R     0x55804ed682c0+725: [], env=e124.0, next=%159.0
  void                    Deopt              !v    %159.1, CallTarget@0x55804eaea788[Call#17], %50.0   !
BB166   <- [73]
  prom-           %166.0 = MkArg                    unboundValue, [0x55804ecaf480]_p51, e138.0
  prom-           %166.1 = MkArg                    unboundValue, [0x55804ecaf480]_p52, e138.0
  val?            %166.2 = StaticCall         !v    get[0x55804ec21800](%166.0, missingArg, %166.1, missingArg, false) { 0 2n 4n } e138.0   <env->
  void                    StVar              lW    entry, %166.2, e138.0
  val?^ | miss    %166.4 = LdVar              eR    is.environment, e138.0
  lgl$#-          %166.5 = Identical                <blt is.environment>, %166.4   <true>
  void                    Branch                   %166.5 -> BB168 (if true) | BB169 (if false)
BB167   <- [73]
  void                    Nop                !     
  val?^ | miss    %167.1 = %73.0
  dr              %167.2 = CallTarget@0x55804eaea998[Call#8]
  goto BB71
BB168   <- [166]
  val             %168.0 = ChkMissing         e     %166.2
  lgl$#-          %168.1 = CallSafeBuiltin    wed   is.environment(%166.2) 
  void                    Branch                   %168.1 -> BB77 (if true) | BB76 (if false)
BB169   <- [166]
  fs              %169.0 = FrameState         R     0x55804ec9bac0+640: [], env=e96.0
  fs              %169.1 = FrameState         R     0x55804e9d77b0+37: [], env=e136.0, next=%169.0
  fs              %169.2 = FrameState         R     0x55804e1e4250+313: [], env=e138.0, next=%169.1
  void                    Deopt              !v    %169.2, DeadBranchReached@0x55804eaea998[Test#0], %166.5   !
BB77   <- [168]
  val?            %77.0 = PopContext         C     %166.2, %136.3   <env->
  void                    StVar              lW    entry, %77.0, e136.0
  val?^ | miss    %77.2 = LdVar              eR    get, e136.0
  lgl$#-          %77.3 = Identical                %77.2, function(x, pos=-(1L), envir=as.environment(po|...
  void                    Branch                   %77.3 -> BB170 (if true) | BB171 (if false)
BB76   <- [168]
  fs              %76.0 = FrameState         R     0x55804ec9bac0+640: [], env=e96.0
  fs              %76.1 = FrameState         R     0x55804e9d77b0+37: [], env=e136.0, next=%76.0
  (cls|spec|blt)  %76.2 = LdFun              !v    stop, e138.0
  fs              %76.3 = FrameState         R     0x55804e1e4250+426: [%76.2], env=e138.0, next=%76.1
  void                    Deopt              !v    %76.3, DeadCall@0x55804eaea998[Call#10], %76.2   !
BB170   <- [77]
  prom-           %170.0 = MkArg                    unboundValue, [0x55804ecaf480]_p20, e136.0
  prom-           %170.1 = MkArg                    unboundValue, [0x55804ecaf480]_p21 (!refl), e136.0
  val?            %170.2 = StaticCall         !v    get[0x55804eff3090](%170.0, %170.1, missingArg, missingArg, false) { 0 1 4n } e136.0   <real$->
  lgl$#-          %170.3 = IsType                   %170.2 isA real$-
  void                    Branch                   %170.3 -> BB172 (if true) | BB173 (if false)
BB171   <- [77]
  fs              %171.0 = FrameState         R     0x55804ec9bac0+640: [], env=e96.0
  fs              %171.1 = FrameState         R     0x55804e9d77b0+51: [], env=e136.0, next=%171.0
  void                    Deopt              !v    %171.1, CallTarget@0x55804e3d1be0[Call#1], %77.2   !
BB172   <- [170]
  real$-          %172.0 = CastType           d     dn %170.2
  void                    StVar              lW    value, %172.0, e136.0
  val?^ | miss    %172.2 = LdVar              eR    assign, e136.0
  lgl$#-          %172.3 = Identical                %172.2, function(x, value, pos=-(1), envir=as.environm|...
  void                    Branch                   %172.3 -> BB174 (if true) | BB175 (if false)
BB173   <- [170]
  fs              %173.0 = FrameState         R     0x55804ec9bac0+640: [], env=e96.0
  fs              %173.1 = FrameState         R     0x55804e9d77b0+105: [%170.2], env=e136.0, next=%173.0
  void                    Deopt              !v    %173.1, Typecheck@0x55804e3d1be0[Type#5], %170.2   !
BB174   <- [172]
  prom-           %174.0 = MkArg                    unboundValue, [0x55804ecaf480]_p22, e136.0
  prom-           %174.1 = MkArg                    unboundValue, [0x55804ecaf480]_p23, e136.0
  prom-           %174.2 = MkArg                    unboundValue, [0x55804ecaf480]_p24, e136.0
  val?            %174.3 = StaticCall         !v    assign[0x55804ee4f450](%174.0, %174.1, %174.2) e136.0   <real$->
  lgl$#-          %174.4 = IsType                   %174.3 isA real$-
  void                    Branch                   %174.4 -> BB176 (if true) | BB177 (if false)
BB175   <- [172]
  fs              %175.0 = FrameState         R     0x55804ec9bac0+640: [], env=e96.0
  fs              %175.1 = FrameState         R     0x55804e9d77b0+119: [], env=e136.0, next=%175.0
  void                    Deopt              !v    %175.1, CallTarget@0x55804e3d1be0[Call#2], %172.2   !
BB176   <- [174]
  real$-          %176.0 = CastType           d     dn %174.3
  val?            %176.1 = PopContext         C     %176.0, %130.2   <real$->
  lgl$#-          %176.2 = IsType                   %176.1 isA real$-
  void                    Branch                   %176.2 -> BB178 (if true) | BB179 (if false)
BB177   <- [174]
  fs              %177.0 = FrameState         R     0x55804ec9bac0+640: [], env=e96.0
  fs              %177.1 = FrameState         R     0x55804e9d77b0+161: [%174.3], env=e136.0, next=%177.0
  void                    Deopt              !v    %177.1, Typecheck@0x55804e3d1be0[Type#10], %174.3   !
BB178   <- [176]
  void                    Nop                !     
  val?            %178.1 = %176.1
  goto BB32
BB179   <- [176]
  fs              %179.0 = FrameState         R     0x55804ec9bac0+640: [%176.1], env=e96.0
  void                    Deopt              !v    %179.0, Typecheck@0x55804e19e1f0[Type#12], %176.1   !
Prom 0:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    type, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     c, <0x55804bee1940>, e0.0
  val?            %0.2  = Call               !     %0.1("<-", "<<-") e0.0   <str->
  void                    Return             l     %0.2
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    e, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <code->
  void                    Return             l     %0.3
Prom 3:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    w, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 4:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    n, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 5:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    e, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <code->
  void                    Return             l     %0.3
Prom 6:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    w, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 7:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    n, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 8:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    w, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 9:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    n, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 10:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    w, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 11:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    n, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 12:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    w, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 13:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    n, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 14:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    w, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 15:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    x, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <(int|str)+>
  void                    Return             l     %0.3
Prom 16:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    table, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <val?->
  void                    Return             l     %0.3
Prom 18:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    vn, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 19:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    w, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 20:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    which, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 21:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    entry, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 22:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    which, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 23:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    value, e0.0
  val?            %0.2  = Force<value>       !v    %0.1, e0.0   <real$->
  void                    Visible            v     
  val?            %0.4  = Add                !     %0.2, 1, e0.0   <real$->
  void                    Return             l     %0.4
Prom 24:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    entry, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 25:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    vn, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 26:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     $, <0x55804bee0c10>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, [0x55804ecaf480]_p27, e0.0
  prom-           %0.3  = MkArg                    unboundValue, [0x55804ecaf480]_p28, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <env+>
  void                    Return             l     %0.4
Prom 27:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    w, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 28:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    env, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 29:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     $, <0x55804bee0c10>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, [0x55804ecaf480]_p30, e0.0
  prom-           %0.3  = MkArg                    unboundValue, [0x55804ecaf480]_p31, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <env->
  void                    Return             l     %0.4
Prom 30:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    w, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 31:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    globalenv, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 32:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    .BaseEnv, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 33:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    env, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <env+>
  void                    Return             l     %0.3
Prom 34:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    e, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <(lgl|env)+>
  void                    Return             l     %0.3
Prom 35:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    .BaseEnv, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 42:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    env, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <env+>
  void                    Return             l     %0.3
Prom 43:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     attr, <0x55804bee1080>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, [0x55804ecaf480]_p44, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2, "checkUsageFrame") e0.0   <env+>
  void                    Return             l     %0.3
Prom 44:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    env, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <env+>
  void                    Return             l     %0.3
Prom 51:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    vn, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 52:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    env, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <env+>
  void                    Return             l     %0.3
Prom 53:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    vn, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 54:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    w, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 55:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    entry, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 56:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    w, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 57:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    srcfile, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <>
  void                    Return             l     %0.3
Prom 58:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    w, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 59:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    frow, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <>
  void                    Return             l     %0.3
Prom 60:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    w, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 61:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    lrow, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <>
  void                    Return             l     %0.3
Prom 62:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    new, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 63:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    value, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <vec>
  void                    Return             l     %0.3
Prom 64:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    new, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <vec>
  void                    Return             l     %0.3
Prom 65:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     rbind, e0.0
  prom-           %0.2  = MkArg                    unboundValue, [0x55804ecaf480]_p66, e0.0
  (miss|dots)     %0.3  = LdDots             R     , e0.0
  *dots-          %0.4  = ExpandDots               %0.3
  val?            %0.5  = NamedCall          !     %0.1(%0.2, .xpandDotsTrigger=%0.4) e0.0   <val?_>
  void                    Return             l     %0.5
Prom 66:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    deparse.level, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 67:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    value, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <vec>
  void                    Return             l     %0.3
Prom 68:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    entry, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <env->
  void                    Return             l     %0.3

│ [0x55804ecaf480]                                                             │
└──────────────────────────────────────────────────────────────────────────────┘
