
┌──────────────────────────────────────────────────────────────────────────────┐
│ [0x55804fb54d20]                                                             │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;NonRefl0,NonRefl1,!Obj0,!Obj1        │
│ Properties:                                                                  │
├────── Final PIR Version
[0x55804fb54d20]
BB0
  val?^           %0.0  = LdArg                    1
  val?^           %0.1  = LdArg                    0
  val?^ | miss    %0.2  = LdVar              eR    %in%, <env 0x55804e699488>
  lgl$#-          %0.3  = Identical                %0.2, function(x, table) <(rir::DispatchTable*)0x558|...
  void                    Branch                   %0.3 -> BB114 (if true) | BB115 (if false)
BB114   <- [0]
  env             e114.0 = MkEnv              l     e=%0.1, w=%0.0, parent=<env 0x55804e699488>, context 1
  val?^ | miss    %114.1 = LdVar              eR    typeof, <env 0x55804e699488>
  lgl$#-          %114.2 = Identical                %114.1, function(x) <(rir::DispatchTable*)0x55804e1c3c|...
  void                    Branch                   %114.2 -> BB116 (if true) | BB117 (if false)
BB115   <- [0]
  void                    Nop                !     
  val?^ | miss    %115.1 = %0.2
  dr              %115.2 = CallTarget@0x55804f22be88[Call#0]
  goto BB113
BB116   <- [114]
  val+            %116.0 = Force!<lazy>       !vr   %0.1,    <code->
  val?            %116.1 = Extract2_1D        wed   %116.0, 1, elided   <sym->
  str$-           %116.2 = CallSafeBuiltin    wed   typeof(%116.1) 
  (cls|spec|blt)  %116.3 = LdFun              !v    c, <0x55804bee1940>, <env 0x55804e699488>
  val?            %116.4 = Call               !v    %116.3("symbol", "character") e114.0   <str->
  lgl$#-          %116.5 = IsType                   %116.4 isA val?-
  void                    Branch                   %116.5 -> BB118 (if true) | BB119 (if false)
BB117   <- [114]
  void                    Nop                !     
  val?^ | miss    %117.1 = %114.1
  dr              %117.2 = CallTarget@0x55804f22be88[Call#1]
  goto BB113
BB113   <- [115, 117]
  val?^ | miss    %113.0 = Phi                      %115.1:BB115, %117.1:BB117
  val?^ | miss    %113.1 = %113.0
  dr              %113.2 = Phi                      %115.2:BB115, %117.2:BB117
  dr              %113.3 = %113.2
  env             e113.4 = (MkEnv)            l     e=%0.1, w=%0.0, parent=<env 0x55804e699488>, context 1
  fs              %113.5 = FrameState         R     0x55804e757760+0: [], env=e113.4
  void                    Deopt              !v    %113.5, %113.3, %113.1
BB118   <- [116]
  val?-           %118.0 = CastType           d     dn %116.4   <str->
  val+            %118.1 = CallSafeBuiltin    wed   match(%116.2, %118.0, 0L, nil)    <int->
  lgl$#-          %118.2 = IsType                   %118.1 isA int-
  void                    Branch                   %118.2 -> BB120 (if true) | BB121 (if false)
BB119   <- [116]
  prom-           %119.0 = MkArg                    unboundValue, [0x55804fb54d20]_p2, e114.0
  val?^           %119.1 = CastType                 up %119.0
  prom-           %119.2 = MkArg                    %116.2, [0x55804fb54d20]_p0 (!refl), e114.0
  val?~           %119.3 = CastType                 up %119.2
  env             e119.4 = (MkEnv)            l     x=%119.3, table=%119.1, parent=R_BaseNamespace, context 0
  env             e119.5 = MaterializeEnv           , e119.4   <@?>
  prom-           %119.6 = MkArg                    unboundValue, [0x55804fb54d20]_p20, e119.5
  val?^           %119.7 = CastType                 up %119.6
  prom-           %119.8 = MkArg                    %116.2, [0x55804fb54d20]_p19 (!refl), e119.5
  val?~           %119.9 = CastType                 up %119.8
  fs              %119.10 = FrameState         R     0x55804e757760+37: [], env=e114.0
  fs              %119.11 = FrameState         R     0x55804c50e320+54: [], env=e119.5, next=%119.10
  env             e119.12 = (MkEnv)            l     incomparables(miss)=nil, nomatch=0L, table=%119.7, x=%119.9, parent=R_BaseNamespace, context -1
  fs              %119.13 = FrameState         R     0x55804c6f5d40+23: [%116.2, %116.4], env=e119.12, next=%119.11
  void                    Deopt              !v    %119.13, Typecheck@0x55804c748cb0[Type#1], %116.4   !
BB120   <- [118]
  int-            %120.0 = CastType           d     dn %118.1
  lgl-            %120.1 = Gt                 wed   %120.0, 0L, elided   <lgl->
  lgl$#-          %120.2 = CheckTrueFalse     we    %120.1
  void                    Branch                   %120.2 -> BB10 (if true) | BB9 (if false)
BB121   <- [118]
  prom-           %121.0 = MkArg                    unboundValue, [0x55804fb54d20]_p2, e114.0
  val?^           %121.1 = CastType                 up %121.0
  prom-           %121.2 = MkArg                    %116.2, [0x55804fb54d20]_p0 (!refl), e114.0
  val?~           %121.3 = CastType                 up %121.2
  env             e121.4 = (MkEnv)            l     x=%121.3, table=%121.1, parent=R_BaseNamespace, context 0
  env             e121.5 = MaterializeEnv           , e121.4   <@?>
  prom-           %121.6 = MkArg                    unboundValue, [0x55804fb54d20]_p20, e121.5
  val?^           %121.7 = CastType                 up %121.6
  prom-           %121.8 = MkArg                    %116.2, [0x55804fb54d20]_p19 (!refl), e121.5
  val?~           %121.9 = CastType                 up %121.8
  fs              %121.10 = FrameState         R     0x55804e757760+37: [], env=e114.0
  fs              %121.11 = FrameState         R     0x55804c50e320+54: [], env=e121.5, next=%121.10
  env             e121.12 = (MkEnv)            l     incomparables(miss)=nil, nomatch=0L, table=%121.7, x=%121.9, parent=R_BaseNamespace, context -1
  fs              %121.13 = FrameState         R     0x55804c6f5d40+69: [%118.1], env=e121.12, next=%121.11
  void                    Deopt              !v    %121.13, Typecheck@0x55804d540688[Type#2], %118.1   !
BB10   <- [120]
  val?^ | miss    %10.0 = LdVar              eR    as.character, e114.0
  lgl$#-          %10.1 = Identical                <blt as.character>, %10.0   <true>
  void                    Branch                   %10.1 -> BB122 (if true) | BB123 (if false)
BB9   <- [120]
  (cls|spec|blt)  %9.0  = LdFun              !v    walkCode, e114.0
  fs              %9.1  = FrameState         R     0x55804e757760+53: [%9.0], env=e114.0
  void                    Deopt              !v    %9.1, DeadCall@0x55804f22be88[Call#3], %9.0   !
BB122   <- [10]
  val?^ | miss    %122.0 = LdVar              eR    e, e114.0
  val?            %122.1 = Force!<wrapped>    !v    %122.0, e114.0   <code->
  lgl$#-          %122.2 = IsType                   %122.1 isA val+   <true>
  lgl$#-          %122.3 = IsType                   %122.1 isA val?-
  void                    Branch                   %122.2 -> BB124 (if true) | BB125 (if false)
BB123   <- [10]
  fs              %123.0 = FrameState         R     0x55804e757760+43: [%120.2], env=e114.0
  void                    Deopt              !v    %123.0, DeadBranchReached@0x55804f22be88[Test#2], %10.1   !
BB124   <- [122]
  void                    Branch                   %122.3 -> BB126 (if true) | BB127 (if false)
BB125   <- [122]
  void                    Nop                !     
  lgl$#-          %125.1 = %122.2
  dr              %125.2 = DeadBranchReached@0x55804f22be88[Test#4]
  goto BB11
BB126   <- [124]
  val?-           %126.0 = CastType           d     dn %122.1   <code->
  val?            %126.1 = Extract2_1D        wed   %126.0, 1, elided   <sym->
  lgl$#-          %126.2 = IsType                   %126.1 isA val?-
  void                    Branch                   %126.2 -> BB128 (if true) | BB129 (if false)
BB127   <- [124]
  void                    Nop                !     
  val?            %127.1 = %122.1
  dr              %127.2 = Typecheck@0x55804f22be88[Type#10]
  goto BB11
BB11   <- [125, 127]
  val?^ | miss    %11.0 = Phi                      %125.1:BB125, %127.1:BB127
  val?^ | miss    %11.1 = %11.0
  dr              %11.2 = Phi                      %125.2:BB125, %127.2:BB127
  dr              %11.3 = %11.2
  fs              %11.4 = FrameState         R     0x55804e757760+160: [<blt as.character>, %122.1], env=e114.0
  void                    Deopt              !v    %11.4, %11.3, %11.1   !
BB128   <- [126]
  val?-           %128.0 = CastType           d     dn %126.1   <sym->
  val+            %128.1 = CallSafeBuiltin    wed   as.character(%128.0)    <str$->
  void                    StVar              lW    fn, %128.1, e114.0
  (cls|spec|blt)  %128.3 = LdFun              !v    $, <0x55804bee0c10>, e114.0
  prom-           %128.4 = MkArg                    unboundValue, [0x55804fb54d20]_p3, e114.0
  prom-           %128.5 = MkArg                    unboundValue, [0x55804fb54d20]_p4, e114.0
  val?            %128.6 = Call               !v    %128.3(%128.4, %128.5) e114.0   <cls->
  (cls|spec|blt)  %128.7 = ChkFunction        e     %128.6
  prom-           %128.8 = MkArg                    unboundValue, [0x55804fb54d20]_p5, e114.0
  prom-           %128.9 = MkArg                    unboundValue, [0x55804fb54d20]_p6, e114.0
  lgl$#-          %128.10 = Identical                %128.7, function(v, w) <(rir::DispatchTable*)0x55804e5|...
  val?^           %128.11 = CastType                 up %128.9
  val?^           %128.12 = CastType                 up %128.8
  void                    Branch                   %128.10 -> BB130 (if true) | BB131 (if false)
BB129   <- [126]
  fs              %129.0 = FrameState         R     0x55804e757760+203: [<blt as.character>, %126.1], env=e114.0
  void                    Deopt              !v    %129.0, Typecheck@0x55804f22be88[Type#11], %126.1   !
BB130   <- [128]
  ct              %130.0 = PushContext        lCL   %128.8, %128.9, $(w, isLocal)(fn, w), function(v, w) <(rir::DispatchTable*)0x55804e5|..., e114.0
  val?^ | miss    %130.1 = LdVar              eR    isDDSym, <env 0x55804e699488>
  lgl$#-          %130.2 = Identical                %130.1, function(name) <(rir::DispatchTable*)0x55804e2|...
  void                    Branch                   %130.2 -> BB132 (if true) | BB133 (if false)
BB131   <- [128]
  fs              %131.0 = FrameState         R     0x55804e757760+277: [%128.6], env=e114.0
  void                    Deopt              !v    %131.0, CallTarget@0x55804f22be88[Call#6], %128.7   !
BB132   <- [130]
  env             e132.0 = MkEnv              l     v=%128.12, w=%128.11, parent=<env 0x55804e699488>, context 1
  prom-           %132.1 = MkArg                    unboundValue, [0x55804fb54d20]_p22, e132.0
  ct              %132.2 = PushContext        lCL   %132.1, isDDSym(v), function(name) <(rir::DispatchTable*)0x55804e2|..., e132.0
  val?^           %132.3 = CastType                 up %132.1
  val?^ | miss    %132.4 = LdVar              eR    is.symbol, <env 0x55804e699488>
  lgl$#-          %132.5 = Identical                <blt is.symbol>, %132.4   <true>
  void                    Branch                   %132.5 -> BB134 (if true) | BB135 (if false)
BB133   <- [130]
  fs              %133.0 = FrameState         R     0x55804e757760+315: [], env=e114.0
  env             e133.1 = (MkEnv)            l     v=%128.12, w=%128.11, parent=<env 0x55804e699488>, context 1
  fs              %133.2 = FrameState         R     0x55804eb466f0+0: [], env=e133.1, next=%133.0
  void                    Deopt              !v    %133.2, CallTarget@0x55804f22bd28[Call#0], %130.1   !
BB134   <- [132]
  env             e134.0 = MkEnv              l     name=%132.3, parent=<env 0x55804e699488>, context 1
  val?            %134.1 = Force!<lazy>       !vL   %132.3, e134.0   <(sym|str)->
  lgl$#-          %134.2 = CallSafeBuiltin    wed   is.symbol(%134.1)    <lgl$->
  void                    Branch                   %134.2 -> BB112 (if true) | BB23 (if false)
BB135   <- [132]
  fs              %135.0 = FrameState         R     0x55804e757760+315: [], env=e114.0
  fs              %135.1 = FrameState         R     0x55804eb466f0+32: [], env=e132.0, next=%135.0
  env             e135.2 = (MkEnv)            l     name=%132.3, parent=<env 0x55804e699488>, context 1
  fs              %135.3 = FrameState         R     0x55804ed96dd0+17: [<blt is.symbol>, %132.5], env=e135.2, next=%135.1
  void                    Deopt              !v    %135.3, DeadBranchReached@0x55804eaeb288[Test#0], %132.5   !
BB112   <- [134]
  void                    Nop                !     
  lgl$#-          %112.1 = %134.2
  goto BB24
BB23   <- [134]
  val?^ | miss    %23.0 = LdVar              eR    is.character, <env 0x55804e699488>
  lgl$#-          %23.1 = Identical                <blt is.character>, %23.0   <true>
  void                    Branch                   %23.1 -> BB136 (if true) | BB137 (if false)
BB24   <- [112, 136]
  lgl$-           %24.0 = Phi                      %136.2:BB136, %112.1:BB112
  lgl$-           %24.1 = %24.0
  lgl$-           %24.2 = AsLogical                %24.1
  lgl$#-          %24.3 = Identical                %24.2, false
  void                    Branch                   %24.3 -> BB111 (if true) | BB27 (if false)
BB136   <- [23]
  lgl$#-          %136.0 = CallSafeBuiltin    wed   is.character(%134.1)    <lgl$->
  lgl$-           %136.1 = LOr                      %134.2, %136.0
  lgl$-           %136.2 = %136.1
  goto BB24
BB137   <- [23]
  fs              %137.0 = FrameState         R     0x55804e757760+315: [], env=e114.0
  fs              %137.1 = FrameState         R     0x55804eb466f0+32: [], env=e132.0, next=%137.0
  fs              %137.2 = FrameState         R     0x55804ed96dd0+91: [%134.2], env=e134.0, next=%137.1
  void                    Deopt              !v    %137.2, DeadBranchReached@0x55804eaeb288[Test#1], %23.1   !
BB111   <- [24]
  void                    Nop                !     
  lgl$-           %111.1 = %24.2
  goto BB53
BB27   <- [24]
  val?^ | miss    %27.0 = LdVar              eR    length, <env 0x55804e699488>
  lgl$#-          %27.1 = Identical                <blt length>, %27.0   <true>
  void                    Branch                   %27.1 -> BB138 (if true) | BB139 (if false)
BB53   <- [111, 166]
  lgl$-           %53.0 = Phi                      %166.4:BB166, %111.1:BB111
  lgl$-           %53.1 = %53.0
  val?            %53.2 = PopContext         C     %53.1, %132.2   <lgl$->
  lgl$#-          %53.3 = IsType                   %53.2 isA lgl$-
  void                    Branch                   %53.3 -> BB144 (if true) | BB145 (if false)
BB138   <- [27]
  val?^ | miss    %138.0 = LdVar              eR    grep, <env 0x55804e699488>
  lgl$#-          %138.1 = Identical                %138.0, function(pattern, x, ignore.case=FALSE, perl=F|...
  void                    Branch                   %138.1 -> BB140 (if true) | BB141 (if false)
BB139   <- [27]
  void                    Nop                !     
  lgl$#-          %139.1 = %27.1
  dr              %139.2 = DeadBranchReached@0x55804eaeb288[Test#2]
  goto BB25
BB144   <- [53]
  lgl$-           %144.0 = CastType           d     dn %53.2
  lgl$#-          %144.1 = CheckTrueFalse     e     %144.0
  void                    Branch                   %144.1 -> BB106 (if true) | BB56 (if false)
BB145   <- [53]
  fs              %145.0 = FrameState         R     0x55804e757760+315: [], env=e114.0
  fs              %145.1 = FrameState         R     0x55804eb466f0+32: [%53.2], env=e132.0, next=%145.0
  void                    Deopt              !v    %145.1, Typecheck@0x55804f22bd28[Type#1], %53.2   !
BB140   <- [138]
  prom-           %140.0 = MkArg                    unboundValue, [0x55804fb54d20]_p32, e134.0
  ct              %140.1 = PushContext        lCL   "^\.\.[[:digit:]]+$", %140.0, grep("^\.\.[[:digit:]]+$", as.character(name)), function(pattern, x, ignore.case=FALSE, perl=F|..., e134.0
  val?^           %140.2 = CastType                 up %140.0
  env             e140.3 = MkEnv              l     pattern="^\.\.[[:digit:]]+$", x=%140.2, ignore.case(miss)=false, perl(miss)=false, value(miss)=false, fixed(miss)=false, useBytes(miss)=false, invert(miss)=false, parent=R_BaseNamespace, context 1
  prom-           %140.4 = MkArg                    unboundValue, [0x55804fb54d20]_p42, e140.3
  ct              %140.5 = PushContext        lCL   %140.4, is.factor(x), function(x) <(rir::DispatchTable*)0x55804e0cdd|..., e140.3
  val?^           %140.6 = CastType                 up %140.4
  env             e140.7 = MkEnv              l     x=%140.6, parent=R_BaseNamespace, context 1
  prom-           %140.8 = MkArg                    unboundValue, [0x55804fb54d20]_p43, e140.7
  ct              %140.9 = PushContext        lCL   %140.8, "factor", inherits(x, "factor"), function(x, what, which=FALSE) <(rir::Dispatch|..., e140.7
  val?^           %140.10 = CastType                 up %140.8
  env             e140.11 = MkEnv              l     x=%140.10, what="factor", which(miss)=false, parent=R_BaseNamespace, context 1
  val?            %140.12 = Force!<lazy>       !vr   %140.10,    <val?>
  val?            %140.13 = CallBuiltin        !v    inherits(%140.12, "factor", false) e140.11
  val?            %140.14 = PopContext         C     %140.13, %140.9   <lgl$->
  lgl$#-          %140.15 = IsType                   %140.14 isA lgl$-
  void                    Branch                   %140.15 -> BB142 (if true) | BB143 (if false)
BB141   <- [138]
  void                    Nop                !     
  val?^ | miss    %141.1 = %138.0
  dr              %141.2 = CallTarget@0x55804eaeb288[Call#5]
  goto BB25
BB25   <- [139, 141]
  val?^ | miss    %25.0 = Phi                      %139.1:BB139, %141.1:BB141
  val?^ | miss    %25.1 = %25.0
  dr              %25.2 = Phi                      %139.2:BB139, %141.2:BB141
  dr              %25.3 = %25.2
  fs              %25.4 = FrameState         R     0x55804e757760+315: [], env=e114.0
  fs              %25.5 = FrameState         R     0x55804eb466f0+32: [], env=e132.0, next=%25.4
  fs              %25.6 = FrameState         R     0x55804ed96dd0+201: [%24.1], env=e134.0, next=%25.5
  void                    Deopt              !v    %25.6, %25.3, %25.1   !
BB106   <- [144]
  void                    StVar              lW    v, "...", e132.0
  goto BB57
BB56   <- [144]
  void                    Nop                !     
  goto BB57
BB142   <- [140]
  lgl$-           %142.0 = CastType           d     dn %140.14
  val?            %142.1 = PopContext         C     %142.0, %140.5   <lgl$->
  lgl$#-          %142.2 = IsType                   %142.1 isA lgl$-
  void                    Branch                   %142.2 -> BB146 (if true) | BB147 (if false)
BB143   <- [140]
  fs              %143.0 = FrameState         R     0x55804e757760+315: [], env=e114.0
  fs              %143.1 = FrameState         R     0x55804eb466f0+32: [], env=e132.0, next=%143.0
  fs              %143.2 = FrameState         R     0x55804ed96dd0+306: [%24.2, <blt length>], env=e134.0, next=%143.1
  fs              %143.3 = FrameState         R     0x55804e0bd5b0+137: [], env=e140.3, next=%143.2
  fs              %143.4 = FrameState         R     0x55804e24e050+37: [%140.14], env=e140.7, next=%143.3
  void                    Deopt              !v    %143.4, Typecheck@0x55804d2fed88[Type#1], %140.14   !
BB57   <- [56, 106]
  val?^ | miss    %57.0 = LdVar              eR    is.baseenv, e132.0
  lgl$#-          %57.1 = Identical                %57.0, function(e) <(rir::DispatchTable*)0x55804e41e7|...
  void                    Branch                   %57.1 -> BB148 (if true) | BB149 (if false)
BB146   <- [142]
  lgl$-           %146.0 = CastType           d     dn %142.1
  lgl$-           %146.1 = AsLogical                %146.0
  lgl$#-          %146.2 = Identical                %146.1, false
  lgl$-           %146.3 = AsLogical                %146.1
  lgl$#-          %146.4 = Identical                %146.3, false
  void                    Branch                   %146.2 -> BB35 (if true) | BB32 (if false)
BB147   <- [142]
  fs              %147.0 = FrameState         R     0x55804e757760+315: [], env=e114.0
  fs              %147.1 = FrameState         R     0x55804eb466f0+32: [], env=e132.0, next=%147.0
  fs              %147.2 = FrameState         R     0x55804ed96dd0+306: [%24.2, <blt length>], env=e134.0, next=%147.1
  fs              %147.3 = FrameState         R     0x55804e0bd5b0+137: [%142.1], env=e140.3, next=%147.2
  void                    Deopt              !v    %147.3, Typecheck@0x55804e11a880[Type#4], %142.1   !
BB148   <- [57]
  prom-           %148.0 = MkArg                    unboundValue, [0x55804fb54d20]_p23, e132.0
  ct              %148.1 = PushContext        lCL   %148.0, is.baseenv(findOwnerEnv(v, $(w, env), stop=$(w|..., function(e) <(rir::DispatchTable*)0x55804e41e7|..., e132.0
  val?^           %148.2 = CastType                 up %148.0
  val?^ | miss    %148.3 = LdVar              eR    identical, <env 0x55804e699488>
  lgl$#-          %148.4 = Identical                %148.3, function(x, y, num.eq=TRUE, single.NA=TRUE, at|...
  void                    Branch                   %148.4 -> BB152 (if true) | BB153 (if false)
BB149   <- [57]
  fs              %149.0 = FrameState         R     0x55804e757760+315: [], env=e114.0
  fs              %149.1 = FrameState         R     0x55804eb466f0+63: [], env=e132.0, next=%149.0
  void                    Deopt              !v    %149.1, CallTarget@0x55804f22bd28[Call#1], %57.0   !
BB35   <- [146]
  void                    Branch                   %146.4 -> BB110 (if true) | BB36 (if false)
BB32   <- [146]
  val?^ | miss    %32.0 = LdVar              eR    length, e140.3
  lgl$#-          %32.1 = Identical                <blt length>, %32.0   <@?>
  void                    Branch                   %32.1 -> BB34 (if true) | BB33 (if false)
BB152   <- [148]
  env             e152.0 = MkEnv              l     e=%148.2, parent=<env 0x55804e699488>, context 1
  prom-           %152.1 = MkArg                    unboundValue, [0x55804fb54d20]_p34, e152.0
  prom-           %152.2 = MkArg                    unboundValue, [0x55804fb54d20]_p35, e152.0
  ct              %152.3 = PushContext        lCL   %152.1, %152.2, identical(e, .BaseEnv), function(x, y, num.eq=TRUE, single.NA=TRUE, at|..., e152.0
  val?^           %152.4 = CastType                 up %152.2
  val?^           %152.5 = CastType                 up %152.1
  env             e152.6 = MkEnv              l     x=%152.5, y=%152.4, num.eq(miss)=true, single.NA(miss)=true, attrib.as.set(miss)=true, ignore.bytecode(miss)=true, ignore.environment(miss)=false, ignore.srcref(miss)=true, parent=R_BaseNamespace, context 1
  val?            %152.7 = Force!<lazy>       !vL   %152.5, e152.6   <val?+>
  val?            %152.8 = Force!<lazy>       !vL   %152.4, e152.6   <val?+>
  val?            %152.9 = CallBuiltin        !v    identical(%152.7, %152.8, true, true, true, true, false, true) e152.6
  val?            %152.10 = PopContext         C     %152.9, %152.3   <lgl$->
  lgl$#-          %152.11 = IsType                   %152.10 isA lgl$-
  void                    Branch                   %152.11 -> BB158 (if true) | BB159 (if false)
BB153   <- [148]
  fs              %153.0 = FrameState         R     0x55804e757760+315: [], env=e114.0
  fs              %153.1 = FrameState         R     0x55804eb466f0+95: [], env=e132.0, next=%153.0
  env             e153.2 = (MkEnv)            l     e=%148.2, parent=<env 0x55804e699488>, context 1
  fs              %153.3 = FrameState         R     0x55804eb37490+0: [], env=e153.2, next=%153.1
  void                    Deopt              !v    %153.3, CallTarget@0x55804ea246f8[Call#0], %148.3   !
BB110   <- [35]
  void                    Nop                !     
  lgl$-           %110.1 = %146.3
  goto BB43
BB36   <- [35]
  val?^ | miss    %36.0 = LdVar              eR    is.na, e140.3
  lgl$#-          %36.1 = Identical                <blt is.na>, %36.0   <@?>
  void                    Branch                   %36.1 -> BB38 (if true) | BB37 (if false)
BB34   <- [32]
  fs              %34.0 = FrameState         R     0x55804e757760+315: [], env=e114.0
  fs              %34.1 = FrameState         R     0x55804eb466f0+32: [], env=e132.0, next=%34.0
  fs              %34.2 = FrameState         R     0x55804ed96dd0+306: [%24.2, <blt length>], env=e134.0, next=%34.1
  (cls|spec|blt)  %34.3 = LdFun              !v    levels, e140.3
  fs              %34.4 = FrameState         R     0x55804e0bd5b0+214: [%146.1, <blt length>, %34.3], env=e140.3, next=%34.2
  void                    Deopt              !v    %34.4, DeadCall@0x55804e11a880[Call#4], %34.3   !
BB33   <- [32]
  fs              %33.0 = FrameState         R     0x55804e757760+315: [], env=e114.0
  fs              %33.1 = FrameState         R     0x55804eb466f0+32: [], env=e132.0, next=%33.0
  fs              %33.2 = FrameState         R     0x55804ed96dd0+306: [%24.2, <blt length>], env=e134.0, next=%33.1
  (cls|spec|blt)  %33.3 = LdFun              !v    length, e140.3
  fs              %33.4 = FrameState         R     0x55804e0bd5b0+177: [%146.1, %33.3], env=e140.3, next=%33.2
  void                    Deopt              !v    %33.4, DeadCall@0x55804e11a880[Call#2], %33.3   !
BB158   <- [152]
  lgl$-           %158.0 = CastType           d     dn %152.10
  val?            %158.1 = PopContext         C     %158.0, %148.1   <lgl$->
  lgl$#-          %158.2 = IsType                   %158.1 isA lgl$-
  void                    Branch                   %158.2 -> BB160 (if true) | BB161 (if false)
BB159   <- [152]
  fs              %159.0 = FrameState         R     0x55804e757760+315: [], env=e114.0
  fs              %159.1 = FrameState         R     0x55804eb466f0+95: [], env=e132.0, next=%159.0
  fs              %159.2 = FrameState         R     0x55804eb37490+37: [%152.10], env=e152.0, next=%159.1
  void                    Deopt              !v    %159.2, Typecheck@0x55804ea246f8[Type#2], %152.10   !
BB43   <- [110, 164]
  lgl$-           %43.0 = Phi                      %164.5:BB164, %110.1:BB110
  lgl$-           %43.1 = %43.0
  lgl$#-          %43.2 = CheckTrueFalse     e     %43.1
  void                    Branch                   %43.2 -> BB107 (if true) | BB46 (if false)
BB38   <- [36]
  val?^ | miss    %38.0 = LdVar              eR    pattern, e140.3
  val?            %38.1 = Force!             !v    %38.0, e140.3   <val?_>
  lgl$#-          %38.2 = IsType                   %38.1 isA val?+
  void                    Branch                   %38.2 -> BB154 (if true) | BB155 (if false)
BB37   <- [36]
  fs              %37.0 = FrameState         R     0x55804e757760+315: [], env=e114.0
  fs              %37.1 = FrameState         R     0x55804eb466f0+32: [], env=e132.0, next=%37.0
  fs              %37.2 = FrameState         R     0x55804ed96dd0+306: [%24.2, <blt length>], env=e134.0, next=%37.1
  (cls|spec|blt)  %37.3 = LdFun              !v    is.na, e140.3
  fs              %37.4 = FrameState         R     0x55804e0bd5b0+418: [%146.3, %37.3], env=e140.3, next=%37.2
  void                    Deopt              !v    %37.4, DeadCall@0x55804e11a880[Call#6], %37.3   !
BB160   <- [158]
  lgl$-           %160.0 = CastType           d     dn %158.1
  lgl$-           %160.1 = Not                d     %160.0, elided
  val?            %160.2 = PopContext         C     %160.1, %130.0   <lgl$->
  lgl$#-          %160.3 = IsType                   %160.2 isA lgl$-
  void                    Branch                   %160.3 -> BB162 (if true) | BB163 (if false)
BB161   <- [158]
  fs              %161.0 = FrameState         R     0x55804e757760+315: [], env=e114.0
  fs              %161.1 = FrameState         R     0x55804eb466f0+95: [%158.1], env=e132.0, next=%161.0
  void                    Deopt              !v    %161.1, Typecheck@0x55804f22bd28[Type#11], %158.1   !
BB107   <- [43]
  val?^ | miss    %107.0 = LdVar              eR    is.character, e140.3
  lgl$#-          %107.1 = Identical                <blt is.character>, %107.0   <@?>
  void                    Branch                   %107.1 -> BB109 (if true) | BB108 (if false)
BB46   <- [43]
  val?^ | miss    %46.0 = LdVar              eR    is.character, e140.3
  lgl$#-          %46.1 = Identical                <blt is.character>, %46.0   <true>
  void                    Branch                   %46.1 -> BB150 (if true) | BB151 (if false)
BB154   <- [38]
  val?+           %154.0 = CastType           d     dn %38.1   <val?_>
  val?            %154.1 = Extract1_1D        wed   %154.0, 1L, elided   <val?_>
  lgl$#-          %154.2 = IsType                   %154.1 isA val?+
  void                    Branch                   %154.2 -> BB164 (if true) | BB165 (if false)
BB155   <- [38]
  fs              %155.0 = FrameState         R     0x55804e757760+315: [], env=e114.0
  fs              %155.1 = FrameState         R     0x55804eb466f0+32: [], env=e132.0, next=%155.0
  fs              %155.2 = FrameState         R     0x55804ed96dd0+306: [%24.2, <blt length>], env=e134.0, next=%155.1
  fs              %155.3 = FrameState         R     0x55804e0bd5b0+459: [%146.3, <blt is.na>, %38.1], env=e140.3, next=%155.2
  void                    Deopt              !v    %155.3, Typecheck@0x55804e11a880[Type#16], %38.1   !
BB162   <- [160]
  lgl$-           %162.0 = CastType           d     dn %160.2
  lgl$#-          %162.1 = CheckTrueFalse     e     %162.0
  void                    Branch                   %162.1 -> BB103 (if true) | BB68 (if false)
BB163   <- [160]
  fs              %163.0 = FrameState         R     0x55804e757760+315: [%160.2], env=e114.0
  void                    Deopt              !v    %163.0, Typecheck@0x55804f22be88[Type#18], %160.2   !
BB109   <- [107]
  fs              %109.0 = FrameState         R     0x55804e757760+315: [], env=e114.0
  fs              %109.1 = FrameState         R     0x55804eb466f0+32: [], env=e132.0, next=%109.0
  fs              %109.2 = FrameState         R     0x55804ed96dd0+306: [%24.2, <blt length>], env=e134.0, next=%109.1
  (cls|spec|blt)  %109.3 = LdFun              !v    suppressWarnings, e140.3
  fs              %109.4 = FrameState         R     0x55804e0bd5b0+901: [<blt is.character>, %109.3], env=e140.3, next=%109.2
  void                    Deopt              !v    %109.4, DeadCall@0x55804e11a880[Call#14], %109.3   !
BB108   <- [107]
  fs              %108.0 = FrameState         R     0x55804e757760+315: [], env=e114.0
  fs              %108.1 = FrameState         R     0x55804eb466f0+32: [], env=e132.0, next=%108.0
  fs              %108.2 = FrameState         R     0x55804ed96dd0+306: [%24.2, <blt length>], env=e134.0, next=%108.1
  (cls|spec|blt)  %108.3 = LdFun              !v    is.character, e140.3
  fs              %108.4 = FrameState         R     0x55804e0bd5b0+864: [%108.3], env=e140.3, next=%108.2
  void                    Deopt              !v    %108.4, DeadCall@0x55804e11a880[Call#11], %108.3   !
BB150   <- [46]
  val?^ | miss    %150.0 = LdVar              eR    x, e140.3
  val?            %150.1 = Force!<wrapped>    !v    %150.0, e140.3   <str->
  lgl$#-          %150.2 = CallSafeBuiltin    wed   is.character(%150.1)    <lgl$->
  void                    Branch                   %150.2 -> BB48 (if true) | BB47 (if false)
BB151   <- [46]
  fs              %151.0 = FrameState         R     0x55804e757760+315: [], env=e114.0
  fs              %151.1 = FrameState         R     0x55804eb466f0+32: [], env=e132.0, next=%151.0
  fs              %151.2 = FrameState         R     0x55804ed96dd0+306: [%24.2, <blt length>], env=e134.0, next=%151.1
  fs              %151.3 = FrameState         R     0x55804e0bd5b0+533: [%43.1], env=e140.3, next=%151.2
  void                    Deopt              !v    %151.3, DeadBranchReached@0x55804e11a880[Test#6], %46.1   !
BB164   <- [154]
  val?+           %164.0 = CastType           d     dn %154.1   <val?_>
  lgl+            %164.1 = CallSafeBuiltin    wed   is.na(%164.0)    <val?_>
  lgl             %164.2 = Not                wed   %164.1, elided
  lgl$-           %164.3 = AsLogical          e     %164.2
  lgl$-           %164.4 = LAnd                     %146.3, %164.3
  lgl$-           %164.5 = %164.4
  goto BB43
BB165   <- [154]
  fs              %165.0 = FrameState         R     0x55804e757760+315: [], env=e114.0
  fs              %165.1 = FrameState         R     0x55804eb466f0+32: [], env=e132.0, next=%165.0
  fs              %165.2 = FrameState         R     0x55804ed96dd0+306: [%24.2, <blt length>], env=e134.0, next=%165.1
  fs              %165.3 = FrameState         R     0x55804e0bd5b0+502: [%146.3, <blt is.na>, %154.1], env=e140.3, next=%165.2
  void                    Deopt              !v    %165.3, Typecheck@0x55804e11a880[Type#17], %154.1   !
BB103   <- [162]
  (cls|spec|blt)  %103.0 = LdFun              !v    $, <0x55804bee0c10>, e114.0
  prom-           %103.1 = MkArg                    unboundValue, [0x55804fb54d20]_p14, e114.0
  prom-           %103.2 = MkArg                    unboundValue, [0x55804fb54d20]_p15, e114.0
  val?            %103.3 = Call               !v    %103.0(%103.1, %103.2) e114.0   <cls->
  (cls|spec|blt)  %103.4 = ChkFunction        e     %103.3
  prom-           %103.5 = MkArg                    unboundValue, [0x55804fb54d20]_p16, e114.0
  prom-           %103.6 = MkArg                    unboundValue, [0x55804fb54d20]_p17, e114.0
  prom-           %103.7 = MkArg                    unboundValue, [0x55804fb54d20]_p18, e114.0
  lgl$#-          %103.8 = Identical                %103.4, function(type, n, e, w) <(rir::DispatchTable*)|...
  void                    Branch                   %103.8 -> BB170 (if true) | BB171 (if false)
BB68   <- [162]
  (cls|spec|blt)  %68.0 = LdFun              !v    $, <0x55804bee0c10>, e114.0
  prom-           %68.1 = MkArg                    unboundValue, [0x55804fb54d20]_p7, e114.0
  prom-           %68.2 = MkArg                    unboundValue, [0x55804fb54d20]_p8, e114.0
  val?            %68.3 = Call               !v    %68.0(%68.1, %68.2) e114.0   <cls->
  (cls|spec|blt)  %68.4 = ChkFunction        e     %68.3
  prom-           %68.5 = MkArg                    unboundValue, [0x55804fb54d20]_p9, e114.0
  prom-           %68.6 = MkArg                    unboundValue, [0x55804fb54d20]_p10, e114.0
  prom-           %68.7 = MkArg                    unboundValue, [0x55804fb54d20]_p11, e114.0
  lgl$#-          %68.8 = Identical                %68.4, function(type, n, e, w) <(rir::DispatchTable*)|...
  void                    Branch                   %68.8 -> BB168 (if true) | BB169 (if false)
BB48   <- [150]
  val?^ | miss    %48.0 = LdVar              eR    pattern, e140.3
  val?            %48.1 = Force!<value>      !v    %48.0, e140.3   <str$->
  val?^ | miss    %48.2 = LdVar              eR    x, e140.3
  val?            %48.3 = Force!<wrapped>    !v    %48.2, e140.3   <str->
  val?^ | miss    %48.4 = LdVar              eR    ignore.case, e140.3
  val?            %48.5 = Force!<lazy>       !v    %48.4, e140.3   <lgl$->
  val?^ | miss    %48.6 = LdVar              eR    value, e140.3
  val?            %48.7 = Force!<lazy>       !v    %48.6, e140.3   <lgl$->
  val?^ | miss    %48.8 = LdVar              eR    perl, e140.3
  val?            %48.9 = Force!<lazy>       !v    %48.8, e140.3   <lgl$->
  val?^ | miss    %48.10 = LdVar              eR    fixed, e140.3
  val?            %48.11 = Force!<lazy>       !v    %48.10, e140.3   <lgl$->
  val?^ | miss    %48.12 = LdVar              eR    useBytes, e140.3
  val?            %48.13 = Force!<lazy>       !v    %48.12, e140.3   <lgl$->
  val?^ | miss    %48.14 = LdVar              eR    invert, e140.3
  val?            %48.15 = Force!<lazy>       !v    %48.14, e140.3   <lgl$->
  val?            %48.16 = CallBuiltin        !v    grep(%48.1, %48.3, %48.5, %48.7, %48.9, %48.11, %48.13, %48.15) e140.3
  val?            %48.17 = PopContext         C     %48.16, %140.1   <int->
  lgl$#-          %48.18 = IsType                   %48.17 isA int-
  void                    Branch                   %48.18 -> BB156 (if true) | BB157 (if false)
BB47   <- [150]
  fs              %47.0 = FrameState         R     0x55804e757760+315: [], env=e114.0
  fs              %47.1 = FrameState         R     0x55804eb466f0+32: [], env=e132.0, next=%47.0
  fs              %47.2 = FrameState         R     0x55804ed96dd0+306: [%24.2, <blt length>], env=e134.0, next=%47.1
  (cls|spec|blt)  %47.3 = LdFun              !v    structure, e140.3
  fs              %47.4 = FrameState         R     0x55804e0bd5b0+652: [%47.3], env=e140.3, next=%47.2
  void                    Deopt              !v    %47.4, DeadCall@0x55804e11a880[Call#8], %47.3   !
BB170   <- [103]
  val?            %170.0 = StaticCall         !v    [0x55804ec21140]("function", %103.5, %103.6, %103.7) e114.0
  goto BB71
BB171   <- [103]
  fs              %171.0 = FrameState         R     0x55804e757760+454: [%103.3], env=e114.0
  void                    Deopt              !v    %171.0, CallTarget@0x55804f22be88[Call#10], %103.4   !
BB168   <- [68]
  val?            %168.0 = StaticCall         !v    [0x55804f2cc080]("function", %68.5, %68.6, %68.7) e114.0
  goto BB71
BB169   <- [68]
  fs              %169.0 = FrameState         R     0x55804e757760+363: [%68.3], env=e114.0
  void                    Deopt              !v    %169.0, CallTarget@0x55804f22be88[Call#8], %68.4   !
BB156   <- [48]
  int-            %156.0 = CastType           d     dn %48.17
  (int|real)$-    %156.1 = CallSafeBuiltin    wed   length(%156.0)    <int$->
  lgl$#-          %156.2 = IsType                   %156.1 isA int$-
  void                    Branch                   %156.2 -> BB166 (if true) | BB167 (if false)
BB157   <- [48]
  fs              %157.0 = FrameState         R     0x55804e757760+315: [], env=e114.0
  fs              %157.1 = FrameState         R     0x55804eb466f0+32: [], env=e132.0, next=%157.0
  fs              %157.2 = FrameState         R     0x55804ed96dd0+306: [%24.2, <blt length>, %48.17], env=e134.0, next=%157.1
  void                    Deopt              !v    %157.2, Typecheck@0x55804eaeb288[Type#11], %48.17   !
BB71   <- [168, 170]
  val?^ | miss    %71.0 = LdVar              eR    collectUsageArgs, e114.0
  lgl$#-          %71.1 = Identical                %71.0, function(e, w) <(rir::DispatchTable*)0x55804eb|...
  void                    Branch                   %71.1 -> BB172 (if true) | BB173 (if false)
BB166   <- [156]
  int$-           %166.0 = CastType           d     dn %156.1
  lgl$-           %166.1 = Neq                d     %166.0, 0, elided   <lgl$->
  lgl$-           %166.2 = AsLogical                %166.1
  lgl$-           %166.3 = LAnd                     %24.2, %166.2
  lgl$-           %166.4 = %166.3
  goto BB53
BB167   <- [156]
  fs              %167.0 = FrameState         R     0x55804e757760+315: [], env=e114.0
  fs              %167.1 = FrameState         R     0x55804eb466f0+32: [], env=e132.0, next=%167.0
  fs              %167.2 = FrameState         R     0x55804ed96dd0+328: [%24.2, %156.1], env=e134.0, next=%167.1
  void                    Deopt              !v    %167.2, Typecheck@0x55804eaeb288[Type#12], %156.1   !
BB172   <- [71]
  prom-           %172.0 = MkArg                    unboundValue, [0x55804fb54d20]_p12, e114.0
  prom-           %172.1 = MkArg                    unboundValue, [0x55804fb54d20]_p13, e114.0
  ct              %172.2 = PushContext        lCL   %172.0, %172.1, collectUsageArgs(e, w), function(e, w) <(rir::DispatchTable*)0x55804eb|..., e114.0
  val?^           %172.3 = CastType                 up %172.1
  val?^           %172.4 = CastType                 up %172.0
  val?^ | miss    %172.5 = LdVar              eR    dropMissings, <env 0x55804e699488>
  lgl$#-          %172.6 = Identical                %172.5, function(x) <(rir::DispatchTable*)0x55804ea145|...
  void                    Branch                   %172.6 -> BB174 (if true) | BB175 (if false)
BB173   <- [71]
  void                    Nop                !     
  val?^ | miss    %173.1 = %71.0
  dr              %173.2 = CallTarget@0x55804f22be88[Call#11]
  goto BB72
BB174   <- [172]
  env             e174.0 = MkEnv              l     e=%172.4, w=%172.3, parent=<env 0x55804e699488>, context 1
  prom-           %174.1 = MkArg                    unboundValue, [0x55804fb54d20]_p44, e174.0
  val?            %174.2 = StaticCall         !v    dropMissings[0x55804efa68f0](%174.1) e174.0   <vec->
  val?+           %174.3 = ToForSeq           e     %174.2
  int$-           %174.4 = Length                   %174.3
  int$-           %174.5 = Inc                      0L
  lgl$-           %174.6 = Lt                 d     %174.4, %174.5, elided   <false>
  lgl$#-          %174.7 = Identical                %174.6, true
  void                    Branch                   %174.7 -> BB177 (if true) | BB176 (if false)
BB175   <- [172]
  void                    DropContext        C     
  val?^ | miss    %175.1 = %172.5
  dr              %175.2 = CallTarget@0x55804f22ab48[Call#0]
  goto BB72
BB72   <- [173, 175]
  val?^ | miss    %72.0 = Phi                      %173.1:BB173, %175.1:BB175
  val?^ | miss    %72.1 = %72.0
  dr              %72.2 = Phi                      %173.2:BB173, %175.2:BB175
  dr              %72.3 = %72.2
  fs              %72.4 = FrameState         R     0x55804e757760+503: [], env=e114.0
  void                    Deopt              !v    %72.4, %72.3, %72.1   !
BB177   <- [174]
  fs              %177.0 = FrameState         R     0x55804e757760+540: [], env=e114.0
  fs              %177.1 = FrameState         R     0x55804f459ab0+32: [%174.2], env=e174.0, next=%177.0
  void                    Deopt              !v    %177.1, DeadBranchReached@0x55804f22ab48[Test#1], %174.7   !
BB176   <- [174]
  val?            %176.0 = Extract2_1D        wed   %174.3, %174.5, elided   <(sym|code)->
  void                    StVar              lW    a, %176.0, e174.0
  val?^ | miss    %176.2 = LdVar              eR    typeof, e174.0
  lgl$#-          %176.3 = Identical                %176.2, function(x) <(rir::DispatchTable*)0x55804e1c3c|...
  void                    Branch                   %176.3 -> BB178 (if true) | BB179 (if false)
BB178   <- [176]
  val             %178.0 = ChkMissing         e     %176.0
  str$-           %178.1 = CallSafeBuiltin    wed   typeof(%176.0)    <str$->
  lgl$-           %178.2 = Eq                 d     %178.1, "symbol", elided   <lgl$->
  lgl$-           %178.3 = AsLogical                %178.2
  lgl$#-          %178.4 = Identical                %178.3, false
  void                    Branch                   %178.4 -> BB102 (if true) | BB80 (if false)
BB179   <- [176]
  fs              %179.0 = FrameState         R     0x55804e757760+540: [], env=e114.0
  fs              %179.1 = FrameState         R     0x55804f459ab0+77: [%174.3, %174.4, %174.5], env=e174.0, next=%179.0
  void                    Deopt              !v    %179.1, CallTarget@0x55804f22ab48[Call#1], %176.2   !
BB102   <- [178]
  void                    Nop                !     
  lgl$-           %102.1 = %178.3
  goto BB83
BB80   <- [178]
  lgl$#-          %80.0 = IsType                   %176.0 isA val?-
  void                    Branch                   %80.0 -> BB180 (if true) | BB181 (if false)
BB83   <- [102, 184]
  lgl$-           %83.0 = Phi                      %184.3:BB184, %102.1:BB102
  lgl$-           %83.1 = %83.0
  lgl$#-          %83.2 = CheckTrueFalse     e     %83.1
  void                    Branch                   %83.2 -> BB101 (if true) | BB86 (if false)
BB180   <- [80]
  val?-           %180.0 = CastType           d     dn %176.0   <(sym|code)->
  lgl-            %180.1 = Eq                 wed   %180.0, "...", elided   <lgl$->
  lgl$#-          %180.2 = IsType                   %180.1 isA lgl$-
  void                    Branch                   %180.2 -> BB184 (if true) | BB185 (if false)
BB181   <- [80]
  fs              %181.0 = FrameState         R     0x55804e757760+540: [], env=e114.0
  prom-           %181.1 = MkArg                    %176.0, [0x55804fb54d20]_p46 (!refl), e174.0
  val?~           %181.2 = CastType                 up %181.1
  fs              %181.3 = FrameState         R     0x55804f459ab0+109: [%174.3, %174.4, %174.5], env=e174.0, next=%181.0
  env             e181.4 = (MkEnv)            l     x=%181.2, parent=R_BaseNamespace, context 0
  fs              %181.5 = FrameState         R     0x55804e7773a0+27: [%178.1], env=e181.4, next=%181.3
  void                    Deopt              !v    %181.5, Typecheck@0x55804f22ab48[Type#3], %176.0   !
BB101   <- [83]
  fs              %101.0 = FrameState         R     0x55804e757760+540: [], env=e114.0
  (cls|spec|blt)  %101.1 = LdFun              !v    $, e174.0
  fs              %101.2 = FrameState         R     0x55804f459ab0+215: [%174.3, %174.4, %174.5, %101.1], env=e174.0, next=%101.0
  void                    Deopt              !v    %101.2, DeadCall@0x55804f22ab48[Call#3], %101.1   !
BB86   <- [83]
  val?^ | miss    %86.0 = LdVar              eR    walkCode, e174.0
  lgl$#-          %86.1 = Identical                %86.0, function(e, w=makeCodeWalker()) <(rir::Dispatc|...
  void                    Branch                   %86.1 -> BB182 (if true) | BB183 (if false)
BB184   <- [180]
  lgl$-           %184.0 = CastType           d     dn %180.1
  lgl$-           %184.1 = AsLogical                %184.0
  lgl$-           %184.2 = LAnd                     %178.3, %184.1
  lgl$-           %184.3 = %184.2
  goto BB83
BB185   <- [180]
  fs              %185.0 = FrameState         R     0x55804e757760+540: [], env=e114.0
  fs              %185.1 = FrameState         R     0x55804f459ab0+154: [%174.3, %174.4, %174.5, %178.3, %180.1], env=e174.0, next=%185.0
  void                    Deopt              !v    %185.1, Typecheck@0x55804f22ab48[Type#7], %180.1   !
BB182   <- [86]
  prom-           %182.0 = MkArg                    unboundValue, [0x55804fb54d20]_p47 (!refl), e174.0
  prom-           %182.1 = MkArg                    unboundValue, [0x55804fb54d20]_p48, e174.0
  val?            %182.2 = StaticCall         !v    walkCode[0x55804f2faa00](%182.0, %182.1) e174.0
  int$-           %182.3 = %174.5
  goto BB87
BB183   <- [86]
  fs              %183.0 = FrameState         R     0x55804e757760+540: [], env=e114.0
  fs              %183.1 = FrameState         R     0x55804f459ab0+161: [%174.3, %174.4, %174.5, %83.1], env=e174.0, next=%183.0
  void                    Deopt              !v    %183.1, CallTarget@0x55804f22ab48[Call#2], %86.0   !
BB87   <- [182, 188]
  int$-           %87.0 = Phi                      %182.3:BB182, %188.3:BB188
  int$-           %87.1 = %87.0
  int$-           %87.2 = Inc                      %87.1
  lgl$-           %87.3 = Lt                 d     %174.4, %87.2, elided
  lgl$#-          %87.4 = Identical                %87.3, true
  void                    Branch                   %87.4 -> BB100 (if true) | BB88 (if false)
BB100   <- [87]
  void                    Invisible          v     
  val?            %100.1 = PopContext         C     nil, %172.2   <nil->
  void                    Return             l     %100.1
BB88   <- [87]
  val?            %88.0 = Extract2_1D        wed   %174.3, %87.2, elided   <val?->
  void                    StVar              lW    a, %88.0, e174.0
  val?^ | miss    %88.2 = LdVar              eR    typeof, e174.0
  lgl$#-          %88.3 = Identical                %88.2, function(x) <(rir::DispatchTable*)0x55804e1c3c|...
  void                    Branch                   %88.3 -> BB186 (if true) | BB187 (if false)
BB186   <- [88]
  val             %186.0 = ChkMissing         e     %88.0
  str$-           %186.1 = CallSafeBuiltin    wed   typeof(%88.0)    <str$->
  lgl$-           %186.2 = Eq                 d     %186.1, "symbol", elided   <lgl$->
  lgl$-           %186.3 = AsLogical                %186.2
  lgl$#-          %186.4 = Identical                %186.3, false
  void                    Branch                   %186.4 -> BB99 (if true) | BB93 (if false)
BB187   <- [88]
  fs              %187.0 = FrameState         R     0x55804e757760+540: [], env=e114.0
  fs              %187.1 = FrameState         R     0x55804f459ab0+492: [%174.3, %174.4, %87.2], env=e174.0, next=%187.0
  void                    Deopt              !v    %187.1, CallTarget@0x55804f22ab48[Call#11], %88.2   !
BB99   <- [186]
  void                    Nop                !     
  lgl$-           %99.1 = %186.3
  goto BB94
BB93   <- [186]
  val             %93.0 = ChkMissing         e     %88.0
  lgl$#-          %93.1 = IsType                   %88.0 isA val?-
  void                    Branch                   %93.1 -> BB190 (if true) | BB191 (if false)
BB94   <- [99, 190]
  lgl$-           %94.0 = Phi                      %190.4:BB190, %99.1:BB99
  lgl$-           %94.1 = %94.0
  lgl$#-          %94.2 = CheckTrueFalse     e     %94.1
  void                    Branch                   %94.2 -> BB98 (if true) | BB97 (if false)
BB190   <- [93]
  val?-           %190.0 = CastType           d     dn %88.0
  lgl-            %190.1 = Eq                 wed   %190.0, "...", elided   <val?_>
  lgl$-           %190.2 = AsLogical                %190.1
  lgl$-           %190.3 = LAnd                     %186.3, %190.2
  lgl$-           %190.4 = %190.3
  goto BB94
BB191   <- [93]
  fs              %191.0 = FrameState         R     0x55804e757760+540: [], env=e114.0
  prom-           %191.1 = MkArg                    %88.0, [0x55804fb54d20]_p49 (!refl), e174.0
  val?~           %191.2 = CastType                 up %191.1
  fs              %191.3 = FrameState         R     0x55804f459ab0+524: [%174.3, %174.4, %87.2], env=e174.0, next=%191.0
  env             e191.4 = (MkEnv)            l     x=%191.2, parent=R_BaseNamespace, context 0
  fs              %191.5 = FrameState         R     0x55804e7773a0+27: [%186.1], env=e191.4, next=%191.3
  void                    Deopt              !v    %191.5, Typecheck@0x55804f22ab48[Type#28], %88.0   !
BB98   <- [94]
  fs              %98.0 = FrameState         R     0x55804e757760+540: [], env=e114.0
  (cls|spec|blt)  %98.1 = LdFun              !v    $, e174.0
  fs              %98.2 = FrameState         R     0x55804f459ab0+630: [%174.3, %174.4, %87.2, %98.1], env=e174.0, next=%98.0
  void                    Deopt              !v    %98.2, DeadCall@0x55804f22ab48[Call#13], %98.1   !
BB97   <- [94]
  val?^ | miss    %97.0 = LdVar              eR    walkCode, e174.0
  lgl$#-          %97.1 = Identical                %97.0, function(e, w=makeCodeWalker()) <(rir::Dispatc|...
  void                    Branch                   %97.1 -> BB188 (if true) | BB189 (if false)
BB188   <- [97]
  prom-           %188.0 = MkArg                    unboundValue, [0x55804fb54d20]_p50 (!refl), e174.0
  prom-           %188.1 = MkArg                    unboundValue, [0x55804fb54d20]_p51, e174.0
  val?            %188.2 = StaticCall         !v    walkCode[0x55804f2faa00](%188.0, %188.1) e174.0
  int$-           %188.3 = %87.2
  goto BB87
BB189   <- [97]
  fs              %189.0 = FrameState         R     0x55804e757760+540: [], env=e114.0
  fs              %189.1 = FrameState         R     0x55804f459ab0+576: [%174.3, %174.4, %87.2, %94.1], env=e174.0, next=%189.0
  void                    Deopt              !v    %189.1, CallTarget@0x55804f22ab48[Call#12], %97.0   !
Prom 0:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     typeof, <0x55804e68e748>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, [0x55804fb54d20]_p1, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <str$->
  void                    Return             l     %0.3
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    e, e0.0
  val?            %0.2  = Force<lazy>        !v    %0.1, e0.0   <code->
  val?            %0.3  = Extract2_1D        !v    %0.2, 1, e0.0   <sym->
  void                    Visible            v     
  void                    Return             l     %0.3
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     c, <0x55804bee1940>, e0.0
  val?            %0.2  = Call               !     %0.1("symbol", "character") e0.0   <str->
  void                    Return             l     %0.2
Prom 3:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    w, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 4:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    isLocal, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 5:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fn, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 6:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    w, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 7:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    w, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 8:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    enterGlobal, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 9:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fn, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 10:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    e, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <code->
  void                    Return             l     %0.3
Prom 11:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    w, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 12:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    e, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <code->
  void                    Return             l     %0.3
Prom 13:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    w, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 14:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    w, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 15:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    enterLocal, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 16:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fn, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 17:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    e, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 18:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    w, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 19:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    x, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <(int|str)+>
  void                    Return             l     %0.3
Prom 20:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    table, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <val?->
  void                    Return             l     %0.3
Prom 22:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    v, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 23:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     findOwnerEnv, <0x55804e95cf28>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, [0x55804fb54d20]_p24, e0.0
  prom-           %0.3  = MkArg                    unboundValue, [0x55804fb54d20]_p25, e0.0
  prom-           %0.4  = MkArg                    unboundValue, [0x55804fb54d20]_p28, e0.0
  prom-           %0.5  = MkArg                    unboundValue, [0x55804fb54d20]_p31, e0.0
  val?            %0.6  = NamedCall          !     %0.1(%0.2, %0.3, stop=%0.4, default=%0.5) e0.0   <env+>
  void                    Return             l     %0.6
Prom 24:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    v, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 25:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     $, <0x55804bee0c10>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, [0x55804fb54d20]_p26, e0.0
  prom-           %0.3  = MkArg                    unboundValue, [0x55804fb54d20]_p27, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <env+>
  void                    Return             l     %0.4
Prom 26:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    w, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 27:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    env, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 28:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     $, <0x55804bee0c10>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, [0x55804fb54d20]_p29, e0.0
  prom-           %0.3  = MkArg                    unboundValue, [0x55804fb54d20]_p30, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <env->
  void                    Return             l     %0.4
Prom 29:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    w, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 30:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    globalenv, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 31:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    .BaseEnv, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 32:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     as.character, <0x55804beee040>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, [0x55804fb54d20]_p33, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <str$->
  void                    Return             l     %0.3
Prom 33:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    name, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <(sym|str)->
  void                    Return             l     %0.3
Prom 34:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    e, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <(lgl|env)+>
  void                    Return             l     %0.3
Prom 35:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    .BaseEnv, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 42:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    x, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 43:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    x, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <val?+>
  void                    Return             l     %0.3
Prom 44:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    e, e0.0
  val?            %0.2  = Force<lazy>        !v    %0.1, e0.0   <code->
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <true>
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  void                    Nop                !     
  real$#-         %2.1  = -1
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, [0x55804fb54d20]_p45, 
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  (real|prom)-    %3.0  = Phi                      %2.1:BB2, %4.1:BB4
  (real|prom)-    %3.1  = %3.0
  val?            %3.2  = Extract1_1D        !v    %0.2, %3.1, e0.0   <code->
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 45:
BB0
  void                    Visible            v     
  void                    Return             l     -1
Prom 46:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    a, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <(sym|code)->
  void                    Return             l     %0.3
Prom 47:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    a, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <(sym|code)->
  void                    Return             l     %0.3
Prom 48:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    w, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 49:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    a, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <val?->
  void                    Return             l     %0.3
Prom 50:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    a, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <val?->
  void                    Return             l     %0.3
Prom 51:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    w, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3

│ [0x55804fb54d20]                                                             │
└──────────────────────────────────────────────────────────────────────────────┘
