
┌──────────────────────────────────────────────────────────────────────────────┐
│ h[0x55804ea004e0]                                                            │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;NonRefl0,NonRefl1,!Obj0,!Obj1        │
│ Properties:                                                                  │
├────── Final PIR Version
h[0x55804ea004e0]
BB0
  val?^           %0.0  = LdArg                    1
  val?^           %0.1  = LdArg                    0
  env             e0.2  = MkEnv              l     e=%0.1, w=%0.0, parent=<env 0x55804e6f5fd8>, context 1
  (cls|spec|blt)  %0.3  = LdFun              !v    $, <0x55804bee0c10>, <env 0x55804e6f5fd8>
  prom-           %0.4  = MkArg                    unboundValue, h[0x55804ea004e0]_p0 (!refl), e0.2
  prom-           %0.5  = MkArg                    unboundValue, h[0x55804ea004e0]_p1, e0.2
  val?            %0.6  = Call               !v    %0.3(%0.4, %0.5) e0.2   <cls->
  (cls|spec|blt)  %0.7  = ChkFunction        e     %0.6
  prom-           %0.8  = MkArg                    unboundValue, h[0x55804ea004e0]_p2, e0.2
  prom-           %0.9  = MkArg                    unboundValue, h[0x55804ea004e0]_p4, e0.2
  prom-           %0.10 = MkArg                    unboundValue, h[0x55804ea004e0]_p5, e0.2
  lgl$#-          %0.11 = Identical                %0.7, function(type, n, e, w) <(rir::DispatchTable*)|...
  void                    Branch                   %0.11 -> BB97 (if true) | BB98 (if false)
BB97   <- [0]
  val?            %97.0 = StaticCall         !v    [0x55804e1ed040]("function", %0.8, %0.9, %0.10) e0.2
  val?^ | miss    %97.1 = LdVar              eR    getAssignedVar, e0.2
  lgl$#-          %97.2 = Identical                %97.1, function(e) <(rir::DispatchTable*)0x55804e1c05|...
  void                    Branch                   %97.2 -> BB99 (if true) | BB100 (if false)
BB98   <- [0]
  fs              %98.0 = FrameState         R     0x55804ecfa260+37: [%0.6], env=e0.2
  void                    Deopt              !v    %98.0, CallTarget@0x55804eaeb808[Call#1], %0.7   !
BB99   <- [97]
  prom-           %99.0 = MkArg                    unboundValue, h[0x55804ea004e0]_p6, e0.2
  ct              %99.1 = PushContext        lCL   %99.0, getAssignedVar(e), function(e) <(rir::DispatchTable*)0x55804e1c05|..., e0.2
  val?^           %99.2 = CastType                 up %99.0
  env             e99.3 = MkEnv              l     e=%99.2, parent=<env 0x55804e699488>, context 1
  val?            %99.4 = Force!<lazy>       !vL   %99.2, e99.3   <code->
  lgl$#-          %99.5 = IsType                   %99.4 isA val+   <true>
  lgl$#-          %99.6 = IsType                   %99.4 isA val?-
  void                    Branch                   %99.5 -> BB101 (if true) | BB102 (if false)
BB100   <- [97]
  fs              %100.0 = FrameState         R     0x55804ecfa260+85: [%97.0], env=e0.2
  void                    Deopt              !v    %100.0, CallTarget@0x55804eaeb808[Call#3], %97.1   !
BB101   <- [99]
  void                    Branch                   %99.6 -> BB103 (if true) | BB104 (if false)
BB102   <- [99]
  void                    Nop                !     
  lgl$#-          %102.1 = %99.5
  dr              %102.2 = DeadBranchReached@0x55804c64f618[Test#0]
  goto BB5
BB103   <- [101]
  val?-           %103.0 = CastType           d     dn %99.4   <code->
  val?            %103.1 = Extract2_1D        wed   %103.0, 2, elided   <sym->
  void                    StVar              lW    v, %103.1, e99.3
  lgl$-           %103.3 = Missing            eR    v, e99.3
  lgl$#-          %103.4 = CheckTrueFalse     e     %103.3
  void                    Branch                   %103.4 -> BB95 (if true) | BB9 (if false)
BB104   <- [101]
  void                    Nop                !     
  val?            %104.1 = %99.4
  dr              %104.2 = Typecheck@0x55804c64f618[Type#0]
  goto BB5
BB5   <- [102, 104]
  val?^ | miss    %5.0  = Phi                      %102.1:BB102, %104.1:BB104
  val?^ | miss    %5.1  = %5.0
  dr              %5.2  = Phi                      %102.2:BB102, %104.2:BB104
  dr              %5.3  = %5.2
  fs              %5.4  = FrameState         R     0x55804ecfa260+118: [], env=e0.2
  fs              %5.5  = FrameState         R     0x55804e7e9290+9: [%99.4], env=e99.3, next=%5.4
  void                    Deopt              !v    %5.5, %5.3, %5.1   !
BB95   <- [103]
  fs              %95.0 = FrameState         R     0x55804ecfa260+118: [], env=e0.2
  (cls|spec|blt)  %95.1 = LdFun              !v    stop0, <env 0x55804e699488>
  fs              %95.2 = FrameState         R     0x55804e7e9290+1085: [%95.1], env=e99.3, next=%95.0
  void                    Deopt              !v    %95.2, DeadCall@0x55804c64f618[Call#25], %95.1   !
BB9   <- [103]
  val?^ | miss    %9.0  = LdVar              eR    %in%, <env 0x55804e699488>
  lgl$#-          %9.1  = Identical                %9.0, function(x, table) <(rir::DispatchTable*)0x558|...
  void                    Branch                   %9.1 -> BB105 (if true) | BB106 (if false)
BB105   <- [9]
  prom-           %105.0 = MkArg                    unboundValue, h[0x55804ea004e0]_p25, e99.3
  prom-           %105.1 = MkArg                    unboundValue, h[0x55804ea004e0]_p27, e99.3
  val?            %105.2 = StaticCall         !v    %in%[0x55804f720b00](%105.0, %105.1) e99.3   <lgl$->
  lgl$#-          %105.3 = IsType                   %105.2 isA lgl$-
  void                    Branch                   %105.3 -> BB107 (if true) | BB108 (if false)
BB106   <- [9]
  fs              %106.0 = FrameState         R     0x55804ecfa260+118: [], env=e0.2
  fs              %106.1 = FrameState         R     0x55804e7e9290+67: [], env=e99.3, next=%106.0
  void                    Deopt              !v    %106.1, CallTarget@0x55804c64f618[Call#0], %9.0   !
BB107   <- [105]
  lgl$-           %107.0 = CastType           d     dn %105.2
  lgl$#-          %107.1 = CheckTrueFalse     e     %107.0
  void                    Branch                   %107.1 -> BB13 (if true) | BB12 (if false)
BB108   <- [105]
  void                    Nop                !     
  val?            %108.1 = %105.2
  dr              %108.2 = Typecheck@0x55804c64f618[Type#5]
  goto BB10
BB13   <- [107]
  val?^ | miss    %13.0 = LdVar              eR    as.character, e99.3
  lgl$#-          %13.1 = Identical                <blt as.character>, %13.0   <true>
  void                    Branch                   %13.1 -> BB109 (if true) | BB110 (if false)
BB12   <- [107]
  fs              %12.0 = FrameState         R     0x55804ecfa260+118: [], env=e0.2
  (cls|spec|blt)  %12.1 = LdFun              !v    typeof, e99.3
  fs              %12.2 = FrameState         R     0x55804e7e9290+132: [%12.1], env=e99.3, next=%12.0
  void                    Deopt              !v    %12.2, DeadCall@0x55804c64f618[Call#3], %12.1   !
BB10   <- [108, 110, 112]
  val?^ | miss    %10.0 = Phi                      %108.1:BB108, %110.1:BB110, %112.1:BB112
  val?^ | miss    %10.1 = %10.0
  dr              %10.2 = Phi                      %108.2:BB108, %110.2:BB110, %112.2:BB112
  dr              %10.3 = %10.2
  fs              %10.4 = FrameState         R     0x55804ecfa260+118: [], env=e0.2
  fs              %10.5 = FrameState         R     0x55804e7e9290+116: [%105.2], env=e99.3, next=%10.4
  void                    Deopt              !v    %10.5, %10.3, %10.1   !
BB109   <- [13]
  val?^ | miss    %109.0 = LdVar              eR    v, e99.3
  lgl$#-          %109.1 = IsType                   %109.0 isA val?~- | miss
  void                    Branch                   %109.1 -> BB111 (if true) | BB112 (if false)
BB110   <- [13]
  void                    Nop                !     
  lgl$#-          %110.1 = %13.1
  dr              %110.2 = DeadBranchReached@0x55804c64f618[Test#7]
  goto BB10
BB111   <- [109]
  val?~- | miss   %111.0 = CastType           d     dn %109.0
  val?-           %111.1 = Force!<value>            %111.0,    <sym->
  val+            %111.2 = CallSafeBuiltin    wed   as.character(%111.1)    <str$->
  val?            %111.3 = PopContext         C     %111.2, %99.1   <str$->
  void                    StVar              lW    v, %111.3, e0.2
  val?^ | miss    %111.5 = LdVar              eR    checkDotsAssignVar, e0.2
  lgl$#-          %111.6 = Identical                %111.5, function(v, w) <(rir::DispatchTable*)0x55804e2|...
  void                    Branch                   %111.6 -> BB113 (if true) | BB114 (if false)
BB112   <- [109]
  void                    Nop                !     
  val?^ | miss    %112.1 = %109.0
  dr              %112.2 = Typecheck@0x55804c64f618[Type#46]
  goto BB10
BB113   <- [111]
  prom-           %113.0 = MkArg                    unboundValue, h[0x55804ea004e0]_p7 (!refl), e0.2
  prom-           %113.1 = MkArg                    unboundValue, h[0x55804ea004e0]_p8, e0.2
  ct              %113.2 = PushContext        lCL   %113.0, %113.1, checkDotsAssignVar(v, w), function(v, w) <(rir::DispatchTable*)0x55804e2|..., e0.2
  val?^           %113.3 = CastType                 up %113.1
  val?^           %113.4 = CastType                 up %113.0
  lgl$#-          %113.5 = IsType                   %111.3 isA val?-
  void                    Branch                   %113.5 -> BB115 (if true) | BB116 (if false)
BB114   <- [111]
  fs              %114.0 = FrameState         R     0x55804ecfa260+132: [], env=e0.2
  void                    Deopt              !v    %114.0, CallTarget@0x55804eaeb808[Call#4], %111.5   !
BB115   <- [113]
  val?-           %115.0 = CastType           d     dn %111.3   <str$->
  lgl-            %115.1 = Eq                 wed   %115.0, "...", elided   <lgl$->
  lgl$#-          %115.2 = IsType                   %115.1 isA lgl$-
  void                    Branch                   %115.2 -> BB117 (if true) | BB118 (if false)
BB116   <- [113]
  fs              %116.0 = FrameState         R     0x55804ecfa260+169: [], env=e0.2
  env             e116.1 = (MkEnv)            l     v=%113.4, w=%113.3, parent=<env 0x55804e699488>, context 1
  fs              %116.2 = FrameState         R     0x55804e1317f0+9: [%111.3], env=e116.1, next=%116.0
  void                    Deopt              !v    %116.2, Typecheck@0x55804eaeb808[Type#9], %111.3   !
BB117   <- [115]
  lgl$-           %117.0 = CastType           d     dn %115.1
  lgl$#-          %117.1 = CheckTrueFalse     e     %117.0
  void                    Branch                   %117.1 -> BB94 (if true) | BB20 (if false)
BB118   <- [115]
  void                    Nop                !     
  lgl-            %118.1 = %115.1
  dr              %118.2 = Typecheck@0x55804eaeb5f8[Type#1]
  goto BB18
BB94   <- [117]
  env             e94.0 = (MkEnv)            l     v=%113.4, w=%113.3, parent=<env 0x55804e699488>, context 1
  (cls|spec|blt)  %94.1 = LdFun              !v    $, <env 0x55804e699488>
  fs              %94.2 = FrameState         R     0x55804ecfa260+169: [], env=e0.2
  fs              %94.3 = FrameState         R     0x55804e1317f0+178: [%94.1], env=e94.0, next=%94.2
  void                    Deopt              !v    %94.3, DeadCall@0x55804eaeb5f8[Call#4], %94.1   !
BB20   <- [117]
  val?^ | miss    %20.0 = LdVar              eR    isDDSym, <env 0x55804e699488>
  lgl$#-          %20.1 = Identical                %20.0, function(name) <(rir::DispatchTable*)0x55804e2|...
  void                    Branch                   %20.1 -> BB119 (if true) | BB120 (if false)
BB18   <- [118, 120]
  val?^ | miss    %18.0 = Phi                      %118.1:BB118, %120.1:BB120
  val?^ | miss    %18.1 = %18.0
  dr              %18.2 = Phi                      %118.2:BB118, %120.2:BB120
  dr              %18.3 = %18.2
  fs              %18.4 = FrameState         R     0x55804ecfa260+169: [], env=e0.2
  env             e18.5 = (MkEnv)            l     v=%113.4, w=%113.3, parent=<env 0x55804e699488>, context 1
  fs              %18.6 = FrameState         R     0x55804e1317f0+21: [%115.1], env=e18.5, next=%18.4
  void                    Deopt              !v    %18.6, %18.3, %18.1   !
BB119   <- [20]
  env             e119.0 = MkEnv              l     v=%113.4, w=%113.3, parent=<env 0x55804e699488>, context 1
  prom-           %119.1 = MkArg                    unboundValue, h[0x55804ea004e0]_p30, e119.0
  ct              %119.2 = PushContext        lCL   %119.1, isDDSym(v), function(name) <(rir::DispatchTable*)0x55804e2|..., e119.0
  val?^           %119.3 = CastType                 up %119.1
  val?^ | miss    %119.4 = LdVar              eR    is.symbol, <env 0x55804e699488>
  lgl$#-          %119.5 = Identical                <blt is.symbol>, %119.4   <true>
  void                    Branch                   %119.5 -> BB121 (if true) | BB122 (if false)
BB120   <- [20]
  void                    Nop                !     
  val?^ | miss    %120.1 = %20.0
  dr              %120.2 = CallTarget@0x55804eaeb5f8[Call#0]
  goto BB18
BB121   <- [119]
  env             e121.0 = MkEnv              l     name=%119.3, parent=<env 0x55804e699488>, context 1
  val?            %121.1 = Force!<lazy>       !vL   %119.3, e121.0   <(sym|str)->
  lgl$#-          %121.2 = CallSafeBuiltin    wed   is.symbol(%121.1)    <lgl$->
  void                    Branch                   %121.2 -> BB93 (if true) | BB25 (if false)
BB122   <- [119]
  fs              %122.0 = FrameState         R     0x55804ecfa260+169: [], env=e0.2
  fs              %122.1 = FrameState         R     0x55804e1317f0+64: [], env=e119.0, next=%122.0
  env             e122.2 = (MkEnv)            l     name=%119.3, parent=<env 0x55804e699488>, context 1
  fs              %122.3 = FrameState         R     0x55804ed96dd0+17: [<blt is.symbol>, %119.5], env=e122.2, next=%122.1
  void                    Deopt              !v    %122.3, DeadBranchReached@0x55804eaeb288[Test#0], %119.5   !
BB93   <- [121]
  void                    Nop                !     
  lgl$#-          %93.1 = %121.2
  goto BB26
BB25   <- [121]
  val?^ | miss    %25.0 = LdVar              eR    is.character, <env 0x55804e699488>
  lgl$#-          %25.1 = Identical                <blt is.character>, %25.0   <true>
  void                    Branch                   %25.1 -> BB129 (if true) | BB130 (if false)
BB26   <- [93, 129]
  lgl$-           %26.0 = Phi                      %129.2:BB129, %93.1:BB93
  lgl$-           %26.1 = %26.0
  lgl$-           %26.2 = AsLogical                %26.1
  lgl$#-          %26.3 = Identical                %26.2, false
  void                    Branch                   %26.3 -> BB92 (if true) | BB29 (if false)
BB129   <- [25]
  lgl$#-          %129.0 = CallSafeBuiltin    wed   is.character(%121.1)    <lgl$->
  lgl$-           %129.1 = LOr                      %121.2, %129.0
  lgl$-           %129.2 = %129.1
  goto BB26
BB130   <- [25]
  fs              %130.0 = FrameState         R     0x55804ecfa260+169: [], env=e0.2
  fs              %130.1 = FrameState         R     0x55804e1317f0+64: [], env=e119.0, next=%130.0
  fs              %130.2 = FrameState         R     0x55804ed96dd0+91: [%121.2], env=e121.0, next=%130.1
  void                    Deopt              !v    %130.2, DeadBranchReached@0x55804eaeb288[Test#1], %25.1   !
BB92   <- [26]
  void                    Nop                !     
  lgl$-           %92.1 = %26.2
  goto BB55
BB29   <- [26]
  val?^ | miss    %29.0 = LdVar              eR    length, <env 0x55804e699488>
  lgl$#-          %29.1 = Identical                <blt length>, %29.0   <true>
  void                    Branch                   %29.1 -> BB123 (if true) | BB124 (if false)
BB55   <- [92, 153]
  lgl$-           %55.0 = Phi                      %153.4:BB153, %92.1:BB92
  lgl$-           %55.1 = %55.0
  val?            %55.2 = PopContext         C     %55.1, %119.2   <lgl$->
  lgl$#-          %55.3 = IsType                   %55.2 isA lgl$-
  void                    Branch                   %55.3 -> BB127 (if true) | BB128 (if false)
BB123   <- [29]
  val?^ | miss    %123.0 = LdVar              eR    grep, <env 0x55804e699488>
  lgl$#-          %123.1 = Identical                %123.0, function(pattern, x, ignore.case=FALSE, perl=F|...
  void                    Branch                   %123.1 -> BB125 (if true) | BB126 (if false)
BB124   <- [29]
  void                    Nop                !     
  lgl$#-          %124.1 = %29.1
  dr              %124.2 = DeadBranchReached@0x55804eaeb288[Test#2]
  goto BB27
BB127   <- [55]
  lgl$-           %127.0 = CastType           d     dn %55.2
  lgl$#-          %127.1 = CheckTrueFalse     e     %127.0
  void                    Branch                   %127.1 -> BB87 (if true) | BB58 (if false)
BB128   <- [55]
  fs              %128.0 = FrameState         R     0x55804ecfa260+169: [], env=e0.2
  fs              %128.1 = FrameState         R     0x55804e1317f0+64: [%55.2], env=e119.0, next=%128.0
  void                    Deopt              !v    %128.1, Typecheck@0x55804eaeb5f8[Type#3], %55.2   !
BB125   <- [123]
  prom-           %125.0 = MkArg                    unboundValue, h[0x55804ea004e0]_p31, e121.0
  ct              %125.1 = PushContext        lCL   "^\.\.[[:digit:]]+$", %125.0, grep("^\.\.[[:digit:]]+$", as.character(name)), function(pattern, x, ignore.case=FALSE, perl=F|..., e121.0
  val?^           %125.2 = CastType                 up %125.0
  env             e125.3 = MkEnv              l     pattern="^\.\.[[:digit:]]+$", x=%125.2, ignore.case(miss)=false, perl(miss)=false, value(miss)=false, fixed(miss)=false, useBytes(miss)=false, invert(miss)=false, parent=R_BaseNamespace, context 1
  prom-           %125.4 = MkArg                    unboundValue, h[0x55804ea004e0]_p33, e125.3
  ct              %125.5 = PushContext        lCL   %125.4, is.factor(x), function(x) <(rir::DispatchTable*)0x55804e0cdd|..., e125.3
  val?^           %125.6 = CastType                 up %125.4
  env             e125.7 = MkEnv              l     x=%125.6, parent=R_BaseNamespace, context 1
  prom-           %125.8 = MkArg                    unboundValue, h[0x55804ea004e0]_p34, e125.7
  ct              %125.9 = PushContext        lCL   %125.8, "factor", inherits(x, "factor"), function(x, what, which=FALSE) <(rir::Dispatch|..., e125.7
  val?^           %125.10 = CastType                 up %125.8
  env             e125.11 = MkEnv              l     x=%125.10, what="factor", which(miss)=false, parent=R_BaseNamespace, context 1
  val?            %125.12 = Force!<lazy>       !vr   %125.10,    <val?>
  val?            %125.13 = CallBuiltin        !v    inherits(%125.12, "factor", false) e125.11
  val?            %125.14 = PopContext         C     %125.13, %125.9   <lgl$->
  lgl$#-          %125.15 = IsType                   %125.14 isA lgl$-
  void                    Branch                   %125.15 -> BB131 (if true) | BB132 (if false)
BB126   <- [123]
  void                    Nop                !     
  val?^ | miss    %126.1 = %123.0
  dr              %126.2 = CallTarget@0x55804eaeb288[Call#5]
  goto BB27
BB27   <- [124, 126]
  val?^ | miss    %27.0 = Phi                      %124.1:BB124, %126.1:BB126
  val?^ | miss    %27.1 = %27.0
  dr              %27.2 = Phi                      %124.2:BB124, %126.2:BB126
  dr              %27.3 = %27.2
  fs              %27.4 = FrameState         R     0x55804ecfa260+169: [], env=e0.2
  fs              %27.5 = FrameState         R     0x55804e1317f0+64: [], env=e119.0, next=%27.4
  fs              %27.6 = FrameState         R     0x55804ed96dd0+201: [%26.1], env=e121.0, next=%27.5
  void                    Deopt              !v    %27.6, %27.3, %27.1   !
BB87   <- [127]
  fs              %87.0 = FrameState         R     0x55804ecfa260+169: [], env=e0.2
  (cls|spec|blt)  %87.1 = LdFun              !v    $, e119.0
  fs              %87.2 = FrameState         R     0x55804e1317f0+91: [%87.1], env=e119.0, next=%87.0
  void                    Deopt              !v    %87.2, DeadCall@0x55804eaeb5f8[Call#1], %87.1   !
BB58   <- [127]
  void                    Visible            v     
  val?            %58.1 = PopContext         C     true, %113.2
  (cls|spec|blt)  %58.2 = LdFun              !     $, <0x55804bee0c10>, e0.2
  prom-           %58.3 = MkArg                    unboundValue, h[0x55804ea004e0]_p9, e0.2
  prom-           %58.4 = MkArg                    unboundValue, h[0x55804ea004e0]_p10, e0.2
  val?            %58.5 = Call               !     %58.2(%58.3, %58.4) e0.2   <cls->
  (cls|spec|blt)  %58.6 = ChkFunction        e     %58.5
  prom-           %58.7 = MkArg                    unboundValue, h[0x55804ea004e0]_p11, e0.2
  prom-           %58.8 = MkArg                    unboundValue, h[0x55804ea004e0]_p12, e0.2
  prom-           %58.9 = MkArg                    unboundValue, h[0x55804ea004e0]_p13, e0.2
  lgl$#-          %58.10 = Identical                %58.6, function(type, n, e, w) <(rir::DispatchTable*)|...
  void                    Branch                   %58.10 -> BB133 (if true) | BB134 (if false)
BB131   <- [125]
  lgl$-           %131.0 = CastType           d     dn %125.14
  val?            %131.1 = PopContext         C     %131.0, %125.5   <lgl$->
  lgl$#-          %131.2 = IsType                   %131.1 isA lgl$-
  void                    Branch                   %131.2 -> BB135 (if true) | BB136 (if false)
BB132   <- [125]
  fs              %132.0 = FrameState         R     0x55804ecfa260+169: [], env=e0.2
  fs              %132.1 = FrameState         R     0x55804e1317f0+64: [], env=e119.0, next=%132.0
  fs              %132.2 = FrameState         R     0x55804ed96dd0+306: [%26.2, <blt length>], env=e121.0, next=%132.1
  fs              %132.3 = FrameState         R     0x55804e0bd5b0+137: [], env=e125.3, next=%132.2
  fs              %132.4 = FrameState         R     0x55804e24e050+37: [%125.14], env=e125.7, next=%132.3
  void                    Deopt              !v    %132.4, Typecheck@0x55804d2fed88[Type#1], %125.14   !
BB133   <- [58]
  val?            %133.0 = StaticCall         !     [0x55804f2a42c0]("<-", %58.7, %58.8, %58.9) e0.2
  val?^ | miss    %133.1 = LdVar              eR    isSimpleFunDef, e0.2
  lgl$#-          %133.2 = Identical                %133.1, function(e, w) <(rir::DispatchTable*)0x55804e1|...
  void                    Branch                   %133.2 -> BB139 (if true) | BB140 (if false)
BB134   <- [58]
  fs              %134.0 = FrameState         R     0x55804ecfa260+207: [%58.5], env=e0.2
  void                    Deopt              !v    %134.0, CallTarget@0x55804eaeb808[Call#6], %58.6   !
BB135   <- [131]
  lgl$-           %135.0 = CastType           d     dn %131.1
  lgl$-           %135.1 = AsLogical                %135.0
  lgl$#-          %135.2 = Identical                %135.1, false
  lgl$-           %135.3 = AsLogical                %135.1
  lgl$#-          %135.4 = Identical                %135.3, false
  void                    Branch                   %135.2 -> BB37 (if true) | BB34 (if false)
BB136   <- [131]
  fs              %136.0 = FrameState         R     0x55804ecfa260+169: [], env=e0.2
  fs              %136.1 = FrameState         R     0x55804e1317f0+64: [], env=e119.0, next=%136.0
  fs              %136.2 = FrameState         R     0x55804ed96dd0+306: [%26.2, <blt length>], env=e121.0, next=%136.1
  fs              %136.3 = FrameState         R     0x55804e0bd5b0+137: [%131.1], env=e125.3, next=%136.2
  void                    Deopt              !v    %136.3, Typecheck@0x55804e11a880[Type#4], %131.1   !
BB139   <- [133]
  prom-           %139.0 = MkArg                    unboundValue, h[0x55804ea004e0]_p14, e0.2
  prom-           %139.1 = MkArg                    unboundValue, h[0x55804ea004e0]_p15, e0.2
  val?            %139.2 = StaticCall         !     isSimpleFunDef[0x55804f08e900](%139.0, %139.1) e0.2   <lgl$->
  lgl$#-          %139.3 = IsType                   %139.2 isA lgl$-
  void                    Branch                   %139.3 -> BB145 (if true) | BB146 (if false)
BB140   <- [133]
  fs              %140.0 = FrameState         R     0x55804ecfa260+255: [%133.0], env=e0.2
  void                    Deopt              !v    %140.0, CallTarget@0x55804eaeb808[Call#7], %133.1   !
BB37   <- [135]
  void                    Branch                   %135.4 -> BB91 (if true) | BB38 (if false)
BB34   <- [135]
  val?^ | miss    %34.0 = LdVar              eR    length, e125.3
  lgl$#-          %34.1 = Identical                <blt length>, %34.0   <@?>
  void                    Branch                   %34.1 -> BB36 (if true) | BB35 (if false)
BB145   <- [139]
  lgl$-           %145.0 = CastType           d     dn %139.2
  lgl$#-          %145.1 = CheckTrueFalse     e     %145.0
  void                    Branch                   %145.1 -> BB86 (if true) | BB65 (if false)
BB146   <- [139]
  void                    Nop                !     
  val?            %146.1 = %139.2
  dr              %146.2 = Typecheck@0x55804eaeb808[Type#20]
  goto BB63
BB91   <- [37]
  void                    Nop                !     
  lgl$-           %91.1 = %135.3
  goto BB45
BB38   <- [37]
  val?^ | miss    %38.0 = LdVar              eR    is.na, e125.3
  lgl$#-          %38.1 = Identical                <blt is.na>, %38.0   <@?>
  void                    Branch                   %38.1 -> BB40 (if true) | BB39 (if false)
BB36   <- [34]
  fs              %36.0 = FrameState         R     0x55804ecfa260+169: [], env=e0.2
  fs              %36.1 = FrameState         R     0x55804e1317f0+64: [], env=e119.0, next=%36.0
  fs              %36.2 = FrameState         R     0x55804ed96dd0+306: [%26.2, <blt length>], env=e121.0, next=%36.1
  (cls|spec|blt)  %36.3 = LdFun              !v    levels, e125.3
  fs              %36.4 = FrameState         R     0x55804e0bd5b0+214: [%135.1, <blt length>, %36.3], env=e125.3, next=%36.2
  void                    Deopt              !v    %36.4, DeadCall@0x55804e11a880[Call#4], %36.3   !
BB35   <- [34]
  fs              %35.0 = FrameState         R     0x55804ecfa260+169: [], env=e0.2
  fs              %35.1 = FrameState         R     0x55804e1317f0+64: [], env=e119.0, next=%35.0
  fs              %35.2 = FrameState         R     0x55804ed96dd0+306: [%26.2, <blt length>], env=e121.0, next=%35.1
  (cls|spec|blt)  %35.3 = LdFun              !v    length, e125.3
  fs              %35.4 = FrameState         R     0x55804e0bd5b0+177: [%135.1, %35.3], env=e125.3, next=%35.2
  void                    Deopt              !v    %35.4, DeadCall@0x55804e11a880[Call#2], %35.3   !
BB86   <- [145]
  val?^ | miss    %86.0 = LdVar              eR    collectUsageFun, e0.2
  lgl$#-          %86.1 = Identical                %86.0, function(name, formals, body, w) <(rir::Dispat|...
  void                    Branch                   %86.1 -> BB149 (if true) | BB150 (if false)
BB65   <- [145]
  val?^ | miss    %65.0 = LdVar              eR    isClosureFunDef, e0.2
  lgl$#-          %65.1 = Identical                %65.0, function(e, w) <(rir::DispatchTable*)0x55804e1|...
  void                    Branch                   %65.1 -> BB151 (if true) | BB152 (if false)
BB63   <- [146, 150, 152, 156]
  val?^ | miss    %63.0 = Phi                      %146.1:BB146, %150.1:BB150, %152.1:BB152, %156.1:BB156
  val?^ | miss    %63.1 = %63.0
  dr              %63.2 = Phi                      %146.2:BB146, %150.2:BB150, %152.2:BB152, %156.2:BB156
  dr              %63.3 = %63.2
  fs              %63.4 = FrameState         R     0x55804ecfa260+293: [%139.2], env=e0.2
  void                    Deopt              !v    %63.4, %63.3, %63.1   !
BB45   <- [91, 143]
  lgl$-           %45.0 = Phi                      %143.5:BB143, %91.1:BB91
  lgl$-           %45.1 = %45.0
  lgl$#-          %45.2 = CheckTrueFalse     e     %45.1
  void                    Branch                   %45.2 -> BB88 (if true) | BB48 (if false)
BB40   <- [38]
  val?^ | miss    %40.0 = LdVar              eR    pattern, e125.3
  val?            %40.1 = Force!             !v    %40.0, e125.3   <val?_>
  lgl$#-          %40.2 = IsType                   %40.1 isA val?+
  void                    Branch                   %40.2 -> BB137 (if true) | BB138 (if false)
BB39   <- [38]
  fs              %39.0 = FrameState         R     0x55804ecfa260+169: [], env=e0.2
  fs              %39.1 = FrameState         R     0x55804e1317f0+64: [], env=e119.0, next=%39.0
  fs              %39.2 = FrameState         R     0x55804ed96dd0+306: [%26.2, <blt length>], env=e121.0, next=%39.1
  (cls|spec|blt)  %39.3 = LdFun              !v    is.na, e125.3
  fs              %39.4 = FrameState         R     0x55804e0bd5b0+418: [%135.3, %39.3], env=e125.3, next=%39.2
  void                    Deopt              !v    %39.4, DeadCall@0x55804e11a880[Call#6], %39.3   !
BB149   <- [86]
  prom-           %149.0 = MkArg                    unboundValue, h[0x55804ea004e0]_p21, e0.2
  prom-           %149.1 = MkArg                    unboundValue, h[0x55804ea004e0]_p22, e0.2
  prom-           %149.2 = MkArg                    unboundValue, h[0x55804ea004e0]_p23, e0.2
  prom-           %149.3 = MkArg                    unboundValue, h[0x55804ea004e0]_p24, e0.2
  val?            %149.4 = StaticCall         !     collectUsageFun[0x55804ee10b70](%149.0, %149.1, %149.2, %149.3) e0.2   <nil->
  val?            %149.5 = %149.4
  goto BB80
BB150   <- [86]
  void                    Nop                !     
  val?^ | miss    %150.1 = %86.0
  dr              %150.2 = CallTarget@0x55804eaeb808[Call#23]
  goto BB63
BB151   <- [65]
  prom-           %151.0 = MkArg                    unboundValue, h[0x55804ea004e0]_p16, e0.2
  prom-           %151.1 = MkArg                    unboundValue, h[0x55804ea004e0]_p17, e0.2
  val?^           %151.2 = CastType                 up %151.1
  val?^           %151.3 = CastType                 up %151.0
  val?^ | miss    %151.4 = LdVar              eR    typeof, <env 0x55804e699488>
  lgl$#-          %151.5 = Identical                %151.4, function(x) <(rir::DispatchTable*)0x55804e1c3c|...
  void                    Branch                   %151.5 -> BB155 (if true) | BB156 (if false)
BB152   <- [65]
  void                    Nop                !     
  val?^ | miss    %152.1 = %65.0
  dr              %152.2 = CallTarget@0x55804eaeb808[Call#8]
  goto BB63
BB88   <- [45]
  val?^ | miss    %88.0 = LdVar              eR    is.character, e125.3
  lgl$#-          %88.1 = Identical                <blt is.character>, %88.0   <@?>
  void                    Branch                   %88.1 -> BB90 (if true) | BB89 (if false)
BB48   <- [45]
  val?^ | miss    %48.0 = LdVar              eR    is.character, e125.3
  lgl$#-          %48.1 = Identical                <blt is.character>, %48.0   <true>
  void                    Branch                   %48.1 -> BB141 (if true) | BB142 (if false)
BB137   <- [40]
  val?+           %137.0 = CastType           d     dn %40.1   <val?_>
  val?            %137.1 = Extract1_1D        wed   %137.0, 1L, elided   <val?_>
  lgl$#-          %137.2 = IsType                   %137.1 isA val?+
  void                    Branch                   %137.2 -> BB143 (if true) | BB144 (if false)
BB138   <- [40]
  fs              %138.0 = FrameState         R     0x55804ecfa260+169: [], env=e0.2
  fs              %138.1 = FrameState         R     0x55804e1317f0+64: [], env=e119.0, next=%138.0
  fs              %138.2 = FrameState         R     0x55804ed96dd0+306: [%26.2, <blt length>], env=e121.0, next=%138.1
  fs              %138.3 = FrameState         R     0x55804e0bd5b0+459: [%135.3, <blt is.na>, %40.1], env=e125.3, next=%138.2
  void                    Deopt              !v    %138.3, Typecheck@0x55804e11a880[Type#16], %40.1   !
BB80   <- [149, 169]
  val?            %80.0 = Phi                      %169.3:BB169, %149.5:BB149
  val?            %80.1 = %80.0
  void                    Return             l     %80.1
BB155   <- [151]
  env             e155.0 = MkEnv              l     e=%151.3, w=%151.2, parent=<env 0x55804e699488>, context 0
  prom-           %155.1 = MkArg                    unboundValue, h[0x55804ea004e0]_p28, e155.0
  val?^           %155.2 = CastType                 up %155.1
  val?^ | miss    %155.3 = LdVar              eR    e, e0.2
  env             e155.4 = (MkEnv)            l     x=%155.2, parent=R_BaseNamespace, context -1
  val?            %155.5 = Force!<wrapped>    !vL   %155.3, e155.4   <code->
  prom-           %155.6 = MkArg                    %155.5, h[0x55804ea004e0]_p16 (!refl), e0.2
  val?~           %155.7 = CastType                 up %155.6
  void                    StArg              lW    e, %155.7, e155.0
  lgl$#-          %155.9 = IsType                   %155.5 isA val?-
  lgl$#-          %155.10 = IsEnvStub          R     , e155.4
  void                    Branch                   %155.10 -> BB157 (if true) | BB158 (if false)
BB156   <- [151]
  void                    Nop                !     
  val?^ | miss    %156.1 = %151.4
  dr              %156.2 = CallTarget@0x55804f22c098[Call#0]
  goto BB63
BB90   <- [88]
  fs              %90.0 = FrameState         R     0x55804ecfa260+169: [], env=e0.2
  fs              %90.1 = FrameState         R     0x55804e1317f0+64: [], env=e119.0, next=%90.0
  fs              %90.2 = FrameState         R     0x55804ed96dd0+306: [%26.2, <blt length>], env=e121.0, next=%90.1
  (cls|spec|blt)  %90.3 = LdFun              !v    suppressWarnings, e125.3
  fs              %90.4 = FrameState         R     0x55804e0bd5b0+901: [<blt is.character>, %90.3], env=e125.3, next=%90.2
  void                    Deopt              !v    %90.4, DeadCall@0x55804e11a880[Call#14], %90.3   !
BB89   <- [88]
  fs              %89.0 = FrameState         R     0x55804ecfa260+169: [], env=e0.2
  fs              %89.1 = FrameState         R     0x55804e1317f0+64: [], env=e119.0, next=%89.0
  fs              %89.2 = FrameState         R     0x55804ed96dd0+306: [%26.2, <blt length>], env=e121.0, next=%89.1
  (cls|spec|blt)  %89.3 = LdFun              !v    is.character, e125.3
  fs              %89.4 = FrameState         R     0x55804e0bd5b0+864: [%89.3], env=e125.3, next=%89.2
  void                    Deopt              !v    %89.4, DeadCall@0x55804e11a880[Call#11], %89.3   !
BB141   <- [48]
  val?^ | miss    %141.0 = LdVar              eR    x, e125.3
  val?            %141.1 = Force!<wrapped>    !v    %141.0, e125.3   <str->
  lgl$#-          %141.2 = CallSafeBuiltin    wed   is.character(%141.1)    <lgl$->
  void                    Branch                   %141.2 -> BB50 (if true) | BB49 (if false)
BB142   <- [48]
  fs              %142.0 = FrameState         R     0x55804ecfa260+169: [], env=e0.2
  fs              %142.1 = FrameState         R     0x55804e1317f0+64: [], env=e119.0, next=%142.0
  fs              %142.2 = FrameState         R     0x55804ed96dd0+306: [%26.2, <blt length>], env=e121.0, next=%142.1
  fs              %142.3 = FrameState         R     0x55804e0bd5b0+533: [%45.1], env=e125.3, next=%142.2
  void                    Deopt              !v    %142.3, DeadBranchReached@0x55804e11a880[Test#6], %48.1   !
BB143   <- [137]
  val?+           %143.0 = CastType           d     dn %137.1   <val?_>
  lgl+            %143.1 = CallSafeBuiltin    wed   is.na(%143.0)    <val?_>
  lgl             %143.2 = Not                wed   %143.1, elided
  lgl$-           %143.3 = AsLogical          e     %143.2
  lgl$-           %143.4 = LAnd                     %135.3, %143.3
  lgl$-           %143.5 = %143.4
  goto BB45
BB144   <- [137]
  fs              %144.0 = FrameState         R     0x55804ecfa260+169: [], env=e0.2
  fs              %144.1 = FrameState         R     0x55804e1317f0+64: [], env=e119.0, next=%144.0
  fs              %144.2 = FrameState         R     0x55804ed96dd0+306: [%26.2, <blt length>], env=e121.0, next=%144.1
  fs              %144.3 = FrameState         R     0x55804e0bd5b0+502: [%135.3, <blt is.na>, %137.1], env=e125.3, next=%144.2
  void                    Deopt              !v    %144.3, Typecheck@0x55804e11a880[Type#17], %137.1   !
BB157   <- [155]
  void                    Branch                   %155.9 -> BB159 (if true) | BB160 (if false)
BB158   <- [155]
  void                    Nop                !     
  env             e158.1 = e155.4
  dr              %158.2 = EnvStubMaterialized@0x55804d175bf8[Call#unknown]
  goto BB66
BB50   <- [141]
  val?^ | miss    %50.0 = LdVar              eR    pattern, e125.3
  val?            %50.1 = Force!<value>      !v    %50.0, e125.3   <str$->
  val?^ | miss    %50.2 = LdVar              eR    x, e125.3
  val?            %50.3 = Force!<wrapped>    !v    %50.2, e125.3   <str->
  val?^ | miss    %50.4 = LdVar              eR    ignore.case, e125.3
  val?            %50.5 = Force!<lazy>       !v    %50.4, e125.3   <lgl$->
  val?^ | miss    %50.6 = LdVar              eR    value, e125.3
  val?            %50.7 = Force!<lazy>       !v    %50.6, e125.3   <lgl$->
  val?^ | miss    %50.8 = LdVar              eR    perl, e125.3
  val?            %50.9 = Force!<lazy>       !v    %50.8, e125.3   <lgl$->
  val?^ | miss    %50.10 = LdVar              eR    fixed, e125.3
  val?            %50.11 = Force!<lazy>       !v    %50.10, e125.3   <lgl$->
  val?^ | miss    %50.12 = LdVar              eR    useBytes, e125.3
  val?            %50.13 = Force!<lazy>       !v    %50.12, e125.3   <lgl$->
  val?^ | miss    %50.14 = LdVar              eR    invert, e125.3
  val?            %50.15 = Force!<lazy>       !v    %50.14, e125.3   <lgl$->
  val?            %50.16 = CallBuiltin        !v    grep(%50.1, %50.3, %50.5, %50.7, %50.9, %50.11, %50.13, %50.15) e125.3
  val?            %50.17 = PopContext         C     %50.16, %125.1   <int->
  lgl$#-          %50.18 = IsType                   %50.17 isA int-
  void                    Branch                   %50.18 -> BB147 (if true) | BB148 (if false)
BB49   <- [141]
  fs              %49.0 = FrameState         R     0x55804ecfa260+169: [], env=e0.2
  fs              %49.1 = FrameState         R     0x55804e1317f0+64: [], env=e119.0, next=%49.0
  fs              %49.2 = FrameState         R     0x55804ed96dd0+306: [%26.2, <blt length>], env=e121.0, next=%49.1
  (cls|spec|blt)  %49.3 = LdFun              !v    structure, e125.3
  fs              %49.4 = FrameState         R     0x55804e0bd5b0+652: [%49.3], env=e125.3, next=%49.2
  void                    Deopt              !v    %49.4, DeadCall@0x55804e11a880[Call#8], %49.3   !
BB159   <- [157]
  val?-           %159.0 = CastType           d     dn %155.5   <code->
  val?            %159.1 = Extract2_1D        wed   %159.0, 2, elided   <sym->
  prom-           %159.2 = MkArg                    %159.1, h[0x55804ea004e0]_p28 (!refl), e155.0
  val?~           %159.3 = CastType                 up %159.2
  void                    StArg              lWd   x, %159.3, e155.4
  str$-           %159.5 = CallSafeBuiltin    wed   typeof(%159.1)    <str$->
  lgl$-           %159.6 = Neq                d     %159.5, "language", elided   <lgl$->
  lgl$-           %159.7 = AsLogical                %159.6
  lgl$#-          %159.8 = Identical                %159.7, false
  void                    Branch                   %159.8 -> BB85 (if true) | BB70 (if false)
BB160   <- [157]
  void                    Nop                !     
  val?            %160.1 = %155.5
  dr              %160.2 = Typecheck@0x55804f22c098[Type#0]
  goto BB66
BB66   <- [158, 160]
  val?^ | miss    %66.0 = Phi                      e158.1:BB158, %160.1:BB160
  val?^ | miss    %66.1 = %66.0
  dr              %66.2 = Phi                      %158.2:BB158, %160.2:BB160
  dr              %66.3 = %66.2
  fs              %66.4 = FrameState         R     0x55804ecfa260+341: [], env=e0.2
  fs              %66.5 = FrameState         R     0x55804e22aca0+32: [], env=e155.0, next=%66.4
  fs              %66.6 = FrameState         R     0x55804e7773a0+9: [], env=e155.4, next=%66.5
  fs              %66.7 = FrameState         R     0x55804e56ad10+5(pr): [%155.5], env=e155.0, next=%66.6
  void                    Deopt              !v    %66.7, %66.3, %66.1   !
BB147   <- [50]
  int-            %147.0 = CastType           d     dn %50.17
  (int|real)$-    %147.1 = CallSafeBuiltin    wed   length(%147.0)    <int$->
  lgl$#-          %147.2 = IsType                   %147.1 isA int$-
  void                    Branch                   %147.2 -> BB153 (if true) | BB154 (if false)
BB148   <- [50]
  fs              %148.0 = FrameState         R     0x55804ecfa260+169: [], env=e0.2
  fs              %148.1 = FrameState         R     0x55804e1317f0+64: [], env=e119.0, next=%148.0
  fs              %148.2 = FrameState         R     0x55804ed96dd0+306: [%26.2, <blt length>, %50.17], env=e121.0, next=%148.1
  void                    Deopt              !v    %148.2, Typecheck@0x55804eaeb288[Type#11], %50.17   !
BB85   <- [159]
  void                    Nop                !     
  lgl$-           %85.1 = %159.7
  goto BB71
BB70   <- [159]
  val?^ | miss    %70.0 = LdVar              eR    typeof, <env 0x55804e699488>
  lgl$#-          %70.1 = Identical                %70.0, function(x) <(rir::DispatchTable*)0x55804e1c3c|...
  void                    Branch                   %70.1 -> BB161 (if true) | BB162 (if false)
BB153   <- [147]
  int$-           %153.0 = CastType           d     dn %147.1
  lgl$-           %153.1 = Neq                d     %153.0, 0, elided   <lgl$->
  lgl$-           %153.2 = AsLogical                %153.1
  lgl$-           %153.3 = LAnd                     %26.2, %153.2
  lgl$-           %153.4 = %153.3
  goto BB55
BB154   <- [147]
  fs              %154.0 = FrameState         R     0x55804ecfa260+169: [], env=e0.2
  fs              %154.1 = FrameState         R     0x55804e1317f0+64: [], env=e119.0, next=%154.0
  fs              %154.2 = FrameState         R     0x55804ed96dd0+328: [%26.2, %147.1], env=e121.0, next=%154.1
  void                    Deopt              !v    %154.2, Typecheck@0x55804eaeb288[Type#12], %147.1   !
BB71   <- [85, 161]
  lgl$-           %71.0 = Phi                      %161.5:BB161, %85.1:BB85
  lgl$-           %71.1 = %71.0
  lgl$#-          %71.2 = CheckTrueFalse     e     %71.1
  void                    Branch                   %71.2 -> BB82 (if true) | BB74 (if false)
BB161   <- [70]
  val?            %161.0 = Extract2_1D        wed   %159.0, 3, elided   <code->
  str$-           %161.1 = CallSafeBuiltin    wed   typeof(%161.0)    <str$->
  lgl$-           %161.2 = Eq                 d     %161.1, "closure", elided   <lgl$->
  lgl$-           %161.3 = AsLogical                %161.2
  lgl$-           %161.4 = LAnd                     %159.7, %161.3
  lgl$-           %161.5 = %161.4
  goto BB71
BB162   <- [70]
  fs              %162.0 = FrameState         R     0x55804ecfa260+341: [], env=e0.2
  fs              %162.1 = FrameState         R     0x55804e22aca0+32: [], env=e155.0, next=%162.0
  fs              %162.2 = FrameState         R     0x55804e7773a0+27: [%159.5], env=e155.4, next=%162.1
  void                    Deopt              !v    %162.2, CallTarget@0x55804f22c098[Call#1], %70.0   !
BB82   <- [71]
  val?^ | miss    %82.0 = LdVar              eR    e, e0.2
  val?            %82.1 = Force!             !v    %82.0, e0.2   <val?_>
  lgl$#-          %82.2 = IsType                   %82.1 isA val?+
  void                    Branch                   %82.2 -> BB163 (if true) | BB164 (if false)
BB74   <- [71]
  val?^ | miss    %74.0 = LdVar              eR    typeof, e0.2
  lgl$#-          %74.1 = Identical                %74.0, function(x) <(rir::DispatchTable*)0x55804e1c3c|...
  void                    Branch                   %74.1 -> BB165 (if true) | BB166 (if false)
BB163   <- [82]
  val?+           %163.0 = CastType           d     dn %82.1   <val?_>
  val?            %163.1 = Extract2_1D        wed   %163.0, 3, elided   <val?_>
  void                    StVar              lW    fun, %163.1, e0.2
  (cls|spec|blt)  %163.3 = LdFun              !v    <-, e0.2
  fs              %163.4 = FrameState         R     0x55804ecfa260+805: [%163.3], env=e0.2
  void                    Deopt              !v    %163.4, DeadCall@0x55804eaeb808[Call#14], %163.3   !
BB164   <- [82]
  fs              %164.0 = FrameState         R     0x55804ecfa260+742: [%82.1], env=e0.2
  void                    Deopt              !v    %164.0, Typecheck@0x55804eaeb808[Type#41], %82.1   !
BB165   <- [74]
  val?^ | miss    %165.0 = LdVar              eR    e, e0.2
  val?            %165.1 = Force!<wrapped>    !v    %165.0, e0.2   <code->
  lgl$#-          %165.2 = IsType                   %165.1 isA val?-
  void                    Branch                   %165.2 -> BB167 (if true) | BB168 (if false)
BB166   <- [74]
  fs              %166.0 = FrameState         R     0x55804ecfa260+341: [], env=e0.2
  fs              %166.1 = FrameState         R     0x55804e22aca0+107: [%71.1], env=e155.0, next=%166.0
  void                    Deopt              !v    %166.1, CallTarget@0x55804eaeb808[Call#9], %74.0   !
BB167   <- [165]
  val?-           %167.0 = CastType           d     dn %165.1   <code->
  val?            %167.1 = Extract2_1D        wed   %167.0, 2, elided   <sym->
  str$-           %167.2 = CallSafeBuiltin    wed   typeof(%167.1)    <str$->
  void                    Visible            v     
  lgl$-           %167.4 = Eq                 vd    %167.2, "language", elided   <lgl$->
  lgl$#-          %167.5 = CheckTrueFalse     e     %167.4
  void                    Branch                   %167.5 -> BB81 (if true) | BB79 (if false)
BB168   <- [165]
  prom-           %168.0 = MkArg                    unboundValue, h[0x55804ea004e0]_p18, e0.2
  val?^           %168.1 = CastType                 up %168.0
  fs              %168.2 = FrameState         R     0x55804ecfa260+384: [], env=e0.2
  env             e168.3 = (MkEnv)            l     x=%168.1, parent=R_BaseNamespace, context 0
  fs              %168.4 = FrameState         R     0x55804e7773a0+9: [], env=e168.3, next=%168.2
  fs              %168.5 = FrameState         R     0x55804e41e860+5(pr): [%165.1], env=e0.2, next=%168.4
  void                    Deopt              !v    %168.5, Typecheck@0x55804eaeb808[Type#24], %165.1   !
BB81   <- [167]
  (cls|spec|blt)  %81.0 = LdFun              !v    flattenAssignment, e0.2
  fs              %81.1 = FrameState         R     0x55804ecfa260+417: [%81.0], env=e0.2
  void                    Deopt              !v    %81.1, DeadCall@0x55804eaeb808[Call#10], %81.0   !
BB79   <- [167]
  val?^ | miss    %79.0 = LdVar              eR    walkCode, e0.2
  lgl$#-          %79.1 = Identical                %79.0, function(e, w=makeCodeWalker()) <(rir::Dispatc|...
  void                    Branch                   %79.1 -> BB169 (if true) | BB170 (if false)
BB169   <- [79]
  prom-           %169.0 = MkArg                    unboundValue, h[0x55804ea004e0]_p19, e0.2
  prom-           %169.1 = MkArg                    unboundValue, h[0x55804ea004e0]_p20, e0.2
  val?            %169.2 = StaticCall         !     walkCode[0x55804f342260](%169.0, %169.1) e0.2   <nil->
  val?            %169.3 = %169.2
  goto BB80
BB170   <- [79]
  fs              %170.0 = FrameState         R     0x55804ecfa260+384: [], env=e0.2
  prom-           %170.1 = MkArg                    %167.1, h[0x55804ea004e0]_p18 (!refl), e0.2
  val?~           %170.2 = CastType                 up %170.1
  env             e170.3 = (MkEnv)            l     x=%170.2, parent=R_BaseNamespace, context 0
  fs              %170.4 = FrameState         R     0x55804e7773a0+27: [%167.2], env=e170.3, next=%170.0
  void                    Deopt              !v    %170.4, CallTarget@0x55804eaeb808[Call#13], %79.0   !
Prom 0:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    w, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    enterGlobal, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     as.character, <0x55804beee040>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, h[0x55804ea004e0]_p3, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <str$->
  void                    Return             l     %0.3
Prom 3:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    e, e0.0
  val?            %0.2  = Force<lazy>        !v    %0.1, e0.0   <code->
  val?            %0.3  = Extract2_1D        !v    %0.2, 1, e0.0   <sym->
  void                    Visible            v     
  void                    Return             l     %0.3
Prom 4:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    e, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <code->
  void                    Return             l     %0.3
Prom 5:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    w, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 6:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    e, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <code->
  void                    Return             l     %0.3
Prom 7:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    v, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 8:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    w, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 9:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    w, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 10:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    enterLocal, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 11:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    v, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 12:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    e, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <code->
  void                    Return             l     %0.3
Prom 13:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    w, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 14:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    e, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <code->
  void                    Return             l     %0.3
Prom 15:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    w, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 16:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    e, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <code->
  void                    Return             l     %0.3
Prom 17:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    w, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 18:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    e, e0.0
  val?            %0.2  = Force<wrapped>     !v    %0.1, e0.0   <code->
  val?            %0.3  = Extract2_1D        !v    %0.2, 2, e0.0   <sym->
  void                    Visible            v     
  void                    Return             l     %0.3
Prom 19:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    e, e0.0
  val?            %0.2  = Force<wrapped>     !v    %0.1, e0.0   <code->
  val?            %0.3  = Extract2_1D        !v    %0.2, 3, e0.0   <code->
  void                    Visible            v     
  void                    Return             l     %0.3
Prom 20:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    w, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 21:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    v, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 22:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    e, e0.0
  val?            %0.2  = Force<wrapped>     !v    %0.1, e0.0   <code->
  val?            %0.3  = Extract2_1D        !v    %0.2, 3, e0.0   <code->
  val?            %0.4  = Extract2_1D        !v    %0.3, 2, e0.0   <list->
  void                    Visible            v     
  void                    Return             l     %0.4
Prom 23:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    e, e0.0
  val?            %0.2  = Force<wrapped>     !v    %0.1, e0.0   <code->
  val?            %0.3  = Extract2_1D        !v    %0.2, 3, e0.0   <code->
  val?            %0.4  = Extract2_1D        !v    %0.3, 3, e0.0   <code->
  void                    Visible            v     
  void                    Return             l     %0.4
Prom 24:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    w, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 25:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     typeof, <0x55804e68e748>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, h[0x55804ea004e0]_p26, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <str$->
  void                    Return             l     %0.3
Prom 26:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    v, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <sym->
  void                    Return             l     %0.3
Prom 27:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     c, <0x55804bee1940>, e0.0
  val?            %0.2  = Call               !     %0.1("symbol", "character") e0.0   <str->
  void                    Return             l     %0.2
Prom 28:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    e, e0.0
  val?            %0.2  = Force<lazy>        !v    %0.1, e0.0   <code->
  val?            %0.3  = Extract2_1D        !v    %0.2, 2, e0.0   <sym->
  void                    Visible            v     
  void                    Return             l     %0.3
Prom 30:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    v, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 31:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     as.character, <0x55804beee040>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, h[0x55804ea004e0]_p32, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <str$->
  void                    Return             l     %0.3
Prom 32:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    name, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <(sym|str)->
  void                    Return             l     %0.3
Prom 33:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    x, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 34:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    x, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <val?+>
  void                    Return             l     %0.3

│ h[0x55804ea004e0]                                                            │
└──────────────────────────────────────────────────────────────────────────────┘
