
┌──────────────────────────────────────────────────────────────────────────────┐
│ isSimpleFunDef[0x55804f08e900]                                               │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch                                      │
│ Properties:                                                                  │
├────── Final PIR Version
isSimpleFunDef[0x55804f08e900]
BB0
  val?^           %0.0  = LdArg                    1
  val?^           %0.1  = LdArg                    0
  val?^ | miss    %0.2  = LdVar              eR    typeof, <env 0x55804e699488>
  lgl$#-          %0.3  = Identical                %0.2, function(x) <(rir::DispatchTable*)0x55804e1c3c|...
  void                    Branch                   %0.3 -> BB38 (if true) | BB39 (if false)
BB38   <- [0]
  env             e38.0 = MkEnv              l     e=%0.1, w=%0.0, parent=<env 0x55804e699488>, context 1
  val?            %38.1 = Force!<lazy>       !v    %0.1, e38.0   <code->
  lgl$#-          %38.2 = IsType                   %38.1 isA val?-
  void                    Branch                   %38.2 -> BB40 (if true) | BB41 (if false)
BB39   <- [0]
  env             e39.0 = (MkEnv)            l     e=%0.1, w=%0.0, parent=<env 0x55804e699488>, context 1
  fs              %39.1 = FrameState         R     0x55804e7e47a0+0: [], env=e39.0
  void                    Deopt              !v    %39.1, CallTarget@0x55804eaeaf18[Call#0], %0.2
BB40   <- [38]
  val?-           %40.0 = CastType           d     dn %38.1   <code->
  val?            %40.1 = Extract2_1D        wed   %40.0, 2, elided   <sym->
  str$-           %40.2 = CallSafeBuiltin    wed   typeof(%40.1)    <str$->
  void                    Visible            v     
  lgl$-           %40.4 = Neq                vd    %40.2, "language", elided   <lgl$->
  lgl$-           %40.5 = AsLogical                %40.4
  lgl$#-          %40.6 = Identical                %40.5, false
  void                    Branch                   %40.6 -> BB36 (if true) | BB7 (if false)
BB41   <- [38]
  prom-           %41.0 = MkArg                    unboundValue, isSimpleFunDef[0x55804f08e900]_p0, e38.0
  val?^           %41.1 = CastType                 up %41.0
  fs              %41.2 = FrameState         R     0x55804e7e47a0+32: [], env=e38.0
  env             e41.3 = (MkEnv)            l     x=%41.1, parent=R_BaseNamespace, context 0
  fs              %41.4 = FrameState         R     0x55804e7773a0+9: [], env=e41.3, next=%41.2
  fs              %41.5 = FrameState         R     0x55804e82bb60+5(pr): [%38.1], env=e38.0, next=%41.4
  void                    Deopt              !v    %41.5, Typecheck@0x55804eaeaf18[Type#0], %38.1   !
BB36   <- [40]
  void                    Nop                !     
  lgl$-           %36.1 = %40.5
  goto BB10
BB7   <- [40]
  val?^ | miss    %7.0  = LdVar              eR    typeof, e38.0
  lgl$#-          %7.1  = Identical                %7.0, function(x) <(rir::DispatchTable*)0x55804e1c3c|...
  void                    Branch                   %7.1 -> BB42 (if true) | BB43 (if false)
BB10   <- [36, 46]
  lgl$-           %10.0 = Phi                      %46.7:BB46, %36.1:BB36
  lgl$-           %10.1 = %10.0
  lgl$-           %10.2 = AsLogical                %10.1
  lgl$#-          %10.3 = Identical                %10.2, false
  void                    Branch                   %10.3 -> BB35 (if true) | BB13 (if false)
BB42   <- [7]
  val?^ | miss    %42.0 = LdVar              eR    e, e38.0
  val?            %42.1 = Force!<wrapped>    !v    %42.0, e38.0   <code->
  lgl$#-          %42.2 = IsType                   %42.1 isA val?-
  void                    Branch                   %42.2 -> BB46 (if true) | BB47 (if false)
BB43   <- [7]
  fs              %43.0 = FrameState         R     0x55804e7e47a0+32: [], env=e38.0
  prom-           %43.1 = MkArg                    %40.1, isSimpleFunDef[0x55804f08e900]_p0 (!refl), e38.0
  val?~           %43.2 = CastType                 up %43.1
  env             e43.3 = (MkEnv)            l     x=%43.2, parent=R_BaseNamespace, context 0
  fs              %43.4 = FrameState         R     0x55804e7773a0+27: [%40.2], env=e43.3, next=%43.0
  void                    Deopt              !v    %43.4, CallTarget@0x55804eaeaf18[Call#1], %7.0   !
BB35   <- [10]
  void                    Nop                !     
  lgl$-           %35.1 = %10.2
  goto BB16
BB13   <- [10]
  val?^ | miss    %13.0 = LdVar              eR    %in%, e38.0
  lgl$#-          %13.1 = Identical                %13.0, function(x, table) <(rir::DispatchTable*)0x558|...
  void                    Branch                   %13.1 -> BB44 (if true) | BB45 (if false)
BB46   <- [42]
  val?-           %46.0 = CastType           d     dn %42.1   <code->
  val?            %46.1 = Extract2_1D        wed   %46.0, 3, elided   <code->
  str$-           %46.2 = CallSafeBuiltin    wed   typeof(%46.1)    <str$->
  void                    Visible            v     
  lgl$-           %46.4 = Eq                 vd    %46.2, "language", elided   <lgl$->
  lgl$-           %46.5 = AsLogical                %46.4
  lgl$-           %46.6 = LAnd                     %40.5, %46.5
  lgl$-           %46.7 = %46.6
  goto BB10
BB47   <- [42]
  prom-           %47.0 = MkArg                    unboundValue, isSimpleFunDef[0x55804f08e900]_p1, e38.0
  val?^           %47.1 = CastType                 up %47.0
  fs              %47.2 = FrameState         R     0x55804e7e47a0+88: [%40.5], env=e38.0
  env             e47.3 = (MkEnv)            l     x=%47.1, parent=R_BaseNamespace, context 0
  fs              %47.4 = FrameState         R     0x55804e7773a0+9: [], env=e47.3, next=%47.2
  fs              %47.5 = FrameState         R     0x55804e44d470+5(pr): [%42.1], env=e38.0, next=%47.4
  void                    Deopt              !v    %47.5, Typecheck@0x55804eaeaf18[Type#4], %42.1   !
BB16   <- [35, 48]
  lgl$-           %16.0 = Phi                      %48.3:BB48, %35.1:BB35
  lgl$-           %16.1 = %16.0
  lgl$-           %16.2 = AsLogical                %16.1
  lgl$#-          %16.3 = Identical                %16.2, false
  void                    Branch                   %16.3 -> BB34 (if true) | BB17 (if false)
BB44   <- [13]
  prom-           %44.0 = MkArg                    unboundValue, isSimpleFunDef[0x55804f08e900]_p2, e38.0
  prom-           %44.1 = MkArg                    unboundValue, isSimpleFunDef[0x55804f08e900]_p4, e38.0
  val?            %44.2 = StaticCall         !     %in%[0x55804f720b00](%44.0, %44.1) e38.0   <lgl$->
  lgl$#-          %44.3 = IsType                   %44.2 isA lgl$-
  void                    Branch                   %44.3 -> BB48 (if true) | BB49 (if false)
BB45   <- [13]
  fs              %45.0 = FrameState         R     0x55804e7e47a0+107: [%10.1], env=e38.0
  void                    Deopt              !v    %45.0, CallTarget@0x55804eaeaf18[Call#2], %13.0   !
BB34   <- [16]
  void                    Nop                !     
  lgl$-           %34.1 = %16.2
  goto BB26
BB17   <- [16]
  val?^ | miss    %17.0 = LdVar              eR    e, e38.0
  val?            %17.1 = Force!<wrapped>    !v    %17.0, e38.0   <code->
  lgl$#-          %17.2 = IsType                   %17.1 isA val+   <true>
  lgl$#-          %17.3 = IsType                   %17.1 isA val?-
  void                    Branch                   %17.2 -> BB50 (if true) | BB51 (if false)
BB48   <- [44]
  lgl$-           %48.0 = CastType           d     dn %44.2
  lgl$-           %48.1 = AsLogical                %48.0
  lgl$-           %48.2 = LAnd                     %10.2, %48.1
  lgl$-           %48.3 = %48.2
  goto BB16
BB49   <- [44]
  fs              %49.0 = FrameState         R     0x55804e7e47a0+151: [%10.2, %44.2], env=e38.0
  void                    Deopt              !v    %49.0, Typecheck@0x55804eaeaf18[Type#13], %44.2   !
BB26   <- [34, 64]
  lgl$-           %26.0 = Phi                      %64.3:BB64, %34.1:BB34
  lgl$-           %26.1 = %26.0
  lgl$-           %26.2 = AsLogical                %26.1
  lgl$#-          %26.3 = Identical                %26.2, false
  void                    Branch                   %26.3 -> BB33 (if true) | BB29 (if false)
BB50   <- [17]
  void                    Branch                   %17.3 -> BB54 (if true) | BB55 (if false)
BB51   <- [17]
  void                    Nop                !     
  lgl$#-          %51.1 = %17.2
  dr              %51.2 = DeadBranchReached@0x55804eaeaf18[Test#4]
  goto BB18
BB33   <- [26]
  void                    Nop                !     
  lgl$-           %33.1 = %26.2
  goto BB32
BB29   <- [26]
  val?^ | miss    %29.0 = LdVar              eR    isBaseVar, e38.0
  lgl$#-          %29.1 = Identical                %29.0, function(v, env) <(rir::DispatchTable*)0x55804|...
  void                    Branch                   %29.1 -> BB52 (if true) | BB53 (if false)
BB54   <- [50]
  val?-           %54.0 = CastType           d     dn %17.1   <code->
  val?            %54.1 = Extract2_1D        wed   %54.0, 3, elided   <code->
  lgl$#-          %54.2 = IsType                   %54.1 isA val+   <true>
  lgl$#-          %54.3 = IsType                   %54.1 isA val?-
  void                    Branch                   %54.2 -> BB58 (if true) | BB59 (if false)
BB55   <- [50]
  void                    Nop                !     
  val?            %55.1 = %17.1
  dr              %55.2 = Typecheck@0x55804eaeaf18[Type#14]
  goto BB18
BB18   <- [51, 55]
  val?^ | miss    %18.0 = Phi                      %51.1:BB51, %55.1:BB55
  val?^ | miss    %18.1 = %18.0
  dr              %18.2 = Phi                      %51.2:BB51, %55.2:BB55
  dr              %18.3 = %18.2
  fs              %18.4 = FrameState         R     0x55804e7e47a0+174: [%16.2, %17.1], env=e38.0
  void                    Deopt              !v    %18.4, %18.3, %18.1   !
BB32   <- [33, 56]
  lgl$-           %32.0 = Phi                      %56.3:BB56, %33.1:BB33
  lgl$-           %32.1 = %32.0
  void                    Return             l     %32.1
BB52   <- [29]
  prom-           %52.0 = MkArg                    unboundValue, isSimpleFunDef[0x55804f08e900]_p5, e38.0
  val?            %52.1 = StaticCall         !     isBaseVar[0x55804ec0c760]("function", %52.0) e38.0   <lgl$->
  lgl$#-          %52.2 = IsType                   %52.1 isA lgl$-
  void                    Branch                   %52.2 -> BB56 (if true) | BB57 (if false)
BB53   <- [29]
  fs              %53.0 = FrameState         R     0x55804e7e47a0+281: [%26.1], env=e38.0
  void                    Deopt              !v    %53.0, CallTarget@0x55804eaeaf18[Call#5], %29.0   !
BB58   <- [54]
  void                    Branch                   %54.3 -> BB60 (if true) | BB61 (if false)
BB59   <- [54]
  void                    Nop                !     
  lgl$#-          %59.1 = %54.2
  dr              %59.2 = DeadBranchReached@0x55804eaeaf18[Test#5]
  goto BB20
BB56   <- [52]
  lgl$-           %56.0 = CastType           d     dn %52.1
  lgl$-           %56.1 = AsLogical                %56.0
  lgl$-           %56.2 = LAnd                     %26.2, %56.1
  lgl$-           %56.3 = %56.2
  goto BB32
BB57   <- [52]
  fs              %57.0 = FrameState         R     0x55804e7e47a0+325: [%26.2, %52.1], env=e38.0
  void                    Deopt              !v    %57.0, Typecheck@0x55804eaeaf18[Type#21], %52.1   !
BB60   <- [58]
  val?-           %60.0 = CastType           d     dn %54.1   <code->
  val?            %60.1 = Extract2_1D        wed   %60.0, 1, elided   <sym->
  lgl$#-          %60.2 = IsType                   %60.1 isA val?-
  void                    Visible            v     
  void                    Branch                   %60.2 -> BB62 (if true) | BB63 (if false)
BB61   <- [58]
  void                    Nop                !     
  val?            %61.1 = %54.1
  dr              %61.2 = Typecheck@0x55804eaeaf18[Type#15]
  goto BB20
BB20   <- [59, 61]
  val?^ | miss    %20.0 = Phi                      %59.1:BB59, %61.1:BB61
  val?^ | miss    %20.1 = %20.0
  dr              %20.2 = Phi                      %59.2:BB59, %61.2:BB61
  dr              %20.3 = %20.2
  fs              %20.4 = FrameState         R     0x55804e7e47a0+217: [%16.2, %54.1], env=e38.0
  void                    Deopt              !v    %20.4, %20.3, %20.1   !
BB62   <- [60]
  val?-           %62.0 = CastType           d     dn %60.1   <sym->
  lgl-            %62.1 = Eq                 vwed  %62.0, "function", elided   <lgl$->
  lgl$#-          %62.2 = IsType                   %62.1 isA lgl$-
  void                    Branch                   %62.2 -> BB64 (if true) | BB65 (if false)
BB63   <- [60]
  fs              %63.0 = FrameState         R     0x55804e7e47a0+261: [%16.2, %60.1], env=e38.0
  void                    Deopt              !v    %63.0, Typecheck@0x55804eaeaf18[Type#16], %60.1   !
BB64   <- [62]
  lgl$-           %64.0 = CastType           d     dn %62.1
  lgl$-           %64.1 = AsLogical                %64.0
  lgl$-           %64.2 = LAnd                     %16.2, %64.1
  lgl$-           %64.3 = %64.2
  goto BB26
BB65   <- [62]
  fs              %65.0 = FrameState         R     0x55804e7e47a0+274: [%16.2, %62.1], env=e38.0
  void                    Deopt              !v    %65.0, Typecheck@0x55804eaeaf18[Type#17], %62.1   !
Prom 0:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    e, e0.0
  val?            %0.2  = Force<lazy>        !v    %0.1, e0.0   <code->
  val?            %0.3  = Extract2_1D        !v    %0.2, 2, e0.0   <sym->
  void                    Visible            v     
  void                    Return             l     %0.3
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    e, e0.0
  val?            %0.2  = Force<wrapped>     !v    %0.1, e0.0   <code->
  val?            %0.3  = Extract2_1D        !v    %0.2, 3, e0.0   <code->
  void                    Visible            v     
  void                    Return             l     %0.3
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     typeof, <0x55804e68e748>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, isSimpleFunDef[0x55804f08e900]_p3, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <str$->
  void                    Return             l     %0.3
Prom 3:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    e, e0.0
  val?            %0.2  = Force<wrapped>     !v    %0.1, e0.0   <code->
  val?            %0.3  = Extract2_1D        !v    %0.2, 3, e0.0   <code->
  val?            %0.4  = Extract2_1D        !v    %0.3, 1, e0.0   <sym->
  void                    Visible            v     
  void                    Return             l     %0.4
Prom 4:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     c, <0x55804bee1940>, e0.0
  val?            %0.2  = Call               !     %0.1("symbol", "character") e0.0   <str->
  void                    Return             l     %0.2
Prom 5:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     $, <0x55804bee0c10>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, isSimpleFunDef[0x55804f08e900]_p6, e0.0
  prom-           %0.3  = MkArg                    unboundValue, isSimpleFunDef[0x55804f08e900]_p7, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <env+>
  void                    Return             l     %0.4
Prom 6:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    w, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 7:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    env, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3

│ isSimpleFunDef[0x55804f08e900]                                               │
└──────────────────────────────────────────────────────────────────────────────┘
