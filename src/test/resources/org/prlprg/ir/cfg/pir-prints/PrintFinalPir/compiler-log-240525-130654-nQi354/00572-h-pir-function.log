
┌──────────────────────────────────────────────────────────────────────────────┐
│ h[0x55804f50cff0]                                                            │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;NonRefl0,NonRefl1,!Obj0,!Obj1        │
│ Properties:                                                                  │
├────── Final PIR Version
h[0x55804f50cff0]
BB0
  val?^           %0.0  = LdArg                    1
  val?^           %0.1  = LdArg                    0
  env             e0.2  = MkEnv              l     e=%0.1, w=%0.0, parent=<env 0x55804e699488>, context 1
  (cls|spec|blt)  %0.3  = LdFun              !v    $, <0x55804bee0c10>, <env 0x55804e699488>
  prom-           %0.4  = MkArg                    unboundValue, h[0x55804f50cff0]_p0 (!refl), e0.2
  prom-           %0.5  = MkArg                    unboundValue, h[0x55804f50cff0]_p1, e0.2
  val?            %0.6  = Call               !v    %0.3(%0.4, %0.5) e0.2   <cls->
  (cls|spec|blt)  %0.7  = ChkFunction        e     %0.6
  prom-           %0.8  = MkArg                    unboundValue, h[0x55804f50cff0]_p2, e0.2
  prom-           %0.9  = MkArg                    unboundValue, h[0x55804f50cff0]_p3, e0.2
  lgl$#-          %0.10 = Identical                %0.7, function(type, n, e, w) <(rir::DispatchTable*)|...
  void                    Branch                   %0.10 -> BB36 (if true) | BB37 (if false)
BB36   <- [0]
  val?            %36.0 = StaticCall         !v    [0x55804f3fb060]("function", "{", %0.8, %0.9) e0.2
  (cls|spec|blt)  %36.1 = LdFun              !v    <-, <0x55804bed5da8>, e0.2
  prom-           %36.2 = MkArg                    unboundValue, h[0x55804f50cff0]_p4, e0.2
  prom-           %36.3 = MkArg                    unboundValue, h[0x55804f50cff0]_p7, e0.2
  val?            %36.4 = Call               !v    %36.1(%36.2, %36.3) e0.2
  val?^ | miss    %36.5 = LdVar              eR    length, e0.2
  lgl$#-          %36.6 = Identical                <blt length>, %36.5   <true>
  void                    Branch                   %36.6 -> BB38 (if true) | BB39 (if false)
BB37   <- [0]
  fs              %37.0 = FrameState         R     0x55804ea73130+37: [%0.6], env=e0.2
  void                    Deopt              !v    %37.0, CallTarget@0x55804ea24438[Call#1], %0.7   !
BB38   <- [36]
  val?^ | miss    %38.0 = LdVar              eR    e, e0.2
  val?            %38.1 = Force!<wrapped>    !v    %38.0, e0.2   <code->
  lgl$#-          %38.2 = IsType                   %38.1 isA val?-
  void                    Branch                   %38.2 -> BB40 (if true) | BB41 (if false)
BB39   <- [36]
  fs              %39.0 = FrameState         R     0x55804ea73130+123: [%36.4], env=e0.2
  void                    Deopt              !v    %39.0, DeadBranchReached@0x55804ea24438[Test#0], %36.6   !
BB40   <- [38]
  val?-           %40.0 = CastType           d     dn %38.1   <code->
  (int|real)$-    %40.1 = CallSafeBuiltin    wed   length(%40.0)    <int$->
  lgl$#-          %40.2 = IsType                   %40.1 isA int$-
  void                    Branch                   %40.2 -> BB42 (if true) | BB43 (if false)
BB41   <- [38]
  fs              %41.0 = FrameState         R     0x55804ea73130+193: [<blt length>, %38.1], env=e0.2
  void                    Deopt              !v    %41.0, Typecheck@0x55804ea24438[Type#13], %38.1   !
BB42   <- [40]
  int$-           %42.0 = CastType           d     dn %40.1
  lgl$-           %42.1 = Gt                 d     %42.0, 1, elided   <lgl$->
  lgl$#-          %42.2 = CheckTrueFalse     e     %42.1
  void                    Branch                   %42.2 -> BB11 (if true) | BB9 (if false)
BB43   <- [40]
  void                    Nop                !     
  (int|real)$-    %43.1 = %40.1
  dr              %43.2 = Typecheck@0x55804ea24438[Type#14]
  goto BB7
BB11   <- [42]
  val?^ | miss    %11.0 = LdVar              eR    length, e0.2
  lgl$#-          %11.1 = Identical                <blt length>, %11.0   <true>
  void                    Branch                   %11.1 -> BB44 (if true) | BB45 (if false)
BB9   <- [42]
  void                    Invisible          v     
  goto BB10
BB7   <- [43, 45]
  val?^ | miss    %7.0  = Phi                      %43.1:BB43, %45.1:BB45
  val?^ | miss    %7.1  = %7.0
  dr              %7.2  = Phi                      %43.2:BB43, %45.2:BB45
  dr              %7.3  = %7.2
  fs              %7.4  = FrameState         R     0x55804ea73130+215: [%40.1], env=e0.2
  void                    Deopt              !v    %7.4, %7.3, %7.1   !
BB44   <- [11]
  val?^ | miss    %44.0 = LdVar              eR    e, e0.2
  val?            %44.1 = Force!<wrapped>    !v    %44.0, e0.2   <code->
  lgl$#-          %44.2 = IsType                   %44.1 isA val?-
  void                    Branch                   %44.2 -> BB46 (if true) | BB47 (if false)
BB45   <- [11]
  void                    Nop                !     
  lgl$#-          %45.1 = %11.1
  dr              %45.2 = DeadBranchReached@0x55804ea24438[Test#1]
  goto BB7
BB10   <- [9, 24]
  void                    Return             l     nil
BB46   <- [44]
  val?-           %46.0 = CastType           d     dn %44.1   <code->
  (int|real)$-    %46.1 = CallSafeBuiltin    wed   length(%46.0)    <int$->
  lgl$#-          %46.2 = IsType                   %46.1 isA int$-
  void                    Branch                   %46.2 -> BB48 (if true) | BB49 (if false)
BB47   <- [44]
  fs              %47.0 = FrameState         R     0x55804ea73130+325: [2, <blt length>, %44.1], env=e0.2
  void                    Deopt              !v    %47.0, Typecheck@0x55804ea24438[Type#17], %44.1   !
BB48   <- [46]
  int$-           %48.0 = CastType           d     dn %46.1
  lgl$#-          %48.1 = ColonInputEffects        2, %48.0   <true>
  void                    Branch                   %48.1 -> BB50 (if true) | BB51 (if false)
BB49   <- [46]
  void                    Nop                !     
  (int|real)$-    %49.1 = %46.1
  dr              %49.2 = Typecheck@0x55804ea24438[Type#18]
  goto BB14
BB50   <- [48]
  int$#-          %50.0 = ColonCastRhs       e     2L, %48.0   <int$->
  lgl$#-          %50.1 = Lte                d     2L, %50.0, elided   <true>
  void                    Branch                   %50.1 -> BB52 (if true) | BB53 (if false)
BB51   <- [48]
  void                    Nop                !     
  lgl$#-          %51.1 = %48.1
  dr              %51.2 = DeadBranchReached@0x55804ea24438[Test#2]
  goto BB14
BB14   <- [49, 51, 53, 55]
  val?^ | miss    %14.0 = Phi                      %49.1:BB49, %51.1:BB51, %53.1:BB53, %55.1:BB55
  val?^ | miss    %14.1 = %14.0
  dr              %14.2 = Phi                      %49.2:BB49, %51.2:BB51, %53.2:BB53, %55.2:BB55
  dr              %14.3 = %14.2
  fs              %14.4 = FrameState         R     0x55804ea73130+347: [2, %46.1], env=e0.2
  void                    Deopt              !v    %14.4, %14.3, %14.1   !
BB52   <- [50]
  lgl$#-          %52.0 = Neq                d     %50.0, 2L, elided   <true>
  void                    Branch                   %52.0 -> BB54 (if true) | BB55 (if false)
BB53   <- [50]
  void                    Nop                !     
  lgl$#-          %53.1 = %50.1
  dr              %53.2 = DeadBranchReached@0x55804ea24438[Test#9]
  goto BB14
BB54   <- [52]
  void                    StVar              lW    i, 2L, e0.2
  val?^ | miss    %54.1 = LdVar              eR    attr, e0.2
  lgl$#-          %54.2 = Identical                <blt attr>, %54.1   <true>
  void                    Branch                   %54.2 -> BB56 (if true) | BB57 (if false)
BB55   <- [52]
  void                    Nop                !     
  lgl$#-          %55.1 = %52.0
  dr              %55.2 = DeadBranchReached@0x55804ea24438[Test#10]
  goto BB14
BB56   <- [54]
  val?^ | miss    %56.0 = LdVar              eR    e, e0.2
  val?            %56.1 = Force!<wrapped>    !v    %56.0, e0.2   <code->
  val?            %56.2 = CallBuiltin        !v    attr(%56.1, "srcref") e0.2   <nil->
  lgl$#-          %56.3 = IsType                   %56.2 isA val+   <true>
  lgl$#-          %56.4 = IsType                   %56.2 isA val?-
  void                    Branch                   %56.3 -> BB58 (if true) | BB59 (if false)
BB57   <- [54]
  fs              %57.0 = FrameState         R     0x55804ea73130+479: [1L, %50.0, 2L], env=e0.2
  void                    Deopt              !v    %57.0, DeadBranchReached@0x55804ea24438[Test#11], %54.2   !
BB58   <- [56]
  val?^ | miss    %58.0 = LdVar              eR    i, e0.2
  lgl$#-          %58.1 = IsType                   %58.0 isA int$-
  void                    Branch                   %58.1 -> BB60 (if true) | BB61 (if false)
BB59   <- [56]
  void                    Nop                !     
  lgl$#-          %59.1 = %56.3
  dr              %59.2 = DeadBranchReached@0x55804ea24438[Test#12]
  goto BB18
BB60   <- [58]
  int$-           %60.0 = CastType           d     dn %58.0
  void                    Branch                   %56.4 -> BB62 (if true) | BB63 (if false)
BB61   <- [58]
  void                    Nop                !     
  val?^ | miss    %61.1 = %58.0
  dr              %61.2 = Typecheck@0x55804ea24438[Type#58]
  goto BB18
BB18   <- [59, 61, 63]
  val?^ | miss    %18.0 = Phi                      %59.1:BB59, %61.1:BB61, %63.1:BB63
  val?^ | miss    %18.1 = %18.0
  dr              %18.2 = Phi                      %59.2:BB59, %61.2:BB61, %63.2:BB63
  dr              %18.3 = %18.2
  fs              %18.4 = FrameState         R     0x55804ea73130+588: [1L, %50.0, 3L, %56.2], env=e0.2
  void                    Deopt              !v    %18.4, %18.3, %18.1   !
BB62   <- [60]
  val?-           %62.0 = CastType           d     dn %56.2   <nil->
  val?            %62.1 = Extract2_1D        wed   %62.0, %60.0, elided   <nil->
  lgl$-           %62.2 = Is                       %62.1, NULL
  lgl$-           %62.3 = Not                d     %62.2, elided
  lgl$#-          %62.4 = CheckTrueFalse     e     %62.3
  void                    Branch                   %62.4 -> BB34 (if true) | BB22 (if false)
BB63   <- [60]
  void                    Nop                !     
  val?            %63.1 = %56.2
  dr              %63.2 = Typecheck@0x55804ea24438[Type#56]
  goto BB18
BB34   <- [62]
  (cls|spec|blt)  %34.0 = LdFun              !v    <-, e0.2
  fs              %34.1 = FrameState         R     0x55804ea73130+667: [1L, %50.0, 3L, %34.0], env=e0.2
  void                    Deopt              !v    %34.1, DeadCall@0x55804ea24438[Call#18], %34.0   !
BB22   <- [62]
  val?^ | miss    %22.0 = LdVar              eR    walkCode, e0.2
  lgl$#-          %22.1 = Identical                %22.0, function(e, w=makeCodeWalker()) <(rir::Dispatc|...
  void                    Branch                   %22.1 -> BB64 (if true) | BB65 (if false)
BB64   <- [22]
  prom-           %64.0 = MkArg                    unboundValue, h[0x55804f50cff0]_p11, e0.2
  prom-           %64.1 = MkArg                    unboundValue, h[0x55804f50cff0]_p13, e0.2
  val?            %64.2 = StaticCall         !v    walkCode[0x55804e494c30](%64.0, %64.1) e0.2
  int$#-          %64.3 = 3L
  goto BB23
BB65   <- [22]
  fs              %65.0 = FrameState         R     0x55804ea73130+639: [1L, %50.0, 3L, %62.1], env=e0.2
  void                    Deopt              !v    %65.0, CallTarget@0x55804ea24438[Call#24], %22.0   !
BB23   <- [64, 74]
  int$#-          %23.0 = Phi                      %64.3:BB64, %74.3:BB74
  int$#-          %23.1 = %23.0
  lgl$#-          %23.2 = Neq                d     %50.0, %23.1, elided
  void                    Branch                   %23.2 -> BB25 (if true) | BB24 (if false)
BB25   <- [23]
  void                    StVar              lW    i, %23.1, e0.2
  int$#-          %25.1 = Add                d     %23.1, 1L, elided
  val?^ | miss    %25.2 = LdVar              eR    attr, e0.2
  lgl$#-          %25.3 = Identical                <blt attr>, %25.2   <true>
  void                    Branch                   %25.3 -> BB66 (if true) | BB67 (if false)
BB24   <- [23]
  void                    Invisible          v     
  goto BB10
BB66   <- [25]
  val?^ | miss    %66.0 = LdVar              eR    e, e0.2
  val?            %66.1 = Force!<wrapped>    !v    %66.0, e0.2   <code->
  val?            %66.2 = CallBuiltin        !v    attr(%66.1, "srcref") e0.2   <nil->
  lgl$#-          %66.3 = IsType                   %66.2 isA val+   <true>
  lgl$#-          %66.4 = IsType                   %66.2 isA val?-
  void                    Branch                   %66.3 -> BB68 (if true) | BB69 (if false)
BB67   <- [25]
  fs              %67.0 = FrameState         R     0x55804ea73130+793: [1L, %50.0, %23.1], env=e0.2
  void                    Deopt              !v    %67.0, DeadBranchReached@0x55804ea24438[Test#18], %25.3   !
BB68   <- [66]
  val?^ | miss    %68.0 = LdVar              eR    i, e0.2
  lgl$#-          %68.1 = IsType                   %68.0 isA int$-
  void                    Branch                   %68.1 -> BB70 (if true) | BB71 (if false)
BB69   <- [66]
  void                    Nop                !     
  lgl$#-          %69.1 = %66.3
  dr              %69.2 = DeadBranchReached@0x55804ea24438[Test#19]
  goto BB28
BB70   <- [68]
  int$-           %70.0 = CastType           d     dn %68.0
  void                    Branch                   %66.4 -> BB72 (if true) | BB73 (if false)
BB71   <- [68]
  void                    Nop                !     
  val?^ | miss    %71.1 = %68.0
  dr              %71.2 = Typecheck@0x55804ea24438[Type#87]
  goto BB28
BB28   <- [69, 71, 73]
  val?^ | miss    %28.0 = Phi                      %69.1:BB69, %71.1:BB71, %73.1:BB73
  val?^ | miss    %28.1 = %28.0
  dr              %28.2 = Phi                      %69.2:BB69, %71.2:BB71, %73.2:BB73
  dr              %28.3 = %28.2
  fs              %28.4 = FrameState         R     0x55804ea73130+902: [1L, %50.0, %25.1, %66.2], env=e0.2
  void                    Deopt              !v    %28.4, %28.3, %28.1   !
BB72   <- [70]
  val?-           %72.0 = CastType           d     dn %66.2   <nil->
  val?            %72.1 = Extract2_1D        wed   %72.0, %70.0, elided   <nil->
  lgl$-           %72.2 = Is                       %72.1, NULL
  lgl$-           %72.3 = Not                d     %72.2, elided
  lgl$#-          %72.4 = CheckTrueFalse     e     %72.3
  void                    Branch                   %72.4 -> BB33 (if true) | BB32 (if false)
BB73   <- [70]
  void                    Nop                !     
  val?            %73.1 = %66.2
  dr              %73.2 = Typecheck@0x55804ea24438[Type#85]
  goto BB28
BB33   <- [72]
  (cls|spec|blt)  %33.0 = LdFun              !v    <-, e0.2
  fs              %33.1 = FrameState         R     0x55804ea73130+981: [1L, %50.0, %25.1, %33.0], env=e0.2
  void                    Deopt              !v    %33.1, DeadCall@0x55804ea24438[Call#26], %33.0   !
BB32   <- [72]
  val?^ | miss    %32.0 = LdVar              eR    walkCode, e0.2
  lgl$#-          %32.1 = Identical                %32.0, function(e, w=makeCodeWalker()) <(rir::Dispatc|...
  void                    Branch                   %32.1 -> BB74 (if true) | BB75 (if false)
BB74   <- [32]
  prom-           %74.0 = MkArg                    unboundValue, h[0x55804f50cff0]_p14, e0.2
  prom-           %74.1 = MkArg                    unboundValue, h[0x55804f50cff0]_p16, e0.2
  val?            %74.2 = StaticCall         !v    walkCode[0x55804e494c30](%74.0, %74.1) e0.2
  int$#-          %74.3 = %25.1
  goto BB23
BB75   <- [32]
  fs              %75.0 = FrameState         R     0x55804ea73130+953: [1L, %50.0, %25.1, %72.1], env=e0.2
  void                    Deopt              !v    %75.0, CallTarget@0x55804ea24438[Call#32], %32.0   !
Prom 0:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    w, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    enterGlobal, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    e, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <code->
  void                    Return             l     %0.3
Prom 3:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    w, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 4:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     $, e0.0
  prom-           %0.2  = MkArg                    unboundValue, h[0x55804f50cff0]_p5, e0.0
  prom-           %0.3  = MkArg                    unboundValue, h[0x55804f50cff0]_p6, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 5:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    w, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 6:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    srcfile, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 7:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     $, e0.0
  prom-           %0.2  = MkArg                    unboundValue, h[0x55804f50cff0]_p8, e0.0
  prom-           %0.3  = MkArg                    unboundValue, h[0x55804f50cff0]_p10, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 8:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     attr, e0.0
  prom-           %0.2  = MkArg                    unboundValue, h[0x55804f50cff0]_p9, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2, "srcfile") e0.0   <val?_>
  void                    Return             l     %0.3
Prom 9:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    e, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 10:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    filename, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 11:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    e, e0.0
  val?            %0.2  = Force<wrapped>     !v    %0.1, e0.0   <code->
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <true>
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    i, e0.0
  val?            %2.1  = Force<value>       !v    %2.0, e0.0   <int$->
  val?            %2.2  = %2.1
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, h[0x55804f50cff0]_p12, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.2:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract2_1D        !v    %0.2, %3.1, e0.0   <code->
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 12:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    i, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 13:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    w, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 14:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    e, e0.0
  val?            %0.2  = Force<wrapped>     !v    %0.1, e0.0   <code->
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <true>
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    i, e0.0
  val?            %2.1  = Force<value>       !v    %2.0, e0.0   <int$->
  val?            %2.2  = %2.1
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, h[0x55804f50cff0]_p15, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.2:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract2_1D        !v    %0.2, %3.1, e0.0   <code->
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 15:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    i, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 16:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    w, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3

│ h[0x55804f50cff0]                                                            │
└──────────────────────────────────────────────────────────────────────────────┘
