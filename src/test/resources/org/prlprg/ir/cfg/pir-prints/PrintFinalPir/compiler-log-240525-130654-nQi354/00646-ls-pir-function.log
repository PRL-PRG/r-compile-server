
┌──────────────────────────────────────────────────────────────────────────────┐
│ ls[0x55804e22b8e0]                                                           │
│ Context: CorrOrd,!TMany,Argmatch;Eager1,Eager2,Eager3,NonRefl1,NonRefl2,NonRefl3,!Obj3 miss: 2│
│ Properties:                                                                  │
├────── Final PIR Version
ls[0x55804e22b8e0]
BB0
  val?~+          %0.0  = LdArg                    3
  val?~ | miss    %0.1  = LdArg                    2
  val?~ | miss    %0.2  = LdArg                    1
  val?^ | miss    %0.3  = LdArg                    0
  lgl$#-          %0.4  = Identical                %0.2, missingArg
  lgl$#-          %0.5  = Identical                %0.1, missingArg
  env             e0.6  = MkEnv              l     name=%0.3, pos=%0.2, envir=%0.1, all.names=%0.0, pattern(miss)=missingArg, sorted(miss)=missingArg, parent=R_BaseNamespace, context 1
  void                    Branch                   %0.4 -> BB2 (if true) | BB55 (if false)
BB2   <- [0]
  prom-           %2.0  = MkArg                    unboundValue, ls[0x55804e22b8e0]_p0 (!refl), 
  val?^ | miss    %2.1  = CastType                 up %2.0
  void                    StArg              lW    pos, %2.1, e0.6
  goto BB3
BB55   <- [0]
  void                    Nop                !     
  goto BB3
BB3   <- [2, 55]
  void                    Branch                   %0.5 -> BB54 (if true) | BB4 (if false)
BB54   <- [3]
  prom-           %54.0 = MkArg                    unboundValue, ls[0x55804e22b8e0]_p1, e0.6
  val?^ | miss    %54.1 = CastType                 up %54.0
  void                    StArg              lW    envir, %54.1, e0.6
  goto BB5
BB4   <- [3]
  void                    Nop                !     
  goto BB5
BB5   <- [54, 4]
  void                    StArg              lW    sorted, true, e0.6
  lgl$-           %5.1  = Missing            eR    name, e0.6
  lgl$-           %5.2  = Not                d     %5.1, elided
  lgl$#-          %5.3  = CheckTrueFalse     e     %5.2
  void                    Branch                   %5.3 -> BB41 (if true) | BB6 (if false)
BB41   <- [5]
  prom-           %41.0 = MkArg                    unboundValue, ls[0x55804e22b8e0]_p17, e0.6
  cls             %41.1 = MkCls                    ls@Prom(18)0, e0.6
  prom-           %41.2 = MkArg                    %41.1, ls[0x55804e22b8e0]_p18 (!refl), e0.6
  dots-           %41.3 = DotsList           l     error=%41.2
  val?            %41.4 = StaticCall         !v    tryCatch[0x55805040b2f0](%41.0, %41.3) { 0 1n } e0.6   <env+>
  void                    StVar              lW    pos, %41.4, e0.6
  lgl$#-          %41.6 = IsType                   %41.4 isA val?+
  val?^ | miss    %41.7 = LdVar              eR    inherits, e0.6
  lgl$#-          %41.8 = Identical                %41.7, function(x, what, which=FALSE) <(rir::Dispatch|...
  void                    Branch                   %41.8 -> BB56 (if true) | BB57 (if false)
BB6   <- [5]
  void                    Nop                !     
  goto BB7
BB56   <- [41]
  void                    Branch                   %41.6 -> BB58 (if true) | BB59 (if false)
BB57   <- [41]
  void                    Nop                !     
  val?^ | miss    %57.1 = %41.7
  dr              %57.2 = CallTarget@0x55804e875c40[Call#2]
  goto BB42
BB7   <- [6, 46, 51]
  val?^ | miss    %7.0  = LdVar              eR    envir, e0.6
  val?            %7.1  = Force!<lazy>       !v    %7.0, e0.6   <env+>
  val?^ | miss    %7.2  = LdVar              eR    all.names, e0.6
  val?            %7.3  = Force!<value>      !v    %7.2, e0.6   <lgl$->
  val?^ | miss    %7.4  = LdVar              eR    sorted, e0.6
  val?            %7.5  = Force!<lazy>       !v    %7.4, e0.6   <lgl$->
  val?            %7.6  = CallBuiltin        !v    ls(%7.1, %7.3, %7.5) e0.6   <str->
  void                    StVar              lW    all.names, %7.6, e0.6
  lgl$-           %7.8  = Missing            eR    pattern, e0.6
  lgl$-           %7.9  = Not                d     %7.8, elided
  lgl$#-          %7.10 = CheckTrueFalse     e     %7.9
  void                    Branch                   %7.10 -> BB10 (if true) | BB8 (if false)
BB58   <- [56]
  val?+           %58.0 = CastType           d     dn %41.4   <env+>
  val+            %58.1 = CallSafeBuiltin    wed   inherits(%58.0, "error", false)    <lgl$->
  lgl$#-          %58.2 = IsType                   %58.1 isA lgl$-
  void                    Branch                   %58.2 -> BB60 (if true) | BB61 (if false)
BB59   <- [56]
  void                    Nop                !     
  val?            %59.1 = %41.4
  dr              %59.2 = Typecheck@0x55804e875c40[Type#3]
  goto BB42
BB42   <- [57, 59]
  val?^ | miss    %42.0 = Phi                      %57.1:BB57, %59.1:BB59
  val?^ | miss    %42.1 = %42.0
  dr              %42.2 = Phi                      %57.2:BB57, %59.2:BB59
  dr              %42.3 = %42.2
  fs              %42.4 = FrameState         R     0x55804e24b790+77: [], env=e0.6
  void                    Deopt              !v    %42.4, %42.3, %42.1   !
BB10   <- [7]
  val?^ | miss    %10.0 = LdVar              eR    length, e0.6
  lgl$#-          %10.1 = Identical                <blt length>, %10.0   <@?>
  void                    Branch                   %10.1 -> BB38 (if true) | BB11 (if false)
BB8   <- [7]
  val             %8.0  = ChkMissing         e     %7.6
  void                    Visible            v     
  val?            %8.2  = %7.6
  goto BB9
BB60   <- [58]
  lgl$-           %60.0 = CastType           d     dn %58.1
  lgl$#-          %60.1 = CheckTrueFalse     e     %60.0
  void                    Branch                   %60.1 -> BB47 (if true) | BB46 (if false)
BB61   <- [58]
  prom-           %61.0 = MkArg                    unboundValue, ls[0x55804e22b8e0]_p19 (!refl), e0.6
  val?^           %61.1 = CastType                 up %61.0
  fs              %61.2 = FrameState         R     0x55804e24b790+114: [], env=e0.6
  env             e61.3 = (MkEnv)            l     which(miss)=false, what="error", x=%61.1, parent=R_BaseNamespace, context 0
  fs              %61.4 = FrameState         R     0x55804e0a27d0+55: [%58.1], env=e61.3, next=%61.2
  void                    Deopt              !v    %61.4, Typecheck@0x55804e875c40[Type#5], %58.1   !
BB38   <- [10]
  (cls|spec|blt)  %38.0 = LdFun              !v    grep, e0.6
  prom-           %38.1 = MkArg                    unboundValue, ls[0x55804e22b8e0]_p16, e0.6
  val?            %38.2 = NamedCall          !v    %38.0("[", %38.1, fixed=true) e0.6   <val?_>
  lgl$#-          %38.3 = IsType                   %38.2 isA val?+
  void                    Branch                   %38.3 -> BB62 (if true) | BB63 (if false)
BB11   <- [10]
  (cls|spec|blt)  %11.0 = LdFun              !v    grep, e0.6
  prom-           %11.1 = MkArg                    unboundValue, ls[0x55804e22b8e0]_p6, e0.6
  val?            %11.2 = NamedCall          !v    %11.0("[", %11.1, fixed=true) e0.6   <val?_>
  val?            %11.3 = CallBuiltin        !v    length(%11.2) e0.6
  val?            %11.4 = %11.3
  goto BB12
BB9   <- [8, 20]
  val?            %9.0  = Phi                      %8.2:BB8, %20.4:BB20
  val?            %9.1  = %9.0
  void                    Return             l     %9.1
BB47   <- [60]
  (cls|spec|blt)  %47.0 = LdFun              !v    substitute, e0.6
  prom-           %47.1 = MkArg                    unboundValue, ls[0x55804e22b8e0]_p20, e0.6
  val?            %47.2 = Call               !v    %47.0(%47.1) e0.6   <val?_>
  void                    StVar              lW    name, %47.2, e0.6
  val?^ | miss    %47.4 = LdVar              eR    is.character, e0.6
  lgl$#-          %47.5 = Identical                <blt is.character>, %47.4   <@?>
  void                    Branch                   %47.5 -> BB53 (if true) | BB48 (if false)
BB46   <- [60]
  void                    Nop                !     
  goto BB7
BB62   <- [38]
  val?+           %62.0 = CastType           d     dn %38.2   <val?_>
  (int|real)$-    %62.1 = CallSafeBuiltin    wed   length(%62.0) 
  (int|real)$-    %62.2 = %62.1
  goto BB12
BB63   <- [38]
  fs              %63.0 = FrameState         R     0x55804e24b790+609: [<blt length>, %38.2], env=e0.6
  void                    Deopt              !v    %63.0, Typecheck@0x55804e875c40[Type#24], %38.2   !
BB12   <- [11, 62]
  val?            %12.0 = Phi                      %11.4:BB11, %62.2:BB62   <val?_>
  val?            %12.1 = %12.0
  void                    StVar              lW    ll, %12.1, e0.6
  void                    Visible            v     
  lgl$-           %12.4 = AsLogical          e     %12.1
  lgl$#-          %12.5 = Identical                %12.4, false
  void                    Branch                   %12.5 -> BB37 (if true) | BB13 (if false)
BB53   <- [47]
  val             %53.0 = ChkMissing         e     %47.2
  lgl$#-          %53.1 = CallSafeBuiltin    wed   is.character(%47.2) 
  lgl$#-          %53.2 = %53.1
  goto BB49
BB48   <- [47]
  val             %48.0 = ChkMissing         e     %47.2
  lgl$#-          %48.1 = CallSafeBuiltin    wed   is.character(%47.2) 
  lgl$#-          %48.2 = %48.1
  goto BB49
BB37   <- [12]
  void                    Nop                !     
  lgl$-           %37.1 = %12.4
  goto BB18
BB13   <- [12]
  val             %13.0 = ChkMissing         e     %12.1
  val?^ | miss    %13.1 = LdVar              eR    length, e0.6
  lgl$#-          %13.2 = Identical                <blt length>, %13.1   <@?>
  void                    Branch                   %13.2 -> BB34 (if true) | BB14 (if false)
BB49   <- [53, 48]
  lgl$#-          %49.0 = Phi                      %48.2:BB48, %53.2:BB53   <val?_>
  lgl$#-          %49.1 = %49.0
  void                    Branch                   %49.1 -> BB52 (if true) | BB50 (if false)
BB18   <- [37, 72]
  lgl$-           %18.0 = Phi                      %72.4:BB72, %37.1:BB37
  lgl$-           %18.1 = %18.0
  lgl$#-          %18.2 = CheckTrueFalse     e     %18.1
  void                    Branch                   %18.2 -> BB21 (if true) | BB19 (if false)
BB34   <- [13]
  (cls|spec|blt)  %34.0 = LdFun              !v    grep, e0.6
  prom-           %34.1 = MkArg                    unboundValue, ls[0x55804e22b8e0]_p15, e0.6
  val?            %34.2 = NamedCall          !v    %34.0("]", %34.1, fixed=true) e0.6   <val?_>
  lgl$#-          %34.3 = IsType                   %34.2 isA val?+
  void                    Branch                   %34.3 -> BB64 (if true) | BB65 (if false)
BB14   <- [13]
  (cls|spec|blt)  %14.0 = LdFun              !v    grep, e0.6
  prom-           %14.1 = MkArg                    unboundValue, ls[0x55804e22b8e0]_p8, e0.6
  val?            %14.2 = NamedCall          !v    %14.0("]", %14.1, fixed=true) e0.6   <val?_>
  val?            %14.3 = CallBuiltin        !     length(%14.2) e0.6
  val?            %14.4 = %14.3
  goto BB15
BB52   <- [49]
  void                    Nop                !     
  goto BB51
BB50   <- [49]
  (cls|spec|blt)  %50.0 = LdFun              !v    deparse, e0.6
  prom-           %50.1 = MkArg                    unboundValue, ls[0x55804e22b8e0]_p25, e0.6
  val?            %50.2 = Call               !v    %50.0(%50.1) e0.6   <val?_>
  void                    StVar              lW    name, %50.2, e0.6
  goto BB51
BB21   <- [18]
  val?^ | miss    %21.0 = LdVar              eR    pattern, e0.6
  val?            %21.1 = Force!             !v    %21.0, e0.6   <val?_>
  lgl$#-          %21.2 = IsType                   %21.1 isA val?+
  void                    Branch                   %21.2 -> BB66 (if true) | BB67 (if false)
BB19   <- [18]
  void                    Nop                !     
  goto BB20
BB64   <- [34]
  val?+           %64.0 = CastType           d     dn %34.2   <val?_>
  (int|real)$-    %64.1 = CallSafeBuiltin    vwed  length(%64.0) 
  (int|real)$-    %64.2 = %64.1
  goto BB15
BB65   <- [34]
  fs              %65.0 = FrameState         R     0x55804e24b790+783: [%12.4, %12.1, <blt length>, %34.2], env=e0.6
  void                    Deopt              !v    %65.0, Typecheck@0x55804e875c40[Type#30], %34.2   !
BB15   <- [14, 64]
  val?            %15.0 = Phi                      %14.4:BB14, %64.2:BB64   <val?_>
  val?            %15.1 = %15.0
  lgl$#-          %15.2 = IsType                   %15.1 isA val?+
  lgl$#-          %15.3 = IsType                   %12.1 isA val?+
  void                    Branch                   %15.3 -> BB70 (if true) | BB71 (if false)
BB51   <- [52, 50]
  (cls|spec|blt)  %51.0 = LdFun              !v    warning, e0.6
  prom-           %51.1 = MkArg                    unboundValue, ls[0x55804e22b8e0]_p22, e0.6
  val?            %51.2 = NamedCall          !v    %51.0(%51.1, domain=na-lgl) e0.6
  val?^ | miss    %51.3 = LdVar              eR    name, e0.6
  val?            %51.4 = Force!             !v    %51.3, e0.6   <val?_>
  void                    StVar              lW    pos, %51.4, e0.6
  goto BB7
BB66   <- [21]
  val?+           %66.0 = CastType           d     dn %21.1   <val?_>
  lgl             %66.1 = Eq                 wed   %66.0, "[", elided   <val?_>
  lgl$#-          %66.2 = CheckTrueFalse     we    %66.1
  void                    Branch                   %66.2 -> BB33 (if true) | BB24 (if false)
BB67   <- [21]
  fs              %67.0 = FrameState         R     0x55804e24b790+838: [%21.1], env=e0.6
  void                    Deopt              !v    %67.0, Typecheck@0x55804e875c40[Type#33], %21.1   !
BB20   <- [19, 33, 28]
  (cls|spec|blt)  %20.0 = LdFun              !     grep, e0.6
  prom-           %20.1 = MkArg                    unboundValue, ls[0x55804e22b8e0]_p9, e0.6
  prom-           %20.2 = MkArg                    unboundValue, ls[0x55804e22b8e0]_p10, e0.6
  val?            %20.3 = NamedCall          !     %20.0(%20.1, %20.2, value=true) e0.6   <val?_>
  val?            %20.4 = %20.3
  goto BB9
BB70   <- [15]
  val?+           %70.0 = CastType           d     dn %12.1   <val?_>
  void                    Branch                   %15.2 -> BB72 (if true) | BB73 (if false)
BB71   <- [15]
  void                    Nop                !     
  val?            %71.1 = %12.1
  dr              %71.2 = Typecheck@0x55804e875c40[Type#25]
  goto BB16
BB33   <- [66]
  void                    Visible            v     
  void                    StVar              lW    pattern, "\[", e0.6
  (cls|spec|blt)  %33.2 = LdFun              !     warning, e0.6
  val?            %33.3 = Call               !     %33.2("replaced regular expression pattern '[' by  '|...) e0.6
  goto BB20
BB24   <- [66]
  val?^ | miss    %24.0 = LdVar              eR    length, e0.6
  lgl$#-          %24.1 = Identical                <blt length>, %24.0   <@?>
  void                    Branch                   %24.1 -> BB30 (if true) | BB25 (if false)
BB72   <- [70]
  val?+           %72.0 = CastType           d     dn %15.1   <val?_>
  lgl             %72.1 = Neq                vwed  %70.0, %72.0, elided   <val?_>
  lgl$-           %72.2 = AsLogical          e     %72.1
  lgl$-           %72.3 = LAnd                     %12.4, %72.2
  lgl$-           %72.4 = %72.3
  goto BB18
BB73   <- [70]
  void                    Nop                !     
  val?            %73.1 = %15.1
  dr              %73.2 = Typecheck@0x55804e875c40[Type#31]
  goto BB16
BB16   <- [71, 73]
  val?            %16.0 = Phi                      %71.1:BB71, %73.1:BB73
  val?            %16.1 = %16.0
  dr              %16.2 = Phi                      %71.2:BB71, %73.2:BB73
  dr              %16.3 = %16.2
  fs              %16.4 = FrameState         R     0x55804e24b790+805: [%12.4, %12.1, %15.1], env=e0.6
  void                    Deopt              !v    %16.4, %16.3, %16.1   !
BB30   <- [24]
  (cls|spec|blt)  %30.0 = LdFun              !v    grep, e0.6
  prom-           %30.1 = MkArg                    unboundValue, ls[0x55804e22b8e0]_p14, e0.6
  val?            %30.2 = Call               !v    %30.0("[^\\]\[<-", %30.1) e0.6   <val?_>
  lgl$#-          %30.3 = IsType                   %30.2 isA val?+
  void                    Branch                   %30.3 -> BB68 (if true) | BB69 (if false)
BB25   <- [24]
  (cls|spec|blt)  %25.0 = LdFun              !v    grep, e0.6
  prom-           %25.1 = MkArg                    unboundValue, ls[0x55804e22b8e0]_p12, e0.6
  val?            %25.2 = Call               !v    %25.0("[^\\]\[<-", %25.1) e0.6   <val?_>
  val?            %25.3 = CallBuiltin        !     length(%25.2) e0.6
  val?            %25.4 = %25.3
  goto BB26
BB68   <- [30]
  val?+           %68.0 = CastType           d     dn %30.2   <val?_>
  (int|real)$-    %68.1 = CallSafeBuiltin    vwed  length(%68.0) 
  (int|real)$-    %68.2 = %68.1
  goto BB26
BB69   <- [30]
  fs              %69.0 = FrameState         R     0x55804e24b790+958: [<blt length>, %30.2], env=e0.6
  void                    Deopt              !v    %69.0, Typecheck@0x55804e875c40[Type#38], %30.2   !
BB26   <- [25, 68]
  val?            %26.0 = Phi                      %25.4:BB25, %68.2:BB68   <val?_>
  val?            %26.1 = %26.0
  lgl$#-          %26.2 = CheckTrueFalse     we    %26.1
  void                    Branch                   %26.2 -> BB29 (if true) | BB27 (if false)
BB29   <- [26]
  (cls|spec|blt)  %29.0 = LdFun              !     sub, e0.6
  prom-           %29.1 = MkArg                    unboundValue, ls[0x55804e22b8e0]_p13, e0.6
  val?            %29.2 = Call               !     %29.0("\[<-", "\\\[<-", %29.1) e0.6   <val?_>
  void                    StVar              lW    pattern, %29.2, e0.6
  (cls|spec|blt)  %29.4 = LdFun              !     warning, e0.6
  val?            %29.5 = Call               !     %29.4("replaced '[<-' by '\\[<-' in regular expressi|...) e0.6
  goto BB28
BB27   <- [26]
  void                    Nop                !     
  goto BB28
BB28   <- [27, 29]
  void                    Nop                !     
  goto BB20
Prom 0:
BB0
  void                    Visible            v     
  void                    Return             l     -1L
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     as.environment, <0x55804beedb70>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, ls[0x55804e22b8e0]_p2, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <env+>
  void                    Return             l     %0.3
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    pos, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <env+>
  void                    Return             l     %0.3
Prom 6:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    pattern, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 8:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    pattern, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 9:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    pattern, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 10:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    all.names, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 12:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    pattern, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 13:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    pattern, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 14:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    pattern, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 15:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    pattern, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 16:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    pattern, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 17:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    name, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <env+>
  void                    Return             l     %0.3
Prom 18:
BB0
  env             e0.0  = LdFunctionEnv            
  cls             %0.1  = MkCls                    ls@Prom(18)0, e0.0
  void                    Return             l     %0.1
Prom 19:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    pos, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <env+>
  void                    Return             l     %0.3
Prom 20:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    name, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 22:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     gettextf, e0.0
  prom-           %0.2  = MkArg                    unboundValue, ls[0x55804e22b8e0]_p23, e0.0
  val?            %0.3  = Call               !     %0.1("%s converted to character string", %0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 23:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     sQuote, e0.0
  prom-           %0.2  = MkArg                    unboundValue, ls[0x55804e22b8e0]_p24, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 24:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    name, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 25:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    name, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3

│ ls[0x55804e22b8e0]                                                           │
└──────────────────────────────────────────────────────────────────────────────┘
