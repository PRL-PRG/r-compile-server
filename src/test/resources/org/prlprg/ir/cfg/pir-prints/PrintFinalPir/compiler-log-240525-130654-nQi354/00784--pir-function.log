
┌──────────────────────────────────────────────────────────────────────────────┐
│ [0x55804f9bd570]                                                             │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;NonRefl0,NonRefl1,!Obj0,!Obj1        │
│ Properties:                                                                  │
├────── Final PIR Version
[0x55804f9bd570]
BB0
  val?^           %0.0  = LdArg                    1
  val?^           %0.1  = LdArg                    0
  val?^ | miss    %0.2  = LdVar              eR    typeof, <env 0x55804e699488>
  lgl$#-          %0.3  = Identical                %0.2, function(x) <(rir::DispatchTable*)0x55804e1c3c|...
  void                    Branch                   %0.3 -> BB77 (if true) | BB78 (if false)
BB77   <- [0]
  env             e77.0 = MkEnv              l     v=%0.1, w=%0.0, parent=<env 0x55804e699488>, context 1
  val+            %77.1 = Force!<lazy>       !vr   %0.1,    <val?->
  str$-           %77.2 = CallSafeBuiltin    wed   typeof(%77.1)    <str$->
  lgl$-           %77.3 = Eq                 d     %77.2, "symbol", elided   <lgl$->
  lgl$#-          %77.4 = CheckTrueFalse     e     %77.3
  void                    Branch                   %77.4 -> BB7 (if true) | BB5 (if false)
BB78   <- [0]
  env             e78.0 = (MkEnv)            l     v=%0.1, w=%0.0, parent=<env 0x55804e699488>, context 1
  fs              %78.1 = FrameState         R     0x55804e9a6630+0: [], env=e78.0
  void                    Deopt              !v    %78.1, CallTarget@0x55804f22a9e8[Call#0], %0.2
BB7   <- [77]
  val?^ | miss    %7.0  = LdVar              eR    as.character, <env 0x55804e699488>
  lgl$#-          %7.1  = Identical                <blt as.character>, %7.0   <true>
  void                    Branch                   %7.1 -> BB79 (if true) | BB80 (if false)
BB5   <- [77]
  void                    Invisible          v     
  nil-            %5.1  = nil
  goto BB6
BB79   <- [7]
  lgl$#-          %79.0 = IsType                   %77.1 isA val?-
  void                    Branch                   %79.0 -> BB81 (if true) | BB82 (if false)
BB80   <- [7]
  void                    Nop                !     
  lgl$#-          %80.1 = %7.1
  dr              %80.2 = DeadBranchReached@0x55804f22a9e8[Test#0]
  goto BB3
BB6   <- [5, 64]
  val?            %6.0  = Phi                      %5.1:BB5, %64.2:BB64
  val?            %6.1  = %6.0
  void                    Return             l     %6.1
BB81   <- [79]
  val-            %81.0 = CastType           d     dn %77.1   <sym->
  val+            %81.1 = CallSafeBuiltin    wed   as.character(%81.0)    <str$->
  void                    StVar              lW    vn, %81.1, e77.0
  lgl-            %81.3 = Eq                 wed   %81.0, "...", elided   <lgl$->
  lgl$#-          %81.4 = IsType                   %81.3 isA lgl$-
  void                    Branch                   %81.4 -> BB83 (if true) | BB84 (if false)
BB82   <- [79]
  void                    Nop                !     
  val+            %82.1 = %77.1
  dr              %82.2 = Typecheck@0x55804f22a9e8[Type#4]
  goto BB3
BB3   <- [80, 82]
  val?^ | miss    %3.0  = Phi                      %80.1:BB80, %82.1:BB82
  val?^ | miss    %3.1  = %3.0
  dr              %3.2  = Phi                      %80.2:BB80, %82.2:BB82
  dr              %3.3  = %3.2
  fs              %3.4  = FrameState         R     0x55804e9a6630+32: [], env=e77.0
  prom-           %3.5  = MkArg                    %77.1, [0x55804f9bd570]_p0 (!refl), e77.0
  val?~           %3.6  = CastType                 up %3.5
  env             e3.7  = (MkEnv)            l     x=%3.6, parent=R_BaseNamespace, context 0
  fs              %3.8  = FrameState         R     0x55804e7773a0+27: [%77.2], env=e3.7, next=%3.4
  void                    Deopt              !v    %3.8, %3.3, %3.1
BB83   <- [81]
  lgl$-           %83.0 = CastType           d     dn %81.3
  lgl$#-          %83.1 = CheckTrueFalse     e     %83.0
  void                    Branch                   %83.1 -> BB75 (if true) | BB10 (if false)
BB84   <- [81]
  void                    Nop                !     
  lgl-            %84.1 = %81.3
  dr              %84.2 = Typecheck@0x55804f22a9e8[Type#7]
  goto BB8
BB75   <- [83]
  (cls|spec|blt)  %75.0 = LdFun              !v    $, <env 0x55804e699488>
  fs              %75.1 = FrameState         R     0x55804e9a6630+853: [%75.0], env=e77.0
  void                    Deopt              !v    %75.1, DeadCall@0x55804f22a9e8[Call#18], %75.0
BB10   <- [83]
  val?^ | miss    %10.0 = LdVar              eR    isDDSym, <env 0x55804e699488>
  lgl$#-          %10.1 = Identical                %10.0, function(name) <(rir::DispatchTable*)0x55804e2|...
  void                    Branch                   %10.1 -> BB85 (if true) | BB86 (if false)
BB8   <- [84, 86]
  val?^ | miss    %8.0  = Phi                      %84.1:BB84, %86.1:BB86
  val?^ | miss    %8.1  = %8.0
  dr              %8.2  = Phi                      %84.2:BB84, %86.2:BB86
  dr              %8.3  = %8.2
  fs              %8.4  = FrameState         R     0x55804e9a6630+192: [%81.3], env=e77.0
  void                    Deopt              !v    %8.4, %8.3, %8.1
BB85   <- [10]
  prom-           %85.0 = MkArg                    unboundValue, [0x55804f9bd570]_p1 (!refl), e77.0
  ct              %85.1 = PushContext        lCL   %85.0, isDDSym(v), function(name) <(rir::DispatchTable*)0x55804e2|..., e77.0
  val?^           %85.2 = CastType                 up %85.0
  val?^ | miss    %85.3 = LdVar              eR    is.symbol, <env 0x55804e699488>
  lgl$#-          %85.4 = Identical                <blt is.symbol>, %85.3   <true>
  void                    Branch                   %85.4 -> BB87 (if true) | BB88 (if false)
BB86   <- [10]
  void                    Nop                !     
  val?^ | miss    %86.1 = %10.0
  dr              %86.2 = CallTarget@0x55804f22a9e8[Call#2]
  goto BB8
BB87   <- [85]
  env             e87.0 = MkEnv              l     name=%85.2, parent=<env 0x55804e699488>, context 1
  val?            %87.1 = Force!<lazy>       !vr   %85.2,    <(sym|str)->
  lgl$#-          %87.2 = CallSafeBuiltin    wed   is.symbol(%87.1)    <lgl$->
  void                    Branch                   %87.2 -> BB74 (if true) | BB15 (if false)
BB88   <- [85]
  fs              %88.0 = FrameState         R     0x55804e9a6630+235: [], env=e77.0
  env             e88.1 = (MkEnv)            l     name=%85.2, parent=<env 0x55804e699488>, context 1
  fs              %88.2 = FrameState         R     0x55804ed96dd0+17: [<blt is.symbol>, %85.4], env=e88.1, next=%88.0
  void                    Deopt              !v    %88.2, DeadBranchReached@0x55804eaeb288[Test#0], %85.4   !
BB74   <- [87]
  void                    Nop                !     
  lgl$#-          %74.1 = %87.2
  goto BB16
BB15   <- [87]
  val?^ | miss    %15.0 = LdVar              eR    is.character, <env 0x55804e699488>
  lgl$#-          %15.1 = Identical                <blt is.character>, %15.0   <true>
  void                    Branch                   %15.1 -> BB89 (if true) | BB90 (if false)
BB16   <- [74, 89]
  lgl$-           %16.0 = Phi                      %89.2:BB89, %74.1:BB74
  lgl$-           %16.1 = %16.0
  lgl$-           %16.2 = AsLogical                %16.1
  lgl$#-          %16.3 = Identical                %16.2, false
  void                    Branch                   %16.3 -> BB73 (if true) | BB19 (if false)
BB89   <- [15]
  lgl$#-          %89.0 = CallSafeBuiltin    wed   is.character(%87.1)    <lgl$->
  lgl$-           %89.1 = LOr                      %87.2, %89.0
  lgl$-           %89.2 = %89.1
  goto BB16
BB90   <- [15]
  fs              %90.0 = FrameState         R     0x55804e9a6630+235: [], env=e77.0
  fs              %90.1 = FrameState         R     0x55804ed96dd0+91: [%87.2], env=e87.0, next=%90.0
  void                    Deopt              !v    %90.1, DeadBranchReached@0x55804eaeb288[Test#1], %15.1   !
BB73   <- [16]
  void                    Nop                !     
  lgl$-           %73.1 = %16.2
  goto BB24
BB19   <- [16]
  val?^ | miss    %19.0 = LdVar              eR    length, <env 0x55804e699488>
  lgl$#-          %19.1 = Identical                <blt length>, %19.0   <true>
  void                    Branch                   %19.1 -> BB91 (if true) | BB92 (if false)
BB24   <- [73, 99]
  lgl$-           %24.0 = Phi                      %99.4:BB99, %73.1:BB73
  lgl$-           %24.1 = %24.0
  val?            %24.2 = PopContext         C     %24.1, %85.1   <lgl$->
  lgl$#-          %24.3 = IsType                   %24.2 isA lgl$-
  void                    Branch                   %24.3 -> BB97 (if true) | BB98 (if false)
BB91   <- [19]
  val?^ | miss    %91.0 = LdVar              eR    grep, <env 0x55804e699488>
  lgl$#-          %91.1 = Identical                %91.0, function(pattern, x, ignore.case=FALSE, perl=F|...
  void                    Branch                   %91.1 -> BB93 (if true) | BB94 (if false)
BB92   <- [19]
  void                    Nop                !     
  lgl$#-          %92.1 = %19.1
  dr              %92.2 = DeadBranchReached@0x55804eaeb288[Test#2]
  goto BB17
BB97   <- [24]
  lgl$-           %97.0 = CastType           d     dn %24.2
  lgl$#-          %97.1 = CheckTrueFalse     e     %97.0
  void                    Branch                   %97.1 -> BB72 (if true) | BB27 (if false)
BB98   <- [24]
  fs              %98.0 = FrameState         R     0x55804e9a6630+235: [%24.2], env=e77.0
  void                    Deopt              !v    %98.0, Typecheck@0x55804f22a9e8[Type#9], %24.2   !
BB93   <- [91]
  prom-           %93.0 = MkArg                    unboundValue, [0x55804f9bd570]_p25, e87.0
  val?            %93.1 = StaticCall         !v    grep[0x55804eba96f0]("^\.\.[[:digit:]]+$", %93.0) e87.0   <int->
  lgl$#-          %93.2 = IsType                   %93.1 isA int-
  void                    Branch                   %93.2 -> BB95 (if true) | BB96 (if false)
BB94   <- [91]
  void                    Nop                !     
  val?^ | miss    %94.1 = %91.0
  dr              %94.2 = CallTarget@0x55804eaeb288[Call#5]
  goto BB17
BB17   <- [92, 94]
  val?^ | miss    %17.0 = Phi                      %92.1:BB92, %94.1:BB94
  val?^ | miss    %17.1 = %17.0
  dr              %17.2 = Phi                      %92.2:BB92, %94.2:BB94
  dr              %17.3 = %17.2
  fs              %17.4 = FrameState         R     0x55804e9a6630+235: [], env=e77.0
  fs              %17.5 = FrameState         R     0x55804ed96dd0+201: [%16.1], env=e87.0, next=%17.4
  void                    Deopt              !v    %17.5, %17.3, %17.1   !
BB72   <- [97]
  (cls|spec|blt)  %72.0 = LdFun              !v    $, e77.0
  fs              %72.1 = FrameState         R     0x55804e9a6630+587: [%72.0], env=e77.0
  void                    Deopt              !v    %72.1, DeadCall@0x55804f22a9e8[Call#11], %72.0   !
BB27   <- [97]
  (cls|spec|blt)  %27.0 = LdFun              !v    $, <0x55804bee0c10>, e77.0
  prom-           %27.1 = MkArg                    unboundValue, [0x55804f9bd570]_p2, e77.0
  prom-           %27.2 = MkArg                    unboundValue, [0x55804f9bd570]_p3, e77.0
  val?            %27.3 = Call               !v    %27.0(%27.1, %27.2) e77.0   <cls->
  (cls|spec|blt)  %27.4 = ChkFunction        e     %27.3
  prom-           %27.5 = MkArg                    unboundValue, [0x55804f9bd570]_p4, e77.0
  prom-           %27.6 = MkArg                    unboundValue, [0x55804f9bd570]_p5, e77.0
  lgl$#-          %27.7 = Identical                %27.4, function(v, w) <(rir::DispatchTable*)0x55804e5|...
  val?^           %27.8 = CastType                 up %27.6
  val?^           %27.9 = CastType                 up %27.5
  void                    Branch                   %27.7 -> BB101 (if true) | BB102 (if false)
BB95   <- [93]
  int-            %95.0 = CastType           d     dn %93.1
  (int|real)$-    %95.1 = CallSafeBuiltin    wed   length(%95.0)    <int$->
  lgl$#-          %95.2 = IsType                   %95.1 isA int$-
  void                    Branch                   %95.2 -> BB99 (if true) | BB100 (if false)
BB96   <- [93]
  fs              %96.0 = FrameState         R     0x55804e9a6630+235: [], env=e77.0
  fs              %96.1 = FrameState         R     0x55804ed96dd0+306: [%16.2, <blt length>, %93.1], env=e87.0, next=%96.0
  void                    Deopt              !v    %96.1, Typecheck@0x55804eaeb288[Type#11], %93.1   !
BB101   <- [27]
  ct              %101.0 = PushContext        lCL   %27.5, %27.6, $(w, isLocal)(vn, w), function(v, w) <(rir::DispatchTable*)0x55804e5|..., e77.0
  val?^ | miss    %101.1 = LdVar              eR    isDDSym, <env 0x55804e699488>
  lgl$#-          %101.2 = Identical                %101.1, function(name) <(rir::DispatchTable*)0x55804e2|...
  void                    Branch                   %101.2 -> BB103 (if true) | BB104 (if false)
BB102   <- [27]
  fs              %102.0 = FrameState         R     0x55804e9a6630+283: [%27.3], env=e77.0
  void                    Deopt              !v    %102.0, CallTarget@0x55804f22a9e8[Call#4], %27.4   !
BB99   <- [95]
  int$-           %99.0 = CastType           d     dn %95.1
  lgl$-           %99.1 = Neq                d     %99.0, 0, elided   <lgl$->
  lgl$-           %99.2 = AsLogical                %99.1
  lgl$-           %99.3 = LAnd                     %16.2, %99.2
  lgl$-           %99.4 = %99.3
  goto BB24
BB100   <- [95]
  fs              %100.0 = FrameState         R     0x55804e9a6630+235: [], env=e77.0
  fs              %100.1 = FrameState         R     0x55804ed96dd0+328: [%16.2, %95.1], env=e87.0, next=%100.0
  void                    Deopt              !v    %100.1, Typecheck@0x55804eaeb288[Type#12], %95.1   !
BB103   <- [101]
  env             e103.0 = MkEnv              l     v=%27.9, w=%27.8, parent=<env 0x55804e699488>, context 1
  prom-           %103.1 = MkArg                    unboundValue, [0x55804f9bd570]_p13, e103.0
  ct              %103.2 = PushContext        lCL   %103.1, isDDSym(v), function(name) <(rir::DispatchTable*)0x55804e2|..., e103.0
  val?^           %103.3 = CastType                 up %103.1
  val?^ | miss    %103.4 = LdVar              eR    is.symbol, <env 0x55804e699488>
  lgl$#-          %103.5 = Identical                <blt is.symbol>, %103.4   <true>
  void                    Branch                   %103.5 -> BB105 (if true) | BB106 (if false)
BB104   <- [101]
  fs              %104.0 = FrameState         R     0x55804e9a6630+321: [], env=e77.0
  env             e104.1 = (MkEnv)            l     v=%27.9, w=%27.8, parent=<env 0x55804e699488>, context 1
  fs              %104.2 = FrameState         R     0x55804eb466f0+0: [], env=e104.1, next=%104.0
  void                    Deopt              !v    %104.2, CallTarget@0x55804f22bd28[Call#0], %101.1   !
BB105   <- [103]
  env             e105.0 = MkEnv              l     name=%103.3, parent=<env 0x55804e699488>, context 1
  val?            %105.1 = Force!<lazy>       !vL   %103.3, e105.0   <(sym|str)->
  lgl$#-          %105.2 = CallSafeBuiltin    wed   is.symbol(%105.1)    <lgl$->
  void                    Branch                   %105.2 -> BB71 (if true) | BB36 (if false)
BB106   <- [103]
  fs              %106.0 = FrameState         R     0x55804e9a6630+321: [], env=e77.0
  fs              %106.1 = FrameState         R     0x55804eb466f0+32: [], env=e103.0, next=%106.0
  env             e106.2 = (MkEnv)            l     name=%103.3, parent=<env 0x55804e699488>, context 1
  fs              %106.3 = FrameState         R     0x55804ed96dd0+17: [<blt is.symbol>, %103.5], env=e106.2, next=%106.1
  void                    Deopt              !v    %106.3, DeadBranchReached@0x55804eaeb288[Test#0], %103.5   !
BB71   <- [105]
  void                    Nop                !     
  lgl$#-          %71.1 = %105.2
  goto BB37
BB36   <- [105]
  val?^ | miss    %36.0 = LdVar              eR    is.character, <env 0x55804e699488>
  lgl$#-          %36.1 = Identical                <blt is.character>, %36.0   <true>
  void                    Branch                   %36.1 -> BB107 (if true) | BB108 (if false)
BB37   <- [71, 107]
  lgl$-           %37.0 = Phi                      %107.2:BB107, %71.1:BB71
  lgl$-           %37.1 = %37.0
  lgl$-           %37.2 = AsLogical                %37.1
  lgl$#-          %37.3 = Identical                %37.2, false
  void                    Branch                   %37.3 -> BB70 (if true) | BB40 (if false)
BB107   <- [36]
  lgl$#-          %107.0 = CallSafeBuiltin    wed   is.character(%105.1)    <lgl$->
  lgl$-           %107.1 = LOr                      %105.2, %107.0
  lgl$-           %107.2 = %107.1
  goto BB37
BB108   <- [36]
  fs              %108.0 = FrameState         R     0x55804e9a6630+321: [], env=e77.0
  fs              %108.1 = FrameState         R     0x55804eb466f0+32: [], env=e103.0, next=%108.0
  fs              %108.2 = FrameState         R     0x55804ed96dd0+91: [%105.2], env=e105.0, next=%108.1
  void                    Deopt              !v    %108.2, DeadBranchReached@0x55804eaeb288[Test#1], %36.1   !
BB70   <- [37]
  void                    Nop                !     
  lgl$-           %70.1 = %37.2
  goto BB45
BB40   <- [37]
  val?^ | miss    %40.0 = LdVar              eR    length, <env 0x55804e699488>
  lgl$#-          %40.1 = Identical                <blt length>, %40.0   <true>
  void                    Branch                   %40.1 -> BB109 (if true) | BB110 (if false)
BB45   <- [70, 117]
  lgl$-           %45.0 = Phi                      %117.4:BB117, %70.1:BB70
  lgl$-           %45.1 = %45.0
  val?            %45.2 = PopContext         C     %45.1, %103.2   <lgl$->
  lgl$#-          %45.3 = IsType                   %45.2 isA lgl$-
  void                    Branch                   %45.3 -> BB111 (if true) | BB112 (if false)
BB109   <- [40]
  val?^ | miss    %109.0 = LdVar              eR    grep, <env 0x55804e699488>
  lgl$#-          %109.1 = Identical                %109.0, function(pattern, x, ignore.case=FALSE, perl=F|...
  void                    Branch                   %109.1 -> BB113 (if true) | BB114 (if false)
BB110   <- [40]
  void                    Nop                !     
  lgl$#-          %110.1 = %40.1
  dr              %110.2 = DeadBranchReached@0x55804eaeb288[Test#2]
  goto BB38
BB111   <- [45]
  lgl$-           %111.0 = CastType           d     dn %45.2
  lgl$#-          %111.1 = CheckTrueFalse     e     %111.0
  void                    Branch                   %111.1 -> BB69 (if true) | BB48 (if false)
BB112   <- [45]
  fs              %112.0 = FrameState         R     0x55804e9a6630+321: [], env=e77.0
  fs              %112.1 = FrameState         R     0x55804eb466f0+32: [%45.2], env=e103.0, next=%112.0
  void                    Deopt              !v    %112.1, Typecheck@0x55804f22bd28[Type#1], %45.2   !
BB113   <- [109]
  prom-           %113.0 = MkArg                    unboundValue, [0x55804f9bd570]_p23, e105.0
  val?            %113.1 = StaticCall         !v    grep[0x55804eba96f0]("^\.\.[[:digit:]]+$", %113.0) e105.0   <int->
  lgl$#-          %113.2 = IsType                   %113.1 isA int-
  void                    Branch                   %113.2 -> BB115 (if true) | BB116 (if false)
BB114   <- [109]
  void                    Nop                !     
  val?^ | miss    %114.1 = %109.0
  dr              %114.2 = CallTarget@0x55804eaeb288[Call#5]
  goto BB38
BB38   <- [110, 114]
  val?^ | miss    %38.0 = Phi                      %110.1:BB110, %114.1:BB114
  val?^ | miss    %38.1 = %38.0
  dr              %38.2 = Phi                      %110.2:BB110, %114.2:BB114
  dr              %38.3 = %38.2
  fs              %38.4 = FrameState         R     0x55804e9a6630+321: [], env=e77.0
  fs              %38.5 = FrameState         R     0x55804eb466f0+32: [], env=e103.0, next=%38.4
  fs              %38.6 = FrameState         R     0x55804ed96dd0+201: [%37.1], env=e105.0, next=%38.5
  void                    Deopt              !v    %38.6, %38.3, %38.1   !
BB69   <- [111]
  void                    StVar              lW    v, "...", e103.0
  goto BB49
BB48   <- [111]
  void                    Nop                !     
  goto BB49
BB115   <- [113]
  int-            %115.0 = CastType           d     dn %113.1
  (int|real)$-    %115.1 = CallSafeBuiltin    wed   length(%115.0)    <int$->
  lgl$#-          %115.2 = IsType                   %115.1 isA int$-
  void                    Branch                   %115.2 -> BB117 (if true) | BB118 (if false)
BB116   <- [113]
  fs              %116.0 = FrameState         R     0x55804e9a6630+321: [], env=e77.0
  fs              %116.1 = FrameState         R     0x55804eb466f0+32: [], env=e103.0, next=%116.0
  fs              %116.2 = FrameState         R     0x55804ed96dd0+306: [%37.2, <blt length>, %113.1], env=e105.0, next=%116.1
  void                    Deopt              !v    %116.2, Typecheck@0x55804eaeb288[Type#11], %113.1   !
BB49   <- [48, 69]
  val?^ | miss    %49.0 = LdVar              eR    is.baseenv, e103.0
  lgl$#-          %49.1 = Identical                %49.0, function(e) <(rir::DispatchTable*)0x55804e41e7|...
  void                    Branch                   %49.1 -> BB119 (if true) | BB120 (if false)
BB117   <- [115]
  int$-           %117.0 = CastType           d     dn %115.1
  lgl$-           %117.1 = Neq                d     %117.0, 0, elided   <lgl$->
  lgl$-           %117.2 = AsLogical                %117.1
  lgl$-           %117.3 = LAnd                     %37.2, %117.2
  lgl$-           %117.4 = %117.3
  goto BB45
BB118   <- [115]
  fs              %118.0 = FrameState         R     0x55804e9a6630+321: [], env=e77.0
  fs              %118.1 = FrameState         R     0x55804eb466f0+32: [], env=e103.0, next=%118.0
  fs              %118.2 = FrameState         R     0x55804ed96dd0+328: [%37.2, %115.1], env=e105.0, next=%118.1
  void                    Deopt              !v    %118.2, Typecheck@0x55804eaeb288[Type#12], %115.1   !
BB119   <- [49]
  prom-           %119.0 = MkArg                    unboundValue, [0x55804f9bd570]_p14, e103.0
  ct              %119.1 = PushContext        lCL   %119.0, is.baseenv(findOwnerEnv(v, $(w, env), stop=$(w|..., function(e) <(rir::DispatchTable*)0x55804e41e7|..., e103.0
  val?^           %119.2 = CastType                 up %119.0
  val?^ | miss    %119.3 = LdVar              eR    identical, <env 0x55804e699488>
  lgl$#-          %119.4 = Identical                %119.3, function(x, y, num.eq=TRUE, single.NA=TRUE, at|...
  void                    Branch                   %119.4 -> BB121 (if true) | BB122 (if false)
BB120   <- [49]
  fs              %120.0 = FrameState         R     0x55804e9a6630+321: [], env=e77.0
  fs              %120.1 = FrameState         R     0x55804eb466f0+63: [], env=e103.0, next=%120.0
  void                    Deopt              !v    %120.1, CallTarget@0x55804f22bd28[Call#1], %49.0   !
BB121   <- [119]
  env             e121.0 = MkEnv              l     e=%119.2, parent=<env 0x55804e699488>, context 1
  prom-           %121.1 = MkArg                    unboundValue, [0x55804f9bd570]_p27, e121.0
  prom-           %121.2 = MkArg                    unboundValue, [0x55804f9bd570]_p28, e121.0
  ct              %121.3 = PushContext        lCL   %121.1, %121.2, identical(e, .BaseEnv), function(x, y, num.eq=TRUE, single.NA=TRUE, at|..., e121.0
  val?^           %121.4 = CastType                 up %121.2
  val?^           %121.5 = CastType                 up %121.1
  env             e121.6 = MkEnv              l     x=%121.5, y=%121.4, num.eq(miss)=true, single.NA(miss)=true, attrib.as.set(miss)=true, ignore.bytecode(miss)=true, ignore.environment(miss)=false, ignore.srcref(miss)=true, parent=R_BaseNamespace, context 1
  val?            %121.7 = Force!<lazy>       !vL   %121.5, e121.6   <val?+>
  val?            %121.8 = Force!<lazy>       !vL   %121.4, e121.6   <val?+>
  val?            %121.9 = CallBuiltin        !     identical(%121.7, %121.8, true, true, true, true, false, true) e121.6
  val?            %121.10 = PopContext         C     %121.9, %121.3   <lgl$->
  lgl$#-          %121.11 = IsType                   %121.10 isA lgl$-
  void                    Branch                   %121.11 -> BB123 (if true) | BB124 (if false)
BB122   <- [119]
  fs              %122.0 = FrameState         R     0x55804e9a6630+321: [], env=e77.0
  fs              %122.1 = FrameState         R     0x55804eb466f0+95: [], env=e103.0, next=%122.0
  env             e122.2 = (MkEnv)            l     e=%119.2, parent=<env 0x55804e699488>, context 1
  fs              %122.3 = FrameState         R     0x55804eb37490+0: [], env=e122.2, next=%122.1
  void                    Deopt              !v    %122.3, CallTarget@0x55804ea246f8[Call#0], %119.3   !
BB123   <- [121]
  lgl$-           %123.0 = CastType           d     dn %121.10
  val?            %123.1 = PopContext         C     %123.0, %119.1   <lgl$->
  lgl$#-          %123.2 = IsType                   %123.1 isA lgl$-
  void                    Branch                   %123.2 -> BB125 (if true) | BB126 (if false)
BB124   <- [121]
  fs              %124.0 = FrameState         R     0x55804e9a6630+321: [], env=e77.0
  fs              %124.1 = FrameState         R     0x55804eb466f0+95: [], env=e103.0, next=%124.0
  fs              %124.2 = FrameState         R     0x55804eb37490+37: [%121.10], env=e121.0, next=%124.1
  void                    Deopt              !v    %124.2, Typecheck@0x55804ea246f8[Type#2], %121.10   !
BB125   <- [123]
  lgl$-           %125.0 = CastType           d     dn %123.1
  lgl$-           %125.1 = Not                vd    %125.0, elided
  val?            %125.2 = PopContext         C     %125.1, %101.0   <lgl$->
  lgl$#-          %125.3 = IsType                   %125.2 isA lgl$-
  void                    Branch                   %125.3 -> BB127 (if true) | BB128 (if false)
BB126   <- [123]
  fs              %126.0 = FrameState         R     0x55804e9a6630+321: [], env=e77.0
  fs              %126.1 = FrameState         R     0x55804eb466f0+95: [%123.1], env=e103.0, next=%126.0
  void                    Deopt              !v    %126.1, Typecheck@0x55804f22bd28[Type#11], %123.1   !
BB127   <- [125]
  lgl$-           %127.0 = CastType           d     dn %125.2
  lgl$#-          %127.1 = CheckTrueFalse     e     %127.0
  void                    Branch                   %127.1 -> BB66 (if true) | BB60 (if false)
BB128   <- [125]
  void                    Nop                !     
  val?            %128.1 = %125.2
  dr              %128.2 = Typecheck@0x55804f22a9e8[Type#15]
  goto BB58
BB66   <- [127]
  (cls|spec|blt)  %66.0 = LdFun              !     $, <0x55804bee0c10>, e77.0
  prom-           %66.1 = MkArg                    unboundValue, [0x55804f9bd570]_p8, e77.0
  prom-           %66.2 = MkArg                    unboundValue, [0x55804f9bd570]_p9, e77.0
  val?            %66.3 = Call               !     %66.0(%66.1, %66.2) e77.0   <cls->
  (cls|spec|blt)  %66.4 = ChkFunction        e     %66.3
  prom-           %66.5 = MkArg                    unboundValue, [0x55804f9bd570]_p10, e77.0
  prom-           %66.6 = MkArg                    unboundValue, [0x55804f9bd570]_p11, e77.0
  prom-           %66.7 = MkArg                    unboundValue, [0x55804f9bd570]_p12, e77.0
  lgl$#-          %66.8 = Identical                %66.4, function(type, n, e, w) <(rir::DispatchTable*)|...
  void                    Branch                   %66.8 -> BB131 (if true) | BB132 (if false)
BB60   <- [127]
  val?^ | miss    %60.0 = LdVar              eR    %in%, e77.0
  lgl$#-          %60.1 = Identical                %60.0, function(x, table) <(rir::DispatchTable*)0x558|...
  void                    Branch                   %60.1 -> BB129 (if true) | BB130 (if false)
BB58   <- [128, 130]
  val?^ | miss    %58.0 = Phi                      %128.1:BB128, %130.1:BB130
  val?^ | miss    %58.1 = %58.0
  dr              %58.2 = Phi                      %128.2:BB128, %130.2:BB130
  dr              %58.3 = %58.2
  fs              %58.4 = FrameState         R     0x55804e9a6630+321: [%125.2], env=e77.0
  void                    Deopt              !v    %58.4, %58.3, %58.1   !
BB131   <- [66]
  val?            %131.0 = StaticCall         !     [0x55804e1c3ba0]("variable", %66.5, %66.6, %66.7) e77.0   <vec>
  val?            %131.1 = %131.0
  goto BB64
BB132   <- [66]
  fs              %132.0 = FrameState         R     0x55804e9a6630+524: [%66.3], env=e77.0
  void                    Deopt              !v    %132.0, CallTarget@0x55804f22a9e8[Call#10], %66.4   !
BB129   <- [60]
  prom-           %129.0 = MkArg                    unboundValue, [0x55804f9bd570]_p7, e77.0
  val?^ | miss    %129.1 = LdVar              eR    vn, e77.0
  val?            %129.2 = Force!<value>      !v    %129.1, e77.0   <str$->
  prom-           %129.3 = MkArg                    %129.2, [0x55804f9bd570]_p6 (!refl), 
  val?            %129.4 = StaticCall         !v    %in%[0x55804f2b8b30](%129.3, %129.0) e77.0   <lgl$->
  lgl$#-          %129.5 = IsType                   %129.4 isA lgl$-
  void                    Branch                   %129.5 -> BB133 (if true) | BB134 (if false)
BB130   <- [60]
  void                    Nop                !     
  val?^ | miss    %130.1 = %60.0
  dr              %130.2 = CallTarget@0x55804f22a9e8[Call#5]
  goto BB58
BB64   <- [63, 131]
  val?            %64.0 = Phi                      %63.1:BB63, %131.1:BB131
  val?            %64.1 = %64.0
  val?            %64.2 = %64.1
  goto BB6
BB133   <- [129]
  lgl$-           %133.0 = CastType           d     dn %129.4
  lgl$-           %133.1 = Not                d     %133.0, elided
  lgl$#-          %133.2 = CheckTrueFalse     e     %133.1
  void                    Branch                   %133.2 -> BB65 (if true) | BB63 (if false)
BB134   <- [129]
  fs              %134.0 = FrameState         R     0x55804e9a6630+369: [%129.4], env=e77.0
  void                    Deopt              !v    %134.0, Typecheck@0x55804f22a9e8[Type#18], %129.4   !
BB65   <- [133]
  (cls|spec|blt)  %65.0 = LdFun              !v    $, e77.0
  fs              %65.1 = FrameState         R     0x55804e9a6630+397: [%65.0], env=e77.0
  void                    Deopt              !v    %65.1, DeadCall@0x55804f22a9e8[Call#7], %65.0   !
BB63   <- [133]
  void                    Invisible          v     
  nil-            %63.1 = nil
  goto BB64
Prom 0:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    v, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <val?->
  void                    Return             l     %0.3
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    v, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <sym->
  void                    Return             l     %0.3
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    w, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 3:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    isLocal, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 4:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    vn, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 5:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    w, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 6:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    vn, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 7:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     c, <0x55804bee1940>, e0.0
  val?            %0.2  = Call               !     %0.1("*tmp*", "*tmpv*") e0.0   <str->
  void                    Return             l     %0.2
Prom 8:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    w, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 9:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    enterLocal, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 10:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    vn, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 11:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    v, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 12:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    w, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 13:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    v, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 14:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     findOwnerEnv, <0x55804e95cf28>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, [0x55804f9bd570]_p15, e0.0
  prom-           %0.3  = MkArg                    unboundValue, [0x55804f9bd570]_p16, e0.0
  prom-           %0.4  = MkArg                    unboundValue, [0x55804f9bd570]_p19, e0.0
  prom-           %0.5  = MkArg                    unboundValue, [0x55804f9bd570]_p22, e0.0
  val?            %0.6  = NamedCall          !     %0.1(%0.2, %0.3, stop=%0.4, default=%0.5) e0.0   <env+>
  void                    Return             l     %0.6
Prom 15:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    v, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 16:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     $, <0x55804bee0c10>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, [0x55804f9bd570]_p17, e0.0
  prom-           %0.3  = MkArg                    unboundValue, [0x55804f9bd570]_p18, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <env+>
  void                    Return             l     %0.4
Prom 17:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    w, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 18:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    env, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 19:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     $, <0x55804bee0c10>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, [0x55804f9bd570]_p20, e0.0
  prom-           %0.3  = MkArg                    unboundValue, [0x55804f9bd570]_p21, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <env->
  void                    Return             l     %0.4
Prom 20:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    w, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 21:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    globalenv, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 22:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    .BaseEnv, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 23:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     as.character, <0x55804beee040>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, [0x55804f9bd570]_p24, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <str$->
  void                    Return             l     %0.3
Prom 24:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    name, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <(sym|str)->
  void                    Return             l     %0.3
Prom 25:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     as.character, <0x55804beee040>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, [0x55804f9bd570]_p26, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <str$->
  void                    Return             l     %0.3
Prom 26:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    name, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <(sym|str)->
  void                    Return             l     %0.3
Prom 27:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    e, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <(lgl|env)+>
  void                    Return             l     %0.3
Prom 28:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    .BaseEnv, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <env->
  void                    Return             l     %0.3

│ [0x55804f9bd570]                                                             │
└──────────────────────────────────────────────────────────────────────────────┘
