
┌──────────────────────────────────────────────────────────────────────────────┐
│ h[0x55805098f040]                                                            │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;NonRefl0,NonRefl1,!Obj0,!Obj1        │
│ Properties:                                                                  │
├────── Final PIR Version
h[0x55805098f040]
BB0
  val?^           %0.0  = LdArg                    1
  val?^           %0.1  = LdArg                    0
  env             e0.2  = MkEnv              l     e=%0.1, w=%0.0, parent=<env 0x55804e7d5a30>, context 1
  (cls|spec|blt)  %0.3  = LdFun              !     $, <0x55804bee0c10>, <env 0x55804e7d5a30>
  prom-           %0.4  = MkArg                    unboundValue, h[0x55805098f040]_p0 (!refl), e0.2
  prom-           %0.5  = MkArg                    unboundValue, h[0x55805098f040]_p1, e0.2
  val?            %0.6  = Call               !     %0.3(%0.4, %0.5) e0.2   <cls->
  (cls|spec|blt)  %0.7  = ChkFunction        e     %0.6
  prom-           %0.8  = MkArg                    unboundValue, h[0x55805098f040]_p2, e0.2
  prom-           %0.9  = MkArg                    unboundValue, h[0x55805098f040]_p4, e0.2
  prom-           %0.10 = MkArg                    unboundValue, h[0x55805098f040]_p5, e0.2
  lgl$#-          %0.11 = Identical                %0.7, function(type, n, e, w) <(rir::DispatchTable*)|...
  void                    Branch                   %0.11 -> BB8 (if true) | BB9 (if false)
BB8   <- [0]
  val?            %8.0  = StaticCall         !     [0x55804f68ff40]("function", %0.8, %0.9, %0.10) e0.2
  val?^ | miss    %8.1  = LdVar              eR    walkCode, e0.2
  lgl$#-          %8.2  = Identical                %8.1, function(e, w=makeCodeWalker()) <(rir::Dispatc|...
  void                    Branch                   %8.2 -> BB10 (if true) | BB11 (if false)
BB9   <- [0]
  fs              %9.0  = FrameState         R     0x55804f000f80+37: [%0.6], env=e0.2
  void                    Deopt              !v    %9.0, CallTarget@0x55804fb789b8[Call#1], %0.7   !
BB10   <- [8]
  prom-           %10.0 = MkArg                    unboundValue, h[0x55805098f040]_p6, e0.2
  prom-           %10.1 = MkArg                    unboundValue, h[0x55805098f040]_p7, e0.2
  val?            %10.2 = StaticCall         !     walkCode[0x55804e1c65b0](%10.0, %10.1) e0.2
  val?^ | miss    %10.3 = LdVar              eR    walkCode, e0.2
  lgl$#-          %10.4 = Identical                %10.3, function(e, w=makeCodeWalker()) <(rir::Dispatc|...
  void                    Branch                   %10.4 -> BB12 (if true) | BB13 (if false)
BB11   <- [8]
  fs              %11.0 = FrameState         R     0x55804f000f80+85: [%8.0], env=e0.2
  void                    Deopt              !v    %11.0, CallTarget@0x55804fb789b8[Call#3], %8.1   !
BB12   <- [10]
  prom-           %12.0 = MkArg                    unboundValue, h[0x55805098f040]_p8, e0.2
  prom-           %12.1 = MkArg                    unboundValue, h[0x55805098f040]_p9, e0.2
  val?            %12.2 = StaticCall         !     walkCode[0x55804e1c65b0](%12.0, %12.1) e0.2   <nil->
  void                    Return             l     %12.2
BB13   <- [10]
  fs              %13.0 = FrameState         R     0x55804f000f80+123: [%10.2], env=e0.2
  void                    Deopt              !v    %13.0, CallTarget@0x55804fb789b8[Call#4], %10.3   !
Prom 0:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    w, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    enterGlobal, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     as.character, <0x55804beee040>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, h[0x55805098f040]_p3, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <str$->
  void                    Return             l     %0.3
Prom 3:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    e, e0.0
  val?            %0.2  = Force<lazy>        !v    %0.1, e0.0   <code->
  val?            %0.3  = Extract2_1D        !v    %0.2, 1, e0.0   <sym->
  void                    Visible            v     
  void                    Return             l     %0.3
Prom 4:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    e, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <code->
  void                    Return             l     %0.3
Prom 5:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    w, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 6:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    e, e0.0
  val?            %0.2  = Force<wrapped>     !v    %0.1, e0.0   <code->
  val?            %0.3  = Extract2_1D        !v    %0.2, 2, e0.0   <sym->
  void                    Visible            v     
  void                    Return             l     %0.3
Prom 7:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    w, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 8:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    e, e0.0
  val?            %0.2  = Force<wrapped>     !v    %0.1, e0.0   <code->
  val?            %0.3  = Extract2_1D        !v    %0.2, 4, e0.0   <sym->
  void                    Visible            v     
  void                    Return             l     %0.3
Prom 9:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    w, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3

│ h[0x55805098f040]                                                            │
└──────────────────────────────────────────────────────────────────────────────┘
