
┌──────────────────────────────────────────────────────────────────────────────┐
│ apdef[0x55804f88ab00]                                                        │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch                                      │
│ Properties:                                                                  │
├────── Final PIR Version
apdef[0x55804f88ab00]
BB0
  val?^           %0.0  = LdArg                    0
  val?^ | miss    %0.1  = LdVar              eR    as.name, <env 0x55804e699488>
  lgl$#-          %0.2  = Identical                %0.1, function(x) <(rir::DispatchTable*)0x55804e19a4|...
  void                    Branch                   %0.2 -> BB69 (if true) | BB70 (if false)
BB69   <- [0]
  val             %69.0 = CallSafeBuiltin    wed   as.vector("*tmp*", "symbol")    <sym->
  val             %69.1 = CallSafeBuiltin    wed   as.vector("*tmpv*", "symbol")    <sym->
  val?^ | miss    %69.2 = LdVar              eR    typeof, <env 0x55804e699488>
  lgl$#-          %69.3 = Identical                %69.2, function(x) <(rir::DispatchTable*)0x55804e1c3c|...
  void                    Branch                   %69.3 -> BB71 (if true) | BB72 (if false)
BB70   <- [0]
  env             e70.0 = (MkEnv)            l     e=%0.0, parent=<env 0x55804e699488>, context 1
  fs              %70.1 = FrameState         R     0x55804ecce970+0: [], env=e70.0
  void                    Deopt              !v    %70.1, CallTarget@0x55804f05ac08[Call#0], %0.1
BB71   <- [69]
  env             e71.0 = MkEnv              l     e=%0.0, v=nil, tmp=%69.0, tmpv=%69.1, parent=<env 0x55804e699488>, context 1
  val?            %71.1 = Force!<lazy>       !v    %0.0, e71.0   <code->
  lgl$#-          %71.2 = IsType                   %71.1 isA val?-
  void                    Branch                   %71.2 -> BB73 (if true) | BB74 (if false)
BB72   <- [69]
  env             e72.0 = (MkEnv)            l     e=%0.0, v=nil, tmp=%69.0, parent=<env 0x55804e699488>, context 1
  fs              %72.1 = FrameState         R     0x55804ecce970+93: [], env=e72.0
  env             e72.2 = (MkEnv)            l     x="*tmpv*", parent=R_BaseNamespace, context 0
  fs              %72.3 = FrameState         R     0x55804e19a3a0+33: [%69.1], env=e72.2, next=%72.1
  void                    Deopt              !v    %72.3, CallTarget@0x55804f05ac08[Call#2], %69.2
BB73   <- [71]
  val?-           %73.0 = CastType           d     dn %71.1   <code->
  str$-           %73.1 = CallSafeBuiltin    wed   typeof(%73.0)    <str$->
  lgl$-           %73.2 = Eq                 d     %73.1, "language", elided   <lgl$->
  lgl$#-          %73.3 = CheckTrueFalse     e     %73.2   <true>
  void                    Branch                   %73.3 -> BB75 (if true) | BB76 (if false)
BB74   <- [71]
  prom-           %74.0 = MkArg                    unboundValue, apdef[0x55804f88ab00]_p0, e71.0
  val?^           %74.1 = CastType                 up %74.0
  fs              %74.2 = FrameState         R     0x55804ecce970+139: [], env=e71.0
  env             e74.3 = (MkEnv)            l     x=%74.1, parent=R_BaseNamespace, context 0
  fs              %74.4 = FrameState         R     0x55804e7773a0+9: [], env=e74.3, next=%74.2
  fs              %74.5 = FrameState         R     0x55804f045ff0+5(pr): [%71.1], env=e71.0, next=%74.4
  void                    Deopt              !v    %74.5, Typecheck@0x55804f05ac08[Type#2], %71.1   !
BB75   <- [73]
  val?^ | miss    %75.0 = LdVar              eR    e, e71.0
  val?            %75.1 = Force!<wrapped>    !v    %75.0, e71.0   <code->
  void                    StVar              lW    ef, %75.1, e71.0
  val?^ | miss    %75.3 = LdVar              eR    makeAssgnFcn, e71.0
  lgl$#-          %75.4 = Identical                %75.3, function(fun) <(rir::DispatchTable*)0x55804fb5|...
  void                    Branch                   %75.4 -> BB77 (if true) | BB78 (if false)
BB76   <- [73]
  fs              %76.0 = FrameState         R     0x55804ecce970+139: [], env=e71.0
  prom-           %76.1 = MkArg                    %73.0, apdef[0x55804f88ab00]_p0 (!refl), e71.0
  val?~           %76.2 = CastType                 up %76.1
  env             e76.3 = (MkEnv)            l     x=%76.2, parent=R_BaseNamespace, context 0
  fs              %76.4 = FrameState         R     0x55804e7773a0+27: [%73.1], env=e76.3, next=%76.0
  void                    Deopt              !v    %76.4, DeadBranchReached@0x55804f05ac08[Test#0], %73.3   !
BB77   <- [75]
  prom-           %77.0 = MkArg                    unboundValue, apdef[0x55804f88ab00]_p1, e71.0
  ct              %77.1 = PushContext        lCL   %77.0, makeAssgnFcn([[(e, 1)), function(fun) <(rir::DispatchTable*)0x55804fb5|..., e71.0
  val?^           %77.2 = CastType                 up %77.0
  val?^ | miss    %77.3 = LdVar              eR    typeof, <env 0x55804e699488>
  lgl$#-          %77.4 = Identical                %77.3, function(x) <(rir::DispatchTable*)0x55804e1c3c|...
  void                    Branch                   %77.4 -> BB79 (if true) | BB80 (if false)
BB78   <- [75]
  fs              %78.0 = FrameState         R     0x55804ecce970+190: [], env=e71.0
  void                    Deopt              !v    %78.0, CallTarget@0x55804f05ac08[Call#3], %75.3   !
BB79   <- [77]
  env             e79.0 = MkEnv              l     fun=%77.2, parent=<env 0x55804e699488>, context 1
  val?            %79.1 = Force!<lazy>       !vL   %77.2, e79.0   <sym->
  str$-           %79.2 = CallSafeBuiltin    wed   typeof(%79.1)    <str$->
  lgl$-           %79.3 = Eq                 d     %79.2, "symbol", elided   <lgl$->
  lgl$#-          %79.4 = CheckTrueFalse     e     %79.3
  void                    Branch                   %79.4 -> BB16 (if true) | BB15 (if false)
BB80   <- [77]
  fs              %80.0 = FrameState         R     0x55804ecce970+222: [], env=e71.0
  env             e80.1 = (MkEnv)            l     fun=%77.2, parent=<env 0x55804e699488>, context 1
  fs              %80.2 = FrameState         R     0x55804f0b0750+0: [], env=e80.1, next=%80.0
  void                    Deopt              !v    %80.2, CallTarget@0x55804f05a688[Call#0], %77.3   !
BB16   <- [79]
  val?^ | miss    %16.0 = LdVar              eR    as.name, <env 0x55804e699488>
  lgl$#-          %16.1 = Identical                %16.0, function(x) <(rir::DispatchTable*)0x55804e19a4|...
  void                    Branch                   %16.1 -> BB81 (if true) | BB82 (if false)
BB15   <- [79]
  fs              %15.0 = FrameState         R     0x55804ecce970+222: [], env=e71.0
  (cls|spec|blt)  %15.1 = LdFun              !v    getRversion, <env 0x55804e699488>
  fs              %15.2 = FrameState         R     0x55804f0b0750+60: [%15.1], env=e79.0, next=%15.0
  void                    Deopt              !v    %15.2, DeadCall@0x55804f05a688[Call#1], %15.1   !
BB81   <- [16]
  val?^ | miss    %81.0 = LdVar              eR    paste0, <env 0x55804e699488>
  lgl$#-          %81.1 = Identical                %81.0, function(..., collapse=NULL, recycle0=FALSE) <|...
  void                    Branch                   %81.1 -> BB83 (if true) | BB84 (if false)
BB82   <- [16]
  void                    Nop                !     
  val?^ | miss    %82.1 = %16.0
  dr              %82.2 = CallTarget@0x55804f05a688[Call#15]
  goto BB13
BB83   <- [81]
  prom-           %83.0 = MkArg                    unboundValue, apdef[0x55804f88ab00]_p16, e79.0
  dots-           %83.1 = DotsList           l     %83.0, "<-"
  ct              %83.2 = PushContext        lCL   %83.1, paste0(as.character(fun), "<-"), function(..., collapse=NULL, recycle0=FALSE) <|..., e79.0
  val?^ | miss    %83.3 = CastType                 up %83.0
  env             e83.4 = MkEnv              l     ...=%83.1, collapse(miss)=nil, recycle0(miss)=false, parent=R_BaseNamespace, context 1
  val?            %83.5 = Force!             !vL   %83.3, e83.4
  val+            %83.6 = CallSafeBuiltin    wed   list(%83.5, "<-")    <vec->
  val?            %83.7 = CallBuiltin        !v    paste0(%83.6, nil, false) e83.4
  val?            %83.8 = PopContext         C     %83.7, %83.2   <str$->
  lgl$#-          %83.9 = IsType                   %83.8 isA val?-
  void                    Branch                   %83.9 -> BB85 (if true) | BB86 (if false)
BB84   <- [81]
  void                    Nop                !     
  val?^ | miss    %84.1 = %81.0
  dr              %84.2 = CallTarget@0x55804f05a688[Call#16]
  goto BB13
BB13   <- [82, 84]
  val?^ | miss    %13.0 = Phi                      %82.1:BB82, %84.1:BB84
  val?^ | miss    %13.1 = %13.0
  dr              %13.2 = Phi                      %82.2:BB82, %84.2:BB84
  dr              %13.3 = %13.2
  fs              %13.4 = FrameState         R     0x55804ecce970+222: [], env=e71.0
  fs              %13.5 = FrameState         R     0x55804f0b0750+32: [], env=e79.0, next=%13.4
  prom-           %13.6 = MkArg                    %79.1, apdef[0x55804f88ab00]_p14 (!refl), e79.0
  val?~           %13.7 = CastType                 up %13.6
  env             e13.8 = (MkEnv)            l     x=%13.7, parent=R_BaseNamespace, context 0
  fs              %13.9 = FrameState         R     0x55804e7773a0+27: [%79.2], env=e13.8, next=%13.5
  void                    Deopt              !v    %13.9, %13.3, %13.1   !
BB85   <- [83]
  val?-           %85.0 = CastType           d     dn %83.8   <str$->
  val             %85.1 = CallSafeBuiltin    wed   as.vector(%85.0, "symbol")    <sym->
  val?            %85.2 = PopContext         C     %85.1, %77.1   <sym->
  lgl$#-          %85.3 = IsType                   %85.2 isA val?-
  val?^ | miss    %85.4 = LdVar              eR    ef !upd, e71.0
  lgl$#-          %85.5 = IsType                   %85.4 isA val?~- | miss
  void                    Branch                   %85.5 -> BB87 (if true) | BB88 (if false)
BB86   <- [83]
  fs              %86.0 = FrameState         R     0x55804ecce970+222: [], env=e71.0
  fs              %86.1 = FrameState         R     0x55804f0b0750+623: [], env=e79.0, next=%86.0
  prom-           %86.2 = MkArg                    unboundValue, apdef[0x55804f88ab00]_p15, e79.0
  val?^           %86.3 = CastType                 up %86.2
  env             e86.4 = (MkEnv)            l     x=%86.3, parent=R_BaseNamespace, context 0
  fs              %86.5 = FrameState         R     0x55804e19a3a0+9: [], env=e86.4, next=%86.1
  fs              %86.6 = FrameState         R     0x55804ec75f30+37(pr): [%83.8], env=e79.0, next=%86.5
  void                    Deopt              !v    %86.6, Typecheck@0x55804d1769b8[Type#0], %83.8   !
BB87   <- [85]
  val?~- | miss   %87.0 = CastType           d     dn %85.4
  val?-           %87.1 = Force!<value>            %87.0,    <code->
  void                    Branch                   %85.3 -> BB89 (if true) | BB90 (if false)
BB88   <- [85]
  void                    Nop                !     
  val?^ | miss    %88.1 = %85.4
  dr              %88.2 = Typecheck@0x55804f05ac08[Type#9]
  goto BB19
BB89   <- [87]
  val?-           %89.0 = CastType           d     dn %85.2   <sym->
  val?-           %89.1 = Subassign2_1D      wed   %89.0, %87.1, 1, elided   <code->
  void                    StVar              lW    ef, %89.1, e71.0
  val?^ | miss    %89.3 = LdVar              eR    typeof, e71.0
  lgl$#-          %89.4 = Identical                %89.3, function(x) <(rir::DispatchTable*)0x55804e1c3c|...
  void                    Branch                   %89.4 -> BB91 (if true) | BB92 (if false)
BB90   <- [87]
  void                    Nop                !     
  val?            %90.1 = %85.2
  dr              %90.2 = Typecheck@0x55804f05ac08[Type#8]
  goto BB19
BB19   <- [88, 90]
  val?^ | miss    %19.0 = Phi                      %88.1:BB88, %90.1:BB90
  val?^ | miss    %19.1 = %19.0
  dr              %19.2 = Phi                      %88.2:BB88, %90.2:BB90
  dr              %19.3 = %19.2
  fs              %19.4 = FrameState         R     0x55804ecce970+222: [%85.2], env=e71.0
  void                    Deopt              !v    %19.4, %19.3, %19.1   !
BB91   <- [89]
  val-            %91.0 = ChkMissing         e     %89.1
  val?            %91.1 = Extract2_1D        wed   %89.1, 2, elided   <(sym|code)->
  str$-           %91.2 = CallSafeBuiltin    wed   typeof(%91.1)    <str$->
  lgl$-           %91.3 = Eq                 d     %91.2, "language", elided   <lgl$->
  lgl$#-          %91.4 = CheckTrueFalse     e     %91.3
  void                    Branch                   %91.4 -> BB65 (if true) | BB23 (if false)
BB92   <- [89]
  fs              %92.0 = FrameState         R     0x55804ecce970+257: [], env=e71.0
  void                    Deopt              !v    %92.0, CallTarget@0x55804f05ac08[Call#4], %89.3   !
BB65   <- [91]
  val?^ | miss    %65.0 = LdVar              eR    tmp, e71.0
  val?            %65.1 = Force!<value>      !v    %65.0, e71.0   <sym->
  lgl$#-          %65.2 = IsType                   %65.1 isA val?-
  val?^ | miss    %65.3 = LdVar              eR    ef !upd, e71.0
  lgl$#-          %65.4 = IsType                   %65.3 isA val?~- | miss
  void                    Branch                   %65.4 -> BB93 (if true) | BB94 (if false)
BB23   <- [91]
  void                    Nop                !     
  goto BB24
BB93   <- [65]
  val?~- | miss   %93.0 = CastType           d     dn %65.3
  val?-           %93.1 = Force!<value>            %93.0,    <code->
  void                    Branch                   %65.2 -> BB95 (if true) | BB96 (if false)
BB94   <- [65]
  void                    Nop                !     
  val?^ | miss    %94.1 = %65.3
  dr              %94.2 = Typecheck@0x55804f05ac08[Type#15]
  goto BB66
BB24   <- [23, 95]
  (cls|spec|blt)  %24.0 = LdFun              !v    <-, <0x55804bed5da8>, e71.0
  prom-           %24.1 = MkArg                    unboundValue, apdef[0x55804f88ab00]_p3, e71.0
  prom-           %24.2 = MkArg                    unboundValue, apdef[0x55804f88ab00]_p6, e71.0
  val?            %24.3 = Call               !v    %24.0(%24.1, %24.2) e71.0
  val?^ | miss    %24.4 = LdVar              eR    c, e71.0
  lgl$#-          %24.5 = Identical                <blt c>, %24.4   <true>
  void                    Branch                   %24.5 -> BB97 (if true) | BB98 (if false)
BB95   <- [93]
  val?-           %95.0 = CastType           d     dn %65.1   <sym->
  val?-           %95.1 = Subassign2_1D      wed   %95.0, %93.1, 2, elided
  void                    StVar              lW    ef, %95.1, e71.0
  goto BB24
BB96   <- [93]
  void                    Nop                !     
  val?            %96.1 = %65.1
  dr              %96.2 = Typecheck@0x55804f05ac08[Type#14]
  goto BB66
BB66   <- [94, 96]
  val?^ | miss    %66.0 = Phi                      %94.1:BB94, %96.1:BB96
  val?^ | miss    %66.1 = %66.0
  dr              %66.2 = Phi                      %94.2:BB94, %96.2:BB96
  dr              %66.3 = %66.2
  fs              %66.4 = FrameState         R     0x55804ecce970+326: [%65.1], env=e71.0
  void                    Deopt              !v    %66.4, %66.3, %66.1   !
BB97   <- [24]
  val?^ | miss    %97.0 = LdVar              eR    v, e71.0
  val?            %97.1 = Force!<value>      !v    %97.0, e71.0   <nil->
  val?^ | miss    %97.2 = LdVar              eR    list, e71.0
  lgl$#-          %97.3 = Identical                <blt list>, %97.2   <true>
  void                    Branch                   %97.3 -> BB99 (if true) | BB100 (if false)
BB98   <- [24]
  fs              %98.0 = FrameState         R     0x55804ecce970+398: [%24.3], env=e71.0
  void                    Deopt              !v    %98.0, DeadBranchReached@0x55804f05ac08[Test#3], %24.5   !
BB99   <- [97]
  val?^ | miss    %99.0 = LdVar              eR    ef, e71.0
  lgl$#-          %99.1 = IsType                   %99.0 isA val?~- | miss
  void                    Branch                   %99.1 -> BB101 (if true) | BB102 (if false)
BB100   <- [97]
  void                    Nop                !     
  lgl$#-          %100.1 = %97.3
  dr              %100.2 = DeadBranchReached@0x55804f05ac08[Test#4]
  goto BB27
BB101   <- [99]
  val?~- | miss   %101.0 = CastType           d     dn %99.0
  val?-           %101.1 = Force!<value>            %101.0,    <code->
  val+            %101.2 = CallSafeBuiltin    wed   list(%101.1)    <vec$->
  lgl$#-          %101.3 = IsType                   %97.1 isA val?-
  void                    Branch                   %101.3 -> BB103 (if true) | BB104 (if false)
BB102   <- [99]
  void                    Nop                !     
  val?^ | miss    %102.1 = %99.0
  dr              %102.2 = Typecheck@0x55804f05ac08[Type#25]
  goto BB27
BB27   <- [100, 102]
  val?^ | miss    %27.0 = Phi                      %100.1:BB100, %102.1:BB102
  val?^ | miss    %27.1 = %27.0
  dr              %27.2 = Phi                      %100.2:BB100, %102.2:BB102
  dr              %27.3 = %27.2
  fs              %27.4 = FrameState         R     0x55804ecce970+473: [<blt c>, %97.1], env=e71.0
  void                    Deopt              !v    %27.4, %27.3, %27.1   !
BB103   <- [101]
  val?-           %103.0 = CastType           d     dn %97.1   <nil->
  val+            %103.1 = CallSafeBuiltin    wed   c(%103.0, %101.2)    <vec$->
  void                    StVar              lW    v, %103.1, e71.0
  val?^ | miss    %103.3 = LdVar              eR    e, e71.0
  val?            %103.4 = Force!<wrapped>    !v    %103.3, e71.0   <code->
  lgl$#-          %103.5 = IsType                   %103.4 isA val+   <true>
  lgl$#-          %103.6 = IsType                   %103.4 isA val?-
  void                    Branch                   %103.5 -> BB105 (if true) | BB106 (if false)
BB104   <- [101]
  fs              %104.0 = FrameState         R     0x55804ecce970+569: [<blt c>, %97.1, %101.2], env=e71.0
  void                    Deopt              !v    %104.0, Typecheck@0x55804f05ac08[Type#23], %97.1   !
BB105   <- [103]
  void                    Branch                   %103.6 -> BB107 (if true) | BB108 (if false)
BB106   <- [103]
  void                    Nop                !     
  lgl$#-          %106.1 = %103.5
  dr              %106.2 = DeadBranchReached@0x55804f05ac08[Test#5]
  goto BB31
BB107   <- [105]
  val?-           %107.0 = CastType           d     dn %103.4   <code->
  val?            %107.1 = Extract2_1D        wed   %107.0, 2, elided   <(sym|code)->
  void                    StVar              lW    e, %107.1, e71.0
  val?            %107.3 = %107.1
  goto BB33
BB108   <- [105]
  void                    Nop                !     
  val?            %108.1 = %103.4
  dr              %108.2 = Typecheck@0x55804f05ac08[Type#28]
  goto BB31
BB31   <- [106, 108]
  val?^ | miss    %31.0 = Phi                      %106.1:BB106, %108.1:BB108
  val?^ | miss    %31.1 = %31.0
  dr              %31.2 = Phi                      %106.2:BB106, %108.2:BB108
  dr              %31.3 = %31.2
  fs              %31.4 = FrameState         R     0x55804ecce970+614: [%103.4], env=e71.0
  void                    Deopt              !v    %31.4, %31.3, %31.1   !
BB33   <- [107, 141]
  val?            %33.0 = Phi                      %107.3:BB107, %141.3:BB141
  val?            %33.1 = %33.0
  val?^ | miss    %33.2 = LdVar              eR    typeof, e71.0
  lgl$#-          %33.3 = Identical                %33.2, function(x) <(rir::DispatchTable*)0x55804e1c3c|...
  void                    Branch                   %33.3 -> BB109 (if true) | BB110 (if false)
BB109   <- [33]
  val             %109.0 = ChkMissing         e     %33.1   <(sym|code)->
  str$-           %109.1 = CallSafeBuiltin    wed   typeof(%109.0)    <str$->
  lgl$-           %109.2 = Eq                 d     %109.1, "language", elided   <lgl$->
  lgl$#-          %109.3 = CheckTrueFalse     e     %109.2
  void                    Branch                   %109.3 -> BB37 (if true) | BB36 (if false)
BB110   <- [33]
  fs              %110.0 = FrameState         R     0x55804ecce970+672: [], env=e71.0
  void                    Deopt              !v    %110.0, CallTarget@0x55804f05ac08[Call#10], %33.2   !
BB37   <- [109]
  void                    StVar              lW    ef, %109.0, e71.0
  val?^ | miss    %37.1 = LdVar              eR    makeAssgnFcn, e71.0
  lgl$#-          %37.2 = Identical                %37.1, function(fun) <(rir::DispatchTable*)0x55804fb5|...
  void                    Branch                   %37.2 -> BB111 (if true) | BB112 (if false)
BB36   <- [109]
  val?^ | miss    %36.0 = LdVar              eR    v, e71.0
  void                    Visible            v     
  val?            %36.2 = Force!<value>      !     %36.0, e71.0   <vec->
  void                    Return             l     %36.2
BB111   <- [37]
  prom-           %111.0 = MkArg                    unboundValue, apdef[0x55804f88ab00]_p8, e71.0
  ct              %111.1 = PushContext        lCL   %111.0, makeAssgnFcn([[(e, 1)), function(fun) <(rir::DispatchTable*)0x55804fb5|..., e71.0
  val?^           %111.2 = CastType                 up %111.0
  val?^ | miss    %111.3 = LdVar              eR    typeof, <env 0x55804e699488>
  lgl$#-          %111.4 = Identical                %111.3, function(x) <(rir::DispatchTable*)0x55804e1c3c|...
  void                    Branch                   %111.4 -> BB113 (if true) | BB114 (if false)
BB112   <- [37]
  fs              %112.0 = FrameState         R     0x55804ecce970+750: [], env=e71.0
  void                    Deopt              !v    %112.0, CallTarget@0x55804f05ac08[Call#11], %37.1   !
BB113   <- [111]
  env             e113.0 = MkEnv              l     fun=%111.2, parent=<env 0x55804e699488>, context 1
  val?            %113.1 = Force!<lazy>       !v    %111.2, e113.0   <sym->
  str$-           %113.2 = CallSafeBuiltin    wed   typeof(%113.1)    <str$->
  lgl$-           %113.3 = Eq                 d     %113.2, "symbol", elided   <lgl$->
  lgl$#-          %113.4 = CheckTrueFalse     e     %113.3
  void                    Branch                   %113.4 -> BB45 (if true) | BB44 (if false)
BB114   <- [111]
  fs              %114.0 = FrameState         R     0x55804ecce970+782: [], env=e71.0
  env             e114.1 = (MkEnv)            l     fun=%111.2, parent=<env 0x55804e699488>, context 1
  fs              %114.2 = FrameState         R     0x55804f0b0750+0: [], env=e114.1, next=%114.0
  void                    Deopt              !v    %114.2, CallTarget@0x55804f05a688[Call#0], %111.3   !
BB45   <- [113]
  val?^ | miss    %45.0 = LdVar              eR    as.name, e113.0
  lgl$#-          %45.1 = Identical                %45.0, function(x) <(rir::DispatchTable*)0x55804e19a4|...
  void                    Branch                   %45.1 -> BB115 (if true) | BB116 (if false)
BB44   <- [113]
  fs              %44.0 = FrameState         R     0x55804ecce970+782: [], env=e71.0
  (cls|spec|blt)  %44.1 = LdFun              !v    getRversion, e113.0
  fs              %44.2 = FrameState         R     0x55804f0b0750+60: [%44.1], env=e113.0, next=%44.0
  void                    Deopt              !v    %44.2, DeadCall@0x55804f05a688[Call#1], %44.1   !
BB115   <- [45]
  val?^ | miss    %115.0 = LdVar              eR    paste0, e113.0
  lgl$#-          %115.1 = Identical                %115.0, function(..., collapse=NULL, recycle0=FALSE) <|...
  void                    Branch                   %115.1 -> BB117 (if true) | BB118 (if false)
BB116   <- [45]
  void                    Nop                !     
  val?^ | miss    %116.1 = %45.0
  dr              %116.2 = CallTarget@0x55804f05a688[Call#15]
  goto BB42
BB117   <- [115]
  prom-           %117.0 = MkArg                    unboundValue, apdef[0x55804f88ab00]_p21, e113.0
  dots-           %117.1 = DotsList           l     %117.0, "<-"
  ct              %117.2 = PushContext        lCL   %117.1, paste0(as.character(fun), "<-"), function(..., collapse=NULL, recycle0=FALSE) <|..., e113.0
  val?^ | miss    %117.3 = CastType                 up %117.0
  env             e117.4 = MkEnv              l     ...=%117.1, collapse(miss)=nil, recycle0(miss)=false, parent=R_BaseNamespace, context 1
  val?            %117.5 = Force!             !v    %117.3, e117.4
  val+            %117.6 = CallSafeBuiltin    wed   list(%117.5, "<-")    <vec->
  val?^ | miss    %117.7 = LdVar              eR    collapse, e117.4
  val?            %117.8 = Force!<lazy>       !v    %117.7, e117.4   <nil->
  val?^ | miss    %117.9 = LdVar              eR    recycle0, e117.4
  val?            %117.10 = Force!<lazy>       !v    %117.9, e117.4   <lgl$->
  val?            %117.11 = CallBuiltin        !v    paste0(%117.6, %117.8, %117.10) e117.4
  val?            %117.12 = PopContext         C     %117.11, %117.2   <str$->
  lgl$#-          %117.13 = IsType                   %117.12 isA val?-
  void                    Branch                   %117.13 -> BB119 (if true) | BB120 (if false)
BB118   <- [115]
  void                    Nop                !     
  val?^ | miss    %118.1 = %115.0
  dr              %118.2 = CallTarget@0x55804f05a688[Call#16]
  goto BB42
BB42   <- [116, 118]
  val?^ | miss    %42.0 = Phi                      %116.1:BB116, %118.1:BB118
  val?^ | miss    %42.1 = %42.0
  dr              %42.2 = Phi                      %116.2:BB116, %118.2:BB118
  dr              %42.3 = %42.2
  fs              %42.4 = FrameState         R     0x55804ecce970+782: [], env=e71.0
  fs              %42.5 = FrameState         R     0x55804f0b0750+32: [], env=e113.0, next=%42.4
  prom-           %42.6 = MkArg                    %113.1, apdef[0x55804f88ab00]_p19 (!refl), e113.0
  val?~           %42.7 = CastType                 up %42.6
  env             e42.8 = (MkEnv)            l     x=%42.7, parent=R_BaseNamespace, context 0
  fs              %42.9 = FrameState         R     0x55804e7773a0+27: [%113.2], env=e42.8, next=%42.5
  void                    Deopt              !v    %42.9, %42.3, %42.1   !
BB119   <- [117]
  val?-           %119.0 = CastType           d     dn %117.12   <str$->
  val             %119.1 = CallSafeBuiltin    wed   as.vector(%119.0, "symbol")    <sym->
  val?            %119.2 = PopContext         C     %119.1, %111.1   <sym->
  lgl$#-          %119.3 = IsType                   %119.2 isA val?-
  val?^ | miss    %119.4 = LdVar              eR    ef !upd, e71.0
  lgl$#-          %119.5 = IsType                   %119.4 isA val?~- | miss
  void                    Branch                   %119.5 -> BB121 (if true) | BB122 (if false)
BB120   <- [117]
  prom-           %120.0 = MkArg                    unboundValue, apdef[0x55804f88ab00]_p20, e113.0
  val?^           %120.1 = CastType                 up %120.0
  fs              %120.2 = FrameState         R     0x55804ecce970+782: [], env=e71.0
  fs              %120.3 = FrameState         R     0x55804f0b0750+623: [], env=e113.0, next=%120.2
  env             e120.4 = (MkEnv)            l     x=%120.1, parent=R_BaseNamespace, context 0
  fs              %120.5 = FrameState         R     0x55804e19a3a0+9: [], env=e120.4, next=%120.3
  fs              %120.6 = FrameState         R     0x55804ec75f30+37(pr): [%117.12], env=e113.0, next=%120.5
  void                    Deopt              !v    %120.6, Typecheck@0x55804d1769b8[Type#0], %117.12   !
BB121   <- [119]
  val?~- | miss   %121.0 = CastType           d     dn %119.4
  val?-           %121.1 = Force!<value>            %121.0,    <code->
  void                    Branch                   %119.3 -> BB123 (if true) | BB124 (if false)
BB122   <- [119]
  void                    Nop                !     
  val?^ | miss    %122.1 = %119.4
  dr              %122.2 = Typecheck@0x55804f05ac08[Type#37]
  goto BB48
BB123   <- [121]
  val?-           %123.0 = CastType           d     dn %119.2   <sym->
  val?-           %123.1 = Subassign2_1D      wed   %123.0, %121.1, 1, elided   <code->
  void                    StVar              lW    ef, %123.1, e71.0
  val?^ | miss    %123.3 = LdVar              eR    typeof, e71.0
  lgl$#-          %123.4 = Identical                %123.3, function(x) <(rir::DispatchTable*)0x55804e1c3c|...
  void                    Branch                   %123.4 -> BB125 (if true) | BB126 (if false)
BB124   <- [121]
  void                    Nop                !     
  val?            %124.1 = %119.2
  dr              %124.2 = Typecheck@0x55804f05ac08[Type#36]
  goto BB48
BB48   <- [122, 124]
  val?^ | miss    %48.0 = Phi                      %122.1:BB122, %124.1:BB124
  val?^ | miss    %48.1 = %48.0
  dr              %48.2 = Phi                      %122.2:BB122, %124.2:BB124
  dr              %48.3 = %48.2
  fs              %48.4 = FrameState         R     0x55804ecce970+782: [%119.2], env=e71.0
  void                    Deopt              !v    %48.4, %48.3, %48.1   !
BB125   <- [123]
  val-            %125.0 = ChkMissing         e     %123.1
  val?            %125.1 = Extract2_1D        wed   %123.1, 2, elided   <sym->
  str$-           %125.2 = CallSafeBuiltin    wed   typeof(%125.1)    <str$->
  lgl$-           %125.3 = Eq                 d     %125.2, "language", elided   <lgl$->
  lgl$#-          %125.4 = CheckTrueFalse     e     %125.3
  void                    Branch                   %125.4 -> BB62 (if true) | BB52 (if false)
BB126   <- [123]
  fs              %126.0 = FrameState         R     0x55804ecce970+817: [], env=e71.0
  void                    Deopt              !v    %126.0, CallTarget@0x55804f05ac08[Call#12], %123.3   !
BB62   <- [125]
  val?^ | miss    %62.0 = LdVar              eR    tmp, e71.0
  val?            %62.1 = Force!             !v    %62.0, e71.0   <val?_>
  val?^ | miss    %62.2 = LdVar              eR    ef, e71.0
  val?            %62.3 = Force!             !v    %62.2, e71.0   <val?_>
  lgl$#-          %62.4 = IsType                   %62.3 isA val?+
  lgl$#-          %62.5 = IsType                   %62.1 isA val?+
  void                    Branch                   %62.5 -> BB127 (if true) | BB128 (if false)
BB52   <- [125]
  void                    Nop                !     
  goto BB53
BB127   <- [62]
  val?+           %127.0 = CastType           d     dn %62.1   <val?_>
  void                    Branch                   %62.4 -> BB129 (if true) | BB130 (if false)
BB128   <- [62]
  void                    Nop                !     
  val?            %128.1 = %62.1
  dr              %128.2 = Typecheck@0x55804f05ac08[Type#42]
  goto BB63
BB53   <- [52, 129]
  (cls|spec|blt)  %53.0 = LdFun              !v    <-, <0x55804bed5da8>, e71.0
  prom-           %53.1 = MkArg                    unboundValue, apdef[0x55804f88ab00]_p10, e71.0
  prom-           %53.2 = MkArg                    unboundValue, apdef[0x55804f88ab00]_p13, e71.0
  val?            %53.3 = Call               !v    %53.0(%53.1, %53.2) e71.0
  val?^ | miss    %53.4 = LdVar              eR    c, e71.0
  lgl$#-          %53.5 = Identical                <blt c>, %53.4   <true>
  void                    Branch                   %53.5 -> BB131 (if true) | BB132 (if false)
BB129   <- [127]
  val?+           %129.0 = CastType           d     dn %62.3   <val?_>
  val?+           %129.1 = Subassign2_1D      wed   %127.0, %129.0, 2, elided
  void                    StVar              lW    ef, %129.1, e71.0
  goto BB53
BB130   <- [127]
  void                    Nop                !     
  val?            %130.1 = %62.3
  dr              %130.2 = Typecheck@0x55804f05ac08[Type#43]
  goto BB63
BB63   <- [128, 130]
  val?^ | miss    %63.0 = Phi                      %128.1:BB128, %130.1:BB130
  val?^ | miss    %63.1 = %63.0
  dr              %63.2 = Phi                      %128.2:BB128, %130.2:BB130
  dr              %63.3 = %63.2
  fs              %63.4 = FrameState         R     0x55804ecce970+900: [%62.1, %62.3], env=e71.0
  void                    Deopt              !v    %63.4, %63.3, %63.1   !
BB131   <- [53]
  val?^ | miss    %131.0 = LdVar              eR    v, e71.0
  val?            %131.1 = Force!<value>      !v    %131.0, e71.0   <vec$->
  val?^ | miss    %131.2 = LdVar              eR    list, e71.0
  lgl$#-          %131.3 = Identical                <blt list>, %131.2   <true>
  void                    Branch                   %131.3 -> BB133 (if true) | BB134 (if false)
BB132   <- [53]
  fs              %132.0 = FrameState         R     0x55804ecce970+958: [%53.3], env=e71.0
  void                    Deopt              !v    %132.0, DeadBranchReached@0x55804f05ac08[Test#8], %53.5   !
BB133   <- [131]
  val?^ | miss    %133.0 = LdVar              eR    ef, e71.0
  lgl$#-          %133.1 = IsType                   %133.0 isA val?~- | miss
  void                    Branch                   %133.1 -> BB135 (if true) | BB136 (if false)
BB134   <- [131]
  void                    Nop                !     
  lgl$#-          %134.1 = %131.3
  dr              %134.2 = DeadBranchReached@0x55804f05ac08[Test#9]
  goto BB56
BB135   <- [133]
  val?~- | miss   %135.0 = CastType           d     dn %133.0
  val?-           %135.1 = Force!<value>            %135.0,    <code->
  val+            %135.2 = CallSafeBuiltin    wed   list(%135.1)    <vec$->
  lgl$#-          %135.3 = IsType                   %131.1 isA val?-
  void                    Branch                   %135.3 -> BB137 (if true) | BB138 (if false)
BB136   <- [133]
  void                    Nop                !     
  val?^ | miss    %136.1 = %133.0
  dr              %136.2 = Typecheck@0x55804f05ac08[Type#53]
  goto BB56
BB56   <- [134, 136]
  val?^ | miss    %56.0 = Phi                      %134.1:BB134, %136.1:BB136
  val?^ | miss    %56.1 = %56.0
  dr              %56.2 = Phi                      %134.2:BB134, %136.2:BB136
  dr              %56.3 = %56.2
  fs              %56.4 = FrameState         R     0x55804ecce970+1033: [<blt c>, %131.1], env=e71.0
  void                    Deopt              !v    %56.4, %56.3, %56.1   !
BB137   <- [135]
  val?-           %137.0 = CastType           d     dn %131.1   <vec$->
  val+            %137.1 = CallSafeBuiltin    wed   c(%137.0, %135.2)    <vec->
  void                    StVar              lW    v, %137.1, e71.0
  val?^ | miss    %137.3 = LdVar              eR    e, e71.0
  val?            %137.4 = Force!<value>      !v    %137.3, e71.0   <code->
  lgl$#-          %137.5 = IsType                   %137.4 isA val+   <true>
  lgl$#-          %137.6 = IsType                   %137.4 isA val?-
  void                    Branch                   %137.5 -> BB139 (if true) | BB140 (if false)
BB138   <- [135]
  fs              %138.0 = FrameState         R     0x55804ecce970+1129: [<blt c>, %131.1, %135.2], env=e71.0
  void                    Deopt              !v    %138.0, Typecheck@0x55804f05ac08[Type#51], %131.1   !
BB139   <- [137]
  void                    Branch                   %137.6 -> BB141 (if true) | BB142 (if false)
BB140   <- [137]
  void                    Nop                !     
  lgl$#-          %140.1 = %137.5
  dr              %140.2 = DeadBranchReached@0x55804f05ac08[Test#10]
  goto BB60
BB141   <- [139]
  val?-           %141.0 = CastType           d     dn %137.4   <code->
  val?            %141.1 = Extract2_1D        wed   %141.0, 2, elided   <sym->
  void                    StVar              lW    e, %141.1, e71.0
  val?            %141.3 = %141.1
  goto BB33
BB142   <- [139]
  void                    Nop                !     
  val?            %142.1 = %137.4
  dr              %142.2 = Typecheck@0x55804f05ac08[Type#56]
  goto BB60
BB60   <- [140, 142]
  val?^ | miss    %60.0 = Phi                      %140.1:BB140, %142.1:BB142
  val?^ | miss    %60.1 = %60.0
  dr              %60.2 = Phi                      %140.2:BB140, %142.2:BB142
  dr              %60.3 = %60.2
  fs              %60.4 = FrameState         R     0x55804ecce970+1174: [%137.4], env=e71.0
  void                    Deopt              !v    %60.4, %60.3, %60.1   !
Prom 0:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    e, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <code->
  void                    Return             l     %0.3
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    e, e0.0
  val?            %0.2  = Force<wrapped>     !v    %0.1, e0.0   <code->
  val?            %0.3  = Extract2_1D        !v    %0.2, 1, e0.0   <sym->
  void                    Visible            v     
  void                    Return             l     %0.3
Prom 3:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     $, e0.0
  prom-           %0.2  = MkArg                    unboundValue, apdef[0x55804f88ab00]_p4, e0.0
  prom-           %0.3  = MkArg                    unboundValue, apdef[0x55804f88ab00]_p5, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 4:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    ef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 5:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    value, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 6:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    tmpv, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 8:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    e, e0.0
  val?            %0.2  = Force<value>       !v    %0.1, e0.0   <code->
  val?            %0.3  = Extract2_1D        !v    %0.2, 1, e0.0   <sym->
  void                    Visible            v     
  void                    Return             l     %0.3
Prom 10:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     $, e0.0
  prom-           %0.2  = MkArg                    unboundValue, apdef[0x55804f88ab00]_p11, e0.0
  prom-           %0.3  = MkArg                    unboundValue, apdef[0x55804f88ab00]_p12, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 11:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    ef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 12:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    value, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 13:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    tmpv, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 14:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fun, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <sym->
  void                    Return             l     %0.3
Prom 15:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     paste0, <0x55804c02a3c8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, apdef[0x55804f88ab00]_p16, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2, "<-") e0.0   <str$->
  void                    Return             l     %0.3
Prom 16:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     as.character, <0x55804beee040>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, apdef[0x55804f88ab00]_p17, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <str$->
  void                    Return             l     %0.3
Prom 17:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fun, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <sym->
  void                    Return             l     %0.3
Prom 19:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fun, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <sym->
  void                    Return             l     %0.3
Prom 20:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     paste0, <0x55804c02a3c8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, apdef[0x55804f88ab00]_p21, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2, "<-") e0.0   <str$->
  void                    Return             l     %0.3
Prom 21:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     as.character, <0x55804beee040>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, apdef[0x55804f88ab00]_p22, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <str$->
  void                    Return             l     %0.3
Prom 22:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fun, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <sym->
  void                    Return             l     %0.3

│ apdef[0x55804f88ab00]                                                        │
└──────────────────────────────────────────────────────────────────────────────┘
