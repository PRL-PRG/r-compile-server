
┌──────────────────────────────────────────────────────────────────────────────┐
│ [0x55804ef1fa00]                                                             │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;NonRefl0,NonRefl1,!Obj0,!Obj1        │
│ Properties:                                                                  │
├────── Final PIR Version
[0x55804ef1fa00]
BB0
  val?^           %0.0  = LdArg                    1
  val?^           %0.1  = LdArg                    0
  val?^ | miss    %0.2  = LdVar              eR    typeof, <env 0x55804e699488>
  lgl$#-          %0.3  = Identical                %0.2, function(x) <(rir::DispatchTable*)0x55804e1c3c|...
  void                    Branch                   %0.3 -> BB64 (if true) | BB65 (if false)
BB64   <- [0]
  env             e64.0 = MkEnv              l     v=%0.1, w=%0.0, parent=<env 0x55804e699488>, context 1
  val+            %64.1 = Force!<lazy>       !vr   %0.1,    <val?->
  str$-           %64.2 = CallSafeBuiltin    wed   typeof(%64.1)    <str$->
  lgl$-           %64.3 = Eq                 d     %64.2, "symbol", elided   <lgl$->
  lgl$#-          %64.4 = CheckTrueFalse     e     %64.3
  void                    Branch                   %64.4 -> BB7 (if true) | BB5 (if false)
BB65   <- [0]
  env             e65.0 = (MkEnv)            l     v=%0.1, w=%0.0, parent=<env 0x55804e699488>, context 1
  fs              %65.1 = FrameState         R     0x55804e9a6630+0: [], env=e65.0
  void                    Deopt              !v    %65.1, CallTarget@0x55804f22a9e8[Call#0], %0.2
BB7   <- [64]
  val?^ | miss    %7.0  = LdVar              eR    as.character, <env 0x55804e699488>
  lgl$#-          %7.1  = Identical                <blt as.character>, %7.0   <true>
  void                    Branch                   %7.1 -> BB66 (if true) | BB67 (if false)
BB5   <- [64]
  void                    Invisible          v     
  nil-            %5.1  = nil
  goto BB6
BB66   <- [7]
  lgl$#-          %66.0 = IsType                   %64.1 isA val?-
  void                    Branch                   %66.0 -> BB68 (if true) | BB69 (if false)
BB67   <- [7]
  void                    Nop                !     
  lgl$#-          %67.1 = %7.1
  dr              %67.2 = DeadBranchReached@0x55804f22a9e8[Test#0]
  goto BB3
BB6   <- [5, 51]
  val?            %6.0  = Phi                      %5.1:BB5, %51.2:BB51
  val?            %6.1  = %6.0
  void                    Return             l     %6.1
BB68   <- [66]
  val-            %68.0 = CastType           d     dn %64.1   <sym->
  val+            %68.1 = CallSafeBuiltin    wed   as.character(%68.0)    <str$->
  void                    StVar              lW    vn, %68.1, e64.0
  lgl-            %68.3 = Eq                 wed   %68.0, "...", elided   <lgl$->
  lgl$#-          %68.4 = IsType                   %68.3 isA lgl$-
  void                    Branch                   %68.4 -> BB70 (if true) | BB71 (if false)
BB69   <- [66]
  void                    Nop                !     
  val+            %69.1 = %64.1
  dr              %69.2 = Typecheck@0x55804f22a9e8[Type#4]
  goto BB3
BB3   <- [67, 69]
  val?^ | miss    %3.0  = Phi                      %67.1:BB67, %69.1:BB69
  val?^ | miss    %3.1  = %3.0
  dr              %3.2  = Phi                      %67.2:BB67, %69.2:BB69
  dr              %3.3  = %3.2
  fs              %3.4  = FrameState         R     0x55804e9a6630+32: [], env=e64.0
  prom-           %3.5  = MkArg                    %64.1, [0x55804ef1fa00]_p0 (!refl), e64.0
  val?~           %3.6  = CastType                 up %3.5
  env             e3.7  = (MkEnv)            l     x=%3.6, parent=R_BaseNamespace, context 0
  fs              %3.8  = FrameState         R     0x55804e7773a0+27: [%64.2], env=e3.7, next=%3.4
  void                    Deopt              !v    %3.8, %3.3, %3.1
BB70   <- [68]
  lgl$-           %70.0 = CastType           d     dn %68.3
  lgl$#-          %70.1 = CheckTrueFalse     e     %70.0
  void                    Branch                   %70.1 -> BB62 (if true) | BB10 (if false)
BB71   <- [68]
  void                    Nop                !     
  lgl-            %71.1 = %68.3
  dr              %71.2 = Typecheck@0x55804f22a9e8[Type#7]
  goto BB8
BB62   <- [70]
  (cls|spec|blt)  %62.0 = LdFun              !v    $, <env 0x55804e699488>
  fs              %62.1 = FrameState         R     0x55804e9a6630+853: [%62.0], env=e64.0
  void                    Deopt              !v    %62.1, DeadCall@0x55804f22a9e8[Call#18], %62.0
BB10   <- [70]
  val?^ | miss    %10.0 = LdVar              eR    isDDSym, <env 0x55804e699488>
  lgl$#-          %10.1 = Identical                %10.0, function(name) <(rir::DispatchTable*)0x55804e2|...
  void                    Branch                   %10.1 -> BB72 (if true) | BB73 (if false)
BB8   <- [71, 73]
  val?^ | miss    %8.0  = Phi                      %71.1:BB71, %73.1:BB73
  val?^ | miss    %8.1  = %8.0
  dr              %8.2  = Phi                      %71.2:BB71, %73.2:BB73
  dr              %8.3  = %8.2
  fs              %8.4  = FrameState         R     0x55804e9a6630+192: [%68.3], env=e64.0
  void                    Deopt              !v    %8.4, %8.3, %8.1
BB72   <- [10]
  prom-           %72.0 = MkArg                    unboundValue, [0x55804ef1fa00]_p1 (!refl), e64.0
  val?            %72.1 = StaticCall         !v    isDDSym[0x55804e3c7f60](%72.0) e64.0   <lgl$->
  lgl$#-          %72.2 = IsType                   %72.1 isA lgl$-
  void                    Branch                   %72.2 -> BB74 (if true) | BB75 (if false)
BB73   <- [10]
  void                    Nop                !     
  val?^ | miss    %73.1 = %10.0
  dr              %73.2 = CallTarget@0x55804f22a9e8[Call#2]
  goto BB8
BB74   <- [72]
  lgl$-           %74.0 = CastType           d     dn %72.1
  lgl$#-          %74.1 = CheckTrueFalse     e     %74.0
  void                    Branch                   %74.1 -> BB61 (if true) | BB13 (if false)
BB75   <- [72]
  fs              %75.0 = FrameState         R     0x55804e9a6630+235: [%72.1], env=e64.0
  void                    Deopt              !v    %75.0, Typecheck@0x55804f22a9e8[Type#9], %72.1   !
BB61   <- [74]
  (cls|spec|blt)  %61.0 = LdFun              !v    $, e64.0
  fs              %61.1 = FrameState         R     0x55804e9a6630+587: [%61.0], env=e64.0
  void                    Deopt              !v    %61.1, DeadCall@0x55804f22a9e8[Call#11], %61.0   !
BB13   <- [74]
  (cls|spec|blt)  %13.0 = LdFun              !v    $, <0x55804bee0c10>, e64.0
  prom-           %13.1 = MkArg                    unboundValue, [0x55804ef1fa00]_p2, e64.0
  prom-           %13.2 = MkArg                    unboundValue, [0x55804ef1fa00]_p3, e64.0
  val?            %13.3 = Call               !v    %13.0(%13.1, %13.2) e64.0   <cls->
  (cls|spec|blt)  %13.4 = ChkFunction        e     %13.3
  prom-           %13.5 = MkArg                    unboundValue, [0x55804ef1fa00]_p4, e64.0
  prom-           %13.6 = MkArg                    unboundValue, [0x55804ef1fa00]_p5, e64.0
  lgl$#-          %13.7 = Identical                %13.4, function(v, w) <(rir::DispatchTable*)0x55804e5|...
  val?^           %13.8 = CastType                 up %13.6
  val?^           %13.9 = CastType                 up %13.5
  void                    Branch                   %13.7 -> BB76 (if true) | BB77 (if false)
BB76   <- [13]
  ct              %76.0 = PushContext        lCL   %13.5, %13.6, $(w, isLocal)(vn, w), function(v, w) <(rir::DispatchTable*)0x55804e5|..., e64.0
  val?^ | miss    %76.1 = LdVar              eR    isDDSym, <env 0x55804e699488>
  lgl$#-          %76.2 = Identical                %76.1, function(name) <(rir::DispatchTable*)0x55804e2|...
  void                    Branch                   %76.2 -> BB78 (if true) | BB79 (if false)
BB77   <- [13]
  fs              %77.0 = FrameState         R     0x55804e9a6630+283: [%13.3], env=e64.0
  void                    Deopt              !v    %77.0, CallTarget@0x55804f22a9e8[Call#4], %13.4   !
BB78   <- [76]
  env             e78.0 = MkEnv              l     v=%13.9, w=%13.8, parent=<env 0x55804e699488>, context 1
  prom-           %78.1 = MkArg                    unboundValue, [0x55804ef1fa00]_p18, e78.0
  ct              %78.2 = PushContext        lCL   %78.1, isDDSym(v), function(name) <(rir::DispatchTable*)0x55804e2|..., e78.0
  val?^           %78.3 = CastType                 up %78.1
  val?^ | miss    %78.4 = LdVar              eR    is.symbol, <env 0x55804e699488>
  lgl$#-          %78.5 = Identical                <blt is.symbol>, %78.4   <true>
  void                    Branch                   %78.5 -> BB80 (if true) | BB81 (if false)
BB79   <- [76]
  fs              %79.0 = FrameState         R     0x55804e9a6630+321: [], env=e64.0
  env             e79.1 = (MkEnv)            l     v=%13.9, w=%13.8, parent=<env 0x55804e699488>, context 1
  fs              %79.2 = FrameState         R     0x55804eb466f0+0: [], env=e79.1, next=%79.0
  void                    Deopt              !v    %79.2, CallTarget@0x55804f22bd28[Call#0], %76.1   !
BB80   <- [78]
  env             e80.0 = MkEnv              l     name=%78.3, parent=<env 0x55804e699488>, context 1
  val?            %80.1 = Force!<lazy>       !vL   %78.3, e80.0   <(sym|str)->
  lgl$#-          %80.2 = CallSafeBuiltin    wed   is.symbol(%80.1)    <lgl$->
  void                    Branch                   %80.2 -> BB60 (if true) | BB22 (if false)
BB81   <- [78]
  fs              %81.0 = FrameState         R     0x55804e9a6630+321: [], env=e64.0
  fs              %81.1 = FrameState         R     0x55804eb466f0+32: [], env=e78.0, next=%81.0
  env             e81.2 = (MkEnv)            l     name=%78.3, parent=<env 0x55804e699488>, context 1
  fs              %81.3 = FrameState         R     0x55804ed96dd0+17: [<blt is.symbol>, %78.5], env=e81.2, next=%81.1
  void                    Deopt              !v    %81.3, DeadBranchReached@0x55804eaeb288[Test#0], %78.5   !
BB60   <- [80]
  void                    Nop                !     
  lgl$#-          %60.1 = %80.2
  goto BB23
BB22   <- [80]
  val?^ | miss    %22.0 = LdVar              eR    is.character, <env 0x55804e699488>
  lgl$#-          %22.1 = Identical                <blt is.character>, %22.0   <true>
  void                    Branch                   %22.1 -> BB82 (if true) | BB83 (if false)
BB23   <- [60, 82]
  lgl$-           %23.0 = Phi                      %82.2:BB82, %60.1:BB60
  lgl$-           %23.1 = %23.0
  lgl$-           %23.2 = AsLogical                %23.1
  lgl$#-          %23.3 = Identical                %23.2, false
  void                    Branch                   %23.3 -> BB59 (if true) | BB26 (if false)
BB82   <- [22]
  lgl$#-          %82.0 = CallSafeBuiltin    wed   is.character(%80.1)    <lgl$->
  lgl$-           %82.1 = LOr                      %80.2, %82.0
  lgl$-           %82.2 = %82.1
  goto BB23
BB83   <- [22]
  fs              %83.0 = FrameState         R     0x55804e9a6630+321: [], env=e64.0
  fs              %83.1 = FrameState         R     0x55804eb466f0+32: [], env=e78.0, next=%83.0
  fs              %83.2 = FrameState         R     0x55804ed96dd0+91: [%80.2], env=e80.0, next=%83.1
  void                    Deopt              !v    %83.2, DeadBranchReached@0x55804eaeb288[Test#1], %22.1   !
BB59   <- [23]
  void                    Nop                !     
  lgl$-           %59.1 = %23.2
  goto BB31
BB26   <- [23]
  val?^ | miss    %26.0 = LdVar              eR    length, <env 0x55804e699488>
  lgl$#-          %26.1 = Identical                <blt length>, %26.0   <true>
  void                    Branch                   %26.1 -> BB84 (if true) | BB85 (if false)
BB31   <- [59, 90]
  lgl$-           %31.0 = Phi                      %90.4:BB90, %59.1:BB59
  lgl$-           %31.1 = %31.0
  val?            %31.2 = PopContext         C     %31.1, %78.2   <lgl$->
  lgl$#-          %31.3 = IsType                   %31.2 isA lgl$-
  void                    Branch                   %31.3 -> BB92 (if true) | BB93 (if false)
BB84   <- [26]
  val?^ | miss    %84.0 = LdVar              eR    grep, <env 0x55804e699488>
  lgl$#-          %84.1 = Identical                %84.0, function(pattern, x, ignore.case=FALSE, perl=F|...
  void                    Branch                   %84.1 -> BB86 (if true) | BB87 (if false)
BB85   <- [26]
  void                    Nop                !     
  lgl$#-          %85.1 = %26.1
  dr              %85.2 = DeadBranchReached@0x55804eaeb288[Test#2]
  goto BB24
BB92   <- [31]
  lgl$-           %92.0 = CastType           d     dn %31.2
  lgl$#-          %92.1 = CheckTrueFalse     e     %92.0
  void                    Branch                   %92.1 -> BB58 (if true) | BB34 (if false)
BB93   <- [31]
  fs              %93.0 = FrameState         R     0x55804e9a6630+321: [], env=e64.0
  fs              %93.1 = FrameState         R     0x55804eb466f0+32: [%31.2], env=e78.0, next=%93.0
  void                    Deopt              !v    %93.1, Typecheck@0x55804f22bd28[Type#1], %31.2   !
BB86   <- [84]
  prom-           %86.0 = MkArg                    unboundValue, [0x55804ef1fa00]_p28, e80.0
  val?            %86.1 = StaticCall         !v    grep[0x558050861830]("^\.\.[[:digit:]]+$", %86.0) e80.0   <int->
  lgl$#-          %86.2 = IsType                   %86.1 isA int-
  void                    Branch                   %86.2 -> BB88 (if true) | BB89 (if false)
BB87   <- [84]
  void                    Nop                !     
  val?^ | miss    %87.1 = %84.0
  dr              %87.2 = CallTarget@0x55804eaeb288[Call#5]
  goto BB24
BB24   <- [85, 87]
  val?^ | miss    %24.0 = Phi                      %85.1:BB85, %87.1:BB87
  val?^ | miss    %24.1 = %24.0
  dr              %24.2 = Phi                      %85.2:BB85, %87.2:BB87
  dr              %24.3 = %24.2
  fs              %24.4 = FrameState         R     0x55804e9a6630+321: [], env=e64.0
  fs              %24.5 = FrameState         R     0x55804eb466f0+32: [], env=e78.0, next=%24.4
  fs              %24.6 = FrameState         R     0x55804ed96dd0+201: [%23.1], env=e80.0, next=%24.5
  void                    Deopt              !v    %24.6, %24.3, %24.1   !
BB58   <- [92]
  void                    StVar              lW    v, "...", e78.0
  goto BB35
BB34   <- [92]
  void                    Nop                !     
  goto BB35
BB88   <- [86]
  int-            %88.0 = CastType           d     dn %86.1
  (int|real)$-    %88.1 = CallSafeBuiltin    wed   length(%88.0)    <int$->
  lgl$#-          %88.2 = IsType                   %88.1 isA int$-
  void                    Branch                   %88.2 -> BB90 (if true) | BB91 (if false)
BB89   <- [86]
  fs              %89.0 = FrameState         R     0x55804e9a6630+321: [], env=e64.0
  fs              %89.1 = FrameState         R     0x55804eb466f0+32: [], env=e78.0, next=%89.0
  fs              %89.2 = FrameState         R     0x55804ed96dd0+306: [%23.2, <blt length>, %86.1], env=e80.0, next=%89.1
  void                    Deopt              !v    %89.2, Typecheck@0x55804eaeb288[Type#11], %86.1   !
BB35   <- [34, 58]
  val?^ | miss    %35.0 = LdVar              eR    is.baseenv, e78.0
  lgl$#-          %35.1 = Identical                %35.0, function(e) <(rir::DispatchTable*)0x55804e41e7|...
  void                    Branch                   %35.1 -> BB94 (if true) | BB95 (if false)
BB90   <- [88]
  int$-           %90.0 = CastType           d     dn %88.1
  lgl$-           %90.1 = Neq                d     %90.0, 0, elided   <lgl$->
  lgl$-           %90.2 = AsLogical                %90.1
  lgl$-           %90.3 = LAnd                     %23.2, %90.2
  lgl$-           %90.4 = %90.3
  goto BB31
BB91   <- [88]
  fs              %91.0 = FrameState         R     0x55804e9a6630+321: [], env=e64.0
  fs              %91.1 = FrameState         R     0x55804eb466f0+32: [], env=e78.0, next=%91.0
  fs              %91.2 = FrameState         R     0x55804ed96dd0+328: [%23.2, %88.1], env=e80.0, next=%91.1
  void                    Deopt              !v    %91.2, Typecheck@0x55804eaeb288[Type#12], %88.1   !
BB94   <- [35]
  prom-           %94.0 = MkArg                    unboundValue, [0x55804ef1fa00]_p19, e78.0
  ct              %94.1 = PushContext        lCL   %94.0, is.baseenv(findOwnerEnv(v, $(w, env), stop=$(w|..., function(e) <(rir::DispatchTable*)0x55804e41e7|..., e78.0
  val?^           %94.2 = CastType                 up %94.0
  val?^ | miss    %94.3 = LdVar              eR    identical, <env 0x55804e699488>
  lgl$#-          %94.4 = Identical                %94.3, function(x, y, num.eq=TRUE, single.NA=TRUE, at|...
  void                    Branch                   %94.4 -> BB96 (if true) | BB97 (if false)
BB95   <- [35]
  fs              %95.0 = FrameState         R     0x55804e9a6630+321: [], env=e64.0
  fs              %95.1 = FrameState         R     0x55804eb466f0+63: [], env=e78.0, next=%95.0
  void                    Deopt              !v    %95.1, CallTarget@0x55804f22bd28[Call#1], %35.0   !
BB96   <- [94]
  env             e96.0 = MkEnv              l     e=%94.2, parent=<env 0x55804e699488>, context 1
  prom-           %96.1 = MkArg                    unboundValue, [0x55804ef1fa00]_p30, e96.0
  prom-           %96.2 = MkArg                    unboundValue, [0x55804ef1fa00]_p31, e96.0
  ct              %96.3 = PushContext        lCL   %96.1, %96.2, identical(e, .BaseEnv), function(x, y, num.eq=TRUE, single.NA=TRUE, at|..., e96.0
  val?^           %96.4 = CastType                 up %96.2
  val?^           %96.5 = CastType                 up %96.1
  env             e96.6 = MkEnv              l     x=%96.5, y=%96.4, num.eq(miss)=true, single.NA(miss)=true, attrib.as.set(miss)=true, ignore.bytecode(miss)=true, ignore.environment(miss)=false, ignore.srcref(miss)=true, parent=R_BaseNamespace, context 1
  val?            %96.7 = Force!<lazy>       !vL   %96.5, e96.6   <val?+>
  val?            %96.8 = Force!<lazy>       !vL   %96.4, e96.6   <val?+>
  val?            %96.9 = CallBuiltin        !     identical(%96.7, %96.8, true, true, true, true, false, true) e96.6
  val?            %96.10 = PopContext         C     %96.9, %96.3   <lgl$->
  lgl$#-          %96.11 = IsType                   %96.10 isA lgl$-
  void                    Branch                   %96.11 -> BB98 (if true) | BB99 (if false)
BB97   <- [94]
  fs              %97.0 = FrameState         R     0x55804e9a6630+321: [], env=e64.0
  fs              %97.1 = FrameState         R     0x55804eb466f0+95: [], env=e78.0, next=%97.0
  env             e97.2 = (MkEnv)            l     e=%94.2, parent=<env 0x55804e699488>, context 1
  fs              %97.3 = FrameState         R     0x55804eb37490+0: [], env=e97.2, next=%97.1
  void                    Deopt              !v    %97.3, CallTarget@0x55804ea246f8[Call#0], %94.3   !
BB98   <- [96]
  lgl$-           %98.0 = CastType           d     dn %96.10
  val?            %98.1 = PopContext         C     %98.0, %94.1   <lgl$->
  lgl$#-          %98.2 = IsType                   %98.1 isA lgl$-
  void                    Branch                   %98.2 -> BB100 (if true) | BB101 (if false)
BB99   <- [96]
  fs              %99.0 = FrameState         R     0x55804e9a6630+321: [], env=e64.0
  fs              %99.1 = FrameState         R     0x55804eb466f0+95: [], env=e78.0, next=%99.0
  fs              %99.2 = FrameState         R     0x55804eb37490+37: [%96.10], env=e96.0, next=%99.1
  void                    Deopt              !v    %99.2, Typecheck@0x55804ea246f8[Type#2], %96.10   !
BB100   <- [98]
  lgl$-           %100.0 = CastType           d     dn %98.1
  lgl$-           %100.1 = Not                vd    %100.0, elided
  val?            %100.2 = PopContext         C     %100.1, %76.0   <lgl$->
  lgl$#-          %100.3 = IsType                   %100.2 isA lgl$-
  void                    Branch                   %100.3 -> BB102 (if true) | BB103 (if false)
BB101   <- [98]
  fs              %101.0 = FrameState         R     0x55804e9a6630+321: [], env=e64.0
  fs              %101.1 = FrameState         R     0x55804eb466f0+95: [%98.1], env=e78.0, next=%101.0
  void                    Deopt              !v    %101.1, Typecheck@0x55804f22bd28[Type#11], %98.1   !
BB102   <- [100]
  lgl$-           %102.0 = CastType           d     dn %100.2
  lgl$#-          %102.1 = CheckTrueFalse     e     %102.0
  void                    Branch                   %102.1 -> BB55 (if true) | BB46 (if false)
BB103   <- [100]
  void                    Nop                !     
  val?            %103.1 = %100.2
  dr              %103.2 = Typecheck@0x55804f22a9e8[Type#15]
  goto BB44
BB55   <- [102]
  (cls|spec|blt)  %55.0 = LdFun              !     $, <0x55804bee0c10>, e64.0
  prom-           %55.1 = MkArg                    unboundValue, [0x55804ef1fa00]_p13, e64.0
  prom-           %55.2 = MkArg                    unboundValue, [0x55804ef1fa00]_p14, e64.0
  val?            %55.3 = Call               !     %55.0(%55.1, %55.2) e64.0   <cls->
  (cls|spec|blt)  %55.4 = ChkFunction        e     %55.3
  prom-           %55.5 = MkArg                    unboundValue, [0x55804ef1fa00]_p15, e64.0
  prom-           %55.6 = MkArg                    unboundValue, [0x55804ef1fa00]_p16, e64.0
  prom-           %55.7 = MkArg                    unboundValue, [0x55804ef1fa00]_p17, e64.0
  lgl$#-          %55.8 = Identical                %55.4, function(type, n, e, w) <(rir::DispatchTable*)|...
  void                    Branch                   %55.8 -> BB106 (if true) | BB107 (if false)
BB46   <- [102]
  val?^ | miss    %46.0 = LdVar              eR    %in%, e64.0
  lgl$#-          %46.1 = Identical                %46.0, function(x, table) <(rir::DispatchTable*)0x558|...
  void                    Branch                   %46.1 -> BB104 (if true) | BB105 (if false)
BB44   <- [103, 105]
  val?^ | miss    %44.0 = Phi                      %103.1:BB103, %105.1:BB105
  val?^ | miss    %44.1 = %44.0
  dr              %44.2 = Phi                      %103.2:BB103, %105.2:BB105
  dr              %44.3 = %44.2
  fs              %44.4 = FrameState         R     0x55804e9a6630+321: [%100.2], env=e64.0
  void                    Deopt              !v    %44.4, %44.3, %44.1   !
BB106   <- [55]
  val?            %106.0 = StaticCall         !     [0x55804e72c220]("variable", %55.5, %55.6, %55.7) e64.0   <vec>
  val?            %106.1 = %106.0
  goto BB51
BB107   <- [55]
  fs              %107.0 = FrameState         R     0x55804e9a6630+524: [%55.3], env=e64.0
  void                    Deopt              !v    %107.0, CallTarget@0x55804f22a9e8[Call#10], %55.4   !
BB104   <- [46]
  prom-           %104.0 = MkArg                    unboundValue, [0x55804ef1fa00]_p7, e64.0
  val?^ | miss    %104.1 = LdVar              eR    vn, e64.0
  void                    Visible            v     
  val?            %104.3 = Force!<value>      !     %104.1, e64.0   <str$->
  prom-           %104.4 = MkArg                    %104.3, [0x55804ef1fa00]_p6 (!refl), 
  val?            %104.5 = StaticCall         !     %in%[0x55804eb7dc20](%104.4, %104.0) e64.0   <lgl$->
  lgl$#-          %104.6 = IsType                   %104.5 isA lgl$-
  void                    Branch                   %104.6 -> BB108 (if true) | BB109 (if false)
BB105   <- [46]
  void                    Nop                !     
  val?^ | miss    %105.1 = %46.0
  dr              %105.2 = CallTarget@0x55804f22a9e8[Call#5]
  goto BB44
BB51   <- [50, 106]
  val?            %51.0 = Phi                      %50.2:BB50, %106.1:BB106
  val?            %51.1 = %51.0
  val?            %51.2 = %51.1
  goto BB6
BB108   <- [104]
  lgl$-           %108.0 = CastType           d     dn %104.5
  lgl$-           %108.1 = Not                vd    %108.0, elided
  lgl$#-          %108.2 = CheckTrueFalse     e     %108.1
  void                    Branch                   %108.2 -> BB52 (if true) | BB49 (if false)
BB109   <- [104]
  fs              %109.0 = FrameState         R     0x55804e9a6630+369: [%104.5], env=e64.0
  void                    Deopt              !v    %109.0, Typecheck@0x55804f22a9e8[Type#18], %104.5   !
BB52   <- [108]
  (cls|spec|blt)  %52.0 = LdFun              !     $, <0x55804bee0c10>, e64.0
  prom-           %52.1 = MkArg                    unboundValue, [0x55804ef1fa00]_p8, e64.0
  prom-           %52.2 = MkArg                    unboundValue, [0x55804ef1fa00]_p9, e64.0
  val?            %52.3 = Call               !     %52.0(%52.1, %52.2) e64.0   <cls->
  (cls|spec|blt)  %52.4 = ChkFunction        e     %52.3
  prom-           %52.5 = MkArg                    unboundValue, [0x55804ef1fa00]_p10, e64.0
  prom-           %52.6 = MkArg                    unboundValue, [0x55804ef1fa00]_p11, e64.0
  prom-           %52.7 = MkArg                    unboundValue, [0x55804ef1fa00]_p12, e64.0
  lgl$#-          %52.8 = Identical                %52.4, function(type, n, e, w) <(rir::DispatchTable*)|...
  void                    Branch                   %52.8 -> BB110 (if true) | BB111 (if false)
BB49   <- [108]
  void                    Invisible          v     
  nil-            %49.1 = nil
  goto BB50
BB110   <- [52]
  val?            %110.0 = StaticCall         !     [0x55804fc19310]("variable", %52.5, %52.6, %52.7) e64.0   <nil->
  val?            %110.1 = %110.0
  goto BB50
BB111   <- [52]
  fs              %111.0 = FrameState         R     0x55804e9a6630+429: [%52.3], env=e64.0
  void                    Deopt              !v    %111.0, CallTarget@0x55804f22a9e8[Call#8], %52.4   !
BB50   <- [49, 110]
  val?            %50.0 = Phi                      %49.1:BB49, %110.1:BB110
  val?            %50.1 = %50.0
  val?            %50.2 = %50.1
  goto BB51
Prom 0:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    v, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <val?->
  void                    Return             l     %0.3
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    v, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <sym->
  void                    Return             l     %0.3
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    w, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 3:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    isLocal, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 4:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    vn, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 5:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    w, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 6:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    vn, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 7:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     c, <0x55804bee1940>, e0.0
  val?            %0.2  = Call               !     %0.1("*tmp*", "*tmpv*") e0.0   <str->
  void                    Return             l     %0.2
Prom 8:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    w, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 9:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    enterGlobal, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 10:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    vn, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 11:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    v, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 12:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    w, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 13:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    w, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 14:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    enterLocal, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 15:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    vn, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 16:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    v, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 17:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    w, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 18:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    v, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 19:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     findOwnerEnv, <0x55804e95cf28>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, [0x55804ef1fa00]_p20, e0.0
  prom-           %0.3  = MkArg                    unboundValue, [0x55804ef1fa00]_p21, e0.0
  prom-           %0.4  = MkArg                    unboundValue, [0x55804ef1fa00]_p24, e0.0
  prom-           %0.5  = MkArg                    unboundValue, [0x55804ef1fa00]_p27, e0.0
  val?            %0.6  = NamedCall          !     %0.1(%0.2, %0.3, stop=%0.4, default=%0.5) e0.0   <env+>
  void                    Return             l     %0.6
Prom 20:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    v, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 21:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     $, <0x55804bee0c10>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, [0x55804ef1fa00]_p22, e0.0
  prom-           %0.3  = MkArg                    unboundValue, [0x55804ef1fa00]_p23, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <env+>
  void                    Return             l     %0.4
Prom 22:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    w, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 23:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    env, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 24:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     $, <0x55804bee0c10>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, [0x55804ef1fa00]_p25, e0.0
  prom-           %0.3  = MkArg                    unboundValue, [0x55804ef1fa00]_p26, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <env->
  void                    Return             l     %0.4
Prom 25:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    w, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 26:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    globalenv, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 27:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    .BaseEnv, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 28:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     as.character, <0x55804beee040>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, [0x55804ef1fa00]_p29, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <str$->
  void                    Return             l     %0.3
Prom 29:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    name, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <(sym|str)->
  void                    Return             l     %0.3
Prom 30:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    e, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <(lgl|env)+>
  void                    Return             l     %0.3
Prom 31:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    .BaseEnv, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <env->
  void                    Return             l     %0.3

│ [0x55804ef1fa00]                                                             │
└──────────────────────────────────────────────────────────────────────────────┘
