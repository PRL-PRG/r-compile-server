
┌──────────────────────────────────────────────────────────────────────────────┐
│ addLocalFunDef[0x55804e6c7270]                                               │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch                                      │
│ Properties:                                                                  │
├────── Final PIR Version
addLocalFunDef[0x55804e6c7270]
BB0
  val?^           %0.0  = LdArg                    2
  val?^           %0.1  = LdArg                    1
  val?^           %0.2  = LdArg                    0
  val?^ | miss    %0.3  = LdVar              eR    getLocalUsageEntry, <env 0x55804e699488>
  lgl$#-          %0.4  = Identical                %0.3, function(vn, w) <(rir::DispatchTable*)0x55804e|...
  void                    Branch                   %0.4 -> BB37 (if true) | BB38 (if false)
BB37   <- [0]
  env             e37.0 = MkEnv              l     vn=%0.2, e=%0.1, w=%0.0, parent=<env 0x55804e699488>, context 1
  prom-           %37.1 = MkArg                    unboundValue, addLocalFunDef[0x55804e6c7270]_p0, e37.0
  prom-           %37.2 = MkArg                    unboundValue, addLocalFunDef[0x55804e6c7270]_p1, e37.0
  ct              %37.3 = PushContext        lCL   %37.1, %37.2, getLocalUsageEntry(vn, w), function(vn, w) <(rir::DispatchTable*)0x55804e|..., e37.0
  val?^           %37.4 = CastType                 up %37.2
  val?^           %37.5 = CastType                 up %37.1
  val?^ | miss    %37.6 = LdVar              eR    findOwnerEnv, <env 0x55804e699488>
  lgl$#-          %37.7 = Identical                %37.6, function(v, env, stop=NA, default=NA) <(rir::D|...
  void                    Branch                   %37.7 -> BB39 (if true) | BB40 (if false)
BB38   <- [0]
  env             e38.0 = (MkEnv)            l     vn=%0.2, e=%0.1, w=%0.0, parent=<env 0x55804e699488>, context 1
  fs              %38.1 = FrameState         R     0x55804e3caeb0+0: [], env=e38.0
  void                    Deopt              !v    %38.1, CallTarget@0x55804e0f9650[Call#0], %0.3
BB39   <- [37]
  env             e39.0 = MkEnv              l     vn=%37.5, w=%37.4, parent=<env 0x55804e699488>, context 1
  prom-           %39.1 = MkArg                    unboundValue, addLocalFunDef[0x55804e6c7270]_p8, e39.0
  prom-           %39.2 = MkArg                    unboundValue, addLocalFunDef[0x55804e6c7270]_p9, e39.0
  prom-           %39.3 = MkArg                    unboundValue, addLocalFunDef[0x55804e6c7270]_p12, e39.0
  prom-           %39.4 = MkArg                    unboundValue, addLocalFunDef[0x55804e6c7270]_p15, e39.0
  val?            %39.5 = StaticCall         !v    findOwnerEnv[0x55804c747780](%39.1, %39.2, %39.3, %39.4) { 0 1 2n 3n } e39.0   <env+>
  void                    StVar              lW    env, %39.5, e39.0
  val?^ | miss    %39.7 = LdVar              eR    is.baseenv, e39.0
  lgl$#-          %39.8 = Identical                %39.7, function(e) <(rir::DispatchTable*)0x55804e41e7|...
  void                    Branch                   %39.8 -> BB41 (if true) | BB42 (if false)
BB40   <- [37]
  fs              %40.0 = FrameState         R     0x55804e3caeb0+37: [], env=e37.0
  env             e40.1 = (MkEnv)            l     vn=%37.5, w=%37.4, parent=<env 0x55804e699488>, context 1
  fs              %40.2 = FrameState         R     0x55804e1e4250+0: [], env=e40.1, next=%40.0
  void                    Deopt              !v    %40.2, CallTarget@0x55804eaea998[Call#0], %37.6   !
BB41   <- [39]
  prom-           %41.0 = MkArg                    unboundValue, addLocalFunDef[0x55804e6c7270]_p16 (!refl), e39.0
  ct              %41.1 = PushContext        lCL   %41.0, is.baseenv(env), function(e) <(rir::DispatchTable*)0x55804e41e7|..., e39.0
  val?^           %41.2 = CastType                 up %41.0
  val?^ | miss    %41.3 = LdVar              eR    identical, <env 0x55804e699488>
  lgl$#-          %41.4 = Identical                %41.3, function(x, y, num.eq=TRUE, single.NA=TRUE, at|...
  void                    Branch                   %41.4 -> BB43 (if true) | BB44 (if false)
BB42   <- [39]
  fs              %42.0 = FrameState         R     0x55804e3caeb0+37: [], env=e37.0
  fs              %42.1 = FrameState         R     0x55804e1e4250+77: [], env=e39.0, next=%42.0
  void                    Deopt              !v    %42.1, CallTarget@0x55804eaea998[Call#3], %39.7   !
BB43   <- [41]
  env             e43.0 = MkEnv              l     e=%41.2, parent=<env 0x55804e699488>, context 1
  prom-           %43.1 = MkArg                    unboundValue, addLocalFunDef[0x55804e6c7270]_p22, e43.0
  prom-           %43.2 = MkArg                    unboundValue, addLocalFunDef[0x55804e6c7270]_p23, e43.0
  ct              %43.3 = PushContext        lCL   %43.1, %43.2, identical(e, .BaseEnv), function(x, y, num.eq=TRUE, single.NA=TRUE, at|..., e43.0
  val?^           %43.4 = CastType                 up %43.2
  val?^           %43.5 = CastType                 up %43.1
  env             e43.6 = MkEnv              l     x=%43.5, y=%43.4, num.eq(miss)=true, single.NA(miss)=true, attrib.as.set(miss)=true, ignore.bytecode(miss)=true, ignore.environment(miss)=false, ignore.srcref(miss)=true, parent=R_BaseNamespace, context 1
  val?            %43.7 = Force!<lazy>       !vL   %43.5, e43.6   <val?+>
  val?            %43.8 = Force!<lazy>       !vL   %43.4, e43.6   <val?+>
  val?            %43.9 = CallBuiltin        !v    identical(%43.7, %43.8, true, true, true, true, false, true) e43.6
  val?            %43.10 = PopContext         C     %43.9, %43.3   <lgl$->
  lgl$#-          %43.11 = IsType                   %43.10 isA lgl$-
  void                    Branch                   %43.11 -> BB45 (if true) | BB46 (if false)
BB44   <- [41]
  fs              %44.0 = FrameState         R     0x55804e3caeb0+37: [], env=e37.0
  fs              %44.1 = FrameState         R     0x55804e1e4250+109: [], env=e39.0, next=%44.0
  env             e44.2 = (MkEnv)            l     e=%41.2, parent=<env 0x55804e699488>, context 1
  fs              %44.3 = FrameState         R     0x55804eb37490+0: [], env=e44.2, next=%44.1
  void                    Deopt              !v    %44.3, CallTarget@0x55804ea246f8[Call#0], %41.3   !
BB45   <- [43]
  lgl$-           %45.0 = CastType           d     dn %43.10
  val?            %45.1 = PopContext         C     %45.0, %41.1   <lgl$->
  lgl$#-          %45.2 = IsType                   %45.1 isA lgl$-
  void                    Branch                   %45.2 -> BB47 (if true) | BB48 (if false)
BB46   <- [43]
  fs              %46.0 = FrameState         R     0x55804e3caeb0+37: [], env=e37.0
  fs              %46.1 = FrameState         R     0x55804e1e4250+109: [], env=e39.0, next=%46.0
  fs              %46.2 = FrameState         R     0x55804eb37490+37: [%43.10], env=e43.0, next=%46.1
  void                    Deopt              !v    %46.2, Typecheck@0x55804ea246f8[Type#2], %43.10   !
BB47   <- [45]
  lgl$-           %47.0 = CastType           d     dn %45.1
  lgl$#-          %47.1 = CheckTrueFalse     e     %47.0
  void                    Branch                   %47.1 -> BB35 (if true) | BB13 (if false)
BB48   <- [45]
  fs              %48.0 = FrameState         R     0x55804e3caeb0+37: [], env=e37.0
  fs              %48.1 = FrameState         R     0x55804e1e4250+109: [%45.1], env=e39.0, next=%48.0
  void                    Deopt              !v    %48.1, Typecheck@0x55804eaea998[Type#10], %45.1   !
BB35   <- [47]
  (cls|spec|blt)  %35.0 = LdFun              !v    stop, e39.0
  val?            %35.1 = Call               !v    %35.0("no local variable entry") e39.0
  goto BB14
BB13   <- [47]
  void                    Nop                !     
  goto BB14
BB14   <- [13, 35]
  val?^ | miss    %14.0 = LdVar              eR    identical, e39.0
  lgl$#-          %14.1 = Identical                %14.0, function(x, y, num.eq=TRUE, single.NA=TRUE, at|...
  void                    Branch                   %14.1 -> BB49 (if true) | BB50 (if false)
BB49   <- [14]
  prom-           %49.0 = MkArg                    unboundValue, addLocalFunDef[0x55804e6c7270]_p17, e39.0
  prom-           %49.1 = MkArg                    unboundValue, addLocalFunDef[0x55804e6c7270]_p18, e39.0
  ct              %49.2 = PushContext        lCL   %49.0, %49.1, identical(env, attr(env, "checkUsageFrame")), function(x, y, num.eq=TRUE, single.NA=TRUE, at|..., e39.0
  val?^           %49.3 = CastType                 up %49.1
  val?^           %49.4 = CastType                 up %49.0
  env             e49.5 = MkEnv              l     x=%49.4, y=%49.3, num.eq(miss)=true, single.NA(miss)=true, attrib.as.set(miss)=true, ignore.bytecode(miss)=true, ignore.environment(miss)=false, ignore.srcref(miss)=true, parent=R_BaseNamespace, context 1
  val?            %49.6 = Force!<lazy>       !vL   %49.4, e49.5   <val?+>
  val?            %49.7 = Force!<lazy>       !vL   %49.3, e49.5   <val?+>
  val?            %49.8 = CallBuiltin        !v    identical(%49.6, %49.7, true, true, true, true, false, true) e49.5
  val?            %49.9 = PopContext         C     %49.8, %49.2   <lgl$->
  lgl$#-          %49.10 = IsType                   %49.9 isA lgl$-
  void                    Branch                   %49.10 -> BB51 (if true) | BB52 (if false)
BB50   <- [14]
  fs              %50.0 = FrameState         R     0x55804e3caeb0+37: [], env=e37.0
  fs              %50.1 = FrameState         R     0x55804e1e4250+158: [], env=e39.0, next=%50.0
  void                    Deopt              !v    %50.1, CallTarget@0x55804eaea998[Call#5], %14.0   !
BB51   <- [49]
  lgl$-           %51.0 = CastType           d     dn %49.9
  lgl$-           %51.1 = Not                d     %51.0, elided
  lgl$#-          %51.2 = CheckTrueFalse     e     %51.1
  void                    Branch                   %51.2 -> BB34 (if true) | BB19 (if false)
BB52   <- [49]
  fs              %52.0 = FrameState         R     0x55804e3caeb0+37: [], env=e37.0
  fs              %52.1 = FrameState         R     0x55804e1e4250+195: [%49.9], env=e39.0, next=%52.0
  void                    Deopt              !v    %52.1, Typecheck@0x55804eaea998[Type#14], %49.9   !
BB34   <- [51]
  (cls|spec|blt)  %34.0 = LdFun              !v    stop, e39.0
  val?            %34.1 = Call               !v    %34.0("sanity check on local usage frame failed") e39.0
  goto BB20
BB19   <- [51]
  void                    Nop                !     
  goto BB20
BB20   <- [19, 34]
  val?^ | miss    %20.0 = LdVar              eR    get, e39.0
  lgl$#-          %20.1 = Identical                %20.0, function(x, pos=-(1L), envir=as.environment(po|...
  void                    Branch                   %20.1 -> BB53 (if true) | BB54 (if false)
BB53   <- [20]
  prom-           %53.0 = MkArg                    unboundValue, addLocalFunDef[0x55804e6c7270]_p20, e39.0
  prom-           %53.1 = MkArg                    unboundValue, addLocalFunDef[0x55804e6c7270]_p21, e39.0
  val?            %53.2 = StaticCall         !v    get[0x55804de02eb0](%53.0, missingArg, %53.1, missingArg, false) { 0 2n 4n } e39.0   <env->
  void                    StVar              lW    entry, %53.2, e39.0
  val?^ | miss    %53.4 = LdVar              eR    is.environment, e39.0
  lgl$#-          %53.5 = Identical                <blt is.environment>, %53.4   <true>
  void                    Branch                   %53.5 -> BB55 (if true) | BB56 (if false)
BB54   <- [20]
  fs              %54.0 = FrameState         R     0x55804e3caeb0+37: [], env=e37.0
  fs              %54.1 = FrameState         R     0x55804e1e4250+245: [], env=e39.0, next=%54.0
  void                    Deopt              !v    %54.1, CallTarget@0x55804eaea998[Call#8], %20.0   !
BB55   <- [53]
  val             %55.0 = ChkMissing         e     %53.2
  lgl$#-          %55.1 = CallSafeBuiltin    wed   is.environment(%53.2) 
  void                    Branch                   %55.1 -> BB33 (if true) | BB25 (if false)
BB56   <- [53]
  fs              %56.0 = FrameState         R     0x55804e3caeb0+37: [], env=e37.0
  fs              %56.1 = FrameState         R     0x55804e1e4250+313: [], env=e39.0, next=%56.0
  void                    Deopt              !v    %56.1, DeadBranchReached@0x55804eaea998[Test#0], %53.5   !
BB33   <- [55]
  void                    Nop                !     
  goto BB26
BB25   <- [55]
  (cls|spec|blt)  %25.0 = LdFun              !v    stop, e39.0
  val?            %25.1 = Call               !v    %25.0("bad local variable entry") e39.0
  goto BB26
BB26   <- [33, 25]
  val?^ | miss    %26.0 = LdVar              eR    entry, e39.0
  lgl$#-          %26.1 = IsType                   %26.0 isA val?~- | miss
  void                    Branch                   %26.1 -> BB57 (if true) | BB58 (if false)
BB57   <- [26]
  val?~- | miss   %57.0 = CastType           d     dn %26.0
  void                    Visible            v     
  val?-           %57.2 = Force!<value>            %57.0,    <env->
  val?            %57.3 = PopContext         C     %57.2, %37.3   <env->
  void                    StVar              lW    entry, %57.3, e37.0
  val?^ | miss    %57.5 = LdVar              eR    get, e37.0
  lgl$#-          %57.6 = Identical                %57.5, function(x, pos=-(1L), envir=as.environment(po|...
  void                    Branch                   %57.6 -> BB59 (if true) | BB60 (if false)
BB58   <- [26]
  fs              %58.0 = FrameState         R     0x55804e3caeb0+37: [], env=e37.0
  fs              %58.1 = FrameState         R     0x55804e1e4250+454: [], env=e39.0, next=%58.0
  void                    Deopt              !v    %58.1, Typecheck@0x55804eaea998[Type#21], %26.0   !
BB59   <- [57]
  prom-           %59.0 = MkArg                    unboundValue, addLocalFunDef[0x55804e6c7270]_p2 (!refl), e37.0
  val?            %59.1 = StaticCall         !     get[0x55804f0b9550]("funforms", %59.0, missingArg, missingArg, false) { 0 1 4n } e37.0   <nil->
  void                    StVar              lW    value, %59.1, e37.0
  val?^ | miss    %59.3 = LdVar              eR    assign, e37.0
  lgl$#-          %59.4 = Identical                %59.3, function(x, value, pos=-(1), envir=as.environm|...
  void                    Branch                   %59.4 -> BB61 (if true) | BB62 (if false)
BB60   <- [57]
  fs              %60.0 = FrameState         R     0x55804e3caeb0+51: [], env=e37.0
  void                    Deopt              !v    %60.0, CallTarget@0x55804e0f9650[Call#1], %57.5   !
BB61   <- [59]
  prom-           %61.0 = MkArg                    unboundValue, addLocalFunDef[0x55804e6c7270]_p3, e37.0
  prom-           %61.1 = MkArg                    unboundValue, addLocalFunDef[0x55804e6c7270]_p7, e37.0
  val?            %61.2 = StaticCall         !     assign[0x5580500b0850]("funforms", %61.0, %61.1) e37.0   <vec$->
  void                    Return             l     %61.2
BB62   <- [59]
  fs              %62.0 = FrameState         R     0x55804e3caeb0+119: [], env=e37.0
  void                    Deopt              !v    %62.0, CallTarget@0x55804e0f9650[Call#2], %59.3   !
Prom 0:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    vn, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    w, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    entry, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 3:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     c, <0x55804bee1940>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, addLocalFunDef[0x55804e6c7270]_p4, e0.0
  prom-           %0.3  = MkArg                    unboundValue, addLocalFunDef[0x55804e6c7270]_p5, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <vec$->
  void                    Return             l     %0.4
Prom 4:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    value, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <nil->
  void                    Return             l     %0.3
Prom 5:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     list, <0x55804bef55c0>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, addLocalFunDef[0x55804e6c7270]_p6, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <vec$->
  void                    Return             l     %0.3
Prom 6:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    e, e0.0
  val?            %0.2  = Force<lazy>        !v    %0.1, e0.0   <code->
  val?            %0.3  = Extract2_1D        !v    %0.2, 3, e0.0   <code->
  val?            %0.4  = Extract2_1D        !v    %0.3, 2, e0.0   <list->
  void                    Visible            v     
  void                    Return             l     %0.4
Prom 7:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    entry, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 8:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    vn, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 9:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     $, <0x55804bee0c10>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, addLocalFunDef[0x55804e6c7270]_p10, e0.0
  prom-           %0.3  = MkArg                    unboundValue, addLocalFunDef[0x55804e6c7270]_p11, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <env+>
  void                    Return             l     %0.4
Prom 10:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    w, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 11:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    env, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 12:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     $, <0x55804bee0c10>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, addLocalFunDef[0x55804e6c7270]_p13, e0.0
  prom-           %0.3  = MkArg                    unboundValue, addLocalFunDef[0x55804e6c7270]_p14, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <env->
  void                    Return             l     %0.4
Prom 13:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    w, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 14:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    globalenv, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 15:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    .BaseEnv, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 16:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    env, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <env+>
  void                    Return             l     %0.3
Prom 17:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    env, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <env+>
  void                    Return             l     %0.3
Prom 18:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     attr, <0x55804bee1080>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, addLocalFunDef[0x55804e6c7270]_p19, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2, "checkUsageFrame") e0.0   <env+>
  void                    Return             l     %0.3
Prom 19:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    env, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <env+>
  void                    Return             l     %0.3
Prom 20:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    vn, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 21:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    env, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <env+>
  void                    Return             l     %0.3
Prom 22:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    e, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <(lgl|env)+>
  void                    Return             l     %0.3
Prom 23:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    .BaseEnv, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <env->
  void                    Return             l     %0.3

│ addLocalFunDef[0x55804e6c7270]                                               │
└──────────────────────────────────────────────────────────────────────────────┘
