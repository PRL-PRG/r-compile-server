
┌──────────────────────────────────────────────────────────────────────────────┐
│ [0x558050ca5cb0]                                                             │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;Eager0,NonRefl0,!Obj0                │
│ Properties:                                                                  │
├────── Final PIR Version
[0x558050ca5cb0]
BB0
  val?^           %0.0  = LdArg                    3
  val?^           %0.1  = LdArg                    2
  val?^           %0.2  = LdArg                    1
  val?~+          %0.3  = LdArg                    0
  val+            %0.4  = Force<value>             %0.3,    <str$->
  val?^ | miss    %0.5  = LdVar              eR    %in%, <env 0x55804e699488>
  lgl$#-          %0.6  = Identical                %0.5, function(x, table) <(rir::DispatchTable*)0x558|...
  void                    Branch                   %0.6 -> BB80 (if true) | BB81 (if false)
BB80   <- [0]
  env             e80.0 = MkEnv              l     type=%0.3, n=%0.2, e=%0.1, w=%0.0, parent=<env 0x55804e699488>, context 1
  prom-           %80.1 = MkArg                    unboundValue, [0x558050ca5cb0]_p1, e80.0
  val?            %80.2 = StaticCall         !v    %in%[0x55804fd49270](%0.4, %80.1) e80.0   <lgl$->
  lgl$#-          %80.3 = IsType                   %80.2 isA lgl$-
  void                    Branch                   %80.3 -> BB82 (if true) | BB83 (if false)
BB81   <- [0]
  env             e81.0 = (MkEnv)            l     type=%0.3, n=%0.2, e=%0.1, w=%0.0, parent=<env 0x55804e699488>, context 1
  fs              %81.1 = FrameState         R     0x55804ec9bac0+0: [], env=e81.0
  void                    Deopt              !v    %81.1, CallTarget@0x55804e19e1f0[Call#0], %0.5
BB82   <- [80]
  lgl$-           %82.0 = CastType           d     dn %80.2
  lgl$-           %82.1 = AsLogical                %82.0
  lgl$#-          %82.2 = Identical                %82.1, false
  void                    Branch                   %82.2 -> BB78 (if true) | BB5 (if false)
BB83   <- [80]
  void                    Nop                !     
  val?            %83.1 = %80.2
  dr              %83.2 = Typecheck@0x55804e19e1f0[Type#2]
  goto BB3
BB78   <- [82]
  void                    Nop                !     
  lgl$-           %78.1 = %82.1
  goto BB8
BB5   <- [82]
  val?^ | miss    %5.0  = LdVar              eR    isSimpleFunDef, e80.0
  lgl$#-          %5.1  = Identical                %5.0, function(e, w) <(rir::DispatchTable*)0x55804e1|...
  void                    Branch                   %5.1 -> BB84 (if true) | BB85 (if false)
BB3   <- [83, 85]
  val?^ | miss    %3.0  = Phi                      %83.1:BB83, %85.1:BB85
  val?^ | miss    %3.1  = %3.0
  dr              %3.2  = Phi                      %83.2:BB83, %85.2:BB85
  dr              %3.3  = %3.2
  fs              %3.4  = FrameState         R     0x55804ec9bac0+37: [%80.2], env=e80.0
  void                    Deopt              !v    %3.4, %3.3, %3.1   !
BB8   <- [78, 86]
  lgl$-           %8.0  = Phi                      %86.3:BB86, %78.1:BB78
  lgl$-           %8.1  = %8.0
  lgl$#-          %8.2  = CheckTrueFalse     e     %8.1
  void                    Branch                   %8.2 -> BB77 (if true) | BB9 (if false)
BB84   <- [5]
  prom-           %84.0 = MkArg                    unboundValue, [0x558050ca5cb0]_p2, e80.0
  prom-           %84.1 = MkArg                    unboundValue, [0x558050ca5cb0]_p3, e80.0
  val?            %84.2 = StaticCall         !v    isSimpleFunDef[0x55804f895b00](%84.0, %84.1) e80.0   <lgl$->
  lgl$#-          %84.3 = IsType                   %84.2 isA lgl$-
  void                    Branch                   %84.3 -> BB86 (if true) | BB87 (if false)
BB85   <- [5]
  void                    Nop                !     
  val?^ | miss    %85.1 = %5.0
  dr              %85.2 = CallTarget@0x55804e19e1f0[Call#2]
  goto BB3
BB77   <- [8]
  void                    StVar              lW    type, "fundef", e80.0
  goto BB10
BB9   <- [8]
  void                    Nop                !     
  goto BB10
BB86   <- [84]
  lgl$-           %86.0 = CastType           d     dn %84.2
  lgl$-           %86.1 = AsLogical                %86.0
  lgl$-           %86.2 = LAnd                     %82.1, %86.1
  lgl$-           %86.3 = %86.2
  goto BB8
BB87   <- [84]
  fs              %87.0 = FrameState         R     0x55804ec9bac0+86: [%82.1, %84.2], env=e80.0
  void                    Deopt              !v    %87.0, Typecheck@0x55804e19e1f0[Type#5], %84.2   !
BB10   <- [9, 77]
  val?^ | miss    %10.0 = LdVar              eR    type, e80.0
  val?            %10.1 = Force!<value>      !v    %10.0, e80.0   <str$->
  lgl$-           %10.2 = Is                       %10.1, logical
  lgl$-           %10.3 = Is                       %10.1, integer
  lgl$-           %10.4 = Is                       %10.1, double
  lgl$-           %10.5 = Is                       %10.1, complex
  lgl$-           %10.6 = Is                       %10.1, character   <true>
  lgl$-           %10.7 = Is                       %10.1, raw
  lgl$-           %10.8 = Is                       %10.1, list
  lgl$-           %10.9 = Is                       %10.1, expression
  lgl$-           %10.10 = LOr                      %10.9, %10.8
  lgl$-           %10.11 = LOr                      %10.10, %10.7
  lgl$-           %10.12 = LOr                      %10.11, %10.6
  lgl$-           %10.13 = LOr                      %10.12, %10.5
  lgl$-           %10.14 = LOr                      %10.13, %10.4
  lgl$-           %10.15 = LOr                      %10.14, %10.3
  lgl$-           %10.16 = LOr                      %10.15, %10.2   <true>
  lgl$#-          %10.17 = Identical                %10.16, true
  int$-           %10.18 = Length                   %10.1
  lgl$-           %10.19 = Is                       %10.1, Factor   <false>
  lgl$#-          %10.20 = Identical                %10.19, false
  lgl$#-          %10.21 = Identical                %10.6, true
  lgl$#-          %10.22 = IsType                   %10.1 isA val?-
  void                    Branch                   %10.17 -> BB88 (if true) | BB89 (if false)
BB88   <- [10]
  lgl$-           %88.0 = Eq                 d     %10.18, 1L, elided   <true>
  lgl$#-          %88.1 = Identical                %88.0, true
  void                    Branch                   %88.1 -> BB90 (if true) | BB91 (if false)
BB89   <- [10]
  void                    Nop                !     
  lgl$#-          %89.1 = %10.17
  dr              %89.2 = DeadBranchReached@0x55804e19e1f0[Test#0]
  goto BB11
BB90   <- [88]
  void                    Branch                   %10.20 -> BB92 (if true) | BB93 (if false)
BB91   <- [88]
  void                    Nop                !     
  lgl$#-          %91.1 = %88.1
  dr              %91.2 = DeadBranchReached@0x55804e19e1f0[Test#1]
  goto BB11
BB11   <- [89, 91, 93, 95, 97]
  val?^ | miss    %11.0 = Phi                      %89.1:BB89, %91.1:BB91, %93.1:BB93, %95.1:BB95, %97.1:BB97
  val?^ | miss    %11.1 = %11.0
  dr              %11.2 = Phi                      %89.2:BB89, %91.2:BB91, %93.2:BB93, %95.2:BB95, %97.2:BB97
  dr              %11.3 = %11.2
  fs              %11.4 = FrameState         R     0x55804ec9bac0+128: [%10.1], env=e80.0
  void                    Deopt              !v    %11.4, %11.3, %11.1   !
BB92   <- [90]
  void                    Branch                   %10.21 -> BB94 (if true) | BB95 (if false)
BB93   <- [90]
  void                    Nop                !     
  lgl$#-          %93.1 = %10.20
  dr              %93.2 = DeadBranchReached@0x55804e19e1f0[Test#2]
  goto BB11
BB94   <- [92]
  void                    Branch                   %10.22 -> BB96 (if true) | BB97 (if false)
BB95   <- [92]
  void                    Nop                !     
  lgl$#-          %95.1 = %10.21
  dr              %95.2 = DeadBranchReached@0x55804e19e1f0[Test#3]
  goto BB11
BB96   <- [94]
  val?-           %96.0 = CastType           d     dn %10.1   <str$->
  lgl-            %96.1 = CallSafeBuiltin    vwed  is.na(%96.0) 
  lgl$#-          %96.2 = CheckTrueFalse     we    %96.1   <false>
  void                    Branch                   %96.2 -> BB99 (if true) | BB98 (if false)
BB97   <- [94]
  void                    Nop                !     
  val?            %97.1 = %10.1
  dr              %97.2 = Typecheck@0x55804e19e1f0[Type#6]
  goto BB11
BB99   <- [96]
  fs              %99.0 = FrameState         R     0x55804ec9bac0+391: [%96.0, %96.2], env=e80.0
  void                    Deopt              !v    %99.0, DeadBranchReached@0x55804e19e1f0[Test#10], %96.2   !
BB98   <- [96]
  lgl-            %98.0 = Eq                 vwed  %96.0, <-, elided
  lgl$#-          %98.1 = CheckTrueFalse     we    %98.0
  void                    Branch                   %98.1 -> BB76 (if true) | BB15 (if false)
BB76   <- [98]
  void                    Nop                !     
  goto BB61
BB15   <- [98]
  lgl-            %15.0 = Eq                 vwed  %96.0, <<-, elided
  lgl$#-          %15.1 = CheckTrueFalse     we    %15.0
  void                    Branch                   %15.1 -> BB60 (if true) | BB16 (if false)
BB61   <- [60, 76]
  val?^ | miss    %61.0 = LdVar              eR    incLocalUsageValue, e80.0
  lgl$#-          %61.1 = Identical                %61.0, function(vn, which, w) <(rir::DispatchTable*)0|...
  void                    Branch                   %61.1 -> BB106 (if true) | BB107 (if false)
BB60   <- [15]
  void                    Nop                !     
  goto BB61
BB16   <- [15]
  lgl-            %16.0 = Eq                 vwed  %96.0, variable, elided
  lgl$#-          %16.1 = CheckTrueFalse     we    %16.0
  void                    Branch                   %16.1 -> BB47 (if true) | BB19 (if false)
BB106   <- [61]
  prom-           %106.0 = MkArg                    unboundValue, [0x558050ca5cb0]_p15, e80.0
  prom-           %106.1 = MkArg                    unboundValue, [0x558050ca5cb0]_p16, e80.0
  ct              %106.2 = PushContext        lCL   %106.0, "assigns", %106.1, incLocalUsageValue(n, "assigns", w), function(vn, which, w) <(rir::DispatchTable*)0|..., e80.0
  val?^           %106.3 = CastType                 up %106.1
  val?^           %106.4 = CastType                 up %106.0
  val?^ | miss    %106.5 = LdVar              eR    getLocalUsageEntry, <env 0x55804e699488>
  lgl$#-          %106.6 = Identical                %106.5, function(vn, w) <(rir::DispatchTable*)0x55804e|...
  void                    Branch                   %106.6 -> BB112 (if true) | BB113 (if false)
BB107   <- [61]
  fs              %107.0 = FrameState         R     0x55804ec9bac0+544: [%96.0], env=e80.0
  void                    Deopt              !v    %107.0, CallTarget@0x55804e19e1f0[Call#3], %61.0   !
BB47   <- [16]
  val?^ | miss    %47.0 = LdVar              eR    incLocalUsageValue, e80.0
  lgl$#-          %47.1 = Identical                %47.0, function(vn, which, w) <(rir::DispatchTable*)0|...
  void                    Branch                   %47.1 -> BB104 (if true) | BB105 (if false)
BB19   <- [16]
  lgl-            %19.0 = Eq                 vwed  %96.0, function, elided
  lgl$#-          %19.1 = CheckTrueFalse     we    %19.0
  void                    Branch                   %19.1 -> BB44 (if true) | BB22 (if false)
BB112   <- [106]
  env             e112.0 = MkEnv              l     vn=%106.4, which="assigns", w=%106.3, parent=<env 0x55804e699488>, context 1
  prom-           %112.1 = MkArg                    unboundValue, [0x558050ca5cb0]_p17, e112.0
  prom-           %112.2 = MkArg                    unboundValue, [0x558050ca5cb0]_p18, e112.0
  val?            %112.3 = StaticCall         !     getLocalUsageEntry[0x558050dedcf0](%112.1, %112.2) e112.0   <env->
  void                    StVar              lW    entry, %112.3, e112.0
  val?^ | miss    %112.5 = LdVar              eR    get, e112.0
  lgl$#-          %112.6 = Identical                %112.5, function(x, pos=-(1L), envir=as.environment(po|...
  void                    Branch                   %112.6 -> BB126 (if true) | BB127 (if false)
BB113   <- [106]
  fs              %113.0 = FrameState         R     0x55804ec9bac0+587: [], env=e80.0
  env             e113.1 = (MkEnv)            l     vn=%106.4, which="assigns", w=%106.3, parent=<env 0x55804e699488>, context 1
  fs              %113.2 = FrameState         R     0x55804e9d77b0+0: [], env=e113.1, next=%113.0
  void                    Deopt              !v    %113.2, CallTarget@0x55804e3d1be0[Call#0], %106.5   !
BB104   <- [47]
  prom-           %104.0 = MkArg                    unboundValue, [0x558050ca5cb0]_p13, e80.0
  prom-           %104.1 = MkArg                    unboundValue, [0x558050ca5cb0]_p14, e80.0
  ct              %104.2 = PushContext        lCL   %104.0, "varuses", %104.1, incLocalUsageValue(n, "varuses", w), function(vn, which, w) <(rir::DispatchTable*)0|..., e80.0
  val?^           %104.3 = CastType                 up %104.1
  val?^           %104.4 = CastType                 up %104.0
  val?^ | miss    %104.5 = LdVar              eR    getLocalUsageEntry, <env 0x55804e699488>
  lgl$#-          %104.6 = Identical                %104.5, function(vn, w) <(rir::DispatchTable*)0x55804e|...
  void                    Branch                   %104.6 -> BB110 (if true) | BB111 (if false)
BB105   <- [47]
  fs              %105.0 = FrameState         R     0x55804ec9bac0+451: [%96.0, %16.1], env=e80.0
  void                    Deopt              !v    %105.0, CallTarget@0x55804e19e1f0[Call#4], %47.0   !
BB44   <- [19]
  val?^ | miss    %44.0 = LdVar              eR    incLocalUsageValue, e80.0
  lgl$#-          %44.1 = Identical                %44.0, function(vn, which, w) <(rir::DispatchTable*)0|...
  void                    Branch                   %44.1 -> BB100 (if true) | BB101 (if false)
BB22   <- [19]
  lgl-            %22.0 = Eq                 vwed  %96.0, for, elided
  lgl$#-          %22.1 = CheckTrueFalse     we    %22.0
  void                    Branch                   %22.1 -> BB31 (if true) | BB25 (if false)
BB126   <- [112]
  prom-           %126.0 = MkArg                    unboundValue, [0x558050ca5cb0]_p19, e112.0
  prom-           %126.1 = MkArg                    unboundValue, [0x558050ca5cb0]_p20 (!refl), e112.0
  val?            %126.2 = StaticCall         !     get[0x55804d367b10](%126.0, %126.1, missingArg, missingArg, false) { 0 1 4n } e112.0   <real$->
  lgl$#-          %126.3 = IsType                   %126.2 isA real$-
  void                    Branch                   %126.3 -> BB136 (if true) | BB137 (if false)
BB127   <- [112]
  fs              %127.0 = FrameState         R     0x55804ec9bac0+587: [], env=e80.0
  fs              %127.1 = FrameState         R     0x55804e9d77b0+51: [], env=e112.0, next=%127.0
  void                    Deopt              !v    %127.1, CallTarget@0x55804e3d1be0[Call#1], %112.5   !
BB110   <- [104]
  env             e110.0 = MkEnv              l     vn=%104.4, which="varuses", w=%104.3, parent=<env 0x55804e699488>, context 1
  prom-           %110.1 = MkArg                    unboundValue, [0x558050ca5cb0]_p24, e110.0
  prom-           %110.2 = MkArg                    unboundValue, [0x558050ca5cb0]_p25, e110.0
  val?            %110.3 = StaticCall         !     getLocalUsageEntry[0x558050dedcf0](%110.1, %110.2) e110.0   <env->
  void                    StVar              lW    entry, %110.3, e110.0
  val?^ | miss    %110.5 = LdVar              eR    get, e110.0
  lgl$#-          %110.6 = Identical                %110.5, function(x, pos=-(1L), envir=as.environment(po|...
  void                    Branch                   %110.6 -> BB124 (if true) | BB125 (if false)
BB111   <- [104]
  fs              %111.0 = FrameState         R     0x55804ec9bac0+640: [], env=e80.0
  env             e111.1 = (MkEnv)            l     vn=%104.4, which="varuses", w=%104.3, parent=<env 0x55804e699488>, context 1
  fs              %111.2 = FrameState         R     0x55804e9d77b0+0: [], env=e111.1, next=%111.0
  void                    Deopt              !v    %111.2, CallTarget@0x55804e3d1be0[Call#0], %104.5   !
BB100   <- [44]
  prom-           %100.0 = MkArg                    unboundValue, [0x558050ca5cb0]_p11, e80.0
  prom-           %100.1 = MkArg                    unboundValue, [0x558050ca5cb0]_p12, e80.0
  val?            %100.2 = StaticCall         !     incLocalUsageValue[0x55804ed69d90](%100.0, "funuses", %100.1) e80.0   <real$->
  lgl$#-          %100.3 = IsType                   %100.2 isA real$-
  void                    Branch                   %100.3 -> BB102 (if true) | BB103 (if false)
BB101   <- [44]
  fs              %101.0 = FrameState         R     0x55804ec9bac0+469: [%96.0, %19.1], env=e80.0
  void                    Deopt              !v    %101.0, CallTarget@0x55804e19e1f0[Call#5], %44.0   !
BB31   <- [22]
  val?^ | miss    %31.0 = LdVar              eR    incLocalUsageValue, e80.0
  lgl$#-          %31.1 = Identical                %31.0, function(vn, which, w) <(rir::DispatchTable*)0|...
  void                    Branch                   %31.1 -> BB116 (if true) | BB117 (if false)
BB25   <- [22]
  lgl-            %25.0 = Eq                 vwed  %96.0, fundef, elided
  lgl$#-          %25.1 = CheckTrueFalse     we    %25.0   <true>
  void                    Branch                   %25.1 -> BB114 (if true) | BB115 (if false)
BB136   <- [126]
  real$-          %136.0 = CastType           d     dn %126.2
  void                    StVar              lW    value, %136.0, e112.0
  val?^ | miss    %136.2 = LdVar              eR    assign, e112.0
  lgl$#-          %136.3 = Identical                %136.2, function(x, value, pos=-(1), envir=as.environm|...
  void                    Branch                   %136.3 -> BB146 (if true) | BB147 (if false)
BB137   <- [126]
  fs              %137.0 = FrameState         R     0x55804ec9bac0+587: [], env=e80.0
  fs              %137.1 = FrameState         R     0x55804e9d77b0+105: [%126.2], env=e112.0, next=%137.0
  void                    Deopt              !v    %137.1, Typecheck@0x55804e3d1be0[Type#5], %126.2   !
BB124   <- [110]
  prom-           %124.0 = MkArg                    unboundValue, [0x558050ca5cb0]_p26, e110.0
  prom-           %124.1 = MkArg                    unboundValue, [0x558050ca5cb0]_p27 (!refl), e110.0
  val?            %124.2 = StaticCall         !     get[0x55804d367b10](%124.0, %124.1, missingArg, missingArg, false) { 0 1 4n } e110.0   <real$->
  lgl$#-          %124.3 = IsType                   %124.2 isA real$-
  void                    Branch                   %124.3 -> BB130 (if true) | BB131 (if false)
BB125   <- [110]
  fs              %125.0 = FrameState         R     0x55804ec9bac0+640: [], env=e80.0
  fs              %125.1 = FrameState         R     0x55804e9d77b0+51: [], env=e110.0, next=%125.0
  void                    Deopt              !v    %125.1, CallTarget@0x55804e3d1be0[Call#1], %110.5   !
BB102   <- [100]
  void                    Nop                !     
  val?            %102.1 = %100.2
  goto BB28
BB103   <- [100]
  fs              %103.0 = FrameState         R     0x55804ec9bac0+693: [%100.2], env=e80.0
  void                    Deopt              !v    %103.0, Typecheck@0x55804e19e1f0[Type#15], %100.2   !
BB116   <- [31]
  prom-           %116.0 = MkArg                    unboundValue, [0x558050ca5cb0]_p9, e80.0
  prom-           %116.1 = MkArg                    unboundValue, [0x558050ca5cb0]_p10, e80.0
  ct              %116.2 = PushContext        lCL   %116.0, "loopvars", %116.1, incLocalUsageValue(n, "loopvars", w), function(vn, which, w) <(rir::DispatchTable*)0|..., e80.0
  val?^           %116.3 = CastType                 up %116.1
  val?^           %116.4 = CastType                 up %116.0
  val?^ | miss    %116.5 = LdVar              eR    getLocalUsageEntry, <env 0x55804e699488>
  lgl$#-          %116.6 = Identical                %116.5, function(vn, w) <(rir::DispatchTable*)0x55804e|...
  void                    Branch                   %116.6 -> BB118 (if true) | BB119 (if false)
BB117   <- [31]
  fs              %117.0 = FrameState         R     0x55804ec9bac0+487: [%96.0, %22.1], env=e80.0
  void                    Deopt              !v    %117.0, CallTarget@0x55804e19e1f0[Call#6], %31.0   !
BB114   <- [25]
  val?^ | miss    %114.0 = LdVar              eR    addLocalFunDef, e80.0
  lgl$#-          %114.1 = Identical                %114.0, function(vn, e, w) <(rir::DispatchTable*)0x558|...
  void                    Branch                   %114.1 -> BB128 (if true) | BB129 (if false)
BB115   <- [25]
  void                    Nop                !     
  lgl$#-          %115.1 = %25.1
  dr              %115.2 = DeadBranchReached@0x55804e19e1f0[Test#16]
  goto BB26
BB146   <- [136]
  prom-           %146.0 = MkArg                    unboundValue, [0x558050ca5cb0]_p21, e112.0
  prom-           %146.1 = MkArg                    unboundValue, [0x558050ca5cb0]_p22, e112.0
  prom-           %146.2 = MkArg                    unboundValue, [0x558050ca5cb0]_p23, e112.0
  val?            %146.3 = StaticCall         !     assign[0x55804f9cb020](%146.0, %146.1, %146.2) e112.0   <real$->
  lgl$#-          %146.4 = IsType                   %146.3 isA real$-
  void                    Branch                   %146.4 -> BB148 (if true) | BB149 (if false)
BB147   <- [136]
  fs              %147.0 = FrameState         R     0x55804ec9bac0+587: [], env=e80.0
  fs              %147.1 = FrameState         R     0x55804e9d77b0+119: [], env=e112.0, next=%147.0
  void                    Deopt              !v    %147.1, CallTarget@0x55804e3d1be0[Call#2], %136.2   !
BB130   <- [124]
  real$-          %130.0 = CastType           d     dn %124.2
  void                    StVar              lW    value, %130.0, e110.0
  val?^ | miss    %130.2 = LdVar              eR    assign, e110.0
  lgl$#-          %130.3 = Identical                %130.2, function(x, value, pos=-(1), envir=as.environm|...
  void                    Branch                   %130.3 -> BB132 (if true) | BB133 (if false)
BB131   <- [124]
  fs              %131.0 = FrameState         R     0x55804ec9bac0+640: [], env=e80.0
  fs              %131.1 = FrameState         R     0x55804e9d77b0+105: [%124.2], env=e110.0, next=%131.0
  void                    Deopt              !v    %131.1, Typecheck@0x55804e3d1be0[Type#5], %124.2   !
BB28   <- [102, 128, 140, 144, 150]
  val?            %28.0 = Phi                      %128.4:BB128, %144.1:BB144, %102.1:BB102, %140.1:BB140, %150.1:BB150
  val?            %28.1 = %28.0
  val?^ | miss    %28.2 = LdVar              eR    incLocalSrcInfo, e80.0
  lgl$#-          %28.3 = Identical                %28.2, function(vn, w) <(rir::DispatchTable*)0x55804e|...
  void                    Branch                   %28.3 -> BB108 (if true) | BB109 (if false)
BB118   <- [116]
  env             e118.0 = MkEnv              l     vn=%116.4, which="loopvars", w=%116.3, parent=<env 0x55804e699488>, context 1
  prom-           %118.1 = MkArg                    unboundValue, [0x558050ca5cb0]_p31, e118.0
  prom-           %118.2 = MkArg                    unboundValue, [0x558050ca5cb0]_p32, e118.0
  val?            %118.3 = StaticCall         !     getLocalUsageEntry[0x558050dedcf0](%118.1, %118.2) e118.0   <env->
  void                    StVar              lW    entry, %118.3, e118.0
  val?^ | miss    %118.5 = LdVar              eR    get, e118.0
  lgl$#-          %118.6 = Identical                %118.5, function(x, pos=-(1L), envir=as.environment(po|...
  void                    Branch                   %118.6 -> BB120 (if true) | BB121 (if false)
BB119   <- [116]
  fs              %119.0 = FrameState         R     0x55804ec9bac0+746: [], env=e80.0
  env             e119.1 = (MkEnv)            l     vn=%116.4, which="loopvars", w=%116.3, parent=<env 0x55804e699488>, context 1
  fs              %119.2 = FrameState         R     0x55804e9d77b0+0: [], env=e119.1, next=%119.0
  void                    Deopt              !v    %119.2, CallTarget@0x55804e3d1be0[Call#0], %116.5   !
BB128   <- [114]
  prom-           %128.0 = MkArg                    unboundValue, [0x558050ca5cb0]_p4, e80.0
  prom-           %128.1 = MkArg                    unboundValue, [0x558050ca5cb0]_p5, e80.0
  prom-           %128.2 = MkArg                    unboundValue, [0x558050ca5cb0]_p6, e80.0
  val?            %128.3 = StaticCall         !     addLocalFunDef[0x55804c227f30](%128.0, %128.1, %128.2) e80.0   <vec$->
  val?            %128.4 = %128.3
  goto BB28
BB129   <- [114]
  void                    Nop                !     
  val?^ | miss    %129.1 = %114.0
  dr              %129.2 = CallTarget@0x55804e19e1f0[Call#7]
  goto BB26
BB26   <- [115, 129]
  val?^ | miss    %26.0 = Phi                      %115.1:BB115, %129.1:BB129
  val?^ | miss    %26.1 = %26.0
  dr              %26.2 = Phi                      %115.2:BB115, %129.2:BB129
  dr              %26.3 = %26.2
  fs              %26.4 = FrameState         R     0x55804ec9bac0+505: [%96.0, %25.1], env=e80.0
  void                    Deopt              !v    %26.4, %26.3, %26.1   !
BB148   <- [146]
  real$-          %148.0 = CastType           d     dn %146.3
  val?            %148.1 = PopContext         C     %148.0, %106.2   <real$->
  lgl$#-          %148.2 = IsType                   %148.1 isA real$-
  void                    Branch                   %148.2 -> BB150 (if true) | BB151 (if false)
BB149   <- [146]
  fs              %149.0 = FrameState         R     0x55804ec9bac0+587: [], env=e80.0
  fs              %149.1 = FrameState         R     0x55804e9d77b0+161: [%146.3], env=e112.0, next=%149.0
  void                    Deopt              !v    %149.1, Typecheck@0x55804e3d1be0[Type#10], %146.3   !
BB132   <- [130]
  prom-           %132.0 = MkArg                    unboundValue, [0x558050ca5cb0]_p28, e110.0
  prom-           %132.1 = MkArg                    unboundValue, [0x558050ca5cb0]_p29, e110.0
  prom-           %132.2 = MkArg                    unboundValue, [0x558050ca5cb0]_p30, e110.0
  val?            %132.3 = StaticCall         !     assign[0x55804f9cb020](%132.0, %132.1, %132.2) e110.0   <real$->
  lgl$#-          %132.4 = IsType                   %132.3 isA real$-
  void                    Branch                   %132.4 -> BB138 (if true) | BB139 (if false)
BB133   <- [130]
  fs              %133.0 = FrameState         R     0x55804ec9bac0+640: [], env=e80.0
  fs              %133.1 = FrameState         R     0x55804e9d77b0+119: [], env=e110.0, next=%133.0
  void                    Deopt              !v    %133.1, CallTarget@0x55804e3d1be0[Call#2], %130.2   !
BB108   <- [28]
  prom-           %108.0 = MkArg                    unboundValue, [0x558050ca5cb0]_p7, e80.0
  prom-           %108.1 = MkArg                    unboundValue, [0x558050ca5cb0]_p8, e80.0
  val?            %108.2 = StaticCall         !     incLocalSrcInfo[0x55804ed7b6b0](%108.0, %108.1) e80.0   <vec>
  void                    Return             l     %108.2
BB109   <- [28]
  fs              %109.0 = FrameState         R     0x55804ec9bac0+815: [%28.1], env=e80.0
  void                    Deopt              !v    %109.0, CallTarget@0x55804e19e1f0[Call#8], %28.2   !
BB120   <- [118]
  prom-           %120.0 = MkArg                    unboundValue, [0x558050ca5cb0]_p33, e118.0
  prom-           %120.1 = MkArg                    unboundValue, [0x558050ca5cb0]_p34 (!refl), e118.0
  val?            %120.2 = StaticCall         !     get[0x55804d367b10](%120.0, %120.1, missingArg, missingArg, false) { 0 1 4n } e118.0   <real$->
  lgl$#-          %120.3 = IsType                   %120.2 isA real$-
  void                    Branch                   %120.3 -> BB122 (if true) | BB123 (if false)
BB121   <- [118]
  fs              %121.0 = FrameState         R     0x55804ec9bac0+746: [], env=e80.0
  fs              %121.1 = FrameState         R     0x55804e9d77b0+51: [], env=e118.0, next=%121.0
  void                    Deopt              !v    %121.1, CallTarget@0x55804e3d1be0[Call#1], %118.5   !
BB150   <- [148]
  void                    Nop                !     
  val?            %150.1 = %148.1
  goto BB28
BB151   <- [148]
  fs              %151.0 = FrameState         R     0x55804ec9bac0+587: [%148.1], env=e80.0
  void                    Deopt              !v    %151.0, Typecheck@0x55804e19e1f0[Type#9], %148.1   !
BB138   <- [132]
  real$-          %138.0 = CastType           d     dn %132.3
  val?            %138.1 = PopContext         C     %138.0, %104.2   <real$->
  lgl$#-          %138.2 = IsType                   %138.1 isA real$-
  void                    Branch                   %138.2 -> BB140 (if true) | BB141 (if false)
BB139   <- [132]
  fs              %139.0 = FrameState         R     0x55804ec9bac0+640: [], env=e80.0
  fs              %139.1 = FrameState         R     0x55804e9d77b0+161: [%132.3], env=e110.0, next=%139.0
  void                    Deopt              !v    %139.1, Typecheck@0x55804e3d1be0[Type#10], %132.3   !
BB122   <- [120]
  real$-          %122.0 = CastType           d     dn %120.2
  void                    StVar              lW    value, %122.0, e118.0
  val?^ | miss    %122.2 = LdVar              eR    assign, e118.0
  lgl$#-          %122.3 = Identical                %122.2, function(x, value, pos=-(1), envir=as.environm|...
  void                    Branch                   %122.3 -> BB134 (if true) | BB135 (if false)
BB123   <- [120]
  fs              %123.0 = FrameState         R     0x55804ec9bac0+746: [], env=e80.0
  fs              %123.1 = FrameState         R     0x55804e9d77b0+105: [%120.2], env=e118.0, next=%123.0
  void                    Deopt              !v    %123.1, Typecheck@0x55804e3d1be0[Type#5], %120.2   !
BB140   <- [138]
  void                    Nop                !     
  val?            %140.1 = %138.1
  goto BB28
BB141   <- [138]
  fs              %141.0 = FrameState         R     0x55804ec9bac0+640: [%138.1], env=e80.0
  void                    Deopt              !v    %141.0, Typecheck@0x55804e19e1f0[Type#12], %138.1   !
BB134   <- [122]
  prom-           %134.0 = MkArg                    unboundValue, [0x558050ca5cb0]_p35, e118.0
  prom-           %134.1 = MkArg                    unboundValue, [0x558050ca5cb0]_p36, e118.0
  prom-           %134.2 = MkArg                    unboundValue, [0x558050ca5cb0]_p37, e118.0
  val?            %134.3 = StaticCall         !     assign[0x55804f9cb020](%134.0, %134.1, %134.2) e118.0   <real$->
  lgl$#-          %134.4 = IsType                   %134.3 isA real$-
  void                    Branch                   %134.4 -> BB142 (if true) | BB143 (if false)
BB135   <- [122]
  fs              %135.0 = FrameState         R     0x55804ec9bac0+746: [], env=e80.0
  fs              %135.1 = FrameState         R     0x55804e9d77b0+119: [], env=e118.0, next=%135.0
  void                    Deopt              !v    %135.1, CallTarget@0x55804e3d1be0[Call#2], %122.2   !
BB142   <- [134]
  real$-          %142.0 = CastType           d     dn %134.3
  val?            %142.1 = PopContext         C     %142.0, %116.2   <real$->
  lgl$#-          %142.2 = IsType                   %142.1 isA real$-
  void                    Branch                   %142.2 -> BB144 (if true) | BB145 (if false)
BB143   <- [134]
  fs              %143.0 = FrameState         R     0x55804ec9bac0+746: [], env=e80.0
  fs              %143.1 = FrameState         R     0x55804e9d77b0+161: [%134.3], env=e118.0, next=%143.0
  void                    Deopt              !v    %143.1, Typecheck@0x55804e3d1be0[Type#10], %134.3   !
BB144   <- [142]
  void                    Nop                !     
  val?            %144.1 = %142.1
  goto BB28
BB145   <- [142]
  fs              %145.0 = FrameState         R     0x55804ec9bac0+746: [%142.1], env=e80.0
  void                    Deopt              !v    %145.0, Typecheck@0x55804e19e1f0[Type#18], %142.1   !
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     c, <0x55804bee1940>, e0.0
  val?            %0.2  = Call               !     %0.1("<-", "<<-") e0.0   <str->
  void                    Return             l     %0.2
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    e, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <code->
  void                    Return             l     %0.3
Prom 3:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    w, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 4:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    n, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 5:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    e, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <code->
  void                    Return             l     %0.3
Prom 6:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    w, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 7:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    n, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 8:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    w, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 9:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    n, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 10:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    w, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 11:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    n, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 12:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    w, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 13:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    n, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 14:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    w, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 15:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    n, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 16:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    w, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 17:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    vn, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 18:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    w, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 19:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    which, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 20:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    entry, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 21:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    which, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 22:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    value, e0.0
  val?            %0.2  = Force<value>       !v    %0.1, e0.0   <real$->
  void                    Visible            v     
  val?            %0.4  = Add                !     %0.2, 1, e0.0   <real$->
  void                    Return             l     %0.4
Prom 23:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    entry, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 24:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    vn, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 25:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    w, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 26:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    which, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 27:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    entry, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 28:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    which, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 29:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    value, e0.0
  val?            %0.2  = Force<value>       !v    %0.1, e0.0   <real$->
  void                    Visible            v     
  val?            %0.4  = Add                !     %0.2, 1, e0.0   <real$->
  void                    Return             l     %0.4
Prom 30:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    entry, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 31:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    vn, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 32:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    w, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 33:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    which, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 34:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    entry, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 35:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    which, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 36:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    value, e0.0
  val?            %0.2  = Force<value>       !v    %0.1, e0.0   <real$->
  void                    Visible            v     
  val?            %0.4  = Add                !     %0.2, 1, e0.0   <real$->
  void                    Return             l     %0.4
Prom 37:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    entry, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <env->
  void                    Return             l     %0.3

│ [0x558050ca5cb0]                                                             │
└──────────────────────────────────────────────────────────────────────────────┘
