
┌──────────────────────────────────────────────────────────────────────────────┐
│ collectUsageArgs[0x558050cdb8c0]                                             │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch                                      │
│ Properties:                                                                  │
├────── Final PIR Version
collectUsageArgs[0x558050cdb8c0]
BB0
  val?^           %0.0  = LdArg                    1
  val?^           %0.1  = LdArg                    0
  val?^ | miss    %0.2  = LdVar              eR    dropMissings, <env 0x55804e699488>
  lgl$#-          %0.3  = Identical                %0.2, function(x) <(rir::DispatchTable*)0x55804ea145|...
  void                    Branch                   %0.3 -> BB44 (if true) | BB45 (if false)
BB44   <- [0]
  env             e44.0 = MkEnv              l     e=%0.1, w=%0.0, parent=<env 0x55804e699488>, context 1
  prom-           %44.1 = MkArg                    unboundValue, collectUsageArgs[0x558050cdb8c0]_p0, e44.0
  val?            %44.2 = StaticCall         !v    dropMissings[0x55804f60bfd0](%44.1) e44.0   <vec->
  val?+           %44.3 = ToForSeq           e     %44.2
  int$-           %44.4 = Length                   %44.3
  int$-           %44.5 = Inc                      0L
  lgl$-           %44.6 = Lt                 d     %44.4, %44.5, elided
  lgl$#-          %44.7 = Identical                %44.6, true
  void                    Branch                   %44.7 -> BB42 (if true) | BB3 (if false)
BB45   <- [0]
  env             e45.0 = (MkEnv)            l     e=%0.1, w=%0.0, parent=<env 0x55804e699488>, context 1
  fs              %45.1 = FrameState         R     0x55804f459ab0+0: [], env=e45.0
  void                    Deopt              !v    %45.1, CallTarget@0x55804f22ab48[Call#0], %0.2
BB42   <- [44]
  void                    Nop                !     
  goto BB31
BB3   <- [44]
  val?            %3.0  = Extract2_1D        wed   %44.3, %44.5, elided   <(sym|code)->
  void                    StVar              lW    a, %3.0, e44.0
  val?^ | miss    %3.2  = LdVar              eR    typeof, e44.0
  lgl$#-          %3.3  = Identical                %3.2, function(x) <(rir::DispatchTable*)0x55804e1c3c|...
  void                    Branch                   %3.3 -> BB46 (if true) | BB47 (if false)
BB31   <- [30, 42]
  void                    Invisible          v     
  void                    Return             l     nil
BB46   <- [3]
  val             %46.0 = ChkMissing         e     %3.0
  str$-           %46.1 = CallSafeBuiltin    wed   typeof(%3.0)    <str$->
  lgl$-           %46.2 = Eq                 d     %46.1, "symbol", elided   <lgl$->
  lgl$-           %46.3 = AsLogical                %46.2
  lgl$#-          %46.4 = Identical                %46.3, false
  void                    Branch                   %46.4 -> BB41 (if true) | BB8 (if false)
BB47   <- [3]
  fs              %47.0 = FrameState         R     0x55804f459ab0+77: [%44.3, %44.4, %44.5], env=e44.0
  void                    Deopt              !v    %47.0, CallTarget@0x55804f22ab48[Call#1], %3.2   !
BB41   <- [46]
  void                    Nop                !     
  lgl$-           %41.1 = %46.3
  goto BB11
BB8   <- [46]
  lgl$#-          %8.0  = IsType                   %3.0 isA val?-
  void                    Branch                   %8.0 -> BB48 (if true) | BB49 (if false)
BB11   <- [41, 50]
  lgl$-           %11.0 = Phi                      %50.3:BB50, %41.1:BB41
  lgl$-           %11.1 = %11.0
  lgl$#-          %11.2 = CheckTrueFalse     e     %11.1
  void                    Branch                   %11.2 -> BB32 (if true) | BB14 (if false)
BB48   <- [8]
  val?-           %48.0 = CastType           d     dn %3.0   <(sym|code)->
  lgl-            %48.1 = Eq                 wed   %48.0, "...", elided   <lgl$->
  lgl$#-          %48.2 = IsType                   %48.1 isA lgl$-
  void                    Branch                   %48.2 -> BB50 (if true) | BB51 (if false)
BB49   <- [8]
  prom-           %49.0 = MkArg                    %3.0, collectUsageArgs[0x558050cdb8c0]_p2 (!refl), e44.0
  val?~           %49.1 = CastType                 up %49.0
  fs              %49.2 = FrameState         R     0x55804f459ab0+109: [%44.3, %44.4, %44.5], env=e44.0
  env             e49.3 = (MkEnv)            l     x=%49.1, parent=R_BaseNamespace, context 0
  fs              %49.4 = FrameState         R     0x55804e7773a0+27: [%46.1], env=e49.3, next=%49.2
  void                    Deopt              !v    %49.4, Typecheck@0x55804f22ab48[Type#3], %3.0   !
BB32   <- [11]
  (cls|spec|blt)  %32.0 = LdFun              !v    $, <0x55804bee0c10>, e44.0
  prom-           %32.1 = MkArg                    unboundValue, collectUsageArgs[0x558050cdb8c0]_p8, e44.0
  prom-           %32.2 = MkArg                    unboundValue, collectUsageArgs[0x558050cdb8c0]_p9, e44.0
  val?            %32.3 = Call               !v    %32.0(%32.1, %32.2) e44.0   <cls->
  (cls|spec|blt)  %32.4 = ChkFunction        e     %32.3
  prom-           %32.5 = MkArg                    unboundValue, collectUsageArgs[0x558050cdb8c0]_p10, e44.0
  lgl$#-          %32.6 = Identical                %32.4, function(v, w) <(rir::DispatchTable*)0x55804e5|...
  void                    Branch                   %32.6 -> BB54 (if true) | BB55 (if false)
BB14   <- [11]
  val?^ | miss    %14.0 = LdVar              eR    walkCode, e44.0
  lgl$#-          %14.1 = Identical                %14.0, function(e, w=makeCodeWalker()) <(rir::Dispatc|...
  void                    Branch                   %14.1 -> BB52 (if true) | BB53 (if false)
BB50   <- [48]
  lgl$-           %50.0 = CastType           d     dn %48.1
  lgl$-           %50.1 = AsLogical                %50.0
  lgl$-           %50.2 = LAnd                     %46.3, %50.1
  lgl$-           %50.3 = %50.2
  goto BB11
BB51   <- [48]
  fs              %51.0 = FrameState         R     0x55804f459ab0+154: [%44.3, %44.4, %44.5, %46.3, %48.1], env=e44.0
  void                    Deopt              !v    %51.0, Typecheck@0x55804f22ab48[Type#7], %48.1   !
BB54   <- [32]
  val?            %54.0 = StaticCall         !v    [0x55804ff9e580]("...", %32.5) e44.0   <lgl$->
  lgl$#-          %54.1 = IsType                   %54.0 isA lgl$-
  void                    Branch                   %54.1 -> BB58 (if true) | BB59 (if false)
BB55   <- [32]
  fs              %55.0 = FrameState         R     0x55804f459ab0+247: [%44.3, %44.4, %44.5, %32.3], env=e44.0
  void                    Deopt              !v    %55.0, CallTarget@0x55804f22ab48[Call#4], %32.4   !
BB52   <- [14]
  prom-           %52.0 = MkArg                    unboundValue, collectUsageArgs[0x558050cdb8c0]_p3 (!refl), e44.0
  prom-           %52.1 = MkArg                    unboundValue, collectUsageArgs[0x558050cdb8c0]_p4, e44.0
  val?            %52.2 = StaticCall         !v    walkCode[0x55804fdaf340](%52.0, %52.1) e44.0
  int$-           %52.3 = %44.5
  goto BB15
BB53   <- [14]
  fs              %53.0 = FrameState         R     0x55804f459ab0+161: [%44.3, %44.4, %44.5, %11.1], env=e44.0
  void                    Deopt              !v    %53.0, CallTarget@0x55804f22ab48[Call#2], %14.0   !
BB58   <- [54]
  lgl$-           %58.0 = CastType           d     dn %54.0
  lgl$#-          %58.1 = CheckTrueFalse     e     %58.0
  void                    Branch                   %58.1 -> BB38 (if true) | BB37 (if false)
BB59   <- [54]
  fs              %59.0 = FrameState         R     0x55804f459ab0+285: [%44.3, %44.4, %44.5, %54.0], env=e44.0
  void                    Deopt              !v    %59.0, Typecheck@0x55804f22ab48[Type#14], %54.0   !
BB15   <- [52, 60, 66]
  int$-           %15.0 = Phi                      %52.3:BB52, %66.3:BB66, %60.1:BB60
  int$-           %15.1 = %15.0
  int$-           %15.2 = Inc                      %15.1
  lgl$-           %15.3 = Lt                 d     %44.4, %15.2, elided
  lgl$#-          %15.4 = Identical                %15.3, true
  void                    Branch                   %15.4 -> BB30 (if true) | BB16 (if false)
BB38   <- [58]
  (cls|spec|blt)  %38.0 = LdFun              !v    $, <0x55804bee0c10>, e44.0
  prom-           %38.1 = MkArg                    unboundValue, collectUsageArgs[0x558050cdb8c0]_p11, e44.0
  prom-           %38.2 = MkArg                    unboundValue, collectUsageArgs[0x558050cdb8c0]_p12, e44.0
  val?            %38.3 = Call               !v    %38.0(%38.1, %38.2) e44.0   <cls->
  (cls|spec|blt)  %38.4 = ChkFunction        e     %38.3
  prom-           %38.5 = MkArg                    unboundValue, collectUsageArgs[0x558050cdb8c0]_p13, e44.0
  prom-           %38.6 = MkArg                    unboundValue, collectUsageArgs[0x558050cdb8c0]_p14, e44.0
  lgl$#-          %38.7 = Identical                %38.4, function(type, n, e, w) <(rir::DispatchTable*)|...
  void                    Branch                   %38.7 -> BB60 (if true) | BB61 (if false)
BB37   <- [58]
  (cls|spec|blt)  %37.0 = LdFun              !v    $, e44.0
  fs              %37.1 = FrameState         R     0x55804f459ab0+301: [%44.3, %44.4, %44.5, %37.0], env=e44.0
  void                    Deopt              !v    %37.1, DeadCall@0x55804f22ab48[Call#5], %37.0   !
BB30   <- [15]
  void                    Nop                !     
  goto BB31
BB16   <- [15]
  val?            %16.0 = Extract2_1D        wed   %44.3, %15.2, elided   <val?->
  void                    StVar              lW    a, %16.0, e44.0
  val?^ | miss    %16.2 = LdVar              eR    typeof, e44.0
  lgl$#-          %16.3 = Identical                %16.2, function(x) <(rir::DispatchTable*)0x55804e1c3c|...
  void                    Branch                   %16.3 -> BB56 (if true) | BB57 (if false)
BB60   <- [38]
  val?            %60.0 = StaticCall         !v    [0x558050cb1d20]("variable", "...", %38.5, %38.6) e44.0
  int$-           %60.1 = %44.5
  goto BB15
BB61   <- [38]
  fs              %61.0 = FrameState         R     0x55804f459ab0+414: [%44.3, %44.4, %44.5, %38.3], env=e44.0
  void                    Deopt              !v    %61.0, CallTarget@0x55804f22ab48[Call#10], %38.4   !
BB56   <- [16]
  val             %56.0 = ChkMissing         e     %16.0
  str$-           %56.1 = CallSafeBuiltin    wed   typeof(%16.0)    <str$->
  lgl$-           %56.2 = Eq                 d     %56.1, "symbol", elided   <lgl$->
  lgl$-           %56.3 = AsLogical                %56.2
  lgl$#-          %56.4 = Identical                %56.3, false
  void                    Branch                   %56.4 -> BB29 (if true) | BB21 (if false)
BB57   <- [16]
  fs              %57.0 = FrameState         R     0x55804f459ab0+492: [%44.3, %44.4, %15.2], env=e44.0
  void                    Deopt              !v    %57.0, CallTarget@0x55804f22ab48[Call#11], %16.2   !
BB29   <- [56]
  void                    Nop                !     
  lgl$-           %29.1 = %56.3
  goto BB24
BB21   <- [56]
  val             %21.0 = ChkMissing         e     %16.0
  lgl$#-          %21.1 = IsType                   %16.0 isA val?-
  void                    Branch                   %21.1 -> BB62 (if true) | BB63 (if false)
BB24   <- [29, 64]
  lgl$-           %24.0 = Phi                      %64.3:BB64, %29.1:BB29
  lgl$-           %24.1 = %24.0
  lgl$#-          %24.2 = CheckTrueFalse     e     %24.1
  void                    Branch                   %24.2 -> BB28 (if true) | BB27 (if false)
BB62   <- [21]
  val?-           %62.0 = CastType           d     dn %16.0
  lgl-            %62.1 = Eq                 wed   %62.0, "...", elided   <lgl$->
  lgl$#-          %62.2 = IsType                   %62.1 isA lgl$-
  void                    Branch                   %62.2 -> BB64 (if true) | BB65 (if false)
BB63   <- [21]
  prom-           %63.0 = MkArg                    %16.0, collectUsageArgs[0x558050cdb8c0]_p5 (!refl), e44.0
  val?~           %63.1 = CastType                 up %63.0
  fs              %63.2 = FrameState         R     0x55804f459ab0+524: [%44.3, %44.4, %15.2], env=e44.0
  env             e63.3 = (MkEnv)            l     x=%63.1, parent=R_BaseNamespace, context 0
  fs              %63.4 = FrameState         R     0x55804e7773a0+27: [%56.1], env=e63.3, next=%63.2
  void                    Deopt              !v    %63.4, Typecheck@0x55804f22ab48[Type#28], %16.0   !
BB28   <- [24]
  (cls|spec|blt)  %28.0 = LdFun              !v    $, e44.0
  fs              %28.1 = FrameState         R     0x55804f459ab0+630: [%44.3, %44.4, %15.2, %28.0], env=e44.0
  void                    Deopt              !v    %28.1, DeadCall@0x55804f22ab48[Call#13], %28.0   !
BB27   <- [24]
  val?^ | miss    %27.0 = LdVar              eR    walkCode, e44.0
  lgl$#-          %27.1 = Identical                %27.0, function(e, w=makeCodeWalker()) <(rir::Dispatc|...
  void                    Branch                   %27.1 -> BB66 (if true) | BB67 (if false)
BB64   <- [62]
  lgl$-           %64.0 = CastType           d     dn %62.1
  lgl$-           %64.1 = AsLogical                %64.0
  lgl$-           %64.2 = LAnd                     %56.3, %64.1
  lgl$-           %64.3 = %64.2
  goto BB24
BB65   <- [62]
  fs              %65.0 = FrameState         R     0x55804f459ab0+569: [%44.3, %44.4, %15.2, %56.3, %62.1], env=e44.0
  void                    Deopt              !v    %65.0, Typecheck@0x55804f22ab48[Type#32], %62.1   !
BB66   <- [27]
  prom-           %66.0 = MkArg                    unboundValue, collectUsageArgs[0x558050cdb8c0]_p6 (!refl), e44.0
  prom-           %66.1 = MkArg                    unboundValue, collectUsageArgs[0x558050cdb8c0]_p7, e44.0
  val?            %66.2 = StaticCall         !v    walkCode[0x55804fdaf340](%66.0, %66.1) e44.0
  int$-           %66.3 = %15.2
  goto BB15
BB67   <- [27]
  fs              %67.0 = FrameState         R     0x55804f459ab0+576: [%44.3, %44.4, %15.2, %24.1], env=e44.0
  void                    Deopt              !v    %67.0, CallTarget@0x55804f22ab48[Call#12], %27.0   !
Prom 0:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    e, e0.0
  val?            %0.2  = Force<lazy>        !v    %0.1, e0.0   <code->
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <true>
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  void                    Nop                !     
  real$#-         %2.1  = -1
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, collectUsageArgs[0x558050cdb8c0]_p1, 
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  (real|prom)-    %3.0  = Phi                      %2.1:BB2, %4.1:BB4
  (real|prom)-    %3.1  = %3.0
  val?            %3.2  = Extract1_1D        !v    %0.2, %3.1, e0.0   <(nil|code)->
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 1:
BB0
  void                    Visible            v     
  void                    Return             l     -1
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    a, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <(sym|code)->
  void                    Return             l     %0.3
Prom 3:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    a, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <(sym|code)->
  void                    Return             l     %0.3
Prom 4:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    w, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 5:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    a, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <val?->
  void                    Return             l     %0.3
Prom 6:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    a, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <val?->
  void                    Return             l     %0.3
Prom 7:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    w, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 8:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    w, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 9:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    isLocal, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 10:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    w, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 11:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    w, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 12:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    enterLocal, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 13:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    a, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 14:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    w, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3

│ collectUsageArgs[0x558050cdb8c0]                                             │
└──────────────────────────────────────────────────────────────────────────────┘
