
┌──────────────────────────────────────────────────────────────────────────────┐
│ lapply[0x55de2acbb030]                                                       │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;Eager1,NonRefl1 miss: 1              │
│ Properties:                                                                  │
├────── Final PIR Version
lapply[0x55de2acbb030]
BB0
  val?~           %0.0  = LdArg                    1
  val?^           %0.1  = LdArg                    0
  env             e0.2  = MkEnv              l     X=%0.1, FUN=%0.0, ...(miss)=missingArg, parent=R_BaseNamespace, context 1
  prom-           %0.3  = MkArg                    unboundValue, lapply[0x55de2acbb030]_p0 (!refl), e0.2
  val?            %0.4  = StaticCall         !v    match.fun[0x55de2abb9820](%0.3) e0.2   <(cls|blt)->
  void                    StVar              lW    FUN, %0.4, e0.2
  val?^ | miss    %0.6  = LdVar              eR    is.vector, e0.2
  lgl$#-          %0.7  = Identical                %0.6, function(x, mode="any") <(rir::DispatchTable*)|...
  void                    Branch                   %0.7 -> BB17 (if true) | BB18 (if false)
BB17   <- [0]
  val?^ | miss    %17.0 = LdVar              eR    X, e0.2
  val?            %17.1 = Force!<lazy>       !v    %17.0, e0.2   <(str|vec)>
  lgl$#-          %17.2 = CallSafeBuiltin    wed   is.vector(%17.1, "any")    <lgl$->
  lgl$#-          %17.3 = Not                d     %17.2, elided
  void                    Branch                   %17.2 -> BB15 (if true) | BB5 (if false)
BB18   <- [0]
  fs              %18.0 = FrameState         R     0x55de28facc40+46: [], env=e0.2
  void                    Deopt              !v    %18.0, CallTarget@0x55de29e2fa10[Call#1], %0.6   !
BB15   <- [17]
  val?^ | miss    %15.0 = LdVar              eR    is.object, e0.2
  lgl$#-          %15.1 = Identical                <blt is.object>, %15.0   <true>
  void                    Branch                   %15.1 -> BB19 (if true) | BB20 (if false)
BB5   <- [17]
  void                    Nop                !     
  lgl$#-          %5.1  = %17.3
  goto BB6
BB19   <- [15]
  val?^ | miss    %19.0 = LdVar              eR    X, e0.2
  val?            %19.1 = Force!<wrapped>    !v    %19.0, e0.2   <(str|vec)->
  lgl$#-          %19.2 = CallSafeBuiltin    wed   is.object(%19.1)    <lgl$->
  lgl$-           %19.3 = LOr                      %17.3, %19.2
  lgl$-           %19.4 = %19.3
  goto BB6
BB20   <- [15]
  fs              %20.0 = FrameState         R     0x55de28facc40+78: [], env=e0.2
  prom-           %20.1 = MkArg                    %17.1, lapply[0x55de2acbb030]_p1 (!refl), e0.2
  val?~           %20.2 = CastType                 up %20.1
  env             e20.3 = (MkEnv)            l     mode(miss)="any", x=%20.2, parent=R_BaseNamespace, context 0
  fs              %20.4 = FrameState         R     0x55de2a3f0820+41: [%17.2], env=e20.3, next=%20.0
  void                    Deopt              !v    %20.4, DeadBranchReached@0x55de29e2fa10[Test#0], %15.1   !
BB6   <- [5, 19]
  lgl$-           %6.0  = Phi                      %19.4:BB19, %5.1:BB5
  lgl$-           %6.1  = %6.0
  lgl$#-          %6.2  = CheckTrueFalse     e     %6.1
  void                    Branch                   %6.2 -> BB14 (if true) | BB9 (if false)
BB14   <- [6]
  val?^ | miss    %14.0 = LdVar              eR    as.list, e0.2
  lgl$#-          %14.1 = Identical                %14.0, function(x, ...) <(rir::DispatchTable*)0x55de2|...
  void                    Branch                   %14.1 -> BB21 (if true) | BB22 (if false)
BB9   <- [6]
  void                    Nop                !     
  goto BB10
BB21   <- [14]
  val?^ | miss    %21.0 = LdVar              eR    X, e0.2
  val?            %21.1 = Force!<wrapped>    !v    %21.0, e0.2   <vec>
  val?            %21.2 = StaticCall         !v    as.list[0x55de2b179a30](%21.1) { 0 } e0.2   <vec>
  void                    StVar              lW    X, %21.2, e0.2
  goto BB10
BB22   <- [14]
  fs              %22.0 = FrameState         R     0x55de28facc40+189: [%6.1], env=e0.2
  void                    Deopt              !v    %22.0, CallTarget@0x55de29e2fa10[Call#3], %14.0   !
BB10   <- [9, 21]
  val?^ | miss    %10.0 = LdVar              eR    X, e0.2
  val?            %10.1 = Force!<wrapped>    !v    %10.0, e0.2   <(str|vec)>
  (nil|str)-      %10.2 = Names                    %10.1
  int$-           %10.3 = Length                   %10.1
  vec-            %10.4 = CallSafeBuiltin    wed   vector("list", %10.3) 
  val+            %10.5 = SetNames           e     %10.4, %10.2
  int$#-          %10.6 = 0L
  val+            %10.7 = %10.5
  goto BB11
BB11   <- [10, 12]
  int$-           %11.0 = Phi                      %10.6:BB10, %12.7:BB12
  int$-           %11.1 = %11.0
  val?            %11.2 = Phi                      %10.7:BB10, %12.8:BB12
  val?            %11.3 = %11.2
  int$-           %11.4 = Inc                      %11.1
  lgl$-           %11.5 = Lt                 d     %10.3, %11.4, elided
  lgl$#-          %11.6 = Identical                %11.5, true
  void                    Branch                   %11.6 -> BB13 (if true) | BB12 (if false)
BB13   <- [11]
  void                    Visible            v     
  void                    Return             l     %11.3
BB12   <- [11]
  void                    StVar              lW    i, %11.4, e0.2
  (cls|spec|blt)  %12.1 = LdFun              !v    FUN, e0.2
  prom-           %12.2 = MkArg                    unboundValue, lapply[0x55de2acbb030]_p2, e0.2
  (miss|dots)     %12.3 = LdDots             R     , e0.2
  *dots-          %12.4 = ExpandDots               %12.3
  val?            %12.5 = NamedCall          !v    %12.1(%12.2, .xpandDotsTrigger=%12.4) e0.2   <val?>
  val?            %12.6 = SetVecElt          e     %12.5, %11.3, %11.4
  int$-           %12.7 = %11.4
  val?            %12.8 = %12.6
  goto BB11
Prom 0:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    FUN, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <(cls|blt)->
  void                    Return             l     %0.3
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    X, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <(str|vec)>
  void                    Return             l     %0.3
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    X, e0.0
  val?            %0.2  = Force<wrapped>     !v    %0.1, e0.0   <(str|vec)>
  lgl$#-          %0.3  = IsType                   %0.2 isA val+
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    i, e0.0
  val?            %2.1  = Force<value>       !v    %2.0, e0.0   <int$->
  val?            %2.2  = %2.1
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, lapply[0x55de2acbb030]_p3, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.2:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract2_1D        !v    %0.2, %3.1, e0.0   <val?>
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 3:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    i, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <int$->
  void                    Return             l     %0.3

│ lapply[0x55de2acbb030]                                                       │
└──────────────────────────────────────────────────────────────────────────────┘
