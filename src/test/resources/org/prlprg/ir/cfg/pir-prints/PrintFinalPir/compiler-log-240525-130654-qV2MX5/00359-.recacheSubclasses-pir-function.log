
┌──────────────────────────────────────────────────────────────────────────────┐
│ .recacheSubclasses[0x55de2bb29f80]                                           │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;NonRefl1,NonRefl2                    │
│ Properties:                                                                  │
├────── Final PIR Version
.recacheSubclasses[0x55de2bb29f80]
BB0
  val?^           %0.0  = LdArg                    2
  val?^           %0.1  = LdArg                    1
  val?^           %0.2  = LdArg                    0
  env             e0.3  = MkEnv              l     class=%0.2, def=%0.1, env=%0.0, parent=<env 0x55de28b56378>, context 1
  (cls|spec|blt)  %0.4  = LdFun              !v    @, <0x55de2854ebd8>, <env 0x55de28b56378>
  prom-           %0.5  = MkArg                    unboundValue, .recacheSubclasses[0x55de2bb29f80]_p0 (!refl), e0.3
  prom-           %0.6  = MkArg                    unboundValue, .recacheSubclasses[0x55de2bb29f80]_p1, e0.3
  val?            %0.7  = Call               !v    %0.4(%0.5, %0.6) e0.3   <vec+>
  void                    StVar              lW    subs, %0.7, e0.3
  lgl$#-          %0.9  = IsType                   %0.7 isA val?+
  val?^ | miss    %0.10 = LdVar              eR    names, e0.3
  lgl$#-          %0.11 = Identical                <blt names>, %0.10   <true>
  void                    Branch                   %0.11 -> BB105 (if true) | BB106 (if false)
BB105   <- [0]
  val             %105.0 = ChkMissing         e     %0.7
  void                    Branch                   %0.9 -> BB107 (if true) | BB108 (if false)
BB106   <- [0]
  void                    Nop                !     
  lgl$#-          %106.1 = %0.11
  dr              %106.2 = DeadBranchReached@0x55de2a4e0d00[Test#0]
  goto BB104
BB107   <- [105]
  val?+           %107.0 = CastType           d     dn %0.7   <vec+>
  val+            %107.1 = CallSafeBuiltin    wed   names(%107.0)    <str->
  void                    StVar              lW    subNames, %107.1, e0.3
  val?^ | miss    %107.3 = LdVar              eR    seq_along, e0.3
  lgl$#-          %107.4 = Identical                <blt seq_along>, %107.3   <true>
  void                    Branch                   %107.4 -> BB109 (if true) | BB110 (if false)
BB108   <- [105]
  void                    Nop                !     
  val?            %108.1 = %0.7
  dr              %108.2 = Typecheck@0x55de2a4e0d00[Type#2]
  goto BB104
BB104   <- [106, 108]
  val?^ | miss    %104.0 = Phi                      %106.1:BB106, %108.1:BB108
  val?^ | miss    %104.1 = %104.0
  dr              %104.2 = Phi                      %106.2:BB106, %108.2:BB108
  dr              %104.3 = %104.2
  fs              %104.4 = FrameState         R     0x55de2b3c4720+51: [], env=e0.3
  void                    Deopt              !v    %104.4, %104.3, %104.1   !
BB109   <- [107]
  val?            %109.0 = CallBuiltin        !v    seq_along(%107.0) e0.3   <int->
  val?+           %109.1 = ToForSeq           e     %109.0
  int$-           %109.2 = Length                   %109.1
  int$-           %109.3 = Inc                      0L
  lgl$-           %109.4 = Lt                 d     %109.2, %109.3, elided   <false>
  lgl$#-          %109.5 = Identical                %109.4, true
  void                    Branch                   %109.5 -> BB112 (if true) | BB111 (if false)
BB110   <- [107]
  fs              %110.0 = FrameState         R     0x55de2b3c4720+156: [], env=e0.3
  void                    Deopt              !v    %110.0, DeadBranchReached@0x55de2a4e0d00[Test#1], %107.4   !
BB112   <- [109]
  fs              %112.0 = FrameState         R     0x55de2b3c4720+247: [%109.0], env=e0.3
  void                    Deopt              !v    %112.0, DeadBranchReached@0x55de2a4e0d00[Test#2], %109.5   !
BB111   <- [109]
  val?            %111.0 = Extract2_1D        wed   %109.1, %109.3, elided
  void                    StVar              lW    i, %111.0, e0.3
  val?^ | miss    %111.2 = LdVar              eR    subNames, e0.3
  lgl$#-          %111.3 = IsType                   %111.2 isA val?~- | miss
  void                    Branch                   %111.3 -> BB113 (if true) | BB114 (if false)
BB113   <- [111]
  val?~- | miss   %113.0 = CastType           d     dn %111.2
  val?-           %113.1 = Force!<value>            %113.0,    <str->
  lgl$#-          %113.2 = IsType                   %113.1 isA val+   <true>
  void                    Branch                   %113.2 -> BB115 (if true) | BB116 (if false)
BB114   <- [111]
  void                    Nop                !     
  val?^ | miss    %114.1 = %111.2
  dr              %114.2 = Typecheck@0x55de2a4e0d00[Type#9]
  goto BB7
BB115   <- [113]
  val             %115.0 = ChkMissing         e     %111.0
  lgl$#-          %115.1 = IsType                   %115.0 isA int$-
  void                    Branch                   %115.1 -> BB117 (if true) | BB118 (if false)
BB116   <- [113]
  void                    Nop                !     
  lgl$#-          %116.1 = %113.2
  dr              %116.2 = DeadBranchReached@0x55de2a4e0d00[Test#3]
  goto BB7
BB7   <- [114, 116, 118]
  val?^ | miss    %7.0  = Phi                      %114.1:BB114, %116.1:BB116, %118.1:BB118
  val?^ | miss    %7.1  = %7.0
  dr              %7.2  = Phi                      %114.2:BB114, %116.2:BB116, %118.2:BB118
  dr              %7.3  = %7.2
  fs              %7.4  = FrameState         R     0x55de2b3c4720+292: [%109.1, %109.2, %109.3], env=e0.3
  void                    Deopt              !v    %7.4, %7.3, %7.1   !
BB117   <- [115]
  int$-           %117.0 = CastType           d     dn %115.0
  val?            %117.1 = Extract2_1D        wed   %113.1, %117.0, elided   <str$->
  void                    StVar              lW    what, %117.1, e0.3
  val?^ | miss    %117.3 = LdVar              eR    getClassDef, e0.3
  lgl$#-          %117.4 = Identical                %117.3, function(Class, where=topenv(parent.frame()), |...
  void                    Branch                   %117.4 -> BB119 (if true) | BB120 (if false)
BB118   <- [115]
  void                    Nop                !     
  val             %118.1 = %115.0
  dr              %118.2 = Typecheck@0x55de2a4e0d00[Type#11]
  goto BB7
BB119   <- [117]
  prom-           %119.0 = MkArg                    unboundValue, .recacheSubclasses[0x55de2bb29f80]_p2 (!refl), e0.3
  prom-           %119.1 = MkArg                    unboundValue, .recacheSubclasses[0x55de2bb29f80]_p3, e0.3
  val?            %119.2 = StaticCall         !v    getClassDef[0x55de2b554670](%119.0, missingArg, %119.1) { 0 2n } e0.3   <other>
  lgl$-           %119.3 = Is                       %119.2, NULL
  void                    StVar              lW    subDef, %119.2, e0.3
  val             %119.5 = ChkMissing         e     %119.2
  lgl$#-          %119.6 = CheckTrueFalse     e     %119.3
  void                    Branch                   %119.6 -> BB103 (if true) | BB13 (if false)
BB120   <- [117]
  fs              %120.0 = FrameState         R     0x55de2b3c4720+367: [%109.1, %109.2, %109.3], env=e0.3
  void                    Deopt              !v    %120.0, CallTarget@0x55de2a4e0d00[Call#3], %117.3   !
BB103   <- [119]
  (cls|spec|blt)  %103.0 = LdFun              !v    getClassDef, e0.3
  fs              %103.1 = FrameState         R     0x55de2b3c4720+461: [%109.1, %109.2, %109.3, %103.0], env=e0.3
  void                    Deopt              !v    %103.1, DeadCall@0x55de2a4e0d00[Call#5], %103.0   !
BB13   <- [119]
  val?^ | miss    %13.0 = LdVar              eR    is.na, e0.3
  lgl$#-          %13.1 = Identical                <blt is.na>, %13.0   <true>
  void                    Branch                   %13.1 -> BB121 (if true) | BB122 (if false)
BB121   <- [13]
  val?^ | miss    %121.0 = LdVar              eR    match, e0.3
  lgl$#-          %121.1 = Identical                %121.0, function(x, table, nomatch=NA, incomparables=N|...
  void                    Branch                   %121.1 -> BB123 (if true) | BB124 (if false)
BB122   <- [13]
  void                    Nop                !     
  lgl$#-          %122.1 = %13.1
  dr              %122.2 = DeadBranchReached@0x55de2a4e0d00[Test#5]
  goto BB11
BB123   <- [121]
  val?^ | miss    %123.0 = LdVar              eR    what, e0.3
  lgl$#-          %123.1 = IsType                   %123.0 isA val?~- | miss
  void                    Branch                   %123.1 -> BB125 (if true) | BB126 (if false)
BB124   <- [121]
  void                    Nop                !     
  val?^ | miss    %124.1 = %121.0
  dr              %124.2 = CallTarget@0x55de2a4e0d00[Call#10]
  goto BB11
BB11   <- [122, 124, 126, 128]
  val?^ | miss    %11.0 = Phi                      %122.1:BB122, %124.1:BB124, %126.1:BB126, %128.1:BB128
  val?^ | miss    %11.1 = %11.0
  dr              %11.2 = Phi                      %122.2:BB122, %124.2:BB124, %126.2:BB126, %128.2:BB128
  dr              %11.3 = %11.2
  fs              %11.4 = FrameState         R     0x55de2b3c4720+426: [%109.1, %109.2, %109.3], env=e0.3
  void                    Deopt              !v    %11.4, %11.3, %11.1   !
BB125   <- [123]
  val?~- | miss   %125.0 = CastType           d     dn %123.0
  val?-           %125.1 = Force!<value>            %125.0,    <str$->
  val?^ | miss    %125.2 = LdVar              eR    names, e0.3
  lgl$#-          %125.3 = Identical                %125.2, <blt names>
  void                    Branch                   %125.3 -> BB127 (if true) | BB128 (if false)
BB126   <- [123]
  void                    Nop                !     
  val?^ | miss    %126.1 = %123.0
  dr              %126.2 = Typecheck@0x55de2a4e0d00[Type#31]
  goto BB11
BB127   <- [125]
  (cls|spec|blt)  %127.0 = LdFun              !v    @, <0x55de2854ebd8>, e0.3
  prom-           %127.1 = MkArg                    unboundValue, .recacheSubclasses[0x55de2bb29f80]_p6, e0.3
  prom-           %127.2 = MkArg                    unboundValue, .recacheSubclasses[0x55de2bb29f80]_p7, e0.3
  val?            %127.3 = Call               !v    %127.0(%127.1, %127.2) e0.3   <vec+>
  val?            %127.4 = CallBuiltin        !v    names(%127.3) e0.3   <str->
  lgl$#-          %127.5 = IsType                   %127.4 isA val?-
  void                    Branch                   %127.5 -> BB129 (if true) | BB130 (if false)
BB128   <- [125]
  void                    Nop                !     
  val?^ | miss    %128.1 = %125.2
  dr              %128.2 = CallTarget@0x55de2a4e0d00[Call#11]
  goto BB11
BB129   <- [127]
  val?-           %129.0 = CastType           d     dn %127.4   <str->
  val+            %129.1 = CallSafeBuiltin    wed   match(%125.1, %129.0, NA, nil)    <int$->
  lgl$#-          %129.2 = IsType                   %129.1 isA int$-
  void                    Branch                   %129.2 -> BB131 (if true) | BB132 (if false)
BB130   <- [127]
  fs              %130.0 = FrameState         R     0x55de2b3c4720+629: [%109.1, %109.2, %109.3, <blt is.na>], env=e0.3
  prom-           %130.1 = MkArg                    unboundValue, .recacheSubclasses[0x55de2bb29f80]_p8, e0.3
  val?^           %130.2 = CastType                 up %130.1
  prom-           %130.3 = MkArg                    %125.1, .recacheSubclasses[0x55de2bb29f80]_p12 (!refl), e0.3
  val?~           %130.4 = CastType                 up %130.3
  env             e130.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%130.2, x=%130.4, parent=R_BaseNamespace, context 0
  fs              %130.6 = FrameState         R     0x55de28d63d40+23: [%125.1], env=e130.5, next=%130.0
  fs              %130.7 = FrameState         R     0x55de2a78f2b0+32(pr): [%127.4], env=e0.3, next=%130.6
  void                    Deopt              !v    %130.7, Typecheck@0x55de28db6cb0[Type#1], %127.4   !
BB131   <- [129]
  int$-           %131.0 = CastType           d     dn %129.1
  lgl$-           %131.1 = CallSafeBuiltin    wed   is.na(%131.0)    <lgl$->
  lgl$#-          %131.2 = CheckTrueFalse     e     %131.1
  void                    Branch                   %131.2 -> BB92 (if true) | BB18 (if false)
BB132   <- [129]
  fs              %132.0 = FrameState         R     0x55de2b3c4720+629: [%109.1, %109.2, %109.3, <blt is.na>], env=e0.3
  prom-           %132.1 = MkArg                    %129.0, .recacheSubclasses[0x55de2bb29f80]_p13 (!refl), e0.3
  val?~           %132.2 = CastType                 up %132.1
  prom-           %132.3 = MkArg                    %125.1, .recacheSubclasses[0x55de2bb29f80]_p17 (!refl), e0.3
  val?~           %132.4 = CastType                 up %132.3
  env             e132.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%132.2, x=%132.4, parent=R_BaseNamespace, context 0
  fs              %132.6 = FrameState         R     0x55de28d63d40+69: [%129.1], env=e132.5, next=%132.0
  void                    Deopt              !v    %132.6, Typecheck@0x55de2a4e0d00[Type#36], %129.1   !
BB92   <- [131]
  (cls|spec|blt)  %92.0 = LdFun              !v    @, <0x55de2854ebd8>, e0.3
  prom-           %92.1 = MkArg                    unboundValue, .recacheSubclasses[0x55de2bb29f80]_p18, e0.3
  prom-           %92.2 = MkArg                    unboundValue, .recacheSubclasses[0x55de2bb29f80]_p19, e0.3
  val?            %92.3 = Call               !v    %92.0(%92.1, %92.2) e0.3   <vec+>
  void                    StVar              lW    cntns, %92.3, e0.3
  val?^ | miss    %92.5 = LdVar              eR    subs, e0.3
  lgl$#-          %92.6 = IsType                   %92.5 isA val?~+ | miss
  void                    Branch                   %92.6 -> BB133 (if true) | BB134 (if false)
BB18   <- [131]
  void                    Nop                !     
  goto BB19
BB133   <- [92]
  val?~+ | miss   %133.0 = CastType           d     dn %92.5
  val?+           %133.1 = Force!<value>            %133.0,    <vec+>
  lgl$#-          %133.2 = IsType                   %133.1 isA val+   <true>
  void                    Branch                   %133.2 -> BB135 (if true) | BB136 (if false)
BB134   <- [92]
  void                    Nop                !     
  val?^ | miss    %134.1 = %92.5
  dr              %134.2 = Typecheck@0x55de2a4e0d00[Type#41]
  goto BB93
BB19   <- [18, 159]
  void                    Nop                !     
  int$-           %19.1 = %109.3
  goto BB20
BB135   <- [133]
  val?^ | miss    %135.0 = LdVar              eR    i, e0.3
  lgl$#-          %135.1 = IsType                   %135.0 isA int$-
  void                    Branch                   %135.1 -> BB137 (if true) | BB138 (if false)
BB136   <- [133]
  void                    Nop                !     
  lgl$#-          %136.1 = %133.2
  dr              %136.2 = DeadBranchReached@0x55de2a4e0d00[Test#6]
  goto BB93
BB93   <- [134, 136, 138]
  val?^ | miss    %93.0 = Phi                      %134.1:BB134, %136.1:BB136, %138.1:BB138
  val?^ | miss    %93.1 = %93.0
  dr              %93.2 = Phi                      %134.2:BB134, %136.2:BB136, %138.2:BB138
  dr              %93.3 = %93.2
  fs              %93.4 = FrameState         R     0x55de2b3c4720+718: [%109.1, %109.2, %109.3], env=e0.3
  void                    Deopt              !v    %93.4, %93.3, %93.1   !
BB20   <- [19, 36]
  int$-           %20.0 = Phi                      %19.1:BB19, %36.1:BB36
  int$-           %20.1 = %20.0
  int$-           %20.2 = Inc                      %20.1
  lgl$-           %20.3 = Lt                 d     %109.2, %20.2, elided
  lgl$#-          %20.4 = Identical                %20.3, true
  void                    Branch                   %20.4 -> BB91 (if true) | BB21 (if false)
BB137   <- [135]
  int$-           %137.0 = CastType           d     dn %135.0
  val?            %137.1 = Extract2_1D        wed   %133.1, %137.0, elided   <other>
  val             %137.2 = ChkMissing         e     %92.3
  lgl$#-          %137.3 = IsType                   %137.2 isA val?~+ | miss
  void                    Branch                   %137.3 -> BB143 (if true) | BB144 (if false)
BB138   <- [135]
  void                    Nop                !     
  val?^ | miss    %138.1 = %135.0
  dr              %138.2 = Typecheck@0x55de2a4e0d00[Type#43]
  goto BB93
BB91   <- [20]
  void                    Visible            v     
  void                    Return             l     nil
BB21   <- [20]
  val?            %21.0 = Extract2_1D        wed   %109.1, %20.2, elided
  void                    StVar              lW    i, %21.0, e0.3
  val?^ | miss    %21.2 = LdVar              eR    subNames, e0.3
  lgl$#-          %21.3 = IsType                   %21.2 isA val?~- | miss
  void                    Branch                   %21.3 -> BB139 (if true) | BB140 (if false)
BB143   <- [137]
  val+            %143.0 = CastType           d     dn %137.2   <vec+>
  val?^ | miss    %143.1 = LdVar              eR    class, e0.3
  val?            %143.2 = Force!<lazy>       !v    %143.1, e0.3   <str$+>
  val?            %143.3 = Subassign2_1D      !v    %137.1, %143.0, %143.2, e0.3   <vec+>
  void                    StVar              lW    cntns, %143.3, e0.3
  lgl$#-          %143.5 = IsType                   %143.3 isA val+   <true>
  val             %143.6 = ChkMissing         e     %143.3
  void                    Branch                   %143.5 -> BB149 (if true) | BB150 (if false)
BB144   <- [137]
  fs              %144.0 = FrameState         R     0x55de2b3c4720+778: [%109.1, %109.2, %109.3, %137.1], env=e0.3
  void                    Deopt              !v    %144.0, Typecheck@0x55de2a4e0d00[Type#45], %137.2   !
BB139   <- [21]
  val?~- | miss   %139.0 = CastType           d     dn %21.2
  val?-           %139.1 = Force!<value>            %139.0,    <str->
  lgl$#-          %139.2 = IsType                   %139.1 isA val+   <true>
  void                    Branch                   %139.2 -> BB141 (if true) | BB142 (if false)
BB140   <- [21]
  void                    Nop                !     
  val?^ | miss    %140.1 = %21.2
  dr              %140.2 = Typecheck@0x55de2a4e0d00[Type#69]
  goto BB22
BB149   <- [143]
  val?^ | miss    %149.0 = LdVar              eR    sort.list, e0.3
  lgl$#-          %149.1 = Identical                %149.0, function(x, partial=NULL, na.last=TRUE, decrea|...
  void                    Branch                   %149.1 -> BB151 (if true) | BB152 (if false)
BB150   <- [143]
  void                    Nop                !     
  lgl$#-          %150.1 = %143.5
  dr              %150.2 = DeadBranchReached@0x55de2a4e0d00[Test#7]
  goto BB97
BB141   <- [139]
  val             %141.0 = ChkMissing         e     %21.0
  lgl$#-          %141.1 = IsType                   %141.0 isA int$-
  void                    Branch                   %141.1 -> BB145 (if true) | BB146 (if false)
BB142   <- [139]
  void                    Nop                !     
  lgl$#-          %142.1 = %139.2
  dr              %142.2 = DeadBranchReached@0x55de2a4e0d00[Test#8]
  goto BB22
BB22   <- [140, 142, 146]
  val?^ | miss    %22.0 = Phi                      %140.1:BB140, %142.1:BB142, %146.1:BB146
  val?^ | miss    %22.1 = %22.0
  dr              %22.2 = Phi                      %140.2:BB140, %142.2:BB142, %146.2:BB146
  dr              %22.3 = %22.2
  fs              %22.4 = FrameState         R     0x55de2b3c4720+1073: [%109.1, %109.2, %20.2], env=e0.3
  void                    Deopt              !v    %22.4, %22.3, %22.1   !
BB151   <- [149]
  prom-           %151.0 = MkArg                    unboundValue, .recacheSubclasses[0x55de2bb29f80]_p20, e0.3
  val?            %151.1 = Call               !v    function(x, partial=NULL, na.last=TRUE, decrea|...(%151.0) e0.3   <int->
  lgl$#-          %151.2 = IsType                   %151.1 isA int-
  lgl$#-          %151.3 = IsType                   %143.3 isA val?+
  void                    Branch                   %151.3 -> BB155 (if true) | BB156 (if false)
BB152   <- [149]
  void                    Nop                !     
  val?^ | miss    %152.1 = %149.0
  dr              %152.2 = CallTarget@0x55de2a4e0d00[Call#16]
  goto BB97
BB97   <- [150, 152]
  val?^ | miss    %97.0 = Phi                      %150.1:BB150, %152.1:BB152
  val?^ | miss    %97.1 = %97.0
  dr              %97.2 = Phi                      %150.2:BB150, %152.2:BB152
  dr              %97.3 = %97.2
  fs              %97.4 = FrameState         R     0x55de2b3c4720+822: [%109.1, %109.2, %109.3], env=e0.3
  void                    Deopt              !v    %97.4, %97.3, %97.1   !
BB145   <- [141]
  int$-           %145.0 = CastType           d     dn %141.0
  val?            %145.1 = Extract2_1D        wed   %139.1, %145.0, elided   <str$->
  void                    StVar              lW    what, %145.1, e0.3
  val?^ | miss    %145.3 = LdVar              eR    getClassDef, e0.3
  lgl$#-          %145.4 = Identical                %145.3, function(Class, where=topenv(parent.frame()), |...
  void                    Branch                   %145.4 -> BB147 (if true) | BB148 (if false)
BB146   <- [141]
  void                    Nop                !     
  val             %146.1 = %141.0
  dr              %146.2 = Typecheck@0x55de2a4e0d00[Type#71]
  goto BB22
BB155   <- [151]
  val?+           %155.0 = CastType           d     dn %143.3   <vec+>
  void                    Branch                   %151.2 -> BB157 (if true) | BB158 (if false)
BB156   <- [151]
  void                    Nop                !     
  val?            %156.1 = %143.3
  dr              %156.2 = Typecheck@0x55de2a4e0d00[Type#47]
  goto BB99
BB147   <- [145]
  prom-           %147.0 = MkArg                    unboundValue, .recacheSubclasses[0x55de2bb29f80]_p30 (!refl), e0.3
  prom-           %147.1 = MkArg                    unboundValue, .recacheSubclasses[0x55de2bb29f80]_p31, e0.3
  val?            %147.2 = StaticCall         !v    getClassDef[0x55de2b554670](%147.0, missingArg, %147.1) { 0 2n } e0.3   <other>
  lgl$-           %147.3 = Is                       %147.2, NULL
  void                    StVar              lW    subDef, %147.2, e0.3
  val             %147.5 = ChkMissing         e     %147.2
  lgl$#-          %147.6 = CheckTrueFalse     e     %147.3
  void                    Branch                   %147.6 -> BB90 (if true) | BB28 (if false)
BB148   <- [145]
  fs              %148.0 = FrameState         R     0x55de2b3c4720+1148: [%109.1, %109.2, %20.2], env=e0.3
  void                    Deopt              !v    %148.0, CallTarget@0x55de2a4e0d00[Call#26], %145.3   !
BB157   <- [155]
  int-            %157.0 = CastType           d     dn %151.1
  val?            %157.1 = Extract1_1D        wed   %155.0, %157.0, elided   <vec+>
  void                    StVar              lW    cntns, %157.1, e0.3
  (cls|spec|blt)  %157.3 = LdFun              !v    <-, <0x55de28543da8>, e0.3
  prom-           %157.4 = MkArg                    unboundValue, .recacheSubclasses[0x55de2bb29f80]_p23, e0.3
  prom-           %157.5 = MkArg                    unboundValue, .recacheSubclasses[0x55de2bb29f80]_p26, e0.3
  val?            %157.6 = Call               !v    %157.3(%157.4, %157.5) e0.3
  val?^ | miss    %157.7 = LdVar              eR    .cacheClass, e0.3
  lgl$#-          %157.8 = Identical                %157.7, function(name, def, doSubclasses=FALSE, env) <|...
  void                    Branch                   %157.8 -> BB159 (if true) | BB160 (if false)
BB158   <- [155]
  void                    Nop                !     
  val?            %158.1 = %151.1
  dr              %158.2 = Typecheck@0x55de2a4e0d00[Type#53]
  goto BB99
BB99   <- [156, 158]
  val?^ | miss    %99.0 = Phi                      %156.1:BB156, %158.1:BB158
  val?^ | miss    %99.1 = %99.0
  dr              %99.2 = Phi                      %156.2:BB156, %158.2:BB158
  dr              %99.3 = %99.2
  fs              %99.4 = FrameState         R     0x55de2b3c4720+899: [%109.1, %109.2, %109.3, %143.3, %151.1], env=e0.3
  void                    Deopt              !v    %99.4, %99.3, %99.1   !
BB90   <- [147]
  (cls|spec|blt)  %90.0 = LdFun              !v    getClassDef, e0.3
  fs              %90.1 = FrameState         R     0x55de2b3c4720+1242: [%109.1, %109.2, %20.2, %90.0], env=e0.3
  void                    Deopt              !v    %90.1, DeadCall@0x55de2a4e0d00[Call#28], %90.0   !
BB28   <- [147]
  val?^ | miss    %28.0 = LdVar              eR    is.na, e0.3
  lgl$#-          %28.1 = Identical                <blt is.na>, %28.0   <true>
  void                    Branch                   %28.1 -> BB153 (if true) | BB154 (if false)
BB159   <- [157]
  prom-           %159.0 = MkArg                    unboundValue, .recacheSubclasses[0x55de2bb29f80]_p27, e0.3
  prom-           %159.1 = MkArg                    unboundValue, .recacheSubclasses[0x55de2bb29f80]_p28, e0.3
  prom-           %159.2 = MkArg                    unboundValue, .recacheSubclasses[0x55de2bb29f80]_p29, e0.3
  val?            %159.3 = StaticCall         !v    .cacheClass[0x55de2ae33480](%159.0, %159.1, false, %159.2) e0.3
  goto BB19
BB160   <- [157]
  fs              %160.0 = FrameState         R     0x55de2b3c4720+957: [%109.1, %109.2, %109.3, %157.6], env=e0.3
  void                    Deopt              !v    %160.0, CallTarget@0x55de2a4e0d00[Call#20], %157.7   !
BB153   <- [28]
  val?^ | miss    %153.0 = LdVar              eR    match, e0.3
  lgl$#-          %153.1 = Identical                %153.0, function(x, table, nomatch=NA, incomparables=N|...
  void                    Branch                   %153.1 -> BB161 (if true) | BB162 (if false)
BB154   <- [28]
  void                    Nop                !     
  lgl$#-          %154.1 = %28.1
  dr              %154.2 = DeadBranchReached@0x55de2a4e0d00[Test#10]
  goto BB26
BB161   <- [153]
  prom-           %161.0 = MkArg                    unboundValue, .recacheSubclasses[0x55de2bb29f80]_p35, e0.3
  val?^           %161.1 = CastType                 up %161.0
  val?^ | miss    %161.2 = LdVar              eR    what, e0.3
  val?            %161.3 = Force!<value>      !v    %161.2, e0.3   <str$->
  prom-           %161.4 = MkArg                    %161.3, .recacheSubclasses[0x55de2bb29f80]_p39 (!refl), e0.3
  val?~           %161.5 = CastType                 up %161.4
  env             e161.6 = (MkEnv)            l     x=%161.5, table=%161.1, nomatch(miss)=NA, incomparables(miss)=nil, parent=R_BaseNamespace, context 0
  lgl$#-          %161.7 = IsEnvStub          R     , e161.6
  void                    Branch                   %161.7 -> BB163 (if true) | BB164 (if false)
BB162   <- [153]
  void                    Nop                !     
  val?^ | miss    %162.1 = %153.0
  dr              %162.2 = CallTarget@0x55de2a4e0d00[Call#33]
  goto BB26
BB26   <- [154, 162]
  val?^ | miss    %26.0 = Phi                      %154.1:BB154, %162.1:BB162
  val?^ | miss    %26.1 = %26.0
  dr              %26.2 = Phi                      %154.2:BB154, %162.2:BB162
  dr              %26.3 = %26.2
  fs              %26.4 = FrameState         R     0x55de2b3c4720+1207: [%109.1, %109.2, %20.2], env=e0.3
  void                    Deopt              !v    %26.4, %26.3, %26.1   !
BB163   <- [161]
  val?            %163.0 = Force!<lazy>       !vL   %161.1, e161.6   <val?->
  lgl$#-          %163.1 = IsType                   %163.0 isA val?-
  lgl$#-          %163.2 = IsEnvStub          R     , e161.6
  void                    Branch                   %163.2 -> BB165 (if true) | BB166 (if false)
BB164   <- [161]
  fs              %164.0 = FrameState         R     0x55de2b3c4720+1410: [%109.1, %109.2, %20.2, <blt is.na>], env=e0.3
  env             e164.1 = (MkEnv)            l     x=%161.5, table=%161.1, nomatch(miss)=NA, incomparables(miss)=nil, parent=R_BaseNamespace, context 0
  fs              %164.2 = FrameState         R     0x55de28d63d40+9: [%161.3], env=e164.1, next=%164.0
  void                    Deopt              !v    %164.2, EnvStubMaterialized@0x55de28db6cb0[Call#unknown], e161.6   !
BB165   <- [163]
  lgl$#-          %165.0 = IsType                   %161.3 isA val?+
  void                    Branch                   %165.0 -> BB167 (if true) | BB168 (if false)
BB166   <- [163]
  void                    Nop                !     
  env             e166.1 = e161.6
  dr              %166.2 = EnvStubMaterialized@0x55de28db6cb0[Call#unknown]
  goto BB31
BB167   <- [165]
  val?+           %167.0 = CastType           d     dn %161.3   <(int|str)+>
  void                    Branch                   %163.1 -> BB169 (if true) | BB170 (if false)
BB168   <- [165]
  void                    Nop                !     
  val?            %168.1 = %161.3
  dr              %168.2 = Typecheck@0x55de28db6cb0[Type#0]
  goto BB31
BB31   <- [166, 168, 170]
  val?^ | miss    %31.0 = Phi                      e166.1:BB166, %168.1:BB168, %170.1:BB170
  val?^ | miss    %31.1 = %31.0
  dr              %31.2 = Phi                      %166.2:BB166, %168.2:BB168, %170.2:BB170
  dr              %31.3 = %31.2
  fs              %31.4 = FrameState         R     0x55de2b3c4720+1410: [%109.1, %109.2, %20.2, <blt is.na>], env=e0.3
  fs              %31.5 = FrameState         R     0x55de28d63d40+23: [%161.3, %163.0], env=e161.6, next=%31.4
  void                    Deopt              !v    %31.5, %31.3, %31.1   !
BB169   <- [167]
  val?-           %169.0 = CastType           d     dn %163.0
  val+            %169.1 = CallSafeBuiltin    wed   match(%167.0, %169.0, NA, nil)    <int$->
  lgl$#-          %169.2 = IsType                   %169.1 isA int$-
  void                    Branch                   %169.2 -> BB171 (if true) | BB172 (if false)
BB170   <- [167]
  void                    Nop                !     
  val?            %170.1 = %163.0
  dr              %170.2 = Typecheck@0x55de28db6cb0[Type#1]
  goto BB31
BB171   <- [169]
  int$-           %171.0 = CastType           d     dn %169.1
  lgl$-           %171.1 = CallSafeBuiltin    wed   is.na(%171.0)    <lgl$->
  lgl$#-          %171.2 = CheckTrueFalse     e     %171.1
  void                    Branch                   %171.2 -> BB37 (if true) | BB35 (if false)
BB172   <- [169]
  fs              %172.0 = FrameState         R     0x55de2b3c4720+1410: [%109.1, %109.2, %20.2, <blt is.na>], env=e0.3
  fs              %172.1 = FrameState         R     0x55de28d63d40+69: [%169.1], env=e161.6, next=%172.0
  void                    Deopt              !v    %172.1, Typecheck@0x55de2a4e0d00[Type#96], %169.1   !
BB37   <- [171]
  (cls|spec|blt)  %37.0 = LdFun              !v    @, <0x55de2854ebd8>, e0.3
  prom-           %37.1 = MkArg                    unboundValue, .recacheSubclasses[0x55de2bb29f80]_p40, e0.3
  prom-           %37.2 = MkArg                    unboundValue, .recacheSubclasses[0x55de2bb29f80]_p41, e0.3
  val?            %37.3 = Call               !v    %37.0(%37.1, %37.2) e0.3   <vec+>
  void                    StVar              lW    cntns, %37.3, e0.3
  val?^ | miss    %37.5 = LdVar              eR    subs, e0.3
  lgl$#-          %37.6 = IsType                   %37.5 isA val?~+ | miss
  void                    Branch                   %37.6 -> BB173 (if true) | BB174 (if false)
BB35   <- [171]
  void                    Nop                !     
  goto BB36
BB173   <- [37]
  val?~+ | miss   %173.0 = CastType           d     dn %37.5
  val?+           %173.1 = Force!<value>            %173.0,    <vec+>
  lgl$#-          %173.2 = IsType                   %173.1 isA val+   <true>
  void                    Branch                   %173.2 -> BB175 (if true) | BB176 (if false)
BB174   <- [37]
  void                    Nop                !     
  val?^ | miss    %174.1 = %37.5
  dr              %174.2 = Typecheck@0x55de2a4e0d00[Type#101]
  goto BB38
BB36   <- [35, 62]
  void                    Nop                !     
  int$-           %36.1 = %20.2
  goto BB20
BB175   <- [173]
  val?^ | miss    %175.0 = LdVar              eR    i, e0.3
  lgl$#-          %175.1 = IsType                   %175.0 isA int$-
  void                    Branch                   %175.1 -> BB177 (if true) | BB178 (if false)
BB176   <- [173]
  void                    Nop                !     
  lgl$#-          %176.1 = %173.2
  dr              %176.2 = DeadBranchReached@0x55de2a4e0d00[Test#11]
  goto BB38
BB38   <- [174, 176, 178]
  val?^ | miss    %38.0 = Phi                      %174.1:BB174, %176.1:BB176, %178.1:BB178
  val?^ | miss    %38.1 = %38.0
  dr              %38.2 = Phi                      %174.2:BB174, %176.2:BB176, %178.2:BB178
  dr              %38.3 = %38.2
  fs              %38.4 = FrameState         R     0x55de2b3c4720+1499: [%109.1, %109.2, %20.2], env=e0.3
  void                    Deopt              !v    %38.4, %38.3, %38.1   !
BB177   <- [175]
  int$-           %177.0 = CastType           d     dn %175.0
  val?            %177.1 = Extract2_1D        wed   %173.1, %177.0, elided   <other>
  val             %177.2 = ChkMissing         e     %37.3
  lgl$#-          %177.3 = IsType                   %177.2 isA val?~+ | miss
  void                    Branch                   %177.3 -> BB179 (if true) | BB180 (if false)
BB178   <- [175]
  void                    Nop                !     
  val?^ | miss    %178.1 = %175.0
  dr              %178.2 = Typecheck@0x55de2a4e0d00[Type#103]
  goto BB38
BB179   <- [177]
  val+            %179.0 = CastType           d     dn %177.2   <vec+>
  val?^ | miss    %179.1 = LdVar              eR    class, e0.3
  val?            %179.2 = Force!<wrapped>    !v    %179.1, e0.3   <str$+>
  val?            %179.3 = Subassign2_1D      !v    %177.1, %179.0, %179.2, e0.3   <vec+>
  void                    StVar              lW    cntns, %179.3, e0.3
  lgl$#-          %179.5 = IsType                   %179.3 isA val+   <true>
  val             %179.6 = ChkMissing         e     %179.3
  void                    Branch                   %179.5 -> BB181 (if true) | BB182 (if false)
BB180   <- [177]
  fs              %180.0 = FrameState         R     0x55de2b3c4720+1559: [%109.1, %109.2, %20.2, %177.1], env=e0.3
  void                    Deopt              !v    %180.0, Typecheck@0x55de2a4e0d00[Type#105], %177.2   !
BB181   <- [179]
  val?^ | miss    %181.0 = LdVar              eR    sort.list, e0.3
  lgl$#-          %181.1 = Identical                %181.0, function(x, partial=NULL, na.last=TRUE, decrea|...
  void                    Branch                   %181.1 -> BB183 (if true) | BB184 (if false)
BB182   <- [179]
  void                    Nop                !     
  lgl$#-          %182.1 = %179.5
  dr              %182.2 = DeadBranchReached@0x55de2a4e0d00[Test#12]
  goto BB42
BB183   <- [181]
  prom-           %183.0 = MkArg                    unboundValue, .recacheSubclasses[0x55de2bb29f80]_p42, e0.3
  val?            %183.1 = Call               !v    function(x, partial=NULL, na.last=TRUE, decrea|...(%183.0) e0.3   <int->
  lgl$#-          %183.2 = IsType                   %183.1 isA int-
  lgl$#-          %183.3 = IsType                   %179.3 isA val?+
  void                    Branch                   %183.3 -> BB185 (if true) | BB186 (if false)
BB184   <- [181]
  void                    Nop                !     
  val?^ | miss    %184.1 = %181.0
  dr              %184.2 = CallTarget@0x55de2a4e0d00[Call#39]
  goto BB42
BB42   <- [182, 184]
  val?^ | miss    %42.0 = Phi                      %182.1:BB182, %184.1:BB184
  val?^ | miss    %42.1 = %42.0
  dr              %42.2 = Phi                      %182.2:BB182, %184.2:BB184
  dr              %42.3 = %42.2
  fs              %42.4 = FrameState         R     0x55de2b3c4720+1603: [%109.1, %109.2, %20.2], env=e0.3
  void                    Deopt              !v    %42.4, %42.3, %42.1   !
BB185   <- [183]
  val?+           %185.0 = CastType           d     dn %179.3   <vec+>
  void                    Branch                   %183.2 -> BB187 (if true) | BB188 (if false)
BB186   <- [183]
  void                    Nop                !     
  val?            %186.1 = %179.3
  dr              %186.2 = Typecheck@0x55de2a4e0d00[Type#107]
  goto BB44
BB187   <- [185]
  int-            %187.0 = CastType           d     dn %183.1
  val?            %187.1 = Extract1_1D        wed   %185.0, %187.0, elided   <vec+>
  void                    StVar              lW    cntns, %187.1, e0.3
  (cls|spec|blt)  %187.3 = LdFun              !v    <-, <0x55de28543da8>, e0.3
  prom-           %187.4 = MkArg                    unboundValue, .recacheSubclasses[0x55de2bb29f80]_p45, e0.3
  prom-           %187.5 = MkArg                    unboundValue, .recacheSubclasses[0x55de2bb29f80]_p48, e0.3
  val?            %187.6 = Call               !v    %187.3(%187.4, %187.5) e0.3
  val?^ | miss    %187.7 = LdVar              eR    .cacheClass, e0.3
  lgl$#-          %187.8 = Identical                %187.7, function(name, def, doSubclasses=FALSE, env) <|...
  void                    Branch                   %187.8 -> BB189 (if true) | BB190 (if false)
BB188   <- [185]
  void                    Nop                !     
  val?            %188.1 = %183.1
  dr              %188.2 = Typecheck@0x55de2a4e0d00[Type#113]
  goto BB44
BB44   <- [186, 188]
  val?^ | miss    %44.0 = Phi                      %186.1:BB186, %188.1:BB188
  val?^ | miss    %44.1 = %44.0
  dr              %44.2 = Phi                      %186.2:BB186, %188.2:BB188
  dr              %44.3 = %44.2
  fs              %44.4 = FrameState         R     0x55de2b3c4720+1680: [%109.1, %109.2, %20.2, %179.3, %183.1], env=e0.3
  void                    Deopt              !v    %44.4, %44.3, %44.1   !
BB189   <- [187]
  prom-           %189.0 = MkArg                    unboundValue, .recacheSubclasses[0x55de2bb29f80]_p49, e0.3
  prom-           %189.1 = MkArg                    unboundValue, .recacheSubclasses[0x55de2bb29f80]_p50, e0.3
  prom-           %189.2 = MkArg                    unboundValue, .recacheSubclasses[0x55de2bb29f80]_p51, e0.3
  ct              %189.3 = PushContext        lCL   %189.0, %189.1, false, %189.2, .cacheClass(what, subDef, FALSE, env), function(name, def, doSubclasses=FALSE, env) <|..., e0.3
  val?^           %189.4 = CastType                 up %189.2
  val?^           %189.5 = CastType                 up %189.1
  val?^           %189.6 = CastType                 up %189.0
  env             e189.7 = MkEnv              l     name=%189.6, def=%189.5, doSubclasses=false, env=%189.4, parent=<env 0x55de28b56378>, context 1
  val?^ | miss    %189.8 = LdVar              eR    isFALSE, e189.7
  lgl$#-          %189.9 = Identical                %189.8, function(x) <(rir::DispatchTable*)0x55de2b7a37|...
  void                    Branch                   %189.9 -> BB191 (if true) | BB192 (if false)
BB190   <- [187]
  fs              %190.0 = FrameState         R     0x55de2b3c4720+1738: [%109.1, %109.2, %20.2, %187.6], env=e0.3
  void                    Deopt              !v    %190.0, CallTarget@0x55de2a4e0d00[Call#43], %187.7   !
BB191   <- [189]
  lgl$-           %191.0 = CallSafeBuiltin    wed   is.na(false)    <lgl$->
  lgl$-           %191.1 = Not                d     %191.0, elided
  lgl$-           %191.2 = AsLogical                %191.1
  lgl$-           %191.3 = AsLogical                %191.2
  lgl$-           %191.4 = AsLogical                %191.3
  lgl$#-          %191.5 = Identical                %191.4, false
  void                    Branch                   %191.5 -> BB89 (if true) | BB52 (if false)
BB192   <- [189]
  fs              %192.0 = FrameState         R     0x55de2b3c4720+1786: [%109.1, %109.2, %20.2], env=e0.3
  env             e192.1 = (MkEnv)            l     name=%189.6, def=%189.5, doSubclasses=false, env=%189.4, parent=<env 0x55de28b56378>, context 1
  fs              %192.2 = FrameState         R     0x55de2ba21840+0: [], env=e192.1, next=%192.0
  void                    Deopt              !v    %192.2, CallTarget@0x55de2ba2b230[Call#0], %189.8   !
BB89   <- [191]
  void                    Nop                !     
  lgl$-           %89.1 = %191.4
  goto BB53
BB52   <- [191]
  lgl$-           %52.0 = AsLogical                %191.4
  lgl$-           %52.1 = %52.0
  goto BB53
BB53   <- [52, 89]
  lgl$-           %53.0 = Phi                      %52.1:BB52, %89.1:BB89
  lgl$-           %53.1 = %53.0
  lgl$-           %53.2 = Not                d     %53.1, elided
  lgl$#-          %53.3 = CheckTrueFalse     e     %53.2
  void                    Branch                   %53.3 -> BB88 (if true) | BB54 (if false)
BB88   <- [53]
  val?^ | miss    %88.0 = LdVar              eR    .recacheSubclasses, e189.7
  lgl$#-          %88.1 = Identical                %88.0, function(class, def, env) <(rir::DispatchTable|...
  void                    Branch                   %88.1 -> BB193 (if true) | BB194 (if false)
BB54   <- [53]
  void                    Nop                !     
  goto BB55
BB193   <- [88]
  prom-           %193.0 = MkArg                    unboundValue, .recacheSubclasses[0x55de2bb29f80]_p54, e189.7
  prom-           %193.1 = MkArg                    unboundValue, .recacheSubclasses[0x55de2bb29f80]_p57, e189.7
  prom-           %193.2 = MkArg                    unboundValue, .recacheSubclasses[0x55de2bb29f80]_p58, e189.7
  val?            %193.3 = StaticCall         !v    .recacheSubclasses[0x55de2a3f3840](%193.0, %193.1, %193.2) e189.7
  goto BB55
BB194   <- [88]
  prom-           %194.0 = MkArg                    false, .recacheSubclasses[0x55de2bb29f80]_p53 (!refl), e189.7
  val?~           %194.1 = CastType                 up %194.0
  fs              %194.2 = FrameState         R     0x55de2b3c4720+1786: [%109.1, %109.2, %20.2], env=e0.3
  fs              %194.3 = FrameState         R     0x55de2ba21840+32: [], env=e189.7, next=%194.2
  env             e194.4 = (MkEnv)            l     x=%194.1, parent=R_BaseNamespace, context 0
  fs              %194.5 = FrameState         R     0x55de2b0d00a0+319: [%191.3], env=e194.4, next=%194.3
  void                    Deopt              !v    %194.5, CallTarget@0x55de2ba2b230[Call#1], %88.0   !
BB55   <- [54, 193]
  val?^ | miss    %55.0 = LdVar              eR    .classTable, e189.7
  val?            %55.1 = Force!<wrapped>    !v    %55.0, e189.7   <env->
  lgl$#-          %55.2 = IsType                   %55.1 isA val+   <true>
  void                    Branch                   %55.2 -> BB195 (if true) | BB196 (if false)
BB195   <- [55]
  val?^ | miss    %195.0 = LdVar              eR    name, e189.7
  val?            %195.1 = Force!<lazy>       !v    %195.0, e189.7   <str$->
  lgl$#-          %195.2 = IsType                   %195.1 isA val?-
  lgl$#-          %195.3 = IsType                   %55.1 isA val?-
  void                    Branch                   %195.3 -> BB197 (if true) | BB198 (if false)
BB196   <- [55]
  fs              %196.0 = FrameState         R     0x55de2b3c4720+1786: [%109.1, %109.2, %20.2], env=e0.3
  fs              %196.1 = FrameState         R     0x55de2ba21840+101: [%55.1], env=e189.7, next=%196.0
  void                    Deopt              !v    %196.1, DeadBranchReached@0x55de2ba2b230[Test#0], %55.2   !
BB197   <- [195]
  val?-           %197.0 = CastType           d     dn %55.1   <env->
  void                    Branch                   %195.2 -> BB199 (if true) | BB200 (if false)
BB198   <- [195]
  void                    Nop                !     
  val?            %198.1 = %55.1
  dr              %198.2 = Typecheck@0x55de2ba2b230[Type#7]
  goto BB58
BB199   <- [197]
  val?-           %199.0 = CastType           d     dn %195.1   <str$->
  val?            %199.1 = Extract2_1D        wed   %197.0, %199.0, elided   <(nil|other)>
  lgl$-           %199.2 = Is                       %199.1, NULL
  void                    StVar              lW    prev, %199.1, e189.7
  lgl$-           %199.4 = Not                d     %199.2, elided
  lgl$#-          %199.5 = CheckTrueFalse     e     %199.4
  void                    Branch                   %199.5 -> BB63 (if true) | BB60 (if false)
BB200   <- [197]
  void                    Nop                !     
  val?            %200.1 = %195.1
  dr              %200.2 = Typecheck@0x55de2ba2b230[Type#9]
  goto BB58
BB58   <- [198, 200]
  val?^ | miss    %58.0 = Phi                      %198.1:BB198, %200.1:BB200
  val?^ | miss    %58.1 = %58.0
  dr              %58.2 = Phi                      %198.2:BB198, %200.2:BB200
  dr              %58.3 = %58.2
  fs              %58.4 = FrameState         R     0x55de2b3c4720+1786: [%109.1, %109.2, %20.2], env=e0.3
  fs              %58.5 = FrameState         R     0x55de2ba21840+146: [%55.1, %195.1], env=e189.7, next=%58.4
  void                    Deopt              !v    %58.5, %58.3, %58.1   !
BB63   <- [199]
  (cls|spec|blt)  %63.0 = LdFun              !v    @, <0x55de2854ebd8>, e189.7
  prom-           %63.1 = MkArg                    unboundValue, .recacheSubclasses[0x55de2bb29f80]_p60, e189.7
  prom-           %63.2 = MkArg                    unboundValue, .recacheSubclasses[0x55de2bb29f80]_p61, e189.7
  val?            %63.3 = Call               !v    %63.0(%63.1, %63.2) e189.7   <str$->
  void                    StVar              lW    newpkg, %63.3, e189.7
  val?^ | miss    %63.5 = LdVar              eR    is, e189.7
  lgl$#-          %63.6 = Identical                %63.5, function(object, class2) <(rir::DispatchTable*|...
  void                    Branch                   %63.6 -> BB201 (if true) | BB202 (if false)
BB60   <- [199]
  void                    Nop                !     
  goto BB61
BB201   <- [63]
  prom-           %201.0 = MkArg                    unboundValue, .recacheSubclasses[0x55de2bb29f80]_p62, e189.7
  val?            %201.1 = Call               !v    function(object, class2) <(rir::DispatchTable*|...(%201.0, "classRepresentation") e189.7   <lgl$->
  lgl$#-          %201.2 = IsType                   %201.1 isA lgl$-
  void                    Branch                   %201.2 -> BB203 (if true) | BB204 (if false)
BB202   <- [63]
  fs              %202.0 = FrameState         R     0x55de2b3c4720+1786: [%109.1, %109.2, %20.2], env=e0.3
  fs              %202.1 = FrameState         R     0x55de2ba21840+237: [], env=e189.7, next=%202.0
  void                    Deopt              !v    %202.1, CallTarget@0x55de2ba2b230[Call#4], %63.5   !
BB61   <- [60, 73]
  val?^ | miss    %61.0 = LdVar              eR    def, e189.7
  val?            %61.1 = Force!<lazy>       !v    %61.0, e189.7   <other>
  val?^ | miss    %61.2 = LdVar              eR    .classTable, e189.7
  val?            %61.3 = Force!<wrapped>    !v    %61.2, e189.7   <env->
  val?^ | miss    %61.4 = LdVar              eR    name, e189.7
  val?            %61.5 = Force!<wrapped>    !v    %61.4, e189.7   <str$->
  val?            %61.6 = Subassign2_1D      !v    %61.1, %61.3, %61.5, e189.7
  void                    StVar              lW    .classTable, %61.6, e189.7
  val?            %61.8 = %61.1
  goto BB62
BB203   <- [201]
  lgl$-           %203.0 = CastType           d     dn %201.1
  lgl$#-          %203.1 = CheckTrueFalse     e     %203.0
  void                    Branch                   %203.1 -> BB75 (if true) | BB68 (if false)
BB204   <- [201]
  void                    Nop                !     
  val?            %204.1 = %201.1
  dr              %204.2 = Typecheck@0x55de2ba2b230[Type#15]
  goto BB66
BB62   <- [87, 61, 221]
  val?            %62.0 = Phi                      %61.8:BB61, %221.17:BB221, %87.1:BB87
  val?            %62.1 = %62.0
  val?            %62.2 = PopContext         C     %62.1, %189.3
  goto BB36
BB75   <- [203]
  val?^ | miss    %75.0 = LdVar              eR    identical, e189.7
  lgl$#-          %75.1 = Identical                %75.0, function(x, y, num.eq=TRUE, single.NA=TRUE, at|...
  void                    Branch                   %75.1 -> BB205 (if true) | BB206 (if false)
BB68   <- [203]
  val?^ | miss    %68.0 = LdVar              eR    def, e189.7
  val?            %68.1 = Force!             !v    %68.0, e189.7   <val?_>
  val?^ | miss    %68.2 = LdVar              eR    prev !upd, e189.7
  val?            %68.3 = Force!             !v    %68.2, e189.7   <val?_>
  val?^ | miss    %68.4 = LdVar              eR    newpkg, e189.7
  val?            %68.5 = Force!             !v    %68.4, e189.7   <val?_>
  lgl$#-          %68.6 = IsType                   %68.5 isA val?+
  lgl$#-          %68.7 = IsType                   %68.1 isA val?+
  lgl$#-          %68.8 = IsType                   %68.3 isA val?+
  void                    Branch                   %68.7 -> BB207 (if true) | BB208 (if false)
BB66   <- [204, 206]
  val?^ | miss    %66.0 = Phi                      %204.1:BB204, %206.1:BB206
  val?^ | miss    %66.1 = %66.0
  dr              %66.2 = Phi                      %204.2:BB204, %206.2:BB206
  dr              %66.3 = %66.2
  fs              %66.4 = FrameState         R     0x55de2b3c4720+1786: [%109.1, %109.2, %20.2], env=e0.3
  fs              %66.5 = FrameState         R     0x55de2ba21840+274: [%201.1], env=e189.7, next=%66.4
  void                    Deopt              !v    %66.5, %66.3, %66.1   !
BB205   <- [75]
  prom-           %205.0 = MkArg                    unboundValue, .recacheSubclasses[0x55de2bb29f80]_p63, e189.7
  prom-           %205.1 = MkArg                    unboundValue, .recacheSubclasses[0x55de2bb29f80]_p64, e189.7
  ct              %205.2 = PushContext        lCL   %205.0, %205.1, identical(prev, def), function(x, y, num.eq=TRUE, single.NA=TRUE, at|..., e189.7
  val?^           %205.3 = CastType                 up %205.1
  val?^           %205.4 = CastType                 up %205.0
  env             e205.5 = MkEnv              l     x=%205.4, y=%205.3, num.eq(miss)=true, single.NA(miss)=true, attrib.as.set(miss)=true, ignore.bytecode(miss)=true, ignore.environment(miss)=false, ignore.srcref(miss)=true, parent=R_BaseNamespace, context 1
  val?            %205.6 = Force!<lazy>       !v    %205.4, e205.5   <val?>
  val?^ | miss    %205.7 = LdVar              eR    y, e205.5
  val?            %205.8 = Force!<lazy>       !v    %205.7, e205.5   <val?>
  val?^ | miss    %205.9 = LdVar              eR    num.eq, e205.5
  val?            %205.10 = Force!<lazy>       !v    %205.9, e205.5   <lgl$->
  val?^ | miss    %205.11 = LdVar              eR    single.NA, e205.5
  val?            %205.12 = Force!<lazy>       !v    %205.11, e205.5   <lgl$->
  val?^ | miss    %205.13 = LdVar              eR    attrib.as.set, e205.5
  val?            %205.14 = Force!<lazy>       !v    %205.13, e205.5   <lgl$->
  val?^ | miss    %205.15 = LdVar              eR    ignore.bytecode, e205.5
  val?            %205.16 = Force!<lazy>       !v    %205.15, e205.5   <lgl$->
  val?^ | miss    %205.17 = LdVar              eR    ignore.environment, e205.5
  val?            %205.18 = Force!<lazy>       !v    %205.17, e205.5   <lgl$->
  val?^ | miss    %205.19 = LdVar              eR    ignore.srcref, e205.5
  val?            %205.20 = Force!<lazy>       !v    %205.19, e205.5   <lgl$->
  val?            %205.21 = CallBuiltin        !v    identical(%205.6, %205.8, %205.10, %205.12, %205.14, %205.16, %205.18, %205.20) e205.5
  val?            %205.22 = PopContext         C     %205.21, %205.2   <lgl$->
  lgl$#-          %205.23 = IsType                   %205.22 isA lgl$-
  void                    Branch                   %205.23 -> BB213 (if true) | BB214 (if false)
BB206   <- [75]
  void                    Nop                !     
  val?^ | miss    %206.1 = %75.0
  dr              %206.2 = CallTarget@0x55de2ba2b230[Call#5]
  goto BB66
BB207   <- [68]
  val?+           %207.0 = CastType           d     dn %68.1   <val?_>
  void                    Branch                   %68.8 -> BB209 (if true) | BB210 (if false)
BB208   <- [68]
  void                    Nop                !     
  val?            %208.1 = %68.1
  dr              %208.2 = Typecheck@0x55de2ba2b230[Type#42]
  goto BB69
BB213   <- [205]
  lgl$-           %213.0 = CastType           d     dn %205.22
  lgl$#-          %213.1 = CheckTrueFalse     e     %213.0
  void                    Branch                   %213.1 -> BB87 (if true) | BB78 (if false)
BB214   <- [205]
  fs              %214.0 = FrameState         R     0x55de2b3c4720+1786: [%109.1, %109.2, %20.2], env=e0.3
  fs              %214.1 = FrameState         R     0x55de2ba21840+327: [%205.22], env=e189.7, next=%214.0
  void                    Deopt              !v    %214.1, Typecheck@0x55de2ba2b230[Type#18], %205.22   !
BB209   <- [207]
  val?+           %209.0 = CastType           d     dn %68.3   <val?_>
  void                    Branch                   %68.6 -> BB211 (if true) | BB212 (if false)
BB210   <- [207]
  void                    Nop                !     
  val?            %210.1 = %68.3
  dr              %210.2 = Typecheck@0x55de2ba2b230[Type#43]
  goto BB69
BB69   <- [208, 210, 212]
  val?^ | miss    %69.0 = Phi                      %208.1:BB208, %210.1:BB210, %212.1:BB212
  val?^ | miss    %69.1 = %69.0
  dr              %69.2 = Phi                      %208.2:BB208, %210.2:BB210, %212.2:BB212
  dr              %69.3 = %69.2
  fs              %69.4 = FrameState         R     0x55de2b3c4720+1786: [%109.1, %109.2, %20.2], env=e0.3
  fs              %69.5 = FrameState         R     0x55de2ba21840+926: [%68.1, %68.3, %68.5], env=e189.7, next=%69.4
  void                    Deopt              !v    %69.5, %69.3, %69.1   !
BB87   <- [213]
  void                    Nop                !     
  nil-            %87.1 = nil
  goto BB62
BB78   <- [213]
  (cls|spec|blt)  %78.0 = LdFun              !v    @, <0x55de2854ebd8>, e189.7
  prom-           %78.1 = MkArg                    unboundValue, .recacheSubclasses[0x55de2bb29f80]_p65, e189.7
  prom-           %78.2 = MkArg                    unboundValue, .recacheSubclasses[0x55de2bb29f80]_p66, e189.7
  val?            %78.3 = Call               !v    %78.0(%78.1, %78.2) e189.7   <str$->
  void                    StVar              lW    pkg, %78.3, e189.7
  val?^ | miss    %78.5 = LdVar              eR    identical, e189.7
  lgl$#-          %78.6 = Identical                %78.5, function(x, y, num.eq=TRUE, single.NA=TRUE, at|...
  void                    Branch                   %78.6 -> BB215 (if true) | BB216 (if false)
BB211   <- [209]
  val?+           %211.0 = CastType           d     dn %68.5   <val?_>
  val?+           %211.1 = Subassign2_1D      wed   %207.0, %209.0, %211.0, elided   <val?_>
  void                    StVar              lW    prev, %211.1, e189.7
  val+            %211.3 = ChkMissing         e     %211.1
  void                    StVar              lW    def, %211.1, e189.7
  val?^ | miss    %211.5 = LdVar              eR    length, e189.7
  lgl$#-          %211.6 = Identical                <blt length>, %211.5   <@?>
  void                    Branch                   %211.6 -> BB72 (if true) | BB71 (if false)
BB212   <- [209]
  void                    Nop                !     
  val?            %212.1 = %68.5
  dr              %212.2 = Typecheck@0x55de2ba2b230[Type#44]
  goto BB69
BB215   <- [78]
  prom-           %215.0 = MkArg                    unboundValue, .recacheSubclasses[0x55de2bb29f80]_p67 (!refl), e189.7
  prom-           %215.1 = MkArg                    unboundValue, .recacheSubclasses[0x55de2bb29f80]_p68, e189.7
  ct              %215.2 = PushContext        lCL   %215.0, %215.1, identical(pkg, newpkg), function(x, y, num.eq=TRUE, single.NA=TRUE, at|..., e189.7
  val?^           %215.3 = CastType                 up %215.1
  val?^           %215.4 = CastType                 up %215.0
  env             e215.5 = MkEnv              l     x=%215.4, y=%215.3, num.eq(miss)=true, single.NA(miss)=true, attrib.as.set(miss)=true, ignore.bytecode(miss)=true, ignore.environment(miss)=false, ignore.srcref(miss)=true, parent=R_BaseNamespace, context 1
  val?            %215.6 = Force!<lazy>       !vr   %215.4, e215.5   <val?>
  val?^ | miss    %215.7 = LdVar              eR    y, e215.5
  val?            %215.8 = Force!<lazy>       !v    %215.7, e215.5   <val?>
  val?^ | miss    %215.9 = LdVar              eR    num.eq, e215.5
  val?            %215.10 = Force!<lazy>       !v    %215.9, e215.5   <lgl$->
  val?^ | miss    %215.11 = LdVar              eR    single.NA, e215.5
  val?            %215.12 = Force!<lazy>       !v    %215.11, e215.5   <lgl$->
  val?^ | miss    %215.13 = LdVar              eR    attrib.as.set, e215.5
  val?            %215.14 = Force!<lazy>       !v    %215.13, e215.5   <lgl$->
  val?^ | miss    %215.15 = LdVar              eR    ignore.bytecode, e215.5
  val?            %215.16 = Force!<lazy>       !v    %215.15, e215.5   <lgl$->
  val?^ | miss    %215.17 = LdVar              eR    ignore.environment, e215.5
  val?            %215.18 = Force!<lazy>       !v    %215.17, e215.5   <lgl$->
  val?^ | miss    %215.19 = LdVar              eR    ignore.srcref, e215.5
  val?            %215.20 = Force!<lazy>       !v    %215.19, e215.5   <lgl$->
  val?            %215.21 = CallBuiltin        !v    identical(%215.6, %215.8, %215.10, %215.12, %215.14, %215.16, %215.18, %215.20) e215.5
  val?            %215.22 = PopContext         C     %215.21, %215.2   <lgl$->
  lgl$#-          %215.23 = IsType                   %215.22 isA lgl$-
  void                    Branch                   %215.23 -> BB217 (if true) | BB218 (if false)
BB216   <- [78]
  fs              %216.0 = FrameState         R     0x55de2b3c4720+1786: [%109.1, %109.2, %20.2], env=e0.3
  fs              %216.1 = FrameState         R     0x55de2ba21840+400: [], env=e189.7, next=%216.0
  void                    Deopt              !v    %216.1, CallTarget@0x55de2ba2b230[Call#7], %78.5   !
BB72   <- [211]
  real$-          %72.0 = CallSafeBuiltin    wed   length(%211.1)    <val?_>
  lgl$-           %72.1 = Gt                 d     %72.0, 1L, elided   <val?_>
  lgl$#-          %72.2 = CheckTrueFalse     e     %72.1
  void                    Branch                   %72.2 -> BB74 (if true) | BB73 (if false)
BB71   <- [211]
  (cls|spec|blt)  %71.0 = LdFun              !v    length, e189.7
  fs              %71.1 = FrameState         R     0x55de2b3c4720+1786: [%109.1, %109.2, %20.2], env=e0.3
  fs              %71.2 = FrameState         R     0x55de2ba21840+992: [%71.0], env=e189.7, next=%71.1
  void                    Deopt              !v    %71.2, DeadCall@0x55de2ba2b230[Call#14], %71.0   !
BB217   <- [215]
  lgl$-           %217.0 = CastType           d     dn %215.22
  lgl$#-          %217.1 = CheckTrueFalse     e     %217.0
  void                    Branch                   %217.1 -> BB84 (if true) | BB83 (if false)
BB218   <- [215]
  void                    Nop                !     
  val?            %218.1 = %215.22
  dr              %218.2 = Typecheck@0x55de2ba2b230[Type#24]
  goto BB81
BB74   <- [72]
  (cls|spec|blt)  %74.0 = LdFun              !v    .duplicateClassesExist, e189.7
  fs              %74.1 = FrameState         R     0x55de2b3c4720+1786: [%109.1, %109.2, %20.2], env=e0.3
  fs              %74.2 = FrameState         R     0x55de2ba21840+1088: [%74.0], env=e189.7, next=%74.1
  void                    Deopt              !v    %74.2, DeadCall@0x55de2ba2b230[Call#15], %74.0   !
BB73   <- [72]
  void                    Nop                !     
  goto BB61
BB84   <- [217]
  val?^ | miss    %84.0 = LdVar              eR    .cache_class, e189.7
  lgl$#-          %84.1 = Identical                <blt .cache_class>, %84.0   <true>
  void                    Branch                   %84.1 -> BB219 (if true) | BB220 (if false)
BB83   <- [217]
  (cls|spec|blt)  %83.0 = LdFun              !v    .simpleDuplicateClass, e189.7
  fs              %83.1 = FrameState         R     0x55de2b3c4720+1786: [%109.1, %109.2, %20.2], env=e0.3
  fs              %83.2 = FrameState         R     0x55de2ba21840+453: [%83.0], env=e189.7, next=%83.1
  void                    Deopt              !v    %83.2, DeadCall@0x55de2ba2b230[Call#8], %83.0   !
BB81   <- [218, 220]
  val?^ | miss    %81.0 = Phi                      %218.1:BB218, %220.1:BB220
  val?^ | miss    %81.1 = %81.0
  dr              %81.2 = Phi                      %218.2:BB218, %220.2:BB220
  dr              %81.3 = %81.2
  fs              %81.4 = FrameState         R     0x55de2b3c4720+1786: [%109.1, %109.2, %20.2], env=e0.3
  fs              %81.5 = FrameState         R     0x55de2ba21840+437: [%215.22], env=e189.7, next=%81.4
  void                    Deopt              !v    %81.5, %81.3, %81.1   !
BB219   <- [84]
  val?^ | miss    %219.0 = LdVar              eR    name, e189.7
  val?            %219.1 = Force!<wrapped>    !v    %219.0, e189.7   <str$->
  val?^ | miss    %219.2 = LdVar              eR    .extendsForS3, e189.7
  lgl$#-          %219.3 = Identical                %219.2, function(Class) <(rir::DispatchTable*)0x55de2a|...
  void                    Branch                   %219.3 -> BB221 (if true) | BB222 (if false)
BB220   <- [84]
  void                    Nop                !     
  lgl$#-          %220.1 = %84.1
  dr              %220.2 = DeadBranchReached@0x55de2ba2b230[Test#1]
  goto BB81
BB221   <- [219]
  prom-           %221.0 = MkArg                    unboundValue, .recacheSubclasses[0x55de2bb29f80]_p69, e189.7
  ct              %221.1 = PushContext        lCL   %221.0, .extendsForS3(def), function(Class) <(rir::DispatchTable*)0x55de2a|..., e189.7
  val?^           %221.2 = CastType                 up %221.0
  env             e221.3 = MkEnv              l     Class=%221.2, parent=<env 0x55de28b56378>, context 1
  (cls|spec|blt)  %221.4 = LdFun              !v    extends, <0x55de2c74f700>, <env 0x55de28b56378>
  prom-           %221.5 = MkArg                    unboundValue, .recacheSubclasses[0x55de2bb29f80]_p70, e221.3
  val?            %221.6 = NamedCall          !v    %221.4(%221.5, maybe=false) e221.3   <str->
  val?            %221.7 = PopContext         C     %221.6, %221.1   <str->
  val?            %221.8 = CallBuiltin        !v    .cache_class(%219.1, %221.7) e189.7
  val?^ | miss    %221.9 = LdVar              eR    def, e189.7
  val?            %221.10 = Force!<wrapped>    !v    %221.9, e189.7   <other>
  val?^ | miss    %221.11 = LdVar              eR    .classTable, e189.7
  val?            %221.12 = Force!<wrapped>    !v    %221.11, e189.7   <env->
  val?^ | miss    %221.13 = LdVar              eR    name, e189.7
  val?            %221.14 = Force!<wrapped>    !v    %221.13, e189.7   <str$->
  val?            %221.15 = Subassign2_1D      !v    %221.10, %221.12, %221.14, e189.7
  void                    StVar              lW    .classTable, %221.15, e189.7
  val?            %221.17 = %221.10
  goto BB62
BB222   <- [219]
  fs              %222.0 = FrameState         R     0x55de2b3c4720+1786: [%109.1, %109.2, %20.2], env=e0.3
  fs              %222.1 = FrameState         R     0x55de2ba21840+586: [<blt .cache_class>, %219.1], env=e189.7, next=%222.0
  void                    Deopt              !v    %222.1, CallTarget@0x55de2ba2b230[Call#11], %219.2   !
Prom 0:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    def, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    subclasses, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    what, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 3:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     packageSlot, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .recacheSubclasses[0x55de2bb29f80]_p4, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 4:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    subs, e0.0
  val?            %0.2  = Force              !v    %0.1, e0.0   <val?_>
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <@?>
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    i, e0.0
  val?            %2.1  = Force              !v    %2.0, e0.0   <val?_>
  val?            %2.2  = %2.1
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, .recacheSubclasses[0x55de2bb29f80]_p5, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [2, 4]
  val?            %3.0  = Phi                      %2.2:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract2_1D        !v    %0.2, %3.1, e0.0   <val?_>
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 5:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    i, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 6:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    subDef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 7:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    contains, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 8:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     names, <0x55de2854f470>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .recacheSubclasses[0x55de2bb29f80]_p9, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <str->
  void                    Return             l     %0.3
Prom 9:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, <0x55de2854ebd8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .recacheSubclasses[0x55de2bb29f80]_p10, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .recacheSubclasses[0x55de2bb29f80]_p11, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <vec+>
  void                    Return             l     %0.4
Prom 10:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    subDef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 11:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    contains, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 12:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    what, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 13:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     names, <0x55de2854f470>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .recacheSubclasses[0x55de2bb29f80]_p14, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <str->
  void                    Return             l     %0.3
Prom 14:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, <0x55de2854ebd8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .recacheSubclasses[0x55de2bb29f80]_p15, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .recacheSubclasses[0x55de2bb29f80]_p16, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <vec+>
  void                    Return             l     %0.4
Prom 15:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    subDef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 16:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    contains, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 17:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    what, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 18:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    subDef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 19:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    contains, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 20:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     vapply, <0x55de2866c9e8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .recacheSubclasses[0x55de2bb29f80]_p21, e0.0
  cls             %0.3  = MkCls                    .recacheSubclasses@Prom(36)0, e0.0
  prom-           %0.4  = MkArg                    %0.3, .recacheSubclasses[0x55de2bb29f80]_p22 (!refl), e0.0
  val?            %0.5  = Call               !     %0.1(%0.2, %0.4, 1) e0.0   <real+>
  void                    Return             l     %0.5
Prom 21:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    cntns, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 22:
BB0
  env             e0.0  = LdFunctionEnv            
  cls             %0.1  = MkCls                    .recacheSubclasses@Prom(36)0, e0.0
  void                    Return             l     %0.1
Prom 23:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .recacheSubclasses[0x55de2bb29f80]_p24, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .recacheSubclasses[0x55de2bb29f80]_p25, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 24:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    subDef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 25:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    contains, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 26:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    cntns, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 27:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    what, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 28:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    subDef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <other>
  void                    Return             l     %0.3
Prom 29:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    env, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 30:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    what, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 31:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     packageSlot, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .recacheSubclasses[0x55de2bb29f80]_p32, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 32:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    subs, e0.0
  val?            %0.2  = Force              !v    %0.1, e0.0   <val?_>
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <@?>
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    i, e0.0
  val?            %2.1  = Force              !v    %2.0, e0.0   <val?_>
  val?            %2.2  = %2.1
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, .recacheSubclasses[0x55de2bb29f80]_p33, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [2, 4]
  val?            %3.0  = Phi                      %2.2:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract2_1D        !v    %0.2, %3.1, e0.0   <val?_>
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 33:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    i, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 35:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     names, <0x55de2854f470>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .recacheSubclasses[0x55de2bb29f80]_p36, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <str->
  void                    Return             l     %0.3
Prom 36:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, <0x55de2854ebd8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .recacheSubclasses[0x55de2bb29f80]_p37, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .recacheSubclasses[0x55de2bb29f80]_p38, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <vec+>
  void                    Return             l     %0.4
Prom 37:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    subDef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 38:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    contains, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 39:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    what, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 40:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    subDef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 41:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    contains, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 42:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     vapply, <0x55de2866c9e8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .recacheSubclasses[0x55de2bb29f80]_p43, e0.0
  cls             %0.3  = MkCls                    .recacheSubclasses@Prom(24)0, e0.0
  prom-           %0.4  = MkArg                    %0.3, .recacheSubclasses[0x55de2bb29f80]_p44 (!refl), e0.0
  val?            %0.5  = Call               !     %0.1(%0.2, %0.4, 1) e0.0   <real+>
  void                    Return             l     %0.5
Prom 43:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    cntns, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 44:
BB0
  env             e0.0  = LdFunctionEnv            
  cls             %0.1  = MkCls                    .recacheSubclasses@Prom(24)0, e0.0
  void                    Return             l     %0.1
Prom 45:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .recacheSubclasses[0x55de2bb29f80]_p46, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .recacheSubclasses[0x55de2bb29f80]_p47, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 46:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    subDef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 47:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    contains, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 48:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    cntns, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 49:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    what, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 50:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    subDef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <other>
  void                    Return             l     %0.3
Prom 51:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    env, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 53:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    doSubclasses, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <lgl$->
  void                    Return             l     %0.3
Prom 54:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, <0x55de2854ebd8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .recacheSubclasses[0x55de2bb29f80]_p55, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .recacheSubclasses[0x55de2bb29f80]_p56, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <str$+>
  void                    Return             l     %0.4
Prom 55:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    def, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 56:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    className, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 57:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    def, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <other>
  void                    Return             l     %0.3
Prom 58:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    env, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 60:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    def, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 61:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    package, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 62:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    prev, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <other>
  void                    Return             l     %0.3
Prom 63:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    prev, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <other>
  void                    Return             l     %0.3
Prom 64:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    def, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <other>
  void                    Return             l     %0.3
Prom 65:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    prev, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 66:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    package, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 67:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    pkg, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 68:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    newpkg, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 69:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    def, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <other>
  void                    Return             l     %0.3
Prom 70:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    Class, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <other>
  void                    Return             l     %0.3

│ .recacheSubclasses[0x55de2bb29f80]                                           │
└──────────────────────────────────────────────────────────────────────────────┘
