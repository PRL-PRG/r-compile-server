
┌──────────────────────────────────────────────────────────────────────────────┐
│ .getGeneric[0x55de28a6e710]                                                  │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;NonRefl0,NonRefl1,NonRefl2           │
│ Properties:                                                                  │
├────── Final PIR Version
.getGeneric[0x55de28a6e710]
BB0
  val?^           %0.0  = LdArg                    2
  val?^           %0.1  = LdArg                    1
  val?^           %0.2  = LdArg                    0
  env             e0.3  = MkEnv              l     f=%0.2, where=%0.1, package=%0.0, parent=<env 0x55de28b56378>, context 1
  lgl$-           %0.4  = Missing            eR    where, e0.3
  lgl$#-          %0.5  = CheckTrueFalse     e     %0.4
  void                    Branch                   %0.5 -> BB50 (if true) | BB3 (if false)
BB50   <- [0]
  val?^ | miss    %50.0 = LdVar              eR    .getGenericFromCache, <env 0x55de28b56378>
  lgl$#-          %50.1 = Identical                %50.0, function(name, where, pkg="") <(rir::DispatchT|...
  void                    Branch                   %50.1 -> BB54 (if true) | BB55 (if false)
BB3   <- [0]
  void                    Nop                !     
  nil-            %3.1  = nil
  goto BB4
BB54   <- [50]
  prom-           %54.0 = MkArg                    unboundValue, .getGeneric[0x55de28a6e710]_p0 (!refl), e0.3
  prom-           %54.1 = MkArg                    unboundValue, .getGeneric[0x55de28a6e710]_p1 (!refl), e0.3
  prom-           %54.2 = MkArg                    unboundValue, .getGeneric[0x55de28a6e710]_p2 (!refl), e0.3
  ct              %54.3 = PushContext        lCL   %54.0, %54.1, %54.2, .getGenericFromCache(f, where, package), function(name, where, pkg="") <(rir::DispatchT|..., e0.3
  val?^           %54.4 = CastType                 up %54.2
  val?^           %54.5 = CastType                 up %54.1
  val?^           %54.6 = CastType                 up %54.0
  val?^ | miss    %54.7 = LdVar              eR    .getGenericFromCacheTable, <env 0x55de28b56378>
  lgl$#-          %54.8 = Identical                %54.7, function(name, where, pkg="", table) <(rir::Di|...
  void                    Branch                   %54.8 -> BB60 (if true) | BB61 (if false)
BB55   <- [50]
  env             e55.0 = (MkEnv)            l     f=%0.2, where=%0.1, package=%0.0, parent=<env 0x55de28b56378>, context 1
  fs              %55.1 = FrameState         R     0x55de2a85cfc0+0: [], env=e55.0
  void                    Deopt              !v    %55.1, CallTarget@0x55de2b85f8f0[Call#0], %50.0
BB4   <- [3, 60]
  val?            %4.0  = Phi                      %3.1:BB3, %60.7:BB60   <(nil|cls)>
  val?            %4.1  = %4.0
  lgl$-           %4.2  = Is                       %4.1, NULL
  void                    StVar              lW    value, %4.1, e0.3
  val             %4.4  = ChkMissing         e     %4.1
  lgl$#-          %4.5  = CheckTrueFalse     e     %4.2
  void                    Branch                   %4.5 -> BB9 (if true) | BB7 (if false)
BB60   <- [54]
  env             e60.0 = MkEnv              l     name=%54.6, where=%54.5, pkg=%54.4, parent=<env 0x55de28b56378>, context 1
  prom-           %60.1 = MkArg                    unboundValue, .getGeneric[0x55de28a6e710]_p3, e60.0
  prom-           %60.2 = MkArg                    unboundValue, .getGeneric[0x55de28a6e710]_p4, e60.0
  prom-           %60.3 = MkArg                    unboundValue, .getGeneric[0x55de28a6e710]_p5, e60.0
  prom-           %60.4 = MkArg                    unboundValue, .getGeneric[0x55de28a6e710]_p6, e60.0
  val?            %60.5 = StaticCall         !v    .getGenericFromCacheTable[0x55de29f37940](%60.1, %60.2, %60.3, %60.4) e60.0   <cls>
  val?            %60.6 = PopContext         C     %60.5, %54.3   <cls>
  val?            %60.7 = %60.6
  goto BB4
BB61   <- [54]
  fs              %61.0 = FrameState         R     0x55de2a85cfc0+65: [], env=e0.3
  env             e61.1 = (MkEnv)            l     name=%54.6, where=%54.5, pkg=%54.4, parent=<env 0x55de28b56378>, context 1
  fs              %61.2 = FrameState         R     0x55de2af3d150+0: [], env=e61.1, next=%61.0
  void                    Deopt              !v    %61.2, CallTarget@0x55de2af215f0[Call#0], %54.7   !
BB9   <- [4]
  val?^ | miss    %9.0  = LdVar              eR    is.character, e0.3
  lgl$#-          %9.1  = Identical                <blt is.character>, %9.0   <true>
  void                    Branch                   %9.1 -> BB56 (if true) | BB57 (if false)
BB7   <- [4]
  void                    Nop                !     
  goto BB8
BB56   <- [9]
  val?^ | miss    %56.0 = LdVar              eR    f, e0.3
  val?            %56.1 = Force!<lazy>       !v    %56.0, e0.3   <str$->
  lgl$#-          %56.2 = CallSafeBuiltin    wed   is.character(%56.1)    <lgl$->
  void                    Branch                   %56.2 -> BB45 (if true) | BB12 (if false)
BB57   <- [9]
  fs              %57.0 = FrameState         R     0x55de2a85cfc0+79: [], env=e0.3
  void                    Deopt              !v    %57.0, DeadBranchReached@0x55de2b85f8f0[Test#0], %9.1   !
BB8   <- [7, 37, 36]
  val?^ | miss    %8.0  = LdVar              eR    value, e0.3
  void                    Visible            v     
  val?            %8.2  = Force!<value>      !     %8.0, e0.3   <(nil|cls)>
  void                    Return             l     %8.2
BB45   <- [56]
  val?^ | miss    %45.0 = LdVar              eR    %in%, e0.3
  lgl$#-          %45.1 = Identical                %45.0, function(x, table) <(rir::DispatchTable*)0x55d|...
  void                    Branch                   %45.1 -> BB58 (if true) | BB59 (if false)
BB12   <- [56]
  void                    Nop                !     
  lgl$#-          %12.1 = %56.2
  goto BB13
BB58   <- [45]
  val?^ | miss    %58.0 = LdVar              eR    f, e0.3
  val?            %58.1 = Force!<wrapped>    !v    %58.0, e0.3   <str$->
  lgl$#-          %58.2 = IsType                   %58.1 isA val?+
  void                    Branch                   %58.2 -> BB62 (if true) | BB63 (if false)
BB59   <- [45]
  fs              %59.0 = FrameState         R     0x55de2a85cfc0+200: [%56.2], env=e0.3
  void                    Deopt              !v    %59.0, CallTarget@0x55de2b85f8f0[Call#2], %45.0   !
BB13   <- [12, 64]
  lgl$-           %13.0 = Phi                      %64.4:BB64, %12.1:BB12
  lgl$-           %13.1 = %13.0
  lgl$#-          %13.2 = CheckTrueFalse     e     %13.1
  void                    Branch                   %13.2 -> BB44 (if true) | BB14 (if false)
BB62   <- [58]
  val?+           %62.0 = CastType           d     dn %58.1   <(int|str)+>
  val+            %62.1 = CallSafeBuiltin    wed   match(%62.0, "as.double", 0L, nil)    <int->
  lgl$#-          %62.2 = IsType                   %62.1 isA int-
  void                    Branch                   %62.2 -> BB64 (if true) | BB65 (if false)
BB63   <- [58]
  prom-           %63.0 = MkArg                    %58.1, .getGeneric[0x55de28a6e710]_p9 (!refl), e0.3
  val?~           %63.1 = CastType                 up %63.0
  env             e63.2 = (MkEnv)            l     x=%63.1, table="as.double", parent=R_BaseNamespace, context 0
  env             e63.3 = MaterializeEnv           , e63.2   <@?>
  prom-           %63.4 = MkArg                    %58.1, .getGeneric[0x55de28a6e710]_p10 (!refl), e63.3
  val?~           %63.5 = CastType                 up %63.4
  prom-           %63.6 = MkArg                    unboundValue, .getGeneric[0x55de28a6e710]_p8 (!refl), e63.3
  val?^           %63.7 = CastType                 up %63.6
  fs              %63.8 = FrameState         R     0x55de2a85cfc0+249: [%56.2], env=e0.3
  fs              %63.9 = FrameState         R     0x55de28b7c320+54: [], env=e63.3, next=%63.8
  env             e63.10 = (MkEnv)            l     x=%63.5, table=%63.7, nomatch=0L, incomparables(miss)=nil, parent=R_BaseNamespace, context -1
  fs              %63.11 = FrameState         R     0x55de28d63d40+9: [%58.1], env=e63.10, next=%63.9
  void                    Deopt              !v    %63.11, Typecheck@0x55de28db6cb0[Type#0], %58.1   !
BB44   <- [13]
  void                    StVar              lW    f, "as.numeric", e0.3
  goto BB15
BB14   <- [13]
  void                    Nop                !     
  goto BB15
BB64   <- [62]
  int-            %64.0 = CastType           d     dn %62.1
  lgl-            %64.1 = Gt                 wed   %64.0, 0L, elided   <lgl->
  lgl$-           %64.2 = AsLogical                %64.1
  lgl$-           %64.3 = LAnd                     %56.2, %64.2
  lgl$-           %64.4 = %64.3
  goto BB13
BB65   <- [62]
  prom-           %65.0 = MkArg                    %62.0, .getGeneric[0x55de28a6e710]_p9 (!refl), e0.3
  val?~           %65.1 = CastType                 up %65.0
  env             e65.2 = (MkEnv)            l     x=%65.1, table="as.double", parent=R_BaseNamespace, context 0
  env             e65.3 = MaterializeEnv           , e65.2   <@?>
  prom-           %65.4 = MkArg                    "as.double", .getGeneric[0x55de28a6e710]_p8 (!refl), e65.3
  val?~           %65.5 = CastType                 up %65.4
  prom-           %65.6 = MkArg                    %62.0, .getGeneric[0x55de28a6e710]_p10 (!refl), e65.3
  val?~           %65.7 = CastType                 up %65.6
  fs              %65.8 = FrameState         R     0x55de2a85cfc0+249: [%56.2], env=e0.3
  fs              %65.9 = FrameState         R     0x55de28b7c320+54: [], env=e65.3, next=%65.8
  env             e65.10 = (MkEnv)            l     incomparables(miss)=nil, nomatch=0L, table=%65.5, x=%65.7, parent=R_BaseNamespace, context -1
  fs              %65.11 = FrameState         R     0x55de28d63d40+69: [%62.1], env=e65.10, next=%65.9
  void                    Deopt              !v    %65.11, Typecheck@0x55de29bae688[Type#2], %62.1   !
BB15   <- [44, 14]
  val?^ | miss    %15.0 = LdVar              eR    is.character, e0.3
  lgl$#-          %15.1 = Identical                <blt is.character>, %15.0   <true>
  void                    Branch                   %15.1 -> BB66 (if true) | BB67 (if false)
BB66   <- [15]
  val?^ | miss    %66.0 = LdVar              eR    f, e0.3
  val?            %66.1 = Force!<wrapped>    !v    %66.0, e0.3   <str$->
  lgl$#-          %66.2 = CallSafeBuiltin    wed   is.character(%66.1)    <lgl$->
  void                    Branch                   %66.2 -> BB41 (if true) | BB20 (if false)
BB67   <- [15]
  fs              %67.0 = FrameState         R     0x55de2a85cfc0+282: [], env=e0.3
  void                    Deopt              !v    %67.0, DeadBranchReached@0x55de2b85f8f0[Test#1], %15.1   !
BB41   <- [66]
  val?^ | miss    %41.0 = LdVar              eR    nzchar, e0.3
  lgl$#-          %41.1 = Identical                <blt nzchar>, %41.0   <true>
  void                    Branch                   %41.1 -> BB68 (if true) | BB69 (if false)
BB20   <- [66]
  void                    Nop                !     
  lgl$#-          %20.1 = %66.2
  goto BB21
BB68   <- [41]
  val?^ | miss    %68.0 = LdVar              eR    f, e0.3
  val?            %68.1 = Force!<wrapped>    !v    %68.0, e0.3   <str$->
  val?            %68.2 = CallBuiltin        !v    nzchar(%68.1) e0.3   <lgl$->
  lgl$#-          %68.3 = IsType                   %68.2 isA lgl$-
  void                    Branch                   %68.3 -> BB70 (if true) | BB71 (if false)
BB69   <- [41]
  fs              %69.0 = FrameState         R     0x55de2a85cfc0+373: [%66.2], env=e0.3
  void                    Deopt              !v    %69.0, DeadBranchReached@0x55de2b85f8f0[Test#2], %41.1   !
BB21   <- [20, 70]
  lgl$-           %21.0 = Phi                      %70.4:BB70, %20.1:BB20
  lgl$-           %21.1 = %21.0
  lgl$#-          %21.2 = CheckTrueFalse     e     %21.1
  void                    Branch                   %21.2 -> BB40 (if true) | BB22 (if false)
BB70   <- [68]
  lgl$-           %70.0 = CastType           d     dn %68.2
  lgl$-           %70.1 = Not                d     %70.0, elided
  lgl$-           %70.2 = AsLogical                %70.1
  lgl$-           %70.3 = LAnd                     %66.2, %70.2
  lgl$-           %70.4 = %70.3
  goto BB21
BB71   <- [68]
  fs              %71.0 = FrameState         R     0x55de2a85cfc0+476: [%66.2, %68.2], env=e0.3
  void                    Deopt              !v    %71.0, Typecheck@0x55de2b85f8f0[Type#16], %68.2   !
BB40   <- [21]
  (cls|spec|blt)  %40.0 = LdFun              !v    message, e0.3
  val?            %40.1 = Call               !v    %40.0("Empty function name in .getGeneric") e0.3
  (cls|spec|blt)  %40.2 = LdFun              !v    dput, e0.3
  prom-           %40.3 = MkArg                    unboundValue, .getGeneric[0x55de28a6e710]_p11, e0.3
  val?            %40.4 = Call               !v    %40.2(%40.3) e0.3
  goto BB23
BB22   <- [21]
  void                    Nop                !     
  goto BB23
BB23   <- [22, 40]
  val?^ | miss    %23.0 = LdVar              eR    .Call, e0.3
  lgl$#-          %23.1 = Identical                <blt .Call>, %23.0   <true>
  void                    Branch                   %23.1 -> BB72 (if true) | BB73 (if false)
BB72   <- [23]
  val?^ | miss    %72.0 = LdVar              eR    C_R_getGeneric, e0.3
  val?            %72.1 = Force!<value>      !v    %72.0, e0.3   <vec>
  val?^ | miss    %72.2 = LdVar              eR    f, e0.3
  val?            %72.3 = Force!<wrapped>    !v    %72.2, e0.3   <str$->
  val?^ | miss    %72.4 = LdVar              eR    as.environment, e0.3
  lgl$#-          %72.5 = Identical                <blt as.environment>, %72.4   <true>
  void                    Branch                   %72.5 -> BB74 (if true) | BB75 (if false)
BB73   <- [23]
  fs              %73.0 = FrameState         R     0x55de2a85cfc0+561: [], env=e0.3
  void                    Deopt              !v    %73.0, DeadBranchReached@0x55de2b85f8f0[Test#3], %23.1   !
BB74   <- [72]
  val?^ | miss    %74.0 = LdVar              eR    where, e0.3
  val?            %74.1 = Force!<lazy>       !v    %74.0, e0.3   <env->
  val?            %74.2 = CallBuiltin        !v    as.environment(%74.1) e0.3   <env->
  val?^ | miss    %74.3 = LdVar              eR    package, e0.3
  val?            %74.4 = Force!<lazy>       !v    %74.3, e0.3   <str$->
  val?            %74.5 = CallBuiltin        !v    .Call(%72.1, %72.3, false, %74.2, %74.4) e0.3   <(nil|cls)>
  lgl$-           %74.6 = Is                       %74.5, NULL
  void                    StVar              lW    value, %74.5, e0.3
  val             %74.8 = ChkMissing         e     %74.5
  lgl$-           %74.9 = Not                d     %74.6, elided
  lgl$-           %74.10 = AsLogical                %74.9
  lgl$#-          %74.11 = Identical                %74.10, false
  void                    Branch                   %74.11 -> BB39 (if true) | BB30 (if false)
BB75   <- [72]
  fs              %75.0 = FrameState         R     0x55de2a85cfc0+664: [<blt .Call>, %72.1, %72.3], env=e0.3
  void                    Deopt              !v    %75.0, DeadBranchReached@0x55de2b85f8f0[Test#4], %72.5   !
BB39   <- [74]
  void                    Nop                !     
  lgl$-           %39.1 = %74.10
  goto BB33
BB30   <- [74]
  val?^ | miss    %30.0 = LdVar              eR    .GlobalEnv, e0.3
  lgl$#-          %30.1 = IsType                   %30.0 isA val?~- | miss
  void                    Branch                   %30.1 -> BB76 (if true) | BB77 (if false)
BB33   <- [39, 80]
  lgl$-           %33.0 = Phi                      %80.7:BB80, %39.1:BB39
  lgl$-           %33.1 = %33.0
  lgl$-           %33.2 = AsLogical                %33.1
  lgl$#-          %33.3 = Identical                %33.2, false
  void                    Branch                   %33.3 -> BB38 (if true) | BB34 (if false)
BB76   <- [30]
  val?~- | miss   %76.0 = CastType           d     dn %30.0
  val?-           %76.1 = Force!<value>            %76.0,    <env->
  lgl$#-          %76.2 = IsType                   %76.1 isA val+   <true>
  void                    Branch                   %76.2 -> BB78 (if true) | BB79 (if false)
BB77   <- [30]
  void                    Nop                !     
  val?^ | miss    %77.1 = %30.0
  dr              %77.2 = Typecheck@0x55de2b85f8f0[Type#31]
  goto BB28
BB38   <- [33]
  void                    Nop                !     
  lgl$-           %38.1 = %33.2
  goto BB35
BB34   <- [33]
  (cls|spec|blt)  %34.0 = LdFun              !v    identical, e0.3
  prom-           %34.1 = MkArg                    unboundValue, .getGeneric[0x55de28a6e710]_p12, e0.3
  prom-           %34.2 = MkArg                    unboundValue, .getGeneric[0x55de28a6e710]_p13, e0.3
  val?            %34.3 = Call               !v    %34.0(%34.1, %34.2) e0.3   <val?_>
  lgl$-           %34.4 = AsLogical          e     %34.3
  lgl$-           %34.5 = LAnd                     %33.2, %34.4
  lgl$-           %34.6 = %34.5
  goto BB35
BB78   <- [76]
  val?^ | miss    %78.0 = LdVar              eR    f, e0.3
  val?            %78.1 = Force!<wrapped>    !v    %78.0, e0.3   <str$->
  lgl$#-          %78.2 = IsType                   %78.1 isA val?-
  void                    Branch                   %78.2 -> BB80 (if true) | BB81 (if false)
BB79   <- [76]
  void                    Nop                !     
  lgl$#-          %79.1 = %76.2
  dr              %79.2 = DeadBranchReached@0x55de2b85f8f0[Test#5]
  goto BB28
BB28   <- [77, 79]
  val?^ | miss    %28.0 = Phi                      %77.1:BB77, %79.1:BB79
  val?^ | miss    %28.1 = %28.0
  dr              %28.2 = Phi                      %77.2:BB77, %79.2:BB79
  dr              %28.3 = %28.2
  fs              %28.4 = FrameState         R     0x55de2a85cfc0+816: [], env=e0.3
  void                    Deopt              !v    %28.4, %28.3, %28.1   !
BB35   <- [38, 34]
  lgl$-           %35.0 = Phi                      %34.6:BB34, %38.1:BB38
  lgl$-           %35.1 = %35.0
  lgl$#-          %35.2 = CheckTrueFalse     e     %35.1
  void                    Branch                   %35.2 -> BB37 (if true) | BB36 (if false)
BB80   <- [78]
  val?-           %80.0 = CastType           d     dn %78.1   <str$->
  val?            %80.1 = Extract2_1D        wed   %76.1, %80.0, elided   <nil->
  lgl$-           %80.2 = Is                       %80.1, NULL
  void                    StVar              lW    vv, %80.1, e0.3
  lgl$-           %80.4 = Not                d     %80.2, elided
  lgl$-           %80.5 = AsLogical                %80.4
  lgl$-           %80.6 = LAnd                     %74.10, %80.5
  lgl$-           %80.7 = %80.6
  goto BB33
BB81   <- [78]
  fs              %81.0 = FrameState         R     0x55de2a85cfc0+897: [%74.10, %76.1, %78.1], env=e0.3
  void                    Deopt              !v    %81.0, Typecheck@0x55de2b85f8f0[Type#33], %78.1   !
BB37   <- [35]
  (cls|spec|blt)  %37.0 = LdFun              !v    .cacheGeneric, e0.3
  prom-           %37.1 = MkArg                    unboundValue, .getGeneric[0x55de28a6e710]_p14, e0.3
  prom-           %37.2 = MkArg                    unboundValue, .getGeneric[0x55de28a6e710]_p15, e0.3
  val?            %37.3 = Call               !v    %37.0(%37.1, %37.2) e0.3
  goto BB8
BB36   <- [35]
  void                    Nop                !     
  goto BB8
Prom 0:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    f, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    package, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 3:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    name, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 4:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 5:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    pkg, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 6:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    .genericTable, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 8:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    table, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <val?->
  void                    Return             l     %0.3
Prom 9:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    f, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 10:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    x, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <(int|str)+>
  void                    Return             l     %0.3
Prom 11:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     sys.calls, e0.0
  val?            %0.2  = Call               !     %0.1() e0.0   <val?_>
  void                    Return             l     %0.2
Prom 12:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    vv, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 13:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    value, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 14:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    f, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 15:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    value, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3

│ .getGeneric[0x55de28a6e710]                                                  │
└──────────────────────────────────────────────────────────────────────────────┘
