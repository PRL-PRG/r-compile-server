
┌──────────────────────────────────────────────────────────────────────────────┐
│ .resetInheritedMethods[0x55de2cbc61e0]                                       │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch                                      │
│ Properties:                                                                  │
├────── Final PIR Version
.resetInheritedMethods[0x55de2cbc61e0]
BB0
  val?^           %0.0  = LdArg                    1
  val?^           %0.1  = LdArg                    0
  val?^ | miss    %0.2  = LdVar              eR    character, <env 0x55de28b56378>
  lgl$#-          %0.3  = Identical                %0.2, function(length=0L) <(rir::DispatchTable*)0x55|...
  void                    Branch                   %0.3 -> BB51 (if true) | BB52 (if false)
BB51   <- [0]
  str-            %51.0 = CallSafeBuiltin    wed   vector("character", 0L)    <str->
  val?^ | miss    %51.1 = LdVar              eR    names, <env 0x55de28b56378>
  lgl$#-          %51.2 = Identical                <blt names>, %51.1   <true>
  void                    Branch                   %51.2 -> BB53 (if true) | BB54 (if false)
BB52   <- [0]
  env             e52.0 = (MkEnv)            l     fenv=%0.1, mtable=%0.0, parent=<env 0x55de28b56378>, context 1
  fs              %52.1 = FrameState         R     0x55de28a2d8a0+0: [], env=e52.0
  void                    Deopt              !v    %52.1, CallTarget@0x55de2c71d2e8[Call#0], %0.2
BB53   <- [51]
  env             e53.0 = MkEnv              l     fenv=%0.1, mtable=%0.0, allObjects=%51.0, parent=<env 0x55de28b56378>, context 1
  val?            %53.1 = Force!<lazy>       !v    %0.0, e53.0   <env->
  lgl$#-          %53.2 = IsType                   %53.1 isA val?-
  void                    Branch                   %53.2 -> BB55 (if true) | BB56 (if false)
BB54   <- [51]
  env             e54.0 = (MkEnv)            l     fenv=%0.1, mtable=%0.0, parent=<env 0x55de28b56378>, context 1
  fs              %54.1 = FrameState         R     0x55de28a2d8a0+27: [], env=e54.0
  env             e54.2 = (MkEnv)            l     length=0L, parent=R_BaseNamespace, context 0
  fs              %54.3 = FrameState         R     0x55de2a3e5fa0+33: [%51.0], env=e54.2, next=%54.1
  void                    Deopt              !v    %54.3, DeadBranchReached@0x55de2c71d2e8[Test#0], %51.2
BB55   <- [53]
  val?-           %55.0 = CastType           d     dn %53.1   <env->
  val+            %55.1 = CallSafeBuiltin    wed   names(%55.0)    <str->
  void                    StVar              lW    direct, %55.1, e53.0
  (cls|spec|blt)  %55.3 = LdFun              !v    $, <0x55de2854ec10>, e53.0
  prom-           %55.4 = MkArg                    unboundValue, .resetInheritedMethods[0x55de2cbc61e0]_p0, e53.0
  prom-           %55.5 = MkArg                    unboundValue, .resetInheritedMethods[0x55de2cbc61e0]_p1, e53.0
  val?            %55.6 = Call               !v    %55.3(%55.4, %55.5) e53.0   <env->
  lgl$-           %55.7 = Is                       %55.6, NULL
  void                    StVar              lW    allTable, %55.6, e53.0
  lgl$-           %55.9 = Not                d     %55.7, elided
  lgl$#-          %55.10 = CheckTrueFalse     e     %55.9
  void                    Branch                   %55.10 -> BB47 (if true) | BB9 (if false)
BB56   <- [53]
  fs              %56.0 = FrameState         R     0x55de28a2d8a0+110: [<blt names>, %53.1], env=e53.0
  void                    Deopt              !v    %56.0, Typecheck@0x55de2c71d2e8[Type#2], %53.1   !
BB47   <- [55]
  val?^ | miss    %47.0 = LdVar              eR    names, e53.0
  lgl$#-          %47.1 = Identical                <blt names>, %47.0   <true>
  void                    Branch                   %47.1 -> BB57 (if true) | BB58 (if false)
BB9   <- [55]
  val?^ | miss    %9.0  = LdVar              eR    new.env, e53.0
  lgl$#-          %9.1  = Identical                %9.0, function(hash=TRUE, parent=parent.frame(), siz|...
  void                    Branch                   %9.1 -> BB59 (if true) | BB60 (if false)
BB57   <- [47]
  val             %57.0 = ChkMissing         e     %55.6
  lgl$#-          %57.1 = IsType                   %55.6 isA val?-
  void                    Branch                   %57.1 -> BB61 (if true) | BB62 (if false)
BB58   <- [47]
  void                    Nop                !     
  lgl$#-          %58.1 = %47.1
  dr              %58.2 = DeadBranchReached@0x55de2c71d2e8[Test#1]
  goto BB7
BB59   <- [9]
  val?^ | miss    %59.0 = LdVar              eR    fenv, e53.0
  val?            %59.1 = Force!<wrapped>    !v    %59.0, e53.0   <env->
  lgl$#-          %59.2 = IsType                   %59.1 isA val?+
  void                    Branch                   %59.2 -> BB63 (if true) | BB64 (if false)
BB60   <- [9]
  void                    Nop                !     
  val?^ | miss    %60.1 = %9.0
  dr              %60.2 = CallTarget@0x55de2c71d2e8[Call#3]
  goto BB7
BB61   <- [57]
  val?-           %61.0 = CastType           d     dn %55.6   <env->
  val+            %61.1 = CallSafeBuiltin    wed   names(%61.0)    <str->
  void                    StVar              lW    allObjects, %61.1, e53.0
  val?^ | miss    %61.3 = LdVar              eR    remove, e53.0
  lgl$#-          %61.4 = Identical                %61.3, function(..., list=character(), pos=-(1), envi|...
  void                    Branch                   %61.4 -> BB65 (if true) | BB66 (if false)
BB62   <- [57]
  void                    Nop                !     
  val?            %62.1 = %55.6
  dr              %62.2 = Typecheck@0x55de2c71d2e8[Type#6]
  goto BB7
BB7   <- [58, 60, 62]
  val?^ | miss    %7.0  = Phi                      %58.1:BB58, %60.1:BB60, %62.1:BB62
  val?^ | miss    %7.1  = %7.0
  dr              %7.2  = Phi                      %58.2:BB58, %60.2:BB60, %62.2:BB62
  dr              %7.3  = %7.2
  fs              %7.4  = FrameState         R     0x55de28a2d8a0+199: [%55.6], env=e53.0
  void                    Deopt              !v    %7.4, %7.3, %7.1   !
BB63   <- [59]
  val?+           %63.0 = CastType           d     dn %59.1   <env+>
  val+            %63.1 = CallSafeBuiltin    wed   new.env(true, %63.0, 29L)    <env->
  void                    StVar              lW    allTable, %63.1, e53.0
  val?^ | miss    %63.3 = LdVar              eR    assign, e53.0
  lgl$#-          %63.4 = Identical                %63.3, function(x, value, pos=-(1), envir=as.environm|...
  void                    Branch                   %63.4 -> BB71 (if true) | BB72 (if false)
BB64   <- [59]
  prom-           %64.0 = MkArg                    unboundValue, .resetInheritedMethods[0x55de2cbc61e0]_p2, e53.0
  val?^           %64.1 = CastType                 up %64.0
  fs              %64.2 = FrameState         R     0x55de28a2d8a0+248: [], env=e53.0
  env             e64.3 = (MkEnv)            l     size(miss)=29L, parent=%64.1, hash=true, parent=R_BaseNamespace, context 0
  fs              %64.4 = FrameState         R     0x55de2abd5f50+23: [true], env=e64.3, next=%64.2
  fs              %64.5 = FrameState         R     0x55de2b0e1c80+5(pr): [%59.1], env=e53.0, next=%64.4
  void                    Deopt              !v    %64.5, Typecheck@0x55de2acaf210[Type#2], %59.1   !
BB65   <- [61]
  prom-           %65.0 = MkArg                    unboundValue, .resetInheritedMethods[0x55de2cbc61e0]_p12, e53.0
  prom-           %65.1 = MkArg                    unboundValue, .resetInheritedMethods[0x55de2cbc61e0]_p15 (!refl), e53.0
  val?            %65.2 = StaticCall         !v    remove[0x55de2ec1ef80](missingArg, %65.0, missingArg, %65.1) { 1n 3n } e53.0
  goto BB14
BB66   <- [61]
  fs              %66.0 = FrameState         R     0x55de28a2d8a0+427: [], env=e53.0
  void                    Deopt              !v    %66.0, CallTarget@0x55de2c71d2e8[Call#6], %61.3   !
BB71   <- [63]
  prom-           %71.0 = MkArg                    unboundValue, .resetInheritedMethods[0x55de2cbc61e0]_p3 (!refl), e53.0
  prom-           %71.1 = MkArg                    unboundValue, .resetInheritedMethods[0x55de2cbc61e0]_p4, e53.0
  val?            %71.2 = StaticCall         !v    assign[0x55de2a9f84e0](".AllMTable", %71.0, missingArg, %71.1) { 0 1 3n } e53.0
  goto BB14
BB72   <- [63]
  fs              %72.0 = FrameState         R     0x55de28a2d8a0+262: [], env=e53.0
  void                    Deopt              !v    %72.0, CallTarget@0x55de2c71d2e8[Call#4], %63.3   !
BB14   <- [65, 71]
  val?^ | miss    %14.0 = LdVar              eR    anyNA, e53.0
  lgl$#-          %14.1 = Identical                <blt anyNA>, %14.0   <true>
  void                    Branch                   %14.1 -> BB67 (if true) | BB68 (if false)
BB67   <- [14]
  val?^ | miss    %67.0 = LdVar              eR    match, e53.0
  lgl$#-          %67.1 = Identical                %67.0, function(x, table, nomatch=NA, incomparables=N|...
  void                    Branch                   %67.1 -> BB69 (if true) | BB70 (if false)
BB68   <- [14]
  void                    Nop                !     
  lgl$#-          %68.1 = %14.1
  dr              %68.2 = DeadBranchReached@0x55de2c71d2e8[Test#2]
  goto BB15
BB69   <- [67]
  val?^ | miss    %69.0 = LdVar              eR    direct, e53.0
  lgl$#-          %69.1 = IsType                   %69.0 isA val?~- | miss
  void                    Branch                   %69.1 -> BB73 (if true) | BB74 (if false)
BB70   <- [67]
  void                    Nop                !     
  val?^ | miss    %70.1 = %67.0
  dr              %70.2 = CallTarget@0x55de2c71d2e8[Call#10]
  goto BB15
BB15   <- [68, 70, 74]
  val?^ | miss    %15.0 = Phi                      %68.1:BB68, %70.1:BB70, %74.1:BB74
  val?^ | miss    %15.1 = %15.0
  dr              %15.2 = Phi                      %68.2:BB68, %70.2:BB70, %74.2:BB74
  dr              %15.3 = %15.2
  fs              %15.4 = FrameState         R     0x55de28a2d8a0+482: [], env=e53.0
  void                    Deopt              !v    %15.4, %15.3, %15.1   !
BB73   <- [69]
  val?~- | miss   %73.0 = CastType           d     dn %69.0
  val?-           %73.1 = Force!<value>            %73.0,    <str->
  val?^ | miss    %73.2 = LdVar              eR    allObjects, e53.0
  val?            %73.3 = Force!<value>      !v    %73.2, e53.0   <str->
  lgl$#-          %73.4 = IsType                   %73.3 isA val?-
  void                    Branch                   %73.4 -> BB75 (if true) | BB76 (if false)
BB74   <- [69]
  void                    Nop                !     
  val?^ | miss    %74.1 = %69.0
  dr              %74.2 = Typecheck@0x55de2c71d2e8[Type#21]
  goto BB15
BB75   <- [73]
  val?-           %75.0 = CastType           d     dn %73.3   <str->
  val+            %75.1 = CallSafeBuiltin    wed   match(%73.1, %75.0, NA, nil)    <int->
  lgl$#-          %75.2 = IsType                   %75.1 isA int-
  void                    Branch                   %75.2 -> BB77 (if true) | BB78 (if false)
BB76   <- [73]
  fs              %76.0 = FrameState         R     0x55de28a2d8a0+579: [<blt anyNA>], env=e53.0
  prom-           %76.1 = MkArg                    unboundValue, .resetInheritedMethods[0x55de2cbc61e0]_p6, e53.0
  val?^           %76.2 = CastType                 up %76.1
  prom-           %76.3 = MkArg                    %73.1, .resetInheritedMethods[0x55de2cbc61e0]_p5 (!refl), e53.0
  val?~           %76.4 = CastType                 up %76.3
  env             e76.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%76.2, x=%76.4, parent=R_BaseNamespace, context 0
  fs              %76.6 = FrameState         R     0x55de28d63d40+23: [%73.1], env=e76.5, next=%76.0
  fs              %76.7 = FrameState         R     0x55de2928c9d0+5(pr): [%73.3], env=e53.0, next=%76.6
  void                    Deopt              !v    %76.7, Typecheck@0x55de28db6cb0[Type#1], %73.3   !
BB77   <- [75]
  int-            %77.0 = CastType           d     dn %75.1
  val+            %77.1 = CallSafeBuiltin    wed   anyNA(%77.0)    <lgl$->
  lgl$#-          %77.2 = IsType                   %77.1 isA lgl$-
  void                    Branch                   %77.2 -> BB79 (if true) | BB80 (if false)
BB78   <- [75]
  fs              %78.0 = FrameState         R     0x55de28a2d8a0+579: [<blt anyNA>], env=e53.0
  prom-           %78.1 = MkArg                    %75.0, .resetInheritedMethods[0x55de2cbc61e0]_p6 (!refl), e53.0
  val?~           %78.2 = CastType                 up %78.1
  prom-           %78.3 = MkArg                    %73.1, .resetInheritedMethods[0x55de2cbc61e0]_p5 (!refl), e53.0
  val?~           %78.4 = CastType                 up %78.3
  env             e78.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%78.2, x=%78.4, parent=R_BaseNamespace, context 0
  fs              %78.6 = FrameState         R     0x55de28d63d40+69: [%75.1], env=e78.5, next=%78.0
  void                    Deopt              !v    %78.6, Typecheck@0x55de2c71d2e8[Type#23], %75.1   !
BB79   <- [77]
  lgl$-           %79.0 = CastType           d     dn %77.1
  lgl$#-          %79.1 = CheckTrueFalse     e     %79.0
  void                    Branch                   %79.1 -> BB46 (if true) | BB23 (if false)
BB80   <- [77]
  void                    Nop                !     
  val+            %80.1 = %77.1
  dr              %80.2 = Typecheck@0x55de2c71d2e8[Type#24]
  goto BB21
BB46   <- [79]
  val?^ | miss    %46.0 = LdVar              eR    list2env, e53.0
  lgl$#-          %46.1 = Identical                %46.0, function(x, envir=NULL, parent=parent.frame(),|...
  void                    Branch                   %46.1 -> BB83 (if true) | BB84 (if false)
BB23   <- [79]
  void                    Nop                !     
  goto BB24
BB21   <- [80, 84]
  val?^ | miss    %21.0 = Phi                      %80.1:BB80, %84.1:BB84
  val?^ | miss    %21.1 = %21.0
  dr              %21.2 = Phi                      %80.2:BB80, %84.2:BB84
  dr              %21.3 = %21.2
  fs              %21.4 = FrameState         R     0x55de28a2d8a0+601: [%77.1], env=e53.0
  void                    Deopt              !v    %21.4, %21.3, %21.1   !
BB83   <- [46]
  prom-           %83.0 = MkArg                    unboundValue, .resetInheritedMethods[0x55de2cbc61e0]_p9, e53.0
  prom-           %83.1 = MkArg                    unboundValue, .resetInheritedMethods[0x55de2cbc61e0]_p11, e53.0
  val?            %83.2 = StaticCall         !v    list2env[0x55de2c214840](%83.0, %83.1) e53.0
  goto BB24
BB84   <- [46]
  void                    Nop                !     
  val?^ | miss    %84.1 = %46.0
  dr              %84.2 = CallTarget@0x55de2c71d2e8[Call#11]
  goto BB21
BB24   <- [23, 83]
  val?^ | miss    %24.0 = LdVar              eR    direct, e53.0
  lgl$#-          %24.1 = IsType                   %24.0 isA val?~- | miss
  void                    Branch                   %24.1 -> BB81 (if true) | BB82 (if false)
BB81   <- [24]
  val?~- | miss   %81.0 = CastType           d     dn %24.0
  val?-           %81.1 = Force!<value>            %81.0,    <str->
  int$-           %81.2 = Length                   %81.1
  int$-           %81.3 = Inc                      0L
  lgl$-           %81.4 = Lt                 d     %81.2, %81.3, elided   <false>
  lgl$#-          %81.5 = Identical                %81.4, true
  void                    Branch                   %81.5 -> BB86 (if true) | BB85 (if false)
BB82   <- [24]
  void                    Nop                !     
  val?^ | miss    %82.1 = %24.0
  dr              %82.2 = Typecheck@0x55de2c71d2e8[Type#28]
  goto BB25
BB86   <- [81]
  void                    Nop                !     
  lgl$#-          %86.1 = %81.5
  dr              %86.2 = DeadBranchReached@0x55de2c71d2e8[Test#3]
  goto BB25
BB85   <- [81]
  val?            %85.0 = Extract2_1D        wed   %81.1, %81.3, elided
  void                    StVar              lW    d, %85.0, e53.0
  val?^ | miss    %85.2 = LdVar              eR    allTable, e53.0
  lgl$#-          %85.3 = IsType                   %85.2 isA val?~- | miss
  void                    Branch                   %85.3 -> BB87 (if true) | BB88 (if false)
BB25   <- [82, 86]
  val?^ | miss    %25.0 = Phi                      %82.1:BB82, %86.1:BB86
  val?^ | miss    %25.1 = %25.0
  dr              %25.2 = Phi                      %82.2:BB82, %86.2:BB86
  dr              %25.3 = %25.2
  fs              %25.4 = FrameState         R     0x55de28a2d8a0+655: [], env=e53.0
  void                    Deopt              !v    %25.4, %25.3, %25.1   !
BB87   <- [85]
  val?~- | miss   %87.0 = CastType           d     dn %85.2
  val?-           %87.1 = Force!<value>            %87.0,    <env->
  lgl$#-          %87.2 = IsType                   %87.1 isA val+   <true>
  void                    Branch                   %87.2 -> BB89 (if true) | BB90 (if false)
BB88   <- [85]
  void                    Nop                !     
  val?^ | miss    %88.1 = %85.2
  dr              %88.2 = Typecheck@0x55de2c71d2e8[Type#29]
  goto BB27
BB89   <- [87]
  val             %89.0 = ChkMissing         e     %85.0
  lgl$#-          %89.1 = IsType                   %89.0 isA val?~- | miss
  void                    Branch                   %89.1 -> BB91 (if true) | BB92 (if false)
BB90   <- [87]
  void                    Nop                !     
  lgl$#-          %90.1 = %87.2
  dr              %90.2 = DeadBranchReached@0x55de2c71d2e8[Test#4]
  goto BB27
BB27   <- [88, 90, 92]
  val?^ | miss    %27.0 = Phi                      %88.1:BB88, %90.1:BB90, %92.1:BB92
  val?^ | miss    %27.1 = %27.0
  dr              %27.2 = Phi                      %88.2:BB88, %90.2:BB90, %92.2:BB92
  dr              %27.3 = %27.2
  fs              %27.4 = FrameState         R     0x55de28a2d8a0+709: [%81.1, %81.2, %81.3], env=e53.0
  void                    Deopt              !v    %27.4, %27.3, %27.1   !
BB91   <- [89]
  val-            %91.0 = CastType           d     dn %89.0   <str$->
  val?            %91.1 = Extract2_1D        wed   %87.1, %91.0, elided   <cls>
  void                    StVar              lW    m, %91.1, e53.0
  val?^ | miss    %91.3 = LdVar              eR    is, e53.0
  lgl$#-          %91.4 = Identical                %91.3, function(object, class2) <(rir::DispatchTable*|...
  void                    Branch                   %91.4 -> BB93 (if true) | BB94 (if false)
BB92   <- [89]
  void                    Nop                !     
  val             %92.1 = %89.0
  dr              %92.2 = Typecheck@0x55de2c71d2e8[Type#31]
  goto BB27
BB93   <- [91]
  prom-           %93.0 = MkArg                    unboundValue, .resetInheritedMethods[0x55de2cbc61e0]_p7 (!refl), e53.0
  val?            %93.1 = Call               !v    function(object, class2) <(rir::DispatchTable*|...(%93.0, "MethodWithNext") e53.0   <lgl$->
  lgl$#-          %93.2 = IsType                   %93.1 isA lgl$-
  void                    Branch                   %93.2 -> BB95 (if true) | BB96 (if false)
BB94   <- [91]
  fs              %94.0 = FrameState         R     0x55de28a2d8a0+784: [%81.1, %81.2, %81.3], env=e53.0
  void                    Deopt              !v    %94.0, CallTarget@0x55de2c71d2e8[Call#13], %91.3   !
BB95   <- [93]
  lgl$-           %95.0 = CastType           d     dn %93.1
  lgl$#-          %95.1 = CheckTrueFalse     e     %95.0
  void                    Branch                   %95.1 -> BB45 (if true) | BB33 (if false)
BB96   <- [93]
  fs              %96.0 = FrameState         R     0x55de28a2d8a0+821: [%81.1, %81.2, %81.3, %93.1], env=e53.0
  void                    Deopt              !v    %96.0, Typecheck@0x55de2c71d2e8[Type#34], %93.1   !
BB45   <- [95]
  (cls|spec|blt)  %45.0 = LdFun              !v    as, e53.0
  fs              %45.1 = FrameState         R     0x55de28a2d8a0+842: [%81.1, %81.2, %81.3, %45.0], env=e53.0
  void                    Deopt              !v    %45.1, DeadCall@0x55de2c71d2e8[Call#14], %45.0   !
BB33   <- [95]
  void                    Nop                !     
  int$-           %33.1 = %81.3
  goto BB34
BB34   <- [33, 42]
  int$-           %34.0 = Phi                      %33.1:BB33, %42.1:BB42
  int$-           %34.1 = %34.0
  int$-           %34.2 = Inc                      %34.1
  lgl$-           %34.3 = Lt                 d     %81.2, %34.2, elided
  lgl$#-          %34.4 = Identical                %34.3, true
  void                    Branch                   %34.4 -> BB44 (if true) | BB35 (if false)
BB44   <- [34]
  void                    Visible            v     
  void                    Return             l     nil
BB35   <- [34]
  val?            %35.0 = Extract2_1D        wed   %81.1, %34.2, elided
  void                    StVar              lW    d, %35.0, e53.0
  val?^ | miss    %35.2 = LdVar              eR    allTable, e53.0
  lgl$#-          %35.3 = IsType                   %35.2 isA val?~- | miss
  void                    Branch                   %35.3 -> BB97 (if true) | BB98 (if false)
BB97   <- [35]
  val?~- | miss   %97.0 = CastType           d     dn %35.2
  val?-           %97.1 = Force!<value>            %97.0,    <env->
  lgl$#-          %97.2 = IsType                   %97.1 isA val+   <true>
  void                    Branch                   %97.2 -> BB99 (if true) | BB100 (if false)
BB98   <- [35]
  void                    Nop                !     
  val?^ | miss    %98.1 = %35.2
  dr              %98.2 = Typecheck@0x55de2c71d2e8[Type#39]
  goto BB36
BB99   <- [97]
  val             %99.0 = ChkMissing         e     %35.0
  lgl$#-          %99.1 = IsType                   %99.0 isA val?~- | miss
  void                    Branch                   %99.1 -> BB101 (if true) | BB102 (if false)
BB100   <- [97]
  void                    Nop                !     
  lgl$#-          %100.1 = %97.2
  dr              %100.2 = DeadBranchReached@0x55de2c71d2e8[Test#5]
  goto BB36
BB36   <- [98, 100, 102]
  val?^ | miss    %36.0 = Phi                      %98.1:BB98, %100.1:BB100, %102.1:BB102
  val?^ | miss    %36.1 = %36.0
  dr              %36.2 = Phi                      %98.2:BB98, %100.2:BB100, %102.2:BB102
  dr              %36.3 = %36.2
  fs              %36.4 = FrameState         R     0x55de28a2d8a0+946: [%81.1, %81.2, %34.2], env=e53.0
  void                    Deopt              !v    %36.4, %36.3, %36.1   !
BB101   <- [99]
  val-            %101.0 = CastType           d     dn %99.0   <str$->
  val?            %101.1 = Extract2_1D        wed   %97.1, %101.0, elided   <val?>
  void                    StVar              lW    m, %101.1, e53.0
  val?^ | miss    %101.3 = LdVar              eR    is, e53.0
  lgl$#-          %101.4 = Identical                %101.3, function(object, class2) <(rir::DispatchTable*|...
  void                    Branch                   %101.4 -> BB103 (if true) | BB104 (if false)
BB102   <- [99]
  void                    Nop                !     
  val             %102.1 = %99.0
  dr              %102.2 = Typecheck@0x55de2c71d2e8[Type#41]
  goto BB36
BB103   <- [101]
  prom-           %103.0 = MkArg                    unboundValue, .resetInheritedMethods[0x55de2cbc61e0]_p8 (!refl), e53.0
  val?            %103.1 = Call               !v    function(object, class2) <(rir::DispatchTable*|...(%103.0, "MethodWithNext") e53.0   <lgl$->
  lgl$#-          %103.2 = IsType                   %103.1 isA lgl$-
  void                    Branch                   %103.2 -> BB105 (if true) | BB106 (if false)
BB104   <- [101]
  fs              %104.0 = FrameState         R     0x55de28a2d8a0+1021: [%81.1, %81.2, %34.2], env=e53.0
  void                    Deopt              !v    %104.0, CallTarget@0x55de2c71d2e8[Call#15], %101.3   !
BB105   <- [103]
  lgl$-           %105.0 = CastType           d     dn %103.1
  lgl$#-          %105.1 = CheckTrueFalse     e     %105.0
  void                    Branch                   %105.1 -> BB43 (if true) | BB42 (if false)
BB106   <- [103]
  fs              %106.0 = FrameState         R     0x55de28a2d8a0+1058: [%81.1, %81.2, %34.2, %103.1], env=e53.0
  void                    Deopt              !v    %106.0, Typecheck@0x55de2c71d2e8[Type#44], %103.1   !
BB43   <- [105]
  (cls|spec|blt)  %43.0 = LdFun              !v    as, e53.0
  fs              %43.1 = FrameState         R     0x55de28a2d8a0+1079: [%81.1, %81.2, %34.2, %43.0], env=e53.0
  void                    Deopt              !v    %43.1, DeadCall@0x55de2c71d2e8[Call#16], %43.0   !
BB42   <- [105]
  void                    Nop                !     
  int$-           %42.1 = %34.2
  goto BB34
Prom 0:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fenv, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    .AllMTable, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fenv, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 3:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    allTable, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 4:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fenv, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 5:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    direct, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 6:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    allObjects, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 7:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    m, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 8:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    m, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <val?>
  void                    Return             l     %0.3
Prom 9:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     as.list, <0x55de28679810>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .resetInheritedMethods[0x55de2cbc61e0]_p10, e0.0
  val?            %0.3  = NamedCall          !     %0.1(%0.2, all.names=true) e0.0   <vec+>
  void                    Return             l     %0.3
Prom 10:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    mtable, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 11:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    allTable, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 12:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     setdiff, <0x55de28a67350>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .resetInheritedMethods[0x55de2cbc61e0]_p13, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .resetInheritedMethods[0x55de2cbc61e0]_p14, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <str->
  void                    Return             l     %0.4
Prom 13:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    allObjects, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 14:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    direct, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 15:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    allTable, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <env->
  void                    Return             l     %0.3

│ .resetInheritedMethods[0x55de2cbc61e0]                                       │
└──────────────────────────────────────────────────────────────────────────────┘
