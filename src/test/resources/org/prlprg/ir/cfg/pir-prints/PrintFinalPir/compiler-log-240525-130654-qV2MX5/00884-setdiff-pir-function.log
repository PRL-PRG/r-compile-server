
┌──────────────────────────────────────────────────────────────────────────────┐
│ setdiff[0x55de2a650de0]                                                      │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;NonRefl0,NonRefl1,!Obj0,!Obj1        │
│ Properties:  ForceOrd: 0                                                     │
├────── Final PIR Version
setdiff[0x55de2a650de0]
BB0
  val?^           %0.0  = LdArg                    1
  val?^           %0.1  = LdArg                    0
  env             e0.2  = MkEnv              l     x=%0.1, y=%0.0, parent=R_BaseNamespace, context 1
  val+            %0.3  = Force!<lazy>       !vr   %0.1,    <str->
  lgl$#-          %0.4  = IsType                   %0.3 isA val?-
  void                    Branch                   %0.4 -> BB17 (if true) | BB18 (if false)
BB17   <- [0]
  val-            %17.0 = CastType           d     dn %0.3   <str->
  val             %17.1 = CallSafeBuiltin    wed   as.vector(%17.0, "any")    <str->
  void                    StVar              lW    x, %17.1, e0.2
  val+            %17.3 = Force!<lazy>       !vr   %0.0,    <str->
  lgl$#-          %17.4 = IsType                   %17.3 isA val?-
  void                    Branch                   %17.4 -> BB19 (if true) | BB20 (if false)
BB18   <- [0]
  prom-           %18.0 = MkArg                    unboundValue, setdiff[0x55de2a650de0]_p0 (!refl), e0.2
  val?^           %18.1 = CastType                 up %18.0
  fs              %18.2 = FrameState         R     0x55de29060420+32: [], env=e0.2
  env             e18.3 = (MkEnv)            l     mode(miss)="any", x=%18.1, parent=R_BaseNamespace, context 0
  fs              %18.4 = FrameState         R     0x55de2ae9f3a0+9: [], env=e18.3, next=%18.2
  fs              %18.5 = FrameState         R     0x55de2946e630+5(pr): [%0.3], env=e0.2, next=%18.4
  void                    Deopt              !v    %18.5, Typecheck@0x55de2c71c898[Type#0], %0.3
BB19   <- [17]
  val-            %19.0 = CastType           d     dn %17.3   <str->
  val             %19.1 = CallSafeBuiltin    wed   as.vector(%19.0, "any")    <str->
  void                    StVar              lW    y, %19.1, e0.2
  lgl$#-          %19.3 = IsType                   %17.1 isA val-
  void                    Branch                   %19.3 -> BB21 (if true) | BB22 (if false)
BB20   <- [17]
  prom-           %20.0 = MkArg                    unboundValue, setdiff[0x55de2a650de0]_p1 (!refl), e0.2
  val?^           %20.1 = CastType                 up %20.0
  fs              %20.2 = FrameState         R     0x55de29060420+78: [], env=e0.2
  env             e20.3 = (MkEnv)            l     mode(miss)="any", x=%20.1, parent=R_BaseNamespace, context 0
  fs              %20.4 = FrameState         R     0x55de2ae9f3a0+9: [], env=e20.3, next=%20.2
  fs              %20.5 = FrameState         R     0x55de2a8241b0+5(pr): [%17.3], env=e0.2, next=%20.4
  void                    Deopt              !v    %20.5, Typecheck@0x55de2c71c898[Type#0], %17.3
BB21   <- [19]
  val-            %21.0 = CastType           d     dn %17.1   <str->
  real$-          %21.1 = CallSafeBuiltin    wed   length(%21.0)    <int$->
  lgl$-           %21.2 = AsLogical                %21.1
  lgl$#-          %21.3 = Identical                %21.2, true
  void                    Branch                   %21.3 -> BB15 (if true) | BB7 (if false)
BB22   <- [19]
  fs              %22.0 = FrameState         R     0x55de29060420+92: [], env=e0.2
  void                    Deopt              !v    %22.0, Typecheck@0x55de2c71ccb8[Type#1], %17.1
BB15   <- [21]
  void                    Nop                !     
  lgl$-           %15.1 = %21.2
  goto BB8
BB7   <- [21]
  prom-           %7.0  = MkArg                    unboundValue, setdiff[0x55de2a650de0]_p19 (!refl), e0.2
  val?^ | miss    %7.1  = CastType                 up %7.0
  val?            %7.2  = Force              !vr   %7.1, 
  val?            %7.3  = CallBuiltin        !v    length(%7.2) e0.2   <int$->
  lgl$-           %7.4  = AsLogical          e     %7.3
  lgl$-           %7.5  = LOr                      %21.2, %7.4
  lgl$-           %7.6  = %7.5
  goto BB8
BB8   <- [7, 15]
  lgl$-           %8.0  = Phi                      %7.6:BB7, %15.1:BB15
  lgl$-           %8.1  = %8.0
  lgl$#-          %8.2  = CheckTrueFalse     e     %8.1
  void                    Branch                   %8.2 -> BB11 (if true) | BB9 (if false)
BB11   <- [8]
  val?^ | miss    %11.0 = LdVar              eR    x, e0.2
  val?            %11.1 = Force<value>       !v    %11.0, e0.2   <str->
  lgl$#-          %11.2 = IsType                   %11.1 isA val+   <true>
  void                    Branch                   %11.2 -> BB14 (if true) | BB12 (if false)
BB9   <- [8]
  val?^ | miss    %9.0  = LdVar              eR    x, e0.2
  void                    Visible            v     
  val?            %9.2  = Force!             !     %9.0, e0.2   <val?_>
  val?            %9.3  = %9.2
  goto BB10
BB14   <- [11]
  (cls|spec|blt)  %14.0 = LdFun              !v    match, <0x55de2a37af38>, e0.2
  prom-           %14.1 = MkArg                    unboundValue, setdiff[0x55de2a650de0]_p20, e0.2
  prom-           %14.2 = MkArg                    unboundValue, setdiff[0x55de2a650de0]_p21, e0.2
  val?            %14.3 = Call               !v    %14.0(%14.1, %14.2, 0L) e0.2   <int->
  val?            %14.4 = Eq                 !v    %14.3, 0L, e0.2   <lgl->
  val?            %14.5 = %14.4
  goto BB13
BB12   <- [11]
  prom-           %12.0 = MkArg                    unboundValue, setdiff[0x55de2a650de0]_p22, e0.2
  prom-           %12.1 = %12.0
  goto BB13
BB10   <- [9, 13]
  val?            %10.0 = Phi                      %9.3:BB9, %13.4:BB13
  val?            %10.1 = %10.0
  val?            %10.2 = StaticCall         !     unique[0x55de2ba15990](%10.1) { 0 } e0.2   <str->
  void                    Return             l     %10.2
BB13   <- [14, 12]
  val?            %13.0 = Phi                      %14.5:BB14, %12.1:BB12
  val?            %13.1 = %13.0
  val?            %13.2 = Extract1_1D        !v    %11.1, %13.1, e0.2   <str->
  void                    Visible            v     
  val?            %13.4 = %13.2
  goto BB10
Prom 0:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    x, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    y, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 19:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    y, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 20:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    x, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 21:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    y, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 22:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !v    match, e0.0
  prom-           %0.2  = MkArg                    unboundValue, setdiff[0x55de2a650de0]_p23, e0.0
  prom-           %0.3  = MkArg                    unboundValue, setdiff[0x55de2a650de0]_p24, e0.0
  val?            %0.4  = Call               !v    %0.1(%0.2, %0.3, 0L) e0.0   <val?_>
  void                    Visible            v     
  val?            %0.6  = Eq                 !     %0.4, 0L, e0.0   <val?_>
  void                    Return             l     %0.6
Prom 23:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    x, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 24:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    y, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3

│ setdiff[0x55de2a650de0]                                                      │
└──────────────────────────────────────────────────────────────────────────────┘
