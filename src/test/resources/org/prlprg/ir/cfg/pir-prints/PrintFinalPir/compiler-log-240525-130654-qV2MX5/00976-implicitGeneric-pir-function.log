
┌──────────────────────────────────────────────────────────────────────────────┐
│ implicitGeneric[0x55de2d795b70]                                              │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;NonRefl0,NonRefl1,!Obj0,!Obj1 miss: 1│
│ Properties:                                                                  │
├────── Final PIR Version
implicitGeneric[0x55de2d795b70]
BB0
  val?^           %0.0  = LdArg                    1
  val?^           %0.1  = LdArg                    0
  env             e0.2  = MkEnv              l     name=%0.1, where=%0.0, generic(miss)=missingArg, parent=<env 0x55de28b56378>, context 1
  prom-           %0.3  = MkArg                    unboundValue, implicitGeneric[0x55de2d795b70]_p0, e0.2
  val?^ | miss    %0.4  = CastType                 up %0.3
  void                    StArg              lW    generic, %0.4, e0.2
  val?^ | miss    %0.6  = LdVar              eR    nzchar, <env 0x55de28b56378>
  lgl$#-          %0.7  = Identical                <blt nzchar>, %0.6   <true>
  void                    Branch                   %0.7 -> BB93 (if true) | BB94 (if false)
BB93   <- [0]
  val+            %93.0 = Force!<lazy>       !vr   %0.1,    <str$->
  val?            %93.1 = CallBuiltin        !v    nzchar(%93.0) e0.2   <lgl$->
  lgl$#-          %93.2 = IsType                   %93.1 isA lgl$-
  void                    Branch                   %93.2 -> BB95 (if true) | BB96 (if false)
BB94   <- [0]
  fs              %94.0 = FrameState         R     0x55de2e77be60+0: [], env=e0.2
  void                    Deopt              !v    %94.0, DeadBranchReached@0x55de2adfb6f0[Test#0], %0.7
BB95   <- [93]
  lgl$-           %95.0 = CastType           d     dn %93.1
  lgl$-           %95.1 = Not                d     %95.0, elided
  lgl$#-          %95.2 = CheckTrueFalse     e     %95.1
  void                    Branch                   %95.2 -> BB91 (if true) | BB5 (if false)
BB96   <- [93]
  void                    Nop                !     
  val?            %96.1 = %93.1
  dr              %96.2 = Typecheck@0x55de2adfb6f0[Type#7]
  goto BB3
BB91   <- [95]
  (cls|spec|blt)  %91.0 = LdFun              !v    stop, e0.2
  fs              %91.1 = FrameState         R     0x55de2e77be60+113: [%91.0], env=e0.2
  void                    Deopt              !v    %91.1, DeadCall@0x55de2adfb6f0[Call#4], %91.0   !
BB5   <- [95]
  lgl$-           %5.0  = Missing            eR    generic, e0.2
  lgl$-           %5.1  = Not                d     %5.0, elided
  lgl$-           %5.2  = AsLogical                %5.1
  lgl$#-          %5.3  = Identical                %5.2, false
  lgl$-           %5.4  = AsLogical                %5.2
  lgl$#-          %5.5  = Identical                %5.4, false
  void                    Branch                   %5.3 -> BB7 (if true) | BB6 (if false)
BB3   <- [96, 98]
  val?^ | miss    %3.0  = Phi                      %96.1:BB96, %98.1:BB98
  val?^ | miss    %3.1  = %3.0
  dr              %3.2  = Phi                      %96.2:BB96, %98.2:BB98
  dr              %3.3  = %3.2
  fs              %3.4  = FrameState         R     0x55de2e77be60+91: [%93.1], env=e0.2
  void                    Deopt              !v    %3.4, %3.3, %3.1   !
BB7   <- [5]
  void                    Branch                   %5.5 -> BB9 (if true) | BB8 (if false)
BB6   <- [5]
  (cls|spec|blt)  %6.0  = LdFun              !v    is, e0.2
  fs              %6.1  = FrameState         R     0x55de2e77be60+173: [%5.2, %6.0], env=e0.2
  void                    Deopt              !v    %6.1, DeadCall@0x55de2adfb6f0[Call#6], %6.0   !
BB9   <- [7]
  lgl$#-          %9.0  = CheckTrueFalse     e     %5.4
  void                    Branch                   %9.0 -> BB90 (if true) | BB10 (if false)
BB8   <- [7]
  (cls|spec|blt)  %8.0  = LdFun              !v    .identC, e0.2
  fs              %8.1  = FrameState         R     0x55de2e77be60+224: [%5.4, %8.0], env=e0.2
  void                    Deopt              !v    %8.1, DeadCall@0x55de2adfb6f0[Call#7], %8.0   !
BB90   <- [9]
  (cls|spec|blt)  %90.0 = LdFun              !v    stop, e0.2
  fs              %90.1 = FrameState         R     0x55de2e77be60+280: [%90.0], env=e0.2
  void                    Deopt              !v    %90.1, DeadCall@0x55de2adfb6f0[Call#9], %90.0   !
BB10   <- [9]
  lgl$-           %10.0 = Missing            eR    generic, e0.2
  lgl$-           %10.1 = AsLogical                %10.0
  lgl$#-          %10.2 = Identical                %10.1, true
  lgl$-           %10.3 = AsLogical                %10.1
  lgl$#-          %10.4 = Identical                %10.3, false
  void                    Branch                   %10.2 -> BB12 (if true) | BB11 (if false)
BB12   <- [10]
  void                    Branch                   %10.4 -> BB89 (if true) | BB13 (if false)
BB11   <- [10]
  (cls|spec|blt)  %11.0 = LdFun              !v    is, e0.2
  fs              %11.1 = FrameState         R     0x55de2e77be60+339: [%10.1, %11.0], env=e0.2
  void                    Deopt              !v    %11.1, DeadCall@0x55de2adfb6f0[Call#12], %11.0   !
BB89   <- [12]
  void                    Nop                !     
  lgl$-           %89.1 = %10.3
  goto BB16
BB13   <- [12]
  val?^ | miss    %13.0 = LdVar              eR    isGeneric, e0.2
  lgl$#-          %13.1 = Identical                %13.0, function(f, where=topenv(parent.frame()), fdef|...
  void                    Branch                   %13.1 -> BB97 (if true) | BB98 (if false)
BB16   <- [89, 99]
  lgl$-           %16.0 = Phi                      %99.4:BB99, %89.1:BB89
  lgl$-           %16.1 = %16.0
  void                    StVar              lW    createGeneric, %16.1, e0.2
  lgl$#-          %16.3 = CheckTrueFalse     e     %16.1
  void                    Branch                   %16.3 -> BB22 (if true) | BB19 (if false)
BB97   <- [13]
  prom-           %97.0 = MkArg                    unboundValue, implicitGeneric[0x55de2d795b70]_p3, e0.2
  prom-           %97.1 = MkArg                    unboundValue, implicitGeneric[0x55de2d795b70]_p4, e0.2
  val?            %97.2 = StaticCall         !v    isGeneric[0x55de2cee9df0](%97.0, %97.1) e0.2   <lgl$->
  lgl$#-          %97.3 = IsType                   %97.2 isA lgl$-
  void                    Branch                   %97.3 -> BB99 (if true) | BB100 (if false)
BB98   <- [13]
  void                    Nop                !     
  val?^ | miss    %98.1 = %13.0
  dr              %98.2 = CallTarget@0x55de2adfb6f0[Call#13]
  goto BB3
BB22   <- [16]
  val?^ | miss    %22.0 = LdVar              eR    getFunction, e0.2
  lgl$#-          %22.1 = Identical                %22.0, function(name, generic=TRUE, mustFind=TRUE, wh|...
  void                    Branch                   %22.1 -> BB101 (if true) | BB102 (if false)
BB19   <- [16]
  void                    Nop                !     
  goto BB20
BB99   <- [97]
  lgl$-           %99.0 = CastType           d     dn %97.2
  lgl$-           %99.1 = Not                d     %99.0, elided
  lgl$-           %99.2 = AsLogical                %99.1
  lgl$-           %99.3 = LAnd                     %10.3, %99.2
  lgl$-           %99.4 = %99.3
  goto BB16
BB100   <- [97]
  fs              %100.0 = FrameState         R     0x55de2e77be60+424: [%10.3, %97.2], env=e0.2
  void                    Deopt              !v    %100.0, Typecheck@0x55de2adfb6f0[Type#23], %97.2   !
BB101   <- [22]
  prom-           %101.0 = MkArg                    unboundValue, implicitGeneric[0x55de2d795b70]_p5, e0.2
  prom-           %101.1 = MkArg                    unboundValue, implicitGeneric[0x55de2d795b70]_p6, e0.2
  val?            %101.2 = StaticCall         !v    getFunction[0x55de2bf1bd00](%101.0, missingArg, false, %101.1) { 0 3n 2n } e0.2   <cls->
  lgl$-           %101.3 = Is                       %101.2, NULL
  void                    StVar              lW    fdefault, %101.2, e0.2
  val             %101.5 = ChkMissing         e     %101.2
  lgl$#-          %101.6 = CheckTrueFalse     e     %101.3
  void                    Branch                   %101.6 -> BB88 (if true) | BB25 (if false)
BB102   <- [22]
  fs              %102.0 = FrameState         R     0x55de2e77be60+441: [], env=e0.2
  void                    Deopt              !v    %102.0, CallTarget@0x55de2adfb6f0[Call#14], %22.0   !
BB20   <- [19, 69, 159]
  val?^ | miss    %20.0 = LdVar              eR    generic, e0.2
  void                    Visible            v     
  val?            %20.2 = Force!<value>      !     %20.0, e0.2   <cls>
  val?            %20.3 = %20.2
  goto BB21
BB88   <- [101]
  void                    Visible            v     
  nil-            %88.1 = nil
  goto BB21
BB25   <- [101]
  val?^ | miss    %25.0 = LdVar              eR    environment, e0.2
  lgl$#-          %25.1 = Identical                %25.0, function(fun=NULL) <(rir::DispatchTable*)0x55d|...
  void                    Branch                   %25.1 -> BB103 (if true) | BB104 (if false)
BB21   <- [88, 20]
  val?            %21.0 = Phi                      %20.3:BB20, %88.1:BB88
  val?            %21.1 = %21.0
  void                    Return             l     %21.1
BB103   <- [25]
  prom-           %103.0 = MkArg                    %101.2, implicitGeneric[0x55de2d795b70]_p7 (!refl), 
  val?            %103.1 = StaticCall         !v    environment[0x55de2a82ced0](%103.0) e0.2   <env->
  void                    StVar              lW    env, %103.1, e0.2
  val?^ | miss    %103.3 = LdVar              eR    .derivedDefaultMethod, e0.2
  lgl$#-          %103.4 = Identical                %103.3, function(fdef, internal=NULL) <(rir::DispatchT|...
  void                    Branch                   %103.4 -> BB105 (if true) | BB106 (if false)
BB104   <- [25]
  fs              %104.0 = FrameState         R     0x55de2e77be60+534: [], env=e0.2
  void                    Deopt              !v    %104.0, CallTarget@0x55de2adfb6f0[Call#15], %25.0   !
BB105   <- [103]
  prom-           %105.0 = MkArg                    unboundValue, implicitGeneric[0x55de2d795b70]_p8, e0.2
  val?            %105.1 = StaticCall         !v    .derivedDefaultMethod[0x55de2946e980](%105.0) e0.2   <cls>
  void                    StVar              lW    fdefault, %105.1, e0.2
  val?^ | miss    %105.3 = LdVar              eR    isBaseFun, e0.2
  lgl$#-          %105.4 = Identical                %105.3, function(fun) <(rir::DispatchTable*)0x55de2bef|...
  void                    Branch                   %105.4 -> BB107 (if true) | BB108 (if false)
BB106   <- [103]
  fs              %106.0 = FrameState         R     0x55de2e77be60+617: [], env=e0.2
  void                    Deopt              !v    %106.0, CallTarget@0x55de2adfb6f0[Call#16], %103.3   !
BB107   <- [105]
  prom-           %107.0 = MkArg                    unboundValue, implicitGeneric[0x55de2d795b70]_p9 (!refl), e0.2
  val?            %107.1 = StaticCall         !v    isBaseFun[0x55de2cd42b40](%107.0) e0.2   <lgl$->
  lgl$#-          %107.2 = IsType                   %107.1 isA lgl$-
  void                    Branch                   %107.2 -> BB109 (if true) | BB110 (if false)
BB108   <- [105]
  fs              %108.0 = FrameState         R     0x55de2e77be60+663: [], env=e0.2
  void                    Deopt              !v    %108.0, CallTarget@0x55de2adfb6f0[Call#17], %105.3   !
BB109   <- [107]
  lgl$-           %109.0 = CastType           d     dn %107.1
  lgl$#-          %109.1 = CheckTrueFalse     e     %109.0
  void                    Branch                   %109.1 -> BB33 (if true) | BB32 (if false)
BB110   <- [107]
  void                    Nop                !     
  val?            %110.1 = %107.1
  dr              %110.2 = Typecheck@0x55de2adfb6f0[Type#34]
  goto BB30
BB33   <- [109]
  val?^ | miss    %33.0 = LdVar              eR    genericForBasic, e0.2
  lgl$#-          %33.1 = Identical                %33.0, function(f, where=topenv(parent.frame()), must|...
  void                    Branch                   %33.1 -> BB111 (if true) | BB112 (if false)
BB32   <- [109]
  (cls|spec|blt)  %32.0 = LdFun              !v    getPackageName, e0.2
  fs              %32.1 = FrameState         R     0x55de2e77be60+711: [%32.0], env=e0.2
  void                    Deopt              !v    %32.1, DeadCall@0x55de2adfb6f0[Call#18], %32.0   !
BB30   <- [110, 112]
  val?^ | miss    %30.0 = Phi                      %110.1:BB110, %112.1:BB112
  val?^ | miss    %30.1 = %30.0
  dr              %30.2 = Phi                      %110.2:BB110, %112.2:BB112
  dr              %30.3 = %30.2
  fs              %30.4 = FrameState         R     0x55de2e77be60+695: [%107.1], env=e0.2
  void                    Deopt              !v    %30.4, %30.3, %30.1   !
BB111   <- [33]
  prom-           %111.0 = MkArg                    unboundValue, implicitGeneric[0x55de2d795b70]_p10, e0.2
  val?            %111.1 = StaticCall         !v    genericForBasic[0x55de2b538ae0](%111.0) e0.2   <nil->
  void                    StVar              lW    value, %111.1, e0.2
  lgl$#-          %111.3 = IsType                   %111.1 isA val?-
  val?^ | miss    %111.4 = LdVar              eR    is.function, e0.2
  lgl$#-          %111.5 = Identical                <blt is.function>, %111.4   <true>
  void                    Branch                   %111.5 -> BB113 (if true) | BB114 (if false)
BB112   <- [33]
  void                    Nop                !     
  val?^ | miss    %112.1 = %33.0
  dr              %112.2 = CallTarget@0x55de2adfb6f0[Call#19]
  goto BB30
BB113   <- [111]
  val             %113.0 = ChkMissing         e     %111.1
  void                    Branch                   %111.3 -> BB115 (if true) | BB116 (if false)
BB114   <- [111]
  void                    Nop                !     
  lgl$#-          %114.1 = %111.5
  dr              %114.2 = DeadBranchReached@0x55de2adfb6f0[Test#1]
  goto BB34
BB115   <- [113]
  val?-           %115.0 = CastType           d     dn %111.1   <nil->
  lgl$#-          %115.1 = CallSafeBuiltin    wed   is.function(%115.0)    <lgl$->
  void                    Branch                   %115.1 -> BB83 (if true) | BB36 (if false)
BB116   <- [113]
  void                    Nop                !     
  val?            %116.1 = %111.1
  dr              %116.2 = Typecheck@0x55de2adfb6f0[Type#38]
  goto BB34
BB34   <- [114, 116]
  val?^ | miss    %34.0 = Phi                      %114.1:BB114, %116.1:BB116
  val?^ | miss    %34.1 = %34.0
  dr              %34.2 = Phi                      %114.2:BB114, %116.2:BB116
  dr              %34.3 = %34.2
  fs              %34.4 = FrameState         R     0x55de2e77be60+803: [], env=e0.2
  void                    Deopt              !v    %34.4, %34.3, %34.1   !
BB83   <- [115]
  lgl$-           %83.0 = Missing            eR    generic, e0.2
  lgl$-           %83.1 = Not                d     %83.0, elided
  lgl$-           %83.2 = AsLogical                %83.1
  lgl$#-          %83.3 = Identical                %83.2, false
  void                    Branch                   %83.3 -> BB85 (if true) | BB84 (if false)
BB36   <- [115]
  void                    StVar              lW    package, "base", e0.2
  val?^ | miss    %36.1 = LdVar              eR    .getImplicitGroup, e0.2
  lgl$#-          %36.2 = Identical                %36.1, function(name, where) <(rir::DispatchTable*)0x|...
  void                    Branch                   %36.2 -> BB117 (if true) | BB118 (if false)
BB85   <- [83]
  lgl$#-          %85.0 = CheckTrueFalse     e     %83.2
  void                    Branch                   %85.0 -> BB87 (if true) | BB86 (if false)
BB84   <- [83]
  (cls|spec|blt)  %84.0 = LdFun              !v    identical, e0.2
  fs              %84.1 = FrameState         R     0x55de2e77be60+929: [%83.2, %84.0], env=e0.2
  void                    Deopt              !v    %84.1, DeadCall@0x55de2adfb6f0[Call#21], %84.0   !
BB117   <- [36]
  prom-           %117.0 = MkArg                    unboundValue, implicitGeneric[0x55de2d795b70]_p11, e0.2
  prom-           %117.1 = MkArg                    unboundValue, implicitGeneric[0x55de2d795b70]_p12, e0.2
  val?^           %117.2 = CastType                 up %117.1
  val?^           %117.3 = CastType                 up %117.0
  val?^ | miss    %117.4 = LdVar              eR    identical, e0.2
  lgl$#-          %117.5 = Identical                %117.4, function(x, y, num.eq=TRUE, single.NA=TRUE, at|...
  void                    Branch                   %117.5 -> BB119 (if true) | BB120 (if false)
BB118   <- [36]
  void                    Nop                !     
  val?^ | miss    %118.1 = %36.1
  dr              %118.2 = CallTarget@0x55de2adfb6f0[Call#26]
  goto BB37
BB87   <- [85]
  (cls|spec|blt)  %87.0 = LdFun              !v    stop, e0.2
  fs              %87.1 = FrameState         R     0x55de2e77be60+985: [%87.0], env=e0.2
  void                    Deopt              !v    %87.1, DeadCall@0x55de2adfb6f0[Call#22], %87.0   !
BB86   <- [85]
  void                    StVar              lW    generic, %115.0, e0.2
  (cls|spec|blt)  %86.1 = LdFun              !v    @, e0.2
  fs              %86.2 = FrameState         R     0x55de2e77be60+1054: [%86.1], env=e0.2
  void                    Deopt              !v    %86.2, DeadCall@0x55de2adfb6f0[Call#25], %86.1   !
BB119   <- [117]
  prom-           %119.0 = MkArg                    unboundValue, implicitGeneric[0x55de2d795b70]_p13 (!refl), e0.2
  ct              %119.1 = PushContext        lCL   %119.0, "base", identical(package, "base"), function(x, y, num.eq=TRUE, single.NA=TRUE, at|..., e0.2
  val?^           %119.2 = CastType                 up %119.0
  env             e119.3 = (MkEnv)            l     name=%117.3, where=%117.2, tbl=unboundValue, r=unboundValue, parent=<env 0x55de28b56378>, context 1
  env             e119.4 = MkEnv              l     x=%119.2, y="base", num.eq(miss)=true, single.NA(miss)=true, attrib.as.set(miss)=true, ignore.bytecode(miss)=true, ignore.environment(miss)=false, ignore.srcref(miss)=true, parent=R_BaseNamespace, context 1
  val?            %119.5 = CallBuiltin        !v    identical("base", "base", true, true, true, true, false, true) e119.4
  val?            %119.6 = PopContext         C     %119.5, %119.1   <lgl$->
  lgl$#-          %119.7 = IsType                   %119.6 isA lgl$-
  void                    Branch                   %119.7 -> BB121 (if true) | BB122 (if false)
BB120   <- [117]
  void                    Nop                !     
  val?^ | miss    %120.1 = %117.4
  dr              %120.2 = CallTarget@0x55de2adfb6f0[Call#27]
  goto BB37
BB37   <- [118, 120]
  val?^ | miss    %37.0 = Phi                      %118.1:BB118, %120.1:BB120
  val?^ | miss    %37.1 = %37.0
  dr              %37.2 = Phi                      %118.2:BB118, %120.2:BB120
  dr              %37.3 = %37.2
  fs              %37.4 = FrameState         R     0x55de2e77be60+1115: [], env=e0.2
  void                    Deopt              !v    %37.4, %37.3, %37.1   !
BB121   <- [119]
  lgl$-           %121.0 = CastType           d     dn %119.6
  lgl$#-          %121.1 = CheckTrueFalse     e     %121.0
  void                    Branch                   %121.1 -> BB82 (if true) | BB41 (if false)
BB122   <- [119]
  void                    Nop                !     
  val?            %122.1 = %119.6
  dr              %122.2 = Typecheck@0x55de2adfb6f0[Type#54]
  goto BB39
BB82   <- [121]
  val?^ | miss    %82.0 = LdVar              eR    .methodsNamespace, e0.2
  lgl$#-          %82.1 = IsType                   %82.0 isA val?~- | miss
  void                    Branch                   %82.1 -> BB123 (if true) | BB124 (if false)
BB41   <- [121]
  (cls|spec|blt)  %41.0 = LdFun              !v    environment, e0.2
  prom-           %41.1 = MkArg                    unboundValue, implicitGeneric[0x55de2d795b70]_p14, e0.2
  val?            %41.2 = Call               !v    %41.0(%41.1) e0.2   <val?_>
  val?            %41.3 = %41.2
  goto BB42
BB39   <- [122, 124]
  val?^ | miss    %39.0 = Phi                      %122.1:BB122, %124.1:BB124
  val?^ | miss    %39.1 = %39.0
  dr              %39.2 = Phi                      %122.2:BB122, %124.2:BB124
  dr              %39.3 = %39.2
  fs              %39.4 = FrameState         R     0x55de2e77be60+1152: [], env=e0.2
  fs              %39.5 = FrameState         R     0x55de2e0ff7d0+9: [], env=e119.3, next=%39.4
  fs              %39.6 = FrameState         R     0x55de2c05a440+37(pr): [%119.6], env=e0.2, next=%39.5
  void                    Deopt              !v    %39.6, %39.3, %39.1   !
BB123   <- [82]
  val?~- | miss   %123.0 = CastType           d     dn %82.0
  val?-           %123.1 = Force!<value>            %123.0,    <env->
  val?-           %123.2 = %123.1
  goto BB42
BB124   <- [82]
  void                    Nop                !     
  val?^ | miss    %124.1 = %82.0
  dr              %124.2 = Typecheck@0x55de2adfb6f0[Type#57]
  goto BB39
BB42   <- [41, 123]
  val?            %42.0 = Phi                      %41.3:BB41, %123.2:BB123   <env->
  val?            %42.1 = %42.0
  lgl$#-          %42.2 = IsType                   %42.1 isA val+   <true>
  prom-           %42.3 = MkArg                    %42.1, implicitGeneric[0x55de2d795b70]_p12 (!refl), e0.2
  val?~           %42.4 = CastType                 up %42.3
  void                    StArg              lWd   where, %42.4, e119.3
  lgl$#-          %42.6 = IsEnvStub          R     , e119.3
  void                    Branch                   %42.6 -> BB125 (if true) | BB126 (if false)
BB125   <- [42]
  void                    Branch                   %42.2 -> BB127 (if true) | BB128 (if false)
BB126   <- [42]
  void                    Nop                !     
  env             e126.1 = e119.3
  dr              %126.2 = EnvStubMaterialized@0x55de2ee49158[Call#unknown]
  goto BB43
BB127   <- [125]
  val?^ | miss    %127.0 = LdVar              eRd   .ImplicitGroupMetaName, <env 0x55de28b56378>
  val?            %127.1 = Force!<wrapped>    !vL   %127.0, e119.3   <str$->
  lgl$#-          %127.2 = IsType                   %127.1 isA val?-
  lgl$#-          %127.3 = IsEnvStub          R     , e119.3
  void                    Branch                   %127.3 -> BB129 (if true) | BB130 (if false)
BB128   <- [125]
  void                    Nop                !     
  lgl$#-          %128.1 = %42.2
  dr              %128.2 = DeadBranchReached@0x55de2ee49158[Test#0]
  goto BB43
BB43   <- [126, 128]
  val?^ | miss    %43.0 = Phi                      e126.1:BB126, %128.1:BB128
  val?^ | miss    %43.1 = %43.0
  dr              %43.2 = Phi                      %126.2:BB126, %128.2:BB128
  dr              %43.3 = %43.2
  fs              %43.4 = FrameState         R     0x55de2e77be60+1152: [], env=e0.2
  fs              %43.5 = FrameState         R     0x55de2e0ff7d0+9: [%42.1], env=e119.3, next=%43.4
  void                    Deopt              !v    %43.5, %43.3, %43.1   !
BB129   <- [127]
  lgl$#-          %129.0 = IsType                   %42.1 isA val?-
  void                    Branch                   %129.0 -> BB131 (if true) | BB132 (if false)
BB130   <- [127]
  void                    Nop                !     
  env             e130.1 = e119.3
  dr              %130.2 = EnvStubMaterialized@0x55de2ee49158[Call#unknown]
  goto BB45
BB131   <- [129]
  val?-           %131.0 = CastType           d     dn %42.1   <env->
  void                    Branch                   %127.2 -> BB133 (if true) | BB134 (if false)
BB132   <- [129]
  void                    Nop                !     
  val?            %132.1 = %42.1
  dr              %132.2 = Typecheck@0x55de2ee49158[Type#0]
  goto BB45
BB45   <- [130, 132, 134]
  val?            %45.0 = Phi                      e130.1:BB130, %132.1:BB132, %134.1:BB134
  val?            %45.1 = %45.0
  dr              %45.2 = Phi                      %130.2:BB130, %132.2:BB132, %134.2:BB134
  dr              %45.3 = %45.2
  fs              %45.4 = FrameState         R     0x55de2e77be60+1152: [], env=e0.2
  fs              %45.5 = FrameState         R     0x55de2e0ff7d0+54: [%42.1, %127.1], env=e119.3, next=%45.4
  void                    Deopt              !v    %45.5, %45.3, %45.1   !
BB133   <- [131]
  val?-           %133.0 = CastType           d     dn %127.1   <str$->
  val?            %133.1 = Extract2_1D        wed   %131.0, %133.0, elided   <env->
  lgl$-           %133.2 = Is                       %133.1, NULL
  void                    StVar              lWd   tbl, %133.1, e119.3
  lgl$-           %133.4 = Not                d     %133.2, elided
  lgl$#-          %133.5 = CheckTrueFalse     e     %133.4
  void                    Branch                   %133.5 -> BB77 (if true) | BB49 (if false)
BB134   <- [131]
  void                    Nop                !     
  val?            %134.1 = %127.1
  dr              %134.2 = Typecheck@0x55de2ee49158[Type#2]
  goto BB45
BB77   <- [133]
  val             %77.0 = ChkMissing         e     %133.1
  lgl$#-          %77.1 = IsType                   %133.1 isA val+   <true>
  void                    Branch                   %77.1 -> BB135 (if true) | BB136 (if false)
BB49   <- [133]
  void                    Nop                !     
  goto BB50
BB135   <- [77]
  val?            %135.0 = Force!<lazy>       !vL   %117.3, e119.3   <str$->
  lgl$#-          %135.1 = IsType                   %135.0 isA val?-
  lgl$#-          %135.2 = IsEnvStub          R     , e119.3
  void                    Branch                   %135.2 -> BB139 (if true) | BB140 (if false)
BB136   <- [77]
  fs              %136.0 = FrameState         R     0x55de2e77be60+1152: [], env=e0.2
  fs              %136.1 = FrameState         R     0x55de2e0ff7d0+77: [%133.1], env=e119.3, next=%136.0
  void                    Deopt              !v    %136.1, DeadBranchReached@0x55de2ee49158[Test#1], %77.1   !
BB50   <- [49, 80]
  val?^ | miss    %50.0 = LdVar              eRd   list, <env 0x55de28b56378>
  lgl$#-          %50.1 = Identical                <blt list>, %50.0   <true>
  void                    Branch                   %50.1 -> BB137 (if true) | BB138 (if false)
BB139   <- [135]
  lgl$#-          %139.0 = IsType                   %133.1 isA val?-
  void                    Branch                   %139.0 -> BB141 (if true) | BB142 (if false)
BB140   <- [135]
  void                    Nop                !     
  env             e140.1 = e119.3
  dr              %140.2 = EnvStubMaterialized@0x55de2ee49158[Call#unknown]
  goto BB78
BB137   <- [50]
  void                    Nop                !     
  vec#-           %137.1 = list()
  goto BB53
BB138   <- [50]
  fs              %138.0 = FrameState         R     0x55de2e77be60+1152: [], env=e0.2
  fs              %138.1 = FrameState         R     0x55de2e0ff7d0+203: [], env=e119.3, next=%138.0
  void                    Deopt              !v    %138.1, DeadBranchReached@0x55de2ee49158[Test#2], %50.1   !
BB141   <- [139]
  val?-           %141.0 = CastType           d     dn %133.1   <env->
  void                    Branch                   %135.1 -> BB143 (if true) | BB144 (if false)
BB142   <- [139]
  void                    Nop                !     
  val?            %142.1 = %133.1
  dr              %142.2 = Typecheck@0x55de2ee49158[Type#3]
  goto BB78
BB78   <- [140, 142, 144]
  val?^ | miss    %78.0 = Phi                      e140.1:BB140, %142.1:BB142, %144.1:BB144
  val?^ | miss    %78.1 = %78.0
  dr              %78.2 = Phi                      %140.2:BB140, %142.2:BB142, %144.2:BB144
  dr              %78.3 = %78.2
  fs              %78.4 = FrameState         R     0x55de2e77be60+1152: [], env=e0.2
  fs              %78.5 = FrameState         R     0x55de2e0ff7d0+148: [%133.1, %135.0], env=e119.3, next=%78.4
  void                    Deopt              !v    %78.5, %78.3, %78.1   !
BB53   <- [81, 137]
  val?            %53.0 = Phi                      %137.1:BB137, %81.1:BB81   <vec->
  val?            %53.1 = %53.0
  void                    StVar              lW    group, %53.1, e0.2
  lgl$-           %53.3 = Missing            eR    generic, e0.2
  lgl$#-          %53.4 = CheckTrueFalse     e     %53.3
  void                    Branch                   %53.4 -> BB57 (if true) | BB56 (if false)
BB143   <- [141]
  val?-           %143.0 = CastType           d     dn %135.0   <str$->
  val?            %143.1 = Extract2_1D        wed   %141.0, %143.0, elided   <nil->
  lgl$-           %143.2 = Is                       %143.1, NULL
  void                    StVar              lWd   r, %143.1, e119.3
  lgl$-           %143.4 = Not                d     %143.2, elided
  lgl$#-          %143.5 = CheckTrueFalse     e     %143.4
  void                    Branch                   %143.5 -> BB81 (if true) | BB80 (if false)
BB144   <- [141]
  void                    Nop                !     
  val?            %144.1 = %135.0
  dr              %144.2 = Typecheck@0x55de2ee49158[Type#6]
  goto BB78
BB57   <- [53]
  val?^ | miss    %57.0 = LdVar              eR    .getImplicitGeneric, e0.2
  lgl$#-          %57.1 = Identical                %57.0, function(name, where, pkg="") <(rir::DispatchT|...
  void                    Branch                   %57.1 -> BB145 (if true) | BB146 (if false)
BB56   <- [53]
  (cls|spec|blt)  %56.0 = LdFun              !v    makeGeneric, e0.2
  fs              %56.1 = FrameState         R     0x55de2e77be60+1183: [%56.0], env=e0.2
  void                    Deopt              !v    %56.1, DeadCall@0x55de2adfb6f0[Call#29], %56.0   !
BB81   <- [143]
  val             %81.0 = ChkMissing         e     %143.1
  val?            %81.1 = %143.1
  goto BB53
BB80   <- [143]
  void                    Nop                !     
  goto BB50
BB145   <- [57]
  prom-           %145.0 = MkArg                    unboundValue, implicitGeneric[0x55de2d795b70]_p15, e0.2
  prom-           %145.1 = MkArg                    unboundValue, implicitGeneric[0x55de2d795b70]_p16, e0.2
  prom-           %145.2 = MkArg                    unboundValue, implicitGeneric[0x55de2d795b70]_p17, e0.2
  ct              %145.3 = PushContext        lCL   %145.0, %145.1, %145.2, .getImplicitGeneric(name, env, package), function(name, where, pkg="") <(rir::DispatchT|..., e0.2
  val?^           %145.4 = CastType                 up %145.2
  val?^           %145.5 = CastType                 up %145.1
  val?^           %145.6 = CastType                 up %145.0
  val?^ | miss    %145.7 = LdVar              eR    .getImplicitGenericFromCache, <env 0x55de28b56378>
  lgl$#-          %145.8 = Identical                %145.7, function(name, where, pkg="") <(rir::DispatchT|...
  void                    Branch                   %145.8 -> BB147 (if true) | BB148 (if false)
BB146   <- [57]
  fs              %146.0 = FrameState         R     0x55de2e77be60+1166: [], env=e0.2
  void                    Deopt              !v    %146.0, CallTarget@0x55de2adfb6f0[Call#31], %57.0   !
BB147   <- [145]
  env             e147.0 = MkEnv              l     name=%145.6, where=%145.5, pkg=%145.4, parent=<env 0x55de28b56378>, context 1
  prom-           %147.1 = MkArg                    unboundValue, implicitGeneric[0x55de2d795b70]_p24, e147.0
  prom-           %147.2 = MkArg                    unboundValue, implicitGeneric[0x55de2d795b70]_p25, e147.0
  prom-           %147.3 = MkArg                    unboundValue, implicitGeneric[0x55de2d795b70]_p26, e147.0
  ct              %147.4 = PushContext        lCL   %147.1, %147.2, %147.3, .getImplicitGenericFromCache(name, where, pkg), function(name, where, pkg="") <(rir::DispatchT|..., e147.0
  val?^           %147.5 = CastType                 up %147.3
  val?^           %147.6 = CastType                 up %147.2
  val?^           %147.7 = CastType                 up %147.1
  val?^ | miss    %147.8 = LdVar              eR    .getGenericFromCacheTable, <env 0x55de28b56378>
  lgl$#-          %147.9 = Identical                %147.8, function(name, where, pkg="", table) <(rir::Di|...
  void                    Branch                   %147.9 -> BB149 (if true) | BB150 (if false)
BB148   <- [145]
  fs              %148.0 = FrameState         R     0x55de2e77be60+1349: [], env=e0.2
  env             e148.1 = (MkEnv)            l     name=%145.6, where=%145.5, pkg=%145.4, parent=<env 0x55de28b56378>, context 1
  fs              %148.2 = FrameState         R     0x55de2b26ee50+0: [], env=e148.1, next=%148.0
  void                    Deopt              !v    %148.2, CallTarget@0x55de2b5a0a00[Call#0], %145.7   !
BB149   <- [147]
  env             e149.0 = MkEnv              l     name=%147.7, where=%147.6, pkg=%147.5, parent=<env 0x55de28b56378>, context 1
  prom-           %149.1 = MkArg                    unboundValue, implicitGeneric[0x55de2d795b70]_p30, e149.0
  prom-           %149.2 = MkArg                    unboundValue, implicitGeneric[0x55de2d795b70]_p31, e149.0
  prom-           %149.3 = MkArg                    unboundValue, implicitGeneric[0x55de2d795b70]_p32, e149.0
  prom-           %149.4 = MkArg                    unboundValue, implicitGeneric[0x55de2d795b70]_p33, e149.0
  val?            %149.5 = StaticCall         !v    .getGenericFromCacheTable[0x55de2ba30010](%149.1, %149.2, %149.3, %149.4) e149.0   <(nil|cls)>
  val?            %149.6 = PopContext         C     %149.5, %147.4   <(nil|cls)>
  lgl$-           %149.7 = Is                       %149.6, NULL
  lgl$-           %149.8 = AsLogical                %149.7
  lgl$#-          %149.9 = Identical                %149.8, false
  void                    StVar              lW    value, %149.6, e147.0
  val             %149.11 = ChkMissing         e     %149.6
  void                    Branch                   %149.9 -> BB76 (if true) | BB62 (if false)
BB150   <- [147]
  fs              %150.0 = FrameState         R     0x55de2e77be60+1349: [], env=e0.2
  fs              %150.1 = FrameState         R     0x55de2b26ee50+42: [], env=e147.0, next=%150.0
  env             e150.2 = (MkEnv)            l     name=%147.7, where=%147.6, pkg=%147.5, parent=<env 0x55de28b56378>, context 1
  fs              %150.3 = FrameState         R     0x55de2e5bee20+0: [], env=e150.2, next=%150.1
  void                    Deopt              !v    %150.3, CallTarget@0x55de2ac194a0[Call#0], %147.8   !
BB76   <- [149]
  void                    Nop                !     
  lgl$-           %76.1 = %149.8
  goto BB67
BB62   <- [149]
  val?^ | miss    %62.0 = LdVar              eR    where, e147.0
  val?            %62.1 = Force!<lazy>       !v    %62.0, e147.0   <env->
  lgl$#-          %62.2 = IsType                   %62.1 isA val+   <true>
  void                    Branch                   %62.2 -> BB151 (if true) | BB152 (if false)
BB67   <- [76, 155]
  lgl$-           %67.0 = Phi                      %155.7:BB155, %76.1:BB76
  lgl$-           %67.1 = %67.0
  lgl$#-          %67.2 = CheckTrueFalse     e     %67.1
  void                    Branch                   %67.2 -> BB75 (if true) | BB68 (if false)
BB151   <- [62]
  val?^ | miss    %151.0 = LdVar              eR    .ImplicitGenericsMetaName, e147.0
  val?            %151.1 = Force!<wrapped>    !v    %151.0, e147.0   <str$->
  lgl$#-          %151.2 = IsType                   %151.1 isA val?-
  lgl$#-          %151.3 = IsType                   %62.1 isA val?-
  void                    Branch                   %151.3 -> BB153 (if true) | BB154 (if false)
BB152   <- [62]
  fs              %152.0 = FrameState         R     0x55de2e77be60+1349: [], env=e0.2
  fs              %152.1 = FrameState         R     0x55de2b26ee50+91: [%149.8, %62.1], env=e147.0, next=%152.0
  void                    Deopt              !v    %152.1, DeadBranchReached@0x55de2b5a0a00[Test#0], %62.2   !
BB75   <- [67]
  fs              %75.0 = FrameState         R     0x55de2e77be60+1349: [], env=e0.2
  (cls|spec|blt)  %75.1 = LdFun              !v    .getGenericFromCacheTable, e147.0
  fs              %75.2 = FrameState         R     0x55de2b26ee50+197: [%75.1], env=e147.0, next=%75.0
  void                    Deopt              !v    %75.2, DeadCall@0x55de2b5a0a00[Call#1], %75.1   !
BB68   <- [67]
  val?^ | miss    %68.0 = LdVar              eR    value, e147.0
  val?            %68.1 = Force!<value>      !v    %68.0, e147.0   <(nil|cls)>
  val?            %68.2 = PopContext         C     %68.1, %145.3   <(nil|cls)>
  lgl$-           %68.3 = Is                       %68.2, NULL
  void                    StVar              lW    generic, %68.2, e0.2
  val             %68.5 = ChkMissing         e     %68.2
  lgl$#-          %68.6 = CheckTrueFalse     e     %68.3
  void                    Branch                   %68.6 -> BB70 (if true) | BB69 (if false)
BB153   <- [151]
  val?-           %153.0 = CastType           d     dn %62.1   <env->
  void                    Branch                   %151.2 -> BB155 (if true) | BB156 (if false)
BB154   <- [151]
  void                    Nop                !     
  val?            %154.1 = %62.1
  dr              %154.2 = Typecheck@0x55de2b5a0a00[Type#5]
  goto BB65
BB70   <- [68]
  (cls|spec|blt)  %70.0 = LdFun              !v    makeGeneric, <0x55de2e67ed80>, e0.2
  prom-           %70.1 = MkArg                    unboundValue, implicitGeneric[0x55de2d795b70]_p18, e0.2
  prom-           %70.2 = MkArg                    unboundValue, implicitGeneric[0x55de2d795b70]_p19, e0.2
  prom-           %70.3 = MkArg                    unboundValue, implicitGeneric[0x55de2d795b70]_p20, e0.2
  prom-           %70.4 = MkArg                    unboundValue, implicitGeneric[0x55de2d795b70]_p21, e0.2
  val?            %70.5 = NamedCall          !v    %70.0(%70.1, fdefault=%70.2, package=%70.3, group=%70.4) e0.2   <cls>
  void                    StVar              lW    generic, %70.5, e0.2
  val?^ | miss    %70.7 = LdVar              eR    .cacheImplicitGeneric, e0.2
  lgl$#-          %70.8 = Identical                %70.7, function(name, def) <(rir::DispatchTable*)0x55|...
  void                    Branch                   %70.8 -> BB157 (if true) | BB158 (if false)
BB69   <- [68]
  void                    Nop                !     
  goto BB20
BB155   <- [153]
  val?-           %155.0 = CastType           d     dn %151.1   <str$->
  val?            %155.1 = Extract2_1D        wed   %153.0, %155.0, elided   <nil->
  lgl$-           %155.2 = Is                       %155.1, NULL
  void                    StVar              lW    tbl, %155.1, e147.0
  lgl$-           %155.4 = Not                d     %155.2, elided
  lgl$-           %155.5 = AsLogical                %155.4
  lgl$-           %155.6 = LAnd                     %149.8, %155.5
  lgl$-           %155.7 = %155.6
  goto BB67
BB156   <- [153]
  void                    Nop                !     
  val?            %156.1 = %151.1
  dr              %156.2 = Typecheck@0x55de2b5a0a00[Type#7]
  goto BB65
BB65   <- [154, 156]
  val?^ | miss    %65.0 = Phi                      %154.1:BB154, %156.1:BB156
  val?^ | miss    %65.1 = %65.0
  dr              %65.2 = Phi                      %154.2:BB154, %156.2:BB156
  dr              %65.3 = %65.2
  fs              %65.4 = FrameState         R     0x55de2e77be60+1349: [], env=e0.2
  fs              %65.5 = FrameState         R     0x55de2b26ee50+136: [%149.8, %62.1, %151.1], env=e147.0, next=%65.4
  void                    Deopt              !v    %65.5, %65.3, %65.1   !
BB157   <- [70]
  prom-           %157.0 = MkArg                    unboundValue, implicitGeneric[0x55de2d795b70]_p22, e0.2
  prom-           %157.1 = MkArg                    unboundValue, implicitGeneric[0x55de2d795b70]_p23 (!refl), e0.2
  ct              %157.2 = PushContext        lCL   %157.0, %157.1, .cacheImplicitGeneric(name, generic), function(name, def) <(rir::DispatchTable*)0x55|..., e0.2
  val?^           %157.3 = CastType                 up %157.1
  val?^           %157.4 = CastType                 up %157.0
  val?^ | miss    %157.5 = LdVar              eR    .cacheGenericTable, <env 0x55de28b56378>
  lgl$#-          %157.6 = Identical                %157.5, function(name, def, table) <(rir::DispatchTabl|...
  void                    Branch                   %157.6 -> BB159 (if true) | BB160 (if false)
BB158   <- [70]
  fs              %158.0 = FrameState         R     0x55de2e77be60+1470: [], env=e0.2
  void                    Deopt              !v    %158.0, CallTarget@0x55de2adfb6f0[Call#33], %70.7   !
BB159   <- [157]
  env             e159.0 = MkEnv              l     name=%157.4, def=%157.3, parent=<env 0x55de28b56378>, context 1
  prom-           %159.1 = MkArg                    unboundValue, implicitGeneric[0x55de2d795b70]_p27, e159.0
  prom-           %159.2 = MkArg                    unboundValue, implicitGeneric[0x55de2d795b70]_p28, e159.0
  prom-           %159.3 = MkArg                    unboundValue, implicitGeneric[0x55de2d795b70]_p29, e159.0
  val?            %159.4 = StaticCall         !v    .cacheGenericTable[0x55de2e5627c0](%159.1, %159.2, %159.3) e159.0   <cls>
  val?            %159.5 = PopContext         C     %159.4, %157.2
  goto BB20
BB160   <- [157]
  fs              %160.0 = FrameState         R     0x55de2e77be60+1507: [], env=e0.2
  env             e160.1 = (MkEnv)            l     name=%157.4, def=%157.3, parent=<env 0x55de28b56378>, context 1
  fs              %160.2 = FrameState         R     0x55de2d767d00+0: [], env=e160.1, next=%160.0
  void                    Deopt              !v    %160.2, CallTarget@0x55de2e453268[Call#0], %157.5   !
Prom 0:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     getGeneric, e0.0
  prom-           %0.2  = MkArg                    unboundValue, implicitGeneric[0x55de2d795b70]_p1, e0.0
  prom-           %0.3  = MkArg                    unboundValue, implicitGeneric[0x55de2d795b70]_p2, e0.0
  val?            %0.4  = NamedCall          !     %0.1(%0.2, where=%0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    name, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 3:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    name, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 4:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 5:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    name, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 6:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 7:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fdefault, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls->
  void                    Return             l     %0.3
Prom 8:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fdefault, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls->
  void                    Return             l     %0.3
Prom 9:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fdefault, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 10:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    name, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 11:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    name, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 12:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     identical, <0x55de28831820>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, implicitGeneric[0x55de2d795b70]_p13, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2, "base") e0.0   <lgl$->
  lgl$#-          %0.4  = CheckTrueFalse     we    %0.3
  void                    Branch                   %0.4 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    .methodsNamespace, e0.0
  void                    Visible            v     
  val?            %2.2  = Force<value>       !     %2.0, e0.0   <env->
  val?            %2.3  = %2.2
  goto BB3
BB4   <- [0]
  (cls|spec|blt)  %4.0  = LdFun              !     environment, e0.0
  prom-           %4.1  = MkArg                    unboundValue, implicitGeneric[0x55de2d795b70]_p14, e0.0
  val?            %4.2  = Call               !     %4.0(%4.1) e0.0   <val?_>
  val?            %4.3  = %4.2
  goto BB3
BB3   <- [2, 4]
  val?            %3.0  = Phi                      %4.3:BB4, %2.3:BB2
  val?            %3.1  = %3.0
  void                    Return             l     %3.1
Prom 13:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    package, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 14:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fdefault, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 15:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    name, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 16:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    env, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 17:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    package, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 18:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    name, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 19:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fdefault, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 20:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    package, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 21:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    group, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <vec->
  void                    Return             l     %0.3
Prom 22:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    name, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 23:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    generic, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 24:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    name, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 25:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 26:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    pkg, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 27:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    name, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 28:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    def, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 29:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    .implicitTable, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 30:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    name, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 31:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 32:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    pkg, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 33:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    .implicitTable, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <env->
  void                    Return             l     %0.3

│ implicitGeneric[0x55de2d795b70]                                              │
└──────────────────────────────────────────────────────────────────────────────┘
