
┌──────────────────────────────────────────────────────────────────────────────┐
│ getGeneric[0x55de29506fb0]                                                   │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;Eager1,NonRefl1,!Obj1 miss: 1        │
│ Properties:                                                                  │
├────── Final PIR Version
getGeneric[0x55de29506fb0]
BB0
  val?^           %0.0  = LdArg                    2
  val?~+          %0.1  = LdArg                    1
  val?^           %0.2  = LdArg                    0
  val?^ | miss    %0.3  = LdVar              eR    is.function, <env 0x55de28b56378>
  lgl$#-          %0.4  = Identical                <blt is.function>, %0.3   <true>
  void                    Branch                   %0.4 -> BB79 (if true) | BB80 (if false)
BB79   <- [0]
  env             e79.0 = MkEnv              l     f=%0.2, mustFind=%0.1, where=%0.0, package(miss)="", parent=<env 0x55de28b56378>, context 1
  val?            %79.1 = Force!<lazy>       !v    %0.2, e79.0   <(str|cls)>
  val?            %79.2 = CallBuiltin        !     is.function(%79.1) e79.0   <lgl$->
  lgl$#-          %79.3 = IsType                   %79.2 isA lgl$-
  void                    Branch                   %79.3 -> BB81 (if true) | BB82 (if false)
BB80   <- [0]
  env             e80.0 = (MkEnv)            l     f=%0.2, mustFind=%0.1, where=%0.0, package(miss)="", parent=<env 0x55de28b56378>, context 1
  fs              %80.1 = FrameState         R     0x55de2aa8f4a0+0: [], env=e80.0
  void                    Deopt              !v    %80.1, DeadBranchReached@0x55de2b187e70[Test#0], %0.4
BB81   <- [79]
  lgl$-           %81.0 = CastType           d     dn %79.2
  lgl$#-          %81.1 = CheckTrueFalse     e     %81.0
  void                    Branch                   %81.1 -> BB71 (if true) | BB5 (if false)
BB82   <- [79]
  void                    Nop                !     
  val?            %82.1 = %79.2
  dr              %82.2 = Typecheck@0x55de2b187e70[Type#2]
  goto BB3
BB71   <- [81]
  val?^ | miss    %71.0 = LdVar              eR    is, e79.0
  lgl$#-          %71.1 = Identical                %71.0, function(object, class2) <(rir::DispatchTable*|...
  void                    Branch                   %71.1 -> BB83 (if true) | BB84 (if false)
BB5   <- [81]
  void                    Nop                !     
  goto BB6
BB3   <- [82, 84]
  val?^ | miss    %3.0  = Phi                      %82.1:BB82, %84.1:BB84
  val?^ | miss    %3.1  = %3.0
  dr              %3.2  = Phi                      %82.2:BB82, %84.2:BB84
  dr              %3.3  = %3.2
  fs              %3.4  = FrameState         R     0x55de2aa8f4a0+91: [%79.2], env=e79.0
  void                    Deopt              !v    %3.4, %3.3, %3.1   !
BB83   <- [71]
  prom-           %83.0 = MkArg                    unboundValue, getGeneric[0x55de29506fb0]_p26, e79.0
  val?            %83.1 = Call               !     function(object, class2) <(rir::DispatchTable*|...(%83.0, "genericFunction") e79.0   <lgl$->
  lgl$#-          %83.2 = IsType                   %83.1 isA lgl$-
  void                    Branch                   %83.2 -> BB87 (if true) | BB88 (if false)
BB84   <- [71]
  void                    Nop                !     
  val?^ | miss    %84.1 = %71.0
  dr              %84.2 = CallTarget@0x55de2b187e70[Call#1]
  goto BB3
BB6   <- [5, 75]
  lgl$-           %6.0  = Missing            eR    where, e79.0
  lgl$#-          %6.1  = CheckTrueFalse     e     %6.0
  void                    Branch                   %6.1 -> BB70 (if true) | BB9 (if false)
BB87   <- [83]
  lgl$-           %87.0 = CastType           d     dn %83.1
  lgl$#-          %87.1 = CheckTrueFalse     e     %87.0
  void                    Branch                   %87.1 -> BB77 (if true) | BB74 (if false)
BB88   <- [83]
  fs              %88.0 = FrameState         R     0x55de2aa8f4a0+144: [%83.1], env=e79.0
  void                    Deopt              !v    %88.0, Typecheck@0x55de2b187e70[Type#4], %83.1   !
BB70   <- [6]
  val?^ | miss    %70.0 = LdVar              eR    .getGeneric, e79.0
  lgl$#-          %70.1 = Identical                %70.0, function(f, where=.GlobalEnv, package="") <(ri|...
  void                    Branch                   %70.1 -> BB89 (if true) | BB90 (if false)
BB9   <- [6]
  val?^ | miss    %9.0  = LdVar              eR    .getGeneric, e79.0
  lgl$#-          %9.1  = Identical                %9.0, function(f, where=.GlobalEnv, package="") <(ri|...
  void                    Branch                   %9.1 -> BB85 (if true) | BB86 (if false)
BB77   <- [87]
  val?^ | miss    %77.0 = LdVar              eR    f, e79.0
  void                    Visible            v     
  val?            %77.2 = Force!<wrapped>    !     %77.0, e79.0   <cls>
  val?            %77.3 = %77.2
  goto BB43
BB74   <- [87]
  (cls|spec|blt)  %74.0 = LdFun              !     is.primitive, e79.0
  prom-           %74.1 = MkArg                    unboundValue, getGeneric[0x55de29506fb0]_p27, e79.0
  val?            %74.2 = Call               !     %74.0(%74.1) e79.0   <val?_>
  lgl$#-          %74.3 = CheckTrueFalse     we    %74.2
  void                    Branch                   %74.3 -> BB76 (if true) | BB75 (if false)
BB89   <- [70]
  prom-           %89.0 = MkArg                    unboundValue, getGeneric[0x55de29506fb0]_p24, e79.0
  prom-           %89.1 = MkArg                    unboundValue, getGeneric[0x55de29506fb0]_p25, e79.0
  val?            %89.2 = StaticCall         !v    .getGeneric[0x55de2be1c600](%89.0, missingArg, %89.1) e79.0   <cls>
  val?            %89.3 = %89.2
  goto BB10
BB90   <- [70]
  void                    Nop                !     
  val?^ | miss    %90.1 = %70.0
  dr              %90.2 = CallTarget@0x55de2b187e70[Call#7]
  goto BB7
BB85   <- [9]
  prom-           %85.0 = MkArg                    unboundValue, getGeneric[0x55de29506fb0]_p1, e79.0
  prom-           %85.1 = MkArg                    unboundValue, getGeneric[0x55de29506fb0]_p2, e79.0
  prom-           %85.2 = MkArg                    unboundValue, getGeneric[0x55de29506fb0]_p3, e79.0
  val?            %85.3 = StaticCall         !v    .getGeneric[0x55de2b508cf0](%85.0, %85.1, %85.2) e79.0   <(nil|cls)>
  val?            %85.4 = %85.3
  goto BB10
BB86   <- [9]
  void                    Nop                !     
  val?^ | miss    %86.1 = %9.0
  dr              %86.2 = CallTarget@0x55de2b187e70[Call#6]
  goto BB7
BB43   <- [77, 76, 42]
  val?            %43.0 = Phi                      %42.2:BB42, %76.4:BB76, %77.3:BB77
  val?            %43.1 = %43.0
  void                    Return             l     %43.1
BB76   <- [74]
  (cls|spec|blt)  %76.0 = LdFun              !     genericForBasic, e79.0
  prom-           %76.1 = MkArg                    unboundValue, getGeneric[0x55de29506fb0]_p28, e79.0
  prom-           %76.2 = MkArg                    unboundValue, getGeneric[0x55de29506fb0]_p30, e79.0
  val?            %76.3 = NamedCall          !     %76.0(%76.1, mustFind=%76.2) e79.0   <val?_>
  val?            %76.4 = %76.3
  goto BB43
BB75   <- [74]
  (cls|spec|blt)  %75.0 = LdFun              !v    stop, e79.0
  val?            %75.1 = Call               !v    %75.0("argument 'f' must be a string, generic functi|...) e79.0
  goto BB6
BB10   <- [85, 89]
  val?            %10.0 = Phi                      %85.4:BB85, %89.3:BB89   <(nil|cls)>
  val?            %10.1 = %10.0
  lgl$-           %10.2 = Is                       %10.1, NULL
  lgl$-           %10.3 = AsLogical                %10.2
  lgl$#-          %10.4 = Identical                %10.3, false
  void                    StVar              lW    value, %10.1, e79.0
  val             %10.6 = ChkMissing         e     %10.1
  void                    Branch                   %10.4 -> BB69 (if true) | BB13 (if false)
BB7   <- [86, 90]
  val?^ | miss    %7.0  = Phi                      %86.1:BB86, %90.1:BB90
  val?^ | miss    %7.1  = %7.0
  dr              %7.2  = Phi                      %86.2:BB86, %90.2:BB90
  dr              %7.3  = %7.2
  fs              %7.4  = FrameState         R     0x55de2aa8f4a0+307: [], env=e79.0
  void                    Deopt              !v    %7.4, %7.3, %7.1   !
BB69   <- [10]
  void                    Nop                !     
  lgl$-           %69.1 = %10.3
  goto BB18
BB13   <- [10]
  val?^ | miss    %13.0 = LdVar              eR    baseenv, e79.0
  lgl$#-          %13.1 = Identical                <blt baseenv>, %13.0   <true>
  void                    Branch                   %13.1 -> BB91 (if true) | BB92 (if false)
BB18   <- [69, 105]
  lgl$-           %18.0 = Phi                      %105.7:BB105, %69.1:BB69
  lgl$-           %18.1 = %18.0
  lgl$#-          %18.2 = CheckTrueFalse     e     %18.1
  void                    Branch                   %18.2 -> BB56 (if true) | BB21 (if false)
BB91   <- [13]
  val?            %91.0 = CallBuiltin        !v    baseenv() e79.0   <env->
  lgl$#-          %91.1 = IsType                   %91.0 isA val+   <true>
  void                    Branch                   %91.1 -> BB97 (if true) | BB98 (if false)
BB92   <- [13]
  fs              %92.0 = FrameState         R     0x55de2aa8f4a0+427: [], env=e79.0
  void                    Deopt              !v    %92.0, DeadBranchReached@0x55de2b187e70[Test#1], %13.1   !
BB56   <- [18]
  val?^ | miss    %56.0 = LdVar              eR    is.function, e79.0
  lgl$#-          %56.1 = Identical                <blt is.function>, %56.0   <true>
  void                    Branch                   %56.1 -> BB93 (if true) | BB94 (if false)
BB21   <- [18]
  void                    Nop                !     
  goto BB22
BB97   <- [91]
  val?^ | miss    %97.0 = LdVar              eR    f, e79.0
  val?            %97.1 = Force!<wrapped>    !v    %97.0, e79.0   <str$->
  lgl$#-          %97.2 = IsType                   %97.1 isA val?-
  lgl$#-          %97.3 = IsType                   %91.0 isA val?-
  void                    Branch                   %97.3 -> BB103 (if true) | BB104 (if false)
BB98   <- [91]
  fs              %98.0 = FrameState         R     0x55de2aa8f4a0+525: [%10.3, %91.0], env=e79.0
  void                    Deopt              !v    %98.0, DeadBranchReached@0x55de2b187e70[Test#2], %91.1   !
BB93   <- [56]
  val?^ | miss    %93.0 = LdVar              eR    baseDef, e79.0
  lgl$#-          %93.1 = IsType                   %93.0 isA val?~- | miss
  void                    Branch                   %93.1 -> BB95 (if true) | BB96 (if false)
BB94   <- [56]
  void                    Nop                !     
  lgl$#-          %94.1 = %56.1
  dr              %94.2 = DeadBranchReached@0x55de2b187e70[Test#3]
  goto BB19
BB22   <- [21, 59, 65, 113]
  val?^ | miss    %22.0 = LdVar              eR    is.function, e79.0
  lgl$#-          %22.1 = Identical                <blt is.function>, %22.0   <true>
  void                    Branch                   %22.1 -> BB107 (if true) | BB108 (if false)
BB103   <- [97]
  val?-           %103.0 = CastType           d     dn %91.0   <env->
  void                    Branch                   %97.2 -> BB105 (if true) | BB106 (if false)
BB104   <- [97]
  void                    Nop                !     
  val?            %104.1 = %91.0
  dr              %104.2 = Typecheck@0x55de2b187e70[Type#20]
  goto BB16
BB95   <- [93]
  val?~- | miss   %95.0 = CastType           d     dn %93.0
  val?-           %95.1 = Force!<value>            %95.0,    <blt->
  lgl$#-          %95.2 = CallSafeBuiltin    wed   is.function(%95.1)    <lgl$->
  void                    Branch                   %95.2 -> BB60 (if true) | BB59 (if false)
BB96   <- [93]
  void                    Nop                !     
  val?^ | miss    %96.1 = %93.0
  dr              %96.2 = Typecheck@0x55de2b187e70[Type#25]
  goto BB19
BB19   <- [94, 96]
  val?^ | miss    %19.0 = Phi                      %94.1:BB94, %96.1:BB96
  val?^ | miss    %19.1 = %19.0
  dr              %19.2 = Phi                      %94.2:BB94, %96.2:BB96
  dr              %19.3 = %19.2
  fs              %19.4 = FrameState         R     0x55de2aa8f4a0+601: [%18.1], env=e79.0
  void                    Deopt              !v    %19.4, %19.3, %19.1   !
BB107   <- [22]
  val?^ | miss    %107.0 = LdVar              eR    value, e79.0
  val?            %107.1 = Force!<value>      !v    %107.0, e79.0   <cls>
  val?            %107.2 = CallBuiltin        !v    is.function(%107.1) e79.0   <lgl$->
  lgl$#-          %107.3 = IsType                   %107.2 isA lgl$-
  void                    Branch                   %107.3 -> BB115 (if true) | BB116 (if false)
BB108   <- [22]
  fs              %108.0 = FrameState         R     0x55de2aa8f4a0+882: [], env=e79.0
  void                    Deopt              !v    %108.0, DeadBranchReached@0x55de2b187e70[Test#4], %22.1   !
BB105   <- [103]
  val?-           %105.0 = CastType           d     dn %97.1   <str$->
  val?            %105.1 = Extract2_1D        wed   %103.0, %105.0, elided   <blt->
  lgl$-           %105.2 = Is                       %105.1, NULL
  void                    StVar              lW    baseDef, %105.1, e79.0
  lgl$-           %105.4 = Not                d     %105.2, elided
  lgl$-           %105.5 = AsLogical                %105.4
  lgl$-           %105.6 = LAnd                     %10.3, %105.5
  lgl$-           %105.7 = %105.6
  goto BB18
BB106   <- [103]
  void                    Nop                !     
  val?            %106.1 = %97.1
  dr              %106.2 = Typecheck@0x55de2b187e70[Type#22]
  goto BB16
BB16   <- [104, 106]
  val?^ | miss    %16.0 = Phi                      %104.1:BB104, %106.1:BB106
  val?^ | miss    %16.1 = %16.0
  dr              %16.2 = Phi                      %104.2:BB104, %106.2:BB106
  dr              %16.3 = %16.2
  fs              %16.4 = FrameState         R     0x55de2aa8f4a0+570: [%10.3, %91.0, %97.1], env=e79.0
  void                    Deopt              !v    %16.4, %16.3, %16.1   !
BB60   <- [95]
  val?^ | miss    %60.0 = LdVar              eR    genericForBasic, e79.0
  lgl$#-          %60.1 = Identical                %60.0, function(f, where=topenv(parent.frame()), must|...
  void                    Branch                   %60.1 -> BB99 (if true) | BB100 (if false)
BB59   <- [95]
  void                    Nop                !     
  goto BB22
BB115   <- [107]
  lgl$-           %115.0 = CastType           d     dn %107.2
  lgl$#-          %115.1 = CheckTrueFalse     e     %115.0
  void                    Branch                   %115.1 -> BB55 (if true) | BB27 (if false)
BB116   <- [107]
  fs              %116.0 = FrameState         R     0x55de2aa8f4a0+973: [%107.2], env=e79.0
  void                    Deopt              !v    %116.0, Typecheck@0x55de2b187e70[Type#36], %107.2   !
BB99   <- [60]
  prom-           %99.0 = MkArg                    unboundValue, getGeneric[0x55de29506fb0]_p20, e79.0
  val?            %99.1 = StaticCall         !v    genericForBasic[0x55de2bfac7c0](%99.0, missingArg, false) { 0 2n } e79.0   <cls>
  void                    StVar              lW    value, %99.1, e79.0
  val?^ | miss    %99.3 = LdVar              eR    is, e79.0
  lgl$#-          %99.4 = Identical                %99.3, function(object, class2) <(rir::DispatchTable*|...
  void                    Branch                   %99.4 -> BB101 (if true) | BB102 (if false)
BB100   <- [60]
  fs              %100.0 = FrameState         R     0x55de2aa8f4a0+703: [%95.2], env=e79.0
  void                    Deopt              !v    %100.0, CallTarget@0x55de2b187e70[Call#10], %60.0   !
BB55   <- [115]
  val?^ | miss    %55.0 = LdVar              eR    value, e79.0
  void                    Visible            v     
  val?            %55.2 = Force!<value>      !     %55.0, e79.0   <cls>
  val?            %55.3 = %55.2
  goto BB42
BB27   <- [115]
  val?^ | miss    %27.0 = LdVar              eR    nzchar, e79.0
  lgl$#-          %27.1 = Identical                <blt nzchar>, %27.0   <@?>
  void                    Branch                   %27.1 -> BB54 (if true) | BB28 (if false)
BB101   <- [99]
  prom-           %101.0 = MkArg                    unboundValue, getGeneric[0x55de29506fb0]_p21 (!refl), e79.0
  val?            %101.1 = Call               !v    function(object, class2) <(rir::DispatchTable*|...(%101.0, "genericFunction") e79.0   <lgl$->
  lgl$#-          %101.2 = IsType                   %101.1 isA lgl$-
  void                    Branch                   %101.2 -> BB109 (if true) | BB110 (if false)
BB102   <- [99]
  fs              %102.0 = FrameState         R     0x55de2aa8f4a0+778: [], env=e79.0
  void                    Deopt              !v    %102.0, CallTarget@0x55de2b187e70[Call#11], %99.3   !
BB42   <- [55, 41]
  val?            %42.0 = Phi                      %41.2:BB41, %55.3:BB55
  val?            %42.1 = %42.0
  val?            %42.2 = %42.1
  goto BB43
BB54   <- [27]
  val?^ | miss    %54.0 = LdVar              eR    package, e79.0
  val?            %54.1 = Force!             !v    %54.0, e79.0   <val?_>
  val?            %54.2 = CallBuiltin        !v    nzchar(%54.1) e79.0
  val?            %54.3 = %54.2
  goto BB29
BB28   <- [27]
  val?^ | miss    %28.0 = LdVar              eR    package, e79.0
  val?            %28.1 = Force!             !v    %28.0, e79.0   <val?_>
  val?            %28.2 = CallBuiltin        !v    nzchar(%28.1) e79.0
  val?            %28.3 = %28.2
  goto BB29
BB109   <- [101]
  lgl$-           %109.0 = CastType           d     dn %101.1
  lgl$#-          %109.1 = CheckTrueFalse     e     %109.0
  void                    Branch                   %109.1 -> BB66 (if true) | BB65 (if false)
BB110   <- [101]
  void                    Nop                !     
  val?            %110.1 = %101.1
  dr              %110.2 = Typecheck@0x55de2b187e70[Type#30]
  goto BB63
BB29   <- [28, 54]
  val?            %29.0 = Phi                      %28.3:BB28, %54.3:BB54   <val?_>
  val?            %29.1 = %29.0
  lgl$-           %29.2 = AsLogical          e     %29.1
  lgl$#-          %29.3 = Identical                %29.2, false
  void                    Branch                   %29.3 -> BB53 (if true) | BB30 (if false)
BB66   <- [109]
  val?^ | miss    %66.0 = LdVar              eR    .cacheGeneric, e79.0
  lgl$#-          %66.1 = Identical                %66.0, function(name, def) <(rir::DispatchTable*)0x55|...
  void                    Branch                   %66.1 -> BB111 (if true) | BB112 (if false)
BB65   <- [109]
  void                    Nop                !     
  goto BB22
BB63   <- [110, 112]
  val?^ | miss    %63.0 = Phi                      %110.1:BB110, %112.1:BB112
  val?^ | miss    %63.1 = %63.0
  dr              %63.2 = Phi                      %110.2:BB110, %112.2:BB112
  dr              %63.3 = %63.2
  fs              %63.4 = FrameState         R     0x55de2aa8f4a0+815: [%101.1], env=e79.0
  void                    Deopt              !v    %63.4, %63.3, %63.1   !
BB53   <- [29]
  void                    Nop                !     
  lgl$-           %53.1 = %29.2
  goto BB33
BB30   <- [29]
  val?^ | miss    %30.0 = LdVar              eR    is.na, e79.0
  lgl$#-          %30.1 = Identical                <blt is.na>, %30.0   <@?>
  void                    Branch                   %30.1 -> BB50 (if true) | BB31 (if false)
BB111   <- [66]
  prom-           %111.0 = MkArg                    unboundValue, getGeneric[0x55de29506fb0]_p22, e79.0
  prom-           %111.1 = MkArg                    unboundValue, getGeneric[0x55de29506fb0]_p23, e79.0
  ct              %111.2 = PushContext        lCL   %111.0, %111.1, .cacheGeneric(f, value), function(name, def) <(rir::DispatchTable*)0x55|..., e79.0
  val?^           %111.3 = CastType                 up %111.1
  val?^           %111.4 = CastType                 up %111.0
  val?^ | miss    %111.5 = LdVar              eR    .cacheGenericTable, <env 0x55de28b56378>
  lgl$#-          %111.6 = Identical                %111.5, function(name, def, table) <(rir::DispatchTabl|...
  void                    Branch                   %111.6 -> BB113 (if true) | BB114 (if false)
BB112   <- [66]
  void                    Nop                !     
  val?^ | miss    %112.1 = %66.0
  dr              %112.2 = CallTarget@0x55de2b187e70[Call#12]
  goto BB63
BB33   <- [53, 32]
  lgl$-           %33.0 = Phi                      %32.4:BB32, %53.1:BB53
  lgl$-           %33.1 = %33.0
  lgl$#-          %33.2 = CheckTrueFalse     e     %33.1
  void                    Branch                   %33.2 -> BB49 (if true) | BB34 (if false)
BB50   <- [30]
  (cls|spec|blt)  %50.0 = LdFun              !v    match, e79.0
  prom-           %50.1 = MkArg                    unboundValue, getGeneric[0x55de29506fb0]_p18, e79.0
  prom-           %50.2 = MkArg                    unboundValue, getGeneric[0x55de29506fb0]_p19, e79.0
  val?            %50.3 = Call               !v    %50.0(%50.1, %50.2) e79.0   <val?_>
  lgl$#-          %50.4 = IsType                   %50.3 isA val?+
  void                    Branch                   %50.4 -> BB117 (if true) | BB118 (if false)
BB31   <- [30]
  (cls|spec|blt)  %31.0 = LdFun              !v    match, e79.0
  prom-           %31.1 = MkArg                    unboundValue, getGeneric[0x55de29506fb0]_p6, e79.0
  prom-           %31.2 = MkArg                    unboundValue, getGeneric[0x55de29506fb0]_p7, e79.0
  val?            %31.3 = Call               !v    %31.0(%31.1, %31.2) e79.0   <val?_>
  val?            %31.4 = CallBuiltin        !v    is.na(%31.3) e79.0
  val?            %31.5 = %31.4
  goto BB32
BB113   <- [111]
  env             e113.0 = MkEnv              l     name=%111.4, def=%111.3, parent=<env 0x55de28b56378>, context 1
  prom-           %113.1 = MkArg                    unboundValue, getGeneric[0x55de29506fb0]_p31, e113.0
  prom-           %113.2 = MkArg                    unboundValue, getGeneric[0x55de29506fb0]_p32, e113.0
  prom-           %113.3 = MkArg                    unboundValue, getGeneric[0x55de29506fb0]_p33, e113.0
  val?            %113.4 = StaticCall         !v    .cacheGenericTable[0x55de2a8d4670](%113.1, %113.2, %113.3) e113.0   <cls>
  val?            %113.5 = PopContext         C     %113.4, %111.2   <cls>
  void                    StVar              lW    value, %113.5, e79.0
  goto BB22
BB114   <- [111]
  fs              %114.0 = FrameState         R     0x55de2aa8f4a0+868: [], env=e79.0
  env             e114.1 = (MkEnv)            l     name=%111.4, def=%111.3, parent=<env 0x55de28b56378>, context 1
  fs              %114.2 = FrameState         R     0x55de2b0b39a0+0: [], env=e114.1, next=%114.0
  void                    Deopt              !v    %114.2, CallTarget@0x55de2b70b9e8[Call#0], %111.5   !
BB49   <- [33]
  (cls|spec|blt)  %49.0 = LdFun              !v    tryCatch, e79.0
  prom-           %49.1 = MkArg                    unboundValue, getGeneric[0x55de29506fb0]_p12, e79.0
  cls             %49.2 = MkCls                    getGeneric@Prom(17)0, e79.0
  prom-           %49.3 = MkArg                    %49.2, getGeneric[0x55de29506fb0]_p17 (!refl), e79.0
  val?            %49.4 = NamedCall          !v    %49.0(%49.1, error=%49.3) e79.0   <val?_>
  void                    StVar              lW    value, %49.4, e79.0
  goto BB35
BB34   <- [33]
  void                    Nop                !     
  goto BB35
BB117   <- [50]
  val?+           %117.0 = CastType           d     dn %50.3   <val?_>
  lgl+            %117.1 = CallSafeBuiltin    wed   is.na(%117.0) 
  lgl+            %117.2 = %117.1
  goto BB32
BB118   <- [50]
  fs              %118.0 = FrameState         R     0x55de2aa8f4a0+1184: [%29.2, <blt is.na>, %50.3], env=e79.0
  void                    Deopt              !v    %118.0, Typecheck@0x55de2b187e70[Type#45], %50.3   !
BB32   <- [31, 117]
  val?            %32.0 = Phi                      %31.5:BB31, %117.2:BB117   <val?_>
  val?            %32.1 = %32.0
  lgl$-           %32.2 = AsLogical          e     %32.1
  lgl$-           %32.3 = LAnd                     %29.2, %32.2
  lgl$-           %32.4 = %32.3
  goto BB33
BB35   <- [34, 49]
  val?^ | miss    %35.0 = LdVar              eR    is.function, e79.0
  lgl$#-          %35.1 = Identical                <blt is.function>, %35.0   <@?>
  void                    Branch                   %35.1 -> BB46 (if true) | BB36 (if false)
BB46   <- [35]
  val?^ | miss    %46.0 = LdVar              eR    value, e79.0
  val?            %46.1 = Force!             !v    %46.0, e79.0   <val?_>
  lgl$#-          %46.2 = IsType                   %46.1 isA val?+
  void                    Branch                   %46.2 -> BB119 (if true) | BB120 (if false)
BB36   <- [35]
  val?^ | miss    %36.0 = LdVar              eR    value, e79.0
  val?            %36.1 = Force!             !v    %36.0, e79.0   <val?_>
  val?            %36.2 = CallBuiltin        !v    is.function(%36.1) e79.0
  val?            %36.3 = %36.2
  goto BB37
BB119   <- [46]
  val?+           %119.0 = CastType           d     dn %46.1   <val?_>
  lgl$#-          %119.1 = CallSafeBuiltin    wed   is.function(%119.0) 
  lgl$#-          %119.2 = %119.1
  goto BB37
BB120   <- [46]
  fs              %120.0 = FrameState         R     0x55de2aa8f4a0+1352: [<blt is.function>, %46.1], env=e79.0
  void                    Deopt              !v    %120.0, Typecheck@0x55de2b187e70[Type#55], %46.1   !
BB37   <- [36, 119]
  val?            %37.0 = Phi                      %36.3:BB36, %119.2:BB119   <val?_>
  val?            %37.1 = %37.0
  lgl$#-          %37.2 = CheckTrueFalse     we    %37.1
  void                    Branch                   %37.2 -> BB45 (if true) | BB38 (if false)
BB45   <- [37]
  val?^ | miss    %45.0 = LdVar              eR    value, e79.0
  void                    Visible            v     
  val?            %45.2 = Force!             !     %45.0, e79.0   <val?_>
  val?            %45.3 = %45.2
  goto BB41
BB38   <- [37]
  val?^ | miss    %38.0 = LdVar              eR    mustFind, e79.0
  void                    Visible            v     
  val?            %38.2 = Force!             !     %38.0, e79.0   <val?_>
  lgl$#-          %38.3 = CheckTrueFalse     we    %38.2
  void                    Branch                   %38.3 -> BB44 (if true) | BB39 (if false)
BB41   <- [45, 40]
  val?            %41.0 = Phi                      %40.2:BB40, %45.3:BB45
  val?            %41.1 = %41.0
  val?            %41.2 = %41.1
  goto BB42
BB44   <- [38]
  (cls|spec|blt)  %44.0 = LdFun              !     stop, e79.0
  prom-           %44.1 = MkArg                    unboundValue, getGeneric[0x55de29506fb0]_p9, e79.0
  val?            %44.2 = NamedCall          !     %44.0(%44.1, domain=na-lgl) e79.0   <val?_>
  val?            %44.3 = %44.2
  goto BB40
BB39   <- [38]
  void                    Visible            v     
  nil-            %39.1 = nil
  goto BB40
BB40   <- [39, 44]
  val?            %40.0 = Phi                      %39.1:BB39, %44.3:BB44
  val?            %40.1 = %40.0
  val?            %40.2 = %40.1
  goto BB41
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    f, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 3:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    package, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 6:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    package, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 7:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     c, e0.0
  val?            %0.2  = Call               !     %0.1("methods", "base") e0.0   <val?_>
  void                    Return             l     %0.2
Prom 9:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     gettextf, e0.0
  prom-           %0.2  = MkArg                    unboundValue, getGeneric[0x55de29506fb0]_p10, e0.0
  val?            %0.3  = Call               !     %0.1("no generic function found for %s", %0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 10:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     sQuote, e0.0
  prom-           %0.2  = MkArg                    unboundValue, getGeneric[0x55de29506fb0]_p11, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 11:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    f, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 12:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     getNamespace, e0.0
  prom-           %0.2  = MkArg                    unboundValue, getGeneric[0x55de29506fb0]_p13, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <val?_>
  void                    StVar              lW    ev, %0.3, e0.0
  (cls|spec|blt)  %0.5  = LdFun              !     .getGeneric, e0.0
  prom-           %0.6  = MkArg                    unboundValue, getGeneric[0x55de29506fb0]_p14, e0.0
  prom-           %0.7  = MkArg                    unboundValue, getGeneric[0x55de29506fb0]_p15, e0.0
  prom-           %0.8  = MkArg                    unboundValue, getGeneric[0x55de29506fb0]_p16, e0.0
  val?            %0.9  = Call               !     %0.5(%0.6, %0.7, %0.8) e0.0   <val?_>
  void                    Return             l     %0.9
Prom 13:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    package, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 14:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    f, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 15:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    ev, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 16:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    package, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 17:
BB0
  env             e0.0  = LdFunctionEnv            
  cls             %0.1  = MkCls                    getGeneric@Prom(17)0, e0.0
  void                    Return             l     %0.1
Prom 18:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    package, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 19:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     c, e0.0
  val?            %0.2  = Call               !     %0.1("methods", "base") e0.0   <val?_>
  void                    Return             l     %0.2
Prom 20:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    f, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 21:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    value, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 22:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    f, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 23:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    value, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 24:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    f, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 25:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    package, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 26:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    f, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 27:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    f, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 28:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     .primname, e0.0
  prom-           %0.2  = MkArg                    unboundValue, getGeneric[0x55de29506fb0]_p29, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 29:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    f, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 30:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    mustFind, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 31:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    name, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 32:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    def, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 33:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    .genericTable, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <env->
  void                    Return             l     %0.3

│ getGeneric[0x55de29506fb0]                                                   │
└──────────────────────────────────────────────────────────────────────────────┘
