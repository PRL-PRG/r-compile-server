
┌──────────────────────────────────────────────────────────────────────────────┐
│ .resetTable[0x55de2c28ec30]                                                  │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;NonRefl0,NonRefl1,NonRefl2,!Obj0,!Obj1,!Obj2,SimpleInt1│
│ Properties:                                                                  │
├────── Final PIR Version
.resetTable[0x55de2c28ec30]
BB0
  val?^           %0.0  = LdArg                    2
  val?^           %0.1  = LdArg                    1
  val?^           %0.2  = LdArg                    0
  val?^ | miss    %0.3  = LdVar              eR    .allowPrimitiveMethods, <env 0x55de28b56378>
  lgl$#-          %0.4  = Identical                %0.3, function(onOff) <(rir::DispatchTable*)0x55de2c|...
  void                    Branch                   %0.4 -> BB85 (if true) | BB86 (if false)
BB85   <- [0]
  env             e85.0 = MkEnv              l     table=%0.2, n=%0.1, signames=%0.0, parent=<env 0x55de28b56378>, context 1
  ct              %85.1 = PushContext        lCL   false, .allowPrimitiveMethods(FALSE), function(onOff) <(rir::DispatchTable*)0x55de2c|..., e85.0
  val?^ | miss    %85.2 = LdVar              eR    .Call, <env 0x55de28b56378>
  lgl$#-          %85.3 = Identical                <blt .Call>, %85.2   <true>
  void                    Branch                   %85.3 -> BB87 (if true) | BB88 (if false)
BB86   <- [0]
  env             e86.0 = (MkEnv)            l     table=%0.2, n=%0.1, signames=%0.0, parent=<env 0x55de28b56378>, context 1
  fs              %86.1 = FrameState         R     0x55de294dbb00+0: [], env=e86.0
  void                    Deopt              !v    %86.1, CallTarget@0x55de2cd6ca80[Call#0], %0.3
BB87   <- [85]
  val?^ | miss    %87.0 = LdVar              eR    C_R_M_setPrimitiveMethods, <env 0x55de28b56378>
  env             e87.1 = MkEnv              l     onOff=false, code="CLEAR", parent=<env 0x55de28b56378>, context 1
  val?            %87.2 = Force!<value>      !v    %87.0, e87.1   <vec>
  val?^ | miss    %87.3 = LdVar              eR    code, e87.1
  val?            %87.4 = Force!<value>      !v    %87.3, e87.1   <str$->
  val?            %87.5 = CallBuiltin        !v    .Call(%87.2, "", nil, %87.4, nil, nil) e87.1   <lgl$->
  lgl$#-          %87.6 = IsType                   %87.5 isA lgl$-
  void                    Branch                   %87.6 -> BB89 (if true) | BB90 (if false)
BB88   <- [85]
  fs              %88.0 = FrameState         R     0x55de294dbb00+32: [], env=e85.0
  env             e88.1 = (MkEnv)            l     onOff=false, parent=<env 0x55de28b56378>, context 1
  fs              %88.2 = FrameState         R     0x55de2ba62e00+15: [false], env=e88.1, next=%88.0
  void                    Deopt              !v    %88.2, DeadBranchReached@0x55de2c1bd198[Test#0], %85.3   !
BB89   <- [87]
  lgl$-           %89.0 = CastType           d     dn %87.5
  val?            %89.1 = PopContext         C     %89.0, %85.1   <lgl$->
  lgl$#-          %89.2 = IsType                   %89.1 isA lgl$-
  void                    Branch                   %89.2 -> BB91 (if true) | BB92 (if false)
BB90   <- [87]
  fs              %90.0 = FrameState         R     0x55de294dbb00+32: [], env=e85.0
  fs              %90.1 = FrameState         R     0x55de2ba62e00+200: [%87.5], env=e87.1, next=%90.0
  void                    Deopt              !v    %90.1, Typecheck@0x55de2c1bd198[Type#5], %87.5   !
BB91   <- [89]
  lgl$-           %91.0 = CastType           d     dn %89.1
  void                    StVar              lW    primMethods, %91.0, e85.0
  (cls|spec|blt)  %91.2 = LdFun              !v    on.exit, <0x55de2854e270>, e85.0
  prom-           %91.3 = MkArg                    unboundValue, .resetTable[0x55de2c28ec30]_p0, e85.0
  val?            %91.4 = Call               !v    %91.2(%91.3) e85.0
  (cls|spec|blt)  %91.5 = LdFun              !v    rep, <0x55de285639b0>, e85.0
  prom-           %91.6 = MkArg                    unboundValue, .resetTable[0x55de2c28ec30]_p2, e85.0
  val?            %91.7 = Call               !v    %91.5("ANY", %91.6) e85.0   <str->
  void                    StVar              lW    anyLabel, %91.7, e85.0
  (cls|spec|blt)  %91.9 = LdFun              !v    rep, <0x55de285639b0>, e85.0
  prom-           %91.10 = MkArg                    unboundValue, .resetTable[0x55de2c28ec30]_p3, e85.0
  val?            %91.11 = Call               !v    %91.9("methods", %91.10) e85.0   <str->
  void                    StVar              lW    anyPkg, %91.11, e85.0
  val?^ | miss    %91.13 = LdVar              eR    n, e85.0
  val?            %91.14 = Force!<wrapped>    !v    %91.13, e85.0   <int$->
  lgl$#-          %91.15 = IsType                   %91.14 isA int$-
  void                    Branch                   %91.15 -> BB93 (if true) | BB94 (if false)
BB92   <- [89]
  fs              %92.0 = FrameState         R     0x55de294dbb00+32: [%89.1], env=e85.0
  void                    Deopt              !v    %92.0, Typecheck@0x55de2cd6ca80[Type#0], %89.1   !
BB93   <- [91]
  int$-           %93.0 = CastType           d     dn %91.14
  int-            %93.1 = Colon              d     1L, %93.0, elided   <int->
  void                    StVar              lW    seqN, %93.1, e85.0
  val?^ | miss    %93.3 = LdVar              eR    names, e85.0
  lgl$#-          %93.4 = Identical                <blt names>, %93.3   <true>
  void                    Branch                   %93.4 -> BB95 (if true) | BB96 (if false)
BB94   <- [91]
  fs              %94.0 = FrameState         R     0x55de294dbb00+196: [1L, %91.14], env=e85.0
  void                    Deopt              !v    %94.0, Typecheck@0x55de2cd6ca80[Type#7], %91.14   !
BB95   <- [93]
  val?^ | miss    %95.0 = LdVar              eR    table, e85.0
  val?            %95.1 = Force!<lazy>       !v    %95.0, e85.0   <env->
  lgl$#-          %95.2 = IsType                   %95.1 isA val?-
  void                    Branch                   %95.2 -> BB97 (if true) | BB98 (if false)
BB96   <- [93]
  fs              %96.0 = FrameState         R     0x55de294dbb00+216: [], env=e85.0
  void                    Deopt              !v    %96.0, DeadBranchReached@0x55de2cd6ca80[Test#0], %93.4   !
BB97   <- [95]
  val?-           %97.0 = CastType           d     dn %95.1   <env->
  val+            %97.1 = CallSafeBuiltin    wed   names(%97.0)    <str->
  int$-           %97.2 = Length                   %97.1
  void                    StVar              lW    labels, %97.1, e85.0
  int$-           %97.4 = Inc                      0L
  lgl$-           %97.5 = Lt                 d     %97.2, %97.4, elided   <false>
  lgl$#-          %97.6 = Identical                %97.5, true
  void                    Branch                   %97.6 -> BB100 (if true) | BB99 (if false)
BB98   <- [95]
  fs              %98.0 = FrameState         R     0x55de294dbb00+285: [<blt names>, %95.1], env=e85.0
  void                    Deopt              !v    %98.0, Typecheck@0x55de2cd6ca80[Type#10], %95.1   !
BB100   <- [97]
  fs              %100.0 = FrameState         R     0x55de294dbb00+321: [], env=e85.0
  void                    Deopt              !v    %100.0, DeadBranchReached@0x55de2cd6ca80[Test#1], %97.6   !
BB99   <- [97]
  val?            %99.0 = Extract2_1D        wed   %97.1, %97.4, elided
  void                    StVar              lW    what, %99.0, e85.0
  val?^ | miss    %99.2 = LdVar              eR    get, e85.0
  lgl$#-          %99.3 = Identical                %99.2, function(x, pos=-(1L), envir=as.environment(po|...
  void                    Branch                   %99.3 -> BB101 (if true) | BB102 (if false)
BB101   <- [99]
  prom-           %101.0 = MkArg                    unboundValue, .resetTable[0x55de2c28ec30]_p4 (!refl), e85.0
  prom-           %101.1 = MkArg                    unboundValue, .resetTable[0x55de2c28ec30]_p5, e85.0
  val?            %101.2 = StaticCall         !v    get[0x55de2d46ecb0](%101.0, missingArg, %101.1) { 0 2n } e85.0   <cls>
  void                    StVar              lW    method, %101.2, e85.0
  val?^ | miss    %101.4 = LdVar              eR    is.primitive, e85.0
  lgl$#-          %101.5 = Identical                %101.4, function(x) <(rir::DispatchTable*)0x55de2ac9a9|...
  void                    Branch                   %101.5 -> BB103 (if true) | BB104 (if false)
BB102   <- [99]
  fs              %102.0 = FrameState         R     0x55de294dbb00+375: [%97.1, %97.2, %97.4], env=e85.0
  void                    Deopt              !v    %102.0, CallTarget@0x55de2cd6ca80[Call#6], %99.2   !
BB103   <- [101]
  str$-           %103.0 = CallSafeBuiltin    wed   typeof(%101.2)    <str$->
  int$-           %103.1 = Length                   %103.0
  lgl$-           %103.2 = Eq                 d     %103.1, 1L, elided   <true>
  lgl$#-          %103.3 = Identical                %103.2, true
  void                    Branch                   %103.3 -> BB105 (if true) | BB106 (if false)
BB104   <- [101]
  fs              %104.0 = FrameState         R     0x55de294dbb00+434: [%97.1, %97.2, %97.4], env=e85.0
  void                    Deopt              !v    %104.0, CallTarget@0x55de2cd6ca80[Call#7], %101.4   !
BB105   <- [103]
  lgl$-           %105.0 = CallSafeBuiltin    wed   is.na(%103.0) 
  lgl$#-          %105.1 = CheckTrueFalse     e     %105.0   <false>
  void                    Branch                   %105.1 -> BB108 (if true) | BB107 (if false)
BB106   <- [103]
  prom-           %106.0 = MkArg                    unboundValue, .resetTable[0x55de2c28ec30]_p6 (!refl), e85.0
  val?^           %106.1 = CastType                 up %106.0
  env             e106.2 = (MkEnv)            l     x=%106.1, parent=R_BaseNamespace, context 0
  env             e106.3 = MaterializeEnv           , e106.2   <@?>
  prom-           %106.4 = MkArg                    %101.2, .resetTable[0x55de2c28ec30]_p67 (!refl), e106.3
  val?~           %106.5 = CastType                 up %106.4
  fs              %106.6 = FrameState         R     0x55de294dbb00+466: [%97.1, %97.2, %97.4], env=e85.0
  fs              %106.7 = FrameState         R     0x55de2c9144e0+32: [], env=e106.3, next=%106.6
  env             e106.8 = (MkEnv)            l     x=%106.5, parent=R_BaseNamespace, context -1
  fs              %106.9 = FrameState         R     0x55de2a4e4290+27: [%103.0], env=e106.8, next=%106.7
  void                    Deopt              !v    %106.9, DeadBranchReached@0x55de2ccbb258[Test#1], %103.3   !
BB108   <- [105]
  void                    Nop                !     
  lgl$#-          %108.1 = %105.1
  dr              %108.2 = DeadBranchReached@0x55de2ccbb258[Test#7]
  goto BB23
BB107   <- [105]
  lgl$-           %107.0 = Eq                 d     %103.0, special, elided
  lgl$#-          %107.1 = CheckTrueFalse     e     %107.0
  void                    Branch                   %107.1 -> BB83 (if true) | BB25 (if false)
BB23   <- [108, 112]
  val?^ | miss    %23.0 = Phi                      %108.1:BB108, %112.1:BB112
  val?^ | miss    %23.1 = %23.0
  dr              %23.2 = Phi                      %108.2:BB108, %112.2:BB112
  dr              %23.3 = %23.2
  prom-           %23.4 = MkArg                    unboundValue, .resetTable[0x55de2c28ec30]_p6 (!refl), e85.0
  val?^           %23.5 = CastType                 up %23.4
  fs              %23.6 = FrameState         R     0x55de294dbb00+466: [%97.1, %97.2, %97.4], env=e85.0
  env             e23.7 = (MkEnv)            l     x=%23.5, parent=R_BaseNamespace, context 0
  fs              %23.8 = FrameState         R     0x55de2c9144e0+240: [%103.0, %105.0], env=e23.7, next=%23.6
  void                    Deopt              !v    %23.8, %23.3, %23.1   !
BB83   <- [107]
  void                    Nop                !     
  goto BB82
BB25   <- [107]
  lgl$-           %25.0 = Eq                 d     %103.0, builtin, elided
  lgl$#-          %25.1 = CheckTrueFalse     e     %25.0
  void                    Branch                   %25.1 -> BB81 (if true) | BB26 (if false)
BB82   <- [83, 81]
  void                    Nop                !     
  lgl$#-          %82.1 = true
  goto BB27
BB81   <- [25]
  void                    Nop                !     
  goto BB82
BB26   <- [25]
  void                    Nop                !     
  lgl$#-          %26.1 = false
  goto BB27
BB27   <- [26, 82]
  lgl$#-          %27.0 = Phi                      %26.1:BB26, %82.1:BB82
  lgl$#-          %27.1 = %27.0
  void                    Branch                   %27.1 -> BB80 (if true) | BB28 (if false)
BB80   <- [27]
  val?^ | miss    %80.0 = LdVar              eR    anyLabel, e85.0
  val?            %80.1 = Force!             !v    %80.0, e85.0   <val?_>
  void                    StVar              lW    newSig, %80.1, e85.0
  goto BB33
BB28   <- [27]
  val?^ | miss    %28.0 = LdVar              eR    is, e85.0
  lgl$#-          %28.1 = Identical                %28.0, function(object, class2) <(rir::DispatchTable*|...
  void                    Branch                   %28.1 -> BB111 (if true) | BB112 (if false)
BB33   <- [80, 32]
  val?^ | miss    %33.0 = LdVar              eR    is, e85.0
  lgl$#-          %33.1 = Identical                %33.0, function(object, class2) <(rir::DispatchTable*|...
  void                    Branch                   %33.1 -> BB109 (if true) | BB110 (if false)
BB111   <- [28]
  prom-           %111.0 = MkArg                    unboundValue, .resetTable[0x55de2c28ec30]_p7 (!refl), e85.0
  val?            %111.1 = Call               !v    function(object, class2) <(rir::DispatchTable*|...(%111.0, "MethodDefinition") e85.0   <lgl$->
  lgl$#-          %111.2 = IsType                   %111.1 isA lgl$-
  void                    Branch                   %111.2 -> BB115 (if true) | BB116 (if false)
BB112   <- [28]
  void                    Nop                !     
  val?^ | miss    %112.1 = %28.0
  dr              %112.2 = CallTarget@0x55de2cd6ca80[Call#8]
  goto BB23
BB109   <- [33]
  prom-           %109.0 = MkArg                    unboundValue, .resetTable[0x55de2c28ec30]_p10, e85.0
  val?            %109.1 = Call               !v    function(object, class2) <(rir::DispatchTable*|...(%109.0, "MethodDefinition") e85.0   <lgl$->
  lgl$#-          %109.2 = IsType                   %109.1 isA lgl$-
  void                    Branch                   %109.2 -> BB113 (if true) | BB114 (if false)
BB110   <- [33]
  fs              %110.0 = FrameState         R     0x55de294dbb00+863: [%97.1, %97.2, %97.4], env=e85.0
  void                    Deopt              !v    %110.0, CallTarget@0x55de2cd6ca80[Call#18], %33.0   !
BB115   <- [111]
  lgl$-           %115.0 = CastType           d     dn %111.1
  lgl$#-          %115.1 = CheckTrueFalse     e     %115.0
  void                    Branch                   %115.1 -> BB32 (if true) | BB31 (if false)
BB116   <- [111]
  fs              %116.0 = FrameState         R     0x55de294dbb00+514: [%97.1, %97.2, %97.4, %111.1], env=e85.0
  void                    Deopt              !v    %116.0, Typecheck@0x55de2cd6ca80[Type#19], %111.1   !
BB113   <- [109]
  lgl$-           %113.0 = CastType           d     dn %109.1
  lgl$#-          %113.1 = CheckTrueFalse     e     %113.0
  void                    Branch                   %113.1 -> BB73 (if true) | BB38 (if false)
BB114   <- [109]
  void                    Nop                !     
  val?            %114.1 = %109.1
  dr              %114.2 = Typecheck@0x55de2cd6ca80[Type#39]
  goto BB36
BB32   <- [115]
  (cls|spec|blt)  %32.0 = LdFun              !v    @, <0x55de2854ebd8>, e85.0
  prom-           %32.1 = MkArg                    unboundValue, .resetTable[0x55de2c28ec30]_p8, e85.0
  prom-           %32.2 = MkArg                    unboundValue, .resetTable[0x55de2c28ec30]_p9, e85.0
  val?            %32.3 = Call               !v    %32.0(%32.1, %32.2) e85.0   <str$>
  void                    StVar              lW    newSig, %32.3, e85.0
  goto BB33
BB31   <- [115]
  (cls|spec|blt)  %31.0 = LdFun              !v    is, e85.0
  fs              %31.1 = FrameState         R     0x55de294dbb00+530: [%97.1, %97.2, %97.4, %31.0], env=e85.0
  void                    Deopt              !v    %31.1, DeadCall@0x55de2cd6ca80[Call#9], %31.0   !
BB73   <- [113]
  val?^ | miss    %73.0 = LdVar              eR    packageSlot, e85.0
  lgl$#-          %73.1 = Identical                %73.0, function(object) <(rir::DispatchTable*)0x55de2|...
  void                    Branch                   %73.1 -> BB117 (if true) | BB118 (if false)
BB38   <- [113]
  val?^ | miss    %38.0 = LdVar              eR    .sigLabel, e85.0
  lgl$#-          %38.1 = Identical                %38.0, function(sig) <(rir::DispatchTable*)0x55de2b41|...
  void                    Branch                   %38.1 -> BB119 (if true) | BB120 (if false)
BB36   <- [114, 118, 120, 122]
  val?^ | miss    %36.0 = Phi                      %114.1:BB114, %118.1:BB118, %120.1:BB120, %122.1:BB122
  val?^ | miss    %36.1 = %36.0
  dr              %36.2 = Phi                      %114.2:BB114, %118.2:BB118, %120.2:BB120, %122.2:BB122
  dr              %36.3 = %36.2
  fs              %36.4 = FrameState         R     0x55de294dbb00+900: [%97.1, %97.2, %97.4, %109.1], env=e85.0
  void                    Deopt              !v    %36.4, %36.3, %36.1   !
BB117   <- [73]
  prom-           %117.0 = MkArg                    unboundValue, .resetTable[0x55de2c28ec30]_p35, e85.0
  ct              %117.1 = PushContext        lCL   %117.0, packageSlot(newSig), function(object) <(rir::DispatchTable*)0x55de2|..., e85.0
  val?^           %117.2 = CastType                 up %117.0
  val?^ | miss    %117.3 = LdVar              eR    attr, <env 0x55de28b56378>
  lgl$#-          %117.4 = Identical                <blt attr>, %117.3   <true>
  void                    Branch                   %117.4 -> BB123 (if true) | BB124 (if false)
BB118   <- [73]
  void                    Nop                !     
  val?^ | miss    %118.1 = %73.0
  dr              %118.2 = CallTarget@0x55de2cd6ca80[Call#22]
  goto BB36
BB119   <- [38]
  prom-           %119.0 = MkArg                    unboundValue, .resetTable[0x55de2c28ec30]_p11, e85.0
  val?^           %119.1 = CastType                 up %119.0
  val?^ | miss    %119.2 = LdVar              eR    paste, <env 0x55de28b56378>
  lgl$#-          %119.3 = Identical                %119.2, function(..., sep=" ", collapse=NULL, recycle0|...
  void                    Branch                   %119.3 -> BB121 (if true) | BB122 (if false)
BB120   <- [38]
  void                    Nop                !     
  val?^ | miss    %120.1 = %38.0
  dr              %120.2 = CallTarget@0x55de2cd6ca80[Call#19]
  goto BB36
BB123   <- [117]
  env             e123.0 = MkEnv              l     object=%117.2, parent=<env 0x55de28b56378>, context 1
  val?            %123.1 = Force!<lazy>       !vL   %117.2, e123.0   <(str|other)>
  val?            %123.2 = CallBuiltin        !v    attr(%123.1, "package") e123.0   <(nil|str)->
  val?            %123.3 = PopContext         C     %123.2, %117.1   <str$->
  void                    StVar              lW    pkgs, %123.3, e85.0
  val?^ | miss    %123.5 = LdVar              eR    as, e85.0
  lgl$#-          %123.6 = Identical                %123.5, function(object, Class, strict=TRUE, ext=possi|...
  void                    Branch                   %123.6 -> BB125 (if true) | BB126 (if false)
BB124   <- [117]
  fs              %124.0 = FrameState         R     0x55de294dbb00+994: [%97.1, %97.2, %97.4], env=e85.0
  env             e124.1 = (MkEnv)            l     object=%117.2, parent=<env 0x55de28b56378>, context 1
  fs              %124.2 = FrameState         R     0x55de2aec1580+17: [<blt attr>, %117.4], env=e124.1, next=%124.0
  void                    Deopt              !v    %124.2, DeadBranchReached@0x55de2b5917d8[Test#0], %117.4   !
BB121   <- [119]
  env             e121.0 = MkEnv              l     sig=%119.1, parent=<env 0x55de28b56378>, context 0
  prom-           %121.1 = MkArg                    unboundValue, .resetTable[0x55de2c28ec30]_p68, e121.0
  dots-           %121.2 = DotsList           l     %121.1
  val?^ | miss    %121.3 = CastType                 up %121.1
  env             e121.4 = MkEnv              l     ...=%121.2, sep(miss)=" ", collapse="#", recycle0(miss)=false, parent=R_BaseNamespace, context -1
  val?            %121.5 = Force!             !vL   %121.3, e121.4
  val+            %121.6 = CallSafeBuiltin    wed   list(%121.5)    <vec->
  val+            %121.7 = CallSafeBuiltin    wed   paste(%121.6, " ", "#", false)    <str$->
  void                    StVar              lW    newLabel, %121.7, e85.0
  goto BB39
BB122   <- [119]
  void                    Nop                !     
  val?^ | miss    %122.1 = %119.2
  dr              %122.2 = CallTarget@0x55de2b0fcef8[Call#0]
  goto BB36
BB125   <- [123]
  prom-           %125.0 = MkArg                    unboundValue, .resetTable[0x55de2c28ec30]_p36, e85.0
  val?            %125.1 = Call               !v    function(object, Class, strict=TRUE, ext=possi|...(%125.0, "signature") e85.0   <str>
  void                    StVar              lW    newSig, %125.1, e85.0
  (cls|spec|blt)  %125.3 = LdFun              !v    <-, <0x55de28543da8>, e85.0
  prom-           %125.4 = MkArg                    unboundValue, .resetTable[0x55de2c28ec30]_p41, e85.0
  prom-           %125.5 = MkArg                    unboundValue, .resetTable[0x55de2c28ec30]_p44, e85.0
  val?            %125.6 = Call               !v    %125.3(%125.4, %125.5) e85.0
  (cls|spec|blt)  %125.7 = LdFun              !v    <-, <0x55de28543da8>, e85.0
  prom-           %125.8 = MkArg                    unboundValue, .resetTable[0x55de2c28ec30]_p45, e85.0
  prom-           %125.9 = MkArg                    unboundValue, .resetTable[0x55de2c28ec30]_p48, e85.0
  val?            %125.10 = Call               !v    %125.7(%125.8, %125.9) e85.0
  (cls|spec|blt)  %125.11 = LdFun              !v    <-, <0x55de28543da8>, e85.0
  prom-           %125.12 = MkArg                    unboundValue, .resetTable[0x55de2c28ec30]_p53, e85.0
  prom-           %125.13 = MkArg                    unboundValue, .resetTable[0x55de2c28ec30]_p56, e85.0
  val?            %125.14 = Call               !v    %125.11(%125.12, %125.13) e85.0
  val?^ | miss    %125.15 = LdVar              eR    .sigLabel, e85.0
  lgl$#-          %125.16 = Identical                %125.15, function(sig) <(rir::DispatchTable*)0x55de2b41|...
  void                    Branch                   %125.16 -> BB131 (if true) | BB132 (if false)
BB126   <- [123]
  fs              %126.0 = FrameState         R     0x55de294dbb00+1008: [%97.1, %97.2, %97.4], env=e85.0
  void                    Deopt              !v    %126.0, CallTarget@0x55de2cd6ca80[Call#23], %123.5   !
BB39   <- [121, 133]
  val?^ | miss    %39.0 = LdVar              eR    remove, e85.0
  lgl$#-          %39.1 = Identical                %39.0, function(..., list=character(), pos=-(1), envi|...
  void                    Branch                   %39.1 -> BB127 (if true) | BB128 (if false)
BB131   <- [125]
  prom-           %131.0 = MkArg                    unboundValue, .resetTable[0x55de2c28ec30]_p61, e85.0
  val?^           %131.1 = CastType                 up %131.0
  val?^ | miss    %131.2 = LdVar              eR    paste, <env 0x55de28b56378>
  lgl$#-          %131.3 = Identical                %131.2, function(..., sep=" ", collapse=NULL, recycle0|...
  void                    Branch                   %131.3 -> BB133 (if true) | BB134 (if false)
BB132   <- [125]
  void                    Nop                !     
  val?^ | miss    %132.1 = %125.15
  dr              %132.2 = CallTarget@0x55de2cd6ca80[Call#36]
  goto BB78
BB127   <- [39]
  prom-           %127.0 = MkArg                    unboundValue, .resetTable[0x55de2c28ec30]_p16, e85.0
  prom-           %127.1 = MkArg                    unboundValue, .resetTable[0x55de2c28ec30]_p17, e85.0
  val?            %127.2 = StaticCall         !v    remove[0x55de2b508cf0](missingArg, %127.0, missingArg, %127.1) { 1n 3n } e85.0
  val?^ | miss    %127.3 = LdVar              eR    assign, e85.0
  lgl$#-          %127.4 = Identical                %127.3, function(x, value, pos=-(1), envir=as.environm|...
  void                    Branch                   %127.4 -> BB129 (if true) | BB130 (if false)
BB128   <- [39]
  fs              %128.0 = FrameState         R     0x55de294dbb00+1219: [%97.1, %97.2, %97.4], env=e85.0
  void                    Deopt              !v    %128.0, CallTarget@0x55de2cd6ca80[Call#37], %39.0   !
BB133   <- [131]
  env             e133.0 = MkEnv              l     sig=%131.1, parent=<env 0x55de28b56378>, context 0
  prom-           %133.1 = MkArg                    unboundValue, .resetTable[0x55de2c28ec30]_p62, e133.0
  dots-           %133.2 = DotsList           l     %133.1
  val?^ | miss    %133.3 = CastType                 up %133.1
  env             e133.4 = MkEnv              l     ...=%133.2, sep(miss)=" ", collapse="#", recycle0(miss)=false, parent=R_BaseNamespace, context -1
  val?            %133.5 = Force!             !vL   %133.3, e133.4
  val+            %133.6 = CallSafeBuiltin    wed   list(%133.5)    <vec->
  val+            %133.7 = CallSafeBuiltin    wed   paste(%133.6, " ", "#", false)    <str$->
  void                    StVar              lW    newLabel, %133.7, e85.0
  goto BB39
BB134   <- [131]
  void                    Nop                !     
  val?^ | miss    %134.1 = %131.2
  dr              %134.2 = CallTarget@0x55de2b0fcef8[Call#0]
  goto BB78
BB78   <- [132, 134]
  val?^ | miss    %78.0 = Phi                      %132.1:BB132, %134.1:BB134
  val?^ | miss    %78.1 = %78.0
  dr              %78.2 = Phi                      %132.2:BB132, %134.2:BB134
  dr              %78.3 = %78.2
  fs              %78.4 = FrameState         R     0x55de294dbb00+1172: [%97.1, %97.2, %97.4, %125.14], env=e85.0
  void                    Deopt              !v    %78.4, %78.3, %78.1   !
BB129   <- [127]
  prom-           %129.0 = MkArg                    unboundValue, .resetTable[0x55de2c28ec30]_p18, e85.0
  prom-           %129.1 = MkArg                    unboundValue, .resetTable[0x55de2c28ec30]_p19, e85.0
  prom-           %129.2 = MkArg                    unboundValue, .resetTable[0x55de2c28ec30]_p20, e85.0
  val?            %129.3 = StaticCall         !v    assign[0x55de2f6a2170](%129.0, %129.1, missingArg, %129.2) { 0 1 3n } e85.0
  int$-           %129.4 = %97.4
  goto BB44
BB130   <- [127]
  fs              %130.0 = FrameState         R     0x55de294dbb00+1273: [%97.1, %97.2, %97.4, %127.2], env=e85.0
  void                    Deopt              !v    %130.0, CallTarget@0x55de2cd6ca80[Call#38], %127.3   !
BB44   <- [129, 155]
  int$-           %44.0 = Phi                      %129.4:BB129, %155.4:BB155
  int$-           %44.1 = %44.0
  int$-           %44.2 = Inc                      %44.1
  lgl$-           %44.3 = Lt                 d     %97.2, %44.2, elided
  lgl$#-          %44.4 = Identical                %44.3, true
  void                    Branch                   %44.4 -> BB72 (if true) | BB45 (if false)
BB72   <- [44]
  void                    Visible            v     
  void                    Return             l     nil
BB45   <- [44]
  val?            %45.0 = Extract2_1D        wed   %97.1, %44.2, elided
  void                    StVar              lW    what, %45.0, e85.0
  val?^ | miss    %45.2 = LdVar              eR    get, e85.0
  lgl$#-          %45.3 = Identical                %45.2, function(x, pos=-(1L), envir=as.environment(po|...
  void                    Branch                   %45.3 -> BB135 (if true) | BB136 (if false)
BB135   <- [45]
  prom-           %135.0 = MkArg                    unboundValue, .resetTable[0x55de2c28ec30]_p21 (!refl), e85.0
  prom-           %135.1 = MkArg                    unboundValue, .resetTable[0x55de2c28ec30]_p22, e85.0
  val?            %135.2 = StaticCall         !v    get[0x55de2d46ecb0](%135.0, missingArg, %135.1) { 0 2n } e85.0   <spec->
  void                    StVar              lW    method, %135.2, e85.0
  val?^ | miss    %135.4 = LdVar              eR    is.primitive, e85.0
  lgl$#-          %135.5 = Identical                %135.4, function(x) <(rir::DispatchTable*)0x55de2ac9a9|...
  void                    Branch                   %135.5 -> BB137 (if true) | BB138 (if false)
BB136   <- [45]
  fs              %136.0 = FrameState         R     0x55de294dbb00+1358: [%97.1, %97.2, %44.2], env=e85.0
  void                    Deopt              !v    %136.0, CallTarget@0x55de2cd6ca80[Call#39], %45.2   !
BB137   <- [135]
  val             %137.0 = ChkMissing         e     %135.2
  str$-           %137.1 = CallSafeBuiltin    wed   typeof(%135.2)    <str$->
  int$-           %137.2 = Length                   %137.1
  lgl$-           %137.3 = Eq                 d     %137.2, 1L, elided   <true>
  lgl$#-          %137.4 = Identical                %137.3, true
  void                    Branch                   %137.4 -> BB139 (if true) | BB140 (if false)
BB138   <- [135]
  fs              %138.0 = FrameState         R     0x55de294dbb00+1417: [%97.1, %97.2, %44.2], env=e85.0
  void                    Deopt              !v    %138.0, CallTarget@0x55de2cd6ca80[Call#40], %135.4   !
BB139   <- [137]
  lgl$-           %139.0 = CallSafeBuiltin    wed   is.na(%137.1) 
  lgl$#-          %139.1 = CheckTrueFalse     e     %139.0   <false>
  void                    Branch                   %139.1 -> BB142 (if true) | BB141 (if false)
BB140   <- [137]
  prom-           %140.0 = MkArg                    %135.2, .resetTable[0x55de2c28ec30]_p23 (!refl), e85.0
  val?~           %140.1 = CastType                 up %140.0
  env             e140.2 = MkEnv              l     x=%140.1, parent=R_BaseNamespace, context 0
  prom-           %140.3 = MkArg                    %135.2, .resetTable[0x55de2c28ec30]_p75 (!refl), e140.2
  val?~           %140.4 = CastType                 up %140.3
  fs              %140.5 = FrameState         R     0x55de294dbb00+1449: [%97.1, %97.2, %44.2], env=e85.0
  fs              %140.6 = FrameState         R     0x55de2c9144e0+32: [], env=e140.2, next=%140.5
  env             e140.7 = (MkEnv)            l     x=%140.4, parent=R_BaseNamespace, context -1
  fs              %140.8 = FrameState         R     0x55de2a4e4290+27: [%137.1], env=e140.7, next=%140.6
  void                    Deopt              !v    %140.8, DeadBranchReached@0x55de2ccbb258[Test#1], %137.4   !
BB142   <- [139]
  void                    Nop                !     
  lgl$#-          %142.1 = %139.1
  dr              %142.2 = DeadBranchReached@0x55de2ccbb258[Test#7]
  goto BB52
BB141   <- [139]
  lgl$-           %141.0 = Eq                 d     %137.1, special, elided
  lgl$#-          %141.1 = CheckTrueFalse     e     %141.0
  void                    Branch                   %141.1 -> BB71 (if true) | BB54 (if false)
BB52   <- [142, 144]
  val?^ | miss    %52.0 = Phi                      %142.1:BB142, %144.1:BB144
  val?^ | miss    %52.1 = %52.0
  dr              %52.2 = Phi                      %142.2:BB142, %144.2:BB144
  dr              %52.3 = %52.2
  prom-           %52.4 = MkArg                    %135.2, .resetTable[0x55de2c28ec30]_p23 (!refl), e85.0
  val?~           %52.5 = CastType                 up %52.4
  fs              %52.6 = FrameState         R     0x55de294dbb00+1449: [%97.1, %97.2, %44.2], env=e85.0
  env             e52.7 = (MkEnv)            l     x=%52.5, parent=R_BaseNamespace, context 0
  fs              %52.8 = FrameState         R     0x55de2c9144e0+240: [%137.1, %139.0], env=e52.7, next=%52.6
  void                    Deopt              !v    %52.8, %52.3, %52.1   !
BB71   <- [141]
  void                    Nop                !     
  goto BB70
BB54   <- [141]
  lgl$-           %54.0 = Eq                 d     %137.1, builtin, elided
  lgl$#-          %54.1 = CheckTrueFalse     e     %54.0
  void                    Branch                   %54.1 -> BB69 (if true) | BB55 (if false)
BB70   <- [71, 69]
  void                    Nop                !     
  lgl$#-          %70.1 = true
  goto BB56
BB69   <- [54]
  void                    Nop                !     
  goto BB70
BB55   <- [54]
  void                    Nop                !     
  lgl$#-          %55.1 = false
  goto BB56
BB56   <- [55, 70]
  lgl$#-          %56.0 = Phi                      %55.1:BB55, %70.1:BB70
  lgl$#-          %56.1 = %56.0
  void                    Branch                   %56.1 -> BB58 (if true) | BB57 (if false)
BB58   <- [56]
  val?^ | miss    %58.0 = LdVar              eR    anyLabel, e85.0
  lgl$#-          %58.1 = IsType                   %58.0 isA val?~- | miss
  void                    Branch                   %58.1 -> BB143 (if true) | BB144 (if false)
BB57   <- [56]
  (cls|spec|blt)  %57.0 = LdFun              !v    is, e85.0
  fs              %57.1 = FrameState         R     0x55de294dbb00+1465: [%97.1, %97.2, %44.2, %57.0], env=e85.0
  void                    Deopt              !v    %57.1, DeadCall@0x55de2cd6ca80[Call#41], %57.0   !
BB143   <- [58]
  val?~- | miss   %143.0 = CastType           d     dn %58.0
  val?-           %143.1 = Force!<value>            %143.0,    <str->
  void                    StVar              lW    newSig, %143.1, e85.0
  val?^ | miss    %143.3 = LdVar              eR    is, e85.0
  lgl$#-          %143.4 = Identical                %143.3, function(object, class2) <(rir::DispatchTable*|...
  void                    Branch                   %143.4 -> BB145 (if true) | BB146 (if false)
BB144   <- [58]
  void                    Nop                !     
  val?^ | miss    %144.1 = %58.0
  dr              %144.2 = Typecheck@0x55de2cd6ca80[Type#111]
  goto BB52
BB145   <- [143]
  prom-           %145.0 = MkArg                    unboundValue, .resetTable[0x55de2c28ec30]_p24 (!refl), e85.0
  val?            %145.1 = Call               !v    function(object, class2) <(rir::DispatchTable*|...(%145.0, "MethodDefinition") e85.0   <lgl$->
  lgl$#-          %145.2 = IsType                   %145.1 isA lgl$-
  void                    Branch                   %145.2 -> BB147 (if true) | BB148 (if false)
BB146   <- [143]
  fs              %146.0 = FrameState         R     0x55de294dbb00+1846: [%97.1, %97.2, %44.2], env=e85.0
  void                    Deopt              !v    %146.0, CallTarget@0x55de2cd6ca80[Call#51], %143.3   !
BB147   <- [145]
  lgl$-           %147.0 = CastType           d     dn %145.1
  lgl$#-          %147.1 = CheckTrueFalse     e     %147.0
  void                    Branch                   %147.1 -> BB68 (if true) | BB63 (if false)
BB148   <- [145]
  void                    Nop                !     
  val?            %148.1 = %145.1
  dr              %148.2 = Typecheck@0x55de2cd6ca80[Type#113]
  goto BB61
BB68   <- [147]
  (cls|spec|blt)  %68.0 = LdFun              !v    packageSlot, e85.0
  fs              %68.1 = FrameState         R     0x55de294dbb00+1950: [%97.1, %97.2, %44.2, %68.0], env=e85.0
  void                    Deopt              !v    %68.1, DeadCall@0x55de2cd6ca80[Call#55], %68.0   !
BB63   <- [147]
  val?^ | miss    %63.0 = LdVar              eR    .sigLabel, e85.0
  lgl$#-          %63.1 = Identical                %63.0, function(sig) <(rir::DispatchTable*)0x55de2b41|...
  void                    Branch                   %63.1 -> BB149 (if true) | BB150 (if false)
BB61   <- [148, 150, 152]
  val?^ | miss    %61.0 = Phi                      %148.1:BB148, %150.1:BB150, %152.1:BB152
  val?^ | miss    %61.1 = %61.0
  dr              %61.2 = Phi                      %148.2:BB148, %150.2:BB150, %152.2:BB152
  dr              %61.3 = %61.2
  fs              %61.4 = FrameState         R     0x55de294dbb00+1883: [%97.1, %97.2, %44.2, %145.1], env=e85.0
  void                    Deopt              !v    %61.4, %61.3, %61.1   !
BB149   <- [63]
  prom-           %149.0 = MkArg                    unboundValue, .resetTable[0x55de2c28ec30]_p25, e85.0
  val?^           %149.1 = CastType                 up %149.0
  val?^ | miss    %149.2 = LdVar              eR    paste, <env 0x55de28b56378>
  lgl$#-          %149.3 = Identical                %149.2, function(..., sep=" ", collapse=NULL, recycle0|...
  void                    Branch                   %149.3 -> BB151 (if true) | BB152 (if false)
BB150   <- [63]
  void                    Nop                !     
  val?^ | miss    %150.1 = %63.0
  dr              %150.2 = CallTarget@0x55de2cd6ca80[Call#52]
  goto BB61
BB151   <- [149]
  env             e151.0 = MkEnv              l     sig=%149.1, parent=<env 0x55de28b56378>, context 0
  prom-           %151.1 = MkArg                    unboundValue, .resetTable[0x55de2c28ec30]_p71, e151.0
  dots-           %151.2 = DotsList           l     %151.1
  val?^ | miss    %151.3 = CastType                 up %151.1
  env             e151.4 = MkEnv              l     ...=%151.2, sep(miss)=" ", collapse="#", recycle0(miss)=false, parent=R_BaseNamespace, context -1
  val?            %151.5 = Force!             !vL   %151.3, e151.4
  val+            %151.6 = CallSafeBuiltin    wed   list(%151.5)    <vec->
  val+            %151.7 = CallSafeBuiltin    wed   paste(%151.6, " ", "#", false)    <str$->
  void                    StVar              lW    newLabel, %151.7, e85.0
  val?^ | miss    %151.9 = LdVar              eR    remove, e85.0
  lgl$#-          %151.10 = Identical                %151.9, function(..., list=character(), pos=-(1), envi|...
  void                    Branch                   %151.10 -> BB153 (if true) | BB154 (if false)
BB152   <- [149]
  void                    Nop                !     
  val?^ | miss    %152.1 = %149.2
  dr              %152.2 = CallTarget@0x55de2b0fcef8[Call#0]
  goto BB61
BB153   <- [151]
  prom-           %153.0 = MkArg                    unboundValue, .resetTable[0x55de2c28ec30]_p30, e85.0
  prom-           %153.1 = MkArg                    unboundValue, .resetTable[0x55de2c28ec30]_p31, e85.0
  val?            %153.2 = StaticCall         !v    remove[0x55de2b508cf0](missingArg, %153.0, missingArg, %153.1) { 1n 3n } e85.0
  val?^ | miss    %153.3 = LdVar              eR    assign, e85.0
  lgl$#-          %153.4 = Identical                %153.3, function(x, value, pos=-(1), envir=as.environm|...
  void                    Branch                   %153.4 -> BB155 (if true) | BB156 (if false)
BB154   <- [151]
  fs              %154.0 = FrameState         R     0x55de294dbb00+1940: [%97.1, %97.2, %44.2], env=e85.0
  void                    Deopt              !v    %154.0, CallTarget@0x55de2cd6ca80[Call#70], %151.9   !
BB155   <- [153]
  prom-           %155.0 = MkArg                    unboundValue, .resetTable[0x55de2c28ec30]_p32, e85.0
  prom-           %155.1 = MkArg                    unboundValue, .resetTable[0x55de2c28ec30]_p33, e85.0
  prom-           %155.2 = MkArg                    unboundValue, .resetTable[0x55de2c28ec30]_p34, e85.0
  val?            %155.3 = StaticCall         !v    assign[0x55de2f6a2170](%155.0, %155.1, missingArg, %155.2) { 0 1 3n } e85.0
  int$-           %155.4 = %44.2
  goto BB44
BB156   <- [153]
  fs              %156.0 = FrameState         R     0x55de294dbb00+2256: [%97.1, %97.2, %44.2, %153.2], env=e85.0
  void                    Deopt              !v    %156.0, CallTarget@0x55de2cd6ca80[Call#71], %153.3   !
Prom 0:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     .allowPrimitiveMethods, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .resetTable[0x55de2c28ec30]_p1, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    primMethods, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    n, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 3:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    n, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 4:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    what, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 5:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    table, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 6:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    method, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 7:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    method, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 8:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    method, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 9:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    defined, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 10:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    method, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 11:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     ifelse, <0x55de289e5040>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .resetTable[0x55de2c28ec30]_p12, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .resetTable[0x55de2c28ec30]_p14, e0.0
  prom-           %0.4  = MkArg                    unboundValue, .resetTable[0x55de2c28ec30]_p15, e0.0
  val?            %0.5  = Call               !     %0.1(%0.2, %0.3, %0.4) e0.0   <str->
  void                    Return             l     %0.5
Prom 12:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    seqN, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <int->
  (cls|spec|blt)  %0.4  = LdFun              !     length, <0x55de2854fa90>, e0.0
  prom-           %0.5  = MkArg                    unboundValue, .resetTable[0x55de2c28ec30]_p13, e0.0
  val?            %0.6  = Call               !     %0.4(%0.5) e0.0   <int$->
  val?            %0.7  = Gt                 !     %0.3, %0.6, e0.0   <lgl->
  void                    Return             l     %0.7
Prom 13:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    newSig, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 14:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    anyLabel, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 15:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    newSig, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 16:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    what, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 17:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    table, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 18:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    newLabel, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 19:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    method, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <(cls|blt)>
  void                    Return             l     %0.3
Prom 20:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    table, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 21:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    what, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 22:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    table, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 23:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    method, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <spec->
  void                    Return             l     %0.3
Prom 24:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    method, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <spec->
  void                    Return             l     %0.3
Prom 25:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     ifelse, <0x55de289e5040>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .resetTable[0x55de2c28ec30]_p26, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .resetTable[0x55de2c28ec30]_p28, e0.0
  prom-           %0.4  = MkArg                    unboundValue, .resetTable[0x55de2c28ec30]_p29, e0.0
  val?            %0.5  = Call               !     %0.1(%0.2, %0.3, %0.4) e0.0   <str->
  void                    Return             l     %0.5
Prom 26:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    seqN, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <int->
  (cls|spec|blt)  %0.4  = LdFun              !     length, <0x55de2854fa90>, e0.0
  prom-           %0.5  = MkArg                    unboundValue, .resetTable[0x55de2c28ec30]_p27, e0.0
  val?            %0.6  = Call               !     %0.4(%0.5) e0.0   <int$->
  val?            %0.7  = Gt                 !     %0.3, %0.6, e0.0   <lgl->
  void                    Return             l     %0.7
Prom 27:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    newSig, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 28:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    anyLabel, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 29:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    newSig, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 30:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    what, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 31:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    table, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 32:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    newLabel, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 33:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    method, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <spec->
  void                    Return             l     %0.3
Prom 34:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    table, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 35:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    newSig, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$>
  void                    Return             l     %0.3
Prom 36:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     ifelse, <0x55de289e5040>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .resetTable[0x55de2c28ec30]_p37, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .resetTable[0x55de2c28ec30]_p39, e0.0
  prom-           %0.4  = MkArg                    unboundValue, .resetTable[0x55de2c28ec30]_p40, e0.0
  val?            %0.5  = Call               !     %0.1(%0.2, %0.3, %0.4) e0.0   <str->
  void                    Return             l     %0.5
Prom 37:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    seqN, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <int->
  (cls|spec|blt)  %0.4  = LdFun              !     length, <0x55de2854fa90>, e0.0
  prom-           %0.5  = MkArg                    unboundValue, .resetTable[0x55de2c28ec30]_p38, e0.0
  val?            %0.6  = Call               !     %0.4(%0.5) e0.0   <int$->
  val?            %0.7  = Gt                 !     %0.3, %0.6, e0.0   <lgl->
  void                    Return             l     %0.7
Prom 38:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    newSig, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$>
  void                    Return             l     %0.3
Prom 39:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    anyLabel, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 40:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    newSig, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$>
  void                    Return             l     %0.3
Prom 41:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .resetTable[0x55de2c28ec30]_p42, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .resetTable[0x55de2c28ec30]_p43, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 42:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    newSig, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 43:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    names, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 44:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    signames, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 45:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .resetTable[0x55de2c28ec30]_p46, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .resetTable[0x55de2c28ec30]_p47, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 46:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    newSig, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 47:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    package, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 48:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     ifelse, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .resetTable[0x55de2c28ec30]_p49, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .resetTable[0x55de2c28ec30]_p51, e0.0
  prom-           %0.4  = MkArg                    unboundValue, .resetTable[0x55de2c28ec30]_p52, e0.0
  val?            %0.5  = Call               !     %0.1(%0.2, %0.3, %0.4) e0.0   <val?_>
  void                    Return             l     %0.5
Prom 49:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    seqN, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  (cls|spec|blt)  %0.4  = LdFun              !     length, e0.0
  prom-           %0.5  = MkArg                    unboundValue, .resetTable[0x55de2c28ec30]_p50, e0.0
  val?            %0.6  = Call               !     %0.4(%0.5) e0.0   <val?_>
  val?            %0.7  = Gt                 !     %0.3, %0.6, e0.0   <val?_>
  void                    Return             l     %0.7
Prom 50:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    pkgs, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 51:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    anyPkg, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 52:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    pkgs, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 53:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .resetTable[0x55de2c28ec30]_p54, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .resetTable[0x55de2c28ec30]_p55, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 54:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    method, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 55:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    defined, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 56:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     <-, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .resetTable[0x55de2c28ec30]_p57, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .resetTable[0x55de2c28ec30]_p60, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 57:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .resetTable[0x55de2c28ec30]_p58, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .resetTable[0x55de2c28ec30]_p59, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 58:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    method, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 59:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    target, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 60:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    newSig, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 61:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    newSig, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str>
  void                    Return             l     %0.3
Prom 62:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    sig, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <(str|vec)>
  void                    Return             l     %0.3
Prom 67:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    x, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <val?>
  void                    Return             l     %0.3
Prom 68:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    sig, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <(str|vec)>
  void                    Return             l     %0.3
Prom 71:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    sig, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <(str|vec)>
  void                    Return             l     %0.3
Prom 75:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    x, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <val?>
  void                    Return             l     %0.3

│ .resetTable[0x55de2c28ec30]                                                  │
└──────────────────────────────────────────────────────────────────────────────┘
