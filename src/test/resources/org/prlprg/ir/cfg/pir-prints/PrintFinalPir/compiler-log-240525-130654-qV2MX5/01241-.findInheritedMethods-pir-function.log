
┌──────────────────────────────────────────────────────────────────────────────┐
│ .findInheritedMethods[0x55de2c1cb970]                                        │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch miss: 7                              │
│ Properties:                                                                  │
├────── Final PIR Version
.findInheritedMethods[0x55de2c1cb970]
BB0
  val?^           %0.0  = LdArg                    2
  val?^           %0.1  = LdArg                    1
  val?^           %0.2  = LdArg                    0
  env             e0.3  = MkEnv              l     classes=%0.2, fdef=%0.1, mtable=%0.0, table(miss)=missingArg, excluded(miss)=missingArg, useInherited(miss)=missingArg, simpleOnly(miss)=missingArg, verbose(miss)=missingArg, doCache(miss)=missingArg, where(miss)=missingArg, parent=<env 0x55de28b56378>, context 1
  prom-           %0.4  = MkArg                    unboundValue, .findInheritedMethods[0x55de2c1cb970]_p0, e0.3
  val?^ | miss    %0.5  = CastType                 up %0.4
  void                    StArg              lW    table, %0.5, e0.3
  void                    StArg              lW    excluded, nil, e0.3
  prom-           %0.8  = MkArg                    unboundValue, .findInheritedMethods[0x55de2c1cb970]_p4, e0.3
  val?^ | miss    %0.9  = CastType                 up %0.8
  void                    StArg              lW    simpleOnly, %0.9, e0.3
  void                    StArg              lW    verbose, false, e0.3
  prom-           %0.12 = MkArg                    unboundValue, .findInheritedMethods[0x55de2c1cb970]_p7, e0.3
  val?^ | miss    %0.13 = CastType                 up %0.12
  void                    StArg              lW    doCache, %0.13, e0.3
  prom-           %0.15 = MkArg                    unboundValue, .findInheritedMethods[0x55de2c1cb970]_p9, e0.3
  val?^ | miss    %0.16 = CastType                 up %0.15
  void                    StArg              lW    where, %0.16, e0.3
  cls             %0.18 = MkCls                    .findInheritedMethods>plist@677, e0.3
  val?^ | miss    %0.19 = LdVar              eR    .allowPrimitiveMethods, <env 0x55de28b56378>
  lgl$#-          %0.20 = Identical                %0.19, function(onOff) <(rir::DispatchTable*)0x55de2c|...
  void                    Branch                   %0.20 -> BB203 (if true) | BB204 (if false)
BB203   <- [0]
  ct              %203.0 = PushContext        lCL   false, .allowPrimitiveMethods(FALSE), function(onOff) <(rir::DispatchTable*)0x55de2c|..., e0.3
  val?^ | miss    %203.1 = LdVar              eR    .Call, <env 0x55de28b56378>
  lgl$#-          %203.2 = Identical                <blt .Call>, %203.1   <true>
  void                    Branch                   %203.2 -> BB205 (if true) | BB206 (if false)
BB204   <- [0]
  fs              %204.0 = FrameState         R     0x55de2dc4ca10+0: [], env=e0.3
  void                    Deopt              !v    %204.0, CallTarget@0x55de2d7bb0f0[Call#5], %0.19
BB205   <- [203]
  val?^ | miss    %205.0 = LdVar              eR    C_R_M_setPrimitiveMethods, <env 0x55de28b56378>
  env             e205.1 = MkEnv              l     onOff=false, code="CLEAR", parent=<env 0x55de28b56378>, context 1
  val?            %205.2 = Force!<value>      !v    %205.0, e205.1   <vec>
  val?^ | miss    %205.3 = LdVar              eR    code, e205.1
  val?            %205.4 = Force!<value>      !v    %205.3, e205.1   <str$->
  val?            %205.5 = CallBuiltin        !v    .Call(%205.2, "", nil, %205.4, nil, nil) e205.1   <lgl$->
  lgl$#-          %205.6 = IsType                   %205.5 isA lgl$-
  void                    Branch                   %205.6 -> BB207 (if true) | BB208 (if false)
BB206   <- [203]
  fs              %206.0 = FrameState         R     0x55de2dc4ca10+32: [], env=e0.3
  env             e206.1 = (MkEnv)            l     onOff=false, parent=<env 0x55de28b56378>, context 1
  fs              %206.2 = FrameState         R     0x55de2ba62e00+15: [false], env=e206.1, next=%206.0
  void                    Deopt              !v    %206.2, DeadBranchReached@0x55de2c1bd198[Test#0], %203.2   !
BB207   <- [205]
  lgl$-           %207.0 = CastType           d     dn %205.5
  val?            %207.1 = PopContext         C     %207.0, %203.0   <lgl$->
  lgl$#-          %207.2 = IsType                   %207.1 isA lgl$-
  void                    Branch                   %207.2 -> BB209 (if true) | BB210 (if false)
BB208   <- [205]
  fs              %208.0 = FrameState         R     0x55de2dc4ca10+32: [], env=e0.3
  fs              %208.1 = FrameState         R     0x55de2ba62e00+200: [%205.5], env=e205.1, next=%208.0
  void                    Deopt              !v    %208.1, Typecheck@0x55de2c1bd198[Type#5], %205.5   !
BB209   <- [207]
  lgl$-           %209.0 = CastType           d     dn %207.1
  void                    StVar              lW    primMethods, %209.0, e0.3
  (cls|spec|blt)  %209.2 = LdFun              !v    on.exit, <0x55de2854e270>, e0.3
  prom-           %209.3 = MkArg                    unboundValue, .findInheritedMethods[0x55de2c1cb970]_p11, e0.3
  val?            %209.4 = Call               !v    %209.2(%209.3) e0.3
  val?^ | miss    %209.5 = LdVar              eR    is.environment, e0.3
  lgl$#-          %209.6 = Identical                <blt is.environment>, %209.5   <true>
  void                    Branch                   %209.6 -> BB211 (if true) | BB212 (if false)
BB210   <- [207]
  fs              %210.0 = FrameState         R     0x55de2dc4ca10+32: [%207.1], env=e0.3
  void                    Deopt              !v    %210.0, Typecheck@0x55de2d7bb0f0[Type#9], %207.1   !
BB211   <- [209]
  val?^ | miss    %211.0 = LdVar              eR    table, e0.3
  val?            %211.1 = Force!<lazy>       !v    %211.0, e0.3   <env->
  lgl$#-          %211.2 = CallSafeBuiltin    wed   is.environment(%211.1)    <lgl$->
  void                    Branch                   %211.2 -> BB14 (if true) | BB13 (if false)
BB212   <- [209]
  fs              %212.0 = FrameState         R     0x55de2dc4ca10+78: [%209.4], env=e0.3
  void                    Deopt              !v    %212.0, DeadBranchReached@0x55de2d7bb0f0[Test#0], %209.6   !
BB14   <- [211]
  val?^ | miss    %14.0 = LdVar              eR    length, e0.3
  lgl$#-          %14.1 = Identical                <blt length>, %14.0   <true>
  void                    Branch                   %14.1 -> BB213 (if true) | BB214 (if false)
BB13   <- [211]
  (cls|spec|blt)  %13.0 = LdFun              !v    is, e0.3
  fs              %13.1 = FrameState         R     0x55de2dc4ca10+192: [%13.0], env=e0.3
  void                    Deopt              !v    %13.1, DeadCall@0x55de2d7bb0f0[Call#9], %13.0   !
BB213   <- [14]
  (cls|spec|blt)  %213.0 = LdFun              !v    @, <0x55de2854ebd8>, e0.3
  prom-           %213.1 = MkArg                    unboundValue, .findInheritedMethods[0x55de2c1cb970]_p13, e0.3
  prom-           %213.2 = MkArg                    unboundValue, .findInheritedMethods[0x55de2c1cb970]_p14, e0.3
  val?            %213.3 = Call               !v    %213.0(%213.1, %213.2) e0.3   <vec->
  lgl$#-          %213.4 = IsType                   %213.3 isA val?-
  void                    Branch                   %213.4 -> BB215 (if true) | BB216 (if false)
BB214   <- [14]
  fs              %214.0 = FrameState         R     0x55de2dc4ca10+170: [%211.2], env=e0.3
  void                    Deopt              !v    %214.0, DeadBranchReached@0x55de2d7bb0f0[Test#1], %14.1   !
BB215   <- [213]
  val?-           %215.0 = CastType           d     dn %213.3   <vec->
  (int|real)$-    %215.1 = CallSafeBuiltin    wed   length(%215.0)    <int$->
  lgl$#-          %215.2 = IsType                   %215.1 isA int$-
  void                    Branch                   %215.2 -> BB217 (if true) | BB218 (if false)
BB216   <- [213]
  fs              %216.0 = FrameState         R     0x55de2dc4ca10+416: [<blt length>, %213.3], env=e0.3
  void                    Deopt              !v    %216.0, Typecheck@0x55de2d7bb0f0[Type#27], %213.3   !
BB217   <- [215]
  int$-           %217.0 = CastType           d     dn %215.1
  lgl$-           %217.1 = Gt                 d     %217.0, 0L, elided   <lgl$->
  void                    StVar              lW    hasGroup, %217.1, e0.3
  lgl$#-          %217.3 = CheckTrueFalse     e     %217.1
  void                    Branch                   %217.3 -> BB201 (if true) | BB21 (if false)
BB218   <- [215]
  fs              %218.0 = FrameState         R     0x55de2dc4ca10+438: [%215.1], env=e0.3
  void                    Deopt              !v    %218.0, Typecheck@0x55de2d7bb0f0[Type#28], %215.1   !
BB201   <- [217]
  (cls|spec|blt)  %201.0 = LdFun              !v    .getAllGroups, e0.3
  fs              %201.1 = FrameState         R     0x55de2dc4ca10+494: [%201.0], env=e0.3
  void                    Deopt              !v    %201.1, DeadCall@0x55de2d7bb0f0[Call#18], %201.0   !
BB21   <- [217]
  val?^ | miss    %21.0 = LdVar              eR    length, e0.3
  lgl$#-          %21.1 = Identical                <blt length>, %21.0   <true>
  void                    Branch                   %21.1 -> BB219 (if true) | BB220 (if false)
BB219   <- [21]
  val?^ | miss    %219.0 = LdVar              eR    excluded, e0.3
  val?            %219.1 = Force!<lazy>       !v    %219.0, e0.3   <nil->
  lgl$#-          %219.2 = IsType                   %219.1 isA val?-
  void                    Branch                   %219.2 -> BB221 (if true) | BB222 (if false)
BB220   <- [21]
  fs              %220.0 = FrameState         R     0x55de2dc4ca10+464: [], env=e0.3
  void                    Deopt              !v    %220.0, DeadBranchReached@0x55de2d7bb0f0[Test#2], %21.1   !
BB221   <- [219]
  val?-           %221.0 = CastType           d     dn %219.1   <nil->
  (int|real)$-    %221.1 = CallSafeBuiltin    wed   length(%221.0)    <int$->
  lgl$#-          %221.2 = IsType                   %221.1 isA int$-
  void                    Branch                   %221.2 -> BB223 (if true) | BB224 (if false)
BB222   <- [219]
  fs              %222.0 = FrameState         R     0x55de2dc4ca10+604: [<blt length>, %219.1], env=e0.3
  void                    Deopt              !v    %222.0, Typecheck@0x55de2d7bb0f0[Type#35], %219.1   !
BB223   <- [221]
  int$-           %223.0 = CastType           d     dn %221.1
  lgl$-           %223.1 = Gt                 d     %223.0, 0L, elided   <lgl$->
  void                    StVar              lW    doExcluded, %223.1, e0.3
  val?^ | miss    %223.3 = LdVar              eR    verbose, e0.3
  val?            %223.4 = Force!<lazy>       !v    %223.3, e0.3   <lgl$->
  lgl$#-          %223.5 = CheckTrueFalse     we    %223.4
  void                    Branch                   %223.5 -> BB200 (if true) | BB28 (if false)
BB224   <- [221]
  fs              %224.0 = FrameState         R     0x55de2dc4ca10+626: [%221.1], env=e0.3
  void                    Deopt              !v    %224.0, Typecheck@0x55de2d7bb0f0[Type#36], %221.1   !
BB200   <- [223]
  void                    StVar              lW    plist, %0.18, e0.3
  (cls|spec|blt)  %200.1 = LdFun              !v    cat, e0.3
  fs              %200.2 = FrameState         R     0x55de2dc4ca10+707: [%200.1], env=e0.3
  void                    Deopt              !v    %200.2, DeadCall@0x55de2d7bb0f0[Call#21], %200.1   !
BB28   <- [223]
  val?^ | miss    %28.0 = LdVar              eR    length, e0.3
  lgl$#-          %28.1 = Identical                <blt length>, %28.0   <true>
  void                    Branch                   %28.1 -> BB225 (if true) | BB226 (if false)
BB225   <- [28]
  val?^ | miss    %225.0 = LdVar              eR    classes, e0.3
  val?            %225.1 = Force!<lazy>       !v    %225.0, e0.3   <vec$->
  lgl$#-          %225.2 = IsType                   %225.1 isA val?-
  void                    Branch                   %225.2 -> BB227 (if true) | BB228 (if false)
BB226   <- [28]
  fs              %226.0 = FrameState         R     0x55de2dc4ca10+667: [%223.5], env=e0.3
  void                    Deopt              !v    %226.0, DeadBranchReached@0x55de2d7bb0f0[Test#4], %28.1   !
BB227   <- [225]
  val?-           %227.0 = CastType           d     dn %225.1   <vec$->
  (int|real)$-    %227.1 = CallSafeBuiltin    wed   length(%227.0)    <int$->
  lgl$#-          %227.2 = IsType                   %227.1 isA int$-
  void                    Branch                   %227.2 -> BB229 (if true) | BB230 (if false)
BB228   <- [225]
  fs              %228.0 = FrameState         R     0x55de2dc4ca10+844: [<blt length>, %225.1], env=e0.3
  void                    Deopt              !v    %228.0, Typecheck@0x55de2d7bb0f0[Type#60], %225.1   !
BB229   <- [227]
  int$-           %229.0 = CastType           d     dn %227.1
  void                    StVar              lW    nargs, %229.0, e0.3
  lgl$-           %229.2 = Missing            eR    useInherited, e0.3
  lgl$-           %229.3 = Not                d     %229.2, elided
  lgl$-           %229.4 = AsLogical                %229.3
  lgl$#-          %229.5 = Identical                %229.4, false
  void                    Branch                   %229.5 -> BB199 (if true) | BB33 (if false)
BB230   <- [227]
  fs              %230.0 = FrameState         R     0x55de2dc4ca10+866: [%227.1], env=e0.3
  void                    Deopt              !v    %230.0, Typecheck@0x55de2d7bb0f0[Type#61], %227.1   !
BB199   <- [229]
  void                    Nop                !     
  lgl$-           %199.1 = %229.4
  goto BB40
BB33   <- [229]
  val?^ | miss    %33.0 = LdVar              eR    length, e0.3
  lgl$#-          %33.1 = Identical                <blt length>, %33.0   <@?>
  void                    Branch                   %33.1 -> BB35 (if true) | BB34 (if false)
BB40   <- [199, 233]
  lgl$-           %40.0 = Phi                      %233.4:BB233, %199.1:BB199
  lgl$-           %40.1 = %40.0
  lgl$#-          %40.2 = CheckTrueFalse     e     %40.1
  void                    Branch                   %40.2 -> BB198 (if true) | BB43 (if false)
BB35   <- [33]
  val?^ | miss    %35.0 = LdVar              eR    useInherited, e0.3
  val?            %35.1 = Force!             !v    %35.0, e0.3   <val?_>
  lgl$#-          %35.2 = IsType                   %35.1 isA val?+
  void                    Branch                   %35.2 -> BB231 (if true) | BB232 (if false)
BB34   <- [33]
  (cls|spec|blt)  %34.0 = LdFun              !v    length, e0.3
  fs              %34.1 = FrameState         R     0x55de2dc4ca10+922: [%229.4, %34.0], env=e0.3
  void                    Deopt              !v    %34.1, DeadCall@0x55de2d7bb0f0[Call#31], %34.0   !
BB198   <- [40]
  (cls|spec|blt)  %198.0 = LdFun              !v    rep, e0.3
  fs              %198.1 = FrameState         R     0x55de2dc4ca10+1028: [%198.0], env=e0.3
  void                    Deopt              !v    %198.1, DeadCall@0x55de2d7bb0f0[Call#32], %198.0   !
BB43   <- [40]
  val?^ | miss    %43.0 = LdVar              eR    hasGroup, e0.3
  lgl$#-          %43.1 = IsType                   %43.0 isA lgl$-
  void                    Branch                   %43.1 -> BB235 (if true) | BB236 (if false)
BB231   <- [35]
  val?+           %231.0 = CastType           d     dn %35.1   <val?_>
  (int|real)$-    %231.1 = CallSafeBuiltin    wed   length(%231.0)    <val?_>
  val?^ | miss    %231.2 = LdVar              eR    nargs, e0.3
  val?            %231.3 = Force!             !v    %231.2, e0.3   <val?_>
  lgl$#-          %231.4 = IsType                   %231.3 isA val?+
  void                    Branch                   %231.4 -> BB233 (if true) | BB234 (if false)
BB232   <- [35]
  fs              %232.0 = FrameState         R     0x55de2dc4ca10+963: [%229.4, <blt length>, %35.1], env=e0.3
  void                    Deopt              !v    %232.0, Typecheck@0x55de2d7bb0f0[Type#63], %35.1   !
BB235   <- [43]
  lgl$-           %235.0 = CastType           d     dn %43.0
  lgl$-           %235.1 = AsLogical                %235.0
  lgl$#-          %235.2 = Identical                %235.1, false
  void                    Branch                   %235.2 -> BB197 (if true) | BB44 (if false)
BB236   <- [43]
  fs              %236.0 = FrameState         R     0x55de2dc4ca10+1012: [%40.1], env=e0.3
  void                    Deopt              !v    %236.0, Typecheck@0x55de2d7bb0f0[Type#70], %43.0   !
BB233   <- [231]
  val?+           %233.0 = CastType           d     dn %231.3   <val?_>
  lgl             %233.1 = Lt                 wed   %231.1, %233.0, elided   <val?_>
  lgl$-           %233.2 = AsLogical          e     %233.1
  lgl$-           %233.3 = LAnd                     %229.4, %233.2
  lgl$-           %233.4 = %233.3
  goto BB40
BB234   <- [231]
  fs              %234.0 = FrameState         R     0x55de2dc4ca10+999: [%229.4, %231.1, %231.3], env=e0.3
  void                    Deopt              !v    %234.0, Typecheck@0x55de2d7bb0f0[Type#65], %231.3   !
BB197   <- [235]
  void                    Nop                !     
  lgl$-           %197.1 = %235.1
  goto BB47
BB44   <- [235]
  val?^ | miss    %44.0 = LdVar              eR    doExcluded, e0.3
  val?            %44.1 = Force!             !v    %44.0, e0.3   <val?_>
  lgl$#-          %44.2 = IsType                   %44.1 isA val?+
  void                    Branch                   %44.2 -> BB237 (if true) | BB238 (if false)
BB47   <- [197, 237]
  lgl$-           %47.0 = Phi                      %237.4:BB237, %197.1:BB197
  lgl$-           %47.1 = %47.0
  lgl$#-          %47.2 = CheckTrueFalse     e     %47.1
  void                    Branch                   %47.2 -> BB196 (if true) | BB48 (if false)
BB237   <- [44]
  val?+           %237.0 = CastType           d     dn %44.1   <val?_>
  lgl             %237.1 = Not                wed   %237.0, elided
  lgl$-           %237.2 = AsLogical          e     %237.1
  lgl$-           %237.3 = LAnd                     %235.1, %237.2
  lgl$-           %237.4 = %237.3
  goto BB47
BB238   <- [44]
  fs              %238.0 = FrameState         R     0x55de2dc4ca10+1112: [%235.1, %44.1], env=e0.3
  void                    Deopt              !v    %238.0, Typecheck@0x55de2d7bb0f0[Type#71], %44.1   !
BB196   <- [47]
  (cls|spec|blt)  %196.0 = LdFun              !v    .sigLabel, e0.3
  fs              %196.1 = FrameState         R     0x55de2dc4ca10+1136: [%196.0], env=e0.3
  void                    Deopt              !v    %196.1, DeadCall@0x55de2d7bb0f0[Call#33], %196.0   !
BB48   <- [47]
  val?^ | miss    %48.0 = LdVar              eR    classes, e0.3
  val?            %48.1 = Force!<wrapped>    !v    %48.0, e0.3   <vec$->
  lgl$#-          %48.2 = IsType                   %48.1 isA val+   <true>
  lgl$#-          %48.3 = IsType                   %48.1 isA val?-
  void                    Branch                   %48.2 -> BB239 (if true) | BB240 (if false)
BB239   <- [48]
  void                    Branch                   %48.3 -> BB241 (if true) | BB242 (if false)
BB240   <- [48]
  void                    Nop                !     
  lgl$#-          %240.1 = %48.2
  dr              %240.2 = DeadBranchReached@0x55de2d7bb0f0[Test#8]
  goto BB49
BB241   <- [239]
  val?-           %241.0 = CastType           d     dn %48.1   <vec$->
  val?            %241.1 = Extract2_1D        wed   %241.0, 1L, elided   <str$+>
  void                    StVar              lW    cl1, %241.1, e0.3
  val?^ | miss    %241.3 = LdVar              eR    getClass, e0.3
  lgl$#-          %241.4 = Identical                %241.3, function(Class, .Force=FALSE, where=.classEnv(|...
  void                    Branch                   %241.4 -> BB243 (if true) | BB244 (if false)
BB242   <- [239]
  void                    Nop                !     
  val?            %242.1 = %48.1
  dr              %242.2 = Typecheck@0x55de2d7bb0f0[Type#86]
  goto BB49
BB49   <- [240, 242]
  val?^ | miss    %49.0 = Phi                      %240.1:BB240, %242.1:BB242
  val?^ | miss    %49.1 = %49.0
  dr              %49.2 = Phi                      %240.2:BB240, %242.2:BB242
  dr              %49.3 = %49.2
  fs              %49.4 = FrameState         R     0x55de2dc4ca10+1444: [%48.1], env=e0.3
  void                    Deopt              !v    %49.4, %49.3, %49.1   !
BB243   <- [241]
  prom-           %243.0 = MkArg                    unboundValue, .findInheritedMethods[0x55de2c1cb970]_p15 (!refl), e0.3
  prom-           %243.1 = MkArg                    unboundValue, .findInheritedMethods[0x55de2c1cb970]_p16, e0.3
  val?            %243.2 = StaticCall         !v    getClass[0x55de2cdf3de0](%243.0, true, %243.1) { 0 2n 1n } e0.3   <other>
  void                    StVar              lW    def, %243.2, e0.3
  lgl$-           %243.4 = Missing            eR    useInherited, e0.3
  lgl$-           %243.5 = AsLogical                %243.4
  lgl$#-          %243.6 = Identical                %243.5, true
  void                    Branch                   %243.6 -> BB195 (if true) | BB53 (if false)
BB244   <- [241]
  fs              %244.0 = FrameState         R     0x55de2dc4ca10+1502: [], env=e0.3
  void                    Deopt              !v    %244.0, CallTarget@0x55de2d7bb0f0[Call#37], %241.3   !
BB195   <- [243]
  void                    Nop                !     
  lgl$-           %195.1 = %243.5
  goto BB56
BB53   <- [243]
  val?^ | miss    %53.0 = LdVar              eR    useInherited, e0.3
  val?            %53.1 = Force!             !v    %53.0, e0.3   <val?_>
  lgl$#-          %53.2 = IsType                   %53.1 isA val?+
  void                    Branch                   %53.2 -> BB245 (if true) | BB246 (if false)
BB56   <- [195, 245]
  lgl$-           %56.0 = Phi                      %245.4:BB245, %195.1:BB195
  lgl$-           %56.1 = %56.0
  lgl$#-          %56.2 = CheckTrueFalse     e     %56.1
  void                    Branch                   %56.2 -> BB167 (if true) | BB59 (if false)
BB245   <- [53]
  val?+           %245.0 = CastType           d     dn %53.1   <val?_>
  val?            %245.1 = Extract2_1D        wed   %245.0, 1L, elided   <val?_>
  lgl$-           %245.2 = AsLogical          e     %245.1
  lgl$-           %245.3 = LOr                      %243.5, %245.2
  lgl$-           %245.4 = %245.3
  goto BB56
BB246   <- [53]
  fs              %246.0 = FrameState         R     0x55de2dc4ca10+1592: [%243.5, %53.1], env=e0.3
  void                    Deopt              !v    %246.0, Typecheck@0x55de2d7bb0f0[Type#91], %53.1   !
BB167   <- [56]
  val?^ | miss    %167.0 = LdVar              eR    c, e0.3
  lgl$#-          %167.1 = Identical                <blt c>, %167.0   <true>
  void                    Branch                   %167.1 -> BB247 (if true) | BB248 (if false)
BB59   <- [56]
  val?^ | miss    %59.0 = LdVar              eR    cl1, e0.3
  val?            %59.1 = Force!             !v    %59.0, e0.3   <val?_>
  val?            %59.2 = %59.1
  goto BB60
BB247   <- [167]
  val?^ | miss    %247.0 = LdVar              eR    cl1, e0.3
  lgl$#-          %247.1 = IsType                   %247.0 isA val?~+ | miss
  void                    Branch                   %247.1 -> BB249 (if true) | BB250 (if false)
BB248   <- [167]
  void                    Nop                !     
  lgl$#-          %248.1 = %167.1
  dr              %248.2 = DeadBranchReached@0x55de2d7bb0f0[Test#10]
  goto BB57
BB60   <- [59, 281]
  val?            %60.0 = Phi                      %59.2:BB59, %281.2:BB281   <str->
  val?            %60.1 = %60.0
  void                    StVar              lW    labels, %60.1, e0.3
  val?^ | miss    %60.3 = LdVar              eR    list, e0.3
  lgl$#-          %60.4 = Identical                <blt list>, %60.3   <true>
  void                    Branch                   %60.4 -> BB251 (if true) | BB252 (if false)
BB249   <- [247]
  val?~+ | miss   %249.0 = CastType           d     dn %247.0
  val?+           %249.1 = Force!<value>            %249.0,    <str$+>
  val?^ | miss    %249.2 = LdVar              eR    .eligibleSuperClasses, e0.3
  lgl$#-          %249.3 = Identical                %249.2, function(contains, simpleOnly) <(rir::Dispatch|...
  void                    Branch                   %249.3 -> BB257 (if true) | BB258 (if false)
BB250   <- [247]
  void                    Nop                !     
  val?^ | miss    %250.1 = %247.0
  dr              %250.2 = Typecheck@0x55de2d7bb0f0[Type#100]
  goto BB57
BB57   <- [248, 250, 258]
  val?^ | miss    %57.0 = Phi                      %248.1:BB248, %250.1:BB250, %258.1:BB258
  val?^ | miss    %57.1 = %57.0
  dr              %57.2 = Phi                      %248.2:BB248, %250.2:BB250, %258.2:BB258
  dr              %57.3 = %57.2
  fs              %57.4 = FrameState         R     0x55de2dc4ca10+1643: [%56.1], env=e0.3
  void                    Deopt              !v    %57.4, %57.3, %57.1   !
BB251   <- [60]
  val             %251.0 = ChkMissing         e     %60.1
  val+            %251.1 = CallSafeBuiltin    wed   list(%60.1)    <vec$->
  void                    StVar              lW    supersList, %251.1, e0.3
  val?^ | miss    %251.3 = LdVar              eR    vector, e0.3
  lgl$#-          %251.4 = Identical                %251.3, function(mode="logical", length=0L) <(rir::Dis|...
  void                    Branch                   %251.4 -> BB253 (if true) | BB254 (if false)
BB252   <- [60]
  fs              %252.0 = FrameState         R     0x55de2dc4ca10+1831: [], env=e0.3
  void                    Deopt              !v    %252.0, DeadBranchReached@0x55de2d7bb0f0[Test#11], %60.4   !
BB257   <- [249]
  prom-           %257.0 = MkArg                    unboundValue, .findInheritedMethods[0x55de2c1cb970]_p80, e0.3
  prom-           %257.1 = MkArg                    unboundValue, .findInheritedMethods[0x55de2c1cb970]_p83, e0.3
  ct              %257.2 = PushContext        lCL   %257.0, %257.1, .eligibleSuperClasses(@(def, contains), simple|..., function(contains, simpleOnly) <(rir::Dispatch|..., e0.3
  val?^           %257.3 = CastType                 up %257.1
  val?^           %257.4 = CastType                 up %257.0
  val?^ | miss    %257.5 = LdVar              eR    names, <env 0x55de28b56378>
  lgl$#-          %257.6 = Identical                <blt names>, %257.5   <true>
  void                    Branch                   %257.6 -> BB261 (if true) | BB262 (if false)
BB258   <- [249]
  void                    Nop                !     
  val?^ | miss    %258.1 = %249.2
  dr              %258.2 = CallTarget@0x55de2d7bb0f0[Call#41]
  goto BB57
BB253   <- [251]
  val?^ | miss    %253.0 = LdVar              eR    nargs, e0.3
  lgl$#-          %253.1 = IsType                   %253.0 isA int$-
  void                    Branch                   %253.1 -> BB255 (if true) | BB256 (if false)
BB254   <- [251]
  void                    Nop                !     
  val?^ | miss    %254.1 = %251.3
  dr              %254.2 = CallTarget@0x55de2d7bb0f0[Call#44]
  goto BB63
BB261   <- [257]
  env             e261.0 = MkEnv              l     contains=%257.4, simpleOnly=%257.3, parent=<env 0x55de28b56378>, context 1
  val?            %261.1 = Force!<lazy>       !vL   %257.4, e261.0   <vec+>
  lgl$#-          %261.2 = IsType                   %261.1 isA val?+
  void                    Branch                   %261.2 -> BB263 (if true) | BB264 (if false)
BB262   <- [257]
  fs              %262.0 = FrameState         R     0x55de2dc4ca10+1789: [<blt c>, %249.1], env=e0.3
  env             e262.1 = (MkEnv)            l     contains=%257.4, simpleOnly=%257.3, parent=<env 0x55de28b56378>, context 1
  fs              %262.2 = FrameState         R     0x55de2c01f0f0+17: [<blt names>, %257.6], env=e262.1, next=%262.0
  void                    Deopt              !v    %262.2, DeadBranchReached@0x55de2e403808[Test#0], %257.6   !
BB255   <- [253]
  int$-           %255.0 = CastType           d     dn %253.0
  vec-            %255.1 = CallSafeBuiltin    wed   vector("list", %255.0)    <vec$->
  void                    StVar              lW    classDefs, %255.1, e0.3
  val?^ | miss    %255.3 = LdVar              eR    def, e0.3
  val?            %255.4 = Force!<value>      !v    %255.3, e0.3   <other>
  val?^ | miss    %255.5 = LdVar              eR    classDefs !upd, e0.3
  lgl$#-          %255.6 = IsType                   %255.5 isA val?~- | miss
  void                    Branch                   %255.6 -> BB259 (if true) | BB260 (if false)
BB256   <- [253]
  void                    Nop                !     
  val?^ | miss    %256.1 = %253.0
  dr              %256.2 = Typecheck@0x55de2d7bb0f0[Type#110]
  goto BB63
BB63   <- [254, 256]
  val?^ | miss    %63.0 = Phi                      %254.1:BB254, %256.1:BB256
  val?^ | miss    %63.1 = %63.0
  dr              %63.2 = Phi                      %254.2:BB254, %256.2:BB256
  dr              %63.3 = %63.2
  fs              %63.4 = FrameState         R     0x55de2dc4ca10+1936: [], env=e0.3
  void                    Deopt              !v    %63.4, %63.3, %63.1   !
BB263   <- [261]
  val?+           %263.0 = CastType           d     dn %261.1   <vec+>
  val+            %263.1 = CallSafeBuiltin    wed   names(%263.0)    <str->
  void                    StVar              lW    what, %263.1, e261.0
  val?^ | miss    %263.3 = LdVar              eR    length, <env 0x55de28b56378>
  lgl$#-          %263.4 = Identical                <blt length>, %263.3   <true>
  void                    Branch                   %263.4 -> BB267 (if true) | BB268 (if false)
BB264   <- [261]
  fs              %264.0 = FrameState         R     0x55de2dc4ca10+1789: [<blt c>, %249.1], env=e0.3
  fs              %264.1 = FrameState         R     0x55de2c01f0f0+69: [<blt names>, %261.1], env=e261.0, next=%264.0
  void                    Deopt              !v    %264.1, Typecheck@0x55de2e403808[Type#1], %261.1   !
BB259   <- [255]
  val?~- | miss   %259.0 = CastType           d     dn %255.5
  val?-           %259.1 = Force!<value>            %259.0,    <vec$->
  val?            %259.2 = Subassign2_1D      !v    %255.4, %259.1, 1L, e0.3
  void                    StVar              lW    classDefs, %259.2, e0.3
  val?^ | miss    %259.4 = LdVar              eR    nargs, e0.3
  lgl$#-          %259.5 = IsType                   %259.4 isA int$-
  void                    Branch                   %259.5 -> BB265 (if true) | BB266 (if false)
BB260   <- [255]
  fs              %260.0 = FrameState         R     0x55de2dc4ca10+1996: [%255.4], env=e0.3
  void                    Deopt              !v    %260.0, Typecheck@0x55de2d7bb0f0[Type#113], %255.5   !
BB267   <- [263]
  (int|real)$-    %267.0 = CallSafeBuiltin    wed   length(%263.1)    <int$->
  lgl$#-          %267.1 = IsType                   %267.0 isA int$-
  void                    Branch                   %267.1 -> BB273 (if true) | BB274 (if false)
BB268   <- [263]
  fs              %268.0 = FrameState         R     0x55de2dc4ca10+1789: [<blt c>, %249.1], env=e0.3
  fs              %268.1 = FrameState         R     0x55de2c01f0f0+105: [], env=e261.0, next=%268.0
  void                    Deopt              !v    %268.1, DeadBranchReached@0x55de2e403808[Test#1], %263.4   !
BB265   <- [259]
  int$-           %265.0 = CastType           d     dn %259.4
  lgl$-           %265.1 = Gt                 d     %265.0, 1, elided   <lgl$->
  lgl$#-          %265.2 = CheckTrueFalse     e     %265.1
  void                    Branch                   %265.2 -> BB159 (if true) | BB69 (if false)
BB266   <- [259]
  fs              %266.0 = FrameState         R     0x55de2dc4ca10+2031: [], env=e0.3
  void                    Deopt              !v    %266.0, Typecheck@0x55de2d7bb0f0[Type#114], %259.4   !
BB273   <- [267]
  int$-           %273.0 = CastType           d     dn %267.0
  lgl$-           %273.1 = Not                d     %273.0, elided
  lgl$#-          %273.2 = CheckTrueFalse     e     %273.1
  void                    Branch                   %273.2 -> BB194 (if true) | BB176 (if false)
BB274   <- [267]
  void                    Nop                !     
  (int|real)$-    %274.1 = %267.0
  dr              %274.2 = Typecheck@0x55de2e403808[Type#5]
  goto BB174
BB159   <- [265]
  lgl$#-          %159.0 = ColonInputEffects        2, %265.0   <@?>
  void                    Branch                   %159.0 -> BB161 (if true) | BB160 (if false)
BB69   <- [265]
  void                    Nop                !     
  goto BB70
BB194   <- [273]
  void                    Nop                !     
  val+            %194.1 = %263.1
  goto BB189
BB176   <- [273]
  val?^ | miss    %176.0 = LdVar              eR    vapply, <env 0x55de28b56378>
  lgl$#-          %176.1 = Identical                %176.0, function(X, FUN, FUN.VALUE, ..., USE.NAMES=TRU|...
  void                    Branch                   %176.1 -> BB275 (if true) | BB276 (if false)
BB174   <- [274, 276]
  val?^ | miss    %174.0 = Phi                      %274.1:BB274, %276.1:BB276
  val?^ | miss    %174.1 = %174.0
  dr              %174.2 = Phi                      %274.2:BB274, %276.2:BB276
  dr              %174.3 = %174.2
  fs              %174.4 = FrameState         R     0x55de2dc4ca10+1789: [<blt c>, %249.1], env=e0.3
  fs              %174.5 = FrameState         R     0x55de2c01f0f0+196: [%267.0], env=e261.0, next=%174.4
  void                    Deopt              !v    %174.5, %174.3, %174.1   !
BB161   <- [159]
  int$#-          %161.0 = ColonCastRhs       e     2L, %265.0   <val?_>
  lgl$#-          %161.1 = Lte                d     2L, %161.0, elided   <@?>
  void                    Branch                   %161.1 -> BB166 (if true) | BB162 (if false)
BB160   <- [159]
  int-            %160.0 = Colon              d     2L, %265.0, elided
  (cls|spec|blt)  %160.1 = LdFun              !v    for, e0.3
  prom-           %160.2 = MkArg                    %160.0, .findInheritedMethods[0x55de2c1cb970]_p59 (!refl), e0.3
  prom-           %160.3 = MkArg                    unboundValue, .findInheritedMethods[0x55de2c1cb970]_p60, e0.3
  val?            %160.4 = Call               !v    %160.1(%160.2, %160.3) e0.3
  goto BB70
BB70   <- [69, 164, 160]
  val?^ | miss    %70.0 = LdVar              eR    labels, e0.3
  lgl$#-          %70.1 = IsType                   %70.0 isA val?~- | miss
  void                    Branch                   %70.1 -> BB269 (if true) | BB270 (if false)
BB189   <- [194, 293]
  val?            %189.0 = Phi                      %293.2:BB293, %194.1:BB194
  val?            %189.1 = %189.0
  val?            %189.2 = PopContext         C     %189.1, %257.2   <str->
  lgl$#-          %189.3 = IsType                   %189.2 isA val?-
  void                    Branch                   %189.3 -> BB281 (if true) | BB282 (if false)
BB275   <- [176]
  prom-           %275.0 = MkArg                    unboundValue, .findInheritedMethods[0x55de2c1cb970]_p84, e261.0
  prom-           %275.1 = MkArg                    unboundValue, .findInheritedMethods[0x55de2c1cb970]_p85, e261.0
  ct              %275.2 = PushContext        lCL   %275.0, %275.1, na-lgl, vapply(contains, if(simpleOnly, function(<lst |..., function(X, FUN, FUN.VALUE, ..., USE.NAMES=TRU|..., e261.0
  val?^           %275.3 = CastType                 up %275.1
  val?^           %275.4 = CastType                 up %275.0
  env             e275.5 = MkEnv              l     X=%275.4, FUN=%275.3, FUN.VALUE=na-lgl, ...(miss)=missingArg, USE.NAMES(miss)=true, parent=R_BaseNamespace, context 1
  prom-           %275.6 = MkArg                    unboundValue, .findInheritedMethods[0x55de2c1cb970]_p95, e275.5
  val?            %275.7 = StaticCall         !v    match.fun[0x55de28be34c0](%275.6) e275.5   <(cls|blt)->
  void                    StVar              lW    FUN, %275.7, e275.5
  val?^ | miss    %275.9 = LdVar              eR    is.vector, e275.5
  lgl$#-          %275.10 = Identical                %275.9, function(x, mode="any") <(rir::DispatchTable*)|...
  void                    Branch                   %275.10 -> BB277 (if true) | BB278 (if false)
BB276   <- [176]
  void                    Nop                !     
  val?^ | miss    %276.1 = %176.0
  dr              %276.2 = CallTarget@0x55de2e403808[Call#2]
  goto BB174
BB166   <- [161]
  void                    Nop                !     
  int$#-          %166.1 = 1L
  goto BB163
BB162   <- [161]
  void                    Nop                !     
  int$#-          %162.1 = -1L
  goto BB163
BB269   <- [70]
  val?~- | miss   %269.0 = CastType           d     dn %70.0
  val?-           %269.1 = Force!<value>            %269.0,    <str->
  lgl$#-          %269.2 = IsType                   %269.1 isA val+   <true>
  void                    Branch                   %269.2 -> BB271 (if true) | BB272 (if false)
BB270   <- [70]
  void                    Nop                !     
  val?^ | miss    %270.1 = %70.0
  dr              %270.2 = Typecheck@0x55de2d7bb0f0[Type#238]
  goto BB71
BB281   <- [189]
  val?-           %281.0 = CastType           d     dn %189.2   <str->
  (list|sym|char|lgl|int|real|str|vec|complex|raw|cls|spec|blt|prom|_|code|env|ast|expressions|dots|other)+ %281.1 = CallSafeBuiltin    wed   c(%249.1, %281.0, "ANY")    <str->
  (list|sym|char|lgl|int|real|str|vec|complex|raw|cls|spec|blt|prom|_|code|env|ast|expressions|dots|other)+ %281.2 = %281.1
  goto BB60
BB282   <- [189]
  fs              %282.0 = FrameState         R     0x55de2dc4ca10+1789: [<blt c>, %249.1, %189.2], env=e0.3
  void                    Deopt              !v    %282.0, Typecheck@0x55de2d7bb0f0[Type#105], %189.2   !
BB277   <- [275]
  val?^ | miss    %277.0 = LdVar              eR    X, e275.5
  val?            %277.1 = Force!<lazy>       !v    %277.0, e275.5   <val?>
  lgl$#-          %277.2 = CallSafeBuiltin    wed   is.vector(%277.1, "any")    <lgl$->
  lgl$#-          %277.3 = Not                d     %277.2, elided
  void                    Branch                   %277.2 -> BB193 (if true) | BB181 (if false)
BB278   <- [275]
  fs              %278.0 = FrameState         R     0x55de2dc4ca10+1789: [<blt c>, %249.1], env=e0.3
  fs              %278.1 = FrameState         R     0x55de2c01f0f0+250: [], env=e261.0, next=%278.0
  fs              %278.2 = FrameState         R     0x55de2a50ef70+46: [], env=e275.5, next=%278.1
  void                    Deopt              !v    %278.2, CallTarget@0x55de2a4f5340[Call#1], %275.9   !
BB163   <- [166, 162]
  int$#-          %163.0 = Phi                      %166.1:BB166, %162.1:BB162
  int$#-          %163.1 = %163.0
  lgl$#-          %163.2 = Neq                d     %161.0, 2L, elided   <@?>
  void                    Branch                   %163.2 -> BB165 (if true) | BB164 (if false)
BB271   <- [269]
  val?            %271.0 = Extract1_1D        wed   %269.1, -1L, elided   <str->
  void                    StVar              lW    labels, %271.0, e0.3
  val?^ | miss    %271.2 = LdVar              eR    unique, e0.3
  lgl$#-          %271.3 = Identical                %271.2, function(x, incomparables=FALSE, ...) <(rir::D|...
  void                    Branch                   %271.3 -> BB279 (if true) | BB280 (if false)
BB272   <- [269]
  void                    Nop                !     
  lgl$#-          %272.1 = %269.2
  dr              %272.2 = DeadBranchReached@0x55de2d7bb0f0[Test#27]
  goto BB71
BB71   <- [270, 272]
  val?^ | miss    %71.0 = Phi                      %270.1:BB270, %272.1:BB272
  val?^ | miss    %71.1 = %71.0
  dr              %71.2 = Phi                      %270.2:BB270, %272.2:BB272
  dr              %71.3 = %71.2
  fs              %71.4 = FrameState         R     0x55de2dc4ca10+3635: [], env=e0.3
  void                    Deopt              !v    %71.4, %71.3, %71.1   !
BB193   <- [277]
  val?^ | miss    %193.0 = LdVar              eR    is.object, e275.5
  lgl$#-          %193.1 = Identical                <blt is.object>, %193.0   <true>
  void                    Branch                   %193.1 -> BB283 (if true) | BB284 (if false)
BB181   <- [277]
  void                    Nop                !     
  lgl$#-          %181.1 = %277.3
  goto BB182
BB165   <- [163]
  void                    StVar              lW    i, 2L, e0.3
  int$-           %165.1 = Add                d     2L, %163.1, elided
  (cls|spec|blt)  %165.2 = LdFun              !v    getClass, e0.3
  fs              %165.3 = FrameState         R     0x55de2dc4ca10+2224: [%163.1, %161.0, %165.1, %165.2], env=e0.3
  void                    Deopt              !v    %165.3, DeadCall@0x55de2d7bb0f0[Call#54], %165.2   !
BB164   <- [163]
  void                    Nop                !     
  goto BB70
BB279   <- [271]
  val             %279.0 = ChkMissing         e     %271.0
  val?            %279.1 = StaticCall         !v    unique[0x55de2b46fbe0](%271.0) { 0 } e0.3   <str->
  void                    StVar              lW    labels, %279.1, e0.3
  val?^ | miss    %279.3 = LdVar              eR    verbose, e0.3
  val?            %279.4 = Force!<wrapped>    !v    %279.3, e0.3   <lgl$->
  lgl$#-          %279.5 = CheckTrueFalse     we    %279.4
  void                    Branch                   %279.5 -> BB158 (if true) | BB77 (if false)
BB280   <- [271]
  fs              %280.0 = FrameState         R     0x55de2dc4ca10+3703: [], env=e0.3
  void                    Deopt              !v    %280.0, CallTarget@0x55de2d7bb0f0[Call#80], %271.2   !
BB283   <- [193]
  val?^ | miss    %283.0 = LdVar              eR    X, e275.5
  val?            %283.1 = Force!<wrapped>    !v    %283.0, e275.5   <val?+>
  lgl$#-          %283.2 = CallSafeBuiltin    wed   is.object(%283.1)    <lgl$->
  lgl$-           %283.3 = LOr                      %277.3, %283.2
  lgl$-           %283.4 = %283.3
  goto BB182
BB284   <- [193]
  fs              %284.0 = FrameState         R     0x55de2dc4ca10+1789: [<blt c>, %249.1], env=e0.3
  fs              %284.1 = FrameState         R     0x55de2c01f0f0+250: [], env=e261.0, next=%284.0
  fs              %284.2 = FrameState         R     0x55de2a50ef70+78: [], env=e275.5, next=%284.1
  prom-           %284.3 = MkArg                    %277.1, .findInheritedMethods[0x55de2c1cb970]_p98 (!refl), e275.5
  val?~           %284.4 = CastType                 up %284.3
  env             e284.5 = (MkEnv)            l     mode(miss)="any", x=%284.4, parent=R_BaseNamespace, context 0
  fs              %284.6 = FrameState         R     0x55de2a3f0820+41: [%277.2], env=e284.5, next=%284.2
  void                    Deopt              !v    %284.6, DeadBranchReached@0x55de2a4f5340[Test#0], %193.1   !
BB182   <- [181, 283]
  lgl$-           %182.0 = Phi                      %283.4:BB283, %181.1:BB181
  lgl$-           %182.1 = %182.0
  lgl$#-          %182.2 = CheckTrueFalse     e     %182.1
  void                    Branch                   %182.2 -> BB192 (if true) | BB185 (if false)
BB158   <- [279]
  (cls|spec|blt)  %158.0 = LdFun              !v    cat, e0.3
  fs              %158.1 = FrameState         R     0x55de2dc4ca10+3779: [%158.0], env=e0.3
  void                    Deopt              !v    %158.1, DeadCall@0x55de2d7bb0f0[Call#81], %158.0   !
BB77   <- [279]
  val?^ | miss    %77.0 = LdVar              eR    names, e0.3
  lgl$#-          %77.1 = Identical                <blt names>, %77.0   <true>
  void                    Branch                   %77.1 -> BB285 (if true) | BB286 (if false)
BB192   <- [182]
  val?^ | miss    %192.0 = LdVar              eR    as.list, e275.5
  lgl$#-          %192.1 = Identical                %192.0, function(x, ...) <(rir::DispatchTable*)0x55de2|...
  void                    Branch                   %192.1 -> BB291 (if true) | BB292 (if false)
BB185   <- [182]
  void                    Nop                !     
  goto BB186
BB285   <- [77]
  val?^ | miss    %285.0 = LdVar              eR    table, e0.3
  val?            %285.1 = Force!<wrapped>    !v    %285.0, e0.3   <env->
  lgl$#-          %285.2 = IsType                   %285.1 isA val?-
  void                    Branch                   %285.2 -> BB295 (if true) | BB296 (if false)
BB286   <- [77]
  fs              %286.0 = FrameState         R     0x55de2dc4ca10+3764: [%279.5], env=e0.3
  void                    Deopt              !v    %286.0, DeadBranchReached@0x55de2d7bb0f0[Test#28], %77.1   !
BB291   <- [192]
  val?^ | miss    %291.0 = LdVar              eR    X, e275.5
  val?            %291.1 = Force!<wrapped>    !v    %291.0, e275.5   <vec>
  val?            %291.2 = StaticCall         !v    as.list[0x55de2e31b8f0](%291.1) { 0 } e275.5   <vec>
  void                    StVar              lW    X, %291.2, e275.5
  goto BB186
BB292   <- [192]
  fs              %292.0 = FrameState         R     0x55de2dc4ca10+1789: [<blt c>, %249.1], env=e0.3
  fs              %292.1 = FrameState         R     0x55de2c01f0f0+250: [], env=e261.0, next=%292.0
  fs              %292.2 = FrameState         R     0x55de2a50ef70+189: [%182.1], env=e275.5, next=%292.1
  void                    Deopt              !v    %292.2, CallTarget@0x55de2a4f5340[Call#3], %192.0   !
BB186   <- [185, 291]
  (cls|spec|blt)  %186.0 = LdFun              !v    .Internal, <0x55de2854e698>, e275.5
  prom-           %186.1 = MkArg                    unboundValue, .findInheritedMethods[0x55de2c1cb970]_p99, e275.5
  val?            %186.2 = Call               !v    %186.0(%186.1) e275.5   <val?+>
  val?            %186.3 = PopContext         C     %186.2, %275.2   <lgl+>
  void                    StVar              lW    eligible, %186.3, e261.0
  val?^ | miss    %186.5 = LdVar              eR    what, e261.0
  lgl$#-          %186.6 = IsType                   %186.5 isA val?~- | miss
  void                    Branch                   %186.6 -> BB287 (if true) | BB288 (if false)
BB295   <- [285]
  val?-           %295.0 = CastType           d     dn %285.1   <env->
  val+            %295.1 = CallSafeBuiltin    wed   names(%295.0)    <str->
  void                    StVar              lW    allMethods, %295.1, e0.3
  val?^ | miss    %295.3 = LdVar              eR    match, e0.3
  lgl$#-          %295.4 = Identical                %295.3, function(x, table, nomatch=NA, incomparables=N|...
  void                    Branch                   %295.4 -> BB297 (if true) | BB298 (if false)
BB296   <- [285]
  fs              %296.0 = FrameState         R     0x55de2dc4ca10+3984: [<blt names>, %285.1], env=e0.3
  void                    Deopt              !v    %296.0, Typecheck@0x55de2d7bb0f0[Type#249], %285.1   !
BB287   <- [186]
  val?~- | miss   %287.0 = CastType           d     dn %186.5
  val?-           %287.1 = Force!<value>            %287.0,    <str->
  lgl$#-          %287.2 = IsType                   %287.1 isA val+   <true>
  void                    Branch                   %287.2 -> BB289 (if true) | BB290 (if false)
BB288   <- [186]
  void                    Nop                !     
  val?^ | miss    %288.1 = %186.5
  dr              %288.2 = Typecheck@0x55de2e403808[Type#9]
  goto BB187
BB297   <- [295]
  val?^ | miss    %297.0 = LdVar              eR    labels, e0.3
  lgl$#-          %297.1 = IsType                   %297.0 isA val?~- | miss
  void                    Branch                   %297.1 -> BB299 (if true) | BB300 (if false)
BB298   <- [295]
  void                    Nop                !     
  val?^ | miss    %298.1 = %295.3
  dr              %298.2 = CallTarget@0x55de2d7bb0f0[Call#86]
  goto BB80
BB289   <- [287]
  val             %289.0 = ChkMissing         e     %186.3
  lgl$#-          %289.1 = IsType                   %289.0 isA lgl+
  void                    Branch                   %289.1 -> BB293 (if true) | BB294 (if false)
BB290   <- [287]
  void                    Nop                !     
  lgl$#-          %290.1 = %287.2
  dr              %290.2 = DeadBranchReached@0x55de2e403808[Test#2]
  goto BB187
BB187   <- [288, 290, 294]
  val?^ | miss    %187.0 = Phi                      %288.1:BB288, %290.1:BB290, %294.1:BB294
  val?^ | miss    %187.1 = %187.0
  dr              %187.2 = Phi                      %288.2:BB288, %290.2:BB290, %294.2:BB294
  dr              %187.3 = %187.2
  fs              %187.4 = FrameState         R     0x55de2dc4ca10+1789: [<blt c>, %249.1], env=e0.3
  fs              %187.5 = FrameState         R     0x55de2c01f0f0+264: [], env=e261.0, next=%187.4
  void                    Deopt              !v    %187.5, %187.3, %187.1   !
BB299   <- [297]
  val?~- | miss   %299.0 = CastType           d     dn %297.0
  val?-           %299.1 = Force!<value>            %299.0,    <str->
  val?^ | miss    %299.2 = LdVar              eR    .fillSignatures, e0.3
  lgl$#-          %299.3 = Identical                %299.2, function(sigs, n) <(rir::DispatchTable*)0x55de|...
  void                    Branch                   %299.3 -> BB301 (if true) | BB302 (if false)
BB300   <- [297]
  void                    Nop                !     
  val?^ | miss    %300.1 = %297.0
  dr              %300.2 = Typecheck@0x55de2d7bb0f0[Type#251]
  goto BB80
BB80   <- [298, 300, 302]
  val?^ | miss    %80.0 = Phi                      %298.1:BB298, %300.1:BB300, %302.1:BB302
  val?^ | miss    %80.1 = %80.0
  dr              %80.2 = Phi                      %298.2:BB298, %300.2:BB300, %302.2:BB302
  dr              %80.3 = %80.2
  fs              %80.4 = FrameState         R     0x55de2dc4ca10+4020: [], env=e0.3
  void                    Deopt              !v    %80.4, %80.3, %80.1   !
BB293   <- [289]
  lgl+            %293.0 = CastType           d     dn %289.0
  val?            %293.1 = Extract1_1D        wed   %287.1, %293.0, elided   <str->
  val?            %293.2 = %293.1
  goto BB189
BB294   <- [289]
  void                    Nop                !     
  val             %294.1 = %289.0
  dr              %294.2 = Typecheck@0x55de2e403808[Type#11]
  goto BB187
BB301   <- [299]
  prom-           %301.0 = MkArg                    unboundValue, .findInheritedMethods[0x55de2c1cb970]_p22 (!refl), e0.3
  prom-           %301.1 = MkArg                    unboundValue, .findInheritedMethods[0x55de2c1cb970]_p23, e0.3
  val?            %301.2 = StaticCall         !v    unknown--fromConstant[0x55de294dd1d0](%301.0, %301.1) from function(sigs, n) <(rir::DispatchTable*)0x55de|... { 0 1 } e0.3   <str->
  lgl$#-          %301.3 = IsType                   %301.2 isA val?-
  void                    Branch                   %301.3 -> BB303 (if true) | BB304 (if false)
BB302   <- [299]
  void                    Nop                !     
  val?^ | miss    %302.1 = %299.2
  dr              %302.2 = CallTarget@0x55de2d7bb0f0[Call#87]
  goto BB80
BB303   <- [301]
  val?-           %303.0 = CastType           d     dn %301.2   <str->
  val+            %303.1 = CallSafeBuiltin    wed   match(%299.1, %303.0, NA, nil)    <int->
  void                    StVar              lW    m, %303.1, e0.3
  lgl$#-          %303.3 = IsType                   %303.1 isA int-
  val?^ | miss    %303.4 = LdVar              eR    is.na, e0.3
  lgl$#-          %303.5 = Identical                <blt is.na>, %303.4   <true>
  void                    Branch                   %303.5 -> BB305 (if true) | BB306 (if false)
BB304   <- [301]
  fs              %304.0 = FrameState         R     0x55de2dc4ca10+4057: [], env=e0.3
  prom-           %304.1 = MkArg                    unboundValue, .findInheritedMethods[0x55de2c1cb970]_p21, e0.3
  val?^           %304.2 = CastType                 up %304.1
  prom-           %304.3 = MkArg                    %299.1, .findInheritedMethods[0x55de2c1cb970]_p20 (!refl), e0.3
  val?~           %304.4 = CastType                 up %304.3
  env             e304.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%304.2, x=%304.4, parent=R_BaseNamespace, context 0
  fs              %304.6 = FrameState         R     0x55de28d63d40+23: [%299.1], env=e304.5, next=%304.0
  fs              %304.7 = FrameState         R     0x55de28fbea10+37(pr): [%301.2], env=e0.3, next=%304.6
  void                    Deopt              !v    %304.7, Typecheck@0x55de28db6cb0[Type#1], %301.2   !
BB305   <- [303]
  void                    Branch                   %303.3 -> BB307 (if true) | BB308 (if false)
BB306   <- [303]
  void                    Nop                !     
  lgl$#-          %306.1 = %303.5
  dr              %306.2 = DeadBranchReached@0x55de2d7bb0f0[Test#29]
  goto BB84
BB307   <- [305]
  int-            %307.0 = CastType           d     dn %303.1
  lgl-            %307.1 = CallSafeBuiltin    wed   is.na(%307.0)    <lgl->
  lgl-            %307.2 = Not                wed   %307.1, elided
  void                    StVar              lW    found, %307.2, e0.3
  val?^ | miss    %307.4 = LdVar              eR    mget, e0.3
  lgl$#-          %307.5 = Identical                %307.4, function(x, envir=as.environment(-(1L)), mode=|...
  void                    Branch                   %307.5 -> BB309 (if true) | BB310 (if false)
BB308   <- [305]
  void                    Nop                !     
  val+            %308.1 = %303.1
  dr              %308.2 = Typecheck@0x55de2d7bb0f0[Type#256]
  goto BB84
BB84   <- [306, 308]
  val?^ | miss    %84.0 = Phi                      %306.1:BB306, %308.1:BB308
  val?^ | miss    %84.1 = %84.0
  dr              %84.2 = Phi                      %306.2:BB306, %308.2:BB308
  dr              %84.3 = %84.2
  fs              %84.4 = FrameState         R     0x55de2dc4ca10+4071: [], env=e0.3
  void                    Deopt              !v    %84.4, %84.3, %84.1   !
BB309   <- [307]
  prom-           %309.0 = MkArg                    unboundValue, .findInheritedMethods[0x55de2c1cb970]_p25, e0.3
  prom-           %309.1 = MkArg                    unboundValue, .findInheritedMethods[0x55de2c1cb970]_p29, e0.3
  ct              %309.2 = PushContext        lCL   %309.0, %309.1, mget([(allMethods, [(m, found)), table), function(x, envir=as.environment(-(1L)), mode=|..., e0.3
  val?^           %309.3 = CastType                 up %309.1
  val?^           %309.4 = CastType                 up %309.0
  env             e309.5 = MkEnv              l     x=%309.4, envir=%309.3, mode(miss)="any", ifnotfound(miss)=missingArg, inherits(miss)=false, parent=R_BaseNamespace, context 1
  cls             %309.6 = MkCls                    mget@133, e309.5
  val?            %309.7 = Force!<lazy>       !vL   %309.4, e309.5   <str+>
  val?            %309.8 = Force!<lazy>       !vL   %309.3, e309.5   <env->
  val?^ | miss    %309.9 = LdVar              eR    list, e309.5
  lgl$#-          %309.10 = Identical                <blt list>, %309.9   <true>
  void                    Branch                   %309.10 -> BB311 (if true) | BB312 (if false)
BB310   <- [307]
  fs              %310.0 = FrameState         R     0x55de2dc4ca10+4177: [], env=e0.3
  void                    Deopt              !v    %310.0, CallTarget@0x55de2d7bb0f0[Call#90], %307.4   !
BB311   <- [309]
  val+            %311.0 = CallSafeBuiltin    wed   list(%309.6)    <vec$->
  val?            %311.1 = CallBuiltin        !v    mget(%309.7, %309.8, "any", %311.0, false) e309.5
  val?            %311.2 = PopContext         C     %311.1, %309.2   <vec$+>
  void                    StVar              lW    methods, %311.2, e0.3
  val?^ | miss    %311.4 = LdVar              eR    verbose, e0.3
  val?            %311.5 = Force!<wrapped>    !v    %311.4, e0.3   <lgl$->
  lgl$#-          %311.6 = CheckTrueFalse     we    %311.5
  void                    Branch                   %311.6 -> BB157 (if true) | BB92 (if false)
BB312   <- [309]
  fs              %312.0 = FrameState         R     0x55de2dc4ca10+4214: [], env=e0.3
  fs              %312.1 = FrameState         R     0x55de2a88b970+37: [%309.7, %309.8, "any"], env=e309.5, next=%312.0
  void                    Deopt              !v    %312.1, DeadBranchReached@0x55de2a45bee0[Test#0], %309.10   !
BB157   <- [311]
  (cls|spec|blt)  %157.0 = LdFun              !v    cat, e0.3
  fs              %157.1 = FrameState         R     0x55de2dc4ca10+4258: [%157.0], env=e0.3
  void                    Deopt              !v    %157.1, DeadCall@0x55de2d7bb0f0[Call#91], %157.0   !
BB92   <- [311]
  val?^ | miss    %92.0 = LdVar              eR    hasGroup, e0.3
  lgl$#-          %92.1 = IsType                   %92.0 isA lgl$-
  void                    Branch                   %92.1 -> BB313 (if true) | BB314 (if false)
BB313   <- [92]
  lgl$-           %313.0 = CastType           d     dn %92.0
  lgl$#-          %313.1 = CheckTrueFalse     e     %313.0
  void                    Branch                   %313.1 -> BB156 (if true) | BB93 (if false)
BB314   <- [92]
  fs              %314.0 = FrameState         R     0x55de2dc4ca10+4243: [%311.6], env=e0.3
  void                    Deopt              !v    %314.0, Typecheck@0x55de2d7bb0f0[Type#275], %92.0   !
BB156   <- [313]
  (cls|spec|blt)  %156.0 = LdFun              !v    .getGroupMethods, e0.3
  fs              %156.1 = FrameState         R     0x55de2dc4ca10+4377: [%156.0], env=e0.3
  void                    Deopt              !v    %156.1, DeadCall@0x55de2d7bb0f0[Call#95], %156.0   !
BB93   <- [313]
  (cls|spec|blt)  %93.0 = LdFun              !v    rep, <0x55de285639b0>, e0.3
  prom-           %93.1 = MkArg                    unboundValue, .findInheritedMethods[0x55de2c1cb970]_p30, e0.3
  val?            %93.2 = Call               !v    %93.0(false, %93.1) e0.3   <lgl$->
  lgl$#-          %93.3 = IsType                   %93.2 isA lgl$-
  void                    Branch                   %93.3 -> BB315 (if true) | BB316 (if false)
BB315   <- [93]
  lgl$-           %315.0 = CastType           d     dn %93.2
  void                    StVar              lW    fromGroup, %315.0, e0.3
  val?^ | miss    %315.2 = LdVar              eR    .duplicateClassesExist, e0.3
  lgl$#-          %315.3 = Identical                %315.2, function(on) <(rir::DispatchTable*)0x55de2cdf4|...
  void                    Branch                   %315.3 -> BB317 (if true) | BB318 (if false)
BB316   <- [93]
  fs              %316.0 = FrameState         R     0x55de2dc4ca10+4353: [%93.2], env=e0.3
  void                    Deopt              !v    %316.0, Typecheck@0x55de2d7bb0f0[Type#278], %93.2   !
BB317   <- [315]
  val?            %317.0 = StaticCall         !v    .duplicateClassesExist[0x55de2f4fba50]() e0.3   <lgl$->
  lgl$#-          %317.1 = IsType                   %317.0 isA lgl$-
  void                    Branch                   %317.1 -> BB319 (if true) | BB320 (if false)
BB318   <- [315]
  fs              %318.0 = FrameState         R     0x55de2dc4ca10+4367: [], env=e0.3
  void                    Deopt              !v    %318.0, CallTarget@0x55de2d7bb0f0[Call#108], %315.2   !
BB319   <- [317]
  lgl$-           %319.0 = CastType           d     dn %317.0
  lgl$#-          %319.1 = CheckTrueFalse     e     %319.0
  void                    Branch                   %319.1 -> BB155 (if true) | BB100 (if false)
BB320   <- [317]
  void                    Nop                !     
  val?            %320.1 = %317.0
  dr              %320.2 = Typecheck@0x55de2d7bb0f0[Type#304]
  goto BB98
BB155   <- [319]
  (cls|spec|blt)  %155.0 = LdFun              !v    integer, e0.3
  fs              %155.1 = FrameState         R     0x55de2dc4ca10+4848: [%155.0], env=e0.3
  void                    Deopt              !v    %155.1, DeadCall@0x55de2d7bb0f0[Call#109], %155.0   !
BB100   <- [319]
  val?^ | miss    %100.0 = LdVar              eR    doExcluded, e0.3
  lgl$#-          %100.1 = IsType                   %100.0 isA lgl$-
  void                    Branch                   %100.1 -> BB321 (if true) | BB322 (if false)
BB98   <- [320, 322]
  val?^ | miss    %98.0 = Phi                      %320.1:BB320, %322.1:BB322
  val?^ | miss    %98.1 = %98.0
  dr              %98.2 = Phi                      %320.2:BB320, %322.2:BB322
  dr              %98.3 = %98.2
  fs              %98.4 = FrameState         R     0x55de2dc4ca10+4827: [%317.0], env=e0.3
  void                    Deopt              !v    %98.4, %98.3, %98.1   !
BB321   <- [100]
  lgl$-           %321.0 = CastType           d     dn %100.0
  lgl$#-          %321.1 = CheckTrueFalse     e     %321.0
  void                    Branch                   %321.1 -> BB148 (if true) | BB101 (if false)
BB322   <- [100]
  void                    Nop                !     
  val?^ | miss    %322.1 = %100.0
  dr              %322.2 = Typecheck@0x55de2d7bb0f0[Type#363]
  goto BB98
BB148   <- [321]
  val?^ | miss    %148.0 = LdVar              eR    methods, e0.3
  val?            %148.1 = Force!             !v    %148.0, e0.3   <val?_>
  lgl$#-          %148.2 = IsType                   %148.1 isA val+   <@?>
  void                    Branch                   %148.2 -> BB152 (if true) | BB151 (if false)
BB101   <- [321]
  void                    Nop                !     
  goto BB102
BB152   <- [148]
  val?^ | miss    %152.0 = LdVar              eR    is.na, e0.3
  lgl$#-          %152.1 = Identical                <blt is.na>, %152.0   <@?>
  void                    Branch                   %152.1 -> BB154 (if true) | BB153 (if false)
BB151   <- [148]
  prom-           %151.0 = MkArg                    unboundValue, .findInheritedMethods[0x55de2c1cb970]_p53, e0.3
  lgl$#-          %151.1 = IsType                   %148.1 isA val?+
  void                    Branch                   %151.1 -> BB329 (if true) | BB330 (if false)
BB102   <- [101, 329]
  val?^ | miss    %102.0 = LdVar              eR    length, e0.3
  lgl$#-          %102.1 = Identical                <blt length>, %102.0   <true>
  void                    Branch                   %102.1 -> BB323 (if true) | BB324 (if false)
BB154   <- [152]
  (cls|spec|blt)  %154.0 = LdFun              !v    match, e0.3
  fs              %154.1 = FrameState         R     0x55de2dc4ca10+6383: [%148.1, <blt is.na>, %154.0], env=e0.3
  void                    Deopt              !v    %154.1, DeadCall@0x55de2d7bb0f0[Call#129], %154.0   !
BB153   <- [152]
  (cls|spec|blt)  %153.0 = LdFun              !v    is.na, e0.3
  fs              %153.1 = FrameState         R     0x55de2dc4ca10+6346: [%148.1, %153.0], env=e0.3
  void                    Deopt              !v    %153.1, DeadCall@0x55de2d7bb0f0[Call#125], %153.0   !
BB329   <- [151]
  val?+           %329.0 = CastType           d     dn %148.1   <val?_>
  val?            %329.1 = Extract1_1D        wed   %329.0, %151.0, elided   <val?_>
  void                    StVar              lW    methods, %329.1, e0.3
  goto BB102
BB330   <- [151]
  fs              %330.0 = FrameState         R     0x55de2dc4ca10+6282: [%148.1], env=e0.3
  void                    Deopt              !v    %330.0, Typecheck@0x55de2d7bb0f0[Type#364], %148.1   !
BB323   <- [102]
  val?^ | miss    %323.0 = LdVar              eR    methods, e0.3
  lgl$#-          %323.1 = IsType                   %323.0 isA val?~+ | miss
  void                    Branch                   %323.1 -> BB325 (if true) | BB326 (if false)
BB324   <- [102]
  void                    Nop                !     
  lgl$#-          %324.1 = %102.1
  dr              %324.2 = DeadBranchReached@0x55de2d7bb0f0[Test#50]
  goto BB103
BB325   <- [323]
  val?~+ | miss   %325.0 = CastType           d     dn %323.0
  val?+           %325.1 = Force!<value>            %325.0,    <vec$+>
  (int|real)$-    %325.2 = CallSafeBuiltin    wed   length(%325.1)    <int$->
  lgl$#-          %325.3 = IsType                   %325.2 isA int$-
  void                    Branch                   %325.3 -> BB327 (if true) | BB328 (if false)
BB326   <- [323]
  void                    Nop                !     
  val?^ | miss    %326.1 = %323.0
  dr              %326.2 = Typecheck@0x55de2d7bb0f0[Type#384]
  goto BB103
BB103   <- [324, 326]
  val?^ | miss    %103.0 = Phi                      %324.1:BB324, %326.1:BB326
  val?^ | miss    %103.1 = %103.0
  dr              %103.2 = Phi                      %324.2:BB324, %326.2:BB326
  dr              %103.3 = %103.2
  fs              %103.4 = FrameState         R     0x55de2dc4ca10+6458: [], env=e0.3
  void                    Deopt              !v    %103.4, %103.3, %103.1   !
BB327   <- [325]
  int$-           %327.0 = CastType           d     dn %325.2
  lgl$-           %327.1 = Gt                 d     %327.0, 1L, elided   <lgl$->
  lgl$#-          %327.2 = CheckTrueFalse     e     %327.1
  void                    Branch                   %327.2 -> BB147 (if true) | BB107 (if false)
BB328   <- [325]
  fs              %328.0 = FrameState         R     0x55de2dc4ca10+6549: [%325.2], env=e0.3
  void                    Deopt              !v    %328.0, Typecheck@0x55de2d7bb0f0[Type#385], %325.2   !
BB147   <- [327]
  (cls|spec|blt)  %147.0 = LdFun              !v    paste, e0.3
  fs              %147.1 = FrameState         R     0x55de2dc4ca10+6582: [%147.0], env=e0.3
  void                    Deopt              !v    %147.1, DeadCall@0x55de2d7bb0f0[Call#133], %147.0   !
BB107   <- [327]
  val?^ | miss    %107.0 = LdVar              eR    simpleOnly, e0.3
  val?            %107.1 = Force!<wrapped>    !v    %107.0, e0.3   <lgl$->
  lgl$-           %107.2 = AsLogical          e     %107.1
  lgl$#-          %107.3 = Identical                %107.2, false
  void                    Branch                   %107.3 -> BB146 (if true) | BB110 (if false)
BB146   <- [107]
  void                    Nop                !     
  lgl$-           %146.1 = %107.2
  goto BB113
BB110   <- [107]
  val?^ | miss    %110.0 = LdVar              eR    length, e0.3
  lgl$#-          %110.1 = Identical                <blt length>, %110.0   <true>
  void                    Branch                   %110.1 -> BB331 (if true) | BB332 (if false)
BB113   <- [146, 335]
  lgl$-           %113.0 = Phi                      %335.4:BB335, %146.1:BB146
  lgl$-           %113.1 = %113.0
  lgl$#-          %113.2 = CheckTrueFalse     e     %113.1
  void                    Branch                   %113.2 -> BB145 (if true) | BB116 (if false)
BB331   <- [110]
  val?^ | miss    %331.0 = LdVar              eR    methods, e0.3
  lgl$#-          %331.1 = IsType                   %331.0 isA val?~+ | miss
  void                    Branch                   %331.1 -> BB333 (if true) | BB334 (if false)
BB332   <- [110]
  void                    Nop                !     
  lgl$#-          %332.1 = %110.1
  dr              %332.2 = DeadBranchReached@0x55de2d7bb0f0[Test#57]
  goto BB108
BB145   <- [113]
  (cls|spec|blt)  %145.0 = LdFun              !v    Recall, e0.3
  fs              %145.1 = FrameState         R     0x55de2dc4ca10+7866: [%145.0], env=e0.3
  void                    Deopt              !v    %145.1, DeadCall@0x55de2d7bb0f0[Call#154], %145.0   !
BB116   <- [113]
  val?^ | miss    %116.0 = LdVar              eR    length, e0.3
  lgl$#-          %116.1 = Identical                <blt length>, %116.0   <true>
  void                    Branch                   %116.1 -> BB337 (if true) | BB338 (if false)
BB333   <- [331]
  val?~+ | miss   %333.0 = CastType           d     dn %331.0
  val?+           %333.1 = Force!<value>            %333.0,    <vec$+>
  (int|real)$-    %333.2 = CallSafeBuiltin    wed   length(%333.1)    <int$->
  lgl$#-          %333.3 = IsType                   %333.2 isA int$-
  void                    Branch                   %333.3 -> BB335 (if true) | BB336 (if false)
BB334   <- [331]
  void                    Nop                !     
  val?^ | miss    %334.1 = %331.0
  dr              %334.2 = Typecheck@0x55de2d7bb0f0[Type#452]
  goto BB108
BB108   <- [332, 334]
  val?^ | miss    %108.0 = Phi                      %332.1:BB332, %334.1:BB334
  val?^ | miss    %108.1 = %108.0
  dr              %108.2 = Phi                      %332.2:BB332, %334.2:BB334
  dr              %108.3 = %108.2
  fs              %108.4 = FrameState         R     0x55de2dc4ca10+7728: [%107.1], env=e0.3
  void                    Deopt              !v    %108.4, %108.3, %108.1   !
BB337   <- [116]
  val?^ | miss    %337.0 = LdVar              eR    methods, e0.3
  lgl$#-          %337.1 = IsType                   %337.0 isA val?~+ | miss
  void                    Branch                   %337.1 -> BB339 (if true) | BB340 (if false)
BB338   <- [116]
  void                    Nop                !     
  lgl$#-          %338.1 = %116.1
  dr              %338.2 = DeadBranchReached@0x55de2d7bb0f0[Test#59]
  goto BB114
BB335   <- [333]
  int$-           %335.0 = CastType           d     dn %333.2
  lgl$-           %335.1 = Eq                 d     %335.0, 0L, elided   <lgl$->
  lgl$-           %335.2 = AsLogical                %335.1
  lgl$-           %335.3 = LAnd                     %107.2, %335.2
  lgl$-           %335.4 = %335.3
  goto BB113
BB336   <- [333]
  fs              %336.0 = FrameState         R     0x55de2dc4ca10+7831: [%107.2, %333.2], env=e0.3
  void                    Deopt              !v    %336.0, Typecheck@0x55de2d7bb0f0[Type#453], %333.2   !
BB339   <- [337]
  val?~+ | miss   %339.0 = CastType           d     dn %337.0
  val?+           %339.1 = Force!<value>            %339.0,    <vec$+>
  (int|real)$-    %339.2 = CallSafeBuiltin    wed   length(%339.1)    <int$->
  lgl$#-          %339.3 = IsType                   %339.2 isA int$-
  void                    Branch                   %339.3 -> BB341 (if true) | BB342 (if false)
BB340   <- [337]
  void                    Nop                !     
  val?^ | miss    %340.1 = %337.0
  dr              %340.2 = Typecheck@0x55de2d7bb0f0[Type#474]
  goto BB114
BB114   <- [338, 340]
  val?^ | miss    %114.0 = Phi                      %338.1:BB338, %340.1:BB340
  val?^ | miss    %114.1 = %114.0
  dr              %114.2 = Phi                      %338.2:BB338, %340.2:BB340
  dr              %114.3 = %114.2
  fs              %114.4 = FrameState         R     0x55de2dc4ca10+7850: [%113.1], env=e0.3
  void                    Deopt              !v    %114.4, %114.3, %114.1   !
BB341   <- [339]
  int$-           %341.0 = CastType           d     dn %339.2
  lgl$#-          %341.1 = CheckTrueFalse     e     %341.0
  void                    Branch                   %341.1 -> BB123 (if true) | BB119 (if false)
BB342   <- [339]
  void                    Nop                !     
  (int|real)$-    %342.1 = %339.2
  dr              %342.2 = Typecheck@0x55de2d7bb0f0[Type#475]
  goto BB117
BB123   <- [341]
  val?^ | miss    %123.0 = LdVar              eR    .sigLabel, e0.3
  lgl$#-          %123.1 = Identical                %123.0, function(sig) <(rir::DispatchTable*)0x55de2b41|...
  void                    Branch                   %123.1 -> BB343 (if true) | BB344 (if false)
BB119   <- [341]
  void                    Nop                !     
  goto BB120
BB117   <- [342, 344, 346]
  val?^ | miss    %117.0 = Phi                      %342.1:BB342, %344.1:BB344, %346.1:BB346
  val?^ | miss    %117.1 = %117.0
  dr              %117.2 = Phi                      %342.2:BB342, %344.2:BB344, %346.2:BB346
  dr              %117.3 = %117.2
  fs              %117.4 = FrameState         R     0x55de2dc4ca10+8203: [%339.2], env=e0.3
  void                    Deopt              !v    %117.4, %117.3, %117.1   !
BB343   <- [123]
  prom-           %343.0 = MkArg                    unboundValue, .findInheritedMethods[0x55de2c1cb970]_p32, e0.3
  val?^           %343.1 = CastType                 up %343.0
  val?^ | miss    %343.2 = LdVar              eR    paste, <env 0x55de28b56378>
  lgl$#-          %343.3 = Identical                %343.2, function(..., sep=" ", collapse=NULL, recycle0|...
  void                    Branch                   %343.3 -> BB345 (if true) | BB346 (if false)
BB344   <- [123]
  void                    Nop                !     
  val?^ | miss    %344.1 = %123.0
  dr              %344.2 = CallTarget@0x55de2d7bb0f0[Call#161]
  goto BB117
BB120   <- [119, 132, 357]
  val?^ | miss    %120.0 = LdVar              eR    methods, e0.3
  lgl$#-          %120.1 = IsType                   %120.0 isA val?~+ | miss
  void                    Branch                   %120.1 -> BB347 (if true) | BB348 (if false)
BB345   <- [343]
  env             e345.0 = MkEnv              l     sig=%343.1, parent=<env 0x55de28b56378>, context 0
  prom-           %345.1 = MkArg                    unboundValue, .findInheritedMethods[0x55de2c1cb970]_p90, e345.0
  dots-           %345.2 = DotsList           l     %345.1
  val?^ | miss    %345.3 = CastType                 up %345.1
  env             e345.4 = MkEnv              l     ...=%345.2, sep(miss)=" ", collapse="#", recycle0(miss)=false, parent=R_BaseNamespace, context -1
  val?            %345.5 = Force!             !vL   %345.3, e345.4
  val+            %345.6 = CallSafeBuiltin    wed   list(%345.5)    <vec->
  val+            %345.7 = CallSafeBuiltin    wed   paste(%345.6, " ", "#", false)    <str$->
  void                    StVar              lW    tlabel, %345.7, e0.3
  val?^ | miss    %345.9 = LdVar              eR    methods, e0.3
  lgl$#-          %345.10 = IsType                   %345.9 isA val?~+ | miss
  void                    Branch                   %345.10 -> BB349 (if true) | BB350 (if false)
BB346   <- [343]
  void                    Nop                !     
  val?^ | miss    %346.1 = %343.2
  dr              %346.2 = CallTarget@0x55de2b0fcef8[Call#0]
  goto BB117
BB347   <- [120]
  val?~+ | miss   %347.0 = CastType           d     dn %120.0
  void                    Visible            v     
  val?+           %347.2 = Force!<value>            %347.0,    <vec$+>
  void                    Return             l     %347.2
BB348   <- [120]
  fs              %348.0 = FrameState         R     0x55de2dc4ca10+8774: [], env=e0.3
  void                    Deopt              !v    %348.0, Typecheck@0x55de2d7bb0f0[Type#509], %120.0   !
BB349   <- [345]
  val?~+ | miss   %349.0 = CastType           d     dn %345.9
  val?+           %349.1 = Force!<value>            %349.0,    <vec$+>
  lgl$#-          %349.2 = IsType                   %349.1 isA val+   <true>
  void                    Branch                   %349.2 -> BB351 (if true) | BB352 (if false)
BB350   <- [345]
  void                    Nop                !     
  val?^ | miss    %350.1 = %345.9
  dr              %350.2 = Typecheck@0x55de2d7bb0f0[Type#478]
  goto BB124
BB351   <- [349]
  val?            %351.0 = Extract2_1D        wed   %349.1, 1L, elided   <cls>
  void                    StVar              lW    m, %351.0, e0.3
  val?^ | miss    %351.2 = LdVar              eR    is, e0.3
  lgl$#-          %351.3 = Identical                %351.2, function(object, class2) <(rir::DispatchTable*|...
  void                    Branch                   %351.3 -> BB353 (if true) | BB354 (if false)
BB352   <- [349]
  void                    Nop                !     
  lgl$#-          %352.1 = %349.2
  dr              %352.2 = DeadBranchReached@0x55de2d7bb0f0[Test#60]
  goto BB124
BB124   <- [350, 352]
  val?^ | miss    %124.0 = Phi                      %350.1:BB350, %352.1:BB352
  val?^ | miss    %124.1 = %124.0
  dr              %124.2 = Phi                      %350.2:BB350, %352.2:BB352
  dr              %124.3 = %124.2
  fs              %124.4 = FrameState         R     0x55de2dc4ca10+8265: [], env=e0.3
  void                    Deopt              !v    %124.4, %124.3, %124.1   !
BB353   <- [351]
  prom-           %353.0 = MkArg                    unboundValue, .findInheritedMethods[0x55de2c1cb970]_p33 (!refl), e0.3
  val?            %353.1 = Call               !v    function(object, class2) <(rir::DispatchTable*|...(%353.0, "MethodDefinition") e0.3   <lgl$->
  lgl$#-          %353.2 = IsType                   %353.1 isA lgl$-
  void                    Branch                   %353.2 -> BB355 (if true) | BB356 (if false)
BB354   <- [351]
  fs              %354.0 = FrameState         R     0x55de2dc4ca10+8332: [], env=e0.3
  void                    Deopt              !v    %354.0, CallTarget@0x55de2d7bb0f0[Call#162], %351.2   !
BB355   <- [353]
  lgl$-           %355.0 = CastType           d     dn %353.1
  lgl$#-          %355.1 = CheckTrueFalse     e     %355.0
  void                    Branch                   %355.1 -> BB138 (if true) | BB130 (if false)
BB356   <- [353]
  fs              %356.0 = FrameState         R     0x55de2dc4ca10+8369: [%353.1], env=e0.3
  void                    Deopt              !v    %356.0, Typecheck@0x55de2d7bb0f0[Type#481], %353.1   !
BB138   <- [355]
  (cls|spec|blt)  %138.0 = LdFun              !v    <-, <0x55de28543da8>, e0.3
  prom-           %138.1 = MkArg                    unboundValue, .findInheritedMethods[0x55de2c1cb970]_p37, e0.3
  prom-           %138.2 = MkArg                    unboundValue, .findInheritedMethods[0x55de2c1cb970]_p40, e0.3
  val?            %138.3 = Call               !v    %138.0(%138.1, %138.2) e0.3
  val?^ | miss    %138.4 = LdVar              eR    .inheritedArgsExpression, e0.3
  lgl$#-          %138.5 = Identical                %138.4, function(target, defined, body) <(rir::Dispatc|...
  void                    Branch                   %138.5 -> BB359 (if true) | BB360 (if false)
BB130   <- [355]
  void                    Nop                !     
  goto BB131
BB359   <- [138]
  prom-           %359.0 = MkArg                    unboundValue, .findInheritedMethods[0x55de2c1cb970]_p45, e0.3
  prom-           %359.1 = MkArg                    unboundValue, .findInheritedMethods[0x55de2c1cb970]_p48, e0.3
  prom-           %359.2 = MkArg                    unboundValue, .findInheritedMethods[0x55de2c1cb970]_p51, e0.3
  val?            %359.3 = StaticCall         !v    .inheritedArgsExpression[0x55de2ccb8580](%359.0, %359.1, %359.2) e0.3   <nil->
  lgl$-           %359.4 = Is                       %359.3, NULL
  void                    StVar              lW    coerce, %359.3, e0.3
  val             %359.6 = ChkMissing         e     %359.3
  lgl$-           %359.7 = Not                d     %359.4, elided
  lgl$#-          %359.8 = CheckTrueFalse     e     %359.7
  void                    Branch                   %359.8 -> BB144 (if true) | BB141 (if false)
BB360   <- [138]
  fs              %360.0 = FrameState         R     0x55de2dc4ca10+8422: [%138.3], env=e0.3
  void                    Deopt              !v    %360.0, CallTarget@0x55de2d7bb0f0[Call#167], %138.4   !
BB131   <- [130, 361]
  val?^ | miss    %131.0 = LdVar              eR    doCache, e0.3
  val?            %131.1 = Force!<lazy>       !v    %131.0, e0.3   <lgl$->
  lgl$#-          %131.2 = CheckTrueFalse     we    %131.1
  void                    Branch                   %131.2 -> BB133 (if true) | BB132 (if false)
BB144   <- [359]
  (cls|spec|blt)  %144.0 = LdFun              !v    body<-, e0.3
  fs              %144.1 = FrameState         R     0x55de2dc4ca10+8529: [%359.3, %144.0], env=e0.3
  void                    Deopt              !v    %144.1, DeadCall@0x55de2d7bb0f0[Call#171], %144.0   !
BB141   <- [359]
  val?^ | miss    %141.0 = LdVar              eR    m, e0.3
  val?            %141.1 = Force!<value>      !v    %141.0, e0.3   <cls>
  val?^ | miss    %141.2 = LdVar              eR    methods !upd, e0.3
  lgl$#-          %141.3 = IsType                   %141.2 isA val?~+ | miss
  void                    Branch                   %141.3 -> BB361 (if true) | BB362 (if false)
BB133   <- [131]
  val?^ | miss    %133.0 = LdVar              eR    verbose, e0.3
  val?            %133.1 = Force!<wrapped>    !v    %133.0, e0.3   <lgl$->
  lgl$#-          %133.2 = CheckTrueFalse     we    %133.1
  void                    Branch                   %133.2 -> BB137 (if true) | BB136 (if false)
BB132   <- [131]
  void                    Nop                !     
  goto BB120
BB361   <- [141]
  val?~+ | miss   %361.0 = CastType           d     dn %141.2
  val?+           %361.1 = Force!<value>            %361.0,    <vec$+>
  val?            %361.2 = Subassign2_1D      !v    %141.1, %361.1, 1L, e0.3
  void                    StVar              lW    methods, %361.2, e0.3
  goto BB131
BB362   <- [141]
  fs              %362.0 = FrameState         R     0x55de2dc4ca10+8601: [%141.1], env=e0.3
  void                    Deopt              !v    %362.0, Typecheck@0x55de2d7bb0f0[Type#503], %141.2   !
BB137   <- [133]
  (cls|spec|blt)  %137.0 = LdFun              !v    cat, e0.3
  fs              %137.1 = FrameState         R     0x55de2dc4ca10+8691: [%137.0], env=e0.3
  void                    Deopt              !v    %137.1, DeadCall@0x55de2d7bb0f0[Call#172], %137.0   !
BB136   <- [133]
  val?^ | miss    %136.0 = LdVar              eR    assign, e0.3
  lgl$#-          %136.1 = Identical                %136.0, function(x, value, pos=-(1), envir=as.environm|...
  void                    Branch                   %136.1 -> BB357 (if true) | BB358 (if false)
BB357   <- [136]
  prom-           %357.0 = MkArg                    unboundValue, .findInheritedMethods[0x55de2c1cb970]_p34, e0.3
  prom-           %357.1 = MkArg                    unboundValue, .findInheritedMethods[0x55de2c1cb970]_p35, e0.3
  prom-           %357.2 = MkArg                    unboundValue, .findInheritedMethods[0x55de2c1cb970]_p36, e0.3
  val?            %357.3 = StaticCall         !v    assign[0x55de2939bc90](%357.0, %357.1, missingArg, %357.2) { 0 1 3n } e0.3
  goto BB120
BB358   <- [136]
  fs              %358.0 = FrameState         R     0x55de2dc4ca10+8676: [%133.2], env=e0.3
  void                    Deopt              !v    %358.0, CallTarget@0x55de2d7bb0f0[Call#173], %136.0   !
Prom 0:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     get, <0x55de29474e78>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de2c1cb970]_p1, e0.0
  val?            %0.3  = NamedCall          !     %0.1(".MTable", envir=%0.2) e0.0   <env->
  void                    Return             l     %0.3
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     environment, <0x55de288f5b68>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de2c1cb970]_p2, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <env->
  void                    Return             l     %0.3
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fdef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 4:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     .simpleInheritanceGeneric, <0x55de2e251700>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de2c1cb970]_p5, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <lgl$->
  void                    Return             l     %0.3
Prom 5:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fdef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 7:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     is.environment, <0x55de2855ee18>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de2c1cb970]_p8, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <lgl$->
  void                    Return             l     %0.3
Prom 8:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    mtable, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 9:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     environment, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de2c1cb970]_p10, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 10:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fdef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 11:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     .allowPrimitiveMethods, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de2c1cb970]_p12, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 12:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    primMethods, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 13:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fdef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 14:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    group, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 15:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    cl1, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$+>
  void                    Return             l     %0.3
Prom 16:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 20:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    labels, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 21:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     .fillSignatures, <0x55de2e2533b8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de2c1cb970]_p22, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x55de2c1cb970]_p23, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <str->
  void                    Return             l     %0.4
Prom 22:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    allMethods, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 23:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     length, <0x55de2854fa90>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de2c1cb970]_p24, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <int$->
  void                    Return             l     %0.3
Prom 24:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    classes, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <vec$->
  void                    Return             l     %0.3
Prom 25:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    allMethods, e0.0
  val?            %0.2  = Force<value>       !v    %0.1, e0.0   <str->
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <true>
  void                    Branch                   %0.3 -> BB2 (if true) | BB7 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    m, e0.0
  val?            %2.1  = Force<value>       !v    %2.0, e0.0   <int->
  lgl$#-          %2.2  = IsType                   %2.1 isA val+   <true>
  void                    Branch                   %2.2 -> BB6 (if true) | BB3 (if false)
BB7   <- [0]
  prom-           %7.0  = MkArg                    unboundValue, .findInheritedMethods[0x55de2c1cb970]_p27, e0.0
  prom-           %7.1  = %7.0
  goto BB5
BB6   <- [2]
  val?^ | miss    %6.0  = LdVar              eR    found, e0.0
  val?            %6.1  = Force<value>       !v    %6.0, e0.0   <lgl->
  val?            %6.2  = %6.1
  goto BB4
BB3   <- [2]
  prom-           %3.0  = MkArg                    unboundValue, .findInheritedMethods[0x55de2c1cb970]_p26, e0.0
  prom-           %3.1  = %3.0
  goto BB4
BB5   <- [7, 4]
  val?            %5.0  = Phi                      %4.3:BB4, %7.1:BB7
  val?            %5.1  = %5.0
  val?            %5.2  = Extract1_1D        !v    %0.2, %5.1, e0.0   <str$->
  void                    Visible            v     
  void                    Return             l     %5.2
BB4   <- [3, 6]
  val?            %4.0  = Phi                      %6.2:BB6, %3.1:BB3
  val?            %4.1  = %4.0
  val?            %4.2  = Extract1_1D        !v    %2.1, %4.1, e0.0   <int$->
  val?            %4.3  = %4.2
  goto BB5
Prom 26:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    found, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 27:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    m, e0.0
  val?            %0.2  = Force              !v    %0.1, e0.0   <val?_>
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <@?>
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    found, e0.0
  val?            %2.1  = Force              !v    %2.0, e0.0   <val?_>
  val?            %2.2  = %2.1
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, .findInheritedMethods[0x55de2c1cb970]_p28, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.2:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract1_1D        !v    %0.2, %3.1, e0.0   <val?_>
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 28:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    found, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 29:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    table, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 30:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     length, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de2c1cb970]_p31, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 31:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    methods, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 32:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    classes, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <vec$->
  void                    Return             l     %0.3
Prom 33:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    m, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 34:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    tlabel, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 35:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    m, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 36:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    mtable, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 37:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de2c1cb970]_p38, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x55de2c1cb970]_p39, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 38:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    m, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 39:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    target, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 40:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     .newSignature, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de2c1cb970]_p41, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x55de2c1cb970]_p42, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 41:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    classes, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 42:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de2c1cb970]_p43, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x55de2c1cb970]_p44, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 43:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fdef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 44:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    signature, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 45:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, <0x55de2854ebd8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de2c1cb970]_p46, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x55de2c1cb970]_p47, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <str$>
  void                    Return             l     %0.4
Prom 46:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    m, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 47:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    target, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 48:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, <0x55de2854ebd8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de2c1cb970]_p49, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x55de2c1cb970]_p50, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <str$>
  void                    Return             l     %0.4
Prom 49:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    m, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 50:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    defined, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 51:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     body, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de2c1cb970]_p52, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 52:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    m, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 53:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     is.na, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de2c1cb970]_p54, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 54:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     match, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de2c1cb970]_p55, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x55de2c1cb970]_p57, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 55:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     names, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de2c1cb970]_p56, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 56:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    methods, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 57:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     as.character, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de2c1cb970]_p58, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 58:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    excluded, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 59:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    nargs, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  val?            %0.4  = Colon              !     2L, %0.3, e0.0   <val?_>
  void                    Return             l     %0.4
Prom 60:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !v    getClass, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de2c1cb970]_p61, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x55de2c1cb970]_p63, e0.0
  val?            %0.4  = NamedCall          !v    %0.1(%0.2, where=%0.3, .Force=true) e0.0   <val?_>
  val?^ | miss    %0.5  = LdVar              eR    classDefs, e0.0
  val?            %0.6  = Force              !v    %0.5, e0.0   <val?_>
  val?^ | miss    %0.7  = LdVar              eR    i, e0.0
  val?            %0.8  = Force              !v    %0.7, e0.0   <val?_>
  val?            %0.9  = Subassign2_1D      !v    %0.4, %0.6, %0.8, e0.0
  void                    StVar              lW    classDefs, %0.9, e0.0
  void                    StVar              lW    cc, %0.4, e0.0
  lgl$-           %0.12 = Missing            eR    useInherited, e0.0
  lgl$-           %0.13 = AsLogical                %0.12
  lgl$#-          %0.14 = Identical                %0.13, true
  void                    Branch                   %0.14 -> BB2 (if true) | BB7 (if false)
BB2   <- [0]
  void                    Nop                !     
  lgl$-           %2.1  = %0.13
  goto BB3
BB7   <- [0]
  val?^ | miss    %7.0  = LdVar              eR    useInherited, e0.0
  val?            %7.1  = Force              !v    %7.0, e0.0   <val?_>
  lgl$#-          %7.2  = IsType                   %7.1 isA val+   <@?>
  void                    Branch                   %7.2 -> BB8 (if true) | BB10 (if false)
BB3   <- [2, 9]
  lgl$-           %3.0  = Phi                      %9.5:BB9, %2.1:BB2
  lgl$-           %3.1  = %3.0
  lgl$#-          %3.2  = CheckTrueFalse     e     %3.1
  void                    Branch                   %3.2 -> BB6 (if true) | BB4 (if false)
BB8   <- [7]
  val?^ | miss    %8.0  = LdVar              eR    i, e0.0
  val?            %8.1  = Force              !v    %8.0, e0.0   <val?_>
  val?            %8.2  = %8.1
  goto BB9
BB10   <- [7]
  prom-           %10.0 = MkArg                    unboundValue, .findInheritedMethods[0x55de2c1cb970]_p79, e0.0
  prom-           %10.1 = %10.0
  goto BB9
BB6   <- [3]
  (cls|spec|blt)  %6.0  = LdFun              !v    c, e0.0
  prom-           %6.1  = MkArg                    unboundValue, .findInheritedMethods[0x55de2c1cb970]_p71, e0.0
  prom-           %6.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de2c1cb970]_p74, e0.0
  val?            %6.3  = Call               !v    %6.0(%6.1, %6.2, "ANY") e0.0   <val?_>
  val?            %6.4  = %6.3
  goto BB5
BB4   <- [3]
  (cls|spec|blt)  %4.0  = LdFun              !v    @, e0.0
  prom-           %4.1  = MkArg                    unboundValue, .findInheritedMethods[0x55de2c1cb970]_p64, e0.0
  prom-           %4.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de2c1cb970]_p65, e0.0
  val?            %4.3  = Call               !v    %4.0(%4.1, %4.2) e0.0   <val?_>
  val?            %4.4  = %4.3
  goto BB5
BB9   <- [10, 8]
  val?            %9.0  = Phi                      %8.2:BB8, %10.1:BB10
  val?            %9.1  = %9.0
  val?            %9.2  = Extract2_1D        !v    %7.1, %9.1, e0.0   <val?_>
  lgl$-           %9.3  = AsLogical          e     %9.2
  lgl$-           %9.4  = LOr                      %0.13, %9.3
  lgl$-           %9.5  = %9.4
  goto BB3
BB5   <- [4, 6]
  val?            %5.0  = Phi                      %4.4:BB4, %6.4:BB6
  val?            %5.1  = %5.0
  void                    StVar              lW    allLabels, %5.1, e0.0
  (cls|spec|blt)  %5.3  = LdFun              !v    outerLabels, e0.0
  prom-           %5.4  = MkArg                    unboundValue, .findInheritedMethods[0x55de2c1cb970]_p66, e0.0
  prom-           %5.5  = MkArg                    unboundValue, .findInheritedMethods[0x55de2c1cb970]_p67, e0.0
  val?            %5.6  = Call               !v    %5.3(%5.4, %5.5) e0.0   <val?_>
  void                    StVar              lW    labels, %5.6, e0.0
  (cls|spec|blt)  %5.8  = LdFun              !v    c, e0.0
  prom-           %5.9  = MkArg                    unboundValue, .findInheritedMethods[0x55de2c1cb970]_p68, e0.0
  prom-           %5.10 = MkArg                    unboundValue, .findInheritedMethods[0x55de2c1cb970]_p69, e0.0
  val?            %5.11 = Call               !v    %5.8(%5.9, %5.10) e0.0   <val?_>
  void                    Invisible          v     
  void                    StVar              lW    supersList, %5.11, e0.0
  void                    Return             l     %5.11
Prom 61:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    classes, e0.0
  val?            %0.2  = Force              !v    %0.1, e0.0   <val?_>
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <@?>
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    i, e0.0
  val?            %2.1  = Force              !v    %2.0, e0.0   <val?_>
  val?            %2.2  = %2.1
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, .findInheritedMethods[0x55de2c1cb970]_p62, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.2:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract2_1D        !v    %0.2, %3.1, e0.0   <val?_>
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 62:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    i, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 63:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 64:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    cc, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 65:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    className, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 66:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    labels, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 67:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    allLabels, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 68:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    supersList, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 69:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     list, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de2c1cb970]_p70, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 70:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    allLabels, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 71:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de2c1cb970]_p72, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x55de2c1cb970]_p73, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 72:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    cc, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 73:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    className, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 74:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     .eligibleSuperClasses, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de2c1cb970]_p75, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x55de2c1cb970]_p78, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 75:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de2c1cb970]_p76, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x55de2c1cb970]_p77, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 76:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    cc, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 77:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    contains, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 78:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    simpleOnly, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 79:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    i, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 80:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, <0x55de2854ebd8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de2c1cb970]_p81, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x55de2c1cb970]_p82, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <vec+>
  void                    Return             l     %0.4
Prom 81:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    def, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 82:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    contains, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 83:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    simpleOnly, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <lgl$->
  void                    Return             l     %0.3
Prom 84:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    contains, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 85:
BB0
  env             e0.0  = LdFunctionEnv            
  cls             %0.1  = MkCls                    .eligibleSuperClasses@Prom(1)16, e0.0
  cls             %0.2  = MkCls                    .eligibleSuperClasses@Prom(1)37, e0.0
  val?^ | miss    %0.3  = LdVar              eR    simpleOnly, e0.0
  void                    Visible            v     
  val?            %0.5  = Force<lazy>        !     %0.3, e0.0   <lgl$->
  lgl$#-          %0.6  = CheckTrueFalse     we    %0.5
  void                    Branch                   %0.6 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  void                    Nop                !     
  cls             %2.1  = %0.2
  goto BB3
BB4   <- [0]
  void                    Nop                !     
  cls             %4.1  = %0.1
  goto BB3
BB3   <- [4, 2]
  cls             %3.0  = Phi                      %4.1:BB4, %2.1:BB2
  cls             %3.1  = %3.0
  void                    Return             l     %3.1
Prom 90:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    sig, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <(str|vec)>
  void                    Return             l     %0.3
Prom 95:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    FUN, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <(cls|blt)->
  void                    Return             l     %0.3
Prom 98:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    X, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <val?>
  void                    Return             l     %0.3
Prom 99:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     vapply, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de2c1cb970]_p100, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x55de2c1cb970]_p101, e0.0
  prom-           %0.4  = MkArg                    unboundValue, .findInheritedMethods[0x55de2c1cb970]_p102, e0.0
  prom-           %0.5  = MkArg                    unboundValue, .findInheritedMethods[0x55de2c1cb970]_p103, e0.0
  val?            %0.6  = Call               !     %0.1(%0.2, %0.3, %0.4, %0.5) e0.0   <val?_>
  void                    Return             l     %0.6
Prom 100:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    X, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 101:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    FUN, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 102:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    FUN.VALUE, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 103:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    USE.NAMES, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3

│ .findInheritedMethods[0x55de2c1cb970]                                        │
└──────────────────────────────────────────────────────────────────────────────┘
