
┌──────────────────────────────────────────────────────────────────────────────┐
│ .inheritedArgsExpression[0x55de353508e0]                                     │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch                                      │
│ Properties:                                                                  │
├────── Final PIR Version
.inheritedArgsExpression[0x55de353508e0]
BB0
  val?^           %0.0  = LdArg                    2
  val?^           %0.1  = LdArg                    1
  val?^           %0.2  = LdArg                    0
  env             e0.3  = MkEnv              l     target=%0.2, defined=%0.1, body=%0.0, parent=<env 0x55de28b56378>, context 1
  (cls|spec|blt)  %0.4  = LdFun              !v    substitute, <0x55de2854e468>, <env 0x55de28b56378>
  prom-           %0.5  = MkArg                    unboundValue, .inheritedArgsExpression[0x55de353508e0]_p1, e0.3
  val?            %0.6  = Call               !v    %0.4(nil, %0.5) e0.3   <code->
  void                    StVar              lW    expr, %0.6, e0.3
  val?^ | miss    %0.8  = LdVar              eR    names, e0.3
  lgl$#-          %0.9  = Identical                <blt names>, %0.8   <true>
  void                    Branch                   %0.9 -> BB47 (if true) | BB48 (if false)
BB47   <- [0]
  val?^ | miss    %47.0 = LdVar              eR    defined, e0.3
  val?            %47.1 = Force!<lazy>       !v    %47.0, e0.3   <str$>
  val?            %47.2 = CallBuiltin        !v    names(%47.1) e0.3   <str$->
  void                    StVar              lW    args, %47.2, e0.3
  val?^ | miss    %47.4 = LdVar              eR    seq_along, e0.3
  lgl$#-          %47.5 = Identical                <blt seq_along>, %47.4   <true>
  void                    Branch                   %47.5 -> BB49 (if true) | BB50 (if false)
BB48   <- [0]
  fs              %48.0 = FrameState         R     0x55de3162edb0+51: [], env=e0.3
  void                    Deopt              !v    %48.0, DeadBranchReached@0x55de2d7bd280[Test#0], %0.9   !
BB49   <- [47]
  val?^ | miss    %49.0 = LdVar              eR    defined, e0.3
  val?            %49.1 = Force!<wrapped>    !v    %49.0, e0.3   <str$>
  val?            %49.2 = CallBuiltin        !v    seq_along(%49.1) e0.3   <int->
  val?+           %49.3 = ToForSeq           e     %49.2
  int$-           %49.4 = Length                   %49.3
  int$-           %49.5 = Inc                      0L
  lgl$-           %49.6 = Lt                 d     %49.4, %49.5, elided   <false>
  lgl$#-          %49.7 = Identical                %49.6, true
  void                    Branch                   %49.7 -> BB52 (if true) | BB51 (if false)
BB50   <- [47]
  fs              %50.0 = FrameState         R     0x55de3162edb0+156: [], env=e0.3
  void                    Deopt              !v    %50.0, DeadBranchReached@0x55de2d7bd280[Test#1], %47.5   !
BB52   <- [49]
  fs              %52.0 = FrameState         R     0x55de3162edb0+247: [%49.2], env=e0.3
  void                    Deopt              !v    %52.0, DeadBranchReached@0x55de2d7bd280[Test#2], %49.7   !
BB51   <- [49]
  val?            %51.0 = Extract2_1D        wed   %49.3, %49.5, elided
  void                    StVar              lW    i, %51.0, e0.3
  (cls|spec|blt)  %51.2 = LdFun              !v    extends, <0x55de2c74f700>, e0.3
  prom-           %51.3 = MkArg                    unboundValue, .inheritedArgsExpression[0x55de353508e0]_p2, e0.3
  prom-           %51.4 = MkArg                    unboundValue, .inheritedArgsExpression[0x55de353508e0]_p8, e0.3
  val?            %51.5 = NamedCall          !v    %51.2(%51.3, %51.4, fullInfo=true) e0.3   <(lgl|other)>
  void                    StVar              lW    ei, %51.5, e0.3
  val?^ | miss    %51.7 = LdVar              eR    is, e0.3
  lgl$#-          %51.8 = Identical                %51.7, function(object, class2) <(rir::DispatchTable*|...
  void                    Branch                   %51.8 -> BB53 (if true) | BB54 (if false)
BB53   <- [51]
  prom-           %53.0 = MkArg                    unboundValue, .inheritedArgsExpression[0x55de353508e0]_p13 (!refl), e0.3
  val?            %53.1 = Call               !v    function(object, class2) <(rir::DispatchTable*|...(%53.0, "SClassExtension") e0.3   <lgl$->
  lgl$#-          %53.2 = IsType                   %53.1 isA lgl$-
  void                    Branch                   %53.2 -> BB55 (if true) | BB56 (if false)
BB54   <- [51]
  fs              %54.0 = FrameState         R     0x55de3162edb0+360: [%49.3, %49.4, %49.5], env=e0.3
  void                    Deopt              !v    %54.0, CallTarget@0x55de2d7bd280[Call#9], %51.7   !
BB55   <- [53]
  lgl$-           %55.0 = CastType           d     dn %53.1
  lgl$-           %55.1 = AsLogical                %55.0
  lgl$#-          %55.2 = Identical                %55.1, false
  void                    Branch                   %55.2 -> BB45 (if true) | BB11 (if false)
BB56   <- [53]
  fs              %56.0 = FrameState         R     0x55de3162edb0+397: [%49.3, %49.4, %49.5, %53.1], env=e0.3
  void                    Deopt              !v    %56.0, Typecheck@0x55de2d7bd280[Type#27], %53.1   !
BB45   <- [55]
  void                    Nop                !     
  lgl$-           %45.1 = %55.1
  goto BB14
BB11   <- [55]
  (cls|spec|blt)  %11.0 = LdFun              !v    @, <0x55de2854ebd8>, e0.3
  prom-           %11.1 = MkArg                    unboundValue, .inheritedArgsExpression[0x55de353508e0]_p14, e0.3
  prom-           %11.2 = MkArg                    unboundValue, .inheritedArgsExpression[0x55de353508e0]_p15, e0.3
  val?            %11.3 = Call               !v    %11.0(%11.1, %11.2) e0.3   <lgl$->
  lgl$#-          %11.4 = IsType                   %11.3 isA lgl$-
  void                    Branch                   %11.4 -> BB57 (if true) | BB58 (if false)
BB14   <- [45, 57]
  lgl$-           %14.0 = Phi                      %57.4:BB57, %45.1:BB45
  lgl$-           %14.1 = %14.0
  lgl$#-          %14.2 = CheckTrueFalse     e     %14.1
  void                    Branch                   %14.2 -> BB44 (if true) | BB15 (if false)
BB57   <- [11]
  lgl$-           %57.0 = CastType           d     dn %11.3
  lgl$-           %57.1 = Not                d     %57.0, elided
  lgl$-           %57.2 = AsLogical                %57.1
  lgl$-           %57.3 = LAnd                     %55.1, %57.2
  lgl$-           %57.4 = %57.3
  goto BB14
BB58   <- [11]
  fs              %58.0 = FrameState         R     0x55de3162edb0+446: [%49.3, %49.4, %49.5, %55.1, %11.3], env=e0.3
  void                    Deopt              !v    %58.0, Typecheck@0x55de2d7bd280[Type#30], %11.3   !
BB44   <- [14]
  (cls|spec|blt)  %44.0 = LdFun              !v    substitute, e0.3
  fs              %44.1 = FrameState         R     0x55de3162edb0+470: [%49.3, %49.4, %49.5, %44.0], env=e0.3
  void                    Deopt              !v    %44.1, DeadCall@0x55de2d7bd280[Call#11], %44.0   !
BB15   <- [14]
  void                    Nop                !     
  int$-           %15.1 = %49.5
  goto BB16
BB16   <- [15, 28]
  int$-           %16.0 = Phi                      %15.1:BB15, %28.1:BB28
  int$-           %16.1 = %16.0
  int$-           %16.2 = Inc                      %16.1
  lgl$-           %16.3 = Lt                 d     %49.4, %16.2, elided
  lgl$#-          %16.4 = Identical                %16.3, true
  void                    Branch                   %16.4 -> BB30 (if true) | BB19 (if false)
BB30   <- [16]
  val?^ | miss    %30.0 = LdVar              eR    length, e0.3
  lgl$#-          %30.1 = Identical                <blt length>, %30.0   <true>
  void                    Branch                   %30.1 -> BB59 (if true) | BB60 (if false)
BB19   <- [16]
  val?            %19.0 = Extract2_1D        wed   %49.3, %16.2, elided
  void                    StVar              lW    i, %19.0, e0.3
  (cls|spec|blt)  %19.2 = LdFun              !v    extends, <0x55de2c74f700>, e0.3
  prom-           %19.3 = MkArg                    unboundValue, .inheritedArgsExpression[0x55de353508e0]_p16, e0.3
  prom-           %19.4 = MkArg                    unboundValue, .inheritedArgsExpression[0x55de353508e0]_p22, e0.3
  val?            %19.5 = NamedCall          !v    %19.2(%19.3, %19.4, fullInfo=true) e0.3   <lgl$->
  lgl$#-          %19.6 = IsType                   %19.5 isA lgl$-
  void                    Branch                   %19.6 -> BB61 (if true) | BB62 (if false)
BB59   <- [30]
  val?^ | miss    %59.0 = LdVar              eR    expr, e0.3
  lgl$#-          %59.1 = IsType                   %59.0 isA val?~- | miss
  void                    Branch                   %59.1 -> BB63 (if true) | BB64 (if false)
BB60   <- [30]
  void                    Nop                !     
  lgl$#-          %60.1 = %30.1
  dr              %60.2 = DeadBranchReached@0x55de2d7bd280[Test#15]
  goto BB17
BB61   <- [19]
  lgl$-           %61.0 = CastType           d     dn %19.5
  void                    StVar              lW    ei, %61.0, e0.3
  val?^ | miss    %61.2 = LdVar              eR    is, e0.3
  lgl$#-          %61.3 = Identical                %61.2, function(object, class2) <(rir::DispatchTable*|...
  void                    Branch                   %61.3 -> BB65 (if true) | BB66 (if false)
BB62   <- [19]
  fs              %62.0 = FrameState         R     0x55de3162edb0+723: [%49.3, %49.4, %16.2, %19.5], env=e0.3
  void                    Deopt              !v    %62.0, Typecheck@0x55de2d7bd280[Type#68], %19.5   !
BB63   <- [59]
  val?~- | miss   %63.0 = CastType           d     dn %59.0
  val?-           %63.1 = Force!<value>            %63.0,    <code->
  (int|real)$-    %63.2 = CallSafeBuiltin    wed   length(%63.1)    <int$->
  lgl$#-          %63.3 = IsType                   %63.2 isA int$-
  void                    Branch                   %63.3 -> BB69 (if true) | BB70 (if false)
BB64   <- [59]
  void                    Nop                !     
  val?^ | miss    %64.1 = %59.0
  dr              %64.2 = Typecheck@0x55de2d7bd280[Type#95]
  goto BB17
BB17   <- [60, 64]
  val?^ | miss    %17.0 = Phi                      %60.1:BB60, %64.1:BB64
  val?^ | miss    %17.1 = %17.0
  dr              %17.2 = Phi                      %60.2:BB60, %64.2:BB64
  dr              %17.3 = %17.2
  fs              %17.4 = FrameState         R     0x55de3162edb0+640: [%49.3, %49.4, %16.1], env=e0.3
  void                    Deopt              !v    %17.4, %17.3, %17.1   !
BB65   <- [61]
  prom-           %65.0 = MkArg                    unboundValue, .inheritedArgsExpression[0x55de353508e0]_p27 (!refl), e0.3
  val?            %65.1 = Call               !v    function(object, class2) <(rir::DispatchTable*|...(%65.0, "SClassExtension") e0.3   <lgl$->
  lgl$#-          %65.2 = IsType                   %65.1 isA lgl$-
  void                    Branch                   %65.2 -> BB67 (if true) | BB68 (if false)
BB66   <- [61]
  fs              %66.0 = FrameState         R     0x55de3162edb0+737: [%49.3, %49.4, %16.2], env=e0.3
  void                    Deopt              !v    %66.0, CallTarget@0x55de2d7bd280[Call#22], %61.2   !
BB69   <- [63]
  int$-           %69.0 = CastType           d     dn %63.2
  lgl$-           %69.1 = Gt                 d     %69.0, 1L, elided   <lgl$->
  lgl$#-          %69.2 = CheckTrueFalse     e     %69.1
  void                    Branch                   %69.2 -> BB35 (if true) | BB33 (if false)
BB70   <- [63]
  fs              %70.0 = FrameState         R     0x55de3162edb0+1118: [%63.2], env=e0.3
  void                    Deopt              !v    %70.0, Typecheck@0x55de2d7bd280[Type#96], %63.2   !
BB67   <- [65]
  lgl$-           %67.0 = CastType           d     dn %65.1
  lgl$-           %67.1 = AsLogical                %67.0
  lgl$#-          %67.2 = Identical                %67.1, false
  void                    Branch                   %67.2 -> BB27 (if true) | BB26 (if false)
BB68   <- [65]
  fs              %68.0 = FrameState         R     0x55de3162edb0+774: [%49.3, %49.4, %16.2, %65.1], env=e0.3
  void                    Deopt              !v    %68.0, Typecheck@0x55de2d7bd280[Type#70], %65.1   !
BB35   <- [69]
  val?^ | miss    %35.0 = LdVar              eR    list, e0.3
  lgl$#-          %35.1 = Identical                <blt list>, %35.0   <@?>
  void                    Branch                   %35.1 -> BB37 (if true) | BB36 (if false)
BB33   <- [69]
  void                    Visible            v     
  nil-            %33.1 = nil
  goto BB34
BB27   <- [67]
  lgl$#-          %27.0 = CheckTrueFalse     e     %67.1
  void                    Branch                   %27.0 -> BB29 (if true) | BB28 (if false)
BB26   <- [67]
  (cls|spec|blt)  %26.0 = LdFun              !v    @, e0.3
  fs              %26.1 = FrameState         R     0x55de3162edb0+791: [%49.3, %49.4, %16.2, %67.1, %26.0], env=e0.3
  void                    Deopt              !v    %26.1, DeadCall@0x55de2d7bd280[Call#23], %26.0   !
BB37   <- [35]
  val?^ | miss    %37.0 = LdVar              eR    body, e0.3
  val?            %37.1 = Force!             !v    %37.0, e0.3   <val?_>
  val+            %37.2 = CallSafeBuiltin    wed   list(%37.1)    <val?_>
  val?^ | miss    %37.3 = LdVar              eR    expr !upd, e0.3
  val?            %37.4 = Force!             !v    %37.3, e0.3   <val?_>
  val?^ | miss    %37.5 = LdVar              eR    length, e0.3
  lgl$#-          %37.6 = Identical                <blt length>, %37.5   <@?>
  void                    Branch                   %37.6 -> BB39 (if true) | BB38 (if false)
BB36   <- [35]
  (cls|spec|blt)  %36.0 = LdFun              !v    list, e0.3
  fs              %36.1 = FrameState         R     0x55de3162edb0+1180: [%36.0], env=e0.3
  void                    Deopt              !v    %36.1, DeadCall@0x55de2d7bd280[Call#31], %36.0   !
BB34   <- [33, 73]
  val?+           %34.0 = Phi                      %33.1:BB33, %73.5:BB73
  val?+           %34.1 = %34.0
  void                    Return             l     %34.1
BB29   <- [27]
  (cls|spec|blt)  %29.0 = LdFun              !v    substitute, e0.3
  fs              %29.1 = FrameState         R     0x55de3162edb0+847: [%49.3, %49.4, %16.2, %29.0], env=e0.3
  void                    Deopt              !v    %29.1, DeadCall@0x55de2d7bd280[Call#24], %29.0   !
BB28   <- [27]
  void                    Nop                !     
  int$-           %28.1 = %16.2
  goto BB16
BB39   <- [37]
  val?^ | miss    %39.0 = LdVar              eR    expr, e0.3
  val?            %39.1 = Force!             !v    %39.0, e0.3   <val?_>
  lgl$#-          %39.2 = IsType                   %39.1 isA val?+
  void                    Branch                   %39.2 -> BB71 (if true) | BB72 (if false)
BB38   <- [37]
  (cls|spec|blt)  %38.0 = LdFun              !v    length, e0.3
  fs              %38.1 = FrameState         R     0x55de3162edb0+1291: [%37.2, %37.4, %38.0], env=e0.3
  void                    Deopt              !v    %38.1, DeadCall@0x55de2d7bd280[Call#32], %38.0   !
BB71   <- [39]
  val?+           %71.0 = CastType           d     dn %39.1   <val?_>
  (int|real)$-    %71.1 = CallSafeBuiltin    wed   length(%71.0)    <val?_>
  (int|real)$-    %71.2 = Add                d     %71.1, 1L, elided   <val?_>
  lgl$#-          %71.3 = IsType                   %37.4 isA val?+
  void                    Branch                   %71.3 -> BB73 (if true) | BB74 (if false)
BB72   <- [39]
  fs              %72.0 = FrameState         R     0x55de3162edb0+1332: [%37.2, %37.4, <blt length>, %39.1], env=e0.3
  void                    Deopt              !v    %72.0, Typecheck@0x55de2d7bd280[Type#103], %39.1   !
BB73   <- [71]
  val?+           %73.0 = CastType           d     dn %37.4   <val?_>
  val?+           %73.1 = Subassign1_1D      wed   %37.2, %73.0, %71.2, elided   <val?_>
  void                    StVar              lW    expr, %73.1, e0.3
  val+            %73.3 = ChkMissing         e     %73.1
  void                    Visible            v     
  val?+           %73.5 = %73.1
  goto BB34
BB74   <- [71]
  fs              %74.0 = FrameState         R     0x55de3162edb0+1354: [%37.2, %37.4, %71.1], env=e0.3
  void                    Deopt              !v    %74.0, Typecheck@0x55de2d7bd280[Type#101], %37.4   !
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     list, e0.0
  val?            %0.2  = NamedCall          !     %0.1(DUMMY="") e0.0   <val?_>
  void                    Return             l     %0.2
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     setPackageSlot, <0x55de2e266af8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .inheritedArgsExpression[0x55de353508e0]_p3, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .inheritedArgsExpression[0x55de353508e0]_p5, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <str$+>
  void                    Return             l     %0.4
Prom 3:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    target, e0.0
  val?            %0.2  = Force<wrapped>     !v    %0.1, e0.0   <str>
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <false>
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    i, e0.0
  val?            %2.1  = Force              !v    %2.0, e0.0   <val?_>
  val?            %2.2  = %2.1
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, .inheritedArgsExpression[0x55de353508e0]_p4, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.2:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract2_1D        !v    %0.2, %3.1, e0.0   <str$->
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 4:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    i, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <int$->
  void                    Return             l     %0.3
Prom 5:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !v    packageSlot, <0x55de28b54068>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .inheritedArgsExpression[0x55de353508e0]_p6, e0.0
  val?            %0.3  = Call               !v    %0.1(%0.2) e0.0   <str->
  lgl$#-          %0.4  = IsType                   %0.3 isA val+   <true>
  void                    Branch                   %0.4 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    i, e0.0
  val?            %2.1  = Force<value>       !v    %2.0, e0.0   <int$->
  val?            %2.2  = %2.1
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, .inheritedArgsExpression[0x55de353508e0]_p7, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.2:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract2_1D        !v    %0.3, %3.1, e0.0   <str$->
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 6:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    target, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str>
  void                    Return             l     %0.3
Prom 7:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    i, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 8:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     setPackageSlot, <0x55de2e266af8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .inheritedArgsExpression[0x55de353508e0]_p9, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .inheritedArgsExpression[0x55de353508e0]_p11, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <str$+>
  void                    Return             l     %0.4
Prom 9:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    defined, e0.0
  val?            %0.2  = Force<wrapped>     !v    %0.1, e0.0   <str>
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <false>
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    i, e0.0
  val?            %2.1  = Force              !v    %2.0, e0.0   <val?_>
  val?            %2.2  = %2.1
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, .inheritedArgsExpression[0x55de353508e0]_p10, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.2:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract2_1D        !v    %0.2, %3.1, e0.0   <str$->
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 10:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    i, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <int$->
  void                    Return             l     %0.3
Prom 11:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     packageSlot, <0x55de28b54068>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .inheritedArgsExpression[0x55de353508e0]_p12, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <str->
  void                    Return             l     %0.3
Prom 12:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    defined, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str>
  void                    Return             l     %0.3
Prom 13:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    ei, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <(lgl|other)>
  void                    Return             l     %0.3
Prom 14:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    ei, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 15:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    simple, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 16:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     setPackageSlot, <0x55de2e266af8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .inheritedArgsExpression[0x55de353508e0]_p17, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .inheritedArgsExpression[0x55de353508e0]_p19, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <str$+>
  void                    Return             l     %0.4
Prom 17:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    target, e0.0
  val?            %0.2  = Force<wrapped>     !v    %0.1, e0.0   <str>
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <false>
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    i, e0.0
  val?            %2.1  = Force              !v    %2.0, e0.0   <val?_>
  val?            %2.2  = %2.1
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, .inheritedArgsExpression[0x55de353508e0]_p18, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.2:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract2_1D        !v    %0.2, %3.1, e0.0   <str$->
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 18:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    i, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <int$->
  void                    Return             l     %0.3
Prom 19:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !v    packageSlot, <0x55de28b54068>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .inheritedArgsExpression[0x55de353508e0]_p20, e0.0
  val?            %0.3  = Call               !v    %0.1(%0.2) e0.0   <str->
  lgl$#-          %0.4  = IsType                   %0.3 isA val+   <true>
  void                    Branch                   %0.4 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    i, e0.0
  val?            %2.1  = Force<value>       !v    %2.0, e0.0   <int$->
  val?            %2.2  = %2.1
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, .inheritedArgsExpression[0x55de353508e0]_p21, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.2:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract2_1D        !v    %0.3, %3.1, e0.0   <str$->
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 20:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    target, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str>
  void                    Return             l     %0.3
Prom 21:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    i, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 22:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     setPackageSlot, <0x55de2e266af8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .inheritedArgsExpression[0x55de353508e0]_p23, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .inheritedArgsExpression[0x55de353508e0]_p25, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <str$+>
  void                    Return             l     %0.4
Prom 23:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    defined, e0.0
  val?            %0.2  = Force<wrapped>     !v    %0.1, e0.0   <str>
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <false>
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    i, e0.0
  val?            %2.1  = Force              !v    %2.0, e0.0   <val?_>
  val?            %2.2  = %2.1
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, .inheritedArgsExpression[0x55de353508e0]_p24, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.2:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract2_1D        !v    %0.2, %3.1, e0.0   <str$->
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 24:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    i, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <int$->
  void                    Return             l     %0.3
Prom 25:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     packageSlot, <0x55de28b54068>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .inheritedArgsExpression[0x55de353508e0]_p26, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <str->
  void                    Return             l     %0.3
Prom 26:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    defined, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str>
  void                    Return             l     %0.3
Prom 27:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    ei, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <lgl$->
  void                    Return             l     %0.3

│ .inheritedArgsExpression[0x55de353508e0]                                     │
└──────────────────────────────────────────────────────────────────────────────┘
