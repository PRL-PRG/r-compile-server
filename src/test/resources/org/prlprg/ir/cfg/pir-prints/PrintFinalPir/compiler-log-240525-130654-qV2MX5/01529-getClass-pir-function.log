
┌──────────────────────────────────────────────────────────────────────────────┐
│ getClass[0x55de2da7ad00]                                                     │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;Eager1,NonRefl1,!Obj1                │
│ Properties:                                                                  │
├────── Final PIR Version
getClass[0x55de2da7ad00]
BB0
  val?^           %0.0  = LdArg                    2
  val?~+          %0.1  = LdArg                    1
  val?^           %0.2  = LdArg                    0
  val?^ | miss    %0.3  = LdVar              eR    getClassDef, <env 0x55de28b56378>
  lgl$#-          %0.4  = Identical                %0.3, function(Class, where=topenv(parent.frame()), |...
  void                    Branch                   %0.4 -> BB11 (if true) | BB12 (if false)
BB11   <- [0]
  env             e11.0 = MkEnv              l     Class=%0.2, .Force=%0.1, where=%0.0, parent=<env 0x55de28b56378>, context 1
  prom-           %11.1 = MkArg                    unboundValue, getClass[0x55de2da7ad00]_p0, e11.0
  prom-           %11.2 = MkArg                    unboundValue, getClass[0x55de2da7ad00]_p1, e11.0
  val?            %11.3 = StaticCall         !v    getClassDef[0x55de2ea1cd30](%11.1, %11.2) e11.0   <other>
  lgl$-           %11.4 = Is                       %11.3, NULL
  void                    StVar              lW    value, %11.3, e11.0
  val             %11.6 = ChkMissing         e     %11.3
  lgl$#-          %11.7 = CheckTrueFalse     e     %11.4
  void                    Branch                   %11.7 -> BB5 (if true) | BB3 (if false)
BB12   <- [0]
  env             e12.0 = (MkEnv)            l     Class=%0.2, .Force=%0.1, where=%0.0, parent=<env 0x55de28b56378>, context 1
  fs              %12.1 = FrameState         R     0x55de2c789f00+0: [], env=e12.0
  void                    Deopt              !v    %12.1, CallTarget@0x55de2b67a820[Call#3], %0.3
BB5   <- [11]
  val?^ | miss    %5.0  = LdVar              eR    .Force, e11.0
  val?            %5.1  = Force!             !v    %5.0, e11.0   <val?_>
  lgl$#-          %5.2  = IsType                   %5.1 isA val?+
  void                    Branch                   %5.2 -> BB13 (if true) | BB14 (if false)
BB3   <- [11]
  void                    Nop                !     
  val?            %3.1  = %11.3
  goto BB4
BB13   <- [5]
  val?+           %13.0 = CastType           d     dn %5.1   <val?_>
  lgl             %13.1 = Not                wed   %13.0, elided
  lgl$#-          %13.2 = CheckTrueFalse     we    %13.1
  void                    Branch                   %13.2 -> BB9 (if true) | BB8 (if false)
BB14   <- [5]
  fs              %14.0 = FrameState         R     0x55de2c789f00+90: [%5.1], env=e11.0
  void                    Deopt              !v    %14.0, Typecheck@0x55de2b67a820[Type#8], %5.1   !
BB4   <- [3, 8]
  val?            %4.0  = Phi                      %8.5:BB8, %3.1:BB3
  val?            %4.1  = %4.0
  val             %4.2  = ChkMissing         e     %4.1   <other>
  void                    Visible            v     
  void                    Return             l     %4.2
BB9   <- [13]
  (cls|spec|blt)  %9.0  = LdFun              !v    stop, e11.0
  fs              %9.1  = FrameState         R     0x55de2c789f00+189: [%9.0], env=e11.0
  void                    Deopt              !v    %9.1, DeadCall@0x55de2b67a820[Call#5], %9.0   !
BB8   <- [13]
  (cls|spec|blt)  %8.0  = LdFun              !v    makeClassRepresentation, <0x55de34c28c30>, e11.0
  prom-           %8.1  = MkArg                    unboundValue, getClass[0x55de2da7ad00]_p2, e11.0
  prom-           %8.2  = MkArg                    unboundValue, getClass[0x55de2da7ad00]_p3, e11.0
  val?            %8.3  = NamedCall          !v    %8.0(%8.1, package="base", virtual=true, where=%8.2) e11.0   <other>
  void                    StVar              lW    value, %8.3, e11.0
  val?            %8.5  = %8.3
  goto BB4
Prom 0:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    Class, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str$+>
  void                    Return             l     %0.3
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    Class, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 3:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3

│ getClass[0x55de2da7ad00]                                                     │
└──────────────────────────────────────────────────────────────────────────────┘
