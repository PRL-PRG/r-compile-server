
┌──────────────────────────────────────────────────────────────────────────────┐
│ .findInheritedMethods[0x55de2de5a9b0]                                        │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch miss: 7                              │
│ Properties:                                                                  │
├────── Final PIR Version
.findInheritedMethods[0x55de2de5a9b0]
BB0
  val?^           %0.0  = LdArg                    2
  val?^           %0.1  = LdArg                    1
  val?^           %0.2  = LdArg                    0
  env             e0.3  = MkEnv              l     classes=%0.2, fdef=%0.1, mtable=%0.0, table(miss)=missingArg, excluded(miss)=missingArg, useInherited(miss)=missingArg, simpleOnly(miss)=missingArg, verbose(miss)=missingArg, doCache(miss)=missingArg, where(miss)=missingArg, parent=<env 0x55de28b56378>, context 1
  prom-           %0.4  = MkArg                    unboundValue, .findInheritedMethods[0x55de2de5a9b0]_p0, e0.3
  val?^ | miss    %0.5  = CastType                 up %0.4
  void                    StArg              lW    table, %0.5, e0.3
  void                    StArg              lW    excluded, nil, e0.3
  prom-           %0.8  = MkArg                    unboundValue, .findInheritedMethods[0x55de2de5a9b0]_p4, e0.3
  val?^ | miss    %0.9  = CastType                 up %0.8
  void                    StArg              lW    simpleOnly, %0.9, e0.3
  void                    StArg              lW    verbose, false, e0.3
  prom-           %0.12 = MkArg                    unboundValue, .findInheritedMethods[0x55de2de5a9b0]_p7, e0.3
  val?^ | miss    %0.13 = CastType                 up %0.12
  void                    StArg              lW    doCache, %0.13, e0.3
  prom-           %0.15 = MkArg                    unboundValue, .findInheritedMethods[0x55de2de5a9b0]_p9, e0.3
  val?^ | miss    %0.16 = CastType                 up %0.15
  void                    StArg              lW    where, %0.16, e0.3
  cls             %0.18 = MkCls                    .findInheritedMethods>plist@677, e0.3
  val?^ | miss    %0.19 = LdVar              eR    .allowPrimitiveMethods, <env 0x55de28b56378>
  lgl$#-          %0.20 = Identical                %0.19, function(onOff) <(rir::DispatchTable*)0x55de2c|...
  void                    Branch                   %0.20 -> BB263 (if true) | BB264 (if false)
BB263   <- [0]
  ct              %263.0 = PushContext        lCL   false, .allowPrimitiveMethods(FALSE), function(onOff) <(rir::DispatchTable*)0x55de2c|..., e0.3
  val?^ | miss    %263.1 = LdVar              eR    .Call, <env 0x55de28b56378>
  lgl$#-          %263.2 = Identical                <blt .Call>, %263.1   <true>
  void                    Branch                   %263.2 -> BB265 (if true) | BB266 (if false)
BB264   <- [0]
  fs              %264.0 = FrameState         R     0x55de2dc4ca10+0: [], env=e0.3
  void                    Deopt              !v    %264.0, CallTarget@0x55de2d7bb0f0[Call#5], %0.19
BB265   <- [263]
  val?^ | miss    %265.0 = LdVar              eR    C_R_M_setPrimitiveMethods, <env 0x55de28b56378>
  env             e265.1 = MkEnv              l     onOff=false, code="CLEAR", parent=<env 0x55de28b56378>, context 1
  val?            %265.2 = Force!<value>      !v    %265.0, e265.1   <vec>
  val?^ | miss    %265.3 = LdVar              eR    code, e265.1
  val?            %265.4 = Force!<value>      !v    %265.3, e265.1   <str$->
  val?            %265.5 = CallBuiltin        !v    .Call(%265.2, "", nil, %265.4, nil, nil) e265.1   <lgl$->
  lgl$#-          %265.6 = IsType                   %265.5 isA lgl$-
  void                    Branch                   %265.6 -> BB267 (if true) | BB268 (if false)
BB266   <- [263]
  fs              %266.0 = FrameState         R     0x55de2dc4ca10+32: [], env=e0.3
  env             e266.1 = (MkEnv)            l     onOff=false, parent=<env 0x55de28b56378>, context 1
  fs              %266.2 = FrameState         R     0x55de2ba62e00+15: [false], env=e266.1, next=%266.0
  void                    Deopt              !v    %266.2, DeadBranchReached@0x55de2c1bd198[Test#0], %263.2   !
BB267   <- [265]
  lgl$-           %267.0 = CastType           d     dn %265.5
  val?            %267.1 = PopContext         C     %267.0, %263.0   <lgl$->
  lgl$#-          %267.2 = IsType                   %267.1 isA lgl$-
  void                    Branch                   %267.2 -> BB269 (if true) | BB270 (if false)
BB268   <- [265]
  fs              %268.0 = FrameState         R     0x55de2dc4ca10+32: [], env=e0.3
  fs              %268.1 = FrameState         R     0x55de2ba62e00+200: [%265.5], env=e265.1, next=%268.0
  void                    Deopt              !v    %268.1, Typecheck@0x55de2c1bd198[Type#5], %265.5   !
BB269   <- [267]
  lgl$-           %269.0 = CastType           d     dn %267.1
  void                    StVar              lW    primMethods, %269.0, e0.3
  (cls|spec|blt)  %269.2 = LdFun              !v    on.exit, <0x55de2854e270>, e0.3
  prom-           %269.3 = MkArg                    unboundValue, .findInheritedMethods[0x55de2de5a9b0]_p11, e0.3
  val?            %269.4 = Call               !v    %269.2(%269.3) e0.3
  val?^ | miss    %269.5 = LdVar              eR    is.environment, e0.3
  lgl$#-          %269.6 = Identical                <blt is.environment>, %269.5   <true>
  void                    Branch                   %269.6 -> BB271 (if true) | BB272 (if false)
BB270   <- [267]
  fs              %270.0 = FrameState         R     0x55de2dc4ca10+32: [%267.1], env=e0.3
  void                    Deopt              !v    %270.0, Typecheck@0x55de2d7bb0f0[Type#9], %267.1   !
BB271   <- [269]
  val?^ | miss    %271.0 = LdVar              eR    table, e0.3
  val?            %271.1 = Force!<lazy>       !v    %271.0, e0.3   <env->
  lgl$#-          %271.2 = CallSafeBuiltin    wed   is.environment(%271.1)    <lgl$->
  void                    Branch                   %271.2 -> BB14 (if true) | BB13 (if false)
BB272   <- [269]
  fs              %272.0 = FrameState         R     0x55de2dc4ca10+78: [%269.4], env=e0.3
  void                    Deopt              !v    %272.0, DeadBranchReached@0x55de2d7bb0f0[Test#0], %269.6   !
BB14   <- [271]
  val?^ | miss    %14.0 = LdVar              eR    length, e0.3
  lgl$#-          %14.1 = Identical                <blt length>, %14.0   <true>
  void                    Branch                   %14.1 -> BB273 (if true) | BB274 (if false)
BB13   <- [271]
  (cls|spec|blt)  %13.0 = LdFun              !v    is, e0.3
  fs              %13.1 = FrameState         R     0x55de2dc4ca10+192: [%13.0], env=e0.3
  void                    Deopt              !v    %13.1, DeadCall@0x55de2d7bb0f0[Call#9], %13.0   !
BB273   <- [14]
  (cls|spec|blt)  %273.0 = LdFun              !v    @, <0x55de2854ebd8>, e0.3
  prom-           %273.1 = MkArg                    unboundValue, .findInheritedMethods[0x55de2de5a9b0]_p13, e0.3
  prom-           %273.2 = MkArg                    unboundValue, .findInheritedMethods[0x55de2de5a9b0]_p14, e0.3
  val?            %273.3 = Call               !v    %273.0(%273.1, %273.2) e0.3   <vec->
  lgl$#-          %273.4 = IsType                   %273.3 isA val?-
  void                    Branch                   %273.4 -> BB275 (if true) | BB276 (if false)
BB274   <- [14]
  fs              %274.0 = FrameState         R     0x55de2dc4ca10+170: [%271.2], env=e0.3
  void                    Deopt              !v    %274.0, DeadBranchReached@0x55de2d7bb0f0[Test#1], %14.1   !
BB275   <- [273]
  val?-           %275.0 = CastType           d     dn %273.3   <vec->
  (int|real)$-    %275.1 = CallSafeBuiltin    wed   length(%275.0)    <int$->
  lgl$#-          %275.2 = IsType                   %275.1 isA int$-
  void                    Branch                   %275.2 -> BB277 (if true) | BB278 (if false)
BB276   <- [273]
  fs              %276.0 = FrameState         R     0x55de2dc4ca10+416: [<blt length>, %273.3], env=e0.3
  void                    Deopt              !v    %276.0, Typecheck@0x55de2d7bb0f0[Type#27], %273.3   !
BB277   <- [275]
  int$-           %277.0 = CastType           d     dn %275.1
  lgl$-           %277.1 = Gt                 d     %277.0, 0L, elided   <lgl$->
  void                    StVar              lW    hasGroup, %277.1, e0.3
  lgl$#-          %277.3 = CheckTrueFalse     e     %277.1
  void                    Branch                   %277.3 -> BB261 (if true) | BB21 (if false)
BB278   <- [275]
  fs              %278.0 = FrameState         R     0x55de2dc4ca10+438: [%275.1], env=e0.3
  void                    Deopt              !v    %278.0, Typecheck@0x55de2d7bb0f0[Type#28], %275.1   !
BB261   <- [277]
  (cls|spec|blt)  %261.0 = LdFun              !v    .getAllGroups, e0.3
  fs              %261.1 = FrameState         R     0x55de2dc4ca10+494: [%261.0], env=e0.3
  void                    Deopt              !v    %261.1, DeadCall@0x55de2d7bb0f0[Call#18], %261.0   !
BB21   <- [277]
  val?^ | miss    %21.0 = LdVar              eR    length, e0.3
  lgl$#-          %21.1 = Identical                <blt length>, %21.0   <true>
  void                    Branch                   %21.1 -> BB279 (if true) | BB280 (if false)
BB279   <- [21]
  val?^ | miss    %279.0 = LdVar              eR    excluded, e0.3
  val?            %279.1 = Force!<lazy>       !v    %279.0, e0.3   <(nil|str)->
  lgl$#-          %279.2 = IsType                   %279.1 isA val?-
  void                    Branch                   %279.2 -> BB281 (if true) | BB282 (if false)
BB280   <- [21]
  fs              %280.0 = FrameState         R     0x55de2dc4ca10+464: [], env=e0.3
  void                    Deopt              !v    %280.0, DeadBranchReached@0x55de2d7bb0f0[Test#2], %21.1   !
BB281   <- [279]
  val?-           %281.0 = CastType           d     dn %279.1   <(nil|str)->
  (int|real)$-    %281.1 = CallSafeBuiltin    wed   length(%281.0)    <int$->
  lgl$#-          %281.2 = IsType                   %281.1 isA int$-
  void                    Branch                   %281.2 -> BB283 (if true) | BB284 (if false)
BB282   <- [279]
  fs              %282.0 = FrameState         R     0x55de2dc4ca10+604: [<blt length>, %279.1], env=e0.3
  void                    Deopt              !v    %282.0, Typecheck@0x55de2d7bb0f0[Type#35], %279.1   !
BB283   <- [281]
  int$-           %283.0 = CastType           d     dn %281.1
  lgl$-           %283.1 = Gt                 d     %283.0, 0L, elided   <lgl$->
  void                    StVar              lW    doExcluded, %283.1, e0.3
  val?^ | miss    %283.3 = LdVar              eR    verbose, e0.3
  val?            %283.4 = Force!<lazy>       !v    %283.3, e0.3   <lgl$->
  lgl$#-          %283.5 = CheckTrueFalse     we    %283.4
  void                    Branch                   %283.5 -> BB260 (if true) | BB28 (if false)
BB284   <- [281]
  fs              %284.0 = FrameState         R     0x55de2dc4ca10+626: [%281.1], env=e0.3
  void                    Deopt              !v    %284.0, Typecheck@0x55de2d7bb0f0[Type#36], %281.1   !
BB260   <- [283]
  void                    StVar              lW    plist, %0.18, e0.3
  (cls|spec|blt)  %260.1 = LdFun              !v    cat, e0.3
  fs              %260.2 = FrameState         R     0x55de2dc4ca10+707: [%260.1], env=e0.3
  void                    Deopt              !v    %260.2, DeadCall@0x55de2d7bb0f0[Call#21], %260.1   !
BB28   <- [283]
  val?^ | miss    %28.0 = LdVar              eR    length, e0.3
  lgl$#-          %28.1 = Identical                <blt length>, %28.0   <true>
  void                    Branch                   %28.1 -> BB285 (if true) | BB286 (if false)
BB285   <- [28]
  val?^ | miss    %285.0 = LdVar              eR    classes, e0.3
  val?            %285.1 = Force!<lazy>       !v    %285.0, e0.3   <(str|vec)>
  val?            %285.2 = CallBuiltin        !v    length(%285.1) e0.3   <int$->
  lgl$#-          %285.3 = IsType                   %285.2 isA int$-
  void                    Branch                   %285.3 -> BB287 (if true) | BB288 (if false)
BB286   <- [28]
  fs              %286.0 = FrameState         R     0x55de2dc4ca10+667: [%283.5], env=e0.3
  void                    Deopt              !v    %286.0, DeadBranchReached@0x55de2d7bb0f0[Test#4], %28.1   !
BB287   <- [285]
  int$-           %287.0 = CastType           d     dn %285.2
  void                    StVar              lW    nargs, %287.0, e0.3
  lgl$-           %287.2 = Missing            eR    useInherited, e0.3
  lgl$-           %287.3 = Not                d     %287.2, elided
  lgl$-           %287.4 = AsLogical                %287.3
  lgl$#-          %287.5 = Identical                %287.4, false
  void                    Branch                   %287.5 -> BB259 (if true) | BB31 (if false)
BB288   <- [285]
  fs              %288.0 = FrameState         R     0x55de2dc4ca10+866: [%285.2], env=e0.3
  void                    Deopt              !v    %288.0, Typecheck@0x55de2d7bb0f0[Type#61], %285.2   !
BB259   <- [287]
  void                    Nop                !     
  lgl$-           %259.1 = %287.4
  goto BB38
BB31   <- [287]
  val?^ | miss    %31.0 = LdVar              eR    length, e0.3
  lgl$#-          %31.1 = Identical                <blt length>, %31.0   <@?>
  void                    Branch                   %31.1 -> BB33 (if true) | BB32 (if false)
BB38   <- [259, 291]
  lgl$-           %38.0 = Phi                      %291.4:BB291, %259.1:BB259
  lgl$-           %38.1 = %38.0
  lgl$#-          %38.2 = CheckTrueFalse     e     %38.1
  void                    Branch                   %38.2 -> BB258 (if true) | BB41 (if false)
BB33   <- [31]
  val?^ | miss    %33.0 = LdVar              eR    useInherited, e0.3
  val?            %33.1 = Force!             !v    %33.0, e0.3   <val?_>
  lgl$#-          %33.2 = IsType                   %33.1 isA val?+
  void                    Branch                   %33.2 -> BB289 (if true) | BB290 (if false)
BB32   <- [31]
  (cls|spec|blt)  %32.0 = LdFun              !v    length, e0.3
  fs              %32.1 = FrameState         R     0x55de2dc4ca10+922: [%287.4, %32.0], env=e0.3
  void                    Deopt              !v    %32.1, DeadCall@0x55de2d7bb0f0[Call#31], %32.0   !
BB258   <- [38]
  (cls|spec|blt)  %258.0 = LdFun              !v    rep, e0.3
  fs              %258.1 = FrameState         R     0x55de2dc4ca10+1028: [%258.0], env=e0.3
  void                    Deopt              !v    %258.1, DeadCall@0x55de2d7bb0f0[Call#32], %258.0   !
BB41   <- [38]
  val?^ | miss    %41.0 = LdVar              eR    hasGroup, e0.3
  lgl$#-          %41.1 = IsType                   %41.0 isA lgl$-
  void                    Branch                   %41.1 -> BB293 (if true) | BB294 (if false)
BB289   <- [33]
  val?+           %289.0 = CastType           d     dn %33.1   <val?_>
  (int|real)$-    %289.1 = CallSafeBuiltin    wed   length(%289.0)    <val?_>
  val?^ | miss    %289.2 = LdVar              eR    nargs, e0.3
  val?            %289.3 = Force!             !v    %289.2, e0.3   <val?_>
  lgl$#-          %289.4 = IsType                   %289.3 isA val?+
  void                    Branch                   %289.4 -> BB291 (if true) | BB292 (if false)
BB290   <- [33]
  fs              %290.0 = FrameState         R     0x55de2dc4ca10+963: [%287.4, <blt length>, %33.1], env=e0.3
  void                    Deopt              !v    %290.0, Typecheck@0x55de2d7bb0f0[Type#63], %33.1   !
BB293   <- [41]
  lgl$-           %293.0 = CastType           d     dn %41.0
  lgl$-           %293.1 = AsLogical                %293.0
  lgl$#-          %293.2 = Identical                %293.1, false
  void                    Branch                   %293.2 -> BB257 (if true) | BB42 (if false)
BB294   <- [41]
  fs              %294.0 = FrameState         R     0x55de2dc4ca10+1012: [%38.1], env=e0.3
  void                    Deopt              !v    %294.0, Typecheck@0x55de2d7bb0f0[Type#70], %41.0   !
BB291   <- [289]
  val?+           %291.0 = CastType           d     dn %289.3   <val?_>
  lgl             %291.1 = Lt                 wed   %289.1, %291.0, elided   <val?_>
  lgl$-           %291.2 = AsLogical          e     %291.1
  lgl$-           %291.3 = LAnd                     %287.4, %291.2
  lgl$-           %291.4 = %291.3
  goto BB38
BB292   <- [289]
  fs              %292.0 = FrameState         R     0x55de2dc4ca10+999: [%287.4, %289.1, %289.3], env=e0.3
  void                    Deopt              !v    %292.0, Typecheck@0x55de2d7bb0f0[Type#65], %289.3   !
BB257   <- [293]
  void                    Nop                !     
  lgl$-           %257.1 = %293.1
  goto BB45
BB42   <- [293]
  val?^ | miss    %42.0 = LdVar              eR    doExcluded, e0.3
  val?            %42.1 = Force!             !v    %42.0, e0.3   <val?_>
  lgl$#-          %42.2 = IsType                   %42.1 isA val?+
  void                    Branch                   %42.2 -> BB295 (if true) | BB296 (if false)
BB45   <- [257, 295]
  lgl$-           %45.0 = Phi                      %295.4:BB295, %257.1:BB257
  lgl$-           %45.1 = %45.0
  lgl$#-          %45.2 = CheckTrueFalse     e     %45.1
  void                    Branch                   %45.2 -> BB256 (if true) | BB46 (if false)
BB295   <- [42]
  val?+           %295.0 = CastType           d     dn %42.1   <val?_>
  lgl             %295.1 = Not                wed   %295.0, elided
  lgl$-           %295.2 = AsLogical          e     %295.1
  lgl$-           %295.3 = LAnd                     %293.1, %295.2
  lgl$-           %295.4 = %295.3
  goto BB45
BB296   <- [42]
  fs              %296.0 = FrameState         R     0x55de2dc4ca10+1112: [%293.1, %42.1], env=e0.3
  void                    Deopt              !v    %296.0, Typecheck@0x55de2d7bb0f0[Type#71], %42.1   !
BB256   <- [45]
  (cls|spec|blt)  %256.0 = LdFun              !v    .sigLabel, e0.3
  fs              %256.1 = FrameState         R     0x55de2dc4ca10+1136: [%256.0], env=e0.3
  void                    Deopt              !v    %256.1, DeadCall@0x55de2d7bb0f0[Call#33], %256.0   !
BB46   <- [45]
  val?^ | miss    %46.0 = LdVar              eR    classes, e0.3
  val?            %46.1 = Force!<wrapped>    !v    %46.0, e0.3   <(str|vec)>
  val?            %46.2 = Extract2_1D        !v    %46.1, 1L, e0.3   <str$+>
  void                    StVar              lW    cl1, %46.2, e0.3
  val?^ | miss    %46.4 = LdVar              eR    getClass, e0.3
  lgl$#-          %46.5 = Identical                %46.4, function(Class, .Force=FALSE, where=.classEnv(|...
  void                    Branch                   %46.5 -> BB297 (if true) | BB298 (if false)
BB297   <- [46]
  prom-           %297.0 = MkArg                    unboundValue, .findInheritedMethods[0x55de2de5a9b0]_p15 (!refl), e0.3
  prom-           %297.1 = MkArg                    unboundValue, .findInheritedMethods[0x55de2de5a9b0]_p16, e0.3
  val?            %297.2 = StaticCall         !v    getClass[0x55de35a12d30](%297.0, true, %297.1) { 0 2n 1n } e0.3   <other>
  void                    StVar              lW    def, %297.2, e0.3
  lgl$-           %297.4 = Missing            eR    useInherited, e0.3
  lgl$-           %297.5 = AsLogical                %297.4
  lgl$#-          %297.6 = Identical                %297.5, true
  void                    Branch                   %297.6 -> BB255 (if true) | BB49 (if false)
BB298   <- [46]
  fs              %298.0 = FrameState         R     0x55de2dc4ca10+1502: [], env=e0.3
  void                    Deopt              !v    %298.0, CallTarget@0x55de2d7bb0f0[Call#37], %46.4   !
BB255   <- [297]
  void                    Nop                !     
  lgl$-           %255.1 = %297.5
  goto BB52
BB49   <- [297]
  val?^ | miss    %49.0 = LdVar              eR    useInherited, e0.3
  val?            %49.1 = Force!             !v    %49.0, e0.3   <val?_>
  lgl$#-          %49.2 = IsType                   %49.1 isA val?+
  void                    Branch                   %49.2 -> BB299 (if true) | BB300 (if false)
BB52   <- [255, 299]
  lgl$-           %52.0 = Phi                      %299.4:BB299, %255.1:BB255
  lgl$-           %52.1 = %52.0
  lgl$#-          %52.2 = CheckTrueFalse     e     %52.1
  void                    Branch                   %52.2 -> BB227 (if true) | BB55 (if false)
BB299   <- [49]
  val?+           %299.0 = CastType           d     dn %49.1   <val?_>
  val?            %299.1 = Extract2_1D        wed   %299.0, 1L, elided   <val?_>
  lgl$-           %299.2 = AsLogical          e     %299.1
  lgl$-           %299.3 = LOr                      %297.5, %299.2
  lgl$-           %299.4 = %299.3
  goto BB52
BB300   <- [49]
  fs              %300.0 = FrameState         R     0x55de2dc4ca10+1592: [%297.5, %49.1], env=e0.3
  void                    Deopt              !v    %300.0, Typecheck@0x55de2d7bb0f0[Type#91], %49.1   !
BB227   <- [52]
  val?^ | miss    %227.0 = LdVar              eR    c, e0.3
  lgl$#-          %227.1 = Identical                <blt c>, %227.0   <true>
  void                    Branch                   %227.1 -> BB301 (if true) | BB302 (if false)
BB55   <- [52]
  val?^ | miss    %55.0 = LdVar              eR    cl1, e0.3
  val?            %55.1 = Force!             !v    %55.0, e0.3   <val?_>
  val?            %55.2 = %55.1
  goto BB56
BB301   <- [227]
  val?^ | miss    %301.0 = LdVar              eR    cl1, e0.3
  lgl$#-          %301.1 = IsType                   %301.0 isA val?~+ | miss
  void                    Branch                   %301.1 -> BB305 (if true) | BB306 (if false)
BB302   <- [227]
  void                    Nop                !     
  lgl$#-          %302.1 = %227.1
  dr              %302.2 = DeadBranchReached@0x55de2d7bb0f0[Test#10]
  goto BB53
BB56   <- [55, 353]
  val?            %56.0 = Phi                      %55.2:BB55, %353.2:BB353   <str->
  val?            %56.1 = %56.0
  void                    StVar              lW    labels, %56.1, e0.3
  val?^ | miss    %56.3 = LdVar              eR    list, e0.3
  lgl$#-          %56.4 = Identical                <blt list>, %56.3   <true>
  void                    Branch                   %56.4 -> BB303 (if true) | BB304 (if false)
BB305   <- [301]
  val?~+ | miss   %305.0 = CastType           d     dn %301.0
  val?+           %305.1 = Force!<value>            %305.0,    <str$+>
  val?^ | miss    %305.2 = LdVar              eR    .eligibleSuperClasses, e0.3
  lgl$#-          %305.3 = Identical                %305.2, function(contains, simpleOnly) <(rir::Dispatch|...
  void                    Branch                   %305.3 -> BB307 (if true) | BB308 (if false)
BB306   <- [301]
  void                    Nop                !     
  val?^ | miss    %306.1 = %301.0
  dr              %306.2 = Typecheck@0x55de2d7bb0f0[Type#100]
  goto BB53
BB53   <- [302, 306, 308]
  val?^ | miss    %53.0 = Phi                      %302.1:BB302, %306.1:BB306, %308.1:BB308
  val?^ | miss    %53.1 = %53.0
  dr              %53.2 = Phi                      %302.2:BB302, %306.2:BB306, %308.2:BB308
  dr              %53.3 = %53.2
  fs              %53.4 = FrameState         R     0x55de2dc4ca10+1643: [%52.1], env=e0.3
  void                    Deopt              !v    %53.4, %53.3, %53.1   !
BB303   <- [56]
  val             %303.0 = ChkMissing         e     %56.1
  val+            %303.1 = CallSafeBuiltin    wed   list(%56.1)    <vec$->
  void                    StVar              lW    supersList, %303.1, e0.3
  val?^ | miss    %303.3 = LdVar              eR    vector, e0.3
  lgl$#-          %303.4 = Identical                %303.3, function(mode="logical", length=0L) <(rir::Dis|...
  void                    Branch                   %303.4 -> BB309 (if true) | BB310 (if false)
BB304   <- [56]
  fs              %304.0 = FrameState         R     0x55de2dc4ca10+1831: [], env=e0.3
  void                    Deopt              !v    %304.0, DeadBranchReached@0x55de2d7bb0f0[Test#11], %56.4   !
BB307   <- [305]
  prom-           %307.0 = MkArg                    unboundValue, .findInheritedMethods[0x55de2de5a9b0]_p90, e0.3
  prom-           %307.1 = MkArg                    unboundValue, .findInheritedMethods[0x55de2de5a9b0]_p93, e0.3
  ct              %307.2 = PushContext        lCL   %307.0, %307.1, .eligibleSuperClasses(@(def, contains), simple|..., function(contains, simpleOnly) <(rir::Dispatch|..., e0.3
  val?^           %307.3 = CastType                 up %307.1
  val?^           %307.4 = CastType                 up %307.0
  val?^ | miss    %307.5 = LdVar              eR    names, <env 0x55de28b56378>
  lgl$#-          %307.6 = Identical                <blt names>, %307.5   <true>
  void                    Branch                   %307.6 -> BB315 (if true) | BB316 (if false)
BB308   <- [305]
  void                    Nop                !     
  val?^ | miss    %308.1 = %305.2
  dr              %308.2 = CallTarget@0x55de2d7bb0f0[Call#41]
  goto BB53
BB309   <- [303]
  val?^ | miss    %309.0 = LdVar              eR    nargs, e0.3
  lgl$#-          %309.1 = IsType                   %309.0 isA int$-
  void                    Branch                   %309.1 -> BB311 (if true) | BB312 (if false)
BB310   <- [303]
  void                    Nop                !     
  val?^ | miss    %310.1 = %303.3
  dr              %310.2 = CallTarget@0x55de2d7bb0f0[Call#44]
  goto BB59
BB315   <- [307]
  env             e315.0 = MkEnv              l     contains=%307.4, simpleOnly=%307.3, parent=<env 0x55de28b56378>, context 1
  val?            %315.1 = Force!<lazy>       !vL   %307.4, e315.0   <vec+>
  lgl$#-          %315.2 = IsType                   %315.1 isA val?+
  void                    Branch                   %315.2 -> BB319 (if true) | BB320 (if false)
BB316   <- [307]
  fs              %316.0 = FrameState         R     0x55de2dc4ca10+1789: [<blt c>, %305.1], env=e0.3
  env             e316.1 = (MkEnv)            l     contains=%307.4, simpleOnly=%307.3, parent=<env 0x55de28b56378>, context 1
  fs              %316.2 = FrameState         R     0x55de2c01f0f0+17: [<blt names>, %307.6], env=e316.1, next=%316.0
  void                    Deopt              !v    %316.2, DeadBranchReached@0x55de2e403808[Test#0], %307.6   !
BB311   <- [309]
  int$-           %311.0 = CastType           d     dn %309.0
  vec-            %311.1 = CallSafeBuiltin    wed   vector("list", %311.0)    <vec->
  void                    StVar              lW    classDefs, %311.1, e0.3
  val?^ | miss    %311.3 = LdVar              eR    def, e0.3
  val?            %311.4 = Force!<value>      !v    %311.3, e0.3   <other>
  val?^ | miss    %311.5 = LdVar              eR    classDefs !upd, e0.3
  lgl$#-          %311.6 = IsType                   %311.5 isA val?~- | miss
  void                    Branch                   %311.6 -> BB313 (if true) | BB314 (if false)
BB312   <- [309]
  void                    Nop                !     
  val?^ | miss    %312.1 = %309.0
  dr              %312.2 = Typecheck@0x55de2d7bb0f0[Type#110]
  goto BB59
BB59   <- [310, 312]
  val?^ | miss    %59.0 = Phi                      %310.1:BB310, %312.1:BB312
  val?^ | miss    %59.1 = %59.0
  dr              %59.2 = Phi                      %310.2:BB310, %312.2:BB312
  dr              %59.3 = %59.2
  fs              %59.4 = FrameState         R     0x55de2dc4ca10+1936: [], env=e0.3
  void                    Deopt              !v    %59.4, %59.3, %59.1   !
BB319   <- [315]
  val?+           %319.0 = CastType           d     dn %315.1   <vec+>
  val+            %319.1 = CallSafeBuiltin    wed   names(%319.0)    <(nil|str)->
  void                    StVar              lW    what, %319.1, e315.0
  val?^ | miss    %319.3 = LdVar              eR    length, <env 0x55de28b56378>
  lgl$#-          %319.4 = Identical                <blt length>, %319.3   <true>
  void                    Branch                   %319.4 -> BB321 (if true) | BB322 (if false)
BB320   <- [315]
  fs              %320.0 = FrameState         R     0x55de2dc4ca10+1789: [<blt c>, %305.1], env=e0.3
  fs              %320.1 = FrameState         R     0x55de2c01f0f0+69: [<blt names>, %315.1], env=e315.0, next=%320.0
  void                    Deopt              !v    %320.1, Typecheck@0x55de2e403808[Type#1], %315.1   !
BB313   <- [311]
  val?~- | miss   %313.0 = CastType           d     dn %311.5
  val?-           %313.1 = Force!<value>            %313.0,    <vec->
  val?            %313.2 = Subassign2_1D      !v    %311.4, %313.1, 1L, e0.3
  void                    StVar              lW    classDefs, %313.2, e0.3
  val?^ | miss    %313.4 = LdVar              eR    nargs, e0.3
  lgl$#-          %313.5 = IsType                   %313.4 isA int$-
  void                    Branch                   %313.5 -> BB317 (if true) | BB318 (if false)
BB314   <- [311]
  fs              %314.0 = FrameState         R     0x55de2dc4ca10+1996: [%311.4], env=e0.3
  void                    Deopt              !v    %314.0, Typecheck@0x55de2d7bb0f0[Type#113], %311.5   !
BB321   <- [319]
  (int|real)$-    %321.0 = CallSafeBuiltin    wed   length(%319.1)    <int$->
  lgl$#-          %321.1 = IsType                   %321.0 isA int$-
  void                    Branch                   %321.1 -> BB335 (if true) | BB336 (if false)
BB322   <- [319]
  fs              %322.0 = FrameState         R     0x55de2dc4ca10+1789: [<blt c>, %305.1], env=e0.3
  fs              %322.1 = FrameState         R     0x55de2c01f0f0+105: [], env=e315.0, next=%322.0
  void                    Deopt              !v    %322.1, DeadBranchReached@0x55de2e403808[Test#1], %319.4   !
BB317   <- [313]
  int$-           %317.0 = CastType           d     dn %313.4
  lgl$-           %317.1 = Gt                 d     %317.0, 1, elided   <lgl$->
  lgl$#-          %317.2 = CheckTrueFalse     e     %317.1
  void                    Branch                   %317.2 -> BB179 (if true) | BB65 (if false)
BB318   <- [313]
  void                    Nop                !     
  val?^ | miss    %318.1 = %313.4
  dr              %318.2 = Typecheck@0x55de2d7bb0f0[Type#114]
  goto BB63
BB335   <- [321]
  int$-           %335.0 = CastType           d     dn %321.0
  lgl$-           %335.1 = Not                d     %335.0, elided
  lgl$#-          %335.2 = CheckTrueFalse     e     %335.1
  void                    Branch                   %335.2 -> BB254 (if true) | BB236 (if false)
BB336   <- [321]
  void                    Nop                !     
  (int|real)$-    %336.1 = %321.0
  dr              %336.2 = Typecheck@0x55de2e403808[Type#5]
  goto BB234
BB179   <- [317]
  lgl$#-          %179.0 = ColonInputEffects        2, %317.0   <true>
  void                    Branch                   %179.0 -> BB323 (if true) | BB324 (if false)
BB65   <- [317]
  void                    Nop                !     
  goto BB66
BB63   <- [318, 324, 330, 332]
  val?^ | miss    %63.0 = Phi                      %318.1:BB318, %324.1:BB324, %330.1:BB330, %332.1:BB332
  val?^ | miss    %63.1 = %63.0
  dr              %63.2 = Phi                      %318.2:BB318, %324.2:BB324, %330.2:BB330, %332.2:BB332
  dr              %63.3 = %63.2
  fs              %63.4 = FrameState         R     0x55de2dc4ca10+2031: [], env=e0.3
  void                    Deopt              !v    %63.4, %63.3, %63.1   !
BB254   <- [335]
  void                    Nop                !     
  val+            %254.1 = %319.1
  goto BB249
BB236   <- [335]
  val?^ | miss    %236.0 = LdVar              eR    vapply, <env 0x55de28b56378>
  lgl$#-          %236.1 = Identical                %236.0, function(X, FUN, FUN.VALUE, ..., USE.NAMES=TRU|...
  void                    Branch                   %236.1 -> BB345 (if true) | BB346 (if false)
BB234   <- [336, 346]
  val?^ | miss    %234.0 = Phi                      %336.1:BB336, %346.1:BB346
  val?^ | miss    %234.1 = %234.0
  dr              %234.2 = Phi                      %336.2:BB336, %346.2:BB346
  dr              %234.3 = %234.2
  fs              %234.4 = FrameState         R     0x55de2dc4ca10+1789: [<blt c>, %305.1], env=e0.3
  fs              %234.5 = FrameState         R     0x55de2c01f0f0+196: [%321.0], env=e315.0, next=%234.4
  void                    Deopt              !v    %234.5, %234.3, %234.1   !
BB323   <- [179]
  int$#-          %323.0 = ColonCastRhs       e     2L, %317.0   <int$->
  lgl$#-          %323.1 = Lte                d     2L, %323.0, elided   <true>
  void                    Branch                   %323.1 -> BB329 (if true) | BB330 (if false)
BB324   <- [179]
  void                    Nop                !     
  lgl$#-          %324.1 = %179.0
  dr              %324.2 = DeadBranchReached@0x55de2d7bb0f0[Test#12]
  goto BB63
BB66   <- [65, 201]
  val?^ | miss    %66.0 = LdVar              eR    labels, e0.3
  lgl$#-          %66.1 = IsType                   %66.0 isA val?~- | miss
  void                    Branch                   %66.1 -> BB325 (if true) | BB326 (if false)
BB249   <- [254, 393]
  val?            %249.0 = Phi                      %393.2:BB393, %254.1:BB254
  val?            %249.1 = %249.0
  val?            %249.2 = PopContext         C     %249.1, %307.2   <str->
  lgl$#-          %249.3 = IsType                   %249.2 isA val?-
  void                    Branch                   %249.3 -> BB353 (if true) | BB354 (if false)
BB345   <- [236]
  prom-           %345.0 = MkArg                    unboundValue, .findInheritedMethods[0x55de2de5a9b0]_p94, e315.0
  prom-           %345.1 = MkArg                    unboundValue, .findInheritedMethods[0x55de2de5a9b0]_p95, e315.0
  ct              %345.2 = PushContext        lCL   %345.0, %345.1, na-lgl, vapply(contains, if(simpleOnly, function(<lst |..., function(X, FUN, FUN.VALUE, ..., USE.NAMES=TRU|..., e315.0
  val?^           %345.3 = CastType                 up %345.1
  val?^           %345.4 = CastType                 up %345.0
  env             e345.5 = MkEnv              l     X=%345.4, FUN=%345.3, FUN.VALUE=na-lgl, ...(miss)=missingArg, USE.NAMES(miss)=true, parent=R_BaseNamespace, context 1
  prom-           %345.6 = MkArg                    unboundValue, .findInheritedMethods[0x55de2de5a9b0]_p110, e345.5
  val?            %345.7 = StaticCall         !v    match.fun[0x55de2cc54380](%345.6) e345.5   <(cls|blt)->
  void                    StVar              lW    FUN, %345.7, e345.5
  val?^ | miss    %345.9 = LdVar              eR    is.vector, e345.5
  lgl$#-          %345.10 = Identical                %345.9, function(x, mode="any") <(rir::DispatchTable*)|...
  void                    Branch                   %345.10 -> BB349 (if true) | BB350 (if false)
BB346   <- [236]
  void                    Nop                !     
  val?^ | miss    %346.1 = %236.0
  dr              %346.2 = CallTarget@0x55de2e403808[Call#2]
  goto BB234
BB329   <- [323]
  lgl$#-          %329.0 = Neq                d     %323.0, 2L, elided   <true>
  void                    Branch                   %329.0 -> BB331 (if true) | BB332 (if false)
BB330   <- [323]
  void                    Nop                !     
  lgl$#-          %330.1 = %323.1
  dr              %330.2 = DeadBranchReached@0x55de2d7bb0f0[Test#15]
  goto BB63
BB325   <- [66]
  val?~- | miss   %325.0 = CastType           d     dn %66.0
  val?-           %325.1 = Force!<value>            %325.0,    <str->
  lgl$#-          %325.2 = IsType                   %325.1 isA val+   <true>
  void                    Branch                   %325.2 -> BB327 (if true) | BB328 (if false)
BB326   <- [66]
  void                    Nop                !     
  val?^ | miss    %326.1 = %66.0
  dr              %326.2 = Typecheck@0x55de2d7bb0f0[Type#238]
  goto BB67
BB353   <- [249]
  val?-           %353.0 = CastType           d     dn %249.2   <str->
  (list|sym|char|lgl|int|real|str|vec|complex|raw|cls|spec|blt|prom|_|code|env|ast|expressions|dots|other)+ %353.1 = CallSafeBuiltin    wed   c(%305.1, %353.0, "ANY")    <str->
  (list|sym|char|lgl|int|real|str|vec|complex|raw|cls|spec|blt|prom|_|code|env|ast|expressions|dots|other)+ %353.2 = %353.1
  goto BB56
BB354   <- [249]
  fs              %354.0 = FrameState         R     0x55de2dc4ca10+1789: [<blt c>, %305.1, %249.2], env=e0.3
  void                    Deopt              !v    %354.0, Typecheck@0x55de2d7bb0f0[Type#105], %249.2   !
BB349   <- [345]
  val?^ | miss    %349.0 = LdVar              eR    X, e345.5
  val?            %349.1 = Force!<lazy>       !v    %349.0, e345.5   <val?>
  lgl$#-          %349.2 = CallSafeBuiltin    wed   is.vector(%349.1, "any")    <lgl$->
  lgl$#-          %349.3 = Not                d     %349.2, elided
  void                    Branch                   %349.2 -> BB253 (if true) | BB241 (if false)
BB350   <- [345]
  fs              %350.0 = FrameState         R     0x55de2dc4ca10+1789: [<blt c>, %305.1], env=e0.3
  fs              %350.1 = FrameState         R     0x55de2c01f0f0+250: [], env=e315.0, next=%350.0
  fs              %350.2 = FrameState         R     0x55de2a50ef70+46: [], env=e345.5, next=%350.1
  void                    Deopt              !v    %350.2, CallTarget@0x55de2a4f5340[Call#1], %345.9   !
BB331   <- [329]
  void                    StVar              lW    i, 2L, e0.3
  val?^ | miss    %331.1 = LdVar              eR    getClass, e0.3
  lgl$#-          %331.2 = Identical                %331.1, function(Class, .Force=FALSE, where=.classEnv(|...
  void                    Branch                   %331.2 -> BB333 (if true) | BB334 (if false)
BB332   <- [329]
  void                    Nop                !     
  lgl$#-          %332.1 = %329.0
  dr              %332.2 = DeadBranchReached@0x55de2d7bb0f0[Test#16]
  goto BB63
BB327   <- [325]
  val?            %327.0 = Extract1_1D        wed   %325.1, -1L, elided   <str->
  void                    StVar              lW    labels, %327.0, e0.3
  val?^ | miss    %327.2 = LdVar              eR    unique, e0.3
  lgl$#-          %327.3 = Identical                %327.2, function(x, incomparables=FALSE, ...) <(rir::D|...
  void                    Branch                   %327.3 -> BB337 (if true) | BB338 (if false)
BB328   <- [325]
  void                    Nop                !     
  lgl$#-          %328.1 = %325.2
  dr              %328.2 = DeadBranchReached@0x55de2d7bb0f0[Test#27]
  goto BB67
BB67   <- [326, 328]
  val?^ | miss    %67.0 = Phi                      %326.1:BB326, %328.1:BB328
  val?^ | miss    %67.1 = %67.0
  dr              %67.2 = Phi                      %326.2:BB326, %328.2:BB328
  dr              %67.3 = %67.2
  fs              %67.4 = FrameState         R     0x55de2dc4ca10+3635: [], env=e0.3
  void                    Deopt              !v    %67.4, %67.3, %67.1   !
BB253   <- [349]
  val?^ | miss    %253.0 = LdVar              eR    is.object, e345.5
  lgl$#-          %253.1 = Identical                <blt is.object>, %253.0   <true>
  void                    Branch                   %253.1 -> BB355 (if true) | BB356 (if false)
BB241   <- [349]
  void                    Nop                !     
  lgl$#-          %241.1 = %349.3
  goto BB242
BB333   <- [331]
  prom-           %333.0 = MkArg                    unboundValue, .findInheritedMethods[0x55de2de5a9b0]_p66, e0.3
  prom-           %333.1 = MkArg                    unboundValue, .findInheritedMethods[0x55de2de5a9b0]_p68, e0.3
  val?            %333.2 = StaticCall         !v    getClass[0x55de2b1b0b70](%333.0, true, %333.1) { 0 2n 1n } e0.3   <other>
  val?^ | miss    %333.3 = LdVar              eR    classDefs !upd, e0.3
  lgl$#-          %333.4 = IsType                   %333.3 isA val?~- | miss
  void                    Branch                   %333.4 -> BB339 (if true) | BB340 (if false)
BB334   <- [331]
  fs              %334.0 = FrameState         R     0x55de2dc4ca10+2212: [1L, %323.0, 2L], env=e0.3
  void                    Deopt              !v    %334.0, CallTarget@0x55de2d7bb0f0[Call#54], %331.1   !
BB337   <- [327]
  val             %337.0 = ChkMissing         e     %327.0
  val?            %337.1 = StaticCall         !v    unique[0x55de2f4ca5a0](%327.0) { 0 } e0.3   <str->
  void                    StVar              lW    labels, %337.1, e0.3
  val?^ | miss    %337.3 = LdVar              eR    verbose, e0.3
  val?            %337.4 = Force!<wrapped>    !v    %337.3, e0.3   <lgl$->
  lgl$#-          %337.5 = CheckTrueFalse     we    %337.4
  void                    Branch                   %337.5 -> BB178 (if true) | BB73 (if false)
BB338   <- [327]
  fs              %338.0 = FrameState         R     0x55de2dc4ca10+3703: [], env=e0.3
  void                    Deopt              !v    %338.0, CallTarget@0x55de2d7bb0f0[Call#80], %327.2   !
BB355   <- [253]
  val?^ | miss    %355.0 = LdVar              eR    X, e345.5
  val?            %355.1 = Force!<wrapped>    !v    %355.0, e345.5   <val?+>
  lgl$#-          %355.2 = CallSafeBuiltin    wed   is.object(%355.1)    <lgl$->
  lgl$-           %355.3 = LOr                      %349.3, %355.2
  lgl$-           %355.4 = %355.3
  goto BB242
BB356   <- [253]
  fs              %356.0 = FrameState         R     0x55de2dc4ca10+1789: [<blt c>, %305.1], env=e0.3
  fs              %356.1 = FrameState         R     0x55de2c01f0f0+250: [], env=e315.0, next=%356.0
  fs              %356.2 = FrameState         R     0x55de2a50ef70+78: [], env=e345.5, next=%356.1
  prom-           %356.3 = MkArg                    %349.1, .findInheritedMethods[0x55de2de5a9b0]_p112 (!refl), e345.5
  val?~           %356.4 = CastType                 up %356.3
  env             e356.5 = (MkEnv)            l     mode(miss)="any", x=%356.4, parent=R_BaseNamespace, context 0
  fs              %356.6 = FrameState         R     0x55de2a3f0820+41: [%349.2], env=e356.5, next=%356.2
  void                    Deopt              !v    %356.6, DeadBranchReached@0x55de2a4f5340[Test#0], %253.1   !
BB242   <- [241, 355]
  lgl$-           %242.0 = Phi                      %355.4:BB355, %241.1:BB241
  lgl$-           %242.1 = %242.0
  lgl$#-          %242.2 = CheckTrueFalse     e     %242.1
  void                    Branch                   %242.2 -> BB252 (if true) | BB245 (if false)
BB339   <- [333]
  val?~- | miss   %339.0 = CastType           d     dn %333.3
  val?-           %339.1 = Force!<value>            %339.0,    <vec->
  val?^ | miss    %339.2 = LdVar              eR    i, e0.3
  lgl$#-          %339.3 = IsType                   %339.2 isA int$-
  void                    Branch                   %339.3 -> BB341 (if true) | BB342 (if false)
BB340   <- [333]
  void                    Nop                !     
  val?^ | miss    %340.1 = %333.3
  dr              %340.2 = Typecheck@0x55de2d7bb0f0[Type#158]
  goto BB182
BB178   <- [337]
  (cls|spec|blt)  %178.0 = LdFun              !v    cat, e0.3
  fs              %178.1 = FrameState         R     0x55de2dc4ca10+3779: [%178.0], env=e0.3
  void                    Deopt              !v    %178.1, DeadCall@0x55de2d7bb0f0[Call#81], %178.0   !
BB73   <- [337]
  val?^ | miss    %73.0 = LdVar              eR    names, e0.3
  lgl$#-          %73.1 = Identical                <blt names>, %73.0   <true>
  void                    Branch                   %73.1 -> BB343 (if true) | BB344 (if false)
BB252   <- [242]
  val?^ | miss    %252.0 = LdVar              eR    as.list, e345.5
  lgl$#-          %252.1 = Identical                %252.0, function(x, ...) <(rir::DispatchTable*)0x55de2|...
  void                    Branch                   %252.1 -> BB361 (if true) | BB362 (if false)
BB245   <- [242]
  void                    Nop                !     
  goto BB246
BB341   <- [339]
  int$-           %341.0 = CastType           d     dn %339.2
  val?            %341.1 = Subassign2_1D      !v    %333.2, %339.1, %341.0, e0.3
  void                    StVar              lW    classDefs, %341.1, e0.3
  void                    StVar              lW    cc, %333.2, e0.3
  lgl$-           %341.4 = Missing            eR    useInherited, e0.3
  lgl$-           %341.5 = AsLogical                %341.4
  lgl$#-          %341.6 = Identical                %341.5, true
  void                    Branch                   %341.6 -> BB226 (if true) | BB184 (if false)
BB342   <- [339]
  void                    Nop                !     
  val?^ | miss    %342.1 = %339.2
  dr              %342.2 = Typecheck@0x55de2d7bb0f0[Type#159]
  goto BB182
BB182   <- [340, 342]
  val?^ | miss    %182.0 = Phi                      %340.1:BB340, %342.1:BB342
  val?^ | miss    %182.1 = %182.0
  dr              %182.2 = Phi                      %340.2:BB340, %342.2:BB342
  dr              %182.3 = %182.2
  fs              %182.4 = FrameState         R     0x55de2dc4ca10+2273: [1L, %323.0, 3L, %333.2], env=e0.3
  void                    Deopt              !v    %182.4, %182.3, %182.1   !
BB343   <- [73]
  val?^ | miss    %343.0 = LdVar              eR    table, e0.3
  val?            %343.1 = Force!<wrapped>    !v    %343.0, e0.3   <env->
  lgl$#-          %343.2 = IsType                   %343.1 isA val?-
  void                    Branch                   %343.2 -> BB347 (if true) | BB348 (if false)
BB344   <- [73]
  fs              %344.0 = FrameState         R     0x55de2dc4ca10+3764: [%337.5], env=e0.3
  void                    Deopt              !v    %344.0, DeadBranchReached@0x55de2d7bb0f0[Test#28], %73.1   !
BB361   <- [252]
  val?^ | miss    %361.0 = LdVar              eR    X, e345.5
  val?            %361.1 = Force!<wrapped>    !v    %361.0, e345.5   <vec>
  val?            %361.2 = StaticCall         !v    as.list[0x55de2b69c240](%361.1) { 0 } e345.5   <vec>
  void                    StVar              lW    X, %361.2, e345.5
  goto BB246
BB362   <- [252]
  fs              %362.0 = FrameState         R     0x55de2dc4ca10+1789: [<blt c>, %305.1], env=e0.3
  fs              %362.1 = FrameState         R     0x55de2c01f0f0+250: [], env=e315.0, next=%362.0
  fs              %362.2 = FrameState         R     0x55de2a50ef70+189: [%242.1], env=e345.5, next=%362.1
  void                    Deopt              !v    %362.2, CallTarget@0x55de2a4f5340[Call#3], %252.0   !
BB246   <- [245, 361]
  (cls|spec|blt)  %246.0 = LdFun              !v    .Internal, <0x55de2854e698>, e345.5
  prom-           %246.1 = MkArg                    unboundValue, .findInheritedMethods[0x55de2de5a9b0]_p113, e345.5
  val?            %246.2 = Call               !v    %246.0(%246.1) e345.5   <val?+>
  val?            %246.3 = PopContext         C     %246.2, %345.2   <lgl+>
  void                    StVar              lW    eligible, %246.3, e315.0
  val?^ | miss    %246.5 = LdVar              eR    what, e315.0
  lgl$#-          %246.6 = IsType                   %246.5 isA val?~- | miss
  void                    Branch                   %246.6 -> BB371 (if true) | BB372 (if false)
BB226   <- [341]
  void                    Nop                !     
  lgl$-           %226.1 = %341.5
  goto BB187
BB184   <- [341]
  val?^ | miss    %184.0 = LdVar              eR    useInherited, e0.3
  val?            %184.1 = Force!             !v    %184.0, e0.3   <val?_>
  lgl$#-          %184.2 = IsType                   %184.1 isA val+   <@?>
  void                    Branch                   %184.2 -> BB225 (if true) | BB185 (if false)
BB347   <- [343]
  val?-           %347.0 = CastType           d     dn %343.1   <env->
  val+            %347.1 = CallSafeBuiltin    wed   names(%347.0)    <str->
  void                    StVar              lW    allMethods, %347.1, e0.3
  val?^ | miss    %347.3 = LdVar              eR    match, e0.3
  lgl$#-          %347.4 = Identical                %347.3, function(x, table, nomatch=NA, incomparables=N|...
  void                    Branch                   %347.4 -> BB359 (if true) | BB360 (if false)
BB348   <- [343]
  fs              %348.0 = FrameState         R     0x55de2dc4ca10+3984: [<blt names>, %343.1], env=e0.3
  void                    Deopt              !v    %348.0, Typecheck@0x55de2d7bb0f0[Type#249], %343.1   !
BB371   <- [246]
  val?~- | miss   %371.0 = CastType           d     dn %246.5
  val?-           %371.1 = Force!<value>            %371.0,    <str->
  lgl$#-          %371.2 = IsType                   %371.1 isA val+   <true>
  void                    Branch                   %371.2 -> BB381 (if true) | BB382 (if false)
BB372   <- [246]
  void                    Nop                !     
  val?^ | miss    %372.1 = %246.5
  dr              %372.2 = Typecheck@0x55de2e403808[Type#9]
  goto BB247
BB187   <- [226, 186]
  lgl$-           %187.0 = Phi                      %186.5:BB186, %226.1:BB226
  lgl$-           %187.1 = %187.0
  lgl$#-          %187.2 = CheckTrueFalse     e     %187.1
  void                    Branch                   %187.2 -> BB191 (if true) | BB190 (if false)
BB225   <- [184]
  val?^ | miss    %225.0 = LdVar              eR    i, e0.3
  val?            %225.1 = Force!             !v    %225.0, e0.3   <val?_>
  val?            %225.2 = %225.1
  goto BB186
BB185   <- [184]
  prom-           %185.0 = MkArg                    unboundValue, .findInheritedMethods[0x55de2de5a9b0]_p89, e0.3
  prom-           %185.1 = %185.0
  goto BB186
BB359   <- [347]
  val?^ | miss    %359.0 = LdVar              eR    labels, e0.3
  lgl$#-          %359.1 = IsType                   %359.0 isA val?~- | miss
  void                    Branch                   %359.1 -> BB363 (if true) | BB364 (if false)
BB360   <- [347]
  void                    Nop                !     
  val?^ | miss    %360.1 = %347.3
  dr              %360.2 = CallTarget@0x55de2d7bb0f0[Call#86]
  goto BB76
BB381   <- [371]
  val             %381.0 = ChkMissing         e     %246.3
  lgl$#-          %381.1 = IsType                   %381.0 isA lgl+
  void                    Branch                   %381.1 -> BB393 (if true) | BB394 (if false)
BB382   <- [371]
  void                    Nop                !     
  lgl$#-          %382.1 = %371.2
  dr              %382.2 = DeadBranchReached@0x55de2e403808[Test#2]
  goto BB247
BB247   <- [372, 382, 394]
  val?^ | miss    %247.0 = Phi                      %372.1:BB372, %382.1:BB382, %394.1:BB394
  val?^ | miss    %247.1 = %247.0
  dr              %247.2 = Phi                      %372.2:BB372, %382.2:BB382, %394.2:BB394
  dr              %247.3 = %247.2
  fs              %247.4 = FrameState         R     0x55de2dc4ca10+1789: [<blt c>, %305.1], env=e0.3
  fs              %247.5 = FrameState         R     0x55de2c01f0f0+264: [], env=e315.0, next=%247.4
  void                    Deopt              !v    %247.5, %247.3, %247.1   !
BB191   <- [187]
  val?^ | miss    %191.0 = LdVar              eR    c, e0.3
  lgl$#-          %191.1 = Identical                <blt c>, %191.0   <true>
  void                    Branch                   %191.1 -> BB351 (if true) | BB352 (if false)
BB190   <- [187]
  (cls|spec|blt)  %190.0 = LdFun              !v    @, e0.3
  fs              %190.1 = FrameState         R     0x55de2dc4ca10+2420: [1L, %323.0, 3L, %190.0], env=e0.3
  void                    Deopt              !v    %190.1, DeadCall@0x55de2d7bb0f0[Call#55], %190.0   !
BB186   <- [185, 225]
  val?            %186.0 = Phi                      %225.2:BB225, %185.1:BB185
  val?            %186.1 = %186.0
  val?            %186.2 = Extract2_1D        !v    %184.1, %186.1, e0.3   <val?_>
  lgl$-           %186.3 = AsLogical          e     %186.2
  lgl$-           %186.4 = LOr                      %341.5, %186.3
  lgl$-           %186.5 = %186.4
  goto BB187
BB363   <- [359]
  val?~- | miss   %363.0 = CastType           d     dn %359.0
  val?-           %363.1 = Force!<value>            %363.0,    <str->
  val?^ | miss    %363.2 = LdVar              eR    .fillSignatures, e0.3
  lgl$#-          %363.3 = Identical                %363.2, function(sigs, n) <(rir::DispatchTable*)0x55de|...
  void                    Branch                   %363.3 -> BB365 (if true) | BB366 (if false)
BB364   <- [359]
  void                    Nop                !     
  val?^ | miss    %364.1 = %359.0
  dr              %364.2 = Typecheck@0x55de2d7bb0f0[Type#251]
  goto BB76
BB76   <- [360, 364, 366]
  val?^ | miss    %76.0 = Phi                      %360.1:BB360, %364.1:BB364, %366.1:BB366
  val?^ | miss    %76.1 = %76.0
  dr              %76.2 = Phi                      %360.2:BB360, %364.2:BB364, %366.2:BB366
  dr              %76.3 = %76.2
  fs              %76.4 = FrameState         R     0x55de2dc4ca10+4020: [], env=e0.3
  void                    Deopt              !v    %76.4, %76.3, %76.1   !
BB393   <- [381]
  lgl+            %393.0 = CastType           d     dn %381.0
  val?            %393.1 = Extract1_1D        wed   %371.1, %393.0, elided   <str->
  val?            %393.2 = %393.1
  goto BB249
BB394   <- [381]
  void                    Nop                !     
  val             %394.1 = %381.0
  dr              %394.2 = Typecheck@0x55de2e403808[Type#11]
  goto BB247
BB351   <- [191]
  (cls|spec|blt)  %351.0 = LdFun              !v    @, <0x55de2854ebd8>, e0.3
  prom-           %351.1 = MkArg                    unboundValue, .findInheritedMethods[0x55de2de5a9b0]_p69, e0.3
  prom-           %351.2 = MkArg                    unboundValue, .findInheritedMethods[0x55de2de5a9b0]_p70, e0.3
  val?            %351.3 = Call               !v    %351.0(%351.1, %351.2) e0.3   <str$+>
  val?^ | miss    %351.4 = LdVar              eR    .eligibleSuperClasses, e0.3
  lgl$#-          %351.5 = Identical                %351.4, function(contains, simpleOnly) <(rir::Dispatch|...
  void                    Branch                   %351.5 -> BB357 (if true) | BB358 (if false)
BB352   <- [191]
  fs              %352.0 = FrameState         R     0x55de2dc4ca10+2409: [1L, %323.0, 3L, %187.1], env=e0.3
  void                    Deopt              !v    %352.0, DeadBranchReached@0x55de2d7bb0f0[Test#19], %191.1   !
BB365   <- [363]
  prom-           %365.0 = MkArg                    unboundValue, .findInheritedMethods[0x55de2de5a9b0]_p22 (!refl), e0.3
  prom-           %365.1 = MkArg                    unboundValue, .findInheritedMethods[0x55de2de5a9b0]_p23, e0.3
  val?            %365.2 = StaticCall         !v    unknown--fromConstant[0x55de35834300](%365.0, %365.1) from function(sigs, n) <(rir::DispatchTable*)0x55de|... { 0 1 } e0.3   <str->
  lgl$#-          %365.3 = IsType                   %365.2 isA val?-
  void                    Branch                   %365.3 -> BB369 (if true) | BB370 (if false)
BB366   <- [363]
  void                    Nop                !     
  val?^ | miss    %366.1 = %363.2
  dr              %366.2 = CallTarget@0x55de2d7bb0f0[Call#87]
  goto BB76
BB357   <- [351]
  prom-           %357.0 = MkArg                    unboundValue, .findInheritedMethods[0x55de2de5a9b0]_p71, e0.3
  prom-           %357.1 = MkArg                    unboundValue, .findInheritedMethods[0x55de2de5a9b0]_p74, e0.3
  val?            %357.2 = StaticCall         !v    .eligibleSuperClasses[0x55de2f698490](%357.0, %357.1) e0.3   <nil->
  lgl$#-          %357.3 = IsType                   %357.2 isA val?-
  lgl$#-          %357.4 = IsType                   %351.3 isA val?+
  void                    Branch                   %357.4 -> BB367 (if true) | BB368 (if false)
BB358   <- [351]
  fs              %358.0 = FrameState         R     0x55de2dc4ca10+2569: [1L, %323.0, 3L, <blt c>, %351.3], env=e0.3
  void                    Deopt              !v    %358.0, CallTarget@0x55de2d7bb0f0[Call#61], %351.4   !
BB369   <- [365]
  val?-           %369.0 = CastType           d     dn %365.2   <str->
  val+            %369.1 = CallSafeBuiltin    wed   match(%363.1, %369.0, NA, nil)    <int->
  void                    StVar              lW    m, %369.1, e0.3
  lgl$#-          %369.3 = IsType                   %369.1 isA int-
  val?^ | miss    %369.4 = LdVar              eR    is.na, e0.3
  lgl$#-          %369.5 = Identical                <blt is.na>, %369.4   <true>
  void                    Branch                   %369.5 -> BB377 (if true) | BB378 (if false)
BB370   <- [365]
  fs              %370.0 = FrameState         R     0x55de2dc4ca10+4057: [], env=e0.3
  prom-           %370.1 = MkArg                    unboundValue, .findInheritedMethods[0x55de2de5a9b0]_p21, e0.3
  val?^           %370.2 = CastType                 up %370.1
  prom-           %370.3 = MkArg                    %363.1, .findInheritedMethods[0x55de2de5a9b0]_p20 (!refl), e0.3
  val?~           %370.4 = CastType                 up %370.3
  env             e370.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%370.2, x=%370.4, parent=R_BaseNamespace, context 0
  fs              %370.6 = FrameState         R     0x55de28d63d40+23: [%363.1], env=e370.5, next=%370.0
  fs              %370.7 = FrameState         R     0x55de28fbea10+37(pr): [%365.2], env=e0.3, next=%370.6
  void                    Deopt              !v    %370.7, Typecheck@0x55de28db6cb0[Type#1], %365.2   !
BB367   <- [357]
  val?+           %367.0 = CastType           d     dn %351.3   <str$+>
  void                    Branch                   %357.3 -> BB373 (if true) | BB374 (if false)
BB368   <- [357]
  void                    Nop                !     
  val?            %368.1 = %351.3
  dr              %368.2 = Typecheck@0x55de2d7bb0f0[Type#177]
  goto BB194
BB377   <- [369]
  void                    Branch                   %369.3 -> BB379 (if true) | BB380 (if false)
BB378   <- [369]
  void                    Nop                !     
  lgl$#-          %378.1 = %369.5
  dr              %378.2 = DeadBranchReached@0x55de2d7bb0f0[Test#29]
  goto BB80
BB373   <- [367]
  val?-           %373.0 = CastType           d     dn %357.2   <nil->
  (list|sym|char|lgl|int|real|str|vec|complex|raw|cls|spec|blt|prom|_|code|env|ast|expressions|dots|other)+ %373.1 = CallSafeBuiltin    wed   c(%367.0, %373.0, "ANY")    <str->
  void                    StVar              lW    allLabels, %373.1, e0.3
  val?^ | miss    %373.3 = LdVar              eR    outerLabels, e0.3
  lgl$#-          %373.4 = Identical                %373.3, function(labels, new) <(rir::DispatchTable*)0x|...
  void                    Branch                   %373.4 -> BB375 (if true) | BB376 (if false)
BB374   <- [367]
  void                    Nop                !     
  val?            %374.1 = %357.2
  dr              %374.2 = Typecheck@0x55de2d7bb0f0[Type#182]
  goto BB194
BB194   <- [368, 374]
  val?^ | miss    %194.0 = Phi                      %368.1:BB368, %374.1:BB374
  val?^ | miss    %194.1 = %194.0
  dr              %194.2 = Phi                      %368.2:BB368, %374.2:BB374
  dr              %194.3 = %194.2
  fs              %194.4 = FrameState         R     0x55de2dc4ca10+2611: [1L, %323.0, 3L, <blt c>, %351.3, %357.2], env=e0.3
  void                    Deopt              !v    %194.4, %194.3, %194.1   !
BB379   <- [377]
  int-            %379.0 = CastType           d     dn %369.1
  lgl-            %379.1 = CallSafeBuiltin    wed   is.na(%379.0)    <lgl->
  lgl-            %379.2 = Not                wed   %379.1, elided
  void                    StVar              lW    found, %379.2, e0.3
  val?^ | miss    %379.4 = LdVar              eR    mget, e0.3
  lgl$#-          %379.5 = Identical                %379.4, function(x, envir=as.environment(-(1L)), mode=|...
  void                    Branch                   %379.5 -> BB391 (if true) | BB392 (if false)
BB380   <- [377]
  void                    Nop                !     
  val+            %380.1 = %369.1
  dr              %380.2 = Typecheck@0x55de2d7bb0f0[Type#256]
  goto BB80
BB80   <- [378, 380]
  val?^ | miss    %80.0 = Phi                      %378.1:BB378, %380.1:BB380
  val?^ | miss    %80.1 = %80.0
  dr              %80.2 = Phi                      %378.2:BB378, %380.2:BB380
  dr              %80.3 = %80.2
  fs              %80.4 = FrameState         R     0x55de2dc4ca10+4071: [], env=e0.3
  void                    Deopt              !v    %80.4, %80.3, %80.1   !
BB375   <- [373]
  prom-           %375.0 = MkArg                    unboundValue, .findInheritedMethods[0x55de2de5a9b0]_p75, e0.3
  prom-           %375.1 = MkArg                    unboundValue, .findInheritedMethods[0x55de2de5a9b0]_p76 (!refl), e0.3
  val?            %375.2 = StaticCall         !v    outerLabels[0x55de2d663b80](%375.0, %375.1) e0.3   <str->
  void                    StVar              lW    labels, %375.2, e0.3
  val?^ | miss    %375.4 = LdVar              eR    c, e0.3
  lgl$#-          %375.5 = Identical                <blt c>, %375.4   <true>
  void                    Branch                   %375.5 -> BB383 (if true) | BB384 (if false)
BB376   <- [373]
  fs              %376.0 = FrameState         R     0x55de2dc4ca10+2653: [1L, %323.0, 3L], env=e0.3
  void                    Deopt              !v    %376.0, CallTarget@0x55de2d7bb0f0[Call#63], %373.3   !
BB391   <- [379]
  prom-           %391.0 = MkArg                    unboundValue, .findInheritedMethods[0x55de2de5a9b0]_p25, e0.3
  prom-           %391.1 = MkArg                    unboundValue, .findInheritedMethods[0x55de2de5a9b0]_p29, e0.3
  ct              %391.2 = PushContext        lCL   %391.0, %391.1, mget([(allMethods, [(m, found)), table), function(x, envir=as.environment(-(1L)), mode=|..., e0.3
  val?^           %391.3 = CastType                 up %391.1
  val?^           %391.4 = CastType                 up %391.0
  env             e391.5 = MkEnv              l     x=%391.4, envir=%391.3, mode(miss)="any", ifnotfound(miss)=missingArg, inherits(miss)=false, parent=R_BaseNamespace, context 1
  cls             %391.6 = MkCls                    mget@133, e391.5
  val?            %391.7 = Force!<lazy>       !vL   %391.4, e391.5   <str+>
  val?            %391.8 = Force!<lazy>       !vL   %391.3, e391.5   <env->
  val?^ | miss    %391.9 = LdVar              eR    list, e391.5
  lgl$#-          %391.10 = Identical                <blt list>, %391.9   <true>
  void                    Branch                   %391.10 -> BB401 (if true) | BB402 (if false)
BB392   <- [379]
  fs              %392.0 = FrameState         R     0x55de2dc4ca10+4177: [], env=e0.3
  void                    Deopt              !v    %392.0, CallTarget@0x55de2d7bb0f0[Call#90], %379.4   !
BB383   <- [375]
  val?^ | miss    %383.0 = LdVar              eR    supersList, e0.3
  lgl$#-          %383.1 = IsType                   %383.0 isA val?~- | miss
  void                    Branch                   %383.1 -> BB385 (if true) | BB386 (if false)
BB384   <- [375]
  void                    Nop                !     
  lgl$#-          %384.1 = %375.5
  dr              %384.2 = DeadBranchReached@0x55de2d7bb0f0[Test#20]
  goto BB198
BB401   <- [391]
  val+            %401.0 = CallSafeBuiltin    wed   list(%391.6)    <vec$->
  val?            %401.1 = CallBuiltin        !v    mget(%391.7, %391.8, "any", %401.0, false) e391.5
  val?            %401.2 = PopContext         C     %401.1, %391.2   <vec+>
  void                    StVar              lW    methods, %401.2, e0.3
  val?^ | miss    %401.4 = LdVar              eR    verbose, e0.3
  val?            %401.5 = Force!<wrapped>    !v    %401.4, e0.3   <lgl$->
  lgl$#-          %401.6 = CheckTrueFalse     we    %401.5
  void                    Branch                   %401.6 -> BB177 (if true) | BB88 (if false)
BB402   <- [391]
  fs              %402.0 = FrameState         R     0x55de2dc4ca10+4214: [], env=e0.3
  fs              %402.1 = FrameState         R     0x55de2a88b970+37: [%391.7, %391.8, "any"], env=e391.5, next=%402.0
  void                    Deopt              !v    %402.1, DeadBranchReached@0x55de2a45bee0[Test#0], %391.10   !
BB385   <- [383]
  val?~- | miss   %385.0 = CastType           d     dn %383.0
  val?-           %385.1 = Force!<value>            %385.0,    <vec$->
  val?^ | miss    %385.2 = LdVar              eR    list, e0.3
  lgl$#-          %385.3 = Identical                <blt list>, %385.2   <true>
  void                    Branch                   %385.3 -> BB387 (if true) | BB388 (if false)
BB386   <- [383]
  void                    Nop                !     
  val?^ | miss    %386.1 = %383.0
  dr              %386.2 = Typecheck@0x55de2d7bb0f0[Type#190]
  goto BB198
BB198   <- [384, 386, 388, 390]
  val?^ | miss    %198.0 = Phi                      %384.1:BB384, %386.1:BB386, %388.1:BB388, %390.1:BB390
  val?^ | miss    %198.1 = %198.0
  dr              %198.2 = Phi                      %384.2:BB384, %386.2:BB386, %388.2:BB388, %390.2:BB390
  dr              %198.3 = %198.2
  fs              %198.4 = FrameState         R     0x55de2dc4ca10+2704: [1L, %323.0, 3L], env=e0.3
  void                    Deopt              !v    %198.4, %198.3, %198.1   !
BB177   <- [401]
  (cls|spec|blt)  %177.0 = LdFun              !v    cat, e0.3
  fs              %177.1 = FrameState         R     0x55de2dc4ca10+4258: [%177.0], env=e0.3
  void                    Deopt              !v    %177.1, DeadCall@0x55de2d7bb0f0[Call#91], %177.0   !
BB88   <- [401]
  val?^ | miss    %88.0 = LdVar              eR    hasGroup, e0.3
  lgl$#-          %88.1 = IsType                   %88.0 isA lgl$-
  void                    Branch                   %88.1 -> BB405 (if true) | BB406 (if false)
BB387   <- [385]
  val?^ | miss    %387.0 = LdVar              eR    allLabels, e0.3
  lgl$#-          %387.1 = IsType                   %387.0 isA val?~- | miss
  void                    Branch                   %387.1 -> BB389 (if true) | BB390 (if false)
BB388   <- [385]
  void                    Nop                !     
  lgl$#-          %388.1 = %385.3
  dr              %388.2 = DeadBranchReached@0x55de2d7bb0f0[Test#21]
  goto BB198
BB405   <- [88]
  lgl$-           %405.0 = CastType           d     dn %88.0
  lgl$#-          %405.1 = CheckTrueFalse     e     %405.0
  void                    Branch                   %405.1 -> BB176 (if true) | BB89 (if false)
BB406   <- [88]
  fs              %406.0 = FrameState         R     0x55de2dc4ca10+4243: [%401.6], env=e0.3
  void                    Deopt              !v    %406.0, Typecheck@0x55de2d7bb0f0[Type#275], %88.0   !
BB389   <- [387]
  val?~- | miss   %389.0 = CastType           d     dn %387.0
  val?-           %389.1 = Force!<value>            %389.0,    <str->
  val+            %389.2 = CallSafeBuiltin    wed   list(%389.1)    <vec$->
  val+            %389.3 = CallSafeBuiltin    wed   c(%385.1, %389.2)    <vec->
  void                    StVar              lW    supersList, %389.3, e0.3
  int$#-          %389.5 = 3L
  goto BB200
BB390   <- [387]
  void                    Nop                !     
  val?^ | miss    %390.1 = %387.0
  dr              %390.2 = Typecheck@0x55de2d7bb0f0[Type#192]
  goto BB198
BB176   <- [405]
  (cls|spec|blt)  %176.0 = LdFun              !v    .getGroupMethods, e0.3
  fs              %176.1 = FrameState         R     0x55de2dc4ca10+4377: [%176.0], env=e0.3
  void                    Deopt              !v    %176.1, DeadCall@0x55de2d7bb0f0[Call#95], %176.0   !
BB89   <- [405]
  (cls|spec|blt)  %89.0 = LdFun              !v    rep, <0x55de285639b0>, e0.3
  prom-           %89.1 = MkArg                    unboundValue, .findInheritedMethods[0x55de2de5a9b0]_p30, e0.3
  val?            %89.2 = Call               !v    %89.0(false, %89.1) e0.3   <lgl->
  void                    StVar              lW    fromGroup, %89.2, e0.3
  val?^ | miss    %89.4 = LdVar              eR    .duplicateClassesExist, e0.3
  lgl$#-          %89.5 = Identical                %89.4, function(on) <(rir::DispatchTable*)0x55de2cdf4|...
  void                    Branch                   %89.5 -> BB409 (if true) | BB410 (if false)
BB200   <- [389, 429]
  int$#-          %200.0 = Phi                      %389.5:BB389, %429.5:BB429
  int$#-          %200.1 = %200.0
  lgl$#-          %200.2 = Neq                d     %323.0, %200.1, elided
  void                    Branch                   %200.2 -> BB202 (if true) | BB201 (if false)
BB409   <- [89]
  val?            %409.0 = StaticCall         !v    .duplicateClassesExist[0x55de2fdbd4d0]() e0.3   <lgl$->
  lgl$#-          %409.1 = IsType                   %409.0 isA lgl$-
  void                    Branch                   %409.1 -> BB411 (if true) | BB412 (if false)
BB410   <- [89]
  fs              %410.0 = FrameState         R     0x55de2dc4ca10+4367: [], env=e0.3
  void                    Deopt              !v    %410.0, CallTarget@0x55de2d7bb0f0[Call#108], %89.4   !
BB202   <- [200]
  void                    StVar              lW    i, %200.1, e0.3
  int$#-          %202.1 = Add                d     %200.1, 1L, elided
  val?^ | miss    %202.2 = LdVar              eR    getClass, e0.3
  lgl$#-          %202.3 = Identical                %202.2, function(Class, .Force=FALSE, where=.classEnv(|...
  void                    Branch                   %202.3 -> BB395 (if true) | BB396 (if false)
BB201   <- [200]
  void                    Nop                !     
  goto BB66
BB411   <- [409]
  lgl$-           %411.0 = CastType           d     dn %409.0
  lgl$#-          %411.1 = CheckTrueFalse     e     %411.0
  void                    Branch                   %411.1 -> BB175 (if true) | BB94 (if false)
BB412   <- [409]
  void                    Nop                !     
  val?            %412.1 = %409.0
  dr              %412.2 = Typecheck@0x55de2d7bb0f0[Type#304]
  goto BB92
BB395   <- [202]
  prom-           %395.0 = MkArg                    unboundValue, .findInheritedMethods[0x55de2de5a9b0]_p77, e0.3
  prom-           %395.1 = MkArg                    unboundValue, .findInheritedMethods[0x55de2de5a9b0]_p79, e0.3
  val?            %395.2 = StaticCall         !v    getClass[0x55de2b1b0b70](%395.0, true, %395.1) { 0 2n 1n } e0.3   <other>
  val?^ | miss    %395.3 = LdVar              eR    classDefs !upd, e0.3
  lgl$#-          %395.4 = IsType                   %395.3 isA val?~- | miss
  void                    Branch                   %395.4 -> BB397 (if true) | BB398 (if false)
BB396   <- [202]
  fs              %396.0 = FrameState         R     0x55de2dc4ca10+2927: [1L, %323.0, %200.1], env=e0.3
  void                    Deopt              !v    %396.0, CallTarget@0x55de2d7bb0f0[Call#67], %202.2   !
BB175   <- [411]
  (cls|spec|blt)  %175.0 = LdFun              !v    integer, e0.3
  fs              %175.1 = FrameState         R     0x55de2dc4ca10+4848: [%175.0], env=e0.3
  void                    Deopt              !v    %175.1, DeadCall@0x55de2d7bb0f0[Call#109], %175.0   !
BB94   <- [411]
  val?^ | miss    %94.0 = LdVar              eR    doExcluded, e0.3
  lgl$#-          %94.1 = IsType                   %94.0 isA lgl$-
  void                    Branch                   %94.1 -> BB415 (if true) | BB416 (if false)
BB92   <- [412, 416, 424, 432, 434, 436, 440]
  val?^ | miss    %92.0 = Phi                      %412.1:BB412, %416.1:BB416, %424.1:BB424, %432.1:BB432, %434.1:BB434, %436.1:BB436, %440.1:BB440
  val?^ | miss    %92.1 = %92.0
  dr              %92.2 = Phi                      %412.2:BB412, %416.2:BB416, %424.2:BB424, %432.2:BB432, %434.2:BB434, %436.2:BB436, %440.2:BB440
  dr              %92.3 = %92.2
  fs              %92.4 = FrameState         R     0x55de2dc4ca10+4827: [%409.0], env=e0.3
  void                    Deopt              !v    %92.4, %92.3, %92.1   !
BB397   <- [395]
  val?~- | miss   %397.0 = CastType           d     dn %395.3
  val?-           %397.1 = Force!<value>            %397.0,    <vec->
  val?^ | miss    %397.2 = LdVar              eR    i, e0.3
  lgl$#-          %397.3 = IsType                   %397.2 isA int$-
  void                    Branch                   %397.3 -> BB399 (if true) | BB400 (if false)
BB398   <- [395]
  void                    Nop                !     
  val?^ | miss    %398.1 = %395.3
  dr              %398.2 = Typecheck@0x55de2d7bb0f0[Type#201]
  goto BB205
BB415   <- [94]
  lgl$-           %415.0 = CastType           d     dn %94.0
  lgl$#-          %415.1 = CheckTrueFalse     e     %415.0
  void                    Branch                   %415.1 -> BB168 (if true) | BB95 (if false)
BB416   <- [94]
  void                    Nop                !     
  val?^ | miss    %416.1 = %94.0
  dr              %416.2 = Typecheck@0x55de2d7bb0f0[Type#363]
  goto BB92
BB399   <- [397]
  int$-           %399.0 = CastType           d     dn %397.2
  val?            %399.1 = Subassign2_1D      !v    %395.2, %397.1, %399.0, e0.3
  void                    StVar              lW    classDefs, %399.1, e0.3
  void                    StVar              lW    cc, %395.2, e0.3
  lgl$-           %399.4 = Missing            eR    useInherited, e0.3
  lgl$-           %399.5 = AsLogical                %399.4
  lgl$#-          %399.6 = Identical                %399.5, true
  void                    Branch                   %399.6 -> BB224 (if true) | BB207 (if false)
BB400   <- [397]
  void                    Nop                !     
  val?^ | miss    %400.1 = %397.2
  dr              %400.2 = Typecheck@0x55de2d7bb0f0[Type#202]
  goto BB205
BB205   <- [398, 400]
  val?^ | miss    %205.0 = Phi                      %398.1:BB398, %400.1:BB400
  val?^ | miss    %205.1 = %205.0
  dr              %205.2 = Phi                      %398.2:BB398, %400.2:BB400
  dr              %205.3 = %205.2
  fs              %205.4 = FrameState         R     0x55de2dc4ca10+2988: [1L, %323.0, %202.1, %395.2], env=e0.3
  void                    Deopt              !v    %205.4, %205.3, %205.1   !
BB168   <- [415]
  val?^ | miss    %168.0 = LdVar              eR    methods, e0.3
  lgl$#-          %168.1 = IsType                   %168.0 isA val?~+ | miss
  void                    Branch                   %168.1 -> BB423 (if true) | BB424 (if false)
BB95   <- [415]
  void                    Nop                !     
  goto BB96
BB224   <- [399]
  void                    Nop                !     
  lgl$-           %224.1 = %399.5
  goto BB210
BB207   <- [399]
  val?^ | miss    %207.0 = LdVar              eR    useInherited, e0.3
  val?            %207.1 = Force!             !v    %207.0, e0.3   <val?_>
  lgl$#-          %207.2 = IsType                   %207.1 isA val+   <@?>
  void                    Branch                   %207.2 -> BB223 (if true) | BB208 (if false)
BB423   <- [168]
  val?~+ | miss   %423.0 = CastType           d     dn %168.0
  val?+           %423.1 = Force!<value>            %423.0,    <vec$+>
  lgl$#-          %423.2 = IsType                   %423.1 isA val+   <true>
  void                    Branch                   %423.2 -> BB431 (if true) | BB432 (if false)
BB424   <- [168]
  void                    Nop                !     
  val?^ | miss    %424.1 = %168.0
  dr              %424.2 = Typecheck@0x55de2d7bb0f0[Type#376]
  goto BB92
BB96   <- [95, 453]
  val?^ | miss    %96.0 = LdVar              eR    length, e0.3
  lgl$#-          %96.1 = Identical                <blt length>, %96.0   <true>
  void                    Branch                   %96.1 -> BB437 (if true) | BB438 (if false)
BB210   <- [224, 209]
  lgl$-           %210.0 = Phi                      %209.5:BB209, %224.1:BB224
  lgl$-           %210.1 = %210.0
  lgl$#-          %210.2 = CheckTrueFalse     e     %210.1
  void                    Branch                   %210.2 -> BB214 (if true) | BB213 (if false)
BB223   <- [207]
  val?^ | miss    %223.0 = LdVar              eR    i, e0.3
  val?            %223.1 = Force!             !v    %223.0, e0.3   <val?_>
  val?            %223.2 = %223.1
  goto BB209
BB208   <- [207]
  prom-           %208.0 = MkArg                    unboundValue, .findInheritedMethods[0x55de2de5a9b0]_p88, e0.3
  prom-           %208.1 = %208.0
  goto BB209
BB431   <- [423]
  val?^ | miss    %431.0 = LdVar              eR    is.na, e0.3
  lgl$#-          %431.1 = Identical                <blt is.na>, %431.0   <true>
  void                    Branch                   %431.1 -> BB433 (if true) | BB434 (if false)
BB432   <- [423]
  void                    Nop                !     
  lgl$#-          %432.1 = %423.2
  dr              %432.2 = DeadBranchReached@0x55de2d7bb0f0[Test#48]
  goto BB92
BB437   <- [96]
  val?^ | miss    %437.0 = LdVar              eR    methods, e0.3
  lgl$#-          %437.1 = IsType                   %437.0 isA val?~+ | miss
  void                    Branch                   %437.1 -> BB441 (if true) | BB442 (if false)
BB438   <- [96]
  void                    Nop                !     
  lgl$#-          %438.1 = %96.1
  dr              %438.2 = DeadBranchReached@0x55de2d7bb0f0[Test#50]
  goto BB97
BB214   <- [210]
  val?^ | miss    %214.0 = LdVar              eR    c, e0.3
  lgl$#-          %214.1 = Identical                <blt c>, %214.0   <true>
  void                    Branch                   %214.1 -> BB403 (if true) | BB404 (if false)
BB213   <- [210]
  (cls|spec|blt)  %213.0 = LdFun              !v    @, e0.3
  fs              %213.1 = FrameState         R     0x55de2dc4ca10+3135: [1L, %323.0, %202.1, %213.0], env=e0.3
  void                    Deopt              !v    %213.1, DeadCall@0x55de2d7bb0f0[Call#68], %213.0   !
BB209   <- [208, 223]
  val?            %209.0 = Phi                      %223.2:BB223, %208.1:BB208
  val?            %209.1 = %209.0
  val?            %209.2 = Extract2_1D        !v    %207.1, %209.1, e0.3   <val?_>
  lgl$-           %209.3 = AsLogical          e     %209.2
  lgl$-           %209.4 = LOr                      %399.5, %209.3
  lgl$-           %209.5 = %209.4
  goto BB210
BB433   <- [431]
  val?^ | miss    %433.0 = LdVar              eR    match, e0.3
  lgl$#-          %433.1 = Identical                %433.0, function(x, table, nomatch=NA, incomparables=N|...
  void                    Branch                   %433.1 -> BB435 (if true) | BB436 (if false)
BB434   <- [431]
  void                    Nop                !     
  lgl$#-          %434.1 = %431.1
  dr              %434.2 = DeadBranchReached@0x55de2d7bb0f0[Test#49]
  goto BB92
BB441   <- [437]
  val?~+ | miss   %441.0 = CastType           d     dn %437.0
  val?+           %441.1 = Force!<value>            %441.0,    <vec+>
  (int|real)$-    %441.2 = CallSafeBuiltin    wed   length(%441.1)    <int$->
  lgl$#-          %441.3 = IsType                   %441.2 isA int$-
  void                    Branch                   %441.3 -> BB445 (if true) | BB446 (if false)
BB442   <- [437]
  void                    Nop                !     
  val?^ | miss    %442.1 = %437.0
  dr              %442.2 = Typecheck@0x55de2d7bb0f0[Type#384]
  goto BB97
BB97   <- [438, 442]
  val?^ | miss    %97.0 = Phi                      %438.1:BB438, %442.1:BB442
  val?^ | miss    %97.1 = %97.0
  dr              %97.2 = Phi                      %438.2:BB438, %442.2:BB442
  dr              %97.3 = %97.2
  fs              %97.4 = FrameState         R     0x55de2dc4ca10+6458: [], env=e0.3
  void                    Deopt              !v    %97.4, %97.3, %97.1   !
BB403   <- [214]
  (cls|spec|blt)  %403.0 = LdFun              !v    @, <0x55de2854ebd8>, e0.3
  prom-           %403.1 = MkArg                    unboundValue, .findInheritedMethods[0x55de2de5a9b0]_p80, e0.3
  prom-           %403.2 = MkArg                    unboundValue, .findInheritedMethods[0x55de2de5a9b0]_p81, e0.3
  val?            %403.3 = Call               !v    %403.0(%403.1, %403.2) e0.3   <str$->
  val?^ | miss    %403.4 = LdVar              eR    .eligibleSuperClasses, e0.3
  lgl$#-          %403.5 = Identical                %403.4, function(contains, simpleOnly) <(rir::Dispatch|...
  void                    Branch                   %403.5 -> BB407 (if true) | BB408 (if false)
BB404   <- [214]
  fs              %404.0 = FrameState         R     0x55de2dc4ca10+3124: [1L, %323.0, %202.1, %210.1], env=e0.3
  void                    Deopt              !v    %404.0, DeadBranchReached@0x55de2d7bb0f0[Test#24], %214.1   !
BB435   <- [433]
  val?^ | miss    %435.0 = LdVar              eR    names, e0.3
  lgl$#-          %435.1 = Identical                %435.0, <blt names>
  void                    Branch                   %435.1 -> BB439 (if true) | BB440 (if false)
BB436   <- [433]
  void                    Nop                !     
  val?^ | miss    %436.1 = %433.0
  dr              %436.2 = CallTarget@0x55de2d7bb0f0[Call#129]
  goto BB92
BB445   <- [441]
  int$-           %445.0 = CastType           d     dn %441.2
  lgl$-           %445.1 = Gt                 d     %445.0, 1L, elided   <lgl$->
  lgl$#-          %445.2 = CheckTrueFalse     e     %445.1
  void                    Branch                   %445.2 -> BB155 (if true) | BB101 (if false)
BB446   <- [441]
  void                    Nop                !     
  (int|real)$-    %446.1 = %441.2
  dr              %446.2 = Typecheck@0x55de2d7bb0f0[Type#385]
  goto BB99
BB407   <- [403]
  prom-           %407.0 = MkArg                    unboundValue, .findInheritedMethods[0x55de2de5a9b0]_p82, e0.3
  prom-           %407.1 = MkArg                    unboundValue, .findInheritedMethods[0x55de2de5a9b0]_p85, e0.3
  val?            %407.2 = StaticCall         !v    .eligibleSuperClasses[0x55de2f698490](%407.0, %407.1) e0.3   <str->
  lgl$#-          %407.3 = IsType                   %407.2 isA val?-
  lgl$#-          %407.4 = IsType                   %403.3 isA val?-
  void                    Branch                   %407.4 -> BB413 (if true) | BB414 (if false)
BB408   <- [403]
  fs              %408.0 = FrameState         R     0x55de2dc4ca10+3284: [1L, %323.0, %202.1, <blt c>, %403.3], env=e0.3
  void                    Deopt              !v    %408.0, CallTarget@0x55de2d7bb0f0[Call#74], %403.4   !
BB439   <- [435]
  val+            %439.0 = CallSafeBuiltin    wed   names(%423.1)    <str$->
  val?^ | miss    %439.1 = LdVar              eR    as.character, e0.3
  lgl$#-          %439.2 = Identical                %439.1, <blt as.character>
  void                    Branch                   %439.2 -> BB443 (if true) | BB444 (if false)
BB440   <- [435]
  void                    Nop                !     
  val?^ | miss    %440.1 = %435.0
  dr              %440.2 = CallTarget@0x55de2d7bb0f0[Call#130]
  goto BB92
BB155   <- [445]
  val?^ | miss    %155.0 = LdVar              eR    paste, e0.3
  lgl$#-          %155.1 = Identical                %155.0, function(..., sep=" ", collapse=NULL, recycle0|...
  void                    Branch                   %155.1 -> BB447 (if true) | BB448 (if false)
BB101   <- [445]
  void                    Nop                !     
  goto BB102
BB99   <- [446, 448]
  val?^ | miss    %99.0 = Phi                      %446.1:BB446, %448.1:BB448
  val?^ | miss    %99.1 = %99.0
  dr              %99.2 = Phi                      %446.2:BB446, %448.2:BB448
  dr              %99.3 = %99.2
  fs              %99.4 = FrameState         R     0x55de2dc4ca10+6549: [%441.2], env=e0.3
  void                    Deopt              !v    %99.4, %99.3, %99.1   !
BB413   <- [407]
  val?-           %413.0 = CastType           d     dn %403.3   <str$->
  void                    Branch                   %407.3 -> BB417 (if true) | BB418 (if false)
BB414   <- [407]
  void                    Nop                !     
  val?            %414.1 = %403.3
  dr              %414.2 = Typecheck@0x55de2d7bb0f0[Type#220]
  goto BB217
BB443   <- [439]
  val?^ | miss    %443.0 = LdVar              eR    excluded, e0.3
  val?            %443.1 = Force!<wrapped>    !v    %443.0, e0.3   <str$->
  val?            %443.2 = CallBuiltin        !v    as.character(%443.1) e0.3   <str$->
  lgl$#-          %443.3 = IsType                   %443.2 isA val?-
  void                    Branch                   %443.3 -> BB449 (if true) | BB450 (if false)
BB444   <- [439]
  fs              %444.0 = FrameState         R     0x55de2dc4ca10+6415: [%423.1, <blt is.na>], env=e0.3
  prom-           %444.1 = MkArg                    unboundValue, .findInheritedMethods[0x55de2de5a9b0]_p64, e0.3
  val?^           %444.2 = CastType                 up %444.1
  prom-           %444.3 = MkArg                    unboundValue, .findInheritedMethods[0x55de2de5a9b0]_p62, e0.3
  val?^           %444.4 = CastType                 up %444.3
  env             e444.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%444.2, x=%444.4, parent=R_BaseNamespace, context 0
  fs              %444.6 = FrameState         R     0x55de28d63d40+9: [], env=e444.5, next=%444.0
  fs              %444.7 = FrameState         R     0x55de2bf2c6f0+32(pr): [%439.0], env=e0.3, next=%444.6
  void                    Deopt              !v    %444.7, CallTarget@0x55de2d7bb0f0[Call#131], %439.1   !
BB447   <- [155]
  prom-           %447.0 = MkArg                    unboundValue, .findInheritedMethods[0x55de2de5a9b0]_p57, e0.3
  dots-           %447.1 = DotsList           l     %447.0
  val?^ | miss    %447.2 = CastType                 up %447.0
  env             e447.3 = MkEnv              l     ...=%447.1, sep(miss)=" ", collapse="#", recycle0(miss)=false, parent=R_BaseNamespace, context 0
  val?            %447.4 = Force!             !vL   %447.2, e447.3
  val+            %447.5 = CallSafeBuiltin    wed   list(%447.4)    <vec->
  val+            %447.6 = CallSafeBuiltin    wed   paste(%447.5, " ", "#", false)    <str$->
  void                    StVar              lW    defaultLabel, %447.6, e0.3
  val?^ | miss    %447.8 = LdVar              eR    match, e0.3
  lgl$#-          %447.9 = Identical                %447.8, function(x, table, nomatch=NA, incomparables=N|...
  void                    Branch                   %447.9 -> BB451 (if true) | BB452 (if false)
BB448   <- [155]
  void                    Nop                !     
  val?^ | miss    %448.1 = %155.0
  dr              %448.2 = CallTarget@0x55de2d7bb0f0[Call#133]
  goto BB99
BB102   <- [101, 164, 481]
  val?^ | miss    %102.0 = LdVar              eR    length, e0.3
  lgl$#-          %102.1 = Identical                <blt length>, %102.0   <true>
  void                    Branch                   %102.1 -> BB455 (if true) | BB456 (if false)
BB417   <- [413]
  val?-           %417.0 = CastType           d     dn %407.2   <str->
  (list|sym|char|lgl|int|real|str|vec|complex|raw|cls|spec|blt|prom|_|code|env|ast|expressions|dots|other)+ %417.1 = CallSafeBuiltin    wed   c(%413.0, %417.0, "ANY")    <str->
  void                    StVar              lW    allLabels, %417.1, e0.3
  val?^ | miss    %417.3 = LdVar              eR    outerLabels, e0.3
  lgl$#-          %417.4 = Identical                %417.3, function(labels, new) <(rir::DispatchTable*)0x|...
  void                    Branch                   %417.4 -> BB419 (if true) | BB420 (if false)
BB418   <- [413]
  void                    Nop                !     
  val?            %418.1 = %407.2
  dr              %418.2 = Typecheck@0x55de2d7bb0f0[Type#225]
  goto BB217
BB217   <- [414, 418]
  val?^ | miss    %217.0 = Phi                      %414.1:BB414, %418.1:BB418
  val?^ | miss    %217.1 = %217.0
  dr              %217.2 = Phi                      %414.2:BB414, %418.2:BB418
  dr              %217.3 = %217.2
  fs              %217.4 = FrameState         R     0x55de2dc4ca10+3326: [1L, %323.0, %202.1, <blt c>, %403.3, %407.2], env=e0.3
  void                    Deopt              !v    %217.4, %217.3, %217.1   !
BB449   <- [443]
  val?-           %449.0 = CastType           d     dn %443.2   <str$->
  val+            %449.1 = CallSafeBuiltin    wed   match(%439.0, %449.0, NA, nil)    <int$->
  lgl$#-          %449.2 = IsType                   %449.1 isA int$-
  void                    Branch                   %449.2 -> BB453 (if true) | BB454 (if false)
BB450   <- [443]
  fs              %450.0 = FrameState         R     0x55de2dc4ca10+6415: [%423.1, <blt is.na>], env=e0.3
  prom-           %450.1 = MkArg                    unboundValue, .findInheritedMethods[0x55de2de5a9b0]_p64, e0.3
  val?^           %450.2 = CastType                 up %450.1
  prom-           %450.3 = MkArg                    %439.0, .findInheritedMethods[0x55de2de5a9b0]_p62 (!refl), e0.3
  val?~           %450.4 = CastType                 up %450.3
  env             e450.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%450.2, x=%450.4, parent=R_BaseNamespace, context 0
  fs              %450.6 = FrameState         R     0x55de28d63d40+23: [%439.0], env=e450.5, next=%450.0
  fs              %450.7 = FrameState         R     0x55de2e62ddd0+32(pr): [%443.2], env=e0.3, next=%450.6
  void                    Deopt              !v    %450.7, Typecheck@0x55de28db6cb0[Type#1], %443.2   !
BB451   <- [447]
  val?^ | miss    %451.0 = LdVar              eR    names, e0.3
  lgl$#-          %451.1 = Identical                %451.0, <blt names>
  void                    Branch                   %451.1 -> BB457 (if true) | BB458 (if false)
BB452   <- [447]
  void                    Nop                !     
  val?^ | miss    %452.1 = %447.8
  dr              %452.2 = CallTarget@0x55de2d7bb0f0[Call#135]
  goto BB156
BB455   <- [102]
  val?^ | miss    %455.0 = LdVar              eR    methods, e0.3
  lgl$#-          %455.1 = IsType                   %455.0 isA val?~+ | miss
  void                    Branch                   %455.1 -> BB459 (if true) | BB460 (if false)
BB456   <- [102]
  void                    Nop                !     
  lgl$#-          %456.1 = %102.1
  dr              %456.2 = DeadBranchReached@0x55de2d7bb0f0[Test#53]
  goto BB103
BB419   <- [417]
  prom-           %419.0 = MkArg                    unboundValue, .findInheritedMethods[0x55de2de5a9b0]_p86, e0.3
  prom-           %419.1 = MkArg                    unboundValue, .findInheritedMethods[0x55de2de5a9b0]_p87 (!refl), e0.3
  val?            %419.2 = StaticCall         !v    outerLabels[0x55de2d663b80](%419.0, %419.1) e0.3   <str->
  void                    StVar              lW    labels, %419.2, e0.3
  val?^ | miss    %419.4 = LdVar              eR    c, e0.3
  lgl$#-          %419.5 = Identical                <blt c>, %419.4   <true>
  void                    Branch                   %419.5 -> BB421 (if true) | BB422 (if false)
BB420   <- [417]
  fs              %420.0 = FrameState         R     0x55de2dc4ca10+3368: [1L, %323.0, %202.1], env=e0.3
  void                    Deopt              !v    %420.0, CallTarget@0x55de2d7bb0f0[Call#76], %417.3   !
BB453   <- [449]
  int$-           %453.0 = CastType           d     dn %449.1
  lgl$-           %453.1 = CallSafeBuiltin    wed   is.na(%453.0)    <lgl$->
  val?            %453.2 = Extract1_1D        wed   %423.1, %453.1, elided   <vec$+>
  void                    StVar              lW    methods, %453.2, e0.3
  goto BB96
BB454   <- [449]
  fs              %454.0 = FrameState         R     0x55de2dc4ca10+6415: [%423.1, <blt is.na>], env=e0.3
  prom-           %454.1 = MkArg                    %449.0, .findInheritedMethods[0x55de2de5a9b0]_p64 (!refl), e0.3
  val?~           %454.2 = CastType                 up %454.1
  prom-           %454.3 = MkArg                    %439.0, .findInheritedMethods[0x55de2de5a9b0]_p62 (!refl), e0.3
  val?~           %454.4 = CastType                 up %454.3
  env             e454.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%454.2, x=%454.4, parent=R_BaseNamespace, context 0
  fs              %454.6 = FrameState         R     0x55de28d63d40+69: [%449.1], env=e454.5, next=%454.0
  void                    Deopt              !v    %454.6, Typecheck@0x55de2d7bb0f0[Type#380], %449.1   !
BB457   <- [451]
  val?^ | miss    %457.0 = LdVar              eR    methods, e0.3
  lgl$#-          %457.1 = IsType                   %457.0 isA val?~+ | miss
  void                    Branch                   %457.1 -> BB461 (if true) | BB462 (if false)
BB458   <- [451]
  void                    Nop                !     
  val?^ | miss    %458.1 = %451.0
  dr              %458.2 = CallTarget@0x55de2d7bb0f0[Call#136]
  goto BB156
BB156   <- [452, 458, 462]
  val?^ | miss    %156.0 = Phi                      %452.1:BB452, %458.1:BB458, %462.1:BB462
  val?^ | miss    %156.1 = %156.0
  dr              %156.2 = Phi                      %452.2:BB452, %458.2:BB458, %462.2:BB462
  dr              %156.3 = %156.2
  fs              %156.4 = FrameState         R     0x55de2dc4ca10+6636: [], env=e0.3
  void                    Deopt              !v    %156.4, %156.3, %156.1   !
BB459   <- [455]
  val?~+ | miss   %459.0 = CastType           d     dn %455.0
  val?+           %459.1 = Force!<value>            %459.0,    <vec+>
  (int|real)$-    %459.2 = CallSafeBuiltin    wed   length(%459.1)    <int$->
  lgl$#-          %459.3 = IsType                   %459.2 isA int$-
  void                    Branch                   %459.3 -> BB463 (if true) | BB464 (if false)
BB460   <- [455]
  void                    Nop                !     
  val?^ | miss    %460.1 = %455.0
  dr              %460.2 = Typecheck@0x55de2d7bb0f0[Type#405]
  goto BB103
BB103   <- [456, 460]
  val?^ | miss    %103.0 = Phi                      %456.1:BB456, %460.1:BB460
  val?^ | miss    %103.1 = %103.0
  dr              %103.2 = Phi                      %456.2:BB456, %460.2:BB460
  dr              %103.3 = %103.2
  fs              %103.4 = FrameState         R     0x55de2dc4ca10+6881: [], env=e0.3
  void                    Deopt              !v    %103.4, %103.3, %103.1   !
BB421   <- [419]
  val?^ | miss    %421.0 = LdVar              eR    supersList, e0.3
  lgl$#-          %421.1 = IsType                   %421.0 isA val?~- | miss
  void                    Branch                   %421.1 -> BB425 (if true) | BB426 (if false)
BB422   <- [419]
  void                    Nop                !     
  lgl$#-          %422.1 = %419.5
  dr              %422.2 = DeadBranchReached@0x55de2d7bb0f0[Test#25]
  goto BB221
BB461   <- [457]
  val?~+ | miss   %461.0 = CastType           d     dn %457.0
  val?+           %461.1 = Force!<value>            %461.0,    <vec+>
  val+            %461.2 = CallSafeBuiltin    wed   names(%461.1)    <str->
  lgl$#-          %461.3 = IsType                   %461.2 isA val?-
  lgl$#-          %461.4 = IsType                   %447.6 isA val?-
  void                    Branch                   %461.4 -> BB465 (if true) | BB466 (if false)
BB462   <- [457]
  void                    Nop                !     
  val?^ | miss    %462.1 = %457.0
  dr              %462.2 = Typecheck@0x55de2d7bb0f0[Type#391]
  goto BB156
BB463   <- [459]
  int$-           %463.0 = CastType           d     dn %459.2
  lgl$-           %463.1 = Gt                 d     %463.0, 1L, elided   <lgl$->
  lgl$#-          %463.2 = CheckTrueFalse     e     %463.1
  void                    Branch                   %463.2 -> BB148 (if true) | BB107 (if false)
BB464   <- [459]
  fs              %464.0 = FrameState         R     0x55de2dc4ca10+6972: [%459.2], env=e0.3
  void                    Deopt              !v    %464.0, Typecheck@0x55de2d7bb0f0[Type#406], %459.2   !
BB425   <- [421]
  val?~- | miss   %425.0 = CastType           d     dn %421.0
  val?-           %425.1 = Force!<value>            %425.0,    <vec->
  val?^ | miss    %425.2 = LdVar              eR    list, e0.3
  lgl$#-          %425.3 = Identical                <blt list>, %425.2   <true>
  void                    Branch                   %425.3 -> BB427 (if true) | BB428 (if false)
BB426   <- [421]
  void                    Nop                !     
  val?^ | miss    %426.1 = %421.0
  dr              %426.2 = Typecheck@0x55de2d7bb0f0[Type#233]
  goto BB221
BB221   <- [422, 426, 428, 430]
  val?^ | miss    %221.0 = Phi                      %422.1:BB422, %426.1:BB426, %428.1:BB428, %430.1:BB430
  val?^ | miss    %221.1 = %221.0
  dr              %221.2 = Phi                      %422.2:BB422, %426.2:BB426, %428.2:BB428, %430.2:BB430
  dr              %221.3 = %221.2
  fs              %221.4 = FrameState         R     0x55de2dc4ca10+3419: [1L, %323.0, %202.1], env=e0.3
  void                    Deopt              !v    %221.4, %221.3, %221.1   !
BB465   <- [461]
  val-            %465.0 = CastType           d     dn %447.6   <str$->
  void                    Branch                   %461.3 -> BB467 (if true) | BB468 (if false)
BB466   <- [461]
  void                    Nop                !     
  val+            %466.1 = %447.6
  dr              %466.2 = Typecheck@0x55de2d7bb0f0[Type#389]
  goto BB158
BB148   <- [463]
  val?^ | miss    %148.0 = LdVar              eR    verbose, e0.3
  val?            %148.1 = Force!<wrapped>    !v    %148.0, e0.3   <lgl$->
  lgl$#-          %148.2 = CheckTrueFalse     we    %148.1
  void                    Branch                   %148.2 -> BB154 (if true) | BB149 (if false)
BB107   <- [463]
  void                    Nop                !     
  goto BB108
BB427   <- [425]
  val?^ | miss    %427.0 = LdVar              eR    allLabels, e0.3
  lgl$#-          %427.1 = IsType                   %427.0 isA val?~- | miss
  void                    Branch                   %427.1 -> BB429 (if true) | BB430 (if false)
BB428   <- [425]
  void                    Nop                !     
  lgl$#-          %428.1 = %425.3
  dr              %428.2 = DeadBranchReached@0x55de2d7bb0f0[Test#26]
  goto BB221
BB467   <- [465]
  val-            %467.0 = CastType           d     dn %461.2   <str->
  val+            %467.1 = CallSafeBuiltin    wed   match(%465.0, %467.0, 0L, nil)    <int$->
  lgl$#-          %467.2 = IsType                   %467.1 isA int$-
  void                    Branch                   %467.2 -> BB469 (if true) | BB470 (if false)
BB468   <- [465]
  void                    Nop                !     
  val+            %468.1 = %461.2
  dr              %468.2 = Typecheck@0x55de28db6cb0[Type#1]
  goto BB158
BB158   <- [466, 468]
  val?^ | miss    %158.0 = Phi                      %466.1:BB466, %468.1:BB468
  val?^ | miss    %158.1 = %158.0
  dr              %158.2 = Phi                      %466.2:BB466, %468.2:BB468
  dr              %158.3 = %158.2
  fs              %158.4 = FrameState         R     0x55de2dc4ca10+6678: [], env=e0.3
  prom-           %158.5 = MkArg                    unboundValue, .findInheritedMethods[0x55de2de5a9b0]_p60, e0.3
  val?^           %158.6 = CastType                 up %158.5
  prom-           %158.7 = MkArg                    unboundValue, .findInheritedMethods[0x55de2de5a9b0]_p59 (!refl), e0.3
  val?^           %158.8 = CastType                 up %158.7
  env             e158.9 = (MkEnv)            l     incomparables(miss)=nil, nomatch=0L, table=%158.6, x=%158.8, parent=R_BaseNamespace, context 0
  fs              %158.10 = FrameState         R     0x55de28d63d40+23: [%447.6], env=e158.9, next=%158.4
  fs              %158.11 = FrameState         R     0x55de2bb33550+32(pr): [%461.2], env=e0.3, next=%158.10
  void                    Deopt              !v    %158.11, %158.3, %158.1   !
BB154   <- [148]
  (cls|spec|blt)  %154.0 = LdFun              !v    cat, e0.3
  fs              %154.1 = FrameState         R     0x55de2dc4ca10+7030: [%154.0], env=e0.3
  void                    Deopt              !v    %154.1, DeadCall@0x55de2d7bb0f0[Call#138], %154.0   !
BB149   <- [148]
  (cls|spec|blt)  %149.0 = LdFun              !v    .getBestMethods, <0x55de34dd0520>, e0.3
  prom-           %149.1 = MkArg                    unboundValue, .findInheritedMethods[0x55de2de5a9b0]_p53, e0.3
  prom-           %149.2 = MkArg                    unboundValue, .findInheritedMethods[0x55de2de5a9b0]_p54, e0.3
  prom-           %149.3 = MkArg                    unboundValue, .findInheritedMethods[0x55de2de5a9b0]_p55, e0.3
  prom-           %149.4 = MkArg                    unboundValue, .findInheritedMethods[0x55de2de5a9b0]_p56, e0.3
  val?            %149.5 = NamedCall          !v    %149.0(%149.1, %149.2, %149.3, verbose=%149.4) e0.3   <int$->
  lgl$#-          %149.6 = IsType                   %149.5 isA int$-
  void                    Branch                   %149.6 -> BB471 (if true) | BB472 (if false)
BB108   <- [107, 491]
  val?^ | miss    %108.0 = LdVar              eR    simpleOnly, e0.3
  val?            %108.1 = Force!<wrapped>    !v    %108.0, e0.3   <lgl$->
  lgl$-           %108.2 = AsLogical          e     %108.1
  lgl$#-          %108.3 = Identical                %108.2, false
  void                    Branch                   %108.3 -> BB147 (if true) | BB111 (if false)
BB429   <- [427]
  val?~- | miss   %429.0 = CastType           d     dn %427.0
  val?-           %429.1 = Force!<value>            %429.0,    <str->
  val+            %429.2 = CallSafeBuiltin    wed   list(%429.1)    <vec$->
  val+            %429.3 = CallSafeBuiltin    wed   c(%425.1, %429.2)    <vec->
  void                    StVar              lW    supersList, %429.3, e0.3
  int$#-          %429.5 = %202.1
  goto BB200
BB430   <- [427]
  void                    Nop                !     
  val?^ | miss    %430.1 = %427.0
  dr              %430.2 = Typecheck@0x55de2d7bb0f0[Type#235]
  goto BB221
BB469   <- [467]
  int$-           %469.0 = CastType           d     dn %467.1
  void                    StVar              lW    i, %469.0, e0.3
  lgl$-           %469.2 = Gt                 d     %469.0, 0L, elided   <lgl$->
  lgl$#-          %469.3 = CheckTrueFalse     e     %469.2
  void                    Branch                   %469.3 -> BB165 (if true) | BB164 (if false)
BB470   <- [467]
  fs              %470.0 = FrameState         R     0x55de2dc4ca10+6678: [], env=e0.3
  prom-           %470.1 = MkArg                    unboundValue, .findInheritedMethods[0x55de2de5a9b0]_p59 (!refl), e0.3
  val?^           %470.2 = CastType                 up %470.1
  prom-           %470.3 = MkArg                    %467.0, .findInheritedMethods[0x55de2de5a9b0]_p60 (!refl), e0.3
  val?~           %470.4 = CastType                 up %470.3
  env             e470.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch=0L, table=%470.4, x=%470.2, parent=R_BaseNamespace, context 0
  fs              %470.6 = FrameState         R     0x55de28d63d40+69: [%467.1], env=e470.5, next=%470.0
  void                    Deopt              !v    %470.6, Typecheck@0x55de2d7bb0f0[Type#393], %467.1   !
BB471   <- [149]
  int$-           %471.0 = CastType           d     dn %149.5
  void                    StVar              lW    select, %471.0, e0.3
  val?^ | miss    %471.2 = LdVar              eR    length, e0.3
  lgl$#-          %471.3 = Identical                <blt length>, %471.2   <true>
  void                    Branch                   %471.3 -> BB483 (if true) | BB484 (if false)
BB472   <- [149]
  fs              %472.0 = FrameState         R     0x55de2dc4ca10+7131: [%149.5], env=e0.3
  void                    Deopt              !v    %472.0, Typecheck@0x55de2d7bb0f0[Type#415], %149.5   !
BB147   <- [108]
  void                    Nop                !     
  lgl$-           %147.1 = %108.2
  goto BB114
BB111   <- [108]
  val?^ | miss    %111.0 = LdVar              eR    length, e0.3
  lgl$#-          %111.1 = Identical                <blt length>, %111.0   <true>
  void                    Branch                   %111.1 -> BB473 (if true) | BB474 (if false)
BB165   <- [469]
  lgl$#-          %165.0 = IsType                   %461.1 isA val+   <true>
  void                    Branch                   %165.0 -> BB479 (if true) | BB480 (if false)
BB164   <- [469]
  void                    Nop                !     
  goto BB102
BB483   <- [471]
  val?^ | miss    %483.0 = LdVar              eR    methods, e0.3
  lgl$#-          %483.1 = IsType                   %483.0 isA val?~+ | miss
  void                    Branch                   %483.1 -> BB489 (if true) | BB490 (if false)
BB484   <- [471]
  void                    Nop                !     
  lgl$#-          %484.1 = %471.3
  dr              %484.2 = DeadBranchReached@0x55de2d7bb0f0[Test#54]
  goto BB152
BB114   <- [147, 477]
  lgl$-           %114.0 = Phi                      %477.4:BB477, %147.1:BB147
  lgl$-           %114.1 = %114.0
  lgl$#-          %114.2 = CheckTrueFalse     e     %114.1
  void                    Branch                   %114.2 -> BB146 (if true) | BB117 (if false)
BB473   <- [111]
  val?^ | miss    %473.0 = LdVar              eR    methods, e0.3
  lgl$#-          %473.1 = IsType                   %473.0 isA val?~+ | miss
  void                    Branch                   %473.1 -> BB475 (if true) | BB476 (if false)
BB474   <- [111]
  void                    Nop                !     
  lgl$#-          %474.1 = %111.1
  dr              %474.2 = DeadBranchReached@0x55de2d7bb0f0[Test#57]
  goto BB109
BB479   <- [165]
  int$-           %479.0 = Minus              d     %469.0, elided
  val?            %479.1 = Extract1_1D        wed   %461.1, %479.0, elided   <vec+>
  void                    StVar              lW    methods, %479.1, e0.3
  val?^ | miss    %479.3 = LdVar              eR    fromGroup, e0.3
  lgl$#-          %479.4 = IsType                   %479.3 isA lgl-
  void                    Branch                   %479.4 -> BB481 (if true) | BB482 (if false)
BB480   <- [165]
  fs              %480.0 = FrameState         R     0x55de2dc4ca10+6692: [], env=e0.3
  void                    Deopt              !v    %480.0, DeadBranchReached@0x55de2d7bb0f0[Test#51], %165.0   !
BB489   <- [483]
  val?~+ | miss   %489.0 = CastType           d     dn %483.0
  val?+           %489.1 = Force!<value>            %489.0,    <vec+>
  lgl$#-          %489.2 = IsType                   %489.1 isA val+   <true>
  void                    Branch                   %489.2 -> BB491 (if true) | BB492 (if false)
BB490   <- [483]
  void                    Nop                !     
  val?^ | miss    %490.1 = %483.0
  dr              %490.2 = Typecheck@0x55de2d7bb0f0[Type#446]
  goto BB152
BB152   <- [484, 490, 492]
  val?^ | miss    %152.0 = Phi                      %484.1:BB484, %490.1:BB490, %492.1:BB492
  val?^ | miss    %152.1 = %152.0
  dr              %152.2 = Phi                      %484.2:BB484, %490.2:BB490, %492.2:BB492
  dr              %152.3 = %152.2
  fs              %152.4 = FrameState         R     0x55de2dc4ca10+7145: [], env=e0.3
  void                    Deopt              !v    %152.4, %152.3, %152.1   !
BB146   <- [114]
  (cls|spec|blt)  %146.0 = LdFun              !v    Recall, e0.3
  fs              %146.1 = FrameState         R     0x55de2dc4ca10+7866: [%146.0], env=e0.3
  void                    Deopt              !v    %146.1, DeadCall@0x55de2d7bb0f0[Call#154], %146.0   !
BB117   <- [114]
  val?^ | miss    %117.0 = LdVar              eR    length, e0.3
  lgl$#-          %117.1 = Identical                <blt length>, %117.0   <true>
  void                    Branch                   %117.1 -> BB485 (if true) | BB486 (if false)
BB475   <- [473]
  val?~+ | miss   %475.0 = CastType           d     dn %473.0
  val?+           %475.1 = Force!<value>            %475.0,    <vec$+>
  (int|real)$-    %475.2 = CallSafeBuiltin    wed   length(%475.1)    <int$->
  lgl$#-          %475.3 = IsType                   %475.2 isA int$-
  void                    Branch                   %475.3 -> BB477 (if true) | BB478 (if false)
BB476   <- [473]
  void                    Nop                !     
  val?^ | miss    %476.1 = %473.0
  dr              %476.2 = Typecheck@0x55de2d7bb0f0[Type#452]
  goto BB109
BB109   <- [474, 476]
  val?^ | miss    %109.0 = Phi                      %474.1:BB474, %476.1:BB476
  val?^ | miss    %109.1 = %109.0
  dr              %109.2 = Phi                      %474.2:BB474, %476.2:BB476
  dr              %109.3 = %109.2
  fs              %109.4 = FrameState         R     0x55de2dc4ca10+7728: [%108.1], env=e0.3
  void                    Deopt              !v    %109.4, %109.3, %109.1   !
BB481   <- [479]
  lgl-            %481.0 = CastType           d     dn %479.3
  lgl-            %481.1 = Extract1_1D        wed   %481.0, %479.0, elided   <lgl->
  void                    StVar              lW    fromGroup, %481.1, e0.3
  goto BB102
BB482   <- [479]
  fs              %482.0 = FrameState         R     0x55de2dc4ca10+6805: [], env=e0.3
  void                    Deopt              !v    %482.0, Typecheck@0x55de2d7bb0f0[Type#400], %479.3   !
BB491   <- [489]
  val?            %491.0 = Extract1_1D        wed   %489.1, %471.0, elided   <vec$+>
  void                    StVar              lW    methods, %491.0, e0.3
  goto BB108
BB492   <- [489]
  void                    Nop                !     
  lgl$#-          %492.1 = %489.2
  dr              %492.2 = DeadBranchReached@0x55de2d7bb0f0[Test#56]
  goto BB152
BB485   <- [117]
  val?^ | miss    %485.0 = LdVar              eR    methods, e0.3
  lgl$#-          %485.1 = IsType                   %485.0 isA val?~+ | miss
  void                    Branch                   %485.1 -> BB487 (if true) | BB488 (if false)
BB486   <- [117]
  void                    Nop                !     
  lgl$#-          %486.1 = %117.1
  dr              %486.2 = DeadBranchReached@0x55de2d7bb0f0[Test#59]
  goto BB115
BB477   <- [475]
  int$-           %477.0 = CastType           d     dn %475.2
  lgl$-           %477.1 = Eq                 d     %477.0, 0L, elided   <lgl$->
  lgl$-           %477.2 = AsLogical                %477.1
  lgl$-           %477.3 = LAnd                     %108.2, %477.2
  lgl$-           %477.4 = %477.3
  goto BB114
BB478   <- [475]
  fs              %478.0 = FrameState         R     0x55de2dc4ca10+7831: [%108.2, %475.2], env=e0.3
  void                    Deopt              !v    %478.0, Typecheck@0x55de2d7bb0f0[Type#453], %475.2   !
BB487   <- [485]
  val?~+ | miss   %487.0 = CastType           d     dn %485.0
  val?+           %487.1 = Force!<value>            %487.0,    <vec$+>
  (int|real)$-    %487.2 = CallSafeBuiltin    wed   length(%487.1)    <int$->
  lgl$#-          %487.3 = IsType                   %487.2 isA int$-
  void                    Branch                   %487.3 -> BB493 (if true) | BB494 (if false)
BB488   <- [485]
  void                    Nop                !     
  val?^ | miss    %488.1 = %485.0
  dr              %488.2 = Typecheck@0x55de2d7bb0f0[Type#474]
  goto BB115
BB115   <- [486, 488]
  val?^ | miss    %115.0 = Phi                      %486.1:BB486, %488.1:BB488
  val?^ | miss    %115.1 = %115.0
  dr              %115.2 = Phi                      %486.2:BB486, %488.2:BB488
  dr              %115.3 = %115.2
  fs              %115.4 = FrameState         R     0x55de2dc4ca10+7850: [%114.1], env=e0.3
  void                    Deopt              !v    %115.4, %115.3, %115.1   !
BB493   <- [487]
  int$-           %493.0 = CastType           d     dn %487.2
  lgl$#-          %493.1 = CheckTrueFalse     e     %493.0
  void                    Branch                   %493.1 -> BB124 (if true) | BB120 (if false)
BB494   <- [487]
  void                    Nop                !     
  (int|real)$-    %494.1 = %487.2
  dr              %494.2 = Typecheck@0x55de2d7bb0f0[Type#475]
  goto BB118
BB124   <- [493]
  val?^ | miss    %124.0 = LdVar              eR    .sigLabel, e0.3
  lgl$#-          %124.1 = Identical                %124.0, function(sig) <(rir::DispatchTable*)0x55de2b41|...
  void                    Branch                   %124.1 -> BB495 (if true) | BB496 (if false)
BB120   <- [493]
  void                    Nop                !     
  goto BB121
BB118   <- [494, 496, 498]
  val?^ | miss    %118.0 = Phi                      %494.1:BB494, %496.1:BB496, %498.1:BB498
  val?^ | miss    %118.1 = %118.0
  dr              %118.2 = Phi                      %494.2:BB494, %496.2:BB496, %498.2:BB498
  dr              %118.3 = %118.2
  fs              %118.4 = FrameState         R     0x55de2dc4ca10+8203: [%487.2], env=e0.3
  void                    Deopt              !v    %118.4, %118.3, %118.1   !
BB495   <- [124]
  prom-           %495.0 = MkArg                    unboundValue, .findInheritedMethods[0x55de2de5a9b0]_p32, e0.3
  val?^           %495.1 = CastType                 up %495.0
  val?^ | miss    %495.2 = LdVar              eR    paste, <env 0x55de28b56378>
  lgl$#-          %495.3 = Identical                %495.2, function(..., sep=" ", collapse=NULL, recycle0|...
  void                    Branch                   %495.3 -> BB497 (if true) | BB498 (if false)
BB496   <- [124]
  void                    Nop                !     
  val?^ | miss    %496.1 = %124.0
  dr              %496.2 = CallTarget@0x55de2d7bb0f0[Call#161]
  goto BB118
BB121   <- [120, 133, 513]
  val?^ | miss    %121.0 = LdVar              eR    methods, e0.3
  lgl$#-          %121.1 = IsType                   %121.0 isA val?~+ | miss
  void                    Branch                   %121.1 -> BB499 (if true) | BB500 (if false)
BB497   <- [495]
  env             e497.0 = MkEnv              l     sig=%495.1, parent=<env 0x55de28b56378>, context 0
  prom-           %497.1 = MkArg                    unboundValue, .findInheritedMethods[0x55de2de5a9b0]_p106, e497.0
  dots-           %497.2 = DotsList           l     %497.1
  val?^ | miss    %497.3 = CastType                 up %497.1
  env             e497.4 = MkEnv              l     ...=%497.2, sep(miss)=" ", collapse="#", recycle0(miss)=false, parent=R_BaseNamespace, context -1
  val?            %497.5 = Force!             !vL   %497.3, e497.4
  val+            %497.6 = CallSafeBuiltin    wed   list(%497.5)    <vec->
  val+            %497.7 = CallSafeBuiltin    wed   paste(%497.6, " ", "#", false)    <str$->
  void                    StVar              lW    tlabel, %497.7, e0.3
  val?^ | miss    %497.9 = LdVar              eR    methods, e0.3
  lgl$#-          %497.10 = IsType                   %497.9 isA val?~+ | miss
  void                    Branch                   %497.10 -> BB501 (if true) | BB502 (if false)
BB498   <- [495]
  void                    Nop                !     
  val?^ | miss    %498.1 = %495.2
  dr              %498.2 = CallTarget@0x55de2b0fcef8[Call#0]
  goto BB118
BB499   <- [121]
  val?~+ | miss   %499.0 = CastType           d     dn %121.0
  void                    Visible            v     
  val?+           %499.2 = Force!<value>            %499.0,    <vec$+>
  void                    Return             l     %499.2
BB500   <- [121]
  fs              %500.0 = FrameState         R     0x55de2dc4ca10+8774: [], env=e0.3
  void                    Deopt              !v    %500.0, Typecheck@0x55de2d7bb0f0[Type#509], %121.0   !
BB501   <- [497]
  val?~+ | miss   %501.0 = CastType           d     dn %497.9
  val?+           %501.1 = Force!<value>            %501.0,    <vec$+>
  lgl$#-          %501.2 = IsType                   %501.1 isA val+   <true>
  void                    Branch                   %501.2 -> BB503 (if true) | BB504 (if false)
BB502   <- [497]
  void                    Nop                !     
  val?^ | miss    %502.1 = %497.9
  dr              %502.2 = Typecheck@0x55de2d7bb0f0[Type#478]
  goto BB125
BB503   <- [501]
  val?            %503.0 = Extract2_1D        wed   %501.1, 1L, elided   <cls>
  void                    StVar              lW    m, %503.0, e0.3
  val?^ | miss    %503.2 = LdVar              eR    is, e0.3
  lgl$#-          %503.3 = Identical                %503.2, function(object, class2) <(rir::DispatchTable*|...
  void                    Branch                   %503.3 -> BB505 (if true) | BB506 (if false)
BB504   <- [501]
  void                    Nop                !     
  lgl$#-          %504.1 = %501.2
  dr              %504.2 = DeadBranchReached@0x55de2d7bb0f0[Test#60]
  goto BB125
BB125   <- [502, 504]
  val?^ | miss    %125.0 = Phi                      %502.1:BB502, %504.1:BB504
  val?^ | miss    %125.1 = %125.0
  dr              %125.2 = Phi                      %502.2:BB502, %504.2:BB504
  dr              %125.3 = %125.2
  fs              %125.4 = FrameState         R     0x55de2dc4ca10+8265: [], env=e0.3
  void                    Deopt              !v    %125.4, %125.3, %125.1   !
BB505   <- [503]
  prom-           %505.0 = MkArg                    unboundValue, .findInheritedMethods[0x55de2de5a9b0]_p33 (!refl), e0.3
  val?            %505.1 = Call               !v    function(object, class2) <(rir::DispatchTable*|...(%505.0, "MethodDefinition") e0.3   <lgl$->
  lgl$#-          %505.2 = IsType                   %505.1 isA lgl$-
  void                    Branch                   %505.2 -> BB507 (if true) | BB508 (if false)
BB506   <- [503]
  fs              %506.0 = FrameState         R     0x55de2dc4ca10+8332: [], env=e0.3
  void                    Deopt              !v    %506.0, CallTarget@0x55de2d7bb0f0[Call#162], %503.2   !
BB507   <- [505]
  lgl$-           %507.0 = CastType           d     dn %505.1
  lgl$#-          %507.1 = CheckTrueFalse     e     %507.0
  void                    Branch                   %507.1 -> BB139 (if true) | BB131 (if false)
BB508   <- [505]
  fs              %508.0 = FrameState         R     0x55de2dc4ca10+8369: [%505.1], env=e0.3
  void                    Deopt              !v    %508.0, Typecheck@0x55de2d7bb0f0[Type#481], %505.1   !
BB139   <- [507]
  (cls|spec|blt)  %139.0 = LdFun              !v    <-, <0x55de28543da8>, e0.3
  prom-           %139.1 = MkArg                    unboundValue, .findInheritedMethods[0x55de2de5a9b0]_p37, e0.3
  prom-           %139.2 = MkArg                    unboundValue, .findInheritedMethods[0x55de2de5a9b0]_p40, e0.3
  val?            %139.3 = Call               !v    %139.0(%139.1, %139.2) e0.3
  val?^ | miss    %139.4 = LdVar              eR    .inheritedArgsExpression, e0.3
  lgl$#-          %139.5 = Identical                %139.4, function(target, defined, body) <(rir::Dispatc|...
  void                    Branch                   %139.5 -> BB509 (if true) | BB510 (if false)
BB131   <- [507]
  void                    Nop                !     
  goto BB132
BB509   <- [139]
  prom-           %509.0 = MkArg                    unboundValue, .findInheritedMethods[0x55de2de5a9b0]_p45, e0.3
  prom-           %509.1 = MkArg                    unboundValue, .findInheritedMethods[0x55de2de5a9b0]_p48, e0.3
  prom-           %509.2 = MkArg                    unboundValue, .findInheritedMethods[0x55de2de5a9b0]_p51, e0.3
  val?            %509.3 = StaticCall         !v    .inheritedArgsExpression[0x55de34a9f350](%509.0, %509.1, %509.2) e0.3   <nil->
  lgl$-           %509.4 = Is                       %509.3, NULL
  void                    StVar              lW    coerce, %509.3, e0.3
  val             %509.6 = ChkMissing         e     %509.3
  lgl$-           %509.7 = Not                d     %509.4, elided
  lgl$#-          %509.8 = CheckTrueFalse     e     %509.7
  void                    Branch                   %509.8 -> BB145 (if true) | BB142 (if false)
BB510   <- [139]
  fs              %510.0 = FrameState         R     0x55de2dc4ca10+8422: [%139.3], env=e0.3
  void                    Deopt              !v    %510.0, CallTarget@0x55de2d7bb0f0[Call#167], %139.4   !
BB132   <- [131, 511]
  val?^ | miss    %132.0 = LdVar              eR    doCache, e0.3
  val?            %132.1 = Force!<lazy>       !v    %132.0, e0.3   <lgl$->
  lgl$#-          %132.2 = CheckTrueFalse     we    %132.1
  void                    Branch                   %132.2 -> BB134 (if true) | BB133 (if false)
BB145   <- [509]
  (cls|spec|blt)  %145.0 = LdFun              !v    body<-, e0.3
  fs              %145.1 = FrameState         R     0x55de2dc4ca10+8529: [%509.3, %145.0], env=e0.3
  void                    Deopt              !v    %145.1, DeadCall@0x55de2d7bb0f0[Call#171], %145.0   !
BB142   <- [509]
  val?^ | miss    %142.0 = LdVar              eR    m, e0.3
  val?            %142.1 = Force!<value>      !v    %142.0, e0.3   <cls>
  val?^ | miss    %142.2 = LdVar              eR    methods !upd, e0.3
  lgl$#-          %142.3 = IsType                   %142.2 isA val?~+ | miss
  void                    Branch                   %142.3 -> BB511 (if true) | BB512 (if false)
BB134   <- [132]
  val?^ | miss    %134.0 = LdVar              eR    verbose, e0.3
  val?            %134.1 = Force!<wrapped>    !v    %134.0, e0.3   <lgl$->
  lgl$#-          %134.2 = CheckTrueFalse     we    %134.1
  void                    Branch                   %134.2 -> BB138 (if true) | BB137 (if false)
BB133   <- [132]
  void                    Nop                !     
  goto BB121
BB511   <- [142]
  val?~+ | miss   %511.0 = CastType           d     dn %142.2
  val?+           %511.1 = Force!<value>            %511.0,    <vec$+>
  val?            %511.2 = Subassign2_1D      !v    %142.1, %511.1, 1L, e0.3
  void                    StVar              lW    methods, %511.2, e0.3
  goto BB132
BB512   <- [142]
  fs              %512.0 = FrameState         R     0x55de2dc4ca10+8601: [%142.1], env=e0.3
  void                    Deopt              !v    %512.0, Typecheck@0x55de2d7bb0f0[Type#503], %142.2   !
BB138   <- [134]
  (cls|spec|blt)  %138.0 = LdFun              !v    cat, e0.3
  fs              %138.1 = FrameState         R     0x55de2dc4ca10+8691: [%138.0], env=e0.3
  void                    Deopt              !v    %138.1, DeadCall@0x55de2d7bb0f0[Call#172], %138.0   !
BB137   <- [134]
  val?^ | miss    %137.0 = LdVar              eR    assign, e0.3
  lgl$#-          %137.1 = Identical                %137.0, function(x, value, pos=-(1), envir=as.environm|...
  void                    Branch                   %137.1 -> BB513 (if true) | BB514 (if false)
BB513   <- [137]
  prom-           %513.0 = MkArg                    unboundValue, .findInheritedMethods[0x55de2de5a9b0]_p34, e0.3
  prom-           %513.1 = MkArg                    unboundValue, .findInheritedMethods[0x55de2de5a9b0]_p35, e0.3
  prom-           %513.2 = MkArg                    unboundValue, .findInheritedMethods[0x55de2de5a9b0]_p36, e0.3
  val?            %513.3 = StaticCall         !v    assign[0x55de357cd400](%513.0, %513.1, missingArg, %513.2) { 0 1 3n } e0.3
  goto BB121
BB514   <- [137]
  fs              %514.0 = FrameState         R     0x55de2dc4ca10+8676: [%134.2], env=e0.3
  void                    Deopt              !v    %514.0, CallTarget@0x55de2d7bb0f0[Call#173], %137.0   !
Prom 0:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     get, <0x55de29474e78>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de2de5a9b0]_p1, e0.0
  val?            %0.3  = NamedCall          !     %0.1(".MTable", envir=%0.2) e0.0   <env->
  void                    Return             l     %0.3
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     environment, <0x55de288f5b68>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de2de5a9b0]_p2, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <env->
  void                    Return             l     %0.3
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fdef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 4:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     .simpleInheritanceGeneric, <0x55de2e251700>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de2de5a9b0]_p5, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <lgl$->
  void                    Return             l     %0.3
Prom 5:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fdef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 7:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     is.environment, <0x55de2855ee18>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de2de5a9b0]_p8, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <lgl$->
  void                    Return             l     %0.3
Prom 8:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    mtable, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <(nil|env)->
  void                    Return             l     %0.3
Prom 9:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     environment, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de2de5a9b0]_p10, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 10:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fdef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 11:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     .allowPrimitiveMethods, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de2de5a9b0]_p12, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 12:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    primMethods, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 13:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fdef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 14:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    group, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 15:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    cl1, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$+>
  void                    Return             l     %0.3
Prom 16:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 20:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    labels, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 21:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     .fillSignatures, <0x55de2e2533b8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de2de5a9b0]_p22, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x55de2de5a9b0]_p23, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <str->
  void                    Return             l     %0.4
Prom 22:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    allMethods, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 23:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     length, <0x55de2854fa90>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de2de5a9b0]_p24, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <int$->
  void                    Return             l     %0.3
Prom 24:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    classes, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <(str|vec)>
  void                    Return             l     %0.3
Prom 25:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    allMethods, e0.0
  val?            %0.2  = Force<value>       !v    %0.1, e0.0   <str->
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <true>
  void                    Branch                   %0.3 -> BB2 (if true) | BB7 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    m, e0.0
  val?            %2.1  = Force<value>       !v    %2.0, e0.0   <int->
  lgl$#-          %2.2  = IsType                   %2.1 isA val+   <true>
  void                    Branch                   %2.2 -> BB6 (if true) | BB3 (if false)
BB7   <- [0]
  prom-           %7.0  = MkArg                    unboundValue, .findInheritedMethods[0x55de2de5a9b0]_p27, e0.0
  prom-           %7.1  = %7.0
  goto BB5
BB6   <- [2]
  val?^ | miss    %6.0  = LdVar              eR    found, e0.0
  val?            %6.1  = Force<value>       !v    %6.0, e0.0   <lgl->
  val?            %6.2  = %6.1
  goto BB4
BB3   <- [2]
  prom-           %3.0  = MkArg                    unboundValue, .findInheritedMethods[0x55de2de5a9b0]_p26, e0.0
  prom-           %3.1  = %3.0
  goto BB4
BB5   <- [7, 4]
  val?            %5.0  = Phi                      %4.3:BB4, %7.1:BB7
  val?            %5.1  = %5.0
  val?            %5.2  = Extract1_1D        !v    %0.2, %5.1, e0.0   <str->
  void                    Visible            v     
  void                    Return             l     %5.2
BB4   <- [3, 6]
  val?            %4.0  = Phi                      %6.2:BB6, %3.1:BB3
  val?            %4.1  = %4.0
  val?            %4.2  = Extract1_1D        !v    %2.1, %4.1, e0.0   <int->
  val?            %4.3  = %4.2
  goto BB5
Prom 26:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    found, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 27:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    m, e0.0
  val?            %0.2  = Force              !v    %0.1, e0.0   <val?_>
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <@?>
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    found, e0.0
  val?            %2.1  = Force              !v    %2.0, e0.0   <val?_>
  val?            %2.2  = %2.1
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, .findInheritedMethods[0x55de2de5a9b0]_p28, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.2:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract1_1D        !v    %0.2, %3.1, e0.0   <val?_>
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 28:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    found, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 29:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    table, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 30:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     length, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de2de5a9b0]_p31, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 31:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    methods, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 32:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    classes, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <(str|vec)>
  void                    Return             l     %0.3
Prom 33:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    m, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 34:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    tlabel, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 35:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    m, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 36:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    mtable, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 37:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de2de5a9b0]_p38, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x55de2de5a9b0]_p39, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 38:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    m, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 39:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    target, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 40:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     .newSignature, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de2de5a9b0]_p41, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x55de2de5a9b0]_p42, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 41:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    classes, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 42:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de2de5a9b0]_p43, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x55de2de5a9b0]_p44, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 43:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fdef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 44:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    signature, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 45:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, <0x55de2854ebd8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de2de5a9b0]_p46, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x55de2de5a9b0]_p47, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <str>
  void                    Return             l     %0.4
Prom 46:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    m, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 47:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    target, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 48:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, <0x55de2854ebd8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de2de5a9b0]_p49, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x55de2de5a9b0]_p50, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <str>
  void                    Return             l     %0.4
Prom 49:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    m, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 50:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    defined, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 51:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     body, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de2de5a9b0]_p52, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 52:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    m, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 53:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    methods, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 54:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    supersList, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <vec->
  void                    Return             l     %0.3
Prom 55:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fromGroup, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 56:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    verbose, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <lgl$->
  void                    Return             l     %0.3
Prom 57:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     rep.int, <0x55de2a441488>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de2de5a9b0]_p58, e0.0
  val?            %0.3  = Call               !     %0.1("ANY", %0.2) e0.0   <str->
  void                    Return             l     %0.3
Prom 58:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    nargs, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <int$->
  void                    Return             l     %0.3
Prom 59:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    defaultLabel, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 60:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     names, <0x55de2854f470>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de2de5a9b0]_p61, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <str->
  void                    Return             l     %0.3
Prom 61:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    methods, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 62:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     names, <0x55de2854f470>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de2de5a9b0]_p63, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <str$->
  void                    Return             l     %0.3
Prom 63:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    methods, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <vec$+>
  void                    Return             l     %0.3
Prom 64:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     as.character, <0x55de2855c040>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de2de5a9b0]_p65, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <str$->
  void                    Return             l     %0.3
Prom 65:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    excluded, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 66:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    classes, e0.0
  val?            %0.2  = Force<wrapped>     !v    %0.1, e0.0   <vec->
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <true>
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    i, e0.0
  val?            %2.1  = Force<value>       !v    %2.0, e0.0   <int$->
  val?            %2.2  = %2.1
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, .findInheritedMethods[0x55de2de5a9b0]_p67, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.2:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract2_1D        !v    %0.2, %3.1, e0.0   <str$+>
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 67:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    i, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 68:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 69:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    cc, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 70:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    className, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 71:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, <0x55de2854ebd8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de2de5a9b0]_p72, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x55de2de5a9b0]_p73, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <vec->
  void                    Return             l     %0.4
Prom 72:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    cc, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 73:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    contains, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 74:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    simpleOnly, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 75:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    labels, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 76:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    allLabels, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 77:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    classes, e0.0
  val?            %0.2  = Force<wrapped>     !v    %0.1, e0.0   <vec->
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <true>
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    i, e0.0
  val?            %2.1  = Force<value>       !v    %2.0, e0.0   <int$->
  val?            %2.2  = %2.1
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, .findInheritedMethods[0x55de2de5a9b0]_p78, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.2:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract2_1D        !v    %0.2, %3.1, e0.0   <str$->
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 78:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    i, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 79:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 80:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    cc, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 81:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    className, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 82:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, <0x55de2854ebd8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de2de5a9b0]_p83, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x55de2de5a9b0]_p84, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <vec+>
  void                    Return             l     %0.4
Prom 83:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    cc, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 84:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    contains, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 85:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    simpleOnly, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <lgl$->
  void                    Return             l     %0.3
Prom 86:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    labels, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 87:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    allLabels, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 88:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    i, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 89:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    i, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 90:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, <0x55de2854ebd8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de2de5a9b0]_p91, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x55de2de5a9b0]_p92, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <vec+>
  void                    Return             l     %0.4
Prom 91:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    def, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 92:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    contains, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 93:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    simpleOnly, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <lgl$->
  void                    Return             l     %0.3
Prom 94:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    contains, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 95:
BB0
  env             e0.0  = LdFunctionEnv            
  cls             %0.1  = MkCls                    .eligibleSuperClasses@Prom(1)16, e0.0
  cls             %0.2  = MkCls                    .eligibleSuperClasses@Prom(1)37, e0.0
  val?^ | miss    %0.3  = LdVar              eR    simpleOnly, e0.0
  void                    Visible            v     
  val?            %0.5  = Force<lazy>        !     %0.3, e0.0   <lgl$->
  lgl$#-          %0.6  = CheckTrueFalse     we    %0.5
  void                    Branch                   %0.6 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  void                    Nop                !     
  cls             %2.1  = %0.2
  goto BB3
BB4   <- [0]
  void                    Nop                !     
  cls             %4.1  = %0.1
  goto BB3
BB3   <- [4, 2]
  cls             %3.0  = Phi                      %4.1:BB4, %2.1:BB2
  cls             %3.1  = %3.0
  void                    Return             l     %3.1
Prom 106:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    sig, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <(str|vec)>
  void                    Return             l     %0.3
Prom 110:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    FUN, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <(cls|blt)->
  void                    Return             l     %0.3
Prom 112:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    X, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <val?>
  void                    Return             l     %0.3
Prom 113:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     vapply, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de2de5a9b0]_p114, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x55de2de5a9b0]_p115, e0.0
  prom-           %0.4  = MkArg                    unboundValue, .findInheritedMethods[0x55de2de5a9b0]_p116, e0.0
  prom-           %0.5  = MkArg                    unboundValue, .findInheritedMethods[0x55de2de5a9b0]_p117, e0.0
  val?            %0.6  = Call               !     %0.1(%0.2, %0.3, %0.4, %0.5) e0.0   <val?_>
  void                    Return             l     %0.6
Prom 114:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    X, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 115:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    FUN, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 116:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    FUN.VALUE, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 117:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    USE.NAMES, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3

│ .findInheritedMethods[0x55de2de5a9b0]                                        │
└──────────────────────────────────────────────────────────────────────────────┘
