
┌──────────────────────────────────────────────────────────────────────────────┐
│ .inheritedArgsExpression[0x55de34a9f350]                                     │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch                                      │
│ Properties:                                                                  │
├────── Final PIR Version
.inheritedArgsExpression[0x55de34a9f350]
BB0
  val?^           %0.0  = LdArg                    2
  val?^           %0.1  = LdArg                    1
  val?^           %0.2  = LdArg                    0
  env             e0.3  = MkEnv              l     target=%0.2, defined=%0.1, body=%0.0, parent=<env 0x55de28b56378>, context 1
  (cls|spec|blt)  %0.4  = LdFun              !v    substitute, <0x55de2854e468>, <env 0x55de28b56378>
  prom-           %0.5  = MkArg                    unboundValue, .inheritedArgsExpression[0x55de34a9f350]_p1, e0.3
  val?            %0.6  = Call               !v    %0.4(nil, %0.5) e0.3   <code->
  void                    StVar              lW    expr, %0.6, e0.3
  val?^ | miss    %0.8  = LdVar              eR    names, e0.3
  lgl$#-          %0.9  = Identical                <blt names>, %0.8   <true>
  void                    Branch                   %0.9 -> BB48 (if true) | BB49 (if false)
BB48   <- [0]
  val?^ | miss    %48.0 = LdVar              eR    defined, e0.3
  val?            %48.1 = Force!<lazy>       !v    %48.0, e0.3   <str>
  val?            %48.2 = CallBuiltin        !v    names(%48.1) e0.3   <str->
  void                    StVar              lW    args, %48.2, e0.3
  val?^ | miss    %48.4 = LdVar              eR    seq_along, e0.3
  lgl$#-          %48.5 = Identical                <blt seq_along>, %48.4   <true>
  void                    Branch                   %48.5 -> BB50 (if true) | BB51 (if false)
BB49   <- [0]
  fs              %49.0 = FrameState         R     0x55de3162edb0+51: [], env=e0.3
  void                    Deopt              !v    %49.0, DeadBranchReached@0x55de2d7bd280[Test#0], %0.9   !
BB50   <- [48]
  val?^ | miss    %50.0 = LdVar              eR    defined, e0.3
  val?            %50.1 = Force!<wrapped>    !v    %50.0, e0.3   <str>
  val?            %50.2 = CallBuiltin        !v    seq_along(%50.1) e0.3   <int->
  val?+           %50.3 = ToForSeq           e     %50.2
  int$-           %50.4 = Length                   %50.3
  int$-           %50.5 = Inc                      0L
  lgl$-           %50.6 = Lt                 d     %50.4, %50.5, elided   <false>
  lgl$#-          %50.7 = Identical                %50.6, true
  void                    Branch                   %50.7 -> BB53 (if true) | BB52 (if false)
BB51   <- [48]
  fs              %51.0 = FrameState         R     0x55de3162edb0+156: [], env=e0.3
  void                    Deopt              !v    %51.0, DeadBranchReached@0x55de2d7bd280[Test#1], %48.5   !
BB53   <- [50]
  fs              %53.0 = FrameState         R     0x55de3162edb0+247: [%50.2], env=e0.3
  void                    Deopt              !v    %53.0, DeadBranchReached@0x55de2d7bd280[Test#2], %50.7   !
BB52   <- [50]
  val?            %52.0 = Extract2_1D        wed   %50.3, %50.5, elided
  void                    StVar              lW    i, %52.0, e0.3
  (cls|spec|blt)  %52.2 = LdFun              !v    extends, <0x55de2c74f700>, e0.3
  prom-           %52.3 = MkArg                    unboundValue, .inheritedArgsExpression[0x55de34a9f350]_p2, e0.3
  prom-           %52.4 = MkArg                    unboundValue, .inheritedArgsExpression[0x55de34a9f350]_p8, e0.3
  val?            %52.5 = NamedCall          !v    %52.2(%52.3, %52.4, fullInfo=true) e0.3   <(lgl|other)>
  void                    StVar              lW    ei, %52.5, e0.3
  val?^ | miss    %52.7 = LdVar              eR    is, e0.3
  lgl$#-          %52.8 = Identical                %52.7, function(object, class2) <(rir::DispatchTable*|...
  void                    Branch                   %52.8 -> BB54 (if true) | BB55 (if false)
BB54   <- [52]
  prom-           %54.0 = MkArg                    unboundValue, .inheritedArgsExpression[0x55de34a9f350]_p13 (!refl), e0.3
  val?            %54.1 = Call               !v    function(object, class2) <(rir::DispatchTable*|...(%54.0, "SClassExtension") e0.3   <lgl$->
  lgl$#-          %54.2 = IsType                   %54.1 isA lgl$-
  void                    Branch                   %54.2 -> BB56 (if true) | BB57 (if false)
BB55   <- [52]
  fs              %55.0 = FrameState         R     0x55de3162edb0+360: [%50.3, %50.4, %50.5], env=e0.3
  void                    Deopt              !v    %55.0, CallTarget@0x55de2d7bd280[Call#9], %52.7   !
BB56   <- [54]
  lgl$-           %56.0 = CastType           d     dn %54.1
  lgl$-           %56.1 = AsLogical                %56.0
  lgl$#-          %56.2 = Identical                %56.1, false
  void                    Branch                   %56.2 -> BB46 (if true) | BB11 (if false)
BB57   <- [54]
  fs              %57.0 = FrameState         R     0x55de3162edb0+397: [%50.3, %50.4, %50.5, %54.1], env=e0.3
  void                    Deopt              !v    %57.0, Typecheck@0x55de2d7bd280[Type#27], %54.1   !
BB46   <- [56]
  void                    Nop                !     
  lgl$-           %46.1 = %56.1
  goto BB14
BB11   <- [56]
  (cls|spec|blt)  %11.0 = LdFun              !v    @, <0x55de2854ebd8>, e0.3
  prom-           %11.1 = MkArg                    unboundValue, .inheritedArgsExpression[0x55de34a9f350]_p14, e0.3
  prom-           %11.2 = MkArg                    unboundValue, .inheritedArgsExpression[0x55de34a9f350]_p15, e0.3
  val?            %11.3 = Call               !v    %11.0(%11.1, %11.2) e0.3   <lgl$->
  lgl$#-          %11.4 = IsType                   %11.3 isA lgl$-
  void                    Branch                   %11.4 -> BB58 (if true) | BB59 (if false)
BB14   <- [46, 58]
  lgl$-           %14.0 = Phi                      %58.4:BB58, %46.1:BB46
  lgl$-           %14.1 = %14.0
  lgl$#-          %14.2 = CheckTrueFalse     e     %14.1
  void                    Branch                   %14.2 -> BB45 (if true) | BB15 (if false)
BB58   <- [11]
  lgl$-           %58.0 = CastType           d     dn %11.3
  lgl$-           %58.1 = Not                d     %58.0, elided
  lgl$-           %58.2 = AsLogical                %58.1
  lgl$-           %58.3 = LAnd                     %56.1, %58.2
  lgl$-           %58.4 = %58.3
  goto BB14
BB59   <- [11]
  fs              %59.0 = FrameState         R     0x55de3162edb0+446: [%50.3, %50.4, %50.5, %56.1, %11.3], env=e0.3
  void                    Deopt              !v    %59.0, Typecheck@0x55de2d7bd280[Type#30], %11.3   !
BB45   <- [14]
  (cls|spec|blt)  %45.0 = LdFun              !v    substitute, e0.3
  fs              %45.1 = FrameState         R     0x55de3162edb0+470: [%50.3, %50.4, %50.5, %45.0], env=e0.3
  void                    Deopt              !v    %45.1, DeadCall@0x55de2d7bd280[Call#11], %45.0   !
BB15   <- [14]
  void                    Nop                !     
  int$-           %15.1 = %50.5
  goto BB16
BB16   <- [15, 28]
  int$-           %16.0 = Phi                      %15.1:BB15, %28.1:BB28
  int$-           %16.1 = %16.0
  int$-           %16.2 = Inc                      %16.1
  lgl$-           %16.3 = Lt                 d     %50.4, %16.2, elided
  lgl$#-          %16.4 = Identical                %16.3, true
  void                    Branch                   %16.4 -> BB31 (if true) | BB19 (if false)
BB31   <- [16]
  val?^ | miss    %31.0 = LdVar              eR    length, e0.3
  lgl$#-          %31.1 = Identical                <blt length>, %31.0   <true>
  void                    Branch                   %31.1 -> BB60 (if true) | BB61 (if false)
BB19   <- [16]
  val?            %19.0 = Extract2_1D        wed   %50.3, %16.2, elided
  void                    StVar              lW    i, %19.0, e0.3
  (cls|spec|blt)  %19.2 = LdFun              !v    extends, <0x55de2c74f700>, e0.3
  prom-           %19.3 = MkArg                    unboundValue, .inheritedArgsExpression[0x55de34a9f350]_p16, e0.3
  prom-           %19.4 = MkArg                    unboundValue, .inheritedArgsExpression[0x55de34a9f350]_p22, e0.3
  val?            %19.5 = NamedCall          !v    %19.2(%19.3, %19.4, fullInfo=true) e0.3   <(lgl|other)>
  void                    StVar              lW    ei, %19.5, e0.3
  val?^ | miss    %19.7 = LdVar              eR    is, e0.3
  lgl$#-          %19.8 = Identical                %19.7, function(object, class2) <(rir::DispatchTable*|...
  void                    Branch                   %19.8 -> BB62 (if true) | BB63 (if false)
BB60   <- [31]
  val?^ | miss    %60.0 = LdVar              eR    expr, e0.3
  lgl$#-          %60.1 = IsType                   %60.0 isA val?~- | miss
  void                    Branch                   %60.1 -> BB64 (if true) | BB65 (if false)
BB61   <- [31]
  void                    Nop                !     
  lgl$#-          %61.1 = %31.1
  dr              %61.2 = DeadBranchReached@0x55de2d7bd280[Test#15]
  goto BB17
BB62   <- [19]
  prom-           %62.0 = MkArg                    unboundValue, .inheritedArgsExpression[0x55de34a9f350]_p27 (!refl), e0.3
  val?            %62.1 = Call               !v    function(object, class2) <(rir::DispatchTable*|...(%62.0, "SClassExtension") e0.3   <lgl$->
  lgl$#-          %62.2 = IsType                   %62.1 isA lgl$-
  void                    Branch                   %62.2 -> BB66 (if true) | BB67 (if false)
BB63   <- [19]
  fs              %63.0 = FrameState         R     0x55de3162edb0+737: [%50.3, %50.4, %16.2], env=e0.3
  void                    Deopt              !v    %63.0, CallTarget@0x55de2d7bd280[Call#22], %19.7   !
BB64   <- [60]
  val?~- | miss   %64.0 = CastType           d     dn %60.0
  val?-           %64.1 = Force!<value>            %64.0,    <code->
  (int|real)$-    %64.2 = CallSafeBuiltin    wed   length(%64.1)    <int$->
  lgl$#-          %64.3 = IsType                   %64.2 isA int$-
  void                    Branch                   %64.3 -> BB70 (if true) | BB71 (if false)
BB65   <- [60]
  void                    Nop                !     
  val?^ | miss    %65.1 = %60.0
  dr              %65.2 = Typecheck@0x55de2d7bd280[Type#95]
  goto BB17
BB17   <- [61, 65]
  val?^ | miss    %17.0 = Phi                      %61.1:BB61, %65.1:BB65
  val?^ | miss    %17.1 = %17.0
  dr              %17.2 = Phi                      %61.2:BB61, %65.2:BB65
  dr              %17.3 = %17.2
  fs              %17.4 = FrameState         R     0x55de3162edb0+640: [%50.3, %50.4, %16.1], env=e0.3
  void                    Deopt              !v    %17.4, %17.3, %17.1   !
BB66   <- [62]
  lgl$-           %66.0 = CastType           d     dn %62.1
  lgl$-           %66.1 = AsLogical                %66.0
  lgl$#-          %66.2 = Identical                %66.1, false
  void                    Branch                   %66.2 -> BB30 (if true) | BB24 (if false)
BB67   <- [62]
  fs              %67.0 = FrameState         R     0x55de3162edb0+774: [%50.3, %50.4, %16.2, %62.1], env=e0.3
  void                    Deopt              !v    %67.0, Typecheck@0x55de2d7bd280[Type#70], %62.1   !
BB70   <- [64]
  int$-           %70.0 = CastType           d     dn %64.2
  lgl$-           %70.1 = Gt                 d     %70.0, 1L, elided   <lgl$->
  lgl$#-          %70.2 = CheckTrueFalse     e     %70.1
  void                    Branch                   %70.2 -> BB36 (if true) | BB34 (if false)
BB71   <- [64]
  fs              %71.0 = FrameState         R     0x55de3162edb0+1118: [%64.2], env=e0.3
  void                    Deopt              !v    %71.0, Typecheck@0x55de2d7bd280[Type#96], %64.2   !
BB30   <- [66]
  void                    Nop                !     
  lgl$-           %30.1 = %66.1
  goto BB27
BB24   <- [66]
  (cls|spec|blt)  %24.0 = LdFun              !v    @, <0x55de2854ebd8>, e0.3
  prom-           %24.1 = MkArg                    unboundValue, .inheritedArgsExpression[0x55de34a9f350]_p28, e0.3
  prom-           %24.2 = MkArg                    unboundValue, .inheritedArgsExpression[0x55de34a9f350]_p29, e0.3
  val?            %24.3 = Call               !v    %24.0(%24.1, %24.2) e0.3   <lgl$->
  lgl$#-          %24.4 = IsType                   %24.3 isA lgl$-
  void                    Branch                   %24.4 -> BB68 (if true) | BB69 (if false)
BB36   <- [70]
  val?^ | miss    %36.0 = LdVar              eR    list, e0.3
  lgl$#-          %36.1 = Identical                <blt list>, %36.0   <@?>
  void                    Branch                   %36.1 -> BB38 (if true) | BB37 (if false)
BB34   <- [70]
  void                    Visible            v     
  nil-            %34.1 = nil
  goto BB35
BB27   <- [30, 68]
  lgl$-           %27.0 = Phi                      %68.4:BB68, %30.1:BB30
  lgl$-           %27.1 = %27.0
  lgl$#-          %27.2 = CheckTrueFalse     e     %27.1
  void                    Branch                   %27.2 -> BB29 (if true) | BB28 (if false)
BB68   <- [24]
  lgl$-           %68.0 = CastType           d     dn %24.3
  lgl$-           %68.1 = Not                d     %68.0, elided
  lgl$-           %68.2 = AsLogical                %68.1
  lgl$-           %68.3 = LAnd                     %66.1, %68.2
  lgl$-           %68.4 = %68.3
  goto BB27
BB69   <- [24]
  fs              %69.0 = FrameState         R     0x55de3162edb0+823: [%50.3, %50.4, %16.2, %66.1, %24.3], env=e0.3
  void                    Deopt              !v    %69.0, Typecheck@0x55de2d7bd280[Type#73], %24.3   !
BB38   <- [36]
  val?^ | miss    %38.0 = LdVar              eR    body, e0.3
  val?            %38.1 = Force!             !v    %38.0, e0.3   <val?_>
  val+            %38.2 = CallSafeBuiltin    wed   list(%38.1)    <val?_>
  val?^ | miss    %38.3 = LdVar              eR    expr !upd, e0.3
  val?            %38.4 = Force!             !v    %38.3, e0.3   <val?_>
  val?^ | miss    %38.5 = LdVar              eR    length, e0.3
  lgl$#-          %38.6 = Identical                <blt length>, %38.5   <@?>
  void                    Branch                   %38.6 -> BB40 (if true) | BB39 (if false)
BB37   <- [36]
  (cls|spec|blt)  %37.0 = LdFun              !v    list, e0.3
  fs              %37.1 = FrameState         R     0x55de3162edb0+1180: [%37.0], env=e0.3
  void                    Deopt              !v    %37.1, DeadCall@0x55de2d7bd280[Call#31], %37.0   !
BB35   <- [34, 74]
  val?+           %35.0 = Phi                      %34.1:BB34, %74.5:BB74
  val?+           %35.1 = %35.0
  void                    Return             l     %35.1
BB29   <- [27]
  (cls|spec|blt)  %29.0 = LdFun              !v    substitute, e0.3
  fs              %29.1 = FrameState         R     0x55de3162edb0+847: [%50.3, %50.4, %16.2, %29.0], env=e0.3
  void                    Deopt              !v    %29.1, DeadCall@0x55de2d7bd280[Call#24], %29.0   !
BB28   <- [27]
  void                    Nop                !     
  int$-           %28.1 = %16.2
  goto BB16
BB40   <- [38]
  val?^ | miss    %40.0 = LdVar              eR    expr, e0.3
  val?            %40.1 = Force!             !v    %40.0, e0.3   <val?_>
  lgl$#-          %40.2 = IsType                   %40.1 isA val?+
  void                    Branch                   %40.2 -> BB72 (if true) | BB73 (if false)
BB39   <- [38]
  (cls|spec|blt)  %39.0 = LdFun              !v    length, e0.3
  fs              %39.1 = FrameState         R     0x55de3162edb0+1291: [%38.2, %38.4, %39.0], env=e0.3
  void                    Deopt              !v    %39.1, DeadCall@0x55de2d7bd280[Call#32], %39.0   !
BB72   <- [40]
  val?+           %72.0 = CastType           d     dn %40.1   <val?_>
  (int|real)$-    %72.1 = CallSafeBuiltin    wed   length(%72.0)    <val?_>
  (int|real)$-    %72.2 = Add                d     %72.1, 1L, elided   <val?_>
  lgl$#-          %72.3 = IsType                   %38.4 isA val?+
  void                    Branch                   %72.3 -> BB74 (if true) | BB75 (if false)
BB73   <- [40]
  fs              %73.0 = FrameState         R     0x55de3162edb0+1332: [%38.2, %38.4, <blt length>, %40.1], env=e0.3
  void                    Deopt              !v    %73.0, Typecheck@0x55de2d7bd280[Type#103], %40.1   !
BB74   <- [72]
  val?+           %74.0 = CastType           d     dn %38.4   <val?_>
  val?+           %74.1 = Subassign1_1D      wed   %38.2, %74.0, %72.2, elided   <val?_>
  void                    StVar              lW    expr, %74.1, e0.3
  val+            %74.3 = ChkMissing         e     %74.1
  void                    Visible            v     
  val?+           %74.5 = %74.1
  goto BB35
BB75   <- [72]
  fs              %75.0 = FrameState         R     0x55de3162edb0+1354: [%38.2, %38.4, %72.1], env=e0.3
  void                    Deopt              !v    %75.0, Typecheck@0x55de2d7bd280[Type#101], %38.4   !
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     list, e0.0
  val?            %0.2  = NamedCall          !     %0.1(DUMMY="") e0.0   <val?_>
  void                    Return             l     %0.2
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     setPackageSlot, <0x55de2e266af8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .inheritedArgsExpression[0x55de34a9f350]_p3, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .inheritedArgsExpression[0x55de34a9f350]_p5, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <str$+>
  void                    Return             l     %0.4
Prom 3:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    target, e0.0
  val?            %0.2  = Force<wrapped>     !v    %0.1, e0.0   <str>
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <false>
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    i, e0.0
  val?            %2.1  = Force              !v    %2.0, e0.0   <val?_>
  val?            %2.2  = %2.1
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, .inheritedArgsExpression[0x55de34a9f350]_p4, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.2:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract2_1D        !v    %0.2, %3.1, e0.0   <str$->
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 4:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    i, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <int$->
  void                    Return             l     %0.3
Prom 5:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !v    packageSlot, <0x55de28b54068>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .inheritedArgsExpression[0x55de34a9f350]_p6, e0.0
  val?            %0.3  = Call               !v    %0.1(%0.2) e0.0   <str->
  lgl$#-          %0.4  = IsType                   %0.3 isA val+   <true>
  void                    Branch                   %0.4 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    i, e0.0
  val?            %2.1  = Force<value>       !v    %2.0, e0.0   <int$->
  val?            %2.2  = %2.1
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, .inheritedArgsExpression[0x55de34a9f350]_p7, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.2:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract2_1D        !v    %0.3, %3.1, e0.0   <str$->
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 6:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    target, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str>
  void                    Return             l     %0.3
Prom 7:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    i, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 8:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     setPackageSlot, <0x55de2e266af8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .inheritedArgsExpression[0x55de34a9f350]_p9, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .inheritedArgsExpression[0x55de34a9f350]_p11, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <str$+>
  void                    Return             l     %0.4
Prom 9:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    defined, e0.0
  val?            %0.2  = Force<wrapped>     !v    %0.1, e0.0   <str>
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <false>
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    i, e0.0
  val?            %2.1  = Force              !v    %2.0, e0.0   <val?_>
  val?            %2.2  = %2.1
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, .inheritedArgsExpression[0x55de34a9f350]_p10, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.2:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract2_1D        !v    %0.2, %3.1, e0.0   <str$->
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 10:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    i, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <int$->
  void                    Return             l     %0.3
Prom 11:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     packageSlot, <0x55de28b54068>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .inheritedArgsExpression[0x55de34a9f350]_p12, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <str->
  void                    Return             l     %0.3
Prom 12:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    defined, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str>
  void                    Return             l     %0.3
Prom 13:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    ei, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <(lgl|other)>
  void                    Return             l     %0.3
Prom 14:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    ei, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 15:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    simple, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 16:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     setPackageSlot, <0x55de2e266af8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .inheritedArgsExpression[0x55de34a9f350]_p17, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .inheritedArgsExpression[0x55de34a9f350]_p19, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <str$+>
  void                    Return             l     %0.4
Prom 17:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    target, e0.0
  val?            %0.2  = Force<wrapped>     !v    %0.1, e0.0   <str>
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <false>
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    i, e0.0
  val?            %2.1  = Force              !v    %2.0, e0.0   <val?_>
  val?            %2.2  = %2.1
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, .inheritedArgsExpression[0x55de34a9f350]_p18, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.2:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract2_1D        !v    %0.2, %3.1, e0.0   <str$->
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 18:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    i, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <int$->
  void                    Return             l     %0.3
Prom 19:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !v    packageSlot, <0x55de28b54068>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .inheritedArgsExpression[0x55de34a9f350]_p20, e0.0
  val?            %0.3  = Call               !v    %0.1(%0.2) e0.0   <str->
  lgl$#-          %0.4  = IsType                   %0.3 isA val+   <true>
  void                    Branch                   %0.4 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    i, e0.0
  val?            %2.1  = Force<value>       !v    %2.0, e0.0   <int$->
  val?            %2.2  = %2.1
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, .inheritedArgsExpression[0x55de34a9f350]_p21, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.2:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract2_1D        !v    %0.3, %3.1, e0.0   <str$->
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 20:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    target, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str>
  void                    Return             l     %0.3
Prom 21:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    i, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 22:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     setPackageSlot, <0x55de2e266af8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .inheritedArgsExpression[0x55de34a9f350]_p23, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .inheritedArgsExpression[0x55de34a9f350]_p25, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <str$+>
  void                    Return             l     %0.4
Prom 23:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    defined, e0.0
  val?            %0.2  = Force<wrapped>     !v    %0.1, e0.0   <str>
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <false>
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    i, e0.0
  val?            %2.1  = Force              !v    %2.0, e0.0   <val?_>
  val?            %2.2  = %2.1
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, .inheritedArgsExpression[0x55de34a9f350]_p24, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.2:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract2_1D        !v    %0.2, %3.1, e0.0   <str$->
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 24:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    i, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <int$->
  void                    Return             l     %0.3
Prom 25:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     packageSlot, <0x55de28b54068>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .inheritedArgsExpression[0x55de34a9f350]_p26, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <str->
  void                    Return             l     %0.3
Prom 26:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    defined, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str>
  void                    Return             l     %0.3
Prom 27:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    ei, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <(lgl|other)>
  void                    Return             l     %0.3
Prom 28:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    ei, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 29:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    simple, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3

│ .inheritedArgsExpression[0x55de34a9f350]                                     │
└──────────────────────────────────────────────────────────────────────────────┘
