
┌──────────────────────────────────────────────────────────────────────────────┐
│ callNextMethod[0x55de2ea62870]                                               │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch miss: 1                              │
│ Properties:  Eager                                                           │
├────── Final PIR Version
callNextMethod[0x55de2ea62870]
BB0
  val?^ | miss    %0.0  = LdVar              eR    as.name, <env 0x55de28b56378>
  lgl$#-          %0.1  = Identical                %0.0, function(x) <(rir::DispatchTable*)0x55de2ae6d3|...
  void                    Branch                   %0.1 -> BB77 (if true) | BB78 (if false)
BB77   <- [0]
  val             %77.0 = CallSafeBuiltin    wed   as.vector(".nextMethod", "symbol")    <sym->
  val?^ | miss    %77.1 = LdVar              eR    sys.parent, <env 0x55de28b56378>
  lgl$#-          %77.2 = Identical                %77.1, function(n=1L) <(rir::DispatchTable*)0x55de2ab|...
  void                    Branch                   %77.2 -> BB79 (if true) | BB80 (if false)
BB78   <- [0]
  env             e78.0 = (MkEnv)            l     ...(miss)=missingArg, parent=<env 0x55de28b56378>, context 1
  fs              %78.1 = FrameState         R     0x55de35a66fe0+0: [], env=e78.0
  void                    Deopt              !v    %78.1, CallTarget@0x55de35ab9da8[Call#0], %0.0
BB79   <- [77]
  env             e79.0 = MkEnv              l     ...(miss)=missingArg, nextMethod=nil, method=nil, dotNextMethod=%77.0, parent=<env 0x55de28b56378>, context 1
  val?            %79.1 = StaticCall         !v    sys.parent[0x55de30808c40](1) e79.0   <int$->
  lgl$#-          %79.2 = IsType                   %79.1 isA int$-
  void                    Branch                   %79.2 -> BB81 (if true) | BB82 (if false)
BB80   <- [77]
  env             e80.0 = (MkEnv)            l     ...(miss)=missingArg, nextMethod=nil, method=nil, parent=<env 0x55de28b56378>, context 1
  fs              %80.1 = FrameState         R     0x55de35a66fe0+58: [], env=e80.0
  env             e80.2 = (MkEnv)            l     x=".nextMethod", parent=R_BaseNamespace, context 0
  fs              %80.3 = FrameState         R     0x55de2a846830+33: [%77.0], env=e80.2, next=%80.1
  void                    Deopt              !v    %80.3, CallTarget@0x55de35ab9da8[Call#1], %77.1
BB81   <- [79]
  int$-           %81.0 = CastType           d     dn %79.1
  void                    StVar              lW    parent, %81.0, e79.0
  val?^ | miss    %81.2 = LdVar              eR    sys.function, e79.0
  lgl$#-          %81.3 = Identical                %81.2, function(which=0L) <(rir::DispatchTable*)0x55d|...
  void                    Branch                   %81.3 -> BB83 (if true) | BB84 (if false)
BB82   <- [79]
  fs              %82.0 = FrameState         R     0x55de35a66fe0+104: [%79.1], env=e79.0
  void                    Deopt              !v    %82.0, Typecheck@0x55de35ab9da8[Type#1], %79.1   !
BB83   <- [81]
  prom-           %83.0 = MkArg                    %81.0, callNextMethod[0x55de2ea62870]_p0 (!refl), 
  val?            %83.1 = StaticCall         !v    sys.function[0x55de2f95bad0](%83.0) e79.0   <cls>
  void                    StVar              lW    maybeMethod, %83.1, e79.0
  void                    StVar              lW    methodFun, %83.1, e79.0
  val?^ | miss    %83.4 = LdVar              eR    is, e79.0
  lgl$#-          %83.5 = Identical                %83.4, function(object, class2) <(rir::DispatchTable*|...
  void                    Branch                   %83.5 -> BB85 (if true) | BB86 (if false)
BB84   <- [81]
  fs              %84.0 = FrameState         R     0x55de35a66fe0+118: [], env=e79.0
  void                    Deopt              !v    %84.0, CallTarget@0x55de35ab9da8[Call#2], %81.2   !
BB85   <- [83]
  prom-           %85.0 = MkArg                    unboundValue, callNextMethod[0x55de2ea62870]_p1 (!refl), e79.0
  val?            %85.1 = Call               !v    function(object, class2) <(rir::DispatchTable*|...(%85.0, "MethodDefinition") e79.0   <lgl$->
  lgl$#-          %85.2 = IsType                   %85.1 isA lgl$-
  void                    Branch                   %85.2 -> BB87 (if true) | BB88 (if false)
BB86   <- [83]
  fs              %86.0 = FrameState         R     0x55de35a66fe0+175: [], env=e79.0
  void                    Deopt              !v    %86.0, CallTarget@0x55de35ab9da8[Call#3], %83.4   !
BB87   <- [85]
  lgl$-           %87.0 = CastType           d     dn %85.1
  lgl$#-          %87.1 = CheckTrueFalse     e     %87.0
  void                    Branch                   %87.1 -> BB71 (if true) | BB13 (if false)
BB88   <- [85]
  void                    Nop                !     
  val?            %88.1 = %85.1
  dr              %88.2 = Typecheck@0x55de35ab9da8[Type#5]
  goto BB11
BB71   <- [87]
  val?^ | miss    %71.0 = LdVar              eR    parent.frame, e79.0
  lgl$#-          %71.1 = Identical                %71.0, function(n=1) <(rir::DispatchTable*)0x55de2a3f|...
  void                    Branch                   %71.1 -> BB89 (if true) | BB90 (if false)
BB13   <- [87]
  val?^ | miss    %13.0 = LdVar              eR    parent.frame, e79.0
  lgl$#-          %13.1 = Identical                %13.0, function(n=1) <(rir::DispatchTable*)0x55de2a3f|...
  void                    Branch                   %13.1 -> BB91 (if true) | BB92 (if false)
BB11   <- [88, 90, 92]
  val?^ | miss    %11.0 = Phi                      %88.1:BB88, %90.1:BB90, %92.1:BB92
  val?^ | miss    %11.1 = %11.0
  dr              %11.2 = Phi                      %88.2:BB88, %90.2:BB90, %92.2:BB92
  dr              %11.3 = %11.2
  fs              %11.4 = FrameState         R     0x55de35a66fe0+212: [%85.1], env=e79.0
  void                    Deopt              !v    %11.4, %11.3, %11.1   !
BB89   <- [71]
  val?            %89.0 = StaticCall         !v    parent.frame[0x55de2f6b3590](1) e79.0   <env->
  void                    StVar              lW    methodEnv, %89.0, e79.0
  void                    StVar              lW    callEnv, %89.0, e79.0
  val?^ | miss    %89.3 = LdVar              eR    sys.call, e79.0
  lgl$#-          %89.4 = Identical                %89.3, function(which=0L) <(rir::DispatchTable*)0x55d|...
  void                    Branch                   %89.4 -> BB97 (if true) | BB98 (if false)
BB90   <- [71]
  void                    Nop                !     
  val?^ | miss    %90.1 = %71.0
  dr              %90.2 = CallTarget@0x55de35ab9da8[Call#11]
  goto BB11
BB91   <- [13]
  val?            %91.0 = StaticCall         !v    parent.frame[0x55de2f6b3590](1) e79.0   <env->
  void                    StVar              lW    callEnv, %91.0, e79.0
  val?^ | miss    %91.2 = LdVar              eR    parent.frame, e79.0
  lgl$#-          %91.3 = Identical                %91.2, function(n=1) <(rir::DispatchTable*)0x55de2a3f|...
  void                    Branch                   %91.3 -> BB93 (if true) | BB94 (if false)
BB92   <- [13]
  void                    Nop                !     
  val?^ | miss    %92.1 = %13.0
  dr              %92.2 = CallTarget@0x55de35ab9da8[Call#4]
  goto BB11
BB97   <- [89]
  val?^ | miss    %97.0 = LdVar              eR    parent, e79.0
  val?            %97.1 = Force!<value>      !v    %97.0, e79.0   <int$->
  prom-           %97.2 = MkArg                    %97.1, callNextMethod[0x55de2ea62870]_p33 (!refl), 
  val?            %97.3 = StaticCall         !v    sys.call[0x55de34c87880](%97.2) e79.0   <code->
  void                    StVar              lW    mcall, %97.3, e79.0
  val?^ | miss    %97.5 = LdVar              eR    parent.frame, e79.0
  lgl$#-          %97.6 = Identical                %97.5, function(n=1) <(rir::DispatchTable*)0x55de2a3f|...
  void                    Branch                   %97.6 -> BB101 (if true) | BB102 (if false)
BB98   <- [89]
  fs              %98.0 = FrameState         R     0x55de35a66fe0+530: [], env=e79.0
  void                    Deopt              !v    %98.0, CallTarget@0x55de35ab9da8[Call#12], %89.3   !
BB93   <- [91]
  val?            %93.0 = StaticCall         !v    parent.frame[0x55de2f6b3590](2) e79.0   <env->
  void                    StVar              lW    methodEnv, %93.0, e79.0
  val?^ | miss    %93.2 = LdVar              eR    sys.call, e79.0
  lgl$#-          %93.3 = Identical                %93.2, function(which=0L) <(rir::DispatchTable*)0x55d|...
  void                    Branch                   %93.3 -> BB95 (if true) | BB96 (if false)
BB94   <- [91]
  fs              %94.0 = FrameState         R     0x55de35a66fe0+269: [], env=e79.0
  void                    Deopt              !v    %94.0, CallTarget@0x55de35ab9da8[Call#5], %91.2   !
BB101   <- [97]
  val?            %101.0 = StaticCall         !v    parent.frame[0x55de2f6b3590](2) e79.0   <env->
  void                    StVar              lW    dotsenv, %101.0, e79.0
  void                    StVar              lW    i, 1L, e79.0
  goto BB22
BB102   <- [97]
  fs              %102.0 = FrameState         R     0x55de35a66fe0+576: [], env=e79.0
  void                    Deopt              !v    %102.0, CallTarget@0x55de35ab9da8[Call#13], %97.5   !
BB95   <- [93]
  prom-           %95.0 = MkArg                    unboundValue, callNextMethod[0x55de2ea62870]_p2, e79.0
  val?            %95.1 = StaticCall         !v    sys.call[0x55de2be44d90](%95.0) e79.0   <code->
  void                    StVar              lW    mcall, %95.1, e79.0
  val?^ | miss    %95.3 = LdVar              eR    parent.frame, e79.0
  lgl$#-          %95.4 = Identical                %95.3, function(n=1) <(rir::DispatchTable*)0x55de2a3f|...
  void                    Branch                   %95.4 -> BB99 (if true) | BB100 (if false)
BB96   <- [93]
  fs              %96.0 = FrameState         R     0x55de35a66fe0+315: [], env=e79.0
  void                    Deopt              !v    %96.0, CallTarget@0x55de35ab9da8[Call#6], %93.2   !
BB22   <- [101, 103]
  (cls|spec|blt)  %22.0 = LdFun              !v    $, <0x55de2854ec10>, e79.0
  prom-           %22.1 = MkArg                    unboundValue, callNextMethod[0x55de2ea62870]_p4, e79.0
  prom-           %22.2 = MkArg                    unboundValue, callNextMethod[0x55de2ea62870]_p5, e79.0
  val?            %22.3 = Call               !v    %22.0(%22.1, %22.2) e79.0   <cls>
  lgl$-           %22.4 = Is                       %22.3, NULL
  void                    StVar              lW    method, %22.3, e79.0
  lgl$-           %22.6 = Not                d     %22.4, elided
  lgl$#-          %22.7 = CheckTrueFalse     e     %22.6
  void                    Branch                   %22.7 -> BB24 (if true) | BB23 (if false)
BB99   <- [95]
  val?            %99.0 = StaticCall         !v    parent.frame[0x55de2f6b3590](3) e79.0   <env->
  void                    StVar              lW    dotsenv, %99.0, e79.0
  val?^ | miss    %99.2 = LdVar              eR    sys.function, e79.0
  lgl$#-          %99.3 = Identical                %99.2, function(which=0L) <(rir::DispatchTable*)0x55d|...
  void                    Branch                   %99.3 -> BB103 (if true) | BB104 (if false)
BB100   <- [95]
  fs              %100.0 = FrameState         R     0x55de35a66fe0+361: [], env=e79.0
  void                    Deopt              !v    %100.0, CallTarget@0x55de35ab9da8[Call#8], %95.3   !
BB24   <- [22]
  (cls|spec|blt)  %24.0 = LdFun              !v    $, <0x55de2854ec10>, e79.0
  prom-           %24.1 = MkArg                    unboundValue, callNextMethod[0x55de2ea62870]_p6, e79.0
  prom-           %24.2 = MkArg                    unboundValue, callNextMethod[0x55de2ea62870]_p7, e79.0
  val?            %24.3 = Call               !v    %24.0(%24.1, %24.2) e79.0   <nil->
  void                    StVar              lW    nextMethod, %24.3, e79.0
  (cls|spec|blt)  %24.5 = LdFun              !v    $, <0x55de2854ec10>, e79.0
  prom-           %24.6 = MkArg                    unboundValue, callNextMethod[0x55de2ea62870]_p8, e79.0
  prom-           %24.7 = MkArg                    unboundValue, callNextMethod[0x55de2ea62870]_p9, e79.0
  val?            %24.8 = Call               !v    %24.5(%24.6, %24.7) e79.0   <str$+>
  void                    StVar              lW    f, %24.8, e79.0
  val?^ | miss    %24.10 = LdVar              eR    is, e79.0
  lgl$#-          %24.11 = Identical                %24.10, function(object, class2) <(rir::DispatchTable*|...
  void                    Branch                   %24.11 -> BB105 (if true) | BB106 (if false)
BB23   <- [22]
  (cls|spec|blt)  %23.0 = LdFun              !v    identical, e79.0
  fs              %23.1 = FrameState         R     0x55de35a66fe0+707: [%23.0], env=e79.0
  void                    Deopt              !v    %23.1, DeadCall@0x55de35ab9da8[Call#15], %23.0   !
BB103   <- [99]
  prom-           %103.0 = MkArg                    unboundValue, callNextMethod[0x55de2ea62870]_p3, e79.0
  val?            %103.1 = StaticCall         !v    sys.function[0x55de3519ad10](%103.0) e79.0   <cls>
  void                    StVar              lW    maybeMethod, %103.1, e79.0
  void                    StVar              lW    i, 2L, e79.0
  goto BB22
BB104   <- [99]
  fs              %104.0 = FrameState         R     0x55de35a66fe0+407: [], env=e79.0
  void                    Deopt              !v    %104.0, CallTarget@0x55de35ab9da8[Call#9], %99.2   !
BB105   <- [24]
  prom-           %105.0 = MkArg                    unboundValue, callNextMethod[0x55de2ea62870]_p10, e79.0
  val?            %105.1 = Call               !v    function(object, class2) <(rir::DispatchTable*|...(%105.0, "MethodDefinition") e79.0   <lgl$->
  lgl$#-          %105.2 = IsType                   %105.1 isA lgl$-
  void                    Branch                   %105.2 -> BB107 (if true) | BB108 (if false)
BB106   <- [24]
  fs              %106.0 = FrameState         R     0x55de35a66fe0+1576: [], env=e79.0
  void                    Deopt              !v    %106.0, CallTarget@0x55de35ab9da8[Call#31], %24.10   !
BB107   <- [105]
  lgl$-           %107.0 = CastType           d     dn %105.1
  lgl$#-          %107.1 = CheckTrueFalse     e     %107.0
  void                    Branch                   %107.1 -> BB34 (if true) | BB29 (if false)
BB108   <- [105]
  fs              %108.0 = FrameState         R     0x55de35a66fe0+1613: [%105.1], env=e79.0
  void                    Deopt              !v    %108.0, Typecheck@0x55de35ab9da8[Type#67], %105.1   !
BB34   <- [107]
  val?^ | miss    %34.0 = LdVar              eR    nextMethod, e79.0
  val?            %34.1 = Force!<value>      !v    %34.0, e79.0   <nil->
  lgl$-           %34.2 = Is                       %34.1, NULL
  lgl$#-          %34.3 = CheckTrueFalse     e     %34.2
  void                    Branch                   %34.3 -> BB59 (if true) | BB37 (if false)
BB29   <- [107]
  val?^ | miss    %29.0 = LdVar              eR    method, e79.0
  val?            %29.1 = Force!             !v    %29.0, e79.0   <val?_>
  lgl$-           %29.2 = Is                       %29.1, NULL
  lgl$#-          %29.3 = CheckTrueFalse     e     %29.2
  void                    Branch                   %29.3 -> BB31 (if true) | BB30 (if false)
BB59   <- [34]
  val?^ | miss    %59.0 = LdVar              eR    is, e79.0
  lgl$#-          %59.1 = Identical                %59.0, function(object, class2) <(rir::DispatchTable*|...
  void                    Branch                   %59.1 -> BB109 (if true) | BB110 (if false)
BB37   <- [34]
  void                    Nop                !     
  goto BB38
BB31   <- [29]
  val?^ | miss    %31.0 = LdVar              eR    nextMethod, e79.0
  val?            %31.1 = Force!             !v    %31.0, e79.0   <val?_>
  lgl$-           %31.2 = Is                       %31.1, NULL
  lgl$#-          %31.3 = CheckTrueFalse     e     %31.2
  void                    Branch                   %31.3 -> BB33 (if true) | BB32 (if false)
BB30   <- [29]
  (cls|spec|blt)  %30.0 = LdFun              !v    stop, e79.0
  fs              %30.1 = FrameState         R     0x55de35a66fe0+1654: [%30.0], env=e79.0
  void                    Deopt              !v    %30.1, DeadCall@0x55de35ab9da8[Call#32], %30.0   !
BB109   <- [59]
  prom-           %109.0 = MkArg                    unboundValue, callNextMethod[0x55de2ea62870]_p16, e79.0
  val?            %109.1 = Call               !v    function(object, class2) <(rir::DispatchTable*|...(%109.0, "MethodWithNext") e79.0   <lgl$->
  lgl$#-          %109.2 = IsType                   %109.1 isA lgl$-
  void                    Branch                   %109.2 -> BB111 (if true) | BB112 (if false)
BB110   <- [59]
  fs              %110.0 = FrameState         R     0x55de35a66fe0+2193: [%34.1], env=e79.0
  void                    Deopt              !v    %110.0, CallTarget@0x55de35ab9da8[Call#44], %59.0   !
BB38   <- [37, 125]
  val?^ | miss    %38.0 = LdVar              eR    nextMethod, e79.0
  val?            %38.1 = Force!<value>      !v    %38.0, e79.0   <cls>
  lgl$-           %38.2 = Is                       %38.1, NULL
  lgl$#-          %38.3 = CheckTrueFalse     e     %38.2
  void                    Branch                   %38.3 -> BB58 (if true) | BB41 (if false)
BB33   <- [31]
  (cls|spec|blt)  %33.0 = LdFun              !v    stop, e79.0
  fs              %33.1 = FrameState         R     0x55de35a66fe0+1735: [%33.0], env=e79.0
  void                    Deopt              !v    %33.1, DeadCall@0x55de35ab9da8[Call#36], %33.0   !
BB32   <- [31]
  val?^ | miss    %32.0 = LdVar              eR    nextMethod, e79.0
  val?            %32.1 = Force!             !v    %32.0, e79.0   <val?_>
  void                    StVar              lW    method, %32.1, e79.0
  (cls|spec|blt)  %32.3 = LdFun              !v    is, e79.0
  fs              %32.4 = FrameState         R     0x55de35a66fe0+1791: [%32.3], env=e79.0
  void                    Deopt              !v    %32.4, DeadCall@0x55de35ab9da8[Call#37], %32.3   !
BB111   <- [109]
  lgl$-           %111.0 = CastType           d     dn %109.1
  lgl$-           %111.1 = Not                d     %111.0, elided
  lgl$#-          %111.2 = CheckTrueFalse     e     %111.1
  void                    Branch                   %111.2 -> BB68 (if true) | BB62 (if false)
BB112   <- [109]
  void                    Nop                !     
  val?            %112.1 = %109.1
  dr              %112.2 = Typecheck@0x55de35ab9da8[Type#94]
  goto BB60
BB58   <- [38]
  (cls|spec|blt)  %58.0 = LdFun              !v    stop, e79.0
  fs              %58.1 = FrameState         R     0x55de35a66fe0+2605: [%58.0], env=e79.0
  void                    Deopt              !v    %58.1, DeadCall@0x55de35ab9da8[Call#52], %58.0   !
BB41   <- [38]
  val?^ | miss    %41.0 = LdVar              eR    is.na, e79.0
  lgl$#-          %41.1 = Identical                <blt is.na>, %41.0   <true>
  void                    Branch                   %41.1 -> BB115 (if true) | BB116 (if false)
BB68   <- [111]
  val?^ | miss    %68.0 = LdVar              eR    addNextMethod, e79.0
  lgl$#-          %68.1 = Identical                %68.0, function(method, f="<unknown>", mlist, optiona|...
  void                    Branch                   %68.1 -> BB113 (if true) | BB114 (if false)
BB62   <- [111]
  void                    Nop                !     
  goto BB63
BB60   <- [112, 114]
  val?^ | miss    %60.0 = Phi                      %112.1:BB112, %114.1:BB114
  val?^ | miss    %60.1 = %60.0
  dr              %60.2 = Phi                      %112.2:BB112, %114.2:BB114
  dr              %60.3 = %60.2
  fs              %60.4 = FrameState         R     0x55de35a66fe0+2251: [%109.1], env=e79.0
  void                    Deopt              !v    %60.4, %60.3, %60.1   !
BB115   <- [41]
  val?^ | miss    %115.0 = LdVar              eR    match, e79.0
  lgl$#-          %115.1 = Identical                %115.0, function(x, table, nomatch=NA, incomparables=N|...
  void                    Branch                   %115.1 -> BB119 (if true) | BB120 (if false)
BB116   <- [41]
  void                    Nop                !     
  lgl$#-          %116.1 = %41.1
  dr              %116.2 = DeadBranchReached@0x55de35ab9da8[Test#6]
  goto BB39
BB113   <- [68]
  prom-           %113.0 = MkArg                    unboundValue, callNextMethod[0x55de2ea62870]_p23, e79.0
  prom-           %113.1 = MkArg                    unboundValue, callNextMethod[0x55de2ea62870]_p24, e79.0
  prom-           %113.2 = MkArg                    unboundValue, callNextMethod[0x55de2ea62870]_p25, e79.0
  val?            %113.3 = StaticCall         !v    addNextMethod[0x55de345f2d80](%113.0, %113.1, missingArg, missingArg, %113.2) { 0 1 4n } e79.0   <cls>
  void                    StVar              lW    method, %113.3, e79.0
  val?^ | miss    %113.5 = LdVar              eR    cacheMethod, e79.0
  lgl$#-          %113.6 = Identical                %113.5, function(f, sig, def, args=names(sig), fdef, i|...
  void                    Branch                   %113.6 -> BB117 (if true) | BB118 (if false)
BB114   <- [68]
  void                    Nop                !     
  val?^ | miss    %114.1 = %68.0
  dr              %114.2 = CallTarget@0x55de35ab9da8[Call#45]
  goto BB60
BB63   <- [62, 117]
  (cls|spec|blt)  %63.0 = LdFun              !v    @, <0x55de2854ebd8>, e79.0
  prom-           %63.1 = MkArg                    unboundValue, callNextMethod[0x55de2ea62870]_p17, e79.0
  prom-           %63.2 = MkArg                    unboundValue, callNextMethod[0x55de2ea62870]_p18, e79.0
  val?            %63.3 = Call               !v    %63.0(%63.1, %63.2) e79.0   <cls>
  void                    StVar              lW    nextMethod, %63.3, e79.0
  val?^ | miss    %63.5 = LdVar              eR    assign, e79.0
  lgl$#-          %63.6 = Identical                %63.5, function(x, value, pos=-(1), envir=as.environm|...
  void                    Branch                   %63.6 -> BB123 (if true) | BB124 (if false)
BB119   <- [115]
  val?^ | miss    %119.0 = LdVar              eR    f, e79.0
  lgl$#-          %119.1 = IsType                   %119.0 isA val?~+ | miss
  void                    Branch                   %119.1 -> BB121 (if true) | BB122 (if false)
BB120   <- [115]
  void                    Nop                !     
  val?^ | miss    %120.1 = %115.0
  dr              %120.2 = CallTarget@0x55de35ab9da8[Call#55]
  goto BB39
BB39   <- [116, 120, 122]
  val?^ | miss    %39.0 = Phi                      %116.1:BB116, %120.1:BB120, %122.1:BB122
  val?^ | miss    %39.1 = %39.0
  dr              %39.2 = Phi                      %116.2:BB116, %120.2:BB120, %122.2:BB122
  dr              %39.3 = %39.2
  fs              %39.4 = FrameState         R     0x55de35a66fe0+2579: [%38.1], env=e79.0
  void                    Deopt              !v    %39.4, %39.3, %39.1   !
BB117   <- [113]
  prom-           %117.0 = MkArg                    unboundValue, callNextMethod[0x55de2ea62870]_p26, e79.0
  prom-           %117.1 = MkArg                    unboundValue, callNextMethod[0x55de2ea62870]_p27, e79.0
  prom-           %117.2 = MkArg                    unboundValue, callNextMethod[0x55de2ea62870]_p30 (!refl), e79.0
  prom-           %117.3 = MkArg                    unboundValue, callNextMethod[0x55de2ea62870]_p31, e79.0
  val?            %117.4 = StaticCall         !v    cacheMethod[0x55de2f6acc40](%117.0, %117.1, %117.2, missingArg, %117.3, true) { 0 1 2 4n 5n } e79.0
  goto BB63
BB118   <- [113]
  fs              %118.0 = FrameState         R     0x55de35a66fe0+2336: [], env=e79.0
  void                    Deopt              !v    %118.0, CallTarget@0x55de35ab9da8[Call#46], %113.5   !
BB123   <- [63]
  prom-           %123.0 = MkArg                    unboundValue, callNextMethod[0x55de2ea62870]_p19 (!refl), e79.0
  prom-           %123.1 = MkArg                    unboundValue, callNextMethod[0x55de2ea62870]_p20, e79.0
  val?            %123.2 = StaticCall         !v    assign[0x55de34cab2a0](".nextMethod", %123.0, missingArg, %123.1) { 0 1 3n } e79.0
  val?^ | miss    %123.3 = LdVar              eR    assign, e79.0
  lgl$#-          %123.4 = Identical                %123.3, function(x, value, pos=-(1), envir=as.environm|...
  void                    Branch                   %123.4 -> BB125 (if true) | BB126 (if false)
BB124   <- [63]
  fs              %124.0 = FrameState         R     0x55de35a66fe0+2460: [], env=e79.0
  void                    Deopt              !v    %124.0, CallTarget@0x55de35ab9da8[Call#50], %63.5   !
BB121   <- [119]
  val?~+ | miss   %121.0 = CastType           d     dn %119.0
  val?+           %121.1 = Force!<value>            %121.0,    <str$+>
  val?^ | miss    %121.2 = LdVar              eR    .BasicSubsetFunctions, e79.0
  val?            %121.3 = Force!<wrapped>    !v    %121.2, e79.0   <str->
  lgl$#-          %121.4 = IsType                   %121.3 isA val?+
  void                    Branch                   %121.4 -> BB127 (if true) | BB128 (if false)
BB122   <- [119]
  void                    Nop                !     
  val?^ | miss    %122.1 = %119.0
  dr              %122.2 = Typecheck@0x55de35ab9da8[Type#117]
  goto BB39
BB125   <- [123]
  prom-           %125.0 = MkArg                    unboundValue, callNextMethod[0x55de2ea62870]_p21, e79.0
  prom-           %125.1 = MkArg                    unboundValue, callNextMethod[0x55de2ea62870]_p22, e79.0
  val?            %125.2 = StaticCall         !v    assign[0x55de34cab2a0](".Generic", %125.0, missingArg, %125.1) { 0 1 3n } e79.0
  goto BB38
BB126   <- [123]
  fs              %126.0 = FrameState         R     0x55de35a66fe0+2514: [%123.2], env=e79.0
  void                    Deopt              !v    %126.0, CallTarget@0x55de35ab9da8[Call#51], %123.3   !
BB127   <- [121]
  val?+           %127.0 = CastType           d     dn %121.3   <str->
  val+            %127.1 = CallSafeBuiltin    wed   match(%121.1, %127.0, NA, nil)    <int$->
  lgl$#-          %127.2 = IsType                   %127.1 isA int$-
  void                    Branch                   %127.2 -> BB129 (if true) | BB130 (if false)
BB128   <- [121]
  fs              %128.0 = FrameState         R     0x55de35a66fe0+2730: [<blt is.na>], env=e79.0
  prom-           %128.1 = MkArg                    unboundValue, callNextMethod[0x55de2ea62870]_p12, e79.0
  val?^           %128.2 = CastType                 up %128.1
  prom-           %128.3 = MkArg                    %121.1, callNextMethod[0x55de2ea62870]_p11 (!refl), e79.0
  val?~           %128.4 = CastType                 up %128.3
  env             e128.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%128.2, x=%128.4, parent=R_BaseNamespace, context 0
  fs              %128.6 = FrameState         R     0x55de28d63d40+23: [%121.1], env=e128.5, next=%128.0
  fs              %128.7 = FrameState         R     0x55de34db7960+5(pr): [%121.3], env=e79.0, next=%128.6
  void                    Deopt              !v    %128.7, Typecheck@0x55de28db6cb0[Type#1], %121.3   !
BB129   <- [127]
  int$-           %129.0 = CastType           d     dn %127.1
  lgl$-           %129.1 = CallSafeBuiltin    wed   is.na(%129.0)    <lgl$->
  lgl$-           %129.2 = Not                d     %129.1, elided
  void                    StVar              lW    subsetCase, %129.2, e79.0
  val?^ | miss    %129.4 = LdVar              eR    nargs, e79.0
  lgl$#-          %129.5 = Identical                <blt nargs>, %129.4   <true>
  void                    Branch                   %129.5 -> BB131 (if true) | BB132 (if false)
BB130   <- [127]
  fs              %130.0 = FrameState         R     0x55de35a66fe0+2730: [<blt is.na>], env=e79.0
  prom-           %130.1 = MkArg                    %127.0, callNextMethod[0x55de2ea62870]_p12 (!refl), e79.0
  val?~           %130.2 = CastType                 up %130.1
  prom-           %130.3 = MkArg                    %121.1, callNextMethod[0x55de2ea62870]_p11 (!refl), e79.0
  val?~           %130.4 = CastType                 up %130.3
  env             e130.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%130.2, x=%130.4, parent=R_BaseNamespace, context 0
  fs              %130.6 = FrameState         R     0x55de28d63d40+69: [%127.1], env=e130.5, next=%130.0
  void                    Deopt              !v    %130.6, Typecheck@0x55de35ab9da8[Type#119], %127.1   !
BB131   <- [129]
  val?            %131.0 = CallBuiltin        !v    nargs() e79.0   <int$->
  lgl$#-          %131.1 = IsType                   %131.0 isA int$-
  void                    Branch                   %131.1 -> BB133 (if true) | BB134 (if false)
BB132   <- [129]
  fs              %132.0 = FrameState         R     0x55de35a66fe0+2767: [], env=e79.0
  void                    Deopt              !v    %132.0, DeadBranchReached@0x55de35ab9da8[Test#7], %129.5   !
BB133   <- [131]
  int$-           %133.0 = CastType           d     dn %131.0
  lgl$-           %133.1 = Gt                 d     %133.0, 0, elided   <lgl$->
  lgl$#-          %133.2 = CheckTrueFalse     e     %133.1
  void                    Branch                   %133.2 -> BB57 (if true) | BB50 (if false)
BB134   <- [131]
  void                    Nop                !     
  val?            %134.1 = %131.0
  dr              %134.2 = Typecheck@0x55de35ab9da8[Type#121]
  goto BB48
BB57   <- [133]
  (cls|spec|blt)  %57.0 = LdFun              !v    sys.call, e79.0
  fs              %57.1 = FrameState         R     0x55de35a66fe0+4664: [%57.0], env=e79.0
  void                    Deopt              !v    %57.1, DeadCall@0x55de35ab9da8[Call#82], %57.0   !
BB50   <- [133]
  val?^ | miss    %50.0 = LdVar              eR    subsetCase, e79.0
  lgl$#-          %50.1 = IsType                   %50.0 isA lgl$-
  void                    Branch                   %50.1 -> BB135 (if true) | BB136 (if false)
BB48   <- [134, 136, 138]
  val?^ | miss    %48.0 = Phi                      %134.1:BB134, %136.1:BB136, %138.1:BB138
  val?^ | miss    %48.1 = %48.0
  dr              %48.2 = Phi                      %134.2:BB134, %136.2:BB136, %138.2:BB138
  dr              %48.3 = %48.2
  fs              %48.4 = FrameState         R     0x55de35a66fe0+2839: [%131.0], env=e79.0
  void                    Deopt              !v    %48.4, %48.3, %48.1   !
BB135   <- [50]
  lgl$-           %135.0 = CastType           d     dn %50.0
  lgl$#-          %135.1 = CheckTrueFalse     e     %135.0
  void                    Branch                   %135.1 -> BB56 (if true) | BB51 (if false)
BB136   <- [50]
  void                    Nop                !     
  val?^ | miss    %136.1 = %50.0
  dr              %136.2 = Typecheck@0x55de35ab9da8[Type#123]
  goto BB48
BB56   <- [135]
  (cls|spec|blt)  %56.0 = LdFun              !v    as.list, e79.0
  fs              %56.1 = FrameState         R     0x55de35a66fe0+2969: [%56.0], env=e79.0
  void                    Deopt              !v    %56.1, DeadCall@0x55de35ab9da8[Call#58], %56.0   !
BB51   <- [135]
  val?^ | miss    %51.0 = LdVar              eR    match.call, e79.0
  lgl$#-          %51.1 = Identical                %51.0, function(definition=sys.function(sys.parent())|...
  void                    Branch                   %51.1 -> BB137 (if true) | BB138 (if false)
BB137   <- [51]
  prom-           %137.0 = MkArg                    unboundValue, callNextMethod[0x55de2ea62870]_p13, e79.0
  prom-           %137.1 = MkArg                    unboundValue, callNextMethod[0x55de2ea62870]_p14, e79.0
  prom-           %137.2 = MkArg                    unboundValue, callNextMethod[0x55de2ea62870]_p15, e79.0
  val?            %137.3 = StaticCall         !v    match.call[0x55de2e0583d0](%137.0, %137.1, false, %137.2) { 0 1 2n 3n } e79.0   <code->
  void                    StVar              lW    call, %137.3, e79.0
  val?^ | miss    %137.5 = LdVar              eR    .Call, e79.0
  lgl$#-          %137.6 = Identical                <blt .Call>, %137.5   <true>
  void                    Branch                   %137.6 -> BB139 (if true) | BB140 (if false)
BB138   <- [51]
  void                    Nop                !     
  val?^ | miss    %138.1 = %51.0
  dr              %138.2 = CallTarget@0x55de35ab9da8[Call#57]
  goto BB48
BB139   <- [137]
  val?^ | miss    %139.0 = LdVar              eR    C_R_nextMethodCall, e79.0
  val?            %139.1 = Force!<value>      !v    %139.0, e79.0   <vec>
  val?^ | miss    %139.2 = LdVar              eR    call, e79.0
  lgl$#-          %139.3 = IsType                   %139.2 isA val?~- | miss
  void                    Branch                   %139.3 -> BB141 (if true) | BB142 (if false)
BB140   <- [137]
  fs              %140.0 = FrameState         R     0x55de35a66fe0+2959: [], env=e79.0
  void                    Deopt              !v    %140.0, DeadBranchReached@0x55de35ab9da8[Test#17], %137.6   !
BB141   <- [139]
  val?~- | miss   %141.0 = CastType           d     dn %139.2
  val?-           %141.1 = Force!<value>            %141.0,    <code->
  val?^ | miss    %141.2 = LdVar              eR    callEnv, e79.0
  lgl$#-          %141.3 = IsType                   %141.2 isA val?~- | miss
  void                    Branch                   %141.3 -> BB143 (if true) | BB144 (if false)
BB142   <- [139]
  void                    Nop                !     
  val?^ | miss    %142.1 = %139.2
  dr              %142.2 = Typecheck@0x55de35ab9da8[Type#194]
  goto BB54
BB143   <- [141]
  val?~- | miss   %143.0 = CastType           d     dn %141.2
  val?-           %143.1 = Force!<value>            %143.0,    <env->
  val?            %143.2 = CallBuiltin        !     .Call(%139.1, %141.1, %143.1) e79.0   <other>
  void                    Return             l     %143.2
BB144   <- [141]
  void                    Nop                !     
  val?^ | miss    %144.1 = %141.2
  dr              %144.2 = Typecheck@0x55de35ab9da8[Type#195]
  goto BB54
BB54   <- [142, 144]
  val?^ | miss    %54.0 = Phi                      %142.1:BB142, %144.1:BB144
  val?^ | miss    %54.1 = %54.0
  dr              %54.2 = Phi                      %142.2:BB142, %144.2:BB144
  dr              %54.3 = %54.2
  fs              %54.4 = FrameState         R     0x55de35a66fe0+4599: [<blt .Call>, %139.1], env=e79.0
  void                    Deopt              !v    %54.4, %54.3, %54.1   !
Prom 0:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    parent, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <int$->
  void                    Return             l     %0.3
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    maybeMethod, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     sys.parent, <0x55de294f3590>, e0.0
  val?            %0.2  = Call               !     %0.1(2) e0.0   <int$->
  void                    Return             l     %0.2
Prom 3:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     sys.parent, <0x55de294f3590>, e0.0
  val?            %0.2  = Call               !     %0.1(2) e0.0   <int$->
  void                    Return             l     %0.2
Prom 4:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    methodEnv, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 5:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    .Method, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 6:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    callEnv, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 7:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    .nextMethod, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 8:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    methodEnv, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 9:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    .Generic, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 10:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    method, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 11:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    f, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$+>
  void                    Return             l     %0.3
Prom 12:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    .BasicSubsetFunctions, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 13:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    methodFun, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 14:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    mcall, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <code->
  void                    Return             l     %0.3
Prom 15:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    dotsenv, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 16:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    method, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 17:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    method, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 18:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    nextMethod, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 19:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    nextMethod, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 20:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    callEnv, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 21:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    f, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$+>
  void                    Return             l     %0.3
Prom 22:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    callEnv, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 23:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    method, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 24:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    f, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$+>
  void                    Return             l     %0.3
Prom 25:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    methodEnv, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 26:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    f, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 27:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, <0x55de2854ebd8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, callNextMethod[0x55de2ea62870]_p28, e0.0
  prom-           %0.3  = MkArg                    unboundValue, callNextMethod[0x55de2ea62870]_p29, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <str$>
  void                    Return             l     %0.4
Prom 28:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    method, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 29:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    target, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 30:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    method, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 31:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     getGeneric, <0x55de28d2f8d8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, callNextMethod[0x55de2ea62870]_p32, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <cls>
  void                    Return             l     %0.3
Prom 32:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    f, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$+>
  void                    Return             l     %0.3
Prom 33:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    parent, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <int$->
  void                    Return             l     %0.3

│ callNextMethod[0x55de2ea62870]                                               │
└──────────────────────────────────────────────────────────────────────────────┘
