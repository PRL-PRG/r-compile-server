
┌──────────────────────────────────────────────────────────────────────────────┐
│ .findInheritedMethods[0x55de2f88e550]                                        │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch miss: 7                              │
│ Properties:                                                                  │
├────── Final PIR Version
.findInheritedMethods[0x55de2f88e550]
BB0
  val?^           %0.0  = LdArg                    2
  val?^           %0.1  = LdArg                    1
  val?^           %0.2  = LdArg                    0
  env             e0.3  = MkEnv              l     classes=%0.2, fdef=%0.1, mtable=%0.0, table(miss)=missingArg, excluded(miss)=missingArg, useInherited(miss)=missingArg, simpleOnly(miss)=missingArg, verbose(miss)=missingArg, doCache(miss)=missingArg, where(miss)=missingArg, parent=<env 0x55de28b56378>, context 1
  prom-           %0.4  = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p0, e0.3
  val?^ | miss    %0.5  = CastType                 up %0.4
  void                    StArg              lW    table, %0.5, e0.3
  void                    StArg              lW    excluded, nil, e0.3
  prom-           %0.8  = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p4, e0.3
  val?^ | miss    %0.9  = CastType                 up %0.8
  void                    StArg              lW    simpleOnly, %0.9, e0.3
  void                    StArg              lW    verbose, false, e0.3
  prom-           %0.12 = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p7, e0.3
  val?^ | miss    %0.13 = CastType                 up %0.12
  void                    StArg              lW    doCache, %0.13, e0.3
  prom-           %0.15 = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p9, e0.3
  val?^ | miss    %0.16 = CastType                 up %0.15
  void                    StArg              lW    where, %0.16, e0.3
  cls             %0.18 = MkCls                    .findInheritedMethods>plist@677, e0.3
  val?^ | miss    %0.19 = LdVar              eR    .allowPrimitiveMethods, <env 0x55de28b56378>
  lgl$#-          %0.20 = Identical                %0.19, function(onOff) <(rir::DispatchTable*)0x55de2c|...
  void                    Branch                   %0.20 -> BB357 (if true) | BB358 (if false)
BB357   <- [0]
  ct              %357.0 = PushContext        lCL   false, .allowPrimitiveMethods(FALSE), function(onOff) <(rir::DispatchTable*)0x55de2c|..., e0.3
  val?^ | miss    %357.1 = LdVar              eR    .Call, <env 0x55de28b56378>
  lgl$#-          %357.2 = Identical                <blt .Call>, %357.1   <true>
  void                    Branch                   %357.2 -> BB359 (if true) | BB360 (if false)
BB358   <- [0]
  fs              %358.0 = FrameState         R     0x55de2dc4ca10+0: [], env=e0.3
  void                    Deopt              !v    %358.0, CallTarget@0x55de2d7bb0f0[Call#5], %0.19
BB359   <- [357]
  val?^ | miss    %359.0 = LdVar              eR    C_R_M_setPrimitiveMethods, <env 0x55de28b56378>
  env             e359.1 = MkEnv              l     onOff=false, code="CLEAR", parent=<env 0x55de28b56378>, context 1
  val?            %359.2 = Force!<value>      !v    %359.0, e359.1   <vec>
  val?^ | miss    %359.3 = LdVar              eR    code, e359.1
  val?            %359.4 = Force!<value>      !v    %359.3, e359.1   <str$->
  val?            %359.5 = CallBuiltin        !v    .Call(%359.2, "", nil, %359.4, nil, nil) e359.1   <lgl$->
  lgl$#-          %359.6 = IsType                   %359.5 isA lgl$-
  void                    Branch                   %359.6 -> BB361 (if true) | BB362 (if false)
BB360   <- [357]
  fs              %360.0 = FrameState         R     0x55de2dc4ca10+32: [], env=e0.3
  env             e360.1 = (MkEnv)            l     onOff=false, parent=<env 0x55de28b56378>, context 1
  fs              %360.2 = FrameState         R     0x55de2ba62e00+15: [false], env=e360.1, next=%360.0
  void                    Deopt              !v    %360.2, DeadBranchReached@0x55de2c1bd198[Test#0], %357.2   !
BB361   <- [359]
  lgl$-           %361.0 = CastType           d     dn %359.5
  val?            %361.1 = PopContext         C     %361.0, %357.0   <lgl$->
  lgl$#-          %361.2 = IsType                   %361.1 isA lgl$-
  void                    Branch                   %361.2 -> BB363 (if true) | BB364 (if false)
BB362   <- [359]
  fs              %362.0 = FrameState         R     0x55de2dc4ca10+32: [], env=e0.3
  fs              %362.1 = FrameState         R     0x55de2ba62e00+200: [%359.5], env=e359.1, next=%362.0
  void                    Deopt              !v    %362.1, Typecheck@0x55de2c1bd198[Type#5], %359.5   !
BB363   <- [361]
  lgl$-           %363.0 = CastType           d     dn %361.1
  void                    StVar              lW    primMethods, %363.0, e0.3
  (cls|spec|blt)  %363.2 = LdFun              !v    on.exit, <0x55de2854e270>, e0.3
  prom-           %363.3 = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p11, e0.3
  val?            %363.4 = Call               !v    %363.2(%363.3) e0.3
  val?^ | miss    %363.5 = LdVar              eR    is.environment, e0.3
  lgl$#-          %363.6 = Identical                <blt is.environment>, %363.5   <true>
  void                    Branch                   %363.6 -> BB365 (if true) | BB366 (if false)
BB364   <- [361]
  fs              %364.0 = FrameState         R     0x55de2dc4ca10+32: [%361.1], env=e0.3
  void                    Deopt              !v    %364.0, Typecheck@0x55de2d7bb0f0[Type#9], %361.1   !
BB365   <- [363]
  val?^ | miss    %365.0 = LdVar              eR    table, e0.3
  val?            %365.1 = Force!<lazy>       !v    %365.0, e0.3   <env->
  lgl$#-          %365.2 = CallSafeBuiltin    wed   is.environment(%365.1)    <lgl$->
  void                    Branch                   %365.2 -> BB355 (if true) | BB11 (if false)
BB366   <- [363]
  fs              %366.0 = FrameState         R     0x55de2dc4ca10+78: [%363.4], env=e0.3
  void                    Deopt              !v    %366.0, DeadBranchReached@0x55de2d7bb0f0[Test#0], %363.6   !
BB355   <- [365]
  void                    Nop                !     
  goto BB13
BB11   <- [365]
  (cls|spec|blt)  %11.0 = LdFun              !v    is, e0.3
  prom-           %11.1 = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p193, e0.3
  val?            %11.2 = Call               !v    %11.0(%11.1, "standardGeneric") e0.3   <val?_>
  lgl$#-          %11.3 = CheckTrueFalse     we    %11.2
  void                    Branch                   %11.3 -> BB354 (if true) | BB12 (if false)
BB13   <- [355, 354, 12]
  val?^ | miss    %13.0 = LdVar              eR    length, e0.3
  lgl$#-          %13.1 = Identical                <blt length>, %13.0   <true>
  void                    Branch                   %13.1 -> BB367 (if true) | BB368 (if false)
BB354   <- [11]
  (cls|spec|blt)  %354.0 = LdFun              !v    stop, e0.3
  prom-           %354.1 = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p194, e0.3
  val?            %354.2 = NamedCall          !v    %354.0(%354.1, domain=na-lgl) e0.3
  goto BB13
BB12   <- [11]
  (cls|spec|blt)  %12.0 = LdFun              !v    stop, e0.3
  val?            %12.1 = Call               !v    %12.0("trying to find a methods table in a non-gener|...) e0.3
  goto BB13
BB367   <- [13]
  (cls|spec|blt)  %367.0 = LdFun              !v    @, <0x55de2854ebd8>, e0.3
  prom-           %367.1 = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p13, e0.3
  prom-           %367.2 = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p14, e0.3
  val?            %367.3 = Call               !v    %367.0(%367.1, %367.2) e0.3   <vec->
  lgl$#-          %367.4 = IsType                   %367.3 isA val?-
  void                    Branch                   %367.4 -> BB369 (if true) | BB370 (if false)
BB368   <- [13]
  fs              %368.0 = FrameState         R     0x55de2dc4ca10+319: [], env=e0.3
  void                    Deopt              !v    %368.0, DeadBranchReached@0x55de2d7bb0f0[Test#1], %13.1   !
BB369   <- [367]
  val?-           %369.0 = CastType           d     dn %367.3   <vec->
  (int|real)$-    %369.1 = CallSafeBuiltin    wed   length(%369.0)    <int$->
  lgl$#-          %369.2 = IsType                   %369.1 isA int$-
  void                    Branch                   %369.2 -> BB371 (if true) | BB372 (if false)
BB370   <- [367]
  fs              %370.0 = FrameState         R     0x55de2dc4ca10+416: [<blt length>, %367.3], env=e0.3
  void                    Deopt              !v    %370.0, Typecheck@0x55de2d7bb0f0[Type#27], %367.3   !
BB371   <- [369]
  int$-           %371.0 = CastType           d     dn %369.1
  lgl$-           %371.1 = Gt                 d     %371.0, 0L, elided   <lgl$->
  void                    StVar              lW    hasGroup, %371.1, e0.3
  lgl$#-          %371.3 = CheckTrueFalse     e     %371.1
  void                    Branch                   %371.3 -> BB353 (if true) | BB22 (if false)
BB372   <- [369]
  fs              %372.0 = FrameState         R     0x55de2dc4ca10+438: [%369.1], env=e0.3
  void                    Deopt              !v    %372.0, Typecheck@0x55de2d7bb0f0[Type#28], %369.1   !
BB353   <- [371]
  val?^ | miss    %353.0 = LdVar              eR    .getAllGroups, e0.3
  lgl$#-          %353.1 = Identical                %353.0, function(funs) <(rir::DispatchTable*)0x55de32b|...
  void                    Branch                   %353.1 -> BB373 (if true) | BB374 (if false)
BB22   <- [371]
  void                    Nop                !     
  goto BB23
BB373   <- [353]
  prom-           %373.0 = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p191, e0.3
  val?            %373.1 = StaticCall         !v    .getAllGroups[0x55de314fcc40](%373.0) e0.3   <vec->
  void                    StVar              lW    groupGenerics, %373.1, e0.3
  goto BB23
BB374   <- [353]
  fs              %374.0 = FrameState         R     0x55de2dc4ca10+464: [], env=e0.3
  void                    Deopt              !v    %374.0, CallTarget@0x55de2d7bb0f0[Call#18], %353.0   !
BB23   <- [22, 373]
  val?^ | miss    %23.0 = LdVar              eR    length, e0.3
  lgl$#-          %23.1 = Identical                <blt length>, %23.0   <true>
  void                    Branch                   %23.1 -> BB375 (if true) | BB376 (if false)
BB375   <- [23]
  val?^ | miss    %375.0 = LdVar              eR    excluded, e0.3
  val?            %375.1 = Force!<lazy>       !v    %375.0, e0.3   <(nil|str)->
  lgl$#-          %375.2 = IsType                   %375.1 isA val?-
  void                    Branch                   %375.2 -> BB377 (if true) | BB378 (if false)
BB376   <- [23]
  fs              %376.0 = FrameState         R     0x55de2dc4ca10+535: [], env=e0.3
  void                    Deopt              !v    %376.0, DeadBranchReached@0x55de2d7bb0f0[Test#2], %23.1   !
BB377   <- [375]
  val?-           %377.0 = CastType           d     dn %375.1   <(nil|str)->
  (int|real)$-    %377.1 = CallSafeBuiltin    wed   length(%377.0)    <int$->
  lgl$#-          %377.2 = IsType                   %377.1 isA int$-
  void                    Branch                   %377.2 -> BB379 (if true) | BB380 (if false)
BB378   <- [375]
  fs              %378.0 = FrameState         R     0x55de2dc4ca10+604: [<blt length>, %375.1], env=e0.3
  void                    Deopt              !v    %378.0, Typecheck@0x55de2d7bb0f0[Type#35], %375.1   !
BB379   <- [377]
  int$-           %379.0 = CastType           d     dn %377.1
  lgl$-           %379.1 = Gt                 d     %379.0, 0L, elided   <lgl$->
  void                    StVar              lW    doExcluded, %379.1, e0.3
  val?^ | miss    %379.3 = LdVar              eR    verbose, e0.3
  val?            %379.4 = Force!<lazy>       !v    %379.3, e0.3   <lgl$->
  lgl$#-          %379.5 = CheckTrueFalse     we    %379.4
  void                    Branch                   %379.5 -> BB352 (if true) | BB30 (if false)
BB380   <- [377]
  fs              %380.0 = FrameState         R     0x55de2dc4ca10+626: [%377.1], env=e0.3
  void                    Deopt              !v    %380.0, Typecheck@0x55de2d7bb0f0[Type#36], %377.1   !
BB352   <- [379]
  void                    StVar              lW    plist, %0.18, e0.3
  (cls|spec|blt)  %352.1 = LdFun              !v    cat, e0.3
  prom-           %352.2 = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p176, e0.3
  prom-           %352.3 = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p185, e0.3
  val?            %352.4 = NamedCall          !v    %352.1(" .findInheritedMethods(): (hasGroup, doCache,|..., %352.2, ")
", %352.3, sep="") e0.3
  goto BB31
BB30   <- [379]
  void                    Nop                !     
  goto BB31
BB31   <- [30, 352]
  val?^ | miss    %31.0 = LdVar              eR    length, e0.3
  lgl$#-          %31.1 = Identical                <blt length>, %31.0   <true>
  void                    Branch                   %31.1 -> BB381 (if true) | BB382 (if false)
BB381   <- [31]
  val?^ | miss    %381.0 = LdVar              eR    classes, e0.3
  val?            %381.1 = Force!<lazy>       !v    %381.0, e0.3   <(str|vec)>
  val?            %381.2 = CallBuiltin        !v    length(%381.1) e0.3   <int$->
  lgl$#-          %381.3 = IsType                   %381.2 isA int$-
  void                    Branch                   %381.3 -> BB383 (if true) | BB384 (if false)
BB382   <- [31]
  fs              %382.0 = FrameState         R     0x55de2dc4ca10+775: [], env=e0.3
  void                    Deopt              !v    %382.0, DeadBranchReached@0x55de2d7bb0f0[Test#4], %31.1   !
BB383   <- [381]
  int$-           %383.0 = CastType           d     dn %381.2
  void                    StVar              lW    nargs, %383.0, e0.3
  lgl$-           %383.2 = Missing            eR    useInherited, e0.3
  lgl$-           %383.3 = Not                d     %383.2, elided
  lgl$-           %383.4 = AsLogical                %383.3
  lgl$#-          %383.5 = Identical                %383.4, false
  void                    Branch                   %383.5 -> BB351 (if true) | BB38 (if false)
BB384   <- [381]
  fs              %384.0 = FrameState         R     0x55de2dc4ca10+866: [%381.2], env=e0.3
  void                    Deopt              !v    %384.0, Typecheck@0x55de2d7bb0f0[Type#61], %381.2   !
BB351   <- [383]
  void                    Nop                !     
  lgl$-           %351.1 = %383.4
  goto BB43
BB38   <- [383]
  val?^ | miss    %38.0 = LdVar              eR    length, e0.3
  lgl$#-          %38.1 = Identical                <blt length>, %38.0   <true>
  void                    Branch                   %38.1 -> BB385 (if true) | BB386 (if false)
BB43   <- [351, 393]
  lgl$-           %43.0 = Phi                      %393.4:BB393, %351.1:BB351
  lgl$-           %43.1 = %43.0
  lgl$#-          %43.2 = CheckTrueFalse     e     %43.1
  void                    Branch                   %43.2 -> BB350 (if true) | BB44 (if false)
BB385   <- [38]
  val?^ | miss    %385.0 = LdVar              eR    useInherited, e0.3
  val?            %385.1 = Force!<lazy>       !v    %385.0, e0.3   <lgl+>
  lgl$#-          %385.2 = IsType                   %385.1 isA lgl+
  void                    Branch                   %385.2 -> BB387 (if true) | BB388 (if false)
BB386   <- [38]
  fs              %386.0 = FrameState         R     0x55de2dc4ca10+880: [], env=e0.3
  void                    Deopt              !v    %386.0, DeadBranchReached@0x55de2d7bb0f0[Test#5], %38.1   !
BB350   <- [43]
  (cls|spec|blt)  %350.0 = LdFun              !v    rep, e0.3
  prom-           %350.1 = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p174, e0.3
  prom-           %350.2 = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p175, e0.3
  val?            %350.3 = NamedCall          !v    %350.0(%350.1, length.out=%350.2) e0.3   <val?_>
  void                    StVar              lW    useInherited, %350.3, e0.3
  goto BB45
BB44   <- [43]
  void                    Nop                !     
  goto BB45
BB387   <- [385]
  lgl+            %387.0 = CastType           d     dn %385.1
  (int|real)$-    %387.1 = CallSafeBuiltin    wed   length(%387.0)    <int$->
  lgl$#-          %387.2 = IsType                   %387.1 isA int$-
  void                    Branch                   %387.2 -> BB391 (if true) | BB392 (if false)
BB388   <- [385]
  fs              %388.0 = FrameState         R     0x55de2dc4ca10+963: [%383.4, <blt length>, %385.1], env=e0.3
  void                    Deopt              !v    %388.0, Typecheck@0x55de2d7bb0f0[Type#63], %385.1   !
BB45   <- [44, 350]
  val?^ | miss    %45.0 = LdVar              eR    hasGroup, e0.3
  lgl$#-          %45.1 = IsType                   %45.0 isA lgl$-
  void                    Branch                   %45.1 -> BB389 (if true) | BB390 (if false)
BB391   <- [387]
  int$-           %391.0 = CastType           d     dn %387.1
  val?^ | miss    %391.1 = LdVar              eR    nargs, e0.3
  lgl$#-          %391.2 = IsType                   %391.1 isA int$-
  void                    Branch                   %391.2 -> BB393 (if true) | BB394 (if false)
BB392   <- [387]
  void                    Nop                !     
  (int|real)$-    %392.1 = %387.1
  dr              %392.2 = Typecheck@0x55de2d7bb0f0[Type#64]
  goto BB41
BB389   <- [45]
  lgl$-           %389.0 = CastType           d     dn %45.0
  lgl$-           %389.1 = AsLogical                %389.0
  lgl$#-          %389.2 = Identical                %389.1, false
  void                    Branch                   %389.2 -> BB349 (if true) | BB48 (if false)
BB390   <- [45]
  void                    Nop                !     
  val?^ | miss    %390.1 = %45.0
  dr              %390.2 = Typecheck@0x55de2d7bb0f0[Type#70]
  goto BB46
BB393   <- [391]
  int$-           %393.0 = CastType           d     dn %391.1
  lgl$-           %393.1 = Lt                 d     %391.0, %393.0, elided   <lgl$->
  lgl$-           %393.2 = AsLogical                %393.1
  lgl$-           %393.3 = LAnd                     %383.4, %393.2
  lgl$-           %393.4 = %393.3
  goto BB43
BB394   <- [391]
  void                    Nop                !     
  val?^ | miss    %394.1 = %391.1
  dr              %394.2 = Typecheck@0x55de2d7bb0f0[Type#65]
  goto BB41
BB41   <- [392, 394]
  val?^ | miss    %41.0 = Phi                      %392.1:BB392, %394.1:BB394
  val?^ | miss    %41.1 = %41.0
  dr              %41.2 = Phi                      %392.2:BB392, %394.2:BB394
  dr              %41.3 = %41.2
  fs              %41.4 = FrameState         R     0x55de2dc4ca10+985: [%383.4, %387.1], env=e0.3
  void                    Deopt              !v    %41.4, %41.3, %41.1   !
BB349   <- [389]
  void                    Nop                !     
  lgl$-           %349.1 = %389.1
  goto BB49
BB48   <- [389]
  val?^ | miss    %48.0 = LdVar              eR    doExcluded, e0.3
  lgl$#-          %48.1 = IsType                   %48.0 isA lgl$-
  void                    Branch                   %48.1 -> BB399 (if true) | BB400 (if false)
BB46   <- [390, 396, 398, 400]
  val?^ | miss    %46.0 = Phi                      %390.1:BB390, %396.1:BB396, %398.1:BB398, %400.1:BB400
  val?^ | miss    %46.1 = %46.0
  dr              %46.2 = Phi                      %390.2:BB390, %396.2:BB396, %398.2:BB398, %400.2:BB400
  dr              %46.3 = %46.2
  fs              %46.4 = FrameState         R     0x55de2dc4ca10+1082: [], env=e0.3
  void                    Deopt              !v    %46.4, %46.3, %46.1   !
BB49   <- [349, 399]
  lgl$-           %49.0 = Phi                      %399.4:BB399, %349.1:BB349
  lgl$-           %49.1 = %49.0
  lgl$#-          %49.2 = CheckTrueFalse     e     %49.1
  void                    Branch                   %49.2 -> BB337 (if true) | BB50 (if false)
BB399   <- [48]
  lgl$-           %399.0 = CastType           d     dn %48.0
  lgl$-           %399.1 = Not                d     %399.0, elided
  lgl$-           %399.2 = AsLogical                %399.1
  lgl$-           %399.3 = LAnd                     %389.1, %399.2
  lgl$-           %399.4 = %399.3
  goto BB49
BB400   <- [48]
  void                    Nop                !     
  val?^ | miss    %400.1 = %48.0
  dr              %400.2 = Typecheck@0x55de2d7bb0f0[Type#71]
  goto BB46
BB337   <- [49]
  val?^ | miss    %337.0 = LdVar              eR    .sigLabel, e0.3
  lgl$#-          %337.1 = Identical                %337.0, function(sig) <(rir::DispatchTable*)0x55de2b41|...
  void                    Branch                   %337.1 -> BB395 (if true) | BB396 (if false)
BB50   <- [49]
  void                    Nop                !     
  goto BB51
BB395   <- [337]
  prom-           %395.0 = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p168, e0.3
  val?^           %395.1 = CastType                 up %395.0
  val?^ | miss    %395.2 = LdVar              eR    paste, <env 0x55de28b56378>
  lgl$#-          %395.3 = Identical                %395.2, function(..., sep=" ", collapse=NULL, recycle0|...
  void                    Branch                   %395.3 -> BB397 (if true) | BB398 (if false)
BB396   <- [337]
  void                    Nop                !     
  val?^ | miss    %396.1 = %337.0
  dr              %396.2 = CallTarget@0x55de2d7bb0f0[Call#33]
  goto BB46
BB51   <- [50, 344]
  val?^ | miss    %51.0 = LdVar              eR    classes, e0.3
  val?            %51.1 = Force!<wrapped>    !v    %51.0, e0.3   <(str|vec)>
  val?            %51.2 = Extract2_1D        !v    %51.1, 1L, e0.3   <str$+>
  void                    StVar              lW    cl1, %51.2, e0.3
  val?^ | miss    %51.4 = LdVar              eR    getClass, e0.3
  lgl$#-          %51.5 = Identical                %51.4, function(Class, .Force=FALSE, where=.classEnv(|...
  void                    Branch                   %51.5 -> BB401 (if true) | BB402 (if false)
BB397   <- [395]
  env             e397.0 = MkEnv              l     sig=%395.1, parent=<env 0x55de28b56378>, context 0
  prom-           %397.1 = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p215, e397.0
  dots-           %397.2 = DotsList           l     %397.1
  val?^ | miss    %397.3 = CastType                 up %397.1
  env             e397.4 = MkEnv              l     ...=%397.2, sep(miss)=" ", collapse="#", recycle0(miss)=false, parent=R_BaseNamespace, context -1
  val?            %397.5 = Force!             !vL   %397.3, e397.4
  val+            %397.6 = CallSafeBuiltin    wed   list(%397.5)    <vec->
  val+            %397.7 = CallSafeBuiltin    wed   paste(%397.6, " ", "#", false)    <str$->
  void                    StVar              lW    label, %397.7, e0.3
  val?^ | miss    %397.9 = LdVar              eR    .getGroupMethods, e0.3
  lgl$#-          %397.10 = Identical                %397.9, function(labels, generics, found) <(rir::Dispa|...
  void                    Branch                   %397.10 -> BB407 (if true) | BB408 (if false)
BB398   <- [395]
  void                    Nop                !     
  val?^ | miss    %398.1 = %395.2
  dr              %398.2 = CallTarget@0x55de2b0fcef8[Call#0]
  goto BB46
BB401   <- [51]
  prom-           %401.0 = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p15 (!refl), e0.3
  prom-           %401.1 = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p16, e0.3
  val?            %401.2 = StaticCall         !v    getClass[0x55de2c93e950](%401.0, true, %401.1) { 0 2n 1n } e0.3   <other>
  void                    StVar              lW    def, %401.2, e0.3
  lgl$-           %401.4 = Missing            eR    useInherited, e0.3
  lgl$-           %401.5 = AsLogical                %401.4
  lgl$#-          %401.6 = Identical                %401.5, true
  void                    Branch                   %401.6 -> BB336 (if true) | BB54 (if false)
BB402   <- [51]
  fs              %402.0 = FrameState         R     0x55de2dc4ca10+1502: [], env=e0.3
  void                    Deopt              !v    %402.0, CallTarget@0x55de2d7bb0f0[Call#37], %51.4   !
BB407   <- [397]
  prom-           %407.0 = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p169 (!refl), e0.3
  prom-           %407.1 = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p170, e0.3
  val?            %407.2 = StaticCall         !v    .getGroupMethods[0x55de323b0090](%407.0, %407.1, false) e0.3   <vec->
  void                    StVar              lW    direct, %407.2, e0.3
  lgl$#-          %407.4 = IsType                   %407.2 isA val?-
  val?^ | miss    %407.5 = LdVar              eR    length, e0.3
  lgl$#-          %407.6 = Identical                <blt length>, %407.5   <true>
  void                    Branch                   %407.6 -> BB409 (if true) | BB410 (if false)
BB408   <- [397]
  fs              %408.0 = FrameState         R     0x55de2dc4ca10+1177: [], env=e0.3
  void                    Deopt              !v    %408.0, CallTarget@0x55de2d7bb0f0[Call#34], %397.9   !
BB336   <- [401]
  void                    Nop                !     
  lgl$-           %336.1 = %401.5
  goto BB57
BB54   <- [401]
  val?^ | miss    %54.0 = LdVar              eR    useInherited, e0.3
  val?            %54.1 = Force!<wrapped>    !v    %54.0, e0.3   <lgl+>
  lgl$#-          %54.2 = IsType                   %54.1 isA val+   <true>
  lgl$#-          %54.3 = IsType                   %54.1 isA lgl+
  void                    Branch                   %54.2 -> BB403 (if true) | BB404 (if false)
BB409   <- [407]
  val             %409.0 = ChkMissing         e     %407.2
  void                    Branch                   %407.4 -> BB415 (if true) | BB416 (if false)
BB410   <- [407]
  void                    Nop                !     
  lgl$#-          %410.1 = %407.6
  dr              %410.2 = DeadBranchReached@0x55de2d7bb0f0[Test#6]
  goto BB340
BB57   <- [336, 405]
  lgl$-           %57.0 = Phi                      %405.4:BB405, %336.1:BB336
  lgl$-           %57.1 = %57.0
  lgl$#-          %57.2 = CheckTrueFalse     e     %57.1
  void                    Branch                   %57.2 -> BB320 (if true) | BB60 (if false)
BB403   <- [54]
  void                    Branch                   %54.3 -> BB405 (if true) | BB406 (if false)
BB404   <- [54]
  void                    Nop                !     
  lgl$#-          %404.1 = %54.2
  dr              %404.2 = DeadBranchReached@0x55de2d7bb0f0[Test#9]
  goto BB55
BB415   <- [409]
  val?-           %415.0 = CastType           d     dn %407.2   <vec->
  (int|real)$-    %415.1 = CallSafeBuiltin    wed   length(%415.0)    <int$->
  lgl$#-          %415.2 = IsType                   %415.1 isA int$-
  void                    Branch                   %415.2 -> BB423 (if true) | BB424 (if false)
BB416   <- [409]
  void                    Nop                !     
  val?            %416.1 = %407.2
  dr              %416.2 = Typecheck@0x55de2d7bb0f0[Type#76]
  goto BB340
BB340   <- [410, 416]
  val?^ | miss    %340.0 = Phi                      %410.1:BB410, %416.1:BB416
  val?^ | miss    %340.1 = %340.0
  dr              %340.2 = Phi                      %410.2:BB410, %416.2:BB416
  dr              %340.3 = %340.2
  fs              %340.4 = FrameState         R     0x55de2dc4ca10+1233: [], env=e0.3
  void                    Deopt              !v    %340.4, %340.3, %340.1   !
BB320   <- [57]
  val?^ | miss    %320.0 = LdVar              eR    c, e0.3
  lgl$#-          %320.1 = Identical                <blt c>, %320.0   <true>
  void                    Branch                   %320.1 -> BB411 (if true) | BB412 (if false)
BB60   <- [57]
  val?^ | miss    %60.0 = LdVar              eR    cl1, e0.3
  val?            %60.1 = Force!             !v    %60.0, e0.3   <val?_>
  val?            %60.2 = %60.1
  goto BB61
BB405   <- [403]
  lgl+            %405.0 = CastType           d     dn %54.1
  lgl$-           %405.1 = Extract2_1D        wed   %405.0, 1L, elided   <lgl$->
  lgl$-           %405.2 = AsLogical                %405.1
  lgl$-           %405.3 = LOr                      %401.5, %405.2
  lgl$-           %405.4 = %405.3
  goto BB57
BB406   <- [403]
  void                    Nop                !     
  val?            %406.1 = %54.1
  dr              %406.2 = Typecheck@0x55de2d7bb0f0[Type#91]
  goto BB55
BB55   <- [404, 406]
  val?^ | miss    %55.0 = Phi                      %404.1:BB404, %406.1:BB406
  val?^ | miss    %55.1 = %55.0
  dr              %55.2 = Phi                      %404.2:BB404, %406.2:BB406
  dr              %55.3 = %55.2
  fs              %55.4 = FrameState         R     0x55de2dc4ca10+1592: [%401.5, %54.1], env=e0.3
  void                    Deopt              !v    %55.4, %55.3, %55.1   !
BB423   <- [415]
  int$-           %423.0 = CastType           d     dn %415.1
  lgl$#-          %423.1 = CheckTrueFalse     e     %423.0
  void                    Branch                   %423.1 -> BB345 (if true) | BB344 (if false)
BB424   <- [415]
  fs              %424.0 = FrameState         R     0x55de2dc4ca10+1324: [%415.1], env=e0.3
  void                    Deopt              !v    %424.0, Typecheck@0x55de2d7bb0f0[Type#79], %415.1   !
BB411   <- [320]
  val?^ | miss    %411.0 = LdVar              eR    cl1, e0.3
  lgl$#-          %411.1 = IsType                   %411.0 isA val?~+ | miss
  void                    Branch                   %411.1 -> BB413 (if true) | BB414 (if false)
BB412   <- [320]
  void                    Nop                !     
  lgl$#-          %412.1 = %320.1
  dr              %412.2 = DeadBranchReached@0x55de2d7bb0f0[Test#10]
  goto BB58
BB61   <- [60, 471]
  val?            %61.0 = Phi                      %60.2:BB60, %471.2:BB471   <str->
  val?            %61.1 = %61.0
  void                    StVar              lW    labels, %61.1, e0.3
  val?^ | miss    %61.3 = LdVar              eR    list, e0.3
  lgl$#-          %61.4 = Identical                <blt list>, %61.3   <true>
  void                    Branch                   %61.4 -> BB417 (if true) | BB418 (if false)
BB345   <- [423]
  val?^ | miss    %345.0 = LdVar              eR    doCache, e0.3
  val?            %345.1 = Force!             !v    %345.0, e0.3   <val?_>
  lgl$#-          %345.2 = CheckTrueFalse     we    %345.1
  void                    Branch                   %345.2 -> BB348 (if true) | BB346 (if false)
BB344   <- [423]
  void                    Nop                !     
  goto BB51
BB413   <- [411]
  val?~+ | miss   %413.0 = CastType           d     dn %411.0
  val?+           %413.1 = Force!<value>            %413.0,    <str$+>
  val?^ | miss    %413.2 = LdVar              eR    .eligibleSuperClasses, e0.3
  lgl$#-          %413.3 = Identical                %413.2, function(contains, simpleOnly) <(rir::Dispatch|...
  void                    Branch                   %413.3 -> BB421 (if true) | BB422 (if false)
BB414   <- [411]
  void                    Nop                !     
  val?^ | miss    %414.1 = %411.0
  dr              %414.2 = Typecheck@0x55de2d7bb0f0[Type#100]
  goto BB58
BB58   <- [412, 414, 422]
  val?^ | miss    %58.0 = Phi                      %412.1:BB412, %414.1:BB414, %422.1:BB422
  val?^ | miss    %58.1 = %58.0
  dr              %58.2 = Phi                      %412.2:BB412, %414.2:BB414, %422.2:BB422
  dr              %58.3 = %58.2
  fs              %58.4 = FrameState         R     0x55de2dc4ca10+1643: [%57.1], env=e0.3
  void                    Deopt              !v    %58.4, %58.3, %58.1   !
BB417   <- [61]
  val             %417.0 = ChkMissing         e     %61.1
  val+            %417.1 = CallSafeBuiltin    wed   list(%61.1)    <vec$->
  void                    StVar              lW    supersList, %417.1, e0.3
  val?^ | miss    %417.3 = LdVar              eR    vector, e0.3
  lgl$#-          %417.4 = Identical                %417.3, function(mode="logical", length=0L) <(rir::Dis|...
  void                    Branch                   %417.4 -> BB419 (if true) | BB420 (if false)
BB418   <- [61]
  fs              %418.0 = FrameState         R     0x55de2dc4ca10+1831: [], env=e0.3
  void                    Deopt              !v    %418.0, DeadBranchReached@0x55de2d7bb0f0[Test#11], %61.4   !
BB348   <- [345]
  (cls|spec|blt)  %348.0 = LdFun              !v    assign, e0.3
  prom-           %348.1 = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p171, e0.3
  prom-           %348.2 = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p172, e0.3
  prom-           %348.3 = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p173, e0.3
  val?            %348.4 = NamedCall          !v    %348.0(%348.1, %348.2, envir=%348.3) e0.3
  goto BB347
BB346   <- [345]
  void                    Nop                !     
  goto BB347
BB421   <- [413]
  prom-           %421.0 = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p164, e0.3
  prom-           %421.1 = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p167, e0.3
  ct              %421.2 = PushContext        lCL   %421.0, %421.1, .eligibleSuperClasses(@(def, contains), simple|..., function(contains, simpleOnly) <(rir::Dispatch|..., e0.3
  val?^           %421.3 = CastType                 up %421.1
  val?^           %421.4 = CastType                 up %421.0
  val?^ | miss    %421.5 = LdVar              eR    names, <env 0x55de28b56378>
  lgl$#-          %421.6 = Identical                <blt names>, %421.5   <true>
  void                    Branch                   %421.6 -> BB429 (if true) | BB430 (if false)
BB422   <- [413]
  void                    Nop                !     
  val?^ | miss    %422.1 = %413.2
  dr              %422.2 = CallTarget@0x55de2d7bb0f0[Call#41]
  goto BB58
BB419   <- [417]
  val?^ | miss    %419.0 = LdVar              eR    nargs, e0.3
  lgl$#-          %419.1 = IsType                   %419.0 isA int$-
  void                    Branch                   %419.1 -> BB425 (if true) | BB426 (if false)
BB420   <- [417]
  void                    Nop                !     
  val?^ | miss    %420.1 = %417.3
  dr              %420.2 = CallTarget@0x55de2d7bb0f0[Call#44]
  goto BB64
BB347   <- [346, 348]
  val?^ | miss    %347.0 = LdVar              eR    direct, e0.3
  void                    Visible            v     
  val?            %347.2 = Force!             !     %347.0, e0.3   <val?_>
  val?            %347.3 = %347.2
  goto BB134
BB429   <- [421]
  env             e429.0 = MkEnv              l     contains=%421.4, simpleOnly=%421.3, parent=<env 0x55de28b56378>, context 1
  val?            %429.1 = Force!<lazy>       !vL   %421.4, e429.0   <vec+>
  lgl$#-          %429.2 = IsType                   %429.1 isA val?+
  void                    Branch                   %429.2 -> BB441 (if true) | BB442 (if false)
BB430   <- [421]
  fs              %430.0 = FrameState         R     0x55de2dc4ca10+1789: [<blt c>, %413.1], env=e0.3
  env             e430.1 = (MkEnv)            l     contains=%421.4, simpleOnly=%421.3, parent=<env 0x55de28b56378>, context 1
  fs              %430.2 = FrameState         R     0x55de2c01f0f0+17: [<blt names>, %421.6], env=e430.1, next=%430.0
  void                    Deopt              !v    %430.2, DeadBranchReached@0x55de2e403808[Test#0], %421.6   !
BB425   <- [419]
  int$-           %425.0 = CastType           d     dn %419.0
  vec-            %425.1 = CallSafeBuiltin    wed   vector("list", %425.0)    <vec->
  void                    StVar              lW    classDefs, %425.1, e0.3
  val?^ | miss    %425.3 = LdVar              eR    def, e0.3
  val?            %425.4 = Force!<value>      !v    %425.3, e0.3   <other>
  val?^ | miss    %425.5 = LdVar              eR    classDefs !upd, e0.3
  lgl$#-          %425.6 = IsType                   %425.5 isA val?~- | miss
  void                    Branch                   %425.6 -> BB427 (if true) | BB428 (if false)
BB426   <- [419]
  void                    Nop                !     
  val?^ | miss    %426.1 = %419.0
  dr              %426.2 = Typecheck@0x55de2d7bb0f0[Type#110]
  goto BB64
BB64   <- [420, 426]
  val?^ | miss    %64.0 = Phi                      %420.1:BB420, %426.1:BB426
  val?^ | miss    %64.1 = %64.0
  dr              %64.2 = Phi                      %420.2:BB420, %426.2:BB426
  dr              %64.3 = %64.2
  fs              %64.4 = FrameState         R     0x55de2dc4ca10+1936: [], env=e0.3
  void                    Deopt              !v    %64.4, %64.3, %64.1   !
BB134   <- [347, 657]
  val?            %134.0 = Phi                      %657.3:BB657, %347.3:BB347
  val?            %134.1 = %134.0
  void                    Return             l     %134.1
BB441   <- [429]
  val?+           %441.0 = CastType           d     dn %429.1   <vec+>
  val+            %441.1 = CallSafeBuiltin    wed   names(%441.0)    <(nil|str)->
  void                    StVar              lW    what, %441.1, e429.0
  val?^ | miss    %441.3 = LdVar              eR    length, <env 0x55de28b56378>
  lgl$#-          %441.4 = Identical                <blt length>, %441.3   <true>
  void                    Branch                   %441.4 -> BB449 (if true) | BB450 (if false)
BB442   <- [429]
  fs              %442.0 = FrameState         R     0x55de2dc4ca10+1789: [<blt c>, %413.1], env=e0.3
  fs              %442.1 = FrameState         R     0x55de2c01f0f0+69: [<blt names>, %429.1], env=e429.0, next=%442.0
  void                    Deopt              !v    %442.1, Typecheck@0x55de2e403808[Type#1], %429.1   !
BB427   <- [425]
  val?~- | miss   %427.0 = CastType           d     dn %425.5
  val?-           %427.1 = Force!<value>            %427.0,    <vec->
  val?            %427.2 = Subassign2_1D      !v    %425.4, %427.1, 1L, e0.3
  void                    StVar              lW    classDefs, %427.2, e0.3
  val?^ | miss    %427.4 = LdVar              eR    nargs, e0.3
  lgl$#-          %427.5 = IsType                   %427.4 isA int$-
  void                    Branch                   %427.5 -> BB431 (if true) | BB432 (if false)
BB428   <- [425]
  fs              %428.0 = FrameState         R     0x55de2dc4ca10+1996: [%425.4], env=e0.3
  void                    Deopt              !v    %428.0, Typecheck@0x55de2d7bb0f0[Type#113], %425.5   !
BB449   <- [441]
  (int|real)$-    %449.0 = CallSafeBuiltin    wed   length(%441.1)    <int$->
  lgl$#-          %449.1 = IsType                   %449.0 isA int$-
  void                    Branch                   %449.1 -> BB453 (if true) | BB454 (if false)
BB450   <- [441]
  fs              %450.0 = FrameState         R     0x55de2dc4ca10+1789: [<blt c>, %413.1], env=e0.3
  fs              %450.1 = FrameState         R     0x55de2c01f0f0+105: [], env=e429.0, next=%450.0
  void                    Deopt              !v    %450.1, DeadBranchReached@0x55de2e403808[Test#1], %441.4   !
BB431   <- [427]
  int$-           %431.0 = CastType           d     dn %427.4
  lgl$-           %431.1 = Gt                 d     %431.0, 1, elided   <lgl$->
  lgl$#-          %431.2 = CheckTrueFalse     e     %431.1
  void                    Branch                   %431.2 -> BB271 (if true) | BB70 (if false)
BB432   <- [427]
  void                    Nop                !     
  val?^ | miss    %432.1 = %427.4
  dr              %432.2 = Typecheck@0x55de2d7bb0f0[Type#114]
  goto BB68
BB453   <- [449]
  int$-           %453.0 = CastType           d     dn %449.0
  lgl$-           %453.1 = Not                d     %453.0, elided
  lgl$#-          %453.2 = CheckTrueFalse     e     %453.1
  void                    Branch                   %453.2 -> BB335 (if true) | BB329 (if false)
BB454   <- [449]
  void                    Nop                !     
  (int|real)$-    %454.1 = %449.0
  dr              %454.2 = Typecheck@0x55de2e403808[Type#5]
  goto BB327
BB271   <- [431]
  lgl$#-          %271.0 = ColonInputEffects        2, %431.0   <true>
  void                    Branch                   %271.0 -> BB433 (if true) | BB434 (if false)
BB70   <- [431]
  void                    Nop                !     
  goto BB71
BB68   <- [432, 434, 436, 438]
  val?^ | miss    %68.0 = Phi                      %432.1:BB432, %434.1:BB434, %436.1:BB436, %438.1:BB438
  val?^ | miss    %68.1 = %68.0
  dr              %68.2 = Phi                      %432.2:BB432, %434.2:BB434, %436.2:BB436, %438.2:BB438
  dr              %68.3 = %68.2
  fs              %68.4 = FrameState         R     0x55de2dc4ca10+2031: [], env=e0.3
  void                    Deopt              !v    %68.4, %68.3, %68.1   !
BB335   <- [453]
  void                    Nop                !     
  val+            %335.1 = %441.1
  goto BB332
BB329   <- [453]
  val?^ | miss    %329.0 = LdVar              eR    vapply, <env 0x55de28b56378>
  lgl$#-          %329.1 = Identical                %329.0, function(X, FUN, FUN.VALUE, ..., USE.NAMES=TRU|...
  void                    Branch                   %329.1 -> BB455 (if true) | BB456 (if false)
BB327   <- [454, 456]
  val?^ | miss    %327.0 = Phi                      %454.1:BB454, %456.1:BB456
  val?^ | miss    %327.1 = %327.0
  dr              %327.2 = Phi                      %454.2:BB454, %456.2:BB456
  dr              %327.3 = %327.2
  fs              %327.4 = FrameState         R     0x55de2dc4ca10+1789: [<blt c>, %413.1], env=e0.3
  fs              %327.5 = FrameState         R     0x55de2c01f0f0+196: [%449.0], env=e429.0, next=%327.4
  void                    Deopt              !v    %327.5, %327.3, %327.1   !
BB433   <- [271]
  int$#-          %433.0 = ColonCastRhs       e     2L, %431.0   <int$->
  lgl$#-          %433.1 = Lte                d     2L, %433.0, elided   <true>
  void                    Branch                   %433.1 -> BB435 (if true) | BB436 (if false)
BB434   <- [271]
  void                    Nop                !     
  lgl$#-          %434.1 = %271.0
  dr              %434.2 = DeadBranchReached@0x55de2d7bb0f0[Test#12]
  goto BB68
BB71   <- [70, 289]
  val?^ | miss    %71.0 = LdVar              eR    labels, e0.3
  lgl$#-          %71.1 = IsType                   %71.0 isA val?~- | miss
  void                    Branch                   %71.1 -> BB439 (if true) | BB440 (if false)
BB332   <- [335, 467]
  val?            %332.0 = Phi                      %467.2:BB467, %335.1:BB335
  val?            %332.1 = %332.0
  val?            %332.2 = PopContext         C     %332.1, %421.2   <str->
  lgl$#-          %332.3 = IsType                   %332.2 isA val?-
  void                    Branch                   %332.3 -> BB471 (if true) | BB472 (if false)
BB455   <- [329]
  prom-           %455.0 = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p199, e429.0
  prom-           %455.1 = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p200, e429.0
  val?            %455.2 = StaticCall         !v    vapply[0x55de34caefc0](%455.0, %455.1, na-lgl) { 0 1 2 } e429.0   <lgl+>
  void                    StVar              lW    eligible, %455.2, e429.0
  val?^ | miss    %455.4 = LdVar              eR    what, e429.0
  lgl$#-          %455.5 = IsType                   %455.4 isA val?~- | miss
  void                    Branch                   %455.5 -> BB459 (if true) | BB460 (if false)
BB456   <- [329]
  void                    Nop                !     
  val?^ | miss    %456.1 = %329.0
  dr              %456.2 = CallTarget@0x55de2e403808[Call#2]
  goto BB327
BB435   <- [433]
  lgl$#-          %435.0 = Neq                d     %433.0, 2L, elided   <true>
  void                    Branch                   %435.0 -> BB437 (if true) | BB438 (if false)
BB436   <- [433]
  void                    Nop                !     
  lgl$#-          %436.1 = %433.1
  dr              %436.2 = DeadBranchReached@0x55de2d7bb0f0[Test#15]
  goto BB68
BB439   <- [71]
  val?~- | miss   %439.0 = CastType           d     dn %71.0
  val?-           %439.1 = Force!<value>            %439.0,    <str->
  lgl$#-          %439.2 = IsType                   %439.1 isA val+   <true>
  void                    Branch                   %439.2 -> BB445 (if true) | BB446 (if false)
BB440   <- [71]
  void                    Nop                !     
  val?^ | miss    %440.1 = %71.0
  dr              %440.2 = Typecheck@0x55de2d7bb0f0[Type#238]
  goto BB72
BB471   <- [332]
  val?-           %471.0 = CastType           d     dn %332.2   <str->
  (list|sym|char|lgl|int|real|str|vec|complex|raw|cls|spec|blt|prom|_|code|env|ast|expressions|dots|other)+ %471.1 = CallSafeBuiltin    wed   c(%413.1, %471.0, "ANY")    <str->
  (list|sym|char|lgl|int|real|str|vec|complex|raw|cls|spec|blt|prom|_|code|env|ast|expressions|dots|other)+ %471.2 = %471.1
  goto BB61
BB472   <- [332]
  fs              %472.0 = FrameState         R     0x55de2dc4ca10+1789: [<blt c>, %413.1, %332.2], env=e0.3
  void                    Deopt              !v    %472.0, Typecheck@0x55de2d7bb0f0[Type#105], %332.2   !
BB459   <- [455]
  val?~- | miss   %459.0 = CastType           d     dn %455.4
  val?-           %459.1 = Force!<value>            %459.0,    <str->
  lgl$#-          %459.2 = IsType                   %459.1 isA val+   <true>
  void                    Branch                   %459.2 -> BB461 (if true) | BB462 (if false)
BB460   <- [455]
  void                    Nop                !     
  val?^ | miss    %460.1 = %455.4
  dr              %460.2 = Typecheck@0x55de2e403808[Type#9]
  goto BB330
BB437   <- [435]
  void                    StVar              lW    i, 2L, e0.3
  val?^ | miss    %437.1 = LdVar              eR    getClass, e0.3
  lgl$#-          %437.2 = Identical                %437.1, function(Class, .Force=FALSE, where=.classEnv(|...
  void                    Branch                   %437.2 -> BB443 (if true) | BB444 (if false)
BB438   <- [435]
  void                    Nop                !     
  lgl$#-          %438.1 = %435.0
  dr              %438.2 = DeadBranchReached@0x55de2d7bb0f0[Test#16]
  goto BB68
BB445   <- [439]
  val?            %445.0 = Extract1_1D        wed   %439.1, -1L, elided   <str->
  void                    StVar              lW    labels, %445.0, e0.3
  val?^ | miss    %445.2 = LdVar              eR    unique, e0.3
  lgl$#-          %445.3 = Identical                %445.2, function(x, incomparables=FALSE, ...) <(rir::D|...
  void                    Branch                   %445.3 -> BB447 (if true) | BB448 (if false)
BB446   <- [439]
  void                    Nop                !     
  lgl$#-          %446.1 = %439.2
  dr              %446.2 = DeadBranchReached@0x55de2d7bb0f0[Test#27]
  goto BB72
BB72   <- [440, 446]
  val?^ | miss    %72.0 = Phi                      %440.1:BB440, %446.1:BB446
  val?^ | miss    %72.1 = %72.0
  dr              %72.2 = Phi                      %440.2:BB440, %446.2:BB446
  dr              %72.3 = %72.2
  fs              %72.4 = FrameState         R     0x55de2dc4ca10+3635: [], env=e0.3
  void                    Deopt              !v    %72.4, %72.3, %72.1   !
BB461   <- [459]
  val             %461.0 = ChkMissing         e     %455.2
  lgl$#-          %461.1 = IsType                   %461.0 isA lgl+
  void                    Branch                   %461.1 -> BB467 (if true) | BB468 (if false)
BB462   <- [459]
  void                    Nop                !     
  lgl$#-          %462.1 = %459.2
  dr              %462.2 = DeadBranchReached@0x55de2e403808[Test#2]
  goto BB330
BB330   <- [460, 462, 468]
  val?^ | miss    %330.0 = Phi                      %460.1:BB460, %462.1:BB462, %468.1:BB468
  val?^ | miss    %330.1 = %330.0
  dr              %330.2 = Phi                      %460.2:BB460, %462.2:BB462, %468.2:BB468
  dr              %330.3 = %330.2
  fs              %330.4 = FrameState         R     0x55de2dc4ca10+1789: [<blt c>, %413.1], env=e0.3
  fs              %330.5 = FrameState         R     0x55de2c01f0f0+264: [], env=e429.0, next=%330.4
  void                    Deopt              !v    %330.5, %330.3, %330.1   !
BB443   <- [437]
  prom-           %443.0 = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p137, e0.3
  prom-           %443.1 = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p139, e0.3
  val?            %443.2 = StaticCall         !v    getClass[0x55de2ccecd40](%443.0, true, %443.1) { 0 2n 1n } e0.3   <other>
  val?^ | miss    %443.3 = LdVar              eR    classDefs !upd, e0.3
  lgl$#-          %443.4 = IsType                   %443.3 isA val?~- | miss
  void                    Branch                   %443.4 -> BB457 (if true) | BB458 (if false)
BB444   <- [437]
  fs              %444.0 = FrameState         R     0x55de2dc4ca10+2212: [1L, %433.0, 2L], env=e0.3
  void                    Deopt              !v    %444.0, CallTarget@0x55de2d7bb0f0[Call#54], %437.1   !
BB447   <- [445]
  val             %447.0 = ChkMissing         e     %445.0
  val?            %447.1 = StaticCall         !v    unique[0x55de3079e4f0](%445.0) { 0 } e0.3   <str->
  void                    StVar              lW    labels, %447.1, e0.3
  val?^ | miss    %447.3 = LdVar              eR    verbose, e0.3
  val?            %447.4 = Force!<wrapped>    !v    %447.3, e0.3   <lgl$->
  lgl$#-          %447.5 = CheckTrueFalse     we    %447.4
  void                    Branch                   %447.5 -> BB266 (if true) | BB76 (if false)
BB448   <- [445]
  fs              %448.0 = FrameState         R     0x55de2dc4ca10+3703: [], env=e0.3
  void                    Deopt              !v    %448.0, CallTarget@0x55de2d7bb0f0[Call#80], %445.2   !
BB467   <- [461]
  lgl+            %467.0 = CastType           d     dn %461.0
  val?            %467.1 = Extract1_1D        wed   %459.1, %467.0, elided   <str->
  val?            %467.2 = %467.1
  goto BB332
BB468   <- [461]
  void                    Nop                !     
  val             %468.1 = %461.0
  dr              %468.2 = Typecheck@0x55de2e403808[Type#11]
  goto BB330
BB457   <- [443]
  val?~- | miss   %457.0 = CastType           d     dn %443.3
  val?-           %457.1 = Force!<value>            %457.0,    <vec->
  val?^ | miss    %457.2 = LdVar              eR    i, e0.3
  lgl$#-          %457.3 = IsType                   %457.2 isA int$-
  void                    Branch                   %457.3 -> BB463 (if true) | BB464 (if false)
BB458   <- [443]
  void                    Nop                !     
  val?^ | miss    %458.1 = %443.3
  dr              %458.2 = Typecheck@0x55de2d7bb0f0[Type#158]
  goto BB274
BB266   <- [447]
  (cls|spec|blt)  %266.0 = LdFun              !v    cat, e0.3
  prom-           %266.1 = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p134, e0.3
  val?            %266.2 = Call               !v    %266.0(" .fI> length(unique(method labels)) = ", %266.1) e0.3
  val?^ | miss    %266.3 = LdVar              eR    verbose, e0.3
  val?            %266.4 = Force!             !v    %266.3, e0.3   <val?_>
  lgl$#-          %266.5 = IsType                   %266.4 isA val?+
  void                    Branch                   %266.5 -> BB451 (if true) | BB452 (if false)
BB76   <- [447]
  void                    Nop                !     
  goto BB77
BB463   <- [457]
  int$-           %463.0 = CastType           d     dn %457.2
  val?            %463.1 = Subassign2_1D      !v    %443.2, %457.1, %463.0, e0.3
  void                    StVar              lW    classDefs, %463.1, e0.3
  void                    StVar              lW    cc, %443.2, e0.3
  lgl$-           %463.4 = Missing            eR    useInherited, e0.3
  lgl$-           %463.5 = AsLogical                %463.4
  lgl$#-          %463.6 = Identical                %463.5, true
  void                    Branch                   %463.6 -> BB319 (if true) | BB276 (if false)
BB464   <- [457]
  void                    Nop                !     
  val?^ | miss    %464.1 = %457.2
  dr              %464.2 = Typecheck@0x55de2d7bb0f0[Type#159]
  goto BB274
BB274   <- [458, 464]
  val?^ | miss    %274.0 = Phi                      %458.1:BB458, %464.1:BB464
  val?^ | miss    %274.1 = %274.0
  dr              %274.2 = Phi                      %458.2:BB458, %464.2:BB464
  dr              %274.3 = %274.2
  fs              %274.4 = FrameState         R     0x55de2dc4ca10+2273: [1L, %433.0, 3L, %443.2], env=e0.3
  void                    Deopt              !v    %274.4, %274.3, %274.1   !
BB451   <- [266]
  val?+           %451.0 = CastType           d     dn %266.4   <val?_>
  lgl             %451.1 = Gte                wed   %451.0, 2, elided   <val?_>
  lgl$#-          %451.2 = CheckTrueFalse     we    %451.1
  void                    Branch                   %451.2 -> BB270 (if true) | BB269 (if false)
BB452   <- [266]
  fs              %452.0 = FrameState         R     0x55de2dc4ca10+3821: [%266.4], env=e0.3
  void                    Deopt              !v    %452.0, Typecheck@0x55de2d7bb0f0[Type#245], %266.4   !
BB77   <- [76, 269, 270]
  val?^ | miss    %77.0 = LdVar              eR    names, e0.3
  lgl$#-          %77.1 = Identical                <blt names>, %77.0   <true>
  void                    Branch                   %77.1 -> BB465 (if true) | BB466 (if false)
BB319   <- [463]
  void                    Nop                !     
  lgl$-           %319.1 = %463.5
  goto BB279
BB276   <- [463]
  val?^ | miss    %276.0 = LdVar              eR    useInherited, e0.3
  val?            %276.1 = Force!<wrapped>    !v    %276.0, e0.3   <lgl+>
  lgl$#-          %276.2 = IsType                   %276.1 isA val+   <true>
  lgl$#-          %276.3 = IsType                   %276.1 isA lgl+
  void                    Branch                   %276.2 -> BB473 (if true) | BB474 (if false)
BB270   <- [451]
  (cls|spec|blt)  %270.0 = LdFun              !v    cat, e0.3
  val?            %270.1 = Call               !v    %270.0(";  labels = 
") e0.3
  (cls|spec|blt)  %270.2 = LdFun              !v    print, e0.3
  prom-           %270.3 = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p136, e0.3
  val?            %270.4 = Call               !v    %270.2(%270.3) e0.3
  goto BB77
BB269   <- [451]
  void                    Nop                !     
  goto BB77
BB465   <- [77]
  val?^ | miss    %465.0 = LdVar              eR    table, e0.3
  val?            %465.1 = Force!<wrapped>    !v    %465.0, e0.3   <env->
  lgl$#-          %465.2 = IsType                   %465.1 isA val?-
  void                    Branch                   %465.2 -> BB487 (if true) | BB488 (if false)
BB466   <- [77]
  fs              %466.0 = FrameState         R     0x55de2dc4ca10+3915: [], env=e0.3
  void                    Deopt              !v    %466.0, DeadBranchReached@0x55de2d7bb0f0[Test#28], %77.1   !
BB279   <- [319, 477]
  lgl$-           %279.0 = Phi                      %477.4:BB477, %319.1:BB319
  lgl$-           %279.1 = %279.0
  lgl$#-          %279.2 = CheckTrueFalse     e     %279.1
  void                    Branch                   %279.2 -> BB314 (if true) | BB282 (if false)
BB473   <- [276]
  val?^ | miss    %473.0 = LdVar              eR    i, e0.3
  lgl$#-          %473.1 = IsType                   %473.0 isA int$-
  void                    Branch                   %473.1 -> BB475 (if true) | BB476 (if false)
BB474   <- [276]
  void                    Nop                !     
  lgl$#-          %474.1 = %276.2
  dr              %474.2 = DeadBranchReached@0x55de2d7bb0f0[Test#18]
  goto BB277
BB487   <- [465]
  val?-           %487.0 = CastType           d     dn %465.1   <env->
  val+            %487.1 = CallSafeBuiltin    wed   names(%487.0)    <str->
  void                    StVar              lW    allMethods, %487.1, e0.3
  val?^ | miss    %487.3 = LdVar              eR    match, e0.3
  lgl$#-          %487.4 = Identical                %487.3, function(x, table, nomatch=NA, incomparables=N|...
  void                    Branch                   %487.4 -> BB495 (if true) | BB496 (if false)
BB488   <- [465]
  fs              %488.0 = FrameState         R     0x55de2dc4ca10+3984: [<blt names>, %465.1], env=e0.3
  void                    Deopt              !v    %488.0, Typecheck@0x55de2d7bb0f0[Type#249], %465.1   !
BB314   <- [279]
  val?^ | miss    %314.0 = LdVar              eR    c, e0.3
  lgl$#-          %314.1 = Identical                <blt c>, %314.0   <true>
  void                    Branch                   %314.1 -> BB479 (if true) | BB480 (if false)
BB282   <- [279]
  (cls|spec|blt)  %282.0 = LdFun              !v    @, <0x55de2854ebd8>, e0.3
  prom-           %282.1 = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p140, e0.3
  prom-           %282.2 = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p141, e0.3
  val?            %282.3 = Call               !v    %282.0(%282.1, %282.2) e0.3   <str$+>
  val?            %282.4 = %282.3
  goto BB283
BB475   <- [473]
  int$-           %475.0 = CastType           d     dn %473.0
  void                    Branch                   %276.3 -> BB477 (if true) | BB478 (if false)
BB476   <- [473]
  void                    Nop                !     
  val?^ | miss    %476.1 = %473.0
  dr              %476.2 = Typecheck@0x55de2d7bb0f0[Type#162]
  goto BB277
BB277   <- [474, 476, 478]
  val?^ | miss    %277.0 = Phi                      %474.1:BB474, %476.1:BB476, %478.1:BB478
  val?^ | miss    %277.1 = %277.0
  dr              %277.2 = Phi                      %474.2:BB474, %476.2:BB476, %478.2:BB478
  dr              %277.3 = %277.2
  fs              %277.4 = FrameState         R     0x55de2dc4ca10+2350: [1L, %433.0, 3L, %463.5, %276.1], env=e0.3
  void                    Deopt              !v    %277.4, %277.3, %277.1   !
BB495   <- [487]
  val?^ | miss    %495.0 = LdVar              eR    labels, e0.3
  lgl$#-          %495.1 = IsType                   %495.0 isA val?~- | miss
  void                    Branch                   %495.1 -> BB497 (if true) | BB498 (if false)
BB496   <- [487]
  void                    Nop                !     
  val?^ | miss    %496.1 = %487.3
  dr              %496.2 = CallTarget@0x55de2d7bb0f0[Call#86]
  goto BB82
BB479   <- [314]
  (cls|spec|blt)  %479.0 = LdFun              !v    @, <0x55de2854ebd8>, e0.3
  prom-           %479.1 = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p158, e0.3
  prom-           %479.2 = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p159, e0.3
  val?            %479.3 = Call               !v    %479.0(%479.1, %479.2) e0.3   <str$+>
  val?^ | miss    %479.4 = LdVar              eR    .eligibleSuperClasses, e0.3
  lgl$#-          %479.5 = Identical                %479.4, function(contains, simpleOnly) <(rir::Dispatch|...
  void                    Branch                   %479.5 -> BB481 (if true) | BB482 (if false)
BB480   <- [314]
  fs              %480.0 = FrameState         R     0x55de2dc4ca10+2409: [1L, %433.0, 3L, %279.1], env=e0.3
  void                    Deopt              !v    %480.0, DeadBranchReached@0x55de2d7bb0f0[Test#19], %314.1   !
BB283   <- [282, 489]
  val?            %283.0 = Phi                      %282.4:BB282, %489.2:BB489
  val?            %283.1 = %283.0
  void                    StVar              lW    allLabels, %283.1, e0.3
  val?^ | miss    %283.3 = LdVar              eR    outerLabels, e0.3
  lgl$#-          %283.4 = Identical                %283.3, function(labels, new) <(rir::DispatchTable*)0x|...
  void                    Branch                   %283.4 -> BB469 (if true) | BB470 (if false)
BB477   <- [475]
  lgl+            %477.0 = CastType           d     dn %276.1
  lgl$-           %477.1 = Extract2_1D        wed   %477.0, %475.0, elided   <lgl$->
  lgl$-           %477.2 = AsLogical                %477.1
  lgl$-           %477.3 = LOr                      %463.5, %477.2
  lgl$-           %477.4 = %477.3
  goto BB279
BB478   <- [475]
  void                    Nop                !     
  val?            %478.1 = %276.1
  dr              %478.2 = Typecheck@0x55de2d7bb0f0[Type#160]
  goto BB277
BB497   <- [495]
  val?~- | miss   %497.0 = CastType           d     dn %495.0
  val?-           %497.1 = Force!<value>            %497.0,    <str->
  val?^ | miss    %497.2 = LdVar              eR    .fillSignatures, e0.3
  lgl$#-          %497.3 = Identical                %497.2, function(sigs, n) <(rir::DispatchTable*)0x55de|...
  void                    Branch                   %497.3 -> BB501 (if true) | BB502 (if false)
BB498   <- [495]
  void                    Nop                !     
  val?^ | miss    %498.1 = %495.0
  dr              %498.2 = Typecheck@0x55de2d7bb0f0[Type#251]
  goto BB82
BB82   <- [496, 498, 502]
  val?^ | miss    %82.0 = Phi                      %496.1:BB496, %498.1:BB498, %502.1:BB502
  val?^ | miss    %82.1 = %82.0
  dr              %82.2 = Phi                      %496.2:BB496, %498.2:BB498, %502.2:BB502
  dr              %82.3 = %82.2
  fs              %82.4 = FrameState         R     0x55de2dc4ca10+4020: [], env=e0.3
  void                    Deopt              !v    %82.4, %82.3, %82.1   !
BB481   <- [479]
  prom-           %481.0 = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p160, e0.3
  prom-           %481.1 = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p163, e0.3
  val?            %481.2 = StaticCall         !v    .eligibleSuperClasses[0x55de2d80c8a0](%481.0, %481.1) e0.3   <(nil|str)->
  lgl$#-          %481.3 = IsType                   %481.2 isA val?-
  lgl$#-          %481.4 = IsType                   %479.3 isA val?+
  void                    Branch                   %481.4 -> BB483 (if true) | BB484 (if false)
BB482   <- [479]
  fs              %482.0 = FrameState         R     0x55de2dc4ca10+2569: [1L, %433.0, 3L, <blt c>, %479.3], env=e0.3
  void                    Deopt              !v    %482.0, CallTarget@0x55de2d7bb0f0[Call#61], %479.4   !
BB469   <- [283]
  prom-           %469.0 = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p142, e0.3
  prom-           %469.1 = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p143 (!refl), e0.3
  val?            %469.2 = StaticCall         !v    outerLabels[0x55de3259f0b0](%469.0, %469.1) e0.3   <str->
  void                    StVar              lW    labels, %469.2, e0.3
  val?^ | miss    %469.4 = LdVar              eR    c, e0.3
  lgl$#-          %469.5 = Identical                <blt c>, %469.4   <true>
  void                    Branch                   %469.5 -> BB485 (if true) | BB486 (if false)
BB470   <- [283]
  fs              %470.0 = FrameState         R     0x55de2dc4ca10+2653: [1L, %433.0, 3L], env=e0.3
  void                    Deopt              !v    %470.0, CallTarget@0x55de2d7bb0f0[Call#63], %283.3   !
BB501   <- [497]
  prom-           %501.0 = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p22 (!refl), e0.3
  prom-           %501.1 = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p23, e0.3
  val?            %501.2 = StaticCall         !v    unknown--fromConstant[0x55de34dc95b0](%501.0, %501.1) from function(sigs, n) <(rir::DispatchTable*)0x55de|... { 0 1 } e0.3   <str->
  lgl$#-          %501.3 = IsType                   %501.2 isA val?+
  void                    Branch                   %501.3 -> BB503 (if true) | BB504 (if false)
BB502   <- [497]
  void                    Nop                !     
  val?^ | miss    %502.1 = %497.2
  dr              %502.2 = CallTarget@0x55de2d7bb0f0[Call#87]
  goto BB82
BB483   <- [481]
  val?+           %483.0 = CastType           d     dn %479.3   <str$+>
  void                    Branch                   %481.3 -> BB489 (if true) | BB490 (if false)
BB484   <- [481]
  void                    Nop                !     
  val?            %484.1 = %479.3
  dr              %484.2 = Typecheck@0x55de2d7bb0f0[Type#177]
  goto BB317
BB485   <- [469]
  val?^ | miss    %485.0 = LdVar              eR    supersList, e0.3
  lgl$#-          %485.1 = IsType                   %485.0 isA val?~- | miss
  void                    Branch                   %485.1 -> BB491 (if true) | BB492 (if false)
BB486   <- [469]
  void                    Nop                !     
  lgl$#-          %486.1 = %469.5
  dr              %486.2 = DeadBranchReached@0x55de2d7bb0f0[Test#20]
  goto BB286
BB503   <- [501]
  val?+           %503.0 = CastType           d     dn %501.2   <str->
  val+            %503.1 = CallSafeBuiltin    wed   match(%497.1, %503.0, NA, nil)    <int->
  void                    StVar              lW    m, %503.1, e0.3
  lgl$#-          %503.3 = IsType                   %503.1 isA int-
  val?^ | miss    %503.4 = LdVar              eR    is.na, e0.3
  lgl$#-          %503.5 = Identical                <blt is.na>, %503.4   <true>
  void                    Branch                   %503.5 -> BB505 (if true) | BB506 (if false)
BB504   <- [501]
  prom-           %504.0 = MkArg                    %497.1, .findInheritedMethods[0x55de2f88e550]_p20 (!refl), e0.3
  val?~           %504.1 = CastType                 up %504.0
  fs              %504.2 = FrameState         R     0x55de2dc4ca10+4057: [], env=e0.3
  prom-           %504.3 = MkArg                    %501.2, .findInheritedMethods[0x55de2f88e550]_p21 (!refl), e0.3
  val?~           %504.4 = CastType                 up %504.3
  env             e504.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%504.4, x=%504.1, parent=R_BaseNamespace, context 0
  fs              %504.6 = FrameState         R     0x55de28d63d40+23: [%497.1, %501.2], env=e504.5, next=%504.2
  void                    Deopt              !v    %504.6, Typecheck@0x55de28db6cb0[Type#1], %501.2   !
BB489   <- [483]
  val?-           %489.0 = CastType           d     dn %481.2   <(nil|str)->
  (list|sym|char|lgl|int|real|str|vec|complex|raw|cls|spec|blt|prom|_|code|env|ast|expressions|dots|other)+ %489.1 = CallSafeBuiltin    wed   c(%483.0, %489.0, "ANY")    <str->
  (list|sym|char|lgl|int|real|str|vec|complex|raw|cls|spec|blt|prom|_|code|env|ast|expressions|dots|other)+ %489.2 = %489.1
  goto BB283
BB490   <- [483]
  void                    Nop                !     
  val?            %490.1 = %481.2
  dr              %490.2 = Typecheck@0x55de2d7bb0f0[Type#182]
  goto BB317
BB317   <- [484, 490]
  val?^ | miss    %317.0 = Phi                      %484.1:BB484, %490.1:BB490
  val?^ | miss    %317.1 = %317.0
  dr              %317.2 = Phi                      %484.2:BB484, %490.2:BB490
  dr              %317.3 = %317.2
  fs              %317.4 = FrameState         R     0x55de2dc4ca10+2611: [1L, %433.0, 3L, <blt c>, %479.3, %481.2], env=e0.3
  void                    Deopt              !v    %317.4, %317.3, %317.1   !
BB491   <- [485]
  val?~- | miss   %491.0 = CastType           d     dn %485.0
  val?-           %491.1 = Force!<value>            %491.0,    <vec$->
  val?^ | miss    %491.2 = LdVar              eR    list, e0.3
  lgl$#-          %491.3 = Identical                <blt list>, %491.2   <true>
  void                    Branch                   %491.3 -> BB493 (if true) | BB494 (if false)
BB492   <- [485]
  void                    Nop                !     
  val?^ | miss    %492.1 = %485.0
  dr              %492.2 = Typecheck@0x55de2d7bb0f0[Type#190]
  goto BB286
BB286   <- [486, 492, 494, 500]
  val?^ | miss    %286.0 = Phi                      %486.1:BB486, %492.1:BB492, %494.1:BB494, %500.1:BB500
  val?^ | miss    %286.1 = %286.0
  dr              %286.2 = Phi                      %486.2:BB486, %492.2:BB492, %494.2:BB494, %500.2:BB500
  dr              %286.3 = %286.2
  fs              %286.4 = FrameState         R     0x55de2dc4ca10+2704: [1L, %433.0, 3L], env=e0.3
  void                    Deopt              !v    %286.4, %286.3, %286.1   !
BB505   <- [503]
  void                    Branch                   %503.3 -> BB507 (if true) | BB508 (if false)
BB506   <- [503]
  void                    Nop                !     
  lgl$#-          %506.1 = %503.5
  dr              %506.2 = DeadBranchReached@0x55de2d7bb0f0[Test#29]
  goto BB86
BB493   <- [491]
  val?^ | miss    %493.0 = LdVar              eR    allLabels, e0.3
  lgl$#-          %493.1 = IsType                   %493.0 isA val?~+ | miss
  void                    Branch                   %493.1 -> BB499 (if true) | BB500 (if false)
BB494   <- [491]
  void                    Nop                !     
  lgl$#-          %494.1 = %491.3
  dr              %494.2 = DeadBranchReached@0x55de2d7bb0f0[Test#21]
  goto BB286
BB507   <- [505]
  int-            %507.0 = CastType           d     dn %503.1
  lgl-            %507.1 = CallSafeBuiltin    wed   is.na(%507.0)    <lgl->
  lgl-            %507.2 = Not                wed   %507.1, elided
  void                    StVar              lW    found, %507.2, e0.3
  val?^ | miss    %507.4 = LdVar              eR    mget, e0.3
  lgl$#-          %507.5 = Identical                %507.4, function(x, envir=as.environment(-(1L)), mode=|...
  void                    Branch                   %507.5 -> BB509 (if true) | BB510 (if false)
BB508   <- [505]
  void                    Nop                !     
  val+            %508.1 = %503.1
  dr              %508.2 = Typecheck@0x55de2d7bb0f0[Type#256]
  goto BB86
BB86   <- [506, 508]
  val?^ | miss    %86.0 = Phi                      %506.1:BB506, %508.1:BB508
  val?^ | miss    %86.1 = %86.0
  dr              %86.2 = Phi                      %506.2:BB506, %508.2:BB508
  dr              %86.3 = %86.2
  fs              %86.4 = FrameState         R     0x55de2dc4ca10+4071: [], env=e0.3
  void                    Deopt              !v    %86.4, %86.3, %86.1   !
BB499   <- [493]
  val?~+ | miss   %499.0 = CastType           d     dn %493.0
  val?+           %499.1 = Force!<value>            %499.0,    <str+>
  val+            %499.2 = CallSafeBuiltin    wed   list(%499.1)    <vec$->
  val+            %499.3 = CallSafeBuiltin    wed   c(%491.1, %499.2)    <vec->
  void                    StVar              lW    supersList, %499.3, e0.3
  int$#-          %499.5 = 3L
  goto BB288
BB500   <- [493]
  void                    Nop                !     
  val?^ | miss    %500.1 = %493.0
  dr              %500.2 = Typecheck@0x55de2d7bb0f0[Type#192]
  goto BB286
BB509   <- [507]
  prom-           %509.0 = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p25, e0.3
  prom-           %509.1 = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p29, e0.3
  ct              %509.2 = PushContext        lCL   %509.0, %509.1, mget([(allMethods, [(m, found)), table), function(x, envir=as.environment(-(1L)), mode=|..., e0.3
  val?^           %509.3 = CastType                 up %509.1
  val?^           %509.4 = CastType                 up %509.0
  env             e509.5 = MkEnv              l     x=%509.4, envir=%509.3, mode(miss)="any", ifnotfound(miss)=missingArg, inherits(miss)=false, parent=R_BaseNamespace, context 1
  cls             %509.6 = MkCls                    mget@133, e509.5
  val?            %509.7 = Force!<lazy>       !vL   %509.4, e509.5   <str+>
  val?            %509.8 = Force!<lazy>       !vL   %509.3, e509.5   <env->
  val+            %509.9 = CallSafeBuiltin    wed   list(%509.6)    <vec$->
  val?            %509.10 = CallBuiltin        !v    mget(%509.7, %509.8, "any", %509.9, false) e509.5
  val?            %509.11 = PopContext         C     %509.10, %509.2   <vec+>
  void                    StVar              lW    methods, %509.11, e0.3
  val?^ | miss    %509.13 = LdVar              eR    verbose, e0.3
  val?            %509.14 = Force!<wrapped>    !v    %509.13, e0.3   <lgl$->
  lgl$#-          %509.15 = CheckTrueFalse     we    %509.14
  void                    Branch                   %509.15 -> BB265 (if true) | BB90 (if false)
BB510   <- [507]
  fs              %510.0 = FrameState         R     0x55de2dc4ca10+4177: [], env=e0.3
  void                    Deopt              !v    %510.0, CallTarget@0x55de2d7bb0f0[Call#90], %507.4   !
BB288   <- [499, 543]
  int$#-          %288.0 = Phi                      %499.5:BB499, %543.5:BB543
  int$#-          %288.1 = %288.0
  lgl$#-          %288.2 = Neq                d     %433.0, %288.1, elided
  void                    Branch                   %288.2 -> BB290 (if true) | BB289 (if false)
BB265   <- [509]
  (cls|spec|blt)  %265.0 = LdFun              !v    cat, e0.3
  prom-           %265.1 = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p132, e0.3
  val?            %265.2 = Call               !v    %265.0(" >> found: ", %265.1, "
") e0.3
  goto BB91
BB90   <- [509]
  void                    Nop                !     
  goto BB91
BB290   <- [288]
  void                    StVar              lW    i, %288.1, e0.3
  int$#-          %290.1 = Add                d     %288.1, 1L, elided
  val?^ | miss    %290.2 = LdVar              eR    getClass, e0.3
  lgl$#-          %290.3 = Identical                %290.2, function(Class, .Force=FALSE, where=.classEnv(|...
  void                    Branch                   %290.3 -> BB511 (if true) | BB512 (if false)
BB289   <- [288]
  void                    Nop                !     
  goto BB71
BB91   <- [90, 265]
  val?^ | miss    %91.0 = LdVar              eR    hasGroup, e0.3
  lgl$#-          %91.1 = IsType                   %91.0 isA lgl$-
  void                    Branch                   %91.1 -> BB515 (if true) | BB516 (if false)
BB511   <- [290]
  prom-           %511.0 = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p144, e0.3
  prom-           %511.1 = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p146, e0.3
  val?            %511.2 = StaticCall         !v    getClass[0x55de2ccecd40](%511.0, true, %511.1) { 0 2n 1n } e0.3   <other>
  val?^ | miss    %511.3 = LdVar              eR    classDefs !upd, e0.3
  lgl$#-          %511.4 = IsType                   %511.3 isA val?~- | miss
  void                    Branch                   %511.4 -> BB513 (if true) | BB514 (if false)
BB512   <- [290]
  fs              %512.0 = FrameState         R     0x55de2dc4ca10+2927: [1L, %433.0, %288.1], env=e0.3
  void                    Deopt              !v    %512.0, CallTarget@0x55de2d7bb0f0[Call#67], %290.2   !
BB515   <- [91]
  lgl$-           %515.0 = CastType           d     dn %91.0
  lgl$#-          %515.1 = CheckTrueFalse     e     %515.0
  void                    Branch                   %515.1 -> BB255 (if true) | BB94 (if false)
BB516   <- [91]
  void                    Nop                !     
  val?^ | miss    %516.1 = %91.0
  dr              %516.2 = Typecheck@0x55de2d7bb0f0[Type#275]
  goto BB92
BB513   <- [511]
  val?~- | miss   %513.0 = CastType           d     dn %511.3
  val?-           %513.1 = Force!<value>            %513.0,    <vec->
  val?^ | miss    %513.2 = LdVar              eR    i, e0.3
  lgl$#-          %513.3 = IsType                   %513.2 isA int$-
  void                    Branch                   %513.3 -> BB517 (if true) | BB518 (if false)
BB514   <- [511]
  void                    Nop                !     
  val?^ | miss    %514.1 = %511.3
  dr              %514.2 = Typecheck@0x55de2d7bb0f0[Type#201]
  goto BB293
BB255   <- [515]
  val?^ | miss    %255.0 = LdVar              eR    .getGroupMethods, e0.3
  lgl$#-          %255.1 = Identical                %255.0, function(labels, generics, found) <(rir::Dispa|...
  void                    Branch                   %255.1 -> BB519 (if true) | BB520 (if false)
BB94   <- [515]
  (cls|spec|blt)  %94.0 = LdFun              !v    rep, <0x55de285639b0>, e0.3
  prom-           %94.1 = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p30, e0.3
  val?            %94.2 = Call               !v    %94.0(false, %94.1) e0.3   <lgl->
  void                    StVar              lW    fromGroup, %94.2, e0.3
  goto BB95
BB92   <- [516, 520]
  val?^ | miss    %92.0 = Phi                      %516.1:BB516, %520.1:BB520
  val?^ | miss    %92.1 = %92.0
  dr              %92.2 = Phi                      %516.2:BB516, %520.2:BB520
  dr              %92.3 = %92.2
  fs              %92.4 = FrameState         R     0x55de2dc4ca10+4296: [], env=e0.3
  void                    Deopt              !v    %92.4, %92.3, %92.1   !
BB517   <- [513]
  int$-           %517.0 = CastType           d     dn %513.2
  val?            %517.1 = Subassign2_1D      !v    %511.2, %513.1, %517.0, e0.3
  void                    StVar              lW    classDefs, %517.1, e0.3
  void                    StVar              lW    cc, %511.2, e0.3
  lgl$-           %517.4 = Missing            eR    useInherited, e0.3
  lgl$-           %517.5 = AsLogical                %517.4
  lgl$#-          %517.6 = Identical                %517.5, true
  void                    Branch                   %517.6 -> BB313 (if true) | BB295 (if false)
BB518   <- [513]
  void                    Nop                !     
  val?^ | miss    %518.1 = %513.2
  dr              %518.2 = Typecheck@0x55de2d7bb0f0[Type#202]
  goto BB293
BB293   <- [514, 518]
  val?^ | miss    %293.0 = Phi                      %514.1:BB514, %518.1:BB518
  val?^ | miss    %293.1 = %293.0
  dr              %293.2 = Phi                      %514.2:BB514, %518.2:BB518
  dr              %293.3 = %293.2
  fs              %293.4 = FrameState         R     0x55de2dc4ca10+2988: [1L, %433.0, %290.1, %511.2], env=e0.3
  void                    Deopt              !v    %293.4, %293.3, %293.1   !
BB519   <- [255]
  prom-           %519.0 = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p123, e0.3
  prom-           %519.1 = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p124, e0.3
  prom-           %519.2 = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p125, e0.3
  val?            %519.3 = StaticCall         !v    .getGroupMethods[0x55de33795140](%519.0, %519.1, %519.2) e0.3   <vec->
  void                    StVar              lW    groupmethods, %519.3, e0.3
  val?^ | miss    %519.5 = LdVar              eR    c, e0.3
  lgl$#-          %519.6 = Identical                <blt c>, %519.5   <true>
  void                    Branch                   %519.6 -> BB521 (if true) | BB522 (if false)
BB520   <- [255]
  void                    Nop                !     
  val?^ | miss    %520.1 = %255.0
  dr              %520.2 = CallTarget@0x55de2d7bb0f0[Call#95]
  goto BB92
BB95   <- [94, 569]
  val?^ | miss    %95.0 = LdVar              eR    .duplicateClassesExist, e0.3
  lgl$#-          %95.1 = Identical                %95.0, function(on) <(rir::DispatchTable*)0x55de2cdf4|...
  void                    Branch                   %95.1 -> BB523 (if true) | BB524 (if false)
BB313   <- [517]
  void                    Nop                !     
  lgl$-           %313.1 = %517.5
  goto BB298
BB295   <- [517]
  val?^ | miss    %295.0 = LdVar              eR    useInherited, e0.3
  val?            %295.1 = Force!             !v    %295.0, e0.3   <val?_>
  lgl$#-          %295.2 = IsType                   %295.1 isA val+   <@?>
  void                    Branch                   %295.2 -> BB312 (if true) | BB296 (if false)
BB521   <- [519]
  (cls|spec|blt)  %521.0 = LdFun              !v    rep, <0x55de285639b0>, e0.3
  prom-           %521.1 = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p126, e0.3
  val?            %521.2 = Call               !v    %521.0(false, %521.1) e0.3   <lgl->
  (cls|spec|blt)  %521.3 = LdFun              !v    rep, <0x55de285639b0>, e0.3
  prom-           %521.4 = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p128, e0.3
  val?            %521.5 = Call               !v    %521.3(true, %521.4) e0.3   <lgl->
  lgl$#-          %521.6 = IsType                   %521.5 isA lgl-
  lgl$#-          %521.7 = IsType                   %521.2 isA lgl-
  void                    Branch                   %521.7 -> BB527 (if true) | BB528 (if false)
BB522   <- [519]
  fs              %522.0 = FrameState         R     0x55de2dc4ca10+4428: [], env=e0.3
  void                    Deopt              !v    %522.0, DeadBranchReached@0x55de2d7bb0f0[Test#33], %519.6   !
BB523   <- [95]
  val?            %523.0 = StaticCall         !v    .duplicateClassesExist[0x55de2d4515d0]() e0.3   <lgl$->
  lgl$#-          %523.1 = IsType                   %523.0 isA lgl$-
  void                    Branch                   %523.1 -> BB529 (if true) | BB530 (if false)
BB524   <- [95]
  fs              %524.0 = FrameState         R     0x55de2dc4ca10+4800: [], env=e0.3
  void                    Deopt              !v    %524.0, CallTarget@0x55de2d7bb0f0[Call#108], %95.0   !
BB298   <- [313, 297]
  lgl$-           %298.0 = Phi                      %297.5:BB297, %313.1:BB313
  lgl$-           %298.1 = %298.0
  lgl$#-          %298.2 = CheckTrueFalse     e     %298.1
  void                    Branch                   %298.2 -> BB307 (if true) | BB301 (if false)
BB312   <- [295]
  val?^ | miss    %312.0 = LdVar              eR    i, e0.3
  val?            %312.1 = Force!             !v    %312.0, e0.3   <val?_>
  val?            %312.2 = %312.1
  goto BB297
BB296   <- [295]
  prom-           %296.0 = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p157, e0.3
  prom-           %296.1 = %296.0
  goto BB297
BB527   <- [521]
  lgl-            %527.0 = CastType           d     dn %521.2
  void                    Branch                   %521.6 -> BB539 (if true) | BB540 (if false)
BB528   <- [521]
  void                    Nop                !     
  val?            %528.1 = %521.2
  dr              %528.2 = Typecheck@0x55de2d7bb0f0[Type#291]
  goto BB258
BB529   <- [523]
  lgl$-           %529.0 = CastType           d     dn %523.0
  lgl$#-          %529.1 = CheckTrueFalse     e     %529.0
  void                    Branch                   %529.1 -> BB196 (if true) | BB100 (if false)
BB530   <- [523]
  fs              %530.0 = FrameState         R     0x55de2dc4ca10+4827: [%523.0], env=e0.3
  void                    Deopt              !v    %530.0, Typecheck@0x55de2d7bb0f0[Type#304], %523.0   !
BB307   <- [298]
  val?^ | miss    %307.0 = LdVar              eR    c, e0.3
  lgl$#-          %307.1 = Identical                <blt c>, %307.0   <true>
  void                    Branch                   %307.1 -> BB525 (if true) | BB526 (if false)
BB301   <- [298]
  (cls|spec|blt)  %301.0 = LdFun              !v    @, e0.3
  prom-           %301.1 = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p147, e0.3
  prom-           %301.2 = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p148, e0.3
  val?            %301.3 = Call               !v    %301.0(%301.1, %301.2) e0.3   <val?_>
  val?            %301.4 = %301.3
  goto BB302
BB297   <- [296, 312]
  val?            %297.0 = Phi                      %312.2:BB312, %296.1:BB296
  val?            %297.1 = %297.0
  val?            %297.2 = Extract2_1D        !v    %295.1, %297.1, e0.3   <val?_>
  lgl$-           %297.3 = AsLogical          e     %297.2
  lgl$-           %297.4 = LOr                      %517.5, %297.3
  lgl$-           %297.5 = %297.4
  goto BB298
BB539   <- [527]
  lgl-            %539.0 = CastType           d     dn %521.5
  lgl-            %539.1 = CallSafeBuiltin    wed   c(%527.0, %539.0)    <lgl->
  void                    StVar              lW    fromGroup, %539.1, e0.3
  val?^ | miss    %539.3 = LdVar              eR    verbose, e0.3
  val?            %539.4 = Force!<value>      !v    %539.3, e0.3   <lgl$->
  lgl$#-          %539.5 = CheckTrueFalse     we    %539.4
  void                    Branch                   %539.5 -> BB264 (if true) | BB260 (if false)
BB540   <- [527]
  void                    Nop                !     
  val?            %540.1 = %521.5
  dr              %540.2 = Typecheck@0x55de2d7bb0f0[Type#294]
  goto BB258
BB258   <- [528, 540]
  val?^ | miss    %258.0 = Phi                      %528.1:BB528, %540.1:BB540
  val?^ | miss    %258.1 = %258.0
  dr              %258.2 = Phi                      %528.2:BB528, %540.2:BB540
  dr              %258.3 = %258.2
  fs              %258.4 = FrameState         R     0x55de2dc4ca10+4572: [<blt c>, %521.2, %521.5], env=e0.3
  void                    Deopt              !v    %258.4, %258.3, %258.1   !
BB196   <- [529]
  (cls|spec|blt)  %196.0 = LdFun              !v    integer, e0.3
  val?            %196.1 = Call               !v    %196.0() e0.3   <val?_>
  void                    StVar              lW    found, %196.1, e0.3
  val?^ | miss    %196.3 = LdVar              eR    names, e0.3
  lgl$#-          %196.4 = Identical                <blt names>, %196.3   <@?>
  void                    Branch                   %196.4 -> BB252 (if true) | BB197 (if false)
BB100   <- [529]
  void                    Nop                !     
  goto BB101
BB525   <- [307]
  (cls|spec|blt)  %525.0 = LdFun              !v    @, <0x55de2854ebd8>, e0.3
  prom-           %525.1 = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p151, e0.3
  prom-           %525.2 = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p152, e0.3
  val?            %525.3 = Call               !v    %525.0(%525.1, %525.2) e0.3   <str$+>
  val?^ | miss    %525.4 = LdVar              eR    .eligibleSuperClasses, e0.3
  lgl$#-          %525.5 = Identical                %525.4, function(contains, simpleOnly) <(rir::Dispatch|...
  void                    Branch                   %525.5 -> BB537 (if true) | BB538 (if false)
BB526   <- [307]
  fs              %526.0 = FrameState         R     0x55de2dc4ca10+3124: [1L, %433.0, %290.1, %298.1], env=e0.3
  void                    Deopt              !v    %526.0, DeadBranchReached@0x55de2d7bb0f0[Test#24], %307.1   !
BB302   <- [301, 557]
  val?            %302.0 = Phi                      %301.4:BB301, %557.2:BB557
  val?            %302.1 = %302.0
  void                    StVar              lW    allLabels, %302.1, e0.3
  val?^ | miss    %302.3 = LdVar              eR    outerLabels, e0.3
  lgl$#-          %302.4 = Identical                %302.3, function(labels, new) <(rir::DispatchTable*)0x|...
  void                    Branch                   %302.4 -> BB531 (if true) | BB532 (if false)
BB264   <- [539]
  (cls|spec|blt)  %264.0 = LdFun              !v    cat, e0.3
  prom-           %264.1 = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p130, e0.3
  val?            %264.2 = Call               !v    %264.0(" .fI> #{additional group methods}:", %264.1, "
") e0.3
  goto BB261
BB260   <- [539]
  void                    Nop                !     
  goto BB261
BB252   <- [196]
  val?^ | miss    %252.0 = LdVar              eR    methods, e0.3
  val?            %252.1 = Force!             !v    %252.0, e0.3   <val?_>
  lgl$#-          %252.2 = IsType                   %252.1 isA val?+
  void                    Branch                   %252.2 -> BB565 (if true) | BB566 (if false)
BB197   <- [196]
  val?^ | miss    %197.0 = LdVar              eR    methods, e0.3
  val?            %197.1 = Force!             !v    %197.0, e0.3   <val?_>
  val?            %197.2 = CallBuiltin        !v    names(%197.1) e0.3
  val?            %197.3 = %197.2
  goto BB198
BB101   <- [100, 231, 234]
  val?^ | miss    %101.0 = LdVar              eR    doExcluded, e0.3
  lgl$#-          %101.1 = IsType                   %101.0 isA lgl$-
  void                    Branch                   %101.1 -> BB545 (if true) | BB546 (if false)
BB537   <- [525]
  prom-           %537.0 = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p153, e0.3
  prom-           %537.1 = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p156, e0.3
  val?            %537.2 = StaticCall         !v    .eligibleSuperClasses[0x55de2d80c8a0](%537.0, %537.1) e0.3   <(nil|str)->
  lgl$#-          %537.3 = IsType                   %537.2 isA val?-
  lgl$#-          %537.4 = IsType                   %525.3 isA val?+
  void                    Branch                   %537.4 -> BB555 (if true) | BB556 (if false)
BB538   <- [525]
  fs              %538.0 = FrameState         R     0x55de2dc4ca10+3284: [1L, %433.0, %290.1, <blt c>, %525.3], env=e0.3
  void                    Deopt              !v    %538.0, CallTarget@0x55de2d7bb0f0[Call#74], %525.4   !
BB531   <- [302]
  prom-           %531.0 = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p149, e0.3
  prom-           %531.1 = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p150 (!refl), e0.3
  val?            %531.2 = StaticCall         !v    outerLabels[0x55de3259f0b0](%531.0, %531.1) e0.3   <str->
  void                    StVar              lW    labels, %531.2, e0.3
  val?^ | miss    %531.4 = LdVar              eR    c, e0.3
  lgl$#-          %531.5 = Identical                <blt c>, %531.4   <true>
  void                    Branch                   %531.5 -> BB533 (if true) | BB534 (if false)
BB532   <- [302]
  fs              %532.0 = FrameState         R     0x55de2dc4ca10+3368: [1L, %433.0, %290.1], env=e0.3
  void                    Deopt              !v    %532.0, CallTarget@0x55de2d7bb0f0[Call#76], %302.3   !
BB261   <- [260, 264]
  val?^ | miss    %261.0 = LdVar              eR    c, e0.3
  lgl$#-          %261.1 = Identical                <blt c>, %261.0   <true>
  void                    Branch                   %261.1 -> BB563 (if true) | BB564 (if false)
BB565   <- [252]
  val?+           %565.0 = CastType           d     dn %252.1   <val?_>
  val+            %565.1 = CallSafeBuiltin    wed   names(%565.0) 
  val+            %565.2 = %565.1
  goto BB198
BB566   <- [252]
  fs              %566.0 = FrameState         R     0x55de2dc4ca10+4953: [<blt names>, %252.1], env=e0.3
  void                    Deopt              !v    %566.0, Typecheck@0x55de2d7bb0f0[Type#307], %252.1   !
BB198   <- [197, 565]
  val?            %198.0 = Phi                      %197.3:BB197, %565.2:BB565   <val?_>
  val?            %198.1 = %198.0
  void                    StVar              lW    nm, %198.1, e0.3
  val?^ | miss    %198.3 = LdVar              eR    seq_along, e0.3
  lgl$#-          %198.4 = Identical                <blt seq_along>, %198.3   <@?>
  void                    Branch                   %198.4 -> BB251 (if true) | BB199 (if false)
BB545   <- [101]
  lgl$-           %545.0 = CastType           d     dn %101.0
  lgl$#-          %545.1 = CheckTrueFalse     e     %545.0
  void                    Branch                   %545.1 -> BB189 (if true) | BB104 (if false)
BB546   <- [101]
  void                    Nop                !     
  val?^ | miss    %546.1 = %101.0
  dr              %546.2 = Typecheck@0x55de2d7bb0f0[Type#363]
  goto BB102
BB555   <- [537]
  val?+           %555.0 = CastType           d     dn %525.3   <str$+>
  void                    Branch                   %537.3 -> BB557 (if true) | BB558 (if false)
BB556   <- [537]
  void                    Nop                !     
  val?            %556.1 = %525.3
  dr              %556.2 = Typecheck@0x55de2d7bb0f0[Type#220]
  goto BB310
BB533   <- [531]
  val?^ | miss    %533.0 = LdVar              eR    supersList, e0.3
  lgl$#-          %533.1 = IsType                   %533.0 isA val?~- | miss
  void                    Branch                   %533.1 -> BB535 (if true) | BB536 (if false)
BB534   <- [531]
  void                    Nop                !     
  lgl$#-          %534.1 = %531.5
  dr              %534.2 = DeadBranchReached@0x55de2d7bb0f0[Test#25]
  goto BB305
BB563   <- [261]
  val?^ | miss    %563.0 = LdVar              eR    methods, e0.3
  lgl$#-          %563.1 = IsType                   %563.0 isA val?~+ | miss
  void                    Branch                   %563.1 -> BB567 (if true) | BB568 (if false)
BB564   <- [261]
  void                    Nop                !     
  lgl$#-          %564.1 = %261.1
  dr              %564.2 = DeadBranchReached@0x55de2d7bb0f0[Test#34]
  goto BB262
BB251   <- [198]
  val?^ | miss    %251.0 = LdVar              eR    methods, e0.3
  val?            %251.1 = Force!             !v    %251.0, e0.3   <val?_>
  val?            %251.2 = CallBuiltin        !v    seq_along(%251.1) e0.3
  val?            %251.3 = %251.2
  goto BB200
BB199   <- [198]
  val?^ | miss    %199.0 = LdVar              eR    methods, e0.3
  val?            %199.1 = Force!             !v    %199.0, e0.3   <val?_>
  val?            %199.2 = CallBuiltin        !v    seq_along(%199.1) e0.3
  val?            %199.3 = %199.2
  goto BB200
BB189   <- [545]
  val?^ | miss    %189.0 = LdVar              eR    methods, e0.3
  lgl$#-          %189.1 = IsType                   %189.0 isA val?~+ | miss
  void                    Branch                   %189.1 -> BB547 (if true) | BB548 (if false)
BB104   <- [545]
  void                    Nop                !     
  goto BB105
BB102   <- [546, 548, 550, 552, 554, 560]
  val?^ | miss    %102.0 = Phi                      %546.1:BB546, %548.1:BB548, %550.1:BB550, %552.1:BB552, %554.1:BB554, %560.1:BB560
  val?^ | miss    %102.1 = %102.0
  dr              %102.2 = Phi                      %546.2:BB546, %548.2:BB548, %550.2:BB550, %552.2:BB552, %554.2:BB554, %560.2:BB560
  dr              %102.3 = %102.2
  fs              %102.4 = FrameState         R     0x55de2dc4ca10+6248: [], env=e0.3
  void                    Deopt              !v    %102.4, %102.3, %102.1   !
BB557   <- [555]
  val?-           %557.0 = CastType           d     dn %537.2   <(nil|str)->
  (list|sym|char|lgl|int|real|str|vec|complex|raw|cls|spec|blt|prom|_|code|env|ast|expressions|dots|other)+ %557.1 = CallSafeBuiltin    wed   c(%555.0, %557.0, "ANY")    <str->
  (list|sym|char|lgl|int|real|str|vec|complex|raw|cls|spec|blt|prom|_|code|env|ast|expressions|dots|other)+ %557.2 = %557.1
  goto BB302
BB558   <- [555]
  void                    Nop                !     
  val?            %558.1 = %537.2
  dr              %558.2 = Typecheck@0x55de2d7bb0f0[Type#225]
  goto BB310
BB310   <- [556, 558]
  val?^ | miss    %310.0 = Phi                      %556.1:BB556, %558.1:BB558
  val?^ | miss    %310.1 = %310.0
  dr              %310.2 = Phi                      %556.2:BB556, %558.2:BB558
  dr              %310.3 = %310.2
  fs              %310.4 = FrameState         R     0x55de2dc4ca10+3326: [1L, %433.0, %290.1, <blt c>, %525.3, %537.2], env=e0.3
  void                    Deopt              !v    %310.4, %310.3, %310.1   !
BB535   <- [533]
  val?~- | miss   %535.0 = CastType           d     dn %533.0
  val?-           %535.1 = Force!<value>            %535.0,    <vec->
  val?^ | miss    %535.2 = LdVar              eR    list, e0.3
  lgl$#-          %535.3 = Identical                <blt list>, %535.2   <true>
  void                    Branch                   %535.3 -> BB541 (if true) | BB542 (if false)
BB536   <- [533]
  void                    Nop                !     
  val?^ | miss    %536.1 = %533.0
  dr              %536.2 = Typecheck@0x55de2d7bb0f0[Type#233]
  goto BB305
BB305   <- [534, 536, 542, 544]
  val?^ | miss    %305.0 = Phi                      %534.1:BB534, %536.1:BB536, %542.1:BB542, %544.1:BB544
  val?^ | miss    %305.1 = %305.0
  dr              %305.2 = Phi                      %534.2:BB534, %536.2:BB536, %542.2:BB542, %544.2:BB544
  dr              %305.3 = %305.2
  fs              %305.4 = FrameState         R     0x55de2dc4ca10+3419: [1L, %433.0, %290.1], env=e0.3
  void                    Deopt              !v    %305.4, %305.3, %305.1   !
BB567   <- [563]
  val?~+ | miss   %567.0 = CastType           d     dn %563.0
  val?+           %567.1 = Force!<value>            %567.0,    <vec+>
  val?^ | miss    %567.2 = LdVar              eR    groupmethods, e0.3
  lgl$#-          %567.3 = IsType                   %567.2 isA val?~- | miss
  void                    Branch                   %567.3 -> BB569 (if true) | BB570 (if false)
BB568   <- [563]
  void                    Nop                !     
  val?^ | miss    %568.1 = %563.0
  dr              %568.2 = Typecheck@0x55de2d7bb0f0[Type#301]
  goto BB262
BB262   <- [564, 568, 570]
  val?^ | miss    %262.0 = Phi                      %564.1:BB564, %568.1:BB568, %570.1:BB570
  val?^ | miss    %262.1 = %262.0
  dr              %262.2 = Phi                      %564.2:BB564, %568.2:BB568, %570.2:BB570
  dr              %262.3 = %262.2
  fs              %262.4 = FrameState         R     0x55de2dc4ca10+4676: [], env=e0.3
  void                    Deopt              !v    %262.4, %262.3, %262.1   !
BB200   <- [251, 199]
  val?            %200.0 = Phi                      %199.3:BB199, %251.3:BB251   <val?_>
  val?            %200.1 = %200.0
  val?+           %200.2 = ToForSeq           e     %200.1
  int$-           %200.3 = Length                   %200.2
  int$-           %200.4 = Inc                      0L
  lgl$-           %200.5 = Lt                 d     %200.3, %200.4, elided   <@?>
  lgl$#-          %200.6 = Identical                %200.5, true
  void                    Branch                   %200.6 -> BB250 (if true) | BB201 (if false)
BB547   <- [189]
  val?~+ | miss   %547.0 = CastType           d     dn %189.0
  val?+           %547.1 = Force!<value>            %547.0,    <vec+>
  lgl$#-          %547.2 = IsType                   %547.1 isA val+   <true>
  void                    Branch                   %547.2 -> BB549 (if true) | BB550 (if false)
BB548   <- [189]
  void                    Nop                !     
  val?^ | miss    %548.1 = %189.0
  dr              %548.2 = Typecheck@0x55de2d7bb0f0[Type#364]
  goto BB102
BB105   <- [104, 581]
  val?^ | miss    %105.0 = LdVar              eR    length, e0.3
  lgl$#-          %105.1 = Identical                <blt length>, %105.0   <true>
  void                    Branch                   %105.1 -> BB571 (if true) | BB572 (if false)
BB541   <- [535]
  val?^ | miss    %541.0 = LdVar              eR    allLabels, e0.3
  lgl$#-          %541.1 = IsType                   %541.0 isA val?~- | miss
  void                    Branch                   %541.1 -> BB543 (if true) | BB544 (if false)
BB542   <- [535]
  void                    Nop                !     
  lgl$#-          %542.1 = %535.3
  dr              %542.2 = DeadBranchReached@0x55de2d7bb0f0[Test#26]
  goto BB305
BB569   <- [567]
  val?~- | miss   %569.0 = CastType           d     dn %567.2
  val?-           %569.1 = Force!<value>            %569.0,    <vec->
  val+            %569.2 = CallSafeBuiltin    wed   c(%567.1, %569.1)    <vec+>
  void                    StVar              lW    methods, %569.2, e0.3
  goto BB95
BB570   <- [567]
  void                    Nop                !     
  val?^ | miss    %570.1 = %567.2
  dr              %570.2 = Typecheck@0x55de2d7bb0f0[Type#302]
  goto BB262
BB250   <- [200]
  void                    Nop                !     
  goto BB226
BB201   <- [200]
  val?            %201.0 = Extract2_1D        wed   %200.2, %200.4, elided
  void                    StVar              lW    i, %201.0, e0.3
  val?^ | miss    %201.2 = LdVar              eR    methods, e0.3
  val?            %201.3 = Force!             !v    %201.2, e0.3   <val?_>
  lgl$#-          %201.4 = IsType                   %201.3 isA val+   <@?>
  void                    Branch                   %201.4 -> BB249 (if true) | BB202 (if false)
BB549   <- [547]
  val?^ | miss    %549.0 = LdVar              eR    is.na, e0.3
  lgl$#-          %549.1 = Identical                <blt is.na>, %549.0   <true>
  void                    Branch                   %549.1 -> BB551 (if true) | BB552 (if false)
BB550   <- [547]
  void                    Nop                !     
  lgl$#-          %550.1 = %547.2
  dr              %550.2 = DeadBranchReached@0x55de2d7bb0f0[Test#48]
  goto BB102
BB571   <- [105]
  val?^ | miss    %571.0 = LdVar              eR    methods, e0.3
  lgl$#-          %571.1 = IsType                   %571.0 isA val?~+ | miss
  void                    Branch                   %571.1 -> BB573 (if true) | BB574 (if false)
BB572   <- [105]
  void                    Nop                !     
  lgl$#-          %572.1 = %105.1
  dr              %572.2 = DeadBranchReached@0x55de2d7bb0f0[Test#50]
  goto BB106
BB543   <- [541]
  val?~- | miss   %543.0 = CastType           d     dn %541.0
  val?-           %543.1 = Force!<value>            %543.0,    <str->
  val+            %543.2 = CallSafeBuiltin    wed   list(%543.1)    <vec$->
  val+            %543.3 = CallSafeBuiltin    wed   c(%535.1, %543.2)    <vec->
  void                    StVar              lW    supersList, %543.3, e0.3
  int$#-          %543.5 = %290.1
  goto BB288
BB544   <- [541]
  void                    Nop                !     
  val?^ | miss    %544.1 = %541.0
  dr              %544.2 = Typecheck@0x55de2d7bb0f0[Type#235]
  goto BB305
BB226   <- [225, 250]
  val?^ | miss    %226.0 = LdVar              eR    length, e0.3
  lgl$#-          %226.1 = Identical                <blt length>, %226.0   <@?>
  void                    Branch                   %226.1 -> BB237 (if true) | BB227 (if false)
BB249   <- [201]
  val?^ | miss    %249.0 = LdVar              eR    i, e0.3
  val?            %249.1 = Force!             !v    %249.0, e0.3   <val?_>
  val?            %249.2 = %249.1
  goto BB203
BB202   <- [201]
  prom-           %202.0 = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p122, e0.3
  prom-           %202.1 = %202.0
  goto BB203
BB551   <- [549]
  val?^ | miss    %551.0 = LdVar              eR    match, e0.3
  lgl$#-          %551.1 = Identical                %551.0, function(x, table, nomatch=NA, incomparables=N|...
  void                    Branch                   %551.1 -> BB553 (if true) | BB554 (if false)
BB552   <- [549]
  void                    Nop                !     
  lgl$#-          %552.1 = %549.1
  dr              %552.2 = DeadBranchReached@0x55de2d7bb0f0[Test#49]
  goto BB102
BB573   <- [571]
  val?~+ | miss   %573.0 = CastType           d     dn %571.0
  val?+           %573.1 = Force!<value>            %573.0,    <vec+>
  (int|real)$-    %573.2 = CallSafeBuiltin    wed   length(%573.1)    <int$->
  lgl$#-          %573.3 = IsType                   %573.2 isA int$-
  void                    Branch                   %573.3 -> BB579 (if true) | BB580 (if false)
BB574   <- [571]
  void                    Nop                !     
  val?^ | miss    %574.1 = %571.0
  dr              %574.2 = Typecheck@0x55de2d7bb0f0[Type#384]
  goto BB106
BB106   <- [572, 574]
  val?^ | miss    %106.0 = Phi                      %572.1:BB572, %574.1:BB574
  val?^ | miss    %106.1 = %106.0
  dr              %106.2 = Phi                      %572.2:BB572, %574.2:BB574
  dr              %106.3 = %106.2
  fs              %106.4 = FrameState         R     0x55de2dc4ca10+6458: [], env=e0.3
  void                    Deopt              !v    %106.4, %106.3, %106.1   !
BB237   <- [226]
  val?^ | miss    %237.0 = LdVar              eR    found, e0.3
  val?            %237.1 = Force!             !v    %237.0, e0.3   <val?_>
  lgl$#-          %237.2 = IsType                   %237.1 isA val?+
  void                    Branch                   %237.2 -> BB577 (if true) | BB578 (if false)
BB227   <- [226]
  val?^ | miss    %227.0 = LdVar              eR    found, e0.3
  val?            %227.1 = Force!             !v    %227.0, e0.3   <val?_>
  val?            %227.2 = CallBuiltin        !v    length(%227.1) e0.3
  val?            %227.3 = %227.2
  goto BB228
BB203   <- [202, 249]
  val?            %203.0 = Phi                      %249.2:BB249, %202.1:BB202
  val?            %203.1 = %203.0
  val?            %203.2 = Extract2_1D        !v    %201.3, %203.1, e0.3   <val?_>
  void                    StVar              lW    m, %203.2, e0.3
  val?^ | miss    %203.4 = LdVar              eR    is.environment, e0.3
  lgl$#-          %203.5 = Identical                <blt is.environment>, %203.4   <@?>
  void                    Branch                   %203.5 -> BB248 (if true) | BB204 (if false)
BB553   <- [551]
  val?^ | miss    %553.0 = LdVar              eR    names, e0.3
  lgl$#-          %553.1 = Identical                %553.0, <blt names>
  void                    Branch                   %553.1 -> BB559 (if true) | BB560 (if false)
BB554   <- [551]
  void                    Nop                !     
  val?^ | miss    %554.1 = %551.0
  dr              %554.2 = CallTarget@0x55de2d7bb0f0[Call#129]
  goto BB102
BB579   <- [573]
  int$-           %579.0 = CastType           d     dn %573.2
  lgl$-           %579.1 = Gt                 d     %579.0, 1L, elided   <lgl$->
  lgl$#-          %579.2 = CheckTrueFalse     e     %579.1
  void                    Branch                   %579.2 -> BB176 (if true) | BB110 (if false)
BB580   <- [573]
  void                    Nop                !     
  (int|real)$-    %580.1 = %573.2
  dr              %580.2 = Typecheck@0x55de2d7bb0f0[Type#385]
  goto BB108
BB577   <- [237]
  val?+           %577.0 = CastType           d     dn %237.1   <val?_>
  real$-          %577.1 = CallSafeBuiltin    wed   length(%577.0) 
  real$-          %577.2 = %577.1
  goto BB228
BB578   <- [237]
  fs              %578.0 = FrameState         R     0x55de2dc4ca10+6015: [<blt length>, %237.1], env=e0.3
  void                    Deopt              !v    %578.0, Typecheck@0x55de2d7bb0f0[Type#355], %237.1   !
BB228   <- [227, 577]
  val?            %228.0 = Phi                      %227.3:BB227, %577.2:BB577   <val?_>
  val?            %228.1 = %228.0
  lgl$#-          %228.2 = CheckTrueFalse     we    %228.1
  void                    Branch                   %228.2 -> BB236 (if true) | BB229 (if false)
BB248   <- [203]
  val             %248.0 = ChkMissing         e     %203.2
  lgl$#-          %248.1 = CallSafeBuiltin    wed   is.environment(%203.2) 
  lgl$#-          %248.2 = %248.1
  goto BB205
BB204   <- [203]
  val             %204.0 = ChkMissing         e     %203.2
  lgl$#-          %204.1 = CallSafeBuiltin    wed   is.environment(%203.2) 
  lgl$#-          %204.2 = %204.1
  goto BB205
BB559   <- [553]
  val+            %559.0 = CallSafeBuiltin    wed   names(%547.1)    <str->
  val?^ | miss    %559.1 = LdVar              eR    as.character, e0.3
  lgl$#-          %559.2 = Identical                %559.1, <blt as.character>
  void                    Branch                   %559.2 -> BB561 (if true) | BB562 (if false)
BB560   <- [553]
  void                    Nop                !     
  val?^ | miss    %560.1 = %553.0
  dr              %560.2 = CallTarget@0x55de2d7bb0f0[Call#130]
  goto BB102
BB176   <- [579]
  val?^ | miss    %176.0 = LdVar              eR    paste, e0.3
  lgl$#-          %176.1 = Identical                %176.0, function(..., sep=" ", collapse=NULL, recycle0|...
  void                    Branch                   %176.1 -> BB589 (if true) | BB590 (if false)
BB110   <- [579]
  void                    Nop                !     
  goto BB111
BB108   <- [580, 590]
  val?^ | miss    %108.0 = Phi                      %580.1:BB580, %590.1:BB590
  val?^ | miss    %108.1 = %108.0
  dr              %108.2 = Phi                      %580.2:BB580, %590.2:BB590
  dr              %108.3 = %108.2
  fs              %108.4 = FrameState         R     0x55de2dc4ca10+6549: [%573.2], env=e0.3
  void                    Deopt              !v    %108.4, %108.3, %108.1   !
BB236   <- [228]
  (cls|spec|blt)  %236.0 = LdFun              !v    unlist, e0.3
  prom-           %236.1 = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p115, e0.3
  val?            %236.2 = NamedCall          !v    %236.0(%236.1, recursive=false) e0.3   <val?_>
  void                    StVar              lW    methods, %236.2, e0.3
  goto BB230
BB229   <- [228]
  void                    Nop                !     
  goto BB230
BB205   <- [204, 248]
  lgl$#-          %205.0 = Phi                      %204.2:BB204, %248.2:BB248   <val?_>
  lgl$#-          %205.1 = %205.0
  void                    Branch                   %205.1 -> BB240 (if true) | BB206 (if false)
BB561   <- [559]
  val?^ | miss    %561.0 = LdVar              eR    excluded, e0.3
  val?            %561.1 = Force!<wrapped>    !v    %561.0, e0.3   <str$->
  val?            %561.2 = CallBuiltin        !v    as.character(%561.1) e0.3   <str$->
  lgl$#-          %561.3 = IsType                   %561.2 isA val?+
  void                    Branch                   %561.3 -> BB575 (if true) | BB576 (if false)
BB562   <- [559]
  prom-           %562.0 = MkArg                    %559.0, .findInheritedMethods[0x55de2f88e550]_p98 (!refl), e0.3
  val?~           %562.1 = CastType                 up %562.0
  prom-           %562.2 = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p100, e0.3
  val?^           %562.3 = CastType                 up %562.2
  fs              %562.4 = FrameState         R     0x55de2dc4ca10+6415: [%547.1, <blt is.na>], env=e0.3
  env             e562.5 = (MkEnv)            l     x=%562.1, table=%562.3, nomatch(miss)=NA, incomparables(miss)=nil, parent=R_BaseNamespace, context 0
  fs              %562.6 = FrameState         R     0x55de28d63d40+9: [%559.0], env=e562.5, next=%562.4
  void                    Deopt              !v    %562.6, CallTarget@0x55de2d7bb0f0[Call#131], %559.1   !
BB589   <- [176]
  prom-           %589.0 = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p93, e0.3
  dots-           %589.1 = DotsList           l     %589.0
  val?^ | miss    %589.2 = CastType                 up %589.0
  env             e589.3 = MkEnv              l     ...=%589.1, sep(miss)=" ", collapse="#", recycle0(miss)=false, parent=R_BaseNamespace, context 0
  val?            %589.4 = Force!             !vL   %589.2, e589.3
  val+            %589.5 = CallSafeBuiltin    wed   list(%589.4)    <vec->
  val+            %589.6 = CallSafeBuiltin    wed   paste(%589.5, " ", "#", false)    <str$->
  void                    StVar              lW    defaultLabel, %589.6, e0.3
  val?^ | miss    %589.8 = LdVar              eR    match, e0.3
  lgl$#-          %589.9 = Identical                %589.8, function(x, table, nomatch=NA, incomparables=N|...
  void                    Branch                   %589.9 -> BB595 (if true) | BB596 (if false)
BB590   <- [176]
  void                    Nop                !     
  val?^ | miss    %590.1 = %176.0
  dr              %590.2 = CallTarget@0x55de2d7bb0f0[Call#133]
  goto BB108
BB111   <- [110, 185, 633]
  val?^ | miss    %111.0 = LdVar              eR    length, e0.3
  lgl$#-          %111.1 = Identical                <blt length>, %111.0   <true>
  void                    Branch                   %111.1 -> BB591 (if true) | BB592 (if false)
BB230   <- [229, 236]
  val?^ | miss    %230.0 = LdVar              eR    methods, e0.3
  val?            %230.1 = Force!             !v    %230.0, e0.3   <val?_>
  lgl$-           %230.2 = Is                       %230.1, list
  lgl$-           %230.3 = Not                d     %230.2, elided
  lgl$#-          %230.4 = CheckTrueFalse     e     %230.3
  void                    Branch                   %230.4 -> BB232 (if true) | BB231 (if false)
BB240   <- [205]
  (cls|spec|blt)  %240.0 = LdFun              !v    .checkDuplicateMethodClasses, e0.3
  prom-           %240.1 = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p116, e0.3
  prom-           %240.2 = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p117, e0.3
  prom-           %240.3 = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p118, e0.3
  val?            %240.4 = Call               !v    %240.0(%240.1, %240.2, %240.3) e0.3   <val?_>
  val?^ | miss    %240.5 = LdVar              eR    methods, e0.3
  val?            %240.6 = Force!             !v    %240.5, e0.3   <val?_>
  val?^ | miss    %240.7 = LdVar              eR    i, e0.3
  val?            %240.8 = Force!             !v    %240.7, e0.3   <val?_>
  lgl$#-          %240.9 = IsType                   %240.8 isA val?+
  lgl$#-          %240.10 = IsType                   %240.4 isA val?+
  lgl$#-          %240.11 = IsType                   %240.6 isA val?+
  void                    Branch                   %240.10 -> BB583 (if true) | BB584 (if false)
BB206   <- [205]
  void                    Nop                !     
  int$-           %206.1 = %200.4
  goto BB207
BB575   <- [561]
  val?+           %575.0 = CastType           d     dn %561.2   <str$->
  val+            %575.1 = CallSafeBuiltin    wed   match(%559.0, %575.0, NA, nil)    <int->
  lgl$#-          %575.2 = IsType                   %575.1 isA int-
  void                    Branch                   %575.2 -> BB581 (if true) | BB582 (if false)
BB576   <- [561]
  prom-           %576.0 = MkArg                    %561.2, .findInheritedMethods[0x55de2f88e550]_p100 (!refl), e0.3
  val?~           %576.1 = CastType                 up %576.0
  prom-           %576.2 = MkArg                    %559.0, .findInheritedMethods[0x55de2f88e550]_p98 (!refl), e0.3
  val?~           %576.3 = CastType                 up %576.2
  fs              %576.4 = FrameState         R     0x55de2dc4ca10+6415: [%547.1, <blt is.na>], env=e0.3
  env             e576.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%576.1, x=%576.3, parent=R_BaseNamespace, context 0
  fs              %576.6 = FrameState         R     0x55de28d63d40+23: [%559.0, %561.2], env=e576.5, next=%576.4
  void                    Deopt              !v    %576.6, Typecheck@0x55de28db6cb0[Type#1], %561.2   !
BB595   <- [589]
  val?^ | miss    %595.0 = LdVar              eR    names, e0.3
  lgl$#-          %595.1 = Identical                %595.0, <blt names>
  void                    Branch                   %595.1 -> BB597 (if true) | BB598 (if false)
BB596   <- [589]
  void                    Nop                !     
  val?^ | miss    %596.1 = %589.8
  dr              %596.2 = CallTarget@0x55de2d7bb0f0[Call#135]
  goto BB177
BB591   <- [111]
  val?^ | miss    %591.0 = LdVar              eR    methods, e0.3
  lgl$#-          %591.1 = IsType                   %591.0 isA val?~+ | miss
  void                    Branch                   %591.1 -> BB599 (if true) | BB600 (if false)
BB592   <- [111]
  void                    Nop                !     
  lgl$#-          %592.1 = %111.1
  dr              %592.2 = DeadBranchReached@0x55de2d7bb0f0[Test#53]
  goto BB112
BB232   <- [230]
  val?^ | miss    %232.0 = LdVar              eR    list, e0.3
  lgl$#-          %232.1 = Identical                <blt list>, %232.0   <@?>
  void                    Branch                   %232.1 -> BB235 (if true) | BB233 (if false)
BB231   <- [230]
  void                    Nop                !     
  goto BB101
BB583   <- [240]
  val?+           %583.0 = CastType           d     dn %240.4   <val?_>
  void                    Branch                   %240.11 -> BB585 (if true) | BB586 (if false)
BB584   <- [240]
  void                    Nop                !     
  val?            %584.1 = %240.4
  dr              %584.2 = Typecheck@0x55de2d7bb0f0[Type#325]
  goto BB241
BB207   <- [206, 244, 214]
  int$-           %207.0 = Phi                      %206.1:BB206, %214.1:BB214, %244.3:BB244
  int$-           %207.1 = %207.0
  int$-           %207.2 = Inc                      %207.1
  lgl$-           %207.3 = Lt                 d     %200.3, %207.2, elided
  lgl$#-          %207.4 = Identical                %207.3, true
  void                    Branch                   %207.4 -> BB225 (if true) | BB208 (if false)
BB581   <- [575]
  int-            %581.0 = CastType           d     dn %575.1
  lgl-            %581.1 = CallSafeBuiltin    wed   is.na(%581.0)    <lgl->
  val?            %581.2 = Extract1_1D        wed   %547.1, %581.1, elided   <vec+>
  void                    StVar              lW    methods, %581.2, e0.3
  goto BB105
BB582   <- [575]
  prom-           %582.0 = MkArg                    %575.0, .findInheritedMethods[0x55de2f88e550]_p100 (!refl), e0.3
  val?~           %582.1 = CastType                 up %582.0
  prom-           %582.2 = MkArg                    %559.0, .findInheritedMethods[0x55de2f88e550]_p98 (!refl), e0.3
  val?~           %582.3 = CastType                 up %582.2
  fs              %582.4 = FrameState         R     0x55de2dc4ca10+6415: [%547.1, <blt is.na>], env=e0.3
  env             e582.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%582.1, x=%582.3, parent=R_BaseNamespace, context 0
  fs              %582.6 = FrameState         R     0x55de28d63d40+69: [%575.1], env=e582.5, next=%582.4
  void                    Deopt              !v    %582.6, Typecheck@0x55de2d7bb0f0[Type#380], %575.1   !
BB597   <- [595]
  val?^ | miss    %597.0 = LdVar              eR    methods, e0.3
  val?            %597.1 = Force!<value>      !v    %597.0, e0.3   <vec+>
  val?            %597.2 = CallBuiltin        !v    names(%597.1) e0.3   <str->
  lgl$#-          %597.3 = IsType                   %597.2 isA val?+
  lgl$#-          %597.4 = IsType                   %589.6 isA val?-
  void                    Branch                   %597.4 -> BB611 (if true) | BB612 (if false)
BB598   <- [595]
  void                    Nop                !     
  val?^ | miss    %598.1 = %595.0
  dr              %598.2 = CallTarget@0x55de2d7bb0f0[Call#136]
  goto BB177
BB177   <- [596, 598]
  val?^ | miss    %177.0 = Phi                      %596.1:BB596, %598.1:BB598
  val?^ | miss    %177.1 = %177.0
  dr              %177.2 = Phi                      %596.2:BB596, %598.2:BB598
  dr              %177.3 = %177.2
  fs              %177.4 = FrameState         R     0x55de2dc4ca10+6636: [], env=e0.3
  void                    Deopt              !v    %177.4, %177.3, %177.1   !
BB599   <- [591]
  val?~+ | miss   %599.0 = CastType           d     dn %591.0
  val?+           %599.1 = Force!<value>            %599.0,    <vec+>
  (int|real)$-    %599.2 = CallSafeBuiltin    wed   length(%599.1)    <int$->
  lgl$#-          %599.3 = IsType                   %599.2 isA int$-
  void                    Branch                   %599.3 -> BB603 (if true) | BB604 (if false)
BB600   <- [591]
  void                    Nop                !     
  val?^ | miss    %600.1 = %591.0
  dr              %600.2 = Typecheck@0x55de2d7bb0f0[Type#405]
  goto BB112
BB112   <- [592, 600]
  val?^ | miss    %112.0 = Phi                      %592.1:BB592, %600.1:BB600
  val?^ | miss    %112.1 = %112.0
  dr              %112.2 = Phi                      %592.2:BB592, %600.2:BB600
  dr              %112.3 = %112.2
  fs              %112.4 = FrameState         R     0x55de2dc4ca10+6881: [], env=e0.3
  void                    Deopt              !v    %112.4, %112.3, %112.1   !
BB235   <- [232]
  val?^ | miss    %235.0 = LdVar              eR    methods, e0.3
  val?            %235.1 = Force!             !v    %235.0, e0.3   <val?_>
  val+            %235.2 = CallSafeBuiltin    wed   list(%235.1) 
  val+            %235.3 = %235.2
  goto BB234
BB233   <- [232]
  val?^ | miss    %233.0 = LdVar              eR    methods, e0.3
  val?            %233.1 = Force!             !v    %233.0, e0.3   <val?_>
  val+            %233.2 = CallSafeBuiltin    wed   list(%233.1) 
  val+            %233.3 = %233.2
  goto BB234
BB585   <- [583]
  val?+           %585.0 = CastType           d     dn %240.6   <val?_>
  void                    Branch                   %240.9 -> BB587 (if true) | BB588 (if false)
BB586   <- [583]
  void                    Nop                !     
  val?            %586.1 = %240.6
  dr              %586.2 = Typecheck@0x55de2d7bb0f0[Type#326]
  goto BB241
BB241   <- [584, 586, 588]
  val?^ | miss    %241.0 = Phi                      %584.1:BB584, %586.1:BB586, %588.1:BB588
  val?^ | miss    %241.1 = %241.0
  dr              %241.2 = Phi                      %584.2:BB584, %586.2:BB586, %588.2:BB588
  dr              %241.3 = %241.2
  fs              %241.4 = FrameState         R     0x55de2dc4ca10+5377: [%200.2, %200.3, %200.4, %240.4, %240.6, %240.8], env=e0.3
  void                    Deopt              !v    %241.4, %241.3, %241.1   !
BB225   <- [207]
  void                    Nop                !     
  goto BB226
BB208   <- [207]
  val?            %208.0 = Extract2_1D        wed   %200.2, %207.2, elided
  void                    StVar              lW    i, %208.0, e0.3
  val?^ | miss    %208.2 = LdVar              eR    methods, e0.3
  val?            %208.3 = Force!             !v    %208.2, e0.3   <val?_>
  lgl$#-          %208.4 = IsType                   %208.3 isA val+   <@?>
  void                    Branch                   %208.4 -> BB224 (if true) | BB209 (if false)
BB611   <- [597]
  val-            %611.0 = CastType           d     dn %589.6   <str$->
  void                    Branch                   %597.3 -> BB613 (if true) | BB614 (if false)
BB612   <- [597]
  void                    Nop                !     
  val+            %612.1 = %589.6
  dr              %612.2 = Typecheck@0x55de2d7bb0f0[Type#389]
  goto BB179
BB603   <- [599]
  int$-           %603.0 = CastType           d     dn %599.2
  lgl$-           %603.1 = Gt                 d     %603.0, 1L, elided   <lgl$->
  lgl$#-          %603.2 = CheckTrueFalse     e     %603.1
  void                    Branch                   %603.2 -> BB168 (if true) | BB116 (if false)
BB604   <- [599]
  fs              %604.0 = FrameState         R     0x55de2dc4ca10+6972: [%599.2], env=e0.3
  void                    Deopt              !v    %604.0, Typecheck@0x55de2d7bb0f0[Type#406], %599.2   !
BB234   <- [233, 235]
  val+            %234.0 = Phi                      %233.3:BB233, %235.3:BB235   <val?_>
  val+            %234.1 = %234.0
  void                    StVar              lW    methods, %234.1, e0.3
  goto BB101
BB587   <- [585]
  val?+           %587.0 = CastType           d     dn %240.8   <val?_>
  val?+           %587.1 = Subassign2_1D      wed   %583.0, %585.0, %587.0, elided
  void                    StVar              lW    methods, %587.1, e0.3
  val?^ | miss    %587.3 = LdVar              eR    c, e0.3
  lgl$#-          %587.4 = Identical                <blt c>, %587.3   <@?>
  void                    Branch                   %587.4 -> BB245 (if true) | BB243 (if false)
BB588   <- [585]
  void                    Nop                !     
  val?            %588.1 = %240.8
  dr              %588.2 = Typecheck@0x55de2d7bb0f0[Type#327]
  goto BB241
BB224   <- [208]
  val?^ | miss    %224.0 = LdVar              eR    i, e0.3
  val?            %224.1 = Force!             !v    %224.0, e0.3   <val?_>
  val?            %224.2 = %224.1
  goto BB210
BB209   <- [208]
  prom-           %209.0 = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p112, e0.3
  prom-           %209.1 = %209.0
  goto BB210
BB613   <- [611]
  val?+           %613.0 = CastType           d     dn %597.2   <str->
  val+            %613.1 = CallSafeBuiltin    wed   match(%611.0, %613.0, 0L, nil)    <int$->
  lgl$#-          %613.2 = IsType                   %613.1 isA int$-
  void                    Branch                   %613.2 -> BB615 (if true) | BB616 (if false)
BB614   <- [611]
  void                    Nop                !     
  val?            %614.1 = %597.2
  dr              %614.2 = Typecheck@0x55de28db6cb0[Type#1]
  goto BB179
BB179   <- [612, 614]
  val?^ | miss    %179.0 = Phi                      %612.1:BB612, %614.1:BB614
  val?^ | miss    %179.1 = %179.0
  dr              %179.2 = Phi                      %612.2:BB612, %614.2:BB614
  dr              %179.3 = %179.2
  fs              %179.4 = FrameState         R     0x55de2dc4ca10+6678: [], env=e0.3
  prom-           %179.5 = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p95 (!refl), e0.3
  val?^           %179.6 = CastType                 up %179.5
  prom-           %179.7 = MkArg                    %597.2, .findInheritedMethods[0x55de2f88e550]_p96 (!refl), e0.3
  val?~           %179.8 = CastType                 up %179.7
  env             e179.9 = (MkEnv)            l     incomparables(miss)=nil, nomatch=0L, table=%179.8, x=%179.6, parent=R_BaseNamespace, context 0
  fs              %179.10 = FrameState         R     0x55de28d63d40+23: [%589.6, %597.2], env=e179.9, next=%179.4
  void                    Deopt              !v    %179.10, %179.3, %179.1   !
BB168   <- [603]
  val?^ | miss    %168.0 = LdVar              eR    verbose, e0.3
  val?            %168.1 = Force!<wrapped>    !v    %168.0, e0.3   <lgl$->
  lgl$#-          %168.2 = CheckTrueFalse     we    %168.1
  void                    Branch                   %168.2 -> BB175 (if true) | BB169 (if false)
BB116   <- [603]
  void                    Nop                !     
  goto BB117
BB245   <- [587]
  val?^ | miss    %245.0 = LdVar              eR    found, e0.3
  val?            %245.1 = Force!             !v    %245.0, e0.3   <val?_>
  val?^ | miss    %245.2 = LdVar              eR    i, e0.3
  val?            %245.3 = Force!             !v    %245.2, e0.3   <val?_>
  lgl$#-          %245.4 = IsType                   %245.3 isA val?+
  lgl$#-          %245.5 = IsType                   %245.1 isA val?+
  void                    Branch                   %245.5 -> BB593 (if true) | BB594 (if false)
BB243   <- [587]
  val?^ | miss    %243.0 = LdVar              eR    found, e0.3
  val?            %243.1 = Force!             !v    %243.0, e0.3   <val?_>
  val?^ | miss    %243.2 = LdVar              eR    i, e0.3
  val?            %243.3 = Force!             !v    %243.2, e0.3   <val?_>
  val?            %243.4 = CallBuiltin        !v    c(%243.1, %243.3) e0.3
  val?            %243.5 = %243.4
  goto BB244
BB210   <- [209, 224]
  val?            %210.0 = Phi                      %224.2:BB224, %209.1:BB209
  val?            %210.1 = %210.0
  val?            %210.2 = Extract2_1D        !v    %208.3, %210.1, e0.3   <val?_>
  void                    StVar              lW    m, %210.2, e0.3
  val?^ | miss    %210.4 = LdVar              eR    is.environment, e0.3
  lgl$#-          %210.5 = Identical                <blt is.environment>, %210.4   <@?>
  void                    Branch                   %210.5 -> BB223 (if true) | BB211 (if false)
BB615   <- [613]
  int$-           %615.0 = CastType           d     dn %613.1
  void                    StVar              lW    i, %615.0, e0.3
  lgl$-           %615.2 = Gt                 d     %615.0, 0L, elided   <lgl$->
  lgl$#-          %615.3 = CheckTrueFalse     e     %615.2
  void                    Branch                   %615.3 -> BB186 (if true) | BB185 (if false)
BB616   <- [613]
  fs              %616.0 = FrameState         R     0x55de2dc4ca10+6678: [], env=e0.3
  prom-           %616.1 = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p95 (!refl), e0.3
  val?^           %616.2 = CastType                 up %616.1
  prom-           %616.3 = MkArg                    %613.0, .findInheritedMethods[0x55de2f88e550]_p96 (!refl), e0.3
  val?~           %616.4 = CastType                 up %616.3
  env             e616.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch=0L, table=%616.4, x=%616.2, parent=R_BaseNamespace, context 0
  fs              %616.6 = FrameState         R     0x55de28d63d40+69: [%613.1], env=e616.5, next=%616.0
  void                    Deopt              !v    %616.6, Typecheck@0x55de2d7bb0f0[Type#393], %613.1   !
BB175   <- [168]
  (cls|spec|blt)  %175.0 = LdFun              !v    cat, e0.3
  prom-           %175.1 = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p91, e0.3
  val?            %175.2 = Call               !v    %175.0(" .fI> length(methods) = ", %175.1, " --> ambiguity
") e0.3
  goto BB170
BB169   <- [168]
  void                    Nop                !     
  goto BB170
BB117   <- [116, 641]
  val?^ | miss    %117.0 = LdVar              eR    simpleOnly, e0.3
  val?            %117.1 = Force!<wrapped>    !v    %117.0, e0.3   <lgl$->
  lgl$-           %117.2 = AsLogical          e     %117.1
  lgl$#-          %117.3 = Identical                %117.2, false
  void                    Branch                   %117.3 -> BB167 (if true) | BB120 (if false)
BB593   <- [245]
  val?+           %593.0 = CastType           d     dn %245.1   <val?_>
  void                    Branch                   %245.4 -> BB601 (if true) | BB602 (if false)
BB594   <- [245]
  void                    Nop                !     
  val?            %594.1 = %245.1
  dr              %594.2 = Typecheck@0x55de2d7bb0f0[Type#330]
  goto BB246
BB244   <- [243, 601]
  val?            %244.0 = Phi                      %243.5:BB243, %601.2:BB601   <val?_>
  val?            %244.1 = %244.0
  void                    StVar              lW    found, %244.1, e0.3
  int$-           %244.3 = %200.4
  goto BB207
BB223   <- [210]
  val             %223.0 = ChkMissing         e     %210.2
  lgl$#-          %223.1 = CallSafeBuiltin    wed   is.environment(%210.2) 
  lgl$#-          %223.2 = %223.1
  goto BB212
BB211   <- [210]
  val             %211.0 = ChkMissing         e     %210.2
  lgl$#-          %211.1 = CallSafeBuiltin    wed   is.environment(%210.2) 
  lgl$#-          %211.2 = %211.1
  goto BB212
BB186   <- [615]
  val?^ | miss    %186.0 = LdVar              eR    methods, e0.3
  lgl$#-          %186.1 = IsType                   %186.0 isA val?~+ | miss
  void                    Branch                   %186.1 -> BB627 (if true) | BB628 (if false)
BB185   <- [615]
  void                    Nop                !     
  goto BB111
BB170   <- [169, 175]
  (cls|spec|blt)  %170.0 = LdFun              !v    .getBestMethods, <0x55de34dd0520>, e0.3
  prom-           %170.1 = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p68, e0.3
  prom-           %170.2 = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p69, e0.3
  prom-           %170.3 = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p70, e0.3
  prom-           %170.4 = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p71, e0.3
  val?            %170.5 = NamedCall          !v    %170.0(%170.1, %170.2, %170.3, verbose=%170.4) e0.3   <int$->
  lgl$#-          %170.6 = IsType                   %170.5 isA int$-
  void                    Branch                   %170.6 -> BB619 (if true) | BB620 (if false)
BB167   <- [117]
  void                    Nop                !     
  lgl$-           %167.1 = %117.2
  goto BB123
BB120   <- [117]
  val?^ | miss    %120.0 = LdVar              eR    length, e0.3
  lgl$#-          %120.1 = Identical                <blt length>, %120.0   <true>
  void                    Branch                   %120.1 -> BB621 (if true) | BB622 (if false)
BB601   <- [593]
  val?+           %601.0 = CastType           d     dn %245.3   <val?_>
  val+            %601.1 = CallSafeBuiltin    wed   c(%593.0, %601.0) 
  val+            %601.2 = %601.1
  goto BB244
BB602   <- [593]
  void                    Nop                !     
  val?            %602.1 = %245.3
  dr              %602.2 = Typecheck@0x55de2d7bb0f0[Type#331]
  goto BB246
BB246   <- [594, 602]
  val?^ | miss    %246.0 = Phi                      %594.1:BB594, %602.1:BB602
  val?^ | miss    %246.1 = %246.0
  dr              %246.2 = Phi                      %594.2:BB594, %602.2:BB602
  dr              %246.3 = %246.2
  fs              %246.4 = FrameState         R     0x55de2dc4ca10+5480: [%200.2, %200.3, %200.4, <blt c>, %245.1, %245.3], env=e0.3
  void                    Deopt              !v    %246.4, %246.3, %246.1   !
BB212   <- [223, 211]
  lgl$#-          %212.0 = Phi                      %211.2:BB211, %223.2:BB223   <val?_>
  lgl$#-          %212.1 = %212.0
  void                    Branch                   %212.1 -> BB215 (if true) | BB213 (if false)
BB627   <- [186]
  val?~+ | miss   %627.0 = CastType           d     dn %186.0
  val?+           %627.1 = Force!<value>            %627.0,    <vec+>
  lgl$#-          %627.2 = IsType                   %627.1 isA val+   <true>
  void                    Branch                   %627.2 -> BB629 (if true) | BB630 (if false)
BB628   <- [186]
  void                    Nop                !     
  val?^ | miss    %628.1 = %186.0
  dr              %628.2 = Typecheck@0x55de2d7bb0f0[Type#396]
  goto BB183
BB619   <- [170]
  int$-           %619.0 = CastType           d     dn %170.5
  void                    StVar              lW    select, %619.0, e0.3
  val?^ | miss    %619.2 = LdVar              eR    length, e0.3
  lgl$#-          %619.3 = Identical                <blt length>, %619.2   <true>
  void                    Branch                   %619.3 -> BB635 (if true) | BB636 (if false)
BB620   <- [170]
  fs              %620.0 = FrameState         R     0x55de2dc4ca10+7131: [%170.5], env=e0.3
  void                    Deopt              !v    %620.0, Typecheck@0x55de2d7bb0f0[Type#415], %170.5   !
BB123   <- [167, 631]
  lgl$-           %123.0 = Phi                      %631.4:BB631, %167.1:BB167
  lgl$-           %123.1 = %123.0
  lgl$#-          %123.2 = CheckTrueFalse     e     %123.1
  void                    Branch                   %123.2 -> BB159 (if true) | BB124 (if false)
BB621   <- [120]
  val?^ | miss    %621.0 = LdVar              eR    methods, e0.3
  lgl$#-          %621.1 = IsType                   %621.0 isA val?~+ | miss
  void                    Branch                   %621.1 -> BB623 (if true) | BB624 (if false)
BB622   <- [120]
  void                    Nop                !     
  lgl$#-          %622.1 = %120.1
  dr              %622.2 = DeadBranchReached@0x55de2d7bb0f0[Test#57]
  goto BB118
BB215   <- [212]
  (cls|spec|blt)  %215.0 = LdFun              !v    .checkDuplicateMethodClasses, e0.3
  prom-           %215.1 = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p106, e0.3
  prom-           %215.2 = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p107, e0.3
  prom-           %215.3 = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p108, e0.3
  val?            %215.4 = Call               !v    %215.0(%215.1, %215.2, %215.3) e0.3   <val?_>
  val?^ | miss    %215.5 = LdVar              eR    methods, e0.3
  val?            %215.6 = Force!             !v    %215.5, e0.3   <val?_>
  val?^ | miss    %215.7 = LdVar              eR    i, e0.3
  val?            %215.8 = Force!             !v    %215.7, e0.3   <val?_>
  lgl$#-          %215.9 = IsType                   %215.8 isA val?+
  lgl$#-          %215.10 = IsType                   %215.4 isA val?+
  lgl$#-          %215.11 = IsType                   %215.6 isA val?+
  void                    Branch                   %215.10 -> BB605 (if true) | BB606 (if false)
BB213   <- [212]
  void                    Nop                !     
  goto BB214
BB629   <- [627]
  int$-           %629.0 = Minus              d     %615.0, elided
  val?            %629.1 = Extract1_1D        wed   %627.1, %629.0, elided   <vec+>
  void                    StVar              lW    methods, %629.1, e0.3
  val?^ | miss    %629.3 = LdVar              eR    fromGroup, e0.3
  lgl$#-          %629.4 = IsType                   %629.3 isA lgl-
  void                    Branch                   %629.4 -> BB633 (if true) | BB634 (if false)
BB630   <- [627]
  void                    Nop                !     
  lgl$#-          %630.1 = %627.2
  dr              %630.2 = DeadBranchReached@0x55de2d7bb0f0[Test#51]
  goto BB183
BB183   <- [628, 630]
  val?^ | miss    %183.0 = Phi                      %628.1:BB628, %630.1:BB630
  val?^ | miss    %183.1 = %183.0
  dr              %183.2 = Phi                      %628.2:BB628, %630.2:BB630
  dr              %183.3 = %183.2
  fs              %183.4 = FrameState         R     0x55de2dc4ca10+6692: [], env=e0.3
  void                    Deopt              !v    %183.4, %183.3, %183.1   !
BB635   <- [619]
  val?^ | miss    %635.0 = LdVar              eR    methods, e0.3
  lgl$#-          %635.1 = IsType                   %635.0 isA val?~+ | miss
  void                    Branch                   %635.1 -> BB637 (if true) | BB638 (if false)
BB636   <- [619]
  void                    Nop                !     
  lgl$#-          %636.1 = %619.3
  dr              %636.2 = DeadBranchReached@0x55de2d7bb0f0[Test#54]
  goto BB173
BB159   <- [123]
  (cls|spec|blt)  %159.0 = LdFun              !v    Recall, e0.3
  prom-           %159.1 = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p54, e0.3
  prom-           %159.2 = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p55, e0.3
  prom-           %159.3 = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p56, e0.3
  prom-           %159.4 = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p57, e0.3
  prom-           %159.5 = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p58, e0.3
  prom-           %159.6 = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p59, e0.3
  prom-           %159.7 = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p60, e0.3
  prom-           %159.8 = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p61, e0.3
  val?            %159.9 = Call               !v    %159.0(%159.1, %159.2, %159.3, %159.4, %159.5, %159.6, %159.7, %159.8, false) e0.3   <val?_>
  void                    StVar              lW    methods, %159.9, e0.3
  val?^ | miss    %159.11 = LdVar              eR    length, e0.3
  lgl$#-          %159.12 = Identical                <blt length>, %159.11   <@?>
  void                    Branch                   %159.12 -> BB166 (if true) | BB162 (if false)
BB124   <- [123]
  void                    Nop                !     
  goto BB125
BB623   <- [621]
  val?~+ | miss   %623.0 = CastType           d     dn %621.0
  val?+           %623.1 = Force!<value>            %623.0,    <vec$+>
  (int|real)$-    %623.2 = CallSafeBuiltin    wed   length(%623.1)    <int$->
  lgl$#-          %623.3 = IsType                   %623.2 isA int$-
  void                    Branch                   %623.3 -> BB631 (if true) | BB632 (if false)
BB624   <- [621]
  void                    Nop                !     
  val?^ | miss    %624.1 = %621.0
  dr              %624.2 = Typecheck@0x55de2d7bb0f0[Type#452]
  goto BB118
BB118   <- [622, 624]
  val?^ | miss    %118.0 = Phi                      %622.1:BB622, %624.1:BB624
  val?^ | miss    %118.1 = %118.0
  dr              %118.2 = Phi                      %622.2:BB622, %624.2:BB624
  dr              %118.3 = %118.2
  fs              %118.4 = FrameState         R     0x55de2dc4ca10+7728: [%117.1], env=e0.3
  void                    Deopt              !v    %118.4, %118.3, %118.1   !
BB605   <- [215]
  val?+           %605.0 = CastType           d     dn %215.4   <val?_>
  void                    Branch                   %215.11 -> BB607 (if true) | BB608 (if false)
BB606   <- [215]
  void                    Nop                !     
  val?            %606.1 = %215.4
  dr              %606.2 = Typecheck@0x55de2d7bb0f0[Type#346]
  goto BB216
BB214   <- [213, 219]
  void                    Nop                !     
  int$-           %214.1 = %207.2
  goto BB207
BB633   <- [629]
  lgl-            %633.0 = CastType           d     dn %629.3
  lgl-            %633.1 = Extract1_1D        wed   %633.0, %629.0, elided   <lgl->
  void                    StVar              lW    fromGroup, %633.1, e0.3
  goto BB111
BB634   <- [629]
  fs              %634.0 = FrameState         R     0x55de2dc4ca10+6805: [], env=e0.3
  void                    Deopt              !v    %634.0, Typecheck@0x55de2d7bb0f0[Type#400], %629.3   !
BB637   <- [635]
  val?~+ | miss   %637.0 = CastType           d     dn %635.0
  val?+           %637.1 = Force!<value>            %637.0,    <vec+>
  lgl$#-          %637.2 = IsType                   %637.1 isA val+   <true>
  void                    Branch                   %637.2 -> BB641 (if true) | BB642 (if false)
BB638   <- [635]
  void                    Nop                !     
  val?^ | miss    %638.1 = %635.0
  dr              %638.2 = Typecheck@0x55de2d7bb0f0[Type#446]
  goto BB173
BB173   <- [636, 638, 642]
  val?^ | miss    %173.0 = Phi                      %636.1:BB636, %638.1:BB638, %642.1:BB642
  val?^ | miss    %173.1 = %173.0
  dr              %173.2 = Phi                      %636.2:BB636, %638.2:BB638, %642.2:BB642
  dr              %173.3 = %173.2
  fs              %173.4 = FrameState         R     0x55de2dc4ca10+7145: [], env=e0.3
  void                    Deopt              !v    %173.4, %173.3, %173.1   !
BB166   <- [159]
  val             %166.0 = ChkMissing         e     %159.9
  lgl$#-          %166.1 = IsType                   %159.9 isA val?+
  void                    Branch                   %166.1 -> BB645 (if true) | BB646 (if false)
BB162   <- [159]
  val             %162.0 = ChkMissing         e     %159.9
  lgl$#-          %162.1 = IsType                   %159.9 isA val?+
  void                    Branch                   %162.1 -> BB643 (if true) | BB644 (if false)
BB125   <- [124, 164, 165]
  val?^ | miss    %125.0 = LdVar              eR    length, e0.3
  lgl$#-          %125.1 = Identical                <blt length>, %125.0   <true>
  void                    Branch                   %125.1 -> BB639 (if true) | BB640 (if false)
BB631   <- [623]
  int$-           %631.0 = CastType           d     dn %623.2
  lgl$-           %631.1 = Eq                 d     %631.0, 0L, elided   <lgl$->
  lgl$-           %631.2 = AsLogical                %631.1
  lgl$-           %631.3 = LAnd                     %117.2, %631.2
  lgl$-           %631.4 = %631.3
  goto BB123
BB632   <- [623]
  fs              %632.0 = FrameState         R     0x55de2dc4ca10+7831: [%117.2, %623.2], env=e0.3
  void                    Deopt              !v    %632.0, Typecheck@0x55de2d7bb0f0[Type#453], %623.2   !
BB607   <- [605]
  val?+           %607.0 = CastType           d     dn %215.6   <val?_>
  void                    Branch                   %215.9 -> BB609 (if true) | BB610 (if false)
BB608   <- [605]
  void                    Nop                !     
  val?            %608.1 = %215.6
  dr              %608.2 = Typecheck@0x55de2d7bb0f0[Type#347]
  goto BB216
BB216   <- [606, 608, 610]
  val?^ | miss    %216.0 = Phi                      %606.1:BB606, %608.1:BB608, %610.1:BB610
  val?^ | miss    %216.1 = %216.0
  dr              %216.2 = Phi                      %606.2:BB606, %608.2:BB608, %610.2:BB610
  dr              %216.3 = %216.2
  fs              %216.4 = FrameState         R     0x55de2dc4ca10+5797: [%200.2, %200.3, %207.2, %215.4, %215.6, %215.8], env=e0.3
  void                    Deopt              !v    %216.4, %216.3, %216.1   !
BB641   <- [637]
  val?            %641.0 = Extract1_1D        wed   %637.1, %619.0, elided   <vec$+>
  void                    StVar              lW    methods, %641.0, e0.3
  goto BB117
BB642   <- [637]
  void                    Nop                !     
  lgl$#-          %642.1 = %637.2
  dr              %642.2 = DeadBranchReached@0x55de2d7bb0f0[Test#56]
  goto BB173
BB645   <- [166]
  val?+           %645.0 = CastType           d     dn %159.9   <val?_>
  real$-          %645.1 = CallSafeBuiltin    wed   length(%645.0) 
  real$-          %645.2 = %645.1
  goto BB163
BB646   <- [166]
  void                    Nop                !     
  val?            %646.1 = %159.9
  dr              %646.2 = Typecheck@0x55de2d7bb0f0[Type#463]
  goto BB160
BB643   <- [162]
  val?+           %643.0 = CastType           d     dn %159.9   <val?_>
  (int|real)$-    %643.1 = CallSafeBuiltin    wed   length(%643.0) 
  (int|real)$-    %643.2 = %643.1
  goto BB163
BB644   <- [162]
  void                    Nop                !     
  val?            %644.1 = %159.9
  dr              %644.2 = Typecheck@0x55de2d7bb0f0[Type#463]
  goto BB160
BB639   <- [125]
  val?^ | miss    %639.0 = LdVar              eR    methods, e0.3
  lgl$#-          %639.1 = IsType                   %639.0 isA val?~+ | miss
  void                    Branch                   %639.1 -> BB647 (if true) | BB648 (if false)
BB640   <- [125]
  void                    Nop                !     
  lgl$#-          %640.1 = %125.1
  dr              %640.2 = DeadBranchReached@0x55de2d7bb0f0[Test#59]
  goto BB126
BB609   <- [607]
  val?+           %609.0 = CastType           d     dn %215.8   <val?_>
  val?+           %609.1 = Subassign2_1D      wed   %605.0, %607.0, %609.0, elided
  void                    StVar              lW    methods, %609.1, e0.3
  val?^ | miss    %609.3 = LdVar              eR    c, e0.3
  lgl$#-          %609.4 = Identical                <blt c>, %609.3   <@?>
  void                    Branch                   %609.4 -> BB220 (if true) | BB218 (if false)
BB610   <- [607]
  void                    Nop                !     
  val?            %610.1 = %215.8
  dr              %610.2 = Typecheck@0x55de2d7bb0f0[Type#348]
  goto BB216
BB163   <- [643, 645]
  (int|real)$-    %163.0 = Phi                      %643.2:BB643, %645.2:BB645   <val?_>
  (int|real)$-    %163.1 = %163.0
  lgl$-           %163.2 = Gt                 d     %163.1, 0L, elided   <val?_>
  lgl$#-          %163.3 = CheckTrueFalse     e     %163.2
  void                    Branch                   %163.3 -> BB165 (if true) | BB164 (if false)
BB160   <- [644, 646]
  val?^ | miss    %160.0 = Phi                      %644.1:BB644, %646.1:BB646
  val?^ | miss    %160.1 = %160.0
  dr              %160.2 = Phi                      %644.2:BB644, %646.2:BB646
  dr              %160.3 = %160.2
  fs              %160.4 = FrameState         R     0x55de2dc4ca10+7947: [], env=e0.3
  void                    Deopt              !v    %160.4, %160.3, %160.1   !
BB647   <- [639]
  val?~+ | miss   %647.0 = CastType           d     dn %639.0
  val?+           %647.1 = Force!<value>            %647.0,    <vec$+>
  (int|real)$-    %647.2 = CallSafeBuiltin    wed   length(%647.1)    <int$->
  lgl$#-          %647.3 = IsType                   %647.2 isA int$-
  void                    Branch                   %647.3 -> BB649 (if true) | BB650 (if false)
BB648   <- [639]
  void                    Nop                !     
  val?^ | miss    %648.1 = %639.0
  dr              %648.2 = Typecheck@0x55de2d7bb0f0[Type#474]
  goto BB126
BB126   <- [640, 648]
  val?^ | miss    %126.0 = Phi                      %640.1:BB640, %648.1:BB648
  val?^ | miss    %126.1 = %126.0
  dr              %126.2 = Phi                      %640.2:BB640, %648.2:BB648
  dr              %126.3 = %126.2
  fs              %126.4 = FrameState         R     0x55de2dc4ca10+8112: [], env=e0.3
  void                    Deopt              !v    %126.4, %126.3, %126.1   !
BB220   <- [609]
  val?^ | miss    %220.0 = LdVar              eR    found, e0.3
  val?            %220.1 = Force!             !v    %220.0, e0.3   <val?_>
  val?^ | miss    %220.2 = LdVar              eR    i, e0.3
  val?            %220.3 = Force!             !v    %220.2, e0.3   <val?_>
  lgl$#-          %220.4 = IsType                   %220.3 isA val?+
  lgl$#-          %220.5 = IsType                   %220.1 isA val?+
  void                    Branch                   %220.5 -> BB617 (if true) | BB618 (if false)
BB218   <- [609]
  val?^ | miss    %218.0 = LdVar              eR    found, e0.3
  val?            %218.1 = Force!             !v    %218.0, e0.3   <val?_>
  val?^ | miss    %218.2 = LdVar              eR    i, e0.3
  val?            %218.3 = Force!             !v    %218.2, e0.3   <val?_>
  val?            %218.4 = CallBuiltin        !v    c(%218.1, %218.3) e0.3
  val?            %218.5 = %218.4
  goto BB219
BB165   <- [163]
  (cls|spec|blt)  %165.0 = LdFun              !v    message, e0.3
  prom-           %165.1 = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p63, e0.3
  val?            %165.2 = NamedCall          !v    %165.0(%165.1, domain=na-lgl) e0.3
  goto BB125
BB164   <- [163]
  void                    Nop                !     
  goto BB125
BB649   <- [647]
  int$-           %649.0 = CastType           d     dn %647.2
  lgl$#-          %649.1 = CheckTrueFalse     e     %649.0
  void                    Branch                   %649.1 -> BB135 (if true) | BB130 (if false)
BB650   <- [647]
  void                    Nop                !     
  (int|real)$-    %650.1 = %647.2
  dr              %650.2 = Typecheck@0x55de2d7bb0f0[Type#475]
  goto BB128
BB617   <- [220]
  val?+           %617.0 = CastType           d     dn %220.1   <val?_>
  void                    Branch                   %220.4 -> BB625 (if true) | BB626 (if false)
BB618   <- [220]
  void                    Nop                !     
  val?            %618.1 = %220.1
  dr              %618.2 = Typecheck@0x55de2d7bb0f0[Type#351]
  goto BB221
BB219   <- [218, 625]
  val?            %219.0 = Phi                      %218.5:BB218, %625.2:BB625   <val?_>
  val?            %219.1 = %219.0
  void                    StVar              lW    found, %219.1, e0.3
  goto BB214
BB135   <- [649]
  val?^ | miss    %135.0 = LdVar              eR    .sigLabel, e0.3
  lgl$#-          %135.1 = Identical                %135.0, function(sig) <(rir::DispatchTable*)0x55de2b41|...
  void                    Branch                   %135.1 -> BB651 (if true) | BB652 (if false)
BB130   <- [649]
  void                    Nop                !     
  goto BB131
BB128   <- [650, 652, 654]
  val?^ | miss    %128.0 = Phi                      %650.1:BB650, %652.1:BB652, %654.1:BB654
  val?^ | miss    %128.1 = %128.0
  dr              %128.2 = Phi                      %650.2:BB650, %652.2:BB652, %654.2:BB654
  dr              %128.3 = %128.2
  fs              %128.4 = FrameState         R     0x55de2dc4ca10+8203: [%647.2], env=e0.3
  void                    Deopt              !v    %128.4, %128.3, %128.1   !
BB625   <- [617]
  val?+           %625.0 = CastType           d     dn %220.3   <val?_>
  val+            %625.1 = CallSafeBuiltin    wed   c(%617.0, %625.0) 
  val+            %625.2 = %625.1
  goto BB219
BB626   <- [617]
  void                    Nop                !     
  val?            %626.1 = %220.3
  dr              %626.2 = Typecheck@0x55de2d7bb0f0[Type#352]
  goto BB221
BB221   <- [618, 626]
  val?^ | miss    %221.0 = Phi                      %618.1:BB618, %626.1:BB626
  val?^ | miss    %221.1 = %221.0
  dr              %221.2 = Phi                      %618.2:BB618, %626.2:BB626
  dr              %221.3 = %221.2
  fs              %221.4 = FrameState         R     0x55de2dc4ca10+5900: [%200.2, %200.3, %207.2, <blt c>, %220.1, %220.3], env=e0.3
  void                    Deopt              !v    %221.4, %221.3, %221.1   !
BB651   <- [135]
  prom-           %651.0 = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p32, e0.3
  val?^           %651.1 = CastType                 up %651.0
  val?^ | miss    %651.2 = LdVar              eR    paste, <env 0x55de28b56378>
  lgl$#-          %651.3 = Identical                %651.2, function(..., sep=" ", collapse=NULL, recycle0|...
  void                    Branch                   %651.3 -> BB653 (if true) | BB654 (if false)
BB652   <- [135]
  void                    Nop                !     
  val?^ | miss    %652.1 = %135.0
  dr              %652.2 = CallTarget@0x55de2d7bb0f0[Call#161]
  goto BB128
BB131   <- [130, 144, 669]
  val?^ | miss    %131.0 = LdVar              eR    methods, e0.3
  lgl$#-          %131.1 = IsType                   %131.0 isA val?~+ | miss
  void                    Branch                   %131.1 -> BB657 (if true) | BB658 (if false)
BB653   <- [651]
  env             e653.0 = MkEnv              l     sig=%651.1, parent=<env 0x55de28b56378>, context 0
  prom-           %653.1 = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p211, e653.0
  dots-           %653.2 = DotsList           l     %653.1
  val?^ | miss    %653.3 = CastType                 up %653.1
  env             e653.4 = MkEnv              l     ...=%653.2, sep(miss)=" ", collapse="#", recycle0(miss)=false, parent=R_BaseNamespace, context -1
  val?            %653.5 = Force!             !vL   %653.3, e653.4
  val+            %653.6 = CallSafeBuiltin    wed   list(%653.5)    <vec->
  val+            %653.7 = CallSafeBuiltin    wed   paste(%653.6, " ", "#", false)    <str$->
  void                    StVar              lW    tlabel, %653.7, e0.3
  val?^ | miss    %653.9 = LdVar              eR    methods, e0.3
  lgl$#-          %653.10 = IsType                   %653.9 isA val?~+ | miss
  void                    Branch                   %653.10 -> BB655 (if true) | BB656 (if false)
BB654   <- [651]
  void                    Nop                !     
  val?^ | miss    %654.1 = %651.2
  dr              %654.2 = CallTarget@0x55de2b0fcef8[Call#0]
  goto BB128
BB657   <- [131]
  val?~+ | miss   %657.0 = CastType           d     dn %131.0
  void                    Visible            v     
  val?+           %657.2 = Force!<value>            %657.0,    <vec$+>
  val?+           %657.3 = %657.2
  goto BB134
BB658   <- [131]
  fs              %658.0 = FrameState         R     0x55de2dc4ca10+8774: [], env=e0.3
  void                    Deopt              !v    %658.0, Typecheck@0x55de2d7bb0f0[Type#509], %131.0   !
BB655   <- [653]
  val?~+ | miss   %655.0 = CastType           d     dn %653.9
  val?+           %655.1 = Force!<value>            %655.0,    <vec$+>
  lgl$#-          %655.2 = IsType                   %655.1 isA val+   <true>
  void                    Branch                   %655.2 -> BB659 (if true) | BB660 (if false)
BB656   <- [653]
  void                    Nop                !     
  val?^ | miss    %656.1 = %653.9
  dr              %656.2 = Typecheck@0x55de2d7bb0f0[Type#478]
  goto BB136
BB659   <- [655]
  val?            %659.0 = Extract2_1D        wed   %655.1, 1L, elided   <cls>
  void                    StVar              lW    m, %659.0, e0.3
  val?^ | miss    %659.2 = LdVar              eR    is, e0.3
  lgl$#-          %659.3 = Identical                %659.2, function(object, class2) <(rir::DispatchTable*|...
  void                    Branch                   %659.3 -> BB661 (if true) | BB662 (if false)
BB660   <- [655]
  void                    Nop                !     
  lgl$#-          %660.1 = %655.2
  dr              %660.2 = DeadBranchReached@0x55de2d7bb0f0[Test#60]
  goto BB136
BB136   <- [656, 660]
  val?^ | miss    %136.0 = Phi                      %656.1:BB656, %660.1:BB660
  val?^ | miss    %136.1 = %136.0
  dr              %136.2 = Phi                      %656.2:BB656, %660.2:BB660
  dr              %136.3 = %136.2
  fs              %136.4 = FrameState         R     0x55de2dc4ca10+8265: [], env=e0.3
  void                    Deopt              !v    %136.4, %136.3, %136.1   !
BB661   <- [659]
  prom-           %661.0 = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p33 (!refl), e0.3
  val?            %661.1 = Call               !v    function(object, class2) <(rir::DispatchTable*|...(%661.0, "MethodDefinition") e0.3   <lgl$->
  lgl$#-          %661.2 = IsType                   %661.1 isA lgl$-
  void                    Branch                   %661.2 -> BB663 (if true) | BB664 (if false)
BB662   <- [659]
  fs              %662.0 = FrameState         R     0x55de2dc4ca10+8332: [], env=e0.3
  void                    Deopt              !v    %662.0, CallTarget@0x55de2d7bb0f0[Call#162], %659.2   !
BB663   <- [661]
  lgl$-           %663.0 = CastType           d     dn %661.1
  lgl$#-          %663.1 = CheckTrueFalse     e     %663.0
  void                    Branch                   %663.1 -> BB151 (if true) | BB142 (if false)
BB664   <- [661]
  fs              %664.0 = FrameState         R     0x55de2dc4ca10+8369: [%661.1], env=e0.3
  void                    Deopt              !v    %664.0, Typecheck@0x55de2d7bb0f0[Type#481], %661.1   !
BB151   <- [663]
  (cls|spec|blt)  %151.0 = LdFun              !v    <-, <0x55de28543da8>, e0.3
  prom-           %151.1 = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p37, e0.3
  prom-           %151.2 = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p40, e0.3
  val?            %151.3 = Call               !v    %151.0(%151.1, %151.2) e0.3
  val?^ | miss    %151.4 = LdVar              eR    .inheritedArgsExpression, e0.3
  lgl$#-          %151.5 = Identical                %151.4, function(target, defined, body) <(rir::Dispatc|...
  void                    Branch                   %151.5 -> BB665 (if true) | BB666 (if false)
BB142   <- [663]
  void                    Nop                !     
  goto BB143
BB665   <- [151]
  prom-           %665.0 = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p45, e0.3
  prom-           %665.1 = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p48, e0.3
  prom-           %665.2 = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p51, e0.3
  val?            %665.3 = StaticCall         !v    .inheritedArgsExpression[0x55de2ad74790](%665.0, %665.1, %665.2) e0.3   <nil->
  lgl$-           %665.4 = Is                       %665.3, NULL
  void                    StVar              lW    coerce, %665.3, e0.3
  val             %665.6 = ChkMissing         e     %665.3
  lgl$-           %665.7 = Not                d     %665.4, elided
  lgl$#-          %665.8 = CheckTrueFalse     e     %665.7
  void                    Branch                   %665.8 -> BB158 (if true) | BB154 (if false)
BB666   <- [151]
  fs              %666.0 = FrameState         R     0x55de2dc4ca10+8422: [%151.3], env=e0.3
  void                    Deopt              !v    %666.0, CallTarget@0x55de2d7bb0f0[Call#167], %151.4   !
BB143   <- [142, 667]
  val?^ | miss    %143.0 = LdVar              eR    doCache, e0.3
  val?            %143.1 = Force!<lazy>       !v    %143.0, e0.3   <lgl$->
  lgl$#-          %143.2 = CheckTrueFalse     we    %143.1
  void                    Branch                   %143.2 -> BB145 (if true) | BB144 (if false)
BB158   <- [665]
  (cls|spec|blt)  %158.0 = LdFun              !v    body<-, e0.3
  val?^ | miss    %158.1 = LdVar              eR    m, e0.3
  val?            %158.2 = Force!             !v    %158.1, e0.3   <val?_>
  val?            %158.3 = NamedCall          !v    %158.0(%158.2, value=%665.3) e0.3
  void                    StVar              lW    m, %158.3, e0.3
  goto BB155
BB154   <- [665]
  void                    Nop                !     
  goto BB155
BB145   <- [143]
  val?^ | miss    %145.0 = LdVar              eR    verbose, e0.3
  val?            %145.1 = Force!<wrapped>    !v    %145.0, e0.3   <lgl$->
  lgl$#-          %145.2 = CheckTrueFalse     we    %145.1
  void                    Branch                   %145.2 -> BB150 (if true) | BB146 (if false)
BB144   <- [143]
  void                    Nop                !     
  goto BB131
BB155   <- [154, 158]
  val?^ | miss    %155.0 = LdVar              eR    m, e0.3
  val?            %155.1 = Force!<value>      !v    %155.0, e0.3   <cls>
  val?^ | miss    %155.2 = LdVar              eR    methods !upd, e0.3
  lgl$#-          %155.3 = IsType                   %155.2 isA val?~+ | miss
  void                    Branch                   %155.3 -> BB667 (if true) | BB668 (if false)
BB150   <- [145]
  (cls|spec|blt)  %150.0 = LdFun              !v    cat, e0.3
  val?            %150.1 = Call               !v    %150.0(" .fI> caching newly found methods ..
") e0.3
  goto BB147
BB146   <- [145]
  void                    Nop                !     
  goto BB147
BB667   <- [155]
  val?~+ | miss   %667.0 = CastType           d     dn %155.2
  val?+           %667.1 = Force!<value>            %667.0,    <vec$+>
  val?            %667.2 = Subassign2_1D      !v    %155.1, %667.1, 1L, e0.3
  void                    StVar              lW    methods, %667.2, e0.3
  goto BB143
BB668   <- [155]
  fs              %668.0 = FrameState         R     0x55de2dc4ca10+8601: [%155.1], env=e0.3
  void                    Deopt              !v    %668.0, Typecheck@0x55de2d7bb0f0[Type#503], %155.2   !
BB147   <- [146, 150]
  val?^ | miss    %147.0 = LdVar              eR    assign, e0.3
  lgl$#-          %147.1 = Identical                %147.0, function(x, value, pos=-(1), envir=as.environm|...
  void                    Branch                   %147.1 -> BB669 (if true) | BB670 (if false)
BB669   <- [147]
  prom-           %669.0 = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p34, e0.3
  prom-           %669.1 = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p35, e0.3
  prom-           %669.2 = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p36, e0.3
  val?            %669.3 = StaticCall         !v    assign[0x55de2a3717b0](%669.0, %669.1, missingArg, %669.2) { 0 1 3n } e0.3
  goto BB131
BB670   <- [147]
  fs              %670.0 = FrameState         R     0x55de2dc4ca10+8719: [], env=e0.3
  void                    Deopt              !v    %670.0, CallTarget@0x55de2d7bb0f0[Call#173], %147.0   !
Prom 0:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     get, <0x55de29474e78>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p1, e0.0
  val?            %0.3  = NamedCall          !     %0.1(".MTable", envir=%0.2) e0.0   <env->
  void                    Return             l     %0.3
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     environment, <0x55de288f5b68>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p2, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <env->
  void                    Return             l     %0.3
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fdef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 4:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     .simpleInheritanceGeneric, <0x55de2e251700>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p5, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <lgl$->
  void                    Return             l     %0.3
Prom 5:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fdef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 7:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     is.environment, <0x55de2855ee18>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p8, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <lgl$->
  void                    Return             l     %0.3
Prom 8:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    mtable, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <(nil|env)->
  void                    Return             l     %0.3
Prom 9:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     environment, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p10, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 10:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fdef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 11:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     .allowPrimitiveMethods, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p12, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 12:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    primMethods, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 13:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fdef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 14:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    group, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 15:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    cl1, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$+>
  void                    Return             l     %0.3
Prom 16:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 20:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    labels, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 21:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     .fillSignatures, <0x55de2e2533b8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p22, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p23, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <str->
  void                    Return             l     %0.4
Prom 22:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    allMethods, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 23:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     length, <0x55de2854fa90>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p24, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <int$->
  void                    Return             l     %0.3
Prom 24:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    classes, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <(str|vec)>
  void                    Return             l     %0.3
Prom 25:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    allMethods, e0.0
  val?            %0.2  = Force<value>       !v    %0.1, e0.0   <str->
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <true>
  void                    Branch                   %0.3 -> BB2 (if true) | BB7 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    m, e0.0
  val?            %2.1  = Force<value>       !v    %2.0, e0.0   <int->
  lgl$#-          %2.2  = IsType                   %2.1 isA val+   <true>
  void                    Branch                   %2.2 -> BB6 (if true) | BB3 (if false)
BB7   <- [0]
  prom-           %7.0  = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p27, e0.0
  prom-           %7.1  = %7.0
  goto BB5
BB6   <- [2]
  val?^ | miss    %6.0  = LdVar              eR    found, e0.0
  val?            %6.1  = Force<value>       !v    %6.0, e0.0   <lgl->
  val?            %6.2  = %6.1
  goto BB4
BB3   <- [2]
  prom-           %3.0  = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p26, e0.0
  prom-           %3.1  = %3.0
  goto BB4
BB5   <- [7, 4]
  val?            %5.0  = Phi                      %4.3:BB4, %7.1:BB7
  val?            %5.1  = %5.0
  val?            %5.2  = Extract1_1D        !v    %0.2, %5.1, e0.0   <str->
  void                    Visible            v     
  void                    Return             l     %5.2
BB4   <- [3, 6]
  val?            %4.0  = Phi                      %6.2:BB6, %3.1:BB3
  val?            %4.1  = %4.0
  val?            %4.2  = Extract1_1D        !v    %2.1, %4.1, e0.0   <int->
  val?            %4.3  = %4.2
  goto BB5
Prom 26:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    found, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 27:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    m, e0.0
  val?            %0.2  = Force              !v    %0.1, e0.0   <val?_>
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <@?>
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    found, e0.0
  val?            %2.1  = Force              !v    %2.0, e0.0   <val?_>
  val?            %2.2  = %2.1
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p28, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.2:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract1_1D        !v    %0.2, %3.1, e0.0   <val?_>
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 28:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    found, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 29:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    table, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 30:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     length, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p31, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 31:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    methods, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 32:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    classes, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <(str|vec)>
  void                    Return             l     %0.3
Prom 33:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    m, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 34:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    tlabel, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 35:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    m, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 36:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    mtable, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 37:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p38, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p39, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 38:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    m, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 39:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    target, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 40:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     .newSignature, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p41, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p42, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 41:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    classes, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 42:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p43, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p44, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 43:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fdef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 44:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    signature, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 45:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, <0x55de2854ebd8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p46, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p47, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <str>
  void                    Return             l     %0.4
Prom 46:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    m, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 47:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    target, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 48:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, <0x55de2854ebd8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p49, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p50, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <str>
  void                    Return             l     %0.4
Prom 49:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    m, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 50:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    defined, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 51:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     body, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p52, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 52:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    m, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 54:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    classes, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 55:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fdef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 56:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    mtable, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 57:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    table, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 58:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    excluded, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 59:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    useInherited, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 60:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    simpleOnly, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 61:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    verbose, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 63:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     gettextf, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p64, e0.0
  val?            %0.3  = Call               !     %0.1("No simply inherited methods found for functio|..., %0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 64:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     sQuote, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p65, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 65:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p66, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p67, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 66:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fdef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 67:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    generic, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 68:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    methods, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 69:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    supersList, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <vec->
  void                    Return             l     %0.3
Prom 70:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fromGroup, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 71:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    verbose, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <lgl$->
  void                    Return             l     %0.3
Prom 91:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     length, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p92, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 92:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    methods, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 93:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     rep.int, <0x55de2a441488>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p94, e0.0
  val?            %0.3  = Call               !     %0.1("ANY", %0.2) e0.0   <str->
  void                    Return             l     %0.3
Prom 94:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    nargs, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <int$->
  void                    Return             l     %0.3
Prom 95:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    defaultLabel, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 96:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     names, <0x55de2854f470>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p97, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <str->
  void                    Return             l     %0.3
Prom 97:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    methods, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 98:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     names, <0x55de2854f470>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p99, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <str->
  void                    Return             l     %0.3
Prom 99:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    methods, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 100:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     as.character, <0x55de2855c040>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p101, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <str$->
  void                    Return             l     %0.3
Prom 101:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    excluded, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 106:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    classDefs, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 107:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    m, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 108:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    nm, e0.0
  val?            %0.2  = Force              !v    %0.1, e0.0   <val?_>
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <@?>
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    i, e0.0
  val?            %2.1  = Force              !v    %2.0, e0.0   <val?_>
  val?            %2.2  = %2.1
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p109, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.2:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract2_1D        !v    %0.2, %3.1, e0.0   <val?_>
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 109:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    i, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 112:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    i, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 115:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    methods, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 116:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    classDefs, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 117:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    m, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 118:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    nm, e0.0
  val?            %0.2  = Force              !v    %0.1, e0.0   <val?_>
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <@?>
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    i, e0.0
  val?            %2.1  = Force              !v    %2.0, e0.0   <val?_>
  val?            %2.2  = %2.1
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p119, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.2:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract2_1D        !v    %0.2, %3.1, e0.0   <val?_>
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 119:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    i, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 122:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    i, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 123:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    labels, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 124:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    groupGenerics, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <vec->
  void                    Return             l     %0.3
Prom 125:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    found, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <lgl->
  void                    Return             l     %0.3
Prom 126:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     length, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p127, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 127:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    methods, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 128:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     length, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p129, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 129:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    groupmethods, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 130:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     length, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p131, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 131:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    groupmethods, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 132:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     length, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p133, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 133:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    methods, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 134:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     length, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p135, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 135:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    labels, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 136:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    labels, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 137:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    classes, e0.0
  val?            %0.2  = Force<wrapped>     !v    %0.1, e0.0   <(str|vec)+>
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <true>
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    i, e0.0
  val?            %2.1  = Force<value>       !v    %2.0, e0.0   <int$->
  val?            %2.2  = %2.1
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p138, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.2:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract2_1D        !v    %0.2, %3.1, e0.0   <str$+>
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 138:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    i, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 139:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 140:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    cc, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 141:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    className, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 142:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    labels, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 143:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    allLabels, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str+>
  void                    Return             l     %0.3
Prom 144:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    classes, e0.0
  val?            %0.2  = Force<wrapped>     !v    %0.1, e0.0   <vec->
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <true>
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    i, e0.0
  val?            %2.1  = Force<value>       !v    %2.0, e0.0   <int$->
  val?            %2.2  = %2.1
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p145, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.2:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract2_1D        !v    %0.2, %3.1, e0.0   <str$+>
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 145:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    i, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 146:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 147:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    cc, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 148:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    className, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 149:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    labels, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 150:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    allLabels, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 151:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    cc, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 152:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    className, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 153:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, <0x55de2854ebd8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p154, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p155, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <vec+>
  void                    Return             l     %0.4
Prom 154:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    cc, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 155:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    contains, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 156:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    simpleOnly, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <lgl$->
  void                    Return             l     %0.3
Prom 157:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    i, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 158:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    cc, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 159:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    className, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 160:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, <0x55de2854ebd8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p161, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p162, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <vec+>
  void                    Return             l     %0.4
Prom 161:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    cc, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 162:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    contains, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 163:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    simpleOnly, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <lgl$->
  void                    Return             l     %0.3
Prom 164:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, <0x55de2854ebd8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p165, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p166, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <vec+>
  void                    Return             l     %0.4
Prom 165:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    def, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 166:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    contains, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 167:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    simpleOnly, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <lgl$->
  void                    Return             l     %0.3
Prom 168:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    classes, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <vec$->
  void                    Return             l     %0.3
Prom 169:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    label, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 170:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    groupGenerics, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <vec->
  void                    Return             l     %0.3
Prom 171:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    label, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 172:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    direct, e0.0
  val?            %0.2  = Force              !v    %0.1, e0.0   <val?_>
  val?            %0.3  = Extract2_1D        !v    %0.2, 1L, e0.0   <val?_>
  void                    Visible            v     
  void                    Return             l     %0.3
Prom 173:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    mtable, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 174:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    useInherited, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 175:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    nargs, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 176:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     plist, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p177, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 177:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !v    c, e0.0
  val?            %0.2  = Call               !v    %0.1("f", "T") e0.0   <val?_>
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <@?>
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  (cls|spec|blt)  %2.0  = LdFun              !v    c, e0.0
  prom-           %2.1  = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p178, e0.0
  prom-           %2.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p179, e0.0
  prom-           %2.3  = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p180, e0.0
  val?            %2.4  = Call               !v    %2.0(%2.1, %2.2, %2.3) e0.0   <val?_>
  val?            %2.5  = Add                !v    1, %2.4, e0.0   <val?_>
  val?            %2.6  = %2.5
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p181, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.6:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract1_1D        !v    %0.2, %3.1, e0.0   <val?_>
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 178:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    hasGroup, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 179:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    doCache, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 180:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    doExcluded, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 181:
BB0
  env             e0.0  = LdFunctionEnv            
  void                    Visible            v     
  (cls|spec|blt)  %0.2  = LdFun              !     c, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p182, e0.0
  prom-           %0.4  = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p183, e0.0
  prom-           %0.5  = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p184, e0.0
  val?            %0.6  = Call               !     %0.2(%0.3, %0.4, %0.5) e0.0   <val?_>
  val?            %0.7  = Add                !     1, %0.6, e0.0   <val?_>
  void                    Return             l     %0.7
Prom 182:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    hasGroup, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 183:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    doCache, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 184:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    doExcluded, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 185:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    hasGroup, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  lgl$#-          %0.4  = CheckTrueFalse     we    %0.3
  void                    Branch                   %0.4 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  (cls|spec|blt)  %2.0  = LdFun              !     paste0, e0.0
  prom-           %2.1  = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p186, e0.0
  val?            %2.2  = Call               !     %2.0(" Group generics: ", %2.1, "
") e0.0   <val?_>
  val?            %2.3  = %2.2
  goto BB3
BB4   <- [0]
  void                    Invisible          v     
  nil-            %4.1  = nil
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %4.1:BB4, %2.3:BB2
  val?            %3.1  = %3.0
  void                    Return             l     %3.1
Prom 186:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     plist, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p187, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 187:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     vapply, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p188, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p189, e0.0
  prom-           %0.4  = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p190, e0.0
  val?            %0.5  = Call               !     %0.1(%0.2, %0.3, %0.4, "generic") e0.0   <val?_>
  void                    Return             l     %0.5
Prom 188:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    groupGenerics, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 189:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    slot, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 190:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     character, e0.0
  val?            %0.2  = Call               !     %0.1(1) e0.0   <val?_>
  void                    Return             l     %0.2
Prom 191:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     list, <0x55de285635c0>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p192, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <vec$->
  void                    Return             l     %0.3
Prom 192:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fdef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 193:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fdef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 194:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     gettextf, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p195, e0.0
  val?            %0.3  = Call               !     %0.1("invalid or unset methods table in generic fun|..., %0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 195:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     sQuote, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p196, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 196:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p197, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x55de2f88e550]_p198, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 197:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fdef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 198:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    generic, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 199:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    contains, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 200:
BB0
  env             e0.0  = LdFunctionEnv            
  cls             %0.1  = MkCls                    .eligibleSuperClasses@Prom(1)16, e0.0
  cls             %0.2  = MkCls                    .eligibleSuperClasses@Prom(1)37, e0.0
  val?^ | miss    %0.3  = LdVar              eR    simpleOnly, e0.0
  void                    Visible            v     
  val?            %0.5  = Force<lazy>        !     %0.3, e0.0   <lgl$->
  lgl$#-          %0.6  = CheckTrueFalse     we    %0.5
  void                    Branch                   %0.6 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  void                    Nop                !     
  cls             %2.1  = %0.2
  goto BB3
BB4   <- [0]
  void                    Nop                !     
  cls             %4.1  = %0.1
  goto BB3
BB3   <- [4, 2]
  cls             %3.0  = Phi                      %4.1:BB4, %2.1:BB2
  cls             %3.1  = %3.0
  void                    Return             l     %3.1
Prom 211:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    sig, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <(str|vec)>
  void                    Return             l     %0.3
Prom 215:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    sig, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <(str|vec)>
  void                    Return             l     %0.3

│ .findInheritedMethods[0x55de2f88e550]                                        │
└──────────────────────────────────────────────────────────────────────────────┘
