
┌──────────────────────────────────────────────────────────────────────────────┐
│ .ind.prep2[0x55de2bfbf8d0]                                                   │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;Eager1,NonRefl0,NonRefl1,NonRefl2,NonRefl3,!Obj0,!Obj1,!Obj2,!Obj3,SimpleReal0,SimpleReal1│
│ Properties:                                                                  │
├────── Final PIR Version
.ind.prep2[0x55de2bfbf8d0]
BB0
  val?^           %0.0  = LdArg                    3
  val?^           %0.1  = LdArg                    2
  (real|miss)$~-  %0.2  = LdArg                    1
  val?^           %0.3  = LdArg                    0
  env             e0.4  = MkEnv              l     i=%0.3, margin=%0.2, di=%0.1, dn=%0.0, parent=<env 0x55de2a7fa958>, context 1
  (cls|spec|blt)  %0.5  = LdFun              !     intI, <0x55de309be1d0>, <env 0x55de2a7fa958>
  prom-           %0.6  = MkArg                    unboundValue, .ind.prep2[0x55de2bfbf8d0]_p0 (!refl), e0.4
  prom-           %0.7  = MkArg                    unboundValue, .ind.prep2[0x55de2bfbf8d0]_p1, e0.4
  prom-           %0.8  = MkArg                    unboundValue, .ind.prep2[0x55de2bfbf8d0]_p3, e0.4
  val?            %0.9  = NamedCall          !     %0.5(%0.6, n=%0.7, dn=%0.8, give.dn=false) e0.4   <int$->
  lgl$#-          %0.10 = IsType                   %0.9 isA int$-
  void                    Branch                   %0.10 -> BB4 (if true) | BB5 (if false)
BB4   <- [0]
  int$-           %4.0  = CastType           d     dn %0.9
  void                    Return             l     %4.0
BB5   <- [0]
  fs              %5.0  = FrameState         R     0x55de34fa8ce0+63: [%0.9], env=e0.4
  void                    Deopt              !v    %5.0, Typecheck@0x55de369f63b0[Type#9], %0.9   !
Prom 0:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    i, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <real$->
  void                    Return             l     %0.3
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    di, e0.0
  val?            %0.2  = Force<lazy>        !v    %0.1, e0.0   <int->
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <true>
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    margin, e0.0
  val?            %2.1  = Force<value>       !v    %2.0, e0.0   <real$->
  val?            %2.2  = %2.1
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, .ind.prep2[0x55de2bfbf8d0]_p2, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.2:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract1_1D        !v    %0.2, %3.1, e0.0   <int$->
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    margin, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 3:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    dn, e0.0
  val?            %0.2  = Force<lazy>        !v    %0.1, e0.0   <vec->
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <true>
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    margin, e0.0
  val?            %2.1  = Force<value>       !v    %2.0, e0.0   <real$->
  val?            %2.2  = %2.1
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, .ind.prep2[0x55de2bfbf8d0]_p4, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.2:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract2_1D        !v    %0.2, %3.1, e0.0   <nil->
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 4:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    margin, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3

│ .ind.prep2[0x55de2bfbf8d0]                                                   │
└──────────────────────────────────────────────────────────────────────────────┘
