
┌──────────────────────────────────────────────────────────────────────────────┐
│ FUN[0x5614fb3f2ef0]                                                          │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch                                      │
│ Properties:                                                                  │
├────── Final PIR Version
FUN[0x5614fb3f2ef0]
BB0
  val?^           %0.0  = LdArg                    0
  val?^ | miss    %0.1  = LdVar              eR    file.path, ?
  lgl$#-          %0.2  = Identical                %0.1, function(..., fsep=$(.Platform, file.sep)) <(r|...
  void                    Branch                   %0.2 -> BB12 (if true) | BB13 (if false)
BB12   <- [0]
  env             e12.0 = MkEnv              l     p=%0.0, parent=?, context 1
  prom-           %12.1 = MkArg                    unboundValue, FUN[0x5614fb3f2ef0]_p0, e12.0
  dots-           %12.2 = DotsList           l     %12.1, "Meta", "package.rds"
  ct              %12.3 = PushContext        lCL   %12.2, file.path(p, "Meta", "package.rds"), function(..., fsep=$(.Platform, file.sep)) <(r|..., e12.0
  env             e12.4 = MkEnv              l     ...=%12.2, fsep(miss)=missingArg, parent=R_BaseNamespace, context 1
  prom-           %12.5 = MkArg                    unboundValue, FUN[0x5614fb3f2ef0]_p8, e12.4
  val?^ | miss    %12.6 = CastType                 up %12.5
  void                    StArg              lW    fsep, %12.6, e12.4
  val?^ | miss    %12.8 = CastType                 up %12.1
  val?            %12.9 = Force!             !vL   %12.8, e12.4
  val+            %12.10 = CallSafeBuiltin    wed   list(%12.9, "Meta", "package.rds")    <vec->
  val?            %12.11 = Force!<lazy>       !v    %12.6, e12.4   <str$->
  val?            %12.12 = CallBuiltin        !v    file.path(%12.10, %12.11) e12.4
  val?            %12.13 = PopContext         C     %12.12, %12.3   <str$->
  void                    StVar              lW    pfile, %12.13, e12.0
  val?^ | miss    %12.15 = LdVar              eR    file.exists, e12.0
  lgl$#-          %12.16 = Identical                %12.15, function(...) <(rir::DispatchTable*)0x5614f8d4|...
  void                    Branch                   %12.16 -> BB14 (if true) | BB15 (if false)
BB13   <- [0]
  env             e13.0 = (MkEnv)            l     p=%0.0, parent=?, context 1
  fs              %13.1 = FrameState         R     0x5614fa737140+0: [], env=e13.0
  void                    Deopt              !v    %13.1, CallTarget@0x5614f9ea76f8[Call#0], %0.1
BB14   <- [12]
  prom-           %14.0 = MkArg                    unboundValue, FUN[0x5614fb3f2ef0]_p1 (!refl), e12.0
  dots-           %14.1 = DotsList           l     %14.0
  ct              %14.2 = PushContext        lCL   %14.1, file.exists(pfile), function(...) <(rir::DispatchTable*)0x5614f8d4|..., e12.0
  lgl$#-          %14.3 = IsType                   %12.13 isA val?-
  void                    Branch                   %14.3 -> BB16 (if true) | BB17 (if false)
BB15   <- [12]
  fs              %15.0 = FrameState         R     0x5614fa737140+56: [], env=e12.0
  void                    Deopt              !v    %15.0, CallTarget@0x5614f9ea76f8[Call#1], %12.15   !
BB16   <- [14]
  val?-           %16.0 = CastType           d     dn %12.13   <str$->
  val+            %16.1 = CallSafeBuiltin    wed   c(%16.0)    <str->
  env             e16.2 = MkEnv              l     ...=%14.1, parent=R_BaseNamespace, context 1
  val?            %16.3 = CallBuiltin        !v    file.exists(%16.1) e16.2
  val?            %16.4 = PopContext         C     %16.3, %14.2   <lgl$->
  lgl$#-          %16.5 = IsType                   %16.4 isA lgl$-
  void                    Branch                   %16.5 -> BB18 (if true) | BB19 (if false)
BB17   <- [14]
  fs              %17.0 = FrameState         R     0x5614fa737140+88: [], env=e12.0
  env             e17.1 = (MkEnv)            l     ...=%14.1, parent=R_BaseNamespace, context 1
  fs              %17.2 = FrameState         R     0x5614fa73eb50+0: [], env=e17.1, next=%17.0
  void                    Deopt              !v    %17.2, Typecheck@0x5614f9ea76f8[Type#1], %12.13   !
BB18   <- [16]
  lgl$-           %18.0 = CastType           d     dn %16.4
  lgl$#-          %18.1 = CheckTrueFalse     e     %18.0
  void                    Branch                   %18.1 -> BB10 (if true) | BB9 (if false)
BB19   <- [16]
  void                    Nop                !     
  val?            %19.1 = %16.4
  dr              %19.2 = Typecheck@0x5614f9ea76f8[Type#3]
  goto BB7
BB10   <- [18]
  val?^ | miss    %10.0 = LdVar              eR    tryCatch, e12.0
  lgl$#-          %10.1 = Identical                %10.0, function(expr, ..., finally) <(rir::DispatchTa|...
  void                    Branch                   %10.1 -> BB20 (if true) | BB21 (if false)
BB9   <- [18]
  (cls|spec|blt)  %9.0  = LdFun              !v    tryCatch, e12.0
  fs              %9.1  = FrameState         R     0x5614fa737140+104: [%9.0], env=e12.0
  void                    Deopt              !v    %9.1, DeadCall@0x5614f9ea76f8[Call#2], %9.0   !
BB7   <- [19, 21]
  val?^ | miss    %7.0  = Phi                      %19.1:BB19, %21.1:BB21
  val?^ | miss    %7.1  = %7.0
  dr              %7.2  = Phi                      %19.2:BB19, %21.2:BB21
  dr              %7.3  = %7.2
  fs              %7.4  = FrameState         R     0x5614fa737140+88: [%16.4], env=e12.0
  void                    Deopt              !v    %7.4, %7.3, %7.1   !
BB20   <- [10]
  prom-           %20.0 = MkArg                    unboundValue, FUN[0x5614fb3f2ef0]_p2, e12.0
  cls             %20.1 = MkCls                    FUN@Prom(7)0, e12.0
  prom-           %20.2 = MkArg                    %20.1, FUN[0x5614fb3f2ef0]_p7 (!refl), e12.0
  dots-           %20.3 = DotsList           l     error=%20.2
  val?            %20.4 = StaticCall         !v    tryCatch[0x5614fb25dc00](%20.0, %20.3) { 0 1n } e12.0   <str+>
  void                    Invisible          v     
  void                    StVar              lW    info, %20.4, e12.0
  void                    Return             l     %20.4
BB21   <- [10]
  void                    Nop                !     
  val?^ | miss    %21.1 = %10.0
  dr              %21.2 = CallTarget@0x5614f9ea76f8[Call#10]
  goto BB7
Prom 0:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    p, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    pfile, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !v    $, <0x5614f88a6c10>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, FUN[0x5614fb3f2ef0]_p3, e0.0
  prom-           %0.3  = MkArg                    unboundValue, FUN[0x5614fb3f2ef0]_p5, e0.0
  val?            %0.4  = Call               !v    %0.1(%0.2, %0.3) e0.0   <str+>
  lgl$#-          %0.5  = IsType                   %0.4 isA val+   <true>
  void                    Branch                   %0.5 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  (cls|spec|blt)  %2.0  = LdFun              !v    c, <0x5614f88a7940>, e0.0
  val?            %2.1  = Call               !v    %2.0("Package", "Version") e0.0   <str->
  val?            %2.2  = %2.1
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, FUN[0x5614fb3f2ef0]_p6, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.2:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract1_1D        !v    %0.4, %3.1, e0.0   <str+>
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 3:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     readRDS, <0x5614f8cefbc0>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, FUN[0x5614fb3f2ef0]_p4, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <vec>
  void                    Return             l     %0.3
Prom 4:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    pfile, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 5:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    DESCRIPTION, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 6:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     c, e0.0
  val?            %0.2  = Call               !     %0.1("Package", "Version") e0.0   <val?_>
  void                    Return             l     %0.2
Prom 7:
BB0
  env             e0.0  = LdFunctionEnv            
  cls             %0.1  = MkCls                    FUN@Prom(7)0, e0.0
  void                    Return             l     %0.1
Prom 8:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     $, <0x5614f88a6c10>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, FUN[0x5614fb3f2ef0]_p9, e0.0
  prom-           %0.3  = MkArg                    unboundValue, FUN[0x5614fb3f2ef0]_p10, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <str$->
  void                    Return             l     %0.4
Prom 9:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    .Platform, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 10:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    file.sep, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3

│ FUN[0x5614fb3f2ef0]                                                          │
└──────────────────────────────────────────────────────────────────────────────┘
