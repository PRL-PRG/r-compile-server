
┌──────────────────────────────────────────────────────────────────────────────┐
│ importIntoEnv[0x5614fac3f250]                                                │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;NonRefl0,NonRefl1,NonRefl2,NonRefl3,!Obj0,!Obj1,!Obj2,!Obj3│
│ Properties:                                                                  │
├────── Final PIR Version
importIntoEnv[0x5614fac3f250]
BB0
  val?^           %0.0  = LdArg                    3
  val?^           %0.1  = LdArg                    2
  val?^           %0.2  = LdArg                    1
  val?^           %0.3  = LdArg                    0
  env             e0.4  = MkEnv              l     impenv=%0.3, impnames=%0.2, expenv=%0.1, expnames=%0.0, parent=R_BaseNamespace, context 1
  prom-           %0.5  = MkArg                    unboundValue, importIntoEnv[0x5614fac3f250]_p0 (!refl), e0.4
  ct              %0.6  = PushContext        lCL   %0.5, "exports", getNamespaceInfo(expenv, "exports"), function(ns, which) <(rir::DispatchTable*)0x56|..., e0.4
  val?^           %0.7  = CastType                 up %0.5
  env             e0.8  = MkEnv              l     ns=%0.7, which="exports", parent=R_BaseNamespace, context 1
  prom-           %0.9  = MkArg                    unboundValue, importIntoEnv[0x5614fac3f250]_p7, e0.8
  ct              %0.10 = PushContext        lCL   %0.9, false, asNamespace(ns, base.OK=FALSE), function(ns, base.OK=TRUE) <(rir::DispatchTabl|..., e0.8
  val?^           %0.11 = CastType                 up %0.9
  env             e0.12 = MkEnv              l     ns=%0.11, base.OK=false, parent=R_BaseNamespace, context 1
  val?            %0.13 = Force!<lazy>       !vr   %0.11,    <(str|env)+>
  lgl$#-          %0.14 = IsType                   %0.13 isA val?+
  void                    Branch                   %0.14 -> BB59 (if true) | BB60 (if false)
BB59   <- [0]
  val?+           %59.0 = CastType           d     dn %0.13   <(str|env)+>
  lgl$#-          %59.1 = CallSafeBuiltin    wed   is.character(%59.0)    <lgl$->
  void                    Branch                   %59.1 -> BB57 (if true) | BB3 (if false)
BB60   <- [0]
  fs              %60.0 = FrameState         R     0x5614fabdd010+37: [], env=e0.4
  fs              %60.1 = FrameState         R     0x5614fa9903b0+45: [], env=e0.8, next=%60.0
  fs              %60.2 = FrameState         R     0x5614fa834b20+69: [<blt is.character>, %0.13], env=e0.12, next=%60.1
  void                    Deopt              !v    %60.2, Typecheck@0x5614f9d270d8[Type#1], %0.13   !
BB57   <- [59]
  void                    Nop                !     
  lgl$#-          %57.1 = %59.1
  goto BB4
BB3   <- [59]
  lgl$#-          %3.0  = CallSafeBuiltin    wed   is.symbol(%59.0)    <lgl$->
  lgl$-           %3.1  = LOr                      %59.1, %3.0
  lgl$-           %3.2  = %3.1
  goto BB4
BB4   <- [57, 3]
  lgl$-           %4.0  = Phi                      %3.2:BB3, %57.1:BB57
  lgl$-           %4.1  = %4.0
  lgl$#-          %4.2  = CheckTrueFalse     e     %4.1
  void                    Branch                   %4.2 -> BB54 (if true) | BB5 (if false)
BB54   <- [4]
  prom-           %54.0 = MkArg                    unboundValue, importIntoEnv[0x5614fac3f250]_p14, e0.12
  ct              %54.1 = PushContext        lCL   %54.0, getNamespace(ns), function(name) <(rir::DispatchTable*)0x5614faa|..., e0.12
  val?^           %54.2 = CastType                 up %54.0
  env             e54.3 = MkEnv              l     name=%54.2, parent=R_BaseNamespace, context 1
  val?            %54.4 = Force!<lazy>       !vr   %54.2,    <str$+>
  val?            %54.5 = CallBuiltin        !v    getRegisteredNamespace(%54.4) e54.3   <env->
  lgl$-           %54.6 = Is                       %54.5, NULL
  void                    StVar              lW    ns, %54.5, e54.3
  val             %54.8 = ChkMissing         e     %54.5
  lgl$-           %54.9 = Not                d     %54.6, elided
  lgl$#-          %54.10 = CheckTrueFalse     e     %54.9
  void                    Branch                   %54.10 -> BB56 (if true) | BB55 (if false)
BB5   <- [4]
  void                    Nop                !     
  goto BB6
BB56   <- [54]
  val?            %56.0 = PopContext         C     %54.5, %54.1   <env->
  void                    StVar              lW    ns, %56.0, e0.12
  goto BB6
BB55   <- [54]
  fs              %55.0 = FrameState         R     0x5614fabdd010+37: [], env=e0.4
  fs              %55.1 = FrameState         R     0x5614fa9903b0+45: [], env=e0.8, next=%55.0
  fs              %55.2 = FrameState         R     0x5614fa834b20+244: [], env=e0.12, next=%55.1
  (cls|spec|blt)  %55.3 = LdFun              !v    loadNamespace, e54.3
  fs              %55.4 = FrameState         R     0x5614fb4be090+67: [%55.3], env=e54.3, next=%55.2
  void                    Deopt              !v    %55.4, DeadCall@0x5614fbc273b8[Call#0], %55.3   !
BB6   <- [5, 56]
  val?^ | miss    %6.0  = LdVar              eR    isNamespace, e0.12
  lgl$#-          %6.1  = Identical                %6.0, function(ns) <(rir::DispatchTable*)0x5614fa867|...
  void                    Branch                   %6.1 -> BB61 (if true) | BB62 (if false)
BB61   <- [6]
  prom-           %61.0 = MkArg                    unboundValue, importIntoEnv[0x5614fac3f250]_p15, e0.12
  ct              %61.1 = PushContext        lCL   %61.0, isNamespace(ns), function(ns) <(rir::DispatchTable*)0x5614fa867|..., e0.12
  val?^           %61.2 = CastType                 up %61.0
  env             e61.3 = MkEnv              l     ns=%61.2, parent=R_BaseNamespace, context 1
  val?            %61.4 = Force!<lazy>       !vL   %61.2, e61.3   <env->
  val?            %61.5 = CallBuiltin        !v    isNamespaceEnv(%61.4) e61.3
  val?            %61.6 = PopContext         C     %61.5, %61.1   <lgl$->
  lgl$#-          %61.7 = IsType                   %61.6 isA lgl$-
  void                    Branch                   %61.7 -> BB63 (if true) | BB64 (if false)
BB62   <- [6]
  fs              %62.0 = FrameState         R     0x5614fabdd010+37: [], env=e0.4
  fs              %62.1 = FrameState         R     0x5614fa9903b0+45: [], env=e0.8, next=%62.0
  fs              %62.2 = FrameState         R     0x5614fa834b20+258: [], env=e0.12, next=%62.1
  void                    Deopt              !v    %62.2, CallTarget@0x5614f9d270d8[Call#3], %6.0   !
BB63   <- [61]
  lgl$-           %63.0 = CastType           d     dn %61.6
  lgl$-           %63.1 = Not                d     %63.0, elided
  lgl$#-          %63.2 = CheckTrueFalse     e     %63.1
  void                    Branch                   %63.2 -> BB53 (if true) | BB11 (if false)
BB64   <- [61]
  fs              %64.0 = FrameState         R     0x5614fabdd010+37: [], env=e0.4
  fs              %64.1 = FrameState         R     0x5614fa9903b0+45: [], env=e0.8, next=%64.0
  fs              %64.2 = FrameState         R     0x5614fa834b20+290: [%61.6], env=e0.12, next=%64.1
  void                    Deopt              !v    %64.2, Typecheck@0x5614f9d270d8[Type#9], %61.6   !
BB53   <- [63]
  fs              %53.0 = FrameState         R     0x5614fabdd010+37: [], env=e0.4
  fs              %53.1 = FrameState         R     0x5614fa9903b0+45: [], env=e0.8, next=%53.0
  (cls|spec|blt)  %53.2 = LdFun              !v    stop, e0.12
  fs              %53.3 = FrameState         R     0x5614fa834b20+435: [%53.2], env=e0.12, next=%53.1
  void                    Deopt              !v    %53.3, DeadCall@0x5614f9d270d8[Call#6], %53.2   !
BB11   <- [63]
  val?^ | miss    %11.0 = LdVar              eR    base.OK, e0.12
  val?            %11.1 = Force!<lazy>       !v    %11.0, e0.12   <lgl$->
  lgl$#-          %11.2 = IsType                   %11.1 isA lgl$-
  void                    Branch                   %11.2 -> BB65 (if true) | BB66 (if false)
BB65   <- [11]
  lgl$-           %65.0 = CastType           d     dn %11.1
  lgl$-           %65.1 = Not                d     %65.0, elided
  lgl$-           %65.2 = AsLogical                %65.1
  lgl$#-          %65.3 = Identical                %65.2, false
  void                    Branch                   %65.3 -> BB52 (if true) | BB14 (if false)
BB66   <- [11]
  void                    Nop                !     
  val?            %66.1 = %11.1
  dr              %66.2 = Typecheck@0x5614f9d270d8[Type#10]
  goto BB12
BB52   <- [65]
  void                    Nop                !     
  lgl$-           %52.1 = %65.2
  goto BB17
BB14   <- [65]
  val?^ | miss    %14.0 = LdVar              eR    isBaseNamespace, e0.12
  lgl$#-          %14.1 = Identical                %14.0, function(ns) <(rir::DispatchTable*)0x5614fa9df|...
  void                    Branch                   %14.1 -> BB67 (if true) | BB68 (if false)
BB12   <- [66, 68]
  val?^ | miss    %12.0 = Phi                      %66.1:BB66, %68.1:BB68
  val?^ | miss    %12.1 = %12.0
  dr              %12.2 = Phi                      %66.2:BB66, %68.2:BB68
  dr              %12.3 = %12.2
  fs              %12.4 = FrameState         R     0x5614fabdd010+37: [], env=e0.4
  fs              %12.5 = FrameState         R     0x5614fa9903b0+45: [], env=e0.8, next=%12.4
  fs              %12.6 = FrameState         R     0x5614fa834b20+311: [%11.1], env=e0.12, next=%12.5
  void                    Deopt              !v    %12.6, %12.3, %12.1   !
BB17   <- [52, 69]
  lgl$-           %17.0 = Phi                      %69.3:BB69, %52.1:BB52
  lgl$-           %17.1 = %17.0
  lgl$#-          %17.2 = CheckTrueFalse     e     %17.1
  void                    Branch                   %17.2 -> BB51 (if true) | BB18 (if false)
BB67   <- [14]
  prom-           %67.0 = MkArg                    unboundValue, importIntoEnv[0x5614fac3f250]_p16, e0.12
  val?            %67.1 = StaticCall         !v    isBaseNamespace[0x5614fbde0790](%67.0) e0.12   <lgl$->
  lgl$#-          %67.2 = IsType                   %67.1 isA lgl$-
  void                    Branch                   %67.2 -> BB69 (if true) | BB70 (if false)
BB68   <- [14]
  void                    Nop                !     
  val?^ | miss    %68.1 = %14.0
  dr              %68.2 = CallTarget@0x5614f9d270d8[Call#4]
  goto BB12
BB51   <- [17]
  fs              %51.0 = FrameState         R     0x5614fabdd010+37: [], env=e0.4
  fs              %51.1 = FrameState         R     0x5614fa9903b0+45: [], env=e0.8, next=%51.0
  (cls|spec|blt)  %51.2 = LdFun              !v    stop, e0.12
  fs              %51.3 = FrameState         R     0x5614fa834b20+393: [%51.2], env=e0.12, next=%51.1
  void                    Deopt              !v    %51.3, DeadCall@0x5614f9d270d8[Call#5], %51.2   !
BB18   <- [17]
  val?^ | miss    %18.0 = LdVar              eR    ns, e0.12
  val?            %18.1 = Force!<wrapped>    !v    %18.0, e0.12   <env->
  val?            %18.2 = PopContext         C     %18.1, %0.10   <env->
  void                    StVar              lW    ns, %18.2, e0.8
  val?^ | miss    %18.4 = LdVar              eR    get, e0.8
  lgl$#-          %18.5 = Identical                %18.4, function(x, pos=-(1L), envir=as.environment(po|...
  void                    Branch                   %18.5 -> BB71 (if true) | BB72 (if false)
BB69   <- [67]
  lgl$-           %69.0 = CastType           d     dn %67.1
  lgl$-           %69.1 = AsLogical                %69.0
  lgl$-           %69.2 = LAnd                     %65.2, %69.1
  lgl$-           %69.3 = %69.2
  goto BB17
BB70   <- [67]
  fs              %70.0 = FrameState         R     0x5614fabdd010+37: [], env=e0.4
  fs              %70.1 = FrameState         R     0x5614fa9903b0+45: [], env=e0.8, next=%70.0
  fs              %70.2 = FrameState         R     0x5614fa834b20+356: [%65.2, %67.1], env=e0.12, next=%70.1
  void                    Deopt              !v    %70.2, Typecheck@0x5614f9d270d8[Type#12], %67.1   !
BB71   <- [18]
  prom-           %71.0 = MkArg                    unboundValue, importIntoEnv[0x5614fac3f250]_p8, e0.8
  prom-           %71.1 = MkArg                    unboundValue, importIntoEnv[0x5614fac3f250]_p9, e0.8
  val?            %71.2 = StaticCall         !v    get[0x5614fa9a56f0](%71.0, missingArg, %71.1) { 0 2n } e0.8   <(str|env)_>
  val?            %71.3 = PopContext         C     %71.2, %0.6   <env->
  void                    StVar              lW    exports, %71.3, e0.4
  lgl$#-          %71.5 = IsType                   %71.3 isA val?-
  val?^ | miss    %71.6 = LdVar              eR    names, e0.4
  lgl$#-          %71.7 = Identical                <blt names>, %71.6   <true>
  void                    Branch                   %71.7 -> BB73 (if true) | BB74 (if false)
BB72   <- [18]
  fs              %72.0 = FrameState         R     0x5614fabdd010+37: [], env=e0.4
  fs              %72.1 = FrameState         R     0x5614fa9903b0+59: [], env=e0.8, next=%72.0
  void                    Deopt              !v    %72.1, CallTarget@0x5614f9ce6b98[Call#1], %18.4   !
BB73   <- [71]
  val             %73.0 = ChkMissing         e     %71.3
  void                    Branch                   %71.5 -> BB75 (if true) | BB76 (if false)
BB74   <- [71]
  void                    Nop                !     
  lgl$#-          %74.1 = %71.7
  dr              %74.2 = DeadBranchReached@0x5614fa984580[Test#0]
  goto BB21
BB75   <- [73]
  val?-           %75.0 = CastType           d     dn %71.3   <env->
  val+            %75.1 = CallSafeBuiltin    wed   names(%75.0)    <str->
  void                    StVar              lW    ex, %75.1, e0.4
  val?^ | miss    %75.3 = LdVar              eR    all, e0.4
  lgl$#-          %75.4 = Identical                <blt all>, %75.3   <true>
  void                    Branch                   %75.4 -> BB77 (if true) | BB78 (if false)
BB76   <- [73]
  void                    Nop                !     
  val?            %76.1 = %71.3
  dr              %76.2 = Typecheck@0x5614fa984580[Type#1]
  goto BB21
BB21   <- [74, 76]
  val?^ | miss    %21.0 = Phi                      %74.1:BB74, %76.1:BB76
  val?^ | miss    %21.1 = %21.0
  dr              %21.2 = Phi                      %74.2:BB74, %76.2:BB76
  dr              %21.3 = %21.2
  fs              %21.4 = FrameState         R     0x5614fabdd010+51: [], env=e0.4
  void                    Deopt              !v    %21.4, %21.3, %21.1   !
BB77   <- [75]
  val?^ | miss    %77.0 = LdVar              eR    %in%, e0.4
  lgl$#-          %77.1 = Identical                %77.0, function(x, table) <(rir::DispatchTable*)0x561|...
  void                    Branch                   %77.1 -> BB79 (if true) | BB80 (if false)
BB78   <- [75]
  void                    Nop                !     
  lgl$#-          %78.1 = %75.4
  dr              %78.2 = DeadBranchReached@0x5614fa984580[Test#1]
  goto BB23
BB79   <- [77]
  prom-           %79.0 = MkArg                    unboundValue, importIntoEnv[0x5614fac3f250]_p1, e0.4
  prom-           %79.1 = MkArg                    unboundValue, importIntoEnv[0x5614fac3f250]_p2 (!refl), e0.4
  val?^           %79.2 = CastType                 up %79.1
  val?^           %79.3 = CastType                 up %79.0
  env             e79.4 = MkEnv              l     x=%79.3, table=%79.2, parent=R_BaseNamespace, context 0
  prom-           %79.5 = MkArg                    unboundValue, importIntoEnv[0x5614fac3f250]_p11, e79.4
  val?^           %79.6 = CastType                 up %79.5
  val?^ | miss    %79.7 = LdVar              eR    expnames, e0.4
  val?            %79.8 = Force!<lazy>       !v    %79.7, e0.4   <str+>
  prom-           %79.9 = MkArg                    %79.8, importIntoEnv[0x5614fac3f250]_p1 (!refl), e0.4
  val?~           %79.10 = CastType                 up %79.9
  void                    StArg              lW    x, %79.10, e79.4
  prom-           %79.12 = MkArg                    %79.8, importIntoEnv[0x5614fac3f250]_p10 (!refl), e79.4
  val?~           %79.13 = CastType                 up %79.12
  env             e79.14 = (MkEnv)            l     x=%79.13, table=%79.6, nomatch=0L, incomparables(miss)=nil, parent=R_BaseNamespace, context -1
  lgl$#-          %79.15 = IsEnvStub          R     , e79.14
  void                    Branch                   %79.15 -> BB81 (if true) | BB82 (if false)
BB80   <- [77]
  void                    Nop                !     
  val?^ | miss    %80.1 = %77.0
  dr              %80.2 = CallTarget@0x5614fa984580[Call#4]
  goto BB23
BB23   <- [78, 80]
  val?^ | miss    %23.0 = Phi                      %78.1:BB78, %80.1:BB80
  val?^ | miss    %23.1 = %23.0
  dr              %23.2 = Phi                      %78.2:BB78, %80.2:BB80
  dr              %23.3 = %23.2
  fs              %23.4 = FrameState         R     0x5614fabdd010+156: [], env=e0.4
  void                    Deopt              !v    %23.4, %23.3, %23.1   !
BB81   <- [79]
  val?            %81.0 = Force!<lazy>       !vrL  %79.2, e79.14   <val?->
  prom-           %81.1 = MkArg                    %81.0, importIntoEnv[0x5614fac3f250]_p11 (!refl), e79.4
  val?~           %81.2 = CastType                 up %81.1
  void                    StArg              lWd   table, %81.2, e79.14
  lgl$#-          %81.4 = IsType                   %81.0 isA val?-
  lgl$#-          %81.5 = IsEnvStub          R     , e79.14
  void                    Branch                   %81.5 -> BB83 (if true) | BB84 (if false)
BB82   <- [79]
  fs              %82.0 = FrameState         R     0x5614fabdd010+253: [<blt all>], env=e0.4
  fs              %82.1 = FrameState         R     0x5614f8ed4320+54: [], env=e79.4, next=%82.0
  env             e82.2 = (MkEnv)            l     x=%79.13, table=%79.6, nomatch=0L, incomparables(miss)=nil, parent=R_BaseNamespace, context -1
  fs              %82.3 = FrameState         R     0x5614f90bbd40+9: [%79.8], env=e82.2, next=%82.1
  void                    Deopt              !v    %82.3, EnvStubMaterialized@0x5614f910ecb0[Call#unknown], e79.14   !
BB83   <- [81]
  lgl$#-          %83.0 = IsType                   %79.8 isA val?+
  void                    Branch                   %83.0 -> BB85 (if true) | BB86 (if false)
BB84   <- [81]
  void                    Nop                !     
  env             e84.1 = e79.14
  dr              %84.2 = EnvStubMaterialized@0x5614f910ecb0[Call#unknown]
  goto BB27
BB85   <- [83]
  val?+           %85.0 = CastType           d     dn %79.8   <(int|str)+>
  void                    Branch                   %81.4 -> BB87 (if true) | BB88 (if false)
BB86   <- [83]
  void                    Nop                !     
  val?            %86.1 = %79.8
  dr              %86.2 = Typecheck@0x5614f910ecb0[Type#0]
  goto BB27
BB27   <- [84, 86, 88]
  val?^ | miss    %27.0 = Phi                      e84.1:BB84, %86.1:BB86, %88.1:BB88
  val?^ | miss    %27.1 = %27.0
  dr              %27.2 = Phi                      %84.2:BB84, %86.2:BB86, %88.2:BB88
  dr              %27.3 = %27.2
  fs              %27.4 = FrameState         R     0x5614fabdd010+253: [<blt all>], env=e0.4
  fs              %27.5 = FrameState         R     0x5614f8ed4320+54: [], env=e79.4, next=%27.4
  fs              %27.6 = FrameState         R     0x5614f90bbd40+23: [%79.8, %81.0], env=e79.14, next=%27.5
  void                    Deopt              !v    %27.6, %27.3, %27.1   !
BB87   <- [85]
  val?-           %87.0 = CastType           d     dn %81.0
  val+            %87.1 = CallSafeBuiltin    wed   match(%85.0, %87.0, 0L, nil)    <int->
  lgl$#-          %87.2 = IsType                   %87.1 isA int-
  void                    Branch                   %87.2 -> BB89 (if true) | BB90 (if false)
BB88   <- [85]
  void                    Nop                !     
  val?            %88.1 = %81.0
  dr              %88.2 = Typecheck@0x5614f910ecb0[Type#1]
  goto BB27
BB89   <- [87]
  int-            %89.0 = CastType           d     dn %87.1
  lgl-            %89.1 = Gt                 wed   %89.0, 0L, elided   <lgl->
  void                    StVar              lW    eie, %89.1, e0.4
  val?            %89.3 = CallBuiltin        !v    all(%89.1) e0.4   <lgl$->
  lgl$#-          %89.4 = IsType                   %89.3 isA lgl$-
  void                    Branch                   %89.4 -> BB91 (if true) | BB92 (if false)
BB90   <- [87]
  fs              %90.0 = FrameState         R     0x5614fabdd010+253: [<blt all>], env=e0.4
  fs              %90.1 = FrameState         R     0x5614f8ed4320+54: [], env=e79.4, next=%90.0
  fs              %90.2 = FrameState         R     0x5614f90bbd40+69: [%87.1], env=e79.14, next=%90.1
  void                    Deopt              !v    %90.2, Typecheck@0x5614f9f06688[Type#2], %87.1   !
BB91   <- [89]
  lgl$-           %91.0 = CastType           d     dn %89.3
  lgl$-           %91.1 = Not                d     %91.0, elided
  lgl$#-          %91.2 = CheckTrueFalse     e     %91.1
  void                    Branch                   %91.2 -> BB43 (if true) | BB33 (if false)
BB92   <- [89]
  void                    Nop                !     
  val?            %92.1 = %89.3
  dr              %92.2 = Typecheck@0x5614fa984580[Type#11]
  goto BB31
BB43   <- [91]
  val?^ | miss    %43.0 = LdVar              eR    expnames, e0.4
  val?            %43.1 = Force!             !v    %43.0, e0.4   <val?_>
  lgl$#-          %43.2 = IsType                   %43.1 isA val+   <@?>
  void                    Branch                   %43.2 -> BB48 (if true) | BB44 (if false)
BB33   <- [91]
  val?^ | miss    %33.0 = LdVar              eR    unlist, e0.4
  lgl$#-          %33.1 = Identical                %33.0, function(x, recursive=TRUE, use.names=TRUE) <(|...
  void                    Branch                   %33.1 -> BB93 (if true) | BB94 (if false)
BB31   <- [92, 94]
  val?^ | miss    %31.0 = Phi                      %92.1:BB92, %94.1:BB94
  val?^ | miss    %31.1 = %31.0
  dr              %31.2 = Phi                      %92.2:BB92, %94.2:BB94
  dr              %31.3 = %31.2
  fs              %31.4 = FrameState         R     0x5614fabdd010+286: [%89.3], env=e0.4
  void                    Deopt              !v    %31.4, %31.3, %31.1   !
BB48   <- [43]
  val?^ | miss    %48.0 = LdVar              eR    eie, e0.4
  val?            %48.1 = Force!             !v    %48.0, e0.4   <val?_>
  lgl$#-          %48.2 = IsType                   %48.1 isA val?+
  void                    Branch                   %48.2 -> BB95 (if true) | BB96 (if false)
BB44   <- [43]
  prom-           %44.0 = MkArg                    unboundValue, importIntoEnv[0x5614fac3f250]_p6, e0.4
  prom-           %44.1 = %44.0
  goto BB45
BB93   <- [33]
  prom-           %93.0 = MkArg                    unboundValue, importIntoEnv[0x5614fac3f250]_p3, e0.4
  ct              %93.1 = PushContext        lCL   %93.0, false, unlist(mget(expnames, envir=exports, inherits=|..., function(x, recursive=TRUE, use.names=TRUE) <(|..., e0.4
  val?^           %93.2 = CastType                 up %93.0
  env             e93.3 = MkEnv              l     x=%93.2, recursive=false, use.names(miss)=true, parent=R_BaseNamespace, context 1
  cls             %93.4 = MkCls                    unlist@127, e93.3
  cls             %93.5 = MkCls                    unlist>URapply@148, e93.3
  val?            %93.6 = Force!<lazy>       !vL   %93.2, e93.3   <vec+>
  val?            %93.7 = CallBuiltin        !v    islistfactor(%93.6, false) e93.3
  lgl$#-          %93.8 = CheckTrueFalse     we    %93.7
  void                    Branch                   %93.8 -> BB39 (if true) | BB34 (if false)
BB94   <- [33]
  void                    Nop                !     
  val?^ | miss    %94.1 = %33.0
  dr              %94.2 = CallTarget@0x5614fa984580[Call#23]
  goto BB31
BB95   <- [48]
  val?+           %95.0 = CastType           d     dn %48.1   <val?_>
  lgl             %95.1 = Not                wed   %95.0, elided
  lgl             %95.2 = %95.1
  goto BB45
BB96   <- [48]
  fs              %96.0 = FrameState         R     0x5614fabdd010+357: [%43.1, %48.1], env=e0.4
  void                    Deopt              !v    %96.0, Typecheck@0x5614fa984580[Type#14], %48.1   !
BB45   <- [44, 95]
  (lgl|prom)      %45.0 = Phi                      %95.2:BB95, %44.1:BB44
  (lgl|prom)      %45.1 = %45.0
  val?            %45.2 = Extract1_1D        !v    %43.1, %45.1, e0.4   <val?_>
  void                    StVar              lW    miss, %45.2, e0.4
  val?^ | miss    %45.4 = LdVar              eR    all, e0.4
  lgl$#-          %45.5 = Identical                <blt all>, %45.4   <@?>
  void                    Branch                   %45.5 -> BB47 (if true) | BB46 (if false)
BB39   <- [93]
  val?^ | miss    %39.0 = LdVar              eR    recursive, e93.3
  val?            %39.1 = Force!             !v    %39.0, e93.3   <val?_>
  lgl$#-          %39.2 = CheckTrueFalse     we    %39.1
  void                    Branch                   %39.2 -> BB42 (if true) | BB40 (if false)
BB34   <- [93]
  val?^ | miss    %34.0 = LdVar              eR    x, e93.3
  val?            %34.1 = Force!<wrapped>    !v    %34.0, e93.3   <vec+>
  val?^ | miss    %34.2 = LdVar              eR    recursive, e93.3
  val?            %34.3 = Force!<wrapped>    !v    %34.2, e93.3   <lgl$->
  val?^ | miss    %34.4 = LdVar              eR    use.names, e93.3
  val?            %34.5 = Force!<lazy>       !v    %34.4, e93.3   <lgl$->
  val?            %34.6 = CallBuiltin        !v    unlist(%34.1, %34.3, %34.5) e93.3
  val?            %34.7 = PopContext         C     %34.6, %93.1   <str+>
  void                    StVar              lW    expnames, %34.7, e0.4
  val?^ | miss    %34.9 = LdVar              eR    impnames, e0.4
  val?            %34.10 = Force!<lazy>       !v    %34.9, e0.4   <str->
  lgl$-           %34.11 = Is                       %34.10, NULL
  lgl$#-          %34.12 = CheckTrueFalse     e     %34.11
  void                    Branch                   %34.12 -> BB38 (if true) | BB35 (if false)
BB47   <- [45]
  (cls|spec|blt)  %47.0 = LdFun              !v    startsWith, e0.4
  fs              %47.1 = FrameState         R     0x5614fabdd010+444: [<blt all>, %47.0], env=e0.4
  void                    Deopt              !v    %47.1, DeadCall@0x5614fa984580[Call#7], %47.0   !
BB46   <- [45]
  (cls|spec|blt)  %46.0 = LdFun              !v    all, e0.4
  fs              %46.1 = FrameState         R     0x5614fabdd010+407: [%46.0], env=e0.4
  void                    Deopt              !v    %46.1, DeadCall@0x5614fa984580[Call#5], %46.0   !
BB42   <- [39]
  void                    Nop                !     
  cls             %42.1 = %93.5
  goto BB41
BB40   <- [39]
  void                    Nop                !     
  cls             %40.1 = %93.4
  goto BB41
BB38   <- [34]
  (cls|spec|blt)  %38.0 = LdFun              !v    character, e0.4
  fs              %38.1 = FrameState         R     0x5614fabdd010+774: [%38.0], env=e0.4
  void                    Deopt              !v    %38.1, DeadCall@0x5614fa984580[Call#25], %38.0   !
BB35   <- [34]
  val?^ | miss    %35.0 = LdVar              eR    expnames, e0.4
  val?            %35.1 = Force!<value>      !v    %35.0, e0.4   <str+>
  lgl$-           %35.2 = Is                       %35.1, NULL
  lgl$#-          %35.3 = CheckTrueFalse     e     %35.2
  void                    Branch                   %35.3 -> BB37 (if true) | BB36 (if false)
BB41   <- [42, 40]
  fs              %41.0 = FrameState         R     0x5614fabdd010+725: [], env=e0.4
  cls             %41.1 = Phi                      %40.1:BB40, %42.1:BB42
  cls             %41.2 = %41.1
  void                    StVar              lW    URapply, %41.2, e93.3
  (cls|spec|blt)  %41.4 = LdFun              !v    unique, e93.3
  fs              %41.5 = FrameState         R     0x5614fa772fd0+178: [%41.4], env=e93.3, next=%41.0
  void                    Deopt              !v    %41.5, DeadCall@0x5614f8e7e730[Call#0], %41.4   !
BB37   <- [35]
  (cls|spec|blt)  %37.0 = LdFun              !v    character, e0.4
  fs              %37.1 = FrameState         R     0x5614fabdd010+845: [%37.0], env=e0.4
  void                    Deopt              !v    %37.1, DeadCall@0x5614fa984580[Call#26], %37.0   !
BB36   <- [35]
  val?^ | miss    %36.0 = LdVar              eR    impenv, e0.4
  val?            %36.1 = Force!<lazy>       !v    %36.0, e0.4   <env+>
  val?^ | miss    %36.2 = LdVar              eR    impnames, e0.4
  val?            %36.3 = Force!<wrapped>    !v    %36.2, e0.4   <str->
  val?^ | miss    %36.4 = LdVar              eR    expenv, e0.4
  val?            %36.5 = Force!<wrapped>    !v    %36.4, e0.4   <env->
  val?^ | miss    %36.6 = LdVar              eR    expnames, e0.4
  val?            %36.7 = Force!<value>      !v    %36.6, e0.4   <str+>
  val?            %36.8 = CallBuiltin        !     importIntoEnv(%36.1, %36.3, %36.5, %36.7) e0.4
  void                    Return             l     %36.8
Prom 0:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    expenv, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    expnames, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str+>
  void                    Return             l     %0.3
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    ex, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 3:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     mget, <0x5614f988cb38>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, importIntoEnv[0x5614fac3f250]_p4, e0.0
  prom-           %0.3  = MkArg                    unboundValue, importIntoEnv[0x5614fac3f250]_p5, e0.0
  val?            %0.4  = NamedCall          !     %0.1(%0.2, envir=%0.3, inherits=false) e0.0   <vec+>
  void                    Return             l     %0.4
Prom 4:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    expnames, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str+>
  void                    Return             l     %0.3
Prom 5:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    exports, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 6:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    eie, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  val?            %0.4  = Not                !     %0.3, e0.0
  void                    Return             l     %0.4
Prom 7:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    ns, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 8:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    which, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 9:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    ns, e0.0
  val?            %0.2  = Force<value>       !v    %0.1, e0.0   <env->
  val?            %0.3  = Extract2_1D        !v    %0.2, ".__NAMESPACE__.", e0.0   <env->
  void                    Visible            v     
  void                    Return             l     %0.3
Prom 10:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    x, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <(int|str)+>
  void                    Return             l     %0.3
Prom 11:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    table, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <val?->
  void                    Return             l     %0.3
Prom 14:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    ns, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$+>
  void                    Return             l     %0.3
Prom 15:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    ns, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 16:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    ns, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <env->
  void                    Return             l     %0.3

│ importIntoEnv[0x5614fac3f250]                                                │
└──────────────────────────────────────────────────────────────────────────────┘
