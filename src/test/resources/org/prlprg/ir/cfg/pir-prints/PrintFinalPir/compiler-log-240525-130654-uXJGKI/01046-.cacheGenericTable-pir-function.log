
┌──────────────────────────────────────────────────────────────────────────────┐
│ .cacheGenericTable[0x5614fb9baf40]                                           │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch                                      │
│ Properties:  ForceOrd: 1                                                     │
├────── Final PIR Version
.cacheGenericTable[0x5614fb9baf40]
BB0
  val?^           %0.0  = LdArg                    2
  val?^           %0.1  = LdArg                    1
  val?^           %0.2  = LdArg                    0
  env             e0.3  = MkEnv              l     name=%0.2, def=%0.1, table=%0.0, parent=<env 0x5614f8eae378>, context 1
  val?            %0.4  = Force!<lazy>       !v    %0.1, e0.3   <cls>
  void                    StVar              lW    fdef, %0.4, e0.3
  val?^ | miss    %0.6  = LdVar              eR    table, e0.3
  val?            %0.7  = Force!<lazy>       !v    %0.6, e0.3   <env->
  lgl$#-          %0.8  = IsType                   %0.7 isA val+   <true>
  void                    Branch                   %0.8 -> BB36 (if true) | BB37 (if false)
BB36   <- [0]
  val?^ | miss    %36.0 = LdVar              eR    name, e0.3
  val?            %36.1 = Force!<lazy>       !v    %36.0, e0.3   <str$->
  lgl$#-          %36.2 = IsType                   %36.1 isA val?-
  lgl$#-          %36.3 = IsType                   %0.7 isA val?-
  void                    Branch                   %36.3 -> BB38 (if true) | BB39 (if false)
BB37   <- [0]
  fs              %37.0 = FrameState         R     0x5614f8cfcfe0+32: [%0.7], env=e0.3
  void                    Deopt              !v    %37.0, DeadBranchReached@0x5614fb48fdf0[Test#0], %0.8   !
BB38   <- [36]
  val?-           %38.0 = CastType           d     dn %0.7   <env->
  void                    Branch                   %36.2 -> BB40 (if true) | BB41 (if false)
BB39   <- [36]
  void                    Nop                !     
  val?            %39.1 = %0.7
  dr              %39.2 = Typecheck@0x5614fb48fdf0[Type#1]
  goto BB3
BB40   <- [38]
  val?-           %40.0 = CastType           d     dn %36.1   <str$->
  val?            %40.1 = Extract2_1D        wed   %38.0, %40.0, elided   <cls>
  lgl$-           %40.2 = Is                       %40.1, NULL
  void                    StVar              lW    prev, %40.1, e0.3
  lgl$-           %40.4 = Not                d     %40.2, elided
  lgl$#-          %40.5 = CheckTrueFalse     e     %40.4
  void                    Branch                   %40.5 -> BB10 (if true) | BB5 (if false)
BB41   <- [38]
  void                    Nop                !     
  val?            %41.1 = %36.1
  dr              %41.2 = Typecheck@0x5614fb48fdf0[Type#3]
  goto BB3
BB3   <- [39, 41]
  val?^ | miss    %3.0  = Phi                      %39.1:BB39, %41.1:BB41
  val?^ | miss    %3.1  = %3.0
  dr              %3.2  = Phi                      %39.2:BB39, %41.2:BB41
  dr              %3.3  = %3.2
  fs              %3.4  = FrameState         R     0x5614f8cfcfe0+77: [%0.7, %36.1], env=e0.3
  void                    Deopt              !v    %3.4, %3.3, %3.1   !
BB10   <- [40]
  (cls|spec|blt)  %10.0 = LdFun              !v    @, <0x5614f88a6bd8>, e0.3
  prom-           %10.1 = MkArg                    unboundValue, .cacheGenericTable[0x5614fb9baf40]_p1, e0.3
  prom-           %10.2 = MkArg                    unboundValue, .cacheGenericTable[0x5614fb9baf40]_p2, e0.3
  val?            %10.3 = Call               !v    %10.0(%10.1, %10.2) e0.3   <str$->
  void                    StVar              lW    newpkg, %10.3, e0.3
  val?^ | miss    %10.5 = LdVar              eR    is.function, e0.3
  lgl$#-          %10.6 = Identical                <blt is.function>, %10.5   <true>
  void                    Branch                   %10.6 -> BB42 (if true) | BB43 (if false)
BB5   <- [40]
  void                    Nop                !     
  goto BB6
BB42   <- [10]
  val?^ | miss    %42.0 = LdVar              eR    prev, e0.3
  val?            %42.1 = Force!<value>      !v    %42.0, e0.3   <cls>
  val?            %42.2 = CallBuiltin        !v    is.function(%42.1) e0.3   <lgl$->
  lgl$#-          %42.3 = IsType                   %42.2 isA lgl$-
  void                    Branch                   %42.3 -> BB44 (if true) | BB45 (if false)
BB43   <- [10]
  fs              %43.0 = FrameState         R     0x5614f8cfcfe0+168: [], env=e0.3
  void                    Deopt              !v    %43.0, DeadBranchReached@0x5614fb48fdf0[Test#1], %10.6   !
BB6   <- [5, 21]
  val?^ | miss    %6.0  = LdVar              eR    .getMethodsTable, e0.3
  lgl$#-          %6.1  = Identical                %6.0, function(fdef, env=environment(fdef), check=TR|...
  void                    Branch                   %6.1 -> BB46 (if true) | BB47 (if false)
BB44   <- [42]
  lgl$-           %44.0 = CastType           d     dn %42.2
  lgl$#-          %44.1 = CheckTrueFalse     e     %44.0
  void                    Branch                   %44.1 -> BB25 (if true) | BB15 (if false)
BB45   <- [42]
  void                    Nop                !     
  val?            %45.1 = %42.2
  dr              %45.2 = Typecheck@0x5614fb48fdf0[Type#10]
  goto BB13
BB46   <- [6]
  prom-           %46.0 = MkArg                    unboundValue, .cacheGenericTable[0x5614fb9baf40]_p0, e0.3
  val?            %46.1 = StaticCall         !v    .getMethodsTable[0x5614ff21abe0](%46.0) e0.3
  val?^ | miss    %46.2 = LdVar              eR    def, e0.3
  val?            %46.3 = Force!<wrapped>    !v    %46.2, e0.3   <cls>
  val?^ | miss    %46.4 = LdVar              eR    table, e0.3
  val?            %46.5 = Force!<wrapped>    !v    %46.4, e0.3   <env->
  val?^ | miss    %46.6 = LdVar              eR    name, e0.3
  val?            %46.7 = Force!<wrapped>    !v    %46.6, e0.3   <str$->
  val?            %46.8 = Subassign2_1D      !v    %46.3, %46.5, %46.7, e0.3
  void                    StVar              lW    table, %46.8, e0.3
  val?^ | miss    %46.10 = LdVar              eR    fdef, e0.3
  void                    Visible            v     
  val?            %46.12 = Force!<value>      !     %46.10, e0.3   <cls>
  val?            %46.13 = %46.12
  goto BB9
BB47   <- [6]
  fs              %47.0 = FrameState         R     0x5614f8cfcfe0+1054: [], env=e0.3
  void                    Deopt              !v    %47.0, CallTarget@0x5614fb48fdf0[Call#11], %6.0   !
BB25   <- [44]
  val?^ | miss    %25.0 = LdVar              eR    identical, e0.3
  lgl$#-          %25.1 = Identical                %25.0, function(x, y, num.eq=TRUE, single.NA=TRUE, at|...
  void                    Branch                   %25.1 -> BB48 (if true) | BB49 (if false)
BB15   <- [44]
  void                    Nop                !     
  goto BB16
BB13   <- [45, 49]
  val?^ | miss    %13.0 = Phi                      %45.1:BB45, %49.1:BB49
  val?^ | miss    %13.1 = %13.0
  dr              %13.2 = Phi                      %45.2:BB45, %49.2:BB49
  dr              %13.3 = %13.2
  fs              %13.4 = FrameState         R     0x5614f8cfcfe0+259: [%42.2], env=e0.3
  void                    Deopt              !v    %13.4, %13.3, %13.1   !
BB9   <- [34, 22, 33, 46]
  val?            %9.0  = Phi                      %46.13:BB46, %22.3:BB22, %33.11:BB33, %34.3:BB34
  val?            %9.1  = %9.0
  void                    Return             l     %9.1
BB48   <- [25]
  prom-           %48.0 = MkArg                    unboundValue, .cacheGenericTable[0x5614fb9baf40]_p10, e0.3
  prom-           %48.1 = MkArg                    unboundValue, .cacheGenericTable[0x5614fb9baf40]_p11, e0.3
  ct              %48.2 = PushContext        lCL   %48.0, %48.1, identical(prev, def), function(x, y, num.eq=TRUE, single.NA=TRUE, at|..., e0.3
  val?^           %48.3 = CastType                 up %48.1
  val?^           %48.4 = CastType                 up %48.0
  env             e48.5 = MkEnv              l     x=%48.4, y=%48.3, num.eq(miss)=true, single.NA(miss)=true, attrib.as.set(miss)=true, ignore.bytecode(miss)=true, ignore.environment(miss)=false, ignore.srcref(miss)=true, parent=R_BaseNamespace, context 1
  val?            %48.6 = Force!<lazy>       !vL   %48.4, e48.5   <val?>
  val?            %48.7 = Force!<lazy>       !vL   %48.3, e48.5   <val?>
  val?            %48.8 = CallBuiltin        !v    identical(%48.6, %48.7, true, true, true, true, false, true) e48.5
  val?            %48.9 = PopContext         C     %48.8, %48.2   <lgl$->
  lgl$#-          %48.10 = IsType                   %48.9 isA lgl$-
  void                    Branch                   %48.10 -> BB50 (if true) | BB51 (if false)
BB49   <- [25]
  void                    Nop                !     
  val?^ | miss    %49.1 = %25.0
  dr              %49.2 = CallTarget@0x5614fb48fdf0[Call#2]
  goto BB13
BB16   <- [15, 31]
  (cls|spec|blt)  %16.0 = LdFun              !v    match, e0.3
  prom-           %16.1 = MkArg                    unboundValue, .cacheGenericTable[0x5614fb9baf40]_p3, e0.3
  prom-           %16.2 = MkArg                    unboundValue, .cacheGenericTable[0x5614fb9baf40]_p4, e0.3
  val?            %16.3 = Call               !v    %16.0(%16.1, %16.2) e0.3   <>
  void                    StVar              lW    i, %16.3, e0.3
  val?^ | miss    %16.5 = LdVar              eR    is.na, e0.3
  lgl$#-          %16.6 = Identical                <blt is.na>, %16.5   <@?>
  void                    Branch                   %16.6 -> BB24 (if true) | BB17 (if false)
BB50   <- [48]
  lgl$-           %50.0 = CastType           d     dn %48.9
  lgl$#-          %50.1 = CheckTrueFalse     e     %50.0
  void                    Branch                   %50.1 -> BB34 (if true) | BB28 (if false)
BB51   <- [48]
  fs              %51.0 = FrameState         R     0x5614f8cfcfe0+312: [%48.9], env=e0.3
  void                    Deopt              !v    %51.0, Typecheck@0x5614fb48fdf0[Type#13], %48.9   !
BB24   <- [16]
  val             %24.0 = ChkMissing         e     %16.3
  val?            %24.1 = CallBuiltin        !v    is.na(%16.3) e0.3
  val?            %24.2 = %24.1
  goto BB18
BB17   <- [16]
  val             %17.0 = ChkMissing         e     %16.3
  val?            %17.1 = CallBuiltin        !v    is.na(%16.3) e0.3
  val?            %17.2 = %17.1
  goto BB18
BB34   <- [50]
  val?^ | miss    %34.0 = LdVar              eR    fdef, e0.3
  void                    Visible            v     
  val?            %34.2 = Force!<value>      !     %34.0, e0.3   <cls>
  val?            %34.3 = %34.2
  goto BB9
BB28   <- [50]
  (cls|spec|blt)  %28.0 = LdFun              !v    @, e0.3
  prom-           %28.1 = MkArg                    unboundValue, .cacheGenericTable[0x5614fb9baf40]_p12, e0.3
  prom-           %28.2 = MkArg                    unboundValue, .cacheGenericTable[0x5614fb9baf40]_p13, e0.3
  val?            %28.3 = Call               !v    %28.0(%28.1, %28.2) e0.3   <>
  void                    StVar              lW    pkg, %28.3, e0.3
  (cls|spec|blt)  %28.5 = LdFun              !v    identical, e0.3
  prom-           %28.6 = MkArg                    unboundValue, .cacheGenericTable[0x5614fb9baf40]_p14, e0.3
  prom-           %28.7 = MkArg                    unboundValue, .cacheGenericTable[0x5614fb9baf40]_p15, e0.3
  val?            %28.8 = Call               !v    %28.5(%28.6, %28.7) e0.3   <>
  lgl$#-          %28.9 = CheckTrueFalse     we    %28.8
  void                    Branch                   %28.9 -> BB33 (if true) | BB29 (if false)
BB18   <- [17, 24]
  val?            %18.0 = Phi                      %17.2:BB17, %24.2:BB24   <>
  val?            %18.1 = %18.0
  lgl$#-          %18.2 = CheckTrueFalse     we    %18.1
  void                    Branch                   %18.2 -> BB23 (if true) | BB19 (if false)
BB33   <- [28]
  val?^ | miss    %33.0 = LdVar              eR    def, e0.3
  val?            %33.1 = Force!             !v    %33.0, e0.3   <>
  val?^ | miss    %33.2 = LdVar              eR    table, e0.3
  val?            %33.3 = Force!             !v    %33.2, e0.3   <>
  val?^ | miss    %33.4 = LdVar              eR    name, e0.3
  val?            %33.5 = Force!             !v    %33.4, e0.3   <>
  val?            %33.6 = Subassign2_1D      !v    %33.1, %33.3, %33.5, e0.3
  void                    StVar              lW    table, %33.6, e0.3
  val?^ | miss    %33.8 = LdVar              eR    fdef, e0.3
  void                    Visible            v     
  val?            %33.10 = Force!             !     %33.8, e0.3   <>
  val?            %33.11 = %33.10
  goto BB9
BB29   <- [28]
  val?^ | miss    %29.0 = LdVar              eR    list, e0.3
  lgl$#-          %29.1 = Identical                <blt list>, %29.0   <@?>
  void                    Branch                   %29.1 -> BB32 (if true) | BB30 (if false)
BB23   <- [18]
  val?^ | miss    %23.0 = LdVar              eR    def, e0.3
  val?            %23.1 = Force!             !v    %23.0, e0.3   <>
  val?^ | miss    %23.2 = LdVar              eR    prev !upd, e0.3
  val?            %23.3 = Force!             !v    %23.2, e0.3   <>
  val?^ | miss    %23.4 = LdVar              eR    newpkg, e0.3
  val?            %23.5 = Force!             !v    %23.4, e0.3   <>
  val?            %23.6 = Subassign2_1D      !v    %23.1, %23.3, %23.5, e0.3
  void                    StVar              lW    prev, %23.6, e0.3
  val?            %23.8 = %23.6
  goto BB21
BB19   <- [18]
  (cls|spec|blt)  %19.0 = LdFun              !v    identical, e0.3
  prom-           %19.1 = MkArg                    unboundValue, .cacheGenericTable[0x5614fb9baf40]_p7, e0.3
  prom-           %19.2 = MkArg                    unboundValue, .cacheGenericTable[0x5614fb9baf40]_p8, e0.3
  val?            %19.3 = Call               !v    %19.0(%19.1, %19.2) e0.3   <>
  lgl$#-          %19.4 = CheckTrueFalse     we    %19.3
  void                    Branch                   %19.4 -> BB22 (if true) | BB20 (if false)
BB32   <- [29]
  val?^ | miss    %32.0 = LdVar              eR    prev, e0.3
  val?            %32.1 = Force!             !v    %32.0, e0.3   <>
  val+            %32.2 = CallSafeBuiltin    wed   list(%32.1) 
  val+            %32.3 = %32.2
  goto BB31
BB30   <- [29]
  val?^ | miss    %30.0 = LdVar              eR    prev, e0.3
  val?            %30.1 = Force!             !v    %30.0, e0.3   <>
  val+            %30.2 = CallSafeBuiltin    wed   list(%30.1) 
  val+            %30.3 = %30.2
  goto BB31
BB21   <- [23, 20]
  val?            %21.0 = Phi                      %23.8:BB23, %20.8:BB20
  val?            %21.1 = %21.0
  val             %21.2 = ChkMissing         e     %21.1   <>
  void                    StVar              lW    def, %21.2, e0.3
  goto BB6
BB22   <- [19]
  val?^ | miss    %22.0 = LdVar              eR    fdef, e0.3
  void                    Visible            v     
  val?            %22.2 = Force!             !     %22.0, e0.3   <>
  val?            %22.3 = %22.2
  goto BB9
BB20   <- [19]
  val?^ | miss    %20.0 = LdVar              eR    def, e0.3
  val?            %20.1 = Force!             !v    %20.0, e0.3   <>
  val?^ | miss    %20.2 = LdVar              eR    prev !upd, e0.3
  val?            %20.3 = Force!             !v    %20.2, e0.3   <>
  val?^ | miss    %20.4 = LdVar              eR    i, e0.3
  val?            %20.5 = Force!             !v    %20.4, e0.3   <>
  val?            %20.6 = Subassign2_1D      !v    %20.1, %20.3, %20.5, e0.3
  void                    StVar              lW    prev, %20.6, e0.3
  val?            %20.8 = %20.6
  goto BB21
BB31   <- [30, 32]
  val+            %31.0 = Phi                      %30.3:BB30, %32.3:BB32   <>
  val+            %31.1 = %31.0
  void                    StVar              lW    prev, %31.1, e0.3
  val?^ | miss    %31.3 = LdVar              eR    pkg, e0.3
  val?            %31.4 = Force!             !v    %31.3, e0.3   <>
  (cls|spec|blt)  %31.5 = LdFun              !v    names<-, e0.3
  val?^ | miss    %31.6 = LdVar              eR    prev, e0.3
  val?            %31.7 = Force!             !v    %31.6, e0.3   <>
  val?            %31.8 = NamedCall          !v    %31.5(%31.7, value=%31.4) e0.3
  void                    StVar              lW    prev, %31.8, e0.3
  goto BB16
Prom 0:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fdef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    def, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <>
  void                    Return             l     %0.3
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    package, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <>
  void                    Return             l     %0.3
Prom 3:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    newpkg, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <>
  void                    Return             l     %0.3
Prom 4:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     names, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .cacheGenericTable[0x5614fb9baf40]_p5, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <>
  void                    Return             l     %0.3
Prom 5:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    prev, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <>
  void                    Return             l     %0.3
Prom 7:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    def, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <>
  void                    Return             l     %0.3
Prom 8:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    prev, e0.0
  val?            %0.2  = Force              !v    %0.1, e0.0   <>
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <@?>
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    i, e0.0
  val?            %2.1  = Force              !v    %2.0, e0.0   <>
  val?            %2.2  = %2.1
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, .cacheGenericTable[0x5614fb9baf40]_p9, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.2:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract2_1D        !v    %0.2, %3.1, e0.0   <>
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 9:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    i, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <>
  void                    Return             l     %0.3
Prom 10:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    prev, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 11:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    def, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 12:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    prev, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <>
  void                    Return             l     %0.3
Prom 13:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    package, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <>
  void                    Return             l     %0.3
Prom 14:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    pkg, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <>
  void                    Return             l     %0.3
Prom 15:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    newpkg, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <>
  void                    Return             l     %0.3

│ .cacheGenericTable[0x5614fb9baf40]                                           │
└──────────────────────────────────────────────────────────────────────────────┘
