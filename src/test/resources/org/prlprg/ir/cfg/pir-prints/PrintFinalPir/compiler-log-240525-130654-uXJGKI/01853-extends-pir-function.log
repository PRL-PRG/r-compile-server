
┌──────────────────────────────────────────────────────────────────────────────┐
│ extends[0x561505402ea0]                                                      │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;NonRefl0,NonRefl1,!Obj0,!Obj1 miss: 2│
│ Properties:                                                                  │
├────── Final PIR Version
extends[0x561505402ea0]
BB0
  val?^           %0.0  = LdArg                    1
  val?^           %0.1  = LdArg                    0
  val?^ | miss    %0.2  = LdVar              eR    is.character, <env 0x5614f8eae378>
  lgl$#-          %0.3  = Identical                <blt is.character>, %0.2   <true>
  void                    Branch                   %0.3 -> BB138 (if true) | BB139 (if false)
BB138   <- [0]
  env             e138.0 = MkEnv              l     class1=%0.1, class2=%0.0, maybe(miss)=true, fullInfo(miss)=false, parent=<env 0x5614f8eae378>, context 1
  val+            %138.1 = Force!<lazy>       !vr   %0.1,    <(str|other)>
  lgl$#-          %138.2 = CallSafeBuiltin    wed   is.character(%138.1)    <lgl$->
  void                    Branch                   %138.2 -> BB129 (if true) | BB5 (if false)
BB139   <- [0]
  env             e139.0 = (MkEnv)            l     class1=%0.1, class2=%0.0, maybe(miss)=true, fullInfo(miss)=false, parent=<env 0x5614f8eae378>, context 1
  fs              %139.1 = FrameState         R     0x5614fd2e6430+0: [], env=e139.0
  void                    Deopt              !v    %139.1, DeadBranchReached@0x5614fb132b80[Test#0], %0.3
BB129   <- [138]
  val?^ | miss    %129.0 = LdVar              eR    length, <env 0x5614f8eae378>
  lgl$#-          %129.1 = Identical                <blt length>, %129.0   <true>
  void                    Branch                   %129.1 -> BB140 (if true) | BB141 (if false)
BB5   <- [138]
  val?^ | miss    %5.0  = LdVar              eR    is, <env 0x5614f8eae378>
  lgl$#-          %5.1  = Identical                %5.0, function(object, class2) <(rir::DispatchTable*|...
  void                    Branch                   %5.1 -> BB142 (if true) | BB143 (if false)
BB140   <- [129]
  (int|real)$-    %140.0 = CallSafeBuiltin    wed   length(%138.1)    <int$->
  lgl$#-          %140.1 = IsType                   %140.0 isA int$-
  void                    Branch                   %140.1 -> BB144 (if true) | BB145 (if false)
BB141   <- [129]
  void                    Nop                !     
  lgl$#-          %141.1 = %129.1
  dr              %141.2 = DeadBranchReached@0x5614fb132b80[Test#1]
  goto BB3
BB142   <- [5]
  prom-           %142.0 = MkArg                    unboundValue, extends[0x561505402ea0]_p2 (!refl), e138.0
  val?            %142.1 = Call               !v    function(object, class2) <(rir::DispatchTable*|...(%142.0, "classRepresentation") e138.0   <lgl$->
  lgl$#-          %142.2 = IsType                   %142.1 isA lgl$-
  void                    Branch                   %142.2 -> BB146 (if true) | BB147 (if false)
BB143   <- [5]
  void                    Nop                !     
  val?^ | miss    %143.1 = %5.0
  dr              %143.2 = CallTarget@0x5614fb132b80[Call#1]
  goto BB3
BB144   <- [140]
  int$-           %144.0 = CastType           d     dn %140.0
  lgl$-           %144.1 = Gt                 d     %144.0, 1L, elided   <lgl$->
  lgl$#-          %144.2 = CheckTrueFalse     e     %144.1
  void                    Branch                   %144.2 -> BB136 (if true) | BB132 (if false)
BB145   <- [140]
  fs              %145.0 = FrameState         R     0x5614fd2e6430+358: [%140.0], env=e138.0
  void                    Deopt              !v    %145.0, Typecheck@0x5614fb132b80[Type#11], %140.0
BB3   <- [141, 143]
  val?^ | miss    %3.0  = Phi                      %141.1:BB141, %143.1:BB143
  val?^ | miss    %3.1  = %3.0
  dr              %3.2  = Phi                      %141.2:BB141, %143.2:BB143
  dr              %3.3  = %3.2
  fs              %3.4  = FrameState         R     0x5614fd2e6430+91: [%138.2], env=e138.0
  void                    Deopt              !v    %3.4, %3.3, %3.1
BB146   <- [142]
  lgl$-           %146.0 = CastType           d     dn %142.1
  lgl$#-          %146.1 = CheckTrueFalse     e     %146.0
  void                    Branch                   %146.1 -> BB9 (if true) | BB8 (if false)
BB147   <- [142]
  fs              %147.0 = FrameState         R     0x5614fd2e6430+139: [%142.1], env=e138.0
  void                    Deopt              !v    %147.0, Typecheck@0x5614fb132b80[Type#4], %142.1   !
BB136   <- [144]
  val?            %136.0 = Extract2_1D        wed   %138.1, 1L, elided   <val?_>
  void                    StVar              lW    class1, %136.0, e138.0
  goto BB133
BB132   <- [144]
  void                    Nop                !     
  goto BB133
BB9   <- [146]
  val?^ | miss    %9.0  = LdVar              eR    class1, e138.0
  val?            %9.1  = Force!<wrapped>    !v    %9.0, e138.0   <other>
  void                    StVar              lW    classDef1, %9.1, e138.0
  (cls|spec|blt)  %9.3  = LdFun              !v    @, <0x5614f88a6bd8>, e138.0
  prom-           %9.4  = MkArg                    unboundValue, extends[0x561505402ea0]_p3, e138.0
  prom-           %9.5  = MkArg                    unboundValue, extends[0x561505402ea0]_p4, e138.0
  val?            %9.6  = Call               !v    %9.3(%9.4, %9.5) e138.0   <str$+>
  void                    StVar              lW    class1, %9.6, e138.0
  goto BB10
BB8   <- [146]
  (cls|spec|blt)  %8.0  = LdFun              !v    stop, e138.0
  fs              %8.1  = FrameState         R     0x5614fd2e6430+155: [%8.0], env=e138.0
  void                    Deopt              !v    %8.1, DeadCall@0x5614fb132b80[Call#2], %8.0   !
BB133   <- [132, 136]
  val?^ | miss    %133.0 = LdVar              eR    getClassDef, <env 0x5614f8eae378>
  lgl$#-          %133.1 = Identical                %133.0, function(Class, where=topenv(parent.frame()), |...
  void                    Branch                   %133.1 -> BB148 (if true) | BB149 (if false)
BB10   <- [9, 148]
  lgl$-           %10.0 = Missing            eR    class2, e138.0
  lgl$#-          %10.1 = CheckTrueFalse     e     %10.0
  void                    Branch                   %10.1 -> BB77 (if true) | BB11 (if false)
BB148   <- [133]
  prom-           %148.0 = MkArg                    unboundValue, extends[0x561505402ea0]_p27 (!refl), e138.0
  val?            %148.1 = StaticCall         !v    getClassDef[0x561504f9b1c0](%148.0) e138.0   <other>
  void                    StVar              lW    classDef1, %148.1, e138.0
  goto BB10
BB149   <- [133]
  fs              %149.0 = FrameState         R     0x5614fd2e6430+453: [], env=e138.0
  void                    Deopt              !v    %149.0, CallTarget@0x5614fb132b80[Call#5], %133.0
BB77   <- [10]
  val?^ | miss    %77.0 = LdVar              eR    classDef1, e138.0
  val?            %77.1 = Force!<value>      !v    %77.0, e138.0   <other>
  lgl$-           %77.2 = Is                       %77.1, NULL
  lgl$#-          %77.3 = CheckTrueFalse     e     %77.2
  void                    Branch                   %77.3 -> BB128 (if true) | BB78 (if false)
BB11   <- [10]
  void                    StVar              lW    value, nil, e138.0
  val?^ | miss    %11.1 = LdVar              eR    is.character, e138.0
  lgl$#-          %11.2 = Identical                <blt is.character>, %11.1   <true>
  void                    Branch                   %11.2 -> BB150 (if true) | BB151 (if false)
BB128   <- [77]
  val?^ | miss    %128.0 = LdVar              eR    class1, e138.0
  void                    Visible            v     
  val?            %128.2 = Force!             !     %128.0, e138.0   <val?_>
  val?            %128.3 = %128.2
  goto BB57
BB78   <- [77]
  (cls|spec|blt)  %78.0 = LdFun              !v    @, <0x5614f88a6bd8>, e138.0
  prom-           %78.1 = MkArg                    unboundValue, extends[0x561505402ea0]_p22, e138.0
  prom-           %78.2 = MkArg                    unboundValue, extends[0x561505402ea0]_p23, e138.0
  val?            %78.3 = Call               !v    %78.0(%78.1, %78.2) e138.0   <vec+>
  void                    StVar              lW    ext, %78.3, e138.0
  val?^ | miss    %78.5 = LdVar              eR    isTRUE, e138.0
  lgl$#-          %78.6 = Identical                %78.5, function(x) <(rir::DispatchTable*)0x5614fa764a|...
  void                    Branch                   %78.6 -> BB152 (if true) | BB153 (if false)
BB150   <- [11]
  val?^ | miss    %150.0 = LdVar              eR    class2, e138.0
  val?            %150.1 = Force!<lazy>       !v    %150.0, e138.0   <str$+>
  lgl$#-          %150.2 = CallSafeBuiltin    wed   is.character(%150.1)    <lgl$->
  void                    Branch                   %150.2 -> BB72 (if true) | BB16 (if false)
BB151   <- [11]
  fs              %151.0 = FrameState         R     0x5614fd2e6430+1206: [], env=e138.0
  void                    Deopt              !v    %151.0, DeadBranchReached@0x5614fb132b80[Test#7], %11.2   !
BB57   <- [70, 128, 56, 204, 206]
  val?            %57.0 = Phi                      %56.2:BB56, %70.1:BB70, %206.2:BB206, %204.5:BB204, %128.3:BB128
  val?            %57.1 = %57.0
  void                    Return             l     %57.1
BB152   <- [78]
  val?^ | miss    %152.0 = LdVar              eR    maybe, e138.0
  val?            %152.1 = Force!<value>      !v    %152.0, e138.0   <lgl$->
  val+            %152.2 = CallSafeBuiltin    wed   is.logical(%152.1)    <lgl$->
  lgl$#-          %152.3 = IsType                   %152.2 isA lgl$-
  void                    Branch                   %152.3 -> BB156 (if true) | BB157 (if false)
BB153   <- [78]
  fs              %153.0 = FrameState         R     0x5614fd2e6430+612: [], env=e138.0
  void                    Deopt              !v    %153.0, CallTarget@0x5614fb132b80[Call#7], %78.5   !
BB72   <- [150]
  val?^ | miss    %72.0 = LdVar              eR    length, e138.0
  lgl$#-          %72.1 = Identical                <blt length>, %72.0   <true>
  void                    Branch                   %72.1 -> BB154 (if true) | BB155 (if false)
BB16   <- [150]
  void                    Nop                !     
  lgl$#-          %16.1 = %150.2
  goto BB17
BB156   <- [152]
  lgl$-           %156.0 = CastType           d     dn %152.2
  lgl$-           %156.1 = AsLogical                %156.0
  lgl$#-          %156.2 = Identical                %156.1, false
  void                    Branch                   %156.2 -> BB127 (if true) | BB83 (if false)
BB157   <- [152]
  void                    Nop                !     
  val+            %157.1 = %152.2
  dr              %157.2 = Typecheck@0x5614f9e5c6d8[Type#2]
  goto BB81
BB154   <- [72]
  val?^ | miss    %154.0 = LdVar              eR    class2, e138.0
  val?            %154.1 = Force!<wrapped>    !v    %154.0, e138.0   <str$+>
  lgl$#-          %154.2 = IsType                   %154.1 isA val?+
  void                    Branch                   %154.2 -> BB164 (if true) | BB165 (if false)
BB155   <- [72]
  fs              %155.0 = FrameState         R     0x5614fd2e6430+1297: [%150.2], env=e138.0
  void                    Deopt              !v    %155.0, DeadBranchReached@0x5614fb132b80[Test#8], %72.1   !
BB17   <- [16, 178]
  lgl$-           %17.0 = Phi                      %178.4:BB178, %16.1:BB16
  lgl$-           %17.1 = %17.0
  lgl$#-          %17.2 = CheckTrueFalse     e     %17.1
  void                    Branch                   %17.2 -> BB21 (if true) | BB20 (if false)
BB127   <- [156]
  void                    Nop                !     
  lgl$-           %127.1 = %156.1
  goto BB84
BB83   <- [156]
  lgl$#-          %83.0 = IsType                   %152.1 isA lgl$-
  void                    Branch                   %83.0 -> BB158 (if true) | BB159 (if false)
BB81   <- [157, 159, 161]
  val?^ | miss    %81.0 = Phi                      %157.1:BB157, %159.1:BB159, %161.1:BB161
  val?^ | miss    %81.1 = %81.0
  dr              %81.2 = Phi                      %157.2:BB157, %159.2:BB159, %161.2:BB161
  dr              %81.3 = %81.2
  fs              %81.4 = FrameState         R     0x5614fd2e6430+644: [], env=e138.0
  prom-           %81.5 = MkArg                    %152.1, extends[0x561505402ea0]_p24 (!refl), e138.0
  val?~           %81.6 = CastType                 up %81.5
  env             e81.7 = (MkEnv)            l     x=%81.6, parent=R_BaseNamespace, context 0
  fs              %81.8 = FrameState         R     0x5614f8cf86d0+91: [%152.2], env=e81.7, next=%81.4
  void                    Deopt              !v    %81.8, %81.3, %81.1   !
BB164   <- [154]
  val?+           %164.0 = CastType           d     dn %154.1   <str$+>
  (int|real)$-    %164.1 = CallSafeBuiltin    wed   length(%164.0)    <int$->
  lgl$#-          %164.2 = IsType                   %164.1 isA int$-
  void                    Branch                   %164.2 -> BB178 (if true) | BB179 (if false)
BB165   <- [154]
  fs              %165.0 = FrameState         R     0x5614fd2e6430+1378: [%150.2, <blt length>, %154.1], env=e138.0
  void                    Deopt              !v    %165.0, Typecheck@0x5614fb132b80[Type#50], %154.1   !
BB21   <- [17]
  val?^ | miss    %21.0 = LdVar              eR    .identC, e138.0
  lgl$#-          %21.1 = Identical                %21.0, function(c1=NULL, c2=NULL) <(rir::DispatchTabl|...
  void                    Branch                   %21.1 -> BB162 (if true) | BB163 (if false)
BB20   <- [17]
  (cls|spec|blt)  %20.0 = LdFun              !v    is, e138.0
  fs              %20.1 = FrameState         R     0x5614fd2e6430+1430: [%20.0], env=e138.0
  void                    Deopt              !v    %20.1, DeadCall@0x5614fb132b80[Call#15], %20.0   !
BB84   <- [127, 158]
  lgl$-           %84.0 = Phi                      %158.1:BB158, %127.1:BB127
  lgl$-           %84.1 = %84.0
  lgl$-           %84.2 = AsLogical                %84.1
  lgl$#-          %84.3 = Identical                %84.2, false
  void                    Branch                   %84.3 -> BB126 (if true) | BB85 (if false)
BB158   <- [83]
  lgl$-           %158.0 = AsLogical                %156.1
  lgl$-           %158.1 = %158.0
  goto BB84
BB159   <- [83]
  void                    Nop                !     
  val?            %159.1 = %152.1
  dr              %159.2 = Typecheck@0x5614f9e5c6d8[Type#4]
  goto BB81
BB178   <- [164]
  int$-           %178.0 = CastType           d     dn %164.1
  lgl$-           %178.1 = Eq                 d     %178.0, 1L, elided   <lgl$->
  lgl$-           %178.2 = AsLogical                %178.1
  lgl$-           %178.3 = LAnd                     %150.2, %178.2
  lgl$-           %178.4 = %178.3
  goto BB17
BB179   <- [164]
  fs              %179.0 = FrameState         R     0x5614fd2e6430+1400: [%150.2, %164.1], env=e138.0
  void                    Deopt              !v    %179.0, Typecheck@0x5614fb132b80[Type#51], %164.1   !
BB162   <- [21]
  prom-           %162.0 = MkArg                    unboundValue, extends[0x561505402ea0]_p5, e138.0
  prom-           %162.1 = MkArg                    unboundValue, extends[0x561505402ea0]_p6, e138.0
  val?            %162.2 = StaticCall         !v    .identC[0x5615054b02f0](%162.0, %162.1) e138.0   <lgl$->
  lgl$#-          %162.3 = IsType                   %162.2 isA lgl$-
  void                    Branch                   %162.3 -> BB174 (if true) | BB175 (if false)
BB163   <- [21]
  fs              %163.0 = FrameState         R     0x5614fd2e6430+1419: [%17.1], env=e138.0
  void                    Deopt              !v    %163.0, CallTarget@0x5614fb132b80[Call#18], %21.0   !
BB126   <- [84]
  void                    Nop                !     
  lgl$-           %126.1 = %84.2
  goto BB86
BB85   <- [84]
  lgl$#-          %85.0 = IsType                   %152.1 isA lgl$-
  void                    Branch                   %85.0 -> BB160 (if true) | BB161 (if false)
BB174   <- [162]
  lgl$-           %174.0 = CastType           d     dn %162.2
  lgl$-           %174.1 = AsLogical                %174.0
  lgl$#-          %174.2 = Identical                %174.1, true
  void                    Branch                   %174.2 -> BB71 (if true) | BB24 (if false)
BB175   <- [162]
  void                    Nop                !     
  val?            %175.1 = %162.2
  dr              %175.2 = Typecheck@0x5614fb132b80[Type#62]
  goto BB22
BB86   <- [126, 160]
  lgl$-           %86.0 = Phi                      %160.5:BB160, %126.1:BB126
  lgl$-           %86.1 = %86.0
  lgl$-           %86.2 = AsLogical                %86.1
  lgl$#-          %86.3 = Identical                %86.2, false
  void                    Branch                   %86.3 -> BB125 (if true) | BB87 (if false)
BB160   <- [85]
  lgl$-           %160.0 = CastType           d     dn %152.1
  lgl$-           %160.1 = CallSafeBuiltin    wed   is.na(%160.0)    <lgl$->
  lgl$-           %160.2 = Not                d     %160.1, elided
  lgl$-           %160.3 = AsLogical                %160.2
  lgl$-           %160.4 = LAnd                     %84.2, %160.3
  lgl$-           %160.5 = %160.4
  goto BB86
BB161   <- [85]
  void                    Nop                !     
  val?            %161.1 = %152.1
  dr              %161.2 = Typecheck@0x5614f9e5c6d8[Type#8]
  goto BB81
BB71   <- [174]
  void                    Nop                !     
  lgl$-           %71.1 = %174.1
  goto BB27
BB24   <- [174]
  val?^ | miss    %24.0 = LdVar              eR    .identC, e138.0
  lgl$#-          %24.1 = Identical                %24.0, function(c1=NULL, c2=NULL) <(rir::DispatchTabl|...
  void                    Branch                   %24.1 -> BB176 (if true) | BB177 (if false)
BB22   <- [175, 177]
  val?^ | miss    %22.0 = Phi                      %175.1:BB175, %177.1:BB177
  val?^ | miss    %22.1 = %22.0
  dr              %22.2 = Phi                      %175.2:BB175, %177.2:BB177
  dr              %22.3 = %22.2
  fs              %22.4 = FrameState         R     0x5614fd2e6430+1627: [%162.2], env=e138.0
  void                    Deopt              !v    %22.4, %22.3, %22.1   !
BB125   <- [86]
  void                    Nop                !     
  lgl$-           %125.1 = %86.2
  goto BB88
BB87   <- [86]
  lgl$-           %87.0 = AsLogical          e     %152.1
  lgl$-           %87.1 = LAnd                     %86.2, %87.0
  lgl$-           %87.2 = %87.1
  goto BB88
BB27   <- [71, 184]
  lgl$-           %27.0 = Phi                      %184.3:BB184, %71.1:BB71
  lgl$-           %27.1 = %27.0
  lgl$#-          %27.2 = CheckTrueFalse     e     %27.1
  void                    Branch                   %27.2 -> BB70 (if true) | BB28 (if false)
BB176   <- [24]
  prom-           %176.0 = MkArg                    unboundValue, extends[0x561505402ea0]_p7, e138.0
  val?            %176.1 = StaticCall         !v    .identC[0x5614fe4819c0](%176.0, "ANY") e138.0   <lgl$->
  lgl$#-          %176.2 = IsType                   %176.1 isA lgl$-
  void                    Branch                   %176.2 -> BB184 (if true) | BB185 (if false)
BB177   <- [24]
  void                    Nop                !     
  val?^ | miss    %177.1 = %24.0
  dr              %177.2 = CallTarget@0x5614fb132b80[Call#19]
  goto BB22
BB88   <- [125, 87]
  lgl$-           %88.0 = Phi                      %87.2:BB87, %125.1:BB125
  lgl$-           %88.1 = %88.0
  lgl$-           %88.2 = Not                d     %88.1, elided
  lgl$-           %88.3 = AsLogical                %88.2
  lgl$#-          %88.4 = Identical                %88.3, false
  void                    Branch                   %88.4 -> BB124 (if true) | BB91 (if false)
BB70   <- [27]
  void                    Visible            v     
  lgl$#-          %70.1 = true
  goto BB57
BB28   <- [27]
  val?^ | miss    %28.0 = LdVar              eR    classDef1, e138.0
  val?            %28.1 = Force!<value>      !v    %28.0, e138.0   <other>
  lgl$-           %28.2 = Is                       %28.1, NULL
  lgl$-           %28.3 = Not                d     %28.2, elided
  lgl$-           %28.4 = AsLogical                %28.3
  lgl$#-          %28.5 = Identical                %28.4, false
  void                    Branch                   %28.5 -> BB69 (if true) | BB31 (if false)
BB184   <- [176]
  lgl$-           %184.0 = CastType           d     dn %176.1
  lgl$-           %184.1 = AsLogical                %184.0
  lgl$-           %184.2 = LOr                      %174.1, %184.1
  lgl$-           %184.3 = %184.2
  goto BB27
BB185   <- [176]
  fs              %185.0 = FrameState         R     0x5614fd2e6430+1676: [%174.1, %176.1], env=e138.0
  void                    Deopt              !v    %185.0, Typecheck@0x5614fb132b80[Type#64], %176.1   !
BB124   <- [88]
  void                    Nop                !     
  lgl$-           %124.1 = %88.3
  goto BB94
BB91   <- [88]
  val?^ | miss    %91.0 = LdVar              eR    length, e138.0
  lgl$#-          %91.1 = Identical                <blt length>, %91.0   <true>
  void                    Branch                   %91.1 -> BB166 (if true) | BB167 (if false)
BB69   <- [28]
  void                    Nop                !     
  lgl$-           %69.1 = %28.4
  goto BB34
BB31   <- [28]
  val?^ | miss    %31.0 = LdVar              eR    %in%, e138.0
  lgl$#-          %31.1 = Identical                %31.0, function(x, table) <(rir::DispatchTable*)0x561|...
  void                    Branch                   %31.1 -> BB186 (if true) | BB187 (if false)
BB94   <- [124, 180]
  lgl$-           %94.0 = Phi                      %180.4:BB180, %124.1:BB124
  lgl$-           %94.1 = %94.0
  lgl$#-          %94.2 = CheckTrueFalse     e     %94.1
  void                    Branch                   %94.2 -> BB109 (if true) | BB97 (if false)
BB166   <- [91]
  val?^ | miss    %166.0 = LdVar              eR    ext, e138.0
  lgl$#-          %166.1 = IsType                   %166.0 isA val?~+ | miss
  void                    Branch                   %166.1 -> BB168 (if true) | BB169 (if false)
BB167   <- [91]
  void                    Nop                !     
  lgl$#-          %167.1 = %91.1
  dr              %167.2 = DeadBranchReached@0x5614fb132b80[Test#3]
  goto BB89
BB34   <- [69, 192]
  lgl$-           %34.0 = Phi                      %192.3:BB192, %69.1:BB69
  lgl$-           %34.1 = %34.0
  lgl$#-          %34.2 = CheckTrueFalse     e     %34.1
  void                    Branch                   %34.2 -> BB64 (if true) | BB37 (if false)
BB186   <- [31]
  prom-           %186.0 = MkArg                    unboundValue, extends[0x561505402ea0]_p9, e138.0
  val?^ | miss    %186.1 = LdVar              eR    class2, e138.0
  val?            %186.2 = Force!<wrapped>    !v    %186.1, e138.0   <str$+>
  prom-           %186.3 = MkArg                    %186.2, extends[0x561505402ea0]_p8 (!refl), 
  val?            %186.4 = StaticCall         !v    %in%[0x5614fdffed90](%186.3, %186.0) e138.0   <lgl$->
  lgl$#-          %186.5 = IsType                   %186.4 isA lgl$-
  void                    Branch                   %186.5 -> BB192 (if true) | BB193 (if false)
BB187   <- [31]
  fs              %187.0 = FrameState         R     0x5614fd2e6430+1710: [%28.1], env=e138.0
  void                    Deopt              !v    %187.0, CallTarget@0x5614fb132b80[Call#20], %31.0   !
BB109   <- [94]
  val?^ | miss    %109.0 = LdVar              eR    vapply, e138.0
  lgl$#-          %109.1 = Identical                %109.0, function(X, FUN, FUN.VALUE, ..., USE.NAMES=TRU|...
  void                    Branch                   %109.1 -> BB170 (if true) | BB171 (if false)
BB97   <- [94]
  void                    Nop                !     
  goto BB98
BB168   <- [166]
  val?~+ | miss   %168.0 = CastType           d     dn %166.0
  val?+           %168.1 = Force!<value>            %168.0,    <vec+>
  (int|real)$-    %168.2 = CallSafeBuiltin    wed   length(%168.1)    <int$->
  lgl$#-          %168.3 = IsType                   %168.2 isA int$-
  void                    Branch                   %168.3 -> BB180 (if true) | BB181 (if false)
BB169   <- [166]
  void                    Nop                !     
  val?^ | miss    %169.1 = %166.0
  dr              %169.2 = Typecheck@0x5614fb132b80[Type#25]
  goto BB89
BB89   <- [167, 169]
  val?^ | miss    %89.0 = Phi                      %167.1:BB167, %169.1:BB169
  val?^ | miss    %89.1 = %89.0
  dr              %89.2 = Phi                      %167.2:BB167, %169.2:BB169
  dr              %89.3 = %89.2
  fs              %89.4 = FrameState         R     0x5614fd2e6430+644: [], env=e138.0
  prom-           %89.5 = MkArg                    %152.1, extends[0x561505402ea0]_p24 (!refl), e138.0
  val?~           %89.6 = CastType                 up %89.5
  env             e89.7 = (MkEnv)            l     x=%89.6, parent=R_BaseNamespace, context 0
  fs              %89.8 = FrameState         R     0x5614f8cf86d0+342: [%88.1], env=e89.7, next=%89.4
  void                    Deopt              !v    %89.8, %89.3, %89.1   !
BB64   <- [34]
  (cls|spec|blt)  %64.0 = LdFun              !v    @, <0x5614f88a6bd8>, e138.0
  prom-           %64.1 = MkArg                    unboundValue, extends[0x561505402ea0]_p20, e138.0
  prom-           %64.2 = MkArg                    unboundValue, extends[0x561505402ea0]_p21, e138.0
  val?            %64.3 = Call               !v    %64.0(%64.1, %64.2) e138.0   <vec+>
  lgl$#-          %64.4 = IsType                   %64.3 isA val+   <true>
  void                    Branch                   %64.4 -> BB210 (if true) | BB211 (if false)
BB37   <- [34]
  val?^ | miss    %37.0 = LdVar              eR    getClassDef, e138.0
  lgl$#-          %37.1 = Identical                %37.0, function(Class, where=topenv(parent.frame()), |...
  void                    Branch                   %37.1 -> BB194 (if true) | BB195 (if false)
BB192   <- [186]
  lgl$-           %192.0 = CastType           d     dn %186.4
  lgl$-           %192.1 = AsLogical                %192.0
  lgl$-           %192.2 = LAnd                     %28.4, %192.1
  lgl$-           %192.3 = %192.2
  goto BB34
BB193   <- [186]
  fs              %193.0 = FrameState         R     0x5614fd2e6430+1765: [%28.4, %186.4], env=e138.0
  void                    Deopt              !v    %193.0, Typecheck@0x5614fb132b80[Type#71], %186.4   !
BB170   <- [109]
  prom-           %170.0 = MkArg                    unboundValue, extends[0x561505402ea0]_p25, e138.0
  cls             %170.1 = MkCls                    extends@Prom(26)0, e138.0
  prom-           %170.2 = MkArg                    %170.1, extends[0x561505402ea0]_p26 (!refl), e138.0
  ct              %170.3 = PushContext        lCL   %170.0, %170.2, na-lgl, vapply(ext, function(<lst obj=R_MissingArg>, i|..., function(X, FUN, FUN.VALUE, ..., USE.NAMES=TRU|..., e138.0
  cls~            %170.4 = CastType                 up %170.2
  val?^           %170.5 = CastType                 up %170.0
  env             e170.6 = MkEnv              l     X=%170.5, FUN=%170.4, FUN.VALUE=na-lgl, ...(miss)=missingArg, USE.NAMES(miss)=true, parent=R_BaseNamespace, context 1
  prom-           %170.7 = MkArg                    unboundValue, extends[0x561505402ea0]_p29 (!refl), e170.6
  val?            %170.8 = StaticCall         !v    match.fun[0x5614fd8c8e20](%170.7) e170.6   <val?->
  void                    StVar              lW    FUN, %170.8, e170.6
  val?^ | miss    %170.10 = LdVar              eR    is.vector, e170.6
  lgl$#-          %170.11 = Identical                %170.10, function(x, mode="any") <(rir::DispatchTable*)|...
  void                    Branch                   %170.11 -> BB172 (if true) | BB173 (if false)
BB171   <- [109]
  fs              %171.0 = FrameState         R     0x5614fd2e6430+767: [%94.1], env=e138.0
  void                    Deopt              !v    %171.0, CallTarget@0x5614fb132b80[Call#9], %109.0   !
BB98   <- [97, 212]
  val?^ | miss    %98.0 = LdVar              eR    fullInfo, e138.0
  val?            %98.1 = Force!<lazy>       !v    %98.0, e138.0   <lgl$->
  lgl$#-          %98.2 = CheckTrueFalse     we    %98.1
  void                    Branch                   %98.2 -> BB106 (if true) | BB101 (if false)
BB180   <- [168]
  int$-           %180.0 = CastType           d     dn %168.2
  lgl$-           %180.1 = Gt                 d     %180.0, 0, elided   <lgl$->
  lgl$-           %180.2 = AsLogical                %180.1
  lgl$-           %180.3 = LAnd                     %88.3, %180.2
  lgl$-           %180.4 = %180.3
  goto BB94
BB181   <- [168]
  fs              %181.0 = FrameState         R     0x5614fd2e6430+748: [%88.3, %168.2], env=e138.0
  void                    Deopt              !v    %181.0, Typecheck@0x5614fb132b80[Type#26], %168.2   !
BB210   <- [64]
  val?^ | miss    %210.0 = LdVar              eR    class2, e138.0
  val?            %210.1 = Force!<wrapped>    !v    %210.0, e138.0   <str$+>
  lgl$#-          %210.2 = IsType                   %210.1 isA val?+
  lgl$#-          %210.3 = IsType                   %64.3 isA val?+
  void                    Branch                   %210.3 -> BB214 (if true) | BB215 (if false)
BB211   <- [64]
  fs              %211.0 = FrameState         R     0x5614fd2e6430+1866: [%64.3], env=e138.0
  void                    Deopt              !v    %211.0, DeadBranchReached@0x5614fb132b80[Test#10], %64.4   !
BB194   <- [37]
  prom-           %194.0 = MkArg                    unboundValue, extends[0x561505402ea0]_p13, e138.0
  val?            %194.1 = StaticCall         !v    getClassDef[0x561504f9b1c0](%194.0) e138.0   <other>
  void                    StVar              lW    classDef2, %194.1, e138.0
  goto BB38
BB195   <- [37]
  fs              %195.0 = FrameState         R     0x5614fd2e6430+1772: [%34.1], env=e138.0
  void                    Deopt              !v    %195.0, CallTarget@0x5614fb132b80[Call#23], %37.0   !
BB172   <- [170]
  val?^ | miss    %172.0 = LdVar              eR    X, e170.6
  val?            %172.1 = Force!<lazy>       !v    %172.0, e170.6   <val?>
  lgl$#-          %172.2 = CallSafeBuiltin    wed   is.vector(%172.1, "any")    <lgl$->
  lgl$#-          %172.3 = Not                d     %172.2, elided
  void                    Branch                   %172.2 -> BB123 (if true) | BB114 (if false)
BB173   <- [170]
  fs              %173.0 = FrameState         R     0x5614fd2e6430+820: [], env=e138.0
  fs              %173.1 = FrameState         R     0x5614fa849000+46: [], env=e170.6, next=%173.0
  void                    Deopt              !v    %173.1, CallTarget@0x5614fa864020[Call#1], %170.10   !
BB106   <- [98]
  val?^ | miss    %106.0 = LdVar              eR    ext !upd, e138.0
  val?            %106.1 = Force!             !v    %106.0, e138.0   <val?_>
  val?^ | miss    %106.2 = LdVar              eR    class1, e138.0
  val?            %106.3 = Force!             !v    %106.2, e138.0   <val?_>
  lgl$#-          %106.4 = IsType                   %106.3 isA val?+
  lgl$#-          %106.5 = IsType                   %106.1 isA val?+
  void                    Branch                   %106.5 -> BB196 (if true) | BB197 (if false)
BB101   <- [98]
  val?^ | miss    %101.0 = LdVar              eR    c, e138.0
  lgl$#-          %101.1 = Identical                <blt c>, %101.0   <true>
  void                    Branch                   %101.1 -> BB188 (if true) | BB189 (if false)
BB214   <- [210]
  val?+           %214.0 = CastType           d     dn %64.3   <vec+>
  void                    Branch                   %210.2 -> BB216 (if true) | BB217 (if false)
BB215   <- [210]
  void                    Nop                !     
  val?            %215.1 = %64.3
  dr              %215.2 = Typecheck@0x5614fb132b80[Type#76]
  goto BB67
BB38   <- [194, 216]
  val?^ | miss    %38.0 = LdVar              eR    value, e138.0
  val?            %38.1 = Force!<value>      !v    %38.0, e138.0   <(nil|other)>
  lgl$-           %38.2 = Is                       %38.1, NULL
  lgl$#-          %38.3 = CheckTrueFalse     e     %38.2
  void                    Branch                   %38.3 -> BB61 (if true) | BB41 (if false)
BB123   <- [172]
  val?^ | miss    %123.0 = LdVar              eR    is.object, e170.6
  lgl$#-          %123.1 = Identical                <blt is.object>, %123.0   <true>
  void                    Branch                   %123.1 -> BB182 (if true) | BB183 (if false)
BB114   <- [172]
  void                    Nop                !     
  lgl$#-          %114.1 = %172.3
  goto BB115
BB196   <- [106]
  val?+           %196.0 = CastType           d     dn %106.1   <val?_>
  void                    Branch                   %106.4 -> BB204 (if true) | BB205 (if false)
BB197   <- [106]
  void                    Nop                !     
  val?            %197.1 = %106.1
  dr              %197.2 = Typecheck@0x5614fb132b80[Type#43]
  goto BB107
BB188   <- [101]
  val?^ | miss    %188.0 = LdVar              eR    class1, e138.0
  val?            %188.1 = Force!<wrapped>    !v    %188.0, e138.0   <str$+>
  val?^ | miss    %188.2 = LdVar              eR    names, e138.0
  lgl$#-          %188.3 = Identical                <blt names>, %188.2   <true>
  void                    Branch                   %188.3 -> BB198 (if true) | BB199 (if false)
BB189   <- [101]
  fs              %189.0 = FrameState         R     0x5614fd2e6430+924: [%98.2], env=e138.0
  void                    Deopt              !v    %189.0, DeadBranchReached@0x5614fb132b80[Test#5], %101.1   !
BB216   <- [214]
  val?+           %216.0 = CastType           d     dn %210.1   <str$+>
  val?            %216.1 = Extract2_1D        wed   %214.0, %216.0, elided   <other>
  void                    StVar              lW    value, %216.1, e138.0
  goto BB38
BB217   <- [214]
  void                    Nop                !     
  val?            %217.1 = %210.1
  dr              %217.2 = Typecheck@0x5614fb132b80[Type#78]
  goto BB67
BB67   <- [215, 217]
  val?^ | miss    %67.0 = Phi                      %215.1:BB215, %217.1:BB217
  val?^ | miss    %67.1 = %67.0
  dr              %67.2 = Phi                      %215.2:BB215, %217.2:BB217
  dr              %67.3 = %67.2
  fs              %67.4 = FrameState         R     0x5614fd2e6430+1911: [%64.3, %210.1], env=e138.0
  void                    Deopt              !v    %67.4, %67.3, %67.1   !
BB61   <- [38]
  val?^ | miss    %61.0 = LdVar              eR    possibleExtends, e138.0
  lgl$#-          %61.1 = Identical                %61.0, function(class1, class2, ClassDef1=getClassDef|...
  void                    Branch                   %61.1 -> BB218 (if true) | BB219 (if false)
BB41   <- [38]
  void                    Nop                !     
  goto BB42
BB182   <- [123]
  val?^ | miss    %182.0 = LdVar              eR    X, e170.6
  val?            %182.1 = Force!<wrapped>    !v    %182.0, e170.6   <val?+>
  lgl$#-          %182.2 = CallSafeBuiltin    wed   is.object(%182.1)    <lgl$->
  lgl$-           %182.3 = LOr                      %172.3, %182.2
  lgl$-           %182.4 = %182.3
  goto BB115
BB183   <- [123]
  fs              %183.0 = FrameState         R     0x5614fd2e6430+820: [], env=e138.0
  fs              %183.1 = FrameState         R     0x5614fa849000+78: [], env=e170.6, next=%183.0
  prom-           %183.2 = MkArg                    %172.1, extends[0x561505402ea0]_p32 (!refl), e170.6
  val?~           %183.3 = CastType                 up %183.2
  env             e183.4 = (MkEnv)            l     mode(miss)="any", x=%183.3, parent=R_BaseNamespace, context 0
  fs              %183.5 = FrameState         R     0x5614fa748820+41: [%172.2], env=e183.4, next=%183.1
  void                    Deopt              !v    %183.5, DeadBranchReached@0x5614fa864020[Test#0], %123.1   !
BB115   <- [114, 182]
  lgl$-           %115.0 = Phi                      %182.4:BB182, %114.1:BB114
  lgl$-           %115.1 = %115.0
  lgl$#-          %115.2 = CheckTrueFalse     e     %115.1
  void                    Branch                   %115.2 -> BB122 (if true) | BB118 (if false)
BB204   <- [196]
  val?+           %204.0 = CastType           d     dn %106.3   <val?_>
  val?+           %204.1 = Subassign2_1D      wed   true, %196.0, %204.0, elided   <val?_>
  void                    StVar              lW    ext, %204.1, e138.0
  val+            %204.3 = ChkMissing         e     %204.1
  void                    Visible            v     
  val?+           %204.5 = %204.1
  goto BB57
BB205   <- [196]
  void                    Nop                !     
  val?            %205.1 = %106.3
  dr              %205.2 = Typecheck@0x5614fb132b80[Type#44]
  goto BB107
BB107   <- [197, 205]
  val?^ | miss    %107.0 = Phi                      %197.1:BB197, %205.1:BB205
  val?^ | miss    %107.1 = %107.0
  dr              %107.2 = Phi                      %197.2:BB197, %205.2:BB205
  dr              %107.3 = %107.2
  fs              %107.4 = FrameState         R     0x5614fd2e6430+1161: [true, %106.1, %106.3], env=e138.0
  void                    Deopt              !v    %107.4, %107.3, %107.1   !
BB198   <- [188]
  val?^ | miss    %198.0 = LdVar              eR    ext, e138.0
  lgl$#-          %198.1 = IsType                   %198.0 isA val?~+ | miss
  void                    Branch                   %198.1 -> BB200 (if true) | BB201 (if false)
BB199   <- [188]
  void                    Nop                !     
  lgl$#-          %199.1 = %188.3
  dr              %199.2 = DeadBranchReached@0x5614fb132b80[Test#6]
  goto BB102
BB218   <- [61]
  prom-           %218.0 = MkArg                    unboundValue, extends[0x561505402ea0]_p16, e138.0
  prom-           %218.1 = MkArg                    unboundValue, extends[0x561505402ea0]_p17, e138.0
  prom-           %218.2 = MkArg                    unboundValue, extends[0x561505402ea0]_p18, e138.0
  prom-           %218.3 = MkArg                    unboundValue, extends[0x561505402ea0]_p19, e138.0
  val?            %218.4 = StaticCall         !v    possibleExtends[0x5614fb36d210](%218.0, %218.1, %218.2, %218.3) e138.0   <lgl$->
  lgl$#-          %218.5 = IsType                   %218.4 isA lgl$-
  void                    Branch                   %218.5 -> BB220 (if true) | BB221 (if false)
BB219   <- [61]
  fs              %219.0 = FrameState         R     0x5614fd2e6430+1941: [%38.1], env=e138.0
  void                    Deopt              !v    %219.0, CallTarget@0x5614fb132b80[Call#25], %61.0   !
BB42   <- [41, 220]
  val?^ | miss    %42.0 = LdVar              eR    fullInfo, e138.0
  val?            %42.1 = Force!<lazy>       !v    %42.0, e138.0   <lgl$->
  lgl$#-          %42.2 = CheckTrueFalse     we    %42.1
  void                    Branch                   %42.2 -> BB60 (if true) | BB45 (if false)
BB122   <- [115]
  val?^ | miss    %122.0 = LdVar              eR    as.list, e170.6
  lgl$#-          %122.1 = Identical                %122.0, function(x, ...) <(rir::DispatchTable*)0x5614f|...
  void                    Branch                   %122.1 -> BB190 (if true) | BB191 (if false)
BB118   <- [115]
  void                    Nop                !     
  goto BB119
BB200   <- [198]
  val?~+ | miss   %200.0 = CastType           d     dn %198.0
  val?+           %200.1 = Force!<value>            %200.0,    <vec+>
  val+            %200.2 = CallSafeBuiltin    wed   names(%200.1)    <str->
  lgl$#-          %200.3 = IsType                   %188.1 isA val?+
  void                    Branch                   %200.3 -> BB206 (if true) | BB207 (if false)
BB201   <- [198]
  void                    Nop                !     
  val?^ | miss    %201.1 = %198.0
  dr              %201.2 = Typecheck@0x5614fb132b80[Type#40]
  goto BB102
BB102   <- [199, 201]
  val?^ | miss    %102.0 = Phi                      %199.1:BB199, %201.1:BB201
  val?^ | miss    %102.1 = %102.0
  dr              %102.2 = Phi                      %199.2:BB199, %201.2:BB201
  dr              %102.3 = %102.2
  fs              %102.4 = FrameState         R     0x5614fd2e6430+1003: [<blt c>, %188.1], env=e138.0
  void                    Deopt              !v    %102.4, %102.3, %102.1   !
BB220   <- [218]
  lgl$-           %220.0 = CastType           d     dn %218.4
  void                    StVar              lW    value, %220.0, e138.0
  goto BB42
BB221   <- [218]
  fs              %221.0 = FrameState         R     0x5614fd2e6430+2009: [%218.4], env=e138.0
  void                    Deopt              !v    %221.0, Typecheck@0x5614fb132b80[Type#85], %218.4   !
BB60   <- [42]
  val?^ | miss    %60.0 = LdVar              eR    value, e138.0
  void                    Visible            v     
  val?            %60.2 = Force!<value>      !     %60.0, e138.0   <other>
  val?            %60.3 = %60.2
  goto BB56
BB45   <- [42]
  val?^ | miss    %45.0 = LdVar              eR    is.logical, e138.0
  lgl$#-          %45.1 = Identical                <blt is.logical>, %45.0   <true>
  void                    Branch                   %45.1 -> BB222 (if true) | BB223 (if false)
BB190   <- [122]
  val?^ | miss    %190.0 = LdVar              eR    X, e170.6
  val?            %190.1 = Force!<wrapped>    !v    %190.0, e170.6   <vec>
  val?            %190.2 = StaticCall         !v    as.list[0x5614fd87ec00](%190.1) { 0 } e170.6   <vec>
  void                    StVar              lW    X, %190.2, e170.6
  goto BB119
BB191   <- [122]
  fs              %191.0 = FrameState         R     0x5614fd2e6430+820: [], env=e138.0
  fs              %191.1 = FrameState         R     0x5614fa849000+189: [%115.1], env=e170.6, next=%191.0
  void                    Deopt              !v    %191.1, CallTarget@0x5614fa864020[Call#3], %122.0   !
BB119   <- [118, 190]
  (cls|spec|blt)  %119.0 = LdFun              !v    .Internal, <0x5614f88a6698>, e170.6
  prom-           %119.1 = MkArg                    unboundValue, extends[0x561505402ea0]_p33, e170.6
  val?            %119.2 = Call               !v    %119.0(%119.1) e170.6   <val?+>
  val?            %119.3 = PopContext         C     %119.2, %170.3   <lgl+>
  void                    StVar              lW    noTest, %119.3, e138.0
  val?^ | miss    %119.5 = LdVar              eR    ext, e138.0
  lgl$#-          %119.6 = IsType                   %119.5 isA val?~+ | miss
  void                    Branch                   %119.6 -> BB202 (if true) | BB203 (if false)
BB206   <- [200]
  val?+           %206.0 = CastType           d     dn %188.1   <str$+>
  val+            %206.1 = CallSafeBuiltin    vwed  c(%206.0, %200.2)    <str->
  val+            %206.2 = %206.1
  goto BB57
BB207   <- [200]
  fs              %207.0 = FrameState         R     0x5614fd2e6430+1099: [<blt c>, %188.1, %200.2], env=e138.0
  void                    Deopt              !v    %207.0, Typecheck@0x5614fb132b80[Type#38], %188.1   !
BB56   <- [60, 55]
  val?            %56.0 = Phi                      %55.2:BB55, %60.3:BB60
  val?            %56.1 = %56.0
  val?            %56.2 = %56.1
  goto BB57
BB222   <- [45]
  val?^ | miss    %222.0 = LdVar              eR    value, e138.0
  val?            %222.1 = Force!<value>      !v    %222.0, e138.0   <(lgl|other)>
  val+            %222.2 = CallSafeBuiltin    wed   is.logical(%222.1)    <lgl$->
  lgl$#-          %222.3 = IsType                   %222.2 isA lgl$-
  void                    Branch                   %222.3 -> BB224 (if true) | BB225 (if false)
BB223   <- [45]
  fs              %223.0 = FrameState         R     0x5614fd2e6430+2038: [%42.2], env=e138.0
  void                    Deopt              !v    %223.0, DeadBranchReached@0x5614fb132b80[Test#11], %45.1   !
BB202   <- [119]
  val?~+ | miss   %202.0 = CastType           d     dn %119.5
  val?+           %202.1 = Force!<value>            %202.0,    <vec+>
  lgl$#-          %202.2 = IsType                   %202.1 isA val+   <true>
  void                    Branch                   %202.2 -> BB208 (if true) | BB209 (if false)
BB203   <- [119]
  void                    Nop                !     
  val?^ | miss    %203.1 = %119.5
  dr              %203.2 = Typecheck@0x5614fb132b80[Type#30]
  goto BB120
BB224   <- [222]
  lgl$-           %224.0 = CastType           d     dn %222.2
  lgl$#-          %224.1 = CheckTrueFalse     e     %224.0
  void                    Branch                   %224.1 -> BB59 (if true) | BB48 (if false)
BB225   <- [222]
  void                    Nop                !     
  val+            %225.1 = %222.2
  dr              %225.2 = Typecheck@0x5614fb132b80[Type#89]
  goto BB46
BB208   <- [202]
  val             %208.0 = ChkMissing         e     %119.3
  lgl$#-          %208.1 = IsType                   %208.0 isA lgl+
  void                    Branch                   %208.1 -> BB212 (if true) | BB213 (if false)
BB209   <- [202]
  void                    Nop                !     
  lgl$#-          %209.1 = %202.2
  dr              %209.2 = DeadBranchReached@0x5614fb132b80[Test#4]
  goto BB120
BB120   <- [203, 209, 213]
  val?^ | miss    %120.0 = Phi                      %203.1:BB203, %209.1:BB209, %213.1:BB213
  val?^ | miss    %120.1 = %120.0
  dr              %120.2 = Phi                      %203.2:BB203, %209.2:BB209, %213.2:BB213
  dr              %120.3 = %120.2
  fs              %120.4 = FrameState         R     0x5614fd2e6430+834: [], env=e138.0
  void                    Deopt              !v    %120.4, %120.3, %120.1   !
BB59   <- [224]
  val?^ | miss    %59.0 = LdVar              eR    value, e138.0
  lgl$#-          %59.1 = IsType                   %59.0 isA lgl$-
  void                    Branch                   %59.1 -> BB226 (if true) | BB227 (if false)
BB48   <- [224]
  (cls|spec|blt)  %48.0 = LdFun              !v    @, <0x5614f88a6bd8>, e138.0
  prom-           %48.1 = MkArg                    unboundValue, extends[0x561505402ea0]_p14, e138.0
  prom-           %48.2 = MkArg                    unboundValue, extends[0x561505402ea0]_p15, e138.0
  val?            %48.3 = Call               !v    %48.0(%48.1, %48.2) e138.0   <lgl$->
  lgl$#-          %48.4 = IsType                   %48.3 isA lgl$-
  void                    Branch                   %48.4 -> BB228 (if true) | BB229 (if false)
BB46   <- [225, 227]
  val?^ | miss    %46.0 = Phi                      %225.1:BB225, %227.1:BB227
  val?^ | miss    %46.1 = %46.0
  dr              %46.2 = Phi                      %225.2:BB225, %227.2:BB227
  dr              %46.3 = %46.2
  fs              %46.4 = FrameState         R     0x5614fd2e6430+2134: [%222.2], env=e138.0
  void                    Deopt              !v    %46.4, %46.3, %46.1   !
BB212   <- [208]
  lgl+            %212.0 = CastType           d     dn %208.0
  val?            %212.1 = Extract1_1D        wed   %202.1, %212.0, elided   <vec+>
  void                    StVar              lW    ext, %212.1, e138.0
  goto BB98
BB213   <- [208]
  void                    Nop                !     
  val             %213.1 = %208.0
  dr              %213.2 = Typecheck@0x5614fb132b80[Type#32]
  goto BB120
BB226   <- [59]
  lgl$-           %226.0 = CastType           d     dn %59.0
  void                    Visible            v     
  lgl$-           %226.2 = %226.0
  goto BB55
BB227   <- [59]
  void                    Nop                !     
  val?^ | miss    %227.1 = %59.0
  dr              %227.2 = Typecheck@0x5614fb132b80[Type#99]
  goto BB46
BB228   <- [48]
  lgl$-           %228.0 = CastType           d     dn %48.3
  lgl$-           %228.1 = AsLogical                %228.0
  lgl$#-          %228.2 = Identical                %228.1, true
  void                    Branch                   %228.2 -> BB52 (if true) | BB51 (if false)
BB229   <- [48]
  fs              %229.0 = FrameState         R     0x5614fd2e6430+2182: [%48.3], env=e138.0
  void                    Deopt              !v    %229.0, Typecheck@0x5614fb132b80[Type#92], %48.3   !
BB55   <- [54, 226]
  val?            %55.0 = Phi                      %54.2:BB54, %226.2:BB226
  val?            %55.1 = %55.0
  val?            %55.2 = %55.1
  goto BB56
BB52   <- [228]
  lgl$#-          %52.0 = CheckTrueFalse     e     %228.1
  void                    Branch                   %52.0 -> BB58 (if true) | BB53 (if false)
BB51   <- [228]
  (cls|spec|blt)  %51.0 = LdFun              !v    isTRUE, e138.0
  fs              %51.1 = FrameState         R     0x5614fd2e6430+2199: [%228.1, %51.0], env=e138.0
  void                    Deopt              !v    %51.1, DeadCall@0x5614fb132b80[Call#28], %51.0   !
BB58   <- [52]
  void                    Visible            v     
  lgl$#-          %58.1 = true
  goto BB54
BB53   <- [52]
  val?^ | miss    %53.0 = LdVar              eR    maybe, e138.0
  void                    Visible            v     
  val?            %53.2 = Force!             !     %53.0, e138.0   <val?_>
  val?            %53.3 = %53.2
  goto BB54
BB54   <- [58, 53]
  val?            %54.0 = Phi                      %53.3:BB53, %58.1:BB58
  val?            %54.1 = %54.0
  val?            %54.2 = %54.1
  goto BB55
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    class1, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <other>
  void                    Return             l     %0.3
Prom 3:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    classDef1, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 4:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    className, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 5:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    class1, e0.0
  val?            %0.2  = Force<wrapped>     !v    %0.1, e0.0   <str$+>
  val?            %0.3  = Extract2_1D        !v    %0.2, 1L, e0.0   <str$->
  void                    Visible            v     
  void                    Return             l     %0.3
Prom 6:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    class2, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$+>
  void                    Return             l     %0.3
Prom 7:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    class2, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$+>
  void                    Return             l     %0.3
Prom 8:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    class2, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$+>
  void                    Return             l     %0.3
Prom 9:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     names, <0x5614f88a7470>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, extends[0x561505402ea0]_p10, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <str->
  void                    Return             l     %0.3
Prom 10:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, <0x5614f88a6bd8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, extends[0x561505402ea0]_p11, e0.0
  prom-           %0.3  = MkArg                    unboundValue, extends[0x561505402ea0]_p12, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <vec+>
  void                    Return             l     %0.4
Prom 11:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    classDef1, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 12:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    contains, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 13:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    class2, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$+>
  void                    Return             l     %0.3
Prom 14:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    value, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 15:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    simple, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 16:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    class1, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$+>
  void                    Return             l     %0.3
Prom 17:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    class2, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$+>
  void                    Return             l     %0.3
Prom 18:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    classDef1, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <other>
  void                    Return             l     %0.3
Prom 19:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    classDef2, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <other>
  void                    Return             l     %0.3
Prom 20:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    classDef1, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 21:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    contains, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 22:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    classDef1, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 23:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    contains, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 24:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    maybe, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <lgl$->
  void                    Return             l     %0.3
Prom 25:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    ext, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 26:
BB0
  env             e0.0  = LdFunctionEnv            
  cls             %0.1  = MkCls                    extends@Prom(26)0, e0.0
  void                    Return             l     %0.1
Prom 27:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    class1, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$+>
  void                    Return             l     %0.3
Prom 29:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    FUN, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <val?->
  void                    Return             l     %0.3
Prom 32:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    X, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <val?>
  void                    Return             l     %0.3
Prom 33:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     vapply, e0.0
  prom-           %0.2  = MkArg                    unboundValue, extends[0x561505402ea0]_p34, e0.0
  prom-           %0.3  = MkArg                    unboundValue, extends[0x561505402ea0]_p35, e0.0
  prom-           %0.4  = MkArg                    unboundValue, extends[0x561505402ea0]_p36, e0.0
  prom-           %0.5  = MkArg                    unboundValue, extends[0x561505402ea0]_p37, e0.0
  val?            %0.6  = Call               !     %0.1(%0.2, %0.3, %0.4, %0.5) e0.0   <val?_>
  void                    Return             l     %0.6
Prom 34:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    X, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 35:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    FUN, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 36:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    FUN.VALUE, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 37:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    USE.NAMES, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3

│ extends[0x561505402ea0]                                                      │
└──────────────────────────────────────────────────────────────────────────────┘
