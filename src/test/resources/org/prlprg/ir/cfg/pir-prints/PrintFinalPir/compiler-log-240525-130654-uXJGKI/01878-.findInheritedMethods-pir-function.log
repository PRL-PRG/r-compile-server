
┌──────────────────────────────────────────────────────────────────────────────┐
│ .findInheritedMethods[0x5614fbe03240]                                        │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch miss: 7                              │
│ Properties:                                                                  │
├────── Final PIR Version
.findInheritedMethods[0x5614fbe03240]
BB0
  val?^           %0.0  = LdArg                    2
  val?^           %0.1  = LdArg                    1
  val?^           %0.2  = LdArg                    0
  env             e0.3  = MkEnv              l     classes=%0.2, fdef=%0.1, mtable=%0.0, table(miss)=missingArg, excluded(miss)=missingArg, useInherited(miss)=missingArg, simpleOnly(miss)=missingArg, verbose(miss)=missingArg, doCache(miss)=missingArg, where(miss)=missingArg, parent=<env 0x5614f8eae378>, context 1
  prom-           %0.4  = MkArg                    unboundValue, .findInheritedMethods[0x5614fbe03240]_p0, e0.3
  val?^ | miss    %0.5  = CastType                 up %0.4
  void                    StArg              lW    table, %0.5, e0.3
  void                    StArg              lW    excluded, nil, e0.3
  prom-           %0.8  = MkArg                    unboundValue, .findInheritedMethods[0x5614fbe03240]_p4, e0.3
  val?^ | miss    %0.9  = CastType                 up %0.8
  void                    StArg              lW    simpleOnly, %0.9, e0.3
  void                    StArg              lW    verbose, false, e0.3
  prom-           %0.12 = MkArg                    unboundValue, .findInheritedMethods[0x5614fbe03240]_p7, e0.3
  val?^ | miss    %0.13 = CastType                 up %0.12
  void                    StArg              lW    doCache, %0.13, e0.3
  prom-           %0.15 = MkArg                    unboundValue, .findInheritedMethods[0x5614fbe03240]_p9, e0.3
  val?^ | miss    %0.16 = CastType                 up %0.15
  void                    StArg              lW    where, %0.16, e0.3
  cls             %0.18 = MkCls                    .findInheritedMethods>plist@677, e0.3
  val?^ | miss    %0.19 = LdVar              eR    .allowPrimitiveMethods, <env 0x5614f8eae378>
  lgl$#-          %0.20 = Identical                %0.19, function(onOff) <(rir::DispatchTable*)0x5614fb|...
  void                    Branch                   %0.20 -> BB221 (if true) | BB222 (if false)
BB221   <- [0]
  ct              %221.0 = PushContext        lCL   false, .allowPrimitiveMethods(FALSE), function(onOff) <(rir::DispatchTable*)0x5614fb|..., e0.3
  val?^ | miss    %221.1 = LdVar              eR    .Call, <env 0x5614f8eae378>
  lgl$#-          %221.2 = Identical                <blt .Call>, %221.1   <true>
  void                    Branch                   %221.2 -> BB223 (if true) | BB224 (if false)
BB222   <- [0]
  fs              %222.0 = FrameState         R     0x5615010b0240+0: [], env=e0.3
  void                    Deopt              !v    %222.0, CallTarget@0x5615010a8200[Call#5], %0.19
BB223   <- [221]
  val?^ | miss    %223.0 = LdVar              eR    C_R_M_setPrimitiveMethods, <env 0x5614f8eae378>
  env             e223.1 = MkEnv              l     onOff=false, code="CLEAR", parent=<env 0x5614f8eae378>, context 1
  val?            %223.2 = Force!<value>      !v    %223.0, e223.1   <vec>
  val?^ | miss    %223.3 = LdVar              eR    code, e223.1
  val?            %223.4 = Force!<value>      !v    %223.3, e223.1   <str$->
  val?            %223.5 = CallBuiltin        !v    .Call(%223.2, "", nil, %223.4, nil, nil) e223.1   <lgl$->
  lgl$#-          %223.6 = IsType                   %223.5 isA lgl$-
  void                    Branch                   %223.6 -> BB225 (if true) | BB226 (if false)
BB224   <- [221]
  fs              %224.0 = FrameState         R     0x5615010b0240+32: [], env=e0.3
  env             e224.1 = (MkEnv)            l     onOff=false, parent=<env 0x5614f8eae378>, context 1
  fs              %224.2 = FrameState         R     0x5614fb8877a0+15: [false], env=e224.1, next=%224.0
  void                    Deopt              !v    %224.2, DeadBranchReached@0x5614fbdb2d38[Test#0], %221.2   !
BB225   <- [223]
  lgl$-           %225.0 = CastType           d     dn %223.5
  val?            %225.1 = PopContext         C     %225.0, %221.0   <lgl$->
  lgl$#-          %225.2 = IsType                   %225.1 isA lgl$-
  void                    Branch                   %225.2 -> BB227 (if true) | BB228 (if false)
BB226   <- [223]
  fs              %226.0 = FrameState         R     0x5615010b0240+32: [], env=e0.3
  fs              %226.1 = FrameState         R     0x5614fb8877a0+200: [%223.5], env=e223.1, next=%226.0
  void                    Deopt              !v    %226.1, Typecheck@0x5614fbdb2d38[Type#5], %223.5   !
BB227   <- [225]
  lgl$-           %227.0 = CastType           d     dn %225.1
  void                    StVar              lW    primMethods, %227.0, e0.3
  (cls|spec|blt)  %227.2 = LdFun              !v    on.exit, <0x5614f88a6270>, e0.3
  prom-           %227.3 = MkArg                    unboundValue, .findInheritedMethods[0x5614fbe03240]_p11, e0.3
  val?            %227.4 = Call               !v    %227.2(%227.3) e0.3
  val?^ | miss    %227.5 = LdVar              eR    is.environment, e0.3
  lgl$#-          %227.6 = Identical                <blt is.environment>, %227.5   <true>
  void                    Branch                   %227.6 -> BB229 (if true) | BB230 (if false)
BB228   <- [225]
  fs              %228.0 = FrameState         R     0x5615010b0240+32: [%225.1], env=e0.3
  void                    Deopt              !v    %228.0, Typecheck@0x5615010a8200[Type#9], %225.1   !
BB229   <- [227]
  val?^ | miss    %229.0 = LdVar              eR    table, e0.3
  val?            %229.1 = Force!<lazy>       !v    %229.0, e0.3   <env->
  lgl$#-          %229.2 = CallSafeBuiltin    wed   is.environment(%229.1)    <lgl$->
  void                    Branch                   %229.2 -> BB14 (if true) | BB13 (if false)
BB230   <- [227]
  fs              %230.0 = FrameState         R     0x5615010b0240+78: [%227.4], env=e0.3
  void                    Deopt              !v    %230.0, DeadBranchReached@0x5615010a8200[Test#0], %227.6   !
BB14   <- [229]
  val?^ | miss    %14.0 = LdVar              eR    length, e0.3
  lgl$#-          %14.1 = Identical                <blt length>, %14.0   <true>
  void                    Branch                   %14.1 -> BB231 (if true) | BB232 (if false)
BB13   <- [229]
  (cls|spec|blt)  %13.0 = LdFun              !v    is, e0.3
  fs              %13.1 = FrameState         R     0x5615010b0240+192: [%13.0], env=e0.3
  void                    Deopt              !v    %13.1, DeadCall@0x5615010a8200[Call#9], %13.0   !
BB231   <- [14]
  (cls|spec|blt)  %231.0 = LdFun              !v    @, <0x5614f88a6bd8>, e0.3
  prom-           %231.1 = MkArg                    unboundValue, .findInheritedMethods[0x5614fbe03240]_p13, e0.3
  prom-           %231.2 = MkArg                    unboundValue, .findInheritedMethods[0x5614fbe03240]_p14, e0.3
  val?            %231.3 = Call               !v    %231.0(%231.1, %231.2) e0.3   <vec->
  lgl$#-          %231.4 = IsType                   %231.3 isA val?-
  void                    Branch                   %231.4 -> BB233 (if true) | BB234 (if false)
BB232   <- [14]
  fs              %232.0 = FrameState         R     0x5615010b0240+170: [%229.2], env=e0.3
  void                    Deopt              !v    %232.0, DeadBranchReached@0x5615010a8200[Test#1], %14.1   !
BB233   <- [231]
  val?-           %233.0 = CastType           d     dn %231.3   <vec->
  (int|real)$-    %233.1 = CallSafeBuiltin    wed   length(%233.0)    <int$->
  lgl$#-          %233.2 = IsType                   %233.1 isA int$-
  void                    Branch                   %233.2 -> BB235 (if true) | BB236 (if false)
BB234   <- [231]
  fs              %234.0 = FrameState         R     0x5615010b0240+416: [<blt length>, %231.3], env=e0.3
  void                    Deopt              !v    %234.0, Typecheck@0x5615010a8200[Type#27], %231.3   !
BB235   <- [233]
  int$-           %235.0 = CastType           d     dn %233.1
  lgl$-           %235.1 = Gt                 d     %235.0, 0L, elided   <lgl$->
  void                    StVar              lW    hasGroup, %235.1, e0.3
  lgl$#-          %235.3 = CheckTrueFalse     e     %235.1
  void                    Branch                   %235.3 -> BB219 (if true) | BB21 (if false)
BB236   <- [233]
  fs              %236.0 = FrameState         R     0x5615010b0240+438: [%233.1], env=e0.3
  void                    Deopt              !v    %236.0, Typecheck@0x5615010a8200[Type#28], %233.1   !
BB219   <- [235]
  (cls|spec|blt)  %219.0 = LdFun              !v    .getAllGroups, e0.3
  fs              %219.1 = FrameState         R     0x5615010b0240+494: [%219.0], env=e0.3
  void                    Deopt              !v    %219.1, DeadCall@0x5615010a8200[Call#18], %219.0   !
BB21   <- [235]
  val?^ | miss    %21.0 = LdVar              eR    length, e0.3
  lgl$#-          %21.1 = Identical                <blt length>, %21.0   <true>
  void                    Branch                   %21.1 -> BB237 (if true) | BB238 (if false)
BB237   <- [21]
  val?^ | miss    %237.0 = LdVar              eR    excluded, e0.3
  val?            %237.1 = Force!<lazy>       !v    %237.0, e0.3   <(nil|str)->
  lgl$#-          %237.2 = IsType                   %237.1 isA val?-
  void                    Branch                   %237.2 -> BB239 (if true) | BB240 (if false)
BB238   <- [21]
  fs              %238.0 = FrameState         R     0x5615010b0240+464: [], env=e0.3
  void                    Deopt              !v    %238.0, DeadBranchReached@0x5615010a8200[Test#2], %21.1   !
BB239   <- [237]
  val?-           %239.0 = CastType           d     dn %237.1   <(nil|str)->
  (int|real)$-    %239.1 = CallSafeBuiltin    wed   length(%239.0)    <int$->
  lgl$#-          %239.2 = IsType                   %239.1 isA int$-
  void                    Branch                   %239.2 -> BB241 (if true) | BB242 (if false)
BB240   <- [237]
  fs              %240.0 = FrameState         R     0x5615010b0240+604: [<blt length>, %237.1], env=e0.3
  void                    Deopt              !v    %240.0, Typecheck@0x5615010a8200[Type#35], %237.1   !
BB241   <- [239]
  int$-           %241.0 = CastType           d     dn %239.1
  lgl$-           %241.1 = Gt                 d     %241.0, 0L, elided   <lgl$->
  void                    StVar              lW    doExcluded, %241.1, e0.3
  val?^ | miss    %241.3 = LdVar              eR    verbose, e0.3
  val?            %241.4 = Force!<lazy>       !v    %241.3, e0.3   <lgl$->
  lgl$#-          %241.5 = CheckTrueFalse     we    %241.4
  void                    Branch                   %241.5 -> BB218 (if true) | BB28 (if false)
BB242   <- [239]
  fs              %242.0 = FrameState         R     0x5615010b0240+626: [%239.1], env=e0.3
  void                    Deopt              !v    %242.0, Typecheck@0x5615010a8200[Type#36], %239.1   !
BB218   <- [241]
  void                    StVar              lW    plist, %0.18, e0.3
  (cls|spec|blt)  %218.1 = LdFun              !v    cat, e0.3
  fs              %218.2 = FrameState         R     0x5615010b0240+707: [%218.1], env=e0.3
  void                    Deopt              !v    %218.2, DeadCall@0x5615010a8200[Call#21], %218.1   !
BB28   <- [241]
  val?^ | miss    %28.0 = LdVar              eR    length, e0.3
  lgl$#-          %28.1 = Identical                <blt length>, %28.0   <true>
  void                    Branch                   %28.1 -> BB243 (if true) | BB244 (if false)
BB243   <- [28]
  val?^ | miss    %243.0 = LdVar              eR    classes, e0.3
  val?            %243.1 = Force!<lazy>       !v    %243.0, e0.3   <(str|vec)$>
  val?            %243.2 = CallBuiltin        !v    length(%243.1) e0.3   <int$->
  lgl$#-          %243.3 = IsType                   %243.2 isA int$-
  void                    Branch                   %243.3 -> BB245 (if true) | BB246 (if false)
BB244   <- [28]
  fs              %244.0 = FrameState         R     0x5615010b0240+667: [%241.5], env=e0.3
  void                    Deopt              !v    %244.0, DeadBranchReached@0x5615010a8200[Test#4], %28.1   !
BB245   <- [243]
  int$-           %245.0 = CastType           d     dn %243.2
  void                    StVar              lW    nargs, %245.0, e0.3
  lgl$-           %245.2 = Missing            eR    useInherited, e0.3
  lgl$-           %245.3 = Not                d     %245.2, elided
  lgl$-           %245.4 = AsLogical                %245.3
  lgl$#-          %245.5 = Identical                %245.4, false
  void                    Branch                   %245.5 -> BB217 (if true) | BB31 (if false)
BB246   <- [243]
  fs              %246.0 = FrameState         R     0x5615010b0240+866: [%243.2], env=e0.3
  void                    Deopt              !v    %246.0, Typecheck@0x5615010a8200[Type#61], %243.2   !
BB217   <- [245]
  void                    Nop                !     
  lgl$-           %217.1 = %245.4
  goto BB38
BB31   <- [245]
  val?^ | miss    %31.0 = LdVar              eR    length, e0.3
  lgl$#-          %31.1 = Identical                <blt length>, %31.0   <@?>
  void                    Branch                   %31.1 -> BB33 (if true) | BB32 (if false)
BB38   <- [217, 249]
  lgl$-           %38.0 = Phi                      %249.4:BB249, %217.1:BB217
  lgl$-           %38.1 = %38.0
  lgl$#-          %38.2 = CheckTrueFalse     e     %38.1
  void                    Branch                   %38.2 -> BB216 (if true) | BB41 (if false)
BB33   <- [31]
  val?^ | miss    %33.0 = LdVar              eR    useInherited, e0.3
  val?            %33.1 = Force!             !v    %33.0, e0.3   <val?_>
  lgl$#-          %33.2 = IsType                   %33.1 isA val?+
  void                    Branch                   %33.2 -> BB247 (if true) | BB248 (if false)
BB32   <- [31]
  (cls|spec|blt)  %32.0 = LdFun              !v    length, e0.3
  fs              %32.1 = FrameState         R     0x5615010b0240+922: [%245.4, %32.0], env=e0.3
  void                    Deopt              !v    %32.1, DeadCall@0x5615010a8200[Call#31], %32.0   !
BB216   <- [38]
  (cls|spec|blt)  %216.0 = LdFun              !v    rep, e0.3
  fs              %216.1 = FrameState         R     0x5615010b0240+1028: [%216.0], env=e0.3
  void                    Deopt              !v    %216.1, DeadCall@0x5615010a8200[Call#32], %216.0   !
BB41   <- [38]
  val?^ | miss    %41.0 = LdVar              eR    hasGroup, e0.3
  lgl$#-          %41.1 = IsType                   %41.0 isA lgl$-
  void                    Branch                   %41.1 -> BB251 (if true) | BB252 (if false)
BB247   <- [33]
  val?+           %247.0 = CastType           d     dn %33.1   <val?_>
  (int|real)$-    %247.1 = CallSafeBuiltin    wed   length(%247.0)    <val?_>
  val?^ | miss    %247.2 = LdVar              eR    nargs, e0.3
  val?            %247.3 = Force!             !v    %247.2, e0.3   <val?_>
  lgl$#-          %247.4 = IsType                   %247.3 isA val?+
  void                    Branch                   %247.4 -> BB249 (if true) | BB250 (if false)
BB248   <- [33]
  fs              %248.0 = FrameState         R     0x5615010b0240+963: [%245.4, <blt length>, %33.1], env=e0.3
  void                    Deopt              !v    %248.0, Typecheck@0x5615010a8200[Type#63], %33.1   !
BB251   <- [41]
  lgl$-           %251.0 = CastType           d     dn %41.0
  lgl$-           %251.1 = AsLogical                %251.0
  lgl$#-          %251.2 = Identical                %251.1, false
  void                    Branch                   %251.2 -> BB215 (if true) | BB42 (if false)
BB252   <- [41]
  fs              %252.0 = FrameState         R     0x5615010b0240+1012: [%38.1], env=e0.3
  void                    Deopt              !v    %252.0, Typecheck@0x5615010a8200[Type#70], %41.0   !
BB249   <- [247]
  val?+           %249.0 = CastType           d     dn %247.3   <val?_>
  lgl             %249.1 = Lt                 wed   %247.1, %249.0, elided   <val?_>
  lgl$-           %249.2 = AsLogical          e     %249.1
  lgl$-           %249.3 = LAnd                     %245.4, %249.2
  lgl$-           %249.4 = %249.3
  goto BB38
BB250   <- [247]
  fs              %250.0 = FrameState         R     0x5615010b0240+999: [%245.4, %247.1, %247.3], env=e0.3
  void                    Deopt              !v    %250.0, Typecheck@0x5615010a8200[Type#65], %247.3   !
BB215   <- [251]
  void                    Nop                !     
  lgl$-           %215.1 = %251.1
  goto BB45
BB42   <- [251]
  val?^ | miss    %42.0 = LdVar              eR    doExcluded, e0.3
  val?            %42.1 = Force!             !v    %42.0, e0.3   <val?_>
  lgl$#-          %42.2 = IsType                   %42.1 isA val?+
  void                    Branch                   %42.2 -> BB253 (if true) | BB254 (if false)
BB45   <- [215, 253]
  lgl$-           %45.0 = Phi                      %253.4:BB253, %215.1:BB215
  lgl$-           %45.1 = %45.0
  lgl$#-          %45.2 = CheckTrueFalse     e     %45.1
  void                    Branch                   %45.2 -> BB214 (if true) | BB46 (if false)
BB253   <- [42]
  val?+           %253.0 = CastType           d     dn %42.1   <val?_>
  lgl             %253.1 = Not                wed   %253.0, elided
  lgl$-           %253.2 = AsLogical          e     %253.1
  lgl$-           %253.3 = LAnd                     %251.1, %253.2
  lgl$-           %253.4 = %253.3
  goto BB45
BB254   <- [42]
  fs              %254.0 = FrameState         R     0x5615010b0240+1112: [%251.1, %42.1], env=e0.3
  void                    Deopt              !v    %254.0, Typecheck@0x5615010a8200[Type#71], %42.1   !
BB214   <- [45]
  (cls|spec|blt)  %214.0 = LdFun              !v    .sigLabel, e0.3
  fs              %214.1 = FrameState         R     0x5615010b0240+1136: [%214.0], env=e0.3
  void                    Deopt              !v    %214.1, DeadCall@0x5615010a8200[Call#33], %214.0   !
BB46   <- [45]
  val?^ | miss    %46.0 = LdVar              eR    classes, e0.3
  val?            %46.1 = Force!<wrapped>    !v    %46.0, e0.3   <(str|vec)$>
  val?            %46.2 = Extract2_1D        !v    %46.1, 1L, e0.3   <str$+>
  void                    StVar              lW    cl1, %46.2, e0.3
  val?^ | miss    %46.4 = LdVar              eR    getClass, e0.3
  lgl$#-          %46.5 = Identical                %46.4, function(Class, .Force=FALSE, where=.classEnv(|...
  void                    Branch                   %46.5 -> BB255 (if true) | BB256 (if false)
BB255   <- [46]
  prom-           %255.0 = MkArg                    unboundValue, .findInheritedMethods[0x5614fbe03240]_p15 (!refl), e0.3
  prom-           %255.1 = MkArg                    unboundValue, .findInheritedMethods[0x5614fbe03240]_p16, e0.3
  val?            %255.2 = StaticCall         !v    getClass[0x561504c05160](%255.0, true, %255.1) { 0 2n 1n } e0.3   <other>
  void                    StVar              lW    def, %255.2, e0.3
  lgl$-           %255.4 = Missing            eR    useInherited, e0.3
  lgl$-           %255.5 = AsLogical                %255.4
  lgl$#-          %255.6 = Identical                %255.5, true
  void                    Branch                   %255.6 -> BB213 (if true) | BB49 (if false)
BB256   <- [46]
  fs              %256.0 = FrameState         R     0x5615010b0240+1502: [], env=e0.3
  void                    Deopt              !v    %256.0, CallTarget@0x5615010a8200[Call#37], %46.4   !
BB213   <- [255]
  void                    Nop                !     
  lgl$-           %213.1 = %255.5
  goto BB52
BB49   <- [255]
  val?^ | miss    %49.0 = LdVar              eR    useInherited, e0.3
  val?            %49.1 = Force!             !v    %49.0, e0.3   <val?_>
  lgl$#-          %49.2 = IsType                   %49.1 isA val?+
  void                    Branch                   %49.2 -> BB257 (if true) | BB258 (if false)
BB52   <- [213, 257]
  lgl$-           %52.0 = Phi                      %257.4:BB257, %213.1:BB213
  lgl$-           %52.1 = %52.0
  lgl$#-          %52.2 = CheckTrueFalse     e     %52.1
  void                    Branch                   %52.2 -> BB210 (if true) | BB55 (if false)
BB257   <- [49]
  val?+           %257.0 = CastType           d     dn %49.1   <val?_>
  val?            %257.1 = Extract2_1D        wed   %257.0, 1L, elided   <val?_>
  lgl$-           %257.2 = AsLogical          e     %257.1
  lgl$-           %257.3 = LOr                      %255.5, %257.2
  lgl$-           %257.4 = %257.3
  goto BB52
BB258   <- [49]
  fs              %258.0 = FrameState         R     0x5615010b0240+1592: [%255.5, %49.1], env=e0.3
  void                    Deopt              !v    %258.0, Typecheck@0x5615010a8200[Type#91], %49.1   !
BB210   <- [52]
  val?^ | miss    %210.0 = LdVar              eR    c, e0.3
  lgl$#-          %210.1 = Identical                <blt c>, %210.0   <true>
  void                    Branch                   %210.1 -> BB259 (if true) | BB260 (if false)
BB55   <- [52]
  val?^ | miss    %55.0 = LdVar              eR    cl1, e0.3
  val?            %55.1 = Force!             !v    %55.0, e0.3   <val?_>
  val?            %55.2 = %55.1
  goto BB56
BB259   <- [210]
  val?^ | miss    %259.0 = LdVar              eR    cl1, e0.3
  lgl$#-          %259.1 = IsType                   %259.0 isA val?~+ | miss
  void                    Branch                   %259.1 -> BB263 (if true) | BB264 (if false)
BB260   <- [210]
  void                    Nop                !     
  lgl$#-          %260.1 = %210.1
  dr              %260.2 = DeadBranchReached@0x5615010a8200[Test#10]
  goto BB53
BB56   <- [55, 273]
  val?            %56.0 = Phi                      %55.2:BB55, %273.2:BB273   <str->
  val?            %56.1 = %56.0
  void                    StVar              lW    labels, %56.1, e0.3
  val?^ | miss    %56.3 = LdVar              eR    list, e0.3
  lgl$#-          %56.4 = Identical                <blt list>, %56.3   <true>
  void                    Branch                   %56.4 -> BB261 (if true) | BB262 (if false)
BB263   <- [259]
  val?~+ | miss   %263.0 = CastType           d     dn %259.0
  val?+           %263.1 = Force!<value>            %263.0,    <str$+>
  val?^ | miss    %263.2 = LdVar              eR    .eligibleSuperClasses, e0.3
  lgl$#-          %263.3 = Identical                %263.2, function(contains, simpleOnly) <(rir::Dispatch|...
  void                    Branch                   %263.3 -> BB265 (if true) | BB266 (if false)
BB264   <- [259]
  void                    Nop                !     
  val?^ | miss    %264.1 = %259.0
  dr              %264.2 = Typecheck@0x5615010a8200[Type#100]
  goto BB53
BB53   <- [260, 264, 266]
  val?^ | miss    %53.0 = Phi                      %260.1:BB260, %264.1:BB264, %266.1:BB266
  val?^ | miss    %53.1 = %53.0
  dr              %53.2 = Phi                      %260.2:BB260, %264.2:BB264, %266.2:BB266
  dr              %53.3 = %53.2
  fs              %53.4 = FrameState         R     0x5615010b0240+1643: [%52.1], env=e0.3
  void                    Deopt              !v    %53.4, %53.3, %53.1   !
BB261   <- [56]
  val             %261.0 = ChkMissing         e     %56.1
  val+            %261.1 = CallSafeBuiltin    wed   list(%56.1)    <vec$->
  void                    StVar              lW    supersList, %261.1, e0.3
  val?^ | miss    %261.3 = LdVar              eR    vector, e0.3
  lgl$#-          %261.4 = Identical                %261.3, function(mode="logical", length=0L) <(rir::Dis|...
  void                    Branch                   %261.4 -> BB267 (if true) | BB268 (if false)
BB262   <- [56]
  fs              %262.0 = FrameState         R     0x5615010b0240+1831: [], env=e0.3
  void                    Deopt              !v    %262.0, DeadBranchReached@0x5615010a8200[Test#11], %56.4   !
BB265   <- [263]
  prom-           %265.0 = MkArg                    unboundValue, .findInheritedMethods[0x5614fbe03240]_p99, e0.3
  prom-           %265.1 = MkArg                    unboundValue, .findInheritedMethods[0x5614fbe03240]_p102, e0.3
  val?            %265.2 = StaticCall         !v    .eligibleSuperClasses[0x561504c8ab30](%265.0, %265.1) e0.3   <str->
  lgl$#-          %265.3 = IsType                   %265.2 isA val?-
  void                    Branch                   %265.3 -> BB273 (if true) | BB274 (if false)
BB266   <- [263]
  void                    Nop                !     
  val?^ | miss    %266.1 = %263.2
  dr              %266.2 = CallTarget@0x5615010a8200[Call#41]
  goto BB53
BB267   <- [261]
  val?^ | miss    %267.0 = LdVar              eR    nargs, e0.3
  lgl$#-          %267.1 = IsType                   %267.0 isA int$-
  void                    Branch                   %267.1 -> BB269 (if true) | BB270 (if false)
BB268   <- [261]
  void                    Nop                !     
  val?^ | miss    %268.1 = %261.3
  dr              %268.2 = CallTarget@0x5615010a8200[Call#44]
  goto BB59
BB273   <- [265]
  val?-           %273.0 = CastType           d     dn %265.2   <str->
  (list|sym|char|lgl|int|real|str|vec|complex|raw|cls|spec|blt|prom|_|code|env|ast|expressions|dots|other)+ %273.1 = CallSafeBuiltin    wed   c(%263.1, %273.0, "ANY")    <str->
  (list|sym|char|lgl|int|real|str|vec|complex|raw|cls|spec|blt|prom|_|code|env|ast|expressions|dots|other)+ %273.2 = %273.1
  goto BB56
BB274   <- [265]
  fs              %274.0 = FrameState         R     0x5615010b0240+1789: [<blt c>, %263.1, %265.2], env=e0.3
  void                    Deopt              !v    %274.0, Typecheck@0x5615010a8200[Type#105], %265.2   !
BB269   <- [267]
  int$-           %269.0 = CastType           d     dn %267.0
  vec-            %269.1 = CallSafeBuiltin    wed   vector("list", %269.0)    <vec$->
  void                    StVar              lW    classDefs, %269.1, e0.3
  val?^ | miss    %269.3 = LdVar              eR    def, e0.3
  val?            %269.4 = Force!<value>      !v    %269.3, e0.3   <other>
  val?^ | miss    %269.5 = LdVar              eR    classDefs !upd, e0.3
  lgl$#-          %269.6 = IsType                   %269.5 isA val?~- | miss
  void                    Branch                   %269.6 -> BB271 (if true) | BB272 (if false)
BB270   <- [267]
  void                    Nop                !     
  val?^ | miss    %270.1 = %267.0
  dr              %270.2 = Typecheck@0x5615010a8200[Type#110]
  goto BB59
BB59   <- [268, 270]
  val?^ | miss    %59.0 = Phi                      %268.1:BB268, %270.1:BB270
  val?^ | miss    %59.1 = %59.0
  dr              %59.2 = Phi                      %268.2:BB268, %270.2:BB270
  dr              %59.3 = %59.2
  fs              %59.4 = FrameState         R     0x5615010b0240+1936: [], env=e0.3
  void                    Deopt              !v    %59.4, %59.3, %59.1   !
BB271   <- [269]
  val?~- | miss   %271.0 = CastType           d     dn %269.5
  val?-           %271.1 = Force!<value>            %271.0,    <vec$->
  val?            %271.2 = Subassign2_1D      !v    %269.4, %271.1, 1L, e0.3
  void                    StVar              lW    classDefs, %271.2, e0.3
  val?^ | miss    %271.4 = LdVar              eR    nargs, e0.3
  lgl$#-          %271.5 = IsType                   %271.4 isA int$-
  void                    Branch                   %271.5 -> BB275 (if true) | BB276 (if false)
BB272   <- [269]
  fs              %272.0 = FrameState         R     0x5615010b0240+1996: [%269.4], env=e0.3
  void                    Deopt              !v    %272.0, Typecheck@0x5615010a8200[Type#113], %269.5   !
BB275   <- [271]
  int$-           %275.0 = CastType           d     dn %271.4
  lgl$-           %275.1 = Gt                 d     %275.0, 1, elided   <lgl$->
  lgl$#-          %275.2 = CheckTrueFalse     e     %275.1
  void                    Branch                   %275.2 -> BB177 (if true) | BB65 (if false)
BB276   <- [271]
  fs              %276.0 = FrameState         R     0x5615010b0240+2031: [], env=e0.3
  void                    Deopt              !v    %276.0, Typecheck@0x5615010a8200[Type#114], %271.4   !
BB177   <- [275]
  lgl$#-          %177.0 = ColonInputEffects        2, %275.0   <@?>
  void                    Branch                   %177.0 -> BB179 (if true) | BB178 (if false)
BB65   <- [275]
  void                    Nop                !     
  goto BB66
BB179   <- [177]
  int$#-          %179.0 = ColonCastRhs       e     2L, %275.0   <val?_>
  lgl$#-          %179.1 = Lte                d     2L, %179.0, elided   <@?>
  void                    Branch                   %179.1 -> BB209 (if true) | BB180 (if false)
BB178   <- [177]
  int-            %178.0 = Colon              d     2L, %275.0, elided
  (cls|spec|blt)  %178.1 = LdFun              !v    for, e0.3
  prom-           %178.2 = MkArg                    %178.0, .findInheritedMethods[0x5614fbe03240]_p66 (!refl), e0.3
  prom-           %178.3 = MkArg                    unboundValue, .findInheritedMethods[0x5614fbe03240]_p67, e0.3
  val?            %178.4 = Call               !v    %178.1(%178.2, %178.3) e0.3
  goto BB66
BB66   <- [65, 178, 183]
  val?^ | miss    %66.0 = LdVar              eR    labels, e0.3
  lgl$#-          %66.1 = IsType                   %66.0 isA val?~- | miss
  void                    Branch                   %66.1 -> BB277 (if true) | BB278 (if false)
BB209   <- [179]
  void                    Nop                !     
  int$#-          %209.1 = 1L
  goto BB181
BB180   <- [179]
  void                    Nop                !     
  int$#-          %180.1 = -1L
  goto BB181
BB277   <- [66]
  val?~- | miss   %277.0 = CastType           d     dn %66.0
  val?-           %277.1 = Force!<value>            %277.0,    <str->
  lgl$#-          %277.2 = IsType                   %277.1 isA val+   <true>
  void                    Branch                   %277.2 -> BB279 (if true) | BB280 (if false)
BB278   <- [66]
  void                    Nop                !     
  val?^ | miss    %278.1 = %66.0
  dr              %278.2 = Typecheck@0x5615010a8200[Type#238]
  goto BB67
BB181   <- [209, 180]
  int$#-          %181.0 = Phi                      %209.1:BB209, %180.1:BB180
  int$#-          %181.1 = %181.0
  lgl$#-          %181.2 = Neq                d     %179.0, 2L, elided   <@?>
  void                    Branch                   %181.2 -> BB184 (if true) | BB182 (if false)
BB279   <- [277]
  val?            %279.0 = Extract1_1D        wed   %277.1, -1L, elided   <str->
  void                    StVar              lW    labels, %279.0, e0.3
  val?^ | miss    %279.2 = LdVar              eR    unique, e0.3
  lgl$#-          %279.3 = Identical                %279.2, function(x, incomparables=FALSE, ...) <(rir::D|...
  void                    Branch                   %279.3 -> BB281 (if true) | BB282 (if false)
BB280   <- [277]
  void                    Nop                !     
  lgl$#-          %280.1 = %277.2
  dr              %280.2 = DeadBranchReached@0x5615010a8200[Test#27]
  goto BB67
BB67   <- [278, 280]
  val?^ | miss    %67.0 = Phi                      %278.1:BB278, %280.1:BB280
  val?^ | miss    %67.1 = %67.0
  dr              %67.2 = Phi                      %278.2:BB278, %280.2:BB280
  dr              %67.3 = %67.2
  fs              %67.4 = FrameState         R     0x5615010b0240+3635: [], env=e0.3
  void                    Deopt              !v    %67.4, %67.3, %67.1   !
BB184   <- [181]
  void                    StVar              lW    i, 2L, e0.3
  int$#-          %184.1 = Add                d     2L, %181.1, elided
  val?^ | miss    %184.2 = LdVar              eR    getClass, e0.3
  lgl$#-          %184.3 = Identical                %184.2, function(Class, .Force=FALSE, where=.classEnv(|...
  void                    Branch                   %184.3 -> BB283 (if true) | BB284 (if false)
BB182   <- [181]
  void                    Nop                !     
  goto BB183
BB281   <- [279]
  val             %281.0 = ChkMissing         e     %279.0
  val?            %281.1 = StaticCall         !v    unique[0x5615053c5010](%279.0) { 0 } e0.3   <str->
  void                    StVar              lW    labels, %281.1, e0.3
  val?^ | miss    %281.3 = LdVar              eR    verbose, e0.3
  val?            %281.4 = Force!<wrapped>    !v    %281.3, e0.3   <lgl$->
  lgl$#-          %281.5 = CheckTrueFalse     we    %281.4
  void                    Branch                   %281.5 -> BB176 (if true) | BB73 (if false)
BB282   <- [279]
  fs              %282.0 = FrameState         R     0x5615010b0240+3703: [], env=e0.3
  void                    Deopt              !v    %282.0, CallTarget@0x5615010a8200[Call#80], %279.2   !
BB283   <- [184]
  prom-           %283.0 = MkArg                    unboundValue, .findInheritedMethods[0x5614fbe03240]_p87, e0.3
  prom-           %283.1 = MkArg                    unboundValue, .findInheritedMethods[0x5614fbe03240]_p89, e0.3
  val?            %283.2 = StaticCall         !v    getClass[0x561504c82a40](%283.0, true, %283.1) { 0 2n 1n } e0.3   <other>
  val?^ | miss    %283.3 = LdVar              eR    classDefs !upd, e0.3
  lgl$#-          %283.4 = IsType                   %283.3 isA val?~- | miss
  void                    Branch                   %283.4 -> BB287 (if true) | BB288 (if false)
BB284   <- [184]
  fs              %284.0 = FrameState         R     0x5615010b0240+2212: [%181.1, %179.0, 2L], env=e0.3
  void                    Deopt              !v    %284.0, CallTarget@0x5615010a8200[Call#54], %184.2   !
BB183   <- [205, 182]
  void                    Nop                !     
  goto BB66
BB176   <- [281]
  (cls|spec|blt)  %176.0 = LdFun              !v    cat, e0.3
  fs              %176.1 = FrameState         R     0x5615010b0240+3779: [%176.0], env=e0.3
  void                    Deopt              !v    %176.1, DeadCall@0x5615010a8200[Call#81], %176.0   !
BB73   <- [281]
  val?^ | miss    %73.0 = LdVar              eR    names, e0.3
  lgl$#-          %73.1 = Identical                <blt names>, %73.0   <true>
  void                    Branch                   %73.1 -> BB285 (if true) | BB286 (if false)
BB287   <- [283]
  val?~- | miss   %287.0 = CastType           d     dn %283.3
  val?-           %287.1 = Force!<value>            %287.0,    <vec->
  val?^ | miss    %287.2 = LdVar              eR    i, e0.3
  lgl$#-          %287.3 = IsType                   %287.2 isA int$-
  void                    Branch                   %287.3 -> BB289 (if true) | BB290 (if false)
BB288   <- [283]
  void                    Nop                !     
  val?^ | miss    %288.1 = %283.3
  dr              %288.2 = Typecheck@0x5615010a8200[Type#158]
  goto BB187
BB285   <- [73]
  val?^ | miss    %285.0 = LdVar              eR    table, e0.3
  val?            %285.1 = Force!<wrapped>    !v    %285.0, e0.3   <env->
  lgl$#-          %285.2 = IsType                   %285.1 isA val?-
  void                    Branch                   %285.2 -> BB291 (if true) | BB292 (if false)
BB286   <- [73]
  fs              %286.0 = FrameState         R     0x5615010b0240+3764: [%281.5], env=e0.3
  void                    Deopt              !v    %286.0, DeadBranchReached@0x5615010a8200[Test#28], %73.1   !
BB289   <- [287]
  int$-           %289.0 = CastType           d     dn %287.2
  val?            %289.1 = Subassign2_1D      !v    %283.2, %287.1, %289.0, e0.3
  void                    StVar              lW    classDefs, %289.1, e0.3
  void                    StVar              lW    cc, %283.2, e0.3
  lgl$-           %289.4 = Missing            eR    useInherited, e0.3
  lgl$-           %289.5 = AsLogical                %289.4
  lgl$#-          %289.6 = Identical                %289.5, true
  void                    Branch                   %289.6 -> BB208 (if true) | BB189 (if false)
BB290   <- [287]
  void                    Nop                !     
  val?^ | miss    %290.1 = %287.2
  dr              %290.2 = Typecheck@0x5615010a8200[Type#159]
  goto BB187
BB187   <- [288, 290]
  val?^ | miss    %187.0 = Phi                      %288.1:BB288, %290.1:BB290
  val?^ | miss    %187.1 = %187.0
  dr              %187.2 = Phi                      %288.2:BB288, %290.2:BB290
  dr              %187.3 = %187.2
  fs              %187.4 = FrameState         R     0x5615010b0240+2273: [%181.1, %179.0, %184.1, %283.2], env=e0.3
  void                    Deopt              !v    %187.4, %187.3, %187.1   !
BB291   <- [285]
  val?-           %291.0 = CastType           d     dn %285.1   <env->
  val+            %291.1 = CallSafeBuiltin    wed   names(%291.0)    <str->
  void                    StVar              lW    allMethods, %291.1, e0.3
  val?^ | miss    %291.3 = LdVar              eR    match, e0.3
  lgl$#-          %291.4 = Identical                %291.3, function(x, table, nomatch=NA, incomparables=N|...
  void                    Branch                   %291.4 -> BB293 (if true) | BB294 (if false)
BB292   <- [285]
  fs              %292.0 = FrameState         R     0x5615010b0240+3984: [<blt names>, %285.1], env=e0.3
  void                    Deopt              !v    %292.0, Typecheck@0x5615010a8200[Type#249], %285.1   !
BB208   <- [289]
  void                    Nop                !     
  lgl$-           %208.1 = %289.5
  goto BB192
BB189   <- [289]
  val?^ | miss    %189.0 = LdVar              eR    useInherited, e0.3
  val?            %189.1 = Force!             !v    %189.0, e0.3   <val?_>
  lgl$#-          %189.2 = IsType                   %189.1 isA val+   <@?>
  void                    Branch                   %189.2 -> BB207 (if true) | BB190 (if false)
BB293   <- [291]
  val?^ | miss    %293.0 = LdVar              eR    labels, e0.3
  lgl$#-          %293.1 = IsType                   %293.0 isA val?~- | miss
  void                    Branch                   %293.1 -> BB295 (if true) | BB296 (if false)
BB294   <- [291]
  void                    Nop                !     
  val?^ | miss    %294.1 = %291.3
  dr              %294.2 = CallTarget@0x5615010a8200[Call#86]
  goto BB76
BB192   <- [208, 191]
  lgl$-           %192.0 = Phi                      %191.5:BB191, %208.1:BB208
  lgl$-           %192.1 = %192.0
  lgl$#-          %192.2 = CheckTrueFalse     e     %192.1
  void                    Branch                   %192.2 -> BB196 (if true) | BB195 (if false)
BB207   <- [189]
  val?^ | miss    %207.0 = LdVar              eR    i, e0.3
  val?            %207.1 = Force!             !v    %207.0, e0.3   <val?_>
  val?            %207.2 = %207.1
  goto BB191
BB190   <- [189]
  prom-           %190.0 = MkArg                    unboundValue, .findInheritedMethods[0x5614fbe03240]_p98, e0.3
  prom-           %190.1 = %190.0
  goto BB191
BB295   <- [293]
  val?~- | miss   %295.0 = CastType           d     dn %293.0
  val?-           %295.1 = Force!<value>            %295.0,    <str->
  val?^ | miss    %295.2 = LdVar              eR    .fillSignatures, e0.3
  lgl$#-          %295.3 = Identical                %295.2, function(sigs, n) <(rir::DispatchTable*)0x5614|...
  void                    Branch                   %295.3 -> BB297 (if true) | BB298 (if false)
BB296   <- [293]
  void                    Nop                !     
  val?^ | miss    %296.1 = %293.0
  dr              %296.2 = Typecheck@0x5615010a8200[Type#251]
  goto BB76
BB76   <- [294, 296, 298]
  val?^ | miss    %76.0 = Phi                      %294.1:BB294, %296.1:BB296, %298.1:BB298
  val?^ | miss    %76.1 = %76.0
  dr              %76.2 = Phi                      %294.2:BB294, %296.2:BB296, %298.2:BB298
  dr              %76.3 = %76.2
  fs              %76.4 = FrameState         R     0x5615010b0240+4020: [], env=e0.3
  void                    Deopt              !v    %76.4, %76.3, %76.1   !
BB196   <- [192]
  val?^ | miss    %196.0 = LdVar              eR    c, e0.3
  lgl$#-          %196.1 = Identical                <blt c>, %196.0   <true>
  void                    Branch                   %196.1 -> BB299 (if true) | BB300 (if false)
BB195   <- [192]
  (cls|spec|blt)  %195.0 = LdFun              !v    @, e0.3
  fs              %195.1 = FrameState         R     0x5615010b0240+2420: [%181.1, %179.0, %184.1, %195.0], env=e0.3
  void                    Deopt              !v    %195.1, DeadCall@0x5615010a8200[Call#55], %195.0   !
BB191   <- [190, 207]
  val?            %191.0 = Phi                      %207.2:BB207, %190.1:BB190
  val?            %191.1 = %191.0
  val?            %191.2 = Extract2_1D        !v    %189.1, %191.1, e0.3   <val?_>
  lgl$-           %191.3 = AsLogical          e     %191.2
  lgl$-           %191.4 = LOr                      %289.5, %191.3
  lgl$-           %191.5 = %191.4
  goto BB192
BB297   <- [295]
  prom-           %297.0 = MkArg                    unboundValue, .findInheritedMethods[0x5614fbe03240]_p22 (!refl), e0.3
  prom-           %297.1 = MkArg                    unboundValue, .findInheritedMethods[0x5614fbe03240]_p23, e0.3
  val?            %297.2 = StaticCall         !v    unknown--fromConstant[0x5614ff8ebea0](%297.0, %297.1) from function(sigs, n) <(rir::DispatchTable*)0x5614|... { 0 1 } e0.3   <str->
  lgl$#-          %297.3 = IsType                   %297.2 isA val?+
  void                    Branch                   %297.3 -> BB301 (if true) | BB302 (if false)
BB298   <- [295]
  void                    Nop                !     
  val?^ | miss    %298.1 = %295.2
  dr              %298.2 = CallTarget@0x5615010a8200[Call#87]
  goto BB76
BB299   <- [196]
  (cls|spec|blt)  %299.0 = LdFun              !v    @, <0x5614f88a6bd8>, e0.3
  prom-           %299.1 = MkArg                    unboundValue, .findInheritedMethods[0x5614fbe03240]_p90, e0.3
  prom-           %299.2 = MkArg                    unboundValue, .findInheritedMethods[0x5614fbe03240]_p91, e0.3
  val?            %299.3 = Call               !v    %299.0(%299.1, %299.2) e0.3   <str$->
  val?^ | miss    %299.4 = LdVar              eR    .eligibleSuperClasses, e0.3
  lgl$#-          %299.5 = Identical                %299.4, function(contains, simpleOnly) <(rir::Dispatch|...
  void                    Branch                   %299.5 -> BB303 (if true) | BB304 (if false)
BB300   <- [196]
  fs              %300.0 = FrameState         R     0x5615010b0240+2409: [%181.1, %179.0, %184.1, %192.1], env=e0.3
  void                    Deopt              !v    %300.0, DeadBranchReached@0x5615010a8200[Test#19], %196.1   !
BB301   <- [297]
  val?+           %301.0 = CastType           d     dn %297.2   <str->
  val+            %301.1 = CallSafeBuiltin    wed   match(%295.1, %301.0, NA, nil)    <int->
  void                    StVar              lW    m, %301.1, e0.3
  lgl$#-          %301.3 = IsType                   %301.1 isA int-
  val?^ | miss    %301.4 = LdVar              eR    is.na, e0.3
  lgl$#-          %301.5 = Identical                <blt is.na>, %301.4   <true>
  void                    Branch                   %301.5 -> BB309 (if true) | BB310 (if false)
BB302   <- [297]
  fs              %302.0 = FrameState         R     0x5615010b0240+4057: [], env=e0.3
  prom-           %302.1 = MkArg                    unboundValue, .findInheritedMethods[0x5614fbe03240]_p21, e0.3
  val?^           %302.2 = CastType                 up %302.1
  prom-           %302.3 = MkArg                    %295.1, .findInheritedMethods[0x5614fbe03240]_p20 (!refl), e0.3
  val?~           %302.4 = CastType                 up %302.3
  env             e302.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%302.2, x=%302.4, parent=R_BaseNamespace, context 0
  fs              %302.6 = FrameState         R     0x5614f90bbd40+23: [%295.1], env=e302.5, next=%302.0
  fs              %302.7 = FrameState         R     0x5614ffd7fec0+37(pr): [%297.2], env=e0.3, next=%302.6
  void                    Deopt              !v    %302.7, Typecheck@0x5614f910ecb0[Type#1], %297.2   !
BB303   <- [299]
  prom-           %303.0 = MkArg                    unboundValue, .findInheritedMethods[0x5614fbe03240]_p92, e0.3
  prom-           %303.1 = MkArg                    unboundValue, .findInheritedMethods[0x5614fbe03240]_p95, e0.3
  val?            %303.2 = StaticCall         !v    .eligibleSuperClasses[0x561504c8ab30](%303.0, %303.1) e0.3   <str$->
  lgl$#-          %303.3 = IsType                   %303.2 isA val?-
  lgl$#-          %303.4 = IsType                   %299.3 isA val?-
  void                    Branch                   %303.4 -> BB305 (if true) | BB306 (if false)
BB304   <- [299]
  fs              %304.0 = FrameState         R     0x5615010b0240+2569: [%181.1, %179.0, %184.1, <blt c>, %299.3], env=e0.3
  void                    Deopt              !v    %304.0, CallTarget@0x5615010a8200[Call#61], %299.4   !
BB309   <- [301]
  void                    Branch                   %301.3 -> BB313 (if true) | BB314 (if false)
BB310   <- [301]
  void                    Nop                !     
  lgl$#-          %310.1 = %301.5
  dr              %310.2 = DeadBranchReached@0x5615010a8200[Test#29]
  goto BB80
BB305   <- [303]
  val?-           %305.0 = CastType           d     dn %299.3   <str$->
  void                    Branch                   %303.3 -> BB307 (if true) | BB308 (if false)
BB306   <- [303]
  void                    Nop                !     
  val?            %306.1 = %299.3
  dr              %306.2 = Typecheck@0x5615010a8200[Type#177]
  goto BB199
BB313   <- [309]
  int-            %313.0 = CastType           d     dn %301.1
  lgl-            %313.1 = CallSafeBuiltin    wed   is.na(%313.0)    <lgl->
  lgl-            %313.2 = Not                wed   %313.1, elided
  void                    StVar              lW    found, %313.2, e0.3
  val?^ | miss    %313.4 = LdVar              eR    mget, e0.3
  lgl$#-          %313.5 = Identical                %313.4, function(x, envir=as.environment(-(1L)), mode=|...
  void                    Branch                   %313.5 -> BB315 (if true) | BB316 (if false)
BB314   <- [309]
  void                    Nop                !     
  val+            %314.1 = %301.1
  dr              %314.2 = Typecheck@0x5615010a8200[Type#256]
  goto BB80
BB80   <- [310, 314]
  val?^ | miss    %80.0 = Phi                      %310.1:BB310, %314.1:BB314
  val?^ | miss    %80.1 = %80.0
  dr              %80.2 = Phi                      %310.2:BB310, %314.2:BB314
  dr              %80.3 = %80.2
  fs              %80.4 = FrameState         R     0x5615010b0240+4071: [], env=e0.3
  void                    Deopt              !v    %80.4, %80.3, %80.1   !
BB307   <- [305]
  val?-           %307.0 = CastType           d     dn %303.2   <str$->
  (list|sym|char|lgl|int|real|str|vec|complex|raw|cls|spec|blt|prom|_|code|env|ast|expressions|dots|other)+ %307.1 = CallSafeBuiltin    wed   c(%305.0, %307.0, "ANY")    <str->
  void                    StVar              lW    allLabels, %307.1, e0.3
  val?^ | miss    %307.3 = LdVar              eR    outerLabels, e0.3
  lgl$#-          %307.4 = Identical                %307.3, function(labels, new) <(rir::DispatchTable*)0x|...
  void                    Branch                   %307.4 -> BB311 (if true) | BB312 (if false)
BB308   <- [305]
  void                    Nop                !     
  val?            %308.1 = %303.2
  dr              %308.2 = Typecheck@0x5615010a8200[Type#182]
  goto BB199
BB199   <- [306, 308]
  val?^ | miss    %199.0 = Phi                      %306.1:BB306, %308.1:BB308
  val?^ | miss    %199.1 = %199.0
  dr              %199.2 = Phi                      %306.2:BB306, %308.2:BB308
  dr              %199.3 = %199.2
  fs              %199.4 = FrameState         R     0x5615010b0240+2611: [%181.1, %179.0, %184.1, <blt c>, %299.3, %303.2], env=e0.3
  void                    Deopt              !v    %199.4, %199.3, %199.1   !
BB315   <- [313]
  prom-           %315.0 = MkArg                    unboundValue, .findInheritedMethods[0x5614fbe03240]_p25, e0.3
  prom-           %315.1 = MkArg                    unboundValue, .findInheritedMethods[0x5614fbe03240]_p29, e0.3
  ct              %315.2 = PushContext        lCL   %315.0, %315.1, mget([(allMethods, [(m, found)), table), function(x, envir=as.environment(-(1L)), mode=|..., e0.3
  val?^           %315.3 = CastType                 up %315.1
  val?^           %315.4 = CastType                 up %315.0
  env             e315.5 = MkEnv              l     x=%315.4, envir=%315.3, mode(miss)="any", ifnotfound(miss)=missingArg, inherits(miss)=false, parent=R_BaseNamespace, context 1
  cls             %315.6 = MkCls                    mget@133, e315.5
  val?            %315.7 = Force!<lazy>       !vL   %315.4, e315.5   <str+>
  val?            %315.8 = Force!<lazy>       !vL   %315.3, e315.5   <env->
  val+            %315.9 = CallSafeBuiltin    wed   list(%315.6)    <vec$->
  val?            %315.10 = CallBuiltin        !v    mget(%315.7, %315.8, "any", %315.9, false) e315.5
  val?            %315.11 = PopContext         C     %315.10, %315.2   <vec+>
  void                    StVar              lW    methods, %315.11, e0.3
  val?^ | miss    %315.13 = LdVar              eR    verbose, e0.3
  val?            %315.14 = Force!<wrapped>    !v    %315.13, e0.3   <lgl$->
  lgl$#-          %315.15 = CheckTrueFalse     we    %315.14
  void                    Branch                   %315.15 -> BB175 (if true) | BB86 (if false)
BB316   <- [313]
  fs              %316.0 = FrameState         R     0x5615010b0240+4177: [], env=e0.3
  void                    Deopt              !v    %316.0, CallTarget@0x5615010a8200[Call#90], %313.4   !
BB311   <- [307]
  prom-           %311.0 = MkArg                    unboundValue, .findInheritedMethods[0x5614fbe03240]_p96, e0.3
  prom-           %311.1 = MkArg                    unboundValue, .findInheritedMethods[0x5614fbe03240]_p97 (!refl), e0.3
  val?            %311.2 = StaticCall         !v    outerLabels[0x5614fec1be80](%311.0, %311.1) e0.3   <str->
  void                    StVar              lW    labels, %311.2, e0.3
  val?^ | miss    %311.4 = LdVar              eR    c, e0.3
  lgl$#-          %311.5 = Identical                <blt c>, %311.4   <true>
  void                    Branch                   %311.5 -> BB317 (if true) | BB318 (if false)
BB312   <- [307]
  fs              %312.0 = FrameState         R     0x5615010b0240+2653: [%181.1, %179.0, %184.1], env=e0.3
  void                    Deopt              !v    %312.0, CallTarget@0x5615010a8200[Call#63], %307.3   !
BB175   <- [315]
  (cls|spec|blt)  %175.0 = LdFun              !v    cat, e0.3
  fs              %175.1 = FrameState         R     0x5615010b0240+4258: [%175.0], env=e0.3
  void                    Deopt              !v    %175.1, DeadCall@0x5615010a8200[Call#91], %175.0   !
BB86   <- [315]
  val?^ | miss    %86.0 = LdVar              eR    hasGroup, e0.3
  lgl$#-          %86.1 = IsType                   %86.0 isA lgl$-
  void                    Branch                   %86.1 -> BB321 (if true) | BB322 (if false)
BB317   <- [311]
  val?^ | miss    %317.0 = LdVar              eR    supersList, e0.3
  lgl$#-          %317.1 = IsType                   %317.0 isA val?~- | miss
  void                    Branch                   %317.1 -> BB319 (if true) | BB320 (if false)
BB318   <- [311]
  void                    Nop                !     
  lgl$#-          %318.1 = %311.5
  dr              %318.2 = DeadBranchReached@0x5615010a8200[Test#20]
  goto BB203
BB321   <- [86]
  lgl$-           %321.0 = CastType           d     dn %86.0
  lgl$#-          %321.1 = CheckTrueFalse     e     %321.0
  void                    Branch                   %321.1 -> BB174 (if true) | BB87 (if false)
BB322   <- [86]
  fs              %322.0 = FrameState         R     0x5615010b0240+4243: [%315.15], env=e0.3
  void                    Deopt              !v    %322.0, Typecheck@0x5615010a8200[Type#275], %86.0   !
BB319   <- [317]
  val?~- | miss   %319.0 = CastType           d     dn %317.0
  val?-           %319.1 = Force!<value>            %319.0,    <vec$->
  val?^ | miss    %319.2 = LdVar              eR    list, e0.3
  lgl$#-          %319.3 = Identical                <blt list>, %319.2   <true>
  void                    Branch                   %319.3 -> BB323 (if true) | BB324 (if false)
BB320   <- [317]
  void                    Nop                !     
  val?^ | miss    %320.1 = %317.0
  dr              %320.2 = Typecheck@0x5615010a8200[Type#190]
  goto BB203
BB203   <- [318, 320, 324, 326]
  val?^ | miss    %203.0 = Phi                      %318.1:BB318, %320.1:BB320, %324.1:BB324, %326.1:BB326
  val?^ | miss    %203.1 = %203.0
  dr              %203.2 = Phi                      %318.2:BB318, %320.2:BB320, %324.2:BB324, %326.2:BB326
  dr              %203.3 = %203.2
  fs              %203.4 = FrameState         R     0x5615010b0240+2704: [%181.1, %179.0, %184.1], env=e0.3
  void                    Deopt              !v    %203.4, %203.3, %203.1   !
BB174   <- [321]
  (cls|spec|blt)  %174.0 = LdFun              !v    .getGroupMethods, e0.3
  fs              %174.1 = FrameState         R     0x5615010b0240+4377: [%174.0], env=e0.3
  void                    Deopt              !v    %174.1, DeadCall@0x5615010a8200[Call#95], %174.0   !
BB87   <- [321]
  (cls|spec|blt)  %87.0 = LdFun              !v    rep, <0x5614f88bb9b0>, e0.3
  prom-           %87.1 = MkArg                    unboundValue, .findInheritedMethods[0x5614fbe03240]_p30, e0.3
  val?            %87.2 = Call               !v    %87.0(false, %87.1) e0.3   <lgl->
  void                    StVar              lW    fromGroup, %87.2, e0.3
  val?^ | miss    %87.4 = LdVar              eR    .duplicateClassesExist, e0.3
  lgl$#-          %87.5 = Identical                %87.4, function(on) <(rir::DispatchTable*)0x5614fcb6d|...
  void                    Branch                   %87.5 -> BB327 (if true) | BB328 (if false)
BB323   <- [319]
  val?^ | miss    %323.0 = LdVar              eR    allLabels, e0.3
  lgl$#-          %323.1 = IsType                   %323.0 isA val?~- | miss
  void                    Branch                   %323.1 -> BB325 (if true) | BB326 (if false)
BB324   <- [319]
  void                    Nop                !     
  lgl$#-          %324.1 = %319.3
  dr              %324.2 = DeadBranchReached@0x5615010a8200[Test#21]
  goto BB203
BB327   <- [87]
  val?            %327.0 = StaticCall         !v    .duplicateClassesExist[0x561504f830d0]() e0.3   <lgl$->
  lgl$#-          %327.1 = IsType                   %327.0 isA lgl$-
  void                    Branch                   %327.1 -> BB329 (if true) | BB330 (if false)
BB328   <- [87]
  fs              %328.0 = FrameState         R     0x5615010b0240+4367: [], env=e0.3
  void                    Deopt              !v    %328.0, CallTarget@0x5615010a8200[Call#108], %87.4   !
BB325   <- [323]
  val?~- | miss   %325.0 = CastType           d     dn %323.0
  val?-           %325.1 = Force!<value>            %325.0,    <str->
  val+            %325.2 = CallSafeBuiltin    wed   list(%325.1)    <vec$->
  val+            %325.3 = CallSafeBuiltin    wed   c(%319.1, %325.2)    <vec->
  void                    StVar              lW    supersList, %325.3, e0.3
  lgl$#-          %325.5 = Neq                d     %179.0, %184.1, elided
  void                    Branch                   %325.5 -> BB206 (if true) | BB205 (if false)
BB326   <- [323]
  void                    Nop                !     
  val?^ | miss    %326.1 = %323.0
  dr              %326.2 = Typecheck@0x5615010a8200[Type#192]
  goto BB203
BB329   <- [327]
  lgl$-           %329.0 = CastType           d     dn %327.0
  lgl$#-          %329.1 = CheckTrueFalse     e     %329.0
  void                    Branch                   %329.1 -> BB173 (if true) | BB92 (if false)
BB330   <- [327]
  void                    Nop                !     
  val?            %330.1 = %327.0
  dr              %330.2 = Typecheck@0x5615010a8200[Type#304]
  goto BB90
BB206   <- [325]
  void                    StVar              lW    i, %184.1, e0.3
  int$#-          %206.1 = Add                d     %184.1, %181.1, elided
  (cls|spec|blt)  %206.2 = LdFun              !v    getClass, e0.3
  fs              %206.3 = FrameState         R     0x5615010b0240+2939: [%181.1, %179.0, %206.1, %206.2], env=e0.3
  void                    Deopt              !v    %206.3, DeadCall@0x5615010a8200[Call#67], %206.2   !
BB205   <- [325]
  void                    Nop                !     
  goto BB183
BB173   <- [329]
  (cls|spec|blt)  %173.0 = LdFun              !v    integer, e0.3
  fs              %173.1 = FrameState         R     0x5615010b0240+4848: [%173.0], env=e0.3
  void                    Deopt              !v    %173.1, DeadCall@0x5615010a8200[Call#109], %173.0   !
BB92   <- [329]
  val?^ | miss    %92.0 = LdVar              eR    doExcluded, e0.3
  lgl$#-          %92.1 = IsType                   %92.0 isA lgl$-
  void                    Branch                   %92.1 -> BB331 (if true) | BB332 (if false)
BB90   <- [330, 332, 334, 338, 340, 344, 346]
  val?^ | miss    %90.0 = Phi                      %330.1:BB330, %332.1:BB332, %334.1:BB334, %338.1:BB338, %340.1:BB340, %344.1:BB344, %346.1:BB346
  val?^ | miss    %90.1 = %90.0
  dr              %90.2 = Phi                      %330.2:BB330, %332.2:BB332, %334.2:BB334, %338.2:BB338, %340.2:BB340, %344.2:BB344, %346.2:BB346
  dr              %90.3 = %90.2
  fs              %90.4 = FrameState         R     0x5615010b0240+4827: [%327.0], env=e0.3
  void                    Deopt              !v    %90.4, %90.3, %90.1   !
BB331   <- [92]
  lgl$-           %331.0 = CastType           d     dn %92.0
  lgl$#-          %331.1 = CheckTrueFalse     e     %331.0
  void                    Branch                   %331.1 -> BB166 (if true) | BB93 (if false)
BB332   <- [92]
  void                    Nop                !     
  val?^ | miss    %332.1 = %92.0
  dr              %332.2 = Typecheck@0x5615010a8200[Type#363]
  goto BB90
BB166   <- [331]
  val?^ | miss    %166.0 = LdVar              eR    methods, e0.3
  lgl$#-          %166.1 = IsType                   %166.0 isA val?~+ | miss
  void                    Branch                   %166.1 -> BB333 (if true) | BB334 (if false)
BB93   <- [331]
  void                    Nop                !     
  goto BB94
BB333   <- [166]
  val?~+ | miss   %333.0 = CastType           d     dn %166.0
  val?+           %333.1 = Force!<value>            %333.0,    <vec+>
  lgl$#-          %333.2 = IsType                   %333.1 isA val+   <true>
  void                    Branch                   %333.2 -> BB337 (if true) | BB338 (if false)
BB334   <- [166]
  void                    Nop                !     
  val?^ | miss    %334.1 = %166.0
  dr              %334.2 = Typecheck@0x5615010a8200[Type#376]
  goto BB90
BB94   <- [93, 353]
  val?^ | miss    %94.0 = LdVar              eR    length, e0.3
  lgl$#-          %94.1 = Identical                <blt length>, %94.0   <true>
  void                    Branch                   %94.1 -> BB335 (if true) | BB336 (if false)
BB337   <- [333]
  val?^ | miss    %337.0 = LdVar              eR    is.na, e0.3
  lgl$#-          %337.1 = Identical                <blt is.na>, %337.0   <true>
  void                    Branch                   %337.1 -> BB339 (if true) | BB340 (if false)
BB338   <- [333]
  void                    Nop                !     
  lgl$#-          %338.1 = %333.2
  dr              %338.2 = DeadBranchReached@0x5615010a8200[Test#48]
  goto BB90
BB335   <- [94]
  val?^ | miss    %335.0 = LdVar              eR    methods, e0.3
  lgl$#-          %335.1 = IsType                   %335.0 isA val?~+ | miss
  void                    Branch                   %335.1 -> BB341 (if true) | BB342 (if false)
BB336   <- [94]
  void                    Nop                !     
  lgl$#-          %336.1 = %94.1
  dr              %336.2 = DeadBranchReached@0x5615010a8200[Test#50]
  goto BB95
BB339   <- [337]
  val?^ | miss    %339.0 = LdVar              eR    match, e0.3
  lgl$#-          %339.1 = Identical                %339.0, function(x, table, nomatch=NA, incomparables=N|...
  void                    Branch                   %339.1 -> BB343 (if true) | BB344 (if false)
BB340   <- [337]
  void                    Nop                !     
  lgl$#-          %340.1 = %337.1
  dr              %340.2 = DeadBranchReached@0x5615010a8200[Test#49]
  goto BB90
BB341   <- [335]
  val?~+ | miss   %341.0 = CastType           d     dn %335.0
  val?+           %341.1 = Force!<value>            %341.0,    <vec+>
  (int|real)$-    %341.2 = CallSafeBuiltin    wed   length(%341.1)    <int$->
  lgl$#-          %341.3 = IsType                   %341.2 isA int$-
  void                    Branch                   %341.3 -> BB349 (if true) | BB350 (if false)
BB342   <- [335]
  void                    Nop                !     
  val?^ | miss    %342.1 = %335.0
  dr              %342.2 = Typecheck@0x5615010a8200[Type#384]
  goto BB95
BB95   <- [336, 342]
  val?^ | miss    %95.0 = Phi                      %336.1:BB336, %342.1:BB342
  val?^ | miss    %95.1 = %95.0
  dr              %95.2 = Phi                      %336.2:BB336, %342.2:BB342
  dr              %95.3 = %95.2
  fs              %95.4 = FrameState         R     0x5615010b0240+6458: [], env=e0.3
  void                    Deopt              !v    %95.4, %95.3, %95.1   !
BB343   <- [339]
  val?^ | miss    %343.0 = LdVar              eR    names, e0.3
  lgl$#-          %343.1 = Identical                %343.0, <blt names>
  void                    Branch                   %343.1 -> BB345 (if true) | BB346 (if false)
BB344   <- [339]
  void                    Nop                !     
  val?^ | miss    %344.1 = %339.0
  dr              %344.2 = CallTarget@0x5615010a8200[Call#129]
  goto BB90
BB349   <- [341]
  int$-           %349.0 = CastType           d     dn %341.2
  lgl$-           %349.1 = Gt                 d     %349.0, 1L, elided   <lgl$->
  lgl$#-          %349.2 = CheckTrueFalse     e     %349.1
  void                    Branch                   %349.2 -> BB153 (if true) | BB99 (if false)
BB350   <- [341]
  void                    Nop                !     
  (int|real)$-    %350.1 = %341.2
  dr              %350.2 = Typecheck@0x5615010a8200[Type#385]
  goto BB97
BB345   <- [343]
  val+            %345.0 = CallSafeBuiltin    wed   names(%333.1)    <str->
  val?^ | miss    %345.1 = LdVar              eR    as.character, e0.3
  lgl$#-          %345.2 = Identical                %345.1, <blt as.character>
  void                    Branch                   %345.2 -> BB347 (if true) | BB348 (if false)
BB346   <- [343]
  void                    Nop                !     
  val?^ | miss    %346.1 = %343.0
  dr              %346.2 = CallTarget@0x5615010a8200[Call#130]
  goto BB90
BB153   <- [349]
  val?^ | miss    %153.0 = LdVar              eR    paste, e0.3
  lgl$#-          %153.1 = Identical                %153.0, function(..., sep=" ", collapse=NULL, recycle0|...
  void                    Branch                   %153.1 -> BB355 (if true) | BB356 (if false)
BB99   <- [349]
  void                    Nop                !     
  goto BB100
BB97   <- [350, 356]
  val?^ | miss    %97.0 = Phi                      %350.1:BB350, %356.1:BB356
  val?^ | miss    %97.1 = %97.0
  dr              %97.2 = Phi                      %350.2:BB350, %356.2:BB356
  dr              %97.3 = %97.2
  fs              %97.4 = FrameState         R     0x5615010b0240+6549: [%341.2], env=e0.3
  void                    Deopt              !v    %97.4, %97.3, %97.1   !
BB347   <- [345]
  val?^ | miss    %347.0 = LdVar              eR    excluded, e0.3
  val?            %347.1 = Force!<wrapped>    !v    %347.0, e0.3   <str$->
  val?            %347.2 = CallBuiltin        !v    as.character(%347.1) e0.3   <str$->
  lgl$#-          %347.3 = IsType                   %347.2 isA val?+
  void                    Branch                   %347.3 -> BB351 (if true) | BB352 (if false)
BB348   <- [345]
  fs              %348.0 = FrameState         R     0x5615010b0240+6415: [%333.1, <blt is.na>], env=e0.3
  prom-           %348.1 = MkArg                    unboundValue, .findInheritedMethods[0x5614fbe03240]_p64, e0.3
  val?^           %348.2 = CastType                 up %348.1
  prom-           %348.3 = MkArg                    unboundValue, .findInheritedMethods[0x5614fbe03240]_p62, e0.3
  val?^           %348.4 = CastType                 up %348.3
  env             e348.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%348.2, x=%348.4, parent=R_BaseNamespace, context 0
  fs              %348.6 = FrameState         R     0x5614f90bbd40+9: [], env=e348.5, next=%348.0
  fs              %348.7 = FrameState         R     0x5614fc0a1930+32(pr): [%345.0], env=e0.3, next=%348.6
  void                    Deopt              !v    %348.7, CallTarget@0x5615010a8200[Call#131], %345.1   !
BB355   <- [153]
  prom-           %355.0 = MkArg                    unboundValue, .findInheritedMethods[0x5614fbe03240]_p57, e0.3
  dots-           %355.1 = DotsList           l     %355.0
  val?^ | miss    %355.2 = CastType                 up %355.0
  env             e355.3 = MkEnv              l     ...=%355.1, sep(miss)=" ", collapse="#", recycle0(miss)=false, parent=R_BaseNamespace, context 0
  val?            %355.4 = Force!             !vL   %355.2, e355.3
  val+            %355.5 = CallSafeBuiltin    wed   list(%355.4)    <vec->
  val+            %355.6 = CallSafeBuiltin    wed   paste(%355.5, " ", "#", false)    <str$->
  void                    StVar              lW    defaultLabel, %355.6, e0.3
  val?^ | miss    %355.8 = LdVar              eR    match, e0.3
  lgl$#-          %355.9 = Identical                %355.8, function(x, table, nomatch=NA, incomparables=N|...
  void                    Branch                   %355.9 -> BB357 (if true) | BB358 (if false)
BB356   <- [153]
  void                    Nop                !     
  val?^ | miss    %356.1 = %153.0
  dr              %356.2 = CallTarget@0x5615010a8200[Call#133]
  goto BB97
BB100   <- [99, 162, 381]
  val?^ | miss    %100.0 = LdVar              eR    length, e0.3
  lgl$#-          %100.1 = Identical                <blt length>, %100.0   <true>
  void                    Branch                   %100.1 -> BB363 (if true) | BB364 (if false)
BB351   <- [347]
  val?+           %351.0 = CastType           d     dn %347.2   <str$->
  val+            %351.1 = CallSafeBuiltin    wed   match(%345.0, %351.0, NA, nil)    <int->
  lgl$#-          %351.2 = IsType                   %351.1 isA int-
  void                    Branch                   %351.2 -> BB353 (if true) | BB354 (if false)
BB352   <- [347]
  fs              %352.0 = FrameState         R     0x5615010b0240+6415: [%333.1, <blt is.na>], env=e0.3
  prom-           %352.1 = MkArg                    unboundValue, .findInheritedMethods[0x5614fbe03240]_p64, e0.3
  val?^           %352.2 = CastType                 up %352.1
  prom-           %352.3 = MkArg                    %345.0, .findInheritedMethods[0x5614fbe03240]_p62 (!refl), e0.3
  val?~           %352.4 = CastType                 up %352.3
  env             e352.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%352.2, x=%352.4, parent=R_BaseNamespace, context 0
  fs              %352.6 = FrameState         R     0x5614f90bbd40+23: [%345.0], env=e352.5, next=%352.0
  fs              %352.7 = FrameState         R     0x5614fb748d20+32(pr): [%347.2], env=e0.3, next=%352.6
  void                    Deopt              !v    %352.7, Typecheck@0x5614f910ecb0[Type#1], %347.2   !
BB357   <- [355]
  val?^ | miss    %357.0 = LdVar              eR    names, e0.3
  lgl$#-          %357.1 = Identical                %357.0, <blt names>
  void                    Branch                   %357.1 -> BB359 (if true) | BB360 (if false)
BB358   <- [355]
  void                    Nop                !     
  val?^ | miss    %358.1 = %355.8
  dr              %358.2 = CallTarget@0x5615010a8200[Call#135]
  goto BB154
BB363   <- [100]
  val?^ | miss    %363.0 = LdVar              eR    methods, e0.3
  lgl$#-          %363.1 = IsType                   %363.0 isA val?~+ | miss
  void                    Branch                   %363.1 -> BB365 (if true) | BB366 (if false)
BB364   <- [100]
  void                    Nop                !     
  lgl$#-          %364.1 = %100.1
  dr              %364.2 = DeadBranchReached@0x5615010a8200[Test#53]
  goto BB101
BB353   <- [351]
  int-            %353.0 = CastType           d     dn %351.1
  lgl-            %353.1 = CallSafeBuiltin    wed   is.na(%353.0)    <lgl->
  val?            %353.2 = Extract1_1D        wed   %333.1, %353.1, elided   <vec+>
  void                    StVar              lW    methods, %353.2, e0.3
  goto BB94
BB354   <- [351]
  fs              %354.0 = FrameState         R     0x5615010b0240+6415: [%333.1, <blt is.na>], env=e0.3
  prom-           %354.1 = MkArg                    %351.0, .findInheritedMethods[0x5614fbe03240]_p64 (!refl), e0.3
  val?~           %354.2 = CastType                 up %354.1
  prom-           %354.3 = MkArg                    %345.0, .findInheritedMethods[0x5614fbe03240]_p62 (!refl), e0.3
  val?~           %354.4 = CastType                 up %354.3
  env             e354.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%354.2, x=%354.4, parent=R_BaseNamespace, context 0
  fs              %354.6 = FrameState         R     0x5614f90bbd40+69: [%351.1], env=e354.5, next=%354.0
  void                    Deopt              !v    %354.6, Typecheck@0x5615010a8200[Type#380], %351.1   !
BB359   <- [357]
  val?^ | miss    %359.0 = LdVar              eR    methods, e0.3
  lgl$#-          %359.1 = IsType                   %359.0 isA val?~+ | miss
  void                    Branch                   %359.1 -> BB361 (if true) | BB362 (if false)
BB360   <- [357]
  void                    Nop                !     
  val?^ | miss    %360.1 = %357.0
  dr              %360.2 = CallTarget@0x5615010a8200[Call#136]
  goto BB154
BB154   <- [358, 360, 362]
  val?^ | miss    %154.0 = Phi                      %358.1:BB358, %360.1:BB360, %362.1:BB362
  val?^ | miss    %154.1 = %154.0
  dr              %154.2 = Phi                      %358.2:BB358, %360.2:BB360, %362.2:BB362
  dr              %154.3 = %154.2
  fs              %154.4 = FrameState         R     0x5615010b0240+6636: [], env=e0.3
  void                    Deopt              !v    %154.4, %154.3, %154.1   !
BB365   <- [363]
  val?~+ | miss   %365.0 = CastType           d     dn %363.0
  val?+           %365.1 = Force!<value>            %365.0,    <vec+>
  (int|real)$-    %365.2 = CallSafeBuiltin    wed   length(%365.1)    <int$->
  lgl$#-          %365.3 = IsType                   %365.2 isA int$-
  void                    Branch                   %365.3 -> BB369 (if true) | BB370 (if false)
BB366   <- [363]
  void                    Nop                !     
  val?^ | miss    %366.1 = %363.0
  dr              %366.2 = Typecheck@0x5615010a8200[Type#405]
  goto BB101
BB101   <- [364, 366]
  val?^ | miss    %101.0 = Phi                      %364.1:BB364, %366.1:BB366
  val?^ | miss    %101.1 = %101.0
  dr              %101.2 = Phi                      %364.2:BB364, %366.2:BB366
  dr              %101.3 = %101.2
  fs              %101.4 = FrameState         R     0x5615010b0240+6881: [], env=e0.3
  void                    Deopt              !v    %101.4, %101.3, %101.1   !
BB361   <- [359]
  val?~+ | miss   %361.0 = CastType           d     dn %359.0
  val?+           %361.1 = Force!<value>            %361.0,    <vec+>
  val+            %361.2 = CallSafeBuiltin    wed   names(%361.1)    <str->
  lgl$#-          %361.3 = IsType                   %355.6 isA val?-
  void                    Branch                   %361.3 -> BB367 (if true) | BB368 (if false)
BB362   <- [359]
  void                    Nop                !     
  val?^ | miss    %362.1 = %359.0
  dr              %362.2 = Typecheck@0x5615010a8200[Type#391]
  goto BB154
BB369   <- [365]
  int$-           %369.0 = CastType           d     dn %365.2
  lgl$-           %369.1 = Gt                 d     %369.0, 1L, elided   <lgl$->
  lgl$#-          %369.2 = CheckTrueFalse     e     %369.1
  void                    Branch                   %369.2 -> BB146 (if true) | BB105 (if false)
BB370   <- [365]
  fs              %370.0 = FrameState         R     0x5615010b0240+6972: [%365.2], env=e0.3
  void                    Deopt              !v    %370.0, Typecheck@0x5615010a8200[Type#406], %365.2   !
BB367   <- [361]
  val-            %367.0 = CastType           d     dn %355.6   <str$->
  val+            %367.1 = CallSafeBuiltin    wed   match(%367.0, %361.2, 0L, nil)    <int$->
  lgl$#-          %367.2 = IsType                   %367.1 isA int$-
  void                    Branch                   %367.2 -> BB371 (if true) | BB372 (if false)
BB368   <- [361]
  fs              %368.0 = FrameState         R     0x5615010b0240+6678: [], env=e0.3
  prom-           %368.1 = MkArg                    unboundValue, .findInheritedMethods[0x5614fbe03240]_p60, e0.3
  val?^           %368.2 = CastType                 up %368.1
  prom-           %368.3 = MkArg                    unboundValue, .findInheritedMethods[0x5614fbe03240]_p59 (!refl), e0.3
  val?^           %368.4 = CastType                 up %368.3
  env             e368.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch=0L, table=%368.2, x=%368.4, parent=R_BaseNamespace, context 0
  fs              %368.6 = FrameState         R     0x5614f90bbd40+23: [%355.6], env=e368.5, next=%368.0
  fs              %368.7 = FrameState         R     0x5614fe3e5470+32(pr): [%361.2], env=e0.3, next=%368.6
  void                    Deopt              !v    %368.7, Typecheck@0x5615010a8200[Type#389], %355.6   !
BB146   <- [369]
  val?^ | miss    %146.0 = LdVar              eR    verbose, e0.3
  val?            %146.1 = Force!<value>      !v    %146.0, e0.3   <lgl$->
  lgl$#-          %146.2 = CheckTrueFalse     we    %146.1
  void                    Branch                   %146.2 -> BB152 (if true) | BB147 (if false)
BB105   <- [369]
  void                    Nop                !     
  goto BB106
BB371   <- [367]
  int$-           %371.0 = CastType           d     dn %367.1
  void                    StVar              lW    i, %371.0, e0.3
  lgl$-           %371.2 = Gt                 d     %371.0, 0L, elided   <lgl$->
  lgl$#-          %371.3 = CheckTrueFalse     e     %371.2
  void                    Branch                   %371.3 -> BB163 (if true) | BB162 (if false)
BB372   <- [367]
  prom-           %372.0 = MkArg                    %361.2, .findInheritedMethods[0x5614fbe03240]_p60 (!refl), e0.3
  val?~           %372.1 = CastType                 up %372.0
  fs              %372.2 = FrameState         R     0x5615010b0240+6678: [], env=e0.3
  prom-           %372.3 = MkArg                    unboundValue, .findInheritedMethods[0x5614fbe03240]_p59 (!refl), e0.3
  val?^           %372.4 = CastType                 up %372.3
  env             e372.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch=0L, table=%372.1, x=%372.4, parent=R_BaseNamespace, context 0
  fs              %372.6 = FrameState         R     0x5614f90bbd40+69: [%367.1], env=e372.5, next=%372.2
  void                    Deopt              !v    %372.6, Typecheck@0x5615010a8200[Type#393], %367.1   !
BB152   <- [146]
  (cls|spec|blt)  %152.0 = LdFun              !v    cat, e0.3
  fs              %152.1 = FrameState         R     0x5615010b0240+7030: [%152.0], env=e0.3
  void                    Deopt              !v    %152.1, DeadCall@0x5615010a8200[Call#138], %152.0   !
BB147   <- [146]
  (cls|spec|blt)  %147.0 = LdFun              !v    .getBestMethods, <0x56150540bb68>, e0.3
  prom-           %147.1 = MkArg                    unboundValue, .findInheritedMethods[0x5614fbe03240]_p53, e0.3
  prom-           %147.2 = MkArg                    unboundValue, .findInheritedMethods[0x5614fbe03240]_p54, e0.3
  prom-           %147.3 = MkArg                    unboundValue, .findInheritedMethods[0x5614fbe03240]_p55, e0.3
  prom-           %147.4 = MkArg                    unboundValue, .findInheritedMethods[0x5614fbe03240]_p56, e0.3
  val?            %147.5 = NamedCall          !v    %147.0(%147.1, %147.2, %147.3, verbose=%147.4) e0.3   <int$->
  lgl$#-          %147.6 = IsType                   %147.5 isA int$-
  void                    Branch                   %147.6 -> BB375 (if true) | BB376 (if false)
BB106   <- [105, 393]
  val?^ | miss    %106.0 = LdVar              eR    simpleOnly, e0.3
  val?            %106.1 = Force!<wrapped>    !v    %106.0, e0.3   <lgl$->
  lgl$-           %106.2 = AsLogical          e     %106.1
  lgl$#-          %106.3 = Identical                %106.2, false
  void                    Branch                   %106.3 -> BB145 (if true) | BB109 (if false)
BB163   <- [371]
  lgl$#-          %163.0 = IsType                   %361.1 isA val+   <true>
  void                    Branch                   %163.0 -> BB373 (if true) | BB374 (if false)
BB162   <- [371]
  void                    Nop                !     
  goto BB100
BB375   <- [147]
  int$-           %375.0 = CastType           d     dn %147.5
  void                    StVar              lW    select, %375.0, e0.3
  val?^ | miss    %375.2 = LdVar              eR    length, e0.3
  lgl$#-          %375.3 = Identical                <blt length>, %375.2   <true>
  void                    Branch                   %375.3 -> BB377 (if true) | BB378 (if false)
BB376   <- [147]
  fs              %376.0 = FrameState         R     0x5615010b0240+7131: [%147.5], env=e0.3
  void                    Deopt              !v    %376.0, Typecheck@0x5615010a8200[Type#415], %147.5   !
BB145   <- [106]
  void                    Nop                !     
  lgl$-           %145.1 = %106.2
  goto BB112
BB109   <- [106]
  val?^ | miss    %109.0 = LdVar              eR    length, e0.3
  lgl$#-          %109.1 = Identical                <blt length>, %109.0   <true>
  void                    Branch                   %109.1 -> BB389 (if true) | BB390 (if false)
BB373   <- [163]
  int$-           %373.0 = Minus              d     %371.0, elided
  val?            %373.1 = Extract1_1D        wed   %361.1, %373.0, elided   <vec+>
  void                    StVar              lW    methods, %373.1, e0.3
  val?^ | miss    %373.3 = LdVar              eR    fromGroup, e0.3
  lgl$#-          %373.4 = IsType                   %373.3 isA lgl-
  void                    Branch                   %373.4 -> BB381 (if true) | BB382 (if false)
BB374   <- [163]
  fs              %374.0 = FrameState         R     0x5615010b0240+6692: [], env=e0.3
  void                    Deopt              !v    %374.0, DeadBranchReached@0x5615010a8200[Test#51], %163.0   !
BB377   <- [375]
  val?^ | miss    %377.0 = LdVar              eR    methods, e0.3
  lgl$#-          %377.1 = IsType                   %377.0 isA val?~+ | miss
  void                    Branch                   %377.1 -> BB379 (if true) | BB380 (if false)
BB378   <- [375]
  void                    Nop                !     
  lgl$#-          %378.1 = %375.3
  dr              %378.2 = DeadBranchReached@0x5615010a8200[Test#54]
  goto BB150
BB112   <- [145, 395]
  lgl$-           %112.0 = Phi                      %395.4:BB395, %145.1:BB145
  lgl$-           %112.1 = %112.0
  lgl$#-          %112.2 = CheckTrueFalse     e     %112.1
  void                    Branch                   %112.2 -> BB144 (if true) | BB115 (if false)
BB389   <- [109]
  val?^ | miss    %389.0 = LdVar              eR    methods, e0.3
  lgl$#-          %389.1 = IsType                   %389.0 isA val?~+ | miss
  void                    Branch                   %389.1 -> BB391 (if true) | BB392 (if false)
BB390   <- [109]
  void                    Nop                !     
  lgl$#-          %390.1 = %109.1
  dr              %390.2 = DeadBranchReached@0x5615010a8200[Test#57]
  goto BB107
BB381   <- [373]
  lgl-            %381.0 = CastType           d     dn %373.3
  lgl-            %381.1 = Extract1_1D        wed   %381.0, %373.0, elided   <lgl->
  void                    StVar              lW    fromGroup, %381.1, e0.3
  goto BB100
BB382   <- [373]
  fs              %382.0 = FrameState         R     0x5615010b0240+6805: [], env=e0.3
  void                    Deopt              !v    %382.0, Typecheck@0x5615010a8200[Type#400], %373.3   !
BB379   <- [377]
  val?~+ | miss   %379.0 = CastType           d     dn %377.0
  val?+           %379.1 = Force!<value>            %379.0,    <vec+>
  lgl$#-          %379.2 = IsType                   %379.1 isA val+   <true>
  void                    Branch                   %379.2 -> BB393 (if true) | BB394 (if false)
BB380   <- [377]
  void                    Nop                !     
  val?^ | miss    %380.1 = %377.0
  dr              %380.2 = Typecheck@0x5615010a8200[Type#446]
  goto BB150
BB150   <- [378, 380, 394]
  val?^ | miss    %150.0 = Phi                      %378.1:BB378, %380.1:BB380, %394.1:BB394
  val?^ | miss    %150.1 = %150.0
  dr              %150.2 = Phi                      %378.2:BB378, %380.2:BB380, %394.2:BB394
  dr              %150.3 = %150.2
  fs              %150.4 = FrameState         R     0x5615010b0240+7145: [], env=e0.3
  void                    Deopt              !v    %150.4, %150.3, %150.1   !
BB144   <- [112]
  (cls|spec|blt)  %144.0 = LdFun              !v    Recall, e0.3
  fs              %144.1 = FrameState         R     0x5615010b0240+7866: [%144.0], env=e0.3
  void                    Deopt              !v    %144.1, DeadCall@0x5615010a8200[Call#154], %144.0   !
BB115   <- [112]
  val?^ | miss    %115.0 = LdVar              eR    length, e0.3
  lgl$#-          %115.1 = Identical                <blt length>, %115.0   <true>
  void                    Branch                   %115.1 -> BB383 (if true) | BB384 (if false)
BB391   <- [389]
  val?~+ | miss   %391.0 = CastType           d     dn %389.0
  val?+           %391.1 = Force!<value>            %391.0,    <vec$+>
  (int|real)$-    %391.2 = CallSafeBuiltin    wed   length(%391.1)    <int$->
  lgl$#-          %391.3 = IsType                   %391.2 isA int$-
  void                    Branch                   %391.3 -> BB395 (if true) | BB396 (if false)
BB392   <- [389]
  void                    Nop                !     
  val?^ | miss    %392.1 = %389.0
  dr              %392.2 = Typecheck@0x5615010a8200[Type#452]
  goto BB107
BB107   <- [390, 392]
  val?^ | miss    %107.0 = Phi                      %390.1:BB390, %392.1:BB392
  val?^ | miss    %107.1 = %107.0
  dr              %107.2 = Phi                      %390.2:BB390, %392.2:BB392
  dr              %107.3 = %107.2
  fs              %107.4 = FrameState         R     0x5615010b0240+7728: [%106.1], env=e0.3
  void                    Deopt              !v    %107.4, %107.3, %107.1   !
BB393   <- [379]
  val?            %393.0 = Extract1_1D        wed   %379.1, %375.0, elided   <vec$+>
  void                    StVar              lW    methods, %393.0, e0.3
  goto BB106
BB394   <- [379]
  void                    Nop                !     
  lgl$#-          %394.1 = %379.2
  dr              %394.2 = DeadBranchReached@0x5615010a8200[Test#56]
  goto BB150
BB383   <- [115]
  val?^ | miss    %383.0 = LdVar              eR    methods, e0.3
  lgl$#-          %383.1 = IsType                   %383.0 isA val?~+ | miss
  void                    Branch                   %383.1 -> BB385 (if true) | BB386 (if false)
BB384   <- [115]
  void                    Nop                !     
  lgl$#-          %384.1 = %115.1
  dr              %384.2 = DeadBranchReached@0x5615010a8200[Test#59]
  goto BB113
BB395   <- [391]
  int$-           %395.0 = CastType           d     dn %391.2
  lgl$-           %395.1 = Eq                 d     %395.0, 0L, elided   <lgl$->
  lgl$-           %395.2 = AsLogical                %395.1
  lgl$-           %395.3 = LAnd                     %106.2, %395.2
  lgl$-           %395.4 = %395.3
  goto BB112
BB396   <- [391]
  fs              %396.0 = FrameState         R     0x5615010b0240+7831: [%106.2, %391.2], env=e0.3
  void                    Deopt              !v    %396.0, Typecheck@0x5615010a8200[Type#453], %391.2   !
BB385   <- [383]
  val?~+ | miss   %385.0 = CastType           d     dn %383.0
  val?+           %385.1 = Force!<value>            %385.0,    <vec$+>
  (int|real)$-    %385.2 = CallSafeBuiltin    wed   length(%385.1)    <int$->
  lgl$#-          %385.3 = IsType                   %385.2 isA int$-
  void                    Branch                   %385.3 -> BB387 (if true) | BB388 (if false)
BB386   <- [383]
  void                    Nop                !     
  val?^ | miss    %386.1 = %383.0
  dr              %386.2 = Typecheck@0x5615010a8200[Type#474]
  goto BB113
BB113   <- [384, 386]
  val?^ | miss    %113.0 = Phi                      %384.1:BB384, %386.1:BB386
  val?^ | miss    %113.1 = %113.0
  dr              %113.2 = Phi                      %384.2:BB384, %386.2:BB386
  dr              %113.3 = %113.2
  fs              %113.4 = FrameState         R     0x5615010b0240+7850: [%112.1], env=e0.3
  void                    Deopt              !v    %113.4, %113.3, %113.1   !
BB387   <- [385]
  int$-           %387.0 = CastType           d     dn %385.2
  lgl$#-          %387.1 = CheckTrueFalse     e     %387.0
  void                    Branch                   %387.1 -> BB122 (if true) | BB118 (if false)
BB388   <- [385]
  void                    Nop                !     
  (int|real)$-    %388.1 = %385.2
  dr              %388.2 = Typecheck@0x5615010a8200[Type#475]
  goto BB116
BB122   <- [387]
  val?^ | miss    %122.0 = LdVar              eR    .sigLabel, e0.3
  lgl$#-          %122.1 = Identical                %122.0, function(sig) <(rir::DispatchTable*)0x5614fba6|...
  void                    Branch                   %122.1 -> BB397 (if true) | BB398 (if false)
BB118   <- [387]
  void                    Nop                !     
  goto BB119
BB116   <- [388, 398, 400]
  val?^ | miss    %116.0 = Phi                      %388.1:BB388, %398.1:BB398, %400.1:BB400
  val?^ | miss    %116.1 = %116.0
  dr              %116.2 = Phi                      %388.2:BB388, %398.2:BB398, %400.2:BB400
  dr              %116.3 = %116.2
  fs              %116.4 = FrameState         R     0x5615010b0240+8203: [%385.2], env=e0.3
  void                    Deopt              !v    %116.4, %116.3, %116.1   !
BB397   <- [122]
  prom-           %397.0 = MkArg                    unboundValue, .findInheritedMethods[0x5614fbe03240]_p32, e0.3
  val?^           %397.1 = CastType                 up %397.0
  val?^ | miss    %397.2 = LdVar              eR    paste, <env 0x5614f8eae378>
  lgl$#-          %397.3 = Identical                %397.2, function(..., sep=" ", collapse=NULL, recycle0|...
  void                    Branch                   %397.3 -> BB399 (if true) | BB400 (if false)
BB398   <- [122]
  void                    Nop                !     
  val?^ | miss    %398.1 = %122.0
  dr              %398.2 = CallTarget@0x5615010a8200[Call#161]
  goto BB116
BB119   <- [118, 131, 413]
  val?^ | miss    %119.0 = LdVar              eR    methods, e0.3
  lgl$#-          %119.1 = IsType                   %119.0 isA val?~+ | miss
  void                    Branch                   %119.1 -> BB407 (if true) | BB408 (if false)
BB399   <- [397]
  env             e399.0 = MkEnv              l     sig=%397.1, parent=<env 0x5614f8eae378>, context 0
  prom-           %399.1 = MkArg                    unboundValue, .findInheritedMethods[0x5614fbe03240]_p113, e399.0
  dots-           %399.2 = DotsList           l     %399.1
  val?^ | miss    %399.3 = CastType                 up %399.1
  env             e399.4 = MkEnv              l     ...=%399.2, sep(miss)=" ", collapse="#", recycle0(miss)=false, parent=R_BaseNamespace, context -1
  val?            %399.5 = Force!             !vL   %399.3, e399.4
  val+            %399.6 = CallSafeBuiltin    wed   list(%399.5)    <vec->
  val+            %399.7 = CallSafeBuiltin    wed   paste(%399.6, " ", "#", false)    <str$->
  void                    StVar              lW    tlabel, %399.7, e0.3
  val?^ | miss    %399.9 = LdVar              eR    methods, e0.3
  lgl$#-          %399.10 = IsType                   %399.9 isA val?~+ | miss
  void                    Branch                   %399.10 -> BB401 (if true) | BB402 (if false)
BB400   <- [397]
  void                    Nop                !     
  val?^ | miss    %400.1 = %397.2
  dr              %400.2 = CallTarget@0x5614fbdc4138[Call#0]
  goto BB116
BB407   <- [119]
  val?~+ | miss   %407.0 = CastType           d     dn %119.0
  void                    Visible            v     
  val?+           %407.2 = Force!<value>            %407.0,    <vec$+>
  void                    Return             l     %407.2
BB408   <- [119]
  fs              %408.0 = FrameState         R     0x5615010b0240+8774: [], env=e0.3
  void                    Deopt              !v    %408.0, Typecheck@0x5615010a8200[Type#509], %119.0   !
BB401   <- [399]
  val?~+ | miss   %401.0 = CastType           d     dn %399.9
  val?+           %401.1 = Force!<value>            %401.0,    <vec$+>
  lgl$#-          %401.2 = IsType                   %401.1 isA val+   <true>
  void                    Branch                   %401.2 -> BB403 (if true) | BB404 (if false)
BB402   <- [399]
  void                    Nop                !     
  val?^ | miss    %402.1 = %399.9
  dr              %402.2 = Typecheck@0x5615010a8200[Type#478]
  goto BB123
BB403   <- [401]
  val?            %403.0 = Extract2_1D        wed   %401.1, 1L, elided   <cls>
  void                    StVar              lW    m, %403.0, e0.3
  val?^ | miss    %403.2 = LdVar              eR    is, e0.3
  lgl$#-          %403.3 = Identical                %403.2, function(object, class2) <(rir::DispatchTable*|...
  void                    Branch                   %403.3 -> BB405 (if true) | BB406 (if false)
BB404   <- [401]
  void                    Nop                !     
  lgl$#-          %404.1 = %401.2
  dr              %404.2 = DeadBranchReached@0x5615010a8200[Test#60]
  goto BB123
BB123   <- [402, 404]
  val?^ | miss    %123.0 = Phi                      %402.1:BB402, %404.1:BB404
  val?^ | miss    %123.1 = %123.0
  dr              %123.2 = Phi                      %402.2:BB402, %404.2:BB404
  dr              %123.3 = %123.2
  fs              %123.4 = FrameState         R     0x5615010b0240+8265: [], env=e0.3
  void                    Deopt              !v    %123.4, %123.3, %123.1   !
BB405   <- [403]
  prom-           %405.0 = MkArg                    unboundValue, .findInheritedMethods[0x5614fbe03240]_p33 (!refl), e0.3
  val?            %405.1 = Call               !v    function(object, class2) <(rir::DispatchTable*|...(%405.0, "MethodDefinition") e0.3   <lgl$->
  lgl$#-          %405.2 = IsType                   %405.1 isA lgl$-
  void                    Branch                   %405.2 -> BB409 (if true) | BB410 (if false)
BB406   <- [403]
  fs              %406.0 = FrameState         R     0x5615010b0240+8332: [], env=e0.3
  void                    Deopt              !v    %406.0, CallTarget@0x5615010a8200[Call#162], %403.2   !
BB409   <- [405]
  lgl$-           %409.0 = CastType           d     dn %405.1
  lgl$#-          %409.1 = CheckTrueFalse     e     %409.0
  void                    Branch                   %409.1 -> BB137 (if true) | BB129 (if false)
BB410   <- [405]
  fs              %410.0 = FrameState         R     0x5615010b0240+8369: [%405.1], env=e0.3
  void                    Deopt              !v    %410.0, Typecheck@0x5615010a8200[Type#481], %405.1   !
BB137   <- [409]
  (cls|spec|blt)  %137.0 = LdFun              !v    <-, <0x5614f889bda8>, e0.3
  prom-           %137.1 = MkArg                    unboundValue, .findInheritedMethods[0x5614fbe03240]_p37, e0.3
  prom-           %137.2 = MkArg                    unboundValue, .findInheritedMethods[0x5614fbe03240]_p40, e0.3
  val?            %137.3 = Call               !v    %137.0(%137.1, %137.2) e0.3
  val?^ | miss    %137.4 = LdVar              eR    .inheritedArgsExpression, e0.3
  lgl$#-          %137.5 = Identical                %137.4, function(target, defined, body) <(rir::Dispatc|...
  void                    Branch                   %137.5 -> BB411 (if true) | BB412 (if false)
BB129   <- [409]
  void                    Nop                !     
  goto BB130
BB411   <- [137]
  prom-           %411.0 = MkArg                    unboundValue, .findInheritedMethods[0x5614fbe03240]_p45, e0.3
  prom-           %411.1 = MkArg                    unboundValue, .findInheritedMethods[0x5614fbe03240]_p48, e0.3
  prom-           %411.2 = MkArg                    unboundValue, .findInheritedMethods[0x5614fbe03240]_p51, e0.3
  val?            %411.3 = StaticCall         !v    .inheritedArgsExpression[0x561504ecbd80](%411.0, %411.1, %411.2) e0.3   <nil->
  lgl$-           %411.4 = Is                       %411.3, NULL
  void                    StVar              lW    coerce, %411.3, e0.3
  val             %411.6 = ChkMissing         e     %411.3
  lgl$-           %411.7 = Not                d     %411.4, elided
  lgl$#-          %411.8 = CheckTrueFalse     e     %411.7
  void                    Branch                   %411.8 -> BB143 (if true) | BB140 (if false)
BB412   <- [137]
  fs              %412.0 = FrameState         R     0x5615010b0240+8422: [%137.3], env=e0.3
  void                    Deopt              !v    %412.0, CallTarget@0x5615010a8200[Call#167], %137.4   !
BB130   <- [129, 415]
  val?^ | miss    %130.0 = LdVar              eR    doCache, e0.3
  val?            %130.1 = Force!<lazy>       !v    %130.0, e0.3   <lgl$->
  lgl$#-          %130.2 = CheckTrueFalse     we    %130.1
  void                    Branch                   %130.2 -> BB132 (if true) | BB131 (if false)
BB143   <- [411]
  (cls|spec|blt)  %143.0 = LdFun              !v    body<-, e0.3
  fs              %143.1 = FrameState         R     0x5615010b0240+8529: [%411.3, %143.0], env=e0.3
  void                    Deopt              !v    %143.1, DeadCall@0x5615010a8200[Call#171], %143.0   !
BB140   <- [411]
  val?^ | miss    %140.0 = LdVar              eR    m, e0.3
  val?            %140.1 = Force!<value>      !v    %140.0, e0.3   <cls>
  val?^ | miss    %140.2 = LdVar              eR    methods !upd, e0.3
  lgl$#-          %140.3 = IsType                   %140.2 isA val?~+ | miss
  void                    Branch                   %140.3 -> BB415 (if true) | BB416 (if false)
BB132   <- [130]
  val?^ | miss    %132.0 = LdVar              eR    verbose, e0.3
  val?            %132.1 = Force!<wrapped>    !v    %132.0, e0.3   <lgl$->
  lgl$#-          %132.2 = CheckTrueFalse     we    %132.1
  void                    Branch                   %132.2 -> BB136 (if true) | BB135 (if false)
BB131   <- [130]
  void                    Nop                !     
  goto BB119
BB415   <- [140]
  val?~+ | miss   %415.0 = CastType           d     dn %140.2
  val?+           %415.1 = Force!<value>            %415.0,    <vec$+>
  val?            %415.2 = Subassign2_1D      !v    %140.1, %415.1, 1L, e0.3
  void                    StVar              lW    methods, %415.2, e0.3
  goto BB130
BB416   <- [140]
  fs              %416.0 = FrameState         R     0x5615010b0240+8601: [%140.1], env=e0.3
  void                    Deopt              !v    %416.0, Typecheck@0x5615010a8200[Type#503], %140.2   !
BB136   <- [132]
  (cls|spec|blt)  %136.0 = LdFun              !v    cat, e0.3
  fs              %136.1 = FrameState         R     0x5615010b0240+8691: [%136.0], env=e0.3
  void                    Deopt              !v    %136.1, DeadCall@0x5615010a8200[Call#172], %136.0   !
BB135   <- [132]
  val?^ | miss    %135.0 = LdVar              eR    assign, e0.3
  lgl$#-          %135.1 = Identical                %135.0, function(x, value, pos=-(1), envir=as.environm|...
  void                    Branch                   %135.1 -> BB413 (if true) | BB414 (if false)
BB413   <- [135]
  prom-           %413.0 = MkArg                    unboundValue, .findInheritedMethods[0x5614fbe03240]_p34, e0.3
  prom-           %413.1 = MkArg                    unboundValue, .findInheritedMethods[0x5614fbe03240]_p35, e0.3
  prom-           %413.2 = MkArg                    unboundValue, .findInheritedMethods[0x5614fbe03240]_p36, e0.3
  val?            %413.3 = StaticCall         !v    assign[0x5614fc1612a0](%413.0, %413.1, missingArg, %413.2) { 0 1 3n } e0.3
  goto BB119
BB414   <- [135]
  fs              %414.0 = FrameState         R     0x5615010b0240+8676: [%132.2], env=e0.3
  void                    Deopt              !v    %414.0, CallTarget@0x5615010a8200[Call#173], %135.0   !
Prom 0:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     get, <0x5614f97cce78>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x5614fbe03240]_p1, e0.0
  val?            %0.3  = NamedCall          !     %0.1(".MTable", envir=%0.2) e0.0   <env->
  void                    Return             l     %0.3
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     environment, <0x5614f8c4db68>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x5614fbe03240]_p2, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <env->
  void                    Return             l     %0.3
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fdef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 4:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     .simpleInheritanceGeneric, <0x5614fe5b3310>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x5614fbe03240]_p5, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <lgl$->
  void                    Return             l     %0.3
Prom 5:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fdef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 7:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     is.environment, <0x5614f88b6e18>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x5614fbe03240]_p8, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <lgl$->
  void                    Return             l     %0.3
Prom 8:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    mtable, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <(nil|env)->
  void                    Return             l     %0.3
Prom 9:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     environment, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x5614fbe03240]_p10, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 10:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fdef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 11:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     .allowPrimitiveMethods, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x5614fbe03240]_p12, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 12:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    primMethods, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 13:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fdef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 14:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    group, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 15:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    cl1, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$+>
  void                    Return             l     %0.3
Prom 16:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 20:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    labels, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 21:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     .fillSignatures, <0x5614fe5b6ee8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x5614fbe03240]_p22, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x5614fbe03240]_p23, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <str->
  void                    Return             l     %0.4
Prom 22:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    allMethods, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 23:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     length, <0x5614f88a7a90>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x5614fbe03240]_p24, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <int$->
  void                    Return             l     %0.3
Prom 24:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    classes, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <(str|vec)>
  void                    Return             l     %0.3
Prom 25:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    allMethods, e0.0
  val?            %0.2  = Force<value>       !v    %0.1, e0.0   <str->
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <true>
  void                    Branch                   %0.3 -> BB2 (if true) | BB7 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    m, e0.0
  val?            %2.1  = Force<value>       !v    %2.0, e0.0   <int->
  lgl$#-          %2.2  = IsType                   %2.1 isA val+   <true>
  void                    Branch                   %2.2 -> BB6 (if true) | BB3 (if false)
BB7   <- [0]
  prom-           %7.0  = MkArg                    unboundValue, .findInheritedMethods[0x5614fbe03240]_p27, e0.0
  prom-           %7.1  = %7.0
  goto BB5
BB6   <- [2]
  val?^ | miss    %6.0  = LdVar              eR    found, e0.0
  val?            %6.1  = Force<value>       !v    %6.0, e0.0   <lgl->
  val?            %6.2  = %6.1
  goto BB4
BB3   <- [2]
  prom-           %3.0  = MkArg                    unboundValue, .findInheritedMethods[0x5614fbe03240]_p26, e0.0
  prom-           %3.1  = %3.0
  goto BB4
BB5   <- [7, 4]
  val?            %5.0  = Phi                      %4.3:BB4, %7.1:BB7
  val?            %5.1  = %5.0
  val?            %5.2  = Extract1_1D        !v    %0.2, %5.1, e0.0   <str->
  void                    Visible            v     
  void                    Return             l     %5.2
BB4   <- [3, 6]
  val?            %4.0  = Phi                      %6.2:BB6, %3.1:BB3
  val?            %4.1  = %4.0
  val?            %4.2  = Extract1_1D        !v    %2.1, %4.1, e0.0   <int->
  val?            %4.3  = %4.2
  goto BB5
Prom 26:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    found, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 27:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    m, e0.0
  val?            %0.2  = Force              !v    %0.1, e0.0   <val?_>
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <@?>
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    found, e0.0
  val?            %2.1  = Force              !v    %2.0, e0.0   <val?_>
  val?            %2.2  = %2.1
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, .findInheritedMethods[0x5614fbe03240]_p28, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.2:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract1_1D        !v    %0.2, %3.1, e0.0   <val?_>
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 28:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    found, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 29:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    table, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 30:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     length, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x5614fbe03240]_p31, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 31:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    methods, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 32:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    classes, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <(str|vec)>
  void                    Return             l     %0.3
Prom 33:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    m, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 34:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    tlabel, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 35:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    m, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 36:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    mtable, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 37:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x5614fbe03240]_p38, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x5614fbe03240]_p39, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 38:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    m, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 39:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    target, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 40:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     .newSignature, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x5614fbe03240]_p41, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x5614fbe03240]_p42, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 41:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    classes, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 42:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x5614fbe03240]_p43, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x5614fbe03240]_p44, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 43:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fdef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 44:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    signature, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 45:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, <0x5614f88a6bd8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x5614fbe03240]_p46, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x5614fbe03240]_p47, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <str>
  void                    Return             l     %0.4
Prom 46:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    m, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 47:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    target, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 48:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, <0x5614f88a6bd8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x5614fbe03240]_p49, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x5614fbe03240]_p50, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <str>
  void                    Return             l     %0.4
Prom 49:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    m, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 50:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    defined, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 51:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     body, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x5614fbe03240]_p52, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 52:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    m, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 53:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    methods, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 54:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    supersList, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <vec->
  void                    Return             l     %0.3
Prom 55:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fromGroup, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 56:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    verbose, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <lgl$->
  void                    Return             l     %0.3
Prom 57:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     rep.int, <0x5614fa93a230>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x5614fbe03240]_p58, e0.0
  val?            %0.3  = Call               !     %0.1("ANY", %0.2) e0.0   <str->
  void                    Return             l     %0.3
Prom 58:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    nargs, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <int$->
  void                    Return             l     %0.3
Prom 59:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    defaultLabel, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 60:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     names, <0x5614f88a7470>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x5614fbe03240]_p61, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <str->
  void                    Return             l     %0.3
Prom 61:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    methods, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 62:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     names, <0x5614f88a7470>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x5614fbe03240]_p63, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <str->
  void                    Return             l     %0.3
Prom 63:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    methods, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 64:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     as.character, <0x5614f88b4040>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x5614fbe03240]_p65, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <str$->
  void                    Return             l     %0.3
Prom 65:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    excluded, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 66:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    nargs, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  val?            %0.4  = Colon              !     2L, %0.3, e0.0   <val?_>
  void                    Return             l     %0.4
Prom 67:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !v    getClass, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x5614fbe03240]_p68, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x5614fbe03240]_p70, e0.0
  val?            %0.4  = NamedCall          !v    %0.1(%0.2, where=%0.3, .Force=true) e0.0   <val?_>
  val?^ | miss    %0.5  = LdVar              eR    classDefs, e0.0
  val?            %0.6  = Force              !v    %0.5, e0.0   <val?_>
  val?^ | miss    %0.7  = LdVar              eR    i, e0.0
  val?            %0.8  = Force              !v    %0.7, e0.0   <val?_>
  val?            %0.9  = Subassign2_1D      !v    %0.4, %0.6, %0.8, e0.0
  void                    StVar              lW    classDefs, %0.9, e0.0
  void                    StVar              lW    cc, %0.4, e0.0
  lgl$-           %0.12 = Missing            eR    useInherited, e0.0
  lgl$-           %0.13 = AsLogical                %0.12
  lgl$#-          %0.14 = Identical                %0.13, true
  void                    Branch                   %0.14 -> BB2 (if true) | BB7 (if false)
BB2   <- [0]
  void                    Nop                !     
  lgl$-           %2.1  = %0.13
  goto BB3
BB7   <- [0]
  val?^ | miss    %7.0  = LdVar              eR    useInherited, e0.0
  val?            %7.1  = Force              !v    %7.0, e0.0   <val?_>
  lgl$#-          %7.2  = IsType                   %7.1 isA val+   <@?>
  void                    Branch                   %7.2 -> BB8 (if true) | BB10 (if false)
BB3   <- [2, 9]
  lgl$-           %3.0  = Phi                      %9.5:BB9, %2.1:BB2
  lgl$-           %3.1  = %3.0
  lgl$#-          %3.2  = CheckTrueFalse     e     %3.1
  void                    Branch                   %3.2 -> BB6 (if true) | BB4 (if false)
BB8   <- [7]
  val?^ | miss    %8.0  = LdVar              eR    i, e0.0
  val?            %8.1  = Force              !v    %8.0, e0.0   <val?_>
  val?            %8.2  = %8.1
  goto BB9
BB10   <- [7]
  prom-           %10.0 = MkArg                    unboundValue, .findInheritedMethods[0x5614fbe03240]_p86, e0.0
  prom-           %10.1 = %10.0
  goto BB9
BB6   <- [3]
  (cls|spec|blt)  %6.0  = LdFun              !v    c, e0.0
  prom-           %6.1  = MkArg                    unboundValue, .findInheritedMethods[0x5614fbe03240]_p78, e0.0
  prom-           %6.2  = MkArg                    unboundValue, .findInheritedMethods[0x5614fbe03240]_p81, e0.0
  val?            %6.3  = Call               !v    %6.0(%6.1, %6.2, "ANY") e0.0   <val?_>
  val?            %6.4  = %6.3
  goto BB5
BB4   <- [3]
  (cls|spec|blt)  %4.0  = LdFun              !v    @, e0.0
  prom-           %4.1  = MkArg                    unboundValue, .findInheritedMethods[0x5614fbe03240]_p71, e0.0
  prom-           %4.2  = MkArg                    unboundValue, .findInheritedMethods[0x5614fbe03240]_p72, e0.0
  val?            %4.3  = Call               !v    %4.0(%4.1, %4.2) e0.0   <val?_>
  val?            %4.4  = %4.3
  goto BB5
BB9   <- [10, 8]
  val?            %9.0  = Phi                      %8.2:BB8, %10.1:BB10
  val?            %9.1  = %9.0
  val?            %9.2  = Extract2_1D        !v    %7.1, %9.1, e0.0   <val?_>
  lgl$-           %9.3  = AsLogical          e     %9.2
  lgl$-           %9.4  = LOr                      %0.13, %9.3
  lgl$-           %9.5  = %9.4
  goto BB3
BB5   <- [4, 6]
  val?            %5.0  = Phi                      %4.4:BB4, %6.4:BB6
  val?            %5.1  = %5.0
  void                    StVar              lW    allLabels, %5.1, e0.0
  (cls|spec|blt)  %5.3  = LdFun              !v    outerLabels, e0.0
  prom-           %5.4  = MkArg                    unboundValue, .findInheritedMethods[0x5614fbe03240]_p73, e0.0
  prom-           %5.5  = MkArg                    unboundValue, .findInheritedMethods[0x5614fbe03240]_p74, e0.0
  val?            %5.6  = Call               !v    %5.3(%5.4, %5.5) e0.0   <val?_>
  void                    StVar              lW    labels, %5.6, e0.0
  (cls|spec|blt)  %5.8  = LdFun              !v    c, e0.0
  prom-           %5.9  = MkArg                    unboundValue, .findInheritedMethods[0x5614fbe03240]_p75, e0.0
  prom-           %5.10 = MkArg                    unboundValue, .findInheritedMethods[0x5614fbe03240]_p76, e0.0
  val?            %5.11 = Call               !v    %5.8(%5.9, %5.10) e0.0   <val?_>
  void                    Invisible          v     
  void                    StVar              lW    supersList, %5.11, e0.0
  void                    Return             l     %5.11
Prom 68:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    classes, e0.0
  val?            %0.2  = Force              !v    %0.1, e0.0   <val?_>
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <@?>
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    i, e0.0
  val?            %2.1  = Force              !v    %2.0, e0.0   <val?_>
  val?            %2.2  = %2.1
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, .findInheritedMethods[0x5614fbe03240]_p69, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.2:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract2_1D        !v    %0.2, %3.1, e0.0   <val?_>
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 69:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    i, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 70:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 71:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    cc, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 72:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    className, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 73:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    labels, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 74:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    allLabels, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 75:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    supersList, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 76:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     list, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x5614fbe03240]_p77, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 77:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    allLabels, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 78:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x5614fbe03240]_p79, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x5614fbe03240]_p80, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 79:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    cc, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 80:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    className, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 81:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     .eligibleSuperClasses, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x5614fbe03240]_p82, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x5614fbe03240]_p85, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 82:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x5614fbe03240]_p83, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x5614fbe03240]_p84, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 83:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    cc, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 84:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    contains, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 85:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    simpleOnly, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 86:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    i, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 87:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    classes, e0.0
  val?            %0.2  = Force<wrapped>     !v    %0.1, e0.0   <vec->
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <true>
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    i, e0.0
  val?            %2.1  = Force<value>       !v    %2.0, e0.0   <int$->
  val?            %2.2  = %2.1
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, .findInheritedMethods[0x5614fbe03240]_p88, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.2:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract2_1D        !v    %0.2, %3.1, e0.0   <str$->
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 88:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    i, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 89:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 90:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    cc, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 91:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    className, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 92:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, <0x5614f88a6bd8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x5614fbe03240]_p93, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x5614fbe03240]_p94, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <vec$+>
  void                    Return             l     %0.4
Prom 93:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    cc, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 94:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    contains, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 95:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    simpleOnly, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <lgl$->
  void                    Return             l     %0.3
Prom 96:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    labels, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 97:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    allLabels, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 98:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    i, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 99:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, <0x5614f88a6bd8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x5614fbe03240]_p100, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x5614fbe03240]_p101, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <vec+>
  void                    Return             l     %0.4
Prom 100:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    def, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 101:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    contains, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 102:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    simpleOnly, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <lgl$->
  void                    Return             l     %0.3
Prom 113:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    sig, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <(str|vec)>
  void                    Return             l     %0.3

│ .findInheritedMethods[0x5614fbe03240]                                        │
└──────────────────────────────────────────────────────────────────────────────┘
