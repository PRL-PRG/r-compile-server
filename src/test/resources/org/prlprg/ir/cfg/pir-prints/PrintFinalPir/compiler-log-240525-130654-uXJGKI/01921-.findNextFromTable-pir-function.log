
┌──────────────────────────────────────────────────────────────────────────────┐
│ .findNextFromTable[0x5614fc86cf90]                                           │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;NonRefl0,NonRefl1,NonRefl2,NonRefl3,!Obj1,!Obj2,!Obj3 miss: 1│
│ Properties:                                                                  │
├────── Final PIR Version
.findNextFromTable[0x5614fc86cf90]
BB0
  val?^           %0.0  = LdArg                    3
  val?^           %0.1  = LdArg                    2
  val?^           %0.2  = LdArg                    1
  val?^           %0.3  = LdArg                    0
  env             e0.4  = MkEnv              l     method=%0.3, f=%0.2, optional=%0.1, envir=%0.0, prev(miss)=missingArg, parent=<env 0x5614f8eae378>, context 1
  prom-           %0.5  = MkArg                    unboundValue, .findNextFromTable[0x5614fc86cf90]_p0, e0.4
  val?^ | miss    %0.6  = CastType                 up %0.5
  void                    StArg              lW    prev, %0.6, e0.4
  val?^ | miss    %0.8  = LdVar              eR    getGeneric, <env 0x5614f8eae378>
  lgl$#-          %0.9  = Identical                %0.8, function(f, mustFind=FALSE, where, package="")|...
  void                    Branch                   %0.9 -> BB36 (if true) | BB37 (if false)
BB36   <- [0]
  prom-           %36.0 = MkArg                    unboundValue, .findNextFromTable[0x5614fc86cf90]_p1 (!refl), e0.4
  prom-           %36.1 = MkArg                    unboundValue, .findNextFromTable[0x5614fc86cf90]_p2 (!refl), e0.4
  val?            %36.2 = StaticCall         !v    getGeneric[0x5614fdfd0da0](%36.0, missingArg, %36.1) { 0 2n } e0.4   <cls>
  void                    StVar              lW    fdef, %36.2, e0.4
  val?^ | miss    %36.4 = LdVar              eR    environment, e0.4
  lgl$#-          %36.5 = Identical                %36.4, function(fun=NULL) <(rir::DispatchTable*)0x561|...
  void                    Branch                   %36.5 -> BB38 (if true) | BB39 (if false)
BB37   <- [0]
  fs              %37.0 = FrameState         R     0x5614fdb899a0+0: [], env=e0.4
  void                    Deopt              !v    %37.0, CallTarget@0x561504f27b60[Call#1], %0.8
BB38   <- [36]
  val             %38.0 = ChkMissing         e     %36.2
  prom-           %38.1 = MkArg                    %36.2, .findNextFromTable[0x5614fc86cf90]_p3 (!refl), 
  val?            %38.2 = StaticCall         !v    environment[0x5614fc2cc810](%38.1) e0.4   <env->
  void                    StVar              lW    env, %38.2, e0.4
  val?^ | miss    %38.4 = LdVar              eR    get, e0.4
  lgl$#-          %38.5 = Identical                %38.4, function(x, pos=-(1L), envir=as.environment(po|...
  void                    Branch                   %38.5 -> BB40 (if true) | BB41 (if false)
BB39   <- [36]
  fs              %39.0 = FrameState         R     0x5614fdb899a0+59: [], env=e0.4
  void                    Deopt              !v    %39.0, CallTarget@0x561504f27b60[Call#2], %36.4   !
BB40   <- [38]
  prom-           %40.0 = MkArg                    unboundValue, .findNextFromTable[0x5614fc86cf90]_p4 (!refl), e0.4
  val?            %40.1 = StaticCall         !v    get[0x561505996080](".SigLength", missingArg, %40.0) { 0 2n } e0.4   <real$->
  lgl$#-          %40.2 = IsType                   %40.1 isA real$-
  void                    Branch                   %40.2 -> BB42 (if true) | BB43 (if false)
BB41   <- [38]
  fs              %41.0 = FrameState         R     0x5614fdb899a0+105: [], env=e0.4
  void                    Deopt              !v    %41.0, CallTarget@0x561504f27b60[Call#3], %38.4   !
BB42   <- [40]
  real$-          %42.0 = CastType           d     dn %40.1
  void                    StVar              lW    n, %42.0, e0.4
  (cls|spec|blt)  %42.2 = LdFun              !v    @, <0x5614f88a6bd8>, e0.4
  prom-           %42.3 = MkArg                    unboundValue, .findNextFromTable[0x5614fc86cf90]_p5, e0.4
  prom-           %42.4 = MkArg                    unboundValue, .findNextFromTable[0x5614fc86cf90]_p6, e0.4
  val?            %42.5 = Call               !v    %42.2(%42.3, %42.4) e0.4   <str$>
  void                    StVar              lW    defined, %42.5, e0.4
  val?^ | miss    %42.7 = LdVar              eR    length, e0.4
  lgl$#-          %42.8 = Identical                <blt length>, %42.7   <true>
  void                    Branch                   %42.8 -> BB44 (if true) | BB45 (if false)
BB43   <- [40]
  fs              %43.0 = FrameState         R     0x5614fdb899a0+150: [%40.1], env=e0.4
  void                    Deopt              !v    %43.0, Typecheck@0x561504f27b60[Type#7], %40.1   !
BB44   <- [42]
  val             %44.0 = ChkMissing         e     %42.5
  val?            %44.1 = CallBuiltin        !v    length(%42.5) e0.4   <int$->
  lgl$#-          %44.2 = IsType                   %44.1 isA int$-
  void                    Branch                   %44.2 -> BB46 (if true) | BB47 (if false)
BB45   <- [42]
  fs              %45.0 = FrameState         R     0x5614fdb899a0+215: [], env=e0.4
  void                    Deopt              !v    %45.0, DeadBranchReached@0x561504f27b60[Test#0], %42.8   !
BB46   <- [44]
  int$-           %46.0 = CastType           d     dn %44.1
  void                    StVar              lW    m, %46.0, e0.4
  val?^ | miss    %46.2 = LdVar              eR    n, e0.4
  lgl$#-          %46.3 = IsType                   %46.2 isA real$-
  void                    Branch                   %46.3 -> BB48 (if true) | BB49 (if false)
BB47   <- [44]
  fs              %47.0 = FrameState         R     0x5614fdb899a0+306: [%44.1], env=e0.4
  void                    Deopt              !v    %47.0, Typecheck@0x561504f27b60[Type#13], %44.1   !
BB48   <- [46]
  real$-          %48.0 = CastType           d     dn %46.2
  lgl$-           %48.1 = Gt                 d     %46.0, %48.0, elided   <lgl$->
  lgl$#-          %48.2 = CheckTrueFalse     e     %48.1
  void                    Branch                   %48.2 -> BB34 (if true) | BB15 (if false)
BB49   <- [46]
  void                    Nop                !     
  val?^ | miss    %49.1 = %46.2
  dr              %49.2 = Typecheck@0x561504f27b60[Type#15]
  goto BB13
BB34   <- [48]
  (cls|spec|blt)  %34.0 = LdFun              !v    length<-, e0.4
  fs              %34.1 = FrameState         R     0x5614fdb899a0+485: [%48.0, %34.0], env=e0.4
  void                    Deopt              !v    %34.1, DeadCall@0x561504f27b60[Call#10], %34.0   !
BB15   <- [48]
  lgl$-           %15.0 = Gt                 d     %48.0, %46.0, elided   <lgl$->
  lgl$#-          %15.1 = CheckTrueFalse     e     %15.0
  void                    Branch                   %15.1 -> BB33 (if true) | BB16 (if false)
BB13   <- [49, 51]
  val?^ | miss    %13.0 = Phi                      %49.1:BB49, %51.1:BB51
  val?^ | miss    %13.1 = %13.0
  dr              %13.2 = Phi                      %49.2:BB49, %51.2:BB51
  dr              %13.3 = %13.2
  fs              %13.4 = FrameState         R     0x5614fdb899a0+320: [], env=e0.4
  void                    Deopt              !v    %13.4, %13.3, %13.1   !
BB33   <- [15]
  (cls|spec|blt)  %33.0 = LdFun              !v    new, e0.4
  fs              %33.1 = FrameState         R     0x5614fdb899a0+410: [%33.0], env=e0.4
  void                    Deopt              !v    %33.1, DeadCall@0x561504f27b60[Call#6], %33.0   !
BB16   <- [15]
  val?^ | miss    %16.0 = LdVar              eR    c, e0.4
  lgl$#-          %16.1 = Identical                <blt c>, %16.0   <true>
  void                    Branch                   %16.1 -> BB50 (if true) | BB51 (if false)
BB50   <- [16]
  val?^ | miss    %50.0 = LdVar              eR    prev, e0.4
  val?            %50.1 = Force!<lazy>       !v    %50.0, e0.4   <str->
  val?^ | miss    %50.2 = LdVar              eR    .sigLabel, e0.4
  lgl$#-          %50.3 = Identical                %50.2, function(sig) <(rir::DispatchTable*)0x5614fba6|...
  void                    Branch                   %50.3 -> BB52 (if true) | BB53 (if false)
BB51   <- [16]
  void                    Nop                !     
  lgl$#-          %51.1 = %16.1
  dr              %51.2 = DeadBranchReached@0x561504f27b60[Test#1]
  goto BB13
BB52   <- [50]
  prom-           %52.0 = MkArg                    unboundValue, .findNextFromTable[0x5614fc86cf90]_p7, e0.4
  val?^           %52.1 = CastType                 up %52.0
  val?^ | miss    %52.2 = LdVar              eR    paste, <env 0x5614f8eae378>
  lgl$#-          %52.3 = Identical                %52.2, function(..., sep=" ", collapse=NULL, recycle0|...
  void                    Branch                   %52.3 -> BB54 (if true) | BB55 (if false)
BB53   <- [50]
  void                    Nop                !     
  val?^ | miss    %53.1 = %50.2
  dr              %53.2 = CallTarget@0x561504f27b60[Call#13]
  goto BB17
BB54   <- [52]
  env             e54.0 = MkEnv              l     sig=%52.1, parent=<env 0x5614f8eae378>, context 0
  prom-           %54.1 = MkArg                    unboundValue, .findNextFromTable[0x5614fc86cf90]_p18, e54.0
  dots-           %54.2 = DotsList           l     %54.1
  val?^ | miss    %54.3 = CastType                 up %54.1
  env             e54.4 = MkEnv              l     ...=%54.2, sep(miss)=" ", collapse="#", recycle0(miss)=false, parent=R_BaseNamespace, context -1
  val?            %54.5 = Force!             !vL   %54.3, e54.4
  val+            %54.6 = CallSafeBuiltin    wed   list(%54.5)    <vec->
  val+            %54.7 = CallSafeBuiltin    wed   paste(%54.6, " ", "#", false)    <str$->
  lgl$#-          %54.8 = IsType                   %54.7 isA val?-
  lgl$#-          %54.9 = IsType                   %50.1 isA val?-
  void                    Branch                   %54.9 -> BB56 (if true) | BB57 (if false)
BB55   <- [52]
  void                    Nop                !     
  val?^ | miss    %55.1 = %52.2
  dr              %55.2 = CallTarget@0x5614fbdc4138[Call#0]
  goto BB17
BB17   <- [53, 55]
  val?^ | miss    %17.0 = Phi                      %53.1:BB53, %55.1:BB55
  val?^ | miss    %17.1 = %17.0
  dr              %17.2 = Phi                      %53.2:BB53, %55.2:BB55
  dr              %17.3 = %17.2
  fs              %17.4 = FrameState         R     0x5614fdb899a0+622: [<blt c>, %50.1], env=e0.4
  void                    Deopt              !v    %17.4, %17.3, %17.1   !
BB56   <- [54]
  val?-           %56.0 = CastType           d     dn %50.1   <str->
  void                    Branch                   %54.8 -> BB58 (if true) | BB59 (if false)
BB57   <- [54]
  void                    Nop                !     
  val?            %57.1 = %50.1
  dr              %57.2 = Typecheck@0x561504f27b60[Type#35]
  goto BB19
BB58   <- [56]
  val-            %58.0 = CastType           d     dn %54.7   <str$->
  val+            %58.1 = CallSafeBuiltin    wed   c(%56.0, %58.0)    <str$->
  void                    StVar              lW    excluded, %58.1, e0.4
  val?^ | miss    %58.3 = LdVar              eR    .getMethodsTable, e0.4
  lgl$#-          %58.4 = Identical                %58.3, function(fdef, env=environment(fdef), check=TR|...
  void                    Branch                   %58.4 -> BB60 (if true) | BB61 (if false)
BB59   <- [56]
  void                    Nop                !     
  val+            %59.1 = %54.7
  dr              %59.2 = Typecheck@0x561504f27b60[Type#37]
  goto BB19
BB19   <- [57, 59]
  val?^ | miss    %19.0 = Phi                      %57.1:BB57, %59.1:BB59
  val?^ | miss    %19.1 = %19.0
  dr              %19.2 = Phi                      %57.2:BB57, %59.2:BB59
  dr              %19.3 = %19.2
  fs              %19.4 = FrameState         R     0x5614fdb899a0+659: [<blt c>, %50.1], env=e0.4
  fs              %19.5 = FrameState         R     0x5614fbeecae0+45: [], env=e54.0, next=%19.4
  fs              %19.6 = FrameState         R     0x5614fa9a9a70+96: [%54.7], env=e54.4, next=%19.5
  void                    Deopt              !v    %19.6, %19.3, %19.1   !
BB60   <- [58]
  prom-           %60.0 = MkArg                    unboundValue, .findNextFromTable[0x5614fc86cf90]_p8, e0.4
  val?            %60.1 = StaticCall         !v    .getMethodsTable[0x5614f95e44a0](%60.0, missingArg, missingArg, true) { 0 3n } e0.4   <env->
  void                    StVar              lW    allTable, %60.1, e0.4
  (cls|spec|blt)  %60.3 = LdFun              !v    .findInheritedMethods, <0x5614fe57a6b8>, e0.4
  prom-           %60.4 = MkArg                    unboundValue, .findNextFromTable[0x5614fc86cf90]_p9, e0.4
  prom-           %60.5 = MkArg                    unboundValue, .findNextFromTable[0x5614fc86cf90]_p10, e0.4
  prom-           %60.6 = MkArg                    unboundValue, .findNextFromTable[0x5614fc86cf90]_p11, e0.4
  prom-           %60.7 = MkArg                    unboundValue, .findNextFromTable[0x5614fc86cf90]_p12, e0.4
  prom-           %60.8 = MkArg                    unboundValue, .findNextFromTable[0x5614fc86cf90]_p13, e0.4
  val?            %60.9 = NamedCall          !v    %60.3(%60.4, %60.5, mtable=nil, table=%60.6, excluded=%60.7, where=%60.8) e0.4   <vec$+>
  void                    StVar              lW    methods, %60.9, e0.4
  lgl$#-          %60.11 = IsType                   %60.9 isA val?+
  val?^ | miss    %60.12 = LdVar              eR    length, e0.4
  lgl$#-          %60.13 = Identical                <blt length>, %60.12   <true>
  void                    Branch                   %60.13 -> BB62 (if true) | BB63 (if false)
BB61   <- [58]
  fs              %61.0 = FrameState         R     0x5614fdb899a0+695: [], env=e0.4
  void                    Deopt              !v    %61.0, CallTarget@0x561504f27b60[Call#14], %58.3   !
BB62   <- [60]
  val             %62.0 = ChkMissing         e     %60.9
  void                    Branch                   %60.11 -> BB64 (if true) | BB65 (if false)
BB63   <- [60]
  void                    Nop                !     
  lgl$#-          %63.1 = %60.13
  dr              %63.2 = DeadBranchReached@0x561504f27b60[Test#2]
  goto BB23
BB64   <- [62]
  val?+           %64.0 = CastType           d     dn %60.9   <vec$+>
  (int|real)$-    %64.1 = CallSafeBuiltin    wed   length(%64.0)    <int$->
  lgl$#-          %64.2 = IsType                   %64.1 isA int$-
  void                    Branch                   %64.2 -> BB66 (if true) | BB67 (if false)
BB65   <- [62]
  void                    Nop                !     
  val?            %65.1 = %60.9
  dr              %65.2 = Typecheck@0x561504f27b60[Type#46]
  goto BB23
BB23   <- [63, 65]
  val?^ | miss    %23.0 = Phi                      %63.1:BB63, %65.1:BB65
  val?^ | miss    %23.1 = %23.0
  dr              %23.2 = Phi                      %63.2:BB63, %65.2:BB65
  dr              %23.3 = %23.2
  fs              %23.4 = FrameState         R     0x5614fdb899a0+849: [], env=e0.4
  void                    Deopt              !v    %23.4, %23.3, %23.1   !
BB66   <- [64]
  int$-           %66.0 = CastType           d     dn %64.1
  lgl$-           %66.1 = Eq                 d     %66.0, 0L, elided   <lgl$->
  lgl$#-          %66.2 = CheckTrueFalse     e     %66.1
  void                    Branch                   %66.2 -> BB30 (if true) | BB27 (if false)
BB67   <- [64]
  void                    Nop                !     
  (int|real)$-    %67.1 = %64.1
  dr              %67.2 = Typecheck@0x561504f27b60[Type#49]
  goto BB25
BB30   <- [66]
  val?^ | miss    %30.0 = LdVar              eR    list, e0.4
  lgl$#-          %30.1 = Identical                <blt list>, %30.0   <@?>
  void                    Branch                   %30.1 -> BB32 (if true) | BB31 (if false)
BB27   <- [66]
  void                    Visible            v     
  lgl$-           %27.1 = Gt                 vd    %66.0, 1L, elided   <lgl$->
  lgl$#-          %27.2 = CheckTrueFalse     e     %27.1
  void                    Branch                   %27.2 -> BB29 (if true) | BB28 (if false)
BB25   <- [67, 69]
  val?^ | miss    %25.0 = Phi                      %67.1:BB67, %69.1:BB69
  val?^ | miss    %25.1 = %25.0
  dr              %25.2 = Phi                      %67.2:BB67, %69.2:BB69
  dr              %25.3 = %25.2
  fs              %25.4 = FrameState         R     0x5614fdb899a0+940: [%64.1], env=e0.4
  void                    Deopt              !v    %25.4, %25.3, %25.1   !
BB32   <- [30]
  (cls|spec|blt)  %32.0 = LdFun              !v    finalDefaultMethod, e0.4
  fs              %32.1 = FrameState         R     0x5614fdb899a0+1033: [<blt list>, %32.0], env=e0.4
  void                    Deopt              !v    %32.1, DeadCall@0x561504f27b60[Call#20], %32.0   !
BB31   <- [30]
  (cls|spec|blt)  %31.0 = LdFun              !v    list, e0.4
  fs              %31.1 = FrameState         R     0x5614fdb899a0+996: [%31.0], env=e0.4
  void                    Deopt              !v    %31.1, DeadCall@0x561504f27b60[Call#17], %31.0   !
BB29   <- [27]
  (cls|spec|blt)  %29.0 = LdFun              !v    warning, e0.4
  fs              %29.1 = FrameState         R     0x5614fdb899a0+1220: [%29.0], env=e0.4
  void                    Deopt              !v    %29.1, DeadCall@0x561504f27b60[Call#23], %29.0   !
BB28   <- [27]
  val?^ | miss    %28.0 = LdVar              eR    new, e0.4
  lgl$#-          %28.1 = Identical                %28.0, function(Class, ...) <(rir::DispatchTable*)0x5|...
  void                    Branch                   %28.1 -> BB68 (if true) | BB69 (if false)
BB68   <- [28]
  prom-           %68.0 = MkArg                    unboundValue, .findNextFromTable[0x5614fc86cf90]_p14, e0.4
  prom-           %68.1 = MkArg                    unboundValue, .findNextFromTable[0x5614fc86cf90]_p15, e0.4
  prom-           %68.2 = MkArg                    unboundValue, .findNextFromTable[0x5614fc86cf90]_p16, e0.4
  dots-           %68.3 = DotsList           l     %68.0, nextMethod=%68.1, excluded=%68.2
  val?            %68.4 = StaticCall         !     new[0x561505013a80]("MethodWithNext", %68.3) { 0 1 2n 3n } e0.4   <cls>
  void                    Return             l     %68.4
BB69   <- [28]
  void                    Nop                !     
  val?^ | miss    %69.1 = %28.0
  dr              %69.2 = CallTarget@0x561504f27b60[Call#28]
  goto BB25
Prom 0:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     character, <0x5614f90407e0>, e0.0
  val?            %0.2  = Call               !     %0.1() e0.0   <str->
  void                    Return             l     %0.2
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    f, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str$+>
  void                    Return             l     %0.3
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    envir, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 3:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fdef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 4:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    env, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 5:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    method, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 6:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    defined, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 7:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    defined, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$>
  void                    Return             l     %0.3
Prom 8:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fdef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 9:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    defined, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$>
  void                    Return             l     %0.3
Prom 10:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fdef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 11:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    allTable, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 12:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    excluded, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 13:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    envir, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 14:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    method, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 15:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    methods, e0.0
  val?            %0.2  = Force<value>       !v    %0.1, e0.0   <vec$+>
  val?            %0.3  = Extract2_1D        !v    %0.2, 1L, e0.0   <cls>
  void                    Visible            v     
  void                    Return             l     %0.3
Prom 16:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     as.list, <0x5614f89d1810>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findNextFromTable[0x5614fc86cf90]_p17, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <vec$->
  void                    Return             l     %0.3
Prom 17:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    excluded, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 18:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    sig, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <(str|vec)>
  void                    Return             l     %0.3

│ .findNextFromTable[0x5614fc86cf90]                                           │
└──────────────────────────────────────────────────────────────────────────────┘
