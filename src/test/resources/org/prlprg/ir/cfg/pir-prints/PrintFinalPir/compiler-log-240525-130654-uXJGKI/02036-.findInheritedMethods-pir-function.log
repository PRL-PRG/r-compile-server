
┌──────────────────────────────────────────────────────────────────────────────┐
│ .findInheritedMethods[0x5614fcb5fc60]                                        │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch miss: 7                              │
│ Properties:                                                                  │
├────── Final PIR Version
.findInheritedMethods[0x5614fcb5fc60]
BB0
  val?^           %0.0  = LdArg                    2
  val?^           %0.1  = LdArg                    1
  val?^           %0.2  = LdArg                    0
  env             e0.3  = MkEnv              l     classes=%0.2, fdef=%0.1, mtable=%0.0, table(miss)=missingArg, excluded(miss)=missingArg, useInherited(miss)=missingArg, simpleOnly(miss)=missingArg, verbose(miss)=missingArg, doCache(miss)=missingArg, where(miss)=missingArg, parent=<env 0x5614f8eae378>, context 1
  prom-           %0.4  = MkArg                    unboundValue, .findInheritedMethods[0x5614fcb5fc60]_p0, e0.3
  val?^ | miss    %0.5  = CastType                 up %0.4
  void                    StArg              lW    table, %0.5, e0.3
  void                    StArg              lW    excluded, nil, e0.3
  prom-           %0.8  = MkArg                    unboundValue, .findInheritedMethods[0x5614fcb5fc60]_p4, e0.3
  val?^ | miss    %0.9  = CastType                 up %0.8
  void                    StArg              lW    simpleOnly, %0.9, e0.3
  void                    StArg              lW    verbose, false, e0.3
  prom-           %0.12 = MkArg                    unboundValue, .findInheritedMethods[0x5614fcb5fc60]_p7, e0.3
  val?^ | miss    %0.13 = CastType                 up %0.12
  void                    StArg              lW    doCache, %0.13, e0.3
  prom-           %0.15 = MkArg                    unboundValue, .findInheritedMethods[0x5614fcb5fc60]_p9, e0.3
  val?^ | miss    %0.16 = CastType                 up %0.15
  void                    StArg              lW    where, %0.16, e0.3
  cls             %0.18 = MkCls                    .findInheritedMethods>plist@677, e0.3
  val?^ | miss    %0.19 = LdVar              eR    .allowPrimitiveMethods, <env 0x5614f8eae378>
  lgl$#-          %0.20 = Identical                %0.19, function(onOff) <(rir::DispatchTable*)0x5614fb|...
  void                    Branch                   %0.20 -> BB244 (if true) | BB245 (if false)
BB244   <- [0]
  ct              %244.0 = PushContext        lCL   false, .allowPrimitiveMethods(FALSE), function(onOff) <(rir::DispatchTable*)0x5614fb|..., e0.3
  val?^ | miss    %244.1 = LdVar              eR    .Call, <env 0x5614f8eae378>
  lgl$#-          %244.2 = Identical                <blt .Call>, %244.1   <true>
  void                    Branch                   %244.2 -> BB246 (if true) | BB247 (if false)
BB245   <- [0]
  fs              %245.0 = FrameState         R     0x5615010b0240+0: [], env=e0.3
  void                    Deopt              !v    %245.0, CallTarget@0x5615010a8200[Call#5], %0.19
BB246   <- [244]
  val?^ | miss    %246.0 = LdVar              eR    C_R_M_setPrimitiveMethods, <env 0x5614f8eae378>
  env             e246.1 = MkEnv              l     onOff=false, code="CLEAR", parent=<env 0x5614f8eae378>, context 1
  val?            %246.2 = Force!<value>      !v    %246.0, e246.1   <vec>
  val?^ | miss    %246.3 = LdVar              eR    code, e246.1
  val?            %246.4 = Force!<value>      !v    %246.3, e246.1   <str$->
  val?            %246.5 = CallBuiltin        !v    .Call(%246.2, "", nil, %246.4, nil, nil) e246.1   <lgl$->
  lgl$#-          %246.6 = IsType                   %246.5 isA lgl$-
  void                    Branch                   %246.6 -> BB248 (if true) | BB249 (if false)
BB247   <- [244]
  fs              %247.0 = FrameState         R     0x5615010b0240+32: [], env=e0.3
  env             e247.1 = (MkEnv)            l     onOff=false, parent=<env 0x5614f8eae378>, context 1
  fs              %247.2 = FrameState         R     0x5614fb8877a0+15: [false], env=e247.1, next=%247.0
  void                    Deopt              !v    %247.2, DeadBranchReached@0x5614fbdb2d38[Test#0], %244.2   !
BB248   <- [246]
  lgl$-           %248.0 = CastType           d     dn %246.5
  val?            %248.1 = PopContext         C     %248.0, %244.0   <lgl$->
  lgl$#-          %248.2 = IsType                   %248.1 isA lgl$-
  void                    Branch                   %248.2 -> BB250 (if true) | BB251 (if false)
BB249   <- [246]
  fs              %249.0 = FrameState         R     0x5615010b0240+32: [], env=e0.3
  fs              %249.1 = FrameState         R     0x5614fb8877a0+200: [%246.5], env=e246.1, next=%249.0
  void                    Deopt              !v    %249.1, Typecheck@0x5614fbdb2d38[Type#5], %246.5   !
BB250   <- [248]
  lgl$-           %250.0 = CastType           d     dn %248.1
  void                    StVar              lW    primMethods, %250.0, e0.3
  (cls|spec|blt)  %250.2 = LdFun              !v    on.exit, <0x5614f88a6270>, e0.3
  prom-           %250.3 = MkArg                    unboundValue, .findInheritedMethods[0x5614fcb5fc60]_p11, e0.3
  val?            %250.4 = Call               !v    %250.2(%250.3) e0.3
  val?^ | miss    %250.5 = LdVar              eR    is.environment, e0.3
  lgl$#-          %250.6 = Identical                <blt is.environment>, %250.5   <true>
  void                    Branch                   %250.6 -> BB252 (if true) | BB253 (if false)
BB251   <- [248]
  fs              %251.0 = FrameState         R     0x5615010b0240+32: [%248.1], env=e0.3
  void                    Deopt              !v    %251.0, Typecheck@0x5615010a8200[Type#9], %248.1   !
BB252   <- [250]
  val?^ | miss    %252.0 = LdVar              eR    table, e0.3
  val?            %252.1 = Force!<lazy>       !v    %252.0, e0.3   <env->
  lgl$#-          %252.2 = CallSafeBuiltin    wed   is.environment(%252.1)    <lgl$->
  void                    Branch                   %252.2 -> BB14 (if true) | BB13 (if false)
BB253   <- [250]
  fs              %253.0 = FrameState         R     0x5615010b0240+78: [%250.4], env=e0.3
  void                    Deopt              !v    %253.0, DeadBranchReached@0x5615010a8200[Test#0], %250.6   !
BB14   <- [252]
  val?^ | miss    %14.0 = LdVar              eR    length, e0.3
  lgl$#-          %14.1 = Identical                <blt length>, %14.0   <true>
  void                    Branch                   %14.1 -> BB254 (if true) | BB255 (if false)
BB13   <- [252]
  (cls|spec|blt)  %13.0 = LdFun              !v    is, e0.3
  fs              %13.1 = FrameState         R     0x5615010b0240+192: [%13.0], env=e0.3
  void                    Deopt              !v    %13.1, DeadCall@0x5615010a8200[Call#9], %13.0   !
BB254   <- [14]
  (cls|spec|blt)  %254.0 = LdFun              !v    @, <0x5614f88a6bd8>, e0.3
  prom-           %254.1 = MkArg                    unboundValue, .findInheritedMethods[0x5614fcb5fc60]_p13, e0.3
  prom-           %254.2 = MkArg                    unboundValue, .findInheritedMethods[0x5614fcb5fc60]_p14, e0.3
  val?            %254.3 = Call               !v    %254.0(%254.1, %254.2) e0.3   <vec->
  lgl$#-          %254.4 = IsType                   %254.3 isA val?-
  void                    Branch                   %254.4 -> BB256 (if true) | BB257 (if false)
BB255   <- [14]
  fs              %255.0 = FrameState         R     0x5615010b0240+170: [%252.2], env=e0.3
  void                    Deopt              !v    %255.0, DeadBranchReached@0x5615010a8200[Test#1], %14.1   !
BB256   <- [254]
  val?-           %256.0 = CastType           d     dn %254.3   <vec->
  (int|real)$-    %256.1 = CallSafeBuiltin    wed   length(%256.0)    <int$->
  lgl$#-          %256.2 = IsType                   %256.1 isA int$-
  void                    Branch                   %256.2 -> BB258 (if true) | BB259 (if false)
BB257   <- [254]
  fs              %257.0 = FrameState         R     0x5615010b0240+416: [<blt length>, %254.3], env=e0.3
  void                    Deopt              !v    %257.0, Typecheck@0x5615010a8200[Type#27], %254.3   !
BB258   <- [256]
  int$-           %258.0 = CastType           d     dn %256.1
  lgl$-           %258.1 = Gt                 d     %258.0, 0L, elided   <lgl$->
  void                    StVar              lW    hasGroup, %258.1, e0.3
  lgl$#-          %258.3 = CheckTrueFalse     e     %258.1
  void                    Branch                   %258.3 -> BB242 (if true) | BB21 (if false)
BB259   <- [256]
  fs              %259.0 = FrameState         R     0x5615010b0240+438: [%256.1], env=e0.3
  void                    Deopt              !v    %259.0, Typecheck@0x5615010a8200[Type#28], %256.1   !
BB242   <- [258]
  (cls|spec|blt)  %242.0 = LdFun              !v    .getAllGroups, e0.3
  fs              %242.1 = FrameState         R     0x5615010b0240+494: [%242.0], env=e0.3
  void                    Deopt              !v    %242.1, DeadCall@0x5615010a8200[Call#18], %242.0   !
BB21   <- [258]
  val?^ | miss    %21.0 = LdVar              eR    length, e0.3
  lgl$#-          %21.1 = Identical                <blt length>, %21.0   <true>
  void                    Branch                   %21.1 -> BB260 (if true) | BB261 (if false)
BB260   <- [21]
  val?^ | miss    %260.0 = LdVar              eR    excluded, e0.3
  val?            %260.1 = Force!<lazy>       !v    %260.0, e0.3   <(nil|str)->
  lgl$#-          %260.2 = IsType                   %260.1 isA val?-
  void                    Branch                   %260.2 -> BB262 (if true) | BB263 (if false)
BB261   <- [21]
  fs              %261.0 = FrameState         R     0x5615010b0240+464: [], env=e0.3
  void                    Deopt              !v    %261.0, DeadBranchReached@0x5615010a8200[Test#2], %21.1   !
BB262   <- [260]
  val?-           %262.0 = CastType           d     dn %260.1   <(nil|str)->
  (int|real)$-    %262.1 = CallSafeBuiltin    wed   length(%262.0)    <int$->
  lgl$#-          %262.2 = IsType                   %262.1 isA int$-
  void                    Branch                   %262.2 -> BB264 (if true) | BB265 (if false)
BB263   <- [260]
  fs              %263.0 = FrameState         R     0x5615010b0240+604: [<blt length>, %260.1], env=e0.3
  void                    Deopt              !v    %263.0, Typecheck@0x5615010a8200[Type#35], %260.1   !
BB264   <- [262]
  int$-           %264.0 = CastType           d     dn %262.1
  lgl$-           %264.1 = Gt                 d     %264.0, 0L, elided   <lgl$->
  void                    StVar              lW    doExcluded, %264.1, e0.3
  val?^ | miss    %264.3 = LdVar              eR    verbose, e0.3
  val?            %264.4 = Force!<lazy>       !v    %264.3, e0.3   <lgl$->
  lgl$#-          %264.5 = CheckTrueFalse     we    %264.4
  void                    Branch                   %264.5 -> BB241 (if true) | BB28 (if false)
BB265   <- [262]
  fs              %265.0 = FrameState         R     0x5615010b0240+626: [%262.1], env=e0.3
  void                    Deopt              !v    %265.0, Typecheck@0x5615010a8200[Type#36], %262.1   !
BB241   <- [264]
  void                    StVar              lW    plist, %0.18, e0.3
  (cls|spec|blt)  %241.1 = LdFun              !v    cat, e0.3
  fs              %241.2 = FrameState         R     0x5615010b0240+707: [%241.1], env=e0.3
  void                    Deopt              !v    %241.2, DeadCall@0x5615010a8200[Call#21], %241.1   !
BB28   <- [264]
  val?^ | miss    %28.0 = LdVar              eR    length, e0.3
  lgl$#-          %28.1 = Identical                <blt length>, %28.0   <true>
  void                    Branch                   %28.1 -> BB266 (if true) | BB267 (if false)
BB266   <- [28]
  val?^ | miss    %266.0 = LdVar              eR    classes, e0.3
  val?            %266.1 = Force!<lazy>       !v    %266.0, e0.3   <(str|vec)$>
  val?            %266.2 = CallBuiltin        !v    length(%266.1) e0.3   <int$->
  lgl$#-          %266.3 = IsType                   %266.2 isA int$-
  void                    Branch                   %266.3 -> BB268 (if true) | BB269 (if false)
BB267   <- [28]
  fs              %267.0 = FrameState         R     0x5615010b0240+667: [%264.5], env=e0.3
  void                    Deopt              !v    %267.0, DeadBranchReached@0x5615010a8200[Test#4], %28.1   !
BB268   <- [266]
  int$-           %268.0 = CastType           d     dn %266.2
  void                    StVar              lW    nargs, %268.0, e0.3
  lgl$-           %268.2 = Missing            eR    useInherited, e0.3
  lgl$-           %268.3 = Not                d     %268.2, elided
  lgl$-           %268.4 = AsLogical                %268.3
  lgl$#-          %268.5 = Identical                %268.4, false
  void                    Branch                   %268.5 -> BB240 (if true) | BB31 (if false)
BB269   <- [266]
  fs              %269.0 = FrameState         R     0x5615010b0240+866: [%266.2], env=e0.3
  void                    Deopt              !v    %269.0, Typecheck@0x5615010a8200[Type#61], %266.2   !
BB240   <- [268]
  void                    Nop                !     
  lgl$-           %240.1 = %268.4
  goto BB38
BB31   <- [268]
  val?^ | miss    %31.0 = LdVar              eR    length, e0.3
  lgl$#-          %31.1 = Identical                <blt length>, %31.0   <@?>
  void                    Branch                   %31.1 -> BB33 (if true) | BB32 (if false)
BB38   <- [240, 272]
  lgl$-           %38.0 = Phi                      %272.4:BB272, %240.1:BB240
  lgl$-           %38.1 = %38.0
  lgl$#-          %38.2 = CheckTrueFalse     e     %38.1
  void                    Branch                   %38.2 -> BB239 (if true) | BB41 (if false)
BB33   <- [31]
  val?^ | miss    %33.0 = LdVar              eR    useInherited, e0.3
  val?            %33.1 = Force!             !v    %33.0, e0.3   <val?_>
  lgl$#-          %33.2 = IsType                   %33.1 isA val?+
  void                    Branch                   %33.2 -> BB270 (if true) | BB271 (if false)
BB32   <- [31]
  (cls|spec|blt)  %32.0 = LdFun              !v    length, e0.3
  fs              %32.1 = FrameState         R     0x5615010b0240+922: [%268.4, %32.0], env=e0.3
  void                    Deopt              !v    %32.1, DeadCall@0x5615010a8200[Call#31], %32.0   !
BB239   <- [38]
  (cls|spec|blt)  %239.0 = LdFun              !v    rep, e0.3
  fs              %239.1 = FrameState         R     0x5615010b0240+1028: [%239.0], env=e0.3
  void                    Deopt              !v    %239.1, DeadCall@0x5615010a8200[Call#32], %239.0   !
BB41   <- [38]
  val?^ | miss    %41.0 = LdVar              eR    hasGroup, e0.3
  lgl$#-          %41.1 = IsType                   %41.0 isA lgl$-
  void                    Branch                   %41.1 -> BB274 (if true) | BB275 (if false)
BB270   <- [33]
  val?+           %270.0 = CastType           d     dn %33.1   <val?_>
  (int|real)$-    %270.1 = CallSafeBuiltin    wed   length(%270.0)    <val?_>
  val?^ | miss    %270.2 = LdVar              eR    nargs, e0.3
  val?            %270.3 = Force!             !v    %270.2, e0.3   <val?_>
  lgl$#-          %270.4 = IsType                   %270.3 isA val?+
  void                    Branch                   %270.4 -> BB272 (if true) | BB273 (if false)
BB271   <- [33]
  fs              %271.0 = FrameState         R     0x5615010b0240+963: [%268.4, <blt length>, %33.1], env=e0.3
  void                    Deopt              !v    %271.0, Typecheck@0x5615010a8200[Type#63], %33.1   !
BB274   <- [41]
  lgl$-           %274.0 = CastType           d     dn %41.0
  lgl$-           %274.1 = AsLogical                %274.0
  lgl$#-          %274.2 = Identical                %274.1, false
  void                    Branch                   %274.2 -> BB238 (if true) | BB42 (if false)
BB275   <- [41]
  fs              %275.0 = FrameState         R     0x5615010b0240+1012: [%38.1], env=e0.3
  void                    Deopt              !v    %275.0, Typecheck@0x5615010a8200[Type#70], %41.0   !
BB272   <- [270]
  val?+           %272.0 = CastType           d     dn %270.3   <val?_>
  lgl             %272.1 = Lt                 wed   %270.1, %272.0, elided   <val?_>
  lgl$-           %272.2 = AsLogical          e     %272.1
  lgl$-           %272.3 = LAnd                     %268.4, %272.2
  lgl$-           %272.4 = %272.3
  goto BB38
BB273   <- [270]
  fs              %273.0 = FrameState         R     0x5615010b0240+999: [%268.4, %270.1, %270.3], env=e0.3
  void                    Deopt              !v    %273.0, Typecheck@0x5615010a8200[Type#65], %270.3   !
BB238   <- [274]
  void                    Nop                !     
  lgl$-           %238.1 = %274.1
  goto BB45
BB42   <- [274]
  val?^ | miss    %42.0 = LdVar              eR    doExcluded, e0.3
  val?            %42.1 = Force!             !v    %42.0, e0.3   <val?_>
  lgl$#-          %42.2 = IsType                   %42.1 isA val?+
  void                    Branch                   %42.2 -> BB276 (if true) | BB277 (if false)
BB45   <- [238, 276]
  lgl$-           %45.0 = Phi                      %276.4:BB276, %238.1:BB238
  lgl$-           %45.1 = %45.0
  lgl$#-          %45.2 = CheckTrueFalse     e     %45.1
  void                    Branch                   %45.2 -> BB237 (if true) | BB46 (if false)
BB276   <- [42]
  val?+           %276.0 = CastType           d     dn %42.1   <val?_>
  lgl             %276.1 = Not                wed   %276.0, elided
  lgl$-           %276.2 = AsLogical          e     %276.1
  lgl$-           %276.3 = LAnd                     %274.1, %276.2
  lgl$-           %276.4 = %276.3
  goto BB45
BB277   <- [42]
  fs              %277.0 = FrameState         R     0x5615010b0240+1112: [%274.1, %42.1], env=e0.3
  void                    Deopt              !v    %277.0, Typecheck@0x5615010a8200[Type#71], %42.1   !
BB237   <- [45]
  (cls|spec|blt)  %237.0 = LdFun              !v    .sigLabel, e0.3
  fs              %237.1 = FrameState         R     0x5615010b0240+1136: [%237.0], env=e0.3
  void                    Deopt              !v    %237.1, DeadCall@0x5615010a8200[Call#33], %237.0   !
BB46   <- [45]
  val?^ | miss    %46.0 = LdVar              eR    classes, e0.3
  val?            %46.1 = Force!<wrapped>    !v    %46.0, e0.3   <(str|vec)$>
  val?            %46.2 = Extract2_1D        !v    %46.1, 1L, e0.3   <str$+>
  void                    StVar              lW    cl1, %46.2, e0.3
  val?^ | miss    %46.4 = LdVar              eR    getClass, e0.3
  lgl$#-          %46.5 = Identical                %46.4, function(Class, .Force=FALSE, where=.classEnv(|...
  void                    Branch                   %46.5 -> BB278 (if true) | BB279 (if false)
BB278   <- [46]
  prom-           %278.0 = MkArg                    unboundValue, .findInheritedMethods[0x5614fcb5fc60]_p15 (!refl), e0.3
  prom-           %278.1 = MkArg                    unboundValue, .findInheritedMethods[0x5614fcb5fc60]_p16, e0.3
  val?            %278.2 = StaticCall         !v    getClass[0x5614f9285120](%278.0, true, %278.1) { 0 2n 1n } e0.3   <other>
  void                    StVar              lW    def, %278.2, e0.3
  lgl$-           %278.4 = Missing            eR    useInherited, e0.3
  lgl$-           %278.5 = AsLogical                %278.4
  lgl$#-          %278.6 = Identical                %278.5, true
  void                    Branch                   %278.6 -> BB236 (if true) | BB49 (if false)
BB279   <- [46]
  fs              %279.0 = FrameState         R     0x5615010b0240+1502: [], env=e0.3
  void                    Deopt              !v    %279.0, CallTarget@0x5615010a8200[Call#37], %46.4   !
BB236   <- [278]
  void                    Nop                !     
  lgl$-           %236.1 = %278.5
  goto BB52
BB49   <- [278]
  val?^ | miss    %49.0 = LdVar              eR    useInherited, e0.3
  val?            %49.1 = Force!             !v    %49.0, e0.3   <val?_>
  lgl$#-          %49.2 = IsType                   %49.1 isA val?+
  void                    Branch                   %49.2 -> BB280 (if true) | BB281 (if false)
BB52   <- [236, 280]
  lgl$-           %52.0 = Phi                      %280.4:BB280, %236.1:BB236
  lgl$-           %52.1 = %52.0
  lgl$#-          %52.2 = CheckTrueFalse     e     %52.1
  void                    Branch                   %52.2 -> BB233 (if true) | BB55 (if false)
BB280   <- [49]
  val?+           %280.0 = CastType           d     dn %49.1   <val?_>
  val?            %280.1 = Extract2_1D        wed   %280.0, 1L, elided   <val?_>
  lgl$-           %280.2 = AsLogical          e     %280.1
  lgl$-           %280.3 = LOr                      %278.5, %280.2
  lgl$-           %280.4 = %280.3
  goto BB52
BB281   <- [49]
  fs              %281.0 = FrameState         R     0x5615010b0240+1592: [%278.5, %49.1], env=e0.3
  void                    Deopt              !v    %281.0, Typecheck@0x5615010a8200[Type#91], %49.1   !
BB233   <- [52]
  val?^ | miss    %233.0 = LdVar              eR    c, e0.3
  lgl$#-          %233.1 = Identical                <blt c>, %233.0   <true>
  void                    Branch                   %233.1 -> BB282 (if true) | BB283 (if false)
BB55   <- [52]
  val?^ | miss    %55.0 = LdVar              eR    cl1, e0.3
  val?            %55.1 = Force!             !v    %55.0, e0.3   <val?_>
  val?            %55.2 = %55.1
  goto BB56
BB282   <- [233]
  val?^ | miss    %282.0 = LdVar              eR    cl1, e0.3
  lgl$#-          %282.1 = IsType                   %282.0 isA val?~+ | miss
  void                    Branch                   %282.1 -> BB286 (if true) | BB287 (if false)
BB283   <- [233]
  void                    Nop                !     
  lgl$#-          %283.1 = %233.1
  dr              %283.2 = DeadBranchReached@0x5615010a8200[Test#10]
  goto BB53
BB56   <- [55, 296]
  val?            %56.0 = Phi                      %55.2:BB55, %296.2:BB296   <str->
  val?            %56.1 = %56.0
  void                    StVar              lW    labels, %56.1, e0.3
  val?^ | miss    %56.3 = LdVar              eR    list, e0.3
  lgl$#-          %56.4 = Identical                <blt list>, %56.3   <true>
  void                    Branch                   %56.4 -> BB284 (if true) | BB285 (if false)
BB286   <- [282]
  val?~+ | miss   %286.0 = CastType           d     dn %282.0
  val?+           %286.1 = Force!<value>            %286.0,    <str$+>
  val?^ | miss    %286.2 = LdVar              eR    .eligibleSuperClasses, e0.3
  lgl$#-          %286.3 = Identical                %286.2, function(contains, simpleOnly) <(rir::Dispatch|...
  void                    Branch                   %286.3 -> BB288 (if true) | BB289 (if false)
BB287   <- [282]
  void                    Nop                !     
  val?^ | miss    %287.1 = %282.0
  dr              %287.2 = Typecheck@0x5615010a8200[Type#100]
  goto BB53
BB53   <- [283, 287, 289]
  val?^ | miss    %53.0 = Phi                      %283.1:BB283, %287.1:BB287, %289.1:BB289
  val?^ | miss    %53.1 = %53.0
  dr              %53.2 = Phi                      %283.2:BB283, %287.2:BB287, %289.2:BB289
  dr              %53.3 = %53.2
  fs              %53.4 = FrameState         R     0x5615010b0240+1643: [%52.1], env=e0.3
  void                    Deopt              !v    %53.4, %53.3, %53.1   !
BB284   <- [56]
  val             %284.0 = ChkMissing         e     %56.1
  val+            %284.1 = CallSafeBuiltin    wed   list(%56.1)    <vec$->
  void                    StVar              lW    supersList, %284.1, e0.3
  val?^ | miss    %284.3 = LdVar              eR    vector, e0.3
  lgl$#-          %284.4 = Identical                %284.3, function(mode="logical", length=0L) <(rir::Dis|...
  void                    Branch                   %284.4 -> BB290 (if true) | BB291 (if false)
BB285   <- [56]
  fs              %285.0 = FrameState         R     0x5615010b0240+1831: [], env=e0.3
  void                    Deopt              !v    %285.0, DeadBranchReached@0x5615010a8200[Test#11], %56.4   !
BB288   <- [286]
  prom-           %288.0 = MkArg                    unboundValue, .findInheritedMethods[0x5614fcb5fc60]_p111, e0.3
  prom-           %288.1 = MkArg                    unboundValue, .findInheritedMethods[0x5614fcb5fc60]_p114, e0.3
  val?            %288.2 = StaticCall         !v    .eligibleSuperClasses[0x5614f942a190](%288.0, %288.1) e0.3   <str->
  lgl$#-          %288.3 = IsType                   %288.2 isA val?-
  void                    Branch                   %288.3 -> BB296 (if true) | BB297 (if false)
BB289   <- [286]
  void                    Nop                !     
  val?^ | miss    %289.1 = %286.2
  dr              %289.2 = CallTarget@0x5615010a8200[Call#41]
  goto BB53
BB290   <- [284]
  val?^ | miss    %290.0 = LdVar              eR    nargs, e0.3
  lgl$#-          %290.1 = IsType                   %290.0 isA int$-
  void                    Branch                   %290.1 -> BB292 (if true) | BB293 (if false)
BB291   <- [284]
  void                    Nop                !     
  val?^ | miss    %291.1 = %284.3
  dr              %291.2 = CallTarget@0x5615010a8200[Call#44]
  goto BB59
BB296   <- [288]
  val?-           %296.0 = CastType           d     dn %288.2   <str->
  (list|sym|char|lgl|int|real|str|vec|complex|raw|cls|spec|blt|prom|_|code|env|ast|expressions|dots|other)+ %296.1 = CallSafeBuiltin    wed   c(%286.1, %296.0, "ANY")    <str->
  (list|sym|char|lgl|int|real|str|vec|complex|raw|cls|spec|blt|prom|_|code|env|ast|expressions|dots|other)+ %296.2 = %296.1
  goto BB56
BB297   <- [288]
  fs              %297.0 = FrameState         R     0x5615010b0240+1789: [<blt c>, %286.1, %288.2], env=e0.3
  void                    Deopt              !v    %297.0, Typecheck@0x5615010a8200[Type#105], %288.2   !
BB292   <- [290]
  int$-           %292.0 = CastType           d     dn %290.0
  vec-            %292.1 = CallSafeBuiltin    wed   vector("list", %292.0)    <vec$->
  void                    StVar              lW    classDefs, %292.1, e0.3
  val?^ | miss    %292.3 = LdVar              eR    def, e0.3
  val?            %292.4 = Force!<value>      !v    %292.3, e0.3   <other>
  val?^ | miss    %292.5 = LdVar              eR    classDefs !upd, e0.3
  lgl$#-          %292.6 = IsType                   %292.5 isA val?~- | miss
  void                    Branch                   %292.6 -> BB294 (if true) | BB295 (if false)
BB293   <- [290]
  void                    Nop                !     
  val?^ | miss    %293.1 = %290.0
  dr              %293.2 = Typecheck@0x5615010a8200[Type#110]
  goto BB59
BB59   <- [291, 293]
  val?^ | miss    %59.0 = Phi                      %291.1:BB291, %293.1:BB293
  val?^ | miss    %59.1 = %59.0
  dr              %59.2 = Phi                      %291.2:BB291, %293.2:BB293
  dr              %59.3 = %59.2
  fs              %59.4 = FrameState         R     0x5615010b0240+1936: [], env=e0.3
  void                    Deopt              !v    %59.4, %59.3, %59.1   !
BB294   <- [292]
  val?~- | miss   %294.0 = CastType           d     dn %292.5
  val?-           %294.1 = Force!<value>            %294.0,    <vec$->
  val?            %294.2 = Subassign2_1D      !v    %292.4, %294.1, 1L, e0.3
  void                    StVar              lW    classDefs, %294.2, e0.3
  val?^ | miss    %294.4 = LdVar              eR    nargs, e0.3
  lgl$#-          %294.5 = IsType                   %294.4 isA int$-
  void                    Branch                   %294.5 -> BB298 (if true) | BB299 (if false)
BB295   <- [292]
  fs              %295.0 = FrameState         R     0x5615010b0240+1996: [%292.4], env=e0.3
  void                    Deopt              !v    %295.0, Typecheck@0x5615010a8200[Type#113], %292.5   !
BB298   <- [294]
  int$-           %298.0 = CastType           d     dn %294.4
  lgl$-           %298.1 = Gt                 d     %298.0, 1, elided   <lgl$->
  lgl$#-          %298.2 = CheckTrueFalse     e     %298.1
  void                    Branch                   %298.2 -> BB177 (if true) | BB65 (if false)
BB299   <- [294]
  fs              %299.0 = FrameState         R     0x5615010b0240+2031: [], env=e0.3
  void                    Deopt              !v    %299.0, Typecheck@0x5615010a8200[Type#114], %294.4   !
BB177   <- [298]
  lgl$#-          %177.0 = ColonInputEffects        2, %298.0   <@?>
  void                    Branch                   %177.0 -> BB179 (if true) | BB178 (if false)
BB65   <- [298]
  void                    Nop                !     
  goto BB66
BB179   <- [177]
  int$#-          %179.0 = ColonCastRhs       e     2L, %298.0   <val?_>
  lgl$#-          %179.1 = Lte                d     2L, %179.0, elided   <@?>
  void                    Branch                   %179.1 -> BB232 (if true) | BB180 (if false)
BB178   <- [177]
  int-            %178.0 = Colon              d     2L, %298.0, elided
  (cls|spec|blt)  %178.1 = LdFun              !v    for, e0.3
  prom-           %178.2 = MkArg                    %178.0, .findInheritedMethods[0x5614fcb5fc60]_p66 (!refl), e0.3
  prom-           %178.3 = MkArg                    unboundValue, .findInheritedMethods[0x5614fcb5fc60]_p67, e0.3
  val?            %178.4 = Call               !v    %178.1(%178.2, %178.3) e0.3
  goto BB66
BB66   <- [65, 178, 183]
  val?^ | miss    %66.0 = LdVar              eR    labels, e0.3
  lgl$#-          %66.1 = IsType                   %66.0 isA val?~- | miss
  void                    Branch                   %66.1 -> BB300 (if true) | BB301 (if false)
BB232   <- [179]
  void                    Nop                !     
  int$#-          %232.1 = 1L
  goto BB181
BB180   <- [179]
  void                    Nop                !     
  int$#-          %180.1 = -1L
  goto BB181
BB300   <- [66]
  val?~- | miss   %300.0 = CastType           d     dn %66.0
  val?-           %300.1 = Force!<value>            %300.0,    <str->
  lgl$#-          %300.2 = IsType                   %300.1 isA val+   <true>
  void                    Branch                   %300.2 -> BB302 (if true) | BB303 (if false)
BB301   <- [66]
  void                    Nop                !     
  val?^ | miss    %301.1 = %66.0
  dr              %301.2 = Typecheck@0x5615010a8200[Type#238]
  goto BB67
BB181   <- [232, 180]
  int$#-          %181.0 = Phi                      %232.1:BB232, %180.1:BB180
  int$#-          %181.1 = %181.0
  lgl$#-          %181.2 = Neq                d     %179.0, 2L, elided   <@?>
  void                    Branch                   %181.2 -> BB184 (if true) | BB182 (if false)
BB302   <- [300]
  val?            %302.0 = Extract1_1D        wed   %300.1, -1L, elided   <str->
  void                    StVar              lW    labels, %302.0, e0.3
  val?^ | miss    %302.2 = LdVar              eR    unique, e0.3
  lgl$#-          %302.3 = Identical                %302.2, function(x, incomparables=FALSE, ...) <(rir::D|...
  void                    Branch                   %302.3 -> BB304 (if true) | BB305 (if false)
BB303   <- [300]
  void                    Nop                !     
  lgl$#-          %303.1 = %300.2
  dr              %303.2 = DeadBranchReached@0x5615010a8200[Test#27]
  goto BB67
BB67   <- [301, 303]
  val?^ | miss    %67.0 = Phi                      %301.1:BB301, %303.1:BB303
  val?^ | miss    %67.1 = %67.0
  dr              %67.2 = Phi                      %301.2:BB301, %303.2:BB303
  dr              %67.3 = %67.2
  fs              %67.4 = FrameState         R     0x5615010b0240+3635: [], env=e0.3
  void                    Deopt              !v    %67.4, %67.3, %67.1   !
BB184   <- [181]
  void                    StVar              lW    i, 2L, e0.3
  int$-           %184.1 = Add                d     2L, %181.1, elided
  val?^ | miss    %184.2 = LdVar              eR    getClass, e0.3
  lgl$#-          %184.3 = Identical                %184.2, function(Class, .Force=FALSE, where=.classEnv(|...
  void                    Branch                   %184.3 -> BB306 (if true) | BB307 (if false)
BB182   <- [181]
  void                    Nop                !     
  goto BB183
BB304   <- [302]
  val             %304.0 = ChkMissing         e     %302.0
  val?            %304.1 = StaticCall         !v    unique[0x5614fc9b2720](%302.0) { 0 } e0.3   <str->
  void                    StVar              lW    labels, %304.1, e0.3
  val?^ | miss    %304.3 = LdVar              eR    verbose, e0.3
  val?            %304.4 = Force!<wrapped>    !v    %304.3, e0.3   <lgl$->
  lgl$#-          %304.5 = CheckTrueFalse     we    %304.4
  void                    Branch                   %304.5 -> BB176 (if true) | BB73 (if false)
BB305   <- [302]
  fs              %305.0 = FrameState         R     0x5615010b0240+3703: [], env=e0.3
  void                    Deopt              !v    %305.0, CallTarget@0x5615010a8200[Call#80], %302.2   !
BB306   <- [184]
  prom-           %306.0 = MkArg                    unboundValue, .findInheritedMethods[0x5614fcb5fc60]_p87, e0.3
  prom-           %306.1 = MkArg                    unboundValue, .findInheritedMethods[0x5614fcb5fc60]_p89, e0.3
  val?            %306.2 = StaticCall         !v    getClass[0x5614fc559130](%306.0, true, %306.1) { 0 2n 1n } e0.3   <other>
  val?^ | miss    %306.3 = LdVar              eR    classDefs !upd, e0.3
  lgl$#-          %306.4 = IsType                   %306.3 isA val?~- | miss
  void                    Branch                   %306.4 -> BB310 (if true) | BB311 (if false)
BB307   <- [184]
  fs              %307.0 = FrameState         R     0x5615010b0240+2212: [%181.1, %179.0, 2L], env=e0.3
  void                    Deopt              !v    %307.0, CallTarget@0x5615010a8200[Call#54], %184.2   !
BB183   <- [229, 182]
  void                    Nop                !     
  goto BB66
BB176   <- [304]
  (cls|spec|blt)  %176.0 = LdFun              !v    cat, e0.3
  fs              %176.1 = FrameState         R     0x5615010b0240+3779: [%176.0], env=e0.3
  void                    Deopt              !v    %176.1, DeadCall@0x5615010a8200[Call#81], %176.0   !
BB73   <- [304]
  val?^ | miss    %73.0 = LdVar              eR    names, e0.3
  lgl$#-          %73.1 = Identical                <blt names>, %73.0   <true>
  void                    Branch                   %73.1 -> BB308 (if true) | BB309 (if false)
BB310   <- [306]
  val?~- | miss   %310.0 = CastType           d     dn %306.3
  val?-           %310.1 = Force!<value>            %310.0,    <vec->
  val?^ | miss    %310.2 = LdVar              eR    i, e0.3
  lgl$#-          %310.3 = IsType                   %310.2 isA int$-
  void                    Branch                   %310.3 -> BB312 (if true) | BB313 (if false)
BB311   <- [306]
  void                    Nop                !     
  val?^ | miss    %311.1 = %306.3
  dr              %311.2 = Typecheck@0x5615010a8200[Type#158]
  goto BB187
BB308   <- [73]
  val?^ | miss    %308.0 = LdVar              eR    table, e0.3
  val?            %308.1 = Force!<wrapped>    !v    %308.0, e0.3   <env->
  lgl$#-          %308.2 = IsType                   %308.1 isA val?-
  void                    Branch                   %308.2 -> BB314 (if true) | BB315 (if false)
BB309   <- [73]
  fs              %309.0 = FrameState         R     0x5615010b0240+3764: [%304.5], env=e0.3
  void                    Deopt              !v    %309.0, DeadBranchReached@0x5615010a8200[Test#28], %73.1   !
BB312   <- [310]
  int$-           %312.0 = CastType           d     dn %310.2
  val?            %312.1 = Subassign2_1D      !v    %306.2, %310.1, %312.0, e0.3
  void                    StVar              lW    classDefs, %312.1, e0.3
  void                    StVar              lW    cc, %306.2, e0.3
  lgl$-           %312.4 = Missing            eR    useInherited, e0.3
  lgl$-           %312.5 = AsLogical                %312.4
  lgl$#-          %312.6 = Identical                %312.5, true
  void                    Branch                   %312.6 -> BB231 (if true) | BB189 (if false)
BB313   <- [310]
  void                    Nop                !     
  val?^ | miss    %313.1 = %310.2
  dr              %313.2 = Typecheck@0x5615010a8200[Type#159]
  goto BB187
BB187   <- [311, 313]
  val?^ | miss    %187.0 = Phi                      %311.1:BB311, %313.1:BB313
  val?^ | miss    %187.1 = %187.0
  dr              %187.2 = Phi                      %311.2:BB311, %313.2:BB313
  dr              %187.3 = %187.2
  fs              %187.4 = FrameState         R     0x5615010b0240+2273: [%181.1, %179.0, %184.1, %306.2], env=e0.3
  void                    Deopt              !v    %187.4, %187.3, %187.1   !
BB314   <- [308]
  val?-           %314.0 = CastType           d     dn %308.1   <env->
  val+            %314.1 = CallSafeBuiltin    wed   names(%314.0)    <str->
  void                    StVar              lW    allMethods, %314.1, e0.3
  val?^ | miss    %314.3 = LdVar              eR    match, e0.3
  lgl$#-          %314.4 = Identical                %314.3, function(x, table, nomatch=NA, incomparables=N|...
  void                    Branch                   %314.4 -> BB316 (if true) | BB317 (if false)
BB315   <- [308]
  fs              %315.0 = FrameState         R     0x5615010b0240+3984: [<blt names>, %308.1], env=e0.3
  void                    Deopt              !v    %315.0, Typecheck@0x5615010a8200[Type#249], %308.1   !
BB231   <- [312]
  void                    Nop                !     
  lgl$-           %231.1 = %312.5
  goto BB192
BB189   <- [312]
  val?^ | miss    %189.0 = LdVar              eR    useInherited, e0.3
  val?            %189.1 = Force!             !v    %189.0, e0.3   <val?_>
  lgl$#-          %189.2 = IsType                   %189.1 isA val+   <@?>
  void                    Branch                   %189.2 -> BB230 (if true) | BB190 (if false)
BB316   <- [314]
  val?^ | miss    %316.0 = LdVar              eR    labels, e0.3
  lgl$#-          %316.1 = IsType                   %316.0 isA val?~- | miss
  void                    Branch                   %316.1 -> BB318 (if true) | BB319 (if false)
BB317   <- [314]
  void                    Nop                !     
  val?^ | miss    %317.1 = %314.3
  dr              %317.2 = CallTarget@0x5615010a8200[Call#86]
  goto BB76
BB192   <- [231, 191]
  lgl$-           %192.0 = Phi                      %191.5:BB191, %231.1:BB231
  lgl$-           %192.1 = %192.0
  lgl$#-          %192.2 = CheckTrueFalse     e     %192.1
  void                    Branch                   %192.2 -> BB196 (if true) | BB195 (if false)
BB230   <- [189]
  val?^ | miss    %230.0 = LdVar              eR    i, e0.3
  val?            %230.1 = Force!             !v    %230.0, e0.3   <val?_>
  val?            %230.2 = %230.1
  goto BB191
BB190   <- [189]
  prom-           %190.0 = MkArg                    unboundValue, .findInheritedMethods[0x5614fcb5fc60]_p110, e0.3
  prom-           %190.1 = %190.0
  goto BB191
BB318   <- [316]
  val?~- | miss   %318.0 = CastType           d     dn %316.0
  val?-           %318.1 = Force!<value>            %318.0,    <str->
  val?^ | miss    %318.2 = LdVar              eR    .fillSignatures, e0.3
  lgl$#-          %318.3 = Identical                %318.2, function(sigs, n) <(rir::DispatchTable*)0x5614|...
  void                    Branch                   %318.3 -> BB320 (if true) | BB321 (if false)
BB319   <- [316]
  void                    Nop                !     
  val?^ | miss    %319.1 = %316.0
  dr              %319.2 = Typecheck@0x5615010a8200[Type#251]
  goto BB76
BB76   <- [317, 319, 321]
  val?^ | miss    %76.0 = Phi                      %317.1:BB317, %319.1:BB319, %321.1:BB321
  val?^ | miss    %76.1 = %76.0
  dr              %76.2 = Phi                      %317.2:BB317, %319.2:BB319, %321.2:BB321
  dr              %76.3 = %76.2
  fs              %76.4 = FrameState         R     0x5615010b0240+4020: [], env=e0.3
  void                    Deopt              !v    %76.4, %76.3, %76.1   !
BB196   <- [192]
  val?^ | miss    %196.0 = LdVar              eR    c, e0.3
  lgl$#-          %196.1 = Identical                <blt c>, %196.0   <true>
  void                    Branch                   %196.1 -> BB322 (if true) | BB323 (if false)
BB195   <- [192]
  (cls|spec|blt)  %195.0 = LdFun              !v    @, e0.3
  fs              %195.1 = FrameState         R     0x5615010b0240+2420: [%181.1, %179.0, %184.1, %195.0], env=e0.3
  void                    Deopt              !v    %195.1, DeadCall@0x5615010a8200[Call#55], %195.0   !
BB191   <- [190, 230]
  val?            %191.0 = Phi                      %230.2:BB230, %190.1:BB190
  val?            %191.1 = %191.0
  val?            %191.2 = Extract2_1D        !v    %189.1, %191.1, e0.3   <val?_>
  lgl$-           %191.3 = AsLogical          e     %191.2
  lgl$-           %191.4 = LOr                      %312.5, %191.3
  lgl$-           %191.5 = %191.4
  goto BB192
BB320   <- [318]
  prom-           %320.0 = MkArg                    unboundValue, .findInheritedMethods[0x5614fcb5fc60]_p22 (!refl), e0.3
  prom-           %320.1 = MkArg                    unboundValue, .findInheritedMethods[0x5614fcb5fc60]_p23, e0.3
  val?            %320.2 = StaticCall         !v    unknown--fromConstant[0x5614fa94dd00](%320.0, %320.1) from function(sigs, n) <(rir::DispatchTable*)0x5614|... { 0 1 } e0.3   <str->
  lgl$#-          %320.3 = IsType                   %320.2 isA val?+
  void                    Branch                   %320.3 -> BB324 (if true) | BB325 (if false)
BB321   <- [318]
  void                    Nop                !     
  val?^ | miss    %321.1 = %318.2
  dr              %321.2 = CallTarget@0x5615010a8200[Call#87]
  goto BB76
BB322   <- [196]
  (cls|spec|blt)  %322.0 = LdFun              !v    @, <0x5614f88a6bd8>, e0.3
  prom-           %322.1 = MkArg                    unboundValue, .findInheritedMethods[0x5614fcb5fc60]_p90, e0.3
  prom-           %322.2 = MkArg                    unboundValue, .findInheritedMethods[0x5614fcb5fc60]_p91, e0.3
  val?            %322.3 = Call               !v    %322.0(%322.1, %322.2) e0.3   <str$+>
  val?^ | miss    %322.4 = LdVar              eR    .eligibleSuperClasses, e0.3
  lgl$#-          %322.5 = Identical                %322.4, function(contains, simpleOnly) <(rir::Dispatch|...
  void                    Branch                   %322.5 -> BB326 (if true) | BB327 (if false)
BB323   <- [196]
  fs              %323.0 = FrameState         R     0x5615010b0240+2409: [%181.1, %179.0, %184.1, %192.1], env=e0.3
  void                    Deopt              !v    %323.0, DeadBranchReached@0x5615010a8200[Test#19], %196.1   !
BB324   <- [320]
  val?+           %324.0 = CastType           d     dn %320.2   <str->
  val+            %324.1 = CallSafeBuiltin    wed   match(%318.1, %324.0, NA, nil)    <int->
  void                    StVar              lW    m, %324.1, e0.3
  lgl$#-          %324.3 = IsType                   %324.1 isA int-
  val?^ | miss    %324.4 = LdVar              eR    is.na, e0.3
  lgl$#-          %324.5 = Identical                <blt is.na>, %324.4   <true>
  void                    Branch                   %324.5 -> BB332 (if true) | BB333 (if false)
BB325   <- [320]
  fs              %325.0 = FrameState         R     0x5615010b0240+4057: [], env=e0.3
  prom-           %325.1 = MkArg                    unboundValue, .findInheritedMethods[0x5614fcb5fc60]_p21, e0.3
  val?^           %325.2 = CastType                 up %325.1
  prom-           %325.3 = MkArg                    %318.1, .findInheritedMethods[0x5614fcb5fc60]_p20 (!refl), e0.3
  val?~           %325.4 = CastType                 up %325.3
  env             e325.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%325.2, x=%325.4, parent=R_BaseNamespace, context 0
  fs              %325.6 = FrameState         R     0x5614f90bbd40+23: [%318.1], env=e325.5, next=%325.0
  fs              %325.7 = FrameState         R     0x5614ffd7fec0+37(pr): [%320.2], env=e0.3, next=%325.6
  void                    Deopt              !v    %325.7, Typecheck@0x5614f910ecb0[Type#1], %320.2   !
BB326   <- [322]
  prom-           %326.0 = MkArg                    unboundValue, .findInheritedMethods[0x5614fcb5fc60]_p92, e0.3
  prom-           %326.1 = MkArg                    unboundValue, .findInheritedMethods[0x5614fcb5fc60]_p95, e0.3
  val?            %326.2 = StaticCall         !v    .eligibleSuperClasses[0x5614f942a190](%326.0, %326.1) e0.3   <(nil|str)->
  lgl$#-          %326.3 = IsType                   %326.2 isA val?-
  lgl$#-          %326.4 = IsType                   %322.3 isA val?+
  void                    Branch                   %326.4 -> BB328 (if true) | BB329 (if false)
BB327   <- [322]
  fs              %327.0 = FrameState         R     0x5615010b0240+2569: [%181.1, %179.0, %184.1, <blt c>, %322.3], env=e0.3
  void                    Deopt              !v    %327.0, CallTarget@0x5615010a8200[Call#61], %322.4   !
BB332   <- [324]
  void                    Branch                   %324.3 -> BB336 (if true) | BB337 (if false)
BB333   <- [324]
  void                    Nop                !     
  lgl$#-          %333.1 = %324.5
  dr              %333.2 = DeadBranchReached@0x5615010a8200[Test#29]
  goto BB80
BB328   <- [326]
  val?+           %328.0 = CastType           d     dn %322.3   <str$+>
  void                    Branch                   %326.3 -> BB330 (if true) | BB331 (if false)
BB329   <- [326]
  void                    Nop                !     
  val?            %329.1 = %322.3
  dr              %329.2 = Typecheck@0x5615010a8200[Type#177]
  goto BB199
BB336   <- [332]
  int-            %336.0 = CastType           d     dn %324.1
  lgl-            %336.1 = CallSafeBuiltin    wed   is.na(%336.0)    <lgl->
  lgl-            %336.2 = Not                wed   %336.1, elided
  void                    StVar              lW    found, %336.2, e0.3
  val?^ | miss    %336.4 = LdVar              eR    mget, e0.3
  lgl$#-          %336.5 = Identical                %336.4, function(x, envir=as.environment(-(1L)), mode=|...
  void                    Branch                   %336.5 -> BB338 (if true) | BB339 (if false)
BB337   <- [332]
  void                    Nop                !     
  val+            %337.1 = %324.1
  dr              %337.2 = Typecheck@0x5615010a8200[Type#256]
  goto BB80
BB80   <- [333, 337]
  val?^ | miss    %80.0 = Phi                      %333.1:BB333, %337.1:BB337
  val?^ | miss    %80.1 = %80.0
  dr              %80.2 = Phi                      %333.2:BB333, %337.2:BB337
  dr              %80.3 = %80.2
  fs              %80.4 = FrameState         R     0x5615010b0240+4071: [], env=e0.3
  void                    Deopt              !v    %80.4, %80.3, %80.1   !
BB330   <- [328]
  val?-           %330.0 = CastType           d     dn %326.2   <(nil|str)->
  (list|sym|char|lgl|int|real|str|vec|complex|raw|cls|spec|blt|prom|_|code|env|ast|expressions|dots|other)+ %330.1 = CallSafeBuiltin    wed   c(%328.0, %330.0, "ANY")    <str->
  void                    StVar              lW    allLabels, %330.1, e0.3
  val?^ | miss    %330.3 = LdVar              eR    outerLabels, e0.3
  lgl$#-          %330.4 = Identical                %330.3, function(labels, new) <(rir::DispatchTable*)0x|...
  void                    Branch                   %330.4 -> BB334 (if true) | BB335 (if false)
BB331   <- [328]
  void                    Nop                !     
  val?            %331.1 = %326.2
  dr              %331.2 = Typecheck@0x5615010a8200[Type#182]
  goto BB199
BB199   <- [329, 331]
  val?^ | miss    %199.0 = Phi                      %329.1:BB329, %331.1:BB331
  val?^ | miss    %199.1 = %199.0
  dr              %199.2 = Phi                      %329.2:BB329, %331.2:BB331
  dr              %199.3 = %199.2
  fs              %199.4 = FrameState         R     0x5615010b0240+2611: [%181.1, %179.0, %184.1, <blt c>, %322.3, %326.2], env=e0.3
  void                    Deopt              !v    %199.4, %199.3, %199.1   !
BB338   <- [336]
  prom-           %338.0 = MkArg                    unboundValue, .findInheritedMethods[0x5614fcb5fc60]_p25, e0.3
  prom-           %338.1 = MkArg                    unboundValue, .findInheritedMethods[0x5614fcb5fc60]_p29, e0.3
  ct              %338.2 = PushContext        lCL   %338.0, %338.1, mget([(allMethods, [(m, found)), table), function(x, envir=as.environment(-(1L)), mode=|..., e0.3
  val?^           %338.3 = CastType                 up %338.1
  val?^           %338.4 = CastType                 up %338.0
  env             e338.5 = MkEnv              l     x=%338.4, envir=%338.3, mode(miss)="any", ifnotfound(miss)=missingArg, inherits(miss)=false, parent=R_BaseNamespace, context 1
  cls             %338.6 = MkCls                    mget@133, e338.5
  val?            %338.7 = Force!<lazy>       !vL   %338.4, e338.5   <str+>
  val?            %338.8 = Force!<lazy>       !vL   %338.3, e338.5   <env->
  val+            %338.9 = CallSafeBuiltin    wed   list(%338.6)    <vec$->
  val?            %338.10 = CallBuiltin        !v    mget(%338.7, %338.8, "any", %338.9, false) e338.5
  val?            %338.11 = PopContext         C     %338.10, %338.2   <vec+>
  void                    StVar              lW    methods, %338.11, e0.3
  val?^ | miss    %338.13 = LdVar              eR    verbose, e0.3
  val?            %338.14 = Force!<wrapped>    !v    %338.13, e0.3   <lgl$->
  lgl$#-          %338.15 = CheckTrueFalse     we    %338.14
  void                    Branch                   %338.15 -> BB175 (if true) | BB86 (if false)
BB339   <- [336]
  fs              %339.0 = FrameState         R     0x5615010b0240+4177: [], env=e0.3
  void                    Deopt              !v    %339.0, CallTarget@0x5615010a8200[Call#90], %336.4   !
BB334   <- [330]
  prom-           %334.0 = MkArg                    unboundValue, .findInheritedMethods[0x5614fcb5fc60]_p96, e0.3
  prom-           %334.1 = MkArg                    unboundValue, .findInheritedMethods[0x5614fcb5fc60]_p97 (!refl), e0.3
  val?            %334.2 = StaticCall         !v    outerLabels[0x5614ffa3a680](%334.0, %334.1) e0.3   <str->
  void                    StVar              lW    labels, %334.2, e0.3
  val?^ | miss    %334.4 = LdVar              eR    c, e0.3
  lgl$#-          %334.5 = Identical                <blt c>, %334.4   <true>
  void                    Branch                   %334.5 -> BB340 (if true) | BB341 (if false)
BB335   <- [330]
  fs              %335.0 = FrameState         R     0x5615010b0240+2653: [%181.1, %179.0, %184.1], env=e0.3
  void                    Deopt              !v    %335.0, CallTarget@0x5615010a8200[Call#63], %330.3   !
BB175   <- [338]
  (cls|spec|blt)  %175.0 = LdFun              !v    cat, e0.3
  fs              %175.1 = FrameState         R     0x5615010b0240+4258: [%175.0], env=e0.3
  void                    Deopt              !v    %175.1, DeadCall@0x5615010a8200[Call#91], %175.0   !
BB86   <- [338]
  val?^ | miss    %86.0 = LdVar              eR    hasGroup, e0.3
  lgl$#-          %86.1 = IsType                   %86.0 isA lgl$-
  void                    Branch                   %86.1 -> BB344 (if true) | BB345 (if false)
BB340   <- [334]
  val?^ | miss    %340.0 = LdVar              eR    supersList, e0.3
  lgl$#-          %340.1 = IsType                   %340.0 isA val?~- | miss
  void                    Branch                   %340.1 -> BB342 (if true) | BB343 (if false)
BB341   <- [334]
  void                    Nop                !     
  lgl$#-          %341.1 = %334.5
  dr              %341.2 = DeadBranchReached@0x5615010a8200[Test#20]
  goto BB203
BB344   <- [86]
  lgl$-           %344.0 = CastType           d     dn %86.0
  lgl$#-          %344.1 = CheckTrueFalse     e     %344.0
  void                    Branch                   %344.1 -> BB174 (if true) | BB87 (if false)
BB345   <- [86]
  fs              %345.0 = FrameState         R     0x5615010b0240+4243: [%338.15], env=e0.3
  void                    Deopt              !v    %345.0, Typecheck@0x5615010a8200[Type#275], %86.0   !
BB342   <- [340]
  val?~- | miss   %342.0 = CastType           d     dn %340.0
  val?-           %342.1 = Force!<value>            %342.0,    <vec$->
  val?^ | miss    %342.2 = LdVar              eR    list, e0.3
  lgl$#-          %342.3 = Identical                <blt list>, %342.2   <true>
  void                    Branch                   %342.3 -> BB346 (if true) | BB347 (if false)
BB343   <- [340]
  void                    Nop                !     
  val?^ | miss    %343.1 = %340.0
  dr              %343.2 = Typecheck@0x5615010a8200[Type#190]
  goto BB203
BB203   <- [341, 343, 347, 349]
  val?^ | miss    %203.0 = Phi                      %341.1:BB341, %343.1:BB343, %347.1:BB347, %349.1:BB349
  val?^ | miss    %203.1 = %203.0
  dr              %203.2 = Phi                      %341.2:BB341, %343.2:BB343, %347.2:BB347, %349.2:BB349
  dr              %203.3 = %203.2
  fs              %203.4 = FrameState         R     0x5615010b0240+2704: [%181.1, %179.0, %184.1], env=e0.3
  void                    Deopt              !v    %203.4, %203.3, %203.1   !
BB174   <- [344]
  (cls|spec|blt)  %174.0 = LdFun              !v    .getGroupMethods, e0.3
  fs              %174.1 = FrameState         R     0x5615010b0240+4377: [%174.0], env=e0.3
  void                    Deopt              !v    %174.1, DeadCall@0x5615010a8200[Call#95], %174.0   !
BB87   <- [344]
  (cls|spec|blt)  %87.0 = LdFun              !v    rep, <0x5614f88bb9b0>, e0.3
  prom-           %87.1 = MkArg                    unboundValue, .findInheritedMethods[0x5614fcb5fc60]_p30, e0.3
  val?            %87.2 = Call               !v    %87.0(false, %87.1) e0.3   <lgl->
  void                    StVar              lW    fromGroup, %87.2, e0.3
  val?^ | miss    %87.4 = LdVar              eR    .duplicateClassesExist, e0.3
  lgl$#-          %87.5 = Identical                %87.4, function(on) <(rir::DispatchTable*)0x5614fcb6d|...
  void                    Branch                   %87.5 -> BB354 (if true) | BB355 (if false)
BB346   <- [342]
  val?^ | miss    %346.0 = LdVar              eR    allLabels, e0.3
  lgl$#-          %346.1 = IsType                   %346.0 isA val?~- | miss
  void                    Branch                   %346.1 -> BB348 (if true) | BB349 (if false)
BB347   <- [342]
  void                    Nop                !     
  lgl$#-          %347.1 = %342.3
  dr              %347.2 = DeadBranchReached@0x5615010a8200[Test#21]
  goto BB203
BB354   <- [87]
  val?            %354.0 = StaticCall         !v    .duplicateClassesExist[0x5614fba9c490]() e0.3   <lgl$->
  lgl$#-          %354.1 = IsType                   %354.0 isA lgl$-
  void                    Branch                   %354.1 -> BB356 (if true) | BB357 (if false)
BB355   <- [87]
  fs              %355.0 = FrameState         R     0x5615010b0240+4367: [], env=e0.3
  void                    Deopt              !v    %355.0, CallTarget@0x5615010a8200[Call#108], %87.4   !
BB348   <- [346]
  val?~- | miss   %348.0 = CastType           d     dn %346.0
  val?-           %348.1 = Force!<value>            %348.0,    <str->
  val+            %348.2 = CallSafeBuiltin    wed   list(%348.1)    <vec$->
  val+            %348.3 = CallSafeBuiltin    wed   c(%342.1, %348.2)    <vec->
  void                    StVar              lW    supersList, %348.3, e0.3
  int$-           %348.5 = %184.1
  goto BB205
BB349   <- [346]
  void                    Nop                !     
  val?^ | miss    %349.1 = %346.0
  dr              %349.2 = Typecheck@0x5615010a8200[Type#192]
  goto BB203
BB356   <- [354]
  lgl$-           %356.0 = CastType           d     dn %354.0
  lgl$#-          %356.1 = CheckTrueFalse     e     %356.0
  void                    Branch                   %356.1 -> BB173 (if true) | BB92 (if false)
BB357   <- [354]
  void                    Nop                !     
  val?            %357.1 = %354.0
  dr              %357.2 = Typecheck@0x5615010a8200[Type#304]
  goto BB90
BB205   <- [348, 432]
  int$-           %205.0 = Phi                      %348.5:BB348, %432.5:BB432
  int$-           %205.1 = %205.0
  lgl$-           %205.2 = Neq                d     %179.0, %205.1, elided
  lgl$#-          %205.3 = Identical                %205.2, false
  void                    Branch                   %205.3 -> BB229 (if true) | BB206 (if false)
BB173   <- [356]
  (cls|spec|blt)  %173.0 = LdFun              !v    integer, e0.3
  fs              %173.1 = FrameState         R     0x5615010b0240+4848: [%173.0], env=e0.3
  void                    Deopt              !v    %173.1, DeadCall@0x5615010a8200[Call#109], %173.0   !
BB92   <- [356]
  val?^ | miss    %92.0 = LdVar              eR    doExcluded, e0.3
  lgl$#-          %92.1 = IsType                   %92.0 isA lgl$-
  void                    Branch                   %92.1 -> BB360 (if true) | BB361 (if false)
BB90   <- [357, 361, 363, 365, 367, 369, 371]
  val?^ | miss    %90.0 = Phi                      %357.1:BB357, %361.1:BB361, %363.1:BB363, %365.1:BB365, %367.1:BB367, %369.1:BB369, %371.1:BB371
  val?^ | miss    %90.1 = %90.0
  dr              %90.2 = Phi                      %357.2:BB357, %361.2:BB361, %363.2:BB363, %365.2:BB365, %367.2:BB367, %369.2:BB369, %371.2:BB371
  dr              %90.3 = %90.2
  fs              %90.4 = FrameState         R     0x5615010b0240+4827: [%354.0], env=e0.3
  void                    Deopt              !v    %90.4, %90.3, %90.1   !
BB229   <- [205]
  void                    Nop                !     
  goto BB183
BB206   <- [205]
  void                    StVar              lW    i, %205.1, e0.3
  int$-           %206.1 = Add                d     %205.1, %181.1, elided
  val?^ | miss    %206.2 = LdVar              eR    getClass, e0.3
  lgl$#-          %206.3 = Identical                %206.2, function(Class, .Force=FALSE, where=.classEnv(|...
  void                    Branch                   %206.3 -> BB350 (if true) | BB351 (if false)
BB360   <- [92]
  lgl$-           %360.0 = CastType           d     dn %92.0
  lgl$#-          %360.1 = CheckTrueFalse     e     %360.0
  void                    Branch                   %360.1 -> BB166 (if true) | BB93 (if false)
BB361   <- [92]
  void                    Nop                !     
  val?^ | miss    %361.1 = %92.0
  dr              %361.2 = Typecheck@0x5615010a8200[Type#363]
  goto BB90
BB350   <- [206]
  prom-           %350.0 = MkArg                    unboundValue, .findInheritedMethods[0x5614fcb5fc60]_p98, e0.3
  prom-           %350.1 = MkArg                    unboundValue, .findInheritedMethods[0x5614fcb5fc60]_p100, e0.3
  val?            %350.2 = StaticCall         !v    getClass[0x5614fc559130](%350.0, true, %350.1) { 0 2n 1n } e0.3   <other>
  val?^ | miss    %350.3 = LdVar              eR    classDefs !upd, e0.3
  lgl$#-          %350.4 = IsType                   %350.3 isA val?~- | miss
  void                    Branch                   %350.4 -> BB352 (if true) | BB353 (if false)
BB351   <- [206]
  fs              %351.0 = FrameState         R     0x5615010b0240+2927: [%181.1, %179.0, %205.1], env=e0.3
  void                    Deopt              !v    %351.0, CallTarget@0x5615010a8200[Call#67], %206.2   !
BB166   <- [360]
  val?^ | miss    %166.0 = LdVar              eR    methods, e0.3
  lgl$#-          %166.1 = IsType                   %166.0 isA val?~+ | miss
  void                    Branch                   %166.1 -> BB362 (if true) | BB363 (if false)
BB93   <- [360]
  void                    Nop                !     
  goto BB94
BB352   <- [350]
  val?~- | miss   %352.0 = CastType           d     dn %350.3
  val?-           %352.1 = Force!<value>            %352.0,    <vec->
  val?^ | miss    %352.2 = LdVar              eR    i, e0.3
  lgl$#-          %352.3 = IsType                   %352.2 isA int$-
  void                    Branch                   %352.3 -> BB358 (if true) | BB359 (if false)
BB353   <- [350]
  void                    Nop                !     
  val?^ | miss    %353.1 = %350.3
  dr              %353.2 = Typecheck@0x5615010a8200[Type#201]
  goto BB209
BB362   <- [166]
  val?~+ | miss   %362.0 = CastType           d     dn %166.0
  val?+           %362.1 = Force!<value>            %362.0,    <vec+>
  lgl$#-          %362.2 = IsType                   %362.1 isA val+   <true>
  void                    Branch                   %362.2 -> BB364 (if true) | BB365 (if false)
BB363   <- [166]
  void                    Nop                !     
  val?^ | miss    %363.1 = %166.0
  dr              %363.2 = Typecheck@0x5615010a8200[Type#376]
  goto BB90
BB94   <- [93, 388]
  val?^ | miss    %94.0 = LdVar              eR    length, e0.3
  lgl$#-          %94.1 = Identical                <blt length>, %94.0   <true>
  void                    Branch                   %94.1 -> BB380 (if true) | BB381 (if false)
BB358   <- [352]
  int$-           %358.0 = CastType           d     dn %352.2
  val?            %358.1 = Subassign2_1D      !v    %350.2, %352.1, %358.0, e0.3
  void                    StVar              lW    classDefs, %358.1, e0.3
  void                    StVar              lW    cc, %350.2, e0.3
  lgl$-           %358.4 = Missing            eR    useInherited, e0.3
  lgl$-           %358.5 = AsLogical                %358.4
  lgl$#-          %358.6 = Identical                %358.5, true
  void                    Branch                   %358.6 -> BB228 (if true) | BB211 (if false)
BB359   <- [352]
  void                    Nop                !     
  val?^ | miss    %359.1 = %352.2
  dr              %359.2 = Typecheck@0x5615010a8200[Type#202]
  goto BB209
BB209   <- [353, 359]
  val?^ | miss    %209.0 = Phi                      %353.1:BB353, %359.1:BB359
  val?^ | miss    %209.1 = %209.0
  dr              %209.2 = Phi                      %353.2:BB353, %359.2:BB359
  dr              %209.3 = %209.2
  fs              %209.4 = FrameState         R     0x5615010b0240+2988: [%181.1, %179.0, %206.1, %350.2], env=e0.3
  void                    Deopt              !v    %209.4, %209.3, %209.1   !
BB364   <- [362]
  val?^ | miss    %364.0 = LdVar              eR    is.na, e0.3
  lgl$#-          %364.1 = Identical                <blt is.na>, %364.0   <true>
  void                    Branch                   %364.1 -> BB366 (if true) | BB367 (if false)
BB365   <- [362]
  void                    Nop                !     
  lgl$#-          %365.1 = %362.2
  dr              %365.2 = DeadBranchReached@0x5615010a8200[Test#48]
  goto BB90
BB380   <- [94]
  val?^ | miss    %380.0 = LdVar              eR    methods, e0.3
  lgl$#-          %380.1 = IsType                   %380.0 isA val?~+ | miss
  void                    Branch                   %380.1 -> BB382 (if true) | BB383 (if false)
BB381   <- [94]
  void                    Nop                !     
  lgl$#-          %381.1 = %94.1
  dr              %381.2 = DeadBranchReached@0x5615010a8200[Test#50]
  goto BB95
BB228   <- [358]
  void                    Nop                !     
  lgl$-           %228.1 = %358.5
  goto BB214
BB211   <- [358]
  val?^ | miss    %211.0 = LdVar              eR    useInherited, e0.3
  val?            %211.1 = Force!             !v    %211.0, e0.3   <val?_>
  lgl$#-          %211.2 = IsType                   %211.1 isA val+   <@?>
  void                    Branch                   %211.2 -> BB227 (if true) | BB212 (if false)
BB366   <- [364]
  val?^ | miss    %366.0 = LdVar              eR    match, e0.3
  lgl$#-          %366.1 = Identical                %366.0, function(x, table, nomatch=NA, incomparables=N|...
  void                    Branch                   %366.1 -> BB368 (if true) | BB369 (if false)
BB367   <- [364]
  void                    Nop                !     
  lgl$#-          %367.1 = %364.1
  dr              %367.2 = DeadBranchReached@0x5615010a8200[Test#49]
  goto BB90
BB382   <- [380]
  val?~+ | miss   %382.0 = CastType           d     dn %380.0
  val?+           %382.1 = Force!<value>            %382.0,    <vec+>
  (int|real)$-    %382.2 = CallSafeBuiltin    wed   length(%382.1)    <int$->
  lgl$#-          %382.3 = IsType                   %382.2 isA int$-
  void                    Branch                   %382.3 -> BB386 (if true) | BB387 (if false)
BB383   <- [380]
  void                    Nop                !     
  val?^ | miss    %383.1 = %380.0
  dr              %383.2 = Typecheck@0x5615010a8200[Type#384]
  goto BB95
BB95   <- [381, 383]
  val?^ | miss    %95.0 = Phi                      %381.1:BB381, %383.1:BB383
  val?^ | miss    %95.1 = %95.0
  dr              %95.2 = Phi                      %381.2:BB381, %383.2:BB383
  dr              %95.3 = %95.2
  fs              %95.4 = FrameState         R     0x5615010b0240+6458: [], env=e0.3
  void                    Deopt              !v    %95.4, %95.3, %95.1   !
BB214   <- [228, 213]
  lgl$-           %214.0 = Phi                      %213.5:BB213, %228.1:BB228
  lgl$-           %214.1 = %214.0
  lgl$#-          %214.2 = CheckTrueFalse     e     %214.1
  void                    Branch                   %214.2 -> BB218 (if true) | BB217 (if false)
BB227   <- [211]
  val?^ | miss    %227.0 = LdVar              eR    i, e0.3
  val?            %227.1 = Force!             !v    %227.0, e0.3   <val?_>
  val?            %227.2 = %227.1
  goto BB213
BB212   <- [211]
  prom-           %212.0 = MkArg                    unboundValue, .findInheritedMethods[0x5614fcb5fc60]_p109, e0.3
  prom-           %212.1 = %212.0
  goto BB213
BB368   <- [366]
  val?^ | miss    %368.0 = LdVar              eR    names, e0.3
  lgl$#-          %368.1 = Identical                %368.0, <blt names>
  void                    Branch                   %368.1 -> BB370 (if true) | BB371 (if false)
BB369   <- [366]
  void                    Nop                !     
  val?^ | miss    %369.1 = %366.0
  dr              %369.2 = CallTarget@0x5615010a8200[Call#129]
  goto BB90
BB386   <- [382]
  int$-           %386.0 = CastType           d     dn %382.2
  lgl$-           %386.1 = Gt                 d     %386.0, 1L, elided   <lgl$->
  lgl$#-          %386.2 = CheckTrueFalse     e     %386.1
  void                    Branch                   %386.2 -> BB153 (if true) | BB99 (if false)
BB387   <- [382]
  void                    Nop                !     
  (int|real)$-    %387.1 = %382.2
  dr              %387.2 = Typecheck@0x5615010a8200[Type#385]
  goto BB97
BB218   <- [214]
  val?^ | miss    %218.0 = LdVar              eR    c, e0.3
  lgl$#-          %218.1 = Identical                <blt c>, %218.0   <true>
  void                    Branch                   %218.1 -> BB374 (if true) | BB375 (if false)
BB217   <- [214]
  (cls|spec|blt)  %217.0 = LdFun              !v    @, e0.3
  fs              %217.1 = FrameState         R     0x5615010b0240+3135: [%181.1, %179.0, %206.1, %217.0], env=e0.3
  void                    Deopt              !v    %217.1, DeadCall@0x5615010a8200[Call#68], %217.0   !
BB213   <- [212, 227]
  val?            %213.0 = Phi                      %227.2:BB227, %212.1:BB212
  val?            %213.1 = %213.0
  val?            %213.2 = Extract2_1D        !v    %211.1, %213.1, e0.3   <val?_>
  lgl$-           %213.3 = AsLogical          e     %213.2
  lgl$-           %213.4 = LOr                      %358.5, %213.3
  lgl$-           %213.5 = %213.4
  goto BB214
BB370   <- [368]
  val+            %370.0 = CallSafeBuiltin    wed   names(%362.1)    <str->
  val?^ | miss    %370.1 = LdVar              eR    as.character, e0.3
  lgl$#-          %370.2 = Identical                %370.1, <blt as.character>
  void                    Branch                   %370.2 -> BB372 (if true) | BB373 (if false)
BB371   <- [368]
  void                    Nop                !     
  val?^ | miss    %371.1 = %368.0
  dr              %371.2 = CallTarget@0x5615010a8200[Call#130]
  goto BB90
BB153   <- [386]
  val?^ | miss    %153.0 = LdVar              eR    paste, e0.3
  lgl$#-          %153.1 = Identical                %153.0, function(..., sep=" ", collapse=NULL, recycle0|...
  void                    Branch                   %153.1 -> BB398 (if true) | BB399 (if false)
BB99   <- [386]
  void                    Nop                !     
  goto BB100
BB97   <- [387, 399]
  val?^ | miss    %97.0 = Phi                      %387.1:BB387, %399.1:BB399
  val?^ | miss    %97.1 = %97.0
  dr              %97.2 = Phi                      %387.2:BB387, %399.2:BB399
  dr              %97.3 = %97.2
  fs              %97.4 = FrameState         R     0x5615010b0240+6549: [%382.2], env=e0.3
  void                    Deopt              !v    %97.4, %97.3, %97.1   !
BB374   <- [218]
  (cls|spec|blt)  %374.0 = LdFun              !v    @, <0x5614f88a6bd8>, e0.3
  prom-           %374.1 = MkArg                    unboundValue, .findInheritedMethods[0x5614fcb5fc60]_p101, e0.3
  prom-           %374.2 = MkArg                    unboundValue, .findInheritedMethods[0x5614fcb5fc60]_p102, e0.3
  val?            %374.3 = Call               !v    %374.0(%374.1, %374.2) e0.3   <str$->
  val?^ | miss    %374.4 = LdVar              eR    .eligibleSuperClasses, e0.3
  lgl$#-          %374.5 = Identical                %374.4, function(contains, simpleOnly) <(rir::Dispatch|...
  void                    Branch                   %374.5 -> BB378 (if true) | BB379 (if false)
BB375   <- [218]
  fs              %375.0 = FrameState         R     0x5615010b0240+3124: [%181.1, %179.0, %206.1, %214.1], env=e0.3
  void                    Deopt              !v    %375.0, DeadBranchReached@0x5615010a8200[Test#24], %218.1   !
BB372   <- [370]
  val?^ | miss    %372.0 = LdVar              eR    excluded, e0.3
  val?            %372.1 = Force!<wrapped>    !v    %372.0, e0.3   <str$->
  val?            %372.2 = CallBuiltin        !v    as.character(%372.1) e0.3   <str$->
  lgl$#-          %372.3 = IsType                   %372.2 isA val?+
  void                    Branch                   %372.3 -> BB376 (if true) | BB377 (if false)
BB373   <- [370]
  fs              %373.0 = FrameState         R     0x5615010b0240+6415: [%362.1, <blt is.na>], env=e0.3
  prom-           %373.1 = MkArg                    unboundValue, .findInheritedMethods[0x5614fcb5fc60]_p64, e0.3
  val?^           %373.2 = CastType                 up %373.1
  prom-           %373.3 = MkArg                    unboundValue, .findInheritedMethods[0x5614fcb5fc60]_p62, e0.3
  val?^           %373.4 = CastType                 up %373.3
  env             e373.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%373.2, x=%373.4, parent=R_BaseNamespace, context 0
  fs              %373.6 = FrameState         R     0x5614f90bbd40+9: [], env=e373.5, next=%373.0
  fs              %373.7 = FrameState         R     0x5614fc0a1930+32(pr): [%370.0], env=e0.3, next=%373.6
  void                    Deopt              !v    %373.7, CallTarget@0x5615010a8200[Call#131], %370.1   !
BB398   <- [153]
  prom-           %398.0 = MkArg                    unboundValue, .findInheritedMethods[0x5614fcb5fc60]_p57, e0.3
  dots-           %398.1 = DotsList           l     %398.0
  val?^ | miss    %398.2 = CastType                 up %398.0
  env             e398.3 = MkEnv              l     ...=%398.1, sep(miss)=" ", collapse="#", recycle0(miss)=false, parent=R_BaseNamespace, context 0
  val?            %398.4 = Force!             !vL   %398.2, e398.3
  val+            %398.5 = CallSafeBuiltin    wed   list(%398.4)    <vec->
  val+            %398.6 = CallSafeBuiltin    wed   paste(%398.5, " ", "#", false)    <str$->
  void                    StVar              lW    defaultLabel, %398.6, e0.3
  val?^ | miss    %398.8 = LdVar              eR    match, e0.3
  lgl$#-          %398.9 = Identical                %398.8, function(x, table, nomatch=NA, incomparables=N|...
  void                    Branch                   %398.9 -> BB400 (if true) | BB401 (if false)
BB399   <- [153]
  void                    Nop                !     
  val?^ | miss    %399.1 = %153.0
  dr              %399.2 = CallTarget@0x5615010a8200[Call#133]
  goto BB97
BB100   <- [99, 162, 422]
  val?^ | miss    %100.0 = LdVar              eR    length, e0.3
  lgl$#-          %100.1 = Identical                <blt length>, %100.0   <true>
  void                    Branch                   %100.1 -> BB392 (if true) | BB393 (if false)
BB378   <- [374]
  prom-           %378.0 = MkArg                    unboundValue, .findInheritedMethods[0x5614fcb5fc60]_p103, e0.3
  prom-           %378.1 = MkArg                    unboundValue, .findInheritedMethods[0x5614fcb5fc60]_p106, e0.3
  val?            %378.2 = StaticCall         !v    .eligibleSuperClasses[0x5614f942a190](%378.0, %378.1) e0.3   <str->
  lgl$#-          %378.3 = IsType                   %378.2 isA val?-
  lgl$#-          %378.4 = IsType                   %374.3 isA val?-
  void                    Branch                   %378.4 -> BB384 (if true) | BB385 (if false)
BB379   <- [374]
  fs              %379.0 = FrameState         R     0x5615010b0240+3284: [%181.1, %179.0, %206.1, <blt c>, %374.3], env=e0.3
  void                    Deopt              !v    %379.0, CallTarget@0x5615010a8200[Call#74], %374.4   !
BB376   <- [372]
  val?+           %376.0 = CastType           d     dn %372.2   <str$->
  val+            %376.1 = CallSafeBuiltin    wed   match(%370.0, %376.0, NA, nil)    <int->
  lgl$#-          %376.2 = IsType                   %376.1 isA int-
  void                    Branch                   %376.2 -> BB388 (if true) | BB389 (if false)
BB377   <- [372]
  fs              %377.0 = FrameState         R     0x5615010b0240+6415: [%362.1, <blt is.na>], env=e0.3
  prom-           %377.1 = MkArg                    unboundValue, .findInheritedMethods[0x5614fcb5fc60]_p64, e0.3
  val?^           %377.2 = CastType                 up %377.1
  prom-           %377.3 = MkArg                    %370.0, .findInheritedMethods[0x5614fcb5fc60]_p62 (!refl), e0.3
  val?~           %377.4 = CastType                 up %377.3
  env             e377.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%377.2, x=%377.4, parent=R_BaseNamespace, context 0
  fs              %377.6 = FrameState         R     0x5614f90bbd40+23: [%370.0], env=e377.5, next=%377.0
  fs              %377.7 = FrameState         R     0x5614fb748d20+32(pr): [%372.2], env=e0.3, next=%377.6
  void                    Deopt              !v    %377.7, Typecheck@0x5614f910ecb0[Type#1], %372.2   !
BB400   <- [398]
  val?^ | miss    %400.0 = LdVar              eR    names, e0.3
  lgl$#-          %400.1 = Identical                %400.0, <blt names>
  void                    Branch                   %400.1 -> BB402 (if true) | BB403 (if false)
BB401   <- [398]
  void                    Nop                !     
  val?^ | miss    %401.1 = %398.8
  dr              %401.2 = CallTarget@0x5615010a8200[Call#135]
  goto BB154
BB392   <- [100]
  val?^ | miss    %392.0 = LdVar              eR    methods, e0.3
  lgl$#-          %392.1 = IsType                   %392.0 isA val?~+ | miss
  void                    Branch                   %392.1 -> BB394 (if true) | BB395 (if false)
BB393   <- [100]
  void                    Nop                !     
  lgl$#-          %393.1 = %100.1
  dr              %393.2 = DeadBranchReached@0x5615010a8200[Test#53]
  goto BB101
BB384   <- [378]
  val?-           %384.0 = CastType           d     dn %374.3   <str$->
  void                    Branch                   %378.3 -> BB390 (if true) | BB391 (if false)
BB385   <- [378]
  void                    Nop                !     
  val?            %385.1 = %374.3
  dr              %385.2 = Typecheck@0x5615010a8200[Type#220]
  goto BB221
BB388   <- [376]
  int-            %388.0 = CastType           d     dn %376.1
  lgl-            %388.1 = CallSafeBuiltin    wed   is.na(%388.0)    <lgl->
  val?            %388.2 = Extract1_1D        wed   %362.1, %388.1, elided   <vec+>
  void                    StVar              lW    methods, %388.2, e0.3
  goto BB94
BB389   <- [376]
  fs              %389.0 = FrameState         R     0x5615010b0240+6415: [%362.1, <blt is.na>], env=e0.3
  prom-           %389.1 = MkArg                    %376.0, .findInheritedMethods[0x5614fcb5fc60]_p64 (!refl), e0.3
  val?~           %389.2 = CastType                 up %389.1
  prom-           %389.3 = MkArg                    %370.0, .findInheritedMethods[0x5614fcb5fc60]_p62 (!refl), e0.3
  val?~           %389.4 = CastType                 up %389.3
  env             e389.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%389.2, x=%389.4, parent=R_BaseNamespace, context 0
  fs              %389.6 = FrameState         R     0x5614f90bbd40+69: [%376.1], env=e389.5, next=%389.0
  void                    Deopt              !v    %389.6, Typecheck@0x5615010a8200[Type#380], %376.1   !
BB402   <- [400]
  val?^ | miss    %402.0 = LdVar              eR    methods, e0.3
  lgl$#-          %402.1 = IsType                   %402.0 isA val?~+ | miss
  void                    Branch                   %402.1 -> BB404 (if true) | BB405 (if false)
BB403   <- [400]
  void                    Nop                !     
  val?^ | miss    %403.1 = %400.0
  dr              %403.2 = CallTarget@0x5615010a8200[Call#136]
  goto BB154
BB154   <- [401, 403, 405]
  val?^ | miss    %154.0 = Phi                      %401.1:BB401, %403.1:BB403, %405.1:BB405
  val?^ | miss    %154.1 = %154.0
  dr              %154.2 = Phi                      %401.2:BB401, %403.2:BB403, %405.2:BB405
  dr              %154.3 = %154.2
  fs              %154.4 = FrameState         R     0x5615010b0240+6636: [], env=e0.3
  void                    Deopt              !v    %154.4, %154.3, %154.1   !
BB394   <- [392]
  val?~+ | miss   %394.0 = CastType           d     dn %392.0
  val?+           %394.1 = Force!<value>            %394.0,    <vec+>
  (int|real)$-    %394.2 = CallSafeBuiltin    wed   length(%394.1)    <int$->
  lgl$#-          %394.3 = IsType                   %394.2 isA int$-
  void                    Branch                   %394.3 -> BB410 (if true) | BB411 (if false)
BB395   <- [392]
  void                    Nop                !     
  val?^ | miss    %395.1 = %392.0
  dr              %395.2 = Typecheck@0x5615010a8200[Type#405]
  goto BB101
BB101   <- [393, 395]
  val?^ | miss    %101.0 = Phi                      %393.1:BB393, %395.1:BB395
  val?^ | miss    %101.1 = %101.0
  dr              %101.2 = Phi                      %393.2:BB393, %395.2:BB395
  dr              %101.3 = %101.2
  fs              %101.4 = FrameState         R     0x5615010b0240+6881: [], env=e0.3
  void                    Deopt              !v    %101.4, %101.3, %101.1   !
BB390   <- [384]
  val?-           %390.0 = CastType           d     dn %378.2   <str->
  (list|sym|char|lgl|int|real|str|vec|complex|raw|cls|spec|blt|prom|_|code|env|ast|expressions|dots|other)+ %390.1 = CallSafeBuiltin    wed   c(%384.0, %390.0, "ANY")    <str->
  void                    StVar              lW    allLabels, %390.1, e0.3
  val?^ | miss    %390.3 = LdVar              eR    outerLabels, e0.3
  lgl$#-          %390.4 = Identical                %390.3, function(labels, new) <(rir::DispatchTable*)0x|...
  void                    Branch                   %390.4 -> BB396 (if true) | BB397 (if false)
BB391   <- [384]
  void                    Nop                !     
  val?            %391.1 = %378.2
  dr              %391.2 = Typecheck@0x5615010a8200[Type#225]
  goto BB221
BB221   <- [385, 391]
  val?^ | miss    %221.0 = Phi                      %385.1:BB385, %391.1:BB391
  val?^ | miss    %221.1 = %221.0
  dr              %221.2 = Phi                      %385.2:BB385, %391.2:BB391
  dr              %221.3 = %221.2
  fs              %221.4 = FrameState         R     0x5615010b0240+3326: [%181.1, %179.0, %206.1, <blt c>, %374.3, %378.2], env=e0.3
  void                    Deopt              !v    %221.4, %221.3, %221.1   !
BB404   <- [402]
  val?~+ | miss   %404.0 = CastType           d     dn %402.0
  val?+           %404.1 = Force!<value>            %404.0,    <vec+>
  val+            %404.2 = CallSafeBuiltin    wed   names(%404.1)    <str->
  lgl$#-          %404.3 = IsType                   %398.6 isA val?-
  void                    Branch                   %404.3 -> BB406 (if true) | BB407 (if false)
BB405   <- [402]
  void                    Nop                !     
  val?^ | miss    %405.1 = %402.0
  dr              %405.2 = Typecheck@0x5615010a8200[Type#391]
  goto BB154
BB410   <- [394]
  int$-           %410.0 = CastType           d     dn %394.2
  lgl$-           %410.1 = Gt                 d     %410.0, 1L, elided   <lgl$->
  lgl$#-          %410.2 = CheckTrueFalse     e     %410.1
  void                    Branch                   %410.2 -> BB146 (if true) | BB105 (if false)
BB411   <- [394]
  fs              %411.0 = FrameState         R     0x5615010b0240+6972: [%394.2], env=e0.3
  void                    Deopt              !v    %411.0, Typecheck@0x5615010a8200[Type#406], %394.2   !
BB396   <- [390]
  prom-           %396.0 = MkArg                    unboundValue, .findInheritedMethods[0x5614fcb5fc60]_p107, e0.3
  prom-           %396.1 = MkArg                    unboundValue, .findInheritedMethods[0x5614fcb5fc60]_p108 (!refl), e0.3
  val?            %396.2 = StaticCall         !v    outerLabels[0x5614ffa3a680](%396.0, %396.1) e0.3   <str->
  void                    StVar              lW    labels, %396.2, e0.3
  val?^ | miss    %396.4 = LdVar              eR    c, e0.3
  lgl$#-          %396.5 = Identical                <blt c>, %396.4   <true>
  void                    Branch                   %396.5 -> BB412 (if true) | BB413 (if false)
BB397   <- [390]
  fs              %397.0 = FrameState         R     0x5615010b0240+3368: [%181.1, %179.0, %206.1], env=e0.3
  void                    Deopt              !v    %397.0, CallTarget@0x5615010a8200[Call#76], %390.3   !
BB406   <- [404]
  val-            %406.0 = CastType           d     dn %398.6   <str$->
  val+            %406.1 = CallSafeBuiltin    wed   match(%406.0, %404.2, 0L, nil)    <int$->
  lgl$#-          %406.2 = IsType                   %406.1 isA int$-
  void                    Branch                   %406.2 -> BB408 (if true) | BB409 (if false)
BB407   <- [404]
  fs              %407.0 = FrameState         R     0x5615010b0240+6678: [], env=e0.3
  prom-           %407.1 = MkArg                    unboundValue, .findInheritedMethods[0x5614fcb5fc60]_p60, e0.3
  val?^           %407.2 = CastType                 up %407.1
  prom-           %407.3 = MkArg                    unboundValue, .findInheritedMethods[0x5614fcb5fc60]_p59 (!refl), e0.3
  val?^           %407.4 = CastType                 up %407.3
  env             e407.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch=0L, table=%407.2, x=%407.4, parent=R_BaseNamespace, context 0
  fs              %407.6 = FrameState         R     0x5614f90bbd40+23: [%398.6], env=e407.5, next=%407.0
  fs              %407.7 = FrameState         R     0x5614fe3e5470+32(pr): [%404.2], env=e0.3, next=%407.6
  void                    Deopt              !v    %407.7, Typecheck@0x5615010a8200[Type#389], %398.6   !
BB146   <- [410]
  val?^ | miss    %146.0 = LdVar              eR    verbose, e0.3
  val?            %146.1 = Force!<value>      !v    %146.0, e0.3   <lgl$->
  lgl$#-          %146.2 = CheckTrueFalse     we    %146.1
  void                    Branch                   %146.2 -> BB152 (if true) | BB147 (if false)
BB105   <- [410]
  void                    Nop                !     
  goto BB106
BB412   <- [396]
  val?^ | miss    %412.0 = LdVar              eR    supersList, e0.3
  lgl$#-          %412.1 = IsType                   %412.0 isA val?~- | miss
  void                    Branch                   %412.1 -> BB418 (if true) | BB419 (if false)
BB413   <- [396]
  void                    Nop                !     
  lgl$#-          %413.1 = %396.5
  dr              %413.2 = DeadBranchReached@0x5615010a8200[Test#25]
  goto BB225
BB408   <- [406]
  int$-           %408.0 = CastType           d     dn %406.1
  void                    StVar              lW    i, %408.0, e0.3
  lgl$-           %408.2 = Gt                 d     %408.0, 0L, elided   <lgl$->
  lgl$#-          %408.3 = CheckTrueFalse     e     %408.2
  void                    Branch                   %408.3 -> BB163 (if true) | BB162 (if false)
BB409   <- [406]
  fs              %409.0 = FrameState         R     0x5615010b0240+6678: [], env=e0.3
  prom-           %409.1 = MkArg                    unboundValue, .findInheritedMethods[0x5614fcb5fc60]_p59 (!refl), e0.3
  val?^           %409.2 = CastType                 up %409.1
  prom-           %409.3 = MkArg                    %404.2, .findInheritedMethods[0x5614fcb5fc60]_p60 (!refl), e0.3
  val?~           %409.4 = CastType                 up %409.3
  env             e409.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch=0L, table=%409.4, x=%409.2, parent=R_BaseNamespace, context 0
  fs              %409.6 = FrameState         R     0x5614f90bbd40+69: [%406.1], env=e409.5, next=%409.0
  void                    Deopt              !v    %409.6, Typecheck@0x5615010a8200[Type#393], %406.1   !
BB152   <- [146]
  (cls|spec|blt)  %152.0 = LdFun              !v    cat, e0.3
  fs              %152.1 = FrameState         R     0x5615010b0240+7030: [%152.0], env=e0.3
  void                    Deopt              !v    %152.1, DeadCall@0x5615010a8200[Call#138], %152.0   !
BB147   <- [146]
  (cls|spec|blt)  %147.0 = LdFun              !v    .getBestMethods, <0x56150540bb68>, e0.3
  prom-           %147.1 = MkArg                    unboundValue, .findInheritedMethods[0x5614fcb5fc60]_p53, e0.3
  prom-           %147.2 = MkArg                    unboundValue, .findInheritedMethods[0x5614fcb5fc60]_p54, e0.3
  prom-           %147.3 = MkArg                    unboundValue, .findInheritedMethods[0x5614fcb5fc60]_p55, e0.3
  prom-           %147.4 = MkArg                    unboundValue, .findInheritedMethods[0x5614fcb5fc60]_p56, e0.3
  val?            %147.5 = NamedCall          !v    %147.0(%147.1, %147.2, %147.3, verbose=%147.4) e0.3   <int$->
  lgl$#-          %147.6 = IsType                   %147.5 isA int$-
  void                    Branch                   %147.6 -> BB424 (if true) | BB425 (if false)
BB106   <- [105, 438]
  val?^ | miss    %106.0 = LdVar              eR    simpleOnly, e0.3
  val?            %106.1 = Force!<wrapped>    !v    %106.0, e0.3   <lgl$->
  lgl$-           %106.2 = AsLogical          e     %106.1
  lgl$#-          %106.3 = Identical                %106.2, false
  void                    Branch                   %106.3 -> BB145 (if true) | BB109 (if false)
BB418   <- [412]
  val?~- | miss   %418.0 = CastType           d     dn %412.0
  val?-           %418.1 = Force!<value>            %418.0,    <vec->
  val?^ | miss    %418.2 = LdVar              eR    list, e0.3
  lgl$#-          %418.3 = Identical                <blt list>, %418.2   <true>
  void                    Branch                   %418.3 -> BB420 (if true) | BB421 (if false)
BB419   <- [412]
  void                    Nop                !     
  val?^ | miss    %419.1 = %412.0
  dr              %419.2 = Typecheck@0x5615010a8200[Type#233]
  goto BB225
BB225   <- [413, 419, 421, 433]
  val?^ | miss    %225.0 = Phi                      %413.1:BB413, %419.1:BB419, %421.1:BB421, %433.1:BB433
  val?^ | miss    %225.1 = %225.0
  dr              %225.2 = Phi                      %413.2:BB413, %419.2:BB419, %421.2:BB421, %433.2:BB433
  dr              %225.3 = %225.2
  fs              %225.4 = FrameState         R     0x5615010b0240+3419: [%181.1, %179.0, %206.1], env=e0.3
  void                    Deopt              !v    %225.4, %225.3, %225.1   !
BB163   <- [408]
  lgl$#-          %163.0 = IsType                   %404.1 isA val+   <true>
  void                    Branch                   %163.0 -> BB414 (if true) | BB415 (if false)
BB162   <- [408]
  void                    Nop                !     
  goto BB100
BB424   <- [147]
  int$-           %424.0 = CastType           d     dn %147.5
  void                    StVar              lW    select, %424.0, e0.3
  val?^ | miss    %424.2 = LdVar              eR    length, e0.3
  lgl$#-          %424.3 = Identical                <blt length>, %424.2   <true>
  void                    Branch                   %424.3 -> BB434 (if true) | BB435 (if false)
BB425   <- [147]
  fs              %425.0 = FrameState         R     0x5615010b0240+7131: [%147.5], env=e0.3
  void                    Deopt              !v    %425.0, Typecheck@0x5615010a8200[Type#415], %147.5   !
BB145   <- [106]
  void                    Nop                !     
  lgl$-           %145.1 = %106.2
  goto BB112
BB109   <- [106]
  val?^ | miss    %109.0 = LdVar              eR    length, e0.3
  lgl$#-          %109.1 = Identical                <blt length>, %109.0   <true>
  void                    Branch                   %109.1 -> BB416 (if true) | BB417 (if false)
BB420   <- [418]
  val?^ | miss    %420.0 = LdVar              eR    allLabels, e0.3
  lgl$#-          %420.1 = IsType                   %420.0 isA val?~- | miss
  void                    Branch                   %420.1 -> BB432 (if true) | BB433 (if false)
BB421   <- [418]
  void                    Nop                !     
  lgl$#-          %421.1 = %418.3
  dr              %421.2 = DeadBranchReached@0x5615010a8200[Test#26]
  goto BB225
BB414   <- [163]
  int$-           %414.0 = Minus              d     %408.0, elided
  val?            %414.1 = Extract1_1D        wed   %404.1, %414.0, elided   <vec+>
  void                    StVar              lW    methods, %414.1, e0.3
  val?^ | miss    %414.3 = LdVar              eR    fromGroup, e0.3
  lgl$#-          %414.4 = IsType                   %414.3 isA lgl-
  void                    Branch                   %414.4 -> BB422 (if true) | BB423 (if false)
BB415   <- [163]
  fs              %415.0 = FrameState         R     0x5615010b0240+6692: [], env=e0.3
  void                    Deopt              !v    %415.0, DeadBranchReached@0x5615010a8200[Test#51], %163.0   !
BB434   <- [424]
  val?^ | miss    %434.0 = LdVar              eR    methods, e0.3
  lgl$#-          %434.1 = IsType                   %434.0 isA val?~+ | miss
  void                    Branch                   %434.1 -> BB436 (if true) | BB437 (if false)
BB435   <- [424]
  void                    Nop                !     
  lgl$#-          %435.1 = %424.3
  dr              %435.2 = DeadBranchReached@0x5615010a8200[Test#54]
  goto BB150
BB112   <- [145, 442]
  lgl$-           %112.0 = Phi                      %442.4:BB442, %145.1:BB145
  lgl$-           %112.1 = %112.0
  lgl$#-          %112.2 = CheckTrueFalse     e     %112.1
  void                    Branch                   %112.2 -> BB144 (if true) | BB115 (if false)
BB416   <- [109]
  val?^ | miss    %416.0 = LdVar              eR    methods, e0.3
  lgl$#-          %416.1 = IsType                   %416.0 isA val?~+ | miss
  void                    Branch                   %416.1 -> BB430 (if true) | BB431 (if false)
BB417   <- [109]
  void                    Nop                !     
  lgl$#-          %417.1 = %109.1
  dr              %417.2 = DeadBranchReached@0x5615010a8200[Test#57]
  goto BB107
BB432   <- [420]
  val?~- | miss   %432.0 = CastType           d     dn %420.0
  val?-           %432.1 = Force!<value>            %432.0,    <str->
  val+            %432.2 = CallSafeBuiltin    wed   list(%432.1)    <vec$->
  val+            %432.3 = CallSafeBuiltin    wed   c(%418.1, %432.2)    <vec->
  void                    StVar              lW    supersList, %432.3, e0.3
  int$-           %432.5 = %206.1
  goto BB205
BB433   <- [420]
  void                    Nop                !     
  val?^ | miss    %433.1 = %420.0
  dr              %433.2 = Typecheck@0x5615010a8200[Type#235]
  goto BB225
BB422   <- [414]
  lgl-            %422.0 = CastType           d     dn %414.3
  lgl-            %422.1 = Extract1_1D        wed   %422.0, %414.0, elided   <lgl->
  void                    StVar              lW    fromGroup, %422.1, e0.3
  goto BB100
BB423   <- [414]
  fs              %423.0 = FrameState         R     0x5615010b0240+6805: [], env=e0.3
  void                    Deopt              !v    %423.0, Typecheck@0x5615010a8200[Type#400], %414.3   !
BB436   <- [434]
  val?~+ | miss   %436.0 = CastType           d     dn %434.0
  val?+           %436.1 = Force!<value>            %436.0,    <vec+>
  lgl$#-          %436.2 = IsType                   %436.1 isA val+   <true>
  void                    Branch                   %436.2 -> BB438 (if true) | BB439 (if false)
BB437   <- [434]
  void                    Nop                !     
  val?^ | miss    %437.1 = %434.0
  dr              %437.2 = Typecheck@0x5615010a8200[Type#446]
  goto BB150
BB150   <- [435, 437, 439]
  val?^ | miss    %150.0 = Phi                      %435.1:BB435, %437.1:BB437, %439.1:BB439
  val?^ | miss    %150.1 = %150.0
  dr              %150.2 = Phi                      %435.2:BB435, %437.2:BB437, %439.2:BB439
  dr              %150.3 = %150.2
  fs              %150.4 = FrameState         R     0x5615010b0240+7145: [], env=e0.3
  void                    Deopt              !v    %150.4, %150.3, %150.1   !
BB144   <- [112]
  (cls|spec|blt)  %144.0 = LdFun              !v    Recall, e0.3
  fs              %144.1 = FrameState         R     0x5615010b0240+7866: [%144.0], env=e0.3
  void                    Deopt              !v    %144.1, DeadCall@0x5615010a8200[Call#154], %144.0   !
BB115   <- [112]
  val?^ | miss    %115.0 = LdVar              eR    length, e0.3
  lgl$#-          %115.1 = Identical                <blt length>, %115.0   <true>
  void                    Branch                   %115.1 -> BB426 (if true) | BB427 (if false)
BB430   <- [416]
  val?~+ | miss   %430.0 = CastType           d     dn %416.0
  val?+           %430.1 = Force!<value>            %430.0,    <vec$+>
  (int|real)$-    %430.2 = CallSafeBuiltin    wed   length(%430.1)    <int$->
  lgl$#-          %430.3 = IsType                   %430.2 isA int$-
  void                    Branch                   %430.3 -> BB442 (if true) | BB443 (if false)
BB431   <- [416]
  void                    Nop                !     
  val?^ | miss    %431.1 = %416.0
  dr              %431.2 = Typecheck@0x5615010a8200[Type#452]
  goto BB107
BB107   <- [417, 431]
  val?^ | miss    %107.0 = Phi                      %417.1:BB417, %431.1:BB431
  val?^ | miss    %107.1 = %107.0
  dr              %107.2 = Phi                      %417.2:BB417, %431.2:BB431
  dr              %107.3 = %107.2
  fs              %107.4 = FrameState         R     0x5615010b0240+7728: [%106.1], env=e0.3
  void                    Deopt              !v    %107.4, %107.3, %107.1   !
BB438   <- [436]
  val?            %438.0 = Extract1_1D        wed   %436.1, %424.0, elided   <vec$+>
  void                    StVar              lW    methods, %438.0, e0.3
  goto BB106
BB439   <- [436]
  void                    Nop                !     
  lgl$#-          %439.1 = %436.2
  dr              %439.2 = DeadBranchReached@0x5615010a8200[Test#56]
  goto BB150
BB426   <- [115]
  val?^ | miss    %426.0 = LdVar              eR    methods, e0.3
  lgl$#-          %426.1 = IsType                   %426.0 isA val?~+ | miss
  void                    Branch                   %426.1 -> BB428 (if true) | BB429 (if false)
BB427   <- [115]
  void                    Nop                !     
  lgl$#-          %427.1 = %115.1
  dr              %427.2 = DeadBranchReached@0x5615010a8200[Test#59]
  goto BB113
BB442   <- [430]
  int$-           %442.0 = CastType           d     dn %430.2
  lgl$-           %442.1 = Eq                 d     %442.0, 0L, elided   <lgl$->
  lgl$-           %442.2 = AsLogical                %442.1
  lgl$-           %442.3 = LAnd                     %106.2, %442.2
  lgl$-           %442.4 = %442.3
  goto BB112
BB443   <- [430]
  fs              %443.0 = FrameState         R     0x5615010b0240+7831: [%106.2, %430.2], env=e0.3
  void                    Deopt              !v    %443.0, Typecheck@0x5615010a8200[Type#453], %430.2   !
BB428   <- [426]
  val?~+ | miss   %428.0 = CastType           d     dn %426.0
  val?+           %428.1 = Force!<value>            %428.0,    <vec$+>
  (int|real)$-    %428.2 = CallSafeBuiltin    wed   length(%428.1)    <int$->
  lgl$#-          %428.3 = IsType                   %428.2 isA int$-
  void                    Branch                   %428.3 -> BB440 (if true) | BB441 (if false)
BB429   <- [426]
  void                    Nop                !     
  val?^ | miss    %429.1 = %426.0
  dr              %429.2 = Typecheck@0x5615010a8200[Type#474]
  goto BB113
BB113   <- [427, 429]
  val?^ | miss    %113.0 = Phi                      %427.1:BB427, %429.1:BB429
  val?^ | miss    %113.1 = %113.0
  dr              %113.2 = Phi                      %427.2:BB427, %429.2:BB429
  dr              %113.3 = %113.2
  fs              %113.4 = FrameState         R     0x5615010b0240+7850: [%112.1], env=e0.3
  void                    Deopt              !v    %113.4, %113.3, %113.1   !
BB440   <- [428]
  int$-           %440.0 = CastType           d     dn %428.2
  lgl$#-          %440.1 = CheckTrueFalse     e     %440.0
  void                    Branch                   %440.1 -> BB122 (if true) | BB118 (if false)
BB441   <- [428]
  void                    Nop                !     
  (int|real)$-    %441.1 = %428.2
  dr              %441.2 = Typecheck@0x5615010a8200[Type#475]
  goto BB116
BB122   <- [440]
  val?^ | miss    %122.0 = LdVar              eR    .sigLabel, e0.3
  lgl$#-          %122.1 = Identical                %122.0, function(sig) <(rir::DispatchTable*)0x5614fba6|...
  void                    Branch                   %122.1 -> BB444 (if true) | BB445 (if false)
BB118   <- [440]
  void                    Nop                !     
  goto BB119
BB116   <- [441, 445, 447]
  val?^ | miss    %116.0 = Phi                      %441.1:BB441, %445.1:BB445, %447.1:BB447
  val?^ | miss    %116.1 = %116.0
  dr              %116.2 = Phi                      %441.2:BB441, %445.2:BB445, %447.2:BB447
  dr              %116.3 = %116.2
  fs              %116.4 = FrameState         R     0x5615010b0240+8203: [%428.2], env=e0.3
  void                    Deopt              !v    %116.4, %116.3, %116.1   !
BB444   <- [122]
  prom-           %444.0 = MkArg                    unboundValue, .findInheritedMethods[0x5614fcb5fc60]_p32, e0.3
  val?^           %444.1 = CastType                 up %444.0
  val?^ | miss    %444.2 = LdVar              eR    paste, <env 0x5614f8eae378>
  lgl$#-          %444.3 = Identical                %444.2, function(..., sep=" ", collapse=NULL, recycle0|...
  void                    Branch                   %444.3 -> BB446 (if true) | BB447 (if false)
BB445   <- [122]
  void                    Nop                !     
  val?^ | miss    %445.1 = %122.0
  dr              %445.2 = CallTarget@0x5615010a8200[Call#161]
  goto BB116
BB119   <- [118, 131, 460]
  val?^ | miss    %119.0 = LdVar              eR    methods, e0.3
  lgl$#-          %119.1 = IsType                   %119.0 isA val?~+ | miss
  void                    Branch                   %119.1 -> BB448 (if true) | BB449 (if false)
BB446   <- [444]
  env             e446.0 = MkEnv              l     sig=%444.1, parent=<env 0x5614f8eae378>, context 0
  prom-           %446.1 = MkArg                    unboundValue, .findInheritedMethods[0x5614fcb5fc60]_p125, e446.0
  dots-           %446.2 = DotsList           l     %446.1
  val?^ | miss    %446.3 = CastType                 up %446.1
  env             e446.4 = MkEnv              l     ...=%446.2, sep(miss)=" ", collapse="#", recycle0(miss)=false, parent=R_BaseNamespace, context -1
  val?            %446.5 = Force!             !vL   %446.3, e446.4
  val+            %446.6 = CallSafeBuiltin    wed   list(%446.5)    <vec->
  val+            %446.7 = CallSafeBuiltin    wed   paste(%446.6, " ", "#", false)    <str$->
  void                    StVar              lW    tlabel, %446.7, e0.3
  val?^ | miss    %446.9 = LdVar              eR    methods, e0.3
  lgl$#-          %446.10 = IsType                   %446.9 isA val?~+ | miss
  void                    Branch                   %446.10 -> BB450 (if true) | BB451 (if false)
BB447   <- [444]
  void                    Nop                !     
  val?^ | miss    %447.1 = %444.2
  dr              %447.2 = CallTarget@0x5614fbdc4138[Call#0]
  goto BB116
BB448   <- [119]
  val?~+ | miss   %448.0 = CastType           d     dn %119.0
  void                    Visible            v     
  val?+           %448.2 = Force!<value>            %448.0,    <vec$+>
  void                    Return             l     %448.2
BB449   <- [119]
  fs              %449.0 = FrameState         R     0x5615010b0240+8774: [], env=e0.3
  void                    Deopt              !v    %449.0, Typecheck@0x5615010a8200[Type#509], %119.0   !
BB450   <- [446]
  val?~+ | miss   %450.0 = CastType           d     dn %446.9
  val?+           %450.1 = Force!<value>            %450.0,    <vec$+>
  lgl$#-          %450.2 = IsType                   %450.1 isA val+   <true>
  void                    Branch                   %450.2 -> BB452 (if true) | BB453 (if false)
BB451   <- [446]
  void                    Nop                !     
  val?^ | miss    %451.1 = %446.9
  dr              %451.2 = Typecheck@0x5615010a8200[Type#478]
  goto BB123
BB452   <- [450]
  val?            %452.0 = Extract2_1D        wed   %450.1, 1L, elided   <cls>
  void                    StVar              lW    m, %452.0, e0.3
  val?^ | miss    %452.2 = LdVar              eR    is, e0.3
  lgl$#-          %452.3 = Identical                %452.2, function(object, class2) <(rir::DispatchTable*|...
  void                    Branch                   %452.3 -> BB454 (if true) | BB455 (if false)
BB453   <- [450]
  void                    Nop                !     
  lgl$#-          %453.1 = %450.2
  dr              %453.2 = DeadBranchReached@0x5615010a8200[Test#60]
  goto BB123
BB123   <- [451, 453]
  val?^ | miss    %123.0 = Phi                      %451.1:BB451, %453.1:BB453
  val?^ | miss    %123.1 = %123.0
  dr              %123.2 = Phi                      %451.2:BB451, %453.2:BB453
  dr              %123.3 = %123.2
  fs              %123.4 = FrameState         R     0x5615010b0240+8265: [], env=e0.3
  void                    Deopt              !v    %123.4, %123.3, %123.1   !
BB454   <- [452]
  prom-           %454.0 = MkArg                    unboundValue, .findInheritedMethods[0x5614fcb5fc60]_p33 (!refl), e0.3
  val?            %454.1 = Call               !v    function(object, class2) <(rir::DispatchTable*|...(%454.0, "MethodDefinition") e0.3   <lgl$->
  lgl$#-          %454.2 = IsType                   %454.1 isA lgl$-
  void                    Branch                   %454.2 -> BB456 (if true) | BB457 (if false)
BB455   <- [452]
  fs              %455.0 = FrameState         R     0x5615010b0240+8332: [], env=e0.3
  void                    Deopt              !v    %455.0, CallTarget@0x5615010a8200[Call#162], %452.2   !
BB456   <- [454]
  lgl$-           %456.0 = CastType           d     dn %454.1
  lgl$#-          %456.1 = CheckTrueFalse     e     %456.0
  void                    Branch                   %456.1 -> BB137 (if true) | BB129 (if false)
BB457   <- [454]
  fs              %457.0 = FrameState         R     0x5615010b0240+8369: [%454.1], env=e0.3
  void                    Deopt              !v    %457.0, Typecheck@0x5615010a8200[Type#481], %454.1   !
BB137   <- [456]
  (cls|spec|blt)  %137.0 = LdFun              !v    <-, <0x5614f889bda8>, e0.3
  prom-           %137.1 = MkArg                    unboundValue, .findInheritedMethods[0x5614fcb5fc60]_p37, e0.3
  prom-           %137.2 = MkArg                    unboundValue, .findInheritedMethods[0x5614fcb5fc60]_p40, e0.3
  val?            %137.3 = Call               !v    %137.0(%137.1, %137.2) e0.3
  val?^ | miss    %137.4 = LdVar              eR    .inheritedArgsExpression, e0.3
  lgl$#-          %137.5 = Identical                %137.4, function(target, defined, body) <(rir::Dispatc|...
  void                    Branch                   %137.5 -> BB458 (if true) | BB459 (if false)
BB129   <- [456]
  void                    Nop                !     
  goto BB130
BB458   <- [137]
  prom-           %458.0 = MkArg                    unboundValue, .findInheritedMethods[0x5614fcb5fc60]_p45, e0.3
  prom-           %458.1 = MkArg                    unboundValue, .findInheritedMethods[0x5614fcb5fc60]_p48, e0.3
  prom-           %458.2 = MkArg                    unboundValue, .findInheritedMethods[0x5614fcb5fc60]_p51, e0.3
  val?            %458.3 = StaticCall         !v    .inheritedArgsExpression[0x56150547e870](%458.0, %458.1, %458.2) e0.3   <nil->
  lgl$-           %458.4 = Is                       %458.3, NULL
  void                    StVar              lW    coerce, %458.3, e0.3
  val             %458.6 = ChkMissing         e     %458.3
  lgl$-           %458.7 = Not                d     %458.4, elided
  lgl$#-          %458.8 = CheckTrueFalse     e     %458.7
  void                    Branch                   %458.8 -> BB143 (if true) | BB140 (if false)
BB459   <- [137]
  fs              %459.0 = FrameState         R     0x5615010b0240+8422: [%137.3], env=e0.3
  void                    Deopt              !v    %459.0, CallTarget@0x5615010a8200[Call#167], %137.4   !
BB130   <- [129, 462]
  val?^ | miss    %130.0 = LdVar              eR    doCache, e0.3
  val?            %130.1 = Force!<lazy>       !v    %130.0, e0.3   <lgl$->
  lgl$#-          %130.2 = CheckTrueFalse     we    %130.1
  void                    Branch                   %130.2 -> BB132 (if true) | BB131 (if false)
BB143   <- [458]
  (cls|spec|blt)  %143.0 = LdFun              !v    body<-, e0.3
  fs              %143.1 = FrameState         R     0x5615010b0240+8529: [%458.3, %143.0], env=e0.3
  void                    Deopt              !v    %143.1, DeadCall@0x5615010a8200[Call#171], %143.0   !
BB140   <- [458]
  val?^ | miss    %140.0 = LdVar              eR    m, e0.3
  val?            %140.1 = Force!<value>      !v    %140.0, e0.3   <cls>
  val?^ | miss    %140.2 = LdVar              eR    methods !upd, e0.3
  lgl$#-          %140.3 = IsType                   %140.2 isA val?~+ | miss
  void                    Branch                   %140.3 -> BB462 (if true) | BB463 (if false)
BB132   <- [130]
  val?^ | miss    %132.0 = LdVar              eR    verbose, e0.3
  val?            %132.1 = Force!<wrapped>    !v    %132.0, e0.3   <lgl$->
  lgl$#-          %132.2 = CheckTrueFalse     we    %132.1
  void                    Branch                   %132.2 -> BB136 (if true) | BB135 (if false)
BB131   <- [130]
  void                    Nop                !     
  goto BB119
BB462   <- [140]
  val?~+ | miss   %462.0 = CastType           d     dn %140.2
  val?+           %462.1 = Force!<value>            %462.0,    <vec$+>
  val?            %462.2 = Subassign2_1D      !v    %140.1, %462.1, 1L, e0.3
  void                    StVar              lW    methods, %462.2, e0.3
  goto BB130
BB463   <- [140]
  fs              %463.0 = FrameState         R     0x5615010b0240+8601: [%140.1], env=e0.3
  void                    Deopt              !v    %463.0, Typecheck@0x5615010a8200[Type#503], %140.2   !
BB136   <- [132]
  (cls|spec|blt)  %136.0 = LdFun              !v    cat, e0.3
  fs              %136.1 = FrameState         R     0x5615010b0240+8691: [%136.0], env=e0.3
  void                    Deopt              !v    %136.1, DeadCall@0x5615010a8200[Call#172], %136.0   !
BB135   <- [132]
  val?^ | miss    %135.0 = LdVar              eR    assign, e0.3
  lgl$#-          %135.1 = Identical                %135.0, function(x, value, pos=-(1), envir=as.environm|...
  void                    Branch                   %135.1 -> BB460 (if true) | BB461 (if false)
BB460   <- [135]
  prom-           %460.0 = MkArg                    unboundValue, .findInheritedMethods[0x5614fcb5fc60]_p34, e0.3
  prom-           %460.1 = MkArg                    unboundValue, .findInheritedMethods[0x5614fcb5fc60]_p35, e0.3
  prom-           %460.2 = MkArg                    unboundValue, .findInheritedMethods[0x5614fcb5fc60]_p36, e0.3
  val?            %460.3 = StaticCall         !v    assign[0x561505aa4490](%460.0, %460.1, missingArg, %460.2) { 0 1 3n } e0.3
  goto BB119
BB461   <- [135]
  fs              %461.0 = FrameState         R     0x5615010b0240+8676: [%132.2], env=e0.3
  void                    Deopt              !v    %461.0, CallTarget@0x5615010a8200[Call#173], %135.0   !
Prom 0:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     get, <0x5614f97cce78>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x5614fcb5fc60]_p1, e0.0
  val?            %0.3  = NamedCall          !     %0.1(".MTable", envir=%0.2) e0.0   <env->
  void                    Return             l     %0.3
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     environment, <0x5614f8c4db68>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x5614fcb5fc60]_p2, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <env->
  void                    Return             l     %0.3
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fdef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 4:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     .simpleInheritanceGeneric, <0x5614fe5b3310>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x5614fcb5fc60]_p5, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <lgl$->
  void                    Return             l     %0.3
Prom 5:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fdef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 7:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     is.environment, <0x5614f88b6e18>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x5614fcb5fc60]_p8, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <lgl$->
  void                    Return             l     %0.3
Prom 8:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    mtable, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <(nil|env)->
  void                    Return             l     %0.3
Prom 9:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     environment, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x5614fcb5fc60]_p10, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 10:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fdef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 11:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     .allowPrimitiveMethods, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x5614fcb5fc60]_p12, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 12:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    primMethods, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 13:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fdef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 14:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    group, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 15:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    cl1, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$+>
  void                    Return             l     %0.3
Prom 16:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 20:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    labels, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 21:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     .fillSignatures, <0x5614fe5b6ee8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x5614fcb5fc60]_p22, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x5614fcb5fc60]_p23, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <str->
  void                    Return             l     %0.4
Prom 22:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    allMethods, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 23:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     length, <0x5614f88a7a90>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x5614fcb5fc60]_p24, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <int$->
  void                    Return             l     %0.3
Prom 24:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    classes, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <(str|vec)>
  void                    Return             l     %0.3
Prom 25:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    allMethods, e0.0
  val?            %0.2  = Force<value>       !v    %0.1, e0.0   <str->
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <true>
  void                    Branch                   %0.3 -> BB2 (if true) | BB7 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    m, e0.0
  val?            %2.1  = Force<value>       !v    %2.0, e0.0   <int->
  lgl$#-          %2.2  = IsType                   %2.1 isA val+   <true>
  void                    Branch                   %2.2 -> BB6 (if true) | BB3 (if false)
BB7   <- [0]
  prom-           %7.0  = MkArg                    unboundValue, .findInheritedMethods[0x5614fcb5fc60]_p27, e0.0
  prom-           %7.1  = %7.0
  goto BB5
BB6   <- [2]
  val?^ | miss    %6.0  = LdVar              eR    found, e0.0
  val?            %6.1  = Force<value>       !v    %6.0, e0.0   <lgl->
  val?            %6.2  = %6.1
  goto BB4
BB3   <- [2]
  prom-           %3.0  = MkArg                    unboundValue, .findInheritedMethods[0x5614fcb5fc60]_p26, e0.0
  prom-           %3.1  = %3.0
  goto BB4
BB5   <- [7, 4]
  val?            %5.0  = Phi                      %4.3:BB4, %7.1:BB7
  val?            %5.1  = %5.0
  val?            %5.2  = Extract1_1D        !v    %0.2, %5.1, e0.0   <str->
  void                    Visible            v     
  void                    Return             l     %5.2
BB4   <- [3, 6]
  val?            %4.0  = Phi                      %6.2:BB6, %3.1:BB3
  val?            %4.1  = %4.0
  val?            %4.2  = Extract1_1D        !v    %2.1, %4.1, e0.0   <int->
  val?            %4.3  = %4.2
  goto BB5
Prom 26:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    found, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 27:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    m, e0.0
  val?            %0.2  = Force              !v    %0.1, e0.0   <val?_>
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <@?>
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    found, e0.0
  val?            %2.1  = Force              !v    %2.0, e0.0   <val?_>
  val?            %2.2  = %2.1
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, .findInheritedMethods[0x5614fcb5fc60]_p28, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.2:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract1_1D        !v    %0.2, %3.1, e0.0   <val?_>
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 28:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    found, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 29:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    table, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 30:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     length, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x5614fcb5fc60]_p31, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 31:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    methods, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 32:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    classes, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <(str|vec)>
  void                    Return             l     %0.3
Prom 33:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    m, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 34:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    tlabel, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 35:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    m, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 36:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    mtable, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 37:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x5614fcb5fc60]_p38, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x5614fcb5fc60]_p39, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 38:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    m, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 39:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    target, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 40:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     .newSignature, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x5614fcb5fc60]_p41, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x5614fcb5fc60]_p42, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 41:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    classes, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 42:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x5614fcb5fc60]_p43, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x5614fcb5fc60]_p44, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 43:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fdef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 44:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    signature, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 45:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, <0x5614f88a6bd8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x5614fcb5fc60]_p46, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x5614fcb5fc60]_p47, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <str>
  void                    Return             l     %0.4
Prom 46:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    m, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 47:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    target, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 48:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, <0x5614f88a6bd8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x5614fcb5fc60]_p49, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x5614fcb5fc60]_p50, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <str>
  void                    Return             l     %0.4
Prom 49:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    m, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 50:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    defined, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 51:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     body, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x5614fcb5fc60]_p52, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 52:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    m, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 53:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    methods, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 54:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    supersList, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <vec->
  void                    Return             l     %0.3
Prom 55:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fromGroup, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 56:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    verbose, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <lgl$->
  void                    Return             l     %0.3
Prom 57:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     rep.int, <0x5614fa93a230>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x5614fcb5fc60]_p58, e0.0
  val?            %0.3  = Call               !     %0.1("ANY", %0.2) e0.0   <str->
  void                    Return             l     %0.3
Prom 58:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    nargs, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <int$->
  void                    Return             l     %0.3
Prom 59:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    defaultLabel, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 60:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     names, <0x5614f88a7470>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x5614fcb5fc60]_p61, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <str->
  void                    Return             l     %0.3
Prom 61:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    methods, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 62:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     names, <0x5614f88a7470>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x5614fcb5fc60]_p63, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <str->
  void                    Return             l     %0.3
Prom 63:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    methods, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 64:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     as.character, <0x5614f88b4040>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x5614fcb5fc60]_p65, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <str$->
  void                    Return             l     %0.3
Prom 65:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    excluded, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 66:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    nargs, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  val?            %0.4  = Colon              !     2L, %0.3, e0.0   <val?_>
  void                    Return             l     %0.4
Prom 67:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !v    getClass, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x5614fcb5fc60]_p68, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x5614fcb5fc60]_p70, e0.0
  val?            %0.4  = NamedCall          !v    %0.1(%0.2, where=%0.3, .Force=true) e0.0   <val?_>
  val?^ | miss    %0.5  = LdVar              eR    classDefs, e0.0
  val?            %0.6  = Force              !v    %0.5, e0.0   <val?_>
  val?^ | miss    %0.7  = LdVar              eR    i, e0.0
  val?            %0.8  = Force              !v    %0.7, e0.0   <val?_>
  val?            %0.9  = Subassign2_1D      !v    %0.4, %0.6, %0.8, e0.0
  void                    StVar              lW    classDefs, %0.9, e0.0
  void                    StVar              lW    cc, %0.4, e0.0
  lgl$-           %0.12 = Missing            eR    useInherited, e0.0
  lgl$-           %0.13 = AsLogical                %0.12
  lgl$#-          %0.14 = Identical                %0.13, true
  void                    Branch                   %0.14 -> BB2 (if true) | BB7 (if false)
BB2   <- [0]
  void                    Nop                !     
  lgl$-           %2.1  = %0.13
  goto BB3
BB7   <- [0]
  val?^ | miss    %7.0  = LdVar              eR    useInherited, e0.0
  val?            %7.1  = Force              !v    %7.0, e0.0   <val?_>
  lgl$#-          %7.2  = IsType                   %7.1 isA val+   <@?>
  void                    Branch                   %7.2 -> BB8 (if true) | BB10 (if false)
BB3   <- [2, 9]
  lgl$-           %3.0  = Phi                      %9.5:BB9, %2.1:BB2
  lgl$-           %3.1  = %3.0
  lgl$#-          %3.2  = CheckTrueFalse     e     %3.1
  void                    Branch                   %3.2 -> BB6 (if true) | BB4 (if false)
BB8   <- [7]
  val?^ | miss    %8.0  = LdVar              eR    i, e0.0
  val?            %8.1  = Force              !v    %8.0, e0.0   <val?_>
  val?            %8.2  = %8.1
  goto BB9
BB10   <- [7]
  prom-           %10.0 = MkArg                    unboundValue, .findInheritedMethods[0x5614fcb5fc60]_p86, e0.0
  prom-           %10.1 = %10.0
  goto BB9
BB6   <- [3]
  (cls|spec|blt)  %6.0  = LdFun              !v    c, e0.0
  prom-           %6.1  = MkArg                    unboundValue, .findInheritedMethods[0x5614fcb5fc60]_p78, e0.0
  prom-           %6.2  = MkArg                    unboundValue, .findInheritedMethods[0x5614fcb5fc60]_p81, e0.0
  val?            %6.3  = Call               !v    %6.0(%6.1, %6.2, "ANY") e0.0   <val?_>
  val?            %6.4  = %6.3
  goto BB5
BB4   <- [3]
  (cls|spec|blt)  %4.0  = LdFun              !v    @, e0.0
  prom-           %4.1  = MkArg                    unboundValue, .findInheritedMethods[0x5614fcb5fc60]_p71, e0.0
  prom-           %4.2  = MkArg                    unboundValue, .findInheritedMethods[0x5614fcb5fc60]_p72, e0.0
  val?            %4.3  = Call               !v    %4.0(%4.1, %4.2) e0.0   <val?_>
  val?            %4.4  = %4.3
  goto BB5
BB9   <- [10, 8]
  val?            %9.0  = Phi                      %8.2:BB8, %10.1:BB10
  val?            %9.1  = %9.0
  val?            %9.2  = Extract2_1D        !v    %7.1, %9.1, e0.0   <val?_>
  lgl$-           %9.3  = AsLogical          e     %9.2
  lgl$-           %9.4  = LOr                      %0.13, %9.3
  lgl$-           %9.5  = %9.4
  goto BB3
BB5   <- [4, 6]
  val?            %5.0  = Phi                      %4.4:BB4, %6.4:BB6
  val?            %5.1  = %5.0
  void                    StVar              lW    allLabels, %5.1, e0.0
  (cls|spec|blt)  %5.3  = LdFun              !v    outerLabels, e0.0
  prom-           %5.4  = MkArg                    unboundValue, .findInheritedMethods[0x5614fcb5fc60]_p73, e0.0
  prom-           %5.5  = MkArg                    unboundValue, .findInheritedMethods[0x5614fcb5fc60]_p74, e0.0
  val?            %5.6  = Call               !v    %5.3(%5.4, %5.5) e0.0   <val?_>
  void                    StVar              lW    labels, %5.6, e0.0
  (cls|spec|blt)  %5.8  = LdFun              !v    c, e0.0
  prom-           %5.9  = MkArg                    unboundValue, .findInheritedMethods[0x5614fcb5fc60]_p75, e0.0
  prom-           %5.10 = MkArg                    unboundValue, .findInheritedMethods[0x5614fcb5fc60]_p76, e0.0
  val?            %5.11 = Call               !v    %5.8(%5.9, %5.10) e0.0   <val?_>
  void                    Invisible          v     
  void                    StVar              lW    supersList, %5.11, e0.0
  void                    Return             l     %5.11
Prom 68:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    classes, e0.0
  val?            %0.2  = Force              !v    %0.1, e0.0   <val?_>
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <@?>
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    i, e0.0
  val?            %2.1  = Force              !v    %2.0, e0.0   <val?_>
  val?            %2.2  = %2.1
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, .findInheritedMethods[0x5614fcb5fc60]_p69, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.2:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract2_1D        !v    %0.2, %3.1, e0.0   <val?_>
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 69:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    i, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 70:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 71:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    cc, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 72:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    className, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 73:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    labels, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 74:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    allLabels, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 75:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    supersList, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 76:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     list, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x5614fcb5fc60]_p77, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 77:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    allLabels, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 78:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x5614fcb5fc60]_p79, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x5614fcb5fc60]_p80, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 79:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    cc, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 80:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    className, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 81:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     .eligibleSuperClasses, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x5614fcb5fc60]_p82, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x5614fcb5fc60]_p85, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 82:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x5614fcb5fc60]_p83, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x5614fcb5fc60]_p84, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 83:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    cc, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 84:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    contains, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 85:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    simpleOnly, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 86:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    i, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 87:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    classes, e0.0
  val?            %0.2  = Force<wrapped>     !v    %0.1, e0.0   <vec->
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <true>
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    i, e0.0
  val?            %2.1  = Force<value>       !v    %2.0, e0.0   <int$->
  val?            %2.2  = %2.1
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, .findInheritedMethods[0x5614fcb5fc60]_p88, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.2:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract2_1D        !v    %0.2, %3.1, e0.0   <str$->
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 88:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    i, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 89:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 90:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    cc, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 91:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    className, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 92:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, <0x5614f88a6bd8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x5614fcb5fc60]_p93, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x5614fcb5fc60]_p94, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <vec$+>
  void                    Return             l     %0.4
Prom 93:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    cc, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 94:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    contains, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 95:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    simpleOnly, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <lgl$->
  void                    Return             l     %0.3
Prom 96:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    labels, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 97:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    allLabels, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 98:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    classes, e0.0
  val?            %0.2  = Force<wrapped>     !v    %0.1, e0.0   <vec->
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <true>
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    i, e0.0
  val?            %2.1  = Force<value>       !v    %2.0, e0.0   <int$->
  val?            %2.2  = %2.1
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, .findInheritedMethods[0x5614fcb5fc60]_p99, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.2:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract2_1D        !v    %0.2, %3.1, e0.0   <str$->
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 99:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    i, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 100:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 101:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    cc, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 102:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    className, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 103:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, <0x5614f88a6bd8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x5614fcb5fc60]_p104, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x5614fcb5fc60]_p105, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <vec+>
  void                    Return             l     %0.4
Prom 104:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    cc, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 105:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    contains, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 106:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    simpleOnly, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <lgl$->
  void                    Return             l     %0.3
Prom 107:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    labels, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 108:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    allLabels, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 109:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    i, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 110:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    i, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 111:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, <0x5614f88a6bd8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x5614fcb5fc60]_p112, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x5614fcb5fc60]_p113, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <vec+>
  void                    Return             l     %0.4
Prom 112:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    def, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 113:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    contains, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 114:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    simpleOnly, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <lgl$->
  void                    Return             l     %0.3
Prom 125:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    sig, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <(str|vec)>
  void                    Return             l     %0.3

│ .findInheritedMethods[0x5614fcb5fc60]                                        │
└──────────────────────────────────────────────────────────────────────────────┘
