
┌──────────────────────────────────────────────────────────────────────────────┐
│ as[0x561504d976f0]                                                           │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;NonRefl0,NonRefl1,!Obj1 miss: 2      │
│ Properties:                                                                  │
├────── Final PIR Version
as[0x561504d976f0]
BB0
  val?^           %0.0  = LdArg                    1
  val?^           %0.1  = LdArg                    0
  env             e0.2  = MkEnv              l     object=%0.1, Class=%0.0, strict(miss)=true, ext(miss)=missingArg, parent=<env 0x5614f8eae378>, context 1
  prom-           %0.3  = MkArg                    unboundValue, as[0x561504d976f0]_p1, e0.2
  val?^ | miss    %0.4  = CastType                 up %0.3
  void                    StArg              lW    ext, %0.4, e0.2
  val?^ | miss    %0.6  = LdVar              eR    .class1, <env 0x5614f8eae378>
  lgl$#-          %0.7  = Identical                %0.6, function(x) <(rir::DispatchTable*)0x5614f95c88|...
  void                    Branch                   %0.7 -> BB95 (if true) | BB96 (if false)
BB95   <- [0]
  prom-           %95.0 = MkArg                    unboundValue, as[0x561504d976f0]_p4 (!refl), e0.2
  ct              %95.1 = PushContext        lCL   %95.0, .class1(object), function(x) <(rir::DispatchTable*)0x5614f95c88|..., e0.2
  val?^           %95.2 = CastType                 up %95.0
  val?^ | miss    %95.3 = LdVar              eR    class, <env 0x5614f8eae378>
  lgl$#-          %95.4 = Identical                <blt class>, %95.3   <true>
  void                    Branch                   %95.4 -> BB97 (if true) | BB98 (if false)
BB96   <- [0]
  fs              %96.0 = FrameState         R     0x5614f95db3a0+0: [], env=e0.2
  void                    Deopt              !v    %96.0, CallTarget@0x5614fbc29b80[Call#1], %0.6
BB97   <- [95]
  env             e97.0 = MkEnv              l     x=%95.2, parent=<env 0x5614f8eae378>, context 1
  val?            %97.1 = Force!<lazy>       !vr   %95.2,    <val?>
  val?            %97.2 = CallBuiltin        !v    class(%97.1) e97.0   <str$+>
  void                    StVar              lW    cl, %97.2, e97.0
  lgl$#-          %97.4 = IsType                   %97.2 isA val?+
  val?^ | miss    %97.5 = LdVar              eR    length, e97.0
  lgl$#-          %97.6 = Identical                <blt length>, %97.5   <true>
  void                    Branch                   %97.6 -> BB99 (if true) | BB100 (if false)
BB98   <- [95]
  fs              %98.0 = FrameState         R     0x5614f95db3a0+32: [], env=e0.2
  env             e98.1 = (MkEnv)            l     x=%95.2, parent=<env 0x5614f8eae378>, context 1
  fs              %98.2 = FrameState         R     0x5614fb9aea90+17: [<blt class>, %95.4], env=e98.1, next=%98.0
  void                    Deopt              !v    %98.2, DeadBranchReached@0x5614fbdbc6c8[Test#0], %95.4   !
BB99   <- [97]
  val             %99.0 = ChkMissing         e     %97.2
  void                    Branch                   %97.4 -> BB101 (if true) | BB102 (if false)
BB100   <- [97]
  void                    Nop                !     
  lgl$#-          %100.1 = %97.6
  dr              %100.2 = DeadBranchReached@0x5614fbdbc6c8[Test#1]
  goto BB5
BB101   <- [99]
  val?+           %101.0 = CastType           d     dn %97.2   <str$+>
  (int|real)$-    %101.1 = CallSafeBuiltin    wed   length(%101.0)    <int$->
  lgl$#-          %101.2 = IsType                   %101.1 isA int$-
  void                    Branch                   %101.2 -> BB103 (if true) | BB104 (if false)
BB102   <- [99]
  void                    Nop                !     
  val?            %102.1 = %97.2
  dr              %102.2 = Typecheck@0x5614fbdbc6c8[Type#2]
  goto BB5
BB5   <- [100, 102]
  val?^ | miss    %5.0  = Phi                      %100.1:BB100, %102.1:BB102
  val?^ | miss    %5.1  = %5.0
  dr              %5.2  = Phi                      %100.2:BB100, %102.2:BB102
  dr              %5.3  = %5.2
  fs              %5.4  = FrameState         R     0x5614f95db3a0+32: [], env=e0.2
  fs              %5.5  = FrameState         R     0x5614fb9aea90+105: [], env=e97.0, next=%5.4
  void                    Deopt              !v    %5.5, %5.3, %5.1   !
BB103   <- [101]
  int$-           %103.0 = CastType           d     dn %101.1
  lgl$-           %103.1 = Gt                 d     %103.0, 1L, elided   <lgl$->
  lgl$#-          %103.2 = CheckTrueFalse     e     %103.1
  void                    Branch                   %103.2 -> BB93 (if true) | BB9 (if false)
BB104   <- [101]
  fs              %104.0 = FrameState         R     0x5614f95db3a0+32: [], env=e0.2
  fs              %104.1 = FrameState         R     0x5614fb9aea90+196: [%101.1], env=e97.0, next=%104.0
  void                    Deopt              !v    %104.1, Typecheck@0x5614fbdbc6c8[Type#5], %101.1   !
BB93   <- [103]
  val?            %93.0 = Extract2_1D        wed   %101.0, 1L, elided   <val?_>
  val?            %93.1 = %93.0
  goto BB10
BB9   <- [103]
  void                    Nop                !     
  val?+           %9.1  = %101.0
  goto BB10
BB10   <- [9, 93]
  val?            %10.0 = Phi                      %9.1:BB9, %93.1:BB93
  val?            %10.1 = %10.0
  val?            %10.2 = PopContext         C     %10.1, %95.1   <str$+>
  void                    StVar              lW    thisClass, %10.2, e0.2
  val?^ | miss    %10.4 = LdVar              eR    .identC, e0.2
  lgl$#-          %10.5 = Identical                %10.4, function(c1=NULL, c2=NULL) <(rir::DispatchTabl|...
  void                    Branch                   %10.5 -> BB105 (if true) | BB106 (if false)
BB105   <- [10]
  prom-           %105.0 = MkArg                    unboundValue, as[0x561504d976f0]_p5 (!refl), e0.2
  prom-           %105.1 = MkArg                    unboundValue, as[0x561504d976f0]_p6, e0.2
  val?            %105.2 = StaticCall         !v    .identC[0x561505449fd0](%105.0, %105.1) e0.2   <lgl$->
  lgl$#-          %105.3 = IsType                   %105.2 isA lgl$-
  void                    Branch                   %105.3 -> BB107 (if true) | BB108 (if false)
BB106   <- [10]
  fs              %106.0 = FrameState         R     0x5614f95db3a0+46: [], env=e0.2
  void                    Deopt              !v    %106.0, CallTarget@0x5614fbc29b80[Call#2], %10.4   !
BB107   <- [105]
  lgl$-           %107.0 = CastType           d     dn %105.2
  lgl$-           %107.1 = AsLogical                %107.0
  lgl$#-          %107.2 = Identical                %107.1, true
  void                    Branch                   %107.2 -> BB92 (if true) | BB15 (if false)
BB108   <- [105]
  void                    Nop                !     
  val?            %108.1 = %105.2
  dr              %108.2 = Typecheck@0x5614fbc29b80[Type#7]
  goto BB13
BB92   <- [107]
  void                    Nop                !     
  lgl$-           %92.1 = %107.1
  goto BB18
BB15   <- [107]
  val?^ | miss    %15.0 = LdVar              eR    .identC, e0.2
  lgl$#-          %15.1 = Identical                %15.0, function(c1=NULL, c2=NULL) <(rir::DispatchTabl|...
  void                    Branch                   %15.1 -> BB109 (if true) | BB110 (if false)
BB13   <- [108, 110]
  val?^ | miss    %13.0 = Phi                      %108.1:BB108, %110.1:BB110
  val?^ | miss    %13.1 = %13.0
  dr              %13.2 = Phi                      %108.2:BB108, %110.2:BB110
  dr              %13.3 = %13.2
  fs              %13.4 = FrameState         R     0x5614f95db3a0+83: [%105.2], env=e0.2
  void                    Deopt              !v    %13.4, %13.3, %13.1   !
BB18   <- [92, 113]
  lgl$-           %18.0 = Phi                      %113.3:BB113, %92.1:BB92
  lgl$-           %18.1 = %18.0
  lgl$#-          %18.2 = CheckTrueFalse     e     %18.1
  void                    Branch                   %18.2 -> BB91 (if true) | BB21 (if false)
BB109   <- [15]
  prom-           %109.0 = MkArg                    unboundValue, as[0x561504d976f0]_p7, e0.2
  val?            %109.1 = StaticCall         !v    .identC[0x5614fb886350](%109.0, "ANY") e0.2   <lgl$->
  lgl$#-          %109.2 = IsType                   %109.1 isA lgl$-
  void                    Branch                   %109.2 -> BB113 (if true) | BB114 (if false)
BB110   <- [15]
  void                    Nop                !     
  val?^ | miss    %110.1 = %15.0
  dr              %110.2 = CallTarget@0x5614fbc29b80[Call#3]
  goto BB13
BB91   <- [18]
  val?^ | miss    %91.0 = LdVar              eR    object, e0.2
  void                    Visible            v     
  val?            %91.2 = Force!<wrapped>    !     %91.0, e0.2   <(str|cls)->
  val?            %91.3 = %91.2
  goto BB34
BB21   <- [18]
  val?^ | miss    %21.0 = LdVar              eR    .classEnv, e0.2
  lgl$#-          %21.1 = Identical                %21.0, function(Class, default=.requirePackage("metho|...
  void                    Branch                   %21.1 -> BB111 (if true) | BB112 (if false)
BB113   <- [109]
  lgl$-           %113.0 = CastType           d     dn %109.1
  lgl$-           %113.1 = AsLogical                %113.0
  lgl$-           %113.2 = LOr                      %107.1, %113.1
  lgl$-           %113.3 = %113.2
  goto BB18
BB114   <- [109]
  fs              %114.0 = FrameState         R     0x5614f95db3a0+132: [%107.1, %109.1], env=e0.2
  void                    Deopt              !v    %114.0, Typecheck@0x5614fbc29b80[Type#9], %109.1   !
BB34   <- [91, 33]
  val?            %34.0 = Phi                      %33.2:BB33, %91.3:BB91
  val?            %34.1 = %34.0
  void                    Return             l     %34.1
BB111   <- [21]
  prom-           %111.0 = MkArg                    unboundValue, as[0x561504d976f0]_p8, e0.2
  val?            %111.1 = StaticCall         !v    .classEnv[0x5614fef04f30](%111.0, missingArg, false) { 0 2n } e0.2   <env->
  void                    StVar              lW    where, %111.1, e0.2
  val?^ | miss    %111.3 = LdVar              eR    getGeneric, e0.2
  lgl$#-          %111.4 = Identical                %111.3, function(f, mustFind=FALSE, where, package="")|...
  void                    Branch                   %111.4 -> BB115 (if true) | BB116 (if false)
BB112   <- [21]
  fs              %112.0 = FrameState         R     0x5614f95db3a0+139: [%18.1], env=e0.2
  void                    Deopt              !v    %112.0, CallTarget@0x5614fbc29b80[Call#4], %21.0   !
BB115   <- [111]
  prom-           %115.0 = MkArg                    unboundValue, as[0x561504d976f0]_p9 (!refl), e0.2
  val?            %115.1 = StaticCall         !v    getGeneric[0x561505184c30]("coerce", missingArg, %115.0) { 0 2n } e0.2   <cls>
  void                    StVar              lW    coerceFun, %115.1, e0.2
  val?^ | miss    %115.3 = LdVar              eR    .getMethodsTable, e0.2
  lgl$#-          %115.4 = Identical                %115.3, function(fdef, env=environment(fdef), check=TR|...
  void                    Branch                   %115.4 -> BB117 (if true) | BB118 (if false)
BB116   <- [111]
  fs              %116.0 = FrameState         R     0x5614f95db3a0+224: [], env=e0.2
  void                    Deopt              !v    %116.0, CallTarget@0x5614fbc29b80[Call#5], %111.3   !
BB117   <- [115]
  prom-           %117.0 = MkArg                    unboundValue, as[0x561504d976f0]_p10 (!refl), e0.2
  prom-           %117.1 = MkArg                    unboundValue, as[0x561504d976f0]_p11, e0.2
  val?            %117.2 = StaticCall         !v    .getMethodsTable[0x561504ece660](%117.0, %117.1, missingArg, true) { 0 1 3n } e0.2   <env->
  void                    StVar              lW    coerceMethods, %117.2, e0.2
  val?^ | miss    %117.4 = LdVar              eR    .quickCoerceSelect, e0.2
  lgl$#-          %117.5 = Identical                %117.4, function(from, to, fdef, methods, where) <(rir|...
  void                    Branch                   %117.5 -> BB119 (if true) | BB120 (if false)
BB118   <- [115]
  fs              %118.0 = FrameState         R     0x5614f95db3a0+283: [], env=e0.2
  void                    Deopt              !v    %118.0, CallTarget@0x5614fbc29b80[Call#6], %115.3   !
BB119   <- [117]
  prom-           %119.0 = MkArg                    unboundValue, as[0x561504d976f0]_p13, e0.2
  prom-           %119.1 = MkArg                    unboundValue, as[0x561504d976f0]_p14, e0.2
  prom-           %119.2 = MkArg                    unboundValue, as[0x561504d976f0]_p15, e0.2
  prom-           %119.3 = MkArg                    unboundValue, as[0x561504d976f0]_p16 (!refl), e0.2
  prom-           %119.4 = MkArg                    unboundValue, as[0x561504d976f0]_p17, e0.2
  val?            %119.5 = StaticCall         !v    .quickCoerceSelect[0x5614fab35a50](%119.0, %119.1, %119.2, %119.3, %119.4) e0.2   <(nil|cls)>
  lgl$-           %119.6 = Is                       %119.5, NULL
  void                    StVar              lW    asMethod, %119.5, e0.2
  val             %119.8 = ChkMissing         e     %119.5
  lgl$#-          %119.9 = CheckTrueFalse     e     %119.6
  void                    Branch                   %119.9 -> BB36 (if true) | BB30 (if false)
BB120   <- [117]
  fs              %120.0 = FrameState         R     0x5614f95db3a0+351: [], env=e0.2
  void                    Deopt              !v    %120.0, CallTarget@0x5614fbc29b80[Call#8], %117.4   !
BB36   <- [119]
  val?^ | miss    %36.0 = LdVar              eR    c, e0.2
  lgl$#-          %36.1 = Identical                <blt c>, %36.0   <true>
  void                    Branch                   %36.1 -> BB121 (if true) | BB122 (if false)
BB30   <- [119]
  void                    Nop                !     
  goto BB31
BB121   <- [36]
  val?^ | miss    %121.0 = LdVar              eR    thisClass, e0.2
  lgl$#-          %121.1 = IsType                   %121.0 isA val?~+ | miss
  void                    Branch                   %121.1 -> BB123 (if true) | BB124 (if false)
BB122   <- [36]
  void                    Nop                !     
  lgl$#-          %122.1 = %36.1
  dr              %122.2 = DeadBranchReached@0x5614fbc29b80[Test#0]
  goto BB28
BB31   <- [30, 37, 62]
  val?^ | miss    %31.0 = LdVar              eR    strict, e0.2
  void                    Visible            v     
  val?            %31.2 = Force!<lazy>       !     %31.0, e0.2   <lgl$->
  lgl$#-          %31.3 = CheckTrueFalse     we    %31.2
  void                    Branch                   %31.3 -> BB35 (if true) | BB32 (if false)
BB123   <- [121]
  val?~+ | miss   %123.0 = CastType           d     dn %121.0
  val?+           %123.1 = Force!<value>            %123.0,    <str$+>
  val?^ | miss    %123.2 = LdVar              eR    Class, e0.2
  val?            %123.3 = Force!<wrapped>    !v    %123.2, e0.2   <str$+>
  val?            %123.4 = NamedCall          !v    <blt c>(from=%123.1, to=%123.3) e0.2   <str+>
  void                    StVar              lW    sig, %123.4, e0.2
  (cls|spec|blt)  %123.6 = LdFun              !v    selectMethod, <0x5614fe9638a0>, e0.2
  prom-           %123.7 = MkArg                    unboundValue, as[0x561504d976f0]_p20, e0.2
  prom-           %123.8 = MkArg                    unboundValue, as[0x561504d976f0]_p21, e0.2
  prom-           %123.9 = MkArg                    unboundValue, as[0x561504d976f0]_p22, e0.2
  val?            %123.10 = NamedCall          !v    %123.6("coerce", %123.7, optional=true, useInherited=false, fdef=%123.8, mlist=%123.9) e0.2   <nil->
  lgl$-           %123.11 = Is                       %123.10, NULL
  void                    StVar              lW    asMethod, %123.10, e0.2
  val             %123.13 = ChkMissing         e     %123.10
  lgl$#-          %123.14 = CheckTrueFalse     e     %123.11
  void                    Branch                   %123.14 -> BB38 (if true) | BB37 (if false)
BB124   <- [121]
  void                    Nop                !     
  val?^ | miss    %124.1 = %121.0
  dr              %124.2 = Typecheck@0x5614fbc29b80[Type#28]
  goto BB28
BB28   <- [122, 124]
  val?^ | miss    %28.0 = Phi                      %122.1:BB122, %124.1:BB124
  val?^ | miss    %28.1 = %28.0
  dr              %28.2 = Phi                      %122.2:BB122, %124.2:BB124
  dr              %28.3 = %28.2
  fs              %28.4 = FrameState         R     0x5614f95db3a0+417: [], env=e0.2
  void                    Deopt              !v    %28.4, %28.3, %28.1   !
BB35   <- [31]
  (cls|spec|blt)  %35.0 = LdFun              !     asMethod, e0.2
  prom-           %35.1 = MkArg                    unboundValue, as[0x561504d976f0]_p19, e0.2
  val?            %35.2 = Call               !     %35.0(%35.1) e0.2   <val?>
  val?            %35.3 = %35.2
  goto BB33
BB32   <- [31]
  (cls|spec|blt)  %32.0 = LdFun              !     asMethod, e0.2
  prom-           %32.1 = MkArg                    unboundValue, as[0x561504d976f0]_p18, e0.2
  val?            %32.2 = NamedCall          !     %32.0(%32.1, strict=false) e0.2   <cls>
  val?            %32.3 = %32.2
  goto BB33
BB38   <- [123]
  void                    StVar              lW    canCache, true, e0.2
  void                    StVar              lW    inherited, false, e0.2
  val?^ | miss    %38.2 = LdVar              eR    is, e0.2
  lgl$#-          %38.3 = Identical                %38.2, function(object, class2) <(rir::DispatchTable*|...
  void                    Branch                   %38.3 -> BB125 (if true) | BB126 (if false)
BB37   <- [123]
  void                    Nop                !     
  goto BB31
BB33   <- [35, 32]
  val?            %33.0 = Phi                      %32.3:BB32, %35.3:BB35
  val?            %33.1 = %33.0
  val?            %33.2 = %33.1
  goto BB34
BB125   <- [38]
  prom-           %125.0 = MkArg                    unboundValue, as[0x561504d976f0]_p24, e0.2
  prom-           %125.1 = MkArg                    unboundValue, as[0x561504d976f0]_p25, e0.2
  val?            %125.2 = Call               !v    function(object, class2) <(rir::DispatchTable*|...(%125.0, %125.1) e0.2   <lgl$->
  lgl$#-          %125.3 = IsType                   %125.2 isA lgl$-
  void                    Branch                   %125.3 -> BB127 (if true) | BB128 (if false)
BB126   <- [38]
  fs              %126.0 = FrameState         R     0x5614f95db3a0+742: [], env=e0.2
  void                    Deopt              !v    %126.0, CallTarget@0x5614fbc29b80[Call#12], %38.2   !
BB127   <- [125]
  lgl$-           %127.0 = CastType           d     dn %125.2
  lgl$#-          %127.1 = CheckTrueFalse     e     %127.0
  void                    Branch                   %127.1 -> BB69 (if true) | BB43 (if false)
BB128   <- [125]
  void                    Nop                !     
  val?            %128.1 = %125.2
  dr              %128.2 = Typecheck@0x5614fbc29b80[Type#39]
  goto BB41
BB69   <- [127]
  val?^ | miss    %69.0 = LdVar              eR    getClassDef, e0.2
  lgl$#-          %69.1 = Identical                %69.0, function(Class, where=topenv(parent.frame()), |...
  void                    Branch                   %69.1 -> BB129 (if true) | BB130 (if false)
BB43   <- [127]
  void                    Nop                !     
  goto BB44
BB41   <- [128, 130]
  val?^ | miss    %41.0 = Phi                      %128.1:BB128, %130.1:BB130
  val?^ | miss    %41.1 = %41.0
  dr              %41.2 = Phi                      %128.2:BB128, %130.2:BB130
  dr              %41.3 = %41.2
  fs              %41.4 = FrameState         R     0x5614f95db3a0+779: [%125.2], env=e0.2
  void                    Deopt              !v    %41.4, %41.3, %41.1   !
BB129   <- [69]
  prom-           %129.0 = MkArg                    unboundValue, as[0x561504d976f0]_p40, e0.2
  prom-           %129.1 = MkArg                    unboundValue, as[0x561504d976f0]_p41, e0.2
  val?            %129.2 = StaticCall         !v    getClassDef[0x5615052301c0](%129.0, %129.1) e0.2   <other>
  void                    StVar              lW    ClassDef, %129.2, e0.2
  val?^ | miss    %129.4 = LdVar              eR    isFALSE, e0.2
  lgl$#-          %129.5 = Identical                %129.4, function(x) <(rir::DispatchTable*)0x5614fb9ff8|...
  void                    Branch                   %129.5 -> BB133 (if true) | BB134 (if false)
BB130   <- [69]
  void                    Nop                !     
  val?^ | miss    %130.1 = %69.0
  dr              %130.2 = CallTarget@0x5614fbc29b80[Call#13]
  goto BB41
BB44   <- [43, 85]
  val?^ | miss    %44.0 = LdVar              eR    asMethod, e0.2
  lgl$#-          %44.1 = IsType                   %44.0 isA val?~- | miss
  void                    Branch                   %44.1 -> BB131 (if true) | BB132 (if false)
BB133   <- [129]
  val?^ | miss    %133.0 = LdVar              eR    ext, e0.2
  val?            %133.1 = Force!<lazy>       !v    %133.0, e0.2   <other>
  prom-           %133.2 = MkArg                    %133.1, as[0x561504d976f0]_p42 (!refl), 
  val?            %133.3 = StaticCall         !v    isFALSE[0x5614fe7c3040](%133.2) e0.2   <lgl$->
  lgl$#-          %133.4 = IsType                   %133.3 isA lgl$-
  void                    Branch                   %133.4 -> BB135 (if true) | BB136 (if false)
BB134   <- [129]
  fs              %134.0 = FrameState         R     0x5614f95db3a0+846: [], env=e0.2
  void                    Deopt              !v    %134.0, CallTarget@0x5614fbc29b80[Call#14], %129.4   !
BB131   <- [44]
  val?~- | miss   %131.0 = CastType           d     dn %44.0
  val?-           %131.1 = Force!<value>            %131.0,    <cls->
  lgl$-           %131.2 = Is                       %131.1, NULL
  lgl$-           %131.3 = AsLogical                %131.2
  lgl$#-          %131.4 = Identical                %131.3, false
  void                    Branch                   %131.4 -> BB68 (if true) | BB47 (if false)
BB132   <- [44]
  void                    Nop                !     
  val?^ | miss    %132.1 = %44.0
  dr              %132.2 = Typecheck@0x5614fbc29b80[Type#74]
  goto BB45
BB135   <- [133]
  lgl$-           %135.0 = CastType           d     dn %133.3
  lgl$#-          %135.1 = CheckTrueFalse     e     %135.0
  void                    Branch                   %135.1 -> BB90 (if true) | BB74 (if false)
BB136   <- [133]
  void                    Nop                !     
  val?            %136.1 = %133.3
  dr              %136.2 = Typecheck@0x5614fbc29b80[Type#44]
  goto BB72
BB68   <- [131]
  void                    Nop                !     
  lgl$-           %68.1 = %131.3
  goto BB50
BB47   <- [131]
  val?^ | miss    %47.0 = LdVar              eR    extends, e0.2
  lgl$#-          %47.1 = Identical                %47.0, function(class1, class2, maybe=TRUE, fullInfo=|...
  void                    Branch                   %47.1 -> BB137 (if true) | BB138 (if false)
BB45   <- [132, 138]
  val?^ | miss    %45.0 = Phi                      %132.1:BB132, %138.1:BB138
  val?^ | miss    %45.1 = %45.0
  dr              %45.2 = Phi                      %132.2:BB132, %138.2:BB138
  dr              %45.3 = %45.2
  fs              %45.4 = FrameState         R     0x5614f95db3a0+1324: [], env=e0.2
  void                    Deopt              !v    %45.4, %45.3, %45.1   !
BB90   <- [135]
  (cls|spec|blt)  %90.0 = LdFun              !v    stop, e0.2
  fs              %90.1 = FrameState         R     0x5614f95db3a0+1283: [%90.0], env=e0.2
  void                    Deopt              !v    %90.1, DeadCall@0x5614fbc29b80[Call#24], %90.0   !
BB74   <- [135]
  val?^ | miss    %74.0 = LdVar              eR    isTRUE, e0.2
  lgl$#-          %74.1 = Identical                %74.0, function(x) <(rir::DispatchTable*)0x5614fa764a|...
  void                    Branch                   %74.1 -> BB139 (if true) | BB140 (if false)
BB72   <- [136, 140]
  val?^ | miss    %72.0 = Phi                      %136.1:BB136, %140.1:BB140
  val?^ | miss    %72.1 = %72.0
  dr              %72.2 = Phi                      %136.2:BB136, %140.2:BB140
  dr              %72.3 = %72.2
  fs              %72.4 = FrameState         R     0x5614f95db3a0+878: [%133.3], env=e0.2
  void                    Deopt              !v    %72.4, %72.3, %72.1   !
BB50   <- [68, 143]
  lgl$-           %50.0 = Phi                      %143.3:BB143, %68.1:BB68
  lgl$-           %50.1 = %50.0
  lgl$#-          %50.2 = CheckTrueFalse     e     %50.1
  void                    Branch                   %50.2 -> BB67 (if true) | BB53 (if false)
BB137   <- [47]
  prom-           %137.0 = MkArg                    unboundValue, as[0x561504d976f0]_p26, e0.2
  prom-           %137.1 = MkArg                    unboundValue, as[0x561504d976f0]_p27, e0.2
  val?            %137.2 = Call               !v    function(class1, class2, maybe=TRUE, fullInfo=|...(%137.0, %137.1) e0.2   <lgl$->
  lgl$#-          %137.3 = IsType                   %137.2 isA lgl$-
  void                    Branch                   %137.3 -> BB143 (if true) | BB144 (if false)
BB138   <- [47]
  void                    Nop                !     
  val?^ | miss    %138.1 = %47.0
  dr              %138.2 = CallTarget@0x5614fbc29b80[Call#27]
  goto BB45
BB139   <- [74]
  val?^ | miss    %139.0 = LdVar              eR    ext, e0.2
  val?            %139.1 = Force!<wrapped>    !v    %139.0, e0.2   <other>
  prom-           %139.2 = MkArg                    %139.1, as[0x561504d976f0]_p43 (!refl), 
  val?            %139.3 = StaticCall         !v    isTRUE[0x5614fe81a240](%139.2) e0.2   <lgl$->
  lgl$#-          %139.4 = IsType                   %139.3 isA lgl$-
  void                    Branch                   %139.4 -> BB141 (if true) | BB142 (if false)
BB140   <- [74]
  void                    Nop                !     
  val?^ | miss    %140.1 = %74.0
  dr              %140.2 = CallTarget@0x5614fbc29b80[Call#15]
  goto BB72
BB67   <- [50]
  (cls|spec|blt)  %67.0 = LdFun              !v    getClassDef, e0.2
  fs              %67.1 = FrameState         R     0x5614f95db3a0+1410: [%67.0], env=e0.2
  void                    Deopt              !v    %67.1, DeadCall@0x5614fbc29b80[Call#28], %67.0   !
BB53   <- [50]
  val?^ | miss    %53.0 = LdVar              eR    asMethod, e0.2
  lgl$#-          %53.1 = IsType                   %53.0 isA val?~- | miss
  void                    Branch                   %53.1 -> BB145 (if true) | BB146 (if false)
BB143   <- [137]
  lgl$-           %143.0 = CastType           d     dn %137.2
  lgl$-           %143.1 = AsLogical                %143.0
  lgl$-           %143.2 = LAnd                     %131.3, %143.1
  lgl$-           %143.3 = %143.2
  goto BB50
BB144   <- [137]
  fs              %144.0 = FrameState         R     0x5614f95db3a0+1387: [%131.3, %137.2], env=e0.2
  void                    Deopt              !v    %144.0, Typecheck@0x5614fbc29b80[Type#77], %137.2   !
BB141   <- [139]
  lgl$-           %141.0 = CastType           d     dn %139.3
  lgl$#-          %141.1 = CheckTrueFalse     e     %141.0
  void                    Branch                   %141.1 -> BB89 (if true) | BB77 (if false)
BB142   <- [139]
  fs              %142.0 = FrameState         R     0x5614f95db3a0+921: [%139.3], env=e0.2
  void                    Deopt              !v    %142.0, Typecheck@0x5614fbc29b80[Type#46], %139.3   !
BB145   <- [53]
  val?~- | miss   %145.0 = CastType           d     dn %53.0
  val?-           %145.1 = Force!<value>            %145.0,    <(nil|cls)->
  lgl$-           %145.2 = Is                       %145.1, NULL
  lgl$#-          %145.3 = CheckTrueFalse     e     %145.2
  void                    Branch                   %145.3 -> BB66 (if true) | BB54 (if false)
BB146   <- [53]
  void                    Nop                !     
  val?^ | miss    %146.1 = %53.0
  dr              %146.2 = Typecheck@0x5614fbc29b80[Type#86]
  goto BB51
BB89   <- [141]
  (cls|spec|blt)  %89.0 = LdFun              !v    .makeAsMethod, e0.2
  fs              %89.1 = FrameState         R     0x5614f95db3a0+1212: [%89.0], env=e0.2
  void                    Deopt              !v    %89.1, DeadCall@0x5614fbc29b80[Call#23], %89.0   !
BB77   <- [141]
  (cls|spec|blt)  %77.0 = LdFun              !v    @, <0x5614f88a6bd8>, e0.2
  prom-           %77.1 = MkArg                    unboundValue, as[0x561504d976f0]_p44, e0.2
  prom-           %77.2 = MkArg                    unboundValue, as[0x561504d976f0]_p45, e0.2
  val?            %77.3 = Call               !v    %77.0(%77.1, %77.2) e0.2   <cls->
  void                    StVar              lW    test, %77.3, e0.2
  val?^ | miss    %77.5 = LdVar              eR    .makeAsMethod, e0.2
  lgl$#-          %77.6 = Identical                %77.5, function(expr, simple, Class, ClassDef, where)|...
  void                    Branch                   %77.6 -> BB147 (if true) | BB148 (if false)
BB66   <- [145]
  (cls|spec|blt)  %66.0 = LdFun              !v    selectMethod, <0x5614fe9638a0>, e0.2
  prom-           %66.1 = MkArg                    unboundValue, as[0x561504d976f0]_p36, e0.2
  prom-           %66.2 = MkArg                    unboundValue, as[0x561504d976f0]_p37, e0.2
  prom-           %66.3 = MkArg                    unboundValue, as[0x561504d976f0]_p38, e0.2
  prom-           %66.4 = MkArg                    unboundValue, as[0x561504d976f0]_p39, e0.2
  val?            %66.5 = NamedCall          !v    %66.0("coerce", %66.1, optional=true, %66.2, fdef=%66.3, mlist=%66.4) e0.2   <cls>
  void                    StVar              lW    asMethod, %66.5, e0.2
  void                    StVar              lW    inherited, true, e0.2
  goto BB57
BB54   <- [145]
  val?^ | miss    %54.0 = LdVar              eR    canCache, e0.2
  lgl$#-          %54.1 = IsType                   %54.0 isA lgl$-
  void                    Branch                   %54.1 -> BB149 (if true) | BB150 (if false)
BB51   <- [146, 150, 156]
  val?^ | miss    %51.0 = Phi                      %146.1:BB146, %150.1:BB150, %156.1:BB156
  val?^ | miss    %51.1 = %51.0
  dr              %51.2 = Phi                      %146.2:BB146, %150.2:BB150, %156.2:BB156
  dr              %51.3 = %51.2
  fs              %51.4 = FrameState         R     0x5614f95db3a0+1394: [%50.1], env=e0.2
  void                    Deopt              !v    %51.4, %51.3, %51.1   !
BB147   <- [77]
  prom-           %147.0 = MkArg                    unboundValue, as[0x561504d976f0]_p46, e0.2
  prom-           %147.1 = MkArg                    unboundValue, as[0x561504d976f0]_p49, e0.2
  prom-           %147.2 = MkArg                    unboundValue, as[0x561504d976f0]_p52, e0.2
  prom-           %147.3 = MkArg                    unboundValue, as[0x561504d976f0]_p53, e0.2
  prom-           %147.4 = MkArg                    unboundValue, as[0x561504d976f0]_p54, e0.2
  val?            %147.5 = StaticCall         !v    .makeAsMethod[0x561502b15910](%147.0, %147.1, %147.2, %147.3, %147.4) e0.2   <cls->
  void                    StVar              lW    asMethod, %147.5, e0.2
  val?^ | miss    %147.7 = LdVar              eR    is.function, e0.2
  lgl$#-          %147.8 = Identical                <blt is.function>, %147.7   <true>
  void                    Branch                   %147.8 -> BB151 (if true) | BB152 (if false)
BB148   <- [77]
  fs              %148.0 = FrameState         R     0x5614f95db3a0+983: [], env=e0.2
  void                    Deopt              !v    %148.0, CallTarget@0x5614fbc29b80[Call#17], %77.5   !
BB57   <- [66, 56]
  val?^ | miss    %57.0 = LdVar              eR    asMethod, e0.2
  val?            %57.1 = Force!<value>      !v    %57.0, e0.2   <cls>
  lgl$-           %57.2 = Is                       %57.1, NULL
  lgl$#-          %57.3 = CheckTrueFalse     e     %57.2
  void                    Branch                   %57.3 -> BB64 (if true) | BB60 (if false)
BB149   <- [54]
  lgl$-           %149.0 = CastType           d     dn %54.0
  lgl$#-          %149.1 = CheckTrueFalse     e     %149.0
  void                    Branch                   %149.1 -> BB65 (if true) | BB55 (if false)
BB150   <- [54]
  void                    Nop                !     
  val?^ | miss    %150.1 = %54.0
  dr              %150.2 = Typecheck@0x5614fbc29b80[Type#87]
  goto BB51
BB151   <- [147]
  val?^ | miss    %151.0 = LdVar              eR    test, e0.2
  lgl$#-          %151.1 = IsType                   %151.0 isA val?~- | miss
  void                    Branch                   %151.1 -> BB153 (if true) | BB154 (if false)
BB152   <- [147]
  void                    Nop                !     
  lgl$#-          %152.1 = %147.8
  dr              %152.2 = DeadBranchReached@0x5614fbc29b80[Test#1]
  goto BB80
BB64   <- [57]
  (cls|spec|blt)  %64.0 = LdFun              !v    stop, e0.2
  fs              %64.1 = FrameState         R     0x5614f95db3a0+1881: [%64.0], env=e0.2
  void                    Deopt              !v    %64.1, DeadCall@0x5614fbc29b80[Call#34], %64.0   !
BB60   <- [57]
  val?^ | miss    %60.0 = LdVar              eR    canCache, e0.2
  lgl$#-          %60.1 = IsType                   %60.0 isA lgl$-
  void                    Branch                   %60.1 -> BB161 (if true) | BB162 (if false)
BB65   <- [149]
  val?^ | miss    %65.0 = LdVar              eR    .asCoerceMethod, e0.2
  lgl$#-          %65.1 = Identical                %65.0, function(def, thisClass, ClassDef, replace, wh|...
  void                    Branch                   %65.1 -> BB155 (if true) | BB156 (if false)
BB55   <- [149]
  void                    Nop                !     
  goto BB56
BB153   <- [151]
  val?~- | miss   %153.0 = CastType           d     dn %151.0
  val?-           %153.1 = Force!<value>            %153.0,    <cls->
  lgl$#-          %153.2 = CallSafeBuiltin    wed   is.function(%153.1)    <lgl$->
  lgl$#-          %153.3 = Not                d     %153.2, elided
  void                    Branch                   %153.2 -> BB86 (if true) | BB84 (if false)
BB154   <- [151]
  void                    Nop                !     
  val?^ | miss    %154.1 = %151.0
  dr              %154.2 = Typecheck@0x5614fbc29b80[Type#61]
  goto BB80
BB80   <- [152, 154]
  val?^ | miss    %80.0 = Phi                      %152.1:BB152, %154.1:BB154
  val?^ | miss    %80.1 = %80.0
  dr              %80.2 = Phi                      %152.2:BB152, %154.2:BB154
  dr              %80.3 = %80.2
  fs              %80.4 = FrameState         R     0x5614f95db3a0+1049: [], env=e0.2
  void                    Deopt              !v    %80.4, %80.3, %80.1   !
BB161   <- [60]
  lgl$-           %161.0 = CastType           d     dn %60.0
  lgl$#-          %161.1 = CheckTrueFalse     e     %161.0
  void                    Branch                   %161.1 -> BB63 (if true) | BB61 (if false)
BB162   <- [60]
  void                    Nop                !     
  val?^ | miss    %162.1 = %60.0
  dr              %162.2 = Typecheck@0x5614fbc29b80[Type#99]
  goto BB58
BB155   <- [65]
  prom-           %155.0 = MkArg                    unboundValue, as[0x561504d976f0]_p32, e0.2
  prom-           %155.1 = MkArg                    unboundValue, as[0x561504d976f0]_p33, e0.2
  prom-           %155.2 = MkArg                    unboundValue, as[0x561504d976f0]_p34, e0.2
  prom-           %155.3 = MkArg                    unboundValue, as[0x561504d976f0]_p35, e0.2
  val?            %155.4 = StaticCall         !v    .asCoerceMethod[0x5614fc897b00](%155.0, %155.1, %155.2, false, %155.3) e0.2   <cls>
  void                    StVar              lW    asMethod, %155.4, e0.2
  goto BB56
BB156   <- [65]
  void                    Nop                !     
  val?^ | miss    %156.1 = %65.0
  dr              %156.2 = CallTarget@0x5614fbc29b80[Call#30]
  goto BB51
BB56   <- [55, 155]
  void                    Nop                !     
  goto BB57
BB86   <- [153]
  val?^ | miss    %86.0 = LdVar              eR    isTRUE, e0.2
  lgl$#-          %86.1 = Identical                %86.0, function(x) <(rir::DispatchTable*)0x5614fa764a|...
  void                    Branch                   %86.1 -> BB157 (if true) | BB158 (if false)
BB84   <- [153]
  void                    Nop                !     
  lgl$#-          %84.1 = %153.3
  goto BB85
BB63   <- [161]
  val?^ | miss    %63.0 = LdVar              eR    cacheMethod, e0.2
  lgl$#-          %63.1 = Identical                %63.0, function(f, sig, def, args=names(sig), fdef, i|...
  void                    Branch                   %63.1 -> BB163 (if true) | BB164 (if false)
BB61   <- [161]
  void                    Nop                !     
  goto BB62
BB58   <- [162, 164]
  val?^ | miss    %58.0 = Phi                      %162.1:BB162, %164.1:BB164
  val?^ | miss    %58.1 = %58.0
  dr              %58.2 = Phi                      %162.2:BB162, %164.2:BB164
  dr              %58.3 = %58.2
  fs              %58.4 = FrameState         R     0x5614f95db3a0+1757: [%57.1], env=e0.2
  void                    Deopt              !v    %58.4, %58.3, %58.1   !
BB157   <- [86]
  prom-           %157.0 = MkArg                    unboundValue, as[0x561504d976f0]_p55, e0.2
  val?            %157.1 = StaticCall         !v    isTRUE[0x5614fb52faa0](%157.0) e0.2   <lgl$->
  lgl$#-          %157.2 = IsType                   %157.1 isA lgl$-
  void                    Branch                   %157.2 -> BB159 (if true) | BB160 (if false)
BB158   <- [86]
  fs              %158.0 = FrameState         R     0x5614f95db3a0+1140: [%153.2], env=e0.2
  void                    Deopt              !v    %158.0, CallTarget@0x5614fbc29b80[Call#21], %86.0   !
BB85   <- [84, 159]
  lgl$-           %85.0 = Phi                      %159.3:BB159, %84.1:BB84
  lgl$-           %85.1 = %85.0
  void                    StVar              lW    canCache, %85.1, e0.2
  goto BB44
BB163   <- [63]
  prom-           %163.0 = MkArg                    unboundValue, as[0x561504d976f0]_p28, e0.2
  prom-           %163.1 = MkArg                    unboundValue, as[0x561504d976f0]_p29, e0.2
  prom-           %163.2 = MkArg                    unboundValue, as[0x561504d976f0]_p30, e0.2
  prom-           %163.3 = MkArg                    unboundValue, as[0x561504d976f0]_p31, e0.2
  val?            %163.4 = StaticCall         !v    cacheMethod[0x5614fad13950]("coerce", %163.0, %163.1, missingArg, %163.2, %163.3) { 0 1 2 4n 5n } e0.2
  goto BB62
BB164   <- [63]
  void                    Nop                !     
  val?^ | miss    %164.1 = %63.0
  dr              %164.2 = CallTarget@0x5614fbc29b80[Call#33]
  goto BB58
BB62   <- [61, 163]
  void                    Nop                !     
  goto BB31
BB159   <- [157]
  lgl$-           %159.0 = CastType           d     dn %157.1
  lgl$-           %159.1 = AsLogical                %159.0
  lgl$-           %159.2 = LOr                      %153.3, %159.1
  lgl$-           %159.3 = %159.2
  goto BB85
BB160   <- [157]
  fs              %160.0 = FrameState         R     0x5614f95db3a0+1186: [%153.3, %157.1], env=e0.2
  void                    Deopt              !v    %160.0, Typecheck@0x5614fbc29b80[Type#65], %157.1   !
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     possibleExtends, <0x5614fe9811e8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, as[0x561504d976f0]_p2, e0.0
  prom-           %0.3  = MkArg                    unboundValue, as[0x561504d976f0]_p3, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <other>
  void                    Return             l     %0.4
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    thisClass, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$+>
  void                    Return             l     %0.3
Prom 3:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    Class, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$+>
  void                    Return             l     %0.3
Prom 4:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    object, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <val?>
  void                    Return             l     %0.3
Prom 5:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    thisClass, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$+>
  void                    Return             l     %0.3
Prom 6:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    Class, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str$+>
  void                    Return             l     %0.3
Prom 7:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    Class, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$+>
  void                    Return             l     %0.3
Prom 8:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    thisClass, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$+>
  void                    Return             l     %0.3
Prom 9:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 10:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    coerceFun, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 11:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     environment, <0x5614f8c4db68>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, as[0x561504d976f0]_p12, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <env->
  void                    Return             l     %0.3
Prom 12:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    coerceFun, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 13:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    thisClass, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$+>
  void                    Return             l     %0.3
Prom 14:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    Class, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$+>
  void                    Return             l     %0.3
Prom 15:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    coerceFun, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 16:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    coerceMethods, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 17:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 18:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    object, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 19:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    object, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <val?>
  void                    Return             l     %0.3
Prom 20:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    sig, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str+>
  void                    Return             l     %0.3
Prom 21:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    coerceFun, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 22:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     getMethodsForDispatch, <0x5614faea80b8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, as[0x561504d976f0]_p23, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <env->
  void                    Return             l     %0.3
Prom 23:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    coerceFun, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 24:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    object, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <(cls|other)>
  void                    Return             l     %0.3
Prom 25:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    Class, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$+>
  void                    Return             l     %0.3
Prom 26:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    Class, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 27:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    thisClass, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 28:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    sig, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str+>
  void                    Return             l     %0.3
Prom 29:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    asMethod, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 30:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    coerceFun, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 31:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    inherited, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <lgl$->
  void                    Return             l     %0.3
Prom 32:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    asMethod, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls->
  void                    Return             l     %0.3
Prom 33:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    thisClass, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$+>
  void                    Return             l     %0.3
Prom 34:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    ClassDef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <other>
  void                    Return             l     %0.3
Prom 35:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 36:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    sig, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str+>
  void                    Return             l     %0.3
Prom 37:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     c, <0x5614f88a7940>, e0.0
  val?            %0.2  = NamedCall          !     %0.1(from=true, to=false) e0.0   <lgl+>
  void                    Return             l     %0.2
Prom 38:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    coerceFun, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 39:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    coerceMethods, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 40:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    Class, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$+>
  void                    Return             l     %0.3
Prom 41:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 42:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    ext, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <other>
  void                    Return             l     %0.3
Prom 43:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    ext, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <other>
  void                    Return             l     %0.3
Prom 44:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    ext, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 45:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    test, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 46:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, <0x5614f88a6bd8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, as[0x561504d976f0]_p47, e0.0
  prom-           %0.3  = MkArg                    unboundValue, as[0x561504d976f0]_p48, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <cls->
  void                    Return             l     %0.4
Prom 47:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    ext, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 48:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    coerce, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 49:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, <0x5614f88a6bd8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, as[0x561504d976f0]_p50, e0.0
  prom-           %0.3  = MkArg                    unboundValue, as[0x561504d976f0]_p51, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <lgl$->
  void                    Return             l     %0.4
Prom 50:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    ext, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 51:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    simple, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 52:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    Class, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 53:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    ClassDef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 54:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 55:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     body, <0x5614fce29c40>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, as[0x561504d976f0]_p56, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <lgl$->
  void                    Return             l     %0.3
Prom 56:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    test, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls->
  void                    Return             l     %0.3

│ as[0x561504d976f0]                                                           │
└──────────────────────────────────────────────────────────────────────────────┘
