
┌──────────────────────────────────────────────────────────────────────────────┐
│ sparseInt.r[0x5614fa828b20]                                                  │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;Eager1,Eager2,NonRefl1,NonRefl2,!Obj1,!Obj2│
│ Properties:                                                                  │
├────── Final PIR Version
sparseInt.r[0x5614fa828b20]
BB0
  val?^           %0.0  = LdArg                    3
  val?~+          %0.1  = LdArg                    2
  val?~+          %0.2  = LdArg                    1
  val?^           %0.3  = LdArg                    0
  env             e0.4  = MkEnv              l     rList=%0.3, do.names=%0.2, forceSparse=%0.1, verbose=%0.0, parent=<env 0x5614fad267d8>, context 1
  cls             %0.5  = MkCls                    F, e0.4
  val?^ | miss    %0.6  = LdVar              eR    length, <env 0x5614fad267d8>
  lgl$#-          %0.7  = Identical                <blt length>, %0.6   <true>
  void                    Branch                   %0.7 -> BB47 (if true) | BB48 (if false)
BB47   <- [0]
  val?            %47.0 = Force!<lazy>       !v    %0.3, e0.4   <vec$->
  lgl$#-          %47.1 = IsType                   %47.0 isA val?-
  void                    Branch                   %47.1 -> BB49 (if true) | BB50 (if false)
BB48   <- [0]
  fs              %48.0 = FrameState         R     0x5614ffab24d0+0: [], env=e0.4
  void                    Deopt              !v    %48.0, DeadBranchReached@0x5614fe030650[Test#0], %0.7
BB49   <- [47]
  val?-           %49.0 = CastType           d     dn %47.0   <vec$->
  (int|real)$-    %49.1 = CallSafeBuiltin    wed   length(%49.0)    <int$->
  lgl$#-          %49.2 = IsType                   %49.1 isA int$-
  void                    Branch                   %49.2 -> BB51 (if true) | BB52 (if false)
BB50   <- [47]
  fs              %50.0 = FrameState         R     0x5614ffab24d0+69: [<blt length>, %47.0], env=e0.4
  void                    Deopt              !v    %50.0, Typecheck@0x5614fe030650[Type#1], %47.0   !
BB51   <- [49]
  int$-           %51.0 = CastType           d     dn %49.1
  void                    StVar              lW    nl, %51.0, e0.4
  val?^ | miss    %51.2 = LdVar              eR    forceSparse, e0.4
  val?            %51.3 = Force!<value>      !v    %51.2, e0.4   <lgl$->
  lgl$#-          %51.4 = CheckTrueFalse     we    %51.3
  void                    Branch                   %51.4 -> BB45 (if true) | BB7 (if false)
BB52   <- [49]
  fs              %52.0 = FrameState         R     0x5614ffab24d0+91: [%49.1], env=e0.4
  void                    Deopt              !v    %52.0, Typecheck@0x5614fe030650[Type#2], %49.1   !
BB45   <- [51]
  void                    StVar              lW    F, %0.5, e0.4
  goto BB8
BB7   <- [51]
  void                    Nop                !     
  goto BB8
BB8   <- [7, 45]
  val?^ | miss    %8.0  = LdVar              eR    verbose, e0.4
  val?            %8.1  = Force!<lazy>       !v    %8.0, e0.4   <lgl$->
  lgl$#-          %8.2  = CheckTrueFalse     we    %8.1
  void                    Branch                   %8.2 -> BB44 (if true) | BB11 (if false)
BB44   <- [8]
  (cls|spec|blt)  %44.0 = LdFun              !v    cat, e0.4
  fs              %44.1 = FrameState         R     0x5614ffab24d0+185: [%44.0], env=e0.4
  void                    Deopt              !v    %44.1, DeadCall@0x5614fe030650[Call#1], %44.0   !
BB11   <- [8]
  val?^ | miss    %11.0 = LdVar              eR    nl, e0.4
  lgl$#-          %11.1 = IsType                   %11.0 isA int$-
  void                    Branch                   %11.1 -> BB53 (if true) | BB54 (if false)
BB53   <- [11]
  int$-           %53.0 = CastType           d     dn %11.0
  lgl$-           %53.1 = Eq                 d     %53.0, 1, elided   <lgl$->
  lgl$#-          %53.2 = CheckTrueFalse     e     %53.1
  void                    Branch                   %53.2 -> BB28 (if true) | BB12 (if false)
BB54   <- [11]
  fs              %54.0 = FrameState         R     0x5614ffab24d0+170: [%8.2], env=e0.4
  void                    Deopt              !v    %54.0, Typecheck@0x5614fe030650[Type#12], %11.0   !
BB28   <- [53]
  val?^ | miss    %28.0 = LdVar              eR    forceSparse, e0.4
  val?            %28.1 = Force!<value>      !v    %28.0, e0.4   <lgl$->
  lgl$#-          %28.2 = CheckTrueFalse     we    %28.1
  void                    Branch                   %28.2 -> BB34 (if true) | BB31 (if false)
BB12   <- [53]
  val?^ | miss    %12.0 = LdVar              eR    rList, e0.4
  val?            %12.1 = Force!             !v    %12.0, e0.4   <val?_>
  lgl$#-          %12.2 = IsType                   %12.1 isA val?+
  void                    Branch                   %12.2 -> BB55 (if true) | BB56 (if false)
BB34   <- [28]
  val?^ | miss    %34.0 = LdVar              eR    F, e0.4
  (cls|spec|blt)  %34.1 = CastType                 dn %34.0
  val+            %34.2 = CallSafeBuiltin          bodyCode(%34.1) 
  lgl$#-          %34.3 = Identical                %34.2, <(rir::DispatchTable*)0x5614fe1d85d0>
  void                    Branch                   %34.3 -> BB57 (if true) | BB58 (if false)
BB31   <- [28]
  val?^ | miss    %31.0 = LdVar              eR    rList, e0.4
  val?            %31.1 = Force!             !v    %31.0, e0.4   <val?_>
  lgl$#-          %31.2 = IsType                   %31.1 isA val?+
  void                    Branch                   %31.2 -> BB61 (if true) | BB62 (if false)
BB55   <- [12]
  val?+           %55.0 = CastType           d     dn %12.1   <val?_>
  val?            %55.1 = Extract2_1D        wed   %55.0, 1, elided   <val?_>
  void                    StVar              lW    r, %55.1, e0.4
  val?^ | miss    %55.3 = LdVar              eR    nl, e0.4
  val?            %55.4 = Force!             !v    %55.3, e0.4   <val?_>
  lgl$#-          %55.5 = ColonInputEffects  we    2, %55.4   <@?>
  void                    Branch                   %55.5 -> BB22 (if true) | BB17 (if false)
BB56   <- [12]
  fs              %56.0 = FrameState         R     0x5614ffab24d0+321: [%12.1], env=e0.4
  void                    Deopt              !v    %56.0, Typecheck@0x5614fe030650[Type#14], %12.1   !
BB57   <- [34]
  val?            %57.0 = Force!             d     %34.0, 
  prom-           %57.1 = MkArg                    unboundValue, sparseInt.r[0x5614fa828b20]_p7, e0.4
  (cls|spec|blt)  %57.2 = ChkFunction        e     %57.0
  env             e57.3 = CallSafeBuiltin          environment(%57.2) 
  ct              %57.4 = PushContext        lCL   %57.1, F([[(rList, 1)), %57.2, e0.4
  val?^           %57.5 = CastType                 up %57.1
  val?^ | miss    %57.6 = LdVar              eR    is.matrix, e57.3
  lgl$#-          %57.7 = Identical                <blt is.matrix>, %57.6   <true>
  void                    Branch                   %57.7 -> BB59 (if true) | BB60 (if false)
BB58   <- [34]
  fs              %58.0 = FrameState         R     0x5614ffab24d0+814: [%28.2], env=e0.4
  void                    Deopt              !v    %58.0, CallTarget@0x5614fe030650[Call#9], %34.2   !
BB61   <- [31]
  val?+           %61.0 = CastType           d     dn %31.1   <val?_>
  val?            %61.1 = Extract2_1D        wed   %61.0, 1, elided   <val?_>
  void                    Visible            v     
  val?            %61.3 = %61.1
  goto BB20
BB62   <- [31]
  fs              %62.0 = FrameState         R     0x5614ffab24d0+828: [%31.1], env=e0.4
  void                    Deopt              !v    %62.0, Typecheck@0x5614fe030650[Type#50], %31.1   !
BB22   <- [55]
  int$#-          %22.0 = ColonCastRhs       e     2L, %55.4   <val?_>
  lgl$#-          %22.1 = Lte                d     2L, %22.0, elided   <@?>
  void                    Branch                   %22.1 -> BB27 (if true) | BB23 (if false)
BB17   <- [55]
  lgl$#-          %17.0 = IsType                   %55.4 isA val?+
  void                    Branch                   %17.0 -> BB63 (if true) | BB64 (if false)
BB59   <- [57]
  env             e59.0 = MkEnv              l     m=%57.5, parent=e57.3, context 1
  val?            %59.1 = Force!<lazy>       !vL   %57.5, e59.0   <other>
  val?            %59.2 = CallBuiltin        !v    is.matrix(%59.1) e59.0   <lgl$->
  lgl$#-          %59.3 = IsType                   %59.2 isA lgl$-
  void                    Branch                   %59.3 -> BB65 (if true) | BB66 (if false)
BB60   <- [57]
  fs              %60.0 = FrameState         R     0x5614ffab24d0+914: [], env=e0.4
  env             e60.1 = (MkEnv)            l     m=%57.5, parent=e57.3, context 1
  fs              %60.2 = FrameState         R     0x5615053694e0+17: [<blt is.matrix>, %57.7], env=e60.1, next=%60.0
  void                    Deopt              !v    %60.2, DeadBranchReached@0x5614ff0e9108[Test#0], %57.7   !
BB20   <- [19, 40, 61]
  val?            %20.0 = Phi                      %19.3:BB19, %61.3:BB61, %40.3:BB40
  val?            %20.1 = %20.0
  void                    Return             l     %20.1
BB27   <- [22]
  void                    Nop                !     
  int$#-          %27.1 = 1L
  goto BB24
BB23   <- [22]
  void                    Nop                !     
  int$#-          %23.1 = -1L
  goto BB24
BB63   <- [17]
  val?+           %63.0 = CastType           d     dn %55.4   <val?_>
  (int|real|complex)+ %63.1 = Colon              wed   2L, %63.0, elided
  (cls|spec|blt)  %63.2 = LdFun              !v    for, e0.4
  prom-           %63.3 = MkArg                    %63.1, sparseInt.r[0x5614fa828b20]_p0 (!refl), e0.4
  prom-           %63.4 = MkArg                    unboundValue, sparseInt.r[0x5614fa828b20]_p1, e0.4
  val?            %63.5 = Call               !v    %63.2(%63.3, %63.4) e0.4
  goto BB18
BB64   <- [17]
  fs              %64.0 = FrameState         R     0x5614ffab24d0+402: [2, %55.4, %55.5], env=e0.4
  void                    Deopt              !v    %64.0, Typecheck@0x5614fe030650[Type#16], %55.4   !
BB65   <- [59]
  lgl$-           %65.0 = CastType           d     dn %59.2
  lgl$#-          %65.1 = CheckTrueFalse     e     %65.0
  void                    Branch                   %65.1 -> BB41 (if true) | BB39 (if false)
BB66   <- [59]
  fs              %66.0 = FrameState         R     0x5614ffab24d0+914: [], env=e0.4
  fs              %66.1 = FrameState         R     0x5615053694e0+91: [%59.2], env=e59.0, next=%66.0
  void                    Deopt              !v    %66.1, Typecheck@0x5614ff0e9108[Type#2], %59.2   !
BB24   <- [27, 23]
  int$#-          %24.0 = Phi                      %27.1:BB27, %23.1:BB23
  int$#-          %24.1 = %24.0
  lgl$#-          %24.2 = Neq                d     %22.0, 2L, elided   <@?>
  void                    Branch                   %24.2 -> BB26 (if true) | BB25 (if false)
BB18   <- [25, 63]
  val?^ | miss    %18.0 = LdVar              eR    forceSparse, e0.4
  val?            %18.1 = Force!             !v    %18.0, e0.4   <val?_>
  lgl$#-          %18.2 = CheckTrueFalse     we    %18.1
  void                    Branch                   %18.2 -> BB21 (if true) | BB19 (if false)
BB41   <- [65]
  val?^ | miss    %41.0 = LdVar              eR    .Call, e59.0
  lgl$#-          %41.1 = Identical                <blt .Call>, %41.0   <@?>
  void                    Branch                   %41.1 -> BB43 (if true) | BB42 (if false)
BB39   <- [65]
  val?^ | miss    %39.0 = LdVar              eR    m, e59.0
  void                    Visible            v     
  val?            %39.2 = Force!<wrapped>    !     %39.0, e59.0   <other>
  val?            %39.3 = %39.2
  goto BB40
BB26   <- [24]
  void                    StVar              lW    j, 2L, e0.4
  int$-           %26.1 = Add                d     2L, %24.1, elided
  (cls|spec|blt)  %26.2 = LdFun              !v    sparse2int, e0.4
  fs              %26.3 = FrameState         R     0x5614ffab24d0+535: [%24.1, %22.0, %26.1, %26.2], env=e0.4
  void                    Deopt              !v    %26.3, DeadCall@0x5614fe030650[Call#6], %26.2   !
BB25   <- [24]
  void                    Nop                !     
  goto BB18
BB21   <- [18]
  (cls|spec|blt)  %21.0 = LdFun              !v    F, e0.4
  fs              %21.1 = FrameState         R     0x5614ffab24d0+762: [%21.0], env=e0.4
  void                    Deopt              !v    %21.1, DeadCall@0x5614fe030650[Call#8], %21.0   !
BB19   <- [18]
  val?^ | miss    %19.0 = LdVar              eR    r, e0.4
  void                    Visible            v     
  val?            %19.2 = Force!             !     %19.0, e0.4   <val?_>
  val?            %19.3 = %19.2
  goto BB20
BB43   <- [41]
  val?^ | miss    %43.0 = LdVar              eR    dense_to_Csparse, e59.0
  val?            %43.1 = Force!             !v    %43.0, e59.0   <val?_>
  val?^ | miss    %43.2 = LdVar              eR    m, e59.0
  val?            %43.3 = Force!             !v    %43.2, e59.0   <val?_>
  val?            %43.4 = CallBuiltin        !     .Call(%43.1, %43.3) e59.0   <val?_>
  val?            %43.5 = %43.4
  goto BB40
BB42   <- [41]
  fs              %42.0 = FrameState         R     0x5614ffab24d0+914: [], env=e0.4
  (cls|spec|blt)  %42.1 = LdFun              !v    .Call, e59.0
  fs              %42.2 = FrameState         R     0x5615053694e0+149: [%42.1], env=e59.0, next=%42.0
  void                    Deopt              !v    %42.2, DeadCall@0x5614ff0e9108[Call#1], %42.1   !
BB40   <- [39, 43]
  val?            %40.0 = Phi                      %39.3:BB39, %43.5:BB43
  val?            %40.1 = %40.0
  val?            %40.2 = PopContext         C     %40.1, %57.4   <other>
  val?            %40.3 = %40.2
  goto BB20
Prom 0:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    nl, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  val?            %0.4  = Colon              !     2L, %0.3, e0.0   <val?_>
  void                    Return             l     %0.4
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !v    sparse2int, e0.0
  prom-           %0.2  = MkArg                    unboundValue, sparseInt.r[0x5614fa828b20]_p2, e0.0
  prom-           %0.3  = MkArg                    unboundValue, sparseInt.r[0x5614fa828b20]_p3, e0.0
  prom-           %0.4  = MkArg                    unboundValue, sparseInt.r[0x5614fa828b20]_p5, e0.0
  prom-           %0.5  = MkArg                    unboundValue, sparseInt.r[0x5614fa828b20]_p6, e0.0
  val?            %0.6  = NamedCall          !v    %0.1(%0.2, %0.3, do.names=%0.4, verbose=%0.5) e0.0   <val?_>
  void                    Invisible          v     
  void                    StVar              lW    r, %0.6, e0.0
  void                    Return             l     %0.6
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    r, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 3:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    rList, e0.0
  val?            %0.2  = Force              !v    %0.1, e0.0   <val?_>
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <@?>
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    j, e0.0
  val?            %2.1  = Force              !v    %2.0, e0.0   <val?_>
  val?            %2.2  = %2.1
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, sparseInt.r[0x5614fa828b20]_p4, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.2:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract2_1D        !v    %0.2, %3.1, e0.0   <val?_>
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 4:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    j, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 5:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    do.names, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 6:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    verbose, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 7:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    rList, e0.0
  val?            %0.2  = Force<wrapped>     !v    %0.1, e0.0   <vec$->
  val?            %0.3  = Extract2_1D        !v    %0.2, 1, e0.0   <other>
  void                    Visible            v     
  void                    Return             l     %0.3

│ sparseInt.r[0x5614fa828b20]                                                  │
└──────────────────────────────────────────────────────────────────────────────┘
