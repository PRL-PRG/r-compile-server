
┌──────────────────────────────────────────────────────────────────────────────┐
│ fac2sparse[0x561506548e80]                                                   │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;NonRefl0,NonRefl1,NonRefl4,!Obj1     │
│ Properties:  ForceOrd: 2                                                     │
├────── Final PIR Version
fac2sparse[0x561506548e80]
BB0
  val?^           %0.0  = LdArg                    4
  val?^           %0.1  = LdArg                    3
  val?^           %0.2  = LdArg                    2
  val?^           %0.3  = LdArg                    1
  val?^           %0.4  = LdArg                    0
  env             e0.5  = MkEnv              l     from=%0.4, to=%0.3, drop.unused.levels=%0.2, repr=%0.1, giveCsparse=%0.0, parent=<env 0x5614fad267d8>, context 1
  val?            %0.6  = Force!<lazy>       !v    %0.2, e0.5   <lgl$->
  lgl$#-          %0.7  = IsType                   %0.6 isA lgl$-
  void                    Branch                   %0.7 -> BB60 (if true) | BB61 (if false)
BB60   <- [0]
  lgl$-           %60.0 = CastType           d     dn %0.6
  lgl$#-          %60.1 = CheckTrueFalse     e     %60.0
  void                    Branch                   %60.1 -> BB58 (if true) | BB3 (if false)
BB61   <- [0]
  void                    Nop                !     
  val?            %61.1 = %0.6
  dr              %61.2 = Typecheck@0x561504f38a40[Type#2]
  goto BB59
BB58   <- [60]
  (cls|spec|blt)  %58.0 = LdFun              !v    factor, e0.5
  fs              %58.1 = FrameState         R     0x56150517ff70+67: [%58.0], env=e0.5
  void                    Deopt              !v    %58.1, DeadCall@0x561504f38a40[Call#3], %58.0   !
BB3   <- [60]
  val?^ | miss    %3.0  = LdVar              eR    as.factor, e0.5
  lgl$#-          %3.1  = Identical                %3.0, function(x) <(rir::DispatchTable*)0x5614ff3afc|...
  void                    Branch                   %3.1 -> BB62 (if true) | BB63 (if false)
BB59   <- [61, 63]
  val?^ | miss    %59.0 = Phi                      %61.1:BB61, %63.1:BB63
  val?^ | miss    %59.1 = %59.0
  dr              %59.2 = Phi                      %61.2:BB61, %63.2:BB63
  dr              %59.3 = %59.2
  fs              %59.4 = FrameState         R     0x56150517ff70+9: [%0.6], env=e0.5
  void                    Deopt              !v    %59.4, %59.3, %59.1   !
BB62   <- [3]
  prom-           %62.0 = MkArg                    unboundValue, fac2sparse[0x561506548e80]_p0, e0.5
  ct              %62.1 = PushContext        lCL   %62.0, as.factor(from), function(x) <(rir::DispatchTable*)0x5614ff3afc|..., e0.5
  val?^           %62.2 = CastType                 up %62.0
  env             e62.3 = MkEnv              l     x=%62.2, parent=R_BaseNamespace, context 1
  prom-           %62.4 = MkArg                    unboundValue, fac2sparse[0x561506548e80]_p30, e62.3
  ct              %62.5 = PushContext        lCL   %62.4, is.factor(x), function(x) <(rir::DispatchTable*)0x5614fa7795|..., e62.3
  val?^           %62.6 = CastType                 up %62.4
  env             e62.7 = MkEnv              l     x=%62.6, parent=R_BaseNamespace, context 1
  prom-           %62.8 = MkArg                    unboundValue, fac2sparse[0x561506548e80]_p31, e62.7
  ct              %62.9 = PushContext        lCL   %62.8, "factor", inherits(x, "factor"), function(x, what, which=FALSE) <(rir::Dispatch|..., e62.7
  val?^           %62.10 = CastType                 up %62.8
  env             e62.11 = MkEnv              l     x=%62.10, what="factor", which(miss)=false, parent=R_BaseNamespace, context 1
  val?            %62.12 = Force!<lazy>       !vr   %62.10,    <val?>
  val?            %62.13 = CallBuiltin        !v    inherits(%62.12, "factor", false) e62.11
  val?            %62.14 = PopContext         C     %62.13, %62.9   <lgl$->
  lgl$#-          %62.15 = IsType                   %62.14 isA lgl$-
  void                    Branch                   %62.15 -> BB64 (if true) | BB65 (if false)
BB63   <- [3]
  void                    Nop                !     
  val?^ | miss    %63.1 = %3.0
  dr              %63.2 = CallTarget@0x561504f38a40[Call#2]
  goto BB59
BB64   <- [62]
  lgl$-           %64.0 = CastType           d     dn %62.14
  val?            %64.1 = PopContext         C     %64.0, %62.5   <lgl$->
  lgl$#-          %64.2 = IsType                   %64.1 isA lgl$-
  void                    Branch                   %64.2 -> BB66 (if true) | BB67 (if false)
BB65   <- [62]
  fs              %65.0 = FrameState         R     0x56150517ff70+52: [], env=e0.5
  fs              %65.1 = FrameState         R     0x5614fec32eb0+32: [], env=e62.3, next=%65.0
  fs              %65.2 = FrameState         R     0x5614fa76aab0+37: [%62.14], env=e62.7, next=%65.1
  void                    Deopt              !v    %65.2, Typecheck@0x5614f9e3b208[Type#1], %62.14   !
BB66   <- [64]
  lgl$-           %66.0 = CastType           d     dn %64.1
  lgl$#-          %66.1 = CheckTrueFalse     e     %66.0
  void                    Branch                   %66.1 -> BB18 (if true) | BB8 (if false)
BB67   <- [64]
  fs              %67.0 = FrameState         R     0x56150517ff70+52: [], env=e0.5
  fs              %67.1 = FrameState         R     0x5614fec32eb0+32: [%64.1], env=e62.3, next=%67.0
  void                    Deopt              !v    %67.1, Typecheck@0x5614ffb917b8[Type#1], %64.1   !
BB18   <- [66]
  val?^ | miss    %18.0 = LdVar              eR    x, e62.3
  val?            %18.1 = Force!<wrapped>    !v    %18.0, e62.3   <int>
  val?            %18.2 = PopContext         C     %18.1, %62.1   <int>
  void                    StVar              lW    fact, %18.2, e0.5
  val?^ | miss    %18.4 = LdVar              eR    levels, e0.5
  lgl$#-          %18.5 = Identical                %18.4, function(x) <(rir::DispatchTable*)0x5614fbd6f7|...
  void                    Branch                   %18.5 -> BB68 (if true) | BB69 (if false)
BB8   <- [66]
  val?^ | miss    %8.0  = LdVar              eR    is.object, e62.3
  lgl$#-          %8.1  = Identical                <blt is.object>, %8.0   <@?>
  void                    Branch                   %8.1 -> BB10 (if true) | BB9 (if false)
BB68   <- [18]
  val             %68.0 = ChkMissing         e     %18.2
  prom-           %68.1 = MkArg                    %18.2, fac2sparse[0x561506548e80]_p1 (!refl), e0.5
  val?            %68.2 = StaticCall         !v    levels[0x561505623f40](%68.1) e0.5   <str->
  void                    StVar              lW    levs, %68.2, e0.5
  val?^ | miss    %68.4 = LdVar              eR    length, e0.5
  lgl$#-          %68.5 = Identical                <blt length>, %68.4   <true>
  void                    Branch                   %68.5 -> BB70 (if true) | BB71 (if false)
BB69   <- [18]
  fs              %69.0 = FrameState         R     0x56150517ff70+108: [], env=e0.5
  void                    Deopt              !v    %69.0, CallTarget@0x561504f38a40[Call#4], %18.4   !
BB10   <- [8]
  val?^ | miss    %10.0 = LdVar              eR    x, e62.3
  val?            %10.1 = Force!             !v    %10.0, e62.3   <val?_>
  lgl$#-          %10.2 = CallSafeBuiltin    wed   is.object(%10.1)    <val?_>
  lgl$#-          %10.3 = Not                d     %10.2, elided
  void                    Branch                   %10.2 -> BB17 (if true) | BB11 (if false)
BB9   <- [8]
  fs              %9.0  = FrameState         R     0x56150517ff70+52: [], env=e0.5
  (cls|spec|blt)  %9.1  = LdFun              !v    is.object, e62.3
  fs              %9.2  = FrameState         R     0x5614fec32eb0+71: [%9.1], env=e62.3, next=%9.0
  void                    Deopt              !v    %9.2, DeadCall@0x5614ffb917b8[Call#1], %9.1   !
BB70   <- [68]
  val?^ | miss    %70.0 = LdVar              eR    fact, e0.5
  val?            %70.1 = Force!<value>      !v    %70.0, e0.5   <int>
  val?            %70.2 = CallBuiltin        !v    length(%70.1) e0.5   <int$->
  lgl$#-          %70.3 = IsType                   %70.2 isA int$-
  void                    Branch                   %70.3 -> BB72 (if true) | BB73 (if false)
BB71   <- [68]
  fs              %71.0 = FrameState         R     0x56150517ff70+154: [], env=e0.5
  void                    Deopt              !v    %71.0, DeadBranchReached@0x561504f38a40[Test#0], %68.5   !
BB17   <- [10]
  void                    Nop                !     
  lgl$#-          %17.1 = %10.3
  goto BB14
BB11   <- [10]
  val?^ | miss    %11.0 = LdVar              eR    is.integer, e62.3
  lgl$#-          %11.1 = Identical                <blt is.integer>, %11.0   <@?>
  void                    Branch                   %11.1 -> BB13 (if true) | BB12 (if false)
BB72   <- [70]
  int$-           %72.0 = CastType           d     dn %70.2
  void                    StVar              lW    n, %72.0, e0.5
  val?^ | miss    %72.2 = LdVar              eR    match.arg, e0.5
  lgl$#-          %72.3 = Identical                %72.2, function(arg, choices, several.ok=FALSE) <(rir|...
  void                    Branch                   %72.3 -> BB74 (if true) | BB75 (if false)
BB73   <- [70]
  fs              %73.0 = FrameState         R     0x56150517ff70+245: [%70.2], env=e0.5
  void                    Deopt              !v    %73.0, Typecheck@0x561504f38a40[Type#11], %70.2   !
BB14   <- [17, 13]
  lgl$-           %14.0 = Phi                      %13.4:BB13, %17.1:BB17
  lgl$-           %14.1 = %14.0
  lgl$#-          %14.2 = CheckTrueFalse     e     %14.1
  void                    Branch                   %14.2 -> BB16 (if true) | BB15 (if false)
BB13   <- [11]
  val?^ | miss    %13.0 = LdVar              eR    x, e62.3
  val?            %13.1 = Force!             !v    %13.0, e62.3   <val?_>
  lgl$#-          %13.2 = CallSafeBuiltin    wed   is.integer(%13.1)    <val?_>
  lgl$-           %13.3 = LAnd                     %10.3, %13.2
  lgl$-           %13.4 = %13.3
  goto BB14
BB12   <- [11]
  fs              %12.0 = FrameState         R     0x56150517ff70+52: [], env=e0.5
  (cls|spec|blt)  %12.1 = LdFun              !v    is.integer, e62.3
  fs              %12.2 = FrameState         R     0x5614fec32eb0+175: [%10.3, %12.1], env=e62.3, next=%12.0
  void                    Deopt              !v    %12.2, DeadCall@0x5614ffb917b8[Call#2], %12.1   !
BB74   <- [72]
  prom-           %74.0 = MkArg                    unboundValue, fac2sparse[0x561506548e80]_p3, e0.5
  val?            %74.1 = StaticCall         !v    match.arg[0x5615005348b0](%74.0, <str [1] "d" "i" "l" "n" "z">) e0.5   <str$->
  void                    StVar              lW    to, %74.1, e0.5
  val?^ | miss    %74.3 = LdVar              eR    as.integer, e0.5
  lgl$#-          %74.4 = Identical                <blt as.integer>, %74.3   <true>
  void                    Branch                   %74.4 -> BB76 (if true) | BB77 (if false)
BB75   <- [72]
  fs              %75.0 = FrameState         R     0x56150517ff70+259: [], env=e0.5
  void                    Deopt              !v    %75.0, CallTarget@0x561504f38a40[Call#6], %72.2   !
BB16   <- [14]
  fs              %16.0 = FrameState         R     0x56150517ff70+52: [], env=e0.5
  (cls|spec|blt)  %16.1 = LdFun              !v    sort.int, e62.3
  fs              %16.2 = FrameState         R     0x5614fec32eb0+298: [%16.1], env=e62.3, next=%16.0
  void                    Deopt              !v    %16.2, DeadCall@0x5614ffb917b8[Call#4], %16.1   !
BB15   <- [14]
  fs              %15.0 = FrameState         R     0x56150517ff70+52: [], env=e0.5
  (cls|spec|blt)  %15.1 = LdFun              !v    factor, e62.3
  fs              %15.2 = FrameState         R     0x5614fec32eb0+256: [%15.1], env=e62.3, next=%15.0
  void                    Deopt              !v    %15.2, DeadCall@0x5614ffb917b8[Call#3], %15.1   !
BB76   <- [74]
  val?^ | miss    %76.0 = LdVar              eR    fact, e0.5
  val?            %76.1 = Force!<value>      !v    %76.0, e0.5   <int>
  val?            %76.2 = CallBuiltin        !v    as.integer(%76.1) e0.5   <int->
  lgl$#-          %76.3 = IsType                   %76.2 isA int-
  void                    Branch                   %76.3 -> BB78 (if true) | BB79 (if false)
BB77   <- [74]
  fs              %77.0 = FrameState         R     0x56150517ff70+305: [], env=e0.5
  void                    Deopt              !v    %77.0, DeadBranchReached@0x561504f38a40[Test#1], %74.4   !
BB78   <- [76]
  int-            %78.0 = CastType           d     dn %76.2
  int-            %78.1 = Sub                wed   %78.0, 1L, elided   <int->
  void                    StVar              lW    i, %78.1, e0.5
  (cls|spec|blt)  %78.3 = LdFun              !v    data.frame, <0x561504764248>, e0.5
  prom-           %78.4 = MkArg                    unboundValue, fac2sparse[0x561506548e80]_p4, e0.5
  prom-           %78.5 = MkArg                    unboundValue, fac2sparse[0x561506548e80]_p5, e0.5
  val?            %78.6 = NamedCall          !v    %78.3(i=%78.4, j=%78.5) e0.5   <vec>
  lgl$#-          %78.7 = IsType                   %78.6 isA val+   <false>
  void                    Branch                   %78.7 -> BB81 (if true) | BB80 (if false)
BB79   <- [76]
  fs              %79.0 = FrameState         R     0x56150517ff70+396: [%76.2], env=e0.5
  void                    Deopt              !v    %79.0, Typecheck@0x561504f38a40[Type#16], %76.2   !
BB81   <- [78]
  fs              %81.0 = FrameState         R     0x56150517ff70+467: [%78.6], env=e0.5
  void                    Deopt              !v    %81.0, DeadBranchReached@0x561504f38a40[Test#2], %78.7   !
BB80   <- [78]
  prom-           %80.0 = MkArg                    unboundValue, fac2sparse[0x561506548e80]_p6, e0.5
  val?            %80.1 = Extract1_2D        !v    %78.6, %80.0, missingArg, e0.5   <vec>
  void                    StVar              lW    df, %80.1, e0.5
  val?^ | miss    %80.3 = LdVar              eR    to, e0.5
  val?            %80.4 = Force!<value>      !v    %80.3, e0.5   <str$->
  lgl$#-          %80.5 = IsType                   %80.4 isA val?-
  void                    Branch                   %80.5 -> BB82 (if true) | BB83 (if false)
BB82   <- [80]
  val?-           %82.0 = CastType           d     dn %80.4   <str$->
  lgl-            %82.1 = Neq                wed   %82.0, "n", elided   <lgl$->
  lgl$#-          %82.2 = IsType                   %82.1 isA lgl$-
  void                    Branch                   %82.2 -> BB84 (if true) | BB85 (if false)
BB83   <- [80]
  fs              %83.0 = FrameState         R     0x56150517ff70+635: [%80.4], env=e0.5
  void                    Deopt              !v    %83.0, Typecheck@0x561504f38a40[Type#31], %80.4   !
BB84   <- [82]
  lgl$-           %84.0 = CastType           d     dn %82.1
  lgl$#-          %84.1 = CheckTrueFalse     e     %84.0
  void                    Branch                   %84.1 -> BB57 (if true) | BB37 (if false)
BB85   <- [82]
  fs              %85.0 = FrameState         R     0x56150517ff70+647: [%82.1], env=e0.5
  void                    Deopt              !v    %85.0, Typecheck@0x561504f38a40[Type#32], %82.1   !
BB57   <- [84]
  (cls|spec|blt)  %57.0 = LdFun              !v    <-, <0x5614f889bda8>, e0.5
  prom-           %57.1 = MkArg                    unboundValue, fac2sparse[0x561506548e80]_p23, e0.5
  prom-           %57.2 = MkArg                    unboundValue, fac2sparse[0x561506548e80]_p26, e0.5
  val?            %57.3 = Call               !v    %57.0(%57.1, %57.2) e0.5
  goto BB38
BB37   <- [84]
  void                    Nop                !     
  goto BB38
BB38   <- [37, 57]
  val?^ | miss    %38.0 = LdVar              eR    do.call, e0.5
  lgl$#-          %38.1 = Identical                %38.0, function(what, args, quote=FALSE, envir=parent|...
  void                    Branch                   %38.1 -> BB86 (if true) | BB87 (if false)
BB86   <- [38]
  prom-           %86.0 = MkArg                    unboundValue, fac2sparse[0x561506548e80]_p8, e0.5
  prom-           %86.1 = MkArg                    unboundValue, fac2sparse[0x561506548e80]_p9, e0.5
  val?            %86.2 = StaticCall         !v    do.call[0x56150505ed50](%86.0, %86.1) e0.5   <other>
  void                    StVar              lW    T, %86.2, e0.5
  lgl$-           %86.4 = Missing            eR    repr, e0.5
  lgl$-           %86.5 = AsLogical                %86.4
  lgl$#-          %86.6 = Identical                %86.5, false
  void                    Branch                   %86.6 -> BB56 (if true) | BB43 (if false)
BB87   <- [38]
  fs              %87.0 = FrameState         R     0x56150517ff70+701: [], env=e0.5
  void                    Deopt              !v    %87.0, CallTarget@0x561504f38a40[Call#16], %38.0   !
BB56   <- [86]
  void                    Nop                !     
  lgl$-           %56.1 = %86.5
  goto BB44
BB43   <- [86]
  lgl$-           %43.0 = Missing            eR    giveCsparse, e0.5
  lgl$-           %43.1 = Not                d     %43.0, elided
  lgl$-           %43.2 = AsLogical                %43.1
  lgl$-           %43.3 = LAnd                     %86.5, %43.2
  lgl$-           %43.4 = %43.3
  goto BB44
BB44   <- [56, 43]
  lgl$-           %44.0 = Phi                      %43.4:BB43, %56.1:BB56
  lgl$-           %44.1 = %44.0
  lgl$#-          %44.2 = CheckTrueFalse     e     %44.1
  void                    Branch                   %44.2 -> BB53 (if true) | BB45 (if false)
BB53   <- [44]
  val?^ | miss    %53.0 = LdVar              eR    giveCsparse, e0.5
  val?            %53.1 = Force!             !v    %53.0, e0.5   <val?_>
  lgl$#-          %53.2 = CheckTrueFalse     we    %53.1
  void                    Branch                   %53.2 -> BB55 (if true) | BB54 (if false)
BB45   <- [44]
  val?^ | miss    %45.0 = LdVar              eR    match.arg, e0.5
  lgl$#-          %45.1 = Identical                %45.0, function(arg, choices, several.ok=FALSE) <(rir|...
  void                    Branch                   %45.1 -> BB88 (if true) | BB89 (if false)
BB55   <- [53]
  void                    Nop                !     
  str$#-          %55.1 = "C"
  goto BB46
BB54   <- [53]
  void                    Nop                !     
  str$#-          %54.1 = "T"
  goto BB46
BB88   <- [45]
  prom-           %88.0 = MkArg                    unboundValue, fac2sparse[0x561506548e80]_p22, e0.5
  val?            %88.1 = StaticCall         !v    match.arg[0x5615005348b0](%88.0, <str [1] "C" "T" "R">) e0.5   <str$->
  val?            %88.2 = %88.1
  goto BB46
BB89   <- [45]
  fs              %89.0 = FrameState         R     0x56150517ff70+752: [], env=e0.5
  void                    Deopt              !v    %89.0, CallTarget@0x561504f38a40[Call#24], %45.0   !
BB46   <- [54, 55, 88]
  val?            %46.0 = Phi                      %88.2:BB88, %54.1:BB54, %55.1:BB55   <str$->
  val?            %46.1 = %46.0
  lgl$-           %46.2 = Is                       %46.1, logical
  lgl$-           %46.3 = Is                       %46.1, integer
  lgl$-           %46.4 = Is                       %46.1, double
  lgl$-           %46.5 = Is                       %46.1, complex
  lgl$-           %46.6 = Is                       %46.1, character
  lgl$-           %46.7 = Is                       %46.1, raw
  lgl$-           %46.8 = Is                       %46.1, list
  lgl$-           %46.9 = Is                       %46.1, expression
  lgl$-           %46.10 = LOr                      %46.9, %46.8
  lgl$-           %46.11 = LOr                      %46.10, %46.7
  lgl$-           %46.12 = LOr                      %46.11, %46.6
  lgl$-           %46.13 = LOr                      %46.12, %46.5
  lgl$-           %46.14 = LOr                      %46.13, %46.4
  lgl$-           %46.15 = LOr                      %46.14, %46.3
  lgl$-           %46.16 = LOr                      %46.15, %46.2   <true>
  lgl$#-          %46.17 = Identical                %46.16, true
  int$-           %46.18 = Length                   %46.1
  lgl$-           %46.19 = Is                       %46.1, Factor   <false>
  lgl$#-          %46.20 = Identical                %46.19, false
  lgl$-           %46.21 = Is                       %46.1, character   <true>
  lgl$#-          %46.22 = Identical                %46.21, true
  void                    StVar              lW    repr, %46.1, e0.5
  lgl$#-          %46.24 = IsType                   %46.1 isA val?-
  val             %46.25 = ChkMissing         e     %46.1
  void                    Branch                   %46.17 -> BB90 (if true) | BB91 (if false)
BB90   <- [46]
  lgl$-           %90.0 = Eq                 d     %46.18, 1L, elided   <true>
  lgl$#-          %90.1 = Identical                %90.0, true
  void                    Branch                   %90.1 -> BB92 (if true) | BB93 (if false)
BB91   <- [46]
  void                    Nop                !     
  lgl$#-          %91.1 = %46.17
  dr              %91.2 = DeadBranchReached@0x561504f38a40[Test#17]
  goto BB47
BB92   <- [90]
  void                    Branch                   %46.20 -> BB94 (if true) | BB95 (if false)
BB93   <- [90]
  void                    Nop                !     
  lgl$#-          %93.1 = %90.1
  dr              %93.2 = DeadBranchReached@0x561504f38a40[Test#18]
  goto BB47
BB47   <- [91, 93, 95, 97, 99]
  val?            %47.0 = Phi                      %91.1:BB91, %93.1:BB93, %95.1:BB95, %97.1:BB97, %99.1:BB99
  val?            %47.1 = %47.0
  dr              %47.2 = Phi                      %91.2:BB91, %93.2:BB93, %95.2:BB95, %97.2:BB97, %99.2:BB99
  dr              %47.3 = %47.2
  fs              %47.4 = FrameState         R     0x56150517ff70+868: [], env=e0.5
  void                    Deopt              !v    %47.4, %47.3, %47.1   !
BB94   <- [92]
  void                    Branch                   %46.22 -> BB96 (if true) | BB97 (if false)
BB95   <- [92]
  void                    Nop                !     
  lgl$#-          %95.1 = %46.20
  dr              %95.2 = DeadBranchReached@0x561504f38a40[Test#19]
  goto BB47
BB96   <- [94]
  void                    Branch                   %46.24 -> BB98 (if true) | BB99 (if false)
BB97   <- [94]
  void                    Nop                !     
  lgl$#-          %97.1 = %46.22
  dr              %97.2 = DeadBranchReached@0x561504f38a40[Test#20]
  goto BB47
BB98   <- [96]
  val?-           %98.0 = CastType           d     dn %46.1   <str$->
  lgl-            %98.1 = CallSafeBuiltin    wed   is.na(%98.0) 
  lgl$#-          %98.2 = CheckTrueFalse     we    %98.1   <false>
  void                    Branch                   %98.2 -> BB101 (if true) | BB100 (if false)
BB99   <- [96]
  void                    Nop                !     
  val?            %99.1 = %46.1
  dr              %99.2 = Typecheck@0x561504f38a40[Type#59]
  goto BB47
BB101   <- [98]
  fs              %101.0 = FrameState         R     0x56150517ff70+1086: [%98.0, %98.2], env=e0.5
  void                    Deopt              !v    %101.0, DeadBranchReached@0x561504f38a40[Test#24], %98.2   !
BB100   <- [98]
  lgl-            %100.0 = Eq                 wed   %98.0, C, elided
  lgl$#-          %100.1 = CheckTrueFalse     we    %100.0   <true>
  void                    Branch                   %100.1 -> BB102 (if true) | BB103 (if false)
BB102   <- [100]
  val?^ | miss    %102.0 = LdVar              eR    .Call, e0.5
  lgl$#-          %102.1 = Identical                <blt .Call>, %102.0   <true>
  void                    Branch                   %102.1 -> BB104 (if true) | BB105 (if false)
BB103   <- [100]
  void                    Nop                !     
  lgl$#-          %103.1 = %100.1
  dr              %103.2 = DeadBranchReached@0x561504f38a40[Test#25]
  goto BB51
BB104   <- [102]
  val?^ | miss    %104.0 = LdVar              eR    Tsparse_to_Csparse, e0.5
  val?            %104.1 = Force!<value>      !v    %104.0, e0.5   <vec>
  val?^ | miss    %104.2 = LdVar              eR    T, e0.5
  val?            %104.3 = Force!<value>      !v    %104.2, e0.5   <other>
  val?            %104.4 = CallBuiltin        !     .Call(%104.1, %104.3, false) e0.5   <other>
  void                    Return             l     %104.4
BB105   <- [102]
  void                    Nop                !     
  lgl$#-          %105.1 = %102.1
  dr              %105.2 = DeadBranchReached@0x561504f38a40[Test#28]
  goto BB51
BB51   <- [103, 105]
  val?^ | miss    %51.0 = Phi                      %103.1:BB103, %105.1:BB105
  val?^ | miss    %51.1 = %51.0
  dr              %51.2 = Phi                      %103.2:BB103, %105.2:BB105
  dr              %51.3 = %51.2
  fs              %51.4 = FrameState         R     0x56150517ff70+1110: [%98.0, %100.1], env=e0.5
  void                    Deopt              !v    %51.4, %51.3, %51.1   !
Prom 0:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    from, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <int>
  void                    Return             l     %0.3
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fact, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <int>
  void                    Return             l     %0.3
Prom 3:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    to, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 4:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    i, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <int->
  void                    Return             l     %0.3
Prom 5:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    n, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <int$->
  lgl$#-          %0.4  = CheckTrueFalse     we    %0.3
  void                    Branch                   %0.4 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    n, e0.0
  val?            %2.1  = Force<value>       !v    %2.0, e0.0   <int$->
  val?            %2.2  = Sub                !v    %2.1, 1L, e0.0   <int$->
  void                    Visible            v     
  val?            %2.4  = Colon              !     0L, %2.2, e0.0   <int->
  val?            %2.5  = %2.4
  goto BB3
BB4   <- [0]
  (cls|spec|blt)  %4.0  = LdFun              !     integer, e0.0
  val?            %4.1  = Call               !     %4.0() e0.0   <val?_>
  val?            %4.2  = %4.1
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %4.2:BB4, %2.5:BB2
  val?            %3.1  = %3.0
  void                    Return             l     %3.1
Prom 6:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     is.na, <0x5614f88bc0e8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, fac2sparse[0x561506548e80]_p7, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <lgl->
  val?            %0.4  = Not                !     %0.3, e0.0
  void                    Return             l     %0.4
Prom 7:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    i, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <int->
  void                    Return             l     %0.3
Prom 8:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    new, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <cls->
  void                    Return             l     %0.3
Prom 9:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     c, <0x5614f88a7940>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, fac2sparse[0x561506548e80]_p10, e0.0
  prom-           %0.3  = MkArg                    unboundValue, fac2sparse[0x561506548e80]_p21, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <vec+>
  void                    Return             l     %0.4
Prom 10:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     list, <0x5614f88bb5c0>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, fac2sparse[0x561506548e80]_p11, e0.0
  prom-           %0.3  = MkArg                    unboundValue, fac2sparse[0x561506548e80]_p13, e0.0
  prom-           %0.4  = MkArg                    unboundValue, fac2sparse[0x561506548e80]_p17, e0.0
  val?            %0.5  = NamedCall          !     %0.1(Class=%0.2, Dim=%0.3, Dimnames=%0.4) e0.0   <vec+>
  void                    Return             l     %0.5
Prom 11:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     paste0, <0x5614f89f03c8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, fac2sparse[0x561506548e80]_p12, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2, "gTMatrix") e0.0   <str$->
  void                    Return             l     %0.3
Prom 12:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    to, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 13:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     c, <0x5614f88a7940>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, fac2sparse[0x561506548e80]_p14, e0.0
  prom-           %0.3  = MkArg                    unboundValue, fac2sparse[0x561506548e80]_p16, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <int->
  void                    Return             l     %0.4
Prom 14:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     length, <0x5614f88a7a90>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, fac2sparse[0x561506548e80]_p15, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <int$->
  void                    Return             l     %0.3
Prom 15:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    levs, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 16:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    n, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <int$->
  void                    Return             l     %0.3
Prom 17:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     list, <0x5614f88bb5c0>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, fac2sparse[0x561506548e80]_p18, e0.0
  prom-           %0.3  = MkArg                    unboundValue, fac2sparse[0x561506548e80]_p19, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <vec->
  void                    Return             l     %0.4
Prom 18:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    levs, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 19:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     names, <0x5614f88a7470>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, fac2sparse[0x561506548e80]_p20, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <nil->
  void                    Return             l     %0.3
Prom 20:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fact, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <int>
  void                    Return             l     %0.3
Prom 21:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    df, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <vec>
  void                    Return             l     %0.3
Prom 22:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    repr, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 23:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     $, e0.0
  prom-           %0.2  = MkArg                    unboundValue, fac2sparse[0x561506548e80]_p24, e0.0
  prom-           %0.3  = MkArg                    unboundValue, fac2sparse[0x561506548e80]_p25, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 24:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    df, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 25:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    x, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 26:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     rep.int, e0.0
  prom-           %0.2  = MkArg                    unboundValue, fac2sparse[0x561506548e80]_p27, e0.0
  prom-           %0.3  = MkArg                    unboundValue, fac2sparse[0x561506548e80]_p28, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 27:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    to, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  lgl$-           %0.4  = Is                       %0.3, logical
  lgl$-           %0.5  = Is                       %0.3, integer
  lgl$-           %0.6  = Is                       %0.3, double
  lgl$-           %0.7  = Is                       %0.3, complex
  lgl$-           %0.8  = Is                       %0.3, character   <@?>
  lgl$-           %0.9  = Is                       %0.3, raw
  lgl$-           %0.10 = Is                       %0.3, list
  lgl$-           %0.11 = Is                       %0.3, expression
  lgl$-           %0.12 = LOr                      %0.11, %0.10
  lgl$-           %0.13 = LOr                      %0.12, %0.9
  lgl$-           %0.14 = LOr                      %0.13, %0.8
  lgl$-           %0.15 = LOr                      %0.14, %0.7
  lgl$-           %0.16 = LOr                      %0.15, %0.6
  lgl$-           %0.17 = LOr                      %0.16, %0.5
  lgl$-           %0.18 = LOr                      %0.17, %0.4   <@?>
  lgl$#-          %0.19 = Identical                %0.18, true
  void                    Branch                   %0.19 -> BB2 (if true) | BB36 (if false)
BB2   <- [0]
  int$-           %2.0  = Length                   %0.3
  lgl$-           %2.1  = Eq                 vd    %2.0, 1L, elided   <@?>
  lgl$#-          %2.2  = Identical                %2.1, true
  void                    Branch                   %2.2 -> BB5 (if true) | BB3 (if false)
BB36   <- [0]
  void                    Nop                !     
  goto BB4
BB5   <- [2]
  lgl$-           %5.0  = Is                       %0.3, Factor   <@?>
  lgl$#-          %5.1  = Identical                %5.0, false
  void                    Branch                   %5.1 -> BB35 (if true) | BB6 (if false)
BB3   <- [2]
  void                    Nop                !     
  goto BB4
BB4   <- [36, 3]
  val?            %4.0  = CallBuiltin        !     stop(true, "EXPR must be a length 1 vector") e0.0
  void                    Unreachable              
BB35   <- [5]
  void                    Nop                !     
  goto BB7
BB6   <- [5]
  val?            %6.0  = CallBuiltin        !     warning(true, false, false, "EXPR is a "factor", treated as integer.
 Cons|...) e0.0
  goto BB7
BB7   <- [35, 6]
  lgl$#-          %7.0  = Identical                %0.8, true
  void                    Branch                   %7.0 -> BB23 (if true) | BB8 (if false)
BB23   <- [7]
  val?            %23.0 = CallBuiltin        !     is.na(%0.3) e0.0
  lgl$#-          %23.1 = CheckTrueFalse     we    %23.0   <@?>
  void                    Branch                   %23.1 -> BB34 (if true) | BB24 (if false)
BB8   <- [7]
  int$-           %8.0  = AsSwitchIdx              %0.3
  lgl$-           %8.1  = Eq                 vd    %8.0, 1L, elided
  lgl$#-          %8.2  = CheckTrueFalse     e     %8.1   <@?>
  void                    Branch                   %8.2 -> BB21 (if true) | BB9 (if false)
BB34   <- [23]
  void                    Nop                !     
  str$#-          %34.1 = "NA"
  goto BB25
BB24   <- [23]
  void                    Nop                !     
  val?            %24.1 = %0.3
  goto BB25
BB21   <- [8]
  void                    Nop                !     
  goto BB22
BB9   <- [8]
  lgl$-           %9.0  = Eq                 vd    %8.0, 2L, elided
  lgl$#-          %9.1  = CheckTrueFalse     e     %9.0   <@?>
  void                    Branch                   %9.1 -> BB19 (if true) | BB10 (if false)
BB25   <- [34, 24]
  val?            %25.0 = Phi                      %34.1:BB34, %24.1:BB24
  val?            %25.1 = %25.0
  val?            %25.2 = Eq                 !     %25.1, d, e0.0
  lgl$#-          %25.3 = CheckTrueFalse     we    %25.2   <@?>
  void                    Branch                   %25.3 -> BB33 (if true) | BB26 (if false)
BB22   <- [21, 33]
  void                    Visible            v     
  real$#-         %22.1 = 1
  goto BB14
BB19   <- [9]
  void                    Nop                !     
  goto BB20
BB10   <- [9]
  lgl$-           %10.0 = Eq                 vd    %8.0, 3L, elided
  lgl$#-          %10.1 = CheckTrueFalse     e     %10.0   <@?>
  void                    Branch                   %10.1 -> BB17 (if true) | BB11 (if false)
BB33   <- [25]
  void                    Nop                !     
  goto BB22
BB26   <- [25]
  val?            %26.0 = Eq                 !     %25.1, i, e0.0
  lgl$#-          %26.1 = CheckTrueFalse     we    %26.0   <@?>
  void                    Branch                   %26.1 -> BB32 (if true) | BB27 (if false)
BB14   <- [22, 20, 18, 13, 16]
  (nil|lgl|int|real|complex)- %14.0 = Phi                      %13.1:BB13, %16.1:BB16, %18.1:BB18, %20.1:BB20, %22.1:BB22
  (nil|lgl|int|real|complex)- %14.1 = %14.0
  void                    Return             l     %14.1
BB20   <- [19, 32]
  void                    Visible            v     
  int$#-          %20.1 = 1L
  goto BB14
BB17   <- [10]
  void                    Nop                !     
  goto BB18
BB11   <- [10]
  lgl$-           %11.0 = Eq                 vd    %8.0, 4L, elided
  lgl$#-          %11.1 = CheckTrueFalse     e     %11.0   <@?>
  void                    Branch                   %11.1 -> BB15 (if true) | BB12 (if false)
BB32   <- [26]
  void                    Nop                !     
  goto BB20
BB27   <- [26]
  val?            %27.0 = Eq                 !     %25.1, l, e0.0
  lgl$#-          %27.1 = CheckTrueFalse     we    %27.0   <@?>
  void                    Branch                   %27.1 -> BB31 (if true) | BB28 (if false)
BB18   <- [17, 31]
  void                    Visible            v     
  lgl$#-          %18.1 = true
  goto BB14
BB15   <- [11]
  void                    Nop                !     
  goto BB16
BB12   <- [11]
  void                    Nop                !     
  goto BB13
BB31   <- [27]
  void                    Nop                !     
  goto BB18
BB28   <- [27]
  val?            %28.0 = Eq                 !     %25.1, z, e0.0
  lgl$#-          %28.1 = CheckTrueFalse     we    %28.0   <@?>
  void                    Branch                   %28.1 -> BB30 (if true) | BB29 (if false)
BB16   <- [15, 30]
  void                    Visible            v     
  complex$#-      %16.1 = 
  goto BB14
BB13   <- [12, 29]
  void                    Nop                !     
  nil-            %13.1 = nil
  goto BB14
BB30   <- [28]
  void                    Nop                !     
  goto BB16
BB29   <- [28]
  void                    Nop                !     
  goto BB13
Prom 28:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     nrow, e0.0
  prom-           %0.2  = MkArg                    unboundValue, fac2sparse[0x561506548e80]_p29, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 29:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    df, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 30:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    x, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <int>
  void                    Return             l     %0.3
Prom 31:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    x, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <(int|str)+>
  void                    Return             l     %0.3

│ fac2sparse[0x561506548e80]                                                   │
└──────────────────────────────────────────────────────────────────────────────┘
