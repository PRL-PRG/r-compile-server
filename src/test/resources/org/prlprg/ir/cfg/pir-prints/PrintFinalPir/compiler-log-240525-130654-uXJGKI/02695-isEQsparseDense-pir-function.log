
┌──────────────────────────────────────────────────────────────────────────────┐
│ isEQsparseDense[0x5614fd7b29f0]                                              │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;NonRefl1 miss: 2                     │
│ Properties:                                                                  │
├────── Final PIR Version
isEQsparseDense[0x5614fd7b29f0]
BB0
  val?^           %0.0  = LdArg                    1
  val?^           %0.1  = LdArg                    0
  env             e0.2  = MkEnv              l     frml=%0.1, dat=%0.0, showFactors(miss)=missingArg, ...(miss)=missingArg, parent=R_GlobalEnv, context 1
  prom-           %0.3  = MkArg                    unboundValue, isEQsparseDense[0x5614fd7b29f0]_p0, e0.2
  val?^ | miss    %0.4  = CastType                 up %0.3
  void                    StArg              lW    showFactors, %0.4, e0.2
  val?^ | miss    %0.6  = LdVar              eR    stopifnot, R_GlobalEnv
  lgl$#-          %0.7  = Identical                %0.6, function(..., exprs, exprObject, local=TRUE) <|...
  void                    Branch                   %0.7 -> BB46 (if true) | BB47 (if false)
BB46   <- [0]
  prom-           %46.0 = MkArg                    unboundValue, isEQsparseDense[0x5614fd7b29f0]_p2, e0.2
  prom-           %46.1 = MkArg                    unboundValue, isEQsparseDense[0x5614fd7b29f0]_p4, e0.2
  val?            %46.2 = Call               !v    function(..., exprs, exprObject, local=TRUE) <|...(%46.0, %46.1) e0.2
  val?^ | miss    %46.3 = LdVar              eR    showFactors, e0.2
  val?            %46.4 = Force!<lazy>       !v    %46.3, e0.2   <lgl$->
  lgl$#-          %46.5 = CheckTrueFalse     we    %46.4
  void                    Branch                   %46.5 -> BB44 (if true) | BB3 (if false)
BB47   <- [0]
  fs              %47.0 = FrameState         R     0x5614ffc053c0+0: [], env=e0.2
  void                    Deopt              !v    %47.0, CallTarget@0x5615047aaaa0[Call#2], %0.6
BB44   <- [46]
  (cls|spec|blt)  %44.0 = LdFun              !v    print, e0.2
  fs              %44.1 = FrameState         R     0x5614ffc053c0+68: [%44.0], env=e0.2
  void                    Deopt              !v    %44.1, DeadCall@0x5615047aaaa0[Call#5], %44.0   !
BB3   <- [46]
  (cls|spec|blt)  %3.0  = LdFun              !v    sparse.model.matrix, <0x5615006e1148>, e0.2
  prom-           %3.1  = MkArg                    unboundValue, isEQsparseDense[0x5614fd7b29f0]_p6, e0.2
  prom-           %3.2  = MkArg                    unboundValue, isEQsparseDense[0x5614fd7b29f0]_p7, e0.2
  (miss|dots)     %3.3  = LdDots             R     , e0.2
  *dots-          %3.4  = ExpandDots               %3.3
  val?            %3.5  = NamedCall          !v    %3.0(%3.1, %3.2, .xpandDotsTrigger=%3.4) e0.2   <other>
  void                    StVar              lW    smm, %3.5, e0.2
  val?^ | miss    %3.7  = LdVar              eR    model.matrix, e0.2
  lgl$#-          %3.8  = Identical                %3.7, function(object, ...) <(rir::DispatchTable*)0x|...
  void                    Branch                   %3.8 -> BB48 (if true) | BB49 (if false)
BB48   <- [3]
  prom-           %48.0 = MkArg                    unboundValue, isEQsparseDense[0x5614fd7b29f0]_p8, e0.2
  prom-           %48.1 = MkArg                    unboundValue, isEQsparseDense[0x5614fd7b29f0]_p9, e0.2
  (miss|dots)     %48.2 = LdDots             R     , e0.2
  *dots-          %48.3 = ExpandDots               %48.2
  val?            %48.4 = NamedCall          !v    function(object, ...) <(rir::DispatchTable*)0x|...(%48.0, %48.1, .xpandDotsTrigger=%48.3) e0.2   <real+>
  void                    StVar              lW    mm, %48.4, e0.2
  (cls|spec|blt)  %48.6 = LdFun              !v    @, <0x5614f88a6bd8>, e0.2
  prom-           %48.7 = MkArg                    unboundValue, isEQsparseDense[0x5614fd7b29f0]_p10, e0.2
  prom-           %48.8 = MkArg                    unboundValue, isEQsparseDense[0x5614fd7b29f0]_p11, e0.2
  val?            %48.9 = Call               !v    %48.6(%48.7, %48.8) e0.2   <vec+>
  void                    StVar              lW    sc, %48.9, e0.2
  val?^ | miss    %48.11 = LdVar              eR    &, e0.2
  lgl$#-          %48.12 = Identical                <blt &>, %48.11   <true>
  void                    Branch                   %48.12 -> BB50 (if true) | BB51 (if false)
BB49   <- [3]
  fs              %49.0 = FrameState         R     0x5614ffc053c0+164: [], env=e0.2
  void                    Deopt              !v    %49.0, CallTarget@0x5615047aaaa0[Call#9], %3.7   !
BB50   <- [48]
  val?^ | miss    %50.0 = LdVar              eR    mEQ, e0.2
  lgl$#-          %50.1 = Identical                %50.0, function(x, y, ...) <(rir::DispatchTable*)0x56|...
  void                    Branch                   %50.1 -> BB52 (if true) | BB53 (if false)
BB51   <- [48]
  void                    Nop                !     
  lgl$#-          %51.1 = %48.12
  dr              %51.2 = DeadBranchReached@0x5615047aaaa0[Test#0]
  goto BB6
BB52   <- [50]
  prom-           %52.0 = MkArg                    unboundValue, isEQsparseDense[0x5614fd7b29f0]_p12, e0.2
  prom-           %52.1 = MkArg                    unboundValue, isEQsparseDense[0x5614fd7b29f0]_p14, e0.2
  ct              %52.2 = PushContext        lCL   %52.0, %52.1, mEQ(as(smm, "generalMatrix"), Matrix(mm, spars|..., function(x, y, ...) <(rir::DispatchTable*)0x56|..., e0.2
  val?^           %52.3 = CastType                 up %52.1
  val?^           %52.4 = CastType                 up %52.0
  val?^ | miss    %52.5 = LdVar              eR    any, R_GlobalEnv
  lgl$#-          %52.6 = Identical                <blt any>, %52.5   <true>
  void                    Branch                   %52.6 -> BB54 (if true) | BB55 (if false)
BB53   <- [50]
  void                    Nop                !     
  val?^ | miss    %53.1 = %50.0
  dr              %53.2 = CallTarget@0x5615047aaaa0[Call#29]
  goto BB6
BB6   <- [51, 53]
  val?^ | miss    %6.0  = Phi                      %51.1:BB51, %53.1:BB53
  val?^ | miss    %6.1  = %6.0
  dr              %6.2  = Phi                      %51.2:BB51, %53.2:BB53
  dr              %6.3  = %6.2
  fs              %6.4  = FrameState         R     0x5614ffc053c0+283: [], env=e0.2
  void                    Deopt              !v    %6.4, %6.3, %6.1   !
BB54   <- [52]
  val?^ | miss    %54.0 = LdVar              eR    colSums, R_GlobalEnv
  lgl$#-          %54.1 = Identical                %54.0, function(x, na.rm=FALSE, dims=1, ...) <(rir::D|...
  void                    Branch                   %54.1 -> BB56 (if true) | BB57 (if false)
BB55   <- [52]
  void                    Nop                !     
  lgl$#-          %55.1 = %52.6
  dr              %55.2 = DeadBranchReached@0x561504edb2f0[Test#0]
  goto BB8
BB56   <- [54]
  env             e56.0 = MkEnv              l     x=%52.4, y=%52.3, ...(miss)=missingArg, parent=R_GlobalEnv, context 1
  prom-           %56.1 = MkArg                    unboundValue, isEQsparseDense[0x5614fd7b29f0]_p23, e56.0
  val?            %56.2 = StaticCall         !v    colSums[0x561505c24680](%56.1) { 0 } e56.0   <real+>
  lgl$#-          %56.3 = IsType                   %56.2 isA real+
  void                    Branch                   %56.3 -> BB58 (if true) | BB59 (if false)
BB57   <- [54]
  void                    Nop                !     
  val?^ | miss    %57.1 = %54.0
  dr              %57.2 = CallTarget@0x561504edb2f0[Call#3]
  goto BB8
BB8   <- [55, 57]
  val?^ | miss    %8.0  = Phi                      %55.1:BB55, %57.1:BB57
  val?^ | miss    %8.1  = %8.0
  dr              %8.2  = Phi                      %55.2:BB55, %57.2:BB57
  dr              %8.3  = %8.2
  fs              %8.4  = FrameState         R     0x5614ffc053c0+450: [<blt &>, <blt &>], env=e0.2
  env             e8.5  = (MkEnv)            l     x=%52.4, y=%52.3, ...(miss)=missingArg, parent=R_GlobalEnv, context 1
  fs              %8.6  = FrameState         R     0x5614ff6c4ce0+17: [<blt any>, %52.6], env=e8.5, next=%8.4
  void                    Deopt              !v    %8.6, %8.3, %8.1   !
BB58   <- [56]
  real+           %58.0 = CastType           d     dn %56.2
  lgl             %58.1 = Eq                 wed   %58.0, 0, elided   <lgl+>
  void                    StVar              lW    i0, %58.1, e56.0
  val?            %58.3 = CallBuiltin        !v    any(%58.1) e56.0   <lgl$->
  lgl$#-          %58.4 = IsType                   %58.3 isA lgl$-
  void                    Branch                   %58.4 -> BB60 (if true) | BB61 (if false)
BB59   <- [56]
  fs              %59.0 = FrameState         R     0x5614ffc053c0+450: [<blt &>, <blt &>], env=e0.2
  fs              %59.1 = FrameState         R     0x5614ff6c4ce0+92: [<blt any>, %56.2], env=e56.0, next=%59.0
  void                    Deopt              !v    %59.1, Typecheck@0x561504edb2f0[Type#6], %56.2   !
BB60   <- [58]
  lgl$-           %60.0 = CastType           d     dn %58.3
  lgl$#-          %60.1 = CheckTrueFalse     e     %60.0
  void                    Branch                   %60.1 -> BB43 (if true) | BB14 (if false)
BB61   <- [58]
  void                    Nop                !     
  val?            %61.1 = %58.3
  dr              %61.2 = Typecheck@0x561504edb2f0[Type#8]
  goto BB12
BB43   <- [60]
  fs              %43.0 = FrameState         R     0x5614ffc053c0+450: [<blt &>, <blt &>], env=e0.2
  (cls|spec|blt)  %43.1 = LdFun              !v    message, e56.0
  fs              %43.2 = FrameState         R     0x5614ff6c4ce0+158: [%43.1], env=e56.0, next=%43.0
  void                    Deopt              !v    %43.2, DeadCall@0x561504edb2f0[Call#5], %43.1   !
BB14   <- [60]
  val?^ | miss    %14.0 = LdVar              eR    any, e56.0
  lgl$#-          %14.1 = Identical                <blt any>, %14.0   <true>
  void                    Branch                   %14.1 -> BB62 (if true) | BB63 (if false)
BB12   <- [61, 63, 65]
  val?^ | miss    %12.0 = Phi                      %61.1:BB61, %63.1:BB63, %65.1:BB65
  val?^ | miss    %12.1 = %12.0
  dr              %12.2 = Phi                      %61.2:BB61, %63.2:BB63, %65.2:BB65
  dr              %12.3 = %12.2
  fs              %12.4 = FrameState         R     0x5614ffc053c0+450: [<blt &>, <blt &>], env=e0.2
  fs              %12.5 = FrameState         R     0x5614ff6c4ce0+137: [%58.3], env=e56.0, next=%12.4
  void                    Deopt              !v    %12.5, %12.3, %12.1   !
BB62   <- [14]
  val?^ | miss    %62.0 = LdVar              eR    colSums, e56.0
  lgl$#-          %62.1 = Identical                %62.0, function(x, na.rm=FALSE, dims=1, ...) <(rir::D|...
  void                    Branch                   %62.1 -> BB64 (if true) | BB65 (if false)
BB63   <- [14]
  void                    Nop                !     
  lgl$#-          %63.1 = %14.1
  dr              %63.2 = DeadBranchReached@0x561504edb2f0[Test#1]
  goto BB12
BB64   <- [62]
  prom-           %64.0 = MkArg                    unboundValue, isEQsparseDense[0x5614fd7b29f0]_p25, e56.0
  val?            %64.1 = StaticCall         !v    colSums[0x561505c24680](%64.0) { 0 } e56.0   <real+>
  lgl$#-          %64.2 = IsType                   %64.1 isA real+
  void                    Branch                   %64.2 -> BB66 (if true) | BB67 (if false)
BB65   <- [62]
  void                    Nop                !     
  val?^ | miss    %65.1 = %62.0
  dr              %65.2 = CallTarget@0x561504edb2f0[Call#12]
  goto BB12
BB66   <- [64]
  real+           %66.0 = CastType           d     dn %64.1
  lgl             %66.1 = Eq                 wed   %66.0, 0, elided   <lgl+>
  void                    StVar              lW    i0, %66.1, e56.0
  val?            %66.3 = CallBuiltin        !v    any(%66.1) e56.0   <lgl$->
  lgl$#-          %66.4 = IsType                   %66.3 isA lgl$-
  void                    Branch                   %66.4 -> BB68 (if true) | BB69 (if false)
BB67   <- [64]
  fs              %67.0 = FrameState         R     0x5614ffc053c0+450: [<blt &>, <blt &>], env=e0.2
  fs              %67.1 = FrameState         R     0x5614ff6c4ce0+355: [<blt any>, %64.1], env=e56.0, next=%67.0
  void                    Deopt              !v    %67.1, Typecheck@0x561504edb2f0[Type#21], %64.1   !
BB68   <- [66]
  lgl$-           %68.0 = CastType           d     dn %66.3
  lgl$#-          %68.1 = CheckTrueFalse     e     %68.0
  void                    Branch                   %68.1 -> BB42 (if true) | BB19 (if false)
BB69   <- [66]
  void                    Nop                !     
  val?            %69.1 = %66.3
  dr              %69.2 = Typecheck@0x561504edb2f0[Type#23]
  goto BB17
BB42   <- [68]
  fs              %42.0 = FrameState         R     0x5614ffc053c0+450: [<blt &>, <blt &>], env=e0.2
  (cls|spec|blt)  %42.1 = LdFun              !v    message, e56.0
  fs              %42.2 = FrameState         R     0x5614ff6c4ce0+421: [%42.1], env=e56.0, next=%42.0
  void                    Deopt              !v    %42.2, DeadCall@0x561504edb2f0[Call#14], %42.1   !
BB19   <- [68]
  val?^ | miss    %19.0 = LdVar              eR    isTRUE, e56.0
  lgl$#-          %19.1 = Identical                %19.0, function(x) <(rir::DispatchTable*)0x5614fa764a|...
  void                    Branch                   %19.1 -> BB70 (if true) | BB71 (if false)
BB17   <- [69, 71]
  val?^ | miss    %17.0 = Phi                      %69.1:BB69, %71.1:BB71
  val?^ | miss    %17.1 = %17.0
  dr              %17.2 = Phi                      %69.2:BB69, %71.2:BB71
  dr              %17.3 = %17.2
  fs              %17.4 = FrameState         R     0x5614ffc053c0+450: [<blt &>, <blt &>], env=e0.2
  fs              %17.5 = FrameState         R     0x5614ff6c4ce0+400: [%66.3], env=e56.0, next=%17.4
  void                    Deopt              !v    %17.5, %17.3, %17.1   !
BB70   <- [19]
  (cls|spec|blt)  %70.0 = LdFun              !v    all.equal, <0x5614fe1cf8a0>, e56.0
  prom-           %70.1 = MkArg                    unboundValue, isEQsparseDense[0x5614fd7b29f0]_p28, e56.0
  prom-           %70.2 = MkArg                    unboundValue, isEQsparseDense[0x5614fd7b29f0]_p29, e56.0
  (miss|dots)     %70.3 = LdDots             R     , e56.0
  *dots-          %70.4 = ExpandDots               %70.3
  val?            %70.5 = NamedCall          !v    %70.0(%70.1, %70.2, tolerance=0, .xpandDotsTrigger=%70.4) e56.0   <lgl$->
  lgl$#-          %70.6 = IsType                   %70.5 isA lgl$-
  void                    Branch                   %70.6 -> BB72 (if true) | BB73 (if false)
BB71   <- [19]
  void                    Nop                !     
  val?^ | miss    %71.1 = %19.0
  dr              %71.2 = CallTarget@0x561504edb2f0[Call#18]
  goto BB17
BB72   <- [70]
  lgl$-           %72.0 = CastType           d     dn %70.5
  lgl$-           %72.1 = CallSafeBuiltin    wed   is.na(%72.0)    <lgl$->
  lgl$-           %72.2 = Not                d     %72.1, elided
  lgl$-           %72.3 = AsLogical                %72.2
  lgl$-           %72.4 = AsLogical                %72.3
  lgl$-           %72.5 = AsLogical                %72.4
  lgl$#-          %72.6 = Identical                %72.5, false
  void                    Branch                   %72.6 -> BB41 (if true) | BB22 (if false)
BB73   <- [70]
  prom-           %73.0 = MkArg                    unboundValue, isEQsparseDense[0x5614fd7b29f0]_p27, e56.0
  val?^           %73.1 = CastType                 up %73.0
  fs              %73.2 = FrameState         R     0x5614ffc053c0+450: [<blt &>, <blt &>], env=e0.2
  fs              %73.3 = FrameState         R     0x5614ff6c4ce0+558: [], env=e56.0, next=%73.2
  env             e73.4 = (MkEnv)            l     x=%73.1, parent=R_BaseNamespace, context 0
  fs              %73.5 = FrameState         R     0x5614f8cf86d0+69: [<blt is.logical>], env=e73.4, next=%73.3
  fs              %73.6 = FrameState         R     0x5615057b4650+63(pr): [%70.5], env=e56.0, next=%73.5
  void                    Deopt              !v    %73.6, Typecheck@0x561504edb2f0[Type#32], %70.5   !
BB41   <- [72]
  void                    Nop                !     
  lgl$-           %41.1 = %72.5
  goto BB23
BB22   <- [72]
  lgl$-           %22.0 = AsLogical                %72.0
  lgl$-           %22.1 = LAnd                     %72.5, %22.0
  lgl$-           %22.2 = %22.1
  goto BB23
BB23   <- [41, 22]
  lgl$-           %23.0 = Phi                      %22.2:BB22, %41.1:BB41
  lgl$-           %23.1 = %23.0
  val?            %23.2 = PopContext         C     %23.1, %52.2   <lgl$->
  lgl$#-          %23.3 = IsType                   %23.2 isA lgl$-
  void                    Branch                   %23.3 -> BB74 (if true) | BB75 (if false)
BB74   <- [23]
  lgl$-           %74.0 = CastType           d     dn %23.2
  val?^ | miss    %74.1 = LdVar              eR    identical, e0.2
  lgl$#-          %74.2 = Identical                %74.1, function(x, y, num.eq=TRUE, single.NA=TRUE, at|...
  void                    Branch                   %74.2 -> BB76 (if true) | BB77 (if false)
BB75   <- [23]
  void                    Nop                !     
  val?            %75.1 = %23.2
  dr              %75.2 = Typecheck@0x5615047aaaa0[Type#55]
  goto BB24
BB76   <- [74]
  prom-           %76.0 = MkArg                    unboundValue, isEQsparseDense[0x5614fd7b29f0]_p16, e0.2
  prom-           %76.1 = MkArg                    unboundValue, isEQsparseDense[0x5614fd7b29f0]_p19, e0.2
  ct              %76.2 = PushContext        lCL   %76.0, %76.1, identical(@(smm, assign), attr(mm, "assign")), function(x, y, num.eq=TRUE, single.NA=TRUE, at|..., e0.2
  val?^           %76.3 = CastType                 up %76.1
  val?^           %76.4 = CastType                 up %76.0
  env             e76.5 = MkEnv              l     x=%76.4, y=%76.3, num.eq(miss)=true, single.NA(miss)=true, attrib.as.set(miss)=true, ignore.bytecode(miss)=true, ignore.environment(miss)=false, ignore.srcref(miss)=true, parent=R_BaseNamespace, context 1
  val?            %76.6 = Force!<lazy>       !vL   %76.4, e76.5   <val?>
  val?            %76.7 = Force!<lazy>       !vL   %76.3, e76.5   <val?>
  val?            %76.8 = CallBuiltin        !v    identical(%76.6, %76.7, true, true, true, true, false, true) e76.5
  val?            %76.9 = PopContext         C     %76.8, %76.2   <lgl$->
  lgl$#-          %76.10 = IsType                   %76.9 isA lgl$-
  void                    Branch                   %76.10 -> BB78 (if true) | BB79 (if false)
BB77   <- [74]
  void                    Nop                !     
  val?^ | miss    %77.1 = %74.1
  dr              %77.2 = CallTarget@0x5615047aaaa0[Call#32]
  goto BB24
BB24   <- [75, 77]
  val?^ | miss    %24.0 = Phi                      %75.1:BB75, %77.1:BB77
  val?^ | miss    %24.1 = %24.0
  dr              %24.2 = Phi                      %75.2:BB75, %77.2:BB77
  dr              %24.3 = %24.2
  fs              %24.4 = FrameState         R     0x5614ffc053c0+450: [<blt &>, <blt &>, %23.2], env=e0.2
  void                    Deopt              !v    %24.4, %24.3, %24.1   !
BB78   <- [76]
  lgl$-           %78.0 = CastType           d     dn %76.9
  val+            %78.1 = CallSafeBuiltin    wed   &(%74.0, %78.0)    <lgl$->
  lgl$#-          %78.2 = IsType                   %78.1 isA lgl$-
  void                    Branch                   %78.2 -> BB80 (if true) | BB81 (if false)
BB79   <- [76]
  fs              %79.0 = FrameState         R     0x5614ffc053c0+492: [<blt &>, <blt &>, %74.0, %76.9], env=e0.2
  void                    Deopt              !v    %79.0, Typecheck@0x5615047aaaa0[Type#61], %76.9   !
BB80   <- [78]
  lgl$-           %80.0 = CastType           d     dn %78.1
  val?^ | miss    %80.1 = LdVar              eR    attr, e0.2
  lgl$#-          %80.2 = Identical                <blt attr>, %80.1   <true>
  void                    Branch                   %80.2 -> BB82 (if true) | BB83 (if false)
BB81   <- [78]
  void                    Nop                !     
  val+            %81.1 = %78.1
  dr              %81.2 = Typecheck@0x5615047aaaa0[Type#62]
  goto BB28
BB82   <- [80]
  val?^ | miss    %82.0 = LdVar              eR    mm, e0.2
  lgl$#-          %82.1 = IsType                   %82.0 isA real+
  void                    Branch                   %82.1 -> BB84 (if true) | BB85 (if false)
BB83   <- [80]
  void                    Nop                !     
  lgl$#-          %83.1 = %80.2
  dr              %83.2 = DeadBranchReached@0x5615047aaaa0[Test#2]
  goto BB28
BB28   <- [81, 83, 85]
  val?^ | miss    %28.0 = Phi                      %81.1:BB81, %83.1:BB83, %85.1:BB85
  val?^ | miss    %28.1 = %28.0
  dr              %28.2 = Phi                      %81.2:BB81, %83.2:BB83, %85.2:BB85
  dr              %28.3 = %28.2
  fs              %28.4 = FrameState         R     0x5614ffc053c0+514: [<blt &>, %78.1], env=e0.2
  void                    Deopt              !v    %28.4, %28.3, %28.1   !
BB84   <- [82]
  real+           %84.0 = CastType           d     dn %82.0
  val?            %84.1 = CallBuiltin        !v    attr(%84.0, "contrasts") e0.2   <(nil|vec)+>
  lgl$-           %84.2 = Is                       %84.1, NULL
  void                    StVar              lW    mc, %84.1, e0.2
  lgl$#-          %84.4 = CheckTrueFalse     e     %84.2
  void                    Branch                   %84.4 -> BB38 (if true) | BB32 (if false)
BB85   <- [82]
  void                    Nop                !     
  val?^ | miss    %85.1 = %82.0
  dr              %85.2 = Typecheck@0x5615047aaaa0[Type#64]
  goto BB28
BB38   <- [84]
  val?^ | miss    %38.0 = LdVar              eR    length, e0.2
  lgl$#-          %38.1 = Identical                <blt length>, %38.0   <true>
  void                    Branch                   %38.1 -> BB90 (if true) | BB91 (if false)
BB32   <- [84]
  val?^ | miss    %32.0 = LdVar              eR    identical, e0.2
  lgl$#-          %32.1 = Identical                %32.0, function(x, y, num.eq=TRUE, single.NA=TRUE, at|...
  void                    Branch                   %32.1 -> BB86 (if true) | BB87 (if false)
BB90   <- [38]
  val?^ | miss    %90.0 = LdVar              eR    sc, e0.2
  lgl$#-          %90.1 = IsType                   %90.0 isA val?~+ | miss
  void                    Branch                   %90.1 -> BB92 (if true) | BB93 (if false)
BB91   <- [38]
  void                    Nop                !     
  lgl$#-          %91.1 = %38.1
  dr              %91.2 = DeadBranchReached@0x5615047aaaa0[Test#3]
  goto BB30
BB86   <- [32]
  prom-           %86.0 = MkArg                    unboundValue, isEQsparseDense[0x5614fd7b29f0]_p21, e0.2
  prom-           %86.1 = MkArg                    unboundValue, isEQsparseDense[0x5614fd7b29f0]_p22 (!refl), e0.2
  ct              %86.2 = PushContext        lCL   %86.0, %86.1, identical(sc, mc), function(x, y, num.eq=TRUE, single.NA=TRUE, at|..., e0.2
  val?^           %86.3 = CastType                 up %86.1
  val?^           %86.4 = CastType                 up %86.0
  env             e86.5 = MkEnv              l     x=%86.4, y=%86.3, num.eq(miss)=true, single.NA(miss)=true, attrib.as.set(miss)=true, ignore.bytecode(miss)=true, ignore.environment(miss)=false, ignore.srcref(miss)=true, parent=R_BaseNamespace, context 1
  val?            %86.6 = Force!<lazy>       !vL   %86.4, e86.5   <val?>
  val?            %86.7 = Force!<lazy>       !vrL  %86.3, e86.5   <val?>
  val?            %86.8 = CallBuiltin        !v    identical(%86.6, %86.7, true, true, true, true, false, true) e86.5
  val?            %86.9 = PopContext         C     %86.8, %86.2   <lgl$->
  lgl$#-          %86.10 = IsType                   %86.9 isA lgl$-
  void                    Branch                   %86.10 -> BB88 (if true) | BB89 (if false)
BB87   <- [32]
  void                    Nop                !     
  val?^ | miss    %87.1 = %32.0
  dr              %87.2 = CallTarget@0x5615047aaaa0[Call#36]
  goto BB30
BB92   <- [90]
  val?~+ | miss   %92.0 = CastType           d     dn %90.0
  val?+           %92.1 = Force!<value>            %92.0,    <vec+>
  (int|real)$-    %92.2 = CallSafeBuiltin    wed   length(%92.1)    <int$->
  lgl$#-          %92.3 = IsType                   %92.2 isA int$-
  void                    Branch                   %92.3 -> BB96 (if true) | BB97 (if false)
BB93   <- [90]
  void                    Nop                !     
  val?^ | miss    %93.1 = %90.0
  dr              %93.2 = Typecheck@0x5615047aaaa0[Type#70]
  goto BB30
BB30   <- [87, 91, 93]
  val?^ | miss    %30.0 = Phi                      %87.1:BB87, %91.1:BB91, %93.1:BB93
  val?^ | miss    %30.1 = %30.0
  dr              %30.2 = Phi                      %87.2:BB87, %91.2:BB91, %93.2:BB93
  dr              %30.3 = %30.2
  fs              %30.4 = FrameState         R     0x5614ffc053c0+637: [<blt &>, %80.0, %84.1], env=e0.2
  void                    Deopt              !v    %30.4, %30.3, %30.1   !
BB88   <- [86]
  void                    Nop                !     
  val?            %88.1 = %86.9
  goto BB35
BB89   <- [86]
  fs              %89.0 = FrameState         R     0x5614ffc053c0+685: [<blt &>, %80.0, %86.9], env=e0.2
  void                    Deopt              !v    %89.0, Typecheck@0x5615047aaaa0[Type#68], %86.9   !
BB96   <- [92]
  int$-           %96.0 = CastType           d     dn %92.2
  lgl$-           %96.1 = Eq                 d     %96.0, 0, elided   <lgl$->
  lgl$-           %96.2 = %96.1
  goto BB35
BB97   <- [92]
  fs              %97.0 = FrameState         R     0x5614ffc053c0+786: [<blt &>, %80.0, %92.2], env=e0.2
  void                    Deopt              !v    %97.0, Typecheck@0x5615047aaaa0[Type#71], %92.2   !
BB35   <- [88, 96]
  val?            %35.0 = Phi                      %88.1:BB88, %96.2:BB96
  val?            %35.1 = %35.0
  val?            %35.2 = CallBuiltin        !     &(%80.0, %35.1) e0.2   <lgl$->
  lgl$#-          %35.3 = IsType                   %35.2 isA lgl$-
  void                    Branch                   %35.3 -> BB94 (if true) | BB95 (if false)
BB94   <- [35]
  lgl$-           %94.0 = CastType           d     dn %35.2
  void                    Return             l     %94.0
BB95   <- [35]
  fs              %95.0 = FrameState         R     0x5614ffc053c0+821: [%35.2], env=e0.2
  void                    Deopt              !v    %95.0, Typecheck@0x5615047aaaa0[Type#73], %35.2   !
Prom 0:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     isTRUE, <0x5614f8b7bd00>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, isEQsparseDense[0x5614fd7b29f0]_p1, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <lgl$->
  void                    Return             l     %0.3
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     getOption, <0x5614f8b84558>, e0.0
  val?            %0.2  = Call               !     %0.1("verboseSparse") e0.0   <nil->
  void                    Return             l     %0.2
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     inherits, <0x5614fa77bad8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, isEQsparseDense[0x5614fd7b29f0]_p3, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2, "formula") e0.0   <lgl$->
  void                    Return             l     %0.3
Prom 3:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    frml, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <code>
  void                    Return             l     %0.3
Prom 4:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     is.data.frame, <0x5615049d9858>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, isEQsparseDense[0x5614fd7b29f0]_p5, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <lgl$->
  void                    Return             l     %0.3
Prom 5:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    dat, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <vec>
  void                    Return             l     %0.3
Prom 6:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    frml, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <code>
  void                    Return             l     %0.3
Prom 7:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    dat, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <vec>
  void                    Return             l     %0.3
Prom 8:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    frml, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <code>
  void                    Return             l     %0.3
Prom 9:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    dat, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <vec>
  void                    Return             l     %0.3
Prom 10:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    smm, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 11:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    contrasts, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 12:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     as, <0x5614facc6e50>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, isEQsparseDense[0x5614fd7b29f0]_p13, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2, "generalMatrix") e0.0   <other>
  void                    Return             l     %0.3
Prom 13:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    smm, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <other>
  void                    Return             l     %0.3
Prom 14:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     Matrix, <0x5614f93c5fe8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, isEQsparseDense[0x5614fd7b29f0]_p15, e0.0
  val?            %0.3  = NamedCall          !     %0.1(%0.2, sparse=true) e0.0   <other>
  void                    Return             l     %0.3
Prom 15:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    mm, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <real+>
  void                    Return             l     %0.3
Prom 16:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, <0x5614f88a6bd8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, isEQsparseDense[0x5614fd7b29f0]_p17, e0.0
  prom-           %0.3  = MkArg                    unboundValue, isEQsparseDense[0x5614fd7b29f0]_p18, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <int->
  void                    Return             l     %0.4
Prom 17:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    smm, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 18:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    assign, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 19:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     attr, <0x5614f88a7080>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, isEQsparseDense[0x5614fd7b29f0]_p20, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2, "assign") e0.0   <int->
  void                    Return             l     %0.3
Prom 20:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    mm, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <real+>
  void                    Return             l     %0.3
Prom 21:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    sc, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 22:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    mc, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 23:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     abs, <0x5614f88acaf8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, isEQsparseDense[0x5614fd7b29f0]_p24, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <other>
  void                    Return             l     %0.3
Prom 24:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    x, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <other>
  void                    Return             l     %0.3
Prom 25:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     abs, <0x5614f88acaf8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, isEQsparseDense[0x5614fd7b29f0]_p26, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <other>
  void                    Return             l     %0.3
Prom 26:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    y, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <other>
  void                    Return             l     %0.3
Prom 27:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     all.equal, <0x5614fe1cf8a0>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, isEQsparseDense[0x5614fd7b29f0]_p28, e0.0
  prom-           %0.3  = MkArg                    unboundValue, isEQsparseDense[0x5614fd7b29f0]_p29, e0.0
  (miss|dots)     %0.4  = LdDots             R     , e0.0
  *dots-          %0.5  = ExpandDots               %0.4
  val?            %0.6  = NamedCall          !     %0.1(%0.2, %0.3, tolerance=0, .xpandDotsTrigger=%0.5) e0.0   <lgl$->
  void                    Return             l     %0.6
Prom 28:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    x, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <other>
  void                    Return             l     %0.3
Prom 29:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    y, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <other>
  void                    Return             l     %0.3

│ isEQsparseDense[0x5614fd7b29f0]                                              │
└──────────────────────────────────────────────────────────────────────────────┘
