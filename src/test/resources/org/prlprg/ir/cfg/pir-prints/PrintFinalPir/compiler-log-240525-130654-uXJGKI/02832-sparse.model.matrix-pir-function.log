
┌──────────────────────────────────────────────────────────────────────────────┐
│ sparse.model.matrix[0x5615025540d0]                                          │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;NonRefl1 miss: 8                     │
│ Properties:                                                                  │
├────── Final PIR Version
sparse.model.matrix[0x5615025540d0]
BB0
  val?^           %0.0  = LdArg                    1
  val?^           %0.1  = LdArg                    0
  env             e0.2  = MkEnv              l     object=%0.1, data=%0.0, contrasts.arg(miss)=nil, xlev(miss)=nil, transpose(miss)=false, drop.unused.levels(miss)=false, row.names(miss)=true, sep(miss)="", verbose(miss)=false, ...(miss)=missingArg, parent=<env 0x5614fad267d8>, context 1
  lgl$-           %0.3  = Missing            eR    data, e0.2
  lgl$#-          %0.4  = CheckTrueFalse     e     %0.3
  void                    Branch                   %0.4 -> BB134 (if true) | BB3 (if false)
BB134   <- [0]
  (cls|spec|blt)  %134.0 = LdFun              !v    terms, <env 0x5614fad267d8>
  fs              %134.1 = FrameState         R     0x561504ec69c0+72: [%134.0], env=e0.2
  void                    Deopt              !v    %134.1, DeadCall@0x56150544bac0[Call#2], %134.0
BB3   <- [0]
  val?^ | miss    %3.0  = LdVar              eR    terms, <env 0x5614fad267d8>
  lgl$#-          %3.1  = Identical                %3.0, function(x, ...) <(rir::DispatchTable*)0x5614f|...
  void                    Branch                   %3.1 -> BB136 (if true) | BB137 (if false)
BB136   <- [3]
  prom-           %136.0 = MkArg                    unboundValue, sparse.model.matrix[0x5615025540d0]_p8 (!refl), e0.2
  dots-           %136.1 = DotsList           l     data=%136.0
  val?            %136.2 = Force!<lazy>       !v    %0.1, e0.2   <code>
  prom-           %136.3 = MkArg                    %136.2, sparse.model.matrix[0x5615025540d0]_p7 (!refl), e0.2
  val?            %136.4 = StaticCall         !v    terms[0x5614fb2d8b10](%136.3, %136.1) { 0 1n } e0.2   <code>
  void                    StVar              lW    t, %136.4, e0.2
  val?^ | miss    %136.6 = LdVar              eR    attr, e0.2
  lgl$#-          %136.7 = Identical                <blt attr>, %136.6   <true>
  void                    Branch                   %136.7 -> BB138 (if true) | BB139 (if false)
BB137   <- [3]
  env             e137.0 = (MkEnv)            l     object=%0.1, data=%0.0, contrasts.arg(miss)=nil, xlev(miss)=nil, transpose(miss)=false, drop.unused.levels(miss)=false, row.names(miss)=true, sep(miss)="", verbose(miss)=false, ...(miss)=missingArg, parent=<env 0x5614fad267d8>, context 1
  fs              %137.1 = FrameState         R     0x561504ec69c0+0: [], env=e137.0
  void                    Deopt              !v    %137.1, CallTarget@0x56150544bac0[Call#1], %3.0
BB138   <- [136]
  val?^ | miss    %138.0 = LdVar              eR    data, e0.2
  val?            %138.1 = Force!<wrapped>    !v    %138.0, e0.2   <vec>
  val?            %138.2 = CallBuiltin        !v    attr(%138.1, "terms") e0.2   <nil->
  lgl$-           %138.3 = Is                       %138.2, NULL
  lgl$#-          %138.4 = CheckTrueFalse     e     %138.3
  void                    Branch                   %138.4 -> BB9 (if true) | BB8 (if false)
BB139   <- [136]
  fs              %139.0 = FrameState         R     0x561504ec69c0+113: [], env=e0.2
  void                    Deopt              !v    %139.0, DeadBranchReached@0x56150544bac0[Test#0], %136.7   !
BB9   <- [138]
  val?^ | miss    %9.0  = LdVar              eR    model.frame, e0.2
  lgl$#-          %9.1  = Identical                %9.0, function(formula, ...) <(rir::DispatchTable*)0|...
  void                    Branch                   %9.1 -> BB140 (if true) | BB141 (if false)
BB8   <- [138]
  (cls|spec|blt)  %8.0  = LdFun              !v    match, e0.2
  fs              %8.1  = FrameState         R     0x561504ec69c0+236: [%8.0], env=e0.2
  void                    Deopt              !v    %8.1, DeadCall@0x56150544bac0[Call#4], %8.0   !
BB140   <- [9]
  prom-           %140.0 = MkArg                    unboundValue, sparse.model.matrix[0x5615025540d0]_p11, e0.2
  prom-           %140.1 = MkArg                    unboundValue, sparse.model.matrix[0x5615025540d0]_p12, e0.2
  dots-           %140.2 = DotsList           l     %140.0, xlev=%140.1
  val?^ | miss    %140.3 = LdVar              eR    object, e0.2
  val?            %140.4 = Force!<wrapped>    !v    %140.3, e0.2   <code>
  prom-           %140.5 = MkArg                    %140.4, sparse.model.matrix[0x5615025540d0]_p10 (!refl), e0.2
  val?            %140.6 = StaticCall         !v    model.frame[0x5614fa179ee0](%140.5, %140.2) { 0 1 2n } e0.2   <vec>
  void                    StVar              lW    data, %140.6, e0.2
  val?^ | miss    %140.8 = LdVar              eR    attr, e0.2
  lgl$#-          %140.9 = Identical                <blt attr>, %140.8   <true>
  void                    Branch                   %140.9 -> BB142 (if true) | BB143 (if false)
BB141   <- [9]
  fs              %141.0 = FrameState         R     0x561504ec69c0+215: [%138.2], env=e0.2
  void                    Deopt              !v    %141.0, CallTarget@0x56150544bac0[Call#13], %9.0   !
BB142   <- [140]
  val?^ | miss    %142.0 = LdVar              eR    t, e0.2
  val?            %142.1 = Force!<value>      !v    %142.0, e0.2   <code>
  val?            %142.2 = CallBuiltin        !v    attr(%142.1, "response") e0.2   <int$->
  lgl$#-          %142.3 = IsType                   %142.2 isA int$-
  void                    Branch                   %142.3 -> BB144 (if true) | BB145 (if false)
BB143   <- [140]
  fs              %143.0 = FrameState         R     0x561504ec69c0+643: [], env=e0.2
  void                    Deopt              !v    %143.0, DeadBranchReached@0x56150544bac0[Test#3], %140.9   !
BB144   <- [142]
  int$-           %144.0 = CastType           d     dn %142.2
  void                    StVar              lW    int, %144.0, e0.2
  val?^ | miss    %144.2 = LdVar              eR    length, e0.2
  lgl$#-          %144.3 = Identical                <blt length>, %144.2   <true>
  void                    Branch                   %144.3 -> BB146 (if true) | BB147 (if false)
BB145   <- [142]
  fs              %145.0 = FrameState         R     0x561504ec69c0+745: [%142.2], env=e0.2
  void                    Deopt              !v    %145.0, Typecheck@0x56150544bac0[Type#34], %142.2   !
BB146   <- [144]
  val?^ | miss    %146.0 = LdVar              eR    data, e0.2
  val?            %146.1 = Force!<value>      !v    %146.0, e0.2   <vec>
  val?            %146.2 = CallBuiltin        !v    length(%146.1) e0.2   <int$->
  lgl$#-          %146.3 = IsType                   %146.2 isA int$-
  void                    Branch                   %146.3 -> BB148 (if true) | BB149 (if false)
BB147   <- [144]
  fs              %147.0 = FrameState         R     0x561504ec69c0+759: [], env=e0.2
  void                    Deopt              !v    %147.0, DeadBranchReached@0x56150544bac0[Test#4], %144.3   !
BB148   <- [146]
  int$-           %148.0 = CastType           d     dn %146.2
  lgl$#-          %148.1 = CheckTrueFalse     e     %148.0
  void                    Branch                   %148.1 -> BB26 (if true) | BB18 (if false)
BB149   <- [146]
  void                    Nop                !     
  val?            %149.1 = %146.2
  dr              %149.2 = Typecheck@0x56150544bac0[Type#37]
  goto BB16
BB26   <- [148]
  val?^ | miss    %26.0 = LdVar              eR    as.character, e0.2
  lgl$#-          %26.1 = Identical                <blt as.character>, %26.0   <true>
  void                    Branch                   %26.1 -> BB150 (if true) | BB151 (if false)
BB18   <- [148]
  void                    StVar              lW    isF, false, e0.2
  val?^ | miss    %18.1 = LdVar              eR    cbind, e0.2
  lgl$#-          %18.2 = Identical                %18.1, function(..., deparse.level=1) <(rir::Dispatch|...
  void                    Branch                   %18.2 -> BB154 (if true) | BB155 (if false)
BB16   <- [149, 151, 153]
  val?^ | miss    %16.0 = Phi                      %149.1:BB149, %151.1:BB151, %153.1:BB153
  val?^ | miss    %16.1 = %16.0
  dr              %16.2 = Phi                      %149.2:BB149, %151.2:BB151, %153.2:BB153
  dr              %16.3 = %16.2
  fs              %16.4 = FrameState         R     0x561504ec69c0+850: [%146.2], env=e0.2
  void                    Deopt              !v    %16.4, %16.3, %16.1   !
BB150   <- [26]
  val?^ | miss    %150.0 = LdVar              eR    getOption, e0.2
  lgl$#-          %150.1 = Identical                %150.0, function(x, default=NULL) <(rir::DispatchTable|...
  void                    Branch                   %150.1 -> BB152 (if true) | BB153 (if false)
BB151   <- [26]
  void                    Nop                !     
  lgl$#-          %151.1 = %26.1
  dr              %151.2 = DeadBranchReached@0x56150544bac0[Test#5]
  goto BB16
BB154   <- [18]
  prom-           %154.0 = MkArg                    unboundValue, sparse.model.matrix[0x5615025540d0]_p14, e0.2
  dots-           %154.1 = DotsList           l     %154.0, x=0
  ct              %154.2 = PushContext        lCL   %154.1, cbind(data, x=0), function(..., deparse.level=1) <(rir::Dispatch|..., e0.2
  env             e154.3 = MkEnv              l     ...=%154.1, deparse.level(miss)=1, parent=R_BaseNamespace, context 1
  prom-           %154.4 = MkArg                    unboundValue, sparse.model.matrix[0x5615025540d0]_p56, e154.3
  val?            %154.5 = Call               !v    <spec .Internal>(%154.4) e154.3   <val?>
  val?            %154.6 = PopContext         C     %154.5, %154.2   <vec$>
  void                    StVar              lW    data, %154.6, e0.2
  goto BB21
BB155   <- [18]
  fs              %155.0 = FrameState         R     0x561504ec69c0+876: [], env=e0.2
  void                    Deopt              !v    %155.0, CallTarget@0x56150544bac0[Call#16], %18.1   !
BB152   <- [150]
  ct              %152.0 = PushContext        lCL   "contrasts", getOption("contrasts"), function(x, default=NULL) <(rir::DispatchTable|..., e0.2
  env             e152.1 = MkEnv              l     x="contrasts", default(miss)=nil, parent=R_BaseNamespace, context 1
  lgl$-           %152.2 = Missing            eR    default, e152.1
  lgl$#-          %152.3 = CheckTrueFalse     e     %152.2
  void                    Branch                   %152.3 -> BB133 (if true) | BB27 (if false)
BB153   <- [150]
  void                    Nop                !     
  val?^ | miss    %153.1 = %150.0
  dr              %153.2 = CallTarget@0x56150544bac0[Call#19]
  goto BB16
BB21   <- [100, 120, 154]
  val?^ | miss    %21.0 = LdVar              eR    verbose, e0.2
  val?            %21.1 = Force!<lazy>       !v    %21.0, e0.2   <lgl$->
  lgl$#-          %21.2 = CheckTrueFalse     we    %21.1
  void                    Branch                   %21.2 -> BB25 (if true) | BB22 (if false)
BB133   <- [152]
  val?            %133.0 = CallBuiltin        !v    getOption("contrasts") e152.1
  val?            %133.1 = %133.0
  goto BB30
BB27   <- [152]
  val?            %27.0 = CallBuiltin        !v    getOption("contrasts") e152.1   <(nil|int)->
  lgl$-           %27.1 = Is                       %27.0, NULL
  void                    StVar              lW    ans, %27.0, e152.1
  val             %27.3 = ChkMissing         e     %27.0
  lgl$#-          %27.4 = CheckTrueFalse     e     %27.1
  void                    Branch                   %27.4 -> BB132 (if true) | BB28 (if false)
BB25   <- [21]
  (cls|spec|blt)  %25.0 = LdFun              !v    cat, e0.2
  fs              %25.1 = FrameState         R     0x561504ec69c0+3721: [%25.0], env=e0.2
  void                    Deopt              !v    %25.1, DeadCall@0x56150544bac0[Call#57], %25.0   !
BB22   <- [21]
  (cls|spec|blt)  %22.0 = LdFun              !v    model.spmatrix, <0x561504ba5310>, e0.2
  prom-           %22.1 = MkArg                    unboundValue, sparse.model.matrix[0x5615025540d0]_p15, e0.2
  prom-           %22.2 = MkArg                    unboundValue, sparse.model.matrix[0x5615025540d0]_p16, e0.2
  prom-           %22.3 = MkArg                    unboundValue, sparse.model.matrix[0x5615025540d0]_p17, e0.2
  prom-           %22.4 = MkArg                    unboundValue, sparse.model.matrix[0x5615025540d0]_p18, e0.2
  prom-           %22.5 = MkArg                    unboundValue, sparse.model.matrix[0x5615025540d0]_p19, e0.2
  prom-           %22.6 = MkArg                    unboundValue, sparse.model.matrix[0x5615025540d0]_p20, e0.2
  prom-           %22.7 = MkArg                    unboundValue, sparse.model.matrix[0x5615025540d0]_p21, e0.2
  val?            %22.8 = NamedCall          !v    %22.0(%22.1, %22.2, transpose=%22.3, drop.unused.levels=%22.4, row.names=%22.5, sep=%22.6, verbose=%22.7) e0.2   <other>
  void                    StVar              lW    ans, %22.8, e0.2
  val?^ | miss    %22.10 = LdVar              eR    lapply, e0.2
  lgl$#-          %22.11 = Identical                %22.10, function(X, FUN, ...) <(rir::DispatchTable*)0x|...
  void                    Branch                   %22.11 -> BB158 (if true) | BB159 (if false)
BB30   <- [133, 29]
  val?            %30.0 = Phi                      %29.2:BB29, %133.1:BB133
  val?            %30.1 = %30.0
  val?            %30.2 = PopContext         C     %30.1, %152.0   <str+>
  lgl$#-          %30.3 = IsType                   %30.2 isA val?+
  void                    Branch                   %30.3 -> BB156 (if true) | BB157 (if false)
BB132   <- [27]
  val?^ | miss    %132.0 = LdVar              eR    default, e152.1
  val?            %132.1 = Force!<value>      !v    %132.0, e152.1   <(lgl|str)$->
  val?            %132.2 = %132.1
  goto BB29
BB28   <- [27]
  void                    Nop                !     
  val?            %28.1 = %27.0
  goto BB29
BB158   <- [22]
  prom-           %158.0 = MkArg                    unboundValue, sparse.model.matrix[0x5615025540d0]_p22, e0.2
  cls             %158.1 = MkCls                    sparse.model.matrix@Prom(24)0, e0.2
  prom-           %158.2 = MkArg                    %158.1, sparse.model.matrix[0x5615025540d0]_p24 (!refl), e0.2
  val?            %158.3 = StaticCall         !v    lapply[0x5614fd883300](%158.0, %158.2) { 0 1 } e0.2   <vec+>
  (cls|spec|blt)  %158.4 = LdFun              !v    attr<-, <0x5614f88aae08>, e0.2
  val?^ | miss    %158.5 = LdVar              eR    ans, e0.2
  val?            %158.6 = Force!<value>      !v    %158.5, e0.2   <other>
  val?            %158.7 = NamedCall          !v    %158.4(%158.6, "contrasts", value=%158.3) e0.2   <other>
  void                    StVar              lW    ans, %158.7, e0.2
  val             %158.9 = ChkMissing         e     %158.7
  void                    Visible            v     
  void                    Return             l     %158.7
BB159   <- [22]
  fs              %159.0 = FrameState         R     0x561504ec69c0+3899: [], env=e0.2
  void                    Deopt              !v    %159.0, CallTarget@0x56150544bac0[Call#60], %22.10   !
BB156   <- [30]
  val?+           %156.0 = CastType           d     dn %30.2   <str+>
  val+            %156.1 = CallSafeBuiltin    wed   as.character(%156.0)    <str->
  void                    StVar              lW    contr.funs, %156.1, e0.2
  val?^ | miss    %156.3 = LdVar              eR    names, e0.2
  lgl$#-          %156.4 = Identical                <blt names>, %156.3   <true>
  void                    Branch                   %156.4 -> BB160 (if true) | BB161 (if false)
BB157   <- [30]
  fs              %157.0 = FrameState         R     0x561504ec69c0+1032: [<blt as.character>, %30.2], env=e0.2
  void                    Deopt              !v    %157.0, Typecheck@0x56150544bac0[Type#41], %30.2   !
BB29   <- [132, 28]
  val?            %29.0 = Phi                      %28.1:BB28, %132.2:BB132
  val?            %29.1 = %29.0
  val?            %29.2 = %29.1
  goto BB30
BB160   <- [156]
  val?^ | miss    %160.0 = LdVar              eR    data, e0.2
  val?            %160.1 = Force!<value>      !v    %160.0, e0.2   <vec>
  val?            %160.2 = CallBuiltin        !v    names(%160.1) e0.2   <str->
  void                    StVar              lW    namD, %160.2, e0.2
  val             %160.4 = ChkMissing         e     %160.2
  val?+           %160.5 = ToForSeq           e     %160.2
  int$-           %160.6 = Length                   %160.5
  int$-           %160.7 = Inc                      0L
  lgl$-           %160.8 = Lt                 d     %160.6, %160.7, elided   <false>
  lgl$#-          %160.9 = Identical                %160.8, true
  void                    Branch                   %160.9 -> BB163 (if true) | BB162 (if false)
BB161   <- [156]
  fs              %161.0 = FrameState         R     0x561504ec69c0+1068: [], env=e0.2
  void                    Deopt              !v    %161.0, DeadBranchReached@0x56150544bac0[Test#6], %156.4   !
BB163   <- [160]
  fs              %163.0 = FrameState         R     0x561504ec69c0+1173: [], env=e0.2
  void                    Deopt              !v    %163.0, DeadBranchReached@0x56150544bac0[Test#7], %160.9   !
BB162   <- [160]
  val?            %162.0 = Extract2_1D        wed   %160.5, %160.7, elided
  void                    StVar              lW    i, %162.0, e0.2
  val?^ | miss    %162.2 = LdVar              eR    is.character, e0.2
  lgl$#-          %162.3 = Identical                <blt is.character>, %162.2   <true>
  void                    Branch                   %162.3 -> BB164 (if true) | BB165 (if false)
BB164   <- [162]
  val?^ | miss    %164.0 = LdVar              eR    data, e0.2
  val?            %164.1 = Force!<value>      !v    %164.0, e0.2   <vec>
  lgl$#-          %164.2 = IsType                   %164.1 isA val+   <false>
  void                    Branch                   %164.2 -> BB167 (if true) | BB166 (if false)
BB165   <- [162]
  fs              %165.0 = FrameState         R     0x561504ec69c0+1227: [%160.5, %160.6, %160.7], env=e0.2
  void                    Deopt              !v    %165.0, DeadBranchReached@0x56150544bac0[Test#8], %162.3   !
BB167   <- [164]
  fs              %167.0 = FrameState         R     0x561504ec69c0+1296: [%160.5, %160.6, %160.7, <blt is.character>, %164.1], env=e0.2
  void                    Deopt              !v    %167.0, DeadBranchReached@0x56150544bac0[Test#10], %164.2   !
BB166   <- [164]
  prom-           %166.0 = MkArg                    unboundValue, sparse.model.matrix[0x5615025540d0]_p26, e0.2
  val?            %166.1 = Extract2_1D        !v    %164.1, %166.0, e0.2   <(int|real)>
  lgl$#-          %166.2 = CallSafeBuiltin    wed   is.character(%166.1)    <lgl$->
  void                    Branch                   %166.2 -> BB131 (if true) | BB41 (if false)
BB131   <- [166]
  val?^ | miss    %131.0 = LdVar              eR    data !upd, e0.2
  val?            %131.1 = Force!             !v    %131.0, e0.2
  (cls|spec|blt)  %131.2 = LdFun              !v    factor, e0.2
  fs              %131.3 = FrameState         R     0x561504ec69c0+1402: [%160.5, %160.6, %160.7, %131.2], env=e0.2
  void                    Deopt              !v    %131.3, DeadCall@0x56150544bac0[Call#22], %131.2   !
BB41   <- [166]
  void                    Nop                !     
  int$-           %41.1 = %160.7
  goto BB42
BB42   <- [41, 50]
  int$-           %42.0 = Phi                      %41.1:BB41, %50.1:BB50
  int$-           %42.1 = %42.0
  int$-           %42.2 = Inc                      %42.1
  lgl$-           %42.3 = Lt                 d     %160.6, %42.2, elided
  lgl$#-          %42.4 = Identical                %42.3, true
  void                    Branch                   %42.4 -> BB52 (if true) | BB45 (if false)
BB52   <- [42]
  val?^ | miss    %52.0 = LdVar              eR    vapply, e0.2
  lgl$#-          %52.1 = Identical                %52.0, function(X, FUN, FUN.VALUE, ..., USE.NAMES=TRU|...
  void                    Branch                   %52.1 -> BB168 (if true) | BB169 (if false)
BB45   <- [42]
  val?            %45.0 = Extract2_1D        wed   %160.5, %42.2, elided
  void                    StVar              lW    i, %45.0, e0.2
  val?^ | miss    %45.2 = LdVar              eR    is.character, e0.2
  lgl$#-          %45.3 = Identical                <blt is.character>, %45.2   <true>
  void                    Branch                   %45.3 -> BB170 (if true) | BB171 (if false)
BB168   <- [52]
  prom-           %168.0 = MkArg                    unboundValue, sparse.model.matrix[0x5615025540d0]_p28, e0.2
  cls             %168.1 = MkCls                    sparse.model.matrix@Prom(29)0, e0.2
  prom-           %168.2 = MkArg                    %168.1, sparse.model.matrix[0x5615025540d0]_p29 (!refl), e0.2
  ct              %168.3 = PushContext        lCL   %168.0, %168.2, na-lgl, vapply(data, function(<lst x=R_MissingArg>, |||..., function(X, FUN, FUN.VALUE, ..., USE.NAMES=TRU|..., e0.2
  cls~            %168.4 = CastType                 up %168.2
  val?^           %168.5 = CastType                 up %168.0
  env             e168.6 = MkEnv              l     X=%168.5, FUN=%168.4, FUN.VALUE=na-lgl, ...(miss)=missingArg, USE.NAMES(miss)=true, parent=R_BaseNamespace, context 1
  prom-           %168.7 = MkArg                    unboundValue, sparse.model.matrix[0x5615025540d0]_p61 (!refl), e168.6
  val?            %168.8 = StaticCall         !v    match.fun[0x56150002db30](%168.7) e168.6   <val?->
  void                    StVar              lW    FUN, %168.8, e168.6
  val?^ | miss    %168.10 = LdVar              eR    is.vector, e168.6
  lgl$#-          %168.11 = Identical                %168.10, function(x, mode="any") <(rir::DispatchTable*)|...
  void                    Branch                   %168.11 -> BB172 (if true) | BB173 (if false)
BB169   <- [52]
  fs              %169.0 = FrameState         R     0x561504ec69c0+1472: [%160.5, %160.6, %42.1], env=e0.2
  void                    Deopt              !v    %169.0, CallTarget@0x56150544bac0[Call#25], %52.0   !
BB170   <- [45]
  val?^ | miss    %170.0 = LdVar              eR    data, e0.2
  val?            %170.1 = Force!<value>      !v    %170.0, e0.2   <vec>
  lgl$#-          %170.2 = IsType                   %170.1 isA val+   <false>
  void                    Branch                   %170.2 -> BB177 (if true) | BB176 (if false)
BB171   <- [45]
  fs              %171.0 = FrameState         R     0x561504ec69c0+1501: [%160.5, %160.6, %42.2], env=e0.2
  void                    Deopt              !v    %171.0, DeadBranchReached@0x56150544bac0[Test#12], %45.3   !
BB172   <- [168]
  val?^ | miss    %172.0 = LdVar              eR    X, e168.6
  val?            %172.1 = Force!<lazy>       !v    %172.0, e168.6   <val?>
  lgl$#-          %172.2 = CallSafeBuiltin    wed   is.vector(%172.1, "any")    <lgl$->
  lgl$#-          %172.3 = Not                d     %172.2, elided
  void                    Branch                   %172.2 -> BB130 (if true) | BB57 (if false)
BB173   <- [168]
  fs              %173.0 = FrameState         R     0x561504ec69c0+1798: [], env=e0.2
  fs              %173.1 = FrameState         R     0x5614fa849000+46: [], env=e168.6, next=%173.0
  void                    Deopt              !v    %173.1, CallTarget@0x5614fa864020[Call#1], %168.10   !
BB177   <- [170]
  fs              %177.0 = FrameState         R     0x561504ec69c0+1570: [%160.5, %160.6, %42.2, <blt is.character>, %170.1], env=e0.2
  void                    Deopt              !v    %177.0, DeadBranchReached@0x56150544bac0[Test#14], %170.2   !
BB176   <- [170]
  prom-           %176.0 = MkArg                    unboundValue, sparse.model.matrix[0x5615025540d0]_p27, e0.2
  val?            %176.1 = Extract2_1D        !v    %170.1, %176.0, e0.2   <int>
  lgl$#-          %176.2 = CallSafeBuiltin    wed   is.character(%176.1)    <lgl$->
  void                    Branch                   %176.2 -> BB51 (if true) | BB50 (if false)
BB130   <- [172]
  val?^ | miss    %130.0 = LdVar              eR    is.object, e168.6
  lgl$#-          %130.1 = Identical                <blt is.object>, %130.0   <true>
  void                    Branch                   %130.1 -> BB174 (if true) | BB175 (if false)
BB57   <- [172]
  void                    Nop                !     
  lgl$#-          %57.1 = %172.3
  goto BB58
BB51   <- [176]
  val?^ | miss    %51.0 = LdVar              eR    data !upd, e0.2
  val?            %51.1 = Force!             !v    %51.0, e0.2
  (cls|spec|blt)  %51.2 = LdFun              !v    factor, e0.2
  fs              %51.3 = FrameState         R     0x561504ec69c0+1676: [%160.5, %160.6, %42.2, %51.2], env=e0.2
  void                    Deopt              !v    %51.3, DeadCall@0x56150544bac0[Call#24], %51.2   !
BB50   <- [176]
  void                    Nop                !     
  int$-           %50.1 = %42.2
  goto BB42
BB174   <- [130]
  val?^ | miss    %174.0 = LdVar              eR    X, e168.6
  val?            %174.1 = Force!<wrapped>    !v    %174.0, e168.6   <val?+>
  lgl$#-          %174.2 = CallSafeBuiltin    wed   is.object(%174.1)    <lgl$->
  lgl$-           %174.3 = LOr                      %172.3, %174.2
  lgl$-           %174.4 = %174.3
  goto BB58
BB175   <- [130]
  fs              %175.0 = FrameState         R     0x561504ec69c0+1798: [], env=e0.2
  fs              %175.1 = FrameState         R     0x5614fa849000+78: [], env=e168.6, next=%175.0
  prom-           %175.2 = MkArg                    %172.1, sparse.model.matrix[0x5615025540d0]_p63 (!refl), e168.6
  val?~           %175.3 = CastType                 up %175.2
  env             e175.4 = (MkEnv)            l     mode(miss)="any", x=%175.3, parent=R_BaseNamespace, context 0
  fs              %175.5 = FrameState         R     0x5614fa748820+41: [%172.2], env=e175.4, next=%175.1
  void                    Deopt              !v    %175.5, DeadBranchReached@0x5614fa864020[Test#0], %130.1   !
BB58   <- [57, 174]
  lgl$-           %58.0 = Phi                      %174.4:BB174, %57.1:BB57
  lgl$-           %58.1 = %58.0
  lgl$#-          %58.2 = CheckTrueFalse     e     %58.1
  void                    Branch                   %58.2 -> BB129 (if true) | BB61 (if false)
BB129   <- [58]
  val?^ | miss    %129.0 = LdVar              eR    as.list, e168.6
  lgl$#-          %129.1 = Identical                %129.0, function(x, ...) <(rir::DispatchTable*)0x5614f|...
  void                    Branch                   %129.1 -> BB178 (if true) | BB179 (if false)
BB61   <- [58]
  void                    Nop                !     
  goto BB62
BB178   <- [129]
  val?^ | miss    %178.0 = LdVar              eR    X, e168.6
  val?            %178.1 = Force!<wrapped>    !v    %178.0, e168.6   <vec>
  val?            %178.2 = StaticCall         !v    as.list[0x561505977210](%178.1) { 0 } e168.6   <vec>
  void                    StVar              lW    X, %178.2, e168.6
  goto BB62
BB179   <- [129]
  fs              %179.0 = FrameState         R     0x561504ec69c0+1798: [], env=e0.2
  fs              %179.1 = FrameState         R     0x5614fa849000+189: [%58.1], env=e168.6, next=%179.0
  void                    Deopt              !v    %179.1, CallTarget@0x5614fa864020[Call#3], %129.0   !
BB62   <- [61, 178]
  (cls|spec|blt)  %62.0 = LdFun              !v    .Internal, <0x5614f88a6698>, e168.6
  prom-           %62.1 = MkArg                    unboundValue, sparse.model.matrix[0x5615025540d0]_p64, e168.6
  val?            %62.2 = Call               !v    %62.0(%62.1) e168.6   <val?+>
  val?            %62.3 = PopContext         C     %62.2, %168.3   <lgl+>
  void                    StVar              lW    isF, %62.3, e0.2
  lgl$#-          %62.5 = IsType                   %62.3 isA lgl+
  val             %62.6 = ChkMissing         e     %62.3
  val?^ | miss    %62.7 = LdVar              eR    int, e0.2
  lgl$#-          %62.8 = IsType                   %62.7 isA int$-
  void                    Branch                   %62.8 -> BB180 (if true) | BB181 (if false)
BB180   <- [62]
  int$-           %180.0 = CastType           d     dn %62.7
  void                    Branch                   %62.5 -> BB182 (if true) | BB183 (if false)
BB181   <- [62]
  void                    Nop                !     
  val?^ | miss    %181.1 = %62.7
  dr              %181.2 = Typecheck@0x56150544bac0[Type#82]
  goto BB63
BB182   <- [180]
  lgl+            %182.0 = CastType           d     dn %62.3
  lgl+            %182.1 = Subassign1_1D      wed   false, %182.0, %180.0, elided
  void                    StVar              lW    isF, %182.1, e0.2
  val?^ | miss    %182.3 = LdVar              eR    vapply, e0.2
  lgl$#-          %182.4 = Identical                %182.3, function(X, FUN, FUN.VALUE, ..., USE.NAMES=TRU|...
  void                    Branch                   %182.4 -> BB184 (if true) | BB185 (if false)
BB183   <- [180]
  void                    Nop                !     
  val?            %183.1 = %62.3
  dr              %183.2 = Typecheck@0x56150544bac0[Type#80]
  goto BB63
BB63   <- [181, 183]
  val?^ | miss    %63.0 = Phi                      %181.1:BB181, %183.1:BB183
  val?^ | miss    %63.1 = %63.0
  dr              %63.2 = Phi                      %181.2:BB181, %183.2:BB183
  dr              %63.3 = %63.2
  fs              %63.4 = FrameState         R     0x561504ec69c0+1812: [], env=e0.2
  void                    Deopt              !v    %63.4, %63.3, %63.1   !
BB184   <- [182]
  prom-           %184.0 = MkArg                    unboundValue, sparse.model.matrix[0x5615025540d0]_p30, e0.2
  prom-           %184.1 = MkArg                    unboundValue, sparse.model.matrix[0x5615025540d0]_p31, e0.2
  ct              %184.2 = PushContext        lCL   %184.0, %184.1, na-lgl, vapply(data, is.ordered, NA), function(X, FUN, FUN.VALUE, ..., USE.NAMES=TRU|..., e0.2
  val?^           %184.3 = CastType                 up %184.1
  val?^           %184.4 = CastType                 up %184.0
  env             e184.5 = MkEnv              l     X=%184.4, FUN=%184.3, FUN.VALUE=na-lgl, ...(miss)=missingArg, USE.NAMES(miss)=true, parent=R_BaseNamespace, context 1
  prom-           %184.6 = MkArg                    unboundValue, sparse.model.matrix[0x5615025540d0]_p69, e184.5
  val?            %184.7 = StaticCall         !v    match.fun[0x56150002db30](%184.6) e184.5   <val?->
  void                    StVar              lW    FUN, %184.7, e184.5
  val?^ | miss    %184.9 = LdVar              eR    is.vector, e184.5
  lgl$#-          %184.10 = Identical                %184.9, function(x, mode="any") <(rir::DispatchTable*)|...
  void                    Branch                   %184.10 -> BB186 (if true) | BB187 (if false)
BB185   <- [182]
  fs              %185.0 = FrameState         R     0x561504ec69c0+1856: [], env=e0.2
  void                    Deopt              !v    %185.0, CallTarget@0x56150544bac0[Call#26], %182.3   !
BB186   <- [184]
  val?^ | miss    %186.0 = LdVar              eR    X, e184.5
  val?            %186.1 = Force!<lazy>       !v    %186.0, e184.5   <val?>
  lgl$#-          %186.2 = CallSafeBuiltin    wed   is.vector(%186.1, "any")    <lgl$->
  lgl$#-          %186.3 = Not                d     %186.2, elided
  void                    Branch                   %186.2 -> BB128 (if true) | BB71 (if false)
BB187   <- [184]
  fs              %187.0 = FrameState         R     0x561504ec69c0+1898: [], env=e0.2
  fs              %187.1 = FrameState         R     0x5614fa849000+46: [], env=e184.5, next=%187.0
  void                    Deopt              !v    %187.1, CallTarget@0x5614fa864020[Call#1], %184.9   !
BB128   <- [186]
  val?^ | miss    %128.0 = LdVar              eR    is.object, e184.5
  lgl$#-          %128.1 = Identical                <blt is.object>, %128.0   <true>
  void                    Branch                   %128.1 -> BB188 (if true) | BB189 (if false)
BB71   <- [186]
  void                    Nop                !     
  lgl$#-          %71.1 = %186.3
  goto BB72
BB188   <- [128]
  val?^ | miss    %188.0 = LdVar              eR    X, e184.5
  val?            %188.1 = Force!<wrapped>    !v    %188.0, e184.5   <val?+>
  lgl$#-          %188.2 = CallSafeBuiltin    wed   is.object(%188.1)    <lgl$->
  lgl$-           %188.3 = LOr                      %186.3, %188.2
  lgl$-           %188.4 = %188.3
  goto BB72
BB189   <- [128]
  fs              %189.0 = FrameState         R     0x561504ec69c0+1898: [], env=e0.2
  fs              %189.1 = FrameState         R     0x5614fa849000+78: [], env=e184.5, next=%189.0
  prom-           %189.2 = MkArg                    %186.1, sparse.model.matrix[0x5615025540d0]_p71 (!refl), e184.5
  val?~           %189.3 = CastType                 up %189.2
  env             e189.4 = (MkEnv)            l     mode(miss)="any", x=%189.3, parent=R_BaseNamespace, context 0
  fs              %189.5 = FrameState         R     0x5614fa748820+41: [%186.2], env=e189.4, next=%189.1
  void                    Deopt              !v    %189.5, DeadBranchReached@0x5614fa864020[Test#0], %128.1   !
BB72   <- [71, 188]
  lgl$-           %72.0 = Phi                      %188.4:BB188, %71.1:BB71
  lgl$-           %72.1 = %72.0
  lgl$#-          %72.2 = CheckTrueFalse     e     %72.1
  void                    Branch                   %72.2 -> BB127 (if true) | BB75 (if false)
BB127   <- [72]
  val?^ | miss    %127.0 = LdVar              eR    as.list, e184.5
  lgl$#-          %127.1 = Identical                %127.0, function(x, ...) <(rir::DispatchTable*)0x5614f|...
  void                    Branch                   %127.1 -> BB190 (if true) | BB191 (if false)
BB75   <- [72]
  void                    Nop                !     
  goto BB76
BB190   <- [127]
  val?^ | miss    %190.0 = LdVar              eR    X, e184.5
  val?            %190.1 = Force!<wrapped>    !v    %190.0, e184.5   <vec>
  val?            %190.2 = StaticCall         !v    as.list[0x561505977210](%190.1) { 0 } e184.5   <vec>
  void                    StVar              lW    X, %190.2, e184.5
  goto BB76
BB191   <- [127]
  fs              %191.0 = FrameState         R     0x561504ec69c0+1898: [], env=e0.2
  fs              %191.1 = FrameState         R     0x5614fa849000+189: [%72.1], env=e184.5, next=%191.0
  void                    Deopt              !v    %191.1, CallTarget@0x5614fa864020[Call#3], %127.0   !
BB76   <- [75, 190]
  (cls|spec|blt)  %76.0 = LdFun              !v    .Internal, <0x5614f88a6698>, e184.5
  prom-           %76.1 = MkArg                    unboundValue, sparse.model.matrix[0x5615025540d0]_p72, e184.5
  val?            %76.2 = Call               !v    %76.0(%76.1) e184.5   <val?+>
  val?            %76.3 = PopContext         C     %76.2, %184.2   <lgl+>
  void                    StVar              lW    isOF, %76.3, e0.2
  val?^ | miss    %76.5 = LdVar              eR    namD, e0.2
  lgl$#-          %76.6 = IsType                   %76.5 isA val?~- | miss
  void                    Branch                   %76.6 -> BB192 (if true) | BB193 (if false)
BB192   <- [76]
  val?~- | miss   %192.0 = CastType           d     dn %76.5
  val?-           %192.1 = Force!<value>            %192.0,    <str->
  lgl$#-          %192.2 = IsType                   %192.1 isA val+   <true>
  void                    Branch                   %192.2 -> BB194 (if true) | BB195 (if false)
BB193   <- [76]
  void                    Nop                !     
  val?^ | miss    %193.1 = %76.5
  dr              %193.2 = Typecheck@0x56150544bac0[Type#86]
  goto BB77
BB194   <- [192]
  val?^ | miss    %194.0 = LdVar              eR    isF, e0.2
  lgl$#-          %194.1 = IsType                   %194.0 isA lgl+
  void                    Branch                   %194.1 -> BB196 (if true) | BB197 (if false)
BB195   <- [192]
  void                    Nop                !     
  lgl$#-          %195.1 = %192.2
  dr              %195.2 = DeadBranchReached@0x56150544bac0[Test#16]
  goto BB77
BB77   <- [193, 195, 197]
  val?^ | miss    %77.0 = Phi                      %193.1:BB193, %195.1:BB195, %197.1:BB197
  val?^ | miss    %77.1 = %77.0
  dr              %77.2 = Phi                      %193.2:BB193, %195.2:BB195, %197.2:BB197
  dr              %77.3 = %77.2
  fs              %77.4 = FrameState         R     0x561504ec69c0+1912: [], env=e0.2
  void                    Deopt              !v    %77.4, %77.3, %77.1   !
BB196   <- [194]
  lgl+            %196.0 = CastType           d     dn %194.0
  val?            %196.1 = Extract1_1D        wed   %192.1, %196.0, elided   <str->
  val?+           %196.2 = ToForSeq           e     %196.1
  int$-           %196.3 = Length                   %196.2
  lgl$-           %196.4 = Lt                 d     %196.3, %160.7, elided
  lgl$#-          %196.5 = Identical                %196.4, true
  void                    Branch                   %196.5 -> BB126 (if true) | BB79 (if false)
BB197   <- [194]
  void                    Nop                !     
  val?^ | miss    %197.1 = %194.0
  dr              %197.2 = Typecheck@0x56150544bac0[Type#88]
  goto BB77
BB126   <- [196]
  void                    Nop                !     
  goto BB95
BB79   <- [196]
  val?            %79.0 = Extract2_1D        wed   %196.2, %160.7, elided
  void                    StVar              lW    nn, %79.0, e0.2
  val?^ | miss    %79.2 = LdVar              eR    attr, e0.2
  lgl$#-          %79.3 = Identical                <blt attr>, %79.2   <true>
  void                    Branch                   %79.3 -> BB198 (if true) | BB199 (if false)
BB95   <- [94, 126]
  val?^ | miss    %95.0 = LdVar              eR    contrasts.arg, e0.2
  val?            %95.1 = Force!<lazy>       !v    %95.0, e0.2   <(nil|vec)+>
  lgl$-           %95.2 = Is                       %95.1, NULL
  lgl$-           %95.3 = Not                d     %95.2, elided
  lgl$-           %95.4 = AsLogical                %95.3
  lgl$#-          %95.5 = Identical                %95.4, false
  void                    Branch                   %95.5 -> BB124 (if true) | BB96 (if false)
BB198   <- [79]
  val?^ | miss    %198.0 = LdVar              eR    data, e0.2
  val?            %198.1 = Force!<value>      !v    %198.0, e0.2   <vec>
  lgl$#-          %198.2 = IsType                   %198.1 isA val+   <false>
  void                    Branch                   %198.2 -> BB201 (if true) | BB200 (if false)
BB199   <- [79]
  fs              %199.0 = FrameState         R     0x561504ec69c0+2018: [%196.2, %196.3, %160.7], env=e0.2
  void                    Deopt              !v    %199.0, DeadBranchReached@0x56150544bac0[Test#18], %79.3   !
BB124   <- [95]
  void                    Nop                !     
  lgl$-           %124.1 = %95.4
  goto BB97
BB96   <- [95]
  val?^ | miss    %96.0 = LdVar              eR    contrasts.arg, e0.2
  val?            %96.1 = Force!<wrapped>    !v    %96.0, e0.2   <vec$+>
  lgl$-           %96.2 = Is                       %96.1, list
  lgl$-           %96.3 = AsLogical                %96.2
  lgl$-           %96.4 = LAnd                     %95.4, %96.3
  lgl$-           %96.5 = %96.4
  goto BB97
BB201   <- [198]
  fs              %201.0 = FrameState         R     0x561504ec69c0+2092: [%196.2, %196.3, %160.7, <blt attr>, %198.1], env=e0.2
  void                    Deopt              !v    %201.0, DeadBranchReached@0x56150544bac0[Test#20], %198.2   !
BB200   <- [198]
  prom-           %200.0 = MkArg                    unboundValue, sparse.model.matrix[0x5615025540d0]_p32, e0.2
  val?            %200.1 = Extract2_1D        !v    %198.1, %200.0, e0.2   <int>
  val?            %200.2 = CallBuiltin        !v    attr(%200.1, "contrasts") e0.2   <nil->
  lgl$-           %200.3 = Is                       %200.2, NULL
  lgl$#-          %200.4 = CheckTrueFalse     e     %200.3
  void                    Branch                   %200.4 -> BB125 (if true) | BB84 (if false)
BB97   <- [124, 96]
  lgl$-           %97.0 = Phi                      %96.5:BB96, %124.1:BB124
  lgl$-           %97.1 = %97.0
  lgl$#-          %97.2 = CheckTrueFalse     e     %97.1
  void                    Branch                   %97.2 -> BB101 (if true) | BB100 (if false)
BB125   <- [200]
  (cls|spec|blt)  %125.0 = LdFun              !v    <-, <0x5614f889bda8>, e0.2
  prom-           %125.1 = MkArg                    unboundValue, sparse.model.matrix[0x5615025540d0]_p48, e0.2
  prom-           %125.2 = MkArg                    unboundValue, sparse.model.matrix[0x5615025540d0]_p51, e0.2
  val?            %125.3 = Call               !v    %125.0(%125.1, %125.2) e0.2
  int$-           %125.4 = %160.7
  goto BB85
BB84   <- [200]
  void                    Nop                !     
  int$-           %84.1 = %160.7
  goto BB85
BB101   <- [97]
  val?^ | miss    %101.0 = LdVar              eR    names, e0.2
  lgl$#-          %101.1 = Identical                <blt names>, %101.0   <true>
  void                    Branch                   %101.1 -> BB202 (if true) | BB203 (if false)
BB100   <- [97]
  void                    Nop                !     
  goto BB21
BB85   <- [84, 125, 92]
  int$-           %85.0 = Phi                      %84.1:BB84, %92.1:BB92, %125.4:BB125
  int$-           %85.1 = %85.0
  int$-           %85.2 = Inc                      %85.1
  lgl$-           %85.3 = Lt                 d     %196.3, %85.2, elided
  lgl$#-          %85.4 = Identical                %85.3, true
  void                    Branch                   %85.4 -> BB94 (if true) | BB86 (if false)
BB202   <- [101]
  val?^ | miss    %202.0 = LdVar              eR    contrasts.arg, e0.2
  val?            %202.1 = Force!<wrapped>    !v    %202.0, e0.2   <vec$+>
  lgl$#-          %202.2 = IsType                   %202.1 isA val?+
  void                    Branch                   %202.2 -> BB204 (if true) | BB205 (if false)
BB203   <- [101]
  fs              %203.0 = FrameState         R     0x561504ec69c0+2531: [%97.1], env=e0.2
  void                    Deopt              !v    %203.0, DeadBranchReached@0x56150544bac0[Test#32], %101.1   !
BB94   <- [85]
  void                    Nop                !     
  goto BB95
BB86   <- [85]
  val?            %86.0 = Extract2_1D        wed   %196.2, %85.2, elided
  void                    StVar              lW    nn, %86.0, e0.2
  val?^ | miss    %86.2 = LdVar              eR    attr, e0.2
  lgl$#-          %86.3 = Identical                <blt attr>, %86.2   <true>
  void                    Branch                   %86.3 -> BB206 (if true) | BB207 (if false)
BB204   <- [202]
  val?+           %204.0 = CastType           d     dn %202.1   <vec$+>
  val+            %204.1 = CallSafeBuiltin    wed   names(%204.0)    <str$->
  lgl$-           %204.2 = Is                       %204.1, NULL
  void                    StVar              lW    namC, %204.1, e0.2
  int$-           %204.4 = Length                   %204.1
  lgl$#-          %204.5 = CheckTrueFalse     e     %204.2
  void                    Branch                   %204.5 -> BB123 (if true) | BB106 (if false)
BB205   <- [202]
  fs              %205.0 = FrameState         R     0x561504ec69c0+2611: [<blt names>, %202.1], env=e0.2
  void                    Deopt              !v    %205.0, Typecheck@0x56150544bac0[Type#145], %202.1   !
BB206   <- [86]
  val?^ | miss    %206.0 = LdVar              eR    data, e0.2
  val?            %206.1 = Force!<value>      !v    %206.0, e0.2   <vec>
  lgl$#-          %206.2 = IsType                   %206.1 isA val+   <false>
  void                    Branch                   %206.2 -> BB209 (if true) | BB208 (if false)
BB207   <- [86]
  fs              %207.0 = FrameState         R     0x561504ec69c0+2260: [%196.2, %196.3, %85.2], env=e0.2
  void                    Deopt              !v    %207.0, DeadBranchReached@0x56150544bac0[Test#25], %86.3   !
BB123   <- [204]
  (cls|spec|blt)  %123.0 = LdFun              !v    stop, e0.2
  fs              %123.1 = FrameState         R     0x561504ec69c0+2670: [%123.0], env=e0.2
  void                    Deopt              !v    %123.1, DeadCall@0x56150544bac0[Call#34], %123.0   !
BB106   <- [204]
  lgl$-           %106.0 = Lt                 d     %204.4, %160.7, elided   <false>
  lgl$#-          %106.1 = Identical                %106.0, true
  void                    Branch                   %106.1 -> BB211 (if true) | BB210 (if false)
BB209   <- [206]
  fs              %209.0 = FrameState         R     0x561504ec69c0+2334: [%196.2, %196.3, %85.2, <blt attr>, %206.1], env=e0.2
  void                    Deopt              !v    %209.0, DeadBranchReached@0x56150544bac0[Test#27], %206.2   !
BB208   <- [206]
  prom-           %208.0 = MkArg                    unboundValue, sparse.model.matrix[0x5615025540d0]_p33, e0.2
  val?            %208.1 = Extract2_1D        !v    %206.1, %208.0, e0.2   <int>
  val?            %208.2 = CallBuiltin        !v    attr(%208.1, "contrasts") e0.2   <nil->
  lgl$-           %208.3 = Is                       %208.2, NULL
  lgl$#-          %208.4 = CheckTrueFalse     e     %208.3
  void                    Branch                   %208.4 -> BB93 (if true) | BB91 (if false)
BB211   <- [106]
  fs              %211.0 = FrameState         R     0x561504ec69c0+2649: [%204.1], env=e0.2
  void                    Deopt              !v    %211.0, DeadBranchReached@0x56150544bac0[Test#33], %106.1   !
BB210   <- [106]
  val?            %210.0 = Extract2_1D        wed   %204.1, %160.7, elided   <val?+>
  void                    StVar              lW    nn, %210.0, e0.2
  lgl$#-          %210.2 = IsType                   %210.0 isA val?+
  val?^ | miss    %210.3 = LdVar              eR    is.na, e0.2
  lgl$#-          %210.4 = Identical                <blt is.na>, %210.3   <true>
  void                    Branch                   %210.4 -> BB212 (if true) | BB213 (if false)
BB93   <- [208]
  (cls|spec|blt)  %93.0 = LdFun              !v    <-, <0x5614f889bda8>, e0.2
  prom-           %93.1 = MkArg                    unboundValue, sparse.model.matrix[0x5615025540d0]_p34, e0.2
  prom-           %93.2 = MkArg                    unboundValue, sparse.model.matrix[0x5615025540d0]_p37, e0.2
  val?            %93.3 = Call               !v    %93.0(%93.1, %93.2) e0.2
  goto BB92
BB91   <- [208]
  void                    Nop                !     
  goto BB92
BB212   <- [210]
  val?^ | miss    %212.0 = LdVar              eR    match, e0.2
  lgl$#-          %212.1 = Identical                %212.0, function(x, table, nomatch=NA, incomparables=N|...
  void                    Branch                   %212.1 -> BB214 (if true) | BB215 (if false)
BB213   <- [210]
  void                    Nop                !     
  lgl$#-          %213.1 = %210.4
  dr              %213.2 = DeadBranchReached@0x56150544bac0[Test#34]
  goto BB107
BB92   <- [91, 93]
  void                    Nop                !     
  int$-           %92.1 = %85.2
  goto BB85
BB214   <- [212]
  val?^ | miss    %214.0 = LdVar              eR    namD, e0.2
  lgl$#-          %214.1 = IsType                   %214.0 isA val?~- | miss
  void                    Branch                   %214.1 -> BB216 (if true) | BB217 (if false)
BB215   <- [212]
  void                    Nop                !     
  val?^ | miss    %215.1 = %212.0
  dr              %215.2 = CallTarget@0x56150544bac0[Call#37]
  goto BB107
BB107   <- [213, 215, 217, 219]
  val?^ | miss    %107.0 = Phi                      %213.1:BB213, %215.1:BB215, %217.1:BB217, %219.1:BB219
  val?^ | miss    %107.1 = %107.0
  dr              %107.2 = Phi                      %213.2:BB213, %215.2:BB215, %217.2:BB217, %219.2:BB219
  dr              %107.3 = %107.2
  fs              %107.4 = FrameState         R     0x561504ec69c0+2752: [%204.1, %204.4, %160.7], env=e0.2
  void                    Deopt              !v    %107.4, %107.3, %107.1   !
BB216   <- [214]
  val?~- | miss   %216.0 = CastType           d     dn %214.0
  val?-           %216.1 = Force!<value>            %216.0,    <str->
  void                    Branch                   %210.2 -> BB218 (if true) | BB219 (if false)
BB217   <- [214]
  void                    Nop                !     
  val?^ | miss    %217.1 = %214.0
  dr              %217.2 = Typecheck@0x56150544bac0[Type#152]
  goto BB107
BB218   <- [216]
  val?+           %218.0 = CastType           d     dn %210.0
  val+            %218.1 = CallSafeBuiltin    wed   match(%218.0, %216.1, NA, nil)    <int$->
  lgl$#-          %218.2 = IsType                   %218.1 isA int$-
  void                    Branch                   %218.2 -> BB220 (if true) | BB221 (if false)
BB219   <- [216]
  void                    Nop                !     
  val?            %219.1 = %210.0
  dr              %219.2 = Typecheck@0x5614f910ecb0[Type#0]
  goto BB107
BB220   <- [218]
  int$-           %220.0 = CastType           d     dn %218.1
  void                    StVar              lW    ni, %220.0, e0.2
  lgl$-           %220.2 = CallSafeBuiltin    wed   is.na(%220.0)    <lgl$->
  lgl$#-          %220.3 = CheckTrueFalse     e     %220.2
  void                    Branch                   %220.3 -> BB122 (if true) | BB111 (if false)
BB221   <- [218]
  fs              %221.0 = FrameState         R     0x561504ec69c0+2849: [%204.1, %204.4, %160.7, <blt is.na>], env=e0.2
  prom-           %221.1 = MkArg                    unboundValue, sparse.model.matrix[0x5615025540d0]_p41 (!refl), e0.2
  val?^           %221.2 = CastType                 up %221.1
  prom-           %221.3 = MkArg                    %216.1, sparse.model.matrix[0x5615025540d0]_p42 (!refl), e0.2
  val?~           %221.4 = CastType                 up %221.3
  env             e221.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%221.4, x=%221.2, parent=R_BaseNamespace, context 0
  fs              %221.6 = FrameState         R     0x5614f90bbd40+69: [%218.1], env=e221.5, next=%221.0
  void                    Deopt              !v    %221.6, Typecheck@0x56150544bac0[Type#153], %218.1   !
BB122   <- [220]
  (cls|spec|blt)  %122.0 = LdFun              !v    warning, e0.2
  fs              %122.1 = FrameState         R     0x561504ec69c0+3161: [%204.1, %204.4, %160.7, %122.0], env=e0.2
  void                    Deopt              !v    %122.1, DeadCall@0x56150544bac0[Call#44], %122.0   !
BB111   <- [220]
  val?^ | miss    %111.0 = LdVar              eR    contrasts.arg, e0.2
  val?            %111.1 = Force!<wrapped>    !v    %111.0, e0.2   <vec$+>
  lgl$#-          %111.2 = IsType                   %111.1 isA val+   <true>
  lgl$#-          %111.3 = IsType                   %111.1 isA val?+
  void                    Branch                   %111.2 -> BB222 (if true) | BB223 (if false)
BB222   <- [111]
  val?^ | miss    %222.0 = LdVar              eR    nn, e0.2
  lgl$#-          %222.1 = IsType                   %222.0 isA val?~- | miss
  void                    Branch                   %222.1 -> BB224 (if true) | BB225 (if false)
BB223   <- [111]
  void                    Nop                !     
  lgl$#-          %223.1 = %111.2
  dr              %223.2 = DeadBranchReached@0x56150544bac0[Test#35]
  goto BB112
BB224   <- [222]
  val?~- | miss   %224.0 = CastType           d     dn %222.0
  val?-           %224.1 = Force!<value>            %224.0,    <str$->
  void                    Branch                   %111.3 -> BB226 (if true) | BB227 (if false)
BB225   <- [222]
  void                    Nop                !     
  val?^ | miss    %225.1 = %222.0
  dr              %225.2 = Typecheck@0x56150544bac0[Type#157]
  goto BB112
BB112   <- [223, 225, 227]
  val?^ | miss    %112.0 = Phi                      %223.1:BB223, %225.1:BB225, %227.1:BB227
  val?^ | miss    %112.1 = %112.0
  dr              %112.2 = Phi                      %223.2:BB223, %225.2:BB225, %227.2:BB227
  dr              %112.3 = %112.2
  fs              %112.4 = FrameState         R     0x561504ec69c0+2902: [%204.1, %204.4, %160.7, %111.1], env=e0.2
  void                    Deopt              !v    %112.4, %112.3, %112.1   !
BB226   <- [224]
  val?+           %226.0 = CastType           d     dn %111.1   <vec$+>
  val?            %226.1 = Extract2_1D        wed   %226.0, %224.1, elided   <str$->
  void                    StVar              lW    ca, %226.1, e0.2
  lgl$#-          %226.3 = IsType                   %226.1 isA val?-
  val?^ | miss    %226.4 = LdVar              eR    is.matrix, e0.2
  lgl$#-          %226.5 = Identical                <blt is.matrix>, %226.4   <true>
  void                    Branch                   %226.5 -> BB228 (if true) | BB229 (if false)
BB227   <- [224]
  void                    Nop                !     
  val?            %227.1 = %111.1
  dr              %227.2 = Typecheck@0x56150544bac0[Type#155]
  goto BB112
BB228   <- [226]
  val             %228.0 = ChkMissing         e     %226.1
  void                    Branch                   %226.3 -> BB230 (if true) | BB231 (if false)
BB229   <- [226]
  void                    Nop                !     
  lgl$#-          %229.1 = %226.5
  dr              %229.2 = DeadBranchReached@0x56150544bac0[Test#36]
  goto BB114
BB230   <- [228]
  val?-           %230.0 = CastType           d     dn %226.1   <str$->
  lgl$#-          %230.1 = CallSafeBuiltin    wed   is.matrix(%230.0)    <lgl$->
  void                    Branch                   %230.1 -> BB121 (if true) | BB116 (if false)
BB231   <- [228]
  void                    Nop                !     
  val?            %231.1 = %226.1
  dr              %231.2 = Typecheck@0x56150544bac0[Type#158]
  goto BB114
BB114   <- [229, 231]
  val?^ | miss    %114.0 = Phi                      %229.1:BB229, %231.1:BB231
  val?^ | miss    %114.1 = %114.0
  dr              %114.2 = Phi                      %229.2:BB229, %231.2:BB231
  dr              %114.3 = %114.2
  fs              %114.4 = FrameState         R     0x561504ec69c0+2968: [%204.1, %204.4, %160.7], env=e0.2
  void                    Deopt              !v    %114.4, %114.3, %114.1   !
BB121   <- [230]
  (cls|spec|blt)  %121.0 = LdFun              !v    <-, e0.2
  fs              %121.1 = FrameState         R     0x561504ec69c0+3118: [%204.1, %204.4, %160.7, %121.0], env=e0.2
  void                    Deopt              !v    %121.1, DeadCall@0x56150544bac0[Call#41], %121.0   !
BB116   <- [230]
  (cls|spec|blt)  %116.0 = LdFun              !v    <-, <0x5614f889bda8>, e0.2
  prom-           %116.1 = MkArg                    unboundValue, sparse.model.matrix[0x5615025540d0]_p43, e0.2
  prom-           %116.2 = MkArg                    unboundValue, sparse.model.matrix[0x5615025540d0]_p46, e0.2
  val?            %116.3 = Call               !v    %116.0(%116.1, %116.2) e0.2
  int$-           %116.4 = Inc                      %160.7
  lgl$-           %116.5 = Lt                 d     %204.4, %116.4, elided
  lgl$#-          %116.6 = Identical                %116.5, true
  void                    Branch                   %116.6 -> BB120 (if true) | BB117 (if false)
BB120   <- [116]
  void                    Nop                !     
  goto BB21
BB117   <- [116]
  val?            %117.0 = Extract2_1D        wed   %204.1, %116.4, elided
  void                    StVar              lW    nn, %117.0, e0.2
  val?^ | miss    %117.2 = LdVar              eR    is.na, e0.2
  lgl$#-          %117.3 = Identical                <blt is.na>, %117.2   <@?>
  void                    Branch                   %117.3 -> BB119 (if true) | BB118 (if false)
BB119   <- [117]
  (cls|spec|blt)  %119.0 = LdFun              !v    match, e0.2
  fs              %119.1 = FrameState         R     0x561504ec69c0+3296: [%204.1, %204.4, %116.4, <blt is.na>, %119.0], env=e0.2
  void                    Deopt              !v    %119.1, DeadCall@0x56150544bac0[Call#48], %119.0   !
BB118   <- [117]
  (cls|spec|blt)  %118.0 = LdFun              !v    is.na, e0.2
  fs              %118.1 = FrameState         R     0x561504ec69c0+3259: [%204.1, %204.4, %116.4, %118.0], env=e0.2
  void                    Deopt              !v    %118.1, DeadCall@0x56150544bac0[Call#46], %118.0   !
Prom 7:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    object, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <code>
  void                    Return             l     %0.3
Prom 8:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    data, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <vec>
  void                    Return             l     %0.3
Prom 10:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    object, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <code>
  void                    Return             l     %0.3
Prom 11:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    data, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <vec>
  void                    Return             l     %0.3
Prom 12:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    xlev, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <nil->
  void                    Return             l     %0.3
Prom 14:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    data, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <vec>
  void                    Return             l     %0.3
Prom 15:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    t, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <code>
  void                    Return             l     %0.3
Prom 16:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    data, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <vec>
  void                    Return             l     %0.3
Prom 17:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    transpose, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <lgl$->
  void                    Return             l     %0.3
Prom 18:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    drop.unused.levels, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <lgl$->
  void                    Return             l     %0.3
Prom 19:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    row.names, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <lgl$->
  void                    Return             l     %0.3
Prom 20:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    sep, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 21:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    verbose, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <lgl$->
  void                    Return             l     %0.3
Prom 22:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    data, e0.0
  val?            %0.2  = Force<value>       !v    %0.1, e0.0   <vec>
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <false>
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    isF, e0.0
  val?            %2.1  = Force              !v    %2.0, e0.0   <val?_>
  val?            %2.2  = %2.1
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, sparse.model.matrix[0x5615025540d0]_p23, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.2:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract1_1D        !v    %0.2, %3.1, e0.0   <vec>
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 23:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    isF, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <lgl+>
  void                    Return             l     %0.3
Prom 24:
BB0
  env             e0.0  = LdFunctionEnv            
  cls             %0.1  = MkCls                    sparse.model.matrix@Prom(24)0, e0.0
  void                    Return             l     %0.1
Prom 26:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    i, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 27:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    i, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 28:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    data, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <vec>
  void                    Return             l     %0.3
Prom 29:
BB0
  env             e0.0  = LdFunctionEnv            
  cls             %0.1  = MkCls                    sparse.model.matrix@Prom(29)0, e0.0
  void                    Return             l     %0.1
Prom 30:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    data, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <vec>
  void                    Return             l     %0.3
Prom 31:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    is.ordered, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <cls->
  void                    Return             l     %0.3
Prom 32:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    nn, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 33:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    nn, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 34:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     contrasts, e0.0
  prom-           %0.2  = MkArg                    unboundValue, sparse.model.matrix[0x5615025540d0]_p35, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 35:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    data, e0.0
  val?            %0.2  = Force              !v    %0.1, e0.0   <val?_>
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <@?>
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    nn, e0.0
  val?            %2.1  = Force              !v    %2.0, e0.0   <val?_>
  val?            %2.2  = %2.1
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, sparse.model.matrix[0x5615025540d0]_p36, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.2:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract2_1D        !v    %0.2, %3.1, e0.0   <val?_>
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 36:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    nn, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 37:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    contr.funs, e0.0
  val?            %0.2  = Force              !v    %0.1, e0.0   <val?_>
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <@?>
  void                    Branch                   %0.3 -> BB2 (if true) | BB7 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    isOF, e0.0
  val?            %2.1  = Force              !v    %2.0, e0.0   <val?_>
  lgl$#-          %2.2  = IsType                   %2.1 isA val+   <@?>
  void                    Branch                   %2.2 -> BB6 (if true) | BB3 (if false)
BB7   <- [0]
  prom-           %7.0  = MkArg                    unboundValue, sparse.model.matrix[0x5615025540d0]_p39, e0.0
  prom-           %7.1  = %7.0
  goto BB5
BB6   <- [2]
  val?^ | miss    %6.0  = LdVar              eR    nn, e0.0
  val?            %6.1  = Force              !v    %6.0, e0.0   <val?_>
  val?            %6.2  = %6.1
  goto BB4
BB3   <- [2]
  prom-           %3.0  = MkArg                    unboundValue, sparse.model.matrix[0x5615025540d0]_p38, e0.0
  prom-           %3.1  = %3.0
  goto BB4
BB5   <- [7, 4]
  val?            %5.0  = Phi                      %4.4:BB4, %7.1:BB7
  val?            %5.1  = %5.0
  val?            %5.2  = Extract1_1D        !v    %0.2, %5.1, e0.0   <val?_>
  void                    Visible            v     
  void                    Return             l     %5.2
BB4   <- [3, 6]
  val?            %4.0  = Phi                      %6.2:BB6, %3.1:BB3
  val?            %4.1  = %4.0
  val?            %4.2  = Extract1_1D        !v    %2.1, %4.1, e0.0   <val?_>
  val?            %4.3  = Add                !v    1, %4.2, e0.0   <val?_>
  val?            %4.4  = %4.3
  goto BB5
Prom 38:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    nn, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 39:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    isOF, e0.0
  val?            %0.2  = Force              !v    %0.1, e0.0   <val?_>
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <@?>
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    nn, e0.0
  val?            %2.1  = Force              !v    %2.0, e0.0   <val?_>
  val?            %2.2  = %2.1
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, sparse.model.matrix[0x5615025540d0]_p40, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.2:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract1_1D        !v    %0.2, %3.1, e0.0   <val?_>
  void                    Visible            v     
  val?            %3.4  = Add                !     1, %3.2, e0.0   <val?_>
  void                    Return             l     %3.4
Prom 40:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    nn, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 41:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    nn, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 42:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    namD, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 43:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     contrasts, e0.0
  prom-           %0.2  = MkArg                    unboundValue, sparse.model.matrix[0x5615025540d0]_p44, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 44:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    data, e0.0
  val?            %0.2  = Force              !v    %0.1, e0.0   <val?_>
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <@?>
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    ni, e0.0
  val?            %2.1  = Force              !v    %2.0, e0.0   <val?_>
  val?            %2.2  = %2.1
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, sparse.model.matrix[0x5615025540d0]_p45, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.2:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract2_1D        !v    %0.2, %3.1, e0.0   <val?_>
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 45:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    ni, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 46:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    contrasts.arg, e0.0
  val?            %0.2  = Force              !v    %0.1, e0.0   <val?_>
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <@?>
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    nn, e0.0
  val?            %2.1  = Force              !v    %2.0, e0.0   <val?_>
  val?            %2.2  = %2.1
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, sparse.model.matrix[0x5615025540d0]_p47, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.2:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract2_1D        !v    %0.2, %3.1, e0.0   <val?_>
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 47:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    nn, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 48:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     contrasts, e0.0
  prom-           %0.2  = MkArg                    unboundValue, sparse.model.matrix[0x5615025540d0]_p49, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 49:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    data, e0.0
  val?            %0.2  = Force              !v    %0.1, e0.0   <val?_>
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <@?>
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    nn, e0.0
  val?            %2.1  = Force              !v    %2.0, e0.0   <val?_>
  val?            %2.2  = %2.1
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, sparse.model.matrix[0x5615025540d0]_p50, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.2:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract2_1D        !v    %0.2, %3.1, e0.0   <val?_>
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 50:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    nn, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 51:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    contr.funs, e0.0
  val?            %0.2  = Force              !v    %0.1, e0.0   <val?_>
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <@?>
  void                    Branch                   %0.3 -> BB2 (if true) | BB7 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    isOF, e0.0
  val?            %2.1  = Force              !v    %2.0, e0.0   <val?_>
  lgl$#-          %2.2  = IsType                   %2.1 isA val+   <@?>
  void                    Branch                   %2.2 -> BB6 (if true) | BB3 (if false)
BB7   <- [0]
  prom-           %7.0  = MkArg                    unboundValue, sparse.model.matrix[0x5615025540d0]_p53, e0.0
  prom-           %7.1  = %7.0
  goto BB5
BB6   <- [2]
  val?^ | miss    %6.0  = LdVar              eR    nn, e0.0
  val?            %6.1  = Force              !v    %6.0, e0.0   <val?_>
  val?            %6.2  = %6.1
  goto BB4
BB3   <- [2]
  prom-           %3.0  = MkArg                    unboundValue, sparse.model.matrix[0x5615025540d0]_p52, e0.0
  prom-           %3.1  = %3.0
  goto BB4
BB5   <- [7, 4]
  val?            %5.0  = Phi                      %4.4:BB4, %7.1:BB7
  val?            %5.1  = %5.0
  val?            %5.2  = Extract1_1D        !v    %0.2, %5.1, e0.0   <val?_>
  void                    Visible            v     
  void                    Return             l     %5.2
BB4   <- [3, 6]
  val?            %4.0  = Phi                      %6.2:BB6, %3.1:BB3
  val?            %4.1  = %4.0
  val?            %4.2  = Extract1_1D        !v    %2.1, %4.1, e0.0   <val?_>
  val?            %4.3  = Add                !v    1, %4.2, e0.0   <val?_>
  val?            %4.4  = %4.3
  goto BB5
Prom 52:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    nn, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 53:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    isOF, e0.0
  val?            %0.2  = Force              !v    %0.1, e0.0   <val?_>
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <@?>
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    nn, e0.0
  val?            %2.1  = Force              !v    %2.0, e0.0   <val?_>
  val?            %2.2  = %2.1
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, sparse.model.matrix[0x5615025540d0]_p54, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.2:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract1_1D        !v    %0.2, %3.1, e0.0   <val?_>
  void                    Visible            v     
  val?            %3.4  = Add                !     1, %3.2, e0.0   <val?_>
  void                    Return             l     %3.4
Prom 54:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    nn, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 56:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     cbind, e0.0
  prom-           %0.2  = MkArg                    unboundValue, sparse.model.matrix[0x5615025540d0]_p57, e0.0
  (miss|dots)     %0.3  = LdDots             R     , e0.0
  *dots-          %0.4  = ExpandDots               %0.3
  val?            %0.5  = NamedCall          !     %0.1(%0.2, .xpandDotsTrigger=%0.4) e0.0   <val?_>
  void                    Return             l     %0.5
Prom 57:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    deparse.level, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 61:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    FUN, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <val?->
  void                    Return             l     %0.3
Prom 63:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    X, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <val?>
  void                    Return             l     %0.3
Prom 64:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     vapply, e0.0
  prom-           %0.2  = MkArg                    unboundValue, sparse.model.matrix[0x5615025540d0]_p65, e0.0
  prom-           %0.3  = MkArg                    unboundValue, sparse.model.matrix[0x5615025540d0]_p66, e0.0
  prom-           %0.4  = MkArg                    unboundValue, sparse.model.matrix[0x5615025540d0]_p67, e0.0
  prom-           %0.5  = MkArg                    unboundValue, sparse.model.matrix[0x5615025540d0]_p68, e0.0
  val?            %0.6  = Call               !     %0.1(%0.2, %0.3, %0.4, %0.5) e0.0   <val?_>
  void                    Return             l     %0.6
Prom 65:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    X, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 66:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    FUN, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 67:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    FUN.VALUE, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 68:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    USE.NAMES, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 69:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    FUN, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <val?->
  void                    Return             l     %0.3
Prom 71:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    X, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <val?>
  void                    Return             l     %0.3
Prom 72:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     vapply, e0.0
  prom-           %0.2  = MkArg                    unboundValue, sparse.model.matrix[0x5615025540d0]_p73, e0.0
  prom-           %0.3  = MkArg                    unboundValue, sparse.model.matrix[0x5615025540d0]_p74, e0.0
  prom-           %0.4  = MkArg                    unboundValue, sparse.model.matrix[0x5615025540d0]_p75, e0.0
  prom-           %0.5  = MkArg                    unboundValue, sparse.model.matrix[0x5615025540d0]_p76, e0.0
  val?            %0.6  = Call               !     %0.1(%0.2, %0.3, %0.4, %0.5) e0.0   <val?_>
  void                    Return             l     %0.6
Prom 73:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    X, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 74:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    FUN, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 75:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    FUN.VALUE, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 76:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    USE.NAMES, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3

│ sparse.model.matrix[0x5615025540d0]                                          │
└──────────────────────────────────────────────────────────────────────────────┘
