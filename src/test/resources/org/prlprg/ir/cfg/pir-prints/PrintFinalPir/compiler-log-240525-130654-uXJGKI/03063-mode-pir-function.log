
┌──────────────────────────────────────────────────────────────────────────────┐
│ mode[0x5614faa05430]                                                         │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;Eager0,NonRefl0                      │
│ Properties:  Eager, ForceOrd: 0                                              │
├────── Final PIR Version
mode[0x5614faa05430]
BB0
  val?^           %0.0  = LdArg                    0
  val?            %0.1  = Force!<lazy>             %0.0,    <val?+>
  lgl$#-          %0.2  = IsType                   %0.1 isA val?+
  void                    Branch                   %0.2 -> BB36 (if true) | BB37 (if false)
BB36   <- [0]
  val?+           %36.0 = CastType           d     dn %0.1
  lgl$#-          %36.1 = CallSafeBuiltin    wed   is.expression(%36.0)    <lgl$->
  env             e36.2 = MkEnv              l     x=%0.0, parent=R_BaseNamespace, context 1
  void                    Branch                   %36.1 -> BB34 (if true) | BB5 (if false)
BB37   <- [0]
  env             e37.0 = (MkEnv)            l     x=%0.0, parent=R_BaseNamespace, context 1
  fs              %37.1 = FrameState         R     0x5614fd241ad0+69: [<blt is.expression>, %0.1], env=e37.0
  void                    Deopt              !v    %37.1, Typecheck@0x561504e641e8[Type#1], %0.1
BB34   <- [36]
  void                    Visible            v     
  str$#-          %34.1 = "expression"
  goto BB16
BB5   <- [36]
  lgl$#-          %5.0  = IsType                   %0.0 isA val?~+
  void                    Branch                   %5.0 -> BB38 (if true) | BB39 (if false)
BB16   <- [34, 15, 66]
  str$-           %16.0 = Phi                      %15.2:BB15, %66.1:BB66, %34.1:BB34
  str$-           %16.1 = %16.0
  void                    Return             l     %16.1
BB38   <- [5]
  lgl$#-          %38.0 = CallSafeBuiltin    wed   is.call(%36.0)    <lgl$->
  void                    Branch                   %38.0 -> BB21 (if true) | BB6 (if false)
BB39   <- [5]
  env             e39.0 = (MkEnv)            l     x=%0.0, parent=R_BaseNamespace, context 1
  fs              %39.1 = FrameState         R     0x5614fd241ad0+91: [%36.1], env=e39.0
  void                    Deopt              !v    %39.1, Typecheck@0x561504e641e8[Type#4], %0.0
BB21   <- [38]
  prom-           %21.0 = MkArg                    unboundValue, mode[0x5614faa05430]_p0, e36.2
  ct              %21.1 = PushContext        lCL   %21.0, deparse([[(x, 1L)), function(expr, width.cutoff=60L, backtick=%in%|..., e36.2
  val?^           %21.2 = CastType                 up %21.0
  env             e21.3 = MkEnv              l     expr=%21.2, width.cutoff(miss)=60L, backtick(miss)=missingArg, control(miss)=missingArg, nlines(miss)=missingArg, parent=R_BaseNamespace, context 1
  prom-           %21.4 = MkArg                    unboundValue, mode[0x5614faa05430]_p1, e21.3
  val?^ | miss    %21.5 = CastType                 up %21.4
  void                    StArg              lW    backtick, %21.5, e21.3
  prom-           %21.7 = MkArg                    unboundValue, mode[0x5614faa05430]_p5, e21.3
  val?^ | miss    %21.8 = CastType                 up %21.7
  void                    StArg              lW    control, %21.8, e21.3
  prom-           %21.10 = MkArg                    unboundValue, mode[0x5614faa05430]_p6 (!refl), 
  val?^ | miss    %21.11 = CastType                 up %21.10
  void                    StArg              lW    nlines, %21.11, e21.3
  val?            %21.13 = Force!<lazy>       !vL   %21.2, e21.3   <(sym|code)->
  val?            %21.14 = Force!<lazy>       !v    %21.5, e21.3   <lgl$->
  val?^ | miss    %21.15 = LdVar              eR    .deparseOpts, e21.3
  lgl$#-          %21.16 = Identical                %21.15, function(control) <(rir::DispatchTable*)0x5614|...
  void                    Branch                   %21.16 -> BB40 (if true) | BB41 (if false)
BB6   <- [38]
  lgl$#-          %6.0  = CallSafeBuiltin    wed   is.symbol(%36.0)    <lgl$->
  void                    Branch                   %6.0 -> BB20 (if true) | BB7 (if false)
BB40   <- [21]
  val?^ | miss    %40.0 = LdVar              eR    control, e21.3
  val?            %40.1 = Force!<lazy>       !v    %40.0, e21.3   <str->
  prom-           %40.2 = MkArg                    %40.1, mode[0x5614faa05430]_p7 (!refl), 
  val?            %40.3 = StaticCall         !v    .deparseOpts[0x5614f929a5b0](%40.2) e21.3   <real$->
  lgl$#-          %40.4 = IsType                   %40.3 isA real$-
  void                    Branch                   %40.4 -> BB42 (if true) | BB43 (if false)
BB41   <- [21]
  fs              %41.0 = FrameState         R     0x5614fd241ad0+253: [], env=e36.2
  fs              %41.1 = FrameState         R     0x561504f7aa10+37: [%21.13, 60L, %21.14], env=e21.3, next=%41.0
  void                    Deopt              !v    %41.1, CallTarget@0x561505122980[Call#4], %21.15   !
BB20   <- [6]
  void                    Visible            v     
  str$#-          %20.1 = "name"
  goto BB15
BB7   <- [6]
  str$-           %7.0  = CallSafeBuiltin    wed   typeof(%36.0)    <str$->
  int$-           %7.1  = Length                   %7.0
  void                    StVar              lW    tx, %7.0, e36.2
  lgl$-           %7.3  = Eq                 d     %7.1, 1L, elided   <true>
  lgl$#-          %7.4  = Identical                %7.3, true
  void                    Branch                   %7.4 -> BB44 (if true) | BB45 (if false)
BB42   <- [40]
  real$-          %42.0 = CastType           d     dn %40.3
  val?^ | miss    %42.1 = LdVar              eR    nlines, e21.3
  val?            %42.2 = Force!<lazy>       !v    %42.1, e21.3   <int$->
  val?            %42.3 = CallBuiltin        !v    deparse(%21.13, 60L, %21.14, %42.0, %42.2) e21.3
  val?            %42.4 = PopContext         C     %42.3, %21.1   <str$->
  lgl$#-          %42.5 = IsType                   %42.4 isA val+   <true>
  lgl$#-          %42.6 = IsType                   %42.4 isA val?-
  void                    Branch                   %42.5 -> BB46 (if true) | BB47 (if false)
BB43   <- [40]
  fs              %43.0 = FrameState         R     0x5614fd241ad0+253: [], env=e36.2
  fs              %43.1 = FrameState         R     0x561504f7aa10+74: [%21.13, 60L, %21.14, %40.3], env=e21.3, next=%43.0
  void                    Deopt              !v    %43.1, Typecheck@0x561505122980[Type#9], %40.3   !
BB15   <- [20, 14]
  str$-           %15.0 = Phi                      %14.2:BB14, %20.1:BB20
  str$-           %15.1 = %15.0
  str$-           %15.2 = %15.1
  goto BB16
BB44   <- [7]
  lgl$-           %44.0 = CallSafeBuiltin    wed   is.na(%7.0) 
  lgl$#-          %44.1 = CheckTrueFalse     e     %44.0   <false>
  void                    Branch                   %44.1 -> BB51 (if true) | BB50 (if false)
BB45   <- [7]
  fs              %45.0 = FrameState         R     0x5614fd241ad0+708: [%7.0], env=e36.2
  void                    Deopt              !v    %45.0, DeadBranchReached@0x561504e641e8[Test#14], %7.4
BB46   <- [42]
  void                    Branch                   %42.6 -> BB48 (if true) | BB49 (if false)
BB47   <- [42]
  void                    Nop                !     
  lgl$#-          %47.1 = %42.5
  dr              %47.2 = DeadBranchReached@0x561504e641e8[Test#3]
  goto BB26
BB51   <- [44]
  void                    Nop                !     
  lgl$#-          %51.1 = %44.1
  dr              %51.2 = DeadBranchReached@0x561504e641e8[Test#23]
  goto BB10
BB50   <- [44]
  lgl$-           %50.0 = Eq                 d     %7.0, double, elided
  lgl$#-          %50.1 = CheckTrueFalse     e     %50.0
  void                    Branch                   %50.1 -> BB19 (if true) | BB12 (if false)
BB48   <- [46]
  val?-           %48.0 = CastType           d     dn %42.4   <str$->
  val?            %48.1 = Extract1_1D        wed   %48.0, 1L, elided   <str$->
  lgl$-           %48.2 = Is                       %48.1, logical
  lgl$-           %48.3 = Is                       %48.1, integer
  lgl$-           %48.4 = Is                       %48.1, double
  lgl$-           %48.5 = Is                       %48.1, complex
  lgl$-           %48.6 = Is                       %48.1, character   <true>
  lgl$-           %48.7 = Is                       %48.1, raw
  lgl$-           %48.8 = Is                       %48.1, list
  lgl$-           %48.9 = Is                       %48.1, expression
  lgl$-           %48.10 = LOr                      %48.9, %48.8
  lgl$-           %48.11 = LOr                      %48.10, %48.7
  lgl$-           %48.12 = LOr                      %48.11, %48.6
  lgl$-           %48.13 = LOr                      %48.12, %48.5
  lgl$-           %48.14 = LOr                      %48.13, %48.4
  lgl$-           %48.15 = LOr                      %48.14, %48.3
  lgl$-           %48.16 = LOr                      %48.15, %48.2   <true>
  lgl$#-          %48.17 = Identical                %48.16, true
  int$-           %48.18 = Length                   %48.1
  lgl$-           %48.19 = Is                       %48.1, Factor   <false>
  lgl$#-          %48.20 = Identical                %48.19, false
  lgl$#-          %48.21 = Identical                %48.6, true
  lgl$#-          %48.22 = IsType                   %48.1 isA val?-
  void                    Branch                   %48.17 -> BB52 (if true) | BB53 (if false)
BB49   <- [46]
  void                    Nop                !     
  val?            %49.1 = %42.4
  dr              %49.2 = Typecheck@0x561504e641e8[Type#8]
  goto BB26
BB26   <- [47, 49]
  val?^ | miss    %26.0 = Phi                      %47.1:BB47, %49.1:BB49
  val?^ | miss    %26.1 = %26.0
  dr              %26.2 = Phi                      %47.2:BB47, %49.2:BB49
  dr              %26.3 = %26.2
  fs              %26.4 = FrameState         R     0x5614fd241ad0+253: [%42.4], env=e36.2
  void                    Deopt              !v    %26.4, %26.3, %26.1   !
BB10   <- [51, 55, 69, 71]
  val?^ | miss    %10.0 = Phi                      %51.1:BB51, %55.1:BB55, %69.1:BB69, %71.1:BB71
  val?^ | miss    %10.1 = %10.0
  dr              %10.2 = Phi                      %51.2:BB51, %55.2:BB55, %69.2:BB69, %71.2:BB71
  dr              %10.3 = %10.2
  fs              %10.4 = FrameState         R     0x5614fd241ad0+965: [%7.0, %44.0], env=e36.2
  void                    Deopt              !v    %10.4, %10.3, %10.1
BB19   <- [50]
  void                    Nop                !     
  goto BB18
BB12   <- [50]
  lgl$-           %12.0 = Eq                 d     %7.0, integer, elided
  lgl$#-          %12.1 = CheckTrueFalse     e     %12.0
  void                    Branch                   %12.1 -> BB17 (if true) | BB13 (if false)
BB52   <- [48]
  lgl$-           %52.0 = Eq                 d     %48.18, 1L, elided   <true>
  lgl$#-          %52.1 = Identical                %52.0, true
  void                    Branch                   %52.1 -> BB56 (if true) | BB57 (if false)
BB53   <- [48]
  void                    Nop                !     
  lgl$#-          %53.1 = %48.17
  dr              %53.2 = DeadBranchReached@0x561504e641e8[Test#4]
  goto BB28
BB18   <- [19, 17]
  void                    Visible            v     
  str$#-          %18.1 = "numeric"
  goto BB14
BB17   <- [12]
  void                    Nop                !     
  goto BB18
BB13   <- [12]
  lgl$-           %13.0 = Eq                 d     %7.0, closure, elided
  lgl$#-          %13.1 = CheckTrueFalse     e     %13.0   <false>
  void                    Branch                   %13.1 -> BB55 (if true) | BB54 (if false)
BB56   <- [52]
  void                    Branch                   %48.20 -> BB58 (if true) | BB59 (if false)
BB57   <- [52]
  void                    Nop                !     
  lgl$#-          %57.1 = %52.1
  dr              %57.2 = DeadBranchReached@0x561504e641e8[Test#5]
  goto BB28
BB28   <- [53, 57, 59, 61, 63]
  val?^ | miss    %28.0 = Phi                      %53.1:BB53, %57.1:BB57, %59.1:BB59, %61.1:BB61, %63.1:BB63
  val?^ | miss    %28.1 = %28.0
  dr              %28.2 = Phi                      %53.2:BB53, %57.2:BB57, %59.2:BB59, %61.2:BB61, %63.2:BB63
  dr              %28.3 = %28.2
  fs              %28.4 = FrameState         R     0x5614fd241ad0+296: [%48.1], env=e36.2
  void                    Deopt              !v    %28.4, %28.3, %28.1   !
BB14   <- [18, 70]
  str$-           %14.0 = Phi                      %70.1:BB70, %18.1:BB18
  str$-           %14.1 = %14.0
  str$-           %14.2 = %14.1
  goto BB15
BB55   <- [13]
  void                    Nop                !     
  lgl$#-          %55.1 = %13.1
  dr              %55.2 = DeadBranchReached@0x561504e641e8[Test#26]
  goto BB10
BB54   <- [13]
  lgl$-           %54.0 = Eq                 d     %7.0, builtin, elided
  lgl$#-          %54.1 = CheckTrueFalse     e     %54.0   <false>
  void                    Branch                   %54.1 -> BB69 (if true) | BB68 (if false)
BB58   <- [56]
  void                    Branch                   %48.21 -> BB60 (if true) | BB61 (if false)
BB59   <- [56]
  void                    Nop                !     
  lgl$#-          %59.1 = %48.20
  dr              %59.2 = DeadBranchReached@0x561504e641e8[Test#6]
  goto BB28
BB69   <- [54]
  void                    Nop                !     
  lgl$#-          %69.1 = %54.1
  dr              %69.2 = DeadBranchReached@0x561504e641e8[Test#27]
  goto BB10
BB68   <- [54]
  lgl$-           %68.0 = Eq                 d     %7.0, special, elided
  lgl$#-          %68.1 = CheckTrueFalse     e     %68.0   <false>
  void                    Branch                   %68.1 -> BB71 (if true) | BB70 (if false)
BB60   <- [58]
  void                    Branch                   %48.22 -> BB62 (if true) | BB63 (if false)
BB61   <- [58]
  void                    Nop                !     
  lgl$#-          %61.1 = %48.21
  dr              %61.2 = DeadBranchReached@0x561504e641e8[Test#7]
  goto BB28
BB71   <- [68]
  void                    Nop                !     
  lgl$#-          %71.1 = %68.1
  dr              %71.2 = DeadBranchReached@0x561504e641e8[Test#28]
  goto BB10
BB70   <- [68]
  void                    Visible            v     
  str$-           %70.1 = %7.0
  goto BB14
BB62   <- [60]
  val?-           %62.0 = CastType           d     dn %48.1   <str$->
  lgl-            %62.1 = CallSafeBuiltin    wed   is.na(%62.0) 
  lgl$#-          %62.2 = CheckTrueFalse     we    %62.1   <false>
  void                    Branch                   %62.2 -> BB65 (if true) | BB64 (if false)
BB63   <- [60]
  void                    Nop                !     
  val?            %63.1 = %48.1
  dr              %63.2 = Typecheck@0x561504e641e8[Type#9]
  goto BB28
BB65   <- [62]
  fs              %65.0 = FrameState         R     0x5614fd241ad0+488: [%62.0, %62.2], env=e36.2
  void                    Deopt              !v    %65.0, DeadBranchReached@0x561504e641e8[Test#10], %62.2   !
BB64   <- [62]
  lgl-            %64.0 = Eq                 wed   %62.0, (, elided
  lgl$#-          %64.1 = CheckTrueFalse     we    %64.0   <false>
  void                    Branch                   %64.1 -> BB67 (if true) | BB66 (if false)
BB67   <- [64]
  fs              %67.0 = FrameState         R     0x5614fd241ad0+512: [%62.0, %64.1], env=e36.2
  void                    Deopt              !v    %67.0, DeadBranchReached@0x561504e641e8[Test#11], %64.1   !
BB66   <- [64]
  void                    Visible            v     
  str$#-          %66.1 = "call"
  goto BB16
Prom 0:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    x, e0.0
  val?            %0.2  = Force<wrapped>     !v    %0.1, e0.0   <code->
  val?            %0.3  = Extract2_1D        !v    %0.2, 1L, e0.0   <sym->
  void                    Visible            v     
  void                    Return             l     %0.3
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     %in%, <0x5614f8bbdc40>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, mode[0x5614faa05430]_p2, e0.0
  prom-           %0.3  = MkArg                    unboundValue, mode[0x5614faa05430]_p4, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <lgl$->
  void                    Return             l     %0.4
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     mode, <0x5614f998b140>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, mode[0x5614faa05430]_p3, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <str$->
  void                    Return             l     %0.3
Prom 3:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    expr, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <(sym|code)->
  void                    Return             l     %0.3
Prom 4:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     c, <0x5614f88a7940>, e0.0
  val?            %0.2  = Call               !     %0.1("call", "expression", "(", "function") e0.0   <str->
  void                    Return             l     %0.2
Prom 5:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     c, <0x5614f88a7940>, e0.0
  val?            %0.2  = Call               !     %0.1("keepNA", "keepInteger", "niceNames", "showAttributes") e0.0   <str->
  void                    Return             l     %0.2
Prom 6:
BB0
  void                    Visible            v     
  void                    Return             l     -1L
Prom 7:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    control, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str->
  void                    Return             l     %0.3

│ mode[0x5614faa05430]                                                         │
└──────────────────────────────────────────────────────────────────────────────┘
