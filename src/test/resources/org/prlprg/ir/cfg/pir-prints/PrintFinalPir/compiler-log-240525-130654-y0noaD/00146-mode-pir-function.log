
┌──────────────────────────────────────────────────────────────────────────────┐
│ mode[0x564986413e60]                                                         │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;NonRefl0,!Obj0                       │
│ Properties:  Eager, ForceOrd: 0                                              │
├────── Final PIR Version
mode[0x564986413e60]
BB0
  val?^           %0.0  = LdArg                    0
  env             e0.1  = MkEnv              l     x=%0.0, parent=R_BaseNamespace, context 1
  val+            %0.2  = Force!<lazy>       !vr   %0.0,    <val?+>
  lgl$#-          %0.3  = CallSafeBuiltin    wed   is.expression(%0.2)    <lgl$->
  void                    Branch                   %0.3 -> BB29 (if true) | BB3 (if false)
BB29   <- [0]
  void                    Visible            v     
  str$#-          %29.1 = "expression"
  goto BB13
BB3   <- [0]
  lgl$#-          %3.0  = IsType                   %0.0 isA val?~+
  void                    Branch                   %3.0 -> BB31 (if true) | BB32 (if false)
BB13   <- [29, 12, 65]
  str$-           %13.0 = Phi                      %12.2:BB12, %65.1:BB65, %29.1:BB29
  str$-           %13.1 = %13.0
  void                    Return             l     %13.1
BB31   <- [3]
  lgl$#-          %31.0 = CallSafeBuiltin    wed   is.call(%0.2)    <lgl$->
  void                    Branch                   %31.0 -> BB16 (if true) | BB4 (if false)
BB32   <- [3]
  fs              %32.0 = FrameState         R     0x564985584090+91: [%0.3], env=e0.1
  void                    Deopt              !v    %32.0, Typecheck@0x564986bd7808[Type#4], %0.0
BB16   <- [31]
  prom-           %16.0 = MkArg                    unboundValue, mode[0x564986413e60]_p1, e0.1
  ct              %16.1 = PushContext        lCL   %16.0, deparse([[(x, 1L)), function(expr, width.cutoff=60L, backtick=%in%|..., e0.1
  val?^           %16.2 = CastType                 up %16.0
  env             e16.3 = MkEnv              l     expr=%16.2, width.cutoff(miss)=60L, backtick(miss)=missingArg, control(miss)=missingArg, nlines(miss)=missingArg, parent=R_BaseNamespace, context 1
  prom-           %16.4 = MkArg                    unboundValue, mode[0x564986413e60]_p3, e16.3
  val?^ | miss    %16.5 = CastType                 up %16.4
  void                    StArg              lW    backtick, %16.5, e16.3
  prom-           %16.7 = MkArg                    unboundValue, mode[0x564986413e60]_p7, e16.3
  val?^ | miss    %16.8 = CastType                 up %16.7
  void                    StArg              lW    control, %16.8, e16.3
  prom-           %16.10 = MkArg                    unboundValue, mode[0x564986413e60]_p8 (!refl), 
  val?^ | miss    %16.11 = CastType                 up %16.10
  void                    StArg              lW    nlines, %16.11, e16.3
  val?            %16.13 = Force!<lazy>       !vL   %16.2, e16.3   <(sym|code)->
  val?            %16.14 = Force!<lazy>       !v    %16.5, e16.3   <lgl$->
  val?^ | miss    %16.15 = LdVar              eR    .deparseOpts, e16.3
  lgl$#-          %16.16 = Identical                %16.15, function(control) <(rir::DispatchTable*)0x5649|...
  void                    Branch                   %16.16 -> BB33 (if true) | BB34 (if false)
BB4   <- [31]
  lgl$#-          %4.0  = CallSafeBuiltin    wed   is.symbol(%0.2)    <lgl$->
  void                    Branch                   %4.0 -> BB15 (if true) | BB5 (if false)
BB33   <- [16]
  val?^ | miss    %33.0 = LdVar              eR    control, e16.3
  val?            %33.1 = Force!<lazy>       !v    %33.0, e16.3   <str->
  prom-           %33.2 = MkArg                    %33.1, mode[0x564986413e60]_p9 (!refl), 
  val?            %33.3 = StaticCall         !v    .deparseOpts[0x564985a93260](%33.2) e16.3   <real$->
  lgl$#-          %33.4 = IsType                   %33.3 isA real$-
  void                    Branch                   %33.4 -> BB37 (if true) | BB38 (if false)
BB34   <- [16]
  fs              %34.0 = FrameState         R     0x564985584090+253: [], env=e0.1
  fs              %34.1 = FrameState         R     0x564985320e30+37: [%16.13, 60L, %16.14], env=e16.3, next=%34.0
  void                    Deopt              !v    %34.1, CallTarget@0x5649856a2270[Call#4], %16.15   !
BB15   <- [4]
  void                    Visible            v     
  str$#-          %15.1 = "name"
  goto BB12
BB5   <- [4]
  str$-           %5.0  = CallSafeBuiltin    wed   typeof(%0.2)    <str$->
  int$-           %5.1  = Length                   %5.0
  void                    StVar              lW    tx, %5.0, e0.1
  lgl$-           %5.3  = Eq                 d     %5.1, 1L, elided   <true>
  lgl$#-          %5.4  = Identical                %5.3, true
  void                    Branch                   %5.4 -> BB35 (if true) | BB36 (if false)
BB37   <- [33]
  real$-          %37.0 = CastType           d     dn %33.3
  val?^ | miss    %37.1 = LdVar              eR    nlines, e16.3
  val?            %37.2 = Force!<lazy>       !v    %37.1, e16.3   <int$->
  val?            %37.3 = CallBuiltin        !v    deparse(%16.13, 60L, %16.14, %37.0, %37.2) e16.3
  val?            %37.4 = PopContext         C     %37.3, %16.1   <str$->
  lgl$#-          %37.5 = IsType                   %37.4 isA val+   <true>
  lgl$#-          %37.6 = IsType                   %37.4 isA val?-
  void                    Branch                   %37.5 -> BB39 (if true) | BB40 (if false)
BB38   <- [33]
  fs              %38.0 = FrameState         R     0x564985584090+253: [], env=e0.1
  fs              %38.1 = FrameState         R     0x564985320e30+74: [%16.13, 60L, %16.14, %33.3], env=e16.3, next=%38.0
  void                    Deopt              !v    %38.1, Typecheck@0x5649856a2270[Type#9], %33.3   !
BB12   <- [15, 11]
  str$-           %12.0 = Phi                      %11.2:BB11, %15.1:BB15
  str$-           %12.1 = %12.0
  str$-           %12.2 = %12.1
  goto BB13
BB35   <- [5]
  lgl$-           %35.0 = CallSafeBuiltin    wed   is.na(%5.0) 
  lgl$#-          %35.1 = CheckTrueFalse     e     %35.0   <false>
  void                    Branch                   %35.1 -> BB50 (if true) | BB49 (if false)
BB36   <- [5]
  fs              %36.0 = FrameState         R     0x564985584090+708: [%5.0], env=e0.1
  void                    Deopt              !v    %36.0, DeadBranchReached@0x564986bd7808[Test#14], %5.4
BB39   <- [37]
  void                    Branch                   %37.6 -> BB41 (if true) | BB42 (if false)
BB40   <- [37]
  void                    Nop                !     
  lgl$#-          %40.1 = %37.5
  dr              %40.2 = DeadBranchReached@0x564986bd7808[Test#3]
  goto BB21
BB50   <- [35]
  void                    Nop                !     
  lgl$#-          %50.1 = %35.1
  dr              %50.2 = DeadBranchReached@0x564986bd7808[Test#23]
  goto BB8
BB49   <- [35]
  lgl$-           %49.0 = Eq                 d     %5.0, double, elided
  lgl$#-          %49.1 = CheckTrueFalse     e     %49.0
  void                    Branch                   %49.1 -> BB14 (if true) | BB10 (if false)
BB41   <- [39]
  val?-           %41.0 = CastType           d     dn %37.4   <str$->
  val?            %41.1 = Extract1_1D        wed   %41.0, 1L, elided   <str$->
  lgl$-           %41.2 = Is                       %41.1, logical
  lgl$-           %41.3 = Is                       %41.1, integer
  lgl$-           %41.4 = Is                       %41.1, double
  lgl$-           %41.5 = Is                       %41.1, complex
  lgl$-           %41.6 = Is                       %41.1, character   <true>
  lgl$-           %41.7 = Is                       %41.1, raw
  lgl$-           %41.8 = Is                       %41.1, list
  lgl$-           %41.9 = Is                       %41.1, expression
  lgl$-           %41.10 = LOr                      %41.9, %41.8
  lgl$-           %41.11 = LOr                      %41.10, %41.7
  lgl$-           %41.12 = LOr                      %41.11, %41.6
  lgl$-           %41.13 = LOr                      %41.12, %41.5
  lgl$-           %41.14 = LOr                      %41.13, %41.4
  lgl$-           %41.15 = LOr                      %41.14, %41.3
  lgl$-           %41.16 = LOr                      %41.15, %41.2   <true>
  lgl$#-          %41.17 = Identical                %41.16, true
  int$-           %41.18 = Length                   %41.1
  lgl$-           %41.19 = Is                       %41.1, Factor   <false>
  lgl$#-          %41.20 = Identical                %41.19, false
  lgl$#-          %41.21 = Identical                %41.6, true
  lgl$#-          %41.22 = IsType                   %41.1 isA val?-
  void                    Branch                   %41.17 -> BB43 (if true) | BB44 (if false)
BB42   <- [39]
  void                    Nop                !     
  val?            %42.1 = %37.4
  dr              %42.2 = Typecheck@0x564986bd7808[Type#8]
  goto BB21
BB21   <- [40, 42]
  val?^ | miss    %21.0 = Phi                      %40.1:BB40, %42.1:BB42
  val?^ | miss    %21.1 = %21.0
  dr              %21.2 = Phi                      %40.2:BB40, %42.2:BB42
  dr              %21.3 = %21.2
  fs              %21.4 = FrameState         R     0x564985584090+253: [%37.4], env=e0.1
  void                    Deopt              !v    %21.4, %21.3, %21.1   !
BB8   <- [50, 56, 58, 60, 62]
  val?^ | miss    %8.0  = Phi                      %50.1:BB50, %56.1:BB56, %58.1:BB58, %60.1:BB60, %62.1:BB62
  val?^ | miss    %8.1  = %8.0
  dr              %8.2  = Phi                      %50.2:BB50, %56.2:BB56, %58.2:BB58, %60.2:BB60, %62.2:BB62
  dr              %8.3  = %8.2
  fs              %8.4  = FrameState         R     0x564985584090+965: [%5.0, %35.0], env=e0.1
  void                    Deopt              !v    %8.4, %8.3, %8.1
BB14   <- [49]
  void                    Visible            v     
  str$#-          %14.1 = "numeric"
  goto BB11
BB10   <- [49]
  lgl$-           %10.0 = Eq                 d     %5.0, integer, elided
  lgl$#-          %10.1 = CheckTrueFalse     e     %10.0   <false>
  void                    Branch                   %10.1 -> BB56 (if true) | BB55 (if false)
BB43   <- [41]
  lgl$-           %43.0 = Eq                 d     %41.18, 1L, elided   <true>
  lgl$#-          %43.1 = Identical                %43.0, true
  void                    Branch                   %43.1 -> BB45 (if true) | BB46 (if false)
BB44   <- [41]
  void                    Nop                !     
  lgl$#-          %44.1 = %41.17
  dr              %44.2 = DeadBranchReached@0x564986bd7808[Test#4]
  goto BB23
BB11   <- [14, 61]
  str$-           %11.0 = Phi                      %61.1:BB61, %14.1:BB14
  str$-           %11.1 = %11.0
  str$-           %11.2 = %11.1
  goto BB12
BB56   <- [10]
  void                    Nop                !     
  lgl$#-          %56.1 = %10.1
  dr              %56.2 = DeadBranchReached@0x564986bd7808[Test#25]
  goto BB8
BB55   <- [10]
  lgl$-           %55.0 = Eq                 d     %5.0, closure, elided
  lgl$#-          %55.1 = CheckTrueFalse     e     %55.0   <false>
  void                    Branch                   %55.1 -> BB58 (if true) | BB57 (if false)
BB45   <- [43]
  void                    Branch                   %41.20 -> BB47 (if true) | BB48 (if false)
BB46   <- [43]
  void                    Nop                !     
  lgl$#-          %46.1 = %43.1
  dr              %46.2 = DeadBranchReached@0x564986bd7808[Test#5]
  goto BB23
BB23   <- [44, 46, 48, 52, 54]
  val?^ | miss    %23.0 = Phi                      %44.1:BB44, %46.1:BB46, %48.1:BB48, %52.1:BB52, %54.1:BB54
  val?^ | miss    %23.1 = %23.0
  dr              %23.2 = Phi                      %44.2:BB44, %46.2:BB46, %48.2:BB48, %52.2:BB52, %54.2:BB54
  dr              %23.3 = %23.2
  fs              %23.4 = FrameState         R     0x564985584090+296: [%41.1], env=e0.1
  void                    Deopt              !v    %23.4, %23.3, %23.1   !
BB58   <- [55]
  void                    Nop                !     
  lgl$#-          %58.1 = %55.1
  dr              %58.2 = DeadBranchReached@0x564986bd7808[Test#26]
  goto BB8
BB57   <- [55]
  lgl$-           %57.0 = Eq                 d     %5.0, builtin, elided
  lgl$#-          %57.1 = CheckTrueFalse     e     %57.0   <false>
  void                    Branch                   %57.1 -> BB60 (if true) | BB59 (if false)
BB47   <- [45]
  void                    Branch                   %41.21 -> BB51 (if true) | BB52 (if false)
BB48   <- [45]
  void                    Nop                !     
  lgl$#-          %48.1 = %41.20
  dr              %48.2 = DeadBranchReached@0x564986bd7808[Test#6]
  goto BB23
BB60   <- [57]
  void                    Nop                !     
  lgl$#-          %60.1 = %57.1
  dr              %60.2 = DeadBranchReached@0x564986bd7808[Test#27]
  goto BB8
BB59   <- [57]
  lgl$-           %59.0 = Eq                 d     %5.0, special, elided
  lgl$#-          %59.1 = CheckTrueFalse     e     %59.0   <false>
  void                    Branch                   %59.1 -> BB62 (if true) | BB61 (if false)
BB51   <- [47]
  void                    Branch                   %41.22 -> BB53 (if true) | BB54 (if false)
BB52   <- [47]
  void                    Nop                !     
  lgl$#-          %52.1 = %41.21
  dr              %52.2 = DeadBranchReached@0x564986bd7808[Test#7]
  goto BB23
BB62   <- [59]
  void                    Nop                !     
  lgl$#-          %62.1 = %59.1
  dr              %62.2 = DeadBranchReached@0x564986bd7808[Test#28]
  goto BB8
BB61   <- [59]
  void                    Visible            v     
  str$-           %61.1 = %5.0
  goto BB11
BB53   <- [51]
  val?-           %53.0 = CastType           d     dn %41.1   <str$->
  lgl-            %53.1 = CallSafeBuiltin    wed   is.na(%53.0) 
  lgl$#-          %53.2 = CheckTrueFalse     we    %53.1   <false>
  void                    Branch                   %53.2 -> BB64 (if true) | BB63 (if false)
BB54   <- [51]
  void                    Nop                !     
  val?            %54.1 = %41.1
  dr              %54.2 = Typecheck@0x564986bd7808[Type#9]
  goto BB23
BB64   <- [53]
  fs              %64.0 = FrameState         R     0x564985584090+488: [%53.0, %53.2], env=e0.1
  void                    Deopt              !v    %64.0, DeadBranchReached@0x564986bd7808[Test#10], %53.2   !
BB63   <- [53]
  lgl-            %63.0 = Eq                 wed   %53.0, (, elided
  lgl$#-          %63.1 = CheckTrueFalse     we    %63.0   <false>
  void                    Branch                   %63.1 -> BB66 (if true) | BB65 (if false)
BB66   <- [63]
  fs              %66.0 = FrameState         R     0x564985584090+512: [%53.0, %63.1], env=e0.1
  void                    Deopt              !v    %66.0, DeadBranchReached@0x564986bd7808[Test#11], %63.1   !
BB65   <- [63]
  void                    Visible            v     
  str$#-          %65.1 = "call"
  goto BB13
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    x, e0.0
  val?            %0.2  = Force<wrapped>     !v    %0.1, e0.0   <code->
  val?            %0.3  = Extract2_1D        !v    %0.2, 1L, e0.0   <sym->
  void                    Visible            v     
  void                    Return             l     %0.3
Prom 3:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     %in%, <0x56498319cc40>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, mode[0x564986413e60]_p4, e0.0
  prom-           %0.3  = MkArg                    unboundValue, mode[0x564986413e60]_p6, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <lgl$->
  void                    Return             l     %0.4
Prom 4:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     mode, <0x564983f6a140>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, mode[0x564986413e60]_p5, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <str$->
  void                    Return             l     %0.3
Prom 5:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    expr, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <(sym|code)->
  void                    Return             l     %0.3
Prom 6:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     c, <0x564982e86940>, e0.0
  val?            %0.2  = Call               !     %0.1("call", "expression", "(", "function") e0.0   <str->
  void                    Return             l     %0.2
Prom 7:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     c, <0x564982e86940>, e0.0
  val?            %0.2  = Call               !     %0.1("keepNA", "keepInteger", "niceNames", "showAttributes") e0.0   <str->
  void                    Return             l     %0.2
Prom 8:
BB0
  void                    Visible            v     
  void                    Return             l     -1L
Prom 9:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    control, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str->
  void                    Return             l     %0.3

│ mode[0x564986413e60]                                                         │
└──────────────────────────────────────────────────────────────────────────────┘
