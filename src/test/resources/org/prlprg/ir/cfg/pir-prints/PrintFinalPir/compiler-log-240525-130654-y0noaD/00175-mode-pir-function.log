
┌──────────────────────────────────────────────────────────────────────────────┐
│ mode[0x5649863f8e50]                                                         │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;NonRefl0,!Obj0                       │
│ Properties:  Eager, ForceOrd: 0                                              │
├────── Final PIR Version
mode[0x5649863f8e50]
BB0
  val?^           %0.0  = LdArg                    0
  env             e0.1  = MkEnv              l     x=%0.0, parent=R_BaseNamespace, context 1
  val+            %0.2  = Force!<lazy>       !vr   %0.0,    <val?>
  lgl$#-          %0.3  = CallSafeBuiltin    wed   is.expression(%0.2)    <lgl$->
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  void                    Visible            v     
  str$#-          %2.1  = "expression"
  goto BB3
BB4   <- [0]
  lgl$#-          %4.0  = CallSafeBuiltin    wed   is.call(%0.2)    <lgl$->
  void                    Branch                   %4.0 -> BB5 (if true) | BB19 (if false)
BB3   <- [2, 21, 17]
  str$-           %3.0  = Phi                      %21.2:BB21, %17.2:BB17, %2.1:BB2
  str$-           %3.1  = %3.0
  void                    Return             l     %3.1
BB5   <- [4]
  prom-           %5.0  = MkArg                    unboundValue, mode[0x5649863f8e50]_p1, e0.1
  ct              %5.1  = PushContext        lCL   %5.0, deparse([[(x, 1L)), function(expr, width.cutoff=60L, backtick=%in%|..., e0.1
  val?^           %5.2  = CastType                 up %5.0
  env             e5.3  = MkEnv              l     expr=%5.2, width.cutoff(miss)=60L, backtick(miss)=missingArg, control(miss)=missingArg, nlines(miss)=missingArg, parent=R_BaseNamespace, context 1
  prom-           %5.4  = MkArg                    unboundValue, mode[0x5649863f8e50]_p3, e5.3
  val?^ | miss    %5.5  = CastType                 up %5.4
  void                    StArg              lW    backtick, %5.5, e5.3
  prom-           %5.7  = MkArg                    unboundValue, mode[0x5649863f8e50]_p7, e5.3
  val?^ | miss    %5.8  = CastType                 up %5.7
  void                    StArg              lW    control, %5.8, e5.3
  prom-           %5.10 = MkArg                    unboundValue, mode[0x5649863f8e50]_p8 (!refl), 
  val?^ | miss    %5.11 = CastType                 up %5.10
  void                    StArg              lW    nlines, %5.11, e5.3
  val?            %5.13 = Force!<lazy>       !vL   %5.2, e5.3   <(sym|code)->
  val?            %5.14 = Force!<lazy>       !v    %5.5, e5.3   <lgl$->
  val?^ | miss    %5.15 = LdVar              eR    .deparseOpts, e5.3
  lgl$#-          %5.16 = Identical                %5.15, function(control) <(rir::DispatchTable*)0x5649|...
  void                    Branch                   %5.16 -> BB33 (if true) | BB34 (if false)
BB19   <- [4]
  lgl$#-          %19.0 = CallSafeBuiltin    wed   is.symbol(%0.2)    <lgl$->
  void                    Branch                   %19.0 -> BB20 (if true) | BB22 (if false)
BB33   <- [5]
  val?^ | miss    %33.0 = LdVar              eR    control, e5.3
  val?            %33.1 = Force!<lazy>       !v    %33.0, e5.3   <str->
  prom-           %33.2 = MkArg                    %33.1, mode[0x5649863f8e50]_p9 (!refl), 
  val?            %33.3 = StaticCall         !v    .deparseOpts[0x564987c0cab0](%33.2) e5.3   <real$->
  lgl$#-          %33.4 = IsType                   %33.3 isA real$-
  void                    Branch                   %33.4 -> BB35 (if true) | BB36 (if false)
BB34   <- [5]
  fs              %34.0 = FrameState         R     0x564985584090+253: [], env=e0.1
  fs              %34.1 = FrameState         R     0x564985320e30+37: [%5.13, 60L, %5.14], env=e5.3, next=%34.0
  void                    Deopt              !v    %34.1, CallTarget@0x5649856a2270[Call#4], %5.15   !
BB20   <- [19]
  void                    Visible            v     
  str$#-          %20.1 = "name"
  goto BB21
BB22   <- [19]
  str$-           %22.0 = CallSafeBuiltin    wed   typeof(%0.2)    <str$->
  int$-           %22.1 = Length                   %22.0
  void                    StVar              lW    tx, %22.0, e0.1
  lgl$-           %22.3 = Eq                 d     %22.1, 1L, elided   <true>
  lgl$#-          %22.4 = Identical                %22.3, true
  void                    Branch                   %22.4 -> BB39 (if true) | BB40 (if false)
BB35   <- [33]
  real$-          %35.0 = CastType           d     dn %33.3
  val?^ | miss    %35.1 = LdVar              eR    nlines, e5.3
  val?            %35.2 = Force!<lazy>       !v    %35.1, e5.3   <int$->
  val?            %35.3 = CallBuiltin        !v    deparse(%5.13, 60L, %5.14, %35.0, %35.2) e5.3
  val?            %35.4 = PopContext         C     %35.3, %5.1   <str$->
  lgl$#-          %35.5 = IsType                   %35.4 isA val+   <true>
  lgl$#-          %35.6 = IsType                   %35.4 isA val?-
  void                    Branch                   %35.5 -> BB37 (if true) | BB38 (if false)
BB36   <- [33]
  fs              %36.0 = FrameState         R     0x564985584090+253: [], env=e0.1
  fs              %36.1 = FrameState         R     0x564985320e30+74: [%5.13, 60L, %5.14, %33.3], env=e5.3, next=%36.0
  void                    Deopt              !v    %36.1, Typecheck@0x5649856a2270[Type#9], %33.3   !
BB21   <- [20, 28]
  str$-           %21.0 = Phi                      %28.2:BB28, %20.1:BB20
  str$-           %21.1 = %21.0
  str$-           %21.2 = %21.1
  goto BB3
BB39   <- [22]
  lgl$-           %39.0 = CallSafeBuiltin    wed   is.na(%22.0) 
  lgl$#-          %39.1 = CheckTrueFalse     e     %39.0   <false>
  void                    Branch                   %39.1 -> BB44 (if true) | BB43 (if false)
BB40   <- [22]
  fs              %40.0 = FrameState         R     0x564985584090+708: [%22.0], env=e0.1
  void                    Deopt              !v    %40.0, DeadBranchReached@0x564986bd7808[Test#14], %22.4
BB37   <- [35]
  void                    Branch                   %35.6 -> BB41 (if true) | BB42 (if false)
BB38   <- [35]
  void                    Nop                !     
  lgl$#-          %38.1 = %35.5
  dr              %38.2 = DeadBranchReached@0x564986bd7808[Test#3]
  goto BB10
BB44   <- [39]
  void                    Nop                !     
  lgl$#-          %44.1 = %39.1
  dr              %44.2 = DeadBranchReached@0x564986bd7808[Test#23]
  goto BB24
BB43   <- [39]
  lgl$-           %43.0 = Eq                 d     %22.0, double, elided
  lgl$#-          %43.1 = CheckTrueFalse     e     %43.0
  void                    Branch                   %43.1 -> BB31 (if true) | BB26 (if false)
BB41   <- [37]
  val?-           %41.0 = CastType           d     dn %35.4   <str$->
  val?            %41.1 = Extract1_1D        wed   %41.0, 1L, elided   <str$->
  lgl$-           %41.2 = Is                       %41.1, logical
  lgl$-           %41.3 = Is                       %41.1, integer
  lgl$-           %41.4 = Is                       %41.1, double
  lgl$-           %41.5 = Is                       %41.1, complex
  lgl$-           %41.6 = Is                       %41.1, character   <true>
  lgl$-           %41.7 = Is                       %41.1, raw
  lgl$-           %41.8 = Is                       %41.1, list
  lgl$-           %41.9 = Is                       %41.1, expression
  lgl$-           %41.10 = LOr                      %41.9, %41.8
  lgl$-           %41.11 = LOr                      %41.10, %41.7
  lgl$-           %41.12 = LOr                      %41.11, %41.6
  lgl$-           %41.13 = LOr                      %41.12, %41.5
  lgl$-           %41.14 = LOr                      %41.13, %41.4
  lgl$-           %41.15 = LOr                      %41.14, %41.3
  lgl$-           %41.16 = LOr                      %41.15, %41.2   <true>
  lgl$#-          %41.17 = Identical                %41.16, true
  int$-           %41.18 = Length                   %41.1
  lgl$-           %41.19 = Is                       %41.1, Factor   <false>
  lgl$#-          %41.20 = Identical                %41.19, false
  lgl$#-          %41.21 = Identical                %41.6, true
  lgl$#-          %41.22 = IsType                   %41.1 isA val?-
  void                    Branch                   %41.17 -> BB49 (if true) | BB50 (if false)
BB42   <- [37]
  void                    Nop                !     
  val?            %42.1 = %35.4
  dr              %42.2 = Typecheck@0x564986bd7808[Type#8]
  goto BB10
BB10   <- [38, 42]
  val?^ | miss    %10.0 = Phi                      %38.1:BB38, %42.1:BB42
  val?^ | miss    %10.1 = %10.0
  dr              %10.2 = Phi                      %38.2:BB38, %42.2:BB42
  dr              %10.3 = %10.2
  fs              %10.4 = FrameState         R     0x564985584090+253: [%35.4], env=e0.1
  void                    Deopt              !v    %10.4, %10.3, %10.1   !
BB24   <- [44, 46, 48, 52]
  val?^ | miss    %24.0 = Phi                      %44.1:BB44, %46.1:BB46, %48.1:BB48, %52.1:BB52
  val?^ | miss    %24.1 = %24.0
  dr              %24.2 = Phi                      %44.2:BB44, %46.2:BB46, %48.2:BB48, %52.2:BB52
  dr              %24.3 = %24.2
  fs              %24.4 = FrameState         R     0x564985584090+965: [%22.0, %39.0], env=e0.1
  void                    Deopt              !v    %24.4, %24.3, %24.1
BB31   <- [43]
  void                    Nop                !     
  goto BB30
BB26   <- [43]
  lgl$-           %26.0 = Eq                 d     %22.0, integer, elided
  lgl$#-          %26.1 = CheckTrueFalse     e     %26.0
  void                    Branch                   %26.1 -> BB29 (if true) | BB27 (if false)
BB49   <- [41]
  lgl$-           %49.0 = Eq                 d     %41.18, 1L, elided   <true>
  lgl$#-          %49.1 = Identical                %49.0, true
  void                    Branch                   %49.1 -> BB53 (if true) | BB54 (if false)
BB50   <- [41]
  void                    Nop                !     
  lgl$#-          %50.1 = %41.17
  dr              %50.2 = DeadBranchReached@0x564986bd7808[Test#4]
  goto BB12
BB30   <- [29, 31]
  void                    Visible            v     
  str$#-          %30.1 = "numeric"
  goto BB28
BB29   <- [26]
  void                    Nop                !     
  goto BB30
BB27   <- [26]
  lgl$-           %27.0 = Eq                 d     %22.0, closure, elided
  lgl$#-          %27.1 = CheckTrueFalse     e     %27.0   <false>
  void                    Branch                   %27.1 -> BB46 (if true) | BB45 (if false)
BB53   <- [49]
  void                    Branch                   %41.20 -> BB55 (if true) | BB56 (if false)
BB54   <- [49]
  void                    Nop                !     
  lgl$#-          %54.1 = %49.1
  dr              %54.2 = DeadBranchReached@0x564986bd7808[Test#5]
  goto BB12
BB12   <- [50, 54, 56, 58, 60]
  val?^ | miss    %12.0 = Phi                      %50.1:BB50, %54.1:BB54, %56.1:BB56, %58.1:BB58, %60.1:BB60
  val?^ | miss    %12.1 = %12.0
  dr              %12.2 = Phi                      %50.2:BB50, %54.2:BB54, %56.2:BB56, %58.2:BB58, %60.2:BB60
  dr              %12.3 = %12.2
  fs              %12.4 = FrameState         R     0x564985584090+296: [%41.1], env=e0.1
  void                    Deopt              !v    %12.4, %12.3, %12.1   !
BB28   <- [30, 51]
  str$-           %28.0 = Phi                      %51.1:BB51, %30.1:BB30
  str$-           %28.1 = %28.0
  str$-           %28.2 = %28.1
  goto BB21
BB46   <- [27]
  void                    Nop                !     
  lgl$#-          %46.1 = %27.1
  dr              %46.2 = DeadBranchReached@0x564986bd7808[Test#26]
  goto BB24
BB45   <- [27]
  lgl$-           %45.0 = Eq                 d     %22.0, builtin, elided
  lgl$#-          %45.1 = CheckTrueFalse     e     %45.0   <false>
  void                    Branch                   %45.1 -> BB48 (if true) | BB47 (if false)
BB55   <- [53]
  void                    Branch                   %41.21 -> BB57 (if true) | BB58 (if false)
BB56   <- [53]
  void                    Nop                !     
  lgl$#-          %56.1 = %41.20
  dr              %56.2 = DeadBranchReached@0x564986bd7808[Test#6]
  goto BB12
BB48   <- [45]
  void                    Nop                !     
  lgl$#-          %48.1 = %45.1
  dr              %48.2 = DeadBranchReached@0x564986bd7808[Test#27]
  goto BB24
BB47   <- [45]
  lgl$-           %47.0 = Eq                 d     %22.0, special, elided
  lgl$#-          %47.1 = CheckTrueFalse     e     %47.0   <false>
  void                    Branch                   %47.1 -> BB52 (if true) | BB51 (if false)
BB57   <- [55]
  void                    Branch                   %41.22 -> BB59 (if true) | BB60 (if false)
BB58   <- [55]
  void                    Nop                !     
  lgl$#-          %58.1 = %41.21
  dr              %58.2 = DeadBranchReached@0x564986bd7808[Test#7]
  goto BB12
BB52   <- [47]
  void                    Nop                !     
  lgl$#-          %52.1 = %47.1
  dr              %52.2 = DeadBranchReached@0x564986bd7808[Test#28]
  goto BB24
BB51   <- [47]
  void                    Visible            v     
  str$-           %51.1 = %22.0
  goto BB28
BB59   <- [57]
  val?-           %59.0 = CastType           d     dn %41.1   <str$->
  lgl-            %59.1 = CallSafeBuiltin    wed   is.na(%59.0) 
  lgl$#-          %59.2 = CheckTrueFalse     we    %59.1   <false>
  void                    Branch                   %59.2 -> BB62 (if true) | BB61 (if false)
BB60   <- [57]
  void                    Nop                !     
  val?            %60.1 = %41.1
  dr              %60.2 = Typecheck@0x564986bd7808[Type#9]
  goto BB12
BB62   <- [59]
  fs              %62.0 = FrameState         R     0x564985584090+488: [%59.0, %59.2], env=e0.1
  void                    Deopt              !v    %62.0, DeadBranchReached@0x564986bd7808[Test#10], %59.2   !
BB61   <- [59]
  lgl-            %61.0 = Eq                 wed   %59.0, (, elided
  lgl$#-          %61.1 = CheckTrueFalse     we    %61.0
  void                    Branch                   %61.1 -> BB18 (if true) | BB16 (if false)
BB18   <- [61]
  void                    Visible            v     
  str$#-          %18.1 = "("
  goto BB17
BB16   <- [61]
  void                    Visible            v     
  str$#-          %16.1 = "call"
  goto BB17
BB17   <- [18, 16]
  str$#-          %17.0 = Phi                      %16.1:BB16, %18.1:BB18
  str$#-          %17.1 = %17.0
  str$#-          %17.2 = %17.1
  goto BB3
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    x, e0.0
  val?            %0.2  = Force<wrapped>     !v    %0.1, e0.0   <code->
  val?            %0.3  = Extract2_1D        !v    %0.2, 1L, e0.0   <sym->
  void                    Visible            v     
  void                    Return             l     %0.3
Prom 3:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     %in%, <0x56498319cc40>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, mode[0x5649863f8e50]_p4, e0.0
  prom-           %0.3  = MkArg                    unboundValue, mode[0x5649863f8e50]_p6, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <lgl$->
  void                    Return             l     %0.4
Prom 4:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     mode, <0x564983f6a140>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, mode[0x5649863f8e50]_p5, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <str$->
  void                    Return             l     %0.3
Prom 5:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    expr, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <(sym|code)->
  void                    Return             l     %0.3
Prom 6:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     c, <0x564982e86940>, e0.0
  val?            %0.2  = Call               !     %0.1("call", "expression", "(", "function") e0.0   <str->
  void                    Return             l     %0.2
Prom 7:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     c, <0x564982e86940>, e0.0
  val?            %0.2  = Call               !     %0.1("keepNA", "keepInteger", "niceNames", "showAttributes") e0.0   <str->
  void                    Return             l     %0.2
Prom 8:
BB0
  void                    Visible            v     
  void                    Return             l     -1L
Prom 9:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    control, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str->
  void                    Return             l     %0.3

│ mode[0x5649863f8e50]                                                         │
└──────────────────────────────────────────────────────────────────────────────┘
