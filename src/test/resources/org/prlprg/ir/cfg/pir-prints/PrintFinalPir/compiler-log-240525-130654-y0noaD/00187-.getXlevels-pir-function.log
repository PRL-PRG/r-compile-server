
┌──────────────────────────────────────────────────────────────────────────────┐
│ .getXlevels[0x564985bc9800]                                                  │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;NonRefl0,NonRefl1                    │
│ Properties:                                                                  │
├────── Final PIR Version
.getXlevels[0x564985bc9800]
BB0
  val?^           %0.0  = LdArg                    1
  val?^           %0.1  = LdArg                    0
  val?^ | miss    %0.2  = LdVar              eR    vapply, <env 0x5649834d5b50>
  lgl$#-          %0.3  = Identical                %0.2, function(X, FUN, FUN.VALUE, ..., USE.NAMES=TRU|...
  void                    Branch                   %0.3 -> BB65 (if true) | BB66 (if false)
BB65   <- [0]
  env             e65.0 = MkEnv              l     Terms=%0.1, m=%0.0, parent=<env 0x5649834d5b50>, context 1
  prom-           %65.1 = MkArg                    unboundValue, .getXlevels[0x564985bc9800]_p0, e65.0
  prom-           %65.2 = MkArg                    unboundValue, .getXlevels[0x564985bc9800]_p2, e65.0
  ct              %65.3 = PushContext        lCL   %65.1, %65.2, "", vapply(attr(Terms, "variables"), deparse2, ""), function(X, FUN, FUN.VALUE, ..., USE.NAMES=TRU|..., e65.0
  val?^           %65.4 = CastType                 up %65.2
  val?^           %65.5 = CastType                 up %65.1
  env             e65.6 = MkEnv              l     X=%65.5, FUN=%65.4, FUN.VALUE="", ...(miss)=missingArg, USE.NAMES(miss)=true, parent=R_BaseNamespace, context 1
  prom-           %65.7 = MkArg                    unboundValue, .getXlevels[0x564985bc9800]_p9, e65.6
  val?            %65.8 = StaticCall         !v    match.fun[0x564983caa870](%65.7) e65.6   <(cls|blt)->
  void                    StVar              lW    FUN, %65.8, e65.6
  val?^ | miss    %65.10 = LdVar              eR    is.vector, e65.6
  lgl$#-          %65.11 = Identical                %65.10, function(x, mode="any") <(rir::DispatchTable*)|...
  void                    Branch                   %65.11 -> BB67 (if true) | BB68 (if false)
BB66   <- [0]
  env             e66.0 = (MkEnv)            l     Terms=%0.1, m=%0.0, parent=<env 0x5649834d5b50>, context 1
  fs              %66.1 = FrameState         R     0x564986181b20+0: [], env=e66.0
  void                    Deopt              !v    %66.1, CallTarget@0x5649846bfc98[Call#0], %0.2
BB67   <- [65]
  val?^ | miss    %67.0 = LdVar              eR    X, e65.6
  val?            %67.1 = Force!<lazy>       !v    %67.0, e65.6   <(vec|code)>
  lgl$#-          %67.2 = CallSafeBuiltin    wed   is.vector(%67.1, "any")    <lgl$->
  lgl$#-          %67.3 = Not                d     %67.2, elided
  void                    Branch                   %67.2 -> BB63 (if true) | BB7 (if false)
BB68   <- [65]
  fs              %68.0 = FrameState         R     0x564986181b20+42: [], env=e65.0
  fs              %68.1 = FrameState         R     0x564986d36160+46: [], env=e65.6, next=%68.0
  void                    Deopt              !v    %68.1, CallTarget@0x5649854a8ca0[Call#1], %65.10   !
BB63   <- [67]
  val?^ | miss    %63.0 = LdVar              eR    is.object, e65.6
  lgl$#-          %63.1 = Identical                <blt is.object>, %63.0   <true>
  void                    Branch                   %63.1 -> BB69 (if true) | BB70 (if false)
BB7   <- [67]
  void                    Nop                !     
  lgl$#-          %7.1  = %67.3
  goto BB8
BB69   <- [63]
  val?^ | miss    %69.0 = LdVar              eR    X, e65.6
  val?            %69.1 = Force!<wrapped>    !v    %69.0, e65.6   <vec->
  lgl$#-          %69.2 = CallSafeBuiltin    wed   is.object(%69.1)    <lgl$->
  lgl$-           %69.3 = LOr                      %67.3, %69.2
  lgl$-           %69.4 = %69.3
  goto BB8
BB70   <- [63]
  fs              %70.0 = FrameState         R     0x564986181b20+42: [], env=e65.0
  fs              %70.1 = FrameState         R     0x564986d36160+78: [], env=e65.6, next=%70.0
  prom-           %70.2 = MkArg                    %67.1, .getXlevels[0x564985bc9800]_p10 (!refl), e65.6
  val?~           %70.3 = CastType                 up %70.2
  env             e70.4 = (MkEnv)            l     mode(miss)="any", x=%70.3, parent=R_BaseNamespace, context 0
  fs              %70.5 = FrameState         R     0x564985329090+41: [%67.2], env=e70.4, next=%70.1
  void                    Deopt              !v    %70.5, DeadBranchReached@0x5649854a8ca0[Test#0], %63.1   !
BB8   <- [7, 69]
  lgl$-           %8.0  = Phi                      %69.4:BB69, %7.1:BB7
  lgl$-           %8.1  = %8.0
  lgl$#-          %8.2  = CheckTrueFalse     e     %8.1
  void                    Branch                   %8.2 -> BB62 (if true) | BB11 (if false)
BB62   <- [8]
  val?^ | miss    %62.0 = LdVar              eR    as.list, e65.6
  lgl$#-          %62.1 = Identical                %62.0, function(x, ...) <(rir::DispatchTable*)0x56498|...
  void                    Branch                   %62.1 -> BB71 (if true) | BB72 (if false)
BB11   <- [8]
  void                    Nop                !     
  goto BB12
BB71   <- [62]
  val?^ | miss    %71.0 = LdVar              eR    X, e65.6
  val?            %71.1 = Force!<wrapped>    !v    %71.0, e65.6   <(vec|code)>
  val?            %71.2 = StaticCall         !v    as.list[0x564986b9c670](%71.1) { 0 } e65.6   <vec+>
  void                    StVar              lW    X, %71.2, e65.6
  goto BB12
BB72   <- [62]
  fs              %72.0 = FrameState         R     0x564986181b20+42: [], env=e65.0
  fs              %72.1 = FrameState         R     0x564986d36160+189: [%8.1], env=e65.6, next=%72.0
  void                    Deopt              !v    %72.1, CallTarget@0x5649854a8ca0[Call#3], %62.0   !
BB12   <- [11, 71]
  (cls|spec|blt)  %12.0 = LdFun              !v    .Internal, <0x564982e85698>, e65.6
  prom-           %12.1 = MkArg                    unboundValue, .getXlevels[0x564985bc9800]_p11, e65.6
  val?            %12.2 = Call               !v    %12.0(%12.1) e65.6   <val?+>
  val?            %12.3 = PopContext         C     %12.2, %65.3   <str->
  lgl$#-          %12.4 = IsType                   %12.3 isA val+   <true>
  lgl$#-          %12.5 = IsType                   %12.3 isA val?-
  void                    Branch                   %12.4 -> BB73 (if true) | BB74 (if false)
BB73   <- [12]
  void                    Branch                   %12.5 -> BB75 (if true) | BB76 (if false)
BB74   <- [12]
  void                    Nop                !     
  lgl$#-          %74.1 = %12.4
  dr              %74.2 = DeadBranchReached@0x5649846bfc98[Test#0]
  goto BB13
BB75   <- [73]
  val?-           %75.0 = CastType           d     dn %12.3   <str->
  val?            %75.1 = Extract1_1D        wed   %75.0, -1L, elided   <str->
  void                    StVar              lW    xvars, %75.1, e65.0
  val?^ | miss    %75.3 = LdVar              eR    attr, e65.0
  lgl$#-          %75.4 = Identical                <blt attr>, %75.3   <true>
  void                    Branch                   %75.4 -> BB77 (if true) | BB78 (if false)
BB76   <- [73]
  void                    Nop                !     
  val?            %76.1 = %12.3
  dr              %76.2 = Typecheck@0x5649846bfc98[Type#3]
  goto BB13
BB13   <- [74, 76]
  val?^ | miss    %13.0 = Phi                      %74.1:BB74, %76.1:BB76
  val?^ | miss    %13.1 = %13.0
  dr              %13.2 = Phi                      %74.2:BB74, %76.2:BB76
  dr              %13.3 = %13.2
  fs              %13.4 = FrameState         R     0x564986181b20+42: [%12.3], env=e65.0
  void                    Deopt              !v    %13.4, %13.3, %13.1   !
BB77   <- [75]
  val?^ | miss    %77.0 = LdVar              eR    Terms, e65.0
  val?            %77.1 = Force!<wrapped>    !v    %77.0, e65.0   <code>
  val?            %77.2 = CallBuiltin        !v    attr(%77.1, "response") e65.0   <int$->
  lgl$#-          %77.3 = IsType                   %77.2 isA int$-
  void                    Branch                   %77.3 -> BB79 (if true) | BB80 (if false)
BB78   <- [75]
  fs              %78.0 = FrameState         R     0x564986181b20+101: [], env=e65.0
  void                    Deopt              !v    %78.0, DeadBranchReached@0x5649846bfc98[Test#1], %75.4   !
BB79   <- [77]
  int$-           %79.0 = CastType           d     dn %77.2
  void                    StVar              lW    yvar, %79.0, e65.0
  lgl$-           %79.2 = Gt                 d     %79.0, 0, elided   <lgl$->
  lgl$#-          %79.3 = CheckTrueFalse     e     %79.2
  void                    Branch                   %79.3 -> BB61 (if true) | BB21 (if false)
BB80   <- [77]
  fs              %80.0 = FrameState         R     0x564986181b20+203: [%77.2], env=e65.0
  void                    Deopt              !v    %80.0, Typecheck@0x5649846bfc98[Type#7], %77.2   !
BB61   <- [79]
  val?^ | miss    %61.0 = LdVar              eR    xvars, e65.0
  lgl$#-          %61.1 = IsType                   %61.0 isA val?~- | miss
  void                    Branch                   %61.1 -> BB81 (if true) | BB82 (if false)
BB21   <- [79]
  void                    Nop                !     
  goto BB22
BB81   <- [61]
  val?~- | miss   %81.0 = CastType           d     dn %61.0
  val?-           %81.1 = Force!<value>            %81.0,    <str->
  lgl$#-          %81.2 = IsType                   %81.1 isA val+   <true>
  void                    Branch                   %81.2 -> BB83 (if true) | BB84 (if false)
BB82   <- [61]
  void                    Nop                !     
  val?^ | miss    %82.1 = %61.0
  dr              %82.2 = Typecheck@0x5649846bfc98[Type#9]
  goto BB19
BB22   <- [21, 83]
  val?^ | miss    %22.0 = LdVar              eR    length, e65.0
  lgl$#-          %22.1 = Identical                <blt length>, %22.0   <true>
  void                    Branch                   %22.1 -> BB85 (if true) | BB86 (if false)
BB83   <- [81]
  int$-           %83.0 = Minus              d     %79.0, elided
  val?            %83.1 = Extract1_1D        wed   %81.1, %83.0, elided   <str$->
  void                    StVar              lW    xvars, %83.1, e65.0
  goto BB22
BB84   <- [81]
  void                    Nop                !     
  lgl$#-          %84.1 = %81.2
  dr              %84.2 = DeadBranchReached@0x5649846bfc98[Test#2]
  goto BB19
BB19   <- [82, 84]
  val?^ | miss    %19.0 = Phi                      %82.1:BB82, %84.1:BB84
  val?^ | miss    %19.1 = %19.0
  dr              %19.2 = Phi                      %82.2:BB82, %84.2:BB84
  dr              %19.3 = %19.2
  fs              %19.4 = FrameState         R     0x564986181b20+219: [%79.0], env=e65.0
  void                    Deopt              !v    %19.4, %19.3, %19.1   !
BB85   <- [22]
  val?^ | miss    %85.0 = LdVar              eR    xvars, e65.0
  lgl$#-          %85.1 = IsType                   %85.0 isA val?~- | miss
  void                    Branch                   %85.1 -> BB87 (if true) | BB88 (if false)
BB86   <- [22]
  void                    Nop                !     
  lgl$#-          %86.1 = %22.1
  dr              %86.2 = DeadBranchReached@0x5649846bfc98[Test#3]
  goto BB23
BB87   <- [85]
  val?~- | miss   %87.0 = CastType           d     dn %85.0
  val?-           %87.1 = Force!<value>            %87.0,    <str$->
  (int|real)$-    %87.2 = CallSafeBuiltin    wed   length(%87.1)    <int$->
  lgl$#-          %87.3 = IsType                   %87.2 isA int$-
  void                    Branch                   %87.3 -> BB89 (if true) | BB90 (if false)
BB88   <- [85]
  void                    Nop                !     
  val?^ | miss    %88.1 = %85.0
  dr              %88.2 = Typecheck@0x5649846bfc98[Type#14]
  goto BB23
BB23   <- [86, 88]
  val?^ | miss    %23.0 = Phi                      %86.1:BB86, %88.1:BB88
  val?^ | miss    %23.1 = %23.0
  dr              %23.2 = Phi                      %86.2:BB86, %88.2:BB88
  dr              %23.3 = %23.2
  fs              %23.4 = FrameState         R     0x564986181b20+319: [], env=e65.0
  void                    Deopt              !v    %23.4, %23.3, %23.1   !
BB89   <- [87]
  int$-           %89.0 = CastType           d     dn %87.2
  lgl$#-          %89.1 = CheckTrueFalse     e     %89.0
  void                    Branch                   %89.1 -> BB29 (if true) | BB27 (if false)
BB90   <- [87]
  void                    Nop                !     
  (int|real)$-    %90.1 = %87.2
  dr              %90.2 = Typecheck@0x5649846bfc98[Type#15]
  goto BB25
BB29   <- [89]
  val?^ | miss    %29.0 = LdVar              eR    lapply, e65.0
  lgl$#-          %29.1 = Identical                %29.0, function(X, FUN, ...) <(rir::DispatchTable*)0x|...
  void                    Branch                   %29.1 -> BB91 (if true) | BB92 (if false)
BB27   <- [89]
  void                    Invisible          v     
  nil-            %27.1 = nil
  goto BB28
BB25   <- [90, 92]
  val?^ | miss    %25.0 = Phi                      %90.1:BB90, %92.1:BB92
  val?^ | miss    %25.1 = %25.0
  dr              %25.2 = Phi                      %90.2:BB90, %92.2:BB92
  dr              %25.3 = %25.2
  fs              %25.4 = FrameState         R     0x564986181b20+410: [%87.2], env=e65.0
  void                    Deopt              !v    %25.4, %25.3, %25.1   !
BB91   <- [29]
  prom-           %91.0 = MkArg                    unboundValue, .getXlevels[0x564985bc9800]_p3, e65.0
  cls             %91.1 = MkCls                    .getXlevels@Prom(5)0, e65.0
  prom-           %91.2 = MkArg                    %91.1, .getXlevels[0x564985bc9800]_p5 (!refl), e65.0
  ct              %91.3 = PushContext        lCL   %91.0, %91.2, lapply([(m, xvars), function(<lst x=R_MissingA|..., function(X, FUN, ...) <(rir::DispatchTable*)0x|..., e65.0
  cls~            %91.4 = CastType                 up %91.2
  val?^           %91.5 = CastType                 up %91.0
  env             e91.6 = MkEnv              l     X=%91.5, FUN=%91.4, ...(miss)=missingArg, parent=R_BaseNamespace, context 1
  prom-           %91.7 = MkArg                    unboundValue, .getXlevels[0x564985bc9800]_p26 (!refl), e91.6
  val?            %91.8 = StaticCall         !v    match.fun[0x564983caa870](%91.7) e91.6   <(cls|blt)->
  void                    StVar              lW    FUN, %91.8, e91.6
  val?^ | miss    %91.10 = LdVar              eR    is.vector, e91.6
  lgl$#-          %91.11 = Identical                %91.10, function(x, mode="any") <(rir::DispatchTable*)|...
  void                    Branch                   %91.11 -> BB93 (if true) | BB94 (if false)
BB92   <- [29]
  void                    Nop                !     
  val?^ | miss    %92.1 = %29.0
  dr              %92.2 = CallTarget@0x5649846bfc98[Call#4]
  goto BB25
BB28   <- [27, 109]
  val?            %28.0 = Phi                      %27.1:BB27, %109.4:BB109
  val?            %28.1 = %28.0
  void                    Return             l     %28.1
BB93   <- [91]
  val?^ | miss    %93.0 = LdVar              eR    X, e91.6
  val?            %93.1 = Force!<lazy>       !v    %93.0, e91.6   <vec>
  lgl$#-          %93.2 = CallSafeBuiltin    wed   is.vector(%93.1, "any")    <lgl$->
  lgl$#-          %93.3 = Not                d     %93.2, elided
  void                    Branch                   %93.2 -> BB60 (if true) | BB34 (if false)
BB94   <- [91]
  fs              %94.0 = FrameState         R     0x564986181b20+469: [], env=e65.0
  fs              %94.1 = FrameState         R     0x564985b54fb0+46: [], env=e91.6, next=%94.0
  void                    Deopt              !v    %94.1, CallTarget@0x56498537cf90[Call#1], %91.10   !
BB60   <- [93]
  val?^ | miss    %60.0 = LdVar              eR    is.object, e91.6
  lgl$#-          %60.1 = Identical                <blt is.object>, %60.0   <true>
  void                    Branch                   %60.1 -> BB95 (if true) | BB96 (if false)
BB34   <- [93]
  void                    Nop                !     
  lgl$#-          %34.1 = %93.3
  goto BB35
BB95   <- [60]
  val?^ | miss    %95.0 = LdVar              eR    X, e91.6
  val?            %95.1 = Force!<wrapped>    !v    %95.0, e91.6   <vec$->
  lgl$#-          %95.2 = CallSafeBuiltin    wed   is.object(%95.1)    <lgl$->
  lgl$-           %95.3 = LOr                      %93.3, %95.2
  lgl$-           %95.4 = %95.3
  goto BB35
BB96   <- [60]
  fs              %96.0 = FrameState         R     0x564986181b20+469: [], env=e65.0
  fs              %96.1 = FrameState         R     0x564985b54fb0+78: [], env=e91.6, next=%96.0
  prom-           %96.2 = MkArg                    %93.1, .getXlevels[0x564985bc9800]_p28 (!refl), e91.6
  val?~           %96.3 = CastType                 up %96.2
  env             e96.4 = (MkEnv)            l     mode(miss)="any", x=%96.3, parent=R_BaseNamespace, context 0
  fs              %96.5 = FrameState         R     0x564985329090+41: [%93.2], env=e96.4, next=%96.1
  void                    Deopt              !v    %96.5, DeadBranchReached@0x56498537cf90[Test#0], %60.1   !
BB35   <- [34, 95]
  lgl$-           %35.0 = Phi                      %95.4:BB95, %34.1:BB34
  lgl$-           %35.1 = %35.0
  lgl$#-          %35.2 = CheckTrueFalse     e     %35.1
  void                    Branch                   %35.2 -> BB59 (if true) | BB38 (if false)
BB59   <- [35]
  val?^ | miss    %59.0 = LdVar              eR    as.list, e91.6
  lgl$#-          %59.1 = Identical                %59.0, function(x, ...) <(rir::DispatchTable*)0x56498|...
  void                    Branch                   %59.1 -> BB97 (if true) | BB98 (if false)
BB38   <- [35]
  void                    Nop                !     
  goto BB39
BB97   <- [59]
  val?^ | miss    %97.0 = LdVar              eR    X, e91.6
  val?            %97.1 = Force!<wrapped>    !v    %97.0, e91.6   <vec>
  val?            %97.2 = StaticCall         !v    as.list[0x564986b9c670](%97.1) { 0 } e91.6   <vec+>
  void                    StVar              lW    X, %97.2, e91.6
  goto BB39
BB98   <- [59]
  fs              %98.0 = FrameState         R     0x564986181b20+469: [], env=e65.0
  fs              %98.1 = FrameState         R     0x564985b54fb0+189: [%35.1], env=e91.6, next=%98.0
  void                    Deopt              !v    %98.1, CallTarget@0x56498537cf90[Call#3], %59.0   !
BB39   <- [38, 97]
  val?^ | miss    %39.0 = LdVar              eR    X, e91.6
  val?            %39.1 = Force!<wrapped>    !v    %39.0, e91.6   <vec+>
  (nil|str)-      %39.2 = Names                    %39.1
  int$-           %39.3 = Length                   %39.1
  vec-            %39.4 = CallSafeBuiltin    wed   vector("list", %39.3) 
  val+            %39.5 = SetNames           e     %39.4, %39.2
  int$#-          %39.6 = 0L
  val+            %39.7 = %39.5
  goto BB40
BB40   <- [41, 39]
  int$-           %40.0 = Phi                      %39.6:BB39, %41.7:BB41
  int$-           %40.1 = %40.0
  val?            %40.2 = Phi                      %39.7:BB39, %41.8:BB41
  val?            %40.3 = %40.2
  int$-           %40.4 = Inc                      %40.1
  lgl$-           %40.5 = Lt                 d     %39.3, %40.4, elided
  lgl$#-          %40.6 = Identical                %40.5, true
  void                    Branch                   %40.6 -> BB42 (if true) | BB41 (if false)
BB42   <- [40]
  val?            %42.0 = PopContext         C     %40.3, %91.3   <vec$+>
  void                    StVar              lW    xlev, %42.0, e65.0
  lgl$#-          %42.2 = IsType                   %42.0 isA val+   <true>
  val             %42.3 = ChkMissing         e     %42.0
  void                    Branch                   %42.2 -> BB99 (if true) | BB100 (if false)
BB41   <- [40]
  void                    StVar              lW    i, %40.4, e91.6
  (cls|spec|blt)  %41.1 = LdFun              !v    FUN, e91.6
  prom-           %41.2 = MkArg                    unboundValue, .getXlevels[0x564985bc9800]_p29, e91.6
  (miss|dots)     %41.3 = LdDots             R     , e91.6
  *dots-          %41.4 = ExpandDots               %41.3
  val?            %41.5 = NamedCall          !v    %41.1(%41.2, .xpandDotsTrigger=%41.4) e91.6   <(str|vec)$->
  val?            %41.6 = SetVecElt          e     %41.5, %40.3, %40.4
  int$-           %41.7 = %40.4
  val?            %41.8 = %41.6
  goto BB40
BB99   <- [42]
  val?^ | miss    %99.0 = LdVar              eR    vapply, e65.0
  lgl$#-          %99.1 = Identical                %99.0, function(X, FUN, FUN.VALUE, ..., USE.NAMES=TRU|...
  void                    Branch                   %99.1 -> BB101 (if true) | BB102 (if false)
BB100   <- [42]
  void                    Nop                !     
  lgl$#-          %100.1 = %42.2
  dr              %100.2 = DeadBranchReached@0x5649846bfc98[Test#5]
  goto BB43
BB101   <- [99]
  prom-           %101.0 = MkArg                    unboundValue, .getXlevels[0x564985bc9800]_p6 (!refl), e65.0
  prom-           %101.1 = MkArg                    unboundValue, .getXlevels[0x564985bc9800]_p7, e65.0
  ct              %101.2 = PushContext        lCL   %101.0, %101.1, na-lgl, vapply(xlev, is.null, NA), function(X, FUN, FUN.VALUE, ..., USE.NAMES=TRU|..., e65.0
  val?^           %101.3 = CastType                 up %101.1
  val?^           %101.4 = CastType                 up %101.0
  env             e101.5 = MkEnv              l     X=%101.4, FUN=%101.3, FUN.VALUE=na-lgl, ...(miss)=missingArg, USE.NAMES(miss)=true, parent=R_BaseNamespace, context 1
  prom-           %101.6 = MkArg                    unboundValue, .getXlevels[0x564985bc9800]_p17, e101.5
  val?            %101.7 = StaticCall         !v    match.fun[0x564983caa870](%101.6) e101.5   <(cls|blt)->
  void                    StVar              lW    FUN, %101.7, e101.5
  val?^ | miss    %101.9 = LdVar              eR    is.vector, e101.5
  lgl$#-          %101.10 = Identical                %101.9, function(x, mode="any") <(rir::DispatchTable*)|...
  void                    Branch                   %101.10 -> BB103 (if true) | BB104 (if false)
BB102   <- [99]
  void                    Nop                !     
  val?^ | miss    %102.1 = %99.0
  dr              %102.2 = CallTarget@0x5649846bfc98[Call#6]
  goto BB43
BB43   <- [100, 102]
  val?^ | miss    %43.0 = Phi                      %100.1:BB100, %102.1:BB102
  val?^ | miss    %43.1 = %43.0
  dr              %43.2 = Phi                      %100.2:BB100, %102.2:BB102
  dr              %43.3 = %43.2
  fs              %43.4 = FrameState         R     0x564986181b20+483: [], env=e65.0
  void                    Deopt              !v    %43.4, %43.3, %43.1   !
BB103   <- [101]
  val?^ | miss    %103.0 = LdVar              eR    X, e101.5
  val?            %103.1 = Force!<lazy>       !v    %103.0, e101.5   <(vec|code)>
  lgl$#-          %103.2 = CallSafeBuiltin    wed   is.vector(%103.1, "any")    <lgl$->
  lgl$#-          %103.3 = Not                d     %103.2, elided
  void                    Branch                   %103.2 -> BB58 (if true) | BB49 (if false)
BB104   <- [101]
  fs              %104.0 = FrameState         R     0x564986181b20+570: [%42.0], env=e65.0
  fs              %104.1 = FrameState         R     0x564986d36160+46: [], env=e101.5, next=%104.0
  void                    Deopt              !v    %104.1, CallTarget@0x5649854a8ca0[Call#1], %101.9   !
BB58   <- [103]
  val?^ | miss    %58.0 = LdVar              eR    is.object, e101.5
  lgl$#-          %58.1 = Identical                <blt is.object>, %58.0   <true>
  void                    Branch                   %58.1 -> BB105 (if true) | BB106 (if false)
BB49   <- [103]
  void                    Nop                !     
  lgl$#-          %49.1 = %103.3
  goto BB50
BB105   <- [58]
  val?^ | miss    %105.0 = LdVar              eR    X, e101.5
  val?            %105.1 = Force!<wrapped>    !v    %105.0, e101.5   <vec->
  lgl$#-          %105.2 = CallSafeBuiltin    wed   is.object(%105.1)    <lgl$->
  lgl$-           %105.3 = LOr                      %103.3, %105.2
  lgl$-           %105.4 = %105.3
  goto BB50
BB106   <- [58]
  fs              %106.0 = FrameState         R     0x564986181b20+570: [%42.0], env=e65.0
  fs              %106.1 = FrameState         R     0x564986d36160+78: [], env=e101.5, next=%106.0
  prom-           %106.2 = MkArg                    %103.1, .getXlevels[0x564985bc9800]_p18 (!refl), e101.5
  val?~           %106.3 = CastType                 up %106.2
  env             e106.4 = (MkEnv)            l     mode(miss)="any", x=%106.3, parent=R_BaseNamespace, context 0
  fs              %106.5 = FrameState         R     0x564985329090+41: [%103.2], env=e106.4, next=%106.1
  void                    Deopt              !v    %106.5, DeadBranchReached@0x5649854a8ca0[Test#0], %58.1   !
BB50   <- [49, 105]
  lgl$-           %50.0 = Phi                      %105.4:BB105, %49.1:BB49
  lgl$-           %50.1 = %50.0
  lgl$#-          %50.2 = CheckTrueFalse     e     %50.1
  void                    Branch                   %50.2 -> BB57 (if true) | BB53 (if false)
BB57   <- [50]
  val?^ | miss    %57.0 = LdVar              eR    as.list, e101.5
  lgl$#-          %57.1 = Identical                %57.0, function(x, ...) <(rir::DispatchTable*)0x56498|...
  void                    Branch                   %57.1 -> BB107 (if true) | BB108 (if false)
BB53   <- [50]
  void                    Nop                !     
  goto BB54
BB107   <- [57]
  val?^ | miss    %107.0 = LdVar              eR    X, e101.5
  val?            %107.1 = Force!<wrapped>    !v    %107.0, e101.5   <(vec|code)>
  val?            %107.2 = StaticCall         !v    as.list[0x564986b9c670](%107.1) { 0 } e101.5   <vec+>
  void                    StVar              lW    X, %107.2, e101.5
  goto BB54
BB108   <- [57]
  fs              %108.0 = FrameState         R     0x564986181b20+570: [%42.0], env=e65.0
  fs              %108.1 = FrameState         R     0x564986d36160+189: [%50.1], env=e101.5, next=%108.0
  void                    Deopt              !v    %108.1, CallTarget@0x5649854a8ca0[Call#3], %57.0   !
BB54   <- [53, 107]
  (cls|spec|blt)  %54.0 = LdFun              !v    .Internal, <0x564982e85698>, e101.5
  prom-           %54.1 = MkArg                    unboundValue, .getXlevels[0x564985bc9800]_p19, e101.5
  val?            %54.2 = Call               !v    %54.0(%54.1) e101.5   <val?+>
  val?            %54.3 = PopContext         C     %54.2, %101.2   <lgl$+>
  lgl$#-          %54.4 = IsType                   %54.3 isA lgl$+
  void                    Branch                   %54.4 -> BB109 (if true) | BB110 (if false)
BB109   <- [54]
  lgl$+           %109.0 = CastType           d     dn %54.3
  lgl$            %109.1 = Not                wed   %109.0, elided
  val?            %109.2 = Extract1_1D        !v    %42.0, %109.1, e65.0   <vec+>
  void                    Visible            v     
  val?            %109.4 = %109.2
  goto BB28
BB110   <- [54]
  fs              %110.0 = FrameState         R     0x564986181b20+570: [%42.0, %54.3], env=e65.0
  void                    Deopt              !v    %110.0, Typecheck@0x5649846bfc98[Type#27], %54.3   !
Prom 0:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     attr, <0x564982e86080>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .getXlevels[0x564985bc9800]_p1, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2, "variables") e0.0   <code->
  void                    Return             l     %0.3
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    Terms, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <code>
  void                    Return             l     %0.3
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    deparse2, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <cls->
  void                    Return             l     %0.3
Prom 3:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    m, e0.0
  val?            %0.2  = Force<lazy>        !v    %0.1, e0.0   <vec>
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <false>
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    xvars, e0.0
  val?            %2.1  = Force              !v    %2.0, e0.0   <val?_>
  val?            %2.2  = %2.1
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, .getXlevels[0x564985bc9800]_p4, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.2:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract1_1D        !v    %0.2, %3.1, e0.0   <vec$>
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 4:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    xvars, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 5:
BB0
  env             e0.0  = LdFunctionEnv            
  cls             %0.1  = MkCls                    .getXlevels@Prom(5)0, e0.0
  void                    Return             l     %0.1
Prom 6:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    xlev, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <vec$+>
  void                    Return             l     %0.3
Prom 7:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    is.null, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <blt->
  void                    Return             l     %0.3
Prom 9:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    FUN, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <(cls|blt)->
  void                    Return             l     %0.3
Prom 10:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    X, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <(vec|code)>
  void                    Return             l     %0.3
Prom 11:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     vapply, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .getXlevels[0x564985bc9800]_p12, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .getXlevels[0x564985bc9800]_p13, e0.0
  prom-           %0.4  = MkArg                    unboundValue, .getXlevels[0x564985bc9800]_p14, e0.0
  prom-           %0.5  = MkArg                    unboundValue, .getXlevels[0x564985bc9800]_p15, e0.0
  val?            %0.6  = Call               !     %0.1(%0.2, %0.3, %0.4, %0.5) e0.0   <val?_>
  void                    Return             l     %0.6
Prom 12:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    X, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 13:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    FUN, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 14:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    FUN.VALUE, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 15:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    USE.NAMES, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 17:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    FUN, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <(cls|blt)->
  void                    Return             l     %0.3
Prom 18:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    X, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <(vec|code)>
  void                    Return             l     %0.3
Prom 19:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     vapply, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .getXlevels[0x564985bc9800]_p20, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .getXlevels[0x564985bc9800]_p21, e0.0
  prom-           %0.4  = MkArg                    unboundValue, .getXlevels[0x564985bc9800]_p22, e0.0
  prom-           %0.5  = MkArg                    unboundValue, .getXlevels[0x564985bc9800]_p23, e0.0
  val?            %0.6  = Call               !     %0.1(%0.2, %0.3, %0.4, %0.5) e0.0   <val?_>
  void                    Return             l     %0.6
Prom 20:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    X, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 21:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    FUN, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 22:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    FUN.VALUE, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 23:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    USE.NAMES, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 26:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    FUN, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <(cls|blt)->
  void                    Return             l     %0.3
Prom 28:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    X, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <vec>
  void                    Return             l     %0.3
Prom 29:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    X, e0.0
  val?            %0.2  = Force<wrapped>     !v    %0.1, e0.0   <vec+>
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <true>
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    i, e0.0
  val?            %2.1  = Force<value>       !v    %2.0, e0.0   <int$->
  val?            %2.2  = %2.1
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, .getXlevels[0x564985bc9800]_p30, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.2:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract2_1D        !v    %0.2, %3.1, e0.0   <(int|str)>
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 30:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    i, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3

│ .getXlevels[0x564985bc9800]                                                  │
└──────────────────────────────────────────────────────────────────────────────┘
