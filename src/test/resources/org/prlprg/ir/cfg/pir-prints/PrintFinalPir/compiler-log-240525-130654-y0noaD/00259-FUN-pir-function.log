
┌──────────────────────────────────────────────────────────────────────────────┐
│ FUN[0x564986b8bb30]                                                          │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch                                      │
│ Properties:                                                                  │
├────── Final PIR Version
FUN[0x564986b8bb30]
BB0
  val?^           %0.0  = LdArg                    0
  val?^ | miss    %0.1  = LdVar              eR    FUN, <env 0x564983f63480>
  lgl$#-          %0.2  = Identical                %0.1, function(f) <(rir::DispatchTable*)0x5649869600|...
  void                    Branch                   %0.2 -> BB55 (if true) | BB56 (if false)
BB55   <- [0]
  env             e55.0 = MkEnv              l     d=%0.0, parent=<env 0x564983f63480>, context 1
  prom-           %55.1 = MkArg                    unboundValue, FUN[0x564986b8bb30]_p0, e55.0
  (miss|dots)     %55.2 = LdDots             R     , <env 0x564983f63480>
  *dots-          %55.3 = ExpandDots               %55.2
  val?            %55.4 = NamedCall          !v    function(f) <(rir::DispatchTable*)0x5649869600|...(%55.1, .xpandDotsTrigger=%55.3) e55.0   <nil->
  void                    StVar              lW    r, %55.4, e55.0
  val?^ | miss    %55.6 = LdVar              eR    is.leaf, e55.0
  lgl$#-          %55.7 = Identical                %55.6, function(object) <(rir::DispatchTable*)0x56498|...
  void                    Branch                   %55.7 -> BB57 (if true) | BB58 (if false)
BB56   <- [0]
  env             e56.0 = (MkEnv)            l     d=%0.0, parent=<env 0x564983f63480>, context 1
  fs              %56.1 = FrameState         R     0x5649862efa70+0: [], env=e56.0
  void                    Deopt              !v    %56.1, CallTarget@0x564984b1fdd8[Call#0], %0.1
BB57   <- [55]
  prom-           %57.0 = MkArg                    unboundValue, FUN[0x564986b8bb30]_p1, e55.0
  ct              %57.1 = PushContext        lCL   %57.0, is.leaf(d), function(object) <(rir::DispatchTable*)0x56498|..., e55.0
  val?^           %57.2 = CastType                 up %57.0
  val?^ | miss    %57.3 = LdVar              eR    is.logical, <env 0x5649834d5b50>
  lgl$#-          %57.4 = Identical                <blt is.logical>, %57.3   <true>
  void                    Branch                   %57.4 -> BB59 (if true) | BB60 (if false)
BB58   <- [55]
  fs              %58.0 = FrameState         R     0x5649862efa70+59: [], env=e55.0
  void                    Deopt              !v    %58.0, CallTarget@0x564984b1fdd8[Call#1], %55.6   !
BB59   <- [57]
  val?^ | miss    %59.0 = LdVar              eR    attr, <env 0x5649834d5b50>
  lgl$#-          %59.1 = Identical                <blt attr>, %59.0   <true>
  void                    Branch                   %59.1 -> BB61 (if true) | BB62 (if false)
BB60   <- [57]
  void                    Nop                !     
  lgl$#-          %60.1 = %57.4
  dr              %60.2 = DeadBranchReached@0x564986ff6d18[Test#0]
  goto BB5
BB61   <- [59]
  env             e61.0 = MkEnv              l     object=%57.2, parent=<env 0x5649834d5b50>, context 1
  val?            %61.1 = Force!<lazy>       !vL   %57.2, e61.0   <(int|vec)>
  val?            %61.2 = CallBuiltin        !v    attr(%61.1, "leaf") e61.0   <(nil|lgl)->
  void                    StVar              lW    L, %61.2, e61.0
  val+            %61.4 = CallSafeBuiltin    wed   is.logical(%61.2)    <lgl$->
  lgl$#-          %61.5 = IsType                   %61.4 isA lgl$-
  void                    Branch                   %61.5 -> BB63 (if true) | BB64 (if false)
BB62   <- [59]
  void                    Nop                !     
  lgl$#-          %62.1 = %59.1
  dr              %62.2 = DeadBranchReached@0x564986ff6d18[Test#1]
  goto BB5
BB5   <- [60, 62]
  val?^ | miss    %5.0  = Phi                      %60.1:BB60, %62.1:BB62
  val?^ | miss    %5.1  = %5.0
  dr              %5.2  = Phi                      %60.2:BB60, %62.2:BB62
  dr              %5.3  = %5.2
  fs              %5.4  = FrameState         R     0x5649862efa70+91: [], env=e55.0
  env             e5.5  = (MkEnv)            l     object=%57.2, parent=<env 0x5649834d5b50>, context 1
  fs              %5.6  = FrameState         R     0x564986c4f680+17: [<blt is.logical>, %57.4], env=e5.5, next=%5.4
  void                    Deopt              !v    %5.6, %5.3, %5.1   !
BB63   <- [61]
  lgl$-           %63.0 = CastType           d     dn %61.4
  lgl$-           %63.1 = AsLogical                %63.0
  lgl$#-          %63.2 = Identical                %63.1, false
  void                    Branch                   %63.2 -> BB53 (if true) | BB9 (if false)
BB64   <- [61]
  fs              %64.0 = FrameState         R     0x5649862efa70+91: [], env=e55.0
  fs              %64.1 = FrameState         R     0x564986c4f680+195: [%61.4], env=e61.0, next=%64.0
  void                    Deopt              !v    %64.1, Typecheck@0x564986ff6d18[Type#5], %61.4   !
BB53   <- [63]
  void                    Nop                !     
  lgl$-           %53.1 = %63.1
  goto BB10
BB9   <- [63]
  val             %9.0  = ChkMissing         e     %61.2
  lgl$-           %9.1  = AsLogical          e     %61.2
  lgl$-           %9.2  = LAnd                     %63.1, %9.1
  lgl$-           %9.3  = %9.2
  goto BB10
BB10   <- [53, 9]
  lgl$-           %10.0 = Phi                      %9.3:BB9, %53.1:BB53
  lgl$-           %10.1 = %10.0
  val?            %10.2 = PopContext         C     %10.1, %57.1   <lgl$->
  lgl$#-          %10.3 = IsType                   %10.2 isA lgl$-
  void                    Branch                   %10.3 -> BB65 (if true) | BB66 (if false)
BB65   <- [10]
  lgl$-           %65.0 = CastType           d     dn %10.2
  lgl$-           %65.1 = Not                d     %65.0, elided
  lgl$#-          %65.2 = CheckTrueFalse     e     %65.1
  void                    Branch                   %65.2 -> BB17 (if true) | BB13 (if false)
BB66   <- [10]
  void                    Nop                !     
  val?            %66.1 = %10.2
  dr              %66.2 = Typecheck@0x564984b1fdd8[Type#3]
  goto BB11
BB17   <- [65]
  val?^ | miss    %17.0 = LdVar              eR    r, e55.0
  lgl$#-          %17.1 = IsType                   %17.0 isA val?~- | miss
  void                    Branch                   %17.1 -> BB67 (if true) | BB68 (if false)
BB13   <- [65]
  void                    Nop                !     
  goto BB14
BB11   <- [66, 68, 72]
  val?^ | miss    %11.0 = Phi                      %66.1:BB66, %68.1:BB68, %72.1:BB72
  val?^ | miss    %11.1 = %11.0
  dr              %11.2 = Phi                      %66.2:BB66, %68.2:BB68, %72.2:BB72
  dr              %11.3 = %11.2
  fs              %11.4 = FrameState         R     0x5649862efa70+91: [%10.2], env=e55.0
  void                    Deopt              !v    %11.4, %11.3, %11.1   !
BB67   <- [17]
  val?~- | miss   %67.0 = CastType           d     dn %17.0
  val?-           %67.1 = Force!<value>            %67.0,    <nil->
  lgl$-           %67.2 = Is                       %67.1, list
  lgl$-           %67.3 = Not                d     %67.2, elided
  lgl$#-          %67.4 = CheckTrueFalse     e     %67.3
  void                    Branch                   %67.4 -> BB52 (if true) | BB18 (if false)
BB68   <- [17]
  void                    Nop                !     
  val?^ | miss    %68.1 = %17.0
  dr              %68.2 = Typecheck@0x564984b1fdd8[Type#4]
  goto BB11
BB14   <- [13, 97]
  val?^ | miss    %14.0 = LdVar              eR    r, e55.0
  lgl$#-          %14.1 = IsType                   %14.0 isA val?~- | miss
  void                    Branch                   %14.1 -> BB69 (if true) | BB70 (if false)
BB52   <- [67]
  val?^ | miss    %52.0 = LdVar              eR    as.list, e55.0
  lgl$#-          %52.1 = Identical                %52.0, function(x, ...) <(rir::DispatchTable*)0x56498|...
  void                    Branch                   %52.1 -> BB71 (if true) | BB72 (if false)
BB18   <- [67]
  void                    Nop                !     
  goto BB19
BB69   <- [14]
  val?~- | miss   %69.0 = CastType           d     dn %14.0
  void                    Visible            v     
  val?-           %69.2 = Force!<value>            %69.0,    <nil->
  void                    Return             l     %69.2
BB70   <- [14]
  fs              %70.0 = FrameState         R     0x5649862efa70+639: [], env=e55.0
  void                    Deopt              !v    %70.0, Typecheck@0x564984b1fdd8[Type#24], %14.0   !
BB71   <- [52]
  val?            %71.0 = StaticCall         !v    as.list[0x564985528280](%67.1) { 0 } e55.0   <vec->
  void                    StVar              lW    r, %71.0, e55.0
  goto BB19
BB72   <- [52]
  void                    Nop                !     
  val?^ | miss    %72.1 = %52.0
  dr              %72.2 = CallTarget@0x564984b1fdd8[Call#2]
  goto BB11
BB19   <- [18, 71]
  val?^ | miss    %19.0 = LdVar              eR    length, e55.0
  lgl$#-          %19.1 = Identical                <blt length>, %19.0   <true>
  void                    Branch                   %19.1 -> BB73 (if true) | BB74 (if false)
BB73   <- [19]
  val?^ | miss    %73.0 = LdVar              eR    r, e55.0
  lgl$#-          %73.1 = IsType                   %73.0 isA val?~- | miss
  void                    Branch                   %73.1 -> BB75 (if true) | BB76 (if false)
BB74   <- [19]
  void                    Nop                !     
  lgl$#-          %74.1 = %19.1
  dr              %74.2 = DeadBranchReached@0x564984b1fdd8[Test#0]
  goto BB20
BB75   <- [73]
  val?~- | miss   %75.0 = CastType           d     dn %73.0
  val?-           %75.1 = Force!<value>            %75.0,    <vec->
  (int|real)$-    %75.2 = CallSafeBuiltin    wed   length(%75.1)    <int$->
  lgl$#-          %75.3 = IsType                   %75.2 isA int$-
  void                    Branch                   %75.3 -> BB77 (if true) | BB78 (if false)
BB76   <- [73]
  void                    Nop                !     
  val?^ | miss    %76.1 = %73.0
  dr              %76.2 = Typecheck@0x564984b1fdd8[Type#8]
  goto BB20
BB20   <- [74, 76]
  val?^ | miss    %20.0 = Phi                      %74.1:BB74, %76.1:BB76
  val?^ | miss    %20.1 = %20.0
  dr              %20.2 = Phi                      %74.2:BB74, %76.2:BB76
  dr              %20.3 = %20.2
  fs              %20.4 = FrameState         R     0x5649862efa70+185: [], env=e55.0
  void                    Deopt              !v    %20.4, %20.3, %20.1   !
BB77   <- [75]
  int$-           %77.0 = CastType           d     dn %75.2
  val?^ | miss    %77.1 = LdVar              eR    d, e55.0
  val?            %77.2 = Force!<wrapped>    !v    %77.1, e55.0   <vec>
  val?            %77.3 = CallBuiltin        !v    length(%77.2) e55.0   <int$->
  lgl$#-          %77.4 = IsType                   %77.3 isA int$-
  void                    Branch                   %77.4 -> BB79 (if true) | BB80 (if false)
BB78   <- [75]
  fs              %78.0 = FrameState         R     0x5649862efa70+276: [%75.2], env=e55.0
  void                    Deopt              !v    %78.0, Typecheck@0x564984b1fdd8[Type#9], %75.2   !
BB79   <- [77]
  int$-           %79.0 = CastType           d     dn %77.3
  void                    StVar              lW    n, %79.0, e55.0
  lgl$-           %79.2 = Lt                 d     %77.0, %79.0, elided   <lgl$->
  lgl$#-          %79.3 = CheckTrueFalse     e     %79.2
  void                    Branch                   %79.3 -> BB49 (if true) | BB28 (if false)
BB80   <- [77]
  fs              %80.0 = FrameState         R     0x5649862efa70+372: [%77.0, %77.3], env=e55.0
  void                    Deopt              !v    %80.0, Typecheck@0x564984b1fdd8[Type#12], %77.3   !
BB49   <- [79]
  val?^ | miss    %49.0 = LdVar              eR    vector, e55.0
  lgl$#-          %49.1 = Identical                %49.0, function(mode="logical", length=0L) <(rir::Dis|...
  void                    Branch                   %49.1 -> BB83 (if true) | BB84 (if false)
BB28   <- [79]
  void                    Nop                !     
  goto BB29
BB83   <- [49]
  vec-            %83.0 = CallSafeBuiltin    wed   vector("list", %79.0)    <vec->
  val?^ | miss    %83.1 = LdVar              eR    r !upd, e55.0
  lgl$#-          %83.2 = IsType                   %83.1 isA val?~- | miss
  void                    Branch                   %83.2 -> BB85 (if true) | BB86 (if false)
BB84   <- [49]
  fs              %84.0 = FrameState         R     0x5649862efa70+388: [%77.0, %79.0], env=e55.0
  void                    Deopt              !v    %84.0, CallTarget@0x564984b1fdd8[Call#5], %49.0   !
BB29   <- [28, 89]
  val?^ | miss    %29.0 = LdVar              eR    lapply, e55.0
  lgl$#-          %29.1 = Identical                %29.0, function(X, FUN, ...) <(rir::DispatchTable*)0x|...
  void                    Branch                   %29.1 -> BB81 (if true) | BB82 (if false)
BB85   <- [83]
  val?~- | miss   %85.0 = CastType           d     dn %83.1
  val?-           %85.1 = Force!<value>            %85.0,    <vec->
  val?^ | miss    %85.2 = LdVar              eR    seq_len, e55.0
  lgl$#-          %85.3 = Identical                <blt seq_len>, %85.2   <true>
  void                    Branch                   %85.3 -> BB89 (if true) | BB90 (if false)
BB86   <- [83]
  void                    Nop                !     
  val?^ | miss    %86.1 = %83.1
  dr              %86.2 = Typecheck@0x564984b1fdd8[Type#16]
  goto BB50
BB81   <- [29]
  prom-           %81.0 = MkArg                    unboundValue, FUN[0x564986b8bb30]_p2, e55.0
  prom-           %81.1 = MkArg                    unboundValue, FUN[0x564986b8bb30]_p3, e55.0
  ct              %81.2 = PushContext        lCL   %81.0, %81.1, lapply(d, Napply), function(X, FUN, ...) <(rir::DispatchTable*)0x|..., e55.0
  val?^           %81.3 = CastType                 up %81.1
  val?^           %81.4 = CastType                 up %81.0
  env             e81.5 = MkEnv              l     X=%81.4, FUN=%81.3, ...(miss)=missingArg, parent=R_BaseNamespace, context 1
  prom-           %81.6 = MkArg                    unboundValue, FUN[0x564986b8bb30]_p7, e81.5
  val?            %81.7 = StaticCall         !v    match.fun[0x56498531dc00](%81.6) e81.5   <(cls|blt)->
  void                    StVar              lW    FUN, %81.7, e81.5
  val?^ | miss    %81.9 = LdVar              eR    is.vector, e81.5
  lgl$#-          %81.10 = Identical                %81.9, function(x, mode="any") <(rir::DispatchTable*)|...
  void                    Branch                   %81.10 -> BB87 (if true) | BB88 (if false)
BB82   <- [29]
  fs              %82.0 = FrameState         R     0x5649862efa70+568: [], env=e55.0
  void                    Deopt              !v    %82.0, CallTarget@0x564984b1fdd8[Call#7], %29.0   !
BB89   <- [85]
  val+            %89.0 = CallSafeBuiltin    wed   seq_len(%79.0)    <int->
  val?+           %89.1 = Subassign1_1D      wed   %83.0, %85.1, %89.0, elided
  void                    StVar              lW    r, %89.1, e55.0
  goto BB29
BB90   <- [85]
  void                    Nop                !     
  lgl$#-          %90.1 = %85.3
  dr              %90.2 = DeadBranchReached@0x564984b1fdd8[Test#2]
  goto BB50
BB50   <- [86, 90]
  val?^ | miss    %50.0 = Phi                      %86.1:BB86, %90.1:BB90
  val?^ | miss    %50.1 = %50.0
  dr              %50.2 = Phi                      %86.2:BB86, %90.2:BB90
  dr              %50.3 = %50.2
  prom-           %50.4 = MkArg                    %79.0, FUN[0x564986b8bb30]_p4 (!refl), e55.0
  val?~           %50.5 = CastType                 up %50.4
  fs              %50.6 = FrameState         R     0x5649862efa70+443: [], env=e55.0
  env             e50.7 = (MkEnv)            l     length=%50.5, mode="list", parent=R_BaseNamespace, context 0
  fs              %50.8 = FrameState         R     0x564986cc37a0+41: [%83.0], env=e50.7, next=%50.6
  void                    Deopt              !v    %50.8, %50.3, %50.1   !
BB87   <- [81]
  val?^ | miss    %87.0 = LdVar              eR    X, e81.5
  val?            %87.1 = Force!<lazy>       !v    %87.0, e81.5   <vec>
  lgl$#-          %87.2 = CallSafeBuiltin    wed   is.vector(%87.1, "any")    <lgl$->
  lgl$#-          %87.3 = Not                d     %87.2, elided
  void                    Branch                   %87.2 -> BB48 (if true) | BB36 (if false)
BB88   <- [81]
  fs              %88.0 = FrameState         R     0x5649862efa70+605: [], env=e55.0
  fs              %88.1 = FrameState         R     0x564985b54fb0+46: [], env=e81.5, next=%88.0
  void                    Deopt              !v    %88.1, CallTarget@0x56498537cf90[Call#1], %81.9   !
BB48   <- [87]
  val?^ | miss    %48.0 = LdVar              eR    is.object, e81.5
  lgl$#-          %48.1 = Identical                <blt is.object>, %48.0   <true>
  void                    Branch                   %48.1 -> BB91 (if true) | BB92 (if false)
BB36   <- [87]
  void                    Nop                !     
  lgl$#-          %36.1 = %87.3
  goto BB37
BB91   <- [48]
  val?^ | miss    %91.0 = LdVar              eR    X, e81.5
  val?            %91.1 = Force!<wrapped>    !v    %91.0, e81.5   <vec$->
  lgl$#-          %91.2 = CallSafeBuiltin    wed   is.object(%91.1)    <lgl$->
  lgl$-           %91.3 = LOr                      %87.3, %91.2
  lgl$-           %91.4 = %91.3
  goto BB37
BB92   <- [48]
  fs              %92.0 = FrameState         R     0x5649862efa70+605: [], env=e55.0
  fs              %92.1 = FrameState         R     0x564985b54fb0+78: [], env=e81.5, next=%92.0
  prom-           %92.2 = MkArg                    %87.1, FUN[0x564986b8bb30]_p9 (!refl), e81.5
  val?~           %92.3 = CastType                 up %92.2
  env             e92.4 = (MkEnv)            l     mode(miss)="any", x=%92.3, parent=R_BaseNamespace, context 0
  fs              %92.5 = FrameState         R     0x564985329090+41: [%87.2], env=e92.4, next=%92.1
  void                    Deopt              !v    %92.5, DeadBranchReached@0x56498537cf90[Test#0], %48.1   !
BB37   <- [36, 91]
  lgl$-           %37.0 = Phi                      %91.4:BB91, %36.1:BB36
  lgl$-           %37.1 = %37.0
  lgl$#-          %37.2 = CheckTrueFalse     e     %37.1
  void                    Branch                   %37.2 -> BB47 (if true) | BB40 (if false)
BB47   <- [37]
  val?^ | miss    %47.0 = LdVar              eR    as.list, e81.5
  lgl$#-          %47.1 = Identical                %47.0, function(x, ...) <(rir::DispatchTable*)0x56498|...
  void                    Branch                   %47.1 -> BB93 (if true) | BB94 (if false)
BB40   <- [37]
  void                    Nop                !     
  goto BB41
BB93   <- [47]
  val?^ | miss    %93.0 = LdVar              eR    X, e81.5
  val?            %93.1 = Force!<wrapped>    !v    %93.0, e81.5   <vec>
  val?            %93.2 = StaticCall         !v    as.list[0x564985528280](%93.1) { 0 } e81.5   <vec+>
  void                    StVar              lW    X, %93.2, e81.5
  goto BB41
BB94   <- [47]
  fs              %94.0 = FrameState         R     0x5649862efa70+605: [], env=e55.0
  fs              %94.1 = FrameState         R     0x564985b54fb0+189: [%37.1], env=e81.5, next=%94.0
  void                    Deopt              !v    %94.1, CallTarget@0x56498537cf90[Call#3], %47.0   !
BB41   <- [40, 93]
  val?^ | miss    %41.0 = LdVar              eR    X, e81.5
  val?            %41.1 = Force!<wrapped>    !v    %41.0, e81.5   <vec+>
  (nil|str)-      %41.2 = Names                    %41.1
  int$-           %41.3 = Length                   %41.1
  vec-            %41.4 = CallSafeBuiltin    wed   vector("list", %41.3) 
  val+            %41.5 = SetNames           e     %41.4, %41.2
  int$#-          %41.6 = 0L
  val+            %41.7 = %41.5
  goto BB42
BB42   <- [43, 41]
  int$-           %42.0 = Phi                      %41.6:BB41, %43.7:BB43
  int$-           %42.1 = %42.0
  val?            %42.2 = Phi                      %41.7:BB41, %43.8:BB43
  val?            %42.3 = %42.2
  int$-           %42.4 = Inc                      %42.1
  lgl$-           %42.5 = Lt                 d     %41.3, %42.4, elided
  lgl$#-          %42.6 = Identical                %42.5, true
  void                    Branch                   %42.6 -> BB44 (if true) | BB43 (if false)
BB44   <- [42]
  val?            %44.0 = PopContext         C     %42.3, %81.2   <val?_>
  val?^ | miss    %44.1 = LdVar              eR    r, e55.0
  val?            %44.2 = Force!             !v    %44.1, e55.0   <val?_>
  lgl$#-          %44.3 = IsType                   %44.2 isA val?+
  lgl$#-          %44.4 = IsType                   %44.0 isA val?+
  void                    Branch                   %44.4 -> BB95 (if true) | BB96 (if false)
BB43   <- [42]
  void                    StVar              lW    i, %42.4, e81.5
  (cls|spec|blt)  %43.1 = LdFun              !v    FUN, e81.5
  prom-           %43.2 = MkArg                    unboundValue, FUN[0x564986b8bb30]_p10, e81.5
  (miss|dots)     %43.3 = LdDots             R     , e81.5
  *dots-          %43.4 = ExpandDots               %43.3
  val?            %43.5 = NamedCall          !v    %43.1(%43.2, .xpandDotsTrigger=%43.4) e81.5   <(str|vec)$->
  val?            %43.6 = SetVecElt          e     %43.5, %42.3, %42.4
  int$-           %43.7 = %42.4
  val?            %43.8 = %43.6
  goto BB42
BB95   <- [44]
  val?+           %95.0 = CastType           d     dn %44.0   <val?_>
  void                    Branch                   %44.3 -> BB97 (if true) | BB98 (if false)
BB96   <- [44]
  void                    Nop                !     
  val?            %96.1 = %44.0
  dr              %96.2 = Typecheck@0x564984b1fdd8[Type#22]
  goto BB45
BB97   <- [95]
  val?+           %97.0 = CastType           d     dn %44.2   <val?_>
  val?+           %97.1 = Subassign1_1D      wed   %95.0, %97.0, missingArg, elided
  void                    StVar              lW    r, %97.1, e55.0
  goto BB14
BB98   <- [95]
  void                    Nop                !     
  val?            %98.1 = %44.2
  dr              %98.2 = Typecheck@0x564984b1fdd8[Type#23]
  goto BB45
BB45   <- [96, 98]
  val?^ | miss    %45.0 = Phi                      %96.1:BB96, %98.1:BB98
  val?^ | miss    %45.1 = %45.0
  dr              %45.2 = Phi                      %96.2:BB96, %98.2:BB98
  dr              %45.3 = %45.2
  fs              %45.4 = FrameState         R     0x5649862efa70+619: [%44.0, %44.2], env=e55.0
  void                    Deopt              !v    %45.4, %45.3, %45.1   !
Prom 0:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    d, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <(int|vec)>
  void                    Return             l     %0.3
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    d, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <(int|vec)>
  void                    Return             l     %0.3
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    d, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <vec>
  void                    Return             l     %0.3
Prom 3:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    Napply, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls->
  void                    Return             l     %0.3
Prom 4:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    n, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <int$->
  void                    Return             l     %0.3
Prom 7:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    FUN, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <(cls|blt)->
  void                    Return             l     %0.3
Prom 9:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    X, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <vec>
  void                    Return             l     %0.3
Prom 10:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    X, e0.0
  val?            %0.2  = Force<wrapped>     !v    %0.1, e0.0   <vec+>
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <true>
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    i, e0.0
  val?            %2.1  = Force<value>       !v    %2.0, e0.0   <int$->
  val?            %2.2  = %2.1
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, FUN[0x564986b8bb30]_p11, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.2:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract2_1D        !v    %0.2, %3.1, e0.0   <(int|str)>
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 11:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    i, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3

│ FUN[0x564986b8bb30]                                                          │
└──────────────────────────────────────────────────────────────────────────────┘
