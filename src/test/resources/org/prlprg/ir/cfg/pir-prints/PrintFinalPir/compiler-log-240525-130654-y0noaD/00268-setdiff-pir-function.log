
┌──────────────────────────────────────────────────────────────────────────────┐
│ setdiff[0x564985bb4ab0]                                                      │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch                                      │
│ Properties:  ForceOrd: 0                                                     │
├────── Final PIR Version
setdiff[0x564985bb4ab0]
BB0
  val?^           %0.0  = LdArg                    1
  val?^           %0.1  = LdArg                    0
  env             e0.2  = MkEnv              l     x=%0.1, y=%0.0, parent=R_BaseNamespace, context 1
  val?            %0.3  = Force!<lazy>       !v    %0.1, e0.2   <str->
  lgl$#-          %0.4  = IsType                   %0.3 isA val?-
  void                    Branch                   %0.4 -> BB19 (if true) | BB20 (if false)
BB19   <- [0]
  val?-           %19.0 = CastType           d     dn %0.3   <str->
  val             %19.1 = CallSafeBuiltin    wed   as.vector(%19.0, "any")    <str->
  void                    StVar              lW    x, %19.1, e0.2
  val?^ | miss    %19.3 = LdVar              eR    as.vector, e0.2
  lgl$#-          %19.4 = Identical                %19.3, function(x, mode="any") <(rir::DispatchTable*)|...
  void                    Branch                   %19.4 -> BB21 (if true) | BB22 (if false)
BB20   <- [0]
  prom-           %20.0 = MkArg                    unboundValue, setdiff[0x564985bb4ab0]_p0, e0.2
  val?^           %20.1 = CastType                 up %20.0
  fs              %20.2 = FrameState         R     0x564985ccfca0+32: [], env=e0.2
  env             e20.3 = (MkEnv)            l     mode(miss)="any", x=%20.1, parent=R_BaseNamespace, context 0
  fs              %20.4 = FrameState         R     0x56498552c8e0+9: [], env=e20.3, next=%20.2
  fs              %20.5 = FrameState         R     0x564983a56120+5(pr): [%0.3], env=e0.2, next=%20.4
  void                    Deopt              !v    %20.5, Typecheck@0x56498695ecd8[Type#0], %0.3   !
BB21   <- [19]
  val?^ | miss    %21.0 = LdVar              eR    y, e0.2
  val?            %21.1 = Force!<lazy>       !v    %21.0, e0.2   <str->
  lgl$#-          %21.2 = IsType                   %21.1 isA val?+
  void                    Branch                   %21.2 -> BB23 (if true) | BB24 (if false)
BB22   <- [19]
  fs              %22.0 = FrameState         R     0x564985ccfca0+46: [], env=e0.2
  void                    Deopt              !v    %22.0, CallTarget@0x56498695ecd8[Call#1], %19.3   !
BB23   <- [21]
  val?+           %23.0 = CastType           d     dn %21.1   <str->
  val             %23.1 = CallSafeBuiltin    wed   as.vector(%23.0, "any")    <str->
  void                    StVar              lW    y, %23.1, e0.2
  val?^ | miss    %23.3 = LdVar              eR    unique, e0.2
  lgl$#-          %23.4 = Identical                %23.3, function(x, incomparables=FALSE, ...) <(rir::D|...
  void                    Branch                   %23.4 -> BB25 (if true) | BB26 (if false)
BB24   <- [21]
  prom-           %24.0 = MkArg                    unboundValue, setdiff[0x564985bb4ab0]_p1, e0.2
  val?^           %24.1 = CastType                 up %24.0
  fs              %24.2 = FrameState         R     0x564985ccfca0+78: [], env=e0.2
  env             e24.3 = (MkEnv)            l     mode(miss)="any", x=%24.1, parent=R_BaseNamespace, context 0
  fs              %24.4 = FrameState         R     0x56498552c8e0+9: [], env=e24.3, next=%24.2
  fs              %24.5 = FrameState         R     0x56498544c430+5(pr): [%21.1], env=e0.2, next=%24.4
  void                    Deopt              !v    %24.5, Typecheck@0x56498667af68[Type#0], %21.1   !
BB25   <- [23]
  val?^ | miss    %25.0 = LdVar              eR    length, e0.2
  lgl$#-          %25.1 = Identical                %25.0, <blt length>
  void                    Branch                   %25.1 -> BB27 (if true) | BB28 (if false)
BB26   <- [23]
  void                    Nop                !     
  val?^ | miss    %26.1 = %23.3
  dr              %26.2 = CallTarget@0x56498695ecd8[Call#2]
  goto BB7
BB27   <- [25]
  val?^ | miss    %27.0 = LdVar              eR    x, e0.2
  val?            %27.1 = Force!<value>      !v    %27.0, e0.2   <str->
  val?            %27.2 = CallBuiltin        !v    length(%27.1) e0.2   <int$->
  lgl$-           %27.3 = AsLogical          e     %27.2
  lgl$#-          %27.4 = Identical                %27.3, true
  void                    Branch                   %27.4 -> BB17 (if true) | BB9 (if false)
BB28   <- [25]
  void                    Nop                !     
  val?^ | miss    %28.1 = %25.0
  dr              %28.2 = CallTarget@0x56498695ecd8[Call#3]
  goto BB7
BB7   <- [26, 28]
  val?^ | miss    %7.0  = Phi                      %26.1:BB26, %28.1:BB28
  val?^ | miss    %7.1  = %7.0
  dr              %7.2  = Phi                      %26.2:BB26, %28.2:BB28
  dr              %7.3  = %7.2
  fs              %7.4  = FrameState         R     0x564985ccfca0+92: [], env=e0.2
  void                    Deopt              !v    %7.4, %7.3, %7.1   !
BB17   <- [27]
  void                    Nop                !     
  lgl$-           %17.1 = %27.3
  goto BB10
BB9   <- [27]
  prom-           %9.0  = MkArg                    unboundValue, setdiff[0x564985bb4ab0]_p19, e0.2
  val?^ | miss    %9.1  = CastType                 up %9.0
  val?            %9.2  = Force              !v    %9.1, e0.2
  val?            %9.3  = CallBuiltin        !v    length(%9.2) e0.2   <val?_>
  lgl$-           %9.4  = AsLogical          e     %9.3
  lgl$-           %9.5  = LOr                      %27.3, %9.4
  lgl$-           %9.6  = %9.5
  goto BB10
BB10   <- [9, 17]
  lgl$-           %10.0 = Phi                      %9.6:BB9, %17.1:BB17
  lgl$-           %10.1 = %10.0
  lgl$#-          %10.2 = CheckTrueFalse     e     %10.1
  void                    Branch                   %10.2 -> BB13 (if true) | BB11 (if false)
BB13   <- [10]
  val?^ | miss    %13.0 = LdVar              eR    x, e0.2
  val?            %13.1 = Force<value>       !v    %13.0, e0.2   <str->
  lgl$#-          %13.2 = IsType                   %13.1 isA val+   <true>
  void                    Branch                   %13.2 -> BB16 (if true) | BB14 (if false)
BB11   <- [10]
  val?^ | miss    %11.0 = LdVar              eR    x, e0.2
  void                    Visible            v     
  val?            %11.2 = Force!             !     %11.0, e0.2   <val?_>
  val?            %11.3 = %11.2
  goto BB12
BB16   <- [13]
  (cls|spec|blt)  %16.0 = LdFun              !v    match, <0x564984cb1f38>, e0.2
  prom-           %16.1 = MkArg                    unboundValue, setdiff[0x564985bb4ab0]_p20, e0.2
  prom-           %16.2 = MkArg                    unboundValue, setdiff[0x564985bb4ab0]_p21, e0.2
  val?            %16.3 = Call               !v    %16.0(%16.1, %16.2, 0L) e0.2   <int->
  val?            %16.4 = Eq                 !v    %16.3, 0L, e0.2   <lgl->
  val?            %16.5 = %16.4
  goto BB15
BB14   <- [13]
  prom-           %14.0 = MkArg                    unboundValue, setdiff[0x564985bb4ab0]_p22, e0.2
  prom-           %14.1 = %14.0
  goto BB15
BB12   <- [11, 15]
  val?            %12.0 = Phi                      %11.3:BB11, %15.4:BB15
  val?            %12.1 = %12.0
  val?            %12.2 = StaticCall         !     unique[0x56498875a630](%12.1) { 0 } e0.2   <str->
  void                    Return             l     %12.2
BB15   <- [16, 14]
  val?            %15.0 = Phi                      %16.5:BB16, %14.1:BB14
  val?            %15.1 = %15.0
  val?            %15.2 = Extract1_1D        !v    %13.1, %15.1, e0.2   <str->
  void                    Visible            v     
  val?            %15.4 = %15.2
  goto BB12
Prom 0:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    x, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    y, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 19:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    y, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 20:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    x, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 21:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    y, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 22:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !v    match, e0.0
  prom-           %0.2  = MkArg                    unboundValue, setdiff[0x564985bb4ab0]_p23, e0.0
  prom-           %0.3  = MkArg                    unboundValue, setdiff[0x564985bb4ab0]_p24, e0.0
  val?            %0.4  = Call               !v    %0.1(%0.2, %0.3, 0L) e0.0   <val?_>
  void                    Visible            v     
  val?            %0.6  = Eq                 !     %0.4, 0L, e0.0   <val?_>
  void                    Return             l     %0.6
Prom 23:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    x, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 24:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    y, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3

│ setdiff[0x564985bb4ab0]                                                      │
└──────────────────────────────────────────────────────────────────────────────┘
