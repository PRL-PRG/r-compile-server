
┌──────────────────────────────────────────────────────────────────────────────┐
│ delayedAssign[0x55eeeedf6940]                                                │
│ Context: CorrOrd,!TMany,Argmatch;Eager0,Eager2,NonRefl0,NonRefl2,NonRefl3,!Obj0│
│ Properties:  ForceOrd: 0                                                     │
├────── Final PIR Version
delayedAssign[0x55eeeedf6940]
BB0
  val?^ | miss    %0.0  = LdArg                    3
  val?~ | miss    %0.1  = LdArg                    2
  val?^ | miss    %0.2  = LdArg                    1
  val?~+          %0.3  = LdArg                    0
  lgl$#-          %0.4  = Identical                %0.1, missingArg
  lgl$#-          %0.5  = Identical                %0.0, missingArg
  env             e0.6  = MkEnv              l     x=%0.3, value=%0.2, eval.env=%0.1, assign.env=%0.0, parent=R_BaseNamespace, context 1
  void                    Branch                   %0.4 -> BB2 (if true) | BB7 (if false)
BB2   <- [0]
  prom-           %2.0  = MkArg                    unboundValue, delayedAssign[0x55eeeedf6940]_p0, e0.6
  val?^ | miss    %2.1  = CastType                 up %2.0
  void                    StArg              lW    eval.env, %2.1, e0.6
  goto BB3
BB7   <- [0]
  void                    Nop                !     
  goto BB3
BB3   <- [2, 7]
  void                    Branch                   %0.5 -> BB6 (if true) | BB4 (if false)
BB6   <- [3]
  prom-           %6.0  = MkArg                    unboundValue, delayedAssign[0x55eeeedf6940]_p2, e0.6
  val?^ | miss    %6.1  = CastType                 up %6.0
  void                    StArg              lW    assign.env, %6.1, e0.6
  goto BB5
BB4   <- [3]
  void                    Nop                !     
  goto BB5
BB5   <- [4, 6]
  val+            %5.0  = Force<value>             %0.3,    <str$->
  prom-           %5.1  = MkArg                    unboundValue, delayedAssign[0x55eeeedf6940]_p1, e0.6
  val?            %5.2  = Call               !v    <spec substitute>(%5.1) e0.6   <code->
  val?^ | miss    %5.3  = LdVar              eR    eval.env, e0.6
  val?            %5.4  = Force!<lazy>       !v    %5.3, e0.6   <env->
  val?^ | miss    %5.5  = LdVar              eR    assign.env, e0.6
  val?            %5.6  = Force!<lazy>       !v    %5.5, e0.6   <env+>
  val?            %5.7  = CallBuiltin        !     delayedAssign(%5.0, %5.2, %5.4, %5.6) e0.6
  void                    Return             l     %5.7
Prom 0:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     parent.frame, <0x55eeebb91170>, e0.0
  val?            %0.2  = Call               !     %0.1(1) e0.0   <env->
  void                    Return             l     %0.2
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    value, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     parent.frame, e0.0
  val?            %0.2  = Call               !     %0.1(1) e0.0   <val?_>
  void                    Return             l     %0.2

│ delayedAssign[0x55eeeedf6940]                                                │
└──────────────────────────────────────────────────────────────────────────────┘
