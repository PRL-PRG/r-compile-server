
┌──────────────────────────────────────────────────────────────────────────────┐
│ fun[0x55eeed03be50]                                                          │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch                                      │
│ Properties:  Eager                                                           │
├────── Final PIR Version
fun[0x55eeed03be50]
BB0
  env             e0.0  = MkEnv              l     parent=R_GlobalEnv, context 1
  (cls|spec|blt)  %0.1  = LdFun              !v    ::, <0x55eeeba7de48>, R_GlobalEnv
  prom-           %0.2  = MkArg                    unboundValue, fun[0x55eeed03be50]_p0, e0.0
  prom-           %0.3  = MkArg                    unboundValue, fun[0x55eeed03be50]_p1, e0.0
  val?            %0.4  = Call               !v    %0.1(%0.2, %0.3) e0.0   <cls->
  (cls|spec|blt)  %0.5  = ChkFunction        e     %0.4
  prom-           %0.6  = MkArg                    unboundValue, fun[0x55eeed03be50]_p2, e0.0
  lgl$#-          %0.7  = Identical                %0.5, function(..., recording=TRUE) <(rir::DispatchT|...
  val?^ | miss    %0.8  = CastType                 up %0.6
  void                    Branch                   %0.7 -> BB36 (if true) | BB37 (if false)
BB36   <- [0]
  dots-           %36.0 = DotsList           l     %0.6
  ct              %36.1 = PushContext        lCL   %36.0, ::(grid, pushViewport)(::(grid, viewport)(widt|..., function(..., recording=TRUE) <(rir::DispatchT|..., e0.0
  val?^ | miss    %36.2 = LdVar              eR    list, <env 0x55eeedfdc408>
  lgl$#-          %36.3 = Identical                %36.2, <blt list>
  void                    Branch                   %36.3 -> BB38 (if true) | BB39 (if false)
BB37   <- [0]
  fs              %37.0 = FrameState         R     0x55eeedfb14d0+37: [%0.4], env=e0.0
  void                    Deopt              !v    %37.0, CallTarget@0x55eeed4384e8[Call#1], %0.5   !
BB38   <- [36]
  env             e38.0 = MkEnv              l     ...=%36.0, recording(miss)=true, parent=<env 0x55eeedfdc408>, context 1
  val?            %38.1 = Force!             !vL   %0.8, e38.0
  val+            %38.2 = CallSafeBuiltin    wed   list(%38.1)    <vec$->
  void                    StVar              lW    vps, %38.2, e38.0
  val?^ | miss    %38.4 = LdVar              eR    lapply, <env 0x55eeedfdc408>
  lgl$#-          %38.5 = Identical                %38.4, function(X, FUN, ...) <(rir::DispatchTable*)0x|...
  void                    Branch                   %38.5 -> BB40 (if true) | BB41 (if false)
BB39   <- [36]
  fs              %39.0 = FrameState         R     0x55eeedfb14d0+70: [], env=e0.0
  env             e39.1 = (MkEnv)            l     ...=%36.0, recording(miss)=true, parent=<env 0x55eeedfdc408>, context 1
  fs              %39.2 = FrameState         R     0x55eeee7ed9b0+0: [], env=e39.1, next=%39.0
  void                    Deopt              !v    %39.2, CallTarget@0x55eeed438598[Call#0], %36.2   !
BB40   <- [38]
  prom-           %40.0 = MkArg                    unboundValue, fun[0x55eeed03be50]_p26 (!refl), e38.0
  prom-           %40.1 = MkArg                    unboundValue, fun[0x55eeed03be50]_p27, e38.0
  prom-           %40.2 = MkArg                    unboundValue, fun[0x55eeed03be50]_p28 (!refl), e38.0
  dots-           %40.3 = DotsList           l     %40.2
  ct              %40.4 = PushContext        lCL   %40.0, %40.1, %40.3, lapply(vps, push.vp, recording), function(X, FUN, ...) <(rir::DispatchTable*)0x|..., e38.0
  val?^           %40.5 = CastType                 up %40.1
  val?^           %40.6 = CastType                 up %40.0
  env             e40.7 = MkEnv              l     X=%40.6, FUN=%40.5, ...=%40.3, parent=R_BaseNamespace, context 1
  prom-           %40.8 = MkArg                    unboundValue, fun[0x55eeed03be50]_p29, e40.7
  val?            %40.9 = StaticCall         !v    match.fun[0x55eeeec70b30](%40.8) e40.7   <(cls|blt)->
  void                    StVar              lW    FUN, %40.9, e40.7
  val?^ | miss    %40.11 = LdVar              eR    is.vector, e40.7
  lgl$#-          %40.12 = Identical                %40.11, function(x, mode="any") <(rir::DispatchTable*)|...
  void                    Branch                   %40.12 -> BB42 (if true) | BB43 (if false)
BB41   <- [38]
  fs              %41.0 = FrameState         R     0x55eeedfb14d0+70: [], env=e0.0
  fs              %41.1 = FrameState         R     0x55eeee7ed9b0+62: [], env=e38.0, next=%41.0
  void                    Deopt              !v    %41.1, CallTarget@0x55eeed438598[Call#1], %38.4   !
BB42   <- [40]
  val?^ | miss    %42.0 = LdVar              eR    X, e40.7
  val?            %42.1 = Force!<lazy>       !v    %42.0, e40.7   <vec>
  lgl$#-          %42.2 = CallSafeBuiltin    wed   is.vector(%42.1, "any")    <lgl$->
  lgl$#-          %42.3 = Not                d     %42.2, elided
  void                    Branch                   %42.2 -> BB34 (if true) | BB11 (if false)
BB43   <- [40]
  fs              %43.0 = FrameState         R     0x55eeedfb14d0+70: [], env=e0.0
  fs              %43.1 = FrameState         R     0x55eeee7ed9b0+104: [], env=e38.0, next=%43.0
  fs              %43.2 = FrameState         R     0x55eeedab75a0+46: [], env=e40.7, next=%43.1
  void                    Deopt              !v    %43.2, CallTarget@0x55eeedbdaa90[Call#1], %40.11   !
BB34   <- [42]
  val?^ | miss    %34.0 = LdVar              eR    is.object, e40.7
  lgl$#-          %34.1 = Identical                <blt is.object>, %34.0   <true>
  void                    Branch                   %34.1 -> BB44 (if true) | BB45 (if false)
BB11   <- [42]
  void                    Nop                !     
  lgl$#-          %11.1 = %42.3
  goto BB12
BB44   <- [34]
  val?^ | miss    %44.0 = LdVar              eR    X, e40.7
  val?            %44.1 = Force!<wrapped>    !v    %44.0, e40.7   <vec+>
  lgl$#-          %44.2 = CallSafeBuiltin    wed   is.object(%44.1)    <lgl$->
  lgl$-           %44.3 = LOr                      %42.3, %44.2
  lgl$-           %44.4 = %44.3
  goto BB12
BB45   <- [34]
  fs              %45.0 = FrameState         R     0x55eeedfb14d0+70: [], env=e0.0
  fs              %45.1 = FrameState         R     0x55eeee7ed9b0+104: [], env=e38.0, next=%45.0
  fs              %45.2 = FrameState         R     0x55eeedab75a0+78: [], env=e40.7, next=%45.1
  prom-           %45.3 = MkArg                    %42.1, fun[0x55eeed03be50]_p32 (!refl), e40.7
  val?~           %45.4 = CastType                 up %45.3
  env             e45.5 = (MkEnv)            l     mode(miss)="any", x=%45.4, parent=R_BaseNamespace, context 0
  fs              %45.6 = FrameState         R     0x55eeed98e9e0+41: [%42.2], env=e45.5, next=%45.2
  void                    Deopt              !v    %45.6, DeadBranchReached@0x55eeedbdaa90[Test#0], %34.1   !
BB12   <- [11, 44]
  lgl$-           %12.0 = Phi                      %44.4:BB44, %11.1:BB11
  lgl$-           %12.1 = %12.0
  lgl$#-          %12.2 = CheckTrueFalse     e     %12.1
  void                    Branch                   %12.2 -> BB33 (if true) | BB15 (if false)
BB33   <- [12]
  val?^ | miss    %33.0 = LdVar              eR    as.list, e40.7
  lgl$#-          %33.1 = Identical                %33.0, function(x, ...) <(rir::DispatchTable*)0x55eee|...
  void                    Branch                   %33.1 -> BB46 (if true) | BB47 (if false)
BB15   <- [12]
  void                    Nop                !     
  goto BB16
BB46   <- [33]
  val?^ | miss    %46.0 = LdVar              eR    X, e40.7
  val?            %46.1 = Force!<wrapped>    !v    %46.0, e40.7   <vec>
  val?            %46.2 = StaticCall         !v    as.list[0x55eeeeffb5d0](%46.1) { 0 } e40.7   <vec>
  void                    StVar              lW    X, %46.2, e40.7
  goto BB16
BB47   <- [33]
  fs              %47.0 = FrameState         R     0x55eeedfb14d0+70: [], env=e0.0
  fs              %47.1 = FrameState         R     0x55eeee7ed9b0+104: [], env=e38.0, next=%47.0
  fs              %47.2 = FrameState         R     0x55eeedab75a0+189: [%12.1], env=e40.7, next=%47.1
  void                    Deopt              !v    %47.2, CallTarget@0x55eeedbdaa90[Call#3], %33.0   !
BB16   <- [15, 46]
  val?^ | miss    %16.0 = LdVar              eR    X, e40.7
  val?            %16.1 = Force!<wrapped>    !v    %16.0, e40.7   <vec>
  (nil|str)-      %16.2 = Names                    %16.1
  int$-           %16.3 = Length                   %16.1
  vec-            %16.4 = CallSafeBuiltin    wed   vector("list", %16.3) 
  val+            %16.5 = SetNames           e     %16.4, %16.2
  int$#-          %16.6 = 0L
  val+            %16.7 = %16.5
  goto BB17
BB17   <- [18, 16]
  int$-           %17.0 = Phi                      %16.6:BB16, %18.7:BB18
  int$-           %17.1 = %17.0
  val?            %17.2 = Phi                      %16.7:BB16, %18.8:BB18
  val?            %17.3 = %17.2
  int$-           %17.4 = Inc                      %17.1
  lgl$-           %17.5 = Lt                 d     %16.3, %17.4, elided
  lgl$#-          %17.6 = Identical                %17.5, true
  void                    Branch                   %17.6 -> BB19 (if true) | BB18 (if false)
BB19   <- [17]
  val?            %19.0 = PopContext         C     %17.3, %40.4
  val?^ | miss    %19.1 = LdVar              eR    invisible, e38.0
  lgl$#-          %19.2 = Identical                <blt invisible>, %19.1   <true>
  void                    Branch                   %19.2 -> BB48 (if true) | BB49 (if false)
BB18   <- [17]
  void                    StVar              lW    i, %17.4, e40.7
  (cls|spec|blt)  %18.1 = LdFun              !v    FUN, e40.7
  prom-           %18.2 = MkArg                    unboundValue, fun[0x55eeed03be50]_p33, e40.7
  (miss|dots)     %18.3 = LdDots             R     , e40.7
  *dots-          %18.4 = ExpandDots               %18.3
  val?            %18.5 = NamedCall          !v    %18.1(%18.2, .xpandDotsTrigger=%18.4) e40.7   <val?>
  val?            %18.6 = SetVecElt          e     %18.5, %17.3, %17.4
  int$-           %18.7 = %17.4
  val?            %18.8 = %18.6
  goto BB17
BB48   <- [19]
  val?            %48.0 = PopContext         C     nil, %36.1
  (cls|spec|blt)  %48.1 = LdFun              !v    ::, <0x55eeeba7de48>, e0.0
  prom-           %48.2 = MkArg                    unboundValue, fun[0x55eeed03be50]_p10, e0.0
  prom-           %48.3 = MkArg                    unboundValue, fun[0x55eeed03be50]_p11, e0.0
  val?            %48.4 = Call               !v    %48.1(%48.2, %48.3) e0.0   <cls->
  (cls|spec|blt)  %48.5 = ChkFunction        e     %48.4
  prom-           %48.6 = MkArg                    unboundValue, fun[0x55eeed03be50]_p12, e0.0
  prom-           %48.7 = MkArg                    unboundValue, fun[0x55eeed03be50]_p14, e0.0
  prom-           %48.8 = MkArg                    unboundValue, fun[0x55eeed03be50]_p19, e0.0
  prom-           %48.9 = MkArg                    unboundValue, fun[0x55eeed03be50]_p22, e0.0
  lgl$#-          %48.10 = Identical                %48.5, function(label, x=unit(0.5, "npc"), y=unit(0.5|...
  void                    Branch                   %48.10 -> BB50 (if true) | BB51 (if false)
BB49   <- [19]
  fs              %49.0 = FrameState         R     0x55eeedfb14d0+70: [], env=e0.0
  fs              %49.1 = FrameState         R     0x55eeee7ed9b0+104: [%19.0], env=e38.0, next=%49.0
  void                    Deopt              !v    %49.1, DeadBranchReached@0x55eeed438598[Test#0], %19.2   !
BB50   <- [48]
  ct              %50.0 = PushContext        lCL   %48.6, %48.7, %48.8, missingArg, missingArg, missingArg, 90, missingArg, missingArg, missingArg, %48.9, ::(grid, grid.text)(sprintf("help("%s")", name|..., function(label, x=unit(0.5, "npc"), y=unit(0.5|..., e0.0
  val?^           %50.1 = CastType                 up %48.9
  val?^           %50.2 = CastType                 up %48.8
  val?^           %50.3 = CastType                 up %48.7
  val?^           %50.4 = CastType                 up %48.6
  val?^ | miss    %50.5 = LdVar              eR    textGrob, <env 0x55eeedfdc408>
  lgl$#-          %50.6 = Identical                %50.5, function(label, x=unit(0.5, "npc"), y=unit(0.5|...
  void                    Branch                   %50.6 -> BB52 (if true) | BB53 (if false)
BB51   <- [48]
  fs              %51.0 = FrameState         R     0x55eeedfb14d0+108: [%48.4], env=e0.0
  void                    Deopt              !v    %51.0, CallTarget@0x55eeed4384e8[Call#9], %48.5   !
BB52   <- [50]
  env             e52.0 = MkEnv              l     label=%50.4, x=%50.3, y=%50.2, just(miss)="centre", hjust(miss)=nil, vjust(miss)=nil, rot=90, check.overlap(miss)=false, default.units(miss)="npc", name(miss)=nil, gp=%50.1, draw(miss)=true, vp(miss)=nil, parent=<env 0x55eeedfdc408>, context 1
  prom-           %52.1 = MkArg                    unboundValue, fun[0x55eeed03be50]_p38, e52.0
  prom-           %52.2 = MkArg                    unboundValue, fun[0x55eeed03be50]_p39, e52.0
  prom-           %52.3 = MkArg                    unboundValue, fun[0x55eeed03be50]_p40, e52.0
  prom-           %52.4 = MkArg                    unboundValue, fun[0x55eeed03be50]_p41 (!refl), e52.0
  prom-           %52.5 = MkArg                    unboundValue, fun[0x55eeed03be50]_p42 (!refl), e52.0
  prom-           %52.6 = MkArg                    unboundValue, fun[0x55eeed03be50]_p43 (!refl), e52.0
  prom-           %52.7 = MkArg                    unboundValue, fun[0x55eeed03be50]_p44 (!refl), e52.0
  prom-           %52.8 = MkArg                    unboundValue, fun[0x55eeed03be50]_p45 (!refl), e52.0
  prom-           %52.9 = MkArg                    unboundValue, fun[0x55eeed03be50]_p46 (!refl), e52.0
  prom-           %52.10 = MkArg                    unboundValue, fun[0x55eeed03be50]_p47 (!refl), e52.0
  prom-           %52.11 = MkArg                    unboundValue, fun[0x55eeed03be50]_p48, e52.0
  prom-           %52.12 = MkArg                    unboundValue, fun[0x55eeed03be50]_p49 (!refl), e52.0
  val?            %52.13 = StaticCall         !v    textGrob[0x55eeedba4f50](%52.1, %52.2, %52.3, %52.4, %52.5, %52.6, %52.7, %52.8, %52.9, %52.10, %52.11, %52.12) { 0n 1n 2n 3n 4n 5n 6n 7n 8n 9n 10n 11n } e52.0   <vec>
  void                    StVar              lW    tg, %52.13, e52.0
  val?^ | miss    %52.15 = LdVar              eR    draw, e52.0
  val?            %52.16 = Force!<lazy>       !v    %52.15, e52.0   <lgl$->
  lgl$#-          %52.17 = CheckTrueFalse     we    %52.16
  void                    Branch                   %52.17 -> BB32 (if true) | BB28 (if false)
BB53   <- [50]
  fs              %53.0 = FrameState         R     0x55eeedfb14d0+181: [], env=e0.0
  env             e53.1 = (MkEnv)            l     label=%50.4, x=%50.3, y=%50.2, just(miss)="centre", hjust(miss)=nil, vjust(miss)=nil, rot=90, check.overlap(miss)=false, default.units(miss)="npc", name(miss)=nil, gp=%50.1, draw(miss)=true, vp(miss)=nil, parent=<env 0x55eeedfdc408>, context 1
  fs              %53.2 = FrameState         R     0x55eeed9928e0+0: [], env=e53.1, next=%53.0
  void                    Deopt              !v    %53.2, CallTarget@0x55eeee936190[Call#3], %50.5   !
BB32   <- [52]
  val?^ | miss    %32.0 = LdVar              eR    grid.draw, e52.0
  lgl$#-          %32.1 = Identical                %32.0, function(x, recording=TRUE) <(rir::DispatchTab|...
  void                    Branch                   %32.1 -> BB56 (if true) | BB57 (if false)
BB28   <- [52]
  void                    Nop                !     
  goto BB29
BB56   <- [32]
  prom-           %56.0 = MkArg                    unboundValue, fun[0x55eeed03be50]_p50, e52.0
  val?            %56.1 = StaticCall         !v    grid.draw[0x55eeee97d460](%56.0) e52.0
  goto BB29
BB57   <- [32]
  fs              %57.0 = FrameState         R     0x55eeedfb14d0+181: [], env=e0.0
  fs              %57.1 = FrameState         R     0x55eeed9928e0+164: [%52.17], env=e52.0, next=%57.0
  void                    Deopt              !v    %57.1, CallTarget@0x55eeee936190[Call#4], %32.0   !
BB29   <- [28, 56]
  val?^ | miss    %29.0 = LdVar              eR    invisible, e52.0
  lgl$#-          %29.1 = Identical                <blt invisible>, %29.0   <true>
  void                    Branch                   %29.1 -> BB54 (if true) | BB55 (if false)
BB54   <- [29]
  val?^ | miss    %54.0 = LdVar              eR    tg, e52.0
  val?            %54.1 = Force!<value>      !v    %54.0, e52.0   <vec>
  void                    Invisible          v     
  val?            %54.3 = PopContext         C     %54.1, %50.0   <vec>
  void                    Return             l     %54.3
BB55   <- [29]
  fs              %55.0 = FrameState         R     0x55eeedfb14d0+181: [], env=e0.0
  fs              %55.1 = FrameState         R     0x55eeed9928e0+207: [], env=e52.0, next=%55.0
  void                    Deopt              !v    %55.1, DeadBranchReached@0x55eeee936190[Test#0], %29.1   !
Prom 0:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    grid, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    pushViewport, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     ::, <0x55eeeba7de48>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, fun[0x55eeed03be50]_p3, e0.0
  prom-           %0.3  = MkArg                    unboundValue, fun[0x55eeed03be50]_p4, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <cls->
  (cls|spec|blt)  %0.5  = ChkFunction        e     %0.4
  prom-           %0.6  = MkArg                    unboundValue, fun[0x55eeed03be50]_p5, e0.0
  val?            %0.7  = NamedCall          !     %0.5(width=%0.6, x=0, just="left") e0.0   <vec>
  void                    Return             l     %0.7
Prom 3:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    grid, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 4:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    viewport, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 5:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     ::, <0x55eeeba7de48>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, fun[0x55eeed03be50]_p6, e0.0
  prom-           %0.3  = MkArg                    unboundValue, fun[0x55eeed03be50]_p7, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <cls->
  (cls|spec|blt)  %0.5  = ChkFunction        e     %0.4
  val?            %0.6  = Call               !     %0.5(1, "npc") e0.0   <real$>
  (cls|spec|blt)  %0.7  = LdFun              !     ::, <0x55eeeba7de48>, e0.0
  prom-           %0.8  = MkArg                    unboundValue, fun[0x55eeed03be50]_p8, e0.0
  prom-           %0.9  = MkArg                    unboundValue, fun[0x55eeed03be50]_p9, e0.0
  val?            %0.10 = Call               !     %0.7(%0.8, %0.9) e0.0   <cls->
  (cls|spec|blt)  %0.11 = ChkFunction        e     %0.10
  val?            %0.12 = Call               !     %0.11(1, "lines") e0.0   <real$>
  val?            %0.13 = Sub                !     %0.6, %0.12, e0.0   <vec$>
  void                    Return             l     %0.13
Prom 6:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    grid, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 7:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    unit, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 8:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    grid, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 9:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    unit, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 10:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    grid, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 11:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    grid.text, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 12:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     sprintf, <0x55eeebd85cb8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, fun[0x55eeed03be50]_p13, e0.0
  val?            %0.3  = Call               !     %0.1("help("%s")", %0.2) e0.0   <str$->
  void                    Return             l     %0.3
Prom 13:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     nameEx, <0x55eeed9379d0>, e0.0
  val?            %0.2  = Call               !     %0.1() e0.0   <str$->
  void                    Return             l     %0.2
Prom 14:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     ::, <0x55eeeba7de48>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, fun[0x55eeed03be50]_p15, e0.0
  prom-           %0.3  = MkArg                    unboundValue, fun[0x55eeed03be50]_p16, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <cls->
  (cls|spec|blt)  %0.5  = ChkFunction        e     %0.4
  val?            %0.6  = Call               !     %0.5(1, "npc") e0.0   <real$>
  (cls|spec|blt)  %0.7  = LdFun              !     ::, <0x55eeeba7de48>, e0.0
  prom-           %0.8  = MkArg                    unboundValue, fun[0x55eeed03be50]_p17, e0.0
  prom-           %0.9  = MkArg                    unboundValue, fun[0x55eeed03be50]_p18, e0.0
  val?            %0.10 = Call               !     %0.7(%0.8, %0.9) e0.0   <cls->
  (cls|spec|blt)  %0.11 = ChkFunction        e     %0.10
  val?            %0.12 = Call               !     %0.11(0.5, "lines") e0.0   <real$>
  val?            %0.13 = Add                !     %0.6, %0.12, e0.0   <vec$>
  void                    Return             l     %0.13
Prom 15:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    grid, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 16:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    unit, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 17:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    grid, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 18:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    unit, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 19:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     ::, <0x55eeeba7de48>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, fun[0x55eeed03be50]_p20, e0.0
  prom-           %0.3  = MkArg                    unboundValue, fun[0x55eeed03be50]_p21, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <cls->
  (cls|spec|blt)  %0.5  = ChkFunction        e     %0.4
  val?            %0.6  = Call               !     %0.5(0.8, "npc") e0.0   <real$>
  void                    Return             l     %0.6
Prom 20:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    grid, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 21:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    unit, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 22:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     ::, <0x55eeeba7de48>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, fun[0x55eeed03be50]_p23, e0.0
  prom-           %0.3  = MkArg                    unboundValue, fun[0x55eeed03be50]_p24, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <cls->
  (cls|spec|blt)  %0.5  = ChkFunction        e     %0.4
  val?            %0.6  = NamedCall          !     %0.5(col="orchid") e0.0   <vec$>
  void                    Return             l     %0.6
Prom 23:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    grid, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 24:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    gpar, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 26:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    vps, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <vec$->
  void                    Return             l     %0.3
Prom 27:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    push.vp, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <cls->
  void                    Return             l     %0.3
Prom 28:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    recording, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <lgl$->
  void                    Return             l     %0.3
Prom 29:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    FUN, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <(cls|blt)->
  void                    Return             l     %0.3
Prom 32:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    X, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <vec>
  void                    Return             l     %0.3
Prom 33:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    X, e0.0
  val?            %0.2  = Force<wrapped>     !v    %0.1, e0.0   <vec>
  lgl$#-          %0.3  = IsType                   %0.2 isA val+
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    i, e0.0
  val?            %2.1  = Force<value>       !v    %2.0, e0.0   <int$->
  val?            %2.2  = %2.1
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, fun[0x55eeed03be50]_p34, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.2:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract2_1D        !v    %0.2, %3.1, e0.0   <val?>
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 34:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    i, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <int$->
  void                    Return             l     %0.3
Prom 38:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    label, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 39:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    x, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <(real|vec)$>
  void                    Return             l     %0.3
Prom 40:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    y, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <(real|vec)$>
  void                    Return             l     %0.3
Prom 41:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    just, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 42:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    hjust, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <nil->
  void                    Return             l     %0.3
Prom 43:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    vjust, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <nil->
  void                    Return             l     %0.3
Prom 44:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    rot, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <real$->
  void                    Return             l     %0.3
Prom 45:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    check.overlap, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <lgl$->
  void                    Return             l     %0.3
Prom 46:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    default.units, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 47:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    name, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <nil->
  void                    Return             l     %0.3
Prom 48:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    gp, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <vec>
  void                    Return             l     %0.3
Prom 49:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    vp, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <nil->
  void                    Return             l     %0.3
Prom 50:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    tg, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <vec>
  void                    Return             l     %0.3

│ fun[0x55eeed03be50]                                                          │
└──────────────────────────────────────────────────────────────────────────────┘
