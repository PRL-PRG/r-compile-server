
┌──────────────────────────────────────────────────────────────────────────────┐
│ test[0x55eeed9ae450]                                                         │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch                                      │
│ Properties:                                                                  │
├────── Final PIR Version
test[0x55eeed9ae450]
BB0
  val?^           %0.0  = LdArg                    0
  val?^ | miss    %0.1  = LdVar              eR    grid.text, R_GlobalEnv
  lgl$#-          %0.2  = Identical                %0.1, function(label, x=unit(0.5, "npc"), y=unit(0.5|...
  void                    Branch                   %0.2 -> BB49 (if true) | BB50 (if false)
BB49   <- [0]
  env             e49.0 = MkEnv              l     x=%0.0, parent=R_GlobalEnv, context 1
  prom-           %49.1 = MkArg                    unboundValue, test[0x55eeed9ae450]_p0, e49.0
  ct              %49.2 = PushContext        lCL   %49.1, missingArg, missingArg, "bottom", grid.text(x, just="bottom"), function(label, x=unit(0.5, "npc"), y=unit(0.5|..., e49.0
  val?^           %49.3 = CastType                 up %49.1
  env             e49.4 = MkEnv              l     label=%49.3, x(miss)=missingArg, y(miss)=missingArg, just="bottom", hjust(miss)=missingArg, vjust(miss)=missingArg, rot(miss)=missingArg, check.overlap(miss)=missingArg, default.units(miss)=missingArg, name(miss)=missingArg, gp(miss)=missingArg, draw(miss)=missingArg, vp(miss)=missingArg, parent=<env 0x55eeedfdc408>, context 1
  prom-           %49.5 = MkArg                    unboundValue, test[0x55eeed9ae450]_p27, e49.4
  val?^ | miss    %49.6 = CastType                 up %49.5
  void                    StArg              lW    x, %49.6, e49.4
  prom-           %49.8 = MkArg                    unboundValue, test[0x55eeed9ae450]_p37, e49.4
  val?^ | miss    %49.9 = CastType                 up %49.8
  void                    StArg              lW    y, %49.9, e49.4
  void                    StArg              lW    hjust, nil, e49.4
  void                    StArg              lW    vjust, nil, e49.4
  void                    StArg              lW    rot, 0, e49.4
  void                    StArg              lW    check.overlap, false, e49.4
  void                    StArg              lW    default.units, "npc", e49.4
  void                    StArg              lW    name, nil, e49.4
  prom-           %49.17 = MkArg                    unboundValue, test[0x55eeed9ae450]_p34, e49.4
  val?^ | miss    %49.18 = CastType                 up %49.17
  void                    StArg              lW    gp, %49.18, e49.4
  void                    StArg              lW    draw, true, e49.4
  void                    StArg              lW    vp, nil, e49.4
  val?^ | miss    %49.22 = LdVar              eR    textGrob, <env 0x55eeedfdc408>
  lgl$#-          %49.23 = Identical                %49.22, function(label, x=unit(0.5, "npc"), y=unit(0.5|...
  void                    Branch                   %49.23 -> BB51 (if true) | BB52 (if false)
BB50   <- [0]
  env             e50.0 = (MkEnv)            l     x=%0.0, parent=R_GlobalEnv, context 1
  fs              %50.1 = FrameState         R     0x55eeec15f780+0: [], env=e50.0
  void                    Deopt              !v    %50.1, CallTarget@0x55eeee2dcd38[Call#0], %0.1
BB51   <- [49]
  prom-           %51.0 = MkArg                    unboundValue, test[0x55eeed9ae450]_p38, e49.4
  prom-           %51.1 = MkArg                    unboundValue, test[0x55eeed9ae450]_p39, e49.4
  prom-           %51.2 = MkArg                    unboundValue, test[0x55eeed9ae450]_p40, e49.4
  prom-           %51.3 = MkArg                    unboundValue, test[0x55eeed9ae450]_p41 (!refl), e49.4
  prom-           %51.4 = MkArg                    unboundValue, test[0x55eeed9ae450]_p42 (!refl), e49.4
  prom-           %51.5 = MkArg                    unboundValue, test[0x55eeed9ae450]_p43 (!refl), e49.4
  prom-           %51.6 = MkArg                    unboundValue, test[0x55eeed9ae450]_p44 (!refl), e49.4
  prom-           %51.7 = MkArg                    unboundValue, test[0x55eeed9ae450]_p45 (!refl), e49.4
  prom-           %51.8 = MkArg                    unboundValue, test[0x55eeed9ae450]_p46 (!refl), e49.4
  prom-           %51.9 = MkArg                    unboundValue, test[0x55eeed9ae450]_p47 (!refl), e49.4
  prom-           %51.10 = MkArg                    unboundValue, test[0x55eeed9ae450]_p48, e49.4
  prom-           %51.11 = MkArg                    unboundValue, test[0x55eeed9ae450]_p49 (!refl), e49.4
  val?            %51.12 = StaticCall         !v    textGrob[0x55eeefbcfce0](%51.0, %51.1, %51.2, %51.3, %51.4, %51.5, %51.6, %51.7, %51.8, %51.9, %51.10, %51.11) { 0n 1n 2n 3n 4n 5n 6n 7n 8n 9n 10n 11n } e49.4   <vec>
  void                    StVar              lW    tg, %51.12, e49.4
  val?^ | miss    %51.14 = LdVar              eR    draw, e49.4
  val?            %51.15 = Force!<lazy>       !v    %51.14, e49.4   <lgl$->
  lgl$#-          %51.16 = CheckTrueFalse     we    %51.15
  void                    Branch                   %51.16 -> BB47 (if true) | BB7 (if false)
BB52   <- [49]
  fs              %52.0 = FrameState         R     0x55eeec15f780+45: [], env=e49.0
  fs              %52.1 = FrameState         R     0x55eeed9928e0+0: [], env=e49.4, next=%52.0
  void                    Deopt              !v    %52.1, CallTarget@0x55eeee936190[Call#3], %49.22   !
BB47   <- [51]
  val?^ | miss    %47.0 = LdVar              eR    grid.draw, e49.4
  lgl$#-          %47.1 = Identical                %47.0, function(x, recording=TRUE) <(rir::DispatchTab|...
  void                    Branch                   %47.1 -> BB53 (if true) | BB54 (if false)
BB7   <- [51]
  void                    Nop                !     
  goto BB8
BB53   <- [47]
  prom-           %53.0 = MkArg                    unboundValue, test[0x55eeed9ae450]_p50, e49.4
  val?            %53.1 = StaticCall         !v    grid.draw[0x55eeedcde310](%53.0) e49.4
  goto BB8
BB54   <- [47]
  fs              %54.0 = FrameState         R     0x55eeec15f780+45: [], env=e49.0
  fs              %54.1 = FrameState         R     0x55eeed9928e0+164: [%51.16], env=e49.4, next=%54.0
  void                    Deopt              !v    %54.1, CallTarget@0x55eeee936190[Call#4], %47.0   !
BB8   <- [7, 53]
  val?^ | miss    %8.0  = LdVar              eR    invisible, e49.4
  lgl$#-          %8.1  = Identical                <blt invisible>, %8.0   <true>
  void                    Branch                   %8.1 -> BB55 (if true) | BB56 (if false)
BB55   <- [8]
  val?^ | miss    %55.0 = LdVar              eR    tg, e49.4
  val?            %55.1 = Force!<value>      !v    %55.0, e49.4   <vec>
  val?            %55.2 = PopContext         C     %55.1, %49.2
  val?^ | miss    %55.3 = LdVar              eR    calcStringMetric, e49.0
  lgl$#-          %55.4 = Identical                %55.3, function(text) <(rir::DispatchTable*)0x55eeeec|...
  void                    Branch                   %55.4 -> BB57 (if true) | BB58 (if false)
BB56   <- [8]
  fs              %56.0 = FrameState         R     0x55eeec15f780+45: [], env=e49.0
  fs              %56.1 = FrameState         R     0x55eeed9928e0+207: [], env=e49.4, next=%56.0
  void                    Deopt              !v    %56.1, DeadBranchReached@0x55eeee936190[Test#0], %8.1   !
BB57   <- [55]
  prom-           %57.0 = MkArg                    unboundValue, test[0x55eeed9ae450]_p1, e49.0
  ct              %57.1 = PushContext        lCL   %57.0, calcStringMetric(x), function(text) <(rir::DispatchTable*)0x55eeeec|..., e49.0
  val?^           %57.2 = CastType                 up %57.0
  val?^ | miss    %57.3 = LdVar              eR    grid.Call, <env 0x55eeedfdc408>
  lgl$#-          %57.4 = Identical                %57.3, function(fnname, ...) <(rir::DispatchTable*)0x|...
  void                    Branch                   %57.4 -> BB59 (if true) | BB60 (if false)
BB58   <- [55]
  fs              %58.0 = FrameState         R     0x55eeec15f780+45: [%55.2], env=e49.0
  void                    Deopt              !v    %58.0, CallTarget@0x55eeee2dcd38[Call#1], %55.3   !
BB59   <- [57]
  env             e59.0 = MkEnv              l     text=%57.2, parent=<env 0x55eeedfdc408>, context 1
  prom-           %59.1 = MkArg                    unboundValue, test[0x55eeed9ae450]_p22, e59.0
  prom-           %59.2 = MkArg                    unboundValue, test[0x55eeed9ae450]_p23, e59.0
  dots-           %59.3 = DotsList           l     %59.2
  ct              %59.4 = PushContext        lCL   %59.1, %59.3, grid.Call(C_stringMetric, text), function(fnname, ...) <(rir::DispatchTable*)0x|..., e59.0
  val?^           %59.5 = CastType                 up %59.1
  val?^ | miss    %59.6 = LdVar              eR    .Call, <env 0x55eeedfdc408>
  lgl$#-          %59.7 = Identical                <blt .Call>, %59.6   <true>
  void                    Branch                   %59.7 -> BB61 (if true) | BB62 (if false)
BB60   <- [57]
  fs              %60.0 = FrameState         R     0x55eeec15f780+78: [], env=e49.0
  env             e60.1 = (MkEnv)            l     text=%57.2, parent=<env 0x55eeedfdc408>, context 1
  fs              %60.2 = FrameState         R     0x55eeed831f80+0: [], env=e60.1, next=%60.0
  void                    Deopt              !v    %60.2, CallTarget@0x55eeee2dbaa8[Call#0], %57.3   !
BB61   <- [59]
  val?^ | miss    %61.0 = LdVar              eR    C_gridDirty, <env 0x55eeedfdc408>
  env             e61.1 = MkEnv              l     fnname=%59.5, ...=%59.3, parent=<env 0x55eeedfdc408>, context 1
  val?            %61.2 = Force!<value>      !v    %61.0, e61.1   <vec>
  val?            %61.3 = CallBuiltin        !v    .Call(%61.2) e61.1
  (cls|spec|blt)  %61.4 = LdFun              !v    .Call, <0x55eeeba90d38>, e61.1
  prom-           %61.5 = MkArg                    unboundValue, test[0x55eeed9ae450]_p24, e61.1
  (miss|dots)     %61.6 = LdDots             R     , e61.1
  *dots-          %61.7 = ExpandDots               %61.6
  val?            %61.8 = NamedCall          !v    %61.4(%61.5, .xpandDotsTrigger=%61.7) e61.1   <val?>
  val?            %61.9 = PopContext         C     %61.8, %59.4   <vec->
  void                    StVar              lW    metric, %61.9, e59.0
  val?^ | miss    %61.11 = LdVar              eR    c, e59.0
  lgl$#-          %61.12 = Identical                <blt c>, %61.11   <true>
  void                    Branch                   %61.12 -> BB63 (if true) | BB64 (if false)
BB62   <- [59]
  fs              %62.0 = FrameState         R     0x55eeec15f780+78: [], env=e49.0
  fs              %62.1 = FrameState         R     0x55eeed831f80+37: [], env=e59.0, next=%62.0
  env             e62.2 = (MkEnv)            l     fnname=%59.5, ...=%59.3, parent=<env 0x55eeedfdc408>, context 1
  fs              %62.3 = FrameState         R     0x55eeeee353e0+17: [<blt .Call>, %59.7], env=e62.2, next=%62.1
  void                    Deopt              !v    %62.3, DeadBranchReached@0x55eeefb7c318[Test#0], %59.7   !
BB63   <- [61]
  str-            %63.0 = CallSafeBuiltin    wed   c("ascent", "descent", "width")    <str->
  (cls|spec|blt)  %63.1 = LdFun              !v    names<-, <0x55eeeba7d438>, e59.0
  val?^ | miss    %63.2 = LdVar              eR    metric, e59.0
  lgl$#-          %63.3 = IsType                   %63.2 isA val?~- | miss
  void                    Branch                   %63.3 -> BB65 (if true) | BB66 (if false)
BB64   <- [61]
  fs              %64.0 = FrameState         R     0x55eeec15f780+78: [], env=e49.0
  fs              %64.1 = FrameState         R     0x55eeed831f80+51: [], env=e59.0, next=%64.0
  void                    Deopt              !v    %64.1, DeadBranchReached@0x55eeee2dbaa8[Test#0], %61.12   !
BB65   <- [63]
  val?~- | miss   %65.0 = CastType           d     dn %63.2
  val?-           %65.1 = Force!<value>            %65.0,    <vec->
  val?            %65.2 = NamedCall          !v    %63.1(%65.1, value=%63.0) e59.0   <vec+>
  void                    StVar              lW    metric, %65.2, e59.0
  val             %65.4 = ChkMissing         e     %65.2
  val?            %65.5 = PopContext         C     %65.2, %57.1   <vec+>
  void                    StVar              lW    metric, %65.5, e49.0
  val?^ | miss    %65.7 = LdVar              eR    is.character, e49.0
  lgl$#-          %65.8 = Identical                <blt is.character>, %65.7   <true>
  void                    Branch                   %65.8 -> BB67 (if true) | BB68 (if false)
BB66   <- [63]
  fs              %66.0 = FrameState         R     0x55eeec15f780+78: [], env=e49.0
  fs              %66.1 = FrameState         R     0x55eeed831f80+161: [%63.0], env=e59.0, next=%66.0
  void                    Deopt              !v    %66.1, Typecheck@0x55eeee2dbaa8[Type#4], %63.2   !
BB67   <- [65]
  val?^ | miss    %67.0 = LdVar              eR    x, e49.0
  val?            %67.1 = Force!<wrapped>    !v    %67.0, e49.0   <str$->
  lgl$#-          %67.2 = CallSafeBuiltin    wed   is.character(%67.1)    <lgl$->
  void                    Branch                   %67.2 -> BB26 (if true) | BB25 (if false)
BB68   <- [65]
  fs              %68.0 = FrameState         R     0x55eeec15f780+92: [], env=e49.0
  void                    Deopt              !v    %68.0, DeadBranchReached@0x55eeee2dcd38[Test#0], %65.8   !
BB26   <- [67]
  val?^ | miss    %26.0 = LdVar              eR    grid.rect, e49.0
  lgl$#-          %26.1 = Identical                %26.0, function(x=unit(0.5, "npc"), y=unit(0.5, "npc"|...
  void                    Branch                   %26.1 -> BB69 (if true) | BB70 (if false)
BB25   <- [67]
  (cls|spec|blt)  %25.0 = LdFun              !v    grid.rect, e49.0
  fs              %25.1 = FrameState         R     0x55eeec15f780+199: [%25.0], env=e49.0
  void                    Deopt              !v    %25.1, DeadCall@0x55eeee2dcd38[Call#3], %25.0   !
BB69   <- [26]
  prom-           %69.0 = MkArg                    unboundValue, test[0x55eeed9ae450]_p2, e49.0
  prom-           %69.1 = MkArg                    unboundValue, test[0x55eeed9ae450]_p6, e49.0
  prom-           %69.2 = MkArg                    unboundValue, test[0x55eeed9ae450]_p10, e49.0
  ct              %69.3 = PushContext        lCL   missingArg, missingArg, %69.0, %69.1, "bottom", missingArg, missingArg, missingArg, missingArg, %69.2, grid.rect(width=unit($(metric, width), "inches|..., function(x=unit(0.5, "npc"), y=unit(0.5, "npc"|..., e49.0
  val?^           %69.4 = CastType                 up %69.2
  val?^           %69.5 = CastType                 up %69.1
  val?^           %69.6 = CastType                 up %69.0
  env             e69.7 = MkEnv              l     x(miss)=missingArg, y(miss)=missingArg, width=%69.6, height=%69.5, just="bottom", hjust(miss)=missingArg, vjust(miss)=missingArg, default.units(miss)=missingArg, name(miss)=missingArg, gp=%69.4, draw(miss)=missingArg, vp(miss)=missingArg, parent=<env 0x55eeedfdc408>, context 1
  prom-           %69.8 = MkArg                    unboundValue, test[0x55eeed9ae450]_p51, e69.7
  val?^ | miss    %69.9 = CastType                 up %69.8
  void                    StArg              lW    x, %69.9, e69.7
  prom-           %69.11 = MkArg                    unboundValue, test[0x55eeed9ae450]_p53, e69.7
  val?^ | miss    %69.12 = CastType                 up %69.11
  void                    StArg              lW    y, %69.12, e69.7
  void                    StArg              lW    hjust, nil, e69.7
  void                    StArg              lW    vjust, nil, e69.7
  void                    StArg              lW    default.units, "npc", e69.7
  void                    StArg              lW    name, nil, e69.7
  void                    StArg              lW    draw, true, e69.7
  void                    StArg              lW    vp, nil, e69.7
  val?^ | miss    %69.20 = LdVar              eR    rectGrob, <env 0x55eeedfdc408>
  lgl$#-          %69.21 = Identical                %69.20, function(x=unit(0.5, "npc"), y=unit(0.5, "npc"|...
  void                    Branch                   %69.21 -> BB71 (if true) | BB72 (if false)
BB70   <- [26]
  fs              %70.0 = FrameState         R     0x55eeec15f780+183: [%67.2], env=e49.0
  void                    Deopt              !v    %70.0, CallTarget@0x55eeee2dcd38[Call#19], %26.0   !
BB71   <- [69]
  prom-           %71.0 = MkArg                    unboundValue, test[0x55eeed9ae450]_p56, e69.7
  prom-           %71.1 = MkArg                    unboundValue, test[0x55eeed9ae450]_p57, e69.7
  prom-           %71.2 = MkArg                    unboundValue, test[0x55eeed9ae450]_p58, e69.7
  prom-           %71.3 = MkArg                    unboundValue, test[0x55eeed9ae450]_p59, e69.7
  prom-           %71.4 = MkArg                    unboundValue, test[0x55eeed9ae450]_p60 (!refl), e69.7
  prom-           %71.5 = MkArg                    unboundValue, test[0x55eeed9ae450]_p61 (!refl), e69.7
  prom-           %71.6 = MkArg                    unboundValue, test[0x55eeed9ae450]_p62 (!refl), e69.7
  prom-           %71.7 = MkArg                    unboundValue, test[0x55eeed9ae450]_p63 (!refl), e69.7
  prom-           %71.8 = MkArg                    unboundValue, test[0x55eeed9ae450]_p64 (!refl), e69.7
  prom-           %71.9 = MkArg                    unboundValue, test[0x55eeed9ae450]_p65, e69.7
  prom-           %71.10 = MkArg                    unboundValue, test[0x55eeed9ae450]_p66 (!refl), e69.7
  val?            %71.11 = StaticCall         !v    rectGrob[0x55eeedbfa6e0](%71.0, %71.1, %71.2, %71.3, %71.4, %71.5, %71.6, %71.7, %71.8, %71.9, %71.10) { 0n 1n 2n 3n 4n 5n 6n 7n 8n 9n 10n } e69.7   <vec>
  void                    StVar              lW    rg, %71.11, e69.7
  val?^ | miss    %71.13 = LdVar              eR    draw, e69.7
  val?            %71.14 = Force!<lazy>       !v    %71.13, e69.7   <lgl$->
  lgl$#-          %71.15 = CheckTrueFalse     we    %71.14
  void                    Branch                   %71.15 -> BB46 (if true) | BB31 (if false)
BB72   <- [69]
  fs              %72.0 = FrameState         R     0x55eeec15f780+403: [], env=e49.0
  fs              %72.1 = FrameState         R     0x55eef09bb030+0: [], env=e69.7, next=%72.0
  void                    Deopt              !v    %72.1, CallTarget@0x55eeeed03610[Call#5], %69.20   !
BB46   <- [71]
  val?^ | miss    %46.0 = LdVar              eR    grid.draw, e69.7
  lgl$#-          %46.1 = Identical                %46.0, function(x, recording=TRUE) <(rir::DispatchTab|...
  void                    Branch                   %46.1 -> BB75 (if true) | BB76 (if false)
BB31   <- [71]
  void                    Nop                !     
  goto BB32
BB75   <- [46]
  prom-           %75.0 = MkArg                    unboundValue, test[0x55eeed9ae450]_p67, e69.7
  val?            %75.1 = StaticCall         !v    grid.draw[0x55eeedcde310](%75.0) e69.7
  goto BB32
BB76   <- [46]
  fs              %76.0 = FrameState         R     0x55eeec15f780+403: [], env=e49.0
  fs              %76.1 = FrameState         R     0x55eef09bb030+155: [%71.15], env=e69.7, next=%76.0
  void                    Deopt              !v    %76.1, CallTarget@0x55eeeed03610[Call#6], %46.0   !
BB32   <- [31, 75]
  val?^ | miss    %32.0 = LdVar              eR    invisible, e69.7
  lgl$#-          %32.1 = Identical                <blt invisible>, %32.0   <true>
  void                    Branch                   %32.1 -> BB73 (if true) | BB74 (if false)
BB73   <- [32]
  val?^ | miss    %73.0 = LdVar              eR    rg, e69.7
  val?            %73.1 = Force!<value>      !v    %73.0, e69.7   <vec>
  val?            %73.2 = PopContext         C     %73.1, %69.3
  val?^ | miss    %73.3 = LdVar              eR    grid.rect, e49.0
  lgl$#-          %73.4 = Identical                %73.3, function(x=unit(0.5, "npc"), y=unit(0.5, "npc"|...
  void                    Branch                   %73.4 -> BB77 (if true) | BB78 (if false)
BB74   <- [32]
  fs              %74.0 = FrameState         R     0x55eeec15f780+403: [], env=e49.0
  fs              %74.1 = FrameState         R     0x55eef09bb030+198: [], env=e69.7, next=%74.0
  void                    Deopt              !v    %74.1, DeadBranchReached@0x55eeeed03610[Test#0], %32.1   !
BB77   <- [73]
  prom-           %77.0 = MkArg                    unboundValue, test[0x55eeed9ae450]_p12, e49.0
  prom-           %77.1 = MkArg                    unboundValue, test[0x55eeed9ae450]_p16, e49.0
  prom-           %77.2 = MkArg                    unboundValue, test[0x55eeed9ae450]_p20, e49.0
  ct              %77.3 = PushContext        lCL   missingArg, missingArg, %77.0, %77.1, "top", missingArg, missingArg, missingArg, missingArg, %77.2, grid.rect(width=unit($(metric, width), "inches|..., function(x=unit(0.5, "npc"), y=unit(0.5, "npc"|..., e49.0
  val?^           %77.4 = CastType                 up %77.2
  val?^           %77.5 = CastType                 up %77.1
  val?^           %77.6 = CastType                 up %77.0
  env             e77.7 = MkEnv              l     x(miss)=missingArg, y(miss)=missingArg, width=%77.6, height=%77.5, just="top", hjust(miss)=missingArg, vjust(miss)=missingArg, default.units(miss)=missingArg, name(miss)=missingArg, gp=%77.4, draw(miss)=missingArg, vp(miss)=missingArg, parent=<env 0x55eeedfdc408>, context 1
  prom-           %77.8 = MkArg                    unboundValue, test[0x55eeed9ae450]_p68, e77.7
  val?^ | miss    %77.9 = CastType                 up %77.8
  void                    StArg              lW    x, %77.9, e77.7
  prom-           %77.11 = MkArg                    unboundValue, test[0x55eeed9ae450]_p70, e77.7
  val?^ | miss    %77.12 = CastType                 up %77.11
  void                    StArg              lW    y, %77.12, e77.7
  void                    StArg              lW    hjust, nil, e77.7
  void                    StArg              lW    vjust, nil, e77.7
  void                    StArg              lW    default.units, "npc", e77.7
  void                    StArg              lW    name, nil, e77.7
  void                    StArg              lW    draw, true, e77.7
  void                    StArg              lW    vp, nil, e77.7
  val?^ | miss    %77.20 = LdVar              eR    rectGrob, <env 0x55eeedfdc408>
  lgl$#-          %77.21 = Identical                %77.20, function(x=unit(0.5, "npc"), y=unit(0.5, "npc"|...
  void                    Branch                   %77.21 -> BB79 (if true) | BB80 (if false)
BB78   <- [73]
  fs              %78.0 = FrameState         R     0x55eeec15f780+403: [%73.2], env=e49.0
  void                    Deopt              !v    %78.0, CallTarget@0x55eeee2dcd38[Call#26], %73.3   !
BB79   <- [77]
  prom-           %79.0 = MkArg                    unboundValue, test[0x55eeed9ae450]_p73, e77.7
  prom-           %79.1 = MkArg                    unboundValue, test[0x55eeed9ae450]_p74, e77.7
  prom-           %79.2 = MkArg                    unboundValue, test[0x55eeed9ae450]_p75, e77.7
  prom-           %79.3 = MkArg                    unboundValue, test[0x55eeed9ae450]_p76, e77.7
  prom-           %79.4 = MkArg                    unboundValue, test[0x55eeed9ae450]_p77 (!refl), e77.7
  prom-           %79.5 = MkArg                    unboundValue, test[0x55eeed9ae450]_p78 (!refl), e77.7
  prom-           %79.6 = MkArg                    unboundValue, test[0x55eeed9ae450]_p79 (!refl), e77.7
  prom-           %79.7 = MkArg                    unboundValue, test[0x55eeed9ae450]_p80 (!refl), e77.7
  prom-           %79.8 = MkArg                    unboundValue, test[0x55eeed9ae450]_p81 (!refl), e77.7
  prom-           %79.9 = MkArg                    unboundValue, test[0x55eeed9ae450]_p82, e77.7
  prom-           %79.10 = MkArg                    unboundValue, test[0x55eeed9ae450]_p83 (!refl), e77.7
  val?            %79.11 = StaticCall         !v    rectGrob[0x55eeedbfa6e0](%79.0, %79.1, %79.2, %79.3, %79.4, %79.5, %79.6, %79.7, %79.8, %79.9, %79.10) { 0n 1n 2n 3n 4n 5n 6n 7n 8n 9n 10n } e77.7   <vec>
  void                    StVar              lW    rg, %79.11, e77.7
  val?^ | miss    %79.13 = LdVar              eR    draw, e77.7
  val?            %79.14 = Force!<lazy>       !v    %79.13, e77.7   <lgl$->
  lgl$#-          %79.15 = CheckTrueFalse     we    %79.14
  void                    Branch                   %79.15 -> BB45 (if true) | BB41 (if false)
BB80   <- [77]
  fs              %80.0 = FrameState         R     0x55eeec15f780+467: [], env=e49.0
  fs              %80.1 = FrameState         R     0x55eef09bb030+0: [], env=e77.7, next=%80.0
  void                    Deopt              !v    %80.1, CallTarget@0x55eeeed03610[Call#5], %77.20   !
BB45   <- [79]
  val?^ | miss    %45.0 = LdVar              eR    grid.draw, e77.7
  lgl$#-          %45.1 = Identical                %45.0, function(x, recording=TRUE) <(rir::DispatchTab|...
  void                    Branch                   %45.1 -> BB81 (if true) | BB82 (if false)
BB41   <- [79]
  void                    Nop                !     
  goto BB42
BB81   <- [45]
  prom-           %81.0 = MkArg                    unboundValue, test[0x55eeed9ae450]_p84, e77.7
  val?            %81.1 = StaticCall         !v    grid.draw[0x55eeedcde310](%81.0) e77.7
  goto BB42
BB82   <- [45]
  fs              %82.0 = FrameState         R     0x55eeec15f780+467: [], env=e49.0
  fs              %82.1 = FrameState         R     0x55eef09bb030+155: [%79.15], env=e77.7, next=%82.0
  void                    Deopt              !v    %82.1, CallTarget@0x55eeeed03610[Call#6], %45.0   !
BB42   <- [41, 81]
  val?^ | miss    %42.0 = LdVar              eR    invisible, e77.7
  lgl$#-          %42.1 = Identical                <blt invisible>, %42.0   <true>
  void                    Branch                   %42.1 -> BB83 (if true) | BB84 (if false)
BB83   <- [42]
  val?^ | miss    %83.0 = LdVar              eR    rg, e77.7
  val?            %83.1 = Force!<value>      !v    %83.0, e77.7   <vec>
  void                    Invisible          v     
  val?            %83.3 = PopContext         C     %83.1, %77.3   <vec>
  void                    Return             l     %83.3
BB84   <- [42]
  fs              %84.0 = FrameState         R     0x55eeec15f780+467: [], env=e49.0
  fs              %84.1 = FrameState         R     0x55eef09bb030+198: [], env=e77.7, next=%84.0
  void                    Deopt              !v    %84.1, DeadBranchReached@0x55eeeed03610[Test#0], %42.1   !
Prom 0:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    x, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    x, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     unit, <0x55eeee42ab10>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, test[0x55eeed9ae450]_p3, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2, "inches") e0.0   <real$>
  void                    Return             l     %0.3
Prom 3:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     $, <0x55eeeba7cc10>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, test[0x55eeed9ae450]_p4, e0.0
  prom-           %0.3  = MkArg                    unboundValue, test[0x55eeed9ae450]_p5, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <real$->
  void                    Return             l     %0.4
Prom 4:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    metric, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 5:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    width, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 6:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     unit, <0x55eeee42ab10>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, test[0x55eeed9ae450]_p7, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2, "inches") e0.0   <real$>
  void                    Return             l     %0.3
Prom 7:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     $, <0x55eeeba7cc10>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, test[0x55eeed9ae450]_p8, e0.0
  prom-           %0.3  = MkArg                    unboundValue, test[0x55eeed9ae450]_p9, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <real$->
  void                    Return             l     %0.4
Prom 8:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    metric, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 9:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    ascent, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 10:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     gpar, <0x55eeee762e20>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, test[0x55eeed9ae450]_p11, e0.0
  val?            %0.3  = NamedCall          !     %0.1(col=%0.2) e0.0   <vec$>
  void                    Return             l     %0.3
Prom 11:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     rgb, <0x55eeec0cad80>, e0.0
  val?            %0.2  = Call               !     %0.1(1, 0, 0, 0.5) e0.0   <str$->
  void                    Return             l     %0.2
Prom 12:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     unit, <0x55eeee42ab10>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, test[0x55eeed9ae450]_p13, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2, "inches") e0.0   <real$>
  void                    Return             l     %0.3
Prom 13:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     $, <0x55eeeba7cc10>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, test[0x55eeed9ae450]_p14, e0.0
  prom-           %0.3  = MkArg                    unboundValue, test[0x55eeed9ae450]_p15, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <real$->
  void                    Return             l     %0.4
Prom 14:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    metric, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 15:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    width, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 16:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     unit, <0x55eeee42ab10>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, test[0x55eeed9ae450]_p17, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2, "inches") e0.0   <real$>
  void                    Return             l     %0.3
Prom 17:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     $, <0x55eeeba7cc10>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, test[0x55eeed9ae450]_p18, e0.0
  prom-           %0.3  = MkArg                    unboundValue, test[0x55eeed9ae450]_p19, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <real$->
  void                    Return             l     %0.4
Prom 18:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    metric, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 19:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    descent, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 20:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     gpar, <0x55eeee762e20>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, test[0x55eeed9ae450]_p21, e0.0
  val?            %0.3  = NamedCall          !     %0.1(col=%0.2) e0.0   <vec$>
  void                    Return             l     %0.3
Prom 21:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     rgb, <0x55eeec0cad80>, e0.0
  val?            %0.2  = Call               !     %0.1(1, 0, 0, 0.5) e0.0   <str$->
  void                    Return             l     %0.2
Prom 22:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    C_stringMetric, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <vec>
  void                    Return             l     %0.3
Prom 23:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    text, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 24:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     dontCheck, <0x55eeeeda5850>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, test[0x55eeed9ae450]_p25, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <vec>
  void                    Return             l     %0.3
Prom 25:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fnname, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <vec>
  void                    Return             l     %0.3
Prom 27:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     unit, <0x55eeee42ab10>, e0.0
  val?            %0.2  = Call               !     %0.1(0.5, "npc") e0.0   <real$>
  void                    Return             l     %0.2
Prom 34:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     gpar, <0x55eeee762e20>, e0.0
  val?            %0.2  = Call               !     %0.1() e0.0   <vec>
  void                    Return             l     %0.2
Prom 37:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     unit, <0x55eeee42ab10>, e0.0
  val?            %0.2  = Call               !     %0.1(0.5, "npc") e0.0   <real$>
  void                    Return             l     %0.2
Prom 38:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    label, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 39:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    x, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <(real|vec)>
  void                    Return             l     %0.3
Prom 40:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    y, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <(real|vec)$>
  void                    Return             l     %0.3
Prom 41:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    just, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 42:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    hjust, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <nil->
  void                    Return             l     %0.3
Prom 43:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    vjust, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <nil->
  void                    Return             l     %0.3
Prom 44:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    rot, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <real$->
  void                    Return             l     %0.3
Prom 45:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    check.overlap, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <lgl$->
  void                    Return             l     %0.3
Prom 46:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    default.units, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 47:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    name, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <nil->
  void                    Return             l     %0.3
Prom 48:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    gp, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <vec>
  void                    Return             l     %0.3
Prom 49:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    vp, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <nil->
  void                    Return             l     %0.3
Prom 50:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    tg, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <vec>
  void                    Return             l     %0.3
Prom 51:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     unit, <0x55eeee42ab10>, e0.0
  val?            %0.2  = Call               !     %0.1(0.5, "npc") e0.0   <real$>
  void                    Return             l     %0.2
Prom 53:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     unit, <0x55eeee42ab10>, e0.0
  val?            %0.2  = Call               !     %0.1(0.5, "npc") e0.0   <real$>
  void                    Return             l     %0.2
Prom 56:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    x, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <real>
  void                    Return             l     %0.3
Prom 57:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    y, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <real$>
  void                    Return             l     %0.3
Prom 58:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    width, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <real>
  void                    Return             l     %0.3
Prom 59:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    height, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <real>
  void                    Return             l     %0.3
Prom 60:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    just, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 61:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    hjust, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <nil->
  void                    Return             l     %0.3
Prom 62:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    vjust, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <nil->
  void                    Return             l     %0.3
Prom 63:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    default.units, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 64:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    name, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <nil->
  void                    Return             l     %0.3
Prom 65:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    gp, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <vec>
  void                    Return             l     %0.3
Prom 66:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    vp, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <nil->
  void                    Return             l     %0.3
Prom 67:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    rg, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <vec>
  void                    Return             l     %0.3
Prom 68:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     unit, <0x55eeee42ab10>, e0.0
  val?            %0.2  = Call               !     %0.1(0.5, "npc") e0.0   <real$>
  void                    Return             l     %0.2
Prom 70:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     unit, <0x55eeee42ab10>, e0.0
  val?            %0.2  = Call               !     %0.1(0.5, "npc") e0.0   <real$>
  void                    Return             l     %0.2
Prom 73:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    x, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <real>
  void                    Return             l     %0.3
Prom 74:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    y, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <real$>
  void                    Return             l     %0.3
Prom 75:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    width, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <real>
  void                    Return             l     %0.3
Prom 76:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    height, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <real>
  void                    Return             l     %0.3
Prom 77:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    just, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 78:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    hjust, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <nil->
  void                    Return             l     %0.3
Prom 79:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    vjust, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <nil->
  void                    Return             l     %0.3
Prom 80:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    default.units, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 81:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    name, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <nil->
  void                    Return             l     %0.3
Prom 82:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    gp, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <vec>
  void                    Return             l     %0.3
Prom 83:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    vp, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <nil->
  void                    Return             l     %0.3
Prom 84:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    rg, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <vec>
  void                    Return             l     %0.3

│ test[0x55eeed9ae450]                                                         │
└──────────────────────────────────────────────────────────────────────────────┘
