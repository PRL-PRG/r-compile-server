
┌──────────────────────────────────────────────────────────────────────────────┐
│ importIntoEnv[0x55bbe455f780]                                                │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;NonRefl0,NonRefl1,NonRefl2,NonRefl3,!Obj0,!Obj1,!Obj2,!Obj3│
│ Properties:                                                                  │
├────── Final PIR Version
importIntoEnv[0x55bbe455f780]
BB0
  val?^           %0.0  = LdArg                    3
  val?^           %0.1  = LdArg                    2
  val?^           %0.2  = LdArg                    1
  val?^           %0.3  = LdArg                    0
  env             e0.4  = MkEnv              l     impenv=%0.3, impnames=%0.2, expenv=%0.1, expnames=%0.0, parent=R_BaseNamespace, context 1
  prom-           %0.5  = MkArg                    unboundValue, importIntoEnv[0x55bbe455f780]_p0 (!refl), e0.4
  val?            %0.6  = StaticCall         !v    getNamespaceInfo[0x55bbe3f828b0](%0.5, "exports") e0.4   <env->
  void                    StVar              lW    exports, %0.6, e0.4
  lgl$#-          %0.8  = IsType                   %0.6 isA val?-
  val?^ | miss    %0.9  = LdVar              eR    names, e0.4
  lgl$#-          %0.10 = Identical                <blt names>, %0.9   <true>
  void                    Branch                   %0.10 -> BB32 (if true) | BB33 (if false)
BB32   <- [0]
  val             %32.0 = ChkMissing         e     %0.6
  void                    Branch                   %0.8 -> BB34 (if true) | BB35 (if false)
BB33   <- [0]
  void                    Nop                !     
  lgl$#-          %33.1 = %0.10
  dr              %33.2 = DeadBranchReached@0x55bbe48a2ab0[Test#0]
  goto BB31
BB34   <- [32]
  val?-           %34.0 = CastType           d     dn %0.6   <env->
  val+            %34.1 = CallSafeBuiltin    wed   names(%34.0)    <str->
  void                    StVar              lW    ex, %34.1, e0.4
  val?^ | miss    %34.3 = LdVar              eR    all, e0.4
  lgl$#-          %34.4 = Identical                <blt all>, %34.3   <true>
  void                    Branch                   %34.4 -> BB36 (if true) | BB37 (if false)
BB35   <- [32]
  void                    Nop                !     
  val?            %35.1 = %0.6
  dr              %35.2 = Typecheck@0x55bbe48a2ab0[Type#1]
  goto BB31
BB31   <- [33, 35]
  val?^ | miss    %31.0 = Phi                      %33.1:BB33, %35.1:BB35
  val?^ | miss    %31.1 = %31.0
  dr              %31.2 = Phi                      %33.2:BB33, %35.2:BB35
  dr              %31.3 = %31.2
  fs              %31.4 = FrameState         R     0x55bbe3ff4430+51: [], env=e0.4
  void                    Deopt              !v    %31.4, %31.3, %31.1   !
BB36   <- [34]
  val?^ | miss    %36.0 = LdVar              eR    %in%, e0.4
  lgl$#-          %36.1 = Identical                %36.0, function(x, table) <(rir::DispatchTable*)0x55b|...
  void                    Branch                   %36.1 -> BB38 (if true) | BB39 (if false)
BB37   <- [34]
  void                    Nop                !     
  lgl$#-          %37.1 = %34.4
  dr              %37.2 = DeadBranchReached@0x55bbe48a2ab0[Test#1]
  goto BB3
BB38   <- [36]
  prom-           %38.0 = MkArg                    unboundValue, importIntoEnv[0x55bbe455f780]_p1, e0.4
  prom-           %38.1 = MkArg                    unboundValue, importIntoEnv[0x55bbe455f780]_p2 (!refl), e0.4
  val?^           %38.2 = CastType                 up %38.1
  val?^           %38.3 = CastType                 up %38.0
  env             e38.4 = MkEnv              l     x=%38.3, table=%38.2, parent=R_BaseNamespace, context 0
  prom-           %38.5 = MkArg                    unboundValue, importIntoEnv[0x55bbe455f780]_p8, e38.4
  val?^           %38.6 = CastType                 up %38.5
  val?^ | miss    %38.7 = LdVar              eR    expnames, e0.4
  val?            %38.8 = Force!<lazy>       !v    %38.7, e0.4   <str+>
  prom-           %38.9 = MkArg                    %38.8, importIntoEnv[0x55bbe455f780]_p1 (!refl), e0.4
  val?~           %38.10 = CastType                 up %38.9
  void                    StArg              lW    x, %38.10, e38.4
  prom-           %38.12 = MkArg                    %38.8, importIntoEnv[0x55bbe455f780]_p7 (!refl), e38.4
  val?~           %38.13 = CastType                 up %38.12
  env             e38.14 = (MkEnv)            l     x=%38.13, table=%38.6, nomatch=0L, incomparables(miss)=nil, parent=R_BaseNamespace, context -1
  lgl$#-          %38.15 = IsEnvStub          R     , e38.14
  void                    Branch                   %38.15 -> BB40 (if true) | BB41 (if false)
BB39   <- [36]
  void                    Nop                !     
  val?^ | miss    %39.1 = %36.0
  dr              %39.2 = CallTarget@0x55bbe48a2ab0[Call#4]
  goto BB3
BB3   <- [37, 39]
  val?^ | miss    %3.0  = Phi                      %37.1:BB37, %39.1:BB39
  val?^ | miss    %3.1  = %3.0
  dr              %3.2  = Phi                      %37.2:BB37, %39.2:BB39
  dr              %3.3  = %3.2
  fs              %3.4  = FrameState         R     0x55bbe3ff4430+156: [], env=e0.4
  void                    Deopt              !v    %3.4, %3.3, %3.1   !
BB40   <- [38]
  val?            %40.0 = Force!<lazy>       !vrL  %38.2, e38.14   <val?->
  prom-           %40.1 = MkArg                    %40.0, importIntoEnv[0x55bbe455f780]_p8 (!refl), e38.4
  val?~           %40.2 = CastType                 up %40.1
  void                    StArg              lWd   table, %40.2, e38.14
  lgl$#-          %40.4 = IsType                   %40.0 isA val?-
  lgl$#-          %40.5 = IsEnvStub          R     , e38.14
  void                    Branch                   %40.5 -> BB42 (if true) | BB43 (if false)
BB41   <- [38]
  fs              %41.0 = FrameState         R     0x55bbe3ff4430+253: [<blt all>], env=e0.4
  fs              %41.1 = FrameState         R     0x55bbe244d320+54: [], env=e38.4, next=%41.0
  env             e41.2 = (MkEnv)            l     x=%38.13, table=%38.6, nomatch=0L, incomparables(miss)=nil, parent=R_BaseNamespace, context -1
  fs              %41.3 = FrameState         R     0x55bbe2634d40+9: [%38.8], env=e41.2, next=%41.1
  void                    Deopt              !v    %41.3, EnvStubMaterialized@0x55bbe2687cb0[Call#unknown], e38.14   !
BB42   <- [40]
  lgl$#-          %42.0 = IsType                   %38.8 isA val?+
  void                    Branch                   %42.0 -> BB44 (if true) | BB45 (if false)
BB43   <- [40]
  void                    Nop                !     
  env             e43.1 = e38.14
  dr              %43.2 = EnvStubMaterialized@0x55bbe2687cb0[Call#unknown]
  goto BB7
BB44   <- [42]
  val?+           %44.0 = CastType           d     dn %38.8   <(int|str)+>
  void                    Branch                   %40.4 -> BB46 (if true) | BB47 (if false)
BB45   <- [42]
  void                    Nop                !     
  val?            %45.1 = %38.8
  dr              %45.2 = Typecheck@0x55bbe2687cb0[Type#0]
  goto BB7
BB7   <- [43, 45, 47]
  val?^ | miss    %7.0  = Phi                      e43.1:BB43, %45.1:BB45, %47.1:BB47
  val?^ | miss    %7.1  = %7.0
  dr              %7.2  = Phi                      %43.2:BB43, %45.2:BB45, %47.2:BB47
  dr              %7.3  = %7.2
  fs              %7.4  = FrameState         R     0x55bbe3ff4430+253: [<blt all>], env=e0.4
  fs              %7.5  = FrameState         R     0x55bbe244d320+54: [], env=e38.4, next=%7.4
  fs              %7.6  = FrameState         R     0x55bbe2634d40+23: [%38.8, %40.0], env=e38.14, next=%7.5
  void                    Deopt              !v    %7.6, %7.3, %7.1   !
BB46   <- [44]
  val?-           %46.0 = CastType           d     dn %40.0
  val+            %46.1 = CallSafeBuiltin    wed   match(%44.0, %46.0, 0L, nil)    <int->
  lgl$#-          %46.2 = IsType                   %46.1 isA int-
  void                    Branch                   %46.2 -> BB48 (if true) | BB49 (if false)
BB47   <- [44]
  void                    Nop                !     
  val?            %47.1 = %40.0
  dr              %47.2 = Typecheck@0x55bbe2687cb0[Type#1]
  goto BB7
BB48   <- [46]
  int-            %48.0 = CastType           d     dn %46.1
  lgl-            %48.1 = Gt                 wed   %48.0, 0L, elided   <lgl->
  void                    StVar              lW    eie, %48.1, e0.4
  val?            %48.3 = CallBuiltin        !v    all(%48.1) e0.4   <lgl$->
  lgl$#-          %48.4 = IsType                   %48.3 isA lgl$-
  void                    Branch                   %48.4 -> BB50 (if true) | BB51 (if false)
BB49   <- [46]
  fs              %49.0 = FrameState         R     0x55bbe3ff4430+253: [<blt all>], env=e0.4
  fs              %49.1 = FrameState         R     0x55bbe244d320+54: [], env=e38.4, next=%49.0
  fs              %49.2 = FrameState         R     0x55bbe2634d40+69: [%46.1], env=e38.14, next=%49.1
  void                    Deopt              !v    %49.2, Typecheck@0x55bbe347f688[Type#2], %46.1   !
BB50   <- [48]
  lgl$-           %50.0 = CastType           d     dn %48.3
  lgl$-           %50.1 = Not                d     %50.0, elided
  lgl$#-          %50.2 = CheckTrueFalse     e     %50.1
  void                    Branch                   %50.2 -> BB23 (if true) | BB13 (if false)
BB51   <- [48]
  void                    Nop                !     
  val?            %51.1 = %48.3
  dr              %51.2 = Typecheck@0x55bbe48a2ab0[Type#11]
  goto BB11
BB23   <- [50]
  val?^ | miss    %23.0 = LdVar              eR    expnames, e0.4
  val?            %23.1 = Force!             !v    %23.0, e0.4   <val?_>
  lgl$#-          %23.2 = IsType                   %23.1 isA val+   <@?>
  void                    Branch                   %23.2 -> BB28 (if true) | BB24 (if false)
BB13   <- [50]
  val?^ | miss    %13.0 = LdVar              eR    unlist, e0.4
  lgl$#-          %13.1 = Identical                %13.0, function(x, recursive=TRUE, use.names=TRUE) <(|...
  void                    Branch                   %13.1 -> BB52 (if true) | BB53 (if false)
BB11   <- [51, 53]
  val?^ | miss    %11.0 = Phi                      %51.1:BB51, %53.1:BB53
  val?^ | miss    %11.1 = %11.0
  dr              %11.2 = Phi                      %51.2:BB51, %53.2:BB53
  dr              %11.3 = %11.2
  fs              %11.4 = FrameState         R     0x55bbe3ff4430+286: [%48.3], env=e0.4
  void                    Deopt              !v    %11.4, %11.3, %11.1   !
BB28   <- [23]
  val?^ | miss    %28.0 = LdVar              eR    eie, e0.4
  val?            %28.1 = Force!             !v    %28.0, e0.4   <val?_>
  lgl$#-          %28.2 = IsType                   %28.1 isA val?+
  void                    Branch                   %28.2 -> BB54 (if true) | BB55 (if false)
BB24   <- [23]
  prom-           %24.0 = MkArg                    unboundValue, importIntoEnv[0x55bbe455f780]_p6, e0.4
  prom-           %24.1 = %24.0
  goto BB25
BB52   <- [13]
  prom-           %52.0 = MkArg                    unboundValue, importIntoEnv[0x55bbe455f780]_p3, e0.4
  ct              %52.1 = PushContext        lCL   %52.0, false, unlist(mget(expnames, envir=exports, inherits=|..., function(x, recursive=TRUE, use.names=TRUE) <(|..., e0.4
  val?^           %52.2 = CastType                 up %52.0
  env             e52.3 = MkEnv              l     x=%52.2, recursive=false, use.names(miss)=true, parent=R_BaseNamespace, context 1
  cls             %52.4 = MkCls                    unlist@127, e52.3
  cls             %52.5 = MkCls                    unlist>URapply@148, e52.3
  val?            %52.6 = Force!<lazy>       !vL   %52.2, e52.3   <vec+>
  val?            %52.7 = CallBuiltin        !v    islistfactor(%52.6, false) e52.3
  lgl$#-          %52.8 = CheckTrueFalse     we    %52.7
  void                    Branch                   %52.8 -> BB19 (if true) | BB14 (if false)
BB53   <- [13]
  void                    Nop                !     
  val?^ | miss    %53.1 = %13.0
  dr              %53.2 = CallTarget@0x55bbe48a2ab0[Call#23]
  goto BB11
BB54   <- [28]
  val?+           %54.0 = CastType           d     dn %28.1   <val?_>
  lgl             %54.1 = Not                wed   %54.0, elided
  lgl             %54.2 = %54.1
  goto BB25
BB55   <- [28]
  fs              %55.0 = FrameState         R     0x55bbe3ff4430+357: [%23.1, %28.1], env=e0.4
  void                    Deopt              !v    %55.0, Typecheck@0x55bbe48a2ab0[Type#14], %28.1   !
BB25   <- [24, 54]
  (lgl|prom)      %25.0 = Phi                      %54.2:BB54, %24.1:BB24
  (lgl|prom)      %25.1 = %25.0
  val?            %25.2 = Extract1_1D        !v    %23.1, %25.1, e0.4   <val?_>
  void                    StVar              lW    miss, %25.2, e0.4
  val?^ | miss    %25.4 = LdVar              eR    all, e0.4
  lgl$#-          %25.5 = Identical                <blt all>, %25.4   <@?>
  void                    Branch                   %25.5 -> BB27 (if true) | BB26 (if false)
BB19   <- [52]
  val?^ | miss    %19.0 = LdVar              eR    recursive, e52.3
  val?            %19.1 = Force!             !v    %19.0, e52.3   <val?_>
  lgl$#-          %19.2 = CheckTrueFalse     we    %19.1
  void                    Branch                   %19.2 -> BB22 (if true) | BB20 (if false)
BB14   <- [52]
  val?^ | miss    %14.0 = LdVar              eR    x, e52.3
  val?            %14.1 = Force!<wrapped>    !v    %14.0, e52.3   <vec+>
  val?^ | miss    %14.2 = LdVar              eR    recursive, e52.3
  val?            %14.3 = Force!<wrapped>    !v    %14.2, e52.3   <lgl$->
  val?^ | miss    %14.4 = LdVar              eR    use.names, e52.3
  val?            %14.5 = Force!<lazy>       !v    %14.4, e52.3   <lgl$->
  val?            %14.6 = CallBuiltin        !v    unlist(%14.1, %14.3, %14.5) e52.3
  val?            %14.7 = PopContext         C     %14.6, %52.1   <str+>
  void                    StVar              lW    expnames, %14.7, e0.4
  val?^ | miss    %14.9 = LdVar              eR    impnames, e0.4
  val?            %14.10 = Force!<lazy>       !v    %14.9, e0.4   <str->
  lgl$-           %14.11 = Is                       %14.10, NULL
  lgl$#-          %14.12 = CheckTrueFalse     e     %14.11
  void                    Branch                   %14.12 -> BB18 (if true) | BB15 (if false)
BB27   <- [25]
  (cls|spec|blt)  %27.0 = LdFun              !v    startsWith, e0.4
  fs              %27.1 = FrameState         R     0x55bbe3ff4430+444: [<blt all>, %27.0], env=e0.4
  void                    Deopt              !v    %27.1, DeadCall@0x55bbe48a2ab0[Call#7], %27.0   !
BB26   <- [25]
  (cls|spec|blt)  %26.0 = LdFun              !v    all, e0.4
  fs              %26.1 = FrameState         R     0x55bbe3ff4430+407: [%26.0], env=e0.4
  void                    Deopt              !v    %26.1, DeadCall@0x55bbe48a2ab0[Call#5], %26.0   !
BB22   <- [19]
  void                    Nop                !     
  cls             %22.1 = %52.5
  goto BB21
BB20   <- [19]
  void                    Nop                !     
  cls             %20.1 = %52.4
  goto BB21
BB18   <- [14]
  (cls|spec|blt)  %18.0 = LdFun              !v    character, e0.4
  fs              %18.1 = FrameState         R     0x55bbe3ff4430+774: [%18.0], env=e0.4
  void                    Deopt              !v    %18.1, DeadCall@0x55bbe48a2ab0[Call#25], %18.0   !
BB15   <- [14]
  val?^ | miss    %15.0 = LdVar              eR    expnames, e0.4
  val?            %15.1 = Force!<value>      !v    %15.0, e0.4   <str+>
  lgl$-           %15.2 = Is                       %15.1, NULL
  lgl$#-          %15.3 = CheckTrueFalse     e     %15.2
  void                    Branch                   %15.3 -> BB17 (if true) | BB16 (if false)
BB21   <- [22, 20]
  fs              %21.0 = FrameState         R     0x55bbe3ff4430+725: [], env=e0.4
  cls             %21.1 = Phi                      %20.1:BB20, %22.1:BB22
  cls             %21.2 = %21.1
  void                    StVar              lW    URapply, %21.2, e52.3
  (cls|spec|blt)  %21.4 = LdFun              !v    unique, e52.3
  fs              %21.5 = FrameState         R     0x55bbe3e9e9f0+178: [%21.4], env=e52.3, next=%21.0
  void                    Deopt              !v    %21.5, DeadCall@0x55bbe3e69510[Call#0], %21.4   !
BB17   <- [15]
  (cls|spec|blt)  %17.0 = LdFun              !v    character, e0.4
  fs              %17.1 = FrameState         R     0x55bbe3ff4430+845: [%17.0], env=e0.4
  void                    Deopt              !v    %17.1, DeadCall@0x55bbe48a2ab0[Call#26], %17.0   !
BB16   <- [15]
  val?^ | miss    %16.0 = LdVar              eR    impenv, e0.4
  val?            %16.1 = Force!<lazy>       !v    %16.0, e0.4   <env+>
  val?^ | miss    %16.2 = LdVar              eR    impnames, e0.4
  val?            %16.3 = Force!<wrapped>    !v    %16.2, e0.4   <str->
  val?^ | miss    %16.4 = LdVar              eR    expenv, e0.4
  val?            %16.5 = Force!<wrapped>    !v    %16.4, e0.4   <env->
  val?^ | miss    %16.6 = LdVar              eR    expnames, e0.4
  val?            %16.7 = Force!<value>      !v    %16.6, e0.4   <str+>
  val?            %16.8 = CallBuiltin        !     importIntoEnv(%16.1, %16.3, %16.5, %16.7) e0.4
  void                    Return             l     %16.8
Prom 0:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    expenv, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    expnames, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str+>
  void                    Return             l     %0.3
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    ex, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 3:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     mget, <0x55bbe2e05b38>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, importIntoEnv[0x55bbe455f780]_p4, e0.0
  prom-           %0.3  = MkArg                    unboundValue, importIntoEnv[0x55bbe455f780]_p5, e0.0
  val?            %0.4  = NamedCall          !     %0.1(%0.2, envir=%0.3, inherits=false) e0.0   <vec+>
  void                    Return             l     %0.4
Prom 4:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    expnames, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str+>
  void                    Return             l     %0.3
Prom 5:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    exports, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 6:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    eie, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  val?            %0.4  = Not                !     %0.3, e0.0
  void                    Return             l     %0.4
Prom 7:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    x, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <(int|str)+>
  void                    Return             l     %0.3
Prom 8:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    table, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <val?->
  void                    Return             l     %0.3

│ importIntoEnv[0x55bbe455f780]                                                │
└──────────────────────────────────────────────────────────────────────────────┘
