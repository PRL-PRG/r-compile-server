
┌──────────────────────────────────────────────────────────────────────────────┐
│ makeNamespace[0x55bbe42d04a0]                                                │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;NonRefl0,NonRefl1,NonRefl2,!Obj0,!Obj1,!Obj2│
│ Properties:                                                                  │
├────── Final PIR Version
makeNamespace[0x55bbe42d04a0]
BB0
  val?^           %0.0  = LdArg                    2
  val?^           %0.1  = LdArg                    1
  val?^           %0.2  = LdArg                    0
  val?^ | miss    %0.3  = LdVar              eR    new.env, ?
  lgl$#-          %0.4  = Identical                %0.3, function(hash=TRUE, parent=parent.frame(), siz|...
  void                    Branch                   %0.4 -> BB84 (if true) | BB85 (if false)
BB84   <- [0]
  val?^ | miss    %84.0 = LdVar              eR    .BaseNamespaceEnv, ?
  lgl$#-          %84.1 = IsType                   %84.0 isA val?~- | miss
  void                    Branch                   %84.1 -> BB86 (if true) | BB87 (if false)
BB85   <- [0]
  void                    Nop                !     
  val?^ | miss    %85.1 = %0.3
  dr              %85.2 = CallTarget@0x55bbe42eb900[Call#0]
  goto BB83
BB86   <- [84]
  val?~- | miss   %86.0 = CastType           d     dn %84.0
  val?-           %86.1 = Force!<value>            %86.0,    <env->
  val+            %86.2 = CallSafeBuiltin    wed   new.env(true, %86.1, 29L)    <env->
  val?^ | miss    %86.3 = LdVar              eR    paste0, ?
  lgl$#-          %86.4 = Identical                %86.3, function(..., collapse=NULL, recycle0=FALSE) <|...
  void                    Branch                   %86.4 -> BB88 (if true) | BB89 (if false)
BB87   <- [84]
  void                    Nop                !     
  val?^ | miss    %87.1 = %84.0
  dr              %87.2 = Typecheck@0x55bbe42eb900[Type#0]
  goto BB83
BB83   <- [85, 87]
  val?^ | miss    %83.0 = Phi                      %85.1:BB85, %87.1:BB87
  val?^ | miss    %83.1 = %83.0
  dr              %83.2 = Phi                      %85.2:BB85, %87.2:BB87
  dr              %83.3 = %83.2
  env             e83.4 = (MkEnv)            l     name=%0.2, version=%0.1, lib=%0.0, parent=?, context 1
  fs              %83.5 = FrameState         R     0x55bbe3ff4990+0: [], env=e83.4
  void                    Deopt              !v    %83.5, %83.3, %83.1
BB88   <- [86]
  env             e88.0 = MkEnv              l     name=%0.2, version=%0.1, lib=%0.0, impenv=%86.2, parent=?, context 1
  prom-           %88.1 = MkArg                    unboundValue, makeNamespace[0x55bbe42d04a0]_p1 (!refl), e88.0
  dots-           %88.2 = DotsList           l     "imports:", %88.1
  ct              %88.3 = PushContext        lCL   %88.2, paste0("imports:", name), function(..., collapse=NULL, recycle0=FALSE) <|..., e88.0
  val?^ | miss    %88.4 = CastType                 up %88.1
  env             e88.5 = MkEnv              l     ...=%88.2, collapse(miss)=nil, recycle0(miss)=false, parent=R_BaseNamespace, context 1
  val?            %88.6 = Force!             !vrL  %88.4, 
  val+            %88.7 = CallSafeBuiltin    wed   list("imports:", %88.6)    <vec->
  val?            %88.8 = CallBuiltin        !v    paste0(%88.7, nil, false) e88.5
  val?            %88.9 = PopContext         C     %88.8, %88.3   <str$->
  (cls|spec|blt)  %88.10 = LdFun              !v    attr<-, <0x55bbe1e23e08>, e88.0
  val?^ | miss    %88.11 = LdVar              eR    impenv, e88.0
  lgl$#-          %88.12 = IsType                   %88.11 isA val?~- | miss
  void                    Branch                   %88.12 -> BB90 (if true) | BB91 (if false)
BB89   <- [86]
  env             e89.0 = (MkEnv)            l     name=%0.2, version=%0.1, lib=%0.0, impenv=%86.2, parent=?, context 1
  fs              %89.1 = FrameState         R     0x55bbe3ff4990+59: [], env=e89.0
  void                    Deopt              !v    %89.1, CallTarget@0x55bbe42eb900[Call#1], %86.3
BB90   <- [88]
  val?~- | miss   %90.0 = CastType           d     dn %88.11
  val?-           %90.1 = Force!<value>            %90.0,    <env->
  val?            %90.2 = NamedCall          !v    %88.10(%90.1, "name", value=%88.9) e88.0   <env+>
  void                    StVar              lW    impenv, %90.2, e88.0
  lgl$#-          %90.4 = IsType                   %90.2 isA val?+
  val?^ | miss    %90.5 = LdVar              eR    new.env, e88.0
  lgl$#-          %90.6 = Identical                %90.5, function(hash=TRUE, parent=parent.frame(), siz|...
  void                    Branch                   %90.6 -> BB92 (if true) | BB93 (if false)
BB91   <- [88]
  fs              %91.0 = FrameState         R     0x55bbe3ff4990+101: [%88.9], env=e88.0
  void                    Deopt              !v    %91.0, Typecheck@0x55bbe42eb900[Type#4], %88.11   !
BB92   <- [90]
  void                    Branch                   %90.4 -> BB94 (if true) | BB95 (if false)
BB93   <- [90]
  void                    Nop                !     
  val?^ | miss    %93.1 = %90.5
  dr              %93.2 = CallTarget@0x55bbe42eb900[Call#3]
  goto BB7
BB94   <- [92]
  val?+           %94.0 = CastType           d     dn %90.2   <env+>
  val+            %94.1 = CallSafeBuiltin    wed   new.env(true, %94.0, 29L)    <env->
  void                    StVar              lW    env, %94.1, e88.0
  val?^ | miss    %94.3 = LdVar              eR    as.character, e88.0
  lgl$#-          %94.4 = Identical                <blt as.character>, %94.3   <true>
  void                    Branch                   %94.4 -> BB96 (if true) | BB97 (if false)
BB95   <- [92]
  void                    Nop                !     
  val?            %95.1 = %90.2
  dr              %95.2 = Typecheck@0x55bbe4231060[Type#2]
  goto BB7
BB7   <- [93, 95]
  val?^ | miss    %7.0  = Phi                      %93.1:BB93, %95.1:BB95
  val?^ | miss    %7.1  = %7.0
  dr              %7.2  = Phi                      %93.2:BB93, %95.2:BB95
  dr              %7.3  = %7.2
  fs              %7.4  = FrameState         R     0x55bbe3ff4990+178: [], env=e88.0
  void                    Deopt              !v    %7.4, %7.3, %7.1   !
BB96   <- [94]
  val?^ | miss    %96.0 = LdVar              eR    as.name, e88.0
  lgl$#-          %96.1 = Identical                %96.0, function(x) <(rir::DispatchTable*)0x55bbe48f22|...
  void                    Branch                   %96.1 -> BB98 (if true) | BB99 (if false)
BB97   <- [94]
  void                    Nop                !     
  lgl$#-          %97.1 = %94.4
  dr              %97.2 = DeadBranchReached@0x55bbe42eb900[Test#0]
  goto BB9
BB98   <- [96]
  val?^ | miss    %98.0 = LdVar              eR    name, e88.0
  val?            %98.1 = Force!<wrapped>    !v    %98.0, e88.0   <str$->
  lgl$#-          %98.2 = IsType                   %98.1 isA val?-
  void                    Branch                   %98.2 -> BB100 (if true) | BB101 (if false)
BB99   <- [96]
  void                    Nop                !     
  val?^ | miss    %99.1 = %96.0
  dr              %99.2 = CallTarget@0x55bbe42eb900[Call#6]
  goto BB9
BB9   <- [97, 99]
  val?^ | miss    %9.0  = Phi                      %97.1:BB97, %99.1:BB99
  val?^ | miss    %9.1  = %9.0
  dr              %9.2  = Phi                      %97.2:BB97, %99.2:BB99
  dr              %9.3  = %9.2
  fs              %9.4  = FrameState         R     0x55bbe3ff4990+237: [], env=e88.0
  void                    Deopt              !v    %9.4, %9.3, %9.1   !
BB100   <- [98]
  val?-           %100.0 = CastType           d     dn %98.1   <str$->
  val             %100.1 = CallSafeBuiltin    wed   as.vector(%100.0, "symbol")    <sym->
  lgl$#-          %100.2 = IsType                   %100.1 isA val?-
  void                    Branch                   %100.2 -> BB102 (if true) | BB103 (if false)
BB101   <- [98]
  fs              %101.0 = FrameState         R     0x55bbe3ff4990+329: [<blt as.character>], env=e88.0
  prom-           %101.1 = MkArg                    unboundValue, makeNamespace[0x55bbe42d04a0]_p4, e88.0
  val?^           %101.2 = CastType                 up %101.1
  env             e101.3 = (MkEnv)            l     x=%101.2, parent=R_BaseNamespace, context 0
  fs              %101.4 = FrameState         R     0x55bbe42d4910+9: [], env=e101.3, next=%101.0
  fs              %101.5 = FrameState         R     0x55bbe4082b00+5(pr): [%98.1], env=e88.0, next=%101.4
  void                    Deopt              !v    %101.5, Typecheck@0x55bbe312b648[Type#0], %98.1   !
BB102   <- [100]
  val-            %102.0 = CastType           d     dn %100.1   <sym->
  val+            %102.1 = CallSafeBuiltin    wed   as.character(%102.0)    <str$->
  void                    StVar              lW    name, %102.1, e88.0
  val?^ | miss    %102.3 = LdVar              eR    as.character, e88.0
  lgl$#-          %102.4 = Identical                <blt as.character>, %102.3   <true>
  void                    Branch                   %102.4 -> BB104 (if true) | BB105 (if false)
BB103   <- [100]
  fs              %103.0 = FrameState         R     0x55bbe3ff4990+329: [<blt as.character>], env=e88.0
  prom-           %103.1 = MkArg                    %100.0, makeNamespace[0x55bbe42d04a0]_p4 (!refl), e88.0
  val?~           %103.2 = CastType                 up %103.1
  env             e103.3 = (MkEnv)            l     x=%103.2, parent=R_BaseNamespace, context 0
  fs              %103.4 = FrameState         R     0x55bbe42d4910+33: [%100.1], env=e103.3, next=%103.0
  void                    Deopt              !v    %103.4, Typecheck@0x55bbe42eb900[Type#10], %100.1   !
BB104   <- [102]
  val?^ | miss    %104.0 = LdVar              eR    version, e88.0
  val?            %104.1 = Force!<lazy>       !v    %104.0, e88.0   <str$+>
  lgl$#-          %104.2 = IsType                   %104.1 isA val?+
  void                    Branch                   %104.2 -> BB106 (if true) | BB107 (if false)
BB105   <- [102]
  fs              %105.0 = FrameState         R     0x55bbe3ff4990+365: [], env=e88.0
  void                    Deopt              !v    %105.0, DeadBranchReached@0x55bbe42eb900[Test#1], %102.4   !
BB106   <- [104]
  val?+           %106.0 = CastType           d     dn %104.1   <str$+>
  val+            %106.1 = CallSafeBuiltin    wed   as.character(%106.0)    <str$->
  void                    StVar              lW    version, %106.1, e88.0
  val?^ | miss    %106.3 = LdVar              eR    new.env, e88.0
  lgl$#-          %106.4 = Identical                %106.3, function(hash=TRUE, parent=parent.frame(), siz|...
  void                    Branch                   %106.4 -> BB108 (if true) | BB109 (if false)
BB107   <- [104]
  fs              %107.0 = FrameState         R     0x55bbe3ff4990+434: [<blt as.character>, %104.1], env=e88.0
  void                    Deopt              !v    %107.0, Typecheck@0x55bbe42eb900[Type#13], %104.1   !
BB108   <- [106]
  val?^ | miss    %108.0 = LdVar              eR    baseenv, e88.0
  lgl$#-          %108.1 = Identical                %108.0, <blt baseenv>
  void                    Branch                   %108.1 -> BB110 (if true) | BB111 (if false)
BB109   <- [106]
  void                    Nop                !     
  val?^ | miss    %109.1 = %106.3
  dr              %109.2 = CallTarget@0x55bbe42eb900[Call#8]
  goto BB19
BB110   <- [108]
  val?            %110.0 = CallBuiltin        !v    baseenv() e88.0   <env->
  lgl$#-          %110.1 = IsType                   %110.0 isA val?+
  void                    Branch                   %110.1 -> BB112 (if true) | BB113 (if false)
BB111   <- [108]
  void                    Nop                !     
  val?^ | miss    %111.1 = %108.0
  dr              %111.2 = CallTarget@0x55bbe42eb900[Call#9]
  goto BB19
BB19   <- [109, 111]
  val?^ | miss    %19.0 = Phi                      %109.1:BB109, %111.1:BB111
  val?^ | miss    %19.1 = %19.0
  dr              %19.2 = Phi                      %109.2:BB109, %111.2:BB111
  dr              %19.3 = %19.2
  fs              %19.4 = FrameState         R     0x55bbe3ff4990+470: [], env=e88.0
  void                    Deopt              !v    %19.4, %19.3, %19.1   !
BB112   <- [110]
  val?+           %112.0 = CastType           d     dn %110.0   <env+>
  val+            %112.1 = CallSafeBuiltin    wed   new.env(true, %112.0, 29L)    <env->
  void                    StVar              lW    info, %112.1, e88.0
  (cls|spec|blt)  %112.3 = LdFun              !v    <-, <0x55bbe1e14da8>, e88.0
  prom-           %112.4 = MkArg                    unboundValue, makeNamespace[0x55bbe42d04a0]_p6, e88.0
  prom-           %112.5 = MkArg                    unboundValue, makeNamespace[0x55bbe42d04a0]_p9, e88.0
  val?            %112.6 = Call               !v    %112.3(%112.4, %112.5) e88.0
  (cls|spec|blt)  %112.7 = LdFun              !v    <-, <0x55bbe1e14da8>, e88.0
  prom-           %112.8 = MkArg                    unboundValue, makeNamespace[0x55bbe42d04a0]_p10, e88.0
  prom-           %112.9 = MkArg                    unboundValue, makeNamespace[0x55bbe42d04a0]_p13, e88.0
  val?            %112.10 = Call               !v    %112.7(%112.8, %112.9) e88.0
  val?^ | miss    %112.11 = LdVar              eR    setNamespaceInfo, e88.0
  lgl$#-          %112.12 = Identical                %112.11, function(ns, which, val) <(rir::DispatchTable*|...
  void                    Branch                   %112.12 -> BB114 (if true) | BB115 (if false)
BB113   <- [110]
  fs              %113.0 = FrameState         R     0x55bbe3ff4990+515: [], env=e88.0
  prom-           %113.1 = MkArg                    unboundValue, makeNamespace[0x55bbe42d04a0]_p5, e88.0
  val?^           %113.2 = CastType                 up %113.1
  env             e113.3 = (MkEnv)            l     size(miss)=29L, parent=%113.2, hash=true, parent=R_BaseNamespace, context 0
  fs              %113.4 = FrameState         R     0x55bbe41bd610+23: [true], env=e113.3, next=%113.0
  fs              %113.5 = FrameState         R     0x55bbe4175040+27(pr): [%110.0], env=e88.0, next=%113.4
  void                    Deopt              !v    %113.5, Typecheck@0x55bbe4231060[Type#2], %110.0   !
BB114   <- [112]
  prom-           %114.0 = MkArg                    unboundValue, makeNamespace[0x55bbe42d04a0]_p16, e88.0
  prom-           %114.1 = MkArg                    unboundValue, makeNamespace[0x55bbe42d04a0]_p17, e88.0
  ct              %114.2 = PushContext        lCL   %114.0, "exports", %114.1, setNamespaceInfo(env, "exports", new.env(hash=|..., function(ns, which, val) <(rir::DispatchTable*|..., e88.0
  val?^           %114.3 = CastType                 up %114.1
  val?^           %114.4 = CastType                 up %114.0
  env             e114.5 = MkEnv              l     ns=%114.4, which="exports", val=%114.3, parent=R_BaseNamespace, context 1
  val?            %114.6 = Force!<lazy>       !vL   %114.4, e114.5   <env->
  prom-           %114.7 = MkArg                    %114.6, makeNamespace[0x55bbe42d04a0]_p44 (!refl), 
  val?            %114.8 = StaticCall         !v    asNamespace[0x55bbe4ec1180](%114.7, false) { 0 1n } e114.5   <env->
  void                    StVar              lW    ns, %114.8, e114.5
  lgl$#-          %114.10 = IsType                   %114.8 isA val+   <true>
  lgl$#-          %114.11 = IsType                   %114.8 isA val?-
  val             %114.12 = ChkMissing         e     %114.8
  void                    Branch                   %114.10 -> BB116 (if true) | BB117 (if false)
BB115   <- [112]
  fs              %115.0 = FrameState         R     0x55bbe3ff4990+604: [%112.10], env=e88.0
  void                    Deopt              !v    %115.0, CallTarget@0x55bbe42eb900[Call#15], %112.11   !
BB116   <- [114]
  void                    Branch                   %114.11 -> BB118 (if true) | BB119 (if false)
BB117   <- [114]
  void                    Nop                !     
  lgl$#-          %117.1 = %114.10
  dr              %117.2 = DeadBranchReached@0x55bbe4ee18c0[Test#0]
  goto BB25
BB118   <- [116]
  val?-           %118.0 = CastType           d     dn %114.8   <env->
  val?            %118.1 = Extract2_1D        wed   %118.0, ".__NAMESPACE__.", elided   <env->
  void                    StVar              lW    info, %118.1, e114.5
  val?^ | miss    %118.3 = LdVar              eR    val, e114.5
  val?            %118.4 = Force!<lazy>       !v    %118.3, e114.5   <val?+>
  val?^ | miss    %118.5 = LdVar              eR    info !upd, e114.5
  lgl$#-          %118.6 = IsType                   %118.5 isA val?~- | miss
  void                    Branch                   %118.6 -> BB120 (if true) | BB121 (if false)
BB119   <- [116]
  void                    Nop                !     
  val?            %119.1 = %114.8
  dr              %119.2 = Typecheck@0x55bbe4ee18c0[Type#1]
  goto BB25
BB25   <- [117, 119]
  val?^ | miss    %25.0 = Phi                      %117.1:BB117, %119.1:BB119
  val?^ | miss    %25.1 = %25.0
  dr              %25.2 = Phi                      %117.2:BB117, %119.2:BB119
  dr              %25.3 = %25.2
  fs              %25.4 = FrameState         R     0x55bbe3ff4990+647: [], env=e88.0
  fs              %25.5 = FrameState         R     0x55bbe4209f20+59: [], env=e114.5, next=%25.4
  void                    Deopt              !v    %25.5, %25.3, %25.1   !
BB120   <- [118]
  val?~- | miss   %120.0 = CastType           d     dn %118.5
  val?-           %120.1 = Force!<value>            %120.0,    <env->
  val?^ | miss    %120.2 = LdVar              eR    which, e114.5
  val?            %120.3 = Force!<value>      !v    %120.2, e114.5   <str$->
  lgl$#-          %120.4 = IsType                   %120.3 isA val?-
  lgl$#-          %120.5 = IsType                   %118.4 isA val?+
  void                    Branch                   %120.5 -> BB122 (if true) | BB123 (if false)
BB121   <- [118]
  fs              %121.0 = FrameState         R     0x55bbe3ff4990+647: [], env=e88.0
  fs              %121.1 = FrameState         R     0x55bbe4209f20+135: [%118.4], env=e114.5, next=%121.0
  void                    Deopt              !v    %121.1, Typecheck@0x55bbe4ee18c0[Type#5], %118.5   !
BB122   <- [120]
  val?+           %122.0 = CastType           d     dn %118.4
  void                    Branch                   %120.4 -> BB124 (if true) | BB125 (if false)
BB123   <- [120]
  void                    Nop                !     
  val?            %123.1 = %118.4
  dr              %123.2 = Typecheck@0x55bbe4ee18c0[Type#4]
  goto BB29
BB124   <- [122]
  val?-           %124.0 = CastType           d     dn %120.3   <str$->
  val?+           %124.1 = Subassign2_1D      wed   %122.0, %120.1, %124.0, elided
  void                    StVar              lW    info, %124.1, e114.5
  val?            %124.3 = PopContext         C     %122.0, %114.2
  val?^ | miss    %124.4 = LdVar              eR    new.env, e88.0
  lgl$#-          %124.5 = Identical                %124.4, function(hash=TRUE, parent=parent.frame(), siz|...
  void                    Branch                   %124.5 -> BB126 (if true) | BB127 (if false)
BB125   <- [122]
  void                    Nop                !     
  val?            %125.1 = %120.3
  dr              %125.2 = Typecheck@0x55bbe4ee18c0[Type#6]
  goto BB29
BB29   <- [123, 125]
  val?^ | miss    %29.0 = Phi                      %123.1:BB123, %125.1:BB125
  val?^ | miss    %29.1 = %29.0
  dr              %29.2 = Phi                      %123.2:BB123, %125.2:BB125
  dr              %29.3 = %29.2
  fs              %29.4 = FrameState         R     0x55bbe3ff4990+647: [], env=e88.0
  fs              %29.5 = FrameState         R     0x55bbe4209f20+165: [%118.4, %118.4, %120.1, %120.3], env=e114.5, next=%29.4
  void                    Deopt              !v    %29.5, %29.3, %29.1   !
BB126   <- [124]
  val?^ | miss    %126.0 = LdVar              eR    baseenv, e88.0
  lgl$#-          %126.1 = Identical                %126.0, <blt baseenv>
  void                    Branch                   %126.1 -> BB128 (if true) | BB129 (if false)
BB127   <- [124]
  void                    Nop                !     
  val?^ | miss    %127.1 = %124.4
  dr              %127.2 = CallTarget@0x55bbe42eb900[Call#18]
  goto BB31
BB128   <- [126]
  val?            %128.0 = CallBuiltin        !v    baseenv() e88.0   <env->
  lgl$#-          %128.1 = IsType                   %128.0 isA val?+
  void                    Branch                   %128.1 -> BB130 (if true) | BB131 (if false)
BB129   <- [126]
  void                    Nop                !     
  val?^ | miss    %129.1 = %126.0
  dr              %129.2 = CallTarget@0x55bbe42eb900[Call#19]
  goto BB31
BB31   <- [127, 129]
  val?^ | miss    %31.0 = Phi                      %127.1:BB127, %129.1:BB129
  val?^ | miss    %31.1 = %31.0
  dr              %31.2 = Phi                      %127.2:BB127, %129.2:BB129
  dr              %31.3 = %31.2
  fs              %31.4 = FrameState         R     0x55bbe3ff4990+647: [%124.3], env=e88.0
  void                    Deopt              !v    %31.4, %31.3, %31.1   !
BB130   <- [128]
  val?+           %130.0 = CastType           d     dn %128.0   <env+>
  val+            %130.1 = CallSafeBuiltin    wed   new.env(true, %130.0, 29L)    <env->
  void                    StVar              lW    dimpenv, %130.1, e88.0
  val?^ | miss    %130.3 = LdVar              eR    paste0, e88.0
  lgl$#-          %130.4 = Identical                %130.3, function(..., collapse=NULL, recycle0=FALSE) <|...
  void                    Branch                   %130.4 -> BB132 (if true) | BB133 (if false)
BB131   <- [128]
  fs              %131.0 = FrameState         R     0x55bbe3ff4990+693: [], env=e88.0
  prom-           %131.1 = MkArg                    unboundValue, makeNamespace[0x55bbe42d04a0]_p19, e88.0
  val?^           %131.2 = CastType                 up %131.1
  env             e131.3 = (MkEnv)            l     size(miss)=29L, parent=%131.2, hash=true, parent=R_BaseNamespace, context 0
  fs              %131.4 = FrameState         R     0x55bbe41bd610+23: [true], env=e131.3, next=%131.0
  fs              %131.5 = FrameState         R     0x55bbe40a9b90+27(pr): [%128.0], env=e88.0, next=%131.4
  void                    Deopt              !v    %131.5, Typecheck@0x55bbe4231060[Type#2], %128.0   !
BB132   <- [130]
  prom-           %132.0 = MkArg                    unboundValue, makeNamespace[0x55bbe42d04a0]_p20, e88.0
  dots-           %132.1 = DotsList           l     "lazydata:", %132.0
  ct              %132.2 = PushContext        lCL   %132.1, paste0("lazydata:", name), function(..., collapse=NULL, recycle0=FALSE) <|..., e88.0
  val?^ | miss    %132.3 = CastType                 up %132.0
  env             e132.4 = MkEnv              l     ...=%132.1, collapse(miss)=nil, recycle0(miss)=false, parent=R_BaseNamespace, context 1
  val?            %132.5 = Force!             !vL   %132.3, e132.4
  val+            %132.6 = CallSafeBuiltin    wed   list("lazydata:", %132.5)    <vec->
  val?            %132.7 = CallBuiltin        !v    paste0(%132.6, nil, false) e132.4
  val?            %132.8 = PopContext         C     %132.7, %132.2   <str$->
  (cls|spec|blt)  %132.9 = LdFun              !v    attr<-, <0x55bbe1e23e08>, e88.0
  val?^ | miss    %132.10 = LdVar              eR    dimpenv, e88.0
  lgl$#-          %132.11 = IsType                   %132.10 isA val?~- | miss
  void                    Branch                   %132.11 -> BB134 (if true) | BB135 (if false)
BB133   <- [130]
  fs              %133.0 = FrameState         R     0x55bbe3ff4990+707: [], env=e88.0
  void                    Deopt              !v    %133.0, CallTarget@0x55bbe42eb900[Call#20], %130.3   !
BB134   <- [132]
  val?~- | miss   %134.0 = CastType           d     dn %132.10
  val?-           %134.1 = Force!<value>            %134.0,    <env->
  val?            %134.2 = NamedCall          !v    %132.9(%134.1, "name", value=%132.8) e88.0
  void                    StVar              lW    dimpenv, %134.2, e88.0
  val?^ | miss    %134.4 = LdVar              eR    setNamespaceInfo, e88.0
  lgl$#-          %134.5 = Identical                %134.4, function(ns, which, val) <(rir::DispatchTable*|...
  void                    Branch                   %134.5 -> BB136 (if true) | BB137 (if false)
BB135   <- [132]
  fs              %135.0 = FrameState         R     0x55bbe3ff4990+749: [%132.8], env=e88.0
  void                    Deopt              !v    %135.0, Typecheck@0x55bbe42eb900[Type#34], %132.10   !
BB136   <- [134]
  prom-           %136.0 = MkArg                    unboundValue, makeNamespace[0x55bbe42d04a0]_p22, e88.0
  prom-           %136.1 = MkArg                    unboundValue, makeNamespace[0x55bbe42d04a0]_p23 (!refl), e88.0
  ct              %136.2 = PushContext        lCL   %136.0, "lazydata", %136.1, setNamespaceInfo(env, "lazydata", dimpenv), function(ns, which, val) <(rir::DispatchTable*|..., e88.0
  val?^           %136.3 = CastType                 up %136.1
  val?^           %136.4 = CastType                 up %136.0
  env             e136.5 = MkEnv              l     ns=%136.4, which="lazydata", val=%136.3, parent=R_BaseNamespace, context 1
  val?            %136.6 = Force!<lazy>       !vL   %136.4, e136.5   <env->
  prom-           %136.7 = MkArg                    %136.6, makeNamespace[0x55bbe42d04a0]_p48 (!refl), 
  val?            %136.8 = StaticCall         !v    asNamespace[0x55bbe4ec1180](%136.7, false) { 0 1n } e136.5   <env->
  void                    StVar              lW    ns, %136.8, e136.5
  lgl$#-          %136.10 = IsType                   %136.8 isA val+   <true>
  lgl$#-          %136.11 = IsType                   %136.8 isA val?-
  val             %136.12 = ChkMissing         e     %136.8
  void                    Branch                   %136.10 -> BB138 (if true) | BB139 (if false)
BB137   <- [134]
  fs              %137.0 = FrameState         R     0x55bbe3ff4990+826: [], env=e88.0
  void                    Deopt              !v    %137.0, CallTarget@0x55bbe42eb900[Call#22], %134.4   !
BB138   <- [136]
  void                    Branch                   %136.11 -> BB140 (if true) | BB141 (if false)
BB139   <- [136]
  void                    Nop                !     
  lgl$#-          %139.1 = %136.10
  dr              %139.2 = DeadBranchReached@0x55bbe4ee18c0[Test#0]
  goto BB41
BB140   <- [138]
  val?-           %140.0 = CastType           d     dn %136.8   <env->
  val?            %140.1 = Extract2_1D        wed   %140.0, ".__NAMESPACE__.", elided   <env->
  void                    StVar              lW    info, %140.1, e136.5
  val?^ | miss    %140.3 = LdVar              eR    val, e136.5
  val?            %140.4 = Force!<lazy>       !v    %140.3, e136.5   <val?+>
  val?^ | miss    %140.5 = LdVar              eR    info !upd, e136.5
  lgl$#-          %140.6 = IsType                   %140.5 isA val?~- | miss
  void                    Branch                   %140.6 -> BB142 (if true) | BB143 (if false)
BB141   <- [138]
  void                    Nop                !     
  val?            %141.1 = %136.8
  dr              %141.2 = Typecheck@0x55bbe4ee18c0[Type#1]
  goto BB41
BB41   <- [139, 141]
  val?^ | miss    %41.0 = Phi                      %139.1:BB139, %141.1:BB141
  val?^ | miss    %41.1 = %41.0
  dr              %41.2 = Phi                      %139.2:BB139, %141.2:BB141
  dr              %41.3 = %41.2
  fs              %41.4 = FrameState         R     0x55bbe3ff4990+868: [], env=e88.0
  fs              %41.5 = FrameState         R     0x55bbe4209f20+59: [], env=e136.5, next=%41.4
  void                    Deopt              !v    %41.5, %41.3, %41.1   !
BB142   <- [140]
  val?~- | miss   %142.0 = CastType           d     dn %140.5
  val?-           %142.1 = Force!<value>            %142.0,    <env->
  val?^ | miss    %142.2 = LdVar              eR    which, e136.5
  val?            %142.3 = Force!<value>      !v    %142.2, e136.5   <str$->
  lgl$#-          %142.4 = IsType                   %142.3 isA val?-
  lgl$#-          %142.5 = IsType                   %140.4 isA val?+
  void                    Branch                   %142.5 -> BB144 (if true) | BB145 (if false)
BB143   <- [140]
  fs              %143.0 = FrameState         R     0x55bbe3ff4990+868: [], env=e88.0
  fs              %143.1 = FrameState         R     0x55bbe4209f20+135: [%140.4], env=e136.5, next=%143.0
  void                    Deopt              !v    %143.1, Typecheck@0x55bbe4ee18c0[Type#5], %140.5   !
BB144   <- [142]
  val?+           %144.0 = CastType           d     dn %140.4
  void                    Branch                   %142.4 -> BB146 (if true) | BB147 (if false)
BB145   <- [142]
  void                    Nop                !     
  val?            %145.1 = %140.4
  dr              %145.2 = Typecheck@0x55bbe4ee18c0[Type#4]
  goto BB45
BB146   <- [144]
  val?-           %146.0 = CastType           d     dn %142.3   <str$->
  val?+           %146.1 = Subassign2_1D      wed   %144.0, %142.1, %146.0, elided
  void                    StVar              lW    info, %146.1, e136.5
  val?            %146.3 = PopContext         C     %144.0, %136.2
  val?^ | miss    %146.4 = LdVar              eR    setNamespaceInfo, e88.0
  lgl$#-          %146.5 = Identical                %146.4, function(ns, which, val) <(rir::DispatchTable*|...
  void                    Branch                   %146.5 -> BB148 (if true) | BB149 (if false)
BB147   <- [144]
  void                    Nop                !     
  val?            %147.1 = %142.3
  dr              %147.2 = Typecheck@0x55bbe4ee18c0[Type#6]
  goto BB45
BB45   <- [145, 147]
  val?^ | miss    %45.0 = Phi                      %145.1:BB145, %147.1:BB147
  val?^ | miss    %45.1 = %45.0
  dr              %45.2 = Phi                      %145.2:BB145, %147.2:BB147
  dr              %45.3 = %45.2
  fs              %45.4 = FrameState         R     0x55bbe3ff4990+868: [], env=e88.0
  fs              %45.5 = FrameState         R     0x55bbe4209f20+165: [%140.4, %140.4, %142.1, %142.3], env=e136.5, next=%45.4
  void                    Deopt              !v    %45.5, %45.3, %45.1   !
BB148   <- [146]
  prom-           %148.0 = MkArg                    unboundValue, makeNamespace[0x55bbe42d04a0]_p24, e88.0
  prom-           %148.1 = MkArg                    unboundValue, makeNamespace[0x55bbe42d04a0]_p25, e88.0
  ct              %148.2 = PushContext        lCL   %148.0, "imports", %148.1, setNamespaceInfo(env, "imports", list(base=TRUE)), function(ns, which, val) <(rir::DispatchTable*|..., e88.0
  val?^           %148.3 = CastType                 up %148.1
  val?^           %148.4 = CastType                 up %148.0
  env             e148.5 = MkEnv              l     ns=%148.4, which="imports", val=%148.3, parent=R_BaseNamespace, context 1
  val?            %148.6 = Force!<lazy>       !vL   %148.4, e148.5   <env->
  prom-           %148.7 = MkArg                    %148.6, makeNamespace[0x55bbe42d04a0]_p49 (!refl), 
  val?            %148.8 = StaticCall         !v    asNamespace[0x55bbe4ec1180](%148.7, false) { 0 1n } e148.5   <env->
  void                    StVar              lW    ns, %148.8, e148.5
  lgl$#-          %148.10 = IsType                   %148.8 isA val+   <true>
  lgl$#-          %148.11 = IsType                   %148.8 isA val?-
  val             %148.12 = ChkMissing         e     %148.8
  void                    Branch                   %148.10 -> BB150 (if true) | BB151 (if false)
BB149   <- [146]
  fs              %149.0 = FrameState         R     0x55bbe3ff4990+868: [%146.3], env=e88.0
  void                    Deopt              !v    %149.0, CallTarget@0x55bbe42eb900[Call#23], %146.4   !
BB150   <- [148]
  void                    Branch                   %148.11 -> BB152 (if true) | BB153 (if false)
BB151   <- [148]
  void                    Nop                !     
  lgl$#-          %151.1 = %148.10
  dr              %151.2 = DeadBranchReached@0x55bbe4ee18c0[Test#0]
  goto BB49
BB152   <- [150]
  val?-           %152.0 = CastType           d     dn %148.8   <env->
  val?            %152.1 = Extract2_1D        wed   %152.0, ".__NAMESPACE__.", elided   <env->
  void                    StVar              lW    info, %152.1, e148.5
  val?^ | miss    %152.3 = LdVar              eR    val, e148.5
  val?            %152.4 = Force!<lazy>       !v    %152.3, e148.5   <val?+>
  val?^ | miss    %152.5 = LdVar              eR    info !upd, e148.5
  lgl$#-          %152.6 = IsType                   %152.5 isA val?~- | miss
  void                    Branch                   %152.6 -> BB154 (if true) | BB155 (if false)
BB153   <- [150]
  void                    Nop                !     
  val?            %153.1 = %148.8
  dr              %153.2 = Typecheck@0x55bbe4ee18c0[Type#1]
  goto BB49
BB49   <- [151, 153]
  val?^ | miss    %49.0 = Phi                      %151.1:BB151, %153.1:BB153
  val?^ | miss    %49.1 = %49.0
  dr              %49.2 = Phi                      %151.2:BB151, %153.2:BB153
  dr              %49.3 = %49.2
  fs              %49.4 = FrameState         R     0x55bbe3ff4990+911: [], env=e88.0
  fs              %49.5 = FrameState         R     0x55bbe4209f20+59: [], env=e148.5, next=%49.4
  void                    Deopt              !v    %49.5, %49.3, %49.1   !
BB154   <- [152]
  val?~- | miss   %154.0 = CastType           d     dn %152.5
  val?-           %154.1 = Force!<value>            %154.0,    <env->
  val?^ | miss    %154.2 = LdVar              eR    which, e148.5
  val?            %154.3 = Force!<value>      !v    %154.2, e148.5   <str$->
  lgl$#-          %154.4 = IsType                   %154.3 isA val?-
  lgl$#-          %154.5 = IsType                   %152.4 isA val?+
  void                    Branch                   %154.5 -> BB156 (if true) | BB157 (if false)
BB155   <- [152]
  fs              %155.0 = FrameState         R     0x55bbe3ff4990+911: [], env=e88.0
  fs              %155.1 = FrameState         R     0x55bbe4209f20+135: [%152.4], env=e148.5, next=%155.0
  void                    Deopt              !v    %155.1, Typecheck@0x55bbe4ee18c0[Type#5], %152.5   !
BB156   <- [154]
  val?+           %156.0 = CastType           d     dn %152.4
  void                    Branch                   %154.4 -> BB158 (if true) | BB159 (if false)
BB157   <- [154]
  void                    Nop                !     
  val?            %157.1 = %152.4
  dr              %157.2 = Typecheck@0x55bbe4ee18c0[Type#4]
  goto BB53
BB158   <- [156]
  val?-           %158.0 = CastType           d     dn %154.3   <str$->
  val?+           %158.1 = Subassign2_1D      wed   %156.0, %154.1, %158.0, elided
  void                    StVar              lW    info, %158.1, e148.5
  val?            %158.3 = PopContext         C     %156.0, %148.2
  val?^ | miss    %158.4 = LdVar              eR    setNamespaceInfo, e88.0
  lgl$#-          %158.5 = Identical                %158.4, function(ns, which, val) <(rir::DispatchTable*|...
  void                    Branch                   %158.5 -> BB160 (if true) | BB161 (if false)
BB159   <- [156]
  void                    Nop                !     
  val?            %159.1 = %154.3
  dr              %159.2 = Typecheck@0x55bbe4ee18c0[Type#6]
  goto BB53
BB53   <- [157, 159]
  val?^ | miss    %53.0 = Phi                      %157.1:BB157, %159.1:BB159
  val?^ | miss    %53.1 = %53.0
  dr              %53.2 = Phi                      %157.2:BB157, %159.2:BB159
  dr              %53.3 = %53.2
  fs              %53.4 = FrameState         R     0x55bbe3ff4990+911: [], env=e88.0
  fs              %53.5 = FrameState         R     0x55bbe4209f20+165: [%152.4, %152.4, %154.1, %154.3], env=e148.5, next=%53.4
  void                    Deopt              !v    %53.5, %53.3, %53.1   !
BB160   <- [158]
  prom-           %160.0 = MkArg                    unboundValue, makeNamespace[0x55bbe42d04a0]_p26, e88.0
  prom-           %160.1 = MkArg                    unboundValue, makeNamespace[0x55bbe42d04a0]_p27, e88.0
  ct              %160.2 = PushContext        lCL   %160.0, "path", %160.1, setNamespaceInfo(env, "path", normalizePath(fi|..., function(ns, which, val) <(rir::DispatchTable*|..., e88.0
  val?^           %160.3 = CastType                 up %160.1
  val?^           %160.4 = CastType                 up %160.0
  env             e160.5 = MkEnv              l     ns=%160.4, which="path", val=%160.3, parent=R_BaseNamespace, context 1
  val?            %160.6 = Force!<lazy>       !vL   %160.4, e160.5   <env->
  prom-           %160.7 = MkArg                    %160.6, makeNamespace[0x55bbe42d04a0]_p50 (!refl), 
  val?            %160.8 = StaticCall         !v    asNamespace[0x55bbe4ec1180](%160.7, false) { 0 1n } e160.5   <env->
  void                    StVar              lW    ns, %160.8, e160.5
  lgl$#-          %160.10 = IsType                   %160.8 isA val+   <true>
  lgl$#-          %160.11 = IsType                   %160.8 isA val?-
  val             %160.12 = ChkMissing         e     %160.8
  void                    Branch                   %160.10 -> BB162 (if true) | BB163 (if false)
BB161   <- [158]
  fs              %161.0 = FrameState         R     0x55bbe3ff4990+911: [%158.3], env=e88.0
  void                    Deopt              !v    %161.0, CallTarget@0x55bbe42eb900[Call#25], %158.4   !
BB162   <- [160]
  void                    Branch                   %160.11 -> BB164 (if true) | BB165 (if false)
BB163   <- [160]
  void                    Nop                !     
  lgl$#-          %163.1 = %160.10
  dr              %163.2 = DeadBranchReached@0x55bbe4ee18c0[Test#0]
  goto BB57
BB164   <- [162]
  val?-           %164.0 = CastType           d     dn %160.8   <env->
  val?            %164.1 = Extract2_1D        wed   %164.0, ".__NAMESPACE__.", elided   <env->
  void                    StVar              lW    info, %164.1, e160.5
  val?^ | miss    %164.3 = LdVar              eR    val, e160.5
  val?            %164.4 = Force!<lazy>       !v    %164.3, e160.5   <val?+>
  val?^ | miss    %164.5 = LdVar              eR    info !upd, e160.5
  lgl$#-          %164.6 = IsType                   %164.5 isA val?~- | miss
  void                    Branch                   %164.6 -> BB166 (if true) | BB167 (if false)
BB165   <- [162]
  void                    Nop                !     
  val?            %165.1 = %160.8
  dr              %165.2 = Typecheck@0x55bbe4ee18c0[Type#1]
  goto BB57
BB57   <- [163, 165]
  val?^ | miss    %57.0 = Phi                      %163.1:BB163, %165.1:BB165
  val?^ | miss    %57.1 = %57.0
  dr              %57.2 = Phi                      %163.2:BB163, %165.2:BB165
  dr              %57.3 = %57.2
  fs              %57.4 = FrameState         R     0x55bbe3ff4990+954: [], env=e88.0
  fs              %57.5 = FrameState         R     0x55bbe4209f20+59: [], env=e160.5, next=%57.4
  void                    Deopt              !v    %57.5, %57.3, %57.1   !
BB166   <- [164]
  val?~- | miss   %166.0 = CastType           d     dn %164.5
  val?-           %166.1 = Force!<value>            %166.0,    <env->
  val?^ | miss    %166.2 = LdVar              eR    which, e160.5
  val?            %166.3 = Force!<value>      !v    %166.2, e160.5   <str$->
  lgl$#-          %166.4 = IsType                   %166.3 isA val?-
  lgl$#-          %166.5 = IsType                   %164.4 isA val?+
  void                    Branch                   %166.5 -> BB168 (if true) | BB169 (if false)
BB167   <- [164]
  fs              %167.0 = FrameState         R     0x55bbe3ff4990+954: [], env=e88.0
  fs              %167.1 = FrameState         R     0x55bbe4209f20+135: [%164.4], env=e160.5, next=%167.0
  void                    Deopt              !v    %167.1, Typecheck@0x55bbe4ee18c0[Type#5], %164.5   !
BB168   <- [166]
  val?+           %168.0 = CastType           d     dn %164.4
  void                    Branch                   %166.4 -> BB170 (if true) | BB171 (if false)
BB169   <- [166]
  void                    Nop                !     
  val?            %169.1 = %164.4
  dr              %169.2 = Typecheck@0x55bbe4ee18c0[Type#4]
  goto BB61
BB170   <- [168]
  val?-           %170.0 = CastType           d     dn %166.3   <str$->
  val?+           %170.1 = Subassign2_1D      wed   %168.0, %166.1, %170.0, elided
  void                    StVar              lW    info, %170.1, e160.5
  val?            %170.3 = PopContext         C     %168.0, %160.2
  val?^ | miss    %170.4 = LdVar              eR    setNamespaceInfo, e88.0
  lgl$#-          %170.5 = Identical                %170.4, function(ns, which, val) <(rir::DispatchTable*|...
  void                    Branch                   %170.5 -> BB172 (if true) | BB173 (if false)
BB171   <- [168]
  void                    Nop                !     
  val?            %171.1 = %166.3
  dr              %171.2 = Typecheck@0x55bbe4ee18c0[Type#6]
  goto BB61
BB61   <- [169, 171]
  val?^ | miss    %61.0 = Phi                      %169.1:BB169, %171.1:BB171
  val?^ | miss    %61.1 = %61.0
  dr              %61.2 = Phi                      %169.2:BB169, %171.2:BB171
  dr              %61.3 = %61.2
  fs              %61.4 = FrameState         R     0x55bbe3ff4990+954: [], env=e88.0
  fs              %61.5 = FrameState         R     0x55bbe4209f20+165: [%164.4, %164.4, %166.1, %166.3], env=e160.5, next=%61.4
  void                    Deopt              !v    %61.5, %61.3, %61.1   !
BB172   <- [170]
  prom-           %172.0 = MkArg                    unboundValue, makeNamespace[0x55bbe42d04a0]_p31, e88.0
  ct              %172.1 = PushContext        lCL   %172.0, "dynlibs", nil, setNamespaceInfo(env, "dynlibs", NULL), function(ns, which, val) <(rir::DispatchTable*|..., e88.0
  val?^           %172.2 = CastType                 up %172.0
  env             e172.3 = MkEnv              l     ns=%172.2, which="dynlibs", val=nil, parent=R_BaseNamespace, context 1
  val?            %172.4 = Force!<lazy>       !vL   %172.2, e172.3   <env->
  prom-           %172.5 = MkArg                    %172.4, makeNamespace[0x55bbe42d04a0]_p51 (!refl), 
  val?            %172.6 = StaticCall         !v    asNamespace[0x55bbe4ec1180](%172.5, false) { 0 1n } e172.3   <env->
  void                    StVar              lW    ns, %172.6, e172.3
  lgl$#-          %172.8 = IsType                   %172.6 isA val+   <true>
  lgl$#-          %172.9 = IsType                   %172.6 isA val?-
  val             %172.10 = ChkMissing         e     %172.6
  void                    Branch                   %172.8 -> BB174 (if true) | BB175 (if false)
BB173   <- [170]
  fs              %173.0 = FrameState         R     0x55bbe3ff4990+954: [%170.3], env=e88.0
  void                    Deopt              !v    %173.0, CallTarget@0x55bbe42eb900[Call#28], %170.4   !
BB174   <- [172]
  void                    Branch                   %172.9 -> BB176 (if true) | BB177 (if false)
BB175   <- [172]
  void                    Nop                !     
  lgl$#-          %175.1 = %172.8
  dr              %175.2 = DeadBranchReached@0x55bbe4ee18c0[Test#0]
  goto BB65
BB176   <- [174]
  val?-           %176.0 = CastType           d     dn %172.6   <env->
  val?            %176.1 = Extract2_1D        wed   %176.0, ".__NAMESPACE__.", elided   <env->
  void                    StVar              lW    info, %176.1, e172.3
  val?^ | miss    %176.3 = LdVar              eR    val, e172.3
  val?            %176.4 = Force!<lazy>       !v    %176.3, e172.3   <val?+>
  val?^ | miss    %176.5 = LdVar              eR    info !upd, e172.3
  lgl$#-          %176.6 = IsType                   %176.5 isA val?~- | miss
  void                    Branch                   %176.6 -> BB178 (if true) | BB179 (if false)
BB177   <- [174]
  void                    Nop                !     
  val?            %177.1 = %172.6
  dr              %177.2 = Typecheck@0x55bbe4ee18c0[Type#1]
  goto BB65
BB65   <- [175, 177]
  val?^ | miss    %65.0 = Phi                      %175.1:BB175, %177.1:BB177
  val?^ | miss    %65.1 = %65.0
  dr              %65.2 = Phi                      %175.2:BB175, %177.2:BB177
  dr              %65.3 = %65.2
  fs              %65.4 = FrameState         R     0x55bbe3ff4990+997: [], env=e88.0
  fs              %65.5 = FrameState         R     0x55bbe4209f20+59: [], env=e172.3, next=%65.4
  void                    Deopt              !v    %65.5, %65.3, %65.1   !
BB178   <- [176]
  val?~- | miss   %178.0 = CastType           d     dn %176.5
  val?-           %178.1 = Force!<value>            %178.0,    <env->
  val?^ | miss    %178.2 = LdVar              eR    which, e172.3
  val?            %178.3 = Force!<value>      !v    %178.2, e172.3   <str$->
  lgl$#-          %178.4 = IsType                   %178.3 isA val?-
  lgl$#-          %178.5 = IsType                   %176.4 isA val?+
  void                    Branch                   %178.5 -> BB180 (if true) | BB181 (if false)
BB179   <- [176]
  fs              %179.0 = FrameState         R     0x55bbe3ff4990+997: [], env=e88.0
  fs              %179.1 = FrameState         R     0x55bbe4209f20+135: [%176.4], env=e172.3, next=%179.0
  void                    Deopt              !v    %179.1, Typecheck@0x55bbe4ee18c0[Type#5], %176.5   !
BB180   <- [178]
  val?+           %180.0 = CastType           d     dn %176.4
  void                    Branch                   %178.4 -> BB182 (if true) | BB183 (if false)
BB181   <- [178]
  void                    Nop                !     
  val?            %181.1 = %176.4
  dr              %181.2 = Typecheck@0x55bbe4ee18c0[Type#4]
  goto BB69
BB182   <- [180]
  val?-           %182.0 = CastType           d     dn %178.3   <str$->
  val?+           %182.1 = Subassign2_1D      wed   %180.0, %178.1, %182.0, elided
  void                    StVar              lW    info, %182.1, e172.3
  val?            %182.3 = PopContext         C     %180.0, %172.1
  val?^ | miss    %182.4 = LdVar              eR    setNamespaceInfo, e88.0
  lgl$#-          %182.5 = Identical                %182.4, function(ns, which, val) <(rir::DispatchTable*|...
  void                    Branch                   %182.5 -> BB184 (if true) | BB185 (if false)
BB183   <- [180]
  void                    Nop                !     
  val?            %183.1 = %178.3
  dr              %183.2 = Typecheck@0x55bbe4ee18c0[Type#6]
  goto BB69
BB69   <- [181, 183]
  val?^ | miss    %69.0 = Phi                      %181.1:BB181, %183.1:BB183
  val?^ | miss    %69.1 = %69.0
  dr              %69.2 = Phi                      %181.2:BB181, %183.2:BB183
  dr              %69.3 = %69.2
  fs              %69.4 = FrameState         R     0x55bbe3ff4990+997: [], env=e88.0
  fs              %69.5 = FrameState         R     0x55bbe4209f20+165: [%176.4, %176.4, %178.1, %178.3], env=e172.3, next=%69.4
  void                    Deopt              !v    %69.5, %69.3, %69.1   !
BB184   <- [182]
  prom-           %184.0 = MkArg                    unboundValue, makeNamespace[0x55bbe42d04a0]_p32, e88.0
  prom-           %184.1 = MkArg                    unboundValue, makeNamespace[0x55bbe42d04a0]_p33, e88.0
  ct              %184.2 = PushContext        lCL   %184.0, "S3methods", %184.1, setNamespaceInfo(env, "S3methods", matrix(NA, |..., function(ns, which, val) <(rir::DispatchTable*|..., e88.0
  val?^           %184.3 = CastType                 up %184.1
  val?^           %184.4 = CastType                 up %184.0
  env             e184.5 = MkEnv              l     ns=%184.4, which="S3methods", val=%184.3, parent=R_BaseNamespace, context 1
  val?            %184.6 = Force!<lazy>       !vL   %184.4, e184.5   <env->
  prom-           %184.7 = MkArg                    %184.6, makeNamespace[0x55bbe42d04a0]_p52 (!refl), 
  val?            %184.8 = StaticCall         !v    asNamespace[0x55bbe4ec1180](%184.7, false) { 0 1n } e184.5   <env->
  void                    StVar              lW    ns, %184.8, e184.5
  lgl$#-          %184.10 = IsType                   %184.8 isA val+   <true>
  lgl$#-          %184.11 = IsType                   %184.8 isA val?-
  val             %184.12 = ChkMissing         e     %184.8
  void                    Branch                   %184.10 -> BB186 (if true) | BB187 (if false)
BB185   <- [182]
  fs              %185.0 = FrameState         R     0x55bbe3ff4990+997: [%182.3], env=e88.0
  void                    Deopt              !v    %185.0, CallTarget@0x55bbe42eb900[Call#29], %182.4   !
BB186   <- [184]
  void                    Branch                   %184.11 -> BB188 (if true) | BB189 (if false)
BB187   <- [184]
  void                    Nop                !     
  lgl$#-          %187.1 = %184.10
  dr              %187.2 = DeadBranchReached@0x55bbe4ee18c0[Test#0]
  goto BB73
BB188   <- [186]
  val?-           %188.0 = CastType           d     dn %184.8   <env->
  val?            %188.1 = Extract2_1D        wed   %188.0, ".__NAMESPACE__.", elided   <env->
  void                    StVar              lW    info, %188.1, e184.5
  val?^ | miss    %188.3 = LdVar              eR    val, e184.5
  val?            %188.4 = Force!<lazy>       !v    %188.3, e184.5   <val?+>
  val?^ | miss    %188.5 = LdVar              eR    info !upd, e184.5
  lgl$#-          %188.6 = IsType                   %188.5 isA val?~- | miss
  void                    Branch                   %188.6 -> BB190 (if true) | BB191 (if false)
BB189   <- [186]
  void                    Nop                !     
  val?            %189.1 = %184.8
  dr              %189.2 = Typecheck@0x55bbe4ee18c0[Type#1]
  goto BB73
BB73   <- [187, 189]
  val?^ | miss    %73.0 = Phi                      %187.1:BB187, %189.1:BB189
  val?^ | miss    %73.1 = %73.0
  dr              %73.2 = Phi                      %187.2:BB187, %189.2:BB189
  dr              %73.3 = %73.2
  fs              %73.4 = FrameState         R     0x55bbe3ff4990+1040: [], env=e88.0
  fs              %73.5 = FrameState         R     0x55bbe4209f20+59: [], env=e184.5, next=%73.4
  void                    Deopt              !v    %73.5, %73.3, %73.1   !
BB190   <- [188]
  val?~- | miss   %190.0 = CastType           d     dn %188.5
  val?-           %190.1 = Force!<value>            %190.0,    <env->
  val?^ | miss    %190.2 = LdVar              eR    which, e184.5
  val?            %190.3 = Force!<value>      !v    %190.2, e184.5   <str$->
  lgl$#-          %190.4 = IsType                   %190.3 isA val?-
  lgl$#-          %190.5 = IsType                   %188.4 isA val?+
  void                    Branch                   %190.5 -> BB192 (if true) | BB193 (if false)
BB191   <- [188]
  fs              %191.0 = FrameState         R     0x55bbe3ff4990+1040: [], env=e88.0
  fs              %191.1 = FrameState         R     0x55bbe4209f20+135: [%188.4], env=e184.5, next=%191.0
  void                    Deopt              !v    %191.1, Typecheck@0x55bbe4ee18c0[Type#5], %188.5   !
BB192   <- [190]
  val?+           %192.0 = CastType           d     dn %188.4
  void                    Branch                   %190.4 -> BB194 (if true) | BB195 (if false)
BB193   <- [190]
  void                    Nop                !     
  val?            %193.1 = %188.4
  dr              %193.2 = Typecheck@0x55bbe4ee18c0[Type#4]
  goto BB77
BB194   <- [192]
  val?-           %194.0 = CastType           d     dn %190.3   <str$->
  val?+           %194.1 = Subassign2_1D      wed   %192.0, %190.1, %194.0, elided
  void                    StVar              lW    info, %194.1, e184.5
  val?            %194.3 = PopContext         C     %192.0, %184.2
  (cls|spec|blt)  %194.4 = LdFun              !v    <-, <0x55bbe1e14da8>, e88.0
  prom-           %194.5 = MkArg                    unboundValue, makeNamespace[0x55bbe42d04a0]_p34, e88.0
  prom-           %194.6 = MkArg                    unboundValue, makeNamespace[0x55bbe42d04a0]_p37, e88.0
  val?            %194.7 = Call               !v    %194.4(%194.5, %194.6) e88.0
  val?^ | miss    %194.8 = LdVar              eR    name, e88.0
  val?            %194.9 = Force!<value>      !v    %194.8, e88.0   <str$->
  val?^ | miss    %194.10 = LdVar              eR    env, e88.0
  lgl$#-          %194.11 = IsType                   %194.10 isA val?~- | miss
  void                    Branch                   %194.11 -> BB196 (if true) | BB197 (if false)
BB195   <- [192]
  void                    Nop                !     
  val?            %195.1 = %190.3
  dr              %195.2 = Typecheck@0x55bbe4ee18c0[Type#6]
  goto BB77
BB77   <- [193, 195]
  val?^ | miss    %77.0 = Phi                      %193.1:BB193, %195.1:BB195
  val?^ | miss    %77.1 = %77.0
  dr              %77.2 = Phi                      %193.2:BB193, %195.2:BB195
  dr              %77.3 = %77.2
  fs              %77.4 = FrameState         R     0x55bbe3ff4990+1040: [], env=e88.0
  fs              %77.5 = FrameState         R     0x55bbe4209f20+165: [%188.4, %188.4, %190.1, %190.3], env=e184.5, next=%77.4
  void                    Deopt              !v    %77.5, %77.3, %77.1   !
BB196   <- [194]
  val?~- | miss   %196.0 = CastType           d     dn %194.10
  val?-           %196.1 = Force!<value>            %196.0,    <env->
  val?            %196.2 = CallBuiltin        !v    registerNamespace(%194.9, %196.1) e88.0
  val?^ | miss    %196.3 = LdVar              eR    env, e88.0
  lgl$#-          %196.4 = IsType                   %196.3 isA val?~- | miss
  void                    Branch                   %196.4 -> BB198 (if true) | BB199 (if false)
BB197   <- [194]
  fs              %197.0 = FrameState         R     0x55bbe3ff4990+1088: [%194.9], env=e88.0
  void                    Deopt              !v    %197.0, Typecheck@0x55bbe42eb900[Type#53], %194.10   !
BB198   <- [196]
  val?~- | miss   %198.0 = CastType           d     dn %196.3
  void                    Visible            v     
  val?-           %198.2 = Force!<value>            %198.0,    <env->
  void                    Return             l     %198.2
BB199   <- [196]
  fs              %199.0 = FrameState         R     0x55bbe3ff4990+1120: [%196.2], env=e88.0
  void                    Deopt              !v    %199.0, Typecheck@0x55bbe42eb900[Type#54], %196.3   !
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    name, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 4:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    name, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 5:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     baseenv, <0x55bbe1e34278>, e0.0
  val?            %0.2  = Call               !     %0.1() e0.0   <env->
  void                    Return             l     %0.2
Prom 6:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     $, e0.0
  prom-           %0.2  = MkArg                    unboundValue, makeNamespace[0x55bbe42d04a0]_p7, e0.0
  prom-           %0.3  = MkArg                    unboundValue, makeNamespace[0x55bbe42d04a0]_p8, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 7:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    env, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 8:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    .__NAMESPACE__., e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 9:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    info, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 10:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     $, e0.0
  prom-           %0.2  = MkArg                    unboundValue, makeNamespace[0x55bbe42d04a0]_p11, e0.0
  prom-           %0.3  = MkArg                    unboundValue, makeNamespace[0x55bbe42d04a0]_p12, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 11:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    info, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 12:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    spec, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 13:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     c, e0.0
  prom-           %0.2  = MkArg                    unboundValue, makeNamespace[0x55bbe42d04a0]_p14, e0.0
  prom-           %0.3  = MkArg                    unboundValue, makeNamespace[0x55bbe42d04a0]_p15, e0.0
  val?            %0.4  = NamedCall          !     %0.1(name=%0.2, version=%0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 14:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    name, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 15:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    version, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 16:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    env, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 17:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     new.env, <0x55bbe1f384c0>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, makeNamespace[0x55bbe42d04a0]_p18, e0.0
  val?            %0.3  = NamedCall          !     %0.1(hash=true, parent=%0.2) e0.0   <env->
  void                    Return             l     %0.3
Prom 18:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     baseenv, <0x55bbe1e34278>, e0.0
  val?            %0.2  = Call               !     %0.1() e0.0   <env->
  void                    Return             l     %0.2
Prom 19:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     baseenv, <0x55bbe1e34278>, e0.0
  val?            %0.2  = Call               !     %0.1() e0.0   <env->
  void                    Return             l     %0.2
Prom 20:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    name, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 22:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    env, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 23:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    dimpenv, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <env+>
  void                    Return             l     %0.3
Prom 24:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    env, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 25:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     list, <0x55bbe1e345c0>, e0.0
  val?            %0.2  = NamedCall          !     %0.1(base=true) e0.0   <vec$+>
  void                    Return             l     %0.2
Prom 26:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    env, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 27:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     normalizePath, <0x55bbe216cef0>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, makeNamespace[0x55bbe42d04a0]_p28, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2, "/", true) e0.0   <str$->
  void                    Return             l     %0.3
Prom 28:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     file.path, <0x55bbe21531e0>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, makeNamespace[0x55bbe42d04a0]_p29, e0.0
  prom-           %0.3  = MkArg                    unboundValue, makeNamespace[0x55bbe42d04a0]_p30, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <str$->
  void                    Return             l     %0.4
Prom 29:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    lib, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 30:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    name, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 31:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    env, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 32:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    env, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 33:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     matrix, <0x55bbe24312c0>, e0.0
  val?            %0.2  = Call               !     %0.1(NA, 0L, 4L) e0.0   <str_>
  void                    Return             l     %0.2
Prom 34:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     $, e0.0
  prom-           %0.2  = MkArg                    unboundValue, makeNamespace[0x55bbe42d04a0]_p35, e0.0
  prom-           %0.3  = MkArg                    unboundValue, makeNamespace[0x55bbe42d04a0]_p36, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 35:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    env, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 36:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    .__S3MethodsTable__., e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 37:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     new.env, e0.0
  prom-           %0.2  = MkArg                    unboundValue, makeNamespace[0x55bbe42d04a0]_p38, e0.0
  val?            %0.3  = NamedCall          !     %0.1(hash=true, parent=%0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 38:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     baseenv, e0.0
  val?            %0.2  = Call               !     %0.1() e0.0   <val?_>
  void                    Return             l     %0.2
Prom 44:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    ns, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 48:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    ns, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 49:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    ns, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 50:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    ns, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 51:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    ns, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 52:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    ns, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <env->
  void                    Return             l     %0.3

│ makeNamespace[0x55bbe42d04a0]                                                │
└──────────────────────────────────────────────────────────────────────────────┘
