
┌──────────────────────────────────────────────────────────────────────────────┐
│ .registerS3method[0x55bbe4410db0]                                            │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;NonRefl4,!Obj4                       │
│ Properties:                                                                  │
├────── Final PIR Version
.registerS3method[0x55bbe4410db0]
BB0
  val?^           %0.0  = LdArg                    4
  val?^           %0.1  = LdArg                    3
  val?^           %0.2  = LdArg                    2
  val?^           %0.3  = LdArg                    1
  val?^           %0.4  = LdArg                    0
  val?^ | miss    %0.5  = LdVar              eR    is.na, ?
  lgl$#-          %0.6  = Identical                <blt is.na>, %0.5   <true>
  void                    Branch                   %0.6 -> BB51 (if true) | BB52 (if false)
BB51   <- [0]
  val?^ | miss    %51.0 = LdVar              eR    .knownS3Generics, ?
  env             e51.1 = MkEnv              l     genname=%0.4, class=%0.3, method=%0.2, nm=%0.1, envir=%0.0, parent=?, context 1
  val?            %51.2 = Force!<wrapped>    !v    %51.0, e51.1   <str+>
  lgl$#-          %51.3 = IsType                   %51.2 isA val+   <true>
  void                    Branch                   %51.3 -> BB53 (if true) | BB54 (if false)
BB52   <- [0]
  env             e52.0 = (MkEnv)            l     genname=%0.4, class=%0.3, method=%0.2, nm=%0.1, envir=%0.0, parent=?, context 1
  fs              %52.1 = FrameState         R     0x55bbe4c97ba0+0: [], env=e52.0
  void                    Deopt              !v    %52.1, DeadBranchReached@0x55bbe3fc10f0[Test#0], %0.6
BB53   <- [51]
  val?^ | miss    %53.0 = LdVar              eR    genname, e51.1
  val?            %53.1 = Force!<lazy>       !v    %53.0, e51.1   <str$+>
  lgl$#-          %53.2 = IsType                   %53.1 isA val?+
  lgl$#-          %53.3 = IsType                   %51.2 isA val?+
  void                    Branch                   %53.3 -> BB55 (if true) | BB56 (if false)
BB54   <- [51]
  fs              %54.0 = FrameState         R     0x55bbe4c97ba0+69: [<blt is.na>, %51.2], env=e51.1
  void                    Deopt              !v    %54.0, DeadBranchReached@0x55bbe3fc10f0[Test#2], %51.3   !
BB55   <- [53]
  val?+           %55.0 = CastType           d     dn %51.2   <str+>
  void                    Branch                   %53.2 -> BB57 (if true) | BB58 (if false)
BB56   <- [53]
  void                    Nop                !     
  val?            %56.1 = %51.2
  dr              %56.2 = Typecheck@0x55bbe3fc10f0[Type#4]
  goto BB5
BB57   <- [55]
  val?+           %57.0 = CastType           d     dn %53.1   <str$+>
  val?            %57.1 = Extract1_1D        wed   %55.0, %57.0, elided   <str$+>
  void                    StVar              lW    w, %57.1, e51.1
  lgl$#-          %57.3 = IsType                   %57.1 isA val?+
  void                    Branch                   %57.3 -> BB59 (if true) | BB60 (if false)
BB58   <- [55]
  void                    Nop                !     
  val?            %58.1 = %53.1
  dr              %58.2 = Typecheck@0x55bbe3fc10f0[Type#6]
  goto BB5
BB5   <- [56, 58]
  val?^ | miss    %5.0  = Phi                      %56.1:BB56, %58.1:BB58
  val?^ | miss    %5.1  = %5.0
  dr              %5.2  = Phi                      %56.2:BB56, %58.2:BB58
  dr              %5.3  = %5.2
  fs              %5.4  = FrameState         R     0x55bbe4c97ba0+114: [<blt is.na>, %51.2, %53.1], env=e51.1
  void                    Deopt              !v    %5.4, %5.3, %5.1   !
BB59   <- [57]
  val?+           %59.0 = CastType           d     dn %57.1   <str$+>
  lgl+            %59.1 = CallSafeBuiltin    wed   is.na(%59.0)    <lgl$+>
  lgl             %59.2 = Not                wed   %59.1, elided
  lgl$#-          %59.3 = CheckTrueFalse     we    %59.2
  void                    Branch                   %59.3 -> BB49 (if true) | BB11 (if false)
BB60   <- [57]
  fs              %60.0 = FrameState         R     0x55bbe4c97ba0+137: [<blt is.na>, %57.1], env=e51.1
  void                    Deopt              !v    %60.0, Typecheck@0x55bbe3fc10f0[Type#7], %57.1   !
BB49   <- [59]
  val?^ | miss    %49.0 = LdVar              eR    asNamespace, e51.1
  lgl$#-          %49.1 = Identical                %49.0, function(ns, base.OK=TRUE) <(rir::DispatchTabl|...
  void                    Branch                   %49.1 -> BB61 (if true) | BB62 (if false)
BB11   <- [59]
  val?^ | miss    %11.0 = LdVar              eR    get0, e51.1
  lgl$#-          %11.1 = Identical                %11.0, function(x, envir=pos.to.env(-(1L)), mode="any|...
  void                    Branch                   %11.1 -> BB63 (if true) | BB64 (if false)
BB61   <- [49]
  prom-           %61.0 = MkArg                    unboundValue, .registerS3method[0x55bbe4410db0]_p12 (!refl), e51.1
  val?            %61.1 = StaticCall         !v    asNamespace[0x55bbe421ca50](%61.0) e51.1   <env->
  val?            %61.2 = %61.1
  goto BB28
BB62   <- [49]
  void                    Nop                !     
  val?^ | miss    %62.1 = %49.0
  dr              %62.2 = CallTarget@0x55bbe3fc10f0[Call#11]
  goto BB9
BB63   <- [11]
  prom-           %63.0 = MkArg                    unboundValue, .registerS3method[0x55bbe4410db0]_p0, e51.1
  prom-           %63.1 = MkArg                    unboundValue, .registerS3method[0x55bbe4410db0]_p1, e51.1
  val?            %63.2 = StaticCall         !v    get0[0x55bbe4410cf0](%63.0, %63.1) { 0 1n } e51.1   <val?->
  lgl$-           %63.3 = Is                       %63.2, NULL
  void                    StVar              lW    genfun, %63.2, e51.1
  lgl$#-          %63.5 = CheckTrueFalse     e     %63.3
  void                    Branch                   %63.5 -> BB48 (if true) | BB14 (if false)
BB64   <- [11]
  void                    Nop                !     
  val?^ | miss    %64.1 = %11.0
  dr              %64.2 = CallTarget@0x55bbe3fc10f0[Call#1]
  goto BB9
BB28   <- [27, 61]
  val?            %28.0 = Phi                      %27.2:BB27, %61.2:BB61   <env->
  val?            %28.1 = %28.0
  void                    StVar              lW    defenv, %28.1, e51.1
  lgl$#-          %28.3 = IsType                   %28.1 isA val+   <true>
  lgl$#-          %28.4 = IsType                   %28.1 isA val?-
  val             %28.5 = ChkMissing         e     %28.1
  void                    Branch                   %28.3 -> BB65 (if true) | BB66 (if false)
BB9   <- [62, 64]
  val?^ | miss    %9.0  = Phi                      %62.1:BB62, %64.1:BB64
  val?^ | miss    %9.1  = %9.0
  dr              %9.2  = Phi                      %62.2:BB62, %64.2:BB64
  dr              %9.3  = %9.2
  fs              %9.4  = FrameState         R     0x55bbe4c97ba0+161: [%59.3], env=e51.1
  void                    Deopt              !v    %9.4, %9.3, %9.1   !
BB48   <- [63]
  (cls|spec|blt)  %48.0 = LdFun              !v    stop, e51.1
  fs              %48.1 = FrameState         R     0x55bbe4c97ba0+248: [%48.0], env=e51.1
  void                    Deopt              !v    %48.1, DeadCall@0x55bbe3fc10f0[Call#3], %48.0   !
BB14   <- [63]
  val?^ | miss    %14.0 = LdVar              eR    .isMethodsDispatchOn, e51.1
  lgl$#-          %14.1 = Identical                <blt .isMethodsDispatchOn>, %14.0   <true>
  void                    Branch                   %14.1 -> BB67 (if true) | BB68 (if false)
BB65   <- [28]
  void                    Branch                   %28.4 -> BB69 (if true) | BB70 (if false)
BB66   <- [28]
  void                    Nop                !     
  lgl$#-          %66.1 = %28.3
  dr              %66.2 = DeadBranchReached@0x55bbe3fc10f0[Test#4]
  goto BB29
BB67   <- [14]
  val?            %67.0 = CallBuiltin        !v    .isMethodsDispatchOn() e51.1   <lgl$->
  lgl$#-          %67.1 = IsType                   %67.0 isA lgl$-
  void                    Branch                   %67.1 -> BB71 (if true) | BB72 (if false)
BB68   <- [14]
  fs              %68.0 = FrameState         R     0x55bbe4c97ba0+227: [%63.2], env=e51.1
  void                    Deopt              !v    %68.0, DeadBranchReached@0x55bbe3fc10f0[Test#3], %14.1   !
BB69   <- [65]
  val?-           %69.0 = CastType           d     dn %28.1   <env->
  val?            %69.1 = Extract2_1D        wed   %69.0, ".__S3MethodsTable__.", elided   <env->
  lgl$-           %69.2 = Is                       %69.1, NULL
  void                    StVar              lW    table, %69.1, e51.1
  lgl$#-          %69.4 = CheckTrueFalse     e     %69.2
  void                    Branch                   %69.4 -> BB44 (if true) | BB33 (if false)
BB70   <- [65]
  void                    Nop                !     
  val?            %70.1 = %28.1
  dr              %70.2 = Typecheck@0x55bbe3fc10f0[Type#33]
  goto BB29
BB29   <- [66, 70]
  val?            %29.0 = Phi                      %66.1:BB66, %70.1:BB70
  val?            %29.1 = %29.0
  dr              %29.2 = Phi                      %66.2:BB66, %70.2:BB70
  dr              %29.3 = %29.2
  fs              %29.4 = FrameState         R     0x55bbe4c97ba0+688: [], env=e51.1
  void                    Deopt              !v    %29.4, %29.3, %29.1   !
BB71   <- [67]
  lgl$-           %71.0 = CastType           d     dn %67.0
  lgl$-           %71.1 = AsLogical                %71.0
  lgl$#-          %71.2 = Identical                %71.1, false
  void                    Branch                   %71.2 -> BB47 (if true) | BB17 (if false)
BB72   <- [67]
  fs              %72.0 = FrameState         R     0x55bbe4c97ba0+370: [%67.0], env=e51.1
  void                    Deopt              !v    %72.0, Typecheck@0x55bbe3fc10f0[Type#16], %67.0   !
BB44   <- [69]
  (cls|spec|blt)  %44.0 = LdFun              !v    new.env, e51.1
  fs              %44.1 = FrameState         R     0x55bbe4c97ba0+778: [%44.0], env=e51.1
  void                    Deopt              !v    %44.1, DeadCall@0x55bbe3fc10f0[Call#12], %44.0   !
BB33   <- [69]
  val             %33.0 = ChkMissing         e     %69.1
  lgl$#-          %33.1 = IsType                   %69.1 isA val+   <true>
  void                    Branch                   %33.1 -> BB79 (if true) | BB80 (if false)
BB47   <- [71]
  void                    Nop                !     
  lgl$-           %47.1 = %71.1
  goto BB20
BB17   <- [71]
  (cls|spec|blt)  %17.0 = LdFun              !v    ::, <0x55bbe1e20e48>, e51.1
  prom-           %17.1 = MkArg                    unboundValue, .registerS3method[0x55bbe4410db0]_p3, e51.1
  prom-           %17.2 = MkArg                    unboundValue, .registerS3method[0x55bbe4410db0]_p4, e51.1
  val?            %17.3 = Call               !v    %17.0(%17.1, %17.2) e51.1   <cls->
  (cls|spec|blt)  %17.4 = ChkFunction        e     %17.3
  prom-           %17.5 = MkArg                    unboundValue, .registerS3method[0x55bbe4410db0]_p5, e51.1
  val?            %17.6 = Call               !v    %17.4(%17.5, "genericFunction") e51.1   <lgl$->
  lgl$#-          %17.7 = IsType                   %17.6 isA lgl$-
  void                    Branch                   %17.7 -> BB73 (if true) | BB74 (if false)
BB79   <- [33]
  val?^ | miss    %79.0 = LdVar              eR    nm, e51.1
  val?            %79.1 = Force!<lazy>       !v    %79.0, e51.1   <str$+>
  lgl$#-          %79.2 = IsType                   %79.1 isA val?+
  lgl$#-          %79.3 = IsType                   %69.1 isA val?-
  void                    Branch                   %79.3 -> BB81 (if true) | BB82 (if false)
BB80   <- [33]
  fs              %80.0 = FrameState         R     0x55bbe4c97ba0+757: [%69.1], env=e51.1
  void                    Deopt              !v    %80.0, DeadBranchReached@0x55bbe3fc10f0[Test#5], %33.1   !
BB20   <- [47, 73]
  lgl$-           %20.0 = Phi                      %73.3:BB73, %47.1:BB47
  lgl$-           %20.1 = %20.0
  lgl$#-          %20.2 = CheckTrueFalse     e     %20.1
  void                    Branch                   %20.2 -> BB46 (if true) | BB23 (if false)
BB73   <- [17]
  lgl$-           %73.0 = CastType           d     dn %17.6
  lgl$-           %73.1 = AsLogical                %73.0
  lgl$-           %73.2 = LAnd                     %71.1, %73.1
  lgl$-           %73.3 = %73.2
  goto BB20
BB74   <- [17]
  fs              %74.0 = FrameState         R     0x55bbe4c97ba0+457: [%71.1, %17.6], env=e51.1
  void                    Deopt              !v    %74.0, Typecheck@0x55bbe3fc10f0[Type#21], %17.6   !
BB81   <- [79]
  val?-           %81.0 = CastType           d     dn %69.1   <env->
  void                    Branch                   %79.2 -> BB83 (if true) | BB84 (if false)
BB82   <- [79]
  void                    Nop                !     
  val?            %82.1 = %69.1
  dr              %82.2 = Typecheck@0x55bbe3fc10f0[Type#34]
  goto BB34
BB46   <- [20]
  (cls|spec|blt)  %46.0 = LdFun              !v    @, e51.1
  fs              %46.1 = FrameState         R     0x55bbe4c97ba0+480: [%46.0], env=e51.1
  void                    Deopt              !v    %46.1, DeadCall@0x55bbe3fc10f0[Call#8], %46.0   !
BB23   <- [20]
  val?^ | miss    %23.0 = LdVar              eR    typeof, e51.1
  lgl$#-          %23.1 = Identical                %23.0, function(x) <(rir::DispatchTable*)0x55bbe3eeba|...
  void                    Branch                   %23.1 -> BB75 (if true) | BB76 (if false)
BB83   <- [81]
  val?+           %83.0 = CastType           d     dn %79.1   <str$+>
  val?            %83.1 = Extract2_1D        wed   %81.0, %83.0, elided   <nil->
  lgl$-           %83.2 = Is                       %83.1, NULL
  void                    StVar              lW    e, %83.1, e51.1
  lgl$-           %83.4 = Not                d     %83.2, elided
  lgl$-           %83.5 = AsLogical                %83.4
  lgl$#-          %83.6 = Identical                %83.5, false
  void                    Branch                   %83.6 -> BB39 (if true) | BB38 (if false)
BB84   <- [81]
  void                    Nop                !     
  val?            %84.1 = %79.1
  dr              %84.2 = Typecheck@0x55bbe3fc10f0[Type#41]
  goto BB34
BB34   <- [82, 84]
  val?^ | miss    %34.0 = Phi                      %82.1:BB82, %84.1:BB84
  val?^ | miss    %34.1 = %34.0
  dr              %34.2 = Phi                      %82.2:BB82, %84.2:BB84
  dr              %34.3 = %34.2
  fs              %34.4 = FrameState         R     0x55bbe4c97ba0+930: [%69.1, %79.1], env=e51.1
  void                    Deopt              !v    %34.4, %34.3, %34.1   !
BB75   <- [23]
  val?^ | miss    %75.0 = LdVar              eR    genfun, e51.1
  lgl$#-          %75.1 = IsType                   %75.0 isA val?~- | miss
  void                    Branch                   %75.1 -> BB77 (if true) | BB78 (if false)
BB76   <- [23]
  void                    Nop                !     
  val?^ | miss    %76.1 = %23.0
  dr              %76.2 = CallTarget@0x55bbe3fc10f0[Call#9]
  goto BB21
BB39   <- [83]
  lgl$#-          %39.0 = CheckTrueFalse     e     %83.5
  void                    Branch                   %39.0 -> BB43 (if true) | BB40 (if false)
BB38   <- [83]
  (cls|spec|blt)  %38.0 = LdFun              !v    identical, e51.1
  fs              %38.1 = FrameState         R     0x55bbe4c97ba0+971: [%83.5, %38.0], env=e51.1
  void                    Deopt              !v    %38.1, DeadCall@0x55bbe3fc10f0[Call#14], %38.0   !
BB77   <- [75]
  val?~- | miss   %77.0 = CastType           d     dn %75.0
  val?-           %77.1 = Force!<value>            %77.0,    <val?->
  str$-           %77.2 = CallSafeBuiltin    wed   typeof(%77.1)    <str$->
  lgl$-           %77.3 = Eq                 d     %77.2, "closure", elided   <lgl$->
  lgl$#-          %77.4 = CheckTrueFalse     e     %77.3
  void                    Branch                   %77.4 -> BB45 (if true) | BB26 (if false)
BB78   <- [75]
  void                    Nop                !     
  val?^ | miss    %78.1 = %75.0
  dr              %78.2 = Typecheck@0x55bbe3fc10f0[Type#25]
  goto BB21
BB21   <- [76, 78]
  val?^ | miss    %21.0 = Phi                      %76.1:BB76, %78.1:BB78
  val?^ | miss    %21.1 = %21.0
  dr              %21.2 = Phi                      %76.2:BB76, %78.2:BB78
  dr              %21.3 = %21.2
  fs              %21.4 = FrameState         R     0x55bbe4c97ba0+464: [%20.1], env=e51.1
  void                    Deopt              !v    %21.4, %21.3, %21.1   !
BB43   <- [39]
  (cls|spec|blt)  %43.0 = LdFun              !v    environmentName, e51.1
  fs              %43.1 = FrameState         R     0x55bbe4c97ba0+1027: [%43.0], env=e51.1
  void                    Deopt              !v    %43.1, DeadCall@0x55bbe3fc10f0[Call#16], %43.0   !
BB40   <- [39]
  val?^ | miss    %40.0 = LdVar              eR    assignWrapped, e51.1
  (cls|spec|blt)  %40.1 = CastType                 dn %40.0
  val+            %40.2 = CallSafeBuiltin          bodyCode(%40.1) 
  lgl$#-          %40.3 = Identical                %40.2, <(rir::DispatchTable*)0x55bbe4237a70>
  void                    Branch                   %40.3 -> BB89 (if true) | BB90 (if false)
BB45   <- [77]
  val?^ | miss    %45.0 = LdVar              eR    environment, e51.1
  lgl$#-          %45.1 = Identical                %45.0, function(fun=NULL) <(rir::DispatchTable*)0x55b|...
  void                    Branch                   %45.1 -> BB85 (if true) | BB86 (if false)
BB26   <- [77]
  val?^ | miss    %26.0 = LdVar              eR    .BaseNamespaceEnv, e51.1
  lgl$#-          %26.1 = IsType                   %26.0 isA val?~- | miss
  void                    Branch                   %26.1 -> BB87 (if true) | BB88 (if false)
BB89   <- [40]
  val?            %89.0 = Force!             d     %40.0, 
  prom-           %89.1 = MkArg                    unboundValue, .registerS3method[0x55bbe4410db0]_p7, e51.1
  prom-           %89.2 = MkArg                    unboundValue, .registerS3method[0x55bbe4410db0]_p8, e51.1
  prom-           %89.3 = MkArg                    unboundValue, .registerS3method[0x55bbe4410db0]_p9, e51.1
  prom-           %89.4 = MkArg                    unboundValue, .registerS3method[0x55bbe4410db0]_p10, e51.1
  (cls|spec|blt)  %89.5 = ChkFunction        e     %89.0
  env             e89.6 = CallSafeBuiltin          environment(%89.5) 
  ct              %89.7 = PushContext        lCL   %89.1, %89.2, %89.3, %89.4, assignWrapped(nm, method, home=envir, envir=table), %89.5, e51.1
  val?^           %89.8 = CastType                 up %89.4
  val?^           %89.9 = CastType                 up %89.3
  val?^           %89.10 = CastType                 up %89.2
  val?^           %89.11 = CastType                 up %89.1
  env             e89.12 = MkEnv              l     x=%89.11, method=%89.10, home=%89.9, envir=%89.8, parent=e89.6, context 1
  val?            %89.13 = Force!<lazy>       !vL   %89.10, e89.12   <str$+>
  void                    StVar              lW    method, %89.13, e89.12
  void                    Visible            v     
  val?            %89.16 = Force!<lazy>       !L    %89.9, e89.12   <env->
  void                    StVar              lW    home, %89.16, e89.12
  val?^ | miss    %89.18 = LdVar              eR    delayedAssign, e89.6
  lgl$#-          %89.19 = Identical                %89.18, function(x, value, eval.env=parent.frame(1), a|...
  void                    Branch                   %89.19 -> BB91 (if true) | BB92 (if false)
BB90   <- [40]
  fs              %90.0 = FrameState         R     0x55bbe4c97ba0+953: [%83.1], env=e51.1
  void                    Deopt              !v    %90.0, CallTarget@0x55bbe3fc10f0[Call#21], %40.2   !
BB85   <- [45]
  prom-           %85.0 = MkArg                    unboundValue, .registerS3method[0x55bbe4410db0]_p11, e51.1
  val?^ | miss    %85.1 = CastType                 up %85.0
  val?            %85.2 = Force              !v    %85.1, 
  prom-           %85.3 = MkArg                    %85.2, .registerS3method[0x55bbe4410db0]_p11 (!refl), 
  val?            %85.4 = StaticCall         !v    environment[0x55bbe3fbd3e0](%85.3) e51.1   <env->
  val?            %85.5 = %85.4
  goto BB27
BB86   <- [45]
  void                    Nop                !     
  val?^ | miss    %86.1 = %45.0
  dr              %86.2 = CallTarget@0x55bbe3fc10f0[Call#10]
  goto BB24
BB87   <- [26]
  val?~- | miss   %87.0 = CastType           d     dn %26.0
  val?-           %87.1 = Force!<value>            %87.0,    <env->
  val?-           %87.2 = %87.1
  goto BB27
BB88   <- [26]
  void                    Nop                !     
  val?^ | miss    %88.1 = %26.0
  dr              %88.2 = Typecheck@0x55bbe3fc10f0[Type#28]
  goto BB24
BB91   <- [89]
  prom-           %91.0 = MkArg                    unboundValue, .registerS3method[0x55bbe4410db0]_p13, e89.12
  prom-           %91.1 = MkArg                    unboundValue, .registerS3method[0x55bbe4410db0]_p14, e89.12
  prom-           %91.2 = MkArg                    unboundValue, .registerS3method[0x55bbe4410db0]_p17, e89.12
  val?            %91.3 = StaticCall         !     delayedAssign[0x55bbe489c920](%91.0, %91.1, missingArg, %91.2) { 0 1 3n } e89.12   <nil->
  val?            %91.4 = PopContext         C     %91.3, %89.7   <nil->
  void                    Return             l     %91.4
BB92   <- [89]
  fs              %92.0 = FrameState         R     0x55bbe4c97ba0+1178: [], env=e51.1
  fs              %92.1 = FrameState         R     0x55bbe48a2b80+46: [], env=e89.12, next=%92.0
  void                    Deopt              !v    %92.1, CallTarget@0x55bbe4c98860[Call#0], %89.18   !
BB27   <- [85, 87]
  val?            %27.0 = Phi                      %87.2:BB87, %85.5:BB85
  val?            %27.1 = %27.0
  val?            %27.2 = %27.1
  goto BB28
BB24   <- [86, 88]
  val?^ | miss    %24.0 = Phi                      %86.1:BB86, %88.1:BB88
  val?^ | miss    %24.1 = %24.0
  dr              %24.2 = Phi                      %86.2:BB86, %88.2:BB88
  dr              %24.3 = %24.2
  fs              %24.4 = FrameState         R     0x55bbe4c97ba0+558: [], env=e51.1
  prom-           %24.5 = MkArg                    %77.1, .registerS3method[0x55bbe4410db0]_p6 (!refl), e51.1
  val?~           %24.6 = CastType                 up %24.5
  env             e24.7 = (MkEnv)            l     x=%24.6, parent=R_BaseNamespace, context 0
  fs              %24.8 = FrameState         R     0x55bbe3eeb800+27: [%77.2], env=e24.7, next=%24.4
  void                    Deopt              !v    %24.8, %24.3, %24.1   !
Prom 0:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    genname, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$+>
  void                    Return             l     %0.3
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     parent.env, <0x55bbe2d95fa0>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .registerS3method[0x55bbe4410db0]_p2, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <env+>
  void                    Return             l     %0.3
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    envir, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 3:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    methods, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 4:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    is, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 5:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    genfun, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <val?->
  void                    Return             l     %0.3
Prom 6:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    genfun, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <val?->
  void                    Return             l     %0.3
Prom 7:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    nm, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$+>
  void                    Return             l     %0.3
Prom 8:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    method, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str$+>
  void                    Return             l     %0.3
Prom 9:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    envir, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 10:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    table, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 11:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    genfun, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls->
  void                    Return             l     %0.3
Prom 12:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    w, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$+>
  void                    Return             l     %0.3
Prom 13:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    x, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str$+>
  void                    Return             l     %0.3
Prom 14:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     get, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .registerS3method[0x55bbe4410db0]_p15, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .registerS3method[0x55bbe4410db0]_p16, e0.0
  val?            %0.4  = NamedCall          !     %0.1(%0.2, envir=%0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 15:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    method, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 16:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    home, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 17:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    envir, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <env->
  void                    Return             l     %0.3

│ .registerS3method[0x55bbe4410db0]                                            │
└──────────────────────────────────────────────────────────────────────────────┘
