
┌──────────────────────────────────────────────────────────────────────────────┐
│ assignNativeRoutines[0x55bbe43e97e0]                                         │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;NonRefl1,NonRefl2,!Obj1,!Obj2        │
│ Properties:                                                                  │
├────── Final PIR Version
assignNativeRoutines[0x55bbe43e97e0]
BB0
  val?^           %0.0  = LdArg                    3
  val?^           %0.1  = LdArg                    2
  val?^           %0.2  = LdArg                    1
  val?^           %0.3  = LdArg                    0
  val?^ | miss    %0.4  = LdVar              eR    length, ?
  lgl$#-          %0.5  = Identical                <blt length>, %0.4   <true>
  void                    Branch                   %0.5 -> BB48 (if true) | BB49 (if false)
BB48   <- [0]
  env             e48.0 = MkEnv              l     dll=%0.3, lib=%0.2, env=%0.1, nativeRoutines=%0.0, parent=?, context 1
  val?            %48.1 = Force!<lazy>       !v    %0.0, e48.0   <vec>
  val?            %48.2 = CallBuiltin        !v    length(%48.1) e48.0   <int$->
  lgl$#-          %48.3 = IsType                   %48.2 isA int$-
  void                    Branch                   %48.3 -> BB50 (if true) | BB51 (if false)
BB49   <- [0]
  env             e49.0 = (MkEnv)            l     dll=%0.3, lib=%0.2, env=%0.1, nativeRoutines=%0.0, parent=?, context 1
  fs              %49.1 = FrameState         R     0x55bbe422f8f0+0: [], env=e49.0
  void                    Deopt              !v    %49.1, DeadBranchReached@0x55bbe47a9940[Test#0], %0.5
BB50   <- [48]
  int$-           %50.0 = CastType           d     dn %48.2
  lgl$-           %50.1 = Eq                 d     %50.0, 0L, elided   <lgl$->
  lgl$#-          %50.2 = CheckTrueFalse     e     %50.1
  void                    Branch                   %50.2 -> BB46 (if true) | BB5 (if false)
BB51   <- [48]
  void                    Nop                !     
  val?            %51.1 = %48.2
  dr              %51.2 = Typecheck@0x55bbe47a9940[Type#2]
  goto BB3
BB46   <- [50]
  (cls|spec|blt)  %46.0 = LdFun              !v    character, e48.0
  fs              %46.1 = FrameState         R     0x55bbe422f8f0+124: [%46.0], env=e48.0
  void                    Deopt              !v    %46.1, DeadCall@0x55bbe47a9940[Call#1], %46.0   !
BB5   <- [50]
  val?^ | miss    %5.0  = LdVar              eR    character, e48.0
  lgl$#-          %5.1  = Identical                %5.0, function(length=0L) <(rir::DispatchTable*)0x55|...
  void                    Branch                   %5.1 -> BB52 (if true) | BB53 (if false)
BB3   <- [51, 53]
  val?^ | miss    %3.0  = Phi                      %51.1:BB51, %53.1:BB53
  val?^ | miss    %3.1  = %3.0
  dr              %3.2  = Phi                      %51.2:BB51, %53.2:BB53
  dr              %3.3  = %3.2
  fs              %3.4  = FrameState         R     0x55bbe422f8f0+91: [%48.2], env=e48.0
  void                    Deopt              !v    %3.4, %3.3, %3.1   !
BB52   <- [5]
  str-            %52.0 = CallSafeBuiltin    wed   vector("character", 0L)    <str->
  void                    StVar              lW    varnames, %52.0, e48.0
  str-            %52.2 = CallSafeBuiltin    wed   vector("character", 0L)    <str->
  void                    StVar              lW    symnames, %52.2, e48.0
  (cls|spec|blt)  %52.4 = LdFun              !v    $, <0x55bbe1e1fc10>, e48.0
  prom-           %52.5 = MkArg                    unboundValue, assignNativeRoutines[0x55bbe43e97e0]_p0, e48.0
  prom-           %52.6 = MkArg                    unboundValue, assignNativeRoutines[0x55bbe43e97e0]_p1, e48.0
  val?            %52.7 = Call               !v    %52.4(%52.5, %52.6) e48.0   <lgl$->
  lgl$#-          %52.8 = IsType                   %52.7 isA lgl$-
  void                    Branch                   %52.8 -> BB54 (if true) | BB55 (if false)
BB53   <- [5]
  void                    Nop                !     
  val?^ | miss    %53.1 = %5.0
  dr              %53.2 = CallTarget@0x55bbe47a9940[Call#2]
  goto BB3
BB54   <- [52]
  lgl$-           %54.0 = CastType           d     dn %52.7
  lgl$#-          %54.1 = CheckTrueFalse     e     %54.0
  void                    Branch                   %54.1 -> BB18 (if true) | BB8 (if false)
BB55   <- [52]
  fs              %55.0 = FrameState         R     0x55bbe422f8f0+271: [%52.7], env=e48.0
  void                    Deopt              !v    %55.0, Typecheck@0x55bbe47a9940[Type#9], %52.7   !
BB18   <- [54]
  (cls|spec|blt)  %18.0 = LdFun              !v    $, <0x55bbe1e1fc10>, e48.0
  prom-           %18.1 = MkArg                    unboundValue, assignNativeRoutines[0x55bbe43e97e0]_p5, e48.0
  prom-           %18.2 = MkArg                    unboundValue, assignNativeRoutines[0x55bbe43e97e0]_p6, e48.0
  val?            %18.3 = Call               !v    %18.0(%18.1, %18.2) e48.0   <str->
  void                    StVar              lW    fixes, %18.3, e48.0
  val?^ | miss    %18.5 = LdVar              eR    getDLLRegisteredRoutines.DLLInfo, e48.0
  lgl$#-          %18.6 = Identical                %18.5, function(dll, addNames=TRUE) <(rir::DispatchTa|...
  void                    Branch                   %18.6 -> BB56 (if true) | BB57 (if false)
BB8   <- [54]
  void                    Nop                !     
  goto BB9
BB56   <- [18]
  prom-           %56.0 = MkArg                    unboundValue, assignNativeRoutines[0x55bbe43e97e0]_p7, e48.0
  ct              %56.1 = PushContext        lCL   %56.0, false, getDLLRegisteredRoutines.DLLInfo(dll, addNames|..., function(dll, addNames=TRUE) <(rir::DispatchTa|..., e48.0
  val?^           %56.2 = CastType                 up %56.0
  env             e56.3 = MkEnv              l     dll=%56.2, addNames=false, parent=R_BaseNamespace, context 1
  prom-           %56.4 = MkArg                    unboundValue, assignNativeRoutines[0x55bbe43e97e0]_p12, e56.3
  ct              %56.5 = PushContext        lCL   %56.4, "DLLInfo", inherits(dll, "DLLInfo"), function(x, what, which=FALSE) <(rir::Dispatch|..., e56.3
  val?^           %56.6 = CastType                 up %56.4
  env             e56.7 = MkEnv              l     x=%56.6, what="DLLInfo", which(miss)=false, parent=R_BaseNamespace, context 1
  val?            %56.8 = Force!<lazy>       !vL   %56.6, e56.7   <val?>
  val?            %56.9 = CallBuiltin        !v    inherits(%56.8, "DLLInfo", false) e56.7
  val?            %56.10 = PopContext         C     %56.9, %56.5   <lgl$->
  lgl$#-          %56.11 = IsType                   %56.10 isA lgl$-
  void                    Branch                   %56.11 -> BB62 (if true) | BB63 (if false)
BB57   <- [18]
  fs              %57.0 = FrameState         R     0x55bbe422f8f0+338: [], env=e48.0
  void                    Deopt              !v    %57.0, CallTarget@0x55bbe47a9940[Call#6], %18.5   !
BB9   <- [8, 41]
  (cls|spec|blt)  %9.0  = LdFun              !v    $, <0x55bbe1e1fc10>, e48.0
  prom-           %9.1  = MkArg                    unboundValue, assignNativeRoutines[0x55bbe43e97e0]_p2, e48.0
  prom-           %9.2  = MkArg                    unboundValue, assignNativeRoutines[0x55bbe43e97e0]_p3, e48.0
  val?            %9.3  = Call               !v    %9.0(%9.1, %9.2) e48.0   <str->
  void                    StVar              lW    symNames, %9.3, e48.0
  lgl$#-          %9.5  = IsType                   %9.3 isA val?-
  val?^ | miss    %9.6  = LdVar              eR    length, e48.0
  lgl$#-          %9.7  = Identical                <blt length>, %9.6   <true>
  void                    Branch                   %9.7 -> BB58 (if true) | BB59 (if false)
BB62   <- [56]
  lgl$-           %62.0 = CastType           d     dn %56.10
  lgl$-           %62.1 = Not                d     %62.0, elided
  lgl$#-          %62.2 = CheckTrueFalse     e     %62.1
  void                    Branch                   %62.2 -> BB45 (if true) | BB23 (if false)
BB63   <- [56]
  fs              %63.0 = FrameState         R     0x55bbe422f8f0+383: [], env=e48.0
  fs              %63.1 = FrameState         R     0x55bbe4233610+37: [%56.10], env=e56.3, next=%63.0
  void                    Deopt              !v    %63.1, Typecheck@0x55bbe3023ec8[Type#1], %56.10   !
BB58   <- [9]
  val             %58.0 = ChkMissing         e     %9.3
  void                    Branch                   %9.5 -> BB60 (if true) | BB61 (if false)
BB59   <- [9]
  void                    Nop                !     
  lgl$#-          %59.1 = %9.7
  dr              %59.2 = DeadBranchReached@0x55bbe47a9940[Test#1]
  goto BB10
BB45   <- [62]
  fs              %45.0 = FrameState         R     0x55bbe422f8f0+383: [], env=e48.0
  (cls|spec|blt)  %45.1 = LdFun              !v    stop, e56.3
  fs              %45.2 = FrameState         R     0x55bbe4233610+59: [%45.1], env=e56.3, next=%45.0
  void                    Deopt              !v    %45.2, DeadCall@0x55bbe3023ec8[Call#1], %45.1   !
BB23   <- [62]
  val?^ | miss    %23.0 = LdVar              eR    dll, e56.3
  val?            %23.1 = Force!<wrapped>    !v    %23.0, e56.3   <vec>
  lgl$#-          %23.2 = IsType                   %23.1 isA val+   <false>
  void                    Branch                   %23.2 -> BB65 (if true) | BB64 (if false)
BB60   <- [58]
  val?-           %60.0 = CastType           d     dn %9.3   <str->
  (int|real)$-    %60.1 = CallSafeBuiltin    wed   length(%60.0)    <int$->
  lgl$#-          %60.2 = IsType                   %60.1 isA int$-
  void                    Branch                   %60.2 -> BB66 (if true) | BB67 (if false)
BB61   <- [58]
  void                    Nop                !     
  val?            %61.1 = %9.3
  dr              %61.2 = Typecheck@0x55bbe47a9940[Type#18]
  goto BB10
BB10   <- [59, 61]
  val?^ | miss    %10.0 = Phi                      %59.1:BB59, %61.1:BB61
  val?^ | miss    %10.1 = %10.0
  dr              %10.2 = Phi                      %59.2:BB59, %61.2:BB61
  dr              %10.3 = %10.2
  fs              %10.4 = FrameState         R     0x55bbe422f8f0+486: [], env=e48.0
  void                    Deopt              !v    %10.4, %10.3, %10.1   !
BB65   <- [23]
  fs              %65.0 = FrameState         R     0x55bbe422f8f0+383: [], env=e48.0
  fs              %65.1 = FrameState         R     0x55bbe4233610+109: [%23.1], env=e56.3, next=%65.0
  void                    Deopt              !v    %65.1, DeadBranchReached@0x55bbe3023ec8[Test#0], %23.2   !
BB64   <- [23]
  val?            %64.0 = Extract2_1D        !v    %23.1, "info", e56.3   <other>
  void                    StVar              lW    info, %64.0, e56.3
  val             %64.2 = ChkMissing         e     %64.0
  val?            %64.3 = CallBuiltin        !v    getRegisteredRoutines(%64.0) e56.3
  void                    StVar              lW    els, %64.3, e56.3
  val?^ | miss    %64.5 = LdVar              eR    addNames, e56.3
  val?            %64.6 = Force!<value>      !v    %64.5, e56.3   <lgl$->
  lgl$#-          %64.7 = CheckTrueFalse     we    %64.6
  void                    Branch                   %64.7 -> BB44 (if true) | BB26 (if false)
BB66   <- [60]
  int$-           %66.0 = CastType           d     dn %60.1
  lgl$#-          %66.1 = CheckTrueFalse     e     %66.0
  void                    Branch                   %66.1 -> BB17 (if true) | BB14 (if false)
BB67   <- [60]
  void                    Nop                !     
  (int|real)$-    %67.1 = %60.1
  dr              %67.2 = Typecheck@0x55bbe47a9940[Type#21]
  goto BB12
BB44   <- [64]
  fs              %44.0 = FrameState         R     0x55bbe422f8f0+383: [], env=e48.0
  (cls|spec|blt)  %44.1 = LdFun              !v    lapply, e56.3
  fs              %44.2 = FrameState         R     0x55bbe4233610+233: [%44.1], env=e56.3, next=%44.0
  void                    Deopt              !v    %44.2, DeadCall@0x55bbe3023ec8[Call#4], %44.1   !
BB26   <- [64]
  (cls|spec|blt)  %26.0 = LdFun              !v    <-, <0x55bbe1e14da8>, e56.3
  prom-           %26.1 = MkArg                    unboundValue, assignNativeRoutines[0x55bbe43e97e0]_p14, e56.3
  val?            %26.2 = Call               !v    %26.0(%26.1, "DLLRegisteredRoutines") e56.3
  val?^ | miss    %26.3 = LdVar              eR    els, e56.3
  val?            %26.4 = Force!<value>      !v    %26.3, e56.3   <vec>
  val?            %26.5 = PopContext         C     %26.4, %56.1   <vec>
  void                    StVar              lW    routines, %26.5, e48.0
  val?^ | miss    %26.7 = LdVar              eR    lapply, e48.0
  lgl$#-          %26.8 = Identical                %26.7, function(X, FUN, ...) <(rir::DispatchTable*)0x|...
  void                    Branch                   %26.8 -> BB72 (if true) | BB73 (if false)
BB17   <- [66]
  (cls|spec|blt)  %17.0 = LdFun              !v    getNativeSymbolInfo, e48.0
  fs              %17.1 = FrameState         R     0x55bbe422f8f0+598: [%17.0], env=e48.0
  void                    Deopt              !v    %17.1, DeadCall@0x55bbe47a9940[Call#10], %17.0   !
BB14   <- [66]
  val?^ | miss    %14.0 = LdVar              eR    varnames, e48.0
  lgl$#-          %14.1 = IsType                   %14.0 isA val?~- | miss
  void                    Branch                   %14.1 -> BB68 (if true) | BB69 (if false)
BB12   <- [67, 69]
  val?^ | miss    %12.0 = Phi                      %67.1:BB67, %69.1:BB69
  val?^ | miss    %12.1 = %12.0
  dr              %12.2 = Phi                      %67.2:BB67, %69.2:BB69
  dr              %12.3 = %12.2
  fs              %12.4 = FrameState         R     0x55bbe422f8f0+577: [%60.1], env=e48.0
  void                    Deopt              !v    %12.4, %12.3, %12.1   !
BB72   <- [26]
  prom-           %72.0 = MkArg                    unboundValue, assignNativeRoutines[0x55bbe43e97e0]_p8 (!refl), e48.0
  cls             %72.1 = MkCls                    assignNativeRoutines@Prom(9)0, e48.0
  prom-           %72.2 = MkArg                    %72.1, assignNativeRoutines[0x55bbe43e97e0]_p9 (!refl), e48.0
  ct              %72.3 = PushContext        lCL   %72.0, %72.2, lapply(routines, function(<lst type=R_MissingA|..., function(X, FUN, ...) <(rir::DispatchTable*)0x|..., e48.0
  cls~            %72.4 = CastType                 up %72.2
  val?^           %72.5 = CastType                 up %72.0
  env             e72.6 = MkEnv              l     X=%72.5, FUN=%72.4, ...(miss)=missingArg, parent=R_BaseNamespace, context 1
  prom-           %72.7 = MkArg                    unboundValue, assignNativeRoutines[0x55bbe43e97e0]_p16 (!refl), e72.6
  val?            %72.8 = StaticCall         !v    match.fun[0x55bbe4789480](%72.7) e72.6   <(cls|blt)->
  void                    StVar              lW    FUN, %72.8, e72.6
  val?^ | miss    %72.10 = LdVar              eR    is.vector, e72.6
  lgl$#-          %72.11 = Identical                %72.10, function(x, mode="any") <(rir::DispatchTable*)|...
  void                    Branch                   %72.11 -> BB74 (if true) | BB75 (if false)
BB73   <- [26]
  fs              %73.0 = FrameState         R     0x55bbe422f8f0+397: [], env=e48.0
  void                    Deopt              !v    %73.0, CallTarget@0x55bbe47a9940[Call#7], %26.7   !
BB68   <- [14]
  val?~- | miss   %68.0 = CastType           d     dn %14.0
  val?-           %68.1 = Force!<value>            %68.0,    <str->
  (cls|spec|blt)  %68.2 = LdFun              !v    names<-, <0x55bbe1e20438>, e48.0
  val?^ | miss    %68.3 = LdVar              eR    symnames, e48.0
  lgl$#-          %68.4 = IsType                   %68.3 isA val?~- | miss
  void                    Branch                   %68.4 -> BB70 (if true) | BB71 (if false)
BB69   <- [14]
  void                    Nop                !     
  val?^ | miss    %69.1 = %14.0
  dr              %69.2 = Typecheck@0x55bbe47a9940[Type#27]
  goto BB12
BB74   <- [72]
  val?^ | miss    %74.0 = LdVar              eR    X, e72.6
  val?            %74.1 = Force!<lazy>       !v    %74.0, e72.6   <(str|vec)>
  lgl$#-          %74.2 = CallSafeBuiltin    wed   is.vector(%74.1, "any")    <lgl$->
  lgl$#-          %74.3 = Not                d     %74.2, elided
  void                    Branch                   %74.2 -> BB43 (if true) | BB33 (if false)
BB75   <- [72]
  fs              %75.0 = FrameState         R     0x55bbe422f8f0+434: [], env=e48.0
  fs              %75.1 = FrameState         R     0x55bbe287dc40+46: [], env=e72.6, next=%75.0
  void                    Deopt              !v    %75.1, CallTarget@0x55bbe3e69630[Call#1], %72.10   !
BB70   <- [68]
  val?~- | miss   %70.0 = CastType           d     dn %68.3
  val?-           %70.1 = Force!<value>            %70.0,    <str->
  val?            %70.2 = NamedCall          !v    %68.2(%70.1, value=%68.1) e48.0   <str+>
  void                    StVar              lW    symnames, %70.2, e48.0
  val             %70.4 = ChkMissing         e     %70.2
  void                    Visible            v     
  void                    Return             l     %70.2
BB71   <- [68]
  fs              %71.0 = FrameState         R     0x55bbe422f8f0+722: [%68.1], env=e48.0
  void                    Deopt              !v    %71.0, Typecheck@0x55bbe47a9940[Type#28], %68.3   !
BB43   <- [74]
  val?^ | miss    %43.0 = LdVar              eR    is.object, e72.6
  lgl$#-          %43.1 = Identical                <blt is.object>, %43.0   <true>
  void                    Branch                   %43.1 -> BB76 (if true) | BB77 (if false)
BB33   <- [74]
  void                    Nop                !     
  lgl$#-          %33.1 = %74.3
  goto BB34
BB76   <- [43]
  val?^ | miss    %76.0 = LdVar              eR    X, e72.6
  val?            %76.1 = Force!<wrapped>    !v    %76.0, e72.6   <(str|vec)->
  lgl$#-          %76.2 = CallSafeBuiltin    wed   is.object(%76.1)    <lgl$->
  lgl$-           %76.3 = LOr                      %74.3, %76.2
  lgl$-           %76.4 = %76.3
  goto BB34
BB77   <- [43]
  fs              %77.0 = FrameState         R     0x55bbe422f8f0+434: [], env=e48.0
  fs              %77.1 = FrameState         R     0x55bbe287dc40+78: [], env=e72.6, next=%77.0
  prom-           %77.2 = MkArg                    %74.1, assignNativeRoutines[0x55bbe43e97e0]_p18 (!refl), e72.6
  val?~           %77.3 = CastType                 up %77.2
  env             e77.4 = (MkEnv)            l     mode(miss)="any", x=%77.3, parent=R_BaseNamespace, context 0
  fs              %77.5 = FrameState         R     0x55bbe3e814f0+41: [%74.2], env=e77.4, next=%77.1
  void                    Deopt              !v    %77.5, DeadBranchReached@0x55bbe3e69630[Test#0], %43.1   !
BB34   <- [33, 76]
  lgl$-           %34.0 = Phi                      %76.4:BB76, %33.1:BB33
  lgl$-           %34.1 = %34.0
  lgl$#-          %34.2 = CheckTrueFalse     e     %34.1
  void                    Branch                   %34.2 -> BB42 (if true) | BB37 (if false)
BB42   <- [34]
  val?^ | miss    %42.0 = LdVar              eR    as.list, e72.6
  lgl$#-          %42.1 = Identical                %42.0, function(x, ...) <(rir::DispatchTable*)0x55bbe|...
  void                    Branch                   %42.1 -> BB78 (if true) | BB79 (if false)
BB37   <- [34]
  void                    Nop                !     
  goto BB38
BB78   <- [42]
  val?^ | miss    %78.0 = LdVar              eR    X, e72.6
  val?            %78.1 = Force!<wrapped>    !v    %78.0, e72.6   <vec>
  val?            %78.2 = StaticCall         !v    as.list[0x55bbe44e2240](%78.1) { 0 } e72.6   <vec>
  void                    StVar              lW    X, %78.2, e72.6
  goto BB38
BB79   <- [42]
  fs              %79.0 = FrameState         R     0x55bbe422f8f0+434: [], env=e48.0
  fs              %79.1 = FrameState         R     0x55bbe287dc40+189: [%34.1], env=e72.6, next=%79.0
  void                    Deopt              !v    %79.1, CallTarget@0x55bbe3e69630[Call#3], %42.0   !
BB38   <- [37, 78]
  val?^ | miss    %38.0 = LdVar              eR    X, e72.6
  val?            %38.1 = Force!<wrapped>    !v    %38.0, e72.6   <(str|vec)>
  (nil|str)-      %38.2 = Names                    %38.1
  int$-           %38.3 = Length                   %38.1
  vec-            %38.4 = CallSafeBuiltin    wed   vector("list", %38.3) 
  val+            %38.5 = SetNames           e     %38.4, %38.2
  int$#-          %38.6 = 0L
  val+            %38.7 = %38.5
  goto BB39
BB39   <- [40, 38]
  int$-           %39.0 = Phi                      %38.6:BB38, %40.7:BB40
  int$-           %39.1 = %39.0
  val?            %39.2 = Phi                      %38.7:BB38, %40.8:BB40
  val?            %39.3 = %39.2
  int$-           %39.4 = Inc                      %39.1
  lgl$-           %39.5 = Lt                 d     %38.3, %39.4, elided
  lgl$#-          %39.6 = Identical                %39.5, true
  void                    Branch                   %39.6 -> BB41 (if true) | BB40 (if false)
BB41   <- [39]
  val?            %41.0 = PopContext         C     %39.3, %72.3
  goto BB9
BB40   <- [39]
  void                    StVar              lW    i, %39.4, e72.6
  (cls|spec|blt)  %40.1 = LdFun              !v    FUN, e72.6
  prom-           %40.2 = MkArg                    unboundValue, assignNativeRoutines[0x55bbe43e97e0]_p19, e72.6
  (miss|dots)     %40.3 = LdDots             R     , e72.6
  *dots-          %40.4 = ExpandDots               %40.3
  val?            %40.5 = NamedCall          !v    %40.1(%40.2, .xpandDotsTrigger=%40.4) e72.6   <val?>
  val?            %40.6 = SetVecElt          e     %40.5, %39.3, %39.4
  int$-           %40.7 = %39.4
  val?            %40.8 = %40.6
  goto BB39
Prom 0:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    nativeRoutines, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <vec>
  void                    Return             l     %0.3
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    useRegistration, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    nativeRoutines, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <vec>
  void                    Return             l     %0.3
Prom 3:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    symbolNames, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 5:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    nativeRoutines, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <vec>
  void                    Return             l     %0.3
Prom 6:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    registrationFixes, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 7:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    dll, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <vec>
  void                    Return             l     %0.3
Prom 8:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    routines, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <vec>
  void                    Return             l     %0.3
Prom 9:
BB0
  env             e0.0  = LdFunctionEnv            
  cls             %0.1  = MkCls                    assignNativeRoutines@Prom(9)0, e0.0
  void                    Return             l     %0.1
Prom 12:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    dll, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <vec>
  void                    Return             l     %0.3
Prom 14:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     class, e0.0
  prom-           %0.2  = MkArg                    unboundValue, assignNativeRoutines[0x55bbe43e97e0]_p15, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 15:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    els, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 16:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    FUN, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <(cls|blt)->
  void                    Return             l     %0.3
Prom 18:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    X, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <(str|vec)>
  void                    Return             l     %0.3
Prom 19:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    X, e0.0
  val?            %0.2  = Force<wrapped>     !v    %0.1, e0.0   <(str|vec)>
  lgl$#-          %0.3  = IsType                   %0.2 isA val+
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    i, e0.0
  val?            %2.1  = Force<value>       !v    %2.0, e0.0   <int$->
  val?            %2.2  = %2.1
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, assignNativeRoutines[0x55bbe43e97e0]_p20, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.2:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract2_1D        !v    %0.2, %3.1, e0.0   <val?>
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 20:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    i, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <int$->
  void                    Return             l     %0.3

│ assignNativeRoutines[0x55bbe43e97e0]                                         │
└──────────────────────────────────────────────────────────────────────────────┘
