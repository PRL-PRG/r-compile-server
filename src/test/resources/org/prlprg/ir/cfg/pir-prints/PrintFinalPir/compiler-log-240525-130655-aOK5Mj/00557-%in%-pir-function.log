
┌──────────────────────────────────────────────────────────────────────────────┐
│ %in%[0x55bbe3fa1720]                                                         │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;Eager0,Eager1,NonRefl0,NonRefl1,!Obj1│
│ Properties:  ForceOrd: 0                                                     │
├────── Final PIR Version
%in%[0x55bbe3fa1720]
BB0
  val?~+          %0.0  = LdArg                    1
  val?^           %0.1  = LdArg                    0
  val?            %0.2  = Force!<lazy>             %0.1,    <(int|str)+>
  lgl$#-          %0.3  = IsType                   %0.2 isA val?+
  val+            %0.4  = Force<lazy>              %0.0,    <val?->
  lgl$#-          %0.5  = IsType                   %0.4 isA val?-
  void                    Branch                   %0.3 -> BB6 (if true) | BB7 (if false)
BB6   <- [0]
  val?+           %6.0  = CastType           d     dn %0.2   <(int|str)+>
  void                    Branch                   %0.5 -> BB8 (if true) | BB9 (if false)
BB7   <- [0]
  void                    Nop                !     
  val?            %7.1  = %0.2
  dr              %7.2  = Typecheck@0x55bbe347f688[Type#0]
  goto BB5
BB8   <- [6]
  val-            %8.0  = CastType           d     dn %0.4
  val+            %8.1  = CallSafeBuiltin    wed   match(%6.0, %8.0, 0L, nil)    <int->
  lgl$#-          %8.2  = IsType                   %8.1 isA int-
  void                    Visible            v     
  void                    Branch                   %8.2 -> BB10 (if true) | BB11 (if false)
BB9   <- [6]
  void                    Nop                !     
  val+            %9.1  = %0.4
  dr              %9.2  = Typecheck@0x55bbe2687cb0[Type#1]
  goto BB5
BB5   <- [7, 9]
  val?^ | miss    %5.0  = Phi                      %7.1:BB7, %9.1:BB9
  val?^ | miss    %5.1  = %5.0
  dr              %5.2  = Phi                      %7.2:BB7, %9.2:BB9
  dr              %5.3  = %5.2
  env             e5.4  = (MkEnv)            l     x=%0.1, table=%0.0, parent=R_BaseNamespace, context 1
  env             e5.5  = MaterializeEnv           , e5.4   <@?>
  prom-           %5.6  = MkArg                    unboundValue, %in%[0x55bbe3fa1720]_p1 (!refl), e5.5
  val?^           %5.7  = CastType                 up %5.6
  prom-           %5.8  = MkArg                    unboundValue, %in%[0x55bbe3fa1720]_p0 (!refl), e5.5
  val?^           %5.9  = CastType                 up %5.8
  fs              %5.10 = FrameState         R     0x55bbe244d320+54: [], env=e5.5
  env             e5.11 = (MkEnv)            l     incomparables(miss)=nil, nomatch=0L, table=%5.7, x=%5.9, parent=R_BaseNamespace, context 0
  fs              %5.12 = FrameState         R     0x55bbe2634d40+9: [], env=e5.11, next=%5.10
  fs              %5.13 = FrameState         R     0x55bbe244dbc0+5(pr): [%0.2], env=e5.5, next=%5.12
  void                    Deopt              !v    %5.13, %5.3, %5.1
BB10   <- [8]
  int-            %10.0 = CastType           d     dn %8.1
  lgl-            %10.1 = Gt                 vwed  %10.0, 0L, elided   <lgl->
  void                    Return             l     %10.1
BB11   <- [8]
  env             e11.0 = (MkEnv)            l     x=%0.1, table=%0.0, parent=R_BaseNamespace, context 1
  env             e11.1 = MaterializeEnv           , e11.0   <@?>
  prom-           %11.2 = MkArg                    %0.4, %in%[0x55bbe3fa1720]_p1 (!refl), e11.1
  val?~           %11.3 = CastType                 up %11.2
  prom-           %11.4 = MkArg                    %6.0, %in%[0x55bbe3fa1720]_p2 (!refl), e11.1
  val?~           %11.5 = CastType                 up %11.4
  fs              %11.6 = FrameState         R     0x55bbe244d320+54: [], env=e11.1
  env             e11.7 = (MkEnv)            l     incomparables(miss)=nil, nomatch=0L, table=%11.3, x=%11.5, parent=R_BaseNamespace, context 0
  fs              %11.8 = FrameState         R     0x55bbe2634d40+69: [%8.1], env=e11.7, next=%11.6
  void                    Deopt              !v    %11.8, Typecheck@0x55bbe347f688[Type#2], %8.1
Prom 0:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    x, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <(int|str)+>
  void                    Return             l     %0.3
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    table, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <val?->
  void                    Return             l     %0.3
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    x, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <(int|str)+>
  void                    Return             l     %0.3

│ %in%[0x55bbe3fa1720]                                                         │
└──────────────────────────────────────────────────────────────────────────────┘
