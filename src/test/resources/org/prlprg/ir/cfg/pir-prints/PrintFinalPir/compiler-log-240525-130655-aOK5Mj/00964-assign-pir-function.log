
┌──────────────────────────────────────────────────────────────────────────────┐
│ assign[0x55bbe28a4930]                                                       │
│ Context: CorrOrd,!TMany,Argmatch;Eager0,Eager2,NonRefl0,NonRefl2,!Obj0 miss: 2│
│ Properties:  ForceOrd: 0 1                                                   │
├────── Final PIR Version
assign[0x55bbe28a4930]
BB0
  val?^ | miss    %0.0  = LdArg                    3
  val?~ | miss    %0.1  = LdArg                    2
  val?^ | miss    %0.2  = LdArg                    1
  val?~+          %0.3  = LdArg                    0
  lgl$#-          %0.4  = Identical                %0.1, missingArg
  lgl$#-          %0.5  = Identical                %0.0, missingArg
  env             e0.6  = MkEnv              l     x=%0.3, value=%0.2, pos=%0.1, envir=%0.0, inherits(miss)=missingArg, immediate(miss)=missingArg, parent=R_BaseNamespace, context 1
  void                    Branch                   %0.4 -> BB2 (if true) | BB7 (if false)
BB2   <- [0]
  prom-           %2.0  = MkArg                    unboundValue, assign[0x55bbe28a4930]_p0 (!refl), 
  val?^ | miss    %2.1  = CastType                 up %2.0
  void                    StArg              lW    pos, %2.1, e0.6
  goto BB3
BB7   <- [0]
  void                    Nop                !     
  goto BB3
BB3   <- [2, 7]
  void                    Branch                   %0.5 -> BB6 (if true) | BB4 (if false)
BB6   <- [3]
  prom-           %6.0  = MkArg                    unboundValue, assign[0x55bbe28a4930]_p1, e0.6
  val?^ | miss    %6.1  = CastType                 up %6.0
  void                    StArg              lW    envir, %6.1, e0.6
  goto BB5
BB4   <- [3]
  void                    Nop                !     
  goto BB5
BB5   <- [6, 4]
  void                    StArg              lW    inherits, false, e0.6
  void                    StArg              lW    immediate, true, e0.6
  val+            %5.2  = Force<lazy>              %0.3,    <str$->
  val?^           %5.3  = ChkMissing         e     %0.2
  val?            %5.4  = Force!<lazy>       !v    %5.3, e0.6   <val?>
  val?^ | miss    %5.5  = LdVar              eR    envir, e0.6
  val?            %5.6  = Force!<lazy>       !v    %5.5, e0.6   <env->
  val?^ | miss    %5.7  = LdVar              eR    inherits, e0.6
  val?            %5.8  = Force!<lazy>       !v    %5.7, e0.6   <lgl$->
  val?            %5.9  = CallBuiltin        !     assign(%5.2, %5.4, %5.6, %5.8) e0.6
  void                    Return             l     %5.9
Prom 0:
BB0
  void                    Visible            v     
  void                    Return             l     -1
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     as.environment, <0x55bbe1e2cb70>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, assign[0x55bbe28a4930]_p2, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <env->
  void                    Return             l     %0.3
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    pos, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <env->
  void                    Return             l     %0.3

│ assign[0x55bbe28a4930]                                                       │
└──────────────────────────────────────────────────────────────────────────────┘
