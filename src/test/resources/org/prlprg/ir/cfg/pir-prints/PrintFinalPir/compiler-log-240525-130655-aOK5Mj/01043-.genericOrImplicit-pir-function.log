
┌──────────────────────────────────────────────────────────────────────────────┐
│ .genericOrImplicit[0x55bbe2977940]                                           │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;NonRefl0,NonRefl1,NonRefl2,!Obj0,!Obj1,!Obj2│
│ Properties:                                                                  │
├────── Final PIR Version
.genericOrImplicit[0x55bbe2977940]
BB0
  val?^           %0.0  = LdArg                    2
  val?^           %0.1  = LdArg                    1
  val?^           %0.2  = LdArg                    0
  val?^ | miss    %0.3  = LdVar              eR    .getGenericFromCache, <env 0x55bbe2427378>
  lgl$#-          %0.4  = Identical                %0.3, function(name, where, pkg="") <(rir::DispatchT|...
  void                    Branch                   %0.4 -> BB35 (if true) | BB36 (if false)
BB35   <- [0]
  env             e35.0 = MkEnv              l     name=%0.2, pkg=%0.1, env=%0.0, parent=<env 0x55bbe2427378>, context 1
  prom-           %35.1 = MkArg                    unboundValue, .genericOrImplicit[0x55bbe2977940]_p0 (!refl), e35.0
  prom-           %35.2 = MkArg                    unboundValue, .genericOrImplicit[0x55bbe2977940]_p1 (!refl), e35.0
  prom-           %35.3 = MkArg                    unboundValue, .genericOrImplicit[0x55bbe2977940]_p2 (!refl), e35.0
  ct              %35.4 = PushContext        lCL   %35.1, %35.2, %35.3, .getGenericFromCache(name, env, pkg), function(name, where, pkg="") <(rir::DispatchT|..., e35.0
  val?^           %35.5 = CastType                 up %35.3
  val?^           %35.6 = CastType                 up %35.2
  val?^           %35.7 = CastType                 up %35.1
  val?^ | miss    %35.8 = LdVar              eR    .getGenericFromCacheTable, <env 0x55bbe2427378>
  lgl$#-          %35.9 = Identical                %35.8, function(name, where, pkg="", table) <(rir::Di|...
  void                    Branch                   %35.9 -> BB37 (if true) | BB38 (if false)
BB36   <- [0]
  env             e36.0 = (MkEnv)            l     name=%0.2, pkg=%0.1, env=%0.0, parent=<env 0x55bbe2427378>, context 1
  fs              %36.1 = FrameState         R     0x55bbe2846ff0+0: [], env=e36.0
  void                    Deopt              !v    %36.1, CallTarget@0x55bbe6262470[Call#0], %0.3
BB37   <- [35]
  env             e37.0 = MkEnv              l     name=%35.7, where=%35.6, pkg=%35.5, parent=<env 0x55bbe2427378>, context 1
  prom-           %37.1 = MkArg                    unboundValue, .genericOrImplicit[0x55bbe2977940]_p13, e37.0
  prom-           %37.2 = MkArg                    unboundValue, .genericOrImplicit[0x55bbe2977940]_p14, e37.0
  prom-           %37.3 = MkArg                    unboundValue, .genericOrImplicit[0x55bbe2977940]_p15, e37.0
  prom-           %37.4 = MkArg                    unboundValue, .genericOrImplicit[0x55bbe2977940]_p16, e37.0
  val?            %37.5 = StaticCall         !v    .getGenericFromCacheTable[0x55bbe5275a80](%37.1, %37.2, %37.3, %37.4) e37.0   <(nil|cls)>
  val?            %37.6 = PopContext         C     %37.5, %35.4   <nil->
  lgl$-           %37.7 = Is                       %37.6, NULL
  void                    StVar              lW    fdef, %37.6, e35.0
  val             %37.9 = ChkMissing         e     %37.6
  lgl$#-          %37.10 = CheckTrueFalse     e     %37.7
  void                    Branch                   %37.10 -> BB9 (if true) | BB7 (if false)
BB38   <- [35]
  fs              %38.0 = FrameState         R     0x55bbe2846ff0+42: [], env=e35.0
  env             e38.1 = (MkEnv)            l     name=%35.7, where=%35.6, pkg=%35.5, parent=<env 0x55bbe2427378>, context 1
  fs              %38.2 = FrameState         R     0x55bbe3f8f630+0: [], env=e38.1, next=%38.0
  void                    Deopt              !v    %38.2, CallTarget@0x55bbe4d6bd20[Call#0], %35.8   !
BB9   <- [37]
  val?^ | miss    %9.0  = LdVar              eR    tryCatch, e35.0
  lgl$#-          %9.1  = Identical                %9.0, function(expr, ..., finally) <(rir::DispatchTa|...
  void                    Branch                   %9.1 -> BB39 (if true) | BB40 (if false)
BB7   <- [37]
  void                    Nop                !     
  goto BB8
BB39   <- [9]
  prom-           %39.0 = MkArg                    unboundValue, .genericOrImplicit[0x55bbe2977940]_p3, e35.0
  cls             %39.1 = MkCls                    .genericOrImplicit@Prom(5)0, e35.0
  prom-           %39.2 = MkArg                    %39.1, .genericOrImplicit[0x55bbe2977940]_p5 (!refl), e35.0
  dots-           %39.3 = DotsList           l     error=%39.2
  val?            %39.4 = StaticCall         !v    tryCatch[0x55bbe4824700](%39.0, %39.3) { 0 1n } e35.0   <env->
  void                    StVar              lW    penv, %39.4, e35.0
  val?^ | miss    %39.6 = LdVar              eR    isNamespace, e35.0
  lgl$#-          %39.7 = Identical                %39.6, function(ns) <(rir::DispatchTable*)0x55bbe432e|...
  void                    Branch                   %39.7 -> BB41 (if true) | BB42 (if false)
BB40   <- [9]
  fs              %40.0 = FrameState         R     0x55bbe2846ff0+56: [], env=e35.0
  void                    Deopt              !v    %40.0, CallTarget@0x55bbe6262470[Call#1], %9.0   !
BB8   <- [7, 19, 59]
  val?^ | miss    %8.0  = LdVar              eR    fdef, e35.0
  void                    Visible            v     
  val?            %8.2  = Force!<value>      !     %8.0, e35.0   <cls>
  void                    Return             l     %8.2
BB41   <- [39]
  prom-           %41.0 = MkArg                    unboundValue, .genericOrImplicit[0x55bbe2977940]_p6 (!refl), e35.0
  ct              %41.1 = PushContext        lCL   %41.0, isNamespace(penv), function(ns) <(rir::DispatchTable*)0x55bbe432e|..., e35.0
  val?^           %41.2 = CastType                 up %41.0
  env             e41.3 = MkEnv              l     ns=%41.2, parent=R_BaseNamespace, context 1
  val?            %41.4 = CallBuiltin        !v    isNamespaceEnv(%39.4) e41.3
  val?            %41.5 = PopContext         C     %41.4, %41.1   <lgl$->
  lgl$#-          %41.6 = IsType                   %41.5 isA lgl$-
  void                    Branch                   %41.6 -> BB43 (if true) | BB44 (if false)
BB42   <- [39]
  fs              %42.0 = FrameState         R     0x55bbe2846ff0+145: [], env=e35.0
  void                    Deopt              !v    %42.0, CallTarget@0x55bbe6262470[Call#3], %39.6   !
BB43   <- [41]
  lgl$-           %43.0 = CastType           d     dn %41.5
  lgl$-           %43.1 = Not                d     %43.0, elided
  lgl$#-          %43.2 = CheckTrueFalse     e     %43.1
  void                    Branch                   %43.2 -> BB33 (if true) | BB14 (if false)
BB44   <- [41]
  void                    Nop                !     
  val?            %44.1 = %41.5
  dr              %44.2 = Typecheck@0x55bbe6262470[Type#9]
  goto BB12
BB33   <- [43]
  (cls|spec|blt)  %33.0 = LdFun              !v    paste0, e35.0
  fs              %33.1 = FrameState         R     0x55bbe2846ff0+199: [%33.0], env=e35.0
  void                    Deopt              !v    %33.1, DeadCall@0x55bbe6262470[Call#4], %33.0   !
BB14   <- [43]
  val?^ | miss    %14.0 = LdVar              eR    getFunction, e35.0
  lgl$#-          %14.1 = Identical                %14.0, function(name, generic=TRUE, mustFind=TRUE, wh|...
  void                    Branch                   %14.1 -> BB45 (if true) | BB46 (if false)
BB12   <- [44, 46]
  val?^ | miss    %12.0 = Phi                      %44.1:BB44, %46.1:BB46
  val?^ | miss    %12.1 = %12.0
  dr              %12.2 = Phi                      %44.2:BB44, %46.2:BB46
  dr              %12.3 = %12.2
  fs              %12.4 = FrameState         R     0x55bbe2846ff0+177: [%41.5], env=e35.0
  void                    Deopt              !v    %12.4, %12.3, %12.1   !
BB45   <- [14]
  prom-           %45.0 = MkArg                    unboundValue, .genericOrImplicit[0x55bbe2977940]_p7, e35.0
  prom-           %45.1 = MkArg                    unboundValue, .genericOrImplicit[0x55bbe2977940]_p8, e35.0
  val?            %45.2 = StaticCall         !v    getFunction[0x55bbe51b3b70](%45.0, true, false, %45.1) e35.0   <cls->
  void                    StVar              lW    fdef, %45.2, e35.0
  val?^ | miss    %45.4 = LdVar              eR    is, e35.0
  lgl$#-          %45.5 = Identical                %45.4, function(object, class2) <(rir::DispatchTable*|...
  void                    Branch                   %45.5 -> BB47 (if true) | BB48 (if false)
BB46   <- [14]
  void                    Nop                !     
  val?^ | miss    %46.1 = %14.0
  dr              %46.2 = CallTarget@0x55bbe6262470[Call#8]
  goto BB12
BB47   <- [45]
  prom-           %47.0 = MkArg                    unboundValue, .genericOrImplicit[0x55bbe2977940]_p9 (!refl), e35.0
  val?            %47.1 = Call               !v    function(object, class2) <(rir::DispatchTable*|...(%47.0, "genericFunction") e35.0   <lgl$->
  lgl$#-          %47.2 = IsType                   %47.1 isA lgl$-
  void                    Branch                   %47.2 -> BB49 (if true) | BB50 (if false)
BB48   <- [45]
  fs              %48.0 = FrameState         R     0x55bbe2846ff0+478: [], env=e35.0
  void                    Deopt              !v    %48.0, CallTarget@0x55bbe6262470[Call#9], %45.4   !
BB49   <- [47]
  lgl$-           %49.0 = CastType           d     dn %47.1
  lgl$-           %49.1 = Not                d     %49.0, elided
  lgl$#-          %49.2 = CheckTrueFalse     e     %49.1
  void                    Branch                   %49.2 -> BB20 (if true) | BB19 (if false)
BB50   <- [47]
  void                    Nop                !     
  val?            %50.1 = %47.1
  dr              %50.2 = Typecheck@0x55bbe6262470[Type#23]
  goto BB17
BB20   <- [49]
  val?^ | miss    %20.0 = LdVar              eR    is.primitive, e35.0
  lgl$#-          %20.1 = Identical                %20.0, function(x) <(rir::DispatchTable*)0x55bbe632e4|...
  void                    Branch                   %20.1 -> BB51 (if true) | BB52 (if false)
BB19   <- [49]
  void                    Nop                !     
  goto BB8
BB17   <- [50, 52, 54]
  val?^ | miss    %17.0 = Phi                      %50.1:BB50, %52.1:BB52, %54.1:BB54
  val?^ | miss    %17.1 = %17.0
  dr              %17.2 = Phi                      %50.2:BB50, %52.2:BB52, %54.2:BB54
  dr              %17.3 = %17.2
  fs              %17.4 = FrameState         R     0x55bbe2846ff0+515: [%47.1], env=e35.0
  void                    Deopt              !v    %17.4, %17.3, %17.1   !
BB51   <- [20]
  val?^ | miss    %51.0 = LdVar              eR    fdef, e35.0
  lgl$#-          %51.1 = IsType                   %51.0 isA val?~- | miss
  void                    Branch                   %51.1 -> BB53 (if true) | BB54 (if false)
BB52   <- [20]
  void                    Nop                !     
  val?^ | miss    %52.1 = %20.0
  dr              %52.2 = CallTarget@0x55bbe6262470[Call#10]
  goto BB17
BB53   <- [51]
  val?~- | miss   %53.0 = CastType           d     dn %51.0
  val?-           %53.1 = Force!<value>            %53.0,    <cls->
  str$-           %53.2 = CallSafeBuiltin    wed   typeof(%53.1)    <str$->
  int$-           %53.3 = Length                   %53.2
  lgl$-           %53.4 = Eq                 d     %53.3, 1L, elided   <true>
  lgl$#-          %53.5 = Identical                %53.4, true
  void                    Branch                   %53.5 -> BB55 (if true) | BB56 (if false)
BB54   <- [51]
  void                    Nop                !     
  val?^ | miss    %54.1 = %51.0
  dr              %54.2 = Typecheck@0x55bbe6262470[Type#24]
  goto BB17
BB55   <- [53]
  lgl$-           %55.0 = CallSafeBuiltin    wed   is.na(%53.2) 
  lgl$#-          %55.1 = CheckTrueFalse     e     %55.0   <false>
  void                    Branch                   %55.1 -> BB58 (if true) | BB57 (if false)
BB56   <- [53]
  prom-           %56.0 = MkArg                    %53.1, .genericOrImplicit[0x55bbe2977940]_p10 (!refl), e35.0
  val?~           %56.1 = CastType                 up %56.0
  env             e56.2 = (MkEnv)            l     x=%56.1, parent=R_BaseNamespace, context 0
  env             e56.3 = MaterializeEnv           , e56.2   <@?>
  fs              %56.4 = FrameState         R     0x55bbe2846ff0+564: [], env=e35.0
  fs              %56.5 = FrameState         R     0x55bbe3fa9250+32: [], env=e56.3, next=%56.4
  prom-           %56.6 = MkArg                    %53.1, .genericOrImplicit[0x55bbe2977940]_p17 (!refl), e56.3
  val?~           %56.7 = CastType                 up %56.6
  env             e56.8 = (MkEnv)            l     x=%56.7, parent=R_BaseNamespace, context -1
  fs              %56.9 = FrameState         R     0x55bbe3eeb800+27: [%53.2], env=e56.8, next=%56.5
  void                    Deopt              !v    %56.9, DeadBranchReached@0x55bbe65e81a8[Test#1], %53.5   !
BB58   <- [55]
  void                    Nop                !     
  lgl$#-          %58.1 = %55.1
  dr              %58.2 = DeadBranchReached@0x55bbe65e81a8[Test#7]
  goto BB23
BB57   <- [55]
  lgl$-           %57.0 = Eq                 d     %53.2, special, elided
  lgl$#-          %57.1 = CheckTrueFalse     e     %57.0
  void                    Branch                   %57.1 -> BB32 (if true) | BB25 (if false)
BB23   <- [58, 60]
  val?^ | miss    %23.0 = Phi                      %58.1:BB58, %60.1:BB60
  val?^ | miss    %23.1 = %23.0
  dr              %23.2 = Phi                      %58.2:BB58, %60.2:BB60
  dr              %23.3 = %23.2
  prom-           %23.4 = MkArg                    %53.1, .genericOrImplicit[0x55bbe2977940]_p10 (!refl), e35.0
  val?~           %23.5 = CastType                 up %23.4
  fs              %23.6 = FrameState         R     0x55bbe2846ff0+564: [], env=e35.0
  env             e23.7 = (MkEnv)            l     x=%23.5, parent=R_BaseNamespace, context 0
  fs              %23.8 = FrameState         R     0x55bbe3fa9250+240: [%53.2, %55.0], env=e23.7, next=%23.6
  void                    Deopt              !v    %23.8, %23.3, %23.1   !
BB32   <- [57]
  void                    Nop                !     
  goto BB31
BB25   <- [57]
  lgl$-           %25.0 = Eq                 d     %53.2, builtin, elided
  lgl$#-          %25.1 = CheckTrueFalse     e     %25.0
  void                    Branch                   %25.1 -> BB30 (if true) | BB26 (if false)
BB31   <- [32, 30]
  void                    Nop                !     
  lgl$#-          %31.1 = true
  goto BB27
BB30   <- [25]
  void                    Nop                !     
  goto BB31
BB26   <- [25]
  void                    Nop                !     
  lgl$#-          %26.1 = false
  goto BB27
BB27   <- [26, 31]
  lgl$#-          %27.0 = Phi                      %26.1:BB26, %31.1:BB31
  lgl$#-          %27.1 = %27.0
  void                    Branch                   %27.1 -> BB29 (if true) | BB28 (if false)
BB29   <- [27]
  (cls|spec|blt)  %29.0 = LdFun              !v    genericForBasic, e35.0
  fs              %29.1 = FrameState         R     0x55bbe2846ff0+636: [%29.0], env=e35.0
  void                    Deopt              !v    %29.1, DeadCall@0x55bbe6262470[Call#12], %29.0   !
BB28   <- [27]
  val?^ | miss    %28.0 = LdVar              eR    implicitGeneric, e35.0
  lgl$#-          %28.1 = Identical                %28.0, function(name, where=topenv(parent.frame()), g|...
  void                    Branch                   %28.1 -> BB59 (if true) | BB60 (if false)
BB59   <- [28]
  prom-           %59.0 = MkArg                    unboundValue, .genericOrImplicit[0x55bbe2977940]_p11, e35.0
  prom-           %59.1 = MkArg                    unboundValue, .genericOrImplicit[0x55bbe2977940]_p12, e35.0
  val?            %59.2 = StaticCall         !v    implicitGeneric[0x55bbe4d4e180](%59.0, %59.1) e35.0   <cls>
  void                    StVar              lW    fdef, %59.2, e35.0
  goto BB8
BB60   <- [28]
  void                    Nop                !     
  val?^ | miss    %60.1 = %28.0
  dr              %60.2 = CallTarget@0x55bbe6262470[Call#11]
  goto BB23
Prom 0:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    name, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    env, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    pkg, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 3:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     getNamespace, <0x55bbe371a4a8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .genericOrImplicit[0x55bbe2977940]_p4, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <env->
  void                    Return             l     %0.3
Prom 4:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    pkg, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 5:
BB0
  env             e0.0  = LdFunctionEnv            
  cls             %0.1  = MkCls                    .genericOrImplicit@Prom(5)0, e0.0
  void                    Return             l     %0.1
Prom 6:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    penv, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 7:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    name, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 8:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    penv, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 9:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fdef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls->
  void                    Return             l     %0.3
Prom 10:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fdef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls->
  void                    Return             l     %0.3
Prom 11:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    name, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 12:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    penv, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 13:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    name, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 14:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 15:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    pkg, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 16:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    .genericTable, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 17:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    x, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <val?>
  void                    Return             l     %0.3

│ .genericOrImplicit[0x55bbe2977940]                                           │
└──────────────────────────────────────────────────────────────────────────────┘
