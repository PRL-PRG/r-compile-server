
┌──────────────────────────────────────────────────────────────────────────────┐
│ implicitGeneric[0x55bbe62aa490]                                              │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;NonRefl0,NonRefl1,!Obj0,!Obj1 miss: 1│
│ Properties:                                                                  │
├────── Final PIR Version
implicitGeneric[0x55bbe62aa490]
BB0
  val?^           %0.0  = LdArg                    1
  val?^           %0.1  = LdArg                    0
  env             e0.2  = MkEnv              l     name=%0.1, where=%0.0, generic(miss)=missingArg, parent=<env 0x55bbe2427378>, context 1
  prom-           %0.3  = MkArg                    unboundValue, implicitGeneric[0x55bbe62aa490]_p0, e0.2
  val?^ | miss    %0.4  = CastType                 up %0.3
  void                    StArg              lW    generic, %0.4, e0.2
  val?^ | miss    %0.6  = LdVar              eR    nzchar, <env 0x55bbe2427378>
  lgl$#-          %0.7  = Identical                <blt nzchar>, %0.6   <true>
  void                    Branch                   %0.7 -> BB115 (if true) | BB116 (if false)
BB115   <- [0]
  val+            %115.0 = Force!<lazy>       !vr   %0.1,    <str$->
  val?            %115.1 = CallBuiltin        !v    nzchar(%115.0) e0.2   <lgl$->
  lgl$#-          %115.2 = IsType                   %115.1 isA lgl$-
  void                    Branch                   %115.2 -> BB117 (if true) | BB118 (if false)
BB116   <- [0]
  fs              %116.0 = FrameState         R     0x55bbe644d440+0: [], env=e0.2
  void                    Deopt              !v    %116.0, DeadBranchReached@0x55bbe4f750d0[Test#0], %0.7
BB117   <- [115]
  lgl$-           %117.0 = CastType           d     dn %115.1
  lgl$-           %117.1 = Not                d     %117.0, elided
  lgl$#-          %117.2 = CheckTrueFalse     e     %117.1
  void                    Branch                   %117.2 -> BB113 (if true) | BB5 (if false)
BB118   <- [115]
  void                    Nop                !     
  val?            %118.1 = %115.1
  dr              %118.2 = Typecheck@0x55bbe4f750d0[Type#7]
  goto BB3
BB113   <- [117]
  (cls|spec|blt)  %113.0 = LdFun              !v    stop, e0.2
  fs              %113.1 = FrameState         R     0x55bbe644d440+113: [%113.0], env=e0.2
  void                    Deopt              !v    %113.1, DeadCall@0x55bbe4f750d0[Call#4], %113.0   !
BB5   <- [117]
  lgl$-           %5.0  = Missing            eR    generic, e0.2
  lgl$-           %5.1  = Not                d     %5.0, elided
  lgl$-           %5.2  = AsLogical                %5.1
  lgl$#-          %5.3  = Identical                %5.2, false
  lgl$-           %5.4  = AsLogical                %5.2
  lgl$#-          %5.5  = Identical                %5.4, false
  void                    Branch                   %5.3 -> BB7 (if true) | BB6 (if false)
BB3   <- [118, 120]
  val?^ | miss    %3.0  = Phi                      %118.1:BB118, %120.1:BB120
  val?^ | miss    %3.1  = %3.0
  dr              %3.2  = Phi                      %118.2:BB118, %120.2:BB120
  dr              %3.3  = %3.2
  fs              %3.4  = FrameState         R     0x55bbe644d440+91: [%115.1], env=e0.2
  void                    Deopt              !v    %3.4, %3.3, %3.1   !
BB7   <- [5]
  void                    Branch                   %5.5 -> BB9 (if true) | BB8 (if false)
BB6   <- [5]
  (cls|spec|blt)  %6.0  = LdFun              !v    is, e0.2
  fs              %6.1  = FrameState         R     0x55bbe644d440+173: [%5.2, %6.0], env=e0.2
  void                    Deopt              !v    %6.1, DeadCall@0x55bbe4f750d0[Call#6], %6.0   !
BB9   <- [7]
  lgl$#-          %9.0  = CheckTrueFalse     e     %5.4
  void                    Branch                   %9.0 -> BB112 (if true) | BB10 (if false)
BB8   <- [7]
  (cls|spec|blt)  %8.0  = LdFun              !v    .identC, e0.2
  fs              %8.1  = FrameState         R     0x55bbe644d440+224: [%5.4, %8.0], env=e0.2
  void                    Deopt              !v    %8.1, DeadCall@0x55bbe4f750d0[Call#7], %8.0   !
BB112   <- [9]
  (cls|spec|blt)  %112.0 = LdFun              !v    stop, e0.2
  fs              %112.1 = FrameState         R     0x55bbe644d440+280: [%112.0], env=e0.2
  void                    Deopt              !v    %112.1, DeadCall@0x55bbe4f750d0[Call#9], %112.0   !
BB10   <- [9]
  lgl$-           %10.0 = Missing            eR    generic, e0.2
  lgl$-           %10.1 = AsLogical                %10.0
  lgl$#-          %10.2 = Identical                %10.1, true
  lgl$-           %10.3 = AsLogical                %10.1
  lgl$#-          %10.4 = Identical                %10.3, false
  void                    Branch                   %10.2 -> BB12 (if true) | BB11 (if false)
BB12   <- [10]
  void                    Branch                   %10.4 -> BB111 (if true) | BB13 (if false)
BB11   <- [10]
  (cls|spec|blt)  %11.0 = LdFun              !v    is, e0.2
  fs              %11.1 = FrameState         R     0x55bbe644d440+339: [%10.1, %11.0], env=e0.2
  void                    Deopt              !v    %11.1, DeadCall@0x55bbe4f750d0[Call#12], %11.0   !
BB111   <- [12]
  void                    Nop                !     
  lgl$-           %111.1 = %10.3
  goto BB16
BB13   <- [12]
  val?^ | miss    %13.0 = LdVar              eR    isGeneric, e0.2
  lgl$#-          %13.1 = Identical                %13.0, function(f, where=topenv(parent.frame()), fdef|...
  void                    Branch                   %13.1 -> BB119 (if true) | BB120 (if false)
BB16   <- [111, 121]
  lgl$-           %16.0 = Phi                      %121.4:BB121, %111.1:BB111
  lgl$-           %16.1 = %16.0
  void                    StVar              lW    createGeneric, %16.1, e0.2
  lgl$#-          %16.3 = CheckTrueFalse     e     %16.1
  void                    Branch                   %16.3 -> BB22 (if true) | BB19 (if false)
BB119   <- [13]
  prom-           %119.0 = MkArg                    unboundValue, implicitGeneric[0x55bbe62aa490]_p3, e0.2
  prom-           %119.1 = MkArg                    unboundValue, implicitGeneric[0x55bbe62aa490]_p4, e0.2
  val?            %119.2 = StaticCall         !v    isGeneric[0x55bbe47ded00](%119.0, %119.1) e0.2   <lgl$->
  lgl$#-          %119.3 = IsType                   %119.2 isA lgl$-
  void                    Branch                   %119.3 -> BB121 (if true) | BB122 (if false)
BB120   <- [13]
  void                    Nop                !     
  val?^ | miss    %120.1 = %13.0
  dr              %120.2 = CallTarget@0x55bbe4f750d0[Call#13]
  goto BB3
BB22   <- [16]
  val?^ | miss    %22.0 = LdVar              eR    getFunction, e0.2
  lgl$#-          %22.1 = Identical                %22.0, function(name, generic=TRUE, mustFind=TRUE, wh|...
  void                    Branch                   %22.1 -> BB123 (if true) | BB124 (if false)
BB19   <- [16]
  void                    Nop                !     
  goto BB20
BB121   <- [119]
  lgl$-           %121.0 = CastType           d     dn %119.2
  lgl$-           %121.1 = Not                d     %121.0, elided
  lgl$-           %121.2 = AsLogical                %121.1
  lgl$-           %121.3 = LAnd                     %10.3, %121.2
  lgl$-           %121.4 = %121.3
  goto BB16
BB122   <- [119]
  fs              %122.0 = FrameState         R     0x55bbe644d440+424: [%10.3, %119.2], env=e0.2
  void                    Deopt              !v    %122.0, Typecheck@0x55bbe4f750d0[Type#23], %119.2   !
BB123   <- [22]
  prom-           %123.0 = MkArg                    unboundValue, implicitGeneric[0x55bbe62aa490]_p5, e0.2
  prom-           %123.1 = MkArg                    unboundValue, implicitGeneric[0x55bbe62aa490]_p6, e0.2
  val?            %123.2 = StaticCall         !v    getFunction[0x55bbe4ed6ed0](%123.0, missingArg, false, %123.1) { 0 3n 2n } e0.2   <cls->
  lgl$-           %123.3 = Is                       %123.2, NULL
  void                    StVar              lW    fdefault, %123.2, e0.2
  val             %123.5 = ChkMissing         e     %123.2
  lgl$#-          %123.6 = CheckTrueFalse     e     %123.3
  void                    Branch                   %123.6 -> BB110 (if true) | BB25 (if false)
BB124   <- [22]
  fs              %124.0 = FrameState         R     0x55bbe644d440+441: [], env=e0.2
  void                    Deopt              !v    %124.0, CallTarget@0x55bbe4f750d0[Call#14], %22.0   !
BB20   <- [19, 77, 193]
  val?^ | miss    %20.0 = LdVar              eR    generic, e0.2
  void                    Visible            v     
  val?            %20.2 = Force!<value>      !     %20.0, e0.2   <cls>
  val?            %20.3 = %20.2
  goto BB21
BB110   <- [123]
  void                    Visible            v     
  nil-            %110.1 = nil
  goto BB21
BB25   <- [123]
  val?^ | miss    %25.0 = LdVar              eR    environment, e0.2
  lgl$#-          %25.1 = Identical                %25.0, function(fun=NULL) <(rir::DispatchTable*)0x55b|...
  void                    Branch                   %25.1 -> BB125 (if true) | BB126 (if false)
BB21   <- [110, 20]
  val?            %21.0 = Phi                      %20.3:BB20, %110.1:BB110
  val?            %21.1 = %21.0
  void                    Return             l     %21.1
BB125   <- [25]
  prom-           %125.0 = MkArg                    %123.2, implicitGeneric[0x55bbe62aa490]_p7 (!refl), 
  val?            %125.1 = StaticCall         !v    environment[0x55bbe210a250](%125.0) e0.2   <env->
  void                    StVar              lW    env, %125.1, e0.2
  val?^ | miss    %125.3 = LdVar              eR    .derivedDefaultMethod, e0.2
  lgl$#-          %125.4 = Identical                %125.3, function(fdef, internal=NULL) <(rir::DispatchT|...
  void                    Branch                   %125.4 -> BB127 (if true) | BB128 (if false)
BB126   <- [25]
  fs              %126.0 = FrameState         R     0x55bbe644d440+534: [], env=e0.2
  void                    Deopt              !v    %126.0, CallTarget@0x55bbe4f750d0[Call#15], %25.0   !
BB127   <- [125]
  prom-           %127.0 = MkArg                    unboundValue, implicitGeneric[0x55bbe62aa490]_p8, e0.2
  ct              %127.1 = PushContext        lCL   %127.0, .derivedDefaultMethod(fdefault), function(fdef, internal=NULL) <(rir::DispatchT|..., e0.2
  val?^           %127.2 = CastType                 up %127.0
  val?^ | miss    %127.3 = LdVar              eR    is.function, <env 0x55bbe2427378>
  lgl$#-          %127.4 = Identical                <blt is.function>, %127.3   <true>
  void                    Branch                   %127.4 -> BB129 (if true) | BB130 (if false)
BB128   <- [125]
  void                    Nop                !     
  val?^ | miss    %128.1 = %125.3
  dr              %128.2 = CallTarget@0x55bbe4f750d0[Call#16]
  goto BB26
BB129   <- [127]
  env             e129.0 = MkEnv              l     fdef=%127.2, internal(miss)=nil, parent=<env 0x55bbe2427378>, context 1
  val?            %129.1 = Force!<lazy>       !vL   %127.2, e129.0   <cls->
  lgl$#-          %129.2 = IsType                   %129.1 isA val?-
  void                    Branch                   %129.2 -> BB131 (if true) | BB132 (if false)
BB130   <- [127]
  void                    DropContext        C     
  lgl$#-          %130.1 = %127.4
  dr              %130.2 = DeadBranchReached@0x55bbe72bad88[Test#0]
  goto BB26
BB26   <- [128, 130]
  val?^ | miss    %26.0 = Phi                      %128.1:BB128, %130.1:BB130
  val?^ | miss    %26.1 = %26.0
  dr              %26.2 = Phi                      %128.2:BB128, %130.2:BB130
  dr              %26.3 = %26.2
  fs              %26.4 = FrameState         R     0x55bbe644d440+617: [], env=e0.2
  void                    Deopt              !v    %26.4, %26.3, %26.1   !
BB131   <- [129]
  val?-           %131.0 = CastType           d     dn %129.1   <cls->
  lgl$#-          %131.1 = CallSafeBuiltin    wed   is.function(%131.0)    <lgl$->
  void                    Branch                   %131.1 -> BB99 (if true) | BB32 (if false)
BB132   <- [129]
  fs              %132.0 = FrameState         R     0x55bbe644d440+649: [], env=e0.2
  fs              %132.1 = FrameState         R     0x55bbe460fdc0+69: [<blt is.function>, %129.1], env=e129.0, next=%132.0
  void                    Deopt              !v    %132.1, Typecheck@0x55bbe72bad88[Type#1], %129.1   !
BB99   <- [131]
  val?^ | miss    %99.0 = LdVar              eR    is.primitive, <env 0x55bbe2427378>
  lgl$#-          %99.1 = Identical                %99.0, function(x) <(rir::DispatchTable*)0x55bbe632e4|...
  void                    Branch                   %99.1 -> BB133 (if true) | BB134 (if false)
BB32   <- [131]
  void                    Nop                !     
  lgl$#-          %32.1 = %131.1
  goto BB33
BB133   <- [99]
  str$-           %133.0 = CallSafeBuiltin    wed   typeof(%131.0)    <str$->
  int$-           %133.1 = Length                   %133.0
  lgl$-           %133.2 = Eq                 d     %133.1, 1L, elided   <true>
  lgl$#-          %133.3 = Identical                %133.2, true
  void                    Branch                   %133.3 -> BB135 (if true) | BB136 (if false)
BB134   <- [99]
  fs              %134.0 = FrameState         R     0x55bbe644d440+649: [], env=e0.2
  fs              %134.1 = FrameState         R     0x55bbe460fdc0+91: [%131.1], env=e129.0, next=%134.0
  void                    Deopt              !v    %134.1, CallTarget@0x55bbe72bad88[Call#1], %99.0   !
BB33   <- [32, 106]
  lgl$-           %33.0 = Phi                      %106.4:BB106, %32.1:BB32
  lgl$-           %33.1 = %33.0
  lgl$#-          %33.2 = CheckTrueFalse     e     %33.1
  void                    Branch                   %33.2 -> BB96 (if true) | BB34 (if false)
BB135   <- [133]
  lgl$-           %135.0 = CallSafeBuiltin    wed   is.na(%133.0) 
  lgl$#-          %135.1 = CheckTrueFalse     e     %135.0   <false>
  void                    Branch                   %135.1 -> BB138 (if true) | BB137 (if false)
BB136   <- [133]
  prom-           %136.0 = MkArg                    %131.0, implicitGeneric[0x55bbe62aa490]_p36 (!refl), e129.0
  val?~           %136.1 = CastType                 up %136.0
  env             e136.2 = (MkEnv)            l     x=%136.1, parent=R_BaseNamespace, context 0
  env             e136.3 = MaterializeEnv           , e136.2   <@?>
  fs              %136.4 = FrameState         R     0x55bbe644d440+649: [], env=e0.2
  fs              %136.5 = FrameState         R     0x55bbe460fdc0+135: [%131.1], env=e129.0, next=%136.4
  fs              %136.6 = FrameState         R     0x55bbe3fa9250+32: [], env=e136.3, next=%136.5
  prom-           %136.7 = MkArg                    %131.0, implicitGeneric[0x55bbe62aa490]_p37 (!refl), e136.3
  val?~           %136.8 = CastType                 up %136.7
  env             e136.9 = (MkEnv)            l     x=%136.8, parent=R_BaseNamespace, context -1
  fs              %136.10 = FrameState         R     0x55bbe3eeb800+27: [%133.0], env=e136.9, next=%136.6
  void                    Deopt              !v    %136.10, DeadBranchReached@0x55bbe65e81a8[Test#1], %133.3   !
BB96   <- [33]
  val?^ | miss    %96.0 = LdVar              eR    new, <env 0x55bbe2427378>
  lgl$#-          %96.1 = Identical                %96.0, function(Class, ...) <(rir::DispatchTable*)0x5|...
  void                    Branch                   %96.1 -> BB139 (if true) | BB140 (if false)
BB34   <- [33]
  void                    Nop                !     
  val?-           %34.1 = %131.0
  goto BB35
BB138   <- [135]
  prom-           %138.0 = MkArg                    %131.0, implicitGeneric[0x55bbe62aa490]_p36 (!refl), e129.0
  val?~           %138.1 = CastType                 up %138.0
  fs              %138.2 = FrameState         R     0x55bbe644d440+649: [], env=e0.2
  fs              %138.3 = FrameState         R     0x55bbe460fdc0+135: [%131.1], env=e129.0, next=%138.2
  env             e138.4 = (MkEnv)            l     x=%138.1, parent=R_BaseNamespace, context 0
  fs              %138.5 = FrameState         R     0x55bbe3fa9250+240: [%133.0, %135.0], env=e138.4, next=%138.3
  void                    Deopt              !v    %138.5, DeadBranchReached@0x55bbe65e81a8[Test#7], %135.1   !
BB137   <- [135]
  lgl$-           %137.0 = Eq                 d     %133.0, special, elided
  lgl$#-          %137.1 = CheckTrueFalse     e     %137.0
  void                    Branch                   %137.1 -> BB109 (if true) | BB104 (if false)
BB139   <- [96]
  val?            %139.0 = StaticCall         !v    new[0x55bbe4813f80]("derivedDefaultMethod") { 0 } e129.0   <cls>
  void                    StVar              lW    value, %139.0, e129.0
  (cls|spec|blt)  %139.2 = LdFun              !v    <-, <0x55bbe1e14da8>, e129.0
  prom-           %139.3 = MkArg                    unboundValue, implicitGeneric[0x55bbe62aa490]_p38, e129.0
  prom-           %139.4 = MkArg                    unboundValue, implicitGeneric[0x55bbe62aa490]_p41, e129.0
  val?            %139.5 = Call               !v    %139.2(%139.3, %139.4) e129.0
  (cls|spec|blt)  %139.6 = LdFun              !v    <-, <0x55bbe1e14da8>, e129.0
  prom-           %139.7 = MkArg                    unboundValue, implicitGeneric[0x55bbe62aa490]_p42, e129.0
  prom-           %139.8 = MkArg                    unboundValue, implicitGeneric[0x55bbe62aa490]_p45, e129.0
  val?            %139.9 = Call               !v    %139.6(%139.7, %139.8) e129.0
  val?^ | miss    %139.10 = LdVar              eR    value, e129.0
  val?            %139.11 = Force!<value>      !v    %139.10, e129.0   <cls>
  val?            %139.12 = %139.11
  goto BB35
BB140   <- [96]
  fs              %140.0 = FrameState         R     0x55bbe644d440+649: [], env=e0.2
  fs              %140.1 = FrameState         R     0x55bbe460fdc0+177: [nil], env=e129.0, next=%140.0
  void                    Deopt              !v    %140.1, CallTarget@0x55bbe72bad88[Call#2], %96.0   !
BB35   <- [34, 139]
  val?            %35.0 = Phi                      %34.1:BB34, %139.12:BB139
  val?            %35.1 = %35.0
  val?            %35.2 = PopContext         C     %35.1, %127.1   <cls>
  void                    StVar              lW    fdefault, %35.2, e0.2
  val?^ | miss    %35.4 = LdVar              eR    isBaseFun, e0.2
  lgl$#-          %35.5 = Identical                %35.4, function(fun) <(rir::DispatchTable*)0x55bbe57d|...
  void                    Branch                   %35.5 -> BB141 (if true) | BB142 (if false)
BB109   <- [137]
  void                    Nop                !     
  goto BB108
BB104   <- [137]
  lgl$-           %104.0 = Eq                 d     %133.0, builtin, elided
  lgl$#-          %104.1 = CheckTrueFalse     e     %104.0
  void                    Branch                   %104.1 -> BB107 (if true) | BB105 (if false)
BB141   <- [35]
  prom-           %141.0 = MkArg                    unboundValue, implicitGeneric[0x55bbe62aa490]_p9 (!refl), e0.2
  val?            %141.1 = StaticCall         !v    isBaseFun[0x55bbe5196000](%141.0) e0.2   <lgl$->
  lgl$#-          %141.2 = IsType                   %141.1 isA lgl$-
  void                    Branch                   %141.2 -> BB143 (if true) | BB144 (if false)
BB142   <- [35]
  fs              %142.0 = FrameState         R     0x55bbe644d440+663: [], env=e0.2
  void                    Deopt              !v    %142.0, CallTarget@0x55bbe4f750d0[Call#17], %35.4   !
BB108   <- [109, 107]
  void                    Nop                !     
  lgl$#-          %108.1 = true
  goto BB106
BB107   <- [104]
  void                    Nop                !     
  goto BB108
BB105   <- [104]
  void                    Nop                !     
  lgl$#-          %105.1 = false
  goto BB106
BB143   <- [141]
  lgl$-           %143.0 = CastType           d     dn %141.1
  lgl$#-          %143.1 = CheckTrueFalse     e     %143.0
  void                    Branch                   %143.1 -> BB41 (if true) | BB40 (if false)
BB144   <- [141]
  void                    Nop                !     
  val?            %144.1 = %141.1
  dr              %144.2 = Typecheck@0x55bbe4f750d0[Type#34]
  goto BB38
BB106   <- [105, 108]
  lgl$#-          %106.0 = Phi                      %105.1:BB105, %108.1:BB108
  lgl$#-          %106.1 = %106.0
  lgl$#-          %106.2 = Not                d     %106.1, elided
  lgl$-           %106.3 = LAnd                     %131.1, %106.2
  lgl$-           %106.4 = %106.3
  goto BB33
BB41   <- [143]
  val?^ | miss    %41.0 = LdVar              eR    genericForBasic, e0.2
  lgl$#-          %41.1 = Identical                %41.0, function(f, where=topenv(parent.frame()), must|...
  void                    Branch                   %41.1 -> BB145 (if true) | BB146 (if false)
BB40   <- [143]
  (cls|spec|blt)  %40.0 = LdFun              !v    getPackageName, e0.2
  fs              %40.1 = FrameState         R     0x55bbe644d440+711: [%40.0], env=e0.2
  void                    Deopt              !v    %40.1, DeadCall@0x55bbe4f750d0[Call#18], %40.0   !
BB38   <- [144, 146]
  val?^ | miss    %38.0 = Phi                      %144.1:BB144, %146.1:BB146
  val?^ | miss    %38.1 = %38.0
  dr              %38.2 = Phi                      %144.2:BB144, %146.2:BB146
  dr              %38.3 = %38.2
  fs              %38.4 = FrameState         R     0x55bbe644d440+695: [%141.1], env=e0.2
  void                    Deopt              !v    %38.4, %38.3, %38.1   !
BB145   <- [41]
  prom-           %145.0 = MkArg                    unboundValue, implicitGeneric[0x55bbe62aa490]_p10, e0.2
  val?            %145.1 = StaticCall         !v    genericForBasic[0x55bbe5259e70](%145.0) e0.2   <nil->
  void                    StVar              lW    value, %145.1, e0.2
  lgl$#-          %145.3 = IsType                   %145.1 isA val?-
  val?^ | miss    %145.4 = LdVar              eR    is.function, e0.2
  lgl$#-          %145.5 = Identical                <blt is.function>, %145.4   <true>
  void                    Branch                   %145.5 -> BB147 (if true) | BB148 (if false)
BB146   <- [41]
  void                    Nop                !     
  val?^ | miss    %146.1 = %41.0
  dr              %146.2 = CallTarget@0x55bbe4f750d0[Call#19]
  goto BB38
BB147   <- [145]
  val             %147.0 = ChkMissing         e     %145.1
  void                    Branch                   %145.3 -> BB149 (if true) | BB150 (if false)
BB148   <- [145]
  void                    Nop                !     
  lgl$#-          %148.1 = %145.5
  dr              %148.2 = DeadBranchReached@0x55bbe4f750d0[Test#1]
  goto BB42
BB149   <- [147]
  val?-           %149.0 = CastType           d     dn %145.1   <nil->
  lgl$#-          %149.1 = CallSafeBuiltin    wed   is.function(%149.0)    <lgl$->
  void                    Branch                   %149.1 -> BB91 (if true) | BB44 (if false)
BB150   <- [147]
  void                    Nop                !     
  val?            %150.1 = %145.1
  dr              %150.2 = Typecheck@0x55bbe4f750d0[Type#38]
  goto BB42
BB42   <- [148, 150]
  val?^ | miss    %42.0 = Phi                      %148.1:BB148, %150.1:BB150
  val?^ | miss    %42.1 = %42.0
  dr              %42.2 = Phi                      %148.2:BB148, %150.2:BB150
  dr              %42.3 = %42.2
  fs              %42.4 = FrameState         R     0x55bbe644d440+803: [], env=e0.2
  void                    Deopt              !v    %42.4, %42.3, %42.1   !
BB91   <- [149]
  lgl$-           %91.0 = Missing            eR    generic, e0.2
  lgl$-           %91.1 = Not                d     %91.0, elided
  lgl$-           %91.2 = AsLogical                %91.1
  lgl$#-          %91.3 = Identical                %91.2, false
  void                    Branch                   %91.3 -> BB93 (if true) | BB92 (if false)
BB44   <- [149]
  void                    StVar              lW    package, "base", e0.2
  val?^ | miss    %44.1 = LdVar              eR    .getImplicitGroup, e0.2
  lgl$#-          %44.2 = Identical                %44.1, function(name, where) <(rir::DispatchTable*)0x|...
  void                    Branch                   %44.2 -> BB151 (if true) | BB152 (if false)
BB93   <- [91]
  lgl$#-          %93.0 = CheckTrueFalse     e     %91.2
  void                    Branch                   %93.0 -> BB95 (if true) | BB94 (if false)
BB92   <- [91]
  (cls|spec|blt)  %92.0 = LdFun              !v    identical, e0.2
  fs              %92.1 = FrameState         R     0x55bbe644d440+929: [%91.2, %92.0], env=e0.2
  void                    Deopt              !v    %92.1, DeadCall@0x55bbe4f750d0[Call#21], %92.0   !
BB151   <- [44]
  prom-           %151.0 = MkArg                    unboundValue, implicitGeneric[0x55bbe62aa490]_p11, e0.2
  prom-           %151.1 = MkArg                    unboundValue, implicitGeneric[0x55bbe62aa490]_p12, e0.2
  val?^           %151.2 = CastType                 up %151.1
  val?^           %151.3 = CastType                 up %151.0
  val?^ | miss    %151.4 = LdVar              eR    identical, e0.2
  lgl$#-          %151.5 = Identical                %151.4, function(x, y, num.eq=TRUE, single.NA=TRUE, at|...
  void                    Branch                   %151.5 -> BB153 (if true) | BB154 (if false)
BB152   <- [44]
  void                    Nop                !     
  val?^ | miss    %152.1 = %44.1
  dr              %152.2 = CallTarget@0x55bbe4f750d0[Call#26]
  goto BB45
BB95   <- [93]
  (cls|spec|blt)  %95.0 = LdFun              !v    stop, e0.2
  fs              %95.1 = FrameState         R     0x55bbe644d440+985: [%95.0], env=e0.2
  void                    Deopt              !v    %95.1, DeadCall@0x55bbe4f750d0[Call#22], %95.0   !
BB94   <- [93]
  void                    StVar              lW    generic, %149.0, e0.2
  (cls|spec|blt)  %94.1 = LdFun              !v    @, e0.2
  fs              %94.2 = FrameState         R     0x55bbe644d440+1054: [%94.1], env=e0.2
  void                    Deopt              !v    %94.2, DeadCall@0x55bbe4f750d0[Call#25], %94.1   !
BB153   <- [151]
  prom-           %153.0 = MkArg                    unboundValue, implicitGeneric[0x55bbe62aa490]_p13 (!refl), e0.2
  ct              %153.1 = PushContext        lCL   %153.0, "base", identical(package, "base"), function(x, y, num.eq=TRUE, single.NA=TRUE, at|..., e0.2
  val?^           %153.2 = CastType                 up %153.0
  env             e153.3 = MkEnv              l     x=%153.2, y="base", num.eq(miss)=true, single.NA(miss)=true, attrib.as.set(miss)=true, ignore.bytecode(miss)=true, ignore.environment(miss)=false, ignore.srcref(miss)=true, parent=R_BaseNamespace, context 1
  env             e153.4 = (MkEnv)            l     name=%151.3, where=%151.2, tbl=unboundValue, r=unboundValue, parent=<env 0x55bbe2427378>, context 1
  val?            %153.5 = CallBuiltin        !v    identical("base", "base", true, true, true, true, false, true) e153.3
  val?            %153.6 = PopContext         C     %153.5, %153.1   <lgl$->
  lgl$#-          %153.7 = IsType                   %153.6 isA lgl$-
  void                    Branch                   %153.7 -> BB155 (if true) | BB156 (if false)
BB154   <- [151]
  void                    Nop                !     
  val?^ | miss    %154.1 = %151.4
  dr              %154.2 = CallTarget@0x55bbe4f750d0[Call#27]
  goto BB45
BB45   <- [152, 154]
  val?^ | miss    %45.0 = Phi                      %152.1:BB152, %154.1:BB154
  val?^ | miss    %45.1 = %45.0
  dr              %45.2 = Phi                      %152.2:BB152, %154.2:BB154
  dr              %45.3 = %45.2
  fs              %45.4 = FrameState         R     0x55bbe644d440+1115: [], env=e0.2
  void                    Deopt              !v    %45.4, %45.3, %45.1   !
BB155   <- [153]
  lgl$-           %155.0 = CastType           d     dn %153.6
  lgl$#-          %155.1 = CheckTrueFalse     e     %155.0
  void                    Branch                   %155.1 -> BB90 (if true) | BB49 (if false)
BB156   <- [153]
  void                    Nop                !     
  val?            %156.1 = %153.6
  dr              %156.2 = Typecheck@0x55bbe4f750d0[Type#54]
  goto BB47
BB90   <- [155]
  val?^ | miss    %90.0 = LdVar              eR    .methodsNamespace, e0.2
  lgl$#-          %90.1 = IsType                   %90.0 isA val?~- | miss
  void                    Branch                   %90.1 -> BB157 (if true) | BB158 (if false)
BB49   <- [155]
  (cls|spec|blt)  %49.0 = LdFun              !v    environment, e0.2
  prom-           %49.1 = MkArg                    unboundValue, implicitGeneric[0x55bbe62aa490]_p14, e0.2
  val?            %49.2 = Call               !v    %49.0(%49.1) e0.2   <val?_>
  val?            %49.3 = %49.2
  goto BB50
BB47   <- [156, 158]
  val?^ | miss    %47.0 = Phi                      %156.1:BB156, %158.1:BB158
  val?^ | miss    %47.1 = %47.0
  dr              %47.2 = Phi                      %156.2:BB156, %158.2:BB158
  dr              %47.3 = %47.2
  fs              %47.4 = FrameState         R     0x55bbe644d440+1152: [], env=e0.2
  fs              %47.5 = FrameState         R     0x55bbe6ababa0+9: [], env=e153.4, next=%47.4
  fs              %47.6 = FrameState         R     0x55bbe61bcb10+37(pr): [%153.6], env=e0.2, next=%47.5
  void                    Deopt              !v    %47.6, %47.3, %47.1   !
BB157   <- [90]
  val?~- | miss   %157.0 = CastType           d     dn %90.0
  val?-           %157.1 = Force!<value>            %157.0,    <env->
  val?-           %157.2 = %157.1
  goto BB50
BB158   <- [90]
  void                    Nop                !     
  val?^ | miss    %158.1 = %90.0
  dr              %158.2 = Typecheck@0x55bbe4f750d0[Type#57]
  goto BB47
BB50   <- [49, 157]
  val?            %50.0 = Phi                      %49.3:BB49, %157.2:BB157   <env->
  val?            %50.1 = %50.0
  lgl$#-          %50.2 = IsType                   %50.1 isA val+   <true>
  prom-           %50.3 = MkArg                    %50.1, implicitGeneric[0x55bbe62aa490]_p12 (!refl), e0.2
  val?~           %50.4 = CastType                 up %50.3
  void                    StArg              lWd   where, %50.4, e153.4
  lgl$#-          %50.6 = IsEnvStub          R     , e153.4
  void                    Branch                   %50.6 -> BB159 (if true) | BB160 (if false)
BB159   <- [50]
  void                    Branch                   %50.2 -> BB161 (if true) | BB162 (if false)
BB160   <- [50]
  void                    Nop                !     
  env             e160.1 = e153.4
  dr              %160.2 = EnvStubMaterialized@0x55bbe833b3f8[Call#unknown]
  goto BB51
BB161   <- [159]
  val?^ | miss    %161.0 = LdVar              eRd   .ImplicitGroupMetaName, <env 0x55bbe2427378>
  val?            %161.1 = Force!<wrapped>    !vL   %161.0, e153.4   <str$->
  lgl$#-          %161.2 = IsType                   %161.1 isA val?-
  lgl$#-          %161.3 = IsEnvStub          R     , e153.4
  void                    Branch                   %161.3 -> BB163 (if true) | BB164 (if false)
BB162   <- [159]
  void                    Nop                !     
  lgl$#-          %162.1 = %50.2
  dr              %162.2 = DeadBranchReached@0x55bbe833b3f8[Test#0]
  goto BB51
BB51   <- [160, 162]
  val?^ | miss    %51.0 = Phi                      e160.1:BB160, %162.1:BB162
  val?^ | miss    %51.1 = %51.0
  dr              %51.2 = Phi                      %160.2:BB160, %162.2:BB162
  dr              %51.3 = %51.2
  fs              %51.4 = FrameState         R     0x55bbe644d440+1152: [], env=e0.2
  fs              %51.5 = FrameState         R     0x55bbe6ababa0+9: [%50.1], env=e153.4, next=%51.4
  void                    Deopt              !v    %51.5, %51.3, %51.1   !
BB163   <- [161]
  lgl$#-          %163.0 = IsType                   %50.1 isA val?-
  void                    Branch                   %163.0 -> BB165 (if true) | BB166 (if false)
BB164   <- [161]
  void                    Nop                !     
  env             e164.1 = e153.4
  dr              %164.2 = EnvStubMaterialized@0x55bbe833b3f8[Call#unknown]
  goto BB53
BB165   <- [163]
  val?-           %165.0 = CastType           d     dn %50.1   <env->
  void                    Branch                   %161.2 -> BB167 (if true) | BB168 (if false)
BB166   <- [163]
  void                    Nop                !     
  val?            %166.1 = %50.1
  dr              %166.2 = Typecheck@0x55bbe833b3f8[Type#0]
  goto BB53
BB53   <- [164, 166, 168]
  val?            %53.0 = Phi                      e164.1:BB164, %166.1:BB166, %168.1:BB168
  val?            %53.1 = %53.0
  dr              %53.2 = Phi                      %164.2:BB164, %166.2:BB166, %168.2:BB168
  dr              %53.3 = %53.2
  fs              %53.4 = FrameState         R     0x55bbe644d440+1152: [], env=e0.2
  fs              %53.5 = FrameState         R     0x55bbe6ababa0+54: [%50.1, %161.1], env=e153.4, next=%53.4
  void                    Deopt              !v    %53.5, %53.3, %53.1   !
BB167   <- [165]
  val?-           %167.0 = CastType           d     dn %161.1   <str$->
  val?            %167.1 = Extract2_1D        wed   %165.0, %167.0, elided   <env->
  lgl$-           %167.2 = Is                       %167.1, NULL
  void                    StVar              lWd   tbl, %167.1, e153.4
  lgl$-           %167.4 = Not                d     %167.2, elided
  lgl$#-          %167.5 = CheckTrueFalse     e     %167.4
  void                    Branch                   %167.5 -> BB85 (if true) | BB57 (if false)
BB168   <- [165]
  void                    Nop                !     
  val?            %168.1 = %161.1
  dr              %168.2 = Typecheck@0x55bbe833b3f8[Type#2]
  goto BB53
BB85   <- [167]
  val             %85.0 = ChkMissing         e     %167.1
  lgl$#-          %85.1 = IsType                   %167.1 isA val+   <true>
  void                    Branch                   %85.1 -> BB169 (if true) | BB170 (if false)
BB57   <- [167]
  void                    Nop                !     
  goto BB58
BB169   <- [85]
  val?            %169.0 = Force!<lazy>       !vL   %151.3, e153.4   <str$->
  lgl$#-          %169.1 = IsType                   %169.0 isA val?-
  lgl$#-          %169.2 = IsEnvStub          R     , e153.4
  void                    Branch                   %169.2 -> BB171 (if true) | BB172 (if false)
BB170   <- [85]
  fs              %170.0 = FrameState         R     0x55bbe644d440+1152: [], env=e0.2
  fs              %170.1 = FrameState         R     0x55bbe6ababa0+77: [%167.1], env=e153.4, next=%170.0
  void                    Deopt              !v    %170.1, DeadBranchReached@0x55bbe833b3f8[Test#1], %85.1   !
BB58   <- [57, 88]
  val?^ | miss    %58.0 = LdVar              eRd   list, <env 0x55bbe2427378>
  lgl$#-          %58.1 = Identical                <blt list>, %58.0   <true>
  void                    Branch                   %58.1 -> BB177 (if true) | BB178 (if false)
BB171   <- [169]
  lgl$#-          %171.0 = IsType                   %167.1 isA val?-
  void                    Branch                   %171.0 -> BB173 (if true) | BB174 (if false)
BB172   <- [169]
  void                    Nop                !     
  env             e172.1 = e153.4
  dr              %172.2 = EnvStubMaterialized@0x55bbe833b3f8[Call#unknown]
  goto BB86
BB177   <- [58]
  void                    Nop                !     
  vec#-           %177.1 = list()
  goto BB61
BB178   <- [58]
  fs              %178.0 = FrameState         R     0x55bbe644d440+1152: [], env=e0.2
  fs              %178.1 = FrameState         R     0x55bbe6ababa0+203: [], env=e153.4, next=%178.0
  void                    Deopt              !v    %178.1, DeadBranchReached@0x55bbe833b3f8[Test#2], %58.1   !
BB173   <- [171]
  val?-           %173.0 = CastType           d     dn %167.1   <env->
  void                    Branch                   %169.1 -> BB175 (if true) | BB176 (if false)
BB174   <- [171]
  void                    Nop                !     
  val?            %174.1 = %167.1
  dr              %174.2 = Typecheck@0x55bbe833b3f8[Type#3]
  goto BB86
BB86   <- [172, 174, 176]
  val?^ | miss    %86.0 = Phi                      e172.1:BB172, %174.1:BB174, %176.1:BB176
  val?^ | miss    %86.1 = %86.0
  dr              %86.2 = Phi                      %172.2:BB172, %174.2:BB174, %176.2:BB176
  dr              %86.3 = %86.2
  fs              %86.4 = FrameState         R     0x55bbe644d440+1152: [], env=e0.2
  fs              %86.5 = FrameState         R     0x55bbe6ababa0+148: [%167.1, %169.0], env=e153.4, next=%86.4
  void                    Deopt              !v    %86.5, %86.3, %86.1   !
BB61   <- [89, 177]
  val?            %61.0 = Phi                      %177.1:BB177, %89.1:BB89   <vec->
  val?            %61.1 = %61.0
  void                    StVar              lW    group, %61.1, e0.2
  lgl$-           %61.3 = Missing            eR    generic, e0.2
  lgl$#-          %61.4 = CheckTrueFalse     e     %61.3
  void                    Branch                   %61.4 -> BB65 (if true) | BB64 (if false)
BB175   <- [173]
  val?-           %175.0 = CastType           d     dn %169.0   <str$->
  val?            %175.1 = Extract2_1D        wed   %173.0, %175.0, elided   <nil->
  lgl$-           %175.2 = Is                       %175.1, NULL
  void                    StVar              lWd   r, %175.1, e153.4
  lgl$-           %175.4 = Not                d     %175.2, elided
  lgl$#-          %175.5 = CheckTrueFalse     e     %175.4
  void                    Branch                   %175.5 -> BB89 (if true) | BB88 (if false)
BB176   <- [173]
  void                    Nop                !     
  val?            %176.1 = %169.0
  dr              %176.2 = Typecheck@0x55bbe833b3f8[Type#6]
  goto BB86
BB65   <- [61]
  val?^ | miss    %65.0 = LdVar              eR    .getImplicitGeneric, e0.2
  lgl$#-          %65.1 = Identical                %65.0, function(name, where, pkg="") <(rir::DispatchT|...
  void                    Branch                   %65.1 -> BB179 (if true) | BB180 (if false)
BB64   <- [61]
  (cls|spec|blt)  %64.0 = LdFun              !v    makeGeneric, e0.2
  fs              %64.1 = FrameState         R     0x55bbe644d440+1183: [%64.0], env=e0.2
  void                    Deopt              !v    %64.1, DeadCall@0x55bbe4f750d0[Call#29], %64.0   !
BB89   <- [175]
  val             %89.0 = ChkMissing         e     %175.1
  val?            %89.1 = %175.1
  goto BB61
BB88   <- [175]
  void                    Nop                !     
  goto BB58
BB179   <- [65]
  prom-           %179.0 = MkArg                    unboundValue, implicitGeneric[0x55bbe62aa490]_p15, e0.2
  prom-           %179.1 = MkArg                    unboundValue, implicitGeneric[0x55bbe62aa490]_p16, e0.2
  prom-           %179.2 = MkArg                    unboundValue, implicitGeneric[0x55bbe62aa490]_p17, e0.2
  ct              %179.3 = PushContext        lCL   %179.0, %179.1, %179.2, .getImplicitGeneric(name, env, package), function(name, where, pkg="") <(rir::DispatchT|..., e0.2
  val?^           %179.4 = CastType                 up %179.2
  val?^           %179.5 = CastType                 up %179.1
  val?^           %179.6 = CastType                 up %179.0
  val?^ | miss    %179.7 = LdVar              eR    .getImplicitGenericFromCache, <env 0x55bbe2427378>
  lgl$#-          %179.8 = Identical                %179.7, function(name, where, pkg="") <(rir::DispatchT|...
  void                    Branch                   %179.8 -> BB181 (if true) | BB182 (if false)
BB180   <- [65]
  fs              %180.0 = FrameState         R     0x55bbe644d440+1166: [], env=e0.2
  void                    Deopt              !v    %180.0, CallTarget@0x55bbe4f750d0[Call#31], %65.0   !
BB181   <- [179]
  env             e181.0 = MkEnv              l     name=%179.6, where=%179.5, pkg=%179.4, parent=<env 0x55bbe2427378>, context 1
  prom-           %181.1 = MkArg                    unboundValue, implicitGeneric[0x55bbe62aa490]_p24, e181.0
  prom-           %181.2 = MkArg                    unboundValue, implicitGeneric[0x55bbe62aa490]_p25, e181.0
  prom-           %181.3 = MkArg                    unboundValue, implicitGeneric[0x55bbe62aa490]_p26, e181.0
  ct              %181.4 = PushContext        lCL   %181.1, %181.2, %181.3, .getImplicitGenericFromCache(name, where, pkg), function(name, where, pkg="") <(rir::DispatchT|..., e181.0
  val?^           %181.5 = CastType                 up %181.3
  val?^           %181.6 = CastType                 up %181.2
  val?^           %181.7 = CastType                 up %181.1
  val?^ | miss    %181.8 = LdVar              eR    .getGenericFromCacheTable, <env 0x55bbe2427378>
  lgl$#-          %181.9 = Identical                %181.8, function(name, where, pkg="", table) <(rir::Di|...
  void                    Branch                   %181.9 -> BB183 (if true) | BB184 (if false)
BB182   <- [179]
  fs              %182.0 = FrameState         R     0x55bbe644d440+1349: [], env=e0.2
  env             e182.1 = (MkEnv)            l     name=%179.6, where=%179.5, pkg=%179.4, parent=<env 0x55bbe2427378>, context 1
  fs              %182.2 = FrameState         R     0x55bbe2975060+0: [], env=e182.1, next=%182.0
  void                    Deopt              !v    %182.2, CallTarget@0x55bbe7498190[Call#0], %179.7   !
BB183   <- [181]
  env             e183.0 = MkEnv              l     name=%181.7, where=%181.6, pkg=%181.5, parent=<env 0x55bbe2427378>, context 1
  prom-           %183.1 = MkArg                    unboundValue, implicitGeneric[0x55bbe62aa490]_p30, e183.0
  prom-           %183.2 = MkArg                    unboundValue, implicitGeneric[0x55bbe62aa490]_p31, e183.0
  prom-           %183.3 = MkArg                    unboundValue, implicitGeneric[0x55bbe62aa490]_p32, e183.0
  prom-           %183.4 = MkArg                    unboundValue, implicitGeneric[0x55bbe62aa490]_p33, e183.0
  val?            %183.5 = StaticCall         !v    .getGenericFromCacheTable[0x55bbe35372f0](%183.1, %183.2, %183.3, %183.4) e183.0   <nil->
  val?            %183.6 = PopContext         C     %183.5, %181.4   <nil->
  lgl$-           %183.7 = Is                       %183.6, NULL
  lgl$-           %183.8 = AsLogical                %183.7
  lgl$#-          %183.9 = Identical                %183.8, false
  void                    StVar              lW    value, %183.6, e181.0
  val             %183.11 = ChkMissing         e     %183.6
  void                    Branch                   %183.9 -> BB84 (if true) | BB70 (if false)
BB184   <- [181]
  fs              %184.0 = FrameState         R     0x55bbe644d440+1349: [], env=e0.2
  fs              %184.1 = FrameState         R     0x55bbe2975060+42: [], env=e181.0, next=%184.0
  env             e184.2 = (MkEnv)            l     name=%181.7, where=%181.6, pkg=%181.5, parent=<env 0x55bbe2427378>, context 1
  fs              %184.3 = FrameState         R     0x55bbe6918c40+0: [], env=e184.2, next=%184.1
  void                    Deopt              !v    %184.3, CallTarget@0x55bbe43480e0[Call#0], %181.8   !
BB84   <- [183]
  void                    Nop                !     
  lgl$-           %84.1 = %183.8
  goto BB75
BB70   <- [183]
  val?^ | miss    %70.0 = LdVar              eR    where, e181.0
  val?            %70.1 = Force!<lazy>       !v    %70.0, e181.0   <env->
  lgl$#-          %70.2 = IsType                   %70.1 isA val+   <true>
  void                    Branch                   %70.2 -> BB185 (if true) | BB186 (if false)
BB75   <- [84, 189]
  lgl$-           %75.0 = Phi                      %189.7:BB189, %84.1:BB84
  lgl$-           %75.1 = %75.0
  lgl$#-          %75.2 = CheckTrueFalse     e     %75.1
  void                    Branch                   %75.2 -> BB83 (if true) | BB76 (if false)
BB185   <- [70]
  val?^ | miss    %185.0 = LdVar              eR    .ImplicitGenericsMetaName, e181.0
  val?            %185.1 = Force!<wrapped>    !v    %185.0, e181.0   <str$->
  lgl$#-          %185.2 = IsType                   %185.1 isA val?-
  lgl$#-          %185.3 = IsType                   %70.1 isA val?-
  void                    Branch                   %185.3 -> BB187 (if true) | BB188 (if false)
BB186   <- [70]
  fs              %186.0 = FrameState         R     0x55bbe644d440+1349: [], env=e0.2
  fs              %186.1 = FrameState         R     0x55bbe2975060+91: [%183.8, %70.1], env=e181.0, next=%186.0
  void                    Deopt              !v    %186.1, DeadBranchReached@0x55bbe7498190[Test#0], %70.2   !
BB83   <- [75]
  fs              %83.0 = FrameState         R     0x55bbe644d440+1349: [], env=e0.2
  (cls|spec|blt)  %83.1 = LdFun              !v    .getGenericFromCacheTable, e181.0
  fs              %83.2 = FrameState         R     0x55bbe2975060+197: [%83.1], env=e181.0, next=%83.0
  void                    Deopt              !v    %83.2, DeadCall@0x55bbe7498190[Call#1], %83.1   !
BB76   <- [75]
  val?^ | miss    %76.0 = LdVar              eR    value, e181.0
  val?            %76.1 = Force!<value>      !v    %76.0, e181.0   <(nil|cls)>
  val?            %76.2 = PopContext         C     %76.1, %179.3   <(nil|cls)>
  lgl$-           %76.3 = Is                       %76.2, NULL
  void                    StVar              lW    generic, %76.2, e0.2
  val             %76.5 = ChkMissing         e     %76.2
  lgl$#-          %76.6 = CheckTrueFalse     e     %76.3
  void                    Branch                   %76.6 -> BB78 (if true) | BB77 (if false)
BB187   <- [185]
  val?-           %187.0 = CastType           d     dn %70.1   <env->
  void                    Branch                   %185.2 -> BB189 (if true) | BB190 (if false)
BB188   <- [185]
  void                    Nop                !     
  val?            %188.1 = %70.1
  dr              %188.2 = Typecheck@0x55bbe7498190[Type#5]
  goto BB73
BB78   <- [76]
  (cls|spec|blt)  %78.0 = LdFun              !v    makeGeneric, <0x55bbe7e65db0>, e0.2
  prom-           %78.1 = MkArg                    unboundValue, implicitGeneric[0x55bbe62aa490]_p18, e0.2
  prom-           %78.2 = MkArg                    unboundValue, implicitGeneric[0x55bbe62aa490]_p19, e0.2
  prom-           %78.3 = MkArg                    unboundValue, implicitGeneric[0x55bbe62aa490]_p20, e0.2
  prom-           %78.4 = MkArg                    unboundValue, implicitGeneric[0x55bbe62aa490]_p21, e0.2
  val?            %78.5 = NamedCall          !v    %78.0(%78.1, fdefault=%78.2, package=%78.3, group=%78.4) e0.2   <cls>
  void                    StVar              lW    generic, %78.5, e0.2
  val?^ | miss    %78.7 = LdVar              eR    .cacheImplicitGeneric, e0.2
  lgl$#-          %78.8 = Identical                %78.7, function(name, def) <(rir::DispatchTable*)0x55|...
  void                    Branch                   %78.8 -> BB191 (if true) | BB192 (if false)
BB77   <- [76]
  void                    Nop                !     
  goto BB20
BB189   <- [187]
  val?-           %189.0 = CastType           d     dn %185.1   <str$->
  val?            %189.1 = Extract2_1D        wed   %187.0, %189.0, elided   <nil->
  lgl$-           %189.2 = Is                       %189.1, NULL
  void                    StVar              lW    tbl, %189.1, e181.0
  lgl$-           %189.4 = Not                d     %189.2, elided
  lgl$-           %189.5 = AsLogical                %189.4
  lgl$-           %189.6 = LAnd                     %183.8, %189.5
  lgl$-           %189.7 = %189.6
  goto BB75
BB190   <- [187]
  void                    Nop                !     
  val?            %190.1 = %185.1
  dr              %190.2 = Typecheck@0x55bbe7498190[Type#7]
  goto BB73
BB73   <- [188, 190]
  val?^ | miss    %73.0 = Phi                      %188.1:BB188, %190.1:BB190
  val?^ | miss    %73.1 = %73.0
  dr              %73.2 = Phi                      %188.2:BB188, %190.2:BB190
  dr              %73.3 = %73.2
  fs              %73.4 = FrameState         R     0x55bbe644d440+1349: [], env=e0.2
  fs              %73.5 = FrameState         R     0x55bbe2975060+136: [%183.8, %70.1, %185.1], env=e181.0, next=%73.4
  void                    Deopt              !v    %73.5, %73.3, %73.1   !
BB191   <- [78]
  prom-           %191.0 = MkArg                    unboundValue, implicitGeneric[0x55bbe62aa490]_p22, e0.2
  prom-           %191.1 = MkArg                    unboundValue, implicitGeneric[0x55bbe62aa490]_p23 (!refl), e0.2
  ct              %191.2 = PushContext        lCL   %191.0, %191.1, .cacheImplicitGeneric(name, generic), function(name, def) <(rir::DispatchTable*)0x55|..., e0.2
  val?^           %191.3 = CastType                 up %191.1
  val?^           %191.4 = CastType                 up %191.0
  val?^ | miss    %191.5 = LdVar              eR    .cacheGenericTable, <env 0x55bbe2427378>
  lgl$#-          %191.6 = Identical                %191.5, function(name, def, table) <(rir::DispatchTabl|...
  void                    Branch                   %191.6 -> BB193 (if true) | BB194 (if false)
BB192   <- [78]
  fs              %192.0 = FrameState         R     0x55bbe644d440+1470: [], env=e0.2
  void                    Deopt              !v    %192.0, CallTarget@0x55bbe4f750d0[Call#33], %78.7   !
BB193   <- [191]
  env             e193.0 = MkEnv              l     name=%191.4, def=%191.3, parent=<env 0x55bbe2427378>, context 1
  prom-           %193.1 = MkArg                    unboundValue, implicitGeneric[0x55bbe62aa490]_p27, e193.0
  prom-           %193.2 = MkArg                    unboundValue, implicitGeneric[0x55bbe62aa490]_p28, e193.0
  prom-           %193.3 = MkArg                    unboundValue, implicitGeneric[0x55bbe62aa490]_p29, e193.0
  val?            %193.4 = StaticCall         !v    .cacheGenericTable[0x55bbe2bdda00](%193.1, %193.2, %193.3) e193.0   <cls>
  val?            %193.5 = PopContext         C     %193.4, %191.2
  goto BB20
BB194   <- [191]
  fs              %194.0 = FrameState         R     0x55bbe644d440+1507: [], env=e0.2
  env             e194.1 = (MkEnv)            l     name=%191.4, def=%191.3, parent=<env 0x55bbe2427378>, context 1
  fs              %194.2 = FrameState         R     0x55bbe6bfa640+0: [], env=e194.1, next=%194.0
  void                    Deopt              !v    %194.2, CallTarget@0x55bbe6c79018[Call#0], %191.5   !
Prom 0:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     getGeneric, e0.0
  prom-           %0.2  = MkArg                    unboundValue, implicitGeneric[0x55bbe62aa490]_p1, e0.0
  prom-           %0.3  = MkArg                    unboundValue, implicitGeneric[0x55bbe62aa490]_p2, e0.0
  val?            %0.4  = NamedCall          !     %0.1(%0.2, where=%0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    name, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 3:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    name, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 4:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 5:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    name, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 6:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 7:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fdefault, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls->
  void                    Return             l     %0.3
Prom 8:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fdefault, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls->
  void                    Return             l     %0.3
Prom 9:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fdefault, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 10:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    name, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 11:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    name, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 12:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     identical, <0x55bbe2102820>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, implicitGeneric[0x55bbe62aa490]_p13, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2, "base") e0.0   <lgl$->
  lgl$#-          %0.4  = CheckTrueFalse     we    %0.3
  void                    Branch                   %0.4 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    .methodsNamespace, e0.0
  void                    Visible            v     
  val?            %2.2  = Force<value>       !     %2.0, e0.0   <env->
  val?            %2.3  = %2.2
  goto BB3
BB4   <- [0]
  (cls|spec|blt)  %4.0  = LdFun              !     environment, e0.0
  prom-           %4.1  = MkArg                    unboundValue, implicitGeneric[0x55bbe62aa490]_p14, e0.0
  val?            %4.2  = Call               !     %4.0(%4.1) e0.0   <val?_>
  val?            %4.3  = %4.2
  goto BB3
BB3   <- [2, 4]
  val?            %3.0  = Phi                      %4.3:BB4, %2.3:BB2
  val?            %3.1  = %3.0
  void                    Return             l     %3.1
Prom 13:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    package, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 14:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fdefault, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 15:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    name, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 16:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    env, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 17:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    package, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 18:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    name, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 19:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fdefault, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 20:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    package, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 21:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    group, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <vec->
  void                    Return             l     %0.3
Prom 22:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    name, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 23:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    generic, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 24:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    name, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 25:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 26:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    pkg, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 27:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    name, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 28:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    def, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 29:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    .implicitTable, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 30:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    name, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 31:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 32:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    pkg, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 33:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    .implicitTable, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 36:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fdef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <cls->
  void                    Return             l     %0.3
Prom 37:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    x, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <val?>
  void                    Return             l     %0.3
Prom 38:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, e0.0
  prom-           %0.2  = MkArg                    unboundValue, implicitGeneric[0x55bbe62aa490]_p39, e0.0
  prom-           %0.3  = MkArg                    unboundValue, implicitGeneric[0x55bbe62aa490]_p40, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 39:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    value, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 40:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    .Data, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 41:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fdef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 42:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, e0.0
  prom-           %0.2  = MkArg                    unboundValue, implicitGeneric[0x55bbe62aa490]_p43, e0.0
  prom-           %0.3  = MkArg                    unboundValue, implicitGeneric[0x55bbe62aa490]_p44, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 43:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    value, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 44:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    target, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 45:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     <-, e0.0
  prom-           %0.2  = MkArg                    unboundValue, implicitGeneric[0x55bbe62aa490]_p46, e0.0
  prom-           %0.3  = MkArg                    unboundValue, implicitGeneric[0x55bbe62aa490]_p49, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 46:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, e0.0
  prom-           %0.2  = MkArg                    unboundValue, implicitGeneric[0x55bbe62aa490]_p47, e0.0
  prom-           %0.3  = MkArg                    unboundValue, implicitGeneric[0x55bbe62aa490]_p48, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 47:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    value, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 48:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    defined, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 49:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     .newSignature, e0.0
  prom-           %0.2  = MkArg                    unboundValue, implicitGeneric[0x55bbe62aa490]_p50, e0.0
  prom-           %0.3  = MkArg                    unboundValue, implicitGeneric[0x55bbe62aa490]_p52, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 50:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     list, e0.0
  prom-           %0.2  = MkArg                    unboundValue, implicitGeneric[0x55bbe62aa490]_p51, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 51:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    .anyClassName, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 52:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     formalArgs, e0.0
  prom-           %0.2  = MkArg                    unboundValue, implicitGeneric[0x55bbe62aa490]_p53, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 53:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fdef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3

│ implicitGeneric[0x55bbe62aa490]                                              │
└──────────────────────────────────────────────────────────────────────────────┘
