
┌──────────────────────────────────────────────────────────────────────────────┐
│ .getImplicitGeneric[0x55bbe7cbbf90]                                          │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;NonRefl0,NonRefl1,NonRefl2,!Obj0,!Obj1,!Obj2│
│ Properties:                                                                  │
├────── Final PIR Version
.getImplicitGeneric[0x55bbe7cbbf90]
BB0
  val?^           %0.0  = LdArg                    2
  val?^           %0.1  = LdArg                    1
  val?^           %0.2  = LdArg                    0
  val?^ | miss    %0.3  = LdVar              eR    .getImplicitGenericFromCache, <env 0x55bbe2427378>
  lgl$#-          %0.4  = Identical                %0.3, function(name, where, pkg="") <(rir::DispatchT|...
  void                    Branch                   %0.4 -> BB15 (if true) | BB16 (if false)
BB15   <- [0]
  env             e15.0 = MkEnv              l     name=%0.2, where=%0.1, pkg=%0.0, parent=<env 0x55bbe2427378>, context 1
  prom-           %15.1 = MkArg                    unboundValue, .getImplicitGeneric[0x55bbe7cbbf90]_p0 (!refl), e15.0
  prom-           %15.2 = MkArg                    unboundValue, .getImplicitGeneric[0x55bbe7cbbf90]_p1 (!refl), e15.0
  prom-           %15.3 = MkArg                    unboundValue, .getImplicitGeneric[0x55bbe7cbbf90]_p2 (!refl), e15.0
  ct              %15.4 = PushContext        lCL   %15.1, %15.2, %15.3, .getImplicitGenericFromCache(name, where, pkg), function(name, where, pkg="") <(rir::DispatchT|..., e15.0
  val?^           %15.5 = CastType                 up %15.3
  val?^           %15.6 = CastType                 up %15.2
  val?^           %15.7 = CastType                 up %15.1
  val?^ | miss    %15.8 = LdVar              eR    .getGenericFromCacheTable, <env 0x55bbe2427378>
  lgl$#-          %15.9 = Identical                %15.8, function(name, where, pkg="", table) <(rir::Di|...
  void                    Branch                   %15.9 -> BB17 (if true) | BB18 (if false)
BB16   <- [0]
  env             e16.0 = (MkEnv)            l     name=%0.2, where=%0.1, pkg=%0.0, parent=<env 0x55bbe2427378>, context 1
  fs              %16.1 = FrameState         R     0x55bbe2975060+0: [], env=e16.0
  void                    Deopt              !v    %16.1, CallTarget@0x55bbe7498190[Call#0], %0.3
BB17   <- [15]
  env             e17.0 = MkEnv              l     name=%15.7, where=%15.6, pkg=%15.5, parent=<env 0x55bbe2427378>, context 1
  prom-           %17.1 = MkArg                    unboundValue, .getImplicitGeneric[0x55bbe7cbbf90]_p3, e17.0
  prom-           %17.2 = MkArg                    unboundValue, .getImplicitGeneric[0x55bbe7cbbf90]_p4, e17.0
  prom-           %17.3 = MkArg                    unboundValue, .getImplicitGeneric[0x55bbe7cbbf90]_p5, e17.0
  prom-           %17.4 = MkArg                    unboundValue, .getImplicitGeneric[0x55bbe7cbbf90]_p6, e17.0
  val?            %17.5 = StaticCall         !v    .getGenericFromCacheTable[0x55bbe44989c0](%17.1, %17.2, %17.3, %17.4) e17.0   <nil->
  val?            %17.6 = PopContext         C     %17.5, %15.4   <nil->
  lgl$-           %17.7 = Is                       %17.6, NULL
  lgl$-           %17.8 = AsLogical                %17.7
  lgl$#-          %17.9 = Identical                %17.8, false
  void                    StVar              lW    value, %17.6, e15.0
  val             %17.11 = ChkMissing         e     %17.6
  void                    Branch                   %17.9 -> BB13 (if true) | BB5 (if false)
BB18   <- [15]
  fs              %18.0 = FrameState         R     0x55bbe2975060+42: [], env=e15.0
  env             e18.1 = (MkEnv)            l     name=%15.7, where=%15.6, pkg=%15.5, parent=<env 0x55bbe2427378>, context 1
  fs              %18.2 = FrameState         R     0x55bbe6918c40+0: [], env=e18.1, next=%18.0
  void                    Deopt              !v    %18.2, CallTarget@0x55bbe43480e0[Call#0], %15.8   !
BB13   <- [17]
  void                    Nop                !     
  lgl$-           %13.1 = %17.8
  goto BB10
BB5   <- [17]
  val?^ | miss    %5.0  = LdVar              eR    where, e15.0
  val?            %5.1  = Force!<lazy>       !v    %5.0, e15.0   <env->
  lgl$#-          %5.2  = IsType                   %5.1 isA val+   <true>
  void                    Branch                   %5.2 -> BB19 (if true) | BB20 (if false)
BB10   <- [13, 23]
  lgl$-           %10.0 = Phi                      %23.7:BB23, %13.1:BB13
  lgl$-           %10.1 = %10.0
  lgl$#-          %10.2 = CheckTrueFalse     e     %10.1
  void                    Branch                   %10.2 -> BB12 (if true) | BB11 (if false)
BB19   <- [5]
  val?^ | miss    %19.0 = LdVar              eR    .ImplicitGenericsMetaName, e15.0
  val?            %19.1 = Force!<wrapped>    !v    %19.0, e15.0   <str$->
  lgl$#-          %19.2 = IsType                   %19.1 isA val?-
  lgl$#-          %19.3 = IsType                   %5.1 isA val?-
  void                    Branch                   %19.3 -> BB21 (if true) | BB22 (if false)
BB20   <- [5]
  fs              %20.0 = FrameState         R     0x55bbe2975060+91: [%17.8, %5.1], env=e15.0
  void                    Deopt              !v    %20.0, DeadBranchReached@0x55bbe7498190[Test#0], %5.2   !
BB12   <- [10]
  (cls|spec|blt)  %12.0 = LdFun              !v    .getGenericFromCacheTable, e15.0
  fs              %12.1 = FrameState         R     0x55bbe2975060+197: [%12.0], env=e15.0
  void                    Deopt              !v    %12.1, DeadCall@0x55bbe7498190[Call#1], %12.0   !
BB11   <- [10]
  val?^ | miss    %11.0 = LdVar              eR    value, e15.0
  void                    Visible            v     
  val?            %11.2 = Force!<value>      !     %11.0, e15.0   <(nil|cls)>
  void                    Return             l     %11.2
BB21   <- [19]
  val?-           %21.0 = CastType           d     dn %5.1   <env->
  void                    Branch                   %19.2 -> BB23 (if true) | BB24 (if false)
BB22   <- [19]
  void                    Nop                !     
  val?            %22.1 = %5.1
  dr              %22.2 = Typecheck@0x55bbe7498190[Type#5]
  goto BB8
BB23   <- [21]
  val?-           %23.0 = CastType           d     dn %19.1   <str$->
  val?            %23.1 = Extract2_1D        wed   %21.0, %23.0, elided   <nil->
  lgl$-           %23.2 = Is                       %23.1, NULL
  void                    StVar              lW    tbl, %23.1, e15.0
  lgl$-           %23.4 = Not                d     %23.2, elided
  lgl$-           %23.5 = AsLogical                %23.4
  lgl$-           %23.6 = LAnd                     %17.8, %23.5
  lgl$-           %23.7 = %23.6
  goto BB10
BB24   <- [21]
  void                    Nop                !     
  val?            %24.1 = %19.1
  dr              %24.2 = Typecheck@0x55bbe7498190[Type#7]
  goto BB8
BB8   <- [22, 24]
  val?^ | miss    %8.0  = Phi                      %22.1:BB22, %24.1:BB24
  val?^ | miss    %8.1  = %8.0
  dr              %8.2  = Phi                      %22.2:BB22, %24.2:BB24
  dr              %8.3  = %8.2
  fs              %8.4  = FrameState         R     0x55bbe2975060+136: [%17.8, %5.1, %19.1], env=e15.0
  void                    Deopt              !v    %8.4, %8.3, %8.1   !
Prom 0:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    name, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    pkg, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 3:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    name, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 4:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 5:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    pkg, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 6:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    .implicitTable, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <env->
  void                    Return             l     %0.3

│ .getImplicitGeneric[0x55bbe7cbbf90]                                          │
└──────────────────────────────────────────────────────────────────────────────┘
