
┌──────────────────────────────────────────────────────────────────────────────┐
│ [0x55bbe28761f0]                                                             │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch miss: 1                              │
│ Properties:                                                                  │
├────── Final PIR Version
[0x55bbe28761f0]
BB0
  val?^           %0.0  = LdArg                    0
  env             e0.1  = MkEnv              l     where=%0.0, trim(miss)=true, parent=<env 0x55bbe2427378>, context 1
  lgl$-           %0.2  = Missing            eR    where, e0.1
  lgl$#-          %0.3  = CheckTrueFalse     e     %0.2
  void                    Branch                   %0.3 -> BB51 (if true) | BB3 (if false)
BB51   <- [0]
  (cls|spec|blt)  %51.0 = LdFun              !v    .envSearch, <env 0x55bbe2427378>
  fs              %51.1 = FrameState         R     0x55bbe5890460+234: [%51.0], env=e0.1
  void                    Deopt              !v    %51.1, DeadCall@0x55bbe6329628[Call#2], %51.0
BB3   <- [0]
  val?^ | miss    %3.0  = LdVar              eR    is.environment, <env 0x55bbe2427378>
  lgl$#-          %3.1  = Identical                <blt is.environment>, %3.0   <true>
  void                    Branch                   %3.1 -> BB53 (if true) | BB54 (if false)
BB53   <- [3]
  val?            %53.0 = Force!<lazy>       !v    %0.0, e0.1   <env->
  lgl$#-          %53.1 = IsType                   %53.0 isA val?-
  void                    Branch                   %53.1 -> BB55 (if true) | BB56 (if false)
BB54   <- [3]
  env             e54.0 = (MkEnv)            l     where=%0.0, trim(miss)=true, parent=<env 0x55bbe2427378>, context 1
  fs              %54.1 = FrameState         R     0x55bbe5890460+0: [], env=e54.0
  void                    Deopt              !v    %54.1, DeadBranchReached@0x55bbe6329628[Test#0], %3.1
BB55   <- [53]
  val?-           %55.0 = CastType           d     dn %53.0   <env->
  lgl$#-          %55.1 = CallSafeBuiltin    wed   is.environment(%55.0)    <lgl$->
  void                    Branch                   %55.1 -> BB50 (if true) | BB8 (if false)
BB56   <- [53]
  fs              %56.0 = FrameState         R     0x55bbe5890460+81: [<blt is.environment>, %53.0], env=e0.1
  void                    Deopt              !v    %56.0, Typecheck@0x55bbe6329628[Type#1], %53.0   !
BB50   <- [55]
  val?^ | miss    %50.0 = LdVar              eR    list, e0.1
  lgl$#-          %50.1 = Identical                <blt list>, %50.0   <true>
  void                    Branch                   %50.1 -> BB57 (if true) | BB58 (if false)
BB8   <- [55]
  void                    Nop                !     
  goto BB9
BB57   <- [50]
  val?^ | miss    %57.0 = LdVar              eR    where, e0.1
  val?            %57.1 = Force!<wrapped>    !v    %57.0, e0.1   <env->
  val+            %57.2 = CallSafeBuiltin    wed   list(%57.1)    <vec$->
  void                    StVar              lW    where, %57.2, e0.1
  goto BB9
BB58   <- [50]
  fs              %58.0 = FrameState         R     0x55bbe5890460+103: [%55.1], env=e0.1
  void                    Deopt              !v    %58.0, DeadBranchReached@0x55bbe6329628[Test#1], %50.1   !
BB9   <- [8, 57]
  val?^ | miss    %9.0  = LdVar              eR    unlist, e0.1
  lgl$#-          %9.1  = Identical                %9.0, function(x, recursive=TRUE, use.names=TRUE) <(|...
  void                    Branch                   %9.1 -> BB59 (if true) | BB60 (if false)
BB59   <- [9]
  prom-           %59.0 = MkArg                    unboundValue, [0x55bbe28761f0]_p1, e0.1
  ct              %59.1 = PushContext        lCL   %59.0, missingArg, false, unlist(lapply(where, objects, all.names=TRUE),|..., function(x, recursive=TRUE, use.names=TRUE) <(|..., e0.1
  val?^           %59.2 = CastType                 up %59.0
  env             e59.3 = MkEnv              l     x=%59.2, recursive(miss)=true, use.names=false, parent=R_BaseNamespace, context 1
  cls             %59.4 = MkCls                    unlist@127, e59.3
  cls             %59.5 = MkCls                    unlist>URapply@148, e59.3
  val?            %59.6 = Force!<lazy>       !vL   %59.2, e59.3   <vec+>
  val?            %59.7 = CallBuiltin        !v    islistfactor(%59.6, true) e59.3
  lgl$#-          %59.8 = CheckTrueFalse     we    %59.7
  void                    Branch                   %59.8 -> BB46 (if true) | BB12 (if false)
BB60   <- [9]
  fs              %60.0 = FrameState         R     0x55bbe5890460+224: [], env=e0.1
  void                    Deopt              !v    %60.0, CallTarget@0x55bbe6329628[Call#5], %9.0   !
BB46   <- [59]
  val?^ | miss    %46.0 = LdVar              eR    recursive, e59.3
  val?            %46.1 = Force!             !v    %46.0, e59.3   <val?_>
  lgl$#-          %46.2 = CheckTrueFalse     we    %46.1
  void                    Branch                   %46.2 -> BB49 (if true) | BB47 (if false)
BB12   <- [59]
  val?^ | miss    %12.0 = LdVar              eR    x, e59.3
  val?            %12.1 = Force!<wrapped>    !v    %12.0, e59.3   <vec+>
  val?^ | miss    %12.2 = LdVar              eR    recursive, e59.3
  val?            %12.3 = Force!<wrapped>    !v    %12.2, e59.3   <lgl$->
  val?^ | miss    %12.4 = LdVar              eR    use.names, e59.3
  val?            %12.5 = Force!<lazy>       !v    %12.4, e59.3   <lgl$->
  val?            %12.6 = CallBuiltin        !v    unlist(%12.1, %12.3, %12.5) e59.3
  val?            %12.7 = PopContext         C     %12.6, %59.1   <str->
  void                    StVar              lW    these, %12.7, e0.1
  val?^ | miss    %12.9 = LdVar              eR    unique, e0.1
  lgl$#-          %12.10 = Identical                %12.9, function(x, incomparables=FALSE, ...) <(rir::D|...
  void                    Branch                   %12.10 -> BB61 (if true) | BB62 (if false)
BB49   <- [46]
  void                    Nop                !     
  cls             %49.1 = %59.5
  goto BB48
BB47   <- [46]
  void                    Nop                !     
  cls             %47.1 = %59.4
  goto BB48
BB61   <- [12]
  val             %61.0 = ChkMissing         e     %12.7
  val?            %61.1 = StaticCall         !v    unique[0x55bbe67fd440](%12.7) { 0 } e0.1   <str->
  void                    StVar              lW    these, %61.1, e0.1
  lgl$#-          %61.3 = IsType                   %61.1 isA val+   <true>
  val             %61.4 = ChkMissing         e     %61.1
  void                    Branch                   %61.3 -> BB63 (if true) | BB64 (if false)
BB62   <- [12]
  fs              %62.0 = FrameState         R     0x55bbe5890460+334: [], env=e0.1
  void                    Deopt              !v    %62.0, CallTarget@0x55bbe6329628[Call#7], %12.9   !
BB48   <- [47, 49]
  fs              %48.0 = FrameState         R     0x55bbe5890460+320: [], env=e0.1
  cls             %48.1 = Phi                      %47.1:BB47, %49.1:BB49
  cls             %48.2 = %48.1
  void                    StVar              lW    URapply, %48.2, e59.3
  (cls|spec|blt)  %48.4 = LdFun              !v    unique, e59.3
  fs              %48.5 = FrameState         R     0x55bbe3e9e9f0+178: [%48.4], env=e59.3, next=%48.0
  void                    Deopt              !v    %48.5, DeadCall@0x55bbe3e69510[Call#0], %48.4   !
BB63   <- [61]
  val?^ | miss    %63.0 = LdVar              eR    startsWith, e0.1
  lgl$#-          %63.1 = Identical                %63.0, function(x, prefix) <(rir::DispatchTable*)0x55|...
  void                    Branch                   %63.1 -> BB65 (if true) | BB66 (if false)
BB64   <- [61]
  void                    Nop                !     
  lgl$#-          %64.1 = %61.3
  dr              %64.2 = DeadBranchReached@0x55bbe6329628[Test#2]
  goto BB15
BB65   <- [63]
  prom-           %65.0 = MkArg                    unboundValue, [0x55bbe28761f0]_p6 (!refl), e0.1
  ct              %65.1 = PushContext        lCL   %65.0, ".__T__", startsWith(these, ".__T__"), function(x, prefix) <(rir::DispatchTable*)0x55|..., e0.1
  val?^           %65.2 = CastType                 up %65.0
  env             e65.3 = MkEnv              l     x=%65.2, prefix=".__T__", parent=R_BaseNamespace, context 1
  val?            %65.4 = CallBuiltin        !v    startsWith(%61.1, ".__T__") e65.3
  val?            %65.5 = PopContext         C     %65.4, %65.1   <lgl->
  lgl$#-          %65.6 = IsType                   %65.5 isA lgl-
  lgl$#-          %65.7 = IsType                   %61.1 isA val?-
  void                    Branch                   %65.7 -> BB67 (if true) | BB68 (if false)
BB66   <- [63]
  void                    Nop                !     
  val?^ | miss    %66.1 = %63.0
  dr              %66.2 = CallTarget@0x55bbe6329628[Call#9]
  goto BB15
BB15   <- [64, 66]
  val?^ | miss    %15.0 = Phi                      %64.1:BB64, %66.1:BB66
  val?^ | miss    %15.1 = %15.0
  dr              %15.2 = Phi                      %64.2:BB64, %66.2:BB66
  dr              %15.3 = %15.2
  fs              %15.4 = FrameState         R     0x55bbe5890460+380: [], env=e0.1
  void                    Deopt              !v    %15.4, %15.3, %15.1   !
BB67   <- [65]
  val?-           %67.0 = CastType           d     dn %61.1   <str->
  void                    Branch                   %65.6 -> BB69 (if true) | BB70 (if false)
BB68   <- [65]
  void                    Nop                !     
  val?            %68.1 = %61.1
  dr              %68.2 = Typecheck@0x55bbe6329628[Type#14]
  goto BB17
BB69   <- [67]
  lgl-            %69.0 = CastType           d     dn %65.5
  val?            %69.1 = Extract1_1D        wed   %67.0, %69.0, elided   <str->
  void                    StVar              lW    these, %69.1, e0.1
  lgl$#-          %69.3 = IsType                   %69.1 isA val?-
  val?^ | miss    %69.4 = LdVar              eR    length, e0.1
  lgl$#-          %69.5 = Identical                <blt length>, %69.4   <true>
  void                    Branch                   %69.5 -> BB71 (if true) | BB72 (if false)
BB70   <- [67]
  void                    Nop                !     
  val?            %70.1 = %65.5
  dr              %70.2 = Typecheck@0x55bbe6329628[Type#19]
  goto BB17
BB17   <- [68, 70]
  val?^ | miss    %17.0 = Phi                      %68.1:BB68, %70.1:BB70
  val?^ | miss    %17.1 = %17.0
  dr              %17.2 = Phi                      %68.2:BB68, %70.2:BB70
  dr              %17.3 = %17.2
  fs              %17.4 = FrameState         R     0x55bbe5890460+462: [%61.1, %65.5], env=e0.1
  void                    Deopt              !v    %17.4, %17.3, %17.1   !
BB71   <- [69]
  val             %71.0 = ChkMissing         e     %69.1
  void                    Branch                   %69.3 -> BB73 (if true) | BB74 (if false)
BB72   <- [69]
  void                    Nop                !     
  lgl$#-          %72.1 = %69.5
  dr              %72.2 = DeadBranchReached@0x55bbe6329628[Test#3]
  goto BB19
BB73   <- [71]
  val?-           %73.0 = CastType           d     dn %69.1   <str->
  (int|real)$-    %73.1 = CallSafeBuiltin    wed   length(%73.0)    <int$->
  lgl$#-          %73.2 = IsType                   %73.1 isA int$-
  void                    Branch                   %73.2 -> BB75 (if true) | BB76 (if false)
BB74   <- [71]
  void                    Nop                !     
  val?            %74.1 = %69.1
  dr              %74.2 = Typecheck@0x55bbe6329628[Type#20]
  goto BB19
BB19   <- [72, 74]
  val?^ | miss    %19.0 = Phi                      %72.1:BB72, %74.1:BB74
  val?^ | miss    %19.1 = %19.0
  dr              %19.2 = Phi                      %72.2:BB72, %74.2:BB74
  dr              %19.3 = %19.2
  fs              %19.4 = FrameState         R     0x55bbe5890460+483: [], env=e0.1
  void                    Deopt              !v    %19.4, %19.3, %19.1   !
BB75   <- [73]
  int$-           %75.0 = CastType           d     dn %73.1
  lgl$-           %75.1 = Eq                 d     %75.0, 0L, elided   <lgl$->
  lgl$#-          %75.2 = CheckTrueFalse     e     %75.1
  void                    Branch                   %75.2 -> BB45 (if true) | BB23 (if false)
BB76   <- [73]
  void                    Nop                !     
  (int|real)$-    %76.1 = %73.1
  dr              %76.2 = Typecheck@0x55bbe6329628[Type#23]
  goto BB21
BB45   <- [75]
  (cls|spec|blt)  %45.0 = LdFun              !v    character, e0.1
  fs              %45.1 = FrameState         R     0x55bbe5890460+607: [%45.0], env=e0.1
  void                    Deopt              !v    %45.1, DeadCall@0x55bbe6329628[Call#11], %45.0   !
BB23   <- [75]
  val?^ | miss    %23.0 = LdVar              eR    gsub, e0.1
  lgl$#-          %23.1 = Identical                %23.0, function(pattern, replacement, x, ignore.case=|...
  void                    Branch                   %23.1 -> BB77 (if true) | BB78 (if false)
BB21   <- [76, 78]
  val?^ | miss    %21.0 = Phi                      %76.1:BB76, %78.1:BB78
  val?^ | miss    %21.1 = %21.0
  dr              %21.2 = Phi                      %76.2:BB76, %78.2:BB78
  dr              %21.3 = %21.2
  fs              %21.4 = FrameState         R     0x55bbe5890460+574: [%73.1], env=e0.1
  void                    Deopt              !v    %21.4, %21.3, %21.1   !
BB77   <- [23]
  prom-           %77.0 = MkArg                    unboundValue, [0x55bbe28761f0]_p7 (!refl), e0.1
  val?            %77.1 = StaticCall         !v    gsub[0x55bbe7f88940]("^\.__T__(.*):([^:]+)", "\1", %77.0) e0.1   <str->
  void                    StVar              lW    funNames, %77.1, e0.1
  val?^ | miss    %77.3 = LdVar              eR    gsub, e0.1
  lgl$#-          %77.4 = Identical                %77.3, function(pattern, replacement, x, ignore.case=|...
  void                    Branch                   %77.4 -> BB79 (if true) | BB80 (if false)
BB78   <- [23]
  void                    Nop                !     
  val?^ | miss    %78.1 = %23.0
  dr              %78.2 = CallTarget@0x55bbe6329628[Call#12]
  goto BB21
BB79   <- [77]
  prom-           %79.0 = MkArg                    unboundValue, [0x55bbe28761f0]_p8, e0.1
  val?            %79.1 = StaticCall         !v    gsub[0x55bbe7f88940]("^\.__T__(.*):([^:]+(.*))", "\2", %79.0) e0.1   <str->
  void                    StVar              lW    packageNames, %79.1, e0.1
  val             %79.3 = ChkMissing         e     %79.1
  (cls|spec|blt)  %79.4 = LdFun              !v    attr<-, <0x55bbe1e23e08>, e0.1
  val?^ | miss    %79.5 = LdVar              eR    funNames, e0.1
  lgl$#-          %79.6 = IsType                   %79.5 isA val?~- | miss
  void                    Branch                   %79.6 -> BB81 (if true) | BB82 (if false)
BB80   <- [77]
  fs              %80.0 = FrameState         R     0x55bbe5890460+691: [], env=e0.1
  void                    Deopt              !v    %80.0, CallTarget@0x55bbe6329628[Call#13], %77.3   !
BB81   <- [79]
  val?~- | miss   %81.0 = CastType           d     dn %79.5
  val?-           %81.1 = Force!<value>            %81.0,    <str->
  val?            %81.2 = NamedCall          !v    %79.4(%81.1, "package", value=%79.1) e0.1
  void                    StVar              lW    funNames, %81.2, e0.1
  val?^ | miss    %81.4 = LdVar              eR    isTRUE, e0.1
  lgl$#-          %81.5 = Identical                %81.4, function(x) <(rir::DispatchTable*)0x55bbe3e9b2|...
  void                    Branch                   %81.5 -> BB83 (if true) | BB84 (if false)
BB82   <- [79]
  fs              %82.0 = FrameState         R     0x55bbe5890460+761: [%79.1], env=e0.1
  void                    Deopt              !v    %82.0, Typecheck@0x55bbe6329628[Type#31], %79.5   !
BB83   <- [81]
  val?^ | miss    %83.0 = LdVar              eR    trim, e0.1
  val?            %83.1 = Force!<lazy>       !v    %83.0, e0.1   <lgl$->
  val+            %83.2 = CallSafeBuiltin    wed   is.logical(%83.1)    <lgl$->
  lgl$#-          %83.3 = IsType                   %83.2 isA lgl$-
  void                    Branch                   %83.3 -> BB85 (if true) | BB86 (if false)
BB84   <- [81]
  fs              %84.0 = FrameState         R     0x55bbe5890460+838: [], env=e0.1
  void                    Deopt              !v    %84.0, CallTarget@0x55bbe6329628[Call#15], %81.4   !
BB85   <- [83]
  lgl$-           %85.0 = CastType           d     dn %83.2
  lgl$-           %85.1 = AsLogical                %85.0
  lgl$#-          %85.2 = Identical                %85.1, false
  void                    Branch                   %85.2 -> BB44 (if true) | BB32 (if false)
BB86   <- [83]
  void                    Nop                !     
  val+            %86.1 = %83.2
  dr              %86.2 = Typecheck@0x55bbe33111e8[Type#2]
  goto BB30
BB44   <- [85]
  void                    Nop                !     
  lgl$-           %44.1 = %85.1
  goto BB33
BB32   <- [85]
  lgl$#-          %32.0 = IsType                   %83.1 isA lgl$-
  void                    Branch                   %32.0 -> BB87 (if true) | BB88 (if false)
BB30   <- [86, 88, 90]
  val?^ | miss    %30.0 = Phi                      %86.1:BB86, %88.1:BB88, %90.1:BB90
  val?^ | miss    %30.1 = %30.0
  dr              %30.2 = Phi                      %86.2:BB86, %88.2:BB88, %90.2:BB90
  dr              %30.3 = %30.2
  fs              %30.4 = FrameState         R     0x55bbe5890460+870: [], env=e0.1
  prom-           %30.5 = MkArg                    %83.1, [0x55bbe28761f0]_p10 (!refl), e0.1
  val?~           %30.6 = CastType                 up %30.5
  env             e30.7 = (MkEnv)            l     x=%30.6, parent=R_BaseNamespace, context 0
  fs              %30.8 = FrameState         R     0x55bbe22716d0+91: [%83.2], env=e30.7, next=%30.4
  void                    Deopt              !v    %30.8, %30.3, %30.1   !
BB33   <- [44, 87]
  lgl$-           %33.0 = Phi                      %87.1:BB87, %44.1:BB44
  lgl$-           %33.1 = %33.0
  lgl$-           %33.2 = AsLogical                %33.1
  lgl$#-          %33.3 = Identical                %33.2, false
  void                    Branch                   %33.3 -> BB43 (if true) | BB34 (if false)
BB87   <- [32]
  lgl$-           %87.0 = AsLogical                %85.1
  lgl$-           %87.1 = %87.0
  goto BB33
BB88   <- [32]
  void                    Nop                !     
  val?            %88.1 = %83.1
  dr              %88.2 = Typecheck@0x55bbe33111e8[Type#4]
  goto BB30
BB43   <- [33]
  void                    Nop                !     
  lgl$-           %43.1 = %33.2
  goto BB35
BB34   <- [33]
  lgl$#-          %34.0 = IsType                   %83.1 isA lgl$-
  void                    Branch                   %34.0 -> BB89 (if true) | BB90 (if false)
BB35   <- [43, 89]
  lgl$-           %35.0 = Phi                      %89.5:BB89, %43.1:BB43
  lgl$-           %35.1 = %35.0
  lgl$-           %35.2 = AsLogical                %35.1
  lgl$#-          %35.3 = Identical                %35.2, false
  void                    Branch                   %35.3 -> BB42 (if true) | BB36 (if false)
BB89   <- [34]
  lgl$-           %89.0 = CastType           d     dn %83.1
  lgl$-           %89.1 = CallSafeBuiltin    wed   is.na(%89.0)    <lgl$->
  lgl$-           %89.2 = Not                d     %89.1, elided
  lgl$-           %89.3 = AsLogical                %89.2
  lgl$-           %89.4 = LAnd                     %33.2, %89.3
  lgl$-           %89.5 = %89.4
  goto BB35
BB90   <- [34]
  void                    Nop                !     
  val?            %90.1 = %83.1
  dr              %90.2 = Typecheck@0x55bbe33111e8[Type#8]
  goto BB30
BB42   <- [35]
  void                    Nop                !     
  lgl$-           %42.1 = %35.2
  goto BB37
BB36   <- [35]
  lgl$-           %36.0 = AsLogical          e     %83.1
  lgl$-           %36.1 = LAnd                     %35.2, %36.0
  lgl$-           %36.2 = %36.1
  goto BB37
BB37   <- [42, 36]
  lgl$-           %37.0 = Phi                      %36.2:BB36, %42.1:BB42
  lgl$-           %37.1 = %37.0
  lgl$#-          %37.2 = CheckTrueFalse     e     %37.1
  void                    Branch                   %37.2 -> BB41 (if true) | BB40 (if false)
BB41   <- [37]
  val?^ | miss    %41.0 = LdVar              eR    funNames, e0.1
  lgl$#-          %41.1 = IsType                   %41.0 isA val?~+ | miss
  void                    Branch                   %41.1 -> BB91 (if true) | BB92 (if false)
BB40   <- [37]
  (cls|spec|blt)  %40.0 = LdFun              !v    isFALSE, e0.1
  fs              %40.1 = FrameState         R     0x55bbe5890460+886: [%40.0], env=e0.1
  void                    Deopt              !v    %40.1, DeadCall@0x55bbe6329628[Call#16], %40.0   !
BB91   <- [41]
  val?~+ | miss   %91.0 = CastType           d     dn %41.0
  void                    Visible            v     
  val?+           %91.2 = Force!<value>            %91.0,    <str+>
  void                    Return             l     %91.2
BB92   <- [41]
  fs              %92.0 = FrameState         R     0x55bbe5890460+870: [], env=e0.1
  prom-           %92.1 = MkArg                    %83.1, [0x55bbe28761f0]_p10 (!refl), e0.1
  val?~           %92.2 = CastType                 up %92.1
  env             e92.3 = (MkEnv)            l     x=%92.2, parent=R_BaseNamespace, context 0
  fs              %92.4 = FrameState         R     0x55bbe22716d0+342: [%37.1], env=e92.3, next=%92.0
  void                    Deopt              !v    %92.4, Typecheck@0x55bbe6329628[Type#41], %41.0   !
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     lapply, <0x55bbe1f5f040>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, [0x55bbe28761f0]_p2, e0.0
  prom-           %0.3  = MkArg                    unboundValue, [0x55bbe28761f0]_p3, e0.0
  val?            %0.4  = NamedCall          !     %0.1(%0.2, %0.3, all.names=true) e0.0   <vec$->
  void                    Return             l     %0.4
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <vec$->
  void                    Return             l     %0.3
Prom 3:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    objects, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <cls->
  void                    Return             l     %0.3
Prom 6:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    these, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 7:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    these, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 8:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    these, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 10:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    trim, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <lgl$->
  void                    Return             l     %0.3

│ [0x55bbe28761f0]                                                             │
└──────────────────────────────────────────────────────────────────────────────┘
