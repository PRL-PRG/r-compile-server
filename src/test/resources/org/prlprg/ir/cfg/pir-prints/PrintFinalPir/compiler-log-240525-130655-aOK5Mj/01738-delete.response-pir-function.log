
┌──────────────────────────────────────────────────────────────────────────────┐
│ delete.response[0x55bbe6fa3fa0]                                              │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch                                      │
│ Properties:                                                                  │
├────── Final PIR Version
delete.response[0x55bbe6fa3fa0]
BB0
  val?^           %0.0  = LdArg                    0
  val?^ | miss    %0.1  = LdVar              eR    attributes, <env 0x55bbe246fb50>
  lgl$#-          %0.2  = Identical                <blt attributes>, %0.1   <true>
  void                    Branch                   %0.2 -> BB47 (if true) | BB48 (if false)
BB47   <- [0]
  env             e47.0 = MkEnv              l     termobj=%0.0, parent=<env 0x55bbe246fb50>, context 1
  val?            %47.1 = Force!<lazy>       !v    %0.0, e47.0   <code>
  val?            %47.2 = CallBuiltin        !v    attributes(%47.1) e47.0   <vec+>
  void                    StVar              lW    a, %47.2, e47.0
  (cls|spec|blt)  %47.4 = LdFun              !v    $, <0x55bbe1e1fc10>, e47.0
  prom-           %47.5 = MkArg                    unboundValue, delete.response[0x55bbe6fa3fa0]_p0, e47.0
  prom-           %47.6 = MkArg                    unboundValue, delete.response[0x55bbe6fa3fa0]_p1, e47.0
  val?            %47.7 = Call               !v    %47.4(%47.5, %47.6) e47.0   <int$->
  lgl$-           %47.8 = Is                       %47.7, NULL
  lgl$#-          %47.9 = IsType                   %47.7 isA int$-
  void                    Branch                   %47.9 -> BB49 (if true) | BB50 (if false)
BB48   <- [0]
  env             e48.0 = (MkEnv)            l     termobj=%0.0, parent=<env 0x55bbe246fb50>, context 1
  fs              %48.1 = FrameState         R     0x55bbef392240+0: [], env=e48.0
  void                    Deopt              !v    %48.1, DeadBranchReached@0x55bbeef8e4c8[Test#0], %0.2
BB49   <- [47]
  int$-           %49.0 = CastType           d     dn %47.7
  void                    StVar              lW    y, %49.0, e47.0
  lgl$-           %49.2 = Not                d     %47.8, elided
  lgl$-           %49.3 = AsLogical                %49.2
  lgl$#-          %49.4 = Identical                %49.3, false
  void                    Branch                   %49.4 -> BB45 (if true) | BB5 (if false)
BB50   <- [47]
  fs              %50.0 = FrameState         R     0x55bbef392240+142: [%47.7], env=e47.0
  void                    Deopt              !v    %50.0, Typecheck@0x55bbeef8e4c8[Type#5], %47.7   !
BB45   <- [49]
  void                    Nop                !     
  lgl$-           %45.1 = %49.3
  goto BB6
BB5   <- [49]
  lgl$-           %5.0  = AsLogical                %49.0
  lgl$-           %5.1  = LAnd                     %49.3, %5.0
  lgl$-           %5.2  = %5.1
  goto BB6
BB6   <- [45, 5]
  lgl$-           %6.0  = Phi                      %5.2:BB5, %45.1:BB45
  lgl$-           %6.1  = %6.0
  lgl$#-          %6.2  = CheckTrueFalse     e     %6.1
  void                    Branch                   %6.2 -> BB9 (if true) | BB7 (if false)
BB9   <- [6]
  val?^ | miss    %9.0  = LdVar              eR    termobj, e47.0
  val?            %9.1  = Force!<wrapped>    !v    %9.0, e47.0   <code>
  val?            %9.2  = Subassign2_1D      wed   nil, %9.1, 2L, e47.0
  void                    StVar              lW    termobj, %9.2, e47.0
  (cls|spec|blt)  %9.4  = LdFun              !v    <-, <0x55bbe1e14da8>, e47.0
  prom-           %9.5  = MkArg                    unboundValue, delete.response[0x55bbe6fa3fa0]_p2, e47.0
  val?            %9.6  = Call               !v    %9.4(%9.5, 0) e47.0
  (cls|spec|blt)  %9.7  = LdFun              !v    <-, <0x55bbe1e14da8>, e47.0
  prom-           %9.8  = MkArg                    unboundValue, delete.response[0x55bbe6fa3fa0]_p5, e47.0
  prom-           %9.9  = MkArg                    unboundValue, delete.response[0x55bbe6fa3fa0]_p8, e47.0
  val?            %9.10 = Call               !v    %9.7(%9.8, %9.9) e47.0
  (cls|spec|blt)  %9.11 = LdFun              !v    <-, <0x55bbe1e14da8>, e47.0
  prom-           %9.12 = MkArg                    unboundValue, delete.response[0x55bbe6fa3fa0]_p12, e47.0
  prom-           %9.13 = MkArg                    unboundValue, delete.response[0x55bbe6fa3fa0]_p15, e47.0
  val?            %9.14 = Call               !v    %9.11(%9.12, %9.13) e47.0
  val?^ | miss    %9.15 = LdVar              eR    length, e47.0
  lgl$#-          %9.16 = Identical                <blt length>, %9.15   <true>
  void                    Branch                   %9.16 -> BB51 (if true) | BB52 (if false)
BB7   <- [6]
  void                    Nop                !     
  goto BB8
BB51   <- [9]
  (cls|spec|blt)  %51.0 = LdFun              !v    $, <0x55bbe1e1fc10>, e47.0
  prom-           %51.1 = MkArg                    unboundValue, delete.response[0x55bbe6fa3fa0]_p19, e47.0
  prom-           %51.2 = MkArg                    unboundValue, delete.response[0x55bbe6fa3fa0]_p20, e47.0
  val?            %51.3 = Call               !v    %51.0(%51.1, %51.2) e47.0   <int+>
  lgl$#-          %51.4 = IsType                   %51.3 isA int+
  void                    Branch                   %51.4 -> BB53 (if true) | BB54 (if false)
BB52   <- [9]
  fs              %52.0 = FrameState         R     0x55bbef392240+359: [%9.14], env=e47.0
  void                    Deopt              !v    %52.0, DeadBranchReached@0x55bbeef8e4c8[Test#3], %9.16   !
BB8   <- [7, 79]
  val?^ | miss    %8.0  = LdVar              eR    termobj, e47.0
  void                    Visible            v     
  val?            %8.2  = Force!<value>      !     %8.0, e47.0   <code>
  void                    Return             l     %8.2
BB53   <- [51]
  int+            %53.0 = CastType           d     dn %51.3
  (int|real)$-    %53.1 = CallSafeBuiltin    wed   length(%53.0)    <int$->
  lgl$#-          %53.2 = IsType                   %53.1 isA int$-
  void                    Branch                   %53.2 -> BB55 (if true) | BB56 (if false)
BB54   <- [51]
  fs              %54.0 = FrameState         R     0x55bbef392240+457: [<blt length>, %51.3], env=e47.0
  void                    Deopt              !v    %54.0, Typecheck@0x55bbeef8e4c8[Type#39], %51.3   !
BB55   <- [53]
  int$-           %55.0 = CastType           d     dn %53.1
  lgl$#-          %55.1 = CheckTrueFalse     e     %55.0
  void                    Branch                   %55.1 -> BB44 (if true) | BB16 (if false)
BB56   <- [53]
  fs              %56.0 = FrameState         R     0x55bbef392240+479: [%53.1], env=e47.0
  void                    Deopt              !v    %56.0, Typecheck@0x55bbeef8e4c8[Type#40], %53.1   !
BB44   <- [55]
  (cls|spec|blt)  %44.0 = LdFun              !v    <-, <0x55bbe1e14da8>, e47.0
  prom-           %44.1 = MkArg                    unboundValue, delete.response[0x55bbe6fa3fa0]_p48, e47.0
  prom-           %44.2 = MkArg                    unboundValue, delete.response[0x55bbe6fa3fa0]_p51, e47.0
  val?            %44.3 = Call               !v    %44.0(%44.1, %44.2) e47.0
  goto BB17
BB16   <- [55]
  void                    Nop                !     
  goto BB17
BB17   <- [16, 44]
  val?^ | miss    %17.0 = LdVar              eR    length, e47.0
  lgl$#-          %17.1 = Identical                <blt length>, %17.0   <true>
  void                    Branch                   %17.1 -> BB57 (if true) | BB58 (if false)
BB57   <- [17]
  (cls|spec|blt)  %57.0 = LdFun              !v    $, <0x55bbe1e1fc10>, e47.0
  prom-           %57.1 = MkArg                    unboundValue, delete.response[0x55bbe6fa3fa0]_p21, e47.0
  prom-           %57.2 = MkArg                    unboundValue, delete.response[0x55bbe6fa3fa0]_p22, e47.0
  val?            %57.3 = Call               !v    %57.0(%57.1, %57.2) e47.0   <nil->
  lgl$#-          %57.4 = IsType                   %57.3 isA val?-
  void                    Branch                   %57.4 -> BB59 (if true) | BB60 (if false)
BB58   <- [17]
  fs              %58.0 = FrameState         R     0x55bbef392240+533: [], env=e47.0
  void                    Deopt              !v    %58.0, DeadBranchReached@0x55bbeef8e4c8[Test#4], %17.1   !
BB59   <- [57]
  val?-           %59.0 = CastType           d     dn %57.3   <nil->
  (int|real)$-    %59.1 = CallSafeBuiltin    wed   length(%59.0)    <int$->
  lgl$#-          %59.2 = IsType                   %59.1 isA int$-
  void                    Branch                   %59.2 -> BB61 (if true) | BB62 (if false)
BB60   <- [57]
  fs              %60.0 = FrameState         R     0x55bbef392240+630: [<blt length>, %57.3], env=e47.0
  void                    Deopt              !v    %60.0, Typecheck@0x55bbeef8e4c8[Type#54], %57.3   !
BB61   <- [59]
  int$-           %61.0 = CastType           d     dn %59.1
  lgl$#-          %61.1 = CheckTrueFalse     e     %61.0
  void                    Branch                   %61.1 -> BB43 (if true) | BB24 (if false)
BB62   <- [59]
  void                    Nop                !     
  (int|real)$-    %62.1 = %59.1
  dr              %62.2 = Typecheck@0x55bbeef8e4c8[Type#55]
  goto BB22
BB43   <- [61]
  (cls|spec|blt)  %43.0 = LdFun              !v    <-, e47.0
  fs              %43.1 = FrameState         R     0x55bbef392240+673: [%43.0], env=e47.0
  void                    Deopt              !v    %43.1, DeadCall@0x55bbeef8e4c8[Call#20], %43.0   !
BB24   <- [61]
  val?^ | miss    %24.0 = LdVar              eR    length, e47.0
  lgl$#-          %24.1 = Identical                <blt length>, %24.0   <true>
  void                    Branch                   %24.1 -> BB63 (if true) | BB64 (if false)
BB22   <- [62, 64]
  val?^ | miss    %22.0 = Phi                      %62.1:BB62, %64.1:BB64
  val?^ | miss    %22.1 = %22.0
  dr              %22.2 = Phi                      %62.2:BB62, %64.2:BB64
  dr              %22.3 = %22.2
  fs              %22.4 = FrameState         R     0x55bbef392240+652: [%59.1], env=e47.0
  void                    Deopt              !v    %22.4, %22.3, %22.1   !
BB63   <- [24]
  (cls|spec|blt)  %63.0 = LdFun              !v    $, <0x55bbe1e1fc10>, e47.0
  prom-           %63.1 = MkArg                    unboundValue, delete.response[0x55bbe6fa3fa0]_p23, e47.0
  prom-           %63.2 = MkArg                    unboundValue, delete.response[0x55bbe6fa3fa0]_p24, e47.0
  val?            %63.3 = Call               !v    %63.0(%63.1, %63.2) e47.0   <list->
  lgl$#-          %63.4 = IsType                   %63.3 isA val?-
  void                    Branch                   %63.4 -> BB65 (if true) | BB66 (if false)
BB64   <- [24]
  void                    Nop                !     
  lgl$#-          %64.1 = %24.1
  dr              %64.2 = DeadBranchReached@0x55bbeef8e4c8[Test#5]
  goto BB22
BB65   <- [63]
  val?-           %65.0 = CastType           d     dn %63.3   <list->
  (int|real)$-    %65.1 = CallSafeBuiltin    wed   length(%65.0)    <int$->
  lgl$#-          %65.2 = IsType                   %65.1 isA int$-
  void                    Branch                   %65.2 -> BB67 (if true) | BB68 (if false)
BB66   <- [63]
  fs              %66.0 = FrameState         R     0x55bbef392240+803: [<blt length>, %63.3], env=e47.0
  void                    Deopt              !v    %66.0, Typecheck@0x55bbeef8e4c8[Type#77], %63.3   !
BB67   <- [65]
  int$-           %67.0 = CastType           d     dn %65.1
  lgl$#-          %67.1 = CheckTrueFalse     e     %67.0
  void                    Branch                   %67.1 -> BB33 (if true) | BB29 (if false)
BB68   <- [65]
  void                    Nop                !     
  (int|real)$-    %68.1 = %65.1
  dr              %68.2 = Typecheck@0x55bbeef8e4c8[Type#78]
  goto BB27
BB33   <- [67]
  val?^ | miss    %33.0 = LdVar              eR    seq_along, e47.0
  lgl$#-          %33.1 = Identical                <blt seq_along>, %33.0   <true>
  void                    Branch                   %33.1 -> BB69 (if true) | BB70 (if false)
BB29   <- [67]
  void                    Nop                !     
  goto BB30
BB27   <- [68, 70]
  val?^ | miss    %27.0 = Phi                      %68.1:BB68, %70.1:BB70
  val?^ | miss    %27.1 = %27.0
  dr              %27.2 = Phi                      %68.2:BB68, %70.2:BB70
  dr              %27.3 = %27.2
  fs              %27.4 = FrameState         R     0x55bbef392240+825: [%65.1], env=e47.0
  void                    Deopt              !v    %27.4, %27.3, %27.1   !
BB69   <- [33]
  (cls|spec|blt)  %69.0 = LdFun              !v    $, <0x55bbe1e1fc10>, e47.0
  prom-           %69.1 = MkArg                    unboundValue, delete.response[0x55bbe6fa3fa0]_p26, e47.0
  prom-           %69.2 = MkArg                    unboundValue, delete.response[0x55bbe6fa3fa0]_p27, e47.0
  val?            %69.3 = Call               !v    %69.0(%69.1, %69.2) e47.0   <list->
  val?            %69.4 = CallBuiltin        !v    seq_along(%69.3) e47.0   <int->
  val?+           %69.5 = ToForSeq           e     %69.4
  int$-           %69.6 = Length                   %69.5
  int$-           %69.7 = Inc                      0L
  lgl$-           %69.8 = Lt                 d     %69.6, %69.7, elided   <false>
  lgl$#-          %69.9 = Identical                %69.8, true
  void                    Branch                   %69.9 -> BB72 (if true) | BB71 (if false)
BB70   <- [33]
  void                    Nop                !     
  lgl$#-          %70.1 = %33.1
  dr              %70.2 = DeadBranchReached@0x55bbeef8e4c8[Test#6]
  goto BB27
BB30   <- [29, 42]
  val?^ | miss    %30.0 = LdVar              eR    a, e47.0
  lgl$#-          %30.1 = IsType                   %30.0 isA val?~+ | miss
  void                    Branch                   %30.1 -> BB79 (if true) | BB80 (if false)
BB72   <- [69]
  fs              %72.0 = FrameState         R     0x55bbef392240+960: [%69.4], env=e47.0
  void                    Deopt              !v    %72.0, DeadBranchReached@0x55bbeef8e4c8[Test#7], %69.9   !
BB71   <- [69]
  val?            %71.0 = Extract2_1D        wed   %69.5, %69.7, elided
  void                    StVar              lW    i, %71.0, e47.0
  (cls|spec|blt)  %71.2 = LdFun              !v    $, <0x55bbe1e1fc10>, e47.0
  prom-           %71.3 = MkArg                    unboundValue, delete.response[0x55bbe6fa3fa0]_p28, e47.0
  prom-           %71.4 = MkArg                    unboundValue, delete.response[0x55bbe6fa3fa0]_p29, e47.0
  val?            %71.5 = Call               !v    %71.2(%71.3, %71.4) e47.0   <list->
  lgl$#-          %71.6 = IsType                   %71.5 isA val+   <true>
  lgl$#-          %71.7 = IsType                   %71.5 isA val?-
  void                    Branch                   %71.6 -> BB73 (if true) | BB74 (if false)
BB79   <- [30]
  val?~+ | miss   %79.0 = CastType           d     dn %30.0
  val?+           %79.1 = Force!<value>            %79.0,    <vec+>
  (cls|spec|blt)  %79.2 = LdFun              !v    attributes<-, <0x55bbe1e20128>, e47.0
  val?^ | miss    %79.3 = LdVar              eR    termobj, e47.0
  val?            %79.4 = Force!<value>      !v    %79.3, e47.0   <code>
  val?            %79.5 = NamedCall          !v    %79.2(%79.4, value=%79.1) e47.0
  void                    StVar              lW    termobj, %79.5, e47.0
  goto BB8
BB80   <- [30]
  fs              %80.0 = FrameState         R     0x55bbef392240+1326: [], env=e47.0
  void                    Deopt              !v    %80.0, Typecheck@0x55bbeef8e4c8[Type#124], %30.0   !
BB73   <- [71]
  val?^ | miss    %73.0 = LdVar              eR    i, e47.0
  lgl$#-          %73.1 = IsType                   %73.0 isA int$-
  void                    Branch                   %73.1 -> BB75 (if true) | BB76 (if false)
BB74   <- [71]
  void                    Nop                !     
  lgl$#-          %74.1 = %71.6
  dr              %74.2 = DeadBranchReached@0x55bbeef8e4c8[Test#8]
  goto BB36
BB75   <- [73]
  int$-           %75.0 = CastType           d     dn %73.0
  void                    Branch                   %71.7 -> BB77 (if true) | BB78 (if false)
BB76   <- [73]
  void                    Nop                !     
  val?^ | miss    %76.1 = %73.0
  dr              %76.2 = Typecheck@0x55bbeef8e4c8[Type#90]
  goto BB36
BB36   <- [74, 76, 78]
  val?^ | miss    %36.0 = Phi                      %74.1:BB74, %76.1:BB76, %78.1:BB78
  val?^ | miss    %36.1 = %36.0
  dr              %36.2 = Phi                      %74.2:BB74, %76.2:BB76, %78.2:BB78
  dr              %36.3 = %36.2
  fs              %36.4 = FrameState         R     0x55bbef392240+1042: [%69.5, %69.6, %69.7, %71.5], env=e47.0
  void                    Deopt              !v    %36.4, %36.3, %36.1   !
BB77   <- [75]
  val?-           %77.0 = CastType           d     dn %71.5   <list->
  val?            %77.1 = Extract2_1D        wed   %77.0, %75.0, elided   <nil->
  void                    StVar              lW    b, %77.1, e47.0
  (cls|spec|blt)  %77.3 = LdFun              !v    <-, <0x55bbe1e14da8>, e47.0
  prom-           %77.4 = MkArg                    unboundValue, delete.response[0x55bbe6fa3fa0]_p30, e47.0
  prom-           %77.5 = MkArg                    unboundValue, delete.response[0x55bbe6fa3fa0]_p34, e47.0
  val?            %77.6 = Call               !v    %77.3(%77.4, %77.5) e47.0
  int$-           %77.7 = %69.7
  goto BB38
BB78   <- [75]
  void                    Nop                !     
  val?            %78.1 = %71.5
  dr              %78.2 = Typecheck@0x55bbeef8e4c8[Type#88]
  goto BB36
BB38   <- [77, 85]
  int$-           %38.0 = Phi                      %77.7:BB77, %85.7:BB85
  int$-           %38.1 = %38.0
  int$-           %38.2 = Inc                      %38.1
  lgl$-           %38.3 = Lt                 d     %69.6, %38.2, elided
  lgl$#-          %38.4 = Identical                %38.3, true
  void                    Branch                   %38.4 -> BB42 (if true) | BB39 (if false)
BB42   <- [38]
  void                    Nop                !     
  goto BB30
BB39   <- [38]
  val?            %39.0 = Extract2_1D        wed   %69.5, %38.2, elided
  void                    StVar              lW    i, %39.0, e47.0
  (cls|spec|blt)  %39.2 = LdFun              !v    $, <0x55bbe1e1fc10>, e47.0
  prom-           %39.3 = MkArg                    unboundValue, delete.response[0x55bbe6fa3fa0]_p38, e47.0
  prom-           %39.4 = MkArg                    unboundValue, delete.response[0x55bbe6fa3fa0]_p39, e47.0
  val?            %39.5 = Call               !v    %39.2(%39.3, %39.4) e47.0   <list->
  lgl$#-          %39.6 = IsType                   %39.5 isA val+   <true>
  lgl$#-          %39.7 = IsType                   %39.5 isA val?-
  void                    Branch                   %39.6 -> BB81 (if true) | BB82 (if false)
BB81   <- [39]
  val?^ | miss    %81.0 = LdVar              eR    i, e47.0
  lgl$#-          %81.1 = IsType                   %81.0 isA int$-
  void                    Branch                   %81.1 -> BB83 (if true) | BB84 (if false)
BB82   <- [39]
  void                    Nop                !     
  lgl$#-          %82.1 = %39.6
  dr              %82.2 = DeadBranchReached@0x55bbeef8e4c8[Test#10]
  goto BB40
BB83   <- [81]
  int$-           %83.0 = CastType           d     dn %81.0
  void                    Branch                   %39.7 -> BB85 (if true) | BB86 (if false)
BB84   <- [81]
  void                    Nop                !     
  val?^ | miss    %84.1 = %81.0
  dr              %84.2 = Typecheck@0x55bbeef8e4c8[Type#109]
  goto BB40
BB40   <- [82, 84, 86]
  val?^ | miss    %40.0 = Phi                      %82.1:BB82, %84.1:BB84, %86.1:BB86
  val?^ | miss    %40.1 = %40.0
  dr              %40.2 = Phi                      %82.2:BB82, %84.2:BB84, %86.2:BB86
  dr              %40.3 = %40.2
  fs              %40.4 = FrameState         R     0x55bbef392240+1212: [%69.5, %69.6, %38.2, %39.5], env=e47.0
  void                    Deopt              !v    %40.4, %40.3, %40.1   !
BB85   <- [83]
  val?-           %85.0 = CastType           d     dn %39.5   <list->
  val?            %85.1 = Extract2_1D        wed   %85.0, %83.0, elided   <(nil|int)->
  void                    StVar              lW    b, %85.1, e47.0
  (cls|spec|blt)  %85.3 = LdFun              !v    <-, <0x55bbe1e14da8>, e47.0
  prom-           %85.4 = MkArg                    unboundValue, delete.response[0x55bbe6fa3fa0]_p40, e47.0
  prom-           %85.5 = MkArg                    unboundValue, delete.response[0x55bbe6fa3fa0]_p44, e47.0
  val?            %85.6 = Call               !v    %85.3(%85.4, %85.5) e47.0
  int$-           %85.7 = %38.2
  goto BB38
BB86   <- [83]
  void                    Nop                !     
  val?            %86.1 = %39.5
  dr              %86.2 = Typecheck@0x55bbeef8e4c8[Type#107]
  goto BB40
Prom 0:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    a, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    response, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     $, e0.0
  prom-           %0.2  = MkArg                    unboundValue, delete.response[0x55bbe6fa3fa0]_p3, e0.0
  prom-           %0.3  = MkArg                    unboundValue, delete.response[0x55bbe6fa3fa0]_p4, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 3:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    a, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 4:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    response, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 5:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     $, e0.0
  prom-           %0.2  = MkArg                    unboundValue, delete.response[0x55bbe6fa3fa0]_p6, e0.0
  prom-           %0.3  = MkArg                    unboundValue, delete.response[0x55bbe6fa3fa0]_p7, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 6:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    a, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 7:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    variables, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 8:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !v    $, e0.0
  prom-           %0.2  = MkArg                    unboundValue, delete.response[0x55bbe6fa3fa0]_p9, e0.0
  prom-           %0.3  = MkArg                    unboundValue, delete.response[0x55bbe6fa3fa0]_p10, e0.0
  val?            %0.4  = Call               !v    %0.1(%0.2, %0.3) e0.0   <val?_>
  lgl$#-          %0.5  = IsType                   %0.4 isA val+   <@?>
  void                    Branch                   %0.5 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    y, e0.0
  val?            %2.1  = Force              !v    %2.0, e0.0   <val?_>
  val?            %2.2  = Add                !v    1, %2.1, e0.0   <val?_>
  val?            %2.3  = Minus              !v    %2.2, e0.0
  val?            %2.4  = %2.3
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, delete.response[0x55bbe6fa3fa0]_p11, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.4:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract1_1D        !v    %0.4, %3.1, e0.0   <val?_>
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 9:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    a, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 10:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    variables, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 11:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    y, e0.0
  val?            %0.2  = Force              !v    %0.1, e0.0   <val?_>
  val?            %0.3  = Add                !v    1, %0.2, e0.0   <val?_>
  void                    Visible            v     
  val?            %0.5  = Minus              !     %0.3, e0.0
  void                    Return             l     %0.5
Prom 12:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     $, e0.0
  prom-           %0.2  = MkArg                    unboundValue, delete.response[0x55bbe6fa3fa0]_p13, e0.0
  prom-           %0.3  = MkArg                    unboundValue, delete.response[0x55bbe6fa3fa0]_p14, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 13:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    a, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 14:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    predvars, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 15:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !v    $, e0.0
  prom-           %0.2  = MkArg                    unboundValue, delete.response[0x55bbe6fa3fa0]_p16, e0.0
  prom-           %0.3  = MkArg                    unboundValue, delete.response[0x55bbe6fa3fa0]_p17, e0.0
  val?            %0.4  = Call               !v    %0.1(%0.2, %0.3) e0.0   <val?_>
  lgl$#-          %0.5  = IsType                   %0.4 isA val+   <@?>
  void                    Branch                   %0.5 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    y, e0.0
  val?            %2.1  = Force              !v    %2.0, e0.0   <val?_>
  val?            %2.2  = Add                !v    1, %2.1, e0.0   <val?_>
  val?            %2.3  = Minus              !v    %2.2, e0.0
  val?            %2.4  = %2.3
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, delete.response[0x55bbe6fa3fa0]_p18, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.4:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract1_1D        !v    %0.4, %3.1, e0.0   <val?_>
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 16:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    a, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 17:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    predvars, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 18:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    y, e0.0
  val?            %0.2  = Force              !v    %0.1, e0.0   <val?_>
  val?            %0.3  = Add                !v    1, %0.2, e0.0   <val?_>
  void                    Visible            v     
  val?            %0.5  = Minus              !     %0.3, e0.0
  void                    Return             l     %0.5
Prom 19:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    a, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 20:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    factors, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 21:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    a, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 22:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    offset, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 23:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    a, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 24:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    specials, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 26:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    a, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 27:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    specials, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 28:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    a, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 29:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    specials, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 30:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !v    $, e0.0
  prom-           %0.2  = MkArg                    unboundValue, delete.response[0x55bbe6fa3fa0]_p31, e0.0
  prom-           %0.3  = MkArg                    unboundValue, delete.response[0x55bbe6fa3fa0]_p32, e0.0
  val?            %0.4  = Call               !v    %0.1(%0.2, %0.3) e0.0   <val?_>
  lgl$#-          %0.5  = IsType                   %0.4 isA val+   <@?>
  void                    Branch                   %0.5 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    i, e0.0
  val?            %2.1  = Force              !v    %2.0, e0.0   <val?_>
  val?            %2.2  = %2.1
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, delete.response[0x55bbe6fa3fa0]_p33, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.2:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract2_1D        !v    %0.4, %3.1, e0.0   <val?_>
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 31:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    a, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 32:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    specials, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 33:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    i, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 34:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     ifelse, e0.0
  prom-           %0.2  = MkArg                    unboundValue, delete.response[0x55bbe6fa3fa0]_p35, e0.0
  prom-           %0.3  = MkArg                    unboundValue, delete.response[0x55bbe6fa3fa0]_p36, e0.0
  prom-           %0.4  = MkArg                    unboundValue, delete.response[0x55bbe6fa3fa0]_p37, e0.0
  val?            %0.5  = Call               !     %0.1(%0.2, %0.3, %0.4) e0.0   <val?_>
  void                    Return             l     %0.5
Prom 35:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    b, e0.0
  val?            %0.2  = Force              !v    %0.1, e0.0   <val?_>
  val?^ | miss    %0.3  = LdVar              eR    y, e0.0
  void                    Visible            v     
  val?            %0.5  = Force              !     %0.3, e0.0   <val?_>
  val?            %0.6  = Gt                 !     %0.2, %0.5, e0.0   <val?_>
  void                    Return             l     %0.6
Prom 36:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    b, e0.0
  val?            %0.2  = Force              !v    %0.1, e0.0   <val?_>
  void                    Visible            v     
  val?            %0.4  = Sub                !     %0.2, 1, e0.0   <val?_>
  void                    Return             l     %0.4
Prom 37:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    b, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 38:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    a, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 39:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    specials, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 40:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !v    $, e0.0
  prom-           %0.2  = MkArg                    unboundValue, delete.response[0x55bbe6fa3fa0]_p41, e0.0
  prom-           %0.3  = MkArg                    unboundValue, delete.response[0x55bbe6fa3fa0]_p42, e0.0
  val?            %0.4  = Call               !v    %0.1(%0.2, %0.3) e0.0   <val?_>
  lgl$#-          %0.5  = IsType                   %0.4 isA val+   <@?>
  void                    Branch                   %0.5 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    i, e0.0
  val?            %2.1  = Force              !v    %2.0, e0.0   <val?_>
  val?            %2.2  = %2.1
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, delete.response[0x55bbe6fa3fa0]_p43, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.2:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract2_1D        !v    %0.4, %3.1, e0.0   <val?_>
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 41:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    a, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 42:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    specials, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 43:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    i, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 44:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     ifelse, e0.0
  prom-           %0.2  = MkArg                    unboundValue, delete.response[0x55bbe6fa3fa0]_p45, e0.0
  prom-           %0.3  = MkArg                    unboundValue, delete.response[0x55bbe6fa3fa0]_p46, e0.0
  prom-           %0.4  = MkArg                    unboundValue, delete.response[0x55bbe6fa3fa0]_p47, e0.0
  val?            %0.5  = Call               !     %0.1(%0.2, %0.3, %0.4) e0.0   <val?_>
  void                    Return             l     %0.5
Prom 45:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    b, e0.0
  val?            %0.2  = Force              !v    %0.1, e0.0   <val?_>
  val?^ | miss    %0.3  = LdVar              eR    y, e0.0
  void                    Visible            v     
  val?            %0.5  = Force              !     %0.3, e0.0   <val?_>
  val?            %0.6  = Gt                 !     %0.2, %0.5, e0.0   <val?_>
  void                    Return             l     %0.6
Prom 46:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    b, e0.0
  val?            %0.2  = Force              !v    %0.1, e0.0   <val?_>
  void                    Visible            v     
  val?            %0.4  = Sub                !     %0.2, 1, e0.0   <val?_>
  void                    Return             l     %0.4
Prom 47:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    b, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 48:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     $, e0.0
  prom-           %0.2  = MkArg                    unboundValue, delete.response[0x55bbe6fa3fa0]_p49, e0.0
  prom-           %0.3  = MkArg                    unboundValue, delete.response[0x55bbe6fa3fa0]_p50, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 49:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    a, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 50:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    factors, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 51:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     [, e0.0
  prom-           %0.2  = MkArg                    unboundValue, delete.response[0x55bbe6fa3fa0]_p52, e0.0
  prom-           %0.3  = MkArg                    unboundValue, delete.response[0x55bbe6fa3fa0]_p55, e0.0
  val?            %0.4  = NamedCall          !     %0.1(%0.2, %0.3, missingArg, drop=false) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 52:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     $, e0.0
  prom-           %0.2  = MkArg                    unboundValue, delete.response[0x55bbe6fa3fa0]_p53, e0.0
  prom-           %0.3  = MkArg                    unboundValue, delete.response[0x55bbe6fa3fa0]_p54, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 53:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    a, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 54:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    factors, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 55:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    y, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  val?            %0.4  = Minus              !     %0.3, e0.0
  void                    Return             l     %0.4

│ delete.response[0x55bbe6fa3fa0]                                              │
└──────────────────────────────────────────────────────────────────────────────┘
