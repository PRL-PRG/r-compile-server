
┌──────────────────────────────────────────────────────────────────────────────┐
│ eval[0x55bbee6d5bc0]                                                         │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch miss: 2                              │
│ Properties:  Eager, ForceOrd: 0                                              │
├────── Final PIR Version
eval[0x55bbee6d5bc0]
BB0
  val?^           %0.0  = LdArg                    0
  env             e0.1  = MkEnv              l     expr=%0.0, envir(miss)=missingArg, enclos(miss)=missingArg, parent=R_BaseNamespace, context 1
  prom-           %0.2  = MkArg                    unboundValue, eval[0x55bbee6d5bc0]_p0, e0.1
  val?^ | miss    %0.3  = CastType                 up %0.2
  void                    StArg              lW    envir, %0.3, e0.1
  prom-           %0.5  = MkArg                    unboundValue, eval[0x55bbee6d5bc0]_p1, e0.1
  val?^ | miss    %0.6  = CastType                 up %0.5
  void                    StArg              lW    enclos, %0.6, e0.1
  val?            %0.8  = Force!<lazy>       !v    %0.0, e0.1   <val?>
  val?^ | miss    %0.9  = LdVar              eR    envir, e0.1
  val?            %0.10 = Force!<lazy>       !v    %0.9, e0.1   <(vec|env)>
  val?^ | miss    %0.11 = LdVar              eR    enclos, e0.1
  void                    Visible            v     
  val?            %0.13 = Force!<lazy>       !     %0.11, e0.1   <env->
  val?            %0.14 = CallBuiltin        !     eval(%0.8, %0.10, %0.13) e0.1
  void                    Return             l     %0.14
Prom 0:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     parent.frame, <0x55bbe1f34170>, e0.0
  val?            %0.2  = Call               !     %0.1() e0.0   <env->
  void                    Return             l     %0.2
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    envir, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <env->
  lgl$-           %0.4  = Is                       %0.3, list
  lgl$-           %0.5  = AsLogical                %0.4
  lgl$#-          %0.6  = Identical                %0.5, true
  void                    Branch                   %0.6 -> BB2 (if true) | BB7 (if false)
BB2   <- [0]
  void                    Nop                !     
  lgl$-           %2.1  = %0.5
  goto BB3
BB7   <- [0]
  val?^ | miss    %7.0  = LdVar              eR    envir, e0.0
  void                    Visible            v     
  val?            %7.2  = Force<wrapped>     !     %7.0, e0.0   <env->
  lgl$-           %7.3  = Is                       %7.2, pairlist
  lgl$-           %7.4  = AsLogical                %7.3
  lgl$-           %7.5  = LOr                      %0.5, %7.4
  lgl$-           %7.6  = %7.5
  goto BB3
BB3   <- [2, 7]
  lgl$-           %3.0  = Phi                      %7.6:BB7, %2.1:BB2
  lgl$-           %3.1  = %3.0
  lgl$#-          %3.2  = CheckTrueFalse     e     %3.1
  void                    Branch                   %3.2 -> BB6 (if true) | BB4 (if false)
BB6   <- [3]
  (cls|spec|blt)  %6.0  = LdFun              !     parent.frame, e0.0
  val?            %6.1  = Call               !     %6.0() e0.0   <val?_>
  val?            %6.2  = %6.1
  goto BB5
BB4   <- [3]
  (cls|spec|blt)  %4.0  = LdFun              !     baseenv, <0x55bbe1e34278>, e0.0
  val?            %4.1  = Call               !     %4.0() e0.0   <env->
  val?            %4.2  = %4.1
  goto BB5
BB5   <- [4, 6]
  val?            %5.0  = Phi                      %4.2:BB4, %6.2:BB6
  val?            %5.1  = %5.0
  void                    Return             l     %5.1

│ eval[0x55bbee6d5bc0]                                                         │
└──────────────────────────────────────────────────────────────────────────────┘
