
┌──────────────────────────────────────────────────────────────────────────────┐
│ factor[0x55bbe6b6dd10]                                                       │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;NonRefl0,!Obj0 miss: 4               │
│ Properties:  ForceOrd: 0                                                     │
├────── Final PIR Version
factor[0x55bbe6b6dd10]
BB0
  val?^           %0.0  = LdArg                    1
  val?^           %0.1  = LdArg                    0
  env             e0.2  = MkEnv              l     x=%0.1, levels=%0.0, labels(miss)=missingArg, exclude(miss)=missingArg, ordered(miss)=missingArg, nmax(miss)=missingArg, parent=R_BaseNamespace, context 1
  prom-           %0.3  = MkArg                    unboundValue, factor[0x55bbe6b6dd10]_p0, e0.2
  val?^ | miss    %0.4  = CastType                 up %0.3
  void                    StArg              lW    labels, %0.4, e0.2
  void                    StArg              lW    exclude, na-lgl, e0.2
  prom-           %0.7  = MkArg                    unboundValue, factor[0x55bbe6b6dd10]_p2, e0.2
  val?^ | miss    %0.8  = CastType                 up %0.7
  void                    StArg              lW    ordered, %0.8, e0.2
  void                    StArg              lW    nmax, na-lgl, e0.2
  val+            %0.11 = Force!<lazy>       !vr   %0.1,    <val?>
  lgl$-           %0.12 = Is                       %0.11, NULL
  lgl$#-          %0.13 = CheckTrueFalse     e     %0.12
  void                    Branch                   %0.13 -> BB2 (if true) | BB3 (if false)
BB2   <- [0]
  (cls|spec|blt)  %2.0  = LdFun              !v    character, R_BaseNamespace
  fs              %2.1  = FrameState         R     0x55bbea22aec0+35: [%2.0], env=e0.2
  void                    Deopt              !v    %2.1, DeadCall@0x55bbec45baa0[Call#2], %2.0
BB3   <- [0]
  val+            %3.0  = CallSafeBuiltin    wed   names(%0.11)    <nil->
  void                    StVar              lW    nx, %3.0, e0.2
  lgl$-           %3.2  = Missing            eR    levels, e0.2
  lgl$#-          %3.3  = CheckTrueFalse     e     %3.2
  void                    Branch                   %3.3 -> BB4 (if true) | BB63 (if false)
BB4   <- [3]
  prom-           %4.0  = MkArg                    unboundValue, factor[0x55bbe6b6dd10]_p28 (!refl), e0.2
  dots-           %4.1  = DotsList           l     nmax=%4.0
  val?            %4.2  = StaticCall         !v    unique[0x55bbe82ba1e0](%0.11, missingArg, %4.1) { 0 2n } e0.2   <(int|real)>
  void                    StVar              lW    y, %4.2, e0.2
  val?^ | miss    %4.4  = LdVar              eR    order, e0.2
  lgl$#-          %4.5  = Identical                %4.4, function(..., na.last=TRUE, decreasing=FALSE, |...
  void                    Branch                   %4.5 -> BB64 (if true) | BB65 (if false)
BB63   <- [3]
  void                    Nop                !     
  goto BB11
BB64   <- [4]
  prom-           %64.0 = MkArg                    unboundValue, factor[0x55bbe6b6dd10]_p30 (!refl), e0.2
  val?            %64.1 = Call               !v    function(..., na.last=TRUE, decreasing=FALSE, |...(%64.0) e0.2   <int->
  void                    StVar              lW    ind, %64.1, e0.2
  val?^ | miss    %64.3 = LdVar              eR    unique, e0.2
  lgl$#-          %64.4 = Identical                %64.3, function(x, incomparables=FALSE, ...) <(rir::D|...
  void                    Branch                   %64.4 -> BB66 (if true) | BB67 (if false)
BB65   <- [4]
  fs              %65.0 = FrameState         R     0x55bbea22aec0+252: [], env=e0.2
  void                    Deopt              !v    %65.0, CallTarget@0x55bbec45baa0[Call#5], %4.4   !
BB11   <- [63, 10]
  val?^ | miss    %11.0 = LdVar              eR    force, e0.2
  lgl$#-          %11.1 = Identical                %11.0, function(x) <(rir::DispatchTable*)0x55bbeeba0d|...
  void                    Branch                   %11.1 -> BB68 (if true) | BB69 (if false)
BB66   <- [64]
  val?^ | miss    %66.0 = LdVar              eR    as.character, e0.2
  lgl$#-          %66.1 = Identical                %66.0, <blt as.character>
  void                    Branch                   %66.1 -> BB70 (if true) | BB71 (if false)
BB67   <- [64]
  void                    Nop                !     
  val?^ | miss    %67.1 = %64.3
  dr              %67.2 = CallTarget@0x55bbec45baa0[Call#6]
  goto BB7
BB68   <- [11]
  val?^ | miss    %68.0 = LdVar              eR    ordered, e0.2
  val?            %68.1 = Force!<lazy>       !v    %68.0, e0.2   <lgl$->
  val?^ | miss    %68.2 = LdVar              eR    is.character, e0.2
  lgl$#-          %68.3 = Identical                <blt is.character>, %68.2   <true>
  void                    Branch                   %68.3 -> BB72 (if true) | BB73 (if false)
BB69   <- [11]
  fs              %69.0 = FrameState         R     0x55bbea22aec0+344: [], env=e0.2
  void                    Deopt              !v    %69.0, CallTarget@0x55bbec45baa0[Call#8], %11.0   !
BB70   <- [66]
  val?^ | miss    %70.0 = LdVar              eR    y, e0.2
  val?            %70.1 = Force!<value>      !v    %70.0, e0.2   <(int|real)>
  val?            %70.2 = CallBuiltin        !v    as.character(%70.1) e0.2   <str->
  lgl$#-          %70.3 = IsType                   %70.2 isA val+   <true>
  void                    Branch                   %70.3 -> BB62 (if true) | BB9 (if false)
BB71   <- [66]
  void                    Nop                !     
  val?^ | miss    %71.1 = %66.0
  dr              %71.2 = CallTarget@0x55bbec45baa0[Call#7]
  goto BB7
BB7   <- [67, 71]
  val?^ | miss    %7.0  = Phi                      %67.1:BB67, %71.1:BB71
  val?^ | miss    %7.1  = %7.0
  dr              %7.2  = Phi                      %67.2:BB67, %71.2:BB71
  dr              %7.3  = %7.2
  fs              %7.4  = FrameState         R     0x55bbea22aec0+298: [], env=e0.2
  void                    Deopt              !v    %7.4, %7.3, %7.1   !
BB72   <- [68]
  val?^ | miss    %72.0 = LdVar              eR    x, e0.2
  val?            %72.1 = Force!<wrapped>    !v    %72.0, e0.2   <val?>
  lgl$#-          %72.2 = CallSafeBuiltin    wed   is.character(%72.1)    <lgl$->
  void                    Branch                   %72.2 -> BB61 (if true) | BB18 (if false)
BB73   <- [68]
  prom-           %73.0 = MkArg                    unboundValue, factor[0x55bbe6b6dd10]_p5, e0.2
  val?^           %73.1 = CastType                 up %73.0
  fs              %73.2 = FrameState         R     0x55bbea22aec0+376: [], env=e0.2
  env             e73.3 = (MkEnv)            l     x=%73.1, parent=R_BaseNamespace, context 0
  fs              %73.4 = FrameState         R     0x55bbeebaca40+5: [], env=e73.3, next=%73.2
  fs              %73.5 = FrameState         R     0x55bbee7faf60+5(pr): [%68.1], env=e0.2, next=%73.4
  void                    Deopt              !v    %73.5, DeadBranchReached@0x55bbec45baa0[Test#2], %68.3   !
BB62   <- [70]
  val?^ | miss    %62.0 = LdVar              eR    ind, e0.2
  val?            %62.1 = Force!<value>      !v    %62.0, e0.2   <int->
  val?            %62.2 = %62.1
  goto BB10
BB9   <- [70]
  prom-           %9.0  = MkArg                    unboundValue, factor[0x55bbe6b6dd10]_p38, e0.2
  prom-           %9.1  = %9.0
  goto BB10
BB61   <- [72]
  void                    Nop                !     
  goto BB19
BB18   <- [72]
  val?^ | miss    %18.0 = LdVar              eR    as.character, e0.2
  lgl$#-          %18.1 = Identical                <blt as.character>, %18.0   <true>
  void                    Branch                   %18.1 -> BB74 (if true) | BB75 (if false)
BB10   <- [62, 9]
  val?            %10.0 = Phi                      %62.2:BB62, %9.1:BB9
  val?            %10.1 = %10.0
  val?            %10.2 = Extract1_1D        !v    %70.2, %10.1, e0.2   <str->
  val?            %10.3 = StaticCall         !v    unique[0x55bbe4a1b670](%10.2) { 0 } e0.2   <str->
  void                    StVar              lW    levels, %10.3, e0.2
  goto BB11
BB19   <- [61, 74]
  val?^ | miss    %19.0 = LdVar              eR    levels, e0.2
  val?            %19.1 = Force!<lazy>       !v    %19.0, e0.2   <(int|str)->
  lgl$#-          %19.2 = IsType                   %19.1 isA val+   <true>
  void                    Branch                   %19.2 -> BB76 (if true) | BB77 (if false)
BB74   <- [18]
  val?^ | miss    %74.0 = LdVar              eR    x, e0.2
  val?            %74.1 = Force!<wrapped>    !v    %74.0, e0.2   <(int|real)>
  val?            %74.2 = CallBuiltin        !v    as.character(%74.1) e0.2   <str->
  void                    StVar              lW    x, %74.2, e0.2
  goto BB19
BB75   <- [18]
  fs              %75.0 = FrameState         R     0x55bbea22aec0+468: [%72.2], env=e0.2
  void                    Deopt              !v    %75.0, DeadBranchReached@0x55bbec45baa0[Test#3], %18.1   !
BB76   <- [19]
  val?^ | miss    %76.0 = LdVar              eR    is.na, e0.2
  lgl$#-          %76.1 = Identical                <blt is.na>, %76.0   <true>
  void                    Branch                   %76.1 -> BB78 (if true) | BB79 (if false)
BB77   <- [19]
  void                    Nop                !     
  lgl$#-          %77.1 = %19.2
  dr              %77.2 = DeadBranchReached@0x55bbec45baa0[Test#4]
  goto BB20
BB78   <- [76]
  val?^ | miss    %78.0 = LdVar              eR    match, e0.2
  lgl$#-          %78.1 = Identical                %78.0, function(x, table, nomatch=NA, incomparables=N|...
  void                    Branch                   %78.1 -> BB80 (if true) | BB81 (if false)
BB79   <- [76]
  void                    Nop                !     
  lgl$#-          %79.1 = %76.1
  dr              %79.2 = DeadBranchReached@0x55bbec45baa0[Test#5]
  goto BB20
BB20   <- [77, 79, 81]
  val?^ | miss    %20.0 = Phi                      %77.1:BB77, %79.1:BB79, %81.1:BB81
  val?^ | miss    %20.1 = %20.0
  dr              %20.2 = Phi                      %77.2:BB77, %79.2:BB79, %81.2:BB81
  dr              %20.3 = %20.2
  fs              %20.4 = FrameState         R     0x55bbea22aec0+599: [%19.1], env=e0.2
  void                    Deopt              !v    %20.4, %20.3, %20.1   !
BB80   <- [78]
  prom-           %80.0 = MkArg                    unboundValue, factor[0x55bbe6b6dd10]_p6, e0.2
  prom-           %80.1 = MkArg                    unboundValue, factor[0x55bbe6b6dd10]_p7, e0.2
  ct              %80.2 = PushContext        lCL   %80.0, %80.1, match(levels, exclude), function(x, table, nomatch=NA, incomparables=N|..., e0.2
  val?^           %80.3 = CastType                 up %80.1
  val?^           %80.4 = CastType                 up %80.0
  env             e80.5 = MkEnv              l     x=%80.4, table=%80.3, nomatch(miss)=NA, incomparables(miss)=nil, parent=R_BaseNamespace, context 1
  val?            %80.6 = Force!<lazy>       !vL   %80.4, e80.5   <val?+>
  val?            %80.7 = Force!<lazy>       !vL   %80.3, e80.5   <val?>
  val?            %80.8 = CallBuiltin        !v    match(%80.6, %80.7, NA, nil) e80.5
  val?            %80.9 = PopContext         C     %80.8, %80.2   <int->
  lgl$#-          %80.10 = IsType                   %80.9 isA int-
  void                    Branch                   %80.10 -> BB82 (if true) | BB83 (if false)
BB81   <- [78]
  void                    Nop                !     
  val?^ | miss    %81.1 = %78.0
  dr              %81.2 = CallTarget@0x55bbec45baa0[Call#15]
  goto BB20
BB82   <- [80]
  int-            %82.0 = CastType           d     dn %80.9
  lgl-            %82.1 = CallSafeBuiltin    wed   is.na(%82.0)    <lgl->
  lgl$#-          %82.2 = IsType                   %19.1 isA val?-
  void                    Branch                   %82.2 -> BB84 (if true) | BB85 (if false)
BB83   <- [80]
  fs              %83.0 = FrameState         R     0x55bbea22aec0+732: [%19.1, <blt is.na>, %80.9], env=e0.2
  void                    Deopt              !v    %83.0, Typecheck@0x55bbec45baa0[Type#37], %80.9   !
BB84   <- [82]
  val?-           %84.0 = CastType           d     dn %19.1   <(int|str)->
  val?            %84.1 = Extract1_1D        wed   %84.0, %82.1, elided   <(int|str)->
  void                    StVar              lW    levels, %84.1, e0.2
  val?^ | miss    %84.3 = LdVar              eR    match, e0.2
  lgl$#-          %84.4 = Identical                %84.3, function(x, table, nomatch=NA, incomparables=N|...
  void                    Branch                   %84.4 -> BB86 (if true) | BB87 (if false)
BB85   <- [82]
  fs              %85.0 = FrameState         R     0x55bbea22aec0+754: [%19.1, %82.1], env=e0.2
  void                    Deopt              !v    %85.0, Typecheck@0x55bbec45baa0[Type#27], %19.1   !
BB86   <- [84]
  prom-           %86.0 = MkArg                    unboundValue, factor[0x55bbe6b6dd10]_p8, e0.2
  prom-           %86.1 = MkArg                    unboundValue, factor[0x55bbe6b6dd10]_p9 (!refl), e0.2
  ct              %86.2 = PushContext        lCL   %86.0, %86.1, match(x, levels), function(x, table, nomatch=NA, incomparables=N|..., e0.2
  val?^           %86.3 = CastType                 up %86.1
  val?^           %86.4 = CastType                 up %86.0
  env             e86.5 = MkEnv              l     x=%86.4, table=%86.3, nomatch(miss)=NA, incomparables(miss)=nil, parent=R_BaseNamespace, context 1
  val?            %86.6 = Force!<lazy>       !vL   %86.4, e86.5   <val?+>
  val?            %86.7 = Force!<lazy>       !vrL  %86.3, e86.5   <val?>
  val?            %86.8 = CallBuiltin        !v    match(%86.6, %86.7, NA, nil) e86.5
  val?            %86.9 = PopContext         C     %86.8, %86.2   <int->
  void                    StVar              lW    f, %86.9, e0.2
  val?^ | miss    %86.11 = LdVar              eR    nx, e0.2
  lgl$#-          %86.12 = IsType                   %86.11 isA val?~- | miss
  void                    Branch                   %86.12 -> BB88 (if true) | BB89 (if false)
BB87   <- [84]
  fs              %87.0 = FrameState         R     0x55bbea22aec0+775: [], env=e0.2
  void                    Deopt              !v    %87.0, CallTarget@0x55bbec45baa0[Call#16], %84.3   !
BB88   <- [86]
  val?~- | miss   %88.0 = CastType           d     dn %86.11
  val?-           %88.1 = Force!<value>            %88.0,    <nil->
  lgl$-           %88.2 = Is                       %88.1, NULL
  lgl$-           %88.3 = Not                d     %88.2, elided
  lgl$#-          %88.4 = CheckTrueFalse     e     %88.3
  void                    Branch                   %88.4 -> BB60 (if true) | BB30 (if false)
BB89   <- [86]
  void                    Nop                !     
  val?^ | miss    %89.1 = %86.11
  dr              %89.2 = Typecheck@0x55bbec45baa0[Type#43]
  goto BB28
BB60   <- [88]
  (cls|spec|blt)  %60.0 = LdFun              !v    names<-, e0.2
  fs              %60.1 = FrameState         R     0x55bbea22aec0+876: [%88.1, %60.0], env=e0.2
  void                    Deopt              !v    %60.1, DeadCall@0x55bbec45baa0[Call#17], %60.0   !
BB30   <- [88]
  lgl$-           %30.0 = Missing            eR    labels, e0.2
  lgl$#-          %30.1 = CheckTrueFalse     e     %30.0
  void                    Branch                   %30.1 -> BB55 (if true) | BB31 (if false)
BB28   <- [89, 91, 93]
  val?^ | miss    %28.0 = Phi                      %89.1:BB89, %91.1:BB91, %93.1:BB93
  val?^ | miss    %28.1 = %28.0
  dr              %28.2 = Phi                      %89.2:BB89, %91.2:BB91, %93.2:BB93
  dr              %28.3 = %28.2
  fs              %28.4 = FrameState         R     0x55bbea22aec0+826: [], env=e0.2
  void                    Deopt              !v    %28.4, %28.3, %28.1   !
BB55   <- [30]
  val?^ | miss    %55.0 = LdVar              eR    as.character, e0.2
  lgl$#-          %55.1 = Identical                <blt as.character>, %55.0   <true>
  void                    Branch                   %55.1 -> BB92 (if true) | BB93 (if false)
BB31   <- [30]
  val?^ | miss    %31.0 = LdVar              eR    length, e0.2
  lgl$#-          %31.1 = Identical                <blt length>, %31.0   <true>
  void                    Branch                   %31.1 -> BB90 (if true) | BB91 (if false)
BB92   <- [55]
  val?^ | miss    %92.0 = LdVar              eR    levels, e0.2
  val?            %92.1 = Force!<value>      !v    %92.0, e0.2   <str->
  lgl$#-          %92.2 = IsType                   %92.1 isA val?-
  void                    Branch                   %92.2 -> BB96 (if true) | BB97 (if false)
BB93   <- [55]
  void                    Nop                !     
  lgl$#-          %93.1 = %55.1
  dr              %93.2 = DeadBranchReached@0x55bbec45baa0[Test#10]
  goto BB28
BB90   <- [31]
  val?^ | miss    %90.0 = LdVar              eR    labels, e0.2
  val?            %90.1 = Force!<lazy>       !v    %90.0, e0.2   <str->
  lgl$#-          %90.2 = IsType                   %90.1 isA val?-
  void                    Branch                   %90.2 -> BB94 (if true) | BB95 (if false)
BB91   <- [31]
  void                    Nop                !     
  lgl$#-          %91.1 = %31.1
  dr              %91.2 = DeadBranchReached@0x55bbec45baa0[Test#6]
  goto BB28
BB96   <- [92]
  val?-           %96.0 = CastType           d     dn %92.1   <str->
  val+            %96.1 = CallSafeBuiltin    wed   as.character(%96.0)    <str->
  (cls|spec|blt)  %96.2 = LdFun              !v    levels<-, <0x55bbe1e23cb8>, e0.2
  val?^ | miss    %96.3 = LdVar              eR    f, e0.2
  lgl$#-          %96.4 = IsType                   %96.3 isA int-
  void                    Branch                   %96.4 -> BB100 (if true) | BB101 (if false)
BB97   <- [92]
  fs              %97.0 = FrameState         R     0x55bbea22aec0+1824: [<blt as.character>, %92.1], env=e0.2
  void                    Deopt              !v    %97.0, Typecheck@0x55bbec45baa0[Type#84], %92.1   !
BB94   <- [90]
  val?-           %94.0 = CastType           d     dn %90.1   <str->
  (int|real)$-    %94.1 = CallSafeBuiltin    wed   length(%94.0)    <int$->
  lgl$#-          %94.2 = IsType                   %94.1 isA int$-
  void                    Branch                   %94.2 -> BB98 (if true) | BB99 (if false)
BB95   <- [90]
  fs              %95.0 = FrameState         R     0x55bbea22aec0+1020: [<blt length>, %90.1], env=e0.2
  void                    Deopt              !v    %95.0, Typecheck@0x55bbec45baa0[Type#47], %90.1   !
BB100   <- [96]
  int-            %100.0 = CastType           d     dn %96.3
  val?            %100.1 = NamedCall          !v    %96.2(%100.0, value=%96.1) e0.2
  void                    StVar              lW    f, %100.1, e0.2
  goto BB54
BB101   <- [96]
  fs              %101.0 = FrameState         R     0x55bbea22aec0+1851: [%96.1], env=e0.2
  void                    Deopt              !v    %101.0, Typecheck@0x55bbec45baa0[Type#86], %96.3   !
BB98   <- [94]
  int$-           %98.0 = CastType           d     dn %94.1
  void                    StVar              lW    nlab, %98.0, e0.2
  val?^ | miss    %98.2 = LdVar              eR    length, e0.2
  lgl$#-          %98.3 = Identical                <blt length>, %98.2   <true>
  void                    Branch                   %98.3 -> BB102 (if true) | BB103 (if false)
BB99   <- [94]
  fs              %99.0 = FrameState         R     0x55bbea22aec0+1042: [%94.1], env=e0.2
  void                    Deopt              !v    %99.0, Typecheck@0x55bbec45baa0[Type#48], %94.1   !
BB54   <- [100, 126]
  (cls|spec|blt)  %54.0 = LdFun              !v    <-, <0x55bbe1e14da8>, e0.2
  prom-           %54.1 = MkArg                    unboundValue, factor[0x55bbe6b6dd10]_p22, e0.2
  prom-           %54.2 = MkArg                    unboundValue, factor[0x55bbe6b6dd10]_p24, e0.2
  val?            %54.3 = Call               !v    %54.0(%54.1, %54.2) e0.2
  val?^ | miss    %54.4 = LdVar              eR    f, e0.2
  void                    Visible            v     
  val?            %54.6 = Force!<value>      !     %54.4, e0.2   <int>
  void                    Return             l     %54.6
BB102   <- [98]
  val?^ | miss    %102.0 = LdVar              eR    levels, e0.2
  lgl$#-          %102.1 = IsType                   %102.0 isA int-
  void                    Branch                   %102.1 -> BB104 (if true) | BB105 (if false)
BB103   <- [98]
  void                    Nop                !     
  lgl$#-          %103.1 = %98.3
  dr              %103.2 = DeadBranchReached@0x55bbec45baa0[Test#7]
  goto BB36
BB104   <- [102]
  int-            %104.0 = CastType           d     dn %102.0
  (int|real)$-    %104.1 = CallSafeBuiltin    wed   length(%104.0)    <int$->
  lgl$#-          %104.2 = IsType                   %104.1 isA int$-
  void                    Branch                   %104.2 -> BB106 (if true) | BB107 (if false)
BB105   <- [102]
  void                    Nop                !     
  val?^ | miss    %105.1 = %102.0
  dr              %105.2 = Typecheck@0x55bbec45baa0[Type#51]
  goto BB36
BB36   <- [103, 105]
  val?^ | miss    %36.0 = Phi                      %103.1:BB103, %105.1:BB105
  val?^ | miss    %36.1 = %36.0
  dr              %36.2 = Phi                      %103.2:BB103, %105.2:BB105
  dr              %36.3 = %36.2
  fs              %36.4 = FrameState         R     0x55bbea22aec0+1056: [], env=e0.2
  void                    Deopt              !v    %36.4, %36.3, %36.1   !
BB106   <- [104]
  int$-           %106.0 = CastType           d     dn %104.1
  lgl$-           %106.1 = Eq                 d     %98.0, %106.0, elided   <lgl$->
  lgl$#-          %106.2 = CheckTrueFalse     e     %106.1
  void                    Branch                   %106.2 -> BB43 (if true) | BB40 (if false)
BB107   <- [104]
  void                    Nop                !     
  (int|real)$-    %107.1 = %104.1
  dr              %107.2 = Typecheck@0x55bbec45baa0[Type#52]
  goto BB38
BB43   <- [106]
  val?^ | miss    %43.0 = LdVar              eR    unique, e0.2
  lgl$#-          %43.1 = Identical                %43.0, function(x, incomparables=FALSE, ...) <(rir::D|...
  void                    Branch                   %43.1 -> BB108 (if true) | BB109 (if false)
BB40   <- [106]
  lgl$-           %40.0 = Eq                 d     %98.0, 1L, elided   <val?_>
  lgl$#-          %40.1 = CheckTrueFalse     e     %40.0
  void                    Branch                   %40.1 -> BB42 (if true) | BB41 (if false)
BB38   <- [107, 109, 111]
  val?^ | miss    %38.0 = Phi                      %107.1:BB107, %109.1:BB109, %111.1:BB111
  val?^ | miss    %38.1 = %38.0
  dr              %38.2 = Phi                      %107.2:BB107, %109.2:BB109, %111.2:BB111
  dr              %38.3 = %38.2
  fs              %38.4 = FrameState         R     0x55bbea22aec0+1161: [%98.0, %104.1], env=e0.2
  void                    Deopt              !v    %38.4, %38.3, %38.1   !
BB108   <- [43]
  val?^ | miss    %108.0 = LdVar              eR    as.character, e0.2
  lgl$#-          %108.1 = Identical                %108.0, <blt as.character>
  void                    Branch                   %108.1 -> BB110 (if true) | BB111 (if false)
BB109   <- [43]
  void                    Nop                !     
  val?^ | miss    %109.1 = %43.0
  dr              %109.2 = CallTarget@0x55bbec45baa0[Call#26]
  goto BB38
BB42   <- [40]
  (cls|spec|blt)  %42.0 = LdFun              !v    paste0, e0.2
  fs              %42.1 = FrameState         R     0x55bbea22aec0+1266: [%42.0], env=e0.2
  void                    Deopt              !v    %42.1, DeadCall@0x55bbec45baa0[Call#23], %42.0   !
BB41   <- [40]
  (cls|spec|blt)  %41.0 = LdFun              !v    stop, e0.2
  fs              %41.1 = FrameState         R     0x55bbea22aec0+1215: [%41.0], env=e0.2
  void                    Deopt              !v    %41.1, DeadCall@0x55bbec45baa0[Call#20], %41.0   !
BB110   <- [108]
  val?^ | miss    %110.0 = LdVar              eR    labels, e0.2
  val?            %110.1 = Force!<wrapped>    !v    %110.0, e0.2   <str->
  val?            %110.2 = CallBuiltin        !v    as.character(%110.1) e0.2   <str->
  void                    StVar              lW    xlevs, %110.2, e0.2
  val?            %110.4 = StaticCall         !v    unique[0x55bbe4a1b670](%110.2) { 0 } e0.2   <str->
  void                    StVar              lW    nlevs, %110.4, e0.2
  val?^ | miss    %110.6 = LdVar              eR    attributes, e0.2
  lgl$#-          %110.7 = Identical                <blt attributes>, %110.6   <true>
  void                    Branch                   %110.7 -> BB112 (if true) | BB113 (if false)
BB111   <- [108]
  void                    Nop                !     
  val?^ | miss    %111.1 = %108.0
  dr              %111.2 = CallTarget@0x55bbec45baa0[Call#27]
  goto BB38
BB112   <- [110]
  val?^ | miss    %112.0 = LdVar              eR    f, e0.2
  lgl$#-          %112.1 = IsType                   %112.0 isA int-
  void                    Branch                   %112.1 -> BB114 (if true) | BB115 (if false)
BB113   <- [110]
  void                    Nop                !     
  lgl$#-          %113.1 = %110.7
  dr              %113.2 = DeadBranchReached@0x55bbec45baa0[Test#8]
  goto BB44
BB114   <- [112]
  int-            %114.0 = CastType           d     dn %112.0
  val?            %114.1 = CallBuiltin        !v    attributes(%114.0) e0.2   <nil->
  void                    StVar              lW    at, %114.1, e0.2
  (cls|spec|blt)  %114.3 = LdFun              !v    <-, <0x55bbe1e14da8>, e0.2
  prom-           %114.4 = MkArg                    unboundValue, factor[0x55bbe6b6dd10]_p15, e0.2
  prom-           %114.5 = MkArg                    unboundValue, factor[0x55bbe6b6dd10]_p18, e0.2
  val?            %114.6 = Call               !v    %114.3(%114.4, %114.5) e0.2
  val?^ | miss    %114.7 = LdVar              eR    match, e0.2
  lgl$#-          %114.8 = Identical                %114.7, function(x, table, nomatch=NA, incomparables=N|...
  void                    Branch                   %114.8 -> BB116 (if true) | BB117 (if false)
BB115   <- [112]
  void                    Nop                !     
  val?^ | miss    %115.1 = %112.0
  dr              %115.2 = Typecheck@0x55bbec45baa0[Type#69]
  goto BB44
BB44   <- [113, 115]
  val?^ | miss    %44.0 = Phi                      %113.1:BB113, %115.1:BB115
  val?^ | miss    %44.1 = %44.0
  dr              %44.2 = Phi                      %113.2:BB113, %115.2:BB115
  dr              %44.3 = %44.2
  fs              %44.4 = FrameState         R     0x55bbea22aec0+1422: [], env=e0.2
  void                    Deopt              !v    %44.4, %44.3, %44.1   !
BB116   <- [114]
  prom-           %116.0 = MkArg                    unboundValue, factor[0x55bbe6b6dd10]_p19, e0.2
  prom-           %116.1 = MkArg                    unboundValue, factor[0x55bbe6b6dd10]_p20, e0.2
  ct              %116.2 = PushContext        lCL   %116.0, %116.1, match(xlevs, nlevs), function(x, table, nomatch=NA, incomparables=N|..., e0.2
  val?^           %116.3 = CastType                 up %116.1
  val?^           %116.4 = CastType                 up %116.0
  env             e116.5 = MkEnv              l     x=%116.4, table=%116.3, nomatch(miss)=NA, incomparables(miss)=nil, parent=R_BaseNamespace, context 1
  val?            %116.6 = Force!<lazy>       !vL   %116.4, e116.5   <val?+>
  val?            %116.7 = Force!<lazy>       !vL   %116.3, e116.5   <val?>
  val?            %116.8 = CallBuiltin        !v    match(%116.6, %116.7, NA, nil) e116.5
  val?            %116.9 = PopContext         C     %116.8, %116.2   <int->
  lgl$#-          %116.10 = IsType                   %116.9 isA val+   <true>
  lgl$#-          %116.11 = IsType                   %116.9 isA int-
  void                    Branch                   %116.10 -> BB118 (if true) | BB119 (if false)
BB117   <- [114]
  fs              %117.0 = FrameState         R     0x55bbea22aec0+1564: [%114.6], env=e0.2
  void                    Deopt              !v    %117.0, CallTarget@0x55bbec45baa0[Call#31], %114.7   !
BB118   <- [116]
  val?^ | miss    %118.0 = LdVar              eR    f, e0.2
  lgl$#-          %118.1 = IsType                   %118.0 isA int-
  void                    Branch                   %118.1 -> BB120 (if true) | BB121 (if false)
BB119   <- [116]
  void                    Nop                !     
  lgl$#-          %119.1 = %116.10
  dr              %119.2 = DeadBranchReached@0x55bbec45baa0[Test#9]
  goto BB48
BB120   <- [118]
  int-            %120.0 = CastType           d     dn %118.0
  void                    Branch                   %116.11 -> BB122 (if true) | BB123 (if false)
BB121   <- [118]
  void                    Nop                !     
  val?^ | miss    %121.1 = %118.0
  dr              %121.2 = Typecheck@0x55bbec45baa0[Type#79]
  goto BB48
BB48   <- [119, 121, 123]
  val?^ | miss    %48.0 = Phi                      %119.1:BB119, %121.1:BB121, %123.1:BB123
  val?^ | miss    %48.1 = %48.0
  dr              %48.2 = Phi                      %119.2:BB119, %121.2:BB121, %123.2:BB123
  dr              %48.3 = %48.2
  fs              %48.4 = FrameState         R     0x55bbea22aec0+1602: [%116.9], env=e0.2
  void                    Deopt              !v    %48.4, %48.3, %48.1   !
BB122   <- [120]
  int-            %122.0 = CastType           d     dn %116.9
  int-            %122.1 = Extract1_1D        wed   %122.0, %120.0, elided   <int->
  void                    StVar              lW    f, %122.1, e0.2
  val?^ | miss    %122.3 = LdVar              eR    at, e0.2
  lgl$#-          %122.4 = IsType                   %122.3 isA val?~+ | miss
  void                    Branch                   %122.4 -> BB124 (if true) | BB125 (if false)
BB123   <- [120]
  void                    Nop                !     
  val?            %123.1 = %116.9
  dr              %123.2 = Typecheck@0x55bbec45baa0[Type#77]
  goto BB48
BB124   <- [122]
  val?~+ | miss   %124.0 = CastType           d     dn %122.3
  val?+           %124.1 = Force!<value>            %124.0,    <vec$+>
  (cls|spec|blt)  %124.2 = LdFun              !v    attributes<-, <0x55bbe1e20128>, e0.2
  val?^ | miss    %124.3 = LdVar              eR    f, e0.2
  lgl$#-          %124.4 = IsType                   %124.3 isA int-
  void                    Branch                   %124.4 -> BB126 (if true) | BB127 (if false)
BB125   <- [122]
  fs              %125.0 = FrameState         R     0x55bbea22aec0+1668: [], env=e0.2
  void                    Deopt              !v    %125.0, Typecheck@0x55bbec45baa0[Type#81], %122.3   !
BB126   <- [124]
  int-            %126.0 = CastType           d     dn %124.3
  val?            %126.1 = NamedCall          !v    %124.2(%126.0, value=%124.1) e0.2
  void                    StVar              lW    f, %126.1, e0.2
  goto BB54
BB127   <- [124]
  fs              %127.0 = FrameState         R     0x55bbea22aec0+1682: [%124.1], env=e0.2
  void                    Deopt              !v    %127.0, Typecheck@0x55bbec45baa0[Type#82], %124.3   !
Prom 0:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    levels, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     is.ordered, <0x55bbee9f8670>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, factor[0x55bbe6b6dd10]_p3, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <lgl$->
  void                    Return             l     %0.3
Prom 3:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    x, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <val?>
  void                    Return             l     %0.3
Prom 5:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    ordered, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <lgl$->
  void                    Return             l     %0.3
Prom 6:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    levels, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <(int|str)->
  void                    Return             l     %0.3
Prom 7:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    exclude, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <(nil|lgl)->
  void                    Return             l     %0.3
Prom 8:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    x, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 9:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    levels, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <(int|str)->
  void                    Return             l     %0.3
Prom 15:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     $, e0.0
  prom-           %0.2  = MkArg                    unboundValue, factor[0x55bbe6b6dd10]_p16, e0.0
  prom-           %0.3  = MkArg                    unboundValue, factor[0x55bbe6b6dd10]_p17, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 16:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    at, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 17:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    levels, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 18:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    nlevs, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 19:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    xlevs, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 20:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    nlevs, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 22:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     class, e0.0
  prom-           %0.2  = MkArg                    unboundValue, factor[0x55bbe6b6dd10]_p23, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 23:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    f, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 24:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     c, e0.0
  prom-           %0.2  = MkArg                    unboundValue, factor[0x55bbe6b6dd10]_p25, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2, "factor") e0.0   <val?_>
  void                    Return             l     %0.3
Prom 25:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    ordered, e0.0
  val?            %0.2  = Force              !v    %0.1, e0.0   <val?_>
  lgl$#-          %0.3  = CheckTrueFalse     we    %0.2
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  void                    Visible            v     
  str$#-          %2.1  = "ordered"
  goto BB3
BB4   <- [0]
  void                    Invisible          v     
  nil-            %4.1  = nil
  goto BB3
BB3   <- [4, 2]
  (nil|str)-      %3.0  = Phi                      %4.1:BB4, %2.1:BB2
  (nil|str)-      %3.1  = %3.0
  void                    Return             l     %3.1
Prom 28:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    nmax, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <lgl$->
  void                    Return             l     %0.3
Prom 30:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    y, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <(int|real)>
  void                    Return             l     %0.3
Prom 38:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    ind, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3

│ factor[0x55bbe6b6dd10]                                                       │
└──────────────────────────────────────────────────────────────────────────────┘
