
┌──────────────────────────────────────────────────────────────────────────────┐
│ factor[0x55bbe44d8110]                                                       │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch miss: 5                              │
│ Properties:  Eager, ForceOrd: 0                                              │
├────── Final PIR Version
factor[0x55bbe44d8110]
BB0
  val?^           %0.0  = LdArg                    0
  env             e0.1  = MkEnv              l     x=%0.0, levels(miss)=missingArg, labels(miss)=missingArg, exclude(miss)=missingArg, ordered(miss)=missingArg, nmax(miss)=missingArg, parent=R_BaseNamespace, context 1
  prom-           %0.2  = MkArg                    unboundValue, factor[0x55bbe44d8110]_p0 (!refl), e0.1
  val?^ | miss    %0.3  = CastType                 up %0.2
  void                    StArg              lW    labels, %0.3, e0.1
  void                    StArg              lW    exclude, na-lgl, e0.1
  prom-           %0.6  = MkArg                    unboundValue, factor[0x55bbe44d8110]_p2, e0.1
  val?^ | miss    %0.7  = CastType                 up %0.6
  void                    StArg              lW    ordered, %0.7, e0.1
  void                    StArg              lW    nmax, na-lgl, e0.1
  val?            %0.10 = Force!<lazy>       !v    %0.0, e0.1   <val?>
  lgl$-           %0.11 = Is                       %0.10, NULL
  lgl$#-          %0.12 = CheckTrueFalse     e     %0.11
  void                    Branch                   %0.12 -> BB66 (if true) | BB3 (if false)
BB66   <- [0]
  (cls|spec|blt)  %66.0 = LdFun              !v    character, e0.1
  fs              %66.1 = FrameState         R     0x55bbea22aec0+35: [%66.0], env=e0.1
  void                    Deopt              !v    %66.1, DeadCall@0x55bbec45baa0[Call#2], %66.0   !
BB3   <- [0]
  val?^ | miss    %3.0  = LdVar              eR    names, e0.1
  lgl$#-          %3.1  = Identical                <blt names>, %3.0   <true>
  void                    Branch                   %3.1 -> BB68 (if true) | BB69 (if false)
BB68   <- [3]
  val?^ | miss    %68.0 = LdVar              eR    x, e0.1
  val?            %68.1 = Force!<wrapped>    !v    %68.0, e0.1   <val?>
  val?            %68.2 = CallBuiltin        !v    names(%68.1) e0.1   <nil->
  void                    StVar              lW    nx, %68.2, e0.1
  lgl$-           %68.4 = Missing            eR    levels, e0.1
  lgl$#-          %68.5 = CheckTrueFalse     e     %68.4
  void                    Branch                   %68.5 -> BB58 (if true) | BB6 (if false)
BB69   <- [3]
  fs              %69.0 = FrameState         R     0x55bbea22aec0+9: [%0.10], env=e0.1
  void                    Deopt              !v    %69.0, DeadBranchReached@0x55bbec45baa0[Test#0], %3.1   !
BB58   <- [68]
  val?^ | miss    %58.0 = LdVar              eR    unique, e0.1
  lgl$#-          %58.1 = Identical                %58.0, function(x, incomparables=FALSE, ...) <(rir::D|...
  void                    Branch                   %58.1 -> BB70 (if true) | BB71 (if false)
BB6   <- [68]
  void                    Nop                !     
  goto BB7
BB70   <- [58]
  prom-           %70.0 = MkArg                    unboundValue, factor[0x55bbe44d8110]_p28, e0.1
  dots-           %70.1 = DotsList           l     nmax=%70.0
  val?^ | miss    %70.2 = LdVar              eR    x, e0.1
  val?            %70.3 = Force!<wrapped>    !v    %70.2, e0.1   <(int|real)>
  val?            %70.4 = StaticCall         !v    unique[0x55bbeaedce90](%70.3, missingArg, %70.1) { 0 2n } e0.1   <(int|real)>
  void                    StVar              lW    y, %70.4, e0.1
  val?^ | miss    %70.6 = LdVar              eR    order, e0.1
  lgl$#-          %70.7 = Identical                %70.6, function(..., na.last=TRUE, decreasing=FALSE, |...
  void                    Branch                   %70.7 -> BB74 (if true) | BB75 (if false)
BB71   <- [58]
  fs              %71.0 = FrameState         R     0x55bbea22aec0+176: [], env=e0.1
  void                    Deopt              !v    %71.0, CallTarget@0x55bbec45baa0[Call#4], %58.0   !
BB7   <- [6, 64]
  val?^ | miss    %7.0  = LdVar              eR    force, e0.1
  lgl$#-          %7.1  = Identical                %7.0, function(x) <(rir::DispatchTable*)0x55bbeeba0d|...
  void                    Branch                   %7.1 -> BB72 (if true) | BB73 (if false)
BB74   <- [70]
  prom-           %74.0 = MkArg                    unboundValue, factor[0x55bbe44d8110]_p30 (!refl), e0.1
  val?            %74.1 = Call               !v    function(..., na.last=TRUE, decreasing=FALSE, |...(%74.0) e0.1   <int->
  void                    StVar              lW    ind, %74.1, e0.1
  val?^ | miss    %74.3 = LdVar              eR    unique, e0.1
  lgl$#-          %74.4 = Identical                %74.3, function(x, incomparables=FALSE, ...) <(rir::D|...
  void                    Branch                   %74.4 -> BB78 (if true) | BB79 (if false)
BB75   <- [70]
  fs              %75.0 = FrameState         R     0x55bbea22aec0+252: [], env=e0.1
  void                    Deopt              !v    %75.0, CallTarget@0x55bbec45baa0[Call#5], %70.6   !
BB72   <- [7]
  val?^ | miss    %72.0 = LdVar              eR    ordered, e0.1
  val?            %72.1 = Force!<lazy>       !v    %72.0, e0.1   <lgl$->
  val?^ | miss    %72.2 = LdVar              eR    is.character, e0.1
  lgl$#-          %72.3 = Identical                <blt is.character>, %72.2   <true>
  void                    Branch                   %72.3 -> BB76 (if true) | BB77 (if false)
BB73   <- [7]
  fs              %73.0 = FrameState         R     0x55bbea22aec0+344: [], env=e0.1
  void                    Deopt              !v    %73.0, CallTarget@0x55bbec45baa0[Call#8], %7.0   !
BB78   <- [74]
  val?^ | miss    %78.0 = LdVar              eR    as.character, e0.1
  lgl$#-          %78.1 = Identical                %78.0, <blt as.character>
  void                    Branch                   %78.1 -> BB80 (if true) | BB81 (if false)
BB79   <- [74]
  void                    Nop                !     
  val?^ | miss    %79.1 = %74.3
  dr              %79.2 = CallTarget@0x55bbec45baa0[Call#6]
  goto BB61
BB76   <- [72]
  val?^ | miss    %76.0 = LdVar              eR    x, e0.1
  val?            %76.1 = Force!<wrapped>    !v    %76.0, e0.1   <val?>
  lgl$#-          %76.2 = CallSafeBuiltin    wed   is.character(%76.1)    <lgl$->
  void                    Branch                   %76.2 -> BB57 (if true) | BB14 (if false)
BB77   <- [72]
  prom-           %77.0 = MkArg                    unboundValue, factor[0x55bbe44d8110]_p5, e0.1
  val?^           %77.1 = CastType                 up %77.0
  fs              %77.2 = FrameState         R     0x55bbea22aec0+376: [], env=e0.1
  env             e77.3 = (MkEnv)            l     x=%77.1, parent=R_BaseNamespace, context 0
  fs              %77.4 = FrameState         R     0x55bbeebaca40+5: [], env=e77.3, next=%77.2
  fs              %77.5 = FrameState         R     0x55bbee7faf60+5(pr): [%72.1], env=e0.1, next=%77.4
  void                    Deopt              !v    %77.5, DeadBranchReached@0x55bbec45baa0[Test#2], %72.3   !
BB80   <- [78]
  val?^ | miss    %80.0 = LdVar              eR    y, e0.1
  val?            %80.1 = Force!<value>      !v    %80.0, e0.1   <(int|real)>
  val?            %80.2 = CallBuiltin        !v    as.character(%80.1) e0.1   <str->
  lgl$#-          %80.3 = IsType                   %80.2 isA val+   <true>
  void                    Branch                   %80.3 -> BB65 (if true) | BB63 (if false)
BB81   <- [78]
  void                    Nop                !     
  val?^ | miss    %81.1 = %78.0
  dr              %81.2 = CallTarget@0x55bbec45baa0[Call#7]
  goto BB61
BB61   <- [79, 81]
  val?^ | miss    %61.0 = Phi                      %79.1:BB79, %81.1:BB81
  val?^ | miss    %61.1 = %61.0
  dr              %61.2 = Phi                      %79.2:BB79, %81.2:BB81
  dr              %61.3 = %61.2
  fs              %61.4 = FrameState         R     0x55bbea22aec0+298: [], env=e0.1
  void                    Deopt              !v    %61.4, %61.3, %61.1   !
BB57   <- [76]
  void                    Nop                !     
  goto BB15
BB14   <- [76]
  val?^ | miss    %14.0 = LdVar              eR    as.character, e0.1
  lgl$#-          %14.1 = Identical                <blt as.character>, %14.0   <true>
  void                    Branch                   %14.1 -> BB82 (if true) | BB83 (if false)
BB65   <- [80]
  val?^ | miss    %65.0 = LdVar              eR    ind, e0.1
  val?            %65.1 = Force!<value>      !v    %65.0, e0.1   <int->
  val?            %65.2 = %65.1
  goto BB64
BB63   <- [80]
  prom-           %63.0 = MkArg                    unboundValue, factor[0x55bbe44d8110]_p38, e0.1
  prom-           %63.1 = %63.0
  goto BB64
BB15   <- [57, 82]
  val?^ | miss    %15.0 = LdVar              eR    levels, e0.1
  val?            %15.1 = Force!<lazy>       !v    %15.0, e0.1   <(int|str)->
  lgl$#-          %15.2 = IsType                   %15.1 isA val+   <true>
  void                    Branch                   %15.2 -> BB84 (if true) | BB85 (if false)
BB82   <- [14]
  val?^ | miss    %82.0 = LdVar              eR    x, e0.1
  val?            %82.1 = Force!<wrapped>    !v    %82.0, e0.1   <(int|real)>
  val?            %82.2 = CallBuiltin        !v    as.character(%82.1) e0.1   <str->
  void                    StVar              lW    x, %82.2, e0.1
  goto BB15
BB83   <- [14]
  fs              %83.0 = FrameState         R     0x55bbea22aec0+468: [%76.2], env=e0.1
  void                    Deopt              !v    %83.0, DeadBranchReached@0x55bbec45baa0[Test#3], %14.1   !
BB64   <- [65, 63]
  val?            %64.0 = Phi                      %65.2:BB65, %63.1:BB63
  val?            %64.1 = %64.0
  val?            %64.2 = Extract1_1D        !v    %80.2, %64.1, e0.1   <str->
  val?            %64.3 = StaticCall         !v    unique[0x55bbe620b760](%64.2) { 0 } e0.1   <str->
  void                    StVar              lW    levels, %64.3, e0.1
  goto BB7
BB84   <- [15]
  val?^ | miss    %84.0 = LdVar              eR    is.na, e0.1
  lgl$#-          %84.1 = Identical                <blt is.na>, %84.0   <true>
  void                    Branch                   %84.1 -> BB86 (if true) | BB87 (if false)
BB85   <- [15]
  void                    Nop                !     
  lgl$#-          %85.1 = %15.2
  dr              %85.2 = DeadBranchReached@0x55bbec45baa0[Test#4]
  goto BB16
BB86   <- [84]
  val?^ | miss    %86.0 = LdVar              eR    match, e0.1
  lgl$#-          %86.1 = Identical                %86.0, function(x, table, nomatch=NA, incomparables=N|...
  void                    Branch                   %86.1 -> BB88 (if true) | BB89 (if false)
BB87   <- [84]
  void                    Nop                !     
  lgl$#-          %87.1 = %84.1
  dr              %87.2 = DeadBranchReached@0x55bbec45baa0[Test#5]
  goto BB16
BB16   <- [85, 87, 89]
  val?^ | miss    %16.0 = Phi                      %85.1:BB85, %87.1:BB87, %89.1:BB89
  val?^ | miss    %16.1 = %16.0
  dr              %16.2 = Phi                      %85.2:BB85, %87.2:BB87, %89.2:BB89
  dr              %16.3 = %16.2
  fs              %16.4 = FrameState         R     0x55bbea22aec0+599: [%15.1], env=e0.1
  void                    Deopt              !v    %16.4, %16.3, %16.1   !
BB88   <- [86]
  prom-           %88.0 = MkArg                    unboundValue, factor[0x55bbe44d8110]_p6, e0.1
  prom-           %88.1 = MkArg                    unboundValue, factor[0x55bbe44d8110]_p7, e0.1
  ct              %88.2 = PushContext        lCL   %88.0, %88.1, match(levels, exclude), function(x, table, nomatch=NA, incomparables=N|..., e0.1
  val?^           %88.3 = CastType                 up %88.1
  val?^           %88.4 = CastType                 up %88.0
  env             e88.5 = MkEnv              l     x=%88.4, table=%88.3, nomatch(miss)=NA, incomparables(miss)=nil, parent=R_BaseNamespace, context 1
  val?            %88.6 = Force!<lazy>       !vL   %88.4, e88.5   <val?+>
  val?            %88.7 = Force!<lazy>       !vL   %88.3, e88.5   <val?>
  val?            %88.8 = CallBuiltin        !v    match(%88.6, %88.7, NA, nil) e88.5
  val?            %88.9 = PopContext         C     %88.8, %88.2   <int->
  lgl$#-          %88.10 = IsType                   %88.9 isA int-
  void                    Branch                   %88.10 -> BB90 (if true) | BB91 (if false)
BB89   <- [86]
  void                    Nop                !     
  val?^ | miss    %89.1 = %86.0
  dr              %89.2 = CallTarget@0x55bbec45baa0[Call#15]
  goto BB16
BB90   <- [88]
  int-            %90.0 = CastType           d     dn %88.9
  lgl-            %90.1 = CallSafeBuiltin    wed   is.na(%90.0)    <lgl->
  lgl$#-          %90.2 = IsType                   %15.1 isA val?-
  void                    Branch                   %90.2 -> BB92 (if true) | BB93 (if false)
BB91   <- [88]
  fs              %91.0 = FrameState         R     0x55bbea22aec0+732: [%15.1, <blt is.na>, %88.9], env=e0.1
  void                    Deopt              !v    %91.0, Typecheck@0x55bbec45baa0[Type#37], %88.9   !
BB92   <- [90]
  val?-           %92.0 = CastType           d     dn %15.1   <(int|str)->
  val?            %92.1 = Extract1_1D        wed   %92.0, %90.1, elided   <(int|str)->
  void                    StVar              lW    levels, %92.1, e0.1
  val?^ | miss    %92.3 = LdVar              eR    match, e0.1
  lgl$#-          %92.4 = Identical                %92.3, function(x, table, nomatch=NA, incomparables=N|...
  void                    Branch                   %92.4 -> BB94 (if true) | BB95 (if false)
BB93   <- [90]
  fs              %93.0 = FrameState         R     0x55bbea22aec0+754: [%15.1, %90.1], env=e0.1
  void                    Deopt              !v    %93.0, Typecheck@0x55bbec45baa0[Type#27], %15.1   !
BB94   <- [92]
  prom-           %94.0 = MkArg                    unboundValue, factor[0x55bbe44d8110]_p8, e0.1
  prom-           %94.1 = MkArg                    unboundValue, factor[0x55bbe44d8110]_p9 (!refl), e0.1
  ct              %94.2 = PushContext        lCL   %94.0, %94.1, match(x, levels), function(x, table, nomatch=NA, incomparables=N|..., e0.1
  val?^           %94.3 = CastType                 up %94.1
  val?^           %94.4 = CastType                 up %94.0
  env             e94.5 = MkEnv              l     x=%94.4, table=%94.3, nomatch(miss)=NA, incomparables(miss)=nil, parent=R_BaseNamespace, context 1
  val?            %94.6 = Force!<lazy>       !vL   %94.4, e94.5   <val?+>
  val?            %94.7 = Force!<lazy>       !vrL  %94.3, e94.5   <val?>
  val?            %94.8 = CallBuiltin        !v    match(%94.6, %94.7, NA, nil) e94.5
  val?            %94.9 = PopContext         C     %94.8, %94.2   <int->
  void                    StVar              lW    f, %94.9, e0.1
  val?^ | miss    %94.11 = LdVar              eR    nx, e0.1
  lgl$#-          %94.12 = IsType                   %94.11 isA val?~- | miss
  void                    Branch                   %94.12 -> BB96 (if true) | BB97 (if false)
BB95   <- [92]
  fs              %95.0 = FrameState         R     0x55bbea22aec0+775: [], env=e0.1
  void                    Deopt              !v    %95.0, CallTarget@0x55bbec45baa0[Call#16], %92.3   !
BB96   <- [94]
  val?~- | miss   %96.0 = CastType           d     dn %94.11
  val?-           %96.1 = Force!<value>            %96.0,    <nil->
  lgl$-           %96.2 = Is                       %96.1, NULL
  lgl$-           %96.3 = Not                d     %96.2, elided
  lgl$#-          %96.4 = CheckTrueFalse     e     %96.3
  void                    Branch                   %96.4 -> BB56 (if true) | BB26 (if false)
BB97   <- [94]
  void                    Nop                !     
  val?^ | miss    %97.1 = %94.11
  dr              %97.2 = Typecheck@0x55bbec45baa0[Type#43]
  goto BB24
BB56   <- [96]
  (cls|spec|blt)  %56.0 = LdFun              !v    names<-, e0.1
  fs              %56.1 = FrameState         R     0x55bbea22aec0+876: [%96.1, %56.0], env=e0.1
  void                    Deopt              !v    %56.1, DeadCall@0x55bbec45baa0[Call#17], %56.0   !
BB26   <- [96]
  lgl$-           %26.0 = Missing            eR    labels, e0.1
  lgl$#-          %26.1 = CheckTrueFalse     e     %26.0
  void                    Branch                   %26.1 -> BB51 (if true) | BB27 (if false)
BB24   <- [97, 99, 101]
  val?^ | miss    %24.0 = Phi                      %97.1:BB97, %99.1:BB99, %101.1:BB101
  val?^ | miss    %24.1 = %24.0
  dr              %24.2 = Phi                      %97.2:BB97, %99.2:BB99, %101.2:BB101
  dr              %24.3 = %24.2
  fs              %24.4 = FrameState         R     0x55bbea22aec0+826: [], env=e0.1
  void                    Deopt              !v    %24.4, %24.3, %24.1   !
BB51   <- [26]
  val?^ | miss    %51.0 = LdVar              eR    as.character, e0.1
  lgl$#-          %51.1 = Identical                <blt as.character>, %51.0   <true>
  void                    Branch                   %51.1 -> BB98 (if true) | BB99 (if false)
BB27   <- [26]
  val?^ | miss    %27.0 = LdVar              eR    length, e0.1
  lgl$#-          %27.1 = Identical                <blt length>, %27.0   <true>
  void                    Branch                   %27.1 -> BB100 (if true) | BB101 (if false)
BB98   <- [51]
  val?^ | miss    %98.0 = LdVar              eR    levels, e0.1
  val?            %98.1 = Force!<value>      !v    %98.0, e0.1   <str->
  lgl$#-          %98.2 = IsType                   %98.1 isA val?-
  void                    Branch                   %98.2 -> BB102 (if true) | BB103 (if false)
BB99   <- [51]
  void                    Nop                !     
  lgl$#-          %99.1 = %51.1
  dr              %99.2 = DeadBranchReached@0x55bbec45baa0[Test#10]
  goto BB24
BB100   <- [27]
  val?^ | miss    %100.0 = LdVar              eR    labels, e0.1
  val?            %100.1 = Force!<lazy>       !v    %100.0, e0.1   <str->
  lgl$#-          %100.2 = IsType                   %100.1 isA val?-
  void                    Branch                   %100.2 -> BB104 (if true) | BB105 (if false)
BB101   <- [27]
  void                    Nop                !     
  lgl$#-          %101.1 = %27.1
  dr              %101.2 = DeadBranchReached@0x55bbec45baa0[Test#6]
  goto BB24
BB102   <- [98]
  val?-           %102.0 = CastType           d     dn %98.1   <str->
  val+            %102.1 = CallSafeBuiltin    wed   as.character(%102.0)    <str->
  (cls|spec|blt)  %102.2 = LdFun              !v    levels<-, <0x55bbe1e23cb8>, e0.1
  val?^ | miss    %102.3 = LdVar              eR    f, e0.1
  lgl$#-          %102.4 = IsType                   %102.3 isA int-
  void                    Branch                   %102.4 -> BB106 (if true) | BB107 (if false)
BB103   <- [98]
  fs              %103.0 = FrameState         R     0x55bbea22aec0+1824: [<blt as.character>, %98.1], env=e0.1
  void                    Deopt              !v    %103.0, Typecheck@0x55bbec45baa0[Type#84], %98.1   !
BB104   <- [100]
  val?-           %104.0 = CastType           d     dn %100.1   <str->
  (int|real)$-    %104.1 = CallSafeBuiltin    wed   length(%104.0)    <int$->
  lgl$#-          %104.2 = IsType                   %104.1 isA int$-
  void                    Branch                   %104.2 -> BB108 (if true) | BB109 (if false)
BB105   <- [100]
  fs              %105.0 = FrameState         R     0x55bbea22aec0+1020: [<blt length>, %100.1], env=e0.1
  void                    Deopt              !v    %105.0, Typecheck@0x55bbec45baa0[Type#47], %100.1   !
BB106   <- [102]
  int-            %106.0 = CastType           d     dn %102.3
  val?            %106.1 = NamedCall          !v    %102.2(%106.0, value=%102.1) e0.1
  void                    StVar              lW    f, %106.1, e0.1
  goto BB50
BB107   <- [102]
  fs              %107.0 = FrameState         R     0x55bbea22aec0+1851: [%102.1], env=e0.1
  void                    Deopt              !v    %107.0, Typecheck@0x55bbec45baa0[Type#86], %102.3   !
BB108   <- [104]
  int$-           %108.0 = CastType           d     dn %104.1
  void                    StVar              lW    nlab, %108.0, e0.1
  val?^ | miss    %108.2 = LdVar              eR    length, e0.1
  lgl$#-          %108.3 = Identical                <blt length>, %108.2   <true>
  void                    Branch                   %108.3 -> BB110 (if true) | BB111 (if false)
BB109   <- [104]
  fs              %109.0 = FrameState         R     0x55bbea22aec0+1042: [%104.1], env=e0.1
  void                    Deopt              !v    %109.0, Typecheck@0x55bbec45baa0[Type#48], %104.1   !
BB50   <- [106, 134]
  (cls|spec|blt)  %50.0 = LdFun              !v    <-, <0x55bbe1e14da8>, e0.1
  prom-           %50.1 = MkArg                    unboundValue, factor[0x55bbe44d8110]_p22, e0.1
  prom-           %50.2 = MkArg                    unboundValue, factor[0x55bbe44d8110]_p24, e0.1
  val?            %50.3 = Call               !v    %50.0(%50.1, %50.2) e0.1
  val?^ | miss    %50.4 = LdVar              eR    f, e0.1
  void                    Visible            v     
  val?            %50.6 = Force!<value>      !     %50.4, e0.1   <int>
  void                    Return             l     %50.6
BB110   <- [108]
  val?^ | miss    %110.0 = LdVar              eR    levels, e0.1
  lgl$#-          %110.1 = IsType                   %110.0 isA int-
  void                    Branch                   %110.1 -> BB112 (if true) | BB113 (if false)
BB111   <- [108]
  void                    Nop                !     
  lgl$#-          %111.1 = %108.3
  dr              %111.2 = DeadBranchReached@0x55bbec45baa0[Test#7]
  goto BB32
BB112   <- [110]
  int-            %112.0 = CastType           d     dn %110.0
  (int|real)$-    %112.1 = CallSafeBuiltin    wed   length(%112.0)    <int$->
  lgl$#-          %112.2 = IsType                   %112.1 isA int$-
  void                    Branch                   %112.2 -> BB114 (if true) | BB115 (if false)
BB113   <- [110]
  void                    Nop                !     
  val?^ | miss    %113.1 = %110.0
  dr              %113.2 = Typecheck@0x55bbec45baa0[Type#51]
  goto BB32
BB32   <- [111, 113]
  val?^ | miss    %32.0 = Phi                      %111.1:BB111, %113.1:BB113
  val?^ | miss    %32.1 = %32.0
  dr              %32.2 = Phi                      %111.2:BB111, %113.2:BB113
  dr              %32.3 = %32.2
  fs              %32.4 = FrameState         R     0x55bbea22aec0+1056: [], env=e0.1
  void                    Deopt              !v    %32.4, %32.3, %32.1   !
BB114   <- [112]
  int$-           %114.0 = CastType           d     dn %112.1
  lgl$-           %114.1 = Eq                 d     %108.0, %114.0, elided   <lgl$->
  lgl$#-          %114.2 = CheckTrueFalse     e     %114.1
  void                    Branch                   %114.2 -> BB39 (if true) | BB36 (if false)
BB115   <- [112]
  void                    Nop                !     
  (int|real)$-    %115.1 = %112.1
  dr              %115.2 = Typecheck@0x55bbec45baa0[Type#52]
  goto BB34
BB39   <- [114]
  val?^ | miss    %39.0 = LdVar              eR    unique, e0.1
  lgl$#-          %39.1 = Identical                %39.0, function(x, incomparables=FALSE, ...) <(rir::D|...
  void                    Branch                   %39.1 -> BB116 (if true) | BB117 (if false)
BB36   <- [114]
  lgl$-           %36.0 = Eq                 d     %108.0, 1L, elided   <val?_>
  lgl$#-          %36.1 = CheckTrueFalse     e     %36.0
  void                    Branch                   %36.1 -> BB38 (if true) | BB37 (if false)
BB34   <- [115, 117, 119]
  val?^ | miss    %34.0 = Phi                      %115.1:BB115, %117.1:BB117, %119.1:BB119
  val?^ | miss    %34.1 = %34.0
  dr              %34.2 = Phi                      %115.2:BB115, %117.2:BB117, %119.2:BB119
  dr              %34.3 = %34.2
  fs              %34.4 = FrameState         R     0x55bbea22aec0+1161: [%108.0, %112.1], env=e0.1
  void                    Deopt              !v    %34.4, %34.3, %34.1   !
BB116   <- [39]
  val?^ | miss    %116.0 = LdVar              eR    as.character, e0.1
  lgl$#-          %116.1 = Identical                %116.0, <blt as.character>
  void                    Branch                   %116.1 -> BB118 (if true) | BB119 (if false)
BB117   <- [39]
  void                    Nop                !     
  val?^ | miss    %117.1 = %39.0
  dr              %117.2 = CallTarget@0x55bbec45baa0[Call#26]
  goto BB34
BB38   <- [36]
  (cls|spec|blt)  %38.0 = LdFun              !v    paste0, e0.1
  fs              %38.1 = FrameState         R     0x55bbea22aec0+1266: [%38.0], env=e0.1
  void                    Deopt              !v    %38.1, DeadCall@0x55bbec45baa0[Call#23], %38.0   !
BB37   <- [36]
  (cls|spec|blt)  %37.0 = LdFun              !v    stop, e0.1
  fs              %37.1 = FrameState         R     0x55bbea22aec0+1215: [%37.0], env=e0.1
  void                    Deopt              !v    %37.1, DeadCall@0x55bbec45baa0[Call#20], %37.0   !
BB118   <- [116]
  val?^ | miss    %118.0 = LdVar              eR    labels, e0.1
  val?            %118.1 = Force!<wrapped>    !v    %118.0, e0.1   <str->
  val?            %118.2 = CallBuiltin        !v    as.character(%118.1) e0.1   <str->
  void                    StVar              lW    xlevs, %118.2, e0.1
  val?            %118.4 = StaticCall         !v    unique[0x55bbe620b760](%118.2) { 0 } e0.1   <str->
  void                    StVar              lW    nlevs, %118.4, e0.1
  val?^ | miss    %118.6 = LdVar              eR    attributes, e0.1
  lgl$#-          %118.7 = Identical                <blt attributes>, %118.6   <true>
  void                    Branch                   %118.7 -> BB120 (if true) | BB121 (if false)
BB119   <- [116]
  void                    Nop                !     
  val?^ | miss    %119.1 = %116.0
  dr              %119.2 = CallTarget@0x55bbec45baa0[Call#27]
  goto BB34
BB120   <- [118]
  val?^ | miss    %120.0 = LdVar              eR    f, e0.1
  lgl$#-          %120.1 = IsType                   %120.0 isA int-
  void                    Branch                   %120.1 -> BB122 (if true) | BB123 (if false)
BB121   <- [118]
  void                    Nop                !     
  lgl$#-          %121.1 = %118.7
  dr              %121.2 = DeadBranchReached@0x55bbec45baa0[Test#8]
  goto BB40
BB122   <- [120]
  int-            %122.0 = CastType           d     dn %120.0
  val?            %122.1 = CallBuiltin        !v    attributes(%122.0) e0.1   <nil->
  void                    StVar              lW    at, %122.1, e0.1
  (cls|spec|blt)  %122.3 = LdFun              !v    <-, <0x55bbe1e14da8>, e0.1
  prom-           %122.4 = MkArg                    unboundValue, factor[0x55bbe44d8110]_p15, e0.1
  prom-           %122.5 = MkArg                    unboundValue, factor[0x55bbe44d8110]_p18, e0.1
  val?            %122.6 = Call               !v    %122.3(%122.4, %122.5) e0.1
  val?^ | miss    %122.7 = LdVar              eR    match, e0.1
  lgl$#-          %122.8 = Identical                %122.7, function(x, table, nomatch=NA, incomparables=N|...
  void                    Branch                   %122.8 -> BB124 (if true) | BB125 (if false)
BB123   <- [120]
  void                    Nop                !     
  val?^ | miss    %123.1 = %120.0
  dr              %123.2 = Typecheck@0x55bbec45baa0[Type#69]
  goto BB40
BB40   <- [121, 123]
  val?^ | miss    %40.0 = Phi                      %121.1:BB121, %123.1:BB123
  val?^ | miss    %40.1 = %40.0
  dr              %40.2 = Phi                      %121.2:BB121, %123.2:BB123
  dr              %40.3 = %40.2
  fs              %40.4 = FrameState         R     0x55bbea22aec0+1422: [], env=e0.1
  void                    Deopt              !v    %40.4, %40.3, %40.1   !
BB124   <- [122]
  prom-           %124.0 = MkArg                    unboundValue, factor[0x55bbe44d8110]_p19, e0.1
  prom-           %124.1 = MkArg                    unboundValue, factor[0x55bbe44d8110]_p20, e0.1
  ct              %124.2 = PushContext        lCL   %124.0, %124.1, match(xlevs, nlevs), function(x, table, nomatch=NA, incomparables=N|..., e0.1
  val?^           %124.3 = CastType                 up %124.1
  val?^           %124.4 = CastType                 up %124.0
  env             e124.5 = MkEnv              l     x=%124.4, table=%124.3, nomatch(miss)=NA, incomparables(miss)=nil, parent=R_BaseNamespace, context 1
  val?            %124.6 = Force!<lazy>       !vL   %124.4, e124.5   <val?+>
  val?            %124.7 = Force!<lazy>       !vL   %124.3, e124.5   <val?>
  val?            %124.8 = CallBuiltin        !v    match(%124.6, %124.7, NA, nil) e124.5
  val?            %124.9 = PopContext         C     %124.8, %124.2   <int->
  lgl$#-          %124.10 = IsType                   %124.9 isA val+   <true>
  lgl$#-          %124.11 = IsType                   %124.9 isA int-
  void                    Branch                   %124.10 -> BB126 (if true) | BB127 (if false)
BB125   <- [122]
  fs              %125.0 = FrameState         R     0x55bbea22aec0+1564: [%122.6], env=e0.1
  void                    Deopt              !v    %125.0, CallTarget@0x55bbec45baa0[Call#31], %122.7   !
BB126   <- [124]
  val?^ | miss    %126.0 = LdVar              eR    f, e0.1
  lgl$#-          %126.1 = IsType                   %126.0 isA int-
  void                    Branch                   %126.1 -> BB128 (if true) | BB129 (if false)
BB127   <- [124]
  void                    Nop                !     
  lgl$#-          %127.1 = %124.10
  dr              %127.2 = DeadBranchReached@0x55bbec45baa0[Test#9]
  goto BB44
BB128   <- [126]
  int-            %128.0 = CastType           d     dn %126.0
  void                    Branch                   %124.11 -> BB130 (if true) | BB131 (if false)
BB129   <- [126]
  void                    Nop                !     
  val?^ | miss    %129.1 = %126.0
  dr              %129.2 = Typecheck@0x55bbec45baa0[Type#79]
  goto BB44
BB44   <- [127, 129, 131]
  val?^ | miss    %44.0 = Phi                      %127.1:BB127, %129.1:BB129, %131.1:BB131
  val?^ | miss    %44.1 = %44.0
  dr              %44.2 = Phi                      %127.2:BB127, %129.2:BB129, %131.2:BB131
  dr              %44.3 = %44.2
  fs              %44.4 = FrameState         R     0x55bbea22aec0+1602: [%124.9], env=e0.1
  void                    Deopt              !v    %44.4, %44.3, %44.1   !
BB130   <- [128]
  int-            %130.0 = CastType           d     dn %124.9
  int-            %130.1 = Extract1_1D        wed   %130.0, %128.0, elided   <int->
  void                    StVar              lW    f, %130.1, e0.1
  val?^ | miss    %130.3 = LdVar              eR    at, e0.1
  lgl$#-          %130.4 = IsType                   %130.3 isA val?~+ | miss
  void                    Branch                   %130.4 -> BB132 (if true) | BB133 (if false)
BB131   <- [128]
  void                    Nop                !     
  val?            %131.1 = %124.9
  dr              %131.2 = Typecheck@0x55bbec45baa0[Type#77]
  goto BB44
BB132   <- [130]
  val?~+ | miss   %132.0 = CastType           d     dn %130.3
  val?+           %132.1 = Force!<value>            %132.0,    <vec$+>
  (cls|spec|blt)  %132.2 = LdFun              !v    attributes<-, <0x55bbe1e20128>, e0.1
  val?^ | miss    %132.3 = LdVar              eR    f, e0.1
  lgl$#-          %132.4 = IsType                   %132.3 isA int-
  void                    Branch                   %132.4 -> BB134 (if true) | BB135 (if false)
BB133   <- [130]
  fs              %133.0 = FrameState         R     0x55bbea22aec0+1668: [], env=e0.1
  void                    Deopt              !v    %133.0, Typecheck@0x55bbec45baa0[Type#81], %130.3   !
BB134   <- [132]
  int-            %134.0 = CastType           d     dn %132.3
  val?            %134.1 = NamedCall          !v    %132.2(%134.0, value=%132.1) e0.1
  void                    StVar              lW    f, %134.1, e0.1
  goto BB50
BB135   <- [132]
  fs              %135.0 = FrameState         R     0x55bbea22aec0+1682: [%132.1], env=e0.1
  void                    Deopt              !v    %135.0, Typecheck@0x55bbec45baa0[Type#82], %132.3   !
Prom 0:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    levels, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     is.ordered, <0x55bbee9f8670>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, factor[0x55bbe44d8110]_p3, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <lgl$->
  void                    Return             l     %0.3
Prom 3:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    x, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <val?>
  void                    Return             l     %0.3
Prom 5:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    ordered, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <lgl$->
  void                    Return             l     %0.3
Prom 6:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    levels, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <(int|str)->
  void                    Return             l     %0.3
Prom 7:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    exclude, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <(nil|lgl)->
  void                    Return             l     %0.3
Prom 8:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    x, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 9:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    levels, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <(int|str)->
  void                    Return             l     %0.3
Prom 15:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     $, e0.0
  prom-           %0.2  = MkArg                    unboundValue, factor[0x55bbe44d8110]_p16, e0.0
  prom-           %0.3  = MkArg                    unboundValue, factor[0x55bbe44d8110]_p17, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 16:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    at, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 17:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    levels, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 18:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    nlevs, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 19:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    xlevs, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 20:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    nlevs, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 22:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     class, e0.0
  prom-           %0.2  = MkArg                    unboundValue, factor[0x55bbe44d8110]_p23, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 23:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    f, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 24:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     c, e0.0
  prom-           %0.2  = MkArg                    unboundValue, factor[0x55bbe44d8110]_p25, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2, "factor") e0.0   <val?_>
  void                    Return             l     %0.3
Prom 25:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    ordered, e0.0
  val?            %0.2  = Force              !v    %0.1, e0.0   <val?_>
  lgl$#-          %0.3  = CheckTrueFalse     we    %0.2
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  void                    Visible            v     
  str$#-          %2.1  = "ordered"
  goto BB3
BB4   <- [0]
  void                    Invisible          v     
  nil-            %4.1  = nil
  goto BB3
BB3   <- [4, 2]
  (nil|str)-      %3.0  = Phi                      %4.1:BB4, %2.1:BB2
  (nil|str)-      %3.1  = %3.0
  void                    Return             l     %3.1
Prom 28:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    nmax, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <lgl$->
  void                    Return             l     %0.3
Prom 30:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    y, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <(int|real)>
  void                    Return             l     %0.3
Prom 38:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    ind, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3

│ factor[0x55bbe44d8110]                                                       │
└──────────────────────────────────────────────────────────────────────────────┘
