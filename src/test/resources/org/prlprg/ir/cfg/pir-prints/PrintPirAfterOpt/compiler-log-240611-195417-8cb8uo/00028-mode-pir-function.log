
┌──────────────────────────────────────────────────────────────────────────────┐
│ mode[0x55b0cc263160]                                                         │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;NonRefl0,!Obj0                       │
│ Properties:  Eager, ForceOrd: 0                                              │
├────── PIR Version After Optimizations
mode[0x55b0cc263160]
BB0
  goto BB1
BB1   <- [0]
  val?^           %1.0  = LdArg                    0
  env             e1.1  = MkEnv              l     x=%1.0, parent=R_BaseNamespace, context 1
  val+            %1.2  = Force!<lazy>       !vr   %1.0,    <val?>
  lgl$#-          %1.3  = CallSafeBuiltin    wed   is.expression(%1.2)    <lgl$->
  void                    Branch                   %1.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [1]
  void                    Visible            v     
  goto BB3
BB4   <- [1]
  lgl$#-          %4.0  = CallSafeBuiltin    wed   is.call(%1.2)    <lgl$->
  void                    Branch                   %4.0 -> BB5 (if true) | BB19 (if false)
BB3   <- [2, 21, 17]
  str$-           %3.0  = Phi                      %21.0:BB21, %17.0:BB17, "expression":BB2
  void                    Return             l     %3.0
BB5   <- [4]
  prom-           %5.0  = MkArg                    unboundValue, mode[0x55b0cc263160]_p1, e1.1
  ct              %5.1  = PushContext        lCL   %5.0, deparse([[(x, 1L)), function(expr, width.cutoff=60L, backtick=%in%|..., e1.1
  val?^           %5.2  = CastType                 up %5.0
  env             e5.3  = MkEnv              l     expr=%5.2, width.cutoff(miss)=60L, backtick(miss)=missingArg, control(miss)=missingArg, nlines(miss)=missingArg, parent=R_BaseNamespace, context 1
  prom-           %5.4  = MkArg                    unboundValue, mode[0x55b0cc263160]_p3, e5.3
  val?^ | miss    %5.5  = CastType                 up %5.4
  void                    StArg              lW    backtick, %5.5, e5.3
  prom-           %5.7  = MkArg                    unboundValue, mode[0x55b0cc263160]_p7, e5.3
  val?^ | miss    %5.8  = CastType                 up %5.7
  void                    StArg              lW    control, %5.8, e5.3
  prom-           %5.10 = MkArg                    unboundValue, mode[0x55b0cc263160]_p8 (!refl), 
  val?^ | miss    %5.11 = CastType                 up %5.10
  void                    StArg              lW    nlines, %5.11, e5.3
  val?            %5.13 = Force!<lazy>       !vL   %5.2, e5.3   <(sym|code)->
  val?            %5.14 = Force!<lazy>       !v    %5.5, e5.3   <lgl$->
  cp              %5.15 = Checkpoint                -> BB7 (default) | BB6 (if assume failed)
BB19   <- [4]
  lgl$#-          %19.0 = CallSafeBuiltin    wed   is.symbol(%1.2)    <lgl$->
  void                    Branch                   %19.0 -> BB20 (if true) | BB22 (if false)
BB7   <- [5]
  val?^ | miss    %7.0  = LdVar              eR    .deparseOpts, e5.3
  lgl$#-          %7.1  = Identical                %7.0, function(control) <(rir::DispatchTable*)0x55b0|...
  void                    Assume             D     %7.1, %5.15 (CallTarget@0x55b0cb726250[Call#4])
  val?^ | miss    %7.3  = LdVar              eR    control, e5.3
  val?            %7.4  = Force!<lazy>       !v    %7.3, e5.3   <str->
  prom-           %7.5  = MkArg                    %7.4, mode[0x55b0cc263160]_p9 (!refl), 
  val?            %7.6  = StaticCall         !v    .deparseOpts[0x55b0cb196fc0](%7.5) e5.3   <real$->
  lgl$#-          %7.7  = IsType                   %7.6 isA real$-
  cp              %7.8  = Checkpoint                -> BB9 (default) | BB8 (if assume failed)
BB6   <- [5]
  fs              %6.0  = FrameState         R     0x55b0cb6d80e0+253: [], env=e1.1
  fs              %6.1  = FrameState         R     0x55b0cadbeea0+37: [%5.13, 60L, %5.14], env=e5.3, next=%6.0
  void                    Deopt              !v    %6.1   !
BB20   <- [19]
  void                    Visible            v     
  goto BB21
BB22   <- [19]
  str$-           %22.0 = CallSafeBuiltin    wed   typeof(%1.2)    <str$->
  int$-           %22.1 = Length                   %22.0
  void                    StVar              lW    tx, %22.0, e1.1
  cp              %22.3 = Checkpoint                -> BB23 (default) | BB32 (if assume failed)
BB9   <- [7]
  void                    Assume             D     %7.7, %7.8 (Typecheck@0x55b0cb726250[Type#9])
  real$-          %9.1  = CastType           d     dn %7.6
  val?^ | miss    %9.2  = LdVar              eR    nlines, e5.3
  val?            %9.3  = Force!<lazy>       !v    %9.2, e5.3   <int$->
  val?            %9.4  = CallBuiltin        !v    deparse(%5.13, 60L, %5.14, %9.1, %9.3) e5.3
  val?            %9.5  = PopContext         C     %9.4, %5.1   <str$->
  lgl$#-          %9.6  = IsType                   %9.5 isA val+   <true>
  lgl$#-          %9.7  = IsType                   %9.5 isA val?-
  cp              %9.8  = Checkpoint                -> BB11 (default) | BB10 (if assume failed)
BB8   <- [7]
  fs              %8.0  = FrameState         R     0x55b0cb6d80e0+253: [], env=e1.1
  fs              %8.1  = FrameState         R     0x55b0cadbeea0+74: [%5.13, 60L, %5.14, %7.6], env=e5.3, next=%8.0
  void                    Deopt              !v    %8.1   !
BB21   <- [20, 28]
  str$-           %21.0 = Phi                      %28.0:BB28, "name":BB20
  goto BB3
BB23   <- [22]
  lgl$-           %23.0 = Eq                 d     %22.1, 1L, elided   <true>
  lgl$#-          %23.1 = Identical                %23.0, true
  void                    Assume             D     %23.1, %22.3 (DeadBranchReached@0x55b0cbb4a738[Test#14])
  lgl$-           %23.3 = CallSafeBuiltin    wed   is.na(%22.0) 
  cp              %23.4 = Checkpoint                -> BB25 (default) | BB24 (if assume failed)
BB32   <- [22]
  fs              %32.0 = FrameState         R     0x55b0cb6d80e0+708: [%22.0], env=e1.1
  void                    Deopt              !v    %32.0
BB11   <- [9]
  void                    Assume             D     %9.6, %9.8 (DeadBranchReached@0x55b0cbb4a738[Test#3])
  void                    Assume             D     %9.7, %9.8 (Typecheck@0x55b0cbb4a738[Type#8])
  val?-           %11.2 = CastType           d     dn %9.5   <str$->
  val?            %11.3 = Extract1_1D        wed   %11.2, 1L, elided   <str$->
  lgl$-           %11.4 = Is                       %11.3, logical
  lgl$-           %11.5 = Is                       %11.3, integer
  lgl$-           %11.6 = Is                       %11.3, double
  lgl$-           %11.7 = Is                       %11.3, complex
  lgl$-           %11.8 = Is                       %11.3, character   <true>
  lgl$-           %11.9 = Is                       %11.3, raw
  lgl$-           %11.10 = Is                       %11.3, list
  lgl$-           %11.11 = Is                       %11.3, expression
  lgl$-           %11.12 = LOr                      %11.11, %11.10
  lgl$-           %11.13 = LOr                      %11.12, %11.9
  lgl$-           %11.14 = LOr                      %11.13, %11.8
  lgl$-           %11.15 = LOr                      %11.14, %11.7
  lgl$-           %11.16 = LOr                      %11.15, %11.6
  lgl$-           %11.17 = LOr                      %11.16, %11.5
  lgl$-           %11.18 = LOr                      %11.17, %11.4   <true>
  lgl$#-          %11.19 = Identical                %11.18, true
  int$-           %11.20 = Length                   %11.3
  lgl$-           %11.21 = Is                       %11.3, Factor   <false>
  lgl$#-          %11.22 = Identical                %11.21, false
  lgl$#-          %11.23 = Identical                %11.8, true
  lgl$#-          %11.24 = IsType                   %11.3 isA val?-
  cp              %11.25 = Checkpoint                -> BB13 (default) | BB12 (if assume failed)
BB10   <- [9]
  fs              %10.0 = FrameState         R     0x55b0cb6d80e0+253: [%9.5], env=e1.1
  void                    Deopt              !v    %10.0   !
BB25   <- [23]
  lgl$#-          %25.0 = CheckTrueFalse     e     %23.3   <false>
  void                    AssumeNot          D     %25.0, %23.4 (DeadBranchReached@0x55b0cbb4a738[Test#23])
  lgl$-           %25.2 = Eq                 d     %22.0, double, elided
  lgl$#-          %25.3 = CheckTrueFalse     e     %25.2
  void                    Branch                   %25.3 -> BB31 (if true) | BB26 (if false)
BB24   <- [23]
  fs              %24.0 = FrameState         R     0x55b0cb6d80e0+965: [%22.0, %23.3], env=e1.1
  void                    Deopt              !v    %24.0
BB13   <- [11]
  void                    Assume             D     %11.19, %11.25 (DeadBranchReached@0x55b0cbb4a738[Test#4])
  lgl$-           %13.1 = Eq                 d     %11.20, 1L, elided   <true>
  lgl$#-          %13.2 = Identical                %13.1, true
  void                    Assume             D     %13.2, %11.25 (DeadBranchReached@0x55b0cbb4a738[Test#5])
  void                    Assume             D     %11.22, %11.25 (DeadBranchReached@0x55b0cbb4a738[Test#6])
  void                    Assume             D     %11.23, %11.25 (DeadBranchReached@0x55b0cbb4a738[Test#7])
  void                    Assume             D     %11.24, %11.25 (Typecheck@0x55b0cbb4a738[Type#9])
  val?-           %13.7 = CastType           d     dn %11.3   <str$->
  lgl-            %13.8 = CallSafeBuiltin    wed   is.na(%13.7) 
  lgl$#-          %13.9 = CheckTrueFalse     we    %13.8   <false>
  cp              %13.10 = Checkpoint                -> BB15 (default) | BB14 (if assume failed)
BB12   <- [11]
  fs              %12.0 = FrameState         R     0x55b0cb6d80e0+296: [%11.3], env=e1.1
  void                    Deopt              !v    %12.0   !
BB31   <- [25]
  goto BB30
BB26   <- [25]
  lgl$-           %26.0 = Eq                 d     %22.0, integer, elided
  lgl$#-          %26.1 = CheckTrueFalse     e     %26.0
  void                    Branch                   %26.1 -> BB29 (if true) | BB27 (if false)
BB15   <- [13]
  void                    AssumeNot          D     %13.9, %13.10 (DeadBranchReached@0x55b0cbb4a738[Test#10])
  lgl-            %15.1 = Eq                 wed   %13.7, (, elided
  lgl$#-          %15.2 = CheckTrueFalse     we    %15.1
  void                    Branch                   %15.2 -> BB18 (if true) | BB16 (if false)
BB14   <- [13]
  fs              %14.0 = FrameState         R     0x55b0cb6d80e0+488: [%13.7, %13.9], env=e1.1
  void                    Deopt              !v    %14.0   !
BB30   <- [29, 31]
  void                    Visible            v     
  goto BB28
BB29   <- [26]
  goto BB30
BB27   <- [26]
  lgl$-           %27.0 = Eq                 d     %22.0, closure, elided
  lgl$#-          %27.1 = CheckTrueFalse     e     %27.0   <false>
  void                    AssumeNot          D     %27.1, %23.4 (DeadBranchReached@0x55b0cbb4a738[Test#26])
  lgl$-           %27.3 = Eq                 d     %22.0, builtin, elided
  lgl$#-          %27.4 = CheckTrueFalse     e     %27.3   <false>
  void                    AssumeNot          D     %27.4, %23.4 (DeadBranchReached@0x55b0cbb4a738[Test#27])
  lgl$-           %27.6 = Eq                 d     %22.0, special, elided
  lgl$#-          %27.7 = CheckTrueFalse     e     %27.6   <false>
  void                    AssumeNot          D     %27.7, %23.4 (DeadBranchReached@0x55b0cbb4a738[Test#28])
  void                    Visible            v     
  goto BB28
BB18   <- [15]
  void                    Visible            v     
  goto BB17
BB16   <- [15]
  void                    Visible            v     
  goto BB17
BB28   <- [27, 30]
  str$-           %28.0 = Phi                      %22.0:BB27, "numeric":BB30
  goto BB21
BB17   <- [18, 16]
  str$#-          %17.0 = Phi                      "call":BB16, "(":BB18
  goto BB3
Prom 1:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    x, e1.0
  val?            %1.2  = Force<wrapped>     !v    %1.1, e1.0   <code->
  val?            %1.3  = Extract2_1D        !v    %1.2, 1L, e1.0   <sym->
  void                    Visible            v     
  void                    Return             l     %1.3
Prom 3:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     %in%, <0x55b0c8fb5c40>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, mode[0x55b0cc263160]_p4, e1.0
  prom-           %1.3  = MkArg                    unboundValue, mode[0x55b0cc263160]_p6, e1.0
  val?            %1.4  = Call               !     %1.1(%1.2, %1.3) e1.0   <lgl$->
  void                    Return             l     %1.4
Prom 4:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     mode, <0x55b0c9d83140>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, mode[0x55b0cc263160]_p5, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <str$->
  void                    Return             l     %1.3
Prom 5:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    expr, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <(sym|code)->
  void                    Return             l     %1.3
Prom 6:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     c, <0x55b0c8c9f940>, e1.0
  val?            %1.2  = Call               !     %1.1("call", "expression", "(", "function") e1.0   <str->
  void                    Return             l     %1.2
Prom 7:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     c, <0x55b0c8c9f940>, e1.0
  val?            %1.2  = Call               !     %1.1("keepNA", "keepInteger", "niceNames", "showAttributes") e1.0   <str->
  void                    Return             l     %1.2
Prom 8:
BB0
  goto BB1
BB1   <- [0]
  void                    Visible            v     
  void                    Return             l     -1L
Prom 9:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    control, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <str->
  void                    Return             l     %1.3

│ mode[0x55b0cc263160]                                                         │
└──────────────────────────────────────────────────────────────────────────────┘
