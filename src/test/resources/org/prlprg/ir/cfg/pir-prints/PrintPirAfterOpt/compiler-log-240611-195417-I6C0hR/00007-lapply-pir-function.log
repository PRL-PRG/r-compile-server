
┌──────────────────────────────────────────────────────────────────────────────┐
│ lapply[0x55cfaa31ebc0]                                                       │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;NonRefl0,NonRefl1,!Obj0,!Obj1 miss: 1│
│ Properties:                                                                  │
├────── PIR Version After Optimizations
lapply[0x55cfaa31ebc0]
BB0
  goto BB1
BB1   <- [0]
  val?^           %1.0  = LdArg                    1
  val?^           %1.1  = LdArg                    0
  env             e1.2  = MkEnv              l     X=%1.1, FUN=%1.0, ...(miss)=missingArg, parent=R_BaseNamespace, context 1
  prom-           %1.3  = MkArg                    unboundValue, lapply[0x55cfaa31ebc0]_p0 (!refl), e1.2
  val?            %1.4  = StaticCall         !v    match.fun[0x55cfaa3328b0](%1.3) e1.2   <cls->
  void                    StVar              lW    FUN, %1.4, e1.2
  cp              %1.6  = Checkpoint                -> BB2 (default) | BB15 (if assume failed)
BB2   <- [1]
  val?^ | miss    %2.0  = LdVar              eR    is.vector, e1.2
  lgl$#-          %2.1  = Identical                %2.0, function(x, mode="any") <(rir::DispatchTable*)|...
  void                    Assume             D     %2.1, %1.6 (CallTarget@0x55cfaa312e30[Call#1])
  val?^ | miss    %2.3  = LdVar              eR    X, e1.2
  val?            %2.4  = Force!<lazy>       !v    %2.3, e1.2   <vec->
  lgl$#-          %2.5  = CallSafeBuiltin    wed   is.vector(%2.4, "any")    <lgl$->
  cp              %2.6  = Checkpoint                -> BB4 (default) | BB3 (if assume failed)
BB15   <- [1]
  fs              %15.0 = FrameState         R     0x55cfaa49ef80+46: [], env=e1.2
  void                    Deopt              !v    %15.0   !
BB4   <- [2]
  lgl$#-          %4.0  = Not                d     %2.5, elided
  void                    Branch                   %2.5 -> BB14 (if true) | BB5 (if false)
BB3   <- [2]
  fs              %3.0  = FrameState         R     0x55cfaa49ef80+78: [], env=e1.2
  prom-           %3.1  = MkArg                    %2.4, lapply[0x55cfaa31ebc0]_p1 (!refl), e1.2
  val?~           %3.2  = CastType                 up %3.1
  env             e3.3  = (MkEnv)            l     mode(miss)="any", x=%3.2, parent=R_BaseNamespace, context 0
  fs              %3.4  = FrameState         R     0x55cfaa4ca0e0+41: [%2.5], env=e3.3, next=%3.0
  void                    Deopt              !v    %3.4   !
BB14   <- [4]
  val?^ | miss    %14.0 = LdVar              eR    is.object, e1.2
  lgl$#-          %14.1 = Identical                <blt is.object>, %14.0   <true>
  void                    Assume             D     %14.1, %2.6 (DeadBranchReached@0x55cfaa312e30[Test#0])
  val?^ | miss    %14.3 = LdVar              eR    X, e1.2
  val?            %14.4 = Force!<wrapped>    !v    %14.3, e1.2   <vec->
  lgl$#-          %14.5 = CallSafeBuiltin    wed   is.object(%14.4)    <lgl$->
  lgl$-           %14.6 = LOr                      %4.0, %14.5
  goto BB6
BB5   <- [4]
  goto BB6
BB6   <- [5, 14]
  lgl$-           %6.0  = Phi                      %14.6:BB14, %4.0:BB5
  lgl$#-          %6.1  = CheckTrueFalse     e     %6.0
  void                    Branch                   %6.1 -> BB13 (if true) | BB7 (if false)
BB13   <- [6]
  (cls|spec|blt)  %13.0 = LdFun              !v    as.list, e1.2
  fs              %13.1 = FrameState         R     0x55cfaa49ef80+205: [%13.0], env=e1.2
  void                    Deopt              !v    %13.1, DeadCall@0x55cfaa312e30[Call#3], %13.0   !
BB7   <- [6]
  val?^ | miss    %7.0  = LdVar              eR    X, e1.2
  val?            %7.1  = Force!<wrapped>    !v    %7.0, e1.2   <vec->
  (nil|str)-      %7.2  = Names                    %7.1
  int$-           %7.3  = Length                   %7.1
  vec-            %7.4  = CallSafeBuiltin    wed   vector("list", %7.3) 
  val+            %7.5  = SetNames           e     %7.4, %7.2
  goto BB8
BB8   <- [7, 11]
  int$-           %8.0  = Phi                      0L:BB7, %8.2:BB11
  val?            %8.1  = Phi                      %7.5:BB7, %11.11:BB11
  int$-           %8.2  = Inc                      %8.0
  lgl$-           %8.3  = Lt                 d     %7.3, %8.2, elided
  lgl$#-          %8.4  = Identical                %8.3, true
  void                    Branch                   %8.4 -> BB12 (if true) | BB9 (if false)
BB12   <- [8]
  void                    Visible            v     
  void                    Return             l     %8.1
BB9   <- [8]
  void                    StVar              lW    i, %8.2, e1.2
  cp              %9.1  = Checkpoint                -> BB11 (default) | BB10 (if assume failed)
BB11   <- [9]
  val?^ | miss    %11.0 = LdVar              eR    FUN, e1.2
  (cls|spec|blt)  %11.1 = CastType                 dn %11.0
  val+            %11.2 = CallSafeBuiltin          bodyCode(%11.1) 
  lgl$#-          %11.3 = Identical                %11.2, <(rir::DispatchTable*)0x55cfa871f2a0>
  void                    Assume             D     %11.3, %9.1 (CallTarget@0x55cfaa312e30[Call#4])
  val?            %11.5 = Force!             d     %11.0, 
  prom-           %11.6 = MkArg                    unboundValue, lapply[0x55cfaa31ebc0]_p2, e1.2
  (miss|dots)     %11.7 = LdDots             R     , e1.2
  *dots-          %11.8 = ExpandDots               %11.7
  (cls|spec|blt)  %11.9 = ChkFunction        e     %11.5
  val?            %11.10 = NamedCall          !v    %11.9(%11.6, .xpandDotsTrigger=%11.8) e1.2   <real->
  val?            %11.11 = SetVecElt          e     %11.10, %8.1, %8.2
  goto BB8
BB10   <- [9]
  fs              %10.0 = FrameState         R     0x55cfaa49ef80+310: [%8.1, %7.3, %8.2], env=e1.2
  void                    Deopt              !v    %10.0   !
Prom 0:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    FUN, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <cls->
  void                    Return             l     %1.3
Prom 1:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    X, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <vec->
  void                    Return             l     %1.3
Prom 2:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    X, e1.0
  val?            %1.2  = Force<wrapped>     !v    %1.1, e1.0   <vec->
  lgl$#-          %1.3  = IsType                   %1.2 isA val+   <true>
  void                    Branch                   %1.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [1]
  val?^ | miss    %2.0  = LdVar              eR    i, e1.0
  val?            %2.1  = Force<value>       !v    %2.0, e1.0   <int$->
  goto BB3
BB4   <- [1]
  prom-           %4.0  = MkArg                    unboundValue, lapply[0x55cfaa31ebc0]_p3, e1.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.1:BB2, %4.0:BB4
  val?            %3.1  = Extract2_1D        !v    %1.2, %3.0, e1.0   <real->
  void                    Visible            v     
  void                    Return             l     %3.1
Prom 3:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    i, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3

│ lapply[0x55cfaa31ebc0]                                                       │
└──────────────────────────────────────────────────────────────────────────────┘
