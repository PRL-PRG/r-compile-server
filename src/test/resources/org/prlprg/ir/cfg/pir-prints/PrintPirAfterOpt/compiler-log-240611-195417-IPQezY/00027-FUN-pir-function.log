
┌──────────────────────────────────────────────────────────────────────────────┐
│ FUN[0x55cca988acd0]                                                          │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch                                      │
│ Properties:                                                                  │
├────── PIR Version After Optimizations
FUN[0x55cca988acd0]
BB0
  goto BB1
BB1   <- [0]
  val?^           %1.0  = LdArg                    0
  cp              %1.1  = Checkpoint                -> BB2 (default) | BB17 (if assume failed)
BB2   <- [1]
  val?^ | miss    %2.0  = LdVar              eR    paste0, ?
  lgl$#-          %2.1  = Identical                %2.0, function(..., collapse=NULL, recycle0=FALSE) <|...
  void                    Assume             D     %2.1, %1.1 (CallTarget@0x55cca853e278[Call#0])
  env             e2.3  = MkEnv              l     sym=%1.0, parent=?, context 1
  prom-           %2.4  = MkArg                    unboundValue, FUN[0x55cca988acd0]_p0, e2.3
  prom-           %2.5  = MkArg                    unboundValue, FUN[0x55cca988acd0]_p1, e2.3
  prom-           %2.6  = MkArg                    unboundValue, FUN[0x55cca988acd0]_p4, e2.3
  dots-           %2.7  = DotsList           l     %2.4, %2.5, %2.6
  ct              %2.8  = PushContext        lCL   %2.7, paste0([(fixes, 1L), $(sym, name), [(fixes, 2L)), function(..., collapse=NULL, recycle0=FALSE) <|..., e2.3
  val?^ | miss    %2.9  = CastType                 up %2.4
  val?^ | miss    %2.10 = CastType                 up %2.5
  val?^ | miss    %2.11 = CastType                 up %2.6
  env             e2.12 = MkEnv              l     ...=%2.7, collapse(miss)=nil, recycle0(miss)=false, parent=R_BaseNamespace, context 1
  val?            %2.13 = Force!             !vr   %2.9, 
  val?            %2.14 = Force!             !vr   %2.10, 
  val?            %2.15 = Force!             !vr   %2.11, 
  val+            %2.16 = CallSafeBuiltin    wed   list(%2.13, %2.14, %2.15)    <vec->
  val?            %2.17 = CallBuiltin        !v    paste0(%2.16, nil, false) e2.12
  val?            %2.18 = PopContext         C     %2.17, %2.8   <str$->
  void                    StVar              lW    varName, %2.18, e2.3
  cp              %2.20 = Checkpoint                -> BB4 (default) | BB3 (if assume failed)
BB17   <- [1]
  env             e17.0 = (MkEnv)            l     sym=%1.0, parent=?, context 1
  fs              %17.1 = FrameState         R     0x55cca9248d20+0: [], env=e17.0
  void                    Deopt              !v    %17.1
BB4   <- [2]
  val?^ | miss    %4.0  = LdVar              eR    exists, e2.3
  lgl$#-          %4.1  = Identical                %4.0, function(x, where=-(1), envir=if(missing(frame|...
  void                    Assume             D     %4.1, %2.20 (CallTarget@0x55cca853e278[Call#2])
  prom-           %4.3  = MkArg                    unboundValue, FUN[0x55cca988acd0]_p5 (!refl), e2.3
  prom-           %4.4  = MkArg                    unboundValue, FUN[0x55cca988acd0]_p6, e2.3
  val?            %4.5  = StaticCall         !v    exists[0x55ccaa2cf5b0](%4.3, missingArg, %4.4, missingArg, missingArg, false) { 0 2n 5n } e2.3   <lgl$->
  lgl$#-          %4.6  = IsType                   %4.5 isA lgl$-
  cp              %4.7  = Checkpoint                -> BB6 (default) | BB5 (if assume failed)
BB3   <- [2]
  fs              %3.0  = FrameState         R     0x55cca9248d20+56: [], env=e2.3
  void                    Deopt              !v    %3.0   !
BB6   <- [4]
  void                    Assume             D     %4.6, %4.7 (Typecheck@0x55cca853e278[Type#10])
  lgl$-           %6.1  = CastType           d     dn %4.5
  lgl$#-          %6.2  = CheckTrueFalse     e     %6.1
  void                    Branch                   %6.2 -> BB16 (if true) | BB7 (if false)
BB5   <- [4]
  fs              %5.0  = FrameState         R     0x55cca9248d20+110: [%4.5], env=e2.3
  void                    Deopt              !v    %5.0   !
BB16   <- [6]
  (cls|spec|blt)  %16.0 = LdFun              !v    warning, e2.3
  fs              %16.1 = FrameState         R     0x55cca9248d20+453: [%16.0], env=e2.3
  void                    Deopt              !v    %16.1, DeadCall@0x55cca853e278[Call#7], %16.0   !
BB7   <- [6]
  val?^ | miss    %7.0  = LdVar              eR    sym, e2.3
  val?            %7.1  = Force!<wrapped>    !v    %7.0, e2.3   <vec>
  val?^ | miss    %7.2  = LdVar              eR    env !upd, e2.3
  val?            %7.3  = Force!<wrapped>    !v    %7.2, e2.3   <env->
  cp              %7.4  = Checkpoint                -> BB9 (default) | BB8 (if assume failed)
BB9   <- [7]
  val?^ | miss    %9.0  = LdVar              eR    varName, e2.3
  lgl$#-          %9.1  = IsType                   %9.0 isA val?~- | miss
  void                    Assume             D     %9.1, %7.4 (Typecheck@0x55cca853e278[Type#13])
  val?~- | miss   %9.3  = CastType           d     dn %9.0
  val?-           %9.4  = Force!<value>            %9.3,    <str$->
  val?            %9.5  = Subassign2_1D      !v    %7.1, %7.3, %9.4, e2.3
  void                    StVar              lW    env, %9.5, e2.3
  cp              %9.7  = Checkpoint                -> BB11 (default) | BB10 (if assume failed)
BB8   <- [7]
  fs              %8.0  = FrameState         R     0x55cca9248d20+144: [%7.1, %7.3], env=e2.3
  void                    Deopt              !v    %8.0   !
BB11   <- [9]
  val?^ | miss    %11.0 = LdVar              eR    c, e2.3
  lgl$#-          %11.1 = Identical                <blt c>, %11.0   <true>
  void                    Assume             D     %11.1, %9.7 (DeadBranchReached@0x55cca853e278[Test#2])
  val?^ | miss    %11.3 = LdVar              eR    varnames, e2.3
  lgl$#-          %11.4 = IsType                   %11.3 isA val?~- | miss
  void                    Assume             D     %11.4, %9.7 (Typecheck@0x55cca853e278[Type#16])
  val?~- | miss   %11.6 = CastType           d     dn %11.3
  val?-           %11.7 = Force!<value>            %11.6,    <str->
  val?^ | miss    %11.8 = LdVar              eR    varName, e2.3
  lgl$#-          %11.9 = IsType                   %11.8 isA val?~- | miss
  void                    Assume             D     %11.9, %9.7 (Typecheck@0x55cca853e278[Type#17])
  val?~- | miss   %11.11 = CastType           d     dn %11.8
  val?-           %11.12 = Force!<value>            %11.11,    <str$->
  val+            %11.13 = CallSafeBuiltin    wed   c(%11.7, %11.12)    <str->
  void                    StVarSuper         lRW   varnames, %11.13, e2.3
  cp              %11.15 = Checkpoint                -> BB13 (default) | BB12 (if assume failed)
BB10   <- [9]
  fs              %10.0 = FrameState         R     0x55cca9248d20+173: [], env=e2.3
  void                    Deopt              !v    %10.0   !
BB13   <- [11]
  val?^ | miss    %13.0 = LdVar              eR    c, e2.3
  lgl$#-          %13.1 = Identical                <blt c>, %13.0   <true>
  void                    Assume             D     %13.1, %11.15 (DeadBranchReached@0x55cca853e278[Test#3])
  val?^ | miss    %13.3 = LdVar              eR    symnames, e2.3
  lgl$#-          %13.4 = IsType                   %13.3 isA val?~- | miss
  void                    Assume             D     %13.4, %11.15 (Typecheck@0x55cca853e278[Type#23])
  val?~- | miss   %13.6 = CastType           d     dn %13.3
  val?-           %13.7 = Force!<value>            %13.6,    <str->
  (cls|spec|blt)  %13.8 = LdFun              !v    $, <0x55cca70fdc10>, e2.3
  prom-           %13.9 = MkArg                    unboundValue, FUN[0x55cca988acd0]_p7, e2.3
  prom-           %13.10 = MkArg                    unboundValue, FUN[0x55cca988acd0]_p8, e2.3
  val?            %13.11 = Call               !v    %13.8(%13.9, %13.10) e2.3   <str$->
  lgl$#-          %13.12 = IsType                   %13.11 isA val?-
  cp              %13.13 = Checkpoint                -> BB15 (default) | BB14 (if assume failed)
BB12   <- [11]
  fs              %12.0 = FrameState         R     0x55cca9248d20+293: [], env=e2.3
  void                    Deopt              !v    %12.0   !
BB15   <- [13]
  void                    Assume             D     %13.12, %13.13 (Typecheck@0x55cca853e278[Type#26])
  val?-           %15.1 = CastType           d     dn %13.11   <str$->
  val+            %15.2 = CallSafeBuiltin    wed   c(%13.7, %15.1)    <str->
  void                    Invisible          v     
  void                    StVarSuper         lRW   symnames, %15.2, e2.3
  void                    Return             l     %15.2
BB14   <- [13]
  fs              %14.0 = FrameState         R     0x55cca9248d20+409: [<blt c>, %13.7, %13.11], env=e2.3
  void                    Deopt              !v    %14.0   !
Prom 0:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    fixes, e1.0
  val?            %1.2  = Force<value>       !v    %1.1, e1.0   <str->
  val?            %1.3  = Extract1_1D        !v    %1.2, 1L, e1.0   <str$->
  void                    Visible            v     
  void                    Return             l     %1.3
Prom 1:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     $, <0x55cca70fdc10>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, FUN[0x55cca988acd0]_p2, e1.0
  prom-           %1.3  = MkArg                    unboundValue, FUN[0x55cca988acd0]_p3, e1.0
  val?            %1.4  = Call               !     %1.1(%1.2, %1.3) e1.0   <str$->
  void                    Return             l     %1.4
Prom 2:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    sym, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <vec>
  void                    Return             l     %1.3
Prom 3:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    name, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 4:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    fixes, e1.0
  val?            %1.2  = Force<value>       !v    %1.1, e1.0   <str->
  val?            %1.3  = Extract1_1D        !v    %1.2, 2L, e1.0   <str$->
  void                    Visible            v     
  void                    Return             l     %1.3
Prom 5:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    varName, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 6:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    env, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <env->
  void                    Return             l     %1.3
Prom 7:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    sym, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <vec>
  void                    Return             l     %1.3
Prom 8:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    name, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3

│ FUN[0x55cca988acd0]                                                          │
└──────────────────────────────────────────────────────────────────────────────┘
