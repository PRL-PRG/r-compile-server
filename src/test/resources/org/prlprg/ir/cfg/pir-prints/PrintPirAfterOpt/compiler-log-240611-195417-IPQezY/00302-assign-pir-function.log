
┌──────────────────────────────────────────────────────────────────────────────┐
│ assign[0x55cca7c6b920]                                                       │
│ Context: CorrOrd,!TMany,Argmatch;Eager0,Eager2,NonRefl0,NonRefl2,!Obj0 miss: 2│
│ Properties:  ForceOrd: 0 1                                                   │
├────── PIR Version After Optimizations
assign[0x55cca7c6b920]
BB0
  goto BB1
BB1   <- [0]
  val?^ | miss    %1.0  = LdArg                    3
  val?~ | miss    %1.1  = LdArg                    2
  val?^ | miss    %1.2  = LdArg                    1
  val?~+          %1.3  = LdArg                    0
  lgl$#-          %1.4  = Identical                %1.1, missingArg
  lgl$#-          %1.5  = Identical                %1.0, missingArg
  env             e1.6  = MkEnv              l     x=%1.3, value=%1.2, pos=%1.1, envir=%1.0, inherits(miss)=missingArg, immediate(miss)=missingArg, parent=R_BaseNamespace, context 1
  void                    Branch                   %1.4 -> BB2 (if true) | BB7 (if false)
BB2   <- [1]
  prom-           %2.0  = MkArg                    unboundValue, assign[0x55cca7c6b920]_p0 (!refl), 
  val?^ | miss    %2.1  = CastType                 up %2.0
  void                    StArg              lW    pos, %2.1, e1.6
  goto BB3
BB7   <- [1]
  goto BB3
BB3   <- [2, 7]
  void                    Branch                   %1.5 -> BB6 (if true) | BB4 (if false)
BB6   <- [3]
  prom-           %6.0  = MkArg                    unboundValue, assign[0x55cca7c6b920]_p1, e1.6
  val?^ | miss    %6.1  = CastType                 up %6.0
  void                    StArg              lW    envir, %6.1, e1.6
  goto BB5
BB4   <- [3]
  goto BB5
BB5   <- [6, 4]
  void                    StArg              lW    inherits, false, e1.6
  void                    StArg              lW    immediate, true, e1.6
  val+            %5.2  = Force<lazy>              %1.3,    <str$->
  val?^           %5.3  = ChkMissing         e     %1.2
  val?            %5.4  = Force!<lazy>       !v    %5.3, e1.6   <val?>
  val?^ | miss    %5.5  = LdVar              eR    envir, e1.6
  val?            %5.6  = Force!<lazy>       !v    %5.5, e1.6   <env->
  val?^ | miss    %5.7  = LdVar              eR    inherits, e1.6
  val?            %5.8  = Force!<lazy>       !v    %5.7, e1.6   <lgl$->
  val?            %5.9  = CallBuiltin        !     assign(%5.2, %5.4, %5.6, %5.8) e1.6
  void                    Return             l     %5.9
Prom 0:
BB0
  goto BB1
BB1   <- [0]
  void                    Visible            v     
  void                    Return             l     -1
Prom 1:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     as.environment, <0x55cca710ab70>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, assign[0x55cca7c6b920]_p2, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <env->
  void                    Return             l     %1.3
Prom 2:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    pos, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <env->
  void                    Return             l     %1.3

│ assign[0x55cca7c6b920]                                                       │
└──────────────────────────────────────────────────────────────────────────────┘
