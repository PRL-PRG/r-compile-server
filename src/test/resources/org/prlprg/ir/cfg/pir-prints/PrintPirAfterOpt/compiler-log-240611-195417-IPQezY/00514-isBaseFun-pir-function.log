
┌──────────────────────────────────────────────────────────────────────────────┐
│ isBaseFun[0x55cca97daa10]                                                    │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;NonRefl0                             │
│ Properties:                                                                  │
├────── PIR Version After Optimizations
isBaseFun[0x55cca97daa10]
BB0
  goto BB1
BB1   <- [0]
  val?^           %1.0  = LdArg                    0
  cp              %1.1  = Checkpoint                -> BB2 (default) | BB18 (if assume failed)
BB2   <- [1]
  val?^ | miss    %2.0  = LdVar              eR    is.primitive, <env 0x55cca7705378>
  lgl$#-          %2.1  = Identical                %2.0, function(x) <(rir::DispatchTable*)0x55ccaacef7|...
  void                    Assume             D     %2.1, %1.1 (CallTarget@0x55ccab36f428[Call#0])
  env             e2.3  = MkEnv              l     fun=%1.0, parent=<env 0x55cca7705378>, context 1
  val?            %2.4  = Force!<lazy>       !vr   %1.0,    <cls>
  str$-           %2.5  = CallSafeBuiltin    wed   typeof(%2.4)    <str$->
  int$-           %2.6  = Length                   %2.5
  cp              %2.7  = Checkpoint                -> BB4 (default) | BB3 (if assume failed)
BB18   <- [1]
  env             e18.0 = (MkEnv)            l     fun=%1.0, parent=<env 0x55cca7705378>, context 1
  fs              %18.1 = FrameState         R     0x55cca983f440+0: [], env=e18.0
  void                    Deopt              !v    %18.1
BB4   <- [2]
  lgl$-           %4.0  = Eq                 d     %2.6, 1L, elided   <true>
  lgl$#-          %4.1  = Identical                %4.0, true
  void                    Assume             D     %4.1, %2.7 (DeadBranchReached@0x55ccaa8b4dc8[Test#1])
  lgl$-           %4.3  = CallSafeBuiltin    wed   is.na(%2.5) 
  cp              %4.4  = Checkpoint                -> BB6 (default) | BB5 (if assume failed)
BB3   <- [2]
  prom-           %3.0  = MkArg                    %2.4, isBaseFun[0x55cca97daa10]_p0 (!refl), e2.3
  val?~           %3.1  = CastType                 up %3.0
  env             e3.2  = (MkEnv)            l     x=%3.1, parent=R_BaseNamespace, context 0
  env             e3.3  = MaterializeEnv           , e3.2   <@?>
  fs              %3.4  = FrameState         R     0x55cca983f440+32: [], env=e2.3
  fs              %3.5  = FrameState         R     0x55cca749ec40+32: [], env=e3.3, next=%3.4
  prom-           %3.6  = MkArg                    %2.4, isBaseFun[0x55cca97daa10]_p4 (!refl), e3.3
  val?~           %3.7  = CastType                 up %3.6
  env             e3.8  = (MkEnv)            l     x=%3.7, parent=R_BaseNamespace, context -1
  fs              %3.9  = FrameState         R     0x55cca91cf530+27: [%2.5], env=e3.8, next=%3.5
  void                    Deopt              !v    %3.9
BB6   <- [4]
  lgl$#-          %6.0  = CheckTrueFalse     e     %4.3   <false>
  void                    AssumeNot          D     %6.0, %4.4 (DeadBranchReached@0x55ccaa8b4dc8[Test#7])
  lgl$-           %6.2  = Eq                 d     %2.5, special, elided
  lgl$#-          %6.3  = CheckTrueFalse     e     %6.2
  void                    Branch                   %6.3 -> BB17 (if true) | BB7 (if false)
BB5   <- [4]
  prom-           %5.0  = MkArg                    %2.4, isBaseFun[0x55cca97daa10]_p0 (!refl), e2.3
  val?~           %5.1  = CastType                 up %5.0
  fs              %5.2  = FrameState         R     0x55cca983f440+32: [], env=e2.3
  env             e5.3  = (MkEnv)            l     x=%5.1, parent=R_BaseNamespace, context 0
  fs              %5.4  = FrameState         R     0x55cca749ec40+240: [%2.5, %4.3], env=e5.3, next=%5.2
  void                    Deopt              !v    %5.4
BB17   <- [6]
  goto BB16
BB7   <- [6]
  lgl$-           %7.0  = Eq                 d     %2.5, builtin, elided
  lgl$#-          %7.1  = CheckTrueFalse     e     %7.0
  void                    Branch                   %7.1 -> BB15 (if true) | BB8 (if false)
BB16   <- [17, 15]
  void                    Visible            v     
  goto BB9
BB15   <- [7]
  goto BB16
BB8   <- [7]
  void                    Visible            v     
  goto BB9
BB9   <- [8, 16]
  lgl$#-          %9.0  = Phi                      false:BB8, true:BB16
  void                    Branch                   %9.0 -> BB14 (if true) | BB10 (if false)
BB14   <- [9]
  goto BB13
BB10   <- [9]
  val?^ | miss    %10.0 = LdVar              eR    identical, <env 0x55cca7705378>
  lgl$#-          %10.1 = Identical                %10.0, function(x, y, num.eq=TRUE, single.NA=TRUE, at|...
  void                    Assume             D     %10.1, %4.4 (CallTarget@0x55ccab36f428[Call#1])
  prom-           %10.3 = MkArg                    unboundValue, isBaseFun[0x55cca97daa10]_p1, e2.3
  prom-           %10.4 = MkArg                    unboundValue, isBaseFun[0x55cca97daa10]_p3, e2.3
  ct              %10.5 = PushContext        lCL   %10.3, %10.4, identical(environment(fun), .BaseNamespaceEnv), function(x, y, num.eq=TRUE, single.NA=TRUE, at|..., e2.3
  val?^           %10.6 = CastType                 up %10.4
  val?^           %10.7 = CastType                 up %10.3
  env             e10.8 = MkEnv              l     x=%10.7, y=%10.6, num.eq(miss)=true, single.NA(miss)=true, attrib.as.set(miss)=true, ignore.bytecode(miss)=true, ignore.environment(miss)=false, ignore.srcref(miss)=true, parent=R_BaseNamespace, context 1
  val?            %10.9 = Force!<lazy>       !vr   %10.7,    <val?>
  val?            %10.10 = Force!<lazy>       !vL   %10.6, e10.8   <val?>
  val?            %10.11 = CallBuiltin        !     identical(%10.9, %10.10, true, true, true, true, false, true) e10.8
  val?            %10.12 = PopContext         C     %10.11, %10.5   <lgl$->
  lgl$#-          %10.13 = IsType                   %10.12 isA lgl$-
  cp              %10.14 = Checkpoint                -> BB12 (default) | BB11 (if assume failed)
BB13   <- [12, 14]
  lgl$-           %13.0 = Phi                      %12.3:BB12, %9.0:BB14
  void                    Return             l     %13.0
BB12   <- [10]
  void                    Assume             D     %10.13, %10.14 (Typecheck@0x55ccab36f428[Type#5])
  lgl$-           %12.1 = CastType           d     dn %10.12
  lgl$-           %12.2 = AsLogical                %12.1
  lgl$-           %12.3 = LOr                      %9.0, %12.2
  goto BB13
BB11   <- [10]
  fs              %11.0 = FrameState         R     0x55cca983f440+81: [%9.0, %10.12], env=e2.3
  void                    Deopt              !v    %11.0   !
Prom 0:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    fun, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <cls>
  void                    Return             l     %1.3
Prom 1:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     environment, <0x55cca74a4b68>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, isBaseFun[0x55cca97daa10]_p2, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <env->
  void                    Return             l     %1.3
Prom 2:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    fun, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <cls>
  void                    Return             l     %1.3
Prom 3:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    .BaseNamespaceEnv, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <env->
  void                    Return             l     %1.3
Prom 4:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    x, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <val?>
  void                    Return             l     %1.3

│ isBaseFun[0x55cca97daa10]                                                    │
└──────────────────────────────────────────────────────────────────────────────┘
