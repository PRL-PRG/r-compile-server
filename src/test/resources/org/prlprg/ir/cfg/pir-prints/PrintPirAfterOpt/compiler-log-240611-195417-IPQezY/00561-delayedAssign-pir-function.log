
┌──────────────────────────────────────────────────────────────────────────────┐
│ delayedAssign[0x55cca7857a40]                                                │
│ Context: CorrOrd,!TMany,Argmatch;Eager2,NonRefl2                             │
│ Properties:  ForceOrd: 0                                                     │
├────── PIR Version After Optimizations
delayedAssign[0x55cca7857a40]
BB0
  goto BB1
BB1   <- [0]
  val?^ | miss    %1.0  = LdArg                    3
  val?~ | miss    %1.1  = LdArg                    2
  val?^ | miss    %1.2  = LdArg                    1
  val?^ | miss    %1.3  = LdArg                    0
  lgl$#-          %1.4  = Identical                %1.1, missingArg
  lgl$#-          %1.5  = Identical                %1.0, missingArg
  env             e1.6  = MkEnv              l     x=%1.3, value=%1.2, eval.env=%1.1, assign.env=%1.0, parent=R_BaseNamespace, context 1
  void                    Branch                   %1.4 -> BB2 (if true) | BB9 (if false)
BB2   <- [1]
  prom-           %2.0  = MkArg                    unboundValue, delayedAssign[0x55cca7857a40]_p0, e1.6
  val?^ | miss    %2.1  = CastType                 up %2.0
  void                    StArg              lW    eval.env, %2.1, e1.6
  goto BB3
BB9   <- [1]
  goto BB3
BB3   <- [2, 9]
  void                    Branch                   %1.5 -> BB8 (if true) | BB4 (if false)
BB8   <- [3]
  prom-           %8.0  = MkArg                    unboundValue, delayedAssign[0x55cca7857a40]_p1, e1.6
  val?^ | miss    %8.1  = CastType                 up %8.0
  void                    StArg              lW    assign.env, %8.1, e1.6
  goto BB5
BB4   <- [3]
  goto BB5
BB5   <- [8, 4]
  val?^           %5.0  = ChkMissing         e     %1.3
  val?            %5.1  = Force!<lazy>       !v    %5.0, e1.6   <str$+>
  lgl$#-          %5.2  = IsType                   %5.1 isA val?+
  cp              %5.3  = Checkpoint                -> BB7 (default) | BB6 (if assume failed)
BB7   <- [5]
  void                    Assume             D     %5.2, %5.3 (Typecheck@0x55cca93b20e0[Type#2])
  val?+           %7.1  = CastType           d     dn %5.1   <str$+>
  (cls|spec|blt)  %7.2  = LdFun              !v    substitute, <0x55cca70fd468>, e1.6
  prom-           %7.3  = MkArg                    unboundValue, delayedAssign[0x55cca7857a40]_p2, e1.6
  val?            %7.4  = Call               !v    %7.2(%7.3) e1.6   <code->
  val?^ | miss    %7.5  = LdVar              eR    eval.env, e1.6
  val?            %7.6  = Force!<lazy>       !v    %7.5, e1.6   <env->
  val?^ | miss    %7.7  = LdVar              eR    assign.env, e1.6
  val?            %7.8  = Force!<lazy>       !v    %7.7, e1.6   <env->
  val?            %7.9  = CallBuiltin        !     delayedAssign(%7.1, %7.4, %7.6, %7.8) e1.6
  void                    Return             l     %7.9
BB6   <- [5]
  fs              %6.0  = FrameState         R     0x55cca93b1ed0+9: [%5.1], env=e1.6
  void                    Deopt              !v    %6.0   !
Prom 0:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     parent.frame, <0x55cca7212170>, e1.0
  val?            %1.2  = Call               !     %1.1(1) e1.0   <env->
  void                    Return             l     %1.2
Prom 1:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     parent.frame, e1.0
  val?            %1.2  = Call               !     %1.1(1) e1.0   <val?_>
  void                    Return             l     %1.2
Prom 2:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    value, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3

│ delayedAssign[0x55cca7857a40]                                                │
└──────────────────────────────────────────────────────────────────────────────┘
