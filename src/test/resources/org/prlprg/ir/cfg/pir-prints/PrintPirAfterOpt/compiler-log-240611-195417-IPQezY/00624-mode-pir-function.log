
┌──────────────────────────────────────────────────────────────────────────────┐
│ mode[0x55ccb0aea7f0]                                                         │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;NonRefl0,!Obj0                       │
│ Properties:  Eager, ForceOrd: 0                                              │
├────── PIR Version After Optimizations
mode[0x55ccb0aea7f0]
BB0
  goto BB1
BB1   <- [0]
  val?^           %1.0  = LdArg                    0
  env             e1.1  = MkEnv              l     x=%1.0, parent=R_BaseNamespace, context 1
  val+            %1.2  = Force!<lazy>       !vr   %1.0,    <val?+>
  lgl$#-          %1.3  = CallSafeBuiltin    wed   is.expression(%1.2)    <lgl$->
  cp              %1.4  = Checkpoint                -> BB2 (default) | BB30 (if assume failed)
BB2   <- [1]
  void                    Branch                   %1.3 -> BB29 (if true) | BB3 (if false)
BB30   <- [1]
  fs              %30.0 = FrameState         R     0x55ccac9b1820+91: [%1.3], env=e1.1
  void                    Deopt              !v    %30.0
BB29   <- [2]
  void                    Visible            v     
  goto BB13
BB3   <- [2]
  lgl$#-          %3.0  = IsType                   %1.0 isA val?~+
  void                    Assume             D     %3.0, %1.4 (Typecheck@0x55ccada90848[Type#4])
  lgl$#-          %3.2  = CallSafeBuiltin    wed   is.call(%1.2)    <lgl$->
  void                    Branch                   %3.2 -> BB16 (if true) | BB4 (if false)
BB13   <- [29, 28, 12]
  str$-           %13.0 = Phi                      %12.0:BB12, "call":BB28, "expression":BB29
  void                    Return             l     %13.0
BB16   <- [3]
  prom-           %16.0 = MkArg                    unboundValue, mode[0x55ccb0aea7f0]_p1, e1.1
  ct              %16.1 = PushContext        lCL   %16.0, deparse([[(x, 1L)), function(expr, width.cutoff=60L, backtick=%in%|..., e1.1
  val?^           %16.2 = CastType                 up %16.0
  env             e16.3 = MkEnv              l     expr=%16.2, width.cutoff(miss)=60L, backtick(miss)=missingArg, control(miss)=missingArg, nlines(miss)=missingArg, parent=R_BaseNamespace, context 1
  prom-           %16.4 = MkArg                    unboundValue, mode[0x55ccb0aea7f0]_p2, e16.3
  val?^ | miss    %16.5 = CastType                 up %16.4
  void                    StArg              lW    backtick, %16.5, e16.3
  prom-           %16.7 = MkArg                    unboundValue, mode[0x55ccb0aea7f0]_p6, e16.3
  val?^ | miss    %16.8 = CastType                 up %16.7
  void                    StArg              lW    control, %16.8, e16.3
  prom-           %16.10 = MkArg                    unboundValue, mode[0x55ccb0aea7f0]_p7 (!refl), 
  val?^ | miss    %16.11 = CastType                 up %16.10
  void                    StArg              lW    nlines, %16.11, e16.3
  val?            %16.13 = Force!<lazy>       !vL   %16.2, e16.3   <(sym|code)->
  val?            %16.14 = Force!<lazy>       !v    %16.5, e16.3   <lgl$->
  cp              %16.15 = Checkpoint                -> BB18 (default) | BB17 (if assume failed)
BB4   <- [3]
  lgl$#-          %4.0  = CallSafeBuiltin    wed   is.symbol(%1.2)    <lgl$->
  void                    Branch                   %4.0 -> BB15 (if true) | BB5 (if false)
BB18   <- [16]
  val?^ | miss    %18.0 = LdVar              eR    .deparseOpts, e16.3
  lgl$#-          %18.1 = Identical                %18.0, function(control) <(rir::DispatchTable*)0x55cc|...
  void                    Assume             D     %18.1, %16.15 (CallTarget@0x55cca9881a30[Call#4])
  val?^ | miss    %18.3 = LdVar              eR    control, e16.3
  val?            %18.4 = Force!<lazy>       !v    %18.3, e16.3   <str->
  prom-           %18.5 = MkArg                    %18.4, mode[0x55ccb0aea7f0]_p8 (!refl), 
  val?            %18.6 = StaticCall         !v    .deparseOpts[0x55ccacd59a60](%18.5) e16.3   <real$->
  lgl$#-          %18.7 = IsType                   %18.6 isA real$-
  cp              %18.8 = Checkpoint                -> BB20 (default) | BB19 (if assume failed)
BB17   <- [16]
  fs              %17.0 = FrameState         R     0x55ccac9b1820+253: [], env=e1.1
  fs              %17.1 = FrameState         R     0x55ccad4f66f0+37: [%16.13, 60L, %16.14], env=e16.3, next=%17.0
  void                    Deopt              !v    %17.1   !
BB15   <- [4]
  void                    Visible            v     
  goto BB12
BB5   <- [4]
  str$-           %5.0  = CallSafeBuiltin    wed   typeof(%1.2)    <str$->
  int$-           %5.1  = Length                   %5.0
  void                    StVar              lW    tx, %5.0, e1.1
  cp              %5.3  = Checkpoint                -> BB7 (default) | BB6 (if assume failed)
BB20   <- [18]
  void                    Assume             D     %18.7, %18.8 (Typecheck@0x55cca9881a30[Type#9])
  real$-          %20.1 = CastType           d     dn %18.6
  val?^ | miss    %20.2 = LdVar              eR    nlines, e16.3
  val?            %20.3 = Force!<lazy>       !v    %20.2, e16.3   <int$->
  val?            %20.4 = CallBuiltin        !v    deparse(%16.13, 60L, %16.14, %20.1, %20.3) e16.3
  val?            %20.5 = PopContext         C     %20.4, %16.1   <str$->
  lgl$#-          %20.6 = IsType                   %20.5 isA val+   <true>
  lgl$#-          %20.7 = IsType                   %20.5 isA val?-
  cp              %20.8 = Checkpoint                -> BB22 (default) | BB21 (if assume failed)
BB19   <- [18]
  fs              %19.0 = FrameState         R     0x55ccac9b1820+253: [], env=e1.1
  fs              %19.1 = FrameState         R     0x55ccad4f66f0+74: [%16.13, 60L, %16.14, %18.6], env=e16.3, next=%19.0
  void                    Deopt              !v    %19.1   !
BB12   <- [15, 11]
  str$-           %12.0 = Phi                      %11.0:BB11, "name":BB15
  goto BB13
BB7   <- [5]
  lgl$-           %7.0  = Eq                 d     %5.1, 1L, elided   <true>
  lgl$#-          %7.1  = Identical                %7.0, true
  void                    Assume             D     %7.1, %5.3 (DeadBranchReached@0x55ccada90848[Test#14])
  lgl$-           %7.3  = CallSafeBuiltin    wed   is.na(%5.0) 
  cp              %7.4  = Checkpoint                -> BB9 (default) | BB8 (if assume failed)
BB6   <- [5]
  fs              %6.0  = FrameState         R     0x55ccac9b1820+708: [%5.0], env=e1.1
  void                    Deopt              !v    %6.0
BB22   <- [20]
  void                    Assume             D     %20.6, %20.8 (DeadBranchReached@0x55ccada90848[Test#3])
  void                    Assume             D     %20.7, %20.8 (Typecheck@0x55ccada90848[Type#8])
  val?-           %22.2 = CastType           d     dn %20.5   <str$->
  val?            %22.3 = Extract1_1D        wed   %22.2, 1L, elided   <str$->
  lgl$-           %22.4 = Is                       %22.3, logical
  lgl$-           %22.5 = Is                       %22.3, integer
  lgl$-           %22.6 = Is                       %22.3, double
  lgl$-           %22.7 = Is                       %22.3, complex
  lgl$-           %22.8 = Is                       %22.3, character   <true>
  lgl$-           %22.9 = Is                       %22.3, raw
  lgl$-           %22.10 = Is                       %22.3, list
  lgl$-           %22.11 = Is                       %22.3, expression
  lgl$-           %22.12 = LOr                      %22.11, %22.10
  lgl$-           %22.13 = LOr                      %22.12, %22.9
  lgl$-           %22.14 = LOr                      %22.13, %22.8
  lgl$-           %22.15 = LOr                      %22.14, %22.7
  lgl$-           %22.16 = LOr                      %22.15, %22.6
  lgl$-           %22.17 = LOr                      %22.16, %22.5
  lgl$-           %22.18 = LOr                      %22.17, %22.4   <true>
  lgl$#-          %22.19 = Identical                %22.18, true
  int$-           %22.20 = Length                   %22.3
  lgl$-           %22.21 = Is                       %22.3, Factor   <false>
  lgl$#-          %22.22 = Identical                %22.21, false
  lgl$#-          %22.23 = Identical                %22.8, true
  lgl$#-          %22.24 = IsType                   %22.3 isA val?-
  cp              %22.25 = Checkpoint                -> BB24 (default) | BB23 (if assume failed)
BB21   <- [20]
  fs              %21.0 = FrameState         R     0x55ccac9b1820+253: [%20.5], env=e1.1
  void                    Deopt              !v    %21.0   !
BB9   <- [7]
  lgl$#-          %9.0  = CheckTrueFalse     e     %7.3   <false>
  void                    AssumeNot          D     %9.0, %7.4 (DeadBranchReached@0x55ccada90848[Test#23])
  lgl$-           %9.2  = Eq                 d     %5.0, double, elided
  lgl$#-          %9.3  = CheckTrueFalse     e     %9.2
  void                    Branch                   %9.3 -> BB14 (if true) | BB10 (if false)
BB8   <- [7]
  fs              %8.0  = FrameState         R     0x55ccac9b1820+965: [%5.0, %7.3], env=e1.1
  void                    Deopt              !v    %8.0
BB24   <- [22]
  void                    Assume             D     %22.19, %22.25 (DeadBranchReached@0x55ccada90848[Test#4])
  lgl$-           %24.1 = Eq                 d     %22.20, 1L, elided   <true>
  lgl$#-          %24.2 = Identical                %24.1, true
  void                    Assume             D     %24.2, %22.25 (DeadBranchReached@0x55ccada90848[Test#5])
  void                    Assume             D     %22.22, %22.25 (DeadBranchReached@0x55ccada90848[Test#6])
  void                    Assume             D     %22.23, %22.25 (DeadBranchReached@0x55ccada90848[Test#7])
  void                    Assume             D     %22.24, %22.25 (Typecheck@0x55ccada90848[Type#9])
  val?-           %24.7 = CastType           d     dn %22.3   <str$->
  lgl-            %24.8 = CallSafeBuiltin    wed   is.na(%24.7) 
  lgl$#-          %24.9 = CheckTrueFalse     we    %24.8   <false>
  cp              %24.10 = Checkpoint                -> BB26 (default) | BB25 (if assume failed)
BB23   <- [22]
  fs              %23.0 = FrameState         R     0x55ccac9b1820+296: [%22.3], env=e1.1
  void                    Deopt              !v    %23.0   !
BB14   <- [9]
  void                    Visible            v     
  goto BB11
BB10   <- [9]
  lgl$-           %10.0 = Eq                 d     %5.0, integer, elided
  lgl$#-          %10.1 = CheckTrueFalse     e     %10.0   <false>
  void                    AssumeNot          D     %10.1, %7.4 (DeadBranchReached@0x55ccada90848[Test#25])
  lgl$-           %10.3 = Eq                 d     %5.0, closure, elided
  lgl$#-          %10.4 = CheckTrueFalse     e     %10.3   <false>
  void                    AssumeNot          D     %10.4, %7.4 (DeadBranchReached@0x55ccada90848[Test#26])
  lgl$-           %10.6 = Eq                 d     %5.0, builtin, elided
  lgl$#-          %10.7 = CheckTrueFalse     e     %10.6   <false>
  void                    AssumeNot          D     %10.7, %7.4 (DeadBranchReached@0x55ccada90848[Test#27])
  lgl$-           %10.9 = Eq                 d     %5.0, special, elided
  lgl$#-          %10.10 = CheckTrueFalse     e     %10.9   <false>
  void                    AssumeNot          D     %10.10, %7.4 (DeadBranchReached@0x55ccada90848[Test#28])
  void                    Visible            v     
  goto BB11
BB26   <- [24]
  void                    AssumeNot          D     %24.9, %24.10 (DeadBranchReached@0x55ccada90848[Test#10])
  lgl-            %26.1 = Eq                 wed   %24.7, (, elided
  lgl$#-          %26.2 = CheckTrueFalse     we    %26.1   <false>
  cp              %26.3 = Checkpoint                -> BB28 (default) | BB27 (if assume failed)
BB25   <- [24]
  fs              %25.0 = FrameState         R     0x55ccac9b1820+488: [%24.7, %24.9], env=e1.1
  void                    Deopt              !v    %25.0   !
BB11   <- [10, 14]
  str$-           %11.0 = Phi                      %5.0:BB10, "numeric":BB14
  goto BB12
BB28   <- [26]
  void                    AssumeNot          D     %26.2, %26.3 (DeadBranchReached@0x55ccada90848[Test#11])
  void                    Visible            v     
  goto BB13
BB27   <- [26]
  fs              %27.0 = FrameState         R     0x55ccac9b1820+512: [%24.7, %26.2], env=e1.1
  void                    Deopt              !v    %27.0   !
Prom 1:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    x, e1.0
  val?            %1.2  = Force<wrapped>     !v    %1.1, e1.0   <code->
  val?            %1.3  = Extract2_1D        !v    %1.2, 1L, e1.0   <sym->
  void                    Visible            v     
  void                    Return             l     %1.3
Prom 2:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     %in%, <0x55cca7414c40>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, mode[0x55ccb0aea7f0]_p3, e1.0
  prom-           %1.3  = MkArg                    unboundValue, mode[0x55ccb0aea7f0]_p5, e1.0
  val?            %1.4  = Call               !     %1.1(%1.2, %1.3) e1.0   <lgl$->
  void                    Return             l     %1.4
Prom 3:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     mode, <0x55cca81e2140>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, mode[0x55ccb0aea7f0]_p4, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <str$->
  void                    Return             l     %1.3
Prom 4:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    expr, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <(sym|code)->
  void                    Return             l     %1.3
Prom 5:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     c, <0x55cca70fe940>, e1.0
  val?            %1.2  = Call               !     %1.1("call", "expression", "(", "function") e1.0   <str->
  void                    Return             l     %1.2
Prom 6:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     c, <0x55cca70fe940>, e1.0
  val?            %1.2  = Call               !     %1.1("keepNA", "keepInteger", "niceNames", "showAttributes") e1.0   <str->
  void                    Return             l     %1.2
Prom 7:
BB0
  goto BB1
BB1   <- [0]
  void                    Visible            v     
  void                    Return             l     -1L
Prom 8:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    control, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <str->
  void                    Return             l     %1.3

│ mode[0x55ccb0aea7f0]                                                         │
└──────────────────────────────────────────────────────────────────────────────┘
