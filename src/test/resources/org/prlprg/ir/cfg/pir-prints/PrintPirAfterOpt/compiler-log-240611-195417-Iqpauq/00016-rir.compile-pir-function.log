
┌──────────────────────────────────────────────────────────────────────────────┐
│ rir.compile[0x55abb457f5b0]                                                  │
│ Context: CorrOrd,!TMany                                                      │
│ Properties:  Eager                                                           │
├────── PIR Version After Optimizations
rir.compile[0x55abb457f5b0]
BB0
  goto BB1
BB1   <- [0]
  int-            %1.0  = Colon              d     1L, 10L, elided   <val?_>
  int$-           %1.1  = Extract1_1D        wed   %1.0, 1L, elided   <val?_>
  real$-          %1.2  = Div                d     %1.1, 1L, elided   <val?_>
  real$-          %1.3  = Add                d     0, %1.2, elided   <val?_>
  env             e1.4  = MkEnv              l     x=%1.0, avg=%1.3, i=1L, parent=R_GlobalEnv, context 1
  goto BB2
BB2   <- [1, 8]
  (int|real|complex)+ %2.0  = Phi                      %1.3:BB1, %8.5:BB8   <val?_>
  int$-           %2.1  = Phi                      2L:BB1, %4.1:BB8
  lgl$-           %2.2  = Neq                d     11L, %2.1, elided
  lgl$#-          %2.3  = Identical                %2.2, false
  void                    Branch                   %2.3 -> BB3 (if true) | BB4 (if false)
BB3   <- [2]
  void                    Visible            v     
  void                    Return             l     %2.0
BB4   <- [2]
  void                    StVar              lW    i, %2.1, e1.4
  int$-           %4.1  = Add                d     %2.1, 1L, elided
  real$-          %4.2  = Sub                d     %2.1, 1, elided   <val?_>
  (real|complex)+ %4.3  = Mul                wed   %2.0, %4.2, elided   <val?_>
  (int|real|complex)+ %4.4  = Div                wed   %4.3, %2.1, elided   <val?_>
  val?^ | miss    %4.5  = LdVar              eR    x, e1.4
  val?            %4.6  = Force!             !v    %4.5, e1.4   <val?_>
  lgl$#-          %4.7  = IsType                   %4.6 isA val+   <@?>
  void                    Branch                   %4.7 -> BB5 (if true) | BB9 (if false)
BB5   <- [4]
  val?^ | miss    %5.0  = LdVar              eR    i, e1.4
  val?            %5.1  = Force!             !v    %5.0, e1.4   <val?_>
  goto BB6
BB9   <- [4]
  prom-           %9.0  = MkArg                    unboundValue, rir.compile[0x55abb457f5b0]_p0, e1.4
  goto BB6
BB6   <- [9, 5]
  val?            %6.0  = Phi                      %5.1:BB5, %9.0:BB9
  val?            %6.1  = Extract1_1D        !v    %4.6, %6.0, e1.4   <val?_>
  val?^ | miss    %6.2  = LdVar              eR    i, e1.4
  val?            %6.3  = Force!             !v    %6.2, e1.4   <val?_>
  lgl$#-          %6.4  = IsType                   %6.3 isA val?+
  lgl$#-          %6.5  = IsType                   %6.1 isA val?+
  cp              %6.6  = Checkpoint                -> BB8 (default) | BB7 (if assume failed)
BB8   <- [6]
  void                    Assume             D     %6.5, %6.6 (Typecheck@0x55abb3bd2fb8[Type#25])
  val?+           %8.1  = CastType           d     dn %6.1   <val?_>
  void                    Assume             D     %6.4, %6.6 (Typecheck@0x55abb3bd2fb8[Type#26])
  val?+           %8.3  = CastType           d     dn %6.3   <val?_>
  (int|real|complex)+ %8.4  = Div                wed   %8.1, %8.3, elided   <val?_>
  (int|real|complex)+ %8.5  = Add                wed   %4.4, %8.4, elided   <val?_>
  void                    StVar              lW    avg, %8.5, e1.4
  goto BB2
BB7   <- [6]
  fs              %7.0  = FrameState         R     0x55abb461e220+471: [1L, 11L, %4.1, %4.4, %6.1, %6.3], env=e1.4
  void                    Deopt              !v    %7.0   !
Prom 0:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    i, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3

│ rir.compile[0x55abb457f5b0]                                                  │
└──────────────────────────────────────────────────────────────────────────────┘
