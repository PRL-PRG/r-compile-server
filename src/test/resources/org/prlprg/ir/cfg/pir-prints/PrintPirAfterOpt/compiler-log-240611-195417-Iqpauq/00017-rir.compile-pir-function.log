
┌──────────────────────────────────────────────────────────────────────────────┐
│ rir.compile[0x55abb450cd20]                                                  │
│ Context: CorrOrd,!TMany                                                      │
│ Properties:  Eager                                                           │
├────── PIR Version After Optimizations
rir.compile[0x55abb450cd20]
BB0
  goto BB1
BB1   <- [0]
  int-            %1.0  = Colon              d     1L, 10L, elided   <val?_>
  int-            %1.1  = Colon              d     1L, 10L, elided   <val?_>
  int$-           %1.2  = Extract1_1D        wed   %1.0, 1L, elided   <val?_>
  int$-           %1.3  = Extract1_1D        wed   %1.0, 10, elided   <val?_>
  int$-           %1.4  = Add                d     %1.2, %1.3, elided   <val?_>
  int-            %1.5  = Subassign1_1D      wed   %1.4, %1.1, 1L, elided
  env             e1.6  = MkEnv              l     x=%1.0, y=%1.5, p=1L, i=1L, parent=R_GlobalEnv, context 1
  goto BB2
BB2   <- [1, 12]
  int$-           %2.0  = Phi                      2L:BB1, %4.1:BB12
  lgl$-           %2.1  = Neq                d     11L, %2.0, elided
  lgl$#-          %2.2  = Identical                %2.1, false
  void                    Branch                   %2.2 -> BB3 (if true) | BB4 (if false)
BB3   <- [2]
  val?^ | miss    %3.0  = LdVar              eR    y, e1.6
  void                    Visible            v     
  val?            %3.2  = Force!             !     %3.0, e1.6   <val?_>
  void                    Return             l     %3.2
BB4   <- [2]
  void                    StVar              lW    i, %2.0, e1.6
  int$-           %4.1  = Add                d     %2.0, 1L, elided
  val?^ | miss    %4.2  = LdVar              eR    x, e1.6
  val?            %4.3  = Force!             !v    %4.2, e1.6   <val?_>
  lgl$#-          %4.4  = IsType                   %4.3 isA val+   <@?>
  void                    Branch                   %4.4 -> BB5 (if true) | BB14 (if false)
BB5   <- [4]
  val?^ | miss    %5.0  = LdVar              eR    i, e1.6
  val?            %5.1  = Force!             !v    %5.0, e1.6   <val?_>
  goto BB6
BB14   <- [4]
  prom-           %14.0 = MkArg                    unboundValue, rir.compile[0x55abb450cd20]_p1, e1.6
  goto BB6
BB6   <- [14, 5]
  val?            %6.0  = Phi                      %5.1:BB5, %14.0:BB14
  val?            %6.1  = Extract1_1D        !v    %4.3, %6.0, e1.6   <val?_>
  val?^ | miss    %6.2  = LdVar              eR    x, e1.6
  val?            %6.3  = Force!             !v    %6.2, e1.6   <val?_>
  lgl$#-          %6.4  = IsType                   %6.3 isA val+   <@?>
  void                    Branch                   %6.4 -> BB13 (if true) | BB7 (if false)
BB13   <- [6]
  val?^ | miss    %13.0 = LdVar              eR    p, e1.6
  val?            %13.1 = Force!             !v    %13.0, e1.6   <val?_>
  goto BB8
BB7   <- [6]
  prom-           %7.0  = MkArg                    unboundValue, rir.compile[0x55abb450cd20]_p0, e1.6
  goto BB8
BB8   <- [7, 13]
  val?            %8.0  = Phi                      %13.1:BB13, %7.0:BB7
  val?            %8.1  = Extract1_1D        !v    %6.3, %8.0, e1.6   <val?_>
  lgl$#-          %8.2  = IsType                   %8.1 isA val?+
  cp              %8.3  = Checkpoint                -> BB10 (default) | BB9 (if assume failed)
BB10   <- [8]
  lgl$#-          %10.0 = IsType                   %6.1 isA val?+
  void                    Assume             D     %10.0, %8.3 (Typecheck@0x55abb3bd3488[Type#19])
  val?+           %10.2 = CastType           d     dn %6.1   <val?_>
  void                    Assume             D     %8.2, %8.3 (Typecheck@0x55abb3bd3488[Type#23])
  val?+           %10.4 = CastType           d     dn %8.1   <val?_>
  (int|real|complex)+ %10.5 = Add                wed   %10.2, %10.4, elided   <val?_>
  val?^ | miss    %10.6 = LdVar              eR    y !upd, e1.6
  val?            %10.7 = Force!             !v    %10.6, e1.6   <val?_>
  val?^ | miss    %10.8 = LdVar              eR    i, e1.6
  val?            %10.9 = Force!             !v    %10.8, e1.6   <val?_>
  lgl$#-          %10.10 = IsType                   %10.9 isA val?+
  lgl$#-          %10.11 = IsType                   %10.7 isA val?+
  cp              %10.12 = Checkpoint                -> BB12 (default) | BB11 (if assume failed)
BB9   <- [8]
  fs              %9.0  = FrameState         R     0x55abb4549770+512: [1L, 11L, %4.1, %6.1, %8.1], env=e1.6
  void                    Deopt              !v    %9.0   !
BB12   <- [10]
  void                    Assume             D     %10.11, %10.12 (Typecheck@0x55abb3bd3488[Type#25])
  val?+           %12.1 = CastType           d     dn %10.7   <val?_>
  void                    Assume             D     %10.10, %10.12 (Typecheck@0x55abb3bd3488[Type#26])
  val?+           %12.3 = CastType           d     dn %10.9   <val?_>
  val?+           %12.4 = Subassign1_1D      wed   %10.5, %12.1, %12.3, elided
  void                    StVar              lW    y, %12.4, e1.6
  val?^ | miss    %12.6 = LdVar              eR    i, e1.6
  val?            %12.7 = Force!             !v    %12.6, e1.6   <val?_>
  void                    StVar              lW    p, %12.7, e1.6
  goto BB2
BB11   <- [10]
  fs              %11.0 = FrameState         R     0x55abb4549770+547: [1L, 11L, %4.1, %10.5, %10.7, %10.9], env=e1.6
  void                    Deopt              !v    %11.0   !
Prom 0:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    p, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 1:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    i, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3

│ rir.compile[0x55abb450cd20]                                                  │
└──────────────────────────────────────────────────────────────────────────────┘
