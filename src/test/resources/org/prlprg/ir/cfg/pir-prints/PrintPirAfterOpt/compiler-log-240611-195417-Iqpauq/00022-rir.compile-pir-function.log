
┌──────────────────────────────────────────────────────────────────────────────┐
│ rir.compile[0x55abb46f0ec0]                                                  │
│ Context: CorrOrd,!TMany                                                      │
│ Properties:  Eager                                                           │
├────── PIR Version After Optimizations
rir.compile[0x55abb46f0ec0]
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = MkEnv              l     parent=R_GlobalEnv, context 1
  (cls|spec|blt)  %1.1  = LdFun              !v    matrix, R_GlobalEnv
  prom-           %1.2  = MkArg                    unboundValue, rir.compile[0x55abb46f0ec0]_p0 (!refl), 
  val?            %1.3  = NamedCall          !v    %1.1(%1.2, nrow=2, ncol=3, byrow=true) e1.0   <val?_>
  void                    StVar              lW    x, %1.3, e1.0
  (cls|spec|blt)  %1.5  = LdFun              !v    matrix, e1.0
  prom-           %1.6  = MkArg                    unboundValue, rir.compile[0x55abb46f0ec0]_p1 (!refl), 
  val?            %1.7  = NamedCall          !v    %1.5(%1.6, nrow=3, ncol=4, byrow=true) e1.0   <val?_>
  void                    StVar              lW    y, %1.7, e1.0
  (cls|spec|blt)  %1.9  = LdFun              !v    stopifnot, e1.0
  prom-           %1.10 = MkArg                    unboundValue, rir.compile[0x55abb46f0ec0]_p2, e1.0
  val?            %1.11 = Call               !v    %1.9(%1.10) e1.0
  (cls|spec|blt)  %1.12 = LdFun              !v    nrow, e1.0
  prom-           %1.13 = MkArg                    unboundValue, rir.compile[0x55abb46f0ec0]_p5, e1.0
  val?            %1.14 = Call               !v    %1.12(%1.13) e1.0   <val?_>
  void                    StVar              lW    rows, %1.14, e1.0
  (cls|spec|blt)  %1.16 = LdFun              !v    ncol, e1.0
  prom-           %1.17 = MkArg                    unboundValue, rir.compile[0x55abb46f0ec0]_p6, e1.0
  val?            %1.18 = Call               !v    %1.16(%1.17) e1.0   <val?_>
  void                    StVar              lW    cols, %1.18, e1.0
  (cls|spec|blt)  %1.20 = LdFun              !v    ncol, e1.0
  prom-           %1.21 = MkArg                    unboundValue, rir.compile[0x55abb46f0ec0]_p7, e1.0
  val?            %1.22 = Call               !v    %1.20(%1.21) e1.0   <val?_>
  void                    StVar              lW    inner, %1.22, e1.0
  val?^ | miss    %1.24 = LdVar              eR    %*%, e1.0
  lgl$#-          %1.25 = Identical                <blt %*%>, %1.24   <@?>
  void                    Branch                   %1.25 -> BB2 (if true) | BB82 (if false)
BB2   <- [1]
  val?^ | miss    %2.0  = LdVar              eR    x, e1.0
  val?            %2.1  = Force!             !v    %2.0, e1.0   <val?_>
  val?^ | miss    %2.2  = LdVar              eR    y, e1.0
  val?            %2.3  = Force!             !v    %2.2, e1.0   <val?_>
  lgl$#-          %2.4  = IsType                   %2.3 isA val?+
  lgl$#-          %2.5  = IsType                   %2.1 isA val?+
  cp              %2.6  = Checkpoint                -> BB4 (default) | BB3 (if assume failed)
BB82   <- [1]
  val?^ | miss    %82.0 = LdVar              eR    x, e1.0
  val?            %82.1 = Force!             !v    %82.0, e1.0   <val?_>
  val?^ | miss    %82.2 = LdVar              eR    y, e1.0
  val?            %82.3 = Force!             !v    %82.2, e1.0   <val?_>
  val?            %82.4 = CallBuiltin        !v    %*%(%82.1, %82.3) e1.0
  goto BB5
BB4   <- [2]
  void                    Assume             D     %2.5, %2.6 (Typecheck@0x55abb3ba9598[Type#17])
  val?+           %4.1  = CastType           d     dn %2.1   <val?_>
  void                    Assume             D     %2.4, %2.6 (Typecheck@0x55abb3ba9598[Type#18])
  val?+           %4.3  = CastType           d     dn %2.3   <val?_>
  val+            %4.4  = CallSafeBuiltin    wed   %*%(%4.1, %4.3) 
  goto BB5
BB3   <- [2]
  fs              %3.0  = FrameState         R     0x55abb4697800+413: [<blt %*%>, %2.1, %2.3], env=e1.0
  void                    Deopt              !v    %3.0   !
BB5   <- [4, 82]
  val?            %5.0  = Phi                      %82.4:BB82, %4.4:BB4   <val?_>
  void                    StVar              lW    res1, %5.0, e1.0
  (cls|spec|blt)  %5.2  = LdFun              !v    matrix, e1.0
  prom-           %5.3  = MkArg                    unboundValue, rir.compile[0x55abb46f0ec0]_p10, e1.0
  prom-           %5.4  = MkArg                    unboundValue, rir.compile[0x55abb46f0ec0]_p11, e1.0
  val?            %5.5  = NamedCall          !v    %5.2(0, nrow=%5.3, ncol=%5.4) e1.0   <val?_>
  void                    StVar              lW    res2, %5.5, e1.0
  val?^ | miss    %5.7  = LdVar              eR    cols, e1.0
  val?            %5.8  = Force!             !v    %5.7, e1.0   <val?_>
  lgl$#-          %5.9  = ColonInputEffects  we    1, %5.8   <@?>
  cp              %5.10 = Checkpoint                -> BB7 (default) | BB6 (if assume failed)
BB7   <- [5]
  void                    Branch                   %5.9 -> BB21 (if true) | BB8 (if false)
BB6   <- [5]
  fs              %6.0  = FrameState         R     0x55abb4697800+540: [1, %5.8, %5.9], env=e1.0
  void                    Deopt              !v    %6.0   !
BB21   <- [7]
  int$#-          %21.0 = ColonCastRhs       e     1L, %5.8   <val?_>
  lgl$#-          %21.1 = Lte                d     1L, %21.0, elided   <@?>
  void                    Branch                   %21.1 -> BB81 (if true) | BB22 (if false)
BB8   <- [7]
  lgl$#-          %8.0  = IsType                   %5.8 isA val?+
  void                    Assume             D     %8.0, %5.10 (Typecheck@0x55abb3ba9598[Type#23])
  val?+           %8.2  = CastType           d     dn %5.8   <val?_>
  (int|real|complex)+ %8.3  = Colon              wed   1L, %8.2, elided
  (cls|spec|blt)  %8.4  = LdFun              !v    for, e1.0
  prom-           %8.5  = MkArg                    %8.3, rir.compile[0x55abb46f0ec0]_p12 (!refl), e1.0
  prom-           %8.6  = MkArg                    unboundValue, rir.compile[0x55abb46f0ec0]_p13, e1.0
  val?            %8.7  = Call               !v    %8.4(%8.5, %8.6) e1.0
  goto BB9
BB81   <- [21]
  goto BB23
BB22   <- [21]
  goto BB23
BB9   <- [25, 8]
  void                    StVar              lW    last, 0, e1.0
  goto BB10
BB23   <- [81, 22]
  int$#-          %23.0 = Phi                      1L:BB81, -1L:BB22
  goto BB24
BB10   <- [20, 9]
  real$-          %10.0 = Phi                      0:BB9, %18.0:BB20   <val?_>
  int$#-          %10.1 = Phi                      1L:BB9, %17.1:BB20
  lgl$#-          %10.2 = Neq                d     11L, %10.1, elided
  void                    Branch                   %10.2 -> BB17 (if true) | BB11 (if false)
BB24   <- [23, 30]
  int$#-          %24.0 = Phi                      1L:BB23, %26.1:BB30
  lgl$#-          %24.1 = Neq                d     %21.0, %24.0, elided
  void                    Branch                   %24.1 -> BB26 (if true) | BB25 (if false)
BB17   <- [10]
  void                    StVar              lW    i, %10.1, e1.0
  int$#-          %17.1 = Add                d     %10.1, 1L, elided
  real$#-         %17.2 = Mul                d     %10.1, 10, elided   <val?_>
  void                    StVar              lW    x2, %17.2, e1.0
  void                    StVar              lW    j, 1L, e1.0
  void                    StVar              lW    y2, 3, e1.0
  real$-          %17.6 = Add                d     %10.0, %17.2, elided   <val?_>
  real$-          %17.7 = Add                d     %17.6, 3, elided   <val?_>
  void                    StVar              lW    last, %17.7, e1.0
  goto BB18
BB11   <- [10]
  void                    Visible            v     
  lgl$-           %11.1 = Eq                 vd    %10.0, 6250, elided   <val?_>
  lgl$-           %11.2 = AsLogical                %11.1
  lgl$#-          %11.3 = Identical                %11.2, false
  void                    Branch                   %11.3 -> BB16 (if true) | BB12 (if false)
BB26   <- [24]
  void                    StVar              lW    c, %24.0, e1.0
  int$#-          %26.1 = Add                d     %24.0, %23.0, elided
  val?^ | miss    %26.2 = LdVar              eR    rows, e1.0
  val?            %26.3 = Force!             !v    %26.2, e1.0   <val?_>
  lgl$#-          %26.4 = ColonInputEffects  we    1, %26.3   <@?>
  cp              %26.5 = Checkpoint                -> BB28 (default) | BB27 (if assume failed)
BB25   <- [24]
  goto BB9
BB18   <- [19, 17]
  real$-          %18.0 = Phi                      %17.7:BB17, %19.5:BB19   <val?_>
  int$-           %18.1 = Phi                      2L:BB17, %19.1:BB19
  lgl$-           %18.2 = Neq                d     11L, %18.1, elided
  lgl$#-          %18.3 = Identical                %18.2, false
  void                    Branch                   %18.3 -> BB20 (if true) | BB19 (if false)
BB16   <- [11]
  goto BB15
BB12   <- [11]
  val?^ | miss    %12.0 = LdVar              eR    res1, e1.0
  val?            %12.1 = Force!             !v    %12.0, e1.0   <val?_>
  val?^ | miss    %12.2 = LdVar              eR    res2, e1.0
  void                    Visible            v     
  val?            %12.4 = Force!             !     %12.2, e1.0   <val?_>
  lgl$#-          %12.5 = IsType                   %12.4 isA val?+
  lgl$#-          %12.6 = IsType                   %12.1 isA val?+
  cp              %12.7 = Checkpoint                -> BB14 (default) | BB13 (if assume failed)
BB28   <- [26]
  void                    Branch                   %26.4 -> BB31 (if true) | BB29 (if false)
BB27   <- [26]
  fs              %27.0 = FrameState         R     0x55abb4697800+686: [%23.0, %21.0, %26.1, 1, %26.3, %26.4], env=e1.0
  void                    Deopt              !v    %27.0   !
BB20   <- [18]
  goto BB10
BB19   <- [18]
  void                    StVar              lW    j, %18.1, e1.0
  int$-           %19.1 = Add                d     %18.1, 1L, elided
  real$-          %19.2 = Add                d     %18.1, 2, elided   <val?_>
  void                    StVar              lW    y2, %19.2, e1.0
  real$-          %19.4 = Add                d     %18.0, %17.2, elided   <val?_>
  real$-          %19.5 = Add                d     %19.4, %19.2, elided   <val?_>
  void                    StVar              lW    last, %19.5, e1.0
  goto BB18
BB15   <- [16, 14]
  lgl$-           %15.0 = Phi                      %14.6:BB14, %11.2:BB16
  void                    Return             l     %15.0
BB14   <- [12]
  void                    Assume             D     %12.6, %12.7 (Typecheck@0x55abb3ba9598[Type#359])
  val?+           %14.1 = CastType           d     dn %12.1   <val?_>
  void                    Assume             D     %12.5, %12.7 (Typecheck@0x55abb3ba9598[Type#360])
  val?+           %14.3 = CastType           d     dn %12.4   <val?_>
  lgl             %14.4 = Eq                 vwed  %14.1, %14.3, elided   <val?_>
  lgl$-           %14.5 = AsLogical          e     %14.4
  lgl$-           %14.6 = LAnd                     %11.2, %14.5
  goto BB15
BB13   <- [12]
  fs              %13.0 = FrameState         R     0x55abb4697800+2203: [%11.2, %12.1, %12.4], env=e1.0
  void                    Deopt              !v    %13.0   !
BB31   <- [28]
  int$#-          %31.0 = ColonCastRhs       e     1L, %26.3   <val?_>
  lgl$#-          %31.1 = Lte                d     1L, %31.0, elided   <@?>
  void                    Branch                   %31.1 -> BB80 (if true) | BB32 (if false)
BB29   <- [28]
  lgl$#-          %29.0 = IsType                   %26.3 isA val?+
  void                    Assume             D     %29.0, %26.5 (Typecheck@0x55abb3ba9598[Type#183])
  val?+           %29.2 = CastType           d     dn %26.3   <val?_>
  (int|real|complex)+ %29.3 = Colon              wed   1L, %29.2, elided
  (cls|spec|blt)  %29.4 = LdFun              !v    for, e1.0
  prom-           %29.5 = MkArg                    %29.3, rir.compile[0x55abb46f0ec0]_p56 (!refl), e1.0
  prom-           %29.6 = MkArg                    unboundValue, rir.compile[0x55abb46f0ec0]_p57, e1.0
  val?            %29.7 = Call               !v    %29.4(%29.5, %29.6) e1.0
  goto BB30
BB80   <- [31]
  goto BB33
BB32   <- [31]
  goto BB33
BB30   <- [35, 29]
  goto BB24
BB33   <- [80, 32]
  int$#-          %33.0 = Phi                      1L:BB80, -1L:BB32
  goto BB34
BB34   <- [33, 40]
  int$#-          %34.0 = Phi                      1L:BB33, %36.1:BB40
  lgl$#-          %34.1 = Neq                d     %31.0, %34.0, elided
  void                    Branch                   %34.1 -> BB36 (if true) | BB35 (if false)
BB36   <- [34]
  void                    StVar              lW    r, %34.0, e1.0
  int$#-          %36.1 = Add                d     %34.0, %33.0, elided
  val?^ | miss    %36.2 = LdVar              eR    inner, e1.0
  val?            %36.3 = Force!             !v    %36.2, e1.0   <val?_>
  lgl$#-          %36.4 = ColonInputEffects  we    1, %36.3   <@?>
  cp              %36.5 = Checkpoint                -> BB38 (default) | BB37 (if assume failed)
BB35   <- [34]
  goto BB30
BB38   <- [36]
  void                    Branch                   %36.4 -> BB41 (if true) | BB39 (if false)
BB37   <- [36]
  fs              %37.0 = FrameState         R     0x55abb4697800+832: [%23.0, %21.0, %26.1, %33.0, %31.0, %36.1, 1, %36.3, %36.4], env=e1.0
  void                    Deopt              !v    %37.0   !
BB41   <- [38]
  int$#-          %41.0 = ColonCastRhs       e     1L, %36.3   <val?_>
  lgl$#-          %41.1 = Lte                d     1L, %41.0, elided   <@?>
  void                    Branch                   %41.1 -> BB79 (if true) | BB42 (if false)
BB39   <- [38]
  lgl$#-          %39.0 = IsType                   %36.3 isA val?+
  void                    Assume             D     %39.0, %36.5 (Typecheck@0x55abb3ba9598[Type#263])
  val?+           %39.2 = CastType           d     dn %36.3   <val?_>
  (int|real|complex)+ %39.3 = Colon              wed   1L, %39.2, elided
  (cls|spec|blt)  %39.4 = LdFun              !v    for, e1.0
  prom-           %39.5 = MkArg                    %39.3, rir.compile[0x55abb46f0ec0]_p78 (!refl), e1.0
  prom-           %39.6 = MkArg                    unboundValue, rir.compile[0x55abb46f0ec0]_p79, e1.0
  val?            %39.7 = Call               !v    %39.4(%39.5, %39.6) e1.0
  goto BB40
BB79   <- [41]
  goto BB43
BB42   <- [41]
  goto BB43
BB40   <- [39, 45]
  goto BB34
BB43   <- [79, 42]
  int$#-          %43.0 = Phi                      1L:BB79, -1L:BB42
  lgl$#-          %43.1 = Neq                d     %41.0, 1L, elided   <@?>
  void                    Branch                   %43.1 -> BB46 (if true) | BB44 (if false)
BB46   <- [43]
  void                    StVar              lW    i, 1L, e1.0
  int$-           %46.1 = Add                d     1L, %43.0, elided
  val?^ | miss    %46.2 = LdVar              eR    res2 !upd, e1.0
  val?            %46.3 = Force!             !v    %46.2, e1.0
  val?^ | miss    %46.4 = LdVar              eR    res2, e1.0
  val?            %46.5 = Force!             !v    %46.4, e1.0   <val?_>
  lgl$#-          %46.6 = IsType                   %46.5 isA val+   <@?>
  void                    Branch                   %46.6 -> BB78 (if true) | BB47 (if false)
BB44   <- [43]
  goto BB45
BB78   <- [46]
  val?^ | miss    %78.0 = LdVar              eR    r, e1.0
  val?            %78.1 = Force!             !v    %78.0, e1.0   <val?_>
  val?^ | miss    %78.2 = LdVar              eR    c, e1.0
  val?            %78.3 = Force!             !v    %78.2, e1.0   <val?_>
  goto BB48
BB47   <- [46]
  prom-           %47.0 = MkArg                    unboundValue, rir.compile[0x55abb46f0ec0]_p96, e1.0
  prom-           %47.1 = MkArg                    unboundValue, rir.compile[0x55abb46f0ec0]_p97, e1.0
  goto BB48
BB45   <- [75, 44]
  goto BB40
BB48   <- [47, 78]
  val?            %48.0 = Phi                      %78.3:BB78, %47.1:BB47
  val?            %48.1 = Phi                      %78.1:BB78, %47.0:BB47
  val?            %48.2 = Extract1_2D        !v    %46.5, %48.1, %48.0, e1.0   <val?_>
  val?^ | miss    %48.3 = LdVar              eR    x, e1.0
  val?            %48.4 = Force!             !v    %48.3, e1.0   <val?_>
  lgl$#-          %48.5 = IsType                   %48.4 isA val+   <@?>
  void                    Branch                   %48.5 -> BB77 (if true) | BB49 (if false)
BB77   <- [48]
  val?^ | miss    %77.0 = LdVar              eR    r, e1.0
  val?            %77.1 = Force!             !v    %77.0, e1.0   <val?_>
  val?^ | miss    %77.2 = LdVar              eR    i, e1.0
  val?            %77.3 = Force!             !v    %77.2, e1.0   <val?_>
  goto BB50
BB49   <- [48]
  prom-           %49.0 = MkArg                    unboundValue, rir.compile[0x55abb46f0ec0]_p94, e1.0
  prom-           %49.1 = MkArg                    unboundValue, rir.compile[0x55abb46f0ec0]_p95, e1.0
  goto BB50
BB50   <- [49, 77]
  val?            %50.0 = Phi                      %77.3:BB77, %49.1:BB49
  val?            %50.1 = Phi                      %77.1:BB77, %49.0:BB49
  val?            %50.2 = Extract1_2D        !v    %48.4, %50.1, %50.0, e1.0   <val?_>
  val?^ | miss    %50.3 = LdVar              eR    y, e1.0
  val?            %50.4 = Force!             !v    %50.3, e1.0   <val?_>
  lgl$#-          %50.5 = IsType                   %50.4 isA val+   <@?>
  void                    Branch                   %50.5 -> BB76 (if true) | BB51 (if false)
BB76   <- [50]
  val?^ | miss    %76.0 = LdVar              eR    i, e1.0
  val?            %76.1 = Force!             !v    %76.0, e1.0   <val?_>
  val?^ | miss    %76.2 = LdVar              eR    c, e1.0
  val?            %76.3 = Force!             !v    %76.2, e1.0   <val?_>
  goto BB52
BB51   <- [50]
  prom-           %51.0 = MkArg                    unboundValue, rir.compile[0x55abb46f0ec0]_p92, e1.0
  prom-           %51.1 = MkArg                    unboundValue, rir.compile[0x55abb46f0ec0]_p93, e1.0
  goto BB52
BB52   <- [51, 76]
  val?            %52.0 = Phi                      %76.3:BB76, %51.1:BB51
  val?            %52.1 = Phi                      %76.1:BB76, %51.0:BB51
  val?            %52.2 = Extract1_2D        !v    %50.4, %52.1, %52.0, e1.0   <val?_>
  lgl$#-          %52.3 = IsType                   %52.2 isA val?+
  cp              %52.4 = Checkpoint                -> BB54 (default) | BB53 (if assume failed)
BB54   <- [52]
  lgl$#-          %54.0 = IsType                   %50.2 isA val?+
  void                    Assume             D     %54.0, %52.4 (Typecheck@0x55abb3ba9598[Type#302])
  val?+           %54.2 = CastType           d     dn %50.2   <val?_>
  void                    Assume             D     %52.3, %52.4 (Typecheck@0x55abb3ba9598[Type#308])
  val?+           %54.4 = CastType           d     dn %52.2   <val?_>
  (int|real|complex)+ %54.5 = Mul                wed   %54.2, %54.4, elided   <val?_>
  cp              %54.6 = Checkpoint                -> BB56 (default) | BB55 (if assume failed)
BB53   <- [52]
  fs              %53.0 = FrameState         R     0x55abb4697800+1220: [%23.0, %21.0, %26.1, %33.0, %31.0, %36.1, %43.0, %41.0, %46.1, %48.2, %50.2, %52.2], env=e1.0
  void                    Deopt              !v    %53.0   !
BB56   <- [54]
  lgl$#-          %56.0 = IsType                   %48.2 isA val?+
  void                    Assume             D     %56.0, %54.6 (Typecheck@0x55abb3ba9598[Type#296])
  val?+           %56.2 = CastType           d     dn %48.2   <val?_>
  (int|real|complex)+ %56.3 = Add                wed   %56.2, %54.5, elided   <val?_>
  val?^ | miss    %56.4 = LdVar              eR    res2 !upd, e1.0
  val?            %56.5 = Force!             !v    %56.4, e1.0   <val?_>
  val?^ | miss    %56.6 = LdVar              eR    r, e1.0
  val?            %56.7 = Force!             !v    %56.6, e1.0   <val?_>
  val?^ | miss    %56.8 = LdVar              eR    c, e1.0
  val?            %56.9 = Force!             !v    %56.8, e1.0   <val?_>
  lgl$#-          %56.10 = IsType                   %56.9 isA val?+
  lgl$#-          %56.11 = IsType                   %56.5 isA val?+
  lgl$#-          %56.12 = IsType                   %56.7 isA val?+
  cp              %56.13 = Checkpoint                -> BB58 (default) | BB57 (if assume failed)
BB55   <- [54]
  fs              %55.0 = FrameState         R     0x55abb4697800+1227: [%23.0, %21.0, %26.1, %33.0, %31.0, %36.1, %43.0, %41.0, %46.1, %48.2, %54.5], env=e1.0
  void                    Deopt              !v    %55.0   !
BB58   <- [56]
  void                    Assume             D     %56.11, %56.13 (Typecheck@0x55abb3ba9598[Type#311])
  val?+           %58.1 = CastType           d     dn %56.5   <val?_>
  void                    Assume             D     %56.12, %56.13 (Typecheck@0x55abb3ba9598[Type#312])
  val?+           %58.3 = CastType           d     dn %56.7   <val?_>
  void                    Assume             D     %56.10, %56.13 (Typecheck@0x55abb3ba9598[Type#313])
  val?+           %58.5 = CastType           d     dn %56.9   <val?_>
  val?+           %58.6 = Subassign1_2D      wed   %56.3, %58.1, %58.3, %58.5, elided
  void                    StVar              lW    res2, %58.6, e1.0
  goto BB59
BB57   <- [56]
  fs              %57.0 = FrameState         R     0x55abb4697800+1275: [%23.0, %21.0, %26.1, %33.0, %31.0, %36.1, %43.0, %41.0, %46.1, %56.3, %56.5, %56.7, %56.9], env=e1.0
  void                    Deopt              !v    %57.0   !
BB59   <- [58, 72]
  val?+           %59.0 = Phi                      %58.6:BB58, %72.6:BB72
  int$-           %59.1 = Phi                      %46.1:BB58, %60.1:BB72
  lgl$-           %59.2 = Neq                d     %41.0, %59.1, elided
  lgl$#-          %59.3 = Identical                %59.2, false
  void                    Branch                   %59.3 -> BB75 (if true) | BB60 (if false)
BB75   <- [59]
  goto BB45
BB60   <- [59]
  void                    StVar              lW    i, %59.1, e1.0
  int$-           %60.1 = Add                d     %59.1, %43.0, elided
  val+            %60.2 = ChkMissing         e     %59.0   <val?_>
  val?^ | miss    %60.3 = LdVar              eR    r, e1.0
  val?            %60.4 = Force!             !v    %60.3, e1.0   <val?_>
  val?^ | miss    %60.5 = LdVar              eR    c, e1.0
  val?            %60.6 = Force!             !v    %60.5, e1.0   <val?_>
  lgl$#-          %60.7 = IsType                   %60.6 isA val?+
  lgl$#-          %60.8 = IsType                   %60.4 isA val?+
  cp              %60.9 = Checkpoint                -> BB62 (default) | BB61 (if assume failed)
BB62   <- [60]
  void                    Assume             D     %60.8, %60.9 (Typecheck@0x55abb3ba9598[Type#317])
  val?+           %62.1 = CastType           d     dn %60.4   <val?_>
  void                    Assume             D     %60.7, %60.9 (Typecheck@0x55abb3ba9598[Type#318])
  val?+           %62.3 = CastType           d     dn %60.6   <val?_>
  val?            %62.4 = Extract1_2D        wed   %60.2, %62.1, %62.3, elided   <val?_>
  val?^ | miss    %62.5 = LdVar              eR    x, e1.0
  val?            %62.6 = Force!             !v    %62.5, e1.0   <val?_>
  lgl$#-          %62.7 = IsType                   %62.6 isA val+   <@?>
  void                    Branch                   %62.7 -> BB74 (if true) | BB63 (if false)
BB61   <- [60]
  fs              %61.0 = FrameState         R     0x55abb4697800+1398: [%23.0, %21.0, %26.1, %33.0, %31.0, %36.1, %43.0, %41.0, %60.1, %60.2, %60.4, %60.6], env=e1.0
  void                    Deopt              !v    %61.0   !
BB74   <- [62]
  val?^ | miss    %74.0 = LdVar              eR    r, e1.0
  val?            %74.1 = Force!             !v    %74.0, e1.0   <val?_>
  val?^ | miss    %74.2 = LdVar              eR    i, e1.0
  val?            %74.3 = Force!             !v    %74.2, e1.0   <val?_>
  goto BB64
BB63   <- [62]
  prom-           %63.0 = MkArg                    unboundValue, rir.compile[0x55abb46f0ec0]_p88, e1.0
  prom-           %63.1 = MkArg                    unboundValue, rir.compile[0x55abb46f0ec0]_p89, e1.0
  goto BB64
BB64   <- [63, 74]
  val?            %64.0 = Phi                      %74.3:BB74, %63.1:BB63
  val?            %64.1 = Phi                      %74.1:BB74, %63.0:BB63
  val?            %64.2 = Extract1_2D        !v    %62.6, %64.1, %64.0, e1.0   <val?_>
  val?^ | miss    %64.3 = LdVar              eR    y, e1.0
  val?            %64.4 = Force!             !v    %64.3, e1.0   <val?_>
  lgl$#-          %64.5 = IsType                   %64.4 isA val+   <@?>
  void                    Branch                   %64.5 -> BB73 (if true) | BB65 (if false)
BB73   <- [64]
  val?^ | miss    %73.0 = LdVar              eR    i, e1.0
  val?            %73.1 = Force!             !v    %73.0, e1.0   <val?_>
  val?^ | miss    %73.2 = LdVar              eR    c, e1.0
  val?            %73.3 = Force!             !v    %73.2, e1.0   <val?_>
  goto BB66
BB65   <- [64]
  prom-           %65.0 = MkArg                    unboundValue, rir.compile[0x55abb46f0ec0]_p86, e1.0
  prom-           %65.1 = MkArg                    unboundValue, rir.compile[0x55abb46f0ec0]_p87, e1.0
  goto BB66
BB66   <- [65, 73]
  val?            %66.0 = Phi                      %73.3:BB73, %65.1:BB65
  val?            %66.1 = Phi                      %73.1:BB73, %65.0:BB65
  val?            %66.2 = Extract1_2D        !v    %64.4, %66.1, %66.0, e1.0   <val?_>
  lgl$#-          %66.3 = IsType                   %66.2 isA val?+
  cp              %66.4 = Checkpoint                -> BB68 (default) | BB67 (if assume failed)
BB68   <- [66]
  lgl$#-          %68.0 = IsType                   %64.2 isA val?+
  void                    Assume             D     %68.0, %66.4 (Typecheck@0x55abb3ba9598[Type#325])
  val?+           %68.2 = CastType           d     dn %64.2   <val?_>
  void                    Assume             D     %66.3, %66.4 (Typecheck@0x55abb3ba9598[Type#331])
  val?+           %68.4 = CastType           d     dn %66.2   <val?_>
  (int|real|complex)+ %68.5 = Mul                wed   %68.2, %68.4, elided   <val?_>
  cp              %68.6 = Checkpoint                -> BB70 (default) | BB69 (if assume failed)
BB67   <- [66]
  fs              %67.0 = FrameState         R     0x55abb4697800+1574: [%23.0, %21.0, %26.1, %33.0, %31.0, %36.1, %43.0, %41.0, %60.1, %62.4, %64.2, %66.2], env=e1.0
  void                    Deopt              !v    %67.0   !
BB70   <- [68]
  lgl$#-          %70.0 = IsType                   %62.4 isA val?+
  void                    Assume             D     %70.0, %68.6 (Typecheck@0x55abb3ba9598[Type#319])
  val?+           %70.2 = CastType           d     dn %62.4   <val?_>
  (int|real|complex)+ %70.3 = Add                wed   %70.2, %68.5, elided   <val?_>
  val?^ | miss    %70.4 = LdVar              eR    res2 !upd, e1.0
  val?            %70.5 = Force!             !v    %70.4, e1.0   <val?_>
  val?^ | miss    %70.6 = LdVar              eR    r, e1.0
  val?            %70.7 = Force!             !v    %70.6, e1.0   <val?_>
  val?^ | miss    %70.8 = LdVar              eR    c, e1.0
  val?            %70.9 = Force!             !v    %70.8, e1.0   <val?_>
  lgl$#-          %70.10 = IsType                   %70.9 isA val?+
  lgl$#-          %70.11 = IsType                   %70.5 isA val?+
  lgl$#-          %70.12 = IsType                   %70.7 isA val?+
  cp              %70.13 = Checkpoint                -> BB72 (default) | BB71 (if assume failed)
BB69   <- [68]
  fs              %69.0 = FrameState         R     0x55abb4697800+1581: [%23.0, %21.0, %26.1, %33.0, %31.0, %36.1, %43.0, %41.0, %60.1, %62.4, %68.5], env=e1.0
  void                    Deopt              !v    %69.0   !
BB72   <- [70]
  void                    Assume             D     %70.11, %70.13 (Typecheck@0x55abb3ba9598[Type#334])
  val?+           %72.1 = CastType           d     dn %70.5   <val?_>
  void                    Assume             D     %70.12, %70.13 (Typecheck@0x55abb3ba9598[Type#335])
  val?+           %72.3 = CastType           d     dn %70.7   <val?_>
  void                    Assume             D     %70.10, %70.13 (Typecheck@0x55abb3ba9598[Type#336])
  val?+           %72.5 = CastType           d     dn %70.9   <val?_>
  val?+           %72.6 = Subassign1_2D      wed   %70.3, %72.1, %72.3, %72.5, elided
  void                    StVar              lW    res2, %72.6, e1.0
  goto BB59
BB71   <- [70]
  fs              %71.0 = FrameState         R     0x55abb4697800+1629: [%23.0, %21.0, %26.1, %33.0, %31.0, %36.1, %43.0, %41.0, %60.1, %70.3, %70.5, %70.7, %70.9], env=e1.0
  void                    Deopt              !v    %71.0   !
Prom 0:
BB0
  goto BB1
BB1   <- [0]
  int-            %1.0  = Colon              vd    1L, 6L, elided   <val?_>
  void                    Return             l     %1.0
Prom 1:
BB0
  goto BB1
BB1   <- [0]
  int-            %1.0  = Colon              vd    1L, 12L, elided   <val?_>
  void                    Return             l     %1.0
Prom 2:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     ncol, e1.0
  prom-           %1.2  = MkArg                    unboundValue, rir.compile[0x55abb46f0ec0]_p3, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <val?_>
  (cls|spec|blt)  %1.4  = LdFun              !     nrow, e1.0
  prom-           %1.5  = MkArg                    unboundValue, rir.compile[0x55abb46f0ec0]_p4, e1.0
  val?            %1.6  = Call               !     %1.4(%1.5) e1.0   <val?_>
  val?            %1.7  = Eq                 !     %1.3, %1.6, e1.0   <val?_>
  void                    Return             l     %1.7
Prom 3:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    x, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 4:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    y, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 5:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    x, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 6:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    y, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 7:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    x, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 10:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    rows, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 11:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    cols, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 12:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    cols, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  val?            %1.4  = Colon              !     1L, %1.3, e1.0   <val?_>
  void                    Return             l     %1.4
Prom 13:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    rows, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  lgl$#-          %1.4  = ColonInputEffects  we    1, %1.3   <@?>
  void                    Branch                   %1.4 -> BB2 (if true) | BB40 (if false)
BB2   <- [1]
  int$#-          %2.0  = ColonCastRhs       e     1L, %1.3   <val?_>
  lgl$#-          %2.1  = Lte                d     1L, %2.0, elided   <@?>
  void                    Branch                   %2.1 -> BB39 (if true) | BB3 (if false)
BB40   <- [1]
  val?            %40.0 = Colon              !     1L, %1.3, e1.0
  (cls|spec|blt)  %40.1 = LdFun              !     for, e1.0
  prom-           %40.2 = MkArg                    %40.0, rir.compile[0x55abb46f0ec0]_p14 (!refl), e1.0
  prom-           %40.3 = MkArg                    unboundValue, rir.compile[0x55abb46f0ec0]_p15, e1.0
  val?            %40.4 = Call               !     %40.1(%40.2, %40.3) e1.0   <val?_>
  goto BB7
BB39   <- [2]
  goto BB4
BB3   <- [2]
  goto BB4
BB7   <- [6, 40]
  val?            %7.0  = Phi                      %40.4:BB40, nil:BB6
  void                    Return             l     %7.0
BB4   <- [39, 3]
  int$#-          %4.0  = Phi                      1L:BB39, -1L:BB3
  goto BB5
BB5   <- [4, 10]
  int$#-          %5.0  = Phi                      1L:BB4, %8.1:BB10
  lgl$#-          %5.1  = Neq                d     %2.0, %5.0, elided
  void                    Branch                   %5.1 -> BB8 (if true) | BB6 (if false)
BB8   <- [5]
  void                    StVar              lW    r, %5.0, e1.0
  int$#-          %8.1  = Add                d     %5.0, %4.0, elided
  val?^ | miss    %8.2  = LdVar              eR    inner, e1.0
  val?            %8.3  = Force              !v    %8.2, e1.0   <val?_>
  lgl$#-          %8.4  = ColonInputEffects  we    1, %8.3   <@?>
  void                    Branch                   %8.4 -> BB11 (if true) | BB9 (if false)
BB6   <- [5]
  void                    Invisible          v     
  goto BB7
BB11   <- [8]
  int$#-          %11.0 = ColonCastRhs       e     1L, %8.3   <val?_>
  lgl$#-          %11.1 = Lte                d     1L, %11.0, elided   <@?>
  void                    Branch                   %11.1 -> BB38 (if true) | BB12 (if false)
BB9   <- [8]
  val?            %9.0  = Colon              !v    1L, %8.3, e1.0
  (cls|spec|blt)  %9.1  = LdFun              !v    for, e1.0
  prom-           %9.2  = MkArg                    %9.0, rir.compile[0x55abb46f0ec0]_p36 (!refl), e1.0
  prom-           %9.3  = MkArg                    unboundValue, rir.compile[0x55abb46f0ec0]_p37, e1.0
  val?            %9.4  = Call               !v    %9.1(%9.2, %9.3) e1.0
  goto BB10
BB38   <- [11]
  goto BB13
BB12   <- [11]
  goto BB13
BB10   <- [9, 15]
  goto BB5
BB13   <- [38, 12]
  int$#-          %13.0 = Phi                      1L:BB38, -1L:BB12
  lgl$#-          %13.1 = Neq                d     %11.0, 1L, elided   <@?>
  void                    Branch                   %13.1 -> BB16 (if true) | BB14 (if false)
BB16   <- [13]
  void                    StVar              lW    i, 1L, e1.0
  int$-           %16.1 = Add                d     1L, %13.0, elided
  val?^ | miss    %16.2 = LdVar              eR    res2 !upd, e1.0
  val?            %16.3 = Force              !v    %16.2, e1.0
  val?^ | miss    %16.4 = LdVar              eR    res2, e1.0
  val?            %16.5 = Force              !v    %16.4, e1.0   <val?_>
  lgl$#-          %16.6 = IsType                   %16.5 isA val+   <@?>
  void                    Branch                   %16.6 -> BB37 (if true) | BB17 (if false)
BB14   <- [13]
  goto BB15
BB37   <- [16]
  val?^ | miss    %37.0 = LdVar              eR    r, e1.0
  val?            %37.1 = Force              !v    %37.0, e1.0   <val?_>
  val?^ | miss    %37.2 = LdVar              eR    c, e1.0
  val?            %37.3 = Force              !v    %37.2, e1.0   <val?_>
  goto BB18
BB17   <- [16]
  prom-           %17.0 = MkArg                    unboundValue, rir.compile[0x55abb46f0ec0]_p54, e1.0
  prom-           %17.1 = MkArg                    unboundValue, rir.compile[0x55abb46f0ec0]_p55, e1.0
  goto BB18
BB15   <- [34, 14]
  goto BB10
BB18   <- [17, 37]
  val?            %18.0 = Phi                      %37.3:BB37, %17.1:BB17
  val?            %18.1 = Phi                      %37.1:BB37, %17.0:BB17
  val?            %18.2 = Extract1_2D        !v    %16.5, %18.1, %18.0, e1.0   <val?_>
  val?^ | miss    %18.3 = LdVar              eR    x, e1.0
  val?            %18.4 = Force              !v    %18.3, e1.0   <val?_>
  lgl$#-          %18.5 = IsType                   %18.4 isA val+   <@?>
  void                    Branch                   %18.5 -> BB36 (if true) | BB19 (if false)
BB36   <- [18]
  val?^ | miss    %36.0 = LdVar              eR    r, e1.0
  val?            %36.1 = Force              !v    %36.0, e1.0   <val?_>
  val?^ | miss    %36.2 = LdVar              eR    i, e1.0
  val?            %36.3 = Force              !v    %36.2, e1.0   <val?_>
  goto BB20
BB19   <- [18]
  prom-           %19.0 = MkArg                    unboundValue, rir.compile[0x55abb46f0ec0]_p52, e1.0
  prom-           %19.1 = MkArg                    unboundValue, rir.compile[0x55abb46f0ec0]_p53, e1.0
  goto BB20
BB20   <- [19, 36]
  val?            %20.0 = Phi                      %36.3:BB36, %19.1:BB19
  val?            %20.1 = Phi                      %36.1:BB36, %19.0:BB19
  val?            %20.2 = Extract1_2D        !v    %18.4, %20.1, %20.0, e1.0   <val?_>
  val?^ | miss    %20.3 = LdVar              eR    y, e1.0
  val?            %20.4 = Force              !v    %20.3, e1.0   <val?_>
  lgl$#-          %20.5 = IsType                   %20.4 isA val+   <@?>
  void                    Branch                   %20.5 -> BB35 (if true) | BB21 (if false)
BB35   <- [20]
  val?^ | miss    %35.0 = LdVar              eR    i, e1.0
  val?            %35.1 = Force              !v    %35.0, e1.0   <val?_>
  val?^ | miss    %35.2 = LdVar              eR    c, e1.0
  val?            %35.3 = Force              !v    %35.2, e1.0   <val?_>
  goto BB22
BB21   <- [20]
  prom-           %21.0 = MkArg                    unboundValue, rir.compile[0x55abb46f0ec0]_p50, e1.0
  prom-           %21.1 = MkArg                    unboundValue, rir.compile[0x55abb46f0ec0]_p51, e1.0
  goto BB22
BB22   <- [21, 35]
  val?            %22.0 = Phi                      %35.3:BB35, %21.1:BB21
  val?            %22.1 = Phi                      %35.1:BB35, %21.0:BB21
  val?            %22.2 = Extract1_2D        !v    %20.4, %22.1, %22.0, e1.0   <val?_>
  val?            %22.3 = Mul                !v    %20.2, %22.2, e1.0   <val?_>
  val?            %22.4 = Add                !v    %18.2, %22.3, e1.0   <val?_>
  val?^ | miss    %22.5 = LdVar              eR    res2 !upd, e1.0
  val?            %22.6 = Force              !v    %22.5, e1.0   <val?_>
  val?^ | miss    %22.7 = LdVar              eR    r, e1.0
  val?            %22.8 = Force              !v    %22.7, e1.0   <val?_>
  val?^ | miss    %22.9 = LdVar              eR    c, e1.0
  val?            %22.10 = Force              !v    %22.9, e1.0   <val?_>
  val?            %22.11 = Subassign1_2D      !v    %22.4, %22.6, %22.8, %22.10, e1.0
  void                    StVar              lW    res2, %22.11, e1.0
  goto BB23
BB23   <- [22, 30]
  int$-           %23.0 = Phi                      %16.1:BB22, %24.1:BB30
  lgl$-           %23.1 = Neq                d     %11.0, %23.0, elided
  lgl$#-          %23.2 = Identical                %23.1, false
  void                    Branch                   %23.2 -> BB34 (if true) | BB24 (if false)
BB34   <- [23]
  goto BB15
BB24   <- [23]
  void                    StVar              lW    i, %23.0, e1.0
  int$-           %24.1 = Add                d     %23.0, %13.0, elided
  val?^ | miss    %24.2 = LdVar              eR    res2 !upd, e1.0
  val?            %24.3 = Force              !v    %24.2, e1.0
  val?^ | miss    %24.4 = LdVar              eR    res2, e1.0
  val?            %24.5 = Force              !v    %24.4, e1.0   <val?_>
  lgl$#-          %24.6 = IsType                   %24.5 isA val+   <@?>
  void                    Branch                   %24.6 -> BB33 (if true) | BB25 (if false)
BB33   <- [24]
  val?^ | miss    %33.0 = LdVar              eR    r, e1.0
  val?            %33.1 = Force              !v    %33.0, e1.0   <val?_>
  val?^ | miss    %33.2 = LdVar              eR    c, e1.0
  val?            %33.3 = Force              !v    %33.2, e1.0   <val?_>
  goto BB26
BB25   <- [24]
  prom-           %25.0 = MkArg                    unboundValue, rir.compile[0x55abb46f0ec0]_p48, e1.0
  prom-           %25.1 = MkArg                    unboundValue, rir.compile[0x55abb46f0ec0]_p49, e1.0
  goto BB26
BB26   <- [25, 33]
  val?            %26.0 = Phi                      %33.3:BB33, %25.1:BB25
  val?            %26.1 = Phi                      %33.1:BB33, %25.0:BB25
  val?            %26.2 = Extract1_2D        !v    %24.5, %26.1, %26.0, e1.0   <val?_>
  val?^ | miss    %26.3 = LdVar              eR    x, e1.0
  val?            %26.4 = Force              !v    %26.3, e1.0   <val?_>
  lgl$#-          %26.5 = IsType                   %26.4 isA val+   <@?>
  void                    Branch                   %26.5 -> BB32 (if true) | BB27 (if false)
BB32   <- [26]
  val?^ | miss    %32.0 = LdVar              eR    r, e1.0
  val?            %32.1 = Force              !v    %32.0, e1.0   <val?_>
  val?^ | miss    %32.2 = LdVar              eR    i, e1.0
  val?            %32.3 = Force              !v    %32.2, e1.0   <val?_>
  goto BB28
BB27   <- [26]
  prom-           %27.0 = MkArg                    unboundValue, rir.compile[0x55abb46f0ec0]_p46, e1.0
  prom-           %27.1 = MkArg                    unboundValue, rir.compile[0x55abb46f0ec0]_p47, e1.0
  goto BB28
BB28   <- [27, 32]
  val?            %28.0 = Phi                      %32.3:BB32, %27.1:BB27
  val?            %28.1 = Phi                      %32.1:BB32, %27.0:BB27
  val?            %28.2 = Extract1_2D        !v    %26.4, %28.1, %28.0, e1.0   <val?_>
  val?^ | miss    %28.3 = LdVar              eR    y, e1.0
  val?            %28.4 = Force              !v    %28.3, e1.0   <val?_>
  lgl$#-          %28.5 = IsType                   %28.4 isA val+   <@?>
  void                    Branch                   %28.5 -> BB31 (if true) | BB29 (if false)
BB31   <- [28]
  val?^ | miss    %31.0 = LdVar              eR    i, e1.0
  val?            %31.1 = Force              !v    %31.0, e1.0   <val?_>
  val?^ | miss    %31.2 = LdVar              eR    c, e1.0
  val?            %31.3 = Force              !v    %31.2, e1.0   <val?_>
  goto BB30
BB29   <- [28]
  prom-           %29.0 = MkArg                    unboundValue, rir.compile[0x55abb46f0ec0]_p44, e1.0
  prom-           %29.1 = MkArg                    unboundValue, rir.compile[0x55abb46f0ec0]_p45, e1.0
  goto BB30
BB30   <- [29, 31]
  val?            %30.0 = Phi                      %31.3:BB31, %29.1:BB29
  val?            %30.1 = Phi                      %31.1:BB31, %29.0:BB29
  val?            %30.2 = Extract1_2D        !v    %28.4, %30.1, %30.0, e1.0   <val?_>
  val?            %30.3 = Mul                !v    %28.2, %30.2, e1.0   <val?_>
  val?            %30.4 = Add                !v    %26.2, %30.3, e1.0   <val?_>
  val?^ | miss    %30.5 = LdVar              eR    res2 !upd, e1.0
  val?            %30.6 = Force              !v    %30.5, e1.0   <val?_>
  val?^ | miss    %30.7 = LdVar              eR    r, e1.0
  val?            %30.8 = Force              !v    %30.7, e1.0   <val?_>
  val?^ | miss    %30.9 = LdVar              eR    c, e1.0
  val?            %30.10 = Force              !v    %30.9, e1.0   <val?_>
  val?            %30.11 = Subassign1_2D      !v    %30.4, %30.6, %30.8, %30.10, e1.0
  void                    StVar              lW    res2, %30.11, e1.0
  goto BB23
Prom 14:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    rows, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  val?            %1.4  = Colon              !     1L, %1.3, e1.0   <val?_>
  void                    Return             l     %1.4
Prom 15:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    inner, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  lgl$#-          %1.4  = ColonInputEffects  we    1, %1.3   <@?>
  void                    Branch                   %1.4 -> BB2 (if true) | BB31 (if false)
BB2   <- [1]
  int$#-          %2.0  = ColonCastRhs       e     1L, %1.3   <val?_>
  lgl$#-          %2.1  = Lte                d     1L, %2.0, elided   <@?>
  void                    Branch                   %2.1 -> BB30 (if true) | BB3 (if false)
BB31   <- [1]
  val?            %31.0 = Colon              !     1L, %1.3, e1.0
  (cls|spec|blt)  %31.1 = LdFun              !     for, e1.0
  prom-           %31.2 = MkArg                    %31.0, rir.compile[0x55abb46f0ec0]_p16 (!refl), e1.0
  prom-           %31.3 = MkArg                    unboundValue, rir.compile[0x55abb46f0ec0]_p17, e1.0
  val?            %31.4 = Call               !     %31.1(%31.2, %31.3) e1.0   <val?_>
  goto BB7
BB30   <- [2]
  goto BB4
BB3   <- [2]
  goto BB4
BB7   <- [31, 6]
  val?            %7.0  = Phi                      %31.4:BB31, nil:BB6
  void                    Return             l     %7.0
BB4   <- [30, 3]
  int$#-          %4.0  = Phi                      1L:BB30, -1L:BB3
  lgl$#-          %4.1  = Neq                d     %2.0, 1L, elided   <@?>
  void                    Branch                   %4.1 -> BB8 (if true) | BB5 (if false)
BB8   <- [4]
  void                    StVar              lW    i, 1L, e1.0
  int$-           %8.1  = Add                d     1L, %4.0, elided
  val?^ | miss    %8.2  = LdVar              eR    res2 !upd, e1.0
  val?            %8.3  = Force              !v    %8.2, e1.0
  val?^ | miss    %8.4  = LdVar              eR    res2, e1.0
  val?            %8.5  = Force              !v    %8.4, e1.0   <val?_>
  lgl$#-          %8.6  = IsType                   %8.5 isA val+   <@?>
  void                    Branch                   %8.6 -> BB29 (if true) | BB9 (if false)
BB5   <- [4]
  goto BB6
BB29   <- [8]
  val?^ | miss    %29.0 = LdVar              eR    r, e1.0
  val?            %29.1 = Force              !v    %29.0, e1.0   <val?_>
  val?^ | miss    %29.2 = LdVar              eR    c, e1.0
  val?            %29.3 = Force              !v    %29.2, e1.0   <val?_>
  goto BB10
BB9   <- [8]
  prom-           %9.0  = MkArg                    unboundValue, rir.compile[0x55abb46f0ec0]_p34, e1.0
  prom-           %9.1  = MkArg                    unboundValue, rir.compile[0x55abb46f0ec0]_p35, e1.0
  goto BB10
BB6   <- [26, 5]
  void                    Invisible          v     
  goto BB7
BB10   <- [9, 29]
  val?            %10.0 = Phi                      %29.3:BB29, %9.1:BB9
  val?            %10.1 = Phi                      %29.1:BB29, %9.0:BB9
  val?            %10.2 = Extract1_2D        !v    %8.5, %10.1, %10.0, e1.0   <val?_>
  val?^ | miss    %10.3 = LdVar              eR    x, e1.0
  val?            %10.4 = Force              !v    %10.3, e1.0   <val?_>
  lgl$#-          %10.5 = IsType                   %10.4 isA val+   <@?>
  void                    Branch                   %10.5 -> BB28 (if true) | BB11 (if false)
BB28   <- [10]
  val?^ | miss    %28.0 = LdVar              eR    r, e1.0
  val?            %28.1 = Force              !v    %28.0, e1.0   <val?_>
  val?^ | miss    %28.2 = LdVar              eR    i, e1.0
  val?            %28.3 = Force              !v    %28.2, e1.0   <val?_>
  goto BB12
BB11   <- [10]
  prom-           %11.0 = MkArg                    unboundValue, rir.compile[0x55abb46f0ec0]_p32, e1.0
  prom-           %11.1 = MkArg                    unboundValue, rir.compile[0x55abb46f0ec0]_p33, e1.0
  goto BB12
BB12   <- [11, 28]
  val?            %12.0 = Phi                      %28.3:BB28, %11.1:BB11
  val?            %12.1 = Phi                      %28.1:BB28, %11.0:BB11
  val?            %12.2 = Extract1_2D        !v    %10.4, %12.1, %12.0, e1.0   <val?_>
  val?^ | miss    %12.3 = LdVar              eR    y, e1.0
  val?            %12.4 = Force              !v    %12.3, e1.0   <val?_>
  lgl$#-          %12.5 = IsType                   %12.4 isA val+   <@?>
  void                    Branch                   %12.5 -> BB27 (if true) | BB13 (if false)
BB27   <- [12]
  val?^ | miss    %27.0 = LdVar              eR    i, e1.0
  val?            %27.1 = Force              !v    %27.0, e1.0   <val?_>
  val?^ | miss    %27.2 = LdVar              eR    c, e1.0
  val?            %27.3 = Force              !v    %27.2, e1.0   <val?_>
  goto BB14
BB13   <- [12]
  prom-           %13.0 = MkArg                    unboundValue, rir.compile[0x55abb46f0ec0]_p30, e1.0
  prom-           %13.1 = MkArg                    unboundValue, rir.compile[0x55abb46f0ec0]_p31, e1.0
  goto BB14
BB14   <- [13, 27]
  val?            %14.0 = Phi                      %27.3:BB27, %13.1:BB13
  val?            %14.1 = Phi                      %27.1:BB27, %13.0:BB13
  val?            %14.2 = Extract1_2D        !v    %12.4, %14.1, %14.0, e1.0   <val?_>
  val?            %14.3 = Mul                !v    %12.2, %14.2, e1.0   <val?_>
  val?            %14.4 = Add                !v    %10.2, %14.3, e1.0   <val?_>
  val?^ | miss    %14.5 = LdVar              eR    res2 !upd, e1.0
  val?            %14.6 = Force              !v    %14.5, e1.0   <val?_>
  val?^ | miss    %14.7 = LdVar              eR    r, e1.0
  val?            %14.8 = Force              !v    %14.7, e1.0   <val?_>
  val?^ | miss    %14.9 = LdVar              eR    c, e1.0
  val?            %14.10 = Force              !v    %14.9, e1.0   <val?_>
  val?            %14.11 = Subassign1_2D      !v    %14.4, %14.6, %14.8, %14.10, e1.0
  void                    StVar              lW    res2, %14.11, e1.0
  goto BB15
BB15   <- [14, 22]
  int$-           %15.0 = Phi                      %8.1:BB14, %16.1:BB22
  lgl$-           %15.1 = Neq                d     %2.0, %15.0, elided
  lgl$#-          %15.2 = Identical                %15.1, false
  void                    Branch                   %15.2 -> BB26 (if true) | BB16 (if false)
BB26   <- [15]
  goto BB6
BB16   <- [15]
  void                    StVar              lW    i, %15.0, e1.0
  int$-           %16.1 = Add                d     %15.0, %4.0, elided
  val?^ | miss    %16.2 = LdVar              eR    res2 !upd, e1.0
  val?            %16.3 = Force              !v    %16.2, e1.0
  val?^ | miss    %16.4 = LdVar              eR    res2, e1.0
  val?            %16.5 = Force              !v    %16.4, e1.0   <val?_>
  lgl$#-          %16.6 = IsType                   %16.5 isA val+   <@?>
  void                    Branch                   %16.6 -> BB25 (if true) | BB17 (if false)
BB25   <- [16]
  val?^ | miss    %25.0 = LdVar              eR    r, e1.0
  val?            %25.1 = Force              !v    %25.0, e1.0   <val?_>
  val?^ | miss    %25.2 = LdVar              eR    c, e1.0
  val?            %25.3 = Force              !v    %25.2, e1.0   <val?_>
  goto BB18
BB17   <- [16]
  prom-           %17.0 = MkArg                    unboundValue, rir.compile[0x55abb46f0ec0]_p28, e1.0
  prom-           %17.1 = MkArg                    unboundValue, rir.compile[0x55abb46f0ec0]_p29, e1.0
  goto BB18
BB18   <- [17, 25]
  val?            %18.0 = Phi                      %25.3:BB25, %17.1:BB17
  val?            %18.1 = Phi                      %25.1:BB25, %17.0:BB17
  val?            %18.2 = Extract1_2D        !v    %16.5, %18.1, %18.0, e1.0   <val?_>
  val?^ | miss    %18.3 = LdVar              eR    x, e1.0
  val?            %18.4 = Force              !v    %18.3, e1.0   <val?_>
  lgl$#-          %18.5 = IsType                   %18.4 isA val+   <@?>
  void                    Branch                   %18.5 -> BB24 (if true) | BB19 (if false)
BB24   <- [18]
  val?^ | miss    %24.0 = LdVar              eR    r, e1.0
  val?            %24.1 = Force              !v    %24.0, e1.0   <val?_>
  val?^ | miss    %24.2 = LdVar              eR    i, e1.0
  val?            %24.3 = Force              !v    %24.2, e1.0   <val?_>
  goto BB20
BB19   <- [18]
  prom-           %19.0 = MkArg                    unboundValue, rir.compile[0x55abb46f0ec0]_p26, e1.0
  prom-           %19.1 = MkArg                    unboundValue, rir.compile[0x55abb46f0ec0]_p27, e1.0
  goto BB20
BB20   <- [19, 24]
  val?            %20.0 = Phi                      %24.3:BB24, %19.1:BB19
  val?            %20.1 = Phi                      %24.1:BB24, %19.0:BB19
  val?            %20.2 = Extract1_2D        !v    %18.4, %20.1, %20.0, e1.0   <val?_>
  val?^ | miss    %20.3 = LdVar              eR    y, e1.0
  val?            %20.4 = Force              !v    %20.3, e1.0   <val?_>
  lgl$#-          %20.5 = IsType                   %20.4 isA val+   <@?>
  void                    Branch                   %20.5 -> BB23 (if true) | BB21 (if false)
BB23   <- [20]
  val?^ | miss    %23.0 = LdVar              eR    i, e1.0
  val?            %23.1 = Force              !v    %23.0, e1.0   <val?_>
  val?^ | miss    %23.2 = LdVar              eR    c, e1.0
  val?            %23.3 = Force              !v    %23.2, e1.0   <val?_>
  goto BB22
BB21   <- [20]
  prom-           %21.0 = MkArg                    unboundValue, rir.compile[0x55abb46f0ec0]_p24, e1.0
  prom-           %21.1 = MkArg                    unboundValue, rir.compile[0x55abb46f0ec0]_p25, e1.0
  goto BB22
BB22   <- [21, 23]
  val?            %22.0 = Phi                      %23.3:BB23, %21.1:BB21
  val?            %22.1 = Phi                      %23.1:BB23, %21.0:BB21
  val?            %22.2 = Extract1_2D        !v    %20.4, %22.1, %22.0, e1.0   <val?_>
  val?            %22.3 = Mul                !v    %20.2, %22.2, e1.0   <val?_>
  val?            %22.4 = Add                !v    %18.2, %22.3, e1.0   <val?_>
  val?^ | miss    %22.5 = LdVar              eR    res2 !upd, e1.0
  val?            %22.6 = Force              !v    %22.5, e1.0   <val?_>
  val?^ | miss    %22.7 = LdVar              eR    r, e1.0
  val?            %22.8 = Force              !v    %22.7, e1.0   <val?_>
  val?^ | miss    %22.9 = LdVar              eR    c, e1.0
  val?            %22.10 = Force              !v    %22.9, e1.0   <val?_>
  val?            %22.11 = Subassign1_2D      !v    %22.4, %22.6, %22.8, %22.10, e1.0
  void                    StVar              lW    res2, %22.11, e1.0
  goto BB15
Prom 16:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    inner, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  val?            %1.4  = Colon              !     1L, %1.3, e1.0   <val?_>
  void                    Return             l     %1.4
Prom 17:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    res2 !upd, e1.0
  val?            %1.2  = Force              !v    %1.1, e1.0
  val?^ | miss    %1.3  = LdVar              eR    res2, e1.0
  val?            %1.4  = Force              !v    %1.3, e1.0   <val?_>
  lgl$#-          %1.5  = IsType                   %1.4 isA val+   <@?>
  void                    Branch                   %1.5 -> BB2 (if true) | BB10 (if false)
BB2   <- [1]
  val?^ | miss    %2.0  = LdVar              eR    r, e1.0
  val?            %2.1  = Force              !v    %2.0, e1.0   <val?_>
  val?^ | miss    %2.2  = LdVar              eR    c, e1.0
  val?            %2.3  = Force              !v    %2.2, e1.0   <val?_>
  goto BB3
BB10   <- [1]
  prom-           %10.0 = MkArg                    unboundValue, rir.compile[0x55abb46f0ec0]_p22, e1.0
  prom-           %10.1 = MkArg                    unboundValue, rir.compile[0x55abb46f0ec0]_p23, e1.0
  goto BB3
BB3   <- [10, 2]
  val?            %3.0  = Phi                      %2.3:BB2, %10.1:BB10
  val?            %3.1  = Phi                      %2.1:BB2, %10.0:BB10
  val?            %3.2  = Extract1_2D        !v    %1.4, %3.1, %3.0, e1.0   <val?_>
  val?^ | miss    %3.3  = LdVar              eR    x, e1.0
  val?            %3.4  = Force              !v    %3.3, e1.0   <val?_>
  lgl$#-          %3.5  = IsType                   %3.4 isA val+   <@?>
  void                    Branch                   %3.5 -> BB9 (if true) | BB4 (if false)
BB9   <- [3]
  val?^ | miss    %9.0  = LdVar              eR    r, e1.0
  val?            %9.1  = Force              !v    %9.0, e1.0   <val?_>
  val?^ | miss    %9.2  = LdVar              eR    i, e1.0
  val?            %9.3  = Force              !v    %9.2, e1.0   <val?_>
  goto BB5
BB4   <- [3]
  prom-           %4.0  = MkArg                    unboundValue, rir.compile[0x55abb46f0ec0]_p20, e1.0
  prom-           %4.1  = MkArg                    unboundValue, rir.compile[0x55abb46f0ec0]_p21, e1.0
  goto BB5
BB5   <- [4, 9]
  val?            %5.0  = Phi                      %9.3:BB9, %4.1:BB4
  val?            %5.1  = Phi                      %9.1:BB9, %4.0:BB4
  val?            %5.2  = Extract1_2D        !v    %3.4, %5.1, %5.0, e1.0   <val?_>
  val?^ | miss    %5.3  = LdVar              eR    y, e1.0
  val?            %5.4  = Force              !v    %5.3, e1.0   <val?_>
  lgl$#-          %5.5  = IsType                   %5.4 isA val+   <@?>
  void                    Branch                   %5.5 -> BB8 (if true) | BB6 (if false)
BB8   <- [5]
  val?^ | miss    %8.0  = LdVar              eR    i, e1.0
  val?            %8.1  = Force              !v    %8.0, e1.0   <val?_>
  val?^ | miss    %8.2  = LdVar              eR    c, e1.0
  val?            %8.3  = Force              !v    %8.2, e1.0   <val?_>
  goto BB7
BB6   <- [5]
  prom-           %6.0  = MkArg                    unboundValue, rir.compile[0x55abb46f0ec0]_p18, e1.0
  prom-           %6.1  = MkArg                    unboundValue, rir.compile[0x55abb46f0ec0]_p19, e1.0
  goto BB7
BB7   <- [6, 8]
  val?            %7.0  = Phi                      %8.3:BB8, %6.1:BB6
  val?            %7.1  = Phi                      %8.1:BB8, %6.0:BB6
  val?            %7.2  = Extract1_2D        !v    %5.4, %7.1, %7.0, e1.0   <val?_>
  val?            %7.3  = Mul                !v    %5.2, %7.2, e1.0   <val?_>
  val?            %7.4  = Add                !v    %3.2, %7.3, e1.0   <val?_>
  val?^ | miss    %7.5  = LdVar              eR    res2 !upd, e1.0
  val?            %7.6  = Force              !v    %7.5, e1.0   <val?_>
  val?^ | miss    %7.7  = LdVar              eR    r, e1.0
  val?            %7.8  = Force              !v    %7.7, e1.0   <val?_>
  val?^ | miss    %7.9  = LdVar              eR    c, e1.0
  val?            %7.10 = Force              !v    %7.9, e1.0   <val?_>
  val?            %7.11 = Subassign1_2D      !v    %7.4, %7.6, %7.8, %7.10, e1.0
  void                    StVar              lW    res2, %7.11, e1.0
  void                    Invisible          v     
  void                    Return             l     %7.4
Prom 18:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    i, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 19:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    c, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 20:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    r, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 21:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    i, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 22:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    r, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 23:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    c, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 24:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    i, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 25:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    c, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 26:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    r, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 27:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    i, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 28:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    r, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 29:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    c, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 30:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    i, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 31:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    c, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 32:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    r, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 33:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    i, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 34:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    r, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 35:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    c, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 36:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    inner, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  val?            %1.4  = Colon              !     1L, %1.3, e1.0   <val?_>
  void                    Return             l     %1.4
Prom 37:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    res2 !upd, e1.0
  val?            %1.2  = Force              !v    %1.1, e1.0
  val?^ | miss    %1.3  = LdVar              eR    res2, e1.0
  val?            %1.4  = Force              !v    %1.3, e1.0   <val?_>
  lgl$#-          %1.5  = IsType                   %1.4 isA val+   <@?>
  void                    Branch                   %1.5 -> BB2 (if true) | BB10 (if false)
BB2   <- [1]
  val?^ | miss    %2.0  = LdVar              eR    r, e1.0
  val?            %2.1  = Force              !v    %2.0, e1.0   <val?_>
  val?^ | miss    %2.2  = LdVar              eR    c, e1.0
  val?            %2.3  = Force              !v    %2.2, e1.0   <val?_>
  goto BB3
BB10   <- [1]
  prom-           %10.0 = MkArg                    unboundValue, rir.compile[0x55abb46f0ec0]_p42, e1.0
  prom-           %10.1 = MkArg                    unboundValue, rir.compile[0x55abb46f0ec0]_p43, e1.0
  goto BB3
BB3   <- [10, 2]
  val?            %3.0  = Phi                      %2.3:BB2, %10.1:BB10
  val?            %3.1  = Phi                      %2.1:BB2, %10.0:BB10
  val?            %3.2  = Extract1_2D        !v    %1.4, %3.1, %3.0, e1.0   <val?_>
  val?^ | miss    %3.3  = LdVar              eR    x, e1.0
  val?            %3.4  = Force              !v    %3.3, e1.0   <val?_>
  lgl$#-          %3.5  = IsType                   %3.4 isA val+   <@?>
  void                    Branch                   %3.5 -> BB9 (if true) | BB4 (if false)
BB9   <- [3]
  val?^ | miss    %9.0  = LdVar              eR    r, e1.0
  val?            %9.1  = Force              !v    %9.0, e1.0   <val?_>
  val?^ | miss    %9.2  = LdVar              eR    i, e1.0
  val?            %9.3  = Force              !v    %9.2, e1.0   <val?_>
  goto BB5
BB4   <- [3]
  prom-           %4.0  = MkArg                    unboundValue, rir.compile[0x55abb46f0ec0]_p40, e1.0
  prom-           %4.1  = MkArg                    unboundValue, rir.compile[0x55abb46f0ec0]_p41, e1.0
  goto BB5
BB5   <- [4, 9]
  val?            %5.0  = Phi                      %9.3:BB9, %4.1:BB4
  val?            %5.1  = Phi                      %9.1:BB9, %4.0:BB4
  val?            %5.2  = Extract1_2D        !v    %3.4, %5.1, %5.0, e1.0   <val?_>
  val?^ | miss    %5.3  = LdVar              eR    y, e1.0
  val?            %5.4  = Force              !v    %5.3, e1.0   <val?_>
  lgl$#-          %5.5  = IsType                   %5.4 isA val+   <@?>
  void                    Branch                   %5.5 -> BB8 (if true) | BB6 (if false)
BB8   <- [5]
  val?^ | miss    %8.0  = LdVar              eR    i, e1.0
  val?            %8.1  = Force              !v    %8.0, e1.0   <val?_>
  val?^ | miss    %8.2  = LdVar              eR    c, e1.0
  val?            %8.3  = Force              !v    %8.2, e1.0   <val?_>
  goto BB7
BB6   <- [5]
  prom-           %6.0  = MkArg                    unboundValue, rir.compile[0x55abb46f0ec0]_p38, e1.0
  prom-           %6.1  = MkArg                    unboundValue, rir.compile[0x55abb46f0ec0]_p39, e1.0
  goto BB7
BB7   <- [6, 8]
  val?            %7.0  = Phi                      %8.3:BB8, %6.1:BB6
  val?            %7.1  = Phi                      %8.1:BB8, %6.0:BB6
  val?            %7.2  = Extract1_2D        !v    %5.4, %7.1, %7.0, e1.0   <val?_>
  val?            %7.3  = Mul                !v    %5.2, %7.2, e1.0   <val?_>
  val?            %7.4  = Add                !v    %3.2, %7.3, e1.0   <val?_>
  val?^ | miss    %7.5  = LdVar              eR    res2 !upd, e1.0
  val?            %7.6  = Force              !v    %7.5, e1.0   <val?_>
  val?^ | miss    %7.7  = LdVar              eR    r, e1.0
  val?            %7.8  = Force              !v    %7.7, e1.0   <val?_>
  val?^ | miss    %7.9  = LdVar              eR    c, e1.0
  val?            %7.10 = Force              !v    %7.9, e1.0   <val?_>
  val?            %7.11 = Subassign1_2D      !v    %7.4, %7.6, %7.8, %7.10, e1.0
  void                    StVar              lW    res2, %7.11, e1.0
  void                    Invisible          v     
  void                    Return             l     %7.4
Prom 38:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    i, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 39:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    c, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 40:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    r, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 41:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    i, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 42:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    r, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 43:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    c, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 44:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    i, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 45:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    c, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 46:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    r, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 47:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    i, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 48:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    r, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 49:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    c, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 50:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    i, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 51:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    c, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 52:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    r, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 53:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    i, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 54:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    r, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 55:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    c, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 56:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    rows, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  val?            %1.4  = Colon              !     1L, %1.3, e1.0   <val?_>
  void                    Return             l     %1.4
Prom 57:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    inner, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  lgl$#-          %1.4  = ColonInputEffects  we    1, %1.3   <@?>
  void                    Branch                   %1.4 -> BB2 (if true) | BB31 (if false)
BB2   <- [1]
  int$#-          %2.0  = ColonCastRhs       e     1L, %1.3   <val?_>
  lgl$#-          %2.1  = Lte                d     1L, %2.0, elided   <@?>
  void                    Branch                   %2.1 -> BB30 (if true) | BB3 (if false)
BB31   <- [1]
  val?            %31.0 = Colon              !     1L, %1.3, e1.0
  (cls|spec|blt)  %31.1 = LdFun              !     for, e1.0
  prom-           %31.2 = MkArg                    %31.0, rir.compile[0x55abb46f0ec0]_p58 (!refl), e1.0
  prom-           %31.3 = MkArg                    unboundValue, rir.compile[0x55abb46f0ec0]_p59, e1.0
  val?            %31.4 = Call               !     %31.1(%31.2, %31.3) e1.0   <val?_>
  goto BB7
BB30   <- [2]
  goto BB4
BB3   <- [2]
  goto BB4
BB7   <- [31, 6]
  val?            %7.0  = Phi                      %31.4:BB31, nil:BB6
  void                    Return             l     %7.0
BB4   <- [30, 3]
  int$#-          %4.0  = Phi                      1L:BB30, -1L:BB3
  lgl$#-          %4.1  = Neq                d     %2.0, 1L, elided   <@?>
  void                    Branch                   %4.1 -> BB8 (if true) | BB5 (if false)
BB8   <- [4]
  void                    StVar              lW    i, 1L, e1.0
  int$-           %8.1  = Add                d     1L, %4.0, elided
  val?^ | miss    %8.2  = LdVar              eR    res2 !upd, e1.0
  val?            %8.3  = Force              !v    %8.2, e1.0
  val?^ | miss    %8.4  = LdVar              eR    res2, e1.0
  val?            %8.5  = Force              !v    %8.4, e1.0   <val?_>
  lgl$#-          %8.6  = IsType                   %8.5 isA val+   <@?>
  void                    Branch                   %8.6 -> BB29 (if true) | BB9 (if false)
BB5   <- [4]
  goto BB6
BB29   <- [8]
  val?^ | miss    %29.0 = LdVar              eR    r, e1.0
  val?            %29.1 = Force              !v    %29.0, e1.0   <val?_>
  val?^ | miss    %29.2 = LdVar              eR    c, e1.0
  val?            %29.3 = Force              !v    %29.2, e1.0   <val?_>
  goto BB10
BB9   <- [8]
  prom-           %9.0  = MkArg                    unboundValue, rir.compile[0x55abb46f0ec0]_p76, e1.0
  prom-           %9.1  = MkArg                    unboundValue, rir.compile[0x55abb46f0ec0]_p77, e1.0
  goto BB10
BB6   <- [26, 5]
  void                    Invisible          v     
  goto BB7
BB10   <- [9, 29]
  val?            %10.0 = Phi                      %29.3:BB29, %9.1:BB9
  val?            %10.1 = Phi                      %29.1:BB29, %9.0:BB9
  val?            %10.2 = Extract1_2D        !v    %8.5, %10.1, %10.0, e1.0   <val?_>
  val?^ | miss    %10.3 = LdVar              eR    x, e1.0
  val?            %10.4 = Force              !v    %10.3, e1.0   <val?_>
  lgl$#-          %10.5 = IsType                   %10.4 isA val+   <@?>
  void                    Branch                   %10.5 -> BB28 (if true) | BB11 (if false)
BB28   <- [10]
  val?^ | miss    %28.0 = LdVar              eR    r, e1.0
  val?            %28.1 = Force              !v    %28.0, e1.0   <val?_>
  val?^ | miss    %28.2 = LdVar              eR    i, e1.0
  val?            %28.3 = Force              !v    %28.2, e1.0   <val?_>
  goto BB12
BB11   <- [10]
  prom-           %11.0 = MkArg                    unboundValue, rir.compile[0x55abb46f0ec0]_p74, e1.0
  prom-           %11.1 = MkArg                    unboundValue, rir.compile[0x55abb46f0ec0]_p75, e1.0
  goto BB12
BB12   <- [11, 28]
  val?            %12.0 = Phi                      %28.3:BB28, %11.1:BB11
  val?            %12.1 = Phi                      %28.1:BB28, %11.0:BB11
  val?            %12.2 = Extract1_2D        !v    %10.4, %12.1, %12.0, e1.0   <val?_>
  val?^ | miss    %12.3 = LdVar              eR    y, e1.0
  val?            %12.4 = Force              !v    %12.3, e1.0   <val?_>
  lgl$#-          %12.5 = IsType                   %12.4 isA val+   <@?>
  void                    Branch                   %12.5 -> BB27 (if true) | BB13 (if false)
BB27   <- [12]
  val?^ | miss    %27.0 = LdVar              eR    i, e1.0
  val?            %27.1 = Force              !v    %27.0, e1.0   <val?_>
  val?^ | miss    %27.2 = LdVar              eR    c, e1.0
  val?            %27.3 = Force              !v    %27.2, e1.0   <val?_>
  goto BB14
BB13   <- [12]
  prom-           %13.0 = MkArg                    unboundValue, rir.compile[0x55abb46f0ec0]_p72, e1.0
  prom-           %13.1 = MkArg                    unboundValue, rir.compile[0x55abb46f0ec0]_p73, e1.0
  goto BB14
BB14   <- [13, 27]
  val?            %14.0 = Phi                      %27.3:BB27, %13.1:BB13
  val?            %14.1 = Phi                      %27.1:BB27, %13.0:BB13
  val?            %14.2 = Extract1_2D        !v    %12.4, %14.1, %14.0, e1.0   <val?_>
  val?            %14.3 = Mul                !v    %12.2, %14.2, e1.0   <val?_>
  val?            %14.4 = Add                !v    %10.2, %14.3, e1.0   <val?_>
  val?^ | miss    %14.5 = LdVar              eR    res2 !upd, e1.0
  val?            %14.6 = Force              !v    %14.5, e1.0   <val?_>
  val?^ | miss    %14.7 = LdVar              eR    r, e1.0
  val?            %14.8 = Force              !v    %14.7, e1.0   <val?_>
  val?^ | miss    %14.9 = LdVar              eR    c, e1.0
  val?            %14.10 = Force              !v    %14.9, e1.0   <val?_>
  val?            %14.11 = Subassign1_2D      !v    %14.4, %14.6, %14.8, %14.10, e1.0
  void                    StVar              lW    res2, %14.11, e1.0
  goto BB15
BB15   <- [14, 22]
  int$-           %15.0 = Phi                      %8.1:BB14, %16.1:BB22
  lgl$-           %15.1 = Neq                d     %2.0, %15.0, elided
  lgl$#-          %15.2 = Identical                %15.1, false
  void                    Branch                   %15.2 -> BB26 (if true) | BB16 (if false)
BB26   <- [15]
  goto BB6
BB16   <- [15]
  void                    StVar              lW    i, %15.0, e1.0
  int$-           %16.1 = Add                d     %15.0, %4.0, elided
  val?^ | miss    %16.2 = LdVar              eR    res2 !upd, e1.0
  val?            %16.3 = Force              !v    %16.2, e1.0
  val?^ | miss    %16.4 = LdVar              eR    res2, e1.0
  val?            %16.5 = Force              !v    %16.4, e1.0   <val?_>
  lgl$#-          %16.6 = IsType                   %16.5 isA val+   <@?>
  void                    Branch                   %16.6 -> BB25 (if true) | BB17 (if false)
BB25   <- [16]
  val?^ | miss    %25.0 = LdVar              eR    r, e1.0
  val?            %25.1 = Force              !v    %25.0, e1.0   <val?_>
  val?^ | miss    %25.2 = LdVar              eR    c, e1.0
  val?            %25.3 = Force              !v    %25.2, e1.0   <val?_>
  goto BB18
BB17   <- [16]
  prom-           %17.0 = MkArg                    unboundValue, rir.compile[0x55abb46f0ec0]_p70, e1.0
  prom-           %17.1 = MkArg                    unboundValue, rir.compile[0x55abb46f0ec0]_p71, e1.0
  goto BB18
BB18   <- [17, 25]
  val?            %18.0 = Phi                      %25.3:BB25, %17.1:BB17
  val?            %18.1 = Phi                      %25.1:BB25, %17.0:BB17
  val?            %18.2 = Extract1_2D        !v    %16.5, %18.1, %18.0, e1.0   <val?_>
  val?^ | miss    %18.3 = LdVar              eR    x, e1.0
  val?            %18.4 = Force              !v    %18.3, e1.0   <val?_>
  lgl$#-          %18.5 = IsType                   %18.4 isA val+   <@?>
  void                    Branch                   %18.5 -> BB24 (if true) | BB19 (if false)
BB24   <- [18]
  val?^ | miss    %24.0 = LdVar              eR    r, e1.0
  val?            %24.1 = Force              !v    %24.0, e1.0   <val?_>
  val?^ | miss    %24.2 = LdVar              eR    i, e1.0
  val?            %24.3 = Force              !v    %24.2, e1.0   <val?_>
  goto BB20
BB19   <- [18]
  prom-           %19.0 = MkArg                    unboundValue, rir.compile[0x55abb46f0ec0]_p68, e1.0
  prom-           %19.1 = MkArg                    unboundValue, rir.compile[0x55abb46f0ec0]_p69, e1.0
  goto BB20
BB20   <- [19, 24]
  val?            %20.0 = Phi                      %24.3:BB24, %19.1:BB19
  val?            %20.1 = Phi                      %24.1:BB24, %19.0:BB19
  val?            %20.2 = Extract1_2D        !v    %18.4, %20.1, %20.0, e1.0   <val?_>
  val?^ | miss    %20.3 = LdVar              eR    y, e1.0
  val?            %20.4 = Force              !v    %20.3, e1.0   <val?_>
  lgl$#-          %20.5 = IsType                   %20.4 isA val+   <@?>
  void                    Branch                   %20.5 -> BB23 (if true) | BB21 (if false)
BB23   <- [20]
  val?^ | miss    %23.0 = LdVar              eR    i, e1.0
  val?            %23.1 = Force              !v    %23.0, e1.0   <val?_>
  val?^ | miss    %23.2 = LdVar              eR    c, e1.0
  val?            %23.3 = Force              !v    %23.2, e1.0   <val?_>
  goto BB22
BB21   <- [20]
  prom-           %21.0 = MkArg                    unboundValue, rir.compile[0x55abb46f0ec0]_p66, e1.0
  prom-           %21.1 = MkArg                    unboundValue, rir.compile[0x55abb46f0ec0]_p67, e1.0
  goto BB22
BB22   <- [21, 23]
  val?            %22.0 = Phi                      %23.3:BB23, %21.1:BB21
  val?            %22.1 = Phi                      %23.1:BB23, %21.0:BB21
  val?            %22.2 = Extract1_2D        !v    %20.4, %22.1, %22.0, e1.0   <val?_>
  val?            %22.3 = Mul                !v    %20.2, %22.2, e1.0   <val?_>
  val?            %22.4 = Add                !v    %18.2, %22.3, e1.0   <val?_>
  val?^ | miss    %22.5 = LdVar              eR    res2 !upd, e1.0
  val?            %22.6 = Force              !v    %22.5, e1.0   <val?_>
  val?^ | miss    %22.7 = LdVar              eR    r, e1.0
  val?            %22.8 = Force              !v    %22.7, e1.0   <val?_>
  val?^ | miss    %22.9 = LdVar              eR    c, e1.0
  val?            %22.10 = Force              !v    %22.9, e1.0   <val?_>
  val?            %22.11 = Subassign1_2D      !v    %22.4, %22.6, %22.8, %22.10, e1.0
  void                    StVar              lW    res2, %22.11, e1.0
  goto BB15
Prom 58:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    inner, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  val?            %1.4  = Colon              !     1L, %1.3, e1.0   <val?_>
  void                    Return             l     %1.4
Prom 59:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    res2 !upd, e1.0
  val?            %1.2  = Force              !v    %1.1, e1.0
  val?^ | miss    %1.3  = LdVar              eR    res2, e1.0
  val?            %1.4  = Force              !v    %1.3, e1.0   <val?_>
  lgl$#-          %1.5  = IsType                   %1.4 isA val+   <@?>
  void                    Branch                   %1.5 -> BB2 (if true) | BB10 (if false)
BB2   <- [1]
  val?^ | miss    %2.0  = LdVar              eR    r, e1.0
  val?            %2.1  = Force              !v    %2.0, e1.0   <val?_>
  val?^ | miss    %2.2  = LdVar              eR    c, e1.0
  val?            %2.3  = Force              !v    %2.2, e1.0   <val?_>
  goto BB3
BB10   <- [1]
  prom-           %10.0 = MkArg                    unboundValue, rir.compile[0x55abb46f0ec0]_p64, e1.0
  prom-           %10.1 = MkArg                    unboundValue, rir.compile[0x55abb46f0ec0]_p65, e1.0
  goto BB3
BB3   <- [10, 2]
  val?            %3.0  = Phi                      %2.3:BB2, %10.1:BB10
  val?            %3.1  = Phi                      %2.1:BB2, %10.0:BB10
  val?            %3.2  = Extract1_2D        !v    %1.4, %3.1, %3.0, e1.0   <val?_>
  val?^ | miss    %3.3  = LdVar              eR    x, e1.0
  val?            %3.4  = Force              !v    %3.3, e1.0   <val?_>
  lgl$#-          %3.5  = IsType                   %3.4 isA val+   <@?>
  void                    Branch                   %3.5 -> BB9 (if true) | BB4 (if false)
BB9   <- [3]
  val?^ | miss    %9.0  = LdVar              eR    r, e1.0
  val?            %9.1  = Force              !v    %9.0, e1.0   <val?_>
  val?^ | miss    %9.2  = LdVar              eR    i, e1.0
  val?            %9.3  = Force              !v    %9.2, e1.0   <val?_>
  goto BB5
BB4   <- [3]
  prom-           %4.0  = MkArg                    unboundValue, rir.compile[0x55abb46f0ec0]_p62, e1.0
  prom-           %4.1  = MkArg                    unboundValue, rir.compile[0x55abb46f0ec0]_p63, e1.0
  goto BB5
BB5   <- [4, 9]
  val?            %5.0  = Phi                      %9.3:BB9, %4.1:BB4
  val?            %5.1  = Phi                      %9.1:BB9, %4.0:BB4
  val?            %5.2  = Extract1_2D        !v    %3.4, %5.1, %5.0, e1.0   <val?_>
  val?^ | miss    %5.3  = LdVar              eR    y, e1.0
  val?            %5.4  = Force              !v    %5.3, e1.0   <val?_>
  lgl$#-          %5.5  = IsType                   %5.4 isA val+   <@?>
  void                    Branch                   %5.5 -> BB8 (if true) | BB6 (if false)
BB8   <- [5]
  val?^ | miss    %8.0  = LdVar              eR    i, e1.0
  val?            %8.1  = Force              !v    %8.0, e1.0   <val?_>
  val?^ | miss    %8.2  = LdVar              eR    c, e1.0
  val?            %8.3  = Force              !v    %8.2, e1.0   <val?_>
  goto BB7
BB6   <- [5]
  prom-           %6.0  = MkArg                    unboundValue, rir.compile[0x55abb46f0ec0]_p60, e1.0
  prom-           %6.1  = MkArg                    unboundValue, rir.compile[0x55abb46f0ec0]_p61, e1.0
  goto BB7
BB7   <- [6, 8]
  val?            %7.0  = Phi                      %8.3:BB8, %6.1:BB6
  val?            %7.1  = Phi                      %8.1:BB8, %6.0:BB6
  val?            %7.2  = Extract1_2D        !v    %5.4, %7.1, %7.0, e1.0   <val?_>
  val?            %7.3  = Mul                !v    %5.2, %7.2, e1.0   <val?_>
  val?            %7.4  = Add                !v    %3.2, %7.3, e1.0   <val?_>
  val?^ | miss    %7.5  = LdVar              eR    res2 !upd, e1.0
  val?            %7.6  = Force              !v    %7.5, e1.0   <val?_>
  val?^ | miss    %7.7  = LdVar              eR    r, e1.0
  val?            %7.8  = Force              !v    %7.7, e1.0   <val?_>
  val?^ | miss    %7.9  = LdVar              eR    c, e1.0
  val?            %7.10 = Force              !v    %7.9, e1.0   <val?_>
  val?            %7.11 = Subassign1_2D      !v    %7.4, %7.6, %7.8, %7.10, e1.0
  void                    StVar              lW    res2, %7.11, e1.0
  void                    Invisible          v     
  void                    Return             l     %7.4
Prom 60:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    i, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 61:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    c, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 62:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    r, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 63:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    i, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 64:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    r, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 65:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    c, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 66:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    i, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 67:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    c, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 68:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    r, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 69:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    i, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 70:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    r, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 71:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    c, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 72:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    i, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 73:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    c, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 74:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    r, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 75:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    i, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 76:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    r, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 77:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    c, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 78:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    inner, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  val?            %1.4  = Colon              !     1L, %1.3, e1.0   <val?_>
  void                    Return             l     %1.4
Prom 79:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    res2 !upd, e1.0
  val?            %1.2  = Force              !v    %1.1, e1.0
  val?^ | miss    %1.3  = LdVar              eR    res2, e1.0
  val?            %1.4  = Force              !v    %1.3, e1.0   <val?_>
  lgl$#-          %1.5  = IsType                   %1.4 isA val+   <@?>
  void                    Branch                   %1.5 -> BB2 (if true) | BB10 (if false)
BB2   <- [1]
  val?^ | miss    %2.0  = LdVar              eR    r, e1.0
  val?            %2.1  = Force              !v    %2.0, e1.0   <val?_>
  val?^ | miss    %2.2  = LdVar              eR    c, e1.0
  val?            %2.3  = Force              !v    %2.2, e1.0   <val?_>
  goto BB3
BB10   <- [1]
  prom-           %10.0 = MkArg                    unboundValue, rir.compile[0x55abb46f0ec0]_p84, e1.0
  prom-           %10.1 = MkArg                    unboundValue, rir.compile[0x55abb46f0ec0]_p85, e1.0
  goto BB3
BB3   <- [10, 2]
  val?            %3.0  = Phi                      %2.3:BB2, %10.1:BB10
  val?            %3.1  = Phi                      %2.1:BB2, %10.0:BB10
  val?            %3.2  = Extract1_2D        !v    %1.4, %3.1, %3.0, e1.0   <val?_>
  val?^ | miss    %3.3  = LdVar              eR    x, e1.0
  val?            %3.4  = Force              !v    %3.3, e1.0   <val?_>
  lgl$#-          %3.5  = IsType                   %3.4 isA val+   <@?>
  void                    Branch                   %3.5 -> BB9 (if true) | BB4 (if false)
BB9   <- [3]
  val?^ | miss    %9.0  = LdVar              eR    r, e1.0
  val?            %9.1  = Force              !v    %9.0, e1.0   <val?_>
  val?^ | miss    %9.2  = LdVar              eR    i, e1.0
  val?            %9.3  = Force              !v    %9.2, e1.0   <val?_>
  goto BB5
BB4   <- [3]
  prom-           %4.0  = MkArg                    unboundValue, rir.compile[0x55abb46f0ec0]_p82, e1.0
  prom-           %4.1  = MkArg                    unboundValue, rir.compile[0x55abb46f0ec0]_p83, e1.0
  goto BB5
BB5   <- [4, 9]
  val?            %5.0  = Phi                      %9.3:BB9, %4.1:BB4
  val?            %5.1  = Phi                      %9.1:BB9, %4.0:BB4
  val?            %5.2  = Extract1_2D        !v    %3.4, %5.1, %5.0, e1.0   <val?_>
  val?^ | miss    %5.3  = LdVar              eR    y, e1.0
  val?            %5.4  = Force              !v    %5.3, e1.0   <val?_>
  lgl$#-          %5.5  = IsType                   %5.4 isA val+   <@?>
  void                    Branch                   %5.5 -> BB8 (if true) | BB6 (if false)
BB8   <- [5]
  val?^ | miss    %8.0  = LdVar              eR    i, e1.0
  val?            %8.1  = Force              !v    %8.0, e1.0   <val?_>
  val?^ | miss    %8.2  = LdVar              eR    c, e1.0
  val?            %8.3  = Force              !v    %8.2, e1.0   <val?_>
  goto BB7
BB6   <- [5]
  prom-           %6.0  = MkArg                    unboundValue, rir.compile[0x55abb46f0ec0]_p80, e1.0
  prom-           %6.1  = MkArg                    unboundValue, rir.compile[0x55abb46f0ec0]_p81, e1.0
  goto BB7
BB7   <- [6, 8]
  val?            %7.0  = Phi                      %8.3:BB8, %6.1:BB6
  val?            %7.1  = Phi                      %8.1:BB8, %6.0:BB6
  val?            %7.2  = Extract1_2D        !v    %5.4, %7.1, %7.0, e1.0   <val?_>
  val?            %7.3  = Mul                !v    %5.2, %7.2, e1.0   <val?_>
  val?            %7.4  = Add                !v    %3.2, %7.3, e1.0   <val?_>
  val?^ | miss    %7.5  = LdVar              eR    res2 !upd, e1.0
  val?            %7.6  = Force              !v    %7.5, e1.0   <val?_>
  val?^ | miss    %7.7  = LdVar              eR    r, e1.0
  val?            %7.8  = Force              !v    %7.7, e1.0   <val?_>
  val?^ | miss    %7.9  = LdVar              eR    c, e1.0
  val?            %7.10 = Force              !v    %7.9, e1.0   <val?_>
  val?            %7.11 = Subassign1_2D      !v    %7.4, %7.6, %7.8, %7.10, e1.0
  void                    StVar              lW    res2, %7.11, e1.0
  void                    Invisible          v     
  void                    Return             l     %7.4
Prom 80:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    i, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 81:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    c, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 82:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    r, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 83:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    i, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 84:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    r, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 85:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    c, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 86:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    i, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 87:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    c, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 88:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    r, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 89:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    i, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 92:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    i, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 93:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    c, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 94:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    r, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 95:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    i, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 96:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    r, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 97:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    c, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3

│ rir.compile[0x55abb46f0ec0]                                                  │
└──────────────────────────────────────────────────────────────────────────────┘
