
┌──────────────────────────────────────────────────────────────────────────────┐
│ rir.compile[0x55abb461e990]                                                  │
│ Context: CorrOrd,!TMany                                                      │
│ Properties:  Eager                                                           │
├────── PIR Version After Optimizations
rir.compile[0x55abb461e990]
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = MkEnv              l     parent=R_GlobalEnv, context 1
  (cls|spec|blt)  %1.1  = LdFun              !v    matrix, R_GlobalEnv
  prom-           %1.2  = MkArg                    unboundValue, rir.compile[0x55abb461e990]_p0 (!refl), 
  val?            %1.3  = NamedCall          !v    %1.1(%1.2, nrow=2, ncol=3, byrow=true) e1.0   <val?_>
  void                    StVar              lW    x, %1.3, e1.0
  (cls|spec|blt)  %1.5  = LdFun              !v    matrix, e1.0
  prom-           %1.6  = MkArg                    unboundValue, rir.compile[0x55abb461e990]_p1 (!refl), 
  val?            %1.7  = NamedCall          !v    %1.5(%1.6, nrow=3, ncol=4, byrow=true) e1.0   <val?_>
  void                    StVar              lW    y, %1.7, e1.0
  (cls|spec|blt)  %1.9  = LdFun              !v    stopifnot, e1.0
  prom-           %1.10 = MkArg                    unboundValue, rir.compile[0x55abb461e990]_p2, e1.0
  val?            %1.11 = Call               !v    %1.9(%1.10) e1.0
  (cls|spec|blt)  %1.12 = LdFun              !v    nrow, e1.0
  prom-           %1.13 = MkArg                    unboundValue, rir.compile[0x55abb461e990]_p5, e1.0
  val?            %1.14 = Call               !v    %1.12(%1.13) e1.0   <val?_>
  void                    StVar              lW    rows, %1.14, e1.0
  (cls|spec|blt)  %1.16 = LdFun              !v    ncol, e1.0
  prom-           %1.17 = MkArg                    unboundValue, rir.compile[0x55abb461e990]_p6, e1.0
  val?            %1.18 = Call               !v    %1.16(%1.17) e1.0   <val?_>
  void                    StVar              lW    cols, %1.18, e1.0
  (cls|spec|blt)  %1.20 = LdFun              !v    ncol, e1.0
  prom-           %1.21 = MkArg                    unboundValue, rir.compile[0x55abb461e990]_p7, e1.0
  val?            %1.22 = Call               !v    %1.20(%1.21) e1.0   <val?_>
  void                    StVar              lW    inner, %1.22, e1.0
  val?^ | miss    %1.24 = LdVar              eR    %*%, e1.0
  lgl$#-          %1.25 = Identical                <blt %*%>, %1.24   <@?>
  void                    Branch                   %1.25 -> BB2 (if true) | BB75 (if false)
BB2   <- [1]
  val?^ | miss    %2.0  = LdVar              eR    x, e1.0
  val?            %2.1  = Force!             !v    %2.0, e1.0   <val?_>
  val?^ | miss    %2.2  = LdVar              eR    y, e1.0
  val?            %2.3  = Force!             !v    %2.2, e1.0   <val?_>
  lgl$#-          %2.4  = IsType                   %2.3 isA val?+
  lgl$#-          %2.5  = IsType                   %2.1 isA val?+
  cp              %2.6  = Checkpoint                -> BB4 (default) | BB3 (if assume failed)
BB75   <- [1]
  val?^ | miss    %75.0 = LdVar              eR    x, e1.0
  val?            %75.1 = Force!             !v    %75.0, e1.0   <val?_>
  val?^ | miss    %75.2 = LdVar              eR    y, e1.0
  val?            %75.3 = Force!             !v    %75.2, e1.0   <val?_>
  val?            %75.4 = CallBuiltin        !v    %*%(%75.1, %75.3) e1.0
  goto BB5
BB4   <- [2]
  void                    Assume             D     %2.5, %2.6 (Typecheck@0x55abb3b0fc48[Type#17])
  val?+           %4.1  = CastType           d     dn %2.1   <val?_>
  void                    Assume             D     %2.4, %2.6 (Typecheck@0x55abb3b0fc48[Type#18])
  val?+           %4.3  = CastType           d     dn %2.3   <val?_>
  val+            %4.4  = CallSafeBuiltin    wed   %*%(%4.1, %4.3) 
  goto BB5
BB3   <- [2]
  fs              %3.0  = FrameState         R     0x55abb4810380+413: [<blt %*%>, %2.1, %2.3], env=e1.0
  void                    Deopt              !v    %3.0   !
BB5   <- [4, 75]
  val?            %5.0  = Phi                      %75.4:BB75, %4.4:BB4   <val?_>
  void                    StVar              lW    res1, %5.0, e1.0
  (cls|spec|blt)  %5.2  = LdFun              !v    matrix, e1.0
  prom-           %5.3  = MkArg                    unboundValue, rir.compile[0x55abb461e990]_p10, e1.0
  prom-           %5.4  = MkArg                    unboundValue, rir.compile[0x55abb461e990]_p11, e1.0
  val?            %5.5  = NamedCall          !v    %5.2(0, nrow=%5.3, ncol=%5.4) e1.0   <val?_>
  void                    StVar              lW    res2, %5.5, e1.0
  void                    StVar              lW    c, 1, e1.0
  goto BB6
BB6   <- [27, 5]
  (real|complex)+ %6.0  = Phi                      1:BB5, %27.2:BB27   <val?_>
  val?^ | miss    %6.1  = LdVar              eR    cols, e1.0
  val?            %6.2  = Force!             !v    %6.1, e1.0   <val?_>
  lgl$#-          %6.3  = IsType                   %6.2 isA val?+
  cp              %6.4  = Checkpoint                -> BB8 (default) | BB7 (if assume failed)
BB8   <- [6]
  void                    Assume             D     %6.3, %6.4 (Typecheck@0x55abb3b0fc48[Type#24])
  val?+           %8.1  = CastType           d     dn %6.2   <val?_>
  lgl             %8.2  = Lte                wed   %6.0, %8.1, elided   <val?_>
  lgl$#-          %8.3  = CheckTrueFalse     we    %8.2
  void                    Branch                   %8.3 -> BB21 (if true) | BB9 (if false)
BB7   <- [6]
  fs              %7.0  = FrameState         R     0x55abb4810380+555: [%6.0, %6.2], env=e1.0
  void                    Deopt              !v    %7.0   !
BB21   <- [8]
  void                    StVar              lW    r, 1, e1.0
  goto BB22
BB9   <- [8]
  void                    StVar              lW    i, 1, e1.0
  void                    StVar              lW    last, 0, e1.0
  goto BB10
BB22   <- [21, 34]
  (real|complex)+ %22.0 = Phi                      1:BB21, %34.2:BB34   <val?_>
  val?^ | miss    %22.1 = LdVar              eR    rows, e1.0
  val?            %22.2 = Force!             !v    %22.1, e1.0   <val?_>
  lgl$#-          %22.3 = IsType                   %22.2 isA val?+
  cp              %22.4 = Checkpoint                -> BB24 (default) | BB23 (if assume failed)
BB10   <- [9, 19]
  real$#-         %10.0 = Phi                      0:BB9, %18.0:BB19   <val?_>
  real$#-         %10.1 = Phi                      1:BB9, %19.0:BB19   <val?_>
  lgl$#-          %10.2 = Lte                d     %10.1, 10, elided   <val?_>
  void                    Branch                   %10.2 -> BB17 (if true) | BB11 (if false)
BB24   <- [22]
  void                    Assume             D     %22.3, %22.4 (Typecheck@0x55abb3b0fc48[Type#27])
  val?+           %24.1 = CastType           d     dn %22.2   <val?_>
  lgl             %24.2 = Lte                wed   %22.0, %24.1, elided   <val?_>
  lgl$#-          %24.3 = CheckTrueFalse     we    %24.2
  void                    Branch                   %24.3 -> BB28 (if true) | BB25 (if false)
BB23   <- [22]
  fs              %23.0 = FrameState         R     0x55abb4810380+610: [%22.0, %22.2], env=e1.0
  void                    Deopt              !v    %23.0   !
BB17   <- [10]
  real$#-         %17.0 = Mul                d     %10.1, 10, elided   <val?_>
  void                    StVar              lW    x2, %17.0, e1.0
  void                    StVar              lW    y2, 3, e1.0
  real$#-         %17.3 = Add                d     %10.0, %17.0, elided   <val?_>
  real$#-         %17.4 = Add                d     %17.3, 3, elided   <val?_>
  void                    StVar              lW    last, %17.4, e1.0
  void                    StVar              lW    j, 2, e1.0
  goto BB18
BB11   <- [10]
  void                    Visible            v     
  lgl$#-          %11.1 = Eq                 vd    %10.0, 6250, elided   <val?_>
  void                    Branch                   %11.1 -> BB14 (if true) | BB12 (if false)
BB28   <- [24]
  void                    StVar              lW    i, 1, e1.0
  val?^ | miss    %28.1 = LdVar              eR    inner, e1.0
  val?            %28.2 = Force!             !v    %28.1, e1.0   <val?_>
  lgl$#-          %28.3 = IsType                   %28.2 isA val?+
  cp              %28.4 = Checkpoint                -> BB30 (default) | BB29 (if assume failed)
BB25   <- [24]
  val?^ | miss    %25.0 = LdVar              eR    c, e1.0
  val?            %25.1 = Force!             !v    %25.0, e1.0   <val?_>
  lgl$#-          %25.2 = IsType                   %25.1 isA val?+
  cp              %25.3 = Checkpoint                -> BB27 (default) | BB26 (if assume failed)
BB18   <- [20, 17]
  real$#-         %18.0 = Phi                      %17.4:BB17, %20.3:BB20   <val?_>
  real$#-         %18.1 = Phi                      2:BB17, %20.5:BB20   <val?_>
  lgl$#-          %18.2 = Lte                d     %18.1, 10, elided   <val?_>
  void                    Branch                   %18.2 -> BB20 (if true) | BB19 (if false)
BB14   <- [11]
  val?^ | miss    %14.0 = LdVar              eR    res1, e1.0
  val?            %14.1 = Force!             !v    %14.0, e1.0   <val?_>
  val?^ | miss    %14.2 = LdVar              eR    res2, e1.0
  void                    Visible            v     
  val?            %14.4 = Force!             !     %14.2, e1.0   <val?_>
  lgl$#-          %14.5 = IsType                   %14.4 isA val?+
  lgl$#-          %14.6 = IsType                   %14.1 isA val?+
  cp              %14.7 = Checkpoint                -> BB16 (default) | BB15 (if assume failed)
BB12   <- [11]
  goto BB13
BB30   <- [28]
  void                    Assume             D     %28.3, %28.4 (Typecheck@0x55abb3b0fc48[Type#30])
  val?+           %30.1 = CastType           d     dn %28.2   <val?_>
  lgl             %30.2 = Lte                wed   1, %30.1, elided   <val?_>
  lgl$#-          %30.3 = CheckTrueFalse     we    %30.2   <@?>
  void                    Branch                   %30.3 -> BB35 (if true) | BB31 (if false)
BB29   <- [28]
  fs              %29.0 = FrameState         R     0x55abb4810380+665: [1, %28.2], env=e1.0
  void                    Deopt              !v    %29.0   !
BB27   <- [25]
  void                    Assume             D     %25.2, %25.3 (Typecheck@0x55abb3b0fc48[Type#87])
  val?+           %27.1 = CastType           d     dn %25.1   <val?_>
  (real|complex)+ %27.2 = Add                wed   %27.1, 1, elided   <val?_>
  void                    StVar              lW    c, %27.2, e1.0
  goto BB6
BB26   <- [25]
  fs              %26.0 = FrameState         R     0x55abb4810380+1511: [%25.1], env=e1.0
  void                    Deopt              !v    %26.0   !
BB20   <- [18]
  real$#-         %20.0 = Add                d     %18.1, 2, elided   <val?_>
  void                    StVar              lW    y2, %20.0, e1.0
  real$#-         %20.2 = Add                d     %18.0, %17.0, elided   <val?_>
  real$#-         %20.3 = Add                d     %20.2, %20.0, elided   <val?_>
  void                    StVar              lW    last, %20.3, e1.0
  real$#-         %20.5 = Add                d     %18.1, 1, elided   <val?_>
  void                    StVar              lW    j, %20.5, e1.0
  goto BB18
BB19   <- [18]
  real$#-         %19.0 = Add                d     %10.1, 1, elided   <val?_>
  void                    StVar              lW    i, %19.0, e1.0
  goto BB10
BB16   <- [14]
  void                    Assume             D     %14.6, %14.7 (Typecheck@0x55abb3b0fc48[Type#119])
  val?+           %16.1 = CastType           d     dn %14.1   <val?_>
  void                    Assume             D     %14.5, %14.7 (Typecheck@0x55abb3b0fc48[Type#120])
  val?+           %16.3 = CastType           d     dn %14.4   <val?_>
  lgl             %16.4 = Eq                 vwed  %16.1, %16.3, elided   <val?_>
  lgl$-           %16.5 = AsLogical          e     %16.4
  lgl$-           %16.6 = LAnd                     %11.1, %16.5
  goto BB13
BB15   <- [14]
  fs              %15.0 = FrameState         R     0x55abb4810380+2090: [%11.1, %14.1, %14.4], env=e1.0
  void                    Deopt              !v    %15.0   !
BB13   <- [12, 16]
  lgl$-           %13.0 = Phi                      %16.6:BB16, %11.1:BB12
  void                    Return             l     %13.0
BB35   <- [30]
  val?^ | miss    %35.0 = LdVar              eR    res2 !upd, e1.0
  val?            %35.1 = Force!             !v    %35.0, e1.0
  val?^ | miss    %35.2 = LdVar              eR    res2, e1.0
  val?            %35.3 = Force!             !v    %35.2, e1.0   <val?_>
  lgl$#-          %35.4 = IsType                   %35.3 isA val+   <@?>
  void                    Branch                   %35.4 -> BB74 (if true) | BB36 (if false)
BB31   <- [30]
  goto BB32
BB74   <- [35]
  val?^ | miss    %74.0 = LdVar              eR    r, e1.0
  val?            %74.1 = Force!             !v    %74.0, e1.0   <val?_>
  val?^ | miss    %74.2 = LdVar              eR    c, e1.0
  val?            %74.3 = Force!             !v    %74.2, e1.0   <val?_>
  goto BB37
BB36   <- [35]
  prom-           %36.0 = MkArg                    unboundValue, rir.compile[0x55abb461e990]_p22, e1.0
  prom-           %36.1 = MkArg                    unboundValue, rir.compile[0x55abb461e990]_p23, e1.0
  goto BB37
BB32   <- [53, 31]
  val?^ | miss    %32.0 = LdVar              eR    r, e1.0
  val?            %32.1 = Force!             !v    %32.0, e1.0   <val?_>
  lgl$#-          %32.2 = IsType                   %32.1 isA val?+
  cp              %32.3 = Checkpoint                -> BB34 (default) | BB33 (if assume failed)
BB37   <- [36, 74]
  val?            %37.0 = Phi                      %74.3:BB74, %36.1:BB36
  val?            %37.1 = Phi                      %74.1:BB74, %36.0:BB36
  val?            %37.2 = Extract1_2D        !v    %35.3, %37.1, %37.0, e1.0   <val?_>
  val?^ | miss    %37.3 = LdVar              eR    x, e1.0
  val?            %37.4 = Force!             !v    %37.3, e1.0   <val?_>
  lgl$#-          %37.5 = IsType                   %37.4 isA val+   <@?>
  void                    Branch                   %37.5 -> BB73 (if true) | BB38 (if false)
BB34   <- [32]
  void                    Assume             D     %32.2, %32.3 (Typecheck@0x55abb3b0fc48[Type#85])
  val?+           %34.1 = CastType           d     dn %32.1   <val?_>
  (real|complex)+ %34.2 = Add                wed   %34.1, 1, elided   <val?_>
  void                    StVar              lW    r, %34.2, e1.0
  goto BB22
BB33   <- [32]
  fs              %33.0 = FrameState         R     0x55abb4810380+1471: [%32.1], env=e1.0
  void                    Deopt              !v    %33.0   !
BB73   <- [37]
  val?^ | miss    %73.0 = LdVar              eR    r, e1.0
  val?            %73.1 = Force!             !v    %73.0, e1.0   <val?_>
  val?^ | miss    %73.2 = LdVar              eR    i, e1.0
  val?            %73.3 = Force!             !v    %73.2, e1.0   <val?_>
  goto BB39
BB38   <- [37]
  prom-           %38.0 = MkArg                    unboundValue, rir.compile[0x55abb461e990]_p20, e1.0
  prom-           %38.1 = MkArg                    unboundValue, rir.compile[0x55abb461e990]_p21, e1.0
  goto BB39
BB39   <- [38, 73]
  val?            %39.0 = Phi                      %73.3:BB73, %38.1:BB38
  val?            %39.1 = Phi                      %73.1:BB73, %38.0:BB38
  val?            %39.2 = Extract1_2D        !v    %37.4, %39.1, %39.0, e1.0   <val?_>
  val?^ | miss    %39.3 = LdVar              eR    y, e1.0
  val?            %39.4 = Force!             !v    %39.3, e1.0   <val?_>
  lgl$#-          %39.5 = IsType                   %39.4 isA val+   <@?>
  void                    Branch                   %39.5 -> BB72 (if true) | BB40 (if false)
BB72   <- [39]
  val?^ | miss    %72.0 = LdVar              eR    i, e1.0
  val?            %72.1 = Force!             !v    %72.0, e1.0   <val?_>
  val?^ | miss    %72.2 = LdVar              eR    c, e1.0
  val?            %72.3 = Force!             !v    %72.2, e1.0   <val?_>
  goto BB41
BB40   <- [39]
  prom-           %40.0 = MkArg                    unboundValue, rir.compile[0x55abb461e990]_p18, e1.0
  prom-           %40.1 = MkArg                    unboundValue, rir.compile[0x55abb461e990]_p19, e1.0
  goto BB41
BB41   <- [40, 72]
  val?            %41.0 = Phi                      %72.3:BB72, %40.1:BB40
  val?            %41.1 = Phi                      %72.1:BB72, %40.0:BB40
  val?            %41.2 = Extract1_2D        !v    %39.4, %41.1, %41.0, e1.0   <val?_>
  lgl$#-          %41.3 = IsType                   %41.2 isA val?+
  cp              %41.4 = Checkpoint                -> BB43 (default) | BB42 (if assume failed)
BB43   <- [41]
  lgl$#-          %43.0 = IsType                   %39.2 isA val?+
  void                    Assume             D     %43.0, %41.4 (Typecheck@0x55abb3b0fc48[Type#43])
  val?+           %43.2 = CastType           d     dn %39.2   <val?_>
  void                    Assume             D     %41.3, %41.4 (Typecheck@0x55abb3b0fc48[Type#49])
  val?+           %43.4 = CastType           d     dn %41.2   <val?_>
  (int|real|complex)+ %43.5 = Mul                wed   %43.2, %43.4, elided   <val?_>
  cp              %43.6 = Checkpoint                -> BB45 (default) | BB44 (if assume failed)
BB42   <- [41]
  fs              %42.0 = FrameState         R     0x55abb4810380+947: [%37.2, %39.2, %41.2], env=e1.0
  void                    Deopt              !v    %42.0   !
BB45   <- [43]
  lgl$#-          %45.0 = IsType                   %37.2 isA val?+
  void                    Assume             D     %45.0, %43.6 (Typecheck@0x55abb3b0fc48[Type#37])
  val?+           %45.2 = CastType           d     dn %37.2   <val?_>
  (int|real|complex)+ %45.3 = Add                wed   %45.2, %43.5, elided   <val?_>
  val?^ | miss    %45.4 = LdVar              eR    res2 !upd, e1.0
  val?            %45.5 = Force!             !v    %45.4, e1.0   <val?_>
  val?^ | miss    %45.6 = LdVar              eR    r, e1.0
  val?            %45.7 = Force!             !v    %45.6, e1.0   <val?_>
  val?^ | miss    %45.8 = LdVar              eR    c, e1.0
  val?            %45.9 = Force!             !v    %45.8, e1.0   <val?_>
  lgl$#-          %45.10 = IsType                   %45.9 isA val?+
  lgl$#-          %45.11 = IsType                   %45.5 isA val?+
  lgl$#-          %45.12 = IsType                   %45.7 isA val?+
  cp              %45.13 = Checkpoint                -> BB47 (default) | BB46 (if assume failed)
BB44   <- [43]
  fs              %44.0 = FrameState         R     0x55abb4810380+954: [%37.2, %43.5], env=e1.0
  void                    Deopt              !v    %44.0   !
BB47   <- [45]
  void                    Assume             D     %45.11, %45.13 (Typecheck@0x55abb3b0fc48[Type#52])
  val?+           %47.1 = CastType           d     dn %45.5   <val?_>
  void                    Assume             D     %45.12, %45.13 (Typecheck@0x55abb3b0fc48[Type#53])
  val?+           %47.3 = CastType           d     dn %45.7   <val?_>
  void                    Assume             D     %45.10, %45.13 (Typecheck@0x55abb3b0fc48[Type#54])
  val?+           %47.5 = CastType           d     dn %45.9   <val?_>
  val?+           %47.6 = Subassign1_2D      wed   %45.3, %47.1, %47.3, %47.5, elided
  void                    StVar              lW    res2, %47.6, e1.0
  val?^ | miss    %47.8 = LdVar              eR    i, e1.0
  val?            %47.9 = Force!             !v    %47.8, e1.0   <val?_>
  lgl$#-          %47.10 = IsType                   %47.9 isA val?+
  cp              %47.11 = Checkpoint                -> BB49 (default) | BB48 (if assume failed)
BB46   <- [45]
  fs              %46.0 = FrameState         R     0x55abb4810380+1002: [%45.3, %45.5, %45.7, %45.9], env=e1.0
  void                    Deopt              !v    %46.0   !
BB49   <- [47]
  void                    Assume             D     %47.10, %47.11 (Typecheck@0x55abb3b0fc48[Type#55])
  val?+           %49.1 = CastType           d     dn %47.9   <val?_>
  (real|complex)+ %49.2 = Add                wed   %49.1, 1, elided   <val?_>
  void                    StVar              lW    i, %49.2, e1.0
  goto BB50
BB48   <- [47]
  fs              %48.0 = FrameState         R     0x55abb4810380+1026: [%47.9], env=e1.0
  void                    Deopt              !v    %48.0   !
BB50   <- [49, 68]
  (real|complex)+ %50.0 = Phi                      %49.2:BB49, %68.2:BB68   <val?_>
  val?^ | miss    %50.1 = LdVar              eR    inner, e1.0
  val?            %50.2 = Force!             !v    %50.1, e1.0   <val?_>
  lgl$#-          %50.3 = IsType                   %50.2 isA val?+
  cp              %50.4 = Checkpoint                -> BB52 (default) | BB51 (if assume failed)
BB52   <- [50]
  void                    Assume             D     %50.3, %50.4 (Typecheck@0x55abb3b0fc48[Type#58])
  val?+           %52.1 = CastType           d     dn %50.2   <val?_>
  lgl             %52.2 = Lte                wed   %50.0, %52.1, elided   <val?_>
  lgl$#-          %52.3 = CheckTrueFalse     we    %52.2
  void                    Branch                   %52.3 -> BB54 (if true) | BB53 (if false)
BB51   <- [50]
  fs              %51.0 = FrameState         R     0x55abb4810380+1075: [%50.0, %50.2], env=e1.0
  void                    Deopt              !v    %51.0   !
BB54   <- [52]
  val?^ | miss    %54.0 = LdVar              eR    res2 !upd, e1.0
  val?            %54.1 = Force!             !v    %54.0, e1.0
  val?^ | miss    %54.2 = LdVar              eR    res2, e1.0
  val?            %54.3 = Force!             !v    %54.2, e1.0   <val?_>
  lgl$#-          %54.4 = IsType                   %54.3 isA val+   <@?>
  void                    Branch                   %54.4 -> BB71 (if true) | BB55 (if false)
BB53   <- [52]
  goto BB32
BB71   <- [54]
  val?^ | miss    %71.0 = LdVar              eR    r, e1.0
  val?            %71.1 = Force!             !v    %71.0, e1.0   <val?_>
  val?^ | miss    %71.2 = LdVar              eR    c, e1.0
  val?            %71.3 = Force!             !v    %71.2, e1.0   <val?_>
  goto BB56
BB55   <- [54]
  prom-           %55.0 = MkArg                    unboundValue, rir.compile[0x55abb461e990]_p16, e1.0
  prom-           %55.1 = MkArg                    unboundValue, rir.compile[0x55abb461e990]_p17, e1.0
  goto BB56
BB56   <- [55, 71]
  val?            %56.0 = Phi                      %71.3:BB71, %55.1:BB55
  val?            %56.1 = Phi                      %71.1:BB71, %55.0:BB55
  val?            %56.2 = Extract1_2D        !v    %54.3, %56.1, %56.0, e1.0   <val?_>
  val?^ | miss    %56.3 = LdVar              eR    x, e1.0
  val?            %56.4 = Force!             !v    %56.3, e1.0   <val?_>
  lgl$#-          %56.5 = IsType                   %56.4 isA val+   <@?>
  void                    Branch                   %56.5 -> BB70 (if true) | BB57 (if false)
BB70   <- [56]
  val?^ | miss    %70.0 = LdVar              eR    r, e1.0
  val?            %70.1 = Force!             !v    %70.0, e1.0   <val?_>
  val?^ | miss    %70.2 = LdVar              eR    i, e1.0
  val?            %70.3 = Force!             !v    %70.2, e1.0   <val?_>
  goto BB58
BB57   <- [56]
  prom-           %57.0 = MkArg                    unboundValue, rir.compile[0x55abb461e990]_p14, e1.0
  prom-           %57.1 = MkArg                    unboundValue, rir.compile[0x55abb461e990]_p15, e1.0
  goto BB58
BB58   <- [57, 70]
  val?            %58.0 = Phi                      %70.3:BB70, %57.1:BB57
  val?            %58.1 = Phi                      %70.1:BB70, %57.0:BB57
  val?            %58.2 = Extract1_2D        !v    %56.4, %58.1, %58.0, e1.0   <val?_>
  val?^ | miss    %58.3 = LdVar              eR    y, e1.0
  val?            %58.4 = Force!             !v    %58.3, e1.0   <val?_>
  lgl$#-          %58.5 = IsType                   %58.4 isA val+   <@?>
  void                    Branch                   %58.5 -> BB69 (if true) | BB59 (if false)
BB69   <- [58]
  val?^ | miss    %69.0 = LdVar              eR    i, e1.0
  val?            %69.1 = Force!             !v    %69.0, e1.0   <val?_>
  val?^ | miss    %69.2 = LdVar              eR    c, e1.0
  val?            %69.3 = Force!             !v    %69.2, e1.0   <val?_>
  goto BB60
BB59   <- [58]
  prom-           %59.0 = MkArg                    unboundValue, rir.compile[0x55abb461e990]_p12, e1.0
  prom-           %59.1 = MkArg                    unboundValue, rir.compile[0x55abb461e990]_p13, e1.0
  goto BB60
BB60   <- [59, 69]
  val?            %60.0 = Phi                      %69.3:BB69, %59.1:BB59
  val?            %60.1 = Phi                      %69.1:BB69, %59.0:BB59
  val?            %60.2 = Extract1_2D        !v    %58.4, %60.1, %60.0, e1.0   <val?_>
  lgl$#-          %60.3 = IsType                   %60.2 isA val?+
  cp              %60.4 = Checkpoint                -> BB62 (default) | BB61 (if assume failed)
BB62   <- [60]
  lgl$#-          %62.0 = IsType                   %58.2 isA val?+
  void                    Assume             D     %62.0, %60.4 (Typecheck@0x55abb3b0fc48[Type#71])
  val?+           %62.2 = CastType           d     dn %58.2   <val?_>
  void                    Assume             D     %60.3, %60.4 (Typecheck@0x55abb3b0fc48[Type#77])
  val?+           %62.4 = CastType           d     dn %60.2   <val?_>
  (int|real|complex)+ %62.5 = Mul                wed   %62.2, %62.4, elided   <val?_>
  cp              %62.6 = Checkpoint                -> BB64 (default) | BB63 (if assume failed)
BB61   <- [60]
  fs              %61.0 = FrameState         R     0x55abb4810380+1352: [%56.2, %58.2, %60.2], env=e1.0
  void                    Deopt              !v    %61.0   !
BB64   <- [62]
  lgl$#-          %64.0 = IsType                   %56.2 isA val?+
  void                    Assume             D     %64.0, %62.6 (Typecheck@0x55abb3b0fc48[Type#65])
  val?+           %64.2 = CastType           d     dn %56.2   <val?_>
  (int|real|complex)+ %64.3 = Add                wed   %64.2, %62.5, elided   <val?_>
  val?^ | miss    %64.4 = LdVar              eR    res2 !upd, e1.0
  val?            %64.5 = Force!             !v    %64.4, e1.0   <val?_>
  val?^ | miss    %64.6 = LdVar              eR    r, e1.0
  val?            %64.7 = Force!             !v    %64.6, e1.0   <val?_>
  val?^ | miss    %64.8 = LdVar              eR    c, e1.0
  val?            %64.9 = Force!             !v    %64.8, e1.0   <val?_>
  lgl$#-          %64.10 = IsType                   %64.9 isA val?+
  lgl$#-          %64.11 = IsType                   %64.5 isA val?+
  lgl$#-          %64.12 = IsType                   %64.7 isA val?+
  cp              %64.13 = Checkpoint                -> BB66 (default) | BB65 (if assume failed)
BB63   <- [62]
  fs              %63.0 = FrameState         R     0x55abb4810380+1359: [%56.2, %62.5], env=e1.0
  void                    Deopt              !v    %63.0   !
BB66   <- [64]
  void                    Assume             D     %64.11, %64.13 (Typecheck@0x55abb3b0fc48[Type#80])
  val?+           %66.1 = CastType           d     dn %64.5   <val?_>
  void                    Assume             D     %64.12, %64.13 (Typecheck@0x55abb3b0fc48[Type#81])
  val?+           %66.3 = CastType           d     dn %64.7   <val?_>
  void                    Assume             D     %64.10, %64.13 (Typecheck@0x55abb3b0fc48[Type#82])
  val?+           %66.5 = CastType           d     dn %64.9   <val?_>
  val?+           %66.6 = Subassign1_2D      wed   %64.3, %66.1, %66.3, %66.5, elided
  void                    StVar              lW    res2, %66.6, e1.0
  val?^ | miss    %66.8 = LdVar              eR    i, e1.0
  val?            %66.9 = Force!             !v    %66.8, e1.0   <val?_>
  lgl$#-          %66.10 = IsType                   %66.9 isA val?+
  cp              %66.11 = Checkpoint                -> BB68 (default) | BB67 (if assume failed)
BB65   <- [64]
  fs              %65.0 = FrameState         R     0x55abb4810380+1407: [%64.3, %64.5, %64.7, %64.9], env=e1.0
  void                    Deopt              !v    %65.0   !
BB68   <- [66]
  void                    Assume             D     %66.10, %66.11 (Typecheck@0x55abb3b0fc48[Type#83])
  val?+           %68.1 = CastType           d     dn %66.9   <val?_>
  (real|complex)+ %68.2 = Add                wed   %68.1, 1, elided   <val?_>
  void                    StVar              lW    i, %68.2, e1.0
  goto BB50
BB67   <- [66]
  fs              %67.0 = FrameState         R     0x55abb4810380+1431: [%66.9], env=e1.0
  void                    Deopt              !v    %67.0   !
Prom 0:
BB0
  goto BB1
BB1   <- [0]
  int-            %1.0  = Colon              vd    1L, 6L, elided   <val?_>
  void                    Return             l     %1.0
Prom 1:
BB0
  goto BB1
BB1   <- [0]
  int-            %1.0  = Colon              vd    1L, 12L, elided   <val?_>
  void                    Return             l     %1.0
Prom 2:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     ncol, e1.0
  prom-           %1.2  = MkArg                    unboundValue, rir.compile[0x55abb461e990]_p3, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <val?_>
  (cls|spec|blt)  %1.4  = LdFun              !     nrow, e1.0
  prom-           %1.5  = MkArg                    unboundValue, rir.compile[0x55abb461e990]_p4, e1.0
  val?            %1.6  = Call               !     %1.4(%1.5) e1.0   <val?_>
  val?            %1.7  = Eq                 !     %1.3, %1.6, e1.0   <val?_>
  void                    Return             l     %1.7
Prom 3:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    x, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 4:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    y, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 5:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    x, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 6:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    y, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 7:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    x, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 10:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    rows, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 11:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    cols, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 12:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    i, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 13:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    c, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 14:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    r, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 15:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    i, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 16:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    r, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 17:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    c, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 18:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    i, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 19:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    c, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 20:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    r, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 21:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    i, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 22:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    r, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 23:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    c, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3

│ rir.compile[0x55abb461e990]                                                  │
└──────────────────────────────────────────────────────────────────────────────┘
