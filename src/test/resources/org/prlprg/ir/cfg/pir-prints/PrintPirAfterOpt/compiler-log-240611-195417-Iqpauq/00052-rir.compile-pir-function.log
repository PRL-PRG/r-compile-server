
┌──────────────────────────────────────────────────────────────────────────────┐
│ rir.compile[0x55abb4681640]                                                  │
│ Context: CorrOrd,!TMany                                                      │
│ Properties:  Eager                                                           │
├────── PIR Version After Optimizations
rir.compile[0x55abb4681640]
BB0
  goto BB1
BB1   <- [0]
  int-            %1.0  = Colon              d     1L, 10L, elided   <val?_>
  int-            %1.1  = Colon              d     1L, 10L, elided   <val?_>
  int$-           %1.2  = Extract1_1D        wed   %1.0, 1, elided   <val?_>
  int$-           %1.3  = Extract1_1D        wed   %1.0, 10, elided   <val?_>
  int$-           %1.4  = Add                d     %1.2, %1.3, elided   <val?_>
  int-            %1.5  = Subassign1_1D      wed   %1.4, %1.1, 1, elided
  env             e1.6  = MkEnv              l     i=1, x=%1.0, y=%1.5, p=1, parent=R_GlobalEnv, context 1
  goto BB2
BB2   <- [14, 1]
  val?^ | miss    %2.0  = LdVar              eR    i, e1.6
  val?            %2.1  = Force!             !v    %2.0, e1.6   <val?_>
  lgl$#-          %2.2  = IsType                   %2.1 isA val?+
  cp              %2.3  = Checkpoint                -> BB3 (default) | BB18 (if assume failed)
BB3   <- [2]
  void                    Assume             D     %2.2, %2.3 (Typecheck@0x55abb3ad10d8[Type#18])
  val?+           %3.1  = CastType           d     dn %2.1   <val?_>
  (real|complex)+ %3.2  = Add                wed   %3.1, 1, elided   <val?_>
  void                    StVar              lW    i, %3.2, e1.6
  val?^ | miss    %3.4  = LdVar              eR    x, e1.6
  val?            %3.5  = Force!             !v    %3.4, e1.6   <val?_>
  lgl$#-          %3.6  = IsType                   %3.5 isA val+   <@?>
  void                    Branch                   %3.6 -> BB17 (if true) | BB4 (if false)
BB18   <- [2]
  fs              %18.0 = FrameState         R     0x55abb46b33a0+374: [%2.1], env=e1.6
  void                    Deopt              !v    %18.0   !
BB17   <- [3]
  val?^ | miss    %17.0 = LdVar              eR    i, e1.6
  val?            %17.1 = Force!             !v    %17.0, e1.6   <val?_>
  goto BB5
BB4   <- [3]
  prom-           %4.0  = MkArg                    unboundValue, rir.compile[0x55abb4681640]_p1, e1.6
  goto BB5
BB5   <- [4, 17]
  val?            %5.0  = Phi                      %17.1:BB17, %4.0:BB4
  val?            %5.1  = Extract1_1D        !v    %3.5, %5.0, e1.6   <val?_>
  val?^ | miss    %5.2  = LdVar              eR    x, e1.6
  val?            %5.3  = Force!             !v    %5.2, e1.6   <val?_>
  lgl$#-          %5.4  = IsType                   %5.3 isA val+   <@?>
  void                    Branch                   %5.4 -> BB16 (if true) | BB6 (if false)
BB16   <- [5]
  val?^ | miss    %16.0 = LdVar              eR    p, e1.6
  val?            %16.1 = Force!             !v    %16.0, e1.6   <val?_>
  goto BB7
BB6   <- [5]
  prom-           %6.0  = MkArg                    unboundValue, rir.compile[0x55abb4681640]_p0, e1.6
  goto BB7
BB7   <- [6, 16]
  val?            %7.0  = Phi                      %16.1:BB16, %6.0:BB6
  val?            %7.1  = Extract1_1D        !v    %5.3, %7.0, e1.6   <val?_>
  lgl$#-          %7.2  = IsType                   %7.1 isA val?+
  cp              %7.3  = Checkpoint                -> BB9 (default) | BB8 (if assume failed)
BB9   <- [7]
  lgl$#-          %9.0  = IsType                   %5.1 isA val?+
  void                    Assume             D     %9.0, %7.3 (Typecheck@0x55abb3ad10d8[Type#23])
  val?+           %9.2  = CastType           d     dn %5.1   <val?_>
  void                    Assume             D     %7.2, %7.3 (Typecheck@0x55abb3ad10d8[Type#27])
  val?+           %9.4  = CastType           d     dn %7.1   <val?_>
  (int|real|complex)+ %9.5  = Add                wed   %9.2, %9.4, elided   <val?_>
  val?^ | miss    %9.6  = LdVar              eR    y !upd, e1.6
  val?            %9.7  = Force!             !v    %9.6, e1.6   <val?_>
  val?^ | miss    %9.8  = LdVar              eR    i, e1.6
  val?            %9.9  = Force!             !v    %9.8, e1.6   <val?_>
  lgl$#-          %9.10 = IsType                   %9.9 isA val?+
  lgl$#-          %9.11 = IsType                   %9.7 isA val?+
  cp              %9.12 = Checkpoint                -> BB11 (default) | BB10 (if assume failed)
BB8   <- [7]
  fs              %8.0  = FrameState         R     0x55abb46b33a0+526: [%5.1, %7.1], env=e1.6
  void                    Deopt              !v    %8.0   !
BB11   <- [9]
  void                    Assume             D     %9.11, %9.12 (Typecheck@0x55abb3ad10d8[Type#29])
  val?+           %11.1 = CastType           d     dn %9.7   <val?_>
  void                    Assume             D     %9.10, %9.12 (Typecheck@0x55abb3ad10d8[Type#30])
  val?+           %11.3 = CastType           d     dn %9.9   <val?_>
  val?+           %11.4 = Subassign1_1D      wed   %9.5, %11.1, %11.3, elided
  void                    StVar              lW    y, %11.4, e1.6
  val?^ | miss    %11.6 = LdVar              eR    i, e1.6
  val?            %11.7 = Force!             !v    %11.6, e1.6   <val?_>
  void                    StVar              lW    p, %11.7, e1.6
  val?^ | miss    %11.9 = LdVar              eR    i, e1.6
  val?            %11.10 = Force!             !v    %11.9, e1.6   <val?_>
  lgl$#-          %11.11 = IsType                   %11.10 isA val?+
  cp              %11.12 = Checkpoint                -> BB13 (default) | BB12 (if assume failed)
BB10   <- [9]
  fs              %10.0 = FrameState         R     0x55abb46b33a0+561: [%9.5, %9.7, %9.9], env=e1.6
  void                    Deopt              !v    %10.0   !
BB13   <- [11]
  void                    Assume             D     %11.11, %11.12 (Typecheck@0x55abb3ad10d8[Type#32])
  val?+           %13.1 = CastType           d     dn %11.10   <val?_>
  lgl             %13.2 = Eq                 wed   %13.1, 10, elided   <val?_>
  lgl$#-          %13.3 = CheckTrueFalse     we    %13.2
  void                    Branch                   %13.3 -> BB15 (if true) | BB14 (if false)
BB12   <- [11]
  fs              %12.0 = FrameState         R     0x55abb46b33a0+608: [%11.10], env=e1.6
  void                    Deopt              !v    %12.0   !
BB15   <- [13]
  val?^ | miss    %15.0 = LdVar              eR    y, e1.6
  void                    Visible            v     
  val?            %15.2 = Force!             !     %15.0, e1.6   <val?_>
  void                    Return             l     %15.2
BB14   <- [13]
  goto BB2
Prom 0:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    p, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 1:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    i, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3

│ rir.compile[0x55abb4681640]                                                  │
└──────────────────────────────────────────────────────────────────────────────┘
