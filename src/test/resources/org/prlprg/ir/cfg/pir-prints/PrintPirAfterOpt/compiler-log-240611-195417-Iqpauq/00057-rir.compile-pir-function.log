
┌──────────────────────────────────────────────────────────────────────────────┐
│ rir.compile[0x55abb4986a00]                                                  │
│ Context: CorrOrd,!TMany                                                      │
│ Properties:  Eager                                                           │
├────── PIR Version After Optimizations
rir.compile[0x55abb4986a00]
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = MkEnv              l     parent=R_GlobalEnv, context 1
  (cls|spec|blt)  %1.1  = LdFun              !v    matrix, R_GlobalEnv
  prom-           %1.2  = MkArg                    unboundValue, rir.compile[0x55abb4986a00]_p0 (!refl), 
  val?            %1.3  = NamedCall          !v    %1.1(%1.2, nrow=2, ncol=3, byrow=true) e1.0   <val?_>
  void                    StVar              lW    x, %1.3, e1.0
  (cls|spec|blt)  %1.5  = LdFun              !v    matrix, e1.0
  prom-           %1.6  = MkArg                    unboundValue, rir.compile[0x55abb4986a00]_p1 (!refl), 
  val?            %1.7  = NamedCall          !v    %1.5(%1.6, nrow=3, ncol=4, byrow=true) e1.0   <val?_>
  void                    StVar              lW    y, %1.7, e1.0
  (cls|spec|blt)  %1.9  = LdFun              !v    stopifnot, e1.0
  prom-           %1.10 = MkArg                    unboundValue, rir.compile[0x55abb4986a00]_p2, e1.0
  val?            %1.11 = Call               !v    %1.9(%1.10) e1.0
  (cls|spec|blt)  %1.12 = LdFun              !v    nrow, e1.0
  prom-           %1.13 = MkArg                    unboundValue, rir.compile[0x55abb4986a00]_p5, e1.0
  val?            %1.14 = Call               !v    %1.12(%1.13) e1.0   <val?_>
  void                    StVar              lW    rows, %1.14, e1.0
  (cls|spec|blt)  %1.16 = LdFun              !v    ncol, e1.0
  prom-           %1.17 = MkArg                    unboundValue, rir.compile[0x55abb4986a00]_p6, e1.0
  val?            %1.18 = Call               !v    %1.16(%1.17) e1.0   <val?_>
  void                    StVar              lW    cols, %1.18, e1.0
  (cls|spec|blt)  %1.20 = LdFun              !v    ncol, e1.0
  prom-           %1.21 = MkArg                    unboundValue, rir.compile[0x55abb4986a00]_p7, e1.0
  val?            %1.22 = Call               !v    %1.20(%1.21) e1.0   <val?_>
  void                    StVar              lW    inner, %1.22, e1.0
  val?^ | miss    %1.24 = LdVar              eR    %*%, e1.0
  lgl$#-          %1.25 = Identical                <blt %*%>, %1.24   <@?>
  void                    Branch                   %1.25 -> BB2 (if true) | BB75 (if false)
BB2   <- [1]
  val?^ | miss    %2.0  = LdVar              eR    x, e1.0
  val?            %2.1  = Force!             !v    %2.0, e1.0   <val?_>
  val?^ | miss    %2.2  = LdVar              eR    y, e1.0
  val?            %2.3  = Force!             !v    %2.2, e1.0   <val?_>
  lgl$#-          %2.4  = IsType                   %2.3 isA val?+
  lgl$#-          %2.5  = IsType                   %2.1 isA val?+
  cp              %2.6  = Checkpoint                -> BB4 (default) | BB3 (if assume failed)
BB75   <- [1]
  val?^ | miss    %75.0 = LdVar              eR    x, e1.0
  val?            %75.1 = Force!             !v    %75.0, e1.0   <val?_>
  val?^ | miss    %75.2 = LdVar              eR    y, e1.0
  val?            %75.3 = Force!             !v    %75.2, e1.0   <val?_>
  val?            %75.4 = CallBuiltin        !v    %*%(%75.1, %75.3) e1.0
  goto BB5
BB4   <- [2]
  void                    Assume             D     %2.5, %2.6 (Typecheck@0x55abb3a90a38[Type#17])
  val?+           %4.1  = CastType           d     dn %2.1   <val?_>
  void                    Assume             D     %2.4, %2.6 (Typecheck@0x55abb3a90a38[Type#18])
  val?+           %4.3  = CastType           d     dn %2.3   <val?_>
  val+            %4.4  = CallSafeBuiltin    wed   %*%(%4.1, %4.3) 
  goto BB5
BB3   <- [2]
  fs              %3.0  = FrameState         R     0x55abb46da380+413: [<blt %*%>, %2.1, %2.3], env=e1.0
  void                    Deopt              !v    %3.0   !
BB5   <- [4, 75]
  val?            %5.0  = Phi                      %75.4:BB75, %4.4:BB4   <val?_>
  void                    StVar              lW    res1, %5.0, e1.0
  (cls|spec|blt)  %5.2  = LdFun              !v    matrix, e1.0
  prom-           %5.3  = MkArg                    unboundValue, rir.compile[0x55abb4986a00]_p10, e1.0
  prom-           %5.4  = MkArg                    unboundValue, rir.compile[0x55abb4986a00]_p11, e1.0
  val?            %5.5  = NamedCall          !v    %5.2(0, nrow=%5.3, ncol=%5.4) e1.0   <val?_>
  void                    StVar              lW    res2, %5.5, e1.0
  void                    StVar              lW    c, 1, e1.0
  goto BB6
BB6   <- [55, 5]
  void                    StVar              lW    r, 1, e1.0
  goto BB7
BB7   <- [49, 6]
  void                    StVar              lW    i, 1, e1.0
  val?^ | miss    %7.1  = LdVar              eR    res2 !upd, e1.0
  val?            %7.2  = Force!             !v    %7.1, e1.0
  val?^ | miss    %7.3  = LdVar              eR    res2, e1.0
  val?            %7.4  = Force!             !v    %7.3, e1.0   <val?_>
  lgl$#-          %7.5  = IsType                   %7.4 isA val+   <@?>
  void                    Branch                   %7.5 -> BB74 (if true) | BB8 (if false)
BB74   <- [7]
  val?^ | miss    %74.0 = LdVar              eR    r, e1.0
  val?            %74.1 = Force!             !v    %74.0, e1.0   <val?_>
  val?^ | miss    %74.2 = LdVar              eR    c, e1.0
  val?            %74.3 = Force!             !v    %74.2, e1.0   <val?_>
  goto BB9
BB8   <- [7]
  prom-           %8.0  = MkArg                    unboundValue, rir.compile[0x55abb4986a00]_p22, e1.0
  prom-           %8.1  = MkArg                    unboundValue, rir.compile[0x55abb4986a00]_p23, e1.0
  goto BB9
BB9   <- [8, 74]
  val?            %9.0  = Phi                      %74.3:BB74, %8.1:BB8
  val?            %9.1  = Phi                      %74.1:BB74, %8.0:BB8
  val?            %9.2  = Extract1_2D        !v    %7.4, %9.1, %9.0, e1.0   <val?_>
  val?^ | miss    %9.3  = LdVar              eR    x, e1.0
  val?            %9.4  = Force!             !v    %9.3, e1.0   <val?_>
  lgl$#-          %9.5  = IsType                   %9.4 isA val+   <@?>
  void                    Branch                   %9.5 -> BB73 (if true) | BB10 (if false)
BB73   <- [9]
  val?^ | miss    %73.0 = LdVar              eR    r, e1.0
  val?            %73.1 = Force!             !v    %73.0, e1.0   <val?_>
  val?^ | miss    %73.2 = LdVar              eR    i, e1.0
  val?            %73.3 = Force!             !v    %73.2, e1.0   <val?_>
  goto BB11
BB10   <- [9]
  prom-           %10.0 = MkArg                    unboundValue, rir.compile[0x55abb4986a00]_p20, e1.0
  prom-           %10.1 = MkArg                    unboundValue, rir.compile[0x55abb4986a00]_p21, e1.0
  goto BB11
BB11   <- [10, 73]
  val?            %11.0 = Phi                      %73.3:BB73, %10.1:BB10
  val?            %11.1 = Phi                      %73.1:BB73, %10.0:BB10
  val?            %11.2 = Extract1_2D        !v    %9.4, %11.1, %11.0, e1.0   <val?_>
  val?^ | miss    %11.3 = LdVar              eR    y, e1.0
  val?            %11.4 = Force!             !v    %11.3, e1.0   <val?_>
  lgl$#-          %11.5 = IsType                   %11.4 isA val+   <@?>
  void                    Branch                   %11.5 -> BB72 (if true) | BB12 (if false)
BB72   <- [11]
  val?^ | miss    %72.0 = LdVar              eR    i, e1.0
  val?            %72.1 = Force!             !v    %72.0, e1.0   <val?_>
  val?^ | miss    %72.2 = LdVar              eR    c, e1.0
  val?            %72.3 = Force!             !v    %72.2, e1.0   <val?_>
  goto BB13
BB12   <- [11]
  prom-           %12.0 = MkArg                    unboundValue, rir.compile[0x55abb4986a00]_p18, e1.0
  prom-           %12.1 = MkArg                    unboundValue, rir.compile[0x55abb4986a00]_p19, e1.0
  goto BB13
BB13   <- [12, 72]
  val?            %13.0 = Phi                      %72.3:BB72, %12.1:BB12
  val?            %13.1 = Phi                      %72.1:BB72, %12.0:BB12
  val?            %13.2 = Extract1_2D        !v    %11.4, %13.1, %13.0, e1.0   <val?_>
  lgl$#-          %13.3 = IsType                   %13.2 isA val?+
  cp              %13.4 = Checkpoint                -> BB15 (default) | BB14 (if assume failed)
BB15   <- [13]
  lgl$#-          %15.0 = IsType                   %11.2 isA val?+
  void                    Assume             D     %15.0, %13.4 (Typecheck@0x55abb3a90a38[Type#34])
  val?+           %15.2 = CastType           d     dn %11.2   <val?_>
  void                    Assume             D     %13.3, %13.4 (Typecheck@0x55abb3a90a38[Type#40])
  val?+           %15.4 = CastType           d     dn %13.2   <val?_>
  (int|real|complex)+ %15.5 = Mul                wed   %15.2, %15.4, elided   <val?_>
  cp              %15.6 = Checkpoint                -> BB17 (default) | BB16 (if assume failed)
BB14   <- [13]
  fs              %14.0 = FrameState         R     0x55abb46da380+822: [%9.2, %11.2, %13.2], env=e1.0
  void                    Deopt              !v    %14.0   !
BB17   <- [15]
  lgl$#-          %17.0 = IsType                   %9.2 isA val?+
  void                    Assume             D     %17.0, %15.6 (Typecheck@0x55abb3a90a38[Type#28])
  val?+           %17.2 = CastType           d     dn %9.2   <val?_>
  (int|real|complex)+ %17.3 = Add                wed   %17.2, %15.5, elided   <val?_>
  val?^ | miss    %17.4 = LdVar              eR    res2 !upd, e1.0
  val?            %17.5 = Force!             !v    %17.4, e1.0   <val?_>
  val?^ | miss    %17.6 = LdVar              eR    r, e1.0
  val?            %17.7 = Force!             !v    %17.6, e1.0   <val?_>
  val?^ | miss    %17.8 = LdVar              eR    c, e1.0
  val?            %17.9 = Force!             !v    %17.8, e1.0   <val?_>
  lgl$#-          %17.10 = IsType                   %17.9 isA val?+
  lgl$#-          %17.11 = IsType                   %17.5 isA val?+
  lgl$#-          %17.12 = IsType                   %17.7 isA val?+
  cp              %17.13 = Checkpoint                -> BB19 (default) | BB18 (if assume failed)
BB16   <- [15]
  fs              %16.0 = FrameState         R     0x55abb46da380+829: [%9.2, %15.5], env=e1.0
  void                    Deopt              !v    %16.0   !
BB19   <- [17]
  void                    Assume             D     %17.11, %17.13 (Typecheck@0x55abb3a90a38[Type#43])
  val?+           %19.1 = CastType           d     dn %17.5   <val?_>
  void                    Assume             D     %17.12, %17.13 (Typecheck@0x55abb3a90a38[Type#44])
  val?+           %19.3 = CastType           d     dn %17.7   <val?_>
  void                    Assume             D     %17.10, %17.13 (Typecheck@0x55abb3a90a38[Type#45])
  val?+           %19.5 = CastType           d     dn %17.9   <val?_>
  val?+           %19.6 = Subassign1_2D      wed   %17.3, %19.1, %19.3, %19.5, elided
  void                    StVar              lW    res2, %19.6, e1.0
  val?^ | miss    %19.8 = LdVar              eR    i, e1.0
  val?            %19.9 = Force!             !v    %19.8, e1.0   <val?_>
  lgl$#-          %19.10 = IsType                   %19.9 isA val?+
  cp              %19.11 = Checkpoint                -> BB21 (default) | BB20 (if assume failed)
BB18   <- [17]
  fs              %18.0 = FrameState         R     0x55abb46da380+877: [%17.3, %17.5, %17.7, %17.9], env=e1.0
  void                    Deopt              !v    %18.0   !
BB21   <- [19]
  void                    Assume             D     %19.10, %19.11 (Typecheck@0x55abb3a90a38[Type#46])
  val?+           %21.1 = CastType           d     dn %19.9   <val?_>
  (real|complex)+ %21.2 = Add                wed   %21.1, 1, elided   <val?_>
  void                    StVar              lW    i, %21.2, e1.0
  val?^ | miss    %21.4 = LdVar              eR    inner, e1.0
  val?            %21.5 = Force!             !v    %21.4, e1.0   <val?_>
  lgl$#-          %21.6 = IsType                   %21.5 isA val?+
  cp              %21.7 = Checkpoint                -> BB23 (default) | BB22 (if assume failed)
BB20   <- [19]
  fs              %20.0 = FrameState         R     0x55abb46da380+901: [%19.9], env=e1.0
  void                    Deopt              !v    %20.0   !
BB23   <- [21]
  void                    Assume             D     %21.6, %21.7 (Typecheck@0x55abb3a90a38[Type#49])
  val?+           %23.1 = CastType           d     dn %21.5   <val?_>
  lgl             %23.2 = Gt                 wed   %21.2, %23.1, elided   <val?_>
  lgl$#-          %23.3 = CheckTrueFalse     we    %23.2
  void                    Branch                   %23.3 -> BB71 (if true) | BB24 (if false)
BB22   <- [21]
  fs              %22.0 = FrameState         R     0x55abb46da380+950: [%21.2, %21.5], env=e1.0
  void                    Deopt              !v    %22.0   !
BB71   <- [23]
  goto BB44
BB24   <- [23]
  goto BB25
BB44   <- [43, 71]
  val?^ | miss    %44.0 = LdVar              eR    r, e1.0
  val?            %44.1 = Force!             !v    %44.0, e1.0   <val?_>
  lgl$#-          %44.2 = IsType                   %44.1 isA val?+
  cp              %44.3 = Checkpoint                -> BB46 (default) | BB45 (if assume failed)
BB25   <- [24, 42]
  val?^ | miss    %25.0 = LdVar              eR    res2 !upd, e1.0
  val?            %25.1 = Force!             !v    %25.0, e1.0
  val?^ | miss    %25.2 = LdVar              eR    res2, e1.0
  val?            %25.3 = Force!             !v    %25.2, e1.0   <val?_>
  lgl$#-          %25.4 = IsType                   %25.3 isA val+   <@?>
  void                    Branch                   %25.4 -> BB70 (if true) | BB26 (if false)
BB46   <- [44]
  void                    Assume             D     %44.2, %44.3 (Typecheck@0x55abb3a90a38[Type#79])
  val?+           %46.1 = CastType           d     dn %44.1   <val?_>
  (real|complex)+ %46.2 = Add                wed   %46.1, 1, elided   <val?_>
  void                    StVar              lW    r, %46.2, e1.0
  val?^ | miss    %46.4 = LdVar              eR    rows, e1.0
  val?            %46.5 = Force!             !v    %46.4, e1.0   <val?_>
  lgl$#-          %46.6 = IsType                   %46.5 isA val?+
  cp              %46.7 = Checkpoint                -> BB48 (default) | BB47 (if assume failed)
BB45   <- [44]
  fs              %45.0 = FrameState         R     0x55abb46da380+1416: [%44.1], env=e1.0
  void                    Deopt              !v    %45.0   !
BB70   <- [25]
  val?^ | miss    %70.0 = LdVar              eR    r, e1.0
  val?            %70.1 = Force!             !v    %70.0, e1.0   <val?_>
  val?^ | miss    %70.2 = LdVar              eR    c, e1.0
  val?            %70.3 = Force!             !v    %70.2, e1.0   <val?_>
  goto BB27
BB26   <- [25]
  prom-           %26.0 = MkArg                    unboundValue, rir.compile[0x55abb4986a00]_p16, e1.0
  prom-           %26.1 = MkArg                    unboundValue, rir.compile[0x55abb4986a00]_p17, e1.0
  goto BB27
BB48   <- [46]
  void                    Assume             D     %46.6, %46.7 (Typecheck@0x55abb3a90a38[Type#82])
  val?+           %48.1 = CastType           d     dn %46.5   <val?_>
  lgl             %48.2 = Gt                 wed   %46.2, %48.1, elided   <val?_>
  lgl$#-          %48.3 = CheckTrueFalse     we    %48.2
  void                    Branch                   %48.3 -> BB50 (if true) | BB49 (if false)
BB47   <- [46]
  fs              %47.0 = FrameState         R     0x55abb46da380+1465: [%46.2, %46.5], env=e1.0
  void                    Deopt              !v    %47.0   !
BB27   <- [26, 70]
  val?            %27.0 = Phi                      %70.3:BB70, %26.1:BB26
  val?            %27.1 = Phi                      %70.1:BB70, %26.0:BB26
  val?            %27.2 = Extract1_2D        !v    %25.3, %27.1, %27.0, e1.0   <val?_>
  val?^ | miss    %27.3 = LdVar              eR    x, e1.0
  val?            %27.4 = Force!             !v    %27.3, e1.0   <val?_>
  lgl$#-          %27.5 = IsType                   %27.4 isA val+   <@?>
  void                    Branch                   %27.5 -> BB69 (if true) | BB28 (if false)
BB50   <- [48]
  val?^ | miss    %50.0 = LdVar              eR    c, e1.0
  val?            %50.1 = Force!             !v    %50.0, e1.0   <val?_>
  lgl$#-          %50.2 = IsType                   %50.1 isA val?+
  cp              %50.3 = Checkpoint                -> BB52 (default) | BB51 (if assume failed)
BB49   <- [48]
  goto BB7
BB69   <- [27]
  val?^ | miss    %69.0 = LdVar              eR    r, e1.0
  val?            %69.1 = Force!             !v    %69.0, e1.0   <val?_>
  val?^ | miss    %69.2 = LdVar              eR    i, e1.0
  val?            %69.3 = Force!             !v    %69.2, e1.0   <val?_>
  goto BB29
BB28   <- [27]
  prom-           %28.0 = MkArg                    unboundValue, rir.compile[0x55abb4986a00]_p14, e1.0
  prom-           %28.1 = MkArg                    unboundValue, rir.compile[0x55abb4986a00]_p15, e1.0
  goto BB29
BB52   <- [50]
  void                    Assume             D     %50.2, %50.3 (Typecheck@0x55abb3a90a38[Type#84])
  val?+           %52.1 = CastType           d     dn %50.1   <val?_>
  (real|complex)+ %52.2 = Add                wed   %52.1, 1, elided   <val?_>
  void                    StVar              lW    c, %52.2, e1.0
  val?^ | miss    %52.4 = LdVar              eR    cols, e1.0
  val?            %52.5 = Force!             !v    %52.4, e1.0   <val?_>
  lgl$#-          %52.6 = IsType                   %52.5 isA val?+
  cp              %52.7 = Checkpoint                -> BB54 (default) | BB53 (if assume failed)
BB51   <- [50]
  fs              %51.0 = FrameState         R     0x55abb46da380+1511: [%50.1], env=e1.0
  void                    Deopt              !v    %51.0   !
BB29   <- [28, 69]
  val?            %29.0 = Phi                      %69.3:BB69, %28.1:BB28
  val?            %29.1 = Phi                      %69.1:BB69, %28.0:BB28
  val?            %29.2 = Extract1_2D        !v    %27.4, %29.1, %29.0, e1.0   <val?_>
  val?^ | miss    %29.3 = LdVar              eR    y, e1.0
  val?            %29.4 = Force!             !v    %29.3, e1.0   <val?_>
  lgl$#-          %29.5 = IsType                   %29.4 isA val+   <@?>
  void                    Branch                   %29.5 -> BB68 (if true) | BB30 (if false)
BB54   <- [52]
  void                    Assume             D     %52.6, %52.7 (Typecheck@0x55abb3a90a38[Type#87])
  val?+           %54.1 = CastType           d     dn %52.5   <val?_>
  lgl             %54.2 = Gt                 wed   %52.2, %54.1, elided   <val?_>
  lgl$#-          %54.3 = CheckTrueFalse     we    %54.2
  void                    Branch                   %54.3 -> BB56 (if true) | BB55 (if false)
BB53   <- [52]
  fs              %53.0 = FrameState         R     0x55abb46da380+1560: [%52.2, %52.5], env=e1.0
  void                    Deopt              !v    %53.0   !
BB68   <- [29]
  val?^ | miss    %68.0 = LdVar              eR    i, e1.0
  val?            %68.1 = Force!             !v    %68.0, e1.0   <val?_>
  val?^ | miss    %68.2 = LdVar              eR    c, e1.0
  val?            %68.3 = Force!             !v    %68.2, e1.0   <val?_>
  goto BB31
BB30   <- [29]
  prom-           %30.0 = MkArg                    unboundValue, rir.compile[0x55abb4986a00]_p12, e1.0
  prom-           %30.1 = MkArg                    unboundValue, rir.compile[0x55abb4986a00]_p13, e1.0
  goto BB31
BB56   <- [54]
  goto BB57
BB55   <- [54]
  goto BB6
BB31   <- [30, 68]
  val?            %31.0 = Phi                      %68.3:BB68, %30.1:BB30
  val?            %31.1 = Phi                      %68.1:BB68, %30.0:BB30
  val?            %31.2 = Extract1_2D        !v    %29.4, %31.1, %31.0, e1.0   <val?_>
  lgl$#-          %31.3 = IsType                   %31.2 isA val?+
  cp              %31.4 = Checkpoint                -> BB33 (default) | BB32 (if assume failed)
BB57   <- [61, 56]
  real$#-         %57.0 = Phi                      0:BB56, %58.5:BB61   <val?_>
  real$#-         %57.1 = Phi                      1:BB56, %60.0:BB61   <val?_>
  real$#-         %57.2 = Mul                d     %57.1, 10, elided   <val?_>
  void                    StVar              lW    x2, %57.2, e1.0
  real$#-         %57.4 = Add                d     %57.0, %57.2, elided   <val?_>
  real$#-         %57.5 = Add                d     %57.4, 3, elided   <val?_>
  goto BB58
BB33   <- [31]
  lgl$#-          %33.0 = IsType                   %29.2 isA val?+
  void                    Assume             D     %33.0, %31.4 (Typecheck@0x55abb3a90a38[Type#62])
  val?+           %33.2 = CastType           d     dn %29.2   <val?_>
  void                    Assume             D     %31.3, %31.4 (Typecheck@0x55abb3a90a38[Type#68])
  val?+           %33.4 = CastType           d     dn %31.2   <val?_>
  (int|real|complex)+ %33.5 = Mul                wed   %33.2, %33.4, elided   <val?_>
  cp              %33.6 = Checkpoint                -> BB35 (default) | BB34 (if assume failed)
BB32   <- [31]
  fs              %32.0 = FrameState         R     0x55abb46da380+1242: [%27.2, %29.2, %31.2], env=e1.0
  void                    Deopt              !v    %32.0   !
BB58   <- [59, 57]
  real$#-         %58.0 = Phi                      2:BB57, %58.7:BB59   <val?_>
  real$#-         %58.1 = Phi                      %57.5:BB57, %58.5:BB59   <val?_>
  real$#-         %58.2 = Add                d     %58.0, 2, elided   <val?_>
  void                    StVar              lW    y2, %58.2, e1.0
  real$#-         %58.4 = Add                d     %58.1, %57.2, elided   <val?_>
  real$#-         %58.5 = Add                d     %58.4, %58.2, elided   <val?_>
  void                    StVar              lW    last, %58.5, e1.0
  real$#-         %58.7 = Add                d     %58.0, 1, elided   <val?_>
  void                    StVar              lW    j, %58.7, e1.0
  lgl$#-          %58.9 = Gt                 d     %58.7, 10, elided   <val?_>
  void                    Branch                   %58.9 -> BB60 (if true) | BB59 (if false)
BB35   <- [33]
  lgl$#-          %35.0 = IsType                   %27.2 isA val?+
  void                    Assume             D     %35.0, %33.6 (Typecheck@0x55abb3a90a38[Type#56])
  val?+           %35.2 = CastType           d     dn %27.2   <val?_>
  (int|real|complex)+ %35.3 = Add                wed   %35.2, %33.5, elided   <val?_>
  val?^ | miss    %35.4 = LdVar              eR    res2 !upd, e1.0
  val?            %35.5 = Force!             !v    %35.4, e1.0   <val?_>
  val?^ | miss    %35.6 = LdVar              eR    r, e1.0
  val?            %35.7 = Force!             !v    %35.6, e1.0   <val?_>
  val?^ | miss    %35.8 = LdVar              eR    c, e1.0
  val?            %35.9 = Force!             !v    %35.8, e1.0   <val?_>
  lgl$#-          %35.10 = IsType                   %35.9 isA val?+
  lgl$#-          %35.11 = IsType                   %35.5 isA val?+
  lgl$#-          %35.12 = IsType                   %35.7 isA val?+
  cp              %35.13 = Checkpoint                -> BB37 (default) | BB36 (if assume failed)
BB34   <- [33]
  fs              %34.0 = FrameState         R     0x55abb46da380+1249: [%27.2, %33.5], env=e1.0
  void                    Deopt              !v    %34.0   !
BB60   <- [58]
  real$#-         %60.0 = Add                d     %57.1, 1, elided   <val?_>
  void                    StVar              lW    i, %60.0, e1.0
  lgl$#-          %60.2 = Gt                 d     %60.0, 10, elided   <val?_>
  void                    Branch                   %60.2 -> BB62 (if true) | BB61 (if false)
BB59   <- [58]
  goto BB58
BB37   <- [35]
  void                    Assume             D     %35.11, %35.13 (Typecheck@0x55abb3a90a38[Type#71])
  val?+           %37.1 = CastType           d     dn %35.5   <val?_>
  void                    Assume             D     %35.12, %35.13 (Typecheck@0x55abb3a90a38[Type#72])
  val?+           %37.3 = CastType           d     dn %35.7   <val?_>
  void                    Assume             D     %35.10, %35.13 (Typecheck@0x55abb3a90a38[Type#73])
  val?+           %37.5 = CastType           d     dn %35.9   <val?_>
  val?+           %37.6 = Subassign1_2D      wed   %35.3, %37.1, %37.3, %37.5, elided
  void                    StVar              lW    res2, %37.6, e1.0
  val?^ | miss    %37.8 = LdVar              eR    i, e1.0
  val?            %37.9 = Force!             !v    %37.8, e1.0   <val?_>
  lgl$#-          %37.10 = IsType                   %37.9 isA val?+
  cp              %37.11 = Checkpoint                -> BB39 (default) | BB38 (if assume failed)
BB36   <- [35]
  fs              %36.0 = FrameState         R     0x55abb46da380+1297: [%35.3, %35.5, %35.7, %35.9], env=e1.0
  void                    Deopt              !v    %36.0   !
BB62   <- [60]
  void                    Visible            v     
  lgl$#-          %62.1 = Eq                 vd    %58.5, 6250, elided   <val?_>
  void                    Branch                   %62.1 -> BB65 (if true) | BB63 (if false)
BB61   <- [60]
  goto BB57
BB39   <- [37]
  void                    Assume             D     %37.10, %37.11 (Typecheck@0x55abb3a90a38[Type#74])
  val?+           %39.1 = CastType           d     dn %37.9   <val?_>
  (real|complex)+ %39.2 = Add                wed   %39.1, 1, elided   <val?_>
  void                    StVar              lW    i, %39.2, e1.0
  val?^ | miss    %39.4 = LdVar              eR    inner, e1.0
  val?            %39.5 = Force!             !v    %39.4, e1.0   <val?_>
  lgl$#-          %39.6 = IsType                   %39.5 isA val?+
  cp              %39.7 = Checkpoint                -> BB41 (default) | BB40 (if assume failed)
BB38   <- [37]
  fs              %38.0 = FrameState         R     0x55abb46da380+1321: [%37.9], env=e1.0
  void                    Deopt              !v    %38.0   !
BB65   <- [62]
  val?^ | miss    %65.0 = LdVar              eR    res1, e1.0
  val?            %65.1 = Force!             !v    %65.0, e1.0   <val?_>
  val?^ | miss    %65.2 = LdVar              eR    res2, e1.0
  void                    Visible            v     
  val?            %65.4 = Force!             !     %65.2, e1.0   <val?_>
  lgl$#-          %65.5 = IsType                   %65.4 isA val?+
  lgl$#-          %65.6 = IsType                   %65.1 isA val?+
  cp              %65.7 = Checkpoint                -> BB67 (default) | BB66 (if assume failed)
BB63   <- [62]
  goto BB64
BB41   <- [39]
  void                    Assume             D     %39.6, %39.7 (Typecheck@0x55abb3a90a38[Type#77])
  val?+           %41.1 = CastType           d     dn %39.5   <val?_>
  lgl             %41.2 = Gt                 wed   %39.2, %41.1, elided   <val?_>
  lgl$#-          %41.3 = CheckTrueFalse     we    %41.2
  void                    Branch                   %41.3 -> BB43 (if true) | BB42 (if false)
BB40   <- [39]
  fs              %40.0 = FrameState         R     0x55abb46da380+1370: [%39.2, %39.5], env=e1.0
  void                    Deopt              !v    %40.0   !
BB67   <- [65]
  void                    Assume             D     %65.6, %65.7 (Typecheck@0x55abb3a90a38[Type#119])
  val?+           %67.1 = CastType           d     dn %65.1   <val?_>
  void                    Assume             D     %65.5, %65.7 (Typecheck@0x55abb3a90a38[Type#120])
  val?+           %67.3 = CastType           d     dn %65.4   <val?_>
  lgl             %67.4 = Eq                 vwed  %67.1, %67.3, elided   <val?_>
  lgl$-           %67.5 = AsLogical          e     %67.4
  lgl$-           %67.6 = LAnd                     %62.1, %67.5
  goto BB64
BB66   <- [65]
  fs              %66.0 = FrameState         R     0x55abb46da380+2185: [%62.1, %65.1, %65.4], env=e1.0
  void                    Deopt              !v    %66.0   !
BB64   <- [63, 67]
  lgl$-           %64.0 = Phi                      %67.6:BB67, %62.1:BB63
  void                    Return             l     %64.0
BB43   <- [41]
  goto BB44
BB42   <- [41]
  goto BB25
Prom 0:
BB0
  goto BB1
BB1   <- [0]
  int-            %1.0  = Colon              vd    1L, 6L, elided   <val?_>
  void                    Return             l     %1.0
Prom 1:
BB0
  goto BB1
BB1   <- [0]
  int-            %1.0  = Colon              vd    1L, 12L, elided   <val?_>
  void                    Return             l     %1.0
Prom 2:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     ncol, e1.0
  prom-           %1.2  = MkArg                    unboundValue, rir.compile[0x55abb4986a00]_p3, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <val?_>
  (cls|spec|blt)  %1.4  = LdFun              !     nrow, e1.0
  prom-           %1.5  = MkArg                    unboundValue, rir.compile[0x55abb4986a00]_p4, e1.0
  val?            %1.6  = Call               !     %1.4(%1.5) e1.0   <val?_>
  val?            %1.7  = Eq                 !     %1.3, %1.6, e1.0   <val?_>
  void                    Return             l     %1.7
Prom 3:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    x, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 4:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    y, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 5:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    x, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 6:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    y, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 7:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    x, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 10:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    rows, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 11:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    cols, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 12:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    i, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 13:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    c, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 14:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    r, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 15:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    i, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 16:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    r, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 17:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    c, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 18:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    i, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 19:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    c, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 20:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    r, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 21:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    i, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 22:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    r, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 23:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    c, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3

│ rir.compile[0x55abb4986a00]                                                  │
└──────────────────────────────────────────────────────────────────────────────┘
