
┌──────────────────────────────────────────────────────────────────────────────┐
│ tryCatch[0x562e91f368d0]                                                     │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;Eager1,NonRefl1,!Obj1 miss: 1        │
│ Properties:                                                                  │
├────── PIR Version After Optimizations
tryCatch[0x562e91f368d0]
BB0
  goto BB1
BB1   <- [0]
  dots+           %1.0  = LdArg                    1
  val?^           %1.1  = LdArg                    0
  env             e1.2  = MkEnv              l     expr=%1.1, ...=%1.0, finally(miss)=missingArg, parent=R_BaseNamespace, context 1
  cls             %1.3  = MkCls                    tryCatchList, e1.2
  cls             %1.4  = MkCls                    tryCatchOne, e1.2
  *dots-          %1.5  = ExpandDots               %1.0
  void                    StVar              lW    tryCatchList, %1.3, e1.2
  void                    StVar              lW    tryCatchOne, %1.4, e1.2
  val?            %1.8  = NamedCall          !v    <blt list>(.xpandDotsTrigger=%1.5) e1.2   <vec+>
  void                    StVar              lW    handlers, %1.8, e1.2
  lgl$#-          %1.10 = IsType                   %1.8 isA val?+
  cp              %1.11 = Checkpoint                -> BB2 (default) | BB25 (if assume failed)
BB2   <- [1]
  val?^ | miss    %2.0  = LdVar              eR    names, e1.2
  lgl$#-          %2.1  = Identical                <blt names>, %2.0   <true>
  void                    Assume             D     %2.1, %1.11 (DeadBranchReached@0x562e91cd30b0[Test#0])
  val             %2.3  = ChkMissing         e     %1.8
  void                    Assume             D     %1.10, %1.11 (Typecheck@0x562e91cd30b0[Type#1])
  val?+           %2.5  = CastType           d     dn %1.8   <vec+>
  val+            %2.6  = CallSafeBuiltin    wed   names(%2.5)    <str->
  void                    StVar              lW    classes, %2.6, e1.2
  cp              %2.8  = Checkpoint                -> BB4 (default) | BB3 (if assume failed)
BB25   <- [1]
  fs              %25.0 = FrameState         R     0x562e91cdfde0+151: [], env=e1.2
  void                    Deopt              !v    %25.0   !
BB4   <- [2]
  val?^ | miss    %4.0  = LdVar              eR    parent.frame, e1.2
  lgl$#-          %4.1  = Identical                %4.0, function(n=1) <(rir::DispatchTable*)0x562e91d6|...
  void                    Assume             D     %4.1, %2.8 (CallTarget@0x562e91cd30b0[Call#3])
  val?            %4.3  = StaticCall         !v    parent.frame[0x562e92007cf0]() e1.2   <env->
  void                    StVar              lW    parentenv, %4.3, e1.2
  cp              %4.5  = Checkpoint                -> BB6 (default) | BB5 (if assume failed)
BB3   <- [2]
  fs              %3.0  = FrameState         R     0x562e91cdfde0+256: [], env=e1.2
  void                    Deopt              !v    %3.0   !
BB6   <- [4]
  val?^ | miss    %6.0  = LdVar              eR    length, e1.2
  lgl$#-          %6.1  = Identical                <blt length>, %6.0   <true>
  void                    Assume             D     %6.1, %4.5 (DeadBranchReached@0x562e91cd30b0[Test#1])
  val?^ | miss    %6.3  = LdVar              eR    classes, e1.2
  lgl$#-          %6.4  = IsType                   %6.3 isA val?~- | miss
  void                    Assume             D     %6.4, %4.5 (Typecheck@0x562e91cd30b0[Type#7])
  val?~- | miss   %6.6  = CastType           d     dn %6.3
  val?-           %6.7  = Force!<value>            %6.6,    <str->
  (int|real)$-    %6.8  = CallSafeBuiltin    wed   length(%6.7)    <int$->
  lgl$#-          %6.9  = IsType                   %6.8 isA int$-
  cp              %6.10 = Checkpoint                -> BB8 (default) | BB7 (if assume failed)
BB5   <- [4]
  fs              %5.0  = FrameState         R     0x562e91cdfde0+297: [], env=e1.2
  void                    Deopt              !v    %5.0   !
BB8   <- [6]
  void                    Assume             D     %6.9, %6.10 (Typecheck@0x562e91cd30b0[Type#8])
  int$-           %8.1  = CastType           d     dn %6.8
  val?^ | miss    %8.2  = LdVar              eR    handlers, e1.2
  lgl$#-          %8.3  = IsType                   %8.2 isA val?~+ | miss
  void                    Assume             D     %8.3, %6.10 (Typecheck@0x562e91cd30b0[Type#10])
  val?~+ | miss   %8.5  = CastType           d     dn %8.2
  val?+           %8.6  = Force!<value>            %8.5,    <vec+>
  (int|real)$-    %8.7  = CallSafeBuiltin    wed   length(%8.6)    <int$->
  lgl$#-          %8.8  = IsType                   %8.7 isA int$-
  cp              %8.9  = Checkpoint                -> BB10 (default) | BB9 (if assume failed)
BB7   <- [6]
  fs              %7.0  = FrameState         R     0x562e91cdfde0+388: [%6.8], env=e1.2
  void                    Deopt              !v    %7.0   !
BB10   <- [8]
  void                    Assume             D     %8.8, %8.9 (Typecheck@0x562e91cd30b0[Type#11])
  int$-           %10.1 = CastType           d     dn %8.7
  lgl$-           %10.2 = Neq                d     %8.1, %10.1, elided   <lgl$->
  lgl$#-          %10.3 = CheckTrueFalse     e     %10.2
  void                    Branch                   %10.3 -> BB24 (if true) | BB11 (if false)
BB9   <- [8]
  fs              %9.0  = FrameState         R     0x562e91cdfde0+484: [%8.1, %8.7], env=e1.2
  void                    Deopt              !v    %9.0   !
BB24   <- [10]
  (cls|spec|blt)  %24.0 = LdFun              !v    stop, e1.2
  fs              %24.1 = FrameState         R     0x562e91cdfde0+511: [%24.0], env=e1.2
  void                    Deopt              !v    %24.1, DeadCall@0x562e91cd30b0[Call#6], %24.0   !
BB11   <- [10]
  val?^ | miss    %11.0 = LdVar              eR    tryCatchList, e1.2
  lgl$#-          %11.1 = Identical                %11.0, %1.3
  void                    Assume             D     %11.1, %8.9 (CallTarget@0x562e91cd30b0[Call#7])
  prom-           %11.3 = MkArg                    unboundValue, tryCatch[0x562e91f368d0]_p0, e1.2
  prom-           %11.4 = MkArg                    unboundValue, tryCatch[0x562e91f368d0]_p1, e1.2
  prom-           %11.5 = MkArg                    unboundValue, tryCatch[0x562e91f368d0]_p2 (!refl), e1.2
  prom-           %11.6 = MkArg                    unboundValue, tryCatch[0x562e91f368d0]_p3, e1.2
  ct              %11.7 = PushContext        lCL   %11.3, %11.4, %11.5, %11.6, tryCatchList(expr, classes, parentenv, handlers), %1.3, e1.2
  val?^           %11.8 = CastType                 up %11.6
  val?^           %11.9 = CastType                 up %11.5
  val?^           %11.10 = CastType                 up %11.4
  val?^           %11.11 = CastType                 up %11.3
  env             e11.12 = MkEnv              l     expr=%11.11, names=%11.10, parentenv=%11.9, handlers=%11.8, parent=e1.2, context 1
  val?            %11.13 = Force!<lazy>       !vL   %11.10, e11.12   <str->
  lgl$#-          %11.14 = IsType                   %11.13 isA val?-
  cp              %11.15 = Checkpoint                -> BB13 (default) | BB12 (if assume failed)
BB13   <- [11]
  void                    Assume             D     %11.14, %11.15 (Typecheck@0x562e91cc0440[Type#1])
  val?-           %13.1 = CastType           d     dn %11.13   <str->
  (int|real)$-    %13.2 = CallSafeBuiltin    wed   length(%13.1)    <int$->
  lgl$#-          %13.3 = IsType                   %13.2 isA int$-
  cp              %13.4 = Checkpoint                -> BB15 (default) | BB14 (if assume failed)
BB12   <- [11]
  fs              %12.0 = FrameState         R     0x562e91cdfde0+586: [], env=e1.2
  fs              %12.1 = FrameState         R     0x562e91ce9a80+69: [<blt length>, %11.13], env=e11.12, next=%12.0
  void                    Deopt              !v    %12.1   !
BB15   <- [13]
  void                    Assume             D     %13.3, %13.4 (Typecheck@0x562e91cc0440[Type#2])
  int$-           %15.1 = CastType           d     dn %13.2
  void                    StVar              lW    nh, %15.1, e11.12
  cp              %15.3 = Checkpoint                -> BB17 (default) | BB16 (if assume failed)
BB14   <- [13]
  fs              %14.0 = FrameState         R     0x562e91cdfde0+586: [], env=e1.2
  fs              %14.1 = FrameState         R     0x562e91ce9a80+91: [%13.2], env=e11.12, next=%14.0
  void                    Deopt              !v    %14.1   !
BB17   <- [15]
  void                    Visible            v     
  lgl$-           %17.1 = Gt                 vd    %15.1, 1L, elided   <lgl$->
  lgl$#-          %17.2 = CheckTrueFalse     e     %17.1
  void                    Branch                   %17.2 -> BB23 (if true) | BB18 (if false)
BB16   <- [15]
  fs              %16.0 = FrameState         R     0x562e91cdfde0+586: [], env=e1.2
  fs              %16.1 = FrameState         R     0x562e91ce9a80+105: [], env=e11.12, next=%16.0
  void                    Deopt              !v    %16.1   !
BB23   <- [17]
  val?^ | miss    %23.0 = LdVar              eR    tryCatchOne, e11.12
  (cls|spec|blt)  %23.1 = CastType                 dn %23.0
  val+            %23.2 = CallSafeBuiltin          bodyCode(%23.1) 
  lgl$#-          %23.3 = Identical                %23.2, <(rir::DispatchTable*)0x562e90f50400>
  void                    Assume             D     %23.3, %15.3 (CallTarget@0x562e91cc0440[Call#2])
  val?            %23.5 = Force!             d     %23.0, 
  prom-           %23.6 = MkArg                    unboundValue, tryCatch[0x562e91f368d0]_p4, e11.12
  prom-           %23.7 = MkArg                    unboundValue, tryCatch[0x562e91f368d0]_p11, e11.12
  prom-           %23.8 = MkArg                    unboundValue, tryCatch[0x562e91f368d0]_p13, e11.12
  prom-           %23.9 = MkArg                    unboundValue, tryCatch[0x562e91f368d0]_p14, e11.12
  (cls|spec|blt)  %23.10 = ChkFunction        e     %23.5
  val?            %23.11 = StaticCall         !     tryCatchOne[0x562e91f9e110](%23.6, %23.7, %23.8, %23.9) from %23.10 e11.12   <(str|vec)->
  goto BB21
BB18   <- [17]
  void                    Visible            v     
  lgl$-           %18.1 = Eq                 vd    %15.1, 1L, elided   <lgl$->
  lgl$#-          %18.2 = CheckTrueFalse     e     %18.1
  void                    Branch                   %18.2 -> BB22 (if true) | BB19 (if false)
BB21   <- [23, 20]
  val?            %21.0 = Phi                      %20.0:BB20, %23.11:BB23
  val?            %21.1 = PopContext         C     %21.0, %11.7   <(str|vec)->
  void                    Return             l     %21.1
BB22   <- [18]
  val?^ | miss    %22.0 = LdVar              eR    tryCatchOne, e11.12
  (cls|spec|blt)  %22.1 = CastType                 dn %22.0
  val+            %22.2 = CallSafeBuiltin          bodyCode(%22.1) 
  lgl$#-          %22.3 = Identical                %22.2, <(rir::DispatchTable*)0x562e90f50400>
  void                    Assume             D     %22.3, %15.3 (CallTarget@0x562e91cc0440[Call#1])
  val?            %22.5 = Force!             d     %22.0, 
  prom-           %22.6 = MkArg                    unboundValue, tryCatch[0x562e91f368d0]_p16, e11.12
  prom-           %22.7 = MkArg                    unboundValue, tryCatch[0x562e91f368d0]_p17, e11.12
  prom-           %22.8 = MkArg                    unboundValue, tryCatch[0x562e91f368d0]_p18, e11.12
  prom-           %22.9 = MkArg                    unboundValue, tryCatch[0x562e91f368d0]_p19, e11.12
  (cls|spec|blt)  %22.10 = ChkFunction        e     %22.5
  val?            %22.11 = StaticCall         !     tryCatchOne[0x562e91f9e110](%22.6, %22.7, %22.8, %22.9) from %22.10 e11.12   <(str|vec)->
  goto BB20
BB19   <- [18]
  void                    Visible            v     
  val?            %19.1 = Force!             !L    %11.11, e11.12   <val?_>
  goto BB20
BB20   <- [19, 22]
  val?            %20.0 = Phi                      %19.1:BB19, %22.11:BB22
  goto BB21
Prom 0:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    expr, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <(str|vec)->
  void                    Return             l     %1.3
Prom 1:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    classes, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str->
  void                    Return             l     %1.3
Prom 2:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    parentenv, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <env->
  void                    Return             l     %1.3
Prom 3:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    handlers, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 4:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     tryCatchList, <0x562e91d79580>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, tryCatch[0x562e91f368d0]_p5, e1.0
  prom-           %1.3  = MkArg                    unboundValue, tryCatch[0x562e91f368d0]_p6, e1.0
  prom-           %1.4  = MkArg                    unboundValue, tryCatch[0x562e91f368d0]_p8, e1.0
  prom-           %1.5  = MkArg                    unboundValue, tryCatch[0x562e91f368d0]_p9, e1.0
  val?            %1.6  = Call               !     %1.1(%1.2, %1.3, %1.4, %1.5) e1.0   <vec->
  void                    Return             l     %1.6
Prom 5:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    expr, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <vec->
  void                    Return             l     %1.3
Prom 6:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    names, e1.0
  val?            %1.2  = Force<wrapped>     !v    %1.1, e1.0   <str->
  lgl$#-          %1.3  = IsType                   %1.2 isA val+   <true>
  void                    Branch                   %1.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [1]
  val?^ | miss    %2.0  = LdVar              eR    nh, e1.0
  val?            %2.1  = Force<value>       !v    %2.0, e1.0   <int$->
  val?            %2.2  = Minus              !v    %2.1, e1.0
  goto BB3
BB4   <- [1]
  prom-           %4.0  = MkArg                    unboundValue, tryCatch[0x562e91f368d0]_p7, e1.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.2:BB2, %4.0:BB4
  val?            %3.1  = Extract1_1D        !v    %1.2, %3.0, e1.0   <str$->
  void                    Visible            v     
  void                    Return             l     %3.1
Prom 7:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    nh, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  val?            %1.4  = Minus              !     %1.3, e1.0
  void                    Return             l     %1.4
Prom 8:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    parentenv, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <env->
  void                    Return             l     %1.3
Prom 9:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    handlers, e1.0
  val?            %1.2  = Force<wrapped>     !v    %1.1, e1.0   <vec+>
  lgl$#-          %1.3  = IsType                   %1.2 isA val+   <true>
  void                    Branch                   %1.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [1]
  val?^ | miss    %2.0  = LdVar              eR    nh, e1.0
  val?            %2.1  = Force<value>       !v    %2.0, e1.0   <int$->
  val?            %2.2  = Minus              !v    %2.1, e1.0
  goto BB3
BB4   <- [1]
  prom-           %4.0  = MkArg                    unboundValue, tryCatch[0x562e91f368d0]_p10, e1.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.2:BB2, %4.0:BB4
  val?            %3.1  = Extract1_1D        !v    %1.2, %3.0, e1.0   <vec$+>
  void                    Visible            v     
  void                    Return             l     %3.1
Prom 10:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    nh, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  val?            %1.4  = Minus              !     %1.3, e1.0
  void                    Return             l     %1.4
Prom 11:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    names, e1.0
  val?            %1.2  = Force<wrapped>     !v    %1.1, e1.0   <str->
  lgl$#-          %1.3  = IsType                   %1.2 isA val+   <true>
  void                    Branch                   %1.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [1]
  val?^ | miss    %2.0  = LdVar              eR    nh, e1.0
  val?            %2.1  = Force<value>       !v    %2.0, e1.0   <int$->
  goto BB3
BB4   <- [1]
  prom-           %4.0  = MkArg                    unboundValue, tryCatch[0x562e91f368d0]_p12, e1.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.1:BB2, %4.0:BB4
  val?            %3.1  = Extract1_1D        !v    %1.2, %3.0, e1.0   <str$->
  void                    Visible            v     
  void                    Return             l     %3.1
Prom 12:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    nh, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 13:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    parentenv, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <env->
  void                    Return             l     %1.3
Prom 14:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    handlers, e1.0
  val?            %1.2  = Force<lazy>        !v    %1.1, e1.0   <vec+>
  lgl$#-          %1.3  = IsType                   %1.2 isA val+   <true>
  void                    Branch                   %1.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [1]
  val?^ | miss    %2.0  = LdVar              eR    nh, e1.0
  val?            %2.1  = Force<value>       !v    %2.0, e1.0   <int$->
  goto BB3
BB4   <- [1]
  prom-           %4.0  = MkArg                    unboundValue, tryCatch[0x562e91f368d0]_p15, e1.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.1:BB2, %4.0:BB4
  val?            %3.1  = Extract2_1D        !v    %1.2, %3.0, e1.0   <cls->
  void                    Visible            v     
  void                    Return             l     %3.1
Prom 15:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    nh, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 16:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    expr, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <(str|vec)->
  void                    Return             l     %1.3
Prom 17:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    names, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 18:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    parentenv, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <env->
  void                    Return             l     %1.3
Prom 19:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    handlers, e1.0
  val?            %1.2  = Force<lazy>        !v    %1.1, e1.0   <vec$+>
  val?            %1.3  = Extract2_1D        !v    %1.2, 1L, e1.0   <cls->
  void                    Visible            v     
  void                    Return             l     %1.3

│ tryCatch[0x562e91f368d0]                                                     │
└──────────────────────────────────────────────────────────────────────────────┘
