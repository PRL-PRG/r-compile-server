
┌──────────────────────────────────────────────────────────────────────────────┐
│ tryCatch[0x562e9212fa70]                                                     │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;Eager1,NonRefl1,!Obj1 miss: 1        │
│ Properties:                                                                  │
├────── PIR Version After Optimizations
tryCatch[0x562e9212fa70]
BB0
  goto BB1
BB1   <- [0]
  dots+           %1.0  = LdArg                    1
  val?^           %1.1  = LdArg                    0
  env             e1.2  = MkEnv              l     expr=%1.1, ...=%1.0, finally(miss)=missingArg, parent=R_BaseNamespace, context 1
  cls             %1.3  = MkCls                    tryCatchList, e1.2
  cls             %1.4  = MkCls                    tryCatchOne, e1.2
  *dots-          %1.5  = ExpandDots               %1.0
  void                    StVar              lW    tryCatchList, %1.3, e1.2
  void                    StVar              lW    tryCatchOne, %1.4, e1.2
  val?            %1.8  = NamedCall          !v    <blt list>(.xpandDotsTrigger=%1.5) e1.2   <vec+>
  void                    StVar              lW    handlers, %1.8, e1.2
  lgl$#-          %1.10 = IsType                   %1.8 isA val?+
  cp              %1.11 = Checkpoint                -> BB2 (default) | BB30 (if assume failed)
BB2   <- [1]
  val?^ | miss    %2.0  = LdVar              eR    names, e1.2
  lgl$#-          %2.1  = Identical                <blt names>, %2.0   <true>
  void                    Assume             D     %2.1, %1.11 (DeadBranchReached@0x562e91cd30b0[Test#0])
  val             %2.3  = ChkMissing         e     %1.8
  void                    Assume             D     %1.10, %1.11 (Typecheck@0x562e91cd30b0[Type#1])
  val?+           %2.5  = CastType           d     dn %1.8   <vec+>
  val+            %2.6  = CallSafeBuiltin    wed   names(%2.5)    <str->
  void                    StVar              lW    classes, %2.6, e1.2
  cp              %2.8  = Checkpoint                -> BB4 (default) | BB3 (if assume failed)
BB30   <- [1]
  fs              %30.0 = FrameState         R     0x562e91cdfde0+151: [], env=e1.2
  void                    Deopt              !v    %30.0   !
BB4   <- [2]
  val?^ | miss    %4.0  = LdVar              eR    parent.frame, e1.2
  lgl$#-          %4.1  = Identical                %4.0, function(n=1) <(rir::DispatchTable*)0x562e91d6|...
  void                    Assume             D     %4.1, %2.8 (CallTarget@0x562e91cd30b0[Call#3])
  val?            %4.3  = StaticCall         !v    parent.frame[0x562e923d3df0]() e1.2   <env->
  void                    StVar              lW    parentenv, %4.3, e1.2
  cp              %4.5  = Checkpoint                -> BB6 (default) | BB5 (if assume failed)
BB3   <- [2]
  fs              %3.0  = FrameState         R     0x562e91cdfde0+256: [], env=e1.2
  void                    Deopt              !v    %3.0   !
BB6   <- [4]
  val?^ | miss    %6.0  = LdVar              eR    length, e1.2
  lgl$#-          %6.1  = Identical                <blt length>, %6.0   <true>
  void                    Assume             D     %6.1, %4.5 (DeadBranchReached@0x562e91cd30b0[Test#1])
  val?^ | miss    %6.3  = LdVar              eR    classes, e1.2
  lgl$#-          %6.4  = IsType                   %6.3 isA val?~- | miss
  void                    Assume             D     %6.4, %4.5 (Typecheck@0x562e91cd30b0[Type#7])
  val?~- | miss   %6.6  = CastType           d     dn %6.3
  val?-           %6.7  = Force!<value>            %6.6,    <str->
  (int|real)$-    %6.8  = CallSafeBuiltin    wed   length(%6.7)    <int$->
  lgl$#-          %6.9  = IsType                   %6.8 isA int$-
  cp              %6.10 = Checkpoint                -> BB8 (default) | BB7 (if assume failed)
BB5   <- [4]
  fs              %5.0  = FrameState         R     0x562e91cdfde0+297: [], env=e1.2
  void                    Deopt              !v    %5.0   !
BB8   <- [6]
  void                    Assume             D     %6.9, %6.10 (Typecheck@0x562e91cd30b0[Type#8])
  int$-           %8.1  = CastType           d     dn %6.8
  val?^ | miss    %8.2  = LdVar              eR    handlers, e1.2
  lgl$#-          %8.3  = IsType                   %8.2 isA val?~+ | miss
  void                    Assume             D     %8.3, %6.10 (Typecheck@0x562e91cd30b0[Type#10])
  val?~+ | miss   %8.5  = CastType           d     dn %8.2
  val?+           %8.6  = Force!<value>            %8.5,    <vec+>
  (int|real)$-    %8.7  = CallSafeBuiltin    wed   length(%8.6)    <int$->
  lgl$#-          %8.8  = IsType                   %8.7 isA int$-
  cp              %8.9  = Checkpoint                -> BB10 (default) | BB9 (if assume failed)
BB7   <- [6]
  fs              %7.0  = FrameState         R     0x562e91cdfde0+388: [%6.8], env=e1.2
  void                    Deopt              !v    %7.0   !
BB10   <- [8]
  void                    Assume             D     %8.8, %8.9 (Typecheck@0x562e91cd30b0[Type#11])
  int$-           %10.1 = CastType           d     dn %8.7
  lgl$-           %10.2 = Neq                d     %8.1, %10.1, elided   <lgl$->
  lgl$#-          %10.3 = CheckTrueFalse     e     %10.2
  void                    Branch                   %10.3 -> BB29 (if true) | BB11 (if false)
BB9   <- [8]
  fs              %9.0  = FrameState         R     0x562e91cdfde0+484: [%8.1, %8.7], env=e1.2
  void                    Deopt              !v    %9.0   !
BB29   <- [10]
  (cls|spec|blt)  %29.0 = LdFun              !v    stop, e1.2
  val?            %29.1 = Call               !v    %29.0("condition handlers must be specified with a c|...) e1.2
  goto BB12
BB11   <- [10]
  goto BB12
BB12   <- [11, 29]
  cp              %12.0 = Checkpoint                -> BB14 (default) | BB13 (if assume failed)
BB14   <- [12]
  val?^ | miss    %14.0 = LdVar              eR    tryCatchList, e1.2
  lgl$#-          %14.1 = Identical                %14.0, %1.3
  void                    Assume             D     %14.1, %12.0 (CallTarget@0x562e91cd30b0[Call#7])
  prom-           %14.3 = MkArg                    unboundValue, tryCatch[0x562e9212fa70]_p0, e1.2
  prom-           %14.4 = MkArg                    unboundValue, tryCatch[0x562e9212fa70]_p1, e1.2
  prom-           %14.5 = MkArg                    unboundValue, tryCatch[0x562e9212fa70]_p2, e1.2
  prom-           %14.6 = MkArg                    unboundValue, tryCatch[0x562e9212fa70]_p3, e1.2
  ct              %14.7 = PushContext        lCL   %14.3, %14.4, %14.5, %14.6, tryCatchList(expr, classes, parentenv, handlers), %1.3, e1.2
  val?^           %14.8 = CastType                 up %14.6
  val?^           %14.9 = CastType                 up %14.5
  val?^           %14.10 = CastType                 up %14.4
  val?^           %14.11 = CastType                 up %14.3
  val?^ | miss    %14.12 = LdVar              eR    length, e1.2
  lgl$#-          %14.13 = Identical                <blt length>, %14.12   <true>
  cp              %14.14 = Checkpoint                -> BB16 (default) | BB15 (if assume failed)
BB13   <- [12]
  fs              %13.0 = FrameState         R     0x562e91cdfde0+539: [], env=e1.2
  void                    Deopt              !v    %13.0   !
BB16   <- [14]
  void                    Assume             D     %14.13, %14.14 (DeadBranchReached@0x562e91cc0440[Test#0])
  env             e16.1 = MkEnv              l     expr=%14.11, names=%14.10, parentenv=%14.9, handlers=%14.8, parent=e1.2, context 1
  val?            %16.2 = Force!<lazy>       !vL   %14.10, e16.1   <str->
  lgl$#-          %16.3 = IsType                   %16.2 isA val?-
  cp              %16.4 = Checkpoint                -> BB18 (default) | BB17 (if assume failed)
BB15   <- [14]
  fs              %15.0 = FrameState         R     0x562e91cdfde0+586: [], env=e1.2
  env             e15.1 = (MkEnv)            l     expr=%14.11, names=%14.10, parentenv=%14.9, handlers=%14.8, parent=e1.2, context 1
  fs              %15.2 = FrameState         R     0x562e91ce9a80+17: [<blt length>, %14.13], env=e15.1, next=%15.0
  void                    Deopt              !v    %15.2   !
BB18   <- [16]
  void                    Assume             D     %16.3, %16.4 (Typecheck@0x562e91cc0440[Type#1])
  val?-           %18.1 = CastType           d     dn %16.2   <str->
  (int|real)$-    %18.2 = CallSafeBuiltin    wed   length(%18.1)    <int$->
  lgl$#-          %18.3 = IsType                   %18.2 isA int$-
  cp              %18.4 = Checkpoint                -> BB20 (default) | BB19 (if assume failed)
BB17   <- [16]
  fs              %17.0 = FrameState         R     0x562e91cdfde0+586: [], env=e1.2
  fs              %17.1 = FrameState         R     0x562e91ce9a80+69: [<blt length>, %16.2], env=e16.1, next=%17.0
  void                    Deopt              !v    %17.1   !
BB20   <- [18]
  void                    Assume             D     %18.3, %18.4 (Typecheck@0x562e91cc0440[Type#2])
  int$-           %20.1 = CastType           d     dn %18.2
  void                    StVar              lW    nh, %20.1, e16.1
  cp              %20.3 = Checkpoint                -> BB22 (default) | BB21 (if assume failed)
BB19   <- [18]
  fs              %19.0 = FrameState         R     0x562e91cdfde0+586: [], env=e1.2
  fs              %19.1 = FrameState         R     0x562e91ce9a80+91: [%18.2], env=e16.1, next=%19.0
  void                    Deopt              !v    %19.1   !
BB22   <- [20]
  void                    Visible            v     
  lgl$-           %22.1 = Gt                 vd    %20.1, 1L, elided   <lgl$->
  lgl$#-          %22.2 = CheckTrueFalse     e     %22.1
  void                    Branch                   %22.2 -> BB28 (if true) | BB23 (if false)
BB21   <- [20]
  fs              %21.0 = FrameState         R     0x562e91cdfde0+586: [], env=e1.2
  fs              %21.1 = FrameState         R     0x562e91ce9a80+105: [], env=e16.1, next=%21.0
  void                    Deopt              !v    %21.1   !
BB28   <- [22]
  val?^ | miss    %28.0 = LdVar              eR    tryCatchOne, e16.1
  (cls|spec|blt)  %28.1 = CastType                 dn %28.0
  val+            %28.2 = CallSafeBuiltin          bodyCode(%28.1) 
  lgl$#-          %28.3 = Identical                %28.2, <(rir::DispatchTable*)0x562e90f50400>
  void                    Assume             D     %28.3, %20.3 (CallTarget@0x562e91cc0440[Call#2])
  val?            %28.5 = Force!             d     %28.0, 
  prom-           %28.6 = MkArg                    unboundValue, tryCatch[0x562e9212fa70]_p5, e16.1
  prom-           %28.7 = MkArg                    unboundValue, tryCatch[0x562e9212fa70]_p12, e16.1
  prom-           %28.8 = MkArg                    unboundValue, tryCatch[0x562e9212fa70]_p14, e16.1
  prom-           %28.9 = MkArg                    unboundValue, tryCatch[0x562e9212fa70]_p15, e16.1
  (cls|spec|blt)  %28.10 = ChkFunction        e     %28.5
  val?            %28.11 = StaticCall         !     tryCatchOne[0x562e921365c0](%28.6, %28.7, %28.8, %28.9) from %28.10 e16.1   <(str|vec)->
  goto BB26
BB23   <- [22]
  void                    Visible            v     
  lgl$-           %23.1 = Eq                 vd    %20.1, 1L, elided   <lgl$->
  lgl$#-          %23.2 = CheckTrueFalse     e     %23.1
  void                    Branch                   %23.2 -> BB27 (if true) | BB24 (if false)
BB26   <- [28, 25]
  val?            %26.0 = Phi                      %25.0:BB25, %28.11:BB28
  val?            %26.1 = PopContext         C     %26.0, %14.7   <(str|vec)->
  void                    Return             l     %26.1
BB27   <- [23]
  val?^ | miss    %27.0 = LdVar              eR    tryCatchOne, e16.1
  (cls|spec|blt)  %27.1 = CastType                 dn %27.0
  val+            %27.2 = CallSafeBuiltin          bodyCode(%27.1) 
  lgl$#-          %27.3 = Identical                %27.2, <(rir::DispatchTable*)0x562e90f50400>
  void                    Assume             D     %27.3, %20.3 (CallTarget@0x562e91cc0440[Call#1])
  val?            %27.5 = Force!             d     %27.0, 
  prom-           %27.6 = MkArg                    unboundValue, tryCatch[0x562e9212fa70]_p17, e16.1
  prom-           %27.7 = MkArg                    unboundValue, tryCatch[0x562e9212fa70]_p18, e16.1
  prom-           %27.8 = MkArg                    unboundValue, tryCatch[0x562e9212fa70]_p19, e16.1
  prom-           %27.9 = MkArg                    unboundValue, tryCatch[0x562e9212fa70]_p20, e16.1
  (cls|spec|blt)  %27.10 = ChkFunction        e     %27.5
  val?            %27.11 = StaticCall         !     tryCatchOne[0x562e921365c0](%27.6, %27.7, %27.8, %27.9) from %27.10 e16.1   <(str|vec)->
  goto BB25
BB24   <- [23]
  void                    Visible            v     
  val?            %24.1 = Force!             !L    %14.11, e16.1   <val?_>
  goto BB25
BB25   <- [24, 27]
  val?            %25.0 = Phi                      %24.1:BB24, %27.11:BB27
  goto BB26
Prom 0:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    expr, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <(str|vec)->
  void                    Return             l     %1.3
Prom 1:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    classes, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str->
  void                    Return             l     %1.3
Prom 2:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    parentenv, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <env->
  void                    Return             l     %1.3
Prom 3:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    handlers, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 5:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     tryCatchList, <0x562e91d79580>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, tryCatch[0x562e9212fa70]_p6, e1.0
  prom-           %1.3  = MkArg                    unboundValue, tryCatch[0x562e9212fa70]_p7, e1.0
  prom-           %1.4  = MkArg                    unboundValue, tryCatch[0x562e9212fa70]_p9, e1.0
  prom-           %1.5  = MkArg                    unboundValue, tryCatch[0x562e9212fa70]_p10, e1.0
  val?            %1.6  = Call               !     %1.1(%1.2, %1.3, %1.4, %1.5) e1.0   <vec->
  void                    Return             l     %1.6
Prom 6:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    expr, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <vec->
  void                    Return             l     %1.3
Prom 7:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    names, e1.0
  val?            %1.2  = Force<wrapped>     !v    %1.1, e1.0   <str->
  lgl$#-          %1.3  = IsType                   %1.2 isA val+   <true>
  void                    Branch                   %1.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [1]
  val?^ | miss    %2.0  = LdVar              eR    nh, e1.0
  val?            %2.1  = Force<value>       !v    %2.0, e1.0   <int$->
  val?            %2.2  = Minus              !v    %2.1, e1.0
  goto BB3
BB4   <- [1]
  prom-           %4.0  = MkArg                    unboundValue, tryCatch[0x562e9212fa70]_p8, e1.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.2:BB2, %4.0:BB4
  val?            %3.1  = Extract1_1D        !v    %1.2, %3.0, e1.0   <str$->
  void                    Visible            v     
  void                    Return             l     %3.1
Prom 8:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    nh, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  val?            %1.4  = Minus              !     %1.3, e1.0
  void                    Return             l     %1.4
Prom 9:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    parentenv, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <env->
  void                    Return             l     %1.3
Prom 10:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    handlers, e1.0
  val?            %1.2  = Force<wrapped>     !v    %1.1, e1.0   <vec+>
  lgl$#-          %1.3  = IsType                   %1.2 isA val+   <true>
  void                    Branch                   %1.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [1]
  val?^ | miss    %2.0  = LdVar              eR    nh, e1.0
  val?            %2.1  = Force<value>       !v    %2.0, e1.0   <int$->
  val?            %2.2  = Minus              !v    %2.1, e1.0
  goto BB3
BB4   <- [1]
  prom-           %4.0  = MkArg                    unboundValue, tryCatch[0x562e9212fa70]_p11, e1.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.2:BB2, %4.0:BB4
  val?            %3.1  = Extract1_1D        !v    %1.2, %3.0, e1.0   <vec$+>
  void                    Visible            v     
  void                    Return             l     %3.1
Prom 11:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    nh, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  val?            %1.4  = Minus              !     %1.3, e1.0
  void                    Return             l     %1.4
Prom 12:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    names, e1.0
  val?            %1.2  = Force<wrapped>     !v    %1.1, e1.0   <str->
  lgl$#-          %1.3  = IsType                   %1.2 isA val+   <true>
  void                    Branch                   %1.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [1]
  val?^ | miss    %2.0  = LdVar              eR    nh, e1.0
  val?            %2.1  = Force<value>       !v    %2.0, e1.0   <int$->
  goto BB3
BB4   <- [1]
  prom-           %4.0  = MkArg                    unboundValue, tryCatch[0x562e9212fa70]_p13, e1.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.1:BB2, %4.0:BB4
  val?            %3.1  = Extract1_1D        !v    %1.2, %3.0, e1.0   <str$->
  void                    Visible            v     
  void                    Return             l     %3.1
Prom 13:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    nh, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 14:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    parentenv, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <env->
  void                    Return             l     %1.3
Prom 15:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    handlers, e1.0
  val?            %1.2  = Force<lazy>        !v    %1.1, e1.0   <vec+>
  lgl$#-          %1.3  = IsType                   %1.2 isA val+   <true>
  void                    Branch                   %1.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [1]
  val?^ | miss    %2.0  = LdVar              eR    nh, e1.0
  val?            %2.1  = Force<value>       !v    %2.0, e1.0   <int$->
  goto BB3
BB4   <- [1]
  prom-           %4.0  = MkArg                    unboundValue, tryCatch[0x562e9212fa70]_p16, e1.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.1:BB2, %4.0:BB4
  val?            %3.1  = Extract2_1D        !v    %1.2, %3.0, e1.0   <cls->
  void                    Visible            v     
  void                    Return             l     %3.1
Prom 16:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    nh, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 17:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    expr, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <(str|vec)->
  void                    Return             l     %1.3
Prom 18:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    names, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 19:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    parentenv, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <env->
  void                    Return             l     %1.3
Prom 20:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    handlers, e1.0
  val?            %1.2  = Force<lazy>        !v    %1.1, e1.0   <vec$+>
  val?            %1.3  = Extract2_1D        !v    %1.2, 1L, e1.0   <cls->
  void                    Visible            v     
  void                    Return             l     %1.3

│ tryCatch[0x562e9212fa70]                                                     │
└──────────────────────────────────────────────────────────────────────────────┘
