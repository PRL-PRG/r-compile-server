
┌──────────────────────────────────────────────────────────────────────────────┐
│ withOneRestart[0x562e91d65080]                                               │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch                                      │
│ Properties:                                                                  │
├────── PIR Version After Optimizations
withOneRestart[0x562e91d65080]
BB0
  goto BB1
BB1   <- [0]
  val?^           %1.0  = LdArg                    1
  val?^           %1.1  = LdArg                    0
  env             e1.2  = MkEnv              l     expr=%1.1, restart=%1.0, parent=?, context 1
  cls             %1.3  = MkCls                    doWithOneRestart, e1.2
  void                    StVar              lW    doWithOneRestart, %1.3, e1.2
  prom-           %1.5  = MkArg                    unboundValue, withOneRestart[0x562e91d65080]_p0, e1.2
  prom-           %1.6  = MkArg                    unboundValue, withOneRestart[0x562e91d65080]_p1, e1.2
  val?            %1.7  = StaticCall         !v    doWithOneRestart[0x562e91cd91d0](%1.5, %1.6) from %1.3 e1.2   <vec->
  void                    StVar              lW    restartArgs, %1.7, e1.2
  cp              %1.9  = Checkpoint                -> BB2 (default) | BB19 (if assume failed)
BB2   <- [1]
  val?^ | miss    %2.0  = LdVar              eR    docall, e1.2
  (cls|spec|blt)  %2.1  = CastType                 dn %2.0
  val+            %2.2  = CallSafeBuiltin          bodyCode(%2.1) 
  lgl$#-          %2.3  = Identical                %2.2, <(rir::DispatchTable*)0x562e91cbf9e0>
  void                    Assume             D     %2.3, %1.9 (CallTarget@0x562e91334fb8[Call#1])
  val?            %2.5  = Force!             d     %2.0, 
  prom-           %2.6  = MkArg                    unboundValue, withOneRestart[0x562e91d65080]_p2, e1.2
  prom-           %2.7  = MkArg                    unboundValue, withOneRestart[0x562e91d65080]_p5, e1.2
  (cls|spec|blt)  %2.8  = ChkFunction        e     %2.5
  env             e2.9  = CallSafeBuiltin          environment(%2.8) 
  ct              %2.10 = PushContext        lCL   %2.6, %2.7, docall($(restart, handler), restartArgs), %2.8, e1.2
  val?^           %2.11 = CastType                 up %2.7
  val?^           %2.12 = CastType                 up %2.6
  val?^ | miss    %2.13 = LdVar              eR    is.character, e2.9
  lgl$#-          %2.14 = Identical                <blt is.character>, %2.13   <true>
  void                    Assume             D     %2.14, %1.9 (DeadBranchReached@0x562e91347db8[Test#0])
  env             e2.16 = MkEnv              l     fun=%2.12, args=%2.11, parent=e2.9, context 1
  val?            %2.17 = Force!<lazy>       !vL   %2.12, e2.16   <cls->
  lgl$#-          %2.18 = IsType                   %2.17 isA val?-
  cp              %2.19 = Checkpoint                -> BB4 (default) | BB3 (if assume failed)
BB19   <- [1]
  fs              %19.0 = FrameState         R     0x562e91ccf2e0+76: [], env=e1.2
  void                    Deopt              !v    %19.0   !
BB4   <- [2]
  void                    Assume             D     %2.18, %2.19 (Typecheck@0x562e91347db8[Type#1])
  val?-           %4.1  = CastType           d     dn %2.17   <cls->
  lgl$#-          %4.2  = CallSafeBuiltin    wed   is.character(%4.1)    <lgl$->
  void                    Branch                   %4.2 -> BB16 (if true) | BB5 (if false)
BB3   <- [2]
  fs              %3.0  = FrameState         R     0x562e91ccf2e0+113: [], env=e1.2
  fs              %3.1  = FrameState         R     0x562e91da08a0+69: [<blt is.character>, %2.17], env=e2.16, next=%3.0
  void                    Deopt              !v    %3.1   !
BB16   <- [4]
  val?^ | miss    %16.0 = LdVar              eR    length, e2.9
  lgl$#-          %16.1 = Identical                <blt length>, %16.0   <@?>
  void                    Branch                   %16.1 -> BB18 (if true) | BB17 (if false)
BB5   <- [4]
  goto BB6
BB18   <- [16]
  (int|real)$-    %18.0 = CallSafeBuiltin    wed   length(%4.1)    <val?_>
  lgl$-           %18.1 = Eq                 d     %18.0, 1L, elided   <val?_>
  lgl$-           %18.2 = AsLogical                %18.1
  lgl$-           %18.3 = LAnd                     %4.2, %18.2
  goto BB6
BB17   <- [16]
  fs              %17.0 = FrameState         R     0x562e91ccf2e0+113: [], env=e1.2
  (cls|spec|blt)  %17.1 = LdFun              !v    length, e2.9
  fs              %17.2 = FrameState         R     0x562e91da08a0+131: [%4.2, %17.1], env=e2.16, next=%17.0
  void                    Deopt              !v    %17.2, DeadCall@0x562e91347db8[Call#1], %17.1   !
BB6   <- [5, 18]
  lgl$-           %6.0  = Phi                      %18.3:BB18, %4.2:BB5
  lgl$-           %6.1  = AsLogical                %6.0
  lgl$#-          %6.2  = Identical                %6.1, true
  cp              %6.3  = Checkpoint                -> BB8 (default) | BB7 (if assume failed)
BB8   <- [6]
  void                    Visible            v     
  void                    Branch                   %6.2 -> BB15 (if true) | BB9 (if false)
BB7   <- [6]
  fs              %7.0  = FrameState         R     0x562e91ccf2e0+113: [], env=e1.2
  fs              %7.1  = FrameState         R     0x562e91da08a0+213: [%6.0], env=e2.16, next=%7.0
  void                    Deopt              !v    %7.1   !
BB15   <- [8]
  goto BB10
BB9   <- [8]
  val?^ | miss    %9.0  = LdVar              eR    is.name, e2.9
  lgl$#-          %9.1  = Identical                <blt is.symbol>, %9.0   <true>
  void                    Assume             D     %9.1, %6.3 (DeadBranchReached@0x562e91347db8[Test#2])
  lgl$#-          %9.3  = CallSafeBuiltin    vwed  is.symbol(%4.1)    <lgl$->
  lgl$-           %9.4  = LOr                      %6.1, %9.3
  goto BB10
BB10   <- [15, 9]
  lgl$-           %10.0 = Phi                      %9.4:BB9, %6.1:BB15
  cp              %10.1 = Checkpoint                -> BB12 (default) | BB11 (if assume failed)
BB12   <- [10]
  lgl$#-          %12.0 = CheckTrueFalse     e     %10.0
  void                    Branch                   %12.0 -> BB14 (if true) | BB13 (if false)
BB11   <- [10]
  fs              %11.0 = FrameState         R     0x562e91ccf2e0+113: [], env=e1.2
  fs              %11.1 = FrameState         R     0x562e91da08a0+319: [%10.0], env=e2.16, next=%11.0
  void                    Deopt              !v    %11.1   !
BB14   <- [12]
  fs              %14.0 = FrameState         R     0x562e91ccf2e0+113: [], env=e1.2
  (cls|spec|blt)  %14.1 = LdFun              !v    get, e2.9
  fs              %14.2 = FrameState         R     0x562e91da08a0+335: [%14.1], env=e2.16, next=%14.0
  void                    Deopt              !v    %14.2, DeadCall@0x562e91347db8[Call#3], %14.1   !
BB13   <- [12]
  val?^ | miss    %13.0 = LdVar              eR    do.call, e2.9
  lgl$#-          %13.1 = Identical                %13.0, function(what, args, quote=FALSE, envir=parent|...
  void                    Assume             D     %13.1, %10.1 (CallTarget@0x562e91347db8[Call#6])
  prom-           %13.3 = MkArg                    unboundValue, withOneRestart[0x562e91d65080]_p6, e2.16
  val?            %13.4 = StaticCall         !     do.call[0x562e91eb1ab0]("fun", %13.3) e2.16   <nil->
  val?            %13.5 = PopContext         C     %13.4, %2.10   <nil->
  void                    Return             l     %13.5
Prom 0:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    expr, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    NonLocalReturn     !     %1.3, e1.0
Prom 1:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    restart, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <vec>
  void                    Return             l     %1.3
Prom 2:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     $, <0x562e8fdb2c10>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, withOneRestart[0x562e91d65080]_p3, e1.0
  prom-           %1.3  = MkArg                    unboundValue, withOneRestart[0x562e91d65080]_p4, e1.0
  val?            %1.4  = Call               !     %1.1(%1.2, %1.3) e1.0   <cls->
  void                    Return             l     %1.4
Prom 3:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    restart, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <vec>
  void                    Return             l     %1.3
Prom 4:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    handler, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 5:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    restartArgs, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <vec->
  void                    Return             l     %1.3
Prom 6:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     lapply, <0x562e8fef2040>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, withOneRestart[0x562e91d65080]_p7, e1.0
  prom-           %1.3  = MkArg                    unboundValue, withOneRestart[0x562e91d65080]_p8, e1.0
  val?            %1.4  = Call               !     %1.1(%1.2, %1.3) e1.0   <vec->
  void                    Return             l     %1.4
Prom 7:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    args, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <vec->
  void                    Return             l     %1.3
Prom 8:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    enquote, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <cls->
  void                    Return             l     %1.3

│ withOneRestart[0x562e91d65080]                                               │
└──────────────────────────────────────────────────────────────────────────────┘
