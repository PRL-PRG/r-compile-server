
┌──────────────────────────────────────────────────────────────────────────────┐
│ cacheMethod[0x5629e6fcd720]                                                  │
│ Context: CorrOrd,!TMany,Argmatch;Eager0,Eager3,NonRefl0,NonRefl3,!Obj0       │
│ Properties:                                                                  │
├────── PIR Version After Optimizations
cacheMethod[0x5629e6fcd720]
BB0
  goto BB1
BB1   <- [0]
  val?^ | miss    %1.0  = LdArg                    5
  val?^ | miss    %1.1  = LdArg                    4
  val?~ | miss    %1.2  = LdArg                    3
  val?^ | miss    %1.3  = LdArg                    2
  val?^ | miss    %1.4  = LdArg                    1
  val?~+          %1.5  = LdArg                    0
  lgl$#-          %1.6  = Identical                %1.2, missingArg
  lgl$#-          %1.7  = Identical                %1.0, missingArg
  env             e1.8  = MkEnv              l     f=%1.5, sig=%1.4, def=%1.3, args=%1.2, fdef=%1.1, inherited=%1.0, parent=<env 0x5629e1bab378>, context 1
  void                    Branch                   %1.6 -> BB2 (if true) | BB16 (if false)
BB2   <- [1]
  prom-           %2.0  = MkArg                    unboundValue, cacheMethod[0x5629e6fcd720]_p0, e1.8
  val?^ | miss    %2.1  = CastType                 up %2.0
  void                    StArg              lW    args, %2.1, e1.8
  goto BB3
BB16   <- [1]
  goto BB3
BB3   <- [2, 16]
  void                    Branch                   %1.7 -> BB15 (if true) | BB4 (if false)
BB15   <- [3]
  void                    StArg              lW    inherited, false, e1.8
  goto BB5
BB4   <- [3]
  goto BB5
BB5   <- [4, 15]
  cp              %5.0  = Checkpoint                -> BB7 (default) | BB6 (if assume failed)
BB7   <- [5]
  val?^ | miss    %7.0  = LdVar              eR    environment, <env 0x5629e1bab378>
  lgl$#-          %7.1  = Identical                %7.0, function(fun=NULL) <(rir::DispatchTable*)0x562|...
  void                    Assume             D     %7.1, %5.0 (CallTarget@0x5629e2036bc0[Call#1])
  val?^           %7.3  = ChkMissing         e     %1.1
  val?            %7.4  = Force!<lazy>       !v    %7.3, e1.8   <cls>
  prom-           %7.5  = MkArg                    %7.4, cacheMethod[0x5629e6fcd720]_p3 (!refl), 
  val?            %7.6  = StaticCall         !v    environment[0x5629e3984980](%7.5) e1.8   <env->
  void                    StVar              lW    ev, %7.6, e1.8
  cp              %7.8  = Checkpoint                -> BB9 (default) | BB8 (if assume failed)
BB6   <- [5]
  fs              %6.0  = FrameState         R     0x5629e51bf480+0: [], env=e1.8
  void                    Deopt              !v    %6.0
BB9   <- [7]
  val?^ | miss    %9.0  = LdVar              eR    .cacheMethodInTable, e1.8
  lgl$#-          %9.1  = Identical                %9.0, function(fdef, sig, def, table=get(".AllMTable|...
  void                    Assume             D     %9.1, %7.8 (CallTarget@0x5629e2036bc0[Call#2])
  prom-           %9.3  = MkArg                    unboundValue, cacheMethod[0x5629e6fcd720]_p4, e1.8
  prom-           %9.4  = MkArg                    unboundValue, cacheMethod[0x5629e6fcd720]_p5, e1.8
  prom-           %9.5  = MkArg                    unboundValue, cacheMethod[0x5629e6fcd720]_p6, e1.8
  prom-           %9.6  = MkArg                    unboundValue, cacheMethod[0x5629e6fcd720]_p7, e1.8
  val?            %9.7  = StaticCall         !v    .cacheMethodInTable[0x5629e7080430](%9.3, %9.4, %9.5, %9.6) e1.8
  val?^ | miss    %9.8  = LdVar              eR    inherited, e1.8
  void                    Visible            v     
  val?            %9.10 = Force!<wrapped>    !     %9.8, e1.8   <lgl$->
  lgl$#-          %9.11 = IsType                   %9.10 isA lgl$-
  cp              %9.12 = Checkpoint                -> BB11 (default) | BB10 (if assume failed)
BB8   <- [7]
  fs              %8.0  = FrameState         R     0x5629e51bf480+46: [], env=e1.8
  void                    Deopt              !v    %8.0   !
BB11   <- [9]
  void                    Assume             D     %9.11, %9.12 (Typecheck@0x5629e2036bc0[Type#11])
  lgl$-           %11.1 = CastType           d     dn %9.10
  lgl$-           %11.2 = Not                vd    %11.1, elided
  lgl$#-          %11.3 = CheckTrueFalse     e     %11.2
  void                    Branch                   %11.3 -> BB14 (if true) | BB12 (if false)
BB10   <- [9]
  fs              %10.0 = FrameState         R     0x5629e51bf480+103: [%9.10], env=e1.8
  void                    Deopt              !v    %10.0   !
BB14   <- [11]
  val?^ | miss    %14.0 = LdVar              eR    .cacheMethodInTable, e1.8
  lgl$#-          %14.1 = Identical                %14.0, function(fdef, sig, def, table=get(".AllMTable|...
  void                    Assume             D     %14.1, %9.12 (CallTarget@0x5629e2036bc0[Call#4])
  prom-           %14.3 = MkArg                    unboundValue, cacheMethod[0x5629e6fcd720]_p11, e1.8
  prom-           %14.4 = MkArg                    unboundValue, cacheMethod[0x5629e6fcd720]_p12, e1.8
  prom-           %14.5 = MkArg                    unboundValue, cacheMethod[0x5629e6fcd720]_p13, e1.8
  prom-           %14.6 = MkArg                    unboundValue, cacheMethod[0x5629e6fcd720]_p14, e1.8
  val?            %14.7 = StaticCall         !     .cacheMethodInTable[0x5629e7080430](%14.3, %14.4, %14.5, %14.6) e1.8   <cls>
  goto BB13
BB12   <- [11]
  void                    Invisible          v     
  goto BB13
BB13   <- [12, 14]
  val?            %13.0 = Phi                      nil:BB12, %14.7:BB14
  void                    Return             l     %13.0
Prom 0:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     names, e1.0
  prom-           %1.2  = MkArg                    unboundValue, cacheMethod[0x5629e6fcd720]_p1, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <val?_>
  void                    Return             l     %1.3
Prom 1:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    sig, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 3:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    fdef, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <cls>
  void                    Return             l     %1.3
Prom 4:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    fdef, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <cls>
  void                    Return             l     %1.3
Prom 5:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    sig, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <str+>
  void                    Return             l     %1.3
Prom 6:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    def, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <cls>
  void                    Return             l     %1.3
Prom 7:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     .getMethodsTable, <0x5629e353de30>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, cacheMethod[0x5629e6fcd720]_p8, e1.0
  prom-           %1.3  = MkArg                    unboundValue, cacheMethod[0x5629e6fcd720]_p9, e1.0
  prom-           %1.4  = MkArg                    unboundValue, cacheMethod[0x5629e6fcd720]_p10, e1.0
  val?            %1.5  = NamedCall          !     %1.1(%1.2, %1.3, inherited=%1.4) e1.0   <env->
  void                    Return             l     %1.5
Prom 8:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    fdef, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 9:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    ev, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <env->
  void                    Return             l     %1.3
Prom 10:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    inherited, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <lgl$->
  void                    Return             l     %1.3
Prom 11:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    fdef, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <cls>
  void                    Return             l     %1.3
Prom 12:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    sig, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <str+>
  void                    Return             l     %1.3
Prom 13:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    def, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <cls>
  void                    Return             l     %1.3
Prom 14:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     .getMethodsTable, <0x5629e353de30>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, cacheMethod[0x5629e6fcd720]_p15, e1.0
  prom-           %1.3  = MkArg                    unboundValue, cacheMethod[0x5629e6fcd720]_p16, e1.0
  val?            %1.4  = NamedCall          !     %1.1(%1.2, %1.3, inherited=true) e1.0   <env->
  void                    Return             l     %1.4
Prom 15:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    fdef, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 16:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    ev, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <env->
  void                    Return             l     %1.3

│ cacheMethod[0x5629e6fcd720]                                                  │
└──────────────────────────────────────────────────────────────────────────────┘
