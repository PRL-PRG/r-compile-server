
┌──────────────────────────────────────────────────────────────────────────────┐
│ getClass[0x5629e49e10e0]                                                     │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;Eager0,NonRefl0,!Obj0 miss: 2        │
│ Properties:                                                                  │
├────── PIR Version After Optimizations
getClass[0x5629e49e10e0]
BB0
  goto BB1
BB1   <- [0]
  val?~+          %1.0  = LdArg                    0
  env             e1.1  = MkEnv              l     Class=%1.0, .Force(miss)=false, where(miss)=missingArg, parent=<env 0x5629e1bab378>, context 1
  prom-           %1.2  = MkArg                    unboundValue, getClass[0x5629e49e10e0]_p1, e1.1
  val?^ | miss    %1.3  = CastType                 up %1.2
  void                    StArg              lW    where, %1.3, e1.1
  cp              %1.5  = Checkpoint                -> BB2 (default) | BB9 (if assume failed)
BB2   <- [1]
  val?^ | miss    %2.0  = LdVar              eR    getClassDef, <env 0x5629e1bab378>
  lgl$#-          %2.1  = Identical                %2.0, function(Class, where=topenv(parent.frame()), |...
  void                    Assume             D     %2.1, %1.5 (CallTarget@0x5629e2d5a5e0[Call#3])
  prom-           %2.3  = MkArg                    unboundValue, getClass[0x5629e49e10e0]_p5 (!refl), e1.1
  prom-           %2.4  = MkArg                    unboundValue, getClass[0x5629e49e10e0]_p6, e1.1
  val?            %2.5  = StaticCall         !v    getClassDef[0x5629e78828a0](%2.3, %2.4) e1.1   <other>
  lgl$-           %2.6  = Is                       %2.5, NULL
  void                    StVar              lW    value, %2.5, e1.1
  val             %2.8  = ChkMissing         e     %2.5
  lgl$#-          %2.9  = CheckTrueFalse     e     %2.6
  void                    Branch                   %2.9 -> BB4 (if true) | BB3 (if false)
BB9   <- [1]
  fs              %9.0  = FrameState         R     0x5629e2e7bff0+0: [], env=e1.1
  void                    Deopt              !v    %9.0
BB4   <- [2]
  val?^ | miss    %4.0  = LdVar              eR    .Force, e1.1
  val?            %4.1  = Force!             !v    %4.0, e1.1   <val?_>
  lgl$#-          %4.2  = IsType                   %4.1 isA val?+
  cp              %4.3  = Checkpoint                -> BB6 (default) | BB5 (if assume failed)
BB3   <- [2]
  void                    Visible            v     
  void                    Return             l     %2.5
BB6   <- [4]
  void                    Assume             D     %4.2, %4.3 (Typecheck@0x5629e2d5a5e0[Type#8])
  val?+           %6.1  = CastType           d     dn %4.1   <val?_>
  lgl             %6.2  = Not                wed   %6.1, elided
  lgl$#-          %6.3  = CheckTrueFalse     we    %6.2
  void                    Branch                   %6.3 -> BB8 (if true) | BB7 (if false)
BB5   <- [4]
  fs              %5.0  = FrameState         R     0x5629e2e7bff0+90: [%4.1], env=e1.1
  void                    Deopt              !v    %5.0   !
BB8   <- [6]
  (cls|spec|blt)  %8.0  = LdFun              !v    stop, e1.1
  fs              %8.1  = FrameState         R     0x5629e2e7bff0+189: [%8.0], env=e1.1
  void                    Deopt              !v    %8.1, DeadCall@0x5629e2d5a5e0[Call#5], %8.0   !
BB7   <- [6]
  (cls|spec|blt)  %7.0  = LdFun              !v    makeClassRepresentation, e1.1
  fs              %7.1  = FrameState         R     0x5629e2e7bff0+107: [%7.0], env=e1.1
  void                    Deopt              !v    %7.1, DeadCall@0x5629e2d5a5e0[Call#4], %7.0   !
Prom 1:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     .classEnv, e1.0
  prom-           %1.2  = MkArg                    unboundValue, getClass[0x5629e49e10e0]_p2, e1.0
  prom-           %1.3  = MkArg                    unboundValue, getClass[0x5629e49e10e0]_p3, e1.0
  val?            %1.4  = Call               !     %1.1(%1.2, %1.3, false) e1.0   <val?_>
  void                    Return             l     %1.4
Prom 2:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    Class, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 3:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     topenv, e1.0
  prom-           %1.2  = MkArg                    unboundValue, getClass[0x5629e49e10e0]_p4, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <val?_>
  void                    Return             l     %1.3
Prom 4:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     parent.frame, e1.0
  val?            %1.2  = Call               !     %1.1() e1.0   <val?_>
  void                    Return             l     %1.2
Prom 5:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    Class, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <str$+>
  void                    Return             l     %1.3
Prom 6:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    where, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3

│ getClass[0x5629e49e10e0]                                                     │
└──────────────────────────────────────────────────────────────────────────────┘
