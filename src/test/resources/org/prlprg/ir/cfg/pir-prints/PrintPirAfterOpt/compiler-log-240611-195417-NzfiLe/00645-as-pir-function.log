
┌──────────────────────────────────────────────────────────────────────────────┐
│ as[0x5629e4ee6df0]                                                           │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;Eager1,NonRefl0,NonRefl1,!Obj1 miss: 2│
│ Properties:                                                                  │
├────── PIR Version After Optimizations
as[0x5629e4ee6df0]
BB0
  goto BB1
BB1   <- [0]
  val?~+          %1.0  = LdArg                    1
  val?^           %1.1  = LdArg                    0
  env             e1.2  = MkEnv              l     object=%1.1, Class=%1.0, strict(miss)=true, ext(miss)=missingArg, parent=<env 0x5629e1bab378>, context 1
  prom-           %1.3  = MkArg                    unboundValue, as[0x5629e4ee6df0]_p1, e1.2
  val?^ | miss    %1.4  = CastType                 up %1.3
  void                    StArg              lW    ext, %1.4, e1.2
  cp              %1.6  = Checkpoint                -> BB2 (default) | BB94 (if assume failed)
BB2   <- [1]
  val?^ | miss    %2.0  = LdVar              eR    .class1, <env 0x5629e1bab378>
  lgl$#-          %2.1  = Identical                %2.0, function(x) <(rir::DispatchTable*)0x5629e26e8a|...
  void                    Assume             D     %2.1, %1.6 (CallTarget@0x5629e2899e20[Call#1])
  prom-           %2.3  = MkArg                    unboundValue, as[0x5629e4ee6df0]_p4 (!refl), e1.2
  ct              %2.4  = PushContext        lCL   %2.3, .class1(object), function(x) <(rir::DispatchTable*)0x5629e26e8a|..., e1.2
  val?^           %2.5  = CastType                 up %2.3
  val?^ | miss    %2.6  = LdVar              eR    class, <env 0x5629e1bab378>
  lgl$#-          %2.7  = Identical                <blt class>, %2.6   <true>
  cp              %2.8  = Checkpoint                -> BB4 (default) | BB3 (if assume failed)
BB94   <- [1]
  fs              %94.0 = FrameState         R     0x5629e3da30c0+0: [], env=e1.2
  void                    Deopt              !v    %94.0
BB4   <- [2]
  void                    Assume             D     %2.7, %2.8 (DeadBranchReached@0x5629e5380b98[Test#0])
  env             e4.1  = MkEnv              l     x=%2.5, parent=<env 0x5629e1bab378>, context 1
  val?            %4.2  = Force!<lazy>       !vr   %2.5,    <(str|cls)>
  val?            %4.3  = CallBuiltin        !v    class(%4.2) e4.1   <str$+>
  void                    StVar              lW    cl, %4.3, e4.1
  lgl$#-          %4.5  = IsType                   %4.3 isA val?+
  cp              %4.6  = Checkpoint                -> BB6 (default) | BB5 (if assume failed)
BB3   <- [2]
  fs              %3.0  = FrameState         R     0x5629e3da30c0+32: [], env=e1.2
  env             e3.1  = (MkEnv)            l     x=%2.5, parent=<env 0x5629e1bab378>, context 1
  fs              %3.2  = FrameState         R     0x5629e26e8830+17: [<blt class>, %2.7], env=e3.1, next=%3.0
  void                    Deopt              !v    %3.2   !
BB6   <- [4]
  val?^ | miss    %6.0  = LdVar              eR    length, e4.1
  lgl$#-          %6.1  = Identical                <blt length>, %6.0   <true>
  void                    Assume             D     %6.1, %4.6 (DeadBranchReached@0x5629e5380b98[Test#1])
  val             %6.3  = ChkMissing         e     %4.3
  void                    Assume             D     %4.5, %4.6 (Typecheck@0x5629e5380b98[Type#2])
  val?+           %6.5  = CastType           d     dn %4.3   <str$+>
  (int|real)$-    %6.6  = CallSafeBuiltin    wed   length(%6.5)    <int$->
  lgl$#-          %6.7  = IsType                   %6.6 isA int$-
  cp              %6.8  = Checkpoint                -> BB8 (default) | BB7 (if assume failed)
BB5   <- [4]
  fs              %5.0  = FrameState         R     0x5629e3da30c0+32: [], env=e1.2
  fs              %5.1  = FrameState         R     0x5629e26e8830+105: [], env=e4.1, next=%5.0
  void                    Deopt              !v    %5.1   !
BB8   <- [6]
  void                    Assume             D     %6.7, %6.8 (Typecheck@0x5629e5380b98[Type#5])
  int$-           %8.1  = CastType           d     dn %6.6
  lgl$-           %8.2  = Gt                 d     %8.1, 1L, elided   <lgl$->
  lgl$#-          %8.3  = CheckTrueFalse     e     %8.2
  void                    Branch                   %8.3 -> BB93 (if true) | BB9 (if false)
BB7   <- [6]
  fs              %7.0  = FrameState         R     0x5629e3da30c0+32: [], env=e1.2
  fs              %7.1  = FrameState         R     0x5629e26e8830+196: [%6.6], env=e4.1, next=%7.0
  void                    Deopt              !v    %7.1   !
BB93   <- [8]
  val?            %93.0 = Extract2_1D        wed   %6.5, 1L, elided   <val?_>
  goto BB10
BB9   <- [8]
  goto BB10
BB10   <- [9, 93]
  val?            %10.0 = Phi                      %6.5:BB9, %93.0:BB93
  val?            %10.1 = PopContext         C     %10.0, %2.4   <str$+>
  void                    StVar              lW    thisClass, %10.1, e1.2
  cp              %10.3 = Checkpoint                -> BB12 (default) | BB11 (if assume failed)
BB12   <- [10]
  val?^ | miss    %12.0 = LdVar              eR    .identC, e1.2
  lgl$#-          %12.1 = Identical                %12.0, function(c1=NULL, c2=NULL) <(rir::DispatchTabl|...
  void                    Assume             D     %12.1, %10.3 (CallTarget@0x5629e2899e20[Call#2])
  prom-           %12.3 = MkArg                    unboundValue, as[0x5629e4ee6df0]_p5 (!refl), e1.2
  prom-           %12.4 = MkArg                    unboundValue, as[0x5629e4ee6df0]_p6, e1.2
  val?            %12.5 = StaticCall         !v    .identC[0x5629ed3d1880](%12.3, %12.4) e1.2   <lgl$->
  lgl$#-          %12.6 = IsType                   %12.5 isA lgl$-
  cp              %12.7 = Checkpoint                -> BB14 (default) | BB13 (if assume failed)
BB11   <- [10]
  fs              %11.0 = FrameState         R     0x5629e3da30c0+46: [], env=e1.2
  void                    Deopt              !v    %11.0   !
BB14   <- [12]
  void                    Assume             D     %12.6, %12.7 (Typecheck@0x5629e2899e20[Type#7])
  lgl$-           %14.1 = CastType           d     dn %12.5
  lgl$-           %14.2 = AsLogical                %14.1
  lgl$#-          %14.3 = Identical                %14.2, true
  void                    Branch                   %14.3 -> BB92 (if true) | BB15 (if false)
BB13   <- [12]
  fs              %13.0 = FrameState         R     0x5629e3da30c0+83: [%12.5], env=e1.2
  void                    Deopt              !v    %13.0   !
BB92   <- [14]
  goto BB18
BB15   <- [14]
  val?^ | miss    %15.0 = LdVar              eR    .identC, e1.2
  lgl$#-          %15.1 = Identical                %15.0, function(c1=NULL, c2=NULL) <(rir::DispatchTabl|...
  void                    Assume             D     %15.1, %12.7 (CallTarget@0x5629e2899e20[Call#3])
  prom-           %15.3 = MkArg                    unboundValue, as[0x5629e4ee6df0]_p7, e1.2
  val?            %15.4 = StaticCall         !v    .identC[0x5629ea1c4060](%15.3, "ANY") e1.2   <lgl$->
  lgl$#-          %15.5 = IsType                   %15.4 isA lgl$-
  cp              %15.6 = Checkpoint                -> BB17 (default) | BB16 (if assume failed)
BB18   <- [17, 92]
  lgl$-           %18.0 = Phi                      %17.3:BB17, %14.2:BB92
  cp              %18.1 = Checkpoint                -> BB20 (default) | BB19 (if assume failed)
BB17   <- [15]
  void                    Assume             D     %15.5, %15.6 (Typecheck@0x5629e2899e20[Type#9])
  lgl$-           %17.1 = CastType           d     dn %15.4
  lgl$-           %17.2 = AsLogical                %17.1
  lgl$-           %17.3 = LOr                      %14.2, %17.2
  goto BB18
BB16   <- [15]
  fs              %16.0 = FrameState         R     0x5629e3da30c0+132: [%14.2, %15.4], env=e1.2
  void                    Deopt              !v    %16.0   !
BB20   <- [18]
  lgl$#-          %20.0 = CheckTrueFalse     e     %18.0
  void                    Branch                   %20.0 -> BB91 (if true) | BB21 (if false)
BB19   <- [18]
  fs              %19.0 = FrameState         R     0x5629e3da30c0+139: [%18.0], env=e1.2
  void                    Deopt              !v    %19.0   !
BB91   <- [20]
  val?^ | miss    %91.0 = LdVar              eR    object, e1.2
  void                    Visible            v     
  val?            %91.2 = Force!<wrapped>    !     %91.0, e1.2   <val?_>
  goto BB34
BB21   <- [20]
  val?^ | miss    %21.0 = LdVar              eR    .classEnv, e1.2
  lgl$#-          %21.1 = Identical                %21.0, function(Class, default=.requirePackage("metho|...
  void                    Assume             D     %21.1, %18.1 (CallTarget@0x5629e2899e20[Call#4])
  prom-           %21.3 = MkArg                    unboundValue, as[0x5629e4ee6df0]_p8, e1.2
  val?            %21.4 = StaticCall         !v    .classEnv[0x5629e7fcdef0](%21.3, missingArg, false) { 0 2n } e1.2   <env->
  void                    StVar              lW    where, %21.4, e1.2
  cp              %21.6 = Checkpoint                -> BB23 (default) | BB22 (if assume failed)
BB34   <- [91, 33]
  val?            %34.0 = Phi                      %33.0:BB33, %91.2:BB91
  void                    Return             l     %34.0
BB23   <- [21]
  val?^ | miss    %23.0 = LdVar              eR    getGeneric, e1.2
  lgl$#-          %23.1 = Identical                %23.0, function(f, mustFind=FALSE, where, package="")|...
  void                    Assume             D     %23.1, %21.6 (CallTarget@0x5629e2899e20[Call#5])
  prom-           %23.3 = MkArg                    unboundValue, as[0x5629e4ee6df0]_p9 (!refl), e1.2
  val?            %23.4 = StaticCall         !v    getGeneric[0x5629ea61df10]("coerce", missingArg, %23.3) { 0 2n } e1.2   <cls>
  void                    StVar              lW    coerceFun, %23.4, e1.2
  cp              %23.6 = Checkpoint                -> BB25 (default) | BB24 (if assume failed)
BB22   <- [21]
  fs              %22.0 = FrameState         R     0x5629e3da30c0+224: [], env=e1.2
  void                    Deopt              !v    %22.0   !
BB25   <- [23]
  val?^ | miss    %25.0 = LdVar              eR    .getMethodsTable, e1.2
  lgl$#-          %25.1 = Identical                %25.0, function(fdef, env=environment(fdef), check=TR|...
  void                    Assume             D     %25.1, %23.6 (CallTarget@0x5629e2899e20[Call#6])
  prom-           %25.3 = MkArg                    unboundValue, as[0x5629e4ee6df0]_p10 (!refl), e1.2
  prom-           %25.4 = MkArg                    unboundValue, as[0x5629e4ee6df0]_p11, e1.2
  val?            %25.5 = StaticCall         !v    .getMethodsTable[0x5629e5fce730](%25.3, %25.4, missingArg, true) { 0 1 3n } e1.2   <env->
  void                    StVar              lW    coerceMethods, %25.5, e1.2
  cp              %25.7 = Checkpoint                -> BB27 (default) | BB26 (if assume failed)
BB24   <- [23]
  fs              %24.0 = FrameState         R     0x5629e3da30c0+283: [], env=e1.2
  void                    Deopt              !v    %24.0   !
BB27   <- [25]
  val?^ | miss    %27.0 = LdVar              eR    .quickCoerceSelect, e1.2
  lgl$#-          %27.1 = Identical                %27.0, function(from, to, fdef, methods, where) <(rir|...
  void                    Assume             D     %27.1, %25.7 (CallTarget@0x5629e2899e20[Call#8])
  prom-           %27.3 = MkArg                    unboundValue, as[0x5629e4ee6df0]_p13, e1.2
  prom-           %27.4 = MkArg                    unboundValue, as[0x5629e4ee6df0]_p14, e1.2
  prom-           %27.5 = MkArg                    unboundValue, as[0x5629e4ee6df0]_p15, e1.2
  prom-           %27.6 = MkArg                    unboundValue, as[0x5629e4ee6df0]_p16 (!refl), e1.2
  prom-           %27.7 = MkArg                    unboundValue, as[0x5629e4ee6df0]_p17, e1.2
  val?            %27.8 = StaticCall         !v    .quickCoerceSelect[0x5629e584b720](%27.3, %27.4, %27.5, %27.6, %27.7) e1.2   <(nil|cls)>
  lgl$-           %27.9 = Is                       %27.8, NULL
  void                    StVar              lW    asMethod, %27.8, e1.2
  cp              %27.11 = Checkpoint                -> BB29 (default) | BB28 (if assume failed)
BB26   <- [25]
  fs              %26.0 = FrameState         R     0x5629e3da30c0+351: [], env=e1.2
  void                    Deopt              !v    %26.0   !
BB29   <- [27]
  val             %29.0 = ChkMissing         e     %27.8
  lgl$#-          %29.1 = CheckTrueFalse     e     %27.9
  void                    Branch                   %29.1 -> BB36 (if true) | BB30 (if false)
BB28   <- [27]
  fs              %28.0 = FrameState         R     0x5629e3da30c0+417: [], env=e1.2
  void                    Deopt              !v    %28.0   !
BB36   <- [29]
  val?^ | miss    %36.0 = LdVar              eR    c, e1.2
  lgl$#-          %36.1 = Identical                <blt c>, %36.0   <true>
  void                    Assume             D     %36.1, %27.11 (DeadBranchReached@0x5629e2899e20[Test#0])
  val?^ | miss    %36.3 = LdVar              eR    thisClass, e1.2
  lgl$#-          %36.4 = IsType                   %36.3 isA val?~+ | miss
  void                    Assume             D     %36.4, %27.11 (Typecheck@0x5629e2899e20[Type#28])
  val?~+ | miss   %36.6 = CastType           d     dn %36.3
  val?+           %36.7 = Force!<value>            %36.6,    <str$+>
  val?^ | miss    %36.8 = LdVar              eR    Class, e1.2
  val?            %36.9 = Force!<wrapped>    !v    %36.8, e1.2   <str$+>
  val?            %36.10 = NamedCall          !v    <blt c>(from=%36.7, to=%36.9) e1.2   <str+>
  void                    StVar              lW    sig, %36.10, e1.2
  (cls|spec|blt)  %36.12 = LdFun              !v    selectMethod, <0x5629e645a748>, e1.2
  prom-           %36.13 = MkArg                    unboundValue, as[0x5629e4ee6df0]_p20, e1.2
  prom-           %36.14 = MkArg                    unboundValue, as[0x5629e4ee6df0]_p21, e1.2
  prom-           %36.15 = MkArg                    unboundValue, as[0x5629e4ee6df0]_p22, e1.2
  val?            %36.16 = NamedCall          !v    %36.12("coerce", %36.13, optional=true, useInherited=false, fdef=%36.14, mlist=%36.15) e1.2   <nil->
  lgl$-           %36.17 = Is                       %36.16, NULL
  void                    StVar              lW    asMethod, %36.16, e1.2
  val             %36.19 = ChkMissing         e     %36.16
  lgl$#-          %36.20 = CheckTrueFalse     e     %36.17
  void                    Branch                   %36.20 -> BB38 (if true) | BB37 (if false)
BB30   <- [29]
  goto BB31
BB38   <- [36]
  void                    StVar              lW    canCache, true, e1.2
  void                    StVar              lW    inherited, false, e1.2
  cp              %38.2 = Checkpoint                -> BB40 (default) | BB39 (if assume failed)
BB37   <- [36]
  goto BB31
BB31   <- [30, 37, 62]
  val?^ | miss    %31.0 = LdVar              eR    strict, e1.2
  void                    Visible            v     
  val?            %31.2 = Force!<lazy>       !     %31.0, e1.2   <lgl$->
  lgl$#-          %31.3 = CheckTrueFalse     we    %31.2
  void                    Branch                   %31.3 -> BB35 (if true) | BB32 (if false)
BB40   <- [38]
  val?^ | miss    %40.0 = LdVar              eR    is, e1.2
  lgl$#-          %40.1 = Identical                %40.0, function(object, class2) <(rir::DispatchTable*|...
  void                    Assume             D     %40.1, %38.2 (CallTarget@0x5629e2899e20[Call#12])
  prom-           %40.3 = MkArg                    unboundValue, as[0x5629e4ee6df0]_p24, e1.2
  prom-           %40.4 = MkArg                    unboundValue, as[0x5629e4ee6df0]_p25, e1.2
  val?            %40.5 = Call               !v    function(object, class2) <(rir::DispatchTable*|...(%40.3, %40.4) e1.2   <lgl$->
  lgl$#-          %40.6 = IsType                   %40.5 isA lgl$-
  cp              %40.7 = Checkpoint                -> BB42 (default) | BB41 (if assume failed)
BB39   <- [38]
  fs              %39.0 = FrameState         R     0x5629e3da30c0+742: [], env=e1.2
  void                    Deopt              !v    %39.0   !
BB35   <- [31]
  (cls|spec|blt)  %35.0 = LdFun              !     asMethod, e1.2
  prom-           %35.1 = MkArg                    unboundValue, as[0x5629e4ee6df0]_p19, e1.2
  val?            %35.2 = Call               !     %35.0(%35.1) e1.2   <val?>
  goto BB33
BB32   <- [31]
  (cls|spec|blt)  %32.0 = LdFun              !     asMethod, e1.2
  prom-           %32.1 = MkArg                    unboundValue, as[0x5629e4ee6df0]_p18, e1.2
  val?            %32.2 = NamedCall          !     %32.0(%32.1, strict=false) e1.2   <(int|cls)>
  goto BB33
BB42   <- [40]
  void                    Assume             D     %40.6, %40.7 (Typecheck@0x5629e2899e20[Type#39])
  lgl$-           %42.1 = CastType           d     dn %40.5
  lgl$#-          %42.2 = CheckTrueFalse     e     %42.1
  void                    Branch                   %42.2 -> BB69 (if true) | BB43 (if false)
BB41   <- [40]
  fs              %41.0 = FrameState         R     0x5629e3da30c0+779: [%40.5], env=e1.2
  void                    Deopt              !v    %41.0   !
BB33   <- [35, 32]
  val?            %33.0 = Phi                      %32.2:BB32, %35.2:BB35
  goto BB34
BB69   <- [42]
  val?^ | miss    %69.0 = LdVar              eR    getClassDef, e1.2
  lgl$#-          %69.1 = Identical                %69.0, function(Class, where=topenv(parent.frame()), |...
  void                    Assume             D     %69.1, %40.7 (CallTarget@0x5629e2899e20[Call#13])
  prom-           %69.3 = MkArg                    unboundValue, as[0x5629e4ee6df0]_p40, e1.2
  prom-           %69.4 = MkArg                    unboundValue, as[0x5629e4ee6df0]_p41, e1.2
  val?            %69.5 = StaticCall         !v    getClassDef[0x5629e8a87c00](%69.3, %69.4) e1.2   <other>
  void                    StVar              lW    ClassDef, %69.5, e1.2
  cp              %69.7 = Checkpoint                -> BB71 (default) | BB70 (if assume failed)
BB43   <- [42]
  goto BB44
BB71   <- [69]
  val?^ | miss    %71.0 = LdVar              eR    isFALSE, e1.2
  lgl$#-          %71.1 = Identical                %71.0, function(x) <(rir::DispatchTable*)0x5629e40538|...
  void                    Assume             D     %71.1, %69.7 (CallTarget@0x5629e2899e20[Call#14])
  val?^ | miss    %71.3 = LdVar              eR    ext, e1.2
  val?            %71.4 = Force!<lazy>       !v    %71.3, e1.2   <other>
  prom-           %71.5 = MkArg                    %71.4, as[0x5629e4ee6df0]_p42 (!refl), 
  val?            %71.6 = StaticCall         !v    isFALSE[0x5629e782d630](%71.5) e1.2   <lgl$->
  lgl$#-          %71.7 = IsType                   %71.6 isA lgl$-
  cp              %71.8 = Checkpoint                -> BB73 (default) | BB72 (if assume failed)
BB70   <- [69]
  fs              %70.0 = FrameState         R     0x5629e3da30c0+846: [], env=e1.2
  void                    Deopt              !v    %70.0   !
BB44   <- [43, 85]
  cp              %44.0 = Checkpoint                -> BB46 (default) | BB45 (if assume failed)
BB73   <- [71]
  void                    Assume             D     %71.7, %71.8 (Typecheck@0x5629e2899e20[Type#44])
  lgl$-           %73.1 = CastType           d     dn %71.6
  lgl$#-          %73.2 = CheckTrueFalse     e     %73.1
  void                    Branch                   %73.2 -> BB90 (if true) | BB74 (if false)
BB72   <- [71]
  fs              %72.0 = FrameState         R     0x5629e3da30c0+878: [%71.6], env=e1.2
  void                    Deopt              !v    %72.0   !
BB46   <- [44]
  val?^ | miss    %46.0 = LdVar              eR    asMethod, e1.2
  lgl$#-          %46.1 = IsType                   %46.0 isA val?~- | miss
  void                    Assume             D     %46.1, %44.0 (Typecheck@0x5629e2899e20[Type#74])
  val?~- | miss   %46.3 = CastType           d     dn %46.0
  val?-           %46.4 = Force!<value>            %46.3,    <(nil|cls)->
  lgl$-           %46.5 = Is                       %46.4, NULL
  lgl$-           %46.6 = AsLogical                %46.5
  lgl$#-          %46.7 = Identical                %46.6, false
  void                    Branch                   %46.7 -> BB68 (if true) | BB47 (if false)
BB45   <- [44]
  fs              %45.0 = FrameState         R     0x5629e3da30c0+1324: [], env=e1.2
  void                    Deopt              !v    %45.0   !
BB90   <- [73]
  (cls|spec|blt)  %90.0 = LdFun              !v    stop, e1.2
  fs              %90.1 = FrameState         R     0x5629e3da30c0+1283: [%90.0], env=e1.2
  void                    Deopt              !v    %90.1, DeadCall@0x5629e2899e20[Call#24], %90.0   !
BB74   <- [73]
  val?^ | miss    %74.0 = LdVar              eR    isTRUE, e1.2
  lgl$#-          %74.1 = Identical                %74.0, function(x) <(rir::DispatchTable*)0x5629e34ad1|...
  void                    Assume             D     %74.1, %71.8 (CallTarget@0x5629e2899e20[Call#15])
  val?^ | miss    %74.3 = LdVar              eR    ext, e1.2
  val?            %74.4 = Force!<wrapped>    !v    %74.3, e1.2   <other>
  prom-           %74.5 = MkArg                    %74.4, as[0x5629e4ee6df0]_p43 (!refl), 
  val?            %74.6 = StaticCall         !v    isTRUE[0x5629e57cac40](%74.5) e1.2   <lgl$->
  lgl$#-          %74.7 = IsType                   %74.6 isA lgl$-
  cp              %74.8 = Checkpoint                -> BB76 (default) | BB75 (if assume failed)
BB68   <- [46]
  goto BB50
BB47   <- [46]
  val?^ | miss    %47.0 = LdVar              eR    extends, e1.2
  lgl$#-          %47.1 = Identical                %47.0, function(class1, class2, maybe=TRUE, fullInfo=|...
  void                    Assume             D     %47.1, %44.0 (CallTarget@0x5629e2899e20[Call#27])
  prom-           %47.3 = MkArg                    unboundValue, as[0x5629e4ee6df0]_p26, e1.2
  prom-           %47.4 = MkArg                    unboundValue, as[0x5629e4ee6df0]_p27, e1.2
  val?            %47.5 = Call               !v    function(class1, class2, maybe=TRUE, fullInfo=|...(%47.3, %47.4) e1.2   <lgl$->
  lgl$#-          %47.6 = IsType                   %47.5 isA lgl$-
  cp              %47.7 = Checkpoint                -> BB49 (default) | BB48 (if assume failed)
BB76   <- [74]
  void                    Assume             D     %74.7, %74.8 (Typecheck@0x5629e2899e20[Type#46])
  lgl$-           %76.1 = CastType           d     dn %74.6
  lgl$#-          %76.2 = CheckTrueFalse     e     %76.1
  void                    Branch                   %76.2 -> BB89 (if true) | BB77 (if false)
BB75   <- [74]
  fs              %75.0 = FrameState         R     0x5629e3da30c0+921: [%74.6], env=e1.2
  void                    Deopt              !v    %75.0   !
BB50   <- [49, 68]
  lgl$-           %50.0 = Phi                      %49.3:BB49, %46.6:BB68
  cp              %50.1 = Checkpoint                -> BB52 (default) | BB51 (if assume failed)
BB49   <- [47]
  void                    Assume             D     %47.6, %47.7 (Typecheck@0x5629e2899e20[Type#77])
  lgl$-           %49.1 = CastType           d     dn %47.5
  lgl$-           %49.2 = AsLogical                %49.1
  lgl$-           %49.3 = LAnd                     %46.6, %49.2
  goto BB50
BB48   <- [47]
  fs              %48.0 = FrameState         R     0x5629e3da30c0+1387: [%46.6, %47.5], env=e1.2
  void                    Deopt              !v    %48.0   !
BB89   <- [76]
  (cls|spec|blt)  %89.0 = LdFun              !v    .makeAsMethod, e1.2
  fs              %89.1 = FrameState         R     0x5629e3da30c0+1212: [%89.0], env=e1.2
  void                    Deopt              !v    %89.1, DeadCall@0x5629e2899e20[Call#23], %89.0   !
BB77   <- [76]
  (cls|spec|blt)  %77.0 = LdFun              !v    @, <0x5629e15a3bd8>, e1.2
  prom-           %77.1 = MkArg                    unboundValue, as[0x5629e4ee6df0]_p44, e1.2
  prom-           %77.2 = MkArg                    unboundValue, as[0x5629e4ee6df0]_p45, e1.2
  val?            %77.3 = Call               !v    %77.0(%77.1, %77.2) e1.2   <cls->
  void                    StVar              lW    test, %77.3, e1.2
  cp              %77.5 = Checkpoint                -> BB79 (default) | BB78 (if assume failed)
BB52   <- [50]
  lgl$#-          %52.0 = CheckTrueFalse     e     %50.0
  void                    Branch                   %52.0 -> BB67 (if true) | BB53 (if false)
BB51   <- [50]
  fs              %51.0 = FrameState         R     0x5629e3da30c0+1394: [%50.0], env=e1.2
  void                    Deopt              !v    %51.0   !
BB79   <- [77]
  val?^ | miss    %79.0 = LdVar              eR    .makeAsMethod, e1.2
  lgl$#-          %79.1 = Identical                %79.0, function(expr, simple, Class, ClassDef, where)|...
  void                    Assume             D     %79.1, %77.5 (CallTarget@0x5629e2899e20[Call#17])
  prom-           %79.3 = MkArg                    unboundValue, as[0x5629e4ee6df0]_p46, e1.2
  prom-           %79.4 = MkArg                    unboundValue, as[0x5629e4ee6df0]_p49, e1.2
  prom-           %79.5 = MkArg                    unboundValue, as[0x5629e4ee6df0]_p52, e1.2
  prom-           %79.6 = MkArg                    unboundValue, as[0x5629e4ee6df0]_p53, e1.2
  prom-           %79.7 = MkArg                    unboundValue, as[0x5629e4ee6df0]_p54, e1.2
  val?            %79.8 = StaticCall         !v    .makeAsMethod[0x5629e90a4f50](%79.3, %79.4, %79.5, %79.6, %79.7) e1.2   <cls->
  void                    StVar              lW    asMethod, %79.8, e1.2
  cp              %79.10 = Checkpoint                -> BB81 (default) | BB80 (if assume failed)
BB78   <- [77]
  fs              %78.0 = FrameState         R     0x5629e3da30c0+983: [], env=e1.2
  void                    Deopt              !v    %78.0   !
BB67   <- [52]
  (cls|spec|blt)  %67.0 = LdFun              !v    getClassDef, e1.2
  fs              %67.1 = FrameState         R     0x5629e3da30c0+1410: [%67.0], env=e1.2
  void                    Deopt              !v    %67.1, DeadCall@0x5629e2899e20[Call#28], %67.0   !
BB53   <- [52]
  val?^ | miss    %53.0 = LdVar              eR    asMethod, e1.2
  lgl$#-          %53.1 = IsType                   %53.0 isA val?~- | miss
  void                    Assume             D     %53.1, %50.1 (Typecheck@0x5629e2899e20[Type#86])
  val?~- | miss   %53.3 = CastType           d     dn %53.0
  val?-           %53.4 = Force!<value>            %53.3,    <(nil|cls)->
  lgl$-           %53.5 = Is                       %53.4, NULL
  lgl$#-          %53.6 = CheckTrueFalse     e     %53.5
  void                    Branch                   %53.6 -> BB66 (if true) | BB54 (if false)
BB81   <- [79]
  val?^ | miss    %81.0 = LdVar              eR    is.function, e1.2
  lgl$#-          %81.1 = Identical                <blt is.function>, %81.0   <true>
  void                    Assume             D     %81.1, %79.10 (DeadBranchReached@0x5629e2899e20[Test#1])
  val?^ | miss    %81.3 = LdVar              eR    test, e1.2
  lgl$#-          %81.4 = IsType                   %81.3 isA val?~- | miss
  void                    Assume             D     %81.4, %79.10 (Typecheck@0x5629e2899e20[Type#61])
  val?~- | miss   %81.6 = CastType           d     dn %81.3
  val?-           %81.7 = Force!<value>            %81.6,    <cls->
  lgl$#-          %81.8 = CallSafeBuiltin    wed   is.function(%81.7)    <lgl$->
  cp              %81.9 = Checkpoint                -> BB83 (default) | BB82 (if assume failed)
BB80   <- [79]
  fs              %80.0 = FrameState         R     0x5629e3da30c0+1049: [], env=e1.2
  void                    Deopt              !v    %80.0   !
BB66   <- [53]
  (cls|spec|blt)  %66.0 = LdFun              !v    selectMethod, <0x5629e645a748>, e1.2
  prom-           %66.1 = MkArg                    unboundValue, as[0x5629e4ee6df0]_p36, e1.2
  prom-           %66.2 = MkArg                    unboundValue, as[0x5629e4ee6df0]_p37, e1.2
  prom-           %66.3 = MkArg                    unboundValue, as[0x5629e4ee6df0]_p38, e1.2
  prom-           %66.4 = MkArg                    unboundValue, as[0x5629e4ee6df0]_p39, e1.2
  val?            %66.5 = NamedCall          !v    %66.0("coerce", %66.1, optional=true, %66.2, fdef=%66.3, mlist=%66.4) e1.2   <cls>
  void                    StVar              lW    asMethod, %66.5, e1.2
  void                    StVar              lW    inherited, true, e1.2
  goto BB57
BB54   <- [53]
  val?^ | miss    %54.0 = LdVar              eR    canCache, e1.2
  lgl$#-          %54.1 = IsType                   %54.0 isA lgl$-
  void                    Assume             D     %54.1, %50.1 (Typecheck@0x5629e2899e20[Type#87])
  lgl$-           %54.3 = CastType           d     dn %54.0
  lgl$#-          %54.4 = CheckTrueFalse     e     %54.3
  void                    Branch                   %54.4 -> BB65 (if true) | BB55 (if false)
BB83   <- [81]
  lgl$#-          %83.0 = Not                d     %81.8, elided
  void                    Branch                   %81.8 -> BB86 (if true) | BB84 (if false)
BB82   <- [81]
  fs              %82.0 = FrameState         R     0x5629e3da30c0+1140: [%81.8], env=e1.2
  void                    Deopt              !v    %82.0   !
BB57   <- [66, 56]
  val?^ | miss    %57.0 = LdVar              eR    asMethod, e1.2
  val?            %57.1 = Force!<value>      !v    %57.0, e1.2   <cls>
  lgl$-           %57.2 = Is                       %57.1, NULL
  cp              %57.3 = Checkpoint                -> BB59 (default) | BB58 (if assume failed)
BB65   <- [54]
  val?^ | miss    %65.0 = LdVar              eR    .asCoerceMethod, e1.2
  lgl$#-          %65.1 = Identical                %65.0, function(def, thisClass, ClassDef, replace, wh|...
  void                    Assume             D     %65.1, %50.1 (CallTarget@0x5629e2899e20[Call#30])
  prom-           %65.3 = MkArg                    unboundValue, as[0x5629e4ee6df0]_p32, e1.2
  prom-           %65.4 = MkArg                    unboundValue, as[0x5629e4ee6df0]_p33, e1.2
  prom-           %65.5 = MkArg                    unboundValue, as[0x5629e4ee6df0]_p34, e1.2
  prom-           %65.6 = MkArg                    unboundValue, as[0x5629e4ee6df0]_p35, e1.2
  val?            %65.7 = StaticCall         !v    .asCoerceMethod[0x5629e89bae50](%65.3, %65.4, %65.5, false, %65.6) e1.2   <cls>
  void                    StVar              lW    asMethod, %65.7, e1.2
  goto BB56
BB55   <- [54]
  goto BB56
BB86   <- [83]
  val?^ | miss    %86.0 = LdVar              eR    isTRUE, e1.2
  lgl$#-          %86.1 = Identical                %86.0, function(x) <(rir::DispatchTable*)0x5629e34ad1|...
  void                    Assume             D     %86.1, %81.9 (CallTarget@0x5629e2899e20[Call#21])
  prom-           %86.3 = MkArg                    unboundValue, as[0x5629e4ee6df0]_p55, e1.2
  val?            %86.4 = StaticCall         !v    isTRUE[0x5629e7373a20](%86.3) e1.2   <lgl$->
  lgl$#-          %86.5 = IsType                   %86.4 isA lgl$-
  cp              %86.6 = Checkpoint                -> BB88 (default) | BB87 (if assume failed)
BB84   <- [83]
  goto BB85
BB59   <- [57]
  lgl$#-          %59.0 = CheckTrueFalse     e     %57.2
  void                    Branch                   %59.0 -> BB64 (if true) | BB60 (if false)
BB58   <- [57]
  fs              %58.0 = FrameState         R     0x5629e3da30c0+1757: [%57.1], env=e1.2
  void                    Deopt              !v    %58.0   !
BB56   <- [55, 65]
  goto BB57
BB88   <- [86]
  void                    Assume             D     %86.5, %86.6 (Typecheck@0x5629e2899e20[Type#65])
  lgl$-           %88.1 = CastType           d     dn %86.4
  lgl$-           %88.2 = AsLogical                %88.1
  lgl$-           %88.3 = LOr                      %83.0, %88.2
  goto BB85
BB87   <- [86]
  fs              %87.0 = FrameState         R     0x5629e3da30c0+1186: [%83.0, %86.4], env=e1.2
  void                    Deopt              !v    %87.0   !
BB85   <- [88, 84]
  lgl$-           %85.0 = Phi                      %88.3:BB88, %83.0:BB84
  void                    StVar              lW    canCache, %85.0, e1.2
  goto BB44
BB64   <- [59]
  (cls|spec|blt)  %64.0 = LdFun              !v    stop, e1.2
  fs              %64.1 = FrameState         R     0x5629e3da30c0+1881: [%64.0], env=e1.2
  void                    Deopt              !v    %64.1, DeadCall@0x5629e2899e20[Call#34], %64.0   !
BB60   <- [59]
  val?^ | miss    %60.0 = LdVar              eR    canCache, e1.2
  lgl$#-          %60.1 = IsType                   %60.0 isA lgl$-
  void                    Assume             D     %60.1, %57.3 (Typecheck@0x5629e2899e20[Type#99])
  lgl$-           %60.3 = CastType           d     dn %60.0
  lgl$#-          %60.4 = CheckTrueFalse     e     %60.3
  void                    Branch                   %60.4 -> BB63 (if true) | BB61 (if false)
BB63   <- [60]
  val?^ | miss    %63.0 = LdVar              eR    cacheMethod, e1.2
  lgl$#-          %63.1 = Identical                %63.0, function(f, sig, def, args=names(sig), fdef, i|...
  void                    Assume             D     %63.1, %57.3 (CallTarget@0x5629e2899e20[Call#33])
  prom-           %63.3 = MkArg                    unboundValue, as[0x5629e4ee6df0]_p28, e1.2
  prom-           %63.4 = MkArg                    unboundValue, as[0x5629e4ee6df0]_p29, e1.2
  prom-           %63.5 = MkArg                    unboundValue, as[0x5629e4ee6df0]_p30, e1.2
  prom-           %63.6 = MkArg                    unboundValue, as[0x5629e4ee6df0]_p31, e1.2
  val?            %63.7 = StaticCall         !v    cacheMethod[0x5629e91045c0]("coerce", %63.3, %63.4, missingArg, %63.5, %63.6) { 0 1 2 4n 5n } e1.2
  goto BB62
BB61   <- [60]
  goto BB62
BB62   <- [61, 63]
  goto BB31
Prom 1:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     possibleExtends, <0x5629e4b04390>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, as[0x5629e4ee6df0]_p2, e1.0
  prom-           %1.3  = MkArg                    unboundValue, as[0x5629e4ee6df0]_p3, e1.0
  val?            %1.4  = Call               !     %1.1(%1.2, %1.3) e1.0   <other>
  void                    Return             l     %1.4
Prom 2:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    thisClass, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$+>
  void                    Return             l     %1.3
Prom 3:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    Class, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <str$+>
  void                    Return             l     %1.3
Prom 4:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    object, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <val?>
  void                    Return             l     %1.3
Prom 5:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    thisClass, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$+>
  void                    Return             l     %1.3
Prom 6:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    Class, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <str$+>
  void                    Return             l     %1.3
Prom 7:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    Class, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <str$+>
  void                    Return             l     %1.3
Prom 8:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    thisClass, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$+>
  void                    Return             l     %1.3
Prom 9:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    where, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <env->
  void                    Return             l     %1.3
Prom 10:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    coerceFun, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 11:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     environment, <0x5629e194ab68>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, as[0x5629e4ee6df0]_p12, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <env->
  void                    Return             l     %1.3
Prom 12:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    coerceFun, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <cls>
  void                    Return             l     %1.3
Prom 13:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    thisClass, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$+>
  void                    Return             l     %1.3
Prom 14:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    Class, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <str$+>
  void                    Return             l     %1.3
Prom 15:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    coerceFun, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 16:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    coerceMethods, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <env->
  void                    Return             l     %1.3
Prom 17:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    where, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 18:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    object, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <(int|cls)>
  void                    Return             l     %1.3
Prom 19:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    object, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <val?>
  void                    Return             l     %1.3
Prom 20:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    sig, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str+>
  void                    Return             l     %1.3
Prom 21:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    coerceFun, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <cls>
  void                    Return             l     %1.3
Prom 22:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     getMethodsForDispatch, <0x5629e3d60f28>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, as[0x5629e4ee6df0]_p23, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <env->
  void                    Return             l     %1.3
Prom 23:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    coerceFun, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <cls>
  void                    Return             l     %1.3
Prom 24:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    object, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <val?>
  void                    Return             l     %1.3
Prom 25:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    Class, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <str$+>
  void                    Return             l     %1.3
Prom 26:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    Class, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 27:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    thisClass, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$+>
  void                    Return             l     %1.3
Prom 28:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    sig, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str+>
  void                    Return             l     %1.3
Prom 29:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    asMethod, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <cls>
  void                    Return             l     %1.3
Prom 30:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    coerceFun, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <cls>
  void                    Return             l     %1.3
Prom 31:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    inherited, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <lgl$->
  void                    Return             l     %1.3
Prom 32:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    asMethod, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <cls->
  void                    Return             l     %1.3
Prom 33:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    thisClass, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$+>
  void                    Return             l     %1.3
Prom 34:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    ClassDef, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <other>
  void                    Return             l     %1.3
Prom 35:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    where, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <env->
  void                    Return             l     %1.3
Prom 36:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    sig, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str+>
  void                    Return             l     %1.3
Prom 37:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     c, <0x5629e15a4940>, e1.0
  val?            %1.2  = NamedCall          !     %1.1(from=true, to=false) e1.0   <lgl+>
  void                    Return             l     %1.2
Prom 38:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    coerceFun, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <cls>
  void                    Return             l     %1.3
Prom 39:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    coerceMethods, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <env->
  void                    Return             l     %1.3
Prom 40:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    Class, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <str$+>
  void                    Return             l     %1.3
Prom 41:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    where, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 42:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    ext, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <other>
  void                    Return             l     %1.3
Prom 43:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    ext, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <other>
  void                    Return             l     %1.3
Prom 44:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    ext, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 45:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    test, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 46:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     @, <0x5629e15a3bd8>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, as[0x5629e4ee6df0]_p47, e1.0
  prom-           %1.3  = MkArg                    unboundValue, as[0x5629e4ee6df0]_p48, e1.0
  val?            %1.4  = Call               !     %1.1(%1.2, %1.3) e1.0   <cls->
  void                    Return             l     %1.4
Prom 47:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    ext, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 48:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    coerce, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 49:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     @, <0x5629e15a3bd8>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, as[0x5629e4ee6df0]_p50, e1.0
  prom-           %1.3  = MkArg                    unboundValue, as[0x5629e4ee6df0]_p51, e1.0
  val?            %1.4  = Call               !     %1.1(%1.2, %1.3) e1.0   <lgl$->
  void                    Return             l     %1.4
Prom 50:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    ext, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 51:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    simple, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 52:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    Class, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 53:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    ClassDef, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 54:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    where, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 55:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     body, <0x5629e489d120>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, as[0x5629e4ee6df0]_p56, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <lgl$->
  void                    Return             l     %1.3
Prom 56:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    test, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <cls->
  void                    Return             l     %1.3

│ as[0x5629e4ee6df0]                                                           │
└──────────────────────────────────────────────────────────────────────────────┘
