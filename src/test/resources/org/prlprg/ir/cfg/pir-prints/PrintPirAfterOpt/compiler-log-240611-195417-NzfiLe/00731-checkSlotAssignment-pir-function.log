
┌──────────────────────────────────────────────────────────────────────────────┐
│ checkSlotAssignment[0x5629e5daa440]                                          │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;NonRefl0,NonRefl1,NonRefl2           │
│ Properties:                                                                  │
├────── PIR Version After Optimizations
checkSlotAssignment[0x5629e5daa440]
BB0
  goto BB1
BB1   <- [0]
  val?^           %1.0  = LdArg                    2
  val?^           %1.1  = LdArg                    1
  val?^           %1.2  = LdArg                    0
  cp              %1.3  = Checkpoint                -> BB2 (default) | BB19 (if assume failed)
BB2   <- [1]
  val?^ | miss    %2.0  = LdVar              eR    class, <env 0x5629e1bab378>
  lgl$#-          %2.1  = Identical                <blt class>, %2.0   <true>
  void                    Assume             D     %2.1, %1.3 (DeadBranchReached@0x5629e2f93820[Test#0])
  env             e2.3  = MkEnv              l     obj=%1.2, name=%1.1, value=%1.0, parent=<env 0x5629e1bab378>, context 1
  val?            %2.4  = Force!<lazy>       !vrd  %1.2,    <cls>
  val?            %2.5  = CallBuiltin        !v    class(%2.4) e2.3   <str$+>
  void                    StVar              lW    cl, %2.5, e2.3
  cp              %2.7  = Checkpoint                -> BB4 (default) | BB3 (if assume failed)
BB19   <- [1]
  env             e19.0 = (MkEnv)            l     obj=%1.2, name=%1.1, value=%1.0, parent=<env 0x5629e1bab378>, context 1
  fs              %19.1 = FrameState         R     0x5629e9fcde10+0: [], env=e19.0
  void                    Deopt              !v    %19.1
BB4   <- [2]
  val?^ | miss    %4.0  = LdVar              eR    getClass, e2.3
  lgl$#-          %4.1  = Identical                %4.0, function(Class, .Force=FALSE, where=.classEnv(|...
  void                    Assume             D     %4.1, %2.7 (CallTarget@0x5629e2f93820[Call#1])
  prom-           %4.3  = MkArg                    unboundValue, checkSlotAssignment[0x5629e5daa440]_p0 (!refl), e2.3
  val?            %4.4  = StaticCall         !v    getClass[0x5629ed00e3f0](%4.3) e2.3   <other>
  void                    StVar              lW    ClassDef, %4.4, e2.3
  (cls|spec|blt)  %4.6  = LdFun              !v    @, <0x5629e15a3bd8>, e2.3
  prom-           %4.7  = MkArg                    unboundValue, checkSlotAssignment[0x5629e5daa440]_p1, e2.3
  prom-           %4.8  = MkArg                    unboundValue, checkSlotAssignment[0x5629e5daa440]_p2, e2.3
  val?            %4.9  = Call               !v    %4.6(%4.7, %4.8) e2.3   <vec+>
  lgl$#-          %4.10 = IsType                   %4.9 isA val+   <true>
  cp              %4.11 = Checkpoint                -> BB6 (default) | BB5 (if assume failed)
BB3   <- [2]
  fs              %3.0  = FrameState         R     0x5629e9fcde10+105: [], env=e2.3
  void                    Deopt              !v    %3.0   !
BB6   <- [4]
  void                    Assume             D     %4.10, %4.11 (DeadBranchReached@0x5629e2f93820[Test#1])
  val?^ | miss    %6.1  = LdVar              eR    name, e2.3
  val?            %6.2  = Force!<lazy>       !v    %6.1, e2.3   <str$->
  lgl$#-          %6.3  = IsType                   %6.2 isA val?-
  cp              %6.4  = Checkpoint                -> BB8 (default) | BB7 (if assume failed)
BB5   <- [4]
  fs              %5.0  = FrameState         R     0x5629e9fcde10+188: [%4.9], env=e2.3
  void                    Deopt              !v    %5.0   !
BB8   <- [6]
  lgl$#-          %8.0  = IsType                   %4.9 isA val?+
  void                    Assume             D     %8.0, %6.4 (Typecheck@0x5629e2f93820[Type#7])
  val?+           %8.2  = CastType           d     dn %4.9   <vec+>
  void                    Assume             D     %6.3, %6.4 (Typecheck@0x5629e2f93820[Type#9])
  val?-           %8.4  = CastType           d     dn %6.2   <str$->
  val?            %8.5  = Extract2_1D        wed   %8.2, %8.4, elided   <str$+>
  lgl$-           %8.6  = Is                       %8.5, NULL
  void                    StVar              lW    slotClass, %8.5, e2.3
  cp              %8.8  = Checkpoint                -> BB10 (default) | BB9 (if assume failed)
BB7   <- [6]
  fs              %7.0  = FrameState         R     0x5629e9fcde10+233: [%4.9, %6.2], env=e2.3
  void                    Deopt              !v    %7.0   !
BB10   <- [8]
  val             %10.0 = ChkMissing         e     %8.5
  lgl$#-          %10.1 = CheckTrueFalse     e     %8.6
  void                    Branch                   %10.1 -> BB18 (if true) | BB11 (if false)
BB9   <- [8]
  fs              %9.0  = FrameState         R     0x5629e9fcde10+254: [], env=e2.3
  void                    Deopt              !v    %9.0   !
BB18   <- [10]
  (cls|spec|blt)  %18.0 = LdFun              !v    stop, e2.3
  fs              %18.1 = FrameState         R     0x5629e9fcde10+289: [%18.0], env=e2.3
  void                    Deopt              !v    %18.1, DeadCall@0x5629e2f93820[Call#3], %18.0   !
BB11   <- [10]
  val?^ | miss    %11.0 = LdVar              eR    class, e2.3
  lgl$#-          %11.1 = Identical                <blt class>, %11.0   <true>
  void                    Assume             D     %11.1, %8.8 (DeadBranchReached@0x5629e2f93820[Test#2])
  val?^ | miss    %11.3 = LdVar              eR    value, e2.3
  val?            %11.4 = Force!<lazy>       !v    %11.3, e2.3   <(str|cls)>
  val?            %11.5 = CallBuiltin        !v    class(%11.4) e2.3   <str$+>
  void                    StVar              lW    valueClass, %11.5, e2.3
  cp              %11.7 = Checkpoint                -> BB13 (default) | BB12 (if assume failed)
BB13   <- [11]
  val?^ | miss    %13.0 = LdVar              eR    .identC, e2.3
  lgl$#-          %13.1 = Identical                %13.0, function(c1=NULL, c2=NULL) <(rir::DispatchTabl|...
  void                    Assume             D     %13.1, %11.7 (CallTarget@0x5629e2f93820[Call#8])
  prom-           %13.3 = MkArg                    unboundValue, checkSlotAssignment[0x5629e5daa440]_p3, e2.3
  prom-           %13.4 = MkArg                    unboundValue, checkSlotAssignment[0x5629e5daa440]_p4 (!refl), e2.3
  val?            %13.5 = StaticCall         !v    .identC[0x5629e51e5630](%13.3, %13.4) e2.3   <lgl$->
  lgl$#-          %13.6 = IsType                   %13.5 isA lgl$-
  cp              %13.7 = Checkpoint                -> BB15 (default) | BB14 (if assume failed)
BB12   <- [11]
  fs              %12.0 = FrameState         R     0x5629e9fcde10+435: [], env=e2.3
  void                    Deopt              !v    %12.0   !
BB15   <- [13]
  void                    Assume             D     %13.6, %13.7 (Typecheck@0x5629e2f93820[Type#22])
  lgl$-           %15.1 = CastType           d     dn %13.5
  lgl$#-          %15.2 = CheckTrueFalse     e     %15.1
  void                    Branch                   %15.2 -> BB17 (if true) | BB16 (if false)
BB14   <- [13]
  fs              %14.0 = FrameState         R     0x5629e9fcde10+472: [%13.5], env=e2.3
  void                    Deopt              !v    %14.0   !
BB17   <- [15]
  val?^ | miss    %17.0 = LdVar              eR    value, e2.3
  void                    Visible            v     
  val?            %17.2 = Force!<wrapped>    !     %17.0, e2.3   <(str|cls)>
  void                    Return             l     %17.2
BB16   <- [15]
  (cls|spec|blt)  %16.0 = LdFun              !v    possibleExtends, e2.3
  fs              %16.1 = FrameState         R     0x5629e9fcde10+508: [%16.0], env=e2.3
  void                    Deopt              !v    %16.1, DeadCall@0x5629e2f93820[Call#9], %16.0   !
Prom 0:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    cl, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$+>
  void                    Return             l     %1.3
Prom 1:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    ClassDef, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 2:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    slots, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 3:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    slotClass, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$+>
  void                    Return             l     %1.3
Prom 4:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    valueClass, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$+>
  void                    Return             l     %1.3

│ checkSlotAssignment[0x5629e5daa440]                                          │
└──────────────────────────────────────────────────────────────────────────────┘
