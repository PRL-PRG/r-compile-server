
┌──────────────────────────────────────────────────────────────────────────────┐
│ extends[0x5629e5a3a800]                                                      │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;NonRefl0 miss: 3                     │
│ Properties:                                                                  │
├────── PIR Version After Optimizations
extends[0x5629e5a3a800]
BB0
  goto BB1
BB1   <- [0]
  val?^           %1.0  = LdArg                    0
  cp              %1.1  = Checkpoint                -> BB2 (default) | BB129 (if assume failed)
BB2   <- [1]
  val?^ | miss    %2.0  = LdVar              eR    is.character, <env 0x5629e1bab378>
  lgl$#-          %2.1  = Identical                <blt is.character>, %2.0   <true>
  void                    Assume             D     %2.1, %1.1 (DeadBranchReached@0x5629e3ca48f0[Test#0])
  env             e2.3  = MkEnv              l     class1=%1.0, class2(miss)=missingArg, maybe(miss)=true, fullInfo(miss)=false, parent=<env 0x5629e1bab378>, context 1
  val?            %2.4  = Force!<lazy>       !vr   %1.0,    <(str|other)>
  lgl$#-          %2.5  = CallSafeBuiltin    wed   is.character(%2.4)    <lgl$->
  cp              %2.6  = Checkpoint                -> BB4 (default) | BB3 (if assume failed)
BB129   <- [1]
  env             e129.0 = (MkEnv)            l     class1=%1.0, class2(miss)=missingArg, maybe(miss)=true, fullInfo(miss)=false, parent=<env 0x5629e1bab378>, context 1
  fs              %129.1 = FrameState         R     0x5629e489aea0+0: [], env=e129.0
  void                    Deopt              !v    %129.1
BB4   <- [2]
  void                    Branch                   %2.5 -> BB121 (if true) | BB5 (if false)
BB3   <- [2]
  fs              %3.0  = FrameState         R     0x5629e489aea0+91: [%2.5], env=e2.3
  void                    Deopt              !v    %3.0
BB121   <- [4]
  val?^ | miss    %121.0 = LdVar              eR    length, <env 0x5629e1bab378>
  lgl$#-          %121.1 = Identical                <blt length>, %121.0   <true>
  void                    Assume             D     %121.1, %2.6 (DeadBranchReached@0x5629e3ca48f0[Test#1])
  lgl$#-          %121.3 = IsType                   %2.4 isA val?+
  void                    Assume             D     %121.3, %2.6 (Typecheck@0x5629e3ca48f0[Type#10])
  val?+           %121.5 = CastType           d     dn %2.4   <str$+>
  (int|real)$-    %121.6 = CallSafeBuiltin    wed   length(%121.5)    <int$->
  lgl$#-          %121.7 = IsType                   %121.6 isA int$-
  cp              %121.8 = Checkpoint                -> BB123 (default) | BB122 (if assume failed)
BB5   <- [4]
  val?^ | miss    %5.0  = LdVar              eR    is, <env 0x5629e1bab378>
  lgl$#-          %5.1  = Identical                %5.0, function(object, class2) <(rir::DispatchTable*|...
  void                    Assume             D     %5.1, %2.6 (CallTarget@0x5629e3ca48f0[Call#1])
  prom-           %5.3  = MkArg                    unboundValue, extends[0x5629e5a3a800]_p2 (!refl), e2.3
  val?            %5.4  = Call               !v    function(object, class2) <(rir::DispatchTable*|...(%5.3, "classRepresentation") e2.3   <lgl$->
  lgl$#-          %5.5  = IsType                   %5.4 isA lgl$-
  cp              %5.6  = Checkpoint                -> BB7 (default) | BB6 (if assume failed)
BB123   <- [121]
  void                    Assume             D     %121.7, %121.8 (Typecheck@0x5629e3ca48f0[Type#11])
  int$-           %123.1 = CastType           d     dn %121.6
  lgl$-           %123.2 = Gt                 d     %123.1, 1L, elided   <lgl$->
  lgl$#-          %123.3 = CheckTrueFalse     e     %123.2
  void                    Branch                   %123.3 -> BB128 (if true) | BB124 (if false)
BB122   <- [121]
  fs              %122.0 = FrameState         R     0x5629e489aea0+358: [%121.6], env=e2.3
  void                    Deopt              !v    %122.0
BB7   <- [5]
  void                    Assume             D     %5.5, %5.6 (Typecheck@0x5629e3ca48f0[Type#4])
  lgl$-           %7.1  = CastType           d     dn %5.4
  lgl$#-          %7.2  = CheckTrueFalse     e     %7.1
  void                    Branch                   %7.2 -> BB9 (if true) | BB8 (if false)
BB6   <- [5]
  fs              %6.0  = FrameState         R     0x5629e489aea0+139: [%5.4], env=e2.3
  void                    Deopt              !v    %6.0   !
BB128   <- [123]
  val?            %128.0 = Extract2_1D        wed   %121.5, 1L, elided   <val?_>
  void                    StVar              lW    class1, %128.0, e2.3
  goto BB125
BB124   <- [123]
  goto BB125
BB9   <- [7]
  val?^ | miss    %9.0  = LdVar              eR    class1, e2.3
  val?            %9.1  = Force!<wrapped>    !v    %9.0, e2.3   <other>
  void                    StVar              lW    classDef1, %9.1, e2.3
  (cls|spec|blt)  %9.3  = LdFun              !v    @, <0x5629e15a3bd8>, e2.3
  prom-           %9.4  = MkArg                    unboundValue, extends[0x5629e5a3a800]_p3, e2.3
  prom-           %9.5  = MkArg                    unboundValue, extends[0x5629e5a3a800]_p4, e2.3
  val?            %9.6  = Call               !v    %9.3(%9.4, %9.5) e2.3   <str$+>
  void                    StVar              lW    class1, %9.6, e2.3
  goto BB10
BB8   <- [7]
  (cls|spec|blt)  %8.0  = LdFun              !v    stop, e2.3
  fs              %8.1  = FrameState         R     0x5629e489aea0+155: [%8.0], env=e2.3
  void                    Deopt              !v    %8.1, DeadCall@0x5629e3ca48f0[Call#2], %8.0   !
BB125   <- [124, 128]
  cp              %125.0 = Checkpoint                -> BB127 (default) | BB126 (if assume failed)
BB10   <- [127, 9]
  lgl$-           %10.0 = Missing            eR    class2, e2.3
  lgl$#-          %10.1 = CheckTrueFalse     e     %10.0
  void                    Branch                   %10.1 -> BB81 (if true) | BB11 (if false)
BB127   <- [125]
  val?^ | miss    %127.0 = LdVar              eR    getClassDef, <env 0x5629e1bab378>
  lgl$#-          %127.1 = Identical                %127.0, function(Class, where=topenv(parent.frame()), |...
  void                    Assume             D     %127.1, %125.0 (CallTarget@0x5629e3ca48f0[Call#5])
  prom-           %127.3 = MkArg                    unboundValue, extends[0x5629e5a3a800]_p27 (!refl), e2.3
  val?            %127.4 = StaticCall         !v    getClassDef[0x5629e4105810](%127.3) e2.3   <other>
  void                    StVar              lW    classDef1, %127.4, e2.3
  goto BB10
BB126   <- [125]
  fs              %126.0 = FrameState         R     0x5629e489aea0+453: [], env=e2.3
  void                    Deopt              !v    %126.0
BB81   <- [10]
  val?^ | miss    %81.0 = LdVar              eR    classDef1, e2.3
  val?            %81.1 = Force!<value>      !v    %81.0, e2.3   <other>
  lgl$-           %81.2 = Is                       %81.1, NULL
  lgl$#-          %81.3 = CheckTrueFalse     e     %81.2
  void                    Branch                   %81.3 -> BB120 (if true) | BB82 (if false)
BB11   <- [10]
  void                    StVar              lW    value, nil, e2.3
  cp              %11.1 = Checkpoint                -> BB13 (default) | BB12 (if assume failed)
BB120   <- [81]
  val?^ | miss    %120.0 = LdVar              eR    class1, e2.3
  void                    Visible            v     
  val?            %120.2 = Force!             !     %120.0, e2.3   <val?_>
  goto BB61
BB82   <- [81]
  (cls|spec|blt)  %82.0 = LdFun              !v    @, <0x5629e15a3bd8>, e2.3
  prom-           %82.1 = MkArg                    unboundValue, extends[0x5629e5a3a800]_p22, e2.3
  prom-           %82.2 = MkArg                    unboundValue, extends[0x5629e5a3a800]_p23, e2.3
  val?            %82.3 = Call               !v    %82.0(%82.1, %82.2) e2.3   <vec+>
  void                    StVar              lW    ext, %82.3, e2.3
  cp              %82.5 = Checkpoint                -> BB84 (default) | BB83 (if assume failed)
BB13   <- [11]
  val?^ | miss    %13.0 = LdVar              eR    is.character, e2.3
  lgl$#-          %13.1 = Identical                <blt is.character>, %13.0   <true>
  void                    Assume             D     %13.1, %11.1 (DeadBranchReached@0x5629e3ca48f0[Test#7])
  val?^ | miss    %13.3 = LdVar              eR    class2, e2.3
  val?            %13.4 = Force!<lazy>       !v    %13.3, e2.3   <str$+>
  lgl$#-          %13.5 = CallSafeBuiltin    wed   is.character(%13.4)    <lgl$->
  cp              %13.6 = Checkpoint                -> BB15 (default) | BB14 (if assume failed)
BB12   <- [11]
  fs              %12.0 = FrameState         R     0x5629e489aea0+1206: [], env=e2.3
  void                    Deopt              !v    %12.0   !
BB61   <- [74, 120, 109, 112, 60]
  val?            %61.0 = Phi                      %60.0:BB60, true:BB74, %109.3:BB109, %112.4:BB112, %120.2:BB120
  void                    Return             l     %61.0
BB84   <- [82]
  val?^ | miss    %84.0 = LdVar              eR    isTRUE, e2.3
  lgl$#-          %84.1 = Identical                %84.0, function(x) <(rir::DispatchTable*)0x5629e34ad1|...
  void                    Assume             D     %84.1, %82.5 (CallTarget@0x5629e3ca48f0[Call#7])
  val?^ | miss    %84.3 = LdVar              eR    maybe, e2.3
  val?            %84.4 = Force!<lazy>       !v    %84.3, e2.3   <lgl$->
  val+            %84.5 = CallSafeBuiltin    wed   is.logical(%84.4)    <lgl$->
  lgl$#-          %84.6 = IsType                   %84.5 isA lgl$-
  cp              %84.7 = Checkpoint                -> BB86 (default) | BB85 (if assume failed)
BB83   <- [82]
  fs              %83.0 = FrameState         R     0x5629e489aea0+612: [], env=e2.3
  void                    Deopt              !v    %83.0   !
BB15   <- [13]
  void                    Branch                   %13.5 -> BB76 (if true) | BB16 (if false)
BB14   <- [13]
  fs              %14.0 = FrameState         R     0x5629e489aea0+1297: [%13.5], env=e2.3
  void                    Deopt              !v    %14.0   !
BB86   <- [84]
  void                    Assume             D     %84.6, %84.7 (Typecheck@0x5629e2b27038[Type#2])
  lgl$-           %86.1 = CastType           d     dn %84.5
  lgl$-           %86.2 = AsLogical                %86.1
  lgl$#-          %86.3 = Identical                %86.2, false
  void                    Branch                   %86.3 -> BB119 (if true) | BB87 (if false)
BB85   <- [84]
  fs              %85.0 = FrameState         R     0x5629e489aea0+644: [], env=e2.3
  prom-           %85.1 = MkArg                    %84.4, extends[0x5629e5a3a800]_p24 (!refl), e2.3
  val?~           %85.2 = CastType                 up %85.1
  env             e85.3 = (MkEnv)            l     x=%85.2, parent=R_BaseNamespace, context 0
  fs              %85.4 = FrameState         R     0x5629e19f56d0+91: [%84.5], env=e85.3, next=%85.0
  void                    Deopt              !v    %85.4   !
BB76   <- [15]
  val?^ | miss    %76.0 = LdVar              eR    length, e2.3
  lgl$#-          %76.1 = Identical                <blt length>, %76.0   <true>
  void                    Assume             D     %76.1, %13.6 (DeadBranchReached@0x5629e3ca48f0[Test#8])
  val?^ | miss    %76.3 = LdVar              eR    class2, e2.3
  val?            %76.4 = Force!<wrapped>    !v    %76.3, e2.3   <str$+>
  lgl$#-          %76.5 = IsType                   %76.4 isA val?+
  cp              %76.6 = Checkpoint                -> BB78 (default) | BB77 (if assume failed)
BB16   <- [15]
  goto BB17
BB119   <- [86]
  goto BB88
BB87   <- [86]
  lgl$#-          %87.0 = IsType                   %84.4 isA lgl$-
  void                    Assume             D     %87.0, %84.7 (Typecheck@0x5629e2b27038[Type#4])
  lgl$-           %87.2 = AsLogical                %86.2
  goto BB88
BB78   <- [76]
  void                    Assume             D     %76.5, %76.6 (Typecheck@0x5629e3ca48f0[Type#50])
  val?+           %78.1 = CastType           d     dn %76.4   <str$+>
  (int|real)$-    %78.2 = CallSafeBuiltin    wed   length(%78.1)    <int$->
  lgl$#-          %78.3 = IsType                   %78.2 isA int$-
  cp              %78.4 = Checkpoint                -> BB80 (default) | BB79 (if assume failed)
BB77   <- [76]
  fs              %77.0 = FrameState         R     0x5629e489aea0+1378: [%13.5, <blt length>, %76.4], env=e2.3
  void                    Deopt              !v    %77.0   !
BB17   <- [16, 80]
  lgl$-           %17.0 = Phi                      %80.4:BB80, %13.5:BB16
  cp              %17.1 = Checkpoint                -> BB19 (default) | BB18 (if assume failed)
BB88   <- [119, 87]
  lgl$-           %88.0 = Phi                      %87.2:BB87, %86.2:BB119
  lgl$-           %88.1 = AsLogical                %88.0
  lgl$#-          %88.2 = Identical                %88.1, false
  void                    Branch                   %88.2 -> BB118 (if true) | BB89 (if false)
BB80   <- [78]
  void                    Assume             D     %78.3, %78.4 (Typecheck@0x5629e3ca48f0[Type#51])
  int$-           %80.1 = CastType           d     dn %78.2
  lgl$-           %80.2 = Eq                 d     %80.1, 1L, elided   <lgl$->
  lgl$-           %80.3 = AsLogical                %80.2
  lgl$-           %80.4 = LAnd                     %13.5, %80.3
  goto BB17
BB79   <- [78]
  fs              %79.0 = FrameState         R     0x5629e489aea0+1400: [%13.5, %78.2], env=e2.3
  void                    Deopt              !v    %79.0   !
BB19   <- [17]
  lgl$#-          %19.0 = CheckTrueFalse     e     %17.0
  void                    Branch                   %19.0 -> BB21 (if true) | BB20 (if false)
BB18   <- [17]
  fs              %18.0 = FrameState         R     0x5629e489aea0+1419: [%17.0], env=e2.3
  void                    Deopt              !v    %18.0   !
BB118   <- [88]
  goto BB90
BB89   <- [88]
  lgl$#-          %89.0 = IsType                   %84.4 isA lgl$-
  void                    Assume             D     %89.0, %84.7 (Typecheck@0x5629e2b27038[Type#8])
  lgl$-           %89.2 = CastType           d     dn %84.4
  lgl$-           %89.3 = CallSafeBuiltin    wed   is.na(%89.2)    <lgl$->
  lgl$-           %89.4 = Not                d     %89.3, elided
  lgl$-           %89.5 = AsLogical                %89.4
  lgl$-           %89.6 = LAnd                     %88.1, %89.5
  goto BB90
BB21   <- [19]
  val?^ | miss    %21.0 = LdVar              eR    .identC, e2.3
  lgl$#-          %21.1 = Identical                %21.0, function(c1=NULL, c2=NULL) <(rir::DispatchTabl|...
  void                    Assume             D     %21.1, %17.1 (CallTarget@0x5629e3ca48f0[Call#18])
  prom-           %21.3 = MkArg                    unboundValue, extends[0x5629e5a3a800]_p5, e2.3
  prom-           %21.4 = MkArg                    unboundValue, extends[0x5629e5a3a800]_p6, e2.3
  val?            %21.5 = StaticCall         !v    .identC[0x5629ece8fe50](%21.3, %21.4) e2.3   <lgl$->
  lgl$#-          %21.6 = IsType                   %21.5 isA lgl$-
  cp              %21.7 = Checkpoint                -> BB23 (default) | BB22 (if assume failed)
BB20   <- [19]
  (cls|spec|blt)  %20.0 = LdFun              !v    is, e2.3
  fs              %20.1 = FrameState         R     0x5629e489aea0+1430: [%20.0], env=e2.3
  void                    Deopt              !v    %20.1, DeadCall@0x5629e3ca48f0[Call#15], %20.0   !
BB90   <- [118, 89]
  lgl$-           %90.0 = Phi                      %89.6:BB89, %88.1:BB118
  lgl$-           %90.1 = AsLogical                %90.0
  lgl$#-          %90.2 = Identical                %90.1, false
  void                    Branch                   %90.2 -> BB117 (if true) | BB91 (if false)
BB23   <- [21]
  void                    Assume             D     %21.6, %21.7 (Typecheck@0x5629e3ca48f0[Type#62])
  lgl$-           %23.1 = CastType           d     dn %21.5
  lgl$-           %23.2 = AsLogical                %23.1
  lgl$#-          %23.3 = Identical                %23.2, true
  void                    Branch                   %23.3 -> BB75 (if true) | BB24 (if false)
BB22   <- [21]
  fs              %22.0 = FrameState         R     0x5629e489aea0+1627: [%21.5], env=e2.3
  void                    Deopt              !v    %22.0   !
BB117   <- [90]
  goto BB92
BB91   <- [90]
  lgl$-           %91.0 = AsLogical          e     %84.4
  lgl$-           %91.1 = LAnd                     %90.1, %91.0
  goto BB92
BB75   <- [23]
  goto BB27
BB24   <- [23]
  val?^ | miss    %24.0 = LdVar              eR    .identC, e2.3
  lgl$#-          %24.1 = Identical                %24.0, function(c1=NULL, c2=NULL) <(rir::DispatchTabl|...
  void                    Assume             D     %24.1, %21.7 (CallTarget@0x5629e3ca48f0[Call#19])
  prom-           %24.3 = MkArg                    unboundValue, extends[0x5629e5a3a800]_p7, e2.3
  val?            %24.4 = StaticCall         !v    .identC[0x5629e907d110](%24.3, "ANY") e2.3   <lgl$->
  lgl$#-          %24.5 = IsType                   %24.4 isA lgl$-
  cp              %24.6 = Checkpoint                -> BB26 (default) | BB25 (if assume failed)
BB92   <- [117, 91]
  lgl$-           %92.0 = Phi                      %91.1:BB91, %90.1:BB117
  cp              %92.1 = Checkpoint                -> BB94 (default) | BB93 (if assume failed)
BB27   <- [26, 75]
  lgl$-           %27.0 = Phi                      %26.3:BB26, %23.2:BB75
  lgl$#-          %27.1 = CheckTrueFalse     e     %27.0
  void                    Branch                   %27.1 -> BB74 (if true) | BB28 (if false)
BB26   <- [24]
  void                    Assume             D     %24.5, %24.6 (Typecheck@0x5629e3ca48f0[Type#64])
  lgl$-           %26.1 = CastType           d     dn %24.4
  lgl$-           %26.2 = AsLogical                %26.1
  lgl$-           %26.3 = LOr                      %23.2, %26.2
  goto BB27
BB25   <- [24]
  fs              %25.0 = FrameState         R     0x5629e489aea0+1676: [%23.2, %24.4], env=e2.3
  void                    Deopt              !v    %25.0   !
BB94   <- [92]
  lgl$-           %94.0 = Not                d     %92.0, elided
  lgl$-           %94.1 = AsLogical                %94.0
  lgl$#-          %94.2 = Identical                %94.1, false
  void                    Branch                   %94.2 -> BB116 (if true) | BB95 (if false)
BB93   <- [92]
  fs              %93.0 = FrameState         R     0x5629e489aea0+644: [], env=e2.3
  prom-           %93.1 = MkArg                    %84.4, extends[0x5629e5a3a800]_p24 (!refl), e2.3
  val?~           %93.2 = CastType                 up %93.1
  env             e93.3 = (MkEnv)            l     x=%93.2, parent=R_BaseNamespace, context 0
  fs              %93.4 = FrameState         R     0x5629e19f56d0+342: [%92.0], env=e93.3, next=%93.0
  void                    Deopt              !v    %93.4   !
BB74   <- [27]
  void                    Visible            v     
  goto BB61
BB28   <- [27]
  val?^ | miss    %28.0 = LdVar              eR    classDef1, e2.3
  val?            %28.1 = Force!<value>      !v    %28.0, e2.3   <other>
  lgl$-           %28.2 = Is                       %28.1, NULL
  cp              %28.3 = Checkpoint                -> BB30 (default) | BB29 (if assume failed)
BB116   <- [94]
  goto BB98
BB95   <- [94]
  val?^ | miss    %95.0 = LdVar              eR    length, e2.3
  lgl$#-          %95.1 = Identical                <blt length>, %95.0   <true>
  void                    Assume             D     %95.1, %92.1 (DeadBranchReached@0x5629e3ca48f0[Test#3])
  val?^ | miss    %95.3 = LdVar              eR    ext, e2.3
  lgl$#-          %95.4 = IsType                   %95.3 isA val?~+ | miss
  void                    Assume             D     %95.4, %92.1 (Typecheck@0x5629e3ca48f0[Type#25])
  val?~+ | miss   %95.6 = CastType           d     dn %95.3
  val?+           %95.7 = Force!<value>            %95.6,    <vec+>
  (int|real)$-    %95.8 = CallSafeBuiltin    wed   length(%95.7)    <int$->
  lgl$#-          %95.9 = IsType                   %95.8 isA int$-
  cp              %95.10 = Checkpoint                -> BB97 (default) | BB96 (if assume failed)
BB30   <- [28]
  lgl$-           %30.0 = Not                d     %28.2, elided
  lgl$-           %30.1 = AsLogical                %30.0
  lgl$#-          %30.2 = Identical                %30.1, false
  void                    Branch                   %30.2 -> BB73 (if true) | BB31 (if false)
BB29   <- [28]
  fs              %29.0 = FrameState         R     0x5629e489aea0+1710: [%28.1], env=e2.3
  void                    Deopt              !v    %29.0   !
BB98   <- [116, 97]
  lgl$-           %98.0 = Phi                      %97.4:BB97, %94.1:BB116
  cp              %98.1 = Checkpoint                -> BB100 (default) | BB99 (if assume failed)
BB97   <- [95]
  void                    Assume             D     %95.9, %95.10 (Typecheck@0x5629e3ca48f0[Type#26])
  int$-           %97.1 = CastType           d     dn %95.8
  lgl$-           %97.2 = Gt                 d     %97.1, 0, elided   <lgl$->
  lgl$-           %97.3 = AsLogical                %97.2
  lgl$-           %97.4 = LAnd                     %94.1, %97.3
  goto BB98
BB96   <- [95]
  fs              %96.0 = FrameState         R     0x5629e489aea0+748: [%94.1, %95.8], env=e2.3
  void                    Deopt              !v    %96.0   !
BB73   <- [30]
  goto BB38
BB31   <- [30]
  val?^ | miss    %31.0 = LdVar              eR    %in%, e2.3
  lgl$#-          %31.1 = Identical                %31.0, function(x, table) <(rir::DispatchTable*)0x562|...
  void                    Assume             D     %31.1, %28.3 (CallTarget@0x5629e3ca48f0[Call#20])
  prom-           %31.3 = MkArg                    unboundValue, extends[0x5629e5a3a800]_p8, e2.3
  prom-           %31.4 = MkArg                    unboundValue, extends[0x5629e5a3a800]_p9, e2.3
  val?^           %31.5 = CastType                 up %31.4
  val?^           %31.6 = CastType                 up %31.3
  env             e31.7 = MkEnv              l     x=%31.6, table=%31.5, parent=R_BaseNamespace, context 0
  prom-           %31.8 = MkArg                    unboundValue, extends[0x5629e5a3a800]_p29, e31.7
  val?^           %31.9 = CastType                 up %31.8
  val?^ | miss    %31.10 = LdVar              eR    class2, e2.3
  val?            %31.11 = Force!<wrapped>    !v    %31.10, e2.3   <str$+>
  prom-           %31.12 = MkArg                    %31.11, extends[0x5629e5a3a800]_p8 (!refl), e2.3
  val?~           %31.13 = CastType                 up %31.12
  void                    StArg              lW    x, %31.13, e31.7
  prom-           %31.15 = MkArg                    %31.11, extends[0x5629e5a3a800]_p28 (!refl), e31.7
  val?~           %31.16 = CastType                 up %31.15
  cp              %31.17 = Checkpoint                -> BB33 (default) | BB32 (if assume failed)
BB100   <- [98]
  lgl$#-          %100.0 = CheckTrueFalse     e     %98.0
  void                    Branch                   %100.0 -> BB113 (if true) | BB101 (if false)
BB99   <- [98]
  fs              %99.0 = FrameState         R     0x5629e489aea0+767: [%98.0], env=e2.3
  void                    Deopt              !v    %99.0   !
BB38   <- [73, 37]
  lgl$-           %38.0 = Phi                      %37.4:BB37, %30.1:BB73
  cp              %38.1 = Checkpoint                -> BB40 (default) | BB39 (if assume failed)
BB33   <- [31]
  env             e33.0 = (MkEnv)            l     x=%31.16, table=%31.9, nomatch=0L, incomparables(miss)=nil, parent=R_BaseNamespace, context -1
  lgl$#-          %33.1 = IsEnvStub          R     , e33.0
  void                    Assume             D     %33.1, %31.17 (EnvStubMaterialized@0x5629e18b1b30[Call#unknown])
  val?            %33.3 = Force!<lazy>       !vL   %31.5, e33.0   <val?->
  prom-           %33.4 = MkArg                    %33.3, extends[0x5629e5a3a800]_p29 (!refl), e31.7
  val?~           %33.5 = CastType                 up %33.4
  void                    StArg              lWd   table, %33.5, e33.0
  lgl$#-          %33.7 = IsType                   %33.3 isA val?+
  cp              %33.8 = Checkpoint                -> BB35 (default) | BB34 (if assume failed)
BB32   <- [31]
  fs              %32.0 = FrameState         R     0x5629e489aea0+1765: [%30.1], env=e2.3
  fs              %32.1 = FrameState         R     0x5629e1bd14e0+54: [], env=e31.7, next=%32.0
  env             e32.2 = (MkEnv)            l     x=%31.16, table=%31.9, nomatch=0L, incomparables(miss)=nil, parent=R_BaseNamespace, context -1
  fs              %32.3 = FrameState         R     0x5629e20d9d70+9: [%31.11], env=e32.2, next=%32.1
  void                    Deopt              !v    %32.3   !
BB113   <- [100]
  val?^ | miss    %113.0 = LdVar              eR    vapply, e2.3
  lgl$#-          %113.1 = Identical                %113.0, function(X, FUN, FUN.VALUE, ..., USE.NAMES=TRU|...
  void                    Assume             D     %113.1, %98.1 (CallTarget@0x5629e3ca48f0[Call#9])
  prom-           %113.3 = MkArg                    unboundValue, extends[0x5629e5a3a800]_p25, e2.3
  cls             %113.4 = MkCls                    extends@Prom(26)0, e2.3
  prom-           %113.5 = MkArg                    %113.4, extends[0x5629e5a3a800]_p26 (!refl), e2.3
  val?            %113.6 = StaticCall         !v    vapply[0x5629e7823330](%113.3, %113.5, na-lgl) { 0 1 2 } e2.3   <lgl+>
  void                    StVar              lW    noTest, %113.6, e2.3
  cp              %113.8 = Checkpoint                -> BB115 (default) | BB114 (if assume failed)
BB101   <- [100]
  goto BB102
BB40   <- [38]
  lgl$#-          %40.0 = CheckTrueFalse     e     %38.0
  void                    Branch                   %40.0 -> BB68 (if true) | BB41 (if false)
BB39   <- [38]
  fs              %39.0 = FrameState         R     0x5629e489aea0+1772: [%38.0], env=e2.3
  void                    Deopt              !v    %39.0   !
BB35   <- [33]
  lgl$#-          %35.0 = IsEnvStub          R     , e33.0
  void                    Assume             D     %35.0, %33.8 (EnvStubMaterialized@0x5629e18b1b30[Call#unknown])
  lgl$#-          %35.2 = IsType                   %31.11 isA val?+
  void                    Assume             D     %35.2, %33.8 (Typecheck@0x5629e18b1b30[Type#0])
  val?+           %35.4 = CastType           d     dn %31.11   <(int|str)+>
  void                    Assume             D     %33.7, %33.8 (Typecheck@0x5629e18b1b30[Type#1])
  val?+           %35.6 = CastType           d     dn %33.3   <val?->
  val+            %35.7 = CallSafeBuiltin    wed   match(%35.4, %35.6, 0L, nil)    <int->
  lgl$#-          %35.8 = IsType                   %35.7 isA int-
  cp              %35.9 = Checkpoint                -> BB37 (default) | BB36 (if assume failed)
BB34   <- [33]
  fs              %34.0 = FrameState         R     0x5629e489aea0+1765: [%30.1], env=e2.3
  fs              %34.1 = FrameState         R     0x5629e1bd14e0+54: [], env=e31.7, next=%34.0
  fs              %34.2 = FrameState         R     0x5629e20d9d70+23: [%31.11, %33.3], env=e33.0, next=%34.1
  void                    Deopt              !v    %34.2   !
BB115   <- [113]
  val?^ | miss    %115.0 = LdVar              eR    ext, e2.3
  lgl$#-          %115.1 = IsType                   %115.0 isA val?~+ | miss
  void                    Assume             D     %115.1, %113.8 (Typecheck@0x5629e3ca48f0[Type#30])
  val?~+ | miss   %115.3 = CastType           d     dn %115.0
  val?+           %115.4 = Force!<value>            %115.3,    <vec+>
  lgl$#-          %115.5 = IsType                   %115.4 isA val+   <true>
  void                    Assume             D     %115.5, %113.8 (DeadBranchReached@0x5629e3ca48f0[Test#4])
  val             %115.7 = ChkMissing         e     %113.6
  lgl$#-          %115.8 = IsType                   %115.7 isA lgl+
  void                    Assume             D     %115.8, %113.8 (Typecheck@0x5629e3ca48f0[Type#32])
  lgl+            %115.10 = CastType           d     dn %115.7
  val?            %115.11 = Extract1_1D        wed   %115.4, %115.10, elided   <vec+>
  void                    StVar              lW    ext, %115.11, e2.3
  goto BB102
BB114   <- [113]
  fs              %114.0 = FrameState         R     0x5629e489aea0+834: [], env=e2.3
  void                    Deopt              !v    %114.0   !
BB102   <- [101, 115]
  val?^ | miss    %102.0 = LdVar              eR    fullInfo, e2.3
  val?            %102.1 = Force!<lazy>       !v    %102.0, e2.3   <lgl$->
  lgl$#-          %102.2 = CheckTrueFalse     we    %102.1
  cp              %102.3 = Checkpoint                -> BB104 (default) | BB103 (if assume failed)
BB68   <- [40]
  (cls|spec|blt)  %68.0 = LdFun              !v    @, <0x5629e15a3bd8>, e2.3
  prom-           %68.1 = MkArg                    unboundValue, extends[0x5629e5a3a800]_p20, e2.3
  prom-           %68.2 = MkArg                    unboundValue, extends[0x5629e5a3a800]_p21, e2.3
  val?            %68.3 = Call               !v    %68.0(%68.1, %68.2) e2.3   <vec+>
  lgl$#-          %68.4 = IsType                   %68.3 isA val+   <true>
  cp              %68.5 = Checkpoint                -> BB70 (default) | BB69 (if assume failed)
BB41   <- [40]
  val?^ | miss    %41.0 = LdVar              eR    getClassDef, e2.3
  lgl$#-          %41.1 = Identical                %41.0, function(Class, where=topenv(parent.frame()), |...
  void                    Assume             D     %41.1, %38.1 (CallTarget@0x5629e3ca48f0[Call#23])
  prom-           %41.3 = MkArg                    unboundValue, extends[0x5629e5a3a800]_p13, e2.3
  val?            %41.4 = StaticCall         !v    getClassDef[0x5629e4105810](%41.3) e2.3   <other>
  void                    StVar              lW    classDef2, %41.4, e2.3
  goto BB42
BB37   <- [35]
  void                    Assume             D     %35.8, %35.9 (Typecheck@0x5629e2c03688[Type#2])
  int-            %37.1 = CastType           d     dn %35.7
  lgl-            %37.2 = Gt                 wed   %37.1, 0L, elided   <lgl->
  lgl$-           %37.3 = AsLogical                %37.2
  lgl$-           %37.4 = LAnd                     %30.1, %37.3
  goto BB38
BB36   <- [35]
  fs              %36.0 = FrameState         R     0x5629e489aea0+1765: [%30.1], env=e2.3
  fs              %36.1 = FrameState         R     0x5629e1bd14e0+54: [], env=e31.7, next=%36.0
  fs              %36.2 = FrameState         R     0x5629e20d9d70+69: [%35.7], env=e33.0, next=%36.1
  void                    Deopt              !v    %36.2   !
BB104   <- [102]
  void                    Branch                   %102.2 -> BB110 (if true) | BB105 (if false)
BB103   <- [102]
  fs              %103.0 = FrameState         R     0x5629e489aea0+924: [%102.2], env=e2.3
  void                    Deopt              !v    %103.0   !
BB70   <- [68]
  void                    Assume             D     %68.4, %68.5 (DeadBranchReached@0x5629e3ca48f0[Test#10])
  val?^ | miss    %70.1 = LdVar              eR    class2, e2.3
  val?            %70.2 = Force!<wrapped>    !v    %70.1, e2.3   <str$+>
  lgl$#-          %70.3 = IsType                   %70.2 isA val?+
  cp              %70.4 = Checkpoint                -> BB72 (default) | BB71 (if assume failed)
BB69   <- [68]
  fs              %69.0 = FrameState         R     0x5629e489aea0+1866: [%68.3], env=e2.3
  void                    Deopt              !v    %69.0   !
BB42   <- [41, 72]
  val?^ | miss    %42.0 = LdVar              eR    value, e2.3
  val?            %42.1 = Force!<value>      !v    %42.0, e2.3   <(nil|other)>
  lgl$-           %42.2 = Is                       %42.1, NULL
  cp              %42.3 = Checkpoint                -> BB44 (default) | BB43 (if assume failed)
BB110   <- [104]
  val?^ | miss    %110.0 = LdVar              eR    ext !upd, e2.3
  val?            %110.1 = Force!             !v    %110.0, e2.3   <val?_>
  val?^ | miss    %110.2 = LdVar              eR    class1, e2.3
  val?            %110.3 = Force!             !v    %110.2, e2.3   <val?_>
  lgl$#-          %110.4 = IsType                   %110.3 isA val?+
  lgl$#-          %110.5 = IsType                   %110.1 isA val?+
  cp              %110.6 = Checkpoint                -> BB112 (default) | BB111 (if assume failed)
BB105   <- [104]
  val?^ | miss    %105.0 = LdVar              eR    c, e2.3
  lgl$#-          %105.1 = Identical                <blt c>, %105.0   <true>
  void                    Assume             D     %105.1, %102.3 (DeadBranchReached@0x5629e3ca48f0[Test#5])
  val?^ | miss    %105.3 = LdVar              eR    class1, e2.3
  val?            %105.4 = Force!<wrapped>    !v    %105.3, e2.3   <str$+>
  cp              %105.5 = Checkpoint                -> BB107 (default) | BB106 (if assume failed)
BB72   <- [70]
  lgl$#-          %72.0 = IsType                   %68.3 isA val?+
  void                    Assume             D     %72.0, %70.4 (Typecheck@0x5629e3ca48f0[Type#76])
  val?+           %72.2 = CastType           d     dn %68.3   <vec+>
  void                    Assume             D     %70.3, %70.4 (Typecheck@0x5629e3ca48f0[Type#78])
  val?+           %72.4 = CastType           d     dn %70.2   <str$+>
  val?            %72.5 = Extract2_1D        wed   %72.2, %72.4, elided   <other>
  void                    StVar              lW    value, %72.5, e2.3
  goto BB42
BB71   <- [70]
  fs              %71.0 = FrameState         R     0x5629e489aea0+1911: [%68.3, %70.2], env=e2.3
  void                    Deopt              !v    %71.0   !
BB44   <- [42]
  lgl$#-          %44.0 = CheckTrueFalse     e     %42.2
  void                    Branch                   %44.0 -> BB65 (if true) | BB45 (if false)
BB43   <- [42]
  fs              %43.0 = FrameState         R     0x5629e489aea0+1941: [%42.1], env=e2.3
  void                    Deopt              !v    %43.0   !
BB112   <- [110]
  void                    Assume             D     %110.5, %110.6 (Typecheck@0x5629e3ca48f0[Type#43])
  val?+           %112.1 = CastType           d     dn %110.1   <val?_>
  void                    Assume             D     %110.4, %110.6 (Typecheck@0x5629e3ca48f0[Type#44])
  val?+           %112.3 = CastType           d     dn %110.3   <val?_>
  val?+           %112.4 = Subassign2_1D      wed   true, %112.1, %112.3, elided   <val?_>
  void                    StVar              lW    ext, %112.4, e2.3
  val+            %112.6 = ChkMissing         e     %112.4
  void                    Visible            v     
  goto BB61
BB111   <- [110]
  fs              %111.0 = FrameState         R     0x5629e489aea0+1161: [true, %110.1, %110.3], env=e2.3
  void                    Deopt              !v    %111.0   !
BB107   <- [105]
  val?^ | miss    %107.0 = LdVar              eR    names, e2.3
  lgl$#-          %107.1 = Identical                <blt names>, %107.0   <true>
  void                    Assume             D     %107.1, %105.5 (DeadBranchReached@0x5629e3ca48f0[Test#6])
  val?^ | miss    %107.3 = LdVar              eR    ext, e2.3
  lgl$#-          %107.4 = IsType                   %107.3 isA val?~+ | miss
  void                    Assume             D     %107.4, %105.5 (Typecheck@0x5629e3ca48f0[Type#40])
  val?~+ | miss   %107.6 = CastType           d     dn %107.3
  val?+           %107.7 = Force!<value>            %107.6,    <vec+>
  val+            %107.8 = CallSafeBuiltin    wed   names(%107.7)    <str->
  cp              %107.9 = Checkpoint                -> BB109 (default) | BB108 (if assume failed)
BB106   <- [105]
  fs              %106.0 = FrameState         R     0x5629e489aea0+1003: [<blt c>, %105.4], env=e2.3
  void                    Deopt              !v    %106.0   !
BB65   <- [44]
  val?^ | miss    %65.0 = LdVar              eR    possibleExtends, e2.3
  lgl$#-          %65.1 = Identical                %65.0, function(class1, class2, ClassDef1=getClassDef|...
  void                    Assume             D     %65.1, %42.3 (CallTarget@0x5629e3ca48f0[Call#25])
  prom-           %65.3 = MkArg                    unboundValue, extends[0x5629e5a3a800]_p16, e2.3
  prom-           %65.4 = MkArg                    unboundValue, extends[0x5629e5a3a800]_p17, e2.3
  prom-           %65.5 = MkArg                    unboundValue, extends[0x5629e5a3a800]_p18, e2.3
  prom-           %65.6 = MkArg                    unboundValue, extends[0x5629e5a3a800]_p19, e2.3
  val?            %65.7 = StaticCall         !v    possibleExtends[0x5629ebca8840](%65.3, %65.4, %65.5, %65.6) e2.3   <lgl$->
  lgl$#-          %65.8 = IsType                   %65.7 isA lgl$-
  cp              %65.9 = Checkpoint                -> BB67 (default) | BB66 (if assume failed)
BB45   <- [44]
  goto BB46
BB109   <- [107]
  lgl$#-          %109.0 = IsType                   %105.4 isA val?+
  void                    Assume             D     %109.0, %107.9 (Typecheck@0x5629e3ca48f0[Type#38])
  val?+           %109.2 = CastType           d     dn %105.4   <str$+>
  val+            %109.3 = CallSafeBuiltin    vwed  c(%109.2, %107.8)    <str->
  goto BB61
BB108   <- [107]
  fs              %108.0 = FrameState         R     0x5629e489aea0+1099: [<blt c>, %105.4, %107.8], env=e2.3
  void                    Deopt              !v    %108.0   !
BB67   <- [65]
  void                    Assume             D     %65.8, %65.9 (Typecheck@0x5629e3ca48f0[Type#85])
  lgl$-           %67.1 = CastType           d     dn %65.7
  void                    StVar              lW    value, %67.1, e2.3
  goto BB46
BB66   <- [65]
  fs              %66.0 = FrameState         R     0x5629e489aea0+2009: [%65.7], env=e2.3
  void                    Deopt              !v    %66.0   !
BB46   <- [45, 67]
  val?^ | miss    %46.0 = LdVar              eR    fullInfo, e2.3
  val?            %46.1 = Force!<lazy>       !v    %46.0, e2.3   <lgl$->
  lgl$#-          %46.2 = CheckTrueFalse     we    %46.1
  cp              %46.3 = Checkpoint                -> BB48 (default) | BB47 (if assume failed)
BB48   <- [46]
  void                    Branch                   %46.2 -> BB64 (if true) | BB49 (if false)
BB47   <- [46]
  fs              %47.0 = FrameState         R     0x5629e489aea0+2038: [%46.2], env=e2.3
  void                    Deopt              !v    %47.0   !
BB64   <- [48]
  val?^ | miss    %64.0 = LdVar              eR    value, e2.3
  void                    Visible            v     
  val?            %64.2 = Force!<value>      !     %64.0, e2.3   <other>
  goto BB60
BB49   <- [48]
  val?^ | miss    %49.0 = LdVar              eR    is.logical, e2.3
  lgl$#-          %49.1 = Identical                <blt is.logical>, %49.0   <true>
  void                    Assume             D     %49.1, %46.3 (DeadBranchReached@0x5629e3ca48f0[Test#11])
  val?^ | miss    %49.3 = LdVar              eR    value, e2.3
  val?            %49.4 = Force!<value>      !v    %49.3, e2.3   <(lgl|other)>
  val+            %49.5 = CallSafeBuiltin    wed   is.logical(%49.4)    <lgl$->
  lgl$#-          %49.6 = IsType                   %49.5 isA lgl$-
  cp              %49.7 = Checkpoint                -> BB51 (default) | BB50 (if assume failed)
BB60   <- [64, 59]
  val?            %60.0 = Phi                      %59.0:BB59, %64.2:BB64
  goto BB61
BB51   <- [49]
  void                    Assume             D     %49.6, %49.7 (Typecheck@0x5629e3ca48f0[Type#89])
  lgl$-           %51.1 = CastType           d     dn %49.5
  lgl$#-          %51.2 = CheckTrueFalse     e     %51.1
  void                    Branch                   %51.2 -> BB63 (if true) | BB52 (if false)
BB50   <- [49]
  fs              %50.0 = FrameState         R     0x5629e489aea0+2134: [%49.5], env=e2.3
  void                    Deopt              !v    %50.0   !
BB63   <- [51]
  val?^ | miss    %63.0 = LdVar              eR    value, e2.3
  lgl$#-          %63.1 = IsType                   %63.0 isA lgl$-
  void                    Assume             D     %63.1, %49.7 (Typecheck@0x5629e3ca48f0[Type#99])
  lgl$-           %63.3 = CastType           d     dn %63.0
  void                    Visible            v     
  goto BB59
BB52   <- [51]
  (cls|spec|blt)  %52.0 = LdFun              !v    @, <0x5629e15a3bd8>, e2.3
  prom-           %52.1 = MkArg                    unboundValue, extends[0x5629e5a3a800]_p14, e2.3
  prom-           %52.2 = MkArg                    unboundValue, extends[0x5629e5a3a800]_p15, e2.3
  val?            %52.3 = Call               !v    %52.0(%52.1, %52.2) e2.3   <lgl$->
  lgl$#-          %52.4 = IsType                   %52.3 isA lgl$-
  cp              %52.5 = Checkpoint                -> BB54 (default) | BB53 (if assume failed)
BB59   <- [63, 58]
  val?            %59.0 = Phi                      %58.0:BB58, %63.3:BB63
  goto BB60
BB54   <- [52]
  void                    Assume             D     %52.4, %52.5 (Typecheck@0x5629e3ca48f0[Type#92])
  lgl$-           %54.1 = CastType           d     dn %52.3
  lgl$-           %54.2 = AsLogical                %54.1
  lgl$#-          %54.3 = Identical                %54.2, true
  void                    Branch                   %54.3 -> BB56 (if true) | BB55 (if false)
BB53   <- [52]
  fs              %53.0 = FrameState         R     0x5629e489aea0+2182: [%52.3], env=e2.3
  void                    Deopt              !v    %53.0   !
BB56   <- [54]
  lgl$#-          %56.0 = CheckTrueFalse     e     %54.2
  void                    Branch                   %56.0 -> BB62 (if true) | BB57 (if false)
BB55   <- [54]
  (cls|spec|blt)  %55.0 = LdFun              !v    isTRUE, e2.3
  fs              %55.1 = FrameState         R     0x5629e489aea0+2199: [%54.2, %55.0], env=e2.3
  void                    Deopt              !v    %55.1, DeadCall@0x5629e3ca48f0[Call#28], %55.0   !
BB62   <- [56]
  void                    Visible            v     
  goto BB58
BB57   <- [56]
  val?^ | miss    %57.0 = LdVar              eR    maybe, e2.3
  void                    Visible            v     
  val?            %57.2 = Force!             !     %57.0, e2.3   <val?_>
  goto BB58
BB58   <- [62, 57]
  val?            %58.0 = Phi                      %57.2:BB57, true:BB62
  goto BB59
Prom 2:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    class1, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <other>
  void                    Return             l     %1.3
Prom 3:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    classDef1, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 4:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    className, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 5:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    class1, e1.0
  val?            %1.2  = Force<wrapped>     !v    %1.1, e1.0   <str$+>
  val?            %1.3  = Extract2_1D        !v    %1.2, 1L, e1.0   <str$->
  void                    Visible            v     
  void                    Return             l     %1.3
Prom 6:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    class2, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <str$+>
  void                    Return             l     %1.3
Prom 7:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    class2, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <str$+>
  void                    Return             l     %1.3
Prom 8:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    class2, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <str$+>
  void                    Return             l     %1.3
Prom 9:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     names, <0x5629e15a4470>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, extends[0x5629e5a3a800]_p10, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <str->
  void                    Return             l     %1.3
Prom 10:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     @, <0x5629e15a3bd8>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, extends[0x5629e5a3a800]_p11, e1.0
  prom-           %1.3  = MkArg                    unboundValue, extends[0x5629e5a3a800]_p12, e1.0
  val?            %1.4  = Call               !     %1.1(%1.2, %1.3) e1.0   <vec+>
  void                    Return             l     %1.4
Prom 11:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    classDef1, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 12:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    contains, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 13:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    class2, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <str$+>
  void                    Return             l     %1.3
Prom 14:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    value, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 15:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    simple, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 16:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    class1, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <str$+>
  void                    Return             l     %1.3
Prom 17:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    class2, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <str$+>
  void                    Return             l     %1.3
Prom 18:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    classDef1, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <other>
  void                    Return             l     %1.3
Prom 19:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    classDef2, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <other>
  void                    Return             l     %1.3
Prom 20:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    classDef1, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 21:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    contains, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 22:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    classDef1, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 23:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    contains, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 24:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    maybe, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <lgl$->
  void                    Return             l     %1.3
Prom 25:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    ext, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 26:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  cls             %1.1  = MkCls                    extends@Prom(26)0, e1.0
  void                    Return             l     %1.1
Prom 27:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    class1, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <str$+>
  void                    Return             l     %1.3
Prom 28:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    x, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <(int|str)+>
  void                    Return             l     %1.3
Prom 29:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    table, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <val?->
  void                    Return             l     %1.3

│ extends[0x5629e5a3a800]                                                      │
└──────────────────────────────────────────────────────────────────────────────┘
