
┌──────────────────────────────────────────────────────────────────────────────┐
│ .getGeneric[0x5604dda22860]                                                  │
│ Context: CorrOrd,!TMany,Argmatch;Eager1,NonRefl1                             │
│ Properties:                                                                  │
├────── PIR Version After Optimizations
.getGeneric[0x5604dda22860]
BB0
  goto BB1
BB1   <- [0]
  val?^ | miss    %1.0  = LdArg                    2
  val?~ | miss    %1.1  = LdArg                    1
  val?^ | miss    %1.2  = LdArg                    0
  lgl$#-          %1.3  = Identical                %1.1, missingArg
  lgl$#-          %1.4  = Identical                %1.0, missingArg
  env             e1.5  = MkEnv              l     f=%1.2, where=%1.1, package=%1.0, parent=<env 0x5604dbc61378>, context 1
  void                    Branch                   %1.3 -> BB2 (if true) | BB57 (if false)
BB2   <- [1]
  prom-           %2.0  = MkArg                    unboundValue, .getGeneric[0x5604dda22860]_p0, e1.5
  val?^ | miss    %2.1  = CastType                 up %2.0
  void                    StArg              lW    where, %2.1, e1.5
  goto BB3
BB57   <- [1]
  goto BB3
BB3   <- [2, 57]
  void                    Branch                   %1.4 -> BB56 (if true) | BB4 (if false)
BB56   <- [3]
  void                    StArg              lW    package, "", e1.5
  goto BB5
BB4   <- [3]
  goto BB5
BB5   <- [4, 56]
  cp              %5.0  = Checkpoint                -> BB7 (default) | BB6 (if assume failed)
BB7   <- [5]
  lgl$-           %7.0  = Missing            eR    where, e1.5
  lgl$#-          %7.1  = CheckTrueFalse     e     %7.0
  void                    Branch                   %7.1 -> BB53 (if true) | BB8 (if false)
BB6   <- [5]
  fs              %6.0  = FrameState         R     0x5604de28e080+0: [], env=e1.5
  void                    Deopt              !v    %6.0
BB53   <- [7]
  val?^ | miss    %53.0 = LdVar              eR    .getGenericFromCache, <env 0x5604dbc61378>
  lgl$#-          %53.1 = Identical                %53.0, function(name, where, pkg="") <(rir::DispatchT|...
  void                    Assume             D     %53.1, %5.0 (CallTarget@0x5604dcd9b3d0[Call#0])
  prom-           %53.3 = MkArg                    unboundValue, .getGeneric[0x5604dda22860]_p3, e1.5
  prom-           %53.4 = MkArg                    unboundValue, .getGeneric[0x5604dda22860]_p4, e1.5
  prom-           %53.5 = MkArg                    unboundValue, .getGeneric[0x5604dda22860]_p5, e1.5
  ct              %53.6 = PushContext        lCL   %53.3, %53.4, %53.5, .getGenericFromCache(f, where, package), function(name, where, pkg="") <(rir::DispatchT|..., e1.5
  val?^           %53.7 = CastType                 up %53.5
  val?^           %53.8 = CastType                 up %53.4
  val?^           %53.9 = CastType                 up %53.3
  cp              %53.10 = Checkpoint                -> BB55 (default) | BB54 (if assume failed)
BB8   <- [7]
  goto BB9
BB55   <- [53]
  val?^ | miss    %55.0 = LdVar              eR    .getGenericFromCacheTable, <env 0x5604dbc61378>
  lgl$#-          %55.1 = Identical                %55.0, function(name, where, pkg="", table) <(rir::Di|...
  void                    Assume             D     %55.1, %53.10 (CallTarget@0x5604de31a8e0[Call#0])
  env             e55.3 = MkEnv              l     name=%53.9, where=%53.8, pkg=%53.7, parent=<env 0x5604dbc61378>, context 1
  prom-           %55.4 = MkArg                    unboundValue, .getGeneric[0x5604dda22860]_p6, e55.3
  prom-           %55.5 = MkArg                    unboundValue, .getGeneric[0x5604dda22860]_p7, e55.3
  prom-           %55.6 = MkArg                    unboundValue, .getGeneric[0x5604dda22860]_p8, e55.3
  prom-           %55.7 = MkArg                    unboundValue, .getGeneric[0x5604dda22860]_p9, e55.3
  val?            %55.8 = StaticCall         !v    .getGenericFromCacheTable[0x5604dbe23780](%55.4, %55.5, %55.6, %55.7) e55.3   <cls>
  val?            %55.9 = PopContext         C     %55.8, %53.6   <cls>
  goto BB9
BB54   <- [53]
  fs              %54.0 = FrameState         R     0x5604de28e080+65: [], env=e1.5
  env             e54.1 = (MkEnv)            l     name=%53.9, where=%53.8, pkg=%53.7, parent=<env 0x5604dbc61378>, context 1
  fs              %54.2 = FrameState         R     0x5604db8474f0+0: [], env=e54.1, next=%54.0
  void                    Deopt              !v    %54.2   !
BB9   <- [8, 55]
  val?            %9.0  = Phi                      nil:BB8, %55.9:BB55   <(nil|cls)>
  lgl$-           %9.1  = Is                       %9.0, NULL
  void                    StVar              lW    value, %9.0, e1.5
  cp              %9.3  = Checkpoint                -> BB11 (default) | BB10 (if assume failed)
BB11   <- [9]
  val             %11.0 = ChkMissing         e     %9.0
  lgl$#-          %11.1 = CheckTrueFalse     e     %9.1
  void                    Branch                   %11.1 -> BB14 (if true) | BB12 (if false)
BB10   <- [9]
  fs              %10.0 = FrameState         R     0x5604de28e080+79: [], env=e1.5
  void                    Deopt              !v    %10.0   !
BB14   <- [11]
  val?^ | miss    %14.0 = LdVar              eR    is.character, e1.5
  lgl$#-          %14.1 = Identical                <blt is.character>, %14.0   <true>
  void                    Assume             D     %14.1, %9.3 (DeadBranchReached@0x5604dcd9b3d0[Test#0])
  val?^ | miss    %14.3 = LdVar              eR    f, e1.5
  val?            %14.4 = Force!<lazy>       !v    %14.3, e1.5   <str$->
  lgl$#-          %14.5 = CallSafeBuiltin    wed   is.character(%14.4)    <lgl$->
  cp              %14.6 = Checkpoint                -> BB16 (default) | BB15 (if assume failed)
BB12   <- [11]
  goto BB13
BB16   <- [14]
  void                    Branch                   %14.5 -> BB48 (if true) | BB17 (if false)
BB15   <- [14]
  fs              %15.0 = FrameState         R     0x5604de28e080+200: [%14.5], env=e1.5
  void                    Deopt              !v    %15.0   !
BB13   <- [12, 40]
  val?^ | miss    %13.0 = LdVar              eR    value, e1.5
  void                    Visible            v     
  val?            %13.2 = Force!<value>      !     %13.0, e1.5   <(nil|cls)>
  void                    Return             l     %13.2
BB48   <- [16]
  val?^ | miss    %48.0 = LdVar              eR    %in%, e1.5
  lgl$#-          %48.1 = Identical                %48.0, function(x, table) <(rir::DispatchTable*)0x560|...
  void                    Assume             D     %48.1, %14.6 (CallTarget@0x5604dcd9b3d0[Call#2])
  val?^ | miss    %48.3 = LdVar              eR    f, e1.5
  val?            %48.4 = Force!<wrapped>    !v    %48.3, e1.5   <str$->
  lgl$#-          %48.5 = IsType                   %48.4 isA val?+
  cp              %48.6 = Checkpoint                -> BB50 (default) | BB49 (if assume failed)
BB17   <- [16]
  goto BB18
BB50   <- [48]
  void                    Assume             D     %48.5, %48.6 (Typecheck@0x5604db967b30[Type#0])
  val?+           %50.1 = CastType           d     dn %48.4   <(int|str)+>
  val+            %50.2 = CallSafeBuiltin    wed   match(%50.1, "as.double", 0L, nil)    <int->
  lgl$#-          %50.3 = IsType                   %50.2 isA int-
  cp              %50.4 = Checkpoint                -> BB52 (default) | BB51 (if assume failed)
BB49   <- [48]
  prom-           %49.0 = MkArg                    %48.4, .getGeneric[0x5604dda22860]_p2 (!refl), e1.5
  val?~           %49.1 = CastType                 up %49.0
  env             e49.2 = (MkEnv)            l     x=%49.1, table="as.double", parent=R_BaseNamespace, context 0
  env             e49.3 = MaterializeEnv           , e49.2   <@?>
  prom-           %49.4 = MkArg                    %48.4, .getGeneric[0x5604dda22860]_p10 (!refl), e49.3
  val?~           %49.5 = CastType                 up %49.4
  prom-           %49.6 = MkArg                    unboundValue, .getGeneric[0x5604dda22860]_p11 (!refl), e49.3
  val?^           %49.7 = CastType                 up %49.6
  fs              %49.8 = FrameState         R     0x5604de28e080+249: [%14.5], env=e1.5
  fs              %49.9 = FrameState         R     0x5604dbc874e0+54: [], env=e49.3, next=%49.8
  env             e49.10 = (MkEnv)            l     x=%49.5, table=%49.7, nomatch=0L, incomparables(miss)=nil, parent=R_BaseNamespace, context -1
  fs              %49.11 = FrameState         R     0x5604dc18fd70+9: [%48.4], env=e49.10, next=%49.9
  void                    Deopt              !v    %49.11   !
BB18   <- [17, 52]
  lgl$-           %18.0 = Phi                      %52.4:BB52, %14.5:BB17
  lgl$#-          %18.1 = CheckTrueFalse     e     %18.0
  void                    Branch                   %18.1 -> BB47 (if true) | BB19 (if false)
BB52   <- [50]
  void                    Assume             D     %50.3, %50.4 (Typecheck@0x5604dccb9688[Type#2])
  int-            %52.1 = CastType           d     dn %50.2
  lgl-            %52.2 = Gt                 wed   %52.1, 0L, elided   <lgl->
  lgl$-           %52.3 = AsLogical                %52.2
  lgl$-           %52.4 = LAnd                     %14.5, %52.3
  goto BB18
BB51   <- [50]
  prom-           %51.0 = MkArg                    %50.1, .getGeneric[0x5604dda22860]_p2 (!refl), e1.5
  val?~           %51.1 = CastType                 up %51.0
  env             e51.2 = (MkEnv)            l     x=%51.1, table="as.double", parent=R_BaseNamespace, context 0
  env             e51.3 = MaterializeEnv           , e51.2   <@?>
  prom-           %51.4 = MkArg                    "as.double", .getGeneric[0x5604dda22860]_p11 (!refl), e51.3
  val?~           %51.5 = CastType                 up %51.4
  prom-           %51.6 = MkArg                    %50.1, .getGeneric[0x5604dda22860]_p10 (!refl), e51.3
  val?~           %51.7 = CastType                 up %51.6
  fs              %51.8 = FrameState         R     0x5604de28e080+249: [%14.5], env=e1.5
  fs              %51.9 = FrameState         R     0x5604dbc874e0+54: [], env=e51.3, next=%51.8
  env             e51.10 = (MkEnv)            l     incomparables(miss)=nil, nomatch=0L, table=%51.5, x=%51.7, parent=R_BaseNamespace, context -1
  fs              %51.11 = FrameState         R     0x5604dc18fd70+69: [%50.2], env=e51.10, next=%51.9
  void                    Deopt              !v    %51.11   !
BB47   <- [18]
  void                    StVar              lW    f, "as.numeric", e1.5
  goto BB20
BB19   <- [18]
  goto BB20
BB20   <- [19, 47]
  cp              %20.0 = Checkpoint                -> BB22 (default) | BB21 (if assume failed)
BB22   <- [20]
  val?^ | miss    %22.0 = LdVar              eR    is.character, e1.5
  lgl$#-          %22.1 = Identical                <blt is.character>, %22.0   <true>
  void                    Assume             D     %22.1, %20.0 (DeadBranchReached@0x5604dcd9b3d0[Test#1])
  val?^ | miss    %22.3 = LdVar              eR    f, e1.5
  val?            %22.4 = Force!<wrapped>    !v    %22.3, e1.5   <str$->
  lgl$#-          %22.5 = CallSafeBuiltin    wed   is.character(%22.4)    <lgl$->
  cp              %22.6 = Checkpoint                -> BB24 (default) | BB23 (if assume failed)
BB21   <- [20]
  fs              %21.0 = FrameState         R     0x5604de28e080+282: [], env=e1.5
  void                    Deopt              !v    %21.0   !
BB24   <- [22]
  void                    Branch                   %22.5 -> BB44 (if true) | BB25 (if false)
BB23   <- [22]
  fs              %23.0 = FrameState         R     0x5604de28e080+373: [%22.5], env=e1.5
  void                    Deopt              !v    %23.0   !
BB44   <- [24]
  val?^ | miss    %44.0 = LdVar              eR    nzchar, e1.5
  lgl$#-          %44.1 = Identical                <blt nzchar>, %44.0   <true>
  void                    Assume             D     %44.1, %22.6 (DeadBranchReached@0x5604dcd9b3d0[Test#2])
  val?^ | miss    %44.3 = LdVar              eR    f, e1.5
  val?            %44.4 = Force!<wrapped>    !v    %44.3, e1.5   <str$->
  val?            %44.5 = CallBuiltin        !v    nzchar(%44.4) e1.5   <lgl$->
  lgl$#-          %44.6 = IsType                   %44.5 isA lgl$-
  cp              %44.7 = Checkpoint                -> BB46 (default) | BB45 (if assume failed)
BB25   <- [24]
  goto BB26
BB46   <- [44]
  void                    Assume             D     %44.6, %44.7 (Typecheck@0x5604dcd9b3d0[Type#16])
  lgl$-           %46.1 = CastType           d     dn %44.5
  lgl$-           %46.2 = Not                d     %46.1, elided
  lgl$-           %46.3 = AsLogical                %46.2
  lgl$-           %46.4 = LAnd                     %22.5, %46.3
  goto BB26
BB45   <- [44]
  fs              %45.0 = FrameState         R     0x5604de28e080+476: [%22.5, %44.5], env=e1.5
  void                    Deopt              !v    %45.0   !
BB26   <- [25, 46]
  lgl$-           %26.0 = Phi                      %46.4:BB46, %22.5:BB25
  cp              %26.1 = Checkpoint                -> BB28 (default) | BB27 (if assume failed)
BB28   <- [26]
  lgl$#-          %28.0 = CheckTrueFalse     e     %26.0
  void                    Branch                   %28.0 -> BB43 (if true) | BB29 (if false)
BB27   <- [26]
  fs              %27.0 = FrameState         R     0x5604de28e080+484: [%26.0], env=e1.5
  void                    Deopt              !v    %27.0   !
BB43   <- [28]
  (cls|spec|blt)  %43.0 = LdFun              !v    message, e1.5
  fs              %43.1 = FrameState         R     0x5604de28e080+500: [%43.0], env=e1.5
  void                    Deopt              !v    %43.1, DeadCall@0x5604dcd9b3d0[Call#5], %43.0   !
BB29   <- [28]
  val?^ | miss    %29.0 = LdVar              eR    .Call, e1.5
  lgl$#-          %29.1 = Identical                <blt .Call>, %29.0   <true>
  void                    Assume             D     %29.1, %26.1 (DeadBranchReached@0x5604dcd9b3d0[Test#3])
  val?^ | miss    %29.3 = LdVar              eR    C_R_getGeneric, e1.5
  val?            %29.4 = Force!<value>      !v    %29.3, e1.5   <vec>
  val?^ | miss    %29.5 = LdVar              eR    f, e1.5
  val?            %29.6 = Force!<wrapped>    !v    %29.5, e1.5   <str$->
  cp              %29.7 = Checkpoint                -> BB31 (default) | BB30 (if assume failed)
BB31   <- [29]
  val?^ | miss    %31.0 = LdVar              eR    as.environment, e1.5
  lgl$#-          %31.1 = Identical                <blt as.environment>, %31.0   <true>
  void                    Assume             D     %31.1, %29.7 (DeadBranchReached@0x5604dcd9b3d0[Test#4])
  val?^ | miss    %31.3 = LdVar              eR    where, e1.5
  val?            %31.4 = Force!<lazy>       !v    %31.3, e1.5   <env->
  val?            %31.5 = CallBuiltin        !v    as.environment(%31.4) e1.5   <env->
  val?^ | miss    %31.6 = LdVar              eR    package, e1.5
  val?            %31.7 = Force!<lazy>       !v    %31.6, e1.5   <str$->
  val?            %31.8 = CallBuiltin        !v    .Call(%29.4, %29.6, false, %31.5, %31.7) e1.5   <(nil|cls)>
  lgl$-           %31.9 = Is                       %31.8, NULL
  void                    StVar              lW    value, %31.8, e1.5
  cp              %31.11 = Checkpoint                -> BB33 (default) | BB32 (if assume failed)
BB30   <- [29]
  fs              %30.0 = FrameState         R     0x5604de28e080+664: [<blt .Call>, %29.4, %29.6], env=e1.5
  void                    Deopt              !v    %30.0   !
BB33   <- [31]
  val             %33.0 = ChkMissing         e     %31.8
  lgl$-           %33.1 = Not                d     %31.9, elided
  lgl$-           %33.2 = AsLogical                %33.1
  lgl$#-          %33.3 = Identical                %33.2, false
  void                    Branch                   %33.3 -> BB42 (if true) | BB34 (if false)
BB32   <- [31]
  fs              %32.0 = FrameState         R     0x5604de28e080+816: [], env=e1.5
  void                    Deopt              !v    %32.0   !
BB42   <- [33]
  goto BB37
BB34   <- [33]
  val?^ | miss    %34.0 = LdVar              eR    .GlobalEnv, e1.5
  lgl$#-          %34.1 = IsType                   %34.0 isA val?~- | miss
  void                    Assume             D     %34.1, %31.11 (Typecheck@0x5604dcd9b3d0[Type#31])
  val?~- | miss   %34.3 = CastType           d     dn %34.0
  val?-           %34.4 = Force!<value>            %34.3,    <env->
  lgl$#-          %34.5 = IsType                   %34.4 isA val+   <true>
  void                    Assume             D     %34.5, %31.11 (DeadBranchReached@0x5604dcd9b3d0[Test#5])
  val?^ | miss    %34.7 = LdVar              eR    f, e1.5
  val?            %34.8 = Force!<wrapped>    !v    %34.7, e1.5   <str$->
  lgl$#-          %34.9 = IsType                   %34.8 isA val?-
  cp              %34.10 = Checkpoint                -> BB36 (default) | BB35 (if assume failed)
BB37   <- [42, 36]
  lgl$-           %37.0 = Phi                      %36.7:BB36, %33.2:BB42
  lgl$-           %37.1 = AsLogical                %37.0
  lgl$#-          %37.2 = Identical                %37.1, false
  void                    Branch                   %37.2 -> BB39 (if true) | BB38 (if false)
BB36   <- [34]
  void                    Assume             D     %34.9, %34.10 (Typecheck@0x5604dcd9b3d0[Type#33])
  val?-           %36.1 = CastType           d     dn %34.8   <str$->
  val?            %36.2 = Extract2_1D        wed   %34.4, %36.1, elided   <nil->
  lgl$-           %36.3 = Is                       %36.2, NULL
  void                    StVar              lW    vv, %36.2, e1.5
  lgl$-           %36.5 = Not                d     %36.3, elided
  lgl$-           %36.6 = AsLogical                %36.5
  lgl$-           %36.7 = LAnd                     %33.2, %36.6
  goto BB37
BB35   <- [34]
  fs              %35.0 = FrameState         R     0x5604de28e080+897: [%33.2, %34.4, %34.8], env=e1.5
  void                    Deopt              !v    %35.0   !
BB39   <- [37]
  lgl$#-          %39.0 = CheckTrueFalse     e     %37.1
  void                    Branch                   %39.0 -> BB41 (if true) | BB40 (if false)
BB38   <- [37]
  (cls|spec|blt)  %38.0 = LdFun              !v    identical, e1.5
  fs              %38.1 = FrameState         R     0x5604de28e080+940: [%37.1, %38.0], env=e1.5
  void                    Deopt              !v    %38.1, DeadCall@0x5604dcd9b3d0[Call#11], %38.0   !
BB41   <- [39]
  (cls|spec|blt)  %41.0 = LdFun              !v    .cacheGeneric, e1.5
  fs              %41.1 = FrameState         R     0x5604de28e080+995: [%41.0], env=e1.5
  void                    Deopt              !v    %41.1, DeadCall@0x5604dcd9b3d0[Call#12], %41.0   !
BB40   <- [39]
  goto BB13
Prom 0:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    .GlobalEnv, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 2:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    f, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 3:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    f, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 4:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    where, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 5:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    package, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 6:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    name, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 7:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    where, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 8:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    pkg, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 9:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    .genericTable, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <env->
  void                    Return             l     %1.3
Prom 10:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    x, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <(int|str)+>
  void                    Return             l     %1.3
Prom 11:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    table, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <val?->
  void                    Return             l     %1.3

│ .getGeneric[0x5604dda22860]                                                  │
└──────────────────────────────────────────────────────────────────────────────┘
