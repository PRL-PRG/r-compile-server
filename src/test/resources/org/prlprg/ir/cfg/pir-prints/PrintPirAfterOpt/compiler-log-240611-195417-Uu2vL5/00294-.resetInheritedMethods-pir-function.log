
┌──────────────────────────────────────────────────────────────────────────────┐
│ .resetInheritedMethods[0x5604dc10ddd0]                                       │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch                                      │
│ Properties:                                                                  │
├────── PIR Version After Optimizations
.resetInheritedMethods[0x5604dc10ddd0]
BB0
  goto BB1
BB1   <- [0]
  val?^           %1.0  = LdArg                    1
  val?^           %1.1  = LdArg                    0
  cp              %1.2  = Checkpoint                -> BB2 (default) | BB53 (if assume failed)
BB2   <- [1]
  val?^ | miss    %2.0  = LdVar              eR    character, <env 0x5604dbc61378>
  lgl$#-          %2.1  = Identical                %2.0, function(length=0L) <(rir::DispatchTable*)0x56|...
  void                    Assume             D     %2.1, %1.2 (CallTarget@0x5604ded43558[Call#0])
  str-            %2.3  = CallSafeBuiltin    wed   vector("character", 0L)    <str->
  cp              %2.4  = Checkpoint                -> BB4 (default) | BB3 (if assume failed)
BB53   <- [1]
  env             e53.0 = (MkEnv)            l     fenv=%1.1, mtable=%1.0, parent=<env 0x5604dbc61378>, context 1
  fs              %53.1 = FrameState         R     0x5604ddb65700+0: [], env=e53.0
  void                    Deopt              !v    %53.1
BB4   <- [2]
  val?^ | miss    %4.0  = LdVar              eR    names, <env 0x5604dbc61378>
  lgl$#-          %4.1  = Identical                <blt names>, %4.0   <true>
  void                    Assume             D     %4.1, %2.4 (DeadBranchReached@0x5604ded43558[Test#0])
  env             e4.3  = MkEnv              l     fenv=%1.1, mtable=%1.0, allObjects=%2.3, parent=<env 0x5604dbc61378>, context 1
  val?            %4.4  = Force!<lazy>       !v    %1.0, e4.3   <env->
  lgl$#-          %4.5  = IsType                   %4.4 isA val?-
  cp              %4.6  = Checkpoint                -> BB6 (default) | BB5 (if assume failed)
BB3   <- [2]
  env             e3.0  = (MkEnv)            l     fenv=%1.1, mtable=%1.0, parent=<env 0x5604dbc61378>, context 1
  fs              %3.1  = FrameState         R     0x5604ddb65700+27: [], env=e3.0
  env             e3.2  = (MkEnv)            l     length=0L, parent=R_BaseNamespace, context 0
  fs              %3.3  = FrameState         R     0x5604dd4f8cd0+33: [%2.3], env=e3.2, next=%3.1
  void                    Deopt              !v    %3.3
BB6   <- [4]
  void                    Assume             D     %4.5, %4.6 (Typecheck@0x5604ded43558[Type#2])
  val?-           %6.1  = CastType           d     dn %4.4   <env->
  val+            %6.2  = CallSafeBuiltin    wed   names(%6.1)    <str->
  void                    StVar              lW    direct, %6.2, e4.3
  (cls|spec|blt)  %6.4  = LdFun              !v    $, <0x5604db659c10>, e4.3
  prom-           %6.5  = MkArg                    unboundValue, .resetInheritedMethods[0x5604dc10ddd0]_p0, e4.3
  prom-           %6.6  = MkArg                    unboundValue, .resetInheritedMethods[0x5604dc10ddd0]_p1, e4.3
  val?            %6.7  = Call               !v    %6.4(%6.5, %6.6) e4.3   <(nil|env)->
  lgl$-           %6.8  = Is                       %6.7, NULL
  void                    StVar              lW    allTable, %6.7, e4.3
  cp              %6.10 = Checkpoint                -> BB8 (default) | BB7 (if assume failed)
BB5   <- [4]
  fs              %5.0  = FrameState         R     0x5604ddb65700+110: [<blt names>, %4.4], env=e4.3
  void                    Deopt              !v    %5.0   !
BB8   <- [6]
  lgl$-           %8.0  = Not                d     %6.8, elided
  lgl$#-          %8.1  = CheckTrueFalse     e     %8.0
  void                    Branch                   %8.1 -> BB50 (if true) | BB9 (if false)
BB7   <- [6]
  fs              %7.0  = FrameState         R     0x5604ddb65700+199: [%6.7], env=e4.3
  void                    Deopt              !v    %7.0   !
BB50   <- [8]
  val?^ | miss    %50.0 = LdVar              eR    names, e4.3
  lgl$#-          %50.1 = Identical                <blt names>, %50.0   <true>
  void                    Assume             D     %50.1, %6.10 (DeadBranchReached@0x5604ded43558[Test#1])
  val             %50.3 = ChkMissing         e     %6.7
  lgl$#-          %50.4 = IsType                   %6.7 isA val?-
  void                    Assume             D     %50.4, %6.10 (Typecheck@0x5604ded43558[Type#6])
  val?-           %50.6 = CastType           d     dn %6.7   <(nil|env)->
  val+            %50.7 = CallSafeBuiltin    wed   names(%50.6)    <str->
  void                    StVar              lW    allObjects, %50.7, e4.3
  cp              %50.9 = Checkpoint                -> BB52 (default) | BB51 (if assume failed)
BB9   <- [8]
  val?^ | miss    %9.0  = LdVar              eR    new.env, e4.3
  lgl$#-          %9.1  = Identical                %9.0, function(hash=TRUE, parent=parent.frame(), siz|...
  void                    Assume             D     %9.1, %6.10 (CallTarget@0x5604ded43558[Call#3])
  val?^ | miss    %9.3  = LdVar              eR    fenv, e4.3
  val?            %9.4  = Force!<wrapped>    !v    %9.3, e4.3   <env->
  lgl$#-          %9.5  = IsType                   %9.4 isA val?+
  cp              %9.6  = Checkpoint                -> BB11 (default) | BB10 (if assume failed)
BB52   <- [50]
  val?^ | miss    %52.0 = LdVar              eR    remove, e4.3
  lgl$#-          %52.1 = Identical                %52.0, function(..., list=character(), pos=-(1), envi|...
  void                    Assume             D     %52.1, %50.9 (CallTarget@0x5604ded43558[Call#6])
  prom-           %52.3 = MkArg                    unboundValue, .resetInheritedMethods[0x5604dc10ddd0]_p12, e4.3
  prom-           %52.4 = MkArg                    unboundValue, .resetInheritedMethods[0x5604dc10ddd0]_p15 (!refl), e4.3
  val?            %52.5 = StaticCall         !v    remove[0x5604dc1d4410](missingArg, %52.3, missingArg, %52.4) { 1n 3n } e4.3
  goto BB14
BB51   <- [50]
  fs              %51.0 = FrameState         R     0x5604ddb65700+427: [], env=e4.3
  void                    Deopt              !v    %51.0   !
BB11   <- [9]
  void                    Assume             D     %9.5, %9.6 (Typecheck@0x5604dd65bde0[Type#2])
  val?+           %11.1 = CastType           d     dn %9.4   <env+>
  val+            %11.2 = CallSafeBuiltin    wed   new.env(true, %11.1, 29L)    <env->
  void                    StVar              lW    allTable, %11.2, e4.3
  cp              %11.4 = Checkpoint                -> BB13 (default) | BB12 (if assume failed)
BB10   <- [9]
  prom-           %10.0 = MkArg                    unboundValue, .resetInheritedMethods[0x5604dc10ddd0]_p2, e4.3
  val?^           %10.1 = CastType                 up %10.0
  fs              %10.2 = FrameState         R     0x5604ddb65700+248: [], env=e4.3
  env             e10.3 = (MkEnv)            l     size(miss)=29L, parent=%10.1, hash=true, parent=R_BaseNamespace, context 0
  fs              %10.4 = FrameState         R     0x5604dd69f370+23: [true], env=e10.3, next=%10.2
  fs              %10.5 = FrameState         R     0x5604dddc8580+5(pr): [%9.4], env=e4.3, next=%10.4
  void                    Deopt              !v    %10.5   !
BB14   <- [52, 13]
  cp              %14.0 = Checkpoint                -> BB16 (default) | BB15 (if assume failed)
BB13   <- [11]
  val?^ | miss    %13.0 = LdVar              eR    assign, e4.3
  lgl$#-          %13.1 = Identical                %13.0, function(x, value, pos=-(1), envir=as.environm|...
  void                    Assume             D     %13.1, %11.4 (CallTarget@0x5604ded43558[Call#4])
  prom-           %13.3 = MkArg                    unboundValue, .resetInheritedMethods[0x5604dc10ddd0]_p3 (!refl), e4.3
  prom-           %13.4 = MkArg                    unboundValue, .resetInheritedMethods[0x5604dc10ddd0]_p4, e4.3
  val?            %13.5 = StaticCall         !v    assign[0x5604df6e8460](".AllMTable", %13.3, missingArg, %13.4) { 0 1 3n } e4.3
  goto BB14
BB12   <- [11]
  fs              %12.0 = FrameState         R     0x5604ddb65700+262: [], env=e4.3
  void                    Deopt              !v    %12.0   !
BB16   <- [14]
  val?^ | miss    %16.0 = LdVar              eR    anyNA, e4.3
  lgl$#-          %16.1 = Identical                <blt anyNA>, %16.0   <true>
  void                    Assume             D     %16.1, %14.0 (DeadBranchReached@0x5604ded43558[Test#2])
  val?^ | miss    %16.3 = LdVar              eR    match, e4.3
  lgl$#-          %16.4 = Identical                %16.3, function(x, table, nomatch=NA, incomparables=N|...
  void                    Assume             D     %16.4, %14.0 (CallTarget@0x5604ded43558[Call#10])
  val?^ | miss    %16.6 = LdVar              eR    direct, e4.3
  lgl$#-          %16.7 = IsType                   %16.6 isA val?~- | miss
  void                    Assume             D     %16.7, %14.0 (Typecheck@0x5604ded43558[Type#21])
  val?~- | miss   %16.9 = CastType           d     dn %16.6
  val?-           %16.10 = Force!<value>            %16.9,    <str->
  val?^ | miss    %16.11 = LdVar              eR    allObjects, e4.3
  val?            %16.12 = Force!<value>      !v    %16.11, e4.3   <str->
  lgl$#-          %16.13 = IsType                   %16.12 isA val?-
  cp              %16.14 = Checkpoint                -> BB18 (default) | BB17 (if assume failed)
BB15   <- [14]
  fs              %15.0 = FrameState         R     0x5604ddb65700+482: [], env=e4.3
  void                    Deopt              !v    %15.0   !
BB18   <- [16]
  void                    Assume             D     %16.13, %16.14 (Typecheck@0x5604db967b30[Type#1])
  val?-           %18.1 = CastType           d     dn %16.12   <str->
  val+            %18.2 = CallSafeBuiltin    wed   match(%16.10, %18.1, NA, nil)    <int->
  lgl$#-          %18.3 = IsType                   %18.2 isA int-
  cp              %18.4 = Checkpoint                -> BB20 (default) | BB19 (if assume failed)
BB17   <- [16]
  fs              %17.0 = FrameState         R     0x5604ddb65700+579: [<blt anyNA>], env=e4.3
  prom-           %17.1 = MkArg                    unboundValue, .resetInheritedMethods[0x5604dc10ddd0]_p6, e4.3
  val?^           %17.2 = CastType                 up %17.1
  prom-           %17.3 = MkArg                    %16.10, .resetInheritedMethods[0x5604dc10ddd0]_p5 (!refl), e4.3
  val?~           %17.4 = CastType                 up %17.3
  env             e17.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%17.2, x=%17.4, parent=R_BaseNamespace, context 0
  fs              %17.6 = FrameState         R     0x5604dc18fd70+23: [%16.10], env=e17.5, next=%17.0
  fs              %17.7 = FrameState         R     0x5604deed9aa0+5(pr): [%16.12], env=e4.3, next=%17.6
  void                    Deopt              !v    %17.7   !
BB20   <- [18]
  void                    Assume             D     %18.3, %18.4 (Typecheck@0x5604ded43558[Type#23])
  int-            %20.1 = CastType           d     dn %18.2
  val+            %20.2 = CallSafeBuiltin    wed   anyNA(%20.1)    <lgl$->
  lgl$#-          %20.3 = IsType                   %20.2 isA lgl$-
  cp              %20.4 = Checkpoint                -> BB22 (default) | BB21 (if assume failed)
BB19   <- [18]
  fs              %19.0 = FrameState         R     0x5604ddb65700+579: [<blt anyNA>], env=e4.3
  prom-           %19.1 = MkArg                    %18.1, .resetInheritedMethods[0x5604dc10ddd0]_p6 (!refl), e4.3
  val?~           %19.2 = CastType                 up %19.1
  prom-           %19.3 = MkArg                    %16.10, .resetInheritedMethods[0x5604dc10ddd0]_p5 (!refl), e4.3
  val?~           %19.4 = CastType                 up %19.3
  env             e19.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%19.2, x=%19.4, parent=R_BaseNamespace, context 0
  fs              %19.6 = FrameState         R     0x5604dc18fd70+69: [%18.2], env=e19.5, next=%19.0
  void                    Deopt              !v    %19.6   !
BB22   <- [20]
  void                    Assume             D     %20.3, %20.4 (Typecheck@0x5604ded43558[Type#24])
  lgl$-           %22.1 = CastType           d     dn %20.2
  lgl$#-          %22.2 = CheckTrueFalse     e     %22.1
  void                    Branch                   %22.2 -> BB49 (if true) | BB23 (if false)
BB21   <- [20]
  fs              %21.0 = FrameState         R     0x5604ddb65700+601: [%20.2], env=e4.3
  void                    Deopt              !v    %21.0   !
BB49   <- [22]
  val?^ | miss    %49.0 = LdVar              eR    list2env, e4.3
  lgl$#-          %49.1 = Identical                %49.0, function(x, envir=NULL, parent=parent.frame(),|...
  void                    Assume             D     %49.1, %20.4 (CallTarget@0x5604ded43558[Call#11])
  prom-           %49.3 = MkArg                    unboundValue, .resetInheritedMethods[0x5604dc10ddd0]_p9, e4.3
  prom-           %49.4 = MkArg                    unboundValue, .resetInheritedMethods[0x5604dc10ddd0]_p11, e4.3
  val?            %49.5 = StaticCall         !v    list2env[0x5604dbd26f10](%49.3, %49.4) e4.3
  goto BB24
BB23   <- [22]
  goto BB24
BB24   <- [23, 49]
  cp              %24.0 = Checkpoint                -> BB26 (default) | BB25 (if assume failed)
BB26   <- [24]
  val?^ | miss    %26.0 = LdVar              eR    direct, e4.3
  lgl$#-          %26.1 = IsType                   %26.0 isA val?~- | miss
  void                    Assume             D     %26.1, %24.0 (Typecheck@0x5604ded43558[Type#28])
  val?~- | miss   %26.3 = CastType           d     dn %26.0
  val?-           %26.4 = Force!<value>            %26.3,    <str->
  int$-           %26.5 = Length                   %26.4
  int$-           %26.6 = Inc                      0L
  lgl$-           %26.7 = Lt                 d     %26.5, %26.6, elided
  lgl$#-          %26.8 = Identical                %26.7, true
  void                    Branch                   %26.8 -> BB48 (if true) | BB27 (if false)
BB25   <- [24]
  fs              %25.0 = FrameState         R     0x5604ddb65700+655: [], env=e4.3
  void                    Deopt              !v    %25.0   !
BB48   <- [26]
  goto BB46
BB27   <- [26]
  val?            %27.0 = Extract2_1D        wed   %26.4, %26.6, elided
  void                    StVar              lW    d, %27.0, e4.3
  cp              %27.2 = Checkpoint                -> BB29 (default) | BB28 (if assume failed)
BB46   <- [45, 48]
  void                    Visible            v     
  void                    Return             l     nil
BB29   <- [27]
  val?^ | miss    %29.0 = LdVar              eR    allTable, e4.3
  lgl$#-          %29.1 = IsType                   %29.0 isA val?~- | miss
  void                    Assume             D     %29.1, %27.2 (Typecheck@0x5604ded43558[Type#29])
  val?~- | miss   %29.3 = CastType           d     dn %29.0
  val?-           %29.4 = Force!<value>            %29.3,    <env->
  lgl$#-          %29.5 = IsType                   %29.4 isA val+   <true>
  void                    Assume             D     %29.5, %27.2 (DeadBranchReached@0x5604ded43558[Test#4])
  val             %29.7 = ChkMissing         e     %27.0
  lgl$#-          %29.8 = IsType                   %29.7 isA val?~- | miss
  void                    Assume             D     %29.8, %27.2 (Typecheck@0x5604ded43558[Type#31])
  val-            %29.10 = CastType           d     dn %29.7   <str$->
  val?            %29.11 = Extract2_1D        wed   %29.4, %29.10, elided   <(cls|blt)>
  void                    StVar              lW    m, %29.11, e4.3
  cp              %29.13 = Checkpoint                -> BB31 (default) | BB30 (if assume failed)
BB28   <- [27]
  fs              %28.0 = FrameState         R     0x5604ddb65700+709: [%26.4, %26.5, %26.6], env=e4.3
  void                    Deopt              !v    %28.0   !
BB31   <- [29]
  val?^ | miss    %31.0 = LdVar              eR    is, e4.3
  lgl$#-          %31.1 = Identical                %31.0, function(object, class2) <(rir::DispatchTable*|...
  void                    Assume             D     %31.1, %29.13 (CallTarget@0x5604ded43558[Call#13])
  prom-           %31.3 = MkArg                    unboundValue, .resetInheritedMethods[0x5604dc10ddd0]_p7 (!refl), e4.3
  val?            %31.4 = Call               !v    function(object, class2) <(rir::DispatchTable*|...(%31.3, "MethodWithNext") e4.3   <lgl$->
  lgl$#-          %31.5 = IsType                   %31.4 isA lgl$-
  cp              %31.6 = Checkpoint                -> BB33 (default) | BB32 (if assume failed)
BB30   <- [29]
  fs              %30.0 = FrameState         R     0x5604ddb65700+784: [%26.4, %26.5, %26.6], env=e4.3
  void                    Deopt              !v    %30.0   !
BB33   <- [31]
  void                    Assume             D     %31.5, %31.6 (Typecheck@0x5604ded43558[Type#34])
  lgl$-           %33.1 = CastType           d     dn %31.4
  lgl$#-          %33.2 = CheckTrueFalse     e     %33.1
  void                    Branch                   %33.2 -> BB47 (if true) | BB34 (if false)
BB32   <- [31]
  fs              %32.0 = FrameState         R     0x5604ddb65700+821: [%26.4, %26.5, %26.6, %31.4], env=e4.3
  void                    Deopt              !v    %32.0   !
BB47   <- [33]
  (cls|spec|blt)  %47.0 = LdFun              !v    as, e4.3
  fs              %47.1 = FrameState         R     0x5604ddb65700+842: [%26.4, %26.5, %26.6, %47.0], env=e4.3
  void                    Deopt              !v    %47.1, DeadCall@0x5604ded43558[Call#14], %47.0   !
BB34   <- [33]
  goto BB35
BB35   <- [34, 43]
  int$-           %35.0 = Phi                      %26.6:BB34, %35.1:BB43
  int$-           %35.1 = Inc                      %35.0
  lgl$-           %35.2 = Lt                 d     %26.5, %35.1, elided
  lgl$#-          %35.3 = Identical                %35.2, true
  void                    Branch                   %35.3 -> BB45 (if true) | BB36 (if false)
BB45   <- [35]
  goto BB46
BB36   <- [35]
  val?            %36.0 = Extract2_1D        wed   %26.4, %35.1, elided
  void                    StVar              lW    d, %36.0, e4.3
  cp              %36.2 = Checkpoint                -> BB38 (default) | BB37 (if assume failed)
BB38   <- [36]
  val?^ | miss    %38.0 = LdVar              eR    allTable, e4.3
  lgl$#-          %38.1 = IsType                   %38.0 isA val?~- | miss
  void                    Assume             D     %38.1, %36.2 (Typecheck@0x5604ded43558[Type#39])
  val?~- | miss   %38.3 = CastType           d     dn %38.0
  val?-           %38.4 = Force!<value>            %38.3,    <env->
  lgl$#-          %38.5 = IsType                   %38.4 isA val+   <true>
  void                    Assume             D     %38.5, %36.2 (DeadBranchReached@0x5604ded43558[Test#5])
  val             %38.7 = ChkMissing         e     %36.0
  lgl$#-          %38.8 = IsType                   %38.7 isA val?~- | miss
  void                    Assume             D     %38.8, %36.2 (Typecheck@0x5604ded43558[Type#41])
  val-            %38.10 = CastType           d     dn %38.7   <str$->
  val?            %38.11 = Extract2_1D        wed   %38.4, %38.10, elided   <val?>
  void                    StVar              lW    m, %38.11, e4.3
  cp              %38.13 = Checkpoint                -> BB40 (default) | BB39 (if assume failed)
BB37   <- [36]
  fs              %37.0 = FrameState         R     0x5604ddb65700+946: [%26.4, %26.5, %35.1], env=e4.3
  void                    Deopt              !v    %37.0   !
BB40   <- [38]
  val?^ | miss    %40.0 = LdVar              eR    is, e4.3
  lgl$#-          %40.1 = Identical                %40.0, function(object, class2) <(rir::DispatchTable*|...
  void                    Assume             D     %40.1, %38.13 (CallTarget@0x5604ded43558[Call#15])
  prom-           %40.3 = MkArg                    unboundValue, .resetInheritedMethods[0x5604dc10ddd0]_p8 (!refl), e4.3
  val?            %40.4 = Call               !v    function(object, class2) <(rir::DispatchTable*|...(%40.3, "MethodWithNext") e4.3   <lgl$->
  lgl$#-          %40.5 = IsType                   %40.4 isA lgl$-
  cp              %40.6 = Checkpoint                -> BB42 (default) | BB41 (if assume failed)
BB39   <- [38]
  fs              %39.0 = FrameState         R     0x5604ddb65700+1021: [%26.4, %26.5, %35.1], env=e4.3
  void                    Deopt              !v    %39.0   !
BB42   <- [40]
  void                    Assume             D     %40.5, %40.6 (Typecheck@0x5604ded43558[Type#44])
  lgl$-           %42.1 = CastType           d     dn %40.4
  lgl$#-          %42.2 = CheckTrueFalse     e     %42.1
  void                    Branch                   %42.2 -> BB44 (if true) | BB43 (if false)
BB41   <- [40]
  fs              %41.0 = FrameState         R     0x5604ddb65700+1058: [%26.4, %26.5, %35.1, %40.4], env=e4.3
  void                    Deopt              !v    %41.0   !
BB44   <- [42]
  (cls|spec|blt)  %44.0 = LdFun              !v    as, e4.3
  fs              %44.1 = FrameState         R     0x5604ddb65700+1079: [%26.4, %26.5, %35.1, %44.0], env=e4.3
  void                    Deopt              !v    %44.1, DeadCall@0x5604ded43558[Call#16], %44.0   !
BB43   <- [42]
  goto BB35
Prom 0:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    fenv, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <env->
  void                    Return             l     %1.3
Prom 1:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    .AllMTable, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 2:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    fenv, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <env->
  void                    Return             l     %1.3
Prom 3:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    allTable, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <env->
  void                    Return             l     %1.3
Prom 4:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    fenv, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <env->
  void                    Return             l     %1.3
Prom 5:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    direct, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str->
  void                    Return             l     %1.3
Prom 6:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    allObjects, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str->
  void                    Return             l     %1.3
Prom 7:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    m, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <(cls|blt)>
  void                    Return             l     %1.3
Prom 8:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    m, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <val?>
  void                    Return             l     %1.3
Prom 9:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     as.list, <0x5604db784810>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, .resetInheritedMethods[0x5604dc10ddd0]_p10, e1.0
  val?            %1.3  = NamedCall          !     %1.1(%1.2, all.names=true) e1.0   <vec+>
  void                    Return             l     %1.3
Prom 10:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    mtable, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <env->
  void                    Return             l     %1.3
Prom 11:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    allTable, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <env->
  void                    Return             l     %1.3
Prom 12:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     setdiff, <0x5604dbb72350>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, .resetInheritedMethods[0x5604dc10ddd0]_p13, e1.0
  prom-           %1.3  = MkArg                    unboundValue, .resetInheritedMethods[0x5604dc10ddd0]_p14, e1.0
  val?            %1.4  = Call               !     %1.1(%1.2, %1.3) e1.0   <str->
  void                    Return             l     %1.4
Prom 13:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    allObjects, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str->
  void                    Return             l     %1.3
Prom 14:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    direct, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str->
  void                    Return             l     %1.3
Prom 15:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    allTable, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <env->
  void                    Return             l     %1.3

│ .resetInheritedMethods[0x5604dc10ddd0]                                       │
└──────────────────────────────────────────────────────────────────────────────┘
