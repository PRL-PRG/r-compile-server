
┌──────────────────────────────────────────────────────────────────────────────┐
│ as[0x5604dbde7250]                                                           │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;Eager1,NonRefl0,NonRefl1,!Obj0,!Obj1 miss: 2│
│ Properties:                                                                  │
├────── PIR Version After Optimizations
as[0x5604dbde7250]
BB0
  goto BB1
BB1   <- [0]
  val?~+          %1.0  = LdArg                    1
  val?^           %1.1  = LdArg                    0
  env             e1.2  = MkEnv              l     object=%1.1, Class=%1.0, strict(miss)=true, ext(miss)=missingArg, parent=<env 0x5604dbc61378>, context 1
  prom-           %1.3  = MkArg                    unboundValue, as[0x5604dbde7250]_p1, e1.2
  val?^ | miss    %1.4  = CastType                 up %1.3
  void                    StArg              lW    ext, %1.4, e1.2
  cp              %1.6  = Checkpoint                -> BB2 (default) | BB96 (if assume failed)
BB2   <- [1]
  val?^ | miss    %2.0  = LdVar              eR    .class1, <env 0x5604dbc61378>
  lgl$#-          %2.1  = Identical                %2.0, function(x) <(rir::DispatchTable*)0x5604dd3f32|...
  void                    Assume             D     %2.1, %1.6 (CallTarget@0x5604dc597e70[Call#1])
  prom-           %2.3  = MkArg                    unboundValue, as[0x5604dbde7250]_p4 (!refl), e1.2
  ct              %2.4  = PushContext        lCL   %2.3, .class1(object), function(x) <(rir::DispatchTable*)0x5604dd3f32|..., e1.2
  val?^           %2.5  = CastType                 up %2.3
  val?^ | miss    %2.6  = LdVar              eR    class, <env 0x5604dbc61378>
  lgl$#-          %2.7  = Identical                <blt class>, %2.6   <true>
  cp              %2.8  = Checkpoint                -> BB4 (default) | BB3 (if assume failed)
BB96   <- [1]
  fs              %96.0 = FrameState         R     0x5604dd0559b0+0: [], env=e1.2
  void                    Deopt              !v    %96.0
BB4   <- [2]
  void                    Assume             D     %2.7, %2.8 (DeadBranchReached@0x5604df1efa78[Test#0])
  env             e4.1  = MkEnv              l     x=%2.5, parent=<env 0x5604dbc61378>, context 1
  val?            %4.2  = Force!<lazy>       !vr   %2.5,    <(str|cls)>
  val?            %4.3  = CallBuiltin        !v    class(%4.2) e4.1   <str$+>
  void                    StVar              lW    cl, %4.3, e4.1
  lgl$#-          %4.5  = IsType                   %4.3 isA val?+
  cp              %4.6  = Checkpoint                -> BB6 (default) | BB5 (if assume failed)
BB3   <- [2]
  fs              %3.0  = FrameState         R     0x5604dd0559b0+32: [], env=e1.2
  env             e3.1  = (MkEnv)            l     x=%2.5, parent=<env 0x5604dbc61378>, context 1
  fs              %3.2  = FrameState         R     0x5604de9bb980+17: [<blt class>, %2.7], env=e3.1, next=%3.0
  void                    Deopt              !v    %3.2   !
BB6   <- [4]
  val?^ | miss    %6.0  = LdVar              eR    length, e4.1
  lgl$#-          %6.1  = Identical                <blt length>, %6.0   <true>
  void                    Assume             D     %6.1, %4.6 (DeadBranchReached@0x5604df1efa78[Test#1])
  val             %6.3  = ChkMissing         e     %4.3
  void                    Assume             D     %4.5, %4.6 (Typecheck@0x5604df1efa78[Type#2])
  val?+           %6.5  = CastType           d     dn %4.3   <str$+>
  (int|real)$-    %6.6  = CallSafeBuiltin    wed   length(%6.5)    <int$->
  lgl$#-          %6.7  = IsType                   %6.6 isA int$-
  cp              %6.8  = Checkpoint                -> BB8 (default) | BB7 (if assume failed)
BB5   <- [4]
  fs              %5.0  = FrameState         R     0x5604dd0559b0+32: [], env=e1.2
  fs              %5.1  = FrameState         R     0x5604de9bb980+105: [], env=e4.1, next=%5.0
  void                    Deopt              !v    %5.1   !
BB8   <- [6]
  void                    Assume             D     %6.7, %6.8 (Typecheck@0x5604df1efa78[Type#5])
  int$-           %8.1  = CastType           d     dn %6.6
  lgl$-           %8.2  = Gt                 d     %8.1, 1L, elided   <lgl$->
  lgl$#-          %8.3  = CheckTrueFalse     e     %8.2
  void                    Branch                   %8.3 -> BB95 (if true) | BB9 (if false)
BB7   <- [6]
  fs              %7.0  = FrameState         R     0x5604dd0559b0+32: [], env=e1.2
  fs              %7.1  = FrameState         R     0x5604de9bb980+196: [%6.6], env=e4.1, next=%7.0
  void                    Deopt              !v    %7.1   !
BB95   <- [8]
  val?            %95.0 = Extract2_1D        wed   %6.5, 1L, elided   <val?_>
  goto BB10
BB9   <- [8]
  goto BB10
BB10   <- [9, 95]
  val?            %10.0 = Phi                      %6.5:BB9, %95.0:BB95
  val?            %10.1 = PopContext         C     %10.0, %2.4   <str$+>
  void                    StVar              lW    thisClass, %10.1, e1.2
  cp              %10.3 = Checkpoint                -> BB12 (default) | BB11 (if assume failed)
BB12   <- [10]
  val?^ | miss    %12.0 = LdVar              eR    .identC, e1.2
  lgl$#-          %12.1 = Identical                %12.0, function(c1=NULL, c2=NULL) <(rir::DispatchTabl|...
  void                    Assume             D     %12.1, %10.3 (CallTarget@0x5604dc597e70[Call#2])
  prom-           %12.3 = MkArg                    unboundValue, as[0x5604dbde7250]_p5 (!refl), e1.2
  prom-           %12.4 = MkArg                    unboundValue, as[0x5604dbde7250]_p6, e1.2
  ct              %12.5 = PushContext        lCL   %12.3, %12.4, .identC(thisClass, Class), function(c1=NULL, c2=NULL) <(rir::DispatchTabl|..., e1.2
  val?^           %12.6 = CastType                 up %12.4
  val?^           %12.7 = CastType                 up %12.3
  val?^ | miss    %12.8 = LdVar              eR    .Call, <env 0x5604dbc61378>
  lgl$#-          %12.9 = Identical                <blt .Call>, %12.8   <true>
  cp              %12.10 = Checkpoint                -> BB14 (default) | BB13 (if assume failed)
BB11   <- [10]
  fs              %11.0 = FrameState         R     0x5604dd0559b0+46: [], env=e1.2
  void                    Deopt              !v    %11.0   !
BB14   <- [12]
  void                    Assume             D     %12.9, %12.10 (DeadBranchReached@0x5604dca9ad78[Test#0])
  val?^ | miss    %14.1 = LdVar              eR    C_R_identC, <env 0x5604dbc61378>
  env             e14.2 = MkEnv              l     c1=%12.7, c2=%12.6, parent=<env 0x5604dbc61378>, context 1
  val?            %14.3 = Force!<value>      !v    %14.1, e14.2   <vec>
  val?^ | miss    %14.4 = LdVar              eR    c1, e14.2
  val?            %14.5 = Force!<lazy>       !v    %14.4, e14.2   <str$+>
  val?^ | miss    %14.6 = LdVar              eR    c2, e14.2
  val?            %14.7 = Force!<lazy>       !v    %14.6, e14.2   <str$+>
  val?            %14.8 = CallBuiltin        !v    .Call(%14.3, %14.5, %14.7) e14.2   <lgl$->
  lgl$#-          %14.9 = IsType                   %14.8 isA lgl$-
  cp              %14.10 = Checkpoint                -> BB16 (default) | BB15 (if assume failed)
BB13   <- [12]
  fs              %13.0 = FrameState         R     0x5604dd0559b0+83: [], env=e1.2
  env             e13.1 = (MkEnv)            l     c1=%12.7, c2=%12.6, parent=<env 0x5604dbc61378>, context 1
  fs              %13.2 = FrameState         R     0x5604dd86dd00+17: [<blt .Call>, %12.9], env=e13.1, next=%13.0
  void                    Deopt              !v    %13.2   !
BB16   <- [14]
  void                    Assume             D     %14.9, %14.10 (Typecheck@0x5604dca9ad78[Type#6])
  lgl$-           %16.1 = CastType           d     dn %14.8
  val?            %16.2 = PopContext         C     %16.1, %12.5   <lgl$->
  lgl$#-          %16.3 = IsType                   %16.2 isA lgl$-
  cp              %16.4 = Checkpoint                -> BB18 (default) | BB17 (if assume failed)
BB15   <- [14]
  fs              %15.0 = FrameState         R     0x5604dd0559b0+83: [], env=e1.2
  fs              %15.1 = FrameState         R     0x5604dd86dd00+129: [%14.8], env=e14.2, next=%15.0
  void                    Deopt              !v    %15.1   !
BB18   <- [16]
  void                    Assume             D     %16.3, %16.4 (Typecheck@0x5604dc597e70[Type#7])
  lgl$-           %18.1 = CastType           d     dn %16.2
  lgl$-           %18.2 = AsLogical                %18.1
  lgl$#-          %18.3 = Identical                %18.2, true
  void                    Branch                   %18.3 -> BB94 (if true) | BB19 (if false)
BB17   <- [16]
  fs              %17.0 = FrameState         R     0x5604dd0559b0+83: [%16.2], env=e1.2
  void                    Deopt              !v    %17.0   !
BB94   <- [18]
  goto BB26
BB19   <- [18]
  val?^ | miss    %19.0 = LdVar              eR    .identC, e1.2
  lgl$#-          %19.1 = Identical                %19.0, function(c1=NULL, c2=NULL) <(rir::DispatchTabl|...
  void                    Assume             D     %19.1, %16.4 (CallTarget@0x5604dc597e70[Call#3])
  prom-           %19.3 = MkArg                    unboundValue, as[0x5604dbde7250]_p7, e1.2
  ct              %19.4 = PushContext        lCL   %19.3, "ANY", .identC(Class, "ANY"), function(c1=NULL, c2=NULL) <(rir::DispatchTabl|..., e1.2
  val?^           %19.5 = CastType                 up %19.3
  val?^ | miss    %19.6 = LdVar              eR    .Call, <env 0x5604dbc61378>
  lgl$#-          %19.7 = Identical                <blt .Call>, %19.6   <true>
  cp              %19.8 = Checkpoint                -> BB21 (default) | BB20 (if assume failed)
BB26   <- [25, 94]
  lgl$-           %26.0 = Phi                      %25.3:BB25, %18.2:BB94
  cp              %26.1 = Checkpoint                -> BB28 (default) | BB27 (if assume failed)
BB21   <- [19]
  void                    Assume             D     %19.7, %19.8 (DeadBranchReached@0x5604dca9ad78[Test#0])
  val?^ | miss    %21.1 = LdVar              eR    C_R_identC, <env 0x5604dbc61378>
  env             e21.2 = MkEnv              l     c1=%19.5, c2="ANY", parent=<env 0x5604dbc61378>, context 1
  val?            %21.3 = Force!<value>      !v    %21.1, e21.2   <vec>
  val?^ | miss    %21.4 = LdVar              eR    c1, e21.2
  val?            %21.5 = Force!<lazy>       !v    %21.4, e21.2   <str$+>
  val?^ | miss    %21.6 = LdVar              eR    c2, e21.2
  val?            %21.7 = Force!<lazy>       !v    %21.6, e21.2   <str$+>
  val?            %21.8 = CallBuiltin        !v    .Call(%21.3, %21.5, %21.7) e21.2   <lgl$->
  lgl$#-          %21.9 = IsType                   %21.8 isA lgl$-
  cp              %21.10 = Checkpoint                -> BB23 (default) | BB22 (if assume failed)
BB20   <- [19]
  fs              %20.0 = FrameState         R     0x5604dd0559b0+132: [%18.2], env=e1.2
  env             e20.1 = (MkEnv)            l     c1=%19.5, c2="ANY", parent=<env 0x5604dbc61378>, context 1
  fs              %20.2 = FrameState         R     0x5604dd86dd00+17: [<blt .Call>, %19.7], env=e20.1, next=%20.0
  void                    Deopt              !v    %20.2   !
BB28   <- [26]
  lgl$#-          %28.0 = CheckTrueFalse     e     %26.0
  void                    Branch                   %28.0 -> BB93 (if true) | BB29 (if false)
BB27   <- [26]
  fs              %27.0 = FrameState         R     0x5604dd0559b0+139: [%26.0], env=e1.2
  void                    Deopt              !v    %27.0   !
BB23   <- [21]
  void                    Assume             D     %21.9, %21.10 (Typecheck@0x5604dca9ad78[Type#6])
  lgl$-           %23.1 = CastType           d     dn %21.8
  val?            %23.2 = PopContext         C     %23.1, %19.4   <lgl$->
  lgl$#-          %23.3 = IsType                   %23.2 isA lgl$-
  cp              %23.4 = Checkpoint                -> BB25 (default) | BB24 (if assume failed)
BB22   <- [21]
  fs              %22.0 = FrameState         R     0x5604dd0559b0+132: [%18.2], env=e1.2
  fs              %22.1 = FrameState         R     0x5604dd86dd00+129: [%21.8], env=e21.2, next=%22.0
  void                    Deopt              !v    %22.1   !
BB93   <- [28]
  val?^ | miss    %93.0 = LdVar              eR    object, e1.2
  void                    Visible            v     
  val?            %93.2 = Force!<wrapped>    !     %93.0, e1.2   <val?->
  goto BB42
BB29   <- [28]
  val?^ | miss    %29.0 = LdVar              eR    .classEnv, e1.2
  lgl$#-          %29.1 = Identical                %29.0, function(Class, default=.requirePackage("metho|...
  void                    Assume             D     %29.1, %26.1 (CallTarget@0x5604dc597e70[Call#4])
  prom-           %29.3 = MkArg                    unboundValue, as[0x5604dbde7250]_p8, e1.2
  val?            %29.4 = StaticCall         !v    .classEnv[0x5604e2c44280](%29.3, missingArg, false) { 0 2n } e1.2   <env->
  void                    StVar              lW    where, %29.4, e1.2
  cp              %29.6 = Checkpoint                -> BB31 (default) | BB30 (if assume failed)
BB25   <- [23]
  void                    Assume             D     %23.3, %23.4 (Typecheck@0x5604dc597e70[Type#9])
  lgl$-           %25.1 = CastType           d     dn %23.2
  lgl$-           %25.2 = AsLogical                %25.1
  lgl$-           %25.3 = LOr                      %18.2, %25.2
  goto BB26
BB24   <- [23]
  fs              %24.0 = FrameState         R     0x5604dd0559b0+132: [%18.2, %23.2], env=e1.2
  void                    Deopt              !v    %24.0   !
BB42   <- [93, 41]
  val?            %42.0 = Phi                      %41.0:BB41, %93.2:BB93
  void                    Return             l     %42.0
BB31   <- [29]
  val?^ | miss    %31.0 = LdVar              eR    getGeneric, e1.2
  lgl$#-          %31.1 = Identical                %31.0, function(f, mustFind=FALSE, where, package="")|...
  void                    Assume             D     %31.1, %29.6 (CallTarget@0x5604dc597e70[Call#5])
  prom-           %31.3 = MkArg                    unboundValue, as[0x5604dbde7250]_p9 (!refl), e1.2
  val?            %31.4 = StaticCall         !v    getGeneric[0x5604e4494d80]("coerce", missingArg, %31.3) { 0 2n } e1.2   <cls>
  void                    StVar              lW    coerceFun, %31.4, e1.2
  cp              %31.6 = Checkpoint                -> BB33 (default) | BB32 (if assume failed)
BB30   <- [29]
  fs              %30.0 = FrameState         R     0x5604dd0559b0+224: [], env=e1.2
  void                    Deopt              !v    %30.0   !
BB33   <- [31]
  val?^ | miss    %33.0 = LdVar              eR    .getMethodsTable, e1.2
  lgl$#-          %33.1 = Identical                %33.0, function(fdef, env=environment(fdef), check=TR|...
  void                    Assume             D     %33.1, %31.6 (CallTarget@0x5604dc597e70[Call#6])
  prom-           %33.3 = MkArg                    unboundValue, as[0x5604dbde7250]_p10 (!refl), e1.2
  prom-           %33.4 = MkArg                    unboundValue, as[0x5604dbde7250]_p11, e1.2
  val?            %33.5 = StaticCall         !v    .getMethodsTable[0x5604e646f530](%33.3, %33.4, missingArg, true) { 0 1 3n } e1.2   <env->
  void                    StVar              lW    coerceMethods, %33.5, e1.2
  cp              %33.7 = Checkpoint                -> BB35 (default) | BB34 (if assume failed)
BB32   <- [31]
  fs              %32.0 = FrameState         R     0x5604dd0559b0+283: [], env=e1.2
  void                    Deopt              !v    %32.0   !
BB35   <- [33]
  val?^ | miss    %35.0 = LdVar              eR    .quickCoerceSelect, e1.2
  lgl$#-          %35.1 = Identical                %35.0, function(from, to, fdef, methods, where) <(rir|...
  void                    Assume             D     %35.1, %33.7 (CallTarget@0x5604dc597e70[Call#8])
  prom-           %35.3 = MkArg                    unboundValue, as[0x5604dbde7250]_p13, e1.2
  prom-           %35.4 = MkArg                    unboundValue, as[0x5604dbde7250]_p14, e1.2
  prom-           %35.5 = MkArg                    unboundValue, as[0x5604dbde7250]_p15, e1.2
  prom-           %35.6 = MkArg                    unboundValue, as[0x5604dbde7250]_p16 (!refl), e1.2
  prom-           %35.7 = MkArg                    unboundValue, as[0x5604dbde7250]_p17, e1.2
  val?            %35.8 = StaticCall         !v    .quickCoerceSelect[0x5604e3957b60](%35.3, %35.4, %35.5, %35.6, %35.7) e1.2   <(nil|cls)>
  lgl$-           %35.9 = Is                       %35.8, NULL
  void                    StVar              lW    asMethod, %35.8, e1.2
  cp              %35.11 = Checkpoint                -> BB37 (default) | BB36 (if assume failed)
BB34   <- [33]
  fs              %34.0 = FrameState         R     0x5604dd0559b0+351: [], env=e1.2
  void                    Deopt              !v    %34.0   !
BB37   <- [35]
  val             %37.0 = ChkMissing         e     %35.8
  lgl$#-          %37.1 = CheckTrueFalse     e     %35.9
  void                    Branch                   %37.1 -> BB44 (if true) | BB38 (if false)
BB36   <- [35]
  fs              %36.0 = FrameState         R     0x5604dd0559b0+417: [], env=e1.2
  void                    Deopt              !v    %36.0   !
BB44   <- [37]
  val?^ | miss    %44.0 = LdVar              eR    c, e1.2
  lgl$#-          %44.1 = Identical                <blt c>, %44.0   <true>
  void                    Assume             D     %44.1, %35.11 (DeadBranchReached@0x5604dc597e70[Test#0])
  val?^ | miss    %44.3 = LdVar              eR    thisClass, e1.2
  lgl$#-          %44.4 = IsType                   %44.3 isA val?~+ | miss
  void                    Assume             D     %44.4, %35.11 (Typecheck@0x5604dc597e70[Type#28])
  val?~+ | miss   %44.6 = CastType           d     dn %44.3
  val?+           %44.7 = Force!<value>            %44.6,    <str$+>
  val?^ | miss    %44.8 = LdVar              eR    Class, e1.2
  val?            %44.9 = Force!<wrapped>    !v    %44.8, e1.2   <str$+>
  val?            %44.10 = NamedCall          !v    <blt c>(from=%44.7, to=%44.9) e1.2   <str+>
  void                    StVar              lW    sig, %44.10, e1.2
  (cls|spec|blt)  %44.12 = LdFun              !v    selectMethod, <0x5604e054b988>, e1.2
  prom-           %44.13 = MkArg                    unboundValue, as[0x5604dbde7250]_p20, e1.2
  prom-           %44.14 = MkArg                    unboundValue, as[0x5604dbde7250]_p21, e1.2
  prom-           %44.15 = MkArg                    unboundValue, as[0x5604dbde7250]_p22, e1.2
  val?            %44.16 = NamedCall          !v    %44.12("coerce", %44.13, optional=true, useInherited=false, fdef=%44.14, mlist=%44.15) e1.2   <nil->
  lgl$-           %44.17 = Is                       %44.16, NULL
  void                    StVar              lW    asMethod, %44.16, e1.2
  val             %44.19 = ChkMissing         e     %44.16
  lgl$#-          %44.20 = CheckTrueFalse     e     %44.17
  void                    Branch                   %44.20 -> BB46 (if true) | BB45 (if false)
BB38   <- [37]
  goto BB39
BB46   <- [44]
  void                    StVar              lW    canCache, true, e1.2
  void                    StVar              lW    inherited, false, e1.2
  cp              %46.2 = Checkpoint                -> BB48 (default) | BB47 (if assume failed)
BB45   <- [44]
  goto BB39
BB39   <- [38, 45, 65]
  val?^ | miss    %39.0 = LdVar              eR    strict, e1.2
  void                    Visible            v     
  val?            %39.2 = Force!<lazy>       !     %39.0, e1.2   <lgl$->
  lgl$#-          %39.3 = CheckTrueFalse     we    %39.2
  void                    Branch                   %39.3 -> BB43 (if true) | BB40 (if false)
BB48   <- [46]
  val?^ | miss    %48.0 = LdVar              eR    is, e1.2
  lgl$#-          %48.1 = Identical                %48.0, function(object, class2) <(rir::DispatchTable*|...
  void                    Assume             D     %48.1, %46.2 (CallTarget@0x5604dc597e70[Call#12])
  prom-           %48.3 = MkArg                    unboundValue, as[0x5604dbde7250]_p24, e1.2
  prom-           %48.4 = MkArg                    unboundValue, as[0x5604dbde7250]_p25, e1.2
  val?            %48.5 = Call               !v    function(object, class2) <(rir::DispatchTable*|...(%48.3, %48.4) e1.2   <lgl$->
  lgl$#-          %48.6 = IsType                   %48.5 isA lgl$-
  cp              %48.7 = Checkpoint                -> BB50 (default) | BB49 (if assume failed)
BB47   <- [46]
  fs              %47.0 = FrameState         R     0x5604dd0559b0+742: [], env=e1.2
  void                    Deopt              !v    %47.0   !
BB43   <- [39]
  (cls|spec|blt)  %43.0 = LdFun              !     asMethod, e1.2
  prom-           %43.1 = MkArg                    unboundValue, as[0x5604dbde7250]_p19, e1.2
  val?            %43.2 = Call               !     %43.0(%43.1) e1.2   <(str|cls)>
  goto BB41
BB40   <- [39]
  (cls|spec|blt)  %40.0 = LdFun              !     asMethod, e1.2
  prom-           %40.1 = MkArg                    unboundValue, as[0x5604dbde7250]_p18, e1.2
  val?            %40.2 = NamedCall          !     %40.0(%40.1, strict=false) e1.2   <(nil|cls)>
  goto BB41
BB50   <- [48]
  void                    Assume             D     %48.6, %48.7 (Typecheck@0x5604dc597e70[Type#39])
  lgl$-           %50.1 = CastType           d     dn %48.5
  lgl$#-          %50.2 = CheckTrueFalse     e     %50.1
  void                    Branch                   %50.2 -> BB71 (if true) | BB51 (if false)
BB49   <- [48]
  fs              %49.0 = FrameState         R     0x5604dd0559b0+779: [%48.5], env=e1.2
  void                    Deopt              !v    %49.0   !
BB41   <- [40, 43]
  val?            %41.0 = Phi                      %40.2:BB40, %43.2:BB43
  goto BB42
BB71   <- [50]
  val?^ | miss    %71.0 = LdVar              eR    getClassDef, e1.2
  lgl$#-          %71.1 = Identical                %71.0, function(Class, where=topenv(parent.frame()), |...
  void                    Assume             D     %71.1, %48.7 (CallTarget@0x5604dc597e70[Call#13])
  prom-           %71.3 = MkArg                    unboundValue, as[0x5604dbde7250]_p34, e1.2
  prom-           %71.4 = MkArg                    unboundValue, as[0x5604dbde7250]_p35, e1.2
  val?            %71.5 = StaticCall         !v    getClassDef[0x5604e648f960](%71.3, %71.4) e1.2   <other>
  void                    StVar              lW    ClassDef, %71.5, e1.2
  cp              %71.7 = Checkpoint                -> BB73 (default) | BB72 (if assume failed)
BB51   <- [50]
  goto BB52
BB73   <- [71]
  val?^ | miss    %73.0 = LdVar              eR    isFALSE, e1.2
  lgl$#-          %73.1 = Identical                %73.0, function(x) <(rir::DispatchTable*)0x5604de66d9|...
  void                    Assume             D     %73.1, %71.7 (CallTarget@0x5604dc597e70[Call#14])
  val?^ | miss    %73.3 = LdVar              eR    ext, e1.2
  val?            %73.4 = Force!<lazy>       !v    %73.3, e1.2   <other>
  prom-           %73.5 = MkArg                    %73.4, as[0x5604dbde7250]_p36 (!refl), 
  val?            %73.6 = StaticCall         !v    isFALSE[0x5604e5db6540](%73.5) e1.2   <lgl$->
  lgl$#-          %73.7 = IsType                   %73.6 isA lgl$-
  cp              %73.8 = Checkpoint                -> BB75 (default) | BB74 (if assume failed)
BB72   <- [71]
  fs              %72.0 = FrameState         R     0x5604dd0559b0+846: [], env=e1.2
  void                    Deopt              !v    %72.0   !
BB52   <- [51, 87]
  cp              %52.0 = Checkpoint                -> BB54 (default) | BB53 (if assume failed)
BB75   <- [73]
  void                    Assume             D     %73.7, %73.8 (Typecheck@0x5604dc597e70[Type#44])
  lgl$-           %75.1 = CastType           d     dn %73.6
  lgl$#-          %75.2 = CheckTrueFalse     e     %75.1
  void                    Branch                   %75.2 -> BB92 (if true) | BB76 (if false)
BB74   <- [73]
  fs              %74.0 = FrameState         R     0x5604dd0559b0+878: [%73.6], env=e1.2
  void                    Deopt              !v    %74.0   !
BB54   <- [52]
  val?^ | miss    %54.0 = LdVar              eR    asMethod, e1.2
  lgl$#-          %54.1 = IsType                   %54.0 isA val?~- | miss
  void                    Assume             D     %54.1, %52.0 (Typecheck@0x5604dc597e70[Type#74])
  val?~- | miss   %54.3 = CastType           d     dn %54.0
  val?-           %54.4 = Force!<value>            %54.3,    <cls->
  lgl$-           %54.5 = Is                       %54.4, NULL
  lgl$-           %54.6 = AsLogical                %54.5
  lgl$#-          %54.7 = Identical                %54.6, false
  void                    Branch                   %54.7 -> BB56 (if true) | BB55 (if false)
BB53   <- [52]
  fs              %53.0 = FrameState         R     0x5604dd0559b0+1324: [], env=e1.2
  void                    Deopt              !v    %53.0   !
BB92   <- [75]
  (cls|spec|blt)  %92.0 = LdFun              !v    stop, e1.2
  fs              %92.1 = FrameState         R     0x5604dd0559b0+1283: [%92.0], env=e1.2
  void                    Deopt              !v    %92.1, DeadCall@0x5604dc597e70[Call#24], %92.0   !
BB76   <- [75]
  val?^ | miss    %76.0 = LdVar              eR    isTRUE, e1.2
  lgl$#-          %76.1 = Identical                %76.0, function(x) <(rir::DispatchTable*)0x5604dd5185|...
  void                    Assume             D     %76.1, %73.8 (CallTarget@0x5604dc597e70[Call#15])
  val?^ | miss    %76.3 = LdVar              eR    ext, e1.2
  val?            %76.4 = Force!<wrapped>    !v    %76.3, e1.2   <other>
  prom-           %76.5 = MkArg                    %76.4, as[0x5604dbde7250]_p37 (!refl), 
  val?            %76.6 = StaticCall         !v    isTRUE[0x5604e6064750](%76.5) e1.2   <lgl$->
  lgl$#-          %76.7 = IsType                   %76.6 isA lgl$-
  cp              %76.8 = Checkpoint                -> BB78 (default) | BB77 (if assume failed)
BB56   <- [54]
  lgl$#-          %56.0 = CheckTrueFalse     e     %54.6
  void                    Branch                   %56.0 -> BB70 (if true) | BB57 (if false)
BB55   <- [54]
  (cls|spec|blt)  %55.0 = LdFun              !v    extends, e1.2
  fs              %55.1 = FrameState         R     0x5604dd0559b0+1355: [%54.6, %55.0], env=e1.2
  void                    Deopt              !v    %55.1, DeadCall@0x5604dc597e70[Call#27], %55.0   !
BB78   <- [76]
  void                    Assume             D     %76.7, %76.8 (Typecheck@0x5604dc597e70[Type#46])
  lgl$-           %78.1 = CastType           d     dn %76.6
  lgl$#-          %78.2 = CheckTrueFalse     e     %78.1
  void                    Branch                   %78.2 -> BB91 (if true) | BB79 (if false)
BB77   <- [76]
  fs              %77.0 = FrameState         R     0x5604dd0559b0+921: [%76.6], env=e1.2
  void                    Deopt              !v    %77.0   !
BB70   <- [56]
  (cls|spec|blt)  %70.0 = LdFun              !v    getClassDef, e1.2
  fs              %70.1 = FrameState         R     0x5604dd0559b0+1410: [%70.0], env=e1.2
  void                    Deopt              !v    %70.1, DeadCall@0x5604dc597e70[Call#28], %70.0   !
BB57   <- [56]
  lgl$#-          %57.0 = CheckTrueFalse     e     %54.5
  void                    Branch                   %57.0 -> BB69 (if true) | BB58 (if false)
BB91   <- [78]
  (cls|spec|blt)  %91.0 = LdFun              !v    .makeAsMethod, e1.2
  fs              %91.1 = FrameState         R     0x5604dd0559b0+1212: [%91.0], env=e1.2
  void                    Deopt              !v    %91.1, DeadCall@0x5604dc597e70[Call#23], %91.0   !
BB79   <- [78]
  (cls|spec|blt)  %79.0 = LdFun              !v    @, <0x5604db659bd8>, e1.2
  prom-           %79.1 = MkArg                    unboundValue, as[0x5604dbde7250]_p38, e1.2
  prom-           %79.2 = MkArg                    unboundValue, as[0x5604dbde7250]_p39, e1.2
  val?            %79.3 = Call               !v    %79.0(%79.1, %79.2) e1.2   <cls->
  void                    StVar              lW    test, %79.3, e1.2
  cp              %79.5 = Checkpoint                -> BB81 (default) | BB80 (if assume failed)
BB69   <- [57]
  (cls|spec|blt)  %69.0 = LdFun              !v    selectMethod, e1.2
  fs              %69.1 = FrameState         R     0x5604dd0559b0+1643: [%69.0], env=e1.2
  void                    Deopt              !v    %69.1, DeadCall@0x5604dc597e70[Call#31], %69.0   !
BB58   <- [57]
  val?^ | miss    %58.0 = LdVar              eR    canCache, e1.2
  lgl$#-          %58.1 = IsType                   %58.0 isA lgl$-
  void                    Assume             D     %58.1, %52.0 (Typecheck@0x5604dc597e70[Type#87])
  lgl$-           %58.3 = CastType           d     dn %58.0
  lgl$#-          %58.4 = CheckTrueFalse     e     %58.3
  void                    Branch                   %58.4 -> BB68 (if true) | BB59 (if false)
BB81   <- [79]
  val?^ | miss    %81.0 = LdVar              eR    .makeAsMethod, e1.2
  lgl$#-          %81.1 = Identical                %81.0, function(expr, simple, Class, ClassDef, where)|...
  void                    Assume             D     %81.1, %79.5 (CallTarget@0x5604dc597e70[Call#17])
  prom-           %81.3 = MkArg                    unboundValue, as[0x5604dbde7250]_p40, e1.2
  prom-           %81.4 = MkArg                    unboundValue, as[0x5604dbde7250]_p43, e1.2
  prom-           %81.5 = MkArg                    unboundValue, as[0x5604dbde7250]_p46, e1.2
  prom-           %81.6 = MkArg                    unboundValue, as[0x5604dbde7250]_p47, e1.2
  prom-           %81.7 = MkArg                    unboundValue, as[0x5604dbde7250]_p48, e1.2
  val?            %81.8 = StaticCall         !v    .makeAsMethod[0x5604e602a170](%81.3, %81.4, %81.5, %81.6, %81.7) e1.2   <cls->
  void                    StVar              lW    asMethod, %81.8, e1.2
  cp              %81.10 = Checkpoint                -> BB83 (default) | BB82 (if assume failed)
BB80   <- [79]
  fs              %80.0 = FrameState         R     0x5604dd0559b0+983: [], env=e1.2
  void                    Deopt              !v    %80.0   !
BB68   <- [58]
  val?^ | miss    %68.0 = LdVar              eR    .asCoerceMethod, e1.2
  lgl$#-          %68.1 = Identical                %68.0, function(def, thisClass, ClassDef, replace, wh|...
  void                    Assume             D     %68.1, %52.0 (CallTarget@0x5604dc597e70[Call#30])
  prom-           %68.3 = MkArg                    unboundValue, as[0x5604dbde7250]_p30, e1.2
  prom-           %68.4 = MkArg                    unboundValue, as[0x5604dbde7250]_p31, e1.2
  prom-           %68.5 = MkArg                    unboundValue, as[0x5604dbde7250]_p32, e1.2
  prom-           %68.6 = MkArg                    unboundValue, as[0x5604dbde7250]_p33, e1.2
  val?            %68.7 = StaticCall         !v    .asCoerceMethod[0x5604e64924d0](%68.3, %68.4, %68.5, false, %68.6) e1.2   <cls>
  void                    StVar              lW    asMethod, %68.7, e1.2
  goto BB60
BB59   <- [58]
  goto BB60
BB83   <- [81]
  val?^ | miss    %83.0 = LdVar              eR    is.function, e1.2
  lgl$#-          %83.1 = Identical                <blt is.function>, %83.0   <true>
  void                    Assume             D     %83.1, %81.10 (DeadBranchReached@0x5604dc597e70[Test#1])
  val?^ | miss    %83.3 = LdVar              eR    test, e1.2
  lgl$#-          %83.4 = IsType                   %83.3 isA val?~- | miss
  void                    Assume             D     %83.4, %81.10 (Typecheck@0x5604dc597e70[Type#61])
  val?~- | miss   %83.6 = CastType           d     dn %83.3
  val?-           %83.7 = Force!<value>            %83.6,    <cls->
  lgl$#-          %83.8 = CallSafeBuiltin    wed   is.function(%83.7)    <lgl$->
  cp              %83.9 = Checkpoint                -> BB85 (default) | BB84 (if assume failed)
BB82   <- [81]
  fs              %82.0 = FrameState         R     0x5604dd0559b0+1049: [], env=e1.2
  void                    Deopt              !v    %82.0   !
BB60   <- [59, 68]
  val?^ | miss    %60.0 = LdVar              eR    asMethod, e1.2
  val?            %60.1 = Force!<value>      !v    %60.0, e1.2   <cls>
  lgl$-           %60.2 = Is                       %60.1, NULL
  cp              %60.3 = Checkpoint                -> BB62 (default) | BB61 (if assume failed)
BB85   <- [83]
  lgl$#-          %85.0 = Not                d     %83.8, elided
  void                    Branch                   %83.8 -> BB88 (if true) | BB86 (if false)
BB84   <- [83]
  fs              %84.0 = FrameState         R     0x5604dd0559b0+1140: [%83.8], env=e1.2
  void                    Deopt              !v    %84.0   !
BB62   <- [60]
  lgl$#-          %62.0 = CheckTrueFalse     e     %60.2
  void                    Branch                   %62.0 -> BB67 (if true) | BB63 (if false)
BB61   <- [60]
  fs              %61.0 = FrameState         R     0x5604dd0559b0+1757: [%60.1], env=e1.2
  void                    Deopt              !v    %61.0   !
BB88   <- [85]
  val?^ | miss    %88.0 = LdVar              eR    isTRUE, e1.2
  lgl$#-          %88.1 = Identical                %88.0, function(x) <(rir::DispatchTable*)0x5604dd5185|...
  void                    Assume             D     %88.1, %83.9 (CallTarget@0x5604dc597e70[Call#21])
  prom-           %88.3 = MkArg                    unboundValue, as[0x5604dbde7250]_p49, e1.2
  val?            %88.4 = StaticCall         !v    isTRUE[0x5604df30a850](%88.3) e1.2   <lgl$->
  lgl$#-          %88.5 = IsType                   %88.4 isA lgl$-
  cp              %88.6 = Checkpoint                -> BB90 (default) | BB89 (if assume failed)
BB86   <- [85]
  goto BB87
BB67   <- [62]
  (cls|spec|blt)  %67.0 = LdFun              !v    stop, e1.2
  fs              %67.1 = FrameState         R     0x5604dd0559b0+1881: [%67.0], env=e1.2
  void                    Deopt              !v    %67.1, DeadCall@0x5604dc597e70[Call#34], %67.0   !
BB63   <- [62]
  val?^ | miss    %63.0 = LdVar              eR    canCache, e1.2
  lgl$#-          %63.1 = IsType                   %63.0 isA lgl$-
  void                    Assume             D     %63.1, %60.3 (Typecheck@0x5604dc597e70[Type#99])
  lgl$-           %63.3 = CastType           d     dn %63.0
  lgl$#-          %63.4 = CheckTrueFalse     e     %63.3
  void                    Branch                   %63.4 -> BB66 (if true) | BB64 (if false)
BB90   <- [88]
  void                    Assume             D     %88.5, %88.6 (Typecheck@0x5604dc597e70[Type#65])
  lgl$-           %90.1 = CastType           d     dn %88.4
  lgl$-           %90.2 = AsLogical                %90.1
  lgl$-           %90.3 = LOr                      %85.0, %90.2
  goto BB87
BB89   <- [88]
  fs              %89.0 = FrameState         R     0x5604dd0559b0+1186: [%85.0, %88.4], env=e1.2
  void                    Deopt              !v    %89.0   !
BB87   <- [90, 86]
  lgl$-           %87.0 = Phi                      %90.3:BB90, %85.0:BB86
  void                    StVar              lW    canCache, %87.0, e1.2
  goto BB52
BB66   <- [63]
  val?^ | miss    %66.0 = LdVar              eR    cacheMethod, e1.2
  lgl$#-          %66.1 = Identical                %66.0, function(f, sig, def, args=names(sig), fdef, i|...
  void                    Assume             D     %66.1, %60.3 (CallTarget@0x5604dc597e70[Call#33])
  prom-           %66.3 = MkArg                    unboundValue, as[0x5604dbde7250]_p26, e1.2
  prom-           %66.4 = MkArg                    unboundValue, as[0x5604dbde7250]_p27, e1.2
  prom-           %66.5 = MkArg                    unboundValue, as[0x5604dbde7250]_p28, e1.2
  prom-           %66.6 = MkArg                    unboundValue, as[0x5604dbde7250]_p29, e1.2
  val?            %66.7 = StaticCall         !v    cacheMethod[0x5604e39499e0]("coerce", %66.3, %66.4, missingArg, %66.5, %66.6) { 0 1 2 4n 5n } e1.2
  goto BB65
BB64   <- [63]
  goto BB65
BB65   <- [64, 66]
  goto BB39
Prom 1:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     possibleExtends, <0x5604e0561500>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, as[0x5604dbde7250]_p2, e1.0
  prom-           %1.3  = MkArg                    unboundValue, as[0x5604dbde7250]_p3, e1.0
  val?            %1.4  = Call               !     %1.1(%1.2, %1.3) e1.0   <other>
  void                    Return             l     %1.4
Prom 2:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    thisClass, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$+>
  void                    Return             l     %1.3
Prom 3:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    Class, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <str$+>
  void                    Return             l     %1.3
Prom 4:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    object, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <val?>
  void                    Return             l     %1.3
Prom 5:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    thisClass, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$+>
  void                    Return             l     %1.3
Prom 6:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    Class, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <str$+>
  void                    Return             l     %1.3
Prom 7:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    Class, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <str$+>
  void                    Return             l     %1.3
Prom 8:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    thisClass, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$+>
  void                    Return             l     %1.3
Prom 9:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    where, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <env->
  void                    Return             l     %1.3
Prom 10:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    coerceFun, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 11:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     environment, <0x5604dba00b68>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, as[0x5604dbde7250]_p12, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <env->
  void                    Return             l     %1.3
Prom 12:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    coerceFun, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <cls>
  void                    Return             l     %1.3
Prom 13:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    thisClass, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$+>
  void                    Return             l     %1.3
Prom 14:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    Class, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <str$+>
  void                    Return             l     %1.3
Prom 15:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    coerceFun, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 16:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    coerceMethods, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <env->
  void                    Return             l     %1.3
Prom 17:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    where, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 18:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    object, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <(nil|cls)>
  void                    Return             l     %1.3
Prom 19:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    object, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <(str|cls)>
  void                    Return             l     %1.3
Prom 20:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    sig, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str+>
  void                    Return             l     %1.3
Prom 21:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    coerceFun, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <cls>
  void                    Return             l     %1.3
Prom 22:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     getMethodsForDispatch, <0x5604ddabe9b8>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, as[0x5604dbde7250]_p23, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <env->
  void                    Return             l     %1.3
Prom 23:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    coerceFun, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <cls>
  void                    Return             l     %1.3
Prom 24:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    object, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <cls>
  void                    Return             l     %1.3
Prom 25:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    Class, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <str$+>
  void                    Return             l     %1.3
Prom 26:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    sig, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str+>
  void                    Return             l     %1.3
Prom 27:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    asMethod, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <cls>
  void                    Return             l     %1.3
Prom 28:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    coerceFun, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <cls>
  void                    Return             l     %1.3
Prom 29:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    inherited, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <lgl$->
  void                    Return             l     %1.3
Prom 30:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    asMethod, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <cls->
  void                    Return             l     %1.3
Prom 31:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    thisClass, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$+>
  void                    Return             l     %1.3
Prom 32:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    ClassDef, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <other>
  void                    Return             l     %1.3
Prom 33:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    where, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 34:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    Class, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <str$+>
  void                    Return             l     %1.3
Prom 35:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    where, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 36:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    ext, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <other>
  void                    Return             l     %1.3
Prom 37:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    ext, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <other>
  void                    Return             l     %1.3
Prom 38:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    ext, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 39:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    test, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 40:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     @, <0x5604db659bd8>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, as[0x5604dbde7250]_p41, e1.0
  prom-           %1.3  = MkArg                    unboundValue, as[0x5604dbde7250]_p42, e1.0
  val?            %1.4  = Call               !     %1.1(%1.2, %1.3) e1.0   <cls->
  void                    Return             l     %1.4
Prom 41:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    ext, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 42:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    coerce, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 43:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     @, <0x5604db659bd8>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, as[0x5604dbde7250]_p44, e1.0
  prom-           %1.3  = MkArg                    unboundValue, as[0x5604dbde7250]_p45, e1.0
  val?            %1.4  = Call               !     %1.1(%1.2, %1.3) e1.0   <lgl$->
  void                    Return             l     %1.4
Prom 44:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    ext, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 45:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    simple, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 46:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    Class, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 47:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    ClassDef, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 48:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    where, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 49:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     body, <0x5604de914760>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, as[0x5604dbde7250]_p50, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <lgl$->
  void                    Return             l     %1.3
Prom 50:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    test, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <cls->
  void                    Return             l     %1.3

│ as[0x5604dbde7250]                                                           │
└──────────────────────────────────────────────────────────────────────────────┘
