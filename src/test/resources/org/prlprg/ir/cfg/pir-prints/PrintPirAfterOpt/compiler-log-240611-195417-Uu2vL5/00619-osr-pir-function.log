
┌──────────────────────────────────────────────────────────────────────────────┐
│ osr[0x5604df4c6ce0]                                                          │
│ Context: CorrOrd,!TMany                                                      │
│ Properties:                                                                  │
├────── PIR Version After Optimizations
osr[0x5604df4c6ce0]
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  cls$#           %1.1  = LdArg                    0   <cls>
  void                    StVar              lW    maybeMethod, %1.1, e1.0
  void                    StVar              lW    methodFun, %1.1, e1.0
  cp              %1.4  = Checkpoint                -> BB2 (default) | BB70 (if assume failed)
BB2   <- [1]
  val?^ | miss    %2.0  = LdVar              eR    is, e1.0
  lgl$#-          %2.1  = Identical                %2.0, function(object, class2) <(rir::DispatchTable*|...
  void                    Assume             D     %2.1, %1.4 (CallTarget@0x5604e611f228[Call#3])
  prom-           %2.3  = MkArg                    unboundValue, osr[0x5604df4c6ce0]_p0 (!refl), e1.0
  val?            %2.4  = Call               !v    function(object, class2) <(rir::DispatchTable*|...(%2.3, "MethodDefinition") e1.0   <lgl$->
  lgl$#-          %2.5  = IsType                   %2.4 isA lgl$-
  cp              %2.6  = Checkpoint                -> BB4 (default) | BB3 (if assume failed)
BB70   <- [1]
  fs              %70.0 = FrameState         R     0x5604e2e11550+175: [], env=e1.0
  void                    Deopt              !v    %70.0   !
BB4   <- [2]
  void                    Assume             D     %2.5, %2.6 (Typecheck@0x5604e611f228[Type#5])
  lgl$-           %4.1  = CastType           d     dn %2.4
  lgl$#-          %4.2  = CheckTrueFalse     e     %4.1
  void                    Branch                   %4.2 -> BB65 (if true) | BB5 (if false)
BB3   <- [2]
  fs              %3.0  = FrameState         R     0x5604e2e11550+212: [%2.4], env=e1.0
  void                    Deopt              !v    %3.0   !
BB65   <- [4]
  val?^ | miss    %65.0 = LdVar              eR    parent.frame, e1.0
  lgl$#-          %65.1 = Identical                %65.0, function(n=1) <(rir::DispatchTable*)0x5604dd50|...
  void                    Assume             D     %65.1, %2.6 (CallTarget@0x5604e611f228[Call#11])
  val?            %65.3 = StaticCall         !v    parent.frame[0x5604e19b6ae0](1) e1.0   <env->
  void                    StVar              lW    methodEnv, %65.3, e1.0
  void                    StVar              lW    callEnv, %65.3, e1.0
  cp              %65.6 = Checkpoint                -> BB67 (default) | BB66 (if assume failed)
BB5   <- [4]
  val?^ | miss    %5.0  = LdVar              eR    parent.frame, e1.0
  lgl$#-          %5.1  = Identical                %5.0, function(n=1) <(rir::DispatchTable*)0x5604dd50|...
  void                    Assume             D     %5.1, %2.6 (CallTarget@0x5604e611f228[Call#4])
  val?            %5.3  = StaticCall         !v    parent.frame[0x5604e19b6ae0](1) e1.0   <env->
  void                    StVar              lW    callEnv, %5.3, e1.0
  cp              %5.5  = Checkpoint                -> BB7 (default) | BB6 (if assume failed)
BB67   <- [65]
  val?^ | miss    %67.0 = LdVar              eR    sys.call, e1.0
  lgl$#-          %67.1 = Identical                %67.0, function(which=0L) <(rir::DispatchTable*)0x560|...
  void                    Assume             D     %67.1, %65.6 (CallTarget@0x5604e611f228[Call#12])
  val?^ | miss    %67.3 = LdVar              eR    parent, e1.0
  val?            %67.4 = Force!<value>      !v    %67.3, e1.0   <int$->
  prom-           %67.5 = MkArg                    %67.4, osr[0x5604df4c6ce0]_p32 (!refl), 
  val?            %67.6 = StaticCall         !v    sys.call[0x5604e6823780](%67.5) e1.0   <code->
  void                    StVar              lW    mcall, %67.6, e1.0
  cp              %67.8 = Checkpoint                -> BB69 (default) | BB68 (if assume failed)
BB66   <- [65]
  fs              %66.0 = FrameState         R     0x5604e2e11550+530: [], env=e1.0
  void                    Deopt              !v    %66.0   !
BB7   <- [5]
  val?^ | miss    %7.0  = LdVar              eR    parent.frame, e1.0
  lgl$#-          %7.1  = Identical                %7.0, function(n=1) <(rir::DispatchTable*)0x5604dd50|...
  void                    Assume             D     %7.1, %5.5 (CallTarget@0x5604e611f228[Call#5])
  val?            %7.3  = StaticCall         !v    parent.frame[0x5604e19b6ae0](2) e1.0   <env->
  void                    StVar              lW    methodEnv, %7.3, e1.0
  cp              %7.5  = Checkpoint                -> BB9 (default) | BB8 (if assume failed)
BB6   <- [5]
  fs              %6.0  = FrameState         R     0x5604e2e11550+269: [], env=e1.0
  void                    Deopt              !v    %6.0   !
BB69   <- [67]
  val?^ | miss    %69.0 = LdVar              eR    parent.frame, e1.0
  lgl$#-          %69.1 = Identical                %69.0, function(n=1) <(rir::DispatchTable*)0x5604dd50|...
  void                    Assume             D     %69.1, %67.8 (CallTarget@0x5604e611f228[Call#13])
  val?            %69.3 = StaticCall         !v    parent.frame[0x5604e19b6ae0](2) e1.0   <env->
  void                    StVar              lW    dotsenv, %69.3, e1.0
  void                    StVar              lW    i, 1L, e1.0
  goto BB14
BB68   <- [67]
  fs              %68.0 = FrameState         R     0x5604e2e11550+576: [], env=e1.0
  void                    Deopt              !v    %68.0   !
BB9   <- [7]
  val?^ | miss    %9.0  = LdVar              eR    sys.call, e1.0
  lgl$#-          %9.1  = Identical                %9.0, function(which=0L) <(rir::DispatchTable*)0x560|...
  void                    Assume             D     %9.1, %7.5 (CallTarget@0x5604e611f228[Call#6])
  prom-           %9.3  = MkArg                    unboundValue, osr[0x5604df4c6ce0]_p1, e1.0
  val?            %9.4  = StaticCall         !v    sys.call[0x5604e177d980](%9.3) e1.0   <code->
  void                    StVar              lW    mcall, %9.4, e1.0
  cp              %9.6  = Checkpoint                -> BB11 (default) | BB10 (if assume failed)
BB8   <- [7]
  fs              %8.0  = FrameState         R     0x5604e2e11550+315: [], env=e1.0
  void                    Deopt              !v    %8.0   !
BB14   <- [69, 13]
  (cls|spec|blt)  %14.0 = LdFun              !v    $, <0x5604db659c10>, e1.0
  prom-           %14.1 = MkArg                    unboundValue, osr[0x5604df4c6ce0]_p3, e1.0
  prom-           %14.2 = MkArg                    unboundValue, osr[0x5604df4c6ce0]_p4, e1.0
  val?            %14.3 = Call               !v    %14.0(%14.1, %14.2) e1.0   <cls>
  lgl$-           %14.4 = Is                       %14.3, NULL
  void                    StVar              lW    method, %14.3, e1.0
  lgl$-           %14.6 = Not                d     %14.4, elided
  lgl$#-          %14.7 = CheckTrueFalse     e     %14.6
  void                    Branch                   %14.7 -> BB16 (if true) | BB15 (if false)
BB11   <- [9]
  val?^ | miss    %11.0 = LdVar              eR    parent.frame, e1.0
  lgl$#-          %11.1 = Identical                %11.0, function(n=1) <(rir::DispatchTable*)0x5604dd50|...
  void                    Assume             D     %11.1, %9.6 (CallTarget@0x5604e611f228[Call#8])
  val?            %11.3 = StaticCall         !v    parent.frame[0x5604e19b6ae0](3) e1.0   <env->
  void                    StVar              lW    dotsenv, %11.3, e1.0
  cp              %11.5 = Checkpoint                -> BB13 (default) | BB12 (if assume failed)
BB10   <- [9]
  fs              %10.0 = FrameState         R     0x5604e2e11550+361: [], env=e1.0
  void                    Deopt              !v    %10.0   !
BB16   <- [14]
  (cls|spec|blt)  %16.0 = LdFun              !v    $, <0x5604db659c10>, e1.0
  prom-           %16.1 = MkArg                    unboundValue, osr[0x5604df4c6ce0]_p5, e1.0
  prom-           %16.2 = MkArg                    unboundValue, osr[0x5604df4c6ce0]_p6, e1.0
  val?            %16.3 = Call               !v    %16.0(%16.1, %16.2) e1.0   <nil->
  void                    StVar              lW    nextMethod, %16.3, e1.0
  (cls|spec|blt)  %16.5 = LdFun              !v    $, <0x5604db659c10>, e1.0
  prom-           %16.6 = MkArg                    unboundValue, osr[0x5604df4c6ce0]_p7, e1.0
  prom-           %16.7 = MkArg                    unboundValue, osr[0x5604df4c6ce0]_p8, e1.0
  val?            %16.8 = Call               !v    %16.5(%16.6, %16.7) e1.0   <str$+>
  void                    StVar              lW    f, %16.8, e1.0
  cp              %16.10 = Checkpoint                -> BB18 (default) | BB17 (if assume failed)
BB15   <- [14]
  (cls|spec|blt)  %15.0 = LdFun              !v    identical, e1.0
  fs              %15.1 = FrameState         R     0x5604e2e11550+707: [%15.0], env=e1.0
  void                    Deopt              !v    %15.1, DeadCall@0x5604e611f228[Call#15], %15.0   !
BB13   <- [11]
  val?^ | miss    %13.0 = LdVar              eR    sys.function, e1.0
  lgl$#-          %13.1 = Identical                %13.0, function(which=0L) <(rir::DispatchTable*)0x560|...
  void                    Assume             D     %13.1, %11.5 (CallTarget@0x5604e611f228[Call#9])
  prom-           %13.3 = MkArg                    unboundValue, osr[0x5604df4c6ce0]_p2, e1.0
  val?            %13.4 = StaticCall         !v    sys.function[0x5604e3124340](%13.3) e1.0   <cls>
  void                    StVar              lW    maybeMethod, %13.4, e1.0
  void                    StVar              lW    i, 2L, e1.0
  goto BB14
BB12   <- [11]
  fs              %12.0 = FrameState         R     0x5604e2e11550+407: [], env=e1.0
  void                    Deopt              !v    %12.0   !
BB18   <- [16]
  val?^ | miss    %18.0 = LdVar              eR    is, e1.0
  lgl$#-          %18.1 = Identical                %18.0, function(object, class2) <(rir::DispatchTable*|...
  void                    Assume             D     %18.1, %16.10 (CallTarget@0x5604e611f228[Call#31])
  prom-           %18.3 = MkArg                    unboundValue, osr[0x5604df4c6ce0]_p9, e1.0
  val?            %18.4 = Call               !v    function(object, class2) <(rir::DispatchTable*|...(%18.3, "MethodDefinition") e1.0   <lgl$->
  lgl$#-          %18.5 = IsType                   %18.4 isA lgl$-
  cp              %18.6 = Checkpoint                -> BB20 (default) | BB19 (if assume failed)
BB17   <- [16]
  fs              %17.0 = FrameState         R     0x5604e2e11550+1576: [], env=e1.0
  void                    Deopt              !v    %17.0   !
BB20   <- [18]
  void                    Assume             D     %18.5, %18.6 (Typecheck@0x5604e611f228[Type#67])
  lgl$-           %20.1 = CastType           d     dn %18.4
  lgl$#-          %20.2 = CheckTrueFalse     e     %20.1
  void                    Branch                   %20.2 -> BB26 (if true) | BB21 (if false)
BB19   <- [18]
  fs              %19.0 = FrameState         R     0x5604e2e11550+1613: [%18.4], env=e1.0
  void                    Deopt              !v    %19.0   !
BB26   <- [20]
  val?^ | miss    %26.0 = LdVar              eR    nextMethod, e1.0
  lgl$#-          %26.1 = IsType                   %26.0 isA val?~- | miss
  void                    Assume             D     %26.1, %18.6 (Typecheck@0x5604e611f228[Type#92])
  val?~- | miss   %26.3 = CastType           d     dn %26.0
  val?-           %26.4 = Force!<value>            %26.3,    <nil->
  lgl$-           %26.5 = Is                       %26.4, NULL
  lgl$#-          %26.6 = CheckTrueFalse     e     %26.5
  void                    Branch                   %26.6 -> BB53 (if true) | BB27 (if false)
BB21   <- [20]
  val?^ | miss    %21.0 = LdVar              eR    method, e1.0
  val?            %21.1 = Force!             !v    %21.0, e1.0   <val?_>
  lgl$-           %21.2 = Is                       %21.1, NULL
  lgl$#-          %21.3 = CheckTrueFalse     e     %21.2
  void                    Branch                   %21.3 -> BB23 (if true) | BB22 (if false)
BB53   <- [26]
  val?^ | miss    %53.0 = LdVar              eR    is, e1.0
  lgl$#-          %53.1 = Identical                %53.0, function(object, class2) <(rir::DispatchTable*|...
  void                    Assume             D     %53.1, %18.6 (CallTarget@0x5604e611f228[Call#44])
  prom-           %53.3 = MkArg                    unboundValue, osr[0x5604df4c6ce0]_p15, e1.0
  val?            %53.4 = Call               !v    function(object, class2) <(rir::DispatchTable*|...(%53.3, "MethodWithNext") e1.0   <lgl$->
  lgl$#-          %53.5 = IsType                   %53.4 isA lgl$-
  cp              %53.6 = Checkpoint                -> BB55 (default) | BB54 (if assume failed)
BB27   <- [26]
  goto BB28
BB23   <- [21]
  val?^ | miss    %23.0 = LdVar              eR    nextMethod, e1.0
  val?            %23.1 = Force!             !v    %23.0, e1.0   <val?_>
  lgl$-           %23.2 = Is                       %23.1, NULL
  lgl$#-          %23.3 = CheckTrueFalse     e     %23.2
  void                    Branch                   %23.3 -> BB25 (if true) | BB24 (if false)
BB22   <- [21]
  (cls|spec|blt)  %22.0 = LdFun              !v    stop, e1.0
  fs              %22.1 = FrameState         R     0x5604e2e11550+1654: [%22.0], env=e1.0
  void                    Deopt              !v    %22.1, DeadCall@0x5604e611f228[Call#32], %22.0   !
BB55   <- [53]
  void                    Assume             D     %53.5, %53.6 (Typecheck@0x5604e611f228[Type#94])
  lgl$-           %55.1 = CastType           d     dn %53.4
  lgl$-           %55.2 = Not                d     %55.1, elided
  lgl$#-          %55.3 = CheckTrueFalse     e     %55.2
  void                    Branch                   %55.3 -> BB62 (if true) | BB56 (if false)
BB54   <- [53]
  fs              %54.0 = FrameState         R     0x5604e2e11550+2251: [%53.4], env=e1.0
  void                    Deopt              !v    %54.0   !
BB28   <- [27, 61]
  val?^ | miss    %28.0 = LdVar              eR    nextMethod, e1.0
  val?            %28.1 = Force!<value>      !v    %28.0, e1.0   <cls>
  lgl$-           %28.2 = Is                       %28.1, NULL
  cp              %28.3 = Checkpoint                -> BB30 (default) | BB29 (if assume failed)
BB25   <- [23]
  (cls|spec|blt)  %25.0 = LdFun              !v    stop, e1.0
  fs              %25.1 = FrameState         R     0x5604e2e11550+1735: [%25.0], env=e1.0
  void                    Deopt              !v    %25.1, DeadCall@0x5604e611f228[Call#36], %25.0   !
BB24   <- [23]
  val?^ | miss    %24.0 = LdVar              eR    nextMethod, e1.0
  val?            %24.1 = Force!             !v    %24.0, e1.0   <val?_>
  void                    StVar              lW    method, %24.1, e1.0
  (cls|spec|blt)  %24.3 = LdFun              !v    is, e1.0
  fs              %24.4 = FrameState         R     0x5604e2e11550+1791: [%24.3], env=e1.0
  void                    Deopt              !v    %24.4, DeadCall@0x5604e611f228[Call#37], %24.3   !
BB62   <- [55]
  val?^ | miss    %62.0 = LdVar              eR    addNextMethod, e1.0
  lgl$#-          %62.1 = Identical                %62.0, function(method, f="<unknown>", mlist, optiona|...
  void                    Assume             D     %62.1, %53.6 (CallTarget@0x5604e611f228[Call#45])
  prom-           %62.3 = MkArg                    unboundValue, osr[0x5604df4c6ce0]_p22, e1.0
  prom-           %62.4 = MkArg                    unboundValue, osr[0x5604df4c6ce0]_p23, e1.0
  prom-           %62.5 = MkArg                    unboundValue, osr[0x5604df4c6ce0]_p24, e1.0
  val?            %62.6 = StaticCall         !v    addNextMethod[0x5604dfe72230](%62.3, %62.4, missingArg, missingArg, %62.5) { 0 1 4n } e1.0   <cls>
  void                    StVar              lW    method, %62.6, e1.0
  cp              %62.8 = Checkpoint                -> BB64 (default) | BB63 (if assume failed)
BB56   <- [55]
  goto BB57
BB30   <- [28]
  lgl$#-          %30.0 = CheckTrueFalse     e     %28.2
  void                    Branch                   %30.0 -> BB52 (if true) | BB31 (if false)
BB29   <- [28]
  fs              %29.0 = FrameState         R     0x5604e2e11550+2579: [%28.1], env=e1.0
  void                    Deopt              !v    %29.0   !
BB64   <- [62]
  val?^ | miss    %64.0 = LdVar              eR    cacheMethod, e1.0
  lgl$#-          %64.1 = Identical                %64.0, function(f, sig, def, args=names(sig), fdef, i|...
  void                    Assume             D     %64.1, %62.8 (CallTarget@0x5604e611f228[Call#46])
  prom-           %64.3 = MkArg                    unboundValue, osr[0x5604df4c6ce0]_p25, e1.0
  prom-           %64.4 = MkArg                    unboundValue, osr[0x5604df4c6ce0]_p26, e1.0
  prom-           %64.5 = MkArg                    unboundValue, osr[0x5604df4c6ce0]_p29 (!refl), e1.0
  prom-           %64.6 = MkArg                    unboundValue, osr[0x5604df4c6ce0]_p30, e1.0
  val?            %64.7 = StaticCall         !v    cacheMethod[0x5604e5ef3ed0](%64.3, %64.4, %64.5, missingArg, %64.6, true) { 0 1 2 4n 5n } e1.0
  goto BB57
BB63   <- [62]
  fs              %63.0 = FrameState         R     0x5604e2e11550+2336: [], env=e1.0
  void                    Deopt              !v    %63.0   !
BB57   <- [56, 64]
  (cls|spec|blt)  %57.0 = LdFun              !v    @, <0x5604db659bd8>, e1.0
  prom-           %57.1 = MkArg                    unboundValue, osr[0x5604df4c6ce0]_p16, e1.0
  prom-           %57.2 = MkArg                    unboundValue, osr[0x5604df4c6ce0]_p17, e1.0
  val?            %57.3 = Call               !v    %57.0(%57.1, %57.2) e1.0   <cls>
  void                    StVar              lW    nextMethod, %57.3, e1.0
  cp              %57.5 = Checkpoint                -> BB59 (default) | BB58 (if assume failed)
BB52   <- [30]
  (cls|spec|blt)  %52.0 = LdFun              !v    stop, e1.0
  fs              %52.1 = FrameState         R     0x5604e2e11550+2605: [%52.0], env=e1.0
  void                    Deopt              !v    %52.1, DeadCall@0x5604e611f228[Call#52], %52.0   !
BB31   <- [30]
  val?^ | miss    %31.0 = LdVar              eR    is.na, e1.0
  lgl$#-          %31.1 = Identical                <blt is.na>, %31.0   <true>
  void                    Assume             D     %31.1, %28.3 (DeadBranchReached@0x5604e611f228[Test#6])
  val?^ | miss    %31.3 = LdVar              eR    match, e1.0
  lgl$#-          %31.4 = Identical                %31.3, function(x, table, nomatch=NA, incomparables=N|...
  void                    Assume             D     %31.4, %28.3 (CallTarget@0x5604e611f228[Call#55])
  prom-           %31.6 = MkArg                    unboundValue, osr[0x5604df4c6ce0]_p11, e1.0
  val?^           %31.7 = CastType                 up %31.6
  val?^ | miss    %31.8 = LdVar              eR    f, e1.0
  lgl$#-          %31.9 = IsType                   %31.8 isA val?~+ | miss
  void                    Assume             D     %31.9, %28.3 (Typecheck@0x5604e611f228[Type#117])
  val?~+ | miss   %31.11 = CastType           d     dn %31.8
  val?+           %31.12 = Force!<value>            %31.11,    <str$+>
  prom-           %31.13 = MkArg                    %31.12, osr[0x5604df4c6ce0]_p10 (!refl), e1.0
  val?~           %31.14 = CastType                 up %31.13
  env             e31.15 = (MkEnv)            l     x=%31.14, table=%31.7, nomatch(miss)=NA, incomparables(miss)=nil, parent=R_BaseNamespace, context 0
  lgl$#-          %31.16 = IsEnvStub          R     , e31.15
  void                    Assume             D     %31.16, %28.3 (EnvStubMaterialized@0x5604db967b30[Call#unknown])
  val?^ | miss    %31.18 = LdVar              eR    .BasicSubsetFunctions, e1.0
  val?            %31.19 = Force!<wrapped>    !v    %31.18, e1.0   <str->
  prom-           %31.20 = MkArg                    %31.19, osr[0x5604df4c6ce0]_p11 (!refl), e1.0
  val?~           %31.21 = CastType                 up %31.20
  void                    StArg              lWd   table, %31.21, e31.15
  cp              %31.23 = Checkpoint                -> BB33 (default) | BB32 (if assume failed)
BB59   <- [57]
  val?^ | miss    %59.0 = LdVar              eR    assign, e1.0
  lgl$#-          %59.1 = Identical                %59.0, function(x, value, pos=-(1), envir=as.environm|...
  void                    Assume             D     %59.1, %57.5 (CallTarget@0x5604e611f228[Call#50])
  prom-           %59.3 = MkArg                    unboundValue, osr[0x5604df4c6ce0]_p18 (!refl), e1.0
  prom-           %59.4 = MkArg                    unboundValue, osr[0x5604df4c6ce0]_p19, e1.0
  val?            %59.5 = StaticCall         !v    assign[0x5604e1d2a900](".nextMethod", %59.3, missingArg, %59.4) { 0 1 3n } e1.0
  cp              %59.6 = Checkpoint                -> BB61 (default) | BB60 (if assume failed)
BB58   <- [57]
  fs              %58.0 = FrameState         R     0x5604e2e11550+2460: [], env=e1.0
  void                    Deopt              !v    %58.0   !
BB33   <- [31]
  lgl$#-          %33.0 = IsEnvStub          R     , e31.15
  void                    Assume             D     %33.0, %31.23 (EnvStubMaterialized@0x5604db967b30[Call#unknown])
  val?^ | miss    %33.2 = LdVar              eRd   nomatch, e31.15
  val?            %33.3 = Force!<lazy>       !v    %33.2, e31.15   <int$->
  cp              %33.4 = Checkpoint                -> BB35 (default) | BB34 (if assume failed)
BB32   <- [31]
  fs              %32.0 = FrameState         R     0x5604e2e11550+2730: [<blt is.na>], env=e1.0
  fs              %32.1 = FrameState         R     0x5604dc18fd70+23: [%31.12, %31.19], env=e31.15, next=%32.0
  void                    Deopt              !v    %32.1   !
BB61   <- [59]
  val?^ | miss    %61.0 = LdVar              eR    assign, e1.0
  lgl$#-          %61.1 = Identical                %61.0, function(x, value, pos=-(1), envir=as.environm|...
  void                    Assume             D     %61.1, %59.6 (CallTarget@0x5604e611f228[Call#51])
  prom-           %61.3 = MkArg                    unboundValue, osr[0x5604df4c6ce0]_p20, e1.0
  prom-           %61.4 = MkArg                    unboundValue, osr[0x5604df4c6ce0]_p21, e1.0
  val?            %61.5 = StaticCall         !v    assign[0x5604e1d2a900](".Generic", %61.3, missingArg, %61.4) { 0 1 3n } e1.0
  goto BB28
BB60   <- [59]
  fs              %60.0 = FrameState         R     0x5604e2e11550+2514: [%59.5], env=e1.0
  void                    Deopt              !v    %60.0   !
BB35   <- [33]
  lgl$#-          %35.0 = IsEnvStub          R     , e31.15
  void                    Assume             D     %35.0, %33.4 (EnvStubMaterialized@0x5604db967b30[Call#unknown])
  val?^ | miss    %35.2 = LdVar              eRd   incomparables, e31.15
  val?            %35.3 = Force!<lazy>       !v    %35.2, e31.15   <nil->
  lgl$#-          %35.4 = IsType                   %35.3 isA val?-
  cp              %35.5 = Checkpoint                -> BB37 (default) | BB36 (if assume failed)
BB34   <- [33]
  fs              %34.0 = FrameState         R     0x5604e2e11550+2730: [<blt is.na>], env=e1.0
  fs              %34.1 = FrameState         R     0x5604dc18fd70+37: [%31.12, %31.19, %33.3], env=e31.15, next=%34.0
  void                    Deopt              !v    %34.1   !
BB37   <- [35]
  lgl$#-          %37.0 = IsEnvStub          R     , e31.15
  void                    Assume             D     %37.0, %35.5 (EnvStubMaterialized@0x5604db967b30[Call#unknown])
  lgl$#-          %37.2 = IsType                   %31.19 isA val?+
  void                    Assume             D     %37.2, %35.5 (Typecheck@0x5604db967b30[Type#1])
  val?+           %37.4 = CastType           d     dn %31.19   <str->
  lgl$#-          %37.5 = IsType                   %33.3 isA int$-
  void                    Assume             D     %37.5, %35.5 (Typecheck@0x5604db967b30[Type#2])
  int$-           %37.7 = CastType           d     dn %33.3
  void                    Assume             D     %35.4, %35.5 (Typecheck@0x5604db967b30[Type#3])
  val?-           %37.9 = CastType           d     dn %35.3   <nil->
  val+            %37.10 = CallSafeBuiltin    wed   match(%31.12, %37.4, %37.7, %37.9)    <int$->
  lgl$#-          %37.11 = IsType                   %37.10 isA int$-
  cp              %37.12 = Checkpoint                -> BB39 (default) | BB38 (if assume failed)
BB36   <- [35]
  fs              %36.0 = FrameState         R     0x5604e2e11550+2730: [<blt is.na>], env=e1.0
  fs              %36.1 = FrameState         R     0x5604dc18fd70+51: [%31.12, %31.19, %33.3, %35.3], env=e31.15, next=%36.0
  void                    Deopt              !v    %36.1   !
BB39   <- [37]
  void                    Assume             D     %37.11, %37.12 (Typecheck@0x5604e611f228[Type#119])
  int$-           %39.1 = CastType           d     dn %37.10
  lgl$-           %39.2 = CallSafeBuiltin    wed   is.na(%39.1)    <lgl$->
  lgl$-           %39.3 = Not                d     %39.2, elided
  void                    StVar              lW    subsetCase, %39.3, e1.0
  cp              %39.5 = Checkpoint                -> BB41 (default) | BB40 (if assume failed)
BB38   <- [37]
  fs              %38.0 = FrameState         R     0x5604e2e11550+2730: [<blt is.na>], env=e1.0
  fs              %38.1 = FrameState         R     0x5604dc18fd70+69: [%37.10], env=e31.15, next=%38.0
  void                    Deopt              !v    %38.1   !
BB41   <- [39]
  val?^ | miss    %41.0 = LdVar              eR    nargs, e1.0
  lgl$#-          %41.1 = Identical                <blt nargs>, %41.0   <true>
  void                    Assume             D     %41.1, %39.5 (DeadBranchReached@0x5604e611f228[Test#7])
  val?            %41.3 = CallBuiltin        !v    nargs() e1.0   <int$->
  lgl$#-          %41.4 = IsType                   %41.3 isA int$-
  cp              %41.5 = Checkpoint                -> BB43 (default) | BB42 (if assume failed)
BB40   <- [39]
  fs              %40.0 = FrameState         R     0x5604e2e11550+2767: [], env=e1.0
  void                    Deopt              !v    %40.0   !
BB43   <- [41]
  void                    Assume             D     %41.4, %41.5 (Typecheck@0x5604e611f228[Type#121])
  int$-           %43.1 = CastType           d     dn %41.3
  lgl$-           %43.2 = Gt                 d     %43.1, 0, elided   <lgl$->
  lgl$#-          %43.3 = CheckTrueFalse     e     %43.2
  void                    Branch                   %43.3 -> BB51 (if true) | BB44 (if false)
BB42   <- [41]
  fs              %42.0 = FrameState         R     0x5604e2e11550+2839: [%41.3], env=e1.0
  void                    Deopt              !v    %42.0   !
BB51   <- [43]
  (cls|spec|blt)  %51.0 = LdFun              !v    sys.call, e1.0
  fs              %51.1 = FrameState         R     0x5604e2e11550+4664: [%51.0], env=e1.0
  void                    Deopt              !v    %51.1, DeadCall@0x5604e611f228[Call#82], %51.0   !
BB44   <- [43]
  val?^ | miss    %44.0 = LdVar              eR    subsetCase, e1.0
  lgl$#-          %44.1 = IsType                   %44.0 isA lgl$-
  void                    Assume             D     %44.1, %41.5 (Typecheck@0x5604e611f228[Type#123])
  lgl$-           %44.3 = CastType           d     dn %44.0
  lgl$#-          %44.4 = CheckTrueFalse     e     %44.3
  void                    Branch                   %44.4 -> BB50 (if true) | BB45 (if false)
BB50   <- [44]
  (cls|spec|blt)  %50.0 = LdFun              !v    as.list, e1.0
  fs              %50.1 = FrameState         R     0x5604e2e11550+2969: [%50.0], env=e1.0
  void                    Deopt              !v    %50.1, DeadCall@0x5604e611f228[Call#58], %50.0   !
BB45   <- [44]
  val?^ | miss    %45.0 = LdVar              eR    match.call, e1.0
  lgl$#-          %45.1 = Identical                %45.0, function(definition=sys.function(sys.parent())|...
  void                    Assume             D     %45.1, %41.5 (CallTarget@0x5604e611f228[Call#57])
  prom-           %45.3 = MkArg                    unboundValue, osr[0x5604df4c6ce0]_p12, e1.0
  prom-           %45.4 = MkArg                    unboundValue, osr[0x5604df4c6ce0]_p13, e1.0
  prom-           %45.5 = MkArg                    unboundValue, osr[0x5604df4c6ce0]_p14, e1.0
  val?            %45.6 = StaticCall         !v    match.call[0x5604e325b870](%45.3, %45.4, false, %45.5) { 0 1 2n 3n } e1.0   <code->
  void                    StVar              lW    call, %45.6, e1.0
  cp              %45.8 = Checkpoint                -> BB47 (default) | BB46 (if assume failed)
BB47   <- [45]
  val?^ | miss    %47.0 = LdVar              eR    .Call, e1.0
  lgl$#-          %47.1 = Identical                <blt .Call>, %47.0   <true>
  void                    Assume             D     %47.1, %45.8 (DeadBranchReached@0x5604e611f228[Test#17])
  val?^ | miss    %47.3 = LdVar              eR    C_R_nextMethodCall, e1.0
  val?            %47.4 = Force!<value>      !v    %47.3, e1.0   <vec>
  cp              %47.5 = Checkpoint                -> BB49 (default) | BB48 (if assume failed)
BB46   <- [45]
  fs              %46.0 = FrameState         R     0x5604e2e11550+2959: [], env=e1.0
  void                    Deopt              !v    %46.0   !
BB49   <- [47]
  val?^ | miss    %49.0 = LdVar              eR    call, e1.0
  lgl$#-          %49.1 = IsType                   %49.0 isA val?~- | miss
  void                    Assume             D     %49.1, %47.5 (Typecheck@0x5604e611f228[Type#194])
  val?~- | miss   %49.3 = CastType           d     dn %49.0
  val?-           %49.4 = Force!<value>            %49.3,    <code->
  val?^ | miss    %49.5 = LdVar              eR    callEnv, e1.0
  lgl$#-          %49.6 = IsType                   %49.5 isA val?~- | miss
  void                    Assume             D     %49.6, %47.5 (Typecheck@0x5604e611f228[Type#195])
  val?~- | miss   %49.8 = CastType           d     dn %49.5
  val?-           %49.9 = Force!<value>            %49.8,    <env->
  val?            %49.10 = CallBuiltin        !     .Call(%47.4, %49.4, %49.9) e1.0   <(cls|other)>
  void                    Return             l     %49.10
BB48   <- [47]
  fs              %48.0 = FrameState         R     0x5604e2e11550+4599: [<blt .Call>, %47.4], env=e1.0
  void                    Deopt              !v    %48.0   !
Prom 0:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    maybeMethod, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <cls>
  void                    Return             l     %1.3
Prom 1:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     sys.parent, <0x5604dc5fe590>, e1.0
  val?            %1.2  = Call               !     %1.1(2) e1.0   <int$->
  void                    Return             l     %1.2
Prom 2:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     sys.parent, <0x5604dc5fe590>, e1.0
  val?            %1.2  = Call               !     %1.1(2) e1.0   <int$->
  void                    Return             l     %1.2
Prom 3:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    methodEnv, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <env->
  void                    Return             l     %1.3
Prom 4:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    .Method, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 5:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    callEnv, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <env->
  void                    Return             l     %1.3
Prom 6:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    .nextMethod, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 7:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    methodEnv, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <env->
  void                    Return             l     %1.3
Prom 8:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    .Generic, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 9:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    method, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <cls>
  void                    Return             l     %1.3
Prom 10:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    f, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$+>
  void                    Return             l     %1.3
Prom 11:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    .BasicSubsetFunctions, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <str->
  void                    Return             l     %1.3
Prom 12:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    methodFun, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <cls>
  void                    Return             l     %1.3
Prom 13:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    mcall, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <code->
  void                    Return             l     %1.3
Prom 14:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    dotsenv, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <env->
  void                    Return             l     %1.3
Prom 15:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    method, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <cls>
  void                    Return             l     %1.3
Prom 16:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    method, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 17:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    nextMethod, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 18:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    nextMethod, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <cls>
  void                    Return             l     %1.3
Prom 19:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    callEnv, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <env->
  void                    Return             l     %1.3
Prom 20:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    f, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$+>
  void                    Return             l     %1.3
Prom 21:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    callEnv, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <env->
  void                    Return             l     %1.3
Prom 22:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    method, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <cls>
  void                    Return             l     %1.3
Prom 23:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    f, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$+>
  void                    Return             l     %1.3
Prom 24:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    methodEnv, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <env->
  void                    Return             l     %1.3
Prom 25:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    f, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 26:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     @, <0x5604db659bd8>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, osr[0x5604df4c6ce0]_p27, e1.0
  prom-           %1.3  = MkArg                    unboundValue, osr[0x5604df4c6ce0]_p28, e1.0
  val?            %1.4  = Call               !     %1.1(%1.2, %1.3) e1.0   <str$>
  void                    Return             l     %1.4
Prom 27:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    method, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 28:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    target, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 29:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    method, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <cls>
  void                    Return             l     %1.3
Prom 30:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     getGeneric, <0x5604dbe3a8d8>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, osr[0x5604df4c6ce0]_p31, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <cls>
  void                    Return             l     %1.3
Prom 31:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    f, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$+>
  void                    Return             l     %1.3
Prom 32:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    parent, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <int$->
  void                    Return             l     %1.3

│ osr[0x5604df4c6ce0]                                                          │
└──────────────────────────────────────────────────────────────────────────────┘
