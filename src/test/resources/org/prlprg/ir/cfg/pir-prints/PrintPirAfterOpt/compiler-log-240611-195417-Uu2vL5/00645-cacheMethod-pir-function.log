
┌──────────────────────────────────────────────────────────────────────────────┐
│ cacheMethod[0x5604e5ef3ed0]                                                  │
│ Context: CorrOrd,!TMany,Argmatch;Eager3,Eager5,NonRefl2,NonRefl3,NonRefl5,!Obj5│
│ Properties:                                                                  │
├────── PIR Version After Optimizations
cacheMethod[0x5604e5ef3ed0]
BB0
  goto BB1
BB1   <- [0]
  val?~+          %1.0  = LdArg                    5
  val?^ | miss    %1.1  = LdArg                    4
  val?~ | miss    %1.2  = LdArg                    3
  val?^ | miss    %1.3  = LdArg                    2
  val?^ | miss    %1.4  = LdArg                    1
  val?^ | miss    %1.5  = LdArg                    0
  lgl$#-          %1.6  = Identical                %1.2, missingArg
  env             e1.7  = MkEnv              l     f=%1.5, sig=%1.4, def=%1.3, args=%1.2, fdef=%1.1, inherited=%1.0, parent=<env 0x5604dbc61378>, context 1
  void                    Branch                   %1.6 -> BB2 (if true) | BB13 (if false)
BB2   <- [1]
  prom-           %2.0  = MkArg                    unboundValue, cacheMethod[0x5604e5ef3ed0]_p0, e1.7
  val?^ | miss    %2.1  = CastType                 up %2.0
  void                    StArg              lW    args, %2.1, e1.7
  goto BB3
BB13   <- [1]
  goto BB3
BB3   <- [2, 13]
  cp              %3.0  = Checkpoint                -> BB5 (default) | BB4 (if assume failed)
BB5   <- [3]
  val?^ | miss    %5.0  = LdVar              eR    environment, <env 0x5604dbc61378>
  lgl$#-          %5.1  = Identical                %5.0, function(fun=NULL) <(rir::DispatchTable*)0x560|...
  void                    Assume             D     %5.1, %3.0 (CallTarget@0x5604df0c7d20[Call#1])
  val?^           %5.3  = ChkMissing         e     %1.1
  val?            %5.4  = Force!<lazy>       !v    %5.3, e1.7   <cls>
  prom-           %5.5  = MkArg                    %5.4, cacheMethod[0x5604e5ef3ed0]_p3 (!refl), 
  val?            %5.6  = StaticCall         !v    environment[0x5604e0845af0](%5.5) e1.7   <env->
  void                    StVar              lW    ev, %5.6, e1.7
  cp              %5.8  = Checkpoint                -> BB7 (default) | BB6 (if assume failed)
BB4   <- [3]
  fs              %4.0  = FrameState         R     0x5604dedf2fa0+0: [], env=e1.7
  void                    Deopt              !v    %4.0
BB7   <- [5]
  val?^ | miss    %7.0  = LdVar              eR    .cacheMethodInTable, e1.7
  lgl$#-          %7.1  = Identical                %7.0, function(fdef, sig, def, table=get(".AllMTable|...
  void                    Assume             D     %7.1, %5.8 (CallTarget@0x5604df0c7d20[Call#2])
  prom-           %7.3  = MkArg                    unboundValue, cacheMethod[0x5604e5ef3ed0]_p4, e1.7
  prom-           %7.4  = MkArg                    unboundValue, cacheMethod[0x5604e5ef3ed0]_p5, e1.7
  prom-           %7.5  = MkArg                    unboundValue, cacheMethod[0x5604e5ef3ed0]_p6, e1.7
  prom-           %7.6  = MkArg                    unboundValue, cacheMethod[0x5604e5ef3ed0]_p7, e1.7
  val?            %7.7  = StaticCall         !v    .cacheMethodInTable[0x5604e365eb40](%7.3, %7.4, %7.5, %7.6) e1.7
  val?^ | miss    %7.8  = LdVar              eR    inherited, e1.7
  void                    Visible            v     
  val?            %7.10 = Force!<wrapped>    !     %7.8, e1.7   <lgl$->
  lgl$#-          %7.11 = IsType                   %7.10 isA lgl$-
  cp              %7.12 = Checkpoint                -> BB9 (default) | BB8 (if assume failed)
BB6   <- [5]
  fs              %6.0  = FrameState         R     0x5604dedf2fa0+46: [], env=e1.7
  void                    Deopt              !v    %6.0   !
BB9   <- [7]
  void                    Assume             D     %7.11, %7.12 (Typecheck@0x5604df0c7d20[Type#11])
  lgl$-           %9.1  = CastType           d     dn %7.10
  lgl$-           %9.2  = Not                vd    %9.1, elided
  lgl$#-          %9.3  = CheckTrueFalse     e     %9.2
  void                    Branch                   %9.3 -> BB12 (if true) | BB10 (if false)
BB8   <- [7]
  fs              %8.0  = FrameState         R     0x5604dedf2fa0+103: [%7.10], env=e1.7
  void                    Deopt              !v    %8.0   !
BB12   <- [9]
  val?^ | miss    %12.0 = LdVar              eR    .cacheMethodInTable, e1.7
  lgl$#-          %12.1 = Identical                %12.0, function(fdef, sig, def, table=get(".AllMTable|...
  void                    Assume             D     %12.1, %7.12 (CallTarget@0x5604df0c7d20[Call#4])
  prom-           %12.3 = MkArg                    unboundValue, cacheMethod[0x5604e5ef3ed0]_p11, e1.7
  prom-           %12.4 = MkArg                    unboundValue, cacheMethod[0x5604e5ef3ed0]_p12, e1.7
  prom-           %12.5 = MkArg                    unboundValue, cacheMethod[0x5604e5ef3ed0]_p13, e1.7
  prom-           %12.6 = MkArg                    unboundValue, cacheMethod[0x5604e5ef3ed0]_p14, e1.7
  val?            %12.7 = StaticCall         !     .cacheMethodInTable[0x5604e365eb40](%12.3, %12.4, %12.5, %12.6) e1.7   <cls>
  goto BB11
BB10   <- [9]
  void                    Invisible          v     
  goto BB11
BB11   <- [12, 10]
  val?            %11.0 = Phi                      nil:BB10, %12.7:BB12
  void                    Return             l     %11.0
Prom 0:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     names, e1.0
  prom-           %1.2  = MkArg                    unboundValue, cacheMethod[0x5604e5ef3ed0]_p1, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <val?_>
  void                    Return             l     %1.3
Prom 1:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    sig, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 3:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    fdef, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <cls>
  void                    Return             l     %1.3
Prom 4:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    fdef, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <cls>
  void                    Return             l     %1.3
Prom 5:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    sig, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <str>
  void                    Return             l     %1.3
Prom 6:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    def, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <cls>
  void                    Return             l     %1.3
Prom 7:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     .getMethodsTable, <0x5604dd4ee070>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, cacheMethod[0x5604e5ef3ed0]_p8, e1.0
  prom-           %1.3  = MkArg                    unboundValue, cacheMethod[0x5604e5ef3ed0]_p9, e1.0
  prom-           %1.4  = MkArg                    unboundValue, cacheMethod[0x5604e5ef3ed0]_p10, e1.0
  val?            %1.5  = NamedCall          !     %1.1(%1.2, %1.3, inherited=%1.4) e1.0   <env->
  void                    Return             l     %1.5
Prom 8:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    fdef, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 9:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    ev, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <env->
  void                    Return             l     %1.3
Prom 10:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    inherited, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <lgl$->
  void                    Return             l     %1.3
Prom 11:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    fdef, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <cls>
  void                    Return             l     %1.3
Prom 12:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    sig, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <str+>
  void                    Return             l     %1.3
Prom 13:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    def, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <cls>
  void                    Return             l     %1.3
Prom 14:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     .getMethodsTable, <0x5604dd4ee070>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, cacheMethod[0x5604e5ef3ed0]_p15, e1.0
  prom-           %1.3  = MkArg                    unboundValue, cacheMethod[0x5604e5ef3ed0]_p16, e1.0
  val?            %1.4  = NamedCall          !     %1.1(%1.2, %1.3, inherited=true) e1.0   <env->
  void                    Return             l     %1.4
Prom 15:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    fdef, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 16:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    ev, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <env->
  void                    Return             l     %1.3

│ cacheMethod[0x5604e5ef3ed0]                                                  │
└──────────────────────────────────────────────────────────────────────────────┘
