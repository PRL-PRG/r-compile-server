
┌──────────────────────────────────────────────────────────────────────────────┐
│ callNextMethod[0x5604e667ac40]                                               │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch miss: 1                              │
│ Properties:  Eager                                                           │
├────── PIR Version After Optimizations
callNextMethod[0x5604e667ac40]
BB0
  goto BB1
BB1   <- [0]
  cp              %1.0  = Checkpoint                -> BB2 (default) | BB76 (if assume failed)
BB2   <- [1]
  val?^ | miss    %2.0  = LdVar              eR    as.name, <env 0x5604dbc61378>
  lgl$#-          %2.1  = Identical                %2.0, function(x) <(rir::DispatchTable*)0x5604dd6a7f|...
  void                    Assume             D     %2.1, %1.0 (CallTarget@0x5604e611f228[Call#0])
  val             %2.3  = CallSafeBuiltin    wed   as.vector(".nextMethod", "symbol")    <sym->
  cp              %2.4  = Checkpoint                -> BB4 (default) | BB3 (if assume failed)
BB76   <- [1]
  env             e76.0 = (MkEnv)            l     ...(miss)=missingArg, parent=<env 0x5604dbc61378>, context 1
  fs              %76.1 = FrameState         R     0x5604e2e11550+0: [], env=e76.0
  void                    Deopt              !v    %76.1
BB4   <- [2]
  val?^ | miss    %4.0  = LdVar              eR    sys.parent, <env 0x5604dbc61378>
  lgl$#-          %4.1  = Identical                %4.0, function(n=1L) <(rir::DispatchTable*)0x5604ddc|...
  void                    Assume             D     %4.1, %2.4 (CallTarget@0x5604e611f228[Call#1])
  env             e4.3  = MkEnv              l     ...(miss)=missingArg, nextMethod=nil, method=nil, dotNextMethod=%2.3, parent=<env 0x5604dbc61378>, context 1
  val?            %4.4  = StaticCall         !v    sys.parent[0x5604e5fc8910](1) e4.3   <int$->
  lgl$#-          %4.5  = IsType                   %4.4 isA int$-
  cp              %4.6  = Checkpoint                -> BB6 (default) | BB5 (if assume failed)
BB3   <- [2]
  env             e3.0  = (MkEnv)            l     ...(miss)=missingArg, nextMethod=nil, method=nil, parent=<env 0x5604dbc61378>, context 1
  fs              %3.1  = FrameState         R     0x5604e2e11550+58: [], env=e3.0
  env             e3.2  = (MkEnv)            l     x=".nextMethod", parent=R_BaseNamespace, context 0
  fs              %3.3  = FrameState         R     0x5604dd6a7de0+33: [%2.3], env=e3.2, next=%3.1
  void                    Deopt              !v    %3.3
BB6   <- [4]
  void                    Assume             D     %4.5, %4.6 (Typecheck@0x5604e611f228[Type#1])
  int$-           %6.1  = CastType           d     dn %4.4
  void                    StVar              lW    parent, %6.1, e4.3
  cp              %6.3  = Checkpoint                -> BB8 (default) | BB7 (if assume failed)
BB5   <- [4]
  fs              %5.0  = FrameState         R     0x5604e2e11550+104: [%4.4], env=e4.3
  void                    Deopt              !v    %5.0   !
BB8   <- [6]
  val?^ | miss    %8.0  = LdVar              eR    sys.function, e4.3
  lgl$#-          %8.1  = Identical                %8.0, function(which=0L) <(rir::DispatchTable*)0x560|...
  void                    Assume             D     %8.1, %6.3 (CallTarget@0x5604e611f228[Call#2])
  prom-           %8.3  = MkArg                    %6.1, callNextMethod[0x5604e667ac40]_p0 (!refl), 
  val?            %8.4  = StaticCall         !v    sys.function[0x5604e64adff0](%8.3) e4.3   <cls>
  void                    StVar              lW    maybeMethod, %8.4, e4.3
  void                    StVar              lW    methodFun, %8.4, e4.3
  cp              %8.7  = Checkpoint                -> BB10 (default) | BB9 (if assume failed)
BB7   <- [6]
  fs              %7.0  = FrameState         R     0x5604e2e11550+118: [], env=e4.3
  void                    Deopt              !v    %7.0   !
BB10   <- [8]
  val?^ | miss    %10.0 = LdVar              eR    is, e4.3
  lgl$#-          %10.1 = Identical                %10.0, function(object, class2) <(rir::DispatchTable*|...
  void                    Assume             D     %10.1, %8.7 (CallTarget@0x5604e611f228[Call#3])
  prom-           %10.3 = MkArg                    unboundValue, callNextMethod[0x5604e667ac40]_p1 (!refl), e4.3
  val?            %10.4 = Call               !v    function(object, class2) <(rir::DispatchTable*|...(%10.3, "MethodDefinition") e4.3   <lgl$->
  lgl$#-          %10.5 = IsType                   %10.4 isA lgl$-
  cp              %10.6 = Checkpoint                -> BB12 (default) | BB11 (if assume failed)
BB9   <- [8]
  fs              %9.0  = FrameState         R     0x5604e2e11550+175: [], env=e4.3
  void                    Deopt              !v    %9.0   !
BB12   <- [10]
  void                    Assume             D     %10.5, %10.6 (Typecheck@0x5604e611f228[Type#5])
  lgl$-           %12.1 = CastType           d     dn %10.4
  lgl$#-          %12.2 = CheckTrueFalse     e     %12.1
  void                    Branch                   %12.2 -> BB71 (if true) | BB13 (if false)
BB11   <- [10]
  fs              %11.0 = FrameState         R     0x5604e2e11550+212: [%10.4], env=e4.3
  void                    Deopt              !v    %11.0   !
BB71   <- [12]
  val?^ | miss    %71.0 = LdVar              eR    parent.frame, e4.3
  lgl$#-          %71.1 = Identical                %71.0, function(n=1) <(rir::DispatchTable*)0x5604dd50|...
  void                    Assume             D     %71.1, %10.6 (CallTarget@0x5604e611f228[Call#11])
  val?            %71.3 = StaticCall         !v    parent.frame[0x5604e3e41c70](1) e4.3   <env->
  void                    StVar              lW    methodEnv, %71.3, e4.3
  void                    StVar              lW    callEnv, %71.3, e4.3
  cp              %71.6 = Checkpoint                -> BB73 (default) | BB72 (if assume failed)
BB13   <- [12]
  val?^ | miss    %13.0 = LdVar              eR    parent.frame, e4.3
  lgl$#-          %13.1 = Identical                %13.0, function(n=1) <(rir::DispatchTable*)0x5604dd50|...
  void                    Assume             D     %13.1, %10.6 (CallTarget@0x5604e611f228[Call#4])
  val?            %13.3 = StaticCall         !v    parent.frame[0x5604e3e41c70](1) e4.3   <env->
  void                    StVar              lW    callEnv, %13.3, e4.3
  cp              %13.5 = Checkpoint                -> BB15 (default) | BB14 (if assume failed)
BB73   <- [71]
  val?^ | miss    %73.0 = LdVar              eR    sys.call, e4.3
  lgl$#-          %73.1 = Identical                %73.0, function(which=0L) <(rir::DispatchTable*)0x560|...
  void                    Assume             D     %73.1, %71.6 (CallTarget@0x5604e611f228[Call#12])
  val?^ | miss    %73.3 = LdVar              eR    parent, e4.3
  val?            %73.4 = Force!<value>      !v    %73.3, e4.3   <int$->
  prom-           %73.5 = MkArg                    %73.4, callNextMethod[0x5604e667ac40]_p33 (!refl), 
  val?            %73.6 = StaticCall         !v    sys.call[0x5604e0845af0](%73.5) e4.3   <code->
  void                    StVar              lW    mcall, %73.6, e4.3
  cp              %73.8 = Checkpoint                -> BB75 (default) | BB74 (if assume failed)
BB72   <- [71]
  fs              %72.0 = FrameState         R     0x5604e2e11550+530: [], env=e4.3
  void                    Deopt              !v    %72.0   !
BB15   <- [13]
  val?^ | miss    %15.0 = LdVar              eR    parent.frame, e4.3
  lgl$#-          %15.1 = Identical                %15.0, function(n=1) <(rir::DispatchTable*)0x5604dd50|...
  void                    Assume             D     %15.1, %13.5 (CallTarget@0x5604e611f228[Call#5])
  val?            %15.3 = StaticCall         !v    parent.frame[0x5604e3e41c70](2) e4.3   <env->
  void                    StVar              lW    methodEnv, %15.3, e4.3
  cp              %15.5 = Checkpoint                -> BB17 (default) | BB16 (if assume failed)
BB14   <- [13]
  fs              %14.0 = FrameState         R     0x5604e2e11550+269: [], env=e4.3
  void                    Deopt              !v    %14.0   !
BB75   <- [73]
  val?^ | miss    %75.0 = LdVar              eR    parent.frame, e4.3
  lgl$#-          %75.1 = Identical                %75.0, function(n=1) <(rir::DispatchTable*)0x5604dd50|...
  void                    Assume             D     %75.1, %73.8 (CallTarget@0x5604e611f228[Call#13])
  val?            %75.3 = StaticCall         !v    parent.frame[0x5604e3e41c70](2) e4.3   <env->
  void                    StVar              lW    dotsenv, %75.3, e4.3
  void                    StVar              lW    i, 1L, e4.3
  goto BB22
BB74   <- [73]
  fs              %74.0 = FrameState         R     0x5604e2e11550+576: [], env=e4.3
  void                    Deopt              !v    %74.0   !
BB17   <- [15]
  val?^ | miss    %17.0 = LdVar              eR    sys.call, e4.3
  lgl$#-          %17.1 = Identical                %17.0, function(which=0L) <(rir::DispatchTable*)0x560|...
  void                    Assume             D     %17.1, %15.5 (CallTarget@0x5604e611f228[Call#6])
  prom-           %17.3 = MkArg                    unboundValue, callNextMethod[0x5604e667ac40]_p2, e4.3
  val?            %17.4 = StaticCall         !v    sys.call[0x5604e3dd98b0](%17.3) e4.3   <code->
  void                    StVar              lW    mcall, %17.4, e4.3
  cp              %17.6 = Checkpoint                -> BB19 (default) | BB18 (if assume failed)
BB16   <- [15]
  fs              %16.0 = FrameState         R     0x5604e2e11550+315: [], env=e4.3
  void                    Deopt              !v    %16.0   !
BB22   <- [75, 21]
  (cls|spec|blt)  %22.0 = LdFun              !v    $, <0x5604db659c10>, e4.3
  prom-           %22.1 = MkArg                    unboundValue, callNextMethod[0x5604e667ac40]_p4, e4.3
  prom-           %22.2 = MkArg                    unboundValue, callNextMethod[0x5604e667ac40]_p5, e4.3
  val?            %22.3 = Call               !v    %22.0(%22.1, %22.2) e4.3   <cls>
  lgl$-           %22.4 = Is                       %22.3, NULL
  void                    StVar              lW    method, %22.3, e4.3
  lgl$-           %22.6 = Not                d     %22.4, elided
  lgl$#-          %22.7 = CheckTrueFalse     e     %22.6
  void                    Branch                   %22.7 -> BB24 (if true) | BB23 (if false)
BB19   <- [17]
  val?^ | miss    %19.0 = LdVar              eR    parent.frame, e4.3
  lgl$#-          %19.1 = Identical                %19.0, function(n=1) <(rir::DispatchTable*)0x5604dd50|...
  void                    Assume             D     %19.1, %17.6 (CallTarget@0x5604e611f228[Call#8])
  val?            %19.3 = StaticCall         !v    parent.frame[0x5604e3e41c70](3) e4.3   <env->
  void                    StVar              lW    dotsenv, %19.3, e4.3
  cp              %19.5 = Checkpoint                -> BB21 (default) | BB20 (if assume failed)
BB18   <- [17]
  fs              %18.0 = FrameState         R     0x5604e2e11550+361: [], env=e4.3
  void                    Deopt              !v    %18.0   !
BB24   <- [22]
  (cls|spec|blt)  %24.0 = LdFun              !v    $, <0x5604db659c10>, e4.3
  prom-           %24.1 = MkArg                    unboundValue, callNextMethod[0x5604e667ac40]_p6, e4.3
  prom-           %24.2 = MkArg                    unboundValue, callNextMethod[0x5604e667ac40]_p7, e4.3
  val?            %24.3 = Call               !v    %24.0(%24.1, %24.2) e4.3   <nil->
  void                    StVar              lW    nextMethod, %24.3, e4.3
  (cls|spec|blt)  %24.5 = LdFun              !v    $, <0x5604db659c10>, e4.3
  prom-           %24.6 = MkArg                    unboundValue, callNextMethod[0x5604e667ac40]_p8, e4.3
  prom-           %24.7 = MkArg                    unboundValue, callNextMethod[0x5604e667ac40]_p9, e4.3
  val?            %24.8 = Call               !v    %24.5(%24.6, %24.7) e4.3   <str$+>
  void                    StVar              lW    f, %24.8, e4.3
  cp              %24.10 = Checkpoint                -> BB26 (default) | BB25 (if assume failed)
BB23   <- [22]
  (cls|spec|blt)  %23.0 = LdFun              !v    identical, e4.3
  fs              %23.1 = FrameState         R     0x5604e2e11550+707: [%23.0], env=e4.3
  void                    Deopt              !v    %23.1, DeadCall@0x5604e611f228[Call#15], %23.0   !
BB21   <- [19]
  val?^ | miss    %21.0 = LdVar              eR    sys.function, e4.3
  lgl$#-          %21.1 = Identical                %21.0, function(which=0L) <(rir::DispatchTable*)0x560|...
  void                    Assume             D     %21.1, %19.5 (CallTarget@0x5604e611f228[Call#9])
  prom-           %21.3 = MkArg                    unboundValue, callNextMethod[0x5604e667ac40]_p3, e4.3
  val?            %21.4 = StaticCall         !v    sys.function[0x5604e2f47ad0](%21.3) e4.3   <cls>
  void                    StVar              lW    maybeMethod, %21.4, e4.3
  void                    StVar              lW    i, 2L, e4.3
  goto BB22
BB20   <- [19]
  fs              %20.0 = FrameState         R     0x5604e2e11550+407: [], env=e4.3
  void                    Deopt              !v    %20.0   !
BB26   <- [24]
  val?^ | miss    %26.0 = LdVar              eR    is, e4.3
  lgl$#-          %26.1 = Identical                %26.0, function(object, class2) <(rir::DispatchTable*|...
  void                    Assume             D     %26.1, %24.10 (CallTarget@0x5604e611f228[Call#31])
  prom-           %26.3 = MkArg                    unboundValue, callNextMethod[0x5604e667ac40]_p10, e4.3
  val?            %26.4 = Call               !v    function(object, class2) <(rir::DispatchTable*|...(%26.3, "MethodDefinition") e4.3   <lgl$->
  lgl$#-          %26.5 = IsType                   %26.4 isA lgl$-
  cp              %26.6 = Checkpoint                -> BB28 (default) | BB27 (if assume failed)
BB25   <- [24]
  fs              %25.0 = FrameState         R     0x5604e2e11550+1576: [], env=e4.3
  void                    Deopt              !v    %25.0   !
BB28   <- [26]
  void                    Assume             D     %26.5, %26.6 (Typecheck@0x5604e611f228[Type#67])
  lgl$-           %28.1 = CastType           d     dn %26.4
  lgl$#-          %28.2 = CheckTrueFalse     e     %28.1
  void                    Branch                   %28.2 -> BB34 (if true) | BB29 (if false)
BB27   <- [26]
  fs              %27.0 = FrameState         R     0x5604e2e11550+1613: [%26.4], env=e4.3
  void                    Deopt              !v    %27.0   !
BB34   <- [28]
  val?^ | miss    %34.0 = LdVar              eR    nextMethod, e4.3
  val?            %34.1 = Force!<value>      !v    %34.0, e4.3   <nil->
  lgl$-           %34.2 = Is                       %34.1, NULL
  cp              %34.3 = Checkpoint                -> BB36 (default) | BB35 (if assume failed)
BB29   <- [28]
  val?^ | miss    %29.0 = LdVar              eR    method, e4.3
  val?            %29.1 = Force!             !v    %29.0, e4.3   <val?_>
  lgl$-           %29.2 = Is                       %29.1, NULL
  lgl$#-          %29.3 = CheckTrueFalse     e     %29.2
  void                    Branch                   %29.3 -> BB31 (if true) | BB30 (if false)
BB36   <- [34]
  lgl$#-          %36.0 = CheckTrueFalse     e     %34.2
  void                    Branch                   %36.0 -> BB59 (if true) | BB37 (if false)
BB35   <- [34]
  fs              %35.0 = FrameState         R     0x5604e2e11550+2193: [%34.1], env=e4.3
  void                    Deopt              !v    %35.0   !
BB31   <- [29]
  val?^ | miss    %31.0 = LdVar              eR    nextMethod, e4.3
  val?            %31.1 = Force!             !v    %31.0, e4.3   <val?_>
  lgl$-           %31.2 = Is                       %31.1, NULL
  lgl$#-          %31.3 = CheckTrueFalse     e     %31.2
  void                    Branch                   %31.3 -> BB33 (if true) | BB32 (if false)
BB30   <- [29]
  (cls|spec|blt)  %30.0 = LdFun              !v    stop, e4.3
  fs              %30.1 = FrameState         R     0x5604e2e11550+1654: [%30.0], env=e4.3
  void                    Deopt              !v    %30.1, DeadCall@0x5604e611f228[Call#32], %30.0   !
BB59   <- [36]
  val?^ | miss    %59.0 = LdVar              eR    is, e4.3
  lgl$#-          %59.1 = Identical                %59.0, function(object, class2) <(rir::DispatchTable*|...
  void                    Assume             D     %59.1, %34.3 (CallTarget@0x5604e611f228[Call#44])
  prom-           %59.3 = MkArg                    unboundValue, callNextMethod[0x5604e667ac40]_p16, e4.3
  val?            %59.4 = Call               !v    function(object, class2) <(rir::DispatchTable*|...(%59.3, "MethodWithNext") e4.3   <lgl$->
  lgl$#-          %59.5 = IsType                   %59.4 isA lgl$-
  cp              %59.6 = Checkpoint                -> BB61 (default) | BB60 (if assume failed)
BB37   <- [36]
  goto BB38
BB33   <- [31]
  (cls|spec|blt)  %33.0 = LdFun              !v    stop, e4.3
  fs              %33.1 = FrameState         R     0x5604e2e11550+1735: [%33.0], env=e4.3
  void                    Deopt              !v    %33.1, DeadCall@0x5604e611f228[Call#36], %33.0   !
BB32   <- [31]
  val?^ | miss    %32.0 = LdVar              eR    nextMethod, e4.3
  val?            %32.1 = Force!             !v    %32.0, e4.3   <val?_>
  void                    StVar              lW    method, %32.1, e4.3
  (cls|spec|blt)  %32.3 = LdFun              !v    is, e4.3
  fs              %32.4 = FrameState         R     0x5604e2e11550+1791: [%32.3], env=e4.3
  void                    Deopt              !v    %32.4, DeadCall@0x5604e611f228[Call#37], %32.3   !
BB61   <- [59]
  void                    Assume             D     %59.5, %59.6 (Typecheck@0x5604e611f228[Type#94])
  lgl$-           %61.1 = CastType           d     dn %59.4
  lgl$-           %61.2 = Not                d     %61.1, elided
  lgl$#-          %61.3 = CheckTrueFalse     e     %61.2
  void                    Branch                   %61.3 -> BB68 (if true) | BB62 (if false)
BB60   <- [59]
  fs              %60.0 = FrameState         R     0x5604e2e11550+2251: [%59.4], env=e4.3
  void                    Deopt              !v    %60.0   !
BB38   <- [37, 67]
  val?^ | miss    %38.0 = LdVar              eR    nextMethod, e4.3
  val?            %38.1 = Force!<value>      !v    %38.0, e4.3   <cls>
  lgl$-           %38.2 = Is                       %38.1, NULL
  cp              %38.3 = Checkpoint                -> BB40 (default) | BB39 (if assume failed)
BB68   <- [61]
  val?^ | miss    %68.0 = LdVar              eR    addNextMethod, e4.3
  lgl$#-          %68.1 = Identical                %68.0, function(method, f="<unknown>", mlist, optiona|...
  void                    Assume             D     %68.1, %59.6 (CallTarget@0x5604e611f228[Call#45])
  prom-           %68.3 = MkArg                    unboundValue, callNextMethod[0x5604e667ac40]_p23, e4.3
  prom-           %68.4 = MkArg                    unboundValue, callNextMethod[0x5604e667ac40]_p24, e4.3
  prom-           %68.5 = MkArg                    unboundValue, callNextMethod[0x5604e667ac40]_p25, e4.3
  val?            %68.6 = StaticCall         !v    addNextMethod[0x5604dbfd74e0](%68.3, %68.4, missingArg, missingArg, %68.5) { 0 1 4n } e4.3   <cls>
  void                    StVar              lW    method, %68.6, e4.3
  cp              %68.8 = Checkpoint                -> BB70 (default) | BB69 (if assume failed)
BB62   <- [61]
  goto BB63
BB40   <- [38]
  lgl$#-          %40.0 = CheckTrueFalse     e     %38.2
  void                    Branch                   %40.0 -> BB58 (if true) | BB41 (if false)
BB39   <- [38]
  fs              %39.0 = FrameState         R     0x5604e2e11550+2579: [%38.1], env=e4.3
  void                    Deopt              !v    %39.0   !
BB70   <- [68]
  val?^ | miss    %70.0 = LdVar              eR    cacheMethod, e4.3
  lgl$#-          %70.1 = Identical                %70.0, function(f, sig, def, args=names(sig), fdef, i|...
  void                    Assume             D     %70.1, %68.8 (CallTarget@0x5604e611f228[Call#46])
  prom-           %70.3 = MkArg                    unboundValue, callNextMethod[0x5604e667ac40]_p26, e4.3
  prom-           %70.4 = MkArg                    unboundValue, callNextMethod[0x5604e667ac40]_p27, e4.3
  prom-           %70.5 = MkArg                    unboundValue, callNextMethod[0x5604e667ac40]_p30 (!refl), e4.3
  prom-           %70.6 = MkArg                    unboundValue, callNextMethod[0x5604e667ac40]_p31, e4.3
  val?            %70.7 = StaticCall         !v    cacheMethod[0x5604e2c46cc0](%70.3, %70.4, %70.5, missingArg, %70.6, true) { 0 1 2 4n 5n } e4.3
  goto BB63
BB69   <- [68]
  fs              %69.0 = FrameState         R     0x5604e2e11550+2336: [], env=e4.3
  void                    Deopt              !v    %69.0   !
BB63   <- [62, 70]
  (cls|spec|blt)  %63.0 = LdFun              !v    @, <0x5604db659bd8>, e4.3
  prom-           %63.1 = MkArg                    unboundValue, callNextMethod[0x5604e667ac40]_p17, e4.3
  prom-           %63.2 = MkArg                    unboundValue, callNextMethod[0x5604e667ac40]_p18, e4.3
  val?            %63.3 = Call               !v    %63.0(%63.1, %63.2) e4.3   <cls>
  void                    StVar              lW    nextMethod, %63.3, e4.3
  cp              %63.5 = Checkpoint                -> BB65 (default) | BB64 (if assume failed)
BB58   <- [40]
  (cls|spec|blt)  %58.0 = LdFun              !v    stop, e4.3
  fs              %58.1 = FrameState         R     0x5604e2e11550+2605: [%58.0], env=e4.3
  void                    Deopt              !v    %58.1, DeadCall@0x5604e611f228[Call#52], %58.0   !
BB41   <- [40]
  val?^ | miss    %41.0 = LdVar              eR    is.na, e4.3
  lgl$#-          %41.1 = Identical                <blt is.na>, %41.0   <true>
  void                    Assume             D     %41.1, %38.3 (DeadBranchReached@0x5604e611f228[Test#6])
  val?^ | miss    %41.3 = LdVar              eR    match, e4.3
  lgl$#-          %41.4 = Identical                %41.3, function(x, table, nomatch=NA, incomparables=N|...
  void                    Assume             D     %41.4, %38.3 (CallTarget@0x5604e611f228[Call#55])
  val?^ | miss    %41.6 = LdVar              eR    f, e4.3
  lgl$#-          %41.7 = IsType                   %41.6 isA val?~+ | miss
  void                    Assume             D     %41.7, %38.3 (Typecheck@0x5604e611f228[Type#117])
  val?~+ | miss   %41.9 = CastType           d     dn %41.6
  val?+           %41.10 = Force!<value>            %41.9,    <str$+>
  val?^ | miss    %41.11 = LdVar              eR    .BasicSubsetFunctions, e4.3
  val?            %41.12 = Force!<wrapped>    !v    %41.11, e4.3   <str->
  lgl$#-          %41.13 = IsType                   %41.12 isA val?+
  cp              %41.14 = Checkpoint                -> BB43 (default) | BB42 (if assume failed)
BB65   <- [63]
  val?^ | miss    %65.0 = LdVar              eR    assign, e4.3
  lgl$#-          %65.1 = Identical                %65.0, function(x, value, pos=-(1), envir=as.environm|...
  void                    Assume             D     %65.1, %63.5 (CallTarget@0x5604e611f228[Call#50])
  prom-           %65.3 = MkArg                    unboundValue, callNextMethod[0x5604e667ac40]_p19 (!refl), e4.3
  prom-           %65.4 = MkArg                    unboundValue, callNextMethod[0x5604e667ac40]_p20, e4.3
  val?            %65.5 = StaticCall         !v    assign[0x5604e5db6170](".nextMethod", %65.3, missingArg, %65.4) { 0 1 3n } e4.3
  cp              %65.6 = Checkpoint                -> BB67 (default) | BB66 (if assume failed)
BB64   <- [63]
  fs              %64.0 = FrameState         R     0x5604e2e11550+2460: [], env=e4.3
  void                    Deopt              !v    %64.0   !
BB43   <- [41]
  void                    Assume             D     %41.13, %41.14 (Typecheck@0x5604db967b30[Type#1])
  val?+           %43.1 = CastType           d     dn %41.12   <str->
  val+            %43.2 = CallSafeBuiltin    wed   match(%41.10, %43.1, NA, nil)    <int$->
  lgl$#-          %43.3 = IsType                   %43.2 isA int$-
  cp              %43.4 = Checkpoint                -> BB45 (default) | BB44 (if assume failed)
BB42   <- [41]
  fs              %42.0 = FrameState         R     0x5604e2e11550+2730: [<blt is.na>], env=e4.3
  prom-           %42.1 = MkArg                    unboundValue, callNextMethod[0x5604e667ac40]_p12, e4.3
  val?^           %42.2 = CastType                 up %42.1
  prom-           %42.3 = MkArg                    %41.10, callNextMethod[0x5604e667ac40]_p11 (!refl), e4.3
  val?~           %42.4 = CastType                 up %42.3
  env             e42.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%42.2, x=%42.4, parent=R_BaseNamespace, context 0
  fs              %42.6 = FrameState         R     0x5604dc18fd70+23: [%41.10], env=e42.5, next=%42.0
  fs              %42.7 = FrameState         R     0x5604e3263590+5(pr): [%41.12], env=e4.3, next=%42.6
  void                    Deopt              !v    %42.7   !
BB67   <- [65]
  val?^ | miss    %67.0 = LdVar              eR    assign, e4.3
  lgl$#-          %67.1 = Identical                %67.0, function(x, value, pos=-(1), envir=as.environm|...
  void                    Assume             D     %67.1, %65.6 (CallTarget@0x5604e611f228[Call#51])
  prom-           %67.3 = MkArg                    unboundValue, callNextMethod[0x5604e667ac40]_p21, e4.3
  prom-           %67.4 = MkArg                    unboundValue, callNextMethod[0x5604e667ac40]_p22, e4.3
  val?            %67.5 = StaticCall         !v    assign[0x5604e5db6170](".Generic", %67.3, missingArg, %67.4) { 0 1 3n } e4.3
  goto BB38
BB66   <- [65]
  fs              %66.0 = FrameState         R     0x5604e2e11550+2514: [%65.5], env=e4.3
  void                    Deopt              !v    %66.0   !
BB45   <- [43]
  void                    Assume             D     %43.3, %43.4 (Typecheck@0x5604e611f228[Type#119])
  int$-           %45.1 = CastType           d     dn %43.2
  lgl$-           %45.2 = CallSafeBuiltin    wed   is.na(%45.1)    <lgl$->
  lgl$-           %45.3 = Not                d     %45.2, elided
  void                    StVar              lW    subsetCase, %45.3, e4.3
  cp              %45.5 = Checkpoint                -> BB47 (default) | BB46 (if assume failed)
BB44   <- [43]
  fs              %44.0 = FrameState         R     0x5604e2e11550+2730: [<blt is.na>], env=e4.3
  prom-           %44.1 = MkArg                    %43.1, callNextMethod[0x5604e667ac40]_p12 (!refl), e4.3
  val?~           %44.2 = CastType                 up %44.1
  prom-           %44.3 = MkArg                    %41.10, callNextMethod[0x5604e667ac40]_p11 (!refl), e4.3
  val?~           %44.4 = CastType                 up %44.3
  env             e44.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%44.2, x=%44.4, parent=R_BaseNamespace, context 0
  fs              %44.6 = FrameState         R     0x5604dc18fd70+69: [%43.2], env=e44.5, next=%44.0
  void                    Deopt              !v    %44.6   !
BB47   <- [45]
  val?^ | miss    %47.0 = LdVar              eR    nargs, e4.3
  lgl$#-          %47.1 = Identical                <blt nargs>, %47.0   <true>
  void                    Assume             D     %47.1, %45.5 (DeadBranchReached@0x5604e611f228[Test#7])
  val?            %47.3 = CallBuiltin        !v    nargs() e4.3   <int$->
  lgl$#-          %47.4 = IsType                   %47.3 isA int$-
  cp              %47.5 = Checkpoint                -> BB49 (default) | BB48 (if assume failed)
BB46   <- [45]
  fs              %46.0 = FrameState         R     0x5604e2e11550+2767: [], env=e4.3
  void                    Deopt              !v    %46.0   !
BB49   <- [47]
  void                    Assume             D     %47.4, %47.5 (Typecheck@0x5604e611f228[Type#121])
  int$-           %49.1 = CastType           d     dn %47.3
  lgl$-           %49.2 = Gt                 d     %49.1, 0, elided   <lgl$->
  lgl$#-          %49.3 = CheckTrueFalse     e     %49.2
  void                    Branch                   %49.3 -> BB57 (if true) | BB50 (if false)
BB48   <- [47]
  fs              %48.0 = FrameState         R     0x5604e2e11550+2839: [%47.3], env=e4.3
  void                    Deopt              !v    %48.0   !
BB57   <- [49]
  (cls|spec|blt)  %57.0 = LdFun              !v    sys.call, e4.3
  fs              %57.1 = FrameState         R     0x5604e2e11550+4664: [%57.0], env=e4.3
  void                    Deopt              !v    %57.1, DeadCall@0x5604e611f228[Call#82], %57.0   !
BB50   <- [49]
  val?^ | miss    %50.0 = LdVar              eR    subsetCase, e4.3
  lgl$#-          %50.1 = IsType                   %50.0 isA lgl$-
  void                    Assume             D     %50.1, %47.5 (Typecheck@0x5604e611f228[Type#123])
  lgl$-           %50.3 = CastType           d     dn %50.0
  lgl$#-          %50.4 = CheckTrueFalse     e     %50.3
  void                    Branch                   %50.4 -> BB56 (if true) | BB51 (if false)
BB56   <- [50]
  (cls|spec|blt)  %56.0 = LdFun              !v    as.list, e4.3
  fs              %56.1 = FrameState         R     0x5604e2e11550+2969: [%56.0], env=e4.3
  void                    Deopt              !v    %56.1, DeadCall@0x5604e611f228[Call#58], %56.0   !
BB51   <- [50]
  val?^ | miss    %51.0 = LdVar              eR    match.call, e4.3
  lgl$#-          %51.1 = Identical                %51.0, function(definition=sys.function(sys.parent())|...
  void                    Assume             D     %51.1, %47.5 (CallTarget@0x5604e611f228[Call#57])
  prom-           %51.3 = MkArg                    unboundValue, callNextMethod[0x5604e667ac40]_p13, e4.3
  prom-           %51.4 = MkArg                    unboundValue, callNextMethod[0x5604e667ac40]_p14, e4.3
  prom-           %51.5 = MkArg                    unboundValue, callNextMethod[0x5604e667ac40]_p15, e4.3
  val?            %51.6 = StaticCall         !v    match.call[0x5604e634b6e0](%51.3, %51.4, false, %51.5) { 0 1 2n 3n } e4.3   <code->
  void                    StVar              lW    call, %51.6, e4.3
  cp              %51.8 = Checkpoint                -> BB53 (default) | BB52 (if assume failed)
BB53   <- [51]
  val?^ | miss    %53.0 = LdVar              eR    .Call, e4.3
  lgl$#-          %53.1 = Identical                <blt .Call>, %53.0   <true>
  void                    Assume             D     %53.1, %51.8 (DeadBranchReached@0x5604e611f228[Test#17])
  val?^ | miss    %53.3 = LdVar              eR    C_R_nextMethodCall, e4.3
  val?            %53.4 = Force!<value>      !v    %53.3, e4.3   <vec>
  cp              %53.5 = Checkpoint                -> BB55 (default) | BB54 (if assume failed)
BB52   <- [51]
  fs              %52.0 = FrameState         R     0x5604e2e11550+2959: [], env=e4.3
  void                    Deopt              !v    %52.0   !
BB55   <- [53]
  val?^ | miss    %55.0 = LdVar              eR    call, e4.3
  lgl$#-          %55.1 = IsType                   %55.0 isA val?~- | miss
  void                    Assume             D     %55.1, %53.5 (Typecheck@0x5604e611f228[Type#194])
  val?~- | miss   %55.3 = CastType           d     dn %55.0
  val?-           %55.4 = Force!<value>            %55.3,    <code->
  val?^ | miss    %55.5 = LdVar              eR    callEnv, e4.3
  lgl$#-          %55.6 = IsType                   %55.5 isA val?~- | miss
  void                    Assume             D     %55.6, %53.5 (Typecheck@0x5604e611f228[Type#195])
  val?~- | miss   %55.8 = CastType           d     dn %55.5
  val?-           %55.9 = Force!<value>            %55.8,    <env->
  val?            %55.10 = CallBuiltin        !     .Call(%53.4, %55.4, %55.9) e4.3   <(cls|other)>
  void                    Return             l     %55.10
BB54   <- [53]
  fs              %54.0 = FrameState         R     0x5604e2e11550+4599: [<blt .Call>, %53.4], env=e4.3
  void                    Deopt              !v    %54.0   !
Prom 0:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    parent, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <int$->
  void                    Return             l     %1.3
Prom 1:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    maybeMethod, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <cls>
  void                    Return             l     %1.3
Prom 2:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     sys.parent, <0x5604dc5fe590>, e1.0
  val?            %1.2  = Call               !     %1.1(2) e1.0   <int$->
  void                    Return             l     %1.2
Prom 3:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     sys.parent, <0x5604dc5fe590>, e1.0
  val?            %1.2  = Call               !     %1.1(2) e1.0   <int$->
  void                    Return             l     %1.2
Prom 4:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    methodEnv, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <env->
  void                    Return             l     %1.3
Prom 5:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    .Method, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 6:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    callEnv, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <env->
  void                    Return             l     %1.3
Prom 7:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    .nextMethod, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 8:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    methodEnv, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <env->
  void                    Return             l     %1.3
Prom 9:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    .Generic, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 10:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    method, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <cls>
  void                    Return             l     %1.3
Prom 11:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    f, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$+>
  void                    Return             l     %1.3
Prom 12:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    .BasicSubsetFunctions, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <str->
  void                    Return             l     %1.3
Prom 13:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    methodFun, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <cls>
  void                    Return             l     %1.3
Prom 14:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    mcall, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <code->
  void                    Return             l     %1.3
Prom 15:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    dotsenv, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <env->
  void                    Return             l     %1.3
Prom 16:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    method, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <cls>
  void                    Return             l     %1.3
Prom 17:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    method, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 18:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    nextMethod, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 19:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    nextMethod, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <cls>
  void                    Return             l     %1.3
Prom 20:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    callEnv, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <env->
  void                    Return             l     %1.3
Prom 21:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    f, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$+>
  void                    Return             l     %1.3
Prom 22:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    callEnv, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <env->
  void                    Return             l     %1.3
Prom 23:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    method, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <cls>
  void                    Return             l     %1.3
Prom 24:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    f, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$+>
  void                    Return             l     %1.3
Prom 25:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    methodEnv, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <env->
  void                    Return             l     %1.3
Prom 26:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    f, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 27:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     @, <0x5604db659bd8>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, callNextMethod[0x5604e667ac40]_p28, e1.0
  prom-           %1.3  = MkArg                    unboundValue, callNextMethod[0x5604e667ac40]_p29, e1.0
  val?            %1.4  = Call               !     %1.1(%1.2, %1.3) e1.0   <str$>
  void                    Return             l     %1.4
Prom 28:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    method, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 29:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    target, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 30:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    method, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <cls>
  void                    Return             l     %1.3
Prom 31:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     getGeneric, <0x5604dbe3a8d8>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, callNextMethod[0x5604e667ac40]_p32, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <cls>
  void                    Return             l     %1.3
Prom 32:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    f, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$+>
  void                    Return             l     %1.3
Prom 33:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    parent, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <int$->
  void                    Return             l     %1.3

│ callNextMethod[0x5604e667ac40]                                               │
└──────────────────────────────────────────────────────────────────────────────┘
