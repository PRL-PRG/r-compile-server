
┌──────────────────────────────────────────────────────────────────────────────┐
│ is[0x5604e67edf70]                                                           │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;Eager1,NonRefl0,NonRefl1,!Obj1       │
│ Properties:                                                                  │
├────── PIR Version After Optimizations
is[0x5604e67edf70]
BB0
  goto BB1
BB1   <- [0]
  val?~+          %1.0  = LdArg                    1
  val?^           %1.1  = LdArg                    0
  val?^ | miss    %1.2  = LdVar              eR    class, <env 0x5604dbc61378>
  lgl$#-          %1.3  = Identical                <blt class>, %1.2   <true>
  cp              %1.4  = Checkpoint                -> BB2 (default) | BB124 (if assume failed)
BB2   <- [1]
  void                    Assume             D     %1.3, %1.4 (DeadBranchReached@0x5604dca9a278[Test#0])
  env             e2.1  = MkEnv              l     object=%1.1, class2=%1.0, parent=<env 0x5604dbc61378>, context 1
  val?            %2.2  = Force!<lazy>       !vr   %1.1,    <val?>
  val?            %2.3  = CallBuiltin        !v    class(%2.2) e2.1   <str$+>
  void                    StVar              lW    class1, %2.3, e2.1
  lgl$#-          %2.5  = IsType                   %2.3 isA val?+
  cp              %2.6  = Checkpoint                -> BB4 (default) | BB3 (if assume failed)
BB124   <- [1]
  env             e124.0 = (MkEnv)            l     object=%1.1, class2=%1.0, parent=<env 0x5604dbc61378>, context 1
  fs              %124.1 = FrameState         R     0x5604dd869420+17: [<blt class>, %1.3], env=e124.0
  void                    Deopt              !v    %124.1
BB4   <- [2]
  val?^ | miss    %4.0  = LdVar              eR    length, e2.1
  lgl$#-          %4.1  = Identical                <blt length>, %4.0   <true>
  void                    Assume             D     %4.1, %2.6 (DeadBranchReached@0x5604dca9a278[Test#1])
  val             %4.3  = ChkMissing         e     %2.3
  void                    Assume             D     %2.5, %2.6 (Typecheck@0x5604dca9a278[Type#2])
  val?+           %4.5  = CastType           d     dn %2.3   <str$+>
  (int|real)$-    %4.6  = CallSafeBuiltin    wed   length(%4.5)    <int$->
  lgl$#-          %4.7  = IsType                   %4.6 isA int$-
  cp              %4.8  = Checkpoint                -> BB6 (default) | BB5 (if assume failed)
BB3   <- [2]
  fs              %3.0  = FrameState         R     0x5604dd869420+105: [], env=e2.1
  void                    Deopt              !v    %3.0   !
BB6   <- [4]
  void                    Assume             D     %4.7, %4.8 (Typecheck@0x5604dca9a278[Type#5])
  int$-           %6.1  = CastType           d     dn %4.6
  lgl$-           %6.2  = Gt                 d     %6.1, 1L, elided   <lgl$->
  void                    StVar              lW    S3Case, %6.2, e2.1
  lgl$#-          %6.4  = CheckTrueFalse     e     %6.2
  void                    Branch                   %6.4 -> BB123 (if true) | BB7 (if false)
BB5   <- [4]
  fs              %5.0  = FrameState         R     0x5604dd869420+196: [%4.6], env=e2.1
  void                    Deopt              !v    %5.0   !
BB123   <- [6]
  val?            %123.0 = Extract2_1D        wed   %4.5, 1L, elided   <val?_>
  void                    StVar              lW    class1, %123.0, e2.1
  goto BB8
BB7   <- [6]
  goto BB8
BB8   <- [7, 123]
  cp              %8.0  = Checkpoint                -> BB10 (default) | BB9 (if assume failed)
BB10   <- [8]
  lgl$-           %10.0 = Missing            eR    class2, e2.1
  void                    Visible            v     
  lgl$#-          %10.2 = CheckTrueFalse     e     %10.0
  void                    Branch                   %10.2 -> BB122 (if true) | BB11 (if false)
BB9   <- [8]
  fs              %9.0  = FrameState         R     0x5604dd869420+314: [], env=e2.1
  void                    Deopt              !v    %9.0   !
BB122   <- [10]
  (cls|spec|blt)  %122.0 = LdFun              !     extends, e2.1
  prom-           %122.1 = MkArg                    unboundValue, is[0x5604e67edf70]_p58, e2.1
  val?            %122.2 = Call               !     %122.0(%122.1) e2.1   <val?_>
  goto BB93
BB11   <- [10]
  val?^ | miss    %11.0 = LdVar              eR    getClassDef, e2.1
  lgl$#-          %11.1 = Identical                %11.0, function(Class, where=topenv(parent.frame()), |...
  void                    Assume             D     %11.1, %8.0 (CallTarget@0x5604dca9a278[Call#3])
  prom-           %11.3 = MkArg                    unboundValue, is[0x5604e67edf70]_p0 (!refl), e2.1
  val?            %11.4 = StaticCall         !v    getClassDef[0x5604e671daf0](%11.3) e2.1   <other>
  void                    StVar              lW    class1Def, %11.4, e2.1
  void                    StVar              lW    class2Def, nil, e2.1
  cp              %11.7 = Checkpoint                -> BB13 (default) | BB12 (if assume failed)
BB93   <- [122, 120, 92]
  val?            %93.0 = Phi                      %92.0:BB92, %120.3:BB120, %122.2:BB122
  void                    Return             l     %93.0
BB13   <- [11]
  val?^ | miss    %13.0 = LdVar              eR    is.character, e2.1
  lgl$#-          %13.1 = Identical                <blt is.character>, %13.0   <true>
  void                    Assume             D     %13.1, %11.7 (DeadBranchReached@0x5604dca9a278[Test#3])
  val?^ | miss    %13.3 = LdVar              eR    class2, e2.1
  val?            %13.4 = Force!<lazy>       !v    %13.3, e2.1   <str$+>
  lgl$#-          %13.5 = CallSafeBuiltin    wed   is.character(%13.4)    <lgl$->
  void                    Branch                   %13.5 -> BB121 (if true) | BB14 (if false)
BB12   <- [11]
  fs              %12.0 = FrameState         R     0x5604dd869420+430: [], env=e2.1
  void                    Deopt              !v    %12.0   !
BB121   <- [13]
  goto BB15
BB14   <- [13]
  val?^ | miss    %14.0 = LdVar              eR    class2, e2.1
  val?            %14.1 = Force!             !v    %14.0, e2.1   <val?_>
  void                    StVar              lW    class2Def, %14.1, e2.1
  (cls|spec|blt)  %14.3 = LdFun              !v    @, e2.1
  prom-           %14.4 = MkArg                    unboundValue, is[0x5604e67edf70]_p56, e2.1
  prom-           %14.5 = MkArg                    unboundValue, is[0x5604e67edf70]_p57, e2.1
  val?            %14.6 = Call               !v    %14.3(%14.4, %14.5) e2.1   <val?_>
  void                    StVar              lW    class2, %14.6, e2.1
  goto BB15
BB15   <- [121, 14]
  val?^ | miss    %15.0 = LdVar              eR    class1Def, e2.1
  void                    Visible            v     
  val?            %15.2 = Force!<value>      !     %15.0, e2.1   <other>
  lgl$-           %15.3 = Is                       %15.2, NULL
  cp              %15.4 = Checkpoint                -> BB17 (default) | BB16 (if assume failed)
BB17   <- [15]
  lgl$#-          %17.0 = CheckTrueFalse     e     %15.3
  void                    Branch                   %17.0 -> BB120 (if true) | BB18 (if false)
BB16   <- [15]
  fs              %16.0 = FrameState         R     0x5604dd869420+621: [%15.2], env=e2.1
  void                    Deopt              !v    %16.0   !
BB120   <- [17]
  (cls|spec|blt)  %120.0 = LdFun              !     inherits, e2.1
  prom-           %120.1 = MkArg                    unboundValue, is[0x5604e67edf70]_p54, e2.1
  prom-           %120.2 = MkArg                    unboundValue, is[0x5604e67edf70]_p55, e2.1
  val?            %120.3 = Call               !     %120.0(%120.1, %120.2) e2.1   <val?_>
  goto BB93
BB18   <- [17]
  val?^ | miss    %18.0 = LdVar              eR    class2Def, e2.1
  lgl$#-          %18.1 = IsType                   %18.0 isA val?~- | miss
  void                    Assume             D     %18.1, %15.4 (Typecheck@0x5604dca9a278[Type#25])
  val?~- | miss   %18.3 = CastType           d     dn %18.0
  val?-           %18.4 = Force!<value>            %18.3,    <nil->
  lgl$-           %18.5 = Is                       %18.4, NULL
  lgl$#-          %18.6 = CheckTrueFalse     e     %18.5
  void                    Branch                   %18.6 -> BB119 (if true) | BB19 (if false)
BB119   <- [18]
  val?^ | miss    %119.0 = LdVar              eR    getClassDef, e2.1
  lgl$#-          %119.1 = Identical                %119.0, function(Class, where=topenv(parent.frame()), |...
  void                    Assume             D     %119.1, %15.4 (CallTarget@0x5604dca9a278[Call#7])
  prom-           %119.3 = MkArg                    unboundValue, is[0x5604e67edf70]_p47, e2.1
  prom-           %119.4 = MkArg                    unboundValue, is[0x5604e67edf70]_p48, e2.1
  prom-           %119.5 = MkArg                    unboundValue, is[0x5604e67edf70]_p50, e2.1
  val?            %119.6 = StaticCall         !v    getClassDef[0x5604dfe84170](%119.3, %119.4, %119.5) e2.1   <(nil|other)>
  void                    StVar              lW    class2Def, %119.6, e2.1
  goto BB20
BB19   <- [18]
  goto BB20
BB20   <- [19, 119]
  cp              %20.0 = Checkpoint                -> BB22 (default) | BB21 (if assume failed)
BB22   <- [20]
  val?^ | miss    %22.0 = LdVar              eR    S3Case, e2.1
  lgl$#-          %22.1 = IsType                   %22.0 isA lgl$-
  void                    Assume             D     %22.1, %20.0 (Typecheck@0x5604dca9a278[Type#36])
  lgl$-           %22.3 = CastType           d     dn %22.0
  lgl$-           %22.4 = AsLogical                %22.3
  lgl$#-          %22.5 = Identical                %22.4, true
  void                    Branch                   %22.5 -> BB118 (if true) | BB23 (if false)
BB21   <- [20]
  fs              %21.0 = FrameState         R     0x5604dd869420+771: [], env=e2.1
  void                    Deopt              !v    %21.0   !
BB118   <- [22]
  goto BB28
BB23   <- [22]
  val?^ | miss    %23.0 = LdVar              eR    is.object, e2.1
  lgl$#-          %23.1 = Identical                <blt is.object>, %23.0   <true>
  void                    Assume             D     %23.1, %20.0 (DeadBranchReached@0x5604dca9a278[Test#4])
  val?^ | miss    %23.3 = LdVar              eR    object, e2.1
  val?            %23.4 = Force!<wrapped>    !v    %23.3, e2.1   <val?>
  lgl$#-          %23.5 = CallSafeBuiltin    wed   is.object(%23.4)    <lgl$->
  cp              %23.6 = Checkpoint                -> BB25 (default) | BB24 (if assume failed)
BB28   <- [118, 27]
  lgl$-           %28.0 = Phi                      %27.2:BB27, %22.4:BB118
  lgl$-           %28.1 = AsLogical                %28.0
  lgl$#-          %28.2 = Identical                %28.1, false
  void                    StVar              lW    S3Case, %28.0, e2.1
  void                    Branch                   %28.2 -> BB116 (if true) | BB29 (if false)
BB25   <- [23]
  void                    Branch                   %23.5 -> BB117 (if true) | BB26 (if false)
BB24   <- [23]
  fs              %24.0 = FrameState         R     0x5604dd869420+883: [%22.4, %23.5], env=e2.1
  void                    Deopt              !v    %24.0   !
BB116   <- [28]
  goto BB46
BB29   <- [28]
  val?^ | miss    %29.0 = LdVar              eR    class2Def, e2.1
  val?            %29.1 = Force!             !v    %29.0, e2.1   <val?_>
  lgl$-           %29.2 = Is                       %29.1, NULL
  lgl$-           %29.3 = AsLogical                %29.2
  lgl$#-          %29.4 = Identical                %29.3, true
  cp              %29.5 = Checkpoint                -> BB31 (default) | BB30 (if assume failed)
BB117   <- [25]
  val?^ | miss    %117.0 = LdVar              eR    isS4, e2.1
  lgl$#-          %117.1 = Identical                <blt isS4>, %117.0   <true>
  void                    Assume             D     %117.1, %23.6 (DeadBranchReached@0x5604dca9a278[Test#5])
  val?^ | miss    %117.3 = LdVar              eR    object, e2.1
  val?            %117.4 = Force!<wrapped>    !v    %117.3, e2.1   <(cls|other)>
  lgl$#-          %117.5 = CallSafeBuiltin    wed   isS4(%117.4)    <lgl$->
  lgl$#-          %117.6 = Not                d     %117.5, elided
  lgl$-           %117.7 = LAnd                     %23.5, %117.6
  goto BB27
BB26   <- [25]
  goto BB27
BB46   <- [116, 45]
  lgl$-           %46.0 = Phi                      %45.2:BB45, %28.1:BB116
  void                    StVar              lW    S3Case, %46.0, e2.1
  cp              %46.2 = Checkpoint                -> BB48 (default) | BB47 (if assume failed)
BB31   <- [29]
  void                    Branch                   %29.4 -> BB115 (if true) | BB32 (if false)
BB30   <- [29]
  fs              %30.0 = FrameState         R     0x5604dd869420+1036: [%28.1, %29.1], env=e2.1
  void                    Deopt              !v    %30.0   !
BB27   <- [26, 117]
  lgl$-           %27.0 = Phi                      %117.7:BB117, %23.5:BB26
  lgl$-           %27.1 = AsLogical                %27.0
  lgl$-           %27.2 = LOr                      %22.4, %27.1
  goto BB28
BB48   <- [46]
  lgl$#-          %48.0 = CheckTrueFalse     e     %46.0
  void                    Branch                   %48.0 -> BB109 (if true) | BB49 (if false)
BB47   <- [46]
  fs              %47.0 = FrameState         R     0x5604dd869420+1160: [], env=e2.1
  void                    Deopt              !v    %47.0   !
BB115   <- [31]
  goto BB39
BB32   <- [31]
  val?^ | miss    %32.0 = LdVar              eR    %in%, e2.1
  lgl$#-          %32.1 = Identical                %32.0, function(x, table) <(rir::DispatchTable*)0x560|...
  void                    Assume             D     %32.1, %29.5 (CallTarget@0x5604dca9a278[Call#15])
  prom-           %32.3 = MkArg                    unboundValue, is[0x5604e67edf70]_p1, e2.1
  prom-           %32.4 = MkArg                    unboundValue, is[0x5604e67edf70]_p2, e2.1
  val?^           %32.5 = CastType                 up %32.4
  val?^           %32.6 = CastType                 up %32.3
  env             e32.7 = MkEnv              l     x=%32.6, table=%32.5, parent=R_BaseNamespace, context 0
  prom-           %32.8 = MkArg                    unboundValue, is[0x5604e67edf70]_p60, e32.7
  val?^           %32.9 = CastType                 up %32.8
  val?^ | miss    %32.10 = LdVar              eR    class2, e2.1
  val?            %32.11 = Force!<value>      !v    %32.10, e2.1   <str$->
  prom-           %32.12 = MkArg                    %32.11, is[0x5604e67edf70]_p1 (!refl), e2.1
  val?~           %32.13 = CastType                 up %32.12
  void                    StArg              lW    x, %32.13, e32.7
  prom-           %32.15 = MkArg                    %32.11, is[0x5604e67edf70]_p59 (!refl), e32.7
  val?~           %32.16 = CastType                 up %32.15
  cp              %32.17 = Checkpoint                -> BB34 (default) | BB33 (if assume failed)
BB109   <- [48]
  val?^ | miss    %109.0 = LdVar              eR    inherits, e2.1
  lgl$#-          %109.1 = Identical                %109.0, function(x, what, which=FALSE) <(rir::Dispatch|...
  void                    Assume             D     %109.1, %46.2 (CallTarget@0x5604dca9a278[Call#43])
  prom-           %109.3 = MkArg                    unboundValue, is[0x5604e67edf70]_p45, e2.1
  prom-           %109.4 = MkArg                    unboundValue, is[0x5604e67edf70]_p46, e2.1
  ct              %109.5 = PushContext        lCL   %109.3, %109.4, inherits(object, class2), function(x, what, which=FALSE) <(rir::Dispatch|..., e2.1
  val?^           %109.6 = CastType                 up %109.4
  val?^           %109.7 = CastType                 up %109.3
  env             e109.8 = MkEnv              l     x=%109.7, what=%109.6, which(miss)=false, parent=R_BaseNamespace, context 1
  val?            %109.9 = Force!<lazy>       !vL   %109.7, e109.8   <val?>
  val?            %109.10 = Force!<lazy>       !vL   %109.6, e109.8   <str$->
  lgl$#-          %109.11 = IsType                   %109.10 isA val?-
  cp              %109.12 = Checkpoint                -> BB111 (default) | BB110 (if assume failed)
BB49   <- [48]
  val?^ | miss    %49.0 = LdVar              eR    .identC, e2.1
  lgl$#-          %49.1 = Identical                %49.0, function(c1=NULL, c2=NULL) <(rir::DispatchTabl|...
  void                    Assume             D     %49.1, %46.2 (CallTarget@0x5604dca9a278[Call#17])
  prom-           %49.3 = MkArg                    unboundValue, is[0x5604e67edf70]_p4, e2.1
  prom-           %49.4 = MkArg                    unboundValue, is[0x5604e67edf70]_p5, e2.1
  ct              %49.5 = PushContext        lCL   %49.3, %49.4, .identC(class1, class2), function(c1=NULL, c2=NULL) <(rir::DispatchTabl|..., e2.1
  val?^           %49.6 = CastType                 up %49.4
  val?^           %49.7 = CastType                 up %49.3
  val?^ | miss    %49.8 = LdVar              eR    .Call, <env 0x5604dbc61378>
  lgl$#-          %49.9 = Identical                <blt .Call>, %49.8   <true>
  cp              %49.10 = Checkpoint                -> BB51 (default) | BB50 (if assume failed)
BB39   <- [115, 38]
  lgl$-           %39.0 = Phi                      %38.4:BB38, %29.3:BB115
  lgl$-           %39.1 = AsLogical                %39.0
  lgl$#-          %39.2 = Identical                %39.1, true
  cp              %39.3 = Checkpoint                -> BB41 (default) | BB40 (if assume failed)
BB34   <- [32]
  env             e34.0 = (MkEnv)            l     x=%32.16, table=%32.9, nomatch=0L, incomparables(miss)=nil, parent=R_BaseNamespace, context -1
  lgl$#-          %34.1 = IsEnvStub          R     , e34.0
  void                    Assume             D     %34.1, %32.17 (EnvStubMaterialized@0x5604db967b30[Call#unknown])
  val?            %34.3 = Force!<lazy>       !vL   %32.5, e34.0   <val?->
  prom-           %34.4 = MkArg                    %34.3, is[0x5604e67edf70]_p60 (!refl), e32.7
  val?~           %34.5 = CastType                 up %34.4
  void                    StArg              lWd   table, %34.5, e34.0
  lgl$#-          %34.7 = IsType                   %34.3 isA val?+
  cp              %34.8 = Checkpoint                -> BB36 (default) | BB35 (if assume failed)
BB33   <- [32]
  fs              %33.0 = FrameState         R     0x5604dd869420+1090: [%28.1, %29.3], env=e2.1
  fs              %33.1 = FrameState         R     0x5604dbc874e0+54: [], env=e32.7, next=%33.0
  env             e33.2 = (MkEnv)            l     x=%32.16, table=%32.9, nomatch=0L, incomparables(miss)=nil, parent=R_BaseNamespace, context -1
  fs              %33.3 = FrameState         R     0x5604dc18fd70+9: [%32.11], env=e33.2, next=%33.1
  void                    Deopt              !v    %33.3   !
BB111   <- [109]
  void                    Assume             D     %109.11, %109.12 (Typecheck@0x5604dbf2cb00[Type#1])
  val?-           %111.1 = CastType           d     dn %109.10   <str$->
  val?            %111.2 = CallBuiltin        !     inherits(%109.9, %111.1, false) e109.8
  val?            %111.3 = PopContext         C     %111.2, %109.5   <lgl$->
  lgl$#-          %111.4 = IsType                   %111.3 isA lgl$-
  cp              %111.5 = Checkpoint                -> BB113 (default) | BB112 (if assume failed)
BB110   <- [109]
  fs              %110.0 = FrameState         R     0x5604dd869420+2099: [], env=e2.1
  fs              %110.1 = FrameState         R     0x5604dd52b1e0+37: [%109.9, %109.10, false], env=e109.8, next=%110.0
  void                    Deopt              !v    %110.1   !
BB51   <- [49]
  void                    Assume             D     %49.9, %49.10 (DeadBranchReached@0x5604dca9ad78[Test#0])
  val?^ | miss    %51.1 = LdVar              eR    C_R_identC, <env 0x5604dbc61378>
  env             e51.2 = MkEnv              l     c1=%49.7, c2=%49.6, parent=<env 0x5604dbc61378>, context 1
  val?            %51.3 = Force!<value>      !v    %51.1, e51.2   <vec>
  val?^ | miss    %51.4 = LdVar              eR    c1, e51.2
  val?            %51.5 = Force!<lazy>       !v    %51.4, e51.2   <str$+>
  val?^ | miss    %51.6 = LdVar              eR    c2, e51.2
  val?            %51.7 = Force!<lazy>       !v    %51.6, e51.2   <str$+>
  val?            %51.8 = CallBuiltin        !v    .Call(%51.3, %51.5, %51.7) e51.2   <lgl$->
  lgl$#-          %51.9 = IsType                   %51.8 isA lgl$-
  cp              %51.10 = Checkpoint                -> BB53 (default) | BB52 (if assume failed)
BB50   <- [49]
  fs              %50.0 = FrameState         R     0x5604dd869420+1217: [], env=e2.1
  env             e50.1 = (MkEnv)            l     c1=%49.7, c2=%49.6, parent=<env 0x5604dbc61378>, context 1
  fs              %50.2 = FrameState         R     0x5604dd86dd00+17: [<blt .Call>, %49.9], env=e50.1, next=%50.0
  void                    Deopt              !v    %50.2   !
BB41   <- [39]
  void                    Branch                   %39.2 -> BB114 (if true) | BB42 (if false)
BB40   <- [39]
  fs              %40.0 = FrameState         R     0x5604dd869420+1097: [%28.1, %39.0], env=e2.1
  void                    Deopt              !v    %40.0   !
BB36   <- [34]
  lgl$#-          %36.0 = IsEnvStub          R     , e34.0
  void                    Assume             D     %36.0, %34.8 (EnvStubMaterialized@0x5604db967b30[Call#unknown])
  lgl$#-          %36.2 = IsType                   %32.11 isA val?+
  void                    Assume             D     %36.2, %34.8 (Typecheck@0x5604db967b30[Type#0])
  val?+           %36.4 = CastType           d     dn %32.11   <(int|str)+>
  void                    Assume             D     %34.7, %34.8 (Typecheck@0x5604db967b30[Type#1])
  val?+           %36.6 = CastType           d     dn %34.3   <val?->
  val+            %36.7 = CallSafeBuiltin    wed   match(%36.4, %36.6, 0L, nil)    <int->
  lgl$#-          %36.8 = IsType                   %36.7 isA int-
  cp              %36.9 = Checkpoint                -> BB38 (default) | BB37 (if assume failed)
BB35   <- [34]
  fs              %35.0 = FrameState         R     0x5604dd869420+1090: [%28.1, %29.3], env=e2.1
  fs              %35.1 = FrameState         R     0x5604dbc874e0+54: [], env=e32.7, next=%35.0
  fs              %35.2 = FrameState         R     0x5604dc18fd70+23: [%32.11, %34.3], env=e34.0, next=%35.1
  void                    Deopt              !v    %35.2   !
BB113   <- [111]
  void                    Assume             D     %111.4, %111.5 (Typecheck@0x5604dca9a278[Type#116])
  goto BB92
BB112   <- [111]
  fs              %112.0 = FrameState         R     0x5604dd869420+2099: [%111.3], env=e2.1
  void                    Deopt              !v    %112.0   !
BB53   <- [51]
  void                    Assume             D     %51.9, %51.10 (Typecheck@0x5604dca9ad78[Type#6])
  lgl$-           %53.1 = CastType           d     dn %51.8
  val?            %53.2 = PopContext         C     %53.1, %49.5   <lgl$->
  lgl$#-          %53.3 = IsType                   %53.2 isA lgl$-
  cp              %53.4 = Checkpoint                -> BB55 (default) | BB54 (if assume failed)
BB52   <- [51]
  fs              %52.0 = FrameState         R     0x5604dd869420+1217: [], env=e2.1
  fs              %52.1 = FrameState         R     0x5604dd86dd00+129: [%51.8], env=e51.2, next=%52.0
  void                    Deopt              !v    %52.1   !
BB114   <- [41]
  goto BB45
BB42   <- [41]
  val?^ | miss    %42.0 = LdVar              eR    extends, e2.1
  lgl$#-          %42.1 = Identical                %42.0, function(class1, class2, maybe=TRUE, fullInfo=|...
  void                    Assume             D     %42.1, %39.3 (CallTarget@0x5604dca9a278[Call#16])
  prom-           %42.3 = MkArg                    unboundValue, is[0x5604e67edf70]_p3, e2.1
  val?            %42.4 = Call               !v    function(class1, class2, maybe=TRUE, fullInfo=|...(%42.3, "oldClass") e2.1   <lgl$->
  lgl$#-          %42.5 = IsType                   %42.4 isA lgl$-
  cp              %42.6 = Checkpoint                -> BB44 (default) | BB43 (if assume failed)
BB38   <- [36]
  void                    Assume             D     %36.8, %36.9 (Typecheck@0x5604dccb9688[Type#2])
  int-            %38.1 = CastType           d     dn %36.7
  lgl-            %38.2 = Gt                 wed   %38.1, 0L, elided   <lgl->
  lgl$-           %38.3 = AsLogical                %38.2
  lgl$-           %38.4 = LOr                      %29.3, %38.3
  goto BB39
BB37   <- [36]
  fs              %37.0 = FrameState         R     0x5604dd869420+1090: [%28.1, %29.3], env=e2.1
  fs              %37.1 = FrameState         R     0x5604dbc874e0+54: [], env=e32.7, next=%37.0
  fs              %37.2 = FrameState         R     0x5604dc18fd70+69: [%36.7], env=e34.0, next=%37.1
  void                    Deopt              !v    %37.2   !
BB92   <- [113, 91]
  val?            %92.0 = Phi                      %91.0:BB91, %111.3:BB113
  goto BB93
BB55   <- [53]
  void                    Assume             D     %53.3, %53.4 (Typecheck@0x5604dca9a278[Type#53])
  lgl$-           %55.1 = CastType           d     dn %53.2
  lgl$-           %55.2 = AsLogical                %55.1
  lgl$#-          %55.3 = Identical                %55.2, true
  void                    Branch                   %55.3 -> BB108 (if true) | BB56 (if false)
BB54   <- [53]
  fs              %54.0 = FrameState         R     0x5604dd869420+1217: [%53.2], env=e2.1
  void                    Deopt              !v    %54.0   !
BB45   <- [44, 114]
  lgl$-           %45.0 = Phi                      %44.3:BB44, %39.1:BB114
  lgl$-           %45.1 = AsLogical                %45.0
  lgl$-           %45.2 = LAnd                     %28.1, %45.1
  goto BB46
BB44   <- [42]
  void                    Assume             D     %42.5, %42.6 (Typecheck@0x5604dca9a278[Type#49])
  lgl$-           %44.1 = CastType           d     dn %42.4
  lgl$-           %44.2 = AsLogical                %44.1
  lgl$-           %44.3 = LOr                      %39.1, %44.2
  goto BB45
BB43   <- [42]
  fs              %43.0 = FrameState         R     0x5604dd869420+1141: [%28.1, %39.1, %42.4], env=e2.1
  void                    Deopt              !v    %43.0   !
BB108   <- [55]
  goto BB63
BB56   <- [55]
  val?^ | miss    %56.0 = LdVar              eR    .identC, e2.1
  lgl$#-          %56.1 = Identical                %56.0, function(c1=NULL, c2=NULL) <(rir::DispatchTabl|...
  void                    Assume             D     %56.1, %53.4 (CallTarget@0x5604dca9a278[Call#18])
  prom-           %56.3 = MkArg                    unboundValue, is[0x5604e67edf70]_p6, e2.1
  ct              %56.4 = PushContext        lCL   %56.3, "ANY", .identC(class2, "ANY"), function(c1=NULL, c2=NULL) <(rir::DispatchTabl|..., e2.1
  val?^           %56.5 = CastType                 up %56.3
  val?^ | miss    %56.6 = LdVar              eR    .Call, <env 0x5604dbc61378>
  lgl$#-          %56.7 = Identical                <blt .Call>, %56.6   <true>
  cp              %56.8 = Checkpoint                -> BB58 (default) | BB57 (if assume failed)
BB63   <- [62, 108]
  lgl$-           %63.0 = Phi                      %62.3:BB62, %55.2:BB108
  lgl$#-          %63.1 = CheckTrueFalse     e     %63.0
  void                    Branch                   %63.1 -> BB107 (if true) | BB64 (if false)
BB58   <- [56]
  void                    Assume             D     %56.7, %56.8 (DeadBranchReached@0x5604dca9ad78[Test#0])
  val?^ | miss    %58.1 = LdVar              eR    C_R_identC, <env 0x5604dbc61378>
  env             e58.2 = MkEnv              l     c1=%56.5, c2="ANY", parent=<env 0x5604dbc61378>, context 1
  val?            %58.3 = Force!<value>      !v    %58.1, e58.2   <vec>
  val?^ | miss    %58.4 = LdVar              eR    c1, e58.2
  val?            %58.5 = Force!<lazy>       !v    %58.4, e58.2   <str$+>
  val?^ | miss    %58.6 = LdVar              eR    c2, e58.2
  val?            %58.7 = Force!<lazy>       !v    %58.6, e58.2   <str$+>
  val?            %58.8 = CallBuiltin        !v    .Call(%58.3, %58.5, %58.7) e58.2   <lgl$->
  lgl$#-          %58.9 = IsType                   %58.8 isA lgl$-
  cp              %58.10 = Checkpoint                -> BB60 (default) | BB59 (if assume failed)
BB57   <- [56]
  fs              %57.0 = FrameState         R     0x5604dd869420+1266: [%55.2], env=e2.1
  env             e57.1 = (MkEnv)            l     c1=%56.5, c2="ANY", parent=<env 0x5604dbc61378>, context 1
  fs              %57.2 = FrameState         R     0x5604dd86dd00+17: [<blt .Call>, %56.7], env=e57.1, next=%57.0
  void                    Deopt              !v    %57.2   !
BB107   <- [63]
  void                    Visible            v     
  goto BB91
BB64   <- [63]
  (cls|spec|blt)  %64.0 = LdFun              !v    @, <0x5604db659bd8>, e2.1
  prom-           %64.1 = MkArg                    unboundValue, is[0x5604e67edf70]_p7, e2.1
  prom-           %64.2 = MkArg                    unboundValue, is[0x5604e67edf70]_p8, e2.1
  val?            %64.3 = Call               !v    %64.0(%64.1, %64.2) e2.1   <vec+>
  lgl$#-          %64.4 = IsType                   %64.3 isA val+   <true>
  cp              %64.5 = Checkpoint                -> BB66 (default) | BB65 (if assume failed)
BB60   <- [58]
  void                    Assume             D     %58.9, %58.10 (Typecheck@0x5604dca9ad78[Type#6])
  lgl$-           %60.1 = CastType           d     dn %58.8
  val?            %60.2 = PopContext         C     %60.1, %56.4   <lgl$->
  lgl$#-          %60.3 = IsType                   %60.2 isA lgl$-
  cp              %60.4 = Checkpoint                -> BB62 (default) | BB61 (if assume failed)
BB59   <- [58]
  fs              %59.0 = FrameState         R     0x5604dd869420+1266: [%55.2], env=e2.1
  fs              %59.1 = FrameState         R     0x5604dd86dd00+129: [%58.8], env=e58.2, next=%59.0
  void                    Deopt              !v    %59.1   !
BB91   <- [107, 90]
  val?            %91.0 = Phi                      %90.0:BB90, true:BB107
  goto BB92
BB66   <- [64]
  void                    Assume             D     %64.4, %64.5 (DeadBranchReached@0x5604dca9a278[Test#6])
  val?^ | miss    %66.1 = LdVar              eR    class2, e2.1
  val?            %66.2 = Force!<wrapped>    !v    %66.1, e2.1   <str$+>
  lgl$#-          %66.3 = IsType                   %66.2 isA val?+
  cp              %66.4 = Checkpoint                -> BB68 (default) | BB67 (if assume failed)
BB65   <- [64]
  fs              %65.0 = FrameState         R     0x5604dd869420+1316: [%64.3], env=e2.1
  void                    Deopt              !v    %65.0   !
BB62   <- [60]
  void                    Assume             D     %60.3, %60.4 (Typecheck@0x5604dca9a278[Type#55])
  lgl$-           %62.1 = CastType           d     dn %60.2
  lgl$-           %62.2 = AsLogical                %62.1
  lgl$-           %62.3 = LOr                      %55.2, %62.2
  goto BB63
BB61   <- [60]
  fs              %61.0 = FrameState         R     0x5604dd869420+1266: [%55.2, %60.2], env=e2.1
  void                    Deopt              !v    %61.0   !
BB68   <- [66]
  lgl$#-          %68.0 = IsType                   %64.3 isA val?+
  void                    Assume             D     %68.0, %66.4 (Typecheck@0x5604dca9a278[Type#58])
  val?+           %68.2 = CastType           d     dn %64.3   <vec+>
  void                    Assume             D     %66.3, %66.4 (Typecheck@0x5604dca9a278[Type#60])
  val?+           %68.4 = CastType           d     dn %66.2   <str$+>
  val?            %68.5 = Extract2_1D        wed   %68.2, %68.4, elided   <(nil|other)>
  lgl$-           %68.6 = Is                       %68.5, NULL
  void                    Invisible          v     
  void                    StVar              lW    contained, %68.5, e2.1
  lgl$-           %68.9 = Not                vd    %68.6, elided
  lgl$#-          %68.10 = CheckTrueFalse     e     %68.9
  void                    Branch                   %68.10 -> BB102 (if true) | BB69 (if false)
BB67   <- [66]
  fs              %67.0 = FrameState         R     0x5604dd869420+1361: [%64.3, %66.2], env=e2.1
  void                    Deopt              !v    %67.0   !
BB102   <- [68]
  (cls|spec|blt)  %102.0 = LdFun              !     @, <0x5604db659bd8>, e2.1
  prom-           %102.1 = MkArg                    unboundValue, is[0x5604e67edf70]_p40, e2.1
  prom-           %102.2 = MkArg                    unboundValue, is[0x5604e67edf70]_p41, e2.1
  val?            %102.3 = Call               !     %102.0(%102.1, %102.2) e2.1   <lgl$->
  lgl$#-          %102.4 = IsType                   %102.3 isA lgl$-
  cp              %102.5 = Checkpoint                -> BB104 (default) | BB103 (if assume failed)
BB69   <- [68]
  val?^ | miss    %69.0 = LdVar              eR    class2Def, e2.1
  val?            %69.1 = Force!<value>      !v    %69.0, e2.1   <(nil|other)>
  lgl$-           %69.2 = Is                       %69.1, NULL
  cp              %69.3 = Checkpoint                -> BB71 (default) | BB70 (if assume failed)
BB104   <- [102]
  void                    Assume             D     %102.4, %102.5 (Typecheck@0x5604dca9a278[Type#108])
  lgl$-           %104.1 = CastType           d     dn %102.3
  lgl$-           %104.2 = AsLogical                %104.1
  lgl$#-          %104.3 = Identical                %104.2, true
  void                    Branch                   %104.3 -> BB106 (if true) | BB105 (if false)
BB103   <- [102]
  fs              %103.0 = FrameState         R     0x5604dd869420+1957: [%102.3], env=e2.1
  void                    Deopt              !v    %103.0   !
BB71   <- [69]
  lgl$#-          %71.0 = CheckTrueFalse     e     %69.2
  void                    Branch                   %71.0 -> BB101 (if true) | BB72 (if false)
BB70   <- [69]
  fs              %70.0 = FrameState         R     0x5604dd869420+1405: [%69.1], env=e2.1
  void                    Deopt              !v    %70.0   !
BB106   <- [104]
  goto BB90
BB105   <- [104]
  (cls|spec|blt)  %105.0 = LdFun              !     @, e2.1
  prom-           %105.1 = MkArg                    unboundValue, is[0x5604e67edf70]_p42, e2.1
  prom-           %105.2 = MkArg                    unboundValue, is[0x5604e67edf70]_p43, e2.1
  val?            %105.3 = Call               !     %105.0(%105.1, %105.2) e2.1   <val?_>
  (cls|spec|blt)  %105.4 = ChkFunction        e     %105.3
  prom-           %105.5 = MkArg                    unboundValue, is[0x5604e67edf70]_p44, e2.1
  val?            %105.6 = Call               !     %105.4(%105.5) e2.1   <val?_>
  lgl$-           %105.7 = AsLogical          e     %105.6
  lgl$-           %105.8 = LOr                      %104.2, %105.7
  goto BB90
BB101   <- [71]
  void                    Visible            v     
  goto BB89
BB72   <- [71]
  val?^ | miss    %72.0 = LdVar              eR    .identC, e2.1
  lgl$#-          %72.1 = Identical                %72.0, function(c1=NULL, c2=NULL) <(rir::DispatchTabl|...
  void                    Assume             D     %72.1, %69.3 (CallTarget@0x5604dca9a278[Call#20])
  prom-           %72.3 = MkArg                    unboundValue, is[0x5604e67edf70]_p9, e2.1
  ct              %72.4 = PushContext        lCL   %72.3, "classRepresentation", .identC(class(class2Def), "classRepresentation"), function(c1=NULL, c2=NULL) <(rir::DispatchTabl|..., e2.1
  val?^           %72.5 = CastType                 up %72.3
  val?^ | miss    %72.6 = LdVar              eR    .Call, <env 0x5604dbc61378>
  lgl$#-          %72.7 = Identical                <blt .Call>, %72.6   <true>
  cp              %72.8 = Checkpoint                -> BB74 (default) | BB73 (if assume failed)
BB90   <- [106, 105, 89]
  val?            %90.0 = Phi                      %89.0:BB89, %105.8:BB105, %104.2:BB106
  goto BB91
BB89   <- [101, 88]
  val?            %89.0 = Phi                      %88.0:BB88, false:BB101
  goto BB90
BB74   <- [72]
  void                    Assume             D     %72.7, %72.8 (DeadBranchReached@0x5604dca9ad78[Test#0])
  val?^ | miss    %74.1 = LdVar              eR    C_R_identC, <env 0x5604dbc61378>
  env             e74.2 = MkEnv              l     c1=%72.5, c2="classRepresentation", parent=<env 0x5604dbc61378>, context 1
  val?            %74.3 = Force!<value>      !v    %74.1, e74.2   <vec>
  val?^ | miss    %74.4 = LdVar              eR    c1, e74.2
  val?            %74.5 = Force!<lazy>       !v    %74.4, e74.2   <str$+>
  val?^ | miss    %74.6 = LdVar              eR    c2, e74.2
  val?            %74.7 = Force!<lazy>       !v    %74.6, e74.2   <str$+>
  val?            %74.8 = CallBuiltin        !v    .Call(%74.3, %74.5, %74.7) e74.2   <lgl$->
  lgl$#-          %74.9 = IsType                   %74.8 isA lgl$-
  cp              %74.10 = Checkpoint                -> BB76 (default) | BB75 (if assume failed)
BB73   <- [72]
  fs              %73.0 = FrameState         R     0x5604dd869420+1458: [], env=e2.1
  env             e73.1 = (MkEnv)            l     c1=%72.5, c2="classRepresentation", parent=<env 0x5604dbc61378>, context 1
  fs              %73.2 = FrameState         R     0x5604dd86dd00+17: [<blt .Call>, %72.7], env=e73.1, next=%73.0
  void                    Deopt              !v    %73.2   !
BB76   <- [74]
  void                    Assume             D     %74.9, %74.10 (Typecheck@0x5604dca9ad78[Type#6])
  lgl$-           %76.1 = CastType           d     dn %74.8
  val?            %76.2 = PopContext         C     %76.1, %72.4   <lgl$->
  lgl$#-          %76.3 = IsType                   %76.2 isA lgl$-
  cp              %76.4 = Checkpoint                -> BB78 (default) | BB77 (if assume failed)
BB75   <- [74]
  fs              %75.0 = FrameState         R     0x5604dd869420+1458: [], env=e2.1
  fs              %75.1 = FrameState         R     0x5604dd86dd00+129: [%74.8], env=e74.2, next=%75.0
  void                    Deopt              !v    %75.1   !
BB78   <- [76]
  void                    Assume             D     %76.3, %76.4 (Typecheck@0x5604dca9a278[Type#65])
  lgl$-           %78.1 = CastType           d     dn %76.2
  lgl$-           %78.2 = Not                d     %78.1, elided
  lgl$-           %78.3 = AsLogical                %78.2
  lgl$#-          %78.4 = Identical                %78.3, false
  void                    Branch                   %78.4 -> BB100 (if true) | BB79 (if false)
BB77   <- [76]
  fs              %77.0 = FrameState         R     0x5604dd869420+1458: [%76.2], env=e2.1
  void                    Deopt              !v    %77.0   !
BB100   <- [78]
  goto BB80
BB79   <- [78]
  (cls|spec|blt)  %79.0 = LdFun              !v    isClassUnion, e2.1
  prom-           %79.1 = MkArg                    unboundValue, is[0x5604e67edf70]_p11, e2.1
  val?            %79.2 = Call               !v    %79.0(%79.1) e2.1   <val?_>
  lgl$-           %79.3 = AsLogical          e     %79.2
  lgl$-           %79.4 = LAnd                     %78.3, %79.3
  goto BB80
BB80   <- [100, 79]
  lgl$-           %80.0 = Phi                      %79.4:BB79, %78.3:BB100
  lgl$#-          %80.1 = CheckTrueFalse     e     %80.0
  void                    Branch                   %80.1 -> BB96 (if true) | BB81 (if false)
BB96   <- [80]
  val?^ | miss    %96.0 = LdVar              eR    any, e2.1
  lgl$#-          %96.1 = Identical                <blt any>, %96.0   <@?>
  void                    Branch                   %96.1 -> BB99 (if true) | BB97 (if false)
BB81   <- [80]
  (cls|spec|blt)  %81.0 = LdFun              !v    @, <0x5604db659bd8>, e2.1
  prom-           %81.1 = MkArg                    unboundValue, is[0x5604e67edf70]_p12, e2.1
  prom-           %81.2 = MkArg                    unboundValue, is[0x5604e67edf70]_p13, e2.1
  val?            %81.3 = Call               !v    %81.0(%81.1, %81.2) e2.1   <vec+>
  lgl$#-          %81.4 = IsType                   %81.3 isA val+   <true>
  lgl$#-          %81.5 = IsType                   %81.3 isA val?+
  cp              %81.6 = Checkpoint                -> BB83 (default) | BB82 (if assume failed)
BB99   <- [96]
  (cls|spec|blt)  %99.0 = LdFun              !v    %in%, e2.1
  prom-           %99.1 = MkArg                    unboundValue, is[0x5604e67edf70]_p30, e2.1
  prom-           %99.2 = MkArg                    unboundValue, is[0x5604e67edf70]_p36, e2.1
  val?            %99.3 = Call               !v    %99.0(%99.1, %99.2) e2.1   <val?_>
  val?            %99.4 = CallBuiltin        !     any(%99.3) e2.1
  goto BB98
BB97   <- [96]
  (cls|spec|blt)  %97.0 = LdFun              !v    %in%, e2.1
  prom-           %97.1 = MkArg                    unboundValue, is[0x5604e67edf70]_p20, e2.1
  prom-           %97.2 = MkArg                    unboundValue, is[0x5604e67edf70]_p26, e2.1
  val?            %97.3 = Call               !v    %97.0(%97.1, %97.2) e2.1   <val?_>
  val?            %97.4 = CallBuiltin        !     any(%97.3) e2.1
  goto BB98
BB83   <- [81]
  void                    Assume             D     %81.4, %81.6 (DeadBranchReached@0x5604dca9a278[Test#7])
  val?^ | miss    %83.1 = LdVar              eR    class1, e2.1
  lgl$#-          %83.2 = IsType                   %83.1 isA val?~+ | miss
  void                    Assume             D     %83.2, %81.6 (Typecheck@0x5604dca9a278[Type#72])
  val?~+ | miss   %83.4 = CastType           d     dn %83.1
  val?+           %83.5 = Force!<value>            %83.4,    <str$+>
  void                    Assume             D     %81.5, %81.6 (Typecheck@0x5604dca9a278[Type#70])
  val?+           %83.7 = CastType           d     dn %81.3   <vec+>
  val?            %83.8 = Extract2_1D        wed   %83.7, %83.5, elided   <nil->
  lgl$-           %83.9 = Is                       %83.8, NULL
  void                    StVar              lW    ext, %83.8, e2.1
  val             %83.11 = ChkMissing         e     %83.8
  void                    Visible            v     
  lgl$-           %83.13 = Not                vd    %83.9, elided
  lgl$-           %83.14 = AsLogical                %83.13
  lgl$#-          %83.15 = Identical                %83.14, false
  void                    Branch                   %83.15 -> BB95 (if true) | BB84 (if false)
BB82   <- [81]
  fs              %82.0 = FrameState         R     0x5604dd869420+1553: [%81.3], env=e2.1
  void                    Deopt              !v    %82.0   !
BB98   <- [97, 99]
  val?            %98.0 = Phi                      %97.4:BB97, %99.4:BB99   <val?_>
  goto BB88
BB95   <- [83]
  goto BB87
BB84   <- [83]
  (cls|spec|blt)  %84.0 = LdFun              !v    @, e2.1
  prom-           %84.1 = MkArg                    unboundValue, is[0x5604e67edf70]_p14, e2.1
  prom-           %84.2 = MkArg                    unboundValue, is[0x5604e67edf70]_p15, e2.1
  val?            %84.3 = Call               !v    %84.0(%84.1, %84.2) e2.1   <val?_>
  lgl$-           %84.4 = AsLogical          e     %84.3
  lgl$#-          %84.5 = Identical                %84.4, true
  void                    Branch                   %84.5 -> BB94 (if true) | BB85 (if false)
BB88   <- [98, 87]
  val?            %88.0 = Phi                      %87.0:BB87, %98.0:BB98
  goto BB89
BB87   <- [95, 86]
  lgl$-           %87.0 = Phi                      %86.2:BB86, %83.14:BB95
  goto BB88
BB94   <- [84]
  goto BB86
BB85   <- [84]
  (cls|spec|blt)  %85.0 = LdFun              !v    @, e2.1
  prom-           %85.1 = MkArg                    unboundValue, is[0x5604e67edf70]_p16, e2.1
  prom-           %85.2 = MkArg                    unboundValue, is[0x5604e67edf70]_p17, e2.1
  val?            %85.3 = Call               !v    %85.0(%85.1, %85.2) e2.1   <val?_>
  (cls|spec|blt)  %85.4 = ChkFunction        e     %85.3
  prom-           %85.5 = MkArg                    unboundValue, is[0x5604e67edf70]_p18, e2.1
  val?            %85.6 = Call               !v    %85.4(%85.5) e2.1   <val?_>
  lgl$-           %85.7 = AsLogical          e     %85.6
  lgl$-           %85.8 = LOr                      %84.4, %85.7
  goto BB86
BB86   <- [94, 85]
  lgl$-           %86.0 = Phi                      %85.8:BB85, %84.4:BB94
  lgl$-           %86.1 = AsLogical                %86.0
  lgl$-           %86.2 = LAnd                     %83.14, %86.1
  void                    Visible            v     
  goto BB87
Prom 0:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    class1, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$+>
  void                    Return             l     %1.3
Prom 1:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    class2, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 2:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    .BasicClasses, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <str->
  void                    Return             l     %1.3
Prom 3:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    class2Def, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <other>
  void                    Return             l     %1.3
Prom 4:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    class1, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$+>
  void                    Return             l     %1.3
Prom 5:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    class2, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <str$+>
  void                    Return             l     %1.3
Prom 6:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    class2, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <str$+>
  void                    Return             l     %1.3
Prom 7:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    class1Def, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 8:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    contains, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 9:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     class, <0x5604db65a748>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, is[0x5604e67edf70]_p10, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <str$+>
  void                    Return             l     %1.3
Prom 10:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    class2Def, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <other>
  void                    Return             l     %1.3
Prom 11:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    class2Def, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 12:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    class2Def, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 13:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    subclasses, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 14:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    ext, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 15:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    simple, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 16:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    ext, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 17:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    test, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 18:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    object, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 20:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     c, e1.0
  prom-           %1.2  = MkArg                    unboundValue, is[0x5604e67edf70]_p21, e1.0
  prom-           %1.3  = MkArg                    unboundValue, is[0x5604e67edf70]_p22, e1.0
  val?            %1.4  = Call               !     %1.1(%1.2, %1.3) e1.0   <val?_>
  void                    Return             l     %1.4
Prom 21:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    class1, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 22:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     names, e1.0
  prom-           %1.2  = MkArg                    unboundValue, is[0x5604e67edf70]_p23, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <val?_>
  void                    Return             l     %1.3
Prom 23:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     @, e1.0
  prom-           %1.2  = MkArg                    unboundValue, is[0x5604e67edf70]_p24, e1.0
  prom-           %1.3  = MkArg                    unboundValue, is[0x5604e67edf70]_p25, e1.0
  val?            %1.4  = Call               !     %1.1(%1.2, %1.3) e1.0   <val?_>
  void                    Return             l     %1.4
Prom 24:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    class1Def, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 25:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    contains, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 26:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     names, e1.0
  prom-           %1.2  = MkArg                    unboundValue, is[0x5604e67edf70]_p27, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <val?_>
  void                    Return             l     %1.3
Prom 27:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     @, e1.0
  prom-           %1.2  = MkArg                    unboundValue, is[0x5604e67edf70]_p28, e1.0
  prom-           %1.3  = MkArg                    unboundValue, is[0x5604e67edf70]_p29, e1.0
  val?            %1.4  = Call               !     %1.1(%1.2, %1.3) e1.0   <val?_>
  void                    Return             l     %1.4
Prom 28:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    class2Def, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 29:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    subclasses, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 30:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     c, e1.0
  prom-           %1.2  = MkArg                    unboundValue, is[0x5604e67edf70]_p31, e1.0
  prom-           %1.3  = MkArg                    unboundValue, is[0x5604e67edf70]_p32, e1.0
  val?            %1.4  = Call               !     %1.1(%1.2, %1.3) e1.0   <val?_>
  void                    Return             l     %1.4
Prom 31:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    class1, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 32:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     names, e1.0
  prom-           %1.2  = MkArg                    unboundValue, is[0x5604e67edf70]_p33, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <val?_>
  void                    Return             l     %1.3
Prom 33:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     @, e1.0
  prom-           %1.2  = MkArg                    unboundValue, is[0x5604e67edf70]_p34, e1.0
  prom-           %1.3  = MkArg                    unboundValue, is[0x5604e67edf70]_p35, e1.0
  val?            %1.4  = Call               !     %1.1(%1.2, %1.3) e1.0   <val?_>
  void                    Return             l     %1.4
Prom 34:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    class1Def, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 35:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    contains, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 36:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     names, e1.0
  prom-           %1.2  = MkArg                    unboundValue, is[0x5604e67edf70]_p37, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <val?_>
  void                    Return             l     %1.3
Prom 37:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     @, e1.0
  prom-           %1.2  = MkArg                    unboundValue, is[0x5604e67edf70]_p38, e1.0
  prom-           %1.3  = MkArg                    unboundValue, is[0x5604e67edf70]_p39, e1.0
  val?            %1.4  = Call               !     %1.1(%1.2, %1.3) e1.0   <val?_>
  void                    Return             l     %1.4
Prom 38:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    class2Def, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 39:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    subclasses, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 40:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    contained, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 41:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    simple, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 42:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    contained, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 43:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    test, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 44:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    object, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 45:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    object, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <real_>
  void                    Return             l     %1.3
Prom 46:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    class2, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 47:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    class2, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <str$+>
  void                    Return             l     %1.3
Prom 48:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     .classDefEnv, <0x5604e6ef61f8>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, is[0x5604e67edf70]_p49, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <env->
  void                    Return             l     %1.3
Prom 49:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    class1Def, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <other>
  void                    Return             l     %1.3
Prom 50:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !v    packageSlot, <0x5604dbe8acf0>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, is[0x5604e67edf70]_p51, e1.0
  val?            %1.3  = Call               !v    %1.1(%1.2) e1.0   <nil->
  void                    Invisible          v     
  void                    StVar              lW    package, %1.3, e1.0
  lgl$-           %1.6  = Is                       %1.3, NULL
  lgl$-           %1.7  = Not                vd    %1.6, elided
  lgl$#-          %1.8  = CheckTrueFalse     e     %1.7
  void                    Branch                   %1.8 -> BB2 (if true) | BB4 (if false)
BB2   <- [1]
  val?^ | miss    %2.0  = LdVar              eR    package, e1.0
  void                    Visible            v     
  val?            %2.2  = Force              !     %2.0, e1.0   <val?_>
  goto BB3
BB4   <- [1]
  (cls|spec|blt)  %4.0  = LdFun              !     getPackageName, <0x5604de611070>, e1.0
  prom-           %4.1  = MkArg                    unboundValue, is[0x5604e67edf70]_p52, e1.0
  val?            %4.2  = Call               !     %4.0(%4.1) e1.0   <str$->
  goto BB3
BB3   <- [2, 4]
  val?            %3.0  = Phi                      %4.2:BB4, %2.2:BB2
  void                    Return             l     %3.0
Prom 51:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    class2, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 52:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     topenv, <0x5604dbe9cc20>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, is[0x5604e67edf70]_p53, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <env->
  void                    Return             l     %1.3
Prom 53:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     parent.frame, <0x5604db76e170>, e1.0
  val?            %1.2  = Call               !     %1.1() e1.0   <env->
  void                    Return             l     %1.2
Prom 54:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    object, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 55:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    class2, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 56:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    class2Def, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 57:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    className, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 58:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    class1, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 59:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    x, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <(int|str)+>
  void                    Return             l     %1.3
Prom 60:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    table, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <val?->
  void                    Return             l     %1.3

│ is[0x5604e67edf70]                                                           │
└──────────────────────────────────────────────────────────────────────────────┘
