
┌──────────────────────────────────────────────────────────────────────────────┐
│ isTRUE[0x5604e6726070]                                                       │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;Eager0,NonRefl0                      │
│ Properties:  Eager, ForceOrd: 0                                              │
├────── PIR Version After Optimizations
isTRUE[0x5604e6726070]
BB0
  goto BB1
BB1   <- [0]
  val?^           %1.0  = LdArg                    0
  val?            %1.1  = Force!<lazy>             %1.0,    <val?>
  val+            %1.2  = CallSafeBuiltin    vwed  is.logical(%1.1)    <lgl$->
  lgl$#-          %1.3  = IsType                   %1.2 isA lgl$-
  cp              %1.4  = Checkpoint                -> BB2 (default) | BB16 (if assume failed)
BB2   <- [1]
  void                    Assume             D     %1.3, %1.4 (Typecheck@0x5604dcc0f838[Type#2])
  lgl$-           %2.1  = CastType           d     dn %1.2
  lgl$-           %2.2  = AsLogical                %2.1
  lgl$#-          %2.3  = Identical                %2.2, false
  void                    Branch                   %2.3 -> BB15 (if true) | BB3 (if false)
BB16   <- [1]
  env             e16.0 = (MkEnv)            l     x=%1.0, parent=R_BaseNamespace, context 1
  fs              %16.1 = FrameState         R     0x5604dbaab6d0+91: [%1.2], env=e16.0
  void                    Deopt              !v    %16.1   !
BB15   <- [2]
  goto BB6
BB3   <- [2]
  lgl$#-          %3.0  = IsType                   %1.1 isA lgl-
  void                    Assume             D     %3.0, %1.4 (Typecheck@0x5604dcc0f838[Type#4])
  lgl-            %3.2  = CastType           d     dn %1.1
  (int|real)$-    %3.3  = CallSafeBuiltin    wed   length(%3.2)    <int$->
  lgl$#-          %3.4  = IsType                   %3.3 isA int$-
  cp              %3.5  = Checkpoint                -> BB5 (default) | BB4 (if assume failed)
BB6   <- [5, 15]
  lgl$-           %6.0  = Phi                      %5.5:BB5, %2.2:BB15
  lgl$-           %6.1  = AsLogical                %6.0
  lgl$#-          %6.2  = Identical                %6.1, false
  cp              %6.3  = Checkpoint                -> BB8 (default) | BB7 (if assume failed)
BB5   <- [3]
  void                    Assume             D     %3.4, %3.5 (Typecheck@0x5604dcc0f838[Type#5])
  int$-           %5.1  = CastType           d     dn %3.3
  void                    Visible            v     
  lgl$-           %5.3  = Eq                 vd    %5.1, 1L, elided   <lgl$->
  lgl$-           %5.4  = AsLogical                %5.3
  lgl$-           %5.5  = LAnd                     %2.2, %5.4
  goto BB6
BB4   <- [3]
  env             e4.0  = (MkEnv)            l     x=%1.0, parent=R_BaseNamespace, context 1
  fs              %4.1  = FrameState         R     0x5604dbaab6d0+194: [%2.2, %3.3], env=e4.0
  void                    Deopt              !v    %4.1   !
BB8   <- [6]
  void                    Branch                   %6.2 -> BB14 (if true) | BB9 (if false)
BB7   <- [6]
  env             e7.0  = (MkEnv)            l     x=%1.0, parent=R_BaseNamespace, context 1
  fs              %7.1  = FrameState         R     0x5604dbaab6d0+213: [%6.0], env=e7.0
  void                    Deopt              !v    %7.1   !
BB14   <- [8]
  goto BB10
BB9   <- [8]
  lgl$#-          %9.0  = IsType                   %1.1 isA lgl$-
  void                    Assume             D     %9.0, %6.3 (Typecheck@0x5604dcc0f838[Type#8])
  lgl$-           %9.2  = CastType           d     dn %1.1
  lgl$-           %9.3  = CallSafeBuiltin    vwed  is.na(%9.2)    <lgl$->
  lgl$-           %9.4  = Not                vd    %9.3, elided
  lgl$-           %9.5  = AsLogical                %9.4
  lgl$-           %9.6  = LAnd                     %6.1, %9.5
  goto BB10
BB10   <- [9, 14]
  lgl$-           %10.0 = Phi                      %9.6:BB9, %6.1:BB14
  lgl$-           %10.1 = AsLogical                %10.0
  lgl$#-          %10.2 = Identical                %10.1, false
  void                    Branch                   %10.2 -> BB13 (if true) | BB11 (if false)
BB13   <- [10]
  goto BB12
BB11   <- [10]
  void                    Visible            v     
  lgl$-           %11.1 = AsLogical          e     %1.1
  lgl$-           %11.2 = LAnd                     %10.1, %11.1
  goto BB12
BB12   <- [13, 11]
  lgl$-           %12.0 = Phi                      %11.2:BB11, %10.1:BB13
  void                    Return             l     %12.0

│ isTRUE[0x5604e6726070]                                                       │
└──────────────────────────────────────────────────────────────────────────────┘
