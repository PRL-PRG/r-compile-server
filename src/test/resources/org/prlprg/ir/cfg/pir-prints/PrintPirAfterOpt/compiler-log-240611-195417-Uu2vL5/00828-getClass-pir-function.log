
┌──────────────────────────────────────────────────────────────────────────────┐
│ getClass[0x5604e694b6f0]                                                     │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch miss: 2                              │
│ Properties:                                                                  │
├────── PIR Version After Optimizations
getClass[0x5604e694b6f0]
BB0
  goto BB1
BB1   <- [0]
  val?^           %1.0  = LdArg                    0
  env             e1.1  = MkEnv              l     Class=%1.0, .Force(miss)=false, where(miss)=missingArg, parent=<env 0x5604dbc61378>, context 1
  prom-           %1.2  = MkArg                    unboundValue, getClass[0x5604e694b6f0]_p1, e1.1
  val?^ | miss    %1.3  = CastType                 up %1.2
  void                    StArg              lW    where, %1.3, e1.1
  cp              %1.5  = Checkpoint                -> BB2 (default) | BB10 (if assume failed)
BB2   <- [1]
  val?^ | miss    %2.0  = LdVar              eR    getClassDef, <env 0x5604dbc61378>
  lgl$#-          %2.1  = Identical                %2.0, function(Class, where=topenv(parent.frame()), |...
  void                    Assume             D     %2.1, %1.5 (CallTarget@0x5604dbdb6020[Call#3])
  prom-           %2.3  = MkArg                    unboundValue, getClass[0x5604e694b6f0]_p5, e1.1
  prom-           %2.4  = MkArg                    unboundValue, getClass[0x5604e694b6f0]_p6, e1.1
  val?            %2.5  = StaticCall         !v    getClassDef[0x5604dfa84170](%2.3, %2.4) e1.1   <(nil|other)>
  lgl$-           %2.6  = Is                       %2.5, NULL
  void                    StVar              lW    value, %2.5, e1.1
  val             %2.8  = ChkMissing         e     %2.5
  lgl$#-          %2.9  = CheckTrueFalse     e     %2.6
  void                    Branch                   %2.9 -> BB5 (if true) | BB3 (if false)
BB10   <- [1]
  fs              %10.0 = FrameState         R     0x5604def535f0+0: [], env=e1.1
  void                    Deopt              !v    %10.0
BB5   <- [2]
  val?^ | miss    %5.0  = LdVar              eR    .Force, e1.1
  val?            %5.1  = Force!<value>      !v    %5.0, e1.1   <lgl$->
  lgl$#-          %5.2  = IsType                   %5.1 isA lgl$-
  cp              %5.3  = Checkpoint                -> BB7 (default) | BB6 (if assume failed)
BB3   <- [2]
  goto BB4
BB7   <- [5]
  void                    Assume             D     %5.2, %5.3 (Typecheck@0x5604dbdb6020[Type#8])
  lgl$-           %7.1  = CastType           d     dn %5.1
  lgl$-           %7.2  = Not                d     %7.1, elided
  lgl$#-          %7.3  = CheckTrueFalse     e     %7.2
  void                    Branch                   %7.3 -> BB9 (if true) | BB8 (if false)
BB6   <- [5]
  fs              %6.0  = FrameState         R     0x5604def535f0+90: [%5.1], env=e1.1
  void                    Deopt              !v    %6.0   !
BB4   <- [3, 8]
  val?            %4.0  = Phi                      %8.3:BB8, %2.5:BB3
  val             %4.1  = ChkMissing         e     %4.0   <other>
  void                    Visible            v     
  void                    Return             l     %4.1
BB9   <- [7]
  (cls|spec|blt)  %9.0  = LdFun              !v    stop, e1.1
  fs              %9.1  = FrameState         R     0x5604def535f0+189: [%9.0], env=e1.1
  void                    Deopt              !v    %9.1, DeadCall@0x5604dbdb6020[Call#5], %9.0   !
BB8   <- [7]
  (cls|spec|blt)  %8.0  = LdFun              !v    makeClassRepresentation, <0x5604e5b79be0>, e1.1
  prom-           %8.1  = MkArg                    unboundValue, getClass[0x5604e694b6f0]_p7, e1.1
  prom-           %8.2  = MkArg                    unboundValue, getClass[0x5604e694b6f0]_p8, e1.1
  val?            %8.3  = NamedCall          !v    %8.0(%8.1, package="base", virtual=true, where=%8.2) e1.1   <other>
  void                    StVar              lW    value, %8.3, e1.1
  goto BB4
Prom 1:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     .classEnv, e1.0
  prom-           %1.2  = MkArg                    unboundValue, getClass[0x5604e694b6f0]_p2, e1.0
  prom-           %1.3  = MkArg                    unboundValue, getClass[0x5604e694b6f0]_p3, e1.0
  val?            %1.4  = Call               !     %1.1(%1.2, %1.3, false) e1.0   <val?_>
  void                    Return             l     %1.4
Prom 2:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    Class, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 3:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     topenv, e1.0
  prom-           %1.2  = MkArg                    unboundValue, getClass[0x5604e694b6f0]_p4, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <val?_>
  void                    Return             l     %1.3
Prom 4:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     parent.frame, e1.0
  val?            %1.2  = Call               !     %1.1() e1.0   <val?_>
  void                    Return             l     %1.2
Prom 5:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    Class, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <str$+>
  void                    Return             l     %1.3
Prom 6:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    where, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <env->
  void                    Return             l     %1.3
Prom 7:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    Class, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 8:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    where, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3

│ getClass[0x5604e694b6f0]                                                     │
└──────────────────────────────────────────────────────────────────────────────┘
