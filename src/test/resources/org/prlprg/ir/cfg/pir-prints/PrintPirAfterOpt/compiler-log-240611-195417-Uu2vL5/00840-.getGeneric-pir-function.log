
┌──────────────────────────────────────────────────────────────────────────────┐
│ .getGeneric[0x5604e6fbcbb0]                                                  │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;NonRefl0,NonRefl1,!Obj0,!Obj1        │
│ Properties:                                                                  │
├────── PIR Version After Optimizations
.getGeneric[0x5604e6fbcbb0]
BB0
  goto BB1
BB1   <- [0]
  val?^           %1.0  = LdArg                    2
  val?^           %1.1  = LdArg                    1
  val?^           %1.2  = LdArg                    0
  cp              %1.3  = Checkpoint                -> BB2 (default) | BB49 (if assume failed)
BB2   <- [1]
  env             e2.0  = MkEnv              l     f=%1.2, where=%1.1, package=%1.0, parent=<env 0x5604dbc61378>, context 1
  lgl$-           %2.1  = Missing            eR    where, e2.0
  lgl$#-          %2.2  = CheckTrueFalse     e     %2.1
  void                    Branch                   %2.2 -> BB46 (if true) | BB3 (if false)
BB49   <- [1]
  env             e49.0 = (MkEnv)            l     f=%1.2, where=%1.1, package=%1.0, parent=<env 0x5604dbc61378>, context 1
  fs              %49.1 = FrameState         R     0x5604de28e080+0: [], env=e49.0
  void                    Deopt              !v    %49.1
BB46   <- [2]
  val?^ | miss    %46.0 = LdVar              eR    .getGenericFromCache, <env 0x5604dbc61378>
  lgl$#-          %46.1 = Identical                %46.0, function(name, where, pkg="") <(rir::DispatchT|...
  void                    Assume             D     %46.1, %1.3 (CallTarget@0x5604dcd9b3d0[Call#0])
  prom-           %46.3 = MkArg                    unboundValue, .getGeneric[0x5604e6fbcbb0]_p1 (!refl), e2.0
  prom-           %46.4 = MkArg                    unboundValue, .getGeneric[0x5604e6fbcbb0]_p2 (!refl), e2.0
  prom-           %46.5 = MkArg                    unboundValue, .getGeneric[0x5604e6fbcbb0]_p3, e2.0
  ct              %46.6 = PushContext        lCL   %46.3, %46.4, %46.5, .getGenericFromCache(f, where, package), function(name, where, pkg="") <(rir::DispatchT|..., e2.0
  val?^           %46.7 = CastType                 up %46.5
  val?^           %46.8 = CastType                 up %46.4
  val?^           %46.9 = CastType                 up %46.3
  cp              %46.10 = Checkpoint                -> BB48 (default) | BB47 (if assume failed)
BB3   <- [2]
  goto BB4
BB48   <- [46]
  val?^ | miss    %48.0 = LdVar              eR    .getGenericFromCacheTable, <env 0x5604dbc61378>
  lgl$#-          %48.1 = Identical                %48.0, function(name, where, pkg="", table) <(rir::Di|...
  void                    Assume             D     %48.1, %46.10 (CallTarget@0x5604de31a8e0[Call#0])
  env             e48.3 = MkEnv              l     name=%46.9, where=%46.8, pkg=%46.7, parent=<env 0x5604dbc61378>, context 1
  prom-           %48.4 = MkArg                    unboundValue, .getGeneric[0x5604e6fbcbb0]_p4, e48.3
  prom-           %48.5 = MkArg                    unboundValue, .getGeneric[0x5604e6fbcbb0]_p5, e48.3
  prom-           %48.6 = MkArg                    unboundValue, .getGeneric[0x5604e6fbcbb0]_p6, e48.3
  prom-           %48.7 = MkArg                    unboundValue, .getGeneric[0x5604e6fbcbb0]_p7, e48.3
  val?            %48.8 = StaticCall         !v    .getGenericFromCacheTable[0x5604e61740d0](%48.4, %48.5, %48.6, %48.7) e48.3   <(nil|cls)>
  val?            %48.9 = PopContext         C     %48.8, %46.6   <cls>
  goto BB4
BB47   <- [46]
  fs              %47.0 = FrameState         R     0x5604de28e080+65: [], env=e2.0
  env             e47.1 = (MkEnv)            l     name=%46.9, where=%46.8, pkg=%46.7, parent=<env 0x5604dbc61378>, context 1
  fs              %47.2 = FrameState         R     0x5604db8474f0+0: [], env=e47.1, next=%47.0
  void                    Deopt              !v    %47.2   !
BB4   <- [3, 48]
  val?            %4.0  = Phi                      nil:BB3, %48.9:BB48   <(nil|cls)>
  lgl$-           %4.1  = Is                       %4.0, NULL
  void                    StVar              lW    value, %4.0, e2.0
  cp              %4.3  = Checkpoint                -> BB6 (default) | BB5 (if assume failed)
BB6   <- [4]
  val             %6.0  = ChkMissing         e     %4.0
  lgl$#-          %6.1  = CheckTrueFalse     e     %4.1
  void                    Branch                   %6.1 -> BB9 (if true) | BB7 (if false)
BB5   <- [4]
  fs              %5.0  = FrameState         R     0x5604de28e080+79: [], env=e2.0
  void                    Deopt              !v    %5.0   !
BB9   <- [6]
  val?^ | miss    %9.0  = LdVar              eR    is.character, e2.0
  lgl$#-          %9.1  = Identical                <blt is.character>, %9.0   <true>
  void                    Assume             D     %9.1, %4.3 (DeadBranchReached@0x5604dcd9b3d0[Test#0])
  val?^ | miss    %9.3  = LdVar              eR    f, e2.0
  val?            %9.4  = Force!<lazy>       !v    %9.3, e2.0   <str$+>
  lgl$#-          %9.5  = CallSafeBuiltin    wed   is.character(%9.4)    <lgl$->
  cp              %9.6  = Checkpoint                -> BB11 (default) | BB10 (if assume failed)
BB7   <- [6]
  goto BB8
BB11   <- [9]
  void                    Branch                   %9.5 -> BB43 (if true) | BB12 (if false)
BB10   <- [9]
  fs              %10.0 = FrameState         R     0x5604de28e080+200: [%9.5], env=e2.0
  void                    Deopt              !v    %10.0   !
BB8   <- [7, 35]
  val?^ | miss    %8.0  = LdVar              eR    value, e2.0
  void                    Visible            v     
  val?            %8.2  = Force!<value>      !     %8.0, e2.0   <(nil|cls)>
  void                    Return             l     %8.2
BB43   <- [11]
  val?^ | miss    %43.0 = LdVar              eR    %in%, e2.0
  lgl$#-          %43.1 = Identical                %43.0, function(x, table) <(rir::DispatchTable*)0x560|...
  void                    Assume             D     %43.1, %9.6 (CallTarget@0x5604dcd9b3d0[Call#2])
  val?^ | miss    %43.3 = LdVar              eR    f, e2.0
  val?            %43.4 = Force!<wrapped>    !v    %43.3, e2.0   <str$+>
  prom-           %43.5 = MkArg                    %43.4, .getGeneric[0x5604e6fbcbb0]_p0 (!refl), 
  val?            %43.6 = StaticCall         !v    %in%[0x5604e73c4830](%43.5, "as.double") e2.0   <lgl$->
  lgl$#-          %43.7 = IsType                   %43.6 isA lgl$-
  cp              %43.8 = Checkpoint                -> BB45 (default) | BB44 (if assume failed)
BB12   <- [11]
  goto BB13
BB45   <- [43]
  void                    Assume             D     %43.7, %43.8 (Typecheck@0x5604dcd9b3d0[Type#10])
  lgl$-           %45.1 = CastType           d     dn %43.6
  lgl$-           %45.2 = AsLogical                %45.1
  lgl$-           %45.3 = LAnd                     %9.5, %45.2
  goto BB13
BB44   <- [43]
  fs              %44.0 = FrameState         R     0x5604de28e080+249: [%9.5, %43.6], env=e2.0
  void                    Deopt              !v    %44.0   !
BB13   <- [45, 12]
  lgl$-           %13.0 = Phi                      %45.3:BB45, %9.5:BB12
  lgl$#-          %13.1 = CheckTrueFalse     e     %13.0
  void                    Branch                   %13.1 -> BB42 (if true) | BB14 (if false)
BB42   <- [13]
  void                    StVar              lW    f, "as.numeric", e2.0
  goto BB15
BB14   <- [13]
  goto BB15
BB15   <- [14, 42]
  cp              %15.0 = Checkpoint                -> BB17 (default) | BB16 (if assume failed)
BB17   <- [15]
  val?^ | miss    %17.0 = LdVar              eR    is.character, e2.0
  lgl$#-          %17.1 = Identical                <blt is.character>, %17.0   <true>
  void                    Assume             D     %17.1, %15.0 (DeadBranchReached@0x5604dcd9b3d0[Test#1])
  val?^ | miss    %17.3 = LdVar              eR    f, e2.0
  val?            %17.4 = Force!<wrapped>    !v    %17.3, e2.0   <str$+>
  lgl$#-          %17.5 = CallSafeBuiltin    wed   is.character(%17.4)    <lgl$->
  cp              %17.6 = Checkpoint                -> BB19 (default) | BB18 (if assume failed)
BB16   <- [15]
  fs              %16.0 = FrameState         R     0x5604de28e080+282: [], env=e2.0
  void                    Deopt              !v    %16.0   !
BB19   <- [17]
  void                    Branch                   %17.5 -> BB39 (if true) | BB20 (if false)
BB18   <- [17]
  fs              %18.0 = FrameState         R     0x5604de28e080+373: [%17.5], env=e2.0
  void                    Deopt              !v    %18.0   !
BB39   <- [19]
  val?^ | miss    %39.0 = LdVar              eR    nzchar, e2.0
  lgl$#-          %39.1 = Identical                <blt nzchar>, %39.0   <true>
  void                    Assume             D     %39.1, %17.6 (DeadBranchReached@0x5604dcd9b3d0[Test#2])
  val?^ | miss    %39.3 = LdVar              eR    f, e2.0
  val?            %39.4 = Force!<wrapped>    !v    %39.3, e2.0   <str$+>
  val?            %39.5 = CallBuiltin        !v    nzchar(%39.4) e2.0   <lgl$->
  lgl$#-          %39.6 = IsType                   %39.5 isA lgl$-
  cp              %39.7 = Checkpoint                -> BB41 (default) | BB40 (if assume failed)
BB20   <- [19]
  goto BB21
BB41   <- [39]
  void                    Assume             D     %39.6, %39.7 (Typecheck@0x5604dcd9b3d0[Type#16])
  lgl$-           %41.1 = CastType           d     dn %39.5
  lgl$-           %41.2 = Not                d     %41.1, elided
  lgl$-           %41.3 = AsLogical                %41.2
  lgl$-           %41.4 = LAnd                     %17.5, %41.3
  goto BB21
BB40   <- [39]
  fs              %40.0 = FrameState         R     0x5604de28e080+476: [%17.5, %39.5], env=e2.0
  void                    Deopt              !v    %40.0   !
BB21   <- [20, 41]
  lgl$-           %21.0 = Phi                      %41.4:BB41, %17.5:BB20
  cp              %21.1 = Checkpoint                -> BB23 (default) | BB22 (if assume failed)
BB23   <- [21]
  lgl$#-          %23.0 = CheckTrueFalse     e     %21.0
  void                    Branch                   %23.0 -> BB38 (if true) | BB24 (if false)
BB22   <- [21]
  fs              %22.0 = FrameState         R     0x5604de28e080+484: [%21.0], env=e2.0
  void                    Deopt              !v    %22.0   !
BB38   <- [23]
  (cls|spec|blt)  %38.0 = LdFun              !v    message, e2.0
  fs              %38.1 = FrameState         R     0x5604de28e080+500: [%38.0], env=e2.0
  void                    Deopt              !v    %38.1, DeadCall@0x5604dcd9b3d0[Call#5], %38.0   !
BB24   <- [23]
  val?^ | miss    %24.0 = LdVar              eR    .Call, e2.0
  lgl$#-          %24.1 = Identical                <blt .Call>, %24.0   <true>
  void                    Assume             D     %24.1, %21.1 (DeadBranchReached@0x5604dcd9b3d0[Test#3])
  val?^ | miss    %24.3 = LdVar              eR    C_R_getGeneric, e2.0
  val?            %24.4 = Force!<value>      !v    %24.3, e2.0   <vec>
  val?^ | miss    %24.5 = LdVar              eR    f, e2.0
  val?            %24.6 = Force!<wrapped>    !v    %24.5, e2.0   <str$+>
  cp              %24.7 = Checkpoint                -> BB26 (default) | BB25 (if assume failed)
BB26   <- [24]
  val?^ | miss    %26.0 = LdVar              eR    as.environment, e2.0
  lgl$#-          %26.1 = Identical                <blt as.environment>, %26.0   <true>
  void                    Assume             D     %26.1, %24.7 (DeadBranchReached@0x5604dcd9b3d0[Test#4])
  val?^ | miss    %26.3 = LdVar              eR    where, e2.0
  val?            %26.4 = Force!<lazy>       !v    %26.3, e2.0   <env->
  val?            %26.5 = CallBuiltin        !v    as.environment(%26.4) e2.0   <env->
  val?^ | miss    %26.6 = LdVar              eR    package, e2.0
  val?            %26.7 = Force!<lazy>       !v    %26.6, e2.0   <str$->
  val?            %26.8 = CallBuiltin        !v    .Call(%24.4, %24.6, false, %26.5, %26.7) e2.0   <(nil|cls)>
  lgl$-           %26.9 = Is                       %26.8, NULL
  void                    StVar              lW    value, %26.8, e2.0
  cp              %26.11 = Checkpoint                -> BB28 (default) | BB27 (if assume failed)
BB25   <- [24]
  fs              %25.0 = FrameState         R     0x5604de28e080+664: [<blt .Call>, %24.4, %24.6], env=e2.0
  void                    Deopt              !v    %25.0   !
BB28   <- [26]
  val             %28.0 = ChkMissing         e     %26.8
  lgl$-           %28.1 = Not                d     %26.9, elided
  lgl$-           %28.2 = AsLogical                %28.1
  lgl$#-          %28.3 = Identical                %28.2, false
  void                    Branch                   %28.3 -> BB37 (if true) | BB29 (if false)
BB27   <- [26]
  fs              %27.0 = FrameState         R     0x5604de28e080+816: [], env=e2.0
  void                    Deopt              !v    %27.0   !
BB37   <- [28]
  goto BB32
BB29   <- [28]
  val?^ | miss    %29.0 = LdVar              eR    .GlobalEnv, e2.0
  lgl$#-          %29.1 = IsType                   %29.0 isA val?~- | miss
  void                    Assume             D     %29.1, %26.11 (Typecheck@0x5604dcd9b3d0[Type#31])
  val?~- | miss   %29.3 = CastType           d     dn %29.0
  val?-           %29.4 = Force!<value>            %29.3,    <env->
  lgl$#-          %29.5 = IsType                   %29.4 isA val+   <true>
  void                    Assume             D     %29.5, %26.11 (DeadBranchReached@0x5604dcd9b3d0[Test#5])
  val?^ | miss    %29.7 = LdVar              eR    f, e2.0
  val?            %29.8 = Force!<wrapped>    !v    %29.7, e2.0   <str$+>
  lgl$#-          %29.9 = IsType                   %29.8 isA val?+
  cp              %29.10 = Checkpoint                -> BB31 (default) | BB30 (if assume failed)
BB32   <- [37, 31]
  lgl$-           %32.0 = Phi                      %31.7:BB31, %28.2:BB37
  lgl$-           %32.1 = AsLogical                %32.0
  lgl$#-          %32.2 = Identical                %32.1, false
  void                    Branch                   %32.2 -> BB34 (if true) | BB33 (if false)
BB31   <- [29]
  void                    Assume             D     %29.9, %29.10 (Typecheck@0x5604dcd9b3d0[Type#33])
  val?+           %31.1 = CastType           d     dn %29.8   <str$+>
  val?            %31.2 = Extract2_1D        wed   %29.4, %31.1, elided   <nil->
  lgl$-           %31.3 = Is                       %31.2, NULL
  void                    StVar              lW    vv, %31.2, e2.0
  lgl$-           %31.5 = Not                d     %31.3, elided
  lgl$-           %31.6 = AsLogical                %31.5
  lgl$-           %31.7 = LAnd                     %28.2, %31.6
  goto BB32
BB30   <- [29]
  fs              %30.0 = FrameState         R     0x5604de28e080+897: [%28.2, %29.4, %29.8], env=e2.0
  void                    Deopt              !v    %30.0   !
BB34   <- [32]
  lgl$#-          %34.0 = CheckTrueFalse     e     %32.1
  void                    Branch                   %34.0 -> BB36 (if true) | BB35 (if false)
BB33   <- [32]
  (cls|spec|blt)  %33.0 = LdFun              !v    identical, e2.0
  fs              %33.1 = FrameState         R     0x5604de28e080+940: [%32.1, %33.0], env=e2.0
  void                    Deopt              !v    %33.1, DeadCall@0x5604dcd9b3d0[Call#11], %33.0   !
BB36   <- [34]
  (cls|spec|blt)  %36.0 = LdFun              !v    .cacheGeneric, e2.0
  fs              %36.1 = FrameState         R     0x5604de28e080+995: [%36.0], env=e2.0
  void                    Deopt              !v    %36.1, DeadCall@0x5604dcd9b3d0[Call#12], %36.0   !
BB35   <- [34]
  goto BB8
Prom 0:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    f, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <str$+>
  void                    Return             l     %1.3
Prom 1:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    f, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 2:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    where, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 3:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    package, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 4:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    name, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 5:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    where, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 6:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    pkg, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 7:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    .genericTable, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <env->
  void                    Return             l     %1.3

│ .getGeneric[0x5604e6fbcbb0]                                                  │
└──────────────────────────────────────────────────────────────────────────────┘
