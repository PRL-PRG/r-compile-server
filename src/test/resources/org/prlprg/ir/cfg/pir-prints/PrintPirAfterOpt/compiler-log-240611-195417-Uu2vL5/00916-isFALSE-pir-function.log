
┌──────────────────────────────────────────────────────────────────────────────┐
│ isFALSE[0x5604e65d3e70]                                                      │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;Eager0,!Obj0                         │
│ Properties:  Eager, ForceOrd: 0                                              │
├────── PIR Version After Optimizations
isFALSE[0x5604e65d3e70]
BB0
  goto BB1
BB1   <- [0]
  val?~+          %1.0  = LdArg                    0
  val+            %1.1  = Force!<lazy>             %1.0,    <val?>
  val+            %1.2  = CallSafeBuiltin    vwed  is.logical(%1.1)    <lgl$->
  lgl$#-          %1.3  = IsType                   %1.2 isA lgl$-
  cp              %1.4  = Checkpoint                -> BB2 (default) | BB14 (if assume failed)
BB2   <- [1]
  void                    Assume             D     %1.3, %1.4 (Typecheck@0x5604de660478[Type#2])
  lgl$-           %2.1  = CastType           d     dn %1.2
  lgl$-           %2.2  = AsLogical                %2.1
  lgl$#-          %2.3  = Identical                %2.2, false
  void                    Branch                   %2.3 -> BB13 (if true) | BB3 (if false)
BB14   <- [1]
  env             e14.0 = (MkEnv)            l     x=%1.0, parent=R_BaseNamespace, context 1
  fs              %14.1 = FrameState         R     0x5604de1ab1a0+91: [%1.2], env=e14.0
  void                    Deopt              !v    %14.1   !
BB13   <- [2]
  goto BB4
BB3   <- [2]
  lgl$#-          %3.0  = IsType                   %1.1 isA lgl$-
  void                    Assume             D     %3.0, %1.4 (Typecheck@0x5604de660478[Type#4])
  void                    Visible            v     
  lgl$-           %3.3  = AsLogical                %2.2
  goto BB4
BB4   <- [3, 13]
  lgl$-           %4.0  = Phi                      %3.3:BB3, %2.2:BB13
  lgl$-           %4.1  = AsLogical                %4.0
  lgl$#-          %4.2  = Identical                %4.1, false
  void                    Branch                   %4.2 -> BB12 (if true) | BB5 (if false)
BB12   <- [4]
  goto BB6
BB5   <- [4]
  lgl$#-          %5.0  = IsType                   %1.1 isA lgl$-
  void                    Assume             D     %5.0, %1.4 (Typecheck@0x5604de660478[Type#8])
  lgl$-           %5.2  = CastType           d     dn %1.1
  lgl$-           %5.3  = CallSafeBuiltin    vwed  is.na(%5.2)    <lgl$->
  lgl$-           %5.4  = Not                vd    %5.3, elided
  lgl$-           %5.5  = AsLogical                %5.4
  lgl$-           %5.6  = LAnd                     %4.1, %5.5
  goto BB6
BB6   <- [5, 12]
  lgl$-           %6.0  = Phi                      %5.6:BB5, %4.1:BB12
  lgl$-           %6.1  = AsLogical                %6.0
  lgl$#-          %6.2  = Identical                %6.1, false
  cp              %6.3  = Checkpoint                -> BB8 (default) | BB7 (if assume failed)
BB8   <- [6]
  void                    Branch                   %6.2 -> BB11 (if true) | BB9 (if false)
BB7   <- [6]
  env             e7.0  = (MkEnv)            l     x=%1.0, parent=R_BaseNamespace, context 1
  fs              %7.1  = FrameState         R     0x5604de1ab1a0+319: [%6.0], env=e7.0
  void                    Deopt              !v    %7.1   !
BB11   <- [8]
  goto BB10
BB9   <- [8]
  void                    Visible            v     
  lgl$#-          %9.1  = IsType                   %1.1 isA lgl$-
  void                    Assume             D     %9.1, %6.3 (Typecheck@0x5604de660478[Type#10])
  lgl$-           %9.3  = CastType           d     dn %1.1
  lgl$-           %9.4  = Not                vd    %9.3, elided
  lgl$-           %9.5  = AsLogical                %9.4
  lgl$-           %9.6  = LAnd                     %6.1, %9.5
  goto BB10
BB10   <- [9, 11]
  lgl$-           %10.0 = Phi                      %9.6:BB9, %6.1:BB11
  void                    Return             l     %10.0

│ isFALSE[0x5604e65d3e70]                                                      │
└──────────────────────────────────────────────────────────────────────────────┘
