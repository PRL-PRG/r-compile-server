
┌──────────────────────────────────────────────────────────────────────────────┐
│ .recacheSubclasses[0x56554ad2bf60]                                           │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;NonRefl1,NonRefl2                    │
│ Properties:                                                                  │
├────── PIR Version After Optimizations
.recacheSubclasses[0x56554ad2bf60]
BB0
  goto BB1
BB1   <- [0]
  val?^           %1.0  = LdArg                    2
  val?^           %1.1  = LdArg                    1
  val?^           %1.2  = LdArg                    0
  env             e1.3  = MkEnv              l     class=%1.2, def=%1.1, env=%1.0, parent=<env 0x56554a41b378>, context 1
  (cls|spec|blt)  %1.4  = LdFun              !v    @, <0x565549e13bd8>, <env 0x56554a41b378>
  prom-           %1.5  = MkArg                    unboundValue, .recacheSubclasses[0x56554ad2bf60]_p0 (!refl), e1.3
  prom-           %1.6  = MkArg                    unboundValue, .recacheSubclasses[0x56554ad2bf60]_p1, e1.3
  val?            %1.7  = Call               !v    %1.4(%1.5, %1.6) e1.3   <vec+>
  void                    StVar              lW    subs, %1.7, e1.3
  lgl$#-          %1.9  = IsType                   %1.7 isA val?+
  cp              %1.10 = Checkpoint                -> BB2 (default) | BB62 (if assume failed)
BB2   <- [1]
  val?^ | miss    %2.0  = LdVar              eR    names, e1.3
  lgl$#-          %2.1  = Identical                <blt names>, %2.0   <true>
  void                    Assume             D     %2.1, %1.10 (DeadBranchReached@0x56554c925270[Test#0])
  val             %2.3  = ChkMissing         e     %1.7
  void                    Assume             D     %1.9, %1.10 (Typecheck@0x56554c925270[Type#2])
  val?+           %2.5  = CastType           d     dn %1.7   <vec+>
  val+            %2.6  = CallSafeBuiltin    wed   names(%2.5)    <str->
  void                    StVar              lW    subNames, %2.6, e1.3
  cp              %2.8  = Checkpoint                -> BB4 (default) | BB3 (if assume failed)
BB62   <- [1]
  fs              %62.0 = FrameState         R     0x56554d0a3d60+51: [], env=e1.3
  void                    Deopt              !v    %62.0   !
BB4   <- [2]
  val?^ | miss    %4.0  = LdVar              eR    seq_along, e1.3
  lgl$#-          %4.1  = Identical                <blt seq_along>, %4.0   <true>
  void                    Assume             D     %4.1, %2.8 (DeadBranchReached@0x56554c925270[Test#1])
  val?            %4.3  = CallBuiltin        !v    seq_along(%2.5) e1.3   <int->
  cp              %4.4  = Checkpoint                -> BB6 (default) | BB5 (if assume failed)
BB3   <- [2]
  fs              %3.0  = FrameState         R     0x56554d0a3d60+156: [], env=e1.3
  void                    Deopt              !v    %3.0   !
BB6   <- [4]
  val?+           %6.0  = ToForSeq           e     %4.3
  int$-           %6.1  = Length                   %6.0
  int$-           %6.2  = Inc                      0L
  lgl$-           %6.3  = Lt                 d     %6.1, %6.2, elided   <false>
  lgl$#-          %6.4  = Identical                %6.3, true
  void                    AssumeNot          D     %6.4, %4.4 (DeadBranchReached@0x56554c925270[Test#2])
  val?            %6.6  = Extract2_1D        wed   %6.0, %6.2, elided
  void                    StVar              lW    i, %6.6, e1.3
  cp              %6.8  = Checkpoint                -> BB8 (default) | BB7 (if assume failed)
BB5   <- [4]
  fs              %5.0  = FrameState         R     0x56554d0a3d60+247: [%4.3], env=e1.3
  void                    Deopt              !v    %5.0   !
BB8   <- [6]
  val?^ | miss    %8.0  = LdVar              eR    subNames, e1.3
  lgl$#-          %8.1  = IsType                   %8.0 isA val?~- | miss
  void                    Assume             D     %8.1, %6.8 (Typecheck@0x56554c925270[Type#9])
  val?~- | miss   %8.3  = CastType           d     dn %8.0
  val?-           %8.4  = Force!<value>            %8.3,    <str->
  lgl$#-          %8.5  = IsType                   %8.4 isA val+   <true>
  void                    Assume             D     %8.5, %6.8 (DeadBranchReached@0x56554c925270[Test#3])
  val             %8.7  = ChkMissing         e     %6.6
  lgl$#-          %8.8  = IsType                   %8.7 isA int$-
  void                    Assume             D     %8.8, %6.8 (Typecheck@0x56554c925270[Type#11])
  int$-           %8.10 = CastType           d     dn %8.7
  val?            %8.11 = Extract2_1D        wed   %8.4, %8.10, elided   <str$->
  void                    StVar              lW    what, %8.11, e1.3
  cp              %8.13 = Checkpoint                -> BB10 (default) | BB9 (if assume failed)
BB7   <- [6]
  fs              %7.0  = FrameState         R     0x56554d0a3d60+292: [%6.0, %6.1, %6.2], env=e1.3
  void                    Deopt              !v    %7.0   !
BB10   <- [8]
  val?^ | miss    %10.0 = LdVar              eR    getClassDef, e1.3
  lgl$#-          %10.1 = Identical                %10.0, function(Class, where=topenv(parent.frame()), |...
  void                    Assume             D     %10.1, %8.13 (CallTarget@0x56554c925270[Call#3])
  prom-           %10.3 = MkArg                    unboundValue, .recacheSubclasses[0x56554ad2bf60]_p2 (!refl), e1.3
  prom-           %10.4 = MkArg                    unboundValue, .recacheSubclasses[0x56554ad2bf60]_p3, e1.3
  val?            %10.5 = StaticCall         !v    getClassDef[0x56554c1e9f30](%10.3, missingArg, %10.4) { 0 2n } e1.3   <other>
  lgl$-           %10.6 = Is                       %10.5, NULL
  void                    StVar              lW    subDef, %10.5, e1.3
  cp              %10.8 = Checkpoint                -> BB12 (default) | BB11 (if assume failed)
BB9   <- [8]
  fs              %9.0  = FrameState         R     0x56554d0a3d60+367: [%6.0, %6.1, %6.2], env=e1.3
  void                    Deopt              !v    %9.0   !
BB12   <- [10]
  val             %12.0 = ChkMissing         e     %10.5
  lgl$#-          %12.1 = CheckTrueFalse     e     %10.6
  void                    Branch                   %12.1 -> BB61 (if true) | BB13 (if false)
BB11   <- [10]
  fs              %11.0 = FrameState         R     0x56554d0a3d60+426: [%6.0, %6.1, %6.2], env=e1.3
  void                    Deopt              !v    %11.0   !
BB61   <- [12]
  (cls|spec|blt)  %61.0 = LdFun              !v    getClassDef, e1.3
  fs              %61.1 = FrameState         R     0x56554d0a3d60+461: [%6.0, %6.1, %6.2, %61.0], env=e1.3
  void                    Deopt              !v    %61.1, DeadCall@0x56554c925270[Call#5], %61.0   !
BB13   <- [12]
  val?^ | miss    %13.0 = LdVar              eR    is.na, e1.3
  lgl$#-          %13.1 = Identical                <blt is.na>, %13.0   <true>
  void                    Assume             D     %13.1, %10.8 (DeadBranchReached@0x56554c925270[Test#5])
  val?^ | miss    %13.3 = LdVar              eR    match, e1.3
  lgl$#-          %13.4 = Identical                %13.3, function(x, table, nomatch=NA, incomparables=N|...
  void                    Assume             D     %13.4, %10.8 (CallTarget@0x56554c925270[Call#10])
  val?^ | miss    %13.6 = LdVar              eR    what, e1.3
  lgl$#-          %13.7 = IsType                   %13.6 isA val?~- | miss
  void                    Assume             D     %13.7, %10.8 (Typecheck@0x56554c925270[Type#31])
  val?~- | miss   %13.9 = CastType           d     dn %13.6
  val?-           %13.10 = Force!<value>            %13.9,    <str$->
  val?^ | miss    %13.11 = LdVar              eR    names, e1.3
  lgl$#-          %13.12 = Identical                %13.11, <blt names>
  void                    Assume             D     %13.12, %10.8 (CallTarget@0x56554c925270[Call#11])
  (cls|spec|blt)  %13.14 = LdFun              !v    @, <0x565549e13bd8>, e1.3
  prom-           %13.15 = MkArg                    unboundValue, .recacheSubclasses[0x56554ad2bf60]_p6, e1.3
  prom-           %13.16 = MkArg                    unboundValue, .recacheSubclasses[0x56554ad2bf60]_p7, e1.3
  val?            %13.17 = Call               !v    %13.14(%13.15, %13.16) e1.3   <vec+>
  val?            %13.18 = CallBuiltin        !v    names(%13.17) e1.3   <str->
  lgl$#-          %13.19 = IsType                   %13.18 isA val?-
  cp              %13.20 = Checkpoint                -> BB15 (default) | BB14 (if assume failed)
BB15   <- [13]
  void                    Assume             D     %13.19, %13.20 (Typecheck@0x56554a121b30[Type#1])
  val?-           %15.1 = CastType           d     dn %13.18   <str->
  val+            %15.2 = CallSafeBuiltin    wed   match(%13.10, %15.1, NA, nil)    <int$->
  lgl$#-          %15.3 = IsType                   %15.2 isA int$-
  cp              %15.4 = Checkpoint                -> BB17 (default) | BB16 (if assume failed)
BB14   <- [13]
  fs              %14.0 = FrameState         R     0x56554d0a3d60+629: [%6.0, %6.1, %6.2, <blt is.na>], env=e1.3
  prom-           %14.1 = MkArg                    unboundValue, .recacheSubclasses[0x56554ad2bf60]_p8, e1.3
  val?^           %14.2 = CastType                 up %14.1
  prom-           %14.3 = MkArg                    %13.10, .recacheSubclasses[0x56554ad2bf60]_p12 (!refl), e1.3
  val?~           %14.4 = CastType                 up %14.3
  env             e14.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%14.2, x=%14.4, parent=R_BaseNamespace, context 0
  fs              %14.6 = FrameState         R     0x56554a949d70+23: [%13.10], env=e14.5, next=%14.0
  fs              %14.7 = FrameState         R     0x56554d09b8e0+32(pr): [%13.18], env=e1.3, next=%14.6
  void                    Deopt              !v    %14.7   !
BB17   <- [15]
  void                    Assume             D     %15.3, %15.4 (Typecheck@0x56554c925270[Type#36])
  int$-           %17.1 = CastType           d     dn %15.2
  lgl$-           %17.2 = CallSafeBuiltin    wed   is.na(%17.1)    <lgl$->
  lgl$#-          %17.3 = CheckTrueFalse     e     %17.2
  void                    Branch                   %17.3 -> BB50 (if true) | BB18 (if false)
BB16   <- [15]
  fs              %16.0 = FrameState         R     0x56554d0a3d60+629: [%6.0, %6.1, %6.2, <blt is.na>], env=e1.3
  prom-           %16.1 = MkArg                    %15.1, .recacheSubclasses[0x56554ad2bf60]_p13 (!refl), e1.3
  val?~           %16.2 = CastType                 up %16.1
  prom-           %16.3 = MkArg                    %13.10, .recacheSubclasses[0x56554ad2bf60]_p17 (!refl), e1.3
  val?~           %16.4 = CastType                 up %16.3
  env             e16.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%16.2, x=%16.4, parent=R_BaseNamespace, context 0
  fs              %16.6 = FrameState         R     0x56554a949d70+69: [%15.2], env=e16.5, next=%16.0
  void                    Deopt              !v    %16.6   !
BB50   <- [17]
  (cls|spec|blt)  %50.0 = LdFun              !v    @, <0x565549e13bd8>, e1.3
  prom-           %50.1 = MkArg                    unboundValue, .recacheSubclasses[0x56554ad2bf60]_p18, e1.3
  prom-           %50.2 = MkArg                    unboundValue, .recacheSubclasses[0x56554ad2bf60]_p19, e1.3
  val?            %50.3 = Call               !v    %50.0(%50.1, %50.2) e1.3   <vec+>
  void                    StVar              lW    cntns, %50.3, e1.3
  cp              %50.5 = Checkpoint                -> BB52 (default) | BB51 (if assume failed)
BB18   <- [17]
  goto BB19
BB52   <- [50]
  val?^ | miss    %52.0 = LdVar              eR    subs, e1.3
  lgl$#-          %52.1 = IsType                   %52.0 isA val?~+ | miss
  void                    Assume             D     %52.1, %50.5 (Typecheck@0x56554c925270[Type#41])
  val?~+ | miss   %52.3 = CastType           d     dn %52.0
  val?+           %52.4 = Force!<value>            %52.3,    <vec+>
  lgl$#-          %52.5 = IsType                   %52.4 isA val+   <true>
  void                    Assume             D     %52.5, %50.5 (DeadBranchReached@0x56554c925270[Test#6])
  val?^ | miss    %52.7 = LdVar              eR    i, e1.3
  lgl$#-          %52.8 = IsType                   %52.7 isA int$-
  void                    Assume             D     %52.8, %50.5 (Typecheck@0x56554c925270[Type#43])
  int$-           %52.10 = CastType           d     dn %52.7
  val?            %52.11 = Extract2_1D        wed   %52.4, %52.10, elided   <other>
  cp              %52.12 = Checkpoint                -> BB54 (default) | BB53 (if assume failed)
BB51   <- [50]
  fs              %51.0 = FrameState         R     0x56554d0a3d60+718: [%6.0, %6.1, %6.2], env=e1.3
  void                    Deopt              !v    %51.0   !
BB19   <- [18, 60]
  goto BB20
BB54   <- [52]
  val             %54.0 = ChkMissing         e     %50.3
  lgl$#-          %54.1 = IsType                   %54.0 isA val?~+ | miss
  void                    Assume             D     %54.1, %52.12 (Typecheck@0x56554c925270[Type#45])
  val+            %54.3 = CastType           d     dn %54.0   <vec+>
  val?^ | miss    %54.4 = LdVar              eR    class, e1.3
  val?            %54.5 = Force!<lazy>       !v    %54.4, e1.3   <str$+>
  val?            %54.6 = Subassign2_1D      !v    %52.11, %54.3, %54.5, e1.3   <vec+>
  void                    StVar              lW    cntns, %54.6, e1.3
  lgl$#-          %54.8 = IsType                   %54.6 isA val+   <true>
  cp              %54.9 = Checkpoint                -> BB56 (default) | BB55 (if assume failed)
BB53   <- [52]
  fs              %53.0 = FrameState         R     0x56554d0a3d60+778: [%6.0, %6.1, %6.2, %52.11], env=e1.3
  void                    Deopt              !v    %53.0   !
BB20   <- [19, 36]
  int$-           %20.0 = Phi                      %6.2:BB19, %20.1:BB36
  int$-           %20.1 = Inc                      %20.0
  lgl$-           %20.2 = Lt                 d     %6.1, %20.1, elided
  lgl$#-          %20.3 = Identical                %20.2, true
  void                    Branch                   %20.3 -> BB49 (if true) | BB21 (if false)
BB56   <- [54]
  val             %56.0 = ChkMissing         e     %54.6
  void                    Assume             D     %54.8, %54.9 (DeadBranchReached@0x56554c925270[Test#7])
  val?^ | miss    %56.2 = LdVar              eR    sort.list, e1.3
  lgl$#-          %56.3 = Identical                %56.2, function(x, partial=NULL, na.last=TRUE, decrea|...
  void                    Assume             D     %56.3, %54.9 (CallTarget@0x56554c925270[Call#16])
  prom-           %56.5 = MkArg                    unboundValue, .recacheSubclasses[0x56554ad2bf60]_p20, e1.3
  val?            %56.6 = Call               !v    function(x, partial=NULL, na.last=TRUE, decrea|...(%56.5) e1.3   <int->
  lgl$#-          %56.7 = IsType                   %56.6 isA int-
  cp              %56.8 = Checkpoint                -> BB58 (default) | BB57 (if assume failed)
BB55   <- [54]
  fs              %55.0 = FrameState         R     0x56554d0a3d60+822: [%6.0, %6.1, %6.2], env=e1.3
  void                    Deopt              !v    %55.0   !
BB49   <- [20]
  void                    Visible            v     
  void                    Return             l     nil
BB21   <- [20]
  val?            %21.0 = Extract2_1D        wed   %6.0, %20.1, elided
  void                    StVar              lW    i, %21.0, e1.3
  cp              %21.2 = Checkpoint                -> BB23 (default) | BB22 (if assume failed)
BB58   <- [56]
  lgl$#-          %58.0 = IsType                   %54.6 isA val?+
  void                    Assume             D     %58.0, %56.8 (Typecheck@0x56554c925270[Type#47])
  val?+           %58.2 = CastType           d     dn %54.6   <vec+>
  void                    Assume             D     %56.7, %56.8 (Typecheck@0x56554c925270[Type#53])
  int-            %58.4 = CastType           d     dn %56.6
  val?            %58.5 = Extract1_1D        wed   %58.2, %58.4, elided   <vec+>
  void                    StVar              lW    cntns, %58.5, e1.3
  (cls|spec|blt)  %58.7 = LdFun              !v    <-, <0x565549e08da8>, e1.3
  prom-           %58.8 = MkArg                    unboundValue, .recacheSubclasses[0x56554ad2bf60]_p23, e1.3
  prom-           %58.9 = MkArg                    unboundValue, .recacheSubclasses[0x56554ad2bf60]_p26, e1.3
  val?            %58.10 = Call               !v    %58.7(%58.8, %58.9) e1.3
  cp              %58.11 = Checkpoint                -> BB60 (default) | BB59 (if assume failed)
BB57   <- [56]
  fs              %57.0 = FrameState         R     0x56554d0a3d60+899: [%6.0, %6.1, %6.2, %54.6, %56.6], env=e1.3
  void                    Deopt              !v    %57.0   !
BB23   <- [21]
  val?^ | miss    %23.0 = LdVar              eR    subNames, e1.3
  lgl$#-          %23.1 = IsType                   %23.0 isA val?~- | miss
  void                    Assume             D     %23.1, %21.2 (Typecheck@0x56554c925270[Type#69])
  val?~- | miss   %23.3 = CastType           d     dn %23.0
  val?-           %23.4 = Force!<value>            %23.3,    <str->
  lgl$#-          %23.5 = IsType                   %23.4 isA val+   <true>
  void                    Assume             D     %23.5, %21.2 (DeadBranchReached@0x56554c925270[Test#8])
  val             %23.7 = ChkMissing         e     %21.0
  lgl$#-          %23.8 = IsType                   %23.7 isA int$-
  void                    Assume             D     %23.8, %21.2 (Typecheck@0x56554c925270[Type#71])
  int$-           %23.10 = CastType           d     dn %23.7
  val?            %23.11 = Extract2_1D        wed   %23.4, %23.10, elided   <str$->
  void                    StVar              lW    what, %23.11, e1.3
  cp              %23.13 = Checkpoint                -> BB25 (default) | BB24 (if assume failed)
BB22   <- [21]
  fs              %22.0 = FrameState         R     0x56554d0a3d60+1073: [%6.0, %6.1, %20.1], env=e1.3
  void                    Deopt              !v    %22.0   !
BB60   <- [58]
  val?^ | miss    %60.0 = LdVar              eR    .cacheClass, e1.3
  lgl$#-          %60.1 = Identical                %60.0, function(name, def, doSubclasses=FALSE, env) <|...
  void                    Assume             D     %60.1, %58.11 (CallTarget@0x56554c925270[Call#20])
  prom-           %60.3 = MkArg                    unboundValue, .recacheSubclasses[0x56554ad2bf60]_p27, e1.3
  prom-           %60.4 = MkArg                    unboundValue, .recacheSubclasses[0x56554ad2bf60]_p28, e1.3
  prom-           %60.5 = MkArg                    unboundValue, .recacheSubclasses[0x56554ad2bf60]_p29, e1.3
  val?            %60.6 = StaticCall         !v    .cacheClass[0x56554a8723c0](%60.3, %60.4, false, %60.5) e1.3
  goto BB19
BB59   <- [58]
  fs              %59.0 = FrameState         R     0x56554d0a3d60+957: [%6.0, %6.1, %6.2, %58.10], env=e1.3
  void                    Deopt              !v    %59.0   !
BB25   <- [23]
  val?^ | miss    %25.0 = LdVar              eR    getClassDef, e1.3
  lgl$#-          %25.1 = Identical                %25.0, function(Class, where=topenv(parent.frame()), |...
  void                    Assume             D     %25.1, %23.13 (CallTarget@0x56554c925270[Call#26])
  prom-           %25.3 = MkArg                    unboundValue, .recacheSubclasses[0x56554ad2bf60]_p30 (!refl), e1.3
  prom-           %25.4 = MkArg                    unboundValue, .recacheSubclasses[0x56554ad2bf60]_p31, e1.3
  val?            %25.5 = StaticCall         !v    getClassDef[0x56554c1e9f30](%25.3, missingArg, %25.4) { 0 2n } e1.3   <other>
  lgl$-           %25.6 = Is                       %25.5, NULL
  void                    StVar              lW    subDef, %25.5, e1.3
  cp              %25.8 = Checkpoint                -> BB27 (default) | BB26 (if assume failed)
BB24   <- [23]
  fs              %24.0 = FrameState         R     0x56554d0a3d60+1148: [%6.0, %6.1, %20.1], env=e1.3
  void                    Deopt              !v    %24.0   !
BB27   <- [25]
  val             %27.0 = ChkMissing         e     %25.5
  lgl$#-          %27.1 = CheckTrueFalse     e     %25.6
  void                    Branch                   %27.1 -> BB48 (if true) | BB28 (if false)
BB26   <- [25]
  fs              %26.0 = FrameState         R     0x56554d0a3d60+1207: [%6.0, %6.1, %20.1], env=e1.3
  void                    Deopt              !v    %26.0   !
BB48   <- [27]
  (cls|spec|blt)  %48.0 = LdFun              !v    getClassDef, e1.3
  fs              %48.1 = FrameState         R     0x56554d0a3d60+1242: [%6.0, %6.1, %20.1, %48.0], env=e1.3
  void                    Deopt              !v    %48.1, DeadCall@0x56554c925270[Call#28], %48.0   !
BB28   <- [27]
  val?^ | miss    %28.0 = LdVar              eR    is.na, e1.3
  lgl$#-          %28.1 = Identical                <blt is.na>, %28.0   <true>
  void                    Assume             D     %28.1, %25.8 (DeadBranchReached@0x56554c925270[Test#10])
  val?^ | miss    %28.3 = LdVar              eR    match, e1.3
  lgl$#-          %28.4 = Identical                %28.3, function(x, table, nomatch=NA, incomparables=N|...
  void                    Assume             D     %28.4, %25.8 (CallTarget@0x56554c925270[Call#33])
  prom-           %28.6 = MkArg                    unboundValue, .recacheSubclasses[0x56554ad2bf60]_p35, e1.3
  val?^           %28.7 = CastType                 up %28.6
  val?^ | miss    %28.8 = LdVar              eR    what, e1.3
  val?            %28.9 = Force!<value>      !v    %28.8, e1.3   <str$->
  prom-           %28.10 = MkArg                    %28.9, .recacheSubclasses[0x56554ad2bf60]_p39 (!refl), e1.3
  val?~           %28.11 = CastType                 up %28.10
  cp              %28.12 = Checkpoint                -> BB30 (default) | BB29 (if assume failed)
BB30   <- [28]
  env             e30.0 = (MkEnv)            l     x=%28.11, table=%28.7, nomatch(miss)=NA, incomparables(miss)=nil, parent=R_BaseNamespace, context 0
  lgl$#-          %30.1 = IsEnvStub          R     , e30.0
  void                    Assume             D     %30.1, %28.12 (EnvStubMaterialized@0x56554a121b30[Call#unknown])
  val?            %30.3 = Force!<lazy>       !vL   %28.7, e30.0   <val?->
  lgl$#-          %30.4 = IsType                   %30.3 isA val?-
  cp              %30.5 = Checkpoint                -> BB32 (default) | BB31 (if assume failed)
BB29   <- [28]
  fs              %29.0 = FrameState         R     0x56554d0a3d60+1410: [%6.0, %6.1, %20.1, <blt is.na>], env=e1.3
  env             e29.1 = (MkEnv)            l     x=%28.11, table=%28.7, nomatch(miss)=NA, incomparables(miss)=nil, parent=R_BaseNamespace, context 0
  fs              %29.2 = FrameState         R     0x56554a949d70+9: [%28.9], env=e29.1, next=%29.0
  void                    Deopt              !v    %29.2   !
BB32   <- [30]
  lgl$#-          %32.0 = IsEnvStub          R     , e30.0
  void                    Assume             D     %32.0, %30.5 (EnvStubMaterialized@0x56554a121b30[Call#unknown])
  lgl$#-          %32.2 = IsType                   %28.9 isA val?+
  void                    Assume             D     %32.2, %30.5 (Typecheck@0x56554a121b30[Type#0])
  val?+           %32.4 = CastType           d     dn %28.9   <(int|str)+>
  void                    Assume             D     %30.4, %30.5 (Typecheck@0x56554a121b30[Type#1])
  val?-           %32.6 = CastType           d     dn %30.3
  val+            %32.7 = CallSafeBuiltin    wed   match(%32.4, %32.6, NA, nil)    <int$->
  lgl$#-          %32.8 = IsType                   %32.7 isA int$-
  cp              %32.9 = Checkpoint                -> BB34 (default) | BB33 (if assume failed)
BB31   <- [30]
  fs              %31.0 = FrameState         R     0x56554d0a3d60+1410: [%6.0, %6.1, %20.1, <blt is.na>], env=e1.3
  fs              %31.1 = FrameState         R     0x56554a949d70+23: [%28.9, %30.3], env=e30.0, next=%31.0
  void                    Deopt              !v    %31.1   !
BB34   <- [32]
  void                    Assume             D     %32.8, %32.9 (Typecheck@0x56554c925270[Type#96])
  int$-           %34.1 = CastType           d     dn %32.7
  lgl$-           %34.2 = CallSafeBuiltin    wed   is.na(%34.1)    <lgl$->
  lgl$#-          %34.3 = CheckTrueFalse     e     %34.2
  void                    Branch                   %34.3 -> BB37 (if true) | BB35 (if false)
BB33   <- [32]
  fs              %33.0 = FrameState         R     0x56554d0a3d60+1410: [%6.0, %6.1, %20.1, <blt is.na>], env=e1.3
  fs              %33.1 = FrameState         R     0x56554a949d70+69: [%32.7], env=e30.0, next=%33.0
  void                    Deopt              !v    %33.1   !
BB37   <- [34]
  (cls|spec|blt)  %37.0 = LdFun              !v    @, <0x565549e13bd8>, e1.3
  prom-           %37.1 = MkArg                    unboundValue, .recacheSubclasses[0x56554ad2bf60]_p40, e1.3
  prom-           %37.2 = MkArg                    unboundValue, .recacheSubclasses[0x56554ad2bf60]_p41, e1.3
  val?            %37.3 = Call               !v    %37.0(%37.1, %37.2) e1.3   <vec+>
  void                    StVar              lW    cntns, %37.3, e1.3
  cp              %37.5 = Checkpoint                -> BB39 (default) | BB38 (if assume failed)
BB35   <- [34]
  goto BB36
BB39   <- [37]
  val?^ | miss    %39.0 = LdVar              eR    subs, e1.3
  lgl$#-          %39.1 = IsType                   %39.0 isA val?~+ | miss
  void                    Assume             D     %39.1, %37.5 (Typecheck@0x56554c925270[Type#101])
  val?~+ | miss   %39.3 = CastType           d     dn %39.0
  val?+           %39.4 = Force!<value>            %39.3,    <vec+>
  lgl$#-          %39.5 = IsType                   %39.4 isA val+   <true>
  void                    Assume             D     %39.5, %37.5 (DeadBranchReached@0x56554c925270[Test#11])
  val?^ | miss    %39.7 = LdVar              eR    i, e1.3
  lgl$#-          %39.8 = IsType                   %39.7 isA int$-
  void                    Assume             D     %39.8, %37.5 (Typecheck@0x56554c925270[Type#103])
  int$-           %39.10 = CastType           d     dn %39.7
  val?            %39.11 = Extract2_1D        wed   %39.4, %39.10, elided   <other>
  cp              %39.12 = Checkpoint                -> BB41 (default) | BB40 (if assume failed)
BB38   <- [37]
  fs              %38.0 = FrameState         R     0x56554d0a3d60+1499: [%6.0, %6.1, %20.1], env=e1.3
  void                    Deopt              !v    %38.0   !
BB36   <- [47, 35]
  goto BB20
BB41   <- [39]
  val             %41.0 = ChkMissing         e     %37.3
  lgl$#-          %41.1 = IsType                   %41.0 isA val?~+ | miss
  void                    Assume             D     %41.1, %39.12 (Typecheck@0x56554c925270[Type#105])
  val+            %41.3 = CastType           d     dn %41.0   <vec+>
  val?^ | miss    %41.4 = LdVar              eR    class, e1.3
  val?            %41.5 = Force!<wrapped>    !v    %41.4, e1.3   <str$+>
  val?            %41.6 = Subassign2_1D      !v    %39.11, %41.3, %41.5, e1.3   <vec+>
  void                    StVar              lW    cntns, %41.6, e1.3
  lgl$#-          %41.8 = IsType                   %41.6 isA val+   <true>
  cp              %41.9 = Checkpoint                -> BB43 (default) | BB42 (if assume failed)
BB40   <- [39]
  fs              %40.0 = FrameState         R     0x56554d0a3d60+1559: [%6.0, %6.1, %20.1, %39.11], env=e1.3
  void                    Deopt              !v    %40.0   !
BB43   <- [41]
  val             %43.0 = ChkMissing         e     %41.6
  void                    Assume             D     %41.8, %41.9 (DeadBranchReached@0x56554c925270[Test#12])
  val?^ | miss    %43.2 = LdVar              eR    sort.list, e1.3
  lgl$#-          %43.3 = Identical                %43.2, function(x, partial=NULL, na.last=TRUE, decrea|...
  void                    Assume             D     %43.3, %41.9 (CallTarget@0x56554c925270[Call#39])
  prom-           %43.5 = MkArg                    unboundValue, .recacheSubclasses[0x56554ad2bf60]_p42, e1.3
  val?            %43.6 = Call               !v    function(x, partial=NULL, na.last=TRUE, decrea|...(%43.5) e1.3   <int->
  lgl$#-          %43.7 = IsType                   %43.6 isA int-
  cp              %43.8 = Checkpoint                -> BB45 (default) | BB44 (if assume failed)
BB42   <- [41]
  fs              %42.0 = FrameState         R     0x56554d0a3d60+1603: [%6.0, %6.1, %20.1], env=e1.3
  void                    Deopt              !v    %42.0   !
BB45   <- [43]
  lgl$#-          %45.0 = IsType                   %41.6 isA val?+
  void                    Assume             D     %45.0, %43.8 (Typecheck@0x56554c925270[Type#107])
  val?+           %45.2 = CastType           d     dn %41.6   <vec+>
  void                    Assume             D     %43.7, %43.8 (Typecheck@0x56554c925270[Type#113])
  int-            %45.4 = CastType           d     dn %43.6
  val?            %45.5 = Extract1_1D        wed   %45.2, %45.4, elided   <vec+>
  void                    StVar              lW    cntns, %45.5, e1.3
  (cls|spec|blt)  %45.7 = LdFun              !v    <-, <0x565549e08da8>, e1.3
  prom-           %45.8 = MkArg                    unboundValue, .recacheSubclasses[0x56554ad2bf60]_p45, e1.3
  prom-           %45.9 = MkArg                    unboundValue, .recacheSubclasses[0x56554ad2bf60]_p48, e1.3
  val?            %45.10 = Call               !v    %45.7(%45.8, %45.9) e1.3
  cp              %45.11 = Checkpoint                -> BB47 (default) | BB46 (if assume failed)
BB44   <- [43]
  fs              %44.0 = FrameState         R     0x56554d0a3d60+1680: [%6.0, %6.1, %20.1, %41.6, %43.6], env=e1.3
  void                    Deopt              !v    %44.0   !
BB47   <- [45]
  val?^ | miss    %47.0 = LdVar              eR    .cacheClass, e1.3
  lgl$#-          %47.1 = Identical                %47.0, function(name, def, doSubclasses=FALSE, env) <|...
  void                    Assume             D     %47.1, %45.11 (CallTarget@0x56554c925270[Call#43])
  prom-           %47.3 = MkArg                    unboundValue, .recacheSubclasses[0x56554ad2bf60]_p49, e1.3
  prom-           %47.4 = MkArg                    unboundValue, .recacheSubclasses[0x56554ad2bf60]_p50, e1.3
  prom-           %47.5 = MkArg                    unboundValue, .recacheSubclasses[0x56554ad2bf60]_p51, e1.3
  val?            %47.6 = StaticCall         !v    .cacheClass[0x56554a8723c0](%47.3, %47.4, false, %47.5) e1.3
  goto BB36
BB46   <- [45]
  fs              %46.0 = FrameState         R     0x56554d0a3d60+1738: [%6.0, %6.1, %20.1, %45.10], env=e1.3
  void                    Deopt              !v    %46.0   !
Prom 0:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    def, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 1:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    subclasses, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 2:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    what, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 3:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     packageSlot, <0x56554a5dd1c8>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, .recacheSubclasses[0x56554ad2bf60]_p4, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <str$->
  void                    Return             l     %1.3
Prom 4:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    subs, e1.0
  val?            %1.2  = Force<value>       !v    %1.1, e1.0   <vec+>
  lgl$#-          %1.3  = IsType                   %1.2 isA val+   <true>
  void                    Branch                   %1.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [1]
  val?^ | miss    %2.0  = LdVar              eR    i, e1.0
  val?            %2.1  = Force<value>       !v    %2.0, e1.0   <int$->
  goto BB3
BB4   <- [1]
  prom-           %4.0  = MkArg                    unboundValue, .recacheSubclasses[0x56554ad2bf60]_p5, e1.0
  goto BB3
BB3   <- [2, 4]
  val?            %3.0  = Phi                      %2.1:BB2, %4.0:BB4
  val?            %3.1  = Extract2_1D        !v    %1.2, %3.0, e1.0   <other>
  void                    Visible            v     
  void                    Return             l     %3.1
Prom 5:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    i, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 6:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    subDef, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 7:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    contains, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 8:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     names, <0x565549e14470>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, .recacheSubclasses[0x56554ad2bf60]_p9, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <str->
  void                    Return             l     %1.3
Prom 9:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     @, <0x565549e13bd8>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, .recacheSubclasses[0x56554ad2bf60]_p10, e1.0
  prom-           %1.3  = MkArg                    unboundValue, .recacheSubclasses[0x56554ad2bf60]_p11, e1.0
  val?            %1.4  = Call               !     %1.1(%1.2, %1.3) e1.0   <vec+>
  void                    Return             l     %1.4
Prom 10:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    subDef, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 11:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    contains, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 12:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    what, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 13:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     names, <0x565549e14470>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, .recacheSubclasses[0x56554ad2bf60]_p14, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <str->
  void                    Return             l     %1.3
Prom 14:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     @, <0x565549e13bd8>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, .recacheSubclasses[0x56554ad2bf60]_p15, e1.0
  prom-           %1.3  = MkArg                    unboundValue, .recacheSubclasses[0x56554ad2bf60]_p16, e1.0
  val?            %1.4  = Call               !     %1.1(%1.2, %1.3) e1.0   <vec+>
  void                    Return             l     %1.4
Prom 15:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    subDef, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 16:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    contains, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 17:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    what, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 18:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    subDef, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 19:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    contains, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 20:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     vapply, <0x565549f319e8>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, .recacheSubclasses[0x56554ad2bf60]_p21, e1.0
  cls             %1.3  = MkCls                    .recacheSubclasses@Prom(36)0, e1.0
  prom-           %1.4  = MkArg                    %1.3, .recacheSubclasses[0x56554ad2bf60]_p22 (!refl), e1.0
  val?            %1.5  = Call               !     %1.1(%1.2, %1.4, 1) e1.0   <real+>
  void                    Return             l     %1.5
Prom 21:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    cntns, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 22:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  cls             %1.1  = MkCls                    .recacheSubclasses@Prom(36)0, e1.0
  void                    Return             l     %1.1
Prom 23:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     @, e1.0
  prom-           %1.2  = MkArg                    unboundValue, .recacheSubclasses[0x56554ad2bf60]_p24, e1.0
  prom-           %1.3  = MkArg                    unboundValue, .recacheSubclasses[0x56554ad2bf60]_p25, e1.0
  val?            %1.4  = Call               !     %1.1(%1.2, %1.3) e1.0   <val?_>
  void                    Return             l     %1.4
Prom 24:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    subDef, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 25:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    contains, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 26:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    cntns, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 27:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    what, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 28:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    subDef, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <other>
  void                    Return             l     %1.3
Prom 29:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    env, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 30:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    what, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 31:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     packageSlot, <0x56554a5dd1c8>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, .recacheSubclasses[0x56554ad2bf60]_p32, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <str$->
  void                    Return             l     %1.3
Prom 32:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    subs, e1.0
  val?            %1.2  = Force<value>       !v    %1.1, e1.0   <vec+>
  lgl$#-          %1.3  = IsType                   %1.2 isA val+   <true>
  void                    Branch                   %1.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [1]
  val?^ | miss    %2.0  = LdVar              eR    i, e1.0
  val?            %2.1  = Force<value>       !v    %2.0, e1.0   <int$->
  goto BB3
BB4   <- [1]
  prom-           %4.0  = MkArg                    unboundValue, .recacheSubclasses[0x56554ad2bf60]_p33, e1.0
  goto BB3
BB3   <- [2, 4]
  val?            %3.0  = Phi                      %2.1:BB2, %4.0:BB4
  val?            %3.1  = Extract2_1D        !v    %1.2, %3.0, e1.0   <other>
  void                    Visible            v     
  void                    Return             l     %3.1
Prom 33:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    i, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 35:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     names, <0x565549e14470>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, .recacheSubclasses[0x56554ad2bf60]_p36, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <str->
  void                    Return             l     %1.3
Prom 36:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     @, <0x565549e13bd8>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, .recacheSubclasses[0x56554ad2bf60]_p37, e1.0
  prom-           %1.3  = MkArg                    unboundValue, .recacheSubclasses[0x56554ad2bf60]_p38, e1.0
  val?            %1.4  = Call               !     %1.1(%1.2, %1.3) e1.0   <vec+>
  void                    Return             l     %1.4
Prom 37:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    subDef, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 38:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    contains, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 39:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    what, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 40:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    subDef, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 41:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    contains, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 42:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     vapply, <0x565549f319e8>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, .recacheSubclasses[0x56554ad2bf60]_p43, e1.0
  cls             %1.3  = MkCls                    .recacheSubclasses@Prom(24)0, e1.0
  prom-           %1.4  = MkArg                    %1.3, .recacheSubclasses[0x56554ad2bf60]_p44 (!refl), e1.0
  val?            %1.5  = Call               !     %1.1(%1.2, %1.4, 1) e1.0   <real+>
  void                    Return             l     %1.5
Prom 43:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    cntns, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 44:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  cls             %1.1  = MkCls                    .recacheSubclasses@Prom(24)0, e1.0
  void                    Return             l     %1.1
Prom 45:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     @, e1.0
  prom-           %1.2  = MkArg                    unboundValue, .recacheSubclasses[0x56554ad2bf60]_p46, e1.0
  prom-           %1.3  = MkArg                    unboundValue, .recacheSubclasses[0x56554ad2bf60]_p47, e1.0
  val?            %1.4  = Call               !     %1.1(%1.2, %1.3) e1.0   <val?_>
  void                    Return             l     %1.4
Prom 46:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    subDef, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 47:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    contains, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 48:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    cntns, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 49:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    what, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 50:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    subDef, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <other>
  void                    Return             l     %1.3
Prom 51:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    env, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3

│ .recacheSubclasses[0x56554ad2bf60]                                           │
└──────────────────────────────────────────────────────────────────────────────┘
