
┌──────────────────────────────────────────────────────────────────────────────┐
│ .updateMethodsInTable[0x56554db25480]                                        │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch                                      │
│ Properties:                                                                  │
├────── PIR Version After Optimizations
.updateMethodsInTable[0x56554db25480]
BB0
  goto BB1
BB1   <- [0]
  val?^           %1.0  = LdArg                    2
  val?^           %1.1  = LdArg                    1
  val?^           %1.2  = LdArg                    0
  cp              %1.3  = Checkpoint                -> BB2 (default) | BB73 (if assume failed)
BB2   <- [1]
  val?^ | miss    %2.0  = LdVar              eR    environment, <env 0x56554a41b378>
  lgl$#-          %2.1  = Identical                %2.0, function(fun=NULL) <(rir::DispatchTable*)0x565|...
  void                    Assume             D     %2.1, %1.3 (CallTarget@0x56554c30fe00[Call#0])
  env             e2.3  = MkEnv              l     generic=%1.2, where=%1.1, attach=%1.0, parent=<env 0x56554a41b378>, context 1
  val?            %2.4  = Force!<lazy>       !v    %1.2, e2.3   <cls>
  prom-           %2.5  = MkArg                    %2.4, .updateMethodsInTable[0x56554db25480]_p0 (!refl), 
  val?            %2.6  = StaticCall         !v    environment[0x56554d749380](%2.5) e2.3   <env->
  void                    StVar              lW    fenv, %2.6, e2.3
  cp              %2.8  = Checkpoint                -> BB4 (default) | BB3 (if assume failed)
BB73   <- [1]
  env             e73.0 = (MkEnv)            l     generic=%1.2, where=%1.1, attach=%1.0, parent=<env 0x56554a41b378>, context 1
  fs              %73.1 = FrameState         R     0x56554d1e7b20+0: [], env=e73.0
  void                    Deopt              !v    %73.1
BB4   <- [2]
  val?^ | miss    %4.0  = LdVar              eR    identical, e2.3
  lgl$#-          %4.1  = Identical                %4.0, function(x, y, num.eq=TRUE, single.NA=TRUE, at|...
  void                    Assume             D     %4.1, %2.8 (CallTarget@0x56554c30fe00[Call#1])
  prom-           %4.3  = MkArg                    unboundValue, .updateMethodsInTable[0x56554db25480]_p1, e2.3
  ct              %4.4  = PushContext        lCL   %4.3, "reset", identical(attach, "reset"), function(x, y, num.eq=TRUE, single.NA=TRUE, at|..., e2.3
  val?^           %4.5  = CastType                 up %4.3
  env             e4.6  = MkEnv              l     x=%4.5, y="reset", num.eq(miss)=true, single.NA(miss)=true, attrib.as.set(miss)=true, ignore.bytecode(miss)=true, ignore.environment(miss)=false, ignore.srcref(miss)=true, parent=R_BaseNamespace, context 1
  val?            %4.7  = Force!<lazy>       !vL   %4.5, e4.6   <val?>
  val?            %4.8  = CallBuiltin        !v    identical(%4.7, "reset", true, true, true, true, false, true) e4.6
  val?            %4.9  = PopContext         C     %4.8, %4.4   <lgl$->
  lgl$#-          %4.10 = IsType                   %4.9 isA lgl$-
  cp              %4.11 = Checkpoint                -> BB6 (default) | BB5 (if assume failed)
BB3   <- [2]
  fs              %3.0  = FrameState         R     0x56554d1e7b20+46: [], env=e2.3
  void                    Deopt              !v    %3.0   !
BB6   <- [4]
  void                    Assume             D     %4.10, %4.11 (Typecheck@0x56554c30fe00[Type#3])
  lgl$-           %6.1  = CastType           d     dn %4.9
  void                    StVar              lW    reset, %6.1, e2.3
  (cls|spec|blt)  %6.3  = LdFun              !v    $, <0x565549e13c10>, e2.3
  prom-           %6.4  = MkArg                    unboundValue, .updateMethodsInTable[0x56554db25480]_p2, e2.3
  prom-           %6.5  = MkArg                    unboundValue, .updateMethodsInTable[0x56554db25480]_p3, e2.3
  val?            %6.6  = Call               !v    %6.3(%6.4, %6.5) e2.3   <env->
  lgl$-           %6.7  = Is                       %6.6, NULL
  void                    StVar              lW    mtable, %6.6, e2.3
  cp              %6.9  = Checkpoint                -> BB8 (default) | BB7 (if assume failed)
BB5   <- [4]
  fs              %5.0  = FrameState         R     0x56554d1e7b20+83: [%4.9], env=e2.3
  void                    Deopt              !v    %5.0   !
BB8   <- [6]
  lgl$#-          %8.0  = CheckTrueFalse     e     %6.7
  void                    Branch                   %8.0 -> BB72 (if true) | BB9 (if false)
BB7   <- [6]
  fs              %7.0  = FrameState         R     0x56554d1e7b20+150: [%6.6], env=e2.3
  void                    Deopt              !v    %7.0   !
BB72   <- [8]
  (cls|spec|blt)  %72.0 = LdFun              !v    .setupMethodsTables, e2.3
  fs              %72.1 = FrameState         R     0x56554d1e7b20+171: [%72.0], env=e2.3
  void                    Deopt              !v    %72.1, DeadCall@0x56554c30fe00[Call#3], %72.0   !
BB9   <- [8]
  val?^ | miss    %9.0  = LdVar              eR    reset, e2.3
  lgl$#-          %9.1  = IsType                   %9.0 isA lgl$-
  void                    Assume             D     %9.1, %6.9 (Typecheck@0x56554c30fe00[Type#10])
  lgl$-           %9.3  = CastType           d     dn %9.0
  lgl$-           %9.4  = Not                d     %9.3, elided
  lgl$#-          %9.5  = CheckTrueFalse     e     %9.4
  void                    Branch                   %9.5 -> BB59 (if true) | BB10 (if false)
BB59   <- [9]
  val?^ | miss    %59.0 = LdVar              eR    as.environment, e2.3
  lgl$#-          %59.1 = Identical                <blt as.environment>, %59.0   <true>
  void                    Assume             D     %59.1, %6.9 (DeadBranchReached@0x56554c30fe00[Test#0])
  val?^ | miss    %59.3 = LdVar              eR    where, e2.3
  val?            %59.4 = Force!<lazy>       !v    %59.3, e2.3   <env->
  val?            %59.5 = CallBuiltin        !v    as.environment(%59.4) e2.3   <env->
  void                    StVar              lW    env, %59.5, e2.3
  cp              %59.7 = Checkpoint                -> BB61 (default) | BB60 (if assume failed)
BB10   <- [9]
  goto BB11
BB61   <- [59]
  val?^ | miss    %61.0 = LdVar              eR    .TableMetaName, e2.3
  lgl$#-          %61.1 = Identical                %61.0, function(name, package) <(rir::DispatchTable*)|...
  void                    Assume             D     %61.1, %59.7 (CallTarget@0x56554c30fe00[Call#6])
  prom-           %61.3 = MkArg                    unboundValue, .updateMethodsInTable[0x56554db25480]_p38, e2.3
  prom-           %61.4 = MkArg                    unboundValue, .updateMethodsInTable[0x56554db25480]_p41, e2.3
  ct              %61.5 = PushContext        lCL   %61.3, %61.4, .TableMetaName(@(generic, generic), @(generic,|..., function(name, package) <(rir::DispatchTable*)|..., e2.3
  val?^           %61.6 = CastType                 up %61.4
  val?^           %61.7 = CastType                 up %61.3
  cp              %61.8 = Checkpoint                -> BB63 (default) | BB62 (if assume failed)
BB60   <- [59]
  fs              %60.0 = FrameState         R     0x56554d1e7b20+389: [], env=e2.3
  void                    Deopt              !v    %60.0   !
BB11   <- [10, 70, 71]
  cp              %11.0 = Checkpoint                -> BB13 (default) | BB12 (if assume failed)
BB63   <- [61]
  val?^ | miss    %63.0 = LdVar              eR    methodsPackageMetaName, <env 0x56554a41b378>
  lgl$#-          %63.1 = Identical                %63.0, function(prefix, name, package="") <(rir::Disp|...
  void                    Assume             D     %63.1, %61.8 (CallTarget@0x56554d529a78[Call#0])
  env             e63.3 = MkEnv              l     name=%61.7, package=%61.6, parent=<env 0x56554a41b378>, context 1
  prom-           %63.4 = MkArg                    unboundValue, .updateMethodsInTable[0x56554db25480]_p54, e63.3
  ct              %63.5 = PushContext        lCL   "T", %63.4, methodsPackageMetaName("T", paste(name, packag|..., function(prefix, name, package="") <(rir::Disp|..., e63.3
  val?^           %63.6 = CastType                 up %63.4
  cp              %63.7 = Checkpoint                -> BB65 (default) | BB64 (if assume failed)
BB62   <- [61]
  fs              %62.0 = FrameState         R     0x56554d1e7b20+426: [], env=e2.3
  env             e62.1 = (MkEnv)            l     name=%61.7, package=%61.6, parent=<env 0x56554a41b378>, context 1
  fs              %62.2 = FrameState         R     0x56554a333e10+0: [], env=e62.1, next=%62.0
  void                    Deopt              !v    %62.2   !
BB13   <- [11]
  val?^ | miss    %13.0 = LdVar              eR    length, e2.3
  lgl$#-          %13.1 = Identical                <blt length>, %13.0   <true>
  void                    Assume             D     %13.1, %11.0 (DeadBranchReached@0x56554c30fe00[Test#2])
  (cls|spec|blt)  %13.3 = LdFun              !v    @, <0x565549e13bd8>, e2.3
  prom-           %13.4 = MkArg                    unboundValue, .updateMethodsInTable[0x56554db25480]_p4, e2.3
  prom-           %13.5 = MkArg                    unboundValue, .updateMethodsInTable[0x56554db25480]_p5, e2.3
  val?            %13.6 = Call               !v    %13.3(%13.4, %13.5) e2.3   <vec->
  lgl$#-          %13.7 = IsType                   %13.6 isA val?-
  cp              %13.8 = Checkpoint                -> BB15 (default) | BB14 (if assume failed)
BB12   <- [11]
  fs              %12.0 = FrameState         R     0x56554d1e7b20+582: [], env=e2.3
  void                    Deopt              !v    %12.0   !
BB65   <- [63]
  val?^ | miss    %65.0 = LdVar              eR    .Call, <env 0x56554a41b378>
  lgl$#-          %65.1 = Identical                <blt .Call>, %65.0   <true>
  void                    Assume             D     %65.1, %63.7 (DeadBranchReached@0x56554b6a63a0[Test#0])
  val?^ | miss    %65.3 = LdVar              eR    C_R_methodsPackageMetaName, <env 0x56554a41b378>
  env             e65.4 = MkEnv              l     prefix="T", name=%63.6, package(miss)="", parent=<env 0x56554a41b378>, context 1
  val?            %65.5 = Force!<value>      !v    %65.3, e65.4   <vec>
  val?^ | miss    %65.6 = LdVar              eR    prefix, e65.4
  val?            %65.7 = Force!<value>      !v    %65.6, e65.4   <str$->
  val?^ | miss    %65.8 = LdVar              eR    name, e65.4
  val?            %65.9 = Force!<lazy>       !v    %65.8, e65.4   <str$->
  val?^ | miss    %65.10 = LdVar              eR    package, e65.4
  val?            %65.11 = Force!<lazy>       !v    %65.10, e65.4   <str$->
  val?            %65.12 = CallBuiltin        !v    .Call(%65.5, %65.7, %65.9, %65.11) e65.4   <str$->
  val?            %65.13 = PopContext         C     %65.12, %63.5   <str$->
  val?            %65.14 = PopContext         C     %65.13, %61.5   <str$->
  void                    StVar              lW    tname, %65.14, e2.3
  cp              %65.16 = Checkpoint                -> BB67 (default) | BB66 (if assume failed)
BB64   <- [63]
  fs              %64.0 = FrameState         R     0x56554d1e7b20+426: [], env=e2.3
  fs              %64.1 = FrameState         R     0x56554a333e10+37: [], env=e63.3, next=%64.0
  env             e64.2 = (MkEnv)            l     prefix="T", name=%63.6, package(miss)="", parent=<env 0x56554a41b378>, context 1
  fs              %64.3 = FrameState         R     0x56554c5944c0+0: [], env=e64.2, next=%64.1
  void                    Deopt              !v    %64.3   !
BB15   <- [13]
  void                    Assume             D     %13.7, %13.8 (Typecheck@0x56554c30fe00[Type#34])
  val?-           %15.1 = CastType           d     dn %13.6   <vec->
  (int|real)$-    %15.2 = CallSafeBuiltin    wed   length(%15.1)    <int$->
  lgl$#-          %15.3 = IsType                   %15.2 isA int$-
  cp              %15.4 = Checkpoint                -> BB17 (default) | BB16 (if assume failed)
BB14   <- [13]
  fs              %14.0 = FrameState         R     0x56554d1e7b20+679: [<blt length>, %13.6], env=e2.3
  void                    Deopt              !v    %14.0   !
BB67   <- [65]
  val?^ | miss    %67.0 = LdVar              eR    env, e2.3
  lgl$#-          %67.1 = IsType                   %67.0 isA val?~- | miss
  void                    Assume             D     %67.1, %65.16 (Typecheck@0x56554c30fe00[Type#21])
  val?~- | miss   %67.3 = CastType           d     dn %67.0
  val?-           %67.4 = Force!<value>            %67.3,    <env->
  lgl$#-          %67.5 = IsType                   %67.4 isA val+   <true>
  void                    Assume             D     %67.5, %65.16 (DeadBranchReached@0x56554c30fe00[Test#1])
  val             %67.7 = ChkMissing         e     %65.14
  lgl$#-          %67.8 = IsType                   %67.7 isA val?~- | miss
  void                    Assume             D     %67.8, %65.16 (Typecheck@0x56554c30fe00[Type#23])
  val-            %67.10 = CastType           d     dn %67.7   <str$->
  val?            %67.11 = Extract2_1D        wed   %67.4, %67.10, elided   <(nil|env)->
  lgl$-           %67.12 = Is                       %67.11, NULL
  void                    StVar              lW    tt, %67.11, e2.3
  cp              %67.14 = Checkpoint                -> BB69 (default) | BB68 (if assume failed)
BB66   <- [65]
  fs              %66.0 = FrameState         R     0x56554d1e7b20+440: [], env=e2.3
  void                    Deopt              !v    %66.0   !
BB17   <- [15]
  void                    Assume             D     %15.3, %15.4 (Typecheck@0x56554c30fe00[Type#35])
  int$-           %17.1 = CastType           d     dn %15.2
  lgl$#-          %17.2 = CheckTrueFalse     e     %17.1
  void                    Branch                   %17.2 -> BB42 (if true) | BB18 (if false)
BB16   <- [15]
  fs              %16.0 = FrameState         R     0x56554d1e7b20+701: [%15.2], env=e2.3
  void                    Deopt              !v    %16.0   !
BB69   <- [67]
  lgl$-           %69.0 = Not                d     %67.12, elided
  lgl$#-          %69.1 = CheckTrueFalse     e     %69.0
  void                    Branch                   %69.1 -> BB71 (if true) | BB70 (if false)
BB68   <- [67]
  fs              %68.0 = FrameState         R     0x56554d1e7b20+517: [%67.11], env=e2.3
  void                    Deopt              !v    %68.0   !
BB42   <- [17]
  val?^ | miss    %42.0 = LdVar              eR    as.list, e2.3
  lgl$#-          %42.1 = Identical                %42.0, function(x, ...) <(rir::DispatchTable*)0x56554|...
  void                    Assume             D     %42.1, %15.4 (CallTarget@0x56554c30fe00[Call#13])
  (cls|spec|blt)  %42.3 = LdFun              !v    @, <0x565549e13bd8>, e2.3
  prom-           %42.4 = MkArg                    unboundValue, .updateMethodsInTable[0x56554db25480]_p30, e2.3
  prom-           %42.5 = MkArg                    unboundValue, .updateMethodsInTable[0x56554db25480]_p31, e2.3
  val?            %42.6 = Call               !v    %42.3(%42.4, %42.5) e2.3   <vec$->
  val?            %42.7 = StaticCall         !v    as.list[0x56554e982210](%42.6) { 0 } e2.3   <vec$->
  void                    StVar              lW    groups, %42.7, e2.3
  cp              %42.9 = Checkpoint                -> BB44 (default) | BB43 (if assume failed)
BB18   <- [17]
  goto BB19
BB71   <- [69]
  val?^ | miss    %71.0 = LdVar              eR    .mergeMethodsTable, e2.3
  lgl$#-          %71.1 = Identical                %71.0, function(generic, table, newtable, add=TRUE) <|...
  void                    Assume             D     %71.1, %67.14 (CallTarget@0x56554c30fe00[Call#9])
  prom-           %71.3 = MkArg                    unboundValue, .updateMethodsInTable[0x56554db25480]_p44, e2.3
  prom-           %71.4 = MkArg                    unboundValue, .updateMethodsInTable[0x56554db25480]_p45, e2.3
  prom-           %71.5 = MkArg                    unboundValue, .updateMethodsInTable[0x56554db25480]_p46 (!refl), e2.3
  prom-           %71.6 = MkArg                    unboundValue, .updateMethodsInTable[0x56554db25480]_p47, e2.3
  val?            %71.7 = Call               !v    function(generic, table, newtable, add=TRUE) <|...(%71.3, %71.4, %71.5, %71.6) e2.3
  goto BB11
BB70   <- [69]
  goto BB11
BB44   <- [42]
  val?^ | miss    %44.0 = LdVar              eR    vector, e2.3
  lgl$#-          %44.1 = Identical                %44.0, function(mode="logical", length=0L) <(rir::Dis|...
  void                    Assume             D     %44.1, %42.9 (CallTarget@0x56554c30fe00[Call#15])
  val?^ | miss    %44.3 = LdVar              eR    length, e2.3
  lgl$#-          %44.4 = Identical                %44.3, <blt length>
  void                    Assume             D     %44.4, %42.9 (CallTarget@0x56554c30fe00[Call#16])
  val             %44.6 = ChkMissing         e     %42.7
  lgl$#-          %44.7 = IsType                   %44.6 isA val?~- | miss
  void                    Assume             D     %44.7, %42.9 (Typecheck@0x56554c30fe00[Type#40])
  val-            %44.9 = CastType           d     dn %44.6   <vec$->
  (int|real)$-    %44.10 = CallSafeBuiltin    wed   length(%44.9)    <int$->
  lgl$#-          %44.11 = IsType                   %44.10 isA int$-
  cp              %44.12 = Checkpoint                -> BB46 (default) | BB45 (if assume failed)
BB43   <- [42]
  fs              %43.0 = FrameState         R     0x56554d1e7b20+763: [], env=e2.3
  void                    Deopt              !v    %43.0   !
BB19   <- [18, 58]
  cp              %19.0 = Checkpoint                -> BB21 (default) | BB20 (if assume failed)
BB46   <- [44]
  void                    Assume             D     %44.11, %44.12 (Typecheck@0x56554c30fe00[Type#41])
  int$-           %46.1 = CastType           d     dn %44.10
  vec-            %46.2 = CallSafeBuiltin    wed   vector("list", %46.1)    <vec$->
  void                    StVar              lW    generics, %46.2, e2.3
  cp              %46.4 = Checkpoint                -> BB48 (default) | BB47 (if assume failed)
BB45   <- [44]
  fs              %45.0 = FrameState         R     0x56554d1e7b20+800: [], env=e2.3
  prom-           %45.1 = MkArg                    unboundValue, .updateMethodsInTable[0x56554db25480]_p32, e2.3
  val?^           %45.2 = CastType                 up %45.1
  env             e45.3 = (MkEnv)            l     length=%45.2, mode="list", parent=R_BaseNamespace, context 0
  fs              %45.4 = FrameState         R     0x56554bd16400+23: ["list"], env=e45.3, next=%45.0
  fs              %45.5 = FrameState         R     0x56554de0d840+32(pr): [%44.10], env=e2.3, next=%45.4
  void                    Deopt              !v    %45.5   !
BB21   <- [19]
  val?^ | miss    %21.0 = LdVar              eR    is, e2.3
  lgl$#-          %21.1 = Identical                %21.0, function(object, class2) <(rir::DispatchTable*|...
  void                    Assume             D     %21.1, %19.0 (CallTarget@0x56554c30fe00[Call#21])
  prom-           %21.3 = MkArg                    unboundValue, .updateMethodsInTable[0x56554db25480]_p6, e2.3
  val?            %21.4 = Call               !v    function(object, class2) <(rir::DispatchTable*|...(%21.3, "groupGenericFunction") e2.3   <lgl$->
  lgl$#-          %21.5 = IsType                   %21.4 isA lgl$-
  cp              %21.6 = Checkpoint                -> BB23 (default) | BB22 (if assume failed)
BB20   <- [19]
  fs              %20.0 = FrameState         R     0x56554d1e7b20+1177: [], env=e2.3
  void                    Deopt              !v    %20.0   !
BB48   <- [46]
  val?^ | miss    %48.0 = LdVar              eR    seq_along, e2.3
  lgl$#-          %48.1 = Identical                <blt seq_along>, %48.0   <true>
  void                    Assume             D     %48.1, %46.4 (DeadBranchReached@0x56554c30fe00[Test#3])
  val?            %48.3 = CallBuiltin        !v    seq_along(%44.9) e2.3   <int$->
  lgl$#-          %48.4 = IsType                   %48.3 isA int$-
  cp              %48.5 = Checkpoint                -> BB50 (default) | BB49 (if assume failed)
BB47   <- [46]
  fs              %47.0 = FrameState         R     0x56554d1e7b20+814: [], env=e2.3
  void                    Deopt              !v    %47.0   !
BB23   <- [21]
  void                    Assume             D     %21.5, %21.6 (Typecheck@0x56554c30fe00[Type#63])
  lgl$-           %23.1 = CastType           d     dn %21.4
  lgl$#-          %23.2 = CheckTrueFalse     e     %23.1
  void                    Branch                   %23.2 -> BB30 (if true) | BB24 (if false)
BB22   <- [21]
  fs              %22.0 = FrameState         R     0x56554d1e7b20+1214: [%21.4], env=e2.3
  void                    Deopt              !v    %22.0   !
BB50   <- [48]
  void                    Assume             D     %48.4, %48.5 (Typecheck@0x56554c30fe00[Type#45])
  int$-           %50.1 = CastType           d     dn %48.3
  int$-           %50.2 = Inc                      0L
  lgl$-           %50.3 = Lt                 d     1L, %50.2, elided   <false>
  lgl$#-          %50.4 = Identical                %50.3, true
  void                    AssumeNot          D     %50.4, %48.5 (DeadBranchReached@0x56554c30fe00[Test#4])
  int$-           %50.6 = Extract2_1D        wed   %50.1, %50.2, elided
  void                    StVar              lW    i, %50.6, e2.3
  cp              %50.8 = Checkpoint                -> BB52 (default) | BB51 (if assume failed)
BB49   <- [48]
  fs              %49.0 = FrameState         R     0x56554d1e7b20+905: [%48.3], env=e2.3
  void                    Deopt              !v    %49.0   !
BB30   <- [23]
  val?^ | miss    %30.0 = LdVar              eR    .checkGroupSigLength, e2.3
  lgl$#-          %30.1 = Identical                %30.0, function(gnames, generics=lapply(gnames, getGe|...
  void                    Assume             D     %30.1, %21.6 (CallTarget@0x56554c30fe00[Call#22])
  prom-           %30.3 = MkArg                    unboundValue, .updateMethodsInTable[0x56554db25480]_p9, e2.3
  prom-           %30.4 = MkArg                    unboundValue, .updateMethodsInTable[0x56554db25480]_p13, e2.3
  val?            %30.5 = Call               !v    function(gnames, generics=lapply(gnames, getGe|...(%30.3, %30.4) e2.3
  cp              %30.6 = Checkpoint                -> BB32 (default) | BB31 (if assume failed)
BB24   <- [23]
  goto BB25
BB52   <- [50]
  val?^ | miss    %52.0 = LdVar              eR    getGeneric, e2.3
  lgl$#-          %52.1 = Identical                %52.0, function(f, mustFind=FALSE, where, package="")|...
  void                    Assume             D     %52.1, %50.8 (CallTarget@0x56554c30fe00[Call#18])
  prom-           %52.3 = MkArg                    unboundValue, .updateMethodsInTable[0x56554db25480]_p34, e2.3
  val?            %52.4 = StaticCall         !v    getGeneric[0x56554de5a0e0](%52.3) e2.3   <cls>
  cp              %52.5 = Checkpoint                -> BB54 (default) | BB53 (if assume failed)
BB51   <- [50]
  fs              %51.0 = FrameState         R     0x56554d1e7b20+950: [%50.1, 1L, %50.2], env=e2.3
  void                    Deopt              !v    %51.0   !
BB32   <- [30]
  val?^ | miss    %32.0 = LdVar              eR    getGroupMembers, e2.3
  lgl$#-          %32.1 = Identical                %32.0, function(group, recursive=FALSE, character=TRU|...
  void                    Assume             D     %32.1, %30.6 (CallTarget@0x56554c30fe00[Call#26])
  prom-           %32.3 = MkArg                    unboundValue, .updateMethodsInTable[0x56554db25480]_p15, e2.3
  val?            %32.4 = StaticCall         !v    getGroupMembers[0x56554dd6e7b0](%32.3) e2.3   <str->
  cp              %32.5 = Checkpoint                -> BB34 (default) | BB33 (if assume failed)
BB31   <- [30]
  fs              %31.0 = FrameState         R     0x56554d1e7b20+1267: [%30.5], env=e2.3
  void                    Deopt              !v    %31.0   !
BB25   <- [24, 41]
  cp              %25.0 = Checkpoint                -> BB27 (default) | BB26 (if assume failed)
BB54   <- [52]
  val?^ | miss    %54.0 = LdVar              eR    generics !upd, e2.3
  lgl$#-          %54.1 = IsType                   %54.0 isA val?~- | miss
  void                    Assume             D     %54.1, %52.5 (Typecheck@0x56554c30fe00[Type#51])
  val?~- | miss   %54.3 = CastType           d     dn %54.0
  val?-           %54.4 = Force!<value>            %54.3,    <vec$->
  val?^ | miss    %54.5 = LdVar              eR    i, e2.3
  lgl$#-          %54.6 = IsType                   %54.5 isA int$-
  void                    Assume             D     %54.6, %52.5 (Typecheck@0x56554c30fe00[Type#52])
  int$-           %54.8 = CastType           d     dn %54.5
  val?            %54.9 = Subassign2_1D      !v    %52.4, %54.4, %54.8, e2.3
  void                    StVar              lW    generics, %54.9, e2.3
  cp              %54.11 = Checkpoint                -> BB56 (default) | BB55 (if assume failed)
BB53   <- [52]
  fs              %53.0 = FrameState         R     0x56554d1e7b20+982: [%50.1, 1L, %50.2, %52.4], env=e2.3
  void                    Deopt              !v    %53.0   !
BB34   <- [32]
  val?+           %34.0 = ToForSeq           e     %32.4
  int$-           %34.1 = Length                   %34.0
  int$-           %34.2 = Inc                      0L
  lgl$-           %34.3 = Lt                 d     %34.1, %34.2, elided   <false>
  lgl$#-          %34.4 = Identical                %34.3, true
  void                    AssumeNot          D     %34.4, %32.5 (DeadBranchReached@0x56554c30fe00[Test#7])
  val?            %34.6 = Extract2_1D        wed   %34.0, %34.2, elided
  void                    StVar              lW    g, %34.6, e2.3
  cp              %34.8 = Checkpoint                -> BB36 (default) | BB35 (if assume failed)
BB33   <- [32]
  fs              %33.0 = FrameState         R     0x56554d1e7b20+1300: [%32.4], env=e2.3
  void                    Deopt              !v    %33.0   !
BB27   <- [25]
  val?^ | miss    %27.0 = LdVar              eR    .resetInheritedMethods, e2.3
  lgl$#-          %27.1 = Identical                %27.0, function(fenv, mtable) <(rir::DispatchTable*)0|...
  void                    Assume             D     %27.1, %25.0 (CallTarget@0x56554c30fe00[Call#31])
  prom-           %27.3 = MkArg                    unboundValue, .updateMethodsInTable[0x56554db25480]_p7, e2.3
  prom-           %27.4 = MkArg                    unboundValue, .updateMethodsInTable[0x56554db25480]_p8, e2.3
  val?            %27.5 = StaticCall         !v    .resetInheritedMethods[0x56554dd79620](%27.3, %27.4) e2.3
  cp              %27.6 = Checkpoint                -> BB29 (default) | BB28 (if assume failed)
BB26   <- [25]
  fs              %26.0 = FrameState         R     0x56554d1e7b20+1470: [], env=e2.3
  void                    Deopt              !v    %26.0   !
BB56   <- [54]
  int$-           %56.0 = Inc                      %50.2
  lgl$-           %56.1 = Lt                 d     1L, %56.0, elided
  lgl$#-          %56.2 = Identical                %56.1, true
  void                    Branch                   %56.2 -> BB58 (if true) | BB57 (if false)
BB55   <- [54]
  fs              %55.0 = FrameState         R     0x56554d1e7b20+1025: [%50.1, 1L, %50.2], env=e2.3
  void                    Deopt              !v    %55.0   !
BB36   <- [34]
  val?^ | miss    %36.0 = LdVar              eR    .updateMethodsInTable, e2.3
  lgl$#-          %36.1 = Identical                %36.0, function(generic, where, attach) <(rir::Dispat|...
  void                    Assume             D     %36.1, %34.8 (CallTarget@0x56554c30fe00[Call#27])
  prom-           %36.3 = MkArg                    unboundValue, .updateMethodsInTable[0x56554db25480]_p16, e2.3
  prom-           %36.4 = MkArg                    unboundValue, .updateMethodsInTable[0x56554db25480]_p18, e2.3
  prom-           %36.5 = MkArg                    unboundValue, .updateMethodsInTable[0x56554db25480]_p19, e2.3
  val?            %36.6 = StaticCall         !v    .updateMethodsInTable[0x56554db25480](%36.3, %36.4, %36.5) e2.3
  goto BB37
BB35   <- [34]
  fs              %35.0 = FrameState         R     0x56554d1e7b20+1345: [%34.0, %34.1, %34.2], env=e2.3
  void                    Deopt              !v    %35.0   !
BB29   <- [27]
  val?^ | miss    %29.0 = LdVar              eR    mtable, e2.3
  lgl$#-          %29.1 = IsType                   %29.0 isA val?~- | miss
  void                    Assume             D     %29.1, %27.6 (Typecheck@0x56554c30fe00[Type#82])
  val?~- | miss   %29.3 = CastType           d     dn %29.0
  void                    Visible            v     
  val?-           %29.5 = Force!<value>            %29.3,    <env->
  void                    Return             l     %29.5
BB28   <- [27]
  fs              %28.0 = FrameState         R     0x56554d1e7b20+1507: [%27.5], env=e2.3
  void                    Deopt              !v    %28.0   !
BB58   <- [56]
  val?^ | miss    %58.0 = LdVar              eR    .checkGroupSigLength, e2.3
  lgl$#-          %58.1 = Identical                %58.0, function(gnames, generics=lapply(gnames, getGe|...
  void                    Assume             D     %58.1, %54.11 (CallTarget@0x56554c30fe00[Call#20])
  prom-           %58.3 = MkArg                    unboundValue, .updateMethodsInTable[0x56554db25480]_p36, e2.3
  prom-           %58.4 = MkArg                    unboundValue, .updateMethodsInTable[0x56554db25480]_p37 (!refl), e2.3
  val?            %58.5 = Call               !v    function(gnames, generics=lapply(gnames, getGe|...(%58.3, %58.4) e2.3
  goto BB19
BB57   <- [56]
  int$-           %57.0 = Extract2_1D        wed   %50.1, %56.0, elided
  void                    StVar              lW    i, %57.0, e2.3
  (cls|spec|blt)  %57.2 = LdFun              !v    getGeneric, e2.3
  fs              %57.3 = FrameState         R     0x56554d1e7b20+1059: [%50.1, 1L, %56.0, %57.2], env=e2.3
  void                    Deopt              !v    %57.3, DeadCall@0x56554c30fe00[Call#19], %57.2   !
BB37   <- [36, 40]
  int$-           %37.0 = Phi                      %34.2:BB36, %37.1:BB40
  int$-           %37.1 = Inc                      %37.0
  lgl$-           %37.2 = Lt                 d     %34.1, %37.1, elided
  lgl$#-          %37.3 = Identical                %37.2, true
  void                    Branch                   %37.3 -> BB41 (if true) | BB38 (if false)
BB41   <- [37]
  goto BB25
BB38   <- [37]
  val?            %38.0 = Extract2_1D        wed   %34.0, %37.1, elided
  void                    StVar              lW    g, %38.0, e2.3
  cp              %38.2 = Checkpoint                -> BB40 (default) | BB39 (if assume failed)
BB40   <- [38]
  val?^ | miss    %40.0 = LdVar              eR    .updateMethodsInTable, e2.3
  lgl$#-          %40.1 = Identical                %40.0, function(generic, where, attach) <(rir::Dispat|...
  void                    Assume             D     %40.1, %38.2 (CallTarget@0x56554c30fe00[Call#29])
  prom-           %40.3 = MkArg                    unboundValue, .updateMethodsInTable[0x56554db25480]_p20, e2.3
  prom-           %40.4 = MkArg                    unboundValue, .updateMethodsInTable[0x56554db25480]_p22, e2.3
  prom-           %40.5 = MkArg                    unboundValue, .updateMethodsInTable[0x56554db25480]_p23, e2.3
  val?            %40.6 = StaticCall         !v    .updateMethodsInTable[0x56554db25480](%40.3, %40.4, %40.5) e2.3
  goto BB37
BB39   <- [38]
  fs              %39.0 = FrameState         R     0x56554d1e7b20+1417: [%34.0, %34.1, %37.1], env=e2.3
  void                    Deopt              !v    %39.0   !
Prom 0:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    generic, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <cls>
  void                    Return             l     %1.3
Prom 1:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    attach, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <lgl$->
  void                    Return             l     %1.3
Prom 2:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    fenv, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <env->
  void                    Return             l     %1.3
Prom 3:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    .MTable, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 4:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    generic, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 5:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    group, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 6:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    generic, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <cls>
  void                    Return             l     %1.3
Prom 7:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    fenv, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <env->
  void                    Return             l     %1.3
Prom 8:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    mtable, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <env->
  void                    Return             l     %1.3
Prom 9:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     list, <0x565549e285c0>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, .updateMethodsInTable[0x56554db25480]_p10, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <vec$->
  void                    Return             l     %1.3
Prom 10:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     @, <0x565549e13bd8>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, .updateMethodsInTable[0x56554db25480]_p11, e1.0
  prom-           %1.3  = MkArg                    unboundValue, .updateMethodsInTable[0x56554db25480]_p12, e1.0
  val?            %1.4  = Call               !     %1.1(%1.2, %1.3) e1.0   <str$+>
  void                    Return             l     %1.4
Prom 11:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    generic, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 12:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    generic, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 13:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     list, <0x565549e285c0>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, .updateMethodsInTable[0x56554db25480]_p14, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <vec$->
  void                    Return             l     %1.3
Prom 14:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    generic, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <cls>
  void                    Return             l     %1.3
Prom 15:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    generic, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <cls>
  void                    Return             l     %1.3
Prom 16:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     getGeneric, <0x56554a5f48d8>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, .updateMethodsInTable[0x56554db25480]_p17, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <cls>
  void                    Return             l     %1.3
Prom 17:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    g, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 18:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    where, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <env->
  void                    Return             l     %1.3
Prom 19:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    attach, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <lgl$->
  void                    Return             l     %1.3
Prom 20:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     getGeneric, <0x56554a5f48d8>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, .updateMethodsInTable[0x56554db25480]_p21, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <cls>
  void                    Return             l     %1.3
Prom 21:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    g, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 22:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    where, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <env->
  void                    Return             l     %1.3
Prom 23:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    attach, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <lgl$->
  void                    Return             l     %1.3
Prom 30:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    generic, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 31:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    group, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 32:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     length, <0x565549e14a90>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, .updateMethodsInTable[0x56554db25480]_p33, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <int$->
  void                    Return             l     %1.3
Prom 33:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    groups, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <vec$->
  void                    Return             l     %1.3
Prom 34:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    groups, e1.0
  val?            %1.2  = Force<value>       !v    %1.1, e1.0   <vec$->
  lgl$#-          %1.3  = IsType                   %1.2 isA val+   <true>
  void                    Branch                   %1.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [1]
  val?^ | miss    %2.0  = LdVar              eR    i, e1.0
  val?            %2.1  = Force<value>       !v    %2.0, e1.0   <int$->
  goto BB3
BB4   <- [1]
  prom-           %4.0  = MkArg                    unboundValue, .updateMethodsInTable[0x56554db25480]_p35, e1.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.1:BB2, %4.0:BB4
  val?            %3.1  = Extract2_1D        !v    %1.2, %3.0, e1.0   <str$->
  void                    Visible            v     
  void                    Return             l     %3.1
Prom 35:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    i, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 36:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    groups, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <vec$->
  void                    Return             l     %1.3
Prom 37:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    generics, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <vec$->
  void                    Return             l     %1.3
Prom 38:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     @, <0x565549e13bd8>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, .updateMethodsInTable[0x56554db25480]_p39, e1.0
  prom-           %1.3  = MkArg                    unboundValue, .updateMethodsInTable[0x56554db25480]_p40, e1.0
  val?            %1.4  = Call               !     %1.1(%1.2, %1.3) e1.0   <str$+>
  void                    Return             l     %1.4
Prom 39:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    generic, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 40:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    generic, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 41:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     @, <0x565549e13bd8>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, .updateMethodsInTable[0x56554db25480]_p42, e1.0
  prom-           %1.3  = MkArg                    unboundValue, .updateMethodsInTable[0x56554db25480]_p43, e1.0
  val?            %1.4  = Call               !     %1.1(%1.2, %1.3) e1.0   <str$->
  void                    Return             l     %1.4
Prom 42:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    generic, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 43:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    package, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 44:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    generic, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <cls>
  void                    Return             l     %1.3
Prom 45:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    mtable, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <env->
  void                    Return             l     %1.3
Prom 46:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    tt, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <env->
  void                    Return             l     %1.3
Prom 47:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    attach, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <lgl$->
  void                    Return             l     %1.3
Prom 54:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     paste, <0x56554a10ada8>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, .updateMethodsInTable[0x56554db25480]_p55, e1.0
  prom-           %1.3  = MkArg                    unboundValue, .updateMethodsInTable[0x56554db25480]_p56, e1.0
  val?            %1.4  = NamedCall          !     %1.1(%1.2, %1.3, sep=":") e1.0   <str$->
  void                    Return             l     %1.4
Prom 55:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    name, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <str$+>
  void                    Return             l     %1.3
Prom 56:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    package, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3

│ .updateMethodsInTable[0x56554db25480]                                        │
└──────────────────────────────────────────────────────────────────────────────┘
