
┌──────────────────────────────────────────────────────────────────────────────┐
│ .recacheSubclasses[0x560398df1f40]                                           │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;NonRefl1,NonRefl2                    │
│ Properties:                                                                  │
├────── PIR Version After Optimizations
.recacheSubclasses[0x560398df1f40]
BB0
  goto BB1
BB1   <- [0]
  val?^           %1.0  = LdArg                    2
  val?^           %1.1  = LdArg                    1
  val?^           %1.2  = LdArg                    0
  env             e1.3  = MkEnv              l     class=%1.2, def=%1.1, env=%1.0, parent=<env 0x560396017378>, context 1
  (cls|spec|blt)  %1.4  = LdFun              !v    @, <0x560395a0fbd8>, <env 0x560396017378>
  prom-           %1.5  = MkArg                    unboundValue, .recacheSubclasses[0x560398df1f40]_p0 (!refl), e1.3
  prom-           %1.6  = MkArg                    unboundValue, .recacheSubclasses[0x560398df1f40]_p1, e1.3
  val?            %1.7  = Call               !v    %1.4(%1.5, %1.6) e1.3   <vec+>
  void                    StVar              lW    subs, %1.7, e1.3
  lgl$#-          %1.9  = IsType                   %1.7 isA val?+
  cp              %1.10 = Checkpoint                -> BB2 (default) | BB104 (if assume failed)
BB2   <- [1]
  val?^ | miss    %2.0  = LdVar              eR    names, e1.3
  lgl$#-          %2.1  = Identical                <blt names>, %2.0   <true>
  void                    Assume             D     %2.1, %1.10 (DeadBranchReached@0x560398400550[Test#0])
  val             %2.3  = ChkMissing         e     %1.7
  void                    Assume             D     %1.9, %1.10 (Typecheck@0x560398400550[Type#2])
  val?+           %2.5  = CastType           d     dn %1.7   <vec+>
  val+            %2.6  = CallSafeBuiltin    wed   names(%2.5)    <str->
  void                    StVar              lW    subNames, %2.6, e1.3
  cp              %2.8  = Checkpoint                -> BB4 (default) | BB3 (if assume failed)
BB104   <- [1]
  fs              %104.0 = FrameState         R     0x560398ca1bd0+51: [], env=e1.3
  void                    Deopt              !v    %104.0   !
BB4   <- [2]
  val?^ | miss    %4.0  = LdVar              eR    seq_along, e1.3
  lgl$#-          %4.1  = Identical                <blt seq_along>, %4.0   <true>
  void                    Assume             D     %4.1, %2.8 (DeadBranchReached@0x560398400550[Test#1])
  val?            %4.3  = CallBuiltin        !v    seq_along(%2.5) e1.3   <int->
  cp              %4.4  = Checkpoint                -> BB6 (default) | BB5 (if assume failed)
BB3   <- [2]
  fs              %3.0  = FrameState         R     0x560398ca1bd0+156: [], env=e1.3
  void                    Deopt              !v    %3.0   !
BB6   <- [4]
  val?+           %6.0  = ToForSeq           e     %4.3
  int$-           %6.1  = Length                   %6.0
  int$-           %6.2  = Inc                      0L
  lgl$-           %6.3  = Lt                 d     %6.1, %6.2, elided   <false>
  lgl$#-          %6.4  = Identical                %6.3, true
  void                    AssumeNot          D     %6.4, %4.4 (DeadBranchReached@0x560398400550[Test#2])
  val?            %6.6  = Extract2_1D        wed   %6.0, %6.2, elided
  void                    StVar              lW    i, %6.6, e1.3
  cp              %6.8  = Checkpoint                -> BB8 (default) | BB7 (if assume failed)
BB5   <- [4]
  fs              %5.0  = FrameState         R     0x560398ca1bd0+247: [%4.3], env=e1.3
  void                    Deopt              !v    %5.0   !
BB8   <- [6]
  val?^ | miss    %8.0  = LdVar              eR    subNames, e1.3
  lgl$#-          %8.1  = IsType                   %8.0 isA val?~- | miss
  void                    Assume             D     %8.1, %6.8 (Typecheck@0x560398400550[Type#9])
  val?~- | miss   %8.3  = CastType           d     dn %8.0
  val?-           %8.4  = Force!<value>            %8.3,    <str->
  lgl$#-          %8.5  = IsType                   %8.4 isA val+   <true>
  void                    Assume             D     %8.5, %6.8 (DeadBranchReached@0x560398400550[Test#3])
  val             %8.7  = ChkMissing         e     %6.6
  lgl$#-          %8.8  = IsType                   %8.7 isA int$-
  void                    Assume             D     %8.8, %6.8 (Typecheck@0x560398400550[Type#11])
  int$-           %8.10 = CastType           d     dn %8.7
  val?            %8.11 = Extract2_1D        wed   %8.4, %8.10, elided   <str$->
  void                    StVar              lW    what, %8.11, e1.3
  cp              %8.13 = Checkpoint                -> BB10 (default) | BB9 (if assume failed)
BB7   <- [6]
  fs              %7.0  = FrameState         R     0x560398ca1bd0+292: [%6.0, %6.1, %6.2], env=e1.3
  void                    Deopt              !v    %7.0   !
BB10   <- [8]
  val?^ | miss    %10.0 = LdVar              eR    getClassDef, e1.3
  lgl$#-          %10.1 = Identical                %10.0, function(Class, where=topenv(parent.frame()), |...
  void                    Assume             D     %10.1, %8.13 (CallTarget@0x560398400550[Call#3])
  prom-           %10.3 = MkArg                    unboundValue, .recacheSubclasses[0x560398df1f40]_p2 (!refl), e1.3
  prom-           %10.4 = MkArg                    unboundValue, .recacheSubclasses[0x560398df1f40]_p3, e1.3
  val?            %10.5 = StaticCall         !v    getClassDef[0x560397fdead0](%10.3, missingArg, %10.4) { 0 2n } e1.3   <other>
  lgl$-           %10.6 = Is                       %10.5, NULL
  void                    StVar              lW    subDef, %10.5, e1.3
  cp              %10.8 = Checkpoint                -> BB12 (default) | BB11 (if assume failed)
BB9   <- [8]
  fs              %9.0  = FrameState         R     0x560398ca1bd0+367: [%6.0, %6.1, %6.2], env=e1.3
  void                    Deopt              !v    %9.0   !
BB12   <- [10]
  val             %12.0 = ChkMissing         e     %10.5
  lgl$#-          %12.1 = CheckTrueFalse     e     %10.6
  void                    Branch                   %12.1 -> BB103 (if true) | BB13 (if false)
BB11   <- [10]
  fs              %11.0 = FrameState         R     0x560398ca1bd0+426: [%6.0, %6.1, %6.2], env=e1.3
  void                    Deopt              !v    %11.0   !
BB103   <- [12]
  (cls|spec|blt)  %103.0 = LdFun              !v    getClassDef, e1.3
  fs              %103.1 = FrameState         R     0x560398ca1bd0+461: [%6.0, %6.1, %6.2, %103.0], env=e1.3
  void                    Deopt              !v    %103.1, DeadCall@0x560398400550[Call#5], %103.0   !
BB13   <- [12]
  val?^ | miss    %13.0 = LdVar              eR    is.na, e1.3
  lgl$#-          %13.1 = Identical                <blt is.na>, %13.0   <true>
  void                    Assume             D     %13.1, %10.8 (DeadBranchReached@0x560398400550[Test#5])
  val?^ | miss    %13.3 = LdVar              eR    match, e1.3
  lgl$#-          %13.4 = Identical                %13.3, function(x, table, nomatch=NA, incomparables=N|...
  void                    Assume             D     %13.4, %10.8 (CallTarget@0x560398400550[Call#10])
  val?^ | miss    %13.6 = LdVar              eR    what, e1.3
  lgl$#-          %13.7 = IsType                   %13.6 isA val?~- | miss
  void                    Assume             D     %13.7, %10.8 (Typecheck@0x560398400550[Type#31])
  val?~- | miss   %13.9 = CastType           d     dn %13.6
  val?-           %13.10 = Force!<value>            %13.9,    <str$->
  val?^ | miss    %13.11 = LdVar              eR    names, e1.3
  lgl$#-          %13.12 = Identical                %13.11, <blt names>
  void                    Assume             D     %13.12, %10.8 (CallTarget@0x560398400550[Call#11])
  (cls|spec|blt)  %13.14 = LdFun              !v    @, <0x560395a0fbd8>, e1.3
  prom-           %13.15 = MkArg                    unboundValue, .recacheSubclasses[0x560398df1f40]_p6, e1.3
  prom-           %13.16 = MkArg                    unboundValue, .recacheSubclasses[0x560398df1f40]_p7, e1.3
  val?            %13.17 = Call               !v    %13.14(%13.15, %13.16) e1.3   <vec+>
  val?            %13.18 = CallBuiltin        !v    names(%13.17) e1.3   <str->
  lgl$#-          %13.19 = IsType                   %13.18 isA val?-
  cp              %13.20 = Checkpoint                -> BB15 (default) | BB14 (if assume failed)
BB15   <- [13]
  void                    Assume             D     %13.19, %13.20 (Typecheck@0x560395d1db30[Type#1])
  val?-           %15.1 = CastType           d     dn %13.18   <str->
  val+            %15.2 = CallSafeBuiltin    wed   match(%13.10, %15.1, NA, nil)    <int$->
  lgl$#-          %15.3 = IsType                   %15.2 isA int$-
  cp              %15.4 = Checkpoint                -> BB17 (default) | BB16 (if assume failed)
BB14   <- [13]
  fs              %14.0 = FrameState         R     0x560398ca1bd0+629: [%6.0, %6.1, %6.2, <blt is.na>], env=e1.3
  prom-           %14.1 = MkArg                    unboundValue, .recacheSubclasses[0x560398df1f40]_p8, e1.3
  val?^           %14.2 = CastType                 up %14.1
  prom-           %14.3 = MkArg                    %13.10, .recacheSubclasses[0x560398df1f40]_p12 (!refl), e1.3
  val?~           %14.4 = CastType                 up %14.3
  env             e14.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%14.2, x=%14.4, parent=R_BaseNamespace, context 0
  fs              %14.6 = FrameState         R     0x560396545d70+23: [%13.10], env=e14.5, next=%14.0
  fs              %14.7 = FrameState         R     0x560398c97830+32(pr): [%13.18], env=e1.3, next=%14.6
  void                    Deopt              !v    %14.7   !
BB17   <- [15]
  void                    Assume             D     %15.3, %15.4 (Typecheck@0x560398400550[Type#36])
  int$-           %17.1 = CastType           d     dn %15.2
  lgl$-           %17.2 = CallSafeBuiltin    wed   is.na(%17.1)    <lgl$->
  lgl$#-          %17.3 = CheckTrueFalse     e     %17.2
  void                    Branch                   %17.3 -> BB92 (if true) | BB18 (if false)
BB16   <- [15]
  fs              %16.0 = FrameState         R     0x560398ca1bd0+629: [%6.0, %6.1, %6.2, <blt is.na>], env=e1.3
  prom-           %16.1 = MkArg                    %15.1, .recacheSubclasses[0x560398df1f40]_p13 (!refl), e1.3
  val?~           %16.2 = CastType                 up %16.1
  prom-           %16.3 = MkArg                    %13.10, .recacheSubclasses[0x560398df1f40]_p17 (!refl), e1.3
  val?~           %16.4 = CastType                 up %16.3
  env             e16.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%16.2, x=%16.4, parent=R_BaseNamespace, context 0
  fs              %16.6 = FrameState         R     0x560396545d70+69: [%15.2], env=e16.5, next=%16.0
  void                    Deopt              !v    %16.6   !
BB92   <- [17]
  (cls|spec|blt)  %92.0 = LdFun              !v    @, <0x560395a0fbd8>, e1.3
  prom-           %92.1 = MkArg                    unboundValue, .recacheSubclasses[0x560398df1f40]_p18, e1.3
  prom-           %92.2 = MkArg                    unboundValue, .recacheSubclasses[0x560398df1f40]_p19, e1.3
  val?            %92.3 = Call               !v    %92.0(%92.1, %92.2) e1.3   <vec+>
  void                    StVar              lW    cntns, %92.3, e1.3
  cp              %92.5 = Checkpoint                -> BB94 (default) | BB93 (if assume failed)
BB18   <- [17]
  goto BB19
BB94   <- [92]
  val?^ | miss    %94.0 = LdVar              eR    subs, e1.3
  lgl$#-          %94.1 = IsType                   %94.0 isA val?~+ | miss
  void                    Assume             D     %94.1, %92.5 (Typecheck@0x560398400550[Type#41])
  val?~+ | miss   %94.3 = CastType           d     dn %94.0
  val?+           %94.4 = Force!<value>            %94.3,    <vec+>
  lgl$#-          %94.5 = IsType                   %94.4 isA val+   <true>
  void                    Assume             D     %94.5, %92.5 (DeadBranchReached@0x560398400550[Test#6])
  val?^ | miss    %94.7 = LdVar              eR    i, e1.3
  lgl$#-          %94.8 = IsType                   %94.7 isA int$-
  void                    Assume             D     %94.8, %92.5 (Typecheck@0x560398400550[Type#43])
  int$-           %94.10 = CastType           d     dn %94.7
  val?            %94.11 = Extract2_1D        wed   %94.4, %94.10, elided   <other>
  cp              %94.12 = Checkpoint                -> BB96 (default) | BB95 (if assume failed)
BB93   <- [92]
  fs              %93.0 = FrameState         R     0x560398ca1bd0+718: [%6.0, %6.1, %6.2], env=e1.3
  void                    Deopt              !v    %93.0   !
BB19   <- [18, 102]
  goto BB20
BB96   <- [94]
  val             %96.0 = ChkMissing         e     %92.3
  lgl$#-          %96.1 = IsType                   %96.0 isA val?~+ | miss
  void                    Assume             D     %96.1, %94.12 (Typecheck@0x560398400550[Type#45])
  val+            %96.3 = CastType           d     dn %96.0   <vec+>
  val?^ | miss    %96.4 = LdVar              eR    class, e1.3
  val?            %96.5 = Force!<lazy>       !v    %96.4, e1.3   <str$+>
  val?            %96.6 = Subassign2_1D      !v    %94.11, %96.3, %96.5, e1.3   <vec+>
  void                    StVar              lW    cntns, %96.6, e1.3
  lgl$#-          %96.8 = IsType                   %96.6 isA val+   <true>
  cp              %96.9 = Checkpoint                -> BB98 (default) | BB97 (if assume failed)
BB95   <- [94]
  fs              %95.0 = FrameState         R     0x560398ca1bd0+778: [%6.0, %6.1, %6.2, %94.11], env=e1.3
  void                    Deopt              !v    %95.0   !
BB20   <- [19, 36]
  int$-           %20.0 = Phi                      %6.2:BB19, %20.1:BB36
  int$-           %20.1 = Inc                      %20.0
  lgl$-           %20.2 = Lt                 d     %6.1, %20.1, elided
  lgl$#-          %20.3 = Identical                %20.2, true
  void                    Branch                   %20.3 -> BB91 (if true) | BB21 (if false)
BB98   <- [96]
  val             %98.0 = ChkMissing         e     %96.6
  void                    Assume             D     %96.8, %96.9 (DeadBranchReached@0x560398400550[Test#7])
  val?^ | miss    %98.2 = LdVar              eR    sort.list, e1.3
  lgl$#-          %98.3 = Identical                %98.2, function(x, partial=NULL, na.last=TRUE, decrea|...
  void                    Assume             D     %98.3, %96.9 (CallTarget@0x560398400550[Call#16])
  prom-           %98.5 = MkArg                    unboundValue, .recacheSubclasses[0x560398df1f40]_p20, e1.3
  val?            %98.6 = Call               !v    function(x, partial=NULL, na.last=TRUE, decrea|...(%98.5) e1.3   <int->
  lgl$#-          %98.7 = IsType                   %98.6 isA int-
  cp              %98.8 = Checkpoint                -> BB100 (default) | BB99 (if assume failed)
BB97   <- [96]
  fs              %97.0 = FrameState         R     0x560398ca1bd0+822: [%6.0, %6.1, %6.2], env=e1.3
  void                    Deopt              !v    %97.0   !
BB91   <- [20]
  void                    Visible            v     
  void                    Return             l     nil
BB21   <- [20]
  val?            %21.0 = Extract2_1D        wed   %6.0, %20.1, elided
  void                    StVar              lW    i, %21.0, e1.3
  cp              %21.2 = Checkpoint                -> BB23 (default) | BB22 (if assume failed)
BB100   <- [98]
  lgl$#-          %100.0 = IsType                   %96.6 isA val?+
  void                    Assume             D     %100.0, %98.8 (Typecheck@0x560398400550[Type#47])
  val?+           %100.2 = CastType           d     dn %96.6   <vec+>
  void                    Assume             D     %98.7, %98.8 (Typecheck@0x560398400550[Type#53])
  int-            %100.4 = CastType           d     dn %98.6
  val?            %100.5 = Extract1_1D        wed   %100.2, %100.4, elided   <vec+>
  void                    StVar              lW    cntns, %100.5, e1.3
  (cls|spec|blt)  %100.7 = LdFun              !v    <-, <0x560395a04da8>, e1.3
  prom-           %100.8 = MkArg                    unboundValue, .recacheSubclasses[0x560398df1f40]_p23, e1.3
  prom-           %100.9 = MkArg                    unboundValue, .recacheSubclasses[0x560398df1f40]_p26, e1.3
  val?            %100.10 = Call               !v    %100.7(%100.8, %100.9) e1.3
  cp              %100.11 = Checkpoint                -> BB102 (default) | BB101 (if assume failed)
BB99   <- [98]
  fs              %99.0 = FrameState         R     0x560398ca1bd0+899: [%6.0, %6.1, %6.2, %96.6, %98.6], env=e1.3
  void                    Deopt              !v    %99.0   !
BB23   <- [21]
  val?^ | miss    %23.0 = LdVar              eR    subNames, e1.3
  lgl$#-          %23.1 = IsType                   %23.0 isA val?~- | miss
  void                    Assume             D     %23.1, %21.2 (Typecheck@0x560398400550[Type#69])
  val?~- | miss   %23.3 = CastType           d     dn %23.0
  val?-           %23.4 = Force!<value>            %23.3,    <str->
  lgl$#-          %23.5 = IsType                   %23.4 isA val+   <true>
  void                    Assume             D     %23.5, %21.2 (DeadBranchReached@0x560398400550[Test#8])
  val             %23.7 = ChkMissing         e     %21.0
  lgl$#-          %23.8 = IsType                   %23.7 isA int$-
  void                    Assume             D     %23.8, %21.2 (Typecheck@0x560398400550[Type#71])
  int$-           %23.10 = CastType           d     dn %23.7
  val?            %23.11 = Extract2_1D        wed   %23.4, %23.10, elided   <str$->
  void                    StVar              lW    what, %23.11, e1.3
  cp              %23.13 = Checkpoint                -> BB25 (default) | BB24 (if assume failed)
BB22   <- [21]
  fs              %22.0 = FrameState         R     0x560398ca1bd0+1073: [%6.0, %6.1, %20.1], env=e1.3
  void                    Deopt              !v    %22.0   !
BB102   <- [100]
  val?^ | miss    %102.0 = LdVar              eR    .cacheClass, e1.3
  lgl$#-          %102.1 = Identical                %102.0, function(name, def, doSubclasses=FALSE, env) <|...
  void                    Assume             D     %102.1, %100.11 (CallTarget@0x560398400550[Call#20])
  prom-           %102.3 = MkArg                    unboundValue, .recacheSubclasses[0x560398df1f40]_p27, e1.3
  prom-           %102.4 = MkArg                    unboundValue, .recacheSubclasses[0x560398df1f40]_p28, e1.3
  prom-           %102.5 = MkArg                    unboundValue, .recacheSubclasses[0x560398df1f40]_p29, e1.3
  val?            %102.6 = StaticCall         !v    .cacheClass[0x560397f18550](%102.3, %102.4, false, %102.5) e1.3
  goto BB19
BB101   <- [100]
  fs              %101.0 = FrameState         R     0x560398ca1bd0+957: [%6.0, %6.1, %6.2, %100.10], env=e1.3
  void                    Deopt              !v    %101.0   !
BB25   <- [23]
  val?^ | miss    %25.0 = LdVar              eR    getClassDef, e1.3
  lgl$#-          %25.1 = Identical                %25.0, function(Class, where=topenv(parent.frame()), |...
  void                    Assume             D     %25.1, %23.13 (CallTarget@0x560398400550[Call#26])
  prom-           %25.3 = MkArg                    unboundValue, .recacheSubclasses[0x560398df1f40]_p30 (!refl), e1.3
  prom-           %25.4 = MkArg                    unboundValue, .recacheSubclasses[0x560398df1f40]_p31, e1.3
  val?            %25.5 = StaticCall         !v    getClassDef[0x560397fdead0](%25.3, missingArg, %25.4) { 0 2n } e1.3   <other>
  lgl$-           %25.6 = Is                       %25.5, NULL
  void                    StVar              lW    subDef, %25.5, e1.3
  cp              %25.8 = Checkpoint                -> BB27 (default) | BB26 (if assume failed)
BB24   <- [23]
  fs              %24.0 = FrameState         R     0x560398ca1bd0+1148: [%6.0, %6.1, %20.1], env=e1.3
  void                    Deopt              !v    %24.0   !
BB27   <- [25]
  val             %27.0 = ChkMissing         e     %25.5
  lgl$#-          %27.1 = CheckTrueFalse     e     %25.6
  void                    Branch                   %27.1 -> BB90 (if true) | BB28 (if false)
BB26   <- [25]
  fs              %26.0 = FrameState         R     0x560398ca1bd0+1207: [%6.0, %6.1, %20.1], env=e1.3
  void                    Deopt              !v    %26.0   !
BB90   <- [27]
  (cls|spec|blt)  %90.0 = LdFun              !v    getClassDef, e1.3
  fs              %90.1 = FrameState         R     0x560398ca1bd0+1242: [%6.0, %6.1, %20.1, %90.0], env=e1.3
  void                    Deopt              !v    %90.1, DeadCall@0x560398400550[Call#28], %90.0   !
BB28   <- [27]
  val?^ | miss    %28.0 = LdVar              eR    is.na, e1.3
  lgl$#-          %28.1 = Identical                <blt is.na>, %28.0   <true>
  void                    Assume             D     %28.1, %25.8 (DeadBranchReached@0x560398400550[Test#10])
  val?^ | miss    %28.3 = LdVar              eR    match, e1.3
  lgl$#-          %28.4 = Identical                %28.3, function(x, table, nomatch=NA, incomparables=N|...
  void                    Assume             D     %28.4, %25.8 (CallTarget@0x560398400550[Call#33])
  prom-           %28.6 = MkArg                    unboundValue, .recacheSubclasses[0x560398df1f40]_p35, e1.3
  val?^           %28.7 = CastType                 up %28.6
  val?^ | miss    %28.8 = LdVar              eR    what, e1.3
  val?            %28.9 = Force!<value>      !v    %28.8, e1.3   <str$->
  prom-           %28.10 = MkArg                    %28.9, .recacheSubclasses[0x560398df1f40]_p39 (!refl), e1.3
  val?~           %28.11 = CastType                 up %28.10
  cp              %28.12 = Checkpoint                -> BB30 (default) | BB29 (if assume failed)
BB30   <- [28]
  env             e30.0 = (MkEnv)            l     x=%28.11, table=%28.7, nomatch(miss)=NA, incomparables(miss)=nil, parent=R_BaseNamespace, context 0
  lgl$#-          %30.1 = IsEnvStub          R     , e30.0
  void                    Assume             D     %30.1, %28.12 (EnvStubMaterialized@0x560395d1db30[Call#unknown])
  val?            %30.3 = Force!<lazy>       !vL   %28.7, e30.0   <val?->
  lgl$#-          %30.4 = IsType                   %30.3 isA val?-
  cp              %30.5 = Checkpoint                -> BB32 (default) | BB31 (if assume failed)
BB29   <- [28]
  fs              %29.0 = FrameState         R     0x560398ca1bd0+1410: [%6.0, %6.1, %20.1, <blt is.na>], env=e1.3
  env             e29.1 = (MkEnv)            l     x=%28.11, table=%28.7, nomatch(miss)=NA, incomparables(miss)=nil, parent=R_BaseNamespace, context 0
  fs              %29.2 = FrameState         R     0x560396545d70+9: [%28.9], env=e29.1, next=%29.0
  void                    Deopt              !v    %29.2   !
BB32   <- [30]
  lgl$#-          %32.0 = IsEnvStub          R     , e30.0
  void                    Assume             D     %32.0, %30.5 (EnvStubMaterialized@0x560395d1db30[Call#unknown])
  lgl$#-          %32.2 = IsType                   %28.9 isA val?+
  void                    Assume             D     %32.2, %30.5 (Typecheck@0x560395d1db30[Type#0])
  val?+           %32.4 = CastType           d     dn %28.9   <(int|str)+>
  void                    Assume             D     %30.4, %30.5 (Typecheck@0x560395d1db30[Type#1])
  val?-           %32.6 = CastType           d     dn %30.3
  val+            %32.7 = CallSafeBuiltin    wed   match(%32.4, %32.6, NA, nil)    <int$->
  lgl$#-          %32.8 = IsType                   %32.7 isA int$-
  cp              %32.9 = Checkpoint                -> BB34 (default) | BB33 (if assume failed)
BB31   <- [30]
  fs              %31.0 = FrameState         R     0x560398ca1bd0+1410: [%6.0, %6.1, %20.1, <blt is.na>], env=e1.3
  fs              %31.1 = FrameState         R     0x560396545d70+23: [%28.9, %30.3], env=e30.0, next=%31.0
  void                    Deopt              !v    %31.1   !
BB34   <- [32]
  void                    Assume             D     %32.8, %32.9 (Typecheck@0x560398400550[Type#96])
  int$-           %34.1 = CastType           d     dn %32.7
  lgl$-           %34.2 = CallSafeBuiltin    wed   is.na(%34.1)    <lgl$->
  lgl$#-          %34.3 = CheckTrueFalse     e     %34.2
  void                    Branch                   %34.3 -> BB37 (if true) | BB35 (if false)
BB33   <- [32]
  fs              %33.0 = FrameState         R     0x560398ca1bd0+1410: [%6.0, %6.1, %20.1, <blt is.na>], env=e1.3
  fs              %33.1 = FrameState         R     0x560396545d70+69: [%32.7], env=e30.0, next=%33.0
  void                    Deopt              !v    %33.1   !
BB37   <- [34]
  (cls|spec|blt)  %37.0 = LdFun              !v    @, <0x560395a0fbd8>, e1.3
  prom-           %37.1 = MkArg                    unboundValue, .recacheSubclasses[0x560398df1f40]_p40, e1.3
  prom-           %37.2 = MkArg                    unboundValue, .recacheSubclasses[0x560398df1f40]_p41, e1.3
  val?            %37.3 = Call               !v    %37.0(%37.1, %37.2) e1.3   <vec+>
  void                    StVar              lW    cntns, %37.3, e1.3
  cp              %37.5 = Checkpoint                -> BB39 (default) | BB38 (if assume failed)
BB35   <- [34]
  goto BB36
BB39   <- [37]
  val?^ | miss    %39.0 = LdVar              eR    subs, e1.3
  lgl$#-          %39.1 = IsType                   %39.0 isA val?~+ | miss
  void                    Assume             D     %39.1, %37.5 (Typecheck@0x560398400550[Type#101])
  val?~+ | miss   %39.3 = CastType           d     dn %39.0
  val?+           %39.4 = Force!<value>            %39.3,    <vec+>
  lgl$#-          %39.5 = IsType                   %39.4 isA val+   <true>
  void                    Assume             D     %39.5, %37.5 (DeadBranchReached@0x560398400550[Test#11])
  val?^ | miss    %39.7 = LdVar              eR    i, e1.3
  lgl$#-          %39.8 = IsType                   %39.7 isA int$-
  void                    Assume             D     %39.8, %37.5 (Typecheck@0x560398400550[Type#103])
  int$-           %39.10 = CastType           d     dn %39.7
  val?            %39.11 = Extract2_1D        wed   %39.4, %39.10, elided   <other>
  cp              %39.12 = Checkpoint                -> BB41 (default) | BB40 (if assume failed)
BB38   <- [37]
  fs              %38.0 = FrameState         R     0x560398ca1bd0+1499: [%6.0, %6.1, %20.1], env=e1.3
  void                    Deopt              !v    %38.0   !
BB36   <- [35, 62]
  goto BB20
BB41   <- [39]
  val             %41.0 = ChkMissing         e     %37.3
  lgl$#-          %41.1 = IsType                   %41.0 isA val?~+ | miss
  void                    Assume             D     %41.1, %39.12 (Typecheck@0x560398400550[Type#105])
  val+            %41.3 = CastType           d     dn %41.0   <vec+>
  val?^ | miss    %41.4 = LdVar              eR    class, e1.3
  val?            %41.5 = Force!<wrapped>    !v    %41.4, e1.3   <str$+>
  val?            %41.6 = Subassign2_1D      !v    %39.11, %41.3, %41.5, e1.3   <vec+>
  void                    StVar              lW    cntns, %41.6, e1.3
  lgl$#-          %41.8 = IsType                   %41.6 isA val+   <true>
  cp              %41.9 = Checkpoint                -> BB43 (default) | BB42 (if assume failed)
BB40   <- [39]
  fs              %40.0 = FrameState         R     0x560398ca1bd0+1559: [%6.0, %6.1, %20.1, %39.11], env=e1.3
  void                    Deopt              !v    %40.0   !
BB43   <- [41]
  val             %43.0 = ChkMissing         e     %41.6
  void                    Assume             D     %41.8, %41.9 (DeadBranchReached@0x560398400550[Test#12])
  val?^ | miss    %43.2 = LdVar              eR    sort.list, e1.3
  lgl$#-          %43.3 = Identical                %43.2, function(x, partial=NULL, na.last=TRUE, decrea|...
  void                    Assume             D     %43.3, %41.9 (CallTarget@0x560398400550[Call#39])
  prom-           %43.5 = MkArg                    unboundValue, .recacheSubclasses[0x560398df1f40]_p42, e1.3
  val?            %43.6 = Call               !v    function(x, partial=NULL, na.last=TRUE, decrea|...(%43.5) e1.3   <int->
  lgl$#-          %43.7 = IsType                   %43.6 isA int-
  cp              %43.8 = Checkpoint                -> BB45 (default) | BB44 (if assume failed)
BB42   <- [41]
  fs              %42.0 = FrameState         R     0x560398ca1bd0+1603: [%6.0, %6.1, %20.1], env=e1.3
  void                    Deopt              !v    %42.0   !
BB45   <- [43]
  lgl$#-          %45.0 = IsType                   %41.6 isA val?+
  void                    Assume             D     %45.0, %43.8 (Typecheck@0x560398400550[Type#107])
  val?+           %45.2 = CastType           d     dn %41.6   <vec+>
  void                    Assume             D     %43.7, %43.8 (Typecheck@0x560398400550[Type#113])
  int-            %45.4 = CastType           d     dn %43.6
  val?            %45.5 = Extract1_1D        wed   %45.2, %45.4, elided   <vec+>
  void                    StVar              lW    cntns, %45.5, e1.3
  (cls|spec|blt)  %45.7 = LdFun              !v    <-, <0x560395a04da8>, e1.3
  prom-           %45.8 = MkArg                    unboundValue, .recacheSubclasses[0x560398df1f40]_p45, e1.3
  prom-           %45.9 = MkArg                    unboundValue, .recacheSubclasses[0x560398df1f40]_p48, e1.3
  val?            %45.10 = Call               !v    %45.7(%45.8, %45.9) e1.3
  cp              %45.11 = Checkpoint                -> BB47 (default) | BB46 (if assume failed)
BB44   <- [43]
  fs              %44.0 = FrameState         R     0x560398ca1bd0+1680: [%6.0, %6.1, %20.1, %41.6, %43.6], env=e1.3
  void                    Deopt              !v    %44.0   !
BB47   <- [45]
  val?^ | miss    %47.0 = LdVar              eR    .cacheClass, e1.3
  lgl$#-          %47.1 = Identical                %47.0, function(name, def, doSubclasses=FALSE, env) <|...
  void                    Assume             D     %47.1, %45.11 (CallTarget@0x560398400550[Call#43])
  prom-           %47.3 = MkArg                    unboundValue, .recacheSubclasses[0x560398df1f40]_p49, e1.3
  prom-           %47.4 = MkArg                    unboundValue, .recacheSubclasses[0x560398df1f40]_p50, e1.3
  prom-           %47.5 = MkArg                    unboundValue, .recacheSubclasses[0x560398df1f40]_p51, e1.3
  ct              %47.6 = PushContext        lCL   %47.3, %47.4, false, %47.5, .cacheClass(what, subDef, FALSE, env), function(name, def, doSubclasses=FALSE, env) <|..., e1.3
  val?^           %47.7 = CastType                 up %47.5
  val?^           %47.8 = CastType                 up %47.4
  val?^           %47.9 = CastType                 up %47.3
  cp              %47.10 = Checkpoint                -> BB49 (default) | BB48 (if assume failed)
BB46   <- [45]
  fs              %46.0 = FrameState         R     0x560398ca1bd0+1738: [%6.0, %6.1, %20.1, %45.10], env=e1.3
  void                    Deopt              !v    %46.0   !
BB49   <- [47]
  env             e49.0 = MkEnv              l     name=%47.9, def=%47.8, doSubclasses=false, env=%47.7, parent=<env 0x560396017378>, context 1
  val?^ | miss    %49.1 = LdVar              eR    isFALSE, e49.0
  lgl$#-          %49.2 = Identical                %49.1, function(x) <(rir::DispatchTable*)0x560398a60d|...
  void                    Assume             D     %49.2, %47.10 (CallTarget@0x5603985194e0[Call#0])
  lgl$-           %49.4 = CallSafeBuiltin    wed   is.na(false)    <lgl$->
  lgl$-           %49.5 = Not                d     %49.4, elided
  lgl$-           %49.6 = AsLogical                %49.5
  lgl$-           %49.7 = AsLogical                %49.6
  lgl$-           %49.8 = AsLogical                %49.7
  lgl$#-          %49.9 = Identical                %49.8, false
  cp              %49.10 = Checkpoint                -> BB51 (default) | BB50 (if assume failed)
BB48   <- [47]
  fs              %48.0 = FrameState         R     0x560398ca1bd0+1786: [%6.0, %6.1, %20.1], env=e1.3
  env             e48.1 = (MkEnv)            l     name=%47.9, def=%47.8, doSubclasses=false, env=%47.7, parent=<env 0x560396017378>, context 1
  fs              %48.2 = FrameState         R     0x560398a60f70+0: [], env=e48.1, next=%48.0
  void                    Deopt              !v    %48.2   !
BB51   <- [49]
  void                    Branch                   %49.9 -> BB89 (if true) | BB52 (if false)
BB50   <- [49]
  prom-           %50.0 = MkArg                    false, .recacheSubclasses[0x560398df1f40]_p53 (!refl), e49.0
  val?~           %50.1 = CastType                 up %50.0
  fs              %50.2 = FrameState         R     0x560398ca1bd0+1786: [%6.0, %6.1, %20.1], env=e1.3
  fs              %50.3 = FrameState         R     0x560398a60f70+32: [], env=e49.0, next=%50.2
  env             e50.4 = (MkEnv)            l     x=%50.1, parent=R_BaseNamespace, context 0
  fs              %50.5 = FrameState         R     0x5603986adf10+319: [%49.7], env=e50.4, next=%50.3
  void                    Deopt              !v    %50.5   !
BB89   <- [51]
  goto BB53
BB52   <- [51]
  lgl$-           %52.0 = AsLogical                %49.8
  goto BB53
BB53   <- [52, 89]
  lgl$-           %53.0 = Phi                      %52.0:BB52, %49.8:BB89
  lgl$-           %53.1 = Not                d     %53.0, elided
  lgl$#-          %53.2 = CheckTrueFalse     e     %53.1
  void                    Branch                   %53.2 -> BB88 (if true) | BB54 (if false)
BB88   <- [53]
  val?^ | miss    %88.0 = LdVar              eR    .recacheSubclasses, e49.0
  lgl$#-          %88.1 = Identical                %88.0, function(class, def, env) <(rir::DispatchTable|...
  void                    Assume             D     %88.1, %49.10 (CallTarget@0x5603985194e0[Call#1])
  prom-           %88.3 = MkArg                    unboundValue, .recacheSubclasses[0x560398df1f40]_p54, e49.0
  prom-           %88.4 = MkArg                    unboundValue, .recacheSubclasses[0x560398df1f40]_p57, e49.0
  prom-           %88.5 = MkArg                    unboundValue, .recacheSubclasses[0x560398df1f40]_p58, e49.0
  val?            %88.6 = StaticCall         !v    .recacheSubclasses[0x560396d480a0](%88.3, %88.4, %88.5) e49.0
  goto BB55
BB54   <- [53]
  goto BB55
BB55   <- [54, 88]
  val?^ | miss    %55.0 = LdVar              eR    .classTable, e49.0
  val?            %55.1 = Force!<wrapped>    !v    %55.0, e49.0   <env->
  lgl$#-          %55.2 = IsType                   %55.1 isA val+   <true>
  cp              %55.3 = Checkpoint                -> BB57 (default) | BB56 (if assume failed)
BB57   <- [55]
  void                    Assume             D     %55.2, %55.3 (DeadBranchReached@0x5603985194e0[Test#0])
  val?^ | miss    %57.1 = LdVar              eR    name, e49.0
  val?            %57.2 = Force!<lazy>       !v    %57.1, e49.0   <str$->
  lgl$#-          %57.3 = IsType                   %57.2 isA val?-
  cp              %57.4 = Checkpoint                -> BB59 (default) | BB58 (if assume failed)
BB56   <- [55]
  fs              %56.0 = FrameState         R     0x560398ca1bd0+1786: [%6.0, %6.1, %20.1], env=e1.3
  fs              %56.1 = FrameState         R     0x560398a60f70+101: [%55.1], env=e49.0, next=%56.0
  void                    Deopt              !v    %56.1   !
BB59   <- [57]
  lgl$#-          %59.0 = IsType                   %55.1 isA val?-
  void                    Assume             D     %59.0, %57.4 (Typecheck@0x5603985194e0[Type#7])
  val?-           %59.2 = CastType           d     dn %55.1   <env->
  void                    Assume             D     %57.3, %57.4 (Typecheck@0x5603985194e0[Type#9])
  val?-           %59.4 = CastType           d     dn %57.2   <str$->
  val?            %59.5 = Extract2_1D        wed   %59.2, %59.4, elided   <(nil|other)>
  lgl$-           %59.6 = Is                       %59.5, NULL
  void                    StVar              lW    prev, %59.5, e49.0
  lgl$-           %59.8 = Not                d     %59.6, elided
  lgl$#-          %59.9 = CheckTrueFalse     e     %59.8
  void                    Branch                   %59.9 -> BB63 (if true) | BB60 (if false)
BB58   <- [57]
  fs              %58.0 = FrameState         R     0x560398ca1bd0+1786: [%6.0, %6.1, %20.1], env=e1.3
  fs              %58.1 = FrameState         R     0x560398a60f70+146: [%55.1, %57.2], env=e49.0, next=%58.0
  void                    Deopt              !v    %58.1   !
BB63   <- [59]
  (cls|spec|blt)  %63.0 = LdFun              !v    @, <0x560395a0fbd8>, e49.0
  prom-           %63.1 = MkArg                    unboundValue, .recacheSubclasses[0x560398df1f40]_p60, e49.0
  prom-           %63.2 = MkArg                    unboundValue, .recacheSubclasses[0x560398df1f40]_p61, e49.0
  val?            %63.3 = Call               !v    %63.0(%63.1, %63.2) e49.0   <str$->
  void                    StVar              lW    newpkg, %63.3, e49.0
  cp              %63.5 = Checkpoint                -> BB65 (default) | BB64 (if assume failed)
BB60   <- [59]
  goto BB61
BB65   <- [63]
  val?^ | miss    %65.0 = LdVar              eR    is, e49.0
  lgl$#-          %65.1 = Identical                %65.0, function(object, class2) <(rir::DispatchTable*|...
  void                    Assume             D     %65.1, %63.5 (CallTarget@0x5603985194e0[Call#4])
  prom-           %65.3 = MkArg                    unboundValue, .recacheSubclasses[0x560398df1f40]_p62, e49.0
  val?            %65.4 = Call               !v    function(object, class2) <(rir::DispatchTable*|...(%65.3, "classRepresentation") e49.0   <lgl$->
  lgl$#-          %65.5 = IsType                   %65.4 isA lgl$-
  cp              %65.6 = Checkpoint                -> BB67 (default) | BB66 (if assume failed)
BB64   <- [63]
  fs              %64.0 = FrameState         R     0x560398ca1bd0+1786: [%6.0, %6.1, %20.1], env=e1.3
  fs              %64.1 = FrameState         R     0x560398a60f70+237: [], env=e49.0, next=%64.0
  void                    Deopt              !v    %64.1   !
BB61   <- [60, 73]
  val?^ | miss    %61.0 = LdVar              eR    def, e49.0
  val?            %61.1 = Force!<lazy>       !v    %61.0, e49.0   <other>
  val?^ | miss    %61.2 = LdVar              eR    .classTable !upd, e49.0
  val?            %61.3 = Force!<wrapped>    !v    %61.2, e49.0   <env->
  val?^ | miss    %61.4 = LdVar              eR    name, e49.0
  val?            %61.5 = Force!<wrapped>    !v    %61.4, e49.0   <str$->
  val?            %61.6 = Subassign2_1D      !v    %61.1, %61.3, %61.5, e49.0
  void                    StVar              lW    .classTable, %61.6, e49.0
  goto BB62
BB67   <- [65]
  void                    Assume             D     %65.5, %65.6 (Typecheck@0x5603985194e0[Type#15])
  lgl$-           %67.1 = CastType           d     dn %65.4
  lgl$#-          %67.2 = CheckTrueFalse     e     %67.1
  void                    Branch                   %67.2 -> BB75 (if true) | BB68 (if false)
BB66   <- [65]
  fs              %66.0 = FrameState         R     0x560398ca1bd0+1786: [%6.0, %6.1, %20.1], env=e1.3
  fs              %66.1 = FrameState         R     0x560398a60f70+274: [%65.4], env=e49.0, next=%66.0
  void                    Deopt              !v    %66.1   !
BB62   <- [87, 86, 61]
  val?            %62.0 = Phi                      %61.1:BB61, %86.13:BB86, nil:BB87
  val?            %62.1 = PopContext         C     %62.0, %47.6
  goto BB36
BB75   <- [67]
  val?^ | miss    %75.0 = LdVar              eR    identical, e49.0
  lgl$#-          %75.1 = Identical                %75.0, function(x, y, num.eq=TRUE, single.NA=TRUE, at|...
  void                    Assume             D     %75.1, %65.6 (CallTarget@0x5603985194e0[Call#5])
  prom-           %75.3 = MkArg                    unboundValue, .recacheSubclasses[0x560398df1f40]_p63, e49.0
  prom-           %75.4 = MkArg                    unboundValue, .recacheSubclasses[0x560398df1f40]_p64, e49.0
  ct              %75.5 = PushContext        lCL   %75.3, %75.4, identical(prev, def), function(x, y, num.eq=TRUE, single.NA=TRUE, at|..., e49.0
  val?^           %75.6 = CastType                 up %75.4
  val?^           %75.7 = CastType                 up %75.3
  env             e75.8 = MkEnv              l     x=%75.7, y=%75.6, num.eq(miss)=true, single.NA(miss)=true, attrib.as.set(miss)=true, ignore.bytecode(miss)=true, ignore.environment(miss)=false, ignore.srcref(miss)=true, parent=R_BaseNamespace, context 1
  val?            %75.9 = Force!<lazy>       !v    %75.7, e75.8   <val?>
  val?^ | miss    %75.10 = LdVar              eR    y, e75.8
  val?            %75.11 = Force!<lazy>       !v    %75.10, e75.8   <val?>
  val?^ | miss    %75.12 = LdVar              eR    num.eq, e75.8
  val?            %75.13 = Force!<lazy>       !v    %75.12, e75.8   <lgl$->
  val?^ | miss    %75.14 = LdVar              eR    single.NA, e75.8
  val?            %75.15 = Force!<lazy>       !v    %75.14, e75.8   <lgl$->
  val?^ | miss    %75.16 = LdVar              eR    attrib.as.set, e75.8
  val?            %75.17 = Force!<lazy>       !v    %75.16, e75.8   <lgl$->
  val?^ | miss    %75.18 = LdVar              eR    ignore.bytecode, e75.8
  val?            %75.19 = Force!<lazy>       !v    %75.18, e75.8   <lgl$->
  val?^ | miss    %75.20 = LdVar              eR    ignore.environment, e75.8
  val?            %75.21 = Force!<lazy>       !v    %75.20, e75.8   <lgl$->
  val?^ | miss    %75.22 = LdVar              eR    ignore.srcref, e75.8
  val?            %75.23 = Force!<lazy>       !v    %75.22, e75.8   <lgl$->
  val?            %75.24 = CallBuiltin        !v    identical(%75.9, %75.11, %75.13, %75.15, %75.17, %75.19, %75.21, %75.23) e75.8
  val?            %75.25 = PopContext         C     %75.24, %75.5   <lgl$->
  lgl$#-          %75.26 = IsType                   %75.25 isA lgl$-
  cp              %75.27 = Checkpoint                -> BB77 (default) | BB76 (if assume failed)
BB68   <- [67]
  val?^ | miss    %68.0 = LdVar              eR    def, e49.0
  val?            %68.1 = Force!             !v    %68.0, e49.0   <val?_>
  val?^ | miss    %68.2 = LdVar              eR    prev !upd, e49.0
  val?            %68.3 = Force!             !v    %68.2, e49.0   <val?_>
  val?^ | miss    %68.4 = LdVar              eR    newpkg, e49.0
  val?            %68.5 = Force!             !v    %68.4, e49.0   <val?_>
  lgl$#-          %68.6 = IsType                   %68.5 isA val?+
  lgl$#-          %68.7 = IsType                   %68.1 isA val?+
  lgl$#-          %68.8 = IsType                   %68.3 isA val?+
  cp              %68.9 = Checkpoint                -> BB70 (default) | BB69 (if assume failed)
BB77   <- [75]
  void                    Assume             D     %75.26, %75.27 (Typecheck@0x5603985194e0[Type#18])
  lgl$-           %77.1 = CastType           d     dn %75.25
  lgl$#-          %77.2 = CheckTrueFalse     e     %77.1
  void                    Branch                   %77.2 -> BB87 (if true) | BB78 (if false)
BB76   <- [75]
  fs              %76.0 = FrameState         R     0x560398ca1bd0+1786: [%6.0, %6.1, %20.1], env=e1.3
  fs              %76.1 = FrameState         R     0x560398a60f70+327: [%75.25], env=e49.0, next=%76.0
  void                    Deopt              !v    %76.1   !
BB70   <- [68]
  void                    Assume             D     %68.7, %68.9 (Typecheck@0x5603985194e0[Type#42])
  val?+           %70.1 = CastType           d     dn %68.1   <val?_>
  void                    Assume             D     %68.8, %68.9 (Typecheck@0x5603985194e0[Type#43])
  val?+           %70.3 = CastType           d     dn %68.3   <val?_>
  void                    Assume             D     %68.6, %68.9 (Typecheck@0x5603985194e0[Type#44])
  val?+           %70.5 = CastType           d     dn %68.5   <val?_>
  val?+           %70.6 = Subassign2_1D      wed   %70.1, %70.3, %70.5, elided   <val?_>
  void                    StVar              lW    prev, %70.6, e49.0
  val+            %70.8 = ChkMissing         e     %70.6
  void                    StVar              lW    def, %70.6, e49.0
  val?^ | miss    %70.10 = LdVar              eR    length, e49.0
  lgl$#-          %70.11 = Identical                <blt length>, %70.10   <@?>
  void                    Branch                   %70.11 -> BB72 (if true) | BB71 (if false)
BB69   <- [68]
  fs              %69.0 = FrameState         R     0x560398ca1bd0+1786: [%6.0, %6.1, %20.1], env=e1.3
  fs              %69.1 = FrameState         R     0x560398a60f70+926: [%68.1, %68.3, %68.5], env=e49.0, next=%69.0
  void                    Deopt              !v    %69.1   !
BB87   <- [77]
  goto BB62
BB78   <- [77]
  (cls|spec|blt)  %78.0 = LdFun              !v    @, <0x560395a0fbd8>, e49.0
  prom-           %78.1 = MkArg                    unboundValue, .recacheSubclasses[0x560398df1f40]_p65, e49.0
  prom-           %78.2 = MkArg                    unboundValue, .recacheSubclasses[0x560398df1f40]_p66, e49.0
  val?            %78.3 = Call               !v    %78.0(%78.1, %78.2) e49.0   <str$->
  void                    StVar              lW    pkg, %78.3, e49.0
  cp              %78.5 = Checkpoint                -> BB80 (default) | BB79 (if assume failed)
BB72   <- [70]
  (int|real)$-    %72.0 = CallSafeBuiltin    wed   length(%70.6)    <val?_>
  lgl$-           %72.1 = Gt                 d     %72.0, 1L, elided   <val?_>
  lgl$#-          %72.2 = CheckTrueFalse     e     %72.1
  void                    Branch                   %72.2 -> BB74 (if true) | BB73 (if false)
BB71   <- [70]
  (cls|spec|blt)  %71.0 = LdFun              !v    length, e49.0
  fs              %71.1 = FrameState         R     0x560398ca1bd0+1786: [%6.0, %6.1, %20.1], env=e1.3
  fs              %71.2 = FrameState         R     0x560398a60f70+992: [%71.0], env=e49.0, next=%71.1
  void                    Deopt              !v    %71.2, DeadCall@0x5603985194e0[Call#14], %71.0   !
BB80   <- [78]
  val?^ | miss    %80.0 = LdVar              eR    identical, e49.0
  lgl$#-          %80.1 = Identical                %80.0, function(x, y, num.eq=TRUE, single.NA=TRUE, at|...
  void                    Assume             D     %80.1, %78.5 (CallTarget@0x5603985194e0[Call#7])
  prom-           %80.3 = MkArg                    unboundValue, .recacheSubclasses[0x560398df1f40]_p67 (!refl), e49.0
  prom-           %80.4 = MkArg                    unboundValue, .recacheSubclasses[0x560398df1f40]_p68, e49.0
  ct              %80.5 = PushContext        lCL   %80.3, %80.4, identical(pkg, newpkg), function(x, y, num.eq=TRUE, single.NA=TRUE, at|..., e49.0
  val?^           %80.6 = CastType                 up %80.4
  val?^           %80.7 = CastType                 up %80.3
  env             e80.8 = MkEnv              l     x=%80.7, y=%80.6, num.eq(miss)=true, single.NA(miss)=true, attrib.as.set(miss)=true, ignore.bytecode(miss)=true, ignore.environment(miss)=false, ignore.srcref(miss)=true, parent=R_BaseNamespace, context 1
  val?            %80.9 = Force!<lazy>       !vr   %80.7, e80.8   <val?>
  val?^ | miss    %80.10 = LdVar              eR    y, e80.8
  val?            %80.11 = Force!<lazy>       !v    %80.10, e80.8   <val?>
  val?^ | miss    %80.12 = LdVar              eR    num.eq, e80.8
  val?            %80.13 = Force!<lazy>       !v    %80.12, e80.8   <lgl$->
  val?^ | miss    %80.14 = LdVar              eR    single.NA, e80.8
  val?            %80.15 = Force!<lazy>       !v    %80.14, e80.8   <lgl$->
  val?^ | miss    %80.16 = LdVar              eR    attrib.as.set, e80.8
  val?            %80.17 = Force!<lazy>       !v    %80.16, e80.8   <lgl$->
  val?^ | miss    %80.18 = LdVar              eR    ignore.bytecode, e80.8
  val?            %80.19 = Force!<lazy>       !v    %80.18, e80.8   <lgl$->
  val?^ | miss    %80.20 = LdVar              eR    ignore.environment, e80.8
  val?            %80.21 = Force!<lazy>       !v    %80.20, e80.8   <lgl$->
  val?^ | miss    %80.22 = LdVar              eR    ignore.srcref, e80.8
  val?            %80.23 = Force!<lazy>       !v    %80.22, e80.8   <lgl$->
  val?            %80.24 = CallBuiltin        !v    identical(%80.9, %80.11, %80.13, %80.15, %80.17, %80.19, %80.21, %80.23) e80.8
  val?            %80.25 = PopContext         C     %80.24, %80.5   <lgl$->
  lgl$#-          %80.26 = IsType                   %80.25 isA lgl$-
  cp              %80.27 = Checkpoint                -> BB82 (default) | BB81 (if assume failed)
BB79   <- [78]
  fs              %79.0 = FrameState         R     0x560398ca1bd0+1786: [%6.0, %6.1, %20.1], env=e1.3
  fs              %79.1 = FrameState         R     0x560398a60f70+400: [], env=e49.0, next=%79.0
  void                    Deopt              !v    %79.1   !
BB74   <- [72]
  (cls|spec|blt)  %74.0 = LdFun              !v    .duplicateClassesExist, e49.0
  fs              %74.1 = FrameState         R     0x560398ca1bd0+1786: [%6.0, %6.1, %20.1], env=e1.3
  fs              %74.2 = FrameState         R     0x560398a60f70+1088: [%74.0], env=e49.0, next=%74.1
  void                    Deopt              !v    %74.2, DeadCall@0x5603985194e0[Call#15], %74.0   !
BB73   <- [72]
  goto BB61
BB82   <- [80]
  void                    Assume             D     %80.26, %80.27 (Typecheck@0x5603985194e0[Type#24])
  lgl$-           %82.1 = CastType           d     dn %80.25
  lgl$#-          %82.2 = CheckTrueFalse     e     %82.1
  void                    Branch                   %82.2 -> BB84 (if true) | BB83 (if false)
BB81   <- [80]
  fs              %81.0 = FrameState         R     0x560398ca1bd0+1786: [%6.0, %6.1, %20.1], env=e1.3
  fs              %81.1 = FrameState         R     0x560398a60f70+437: [%80.25], env=e49.0, next=%81.0
  void                    Deopt              !v    %81.1   !
BB84   <- [82]
  val?^ | miss    %84.0 = LdVar              eR    .cache_class, e49.0
  lgl$#-          %84.1 = Identical                <blt .cache_class>, %84.0   <true>
  void                    Assume             D     %84.1, %80.27 (DeadBranchReached@0x5603985194e0[Test#1])
  val?^ | miss    %84.3 = LdVar              eR    name, e49.0
  val?            %84.4 = Force!<wrapped>    !v    %84.3, e49.0   <str$->
  cp              %84.5 = Checkpoint                -> BB86 (default) | BB85 (if assume failed)
BB83   <- [82]
  (cls|spec|blt)  %83.0 = LdFun              !v    .simpleDuplicateClass, e49.0
  fs              %83.1 = FrameState         R     0x560398ca1bd0+1786: [%6.0, %6.1, %20.1], env=e1.3
  fs              %83.2 = FrameState         R     0x560398a60f70+453: [%83.0], env=e49.0, next=%83.1
  void                    Deopt              !v    %83.2, DeadCall@0x5603985194e0[Call#8], %83.0   !
BB86   <- [84]
  val?^ | miss    %86.0 = LdVar              eR    .extendsForS3, e49.0
  lgl$#-          %86.1 = Identical                %86.0, function(Class) <(rir::DispatchTable*)0x560398|...
  void                    Assume             D     %86.1, %84.5 (CallTarget@0x5603985194e0[Call#11])
  prom-           %86.3 = MkArg                    unboundValue, .recacheSubclasses[0x560398df1f40]_p69, e49.0
  ct              %86.4 = PushContext        lCL   %86.3, .extendsForS3(def), function(Class) <(rir::DispatchTable*)0x560398|..., e49.0
  val?^           %86.5 = CastType                 up %86.3
  env             e86.6 = MkEnv              l     Class=%86.5, parent=<env 0x560396017378>, context 1
  (cls|spec|blt)  %86.7 = LdFun              !v    extends, <0x560398cd8680>, <env 0x560396017378>
  prom-           %86.8 = MkArg                    unboundValue, .recacheSubclasses[0x560398df1f40]_p70, e86.6
  val?            %86.9 = NamedCall          !v    %86.7(%86.8, maybe=false) e86.6   <str->
  val?            %86.10 = PopContext         C     %86.9, %86.4   <str->
  val?            %86.11 = CallBuiltin        !v    .cache_class(%84.4, %86.10) e49.0
  val?^ | miss    %86.12 = LdVar              eR    def, e49.0
  val?            %86.13 = Force!<wrapped>    !v    %86.12, e49.0   <other>
  val?^ | miss    %86.14 = LdVar              eR    .classTable !upd, e49.0
  val?            %86.15 = Force!<wrapped>    !v    %86.14, e49.0   <env->
  val?^ | miss    %86.16 = LdVar              eR    name, e49.0
  val?            %86.17 = Force!<wrapped>    !v    %86.16, e49.0   <str$->
  val?            %86.18 = Subassign2_1D      !v    %86.13, %86.15, %86.17, e49.0
  void                    StVar              lW    .classTable, %86.18, e49.0
  goto BB62
BB85   <- [84]
  fs              %85.0 = FrameState         R     0x560398ca1bd0+1786: [%6.0, %6.1, %20.1], env=e1.3
  fs              %85.1 = FrameState         R     0x560398a60f70+586: [<blt .cache_class>, %84.4], env=e49.0, next=%85.0
  void                    Deopt              !v    %85.1   !
Prom 0:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    def, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 1:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    subclasses, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 2:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    what, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 3:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     packageSlot, <0x5603961d93f8>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, .recacheSubclasses[0x560398df1f40]_p4, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <str$->
  void                    Return             l     %1.3
Prom 4:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    subs, e1.0
  val?            %1.2  = Force<value>       !v    %1.1, e1.0   <vec+>
  lgl$#-          %1.3  = IsType                   %1.2 isA val+   <true>
  void                    Branch                   %1.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [1]
  val?^ | miss    %2.0  = LdVar              eR    i, e1.0
  val?            %2.1  = Force<value>       !v    %2.0, e1.0   <int$->
  goto BB3
BB4   <- [1]
  prom-           %4.0  = MkArg                    unboundValue, .recacheSubclasses[0x560398df1f40]_p5, e1.0
  goto BB3
BB3   <- [2, 4]
  val?            %3.0  = Phi                      %2.1:BB2, %4.0:BB4
  val?            %3.1  = Extract2_1D        !v    %1.2, %3.0, e1.0   <other>
  void                    Visible            v     
  void                    Return             l     %3.1
Prom 5:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    i, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 6:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    subDef, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 7:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    contains, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 8:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     names, <0x560395a10470>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, .recacheSubclasses[0x560398df1f40]_p9, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <str->
  void                    Return             l     %1.3
Prom 9:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     @, <0x560395a0fbd8>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, .recacheSubclasses[0x560398df1f40]_p10, e1.0
  prom-           %1.3  = MkArg                    unboundValue, .recacheSubclasses[0x560398df1f40]_p11, e1.0
  val?            %1.4  = Call               !     %1.1(%1.2, %1.3) e1.0   <vec+>
  void                    Return             l     %1.4
Prom 10:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    subDef, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 11:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    contains, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 12:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    what, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 13:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     names, <0x560395a10470>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, .recacheSubclasses[0x560398df1f40]_p14, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <str->
  void                    Return             l     %1.3
Prom 14:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     @, <0x560395a0fbd8>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, .recacheSubclasses[0x560398df1f40]_p15, e1.0
  prom-           %1.3  = MkArg                    unboundValue, .recacheSubclasses[0x560398df1f40]_p16, e1.0
  val?            %1.4  = Call               !     %1.1(%1.2, %1.3) e1.0   <vec+>
  void                    Return             l     %1.4
Prom 15:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    subDef, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 16:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    contains, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 17:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    what, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 18:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    subDef, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 19:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    contains, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 20:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     vapply, <0x560395b2d9e8>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, .recacheSubclasses[0x560398df1f40]_p21, e1.0
  cls             %1.3  = MkCls                    .recacheSubclasses@Prom(36)0, e1.0
  prom-           %1.4  = MkArg                    %1.3, .recacheSubclasses[0x560398df1f40]_p22 (!refl), e1.0
  val?            %1.5  = Call               !     %1.1(%1.2, %1.4, 1) e1.0   <real+>
  void                    Return             l     %1.5
Prom 21:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    cntns, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 22:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  cls             %1.1  = MkCls                    .recacheSubclasses@Prom(36)0, e1.0
  void                    Return             l     %1.1
Prom 23:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     @, e1.0
  prom-           %1.2  = MkArg                    unboundValue, .recacheSubclasses[0x560398df1f40]_p24, e1.0
  prom-           %1.3  = MkArg                    unboundValue, .recacheSubclasses[0x560398df1f40]_p25, e1.0
  val?            %1.4  = Call               !     %1.1(%1.2, %1.3) e1.0   <val?_>
  void                    Return             l     %1.4
Prom 24:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    subDef, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 25:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    contains, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 26:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    cntns, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 27:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    what, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 28:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    subDef, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <other>
  void                    Return             l     %1.3
Prom 29:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    env, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 30:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    what, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 31:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     packageSlot, <0x5603961d93f8>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, .recacheSubclasses[0x560398df1f40]_p32, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <str$->
  void                    Return             l     %1.3
Prom 32:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    subs, e1.0
  val?            %1.2  = Force<value>       !v    %1.1, e1.0   <vec+>
  lgl$#-          %1.3  = IsType                   %1.2 isA val+   <true>
  void                    Branch                   %1.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [1]
  val?^ | miss    %2.0  = LdVar              eR    i, e1.0
  val?            %2.1  = Force<value>       !v    %2.0, e1.0   <int$->
  goto BB3
BB4   <- [1]
  prom-           %4.0  = MkArg                    unboundValue, .recacheSubclasses[0x560398df1f40]_p33, e1.0
  goto BB3
BB3   <- [2, 4]
  val?            %3.0  = Phi                      %2.1:BB2, %4.0:BB4
  val?            %3.1  = Extract2_1D        !v    %1.2, %3.0, e1.0   <other>
  void                    Visible            v     
  void                    Return             l     %3.1
Prom 33:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    i, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 35:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     names, <0x560395a10470>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, .recacheSubclasses[0x560398df1f40]_p36, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <str->
  void                    Return             l     %1.3
Prom 36:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     @, <0x560395a0fbd8>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, .recacheSubclasses[0x560398df1f40]_p37, e1.0
  prom-           %1.3  = MkArg                    unboundValue, .recacheSubclasses[0x560398df1f40]_p38, e1.0
  val?            %1.4  = Call               !     %1.1(%1.2, %1.3) e1.0   <vec+>
  void                    Return             l     %1.4
Prom 37:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    subDef, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 38:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    contains, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 39:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    what, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 40:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    subDef, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 41:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    contains, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 42:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     vapply, <0x560395b2d9e8>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, .recacheSubclasses[0x560398df1f40]_p43, e1.0
  cls             %1.3  = MkCls                    .recacheSubclasses@Prom(24)0, e1.0
  prom-           %1.4  = MkArg                    %1.3, .recacheSubclasses[0x560398df1f40]_p44 (!refl), e1.0
  val?            %1.5  = Call               !     %1.1(%1.2, %1.4, 1) e1.0   <real+>
  void                    Return             l     %1.5
Prom 43:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    cntns, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 44:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  cls             %1.1  = MkCls                    .recacheSubclasses@Prom(24)0, e1.0
  void                    Return             l     %1.1
Prom 45:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     @, e1.0
  prom-           %1.2  = MkArg                    unboundValue, .recacheSubclasses[0x560398df1f40]_p46, e1.0
  prom-           %1.3  = MkArg                    unboundValue, .recacheSubclasses[0x560398df1f40]_p47, e1.0
  val?            %1.4  = Call               !     %1.1(%1.2, %1.3) e1.0   <val?_>
  void                    Return             l     %1.4
Prom 46:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    subDef, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 47:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    contains, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 48:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    cntns, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 49:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    what, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 50:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    subDef, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <other>
  void                    Return             l     %1.3
Prom 51:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    env, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 53:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    doSubclasses, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <lgl$->
  void                    Return             l     %1.3
Prom 54:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     @, <0x560395a0fbd8>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, .recacheSubclasses[0x560398df1f40]_p55, e1.0
  prom-           %1.3  = MkArg                    unboundValue, .recacheSubclasses[0x560398df1f40]_p56, e1.0
  val?            %1.4  = Call               !     %1.1(%1.2, %1.3) e1.0   <str$+>
  void                    Return             l     %1.4
Prom 55:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    def, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 56:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    className, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 57:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    def, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <other>
  void                    Return             l     %1.3
Prom 58:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    env, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 60:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    def, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 61:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    package, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 62:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    prev, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <other>
  void                    Return             l     %1.3
Prom 63:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    prev, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <other>
  void                    Return             l     %1.3
Prom 64:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    def, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <other>
  void                    Return             l     %1.3
Prom 65:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    prev, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 66:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    package, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 67:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    pkg, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 68:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    newpkg, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 69:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    def, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <other>
  void                    Return             l     %1.3
Prom 70:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    Class, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <other>
  void                    Return             l     %1.3

│ .recacheSubclasses[0x560398df1f40]                                           │
└──────────────────────────────────────────────────────────────────────────────┘
