
┌──────────────────────────────────────────────────────────────────────────────┐
│ .checkGroupSigLength[0x56039943cee0]                                         │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch                                      │
│ Properties:  ForceOrd: 0                                                     │
├────── PIR Version After Optimizations
.checkGroupSigLength[0x56039943cee0]
BB0
  goto BB1
BB1   <- [0]
  val?^           %1.0  = LdArg                    1
  val?^           %1.1  = LdArg                    0
  env             e1.2  = MkEnv              l     gnames=%1.1, generics=%1.0, parent=<env 0x560396017378>, context 1
  val?            %1.3  = Force!<lazy>       !v    %1.1, e1.2   <vec$->
  lgl$#-          %1.4  = IsType                   %1.3 isA val?-
  cp              %1.5  = Checkpoint                -> BB2 (default) | BB124 (if assume failed)
BB2   <- [1]
  void                    Assume             D     %1.4, %1.5 (Typecheck@0x560398f6e258[Type#3])
  val?-           %2.1  = CastType           d     dn %1.3   <vec$->
  void                    StVar              lW    funs, %2.1, e1.2
  void                    StVar              lW    recall, false, e1.2
  cp              %2.4  = Checkpoint                -> BB4 (default) | BB3 (if assume failed)
BB124   <- [1]
  fs              %124.0 = FrameState         R     0x560397ebaa70+9: [%1.3], env=e1.2
  void                    Deopt              !v    %124.0   !
BB4   <- [2]
  val?^ | miss    %4.0  = LdVar              eR    seq_along, e1.2
  lgl$#-          %4.1  = Identical                <blt seq_along>, %4.0   <true>
  void                    Assume             D     %4.1, %2.4 (DeadBranchReached@0x560398f6e258[Test#0])
  val?^ | miss    %4.3  = LdVar              eR    gnames, e1.2
  val?            %4.4  = Force!<wrapped>    !v    %4.3, e1.2   <vec$->
  val?            %4.5  = CallBuiltin        !v    seq_along(%4.4) e1.2   <int$->
  lgl$#-          %4.6  = IsType                   %4.5 isA int$-
  cp              %4.7  = Checkpoint                -> BB6 (default) | BB5 (if assume failed)
BB3   <- [2]
  fs              %3.0  = FrameState         R     0x560397ebaa70+38: [], env=e1.2
  void                    Deopt              !v    %3.0   !
BB6   <- [4]
  void                    Assume             D     %4.6, %4.7 (Typecheck@0x560398f6e258[Type#6])
  int$-           %6.1  = CastType           d     dn %4.5
  int$-           %6.2  = Inc                      0L
  lgl$-           %6.3  = Lt                 d     1L, %6.2, elided   <false>
  lgl$#-          %6.4  = Identical                %6.3, true
  void                    AssumeNot          D     %6.4, %4.7 (DeadBranchReached@0x560398f6e258[Test#1])
  int$-           %6.6  = Extract2_1D        wed   %6.1, %6.2, elided
  void                    StVar              lW    i, %6.6, e1.2
  val?^ | miss    %6.8  = LdVar              eR    gnames, e1.2
  val?            %6.9  = Force!<wrapped>    !v    %6.8, e1.2   <vec$->
  lgl$#-          %6.10 = IsType                   %6.9 isA val+   <true>
  lgl$#-          %6.11 = IsType                   %6.9 isA val?-
  cp              %6.12 = Checkpoint                -> BB8 (default) | BB7 (if assume failed)
BB5   <- [4]
  fs              %5.0  = FrameState         R     0x560397ebaa70+129: [%4.5], env=e1.2
  void                    Deopt              !v    %5.0   !
BB8   <- [6]
  void                    Assume             D     %6.10, %6.12 (DeadBranchReached@0x560398f6e258[Test#2])
  val?^ | miss    %8.1  = LdVar              eR    i, e1.2
  lgl$#-          %8.2  = IsType                   %8.1 isA int$-
  void                    Assume             D     %8.2, %6.12 (Typecheck@0x560398f6e258[Type#9])
  int$-           %8.4  = CastType           d     dn %8.1
  void                    Assume             D     %6.11, %6.12 (Typecheck@0x560398f6e258[Type#7])
  val?-           %8.6  = CastType           d     dn %6.9   <vec$->
  val?            %8.7  = Extract2_1D        wed   %8.6, %8.4, elided   <str$+>
  void                    StVar              lW    what, %8.7, e1.2
  val?^ | miss    %8.9  = LdVar              eR    generics, e1.2
  val?            %8.10 = Force!<lazy>       !v    %8.9, e1.2   <vec$->
  lgl$#-          %8.11 = IsType                   %8.10 isA val+   <true>
  lgl$#-          %8.12 = IsType                   %8.10 isA val?-
  cp              %8.13 = Checkpoint                -> BB10 (default) | BB9 (if assume failed)
BB7   <- [6]
  fs              %7.0  = FrameState         R     0x560397ebaa70+183: [%6.1, 1L, %6.2, %6.9], env=e1.2
  void                    Deopt              !v    %7.0   !
BB10   <- [8]
  void                    Assume             D     %8.11, %8.13 (DeadBranchReached@0x560398f6e258[Test#3])
  val?^ | miss    %10.1 = LdVar              eR    i, e1.2
  lgl$#-          %10.2 = IsType                   %10.1 isA int$-
  void                    Assume             D     %10.2, %8.13 (Typecheck@0x560398f6e258[Type#13])
  int$-           %10.4 = CastType           d     dn %10.1
  void                    Assume             D     %8.12, %8.13 (Typecheck@0x560398f6e258[Type#11])
  val?-           %10.6 = CastType           d     dn %8.10   <vec$->
  val?            %10.7 = Extract2_1D        wed   %10.6, %10.4, elided   <cls>
  void                    StVar              lW    fdef, %10.7, e1.2
  cp              %10.9 = Checkpoint                -> BB12 (default) | BB11 (if assume failed)
BB9   <- [8]
  fs              %9.0  = FrameState         R     0x560397ebaa70+258: [%6.1, 1L, %6.2, %8.10], env=e1.2
  void                    Deopt              !v    %9.0   !
BB12   <- [10]
  val?^ | miss    %12.0 = LdVar              eR    is, e1.2
  lgl$#-          %12.1 = Identical                %12.0, function(object, class2) <(rir::DispatchTable*|...
  void                    Assume             D     %12.1, %10.9 (CallTarget@0x560398f6e258[Call#2])
  prom-           %12.3 = MkArg                    unboundValue, .checkGroupSigLength[0x56039943cee0]_p0 (!refl), e1.2
  val?            %12.4 = Call               !v    function(object, class2) <(rir::DispatchTable*|...(%12.3, "groupGenericFunction") e1.2   <lgl$->
  lgl$#-          %12.5 = IsType                   %12.4 isA lgl$-
  cp              %12.6 = Checkpoint                -> BB14 (default) | BB13 (if assume failed)
BB11   <- [10]
  fs              %11.0 = FrameState         R     0x560397ebaa70+324: [%6.1, 1L, %6.2], env=e1.2
  void                    Deopt              !v    %11.0   !
BB14   <- [12]
  void                    Assume             D     %12.5, %12.6 (Typecheck@0x560398f6e258[Type#16])
  lgl$-           %14.1 = CastType           d     dn %12.4
  lgl$-           %14.2 = Not                d     %14.1, elided
  lgl$#-          %14.3 = CheckTrueFalse     e     %14.2
  void                    Branch                   %14.3 -> BB123 (if true) | BB15 (if false)
BB13   <- [12]
  fs              %13.0 = FrameState         R     0x560397ebaa70+361: [%6.1, 1L, %6.2, %12.4], env=e1.2
  void                    Deopt              !v    %13.0   !
BB123   <- [14]
  (cls|spec|blt)  %123.0 = LdFun              !v    warning, e1.2
  fs              %123.1 = FrameState         R     0x560397ebaa70+383: [%6.1, 1L, %6.2, %123.0], env=e1.2
  void                    Deopt              !v    %123.1, DeadCall@0x560398f6e258[Call#3], %123.0   !
BB15   <- [14]
  val?^ | miss    %15.0 = LdVar              eR    length, e1.2
  lgl$#-          %15.1 = Identical                <blt length>, %15.0   <true>
  void                    Assume             D     %15.1, %12.6 (DeadBranchReached@0x560398f6e258[Test#4])
  (cls|spec|blt)  %15.3 = LdFun              !v    @, <0x560395a0fbd8>, e1.2
  prom-           %15.4 = MkArg                    unboundValue, .checkGroupSigLength[0x56039943cee0]_p1, e1.2
  prom-           %15.5 = MkArg                    unboundValue, .checkGroupSigLength[0x56039943cee0]_p2, e1.2
  val?            %15.6 = Call               !v    %15.3(%15.4, %15.5) e1.2   <vec->
  lgl$#-          %15.7 = IsType                   %15.6 isA val?-
  cp              %15.8 = Checkpoint                -> BB17 (default) | BB16 (if assume failed)
BB17   <- [15]
  void                    Assume             D     %15.7, %15.8 (Typecheck@0x560398f6e258[Type#24])
  val?-           %17.1 = CastType           d     dn %15.6   <vec->
  (int|real)$-    %17.2 = CallSafeBuiltin    wed   length(%17.1)    <int$->
  lgl$#-          %17.3 = IsType                   %17.2 isA int$-
  cp              %17.4 = Checkpoint                -> BB19 (default) | BB18 (if assume failed)
BB16   <- [15]
  fs              %16.0 = FrameState         R     0x560397ebaa70+531: [%6.1, 1L, %6.2, <blt length>, %15.6], env=e1.2
  void                    Deopt              !v    %16.0   !
BB19   <- [17]
  void                    Assume             D     %17.3, %17.4 (Typecheck@0x560398f6e258[Type#25])
  int$-           %19.1 = CastType           d     dn %17.2
  lgl$#-          %19.2 = CheckTrueFalse     e     %19.1
  void                    Branch                   %19.2 -> BB116 (if true) | BB20 (if false)
BB18   <- [17]
  fs              %18.0 = FrameState         R     0x560397ebaa70+553: [%6.1, 1L, %6.2, %17.2], env=e1.2
  void                    Deopt              !v    %18.0   !
BB116   <- [19]
  (cls|spec|blt)  %116.0 = LdFun              !v    @, <0x560395a0fbd8>, e1.2
  prom-           %116.1 = MkArg                    unboundValue, .checkGroupSigLength[0x56039943cee0]_p26, e1.2
  prom-           %116.2 = MkArg                    unboundValue, .checkGroupSigLength[0x56039943cee0]_p27, e1.2
  val?            %116.3 = Call               !v    %116.0(%116.1, %116.2) e1.2   <vec$->
  val?^ | miss    %116.4 = LdVar              eR    gnames !upd, e1.2
  val?            %116.5 = Force!<wrapped>    !v    %116.4, e1.2   <vec$->
  lgl$#-          %116.6 = IsType                   %116.5 isA val?-
  lgl$#-          %116.7 = IsType                   %116.3 isA val?-
  cp              %116.8 = Checkpoint                -> BB118 (default) | BB117 (if assume failed)
BB20   <- [19]
  val?^ | miss    %20.0 = LdVar              eR    c, e1.2
  lgl$#-          %20.1 = Identical                <blt c>, %20.0   <true>
  void                    Assume             D     %20.1, %17.4 (DeadBranchReached@0x560398f6e258[Test#5])
  val?^ | miss    %20.3 = LdVar              eR    funs, e1.2
  lgl$#-          %20.4 = IsType                   %20.3 isA val?~- | miss
  void                    Assume             D     %20.4, %17.4 (Typecheck@0x560398f6e258[Type#41])
  val?~- | miss   %20.6 = CastType           d     dn %20.3
  val?-           %20.7 = Force!<value>            %20.6,    <vec$->
  val?^ | miss    %20.8 = LdVar              eR    getGroupMembers, e1.2
  lgl$#-          %20.9 = Identical                %20.8, function(group, recursive=FALSE, character=TRU|...
  void                    Assume             D     %20.9, %17.4 (CallTarget@0x560398f6e258[Call#13])
  prom-           %20.11 = MkArg                    unboundValue, .checkGroupSigLength[0x56039943cee0]_p3, e1.2
  val?            %20.12 = StaticCall         !v    getGroupMembers[0x56039c122bc0](%20.11, true, false) e1.2   <vec->
  lgl$#-          %20.13 = IsType                   %20.12 isA val?-
  cp              %20.14 = Checkpoint                -> BB22 (default) | BB21 (if assume failed)
BB118   <- [116]
  val?^ | miss    %118.0 = LdVar              eR    i, e1.2
  lgl$#-          %118.1 = IsType                   %118.0 isA int$-
  void                    Assume             D     %118.1, %116.8 (Typecheck@0x560398f6e258[Type#30])
  int$-           %118.3 = CastType           d     dn %118.0
  void                    Assume             D     %116.7, %116.8 (Typecheck@0x560398f6e258[Type#28])
  val?-           %118.5 = CastType           d     dn %116.3   <vec$->
  void                    Assume             D     %116.6, %116.8 (Typecheck@0x560398f6e258[Type#29])
  val?-           %118.7 = CastType           d     dn %116.5   <vec$->
  val?-           %118.8 = Subassign2_1D      wed   %118.5, %118.7, %118.3, elided
  void                    StVar              lW    gnames, %118.8, e1.2
  cp              %118.10 = Checkpoint                -> BB120 (default) | BB119 (if assume failed)
BB117   <- [116]
  fs              %117.0 = FrameState         R     0x560397ebaa70+620: [%6.1, 1L, %6.2, %116.3, %116.5], env=e1.2
  void                    Deopt              !v    %117.0   !
BB22   <- [20]
  void                    Assume             D     %20.13, %20.14 (Typecheck@0x560398f6e258[Type#43])
  val?-           %22.1 = CastType           d     dn %20.12   <vec->
  val+            %22.2 = CallSafeBuiltin    wed   c(%20.7, %22.1)    <vec->
  void                    StVar              lW    funs, %22.2, e1.2
  goto BB23
BB21   <- [20]
  fs              %21.0 = FrameState         R     0x560397ebaa70+875: [%6.1, 1L, %6.2, <blt c>, %20.7, %20.12], env=e1.2
  void                    Deopt              !v    %21.0   !
BB120   <- [118]
  val?^ | miss    %120.0 = LdVar              eR    lapply, e1.2
  lgl$#-          %120.1 = Identical                %120.0, function(X, FUN, ...) <(rir::DispatchTable*)0x|...
  void                    Assume             D     %120.1, %118.10 (CallTarget@0x560398f6e258[Call#9])
  prom-           %120.3 = MkArg                    unboundValue, .checkGroupSigLength[0x56039943cee0]_p28, e1.2
  prom-           %120.4 = MkArg                    unboundValue, .checkGroupSigLength[0x56039943cee0]_p31, e1.2
  val?            %120.5 = StaticCall         !v    lapply[0x560399ce7730](%120.3, %120.4) { 0 1 } e1.2   <vec$->
  val?^ | miss    %120.6 = LdVar              eR    generics !upd, e1.2
  val?            %120.7 = Force!<wrapped>    !v    %120.6, e1.2   <vec$->
  lgl$#-          %120.8 = IsType                   %120.7 isA val?-
  lgl$#-          %120.9 = IsType                   %120.5 isA val?-
  cp              %120.10 = Checkpoint                -> BB122 (default) | BB121 (if assume failed)
BB119   <- [118]
  fs              %119.0 = FrameState         R     0x560397ebaa70+649: [%6.1, 1L, %6.2], env=e1.2
  void                    Deopt              !v    %119.0   !
BB23   <- [22, 122]
  cp              %23.0 = Checkpoint                -> BB25 (default) | BB24 (if assume failed)
BB122   <- [120]
  val?^ | miss    %122.0 = LdVar              eR    i, e1.2
  lgl$#-          %122.1 = IsType                   %122.0 isA int$-
  void                    Assume             D     %122.1, %120.10 (Typecheck@0x560398f6e258[Type#37])
  int$-           %122.3 = CastType           d     dn %122.0
  void                    Assume             D     %120.9, %120.10 (Typecheck@0x560398f6e258[Type#35])
  val?-           %122.5 = CastType           d     dn %120.5   <vec$->
  void                    Assume             D     %120.8, %120.10 (Typecheck@0x560398f6e258[Type#36])
  val?-           %122.7 = CastType           d     dn %120.7   <vec$->
  val?-           %122.8 = Subassign2_1D      wed   %122.5, %122.7, %122.3, elided
  void                    StVar              lW    generics, %122.8, e1.2
  void                    StVar              lW    recall, true, e1.2
  goto BB23
BB121   <- [120]
  fs              %121.0 = FrameState         R     0x560397ebaa70+700: [%6.1, 1L, %6.2, %120.5, %120.7], env=e1.2
  void                    Deopt              !v    %121.0   !
BB25   <- [23]
  int$-           %25.0 = Inc                      %6.2
  lgl$-           %25.1 = Lt                 d     1L, %25.0, elided
  lgl$#-          %25.2 = Identical                %25.1, true
  void                    Branch                   %25.2 -> BB33 (if true) | BB26 (if false)
BB24   <- [23]
  fs              %24.0 = FrameState         R     0x560397ebaa70+911: [%6.1, 1L, %6.2], env=e1.2
  void                    Deopt              !v    %24.0   !
BB33   <- [25]
  val?^ | miss    %33.0 = LdVar              eR    recall, e1.2
  lgl$#-          %33.1 = IsType                   %33.0 isA lgl$-
  void                    Assume             D     %33.1, %23.0 (Typecheck@0x560398f6e258[Type#83])
  lgl$-           %33.3 = CastType           d     dn %33.0
  void                    Visible            v     
  lgl$#-          %33.5 = CheckTrueFalse     e     %33.3
  void                    Branch                   %33.5 -> BB115 (if true) | BB34 (if false)
BB26   <- [25]
  int$-           %26.0 = Extract2_1D        wed   %6.1, %25.0, elided
  void                    StVar              lW    i, %26.0, e1.2
  val?^ | miss    %26.2 = LdVar              eR    gnames, e1.2
  val?            %26.3 = Force!             !v    %26.2, e1.2   <val?_>
  lgl$#-          %26.4 = IsType                   %26.3 isA val+   <@?>
  void                    Branch                   %26.4 -> BB32 (if true) | BB27 (if false)
BB115   <- [33]
  val?^ | miss    %115.0 = LdVar              eR    Recall, e1.2
  lgl$#-          %115.1 = Identical                %115.0, function(...) <(rir::DispatchTable*)0x56039722|...
  void                    Assume             D     %115.1, %23.0 (CallTarget@0x560398f6e258[Call#26])
  prom-           %115.3 = MkArg                    unboundValue, .checkGroupSigLength[0x56039943cee0]_p22, e1.2
  prom-           %115.4 = MkArg                    unboundValue, .checkGroupSigLength[0x56039943cee0]_p24, e1.2
  dots-           %115.5 = DotsList           l     %115.3, %115.4
  ct              %115.6 = PushContext        lCL   %115.5, Recall(unlist(gnames, FALSE), unlist(generics,|..., function(...) <(rir::DispatchTable*)0x56039722|..., e1.2
  env             e115.7 = MkEnv              l     ...=%115.5, parent=R_BaseNamespace, context 1
  prom-           %115.8 = MkArg                    unboundValue, .checkGroupSigLength[0x56039943cee0]_p32, e115.7
  val?            %115.9 = Call               !     <spec .Internal>(%115.8) e115.7   <(lgl|vec)->
  val?            %115.10 = PopContext         C     %115.9, %115.6   <vec->
  goto BB100
BB34   <- [33]
  val?^ | miss    %34.0 = LdVar              eR    unique, e1.2
  lgl$#-          %34.1 = Identical                %34.0, function(x, incomparables=FALSE, ...) <(rir::D|...
  void                    Assume             D     %34.1, %23.0 (CallTarget@0x560398f6e258[Call#29])
  val?^ | miss    %34.3 = LdVar              eR    funs, e1.2
  lgl$#-          %34.4 = IsType                   %34.3 isA val?~- | miss
  void                    Assume             D     %34.4, %23.0 (Typecheck@0x560398f6e258[Type#89])
  val?~- | miss   %34.6 = CastType           d     dn %34.3
  val?-           %34.7 = Force!<value>            %34.6,    <vec->
  val?            %34.8 = StaticCall         !v    unique[0x56039a110800](%34.7) { 0 } e1.2   <vec->
  void                    StVar              lW    funs, %34.8, e1.2
  cp              %34.10 = Checkpoint                -> BB36 (default) | BB35 (if assume failed)
BB32   <- [26]
  val?^ | miss    %32.0 = LdVar              eR    i, e1.2
  val?            %32.1 = Force!             !v    %32.0, e1.2   <val?_>
  goto BB28
BB27   <- [26]
  prom-           %27.0 = MkArg                    unboundValue, .checkGroupSigLength[0x56039943cee0]_p5, e1.2
  goto BB28
BB100   <- [99, 115]
  val?            %100.0 = Phi                      %99.5:BB99, %115.10:BB115
  void                    Return             l     %100.0
BB36   <- [34]
  val?^ | miss    %36.0 = LdVar              eR    lapply, e1.2
  lgl$#-          %36.1 = Identical                %36.0, function(X, FUN, ...) <(rir::DispatchTable*)0x|...
  void                    Assume             D     %36.1, %34.10 (CallTarget@0x560398f6e258[Call#30])
  prom-           %36.3 = MkArg                    unboundValue, .checkGroupSigLength[0x56039943cee0]_p8 (!refl), e1.2
  cls             %36.4 = MkCls                    .checkGroupSigLength@Prom(9)0, e1.2
  prom-           %36.5 = MkArg                    %36.4, .checkGroupSigLength[0x56039943cee0]_p9 (!refl), e1.2
  ct              %36.6 = PushContext        lCL   %36.3, %36.5, lapply(funs, function(<lst x=R_MissingArg>, {(|..., function(X, FUN, ...) <(rir::DispatchTable*)0x|..., e1.2
  cls~            %36.7 = CastType                 up %36.5
  val?^           %36.8 = CastType                 up %36.3
  env             e36.9 = MkEnv              l     X=%36.8, FUN=%36.7, ...(miss)=missingArg, parent=R_BaseNamespace, context 1
  prom-           %36.10 = MkArg                    unboundValue, .checkGroupSigLength[0x56039943cee0]_p33 (!refl), e36.9
  val?            %36.11 = StaticCall         !v    match.fun[0x5603995e65d0](%36.10) e36.9   <(cls|blt)->
  void                    StVar              lW    FUN, %36.11, e36.9
  cp              %36.13 = Checkpoint                -> BB38 (default) | BB37 (if assume failed)
BB35   <- [34]
  fs              %35.0 = FrameState         R     0x560397ebaa70+1801: [], env=e1.2
  void                    Deopt              !v    %35.0   !
BB28   <- [27, 32]
  val?            %28.0 = Phi                      %32.1:BB32, %27.0:BB27
  val?            %28.1 = Extract2_1D        !v    %26.3, %28.0, e1.2   <val?_>
  void                    StVar              lW    what, %28.1, e1.2
  val?^ | miss    %28.3 = LdVar              eR    generics, e1.2
  val?            %28.4 = Force!             !v    %28.3, e1.2   <val?_>
  lgl$#-          %28.5 = IsType                   %28.4 isA val+   <@?>
  void                    Branch                   %28.5 -> BB31 (if true) | BB29 (if false)
BB38   <- [36]
  val?^ | miss    %38.0 = LdVar              eR    is.vector, e36.9
  lgl$#-          %38.1 = Identical                %38.0, function(x, mode="any") <(rir::DispatchTable*)|...
  void                    Assume             D     %38.1, %36.13 (CallTarget@0x56039789b2f0[Call#1])
  val?^ | miss    %38.3 = LdVar              eR    X, e36.9
  val?            %38.4 = Force!<lazy>       !v    %38.3, e36.9   <(str|vec)>
  lgl$#-          %38.5 = CallSafeBuiltin    wed   is.vector(%38.4, "any")    <lgl$->
  cp              %38.6 = Checkpoint                -> BB40 (default) | BB39 (if assume failed)
BB37   <- [36]
  fs              %37.0 = FrameState         R     0x560397ebaa70+1838: [], env=e1.2
  fs              %37.1 = FrameState         R     0x56039646dc40+46: [], env=e36.9, next=%37.0
  void                    Deopt              !v    %37.1   !
BB31   <- [28]
  val?^ | miss    %31.0 = LdVar              eR    i, e1.2
  val?            %31.1 = Force!             !v    %31.0, e1.2   <val?_>
  goto BB30
BB29   <- [28]
  prom-           %29.0 = MkArg                    unboundValue, .checkGroupSigLength[0x56039943cee0]_p4, e1.2
  goto BB30
BB40   <- [38]
  lgl$#-          %40.0 = Not                d     %38.5, elided
  void                    Branch                   %38.5 -> BB114 (if true) | BB41 (if false)
BB39   <- [38]
  fs              %39.0 = FrameState         R     0x560397ebaa70+1838: [], env=e1.2
  fs              %39.1 = FrameState         R     0x56039646dc40+78: [], env=e36.9, next=%39.0
  prom-           %39.2 = MkArg                    %38.4, .checkGroupSigLength[0x56039943cee0]_p35 (!refl), e36.9
  val?~           %39.3 = CastType                 up %39.2
  env             e39.4 = (MkEnv)            l     mode(miss)="any", x=%39.3, parent=R_BaseNamespace, context 0
  fs              %39.5 = FrameState         R     0x5603979000c0+41: [%38.5], env=e39.4, next=%39.1
  void                    Deopt              !v    %39.5   !
BB30   <- [29, 31]
  val?            %30.0 = Phi                      %31.1:BB31, %29.0:BB29
  val?            %30.1 = Extract2_1D        !v    %28.4, %30.0, e1.2   <val?_>
  void                    StVar              lW    fdef, %30.1, e1.2
  (cls|spec|blt)  %30.3 = LdFun              !v    is, e1.2
  fs              %30.4 = FrameState         R     0x560397ebaa70+1095: [%6.1, 1L, %25.0, %30.3], env=e1.2
  void                    Deopt              !v    %30.4, DeadCall@0x560398f6e258[Call#14], %30.3   !
BB114   <- [40]
  val?^ | miss    %114.0 = LdVar              eR    is.object, e36.9
  lgl$#-          %114.1 = Identical                <blt is.object>, %114.0   <true>
  void                    Assume             D     %114.1, %38.6 (DeadBranchReached@0x56039789b2f0[Test#0])
  val?^ | miss    %114.3 = LdVar              eR    X, e36.9
  val?            %114.4 = Force!<wrapped>    !v    %114.3, e36.9   <(str|vec)->
  lgl$#-          %114.5 = CallSafeBuiltin    wed   is.object(%114.4)    <lgl$->
  lgl$-           %114.6 = LOr                      %40.0, %114.5
  goto BB42
BB41   <- [40]
  goto BB42
BB42   <- [41, 114]
  lgl$-           %42.0 = Phi                      %114.6:BB114, %40.0:BB41
  cp              %42.1 = Checkpoint                -> BB44 (default) | BB43 (if assume failed)
BB44   <- [42]
  lgl$#-          %44.0 = CheckTrueFalse     e     %42.0
  void                    Branch                   %44.0 -> BB113 (if true) | BB45 (if false)
BB43   <- [42]
  fs              %43.0 = FrameState         R     0x560397ebaa70+1838: [], env=e1.2
  fs              %43.1 = FrameState         R     0x56039646dc40+189: [%42.0], env=e36.9, next=%43.0
  void                    Deopt              !v    %43.1   !
BB113   <- [44]
  val?^ | miss    %113.0 = LdVar              eR    as.list, e36.9
  lgl$#-          %113.1 = Identical                %113.0, function(x, ...) <(rir::DispatchTable*)0x56039|...
  void                    Assume             D     %113.1, %42.1 (CallTarget@0x56039789b2f0[Call#3])
  val?^ | miss    %113.3 = LdVar              eR    X, e36.9
  val?            %113.4 = Force!<wrapped>    !v    %113.3, e36.9   <vec>
  val?            %113.5 = StaticCall         !v    as.list[0x56039a8db980](%113.4) { 0 } e36.9   <vec>
  void                    StVar              lW    X, %113.5, e36.9
  goto BB46
BB45   <- [44]
  goto BB46
BB46   <- [45, 113]
  val?^ | miss    %46.0 = LdVar              eR    X, e36.9
  val?            %46.1 = Force!<wrapped>    !v    %46.0, e36.9   <(str|vec)>
  (nil|str)-      %46.2 = Names                    %46.1
  int$-           %46.3 = Length                   %46.1
  vec-            %46.4 = CallSafeBuiltin    wed   vector("list", %46.3) 
  val+            %46.5 = SetNames           e     %46.4, %46.2
  goto BB47
BB47   <- [48, 46]
  int$-           %47.0 = Phi                      0L:BB46, %47.2:BB48
  val?            %47.1 = Phi                      %46.5:BB46, %48.6:BB48
  int$-           %47.2 = Inc                      %47.0
  lgl$-           %47.3 = Lt                 d     %46.3, %47.2, elided
  lgl$#-          %47.4 = Identical                %47.3, true
  void                    Branch                   %47.4 -> BB49 (if true) | BB48 (if false)
BB49   <- [47]
  val?            %49.0 = PopContext         C     %47.1, %36.6   <vec->
  void                    StVar              lW    fdefs, %49.0, e1.2
  (cls|spec|blt)  %49.2 = LdFun              !v    rep, <0x560395a249b0>, e1.2
  prom-           %49.3 = MkArg                    unboundValue, .checkGroupSigLength[0x56039943cee0]_p10, e1.2
  val?            %49.4 = Call               !v    %49.2(0, %49.3) e1.2   <real->
  void                    StVar              lW    sigs, %49.4, e1.2
  cp              %49.6 = Checkpoint                -> BB51 (default) | BB50 (if assume failed)
BB48   <- [47]
  void                    StVar              lW    i, %47.2, e36.9
  (cls|spec|blt)  %48.1 = LdFun              !v    FUN, e36.9
  prom-           %48.2 = MkArg                    unboundValue, .checkGroupSigLength[0x56039943cee0]_p36, e36.9
  (miss|dots)     %48.3 = LdDots             R     , e36.9
  *dots-          %48.4 = ExpandDots               %48.3
  val?            %48.5 = NamedCall          !v    %48.1(%48.2, .xpandDotsTrigger=%48.4) e36.9   <val?>
  val?            %48.6 = SetVecElt          e     %48.5, %47.1, %47.2
  goto BB47
BB51   <- [49]
  val?^ | miss    %51.0 = LdVar              eR    seq_along, e1.2
  lgl$#-          %51.1 = Identical                <blt seq_along>, %51.0   <true>
  void                    Assume             D     %51.1, %49.6 (DeadBranchReached@0x560398f6e258[Test#10])
  val             %51.3 = ChkMissing         e     %49.4
  val?            %51.4 = CallBuiltin        !v    seq_along(%49.4) e1.2   <int->
  cp              %51.5 = Checkpoint                -> BB53 (default) | BB52 (if assume failed)
BB50   <- [49]
  fs              %50.0 = FrameState         R     0x560397ebaa70+1903: [], env=e1.2
  void                    Deopt              !v    %50.0   !
BB53   <- [51]
  val?+           %53.0 = ToForSeq           e     %51.4
  int$-           %53.1 = Length                   %53.0
  lgl$-           %53.2 = Lt                 d     %53.1, %6.2, elided   <false>
  lgl$#-          %53.3 = Identical                %53.2, true
  void                    AssumeNot          D     %53.3, %51.5 (DeadBranchReached@0x560398f6e258[Test#11])
  val?            %53.5 = Extract2_1D        wed   %53.0, %6.2, elided
  void                    StVar              lW    i, %53.5, e1.2
  cp              %53.7 = Checkpoint                -> BB55 (default) | BB54 (if assume failed)
BB52   <- [51]
  fs              %52.0 = FrameState         R     0x560397ebaa70+1994: [%51.4], env=e1.2
  void                    Deopt              !v    %52.0   !
BB55   <- [53]
  val?^ | miss    %55.0 = LdVar              eR    funs, e1.2
  lgl$#-          %55.1 = IsType                   %55.0 isA val?~- | miss
  void                    Assume             D     %55.1, %53.7 (Typecheck@0x560398f6e258[Type#99])
  val?~- | miss   %55.3 = CastType           d     dn %55.0
  val?-           %55.4 = Force!<value>            %55.3,    <vec->
  lgl$#-          %55.5 = IsType                   %55.4 isA val+   <true>
  void                    Assume             D     %55.5, %53.7 (DeadBranchReached@0x560398f6e258[Test#12])
  val             %55.7 = ChkMissing         e     %53.5
  lgl$#-          %55.8 = IsType                   %55.7 isA int$-
  void                    Assume             D     %55.8, %53.7 (Typecheck@0x560398f6e258[Type#101])
  int$-           %55.10 = CastType           d     dn %55.7
  val?            %55.11 = Extract2_1D        wed   %55.4, %55.10, elided   <str$+>
  void                    StVar              lW    what, %55.11, e1.2
  cp              %55.13 = Checkpoint                -> BB57 (default) | BB56 (if assume failed)
BB54   <- [53]
  fs              %54.0 = FrameState         R     0x560397ebaa70+2039: [%53.0, %53.1, %6.2], env=e1.2
  void                    Deopt              !v    %54.0   !
BB57   <- [55]
  val?^ | miss    %57.0 = LdVar              eR    fdefs, e1.2
  lgl$#-          %57.1 = IsType                   %57.0 isA val?~- | miss
  void                    Assume             D     %57.1, %55.13 (Typecheck@0x560398f6e258[Type#103])
  val?~- | miss   %57.3 = CastType           d     dn %57.0
  val?-           %57.4 = Force!<value>            %57.3,    <vec->
  lgl$#-          %57.5 = IsType                   %57.4 isA val+   <true>
  void                    Assume             D     %57.5, %55.13 (DeadBranchReached@0x560398f6e258[Test#13])
  val?            %57.7 = Extract2_1D        wed   %57.4, %55.10, elided   <cls>
  lgl$-           %57.8 = Is                       %57.7, NULL
  void                    StVar              lW    fdef, %57.7, e1.2
  cp              %57.10 = Checkpoint                -> BB59 (default) | BB58 (if assume failed)
BB56   <- [55]
  fs              %56.0 = FrameState         R     0x560397ebaa70+2114: [%53.0, %53.1, %6.2], env=e1.2
  void                    Deopt              !v    %56.0   !
BB59   <- [57]
  val             %59.0 = ChkMissing         e     %57.7
  lgl$#-          %59.1 = CheckTrueFalse     e     %57.8
  void                    Branch                   %59.1 -> BB112 (if true) | BB60 (if false)
BB58   <- [57]
  fs              %58.0 = FrameState         R     0x560397ebaa70+2189: [%53.0, %53.1, %6.2], env=e1.2
  void                    Deopt              !v    %58.0   !
BB112   <- [59]
  goto BB67
BB60   <- [59]
  val?^ | miss    %60.0 = LdVar              eR    is, e1.2
  lgl$#-          %60.1 = Identical                %60.0, function(object, class2) <(rir::DispatchTable*|...
  void                    Assume             D     %60.1, %57.10 (CallTarget@0x560398f6e258[Call#34])
  prom-           %60.3 = MkArg                    unboundValue, .checkGroupSigLength[0x56039943cee0]_p12 (!refl), e1.2
  val?            %60.4 = Call               !v    function(object, class2) <(rir::DispatchTable*|...(%60.3, "genericFunction") e1.2   <lgl$->
  lgl$#-          %60.5 = IsType                   %60.4 isA lgl$-
  cp              %60.6 = Checkpoint                -> BB62 (default) | BB61 (if assume failed)
BB67   <- [88, 112, 66, 85]
  int$-           %67.0 = Phi                      %6.2:BB66, %67.1:BB85, %67.1:BB88, %6.2:BB112
  int$-           %67.1 = Inc                      %67.0
  cp              %67.2 = Checkpoint                -> BB69 (default) | BB68 (if assume failed)
BB62   <- [60]
  void                    Assume             D     %60.5, %60.6 (Typecheck@0x560398f6e258[Type#109])
  lgl$-           %62.1 = CastType           d     dn %60.4
  lgl$-           %62.2 = Not                d     %62.1, elided
  lgl$#-          %62.3 = CheckTrueFalse     e     %62.2
  void                    Branch                   %62.3 -> BB111 (if true) | BB63 (if false)
BB61   <- [60]
  fs              %61.0 = FrameState         R     0x560397ebaa70+2266: [%53.0, %53.1, %6.2, %60.4], env=e1.2
  void                    Deopt              !v    %61.0   !
BB69   <- [67]
  lgl$-           %69.0 = Lt                 d     %53.1, %67.1, elided
  lgl$#-          %69.1 = Identical                %69.0, true
  void                    Branch                   %69.1 -> BB89 (if true) | BB70 (if false)
BB68   <- [67]
  fs              %68.0 = FrameState         R     0x560397ebaa70+2588: [%53.0, %53.1, %67.0], env=e1.2
  void                    Deopt              !v    %68.0   !
BB111   <- [62]
  (cls|spec|blt)  %111.0 = LdFun              !v    warning, e1.2
  fs              %111.1 = FrameState         R     0x560397ebaa70+2547: [%53.0, %53.1, %6.2, %111.0], env=e1.2
  void                    Deopt              !v    %111.1, DeadCall@0x560398f6e258[Call#39], %111.0   !
BB63   <- [62]
  val?^ | miss    %63.0 = LdVar              eR    environment, e1.2
  lgl$#-          %63.1 = Identical                %63.0, function(fun=NULL) <(rir::DispatchTable*)0x560|...
  void                    Assume             D     %63.1, %60.6 (CallTarget@0x560398f6e258[Call#35])
  val?^ | miss    %63.3 = LdVar              eR    fdef, e1.2
  val?            %63.4 = Force!<value>      !v    %63.3, e1.2   <cls>
  prom-           %63.5 = MkArg                    %63.4, .checkGroupSigLength[0x56039943cee0]_p13 (!refl), 
  val?            %63.6 = StaticCall         !v    environment[0x5603986b6f10](%63.5) e1.2   <env->
  void                    StVar              lW    ev, %63.6, e1.2
  (cls|spec|blt)  %63.8 = LdFun              !v    $, <0x560395a0fc10>, e1.2
  prom-           %63.9 = MkArg                    unboundValue, .checkGroupSigLength[0x56039943cee0]_p14, e1.2
  prom-           %63.10 = MkArg                    unboundValue, .checkGroupSigLength[0x56039943cee0]_p15, e1.2
  val?            %63.11 = Call               !v    %63.8(%63.9, %63.10) e1.2   <(int|real)$->
  lgl$-           %63.12 = Is                       %63.11, NULL
  void                    StVar              lW    sigl, %63.11, e1.2
  cp              %63.14 = Checkpoint                -> BB65 (default) | BB64 (if assume failed)
BB89   <- [69]
  val?^ | miss    %89.0 = LdVar              eR    max, e1.2
  lgl$#-          %89.1 = Identical                <blt max>, %89.0   <true>
  void                    Assume             D     %89.1, %67.2 (DeadBranchReached@0x560398f6e258[Test#16])
  val?^ | miss    %89.3 = LdVar              eR    sigs, e1.2
  lgl$#-          %89.4 = IsType                   %89.3 isA real-
  void                    Assume             D     %89.4, %67.2 (Typecheck@0x560398f6e258[Type#162])
  real-           %89.6 = CastType           d     dn %89.3
  real$-          %89.7 = CallSafeBuiltin    wed   max(%89.6)    <real$->
  void                    StVar              lW    n, %89.7, e1.2
  cp              %89.9 = Checkpoint                -> BB91 (default) | BB90 (if assume failed)
BB70   <- [69]
  val?            %70.0 = Extract2_1D        wed   %53.0, %67.1, elided
  void                    StVar              lW    i, %70.0, e1.2
  cp              %70.2 = Checkpoint                -> BB72 (default) | BB71 (if assume failed)
BB65   <- [63]
  lgl$#-          %65.0 = CheckTrueFalse     e     %63.12
  void                    Branch                   %65.0 -> BB110 (if true) | BB66 (if false)
BB64   <- [63]
  fs              %64.0 = FrameState         R     0x560397ebaa70+2377: [%53.0, %53.1, %6.2, %63.11], env=e1.2
  void                    Deopt              !v    %64.0   !
BB91   <- [89]
  val?^ | miss    %91.0 = LdVar              eR    &, e1.2
  lgl$#-          %91.1 = Identical                <blt &>, %91.0   <true>
  void                    Assume             D     %91.1, %89.9 (DeadBranchReached@0x560398f6e258[Test#17])
  lgl-            %91.3 = Lt                 wed   %89.6, %89.7, elided   <lgl->
  lgl-            %91.4 = Gt                 wed   %89.6, 0, elided   <lgl->
  val+            %91.5 = CallSafeBuiltin    wed   &(%91.3, %91.4)    <lgl->
  void                    StVar              lW    reset, %91.5, e1.2
  cp              %91.7 = Checkpoint                -> BB93 (default) | BB92 (if assume failed)
BB90   <- [89]
  fs              %90.0 = FrameState         R     0x560397ebaa70+3281: [], env=e1.2
  void                    Deopt              !v    %90.0   !
BB72   <- [70]
  val?^ | miss    %72.0 = LdVar              eR    funs, e1.2
  lgl$#-          %72.1 = IsType                   %72.0 isA val?~- | miss
  void                    Assume             D     %72.1, %70.2 (Typecheck@0x560398f6e258[Type#130])
  val?~- | miss   %72.3 = CastType           d     dn %72.0
  val?-           %72.4 = Force!<value>            %72.3,    <vec->
  lgl$#-          %72.5 = IsType                   %72.4 isA val+   <true>
  void                    Assume             D     %72.5, %70.2 (DeadBranchReached@0x560398f6e258[Test#14])
  val             %72.7 = ChkMissing         e     %70.0
  lgl$#-          %72.8 = IsType                   %72.7 isA int$-
  void                    Assume             D     %72.8, %70.2 (Typecheck@0x560398f6e258[Type#132])
  int$-           %72.10 = CastType           d     dn %72.7
  val?            %72.11 = Extract2_1D        wed   %72.4, %72.10, elided   <str$->
  void                    StVar              lW    what, %72.11, e1.2
  cp              %72.13 = Checkpoint                -> BB74 (default) | BB73 (if assume failed)
BB71   <- [70]
  fs              %71.0 = FrameState         R     0x560397ebaa70+2617: [%53.0, %53.1, %67.1], env=e1.2
  void                    Deopt              !v    %71.0   !
BB110   <- [65]
  (cls|spec|blt)  %110.0 = LdFun              !v    .setupMethodsTables, e1.2
  fs              %110.1 = FrameState         R     0x560397ebaa70+2398: [%53.0, %53.1, %6.2, %110.0], env=e1.2
  void                    Deopt              !v    %110.1, DeadCall@0x560398f6e258[Call#37], %110.0   !
BB66   <- [65]
  val             %66.0 = ChkMissing         e     %63.11
  val?^ | miss    %66.1 = LdVar              eR    sigs !upd, e1.2
  lgl$#-          %66.2 = IsType                   %66.1 isA real-
  void                    Assume             D     %66.2, %63.14 (Typecheck@0x560398f6e258[Type#119])
  real-           %66.4 = CastType           d     dn %66.1
  val?^ | miss    %66.5 = LdVar              eR    i, e1.2
  lgl$#-          %66.6 = IsType                   %66.5 isA int$-
  void                    Assume             D     %66.6, %63.14 (Typecheck@0x560398f6e258[Type#120])
  int$-           %66.8 = CastType           d     dn %66.5
  lgl$#-          %66.9 = IsType                   %63.11 isA val?-
  void                    Assume             D     %66.9, %63.14 (Typecheck@0x560398f6e258[Type#114])
  val?-           %66.11 = CastType           d     dn %63.11   <(int|real)$->
  val?-           %66.12 = Subassign1_1D      wed   %66.11, %66.4, %66.8, elided
  void                    StVar              lW    sigs, %66.12, e1.2
  goto BB67
BB93   <- [91]
  val?^ | miss    %93.0 = LdVar              eR    any, e1.2
  lgl$#-          %93.1 = Identical                <blt any>, %93.0   <true>
  void                    Assume             D     %93.1, %91.7 (DeadBranchReached@0x560398f6e258[Test#18])
  val?            %93.3 = CallBuiltin        !v    any(%91.5) e1.2   <lgl$->
  lgl$#-          %93.4 = IsType                   %93.3 isA lgl$-
  cp              %93.5 = Checkpoint                -> BB95 (default) | BB94 (if assume failed)
BB92   <- [91]
  fs              %92.0 = FrameState         R     0x560397ebaa70+3437: [], env=e1.2
  void                    Deopt              !v    %92.0   !
BB74   <- [72]
  val?^ | miss    %74.0 = LdVar              eR    fdefs, e1.2
  lgl$#-          %74.1 = IsType                   %74.0 isA val?~- | miss
  void                    Assume             D     %74.1, %72.13 (Typecheck@0x560398f6e258[Type#134])
  val?~- | miss   %74.3 = CastType           d     dn %74.0
  val?-           %74.4 = Force!<value>            %74.3,    <vec->
  lgl$#-          %74.5 = IsType                   %74.4 isA val+   <true>
  void                    Assume             D     %74.5, %72.13 (DeadBranchReached@0x560398f6e258[Test#15])
  val             %74.7 = ChkMissing         e     %70.0
  lgl$#-          %74.8 = IsType                   %74.7 isA int$-
  void                    Assume             D     %74.8, %72.13 (Typecheck@0x560398f6e258[Type#136])
  int$-           %74.10 = CastType           d     dn %74.7
  val?            %74.11 = Extract2_1D        wed   %74.4, %74.10, elided   <cls>
  lgl$-           %74.12 = Is                       %74.11, NULL
  void                    StVar              lW    fdef, %74.11, e1.2
  cp              %74.14 = Checkpoint                -> BB76 (default) | BB75 (if assume failed)
BB73   <- [72]
  fs              %73.0 = FrameState         R     0x560397ebaa70+2692: [%53.0, %53.1, %67.1], env=e1.2
  void                    Deopt              !v    %73.0   !
BB95   <- [93]
  void                    Assume             D     %93.4, %93.5 (Typecheck@0x560398f6e258[Type#177])
  lgl$-           %95.1 = CastType           d     dn %93.3
  lgl$#-          %95.2 = CheckTrueFalse     e     %95.1
  void                    Branch                   %95.2 -> BB101 (if true) | BB96 (if false)
BB94   <- [93]
  fs              %94.0 = FrameState         R     0x560397ebaa70+3528: [%93.3], env=e1.2
  void                    Deopt              !v    %94.0   !
BB76   <- [74]
  val             %76.0 = ChkMissing         e     %74.11
  lgl$#-          %76.1 = CheckTrueFalse     e     %74.12
  void                    Branch                   %76.1 -> BB88 (if true) | BB77 (if false)
BB75   <- [74]
  fs              %75.0 = FrameState         R     0x560397ebaa70+2767: [%53.0, %53.1, %67.1], env=e1.2
  void                    Deopt              !v    %75.0   !
BB101   <- [95]
  val?^ | miss    %101.0 = LdVar              eR    funs, e1.2
  val?            %101.1 = Force!             !v    %101.0, e1.2   <val?_>
  lgl$#-          %101.2 = IsType                   %101.1 isA val+   <@?>
  void                    Branch                   %101.2 -> BB109 (if true) | BB102 (if false)
BB96   <- [95]
  goto BB97
BB88   <- [76]
  goto BB67
BB77   <- [76]
  val?^ | miss    %77.0 = LdVar              eR    is, e1.2
  lgl$#-          %77.1 = Identical                %77.0, function(object, class2) <(rir::DispatchTable*|...
  void                    Assume             D     %77.1, %74.14 (CallTarget@0x560398f6e258[Call#45])
  prom-           %77.3 = MkArg                    unboundValue, .checkGroupSigLength[0x56039943cee0]_p16 (!refl), e1.2
  val?            %77.4 = Call               !v    function(object, class2) <(rir::DispatchTable*|...(%77.3, "genericFunction") e1.2   <lgl$->
  lgl$#-          %77.5 = IsType                   %77.4 isA lgl$-
  cp              %77.6 = Checkpoint                -> BB79 (default) | BB78 (if assume failed)
BB109   <- [101]
  val?^ | miss    %109.0 = LdVar              eR    reset, e1.2
  val?            %109.1 = Force!             !v    %109.0, e1.2   <val?_>
  goto BB103
BB102   <- [101]
  prom-           %102.0 = MkArg                    unboundValue, .checkGroupSigLength[0x56039943cee0]_p21, e1.2
  goto BB103
BB97   <- [96, 107]
  cp              %97.0 = Checkpoint                -> BB99 (default) | BB98 (if assume failed)
BB79   <- [77]
  void                    Assume             D     %77.5, %77.6 (Typecheck@0x560398f6e258[Type#140])
  lgl$-           %79.1 = CastType           d     dn %77.4
  lgl$-           %79.2 = Not                d     %79.1, elided
  lgl$#-          %79.3 = CheckTrueFalse     e     %79.2
  void                    Branch                   %79.3 -> BB87 (if true) | BB80 (if false)
BB78   <- [77]
  fs              %78.0 = FrameState         R     0x560397ebaa70+2844: [%53.0, %53.1, %67.1, %77.4], env=e1.2
  void                    Deopt              !v    %78.0   !
BB103   <- [102, 109]
  val?            %103.0 = Phi                      %109.1:BB109, %102.0:BB102
  val?            %103.1 = Extract1_1D        !v    %101.1, %103.0, e1.2   <val?_>
  void                    StVar              lW    funs, %103.1, e1.2
  val?^ | miss    %103.3 = LdVar              eR    fdefs, e1.2
  val?            %103.4 = Force!             !v    %103.3, e1.2   <val?_>
  lgl$#-          %103.5 = IsType                   %103.4 isA val+   <@?>
  void                    Branch                   %103.5 -> BB108 (if true) | BB104 (if false)
BB99   <- [97]
  val?^ | miss    %99.0 = LdVar              eR    funs, e1.2
  lgl$#-          %99.1 = IsType                   %99.0 isA val?~- | miss
  void                    Assume             D     %99.1, %97.0 (Typecheck@0x560398f6e258[Type#191])
  val?~- | miss   %99.3 = CastType           d     dn %99.0
  void                    Visible            v     
  val?-           %99.5 = Force!<value>            %99.3,    <vec->
  goto BB100
BB98   <- [97]
  fs              %98.0 = FrameState         R     0x560397ebaa70+3863: [], env=e1.2
  void                    Deopt              !v    %98.0   !
BB87   <- [79]
  (cls|spec|blt)  %87.0 = LdFun              !v    warning, e1.2
  fs              %87.1 = FrameState         R     0x560397ebaa70+3125: [%53.0, %53.1, %67.1, %87.0], env=e1.2
  void                    Deopt              !v    %87.1, DeadCall@0x560398f6e258[Call#50], %87.0   !
BB80   <- [79]
  val?^ | miss    %80.0 = LdVar              eR    environment, e1.2
  lgl$#-          %80.1 = Identical                %80.0, function(fun=NULL) <(rir::DispatchTable*)0x560|...
  void                    Assume             D     %80.1, %77.6 (CallTarget@0x560398f6e258[Call#46])
  val?^ | miss    %80.3 = LdVar              eR    fdef, e1.2
  val?            %80.4 = Force!<value>      !v    %80.3, e1.2   <cls>
  prom-           %80.5 = MkArg                    %80.4, .checkGroupSigLength[0x56039943cee0]_p17 (!refl), 
  val?            %80.6 = StaticCall         !v    environment[0x5603986b6f10](%80.5) e1.2   <env->
  void                    StVar              lW    ev, %80.6, e1.2
  (cls|spec|blt)  %80.8 = LdFun              !v    $, <0x560395a0fc10>, e1.2
  prom-           %80.9 = MkArg                    unboundValue, .checkGroupSigLength[0x56039943cee0]_p18, e1.2
  prom-           %80.10 = MkArg                    unboundValue, .checkGroupSigLength[0x56039943cee0]_p19, e1.2
  val?            %80.11 = Call               !v    %80.8(%80.9, %80.10) e1.2   <real$->
  lgl$-           %80.12 = Is                       %80.11, NULL
  lgl$#-          %80.13 = IsType                   %80.11 isA real$-
  cp              %80.14 = Checkpoint                -> BB82 (default) | BB81 (if assume failed)
BB108   <- [103]
  val?^ | miss    %108.0 = LdVar              eR    reset, e1.2
  val?            %108.1 = Force!             !v    %108.0, e1.2   <val?_>
  goto BB105
BB104   <- [103]
  prom-           %104.0 = MkArg                    unboundValue, .checkGroupSigLength[0x56039943cee0]_p20, e1.2
  goto BB105
BB82   <- [80]
  void                    Assume             D     %80.13, %80.14 (Typecheck@0x560398f6e258[Type#145])
  real$-          %82.1 = CastType           d     dn %80.11
  void                    StVar              lW    sigl, %82.1, e1.2
  cp              %82.3 = Checkpoint                -> BB84 (default) | BB83 (if assume failed)
BB81   <- [80]
  fs              %81.0 = FrameState         R     0x560397ebaa70+2939: [%53.0, %53.1, %67.1, %80.11], env=e1.2
  void                    Deopt              !v    %81.0   !
BB105   <- [104, 108]
  val?            %105.0 = Phi                      %108.1:BB108, %104.0:BB104
  val?            %105.1 = Extract1_1D        !v    %103.4, %105.0, e1.2   <val?_>
  void                    StVar              lW    fdefs, %105.1, e1.2
  val             %105.3 = ChkMissing         e     %105.1
  val?+           %105.4 = ToForSeq           e     %105.1
  int$-           %105.5 = Length                   %105.4
  lgl$-           %105.6 = Lt                 d     %105.5, %6.2, elided   <@?>
  lgl$#-          %105.7 = Identical                %105.6, true
  void                    Branch                   %105.7 -> BB107 (if true) | BB106 (if false)
BB84   <- [82]
  lgl$#-          %84.0 = CheckTrueFalse     e     %80.12
  void                    Branch                   %84.0 -> BB86 (if true) | BB85 (if false)
BB83   <- [82]
  fs              %83.0 = FrameState         R     0x560397ebaa70+2955: [%53.0, %53.1, %67.1, %82.1], env=e1.2
  void                    Deopt              !v    %83.0   !
BB107   <- [105]
  goto BB97
BB106   <- [105]
  val?            %106.0 = Extract2_1D        wed   %105.4, %6.2, elided
  void                    StVar              lW    fdef, %106.0, e1.2
  (cls|spec|blt)  %106.2 = LdFun              !v    .resetSigLength, e1.2
  fs              %106.3 = FrameState         R     0x560397ebaa70+3753: [%105.4, %105.5, %6.2, %106.2], env=e1.2
  void                    Deopt              !v    %106.3, DeadCall@0x560398f6e258[Call#59], %106.2   !
BB86   <- [84]
  (cls|spec|blt)  %86.0 = LdFun              !v    .setupMethodsTables, e1.2
  fs              %86.1 = FrameState         R     0x560397ebaa70+2976: [%53.0, %53.1, %67.1, %86.0], env=e1.2
  void                    Deopt              !v    %86.1, DeadCall@0x560398f6e258[Call#48], %86.0   !
BB85   <- [84]
  val?^ | miss    %85.0 = LdVar              eR    sigs !upd, e1.2
  lgl$#-          %85.1 = IsType                   %85.0 isA real-
  void                    Assume             D     %85.1, %82.3 (Typecheck@0x560398f6e258[Type#150])
  real-           %85.3 = CastType           d     dn %85.0
  val?^ | miss    %85.4 = LdVar              eR    i, e1.2
  lgl$#-          %85.5 = IsType                   %85.4 isA int$-
  void                    Assume             D     %85.5, %82.3 (Typecheck@0x560398f6e258[Type#151])
  int$-           %85.7 = CastType           d     dn %85.4
  real-           %85.8 = Subassign1_1D      wed   %82.1, %85.3, %85.7, elided
  void                    StVar              lW    sigs, %85.8, e1.2
  goto BB67
Prom 0:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    fdef, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <cls>
  void                    Return             l     %1.3
Prom 1:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    fdef, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 2:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    group, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 3:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    fdef, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <cls>
  void                    Return             l     %1.3
Prom 4:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    i, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 5:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    i, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 8:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    funs, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <vec->
  void                    Return             l     %1.3
Prom 9:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  cls             %1.1  = MkCls                    .checkGroupSigLength@Prom(9)0, e1.0
  void                    Return             l     %1.1
Prom 10:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     length, e1.0
  prom-           %1.2  = MkArg                    unboundValue, .checkGroupSigLength[0x56039943cee0]_p11, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <val?_>
  void                    Return             l     %1.3
Prom 11:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    funs, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 12:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    fdef, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <cls>
  void                    Return             l     %1.3
Prom 13:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    fdef, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <cls>
  void                    Return             l     %1.3
Prom 14:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    ev, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <env->
  void                    Return             l     %1.3
Prom 15:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    .SigLength, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 16:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    fdef, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <cls>
  void                    Return             l     %1.3
Prom 17:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    fdef, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <cls>
  void                    Return             l     %1.3
Prom 18:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    ev, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <env->
  void                    Return             l     %1.3
Prom 19:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    .SigLength, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 20:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    reset, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 21:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    reset, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 22:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     unlist, <0x560395d26508>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, .checkGroupSigLength[0x56039943cee0]_p23, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2, false) e1.0   <vec$->
  void                    Return             l     %1.3
Prom 23:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    gnames, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <vec$->
  void                    Return             l     %1.3
Prom 24:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     unlist, <0x560395d26508>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, .checkGroupSigLength[0x56039943cee0]_p25, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2, false) e1.0   <vec$->
  void                    Return             l     %1.3
Prom 25:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    generics, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <vec$->
  void                    Return             l     %1.3
Prom 26:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    fdef, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 27:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    group, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 28:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     @, <0x560395a0fbd8>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, .checkGroupSigLength[0x56039943cee0]_p29, e1.0
  prom-           %1.3  = MkArg                    unboundValue, .checkGroupSigLength[0x56039943cee0]_p30, e1.0
  val?            %1.4  = Call               !     %1.1(%1.2, %1.3) e1.0   <vec$->
  void                    Return             l     %1.4
Prom 29:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    fdef, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 30:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    group, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 31:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    getGeneric, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <cls->
  void                    Return             l     %1.3
Prom 32:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     Recall, e1.0
  (miss|dots)     %1.2  = LdDots             R     , e1.0
  *dots-          %1.3  = ExpandDots               %1.2
  val?            %1.4  = NamedCall          !     %1.1(.xpandDotsTrigger=%1.3) e1.0   <val?_>
  void                    Return             l     %1.4
Prom 33:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    FUN, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <(cls|blt)->
  void                    Return             l     %1.3
Prom 35:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    X, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <(str|vec)>
  void                    Return             l     %1.3
Prom 36:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    X, e1.0
  val?            %1.2  = Force<wrapped>     !v    %1.1, e1.0   <(str|vec)>
  lgl$#-          %1.3  = IsType                   %1.2 isA val+
  void                    Branch                   %1.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [1]
  val?^ | miss    %2.0  = LdVar              eR    i, e1.0
  val?            %2.1  = Force<value>       !v    %2.0, e1.0   <int$->
  goto BB3
BB4   <- [1]
  prom-           %4.0  = MkArg                    unboundValue, .checkGroupSigLength[0x56039943cee0]_p37, e1.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.1:BB2, %4.0:BB4
  val?            %3.1  = Extract2_1D        !v    %1.2, %3.0, e1.0   <val?>
  void                    Visible            v     
  void                    Return             l     %3.1
Prom 37:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    i, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <int$->
  void                    Return             l     %1.3

│ .checkGroupSigLength[0x56039943cee0]                                         │
└──────────────────────────────────────────────────────────────────────────────┘
