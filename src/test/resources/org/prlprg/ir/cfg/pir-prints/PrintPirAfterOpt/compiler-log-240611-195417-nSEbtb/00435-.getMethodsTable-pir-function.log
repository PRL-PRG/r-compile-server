
┌──────────────────────────────────────────────────────────────────────────────┐
│ .getMethodsTable[0x5603998249b0]                                             │
│ Context: CorrOrd,!TMany,Argmatch;Eager2,Eager3,NonRefl0,NonRefl2,NonRefl3,!Obj3│
│ Properties:                                                                  │
├────── PIR Version After Optimizations
.getMethodsTable[0x5603998249b0]
BB0
  goto BB1
BB1   <- [0]
  val?~+          %1.0  = LdArg                    3
  val?~ | miss    %1.1  = LdArg                    2
  val?^ | miss    %1.2  = LdArg                    1
  val?^ | miss    %1.3  = LdArg                    0
  lgl$#-          %1.4  = Identical                %1.2, missingArg
  lgl$#-          %1.5  = Identical                %1.1, missingArg
  env             e1.6  = MkEnv              l     fdef=%1.3, env=%1.2, check=%1.1, inherited=%1.0, parent=<env 0x560396017378>, context 1
  void                    Branch                   %1.4 -> BB2 (if true) | BB23 (if false)
BB2   <- [1]
  prom-           %2.0  = MkArg                    unboundValue, .getMethodsTable[0x5603998249b0]_p0, e1.6
  val?^ | miss    %2.1  = CastType                 up %2.0
  void                    StArg              lW    env, %2.1, e1.6
  goto BB3
BB23   <- [1]
  goto BB3
BB3   <- [2, 23]
  void                    Branch                   %1.5 -> BB22 (if true) | BB4 (if false)
BB22   <- [3]
  void                    StArg              lW    check, true, e1.6
  goto BB5
BB4   <- [3]
  goto BB5
BB5   <- [4, 22]
  val?~ | miss    %5.0  = Phi                      true:BB22, %1.1:BB4
  cp              %5.1  = Checkpoint                -> BB7 (default) | BB6 (if assume failed)
BB7   <- [5]
  val+            %7.0  = Force<lazy>              %1.0,    <lgl$->
  lgl$#-          %7.1  = IsType                   %7.0 isA lgl$-
  void                    Assume             D     %7.1, %5.1 (Typecheck@0x56039853f9c0[Type#2])
  lgl$-           %7.3  = CastType           d     dn %7.0
  lgl$#-          %7.4  = CheckTrueFalse     e     %7.3
  void                    Branch                   %7.4 -> BB21 (if true) | BB8 (if false)
BB6   <- [5]
  fs              %6.0  = FrameState         R     0x560397f5b3e0+0: [], env=e1.6
  void                    Deopt              !v    %6.0
BB21   <- [7]
  goto BB9
BB8   <- [7]
  goto BB9
BB9   <- [21, 8]
  str$#-          %9.0  = Phi                      ".MTable":BB8, ".AllMTable":BB21
  void                    StVar              lW    name, %9.0, e1.6
  cp              %9.2  = Checkpoint                -> BB11 (default) | BB10 (if assume failed)
BB11   <- [9]
  val?~           %11.0 = ChkMissing         e     %5.0
  void                    Visible            v     
  val?            %11.2 = Force!<lazy>             %11.0,    <lgl$->
  lgl$#-          %11.3 = IsType                   %11.2 isA lgl$-
  void                    Assume             D     %11.3, %9.2 (Typecheck@0x56039853f9c0[Type#3])
  lgl$-           %11.5 = CastType           d     dn %11.2
  lgl$-           %11.6 = AsLogical                %11.5
  lgl$#-          %11.7 = Identical                %11.6, false
  void                    Branch                   %11.7 -> BB20 (if true) | BB12 (if false)
BB10   <- [9]
  fs              %10.0 = FrameState         R     0x560397f5b3e0+46: [], env=e1.6
  void                    Deopt              !v    %10.0
BB20   <- [11]
  goto BB15
BB12   <- [11]
  val?^ | miss    %12.0 = LdVar              eR    exists, <env 0x560396017378>
  lgl$#-          %12.1 = Identical                %12.0, function(x, where=-(1), envir=if(missing(frame|...
  void                    Assume             D     %12.1, %9.2 (CallTarget@0x56039853f9c0[Call#1])
  prom-           %12.3 = MkArg                    unboundValue, .getMethodsTable[0x5603998249b0]_p2 (!refl), e1.6
  prom-           %12.4 = MkArg                    unboundValue, .getMethodsTable[0x5603998249b0]_p3, e1.6
  val?            %12.5 = StaticCall         !     exists[0x56039a8efdf0](%12.3, missingArg, %12.4, missingArg, missingArg, false) { 0 2n 5n } e1.6   <lgl$->
  lgl$#-          %12.6 = IsType                   %12.5 isA lgl$-
  cp              %12.7 = Checkpoint                -> BB14 (default) | BB13 (if assume failed)
BB15   <- [20, 14]
  lgl$-           %15.0 = Phi                      %14.4:BB14, %11.6:BB20
  cp              %15.1 = Checkpoint                -> BB17 (default) | BB16 (if assume failed)
BB14   <- [12]
  void                    Assume             D     %12.6, %12.7 (Typecheck@0x56039853f9c0[Type#6])
  lgl$-           %14.1 = CastType           d     dn %12.5
  lgl$-           %14.2 = Not                vd    %14.1, elided
  lgl$-           %14.3 = AsLogical                %14.2
  lgl$-           %14.4 = LAnd                     %11.6, %14.3
  goto BB15
BB13   <- [12]
  fs              %13.0 = FrameState         R     0x560397f5b3e0+121: [%11.6, %12.5], env=e1.6
  void                    Deopt              !v    %13.0   !
BB17   <- [15]
  lgl$#-          %17.0 = CheckTrueFalse     e     %15.0
  void                    Branch                   %17.0 -> BB19 (if true) | BB18 (if false)
BB16   <- [15]
  fs              %16.0 = FrameState         R     0x560397f5b3e0+129: [%15.0], env=e1.6
  void                    Deopt              !v    %16.0   !
BB19   <- [17]
  (cls|spec|blt)  %19.0 = LdFun              !v    .setupMethodsTables, e1.6
  fs              %19.1 = FrameState         R     0x560397f5b3e0+145: [%19.0], env=e1.6
  void                    Deopt              !v    %19.1, DeadCall@0x56039853f9c0[Call#2], %19.0   !
BB18   <- [17]
  val?^ | miss    %18.0 = LdVar              eR    get, e1.6
  lgl$#-          %18.1 = Identical                %18.0, function(x, pos=-(1L), envir=as.environment(po|...
  void                    Assume             D     %18.1, %15.1 (CallTarget@0x56039853f9c0[Call#5])
  prom-           %18.3 = MkArg                    unboundValue, .getMethodsTable[0x5603998249b0]_p4, e1.6
  prom-           %18.4 = MkArg                    unboundValue, .getMethodsTable[0x5603998249b0]_p5, e1.6
  val?            %18.5 = StaticCall         !     get[0x560399780840](%18.3, missingArg, %18.4) { 0 2n } e1.6   <env->
  void                    Return             l     %18.5
Prom 0:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     environment, <0x560395db6b68>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, .getMethodsTable[0x5603998249b0]_p1, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <env->
  void                    Return             l     %1.3
Prom 1:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    fdef, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <cls>
  void                    Return             l     %1.3
Prom 2:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    name, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 3:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    env, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <env->
  void                    Return             l     %1.3
Prom 4:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    name, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 5:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    env, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <env->
  void                    Return             l     %1.3

│ .getMethodsTable[0x5603998249b0]                                             │
└──────────────────────────────────────────────────────────────────────────────┘
