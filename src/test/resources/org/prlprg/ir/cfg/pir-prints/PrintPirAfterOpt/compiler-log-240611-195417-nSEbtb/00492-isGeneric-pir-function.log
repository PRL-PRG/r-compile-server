
┌──────────────────────────────────────────────────────────────────────────────┐
│ isGeneric[0x560399415cc0]                                                    │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;NonRefl0,NonRefl1,!Obj0,!Obj1 miss: 2│
│ Properties:                                                                  │
├────── PIR Version After Optimizations
isGeneric[0x560399415cc0]
BB0
  goto BB1
BB1   <- [0]
  val?^           %1.0  = LdArg                    1
  val?^           %1.1  = LdArg                    0
  cp              %1.2  = Checkpoint                -> BB2 (default) | BB40 (if assume failed)
BB2   <- [1]
  env             e2.0  = MkEnv              l     f=%1.1, where=%1.0, fdef(miss)=nil, getName(miss)=false, parent=<env 0x560396017378>, context 1
  lgl$-           %2.1  = Missing            eR    where, e2.0
  lgl$-           %2.2  = AsLogical                %2.1
  lgl$-           %2.3  = AsLogical                %2.2
  lgl$#-          %2.4  = CheckTrueFalse     e     %2.3
  void                    Branch                   %2.4 -> BB39 (if true) | BB3 (if false)
BB40   <- [1]
  env             e40.0 = (MkEnv)            l     f=%1.1, where=%1.0, fdef(miss)=nil, getName(miss)=false, parent=<env 0x560396017378>, context 1
  fs              %40.1 = FrameState         R     0x560397f5c660+0: [], env=e40.0
  void                    Deopt              !v    %40.1
BB39   <- [2]
  (cls|spec|blt)  %39.0 = LdFun              !v    .getGenericFromCache, <env 0x560396017378>
  fs              %39.1 = FrameState         R     0x560397f5c660+50: [%39.0], env=e2.0
  void                    Deopt              !v    %39.1, DeadCall@0x5603993eb820[Call#2], %39.0
BB3   <- [2]
  val?^ | miss    %3.0  = LdVar              eR    getFunction, <env 0x560396017378>
  lgl$#-          %3.1  = Identical                %3.0, function(name, generic=TRUE, mustFind=TRUE, wh|...
  void                    Assume             D     %3.1, %1.2 (CallTarget@0x5603993eb820[Call#4])
  prom-           %3.3  = MkArg                    unboundValue, isGeneric[0x560399415cc0]_p6 (!refl), e2.0
  prom-           %3.4  = MkArg                    unboundValue, isGeneric[0x560399415cc0]_p7 (!refl), e2.0
  val?            %3.5  = StaticCall         !v    getFunction[0x56039b5dc390](%3.3, missingArg, false, %3.4) { 0 3n 2n } e2.0   <cls->
  void                    StVar              lW    fdef, %3.5, e2.0
  cp              %3.7  = Checkpoint                -> BB5 (default) | BB4 (if assume failed)
BB5   <- [3]
  val             %5.0  = ChkMissing         e     %3.5   <cls->
  lgl$-           %5.1  = Is                       %5.0, NULL
  lgl$#-          %5.2  = CheckTrueFalse     e     %5.1
  void                    Branch                   %5.2 -> BB38 (if true) | BB6 (if false)
BB4   <- [3]
  fs              %4.0  = FrameState         R     0x560397f5c660+299: [], env=e2.0
  void                    Deopt              !v    %4.0   !
BB38   <- [5]
  void                    Visible            v     
  goto BB14
BB6   <- [5]
  val?^ | miss    %6.0  = LdVar              eR    isBaseFun, e2.0
  lgl$#-          %6.1  = Identical                %6.0, function(fun) <(rir::DispatchTable*)0x5603995d|...
  void                    Assume             D     %6.1, %3.7 (CallTarget@0x5603993eb820[Call#5])
  prom-           %6.3  = MkArg                    unboundValue, isGeneric[0x560399415cc0]_p2 (!refl), e2.0
  val?            %6.4  = StaticCall         !v    isBaseFun[0x560399f5e7d0](%6.3) e2.0   <lgl$->
  lgl$#-          %6.5  = IsType                   %6.4 isA lgl$-
  cp              %6.6  = Checkpoint                -> BB8 (default) | BB7 (if assume failed)
BB14   <- [13, 38, 26]
  lgl$#-          %14.0 = Phi                      false:BB13, %25.6:BB26, false:BB38
  void                    Return             l     %14.0
BB8   <- [6]
  void                    Assume             D     %6.5, %6.6 (Typecheck@0x5603993eb820[Type#17])
  lgl$-           %8.1  = CastType           d     dn %6.4
  lgl$#-          %8.2  = CheckTrueFalse     e     %8.1
  void                    Branch                   %8.2 -> BB15 (if true) | BB9 (if false)
BB7   <- [6]
  fs              %7.0  = FrameState         R     0x560397f5c660+368: [%6.4], env=e2.0
  void                    Deopt              !v    %7.0   !
BB15   <- [8]
  val?^ | miss    %15.0 = LdVar              eR    is.character, e2.0
  lgl$#-          %15.1 = Identical                <blt is.character>, %15.0   <true>
  void                    Assume             D     %15.1, %6.6 (DeadBranchReached@0x5603993eb820[Test#0])
  val?^ | miss    %15.3 = LdVar              eR    f, e2.0
  val?            %15.4 = Force!<wrapped>    !v    %15.3, e2.0   <str$->
  lgl$#-          %15.5 = CallSafeBuiltin    wed   is.character(%15.4)    <lgl$->
  cp              %15.6 = Checkpoint                -> BB17 (default) | BB16 (if assume failed)
BB9   <- [8]
  val?^ | miss    %9.0  = LdVar              eR    is, e2.0
  lgl$#-          %9.1  = Identical                %9.0, function(object, class2) <(rir::DispatchTable*|...
  void                    Assume             D     %9.1, %6.6 (CallTarget@0x5603993eb820[Call#16])
  prom-           %9.3  = MkArg                    unboundValue, isGeneric[0x560399415cc0]_p3, e2.0
  val?            %9.4  = Call               !v    function(object, class2) <(rir::DispatchTable*|...(%9.3, "genericFunction") e2.0   <lgl$->
  lgl$#-          %9.5  = IsType                   %9.4 isA lgl$-
  cp              %9.6  = Checkpoint                -> BB11 (default) | BB10 (if assume failed)
BB17   <- [15]
  void                    Branch                   %15.5 -> BB33 (if true) | BB18 (if false)
BB16   <- [15]
  fs              %16.0 = FrameState         R     0x560397f5c660+475: [%15.5], env=e2.0
  void                    Deopt              !v    %16.0   !
BB11   <- [9]
  void                    Assume             D     %9.5, %9.6 (Typecheck@0x5603993eb820[Type#39])
  lgl$-           %11.1 = CastType           d     dn %9.4
  lgl$-           %11.2 = Not                d     %11.1, elided
  lgl$#-          %11.3 = CheckTrueFalse     e     %11.2
  void                    Branch                   %11.3 -> BB13 (if true) | BB12 (if false)
BB10   <- [9]
  fs              %10.0 = FrameState         R     0x560397f5c660+972: [%9.4], env=e2.0
  void                    Deopt              !v    %10.0   !
BB33   <- [17]
  val?^ | miss    %33.0 = LdVar              eR    %in%, e2.0
  lgl$#-          %33.1 = Identical                %33.0, function(x, table) <(rir::DispatchTable*)0x560|...
  void                    Assume             D     %33.1, %15.6 (CallTarget@0x5603993eb820[Call#7])
  val?^ | miss    %33.3 = LdVar              eR    f, e2.0
  val?            %33.4 = Force!<wrapped>    !v    %33.3, e2.0   <str$->
  lgl$#-          %33.5 = IsType                   %33.4 isA val?+
  cp              %33.6 = Checkpoint                -> BB35 (default) | BB34 (if assume failed)
BB18   <- [17]
  goto BB19
BB13   <- [11]
  void                    Visible            v     
  goto BB14
BB12   <- [11]
  (cls|spec|blt)  %12.0 = LdFun              !v    @, e2.0
  fs              %12.1 = FrameState         R     0x560397f5c660+1001: [%12.0], env=e2.0
  void                    Deopt              !v    %12.1, DeadCall@0x5603993eb820[Call#17], %12.0   !
BB35   <- [33]
  void                    Assume             D     %33.5, %33.6 (Typecheck@0x560395d1db30[Type#0])
  val?+           %35.1 = CastType           d     dn %33.4   <(int|str)+>
  val+            %35.2 = CallSafeBuiltin    wed   match(%35.1, "as.double", 0L, nil)    <int->
  lgl$#-          %35.3 = IsType                   %35.2 isA int-
  cp              %35.4 = Checkpoint                -> BB37 (default) | BB36 (if assume failed)
BB34   <- [33]
  prom-           %34.0 = MkArg                    %33.4, isGeneric[0x560399415cc0]_p4 (!refl), e2.0
  val?~           %34.1 = CastType                 up %34.0
  env             e34.2 = (MkEnv)            l     x=%34.1, table="as.double", parent=R_BaseNamespace, context 0
  env             e34.3 = MaterializeEnv           , e34.2   <@?>
  prom-           %34.4 = MkArg                    %33.4, isGeneric[0x560399415cc0]_p8 (!refl), e34.3
  val?~           %34.5 = CastType                 up %34.4
  prom-           %34.6 = MkArg                    unboundValue, isGeneric[0x560399415cc0]_p9 (!refl), e34.3
  val?^           %34.7 = CastType                 up %34.6
  fs              %34.8 = FrameState         R     0x560397f5c660+524: [%15.5], env=e2.0
  fs              %34.9 = FrameState         R     0x56039603d4e0+54: [], env=e34.3, next=%34.8
  env             e34.10 = (MkEnv)            l     x=%34.5, table=%34.7, nomatch=0L, incomparables(miss)=nil, parent=R_BaseNamespace, context -1
  fs              %34.11 = FrameState         R     0x560396545d70+9: [%33.4], env=e34.10, next=%34.9
  void                    Deopt              !v    %34.11   !
BB19   <- [18, 37]
  lgl$-           %19.0 = Phi                      %37.4:BB37, %15.5:BB18
  lgl$#-          %19.1 = CheckTrueFalse     e     %19.0
  void                    Branch                   %19.1 -> BB32 (if true) | BB20 (if false)
BB37   <- [35]
  void                    Assume             D     %35.3, %35.4 (Typecheck@0x56039706f688[Type#2])
  int-            %37.1 = CastType           d     dn %35.2
  lgl-            %37.2 = Gt                 wed   %37.1, 0L, elided   <lgl->
  lgl$-           %37.3 = AsLogical                %37.2
  lgl$-           %37.4 = LAnd                     %15.5, %37.3
  goto BB19
BB36   <- [35]
  prom-           %36.0 = MkArg                    %35.1, isGeneric[0x560399415cc0]_p4 (!refl), e2.0
  val?~           %36.1 = CastType                 up %36.0
  env             e36.2 = (MkEnv)            l     x=%36.1, table="as.double", parent=R_BaseNamespace, context 0
  env             e36.3 = MaterializeEnv           , e36.2   <@?>
  prom-           %36.4 = MkArg                    "as.double", isGeneric[0x560399415cc0]_p9 (!refl), e36.3
  val?~           %36.5 = CastType                 up %36.4
  prom-           %36.6 = MkArg                    %35.1, isGeneric[0x560399415cc0]_p8 (!refl), e36.3
  val?~           %36.7 = CastType                 up %36.6
  fs              %36.8 = FrameState         R     0x560397f5c660+524: [%15.5], env=e2.0
  fs              %36.9 = FrameState         R     0x56039603d4e0+54: [], env=e36.3, next=%36.8
  env             e36.10 = (MkEnv)            l     incomparables(miss)=nil, nomatch=0L, table=%36.5, x=%36.7, parent=R_BaseNamespace, context -1
  fs              %36.11 = FrameState         R     0x560396545d70+69: [%35.2], env=e36.10, next=%36.9
  void                    Deopt              !v    %36.11   !
BB32   <- [19]
  void                    StVar              lW    f, "as.numeric", e2.0
  goto BB21
BB20   <- [19]
  goto BB21
BB21   <- [20, 32]
  cp              %21.0 = Checkpoint                -> BB23 (default) | BB22 (if assume failed)
BB23   <- [21]
  val?^ | miss    %23.0 = LdVar              eR    genericForBasic, e2.0
  lgl$#-          %23.1 = Identical                %23.0, function(f, where=topenv(parent.frame()), must|...
  void                    Assume             D     %23.1, %21.0 (CallTarget@0x5603993eb820[Call#8])
  prom-           %23.3 = MkArg                    unboundValue, isGeneric[0x560399415cc0]_p5, e2.0
  val?            %23.4 = StaticCall         !v    genericForBasic[0x5603994d6b20](%23.3, missingArg, false) { 0 2n } e2.0   <nil->
  void                    StVar              lW    gen, %23.4, e2.0
  lgl$#-          %23.6 = IsType                   %23.4 isA val?-
  cp              %23.7 = Checkpoint                -> BB25 (default) | BB24 (if assume failed)
BB22   <- [21]
  fs              %22.0 = FrameState         R     0x560397f5c660+557: [], env=e2.0
  void                    Deopt              !v    %22.0   !
BB25   <- [23]
  val?^ | miss    %25.0 = LdVar              eR    is.function, e2.0
  lgl$#-          %25.1 = Identical                <blt is.function>, %25.0   <true>
  void                    Assume             D     %25.1, %23.7 (DeadBranchReached@0x5603993eb820[Test#1])
  val             %25.3 = ChkMissing         e     %23.4
  void                    Assume             D     %23.6, %23.7 (Typecheck@0x5603993eb820[Type#24])
  val?-           %25.5 = CastType           d     dn %23.4   <nil->
  lgl$#-          %25.6 = CallSafeBuiltin    vwed  is.function(%25.5)    <lgl$->
  void                    Branch                   %25.6 -> BB27 (if true) | BB26 (if false)
BB24   <- [23]
  fs              %24.0 = FrameState         R     0x560397f5c660+616: [], env=e2.0
  void                    Deopt              !v    %24.0   !
BB27   <- [25]
  val?^ | miss    %27.0 = LdVar              eR    length, e2.0
  lgl$#-          %27.1 = Identical                <blt length>, %27.0   <@?>
  void                    Branch                   %27.1 -> BB29 (if true) | BB28 (if false)
BB26   <- [25]
  goto BB14
BB29   <- [27]
  val?^ | miss    %29.0 = LdVar              eR    names, e2.0
  lgl$#-          %29.1 = Identical                <blt names>, %29.0   <@?>
  void                    Branch                   %29.1 -> BB31 (if true) | BB30 (if false)
BB28   <- [27]
  (cls|spec|blt)  %28.0 = LdFun              !v    length, e2.0
  fs              %28.1 = FrameState         R     0x560397f5c660+747: [%25.6, %28.0], env=e2.0
  void                    Deopt              !v    %28.1, DeadCall@0x5603993eb820[Call#10], %28.0   !
BB31   <- [29]
  (cls|spec|blt)  %31.0 = LdFun              !v    .getMethodsTable, e2.0
  fs              %31.1 = FrameState         R     0x560397f5c660+844: [%25.6, <blt length>, <blt names>, %31.0], env=e2.0
  void                    Deopt              !v    %31.1, DeadCall@0x5603993eb820[Call#15], %31.0   !
BB30   <- [29]
  (cls|spec|blt)  %30.0 = LdFun              !v    names, e2.0
  fs              %30.1 = FrameState         R     0x560397f5c660+807: [%25.6, <blt length>, %30.0], env=e2.0
  void                    Deopt              !v    %30.1, DeadCall@0x5603993eb820[Call#13], %30.0   !
Prom 2:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    fdef, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <cls->
  void                    Return             l     %1.3
Prom 3:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    fdef, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <cls->
  void                    Return             l     %1.3
Prom 4:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    f, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 5:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    f, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 6:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    f, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 7:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    where, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <env->
  void                    Return             l     %1.3
Prom 8:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    x, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <(int|str)+>
  void                    Return             l     %1.3
Prom 9:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    table, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <val?->
  void                    Return             l     %1.3

│ isGeneric[0x560399415cc0]                                                    │
└──────────────────────────────────────────────────────────────────────────────┘
