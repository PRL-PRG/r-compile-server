
┌──────────────────────────────────────────────────────────────────────────────┐
│ tryCatchList[0x560398579af0]                                                 │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;NonRefl1,NonRefl2,NonRefl3,!Obj1,!Obj2,!Obj3│
│ Properties:                                                                  │
├────── PIR Version After Optimizations
tryCatchList[0x560398579af0]
BB0
  goto BB1
BB1   <- [0]
  val?^           %1.0  = LdArg                    3
  val?^           %1.1  = LdArg                    2
  val?^           %1.2  = LdArg                    1
  val?^           %1.3  = LdArg                    0
  cp              %1.4  = Checkpoint                -> BB2 (default) | BB12 (if assume failed)
BB2   <- [1]
  val?^ | miss    %2.0  = LdVar              eR    length, ?
  lgl$#-          %2.1  = Identical                <blt length>, %2.0   <true>
  void                    Assume             D     %2.1, %1.4 (DeadBranchReached@0x5603978b2f00[Test#0])
  env             e2.3  = MkEnv              l     expr=%1.3, names=%1.2, parentenv=%1.1, handlers=%1.0, parent=?, context 1
  val+            %2.4  = Force!<lazy>       !vr   %1.2,    <str$->
  (int|real)$-    %2.5  = CallSafeBuiltin    wed   length(%2.4)    <int$->
  lgl$#-          %2.6  = IsType                   %2.5 isA int$-
  cp              %2.7  = Checkpoint                -> BB4 (default) | BB3 (if assume failed)
BB12   <- [1]
  env             e12.0 = (MkEnv)            l     expr=%1.3, names=%1.2, parentenv=%1.1, handlers=%1.0, parent=?, context 1
  fs              %12.1 = FrameState         R     0x5603978b28a0+0: [], env=e12.0
  void                    Deopt              !v    %12.1
BB4   <- [2]
  void                    Assume             D     %2.6, %2.7 (Typecheck@0x5603978b2f00[Type#2])
  int$-           %4.1  = CastType           d     dn %2.5
  void                    StVar              lW    nh, %4.1, e2.3
  cp              %4.3  = Checkpoint                -> BB6 (default) | BB5 (if assume failed)
BB3   <- [2]
  fs              %3.0  = FrameState         R     0x5603978b28a0+91: [%2.5], env=e2.3
  void                    Deopt              !v    %3.0
BB6   <- [4]
  lgl$-           %6.0  = Gt                 d     %4.1, 1L, elided   <lgl$->
  lgl$#-          %6.1  = CheckTrueFalse     e     %6.0
  void                    Branch                   %6.1 -> BB11 (if true) | BB7 (if false)
BB5   <- [4]
  fs              %5.0  = FrameState         R     0x5603978b28a0+105: [], env=e2.3
  void                    Deopt              !v    %5.0
BB11   <- [6]
  (cls|spec|blt)  %11.0 = LdFun              !v    tryCatchOne, ?
  fs              %11.1 = FrameState         R     0x5603978b28a0+250: [%11.0], env=e2.3
  void                    Deopt              !v    %11.1, DeadCall@0x5603978b2f00[Call#2], %11.0
BB7   <- [6]
  void                    Visible            v     
  lgl$-           %7.1  = Eq                 vd    %4.1, 1L, elided   <lgl$->
  lgl$#-          %7.2  = CheckTrueFalse     e     %7.1
  void                    Branch                   %7.2 -> BB10 (if true) | BB8 (if false)
BB10   <- [7]
  val?^ | miss    %10.0 = LdVar              eR    tryCatchOne, ?
  (cls|spec|blt)  %10.1 = CastType                 dn %10.0
  val+            %10.2 = CallSafeBuiltin          bodyCode(%10.1) 
  lgl$#-          %10.3 = Identical                %10.2, <(rir::DispatchTable*)0x5603978b6d90>
  void                    Assume             D     %10.3, %4.3 (CallTarget@0x5603978b2f00[Call#1])
  val?            %10.5 = Force!             d     %10.0, 
  prom-           %10.6 = MkArg                    unboundValue, tryCatchList[0x560398579af0]_p0, e2.3
  prom-           %10.7 = MkArg                    unboundValue, tryCatchList[0x560398579af0]_p1 (!refl), e2.3
  prom-           %10.8 = MkArg                    unboundValue, tryCatchList[0x560398579af0]_p2 (!refl), e2.3
  prom-           %10.9 = MkArg                    unboundValue, tryCatchList[0x560398579af0]_p3, e2.3
  (cls|spec|blt)  %10.10 = ChkFunction        e     %10.5
  val?            %10.11 = StaticCall         !     tryCatchOne[0x56039a86cf90](%10.6, %10.7, %10.8, %10.9) from %10.10 e2.3   <val?+>
  goto BB9
BB8   <- [7]
  void                    Visible            v     
  val?            %8.1  = Force!             !     %1.3, e2.3   <val?_>
  goto BB9
BB9   <- [8, 10]
  val?            %9.0  = Phi                      %8.1:BB8, %10.11:BB10
  void                    Return             l     %9.0
Prom 0:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    expr, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <val?+>
  void                    Return             l     %1.3
Prom 1:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    names, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 2:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    parentenv, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <env->
  void                    Return             l     %1.3
Prom 3:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    handlers, e1.0
  val?            %1.2  = Force<lazy>        !v    %1.1, e1.0   <vec$+>
  val?            %1.3  = Extract2_1D        !v    %1.2, 1L, e1.0   <cls->
  void                    Visible            v     
  void                    Return             l     %1.3

│ tryCatchList[0x560398579af0]                                                 │
└──────────────────────────────────────────────────────────────────────────────┘
