
┌──────────────────────────────────────────────────────────────────────────────┐
│ .requirePackage[0x56039cee18e0]                                              │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch miss: 1                              │
│ Properties:  Eager, ForceOrd: 0                                              │
├────── PIR Version After Optimizations
.requirePackage[0x56039cee18e0]
BB0
  goto BB1
BB1   <- [0]
  val?^           %1.0  = LdArg                    0
  env             e1.1  = MkEnv              l     package=%1.0, mustFind(miss)=true, parent=<env 0x560396017378>, context 1
  val?            %1.2  = Force!<lazy>       !v    %1.0, e1.1   <str$->
  lgl$#-          %1.3  = IsType                   %1.2 isA val?-
  cp              %1.4  = Checkpoint                -> BB2 (default) | BB46 (if assume failed)
BB2   <- [1]
  void                    Assume             D     %1.3, %1.4 (Typecheck@0x560398b39b98[Type#0])
  val?-           %2.1  = CastType           d     dn %1.2   <str$->
  void                    StVar              lW    value, %2.1, e1.1
  cp              %2.3  = Checkpoint                -> BB4 (default) | BB3 (if assume failed)
BB46   <- [1]
  fs              %46.0 = FrameState         R     0x5603972e07b0+9: [%1.2], env=e1.1
  void                    Deopt              !v    %46.0   !
BB4   <- [2]
  val?^ | miss    %4.0  = LdVar              eR    nzchar, e1.1
  lgl$#-          %4.1  = Identical                <blt nzchar>, %4.0   <true>
  void                    Assume             D     %4.1, %2.3 (DeadBranchReached@0x560398b39b98[Test#0])
  val?^ | miss    %4.3  = LdVar              eR    package, e1.1
  val?            %4.4  = Force!<wrapped>    !v    %4.3, e1.1   <str$->
  val?            %4.5  = CallBuiltin        !v    nzchar(%4.4) e1.1   <lgl$->
  lgl$#-          %4.6  = IsType                   %4.5 isA lgl$-
  cp              %4.7  = Checkpoint                -> BB6 (default) | BB5 (if assume failed)
BB3   <- [2]
  fs              %3.0  = FrameState         R     0x5603972e07b0+23: [], env=e1.1
  void                    Deopt              !v    %3.0   !
BB6   <- [4]
  void                    Assume             D     %4.6, %4.7 (Typecheck@0x560398b39b98[Type#3])
  lgl$-           %6.1  = CastType           d     dn %4.5
  lgl$#-          %6.2  = CheckTrueFalse     e     %6.1
  void                    Branch                   %6.2 -> BB33 (if true) | BB7 (if false)
BB5   <- [4]
  fs              %5.0  = FrameState         R     0x5603972e07b0+114: [%4.5], env=e1.1
  void                    Deopt              !v    %5.0   !
BB33   <- [6]
  val?^ | miss    %33.0 = LdVar              eR    package, e1.1
  val?            %33.1 = Force!<wrapped>    !v    %33.0, e1.1   <str$->
  val?            %33.2 = CallBuiltin        !v    getNamespaceRegistry() e1.1
  val?            %33.3 = CallBuiltin        !v    exists(%33.1, %33.2, "any", false) e1.1
  lgl$#-          %33.4 = CheckTrueFalse     we    %33.3
  cp              %33.5 = Checkpoint                -> BB35 (default) | BB34 (if assume failed)
BB7   <- [6]
  goto BB8
BB35   <- [33]
  void                    Branch                   %33.4 -> BB43 (if true) | BB36 (if false)
BB34   <- [33]
  fs              %34.0 = FrameState         R     0x5603972e07b0+183: [%33.4], env=e1.1
  void                    Deopt              !v    %34.0   !
BB8   <- [7, 40, 45]
  cp              %8.0  = Checkpoint                -> BB10 (default) | BB9 (if assume failed)
BB43   <- [35]
  val?^ | miss    %43.0 = LdVar              eR    getNamespace, e1.1
  lgl$#-          %43.1 = Identical                %43.0, function(name) <(rir::DispatchTable*)0x560397a|...
  void                    Assume             D     %43.1, %33.5 (CallTarget@0x560398b39b98[Call#5])
  prom-           %43.3 = MkArg                    unboundValue, .requirePackage[0x56039cee18e0]_p13, e1.1
  ct              %43.4 = PushContext        lCL   %43.3, getNamespace(package), function(name) <(rir::DispatchTable*)0x560397a|..., e1.1
  val?^           %43.5 = CastType                 up %43.3
  env             e43.6 = MkEnv              l     name=%43.5, parent=R_BaseNamespace, context 1
  val?            %43.7 = Force!<lazy>       !vL   %43.5, e43.6   <str$+>
  val?            %43.8 = CallBuiltin        !v    getRegisteredNamespace(%43.7) e43.6   <env->
  lgl$-           %43.9 = Is                       %43.8, NULL
  void                    StVar              lW    ns, %43.8, e43.6
  val             %43.11 = ChkMissing         e     %43.8
  lgl$-           %43.12 = Not                d     %43.9, elided
  lgl$#-          %43.13 = CheckTrueFalse     e     %43.12
  void                    Branch                   %43.13 -> BB45 (if true) | BB44 (if false)
BB36   <- [35]
  val?^ | miss    %36.0 = LdVar              eR    identical, e1.1
  lgl$#-          %36.1 = Identical                %36.0, function(x, y, num.eq=TRUE, single.NA=TRUE, at|...
  void                    Assume             D     %36.1, %33.5 (CallTarget@0x560398b39b98[Call#1])
  prom-           %36.3 = MkArg                    unboundValue, .requirePackage[0x56039cee18e0]_p10, e1.1
  ct              %36.4 = PushContext        lCL   %36.3, ".GlobalEnv", identical(package, ".GlobalEnv"), function(x, y, num.eq=TRUE, single.NA=TRUE, at|..., e1.1
  val?^           %36.5 = CastType                 up %36.3
  env             e36.6 = MkEnv              l     x=%36.5, y=".GlobalEnv", num.eq(miss)=true, single.NA(miss)=true, attrib.as.set(miss)=true, ignore.bytecode(miss)=true, ignore.environment(miss)=false, ignore.srcref(miss)=true, parent=R_BaseNamespace, context 1
  val?            %36.7 = Force!<lazy>       !vL   %36.5, e36.6   <val?>
  val?            %36.8 = CallBuiltin        !     identical(%36.7, ".GlobalEnv", true, true, true, true, false, true) e36.6
  val?            %36.9 = PopContext         C     %36.8, %36.4   <lgl$->
  lgl$#-          %36.10 = IsType                   %36.9 isA lgl$-
  cp              %36.11 = Checkpoint                -> BB38 (default) | BB37 (if assume failed)
BB10   <- [8]
  val?^ | miss    %10.0 = LdVar              eR    is.environment, e1.1
  lgl$#-          %10.1 = Identical                <blt is.environment>, %10.0   <true>
  void                    Assume             D     %10.1, %8.0 (DeadBranchReached@0x560398b39b98[Test#1])
  val?^ | miss    %10.3 = LdVar              eR    value, e1.1
  lgl$#-          %10.4 = IsType                   %10.3 isA val?~- | miss
  void                    Assume             D     %10.4, %8.0 (Typecheck@0x560398b39b98[Type#15])
  val?~- | miss   %10.6 = CastType           d     dn %10.3
  val?-           %10.7 = Force!<value>            %10.6,    <env->
  lgl$#-          %10.8 = CallSafeBuiltin    wed   is.environment(%10.7)    <lgl$->
  void                    Branch                   %10.8 -> BB32 (if true) | BB11 (if false)
BB9   <- [8]
  fs              %9.0  = FrameState         R     0x5603972e07b0+398: [], env=e1.1
  void                    Deopt              !v    %9.0   !
BB45   <- [43]
  val?            %45.0 = PopContext         C     %43.8, %43.4   <env->
  void                    StVar              lW    value, %45.0, e1.1
  goto BB8
BB44   <- [43]
  fs              %44.0 = FrameState         R     0x5603972e07b0+384: [], env=e1.1
  (cls|spec|blt)  %44.1 = LdFun              !v    loadNamespace, e43.6
  fs              %44.2 = FrameState         R     0x5603987a3300+67: [%44.1], env=e43.6, next=%44.0
  void                    Deopt              !v    %44.2, DeadCall@0x5603980b7bf8[Call#0], %44.1   !
BB38   <- [36]
  void                    Assume             D     %36.10, %36.11 (Typecheck@0x560398b39b98[Type#6])
  lgl$-           %38.1 = CastType           d     dn %36.9
  lgl$#-          %38.2 = CheckTrueFalse     e     %38.1
  void                    Branch                   %38.2 -> BB42 (if true) | BB39 (if false)
BB37   <- [36]
  fs              %37.0 = FrameState         R     0x5603972e07b0+225: [%36.9], env=e1.1
  void                    Deopt              !v    %37.0   !
BB32   <- [10]
  void                    Visible            v     
  goto BB23
BB11   <- [10]
  (cls|spec|blt)  %11.0 = LdFun              !v    getOption, e1.1
  val?            %11.1 = Call               !v    %11.0("topLevelEnvironment") e1.1   <>
  lgl$-           %11.2 = Is                       %11.1, NULL
  void                    StVar              lW    topEnv, %11.1, e1.1
  val             %11.4 = ChkMissing         e     %11.1
  lgl$#-          %11.5 = CheckTrueFalse     e     %11.2
  void                    Branch                   %11.5 -> BB31 (if true) | BB12 (if false)
BB42   <- [38]
  val?^ | miss    %42.0 = LdVar              eR    .GlobalEnv, e1.1
  lgl$#-          %42.1 = IsType                   %42.0 isA val?~- | miss
  void                    Assume             D     %42.1, %36.11 (Typecheck@0x560398b39b98[Type#7])
  val?~- | miss   %42.3 = CastType           d     dn %42.0
  void                    Visible            v     
  val?-           %42.5 = Force!<value>            %42.3,    <env->
  goto BB23
BB39   <- [38]
  (cls|spec|blt)  %39.0 = LdFun              !     identical, e1.1
  prom-           %39.1 = MkArg                    unboundValue, .requirePackage[0x56039cee18e0]_p11, e1.1
  val?            %39.2 = Call               !     %39.0(%39.1, "methods") e1.1   <>
  lgl$#-          %39.3 = CheckTrueFalse     we    %39.2
  void                    Branch                   %39.3 -> BB41 (if true) | BB40 (if false)
BB23   <- [22, 32, 42, 29, 41, 25]
  val?            %23.0 = Phi                      nil:BB22, %25.2:BB25, %29.2:BB29, %10.7:BB32, %41.2:BB41, %42.5:BB42
  void                    Return             l     %23.0
BB31   <- [11]
  val?^ | miss    %31.0 = LdVar              eR    .GlobalEnv, e1.1
  val?            %31.1 = Force!             !v    %31.0, e1.1   <>
  void                    StVar              lW    topEnv, %31.1, e1.1
  goto BB13
BB12   <- [11]
  goto BB13
BB41   <- [39]
  (cls|spec|blt)  %41.0 = LdFun              !     topenv, e1.1
  prom-           %41.1 = MkArg                    unboundValue, .requirePackage[0x56039cee18e0]_p12, e1.1
  val?            %41.2 = Call               !     %41.0(%41.1) e1.1   <>
  goto BB23
BB40   <- [39]
  goto BB8
BB13   <- [12, 31]
  (cls|spec|blt)  %13.0 = LdFun              !v    get0, e1.1
  prom-           %13.1 = MkArg                    unboundValue, .requirePackage[0x56039cee18e0]_p1, e1.1
  val?            %13.2 = NamedCall          !v    %13.0(".packageName", %13.1, inherits=true) e1.1   <>
  lgl$-           %13.3 = Is                       %13.2, NULL
  void                    StVar              lW    pkgN, %13.2, e1.1
  lgl$-           %13.5 = Not                d     %13.3, elided
  lgl$-           %13.6 = AsLogical                %13.5
  lgl$#-          %13.7 = Identical                %13.6, false
  void                    Branch                   %13.7 -> BB30 (if true) | BB14 (if false)
BB30   <- [13]
  goto BB15
BB14   <- [13]
  (cls|spec|blt)  %14.0 = LdFun              !v    .identC, e1.1
  prom-           %14.1 = MkArg                    unboundValue, .requirePackage[0x56039cee18e0]_p2, e1.1
  prom-           %14.2 = MkArg                    unboundValue, .requirePackage[0x56039cee18e0]_p3, e1.1
  val?            %14.3 = Call               !v    %14.0(%14.1, %14.2) e1.1   <>
  lgl$-           %14.4 = AsLogical          e     %14.3
  lgl$-           %14.5 = LAnd                     %13.6, %14.4
  goto BB15
BB15   <- [30, 14]
  lgl$-           %15.0 = Phi                      %14.5:BB14, %13.6:BB30
  lgl$#-          %15.1 = CheckTrueFalse     e     %15.0
  void                    Branch                   %15.1 -> BB29 (if true) | BB16 (if false)
BB29   <- [15]
  val?^ | miss    %29.0 = LdVar              eR    topEnv, e1.1
  void                    Visible            v     
  val?            %29.2 = Force!             !     %29.0, e1.1   <>
  goto BB23
BB16   <- [15]
  val?^ | miss    %16.0 = LdVar              eR    nzchar, e1.1
  lgl$#-          %16.1 = Identical                <blt nzchar>, %16.0   <@?>
  void                    Branch                   %16.1 -> BB28 (if true) | BB17 (if false)
BB28   <- [16]
  val?^ | miss    %28.0 = LdVar              eR    package, e1.1
  val?            %28.1 = Force!             !v    %28.0, e1.1   <>
  val?            %28.2 = CallBuiltin        !     nzchar(%28.1) e1.1
  goto BB18
BB17   <- [16]
  val?^ | miss    %17.0 = LdVar              eR    package, e1.1
  val?            %17.1 = Force!             !v    %17.0, e1.1   <>
  val?            %17.2 = CallBuiltin        !     nzchar(%17.1) e1.1
  goto BB18
BB18   <- [28, 17]
  val?            %18.0 = Phi                      %17.2:BB17, %28.2:BB28   <>
  lgl$-           %18.1 = AsLogical          e     %18.0
  lgl$#-          %18.2 = Identical                %18.1, false
  void                    Branch                   %18.2 -> BB27 (if true) | BB19 (if false)
BB27   <- [18]
  goto BB20
BB19   <- [18]
  (cls|spec|blt)  %19.0 = LdFun              !     require, e1.1
  prom-           %19.1 = MkArg                    unboundValue, .requirePackage[0x56039cee18e0]_p5, e1.1
  val?            %19.2 = NamedCall          !     %19.0(%19.1, character.only=true) e1.1   <>
  lgl$-           %19.3 = AsLogical          e     %19.2
  lgl$-           %19.4 = LAnd                     %18.1, %19.3
  goto BB20
BB20   <- [27, 19]
  lgl$-           %20.0 = Phi                      %19.4:BB19, %18.1:BB27
  lgl$#-          %20.1 = CheckTrueFalse     e     %20.0
  void                    Branch                   %20.1 -> BB26 (if true) | BB21 (if false)
BB26   <- [20]
  goto BB25
BB21   <- [20]
  val?^ | miss    %21.0 = LdVar              eR    mustFind, e1.1
  void                    Visible            v     
  val?            %21.2 = Force!             !     %21.0, e1.1   <>
  lgl$#-          %21.3 = CheckTrueFalse     we    %21.2
  void                    Branch                   %21.3 -> BB24 (if true) | BB22 (if false)
BB25   <- [26, 24]
  (cls|spec|blt)  %25.0 = LdFun              !     getNamespace, e1.1
  prom-           %25.1 = MkArg                    unboundValue, .requirePackage[0x56039cee18e0]_p9, e1.1
  val?            %25.2 = Call               !     %25.0(%25.1) e1.1   <>
  goto BB23
BB24   <- [21]
  (cls|spec|blt)  %24.0 = LdFun              !     stop, e1.1
  prom-           %24.1 = MkArg                    unboundValue, .requirePackage[0x56039cee18e0]_p6, e1.1
  val?            %24.2 = NamedCall          !     %24.0(%24.1, domain=na-lgl) e1.1
  goto BB25
BB22   <- [21]
  void                    Visible            v     
  goto BB23
Prom 1:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    topEnv, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <>
  void                    Return             l     %1.3
Prom 2:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    package, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <>
  void                    Return             l     %1.3
Prom 3:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    pkgN, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <>
  void                    Return             l     %1.3
Prom 5:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    package, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <>
  void                    Return             l     %1.3
Prom 6:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     gettextf, e1.0
  prom-           %1.2  = MkArg                    unboundValue, .requirePackage[0x56039cee18e0]_p7, e1.0
  val?            %1.3  = Call               !     %1.1("unable to find required package %s", %1.2) e1.0   <>
  void                    Return             l     %1.3
Prom 7:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     sQuote, e1.0
  prom-           %1.2  = MkArg                    unboundValue, .requirePackage[0x56039cee18e0]_p8, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <>
  void                    Return             l     %1.3
Prom 8:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    package, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <>
  void                    Return             l     %1.3
Prom 9:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    package, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <>
  void                    Return             l     %1.3
Prom 10:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    package, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 11:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    package, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <>
  void                    Return             l     %1.3
Prom 12:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     parent.frame, e1.0
  val?            %1.2  = Call               !     %1.1() e1.0   <>
  void                    Return             l     %1.2
Prom 13:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    package, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3

│ .requirePackage[0x56039cee18e0]                                              │
└──────────────────────────────────────────────────────────────────────────────┘
