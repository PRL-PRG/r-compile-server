
┌──────────────────────────────────────────────────────────────────────────────┐
│ possibleExtends[0x56039c573b20]                                              │
│ Context: CorrOrd,!TMany,Argmatch;Eager2,NonRefl2                             │
│ Properties:                                                                  │
├────── PIR Version After Optimizations
possibleExtends[0x56039c573b20]
BB0
  goto BB1
BB1   <- [0]
  val?^ | miss    %1.0  = LdArg                    3
  val?~ | miss    %1.1  = LdArg                    2
  val?^ | miss    %1.2  = LdArg                    1
  val?^ | miss    %1.3  = LdArg                    0
  lgl$#-          %1.4  = Identical                %1.1, missingArg
  lgl$#-          %1.5  = Identical                %1.0, missingArg
  env             e1.6  = MkEnv              l     class1=%1.3, class2=%1.2, ClassDef1=%1.1, ClassDef2=%1.0, parent=<env 0x560396017378>, context 1
  void                    Branch                   %1.4 -> BB2 (if true) | BB67 (if false)
BB2   <- [1]
  prom-           %2.0  = MkArg                    unboundValue, possibleExtends[0x56039c573b20]_p0, e1.6
  val?^ | miss    %2.1  = CastType                 up %2.0
  void                    StArg              lW    ClassDef1, %2.1, e1.6
  goto BB3
BB67   <- [1]
  goto BB3
BB3   <- [2, 67]
  void                    Branch                   %1.5 -> BB66 (if true) | BB4 (if false)
BB66   <- [3]
  prom-           %66.0 = MkArg                    unboundValue, possibleExtends[0x56039c573b20]_p2, e1.6
  val?^ | miss    %66.1 = CastType                 up %66.0
  void                    StArg              lW    ClassDef2, %66.1, e1.6
  goto BB5
BB4   <- [3]
  goto BB5
BB5   <- [66, 4]
  cp              %5.0  = Checkpoint                -> BB7 (default) | BB6 (if assume failed)
BB7   <- [5]
  val?^ | miss    %7.0  = LdVar              eR    .identC, <env 0x560396017378>
  lgl$#-          %7.1  = Identical                %7.0, function(c1=NULL, c2=NULL) <(rir::DispatchTabl|...
  void                    Assume             D     %7.1, %5.0 (CallTarget@0x560399f0c260[Call#3])
  prom-           %7.3  = MkArg                    unboundValue, possibleExtends[0x56039c573b20]_p6, e1.6
  prom-           %7.4  = MkArg                    unboundValue, possibleExtends[0x56039c573b20]_p7, e1.6
  val?            %7.5  = StaticCall         !v    .identC[0x5603a1278690](%7.3, %7.4) e1.6   <lgl$->
  lgl$#-          %7.6  = IsType                   %7.5 isA lgl$-
  cp              %7.7  = Checkpoint                -> BB9 (default) | BB8 (if assume failed)
BB6   <- [5]
  fs              %6.0  = FrameState         R     0x560398630ac0+0: [], env=e1.6
  void                    Deopt              !v    %6.0
BB9   <- [7]
  void                    Assume             D     %7.6, %7.7 (Typecheck@0x560399f0c260[Type#9])
  lgl$-           %9.1  = CastType           d     dn %7.5
  lgl$-           %9.2  = AsLogical                %9.1
  lgl$#-          %9.3  = Identical                %9.2, true
  void                    Branch                   %9.3 -> BB65 (if true) | BB10 (if false)
BB8   <- [7]
  fs              %8.0  = FrameState         R     0x560398630ac0+37: [%7.5], env=e1.6
  void                    Deopt              !v    %8.0   !
BB65   <- [9]
  goto BB13
BB10   <- [9]
  val?^ | miss    %10.0 = LdVar              eR    .identC, e1.6
  lgl$#-          %10.1 = Identical                %10.0, function(c1=NULL, c2=NULL) <(rir::DispatchTabl|...
  void                    Assume             D     %10.1, %7.7 (CallTarget@0x560399f0c260[Call#4])
  prom-           %10.3 = MkArg                    unboundValue, possibleExtends[0x56039c573b20]_p8, e1.6
  val?            %10.4 = StaticCall         !v    .identC[0x5603990a65c0](%10.3, "ANY") e1.6   <lgl$->
  lgl$#-          %10.5 = IsType                   %10.4 isA lgl$-
  cp              %10.6 = Checkpoint                -> BB12 (default) | BB11 (if assume failed)
BB13   <- [12, 65]
  lgl$-           %13.0 = Phi                      %12.3:BB12, %9.2:BB65
  lgl$#-          %13.1 = CheckTrueFalse     e     %13.0
  void                    Branch                   %13.1 -> BB64 (if true) | BB14 (if false)
BB12   <- [10]
  void                    Assume             D     %10.5, %10.6 (Typecheck@0x560399f0c260[Type#11])
  lgl$-           %12.1 = CastType           d     dn %10.4
  lgl$-           %12.2 = AsLogical                %12.1
  lgl$-           %12.3 = LOr                      %9.2, %12.2
  goto BB13
BB11   <- [10]
  fs              %11.0 = FrameState         R     0x560398630ac0+86: [%9.2, %10.4], env=e1.6
  void                    Deopt              !v    %11.0   !
BB64   <- [13]
  void                    Visible            v     
  goto BB50
BB14   <- [13]
  val?^ | miss    %14.0 = LdVar              eR    ClassDef1, e1.6
  val?            %14.1 = Force!<lazy>       !v    %14.0, e1.6   <other>
  lgl$-           %14.2 = Is                       %14.1, NULL
  lgl$#-          %14.3 = CheckTrueFalse     e     %14.2
  void                    Branch                   %14.3 -> BB63 (if true) | BB15 (if false)
BB50   <- [63, 64, 49]
  val?            %50.0 = Phi                      %49.0:BB49, false:BB63, true:BB64
  void                    Return             l     %50.0
BB63   <- [14]
  void                    Visible            v     
  goto BB50
BB15   <- [14]
  (cls|spec|blt)  %15.0 = LdFun              !v    @, <0x560395a0fbd8>, e1.6
  prom-           %15.1 = MkArg                    unboundValue, possibleExtends[0x56039c573b20]_p9, e1.6
  prom-           %15.2 = MkArg                    unboundValue, possibleExtends[0x56039c573b20]_p10, e1.6
  val?            %15.3 = Call               !v    %15.0(%15.1, %15.2) e1.6   <vec+>
  void                    StVar              lW    ext, %15.3, e1.6
  lgl$#-          %15.5 = IsType                   %15.3 isA val+   <true>
  cp              %15.6 = Checkpoint                -> BB17 (default) | BB16 (if assume failed)
BB17   <- [15]
  val             %17.0 = ChkMissing         e     %15.3
  void                    Assume             D     %15.5, %15.6 (DeadBranchReached@0x560399f0c260[Test#1])
  val?^ | miss    %17.2 = LdVar              eR    class2, e1.6
  val?            %17.3 = Force!<wrapped>    !v    %17.2, e1.6   <str$+>
  lgl$#-          %17.4 = IsType                   %17.3 isA val?+
  cp              %17.5 = Checkpoint                -> BB19 (default) | BB18 (if assume failed)
BB16   <- [15]
  fs              %16.0 = FrameState         R     0x560398630ac0+199: [], env=e1.6
  void                    Deopt              !v    %16.0   !
BB19   <- [17]
  lgl$#-          %19.0 = IsType                   %15.3 isA val?+
  void                    Assume             D     %19.0, %17.5 (Typecheck@0x560399f0c260[Type#15])
  val?+           %19.2 = CastType           d     dn %15.3   <vec+>
  void                    Assume             D     %17.4, %17.5 (Typecheck@0x560399f0c260[Type#18])
  val?+           %19.4 = CastType           d     dn %17.3   <str$+>
  val?            %19.5 = Extract2_1D        wed   %19.2, %19.4, elided   <(nil|other)>
  lgl$-           %19.6 = Is                       %19.5, NULL
  void                    StVar              lW    contained, %19.5, e1.6
  lgl$-           %19.8 = Not                d     %19.6, elided
  lgl$#-          %19.9 = CheckTrueFalse     e     %19.8
  void                    Branch                   %19.9 -> BB62 (if true) | BB20 (if false)
BB18   <- [17]
  fs              %18.0 = FrameState         R     0x560398630ac0+253: [%15.3, %17.3], env=e1.6
  void                    Deopt              !v    %18.0   !
BB62   <- [19]
  val             %62.0 = ChkMissing         e     %19.5
  void                    Visible            v     
  goto BB49
BB20   <- [19]
  val?^ | miss    %20.0 = LdVar              eR    ClassDef2, e1.6
  val?            %20.1 = Force!<lazy>       !v    %20.0, e1.6   <other>
  lgl$-           %20.2 = Is                       %20.1, NULL
  lgl$#-          %20.3 = CheckTrueFalse     e     %20.2
  void                    Branch                   %20.3 -> BB61 (if true) | BB21 (if false)
BB49   <- [62, 48]
  val?            %49.0 = Phi                      %48.0:BB48, %19.5:BB62
  goto BB50
BB61   <- [20]
  void                    Visible            v     
  goto BB48
BB21   <- [20]
  (cls|spec|blt)  %21.0 = LdFun              !v    @, <0x560395a0fbd8>, e1.6
  prom-           %21.1 = MkArg                    unboundValue, possibleExtends[0x56039c573b20]_p11, e1.6
  prom-           %21.2 = MkArg                    unboundValue, possibleExtends[0x56039c573b20]_p12, e1.6
  val?            %21.3 = Call               !v    %21.0(%21.1, %21.2) e1.6   <vec+>
  void                    StVar              lW    subs, %21.3, e1.6
  cp              %21.5 = Checkpoint                -> BB23 (default) | BB22 (if assume failed)
BB48   <- [61, 47]
  val?            %48.0 = Phi                      %47.0:BB47, false:BB61
  goto BB49
BB23   <- [21]
  val?^ | miss    %23.0 = LdVar              eR    .identC, e1.6
  lgl$#-          %23.1 = Identical                %23.0, function(c1=NULL, c2=NULL) <(rir::DispatchTabl|...
  void                    Assume             D     %23.1, %21.5 (CallTarget@0x560399f0c260[Call#7])
  prom-           %23.3 = MkArg                    unboundValue, possibleExtends[0x56039c573b20]_p13, e1.6
  val?            %23.4 = StaticCall         !v    .identC[0x5603990a65c0](%23.3, "classRepresentation") e1.6   <lgl$->
  lgl$#-          %23.5 = IsType                   %23.4 isA lgl$-
  cp              %23.6 = Checkpoint                -> BB25 (default) | BB24 (if assume failed)
BB22   <- [21]
  fs              %22.0 = FrameState         R     0x560398630ac0+364: [], env=e1.6
  void                    Deopt              !v    %22.0   !
BB25   <- [23]
  void                    Assume             D     %23.5, %23.6 (Typecheck@0x560399f0c260[Type#26])
  lgl$-           %25.1 = CastType           d     dn %23.4
  lgl$-           %25.2 = Not                d     %25.1, elided
  lgl$-           %25.3 = AsLogical                %25.2
  lgl$#-          %25.4 = Identical                %25.3, false
  void                    Branch                   %25.4 -> BB60 (if true) | BB26 (if false)
BB24   <- [23]
  fs              %24.0 = FrameState         R     0x560398630ac0+401: [%23.4], env=e1.6
  void                    Deopt              !v    %24.0   !
BB60   <- [25]
  goto BB29
BB26   <- [25]
  val?^ | miss    %26.0 = LdVar              eR    isClassUnion, e1.6
  lgl$#-          %26.1 = Identical                %26.0, function(Class) <(rir::DispatchTable*)0x5603a0|...
  void                    Assume             D     %26.1, %23.6 (CallTarget@0x560399f0c260[Call#9])
  prom-           %26.3 = MkArg                    unboundValue, possibleExtends[0x56039c573b20]_p15, e1.6
  val?            %26.4 = StaticCall         !v    isClassUnion[0x56039e53f040](%26.3) e1.6   <lgl$->
  lgl$#-          %26.5 = IsType                   %26.4 isA lgl$-
  cp              %26.6 = Checkpoint                -> BB28 (default) | BB27 (if assume failed)
BB29   <- [28, 60]
  lgl$-           %29.0 = Phi                      %28.3:BB28, %25.3:BB60
  cp              %29.1 = Checkpoint                -> BB31 (default) | BB30 (if assume failed)
BB28   <- [26]
  void                    Assume             D     %26.5, %26.6 (Typecheck@0x560399f0c260[Type#28])
  lgl$-           %28.1 = CastType           d     dn %26.4
  lgl$-           %28.2 = AsLogical                %28.1
  lgl$-           %28.3 = LAnd                     %25.3, %28.2
  goto BB29
BB27   <- [26]
  fs              %27.0 = FrameState         R     0x560398630ac0+446: [%25.3, %26.4], env=e1.6
  void                    Deopt              !v    %27.0   !
BB31   <- [29]
  lgl$#-          %31.0 = CheckTrueFalse     e     %29.0
  void                    Branch                   %31.0 -> BB57 (if true) | BB32 (if false)
BB30   <- [29]
  fs              %30.0 = FrameState         R     0x560398630ac0+453: [%29.0], env=e1.6
  void                    Deopt              !v    %30.0   !
BB57   <- [31]
  val?^ | miss    %57.0 = LdVar              eR    any, e1.6
  lgl$#-          %57.1 = Identical                <blt any>, %57.0   <true>
  void                    Assume             D     %57.1, %29.1 (DeadBranchReached@0x560399f0c260[Test#8])
  val?^ | miss    %57.3 = LdVar              eR    %in%, e1.6
  lgl$#-          %57.4 = Identical                %57.3, function(x, table) <(rir::DispatchTable*)0x560|...
  void                    Assume             D     %57.4, %29.1 (CallTarget@0x560399f0c260[Call#20])
  prom-           %57.6 = MkArg                    unboundValue, possibleExtends[0x56039c573b20]_p20, e1.6
  prom-           %57.7 = MkArg                    unboundValue, possibleExtends[0x56039c573b20]_p24, e1.6
  val?            %57.8 = StaticCall         !v    %in%[0x560399b1e9b0](%57.6, %57.7) e1.6   <lgl->
  val?            %57.9 = CallBuiltin        !     any(%57.8) e1.6   <lgl$->
  lgl$#-          %57.10 = IsType                   %57.9 isA lgl$-
  cp              %57.11 = Checkpoint                -> BB59 (default) | BB58 (if assume failed)
BB32   <- [31]
  val?^ | miss    %32.0 = LdVar              eR    match, e1.6
  lgl$#-          %32.1 = Identical                %32.0, function(x, table, nomatch=NA, incomparables=N|...
  void                    Assume             D     %32.1, %29.1 (CallTarget@0x560399f0c260[Call#10])
  val?^ | miss    %32.3 = LdVar              eR    class1, e1.6
  val?            %32.4 = Force!<wrapped>    !v    %32.3, e1.6   <str$+>
  cp              %32.5 = Checkpoint                -> BB34 (default) | BB33 (if assume failed)
BB59   <- [57]
  void                    Assume             D     %57.10, %57.11 (Typecheck@0x560399f0c260[Type#63])
  goto BB47
BB58   <- [57]
  fs              %58.0 = FrameState         R     0x560398630ac0+1015: [%57.9], env=e1.6
  void                    Deopt              !v    %58.0   !
BB34   <- [32]
  val?^ | miss    %34.0 = LdVar              eR    names, e1.6
  lgl$#-          %34.1 = Identical                %34.0, <blt names>
  void                    Assume             D     %34.1, %32.5 (CallTarget@0x560399f0c260[Call#11])
  val?^ | miss    %34.3 = LdVar              eR    subs, e1.6
  val?            %34.4 = Force!<value>      !v    %34.3, e1.6   <vec+>
  val?            %34.5 = CallBuiltin        !v    names(%34.4) e1.6   <(nil|str)->
  lgl$#-          %34.6 = IsType                   %34.5 isA val?+
  cp              %34.7 = Checkpoint                -> BB36 (default) | BB35 (if assume failed)
BB33   <- [32]
  prom-           %33.0 = MkArg                    %32.4, possibleExtends[0x56039c573b20]_p16 (!refl), e1.6
  val?~           %33.1 = CastType                 up %33.0
  prom-           %33.2 = MkArg                    unboundValue, possibleExtends[0x56039c573b20]_p17, e1.6
  val?^           %33.3 = CastType                 up %33.2
  fs              %33.4 = FrameState         R     0x560398630ac0+496: [], env=e1.6
  env             e33.5 = (MkEnv)            l     x=%33.1, table=%33.3, nomatch(miss)=NA, incomparables(miss)=nil, parent=R_BaseNamespace, context 0
  fs              %33.6 = FrameState         R     0x560396545d70+9: [%32.4], env=e33.5, next=%33.4
  void                    Deopt              !v    %33.6   !
BB47   <- [59, 46]
  val?            %47.0 = Phi                      %46.0:BB46, %57.9:BB59
  goto BB48
BB36   <- [34]
  lgl$#-          %36.0 = IsType                   %32.4 isA val?+
  void                    Assume             D     %36.0, %34.7 (Typecheck@0x560395d1db30[Type#0])
  val?+           %36.2 = CastType           d     dn %32.4   <str$+>
  void                    Assume             D     %34.6, %34.7 (Typecheck@0x560395d1db30[Type#1])
  val?+           %36.4 = CastType           d     dn %34.5   <(nil|str)->
  val+            %36.5 = CallSafeBuiltin    wed   match(%36.2, %36.4, NA, nil)    <int$->
  lgl$#-          %36.6 = IsType                   %36.5 isA int$-
  cp              %36.7 = Checkpoint                -> BB38 (default) | BB37 (if assume failed)
BB35   <- [34]
  prom-           %35.0 = MkArg                    %34.5, possibleExtends[0x56039c573b20]_p17 (!refl), e1.6
  val?~           %35.1 = CastType                 up %35.0
  prom-           %35.2 = MkArg                    %32.4, possibleExtends[0x56039c573b20]_p16 (!refl), e1.6
  val?~           %35.3 = CastType                 up %35.2
  fs              %35.4 = FrameState         R     0x560398630ac0+496: [], env=e1.6
  env             e35.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%35.1, x=%35.3, parent=R_BaseNamespace, context 0
  fs              %35.6 = FrameState         R     0x560396545d70+23: [%32.4, %34.5], env=e35.5, next=%35.4
  void                    Deopt              !v    %35.6   !
BB38   <- [36]
  void                    Assume             D     %36.6, %36.7 (Typecheck@0x560399f0c260[Type#32])
  int$-           %38.1 = CastType           d     dn %36.5
  void                    StVar              lW    i, %38.1, e1.6
  cp              %38.3 = Checkpoint                -> BB40 (default) | BB39 (if assume failed)
BB37   <- [36]
  prom-           %37.0 = MkArg                    %36.4, possibleExtends[0x56039c573b20]_p17 (!refl), e1.6
  val?~           %37.1 = CastType                 up %37.0
  prom-           %37.2 = MkArg                    %36.2, possibleExtends[0x56039c573b20]_p16 (!refl), e1.6
  val?~           %37.3 = CastType                 up %37.2
  fs              %37.4 = FrameState         R     0x560398630ac0+496: [], env=e1.6
  env             e37.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%37.1, x=%37.3, parent=R_BaseNamespace, context 0
  fs              %37.6 = FrameState         R     0x560396545d70+69: [%36.5], env=e37.5, next=%37.4
  void                    Deopt              !v    %37.6   !
BB40   <- [38]
  val?^ | miss    %40.0 = LdVar              eR    is.na, e1.6
  lgl$#-          %40.1 = Identical                <blt is.na>, %40.0   <true>
  void                    Assume             D     %40.1, %38.3 (DeadBranchReached@0x560399f0c260[Test#3])
  lgl$-           %40.3 = CallSafeBuiltin    wed   is.na(%38.1)    <lgl$->
  lgl$-           %40.4 = Not                d     %40.3, elided
  int-            %40.5 = Extract1_1D        wed   %38.1, %40.4, elided   <int->
  void                    StVar              lW    i, %40.5, e1.6
  cp              %40.7 = Checkpoint                -> BB42 (default) | BB41 (if assume failed)
BB39   <- [38]
  fs              %39.0 = FrameState         R     0x560398630ac0+510: [], env=e1.6
  void                    Deopt              !v    %39.0   !
BB42   <- [40]
  val?^ | miss    %42.0 = LdVar              eR    length, e1.6
  lgl$#-          %42.1 = Identical                <blt length>, %42.0   <true>
  void                    Assume             D     %42.1, %40.7 (DeadBranchReached@0x560399f0c260[Test#4])
  (int|real)$-    %42.3 = CallSafeBuiltin    wed   length(%40.5)    <int$->
  lgl$#-          %42.4 = IsType                   %42.3 isA int$-
  cp              %42.5 = Checkpoint                -> BB44 (default) | BB43 (if assume failed)
BB41   <- [40]
  fs              %41.0 = FrameState         R     0x560398630ac0+668: [], env=e1.6
  void                    Deopt              !v    %41.0   !
BB44   <- [42]
  void                    Assume             D     %42.4, %42.5 (Typecheck@0x560399f0c260[Type#42])
  int$-           %44.1 = CastType           d     dn %42.3
  lgl$#-          %44.2 = CheckTrueFalse     e     %44.1
  void                    Branch                   %44.2 -> BB51 (if true) | BB45 (if false)
BB43   <- [42]
  fs              %43.0 = FrameState         R     0x560398630ac0+759: [%42.3], env=e1.6
  void                    Deopt              !v    %43.0   !
BB51   <- [44]
  val?^ | miss    %51.0 = LdVar              eR    subs, e1.6
  val?            %51.1 = Force!             !v    %51.0, e1.6   <val?_>
  lgl$#-          %51.2 = IsType                   %51.1 isA val+   <@?>
  void                    Branch                   %51.2 -> BB54 (if true) | BB52 (if false)
BB45   <- [44]
  void                    Visible            v     
  goto BB46
BB54   <- [51]
  val?^ | miss    %54.0 = LdVar              eR    i, e1.6
  val?            %54.1 = Force!             !v    %54.0, e1.6   <val?_>
  lgl$#-          %54.2 = IsType                   %54.1 isA val?+
  cp              %54.3 = Checkpoint                -> BB56 (default) | BB55 (if assume failed)
BB52   <- [51]
  prom-           %52.0 = MkArg                    unboundValue, possibleExtends[0x56039c573b20]_p19, e1.6
  goto BB53
BB46   <- [45, 53]
  val?            %46.0 = Phi                      false:BB45, %53.1:BB53
  goto BB47
BB56   <- [54]
  void                    Assume             D     %54.2, %54.3 (Typecheck@0x560399f0c260[Type#46])
  val?+           %56.1 = CastType           d     dn %54.1   <val?_>
  val?            %56.2 = Extract1_1D        wed   %56.1, 1L, elided   <val?_>
  goto BB53
BB55   <- [54]
  fs              %55.0 = FrameState         R     0x560398630ac0+835: [%51.1, %54.1], env=e1.6
  void                    Deopt              !v    %55.0   !
BB53   <- [52, 56]
  val?            %53.0 = Phi                      %56.2:BB56, %52.0:BB52
  val?            %53.1 = Extract2_1D        !v    %51.1, %53.0, e1.6   <val?_>
  void                    Visible            v     
  goto BB46
Prom 0:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     getClassDef, <0x560396bb9cd0>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, possibleExtends[0x56039c573b20]_p1, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <other>
  void                    Return             l     %1.3
Prom 1:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    class1, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <str$+>
  void                    Return             l     %1.3
Prom 2:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     getClassDef, e1.0
  prom-           %1.2  = MkArg                    unboundValue, possibleExtends[0x56039c573b20]_p3, e1.0
  prom-           %1.3  = MkArg                    unboundValue, possibleExtends[0x56039c573b20]_p4, e1.0
  val?            %1.4  = NamedCall          !     %1.1(%1.2, where=%1.3) e1.0   <val?_>
  void                    Return             l     %1.4
Prom 3:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    class2, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 4:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     .classEnv, e1.0
  prom-           %1.2  = MkArg                    unboundValue, possibleExtends[0x56039c573b20]_p5, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <val?_>
  void                    Return             l     %1.3
Prom 5:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    ClassDef1, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 6:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    class1, e1.0
  val?            %1.2  = Force<lazy>        !v    %1.1, e1.0   <str$+>
  val?            %1.3  = Extract2_1D        !v    %1.2, 1L, e1.0   <str$->
  void                    Visible            v     
  void                    Return             l     %1.3
Prom 7:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    class2, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <str$+>
  void                    Return             l     %1.3
Prom 8:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    class2, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <str$+>
  void                    Return             l     %1.3
Prom 9:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    ClassDef1, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 10:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    contains, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 11:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    ClassDef2, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 12:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    subclasses, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 13:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     class, <0x560395a10748>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, possibleExtends[0x56039c573b20]_p14, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <str$+>
  void                    Return             l     %1.3
Prom 14:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    ClassDef2, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <other>
  void                    Return             l     %1.3
Prom 15:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    ClassDef2, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <other>
  void                    Return             l     %1.3
Prom 16:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    class1, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <str$+>
  void                    Return             l     %1.3
Prom 17:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     names, <0x560395a10470>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, possibleExtends[0x56039c573b20]_p18, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <(nil|str)->
  void                    Return             l     %1.3
Prom 18:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    subs, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 19:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    i, e1.0
  val?            %1.2  = Force              !v    %1.1, e1.0   <val?_>
  val?            %1.3  = Extract1_1D        !v    %1.2, 1L, e1.0   <val?_>
  void                    Visible            v     
  void                    Return             l     %1.3
Prom 20:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     c, <0x560395a10940>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, possibleExtends[0x56039c573b20]_p21, e1.0
  prom-           %1.3  = MkArg                    unboundValue, possibleExtends[0x56039c573b20]_p22, e1.0
  val?            %1.4  = Call               !     %1.1(%1.2, %1.3) e1.0   <str->
  void                    Return             l     %1.4
Prom 21:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    class1, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <str$+>
  void                    Return             l     %1.3
Prom 22:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     names, <0x560395a10470>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, possibleExtends[0x56039c573b20]_p23, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <str$->
  void                    Return             l     %1.3
Prom 23:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    ext, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <vec$+>
  void                    Return             l     %1.3
Prom 24:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     names, <0x560395a10470>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, possibleExtends[0x56039c573b20]_p25, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <str->
  void                    Return             l     %1.3
Prom 25:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    subs, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3

│ possibleExtends[0x56039c573b20]                                              │
└──────────────────────────────────────────────────────────────────────────────┘
