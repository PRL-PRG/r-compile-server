
┌──────────────────────────────────────────────────────────────────────────────┐
│ checkSlotAssignment[0x56039800af40]                                          │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;NonRefl0,NonRefl1,NonRefl2           │
│ Properties:                                                                  │
├────── PIR Version After Optimizations
checkSlotAssignment[0x56039800af40]
BB0
  goto BB1
BB1   <- [0]
  val?^           %1.0  = LdArg                    2
  val?^           %1.1  = LdArg                    1
  val?^           %1.2  = LdArg                    0
  cp              %1.3  = Checkpoint                -> BB2 (default) | BB32 (if assume failed)
BB2   <- [1]
  val?^ | miss    %2.0  = LdVar              eR    class, <env 0x560396017378>
  lgl$#-          %2.1  = Identical                <blt class>, %2.0   <true>
  void                    Assume             D     %2.1, %1.3 (DeadBranchReached@0x56039bd07740[Test#0])
  env             e2.3  = MkEnv              l     obj=%1.2, name=%1.1, value=%1.0, parent=<env 0x560396017378>, context 1
  val?            %2.4  = Force!<lazy>       !vrd  %1.2,    <other>
  val?            %2.5  = CallBuiltin        !v    class(%2.4) e2.3   <str$+>
  void                    StVar              lW    cl, %2.5, e2.3
  cp              %2.7  = Checkpoint                -> BB4 (default) | BB3 (if assume failed)
BB32   <- [1]
  env             e32.0 = (MkEnv)            l     obj=%1.2, name=%1.1, value=%1.0, parent=<env 0x560396017378>, context 1
  fs              %32.1 = FrameState         R     0x56039e625580+0: [], env=e32.0
  void                    Deopt              !v    %32.1
BB4   <- [2]
  val?^ | miss    %4.0  = LdVar              eR    getClass, e2.3
  lgl$#-          %4.1  = Identical                %4.0, function(Class, .Force=FALSE, where=.classEnv(|...
  void                    Assume             D     %4.1, %2.7 (CallTarget@0x56039bd07740[Call#1])
  prom-           %4.3  = MkArg                    unboundValue, checkSlotAssignment[0x56039800af40]_p0 (!refl), e2.3
  val?            %4.4  = StaticCall         !v    getClass[0x56039b6d5fe0](%4.3) e2.3   <other>
  void                    StVar              lW    ClassDef, %4.4, e2.3
  (cls|spec|blt)  %4.6  = LdFun              !v    @, <0x560395a0fbd8>, e2.3
  prom-           %4.7  = MkArg                    unboundValue, checkSlotAssignment[0x56039800af40]_p1, e2.3
  prom-           %4.8  = MkArg                    unboundValue, checkSlotAssignment[0x56039800af40]_p2, e2.3
  val?            %4.9  = Call               !v    %4.6(%4.7, %4.8) e2.3   <vec+>
  lgl$#-          %4.10 = IsType                   %4.9 isA val+   <true>
  cp              %4.11 = Checkpoint                -> BB6 (default) | BB5 (if assume failed)
BB3   <- [2]
  fs              %3.0  = FrameState         R     0x56039e625580+105: [], env=e2.3
  void                    Deopt              !v    %3.0   !
BB6   <- [4]
  void                    Assume             D     %4.10, %4.11 (DeadBranchReached@0x56039bd07740[Test#1])
  val?^ | miss    %6.1  = LdVar              eR    name, e2.3
  val?            %6.2  = Force!<lazy>       !v    %6.1, e2.3   <str$->
  lgl$#-          %6.3  = IsType                   %6.2 isA val?-
  cp              %6.4  = Checkpoint                -> BB8 (default) | BB7 (if assume failed)
BB5   <- [4]
  fs              %5.0  = FrameState         R     0x56039e625580+188: [%4.9], env=e2.3
  void                    Deopt              !v    %5.0   !
BB8   <- [6]
  lgl$#-          %8.0  = IsType                   %4.9 isA val?+
  void                    Assume             D     %8.0, %6.4 (Typecheck@0x56039bd07740[Type#7])
  val?+           %8.2  = CastType           d     dn %4.9   <vec+>
  void                    Assume             D     %6.3, %6.4 (Typecheck@0x56039bd07740[Type#9])
  val?-           %8.4  = CastType           d     dn %6.2   <str$->
  val?            %8.5  = Extract2_1D        wed   %8.2, %8.4, elided   <str$->
  lgl$-           %8.6  = Is                       %8.5, NULL
  void                    StVar              lW    slotClass, %8.5, e2.3
  cp              %8.8  = Checkpoint                -> BB10 (default) | BB9 (if assume failed)
BB7   <- [6]
  fs              %7.0  = FrameState         R     0x56039e625580+233: [%4.9, %6.2], env=e2.3
  void                    Deopt              !v    %7.0   !
BB10   <- [8]
  val             %10.0 = ChkMissing         e     %8.5
  lgl$#-          %10.1 = CheckTrueFalse     e     %8.6
  void                    Branch                   %10.1 -> BB31 (if true) | BB11 (if false)
BB9   <- [8]
  fs              %9.0  = FrameState         R     0x56039e625580+254: [], env=e2.3
  void                    Deopt              !v    %9.0   !
BB31   <- [10]
  (cls|spec|blt)  %31.0 = LdFun              !v    stop, e2.3
  fs              %31.1 = FrameState         R     0x56039e625580+289: [%31.0], env=e2.3
  void                    Deopt              !v    %31.1, DeadCall@0x56039bd07740[Call#3], %31.0   !
BB11   <- [10]
  val?^ | miss    %11.0 = LdVar              eR    class, e2.3
  lgl$#-          %11.1 = Identical                <blt class>, %11.0   <true>
  void                    Assume             D     %11.1, %8.8 (DeadBranchReached@0x56039bd07740[Test#2])
  val?^ | miss    %11.3 = LdVar              eR    value, e2.3
  val?            %11.4 = Force!<lazy>       !v    %11.3, e2.3   <val?+>
  val?            %11.5 = CallBuiltin        !v    class(%11.4) e2.3   <str$->
  void                    StVar              lW    valueClass, %11.5, e2.3
  cp              %11.7 = Checkpoint                -> BB13 (default) | BB12 (if assume failed)
BB13   <- [11]
  val?^ | miss    %13.0 = LdVar              eR    .identC, e2.3
  lgl$#-          %13.1 = Identical                %13.0, function(c1=NULL, c2=NULL) <(rir::DispatchTabl|...
  void                    Assume             D     %13.1, %11.7 (CallTarget@0x56039bd07740[Call#8])
  prom-           %13.3 = MkArg                    unboundValue, checkSlotAssignment[0x56039800af40]_p3, e2.3
  prom-           %13.4 = MkArg                    unboundValue, checkSlotAssignment[0x56039800af40]_p4 (!refl), e2.3
  val?            %13.5 = StaticCall         !v    .identC[0x56039e62aa00](%13.3, %13.4) e2.3   <lgl$->
  lgl$#-          %13.6 = IsType                   %13.5 isA lgl$-
  cp              %13.7 = Checkpoint                -> BB15 (default) | BB14 (if assume failed)
BB12   <- [11]
  fs              %12.0 = FrameState         R     0x56039e625580+435: [], env=e2.3
  void                    Deopt              !v    %12.0   !
BB15   <- [13]
  void                    Assume             D     %13.6, %13.7 (Typecheck@0x56039bd07740[Type#22])
  lgl$-           %15.1 = CastType           d     dn %13.5
  lgl$#-          %15.2 = CheckTrueFalse     e     %15.1
  void                    Branch                   %15.2 -> BB30 (if true) | BB16 (if false)
BB14   <- [13]
  fs              %14.0 = FrameState         R     0x56039e625580+472: [%13.5], env=e2.3
  void                    Deopt              !v    %14.0   !
BB30   <- [15]
  val?^ | miss    %30.0 = LdVar              eR    value, e2.3
  void                    Visible            v     
  val?            %30.2 = Force!<wrapped>    !     %30.0, e2.3   <(lgl|vec)+>
  goto BB28
BB16   <- [15]
  val?^ | miss    %16.0 = LdVar              eR    possibleExtends, e2.3
  lgl$#-          %16.1 = Identical                %16.0, function(class1, class2, ClassDef1=getClassDef|...
  void                    Assume             D     %16.1, %13.7 (CallTarget@0x56039bd07740[Call#9])
  prom-           %16.3 = MkArg                    unboundValue, checkSlotAssignment[0x56039800af40]_p5, e2.3
  prom-           %16.4 = MkArg                    unboundValue, checkSlotAssignment[0x56039800af40]_p6, e2.3
  prom-           %16.5 = MkArg                    unboundValue, checkSlotAssignment[0x56039800af40]_p7, e2.3
  val?            %16.6 = StaticCall         !v    possibleExtends[0x56039c573b20](%16.3, %16.4, missingArg, %16.5) { 0 1 3n } e2.3   <lgl$->
  lgl$#-          %16.7 = IsType                   %16.6 isA lgl$-
  cp              %16.8 = Checkpoint                -> BB18 (default) | BB17 (if assume failed)
BB28   <- [30, 27]
  val?            %28.0 = Phi                      %27.2:BB27, %30.2:BB30
  void                    Return             l     %28.0
BB18   <- [16]
  void                    Assume             D     %16.7, %16.8 (Typecheck@0x56039bd07740[Type#30])
  lgl$-           %18.1 = CastType           d     dn %16.6
  void                    StVar              lW    ok, %18.1, e2.3
  cp              %18.3 = Checkpoint                -> BB20 (default) | BB19 (if assume failed)
BB17   <- [16]
  fs              %17.0 = FrameState         R     0x56039e625580+557: [%16.6], env=e2.3
  void                    Deopt              !v    %17.0   !
BB20   <- [18]
  val?^ | miss    %20.0 = LdVar              eR    isFALSE, e2.3
  lgl$#-          %20.1 = Identical                %20.0, function(x) <(rir::DispatchTable*)0x560398a60d|...
  void                    Assume             D     %20.1, %18.3 (CallTarget@0x56039bd07740[Call#12])
  val?            %20.3 = StaticCall         !v    isFALSE[0x56039e738510](%18.1) e2.3   <lgl$->
  lgl$#-          %20.4 = IsType                   %20.3 isA lgl$-
  cp              %20.5 = Checkpoint                -> BB22 (default) | BB21 (if assume failed)
BB19   <- [18]
  fs              %19.0 = FrameState         R     0x56039e625580+571: [], env=e2.3
  void                    Deopt              !v    %19.0   !
BB22   <- [20]
  void                    Assume             D     %20.4, %20.5 (Typecheck@0x56039bd07740[Type#32])
  lgl$-           %22.1 = CastType           d     dn %20.3
  lgl$#-          %22.2 = CheckTrueFalse     e     %22.1
  void                    Branch                   %22.2 -> BB29 (if true) | BB23 (if false)
BB21   <- [20]
  fs              %21.0 = FrameState         R     0x56039e625580+603: [%20.3], env=e2.3
  void                    Deopt              !v    %21.0   !
BB29   <- [22]
  (cls|spec|blt)  %29.0 = LdFun              !v    stop, e2.3
  fs              %29.1 = FrameState         R     0x56039e625580+754: [%29.0], env=e2.3
  void                    Deopt              !v    %29.1, DeadCall@0x56039bd07740[Call#15], %29.0   !
BB23   <- [22]
  val?^ | miss    %23.0 = LdVar              eR    isTRUE, e2.3
  lgl$#-          %23.1 = Identical                %23.0, function(x) <(rir::DispatchTable*)0x5603979176|...
  void                    Assume             D     %23.1, %20.5 (CallTarget@0x56039bd07740[Call#13])
  val?^ | miss    %23.3 = LdVar              eR    ok, e2.3
  val?            %23.4 = Force!<value>      !v    %23.3, e2.3   <lgl$->
  prom-           %23.5 = MkArg                    %23.4, checkSlotAssignment[0x56039800af40]_p13 (!refl), 
  val?            %23.6 = StaticCall         !v    isTRUE[0x560396574470](%23.5) e2.3   <lgl$->
  lgl$#-          %23.7 = IsType                   %23.6 isA lgl$-
  cp              %23.8 = Checkpoint                -> BB25 (default) | BB24 (if assume failed)
BB25   <- [23]
  void                    Assume             D     %23.7, %23.8 (Typecheck@0x56039bd07740[Type#34])
  lgl$-           %25.1 = CastType           d     dn %23.6
  lgl$#-          %25.2 = CheckTrueFalse     e     %25.1
  void                    Branch                   %25.2 -> BB27 (if true) | BB26 (if false)
BB24   <- [23]
  fs              %24.0 = FrameState         R     0x56039e625580+646: [%23.6], env=e2.3
  void                    Deopt              !v    %24.0   !
BB27   <- [25]
  val?^ | miss    %27.0 = LdVar              eR    value, e2.3
  void                    Visible            v     
  val?            %27.2 = Force!<wrapped>    !     %27.0, e2.3   <val?+>
  goto BB28
BB26   <- [25]
  (cls|spec|blt)  %26.0 = LdFun              !v    as, e2.3
  fs              %26.1 = FrameState         R     0x56039e625580+662: [%26.0], env=e2.3
  void                    Deopt              !v    %26.1, DeadCall@0x56039bd07740[Call#14], %26.0   !
Prom 0:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    cl, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$+>
  void                    Return             l     %1.3
Prom 1:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    ClassDef, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 2:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    slots, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 3:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    slotClass, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 4:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    valueClass, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 5:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    valueClass, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 6:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    slotClass, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 7:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     getClassDef, e1.0
  prom-           %1.2  = MkArg                    unboundValue, checkSlotAssignment[0x56039800af40]_p8, e1.0
  prom-           %1.3  = MkArg                    unboundValue, checkSlotAssignment[0x56039800af40]_p9, e1.0
  val?            %1.4  = NamedCall          !     %1.1(%1.2, where=%1.3) e1.0   <val?_>
  void                    Return             l     %1.4
Prom 8:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    slotClass, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 9:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     .classEnv, e1.0
  prom-           %1.2  = MkArg                    unboundValue, checkSlotAssignment[0x56039800af40]_p10, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <val?_>
  void                    Return             l     %1.3
Prom 10:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    ClassDef, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 13:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    ok, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <lgl$->
  void                    Return             l     %1.3

│ checkSlotAssignment[0x56039800af40]                                          │
└──────────────────────────────────────────────────────────────────────────────┘
