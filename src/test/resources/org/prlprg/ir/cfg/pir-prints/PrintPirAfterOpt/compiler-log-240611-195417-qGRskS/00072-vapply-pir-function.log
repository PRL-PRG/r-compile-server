
┌──────────────────────────────────────────────────────────────────────────────┐
│ vapply[0x561663451ef0]                                                       │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;Eager2,NonRefl0,NonRefl2,!Obj0,!Obj2,SimpleInt2 miss: 2│
│ Properties:                                                                  │
├────── PIR Version After Optimizations
vapply[0x561663451ef0]
BB0
  goto BB1
BB1   <- [0]
  int$~-          %1.0  = LdArg                    2
  val?^           %1.1  = LdArg                    1
  val?^           %1.2  = LdArg                    0
  env             e1.3  = MkEnv              l     X=%1.2, FUN=%1.1, FUN.VALUE=%1.0, ...(miss)=missingArg, USE.NAMES(miss)=true, parent=R_BaseNamespace, context 1
  prom-           %1.4  = MkArg                    unboundValue, vapply[0x561663451ef0]_p1, e1.3
  val?            %1.5  = StaticCall         !v    match.fun[0x5616622292c0](%1.4) e1.3   <(cls|blt)->
  void                    StVar              lW    FUN, %1.5, e1.3
  cp              %1.7  = Checkpoint                -> BB2 (default) | BB10 (if assume failed)
BB2   <- [1]
  val?^ | miss    %2.0  = LdVar              eR    is.vector, e1.3
  lgl$#-          %2.1  = Identical                %2.0, function(x, mode="any") <(rir::DispatchTable*)|...
  void                    Assume             D     %2.1, %1.7 (CallTarget@0x5616631db2e0[Call#1])
  val?^ | miss    %2.3  = LdVar              eR    X, e1.3
  val?            %2.4  = Force!<lazy>       !v    %2.3, e1.3   <(str|vec)+>
  lgl$#-          %2.5  = CallSafeBuiltin    vwed  is.vector(%2.4, "any")    <lgl$->
  cp              %2.6  = Checkpoint                -> BB4 (default) | BB3 (if assume failed)
BB10   <- [1]
  fs              %10.0 = FrameState         R     0x561662f1e660+46: [], env=e1.3
  void                    Deopt              !v    %10.0   !
BB4   <- [2]
  lgl$#-          %4.0  = Not                vd    %2.5, elided
  void                    Branch                   %2.5 -> BB9 (if true) | BB5 (if false)
BB3   <- [2]
  fs              %3.0  = FrameState         R     0x561662f1e660+78: [], env=e1.3
  prom-           %3.1  = MkArg                    %2.4, vapply[0x561663451ef0]_p2 (!refl), e1.3
  val?~           %3.2  = CastType                 up %3.1
  env             e3.3  = (MkEnv)            l     mode(miss)="any", x=%3.2, parent=R_BaseNamespace, context 0
  fs              %3.4  = FrameState         R     0x5616631e4990+41: [%2.5], env=e3.3, next=%3.0
  void                    Deopt              !v    %3.4   !
BB9   <- [4]
  val?^ | miss    %9.0  = LdVar              eR    is.object, e1.3
  lgl$#-          %9.1  = Identical                <blt is.object>, %9.0   <true>
  void                    Assume             D     %9.1, %2.6 (DeadBranchReached@0x5616631db2e0[Test#0])
  val?^ | miss    %9.3  = LdVar              eR    X, e1.3
  val?            %9.4  = Force!<wrapped>    !v    %9.3, e1.3   <(str|vec)+>
  lgl$#-          %9.5  = CallSafeBuiltin    vwed  is.object(%9.4)    <lgl$->
  lgl$-           %9.6  = LOr                      %4.0, %9.5
  goto BB6
BB5   <- [4]
  goto BB6
BB6   <- [5, 9]
  lgl$-           %6.0  = Phi                      %9.6:BB9, %4.0:BB5
  lgl$#-          %6.1  = CheckTrueFalse     e     %6.0
  void                    Branch                   %6.1 -> BB8 (if true) | BB7 (if false)
BB8   <- [6]
  (cls|spec|blt)  %8.0  = LdFun              !v    as.list, e1.3
  fs              %8.1  = FrameState         R     0x561662f1e660+205: [%8.0], env=e1.3
  void                    Deopt              !v    %8.1, DeadCall@0x5616631db2e0[Call#3], %8.0   !
BB7   <- [6]
  (cls|spec|blt)  %7.0  = LdFun              !     .Internal, <0x561660cbc698>, e1.3
  prom-           %7.1  = MkArg                    unboundValue, vapply[0x561663451ef0]_p3, e1.3
  val?            %7.2  = Call               !     %7.0(%7.1) e1.3   <val?+>
  void                    Return             l     %7.2
Prom 1:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    FUN, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <(cls|blt)->
  void                    Return             l     %1.3
Prom 2:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    X, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <(str|vec)+>
  void                    Return             l     %1.3
Prom 3:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     vapply, e1.0
  prom-           %1.2  = MkArg                    unboundValue, vapply[0x561663451ef0]_p4, e1.0
  prom-           %1.3  = MkArg                    unboundValue, vapply[0x561663451ef0]_p5, e1.0
  prom-           %1.4  = MkArg                    unboundValue, vapply[0x561663451ef0]_p6, e1.0
  prom-           %1.5  = MkArg                    unboundValue, vapply[0x561663451ef0]_p7, e1.0
  val?            %1.6  = Call               !     %1.1(%1.2, %1.3, %1.4, %1.5) e1.0   <val?_>
  void                    Return             l     %1.6
Prom 4:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    X, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 5:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    FUN, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 6:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    FUN.VALUE, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 7:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    USE.NAMES, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3

│ vapply[0x561663451ef0]                                                       │
└──────────────────────────────────────────────────────────────────────────────┘
