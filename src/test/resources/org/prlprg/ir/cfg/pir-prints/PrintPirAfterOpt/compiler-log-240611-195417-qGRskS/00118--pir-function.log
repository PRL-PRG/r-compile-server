
┌──────────────────────────────────────────────────────────────────────────────┐
│ [0x5616641e09f0]                                                             │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;NonRefl0,NonRefl1,!Obj0,!Obj1        │
│ Properties:                                                                  │
├────── PIR Version After Optimizations
[0x5616641e09f0]
BB0
  goto BB1
BB1   <- [0]
  val?^           %1.0  = LdArg                    1
  val?^           %1.1  = LdArg                    0
  cp              %1.2  = Checkpoint                -> BB2 (default) | BB32 (if assume failed)
BB2   <- [1]
  val?^ | miss    %2.0  = LdVar              eR    isDDSym, <env 0x56166328f230>
  lgl$#-          %2.1  = Identical                %2.0, function(name) <(rir::DispatchTable*)0x5616634|...
  void                    Assume             D     %2.1, %1.2 (CallTarget@0x561663acab48[Call#0])
  env             e2.3  = MkEnv              l     v=%1.1, w=%1.0, parent=<env 0x56166328f230>, context 1
  prom-           %2.4  = MkArg                    unboundValue, [0x5616641e09f0]_p0 (!refl), e2.3
  ct              %2.5  = PushContext        lCL   %2.4, isDDSym(v), function(name) <(rir::DispatchTable*)0x5616634|..., e2.3
  val?^           %2.6  = CastType                 up %2.4
  val?^ | miss    %2.7  = LdVar              eR    is.symbol, <env 0x56166328f230>
  lgl$#-          %2.8  = Identical                <blt is.symbol>, %2.7   <true>
  cp              %2.9  = Checkpoint                -> BB4 (default) | BB3 (if assume failed)
BB32   <- [1]
  env             e32.0 = (MkEnv)            l     v=%1.1, w=%1.0, parent=<env 0x56166328f230>, context 1
  fs              %32.1 = FrameState         R     0x56166353c4a0+0: [], env=e32.0
  void                    Deopt              !v    %32.1
BB4   <- [2]
  void                    Assume             D     %2.8, %2.9 (DeadBranchReached@0x561660ce8228[Test#0])
  env             e4.1  = MkEnv              l     name=%2.6, parent=<env 0x56166328f230>, context 1
  val?            %4.2  = Force!<lazy>       !vr   %2.6,    <(sym|str)->
  lgl$#-          %4.3  = CallSafeBuiltin    wed   is.symbol(%4.2)    <lgl$->
  cp              %4.4  = Checkpoint                -> BB6 (default) | BB5 (if assume failed)
BB3   <- [2]
  fs              %3.0  = FrameState         R     0x56166353c4a0+32: [], env=e2.3
  env             e3.1  = (MkEnv)            l     name=%2.6, parent=<env 0x56166328f230>, context 1
  fs              %3.2  = FrameState         R     0x561663881f50+17: [<blt is.symbol>, %2.8], env=e3.1, next=%3.0
  void                    Deopt              !v    %3.2   !
BB6   <- [4]
  void                    Branch                   %4.3 -> BB31 (if true) | BB7 (if false)
BB5   <- [4]
  fs              %5.0  = FrameState         R     0x56166353c4a0+32: [], env=e2.3
  fs              %5.1  = FrameState         R     0x561663881f50+91: [%4.3], env=e4.1, next=%5.0
  void                    Deopt              !v    %5.1   !
BB31   <- [6]
  goto BB8
BB7   <- [6]
  val?^ | miss    %7.0  = LdVar              eR    is.character, <env 0x56166328f230>
  lgl$#-          %7.1  = Identical                <blt is.character>, %7.0   <true>
  void                    Assume             D     %7.1, %4.4 (DeadBranchReached@0x561660ce8228[Test#1])
  lgl$#-          %7.3  = CallSafeBuiltin    wed   is.character(%4.2)    <lgl$->
  lgl$-           %7.4  = LOr                      %4.3, %7.3
  goto BB8
BB8   <- [31, 7]
  lgl$-           %8.0  = Phi                      %7.4:BB7, %4.3:BB31
  lgl$-           %8.1  = AsLogical                %8.0
  lgl$#-          %8.2  = Identical                %8.1, false
  cp              %8.3  = Checkpoint                -> BB10 (default) | BB9 (if assume failed)
BB10   <- [8]
  void                    Branch                   %8.2 -> BB30 (if true) | BB11 (if false)
BB9   <- [8]
  fs              %9.0  = FrameState         R     0x56166353c4a0+32: [], env=e2.3
  fs              %9.1  = FrameState         R     0x561663881f50+201: [%8.0], env=e4.1, next=%9.0
  void                    Deopt              !v    %9.1   !
BB30   <- [10]
  goto BB16
BB11   <- [10]
  val?^ | miss    %11.0 = LdVar              eR    length, <env 0x56166328f230>
  lgl$#-          %11.1 = Identical                <blt length>, %11.0   <true>
  void                    Assume             D     %11.1, %8.3 (DeadBranchReached@0x561660ce8228[Test#2])
  val?^ | miss    %11.3 = LdVar              eR    grep, <env 0x56166328f230>
  lgl$#-          %11.4 = Identical                %11.3, function(pattern, x, ignore.case=FALSE, perl=F|...
  void                    Assume             D     %11.4, %8.3 (CallTarget@0x561660ce8228[Call#5])
  prom-           %11.6 = MkArg                    unboundValue, [0x5616641e09f0]_p10, e4.1
  val?            %11.7 = StaticCall         !v    grep[0x5616639204c0]("^\.\.[[:digit:]]+$", %11.6) e4.1   <int->
  lgl$#-          %11.8 = IsType                   %11.7 isA int-
  cp              %11.9 = Checkpoint                -> BB13 (default) | BB12 (if assume failed)
BB16   <- [30, 15]
  lgl$-           %16.0 = Phi                      %15.4:BB15, %8.1:BB30
  val?            %16.1 = PopContext         C     %16.0, %2.5   <lgl$->
  lgl$#-          %16.2 = IsType                   %16.1 isA lgl$-
  cp              %16.3 = Checkpoint                -> BB18 (default) | BB17 (if assume failed)
BB13   <- [11]
  void                    Assume             D     %11.8, %11.9 (Typecheck@0x561660ce8228[Type#11])
  int-            %13.1 = CastType           d     dn %11.7
  (int|real)$-    %13.2 = CallSafeBuiltin    wed   length(%13.1)    <int$->
  lgl$#-          %13.3 = IsType                   %13.2 isA int$-
  cp              %13.4 = Checkpoint                -> BB15 (default) | BB14 (if assume failed)
BB12   <- [11]
  fs              %12.0 = FrameState         R     0x56166353c4a0+32: [], env=e2.3
  fs              %12.1 = FrameState         R     0x561663881f50+306: [%8.1, <blt length>, %11.7], env=e4.1, next=%12.0
  void                    Deopt              !v    %12.1   !
BB18   <- [16]
  void                    Assume             D     %16.2, %16.3 (Typecheck@0x561663acab48[Type#1])
  lgl$-           %18.1 = CastType           d     dn %16.1
  lgl$#-          %18.2 = CheckTrueFalse     e     %18.1
  void                    Branch                   %18.2 -> BB29 (if true) | BB19 (if false)
BB17   <- [16]
  fs              %17.0 = FrameState         R     0x56166353c4a0+32: [%16.1], env=e2.3
  void                    Deopt              !v    %17.0   !
BB15   <- [13]
  void                    Assume             D     %13.3, %13.4 (Typecheck@0x561660ce8228[Type#12])
  int$-           %15.1 = CastType           d     dn %13.2
  lgl$-           %15.2 = Neq                d     %15.1, 0, elided   <lgl$->
  lgl$-           %15.3 = AsLogical                %15.2
  lgl$-           %15.4 = LAnd                     %8.1, %15.3
  goto BB16
BB14   <- [13]
  fs              %14.0 = FrameState         R     0x56166353c4a0+32: [], env=e2.3
  fs              %14.1 = FrameState         R     0x561663881f50+328: [%8.1, %13.2], env=e4.1, next=%14.0
  void                    Deopt              !v    %14.1   !
BB29   <- [18]
  void                    StVar              lW    v, "...", e2.3
  goto BB20
BB19   <- [18]
  goto BB20
BB20   <- [19, 29]
  cp              %20.0 = Checkpoint                -> BB22 (default) | BB21 (if assume failed)
BB22   <- [20]
  val?^ | miss    %22.0 = LdVar              eR    is.baseenv, e2.3
  lgl$#-          %22.1 = Identical                %22.0, function(e) <(rir::DispatchTable*)0x5616634b8b|...
  void                    Assume             D     %22.1, %20.0 (CallTarget@0x561663acab48[Call#1])
  prom-           %22.3 = MkArg                    unboundValue, [0x5616641e09f0]_p1, e2.3
  ct              %22.4 = PushContext        lCL   %22.3, is.baseenv(findOwnerEnv(v, $(w, env), stop=$(w|..., function(e) <(rir::DispatchTable*)0x5616634b8b|..., e2.3
  val?^           %22.5 = CastType                 up %22.3
  cp              %22.6 = Checkpoint                -> BB24 (default) | BB23 (if assume failed)
BB21   <- [20]
  fs              %21.0 = FrameState         R     0x56166353c4a0+63: [], env=e2.3
  void                    Deopt              !v    %21.0   !
BB24   <- [22]
  val?^ | miss    %24.0 = LdVar              eR    identical, <env 0x56166328f230>
  lgl$#-          %24.1 = Identical                %24.0, function(x, y, num.eq=TRUE, single.NA=TRUE, at|...
  void                    Assume             D     %24.1, %22.6 (CallTarget@0x5616610c8e08[Call#0])
  env             e24.3 = MkEnv              l     e=%22.5, parent=<env 0x56166328f230>, context 1
  prom-           %24.4 = MkArg                    unboundValue, [0x5616641e09f0]_p12, e24.3
  prom-           %24.5 = MkArg                    unboundValue, [0x5616641e09f0]_p13, e24.3
  ct              %24.6 = PushContext        lCL   %24.4, %24.5, identical(e, .BaseEnv), function(x, y, num.eq=TRUE, single.NA=TRUE, at|..., e24.3
  val?^           %24.7 = CastType                 up %24.5
  val?^           %24.8 = CastType                 up %24.4
  env             e24.9 = MkEnv              l     x=%24.8, y=%24.7, num.eq(miss)=true, single.NA(miss)=true, attrib.as.set(miss)=true, ignore.bytecode(miss)=true, ignore.environment(miss)=false, ignore.srcref(miss)=true, parent=R_BaseNamespace, context 1
  val?            %24.10 = Force!<lazy>       !vL   %24.8, e24.9   <val?+>
  val?            %24.11 = Force!<lazy>       !vL   %24.7, e24.9   <val?+>
  val?            %24.12 = CallBuiltin        !     identical(%24.10, %24.11, true, true, true, true, false, true) e24.9
  val?            %24.13 = PopContext         C     %24.12, %24.6   <lgl$->
  lgl$#-          %24.14 = IsType                   %24.13 isA lgl$-
  cp              %24.15 = Checkpoint                -> BB26 (default) | BB25 (if assume failed)
BB23   <- [22]
  fs              %23.0 = FrameState         R     0x56166353c4a0+95: [], env=e2.3
  env             e23.1 = (MkEnv)            l     e=%22.5, parent=<env 0x56166328f230>, context 1
  fs              %23.2 = FrameState         R     0x5616632d0110+0: [], env=e23.1, next=%23.0
  void                    Deopt              !v    %23.2   !
BB26   <- [24]
  void                    Assume             D     %24.14, %24.15 (Typecheck@0x5616610c8e08[Type#2])
  lgl$-           %26.1 = CastType           d     dn %24.13
  val?            %26.2 = PopContext         C     %26.1, %22.4   <lgl$->
  lgl$#-          %26.3 = IsType                   %26.2 isA lgl$-
  cp              %26.4 = Checkpoint                -> BB28 (default) | BB27 (if assume failed)
BB25   <- [24]
  fs              %25.0 = FrameState         R     0x56166353c4a0+95: [], env=e2.3
  fs              %25.1 = FrameState         R     0x5616632d0110+37: [%24.13], env=e24.3, next=%25.0
  void                    Deopt              !v    %25.1   !
BB28   <- [26]
  void                    Assume             D     %26.3, %26.4 (Typecheck@0x561663acab48[Type#11])
  lgl$-           %28.1 = CastType           d     dn %26.2
  lgl$-           %28.2 = Not                vd    %28.1, elided
  void                    Return             l     %28.2
BB27   <- [26]
  fs              %27.0 = FrameState         R     0x56166353c4a0+95: [%26.2], env=e2.3
  void                    Deopt              !v    %27.0   !
Prom 0:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    v, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 1:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     findOwnerEnv, <0x5616633aaeb8>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, [0x5616641e09f0]_p2, e1.0
  prom-           %1.3  = MkArg                    unboundValue, [0x5616641e09f0]_p3, e1.0
  prom-           %1.4  = MkArg                    unboundValue, [0x5616641e09f0]_p6, e1.0
  prom-           %1.5  = MkArg                    unboundValue, [0x5616641e09f0]_p9, e1.0
  val?            %1.6  = NamedCall          !     %1.1(%1.2, %1.3, stop=%1.4, default=%1.5) e1.0   <env+>
  void                    Return             l     %1.6
Prom 2:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    v, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 3:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     $, <0x561660cbcc10>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, [0x5616641e09f0]_p4, e1.0
  prom-           %1.3  = MkArg                    unboundValue, [0x5616641e09f0]_p5, e1.0
  val?            %1.4  = Call               !     %1.1(%1.2, %1.3) e1.0   <env+>
  void                    Return             l     %1.4
Prom 4:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    w, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 5:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    env, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 6:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     $, <0x561660cbcc10>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, [0x5616641e09f0]_p7, e1.0
  prom-           %1.3  = MkArg                    unboundValue, [0x5616641e09f0]_p8, e1.0
  val?            %1.4  = Call               !     %1.1(%1.2, %1.3) e1.0   <env->
  void                    Return             l     %1.4
Prom 7:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    w, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 8:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    globalenv, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 9:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    .BaseEnv, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <env->
  void                    Return             l     %1.3
Prom 10:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     as.character, <0x561660cca040>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, [0x5616641e09f0]_p11, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <str$->
  void                    Return             l     %1.3
Prom 11:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    name, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <(sym|str)->
  void                    Return             l     %1.3
Prom 12:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    e, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <(lgl|env)+>
  void                    Return             l     %1.3
Prom 13:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    .BaseEnv, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <env->
  void                    Return             l     %1.3

│ [0x5616641e09f0]                                                             │
└──────────────────────────────────────────────────────────────────────────────┘
