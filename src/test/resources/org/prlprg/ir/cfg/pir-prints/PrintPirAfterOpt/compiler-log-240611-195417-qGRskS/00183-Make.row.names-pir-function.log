
┌──────────────────────────────────────────────────────────────────────────────┐
│ Make.row.names[0x5616641387b0]                                               │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;NonRefl0,NonRefl1,NonRefl2,NonRefl3,!Obj0,!Obj1,!Obj2,!Obj3,SimpleInt1,SimpleInt2,SimpleInt3│
│ Properties:                                                                  │
├────── PIR Version After Optimizations
Make.row.names[0x5616641387b0]
BB0
  goto BB1
BB1   <- [0]
  val?^           %1.0  = LdArg                    3
  val?^           %1.1  = LdArg                    2
  val?^           %1.2  = LdArg                    1
  val?^           %1.3  = LdArg                    0
  val?^ | miss    %1.4  = LdVar              eR    nzchar, ?
  lgl$#-          %1.5  = Identical                <blt nzchar>, %1.4   <true>
  cp              %1.6  = Checkpoint                -> BB2 (default) | BB49 (if assume failed)
BB2   <- [1]
  void                    Assume             D     %1.5, %1.6 (DeadBranchReached@0x561663440640[Test#0])
  env             e2.1  = MkEnv              l     nmi=%1.3, ri=%1.2, ni=%1.1, nrow=%1.0, parent=?, context 1
  val+            %2.2  = Force!<lazy>       !vr   %1.3,    <str$->
  val?            %2.3  = CallBuiltin        !v    nzchar(%2.2) e2.1   <lgl$->
  lgl$#-          %2.4  = IsType                   %2.3 isA lgl$-
  cp              %2.5  = Checkpoint                -> BB4 (default) | BB3 (if assume failed)
BB49   <- [1]
  env             e49.0 = (MkEnv)            l     nmi=%1.3, ri=%1.2, ni=%1.1, nrow=%1.0, parent=?, context 1
  fs              %49.1 = FrameState         R     0x5616635d80e0+17: [<blt nzchar>, %1.5], env=e49.0
  void                    Deopt              !v    %49.1
BB4   <- [2]
  void                    Assume             D     %2.4, %2.5 (Typecheck@0x561663440640[Type#2])
  lgl$-           %4.1  = CastType           d     dn %2.3
  lgl$#-          %4.2  = CheckTrueFalse     e     %4.1
  void                    Branch                   %4.2 -> BB37 (if true) | BB5 (if false)
BB3   <- [2]
  fs              %3.0  = FrameState         R     0x5616635d80e0+91: [%2.3], env=e2.1
  void                    Deopt              !v    %3.0   !
BB37   <- [4]
  val?^ | miss    %37.0 = LdVar              eR    autoRnms, e2.1
  val?            %37.1 = Force!             !v    %37.0, e2.1   <val?_>
  lgl$#-          %37.2 = CheckTrueFalse     we    %37.1
  void                    Branch                   %37.2 -> BB48 (if true) | BB38 (if false)
BB5   <- [4]
  val?^ | miss    %5.0  = LdVar              eR    autoRnms, e2.1
  lgl$#-          %5.1  = IsType                   %5.0 isA lgl$-
  void                    Assume             D     %5.1, %2.5 (Typecheck@0x561663440640[Type#3])
  lgl$-           %5.3  = CastType           d     dn %5.0
  lgl$-           %5.4  = AsLogical                %5.3
  lgl$#-          %5.5  = Identical                %5.4, false
  void                    Branch                   %5.5 -> BB36 (if true) | BB6 (if false)
BB48   <- [37]
  void                    StVarSuper         lRW   autoRnms, false, e2.1
  goto BB39
BB38   <- [37]
  goto BB39
BB36   <- [5]
  goto BB9
BB6   <- [5]
  val?^ | miss    %6.0  = LdVar              eR    nrow, e2.1
  val?            %6.1  = Force!<lazy>       !v    %6.0, e2.1   <int$->
  lgl$#-          %6.2  = IsType                   %6.1 isA int$-
  cp              %6.3  = Checkpoint                -> BB8 (default) | BB7 (if assume failed)
BB39   <- [38, 48]
  val?^ | miss    %39.0 = LdVar              eR    ni, e2.1
  val?            %39.1 = Force!             !v    %39.0, e2.1   <val?_>
  lgl$#-          %39.2 = IsType                   %39.1 isA val?+
  cp              %39.3 = Checkpoint                -> BB41 (default) | BB40 (if assume failed)
BB9   <- [36, 8]
  lgl$-           %9.0  = Phi                      %8.4:BB8, %5.4:BB36
  lgl$-           %9.1  = AsLogical                %9.0
  lgl$#-          %9.2  = Identical                %9.1, false
  cp              %9.3  = Checkpoint                -> BB11 (default) | BB10 (if assume failed)
BB8   <- [6]
  void                    Assume             D     %6.2, %6.3 (Typecheck@0x561663440640[Type#4])
  int$-           %8.1  = CastType           d     dn %6.1
  lgl$-           %8.2  = Gt                 d     %8.1, 0L, elided   <lgl$->
  lgl$-           %8.3  = AsLogical                %8.2
  lgl$-           %8.4  = LAnd                     %5.4, %8.3
  goto BB9
BB7   <- [6]
  fs              %7.0  = FrameState         R     0x5616635d80e0+132: [%5.4, %6.1], env=e2.1
  void                    Deopt              !v    %7.0   !
BB41   <- [39]
  void                    Assume             D     %39.2, %39.3 (Typecheck@0x561663440640[Type#31])
  val?+           %41.1 = CastType           d     dn %39.1   <val?_>
  lgl             %41.2 = Eq                 wed   %41.1, 0L, elided   <val?_>
  lgl$#-          %41.3 = CheckTrueFalse     we    %41.2
  void                    Branch                   %41.3 -> BB47 (if true) | BB42 (if false)
BB40   <- [39]
  fs              %40.0 = FrameState         R     0x5616635d80e0+626: [%39.1], env=e2.1
  void                    Deopt              !v    %40.0   !
BB11   <- [9]
  void                    Branch                   %9.2 -> BB35 (if true) | BB12 (if false)
BB10   <- [9]
  fs              %10.0 = FrameState         R     0x5616635d80e0+151: [%9.0], env=e2.1
  void                    Deopt              !v    %10.0   !
BB47   <- [41]
  (cls|spec|blt)  %47.0 = LdFun              !v    character, e2.1
  fs              %47.1 = FrameState         R     0x5616635d80e0+769: [%47.0], env=e2.1
  void                    Deopt              !v    %47.1, DeadCall@0x561663440640[Call#9], %47.0   !
BB42   <- [41]
  val?^ | miss    %42.0 = LdVar              eR    ni, e2.1
  val?            %42.1 = Force!             !v    %42.0, e2.1   <val?_>
  lgl$#-          %42.2 = IsType                   %42.1 isA val?+
  cp              %42.3 = Checkpoint                -> BB44 (default) | BB43 (if assume failed)
BB35   <- [11]
  goto BB15
BB12   <- [11]
  val?^ | miss    %12.0 = LdVar              eR    identical, e2.1
  lgl$#-          %12.1 = Identical                %12.0, function(x, y, num.eq=TRUE, single.NA=TRUE, at|...
  void                    Assume             D     %12.1, %9.3 (CallTarget@0x561663440640[Call#1])
  prom-           %12.3 = MkArg                    unboundValue, Make.row.names[0x5616641387b0]_p0, e2.1
  prom-           %12.4 = MkArg                    unboundValue, Make.row.names[0x5616641387b0]_p1, e2.1
  ct              %12.5 = PushContext        lCL   %12.3, %12.4, identical(ri, seq_len(ni)), function(x, y, num.eq=TRUE, single.NA=TRUE, at|..., e2.1
  val?^           %12.6 = CastType                 up %12.4
  val?^           %12.7 = CastType                 up %12.3
  env             e12.8 = MkEnv              l     x=%12.7, y=%12.6, num.eq(miss)=true, single.NA(miss)=true, attrib.as.set(miss)=true, ignore.bytecode(miss)=true, ignore.environment(miss)=false, ignore.srcref(miss)=true, parent=R_BaseNamespace, context 1
  val?            %12.9 = Force!<lazy>       !vL   %12.7, e12.8   <val?+>
  val?            %12.10 = Force!<lazy>       !vL   %12.6, e12.8   <val?+>
  val?            %12.11 = CallBuiltin        !v    identical(%12.9, %12.10, true, true, true, true, false, true) e12.8
  val?            %12.12 = PopContext         C     %12.11, %12.5   <lgl$->
  lgl$#-          %12.13 = IsType                   %12.12 isA lgl$-
  cp              %12.14 = Checkpoint                -> BB14 (default) | BB13 (if assume failed)
BB44   <- [42]
  void                    Assume             D     %42.2, %42.3 (Typecheck@0x561663440640[Type#33])
  val?+           %44.1 = CastType           d     dn %42.1   <val?_>
  lgl             %44.2 = Gt                 wed   %44.1, 1L, elided   <val?_>
  lgl$#-          %44.3 = CheckTrueFalse     we    %44.2
  void                    Branch                   %44.3 -> BB46 (if true) | BB45 (if false)
BB43   <- [42]
  fs              %43.0 = FrameState         R     0x5616635d80e0+658: [%42.1], env=e2.1
  void                    Deopt              !v    %43.0   !
BB15   <- [14, 35]
  lgl$-           %15.0 = Phi                      %14.3:BB14, %9.1:BB35
  cp              %15.1 = Checkpoint                -> BB17 (default) | BB16 (if assume failed)
BB14   <- [12]
  void                    Assume             D     %12.13, %12.14 (Typecheck@0x561663440640[Type#9])
  lgl$-           %14.1 = CastType           d     dn %12.12
  lgl$-           %14.2 = AsLogical                %14.1
  lgl$-           %14.3 = LAnd                     %9.1, %14.2
  goto BB15
BB13   <- [12]
  fs              %13.0 = FrameState         R     0x5616635d80e0+195: [%9.1, %12.12], env=e2.1
  void                    Deopt              !v    %13.0   !
BB46   <- [44]
  (cls|spec|blt)  %46.0 = LdFun              !v    paste, e2.1
  fs              %46.1 = FrameState         R     0x5616635d80e0+705: [%46.0], env=e2.1
  void                    Deopt              !v    %46.1, DeadCall@0x561663440640[Call#8], %46.0   !
BB45   <- [44]
  val?^ | miss    %45.0 = LdVar              eR    nmi, e2.1
  void                    Visible            v     
  val?            %45.2 = Force!             !     %45.0, e2.1   <val?_>
  goto BB28
BB17   <- [15]
  lgl$#-          %17.0 = CheckTrueFalse     e     %15.0
  void                    Branch                   %17.0 -> BB32 (if true) | BB18 (if false)
BB16   <- [15]
  fs              %16.0 = FrameState         R     0x5616635d80e0+202: [%15.0], env=e2.1
  void                    Deopt              !v    %16.0   !
BB28   <- [45, 27]
  val?            %28.0 = Phi                      %27.0:BB27, %45.2:BB45
  void                    Return             l     %28.0
BB32   <- [17]
  val?^ | miss    %32.0 = LdVar              eR    as.integer, e2.1
  lgl$#-          %32.1 = Identical                <blt as.integer>, %32.0   <true>
  void                    Assume             D     %32.1, %15.1 (DeadBranchReached@0x561663440640[Test#1])
  val?^ | miss    %32.3 = LdVar              eR    seq.int, e2.1
  lgl$#-          %32.4 = Identical                <blt seq.int>, %32.3   <true>
  void                    Assume             D     %32.4, %15.1 (DeadBranchReached@0x561663440640[Test#2])
  val?^ | miss    %32.6 = LdVar              eR    nrow, e2.1
  lgl$#-          %32.7 = IsType                   %32.6 isA int$~-
  void                    Assume             D     %32.7, %15.1 (Typecheck@0x561663440640[Type#25])
  int$~-          %32.9 = CastType           d     dn %32.6
  int$-           %32.10 = Force!<wrapped>          %32.9,    <int$->
  int$-           %32.11 = Add                d     %32.10, 1L, elided   <int$->
  val?^ | miss    %32.12 = LdVar              eR    ni, e2.1
  val?            %32.13 = Force!<wrapped>    !v    %32.12, e2.1   <int$->
  val?            %32.14 = NamedCall          !v    <blt seq.int>(from=%32.11, length.out=%32.13) e2.1   <int$->
  lgl$#-          %32.15 = IsType                   %32.14 isA int$-
  cp              %32.16 = Checkpoint                -> BB34 (default) | BB33 (if assume failed)
BB18   <- [17]
  val?^ | miss    %18.0 = LdVar              eR    autoRnms, e2.1
  lgl$#-          %18.1 = IsType                   %18.0 isA lgl$-
  void                    Assume             D     %18.1, %15.1 (Typecheck@0x561663440640[Type#10])
  lgl$-           %18.3 = CastType           d     dn %18.0
  lgl$-           %18.4 = AsLogical                %18.3
  lgl$#-          %18.5 = Identical                %18.4, false
  void                    Branch                   %18.5 -> BB31 (if true) | BB19 (if false)
BB34   <- [32]
  void                    Assume             D     %32.15, %32.16 (Typecheck@0x561663440640[Type#28])
  int$-           %34.1 = CastType           d     dn %32.14
  goto BB27
BB33   <- [32]
  fs              %33.0 = FrameState         R     0x5616635d80e0+549: [<blt as.integer>, %32.14], env=e2.1
  void                    Deopt              !v    %33.0   !
BB31   <- [18]
  goto BB24
BB19   <- [18]
  val?^ | miss    %19.0 = LdVar              eR    nrow, e2.1
  lgl$#-          %19.1 = IsType                   %19.0 isA int$~-
  void                    Assume             D     %19.1, %15.1 (Typecheck@0x561663440640[Type#11])
  int$~-          %19.3 = CastType           d     dn %19.0
  int$-           %19.4 = Force!<wrapped>          %19.3,    <int$->
  lgl$-           %19.5 = Gt                 d     %19.4, 0L, elided   <lgl$->
  lgl$-           %19.6 = AsLogical                %19.5
  lgl$#-          %19.7 = Identical                %19.6, true
  void                    Branch                   %19.7 -> BB30 (if true) | BB20 (if false)
BB27   <- [34, 26]
  val?            %27.0 = Phi                      %26.2:BB26, %34.1:BB34
  goto BB28
BB24   <- [31, 23]
  lgl$-           %24.0 = Phi                      %23.2:BB23, %18.4:BB31
  lgl$#-          %24.1 = CheckTrueFalse     e     %24.0
  void                    Branch                   %24.1 -> BB29 (if true) | BB25 (if false)
BB30   <- [19]
  goto BB23
BB20   <- [19]
  val?^ | miss    %20.0 = LdVar              eR    identical, e2.1
  lgl$#-          %20.1 = Identical                %20.0, function(x, y, num.eq=TRUE, single.NA=TRUE, at|...
  void                    Assume             D     %20.1, %15.1 (CallTarget@0x561663440640[Call#3])
  prom-           %20.3 = MkArg                    unboundValue, Make.row.names[0x5616641387b0]_p3, e2.1
  prom-           %20.4 = MkArg                    unboundValue, Make.row.names[0x5616641387b0]_p4, e2.1
  ct              %20.5 = PushContext        lCL   %20.3, %20.4, identical(ri, seq_len(ni)), function(x, y, num.eq=TRUE, single.NA=TRUE, at|..., e2.1
  val?^           %20.6 = CastType                 up %20.4
  val?^           %20.7 = CastType                 up %20.3
  env             e20.8 = MkEnv              l     x=%20.7, y=%20.6, num.eq(miss)=true, single.NA(miss)=true, attrib.as.set(miss)=true, ignore.bytecode(miss)=true, ignore.environment(miss)=false, ignore.srcref(miss)=true, parent=R_BaseNamespace, context 1
  val?            %20.9 = Force!<lazy>       !vL   %20.7, e20.8   <val?+>
  val?            %20.10 = Force!<lazy>       !vL   %20.6, e20.8   <val?+>
  val?            %20.11 = CallBuiltin        !v    identical(%20.9, %20.10, true, true, true, true, false, true) e20.8
  val?            %20.12 = PopContext         C     %20.11, %20.5   <lgl$->
  lgl$#-          %20.13 = IsType                   %20.12 isA lgl$-
  cp              %20.14 = Checkpoint                -> BB22 (default) | BB21 (if assume failed)
BB29   <- [24]
  void                    StVarSuper         lRW   autoRnms, false, e2.1
  goto BB26
BB25   <- [24]
  goto BB26
BB23   <- [30, 22]
  lgl$-           %23.0 = Phi                      %22.4:BB22, %19.6:BB30
  lgl$-           %23.1 = AsLogical                %23.0
  lgl$-           %23.2 = LAnd                     %18.4, %23.1
  goto BB24
BB22   <- [20]
  void                    Assume             D     %20.13, %20.14 (Typecheck@0x561663440640[Type#16])
  lgl$-           %22.1 = CastType           d     dn %20.12
  lgl$-           %22.2 = Not                d     %22.1, elided
  lgl$-           %22.3 = AsLogical                %22.2
  lgl$-           %22.4 = LOr                      %19.6, %22.3
  goto BB23
BB21   <- [20]
  fs              %21.0 = FrameState         R     0x5616635d80e0+299: [%18.4, %19.6, %20.12], env=e2.1
  void                    Deopt              !v    %21.0   !
BB26   <- [25, 29]
  val?^ | miss    %26.0 = LdVar              eR    ri, e2.1
  void                    Visible            v     
  val?            %26.2 = Force!<wrapped>    !     %26.0, e2.1   <int->
  goto BB27
Prom 0:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    ri, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <int$->
  void                    Return             l     %1.3
Prom 1:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     seq_len, <0x561660cd1710>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, Make.row.names[0x5616641387b0]_p2, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <int$->
  void                    Return             l     %1.3
Prom 2:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    ni, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <int$->
  void                    Return             l     %1.3
Prom 3:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    ri, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <int->
  void                    Return             l     %1.3
Prom 4:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     seq_len, <0x561660cd1710>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, Make.row.names[0x5616641387b0]_p5, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <int->
  void                    Return             l     %1.3
Prom 5:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    ni, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <int$->
  void                    Return             l     %1.3

│ Make.row.names[0x5616641387b0]                                               │
└──────────────────────────────────────────────────────────────────────────────┘
