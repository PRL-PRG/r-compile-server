
┌──────────────────────────────────────────────────────────────────────────────┐
│ [0x5616635c9a10]                                                             │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;NonRefl0,NonRefl1,!Obj0,!Obj1,SimpleReal0│
│ Properties:                                                                  │
├────── PIR Version After Optimizations
[0x5616635c9a10]
BB0
  goto BB1
BB1   <- [0]
  val?^           %1.0  = LdArg                    1
  val?^           %1.1  = LdArg                    0
  cp              %1.2  = Checkpoint                -> BB2 (default) | BB79 (if assume failed)
BB2   <- [1]
  val?^ | miss    %2.0  = LdVar              eR    typeof, <env 0x56166328f230>
  lgl$#-          %2.1  = Identical                %2.0, function(x) <(rir::DispatchTable*)0x5616632751|...
  void                    Assume             D     %2.1, %1.2 (CallTarget@0x561663ac9808[Call#0])
  env             e2.3  = MkEnv              l     v=%1.1, w=%1.0, parent=<env 0x56166328f230>, context 1
  real$-          %2.4  = Force!<lazy>       !vr   %1.1,    <val?->
  str$-           %2.5  = StaticCall         !vrL  typeof[0x5616641b9570](%2.4)    <str$->
  cp              %2.6  = Checkpoint                -> BB4 (default) | BB3 (if assume failed)
BB79   <- [1]
  env             e79.0 = (MkEnv)            l     v=%1.1, w=%1.0, parent=<env 0x56166328f230>, context 1
  fs              %79.1 = FrameState         R     0x56166344fa70+0: [], env=e79.0
  void                    Deopt              !v    %79.1
BB4   <- [2]
  lgl$-           %4.0  = Eq                 d     %2.5, "symbol", elided   <lgl$->
  lgl$#-          %4.1  = CheckTrueFalse     e     %4.0
  void                    Branch                   %4.1 -> BB7 (if true) | BB5 (if false)
BB3   <- [2]
  fs              %3.0  = FrameState         R     0x56166344fa70+32: [%2.5], env=e2.3
  void                    Deopt              !v    %3.0
BB7   <- [4]
  val?^ | miss    %7.0  = LdVar              eR    as.character, <env 0x56166328f230>
  lgl$#-          %7.1  = Identical                <blt as.character>, %7.0   <true>
  void                    Assume             D     %7.1, %2.6 (DeadBranchReached@0x561663ac9808[Test#0])
  val+            %7.3  = CallSafeBuiltin    wed   as.character(%2.4)    <str$->
  void                    StVar              lW    vn, %7.3, e2.3
  cp              %7.5  = Checkpoint                -> BB9 (default) | BB8 (if assume failed)
BB5   <- [4]
  void                    Invisible          v     
  goto BB6
BB9   <- [7]
  lgl$-           %9.0  = Eq                 d     %2.4, "...", elided   <lgl$->
  lgl$#-          %9.1  = CheckTrueFalse     e     %9.0
  void                    Branch                   %9.1 -> BB78 (if true) | BB10 (if false)
BB8   <- [7]
  fs              %8.0  = FrameState         R     0x56166344fa70+180: [%2.4], env=e2.3
  void                    Deopt              !v    %8.0
BB6   <- [5, 65]
  val?            %6.0  = Phi                      nil:BB5, %65.0:BB65
  void                    Return             l     %6.0
BB78   <- [9]
  (cls|spec|blt)  %78.0 = LdFun              !v    $, <env 0x56166328f230>
  fs              %78.1 = FrameState         R     0x56166344fa70+853: [%78.0], env=e2.3
  void                    Deopt              !v    %78.1, DeadCall@0x561663ac9808[Call#18], %78.0
BB10   <- [9]
  val?^ | miss    %10.0 = LdVar              eR    isDDSym, <env 0x56166328f230>
  lgl$#-          %10.1 = Identical                %10.0, function(name) <(rir::DispatchTable*)0x5616634|...
  void                    Assume             D     %10.1, %7.5 (CallTarget@0x561663ac9808[Call#2])
  prom-           %10.3 = MkArg                    unboundValue, [0x5616635c9a10]_p1 (!refl), e2.3
  ct              %10.4 = PushContext        lCL   %10.3, isDDSym(v), function(name) <(rir::DispatchTable*)0x5616634|..., e2.3
  val?^           %10.5 = CastType                 up %10.3
  val?^ | miss    %10.6 = LdVar              eR    is.symbol, <env 0x56166328f230>
  lgl$#-          %10.7 = Identical                <blt is.symbol>, %10.6   <true>
  cp              %10.8 = Checkpoint                -> BB12 (default) | BB11 (if assume failed)
BB12   <- [10]
  void                    Assume             D     %10.7, %10.8 (DeadBranchReached@0x561660ce8228[Test#0])
  env             e12.1 = MkEnv              l     name=%10.5, parent=<env 0x56166328f230>, context 1
  val?            %12.2 = Force!<lazy>       !vrL  %10.5,    <(sym|str)->
  lgl$#-          %12.3 = CallSafeBuiltin    wed   is.symbol(%12.2)    <lgl$->
  cp              %12.4 = Checkpoint                -> BB14 (default) | BB13 (if assume failed)
BB11   <- [10]
  fs              %11.0 = FrameState         R     0x56166344fa70+235: [], env=e2.3
  env             e11.1 = (MkEnv)            l     name=%10.5, parent=<env 0x56166328f230>, context 1
  fs              %11.2 = FrameState         R     0x561663881f50+17: [<blt is.symbol>, %10.7], env=e11.1, next=%11.0
  void                    Deopt              !v    %11.2   !
BB14   <- [12]
  void                    Branch                   %12.3 -> BB77 (if true) | BB15 (if false)
BB13   <- [12]
  fs              %13.0 = FrameState         R     0x56166344fa70+235: [], env=e2.3
  fs              %13.1 = FrameState         R     0x561663881f50+91: [%12.3], env=e12.1, next=%13.0
  void                    Deopt              !v    %13.1   !
BB77   <- [14]
  goto BB16
BB15   <- [14]
  val?^ | miss    %15.0 = LdVar              eR    is.character, <env 0x56166328f230>
  lgl$#-          %15.1 = Identical                <blt is.character>, %15.0   <true>
  void                    Assume             D     %15.1, %12.4 (DeadBranchReached@0x561660ce8228[Test#1])
  lgl$#-          %15.3 = CallSafeBuiltin    wed   is.character(%12.2)    <lgl$->
  lgl$-           %15.4 = LOr                      %12.3, %15.3
  goto BB16
BB16   <- [77, 15]
  lgl$-           %16.0 = Phi                      %15.4:BB15, %12.3:BB77
  lgl$-           %16.1 = AsLogical                %16.0
  lgl$#-          %16.2 = Identical                %16.1, false
  cp              %16.3 = Checkpoint                -> BB18 (default) | BB17 (if assume failed)
BB18   <- [16]
  void                    Branch                   %16.2 -> BB76 (if true) | BB19 (if false)
BB17   <- [16]
  fs              %17.0 = FrameState         R     0x56166344fa70+235: [], env=e2.3
  fs              %17.1 = FrameState         R     0x561663881f50+201: [%16.0], env=e12.1, next=%17.0
  void                    Deopt              !v    %17.1   !
BB76   <- [18]
  goto BB24
BB19   <- [18]
  val?^ | miss    %19.0 = LdVar              eR    length, <env 0x56166328f230>
  lgl$#-          %19.1 = Identical                <blt length>, %19.0   <true>
  void                    Assume             D     %19.1, %16.3 (DeadBranchReached@0x561660ce8228[Test#2])
  val?^ | miss    %19.3 = LdVar              eR    grep, <env 0x56166328f230>
  lgl$#-          %19.4 = Identical                %19.3, function(pattern, x, ignore.case=FALSE, perl=F|...
  void                    Assume             D     %19.4, %16.3 (CallTarget@0x561660ce8228[Call#5])
  prom-           %19.6 = MkArg                    unboundValue, [0x5616635c9a10]_p18, e12.1
  val?            %19.7 = StaticCall         !v    grep[0x561661fe80e0]("^\.\.[[:digit:]]+$", %19.6) e12.1   <int->
  lgl$#-          %19.8 = IsType                   %19.7 isA int-
  cp              %19.9 = Checkpoint                -> BB21 (default) | BB20 (if assume failed)
BB24   <- [76, 23]
  lgl$-           %24.0 = Phi                      %23.4:BB23, %16.1:BB76
  val?            %24.1 = PopContext         C     %24.0, %10.4   <lgl$->
  lgl$#-          %24.2 = IsType                   %24.1 isA lgl$-
  cp              %24.3 = Checkpoint                -> BB26 (default) | BB25 (if assume failed)
BB21   <- [19]
  void                    Assume             D     %19.8, %19.9 (Typecheck@0x561660ce8228[Type#11])
  int-            %21.1 = CastType           d     dn %19.7
  (int|real)$-    %21.2 = CallSafeBuiltin    wed   length(%21.1)    <int$->
  lgl$#-          %21.3 = IsType                   %21.2 isA int$-
  cp              %21.4 = Checkpoint                -> BB23 (default) | BB22 (if assume failed)
BB20   <- [19]
  fs              %20.0 = FrameState         R     0x56166344fa70+235: [], env=e2.3
  fs              %20.1 = FrameState         R     0x561663881f50+306: [%16.1, <blt length>, %19.7], env=e12.1, next=%20.0
  void                    Deopt              !v    %20.1   !
BB26   <- [24]
  void                    Assume             D     %24.2, %24.3 (Typecheck@0x561663ac9808[Type#9])
  lgl$-           %26.1 = CastType           d     dn %24.1
  lgl$#-          %26.2 = CheckTrueFalse     e     %26.1
  void                    Branch                   %26.2 -> BB75 (if true) | BB27 (if false)
BB25   <- [24]
  fs              %25.0 = FrameState         R     0x56166344fa70+235: [%24.1], env=e2.3
  void                    Deopt              !v    %25.0   !
BB23   <- [21]
  void                    Assume             D     %21.3, %21.4 (Typecheck@0x561660ce8228[Type#12])
  int$-           %23.1 = CastType           d     dn %21.2
  lgl$-           %23.2 = Neq                d     %23.1, 0, elided   <lgl$->
  lgl$-           %23.3 = AsLogical                %23.2
  lgl$-           %23.4 = LAnd                     %16.1, %23.3
  goto BB24
BB22   <- [21]
  fs              %22.0 = FrameState         R     0x56166344fa70+235: [], env=e2.3
  fs              %22.1 = FrameState         R     0x561663881f50+328: [%16.1, %21.2], env=e12.1, next=%22.0
  void                    Deopt              !v    %22.1   !
BB75   <- [26]
  (cls|spec|blt)  %75.0 = LdFun              !v    $, e2.3
  fs              %75.1 = FrameState         R     0x56166344fa70+587: [%75.0], env=e2.3
  void                    Deopt              !v    %75.1, DeadCall@0x561663ac9808[Call#11], %75.0   !
BB27   <- [26]
  (cls|spec|blt)  %27.0 = LdFun              !v    $, <0x561660cbcc10>, e2.3
  prom-           %27.1 = MkArg                    unboundValue, [0x5616635c9a10]_p2, e2.3
  prom-           %27.2 = MkArg                    unboundValue, [0x5616635c9a10]_p3, e2.3
  val?            %27.3 = Call               !v    %27.0(%27.1, %27.2) e2.3   <cls->
  cp              %27.4 = Checkpoint                -> BB29 (default) | BB28 (if assume failed)
BB29   <- [27]
  (cls|spec|blt)  %29.0 = ChkFunction        e     %27.3
  prom-           %29.1 = MkArg                    unboundValue, [0x5616635c9a10]_p4, e2.3
  prom-           %29.2 = MkArg                    unboundValue, [0x5616635c9a10]_p5, e2.3
  lgl$#-          %29.3 = Identical                %29.0, function(v, w) <(rir::DispatchTable*)0x5616636|...
  val?^           %29.4 = CastType                 up %29.2
  val?^           %29.5 = CastType                 up %29.1
  void                    Assume             D     %29.3, %27.4 (CallTarget@0x561663ac9808[Call#4])
  ct              %29.7 = PushContext        lCL   %29.1, %29.2, $(w, isLocal)(vn, w), function(v, w) <(rir::DispatchTable*)0x5616636|..., e2.3
  cp              %29.8 = Checkpoint                -> BB31 (default) | BB30 (if assume failed)
BB28   <- [27]
  fs              %28.0 = FrameState         R     0x56166344fa70+283: [%27.3], env=e2.3
  void                    Deopt              !v    %28.0   !
BB31   <- [29]
  val?^ | miss    %31.0 = LdVar              eR    isDDSym, <env 0x56166328f230>
  lgl$#-          %31.1 = Identical                %31.0, function(name) <(rir::DispatchTable*)0x5616634|...
  void                    Assume             D     %31.1, %29.8 (CallTarget@0x561663acab48[Call#0])
  env             e31.3 = MkEnv              l     v=%29.5, w=%29.4, parent=<env 0x56166328f230>, context 1
  prom-           %31.4 = MkArg                    unboundValue, [0x5616635c9a10]_p20, e31.3
  ct              %31.5 = PushContext        lCL   %31.4, isDDSym(v), function(name) <(rir::DispatchTable*)0x5616634|..., e31.3
  val?^           %31.6 = CastType                 up %31.4
  val?^ | miss    %31.7 = LdVar              eR    is.symbol, <env 0x56166328f230>
  lgl$#-          %31.8 = Identical                <blt is.symbol>, %31.7   <true>
  cp              %31.9 = Checkpoint                -> BB33 (default) | BB32 (if assume failed)
BB30   <- [29]
  fs              %30.0 = FrameState         R     0x56166344fa70+321: [], env=e2.3
  env             e30.1 = (MkEnv)            l     v=%29.5, w=%29.4, parent=<env 0x56166328f230>, context 1
  fs              %30.2 = FrameState         R     0x56166353c4a0+0: [], env=e30.1, next=%30.0
  void                    Deopt              !v    %30.2   !
BB33   <- [31]
  void                    Assume             D     %31.8, %31.9 (DeadBranchReached@0x561660ce8228[Test#0])
  env             e33.1 = MkEnv              l     name=%31.6, parent=<env 0x56166328f230>, context 1
  val?            %33.2 = Force!<lazy>       !vL   %31.6, e33.1   <(sym|str)->
  lgl$#-          %33.3 = CallSafeBuiltin    wed   is.symbol(%33.2)    <lgl$->
  cp              %33.4 = Checkpoint                -> BB35 (default) | BB34 (if assume failed)
BB32   <- [31]
  fs              %32.0 = FrameState         R     0x56166344fa70+321: [], env=e2.3
  fs              %32.1 = FrameState         R     0x56166353c4a0+32: [], env=e31.3, next=%32.0
  env             e32.2 = (MkEnv)            l     name=%31.6, parent=<env 0x56166328f230>, context 1
  fs              %32.3 = FrameState         R     0x561663881f50+17: [<blt is.symbol>, %31.8], env=e32.2, next=%32.1
  void                    Deopt              !v    %32.3   !
BB35   <- [33]
  void                    Branch                   %33.3 -> BB74 (if true) | BB36 (if false)
BB34   <- [33]
  fs              %34.0 = FrameState         R     0x56166344fa70+321: [], env=e2.3
  fs              %34.1 = FrameState         R     0x56166353c4a0+32: [], env=e31.3, next=%34.0
  fs              %34.2 = FrameState         R     0x561663881f50+91: [%33.3], env=e33.1, next=%34.1
  void                    Deopt              !v    %34.2   !
BB74   <- [35]
  goto BB37
BB36   <- [35]
  val?^ | miss    %36.0 = LdVar              eR    is.character, <env 0x56166328f230>
  lgl$#-          %36.1 = Identical                <blt is.character>, %36.0   <true>
  void                    Assume             D     %36.1, %33.4 (DeadBranchReached@0x561660ce8228[Test#1])
  lgl$#-          %36.3 = CallSafeBuiltin    wed   is.character(%33.2)    <lgl$->
  lgl$-           %36.4 = LOr                      %33.3, %36.3
  goto BB37
BB37   <- [74, 36]
  lgl$-           %37.0 = Phi                      %36.4:BB36, %33.3:BB74
  lgl$-           %37.1 = AsLogical                %37.0
  lgl$#-          %37.2 = Identical                %37.1, false
  cp              %37.3 = Checkpoint                -> BB39 (default) | BB38 (if assume failed)
BB39   <- [37]
  void                    Branch                   %37.2 -> BB73 (if true) | BB40 (if false)
BB38   <- [37]
  fs              %38.0 = FrameState         R     0x56166344fa70+321: [], env=e2.3
  fs              %38.1 = FrameState         R     0x56166353c4a0+32: [], env=e31.3, next=%38.0
  fs              %38.2 = FrameState         R     0x561663881f50+201: [%37.0], env=e33.1, next=%38.1
  void                    Deopt              !v    %38.2   !
BB73   <- [39]
  goto BB45
BB40   <- [39]
  val?^ | miss    %40.0 = LdVar              eR    length, <env 0x56166328f230>
  lgl$#-          %40.1 = Identical                <blt length>, %40.0   <true>
  void                    Assume             D     %40.1, %37.3 (DeadBranchReached@0x561660ce8228[Test#2])
  val?^ | miss    %40.3 = LdVar              eR    grep, <env 0x56166328f230>
  lgl$#-          %40.4 = Identical                %40.3, function(pattern, x, ignore.case=FALSE, perl=F|...
  void                    Assume             D     %40.4, %37.3 (CallTarget@0x561660ce8228[Call#5])
  prom-           %40.6 = MkArg                    unboundValue, [0x5616635c9a10]_p30, e33.1
  val?            %40.7 = StaticCall         !v    grep[0x561661fe80e0]("^\.\.[[:digit:]]+$", %40.6) e33.1   <int->
  lgl$#-          %40.8 = IsType                   %40.7 isA int-
  cp              %40.9 = Checkpoint                -> BB42 (default) | BB41 (if assume failed)
BB45   <- [73, 44]
  lgl$-           %45.0 = Phi                      %44.4:BB44, %37.1:BB73
  val?            %45.1 = PopContext         C     %45.0, %31.5   <lgl$->
  lgl$#-          %45.2 = IsType                   %45.1 isA lgl$-
  cp              %45.3 = Checkpoint                -> BB47 (default) | BB46 (if assume failed)
BB42   <- [40]
  void                    Assume             D     %40.8, %40.9 (Typecheck@0x561660ce8228[Type#11])
  int-            %42.1 = CastType           d     dn %40.7
  (int|real)$-    %42.2 = CallSafeBuiltin    wed   length(%42.1)    <int$->
  lgl$#-          %42.3 = IsType                   %42.2 isA int$-
  cp              %42.4 = Checkpoint                -> BB44 (default) | BB43 (if assume failed)
BB41   <- [40]
  fs              %41.0 = FrameState         R     0x56166344fa70+321: [], env=e2.3
  fs              %41.1 = FrameState         R     0x56166353c4a0+32: [], env=e31.3, next=%41.0
  fs              %41.2 = FrameState         R     0x561663881f50+306: [%37.1, <blt length>, %40.7], env=e33.1, next=%41.1
  void                    Deopt              !v    %41.2   !
BB47   <- [45]
  void                    Assume             D     %45.2, %45.3 (Typecheck@0x561663acab48[Type#1])
  lgl$-           %47.1 = CastType           d     dn %45.1
  lgl$#-          %47.2 = CheckTrueFalse     e     %47.1
  void                    Branch                   %47.2 -> BB72 (if true) | BB48 (if false)
BB46   <- [45]
  fs              %46.0 = FrameState         R     0x56166344fa70+321: [], env=e2.3
  fs              %46.1 = FrameState         R     0x56166353c4a0+32: [%45.1], env=e31.3, next=%46.0
  void                    Deopt              !v    %46.1   !
BB44   <- [42]
  void                    Assume             D     %42.3, %42.4 (Typecheck@0x561660ce8228[Type#12])
  int$-           %44.1 = CastType           d     dn %42.2
  lgl$-           %44.2 = Neq                d     %44.1, 0, elided   <lgl$->
  lgl$-           %44.3 = AsLogical                %44.2
  lgl$-           %44.4 = LAnd                     %37.1, %44.3
  goto BB45
BB43   <- [42]
  fs              %43.0 = FrameState         R     0x56166344fa70+321: [], env=e2.3
  fs              %43.1 = FrameState         R     0x56166353c4a0+32: [], env=e31.3, next=%43.0
  fs              %43.2 = FrameState         R     0x561663881f50+328: [%37.1, %42.2], env=e33.1, next=%43.1
  void                    Deopt              !v    %43.2   !
BB72   <- [47]
  void                    StVar              lW    v, "...", e31.3
  goto BB49
BB48   <- [47]
  goto BB49
BB49   <- [48, 72]
  cp              %49.0 = Checkpoint                -> BB51 (default) | BB50 (if assume failed)
BB51   <- [49]
  val?^ | miss    %51.0 = LdVar              eR    is.baseenv, e31.3
  lgl$#-          %51.1 = Identical                %51.0, function(e) <(rir::DispatchTable*)0x5616634b8b|...
  void                    Assume             D     %51.1, %49.0 (CallTarget@0x561663acab48[Call#1])
  prom-           %51.3 = MkArg                    unboundValue, [0x5616635c9a10]_p21, e31.3
  ct              %51.4 = PushContext        lCL   %51.3, is.baseenv(findOwnerEnv(v, $(w, env), stop=$(w|..., function(e) <(rir::DispatchTable*)0x5616634b8b|..., e31.3
  val?^           %51.5 = CastType                 up %51.3
  cp              %51.6 = Checkpoint                -> BB53 (default) | BB52 (if assume failed)
BB50   <- [49]
  fs              %50.0 = FrameState         R     0x56166344fa70+321: [], env=e2.3
  fs              %50.1 = FrameState         R     0x56166353c4a0+63: [], env=e31.3, next=%50.0
  void                    Deopt              !v    %50.1   !
BB53   <- [51]
  val?^ | miss    %53.0 = LdVar              eR    identical, <env 0x56166328f230>
  lgl$#-          %53.1 = Identical                %53.0, function(x, y, num.eq=TRUE, single.NA=TRUE, at|...
  void                    Assume             D     %53.1, %51.6 (CallTarget@0x5616610c8e08[Call#0])
  env             e53.3 = MkEnv              l     e=%51.5, parent=<env 0x56166328f230>, context 1
  prom-           %53.4 = MkArg                    unboundValue, [0x5616635c9a10]_p32, e53.3
  prom-           %53.5 = MkArg                    unboundValue, [0x5616635c9a10]_p33, e53.3
  ct              %53.6 = PushContext        lCL   %53.4, %53.5, identical(e, .BaseEnv), function(x, y, num.eq=TRUE, single.NA=TRUE, at|..., e53.3
  val?^           %53.7 = CastType                 up %53.5
  val?^           %53.8 = CastType                 up %53.4
  env             e53.9 = MkEnv              l     x=%53.8, y=%53.7, num.eq(miss)=true, single.NA(miss)=true, attrib.as.set(miss)=true, ignore.bytecode(miss)=true, ignore.environment(miss)=false, ignore.srcref(miss)=true, parent=R_BaseNamespace, context 1
  val?            %53.10 = Force!<lazy>       !vL   %53.8, e53.9   <val?+>
  val?            %53.11 = Force!<lazy>       !vL   %53.7, e53.9   <val?+>
  val?            %53.12 = CallBuiltin        !     identical(%53.10, %53.11, true, true, true, true, false, true) e53.9
  val?            %53.13 = PopContext         C     %53.12, %53.6   <lgl$->
  lgl$#-          %53.14 = IsType                   %53.13 isA lgl$-
  cp              %53.15 = Checkpoint                -> BB55 (default) | BB54 (if assume failed)
BB52   <- [51]
  fs              %52.0 = FrameState         R     0x56166344fa70+321: [], env=e2.3
  fs              %52.1 = FrameState         R     0x56166353c4a0+95: [], env=e31.3, next=%52.0
  env             e52.2 = (MkEnv)            l     e=%51.5, parent=<env 0x56166328f230>, context 1
  fs              %52.3 = FrameState         R     0x5616632d0110+0: [], env=e52.2, next=%52.1
  void                    Deopt              !v    %52.3   !
BB55   <- [53]
  void                    Assume             D     %53.14, %53.15 (Typecheck@0x5616610c8e08[Type#2])
  lgl$-           %55.1 = CastType           d     dn %53.13
  val?            %55.2 = PopContext         C     %55.1, %51.4   <lgl$->
  lgl$#-          %55.3 = IsType                   %55.2 isA lgl$-
  cp              %55.4 = Checkpoint                -> BB57 (default) | BB56 (if assume failed)
BB54   <- [53]
  fs              %54.0 = FrameState         R     0x56166344fa70+321: [], env=e2.3
  fs              %54.1 = FrameState         R     0x56166353c4a0+95: [], env=e31.3, next=%54.0
  fs              %54.2 = FrameState         R     0x5616632d0110+37: [%53.13], env=e53.3, next=%54.1
  void                    Deopt              !v    %54.2   !
BB57   <- [55]
  void                    Assume             D     %55.3, %55.4 (Typecheck@0x561663acab48[Type#11])
  lgl$-           %57.1 = CastType           d     dn %55.2
  lgl$-           %57.2 = Not                vd    %57.1, elided
  val?            %57.3 = PopContext         C     %57.2, %29.7   <lgl$->
  lgl$#-          %57.4 = IsType                   %57.3 isA lgl$-
  cp              %57.5 = Checkpoint                -> BB59 (default) | BB58 (if assume failed)
BB56   <- [55]
  fs              %56.0 = FrameState         R     0x56166344fa70+321: [], env=e2.3
  fs              %56.1 = FrameState         R     0x56166353c4a0+95: [%55.2], env=e31.3, next=%56.0
  void                    Deopt              !v    %56.1   !
BB59   <- [57]
  void                    Assume             D     %57.4, %57.5 (Typecheck@0x561663ac9808[Type#15])
  lgl$-           %59.1 = CastType           d     dn %57.3
  lgl$#-          %59.2 = CheckTrueFalse     e     %59.1
  void                    Branch                   %59.2 -> BB69 (if true) | BB60 (if false)
BB58   <- [57]
  fs              %58.0 = FrameState         R     0x56166344fa70+321: [%57.3], env=e2.3
  void                    Deopt              !v    %58.0   !
BB69   <- [59]
  (cls|spec|blt)  %69.0 = LdFun              !     $, <0x561660cbcc10>, e2.3
  prom-           %69.1 = MkArg                    unboundValue, [0x5616635c9a10]_p13, e2.3
  prom-           %69.2 = MkArg                    unboundValue, [0x5616635c9a10]_p14, e2.3
  val?            %69.3 = Call               !     %69.0(%69.1, %69.2) e2.3   <cls->
  cp              %69.4 = Checkpoint                -> BB71 (default) | BB70 (if assume failed)
BB60   <- [59]
  val?^ | miss    %60.0 = LdVar              eR    %in%, e2.3
  lgl$#-          %60.1 = Identical                %60.0, function(x, table) <(rir::DispatchTable*)0x561|...
  void                    Assume             D     %60.1, %57.5 (CallTarget@0x561663ac9808[Call#5])
  prom-           %60.3 = MkArg                    unboundValue, [0x5616635c9a10]_p7, e2.3
  val?^ | miss    %60.4 = LdVar              eR    vn, e2.3
  void                    Visible            v     
  val?            %60.6 = Force!<value>      !     %60.4, e2.3   <str$->
  prom-           %60.7 = MkArg                    %60.6, [0x5616635c9a10]_p6 (!refl), 
  val?            %60.8 = StaticCall         !     %in%[0x5616610f5620](%60.7, %60.3) e2.3   <lgl$->
  lgl$#-          %60.9 = IsType                   %60.8 isA lgl$-
  cp              %60.10 = Checkpoint                -> BB62 (default) | BB61 (if assume failed)
BB71   <- [69]
  (cls|spec|blt)  %71.0 = ChkFunction        e     %69.3
  prom-           %71.1 = MkArg                    unboundValue, [0x5616635c9a10]_p15, e2.3
  prom-           %71.2 = MkArg                    unboundValue, [0x5616635c9a10]_p16, e2.3
  prom-           %71.3 = MkArg                    unboundValue, [0x5616635c9a10]_p17, e2.3
  lgl$#-          %71.4 = Identical                %71.0, function(type, n, e, w) <(rir::DispatchTable*)|...
  void                    Assume             D     %71.4, %69.4 (CallTarget@0x561663ac9808[Call#10])
  val?            %71.6 = StaticCall         !     [0x561661311120]("variable", %71.1, %71.2, %71.3) e2.3   <vec>
  goto BB65
BB70   <- [69]
  fs              %70.0 = FrameState         R     0x56166344fa70+524: [%69.3], env=e2.3
  void                    Deopt              !v    %70.0   !
BB62   <- [60]
  void                    Assume             D     %60.9, %60.10 (Typecheck@0x561663ac9808[Type#18])
  lgl$-           %62.1 = CastType           d     dn %60.8
  lgl$-           %62.2 = Not                vd    %62.1, elided
  lgl$#-          %62.3 = CheckTrueFalse     e     %62.2
  void                    Branch                   %62.3 -> BB66 (if true) | BB63 (if false)
BB61   <- [60]
  fs              %61.0 = FrameState         R     0x56166344fa70+369: [%60.8], env=e2.3
  void                    Deopt              !v    %61.0   !
BB65   <- [71, 64]
  val?            %65.0 = Phi                      %64.0:BB64, %71.6:BB71
  goto BB6
BB66   <- [62]
  (cls|spec|blt)  %66.0 = LdFun              !     $, <0x561660cbcc10>, e2.3
  prom-           %66.1 = MkArg                    unboundValue, [0x5616635c9a10]_p8, e2.3
  prom-           %66.2 = MkArg                    unboundValue, [0x5616635c9a10]_p9, e2.3
  val?            %66.3 = Call               !     %66.0(%66.1, %66.2) e2.3   <cls->
  cp              %66.4 = Checkpoint                -> BB68 (default) | BB67 (if assume failed)
BB63   <- [62]
  void                    Invisible          v     
  goto BB64
BB68   <- [66]
  (cls|spec|blt)  %68.0 = ChkFunction        e     %66.3
  prom-           %68.1 = MkArg                    unboundValue, [0x5616635c9a10]_p10, e2.3
  prom-           %68.2 = MkArg                    unboundValue, [0x5616635c9a10]_p11, e2.3
  prom-           %68.3 = MkArg                    unboundValue, [0x5616635c9a10]_p12, e2.3
  lgl$#-          %68.4 = Identical                %68.0, function(type, n, e, w) <(rir::DispatchTable*)|...
  void                    Assume             D     %68.4, %66.4 (CallTarget@0x561663ac9808[Call#8])
  val?            %68.6 = StaticCall         !     [0x561662961860]("variable", %68.1, %68.2, %68.3) e2.3   <nil->
  goto BB64
BB67   <- [66]
  fs              %67.0 = FrameState         R     0x56166344fa70+429: [%66.3], env=e2.3
  void                    Deopt              !v    %67.0   !
BB64   <- [63, 68]
  val?            %64.0 = Phi                      nil:BB63, %68.6:BB68
  goto BB65
Prom 1:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    v, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <sym->
  void                    Return             l     %1.3
Prom 2:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    w, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 3:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    isLocal, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 4:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    vn, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 5:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    w, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 6:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    vn, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 7:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     c, <0x561660cbd940>, e1.0
  val?            %1.2  = Call               !     %1.1("*tmp*", "*tmpv*") e1.0   <str->
  void                    Return             l     %1.2
Prom 8:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    w, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 9:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    enterGlobal, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 10:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    vn, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 11:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    v, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 12:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    w, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 13:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    w, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 14:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    enterLocal, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 15:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    vn, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 16:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    v, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 17:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    w, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 18:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     as.character, <0x561660cca040>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, [0x5616635c9a10]_p19, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <str$->
  void                    Return             l     %1.3
Prom 19:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    name, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <(sym|str)->
  void                    Return             l     %1.3
Prom 20:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    v, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 21:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     findOwnerEnv, <0x5616633aaeb8>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, [0x5616635c9a10]_p22, e1.0
  prom-           %1.3  = MkArg                    unboundValue, [0x5616635c9a10]_p23, e1.0
  prom-           %1.4  = MkArg                    unboundValue, [0x5616635c9a10]_p26, e1.0
  prom-           %1.5  = MkArg                    unboundValue, [0x5616635c9a10]_p29, e1.0
  val?            %1.6  = NamedCall          !     %1.1(%1.2, %1.3, stop=%1.4, default=%1.5) e1.0   <env+>
  void                    Return             l     %1.6
Prom 22:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    v, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 23:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     $, <0x561660cbcc10>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, [0x5616635c9a10]_p24, e1.0
  prom-           %1.3  = MkArg                    unboundValue, [0x5616635c9a10]_p25, e1.0
  val?            %1.4  = Call               !     %1.1(%1.2, %1.3) e1.0   <env+>
  void                    Return             l     %1.4
Prom 24:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    w, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 25:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    env, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 26:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     $, <0x561660cbcc10>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, [0x5616635c9a10]_p27, e1.0
  prom-           %1.3  = MkArg                    unboundValue, [0x5616635c9a10]_p28, e1.0
  val?            %1.4  = Call               !     %1.1(%1.2, %1.3) e1.0   <env->
  void                    Return             l     %1.4
Prom 27:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    w, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 28:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    globalenv, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 29:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    .BaseEnv, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <env->
  void                    Return             l     %1.3
Prom 30:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     as.character, <0x561660cca040>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, [0x5616635c9a10]_p31, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <str$->
  void                    Return             l     %1.3
Prom 31:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    name, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <(sym|str)->
  void                    Return             l     %1.3
Prom 32:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    e, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <(lgl|env)+>
  void                    Return             l     %1.3
Prom 33:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    .BaseEnv, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <env->
  void                    Return             l     %1.3

│ [0x5616635c9a10]                                                             │
└──────────────────────────────────────────────────────────────────────────────┘
