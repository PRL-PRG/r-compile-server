
┌──────────────────────────────────────────────────────────────────────────────┐
│ isSimpleFunDef[0x561664704a90]                                               │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch                                      │
│ Properties:                                                                  │
├────── PIR Version After Optimizations
isSimpleFunDef[0x561664704a90]
BB0
  goto BB1
BB1   <- [0]
  val?^           %1.0  = LdArg                    1
  val?^           %1.1  = LdArg                    0
  cp              %1.2  = Checkpoint                -> BB2 (default) | BB43 (if assume failed)
BB2   <- [1]
  val?^ | miss    %2.0  = LdVar              eR    typeof, <env 0x56166328f230>
  lgl$#-          %2.1  = Identical                %2.0, function(x) <(rir::DispatchTable*)0x5616632751|...
  void                    Assume             D     %2.1, %1.2 (CallTarget@0x561660ce8b18[Call#0])
  env             e2.3  = MkEnv              l     e=%1.1, w=%1.0, parent=<env 0x56166328f230>, context 1
  prom-           %2.4  = MkArg                    unboundValue, isSimpleFunDef[0x561664704a90]_p0, e2.3
  val?            %2.5  = StaticCall         !v    typeof[0x5616638913a0](%2.4) e2.3   <str$->
  lgl$#-          %2.6  = IsType                   %2.5 isA val?-
  cp              %2.7  = Checkpoint                -> BB4 (default) | BB3 (if assume failed)
BB43   <- [1]
  env             e43.0 = (MkEnv)            l     e=%1.1, w=%1.0, parent=<env 0x56166328f230>, context 1
  fs              %43.1 = FrameState         R     0x5616637fc290+0: [], env=e43.0
  void                    Deopt              !v    %43.1
BB4   <- [2]
  void                    Visible            v     
  void                    Assume             D     %2.6, %2.7 (Typecheck@0x561660ce8b18[Type#2])
  val?-           %4.2  = CastType           d     dn %2.5   <str$->
  lgl-            %4.3  = Neq                vwed  %4.2, "language", elided   <lgl$->
  lgl$#-          %4.4  = IsType                   %4.3 isA lgl$-
  cp              %4.5  = Checkpoint                -> BB6 (default) | BB5 (if assume failed)
BB3   <- [2]
  fs              %3.0  = FrameState         R     0x5616637fc290+32: [%2.5], env=e2.3
  void                    Deopt              !v    %3.0   !
BB6   <- [4]
  void                    Assume             D     %4.4, %4.5 (Typecheck@0x561660ce8b18[Type#3])
  lgl$-           %6.1  = CastType           d     dn %4.3
  lgl$-           %6.2  = AsLogical                %6.1
  lgl$#-          %6.3  = Identical                %6.2, false
  void                    Branch                   %6.3 -> BB42 (if true) | BB7 (if false)
BB5   <- [4]
  fs              %5.0  = FrameState         R     0x5616637fc290+44: [%4.3], env=e2.3
  void                    Deopt              !v    %5.0   !
BB42   <- [6]
  goto BB12
BB7   <- [6]
  val?^ | miss    %7.0  = LdVar              eR    typeof, e2.3
  lgl$#-          %7.1  = Identical                %7.0, function(x) <(rir::DispatchTable*)0x5616632751|...
  void                    Assume             D     %7.1, %4.5 (CallTarget@0x561660ce8b18[Call#1])
  prom-           %7.3  = MkArg                    unboundValue, isSimpleFunDef[0x561664704a90]_p1, e2.3
  val?            %7.4  = StaticCall         !v    typeof[0x5616638913a0](%7.3) e2.3   <str$->
  lgl$#-          %7.5  = IsType                   %7.4 isA val?-
  cp              %7.6  = Checkpoint                -> BB9 (default) | BB8 (if assume failed)
BB12   <- [11, 42]
  lgl$-           %12.0 = Phi                      %11.3:BB11, %6.2:BB42
  lgl$-           %12.1 = AsLogical                %12.0
  lgl$#-          %12.2 = Identical                %12.1, false
  cp              %12.3 = Checkpoint                -> BB14 (default) | BB13 (if assume failed)
BB9   <- [7]
  void                    Visible            v     
  void                    Assume             D     %7.5, %7.6 (Typecheck@0x561660ce8b18[Type#6])
  val?-           %9.2  = CastType           d     dn %7.4   <str$->
  lgl-            %9.3  = Eq                 vwed  %9.2, "language", elided   <lgl$->
  lgl$#-          %9.4  = IsType                   %9.3 isA lgl$-
  cp              %9.5  = Checkpoint                -> BB11 (default) | BB10 (if assume failed)
BB8   <- [7]
  fs              %8.0  = FrameState         R     0x5616637fc290+88: [%6.2, %7.4], env=e2.3
  void                    Deopt              !v    %8.0   !
BB14   <- [12]
  void                    Branch                   %12.2 -> BB41 (if true) | BB15 (if false)
BB13   <- [12]
  fs              %13.0 = FrameState         R     0x5616637fc290+107: [%12.0], env=e2.3
  void                    Deopt              !v    %13.0   !
BB11   <- [9]
  void                    Assume             D     %9.4, %9.5 (Typecheck@0x561660ce8b18[Type#7])
  lgl$-           %11.1 = CastType           d     dn %9.3
  lgl$-           %11.2 = AsLogical                %11.1
  lgl$-           %11.3 = LAnd                     %6.2, %11.2
  goto BB12
BB10   <- [9]
  fs              %10.0 = FrameState         R     0x5616637fc290+100: [%6.2, %9.3], env=e2.3
  void                    Deopt              !v    %10.0   !
BB41   <- [14]
  goto BB22
BB15   <- [14]
  val?^ | miss    %15.0 = LdVar              eR    %in%, e2.3
  lgl$#-          %15.1 = Identical                %15.0, function(x, table) <(rir::DispatchTable*)0x561|...
  void                    Assume             D     %15.1, %12.3 (CallTarget@0x561660ce8b18[Call#2])
  prom-           %15.3 = MkArg                    unboundValue, isSimpleFunDef[0x561664704a90]_p2, e2.3
  prom-           %15.4 = MkArg                    unboundValue, isSimpleFunDef[0x561664704a90]_p4, e2.3
  val?^           %15.5 = CastType                 up %15.4
  val?^           %15.6 = CastType                 up %15.3
  env             e15.7 = MkEnv              l     x=%15.6, table=%15.5, parent=R_BaseNamespace, context 0
  prom-           %15.8 = MkArg                    unboundValue, isSimpleFunDef[0x561664704a90]_p9, e15.7
  val?^           %15.9 = CastType                 up %15.8
  val?^ | miss    %15.10 = LdVar              eR    typeof, e2.3
  lgl$#-          %15.11 = Identical                %15.10, function(x) <(rir::DispatchTable*)0x5616632751|...
  void                    Assume             D     %15.11, %12.3 (CallTarget@0x561660ce8b18[Call#3])
  prom-           %15.13 = MkArg                    unboundValue, isSimpleFunDef[0x561664704a90]_p3, e2.3
  val?            %15.14 = StaticCall         !v    typeof[0x5616638913a0](%15.13) from function(x) <(rir::DispatchTable*)0x5616632751|... { 0 } e2.3   <str$->
  prom-           %15.15 = MkArg                    %15.14, isSimpleFunDef[0x561664704a90]_p2 (!refl), e2.3
  val?~           %15.16 = CastType                 up %15.15
  void                    StArg              lW    x, %15.16, e15.7
  prom-           %15.18 = MkArg                    %15.14, isSimpleFunDef[0x561664704a90]_p8 (!refl), e15.7
  val?~           %15.19 = CastType                 up %15.18
  cp              %15.20 = Checkpoint                -> BB17 (default) | BB16 (if assume failed)
BB22   <- [41, 21]
  lgl$-           %22.0 = Phi                      %21.5:BB21, %12.1:BB41
  lgl$-           %22.1 = AsLogical                %22.0
  lgl$#-          %22.2 = Identical                %22.1, false
  void                    Branch                   %22.2 -> BB40 (if true) | BB23 (if false)
BB17   <- [15]
  env             e17.0 = (MkEnv)            l     x=%15.19, table=%15.9, nomatch=0L, incomparables(miss)=nil, parent=R_BaseNamespace, context -1
  lgl$#-          %17.1 = IsEnvStub          R     , e17.0
  void                    Assume             D     %17.1, %15.20 (EnvStubMaterialized@0x561660fcab30[Call#unknown])
  val?            %17.3 = Force<lazy>        !vL   %15.5, e17.0   <val?->
  prom-           %17.4 = MkArg                    %17.3, isSimpleFunDef[0x561664704a90]_p9 (!refl), e15.7
  val?~           %17.5 = CastType                 up %17.4
  void                    StArg              lWd   table, %17.5, e17.0
  lgl$#-          %17.7 = IsType                   %17.3 isA val?-
  cp              %17.8 = Checkpoint                -> BB19 (default) | BB18 (if assume failed)
BB16   <- [15]
  fs              %16.0 = FrameState         R     0x5616637fc290+151: [%12.1], env=e2.3
  fs              %16.1 = FrameState         R     0x5616612ea4e0+54: [], env=e15.7, next=%16.0
  env             e16.2 = (MkEnv)            l     x=%15.19, table=%15.9, nomatch=0L, incomparables(miss)=nil, parent=R_BaseNamespace, context -1
  fs              %16.3 = FrameState         R     0x5616617f2d70+9: [%15.14], env=e16.2, next=%16.1
  void                    Deopt              !v    %16.3   !
BB40   <- [22]
  goto BB32
BB23   <- [22]
  val?^ | miss    %23.0 = LdVar              eR    e, e2.3
  val?            %23.1 = Force!<wrapped>    !v    %23.0, e2.3   <code->
  lgl$#-          %23.2 = IsType                   %23.1 isA val+   <true>
  lgl$#-          %23.3 = IsType                   %23.1 isA val?-
  cp              %23.4 = Checkpoint                -> BB25 (default) | BB24 (if assume failed)
BB19   <- [17]
  lgl$#-          %19.0 = IsEnvStub          R     , e17.0
  void                    Assume             D     %19.0, %17.8 (EnvStubMaterialized@0x561660fcab30[Call#unknown])
  lgl$#-          %19.2 = IsType                   %15.14 isA val?+
  void                    Assume             D     %19.2, %17.8 (Typecheck@0x561660fcab30[Type#0])
  val?+           %19.4 = CastType           d     dn %15.14   <(int|str)+>
  void                    Assume             D     %17.7, %17.8 (Typecheck@0x561660fcab30[Type#1])
  val?-           %19.6 = CastType           d     dn %17.3
  val+            %19.7 = CallSafeBuiltin    wed   match(%19.4, %19.6, 0L, nil)    <int->
  lgl$#-          %19.8 = IsType                   %19.7 isA int-
  cp              %19.9 = Checkpoint                -> BB21 (default) | BB20 (if assume failed)
BB18   <- [17]
  fs              %18.0 = FrameState         R     0x5616637fc290+151: [%12.1], env=e2.3
  fs              %18.1 = FrameState         R     0x5616612ea4e0+54: [], env=e15.7, next=%18.0
  fs              %18.2 = FrameState         R     0x5616617f2d70+23: [%15.14, %17.3], env=e17.0, next=%18.1
  void                    Deopt              !v    %18.2   !
BB32   <- [40, 31]
  lgl$-           %32.0 = Phi                      %31.3:BB31, %22.1:BB40
  lgl$-           %32.1 = AsLogical                %32.0
  lgl$#-          %32.2 = Identical                %32.1, false
  cp              %32.3 = Checkpoint                -> BB34 (default) | BB33 (if assume failed)
BB25   <- [23]
  void                    Assume             D     %23.2, %23.4 (DeadBranchReached@0x561660ce8b18[Test#4])
  void                    Assume             D     %23.3, %23.4 (Typecheck@0x561660ce8b18[Type#14])
  val?-           %25.2 = CastType           d     dn %23.1   <code->
  val?            %25.3 = Extract2_1D        wed   %25.2, 3, elided   <code->
  lgl$#-          %25.4 = IsType                   %25.3 isA val+   <true>
  lgl$#-          %25.5 = IsType                   %25.3 isA val?-
  cp              %25.6 = Checkpoint                -> BB27 (default) | BB26 (if assume failed)
BB24   <- [23]
  fs              %24.0 = FrameState         R     0x5616637fc290+174: [%22.1, %23.1], env=e2.3
  void                    Deopt              !v    %24.0   !
BB21   <- [19]
  void                    Visible            v     
  void                    Assume             D     %19.8, %19.9 (Typecheck@0x56166231c688[Type#2])
  int-            %21.2 = CastType           d     dn %19.7
  lgl-            %21.3 = Gt                 vwed  %21.2, 0L, elided   <lgl->
  lgl$-           %21.4 = AsLogical                %21.3
  lgl$-           %21.5 = LAnd                     %12.1, %21.4
  goto BB22
BB20   <- [19]
  fs              %20.0 = FrameState         R     0x5616637fc290+151: [%12.1], env=e2.3
  fs              %20.1 = FrameState         R     0x5616612ea4e0+54: [], env=e15.7, next=%20.0
  fs              %20.2 = FrameState         R     0x5616617f2d70+69: [%19.7], env=e17.0, next=%20.1
  void                    Deopt              !v    %20.2   !
BB34   <- [32]
  void                    Branch                   %32.2 -> BB39 (if true) | BB35 (if false)
BB33   <- [32]
  fs              %33.0 = FrameState         R     0x5616637fc290+281: [%32.0], env=e2.3
  void                    Deopt              !v    %33.0   !
BB27   <- [25]
  void                    Assume             D     %25.4, %25.6 (DeadBranchReached@0x561660ce8b18[Test#5])
  void                    Assume             D     %25.5, %25.6 (Typecheck@0x561660ce8b18[Type#15])
  val?-           %27.2 = CastType           d     dn %25.3   <code->
  val?            %27.3 = Extract2_1D        wed   %27.2, 1, elided   <sym->
  lgl$#-          %27.4 = IsType                   %27.3 isA val?-
  cp              %27.5 = Checkpoint                -> BB29 (default) | BB28 (if assume failed)
BB26   <- [25]
  fs              %26.0 = FrameState         R     0x5616637fc290+217: [%22.1, %25.3], env=e2.3
  void                    Deopt              !v    %26.0   !
BB39   <- [34]
  goto BB38
BB35   <- [34]
  val?^ | miss    %35.0 = LdVar              eR    isBaseVar, e2.3
  lgl$#-          %35.1 = Identical                %35.0, function(v, env) <(rir::DispatchTable*)0x56166|...
  void                    Assume             D     %35.1, %32.3 (CallTarget@0x561660ce8b18[Call#5])
  prom-           %35.3 = MkArg                    unboundValue, isSimpleFunDef[0x561664704a90]_p5, e2.3
  val?            %35.4 = StaticCall         !     isBaseVar[0x561662ec3140]("function", %35.3) e2.3   <lgl$->
  lgl$#-          %35.5 = IsType                   %35.4 isA lgl$-
  cp              %35.6 = Checkpoint                -> BB37 (default) | BB36 (if assume failed)
BB29   <- [27]
  void                    Visible            v     
  void                    Assume             D     %27.4, %27.5 (Typecheck@0x561660ce8b18[Type#16])
  val?-           %29.2 = CastType           d     dn %27.3   <sym->
  lgl-            %29.3 = Eq                 vwed  %29.2, "function", elided   <lgl$->
  lgl$#-          %29.4 = IsType                   %29.3 isA lgl$-
  cp              %29.5 = Checkpoint                -> BB31 (default) | BB30 (if assume failed)
BB28   <- [27]
  fs              %28.0 = FrameState         R     0x5616637fc290+261: [%22.1, %27.3], env=e2.3
  void                    Deopt              !v    %28.0   !
BB38   <- [37, 39]
  lgl$-           %38.0 = Phi                      %37.3:BB37, %32.1:BB39
  void                    Return             l     %38.0
BB37   <- [35]
  void                    Assume             D     %35.5, %35.6 (Typecheck@0x561660ce8b18[Type#21])
  lgl$-           %37.1 = CastType           d     dn %35.4
  lgl$-           %37.2 = AsLogical                %37.1
  lgl$-           %37.3 = LAnd                     %32.1, %37.2
  goto BB38
BB36   <- [35]
  fs              %36.0 = FrameState         R     0x5616637fc290+325: [%32.1, %35.4], env=e2.3
  void                    Deopt              !v    %36.0   !
BB31   <- [29]
  void                    Assume             D     %29.4, %29.5 (Typecheck@0x561660ce8b18[Type#17])
  lgl$-           %31.1 = CastType           d     dn %29.3
  lgl$-           %31.2 = AsLogical                %31.1
  lgl$-           %31.3 = LAnd                     %22.1, %31.2
  goto BB32
BB30   <- [29]
  fs              %30.0 = FrameState         R     0x5616637fc290+274: [%22.1, %29.3], env=e2.3
  void                    Deopt              !v    %30.0   !
Prom 0:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    e, e1.0
  val?            %1.2  = Force<lazy>        !v    %1.1, e1.0   <code->
  val?            %1.3  = Extract2_1D        !v    %1.2, 2, e1.0   <(sym|code)->
  void                    Visible            v     
  void                    Return             l     %1.3
Prom 1:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    e, e1.0
  val?            %1.2  = Force<wrapped>     !v    %1.1, e1.0   <code->
  val?            %1.3  = Extract2_1D        !v    %1.2, 3, e1.0   <code->
  void                    Visible            v     
  void                    Return             l     %1.3
Prom 2:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     typeof, <0x5616632719d0>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, isSimpleFunDef[0x561664704a90]_p3, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <str$->
  void                    Return             l     %1.3
Prom 3:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    e, e1.0
  val?            %1.2  = Force<wrapped>     !v    %1.1, e1.0   <code->
  val?            %1.3  = Extract2_1D        !v    %1.2, 3, e1.0   <code->
  val?            %1.4  = Extract2_1D        !v    %1.3, 1, e1.0   <sym->
  void                    Visible            v     
  void                    Return             l     %1.4
Prom 4:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     c, <0x561660cbd940>, e1.0
  val?            %1.2  = Call               !     %1.1("symbol", "character") e1.0   <str->
  void                    Return             l     %1.2
Prom 5:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     $, <0x561660cbcc10>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, isSimpleFunDef[0x561664704a90]_p6, e1.0
  prom-           %1.3  = MkArg                    unboundValue, isSimpleFunDef[0x561664704a90]_p7, e1.0
  val?            %1.4  = Call               !     %1.1(%1.2, %1.3) e1.0   <env+>
  void                    Return             l     %1.4
Prom 6:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    w, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 7:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    env, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 8:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    x, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <(int|str)+>
  void                    Return             l     %1.3
Prom 9:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    table, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <val?->
  void                    Return             l     %1.3

│ isSimpleFunDef[0x561664704a90]                                               │
└──────────────────────────────────────────────────────────────────────────────┘
