
┌──────────────────────────────────────────────────────────────────────────────┐
│ make.names[0x5616636d6c90]                                                   │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;Eager1,NonRefl0,NonRefl1,!Obj0,!Obj1 miss: 1│
│ Properties:  ForceOrd: 0                                                     │
├────── PIR Version After Optimizations
make.names[0x5616636d6c90]
BB0
  goto BB1
BB1   <- [0]
  val?~+          %1.0  = LdArg                    1
  val?^           %1.1  = LdArg                    0
  env             e1.2  = MkEnv              l     names=%1.1, unique=%1.0, allow_(miss)=true, parent=R_BaseNamespace, context 1
  val+            %1.3  = Force!<lazy>       !vr   %1.1,    <str->
  val+            %1.4  = CallSafeBuiltin    wed   as.character(%1.3)    <str->
  void                    StVar              lW    names, %1.4, e1.2
  val?            %1.6  = CallBuiltin        !v    make.names(%1.4, true) e1.2
  void                    StVar              lW    names2, %1.6, e1.2
  val?^ | miss    %1.8  = LdVar              eR    unique, e1.2
  val?            %1.9  = Force!<value>      !v    %1.8, e1.2   <lgl$->
  lgl$#-          %1.10 = CheckTrueFalse     we    %1.9
  cp              %1.11 = Checkpoint                -> BB2 (default) | BB12 (if assume failed)
BB2   <- [1]
  void                    Branch                   %1.10 -> BB7 (if true) | BB3 (if false)
BB12   <- [1]
  fs              %12.0 = FrameState         R     0x5616634d6640+170: [%1.10], env=e1.2
  void                    Deopt              !v    %12.0   !
BB7   <- [2]
  val?^ | miss    %7.0  = LdVar              eR    order, e1.2
  lgl$#-          %7.1  = Identical                %7.0, function(..., na.last=TRUE, decreasing=FALSE, |...
  void                    Assume             D     %7.1, %1.11 (CallTarget@0x56166369dc00[Call#1])
  prom-           %7.3  = MkArg                    unboundValue, make.names[0x5616636d6c90]_p1, e1.2
  val?            %7.4  = Call               !v    function(..., na.last=TRUE, decreasing=FALSE, |...(%7.3) e1.2   <int->
  void                    StVar              lW    o, %7.4, e1.2
  val?^ | miss    %7.6  = LdVar              eR    names2 !upd, e1.2
  val?            %7.7  = Force!             !v    %7.6, e1.2
  cp              %7.8  = Checkpoint                -> BB9 (default) | BB8 (if assume failed)
BB3   <- [2]
  goto BB4
BB9   <- [7]
  val?^ | miss    %9.0  = LdVar              eR    make.unique, e1.2
  lgl$#-          %9.1  = Identical                %9.0, function(names, sep=".") <(rir::DispatchTable*|...
  void                    Assume             D     %9.1, %7.8 (CallTarget@0x56166369dc00[Call#2])
  prom-           %9.3  = MkArg                    unboundValue, make.names[0x5616636d6c90]_p2, e1.2
  ct              %9.4  = PushContext        lCL   %9.3, make.unique([(names2, o)), function(names, sep=".") <(rir::DispatchTable*|..., e1.2
  val?^           %9.5  = CastType                 up %9.3
  env             e9.6  = MkEnv              l     names=%9.5, sep(miss)=".", parent=R_BaseNamespace, context 1
  val?            %9.7  = Force!<lazy>       !vL   %9.5, e9.6   <str->
  val?            %9.8  = CallBuiltin        !v    make.unique(%9.7, ".") e9.6
  val?            %9.9  = PopContext         C     %9.8, %9.4   <str->
  lgl$#-          %9.10 = IsType                   %9.9 isA val?-
  cp              %9.11 = Checkpoint                -> BB11 (default) | BB10 (if assume failed)
BB8   <- [7]
  fs              %8.0  = FrameState         R     0x5616634d6640+235: [%7.7], env=e1.2
  void                    Deopt              !v    %8.0   !
BB4   <- [3, 11]
  cp              %4.0  = Checkpoint                -> BB6 (default) | BB5 (if assume failed)
BB11   <- [9]
  val?^ | miss    %11.0 = LdVar              eR    names2 !upd, e1.2
  lgl$#-          %11.1 = IsType                   %11.0 isA val?~- | miss
  void                    Assume             D     %11.1, %9.11 (Typecheck@0x56166369dc00[Type#15])
  val?~- | miss   %11.3 = CastType           d     dn %11.0
  val?-           %11.4 = Force!<value>            %11.3,    <str->
  val?^ | miss    %11.5 = LdVar              eR    o, e1.2
  lgl$#-          %11.6 = IsType                   %11.5 isA int-
  void                    Assume             D     %11.6, %9.11 (Typecheck@0x56166369dc00[Type#16])
  int-            %11.8 = CastType           d     dn %11.5
  void                    Assume             D     %9.10, %9.11 (Typecheck@0x56166369dc00[Type#14])
  val?-           %11.10 = CastType           d     dn %9.9   <str->
  val?-           %11.11 = Subassign1_1D      wed   %11.10, %11.4, %11.8, elided
  void                    StVar              lW    names2, %11.11, e1.2
  goto BB4
BB10   <- [9]
  fs              %10.0 = FrameState         R     0x5616634d6640+269: [%9.9], env=e1.2
  void                    Deopt              !v    %10.0   !
BB6   <- [4]
  val?^ | miss    %6.0  = LdVar              eR    names2, e1.2
  lgl$#-          %6.1  = IsType                   %6.0 isA val?~- | miss
  void                    Assume             D     %6.1, %4.0 (Typecheck@0x56166369dc00[Type#17])
  val?~- | miss   %6.3  = CastType           d     dn %6.0
  void                    Visible            v     
  val?-           %6.5  = Force!<value>            %6.3,    <str->
  void                    Return             l     %6.5
BB5   <- [4]
  fs              %5.0  = FrameState         R     0x5616634d6640+312: [], env=e1.2
  void                    Deopt              !v    %5.0   !
Prom 1:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    names, e1.0
  val?            %1.2  = Force<value>       !v    %1.1, e1.0   <str->
  val?^ | miss    %1.3  = LdVar              eR    names2, e1.0
  void                    Visible            v     
  val?            %1.5  = Force<value>       !     %1.3, e1.0   <str->
  val?            %1.6  = Neq                !     %1.2, %1.5, e1.0   <lgl->
  void                    Return             l     %1.6
Prom 2:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    names2, e1.0
  val?            %1.2  = Force<value>       !v    %1.1, e1.0   <str->
  lgl$#-          %1.3  = IsType                   %1.2 isA val+   <true>
  void                    Branch                   %1.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [1]
  val?^ | miss    %2.0  = LdVar              eR    o, e1.0
  val?            %2.1  = Force<value>       !v    %2.0, e1.0   <int->
  goto BB3
BB4   <- [1]
  prom-           %4.0  = MkArg                    unboundValue, make.names[0x5616636d6c90]_p3, e1.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.1:BB2, %4.0:BB4
  val?            %3.1  = Extract1_1D        !v    %1.2, %3.0, e1.0   <str->
  void                    Visible            v     
  void                    Return             l     %3.1
Prom 3:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    o, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3

│ make.names[0x5616636d6c90]                                                   │
└──────────────────────────────────────────────────────────────────────────────┘
