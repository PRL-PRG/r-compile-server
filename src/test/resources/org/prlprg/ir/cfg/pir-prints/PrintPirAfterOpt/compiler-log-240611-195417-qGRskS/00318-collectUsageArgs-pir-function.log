
┌──────────────────────────────────────────────────────────────────────────────┐
│ collectUsageArgs[0x5616634d84b0]                                             │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch                                      │
│ Properties:                                                                  │
├────── PIR Version After Optimizations
collectUsageArgs[0x5616634d84b0]
BB0
  goto BB1
BB1   <- [0]
  val?^           %1.0  = LdArg                    1
  val?^           %1.1  = LdArg                    0
  cp              %1.2  = Checkpoint                -> BB2 (default) | BB62 (if assume failed)
BB2   <- [1]
  val?^ | miss    %2.0  = LdVar              eR    dropMissings, <env 0x56166328f230>
  lgl$#-          %2.1  = Identical                %2.0, function(x) <(rir::DispatchTable*)0x5616634d6f|...
  void                    Assume             D     %2.1, %1.2 (CallTarget@0x561663ac9968[Call#0])
  env             e2.3  = MkEnv              l     e=%1.1, w=%1.0, parent=<env 0x56166328f230>, context 1
  prom-           %2.4  = MkArg                    unboundValue, collectUsageArgs[0x5616634d84b0]_p0, e2.3
  ct              %2.5  = PushContext        lCL   %2.4, dropMissings([(e, -(1))), function(x) <(rir::DispatchTable*)0x5616634d6f|..., e2.3
  val?^           %2.6  = CastType                 up %2.4
  val?^ | miss    %2.7  = LdVar              eR    as.list, <env 0x56166328f230>
  lgl$#-          %2.8  = Identical                %2.7, function(x, ...) <(rir::DispatchTable*)0x56166|...
  void                    Assume             D     %2.8, %1.2 (CallTarget@0x56166194ac28[Call#0])
  env             e2.10 = MkEnv              l     x=%2.6, parent=<env 0x56166328f230>, context 1
  val?            %2.11 = Force!<lazy>       !vL   %2.6, e2.10   <val?->
  val?            %2.12 = StaticCall         !v    as.list[0x5616624e51d0](%2.11) { 0 } e2.10   <vec+>
  void                    StVar              lW    lx, %2.12, e2.10
  (cls|spec|blt)  %2.14 = LdFun              !v    rep, <0x561660cd19b0>, e2.10
  prom-           %2.15 = MkArg                    unboundValue, collectUsageArgs[0x5616634d84b0]_p8, e2.10
  val?            %2.16 = Call               !v    %2.14(true, %2.15) e2.10   <lgl->
  void                    StVar              lW    ix, %2.16, e2.10
  cp              %2.18 = Checkpoint                -> BB4 (default) | BB3 (if assume failed)
BB62   <- [1]
  env             e62.0 = (MkEnv)            l     e=%1.1, w=%1.0, parent=<env 0x56166328f230>, context 1
  fs              %62.1 = FrameState         R     0x56166344d870+0: [], env=e62.0
  void                    Deopt              !v    %62.1
BB4   <- [2]
  val?^ | miss    %4.0  = LdVar              eR    seq_along, e2.10
  lgl$#-          %4.1  = Identical                <blt seq_along>, %4.0   <true>
  void                    Assume             D     %4.1, %2.18 (DeadBranchReached@0x56166194ac28[Test#0])
  val             %4.3  = ChkMissing         e     %2.16
  val?            %4.4  = CallBuiltin        !v    seq_along(%2.16) e2.10   <int->
  val?+           %4.5  = ToForSeq           e     %4.4
  int$-           %4.6  = Length                   %4.5
  int$-           %4.7  = Inc                      0L
  lgl$-           %4.8  = Lt                 d     %4.6, %4.7, elided
  lgl$#-          %4.9  = Identical                %4.8, true
  void                    Branch                   %4.9 -> BB61 (if true) | BB5 (if false)
BB3   <- [2]
  fs              %3.0  = FrameState         R     0x56166344d870+32: [], env=e2.3
  fs              %3.1  = FrameState         R     0x561663afa0d0+97: [], env=e2.10, next=%3.0
  void                    Deopt              !v    %3.1   !
BB61   <- [4]
  goto BB21
BB5   <- [4]
  val?            %5.0  = Extract2_1D        wed   %4.5, %4.7, elided
  void                    StVar              lW    i, %5.0, e2.10
  cp              %5.2  = Checkpoint                -> BB7 (default) | BB6 (if assume failed)
BB21   <- [61, 20]
  int$-           %21.0 = Phi                      %11.1:BB20, %4.7:BB61
  cp              %21.1 = Checkpoint                -> BB23 (default) | BB22 (if assume failed)
BB7   <- [5]
  val?^ | miss    %7.0  = LdVar              eR    lx, e2.10
  lgl$#-          %7.1  = IsType                   %7.0 isA val?~+ | miss
  void                    Assume             D     %7.1, %5.2 (Typecheck@0x56166194ac28[Type#8])
  val?~+ | miss   %7.3  = CastType           d     dn %7.0
  val?+           %7.4  = Force!<value>            %7.3,    <vec+>
  lgl$#-          %7.5  = IsType                   %7.4 isA val+   <true>
  void                    Assume             D     %7.5, %5.2 (DeadBranchReached@0x56166194ac28[Test#2])
  val             %7.7  = ChkMissing         e     %5.0
  lgl$#-          %7.8  = IsType                   %7.7 isA int$-
  void                    Assume             D     %7.8, %5.2 (Typecheck@0x56166194ac28[Type#10])
  int$-           %7.10 = CastType           d     dn %7.7
  val?            %7.11 = Extract2_1D        wed   %7.4, %7.10, elided   <val?->
  void                    StVar              lW    a, %7.11, e2.10
  cp              %7.13 = Checkpoint                -> BB9 (default) | BB8 (if assume failed)
BB6   <- [5]
  fs              %6.0  = FrameState         R     0x56166344d870+32: [], env=e2.3
  fs              %6.1  = FrameState         R     0x561663afa0d0+233: [%4.5, %4.6, %4.7], env=e2.10, next=%6.0
  void                    Deopt              !v    %6.1   !
BB23   <- [21]
  val?^ | miss    %23.0 = LdVar              eR    lx, e2.10
  lgl$#-          %23.1 = IsType                   %23.0 isA val?~+ | miss
  void                    Assume             D     %23.1, %21.1 (Typecheck@0x56166194ac28[Type#20])
  val?~+ | miss   %23.3 = CastType           d     dn %23.0
  val?+           %23.4 = Force!<value>            %23.3,    <vec+>
  lgl$#-          %23.5 = IsType                   %23.4 isA val+   <true>
  void                    Assume             D     %23.5, %21.1 (DeadBranchReached@0x56166194ac28[Test#4])
  val?^ | miss    %23.7 = LdVar              eR    ix, e2.10
  lgl$#-          %23.8 = IsType                   %23.7 isA lgl-
  void                    Assume             D     %23.8, %21.1 (Typecheck@0x56166194ac28[Type#22])
  lgl-            %23.10 = CastType           d     dn %23.7
  val?            %23.11 = Extract1_1D        wed   %23.4, %23.10, elided   <vec+>
  val?            %23.12 = PopContext         C     %23.11, %2.5   <vec+>
  val?+           %23.13 = ToForSeq           e     %23.12
  int$-           %23.14 = Length                   %23.13
  lgl$-           %23.15 = Lt                 d     %23.14, %4.7, elided
  lgl$#-          %23.16 = Identical                %23.15, true
  void                    Branch                   %23.16 -> BB59 (if true) | BB24 (if false)
BB22   <- [21]
  fs              %22.0 = FrameState         R     0x56166344d870+32: [], env=e2.3
  fs              %22.1 = FrameState         R     0x561663afa0d0+539: [%4.5, %4.6, %21.0], env=e2.10, next=%22.0
  void                    Deopt              !v    %22.1   !
BB9   <- [7]
  lgl$-           %9.0  = Missing            eR    a, e2.10
  lgl$#-          %9.1  = CheckTrueFalse     e     %9.0
  void                    Branch                   %9.1 -> BB60 (if true) | BB10 (if false)
BB8   <- [7]
  fs              %8.0  = FrameState         R     0x56166344d870+32: [], env=e2.3
  fs              %8.1  = FrameState         R     0x561663afa0d0+308: [%4.5, %4.6, %4.7], env=e2.10, next=%8.0
  void                    Deopt              !v    %8.1   !
BB59   <- [23]
  goto BB56
BB24   <- [23]
  val?            %24.0 = Extract2_1D        wed   %23.13, %4.7, elided   <val?->
  void                    StVar              lW    a, %24.0, e2.3
  cp              %24.2 = Checkpoint                -> BB26 (default) | BB25 (if assume failed)
BB60   <- [9]
  val?^ | miss    %60.0 = LdVar              eR    ix !upd, e2.10
  lgl$#-          %60.1 = IsType                   %60.0 isA lgl-
  void                    Assume             D     %60.1, %7.13 (Typecheck@0x56166194ac28[Type#12])
  lgl-            %60.3 = CastType           d     dn %60.0
  lgl-            %60.4 = Subassign1_1D      wed   false, %60.3, %7.10, elided
  void                    StVar              lW    ix, %60.4, e2.10
  goto BB11
BB10   <- [9]
  goto BB11
BB56   <- [55, 59]
  void                    Invisible          v     
  void                    Return             l     nil
BB26   <- [24]
  val?^ | miss    %26.0 = LdVar              eR    typeof, e2.3
  lgl$#-          %26.1 = Identical                %26.0, function(x) <(rir::DispatchTable*)0x5616632751|...
  void                    Assume             D     %26.1, %24.2 (CallTarget@0x561663ac9968[Call#1])
  val             %26.3 = ChkMissing         e     %24.0
  prom-           %26.4 = MkArg                    %24.0, collectUsageArgs[0x5616634d84b0]_p2 (!refl), 
  val?            %26.5 = StaticCall         !v    typeof[0x5616645e0970](%26.4) e2.3   <str$->
  lgl$#-          %26.6 = IsType                   %26.5 isA val?-
  cp              %26.7 = Checkpoint                -> BB28 (default) | BB27 (if assume failed)
BB25   <- [24]
  fs              %25.0 = FrameState         R     0x56166344d870+77: [%23.13, %23.14, %4.7], env=e2.3
  void                    Deopt              !v    %25.0   !
BB11   <- [10, 60, 18]
  int$-           %11.0 = Phi                      %4.7:BB10, %11.1:BB18, %4.7:BB60
  int$-           %11.1 = Inc                      %11.0
  lgl$-           %11.2 = Lt                 d     %4.6, %11.1, elided
  lgl$#-          %11.3 = Identical                %11.2, true
  void                    Branch                   %11.3 -> BB20 (if true) | BB12 (if false)
BB28   <- [26]
  void                    Assume             D     %26.6, %26.7 (Typecheck@0x561663ac9968[Type#4])
  val?-           %28.1 = CastType           d     dn %26.5   <str$->
  lgl-            %28.2 = Eq                 wed   %28.1, "symbol", elided   <lgl$->
  lgl$#-          %28.3 = IsType                   %28.2 isA lgl$-
  cp              %28.4 = Checkpoint                -> BB30 (default) | BB29 (if assume failed)
BB27   <- [26]
  fs              %27.0 = FrameState         R     0x56166344d870+109: [%23.13, %23.14, %4.7, %26.5], env=e2.3
  void                    Deopt              !v    %27.0   !
BB20   <- [11]
  goto BB21
BB12   <- [11]
  val?            %12.0 = Extract2_1D        wed   %4.5, %11.1, elided
  void                    StVar              lW    i, %12.0, e2.10
  cp              %12.2 = Checkpoint                -> BB14 (default) | BB13 (if assume failed)
BB30   <- [28]
  void                    Assume             D     %28.3, %28.4 (Typecheck@0x561663ac9968[Type#5])
  lgl$-           %30.1 = CastType           d     dn %28.2
  lgl$-           %30.2 = AsLogical                %30.1
  lgl$#-          %30.3 = Identical                %30.2, false
  void                    Branch                   %30.3 -> BB58 (if true) | BB31 (if false)
BB29   <- [28]
  fs              %29.0 = FrameState         R     0x56166344d870+121: [%23.13, %23.14, %4.7, %28.2], env=e2.3
  void                    Deopt              !v    %29.0   !
BB14   <- [12]
  val             %14.0 = ChkMissing         e     %12.0
  lgl$#-          %14.1 = IsType                   %14.0 isA int$-
  void                    Assume             D     %14.1, %12.2 (Typecheck@0x56166194ac28[Type#16])
  int$-           %14.3 = CastType           d     dn %14.0
  val?            %14.4 = Extract2_1D        wed   %7.4, %14.3, elided   <val?->
  void                    StVar              lW    a, %14.4, e2.10
  cp              %14.6 = Checkpoint                -> BB16 (default) | BB15 (if assume failed)
BB13   <- [12]
  fs              %13.0 = FrameState         R     0x56166344d870+32: [], env=e2.3
  fs              %13.1 = FrameState         R     0x561663afa0d0+398: [%4.5, %4.6, %11.1], env=e2.10, next=%13.0
  void                    Deopt              !v    %13.1   !
BB58   <- [30]
  goto BB34
BB31   <- [30]
  val?^ | miss    %31.0 = LdVar              eR    a, e2.3
  lgl$#-          %31.1 = IsType                   %31.0 isA val?~- | miss
  void                    Assume             D     %31.1, %28.4 (Typecheck@0x561663ac9968[Type#6])
  val?~- | miss   %31.3 = CastType           d     dn %31.0
  val?-           %31.4 = Force!<value>            %31.3,    <sym->
  lgl-            %31.5 = Eq                 wed   %31.4, "...", elided   <lgl$->
  lgl$#-          %31.6 = IsType                   %31.5 isA lgl$-
  cp              %31.7 = Checkpoint                -> BB33 (default) | BB32 (if assume failed)
BB16   <- [14]
  lgl$-           %16.0 = Missing            eR    a, e2.10
  lgl$#-          %16.1 = CheckTrueFalse     e     %16.0
  void                    Branch                   %16.1 -> BB19 (if true) | BB17 (if false)
BB15   <- [14]
  fs              %15.0 = FrameState         R     0x56166344d870+32: [], env=e2.3
  fs              %15.1 = FrameState         R     0x561663afa0d0+473: [%4.5, %4.6, %11.1], env=e2.10, next=%15.0
  void                    Deopt              !v    %15.1   !
BB34   <- [33, 58]
  lgl$-           %34.0 = Phi                      %33.3:BB33, %30.2:BB58
  cp              %34.1 = Checkpoint                -> BB36 (default) | BB35 (if assume failed)
BB33   <- [31]
  void                    Assume             D     %31.6, %31.7 (Typecheck@0x561663ac9968[Type#7])
  lgl$-           %33.1 = CastType           d     dn %31.5
  lgl$-           %33.2 = AsLogical                %33.1
  lgl$-           %33.3 = LAnd                     %30.2, %33.2
  goto BB34
BB32   <- [31]
  fs              %32.0 = FrameState         R     0x56166344d870+154: [%23.13, %23.14, %4.7, %30.2, %31.5], env=e2.3
  void                    Deopt              !v    %32.0   !
BB19   <- [16]
  val?^ | miss    %19.0 = LdVar              eR    ix !upd, e2.10
  lgl$#-          %19.1 = IsType                   %19.0 isA lgl-
  void                    Assume             D     %19.1, %14.6 (Typecheck@0x56166194ac28[Type#18])
  lgl-            %19.3 = CastType           d     dn %19.0
  val             %19.4 = ChkMissing         e     %12.0
  lgl$#-          %19.5 = IsType                   %19.4 isA int$-
  void                    Assume             D     %19.5, %14.6 (Typecheck@0x56166194ac28[Type#19])
  int$-           %19.7 = CastType           d     dn %19.4
  lgl-            %19.8 = Subassign1_1D      wed   false, %19.3, %19.7, elided
  void                    StVar              lW    ix, %19.8, e2.10
  goto BB18
BB17   <- [16]
  goto BB18
BB36   <- [34]
  lgl$#-          %36.0 = CheckTrueFalse     e     %34.0
  void                    Branch                   %36.0 -> BB57 (if true) | BB37 (if false)
BB35   <- [34]
  fs              %35.0 = FrameState         R     0x56166344d870+161: [%23.13, %23.14, %4.7, %34.0], env=e2.3
  void                    Deopt              !v    %35.0   !
BB18   <- [17, 19]
  goto BB11
BB57   <- [36]
  (cls|spec|blt)  %57.0 = LdFun              !v    $, e2.3
  fs              %57.1 = FrameState         R     0x56166344d870+215: [%23.13, %23.14, %4.7, %57.0], env=e2.3
  void                    Deopt              !v    %57.1, DeadCall@0x561663ac9968[Call#3], %57.0   !
BB37   <- [36]
  val?^ | miss    %37.0 = LdVar              eR    walkCode, e2.3
  lgl$#-          %37.1 = Identical                %37.0, function(e, w=makeCodeWalker()) <(rir::Dispatc|...
  void                    Assume             D     %37.1, %34.1 (CallTarget@0x561663ac9968[Call#2])
  prom-           %37.3 = MkArg                    unboundValue, collectUsageArgs[0x5616634d84b0]_p3, e2.3
  prom-           %37.4 = MkArg                    unboundValue, collectUsageArgs[0x5616634d84b0]_p4, e2.3
  val?            %37.5 = StaticCall         !v    walkCode[0x561663fef370](%37.3, %37.4) e2.3
  goto BB38
BB38   <- [37, 52]
  int$-           %38.0 = Phi                      %4.7:BB37, %38.1:BB52
  int$-           %38.1 = Inc                      %38.0
  lgl$-           %38.2 = Lt                 d     %23.14, %38.1, elided
  lgl$#-          %38.3 = Identical                %38.2, true
  void                    Branch                   %38.3 -> BB55 (if true) | BB39 (if false)
BB55   <- [38]
  goto BB56
BB39   <- [38]
  val?            %39.0 = Extract2_1D        wed   %23.13, %38.1, elided   <val?->
  void                    StVar              lW    a, %39.0, e2.3
  cp              %39.2 = Checkpoint                -> BB41 (default) | BB40 (if assume failed)
BB41   <- [39]
  val?^ | miss    %41.0 = LdVar              eR    typeof, e2.3
  lgl$#-          %41.1 = Identical                %41.0, function(x) <(rir::DispatchTable*)0x5616632751|...
  void                    Assume             D     %41.1, %39.2 (CallTarget@0x561663ac9968[Call#11])
  val             %41.3 = ChkMissing         e     %39.0
  prom-           %41.4 = MkArg                    %39.0, collectUsageArgs[0x5616634d84b0]_p5 (!refl), 
  val?            %41.5 = StaticCall         !v    typeof[0x5616645e0970](%41.4) e2.3   <str$->
  lgl$#-          %41.6 = IsType                   %41.5 isA val?-
  cp              %41.7 = Checkpoint                -> BB43 (default) | BB42 (if assume failed)
BB40   <- [39]
  fs              %40.0 = FrameState         R     0x56166344d870+492: [%23.13, %23.14, %38.1], env=e2.3
  void                    Deopt              !v    %40.0   !
BB43   <- [41]
  void                    Assume             D     %41.6, %41.7 (Typecheck@0x561663ac9968[Type#29])
  val?-           %43.1 = CastType           d     dn %41.5   <str$->
  lgl-            %43.2 = Eq                 wed   %43.1, "symbol", elided   <lgl$->
  lgl$#-          %43.3 = IsType                   %43.2 isA lgl$-
  cp              %43.4 = Checkpoint                -> BB45 (default) | BB44 (if assume failed)
BB42   <- [41]
  fs              %42.0 = FrameState         R     0x56166344d870+524: [%23.13, %23.14, %38.1, %41.5], env=e2.3
  void                    Deopt              !v    %42.0   !
BB45   <- [43]
  void                    Assume             D     %43.3, %43.4 (Typecheck@0x561663ac9968[Type#30])
  lgl$-           %45.1 = CastType           d     dn %43.2
  lgl$-           %45.2 = AsLogical                %45.1
  lgl$#-          %45.3 = Identical                %45.2, false
  void                    Branch                   %45.3 -> BB54 (if true) | BB46 (if false)
BB44   <- [43]
  fs              %44.0 = FrameState         R     0x56166344d870+536: [%23.13, %23.14, %38.1, %43.2], env=e2.3
  void                    Deopt              !v    %44.0   !
BB54   <- [45]
  goto BB49
BB46   <- [45]
  val?^ | miss    %46.0 = LdVar              eR    a, e2.3
  lgl$#-          %46.1 = IsType                   %46.0 isA val?~- | miss
  void                    Assume             D     %46.1, %43.4 (Typecheck@0x561663ac9968[Type#31])
  val?~- | miss   %46.3 = CastType           d     dn %46.0
  val?-           %46.4 = Force!<value>            %46.3,    <sym->
  lgl-            %46.5 = Eq                 wed   %46.4, "...", elided   <lgl$->
  lgl$#-          %46.6 = IsType                   %46.5 isA lgl$-
  cp              %46.7 = Checkpoint                -> BB48 (default) | BB47 (if assume failed)
BB49   <- [48, 54]
  lgl$-           %49.0 = Phi                      %48.3:BB48, %45.2:BB54
  cp              %49.1 = Checkpoint                -> BB51 (default) | BB50 (if assume failed)
BB48   <- [46]
  void                    Assume             D     %46.6, %46.7 (Typecheck@0x561663ac9968[Type#32])
  lgl$-           %48.1 = CastType           d     dn %46.5
  lgl$-           %48.2 = AsLogical                %48.1
  lgl$-           %48.3 = LAnd                     %45.2, %48.2
  goto BB49
BB47   <- [46]
  fs              %47.0 = FrameState         R     0x56166344d870+569: [%23.13, %23.14, %38.1, %45.2, %46.5], env=e2.3
  void                    Deopt              !v    %47.0   !
BB51   <- [49]
  lgl$#-          %51.0 = CheckTrueFalse     e     %49.0
  void                    Branch                   %51.0 -> BB53 (if true) | BB52 (if false)
BB50   <- [49]
  fs              %50.0 = FrameState         R     0x56166344d870+576: [%23.13, %23.14, %38.1, %49.0], env=e2.3
  void                    Deopt              !v    %50.0   !
BB53   <- [51]
  (cls|spec|blt)  %53.0 = LdFun              !v    $, e2.3
  fs              %53.1 = FrameState         R     0x56166344d870+630: [%23.13, %23.14, %38.1, %53.0], env=e2.3
  void                    Deopt              !v    %53.1, DeadCall@0x561663ac9968[Call#13], %53.0   !
BB52   <- [51]
  val?^ | miss    %52.0 = LdVar              eR    walkCode, e2.3
  lgl$#-          %52.1 = Identical                %52.0, function(e, w=makeCodeWalker()) <(rir::Dispatc|...
  void                    Assume             D     %52.1, %49.1 (CallTarget@0x561663ac9968[Call#12])
  prom-           %52.3 = MkArg                    unboundValue, collectUsageArgs[0x5616634d84b0]_p6, e2.3
  prom-           %52.4 = MkArg                    unboundValue, collectUsageArgs[0x5616634d84b0]_p7, e2.3
  val?            %52.5 = StaticCall         !v    walkCode[0x561663fef370](%52.3, %52.4) e2.3
  goto BB38
Prom 0:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    e, e1.0
  val?            %1.2  = Force<lazy>        !v    %1.1, e1.0   <code->
  lgl$#-          %1.3  = IsType                   %1.2 isA val+   <true>
  void                    Branch                   %1.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [1]
  goto BB3
BB4   <- [1]
  prom-           %4.0  = MkArg                    unboundValue, collectUsageArgs[0x5616634d84b0]_p1, 
  goto BB3
BB3   <- [4, 2]
  (real|prom)-    %3.0  = Phi                      -1:BB2, %4.0:BB4
  val?            %3.1  = Extract1_1D        !v    %1.2, %3.0, e1.0   <(nil|code)->
  void                    Visible            v     
  void                    Return             l     %3.1
Prom 1:
BB0
  goto BB1
BB1   <- [0]
  void                    Visible            v     
  void                    Return             l     -1
Prom 2:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    a, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <val?->
  void                    Return             l     %1.3
Prom 3:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    a, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <val?->
  void                    Return             l     %1.3
Prom 4:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    w, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 5:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    a, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <val?->
  void                    Return             l     %1.3
Prom 6:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    a, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <val?->
  void                    Return             l     %1.3
Prom 7:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    w, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 8:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     length, e1.0
  prom-           %1.2  = MkArg                    unboundValue, collectUsageArgs[0x5616634d84b0]_p9, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <val?_>
  void                    Return             l     %1.3
Prom 9:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    x, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3

│ collectUsageArgs[0x5616634d84b0]                                             │
└──────────────────────────────────────────────────────────────────────────────┘
