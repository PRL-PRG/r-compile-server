
┌──────────────────────────────────────────────────────────────────────────────┐
│ tryCatch[0x5616634b3910]                                                     │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;Eager1,NonRefl1,!Obj1 miss: 1        │
│ Properties:                                                                  │
├────── PIR Version After Optimizations
tryCatch[0x5616634b3910]
BB0
  goto BB1
BB1   <- [0]
  dots+           %1.0  = LdArg                    1
  val?^           %1.1  = LdArg                    0
  env             e1.2  = MkEnv              l     expr=%1.1, ...=%1.0, finally(miss)=missingArg, parent=R_BaseNamespace, context 1
  cls             %1.3  = MkCls                    tryCatchList, e1.2
  cls             %1.4  = MkCls                    tryCatchOne, e1.2
  *dots-          %1.5  = ExpandDots               %1.0
  void                    StVar              lW    tryCatchList, %1.3, e1.2
  void                    StVar              lW    tryCatchOne, %1.4, e1.2
  val?            %1.8  = NamedCall          !v    <blt list>(.xpandDotsTrigger=%1.5) e1.2   <vec$+>
  void                    StVar              lW    handlers, %1.8, e1.2
  lgl$#-          %1.10 = IsType                   %1.8 isA val?+
  cp              %1.11 = Checkpoint                -> BB2 (default) | BB24 (if assume failed)
BB2   <- [1]
  val?^ | miss    %2.0  = LdVar              eR    names, e1.2
  lgl$#-          %2.1  = Identical                <blt names>, %2.0   <true>
  void                    Assume             D     %2.1, %1.11 (DeadBranchReached@0x561662fa6d90[Test#0])
  val             %2.3  = ChkMissing         e     %1.8
  void                    Assume             D     %1.10, %1.11 (Typecheck@0x561662fa6d90[Type#1])
  val?+           %2.5  = CastType           d     dn %1.8   <vec$+>
  val+            %2.6  = CallSafeBuiltin    wed   names(%2.5)    <str$->
  void                    StVar              lW    classes, %2.6, e1.2
  cp              %2.8  = Checkpoint                -> BB4 (default) | BB3 (if assume failed)
BB24   <- [1]
  fs              %24.0 = FrameState         R     0x561662f079a0+151: [], env=e1.2
  void                    Deopt              !v    %24.0   !
BB4   <- [2]
  val?^ | miss    %4.0  = LdVar              eR    parent.frame, e1.2
  lgl$#-          %4.1  = Identical                %4.0, function(n=1) <(rir::DispatchTable*)0x561662f0|...
  void                    Assume             D     %4.1, %2.8 (CallTarget@0x561662fa6d90[Call#3])
  val?            %4.3  = StaticCall         !v    parent.frame[0x5616634b39d0]() e1.2   <env->
  void                    StVar              lW    parentenv, %4.3, e1.2
  cp              %4.5  = Checkpoint                -> BB6 (default) | BB5 (if assume failed)
BB3   <- [2]
  fs              %3.0  = FrameState         R     0x561662f079a0+256: [], env=e1.2
  void                    Deopt              !v    %3.0   !
BB6   <- [4]
  val?^ | miss    %6.0  = LdVar              eR    length, e1.2
  lgl$#-          %6.1  = Identical                <blt length>, %6.0   <true>
  void                    Assume             D     %6.1, %4.5 (DeadBranchReached@0x561662fa6d90[Test#1])
  val?^ | miss    %6.3  = LdVar              eR    classes, e1.2
  lgl$#-          %6.4  = IsType                   %6.3 isA val?~- | miss
  void                    Assume             D     %6.4, %4.5 (Typecheck@0x561662fa6d90[Type#7])
  val?~- | miss   %6.6  = CastType           d     dn %6.3
  val?-           %6.7  = Force!<value>            %6.6,    <str$->
  (int|real)$-    %6.8  = CallSafeBuiltin    wed   length(%6.7)    <int$->
  lgl$#-          %6.9  = IsType                   %6.8 isA int$-
  cp              %6.10 = Checkpoint                -> BB8 (default) | BB7 (if assume failed)
BB5   <- [4]
  fs              %5.0  = FrameState         R     0x561662f079a0+297: [], env=e1.2
  void                    Deopt              !v    %5.0   !
BB8   <- [6]
  void                    Assume             D     %6.9, %6.10 (Typecheck@0x561662fa6d90[Type#8])
  int$-           %8.1  = CastType           d     dn %6.8
  val?^ | miss    %8.2  = LdVar              eR    handlers, e1.2
  lgl$#-          %8.3  = IsType                   %8.2 isA val?~+ | miss
  void                    Assume             D     %8.3, %6.10 (Typecheck@0x561662fa6d90[Type#10])
  val?~+ | miss   %8.5  = CastType           d     dn %8.2
  val?+           %8.6  = Force!<value>            %8.5,    <vec$+>
  (int|real)$-    %8.7  = CallSafeBuiltin    wed   length(%8.6)    <int$->
  lgl$#-          %8.8  = IsType                   %8.7 isA int$-
  cp              %8.9  = Checkpoint                -> BB10 (default) | BB9 (if assume failed)
BB7   <- [6]
  fs              %7.0  = FrameState         R     0x561662f079a0+388: [%6.8], env=e1.2
  void                    Deopt              !v    %7.0   !
BB10   <- [8]
  void                    Assume             D     %8.8, %8.9 (Typecheck@0x561662fa6d90[Type#11])
  int$-           %10.1 = CastType           d     dn %8.7
  lgl$-           %10.2 = Neq                d     %8.1, %10.1, elided   <lgl$->
  lgl$#-          %10.3 = CheckTrueFalse     e     %10.2
  void                    Branch                   %10.3 -> BB23 (if true) | BB11 (if false)
BB9   <- [8]
  fs              %9.0  = FrameState         R     0x561662f079a0+484: [%8.1, %8.7], env=e1.2
  void                    Deopt              !v    %9.0   !
BB23   <- [10]
  (cls|spec|blt)  %23.0 = LdFun              !v    stop, e1.2
  fs              %23.1 = FrameState         R     0x561662f079a0+511: [%23.0], env=e1.2
  void                    Deopt              !v    %23.1, DeadCall@0x561662fa6d90[Call#6], %23.0   !
BB11   <- [10]
  val?^ | miss    %11.0 = LdVar              eR    tryCatchList, e1.2
  lgl$#-          %11.1 = Identical                %11.0, %1.3
  void                    Assume             D     %11.1, %8.9 (CallTarget@0x561662fa6d90[Call#7])
  prom-           %11.3 = MkArg                    unboundValue, tryCatch[0x5616634b3910]_p0, e1.2
  prom-           %11.4 = MkArg                    unboundValue, tryCatch[0x5616634b3910]_p1, e1.2
  prom-           %11.5 = MkArg                    unboundValue, tryCatch[0x5616634b3910]_p2 (!refl), e1.2
  prom-           %11.6 = MkArg                    unboundValue, tryCatch[0x5616634b3910]_p3, e1.2
  ct              %11.7 = PushContext        lCL   %11.3, %11.4, %11.5, %11.6, tryCatchList(expr, classes, parentenv, handlers), %1.3, e1.2
  val?^           %11.8 = CastType                 up %11.6
  val?^           %11.9 = CastType                 up %11.5
  val?^           %11.10 = CastType                 up %11.4
  val?^           %11.11 = CastType                 up %11.3
  env             e11.12 = MkEnv              l     expr=%11.11, names=%11.10, parentenv=%11.9, handlers=%11.8, parent=e1.2, context 1
  val?            %11.13 = Force!<lazy>       !vL   %11.10, e11.12   <str$->
  lgl$#-          %11.14 = IsType                   %11.13 isA val?-
  cp              %11.15 = Checkpoint                -> BB13 (default) | BB12 (if assume failed)
BB13   <- [11]
  void                    Assume             D     %11.14, %11.15 (Typecheck@0x561662f2c590[Type#1])
  val?-           %13.1 = CastType           d     dn %11.13   <str$->
  (int|real)$-    %13.2 = CallSafeBuiltin    wed   length(%13.1)    <int$->
  lgl$#-          %13.3 = IsType                   %13.2 isA int$-
  cp              %13.4 = Checkpoint                -> BB15 (default) | BB14 (if assume failed)
BB12   <- [11]
  fs              %12.0 = FrameState         R     0x561662f079a0+586: [], env=e1.2
  fs              %12.1 = FrameState         R     0x561662fd2490+69: [<blt length>, %11.13], env=e11.12, next=%12.0
  void                    Deopt              !v    %12.1   !
BB15   <- [13]
  void                    Assume             D     %13.3, %13.4 (Typecheck@0x561662f2c590[Type#2])
  int$-           %15.1 = CastType           d     dn %13.2
  void                    StVar              lW    nh, %15.1, e11.12
  cp              %15.3 = Checkpoint                -> BB17 (default) | BB16 (if assume failed)
BB14   <- [13]
  fs              %14.0 = FrameState         R     0x561662f079a0+586: [], env=e1.2
  fs              %14.1 = FrameState         R     0x561662fd2490+91: [%13.2], env=e11.12, next=%14.0
  void                    Deopt              !v    %14.1   !
BB17   <- [15]
  lgl$-           %17.0 = Gt                 d     %15.1, 1L, elided   <lgl$->
  lgl$#-          %17.1 = CheckTrueFalse     e     %17.0
  void                    Branch                   %17.1 -> BB22 (if true) | BB18 (if false)
BB16   <- [15]
  fs              %16.0 = FrameState         R     0x561662f079a0+586: [], env=e1.2
  fs              %16.1 = FrameState         R     0x561662fd2490+105: [], env=e11.12, next=%16.0
  void                    Deopt              !v    %16.1   !
BB22   <- [17]
  fs              %22.0 = FrameState         R     0x561662f079a0+586: [], env=e1.2
  (cls|spec|blt)  %22.1 = LdFun              !v    tryCatchOne, e1.2
  fs              %22.2 = FrameState         R     0x561662fd2490+250: [%22.1], env=e11.12, next=%22.0
  void                    Deopt              !v    %22.2, DeadCall@0x561662f2c590[Call#2], %22.1   !
BB18   <- [17]
  void                    Visible            v     
  lgl$-           %18.1 = Eq                 vd    %15.1, 1L, elided   <lgl$->
  lgl$#-          %18.2 = CheckTrueFalse     e     %18.1
  void                    Branch                   %18.2 -> BB21 (if true) | BB19 (if false)
BB21   <- [18]
  val?^ | miss    %21.0 = LdVar              eR    tryCatchOne, e11.12
  (cls|spec|blt)  %21.1 = CastType                 dn %21.0
  val+            %21.2 = CallSafeBuiltin          bodyCode(%21.1) 
  lgl$#-          %21.3 = Identical                %21.2, <(rir::DispatchTable*)0x561662f08730>
  void                    Assume             D     %21.3, %15.3 (CallTarget@0x561662f2c590[Call#1])
  val?            %21.5 = Force!             d     %21.0, 
  prom-           %21.6 = MkArg                    unboundValue, tryCatch[0x5616634b3910]_p4, e11.12
  prom-           %21.7 = MkArg                    unboundValue, tryCatch[0x5616634b3910]_p5, e11.12
  prom-           %21.8 = MkArg                    unboundValue, tryCatch[0x5616634b3910]_p6, e11.12
  prom-           %21.9 = MkArg                    unboundValue, tryCatch[0x5616634b3910]_p7, e11.12
  (cls|spec|blt)  %21.10 = ChkFunction        e     %21.5
  val?            %21.11 = StaticCall         !     tryCatchOne[0x561663f87d10](%21.6, %21.7, %21.8, %21.9) from %21.10 e11.12   <val?+>
  goto BB20
BB19   <- [18]
  void                    Visible            v     
  val?            %19.1 = Force!             !L    %11.11, e11.12   <val?_>
  goto BB20
BB20   <- [19, 21]
  val?            %20.0 = Phi                      %19.1:BB19, %21.11:BB21
  val?            %20.1 = PopContext         C     %20.0, %11.7   <val?+>
  void                    Return             l     %20.1
Prom 0:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    expr, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <val?+>
  void                    Return             l     %1.3
Prom 1:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    classes, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 2:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    parentenv, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <env->
  void                    Return             l     %1.3
Prom 3:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    handlers, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <vec$+>
  void                    Return             l     %1.3
Prom 4:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    expr, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <val?+>
  void                    Return             l     %1.3
Prom 5:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    names, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 6:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    parentenv, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <env->
  void                    Return             l     %1.3
Prom 7:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    handlers, e1.0
  val?            %1.2  = Force<lazy>        !v    %1.1, e1.0   <vec$+>
  val?            %1.3  = Extract2_1D        !v    %1.2, 1L, e1.0   <cls->
  void                    Visible            v     
  void                    Return             l     %1.3

│ tryCatch[0x5616634b3910]                                                     │
└──────────────────────────────────────────────────────────────────────────────┘
