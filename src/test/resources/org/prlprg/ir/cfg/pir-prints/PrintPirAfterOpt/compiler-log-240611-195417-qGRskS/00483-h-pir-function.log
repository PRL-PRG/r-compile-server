
┌──────────────────────────────────────────────────────────────────────────────┐
│ h[0x5616639cbd00]                                                            │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;NonRefl0,NonRefl1,!Obj0,!Obj1        │
│ Properties:                                                                  │
├────── PIR Version After Optimizations
h[0x5616639cbd00]
BB0
  goto BB1
BB1   <- [0]
  val?^           %1.0  = LdArg                    1
  val?^           %1.1  = LdArg                    0
  env             e1.2  = MkEnv              l     e=%1.1, w=%1.0, parent=<env 0x56166328f230>, context 1
  (cls|spec|blt)  %1.3  = LdFun              !     $, <0x561660cbcc10>, <env 0x56166328f230>
  prom-           %1.4  = MkArg                    unboundValue, h[0x5616639cbd00]_p0 (!refl), e1.2
  prom-           %1.5  = MkArg                    unboundValue, h[0x5616639cbd00]_p1, e1.2
  val?            %1.6  = Call               !     %1.3(%1.4, %1.5) e1.2   <cls->
  (cls|spec|blt)  %1.7  = ChkFunction        e     %1.6
  prom-           %1.8  = MkArg                    unboundValue, h[0x5616639cbd00]_p2, e1.2
  prom-           %1.9  = MkArg                    unboundValue, h[0x5616639cbd00]_p4, e1.2
  prom-           %1.10 = MkArg                    unboundValue, h[0x5616639cbd00]_p5, e1.2
  val?            %1.11 = Call               !     %1.7(%1.8, %1.9, %1.10) e1.2
  cp              %1.12 = Checkpoint                -> BB2 (default) | BB5 (if assume failed)
BB2   <- [1]
  val?^ | miss    %2.0  = LdVar              eR    walkCode, e1.2
  lgl$#-          %2.1  = Identical                %2.0, function(e, w=makeCodeWalker()) <(rir::Dispatc|...
  void                    Assume             D     %2.1, %1.12 (CallTarget@0x561661f14c48[Call#3])
  prom-           %2.3  = MkArg                    unboundValue, h[0x5616639cbd00]_p6, e1.2
  prom-           %2.4  = MkArg                    unboundValue, h[0x5616639cbd00]_p7, e1.2
  val?            %2.5  = StaticCall         !     walkCode[0x561663616620](%2.3, %2.4) e1.2
  cp              %2.6  = Checkpoint                -> BB4 (default) | BB3 (if assume failed)
BB5   <- [1]
  fs              %5.0  = FrameState         R     0x5616633f78c0+80: [%1.11], env=e1.2
  void                    Deopt              !v    %5.0   !
BB4   <- [2]
  val?^ | miss    %4.0  = LdVar              eR    walkCode, e1.2
  lgl$#-          %4.1  = Identical                %4.0, function(e, w=makeCodeWalker()) <(rir::Dispatc|...
  void                    Assume             D     %4.1, %2.6 (CallTarget@0x561661f14c48[Call#4])
  prom-           %4.3  = MkArg                    unboundValue, h[0x5616639cbd00]_p8, e1.2
  prom-           %4.4  = MkArg                    unboundValue, h[0x5616639cbd00]_p9, e1.2
  val?            %4.5  = StaticCall         !     walkCode[0x561663616620](%4.3, %4.4) e1.2   <(nil|str)->
  void                    Return             l     %4.5
BB3   <- [2]
  fs              %3.0  = FrameState         R     0x5616633f78c0+118: [%2.5], env=e1.2
  void                    Deopt              !v    %3.0   !
Prom 0:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    w, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 1:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    collect, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 2:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     getAssignedVar, <0x5616633dffd0>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, h[0x5616639cbd00]_p3, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <str$->
  void                    Return             l     %1.3
Prom 3:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    e, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <code->
  void                    Return             l     %1.3
Prom 4:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    e, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 5:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    w, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 6:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    e, e1.0
  val?            %1.2  = Force<wrapped>     !v    %1.1, e1.0   <code->
  val?            %1.3  = Extract2_1D        !v    %1.2, 2, e1.0   <(sym|code)->
  void                    Visible            v     
  void                    Return             l     %1.3
Prom 7:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    w, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 8:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    e, e1.0
  val?            %1.2  = Force<wrapped>     !v    %1.1, e1.0   <code->
  val?            %1.3  = Extract2_1D        !v    %1.2, 3, e1.0   <(real|code)->
  void                    Visible            v     
  void                    Return             l     %1.3
Prom 9:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    w, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3

│ h[0x5616639cbd00]                                                            │
└──────────────────────────────────────────────────────────────────────────────┘
