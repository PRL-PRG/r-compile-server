
┌──────────────────────────────────────────────────────────────────────────────┐
│ osr[0x5616626aa850]                                                          │
│ Context: CorrOrd,!TMany                                                      │
│ Properties:                                                                  │
├────── PIR Version After Optimizations
osr[0x5616626aa850]
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  lgl$#-          %1.1  = LdArg                    0   <lgl$->
  cp              %1.2  = Checkpoint                -> BB2 (default) | BB46 (if assume failed)
BB2   <- [1]
  void                    Branch                   %1.1 -> BB45 (if true) | BB3 (if false)
BB46   <- [1]
  fs              %46.0 = FrameState         R     0x561662eff5b0+299: [%1.1], env=e1.0
  void                    Deopt              !v    %46.0   !
BB45   <- [2]
  val?^ | miss    %45.0 = LdVar              eR    collectUsageFun, e1.0
  lgl$#-          %45.1 = Identical                %45.0, function(name, formals, body, w) <(rir::Dispat|...
  void                    Assume             D     %45.1, %1.2 (CallTarget@0x561660f6dae8[Call#23])
  prom-           %45.3 = MkArg                    unboundValue, osr[0x5616626aa850]_p10, e1.0
  prom-           %45.4 = MkArg                    unboundValue, osr[0x5616626aa850]_p11, e1.0
  prom-           %45.5 = MkArg                    unboundValue, osr[0x5616626aa850]_p12, e1.0
  prom-           %45.6 = MkArg                    unboundValue, osr[0x5616626aa850]_p13, e1.0
  val?            %45.7 = StaticCall         !     collectUsageFun[0x561663c86a90](%45.3, %45.4, %45.5, %45.6) e1.0   <nil->
  goto BB27
BB3   <- [2]
  val?^ | miss    %3.0  = LdVar              eR    isClosureFunDef, e1.0
  lgl$#-          %3.1  = Identical                %3.0, function(e, w) <(rir::DispatchTable*)0x5616635|...
  void                    Assume             D     %3.1, %1.2 (CallTarget@0x561660f6dae8[Call#8])
  prom-           %3.3  = MkArg                    unboundValue, osr[0x5616626aa850]_p0, e1.0
  prom-           %3.4  = MkArg                    unboundValue, osr[0x5616626aa850]_p1, e1.0
  ct              %3.5  = PushContext        lCL   %3.3, %3.4, isClosureFunDef(e, w), function(e, w) <(rir::DispatchTable*)0x5616635|..., e1.0
  val?^           %3.6  = CastType                 up %3.4
  val?^           %3.7  = CastType                 up %3.3
  cp              %3.8  = Checkpoint                -> BB5 (default) | BB4 (if assume failed)
BB27   <- [45, 26]
  val?            %27.0 = Phi                      %26.5:BB26, %45.7:BB45
  void                    Return             l     %27.0
BB5   <- [3]
  val?^ | miss    %5.0  = LdVar              eR    typeof, <env 0x56166328f230>
  lgl$#-          %5.1  = Identical                %5.0, function(x) <(rir::DispatchTable*)0x5616632751|...
  void                    Assume             D     %5.1, %3.8 (CallTarget@0x561663acaeb8[Call#0])
  env             e5.3  = MkEnv              l     e=%3.7, w=%3.6, parent=<env 0x56166328f230>, context 1
  prom-           %5.4  = MkArg                    unboundValue, osr[0x5616626aa850]_p14, e5.3
  val?            %5.5  = StaticCall         !v    typeof[0x56166364f640](%5.4) e5.3   <str$->
  lgl$#-          %5.6  = IsType                   %5.5 isA val?-
  cp              %5.7  = Checkpoint                -> BB7 (default) | BB6 (if assume failed)
BB4   <- [3]
  fs              %4.0  = FrameState         R     0x561662eff5b0+341: [], env=e1.0
  env             e4.1  = (MkEnv)            l     e=%3.7, w=%3.6, parent=<env 0x56166328f230>, context 1
  fs              %4.2  = FrameState         R     0x5616634409d0+0: [], env=e4.1, next=%4.0
  void                    Deopt              !v    %4.2   !
BB7   <- [5]
  void                    Assume             D     %5.6, %5.7 (Typecheck@0x561663acaeb8[Type#2])
  val?-           %7.1  = CastType           d     dn %5.5   <str$->
  lgl-            %7.2  = Neq                wed   %7.1, "language", elided   <lgl$->
  lgl$#-          %7.3  = IsType                   %7.2 isA lgl$-
  cp              %7.4  = Checkpoint                -> BB9 (default) | BB8 (if assume failed)
BB6   <- [5]
  fs              %6.0  = FrameState         R     0x561662eff5b0+341: [], env=e1.0
  fs              %6.1  = FrameState         R     0x5616634409d0+32: [%5.5], env=e5.3, next=%6.0
  void                    Deopt              !v    %6.1   !
BB9   <- [7]
  void                    Assume             D     %7.3, %7.4 (Typecheck@0x561663acaeb8[Type#3])
  lgl$-           %9.1  = CastType           d     dn %7.2
  lgl$-           %9.2  = AsLogical                %9.1
  lgl$#-          %9.3  = Identical                %9.2, false
  void                    Branch                   %9.3 -> BB44 (if true) | BB10 (if false)
BB8   <- [7]
  fs              %8.0  = FrameState         R     0x561662eff5b0+341: [], env=e1.0
  fs              %8.1  = FrameState         R     0x5616634409d0+44: [%7.2], env=e5.3, next=%8.0
  void                    Deopt              !v    %8.1   !
BB44   <- [9]
  goto BB15
BB10   <- [9]
  val?^ | miss    %10.0 = LdVar              eR    typeof, e5.3
  lgl$#-          %10.1 = Identical                %10.0, function(x) <(rir::DispatchTable*)0x5616632751|...
  void                    Assume             D     %10.1, %7.4 (CallTarget@0x561663acaeb8[Call#1])
  prom-           %10.3 = MkArg                    unboundValue, osr[0x5616626aa850]_p15, e5.3
  val?            %10.4 = StaticCall         !v    typeof[0x56166364f640](%10.3) e5.3   <str$->
  lgl$#-          %10.5 = IsType                   %10.4 isA val?-
  cp              %10.6 = Checkpoint                -> BB12 (default) | BB11 (if assume failed)
BB15   <- [44, 14]
  lgl$-           %15.0 = Phi                      %14.3:BB14, %9.2:BB44
  val?            %15.1 = PopContext         C     %15.0, %3.5   <lgl$->
  lgl$#-          %15.2 = IsType                   %15.1 isA lgl$-
  cp              %15.3 = Checkpoint                -> BB17 (default) | BB16 (if assume failed)
BB12   <- [10]
  void                    Assume             D     %10.5, %10.6 (Typecheck@0x561663acaeb8[Type#6])
  val?-           %12.1 = CastType           d     dn %10.4   <str$->
  lgl-            %12.2 = Eq                 wed   %12.1, "closure", elided   <lgl$->
  lgl$#-          %12.3 = IsType                   %12.2 isA lgl$-
  cp              %12.4 = Checkpoint                -> BB14 (default) | BB13 (if assume failed)
BB11   <- [10]
  fs              %11.0 = FrameState         R     0x561662eff5b0+341: [], env=e1.0
  fs              %11.1 = FrameState         R     0x5616634409d0+88: [%9.2, %10.4], env=e5.3, next=%11.0
  void                    Deopt              !v    %11.1   !
BB17   <- [15]
  void                    Assume             D     %15.2, %15.3 (Typecheck@0x561660f6dae8[Type#23])
  lgl$-           %17.1 = CastType           d     dn %15.1
  lgl$#-          %17.2 = CheckTrueFalse     e     %17.1
  void                    Branch                   %17.2 -> BB41 (if true) | BB18 (if false)
BB16   <- [15]
  fs              %16.0 = FrameState         R     0x561662eff5b0+341: [%15.1], env=e1.0
  void                    Deopt              !v    %16.0   !
BB14   <- [12]
  void                    Assume             D     %12.3, %12.4 (Typecheck@0x561663acaeb8[Type#7])
  lgl$-           %14.1 = CastType           d     dn %12.2
  lgl$-           %14.2 = AsLogical                %14.1
  lgl$-           %14.3 = LAnd                     %9.2, %14.2
  goto BB15
BB13   <- [12]
  fs              %13.0 = FrameState         R     0x561662eff5b0+341: [], env=e1.0
  fs              %13.1 = FrameState         R     0x5616634409d0+100: [%9.2, %12.2], env=e5.3, next=%13.0
  void                    Deopt              !v    %13.1   !
BB41   <- [17]
  val?^ | miss    %41.0 = LdVar              eR    e, e1.0
  val?            %41.1 = Force!             !v    %41.0, e1.0   <val?_>
  lgl$#-          %41.2 = IsType                   %41.1 isA val?+
  cp              %41.3 = Checkpoint                -> BB43 (default) | BB42 (if assume failed)
BB18   <- [17]
  val?^ | miss    %18.0 = LdVar              eR    typeof, e1.0
  lgl$#-          %18.1 = Identical                %18.0, function(x) <(rir::DispatchTable*)0x5616632751|...
  void                    Assume             D     %18.1, %15.3 (CallTarget@0x561660f6dae8[Call#9])
  prom-           %18.3 = MkArg                    unboundValue, osr[0x5616626aa850]_p2, e1.0
  val?            %18.4 = StaticCall         !v    typeof[0x56166364f640](%18.3) e1.0   <str$->
  lgl$#-          %18.5 = IsType                   %18.4 isA val?-
  cp              %18.6 = Checkpoint                -> BB20 (default) | BB19 (if assume failed)
BB43   <- [41]
  void                    Assume             D     %41.2, %41.3 (Typecheck@0x561660f6dae8[Type#41])
  val?+           %43.1 = CastType           d     dn %41.1   <val?_>
  val?            %43.2 = Extract2_1D        wed   %43.1, 3, elided   <val?_>
  void                    StVar              lW    fun, %43.2, e1.0
  (cls|spec|blt)  %43.4 = LdFun              !v    <-, e1.0
  fs              %43.5 = FrameState         R     0x561662eff5b0+805: [%43.4], env=e1.0
  void                    Deopt              !v    %43.5, DeadCall@0x561660f6dae8[Call#14], %43.4   !
BB42   <- [41]
  fs              %42.0 = FrameState         R     0x561662eff5b0+742: [%41.1], env=e1.0
  void                    Deopt              !v    %42.0   !
BB20   <- [18]
  void                    Visible            v     
  void                    Assume             D     %18.5, %18.6 (Typecheck@0x561660f6dae8[Type#26])
  val?-           %20.2 = CastType           d     dn %18.4   <str$->
  lgl-            %20.3 = Eq                 vwed  %20.2, "language", elided   <lgl$->
  lgl$#-          %20.4 = IsType                   %20.3 isA lgl$-
  cp              %20.5 = Checkpoint                -> BB22 (default) | BB21 (if assume failed)
BB19   <- [18]
  fs              %19.0 = FrameState         R     0x561662eff5b0+384: [%18.4], env=e1.0
  void                    Deopt              !v    %19.0   !
BB22   <- [20]
  void                    Assume             D     %20.4, %20.5 (Typecheck@0x561660f6dae8[Type#27])
  lgl$-           %22.1 = CastType           d     dn %20.3
  lgl$#-          %22.2 = CheckTrueFalse     e     %22.1
  void                    Branch                   %22.2 -> BB28 (if true) | BB23 (if false)
BB21   <- [20]
  fs              %21.0 = FrameState         R     0x561662eff5b0+396: [%20.3], env=e1.0
  void                    Deopt              !v    %21.0   !
BB28   <- [22]
  val?^ | miss    %28.0 = LdVar              eR    flattenAssignment, e1.0
  lgl$#-          %28.1 = Identical                %28.0, function(e) <(rir::DispatchTable*)0x5616621934|...
  void                    Assume             D     %28.1, %20.5 (CallTarget@0x561660f6dae8[Call#10])
  prom-           %28.3 = MkArg                    unboundValue, osr[0x5616626aa850]_p5, e1.0
  val?            %28.4 = StaticCall         !v    flattenAssignment[0x56166417e350](%28.3) e1.0   <vec->
  void                    StVar              lW    fa, %28.4, e1.0
  val             %28.6 = ChkMissing         e     %28.4
  void                    Visible            v     
  val?+           %28.8 = ToForSeq           e     %28.4
  int$-           %28.9 = Length                   %28.8
  goto BB29
BB23   <- [22]
  goto BB24
BB29   <- [39, 28]
  int$-           %29.0 = Phi                      0L:BB28, %29.1:BB39
  int$-           %29.1 = Inc                      %29.0
  lgl$-           %29.2 = Lt                 vd    %28.9, %29.1, elided
  lgl$#-          %29.3 = Identical                %29.2, true
  void                    Branch                   %29.3 -> BB40 (if true) | BB30 (if false)
BB24   <- [23, 40]
  cp              %24.0 = Checkpoint                -> BB26 (default) | BB25 (if assume failed)
BB40   <- [29]
  goto BB24
BB30   <- [29]
  val?            %30.0 = Extract2_1D        wed   %28.8, %29.1, elided   <vec->
  void                    StVar              lW    a, %30.0, e1.0
  cp              %30.2 = Checkpoint                -> BB32 (default) | BB31 (if assume failed)
BB26   <- [24]
  val?^ | miss    %26.0 = LdVar              eR    walkCode, e1.0
  lgl$#-          %26.1 = Identical                %26.0, function(e, w=makeCodeWalker()) <(rir::Dispatc|...
  void                    Assume             D     %26.1, %24.0 (CallTarget@0x561660f6dae8[Call#13])
  prom-           %26.3 = MkArg                    unboundValue, osr[0x5616626aa850]_p3, e1.0
  prom-           %26.4 = MkArg                    unboundValue, osr[0x5616626aa850]_p4, e1.0
  val?            %26.5 = StaticCall         !     walkCode[0x561660de6140](%26.3, %26.4) e1.0   <nil->
  goto BB27
BB25   <- [24]
  fs              %25.0 = FrameState         R     0x561662eff5b0+686: [], env=e1.0
  void                    Deopt              !v    %25.0   !
BB32   <- [30]
  val             %32.0 = ChkMissing         e     %30.0
  void                    Visible            v     
  val?+           %32.2 = ToForSeq           e     %30.0
  int$-           %32.3 = Length                   %32.2
  int$-           %32.4 = Inc                      0L
  lgl$-           %32.5 = Lt                 vd    %32.3, %32.4, elided   <false>
  lgl$#-          %32.6 = Identical                %32.5, true
  void                    AssumeNot          D     %32.6, %30.2 (DeadBranchReached@0x561660f6dae8[Test#3])
  val?            %32.8 = Extract2_1D        vwed  %32.2, %32.4, elided
  void                    StVar              lW    b, %32.8, e1.0
  cp              %32.10 = Checkpoint                -> BB34 (default) | BB33 (if assume failed)
BB31   <- [30]
  fs              %31.0 = FrameState         R     0x561662eff5b0+507: [%28.8, %28.9, %29.1], env=e1.0
  void                    Deopt              !v    %31.0   !
BB34   <- [32]
  val?^ | miss    %34.0 = LdVar              eR    walkCode, e1.0
  lgl$#-          %34.1 = Identical                %34.0, function(e, w=makeCodeWalker()) <(rir::Dispatc|...
  void                    Assume             D     %34.1, %32.10 (CallTarget@0x561660f6dae8[Call#11])
  prom-           %34.3 = MkArg                    unboundValue, osr[0x5616626aa850]_p6 (!refl), e1.0
  prom-           %34.4 = MkArg                    unboundValue, osr[0x5616626aa850]_p7, e1.0
  val?            %34.5 = StaticCall         !     walkCode[0x561662e58920](%34.3, %34.4) e1.0
  goto BB35
BB33   <- [32]
  fs              %33.0 = FrameState         R     0x561662eff5b0+561: [%28.8, %28.9, %29.1, %32.2, %32.3, %32.4], env=e1.0
  void                    Deopt              !v    %33.0   !
BB35   <- [34, 38]
  int$-           %35.0 = Phi                      %32.4:BB34, %35.1:BB38
  int$-           %35.1 = Inc                      %35.0
  lgl$-           %35.2 = Lt                 vd    %32.3, %35.1, elided
  lgl$#-          %35.3 = Identical                %35.2, true
  void                    Branch                   %35.3 -> BB39 (if true) | BB36 (if false)
BB39   <- [35]
  goto BB29
BB36   <- [35]
  val?            %36.0 = Extract2_1D        vwed  %32.2, %35.1, elided
  void                    StVar              lW    b, %36.0, e1.0
  cp              %36.2 = Checkpoint                -> BB38 (default) | BB37 (if assume failed)
BB38   <- [36]
  val?^ | miss    %38.0 = LdVar              eR    walkCode, e1.0
  lgl$#-          %38.1 = Identical                %38.0, function(e, w=makeCodeWalker()) <(rir::Dispatc|...
  void                    Assume             D     %38.1, %36.2 (CallTarget@0x561660f6dae8[Call#12])
  prom-           %38.3 = MkArg                    unboundValue, osr[0x5616626aa850]_p8 (!refl), e1.0
  prom-           %38.4 = MkArg                    unboundValue, osr[0x5616626aa850]_p9, e1.0
  val?            %38.5 = StaticCall         !     walkCode[0x561662e58920](%38.3, %38.4) e1.0
  goto BB35
BB37   <- [36]
  fs              %37.0 = FrameState         R     0x561662eff5b0+628: [%28.8, %28.9, %29.1, %32.2, %32.3, %35.1], env=e1.0
  void                    Deopt              !v    %37.0   !
Prom 0:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    e, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <code->
  void                    Return             l     %1.3
Prom 1:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    w, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 2:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    e, e1.0
  val?            %1.2  = Force<wrapped>     !v    %1.1, e1.0   <code->
  val?            %1.3  = Extract2_1D        !v    %1.2, 2, e1.0   <(sym|code)->
  void                    Visible            v     
  void                    Return             l     %1.3
Prom 3:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    e, e1.0
  val?            %1.2  = Force<wrapped>     !v    %1.1, e1.0   <code->
  val?            %1.3  = Extract2_1D        !v    %1.2, 3, e1.0   <val?->
  void                    Visible            v     
  void                    Return             l     %1.3
Prom 4:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    w, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 5:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    e, e1.0
  val?            %1.2  = Force<wrapped>     !v    %1.1, e1.0   <code->
  val?            %1.3  = Extract2_1D        !v    %1.2, 2, e1.0   <code->
  void                    Visible            v     
  void                    Return             l     %1.3
Prom 6:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    b, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <(sym|code)->
  void                    Return             l     %1.3
Prom 7:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    w, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 8:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    b, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <code->
  void                    Return             l     %1.3
Prom 9:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    w, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 10:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    v, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 11:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    e, e1.0
  val?            %1.2  = Force<wrapped>     !v    %1.1, e1.0   <code->
  val?            %1.3  = Extract2_1D        !v    %1.2, 3, e1.0   <code->
  val?            %1.4  = Extract2_1D        !v    %1.3, 2, e1.0   <list->
  void                    Visible            v     
  void                    Return             l     %1.4
Prom 12:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    e, e1.0
  val?            %1.2  = Force<wrapped>     !v    %1.1, e1.0   <code->
  val?            %1.3  = Extract2_1D        !v    %1.2, 3, e1.0   <code->
  val?            %1.4  = Extract2_1D        !v    %1.3, 3, e1.0   <code->
  void                    Visible            v     
  void                    Return             l     %1.4
Prom 13:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    w, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 14:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    e, e1.0
  val?            %1.2  = Force<lazy>        !v    %1.1, e1.0   <code->
  val?            %1.3  = Extract2_1D        !v    %1.2, 2, e1.0   <(sym|code)->
  void                    Visible            v     
  void                    Return             l     %1.3
Prom 15:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    e, e1.0
  val?            %1.2  = Force<wrapped>     !v    %1.1, e1.0   <code->
  val?            %1.3  = Extract2_1D        !v    %1.2, 3, e1.0   <val?->
  void                    Visible            v     
  void                    Return             l     %1.3

│ osr[0x5616626aa850]                                                          │
└──────────────────────────────────────────────────────────────────────────────┘
