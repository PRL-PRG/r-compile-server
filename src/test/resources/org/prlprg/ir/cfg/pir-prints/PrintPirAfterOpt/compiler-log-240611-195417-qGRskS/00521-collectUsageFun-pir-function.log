
┌──────────────────────────────────────────────────────────────────────────────┐
│ collectUsageFun[0x561663c86a90]                                              │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch                                      │
│ Properties:                                                                  │
├────── PIR Version After Optimizations
collectUsageFun[0x561663c86a90]
BB0
  goto BB1
BB1   <- [0]
  val?^           %1.0  = LdArg                    3
  val?^           %1.1  = LdArg                    2
  val?^           %1.2  = LdArg                    1
  val?^           %1.3  = LdArg                    0
  env             e1.4  = MkEnv              l     name=%1.3, formals=%1.2, body=%1.1, w=%1.0, parent=<env 0x56166328f230>, context 1
  (cls|spec|blt)  %1.5  = LdFun              !v    <-, <0x561660cb1da8>, <env 0x56166328f230>
  prom-           %1.6  = MkArg                    unboundValue, collectUsageFun[0x561663c86a90]_p0, e1.4
  prom-           %1.7  = MkArg                    unboundValue, collectUsageFun[0x561663c86a90]_p3, e1.4
  val?            %1.8  = Call               !v    %1.5(%1.6, %1.7) e1.4
  cp              %1.9  = Checkpoint                -> BB2 (default) | BB59 (if assume failed)
BB2   <- [1]
  val?^ | miss    %2.0  = LdVar              eR    names, e1.4
  lgl$#-          %2.1  = Identical                <blt names>, %2.0   <true>
  void                    Assume             D     %2.1, %1.9 (DeadBranchReached@0x5616634a7ce0[Test#0])
  val?^ | miss    %2.3  = LdVar              eR    formals, e1.4
  val?            %2.4  = Force!<lazy>       !v    %2.3, e1.4   <list->
  lgl$#-          %2.5  = IsType                   %2.4 isA val?-
  cp              %2.6  = Checkpoint                -> BB4 (default) | BB3 (if assume failed)
BB59   <- [1]
  fs              %59.0 = FrameState         R     0x5616635e0e80+37: [%1.8], env=e1.4
  void                    Deopt              !v    %59.0   !
BB4   <- [2]
  void                    Assume             D     %2.5, %2.6 (Typecheck@0x5616634a7ce0[Type#9])
  val?-           %4.1  = CastType           d     dn %2.4   <list->
  val+            %4.2  = CallSafeBuiltin    wed   names(%4.1)    <str->
  void                    StVar              lW    parnames, %4.2, e1.4
  cp              %4.4  = Checkpoint                -> BB6 (default) | BB5 (if assume failed)
BB3   <- [2]
  fs              %3.0  = FrameState         R     0x5616635e0e80+107: [<blt names>, %2.4], env=e1.4
  void                    Deopt              !v    %3.0   !
BB6   <- [4]
  val?^ | miss    %6.0  = LdVar              eR    findFuncLocals, e1.4
  lgl$#-          %6.1  = Identical                %6.0, function(formals, body) <(rir::DispatchTable*)|...
  void                    Assume             D     %6.1, %4.4 (CallTarget@0x5616634a7ce0[Call#5])
  prom-           %6.3  = MkArg                    unboundValue, collectUsageFun[0x561663c86a90]_p8, e1.4
  prom-           %6.4  = MkArg                    unboundValue, collectUsageFun[0x561663c86a90]_p9, e1.4
  ct              %6.5  = PushContext        lCL   %6.3, %6.4, findFuncLocals(formals, body), function(formals, body) <(rir::DispatchTable*)|..., e1.4
  val?^           %6.6  = CastType                 up %6.4
  val?^           %6.7  = CastType                 up %6.3
  cp              %6.8  = Checkpoint                -> BB8 (default) | BB7 (if assume failed)
BB5   <- [4]
  fs              %5.0  = FrameState         R     0x5616635e0e80+143: [], env=e1.4
  void                    Deopt              !v    %5.0   !
BB8   <- [6]
  env             e8.0  = MkEnv              l     formals=%6.7, body=%6.6, parent=<env 0x56166328f230>, context 1
  val?^ | miss    %8.1  = LdVar              eR    findLocalsList, e8.0
  lgl$#-          %8.2  = Identical                %8.1, function(elist, envir=.BaseEnv) <(rir::Dispatc|...
  void                    Assume             D     %8.2, %6.8 (CallTarget@0x561663770b28[Call#0])
  prom-           %8.4  = MkArg                    unboundValue, collectUsageFun[0x561663c86a90]_p40, e8.0
  val?            %8.5  = StaticCall         !v    findLocalsList[0x561661840490](%8.4) e8.0   <str->
  val?            %8.6  = PopContext         C     %8.5, %6.5   <str->
  void                    StVar              lW    locals, %8.6, e1.4
  (cls|spec|blt)  %8.8  = LdFun              !v    <-, <0x561660cb1da8>, e1.4
  prom-           %8.9  = MkArg                    unboundValue, collectUsageFun[0x561663c86a90]_p10, e1.4
  prom-           %8.10 = MkArg                    unboundValue, collectUsageFun[0x561663c86a90]_p13, e1.4
  val?            %8.11 = Call               !v    %8.8(%8.9, %8.10) e1.4
  cp              %8.12 = Checkpoint                -> BB10 (default) | BB9 (if assume failed)
BB7   <- [6]
  fs              %7.0  = FrameState         R     0x5616635e0e80+180: [], env=e1.4
  env             e7.1  = (MkEnv)            l     formals=%6.7, body=%6.6, parent=<env 0x56166328f230>, context 1
  fs              %7.2  = FrameState         R     0x5616635c1540+0: [], env=e7.1, next=%7.0
  void                    Deopt              !v    %7.2   !
BB10   <- [8]
  val?^ | miss    %10.0 = LdVar              eR    c, e1.4
  lgl$#-          %10.1 = Identical                <blt c>, %10.0   <true>
  void                    Assume             D     %10.1, %8.12 (DeadBranchReached@0x5616634a7ce0[Test#1])
  val?^ | miss    %10.3 = LdVar              eR    parnames, e1.4
  lgl$#-          %10.4 = IsType                   %10.3 isA val?~- | miss
  void                    Assume             D     %10.4, %8.12 (Typecheck@0x5616634a7ce0[Type#23])
  val?~- | miss   %10.6 = CastType           d     dn %10.3
  val?-           %10.7 = Force!<value>            %10.6,    <str->
  val?^ | miss    %10.8 = LdVar              eR    locals, e1.4
  lgl$#-          %10.9 = IsType                   %10.8 isA val?~- | miss
  void                    Assume             D     %10.9, %8.12 (Typecheck@0x5616634a7ce0[Type#24])
  val?~- | miss   %10.11 = CastType           d     dn %10.8
  val?-           %10.12 = Force!<value>            %10.11,    <str->
  val+            %10.13 = CallSafeBuiltin    wed   c(%10.7, %10.12)    <str->
  int$-           %10.14 = Length                   %10.13
  cp              %10.15 = Checkpoint                -> BB12 (default) | BB11 (if assume failed)
BB9   <- [8]
  fs              %9.0  = FrameState         R     0x5616635e0e80+231: [%8.11], env=e1.4
  void                    Deopt              !v    %9.0   !
BB12   <- [10]
  int$-           %12.0 = Inc                      0L
  lgl$-           %12.1 = Lt                 d     %10.14, %12.0, elided   <false>
  lgl$#-          %12.2 = Identical                %12.1, true
  void                    AssumeNot          D     %12.2, %10.15 (DeadBranchReached@0x5616634a7ce0[Test#2])
  val?            %12.4 = Extract2_1D        wed   %10.13, %12.0, elided
  void                    StVar              lW    n, %12.4, e1.4
  cp              %12.6 = Checkpoint                -> BB14 (default) | BB13 (if assume failed)
BB11   <- [10]
  fs              %11.0 = FrameState         R     0x5616635e0e80+342: [%10.13], env=e1.4
  void                    Deopt              !v    %11.0   !
BB14   <- [12]
  val?^ | miss    %14.0 = LdVar              eR    assign, e1.4
  lgl$#-          %14.1 = Identical                %14.0, function(x, value, pos=-(1), envir=as.environm|...
  void                    Assume             D     %14.1, %12.6 (CallTarget@0x5616634a7ce0[Call#11])
  prom-           %14.3 = MkArg                    unboundValue, collectUsageFun[0x561663c86a90]_p17 (!refl), e1.4
  prom-           %14.4 = MkArg                    unboundValue, collectUsageFun[0x561663c86a90]_p18, e1.4
  val?            %14.5 = StaticCall         !v    assign[0x561664d06560](%14.3, true, %14.4) e1.4
  goto BB15
BB13   <- [12]
  fs              %13.0 = FrameState         R     0x5616635e0e80+387: [%10.13, %10.14, %12.0], env=e1.4
  void                    Deopt              !v    %13.0   !
BB15   <- [14, 18]
  int$-           %15.0 = Phi                      %12.0:BB14, %15.1:BB18
  int$-           %15.1 = Inc                      %15.0
  lgl$-           %15.2 = Lt                 d     %10.14, %15.1, elided
  lgl$#-          %15.3 = Identical                %15.2, true
  void                    Branch                   %15.3 -> BB19 (if true) | BB16 (if false)
BB19   <- [15]
  (cls|spec|blt)  %19.0 = LdFun              !v    $, <0x561660cbcc10>, e1.4
  prom-           %19.1 = MkArg                    unboundValue, collectUsageFun[0x561663c86a90]_p25, e1.4
  prom-           %19.2 = MkArg                    unboundValue, collectUsageFun[0x561663c86a90]_p26, e1.4
  val?            %19.3 = Call               !v    %19.0(%19.1, %19.2) e1.4   <cls->
  cp              %19.4 = Checkpoint                -> BB21 (default) | BB20 (if assume failed)
BB16   <- [15]
  val?            %16.0 = Extract2_1D        wed   %10.13, %15.1, elided
  void                    StVar              lW    n, %16.0, e1.4
  cp              %16.2 = Checkpoint                -> BB18 (default) | BB17 (if assume failed)
BB21   <- [19]
  (cls|spec|blt)  %21.0 = ChkFunction        e     %19.3
  prom-           %21.1 = MkArg                    unboundValue, collectUsageFun[0x561663c86a90]_p27, e1.4
  prom-           %21.2 = MkArg                    unboundValue, collectUsageFun[0x561663c86a90]_p28, e1.4
  prom-           %21.3 = MkArg                    unboundValue, collectUsageFun[0x561663c86a90]_p29, e1.4
  lgl$#-          %21.4 = Identical                %21.0, function(parnames, locals, w) <(rir::DispatchT|...
  void                    Assume             D     %21.4, %19.4 (CallTarget@0x5616634a7ce0[Call#16])
  val?            %21.6 = StaticCall         !v    [0x561663ab8790](%21.1, %21.2, %21.3) e1.4
  cp              %21.7 = Checkpoint                -> BB23 (default) | BB22 (if assume failed)
BB20   <- [19]
  fs              %20.0 = FrameState         R     0x5616635e0e80+549: [%19.3], env=e1.4
  void                    Deopt              !v    %20.0   !
BB18   <- [16]
  val?^ | miss    %18.0 = LdVar              eR    assign, e1.4
  lgl$#-          %18.1 = Identical                %18.0, function(x, value, pos=-(1), envir=as.environm|...
  void                    Assume             D     %18.1, %16.2 (CallTarget@0x5616634a7ce0[Call#13])
  prom-           %18.3 = MkArg                    unboundValue, collectUsageFun[0x561663c86a90]_p21 (!refl), e1.4
  prom-           %18.4 = MkArg                    unboundValue, collectUsageFun[0x561663c86a90]_p22, e1.4
  val?            %18.5 = StaticCall         !v    assign[0x561664d06560](%18.3, true, %18.4) e1.4
  goto BB15
BB17   <- [16]
  fs              %17.0 = FrameState         R     0x5616635e0e80+459: [%10.13, %10.14, %15.1], env=e1.4
  void                    Deopt              !v    %17.0   !
BB23   <- [21]
  val?^ | miss    %23.0 = LdVar              eR    dropMissings, e1.4
  lgl$#-          %23.1 = Identical                %23.0, function(x) <(rir::DispatchTable*)0x5616634d6f|...
  void                    Assume             D     %23.1, %21.7 (CallTarget@0x5616634a7ce0[Call#17])
  prom-           %23.3 = MkArg                    unboundValue, collectUsageFun[0x561663c86a90]_p30, e1.4
  ct              %23.4 = PushContext        lCL   %23.3, dropMissings(formals), function(x) <(rir::DispatchTable*)0x5616634d6f|..., e1.4
  val?^           %23.5 = CastType                 up %23.3
  val?^ | miss    %23.6 = LdVar              eR    as.list, <env 0x56166328f230>
  lgl$#-          %23.7 = Identical                %23.6, function(x, ...) <(rir::DispatchTable*)0x56166|...
  void                    Assume             D     %23.7, %21.7 (CallTarget@0x56166194ac28[Call#0])
  env             e23.9 = MkEnv              l     x=%23.5, parent=<env 0x56166328f230>, context 1
  val?            %23.10 = Force!<lazy>       !vL   %23.5, e23.9   <val?->
  val?            %23.11 = StaticCall         !v    as.list[0x561663628ad0](%23.10) { 0 } e23.9   <vec+>
  void                    StVar              lW    lx, %23.11, e23.9
  (cls|spec|blt)  %23.13 = LdFun              !v    rep, <0x561660cd19b0>, e23.9
  prom-           %23.14 = MkArg                    unboundValue, collectUsageFun[0x561663c86a90]_p45, e23.9
  val?            %23.15 = Call               !v    %23.13(true, %23.14) e23.9   <lgl->
  void                    StVar              lW    ix, %23.15, e23.9
  cp              %23.17 = Checkpoint                -> BB25 (default) | BB24 (if assume failed)
BB22   <- [21]
  fs              %22.0 = FrameState         R     0x5616635e0e80+592: [%21.6], env=e1.4
  void                    Deopt              !v    %22.0   !
BB25   <- [23]
  val?^ | miss    %25.0 = LdVar              eR    seq_along, e23.9
  lgl$#-          %25.1 = Identical                <blt seq_along>, %25.0   <true>
  void                    Assume             D     %25.1, %23.17 (DeadBranchReached@0x56166194ac28[Test#0])
  val             %25.3 = ChkMissing         e     %23.15
  val?            %25.4 = CallBuiltin        !v    seq_along(%23.15) e23.9   <int->
  val?+           %25.5 = ToForSeq           e     %25.4
  int$-           %25.6 = Length                   %25.5
  lgl$-           %25.7 = Lt                 d     %25.6, %12.0, elided
  lgl$#-          %25.8 = Identical                %25.7, true
  void                    Branch                   %25.8 -> BB58 (if true) | BB26 (if false)
BB24   <- [23]
  fs              %24.0 = FrameState         R     0x5616635e0e80+625: [], env=e1.4
  fs              %24.1 = FrameState         R     0x561663afa0d0+97: [], env=e23.9, next=%24.0
  void                    Deopt              !v    %24.1   !
BB58   <- [25]
  goto BB42
BB26   <- [25]
  val?            %26.0 = Extract2_1D        wed   %25.5, %12.0, elided
  void                    StVar              lW    i, %26.0, e23.9
  cp              %26.2 = Checkpoint                -> BB28 (default) | BB27 (if assume failed)
BB42   <- [58, 41]
  int$-           %42.0 = Phi                      %32.1:BB41, %12.0:BB58
  cp              %42.1 = Checkpoint                -> BB44 (default) | BB43 (if assume failed)
BB28   <- [26]
  val?^ | miss    %28.0 = LdVar              eR    lx, e23.9
  lgl$#-          %28.1 = IsType                   %28.0 isA val?~+ | miss
  void                    Assume             D     %28.1, %26.2 (Typecheck@0x56166194ac28[Type#8])
  val?~+ | miss   %28.3 = CastType           d     dn %28.0
  val?+           %28.4 = Force!<value>            %28.3,    <vec+>
  lgl$#-          %28.5 = IsType                   %28.4 isA val+   <true>
  void                    Assume             D     %28.5, %26.2 (DeadBranchReached@0x56166194ac28[Test#2])
  val             %28.7 = ChkMissing         e     %26.0
  lgl$#-          %28.8 = IsType                   %28.7 isA int$-
  void                    Assume             D     %28.8, %26.2 (Typecheck@0x56166194ac28[Type#10])
  int$-           %28.10 = CastType           d     dn %28.7
  val?            %28.11 = Extract2_1D        wed   %28.4, %28.10, elided   <val?->
  void                    StVar              lW    a, %28.11, e23.9
  cp              %28.13 = Checkpoint                -> BB30 (default) | BB29 (if assume failed)
BB27   <- [26]
  fs              %27.0 = FrameState         R     0x5616635e0e80+625: [], env=e1.4
  fs              %27.1 = FrameState         R     0x561663afa0d0+233: [%25.5, %25.6, %12.0], env=e23.9, next=%27.0
  void                    Deopt              !v    %27.1   !
BB44   <- [42]
  val?^ | miss    %44.0 = LdVar              eR    lx, e23.9
  lgl$#-          %44.1 = IsType                   %44.0 isA val?~+ | miss
  void                    Assume             D     %44.1, %42.1 (Typecheck@0x56166194ac28[Type#20])
  val?~+ | miss   %44.3 = CastType           d     dn %44.0
  val?+           %44.4 = Force!<value>            %44.3,    <vec+>
  lgl$#-          %44.5 = IsType                   %44.4 isA val+   <true>
  void                    Assume             D     %44.5, %42.1 (DeadBranchReached@0x56166194ac28[Test#4])
  val?^ | miss    %44.7 = LdVar              eR    ix, e23.9
  lgl$#-          %44.8 = IsType                   %44.7 isA lgl-
  void                    Assume             D     %44.8, %42.1 (Typecheck@0x56166194ac28[Type#22])
  lgl-            %44.10 = CastType           d     dn %44.7
  val?            %44.11 = Extract1_1D        wed   %44.4, %44.10, elided   <vec+>
  void                    Visible            v     
  val?            %44.13 = PopContext         C     %44.11, %23.4   <vec+>
  val?+           %44.14 = ToForSeq           e     %44.13
  int$-           %44.15 = Length                   %44.14
  lgl$-           %44.16 = Lt                 vd    %44.15, %12.0, elided
  lgl$#-          %44.17 = Identical                %44.16, true
  void                    Branch                   %44.17 -> BB56 (if true) | BB45 (if false)
BB43   <- [42]
  fs              %43.0 = FrameState         R     0x5616635e0e80+625: [], env=e1.4
  fs              %43.1 = FrameState         R     0x561663afa0d0+539: [%25.5, %25.6, %42.0], env=e23.9, next=%43.0
  void                    Deopt              !v    %43.1   !
BB30   <- [28]
  lgl$-           %30.0 = Missing            eR    a, e23.9
  lgl$#-          %30.1 = CheckTrueFalse     e     %30.0
  void                    Branch                   %30.1 -> BB57 (if true) | BB31 (if false)
BB29   <- [28]
  fs              %29.0 = FrameState         R     0x5616635e0e80+625: [], env=e1.4
  fs              %29.1 = FrameState         R     0x561663afa0d0+308: [%25.5, %25.6, %12.0], env=e23.9, next=%29.0
  void                    Deopt              !v    %29.1   !
BB56   <- [44]
  goto BB53
BB45   <- [44]
  val?            %45.0 = Extract2_1D        vwed  %44.14, %12.0, elided
  void                    StVar              lW    a, %45.0, e1.4
  cp              %45.2 = Checkpoint                -> BB47 (default) | BB46 (if assume failed)
BB57   <- [30]
  val?^ | miss    %57.0 = LdVar              eR    ix !upd, e23.9
  lgl$#-          %57.1 = IsType                   %57.0 isA lgl-
  void                    Assume             D     %57.1, %28.13 (Typecheck@0x56166194ac28[Type#12])
  lgl-            %57.3 = CastType           d     dn %57.0
  lgl-            %57.4 = Subassign1_1D      wed   false, %57.3, %28.10, elided
  void                    StVar              lW    ix, %57.4, e23.9
  goto BB32
BB31   <- [30]
  goto BB32
BB53   <- [52, 56]
  int$-           %53.0 = Phi                      %48.1:BB52, %12.0:BB56
  cp              %53.1 = Checkpoint                -> BB55 (default) | BB54 (if assume failed)
BB47   <- [45]
  val?^ | miss    %47.0 = LdVar              eR    walkCode, e1.4
  lgl$#-          %47.1 = Identical                %47.0, function(e, w=makeCodeWalker()) <(rir::Dispatc|...
  void                    Assume             D     %47.1, %45.2 (CallTarget@0x5616634a7ce0[Call#18])
  prom-           %47.3 = MkArg                    unboundValue, collectUsageFun[0x561663c86a90]_p31 (!refl), e1.4
  prom-           %47.4 = MkArg                    unboundValue, collectUsageFun[0x561663c86a90]_p32, e1.4
  val?            %47.5 = StaticCall         !     walkCode[0x561662e58920](%47.3, %47.4) e1.4
  goto BB48
BB46   <- [45]
  fs              %46.0 = FrameState         R     0x5616635e0e80+670: [%44.14, %44.15, %12.0], env=e1.4
  void                    Deopt              !v    %46.0   !
BB32   <- [31, 57, 39]
  int$-           %32.0 = Phi                      %12.0:BB31, %32.1:BB39, %12.0:BB57
  int$-           %32.1 = Inc                      %32.0
  lgl$-           %32.2 = Lt                 d     %25.6, %32.1, elided
  lgl$#-          %32.3 = Identical                %32.2, true
  void                    Branch                   %32.3 -> BB41 (if true) | BB33 (if false)
BB55   <- [53]
  val?^ | miss    %55.0 = LdVar              eR    walkCode, e1.4
  lgl$#-          %55.1 = Identical                %55.0, function(e, w=makeCodeWalker()) <(rir::Dispatc|...
  void                    Assume             D     %55.1, %53.1 (CallTarget@0x5616634a7ce0[Call#20])
  prom-           %55.3 = MkArg                    unboundValue, collectUsageFun[0x561663c86a90]_p35, e1.4
  prom-           %55.4 = MkArg                    unboundValue, collectUsageFun[0x561663c86a90]_p36, e1.4
  val?            %55.5 = StaticCall         !     walkCode[0x561660de6140](%55.3, %55.4) e1.4
  (cls|spec|blt)  %55.6 = LdFun              !     $, <0x561660cbcc10>, e1.4
  prom-           %55.7 = MkArg                    unboundValue, collectUsageFun[0x561663c86a90]_p37, e1.4
  prom-           %55.8 = MkArg                    unboundValue, collectUsageFun[0x561663c86a90]_p38, e1.4
  val?            %55.9 = Call               !     %55.6(%55.7, %55.8) e1.4   <cls->
  (cls|spec|blt)  %55.10 = ChkFunction        e     %55.9
  prom-           %55.11 = MkArg                    unboundValue, collectUsageFun[0x561663c86a90]_p39, e1.4
  val?            %55.12 = Call               !     %55.10(%55.11) e1.4   <nil->
  void                    Return             l     %55.12
BB54   <- [53]
  fs              %54.0 = FrameState         R     0x5616635e0e80+780: [%44.14, %44.15, %53.0], env=e1.4
  void                    Deopt              !v    %54.0   !
BB48   <- [47, 51]
  int$-           %48.0 = Phi                      %12.0:BB47, %48.1:BB51
  int$-           %48.1 = Inc                      %48.0
  lgl$-           %48.2 = Lt                 vd    %44.15, %48.1, elided
  lgl$#-          %48.3 = Identical                %48.2, true
  void                    Branch                   %48.3 -> BB52 (if true) | BB49 (if false)
BB41   <- [32]
  goto BB42
BB33   <- [32]
  val?            %33.0 = Extract2_1D        wed   %25.5, %32.1, elided
  void                    StVar              lW    i, %33.0, e23.9
  cp              %33.2 = Checkpoint                -> BB35 (default) | BB34 (if assume failed)
BB52   <- [48]
  goto BB53
BB49   <- [48]
  val?            %49.0 = Extract2_1D        vwed  %44.14, %48.1, elided
  void                    StVar              lW    a, %49.0, e1.4
  cp              %49.2 = Checkpoint                -> BB51 (default) | BB50 (if assume failed)
BB35   <- [33]
  val             %35.0 = ChkMissing         e     %33.0
  lgl$#-          %35.1 = IsType                   %35.0 isA int$-
  void                    Assume             D     %35.1, %33.2 (Typecheck@0x56166194ac28[Type#16])
  int$-           %35.3 = CastType           d     dn %35.0
  val?            %35.4 = Extract2_1D        wed   %28.4, %35.3, elided   <val?->
  void                    StVar              lW    a, %35.4, e23.9
  cp              %35.6 = Checkpoint                -> BB37 (default) | BB36 (if assume failed)
BB34   <- [33]
  fs              %34.0 = FrameState         R     0x5616635e0e80+625: [], env=e1.4
  fs              %34.1 = FrameState         R     0x561663afa0d0+398: [%25.5, %25.6, %32.1], env=e23.9, next=%34.0
  void                    Deopt              !v    %34.1   !
BB51   <- [49]
  val?^ | miss    %51.0 = LdVar              eR    walkCode, e1.4
  lgl$#-          %51.1 = Identical                %51.0, function(e, w=makeCodeWalker()) <(rir::Dispatc|...
  void                    Assume             D     %51.1, %49.2 (CallTarget@0x5616634a7ce0[Call#19])
  prom-           %51.3 = MkArg                    unboundValue, collectUsageFun[0x561663c86a90]_p33 (!refl), e1.4
  prom-           %51.4 = MkArg                    unboundValue, collectUsageFun[0x561663c86a90]_p34, e1.4
  val?            %51.5 = StaticCall         !     walkCode[0x561662e58920](%51.3, %51.4) e1.4
  goto BB48
BB50   <- [49]
  fs              %50.0 = FrameState         R     0x5616635e0e80+737: [%44.14, %44.15, %48.1], env=e1.4
  void                    Deopt              !v    %50.0   !
BB37   <- [35]
  lgl$-           %37.0 = Missing            eR    a, e23.9
  lgl$#-          %37.1 = CheckTrueFalse     e     %37.0
  void                    Branch                   %37.1 -> BB40 (if true) | BB38 (if false)
BB36   <- [35]
  fs              %36.0 = FrameState         R     0x5616635e0e80+625: [], env=e1.4
  fs              %36.1 = FrameState         R     0x561663afa0d0+473: [%25.5, %25.6, %32.1], env=e23.9, next=%36.0
  void                    Deopt              !v    %36.1   !
BB40   <- [37]
  val?^ | miss    %40.0 = LdVar              eR    ix !upd, e23.9
  lgl$#-          %40.1 = IsType                   %40.0 isA lgl-
  void                    Assume             D     %40.1, %35.6 (Typecheck@0x56166194ac28[Type#18])
  lgl-            %40.3 = CastType           d     dn %40.0
  val             %40.4 = ChkMissing         e     %33.0
  lgl$#-          %40.5 = IsType                   %40.4 isA int$-
  void                    Assume             D     %40.5, %35.6 (Typecheck@0x56166194ac28[Type#19])
  int$-           %40.7 = CastType           d     dn %40.4
  lgl-            %40.8 = Subassign1_1D      wed   false, %40.3, %40.7, elided
  void                    StVar              lW    ix, %40.8, e23.9
  goto BB39
BB38   <- [37]
  goto BB39
BB39   <- [38, 40]
  goto BB32
Prom 0:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     $, e1.0
  prom-           %1.2  = MkArg                    unboundValue, collectUsageFun[0x561663c86a90]_p1, e1.0
  prom-           %1.3  = MkArg                    unboundValue, collectUsageFun[0x561663c86a90]_p2, e1.0
  val?            %1.4  = Call               !     %1.1(%1.2, %1.3) e1.0   <val?_>
  void                    Return             l     %1.4
Prom 1:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    w, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 2:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    name, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 3:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     c, e1.0
  prom-           %1.2  = MkArg                    unboundValue, collectUsageFun[0x561663c86a90]_p4, e1.0
  prom-           %1.3  = MkArg                    unboundValue, collectUsageFun[0x561663c86a90]_p7, e1.0
  val?            %1.4  = Call               !     %1.1(%1.2, %1.3) e1.0   <val?_>
  void                    Return             l     %1.4
Prom 4:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     $, e1.0
  prom-           %1.2  = MkArg                    unboundValue, collectUsageFun[0x561663c86a90]_p5, e1.0
  prom-           %1.3  = MkArg                    unboundValue, collectUsageFun[0x561663c86a90]_p6, e1.0
  val?            %1.4  = Call               !     %1.1(%1.2, %1.3) e1.0   <val?_>
  void                    Return             l     %1.4
Prom 5:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    w, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 6:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    name, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 7:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    name, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 8:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    formals, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <list->
  void                    Return             l     %1.3
Prom 9:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    body, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <(sym|code)->
  void                    Return             l     %1.3
Prom 10:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     $, e1.0
  prom-           %1.2  = MkArg                    unboundValue, collectUsageFun[0x561663c86a90]_p11, e1.0
  prom-           %1.3  = MkArg                    unboundValue, collectUsageFun[0x561663c86a90]_p12, e1.0
  val?            %1.4  = Call               !     %1.1(%1.2, %1.3) e1.0   <val?_>
  void                    Return             l     %1.4
Prom 11:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    w, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 12:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    env, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 13:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     new.env, e1.0
  prom-           %1.2  = MkArg                    unboundValue, collectUsageFun[0x561663c86a90]_p14, e1.0
  val?            %1.3  = NamedCall          !     %1.1(hash=true, parent=%1.2) e1.0   <val?_>
  void                    Return             l     %1.3
Prom 14:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     $, e1.0
  prom-           %1.2  = MkArg                    unboundValue, collectUsageFun[0x561663c86a90]_p15, e1.0
  prom-           %1.3  = MkArg                    unboundValue, collectUsageFun[0x561663c86a90]_p16, e1.0
  val?            %1.4  = Call               !     %1.1(%1.2, %1.3) e1.0   <val?_>
  void                    Return             l     %1.4
Prom 15:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    w, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 16:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    env, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 17:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    n, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 18:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     $, <0x561660cbcc10>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, collectUsageFun[0x561663c86a90]_p19, e1.0
  prom-           %1.3  = MkArg                    unboundValue, collectUsageFun[0x561663c86a90]_p20, e1.0
  val?            %1.4  = Call               !     %1.1(%1.2, %1.3) e1.0   <env->
  void                    Return             l     %1.4
Prom 19:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    w, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 20:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    env, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 21:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    n, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 22:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     $, <0x561660cbcc10>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, collectUsageFun[0x561663c86a90]_p23, e1.0
  prom-           %1.3  = MkArg                    unboundValue, collectUsageFun[0x561663c86a90]_p24, e1.0
  val?            %1.4  = Call               !     %1.1(%1.2, %1.3) e1.0   <env->
  void                    Return             l     %1.4
Prom 23:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    w, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 24:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    env, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 25:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    w, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 26:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    startCollectLocals, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 27:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    parnames, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str->
  void                    Return             l     %1.3
Prom 28:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    locals, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str->
  void                    Return             l     %1.3
Prom 29:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    w, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 30:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    formals, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <list->
  void                    Return             l     %1.3
Prom 31:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    a, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <val?->
  void                    Return             l     %1.3
Prom 32:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    w, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 33:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    a, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <(nil|lgl)->
  void                    Return             l     %1.3
Prom 34:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    w, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 35:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    body, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <(sym|code)->
  void                    Return             l     %1.3
Prom 36:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    w, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 37:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    w, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 38:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    finishCollectLocals, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 39:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    w, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 40:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     c, <0x561660cbd940>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, collectUsageFun[0x561663c86a90]_p41, e1.0
  prom-           %1.3  = MkArg                    unboundValue, collectUsageFun[0x561663c86a90]_p43, e1.0
  val?            %1.4  = Call               !     %1.1(%1.2, %1.3) e1.0   <vec+>
  void                    Return             l     %1.4
Prom 41:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     list, <0x561660cd15c0>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, collectUsageFun[0x561663c86a90]_p42, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <vec$->
  void                    Return             l     %1.3
Prom 42:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    body, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <(sym|code)->
  void                    Return             l     %1.3
Prom 43:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     dropMissings, <0x5616633caf50>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, collectUsageFun[0x561663c86a90]_p44, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <vec+>
  void                    Return             l     %1.3
Prom 44:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    formals, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <list->
  void                    Return             l     %1.3
Prom 45:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     length, e1.0
  prom-           %1.2  = MkArg                    unboundValue, collectUsageFun[0x561663c86a90]_p46, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <val?_>
  void                    Return             l     %1.3
Prom 46:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    x, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3

│ collectUsageFun[0x561663c86a90]                                              │
└──────────────────────────────────────────────────────────────────────────────┘
