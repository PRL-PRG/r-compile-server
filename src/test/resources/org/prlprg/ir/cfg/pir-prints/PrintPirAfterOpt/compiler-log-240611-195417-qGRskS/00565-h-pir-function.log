
┌──────────────────────────────────────────────────────────────────────────────┐
│ h[0x5616645f14b0]                                                            │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;NonRefl0,NonRefl1,!Obj0,!Obj1        │
│ Properties:                                                                  │
├────── PIR Version After Optimizations
h[0x5616645f14b0]
BB0
  goto BB1
BB1   <- [0]
  val?^           %1.0  = LdArg                    1
  val?^           %1.1  = LdArg                    0
  env             e1.2  = MkEnv              l     e=%1.1, w=%1.0, parent=<env 0x561663563620>, context 1
  (cls|spec|blt)  %1.3  = LdFun              !v    $, <0x561660cbcc10>, <env 0x561663563620>
  prom-           %1.4  = MkArg                    unboundValue, h[0x5616645f14b0]_p0 (!refl), e1.2
  prom-           %1.5  = MkArg                    unboundValue, h[0x5616645f14b0]_p1, e1.2
  val?            %1.6  = Call               !v    %1.3(%1.4, %1.5) e1.2   <cls->
  cp              %1.7  = Checkpoint                -> BB2 (default) | BB82 (if assume failed)
BB2   <- [1]
  (cls|spec|blt)  %2.0  = ChkFunction        e     %1.6
  prom-           %2.1  = MkArg                    unboundValue, h[0x5616645f14b0]_p2, e1.2
  prom-           %2.2  = MkArg                    unboundValue, h[0x5616645f14b0]_p4, e1.2
  prom-           %2.3  = MkArg                    unboundValue, h[0x5616645f14b0]_p5, e1.2
  lgl$#-          %2.4  = Identical                %2.0, function(type, n, e, w) <(rir::DispatchTable*)|...
  void                    Assume             D     %2.4, %1.7 (CallTarget@0x561660f6dae8[Call#1])
  val?            %2.6  = StaticCall         !v    [0x5616638ed810]("function", %2.1, %2.2, %2.3) e1.2
  cp              %2.7  = Checkpoint                -> BB4 (default) | BB3 (if assume failed)
BB82   <- [1]
  fs              %82.0 = FrameState         R     0x561662eff5b0+37: [%1.6], env=e1.2
  void                    Deopt              !v    %82.0   !
BB4   <- [2]
  val?^ | miss    %4.0  = LdVar              eR    getAssignedVar, e1.2
  lgl$#-          %4.1  = Identical                %4.0, function(e) <(rir::DispatchTable*)0x561663405b|...
  void                    Assume             D     %4.1, %2.7 (CallTarget@0x561660f6dae8[Call#3])
  val?^ | miss    %4.3  = LdVar              eR    e, e1.2
  val?            %4.4  = Force!<wrapped>    !v    %4.3, e1.2   <code->
  prom-           %4.5  = MkArg                    %4.4, h[0x5616645f14b0]_p6 (!refl), 
  val?            %4.6  = StaticCall         !v    getAssignedVar[0x561663441010](%4.5) e1.2   <str$->
  void                    StVar              lW    v, %4.6, e1.2
  cp              %4.8  = Checkpoint                -> BB6 (default) | BB5 (if assume failed)
BB3   <- [2]
  fs              %3.0  = FrameState         R     0x561662eff5b0+85: [%2.6], env=e1.2
  void                    Deopt              !v    %3.0   !
BB6   <- [4]
  val?^ | miss    %6.0  = LdVar              eR    checkDotsAssignVar, e1.2
  lgl$#-          %6.1  = Identical                %6.0, function(v, w) <(rir::DispatchTable*)0x5616638|...
  void                    Assume             D     %6.1, %4.8 (CallTarget@0x561660f6dae8[Call#4])
  prom-           %6.3  = MkArg                    unboundValue, h[0x5616645f14b0]_p7 (!refl), e1.2
  prom-           %6.4  = MkArg                    unboundValue, h[0x5616645f14b0]_p8, e1.2
  ct              %6.5  = PushContext        lCL   %6.3, %6.4, checkDotsAssignVar(v, w), function(v, w) <(rir::DispatchTable*)0x5616638|..., e1.2
  val?^           %6.6  = CastType                 up %6.4
  val?^           %6.7  = CastType                 up %6.3
  cp              %6.8  = Checkpoint                -> BB8 (default) | BB7 (if assume failed)
BB5   <- [4]
  fs              %5.0  = FrameState         R     0x561662eff5b0+132: [], env=e1.2
  void                    Deopt              !v    %5.0   !
BB8   <- [6]
  lgl$#-          %8.0  = IsType                   %4.6 isA val?-
  void                    Assume             D     %8.0, %6.8 (Typecheck@0x561660f6dae8[Type#9])
  val?-           %8.2  = CastType           d     dn %4.6   <str$->
  lgl-            %8.3  = Eq                 wed   %8.2, "...", elided   <lgl$->
  lgl$#-          %8.4  = IsType                   %8.3 isA lgl$-
  cp              %8.5  = Checkpoint                -> BB10 (default) | BB9 (if assume failed)
BB7   <- [6]
  fs              %7.0  = FrameState         R     0x561662eff5b0+169: [], env=e1.2
  env             e7.1  = (MkEnv)            l     v=%6.7, w=%6.6, parent=<env 0x56166328f230>, context 1
  fs              %7.2  = FrameState         R     0x56166342ccf0+9: [%4.6], env=e7.1, next=%7.0
  void                    Deopt              !v    %7.2   !
BB10   <- [8]
  void                    Assume             D     %8.4, %8.5 (Typecheck@0x561660f6e698[Type#1])
  lgl$-           %10.1 = CastType           d     dn %8.3
  lgl$#-          %10.2 = CheckTrueFalse     e     %10.1
  void                    Branch                   %10.2 -> BB81 (if true) | BB11 (if false)
BB9   <- [8]
  fs              %9.0  = FrameState         R     0x561662eff5b0+169: [], env=e1.2
  env             e9.1  = (MkEnv)            l     v=%6.7, w=%6.6, parent=<env 0x56166328f230>, context 1
  fs              %9.2  = FrameState         R     0x56166342ccf0+21: [%8.3], env=e9.1, next=%9.0
  void                    Deopt              !v    %9.2   !
BB81   <- [10]
  env             e81.0 = (MkEnv)            l     v=%6.7, w=%6.6, parent=<env 0x56166328f230>, context 1
  (cls|spec|blt)  %81.1 = LdFun              !v    $, <env 0x56166328f230>
  fs              %81.2 = FrameState         R     0x561662eff5b0+169: [], env=e1.2
  fs              %81.3 = FrameState         R     0x56166342ccf0+178: [%81.1], env=e81.0, next=%81.2
  void                    Deopt              !v    %81.3, DeadCall@0x561660f6e698[Call#4], %81.1   !
BB11   <- [10]
  val?^ | miss    %11.0 = LdVar              eR    isDDSym, <env 0x56166328f230>
  lgl$#-          %11.1 = Identical                %11.0, function(name) <(rir::DispatchTable*)0x5616634|...
  void                    Assume             D     %11.1, %8.5 (CallTarget@0x561660f6e698[Call#0])
  env             e11.3 = MkEnv              l     v=%6.7, w=%6.6, parent=<env 0x56166328f230>, context 1
  prom-           %11.4 = MkArg                    unboundValue, h[0x5616645f14b0]_p30, e11.3
  ct              %11.5 = PushContext        lCL   %11.4, isDDSym(v), function(name) <(rir::DispatchTable*)0x5616634|..., e11.3
  val?^           %11.6 = CastType                 up %11.4
  val?^ | miss    %11.7 = LdVar              eR    is.symbol, <env 0x56166328f230>
  lgl$#-          %11.8 = Identical                <blt is.symbol>, %11.7   <true>
  cp              %11.9 = Checkpoint                -> BB13 (default) | BB12 (if assume failed)
BB13   <- [11]
  void                    Assume             D     %11.8, %11.9 (DeadBranchReached@0x561660ce8228[Test#0])
  env             e13.1 = MkEnv              l     name=%11.6, parent=<env 0x56166328f230>, context 1
  val?            %13.2 = Force!<lazy>       !vL   %11.6, e13.1   <(sym|str)->
  lgl$#-          %13.3 = CallSafeBuiltin    wed   is.symbol(%13.2)    <lgl$->
  cp              %13.4 = Checkpoint                -> BB15 (default) | BB14 (if assume failed)
BB12   <- [11]
  fs              %12.0 = FrameState         R     0x561662eff5b0+169: [], env=e1.2
  fs              %12.1 = FrameState         R     0x56166342ccf0+64: [], env=e11.3, next=%12.0
  env             e12.2 = (MkEnv)            l     name=%11.6, parent=<env 0x56166328f230>, context 1
  fs              %12.3 = FrameState         R     0x561663881f50+17: [<blt is.symbol>, %11.8], env=e12.2, next=%12.1
  void                    Deopt              !v    %12.3   !
BB15   <- [13]
  void                    Branch                   %13.3 -> BB80 (if true) | BB16 (if false)
BB14   <- [13]
  fs              %14.0 = FrameState         R     0x561662eff5b0+169: [], env=e1.2
  fs              %14.1 = FrameState         R     0x56166342ccf0+64: [], env=e11.3, next=%14.0
  fs              %14.2 = FrameState         R     0x561663881f50+91: [%13.3], env=e13.1, next=%14.1
  void                    Deopt              !v    %14.2   !
BB80   <- [15]
  goto BB17
BB16   <- [15]
  val?^ | miss    %16.0 = LdVar              eR    is.character, <env 0x56166328f230>
  lgl$#-          %16.1 = Identical                <blt is.character>, %16.0   <true>
  void                    Assume             D     %16.1, %13.4 (DeadBranchReached@0x561660ce8228[Test#1])
  lgl$#-          %16.3 = CallSafeBuiltin    wed   is.character(%13.2)    <lgl$->
  lgl$-           %16.4 = LOr                      %13.3, %16.3
  goto BB17
BB17   <- [80, 16]
  lgl$-           %17.0 = Phi                      %16.4:BB16, %13.3:BB80
  lgl$-           %17.1 = AsLogical                %17.0
  lgl$#-          %17.2 = Identical                %17.1, false
  cp              %17.3 = Checkpoint                -> BB19 (default) | BB18 (if assume failed)
BB19   <- [17]
  void                    Branch                   %17.2 -> BB79 (if true) | BB20 (if false)
BB18   <- [17]
  fs              %18.0 = FrameState         R     0x561662eff5b0+169: [], env=e1.2
  fs              %18.1 = FrameState         R     0x56166342ccf0+64: [], env=e11.3, next=%18.0
  fs              %18.2 = FrameState         R     0x561663881f50+201: [%17.0], env=e13.1, next=%18.1
  void                    Deopt              !v    %18.2   !
BB79   <- [19]
  goto BB25
BB20   <- [19]
  val?^ | miss    %20.0 = LdVar              eR    length, <env 0x56166328f230>
  lgl$#-          %20.1 = Identical                <blt length>, %20.0   <true>
  void                    Assume             D     %20.1, %17.3 (DeadBranchReached@0x561660ce8228[Test#2])
  val?^ | miss    %20.3 = LdVar              eR    grep, <env 0x56166328f230>
  lgl$#-          %20.4 = Identical                %20.3, function(pattern, x, ignore.case=FALSE, perl=F|...
  void                    Assume             D     %20.4, %17.3 (CallTarget@0x561660ce8228[Call#5])
  prom-           %20.6 = MkArg                    unboundValue, h[0x5616645f14b0]_p33, e13.1
  val?            %20.7 = StaticCall         !v    grep[0x56166264d380]("^\.\.[[:digit:]]+$", %20.6) e13.1   <int->
  lgl$#-          %20.8 = IsType                   %20.7 isA int-
  cp              %20.9 = Checkpoint                -> BB22 (default) | BB21 (if assume failed)
BB25   <- [79, 24]
  lgl$-           %25.0 = Phi                      %24.4:BB24, %17.1:BB79
  val?            %25.1 = PopContext         C     %25.0, %11.5   <lgl$->
  lgl$#-          %25.2 = IsType                   %25.1 isA lgl$-
  cp              %25.3 = Checkpoint                -> BB27 (default) | BB26 (if assume failed)
BB22   <- [20]
  void                    Assume             D     %20.8, %20.9 (Typecheck@0x561660ce8228[Type#11])
  int-            %22.1 = CastType           d     dn %20.7
  (int|real)$-    %22.2 = CallSafeBuiltin    wed   length(%22.1)    <int$->
  lgl$#-          %22.3 = IsType                   %22.2 isA int$-
  cp              %22.4 = Checkpoint                -> BB24 (default) | BB23 (if assume failed)
BB21   <- [20]
  fs              %21.0 = FrameState         R     0x561662eff5b0+169: [], env=e1.2
  fs              %21.1 = FrameState         R     0x56166342ccf0+64: [], env=e11.3, next=%21.0
  fs              %21.2 = FrameState         R     0x561663881f50+306: [%17.1, <blt length>, %20.7], env=e13.1, next=%21.1
  void                    Deopt              !v    %21.2   !
BB27   <- [25]
  void                    Assume             D     %25.2, %25.3 (Typecheck@0x561660f6e698[Type#3])
  lgl$-           %27.1 = CastType           d     dn %25.1
  lgl$#-          %27.2 = CheckTrueFalse     e     %27.1
  void                    Branch                   %27.2 -> BB78 (if true) | BB28 (if false)
BB26   <- [25]
  fs              %26.0 = FrameState         R     0x561662eff5b0+169: [], env=e1.2
  fs              %26.1 = FrameState         R     0x56166342ccf0+64: [%25.1], env=e11.3, next=%26.0
  void                    Deopt              !v    %26.1   !
BB24   <- [22]
  void                    Assume             D     %22.3, %22.4 (Typecheck@0x561660ce8228[Type#12])
  int$-           %24.1 = CastType           d     dn %22.2
  lgl$-           %24.2 = Neq                d     %24.1, 0, elided   <lgl$->
  lgl$-           %24.3 = AsLogical                %24.2
  lgl$-           %24.4 = LAnd                     %17.1, %24.3
  goto BB25
BB23   <- [22]
  fs              %23.0 = FrameState         R     0x561662eff5b0+169: [], env=e1.2
  fs              %23.1 = FrameState         R     0x56166342ccf0+64: [], env=e11.3, next=%23.0
  fs              %23.2 = FrameState         R     0x561663881f50+328: [%17.1, %22.2], env=e13.1, next=%23.1
  void                    Deopt              !v    %23.2   !
BB78   <- [27]
  fs              %78.0 = FrameState         R     0x561662eff5b0+169: [], env=e1.2
  (cls|spec|blt)  %78.1 = LdFun              !v    $, e11.3
  fs              %78.2 = FrameState         R     0x56166342ccf0+91: [%78.1], env=e11.3, next=%78.0
  void                    Deopt              !v    %78.2, DeadCall@0x561660f6e698[Call#1], %78.1   !
BB28   <- [27]
  void                    Visible            v     
  val?            %28.1 = PopContext         C     true, %6.5
  (cls|spec|blt)  %28.2 = LdFun              !     $, <0x561660cbcc10>, e1.2
  prom-           %28.3 = MkArg                    unboundValue, h[0x5616645f14b0]_p9, e1.2
  prom-           %28.4 = MkArg                    unboundValue, h[0x5616645f14b0]_p10, e1.2
  val?            %28.5 = Call               !     %28.2(%28.3, %28.4) e1.2   <cls->
  cp              %28.6 = Checkpoint                -> BB30 (default) | BB29 (if assume failed)
BB30   <- [28]
  (cls|spec|blt)  %30.0 = ChkFunction        e     %28.5
  prom-           %30.1 = MkArg                    unboundValue, h[0x5616645f14b0]_p11, e1.2
  prom-           %30.2 = MkArg                    unboundValue, h[0x5616645f14b0]_p12, e1.2
  prom-           %30.3 = MkArg                    unboundValue, h[0x5616645f14b0]_p13, e1.2
  lgl$#-          %30.4 = Identical                %30.0, function(type, n, e, w) <(rir::DispatchTable*)|...
  void                    Assume             D     %30.4, %28.6 (CallTarget@0x561660f6dae8[Call#6])
  val?            %30.6 = StaticCall         !     [0x5616645ef550]("<-", %30.1, %30.2, %30.3) e1.2
  cp              %30.7 = Checkpoint                -> BB32 (default) | BB31 (if assume failed)
BB29   <- [28]
  fs              %29.0 = FrameState         R     0x561662eff5b0+207: [%28.5], env=e1.2
  void                    Deopt              !v    %29.0   !
BB32   <- [30]
  val?^ | miss    %32.0 = LdVar              eR    isSimpleFunDef, e1.2
  lgl$#-          %32.1 = Identical                %32.0, function(e, w) <(rir::DispatchTable*)0x5616635|...
  void                    Assume             D     %32.1, %30.7 (CallTarget@0x561660f6dae8[Call#7])
  prom-           %32.3 = MkArg                    unboundValue, h[0x5616645f14b0]_p14, e1.2
  prom-           %32.4 = MkArg                    unboundValue, h[0x5616645f14b0]_p15, e1.2
  val?            %32.5 = StaticCall         !     isSimpleFunDef[0x56166324ef40](%32.3, %32.4) e1.2   <lgl$->
  lgl$#-          %32.6 = IsType                   %32.5 isA lgl$-
  cp              %32.7 = Checkpoint                -> BB34 (default) | BB33 (if assume failed)
BB31   <- [30]
  fs              %31.0 = FrameState         R     0x561662eff5b0+255: [%30.6], env=e1.2
  void                    Deopt              !v    %31.0   !
BB34   <- [32]
  void                    Assume             D     %32.6, %32.7 (Typecheck@0x561660f6dae8[Type#20])
  lgl$-           %34.1 = CastType           d     dn %32.5
  lgl$#-          %34.2 = CheckTrueFalse     e     %34.1
  void                    Branch                   %34.2 -> BB77 (if true) | BB35 (if false)
BB33   <- [32]
  fs              %33.0 = FrameState         R     0x561662eff5b0+293: [%32.5], env=e1.2
  void                    Deopt              !v    %33.0   !
BB77   <- [34]
  val?^ | miss    %77.0 = LdVar              eR    collectUsageFun, e1.2
  lgl$#-          %77.1 = Identical                %77.0, function(name, formals, body, w) <(rir::Dispat|...
  void                    Assume             D     %77.1, %32.7 (CallTarget@0x561660f6dae8[Call#23])
  prom-           %77.3 = MkArg                    unboundValue, h[0x5616645f14b0]_p26, e1.2
  prom-           %77.4 = MkArg                    unboundValue, h[0x5616645f14b0]_p27, e1.2
  prom-           %77.5 = MkArg                    unboundValue, h[0x5616645f14b0]_p28, e1.2
  prom-           %77.6 = MkArg                    unboundValue, h[0x5616645f14b0]_p29, e1.2
  val?            %77.7 = StaticCall         !     collectUsageFun[0x5616645bdc30](%77.3, %77.4, %77.5, %77.6) e1.2   <nil->
  goto BB59
BB35   <- [34]
  val?^ | miss    %35.0 = LdVar              eR    isClosureFunDef, e1.2
  lgl$#-          %35.1 = Identical                %35.0, function(e, w) <(rir::DispatchTable*)0x5616635|...
  void                    Assume             D     %35.1, %32.7 (CallTarget@0x561660f6dae8[Call#8])
  prom-           %35.3 = MkArg                    unboundValue, h[0x5616645f14b0]_p16, e1.2
  prom-           %35.4 = MkArg                    unboundValue, h[0x5616645f14b0]_p17, e1.2
  ct              %35.5 = PushContext        lCL   %35.3, %35.4, isClosureFunDef(e, w), function(e, w) <(rir::DispatchTable*)0x5616635|..., e1.2
  val?^           %35.6 = CastType                 up %35.4
  val?^           %35.7 = CastType                 up %35.3
  cp              %35.8 = Checkpoint                -> BB37 (default) | BB36 (if assume failed)
BB59   <- [77, 58]
  val?            %59.0 = Phi                      %58.5:BB58, %77.7:BB77
  void                    Return             l     %59.0
BB37   <- [35]
  val?^ | miss    %37.0 = LdVar              eR    typeof, <env 0x56166328f230>
  lgl$#-          %37.1 = Identical                %37.0, function(x) <(rir::DispatchTable*)0x5616632751|...
  void                    Assume             D     %37.1, %35.8 (CallTarget@0x561663acaeb8[Call#0])
  env             e37.3 = MkEnv              l     e=%35.7, w=%35.6, parent=<env 0x56166328f230>, context 1
  prom-           %37.4 = MkArg                    unboundValue, h[0x5616645f14b0]_p31, e37.3
  val?            %37.5 = StaticCall         !v    typeof[0x56166304e1a0](%37.4) e37.3   <str$->
  lgl$#-          %37.6 = IsType                   %37.5 isA val?-
  cp              %37.7 = Checkpoint                -> BB39 (default) | BB38 (if assume failed)
BB36   <- [35]
  fs              %36.0 = FrameState         R     0x561662eff5b0+341: [], env=e1.2
  env             e36.1 = (MkEnv)            l     e=%35.7, w=%35.6, parent=<env 0x56166328f230>, context 1
  fs              %36.2 = FrameState         R     0x5616634409d0+0: [], env=e36.1, next=%36.0
  void                    Deopt              !v    %36.2   !
BB39   <- [37]
  void                    Assume             D     %37.6, %37.7 (Typecheck@0x561663acaeb8[Type#2])
  val?-           %39.1 = CastType           d     dn %37.5   <str$->
  lgl-            %39.2 = Neq                wed   %39.1, "language", elided   <lgl$->
  lgl$#-          %39.3 = IsType                   %39.2 isA lgl$-
  cp              %39.4 = Checkpoint                -> BB41 (default) | BB40 (if assume failed)
BB38   <- [37]
  fs              %38.0 = FrameState         R     0x561662eff5b0+341: [], env=e1.2
  fs              %38.1 = FrameState         R     0x5616634409d0+32: [%37.5], env=e37.3, next=%38.0
  void                    Deopt              !v    %38.1   !
BB41   <- [39]
  void                    Assume             D     %39.3, %39.4 (Typecheck@0x561663acaeb8[Type#3])
  lgl$-           %41.1 = CastType           d     dn %39.2
  lgl$-           %41.2 = AsLogical                %41.1
  lgl$#-          %41.3 = Identical                %41.2, false
  void                    Branch                   %41.3 -> BB76 (if true) | BB42 (if false)
BB40   <- [39]
  fs              %40.0 = FrameState         R     0x561662eff5b0+341: [], env=e1.2
  fs              %40.1 = FrameState         R     0x5616634409d0+44: [%39.2], env=e37.3, next=%40.0
  void                    Deopt              !v    %40.1   !
BB76   <- [41]
  goto BB47
BB42   <- [41]
  val?^ | miss    %42.0 = LdVar              eR    typeof, e37.3
  lgl$#-          %42.1 = Identical                %42.0, function(x) <(rir::DispatchTable*)0x5616632751|...
  void                    Assume             D     %42.1, %39.4 (CallTarget@0x561663acaeb8[Call#1])
  prom-           %42.3 = MkArg                    unboundValue, h[0x5616645f14b0]_p32, e37.3
  val?            %42.4 = StaticCall         !v    typeof[0x56166304e1a0](%42.3) e37.3   <str$->
  lgl$#-          %42.5 = IsType                   %42.4 isA val?-
  cp              %42.6 = Checkpoint                -> BB44 (default) | BB43 (if assume failed)
BB47   <- [76, 46]
  lgl$-           %47.0 = Phi                      %46.3:BB46, %41.2:BB76
  val?            %47.1 = PopContext         C     %47.0, %35.5   <lgl$->
  lgl$#-          %47.2 = IsType                   %47.1 isA lgl$-
  cp              %47.3 = Checkpoint                -> BB49 (default) | BB48 (if assume failed)
BB44   <- [42]
  void                    Assume             D     %42.5, %42.6 (Typecheck@0x561663acaeb8[Type#6])
  val?-           %44.1 = CastType           d     dn %42.4   <str$->
  lgl-            %44.2 = Eq                 wed   %44.1, "closure", elided   <lgl$->
  lgl$#-          %44.3 = IsType                   %44.2 isA lgl$-
  cp              %44.4 = Checkpoint                -> BB46 (default) | BB45 (if assume failed)
BB43   <- [42]
  fs              %43.0 = FrameState         R     0x561662eff5b0+341: [], env=e1.2
  fs              %43.1 = FrameState         R     0x5616634409d0+88: [%41.2, %42.4], env=e37.3, next=%43.0
  void                    Deopt              !v    %43.1   !
BB49   <- [47]
  void                    Assume             D     %47.2, %47.3 (Typecheck@0x561660f6dae8[Type#23])
  lgl$-           %49.1 = CastType           d     dn %47.1
  lgl$#-          %49.2 = CheckTrueFalse     e     %49.1
  void                    Branch                   %49.2 -> BB73 (if true) | BB50 (if false)
BB48   <- [47]
  fs              %48.0 = FrameState         R     0x561662eff5b0+341: [%47.1], env=e1.2
  void                    Deopt              !v    %48.0   !
BB46   <- [44]
  void                    Assume             D     %44.3, %44.4 (Typecheck@0x561663acaeb8[Type#7])
  lgl$-           %46.1 = CastType           d     dn %44.2
  lgl$-           %46.2 = AsLogical                %46.1
  lgl$-           %46.3 = LAnd                     %41.2, %46.2
  goto BB47
BB45   <- [44]
  fs              %45.0 = FrameState         R     0x561662eff5b0+341: [], env=e1.2
  fs              %45.1 = FrameState         R     0x5616634409d0+100: [%41.2, %44.2], env=e37.3, next=%45.0
  void                    Deopt              !v    %45.1   !
BB73   <- [49]
  val?^ | miss    %73.0 = LdVar              eR    e, e1.2
  val?            %73.1 = Force!             !v    %73.0, e1.2   <val?_>
  lgl$#-          %73.2 = IsType                   %73.1 isA val?+
  cp              %73.3 = Checkpoint                -> BB75 (default) | BB74 (if assume failed)
BB50   <- [49]
  val?^ | miss    %50.0 = LdVar              eR    typeof, e1.2
  lgl$#-          %50.1 = Identical                %50.0, function(x) <(rir::DispatchTable*)0x5616632751|...
  void                    Assume             D     %50.1, %47.3 (CallTarget@0x561660f6dae8[Call#9])
  prom-           %50.3 = MkArg                    unboundValue, h[0x5616645f14b0]_p18, e1.2
  val?            %50.4 = StaticCall         !v    typeof[0x56166304e1a0](%50.3) e1.2   <str$->
  lgl$#-          %50.5 = IsType                   %50.4 isA val?-
  cp              %50.6 = Checkpoint                -> BB52 (default) | BB51 (if assume failed)
BB75   <- [73]
  void                    Assume             D     %73.2, %73.3 (Typecheck@0x561660f6dae8[Type#41])
  val?+           %75.1 = CastType           d     dn %73.1   <val?_>
  val?            %75.2 = Extract2_1D        wed   %75.1, 3, elided   <val?_>
  void                    StVar              lW    fun, %75.2, e1.2
  (cls|spec|blt)  %75.4 = LdFun              !v    <-, e1.2
  fs              %75.5 = FrameState         R     0x561662eff5b0+805: [%75.4], env=e1.2
  void                    Deopt              !v    %75.5, DeadCall@0x561660f6dae8[Call#14], %75.4   !
BB74   <- [73]
  fs              %74.0 = FrameState         R     0x561662eff5b0+742: [%73.1], env=e1.2
  void                    Deopt              !v    %74.0   !
BB52   <- [50]
  void                    Visible            v     
  void                    Assume             D     %50.5, %50.6 (Typecheck@0x561660f6dae8[Type#26])
  val?-           %52.2 = CastType           d     dn %50.4   <str$->
  lgl-            %52.3 = Eq                 vwed  %52.2, "language", elided   <lgl$->
  lgl$#-          %52.4 = IsType                   %52.3 isA lgl$-
  cp              %52.5 = Checkpoint                -> BB54 (default) | BB53 (if assume failed)
BB51   <- [50]
  fs              %51.0 = FrameState         R     0x561662eff5b0+384: [%50.4], env=e1.2
  void                    Deopt              !v    %51.0   !
BB54   <- [52]
  void                    Assume             D     %52.4, %52.5 (Typecheck@0x561660f6dae8[Type#27])
  lgl$-           %54.1 = CastType           d     dn %52.3
  lgl$#-          %54.2 = CheckTrueFalse     e     %54.1
  void                    Branch                   %54.2 -> BB60 (if true) | BB55 (if false)
BB53   <- [52]
  fs              %53.0 = FrameState         R     0x561662eff5b0+396: [%52.3], env=e1.2
  void                    Deopt              !v    %53.0   !
BB60   <- [54]
  val?^ | miss    %60.0 = LdVar              eR    flattenAssignment, e1.2
  lgl$#-          %60.1 = Identical                %60.0, function(e) <(rir::DispatchTable*)0x5616621934|...
  void                    Assume             D     %60.1, %52.5 (CallTarget@0x561660f6dae8[Call#10])
  prom-           %60.3 = MkArg                    unboundValue, h[0x5616645f14b0]_p21, e1.2
  val?            %60.4 = StaticCall         !v    flattenAssignment[0x56166437a150](%60.3) e1.2   <vec->
  void                    StVar              lW    fa, %60.4, e1.2
  val             %60.6 = ChkMissing         e     %60.4
  void                    Visible            v     
  val?+           %60.8 = ToForSeq           e     %60.4
  int$-           %60.9 = Length                   %60.8
  goto BB61
BB55   <- [54]
  goto BB56
BB61   <- [71, 60]
  int$-           %61.0 = Phi                      0L:BB60, %61.1:BB71
  int$-           %61.1 = Inc                      %61.0
  lgl$-           %61.2 = Lt                 vd    %60.9, %61.1, elided
  lgl$#-          %61.3 = Identical                %61.2, true
  void                    Branch                   %61.3 -> BB72 (if true) | BB62 (if false)
BB56   <- [55, 72]
  cp              %56.0 = Checkpoint                -> BB58 (default) | BB57 (if assume failed)
BB72   <- [61]
  goto BB56
BB62   <- [61]
  val?            %62.0 = Extract2_1D        wed   %60.8, %61.1, elided   <vec->
  void                    StVar              lW    a, %62.0, e1.2
  cp              %62.2 = Checkpoint                -> BB64 (default) | BB63 (if assume failed)
BB58   <- [56]
  val?^ | miss    %58.0 = LdVar              eR    walkCode, e1.2
  lgl$#-          %58.1 = Identical                %58.0, function(e, w=makeCodeWalker()) <(rir::Dispatc|...
  void                    Assume             D     %58.1, %56.0 (CallTarget@0x561660f6dae8[Call#13])
  prom-           %58.3 = MkArg                    unboundValue, h[0x5616645f14b0]_p19, e1.2
  prom-           %58.4 = MkArg                    unboundValue, h[0x5616645f14b0]_p20, e1.2
  val?            %58.5 = StaticCall         !     walkCode[0x561664526ec0](%58.3, %58.4) e1.2   <nil->
  goto BB59
BB57   <- [56]
  fs              %57.0 = FrameState         R     0x561662eff5b0+686: [], env=e1.2
  void                    Deopt              !v    %57.0   !
BB64   <- [62]
  val             %64.0 = ChkMissing         e     %62.0
  void                    Visible            v     
  val?+           %64.2 = ToForSeq           e     %62.0
  int$-           %64.3 = Length                   %64.2
  int$-           %64.4 = Inc                      0L
  lgl$-           %64.5 = Lt                 vd    %64.3, %64.4, elided   <false>
  lgl$#-          %64.6 = Identical                %64.5, true
  void                    AssumeNot          D     %64.6, %62.2 (DeadBranchReached@0x561660f6dae8[Test#3])
  val?            %64.8 = Extract2_1D        vwed  %64.2, %64.4, elided
  void                    StVar              lW    b, %64.8, e1.2
  cp              %64.10 = Checkpoint                -> BB66 (default) | BB65 (if assume failed)
BB63   <- [62]
  fs              %63.0 = FrameState         R     0x561662eff5b0+507: [%60.8, %60.9, %61.1], env=e1.2
  void                    Deopt              !v    %63.0   !
BB66   <- [64]
  val?^ | miss    %66.0 = LdVar              eR    walkCode, e1.2
  lgl$#-          %66.1 = Identical                %66.0, function(e, w=makeCodeWalker()) <(rir::Dispatc|...
  void                    Assume             D     %66.1, %64.10 (CallTarget@0x561660f6dae8[Call#11])
  prom-           %66.3 = MkArg                    unboundValue, h[0x5616645f14b0]_p22 (!refl), e1.2
  prom-           %66.4 = MkArg                    unboundValue, h[0x5616645f14b0]_p23, e1.2
  val?            %66.5 = StaticCall         !     walkCode[0x5616612c8050](%66.3, %66.4) e1.2
  goto BB67
BB65   <- [64]
  fs              %65.0 = FrameState         R     0x561662eff5b0+561: [%60.8, %60.9, %61.1, %64.2, %64.3, %64.4], env=e1.2
  void                    Deopt              !v    %65.0   !
BB67   <- [66, 70]
  int$-           %67.0 = Phi                      %64.4:BB66, %67.1:BB70
  int$-           %67.1 = Inc                      %67.0
  lgl$-           %67.2 = Lt                 vd    %64.3, %67.1, elided
  lgl$#-          %67.3 = Identical                %67.2, true
  void                    Branch                   %67.3 -> BB71 (if true) | BB68 (if false)
BB71   <- [67]
  goto BB61
BB68   <- [67]
  val?            %68.0 = Extract2_1D        vwed  %64.2, %67.1, elided
  void                    StVar              lW    b, %68.0, e1.2
  cp              %68.2 = Checkpoint                -> BB70 (default) | BB69 (if assume failed)
BB70   <- [68]
  val?^ | miss    %70.0 = LdVar              eR    walkCode, e1.2
  lgl$#-          %70.1 = Identical                %70.0, function(e, w=makeCodeWalker()) <(rir::Dispatc|...
  void                    Assume             D     %70.1, %68.2 (CallTarget@0x561660f6dae8[Call#12])
  prom-           %70.3 = MkArg                    unboundValue, h[0x5616645f14b0]_p24 (!refl), e1.2
  prom-           %70.4 = MkArg                    unboundValue, h[0x5616645f14b0]_p25, e1.2
  val?            %70.5 = StaticCall         !     walkCode[0x5616612c8050](%70.3, %70.4) e1.2
  goto BB67
BB69   <- [68]
  fs              %69.0 = FrameState         R     0x561662eff5b0+628: [%60.8, %60.9, %61.1, %64.2, %64.3, %67.1], env=e1.2
  void                    Deopt              !v    %69.0   !
Prom 0:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    w, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 1:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    enterGlobal, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 2:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     as.character, <0x561660cca040>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, h[0x5616645f14b0]_p3, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <str$->
  void                    Return             l     %1.3
Prom 3:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    e, e1.0
  val?            %1.2  = Force<lazy>        !v    %1.1, e1.0   <code->
  val?            %1.3  = Extract2_1D        !v    %1.2, 1, e1.0   <sym->
  void                    Visible            v     
  void                    Return             l     %1.3
Prom 4:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    e, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <code->
  void                    Return             l     %1.3
Prom 5:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    w, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 6:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    e, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <code->
  void                    Return             l     %1.3
Prom 7:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    v, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 8:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    w, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 9:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    w, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 10:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    enterLocal, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 11:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    v, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 12:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    e, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <code->
  void                    Return             l     %1.3
Prom 13:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    w, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 14:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    e, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <code->
  void                    Return             l     %1.3
Prom 15:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    w, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 16:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    e, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <code->
  void                    Return             l     %1.3
Prom 17:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    w, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 18:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    e, e1.0
  val?            %1.2  = Force<wrapped>     !v    %1.1, e1.0   <code->
  val?            %1.3  = Extract2_1D        !v    %1.2, 2, e1.0   <(sym|code)->
  void                    Visible            v     
  void                    Return             l     %1.3
Prom 19:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    e, e1.0
  val?            %1.2  = Force<wrapped>     !v    %1.1, e1.0   <code->
  val?            %1.3  = Extract2_1D        !v    %1.2, 3, e1.0   <val?->
  void                    Visible            v     
  void                    Return             l     %1.3
Prom 20:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    w, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 21:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    e, e1.0
  val?            %1.2  = Force<wrapped>     !v    %1.1, e1.0   <code->
  val?            %1.3  = Extract2_1D        !v    %1.2, 2, e1.0   <code->
  void                    Visible            v     
  void                    Return             l     %1.3
Prom 22:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    b, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <(sym|code)->
  void                    Return             l     %1.3
Prom 23:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    w, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 24:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    b, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <code->
  void                    Return             l     %1.3
Prom 25:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    w, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 26:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    v, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 27:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    e, e1.0
  val?            %1.2  = Force<wrapped>     !v    %1.1, e1.0   <code->
  val?            %1.3  = Extract2_1D        !v    %1.2, 3, e1.0   <code->
  val?            %1.4  = Extract2_1D        !v    %1.3, 2, e1.0   <list->
  void                    Visible            v     
  void                    Return             l     %1.4
Prom 28:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    e, e1.0
  val?            %1.2  = Force<wrapped>     !v    %1.1, e1.0   <code->
  val?            %1.3  = Extract2_1D        !v    %1.2, 3, e1.0   <code->
  val?            %1.4  = Extract2_1D        !v    %1.3, 3, e1.0   <code->
  void                    Visible            v     
  void                    Return             l     %1.4
Prom 29:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    w, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 30:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    v, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 31:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    e, e1.0
  val?            %1.2  = Force<lazy>        !v    %1.1, e1.0   <code->
  val?            %1.3  = Extract2_1D        !v    %1.2, 2, e1.0   <(sym|code)->
  void                    Visible            v     
  void                    Return             l     %1.3
Prom 32:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    e, e1.0
  val?            %1.2  = Force<wrapped>     !v    %1.1, e1.0   <code->
  val?            %1.3  = Extract2_1D        !v    %1.2, 3, e1.0   <val?->
  void                    Visible            v     
  void                    Return             l     %1.3
Prom 33:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     as.character, <0x561660cca040>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, h[0x5616645f14b0]_p34, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <str$->
  void                    Return             l     %1.3
Prom 34:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    name, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <(sym|str)->
  void                    Return             l     %1.3

│ h[0x5616645f14b0]                                                            │
└──────────────────────────────────────────────────────────────────────────────┘
