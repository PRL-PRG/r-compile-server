
┌──────────────────────────────────────────────────────────────────────────────┐
│ [0x5616642c36d0]                                                             │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch                                      │
│ Properties:                                                                  │
├────── PIR Version After Optimizations
[0x5616642c36d0]
BB0
  goto BB1
BB1   <- [0]
  val?^           %1.0  = LdArg                    2
  val?^           %1.1  = LdArg                    1
  val?^           %1.2  = LdArg                    0
  env             e1.3  = MkEnv              l     parnames=%1.2, locals=%1.1, w=%1.0, parent=<env 0x56166328f230>, context 1
  cls             %1.4  = MkCls                    >mkentry@246, e1.3
  (cls|spec|blt)  %1.5  = LdFun              !v    $, <0x561660cbcc10>, <env 0x56166328f230>
  prom-           %1.6  = MkArg                    unboundValue, [0x5616642c36d0]_p0, e1.3
  prom-           %1.7  = MkArg                    unboundValue, [0x5616642c36d0]_p1, e1.3
  val?            %1.8  = Call               !v    %1.5(%1.6, %1.7) e1.3   <env->
  void                    StVar              lW    env, %1.8, e1.3
  val?^ | miss    %1.10 = LdVar              eR    locals, e1.3
  val?            %1.11 = Force!<lazy>       !v    %1.10, e1.3   <str->
  lgl$#-          %1.12 = IsType                   %1.11 isA val+   <true>
  cp              %1.13 = Checkpoint                -> BB2 (default) | BB36 (if assume failed)
BB2   <- [1]
  void                    Assume             D     %1.12, %1.13 (DeadBranchReached@0x561663006b50[Test#0])
  val?^ | miss    %2.1  = LdVar              eR    %in%, e1.3
  lgl$#-          %2.2  = Identical                %2.1, function(x, table) <(rir::DispatchTable*)0x561|...
  void                    Assume             D     %2.2, %1.13 (CallTarget@0x561663006b50[Call#2])
  prom-           %2.4  = MkArg                    unboundValue, [0x5616642c36d0]_p2, e1.3
  prom-           %2.5  = MkArg                    unboundValue, [0x5616642c36d0]_p3, e1.3
  val?^           %2.6  = CastType                 up %2.5
  val?^           %2.7  = CastType                 up %2.4
  env             e2.8  = MkEnv              l     x=%2.7, table=%2.6, parent=R_BaseNamespace, context 0
  prom-           %2.9  = MkArg                    unboundValue, [0x5616642c36d0]_p18, e2.8
  val?^           %2.10 = CastType                 up %2.9
  val?^ | miss    %2.11 = LdVar              eR    locals, e1.3
  val?            %2.12 = Force!<wrapped>    !v    %2.11, e1.3   <str->
  prom-           %2.13 = MkArg                    %2.12, [0x5616642c36d0]_p2 (!refl), e1.3
  val?~           %2.14 = CastType                 up %2.13
  void                    StArg              lW    x, %2.14, e2.8
  prom-           %2.16 = MkArg                    %2.12, [0x5616642c36d0]_p17 (!refl), e2.8
  val?~           %2.17 = CastType                 up %2.16
  cp              %2.18 = Checkpoint                -> BB4 (default) | BB3 (if assume failed)
BB36   <- [1]
  fs              %36.0 = FrameState         R     0x561663830910+60: [%1.11], env=e1.3
  void                    Deopt              !v    %36.0   !
BB4   <- [2]
  env             e4.0  = (MkEnv)            l     x=%2.17, table=%2.10, nomatch=0L, incomparables(miss)=nil, parent=R_BaseNamespace, context -1
  lgl$#-          %4.1  = IsEnvStub          R     , e4.0
  void                    Assume             D     %4.1, %2.18 (EnvStubMaterialized@0x561660fcab30[Call#unknown])
  val?            %4.3  = Force!<lazy>       !vL   %2.6, e4.0   <val?->
  prom-           %4.4  = MkArg                    %4.3, [0x5616642c36d0]_p18 (!refl), e2.8
  val?~           %4.5  = CastType                 up %4.4
  void                    StArg              lWd   table, %4.5, e4.0
  lgl$#-          %4.7  = IsType                   %4.3 isA val?-
  cp              %4.8  = Checkpoint                -> BB6 (default) | BB5 (if assume failed)
BB3   <- [2]
  fs              %3.0  = FrameState         R     0x561663830910+133: [%1.11], env=e1.3
  fs              %3.1  = FrameState         R     0x5616612ea4e0+54: [], env=e2.8, next=%3.0
  env             e3.2  = (MkEnv)            l     x=%2.17, table=%2.10, nomatch=0L, incomparables(miss)=nil, parent=R_BaseNamespace, context -1
  fs              %3.3  = FrameState         R     0x5616617f2d70+9: [%2.12], env=e3.2, next=%3.1
  void                    Deopt              !v    %3.3   !
BB6   <- [4]
  lgl$#-          %6.0  = IsEnvStub          R     , e4.0
  void                    Assume             D     %6.0, %4.8 (EnvStubMaterialized@0x561660fcab30[Call#unknown])
  lgl$#-          %6.2  = IsType                   %2.12 isA val?+
  void                    Assume             D     %6.2, %4.8 (Typecheck@0x561660fcab30[Type#0])
  val?+           %6.4  = CastType           d     dn %2.12   <(int|str)+>
  void                    Assume             D     %4.7, %4.8 (Typecheck@0x561660fcab30[Type#1])
  val?-           %6.6  = CastType           d     dn %4.3
  val+            %6.7  = CallSafeBuiltin    wed   match(%6.4, %6.6, 0L, nil)    <int->
  lgl$#-          %6.8  = IsType                   %6.7 isA int-
  cp              %6.9  = Checkpoint                -> BB8 (default) | BB7 (if assume failed)
BB5   <- [4]
  fs              %5.0  = FrameState         R     0x561663830910+133: [%1.11], env=e1.3
  fs              %5.1  = FrameState         R     0x5616612ea4e0+54: [], env=e2.8, next=%5.0
  fs              %5.2  = FrameState         R     0x5616617f2d70+23: [%2.12, %4.3], env=e4.0, next=%5.1
  void                    Deopt              !v    %5.2   !
BB8   <- [6]
  void                    Assume             D     %6.8, %6.9 (Typecheck@0x56166231c688[Type#2])
  int-            %8.1  = CastType           d     dn %6.7
  lgl-            %8.2  = Gt                 wed   %8.1, 0L, elided   <lgl->
  lgl-            %8.3  = Not                wed   %8.2, elided
  cp              %8.4  = Checkpoint                -> BB10 (default) | BB9 (if assume failed)
BB7   <- [6]
  fs              %7.0  = FrameState         R     0x561663830910+133: [%1.11], env=e1.3
  fs              %7.1  = FrameState         R     0x5616612ea4e0+54: [], env=e2.8, next=%7.0
  fs              %7.2  = FrameState         R     0x5616617f2d70+69: [%6.7], env=e4.0, next=%7.1
  void                    Deopt              !v    %7.2   !
BB10   <- [8]
  lgl$#-          %10.0 = IsType                   %1.11 isA val?-
  void                    Assume             D     %10.0, %8.4 (Typecheck@0x561663006b50[Type#3])
  val?-           %10.2 = CastType           d     dn %1.11   <str->
  val?            %10.3 = Extract1_1D        wed   %10.2, %8.3, elided   <str->
  void                    StVar              lW    nplocals, %10.3, e1.3
  cp              %10.5 = Checkpoint                -> BB12 (default) | BB11 (if assume failed)
BB9   <- [8]
  fs              %9.0  = FrameState         R     0x561663830910+139: [%1.11, %8.3], env=e1.3
  void                    Deopt              !v    %9.0   !
BB12   <- [10]
  val?^ | miss    %12.0 = LdVar              eR    env, e1.3
  lgl$#-          %12.1 = IsType                   %12.0 isA val?~- | miss
  void                    Assume             D     %12.1, %10.5 (Typecheck@0x561663006b50[Type#11])
  val?~- | miss   %12.3 = CastType           d     dn %12.0
  val?-           %12.4 = Force!<value>            %12.3,    <env->
  (cls|spec|blt)  %12.5 = LdFun              !v    attr<-, <0x561660cc0e08>, e1.3
  cp              %12.6 = Checkpoint                -> BB14 (default) | BB13 (if assume failed)
BB11   <- [10]
  fs              %11.0 = FrameState         R     0x561663830910+155: [], env=e1.3
  void                    Deopt              !v    %11.0   !
BB14   <- [12]
  val?^ | miss    %14.0 = LdVar              eR    env, e1.3
  lgl$#-          %14.1 = IsType                   %14.0 isA val?~- | miss
  void                    Assume             D     %14.1, %12.6 (Typecheck@0x561663006b50[Type#12])
  val?~- | miss   %14.3 = CastType           d     dn %14.0
  val?-           %14.4 = Force!<value>            %14.3,    <env->
  val?            %14.5 = NamedCall          !v    %12.5(%14.4, "checkUsageFrame", value=%12.4) e1.3
  void                    StVar              lW    env, %14.5, e1.3
  void                    StVar              lW    mkentry, %1.4, e1.3
  val?^ | miss    %14.8 = LdVar              eR    parnames, e1.3
  val?            %14.9 = Force!<wrapped>    !v    %14.8, e1.3   <str->
  cp              %14.10 = Checkpoint                -> BB16 (default) | BB15 (if assume failed)
BB13   <- [12]
  fs              %13.0 = FrameState         R     0x561663830910+169: [%12.4], env=e1.3
  void                    Deopt              !v    %13.0   !
BB16   <- [14]
  val?+           %16.0 = ToForSeq           e     %14.9
  int$-           %16.1 = Length                   %16.0
  int$-           %16.2 = Inc                      0L
  lgl$-           %16.3 = Lt                 d     %16.1, %16.2, elided   <false>
  lgl$#-          %16.4 = Identical                %16.3, true
  void                    AssumeNot          D     %16.4, %14.10 (DeadBranchReached@0x561663006b50[Test#1])
  val?            %16.6 = Extract2_1D        wed   %16.0, %16.2, elided
  void                    StVar              lW    v, %16.6, e1.3
  cp              %16.8 = Checkpoint                -> BB18 (default) | BB17 (if assume failed)
BB15   <- [14]
  fs              %15.0 = FrameState         R     0x561663830910+280: [%14.9], env=e1.3
  void                    Deopt              !v    %15.0   !
BB18   <- [16]
  val?^ | miss    %18.0 = LdVar              eR    assign, e1.3
  lgl$#-          %18.1 = Identical                %18.0, function(x, value, pos=-(1), envir=as.environm|...
  void                    Assume             D     %18.1, %16.8 (CallTarget@0x561663006b50[Call#4])
  prom-           %18.3 = MkArg                    unboundValue, [0x5616642c36d0]_p5 (!refl), e1.3
  prom-           %18.4 = MkArg                    unboundValue, [0x5616642c36d0]_p6, e1.3
  prom-           %18.5 = MkArg                    unboundValue, [0x5616642c36d0]_p7, e1.3
  val?            %18.6 = StaticCall         !v    assign[0x5616642c3790](%18.3, %18.4, missingArg, %18.5) { 0 1 3n } e1.3
  goto BB19
BB17   <- [16]
  fs              %17.0 = FrameState         R     0x561663830910+325: [%16.0, %16.1, %16.2], env=e1.3
  void                    Deopt              !v    %17.0   !
BB19   <- [18, 24]
  int$-           %19.0 = Phi                      %16.2:BB18, %19.1:BB24
  int$-           %19.1 = Inc                      %19.0
  cp              %19.2 = Checkpoint                -> BB21 (default) | BB20 (if assume failed)
BB21   <- [19]
  lgl$-           %21.0 = Lt                 d     %16.1, %19.1, elided
  lgl$#-          %21.1 = Identical                %21.0, true
  void                    Branch                   %21.1 -> BB25 (if true) | BB22 (if false)
BB20   <- [19]
  fs              %20.0 = FrameState         R     0x561663830910+380: [%16.0, %16.1, %19.0], env=e1.3
  void                    Deopt              !v    %20.0   !
BB25   <- [21]
  val?^ | miss    %25.0 = LdVar              eR    nplocals, e1.3
  lgl$#-          %25.1 = IsType                   %25.0 isA val?~- | miss
  void                    Assume             D     %25.1, %19.2 (Typecheck@0x561663006b50[Type#20])
  val?~- | miss   %25.3 = CastType           d     dn %25.0
  val?-           %25.4 = Force!<value>            %25.3,    <str->
  int$-           %25.5 = Length                   %25.4
  lgl$-           %25.6 = Lt                 d     %25.5, %16.2, elided
  lgl$#-          %25.7 = Identical                %25.6, true
  void                    Branch                   %25.7 -> BB35 (if true) | BB26 (if false)
BB22   <- [21]
  val?            %22.0 = Extract2_1D        wed   %16.0, %19.1, elided
  void                    StVar              lW    v, %22.0, e1.3
  cp              %22.2 = Checkpoint                -> BB24 (default) | BB23 (if assume failed)
BB35   <- [25]
  goto BB34
BB26   <- [25]
  val?            %26.0 = Extract2_1D        wed   %25.4, %16.2, elided
  void                    StVar              lW    v, %26.0, e1.3
  cp              %26.2 = Checkpoint                -> BB28 (default) | BB27 (if assume failed)
BB24   <- [22]
  val?^ | miss    %24.0 = LdVar              eR    assign, e1.3
  lgl$#-          %24.1 = Identical                %24.0, function(x, value, pos=-(1), envir=as.environm|...
  void                    Assume             D     %24.1, %22.2 (CallTarget@0x561663006b50[Call#6])
  prom-           %24.3 = MkArg                    unboundValue, [0x5616642c36d0]_p8 (!refl), e1.3
  prom-           %24.4 = MkArg                    unboundValue, [0x5616642c36d0]_p9, e1.3
  prom-           %24.5 = MkArg                    unboundValue, [0x5616642c36d0]_p10, e1.3
  val?            %24.6 = StaticCall         !v    assign[0x5616642c3790](%24.3, %24.4, missingArg, %24.5) { 0 1 3n } e1.3
  goto BB19
BB23   <- [22]
  fs              %23.0 = FrameState         R     0x561663830910+409: [%16.0, %16.1, %19.1], env=e1.3
  void                    Deopt              !v    %23.0   !
BB34   <- [33, 35]
  void                    Invisible          v     
  void                    Return             l     nil
BB28   <- [26]
  val?^ | miss    %28.0 = LdVar              eR    assign, e1.3
  lgl$#-          %28.1 = Identical                %28.0, function(x, value, pos=-(1), envir=as.environm|...
  void                    Assume             D     %28.1, %26.2 (CallTarget@0x561663006b50[Call#8])
  prom-           %28.3 = MkArg                    unboundValue, [0x5616642c36d0]_p11 (!refl), e1.3
  prom-           %28.4 = MkArg                    unboundValue, [0x5616642c36d0]_p12, e1.3
  prom-           %28.5 = MkArg                    unboundValue, [0x5616642c36d0]_p13, e1.3
  val?            %28.6 = StaticCall         !v    assign[0x5616642c3790](%28.3, %28.4, missingArg, %28.5) { 0 1 3n } e1.3
  goto BB29
BB27   <- [26]
  fs              %27.0 = FrameState         R     0x561663830910+528: [%25.4, %25.5, %16.2], env=e1.3
  void                    Deopt              !v    %27.0   !
BB29   <- [28, 32]
  int$-           %29.0 = Phi                      %16.2:BB28, %29.1:BB32
  int$-           %29.1 = Inc                      %29.0
  lgl$-           %29.2 = Lt                 d     %25.5, %29.1, elided
  lgl$#-          %29.3 = Identical                %29.2, true
  void                    Branch                   %29.3 -> BB33 (if true) | BB30 (if false)
BB33   <- [29]
  goto BB34
BB30   <- [29]
  val?            %30.0 = Extract2_1D        wed   %25.4, %29.1, elided
  void                    StVar              lW    v, %30.0, e1.3
  cp              %30.2 = Checkpoint                -> BB32 (default) | BB31 (if assume failed)
BB32   <- [30]
  val?^ | miss    %32.0 = LdVar              eR    assign, e1.3
  lgl$#-          %32.1 = Identical                %32.0, function(x, value, pos=-(1), envir=as.environm|...
  void                    Assume             D     %32.1, %30.2 (CallTarget@0x561663006b50[Call#10])
  prom-           %32.3 = MkArg                    unboundValue, [0x5616642c36d0]_p14 (!refl), e1.3
  prom-           %32.4 = MkArg                    unboundValue, [0x5616642c36d0]_p15, e1.3
  prom-           %32.5 = MkArg                    unboundValue, [0x5616642c36d0]_p16, e1.3
  val?            %32.6 = StaticCall         !v    assign[0x5616642c3790](%32.3, %32.4, missingArg, %32.5) { 0 1 3n } e1.3
  goto BB29
BB31   <- [30]
  fs              %31.0 = FrameState         R     0x561663830910+612: [%25.4, %25.5, %29.1], env=e1.3
  void                    Deopt              !v    %31.0   !
Prom 0:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    w, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 1:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    env, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 2:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    locals, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <str->
  void                    Return             l     %1.3
Prom 3:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    parnames, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <str->
  void                    Return             l     %1.3
Prom 5:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    v, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 6:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     mkentry, <0x561663b21f98>, e1.0
  val?            %1.2  = Call               !     %1.1(true) e1.0   <env->
  void                    Return             l     %1.2
Prom 7:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    env, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <env+>
  void                    Return             l     %1.3
Prom 8:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    v, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 9:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     mkentry, <0x5616625e8be8>, e1.0
  val?            %1.2  = Call               !     %1.1(true) e1.0   <env->
  void                    Return             l     %1.2
Prom 10:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    env, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <env+>
  void                    Return             l     %1.3
Prom 11:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    v, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 12:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     mkentry, <0x561663b21f98>, e1.0
  val?            %1.2  = Call               !     %1.1(false) e1.0   <env->
  void                    Return             l     %1.2
Prom 13:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    env, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <env+>
  void                    Return             l     %1.3
Prom 14:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    v, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 15:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     mkentry, <0x561662e1dbe0>, e1.0
  val?            %1.2  = Call               !     %1.1(false) e1.0   <env->
  void                    Return             l     %1.2
Prom 16:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    env, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <env+>
  void                    Return             l     %1.3
Prom 17:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    x, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <(int|str)+>
  void                    Return             l     %1.3
Prom 18:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    table, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <val?->
  void                    Return             l     %1.3

│ [0x5616642c36d0]                                                             │
└──────────────────────────────────────────────────────────────────────────────┘
