
┌──────────────────────────────────────────────────────────────────────────────┐
│ h[0x5616648448e0]                                                            │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;NonRefl0,NonRefl1,!Obj0,!Obj1        │
│ Properties:                                                                  │
├────── PIR Version After Optimizations
h[0x5616648448e0]
BB0
  goto BB1
BB1   <- [0]
  val?^           %1.0  = LdArg                    1
  val?^           %1.1  = LdArg                    0
  env             e1.2  = MkEnv              l     e=%1.1, w=%1.0, parent=<env 0x56166328f230>, context 1
  (cls|spec|blt)  %1.3  = LdFun              !v    $, <0x561660cbcc10>, <env 0x56166328f230>
  prom-           %1.4  = MkArg                    unboundValue, h[0x5616648448e0]_p0 (!refl), e1.2
  prom-           %1.5  = MkArg                    unboundValue, h[0x5616648448e0]_p1, e1.2
  val?            %1.6  = Call               !v    %1.3(%1.4, %1.5) e1.2   <cls->
  cp              %1.7  = Checkpoint                -> BB2 (default) | BB27 (if assume failed)
BB2   <- [1]
  (cls|spec|blt)  %2.0  = ChkFunction        e     %1.6
  prom-           %2.1  = MkArg                    unboundValue, h[0x5616648448e0]_p2, e1.2
  prom-           %2.2  = MkArg                    unboundValue, h[0x5616648448e0]_p3, e1.2
  lgl$#-          %2.3  = Identical                %2.0, function(type, n, e, w) <(rir::DispatchTable*)|...
  void                    Assume             D     %2.3, %1.7 (CallTarget@0x5616638a77c8[Call#1])
  val?            %2.5  = StaticCall         !v    [0x56166142fec0]("function", "if", %2.1, %2.2) e1.2
  cp              %2.6  = Checkpoint                -> BB4 (default) | BB3 (if assume failed)
BB27   <- [1]
  fs              %27.0 = FrameState         R     0x56166369a0f0+37: [%1.6], env=e1.2
  void                    Deopt              !v    %27.0   !
BB4   <- [2]
  val?^ | miss    %4.0  = LdVar              eR    constantFoldEnv, e1.2
  lgl$#-          %4.1  = Identical                %4.0, function(e, env=.GlobalEnv, fail=NULL) <(rir::|...
  void                    Assume             D     %4.1, %2.6 (CallTarget@0x5616638a77c8[Call#2])
  prom-           %4.3  = MkArg                    unboundValue, h[0x5616648448e0]_p4, e1.2
  prom-           %4.4  = MkArg                    unboundValue, h[0x5616648448e0]_p5, e1.2
  ct              %4.5  = PushContext        lCL   %4.3, %4.4, constantFoldEnv([[(e, 2), $(w, env)), function(e, env=.GlobalEnv, fail=NULL) <(rir::|..., e1.2
  val?^           %4.6  = CastType                 up %4.4
  val?^           %4.7  = CastType                 up %4.3
  env             e4.8  = MkEnv              l     e=%4.7, env=%4.6, fail(miss)=nil, parent=<env 0x56166328f230>, context 1
  cls             %4.9  = MkCls                    , e4.8
  cls             %4.10 = MkCls                    constantFoldEnv>job@25, e4.8
  cls             %4.11 = MkCls                    constantFoldEnv@Prom(3)0, e4.8
  void                    StVar              lW    isLocal, %4.9, e4.8
  void                    StVar              lW    job, %4.10, e4.8
  cp              %4.14 = Checkpoint                -> BB6 (default) | BB5 (if assume failed)
BB3   <- [2]
  fs              %3.0  = FrameState         R     0x56166369a0f0+85: [%2.5], env=e1.2
  void                    Deopt              !v    %3.0   !
BB6   <- [4]
  val?^ | miss    %6.0  = LdVar              eR    tryCatch, e4.8
  lgl$#-          %6.1  = Identical                %6.0, function(expr, ..., finally) <(rir::DispatchTa|...
  void                    Assume             D     %6.1, %4.14 (CallTarget@0x561662e9d2b0[Call#0])
  prom-           %6.3  = MkArg                    unboundValue, h[0x5616648448e0]_p11, e4.8
  prom-           %6.4  = MkArg                    %4.11, h[0x5616648448e0]_p13 (!refl), e4.8
  dots-           %6.5  = DotsList           l     error=%6.4
  val?            %6.6  = StaticCall         !v    tryCatch[0x561663039410](%6.3, %6.5) { 0 1n } e4.8   <nil->
  val?            %6.7  = PopContext         C     %6.6, %4.5   <nil->
  void                    StVar              lW    test, %6.7, e1.2
  cp              %6.9  = Checkpoint                -> BB8 (default) | BB7 (if assume failed)
BB5   <- [4]
  fs              %5.0  = FrameState         R     0x56166369a0f0+123: [], env=e1.2
  fs              %5.1  = FrameState         R     0x5616634561c0+50: [], env=e4.8, next=%5.0
  void                    Deopt              !v    %5.1   !
BB8   <- [6]
  val?^ | miss    %8.0  = LdVar              eR    is.logical, e1.2
  lgl$#-          %8.1  = Identical                <blt is.logical>, %8.0   <true>
  void                    Assume             D     %8.1, %6.9 (DeadBranchReached@0x5616638a77c8[Test#1])
  val             %8.3  = ChkMissing         e     %6.7
  val+            %8.4  = CallSafeBuiltin    vwed  is.logical(%6.7)    <lgl$->
  lgl$#-          %8.5  = IsType                   %8.4 isA lgl$-
  cp              %8.6  = Checkpoint                -> BB10 (default) | BB9 (if assume failed)
BB7   <- [6]
  fs              %7.0  = FrameState         R     0x56166369a0f0+137: [], env=e1.2
  void                    Deopt              !v    %7.0   !
BB10   <- [8]
  void                    Assume             D     %8.5, %8.6 (Typecheck@0x5616638a77c8[Type#13])
  lgl$-           %10.1 = CastType           d     dn %8.4
  lgl$-           %10.2 = AsLogical                %10.1
  lgl$#-          %10.3 = Identical                %10.2, false
  void                    Branch                   %10.3 -> BB26 (if true) | BB11 (if false)
BB9   <- [8]
  fs              %9.0  = FrameState         R     0x56166369a0f0+228: [%8.4], env=e1.2
  void                    Deopt              !v    %9.0   !
BB26   <- [10]
  goto BB14
BB11   <- [10]
  val?^ | miss    %11.0 = LdVar              eR    length, e1.2
  lgl$#-          %11.1 = Identical                <blt length>, %11.0   <@?>
  void                    Branch                   %11.1 -> BB13 (if true) | BB12 (if false)
BB14   <- [26, 13]
  lgl$-           %14.0 = Phi                      %13.7:BB13, %10.2:BB26
  lgl$-           %14.1 = AsLogical                %14.0
  lgl$#-          %14.2 = Identical                %14.1, false
  cp              %14.3 = Checkpoint                -> BB16 (default) | BB15 (if assume failed)
BB13   <- [11]
  lgl$#-          %13.0 = IsType                   %6.7 isA val?-
  void                    Assume             D     %13.0, %8.6 (Typecheck@0x5616638a77c8[Type#10])
  val?-           %13.2 = CastType           d     dn %6.7   <nil->
  (int|real)$-    %13.3 = CallSafeBuiltin    wed   length(%13.2)    <val?_>
  void                    Visible            v     
  lgl$-           %13.5 = Eq                 vd    %13.3, 1, elided   <val?_>
  lgl$-           %13.6 = AsLogical                %13.5
  lgl$-           %13.7 = LAnd                     %10.2, %13.6
  goto BB14
BB12   <- [11]
  (cls|spec|blt)  %12.0 = LdFun              !v    length, e1.2
  fs              %12.1 = FrameState         R     0x56166369a0f0+268: [%10.2, %12.0], env=e1.2
  void                    Deopt              !v    %12.1, DeadCall@0x5616638a77c8[Call#5], %12.0   !
BB16   <- [14]
  void                    Branch                   %14.2 -> BB25 (if true) | BB17 (if false)
BB15   <- [14]
  fs              %15.0 = FrameState         R     0x56166369a0f0+350: [%14.0], env=e1.2
  void                    Deopt              !v    %15.0   !
BB25   <- [16]
  goto BB20
BB17   <- [16]
  val?^ | miss    %17.0 = LdVar              eR    is.na, e1.2
  lgl$#-          %17.1 = Identical                <blt is.na>, %17.0   <@?>
  void                    Branch                   %17.1 -> BB19 (if true) | BB18 (if false)
BB20   <- [25, 19]
  lgl$-           %20.0 = Phi                      %19.6:BB19, %14.1:BB25
  cp              %20.1 = Checkpoint                -> BB22 (default) | BB21 (if assume failed)
BB19   <- [17]
  lgl$#-          %19.0 = IsType                   %6.7 isA val?+
  void                    Assume             D     %19.0, %14.3 (Typecheck@0x5616638a77c8[Type#19])
  val?+           %19.2 = CastType           d     dn %6.7   <val?_>
  lgl+            %19.3 = CallSafeBuiltin    vwed  is.na(%19.2)    <val?_>
  lgl             %19.4 = Not                vwed  %19.3, elided
  lgl$-           %19.5 = AsLogical          e     %19.4
  lgl$-           %19.6 = LAnd                     %14.1, %19.5
  goto BB20
BB18   <- [17]
  (cls|spec|blt)  %18.0 = LdFun              !v    is.na, e1.2
  fs              %18.1 = FrameState         R     0x56166369a0f0+385: [%14.1, %18.0], env=e1.2
  void                    Deopt              !v    %18.1, DeadCall@0x5616638a77c8[Call#6], %18.0   !
BB22   <- [20]
  lgl$#-          %22.0 = CheckTrueFalse     e     %20.0
  void                    Branch                   %22.0 -> BB24 (if true) | BB23 (if false)
BB21   <- [20]
  fs              %21.0 = FrameState         R     0x56166369a0f0+456: [%20.0], env=e1.2
  void                    Deopt              !v    %21.0   !
BB24   <- [22]
  (cls|spec|blt)  %24.0 = LdFun              !v    walkCode, e1.2
  fs              %24.1 = FrameState         R     0x56166369a0f0+514: [%24.0], env=e1.2
  void                    Deopt              !v    %24.1, DeadCall@0x5616638a77c8[Call#8], %24.0   !
BB23   <- [22]
  val?^ | miss    %23.0 = LdVar              eR    collectUsageArgs, e1.2
  lgl$#-          %23.1 = Identical                %23.0, function(e, w) <(rir::DispatchTable*)0x5616634|...
  void                    Assume             D     %23.1, %20.1 (CallTarget@0x5616638a77c8[Call#7])
  prom-           %23.3 = MkArg                    unboundValue, h[0x5616648448e0]_p8, e1.2
  prom-           %23.4 = MkArg                    unboundValue, h[0x5616648448e0]_p9, e1.2
  val?            %23.5 = StaticCall         !     collectUsageArgs[0x5616611603e0](%23.3, %23.4) e1.2   <nil->
  void                    Return             l     %23.5
Prom 0:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    w, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 1:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    enterGlobal, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 2:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    e, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <code->
  void                    Return             l     %1.3
Prom 3:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    w, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 4:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    e, e1.0
  val?            %1.2  = Force<wrapped>     !v    %1.1, e1.0   <code->
  val?            %1.3  = Extract2_1D        !v    %1.2, 2, e1.0   <(sym|code)->
  void                    Visible            v     
  void                    Return             l     %1.3
Prom 5:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     $, <0x561660cbcc10>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, h[0x5616648448e0]_p6, e1.0
  prom-           %1.3  = MkArg                    unboundValue, h[0x5616648448e0]_p7, e1.0
  val?            %1.4  = Call               !     %1.1(%1.2, %1.3) e1.0   <env+>
  void                    Return             l     %1.4
Prom 6:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    w, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 7:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    env, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 8:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    e, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <code->
  void                    Return             l     %1.3
Prom 9:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    w, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 11:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     callCC, <0x5616637414a0>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, h[0x5616648448e0]_p12, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <nil->
  void                    Return             l     %1.3
Prom 12:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    job, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <cls->
  void                    Return             l     %1.3
Prom 13:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  cls             %1.1  = MkCls                    constantFoldEnv@Prom(3)0, e1.0
  void                    Return             l     %1.1

│ h[0x5616648448e0]                                                            │
└──────────────────────────────────────────────────────────────────────────────┘
