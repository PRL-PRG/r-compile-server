
┌──────────────────────────────────────────────────────────────────────────────┐
│ [0x561663664620]                                                             │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch                                      │
│ Properties:                                                                  │
├────── PIR Version After Optimizations
[0x561663664620]
BB0
  goto BB1
BB1   <- [0]
  val?^           %1.0  = LdArg                    1
  val?^           %1.1  = LdArg                    0
  cp              %1.2  = Checkpoint                -> BB2 (default) | BB32 (if assume failed)
BB2   <- [1]
  val?^ | miss    %2.0  = LdVar              eR    typeof, <env 0x56166328f230>
  lgl$#-          %2.1  = Identical                %2.0, function(x) <(rir::DispatchTable*)0x5616632751|...
  void                    Assume             D     %2.1, %1.2 (CallTarget@0x56166374a508[Call#0])
  env             e2.3  = MkEnv              l     v=%1.1, w=%1.0, parent=<env 0x56166328f230>, context 1
  val?            %2.4  = Force!<lazy>       !v    %1.1, e2.3   <str$->
  prom-           %2.5  = MkArg                    %2.4, [0x561663664620]_p0 (!refl), 
  val?            %2.6  = StaticCall         !v    typeof[0x561663fe7d30](%2.5) e2.3   <str$->
  lgl$#-          %2.7  = IsType                   %2.6 isA val?-
  cp              %2.8  = Checkpoint                -> BB4 (default) | BB3 (if assume failed)
BB32   <- [1]
  env             e32.0 = (MkEnv)            l     v=%1.1, w=%1.0, parent=<env 0x56166328f230>, context 1
  fs              %32.1 = FrameState         R     0x56166350a6c0+0: [], env=e32.0
  void                    Deopt              !v    %32.1
BB4   <- [2]
  void                    Assume             D     %2.7, %2.8 (Typecheck@0x56166374a508[Type#1])
  val?-           %4.1  = CastType           d     dn %2.6   <str$->
  lgl-            %4.2  = Eq                 wed   %4.1, "symbol", elided   <lgl$->
  lgl$#-          %4.3  = IsType                   %4.2 isA lgl$-
  cp              %4.4  = Checkpoint                -> BB6 (default) | BB5 (if assume failed)
BB3   <- [2]
  fs              %3.0  = FrameState         R     0x56166350a6c0+32: [%2.6], env=e2.3
  void                    Deopt              !v    %3.0   !
BB6   <- [4]
  void                    Assume             D     %4.3, %4.4 (Typecheck@0x56166374a508[Type#2])
  lgl$-           %6.1  = CastType           d     dn %4.2
  lgl$-           %6.2  = AsLogical                %6.1
  lgl$#-          %6.3  = Identical                %6.2, true
  void                    Branch                   %6.3 -> BB31 (if true) | BB7 (if false)
BB5   <- [4]
  fs              %5.0  = FrameState         R     0x56166350a6c0+44: [%4.2], env=e2.3
  void                    Deopt              !v    %5.0   !
BB31   <- [6]
  goto BB12
BB7   <- [6]
  val?^ | miss    %7.0  = LdVar              eR    typeof, e2.3
  lgl$#-          %7.1  = Identical                %7.0, function(x) <(rir::DispatchTable*)0x5616632751|...
  void                    Assume             D     %7.1, %4.4 (CallTarget@0x56166374a508[Call#1])
  val?^ | miss    %7.3  = LdVar              eR    v, e2.3
  val?            %7.4  = Force!<wrapped>    !v    %7.3, e2.3   <str$->
  prom-           %7.5  = MkArg                    %7.4, [0x561663664620]_p1 (!refl), 
  val?            %7.6  = StaticCall         !v    typeof[0x561663fe7d30](%7.5) e2.3   <str$->
  lgl$#-          %7.7  = IsType                   %7.6 isA val?-
  cp              %7.8  = Checkpoint                -> BB9 (default) | BB8 (if assume failed)
BB12   <- [11, 31]
  lgl$-           %12.0 = Phi                      %11.3:BB11, %6.2:BB31
  lgl$-           %12.1 = AsLogical                %12.0
  lgl$#-          %12.2 = Identical                %12.1, false
  cp              %12.3 = Checkpoint                -> BB14 (default) | BB13 (if assume failed)
BB9   <- [7]
  void                    Assume             D     %7.7, %7.8 (Typecheck@0x56166374a508[Type#4])
  val?-           %9.1  = CastType           d     dn %7.6   <str$->
  lgl-            %9.2  = Eq                 wed   %9.1, "character", elided   <lgl$->
  lgl$#-          %9.3  = IsType                   %9.2 isA lgl$-
  cp              %9.4  = Checkpoint                -> BB11 (default) | BB10 (if assume failed)
BB8   <- [7]
  fs              %8.0  = FrameState         R     0x56166350a6c0+88: [%6.2, %7.6], env=e2.3
  void                    Deopt              !v    %8.0   !
BB14   <- [12]
  void                    Branch                   %12.2 -> BB30 (if true) | BB15 (if false)
BB13   <- [12]
  fs              %13.0 = FrameState         R     0x56166350a6c0+107: [%12.0], env=e2.3
  void                    Deopt              !v    %13.0   !
BB11   <- [9]
  void                    Assume             D     %9.3, %9.4 (Typecheck@0x56166374a508[Type#5])
  lgl$-           %11.1 = CastType           d     dn %9.2
  lgl$-           %11.2 = AsLogical                %11.1
  lgl$-           %11.3 = LOr                      %6.2, %11.2
  goto BB12
BB10   <- [9]
  fs              %10.0 = FrameState         R     0x56166350a6c0+100: [%6.2, %9.2], env=e2.3
  void                    Deopt              !v    %10.0   !
BB30   <- [14]
  goto BB22
BB15   <- [14]
  val?^ | miss    %15.0 = LdVar              eR    %in%, e2.3
  lgl$#-          %15.1 = Identical                %15.0, function(x, table) <(rir::DispatchTable*)0x561|...
  void                    Assume             D     %15.1, %12.3 (CallTarget@0x56166374a508[Call#2])
  prom-           %15.3 = MkArg                    unboundValue, [0x561663664620]_p2, e2.3
  prom-           %15.4 = MkArg                    unboundValue, [0x561663664620]_p4, e2.3
  val?^           %15.5 = CastType                 up %15.4
  val?^           %15.6 = CastType                 up %15.3
  env             e15.7 = MkEnv              l     x=%15.6, table=%15.5, parent=R_BaseNamespace, context 0
  prom-           %15.8 = MkArg                    unboundValue, [0x561663664620]_p10, e15.7
  val?^           %15.9 = CastType                 up %15.8
  val?^ | miss    %15.10 = LdVar              eR    as.character, e2.3
  lgl$#-          %15.11 = Identical                %15.10, <blt as.character>
  void                    Assume             D     %15.11, %12.3 (CallTarget@0x56166374a508[Call#3])
  val?^ | miss    %15.13 = LdVar              eR    v, e2.3
  val?            %15.14 = Force!<wrapped>    !v    %15.13, e2.3   <str$->
  val?            %15.15 = CallBuiltin        !v    as.character(%15.14) e2.3   <str$->
  prom-           %15.16 = MkArg                    %15.15, [0x561663664620]_p2 (!refl), e2.3
  val?~           %15.17 = CastType                 up %15.16
  void                    StArg              lW    x, %15.17, e15.7
  prom-           %15.19 = MkArg                    %15.15, [0x561663664620]_p9 (!refl), e15.7
  val?~           %15.20 = CastType                 up %15.19
  cp              %15.21 = Checkpoint                -> BB17 (default) | BB16 (if assume failed)
BB22   <- [30, 21]
  lgl$-           %22.0 = Phi                      %21.4:BB21, %12.1:BB30
  lgl$-           %22.1 = AsLogical                %22.0
  lgl$#-          %22.2 = Identical                %22.1, false
  void                    Branch                   %22.2 -> BB29 (if true) | BB23 (if false)
BB17   <- [15]
  env             e17.0 = (MkEnv)            l     x=%15.20, table=%15.9, nomatch=0L, incomparables(miss)=nil, parent=R_BaseNamespace, context -1
  lgl$#-          %17.1 = IsEnvStub          R     , e17.0
  void                    Assume             D     %17.1, %15.21 (EnvStubMaterialized@0x561660fcab30[Call#unknown])
  val?            %17.3 = Force<lazy>        !vL   %15.5, e17.0   <val?->
  prom-           %17.4 = MkArg                    %17.3, [0x561663664620]_p10 (!refl), e15.7
  val?~           %17.5 = CastType                 up %17.4
  void                    StArg              lWd   table, %17.5, e17.0
  lgl$#-          %17.7 = IsType                   %17.3 isA val?-
  cp              %17.8 = Checkpoint                -> BB19 (default) | BB18 (if assume failed)
BB16   <- [15]
  fs              %16.0 = FrameState         R     0x56166350a6c0+152: [%12.1], env=e2.3
  fs              %16.1 = FrameState         R     0x5616612ea4e0+54: [], env=e15.7, next=%16.0
  env             e16.2 = (MkEnv)            l     x=%15.20, table=%15.9, nomatch=0L, incomparables(miss)=nil, parent=R_BaseNamespace, context -1
  fs              %16.3 = FrameState         R     0x5616617f2d70+9: [%15.15], env=e16.2, next=%16.1
  void                    Deopt              !v    %16.3   !
BB29   <- [22]
  goto BB28
BB23   <- [22]
  (cls|spec|blt)  %23.0 = LdFun              !v    $, <0x561660cbcc10>, e2.3
  prom-           %23.1 = MkArg                    unboundValue, [0x561663664620]_p5, e2.3
  prom-           %23.2 = MkArg                    unboundValue, [0x561663664620]_p6, e2.3
  val?            %23.3 = Call               !v    %23.0(%23.1, %23.2) e2.3   <cls->
  cp              %23.4 = Checkpoint                -> BB25 (default) | BB24 (if assume failed)
BB19   <- [17]
  lgl$#-          %19.0 = IsEnvStub          R     , e17.0
  void                    Assume             D     %19.0, %17.8 (EnvStubMaterialized@0x561660fcab30[Call#unknown])
  lgl$#-          %19.2 = IsType                   %15.15 isA val?+
  void                    Assume             D     %19.2, %17.8 (Typecheck@0x561660fcab30[Type#0])
  val?+           %19.4 = CastType           d     dn %15.15   <(int|str)+>
  void                    Assume             D     %17.7, %17.8 (Typecheck@0x561660fcab30[Type#1])
  val?-           %19.6 = CastType           d     dn %17.3
  val+            %19.7 = CallSafeBuiltin    wed   match(%19.4, %19.6, 0L, nil)    <int->
  lgl$#-          %19.8 = IsType                   %19.7 isA int-
  cp              %19.9 = Checkpoint                -> BB21 (default) | BB20 (if assume failed)
BB18   <- [17]
  fs              %18.0 = FrameState         R     0x56166350a6c0+152: [%12.1], env=e2.3
  fs              %18.1 = FrameState         R     0x5616612ea4e0+54: [], env=e15.7, next=%18.0
  fs              %18.2 = FrameState         R     0x5616617f2d70+23: [%15.15, %17.3], env=e17.0, next=%18.1
  void                    Deopt              !v    %18.2   !
BB28   <- [29, 27]
  lgl$-           %28.0 = Phi                      %27.4:BB27, %22.1:BB29
  void                    Visible            v     
  void                    Return             l     %28.0
BB25   <- [23]
  (cls|spec|blt)  %25.0 = ChkFunction        e     %23.3
  prom-           %25.1 = MkArg                    unboundValue, [0x561663664620]_p7, e2.3
  prom-           %25.2 = MkArg                    unboundValue, [0x561663664620]_p8, e2.3
  val+            %25.3 = CallSafeBuiltin          bodyCode(%25.0) 
  lgl$#-          %25.4 = Identical                %25.3, <(rir::DispatchTable*)0x5616634bf500>
  void                    Assume             D     %25.4, %23.4 (CallTarget@0x56166374a508[Call#5])
  val?            %25.6 = StaticCall         !v    [0x561663215660](%25.1, %25.2) from %25.0 e2.3   <lgl$->
  lgl$#-          %25.7 = IsType                   %25.6 isA lgl$-
  cp              %25.8 = Checkpoint                -> BB27 (default) | BB26 (if assume failed)
BB24   <- [23]
  fs              %24.0 = FrameState         R     0x56166350a6c0+203: [%22.1, %23.3], env=e2.3
  void                    Deopt              !v    %24.0   !
BB21   <- [19]
  void                    Assume             D     %19.8, %19.9 (Typecheck@0x56166231c688[Type#2])
  int-            %21.1 = CastType           d     dn %19.7
  lgl-            %21.2 = Gt                 wed   %21.1, 0L, elided   <lgl->
  lgl$-           %21.3 = AsLogical                %21.2
  lgl$-           %21.4 = LAnd                     %12.1, %21.3
  goto BB22
BB20   <- [19]
  fs              %20.0 = FrameState         R     0x56166350a6c0+152: [%12.1], env=e2.3
  fs              %20.1 = FrameState         R     0x5616612ea4e0+54: [], env=e15.7, next=%20.0
  fs              %20.2 = FrameState         R     0x5616617f2d70+69: [%19.7], env=e17.0, next=%20.1
  void                    Deopt              !v    %20.2   !
BB27   <- [25]
  void                    Assume             D     %25.7, %25.8 (Typecheck@0x56166374a508[Type#15])
  lgl$-           %27.1 = CastType           d     dn %25.6
  lgl$-           %27.2 = Not                d     %27.1, elided
  lgl$-           %27.3 = AsLogical                %27.2
  lgl$-           %27.4 = LAnd                     %22.1, %27.3
  goto BB28
BB26   <- [25]
  fs              %26.0 = FrameState         R     0x56166350a6c0+241: [%22.1, %25.6], env=e2.3
  void                    Deopt              !v    %26.0   !
Prom 0:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    v, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 1:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    v, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 2:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     as.character, <0x561660cca040>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, [0x561663664620]_p3, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <str$->
  void                    Return             l     %1.3
Prom 3:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    v, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 4:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    foldFuns, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <str->
  void                    Return             l     %1.3
Prom 5:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    w, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 6:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    isLocal, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 7:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    v, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 8:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    w, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 9:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    x, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <(int|str)+>
  void                    Return             l     %1.3
Prom 10:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    table, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <val?->
  void                    Return             l     %1.3

│ [0x561663664620]                                                             │
└──────────────────────────────────────────────────────────────────────────────┘
