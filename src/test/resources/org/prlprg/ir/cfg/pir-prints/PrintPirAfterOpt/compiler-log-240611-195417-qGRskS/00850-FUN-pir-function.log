
┌──────────────────────────────────────────────────────────────────────────────┐
│ FUN[0x561664db5550]                                                          │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;Eager1,NonRefl1,!Obj1                │
│ Properties:                                                                  │
├────── PIR Version After Optimizations
FUN[0x561664db5550]
BB0
  goto BB1
BB1   <- [0]
  val?~+          %1.0  = LdArg                    1
  val?^           %1.1  = LdArg                    0
  cp              %1.2  = Checkpoint                -> BB2 (default) | BB23 (if assume failed)
BB2   <- [1]
  val?^ | miss    %2.0  = LdVar              eR    findOwnerEnv, <env 0x56166328f230>
  lgl$#-          %2.1  = Identical                %2.0, function(v, env, stop=NA, default=NA) <(rir::D|...
  void                    Assume             D     %2.1, %1.2 (CallTarget@0x5616610c8ca8[Call#0])
  env             e2.3  = MkEnv              l     v=%1.1, env=%1.0, parent=<env 0x56166328f230>, context 1
  prom-           %2.4  = MkArg                    unboundValue, FUN[0x561664db5550]_p0, e2.3
  prom-           %2.5  = MkArg                    unboundValue, FUN[0x561664db5550]_p1 (!refl), e2.3
  val?            %2.6  = StaticCall         !v    findOwnerEnv[0x5616638e8350](%2.4, %2.5) e2.3   <(lgl|env)->
  void                    StVar              lW    e, %2.6, e2.3
  cp              %2.8  = Checkpoint                -> BB4 (default) | BB3 (if assume failed)
BB23   <- [1]
  env             e23.0 = (MkEnv)            l     v=%1.1, env=%1.0, parent=<env 0x56166328f230>, context 1
  fs              %23.1 = FrameState         R     0x561663916de0+0: [], env=e23.0
  void                    Deopt              !v    %23.1
BB4   <- [2]
  val?^ | miss    %4.0  = LdVar              eR    is.baseenv, e2.3
  lgl$#-          %4.1  = Identical                %4.0, function(e) <(rir::DispatchTable*)0x5616634b8b|...
  void                    Assume             D     %4.1, %2.8 (CallTarget@0x5616610c8ca8[Call#1])
  prom-           %4.3  = MkArg                    unboundValue, FUN[0x561664db5550]_p2 (!refl), e2.3
  ct              %4.4  = PushContext        lCL   %4.3, is.baseenv(e), function(e) <(rir::DispatchTable*)0x5616634b8b|..., e2.3
  val?^           %4.5  = CastType                 up %4.3
  cp              %4.6  = Checkpoint                -> BB6 (default) | BB5 (if assume failed)
BB3   <- [2]
  fs              %3.0  = FrameState         R     0x561663916de0+51: [], env=e2.3
  void                    Deopt              !v    %3.0   !
BB6   <- [4]
  val?^ | miss    %6.0  = LdVar              eR    identical, <env 0x56166328f230>
  lgl$#-          %6.1  = Identical                %6.0, function(x, y, num.eq=TRUE, single.NA=TRUE, at|...
  void                    Assume             D     %6.1, %4.6 (CallTarget@0x5616610c8e08[Call#0])
  env             e6.3  = MkEnv              l     e=%4.5, parent=<env 0x56166328f230>, context 1
  prom-           %6.4  = MkArg                    unboundValue, FUN[0x561664db5550]_p5, e6.3
  prom-           %6.5  = MkArg                    unboundValue, FUN[0x561664db5550]_p6, e6.3
  ct              %6.6  = PushContext        lCL   %6.4, %6.5, identical(e, .BaseEnv), function(x, y, num.eq=TRUE, single.NA=TRUE, at|..., e6.3
  val?^           %6.7  = CastType                 up %6.5
  val?^           %6.8  = CastType                 up %6.4
  env             e6.9  = MkEnv              l     x=%6.8, y=%6.7, num.eq(miss)=true, single.NA(miss)=true, attrib.as.set(miss)=true, ignore.bytecode(miss)=true, ignore.environment(miss)=false, ignore.srcref(miss)=true, parent=R_BaseNamespace, context 1
  val?            %6.10 = Force!<lazy>       !vL   %6.8, e6.9   <val?+>
  val?            %6.11 = Force!<lazy>       !vL   %6.7, e6.9   <val?+>
  val?            %6.12 = CallBuiltin        !     identical(%6.10, %6.11, true, true, true, true, false, true) e6.9
  val?            %6.13 = PopContext         C     %6.12, %6.6   <lgl$->
  lgl$#-          %6.14 = IsType                   %6.13 isA lgl$-
  cp              %6.15 = Checkpoint                -> BB8 (default) | BB7 (if assume failed)
BB5   <- [4]
  fs              %5.0  = FrameState         R     0x561663916de0+83: [], env=e2.3
  env             e5.1  = (MkEnv)            l     e=%4.5, parent=<env 0x56166328f230>, context 1
  fs              %5.2  = FrameState         R     0x5616632d0110+0: [], env=e5.1, next=%5.0
  void                    Deopt              !v    %5.2   !
BB8   <- [6]
  void                    Assume             D     %6.14, %6.15 (Typecheck@0x5616610c8e08[Type#2])
  lgl$-           %8.1  = CastType           d     dn %6.13
  val?            %8.2  = PopContext         C     %8.1, %4.4   <lgl$->
  lgl$#-          %8.3  = IsType                   %8.2 isA lgl$-
  cp              %8.4  = Checkpoint                -> BB10 (default) | BB9 (if assume failed)
BB7   <- [6]
  fs              %7.0  = FrameState         R     0x561663916de0+83: [], env=e2.3
  fs              %7.1  = FrameState         R     0x5616632d0110+37: [%6.13], env=e6.3, next=%7.0
  void                    Deopt              !v    %7.1   !
BB10   <- [8]
  void                    Assume             D     %8.3, %8.4 (Typecheck@0x5616610c8ca8[Type#4])
  lgl$-           %10.1 = CastType           d     dn %8.2
  lgl$-           %10.2 = AsLogical                %10.1
  lgl$#-          %10.3 = Identical                %10.2, true
  void                    Branch                   %10.3 -> BB22 (if true) | BB11 (if false)
BB9   <- [8]
  fs              %9.0  = FrameState         R     0x561663916de0+83: [%8.2], env=e2.3
  void                    Deopt              !v    %9.0   !
BB22   <- [10]
  goto BB14
BB11   <- [10]
  val?^ | miss    %11.0 = LdVar              eR    identical, e2.3
  lgl$#-          %11.1 = Identical                %11.0, function(x, y, num.eq=TRUE, single.NA=TRUE, at|...
  void                    Assume             D     %11.1, %8.4 (CallTarget@0x5616610c8ca8[Call#2])
  prom-           %11.3 = MkArg                    unboundValue, FUN[0x561664db5550]_p3, e2.3
  prom-           %11.4 = MkArg                    unboundValue, FUN[0x561664db5550]_p4, e2.3
  ct              %11.5 = PushContext        lCL   %11.3, %11.4, identical(e, .BaseNamespaceEnv), function(x, y, num.eq=TRUE, single.NA=TRUE, at|..., e2.3
  val?^           %11.6 = CastType                 up %11.4
  val?^           %11.7 = CastType                 up %11.3
  env             e11.8 = MkEnv              l     x=%11.7, y=%11.6, num.eq(miss)=true, single.NA(miss)=true, attrib.as.set(miss)=true, ignore.bytecode(miss)=true, ignore.environment(miss)=false, ignore.srcref(miss)=true, parent=R_BaseNamespace, context 1
  val?            %11.9 = Force!<lazy>       !vL   %11.7, e11.8   <val?+>
  val?            %11.10 = Force!<lazy>       !vL   %11.6, e11.8   <val?+>
  val?            %11.11 = CallBuiltin        !     identical(%11.9, %11.10, true, true, true, true, false, true) e11.8
  val?            %11.12 = PopContext         C     %11.11, %11.5   <lgl$->
  lgl$#-          %11.13 = IsType                   %11.12 isA lgl$-
  cp              %11.14 = Checkpoint                -> BB13 (default) | BB12 (if assume failed)
BB14   <- [13, 22]
  lgl$-           %14.0 = Phi                      %13.3:BB13, %10.2:BB22
  lgl$-           %14.1 = AsLogical                %14.0
  lgl$#-          %14.2 = Identical                %14.1, true
  void                    Branch                   %14.2 -> BB21 (if true) | BB15 (if false)
BB13   <- [11]
  void                    Assume             D     %11.13, %11.14 (Typecheck@0x5616610c8ca8[Type#7])
  lgl$-           %13.1 = CastType           d     dn %11.12
  lgl$-           %13.2 = AsLogical                %13.1
  lgl$-           %13.3 = LOr                      %10.2, %13.2
  goto BB14
BB12   <- [11]
  fs              %12.0 = FrameState         R     0x561663916de0+132: [%10.2, %11.12], env=e2.3
  void                    Deopt              !v    %12.0   !
BB21   <- [14]
  goto BB20
BB15   <- [14]
  val?^ | miss    %15.0 = LdVar              eR    v, e2.3
  val?            %15.1 = Force!<wrapped>    !v    %15.0, e2.3   <str$->
  lgl$#-          %15.2 = IsType                   %15.1 isA val?-
  cp              %15.3 = Checkpoint                -> BB17 (default) | BB16 (if assume failed)
BB20   <- [19, 21]
  lgl$-           %20.0 = Phi                      %19.3:BB19, %14.1:BB21
  void                    Return             l     %20.0
BB17   <- [15]
  void                    Visible            v     
  void                    Assume             D     %15.2, %15.3 (Typecheck@0x5616610c8ca8[Type#8])
  val?-           %17.2 = CastType           d     dn %15.1   <str$->
  lgl-            %17.3 = Eq                 vwed  %17.2, "@<-", elided   <lgl$->
  lgl$#-          %17.4 = IsType                   %17.3 isA lgl$-
  cp              %17.5 = Checkpoint                -> BB19 (default) | BB18 (if assume failed)
BB16   <- [15]
  fs              %16.0 = FrameState         R     0x561663916de0+155: [%14.1, %15.1], env=e2.3
  void                    Deopt              !v    %16.0   !
BB19   <- [17]
  void                    Assume             D     %17.4, %17.5 (Typecheck@0x5616610c8ca8[Type#9])
  lgl$-           %19.1 = CastType           d     dn %17.3
  lgl$-           %19.2 = AsLogical                %19.1
  lgl$-           %19.3 = LOr                      %14.1, %19.2
  goto BB20
BB18   <- [17]
  fs              %18.0 = FrameState         R     0x561663916de0+167: [%14.1, %17.3], env=e2.3
  void                    Deopt              !v    %18.0   !
Prom 0:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    v, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 1:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    env, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <env+>
  void                    Return             l     %1.3
Prom 2:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    e, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <(lgl|env)->
  void                    Return             l     %1.3
Prom 3:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    e, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <(lgl|env)->
  void                    Return             l     %1.3
Prom 4:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    .BaseNamespaceEnv, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <env->
  void                    Return             l     %1.3
Prom 5:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    e, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <(lgl|env)+>
  void                    Return             l     %1.3
Prom 6:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    .BaseEnv, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <env->
  void                    Return             l     %1.3

│ FUN[0x561664db5550]                                                          │
└──────────────────────────────────────────────────────────────────────────────┘
