
┌──────────────────────────────────────────────────────────────────────────────┐
│ h[0x561663b143b0]                                                            │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;NonRefl0,NonRefl1,!Obj0,!Obj1        │
│ Properties:                                                                  │
├────── PIR Version After Optimizations
h[0x561663b143b0]
BB0
  goto BB1
BB1   <- [0]
  val?^           %1.0  = LdArg                    1
  val?^           %1.1  = LdArg                    0
  env             e1.2  = MkEnv              l     e=%1.1, w=%1.0, parent=<env 0x56166328f230>, context 1
  (cls|spec|blt)  %1.3  = LdFun              !v    $, <0x561660cbcc10>, <env 0x56166328f230>
  prom-           %1.4  = MkArg                    unboundValue, h[0x561663b143b0]_p0 (!refl), e1.2
  prom-           %1.5  = MkArg                    unboundValue, h[0x561663b143b0]_p1, e1.2
  val?            %1.6  = Call               !v    %1.3(%1.4, %1.5) e1.2   <cls->
  cp              %1.7  = Checkpoint                -> BB2 (default) | BB35 (if assume failed)
BB2   <- [1]
  (cls|spec|blt)  %2.0  = ChkFunction        e     %1.6
  prom-           %2.1  = MkArg                    unboundValue, h[0x561663b143b0]_p2, e1.2
  prom-           %2.2  = MkArg                    unboundValue, h[0x561663b143b0]_p3, e1.2
  lgl$#-          %2.3  = Identical                %2.0, function(type, n, e, w) <(rir::DispatchTable*)|...
  void                    Assume             D     %2.3, %1.7 (CallTarget@0x561661060938[Call#1])
  val?            %2.5  = StaticCall         !v    [0x561663695850]("function", "{", %2.1, %2.2) e1.2
  (cls|spec|blt)  %2.6  = LdFun              !v    <-, <0x561660cb1da8>, e1.2
  prom-           %2.7  = MkArg                    unboundValue, h[0x561663b143b0]_p4, e1.2
  prom-           %2.8  = MkArg                    unboundValue, h[0x561663b143b0]_p7, e1.2
  val?            %2.9  = Call               !v    %2.6(%2.7, %2.8) e1.2
  cp              %2.10 = Checkpoint                -> BB4 (default) | BB3 (if assume failed)
BB35   <- [1]
  fs              %35.0 = FrameState         R     0x561663537580+37: [%1.6], env=e1.2
  void                    Deopt              !v    %35.0   !
BB4   <- [2]
  val?^ | miss    %4.0  = LdVar              eR    length, e1.2
  lgl$#-          %4.1  = Identical                <blt length>, %4.0   <true>
  void                    Assume             D     %4.1, %2.10 (DeadBranchReached@0x561661060938[Test#0])
  val?^ | miss    %4.3  = LdVar              eR    e, e1.2
  val?            %4.4  = Force!<wrapped>    !v    %4.3, e1.2   <code->
  lgl$#-          %4.5  = IsType                   %4.4 isA val?-
  cp              %4.6  = Checkpoint                -> BB6 (default) | BB5 (if assume failed)
BB3   <- [2]
  fs              %3.0  = FrameState         R     0x561663537580+123: [%2.9], env=e1.2
  void                    Deopt              !v    %3.0   !
BB6   <- [4]
  void                    Assume             D     %4.5, %4.6 (Typecheck@0x561661060938[Type#13])
  val?-           %6.1  = CastType           d     dn %4.4   <code->
  (int|real)$-    %6.2  = CallSafeBuiltin    wed   length(%6.1)    <int$->
  lgl$#-          %6.3  = IsType                   %6.2 isA int$-
  cp              %6.4  = Checkpoint                -> BB8 (default) | BB7 (if assume failed)
BB5   <- [4]
  fs              %5.0  = FrameState         R     0x561663537580+193: [<blt length>, %4.4], env=e1.2
  void                    Deopt              !v    %5.0   !
BB8   <- [6]
  void                    Assume             D     %6.3, %6.4 (Typecheck@0x561661060938[Type#14])
  int$-           %8.1  = CastType           d     dn %6.2
  lgl$-           %8.2  = Gt                 d     %8.1, 1, elided   <lgl$->
  lgl$#-          %8.3  = CheckTrueFalse     e     %8.2
  void                    Branch                   %8.3 -> BB11 (if true) | BB9 (if false)
BB7   <- [6]
  fs              %7.0  = FrameState         R     0x561663537580+215: [%6.2], env=e1.2
  void                    Deopt              !v    %7.0   !
BB11   <- [8]
  val?^ | miss    %11.0 = LdVar              eR    length, e1.2
  lgl$#-          %11.1 = Identical                <blt length>, %11.0   <true>
  void                    Assume             D     %11.1, %6.4 (DeadBranchReached@0x561661060938[Test#1])
  val?^ | miss    %11.3 = LdVar              eR    e, e1.2
  val?            %11.4 = Force!<wrapped>    !v    %11.3, e1.2   <code->
  lgl$#-          %11.5 = IsType                   %11.4 isA val?-
  cp              %11.6 = Checkpoint                -> BB13 (default) | BB12 (if assume failed)
BB9   <- [8]
  void                    Invisible          v     
  goto BB10
BB13   <- [11]
  void                    Assume             D     %11.5, %11.6 (Typecheck@0x561661060938[Type#17])
  val?-           %13.1 = CastType           d     dn %11.4   <code->
  (int|real)$-    %13.2 = CallSafeBuiltin    wed   length(%13.1)    <int$->
  lgl$#-          %13.3 = IsType                   %13.2 isA int$-
  cp              %13.4 = Checkpoint                -> BB15 (default) | BB14 (if assume failed)
BB12   <- [11]
  fs              %12.0 = FrameState         R     0x561663537580+325: [2, <blt length>, %11.4], env=e1.2
  void                    Deopt              !v    %12.0   !
BB10   <- [9, 24]
  void                    Return             l     nil
BB15   <- [13]
  void                    Assume             D     %13.3, %13.4 (Typecheck@0x561661060938[Type#18])
  int$-           %15.1 = CastType           d     dn %13.2
  lgl$#-          %15.2 = ColonInputEffects        2, %15.1   <true>
  void                    Assume             D     %15.2, %13.4 (DeadBranchReached@0x561661060938[Test#2])
  int$#-          %15.4 = ColonCastRhs       e     2L, %15.1   <int$->
  lgl$#-          %15.5 = Lte                d     2L, %15.4, elided   <true>
  void                    Assume             D     %15.5, %13.4 (DeadBranchReached@0x561661060938[Test#9])
  lgl$#-          %15.7 = Neq                d     %15.4, 2L, elided   <true>
  void                    Assume             D     %15.7, %13.4 (DeadBranchReached@0x561661060938[Test#10])
  void                    StVar              lW    i, 2L, e1.2
  cp              %15.10 = Checkpoint                -> BB17 (default) | BB16 (if assume failed)
BB14   <- [13]
  fs              %14.0 = FrameState         R     0x561663537580+347: [2, %13.2], env=e1.2
  void                    Deopt              !v    %14.0   !
BB17   <- [15]
  val?^ | miss    %17.0 = LdVar              eR    attr, e1.2
  lgl$#-          %17.1 = Identical                <blt attr>, %17.0   <true>
  void                    Assume             D     %17.1, %15.10 (DeadBranchReached@0x561661060938[Test#11])
  val?^ | miss    %17.3 = LdVar              eR    e, e1.2
  val?            %17.4 = Force!<wrapped>    !v    %17.3, e1.2   <code->
  val?            %17.5 = CallBuiltin        !v    attr(%17.4, "srcref") e1.2   <nil->
  lgl$#-          %17.6 = IsType                   %17.5 isA val+   <true>
  lgl$#-          %17.7 = IsType                   %17.5 isA val?-
  cp              %17.8 = Checkpoint                -> BB19 (default) | BB18 (if assume failed)
BB16   <- [15]
  fs              %16.0 = FrameState         R     0x561663537580+479: [1L, %15.4, 2L], env=e1.2
  void                    Deopt              !v    %16.0   !
BB19   <- [17]
  void                    Assume             D     %17.6, %17.8 (DeadBranchReached@0x561661060938[Test#12])
  val?^ | miss    %19.1 = LdVar              eR    i, e1.2
  lgl$#-          %19.2 = IsType                   %19.1 isA int$-
  void                    Assume             D     %19.2, %17.8 (Typecheck@0x561661060938[Type#58])
  int$-           %19.4 = CastType           d     dn %19.1
  void                    Assume             D     %17.7, %17.8 (Typecheck@0x561661060938[Type#56])
  val?-           %19.6 = CastType           d     dn %17.5   <nil->
  val?            %19.7 = Extract2_1D        wed   %19.6, %19.4, elided   <nil->
  lgl$-           %19.8 = Is                       %19.7, NULL
  cp              %19.9 = Checkpoint                -> BB21 (default) | BB20 (if assume failed)
BB18   <- [17]
  fs              %18.0 = FrameState         R     0x561663537580+588: [1L, %15.4, 3L, %17.5], env=e1.2
  void                    Deopt              !v    %18.0   !
BB21   <- [19]
  lgl$-           %21.0 = Not                d     %19.8, elided
  lgl$#-          %21.1 = CheckTrueFalse     e     %21.0
  void                    Branch                   %21.1 -> BB34 (if true) | BB22 (if false)
BB20   <- [19]
  fs              %20.0 = FrameState         R     0x561663537580+639: [1L, %15.4, 3L, %19.7], env=e1.2
  void                    Deopt              !v    %20.0   !
BB34   <- [21]
  (cls|spec|blt)  %34.0 = LdFun              !v    <-, e1.2
  fs              %34.1 = FrameState         R     0x561663537580+667: [1L, %15.4, 3L, %34.0], env=e1.2
  void                    Deopt              !v    %34.1, DeadCall@0x561661060938[Call#18], %34.0   !
BB22   <- [21]
  val?^ | miss    %22.0 = LdVar              eR    walkCode, e1.2
  lgl$#-          %22.1 = Identical                %22.0, function(e, w=makeCodeWalker()) <(rir::Dispatc|...
  void                    Assume             D     %22.1, %19.9 (CallTarget@0x561661060938[Call#24])
  prom-           %22.3 = MkArg                    unboundValue, h[0x561663b143b0]_p11, e1.2
  prom-           %22.4 = MkArg                    unboundValue, h[0x561663b143b0]_p13, e1.2
  val?            %22.5 = StaticCall         !v    walkCode[0x561664424f60](%22.3, %22.4) e1.2
  goto BB23
BB23   <- [22, 32]
  int$#-          %23.0 = Phi                      3L:BB22, %27.0:BB32
  lgl$#-          %23.1 = Neq                d     %15.4, %23.0, elided
  void                    Branch                   %23.1 -> BB25 (if true) | BB24 (if false)
BB25   <- [23]
  void                    StVar              lW    i, %23.0, e1.2
  cp              %25.1 = Checkpoint                -> BB27 (default) | BB26 (if assume failed)
BB24   <- [23]
  void                    Invisible          v     
  goto BB10
BB27   <- [25]
  int$#-          %27.0 = Add                d     %23.0, 1L, elided
  val?^ | miss    %27.1 = LdVar              eR    attr, e1.2
  lgl$#-          %27.2 = Identical                <blt attr>, %27.1   <true>
  void                    Assume             D     %27.2, %25.1 (DeadBranchReached@0x561661060938[Test#18])
  val?^ | miss    %27.4 = LdVar              eR    e, e1.2
  val?            %27.5 = Force!<wrapped>    !v    %27.4, e1.2   <code->
  val?            %27.6 = CallBuiltin        !v    attr(%27.5, "srcref") e1.2   <nil->
  lgl$#-          %27.7 = IsType                   %27.6 isA val+   <true>
  lgl$#-          %27.8 = IsType                   %27.6 isA val?-
  cp              %27.9 = Checkpoint                -> BB29 (default) | BB28 (if assume failed)
BB26   <- [25]
  fs              %26.0 = FrameState         R     0x561663537580+793: [1L, %15.4, %23.0], env=e1.2
  void                    Deopt              !v    %26.0   !
BB29   <- [27]
  void                    Assume             D     %27.7, %27.9 (DeadBranchReached@0x561661060938[Test#19])
  val?^ | miss    %29.1 = LdVar              eR    i, e1.2
  lgl$#-          %29.2 = IsType                   %29.1 isA int$-
  void                    Assume             D     %29.2, %27.9 (Typecheck@0x561661060938[Type#87])
  int$-           %29.4 = CastType           d     dn %29.1
  void                    Assume             D     %27.8, %27.9 (Typecheck@0x561661060938[Type#85])
  val?-           %29.6 = CastType           d     dn %27.6   <nil->
  val?            %29.7 = Extract2_1D        wed   %29.6, %29.4, elided   <nil->
  lgl$-           %29.8 = Is                       %29.7, NULL
  cp              %29.9 = Checkpoint                -> BB31 (default) | BB30 (if assume failed)
BB28   <- [27]
  fs              %28.0 = FrameState         R     0x561663537580+902: [1L, %15.4, %27.0, %27.6], env=e1.2
  void                    Deopt              !v    %28.0   !
BB31   <- [29]
  lgl$-           %31.0 = Not                d     %29.8, elided
  lgl$#-          %31.1 = CheckTrueFalse     e     %31.0
  void                    Branch                   %31.1 -> BB33 (if true) | BB32 (if false)
BB30   <- [29]
  fs              %30.0 = FrameState         R     0x561663537580+953: [1L, %15.4, %27.0, %29.7], env=e1.2
  void                    Deopt              !v    %30.0   !
BB33   <- [31]
  (cls|spec|blt)  %33.0 = LdFun              !v    <-, e1.2
  fs              %33.1 = FrameState         R     0x561663537580+981: [1L, %15.4, %27.0, %33.0], env=e1.2
  void                    Deopt              !v    %33.1, DeadCall@0x561661060938[Call#26], %33.0   !
BB32   <- [31]
  val?^ | miss    %32.0 = LdVar              eR    walkCode, e1.2
  lgl$#-          %32.1 = Identical                %32.0, function(e, w=makeCodeWalker()) <(rir::Dispatc|...
  void                    Assume             D     %32.1, %29.9 (CallTarget@0x561661060938[Call#32])
  prom-           %32.3 = MkArg                    unboundValue, h[0x561663b143b0]_p14, e1.2
  prom-           %32.4 = MkArg                    unboundValue, h[0x561663b143b0]_p16, e1.2
  val?            %32.5 = StaticCall         !v    walkCode[0x561664424f60](%32.3, %32.4) e1.2
  goto BB23
Prom 0:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    w, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 1:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    enterGlobal, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 2:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    e, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <code->
  void                    Return             l     %1.3
Prom 3:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    w, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 4:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     $, e1.0
  prom-           %1.2  = MkArg                    unboundValue, h[0x561663b143b0]_p5, e1.0
  prom-           %1.3  = MkArg                    unboundValue, h[0x561663b143b0]_p6, e1.0
  val?            %1.4  = Call               !     %1.1(%1.2, %1.3) e1.0   <val?_>
  void                    Return             l     %1.4
Prom 5:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    w, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 6:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    srcfile, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 7:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     $, e1.0
  prom-           %1.2  = MkArg                    unboundValue, h[0x561663b143b0]_p8, e1.0
  prom-           %1.3  = MkArg                    unboundValue, h[0x561663b143b0]_p10, e1.0
  val?            %1.4  = Call               !     %1.1(%1.2, %1.3) e1.0   <val?_>
  void                    Return             l     %1.4
Prom 8:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     attr, e1.0
  prom-           %1.2  = MkArg                    unboundValue, h[0x561663b143b0]_p9, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2, "srcfile") e1.0   <val?_>
  void                    Return             l     %1.3
Prom 9:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    e, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 10:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    filename, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 11:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    e, e1.0
  val?            %1.2  = Force<wrapped>     !v    %1.1, e1.0   <code->
  lgl$#-          %1.3  = IsType                   %1.2 isA val+   <true>
  void                    Branch                   %1.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [1]
  val?^ | miss    %2.0  = LdVar              eR    i, e1.0
  val?            %2.1  = Force<value>       !v    %2.0, e1.0   <int$->
  goto BB3
BB4   <- [1]
  prom-           %4.0  = MkArg                    unboundValue, h[0x561663b143b0]_p12, e1.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.1:BB2, %4.0:BB4
  val?            %3.1  = Extract2_1D        !v    %1.2, %3.0, e1.0   <code->
  void                    Visible            v     
  void                    Return             l     %3.1
Prom 12:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    i, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 13:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    w, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 14:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    e, e1.0
  val?            %1.2  = Force<wrapped>     !v    %1.1, e1.0   <code->
  lgl$#-          %1.3  = IsType                   %1.2 isA val+   <true>
  void                    Branch                   %1.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [1]
  val?^ | miss    %2.0  = LdVar              eR    i, e1.0
  val?            %2.1  = Force<value>       !v    %2.0, e1.0   <int$->
  goto BB3
BB4   <- [1]
  prom-           %4.0  = MkArg                    unboundValue, h[0x561663b143b0]_p15, e1.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.1:BB2, %4.0:BB4
  val?            %3.1  = Extract2_1D        !v    %1.2, %3.0, e1.0   <val?->
  void                    Visible            v     
  void                    Return             l     %3.1
Prom 15:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    i, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 16:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    w, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3

│ h[0x561663b143b0]                                                            │
└──────────────────────────────────────────────────────────────────────────────┘
