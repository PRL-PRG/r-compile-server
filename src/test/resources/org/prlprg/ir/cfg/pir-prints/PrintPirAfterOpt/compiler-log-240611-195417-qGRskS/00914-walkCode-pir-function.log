
┌──────────────────────────────────────────────────────────────────────────────┐
│ walkCode[0x56166407a960]                                                     │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;NonRefl0                             │
│ Properties:                                                                  │
├────── PIR Version After Optimizations
walkCode[0x56166407a960]
BB0
  goto BB1
BB1   <- [0]
  val?^           %1.0  = LdArg                    1
  val?^           %1.1  = LdArg                    0
  cp              %1.2  = Checkpoint                -> BB2 (default) | BB16 (if assume failed)
BB2   <- [1]
  val?^ | miss    %2.0  = LdVar              eR    typeof, <env 0x56166328f230>
  lgl$#-          %2.1  = Identical                %2.0, function(x) <(rir::DispatchTable*)0x5616632751|...
  void                    Assume             D     %2.1, %1.2 (CallTarget@0x561661f13fe8[Call#1])
  env             e2.3  = MkEnv              l     e=%1.1, w=%1.0, parent=<env 0x56166328f230>, context 1
  val?            %2.4  = Force!<lazy>       !vr   %1.1,    <val?->
  prom-           %2.5  = MkArg                    %2.4, walkCode[0x56166407a960]_p1 (!refl), 
  val?            %2.6  = StaticCall         !v    typeof[0x5616622292c0](%2.5) e2.3   <str$->
  lgl$#-          %2.7  = IsType                   %2.6 isA val?-
  cp              %2.8  = Checkpoint                -> BB4 (default) | BB3 (if assume failed)
BB16   <- [1]
  env             e16.0 = (MkEnv)            l     e=%1.1, w=%1.0, parent=<env 0x56166328f230>, context 1
  fs              %16.1 = FrameState         R     0x5616633efb60+0: [], env=e16.0
  void                    Deopt              !v    %16.1
BB4   <- [2]
  void                    Visible            v     
  void                    Assume             D     %2.7, %2.8 (Typecheck@0x561661f13fe8[Type#2])
  val?-           %4.2  = CastType           d     dn %2.6   <str$->
  lgl-            %4.3  = Eq                 vwed  %4.2, "language", elided   <lgl$->
  lgl$#-          %4.4  = IsType                   %4.3 isA lgl$-
  cp              %4.5  = Checkpoint                -> BB6 (default) | BB5 (if assume failed)
BB3   <- [2]
  fs              %3.0  = FrameState         R     0x5616633efb60+32: [%2.6], env=e2.3
  void                    Deopt              !v    %3.0   !
BB6   <- [4]
  void                    Assume             D     %4.4, %4.5 (Typecheck@0x561661f13fe8[Type#3])
  lgl$-           %6.1  = CastType           d     dn %4.3
  lgl$#-          %6.2  = CheckTrueFalse     e     %6.1
  void                    Branch                   %6.2 -> BB9 (if true) | BB7 (if false)
BB5   <- [4]
  fs              %5.0  = FrameState         R     0x5616633efb60+44: [%4.3], env=e2.3
  void                    Deopt              !v    %5.0   !
BB9   <- [6]
  val?^ | miss    %9.0  = LdVar              eR    %in%, e2.3
  lgl$#-          %9.1  = Identical                %9.0, function(x, table) <(rir::DispatchTable*)0x561|...
  void                    Assume             D     %9.1, %4.5 (CallTarget@0x561661f13fe8[Call#4])
  prom-           %9.3  = MkArg                    unboundValue, walkCode[0x56166407a960]_p2, e2.3
  prom-           %9.4  = MkArg                    unboundValue, walkCode[0x56166407a960]_p4, e2.3
  val?            %9.5  = StaticCall         !     %in%[0x5616636d6c90](%9.3, %9.4) e2.3   <lgl$->
  lgl$#-          %9.6  = IsType                   %9.5 isA lgl$-
  cp              %9.7  = Checkpoint                -> BB11 (default) | BB10 (if assume failed)
BB7   <- [6]
  (cls|spec|blt)  %7.0  = LdFun              !     $, <0x561660cbcc10>, e2.3
  prom-           %7.1  = MkArg                    unboundValue, walkCode[0x56166407a960]_p5, e2.3
  prom-           %7.2  = MkArg                    unboundValue, walkCode[0x56166407a960]_p6, e2.3
  val?            %7.3  = Call               !     %7.0(%7.1, %7.2) e2.3   <cls->
  (cls|spec|blt)  %7.4  = ChkFunction        e     %7.3
  prom-           %7.5  = MkArg                    unboundValue, walkCode[0x56166407a960]_p7, e2.3
  prom-           %7.6  = MkArg                    unboundValue, walkCode[0x56166407a960]_p8, e2.3
  val?            %7.7  = Call               !     %7.4(%7.5, %7.6) e2.3   <val?>
  goto BB8
BB11   <- [9]
  void                    Assume             D     %9.6, %9.7 (Typecheck@0x561661f13fe8[Type#14])
  lgl$-           %11.1 = CastType           d     dn %9.5
  lgl$#-          %11.2 = CheckTrueFalse     e     %11.1
  void                    Branch                   %11.2 -> BB13 (if true) | BB12 (if false)
BB10   <- [9]
  fs              %10.0 = FrameState         R     0x5616633efb60+177: [%9.5], env=e2.3
  void                    Deopt              !v    %10.0   !
BB8   <- [7, 12, 15, 14]
  val?            %8.0  = Phi                      %7.7:BB7, %12.7:BB12, %14.7:BB14, %15.3:BB15
  void                    Return             l     %8.0
BB13   <- [11]
  (cls|spec|blt)  %13.0 = LdFun              !v    $, <0x561660cbcc10>, e2.3
  prom-           %13.1 = MkArg                    unboundValue, walkCode[0x56166407a960]_p9, e2.3
  prom-           %13.2 = MkArg                    unboundValue, walkCode[0x56166407a960]_p10, e2.3
  val?            %13.3 = Call               !v    %13.0(%13.1, %13.2) e2.3   <cls->
  (cls|spec|blt)  %13.4 = ChkFunction        e     %13.3
  prom-           %13.5 = MkArg                    unboundValue, walkCode[0x56166407a960]_p11, e2.3
  prom-           %13.6 = MkArg                    unboundValue, walkCode[0x56166407a960]_p13, e2.3
  val?            %13.7 = Call               !v    %13.4(%13.5, %13.6) e2.3   <(nil|cls)->
  lgl$-           %13.8 = Is                       %13.7, NULL
  void                    StVar              lW    h, %13.7, e2.3
  val             %13.10 = ChkMissing         e     %13.7
  void                    Visible            v     
  lgl$-           %13.12 = Not                vd    %13.8, elided
  lgl$#-          %13.13 = CheckTrueFalse     e     %13.12
  void                    Branch                   %13.13 -> BB15 (if true) | BB14 (if false)
BB12   <- [11]
  (cls|spec|blt)  %12.0 = LdFun              !     $, <0x561660cbcc10>, e2.3
  prom-           %12.1 = MkArg                    unboundValue, walkCode[0x56166407a960]_p14, e2.3
  prom-           %12.2 = MkArg                    unboundValue, walkCode[0x56166407a960]_p15, e2.3
  val?            %12.3 = Call               !     %12.0(%12.1, %12.2) e2.3   <cls->
  (cls|spec|blt)  %12.4 = ChkFunction        e     %12.3
  prom-           %12.5 = MkArg                    unboundValue, walkCode[0x56166407a960]_p16, e2.3
  prom-           %12.6 = MkArg                    unboundValue, walkCode[0x56166407a960]_p17, e2.3
  val?            %12.7 = Call               !     %12.4(%12.5, %12.6) e2.3   <nil->
  goto BB8
BB15   <- [13]
  (cls|spec|blt)  %15.0 = LdFun              !     h, <%13.7>, e2.3
  prom-           %15.1 = MkArg                    unboundValue, walkCode[0x56166407a960]_p18, e2.3
  prom-           %15.2 = MkArg                    unboundValue, walkCode[0x56166407a960]_p19, e2.3
  val?            %15.3 = Call               !     %15.0(%15.1, %15.2) e2.3   <val?>
  goto BB8
BB14   <- [13]
  (cls|spec|blt)  %14.0 = LdFun              !     $, <0x561660cbcc10>, e2.3
  prom-           %14.1 = MkArg                    unboundValue, walkCode[0x56166407a960]_p20, e2.3
  prom-           %14.2 = MkArg                    unboundValue, walkCode[0x56166407a960]_p21, e2.3
  val?            %14.3 = Call               !     %14.0(%14.1, %14.2) e2.3   <cls->
  (cls|spec|blt)  %14.4 = ChkFunction        e     %14.3
  prom-           %14.5 = MkArg                    unboundValue, walkCode[0x56166407a960]_p22, e2.3
  prom-           %14.6 = MkArg                    unboundValue, walkCode[0x56166407a960]_p23, e2.3
  val?            %14.7 = Call               !     %14.4(%14.5, %14.6) e2.3   <nil->
  goto BB8
Prom 1:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    e, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <val?->
  void                    Return             l     %1.3
Prom 2:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     typeof, <0x5616632719d0>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, walkCode[0x56166407a960]_p3, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <str$->
  void                    Return             l     %1.3
Prom 3:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    e, e1.0
  val?            %1.2  = Force<wrapped>     !v    %1.1, e1.0   <code->
  val?            %1.3  = Extract2_1D        !v    %1.2, 1, e1.0   <(sym|code)->
  void                    Visible            v     
  void                    Return             l     %1.3
Prom 4:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     c, <0x561660cbd940>, e1.0
  val?            %1.2  = Call               !     %1.1("symbol", "character") e1.0   <str->
  void                    Return             l     %1.2
Prom 5:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    w, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 6:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    leaf, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 7:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    e, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <val?->
  void                    Return             l     %1.3
Prom 8:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    w, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 9:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    w, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 10:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    handler, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 11:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     as.character, <0x561660cca040>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, walkCode[0x56166407a960]_p12, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <str$->
  void                    Return             l     %1.3
Prom 12:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    e, e1.0
  val?            %1.2  = Force<wrapped>     !v    %1.1, e1.0   <code->
  val?            %1.3  = Extract2_1D        !v    %1.2, 1, e1.0   <sym->
  void                    Visible            v     
  void                    Return             l     %1.3
Prom 13:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    w, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 14:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    w, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 15:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    call, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 16:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    e, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <code->
  void                    Return             l     %1.3
Prom 17:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    w, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 18:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    e, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <code->
  void                    Return             l     %1.3
Prom 19:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    w, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 20:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    w, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 21:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    call, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 22:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    e, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <code->
  void                    Return             l     %1.3
Prom 23:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    w, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3

│ walkCode[0x56166407a960]                                                     │
└──────────────────────────────────────────────────────────────────────────────┘
