
┌──────────────────────────────────────────────────────────────────────────────┐
│ [0x561663375980]                                                             │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;Eager0,NonRefl0,NonRefl1,NonRefl2,NonRefl3,!Obj0,!Obj1,!Obj2,!Obj3│
│ Properties:                                                                  │
├────── PIR Version After Optimizations
[0x561663375980]
BB0
  goto BB1
BB1   <- [0]
  val?^           %1.0  = LdArg                    3
  val?^           %1.1  = LdArg                    2
  val?^           %1.2  = LdArg                    1
  val?~+          %1.3  = LdArg                    0
  val+            %1.4  = Force<value>             %1.3,    <str$->
  cp              %1.5  = Checkpoint                -> BB2 (default) | BB49 (if assume failed)
BB2   <- [1]
  val?^ | miss    %2.0  = LdVar              eR    %in%, <env 0x56166328f230>
  lgl$#-          %2.1  = Identical                %2.0, function(x, table) <(rir::DispatchTable*)0x561|...
  void                    Assume             D     %2.1, %1.5 (CallTarget@0x561663775890[Call#0])
  env             e2.3  = MkEnv              l     type=%1.3, n=%1.2, e=%1.1, w=%1.0, parent=<env 0x56166328f230>, context 1
  prom-           %2.4  = MkArg                    unboundValue, [0x561663375980]_p1, e2.3
  val?            %2.5  = StaticCall         !v    %in%[0x561664c83510](%1.4, %2.4) e2.3   <lgl$->
  lgl$#-          %2.6  = IsType                   %2.5 isA lgl$-
  cp              %2.7  = Checkpoint                -> BB4 (default) | BB3 (if assume failed)
BB49   <- [1]
  env             e49.0 = (MkEnv)            l     type=%1.3, n=%1.2, e=%1.1, w=%1.0, parent=<env 0x56166328f230>, context 1
  fs              %49.1 = FrameState         R     0x561663472770+0: [], env=e49.0
  void                    Deopt              !v    %49.1
BB4   <- [2]
  void                    Assume             D     %2.6, %2.7 (Typecheck@0x561663775890[Type#2])
  lgl$-           %4.1  = CastType           d     dn %2.5
  lgl$-           %4.2  = AsLogical                %4.1
  lgl$#-          %4.3  = Identical                %4.2, false
  void                    Branch                   %4.3 -> BB48 (if true) | BB5 (if false)
BB3   <- [2]
  fs              %3.0  = FrameState         R     0x561663472770+37: [%2.5], env=e2.3
  void                    Deopt              !v    %3.0   !
BB48   <- [4]
  goto BB8
BB5   <- [4]
  val?^ | miss    %5.0  = LdVar              eR    isSimpleFunDef, e2.3
  lgl$#-          %5.1  = Identical                %5.0, function(e, w) <(rir::DispatchTable*)0x5616635|...
  void                    Assume             D     %5.1, %2.7 (CallTarget@0x561663775890[Call#2])
  prom-           %5.3  = MkArg                    unboundValue, [0x561663375980]_p2, e2.3
  prom-           %5.4  = MkArg                    unboundValue, [0x561663375980]_p3, e2.3
  val?            %5.5  = StaticCall         !v    isSimpleFunDef[0x56166335de30](%5.3, %5.4) e2.3   <lgl$->
  lgl$#-          %5.6  = IsType                   %5.5 isA lgl$-
  cp              %5.7  = Checkpoint                -> BB7 (default) | BB6 (if assume failed)
BB8   <- [7, 48]
  lgl$-           %8.0  = Phi                      %7.3:BB7, %4.2:BB48
  lgl$#-          %8.1  = CheckTrueFalse     e     %8.0
  void                    Branch                   %8.1 -> BB47 (if true) | BB9 (if false)
BB7   <- [5]
  void                    Assume             D     %5.6, %5.7 (Typecheck@0x561663775890[Type#5])
  lgl$-           %7.1  = CastType           d     dn %5.5
  lgl$-           %7.2  = AsLogical                %7.1
  lgl$-           %7.3  = LAnd                     %4.2, %7.2
  goto BB8
BB6   <- [5]
  fs              %6.0  = FrameState         R     0x561663472770+86: [%4.2, %5.5], env=e2.3
  void                    Deopt              !v    %6.0   !
BB47   <- [8]
  void                    StVar              lW    type, "fundef", e2.3
  goto BB10
BB9   <- [8]
  goto BB10
BB10   <- [9, 47]
  val?^ | miss    %10.0 = LdVar              eR    type, e2.3
  val?            %10.1 = Force!<value>      !v    %10.0, e2.3   <str$->
  lgl$-           %10.2 = Is                       %10.1, logical
  lgl$-           %10.3 = Is                       %10.1, integer
  lgl$-           %10.4 = Is                       %10.1, double
  lgl$-           %10.5 = Is                       %10.1, complex
  lgl$-           %10.6 = Is                       %10.1, character   <true>
  lgl$-           %10.7 = Is                       %10.1, raw
  lgl$-           %10.8 = Is                       %10.1, list
  lgl$-           %10.9 = Is                       %10.1, expression
  lgl$-           %10.10 = LOr                      %10.9, %10.8
  lgl$-           %10.11 = LOr                      %10.10, %10.7
  lgl$-           %10.12 = LOr                      %10.11, %10.6
  lgl$-           %10.13 = LOr                      %10.12, %10.5
  lgl$-           %10.14 = LOr                      %10.13, %10.4
  lgl$-           %10.15 = LOr                      %10.14, %10.3
  lgl$-           %10.16 = LOr                      %10.15, %10.2   <true>
  lgl$#-          %10.17 = Identical                %10.16, true
  int$-           %10.18 = Length                   %10.1
  lgl$-           %10.19 = Is                       %10.1, Factor   <false>
  lgl$#-          %10.20 = Identical                %10.19, false
  lgl$#-          %10.21 = Identical                %10.6, true
  lgl$#-          %10.22 = IsType                   %10.1 isA val?-
  cp              %10.23 = Checkpoint                -> BB12 (default) | BB11 (if assume failed)
BB12   <- [10]
  void                    Assume             D     %10.17, %10.23 (DeadBranchReached@0x561663775890[Test#0])
  lgl$-           %12.1 = Eq                 d     %10.18, 1L, elided   <true>
  lgl$#-          %12.2 = Identical                %12.1, true
  void                    Assume             D     %12.2, %10.23 (DeadBranchReached@0x561663775890[Test#1])
  void                    Assume             D     %10.20, %10.23 (DeadBranchReached@0x561663775890[Test#2])
  void                    Assume             D     %10.21, %10.23 (DeadBranchReached@0x561663775890[Test#3])
  void                    Assume             D     %10.22, %10.23 (Typecheck@0x561663775890[Type#6])
  val?-           %12.7 = CastType           d     dn %10.1   <str$->
  lgl-            %12.8 = CallSafeBuiltin    vwed  is.na(%12.7) 
  lgl$#-          %12.9 = CheckTrueFalse     we    %12.8   <false>
  cp              %12.10 = Checkpoint                -> BB14 (default) | BB13 (if assume failed)
BB11   <- [10]
  fs              %11.0 = FrameState         R     0x561663472770+128: [%10.1], env=e2.3
  void                    Deopt              !v    %11.0   !
BB14   <- [12]
  void                    AssumeNot          D     %12.9, %12.10 (DeadBranchReached@0x561663775890[Test#10])
  lgl-            %14.1 = Eq                 vwed  %12.7, <-, elided
  lgl$#-          %14.2 = CheckTrueFalse     we    %14.1
  void                    Branch                   %14.2 -> BB46 (if true) | BB15 (if false)
BB13   <- [12]
  fs              %13.0 = FrameState         R     0x561663472770+391: [%12.7, %12.9], env=e2.3
  void                    Deopt              !v    %13.0   !
BB46   <- [14]
  goto BB41
BB15   <- [14]
  lgl-            %15.0 = Eq                 vwed  %12.7, <<-, elided
  lgl$#-          %15.1 = CheckTrueFalse     we    %15.0
  void                    Branch                   %15.1 -> BB40 (if true) | BB16 (if false)
BB41   <- [40, 46]
  cp              %41.0 = Checkpoint                -> BB43 (default) | BB42 (if assume failed)
BB40   <- [15]
  goto BB41
BB16   <- [15]
  lgl-            %16.0 = Eq                 vwed  %12.7, variable, elided
  lgl$#-          %16.1 = CheckTrueFalse     we    %16.0
  cp              %16.2 = Checkpoint                -> BB18 (default) | BB17 (if assume failed)
BB43   <- [41]
  val?^ | miss    %43.0 = LdVar              eR    incLocalUsageValue, e2.3
  lgl$#-          %43.1 = Identical                %43.0, function(vn, which, w) <(rir::DispatchTable*)0|...
  void                    Assume             D     %43.1, %41.0 (CallTarget@0x561663775890[Call#3])
  prom-           %43.3 = MkArg                    unboundValue, [0x561663375980]_p15, e2.3
  prom-           %43.4 = MkArg                    unboundValue, [0x561663375980]_p16, e2.3
  val?            %43.5 = StaticCall         !     incLocalUsageValue[0x561664272360](%43.3, "assigns", %43.4) e2.3   <real$->
  lgl$#-          %43.6 = IsType                   %43.5 isA real$-
  cp              %43.7 = Checkpoint                -> BB45 (default) | BB44 (if assume failed)
BB42   <- [41]
  fs              %42.0 = FrameState         R     0x561663472770+544: [%12.7], env=e2.3
  void                    Deopt              !v    %42.0   !
BB18   <- [16]
  void                    Branch                   %16.1 -> BB37 (if true) | BB19 (if false)
BB17   <- [16]
  fs              %17.0 = FrameState         R     0x561663472770+451: [%12.7, %16.1], env=e2.3
  void                    Deopt              !v    %17.0   !
BB45   <- [43]
  void                    Assume             D     %43.6, %43.7 (Typecheck@0x561663775890[Type#9])
  goto BB28
BB44   <- [43]
  fs              %44.0 = FrameState         R     0x561663472770+587: [%43.5], env=e2.3
  void                    Deopt              !v    %44.0   !
BB37   <- [18]
  val?^ | miss    %37.0 = LdVar              eR    incLocalUsageValue, e2.3
  lgl$#-          %37.1 = Identical                %37.0, function(vn, which, w) <(rir::DispatchTable*)0|...
  void                    Assume             D     %37.1, %16.2 (CallTarget@0x561663775890[Call#4])
  prom-           %37.3 = MkArg                    unboundValue, [0x561663375980]_p13, e2.3
  prom-           %37.4 = MkArg                    unboundValue, [0x561663375980]_p14, e2.3
  val?            %37.5 = StaticCall         !     incLocalUsageValue[0x561664272360](%37.3, "varuses", %37.4) e2.3   <real$->
  lgl$#-          %37.6 = IsType                   %37.5 isA real$-
  cp              %37.7 = Checkpoint                -> BB39 (default) | BB38 (if assume failed)
BB19   <- [18]
  lgl-            %19.0 = Eq                 vwed  %12.7, function, elided
  lgl$#-          %19.1 = CheckTrueFalse     we    %19.0
  cp              %19.2 = Checkpoint                -> BB21 (default) | BB20 (if assume failed)
BB28   <- [33, 36, 39, 45, 27]
  val?            %28.0 = Phi                      %27.7:BB27, %31.5:BB33, %34.5:BB36, %37.5:BB39, %43.5:BB45
  cp              %28.1 = Checkpoint                -> BB30 (default) | BB29 (if assume failed)
BB39   <- [37]
  void                    Assume             D     %37.6, %37.7 (Typecheck@0x561663775890[Type#12])
  goto BB28
BB38   <- [37]
  fs              %38.0 = FrameState         R     0x561663472770+640: [%37.5], env=e2.3
  void                    Deopt              !v    %38.0   !
BB21   <- [19]
  void                    Branch                   %19.1 -> BB34 (if true) | BB22 (if false)
BB20   <- [19]
  fs              %20.0 = FrameState         R     0x561663472770+469: [%12.7, %19.1], env=e2.3
  void                    Deopt              !v    %20.0   !
BB30   <- [28]
  val?^ | miss    %30.0 = LdVar              eR    incLocalSrcInfo, e2.3
  lgl$#-          %30.1 = Identical                %30.0, function(vn, w) <(rir::DispatchTable*)0x561663|...
  void                    Assume             D     %30.1, %28.1 (CallTarget@0x561663775890[Call#8])
  prom-           %30.3 = MkArg                    unboundValue, [0x561663375980]_p7, e2.3
  prom-           %30.4 = MkArg                    unboundValue, [0x561663375980]_p8, e2.3
  val?            %30.5 = StaticCall         !     incLocalSrcInfo[0x561662f26930](%30.3, %30.4) e2.3   <vec>
  void                    Return             l     %30.5
BB29   <- [28]
  fs              %29.0 = FrameState         R     0x561663472770+815: [%28.0], env=e2.3
  void                    Deopt              !v    %29.0   !
BB34   <- [21]
  val?^ | miss    %34.0 = LdVar              eR    incLocalUsageValue, e2.3
  lgl$#-          %34.1 = Identical                %34.0, function(vn, which, w) <(rir::DispatchTable*)0|...
  void                    Assume             D     %34.1, %19.2 (CallTarget@0x561663775890[Call#5])
  prom-           %34.3 = MkArg                    unboundValue, [0x561663375980]_p11, e2.3
  prom-           %34.4 = MkArg                    unboundValue, [0x561663375980]_p12, e2.3
  val?            %34.5 = StaticCall         !     incLocalUsageValue[0x561664272360](%34.3, "funuses", %34.4) e2.3   <real$->
  lgl$#-          %34.6 = IsType                   %34.5 isA real$-
  cp              %34.7 = Checkpoint                -> BB36 (default) | BB35 (if assume failed)
BB22   <- [21]
  lgl-            %22.0 = Eq                 vwed  %12.7, for, elided
  lgl$#-          %22.1 = CheckTrueFalse     we    %22.0
  cp              %22.2 = Checkpoint                -> BB24 (default) | BB23 (if assume failed)
BB36   <- [34]
  void                    Assume             D     %34.6, %34.7 (Typecheck@0x561663775890[Type#15])
  goto BB28
BB35   <- [34]
  fs              %35.0 = FrameState         R     0x561663472770+693: [%34.5], env=e2.3
  void                    Deopt              !v    %35.0   !
BB24   <- [22]
  void                    Branch                   %22.1 -> BB31 (if true) | BB25 (if false)
BB23   <- [22]
  fs              %23.0 = FrameState         R     0x561663472770+487: [%12.7, %22.1], env=e2.3
  void                    Deopt              !v    %23.0   !
BB31   <- [24]
  val?^ | miss    %31.0 = LdVar              eR    incLocalUsageValue, e2.3
  lgl$#-          %31.1 = Identical                %31.0, function(vn, which, w) <(rir::DispatchTable*)0|...
  void                    Assume             D     %31.1, %22.2 (CallTarget@0x561663775890[Call#6])
  prom-           %31.3 = MkArg                    unboundValue, [0x561663375980]_p9, e2.3
  prom-           %31.4 = MkArg                    unboundValue, [0x561663375980]_p10, e2.3
  val?            %31.5 = StaticCall         !     incLocalUsageValue[0x561664272360](%31.3, "loopvars", %31.4) e2.3   <real$->
  lgl$#-          %31.6 = IsType                   %31.5 isA real$-
  cp              %31.7 = Checkpoint                -> BB33 (default) | BB32 (if assume failed)
BB25   <- [24]
  lgl-            %25.0 = Eq                 vwed  %12.7, fundef, elided
  lgl$#-          %25.1 = CheckTrueFalse     we    %25.0   <true>
  cp              %25.2 = Checkpoint                -> BB27 (default) | BB26 (if assume failed)
BB33   <- [31]
  void                    Assume             D     %31.6, %31.7 (Typecheck@0x561663775890[Type#18])
  goto BB28
BB32   <- [31]
  fs              %32.0 = FrameState         R     0x561663472770+746: [%31.5], env=e2.3
  void                    Deopt              !v    %32.0   !
BB27   <- [25]
  void                    Assume             D     %25.1, %25.2 (DeadBranchReached@0x561663775890[Test#16])
  val?^ | miss    %27.1 = LdVar              eR    addLocalFunDef, e2.3
  lgl$#-          %27.2 = Identical                %27.1, function(vn, e, w) <(rir::DispatchTable*)0x561|...
  void                    Assume             D     %27.2, %25.2 (CallTarget@0x561663775890[Call#7])
  prom-           %27.4 = MkArg                    unboundValue, [0x561663375980]_p4, e2.3
  prom-           %27.5 = MkArg                    unboundValue, [0x561663375980]_p5, e2.3
  prom-           %27.6 = MkArg                    unboundValue, [0x561663375980]_p6, e2.3
  val?            %27.7 = StaticCall         !     addLocalFunDef[0x561661106660](%27.4, %27.5, %27.6) e2.3   <vec$->
  goto BB28
BB26   <- [25]
  fs              %26.0 = FrameState         R     0x561663472770+505: [%12.7, %25.1], env=e2.3
  void                    Deopt              !v    %26.0   !
Prom 1:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     c, <0x561660cbd940>, e1.0
  val?            %1.2  = Call               !     %1.1("<-", "<<-") e1.0   <str->
  void                    Return             l     %1.2
Prom 2:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    e, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <code->
  void                    Return             l     %1.3
Prom 3:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    w, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 4:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    n, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 5:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    e, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <code->
  void                    Return             l     %1.3
Prom 6:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    w, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 7:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    n, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 8:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    w, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 9:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    n, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 10:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    w, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 11:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    n, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 12:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    w, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 13:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    n, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 14:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    w, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 15:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    n, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 16:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    w, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3

│ [0x561663375980]                                                             │
└──────────────────────────────────────────────────────────────────────────────┘
