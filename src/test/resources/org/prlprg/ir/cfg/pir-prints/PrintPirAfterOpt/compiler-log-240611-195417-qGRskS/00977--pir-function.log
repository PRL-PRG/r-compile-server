
┌──────────────────────────────────────────────────────────────────────────────┐
│ [0x561663afc710]                                                             │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;NonRefl0,!Obj0                       │
│ Properties:                                                                  │
├────── PIR Version After Optimizations
[0x561663afc710]
BB0
  goto BB1
BB1   <- [0]
  val?^           %1.0  = LdArg                    0
  cp              %1.1  = Checkpoint                -> BB2 (default) | BB141 (if assume failed)
BB2   <- [1]
  val?^ | miss    %2.0  = LdVar              eR    ls, <env 0x56166328f230>
  lgl$#-          %2.1  = Identical                %2.0, function(name, pos=-(1L), envir=as.environment|...
  void                    Assume             D     %2.1, %1.1 (CallTarget@0x561663a17878[Call#0])
  env             e2.3  = MkEnv              l     w=%1.0, parent=<env 0x56166328f230>, context 1
  prom-           %2.4  = MkArg                    unboundValue, [0x561663afc710]_p0, e2.3
  val?            %2.5  = StaticCall         !v    ls[0x56166407a960](%2.4, missingArg, missingArg, true) { 0 3n } e2.3   <str->
  void                    StVar              lW    vars, %2.5, e2.3
  val             %2.7  = ChkMissing         e     %2.5
  val?+           %2.8  = ToForSeq           e     %2.5
  int$-           %2.9  = Length                   %2.8
  goto BB3
BB141   <- [1]
  env             e141.0 = (MkEnv)            l     w=%1.0, parent=<env 0x56166328f230>, context 1
  fs              %141.1 = FrameState         R     0x5616634826a0+0: [], env=e141.0
  void                    Deopt              !v    %141.1
BB3   <- [2, 78]
  int$-           %3.0  = Phi                      0L:BB2, %3.1:BB78
  int$-           %3.1  = Inc                      %3.0
  lgl$-           %3.2  = Lt                 d     %2.9, %3.1, elided
  lgl$#-          %3.3  = Identical                %3.2, true
  void                    Branch                   %3.3 -> BB140 (if true) | BB4 (if false)
BB140   <- [3]
  void                    Invisible          v     
  void                    Return             l     nil
BB4   <- [3]
  val?            %4.0  = Extract2_1D        wed   %2.8, %3.1, elided
  void                    StVar              lW    v, %4.0, e2.3
  cp              %4.2  = Checkpoint                -> BB6 (default) | BB5 (if assume failed)
BB6   <- [4]
  val?^ | miss    %6.0  = LdVar              eR    suppressVar, e2.3
  lgl$#-          %6.1  = Identical                %6.0, function(n, suppress) <(rir::DispatchTable*)0x|...
  void                    Assume             D     %6.1, %4.2 (CallTarget@0x561663a17878[Call#2])
  val?^ | miss    %6.3  = LdVar              eR    is.logical, <env 0x56166328f230>
  lgl$#-          %6.4  = Identical                <blt is.logical>, %6.3   <true>
  void                    Assume             D     %6.4, %4.2 (DeadBranchReached@0x561663a175b8[Test#0])
  (cls|spec|blt)  %6.6  = LdFun              !v    $, <0x561660cbcc10>, e2.3
  prom-           %6.7  = MkArg                    unboundValue, [0x561663afc710]_p5, e2.3
  prom-           %6.8  = MkArg                    unboundValue, [0x561663afc710]_p6, e2.3
  val?            %6.9  = Call               !v    %6.6(%6.7, %6.8) e2.3   <lgl$->
  val+            %6.10 = CallSafeBuiltin    wed   is.logical(%6.9)    <lgl$->
  lgl$#-          %6.11 = IsType                   %6.10 isA lgl$-
  cp              %6.12 = Checkpoint                -> BB8 (default) | BB7 (if assume failed)
BB5   <- [4]
  fs              %5.0  = FrameState         R     0x5616634826a0+108: [%2.8, %2.9, %3.1], env=e2.3
  void                    Deopt              !v    %5.0   !
BB8   <- [6]
  void                    Assume             D     %6.11, %6.12 (Typecheck@0x561663a175b8[Type#2])
  lgl$-           %8.1  = CastType           d     dn %6.10
  lgl$#-          %8.2  = CheckTrueFalse     e     %8.1
  void                    Branch                   %8.2 -> BB10 (if true) | BB9 (if false)
BB7   <- [6]
  prom-           %7.0  = MkArg                    %6.9, [0x561663afc710]_p4 (!refl), e2.3
  val?~           %7.1  = CastType                 up %7.0
  prom-           %7.2  = MkArg                    unboundValue, [0x561663afc710]_p3 (!refl), e2.3
  val?^           %7.3  = CastType                 up %7.2
  fs              %7.4  = FrameState         R     0x5616634826a0+145: [%2.8, %2.9, %3.1], env=e2.3
  env             e7.5  = (MkEnv)            l     n=%7.3, suppress=%7.1, parent=<env 0x56166328f230>, context 0
  fs              %7.6  = FrameState         R     0x5616635151d0+91: [%6.10], env=e7.5, next=%7.4
  void                    Deopt              !v    %7.6   !
BB10   <- [8]
  lgl$#-          %10.0 = CheckTrueFalse     we    %6.9
  cp              %10.1 = Checkpoint                -> BB12 (default) | BB11 (if assume failed)
BB9   <- [8]
  prom-           %9.0  = MkArg                    %6.9, [0x561663afc710]_p4 (!refl), e2.3
  val?~           %9.1  = CastType                 up %9.0
  prom-           %9.2  = MkArg                    unboundValue, [0x561663afc710]_p3 (!refl), e2.3
  val?^           %9.3  = CastType                 up %9.2
  env             e9.4  = (MkEnv)            l     n=%9.3, suppress=%9.1, parent=<env 0x56166328f230>, context 0
  env             e9.5  = MaterializeEnv           , e9.4   <@?>
  (cls|spec|blt)  %9.6  = LdFun              !v    %in%, e9.5
  fs              %9.7  = FrameState         R     0x5616634826a0+145: [%2.8, %2.9, %3.1], env=e2.3
  fs              %9.8  = FrameState         R     0x5616635151d0+107: [%9.6], env=e9.5, next=%9.7
  void                    Deopt              !v    %9.8, DeadCall@0x561663a175b8[Call#1], %9.6   !
BB12   <- [10]
  void                    Branch                   %10.0 -> BB139 (if true) | BB13 (if false)
BB11   <- [10]
  prom-           %11.0 = MkArg                    %6.9, [0x561663afc710]_p4 (!refl), e2.3
  val?~           %11.1 = CastType                 up %11.0
  prom-           %11.2 = MkArg                    unboundValue, [0x561663afc710]_p3 (!refl), e2.3
  val?^           %11.3 = CastType                 up %11.2
  fs              %11.4 = FrameState         R     0x5616634826a0+145: [%2.8, %2.9, %3.1], env=e2.3
  env             e11.5 = (MkEnv)            l     n=%11.3, suppress=%11.1, parent=<env 0x56166328f230>, context 0
  fs              %11.6 = FrameState         R     0x5616635151d0+164: [%10.0], env=e11.5, next=%11.4
  void                    Deopt              !v    %11.6   !
BB139   <- [12]
  goto BB14
BB13   <- [12]
  goto BB14
BB14   <- [139, 13]
  lgl$#-          %14.0 = Phi                      false:BB13, true:BB139
  void                    Branch                   %14.0 -> BB138 (if true) | BB15 (if false)
BB138   <- [14]
  goto BB78
BB15   <- [14]
  val?^ | miss    %15.0 = LdVar              eR    getLocalUsageValue, e2.3
  lgl$#-          %15.1 = Identical                %15.0, function(vn, which, w) <(rir::DispatchTable*)0|...
  void                    Assume             D     %15.1, %10.1 (CallTarget@0x561663a17878[Call#4])
  prom-           %15.3 = MkArg                    unboundValue, [0x561663afc710]_p7, e2.3
  prom-           %15.4 = MkArg                    unboundValue, [0x561663afc710]_p8, e2.3
  ct              %15.5 = PushContext        lCL   %15.3, "parameter", %15.4, getLocalUsageValue(v, "parameter", w), function(vn, which, w) <(rir::DispatchTable*)0|..., e2.3
  val?^           %15.6 = CastType                 up %15.4
  val?^           %15.7 = CastType                 up %15.3
  cp              %15.8 = Checkpoint                -> BB17 (default) | BB16 (if assume failed)
BB78   <- [138, 77, 91]
  goto BB3
BB17   <- [15]
  env             e17.0 = MkEnv              l     vn=%15.7, which="parameter", w=%15.6, parent=<env 0x56166328f230>, context 1
  val?^ | miss    %17.1 = LdVar              eR    get, e17.0
  lgl$#-          %17.2 = Identical                %17.1, function(x, pos=-(1L), envir=as.environment(po|...
  void                    Assume             D     %17.2, %15.8 (CallTarget@0x5616634339a0[Call#0])
  prom-           %17.4 = MkArg                    unboundValue, [0x561663afc710]_p50 (!refl), e17.0
  prom-           %17.5 = MkArg                    unboundValue, [0x561663afc710]_p51, e17.0
  val?            %17.6 = StaticCall         !v    get[0x5616636b1d40](%17.4, %17.5, missingArg, missingArg, false) { 0 1 4n } e17.0   <val?>
  val?            %17.7 = PopContext         C     %17.6, %15.5   <lgl$->
  lgl$#-          %17.8 = IsType                   %17.7 isA lgl$-
  cp              %17.9 = Checkpoint                -> BB19 (default) | BB18 (if assume failed)
BB16   <- [15]
  fs              %16.0 = FrameState         R     0x5616634826a0+204: [%2.8, %2.9, %3.1], env=e2.3
  env             e16.1 = (MkEnv)            l     vn=%15.7, which="parameter", w=%15.6, parent=<env 0x56166328f230>, context 1
  fs              %16.2 = FrameState         R     0x561663bad400+0: [], env=e16.1, next=%16.0
  void                    Deopt              !v    %16.2   !
BB19   <- [17]
  void                    Assume             D     %17.8, %17.9 (Typecheck@0x561663a17878[Type#12])
  lgl$-           %19.1 = CastType           d     dn %17.7
  void                    StVar              lW    parameter, %19.1, e2.3
  cp              %19.3 = Checkpoint                -> BB21 (default) | BB20 (if assume failed)
BB18   <- [17]
  fs              %18.0 = FrameState         R     0x5616634826a0+204: [%2.8, %2.9, %3.1, %17.7], env=e2.3
  void                    Deopt              !v    %18.0   !
BB21   <- [19]
  val?^ | miss    %21.0 = LdVar              eR    getLocalUsageValue, e2.3
  lgl$#-          %21.1 = Identical                %21.0, function(vn, which, w) <(rir::DispatchTable*)0|...
  void                    Assume             D     %21.1, %19.3 (CallTarget@0x561663a17878[Call#5])
  prom-           %21.3 = MkArg                    unboundValue, [0x561663afc710]_p9, e2.3
  prom-           %21.4 = MkArg                    unboundValue, [0x561663afc710]_p10, e2.3
  ct              %21.5 = PushContext        lCL   %21.3, "assigns", %21.4, getLocalUsageValue(v, "assigns", w), function(vn, which, w) <(rir::DispatchTable*)0|..., e2.3
  val?^           %21.6 = CastType                 up %21.4
  val?^           %21.7 = CastType                 up %21.3
  cp              %21.8 = Checkpoint                -> BB23 (default) | BB22 (if assume failed)
BB20   <- [19]
  fs              %20.0 = FrameState         R     0x5616634826a0+218: [%2.8, %2.9, %3.1], env=e2.3
  void                    Deopt              !v    %20.0   !
BB23   <- [21]
  env             e23.0 = MkEnv              l     vn=%21.7, which="assigns", w=%21.6, parent=<env 0x56166328f230>, context 1
  val?^ | miss    %23.1 = LdVar              eR    get, e23.0
  lgl$#-          %23.2 = Identical                %23.1, function(x, pos=-(1L), envir=as.environment(po|...
  void                    Assume             D     %23.2, %21.8 (CallTarget@0x5616634339a0[Call#0])
  prom-           %23.4 = MkArg                    unboundValue, [0x561663afc710]_p54 (!refl), e23.0
  prom-           %23.5 = MkArg                    unboundValue, [0x561663afc710]_p55, e23.0
  val?            %23.6 = StaticCall         !v    get[0x5616636b1d40](%23.4, %23.5, missingArg, missingArg, false) { 0 1 4n } e23.0   <val?>
  val?            %23.7 = PopContext         C     %23.6, %21.5   <real$->
  lgl$#-          %23.8 = IsType                   %23.7 isA real$-
  cp              %23.9 = Checkpoint                -> BB25 (default) | BB24 (if assume failed)
BB22   <- [21]
  fs              %22.0 = FrameState         R     0x5616634826a0+260: [%2.8, %2.9, %3.1], env=e2.3
  env             e22.1 = (MkEnv)            l     vn=%21.7, which="assigns", w=%21.6, parent=<env 0x56166328f230>, context 1
  fs              %22.2 = FrameState         R     0x561663bad400+0: [], env=e22.1, next=%22.0
  void                    Deopt              !v    %22.2   !
BB25   <- [23]
  void                    Assume             D     %23.8, %23.9 (Typecheck@0x561663a17878[Type#15])
  real$-          %25.1 = CastType           d     dn %23.7
  void                    StVar              lW    assigns, %25.1, e2.3
  cp              %25.3 = Checkpoint                -> BB27 (default) | BB26 (if assume failed)
BB24   <- [23]
  fs              %24.0 = FrameState         R     0x5616634826a0+260: [%2.8, %2.9, %3.1, %23.7], env=e2.3
  void                    Deopt              !v    %24.0   !
BB27   <- [25]
  val?^ | miss    %27.0 = LdVar              eR    getLocalUsageValue, e2.3
  lgl$#-          %27.1 = Identical                %27.0, function(vn, which, w) <(rir::DispatchTable*)0|...
  void                    Assume             D     %27.1, %25.3 (CallTarget@0x561663a17878[Call#6])
  prom-           %27.3 = MkArg                    unboundValue, [0x561663afc710]_p11, e2.3
  prom-           %27.4 = MkArg                    unboundValue, [0x561663afc710]_p12, e2.3
  ct              %27.5 = PushContext        lCL   %27.3, "varuses", %27.4, getLocalUsageValue(v, "varuses", w), function(vn, which, w) <(rir::DispatchTable*)0|..., e2.3
  val?^           %27.6 = CastType                 up %27.4
  val?^           %27.7 = CastType                 up %27.3
  cp              %27.8 = Checkpoint                -> BB29 (default) | BB28 (if assume failed)
BB26   <- [25]
  fs              %26.0 = FrameState         R     0x5616634826a0+274: [%2.8, %2.9, %3.1], env=e2.3
  void                    Deopt              !v    %26.0   !
BB29   <- [27]
  env             e29.0 = MkEnv              l     vn=%27.7, which="varuses", w=%27.6, parent=<env 0x56166328f230>, context 1
  val?^ | miss    %29.1 = LdVar              eR    get, e29.0
  lgl$#-          %29.2 = Identical                %29.1, function(x, pos=-(1L), envir=as.environment(po|...
  void                    Assume             D     %29.2, %27.8 (CallTarget@0x5616634339a0[Call#0])
  prom-           %29.4 = MkArg                    unboundValue, [0x561663afc710]_p58 (!refl), e29.0
  prom-           %29.5 = MkArg                    unboundValue, [0x561663afc710]_p59, e29.0
  val?            %29.6 = StaticCall         !v    get[0x5616636b1d40](%29.4, %29.5, missingArg, missingArg, false) { 0 1 4n } e29.0   <val?>
  val?            %29.7 = PopContext         C     %29.6, %27.5   <real$->
  lgl$#-          %29.8 = IsType                   %29.7 isA real$-
  cp              %29.9 = Checkpoint                -> BB31 (default) | BB30 (if assume failed)
BB28   <- [27]
  fs              %28.0 = FrameState         R     0x5616634826a0+316: [%2.8, %2.9, %3.1], env=e2.3
  env             e28.1 = (MkEnv)            l     vn=%27.7, which="varuses", w=%27.6, parent=<env 0x56166328f230>, context 1
  fs              %28.2 = FrameState         R     0x561663bad400+0: [], env=e28.1, next=%28.0
  void                    Deopt              !v    %28.2   !
BB31   <- [29]
  void                    Assume             D     %29.8, %29.9 (Typecheck@0x561663a17878[Type#18])
  real$-          %31.1 = CastType           d     dn %29.7
  void                    StVar              lW    varuses, %31.1, e2.3
  cp              %31.3 = Checkpoint                -> BB33 (default) | BB32 (if assume failed)
BB30   <- [29]
  fs              %30.0 = FrameState         R     0x5616634826a0+316: [%2.8, %2.9, %3.1, %29.7], env=e2.3
  void                    Deopt              !v    %30.0   !
BB33   <- [31]
  val?^ | miss    %33.0 = LdVar              eR    getLocalUsageValue, e2.3
  lgl$#-          %33.1 = Identical                %33.0, function(vn, which, w) <(rir::DispatchTable*)0|...
  void                    Assume             D     %33.1, %31.3 (CallTarget@0x561663a17878[Call#7])
  prom-           %33.3 = MkArg                    unboundValue, [0x561663afc710]_p13, e2.3
  prom-           %33.4 = MkArg                    unboundValue, [0x561663afc710]_p14, e2.3
  ct              %33.5 = PushContext        lCL   %33.3, "funuses", %33.4, getLocalUsageValue(v, "funuses", w), function(vn, which, w) <(rir::DispatchTable*)0|..., e2.3
  val?^           %33.6 = CastType                 up %33.4
  val?^           %33.7 = CastType                 up %33.3
  cp              %33.8 = Checkpoint                -> BB35 (default) | BB34 (if assume failed)
BB32   <- [31]
  fs              %32.0 = FrameState         R     0x5616634826a0+330: [%2.8, %2.9, %3.1], env=e2.3
  void                    Deopt              !v    %32.0   !
BB35   <- [33]
  env             e35.0 = MkEnv              l     vn=%33.7, which="funuses", w=%33.6, parent=<env 0x56166328f230>, context 1
  val?^ | miss    %35.1 = LdVar              eR    get, e35.0
  lgl$#-          %35.2 = Identical                %35.1, function(x, pos=-(1L), envir=as.environment(po|...
  void                    Assume             D     %35.2, %33.8 (CallTarget@0x5616634339a0[Call#0])
  prom-           %35.4 = MkArg                    unboundValue, [0x561663afc710]_p62 (!refl), e35.0
  prom-           %35.5 = MkArg                    unboundValue, [0x561663afc710]_p63, e35.0
  val?            %35.6 = StaticCall         !v    get[0x5616636b1d40](%35.4, %35.5, missingArg, missingArg, false) { 0 1 4n } e35.0   <val?>
  val?            %35.7 = PopContext         C     %35.6, %33.5   <real$->
  lgl$#-          %35.8 = IsType                   %35.7 isA real$-
  cp              %35.9 = Checkpoint                -> BB37 (default) | BB36 (if assume failed)
BB34   <- [33]
  fs              %34.0 = FrameState         R     0x5616634826a0+372: [%2.8, %2.9, %3.1], env=e2.3
  env             e34.1 = (MkEnv)            l     vn=%33.7, which="funuses", w=%33.6, parent=<env 0x56166328f230>, context 1
  fs              %34.2 = FrameState         R     0x561663bad400+0: [], env=e34.1, next=%34.0
  void                    Deopt              !v    %34.2   !
BB37   <- [35]
  void                    Assume             D     %35.8, %35.9 (Typecheck@0x561663a17878[Type#21])
  real$-          %37.1 = CastType           d     dn %35.7
  void                    StVar              lW    funuses, %37.1, e2.3
  cp              %37.3 = Checkpoint                -> BB39 (default) | BB38 (if assume failed)
BB36   <- [35]
  fs              %36.0 = FrameState         R     0x5616634826a0+372: [%2.8, %2.9, %3.1, %35.7], env=e2.3
  void                    Deopt              !v    %36.0   !
BB39   <- [37]
  val?^ | miss    %39.0 = LdVar              eR    getLocalUsageValue, e2.3
  lgl$#-          %39.1 = Identical                %39.0, function(vn, which, w) <(rir::DispatchTable*)0|...
  void                    Assume             D     %39.1, %37.3 (CallTarget@0x561663a17878[Call#8])
  prom-           %39.3 = MkArg                    unboundValue, [0x561663afc710]_p15, e2.3
  prom-           %39.4 = MkArg                    unboundValue, [0x561663afc710]_p16, e2.3
  ct              %39.5 = PushContext        lCL   %39.3, "loopvars", %39.4, getLocalUsageValue(v, "loopvars", w), function(vn, which, w) <(rir::DispatchTable*)0|..., e2.3
  val?^           %39.6 = CastType                 up %39.4
  val?^           %39.7 = CastType                 up %39.3
  cp              %39.8 = Checkpoint                -> BB41 (default) | BB40 (if assume failed)
BB38   <- [37]
  fs              %38.0 = FrameState         R     0x5616634826a0+386: [%2.8, %2.9, %3.1], env=e2.3
  void                    Deopt              !v    %38.0   !
BB41   <- [39]
  env             e41.0 = MkEnv              l     vn=%39.7, which="loopvars", w=%39.6, parent=<env 0x56166328f230>, context 1
  val?^ | miss    %41.1 = LdVar              eR    get, e41.0
  lgl$#-          %41.2 = Identical                %41.1, function(x, pos=-(1L), envir=as.environment(po|...
  void                    Assume             D     %41.2, %39.8 (CallTarget@0x5616634339a0[Call#0])
  prom-           %41.4 = MkArg                    unboundValue, [0x561663afc710]_p66 (!refl), e41.0
  prom-           %41.5 = MkArg                    unboundValue, [0x561663afc710]_p67, e41.0
  val?            %41.6 = StaticCall         !v    get[0x5616636b1d40](%41.4, %41.5, missingArg, missingArg, false) { 0 1 4n } e41.0   <val?>
  val?            %41.7 = PopContext         C     %41.6, %39.5   <real$->
  lgl$#-          %41.8 = IsType                   %41.7 isA real$-
  cp              %41.9 = Checkpoint                -> BB43 (default) | BB42 (if assume failed)
BB40   <- [39]
  fs              %40.0 = FrameState         R     0x5616634826a0+428: [%2.8, %2.9, %3.1], env=e2.3
  env             e40.1 = (MkEnv)            l     vn=%39.7, which="loopvars", w=%39.6, parent=<env 0x56166328f230>, context 1
  fs              %40.2 = FrameState         R     0x561663bad400+0: [], env=e40.1, next=%40.0
  void                    Deopt              !v    %40.2   !
BB43   <- [41]
  void                    Assume             D     %41.8, %41.9 (Typecheck@0x561663a17878[Type#24])
  real$-          %43.1 = CastType           d     dn %41.7
  void                    StVar              lW    loopvars, %43.1, e2.3
  cp              %43.3 = Checkpoint                -> BB45 (default) | BB44 (if assume failed)
BB42   <- [41]
  fs              %42.0 = FrameState         R     0x5616634826a0+428: [%2.8, %2.9, %3.1, %41.7], env=e2.3
  void                    Deopt              !v    %42.0   !
BB45   <- [43]
  val?^ | miss    %45.0 = LdVar              eR    getLocalUsageValue, e2.3
  lgl$#-          %45.1 = Identical                %45.0, function(vn, which, w) <(rir::DispatchTable*)0|...
  void                    Assume             D     %45.1, %43.3 (CallTarget@0x561663a17878[Call#9])
  prom-           %45.3 = MkArg                    unboundValue, [0x561663afc710]_p17, e2.3
  prom-           %45.4 = MkArg                    unboundValue, [0x561663afc710]_p18, e2.3
  ct              %45.5 = PushContext        lCL   %45.3, "funforms", %45.4, getLocalUsageValue(v, "funforms", w), function(vn, which, w) <(rir::DispatchTable*)0|..., e2.3
  val?^           %45.6 = CastType                 up %45.4
  val?^           %45.7 = CastType                 up %45.3
  cp              %45.8 = Checkpoint                -> BB47 (default) | BB46 (if assume failed)
BB44   <- [43]
  fs              %44.0 = FrameState         R     0x5616634826a0+442: [%2.8, %2.9, %3.1], env=e2.3
  void                    Deopt              !v    %44.0   !
BB47   <- [45]
  env             e47.0 = MkEnv              l     vn=%45.7, which="funforms", w=%45.6, parent=<env 0x56166328f230>, context 1
  val?^ | miss    %47.1 = LdVar              eR    get, e47.0
  lgl$#-          %47.2 = Identical                %47.1, function(x, pos=-(1L), envir=as.environment(po|...
  void                    Assume             D     %47.2, %45.8 (CallTarget@0x5616634339a0[Call#0])
  prom-           %47.4 = MkArg                    unboundValue, [0x561663afc710]_p70 (!refl), e47.0
  prom-           %47.5 = MkArg                    unboundValue, [0x561663afc710]_p71, e47.0
  val?            %47.6 = StaticCall         !v    get[0x5616636b1d40](%47.4, %47.5, missingArg, missingArg, false) { 0 1 4n } e47.0   <val?>
  val?            %47.7 = PopContext         C     %47.6, %45.5   <(nil|vec)->
  void                    StVar              lW    funforms, %47.7, e2.3
  cp              %47.9 = Checkpoint                -> BB49 (default) | BB48 (if assume failed)
BB46   <- [45]
  fs              %46.0 = FrameState         R     0x5616634826a0+484: [%2.8, %2.9, %3.1], env=e2.3
  env             e46.1 = (MkEnv)            l     vn=%45.7, which="funforms", w=%45.6, parent=<env 0x56166328f230>, context 1
  fs              %46.2 = FrameState         R     0x561663bad400+0: [], env=e46.1, next=%46.0
  void                    Deopt              !v    %46.2   !
BB49   <- [47]
  val?^ | miss    %49.0 = LdVar              eR    max, e2.3
  lgl$#-          %49.1 = Identical                <blt max>, %49.0   <true>
  void                    Assume             D     %49.1, %47.9 (DeadBranchReached@0x561663a17878[Test#0])
  val?^ | miss    %49.3 = LdVar              eR    varuses, e2.3
  lgl$#-          %49.4 = IsType                   %49.3 isA real$-
  void                    Assume             D     %49.4, %47.9 (Typecheck@0x561663a17878[Type#31])
  real$-          %49.6 = CastType           d     dn %49.3
  val?^ | miss    %49.7 = LdVar              eR    funuses, e2.3
  lgl$#-          %49.8 = IsType                   %49.7 isA real$-
  void                    Assume             D     %49.8, %47.9 (Typecheck@0x561663a17878[Type#32])
  real$-          %49.10 = CastType           d     dn %49.7
  val?^ | miss    %49.11 = LdVar              eR    loopvars, e2.3
  lgl$#-          %49.12 = IsType                   %49.11 isA real$-
  void                    Assume             D     %49.12, %47.9 (Typecheck@0x561663a17878[Type#33])
  real$-          %49.14 = CastType           d     dn %49.11
  real$-          %49.15 = CallSafeBuiltin    wed   max(%49.6, %49.10, %49.14)    <real$->
  void                    StVar              lW    uses, %49.15, e2.3
  cp              %49.17 = Checkpoint                -> BB51 (default) | BB50 (if assume failed)
BB48   <- [47]
  fs              %48.0 = FrameState         R     0x5616634826a0+498: [%2.8, %2.9, %3.1], env=e2.3
  void                    Deopt              !v    %48.0   !
BB51   <- [49]
  val?^ | miss    %51.0 = LdVar              eR    getLocalUsageValue, e2.3
  lgl$#-          %51.1 = Identical                %51.0, function(vn, which, w) <(rir::DispatchTable*)0|...
  void                    Assume             D     %51.1, %49.17 (CallTarget@0x561663a17878[Call#11])
  prom-           %51.3 = MkArg                    unboundValue, [0x561663afc710]_p19, e2.3
  prom-           %51.4 = MkArg                    unboundValue, [0x561663afc710]_p20, e2.3
  ct              %51.5 = PushContext        lCL   %51.3, "srcinfo", %51.4, getLocalUsageValue(v, "srcinfo", w), function(vn, which, w) <(rir::DispatchTable*)0|..., e2.3
  val?^           %51.6 = CastType                 up %51.4
  val?^           %51.7 = CastType                 up %51.3
  cp              %51.8 = Checkpoint                -> BB53 (default) | BB52 (if assume failed)
BB50   <- [49]
  fs              %50.0 = FrameState         R     0x5616634826a0+641: [%2.8, %2.9, %3.1], env=e2.3
  void                    Deopt              !v    %50.0   !
BB53   <- [51]
  env             e53.0 = MkEnv              l     vn=%51.7, which="srcinfo", w=%51.6, parent=<env 0x56166328f230>, context 1
  val?^ | miss    %53.1 = LdVar              eR    get, e53.0
  lgl$#-          %53.2 = Identical                %53.1, function(x, pos=-(1L), envir=as.environment(po|...
  void                    Assume             D     %53.2, %51.8 (CallTarget@0x5616634339a0[Call#0])
  prom-           %53.4 = MkArg                    unboundValue, [0x561663afc710]_p74 (!refl), e53.0
  prom-           %53.5 = MkArg                    unboundValue, [0x561663afc710]_p75, e53.0
  val?            %53.6 = StaticCall         !v    get[0x5616636b1d40](%53.4, %53.5, missingArg, missingArg, false) { 0 1 4n } e53.0   <val?>
  val?            %53.7 = PopContext         C     %53.6, %51.5   <(nil|vec)>
  void                    StVar              lW    srcinfo, %53.7, e2.3
  (cls|spec|blt)  %53.9 = LdFun              !v    <-, <0x561660cb1da8>, e2.3
  prom-           %53.10 = MkArg                    unboundValue, [0x561663afc710]_p21, e2.3
  prom-           %53.11 = MkArg                    unboundValue, [0x561663afc710]_p24, e2.3
  val?            %53.12 = Call               !v    %53.9(%53.10, %53.11) e2.3
  (cls|spec|blt)  %53.13 = LdFun              !v    <-, <0x561660cb1da8>, e2.3
  prom-           %53.14 = MkArg                    unboundValue, [0x561663afc710]_p25, e2.3
  prom-           %53.15 = MkArg                    unboundValue, [0x561663afc710]_p28, e2.3
  val?            %53.16 = Call               !v    %53.13(%53.14, %53.15) e2.3
  (cls|spec|blt)  %53.17 = LdFun              !v    <-, <0x561660cb1da8>, e2.3
  prom-           %53.18 = MkArg                    unboundValue, [0x561663afc710]_p29, e2.3
  prom-           %53.19 = MkArg                    unboundValue, [0x561663afc710]_p32, e2.3
  val?            %53.20 = Call               !v    %53.17(%53.18, %53.19) e2.3
  cp              %53.21 = Checkpoint                -> BB55 (default) | BB54 (if assume failed)
BB52   <- [51]
  fs              %52.0 = FrameState         R     0x5616634826a0+683: [%2.8, %2.9, %3.1], env=e2.3
  env             e52.1 = (MkEnv)            l     vn=%51.7, which="srcinfo", w=%51.6, parent=<env 0x56166328f230>, context 1
  fs              %52.2 = FrameState         R     0x561663bad400+0: [], env=e52.1, next=%52.0
  void                    Deopt              !v    %52.2   !
BB55   <- [53]
  val?^ | miss    %55.0 = LdVar              eR    parameter, e2.3
  lgl$#-          %55.1 = IsType                   %55.0 isA lgl$-
  void                    Assume             D     %55.1, %53.21 (Typecheck@0x561663a17878[Type#53])
  lgl$-           %55.3 = CastType           d     dn %55.0
  lgl$#-          %55.4 = CheckTrueFalse     e     %55.3
  void                    Branch                   %55.4 -> BB102 (if true) | BB56 (if false)
BB54   <- [53]
  fs              %54.0 = FrameState         R     0x5616634826a0+810: [%2.8, %2.9, %3.1, %53.20], env=e2.3
  void                    Deopt              !v    %54.0   !
BB102   <- [55]
  val?^ | miss    %102.0 = LdVar              eR    suppressVar, e2.3
  lgl$#-          %102.1 = Identical                %102.0, function(n, suppress) <(rir::DispatchTable*)0x|...
  void                    Assume             D     %102.1, %53.21 (CallTarget@0x561663a17878[Call#30])
  val?^ | miss    %102.3 = LdVar              eR    is.logical, <env 0x56166328f230>
  lgl$#-          %102.4 = Identical                <blt is.logical>, %102.3   <true>
  void                    Assume             D     %102.4, %53.21 (DeadBranchReached@0x561663a175b8[Test#0])
  (cls|spec|blt)  %102.6 = LdFun              !v    $, <0x561660cbcc10>, e2.3
  prom-           %102.7 = MkArg                    unboundValue, [0x561663afc710]_p44, e2.3
  prom-           %102.8 = MkArg                    unboundValue, [0x561663afc710]_p45, e2.3
  val?            %102.9 = Call               !v    %102.6(%102.7, %102.8) e2.3   <lgl$->
  val+            %102.10 = CallSafeBuiltin    wed   is.logical(%102.9)    <lgl$->
  lgl$#-          %102.11 = IsType                   %102.10 isA lgl$-
  cp              %102.12 = Checkpoint                -> BB104 (default) | BB103 (if assume failed)
BB56   <- [55]
  val?^ | miss    %56.0 = LdVar              eR    uses, e2.3
  lgl$#-          %56.1 = IsType                   %56.0 isA real$-
  void                    Assume             D     %56.1, %53.21 (Typecheck@0x561663a17878[Type#54])
  real$-          %56.3 = CastType           d     dn %56.0
  lgl$-           %56.4 = Eq                 d     %56.3, 0, elided   <lgl$->
  lgl$#-          %56.5 = CheckTrueFalse     e     %56.4
  void                    Branch                   %56.5 -> BB101 (if true) | BB57 (if false)
BB104   <- [102]
  void                    Assume             D     %102.11, %102.12 (Typecheck@0x561663a175b8[Type#2])
  lgl$-           %104.1 = CastType           d     dn %102.10
  lgl$#-          %104.2 = CheckTrueFalse     e     %104.1
  void                    Branch                   %104.2 -> BB106 (if true) | BB105 (if false)
BB103   <- [102]
  prom-           %103.0 = MkArg                    %102.9, [0x561663afc710]_p43 (!refl), e2.3
  val?~           %103.1 = CastType                 up %103.0
  prom-           %103.2 = MkArg                    unboundValue, [0x561663afc710]_p42, e2.3
  val?^           %103.3 = CastType                 up %103.2
  fs              %103.4 = FrameState         R     0x5616634826a0+1235: [%2.8, %2.9, %3.1], env=e2.3
  env             e103.5 = (MkEnv)            l     n=%103.3, suppress=%103.1, parent=<env 0x56166328f230>, context 0
  fs              %103.6 = FrameState         R     0x5616635151d0+91: [%102.10], env=e103.5, next=%103.4
  void                    Deopt              !v    %103.6   !
BB101   <- [56]
  (cls|spec|blt)  %101.0 = LdFun              !v    suppressVar, e2.3
  fs              %101.1 = FrameState         R     0x5616634826a0+1068: [%2.8, %2.9, %3.1, %101.0], env=e2.3
  void                    Deopt              !v    %101.1, DeadCall@0x561663a17878[Call#24], %101.0   !
BB57   <- [56]
  val?^ | miss    %57.0 = LdVar              eR    funuses, e2.3
  lgl$#-          %57.1 = IsType                   %57.0 isA real$-
  void                    Assume             D     %57.1, %53.21 (Typecheck@0x561663a17878[Type#56])
  real$-          %57.3 = CastType           d     dn %57.0
  lgl$-           %57.4 = Gt                 d     %57.3, 0, elided   <lgl$->
  lgl$-           %57.5 = AsLogical                %57.4
  lgl$#-          %57.6 = Identical                %57.5, false
  void                    Branch                   %57.6 -> BB100 (if true) | BB58 (if false)
BB106   <- [104]
  lgl$#-          %106.0 = CheckTrueFalse     we    %102.9
  void                    Branch                   %106.0 -> BB137 (if true) | BB107 (if false)
BB105   <- [104]
  prom-           %105.0 = MkArg                    %102.9, [0x561663afc710]_p43 (!refl), e2.3
  val?~           %105.1 = CastType                 up %105.0
  prom-           %105.2 = MkArg                    unboundValue, [0x561663afc710]_p42, e2.3
  val?^           %105.3 = CastType                 up %105.2
  env             e105.4 = (MkEnv)            l     n=%105.3, suppress=%105.1, parent=<env 0x56166328f230>, context 0
  env             e105.5 = MaterializeEnv           , e105.4   <@?>
  (cls|spec|blt)  %105.6 = LdFun              !v    %in%, e105.5
  fs              %105.7 = FrameState         R     0x5616634826a0+1235: [%2.8, %2.9, %3.1], env=e2.3
  fs              %105.8 = FrameState         R     0x5616635151d0+107: [%105.6], env=e105.5, next=%105.7
  void                    Deopt              !v    %105.8, DeadCall@0x561663a175b8[Call#1], %105.6   !
BB100   <- [57]
  goto BB59
BB58   <- [57]
  val?^ | miss    %58.0 = LdVar              eR    funforms, e2.3
  lgl$#-          %58.1 = IsType                   %58.0 isA val?~- | miss
  void                    Assume             D     %58.1, %53.21 (Typecheck@0x561663a17878[Type#58])
  val?~- | miss   %58.3 = CastType           d     dn %58.0
  val?-           %58.4 = Force!<value>            %58.3,    <(nil|vec)->
  lgl$-           %58.5 = Is                       %58.4, NULL
  lgl$-           %58.6 = AsLogical                %58.5
  lgl$-           %58.7 = LAnd                     %57.5, %58.6
  goto BB59
BB137   <- [106]
  goto BB108
BB107   <- [106]
  goto BB108
BB59   <- [100, 58]
  lgl$-           %59.0 = Phi                      %58.7:BB58, %57.5:BB100
  lgl$#-          %59.1 = CheckTrueFalse     e     %59.0
  void                    Branch                   %59.1 -> BB95 (if true) | BB60 (if false)
BB108   <- [137, 107]
  lgl$#-          %108.0 = Phi                      false:BB107, true:BB137
  lgl$#-          %108.1 = Not                d     %108.0, elided
  void                    Branch                   %108.0 -> BB136 (if true) | BB109 (if false)
BB95   <- [59]
  val?^ | miss    %95.0 = LdVar              eR    suppressVar, e2.3
  lgl$#-          %95.1 = Identical                %95.0, function(n, suppress) <(rir::DispatchTable*)0x|...
  void                    Assume             D     %95.1, %53.21 (CallTarget@0x561663a17878[Call#18])
  prom-           %95.3 = MkArg                    unboundValue, [0x561663afc710]_p38, e2.3
  prom-           %95.4 = MkArg                    unboundValue, [0x561663afc710]_p39, e2.3
  val?            %95.5 = StaticCall         !v    suppressVar[0x5616619c2000](%95.3, %95.4) e2.3   <lgl$->
  lgl$#-          %95.6 = IsType                   %95.5 isA lgl$-
  cp              %95.7 = Checkpoint                -> BB97 (default) | BB96 (if assume failed)
BB60   <- [59]
  goto BB61
BB136   <- [108]
  goto BB112
BB109   <- [108]
  val?^ | miss    %109.0 = LdVar              eR    assigns, e2.3
  val?            %109.1 = Force!             !v    %109.0, e2.3   <val?_>
  lgl$#-          %109.2 = IsType                   %109.1 isA val?+
  cp              %109.3 = Checkpoint                -> BB111 (default) | BB110 (if assume failed)
BB97   <- [95]
  void                    Assume             D     %95.6, %95.7 (Typecheck@0x561663a17878[Type#63])
  lgl$-           %97.1 = CastType           d     dn %95.5
  lgl$-           %97.2 = Not                d     %97.1, elided
  lgl$#-          %97.3 = CheckTrueFalse     e     %97.2
  void                    Branch                   %97.3 -> BB99 (if true) | BB98 (if false)
BB96   <- [95]
  fs              %96.0 = FrameState         R     0x5616634826a0+965: [%2.8, %2.9, %3.1, %95.5], env=e2.3
  void                    Deopt              !v    %96.0   !
BB61   <- [60, 98]
  goto BB62
BB112   <- [136, 111]
  lgl$-           %112.0 = Phi                      %111.4:BB111, %108.1:BB136
  cp              %112.1 = Checkpoint                -> BB114 (default) | BB113 (if assume failed)
BB111   <- [109]
  void                    Assume             D     %109.2, %109.3 (Typecheck@0x561663a17878[Type#88])
  val?+           %111.1 = CastType           d     dn %109.1   <val?_>
  lgl             %111.2 = Gt                 wed   %111.1, 0, elided   <val?_>
  lgl$-           %111.3 = AsLogical          e     %111.2
  lgl$-           %111.4 = LAnd                     %108.1, %111.3
  goto BB112
BB110   <- [109]
  fs              %110.0 = FrameState         R     0x5616634826a0+1257: [%2.8, %2.9, %3.1, %108.1, %109.1], env=e2.3
  void                    Deopt              !v    %110.0   !
BB99   <- [97]
  (cls|spec|blt)  %99.0 = LdFun              !v    $, e2.3
  fs              %99.1 = FrameState         R     0x5616634826a0+987: [%2.8, %2.9, %3.1, %99.0], env=e2.3
  void                    Deopt              !v    %99.1, DeadCall@0x561663a17878[Call#20], %99.0   !
BB98   <- [97]
  goto BB61
BB62   <- [130, 61]
  cp              %62.0 = Checkpoint                -> BB64 (default) | BB63 (if assume failed)
BB114   <- [112]
  lgl$#-          %114.0 = CheckTrueFalse     e     %112.0
  void                    Branch                   %114.0 -> BB135 (if true) | BB115 (if false)
BB113   <- [112]
  fs              %113.0 = FrameState         R     0x5616634826a0+1276: [%2.8, %2.9, %3.1, %112.0], env=e2.3
  void                    Deopt              !v    %113.0   !
BB64   <- [62]
  val?^ | miss    %64.0 = LdVar              eR    suppressVar, e2.3
  lgl$#-          %64.1 = Identical                %64.0, function(n, suppress) <(rir::DispatchTable*)0x|...
  void                    Assume             D     %64.1, %62.0 (CallTarget@0x561663a17878[Call#42])
  val?^ | miss    %64.3 = LdVar              eR    is.logical, <env 0x56166328f230>
  lgl$#-          %64.4 = Identical                <blt is.logical>, %64.3   <true>
  void                    Assume             D     %64.4, %62.0 (DeadBranchReached@0x561663a175b8[Test#0])
  (cls|spec|blt)  %64.6 = LdFun              !v    $, <0x561660cbcc10>, e2.3
  prom-           %64.7 = MkArg                    unboundValue, [0x561663afc710]_p35, e2.3
  prom-           %64.8 = MkArg                    unboundValue, [0x561663afc710]_p36, e2.3
  val?            %64.9 = Call               !v    %64.6(%64.7, %64.8) e2.3   <lgl$->
  val+            %64.10 = CallSafeBuiltin    wed   is.logical(%64.9)    <lgl$->
  lgl$#-          %64.11 = IsType                   %64.10 isA lgl$-
  cp              %64.12 = Checkpoint                -> BB66 (default) | BB65 (if assume failed)
BB63   <- [62]
  fs              %63.0 = FrameState         R     0x5616634826a0+1563: [%2.8, %2.9, %3.1], env=e2.3
  void                    Deopt              !v    %63.0   !
BB135   <- [114]
  (cls|spec|blt)  %135.0 = LdFun              !v    $, e2.3
  fs              %135.1 = FrameState         R     0x5616634826a0+1492: [%2.8, %2.9, %3.1, %135.0], env=e2.3
  void                    Deopt              !v    %135.1, DeadCall@0x561663a17878[Call#38], %135.0   !
BB115   <- [114]
  val?^ | miss    %115.0 = LdVar              eR    suppressVar, e2.3
  lgl$#-          %115.1 = Identical                %115.0, function(n, suppress) <(rir::DispatchTable*)0x|...
  void                    Assume             D     %115.1, %112.1 (CallTarget@0x561663a17878[Call#32])
  val?^ | miss    %115.3 = LdVar              eR    is.logical, <env 0x56166328f230>
  lgl$#-          %115.4 = Identical                <blt is.logical>, %115.3   <true>
  void                    Assume             D     %115.4, %112.1 (DeadBranchReached@0x561663a175b8[Test#0])
  (cls|spec|blt)  %115.6 = LdFun              !v    $, <0x561660cbcc10>, e2.3
  prom-           %115.7 = MkArg                    unboundValue, [0x561663afc710]_p48, e2.3
  prom-           %115.8 = MkArg                    unboundValue, [0x561663afc710]_p49, e2.3
  val?            %115.9 = Call               !v    %115.6(%115.7, %115.8) e2.3   <lgl$->
  val+            %115.10 = CallSafeBuiltin    wed   is.logical(%115.9)    <lgl$->
  lgl$#-          %115.11 = IsType                   %115.10 isA lgl$-
  cp              %115.12 = Checkpoint                -> BB117 (default) | BB116 (if assume failed)
BB66   <- [64]
  void                    Assume             D     %64.11, %64.12 (Typecheck@0x561663a175b8[Type#2])
  lgl$-           %66.1 = CastType           d     dn %64.10
  lgl$#-          %66.2 = CheckTrueFalse     e     %66.1
  void                    Branch                   %66.2 -> BB68 (if true) | BB67 (if false)
BB65   <- [64]
  prom-           %65.0 = MkArg                    %64.9, [0x561663afc710]_p34 (!refl), e2.3
  val?~           %65.1 = CastType                 up %65.0
  prom-           %65.2 = MkArg                    unboundValue, [0x561663afc710]_p33, e2.3
  val?^           %65.3 = CastType                 up %65.2
  fs              %65.4 = FrameState         R     0x5616634826a0+1600: [%2.8, %2.9, %3.1], env=e2.3
  env             e65.5 = (MkEnv)            l     n=%65.3, suppress=%65.1, parent=<env 0x56166328f230>, context 0
  fs              %65.6 = FrameState         R     0x5616635151d0+91: [%64.10], env=e65.5, next=%65.4
  void                    Deopt              !v    %65.6   !
BB117   <- [115]
  void                    Assume             D     %115.11, %115.12 (Typecheck@0x561663a175b8[Type#2])
  lgl$-           %117.1 = CastType           d     dn %115.10
  lgl$#-          %117.2 = CheckTrueFalse     e     %117.1
  void                    Branch                   %117.2 -> BB119 (if true) | BB118 (if false)
BB116   <- [115]
  prom-           %116.0 = MkArg                    %115.9, [0x561663afc710]_p47 (!refl), e2.3
  val?~           %116.1 = CastType                 up %116.0
  prom-           %116.2 = MkArg                    unboundValue, [0x561663afc710]_p46, e2.3
  val?^           %116.3 = CastType                 up %116.2
  fs              %116.4 = FrameState         R     0x5616634826a0+1319: [%2.8, %2.9, %3.1], env=e2.3
  env             e116.5 = (MkEnv)            l     n=%116.3, suppress=%116.1, parent=<env 0x56166328f230>, context 0
  fs              %116.6 = FrameState         R     0x5616635151d0+91: [%115.10], env=e116.5, next=%116.4
  void                    Deopt              !v    %116.6   !
BB68   <- [66]
  lgl$#-          %68.0 = CheckTrueFalse     we    %64.9
  cp              %68.1 = Checkpoint                -> BB70 (default) | BB69 (if assume failed)
BB67   <- [66]
  prom-           %67.0 = MkArg                    %64.9, [0x561663afc710]_p34 (!refl), e2.3
  val?~           %67.1 = CastType                 up %67.0
  prom-           %67.2 = MkArg                    unboundValue, [0x561663afc710]_p33, e2.3
  val?^           %67.3 = CastType                 up %67.2
  env             e67.4 = (MkEnv)            l     n=%67.3, suppress=%67.1, parent=<env 0x56166328f230>, context 0
  env             e67.5 = MaterializeEnv           , e67.4   <@?>
  (cls|spec|blt)  %67.6 = LdFun              !v    %in%, e67.5
  fs              %67.7 = FrameState         R     0x5616634826a0+1600: [%2.8, %2.9, %3.1], env=e2.3
  fs              %67.8 = FrameState         R     0x5616635151d0+107: [%67.6], env=e67.5, next=%67.7
  void                    Deopt              !v    %67.8, DeadCall@0x561663a175b8[Call#1], %67.6   !
BB119   <- [117]
  lgl$#-          %119.0 = CheckTrueFalse     we    %115.9
  void                    Branch                   %119.0 -> BB134 (if true) | BB120 (if false)
BB118   <- [117]
  prom-           %118.0 = MkArg                    %115.9, [0x561663afc710]_p47 (!refl), e2.3
  val?~           %118.1 = CastType                 up %118.0
  prom-           %118.2 = MkArg                    unboundValue, [0x561663afc710]_p46, e2.3
  val?^           %118.3 = CastType                 up %118.2
  env             e118.4 = (MkEnv)            l     n=%118.3, suppress=%118.1, parent=<env 0x56166328f230>, context 0
  env             e118.5 = MaterializeEnv           , e118.4   <@?>
  (cls|spec|blt)  %118.6 = LdFun              !v    %in%, e118.5
  fs              %118.7 = FrameState         R     0x5616634826a0+1319: [%2.8, %2.9, %3.1], env=e2.3
  fs              %118.8 = FrameState         R     0x5616635151d0+107: [%118.6], env=e118.5, next=%118.7
  void                    Deopt              !v    %118.8, DeadCall@0x561663a175b8[Call#1], %118.6   !
BB70   <- [68]
  void                    Branch                   %68.0 -> BB94 (if true) | BB71 (if false)
BB69   <- [68]
  prom-           %69.0 = MkArg                    %64.9, [0x561663afc710]_p34 (!refl), e2.3
  val?~           %69.1 = CastType                 up %69.0
  prom-           %69.2 = MkArg                    unboundValue, [0x561663afc710]_p33, e2.3
  val?^           %69.3 = CastType                 up %69.2
  fs              %69.4 = FrameState         R     0x5616634826a0+1600: [%2.8, %2.9, %3.1], env=e2.3
  env             e69.5 = (MkEnv)            l     n=%69.3, suppress=%69.1, parent=<env 0x56166328f230>, context 0
  fs              %69.6 = FrameState         R     0x5616635151d0+164: [%68.0], env=e69.5, next=%69.4
  void                    Deopt              !v    %69.6   !
BB134   <- [119]
  goto BB121
BB120   <- [119]
  goto BB121
BB94   <- [70]
  goto BB72
BB71   <- [70]
  goto BB72
BB121   <- [134, 120]
  lgl$#-          %121.0 = Phi                      false:BB120, true:BB134
  lgl$#-          %121.1 = Not                d     %121.0, elided
  void                    Branch                   %121.0 -> BB133 (if true) | BB122 (if false)
BB72   <- [94, 71]
  lgl$#-          %72.0 = Phi                      false:BB71, true:BB94
  lgl$#-          %72.1 = Not                d     %72.0, elided
  void                    Branch                   %72.0 -> BB93 (if true) | BB73 (if false)
BB133   <- [121]
  goto BB125
BB122   <- [121]
  val?^ | miss    %122.0 = LdVar              eR    uses, e2.3
  val?            %122.1 = Force!             !v    %122.0, e2.3   <val?_>
  lgl$#-          %122.2 = IsType                   %122.1 isA val?+
  cp              %122.3 = Checkpoint                -> BB124 (default) | BB123 (if assume failed)
BB93   <- [72]
  goto BB76
BB73   <- [72]
  val?^ | miss    %73.0 = LdVar              eR    length, e2.3
  lgl$#-          %73.1 = Identical                <blt length>, %73.0   <true>
  void                    Assume             D     %73.1, %68.1 (DeadBranchReached@0x561663a17878[Test#4])
  val?^ | miss    %73.3 = LdVar              eR    funforms, e2.3
  lgl$#-          %73.4 = IsType                   %73.3 isA val?~- | miss
  void                    Assume             D     %73.4, %68.1 (Typecheck@0x561663a17878[Type#119])
  val?~- | miss   %73.6 = CastType           d     dn %73.3
  val?-           %73.7 = Force!<value>            %73.6,    <(nil|vec)->
  (int|real)$-    %73.8 = CallSafeBuiltin    wed   length(%73.7)    <int$->
  lgl$#-          %73.9 = IsType                   %73.8 isA int$-
  cp              %73.10 = Checkpoint                -> BB75 (default) | BB74 (if assume failed)
BB125   <- [133, 124]
  lgl$-           %125.0 = Phi                      %124.4:BB124, %121.1:BB133
  lgl$-           %125.1 = AsLogical                %125.0
  lgl$#-          %125.2 = Identical                %125.1, false
  void                    Branch                   %125.2 -> BB132 (if true) | BB126 (if false)
BB124   <- [122]
  void                    Assume             D     %122.2, %122.3 (Typecheck@0x561663a17878[Type#95])
  val?+           %124.1 = CastType           d     dn %122.1   <val?_>
  lgl             %124.2 = Eq                 wed   %124.1, 0, elided   <val?_>
  lgl$-           %124.3 = AsLogical          e     %124.2
  lgl$-           %124.4 = LAnd                     %121.1, %124.3
  goto BB125
BB123   <- [122]
  fs              %123.0 = FrameState         R     0x5616634826a0+1341: [%2.8, %2.9, %3.1, %121.1, %122.1], env=e2.3
  void                    Deopt              !v    %123.0   !
BB76   <- [93, 75]
  lgl$-           %76.0 = Phi                      %75.4:BB75, %72.1:BB93
  lgl$#-          %76.1 = CheckTrueFalse     e     %76.0
  void                    Branch                   %76.1 -> BB79 (if true) | BB77 (if false)
BB75   <- [73]
  void                    Assume             D     %73.9, %73.10 (Typecheck@0x561663a17878[Type#120])
  int$-           %75.1 = CastType           d     dn %73.8
  lgl$-           %75.2 = Gt                 d     %75.1, 1, elided   <lgl$->
  lgl$-           %75.3 = AsLogical                %75.2
  lgl$-           %75.4 = LAnd                     %72.1, %75.3
  goto BB76
BB74   <- [73]
  fs              %74.0 = FrameState         R     0x5616634826a0+1704: [%2.8, %2.9, %3.1, %72.1, %73.8], env=e2.3
  void                    Deopt              !v    %74.0   !
BB132   <- [125]
  goto BB129
BB126   <- [125]
  val?^ | miss    %126.0 = LdVar              eR    v, e2.3
  val?            %126.1 = Force!             !v    %126.0, e2.3   <val?_>
  lgl$#-          %126.2 = IsType                   %126.1 isA val?+
  cp              %126.3 = Checkpoint                -> BB128 (default) | BB127 (if assume failed)
BB79   <- [76]
  val?^ | miss    %79.0 = LdVar              eR    funforms, e2.3
  val?            %79.1 = Force!             !v    %79.0, e2.3   <val?_>
  lgl$#-          %79.2 = IsType                   %79.1 isA val?+
  cp              %79.3 = Checkpoint                -> BB81 (default) | BB80 (if assume failed)
BB77   <- [76]
  goto BB78
BB129   <- [132, 128]
  lgl$-           %129.0 = Phi                      %128.4:BB128, %125.1:BB132
  lgl$#-          %129.1 = CheckTrueFalse     e     %129.0
  void                    Branch                   %129.1 -> BB131 (if true) | BB130 (if false)
BB128   <- [126]
  void                    Assume             D     %126.2, %126.3 (Typecheck@0x561663a17878[Type#97])
  val?+           %128.1 = CastType           d     dn %126.1   <val?_>
  lgl             %128.2 = Neq                wed   %128.1, "...", elided   <val?_>
  lgl$-           %128.3 = AsLogical          e     %128.2
  lgl$-           %128.4 = LAnd                     %125.1, %128.3
  goto BB129
BB127   <- [126]
  fs              %127.0 = FrameState         R     0x5616634826a0+1376: [%2.8, %2.9, %3.1, %125.1, %126.1], env=e2.3
  void                    Deopt              !v    %127.0   !
BB81   <- [79]
  void                    Assume             D     %79.2, %79.3 (Typecheck@0x561663a17878[Type#122])
  val?+           %81.1 = CastType           d     dn %79.1   <val?_>
  val?            %81.2 = Extract2_1D        wed   %81.1, 1, elided   <val?_>
  void                    StVar              lW    first, %81.2, e2.3
  cp              %81.4 = Checkpoint                -> BB83 (default) | BB82 (if assume failed)
BB80   <- [79]
  fs              %80.0 = FrameState         R     0x5616634826a0+1743: [%2.8, %2.9, %3.1, %79.1], env=e2.3
  void                    Deopt              !v    %80.0   !
BB131   <- [129]
  (cls|spec|blt)  %131.0 = LdFun              !v    $, e2.3
  fs              %131.1 = FrameState         R     0x5616634826a0+1411: [%2.8, %2.9, %3.1, %131.0], env=e2.3
  void                    Deopt              !v    %131.1, DeadCall@0x561663a17878[Call#34], %131.0   !
BB130   <- [129]
  goto BB62
BB83   <- [81]
  val?^ | miss    %83.0 = LdVar              eR    names, e2.3
  lgl$#-          %83.1 = Identical                <blt names>, %83.0   <@?>
  void                    Branch                   %83.1 -> BB85 (if true) | BB84 (if false)
BB82   <- [81]
  fs              %82.0 = FrameState         R     0x5616634826a0+1801: [%2.8, %2.9, %3.1], env=e2.3
  void                    Deopt              !v    %82.0   !
BB85   <- [83]
  val             %85.0 = ChkMissing         e     %81.2
  lgl$#-          %85.1 = IsType                   %81.2 isA val?+
  void                    Assume             D     %85.1, %81.4 (Typecheck@0x561663a17878[Type#123])
  val?+           %85.3 = CastType           d     dn %81.2   <val?_>
  val+            %85.4 = CallSafeBuiltin    wed   names(%85.3)    <val?_>
  void                    StVar              lW    nfirst, %85.4, e2.3
  val?^ | miss    %85.6 = LdVar              eR    funforms, e2.3
  val?            %85.7 = Force!             !v    %85.6, e2.3   <val?_>
  lgl$#-          %85.8 = IsType                   %85.7 isA val+   <@?>
  cp              %85.9 = Checkpoint                -> BB87 (default) | BB86 (if assume failed)
BB84   <- [83]
  (cls|spec|blt)  %84.0 = LdFun              !v    names, e2.3
  fs              %84.1 = FrameState         R     0x5616634826a0+1829: [%2.8, %2.9, %3.1, %84.0], env=e2.3
  void                    Deopt              !v    %84.1, DeadCall@0x561663a17878[Call#45], %84.0   !
BB87   <- [85]
  void                    Branch                   %85.8 -> BB92 (if true) | BB88 (if false)
BB86   <- [85]
  fs              %86.0 = FrameState         R     0x5616634826a0+1915: [%2.8, %2.9, %3.1, %85.7], env=e2.3
  void                    Deopt              !v    %86.0   !
BB92   <- [87]
  goto BB89
BB88   <- [87]
  prom-           %88.0 = MkArg                    unboundValue, [0x561663afc710]_p37 (!refl), 
  goto BB89
BB89   <- [88, 92]
  (real|prom)-    %89.0 = Phi                      -1:BB92, %88.0:BB88
  lgl$#-          %89.1 = IsType                   %85.7 isA val?+
  void                    Assume             D     %89.1, %85.9 (Typecheck@0x561663a17878[Type#127])
  val?+           %89.3 = CastType           d     dn %85.7   <val?_>
  val?            %89.4 = Extract1_1D        wed   %89.3, %89.0, elided   <val?_>
  val?+           %89.5 = ToForSeq           e     %89.4
  int$-           %89.6 = Length                   %89.5
  int$-           %89.7 = Inc                      0L
  lgl$-           %89.8 = Lt                 d     %89.6, %89.7, elided   <@?>
  lgl$#-          %89.9 = Identical                %89.8, true
  void                    Branch                   %89.9 -> BB91 (if true) | BB90 (if false)
BB91   <- [89]
  goto BB78
BB90   <- [89]
  val?            %90.0 = Extract2_1D        wed   %89.5, %89.7, elided
  void                    StVar              lW    d, %90.0, e2.3
  (cls|spec|blt)  %90.2 = LdFun              !v    identical, e2.3
  fs              %90.3 = FrameState         R     0x5616634826a0+2010: [%2.8, %2.9, %3.1, %89.5, %89.6, %89.7, %90.2], env=e2.3
  void                    Deopt              !v    %90.3, DeadCall@0x561663a17878[Call#46], %90.2   !
Prom 0:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     $, <0x561660cbcc10>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, [0x561663afc710]_p1, e1.0
  prom-           %1.3  = MkArg                    unboundValue, [0x561663afc710]_p2, e1.0
  val?            %1.4  = Call               !     %1.1(%1.2, %1.3) e1.0   <env+>
  void                    Return             l     %1.4
Prom 1:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    w, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 2:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    env, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 3:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    v, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 4:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     $, <0x561660cbcc10>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, [0x561663afc710]_p5, e1.0
  prom-           %1.3  = MkArg                    unboundValue, [0x561663afc710]_p6, e1.0
  val?            %1.4  = Call               !     %1.1(%1.2, %1.3) e1.0   <lgl$->
  void                    Return             l     %1.4
Prom 5:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    w, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 6:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    suppressLocal, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 7:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    v, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 8:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    w, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 9:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    v, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 10:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    w, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 11:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    v, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 12:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    w, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 13:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    v, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 14:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    w, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 15:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    v, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 16:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    w, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 17:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    v, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 18:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    w, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 19:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    v, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 20:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    w, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 21:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     $, e1.0
  prom-           %1.2  = MkArg                    unboundValue, [0x561663afc710]_p22, e1.0
  prom-           %1.3  = MkArg                    unboundValue, [0x561663afc710]_p23, e1.0
  val?            %1.4  = Call               !     %1.1(%1.2, %1.3) e1.0   <val?_>
  void                    Return             l     %1.4
Prom 22:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    w, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 23:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    srcfile, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 24:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    srcinfo, e1.0
  val?            %1.2  = Force              !v    %1.1, e1.0   <val?_>
  val?            %1.3  = Extract1_2D        !v    %1.2, 1, "srcfile", e1.0   <val?_>
  void                    Visible            v     
  void                    Return             l     %1.3
Prom 25:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     $, e1.0
  prom-           %1.2  = MkArg                    unboundValue, [0x561663afc710]_p26, e1.0
  prom-           %1.3  = MkArg                    unboundValue, [0x561663afc710]_p27, e1.0
  val?            %1.4  = Call               !     %1.1(%1.2, %1.3) e1.0   <val?_>
  void                    Return             l     %1.4
Prom 26:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    w, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 27:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    frow, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 28:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    srcinfo, e1.0
  val?            %1.2  = Force              !v    %1.1, e1.0   <val?_>
  val?            %1.3  = Extract1_2D        !v    %1.2, 1, "frow", e1.0   <val?_>
  void                    Visible            v     
  void                    Return             l     %1.3
Prom 29:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     $, e1.0
  prom-           %1.2  = MkArg                    unboundValue, [0x561663afc710]_p30, e1.0
  prom-           %1.3  = MkArg                    unboundValue, [0x561663afc710]_p31, e1.0
  val?            %1.4  = Call               !     %1.1(%1.2, %1.3) e1.0   <val?_>
  void                    Return             l     %1.4
Prom 30:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    w, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 31:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    lrow, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 32:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    srcinfo, e1.0
  val?            %1.2  = Force              !v    %1.1, e1.0   <val?_>
  val?            %1.3  = Extract1_2D        !v    %1.2, 1, "lrow", e1.0   <val?_>
  void                    Visible            v     
  void                    Return             l     %1.3
Prom 33:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    v, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 34:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     $, <0x561660cbcc10>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, [0x561663afc710]_p35, e1.0
  prom-           %1.3  = MkArg                    unboundValue, [0x561663afc710]_p36, e1.0
  val?            %1.4  = Call               !     %1.1(%1.2, %1.3) e1.0   <lgl$->
  void                    Return             l     %1.4
Prom 35:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    w, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 36:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    suppressFundefMismatch, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 37:
BB0
  goto BB1
BB1   <- [0]
  void                    Visible            v     
  void                    Return             l     -1
Prom 38:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    v, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 39:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     $, <0x561660cbcc10>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, [0x561663afc710]_p40, e1.0
  prom-           %1.3  = MkArg                    unboundValue, [0x561663afc710]_p41, e1.0
  val?            %1.4  = Call               !     %1.1(%1.2, %1.3) e1.0   <lgl$->
  void                    Return             l     %1.4
Prom 40:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    w, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 41:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    suppressNoLocalFun, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 42:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    v, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 43:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     $, <0x561660cbcc10>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, [0x561663afc710]_p44, e1.0
  prom-           %1.3  = MkArg                    unboundValue, [0x561663afc710]_p45, e1.0
  val?            %1.4  = Call               !     %1.1(%1.2, %1.3) e1.0   <lgl$->
  void                    Return             l     %1.4
Prom 44:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    w, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 45:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    suppressParamAssigns, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 46:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    v, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 47:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     $, <0x561660cbcc10>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, [0x561663afc710]_p48, e1.0
  prom-           %1.3  = MkArg                    unboundValue, [0x561663afc710]_p49, e1.0
  val?            %1.4  = Call               !     %1.1(%1.2, %1.3) e1.0   <lgl$->
  void                    Return             l     %1.4
Prom 48:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    w, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 49:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    suppressParamUnused, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 50:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    which, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 51:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     getLocalUsageEntry, <0x5616639c2b98>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, [0x561663afc710]_p52, e1.0
  prom-           %1.3  = MkArg                    unboundValue, [0x561663afc710]_p53, e1.0
  val?            %1.4  = Call               !     %1.1(%1.2, %1.3) e1.0   <env->
  void                    Return             l     %1.4
Prom 52:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    vn, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 53:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    w, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 54:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    which, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 55:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     getLocalUsageEntry, <0x5616639c2b98>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, [0x561663afc710]_p56, e1.0
  prom-           %1.3  = MkArg                    unboundValue, [0x561663afc710]_p57, e1.0
  val?            %1.4  = Call               !     %1.1(%1.2, %1.3) e1.0   <env->
  void                    Return             l     %1.4
Prom 56:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    vn, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 57:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    w, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 58:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    which, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 59:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     getLocalUsageEntry, <0x5616639c2b98>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, [0x561663afc710]_p60, e1.0
  prom-           %1.3  = MkArg                    unboundValue, [0x561663afc710]_p61, e1.0
  val?            %1.4  = Call               !     %1.1(%1.2, %1.3) e1.0   <env->
  void                    Return             l     %1.4
Prom 60:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    vn, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 61:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    w, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 62:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    which, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 63:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     getLocalUsageEntry, <0x5616639c2b98>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, [0x561663afc710]_p64, e1.0
  prom-           %1.3  = MkArg                    unboundValue, [0x561663afc710]_p65, e1.0
  val?            %1.4  = Call               !     %1.1(%1.2, %1.3) e1.0   <env->
  void                    Return             l     %1.4
Prom 64:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    vn, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 65:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    w, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 66:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    which, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 67:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     getLocalUsageEntry, <0x5616639c2b98>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, [0x561663afc710]_p68, e1.0
  prom-           %1.3  = MkArg                    unboundValue, [0x561663afc710]_p69, e1.0
  val?            %1.4  = Call               !     %1.1(%1.2, %1.3) e1.0   <env->
  void                    Return             l     %1.4
Prom 68:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    vn, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 69:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    w, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 70:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    which, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 71:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     getLocalUsageEntry, <0x5616639c2b98>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, [0x561663afc710]_p72, e1.0
  prom-           %1.3  = MkArg                    unboundValue, [0x561663afc710]_p73, e1.0
  val?            %1.4  = Call               !     %1.1(%1.2, %1.3) e1.0   <env->
  void                    Return             l     %1.4
Prom 72:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    vn, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 73:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    w, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 74:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    which, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 75:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     getLocalUsageEntry, <0x5616639c2b98>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, [0x561663afc710]_p76, e1.0
  prom-           %1.3  = MkArg                    unboundValue, [0x561663afc710]_p77, e1.0
  val?            %1.4  = Call               !     %1.1(%1.2, %1.3) e1.0   <env->
  void                    Return             l     %1.4
Prom 76:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    vn, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 77:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    w, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3

│ [0x561663afc710]                                                             │
└──────────────────────────────────────────────────────────────────────────────┘
