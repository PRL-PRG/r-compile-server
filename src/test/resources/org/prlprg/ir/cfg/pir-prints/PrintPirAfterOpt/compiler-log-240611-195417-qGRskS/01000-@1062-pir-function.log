
┌──────────────────────────────────────────────────────────────────────────────┐
│ @1062[0x561663488960]                                                        │
│ Context: CorrOrd,!TMany                                                      │
│ Properties:                                                                  │
├────── PIR Version After Optimizations
@1062[0x561663488960]
BB0
  goto BB1
BB1   <- [0]
  val?^ | miss    %1.0  = LdArg                    1
  val?^ | miss    %1.1  = LdArg                    0
  cp              %1.2  = Checkpoint                -> BB2 (default) | BB59 (if assume failed)
BB2   <- [1]
  val?^ | miss    %2.0  = LdVar              eR    length, ?
  lgl$#-          %2.1  = Identical                <blt length>, %2.0   <true>
  void                    Assume             D     %2.1, %1.2 (DeadBranchReached@0x561661f14828[Test#0])
  val?^           %2.3  = ChkMissing         e     %1.1
  env             e2.4  = MkEnv              l     e=%1.1, w=%1.0, parent=?, context 1
  val?            %2.5  = Force!<lazy>       !v    %2.3, e2.4   <code->
  lgl$#-          %2.6  = IsType                   %2.5 isA val?-
  cp              %2.7  = Checkpoint                -> BB4 (default) | BB3 (if assume failed)
BB59   <- [1]
  env             e59.0 = (MkEnv)            l     e=%1.1, w=%1.0, parent=?, context 1
  fs              %59.1 = FrameState         R     0x5616633f6850+0: [], env=e59.0
  void                    Deopt              !v    %59.1
BB4   <- [2]
  void                    Assume             D     %2.6, %2.7 (Typecheck@0x561661f14828[Type#1])
  val?-           %4.1  = CastType           d     dn %2.5   <code->
  (int|real)$-    %4.2  = CallSafeBuiltin    wed   length(%4.1)    <int$->
  lgl$#-          %4.3  = IsType                   %4.2 isA int$-
  cp              %4.4  = Checkpoint                -> BB6 (default) | BB5 (if assume failed)
BB3   <- [2]
  fs              %3.0  = FrameState         R     0x5616633f6850+69: [<blt length>, %2.5], env=e2.4
  void                    Deopt              !v    %3.0   !
BB6   <- [4]
  void                    Assume             D     %4.3, %4.4 (Typecheck@0x561661f14828[Type#2])
  int$-           %6.1  = CastType           d     dn %4.2
  lgl$-           %6.2  = Eq                 d     %6.1, 3, elided   <lgl$->
  lgl$-           %6.3  = AsLogical                %6.2
  lgl$#-          %6.4  = Identical                %6.3, false
  void                    Branch                   %6.4 -> BB58 (if true) | BB7 (if false)
BB5   <- [4]
  fs              %5.0  = FrameState         R     0x5616633f6850+91: [%4.2], env=e2.4
  void                    Deopt              !v    %5.0   !
BB58   <- [6]
  goto BB12
BB7   <- [6]
  val?^ | miss    %7.0  = LdVar              eR    is.character, e2.4
  lgl$#-          %7.1  = Identical                <blt is.character>, %7.0   <@?>
  void                    Branch                   %7.1 -> BB9 (if true) | BB8 (if false)
BB12   <- [58, 11]
  lgl$-           %12.0 = Phi                      %11.4:BB11, %6.3:BB58
  lgl$-           %12.1 = AsLogical                %12.0
  lgl$#-          %12.2 = Identical                %12.1, false
  void                    Branch                   %12.2 -> BB57 (if true) | BB13 (if false)
BB9   <- [7]
  val?^ | miss    %9.0  = LdVar              eR    e, e2.4
  val?            %9.1  = Force!             !v    %9.0, e2.4   <val?_>
  lgl$#-          %9.2  = IsType                   %9.1 isA val?+
  cp              %9.3  = Checkpoint                -> BB11 (default) | BB10 (if assume failed)
BB8   <- [7]
  (cls|spec|blt)  %8.0  = LdFun              !v    is.character, e2.4
  fs              %8.1  = FrameState         R     0x5616633f6850+143: [%6.3, %8.0], env=e2.4
  void                    Deopt              !v    %8.1, DeadCall@0x561661f14828[Call#1], %8.0   !
BB57   <- [12]
  goto BB20
BB13   <- [12]
  val?^ | miss    %13.0 = LdVar              eR    length, e2.4
  lgl$#-          %13.1 = Identical                <blt length>, %13.0   <@?>
  void                    Branch                   %13.1 -> BB15 (if true) | BB14 (if false)
BB11   <- [9]
  void                    Assume             D     %9.2, %9.3 (Typecheck@0x561661f14828[Type#6])
  val?+           %11.1 = CastType           d     dn %9.1   <val?_>
  val?            %11.2 = Extract2_1D        wed   %11.1, 2, elided   <val?_>
  lgl$#-          %11.3 = CallSafeBuiltin    wed   is.character(%11.2)    <val?_>
  lgl$-           %11.4 = LAnd                     %6.3, %11.3
  goto BB12
BB10   <- [9]
  fs              %10.0 = FrameState         R     0x5616633f6850+184: [%6.3, <blt is.character>, %9.1], env=e2.4
  void                    Deopt              !v    %10.0   !
BB20   <- [57, 19]
  lgl$-           %20.0 = Phi                      %19.5:BB19, %12.1:BB57
  cp              %20.1 = Checkpoint                -> BB22 (default) | BB21 (if assume failed)
BB15   <- [13]
  val?^ | miss    %15.0 = LdVar              eR    e, e2.4
  val?            %15.1 = Force!             !v    %15.0, e2.4   <val?_>
  lgl$#-          %15.2 = IsType                   %15.1 isA val?+
  cp              %15.3 = Checkpoint                -> BB17 (default) | BB16 (if assume failed)
BB14   <- [13]
  (cls|spec|blt)  %14.0 = LdFun              !v    length, e2.4
  fs              %14.1 = FrameState         R     0x5616633f6850+292: [%12.1, %14.0], env=e2.4
  void                    Deopt              !v    %14.1, DeadCall@0x561661f14828[Call#2], %14.0   !
BB22   <- [20]
  lgl$#-          %22.0 = CheckTrueFalse     e     %20.0
  void                    Branch                   %22.0 -> BB56 (if true) | BB23 (if false)
BB21   <- [20]
  fs              %21.0 = FrameState         R     0x5616633f6850+418: [%20.0], env=e2.4
  void                    Deopt              !v    %21.0   !
BB17   <- [15]
  void                    Assume             D     %15.2, %15.3 (Typecheck@0x561661f14828[Type#11])
  val?+           %17.1 = CastType           d     dn %15.1   <val?_>
  val?            %17.2 = Extract2_1D        wed   %17.1, 2, elided   <val?_>
  lgl$#-          %17.3 = IsType                   %17.2 isA val?+
  cp              %17.4 = Checkpoint                -> BB19 (default) | BB18 (if assume failed)
BB16   <- [15]
  fs              %16.0 = FrameState         R     0x5616633f6850+333: [%12.1, <blt length>, %15.1], env=e2.4
  void                    Deopt              !v    %16.0   !
BB56   <- [22]
  (cls|spec|blt)  %56.0 = LdFun              !v    $, e2.4
  fs              %56.1 = FrameState         R     0x5616633f6850+632: [%56.0], env=e2.4
  void                    Deopt              !v    %56.1, DeadCall@0x561661f14828[Call#6], %56.0   !
BB23   <- [22]
  val?^ | miss    %23.0 = LdVar              eR    dropMissings, e2.4
  lgl$#-          %23.1 = Identical                %23.0, function(x) <(rir::DispatchTable*)0x5616634d6f|...
  void                    Assume             D     %23.1, %20.1 (CallTarget@0x561661f14828[Call#3])
  prom-           %23.3 = MkArg                    unboundValue, @1062[0x561663488960]_p0, e2.4
  ct              %23.4 = PushContext        lCL   %23.3, dropMissings([(e, -(1))), function(x) <(rir::DispatchTable*)0x5616634d6f|..., e2.4
  val?^           %23.5 = CastType                 up %23.3
  val?^ | miss    %23.6 = LdVar              eR    as.list, <env 0x56166328f230>
  lgl$#-          %23.7 = Identical                %23.6, function(x, ...) <(rir::DispatchTable*)0x56166|...
  void                    Assume             D     %23.7, %20.1 (CallTarget@0x56166194ac28[Call#0])
  env             e23.9 = MkEnv              l     x=%23.5, parent=<env 0x56166328f230>, context 1
  val?            %23.10 = Force!<lazy>       !vL   %23.5, e23.9   <val?->
  val?            %23.11 = StaticCall         !v    as.list[0x5616645f5b80](%23.10) { 0 } e23.9   <vec+>
  void                    StVar              lW    lx, %23.11, e23.9
  (cls|spec|blt)  %23.13 = LdFun              !v    rep, <0x561660cd19b0>, e23.9
  prom-           %23.14 = MkArg                    unboundValue, @1062[0x561663488960]_p6, e23.9
  val?            %23.15 = Call               !v    %23.13(true, %23.14) e23.9   <lgl->
  void                    StVar              lW    ix, %23.15, e23.9
  cp              %23.17 = Checkpoint                -> BB25 (default) | BB24 (if assume failed)
BB19   <- [17]
  void                    Assume             D     %17.3, %17.4 (Typecheck@0x561661f14828[Type#12])
  val?+           %19.1 = CastType           d     dn %17.2   <val?_>
  (int|real)$-    %19.2 = CallSafeBuiltin    wed   length(%19.1)    <val?_>
  lgl$-           %19.3 = Eq                 d     %19.2, 1, elided   <val?_>
  lgl$-           %19.4 = AsLogical                %19.3
  lgl$-           %19.5 = LAnd                     %12.1, %19.4
  goto BB20
BB18   <- [17]
  fs              %18.0 = FrameState         R     0x5616633f6850+376: [%12.1, <blt length>, %17.2], env=e2.4
  void                    Deopt              !v    %18.0   !
BB25   <- [23]
  val?^ | miss    %25.0 = LdVar              eR    seq_along, e23.9
  lgl$#-          %25.1 = Identical                <blt seq_along>, %25.0   <true>
  void                    Assume             D     %25.1, %23.17 (DeadBranchReached@0x56166194ac28[Test#0])
  val             %25.3 = ChkMissing         e     %23.15
  val?            %25.4 = CallBuiltin        !v    seq_along(%23.15) e23.9   <int->
  val?+           %25.5 = ToForSeq           e     %25.4
  int$-           %25.6 = Length                   %25.5
  int$-           %25.7 = Inc                      0L
  lgl$-           %25.8 = Lt                 d     %25.6, %25.7, elided
  lgl$#-          %25.9 = Identical                %25.8, true
  void                    Branch                   %25.9 -> BB55 (if true) | BB26 (if false)
BB24   <- [23]
  fs              %24.0 = FrameState         R     0x5616633f6850+456: [], env=e2.4
  fs              %24.1 = FrameState         R     0x561663afa0d0+97: [], env=e23.9, next=%24.0
  void                    Deopt              !v    %24.1   !
BB55   <- [25]
  goto BB42
BB26   <- [25]
  val?            %26.0 = Extract2_1D        wed   %25.5, %25.7, elided
  void                    StVar              lW    i, %26.0, e23.9
  cp              %26.2 = Checkpoint                -> BB28 (default) | BB27 (if assume failed)
BB42   <- [55, 41]
  int$-           %42.0 = Phi                      %32.1:BB41, %25.7:BB55
  cp              %42.1 = Checkpoint                -> BB44 (default) | BB43 (if assume failed)
BB28   <- [26]
  val?^ | miss    %28.0 = LdVar              eR    lx, e23.9
  lgl$#-          %28.1 = IsType                   %28.0 isA val?~+ | miss
  void                    Assume             D     %28.1, %26.2 (Typecheck@0x56166194ac28[Type#8])
  val?~+ | miss   %28.3 = CastType           d     dn %28.0
  val?+           %28.4 = Force!<value>            %28.3,    <vec+>
  lgl$#-          %28.5 = IsType                   %28.4 isA val+   <true>
  void                    Assume             D     %28.5, %26.2 (DeadBranchReached@0x56166194ac28[Test#2])
  val             %28.7 = ChkMissing         e     %26.0
  lgl$#-          %28.8 = IsType                   %28.7 isA int$-
  void                    Assume             D     %28.8, %26.2 (Typecheck@0x56166194ac28[Type#10])
  int$-           %28.10 = CastType           d     dn %28.7
  val?            %28.11 = Extract2_1D        wed   %28.4, %28.10, elided   <val?->
  void                    StVar              lW    a, %28.11, e23.9
  cp              %28.13 = Checkpoint                -> BB30 (default) | BB29 (if assume failed)
BB27   <- [26]
  fs              %27.0 = FrameState         R     0x5616633f6850+456: [], env=e2.4
  fs              %27.1 = FrameState         R     0x561663afa0d0+233: [%25.5, %25.6, %25.7], env=e23.9, next=%27.0
  void                    Deopt              !v    %27.1   !
BB44   <- [42]
  val?^ | miss    %44.0 = LdVar              eR    lx, e23.9
  lgl$#-          %44.1 = IsType                   %44.0 isA val?~+ | miss
  void                    Assume             D     %44.1, %42.1 (Typecheck@0x56166194ac28[Type#20])
  val?~+ | miss   %44.3 = CastType           d     dn %44.0
  val?+           %44.4 = Force!<value>            %44.3,    <vec+>
  lgl$#-          %44.5 = IsType                   %44.4 isA val+   <true>
  void                    Assume             D     %44.5, %42.1 (DeadBranchReached@0x56166194ac28[Test#4])
  val?^ | miss    %44.7 = LdVar              eR    ix, e23.9
  lgl$#-          %44.8 = IsType                   %44.7 isA lgl-
  void                    Assume             D     %44.8, %42.1 (Typecheck@0x56166194ac28[Type#22])
  lgl-            %44.10 = CastType           d     dn %44.7
  val?            %44.11 = Extract1_1D        wed   %44.4, %44.10, elided   <vec+>
  val?            %44.12 = PopContext         C     %44.11, %23.4   <vec+>
  cp              %44.13 = Checkpoint                -> BB46 (default) | BB45 (if assume failed)
BB43   <- [42]
  fs              %43.0 = FrameState         R     0x5616633f6850+456: [], env=e2.4
  fs              %43.1 = FrameState         R     0x561663afa0d0+539: [%25.5, %25.6, %42.0], env=e23.9, next=%43.0
  void                    Deopt              !v    %43.1   !
BB30   <- [28]
  lgl$-           %30.0 = Missing            eR    a, e23.9
  lgl$#-          %30.1 = CheckTrueFalse     e     %30.0
  void                    Branch                   %30.1 -> BB54 (if true) | BB31 (if false)
BB29   <- [28]
  fs              %29.0 = FrameState         R     0x5616633f6850+456: [], env=e2.4
  fs              %29.1 = FrameState         R     0x561663afa0d0+308: [%25.5, %25.6, %25.7], env=e23.9, next=%29.0
  void                    Deopt              !v    %29.1   !
BB46   <- [44]
  val?+           %46.0 = ToForSeq           e     %44.12
  int$-           %46.1 = Length                   %46.0
  lgl$-           %46.2 = Lt                 d     %46.1, %25.7, elided   <false>
  lgl$#-          %46.3 = Identical                %46.2, true
  void                    AssumeNot          D     %46.3, %44.13 (DeadBranchReached@0x561661f14828[Test#8])
  val?            %46.5 = Extract2_1D        wed   %46.0, %25.7, elided
  void                    StVar              lW    a, %46.5, e2.4
  cp              %46.7 = Checkpoint                -> BB48 (default) | BB47 (if assume failed)
BB45   <- [44]
  fs              %45.0 = FrameState         R     0x5616633f6850+456: [%44.12], env=e2.4
  void                    Deopt              !v    %45.0   !
BB54   <- [30]
  val?^ | miss    %54.0 = LdVar              eR    ix !upd, e23.9
  lgl$#-          %54.1 = IsType                   %54.0 isA lgl-
  void                    Assume             D     %54.1, %28.13 (Typecheck@0x56166194ac28[Type#12])
  lgl-            %54.3 = CastType           d     dn %54.0
  lgl-            %54.4 = Subassign1_1D      wed   false, %54.3, %28.10, elided
  void                    StVar              lW    ix, %54.4, e23.9
  goto BB32
BB31   <- [30]
  goto BB32
BB48   <- [46]
  val?^ | miss    %48.0 = LdVar              eR    walkCode, e2.4
  lgl$#-          %48.1 = Identical                %48.0, function(e, w=makeCodeWalker()) <(rir::Dispatc|...
  void                    Assume             D     %48.1, %46.7 (CallTarget@0x561661f14828[Call#4])
  prom-           %48.3 = MkArg                    unboundValue, @1062[0x561663488960]_p2 (!refl), e2.4
  prom-           %48.4 = MkArg                    unboundValue, @1062[0x561663488960]_p3, e2.4
  val?            %48.5 = StaticCall         !v    walkCode[0x56166366ac30](%48.3, %48.4) e2.4
  goto BB49
BB47   <- [46]
  fs              %47.0 = FrameState         R     0x5616633f6850+501: [%46.0, %46.1, %25.7], env=e2.4
  void                    Deopt              !v    %47.0   !
BB32   <- [31, 54, 39]
  int$-           %32.0 = Phi                      %25.7:BB31, %32.1:BB39, %25.7:BB54
  int$-           %32.1 = Inc                      %32.0
  lgl$-           %32.2 = Lt                 d     %25.6, %32.1, elided
  lgl$#-          %32.3 = Identical                %32.2, true
  void                    Branch                   %32.3 -> BB41 (if true) | BB33 (if false)
BB49   <- [48, 52]
  int$-           %49.0 = Phi                      %25.7:BB48, %49.1:BB52
  int$-           %49.1 = Inc                      %49.0
  lgl$-           %49.2 = Lt                 d     %46.1, %49.1, elided
  lgl$#-          %49.3 = Identical                %49.2, true
  void                    Branch                   %49.3 -> BB53 (if true) | BB50 (if false)
BB41   <- [32]
  goto BB42
BB33   <- [32]
  val?            %33.0 = Extract2_1D        wed   %25.5, %32.1, elided
  void                    StVar              lW    i, %33.0, e23.9
  cp              %33.2 = Checkpoint                -> BB35 (default) | BB34 (if assume failed)
BB53   <- [49]
  void                    Invisible          v     
  void                    Return             l     nil
BB50   <- [49]
  val?            %50.0 = Extract2_1D        wed   %46.0, %49.1, elided
  void                    StVar              lW    a, %50.0, e2.4
  cp              %50.2 = Checkpoint                -> BB52 (default) | BB51 (if assume failed)
BB35   <- [33]
  val             %35.0 = ChkMissing         e     %33.0
  lgl$#-          %35.1 = IsType                   %35.0 isA int$-
  void                    Assume             D     %35.1, %33.2 (Typecheck@0x56166194ac28[Type#16])
  int$-           %35.3 = CastType           d     dn %35.0
  val?            %35.4 = Extract2_1D        wed   %28.4, %35.3, elided   <val?->
  void                    StVar              lW    a, %35.4, e23.9
  cp              %35.6 = Checkpoint                -> BB37 (default) | BB36 (if assume failed)
BB34   <- [33]
  fs              %34.0 = FrameState         R     0x5616633f6850+456: [], env=e2.4
  fs              %34.1 = FrameState         R     0x561663afa0d0+398: [%25.5, %25.6, %32.1], env=e23.9, next=%34.0
  void                    Deopt              !v    %34.1   !
BB52   <- [50]
  val?^ | miss    %52.0 = LdVar              eR    walkCode, e2.4
  lgl$#-          %52.1 = Identical                %52.0, function(e, w=makeCodeWalker()) <(rir::Dispatc|...
  void                    Assume             D     %52.1, %50.2 (CallTarget@0x561661f14828[Call#5])
  prom-           %52.3 = MkArg                    unboundValue, @1062[0x561663488960]_p4 (!refl), e2.4
  prom-           %52.4 = MkArg                    unboundValue, @1062[0x561663488960]_p5, e2.4
  val?            %52.5 = StaticCall         !v    walkCode[0x56166366ac30](%52.3, %52.4) e2.4
  goto BB49
BB51   <- [50]
  fs              %51.0 = FrameState         R     0x5616633f6850+568: [%46.0, %46.1, %49.1], env=e2.4
  void                    Deopt              !v    %51.0   !
BB37   <- [35]
  lgl$-           %37.0 = Missing            eR    a, e23.9
  lgl$#-          %37.1 = CheckTrueFalse     e     %37.0
  void                    Branch                   %37.1 -> BB40 (if true) | BB38 (if false)
BB36   <- [35]
  fs              %36.0 = FrameState         R     0x5616633f6850+456: [], env=e2.4
  fs              %36.1 = FrameState         R     0x561663afa0d0+473: [%25.5, %25.6, %32.1], env=e23.9, next=%36.0
  void                    Deopt              !v    %36.1   !
BB40   <- [37]
  val?^ | miss    %40.0 = LdVar              eR    ix !upd, e23.9
  lgl$#-          %40.1 = IsType                   %40.0 isA lgl-
  void                    Assume             D     %40.1, %35.6 (Typecheck@0x56166194ac28[Type#18])
  lgl-            %40.3 = CastType           d     dn %40.0
  val             %40.4 = ChkMissing         e     %33.0
  lgl$#-          %40.5 = IsType                   %40.4 isA int$-
  void                    Assume             D     %40.5, %35.6 (Typecheck@0x56166194ac28[Type#19])
  int$-           %40.7 = CastType           d     dn %40.4
  lgl-            %40.8 = Subassign1_1D      wed   false, %40.3, %40.7, elided
  void                    StVar              lW    ix, %40.8, e23.9
  goto BB39
BB38   <- [37]
  goto BB39
BB39   <- [38, 40]
  goto BB32
Prom 0:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    e, e1.0
  val?            %1.2  = Force<wrapped>     !v    %1.1, e1.0   <code->
  lgl$#-          %1.3  = IsType                   %1.2 isA val+   <true>
  void                    Branch                   %1.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [1]
  goto BB3
BB4   <- [1]
  prom-           %4.0  = MkArg                    unboundValue, @1062[0x561663488960]_p1, 
  goto BB3
BB3   <- [4, 2]
  (real|prom)-    %3.0  = Phi                      -1:BB2, %4.0:BB4
  val?            %3.1  = Extract1_1D        !v    %1.2, %3.0, e1.0   <code->
  void                    Visible            v     
  void                    Return             l     %3.1
Prom 1:
BB0
  goto BB1
BB1   <- [0]
  void                    Visible            v     
  void                    Return             l     -1
Prom 2:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    a, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <(sym|str)->
  void                    Return             l     %1.3
Prom 3:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    w, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 4:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    a, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <val?->
  void                    Return             l     %1.3
Prom 5:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    w, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 6:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     length, e1.0
  prom-           %1.2  = MkArg                    unboundValue, @1062[0x561663488960]_p7, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <val?_>
  void                    Return             l     %1.3
Prom 7:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    x, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3

│ @1062[0x561663488960]                                                        │
└──────────────────────────────────────────────────────────────────────────────┘
