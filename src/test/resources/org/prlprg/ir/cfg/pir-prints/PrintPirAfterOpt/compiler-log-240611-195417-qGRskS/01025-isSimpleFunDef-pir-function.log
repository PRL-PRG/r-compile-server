
┌──────────────────────────────────────────────────────────────────────────────┐
│ isSimpleFunDef[0x561663697310]                                               │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch                                      │
│ Properties:                                                                  │
├────── PIR Version After Optimizations
isSimpleFunDef[0x561663697310]
BB0
  goto BB1
BB1   <- [0]
  val?^           %1.0  = LdArg                    1
  val?^           %1.1  = LdArg                    0
  cp              %1.2  = Checkpoint                -> BB2 (default) | BB39 (if assume failed)
BB2   <- [1]
  val?^ | miss    %2.0  = LdVar              eR    typeof, <env 0x56166328f230>
  lgl$#-          %2.1  = Identical                %2.0, function(x) <(rir::DispatchTable*)0x5616632751|...
  void                    Assume             D     %2.1, %1.2 (CallTarget@0x561660ce8b18[Call#0])
  env             e2.3  = MkEnv              l     e=%1.1, w=%1.0, parent=<env 0x56166328f230>, context 1
  prom-           %2.4  = MkArg                    unboundValue, isSimpleFunDef[0x561663697310]_p0, e2.3
  val?            %2.5  = StaticCall         !v    typeof[0x561661845010](%2.4) e2.3   <str$->
  lgl$#-          %2.6  = IsType                   %2.5 isA val?-
  cp              %2.7  = Checkpoint                -> BB4 (default) | BB3 (if assume failed)
BB39   <- [1]
  env             e39.0 = (MkEnv)            l     e=%1.1, w=%1.0, parent=<env 0x56166328f230>, context 1
  fs              %39.1 = FrameState         R     0x5616637fc290+0: [], env=e39.0
  void                    Deopt              !v    %39.1   !
BB4   <- [2]
  void                    Visible            v     
  void                    Assume             D     %2.6, %2.7 (Typecheck@0x561660ce8b18[Type#2])
  val?-           %4.2  = CastType           d     dn %2.5   <str$->
  lgl-            %4.3  = Neq                vwed  %4.2, "language", elided   <lgl$->
  lgl$#-          %4.4  = IsType                   %4.3 isA lgl$-
  cp              %4.5  = Checkpoint                -> BB6 (default) | BB5 (if assume failed)
BB3   <- [2]
  fs              %3.0  = FrameState         R     0x5616637fc290+32: [%2.5], env=e2.3
  void                    Deopt              !v    %3.0   !
BB6   <- [4]
  void                    Assume             D     %4.4, %4.5 (Typecheck@0x561660ce8b18[Type#3])
  lgl$-           %6.1  = CastType           d     dn %4.3
  lgl$-           %6.2  = AsLogical                %6.1
  lgl$#-          %6.3  = Identical                %6.2, false
  void                    Branch                   %6.3 -> BB38 (if true) | BB7 (if false)
BB5   <- [4]
  fs              %5.0  = FrameState         R     0x5616637fc290+44: [%4.3], env=e2.3
  void                    Deopt              !v    %5.0   !
BB38   <- [6]
  goto BB12
BB7   <- [6]
  val?^ | miss    %7.0  = LdVar              eR    typeof, e2.3
  lgl$#-          %7.1  = Identical                %7.0, function(x) <(rir::DispatchTable*)0x5616632751|...
  void                    Assume             D     %7.1, %4.5 (CallTarget@0x561660ce8b18[Call#1])
  prom-           %7.3  = MkArg                    unboundValue, isSimpleFunDef[0x561663697310]_p1, e2.3
  val?            %7.4  = StaticCall         !v    typeof[0x561661845010](%7.3) e2.3   <str$->
  lgl$#-          %7.5  = IsType                   %7.4 isA val?-
  cp              %7.6  = Checkpoint                -> BB9 (default) | BB8 (if assume failed)
BB12   <- [11, 38]
  lgl$-           %12.0 = Phi                      %11.3:BB11, %6.2:BB38
  lgl$-           %12.1 = AsLogical                %12.0
  lgl$#-          %12.2 = Identical                %12.1, false
  cp              %12.3 = Checkpoint                -> BB14 (default) | BB13 (if assume failed)
BB9   <- [7]
  void                    Visible            v     
  void                    Assume             D     %7.5, %7.6 (Typecheck@0x561660ce8b18[Type#6])
  val?-           %9.2  = CastType           d     dn %7.4   <str$->
  lgl-            %9.3  = Eq                 vwed  %9.2, "language", elided   <lgl$->
  lgl$#-          %9.4  = IsType                   %9.3 isA lgl$-
  cp              %9.5  = Checkpoint                -> BB11 (default) | BB10 (if assume failed)
BB8   <- [7]
  fs              %8.0  = FrameState         R     0x5616637fc290+88: [%6.2, %7.4], env=e2.3
  void                    Deopt              !v    %8.0   !
BB14   <- [12]
  void                    Branch                   %12.2 -> BB37 (if true) | BB15 (if false)
BB13   <- [12]
  fs              %13.0 = FrameState         R     0x5616637fc290+107: [%12.0], env=e2.3
  void                    Deopt              !v    %13.0   !
BB11   <- [9]
  void                    Assume             D     %9.4, %9.5 (Typecheck@0x561660ce8b18[Type#7])
  lgl$-           %11.1 = CastType           d     dn %9.3
  lgl$-           %11.2 = AsLogical                %11.1
  lgl$-           %11.3 = LAnd                     %6.2, %11.2
  goto BB12
BB10   <- [9]
  fs              %10.0 = FrameState         R     0x5616637fc290+100: [%6.2, %9.3], env=e2.3
  void                    Deopt              !v    %10.0   !
BB37   <- [14]
  goto BB18
BB15   <- [14]
  val?^ | miss    %15.0 = LdVar              eR    %in%, e2.3
  lgl$#-          %15.1 = Identical                %15.0, function(x, table) <(rir::DispatchTable*)0x561|...
  void                    Assume             D     %15.1, %12.3 (CallTarget@0x561660ce8b18[Call#2])
  prom-           %15.3 = MkArg                    unboundValue, isSimpleFunDef[0x561663697310]_p2, e2.3
  prom-           %15.4 = MkArg                    unboundValue, isSimpleFunDef[0x561663697310]_p4, e2.3
  val?            %15.5 = StaticCall         !     %in%[0x561663513bc0](%15.3, %15.4) e2.3   <lgl$->
  lgl$#-          %15.6 = IsType                   %15.5 isA lgl$-
  cp              %15.7 = Checkpoint                -> BB17 (default) | BB16 (if assume failed)
BB18   <- [17, 37]
  lgl$-           %18.0 = Phi                      %17.3:BB17, %12.1:BB37
  lgl$-           %18.1 = AsLogical                %18.0
  lgl$#-          %18.2 = Identical                %18.1, false
  void                    Branch                   %18.2 -> BB36 (if true) | BB19 (if false)
BB17   <- [15]
  void                    Assume             D     %15.6, %15.7 (Typecheck@0x561660ce8b18[Type#13])
  lgl$-           %17.1 = CastType           d     dn %15.5
  lgl$-           %17.2 = AsLogical                %17.1
  lgl$-           %17.3 = LAnd                     %12.1, %17.2
  goto BB18
BB16   <- [15]
  fs              %16.0 = FrameState         R     0x5616637fc290+151: [%12.1, %15.5], env=e2.3
  void                    Deopt              !v    %16.0   !
BB36   <- [18]
  goto BB28
BB19   <- [18]
  val?^ | miss    %19.0 = LdVar              eR    e, e2.3
  val?            %19.1 = Force!<wrapped>    !v    %19.0, e2.3   <code->
  lgl$#-          %19.2 = IsType                   %19.1 isA val+   <true>
  lgl$#-          %19.3 = IsType                   %19.1 isA val?-
  cp              %19.4 = Checkpoint                -> BB21 (default) | BB20 (if assume failed)
BB28   <- [36, 27]
  lgl$-           %28.0 = Phi                      %27.3:BB27, %18.1:BB36
  lgl$-           %28.1 = AsLogical                %28.0
  lgl$#-          %28.2 = Identical                %28.1, false
  cp              %28.3 = Checkpoint                -> BB30 (default) | BB29 (if assume failed)
BB21   <- [19]
  void                    Assume             D     %19.2, %19.4 (DeadBranchReached@0x561660ce8b18[Test#4])
  void                    Assume             D     %19.3, %19.4 (Typecheck@0x561660ce8b18[Type#14])
  val?-           %21.2 = CastType           d     dn %19.1   <code->
  val?            %21.3 = Extract2_1D        wed   %21.2, 3, elided   <code->
  lgl$#-          %21.4 = IsType                   %21.3 isA val+   <true>
  lgl$#-          %21.5 = IsType                   %21.3 isA val?-
  cp              %21.6 = Checkpoint                -> BB23 (default) | BB22 (if assume failed)
BB20   <- [19]
  fs              %20.0 = FrameState         R     0x5616637fc290+174: [%18.1, %19.1], env=e2.3
  void                    Deopt              !v    %20.0   !
BB30   <- [28]
  void                    Branch                   %28.2 -> BB35 (if true) | BB31 (if false)
BB29   <- [28]
  fs              %29.0 = FrameState         R     0x5616637fc290+281: [%28.0], env=e2.3
  void                    Deopt              !v    %29.0   !
BB23   <- [21]
  void                    Assume             D     %21.4, %21.6 (DeadBranchReached@0x561660ce8b18[Test#5])
  void                    Assume             D     %21.5, %21.6 (Typecheck@0x561660ce8b18[Type#15])
  val?-           %23.2 = CastType           d     dn %21.3   <code->
  val?            %23.3 = Extract2_1D        wed   %23.2, 1, elided   <sym->
  lgl$#-          %23.4 = IsType                   %23.3 isA val?-
  cp              %23.5 = Checkpoint                -> BB25 (default) | BB24 (if assume failed)
BB22   <- [21]
  fs              %22.0 = FrameState         R     0x5616637fc290+217: [%18.1, %21.3], env=e2.3
  void                    Deopt              !v    %22.0   !
BB35   <- [30]
  goto BB34
BB31   <- [30]
  val?^ | miss    %31.0 = LdVar              eR    isBaseVar, e2.3
  lgl$#-          %31.1 = Identical                %31.0, function(v, env) <(rir::DispatchTable*)0x56166|...
  void                    Assume             D     %31.1, %28.3 (CallTarget@0x561660ce8b18[Call#5])
  prom-           %31.3 = MkArg                    unboundValue, isSimpleFunDef[0x561663697310]_p5, e2.3
  val?            %31.4 = StaticCall         !     isBaseVar[0x561663474300]("function", %31.3) e2.3   <lgl$->
  lgl$#-          %31.5 = IsType                   %31.4 isA lgl$-
  cp              %31.6 = Checkpoint                -> BB33 (default) | BB32 (if assume failed)
BB25   <- [23]
  void                    Visible            v     
  void                    Assume             D     %23.4, %23.5 (Typecheck@0x561660ce8b18[Type#16])
  val?-           %25.2 = CastType           d     dn %23.3   <sym->
  lgl-            %25.3 = Eq                 vwed  %25.2, "function", elided   <lgl$->
  lgl$#-          %25.4 = IsType                   %25.3 isA lgl$-
  cp              %25.5 = Checkpoint                -> BB27 (default) | BB26 (if assume failed)
BB24   <- [23]
  fs              %24.0 = FrameState         R     0x5616637fc290+261: [%18.1, %23.3], env=e2.3
  void                    Deopt              !v    %24.0   !
BB34   <- [33, 35]
  lgl$-           %34.0 = Phi                      %33.3:BB33, %28.1:BB35
  void                    Return             l     %34.0
BB33   <- [31]
  void                    Assume             D     %31.5, %31.6 (Typecheck@0x561660ce8b18[Type#21])
  lgl$-           %33.1 = CastType           d     dn %31.4
  lgl$-           %33.2 = AsLogical                %33.1
  lgl$-           %33.3 = LAnd                     %28.1, %33.2
  goto BB34
BB32   <- [31]
  fs              %32.0 = FrameState         R     0x5616637fc290+325: [%28.1, %31.4], env=e2.3
  void                    Deopt              !v    %32.0   !
BB27   <- [25]
  void                    Assume             D     %25.4, %25.5 (Typecheck@0x561660ce8b18[Type#17])
  lgl$-           %27.1 = CastType           d     dn %25.3
  lgl$-           %27.2 = AsLogical                %27.1
  lgl$-           %27.3 = LAnd                     %18.1, %27.2
  goto BB28
BB26   <- [25]
  fs              %26.0 = FrameState         R     0x5616637fc290+274: [%18.1, %25.3], env=e2.3
  void                    Deopt              !v    %26.0   !
Prom 0:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    e, e1.0
  val?            %1.2  = Force<lazy>        !v    %1.1, e1.0   <code->
  val?            %1.3  = Extract2_1D        !v    %1.2, 2, e1.0   <(sym|code)->
  void                    Visible            v     
  void                    Return             l     %1.3
Prom 1:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    e, e1.0
  val?            %1.2  = Force<wrapped>     !v    %1.1, e1.0   <code->
  val?            %1.3  = Extract2_1D        !v    %1.2, 3, e1.0   <code->
  void                    Visible            v     
  void                    Return             l     %1.3
Prom 2:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     typeof, <0x5616632719d0>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, isSimpleFunDef[0x561663697310]_p3, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <str$->
  void                    Return             l     %1.3
Prom 3:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    e, e1.0
  val?            %1.2  = Force<wrapped>     !v    %1.1, e1.0   <code->
  val?            %1.3  = Extract2_1D        !v    %1.2, 3, e1.0   <code->
  val?            %1.4  = Extract2_1D        !v    %1.3, 1, e1.0   <sym->
  void                    Visible            v     
  void                    Return             l     %1.4
Prom 4:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     c, <0x561660cbd940>, e1.0
  val?            %1.2  = Call               !     %1.1("symbol", "character") e1.0   <str->
  void                    Return             l     %1.2
Prom 5:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     $, <0x561660cbcc10>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, isSimpleFunDef[0x561663697310]_p6, e1.0
  prom-           %1.3  = MkArg                    unboundValue, isSimpleFunDef[0x561663697310]_p7, e1.0
  val?            %1.4  = Call               !     %1.1(%1.2, %1.3) e1.0   <env+>
  void                    Return             l     %1.4
Prom 6:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    w, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 7:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    env, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3

│ isSimpleFunDef[0x561663697310]                                               │
└──────────────────────────────────────────────────────────────────────────────┘
