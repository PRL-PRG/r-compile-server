
┌──────────────────────────────────────────────────────────────────────────────┐
│ possibleExtends[0x56051a6705f0]                                              │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;NonRefl0,NonRefl1,NonRefl2,NonRefl3,!Obj0,!Obj1│
│ Properties:                                                                  │
├────── PIR Version After Optimizations
possibleExtends[0x56051a6705f0]
BB0
  goto BB1
BB1   <- [0]
  val?^           %1.0  = LdArg                    3
  val?^           %1.1  = LdArg                    2
  val?^           %1.2  = LdArg                    1
  val?^           %1.3  = LdArg                    0
  cp              %1.4  = Checkpoint                -> BB2 (default) | BB63 (if assume failed)
BB2   <- [1]
  val?^ | miss    %2.0  = LdVar              eR    .identC, <env 0x560517ca3378>
  lgl$#-          %2.1  = Identical                %2.0, function(c1=NULL, c2=NULL) <(rir::DispatchTabl|...
  void                    Assume             D     %2.1, %1.4 (CallTarget@0x5605195c0ee0[Call#3])
  env             e2.3  = MkEnv              l     class1=%1.3, class2=%1.2, ClassDef1=%1.1, ClassDef2=%1.0, parent=<env 0x560517ca3378>, context 1
  prom-           %2.4  = MkArg                    unboundValue, possibleExtends[0x56051a6705f0]_p0, e2.3
  prom-           %2.5  = MkArg                    unboundValue, possibleExtends[0x56051a6705f0]_p1 (!refl), e2.3
  ct              %2.6  = PushContext        lCL   %2.4, %2.5, .identC([[(class1, 1L), class2), function(c1=NULL, c2=NULL) <(rir::DispatchTabl|..., e2.3
  val?^           %2.7  = CastType                 up %2.5
  val?^           %2.8  = CastType                 up %2.4
  val?^ | miss    %2.9  = LdVar              eR    .Call, <env 0x560517ca3378>
  lgl$#-          %2.10 = Identical                <blt .Call>, %2.9   <true>
  cp              %2.11 = Checkpoint                -> BB4 (default) | BB3 (if assume failed)
BB63   <- [1]
  env             e63.0 = (MkEnv)            l     class1=%1.3, class2=%1.2, ClassDef1=%1.1, ClassDef2=%1.0, parent=<env 0x560517ca3378>, context 1
  fs              %63.1 = FrameState         R     0x5605195beab0+0: [], env=e63.0
  void                    Deopt              !v    %63.1
BB4   <- [2]
  void                    Assume             D     %2.10, %2.11 (DeadBranchReached@0x560518c84c98[Test#0])
  val?^ | miss    %4.1  = LdVar              eR    C_R_identC, <env 0x560517ca3378>
  env             e4.2  = MkEnv              l     c1=%2.8, c2=%2.7, parent=<env 0x560517ca3378>, context 1
  val?            %4.3  = Force!<value>      !v    %4.1, e4.2   <vec>
  val?^ | miss    %4.4  = LdVar              eR    c1, e4.2
  val?            %4.5  = Force!<lazy>       !v    %4.4, e4.2   <str$+>
  val?^ | miss    %4.6  = LdVar              eR    c2, e4.2
  val?            %4.7  = Force!<lazy>       !v    %4.6, e4.2   <str$+>
  val?            %4.8  = CallBuiltin        !v    .Call(%4.3, %4.5, %4.7) e4.2   <lgl$->
  lgl$#-          %4.9  = IsType                   %4.8 isA lgl$-
  cp              %4.10 = Checkpoint                -> BB6 (default) | BB5 (if assume failed)
BB3   <- [2]
  fs              %3.0  = FrameState         R     0x5605195beab0+37: [], env=e2.3
  env             e3.1  = (MkEnv)            l     c1=%2.8, c2=%2.7, parent=<env 0x560517ca3378>, context 1
  fs              %3.2  = FrameState         R     0x560517af6f30+17: [<blt .Call>, %2.10], env=e3.1, next=%3.0
  void                    Deopt              !v    %3.2   !
BB6   <- [4]
  void                    Assume             D     %4.9, %4.10 (Typecheck@0x560518c84c98[Type#6])
  lgl$-           %6.1  = CastType           d     dn %4.8
  val?            %6.2  = PopContext         C     %6.1, %2.6   <lgl$->
  lgl$#-          %6.3  = IsType                   %6.2 isA lgl$-
  cp              %6.4  = Checkpoint                -> BB8 (default) | BB7 (if assume failed)
BB5   <- [4]
  fs              %5.0  = FrameState         R     0x5605195beab0+37: [], env=e2.3
  fs              %5.1  = FrameState         R     0x560517af6f30+129: [%4.8], env=e4.2, next=%5.0
  void                    Deopt              !v    %5.1   !
BB8   <- [6]
  void                    Assume             D     %6.3, %6.4 (Typecheck@0x5605195c0ee0[Type#9])
  lgl$-           %8.1  = CastType           d     dn %6.2
  lgl$-           %8.2  = AsLogical                %8.1
  lgl$#-          %8.3  = Identical                %8.2, true
  void                    Branch                   %8.3 -> BB62 (if true) | BB9 (if false)
BB7   <- [6]
  fs              %7.0  = FrameState         R     0x5605195beab0+37: [%6.2], env=e2.3
  void                    Deopt              !v    %7.0   !
BB62   <- [8]
  goto BB16
BB9   <- [8]
  val?^ | miss    %9.0  = LdVar              eR    .identC, e2.3
  lgl$#-          %9.1  = Identical                %9.0, function(c1=NULL, c2=NULL) <(rir::DispatchTabl|...
  void                    Assume             D     %9.1, %6.4 (CallTarget@0x5605195c0ee0[Call#4])
  prom-           %9.3  = MkArg                    unboundValue, possibleExtends[0x56051a6705f0]_p2, e2.3
  ct              %9.4  = PushContext        lCL   %9.3, "ANY", .identC(class2, "ANY"), function(c1=NULL, c2=NULL) <(rir::DispatchTabl|..., e2.3
  val?^           %9.5  = CastType                 up %9.3
  val?^ | miss    %9.6  = LdVar              eR    .Call, <env 0x560517ca3378>
  lgl$#-          %9.7  = Identical                <blt .Call>, %9.6   <true>
  cp              %9.8  = Checkpoint                -> BB11 (default) | BB10 (if assume failed)
BB16   <- [15, 62]
  lgl$-           %16.0 = Phi                      %15.3:BB15, %8.2:BB62
  lgl$#-          %16.1 = CheckTrueFalse     e     %16.0
  void                    Branch                   %16.1 -> BB61 (if true) | BB17 (if false)
BB11   <- [9]
  void                    Assume             D     %9.7, %9.8 (DeadBranchReached@0x560518c84c98[Test#0])
  val?^ | miss    %11.1 = LdVar              eR    C_R_identC, <env 0x560517ca3378>
  env             e11.2 = MkEnv              l     c1=%9.5, c2="ANY", parent=<env 0x560517ca3378>, context 1
  val?            %11.3 = Force!<value>      !v    %11.1, e11.2   <vec>
  val?^ | miss    %11.4 = LdVar              eR    c1, e11.2
  val?            %11.5 = Force!<lazy>       !v    %11.4, e11.2   <str$+>
  val?^ | miss    %11.6 = LdVar              eR    c2, e11.2
  val?            %11.7 = Force!<lazy>       !v    %11.6, e11.2   <str$+>
  val?            %11.8 = CallBuiltin        !v    .Call(%11.3, %11.5, %11.7) e11.2   <lgl$->
  lgl$#-          %11.9 = IsType                   %11.8 isA lgl$-
  cp              %11.10 = Checkpoint                -> BB13 (default) | BB12 (if assume failed)
BB10   <- [9]
  fs              %10.0 = FrameState         R     0x5605195beab0+86: [%8.2], env=e2.3
  env             e10.1 = (MkEnv)            l     c1=%9.5, c2="ANY", parent=<env 0x560517ca3378>, context 1
  fs              %10.2 = FrameState         R     0x560517af6f30+17: [<blt .Call>, %9.7], env=e10.1, next=%10.0
  void                    Deopt              !v    %10.2   !
BB61   <- [16]
  void                    Visible            v     
  goto BB48
BB17   <- [16]
  val?^ | miss    %17.0 = LdVar              eR    ClassDef1, e2.3
  val?            %17.1 = Force!<lazy>       !v    %17.0, e2.3   <other>
  lgl$-           %17.2 = Is                       %17.1, NULL
  lgl$#-          %17.3 = CheckTrueFalse     e     %17.2
  void                    Branch                   %17.3 -> BB60 (if true) | BB18 (if false)
BB13   <- [11]
  void                    Assume             D     %11.9, %11.10 (Typecheck@0x560518c84c98[Type#6])
  lgl$-           %13.1 = CastType           d     dn %11.8
  val?            %13.2 = PopContext         C     %13.1, %9.4   <lgl$->
  lgl$#-          %13.3 = IsType                   %13.2 isA lgl$-
  cp              %13.4 = Checkpoint                -> BB15 (default) | BB14 (if assume failed)
BB12   <- [11]
  fs              %12.0 = FrameState         R     0x5605195beab0+86: [%8.2], env=e2.3
  fs              %12.1 = FrameState         R     0x560517af6f30+129: [%11.8], env=e11.2, next=%12.0
  void                    Deopt              !v    %12.1   !
BB48   <- [60, 61, 47]
  val?            %48.0 = Phi                      %47.0:BB47, false:BB60, true:BB61
  void                    Return             l     %48.0
BB60   <- [17]
  void                    Visible            v     
  goto BB48
BB18   <- [17]
  (cls|spec|blt)  %18.0 = LdFun              !v    @, <0x56051769bbd8>, e2.3
  prom-           %18.1 = MkArg                    unboundValue, possibleExtends[0x56051a6705f0]_p3, e2.3
  prom-           %18.2 = MkArg                    unboundValue, possibleExtends[0x56051a6705f0]_p4, e2.3
  val?            %18.3 = Call               !v    %18.0(%18.1, %18.2) e2.3   <vec+>
  void                    StVar              lW    ext, %18.3, e2.3
  lgl$#-          %18.5 = IsType                   %18.3 isA val+   <true>
  cp              %18.6 = Checkpoint                -> BB20 (default) | BB19 (if assume failed)
BB15   <- [13]
  void                    Assume             D     %13.3, %13.4 (Typecheck@0x5605195c0ee0[Type#11])
  lgl$-           %15.1 = CastType           d     dn %13.2
  lgl$-           %15.2 = AsLogical                %15.1
  lgl$-           %15.3 = LOr                      %8.2, %15.2
  goto BB16
BB14   <- [13]
  fs              %14.0 = FrameState         R     0x5605195beab0+86: [%8.2, %13.2], env=e2.3
  void                    Deopt              !v    %14.0   !
BB20   <- [18]
  val             %20.0 = ChkMissing         e     %18.3
  void                    Assume             D     %18.5, %18.6 (DeadBranchReached@0x5605195c0ee0[Test#1])
  val?^ | miss    %20.2 = LdVar              eR    class2, e2.3
  val?            %20.3 = Force!<wrapped>    !v    %20.2, e2.3   <str$+>
  lgl$#-          %20.4 = IsType                   %20.3 isA val?+
  cp              %20.5 = Checkpoint                -> BB22 (default) | BB21 (if assume failed)
BB19   <- [18]
  fs              %19.0 = FrameState         R     0x5605195beab0+199: [], env=e2.3
  void                    Deopt              !v    %19.0   !
BB22   <- [20]
  lgl$#-          %22.0 = IsType                   %18.3 isA val?+
  void                    Assume             D     %22.0, %20.5 (Typecheck@0x5605195c0ee0[Type#15])
  val?+           %22.2 = CastType           d     dn %18.3   <vec+>
  void                    Assume             D     %20.4, %20.5 (Typecheck@0x5605195c0ee0[Type#18])
  val?+           %22.4 = CastType           d     dn %20.3   <str$+>
  val?            %22.5 = Extract2_1D        wed   %22.2, %22.4, elided   <(nil|other)>
  lgl$-           %22.6 = Is                       %22.5, NULL
  void                    StVar              lW    contained, %22.5, e2.3
  lgl$-           %22.8 = Not                d     %22.6, elided
  lgl$#-          %22.9 = CheckTrueFalse     e     %22.8
  void                    Branch                   %22.9 -> BB59 (if true) | BB23 (if false)
BB21   <- [20]
  fs              %21.0 = FrameState         R     0x5605195beab0+253: [%18.3, %20.3], env=e2.3
  void                    Deopt              !v    %21.0   !
BB59   <- [22]
  val             %59.0 = ChkMissing         e     %22.5
  void                    Visible            v     
  goto BB47
BB23   <- [22]
  val?^ | miss    %23.0 = LdVar              eR    ClassDef2, e2.3
  val?            %23.1 = Force!<lazy>       !v    %23.0, e2.3   <other>
  lgl$-           %23.2 = Is                       %23.1, NULL
  lgl$#-          %23.3 = CheckTrueFalse     e     %23.2
  void                    Branch                   %23.3 -> BB58 (if true) | BB24 (if false)
BB47   <- [59, 46]
  val?            %47.0 = Phi                      %46.0:BB46, %22.5:BB59
  goto BB48
BB58   <- [23]
  void                    Visible            v     
  goto BB46
BB24   <- [23]
  (cls|spec|blt)  %24.0 = LdFun              !v    @, <0x56051769bbd8>, e2.3
  prom-           %24.1 = MkArg                    unboundValue, possibleExtends[0x56051a6705f0]_p5, e2.3
  prom-           %24.2 = MkArg                    unboundValue, possibleExtends[0x56051a6705f0]_p6, e2.3
  val?            %24.3 = Call               !v    %24.0(%24.1, %24.2) e2.3   <vec+>
  void                    StVar              lW    subs, %24.3, e2.3
  cp              %24.5 = Checkpoint                -> BB26 (default) | BB25 (if assume failed)
BB46   <- [58, 45]
  val?            %46.0 = Phi                      %45.0:BB45, false:BB58
  goto BB47
BB26   <- [24]
  val?^ | miss    %26.0 = LdVar              eR    .identC, e2.3
  lgl$#-          %26.1 = Identical                %26.0, function(c1=NULL, c2=NULL) <(rir::DispatchTabl|...
  void                    Assume             D     %26.1, %24.5 (CallTarget@0x5605195c0ee0[Call#7])
  prom-           %26.3 = MkArg                    unboundValue, possibleExtends[0x56051a6705f0]_p7, e2.3
  val?            %26.4 = StaticCall         !v    .identC[0x56051a1ab740](%26.3, "classRepresentation") e2.3   <lgl$->
  lgl$#-          %26.5 = IsType                   %26.4 isA lgl$-
  cp              %26.6 = Checkpoint                -> BB28 (default) | BB27 (if assume failed)
BB25   <- [24]
  fs              %25.0 = FrameState         R     0x5605195beab0+364: [], env=e2.3
  void                    Deopt              !v    %25.0   !
BB28   <- [26]
  void                    Assume             D     %26.5, %26.6 (Typecheck@0x5605195c0ee0[Type#26])
  lgl$-           %28.1 = CastType           d     dn %26.4
  lgl$-           %28.2 = Not                d     %28.1, elided
  lgl$-           %28.3 = AsLogical                %28.2
  lgl$#-          %28.4 = Identical                %28.3, false
  void                    Branch                   %28.4 -> BB30 (if true) | BB29 (if false)
BB27   <- [26]
  fs              %27.0 = FrameState         R     0x5605195beab0+401: [%26.4], env=e2.3
  void                    Deopt              !v    %27.0   !
BB30   <- [28]
  lgl$#-          %30.0 = CheckTrueFalse     e     %28.3
  void                    Branch                   %30.0 -> BB55 (if true) | BB31 (if false)
BB29   <- [28]
  (cls|spec|blt)  %29.0 = LdFun              !v    isClassUnion, e2.3
  fs              %29.1 = FrameState         R     0x5605195beab0+419: [%28.3, %29.0], env=e2.3
  void                    Deopt              !v    %29.1, DeadCall@0x5605195c0ee0[Call#9], %29.0   !
BB55   <- [30]
  val?^ | miss    %55.0 = LdVar              eR    any, e2.3
  lgl$#-          %55.1 = Identical                <blt any>, %55.0   <@?>
  void                    Branch                   %55.1 -> BB57 (if true) | BB56 (if false)
BB31   <- [30]
  val?^ | miss    %31.0 = LdVar              eR    match, e2.3
  lgl$#-          %31.1 = Identical                %31.0, function(x, table, nomatch=NA, incomparables=N|...
  void                    Assume             D     %31.1, %26.6 (CallTarget@0x5605195c0ee0[Call#10])
  val?^ | miss    %31.3 = LdVar              eR    class1, e2.3
  val?            %31.4 = Force!<wrapped>    !v    %31.3, e2.3   <str$+>
  cp              %31.5 = Checkpoint                -> BB33 (default) | BB32 (if assume failed)
BB57   <- [55]
  (cls|spec|blt)  %57.0 = LdFun              !v    %in%, e2.3
  fs              %57.1 = FrameState         R     0x5605195beab0+961: [<blt any>, %57.0], env=e2.3
  void                    Deopt              !v    %57.1, DeadCall@0x5605195c0ee0[Call#20], %57.0   !
BB56   <- [55]
  (cls|spec|blt)  %56.0 = LdFun              !v    any, e2.3
  fs              %56.1 = FrameState         R     0x5605195beab0+924: [%56.0], env=e2.3
  void                    Deopt              !v    %56.1, DeadCall@0x5605195c0ee0[Call#15], %56.0   !
BB33   <- [31]
  val?^ | miss    %33.0 = LdVar              eR    names, e2.3
  lgl$#-          %33.1 = Identical                %33.0, <blt names>
  void                    Assume             D     %33.1, %31.5 (CallTarget@0x5605195c0ee0[Call#11])
  val?^ | miss    %33.3 = LdVar              eR    subs, e2.3
  val?            %33.4 = Force!<value>      !v    %33.3, e2.3   <vec+>
  val?            %33.5 = CallBuiltin        !v    names(%33.4) e2.3   <(nil|str)->
  lgl$#-          %33.6 = IsType                   %33.5 isA val?+
  cp              %33.7 = Checkpoint                -> BB35 (default) | BB34 (if assume failed)
BB32   <- [31]
  prom-           %32.0 = MkArg                    %31.4, possibleExtends[0x56051a6705f0]_p9 (!refl), e2.3
  val?~           %32.1 = CastType                 up %32.0
  prom-           %32.2 = MkArg                    unboundValue, possibleExtends[0x56051a6705f0]_p10, e2.3
  val?^           %32.3 = CastType                 up %32.2
  fs              %32.4 = FrameState         R     0x5605195beab0+496: [], env=e2.3
  env             e32.5 = (MkEnv)            l     x=%32.1, table=%32.3, nomatch(miss)=NA, incomparables(miss)=nil, parent=R_BaseNamespace, context 0
  fs              %32.6 = FrameState         R     0x5605181d1d70+9: [%31.4], env=e32.5, next=%32.4
  void                    Deopt              !v    %32.6   !
BB35   <- [33]
  lgl$#-          %35.0 = IsType                   %31.4 isA val?+
  void                    Assume             D     %35.0, %33.7 (Typecheck@0x5605179a9b30[Type#0])
  val?+           %35.2 = CastType           d     dn %31.4   <str$+>
  void                    Assume             D     %33.6, %33.7 (Typecheck@0x5605179a9b30[Type#1])
  val?+           %35.4 = CastType           d     dn %33.5   <(nil|str)->
  val+            %35.5 = CallSafeBuiltin    wed   match(%35.2, %35.4, NA, nil)    <int$->
  lgl$#-          %35.6 = IsType                   %35.5 isA int$-
  cp              %35.7 = Checkpoint                -> BB37 (default) | BB36 (if assume failed)
BB34   <- [33]
  prom-           %34.0 = MkArg                    %33.5, possibleExtends[0x56051a6705f0]_p10 (!refl), e2.3
  val?~           %34.1 = CastType                 up %34.0
  prom-           %34.2 = MkArg                    %31.4, possibleExtends[0x56051a6705f0]_p9 (!refl), e2.3
  val?~           %34.3 = CastType                 up %34.2
  fs              %34.4 = FrameState         R     0x5605195beab0+496: [], env=e2.3
  env             e34.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%34.1, x=%34.3, parent=R_BaseNamespace, context 0
  fs              %34.6 = FrameState         R     0x5605181d1d70+23: [%31.4, %33.5], env=e34.5, next=%34.4
  void                    Deopt              !v    %34.6   !
BB37   <- [35]
  void                    Assume             D     %35.6, %35.7 (Typecheck@0x5605195c0ee0[Type#32])
  int$-           %37.1 = CastType           d     dn %35.5
  void                    StVar              lW    i, %37.1, e2.3
  cp              %37.3 = Checkpoint                -> BB39 (default) | BB38 (if assume failed)
BB36   <- [35]
  prom-           %36.0 = MkArg                    %35.4, possibleExtends[0x56051a6705f0]_p10 (!refl), e2.3
  val?~           %36.1 = CastType                 up %36.0
  prom-           %36.2 = MkArg                    %35.2, possibleExtends[0x56051a6705f0]_p9 (!refl), e2.3
  val?~           %36.3 = CastType                 up %36.2
  fs              %36.4 = FrameState         R     0x5605195beab0+496: [], env=e2.3
  env             e36.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%36.1, x=%36.3, parent=R_BaseNamespace, context 0
  fs              %36.6 = FrameState         R     0x5605181d1d70+69: [%35.5], env=e36.5, next=%36.4
  void                    Deopt              !v    %36.6   !
BB39   <- [37]
  val?^ | miss    %39.0 = LdVar              eR    is.na, e2.3
  lgl$#-          %39.1 = Identical                <blt is.na>, %39.0   <true>
  void                    Assume             D     %39.1, %37.3 (DeadBranchReached@0x5605195c0ee0[Test#3])
  lgl$-           %39.3 = CallSafeBuiltin    wed   is.na(%37.1)    <lgl$->
  lgl$-           %39.4 = Not                d     %39.3, elided
  int-            %39.5 = Extract1_1D        wed   %37.1, %39.4, elided   <int->
  void                    StVar              lW    i, %39.5, e2.3
  cp              %39.7 = Checkpoint                -> BB41 (default) | BB40 (if assume failed)
BB38   <- [37]
  fs              %38.0 = FrameState         R     0x5605195beab0+510: [], env=e2.3
  void                    Deopt              !v    %38.0   !
BB41   <- [39]
  val?^ | miss    %41.0 = LdVar              eR    length, e2.3
  lgl$#-          %41.1 = Identical                <blt length>, %41.0   <true>
  void                    Assume             D     %41.1, %39.7 (DeadBranchReached@0x5605195c0ee0[Test#4])
  (int|real)$-    %41.3 = CallSafeBuiltin    wed   length(%39.5)    <int$->
  lgl$#-          %41.4 = IsType                   %41.3 isA int$-
  cp              %41.5 = Checkpoint                -> BB43 (default) | BB42 (if assume failed)
BB40   <- [39]
  fs              %40.0 = FrameState         R     0x5605195beab0+668: [], env=e2.3
  void                    Deopt              !v    %40.0   !
BB43   <- [41]
  void                    Assume             D     %41.4, %41.5 (Typecheck@0x5605195c0ee0[Type#42])
  int$-           %43.1 = CastType           d     dn %41.3
  lgl$#-          %43.2 = CheckTrueFalse     e     %43.1
  void                    Branch                   %43.2 -> BB49 (if true) | BB44 (if false)
BB42   <- [41]
  fs              %42.0 = FrameState         R     0x5605195beab0+759: [%41.3], env=e2.3
  void                    Deopt              !v    %42.0   !
BB49   <- [43]
  val?^ | miss    %49.0 = LdVar              eR    subs, e2.3
  val?            %49.1 = Force!             !v    %49.0, e2.3   <val?_>
  lgl$#-          %49.2 = IsType                   %49.1 isA val+   <@?>
  void                    Branch                   %49.2 -> BB52 (if true) | BB50 (if false)
BB44   <- [43]
  void                    Visible            v     
  goto BB45
BB52   <- [49]
  val?^ | miss    %52.0 = LdVar              eR    i, e2.3
  val?            %52.1 = Force!             !v    %52.0, e2.3   <val?_>
  lgl$#-          %52.2 = IsType                   %52.1 isA val?+
  cp              %52.3 = Checkpoint                -> BB54 (default) | BB53 (if assume failed)
BB50   <- [49]
  prom-           %50.0 = MkArg                    unboundValue, possibleExtends[0x56051a6705f0]_p12, e2.3
  goto BB51
BB45   <- [44, 51]
  val?            %45.0 = Phi                      false:BB44, %51.1:BB51
  goto BB46
BB54   <- [52]
  void                    Assume             D     %52.2, %52.3 (Typecheck@0x5605195c0ee0[Type#46])
  val?+           %54.1 = CastType           d     dn %52.1   <val?_>
  val?            %54.2 = Extract1_1D        wed   %54.1, 1L, elided   <val?_>
  goto BB51
BB53   <- [52]
  fs              %53.0 = FrameState         R     0x5605195beab0+835: [%49.1, %52.1], env=e2.3
  void                    Deopt              !v    %53.0   !
BB51   <- [50, 54]
  val?            %51.0 = Phi                      %54.2:BB54, %50.0:BB50
  val?            %51.1 = Extract2_1D        !v    %49.1, %51.0, e2.3   <val?_>
  void                    Visible            v     
  goto BB45
Prom 0:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    class1, e1.0
  val?            %1.2  = Force<lazy>        !v    %1.1, e1.0   <str$+>
  val?            %1.3  = Extract2_1D        !v    %1.2, 1L, e1.0   <str$->
  void                    Visible            v     
  void                    Return             l     %1.3
Prom 1:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    class2, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <str$+>
  void                    Return             l     %1.3
Prom 2:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    class2, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <str$+>
  void                    Return             l     %1.3
Prom 3:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    ClassDef1, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 4:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    contains, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 5:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    ClassDef2, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 6:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    subclasses, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 7:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     class, <0x56051769c748>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, possibleExtends[0x56051a6705f0]_p8, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <str$+>
  void                    Return             l     %1.3
Prom 8:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    ClassDef2, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <other>
  void                    Return             l     %1.3
Prom 9:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    class1, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <str$+>
  void                    Return             l     %1.3
Prom 10:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     names, <0x56051769c470>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, possibleExtends[0x56051a6705f0]_p11, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <(nil|str)->
  void                    Return             l     %1.3
Prom 11:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    subs, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 12:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    i, e1.0
  val?            %1.2  = Force              !v    %1.1, e1.0   <val?_>
  val?            %1.3  = Extract1_1D        !v    %1.2, 1L, e1.0   <val?_>
  void                    Visible            v     
  void                    Return             l     %1.3

│ possibleExtends[0x56051a6705f0]                                              │
└──────────────────────────────────────────────────────────────────────────────┘
