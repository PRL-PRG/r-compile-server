
┌──────────────────────────────────────────────────────────────────────────────┐
│ test[0x559891350bf0]                                                         │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch                                      │
│ Properties:  Eager                                                           │
├────── PIR Version After Optimizations
test[0x559891350bf0]
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = MkEnv              l     parent=R_GlobalEnv, context 1
  cls             %1.1  = MkCls                    f, e1.0
  void                    StVar              lW    a, missingArg, e1.0
  void                    StVar              lW    b, 3, e1.0
  cls             %1.4  = MkCls                    test@Prom(3)0, e1.0
  cp              %1.5  = Checkpoint                -> BB2 (default) | BB21 (if assume failed)
BB2   <- [1]
  val?^ | miss    %2.0  = LdVar              eR    list, R_GlobalEnv
  lgl$#-          %2.1  = Identical                <blt list>, %2.0   <true>
  void                    Assume             D     %2.1, %1.5 (DeadBranchReached@0x55989092d1f8[Test#0])
  (vec|miss)-     %2.3  = Subassign2_1D      wed   missingArg, list(), 1, elided
  void                    StVar              lW    x, %2.3, e1.0
  void                    StVar              lW    miss, nil, e1.0
  void                    StVar              lW    f, %1.1, e1.0
  void                    StVar              lW    ok, list(), e1.0
  prom-           %2.8  = MkArg                    missingArg, test[0x559891350bf0]_p6 (!refl), 
  val?^ | miss    %2.9  = CastType                 up %2.8
  env             e2.10 = (MkEnv)            l     x(miss)=%2.9, parent=e1.0, context 0
  lgl$-           %2.11 = Missing            eR    x, e2.10
  void                    StVar              lW    miss, %2.11, e1.0
  (lgl|vec)-      %2.13 = Subassign2_1D      wed   %2.11, list(), 1, elided   <vec$->
  void                    StVar              lW    ok, %2.13, e1.0
  prom-           %2.15 = MkArg                    missingArg, test[0x559891350bf0]_p0 (!refl), 
  miss~-          %2.16 = CastType                 up %2.15
  env             e2.17 = (MkEnv)            l     x=%2.16, parent=e1.0, context 0
  lgl$-           %2.18 = Missing            eR    x, e2.17
  void                    StVar              lW    miss, %2.18, e1.0
  (lgl|vec)-      %2.20 = Subassign2_1D      wed   %2.18, %2.13, 2, elided
  void                    StVar              lW    ok, %2.20, e1.0
  void                    StVar              lW    threw, false, e1.0
  cp              %2.23 = Checkpoint                -> BB4 (default) | BB3 (if assume failed)
BB21   <- [1]
  fs              %21.0 = FrameState         R     0x5598911ba890+29: [], env=e1.0
  void                    Deopt              !v    %21.0
BB4   <- [2]
  val?^ | miss    %4.0  = LdVar              eR    tryCatch, R_GlobalEnv
  lgl$#-          %4.1  = Identical                %4.0, function(expr, ..., finally) <(rir::DispatchTa|...
  void                    Assume             D     %4.1, %2.23 (CallTarget@0x55989092d1f8[Call#4])
  prom-           %4.3  = MkArg                    unboundValue, test[0x559891350bf0]_p1, e1.0
  prom-           %4.4  = MkArg                    %1.4, test[0x559891350bf0]_p3 (!refl), e1.0
  dots-           %4.5  = DotsList           l     error=%4.4
  val?            %4.6  = StaticCall         !v    tryCatch[0x559891262d00](%4.3, %4.5) { 0 1n } e1.0
  cp              %4.7  = Checkpoint                -> BB6 (default) | BB5 (if assume failed)
BB3   <- [2]
  fs              %3.0  = FrameState         R     0x5598911ba890+440: [], env=e1.0
  void                    Deopt              !v    %3.0
BB6   <- [4]
  val?^ | miss    %6.0  = LdVar              eR    miss, e1.0
  lgl$#-          %6.1  = IsType                   %6.0 isA lgl$-
  void                    Assume             D     %6.1, %4.7 (Typecheck@0x55989092d1f8[Type#9])
  lgl$-           %6.3  = CastType           d     dn %6.0
  val?^ | miss    %6.4  = LdVar              eR    ok !upd, e1.0
  lgl$#-          %6.5  = IsType                   %6.4 isA val?~- | miss
  void                    Assume             D     %6.5, %4.7 (Typecheck@0x55989092d1f8[Type#10])
  val?~- | miss   %6.7  = CastType           d     dn %6.4
  val?-           %6.8  = Force!<value>            %6.7,    <vec->
  val?-           %6.9  = Subassign2_1D      wed   %6.3, %6.8, 3, elided
  void                    StVar              lW    ok, %6.9, e1.0
  cp              %6.11 = Checkpoint                -> BB8 (default) | BB7 (if assume failed)
BB5   <- [4]
  fs              %5.0  = FrameState         R     0x5598911ba890+485: [%4.6], env=e1.0
  void                    Deopt              !v    %5.0   !
BB8   <- [6]
  val?^ | miss    %8.0  = LdVar              eR    threw, e1.0
  lgl$#-          %8.1  = IsType                   %8.0 isA lgl$-
  void                    Assume             D     %8.1, %6.11 (Typecheck@0x55989092d1f8[Type#11])
  lgl$-           %8.3  = CastType           d     dn %8.0
  val-            %8.4  = ChkMissing         e     %6.9   <vec->
  val-            %8.5  = Subassign2_1D      wed   %8.3, %8.4, 4, elided
  void                    StVar              lW    ok, %8.5, e1.0
  cp              %8.7  = Checkpoint                -> BB10 (default) | BB9 (if assume failed)
BB7   <- [6]
  fs              %7.0  = FrameState         R     0x5598911ba890+530: [], env=e1.0
  void                    Deopt              !v    %7.0   !
BB10   <- [8]
  val?^ | miss    %10.0 = LdVar              eR    f, e1.0
  lgl$#-          %10.1 = Identical                %10.0, %1.1
  void                    Assume             D     %10.1, %8.7 (CallTarget@0x55989092d1f8[Call#6])
  env             e10.3 = (MkEnv)            l     x=3, parent=e1.0, context 0
  void                    StVarSuper         lRW   miss, false, e10.3
  cp              %10.5 = Checkpoint                -> BB12 (default) | BB11 (if assume failed)
BB9   <- [8]
  fs              %9.0  = FrameState         R     0x5598911ba890+574: [], env=e1.0
  void                    Deopt              !v    %9.0   !
BB12   <- [10]
  val?^ | miss    %12.0 = LdVar              eR    miss, e1.0
  lgl$#-          %12.1 = IsType                   %12.0 isA lgl$-
  void                    Assume             D     %12.1, %10.5 (Typecheck@0x55989092d1f8[Type#13])
  lgl$-           %12.3 = CastType           d     dn %12.0
  val?^ | miss    %12.4 = LdVar              eR    ok !upd, e1.0
  lgl$#-          %12.5 = IsType                   %12.4 isA val?~- | miss
  void                    Assume             D     %12.5, %10.5 (Typecheck@0x55989092d1f8[Type#14])
  val?~- | miss   %12.7 = CastType           d     dn %12.4
  val?-           %12.8 = Force!<value>            %12.7,    <vec->
  val?-           %12.9 = Subassign2_1D      wed   %12.3, %12.8, 5, elided
  void                    StVar              lW    ok, %12.9, e1.0
  cp              %12.11 = Checkpoint                -> BB14 (default) | BB13 (if assume failed)
BB11   <- [10]
  fs              %11.0 = FrameState         R     0x5598911ba890+606: [], env=e1.0
  fs              %11.1 = FrameState         R     0x5598904d8b20+11: [], env=e10.3, next=%11.0
  void                    Deopt              !v    %11.1   !
BB14   <- [12]
  val?^ | miss    %14.0 = LdVar              eR    f, e1.0
  lgl$#-          %14.1 = Identical                %14.0, %1.1
  void                    Assume             D     %14.1, %12.11 (CallTarget@0x55989092d1f8[Call#7])
  prom-           %14.3 = MkArg                    unboundValue, test[0x559891350bf0]_p4, e1.0
  val?^           %14.4 = CastType                 up %14.3
  env             e14.5 = MkEnv              l     x=%14.4, parent=e1.0, context 0
  lgl$-           %14.6 = Missing            eR    x, e14.5
  void                    StVarSuper         lRW   miss, %14.6, e14.5
  val?^ | miss    %14.8 = LdVar              eR    x, e14.5
  val?            %14.9 = Force!<lazy>       !v    %14.8, e14.5   <(sym|real)->
  cp              %14.10 = Checkpoint                -> BB16 (default) | BB15 (if assume failed)
BB13   <- [12]
  fs              %13.0 = FrameState         R     0x5598911ba890+651: [], env=e1.0
  void                    Deopt              !v    %13.0   !
BB16   <- [14]
  val?^ | miss    %16.0 = LdVar              eR    miss, e1.0
  lgl$#-          %16.1 = IsType                   %16.0 isA lgl$-
  void                    Assume             D     %16.1, %14.10 (Typecheck@0x55989092d1f8[Type#16])
  lgl$-           %16.3 = CastType           d     dn %16.0
  val?^ | miss    %16.4 = LdVar              eR    ok !upd, e1.0
  lgl$#-          %16.5 = IsType                   %16.4 isA val?~- | miss
  void                    Assume             D     %16.5, %14.10 (Typecheck@0x55989092d1f8[Type#17])
  val?~- | miss   %16.7 = CastType           d     dn %16.4
  val?-           %16.8 = Force!<value>            %16.7,    <vec->
  val?-           %16.9 = Subassign2_1D      wed   %16.3, %16.8, 6, elided
  void                    StVar              lW    ok, %16.9, e1.0
  cp              %16.11 = Checkpoint                -> BB18 (default) | BB17 (if assume failed)
BB15   <- [14]
  fs              %15.0 = FrameState         R     0x5598911ba890+683: [], env=e1.0
  fs              %15.1 = FrameState         R     0x5598904d8b20+20: [%14.9], env=e14.5, next=%15.0
  void                    Deopt              !v    %15.1   !
BB18   <- [16]
  val?^ | miss    %18.0 = LdVar              eR    f, e1.0
  lgl$#-          %18.1 = Identical                %18.0, %1.1
  void                    Assume             D     %18.1, %16.11 (CallTarget@0x55989092d1f8[Call#8])
  prom-           %18.3 = MkArg                    unboundValue, test[0x559891350bf0]_p5, e1.0
  val?^           %18.4 = CastType                 up %18.3
  env             e18.5 = MkEnv              l     x=%18.4, parent=e1.0, context 0
  lgl$-           %18.6 = Missing            eR    x, e18.5
  void                    StVarSuper         lRW   miss, %18.6, e18.5
  val?^ | miss    %18.8 = LdVar              eR    x, e18.5
  val?            %18.9 = Force!<lazy>       !v    %18.8, e18.5   <(sym|real)->
  cp              %18.10 = Checkpoint                -> BB20 (default) | BB19 (if assume failed)
BB17   <- [16]
  fs              %17.0 = FrameState         R     0x5598911ba890+728: [], env=e1.0
  void                    Deopt              !v    %17.0   !
BB20   <- [18]
  val?^ | miss    %20.0 = LdVar              eR    miss, e1.0
  lgl$#-          %20.1 = IsType                   %20.0 isA lgl$-
  void                    Assume             D     %20.1, %18.10 (Typecheck@0x55989092d1f8[Type#20])
  lgl$-           %20.3 = CastType           d     dn %20.0
  val?^ | miss    %20.4 = LdVar              eR    ok !upd, e1.0
  lgl$#-          %20.5 = IsType                   %20.4 isA val?~- | miss
  void                    Assume             D     %20.5, %18.10 (Typecheck@0x55989092d1f8[Type#21])
  val?~- | miss   %20.7 = CastType           d     dn %20.4
  val?-           %20.8 = Force!<value>            %20.7,    <vec->
  val?-           %20.9 = Subassign2_1D      wed   %20.3, %20.8, 7, elided   <vec->
  void                    StVar              lW    ok, %20.9, e1.0
  val-            %20.11 = ChkMissing         e     %20.9
  void                    Visible            v     
  void                    Return             l     %20.9
BB19   <- [18]
  fs              %19.0 = FrameState         R     0x5598911ba890+760: [], env=e1.0
  fs              %19.1 = FrameState         R     0x5598904d8b20+20: [%18.9], env=e18.5, next=%19.0
  void                    Deopt              !v    %19.1   !
Prom 0:
BB0
  goto BB1
BB1   <- [0]
  void                    Return             l     missingArg
Prom 1:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     f, <0x5598911c16f0>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, test[0x559891350bf0]_p2, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <val?_>
  void                    Return             l     %1.3
Prom 2:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    a, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 3:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  cls             %1.1  = MkCls                    test@Prom(3)0, e1.0
  void                    Return             l     %1.1
Prom 4:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    b, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <real$->
  void                    Return             l     %1.3
Prom 5:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    x, e1.0
  val?            %1.2  = Force<value>       !v    %1.1, e1.0   <vec$->
  val?            %1.3  = Extract2_1D        !v    %1.2, 1, e1.0   <sym->
  void                    Visible            v     
  void                    Return             l     %1.3
Prom 6:
BB0
  goto BB1
BB1   <- [0]
  void                    Return             l     missingArg

│ test[0x559891350bf0]                                                         │
└──────────────────────────────────────────────────────────────────────────────┘
