
┌──────────────────────────────────────────────────────────────────────────────┐
│ sort.list[0x5558d6ad69b0]                                                    │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch miss: 4                              │
│ Properties:  Eager, ForceOrd: 0                                              │
├────── PIR Version After Optimizations
sort.list[0x5558d6ad69b0]
BB0
  goto BB1
BB1   <- [0]
  val?^           %1.0  = LdArg                    0
  env             e1.1  = MkEnv              l     x=%1.0, partial(miss)=nil, na.last(miss)=true, decreasing(miss)=false, method(miss)=missingArg, parent=R_BaseNamespace, context 1
  prom-           %1.2  = MkArg                    unboundValue, sort.list[0x5558d6ad69b0]_p3, e1.1
  val?^ | miss    %1.3  = CastType                 up %1.2
  void                    StArg              lW    method, %1.3, e1.1
  void                    StVar              lW    decreasing, false, e1.1
  val?            %1.6  = Force!<lazy>       !v    %1.0, e1.1   <real+>
  lgl$#-          %1.7  = IsType                   %1.6 isA real+
  cp              %1.8  = Checkpoint                -> BB2 (default) | BB74 (if assume failed)
BB2   <- [1]
  void                    Assume             D     %1.7, %1.8 (Typecheck@0x5558d594bfb0[Type#6])
  real+           %2.1  = CastType           d     dn %1.6
  lgl$#-          %2.2  = CallSafeBuiltin    wed   is.numeric(%2.1)    <lgl$->
  cp              %2.3  = Checkpoint                -> BB4 (default) | BB3 (if assume failed)
BB74   <- [1]
  fs              %74.0 = FrameState         R     0x5558d65eb330+200: [true, <blt is.numeric>, %1.6], env=e1.1
  void                    Deopt              !v    %74.0   !
BB4   <- [2]
  void                    Branch                   %2.2 -> BB73 (if true) | BB5 (if false)
BB3   <- [2]
  fs              %3.0  = FrameState         R     0x5558d65eb330+222: [true, %2.2], env=e1.1
  void                    Deopt              !v    %3.0   !
BB73   <- [4]
  val?^ | miss    %73.0 = LdVar              eR    is.object, e1.1
  lgl$#-          %73.1 = Identical                <blt is.object>, %73.0   <true>
  void                    Assume             D     %73.1, %2.3 (DeadBranchReached@0x5558d594bfb0[Test#2])
  val?^ | miss    %73.3 = LdVar              eR    x, e1.1
  val?            %73.4 = Force!<wrapped>    !v    %73.3, e1.1   <real+>
  lgl$#-          %73.5 = CallSafeBuiltin    wed   is.object(%73.4)    <lgl$->
  lgl$#-          %73.6 = Not                d     %73.5, elided
  lgl$-           %73.7 = LAnd                     %2.2, %73.6
  goto BB6
BB5   <- [4]
  goto BB6
BB6   <- [5, 73]
  lgl$-           %6.0  = Phi                      %73.7:BB73, %2.2:BB5
  lgl$-           %6.1  = AsLogical                %6.0
  lgl$#-          %6.2  = Identical                %6.1, false
  cp              %6.3  = Checkpoint                -> BB8 (default) | BB7 (if assume failed)
BB8   <- [6]
  void                    Branch                   %6.2 -> BB72 (if true) | BB9 (if false)
BB7   <- [6]
  fs              %7.0  = FrameState         R     0x5558d65eb330+335: [%6.0], env=e1.1
  void                    Deopt              !v    %7.0   !
BB72   <- [8]
  goto BB12
BB9   <- [8]
  val?^ | miss    %9.0  = LdVar              eR    length, e1.1
  lgl$#-          %9.1  = Identical                <blt length>, %9.0   <true>
  void                    Assume             D     %9.1, %6.3 (DeadBranchReached@0x5558d594bfb0[Test#3])
  val?^ | miss    %9.3  = LdVar              eR    x, e1.1
  lgl$#-          %9.4  = IsType                   %9.3 isA real~+
  void                    Assume             D     %9.4, %6.3 (Typecheck@0x5558d594bfb0[Type#12])
  real~+          %9.6  = CastType           d     dn %9.3
  real+           %9.7  = Force!<wrapped>          %9.6,    <real+>
  (int|real)$-    %9.8  = CallSafeBuiltin    wed   length(%9.7)    <int$->
  lgl$#-          %9.9  = IsType                   %9.8 isA int$-
  cp              %9.10 = Checkpoint                -> BB11 (default) | BB10 (if assume failed)
BB12   <- [72, 11]
  lgl$-           %12.0 = Phi                      %11.4:BB11, %6.1:BB72
  lgl$#-          %12.1 = CheckTrueFalse     e     %12.0
  void                    Branch                   %12.1 -> BB67 (if true) | BB13 (if false)
BB11   <- [9]
  void                    Assume             D     %9.9, %9.10 (Typecheck@0x5558d594bfb0[Type#13])
  int$-           %11.1 = CastType           d     dn %9.8
  lgl$-           %11.2 = Gt                 d     %11.1, 0, elided   <lgl$->
  lgl$-           %11.3 = AsLogical                %11.2
  lgl$-           %11.4 = LAnd                     %6.1, %11.3
  goto BB12
BB10   <- [9]
  fs              %10.0 = FrameState         R     0x5558d65eb330+433: [%6.1, %9.8], env=e1.1
  void                    Deopt              !v    %10.0   !
BB67   <- [12]
  val?^ | miss    %67.0 = LdVar              eR    x, e1.1
  val?            %67.1 = Force!<wrapped>    !v    %67.0, e1.1   <real+>
  val?^ | miss    %67.2 = LdVar              eR    decreasing, e1.1
  val?            %67.3 = Force!<value>      !v    %67.2, e1.1   <lgl$->
  val?^ | miss    %67.4 = LdVar              eR    na.last, e1.1
  val?            %67.5 = Force!<lazy>       !v    %67.4, e1.1   <lgl$->
  val?            %67.6 = CallBuiltin        !v    sorted_fpass(%67.1, %67.3, %67.5) e1.1
  lgl$#-          %67.7 = CheckTrueFalse     we    %67.6
  void                    Branch                   %67.7 -> BB69 (if true) | BB68 (if false)
BB13   <- [12]
  goto BB14
BB69   <- [67]
  val?^ | miss    %69.0 = LdVar              eR    seq_along, e1.1
  lgl$#-          %69.1 = Identical                <blt seq_along>, %69.0   <@?>
  void                    Branch                   %69.1 -> BB71 (if true) | BB70 (if false)
BB68   <- [67]
  goto BB14
BB14   <- [13, 68]
  cp              %14.0 = Checkpoint                -> BB16 (default) | BB15 (if assume failed)
BB71   <- [69]
  val?^ | miss    %71.0 = LdVar              eR    x, e1.1
  val?            %71.1 = Force!             !v    %71.0, e1.1   <val?_>
  val?            %71.2 = CallBuiltin        !     seq_along(%71.1) e1.1   <val?_>
  goto BB52
BB70   <- [69]
  (cls|spec|blt)  %70.0 = LdFun              !v    seq_along, e1.1
  fs              %70.1 = FrameState         R     0x5558d65eb330+557: [%70.0], env=e1.1
  void                    Deopt              !v    %70.1, DeadCall@0x5558d594bfb0[Call#5], %70.0   !
BB16   <- [14]
  val?^ | miss    %16.0 = LdVar              eR    match.arg, e1.1
  lgl$#-          %16.1 = Identical                %16.0, function(arg, choices, several.ok=FALSE) <(rir|...
  void                    Assume             D     %16.1, %14.0 (CallTarget@0x5558d594bfb0[Call#6])
  prom-           %16.3 = MkArg                    unboundValue, sort.list[0x5558d6ad69b0]_p4, e1.1
  val?            %16.4 = StaticCall         !v    match.arg[0x5558d5849a10](%16.3, <str [1] "auto" "shell" "quick" "radix">) e1.1   <str$->
  void                    StVar              lW    method, %16.4, e1.1
  lgl$#-          %16.6 = IsType                   %16.4 isA val?-
  cp              %16.7 = Checkpoint                -> BB18 (default) | BB17 (if assume failed)
BB15   <- [14]
  fs              %15.0 = FrameState         R     0x5558d65eb330+626: [], env=e1.1
  void                    Deopt              !v    %15.0   !
BB52   <- [71, 53, 51]
  val?            %52.0 = Phi                      %51.6:BB51, %53.4:BB53, %71.2:BB71
  void                    Return             l     %52.0
BB18   <- [16]
  val             %18.0 = ChkMissing         e     %16.4
  void                    Assume             D     %16.6, %16.7 (Typecheck@0x5558d594bfb0[Type#22])
  val?-           %18.2 = CastType           d     dn %16.4   <str$->
  lgl-            %18.3 = Eq                 wed   %18.2, "auto", elided   <lgl$->
  lgl$#-          %18.4 = IsType                   %18.3 isA lgl$-
  cp              %18.5 = Checkpoint                -> BB20 (default) | BB19 (if assume failed)
BB17   <- [16]
  fs              %17.0 = FrameState         R     0x5558d65eb330+672: [], env=e1.1
  void                    Deopt              !v    %17.0   !
BB20   <- [18]
  void                    Assume             D     %18.4, %18.5 (Typecheck@0x5558d594bfb0[Type#24])
  lgl$-           %20.1 = CastType           d     dn %18.3
  lgl$-           %20.2 = AsLogical                %20.1
  lgl$#-          %20.3 = Identical                %20.2, false
  void                    Branch                   %20.3 -> BB66 (if true) | BB21 (if false)
BB19   <- [18]
  fs              %19.0 = FrameState         R     0x5558d65eb330+693: [%18.3], env=e1.1
  void                    Deopt              !v    %19.0   !
BB66   <- [20]
  goto BB24
BB21   <- [20]
  val?^ | miss    %21.0 = LdVar              eR    is.numeric, e1.1
  lgl$#-          %21.1 = Identical                <blt is.numeric>, %21.0   <true>
  void                    Assume             D     %21.1, %18.5 (DeadBranchReached@0x5558d594bfb0[Test#5])
  val?^ | miss    %21.3 = LdVar              eR    x, e1.1
  lgl$#-          %21.4 = IsType                   %21.3 isA real~+
  void                    Assume             D     %21.4, %18.5 (Typecheck@0x5558d594bfb0[Type#26])
  real~+          %21.6 = CastType           d     dn %21.3
  real+           %21.7 = Force!<wrapped>          %21.6,    <real+>
  lgl$#-          %21.8 = CallSafeBuiltin    wed   is.numeric(%21.7)    <lgl$->
  lgl$-           %21.9 = LAnd                     %20.2, %21.8
  void                    Branch                   %21.8 -> BB23 (if true) | BB22 (if false)
BB24   <- [66, 23]
  lgl$-           %24.0 = Phi                      %21.9:BB23, %20.2:BB66
  lgl$-           %24.1 = AsLogical                %24.0
  lgl$#-          %24.2 = Identical                %24.1, false
  cp              %24.3 = Checkpoint                -> BB26 (default) | BB25 (if assume failed)
BB23   <- [21]
  goto BB24
BB22   <- [21]
  (cls|spec|blt)  %22.0 = LdFun              !v    is.factor, e1.1
  fs              %22.1 = FrameState         R     0x5558d65eb330+813: [%20.2, %21.8, %22.0], env=e1.1
  void                    Deopt              !v    %22.1, DeadCall@0x5558d594bfb0[Call#8], %22.0   !
BB26   <- [24]
  void                    Branch                   %24.2 -> BB65 (if true) | BB27 (if false)
BB25   <- [24]
  fs              %25.0 = FrameState         R     0x5558d65eb330+1167: [%24.0], env=e1.1
  void                    Deopt              !v    %25.0   !
BB65   <- [26]
  goto BB30
BB27   <- [26]
  val?^ | miss    %27.0 = LdVar              eR    is.integer, e1.1
  lgl$#-          %27.1 = Identical                <blt is.integer>, %27.0   <true>
  void                    Assume             D     %27.1, %24.3 (DeadBranchReached@0x5558d594bfb0[Test#9])
  val?^ | miss    %27.3 = LdVar              eR    length, e1.1
  lgl$#-          %27.4 = Identical                <blt length>, %27.3   <true>
  void                    Assume             D     %27.4, %24.3 (DeadBranchReached@0x5558d594bfb0[Test#10])
  val?^ | miss    %27.6 = LdVar              eR    x, e1.1
  lgl$#-          %27.7 = IsType                   %27.6 isA real~+
  void                    Assume             D     %27.7, %24.3 (Typecheck@0x5558d594bfb0[Type#42])
  real~+          %27.9 = CastType           d     dn %27.6
  real+           %27.10 = Force!<wrapped>          %27.9,    <real+>
  (int|real)$-    %27.11 = CallSafeBuiltin    wed   length(%27.10)    <int$->
  lgl$#-          %27.12 = IsType                   %27.11 isA int$-
  cp              %27.13 = Checkpoint                -> BB29 (default) | BB28 (if assume failed)
BB30   <- [65, 29]
  lgl$-           %30.0 = Phi                      %29.1:BB29, %24.1:BB65
  lgl$#-          %30.1 = CheckTrueFalse     e     %30.0
  void                    Branch                   %30.1 -> BB64 (if true) | BB31 (if false)
BB29   <- [27]
  void                    Assume             D     %27.12, %27.13 (Typecheck@0x5558d594bfb0[Type#43])
  lgl$-           %29.1 = AsLogical                %24.1
  goto BB30
BB28   <- [27]
  fs              %28.0 = FrameState         R     0x5558d65eb330+1325: [%24.1, <blt is.integer>, %27.11], env=e1.1
  void                    Deopt              !v    %28.0   !
BB64   <- [30]
  void                    StVar              lW    method, "radix", e1.1
  goto BB32
BB31   <- [30]
  goto BB32
BB32   <- [31, 64]
  val?^ | miss    %32.0 = LdVar              eR    partial, e1.1
  val?            %32.1 = Force!<wrapped>    !v    %32.0, e1.1   <nil->
  lgl$-           %32.2 = Is                       %32.1, NULL
  lgl$-           %32.3 = Not                d     %32.2, elided
  lgl$#-          %32.4 = CheckTrueFalse     e     %32.3
  void                    Branch                   %32.4 -> BB63 (if true) | BB33 (if false)
BB63   <- [32]
  (cls|spec|blt)  %63.0 = LdFun              !v    .NotYetUsed, e1.1
  fs              %63.1 = FrameState         R     0x5558d65eb330+1416: [%63.0], env=e1.1
  void                    Deopt              !v    %63.1, DeadCall@0x5558d594bfb0[Call#15], %63.0   !
BB33   <- [32]
  val?^ | miss    %33.0 = LdVar              eR    method, e1.1
  val?            %33.1 = Force!<value>      !v    %33.0, e1.1   <str$->
  lgl$#-          %33.2 = IsType                   %33.1 isA val?-
  cp              %33.3 = Checkpoint                -> BB35 (default) | BB34 (if assume failed)
BB35   <- [33]
  void                    Assume             D     %33.2, %33.3 (Typecheck@0x5558d594bfb0[Type#46])
  val?-           %35.1 = CastType           d     dn %33.1   <str$->
  lgl-            %35.2 = Eq                 wed   %35.1, "quick", elided   <lgl$->
  lgl$#-          %35.3 = IsType                   %35.2 isA lgl$-
  cp              %35.4 = Checkpoint                -> BB37 (default) | BB36 (if assume failed)
BB34   <- [33]
  fs              %34.0 = FrameState         R     0x5558d65eb330+1453: [%33.1], env=e1.1
  void                    Deopt              !v    %34.0   !
BB37   <- [35]
  void                    Assume             D     %35.3, %35.4 (Typecheck@0x5558d594bfb0[Type#47])
  lgl$-           %37.1 = CastType           d     dn %35.2
  lgl$#-          %37.2 = CheckTrueFalse     e     %37.1
  void                    Branch                   %37.2 -> BB62 (if true) | BB38 (if false)
BB36   <- [35]
  fs              %36.0 = FrameState         R     0x5558d65eb330+1465: [%35.2], env=e1.1
  void                    Deopt              !v    %36.0   !
BB62   <- [37]
  (cls|spec|blt)  %62.0 = LdFun              !v    is.factor, e1.1
  fs              %62.1 = FrameState         R     0x5558d65eb330+1486: [%62.0], env=e1.1
  void                    Deopt              !v    %62.1, DeadCall@0x5558d594bfb0[Call#16], %62.0   !
BB38   <- [37]
  val?^ | miss    %38.0 = LdVar              eR    is.na, e1.1
  lgl$#-          %38.1 = Identical                <blt is.na>, %38.0   <true>
  void                    Assume             D     %38.1, %35.4 (DeadBranchReached@0x5558d594bfb0[Test#13])
  val?^ | miss    %38.3 = LdVar              eR    na.last, e1.1
  lgl$#-          %38.4 = IsType                   %38.3 isA lgl$~-
  void                    Assume             D     %38.4, %35.4 (Typecheck@0x5558d594bfb0[Type#63])
  lgl$~-          %38.6 = CastType           d     dn %38.3
  lgl$-           %38.7 = Force!<wrapped>          %38.6,    <lgl$->
  lgl$-           %38.8 = CallSafeBuiltin    wed   is.na(%38.7)    <lgl$->
  lgl$#-          %38.9 = CheckTrueFalse     e     %38.8
  void                    Branch                   %38.9 -> BB54 (if true) | BB39 (if false)
BB54   <- [38]
  val?^ | miss    %54.0 = LdVar              eR    x, e1.1
  val?            %54.1 = Force!             !v    %54.0, e1.1   <val?_>
  lgl$#-          %54.2 = IsType                   %54.1 isA val+   <@?>
  void                    Branch                   %54.2 -> BB57 (if true) | BB55 (if false)
BB39   <- [38]
  goto BB40
BB57   <- [54]
  val?^ | miss    %57.0 = LdVar              eR    is.na, e1.1
  lgl$#-          %57.1 = Identical                <blt is.na>, %57.0   <@?>
  void                    Branch                   %57.1 -> BB59 (if true) | BB58 (if false)
BB55   <- [54]
  prom-           %55.0 = MkArg                    unboundValue, sort.list[0x5558d6ad69b0]_p8, e1.1
  goto BB56
BB40   <- [39, 56]
  val?^ | miss    %40.0 = LdVar              eR    method, e1.1
  val?            %40.1 = Force!<value>      !v    %40.0, e1.1   <str$->
  lgl$#-          %40.2 = IsType                   %40.1 isA val?-
  cp              %40.3 = Checkpoint                -> BB42 (default) | BB41 (if assume failed)
BB59   <- [57]
  val?^ | miss    %59.0 = LdVar              eR    x, e1.1
  val?            %59.1 = Force!             !v    %59.0, e1.1   <val?_>
  lgl$#-          %59.2 = IsType                   %59.1 isA val?+
  cp              %59.3 = Checkpoint                -> BB61 (default) | BB60 (if assume failed)
BB58   <- [57]
  (cls|spec|blt)  %58.0 = LdFun              !v    is.na, e1.1
  fs              %58.1 = FrameState         R     0x5558d65eb330+1997: [%54.1, %58.0], env=e1.1
  void                    Deopt              !v    %58.1, DeadCall@0x5558d594bfb0[Call#24], %58.0   !
BB56   <- [55, 61]
  (lgl|prom)      %56.0 = Phi                      %61.3:BB61, %55.0:BB55
  val?            %56.1 = Extract1_1D        !v    %54.1, %56.0, e1.1   <val?_>
  void                    StVar              lW    x, %56.1, e1.1
  void                    StVar              lW    na.last, true, e1.1
  goto BB40
BB42   <- [40]
  void                    Visible            v     
  void                    Assume             D     %40.2, %40.3 (Typecheck@0x5558d594bfb0[Type#72])
  val?-           %42.2 = CastType           d     dn %40.1   <str$->
  lgl-            %42.3 = Eq                 vwed  %42.2, "radix", elided   <lgl$->
  lgl$#-          %42.4 = IsType                   %42.3 isA lgl$-
  cp              %42.5 = Checkpoint                -> BB44 (default) | BB43 (if assume failed)
BB41   <- [40]
  fs              %41.0 = FrameState         R     0x5558d65eb330+2106: [%40.1], env=e1.1
  void                    Deopt              !v    %41.0   !
BB61   <- [59]
  void                    Assume             D     %59.2, %59.3 (Typecheck@0x5558d594bfb0[Type#69])
  val?+           %61.1 = CastType           d     dn %59.1   <val?_>
  lgl+            %61.2 = CallSafeBuiltin    wed   is.na(%61.1)    <val?_>
  lgl             %61.3 = Not                wed   %61.2, elided
  goto BB56
BB60   <- [59]
  fs              %60.0 = FrameState         R     0x5558d65eb330+2038: [%54.1, <blt is.na>, %59.1], env=e1.1
  void                    Deopt              !v    %60.0   !
BB44   <- [42]
  void                    Assume             D     %42.4, %42.5 (Typecheck@0x5558d594bfb0[Type#73])
  lgl$-           %44.1 = CastType           d     dn %42.3
  lgl$#-          %44.2 = CheckTrueFalse     e     %44.1
  void                    Branch                   %44.2 -> BB53 (if true) | BB45 (if false)
BB43   <- [42]
  fs              %43.0 = FrameState         R     0x5558d65eb330+2118: [%42.3], env=e1.1
  void                    Deopt              !v    %43.0   !
BB53   <- [44]
  (cls|spec|blt)  %53.0 = LdFun              !     order, <0x5558d65ec800>, e1.1
  prom-           %53.1 = MkArg                    unboundValue, sort.list[0x5558d6ad69b0]_p5, e1.1
  prom-           %53.2 = MkArg                    unboundValue, sort.list[0x5558d6ad69b0]_p6, e1.1
  prom-           %53.3 = MkArg                    unboundValue, sort.list[0x5558d6ad69b0]_p7, e1.1
  val?            %53.4 = NamedCall          !     %53.0(%53.1, na.last=%53.2, decreasing=%53.3, method="radix") e1.1   <int->
  goto BB52
BB45   <- [44]
  val?^ | miss    %45.0 = LdVar              eR    is.atomic, e1.1
  lgl$#-          %45.1 = Identical                <blt is.atomic>, %45.0   <@?>
  void                    Branch                   %45.1 -> BB47 (if true) | BB46 (if false)
BB47   <- [45]
  val?^ | miss    %47.0 = LdVar              eR    x, e1.1
  val?            %47.1 = Force!             !v    %47.0, e1.1   <val?_>
  lgl$#-          %47.2 = IsType                   %47.1 isA val?+
  cp              %47.3 = Checkpoint                -> BB49 (default) | BB48 (if assume failed)
BB46   <- [45]
  (cls|spec|blt)  %46.0 = LdFun              !v    is.atomic, e1.1
  fs              %46.1 = FrameState         R     0x5558d65eb330+2231: [%46.0], env=e1.1
  void                    Deopt              !v    %46.1, DeadCall@0x5558d594bfb0[Call#26], %46.0   !
BB49   <- [47]
  void                    Assume             D     %47.2, %47.3 (Typecheck@0x5558d594bfb0[Type#79])
  val?+           %49.1 = CastType           d     dn %47.1   <val?_>
  lgl$#-          %49.2 = CallSafeBuiltin    wed   is.atomic(%49.1)    <val?_>
  void                    Branch                   %49.2 -> BB51 (if true) | BB50 (if false)
BB48   <- [47]
  fs              %48.0 = FrameState         R     0x5558d65eb330+2272: [<blt is.atomic>, %47.1], env=e1.1
  void                    Deopt              !v    %48.0   !
BB51   <- [49]
  val?^ | miss    %51.0 = LdVar              eR    na.last, e1.1
  val?            %51.1 = Force!             !v    %51.0, e1.1   <val?_>
  val?^ | miss    %51.2 = LdVar              eR    decreasing, e1.1
  val?            %51.3 = Force!             !v    %51.2, e1.1   <val?_>
  val?^ | miss    %51.4 = LdVar              eR    x, e1.1
  val?            %51.5 = Force!             !v    %51.4, e1.1   <val?_>
  val?            %51.6 = CallBuiltin        !     order(%51.1, %51.3, %51.5) e1.1
  goto BB52
BB50   <- [49]
  (cls|spec|blt)  %50.0 = LdFun              !v    stop, e1.1
  fs              %50.1 = FrameState         R     0x5558d65eb330+2316: [%50.0], env=e1.1
  void                    Deopt              !v    %50.1, DeadCall@0x5558d594bfb0[Call#27], %50.0   !
Prom 3:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     c, <0x5558d3385940>, e1.0
  val?            %1.2  = Call               !     %1.1("auto", "shell", "quick", "radix") e1.0   <str->
  void                    Return             l     %1.2
Prom 4:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    method, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <str->
  void                    Return             l     %1.3
Prom 5:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    x, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <real+>
  void                    Return             l     %1.3
Prom 6:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    na.last, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <lgl$->
  void                    Return             l     %1.3
Prom 7:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    decreasing, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <lgl$->
  void                    Return             l     %1.3
Prom 8:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     is.na, e1.0
  prom-           %1.2  = MkArg                    unboundValue, sort.list[0x5558d6ad69b0]_p9, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <val?_>
  val?            %1.4  = Not                !     %1.3, e1.0
  void                    Return             l     %1.4
Prom 9:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    x, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3

│ sort.list[0x5558d6ad69b0]                                                    │
└──────────────────────────────────────────────────────────────────────────────┘
