
┌──────────────────────────────────────────────────────────────────────────────┐
│ as[0x5558d7cd43f0]                                                           │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;NonRefl1,!Obj1 miss: 2               │
│ Properties:                                                                  │
├────── PIR Version After Optimizations
as[0x5558d7cd43f0]
BB0
  goto BB1
BB1   <- [0]
  val?^           %1.0  = LdArg                    1
  val?^           %1.1  = LdArg                    0
  env             e1.2  = MkEnv              l     object=%1.1, Class=%1.0, strict(miss)=true, ext(miss)=missingArg, parent=<env 0x5558d398c378>, context 1
  prom-           %1.3  = MkArg                    unboundValue, as[0x5558d7cd43f0]_p1, e1.2
  val?^ | miss    %1.4  = CastType                 up %1.3
  void                    StArg              lW    ext, %1.4, e1.2
  cp              %1.6  = Checkpoint                -> BB2 (default) | BB109 (if assume failed)
BB2   <- [1]
  val?^ | miss    %2.0  = LdVar              eR    .class1, <env 0x5558d398c378>
  lgl$#-          %2.1  = Identical                %2.0, function(x) <(rir::DispatchTable*)0x5558d395ed|...
  void                    Assume             D     %2.1, %1.6 (CallTarget@0x5558d575ed30[Call#1])
  prom-           %2.3  = MkArg                    unboundValue, as[0x5558d7cd43f0]_p4, e1.2
  ct              %2.4  = PushContext        lCL   %2.3, .class1(object), function(x) <(rir::DispatchTable*)0x5558d395ed|..., e1.2
  val?^           %2.5  = CastType                 up %2.3
  val?^ | miss    %2.6  = LdVar              eR    class, <env 0x5558d398c378>
  lgl$#-          %2.7  = Identical                <blt class>, %2.6   <true>
  cp              %2.8  = Checkpoint                -> BB4 (default) | BB3 (if assume failed)
BB109   <- [1]
  fs              %109.0 = FrameState         R     0x5558d6b0a7c0+0: [], env=e1.2
  void                    Deopt              !v    %109.0
BB4   <- [2]
  void                    Assume             D     %2.7, %2.8 (DeadBranchReached@0x5558d711c498[Test#0])
  env             e4.1  = MkEnv              l     x=%2.5, parent=<env 0x5558d398c378>, context 1
  val?            %4.2  = Force!<lazy>       !vL   %2.5, e4.1   <(str|cls)>
  val?            %4.3  = CallBuiltin        !v    class(%4.2) e4.1   <str$+>
  void                    StVar              lW    cl, %4.3, e4.1
  lgl$#-          %4.5  = IsType                   %4.3 isA val?+
  cp              %4.6  = Checkpoint                -> BB6 (default) | BB5 (if assume failed)
BB3   <- [2]
  fs              %3.0  = FrameState         R     0x5558d6b0a7c0+32: [], env=e1.2
  env             e3.1  = (MkEnv)            l     x=%2.5, parent=<env 0x5558d398c378>, context 1
  fs              %3.2  = FrameState         R     0x5558d395eb70+17: [<blt class>, %2.7], env=e3.1, next=%3.0
  void                    Deopt              !v    %3.2   !
BB6   <- [4]
  val?^ | miss    %6.0  = LdVar              eR    length, e4.1
  lgl$#-          %6.1  = Identical                <blt length>, %6.0   <true>
  void                    Assume             D     %6.1, %4.6 (DeadBranchReached@0x5558d711c498[Test#1])
  val             %6.3  = ChkMissing         e     %4.3
  void                    Assume             D     %4.5, %4.6 (Typecheck@0x5558d711c498[Type#2])
  val?+           %6.5  = CastType           d     dn %4.3   <str$+>
  (int|real)$-    %6.6  = CallSafeBuiltin    wed   length(%6.5)    <int$->
  lgl$#-          %6.7  = IsType                   %6.6 isA int$-
  cp              %6.8  = Checkpoint                -> BB8 (default) | BB7 (if assume failed)
BB5   <- [4]
  fs              %5.0  = FrameState         R     0x5558d6b0a7c0+32: [], env=e1.2
  fs              %5.1  = FrameState         R     0x5558d395eb70+105: [], env=e4.1, next=%5.0
  void                    Deopt              !v    %5.1   !
BB8   <- [6]
  void                    Assume             D     %6.7, %6.8 (Typecheck@0x5558d711c498[Type#5])
  int$-           %8.1  = CastType           d     dn %6.6
  lgl$-           %8.2  = Gt                 d     %8.1, 1L, elided   <lgl$->
  lgl$#-          %8.3  = CheckTrueFalse     e     %8.2
  void                    Branch                   %8.3 -> BB108 (if true) | BB9 (if false)
BB7   <- [6]
  fs              %7.0  = FrameState         R     0x5558d6b0a7c0+32: [], env=e1.2
  fs              %7.1  = FrameState         R     0x5558d395eb70+196: [%6.6], env=e4.1, next=%7.0
  void                    Deopt              !v    %7.1   !
BB108   <- [8]
  val?            %108.0 = Extract2_1D        wed   %6.5, 1L, elided   <val?_>
  goto BB10
BB9   <- [8]
  goto BB10
BB10   <- [9, 108]
  val?            %10.0 = Phi                      %6.5:BB9, %108.0:BB108
  val?            %10.1 = PopContext         C     %10.0, %2.4   <str$+>
  void                    StVar              lW    thisClass, %10.1, e1.2
  cp              %10.3 = Checkpoint                -> BB12 (default) | BB11 (if assume failed)
BB12   <- [10]
  val?^ | miss    %12.0 = LdVar              eR    .identC, e1.2
  lgl$#-          %12.1 = Identical                %12.0, function(c1=NULL, c2=NULL) <(rir::DispatchTabl|...
  void                    Assume             D     %12.1, %10.3 (CallTarget@0x5558d575ed30[Call#2])
  prom-           %12.3 = MkArg                    unboundValue, as[0x5558d7cd43f0]_p5 (!refl), e1.2
  prom-           %12.4 = MkArg                    unboundValue, as[0x5558d7cd43f0]_p6, e1.2
  ct              %12.5 = PushContext        lCL   %12.3, %12.4, .identC(thisClass, Class), function(c1=NULL, c2=NULL) <(rir::DispatchTabl|..., e1.2
  val?^           %12.6 = CastType                 up %12.4
  val?^           %12.7 = CastType                 up %12.3
  val?^ | miss    %12.8 = LdVar              eR    .Call, <env 0x5558d398c378>
  lgl$#-          %12.9 = Identical                <blt .Call>, %12.8   <true>
  cp              %12.10 = Checkpoint                -> BB14 (default) | BB13 (if assume failed)
BB11   <- [10]
  fs              %11.0 = FrameState         R     0x5558d6b0a7c0+46: [], env=e1.2
  void                    Deopt              !v    %11.0   !
BB14   <- [12]
  void                    Assume             D     %12.9, %12.10 (DeadBranchReached@0x5558d47c5d78[Test#0])
  val?^ | miss    %14.1 = LdVar              eR    C_R_identC, <env 0x5558d398c378>
  env             e14.2 = MkEnv              l     c1=%12.7, c2=%12.6, parent=<env 0x5558d398c378>, context 1
  val?            %14.3 = Force!<value>      !v    %14.1, e14.2   <vec>
  val?^ | miss    %14.4 = LdVar              eR    c1, e14.2
  val?            %14.5 = Force!<lazy>       !v    %14.4, e14.2   <str$+>
  val?^ | miss    %14.6 = LdVar              eR    c2, e14.2
  val?            %14.7 = Force!<lazy>       !v    %14.6, e14.2   <str$+>
  val?            %14.8 = CallBuiltin        !v    .Call(%14.3, %14.5, %14.7) e14.2   <lgl$->
  lgl$#-          %14.9 = IsType                   %14.8 isA lgl$-
  cp              %14.10 = Checkpoint                -> BB16 (default) | BB15 (if assume failed)
BB13   <- [12]
  fs              %13.0 = FrameState         R     0x5558d6b0a7c0+83: [], env=e1.2
  env             e13.1 = (MkEnv)            l     c1=%12.7, c2=%12.6, parent=<env 0x5558d398c378>, context 1
  fs              %13.2 = FrameState         R     0x5558d5598d00+17: [<blt .Call>, %12.9], env=e13.1, next=%13.0
  void                    Deopt              !v    %13.2   !
BB16   <- [14]
  void                    Assume             D     %14.9, %14.10 (Typecheck@0x5558d47c5d78[Type#6])
  lgl$-           %16.1 = CastType           d     dn %14.8
  val?            %16.2 = PopContext         C     %16.1, %12.5   <lgl$->
  lgl$#-          %16.3 = IsType                   %16.2 isA lgl$-
  cp              %16.4 = Checkpoint                -> BB18 (default) | BB17 (if assume failed)
BB15   <- [14]
  fs              %15.0 = FrameState         R     0x5558d6b0a7c0+83: [], env=e1.2
  fs              %15.1 = FrameState         R     0x5558d5598d00+129: [%14.8], env=e14.2, next=%15.0
  void                    Deopt              !v    %15.1   !
BB18   <- [16]
  void                    Assume             D     %16.3, %16.4 (Typecheck@0x5558d575ed30[Type#7])
  lgl$-           %18.1 = CastType           d     dn %16.2
  lgl$-           %18.2 = AsLogical                %18.1
  lgl$#-          %18.3 = Identical                %18.2, true
  void                    Branch                   %18.3 -> BB107 (if true) | BB19 (if false)
BB17   <- [16]
  fs              %17.0 = FrameState         R     0x5558d6b0a7c0+83: [%16.2], env=e1.2
  void                    Deopt              !v    %17.0   !
BB107   <- [18]
  goto BB26
BB19   <- [18]
  val?^ | miss    %19.0 = LdVar              eR    .identC, e1.2
  lgl$#-          %19.1 = Identical                %19.0, function(c1=NULL, c2=NULL) <(rir::DispatchTabl|...
  void                    Assume             D     %19.1, %16.4 (CallTarget@0x5558d575ed30[Call#3])
  prom-           %19.3 = MkArg                    unboundValue, as[0x5558d7cd43f0]_p7, e1.2
  ct              %19.4 = PushContext        lCL   %19.3, "ANY", .identC(Class, "ANY"), function(c1=NULL, c2=NULL) <(rir::DispatchTabl|..., e1.2
  val?^           %19.5 = CastType                 up %19.3
  val?^ | miss    %19.6 = LdVar              eR    .Call, <env 0x5558d398c378>
  lgl$#-          %19.7 = Identical                <blt .Call>, %19.6   <true>
  cp              %19.8 = Checkpoint                -> BB21 (default) | BB20 (if assume failed)
BB26   <- [25, 107]
  lgl$-           %26.0 = Phi                      %25.3:BB25, %18.2:BB107
  cp              %26.1 = Checkpoint                -> BB28 (default) | BB27 (if assume failed)
BB21   <- [19]
  void                    Assume             D     %19.7, %19.8 (DeadBranchReached@0x5558d47c5d78[Test#0])
  val?^ | miss    %21.1 = LdVar              eR    C_R_identC, <env 0x5558d398c378>
  env             e21.2 = MkEnv              l     c1=%19.5, c2="ANY", parent=<env 0x5558d398c378>, context 1
  val?            %21.3 = Force!<value>      !v    %21.1, e21.2   <vec>
  val?^ | miss    %21.4 = LdVar              eR    c1, e21.2
  val?            %21.5 = Force!<lazy>       !v    %21.4, e21.2   <str$+>
  val?^ | miss    %21.6 = LdVar              eR    c2, e21.2
  val?            %21.7 = Force!<lazy>       !v    %21.6, e21.2   <str$+>
  val?            %21.8 = CallBuiltin        !v    .Call(%21.3, %21.5, %21.7) e21.2   <lgl$->
  lgl$#-          %21.9 = IsType                   %21.8 isA lgl$-
  cp              %21.10 = Checkpoint                -> BB23 (default) | BB22 (if assume failed)
BB20   <- [19]
  fs              %20.0 = FrameState         R     0x5558d6b0a7c0+132: [%18.2], env=e1.2
  env             e20.1 = (MkEnv)            l     c1=%19.5, c2="ANY", parent=<env 0x5558d398c378>, context 1
  fs              %20.2 = FrameState         R     0x5558d5598d00+17: [<blt .Call>, %19.7], env=e20.1, next=%20.0
  void                    Deopt              !v    %20.2   !
BB28   <- [26]
  lgl$#-          %28.0 = CheckTrueFalse     e     %26.0
  void                    Branch                   %28.0 -> BB106 (if true) | BB29 (if false)
BB27   <- [26]
  fs              %27.0 = FrameState         R     0x5558d6b0a7c0+139: [%26.0], env=e1.2
  void                    Deopt              !v    %27.0   !
BB23   <- [21]
  void                    Assume             D     %21.9, %21.10 (Typecheck@0x5558d47c5d78[Type#6])
  lgl$-           %23.1 = CastType           d     dn %21.8
  val?            %23.2 = PopContext         C     %23.1, %19.4   <lgl$->
  lgl$#-          %23.3 = IsType                   %23.2 isA lgl$-
  cp              %23.4 = Checkpoint                -> BB25 (default) | BB24 (if assume failed)
BB22   <- [21]
  fs              %22.0 = FrameState         R     0x5558d6b0a7c0+132: [%18.2], env=e1.2
  fs              %22.1 = FrameState         R     0x5558d5598d00+129: [%21.8], env=e21.2, next=%22.0
  void                    Deopt              !v    %22.1   !
BB106   <- [28]
  val?^ | miss    %106.0 = LdVar              eR    object, e1.2
  void                    Visible            v     
  val?            %106.2 = Force!<wrapped>    !     %106.0, e1.2   <(str|cls)->
  goto BB54
BB29   <- [28]
  val?^ | miss    %29.0 = LdVar              eR    .classEnv, e1.2
  lgl$#-          %29.1 = Identical                %29.0, function(Class, default=.requirePackage("metho|...
  void                    Assume             D     %29.1, %26.1 (CallTarget@0x5558d575ed30[Call#4])
  prom-           %29.3 = MkArg                    unboundValue, as[0x5558d7cd43f0]_p8, e1.2
  val?            %29.4 = StaticCall         !v    .classEnv[0x5558d5d1d710](%29.3, missingArg, false) { 0 2n } e1.2   <env->
  void                    StVar              lW    where, %29.4, e1.2
  cp              %29.6 = Checkpoint                -> BB31 (default) | BB30 (if assume failed)
BB25   <- [23]
  void                    Assume             D     %23.3, %23.4 (Typecheck@0x5558d575ed30[Type#9])
  lgl$-           %25.1 = CastType           d     dn %23.2
  lgl$-           %25.2 = AsLogical                %25.1
  lgl$-           %25.3 = LOr                      %18.2, %25.2
  goto BB26
BB24   <- [23]
  fs              %24.0 = FrameState         R     0x5558d6b0a7c0+132: [%18.2, %23.2], env=e1.2
  void                    Deopt              !v    %24.0   !
BB54   <- [106, 53]
  val?            %54.0 = Phi                      %53.2:BB53, %106.2:BB106
  void                    Return             l     %54.0
BB31   <- [29]
  val?^ | miss    %31.0 = LdVar              eR    getGeneric, e1.2
  lgl$#-          %31.1 = Identical                %31.0, function(f, mustFind=FALSE, where, package="")|...
  void                    Assume             D     %31.1, %29.6 (CallTarget@0x5558d575ed30[Call#5])
  prom-           %31.3 = MkArg                    unboundValue, as[0x5558d7cd43f0]_p9 (!refl), e1.2
  val?            %31.4 = StaticCall         !v    getGeneric[0x5558d3ff2140]("coerce", missingArg, %31.3) { 0 2n } e1.2   <cls>
  void                    StVar              lW    coerceFun, %31.4, e1.2
  cp              %31.6 = Checkpoint                -> BB33 (default) | BB32 (if assume failed)
BB30   <- [29]
  fs              %30.0 = FrameState         R     0x5558d6b0a7c0+224: [], env=e1.2
  void                    Deopt              !v    %30.0   !
BB33   <- [31]
  val?^ | miss    %33.0 = LdVar              eR    .getMethodsTable, e1.2
  lgl$#-          %33.1 = Identical                %33.0, function(fdef, env=environment(fdef), check=TR|...
  void                    Assume             D     %33.1, %31.6 (CallTarget@0x5558d575ed30[Call#6])
  prom-           %33.3 = MkArg                    unboundValue, as[0x5558d7cd43f0]_p10 (!refl), e1.2
  prom-           %33.4 = MkArg                    unboundValue, as[0x5558d7cd43f0]_p11, e1.2
  val?            %33.5 = StaticCall         !v    .getMethodsTable[0x5558d9f63cf0](%33.3, %33.4, missingArg, true) { 0 1 3n } e1.2   <env->
  void                    StVar              lW    coerceMethods, %33.5, e1.2
  cp              %33.7 = Checkpoint                -> BB35 (default) | BB34 (if assume failed)
BB32   <- [31]
  fs              %32.0 = FrameState         R     0x5558d6b0a7c0+283: [], env=e1.2
  void                    Deopt              !v    %32.0   !
BB35   <- [33]
  val?^ | miss    %35.0 = LdVar              eR    .quickCoerceSelect, e1.2
  lgl$#-          %35.1 = Identical                %35.0, function(from, to, fdef, methods, where) <(rir|...
  void                    Assume             D     %35.1, %33.7 (CallTarget@0x5558d575ed30[Call#8])
  prom-           %35.3 = MkArg                    unboundValue, as[0x5558d7cd43f0]_p13, e1.2
  prom-           %35.4 = MkArg                    unboundValue, as[0x5558d7cd43f0]_p14, e1.2
  prom-           %35.5 = MkArg                    unboundValue, as[0x5558d7cd43f0]_p15, e1.2
  prom-           %35.6 = MkArg                    unboundValue, as[0x5558d7cd43f0]_p16 (!refl), e1.2
  prom-           %35.7 = MkArg                    unboundValue, as[0x5558d7cd43f0]_p17, e1.2
  ct              %35.8 = PushContext        lCL   %35.3, %35.4, %35.5, %35.6, %35.7, .quickCoerceSelect(thisClass, Class, coerceFun|..., function(from, to, fdef, methods, where) <(rir|..., e1.2
  val?^           %35.9 = CastType                 up %35.7
  val?^           %35.10 = CastType                 up %35.6
  val?^           %35.11 = CastType                 up %35.5
  val?^           %35.12 = CastType                 up %35.4
  val?^           %35.13 = CastType                 up %35.3
  env             e35.14 = MkEnv              l     from=%35.13, to=%35.12, fdef=%35.11, methods=%35.10, where=%35.9, parent=<env 0x5558d398c378>, context 1
  val?            %35.15 = Force!<lazy>       !vrL  %35.10, e35.14   <env->
  lgl$-           %35.16 = Is                       %35.15, NULL
  lgl$#-          %35.17 = IsType                   %35.15 isA val?-
  cp              %35.18 = Checkpoint                -> BB37 (default) | BB36 (if assume failed)
BB34   <- [33]
  fs              %34.0 = FrameState         R     0x5558d6b0a7c0+351: [], env=e1.2
  void                    Deopt              !v    %34.0   !
BB37   <- [35]
  void                    Assume             D     %35.17, %35.18 (Typecheck@0x5558d3ae1420[Type#0])
  lgl$#-          %37.1 = CheckTrueFalse     e     %35.16
  void                    Branch                   %37.1 -> BB105 (if true) | BB38 (if false)
BB36   <- [35]
  fs              %36.0 = FrameState         R     0x5558d6b0a7c0+403: [], env=e1.2
  fs              %36.1 = FrameState         R     0x5558d6d4d800+9: [%35.15], env=e35.14, next=%36.0
  void                    Deopt              !v    %36.1   !
BB105   <- [37]
  goto BB47
BB38   <- [37]
  val?^ | miss    %38.0 = LdVar              eR    is.environment, <env 0x5558d398c378>
  lgl$#-          %38.1 = Identical                <blt is.environment>, %38.0   <true>
  void                    Assume             D     %38.1, %35.18 (DeadBranchReached@0x5558d3ae1420[Test#0])
  lgl$#-          %38.3 = CallSafeBuiltin    wed   is.environment(%35.15)    <lgl$->
  cp              %38.4 = Checkpoint                -> BB40 (default) | BB39 (if assume failed)
BB47   <- [105, 46]
  val?            %47.0 = Phi                      %46.0:BB46, nil:BB105
  val?            %47.1 = PopContext         C     %47.0, %35.8   <(nil|cls)>
  lgl$-           %47.2 = Is                       %47.1, NULL
  void                    StVar              lW    asMethod, %47.1, e1.2
  cp              %47.4 = Checkpoint                -> BB49 (default) | BB48 (if assume failed)
BB40   <- [38]
  void                    Branch                   %38.3 -> BB42 (if true) | BB41 (if false)
BB39   <- [38]
  fs              %39.0 = FrameState         R     0x5558d6b0a7c0+403: [], env=e1.2
  fs              %39.1 = FrameState         R     0x5558d6d4d800+116: [%38.3], env=e35.14, next=%39.0
  void                    Deopt              !v    %39.1   !
BB49   <- [47]
  val             %49.0 = ChkMissing         e     %47.1
  lgl$#-          %49.1 = CheckTrueFalse     e     %47.2
  void                    Branch                   %49.1 -> BB55 (if true) | BB50 (if false)
BB48   <- [47]
  fs              %48.0 = FrameState         R     0x5558d6b0a7c0+417: [], env=e1.2
  void                    Deopt              !v    %48.0   !
BB42   <- [40]
  val?^ | miss    %42.0 = LdVar              eR    .findMethodInTable, <env 0x5558d398c378>
  lgl$#-          %42.1 = Identical                %42.0, function(signature, table, fdef=NULL, expdSig=|...
  void                    Assume             D     %42.1, %38.4 (CallTarget@0x5558d3ae1420[Call#8])
  prom-           %42.3 = MkArg                    unboundValue, as[0x5558d7cd43f0]_p50, e35.14
  prom-           %42.4 = MkArg                    unboundValue, as[0x5558d7cd43f0]_p53, e35.14
  val?            %42.5 = StaticCall         !v    .findMethodInTable[0x5558d883a290](%42.3, %42.4) e35.14   <(nil|cls)>
  void                    StVar              lW    method, %42.5, e35.14
  cp              %42.7 = Checkpoint                -> BB44 (default) | BB43 (if assume failed)
BB41   <- [40]
  fs              %41.0 = FrameState         R     0x5558d6b0a7c0+403: [], env=e1.2
  (cls|spec|blt)  %41.1 = LdFun              !v    @, <env 0x5558d398c378>
  fs              %41.2 = FrameState         R     0x5558d6d4d800+132: [%41.1], env=e35.14, next=%41.0
  void                    Deopt              !v    %41.2, DeadCall@0x5558d3ae1420[Call#1], %41.1   !
BB55   <- [49]
  val?^ | miss    %55.0 = LdVar              eR    c, e1.2
  lgl$#-          %55.1 = Identical                <blt c>, %55.0   <true>
  void                    Assume             D     %55.1, %47.4 (DeadBranchReached@0x5558d575ed30[Test#0])
  val?^ | miss    %55.3 = LdVar              eR    thisClass, e1.2
  lgl$#-          %55.4 = IsType                   %55.3 isA val?~+ | miss
  void                    Assume             D     %55.4, %47.4 (Typecheck@0x5558d575ed30[Type#28])
  val?~+ | miss   %55.6 = CastType           d     dn %55.3
  val?+           %55.7 = Force!<value>            %55.6,    <str$+>
  val?^ | miss    %55.8 = LdVar              eR    Class, e1.2
  val?            %55.9 = Force!<wrapped>    !v    %55.8, e1.2   <str$->
  val?            %55.10 = NamedCall          !v    <blt c>(from=%55.7, to=%55.9) e1.2   <str+>
  void                    StVar              lW    sig, %55.10, e1.2
  (cls|spec|blt)  %55.12 = LdFun              !v    selectMethod, <0x5558d8153998>, e1.2
  prom-           %55.13 = MkArg                    unboundValue, as[0x5558d7cd43f0]_p19, e1.2
  prom-           %55.14 = MkArg                    unboundValue, as[0x5558d7cd43f0]_p20, e1.2
  prom-           %55.15 = MkArg                    unboundValue, as[0x5558d7cd43f0]_p21, e1.2
  val?            %55.16 = NamedCall          !v    %55.12("coerce", %55.13, optional=true, useInherited=false, fdef=%55.14, mlist=%55.15) e1.2   <nil->
  lgl$-           %55.17 = Is                       %55.16, NULL
  void                    StVar              lW    asMethod, %55.16, e1.2
  val             %55.19 = ChkMissing         e     %55.16
  lgl$#-          %55.20 = CheckTrueFalse     e     %55.17
  void                    Branch                   %55.20 -> BB57 (if true) | BB56 (if false)
BB50   <- [49]
  goto BB51
BB44   <- [42]
  val?^ | miss    %44.0 = LdVar              eR    is.environment, e35.14
  lgl$#-          %44.1 = Identical                <blt is.environment>, %44.0   <true>
  void                    Assume             D     %44.1, %42.7 (DeadBranchReached@0x5558d3ae1420[Test#5])
  val             %44.3 = ChkMissing         e     %42.5
  lgl$#-          %44.4 = CallSafeBuiltin    wed   is.environment(%42.5) 
  void                    Branch                   %44.4 -> BB104 (if true) | BB45 (if false)
BB43   <- [42]
  fs              %43.0 = FrameState         R     0x5558d6b0a7c0+403: [], env=e1.2
  fs              %43.1 = FrameState         R     0x5558d6d4d800+703: [], env=e35.14, next=%43.0
  void                    Deopt              !v    %43.1   !
BB57   <- [55]
  void                    StVar              lW    canCache, true, e1.2
  void                    StVar              lW    inherited, false, e1.2
  cp              %57.2 = Checkpoint                -> BB59 (default) | BB58 (if assume failed)
BB56   <- [55]
  goto BB51
BB51   <- [50, 56, 76]
  val?^ | miss    %51.0 = LdVar              eR    strict, e1.2
  void                    Visible            v     
  val?            %51.2 = Force!<lazy>       !     %51.0, e1.2   <lgl$->
  lgl$#-          %51.3 = CheckTrueFalse     we    %51.2
  void                    Branch                   %51.3 -> BB53 (if true) | BB52 (if false)
BB104   <- [44]
  goto BB46
BB45   <- [44]
  goto BB46
BB59   <- [57]
  val?^ | miss    %59.0 = LdVar              eR    is, e1.2
  lgl$#-          %59.1 = Identical                %59.0, function(object, class2) <(rir::DispatchTable*|...
  void                    Assume             D     %59.1, %57.2 (CallTarget@0x5558d575ed30[Call#12])
  prom-           %59.3 = MkArg                    unboundValue, as[0x5558d7cd43f0]_p23, e1.2
  prom-           %59.4 = MkArg                    unboundValue, as[0x5558d7cd43f0]_p24, e1.2
  val?            %59.5 = Call               !v    function(object, class2) <(rir::DispatchTable*|...(%59.3, %59.4) e1.2   <lgl$->
  lgl$#-          %59.6 = IsType                   %59.5 isA lgl$-
  cp              %59.7 = Checkpoint                -> BB61 (default) | BB60 (if assume failed)
BB58   <- [57]
  fs              %58.0 = FrameState         R     0x5558d6b0a7c0+742: [], env=e1.2
  void                    Deopt              !v    %58.0   !
BB53   <- [51]
  (cls|spec|blt)  %53.0 = LdFun              !     asMethod, e1.2
  prom-           %53.1 = MkArg                    unboundValue, as[0x5558d7cd43f0]_p18, e1.2
  val?            %53.2 = Call               !     %53.0(%53.1) e1.2   <(str|cls)>
  goto BB54
BB52   <- [51]
  (cls|spec|blt)  %52.0 = LdFun              !v    asMethod, e1.2
  fs              %52.1 = FrameState         R     0x5558d6b0a7c0+1947: [%52.0], env=e1.2
  void                    Deopt              !v    %52.1, DeadCall@0x5558d575ed30[Call#38], %52.0   !
BB46   <- [104, 45]
  val?            %46.0 = Phi                      %42.5:BB45, nil:BB104
  goto BB47
BB61   <- [59]
  void                    Assume             D     %59.6, %59.7 (Typecheck@0x5558d575ed30[Type#39])
  lgl$-           %61.1 = CastType           d     dn %59.5
  lgl$#-          %61.2 = CheckTrueFalse     e     %61.1
  void                    Branch                   %61.2 -> BB82 (if true) | BB62 (if false)
BB60   <- [59]
  fs              %60.0 = FrameState         R     0x5558d6b0a7c0+779: [%59.5], env=e1.2
  void                    Deopt              !v    %60.0   !
BB82   <- [61]
  val?^ | miss    %82.0 = LdVar              eR    getClassDef, e1.2
  lgl$#-          %82.1 = Identical                %82.0, function(Class, where=topenv(parent.frame()), |...
  void                    Assume             D     %82.1, %59.7 (CallTarget@0x5558d575ed30[Call#13])
  prom-           %82.3 = MkArg                    unboundValue, as[0x5558d7cd43f0]_p33, e1.2
  prom-           %82.4 = MkArg                    unboundValue, as[0x5558d7cd43f0]_p34, e1.2
  val?            %82.5 = StaticCall         !v    getClassDef[0x5558d9065f10](%82.3, %82.4) e1.2   <other>
  void                    StVar              lW    ClassDef, %82.5, e1.2
  cp              %82.7 = Checkpoint                -> BB84 (default) | BB83 (if assume failed)
BB62   <- [61]
  goto BB63
BB84   <- [82]
  val?^ | miss    %84.0 = LdVar              eR    isFALSE, e1.2
  lgl$#-          %84.1 = Identical                %84.0, function(x) <(rir::DispatchTable*)0x5558d63992|...
  void                    Assume             D     %84.1, %82.7 (CallTarget@0x5558d575ed30[Call#14])
  val?^ | miss    %84.3 = LdVar              eR    ext, e1.2
  val?            %84.4 = Force!<lazy>       !v    %84.3, e1.2   <other>
  prom-           %84.5 = MkArg                    %84.4, as[0x5558d7cd43f0]_p35 (!refl), 
  val?            %84.6 = StaticCall         !v    isFALSE[0x5558d7ac9550](%84.5) e1.2   <lgl$->
  lgl$#-          %84.7 = IsType                   %84.6 isA lgl$-
  cp              %84.8 = Checkpoint                -> BB86 (default) | BB85 (if assume failed)
BB83   <- [82]
  fs              %83.0 = FrameState         R     0x5558d6b0a7c0+846: [], env=e1.2
  void                    Deopt              !v    %83.0   !
BB63   <- [62, 98]
  cp              %63.0 = Checkpoint                -> BB65 (default) | BB64 (if assume failed)
BB86   <- [84]
  void                    Assume             D     %84.7, %84.8 (Typecheck@0x5558d575ed30[Type#44])
  lgl$-           %86.1 = CastType           d     dn %84.6
  lgl$#-          %86.2 = CheckTrueFalse     e     %86.1
  void                    Branch                   %86.2 -> BB103 (if true) | BB87 (if false)
BB85   <- [84]
  fs              %85.0 = FrameState         R     0x5558d6b0a7c0+878: [%84.6], env=e1.2
  void                    Deopt              !v    %85.0   !
BB65   <- [63]
  val?^ | miss    %65.0 = LdVar              eR    asMethod, e1.2
  lgl$#-          %65.1 = IsType                   %65.0 isA val?~- | miss
  void                    Assume             D     %65.1, %63.0 (Typecheck@0x5558d575ed30[Type#74])
  val?~- | miss   %65.3 = CastType           d     dn %65.0
  val?-           %65.4 = Force!<value>            %65.3,    <cls->
  lgl$-           %65.5 = Is                       %65.4, NULL
  lgl$-           %65.6 = AsLogical                %65.5
  lgl$#-          %65.7 = Identical                %65.6, false
  void                    Branch                   %65.7 -> BB67 (if true) | BB66 (if false)
BB64   <- [63]
  fs              %64.0 = FrameState         R     0x5558d6b0a7c0+1324: [], env=e1.2
  void                    Deopt              !v    %64.0   !
BB103   <- [86]
  (cls|spec|blt)  %103.0 = LdFun              !v    stop, e1.2
  fs              %103.1 = FrameState         R     0x5558d6b0a7c0+1283: [%103.0], env=e1.2
  void                    Deopt              !v    %103.1, DeadCall@0x5558d575ed30[Call#24], %103.0   !
BB87   <- [86]
  val?^ | miss    %87.0 = LdVar              eR    isTRUE, e1.2
  lgl$#-          %87.1 = Identical                %87.0, function(x) <(rir::DispatchTable*)0x5558d52435|...
  void                    Assume             D     %87.1, %84.8 (CallTarget@0x5558d575ed30[Call#15])
  val?^ | miss    %87.3 = LdVar              eR    ext, e1.2
  val?            %87.4 = Force!<wrapped>    !v    %87.3, e1.2   <other>
  prom-           %87.5 = MkArg                    %87.4, as[0x5558d7cd43f0]_p36 (!refl), 
  val?            %87.6 = StaticCall         !v    isTRUE[0x5558d7cadfa0](%87.5) e1.2   <lgl$->
  lgl$#-          %87.7 = IsType                   %87.6 isA lgl$-
  cp              %87.8 = Checkpoint                -> BB89 (default) | BB88 (if assume failed)
BB67   <- [65]
  lgl$#-          %67.0 = CheckTrueFalse     e     %65.6
  void                    Branch                   %67.0 -> BB81 (if true) | BB68 (if false)
BB66   <- [65]
  (cls|spec|blt)  %66.0 = LdFun              !v    extends, e1.2
  fs              %66.1 = FrameState         R     0x5558d6b0a7c0+1355: [%65.6, %66.0], env=e1.2
  void                    Deopt              !v    %66.1, DeadCall@0x5558d575ed30[Call#27], %66.0   !
BB89   <- [87]
  void                    Assume             D     %87.7, %87.8 (Typecheck@0x5558d575ed30[Type#46])
  lgl$-           %89.1 = CastType           d     dn %87.6
  lgl$#-          %89.2 = CheckTrueFalse     e     %89.1
  void                    Branch                   %89.2 -> BB102 (if true) | BB90 (if false)
BB88   <- [87]
  fs              %88.0 = FrameState         R     0x5558d6b0a7c0+921: [%87.6], env=e1.2
  void                    Deopt              !v    %88.0   !
BB81   <- [67]
  (cls|spec|blt)  %81.0 = LdFun              !v    getClassDef, e1.2
  fs              %81.1 = FrameState         R     0x5558d6b0a7c0+1410: [%81.0], env=e1.2
  void                    Deopt              !v    %81.1, DeadCall@0x5558d575ed30[Call#28], %81.0   !
BB68   <- [67]
  lgl$#-          %68.0 = CheckTrueFalse     e     %65.5
  void                    Branch                   %68.0 -> BB80 (if true) | BB69 (if false)
BB102   <- [89]
  (cls|spec|blt)  %102.0 = LdFun              !v    .makeAsMethod, e1.2
  fs              %102.1 = FrameState         R     0x5558d6b0a7c0+1212: [%102.0], env=e1.2
  void                    Deopt              !v    %102.1, DeadCall@0x5558d575ed30[Call#23], %102.0   !
BB90   <- [89]
  (cls|spec|blt)  %90.0 = LdFun              !v    @, <0x5558d3384bd8>, e1.2
  prom-           %90.1 = MkArg                    unboundValue, as[0x5558d7cd43f0]_p37, e1.2
  prom-           %90.2 = MkArg                    unboundValue, as[0x5558d7cd43f0]_p38, e1.2
  val?            %90.3 = Call               !v    %90.0(%90.1, %90.2) e1.2   <cls->
  void                    StVar              lW    test, %90.3, e1.2
  cp              %90.5 = Checkpoint                -> BB92 (default) | BB91 (if assume failed)
BB80   <- [68]
  (cls|spec|blt)  %80.0 = LdFun              !v    selectMethod, e1.2
  fs              %80.1 = FrameState         R     0x5558d6b0a7c0+1643: [%80.0], env=e1.2
  void                    Deopt              !v    %80.1, DeadCall@0x5558d575ed30[Call#31], %80.0   !
BB69   <- [68]
  val?^ | miss    %69.0 = LdVar              eR    canCache, e1.2
  lgl$#-          %69.1 = IsType                   %69.0 isA lgl$-
  void                    Assume             D     %69.1, %63.0 (Typecheck@0x5558d575ed30[Type#87])
  lgl$-           %69.3 = CastType           d     dn %69.0
  lgl$#-          %69.4 = CheckTrueFalse     e     %69.3
  void                    Branch                   %69.4 -> BB79 (if true) | BB70 (if false)
BB92   <- [90]
  val?^ | miss    %92.0 = LdVar              eR    .makeAsMethod, e1.2
  lgl$#-          %92.1 = Identical                %92.0, function(expr, simple, Class, ClassDef, where)|...
  void                    Assume             D     %92.1, %90.5 (CallTarget@0x5558d575ed30[Call#17])
  prom-           %92.3 = MkArg                    unboundValue, as[0x5558d7cd43f0]_p39, e1.2
  prom-           %92.4 = MkArg                    unboundValue, as[0x5558d7cd43f0]_p42, e1.2
  prom-           %92.5 = MkArg                    unboundValue, as[0x5558d7cd43f0]_p45, e1.2
  prom-           %92.6 = MkArg                    unboundValue, as[0x5558d7cd43f0]_p46, e1.2
  prom-           %92.7 = MkArg                    unboundValue, as[0x5558d7cd43f0]_p47, e1.2
  val?            %92.8 = StaticCall         !v    .makeAsMethod[0x5558daa40100](%92.3, %92.4, %92.5, %92.6, %92.7) e1.2   <cls->
  void                    StVar              lW    asMethod, %92.8, e1.2
  cp              %92.10 = Checkpoint                -> BB94 (default) | BB93 (if assume failed)
BB91   <- [90]
  fs              %91.0 = FrameState         R     0x5558d6b0a7c0+983: [], env=e1.2
  void                    Deopt              !v    %91.0   !
BB79   <- [69]
  val?^ | miss    %79.0 = LdVar              eR    .asCoerceMethod, e1.2
  lgl$#-          %79.1 = Identical                %79.0, function(def, thisClass, ClassDef, replace, wh|...
  void                    Assume             D     %79.1, %63.0 (CallTarget@0x5558d575ed30[Call#30])
  prom-           %79.3 = MkArg                    unboundValue, as[0x5558d7cd43f0]_p29, e1.2
  prom-           %79.4 = MkArg                    unboundValue, as[0x5558d7cd43f0]_p30, e1.2
  prom-           %79.5 = MkArg                    unboundValue, as[0x5558d7cd43f0]_p31, e1.2
  prom-           %79.6 = MkArg                    unboundValue, as[0x5558d7cd43f0]_p32, e1.2
  val?            %79.7 = StaticCall         !v    .asCoerceMethod[0x5558d8644400](%79.3, %79.4, %79.5, false, %79.6) e1.2   <cls>
  void                    StVar              lW    asMethod, %79.7, e1.2
  goto BB71
BB70   <- [69]
  goto BB71
BB94   <- [92]
  val?^ | miss    %94.0 = LdVar              eR    is.function, e1.2
  lgl$#-          %94.1 = Identical                <blt is.function>, %94.0   <true>
  void                    Assume             D     %94.1, %92.10 (DeadBranchReached@0x5558d575ed30[Test#1])
  val?^ | miss    %94.3 = LdVar              eR    test, e1.2
  lgl$#-          %94.4 = IsType                   %94.3 isA val?~- | miss
  void                    Assume             D     %94.4, %92.10 (Typecheck@0x5558d575ed30[Type#61])
  val?~- | miss   %94.6 = CastType           d     dn %94.3
  val?-           %94.7 = Force!<value>            %94.6,    <cls->
  lgl$#-          %94.8 = CallSafeBuiltin    wed   is.function(%94.7)    <lgl$->
  cp              %94.9 = Checkpoint                -> BB96 (default) | BB95 (if assume failed)
BB93   <- [92]
  fs              %93.0 = FrameState         R     0x5558d6b0a7c0+1049: [], env=e1.2
  void                    Deopt              !v    %93.0   !
BB71   <- [70, 79]
  val?^ | miss    %71.0 = LdVar              eR    asMethod, e1.2
  val?            %71.1 = Force!<value>      !v    %71.0, e1.2   <cls>
  lgl$-           %71.2 = Is                       %71.1, NULL
  cp              %71.3 = Checkpoint                -> BB73 (default) | BB72 (if assume failed)
BB96   <- [94]
  lgl$#-          %96.0 = Not                d     %94.8, elided
  void                    Branch                   %94.8 -> BB99 (if true) | BB97 (if false)
BB95   <- [94]
  fs              %95.0 = FrameState         R     0x5558d6b0a7c0+1140: [%94.8], env=e1.2
  void                    Deopt              !v    %95.0   !
BB73   <- [71]
  lgl$#-          %73.0 = CheckTrueFalse     e     %71.2
  void                    Branch                   %73.0 -> BB78 (if true) | BB74 (if false)
BB72   <- [71]
  fs              %72.0 = FrameState         R     0x5558d6b0a7c0+1757: [%71.1], env=e1.2
  void                    Deopt              !v    %72.0   !
BB99   <- [96]
  val?^ | miss    %99.0 = LdVar              eR    isTRUE, e1.2
  lgl$#-          %99.1 = Identical                %99.0, function(x) <(rir::DispatchTable*)0x5558d52435|...
  void                    Assume             D     %99.1, %94.9 (CallTarget@0x5558d575ed30[Call#21])
  prom-           %99.3 = MkArg                    unboundValue, as[0x5558d7cd43f0]_p48, e1.2
  val?            %99.4 = StaticCall         !v    isTRUE[0x5558d77bb1e0](%99.3) e1.2   <lgl$->
  lgl$#-          %99.5 = IsType                   %99.4 isA lgl$-
  cp              %99.6 = Checkpoint                -> BB101 (default) | BB100 (if assume failed)
BB97   <- [96]
  goto BB98
BB78   <- [73]
  (cls|spec|blt)  %78.0 = LdFun              !v    stop, e1.2
  fs              %78.1 = FrameState         R     0x5558d6b0a7c0+1881: [%78.0], env=e1.2
  void                    Deopt              !v    %78.1, DeadCall@0x5558d575ed30[Call#34], %78.0   !
BB74   <- [73]
  val?^ | miss    %74.0 = LdVar              eR    canCache, e1.2
  lgl$#-          %74.1 = IsType                   %74.0 isA lgl$-
  void                    Assume             D     %74.1, %71.3 (Typecheck@0x5558d575ed30[Type#99])
  lgl$-           %74.3 = CastType           d     dn %74.0
  lgl$#-          %74.4 = CheckTrueFalse     e     %74.3
  void                    Branch                   %74.4 -> BB77 (if true) | BB75 (if false)
BB101   <- [99]
  void                    Assume             D     %99.5, %99.6 (Typecheck@0x5558d575ed30[Type#65])
  lgl$-           %101.1 = CastType           d     dn %99.4
  lgl$-           %101.2 = AsLogical                %101.1
  lgl$-           %101.3 = LOr                      %96.0, %101.2
  goto BB98
BB100   <- [99]
  fs              %100.0 = FrameState         R     0x5558d6b0a7c0+1186: [%96.0, %99.4], env=e1.2
  void                    Deopt              !v    %100.0   !
BB98   <- [101, 97]
  lgl$-           %98.0 = Phi                      %101.3:BB101, %96.0:BB97
  void                    StVar              lW    canCache, %98.0, e1.2
  goto BB63
BB77   <- [74]
  val?^ | miss    %77.0 = LdVar              eR    cacheMethod, e1.2
  lgl$#-          %77.1 = Identical                %77.0, function(f, sig, def, args=names(sig), fdef, i|...
  void                    Assume             D     %77.1, %71.3 (CallTarget@0x5558d575ed30[Call#33])
  prom-           %77.3 = MkArg                    unboundValue, as[0x5558d7cd43f0]_p25, e1.2
  prom-           %77.4 = MkArg                    unboundValue, as[0x5558d7cd43f0]_p26, e1.2
  prom-           %77.5 = MkArg                    unboundValue, as[0x5558d7cd43f0]_p27, e1.2
  prom-           %77.6 = MkArg                    unboundValue, as[0x5558d7cd43f0]_p28, e1.2
  val?            %77.7 = StaticCall         !v    cacheMethod[0x5558d9b1ceb0]("coerce", %77.3, %77.4, missingArg, %77.5, %77.6) { 0 1 2 4n 5n } e1.2
  goto BB76
BB75   <- [74]
  goto BB76
BB76   <- [75, 77]
  goto BB51
Prom 1:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     possibleExtends, <0x5558d8177040>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, as[0x5558d7cd43f0]_p2, e1.0
  prom-           %1.3  = MkArg                    unboundValue, as[0x5558d7cd43f0]_p3, e1.0
  val?            %1.4  = Call               !     %1.1(%1.2, %1.3) e1.0   <other>
  void                    Return             l     %1.4
Prom 2:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    thisClass, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$+>
  void                    Return             l     %1.3
Prom 3:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    Class, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 4:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    object, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <(str|cls)>
  void                    Return             l     %1.3
Prom 5:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    thisClass, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$+>
  void                    Return             l     %1.3
Prom 6:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    Class, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 7:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    Class, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 8:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    thisClass, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$+>
  void                    Return             l     %1.3
Prom 9:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    where, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <env->
  void                    Return             l     %1.3
Prom 10:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    coerceFun, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 11:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     environment, <0x5558d372bb68>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, as[0x5558d7cd43f0]_p12, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <env->
  void                    Return             l     %1.3
Prom 12:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    coerceFun, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <cls>
  void                    Return             l     %1.3
Prom 13:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    thisClass, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$+>
  void                    Return             l     %1.3
Prom 14:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    Class, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 15:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    coerceFun, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 16:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    coerceMethods, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <env->
  void                    Return             l     %1.3
Prom 17:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    where, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 18:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    object, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <(str|cls)>
  void                    Return             l     %1.3
Prom 19:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    sig, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str+>
  void                    Return             l     %1.3
Prom 20:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    coerceFun, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <cls>
  void                    Return             l     %1.3
Prom 21:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     getMethodsForDispatch, <0x5558d59e9538>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, as[0x5558d7cd43f0]_p22, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <env->
  void                    Return             l     %1.3
Prom 22:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    coerceFun, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <cls>
  void                    Return             l     %1.3
Prom 23:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    object, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <cls>
  void                    Return             l     %1.3
Prom 24:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    Class, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 25:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    sig, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str+>
  void                    Return             l     %1.3
Prom 26:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    asMethod, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <cls>
  void                    Return             l     %1.3
Prom 27:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    coerceFun, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <cls>
  void                    Return             l     %1.3
Prom 28:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    inherited, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <lgl$->
  void                    Return             l     %1.3
Prom 29:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    asMethod, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <cls->
  void                    Return             l     %1.3
Prom 30:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    thisClass, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$+>
  void                    Return             l     %1.3
Prom 31:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    ClassDef, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <other>
  void                    Return             l     %1.3
Prom 32:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    where, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 33:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    Class, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 34:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    where, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 35:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    ext, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <other>
  void                    Return             l     %1.3
Prom 36:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    ext, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <other>
  void                    Return             l     %1.3
Prom 37:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    ext, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 38:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    test, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 39:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     @, <0x5558d3384bd8>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, as[0x5558d7cd43f0]_p40, e1.0
  prom-           %1.3  = MkArg                    unboundValue, as[0x5558d7cd43f0]_p41, e1.0
  val?            %1.4  = Call               !     %1.1(%1.2, %1.3) e1.0   <cls->
  void                    Return             l     %1.4
Prom 40:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    ext, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 41:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    coerce, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 42:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     @, <0x5558d3384bd8>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, as[0x5558d7cd43f0]_p43, e1.0
  prom-           %1.3  = MkArg                    unboundValue, as[0x5558d7cd43f0]_p44, e1.0
  val?            %1.4  = Call               !     %1.1(%1.2, %1.3) e1.0   <lgl$->
  void                    Return             l     %1.4
Prom 43:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    ext, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 44:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    simple, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 45:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    Class, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 46:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    ClassDef, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 47:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    where, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 48:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     body, <0x5558d663f9c0>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, as[0x5558d7cd43f0]_p49, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <lgl$->
  void                    Return             l     %1.3
Prom 49:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    test, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <cls->
  void                    Return             l     %1.3
Prom 50:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     c, <0x5558d3385940>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, as[0x5558d7cd43f0]_p51, e1.0
  prom-           %1.3  = MkArg                    unboundValue, as[0x5558d7cd43f0]_p52, e1.0
  val?            %1.4  = Call               !     %1.1(%1.2, %1.3) e1.0   <str->
  void                    Return             l     %1.4
Prom 51:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    from, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <str$+>
  void                    Return             l     %1.3
Prom 52:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    to, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 53:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    methods, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <env->
  void                    Return             l     %1.3

│ as[0x5558d7cd43f0]                                                           │
└──────────────────────────────────────────────────────────────────────────────┘
