
┌──────────────────────────────────────────────────────────────────────────────┐
│ .classEnv[0x5558d5d1d710]                                                    │
│ Context: CorrOrd,!TMany,Argmatch;Eager1,Eager2,NonRefl1,NonRefl2,!Obj2       │
│ Properties:                                                                  │
├────── PIR Version After Optimizations
.classEnv[0x5558d5d1d710]
BB0
  goto BB1
BB1   <- [0]
  val?~+          %1.0  = LdArg                    2
  val?~ | miss    %1.1  = LdArg                    1
  val?^ | miss    %1.2  = LdArg                    0
  lgl$#-          %1.3  = Identical                %1.1, missingArg
  env             e1.4  = MkEnv              l     Class=%1.2, default=%1.1, mustFind=%1.0, parent=<env 0x5558d398c378>, context 1
  void                    Branch                   %1.3 -> BB2 (if true) | BB30 (if false)
BB2   <- [1]
  prom-           %2.0  = MkArg                    unboundValue, .classEnv[0x5558d5d1d710]_p0, e1.4
  val?^ | miss    %2.1  = CastType                 up %2.0
  void                    StArg              lW    default, %2.1, e1.4
  goto BB3
BB30   <- [1]
  goto BB3
BB3   <- [2, 30]
  cp              %3.0  = Checkpoint                -> BB5 (default) | BB4 (if assume failed)
BB5   <- [3]
  val?^ | miss    %5.0  = LdVar              eR    is.character, <env 0x5558d398c378>
  lgl$#-          %5.1  = Identical                <blt is.character>, %5.0   <true>
  void                    Assume             D     %5.1, %3.0 (DeadBranchReached@0x5558d5ca9bc0[Test#0])
  val?^           %5.3  = ChkMissing         e     %1.2
  val?            %5.4  = Force!<lazy>       !v    %5.3, e1.4   <str$+>
  lgl$#-          %5.5  = IsType                   %5.4 isA val?+
  cp              %5.6  = Checkpoint                -> BB7 (default) | BB6 (if assume failed)
BB4   <- [3]
  fs              %4.0  = FrameState         R     0x5558d711eee0+0: [], env=e1.4
  void                    Deopt              !v    %4.0
BB7   <- [5]
  void                    Assume             D     %5.5, %5.6 (Typecheck@0x5558d5ca9bc0[Type#2])
  val?+           %7.1  = CastType           d     dn %5.4   <str$+>
  lgl$#-          %7.2  = CallSafeBuiltin    wed   is.character(%7.1)    <lgl$->
  cp              %7.3  = Checkpoint                -> BB9 (default) | BB8 (if assume failed)
BB6   <- [5]
  fs              %6.0  = FrameState         R     0x5558d711eee0+69: [<blt is.character>, %5.4], env=e1.4
  void                    Deopt              !v    %6.0   !
BB9   <- [7]
  void                    Branch                   %7.2 -> BB11 (if true) | BB10 (if false)
BB8   <- [7]
  fs              %8.0  = FrameState         R     0x5558d711eee0+91: [%7.2], env=e1.4
  void                    Deopt              !v    %8.0   !
BB11   <- [9]
  val?^ | miss    %11.0 = LdVar              eR    packageSlot, e1.4
  lgl$#-          %11.1 = Identical                %11.0, function(object) <(rir::DispatchTable*)0x5558d|...
  void                    Assume             D     %11.1, %7.3 (CallTarget@0x5558d5ca9bc0[Call#3])
  prom-           %11.3 = MkArg                    unboundValue, .classEnv[0x5558d5d1d710]_p2, e1.4
  ct              %11.4 = PushContext        lCL   %11.3, packageSlot(Class), function(object) <(rir::DispatchTable*)0x5558d|..., e1.4
  val?^           %11.5 = CastType                 up %11.3
  val?^ | miss    %11.6 = LdVar              eR    attr, <env 0x5558d398c378>
  lgl$#-          %11.7 = Identical                <blt attr>, %11.6   <true>
  cp              %11.8 = Checkpoint                -> BB13 (default) | BB12 (if assume failed)
BB10   <- [9]
  (cls|spec|blt)  %10.0 = LdFun              !v    @, e1.4
  fs              %10.1 = FrameState         R     0x5558d711eee0+107: [%10.0], env=e1.4
  void                    Deopt              !v    %10.1, DeadCall@0x5558d5ca9bc0[Call#2], %10.0   !
BB13   <- [11]
  void                    Assume             D     %11.7, %11.8 (DeadBranchReached@0x5558d63db7c8[Test#0])
  env             e13.1 = MkEnv              l     object=%11.5, parent=<env 0x5558d398c378>, context 1
  val?            %13.2 = Force!<lazy>       !vL   %11.5, e13.1   <(str|other)>
  val?            %13.3 = CallBuiltin        !v    attr(%13.2, "package") e13.1   <(nil|str)->
  val?            %13.4 = PopContext         C     %13.3, %11.4   <(nil|str)->
  lgl$-           %13.5 = Is                       %13.4, NULL
  void                    StVar              lW    package, %13.4, e1.4
  cp              %13.7 = Checkpoint                -> BB15 (default) | BB14 (if assume failed)
BB12   <- [11]
  fs              %12.0 = FrameState         R     0x5558d711eee0+181: [], env=e1.4
  env             e12.1 = (MkEnv)            l     object=%11.5, parent=<env 0x5558d398c378>, context 1
  fs              %12.2 = FrameState         R     0x5558d582f630+17: [<blt attr>, %11.7], env=e12.1, next=%12.0
  void                    Deopt              !v    %12.2   !
BB15   <- [13]
  val             %15.0 = ChkMissing         e     %13.4
  void                    Visible            v     
  lgl$#-          %15.2 = CheckTrueFalse     e     %13.5
  void                    Branch                   %15.2 -> BB18 (if true) | BB16 (if false)
BB14   <- [13]
  fs              %14.0 = FrameState         R     0x5558d711eee0+195: [], env=e1.4
  void                    Deopt              !v    %14.0   !
BB18   <- [15]
  val?^ | miss    %18.0 = LdVar              eR    default, e1.4
  val?            %18.1 = Force!<lazy>       !v    %18.0, e1.4   <env->
  void                    StVar              lW    value, %18.1, e1.4
  cp              %18.3 = Checkpoint                -> BB20 (default) | BB19 (if assume failed)
BB16   <- [15]
  val?^ | miss    %16.0 = LdVar              eR    .requirePackage, e1.4
  lgl$#-          %16.1 = Identical                %16.0, function(package, mustFind=TRUE) <(rir::Dispat|...
  void                    Assume             D     %16.1, %13.7 (CallTarget@0x5558d5ca9bc0[Call#4])
  prom-           %16.3 = MkArg                    unboundValue, .classEnv[0x5558d5d1d710]_p3 (!refl), e1.4
  val?            %16.4 = StaticCall         !     .requirePackage[0x5558d6cd58d0](%16.3) e1.4   <env->
  goto BB17
BB20   <- [18]
  val?^ | miss    %20.0 = LdVar              eR    getClassDef, e1.4
  lgl$#-          %20.1 = Identical                %20.0, function(Class, where=topenv(parent.frame()), |...
  void                    Assume             D     %20.1, %18.3 (CallTarget@0x5558d5ca9bc0[Call#5])
  prom-           %20.3 = MkArg                    unboundValue, .classEnv[0x5558d5d1d710]_p4, e1.4
  prom-           %20.4 = MkArg                    unboundValue, .classEnv[0x5558d5d1d710]_p5, e1.4
  val?            %20.5 = StaticCall         !v    getClassDef[0x5558d783bad0](%20.3, %20.4, nil) e1.4   <other>
  lgl$-           %20.6 = Is                       %20.5, NULL
  lgl$-           %20.7 = AsLogical                %20.6
  lgl$#-          %20.8 = Identical                %20.7, false
  void                    StVar              lW    def, %20.5, e1.4
  val             %20.10 = ChkMissing         e     %20.5
  lgl$#-          %20.11 = CheckTrueFalse     e     %20.6
  void                    Branch                   %20.11 -> BB29 (if true) | BB21 (if false)
BB19   <- [18]
  fs              %19.0 = FrameState         R     0x5558d711eee0+285: [], env=e1.4
  void                    Deopt              !v    %19.0   !
BB17   <- [26, 16]
  val?            %17.0 = Phi                      %16.4:BB16, %26.5:BB26
  void                    Return             l     %17.0
BB29   <- [20]
  val?^ | miss    %29.0 = LdVar              eR    .GlobalEnv, e1.4
  val?            %29.1 = Force!             !v    %29.0, e1.4   <val?_>
  void                    StVar              lW    value, %29.1, e1.4
  (cls|spec|blt)  %29.3 = LdFun              !v    getClassDef, e1.4
  fs              %29.4 = FrameState         R     0x5558d711eee0+399: [%29.3], env=e1.4
  void                    Deopt              !v    %29.4, DeadCall@0x5558d5ca9bc0[Call#6], %29.3   !
BB21   <- [20]
  void                    Branch                   %20.8 -> BB28 (if true) | BB22 (if false)
BB28   <- [21]
  goto BB23
BB22   <- [21]
  val?^ | miss    %22.0 = LdVar              eR    mustFind, e1.4
  val?            %22.1 = Force!             !v    %22.0, e1.4   <val?_>
  lgl$-           %22.2 = AsLogical          e     %22.1
  lgl$-           %22.3 = LAnd                     %20.7, %22.2
  goto BB23
BB23   <- [28, 22]
  lgl$-           %23.0 = Phi                      %22.3:BB22, %20.7:BB28
  cp              %23.1 = Checkpoint                -> BB25 (default) | BB24 (if assume failed)
BB25   <- [23]
  lgl$#-          %25.0 = CheckTrueFalse     e     %23.0
  void                    Branch                   %25.0 -> BB27 (if true) | BB26 (if false)
BB24   <- [23]
  fs              %24.0 = FrameState         R     0x5558d711eee0+678: [%23.0], env=e1.4
  void                    Deopt              !v    %24.0   !
BB27   <- [25]
  (cls|spec|blt)  %27.0 = LdFun              !v    stop, e1.4
  fs              %27.1 = FrameState         R     0x5558d711eee0+694: [%27.0], env=e1.4
  void                    Deopt              !v    %27.1, DeadCall@0x5558d5ca9bc0[Call#10], %27.0   !
BB26   <- [25]
  val?^ | miss    %26.0 = LdVar              eR    value, e1.4
  lgl$#-          %26.1 = IsType                   %26.0 isA val?~- | miss
  void                    Assume             D     %26.1, %23.1 (Typecheck@0x5558d5ca9bc0[Type#34])
  val?~- | miss   %26.3 = CastType           d     dn %26.0
  void                    Visible            v     
  val?-           %26.5 = Force!<value>            %26.3,    <env->
  goto BB17
Prom 0:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     .requirePackage, <0x5558d3bb2ab0>, e1.0
  val?            %1.2  = Call               !     %1.1("methods") e1.0   <env->
  void                    Return             l     %1.2
Prom 2:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    Class, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <str$+>
  void                    Return             l     %1.3
Prom 3:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    package, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 4:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    Class, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 5:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    value, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3

│ .classEnv[0x5558d5d1d710]                                                    │
└──────────────────────────────────────────────────────────────────────────────┘
