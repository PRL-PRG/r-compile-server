
┌──────────────────────────────────────────────────────────────────────────────┐
│ .makeAsMethod[0x5558daa40100]                                                │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch                                      │
│ Properties:                                                                  │
├────── PIR Version After Optimizations
.makeAsMethod[0x5558daa40100]
BB0
  goto BB1
BB1   <- [0]
  val?^           %1.0  = LdArg                    4
  val?^           %1.1  = LdArg                    3
  val?^           %1.2  = LdArg                    2
  val?^           %1.3  = LdArg                    1
  val?^           %1.4  = LdArg                    0
  cp              %1.5  = Checkpoint                -> BB2 (default) | BB35 (if assume failed)
BB2   <- [1]
  val?^ | miss    %2.0  = LdVar              eR    is.function, <env 0x5558d398c378>
  lgl$#-          %2.1  = Identical                <blt is.function>, %2.0   <true>
  void                    Assume             D     %2.1, %1.5 (DeadBranchReached@0x5558d80b1620[Test#0])
  env             e2.3  = MkEnv              l     expr=%1.4, simple=%1.3, Class=%1.2, ClassDef=%1.1, where=%1.0, parent=<env 0x5558d398c378>, context 1
  val?            %2.4  = Force!<lazy>       !v    %1.4, e2.3   <cls->
  lgl$#-          %2.5  = IsType                   %2.4 isA val?-
  cp              %2.6  = Checkpoint                -> BB4 (default) | BB3 (if assume failed)
BB35   <- [1]
  env             e35.0 = (MkEnv)            l     expr=%1.4, simple=%1.3, Class=%1.2, ClassDef=%1.1, where=%1.0, parent=<env 0x5558d398c378>, context 1
  fs              %35.1 = FrameState         R     0x5558d685ffd0+0: [], env=e35.0
  void                    Deopt              !v    %35.1
BB4   <- [2]
  void                    Assume             D     %2.5, %2.6 (Typecheck@0x5558d80b1620[Type#1])
  val?-           %4.1  = CastType           d     dn %2.4   <cls->
  lgl$#-          %4.2  = CallSafeBuiltin    wed   is.function(%4.1)    <lgl$->
  cp              %4.3  = Checkpoint                -> BB6 (default) | BB5 (if assume failed)
BB3   <- [2]
  fs              %3.0  = FrameState         R     0x5558d685ffd0+69: [<blt is.function>, %2.4], env=e2.3
  void                    Deopt              !v    %3.0   !
BB6   <- [4]
  void                    Branch                   %4.2 -> BB21 (if true) | BB7 (if false)
BB5   <- [4]
  fs              %5.0  = FrameState         R     0x5558d685ffd0+91: [%4.2], env=e2.3
  void                    Deopt              !v    %5.0   !
BB21   <- [6]
  val?^ | miss    %21.0 = LdVar              eR    environment, e2.3
  lgl$#-          %21.1 = Identical                %21.0, function(fun=NULL) <(rir::DispatchTable*)0x555|...
  void                    Assume             D     %21.1, %4.3 (CallTarget@0x5558d80b1620[Call#1])
  val?^ | miss    %21.3 = LdVar              eR    expr, e2.3
  val?            %21.4 = Force!<wrapped>    !v    %21.3, e2.3   <cls->
  prom-           %21.5 = MkArg                    %21.4, .makeAsMethod[0x5558daa40100]_p7 (!refl), 
  val?            %21.6 = StaticCall         !v    environment[0x5558d7966b80](%21.5) e2.3   <env->
  void                    StVar              lW    where, %21.6, e2.3
  cp              %21.8 = Checkpoint                -> BB23 (default) | BB22 (if assume failed)
BB7   <- [6]
  goto BB8
BB23   <- [21]
  val?^ | miss    %23.0 = LdVar              eR    formalArgs, e2.3
  lgl$#-          %23.1 = Identical                %23.0, function(def) <(rir::DispatchTable*)0x5558d6b8|...
  void                    Assume             D     %23.1, %21.8 (CallTarget@0x5558d80b1620[Call#2])
  prom-           %23.3 = MkArg                    unboundValue, .makeAsMethod[0x5558daa40100]_p8, e2.3
  val?            %23.4 = StaticCall         !v    formalArgs[0x5558d97b5620](%23.3) e2.3   <str->
  void                    StVar              lW    args, %23.4, e2.3
  cp              %23.6 = Checkpoint                -> BB25 (default) | BB24 (if assume failed)
BB22   <- [21]
  fs              %22.0 = FrameState         R     0x5558d685ffd0+153: [], env=e2.3
  void                    Deopt              !v    %22.0   !
BB8   <- [7, 32]
  val?^ | miss    %8.0  = LdVar              eR    expr, e2.3
  val?            %8.1  = Force!<value>      !v    %8.0, e2.3   <code->
  void                    StVar              lW    value, %8.1, e2.3
  val?^ | miss    %8.3  = LdVar              eR    simple, e2.3
  val?            %8.4  = Force!<lazy>       !v    %8.3, e2.3   <lgl$->
  cp              %8.5  = Checkpoint                -> BB10 (default) | BB9 (if assume failed)
BB25   <- [23]
  val?^ | miss    %25.0 = LdVar              eR    identical, e2.3
  lgl$#-          %25.1 = Identical                %25.0, function(x, y, num.eq=TRUE, single.NA=TRUE, at|...
  void                    Assume             D     %25.1, %23.6 (CallTarget@0x5558d80b1620[Call#3])
  prom-           %25.3 = MkArg                    unboundValue, .makeAsMethod[0x5558daa40100]_p9 (!refl), e2.3
  ct              %25.4 = PushContext        lCL   %25.3, "from", identical(args, "from"), function(x, y, num.eq=TRUE, single.NA=TRUE, at|..., e2.3
  val?^           %25.5 = CastType                 up %25.3
  env             e25.6 = MkEnv              l     x=%25.5, y="from", num.eq(miss)=true, single.NA(miss)=true, attrib.as.set(miss)=true, ignore.bytecode(miss)=true, ignore.environment(miss)=false, ignore.srcref(miss)=true, parent=R_BaseNamespace, context 1
  val?            %25.7 = CallBuiltin        !v    identical(%23.4, "from", true, true, true, true, false, true) e25.6
  val?            %25.8 = PopContext         C     %25.7, %25.4   <lgl$->
  lgl$#-          %25.9 = IsType                   %25.8 isA lgl$-
  cp              %25.10 = Checkpoint                -> BB27 (default) | BB26 (if assume failed)
BB24   <- [23]
  fs              %24.0 = FrameState         R     0x5558d685ffd0+199: [], env=e2.3
  void                    Deopt              !v    %24.0   !
BB10   <- [8]
  lgl$-           %10.0 = AsLogical          e     %8.4
  lgl$#-          %10.1 = Identical                %10.0, false
  void                    Branch                   %10.1 -> BB20 (if true) | BB11 (if false)
BB9   <- [8]
  fs              %9.0  = FrameState         R     0x5558d685ffd0+382: [%8.4], env=e2.3
  void                    Deopt              !v    %9.0   !
BB27   <- [25]
  void                    Assume             D     %25.9, %25.10 (Typecheck@0x5558d80b1620[Type#8])
  lgl$-           %27.1 = CastType           d     dn %25.8
  lgl$-           %27.2 = Not                d     %27.1, elided
  lgl$#-          %27.3 = CheckTrueFalse     e     %27.2
  void                    Branch                   %27.3 -> BB34 (if true) | BB28 (if false)
BB26   <- [25]
  fs              %26.0 = FrameState         R     0x5558d685ffd0+236: [%25.8], env=e2.3
  void                    Deopt              !v    %26.0   !
BB20   <- [10]
  goto BB14
BB11   <- [10]
  val?^ | miss    %11.0 = LdVar              eR    identical, e2.3
  lgl$#-          %11.1 = Identical                %11.0, function(x, y, num.eq=TRUE, single.NA=TRUE, at|...
  void                    Assume             D     %11.1, %8.5 (CallTarget@0x5558d80b1620[Call#7])
  prom-           %11.3 = MkArg                    unboundValue, .makeAsMethod[0x5558daa40100]_p0, e2.3
  ct              %11.4 = PushContext        lCL   %11.3, from, identical(expr, quote(from)), function(x, y, num.eq=TRUE, single.NA=TRUE, at|..., e2.3
  val?^           %11.5 = CastType                 up %11.3
  env             e11.6 = MkEnv              l     x=%11.5, y=from, num.eq(miss)=true, single.NA(miss)=true, attrib.as.set(miss)=true, ignore.bytecode(miss)=true, ignore.environment(miss)=false, ignore.srcref(miss)=true, parent=R_BaseNamespace, context 1
  val?            %11.7 = Force!<lazy>       !vL   %11.5, e11.6   <val?>
  val?            %11.8 = CallBuiltin        !v    identical(%11.7, from, true, true, true, true, false, true) e11.6
  val?            %11.9 = PopContext         C     %11.8, %11.4   <lgl$->
  lgl$#-          %11.10 = IsType                   %11.9 isA lgl$-
  cp              %11.11 = Checkpoint                -> BB13 (default) | BB12 (if assume failed)
BB34   <- [27]
  val?^ | miss    %34.0 = LdVar              eR    .ChangeFormals, e2.3
  lgl$#-          %34.1 = Identical                %34.0, function(def, defForArgs, msg="<unidentified c|...
  void                    Assume             D     %34.1, %25.10 (CallTarget@0x5558d80b1620[Call#4])
  prom-           %34.3 = MkArg                    unboundValue, .makeAsMethod[0x5558daa40100]_p11, e2.3
  prom-           %34.4 = MkArg                    unboundValue, .makeAsMethod[0x5558daa40100]_p12, e2.3
  val?            %34.5 = Call               !v    function(def, defForArgs, msg="<unidentified c|...(%34.3, %34.4) e2.3   <cls->
  void                    StVar              lW    expr, %34.5, e2.3
  goto BB29
BB28   <- [27]
  goto BB29
BB14   <- [20, 13]
  lgl$-           %14.0 = Phi                      %13.4:BB13, %10.0:BB20
  lgl$#-          %14.1 = CheckTrueFalse     e     %14.0
  void                    Branch                   %14.1 -> BB19 (if true) | BB15 (if false)
BB13   <- [11]
  void                    Assume             D     %11.10, %11.11 (Typecheck@0x5558d80b1620[Type#21])
  lgl$-           %13.1 = CastType           d     dn %11.9
  lgl$-           %13.2 = Not                d     %13.1, elided
  lgl$-           %13.3 = AsLogical                %13.2
  lgl$-           %13.4 = LAnd                     %10.0, %13.3
  goto BB14
BB12   <- [11]
  fs              %12.0 = FrameState         R     0x5558d685ffd0+431: [%10.0, %11.9], env=e2.3
  void                    Deopt              !v    %12.0   !
BB29   <- [28, 34]
  cp              %29.0 = Checkpoint                -> BB31 (default) | BB30 (if assume failed)
BB19   <- [14]
  (cls|spec|blt)  %19.0 = LdFun              !v    substitute, <0x5558d3384468>, e2.3
  prom-           %19.1 = MkArg                    unboundValue, .makeAsMethod[0x5558daa40100]_p4, e2.3
  prom-           %19.2 = MkArg                    unboundValue, .makeAsMethod[0x5558daa40100]_p5, e2.3
  val?            %19.3 = Call               !v    %19.0(%19.1, %19.2) e2.3   <code->
  void                    StVar              lW    value, %19.3, e2.3
  goto BB16
BB15   <- [14]
  goto BB16
BB31   <- [29]
  val?^ | miss    %31.0 = LdVar              eR    body, e2.3
  lgl$#-          %31.1 = Identical                %31.0, function(fun=sys.function(sys.parent())) <(rir|...
  void                    Assume             D     %31.1, %29.0 (CallTarget@0x5558d80b1620[Call#6])
  val?^ | miss    %31.3 = LdVar              eR    expr, e2.3
  val?            %31.4 = Force!<value>      !v    %31.3, e2.3   <cls->
  lgl$#-          %31.5 = CallSafeBuiltin    wed   is.character(%31.4)    <lgl$->
  void                    Branch                   %31.5 -> BB33 (if true) | BB32 (if false)
BB30   <- [29]
  fs              %30.0 = FrameState         R     0x5558d685ffd0+304: [], env=e2.3
  void                    Deopt              !v    %30.0   !
BB16   <- [15, 19]
  val?^ | miss    %16.0 = LdVar              eR    .simpleExtCoerce, e2.3
  val?            %16.1 = Force!<wrapped>    !v    %16.0, e2.3   <cls->
  void                    StVar              lW    f, %16.1, e2.3
  cp              %16.3 = Checkpoint                -> BB18 (default) | BB17 (if assume failed)
BB33   <- [31]
  prom-           %33.0 = MkArg                    %31.4, .makeAsMethod[0x5558daa40100]_p10 (!refl), e2.3
  val?~           %33.1 = CastType                 up %33.0
  fs              %33.2 = FrameState         R     0x5558d685ffd0+336: [], env=e2.3
  env             e33.3 = (MkEnv)            l     fun=%33.1, parent=R_BaseNamespace, context 0
  env             e33.4 = MaterializeEnv           , e33.3   <@?>
  (cls|spec|blt)  %33.5 = LdFun              !v    get, e33.4
  fs              %33.6 = FrameState         R     0x5558d5d215d0+112: [%33.5], env=e33.4, next=%33.2
  void                    Deopt              !v    %33.6, DeadCall@0x5558d662bc68[Call#3], %33.5   !
BB32   <- [31]
  val+            %32.0 = CallSafeBuiltin    wed   body(%31.4)    <code->
  void                    StVar              lW    expr, %32.0, e2.3
  goto BB8
BB18   <- [16]
  val?^ | miss    %18.0 = LdVar              eR    value, e2.3
  lgl$#-          %18.1 = IsType                   %18.0 isA val?~- | miss
  void                    Assume             D     %18.1, %16.3 (Typecheck@0x5558d80b1620[Type#29])
  val?~- | miss   %18.3 = CastType           d     dn %18.0
  val?-           %18.4 = Force!<value>            %18.3,    <code->
  val?^ | miss    %18.5 = LdVar              eR    body<-, e2.3
  lgl$#-          %18.6 = Identical                %18.5, function(fun, envir=environment(fun), value) <|...
  void                    Assume             D     %18.6, %16.3 (CallTarget@0x5558d80b1620[Call#10])
  val             %18.8 = ChkMissing         e     %16.1
  lgl$#-          %18.9 = IsType                   %18.8 isA val?~- | miss
  void                    Assume             D     %18.9, %16.3 (Typecheck@0x5558d80b1620[Type#30])
  val-            %18.11 = CastType           d     dn %18.8   <cls->
  prom-           %18.12 = MkArg                    unboundValue, .makeAsMethod[0x5558daa40100]_p2, e2.3
  val?            %18.13 = StaticCall         !v    body<-[0x5558d9065cd0](%18.11, %18.12, %18.4) { 0 1n 2n } e2.3   <cls->
  void                    StVar              lW    f, %18.13, e2.3
  val             %18.15 = ChkMissing         e     %18.13
  void                    Visible            v     
  void                    Return             l     %18.13
BB17   <- [16]
  fs              %17.0 = FrameState         R     0x5558d685ffd0+524: [], env=e2.3
  void                    Deopt              !v    %17.0   !
Prom 0:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    expr, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <code->
  void                    Return             l     %1.3
Prom 2:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    where, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <env->
  void                    Return             l     %1.3
Prom 4:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    strict, e1.0
  val?            %1.2  = Force              !v    %1.1, e1.0   <val?_>
  lgl$#-          %1.3  = CheckTrueFalse     we    %1.2
  void                    Branch                   %1.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [1]
  val?^ | miss    %2.0  = LdVar              eR    EXPR, e1.0
  void                    Visible            v     
  val?            %2.2  = Force              !     %2.0, e1.0   <val?_>
  goto BB3
BB4   <- [1]
  val?^ | miss    %4.0  = LdVar              eR    from, e1.0
  void                    Visible            v     
  val?            %4.2  = Force              !     %4.0, e1.0   <val?_>
  goto BB3
BB3   <- [2, 4]
  val?            %3.0  = Phi                      %4.2:BB4, %2.2:BB2
  void                    Return             l     %3.0
Prom 5:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     list, e1.0
  prom-           %1.2  = MkArg                    unboundValue, .makeAsMethod[0x5558daa40100]_p6, e1.0
  val?            %1.3  = NamedCall          !     %1.1(EXPR=%1.2) e1.0   <val?_>
  void                    Return             l     %1.3
Prom 6:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    expr, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 7:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    expr, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <cls->
  void                    Return             l     %1.3
Prom 8:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    expr, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <cls->
  void                    Return             l     %1.3
Prom 9:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    args, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str->
  void                    Return             l     %1.3
Prom 10:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    expr, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <cls->
  void                    Return             l     %1.3
Prom 11:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    expr, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <cls->
  void                    Return             l     %1.3
Prom 12:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !v    length, <0x5558d3385a90>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, .makeAsMethod[0x5558daa40100]_p13, e1.0
  val?            %1.3  = Call               !v    %1.1(%1.2) e1.0   <int$->
  val?            %1.4  = Gt                 !v    %1.3, 1, e1.0   <lgl$->
  lgl$#-          %1.5  = CheckTrueFalse     we    %1.4
  void                    Branch                   %1.5 -> BB2 (if true) | BB4 (if false)
BB2   <- [1]
  val?^ | miss    %2.0  = LdVar              eR    .simpleExtCoerce, e1.0
  void                    Visible            v     
  val?            %2.2  = Force<value>       !     %2.0, e1.0   <cls->
  goto BB3
BB4   <- [1]
  val?^ | miss    %4.0  = LdVar              eR    .simpleIsCoerce, e1.0
  void                    Visible            v     
  val?            %4.2  = Force              !     %4.0, e1.0   <val?_>
  goto BB3
BB3   <- [2, 4]
  val?            %3.0  = Phi                      %4.2:BB4, %2.2:BB2
  void                    Return             l     %3.0
Prom 13:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    args, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str->
  void                    Return             l     %1.3

│ .makeAsMethod[0x5558daa40100]                                                │
└──────────────────────────────────────────────────────────────────────────────┘
