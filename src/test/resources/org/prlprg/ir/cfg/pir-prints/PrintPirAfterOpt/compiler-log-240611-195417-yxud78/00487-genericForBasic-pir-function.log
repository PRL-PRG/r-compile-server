
┌──────────────────────────────────────────────────────────────────────────────┐
│ genericForBasic[0x5558d6c70960]                                              │
│ Context: CorrOrd,!TMany,Argmatch;Eager1,Eager2,NonRefl1,NonRefl2,!Obj2       │
│ Properties:                                                                  │
├────── PIR Version After Optimizations
genericForBasic[0x5558d6c70960]
BB0
  goto BB1
BB1   <- [0]
  val?~+          %1.0  = LdArg                    2
  val?~ | miss    %1.1  = LdArg                    1
  val?^ | miss    %1.2  = LdArg                    0
  lgl$#-          %1.3  = Identical                %1.1, missingArg
  env             e1.4  = MkEnv              l     f=%1.2, where=%1.1, mustFind=%1.0, parent=<env 0x5558d398c378>, context 1
  void                    Branch                   %1.3 -> BB2 (if true) | BB17 (if false)
BB2   <- [1]
  prom-           %2.0  = MkArg                    unboundValue, genericForBasic[0x5558d6c70960]_p0, e1.4
  val?^ | miss    %2.1  = CastType                 up %2.0
  void                    StArg              lW    where, %2.1, e1.4
  goto BB3
BB17   <- [1]
  goto BB3
BB3   <- [2, 17]
  val?^ | miss    %3.0  = LdVar              eR    .BasicFunsList, <env 0x5558d398c378>
  val?            %3.1  = Force!<wrapped>    !v    %3.0, e1.4   <vec+>
  lgl$#-          %3.2  = IsType                   %3.1 isA val+   <true>
  cp              %3.3  = Checkpoint                -> BB5 (default) | BB4 (if assume failed)
BB5   <- [3]
  void                    Assume             D     %3.2, %3.3 (DeadBranchReached@0x5558d6d49570[Test#0])
  val?^ | miss    %5.1  = LdVar              eR    f, e1.4
  val?            %5.2  = Force!<lazy>       !v    %5.1, e1.4   <str$->
  lgl$#-          %5.3  = IsType                   %5.2 isA val?-
  cp              %5.4  = Checkpoint                -> BB7 (default) | BB6 (if assume failed)
BB4   <- [3]
  fs              %4.0  = FrameState         R     0x5558d6d64010+9: [%3.1], env=e1.4
  void                    Deopt              !v    %4.0   !
BB7   <- [5]
  lgl$#-          %7.0  = IsType                   %3.1 isA val?+
  void                    Assume             D     %7.0, %5.4 (Typecheck@0x5558d6d49570[Type#2])
  val?+           %7.2  = CastType           d     dn %3.1   <vec+>
  void                    Assume             D     %5.3, %5.4 (Typecheck@0x5558d6d49570[Type#4])
  val?-           %7.4  = CastType           d     dn %5.2   <str$->
  val?            %7.5  = Extract2_1D        wed   %7.2, %7.4, elided   <(nil|cls)>
  void                    StVar              lW    ans, %7.5, e1.4
  val?^ | miss    %7.7  = LdVar              eR    mustFind, e1.4
  val?            %7.8  = Force!<lazy>       !v    %7.7, e1.4   <lgl$->
  cp              %7.9  = Checkpoint                -> BB9 (default) | BB8 (if assume failed)
BB6   <- [5]
  fs              %6.0  = FrameState         R     0x5558d6d64010+54: [%3.1, %5.2], env=e1.4
  void                    Deopt              !v    %6.0   !
BB9   <- [7]
  lgl$-           %9.0  = AsLogical          e     %7.8
  lgl$#-          %9.1  = Identical                %9.0, false
  void                    Branch                   %9.1 -> BB16 (if true) | BB10 (if false)
BB8   <- [7]
  fs              %8.0  = FrameState         R     0x5558d6d64010+84: [%7.8], env=e1.4
  void                    Deopt              !v    %8.0   !
BB16   <- [9]
  goto BB13
BB10   <- [9]
  val?^ | miss    %10.0 = LdVar              eR    isFALSE, e1.4
  lgl$#-          %10.1 = Identical                %10.0, function(x) <(rir::DispatchTable*)0x5558d63992|...
  void                    Assume             D     %10.1, %7.9 (CallTarget@0x5558d6d49570[Call#2])
  val?^ | miss    %10.3 = LdVar              eR    ans, e1.4
  val?            %10.4 = Force!<value>      !v    %10.3, e1.4   <nil->
  prom-           %10.5 = MkArg                    %10.4, genericForBasic[0x5558d6c70960]_p3 (!refl), 
  val?            %10.6 = StaticCall         !v    isFALSE[0x5558d5c4dc90](%10.5) e1.4   <lgl$->
  lgl$#-          %10.7 = IsType                   %10.6 isA lgl$-
  cp              %10.8 = Checkpoint                -> BB12 (default) | BB11 (if assume failed)
BB13   <- [12, 16]
  lgl$-           %13.0 = Phi                      %12.3:BB12, %9.0:BB16
  lgl$#-          %13.1 = CheckTrueFalse     e     %13.0
  void                    Branch                   %13.1 -> BB15 (if true) | BB14 (if false)
BB12   <- [10]
  void                    Assume             D     %10.7, %10.8 (Typecheck@0x5558d6d49570[Type#8])
  lgl$-           %12.1 = CastType           d     dn %10.6
  lgl$-           %12.2 = AsLogical                %12.1
  lgl$-           %12.3 = LAnd                     %9.0, %12.2
  goto BB13
BB11   <- [10]
  fs              %11.0 = FrameState         R     0x5558d6d64010+128: [%9.0, %10.6], env=e1.4
  void                    Deopt              !v    %11.0   !
BB15   <- [13]
  (cls|spec|blt)  %15.0 = LdFun              !v    stop, e1.4
  fs              %15.1 = FrameState         R     0x5558d6d64010+151: [%15.0], env=e1.4
  void                    Deopt              !v    %15.1, DeadCall@0x5558d6d49570[Call#3], %15.0   !
BB14   <- [13]
  val?^ | miss    %14.0 = LdVar              eR    ans, e1.4
  void                    Visible            v     
  val?            %14.2 = Force!<value>      !     %14.0, e1.4   <(nil|cls)>
  void                    Return             l     %14.2
Prom 0:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     topenv, e1.0
  prom-           %1.2  = MkArg                    unboundValue, genericForBasic[0x5558d6c70960]_p1, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <val?_>
  void                    Return             l     %1.3
Prom 1:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     parent.frame, e1.0
  val?            %1.2  = Call               !     %1.1() e1.0   <val?_>
  void                    Return             l     %1.2
Prom 3:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    ans, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <nil->
  void                    Return             l     %1.3

│ genericForBasic[0x5558d6c70960]                                              │
└──────────────────────────────────────────────────────────────────────────────┘
