
┌──────────────────────────────────────────────────────────────────────────────┐
│ extends[0x5558d87fa490]                                                      │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;NonRefl0,NonRefl1,!Obj0,!Obj1 miss: 2│
│ Properties:                                                                  │
├────── PIR Version After Optimizations
extends[0x5558d87fa490]
BB0
  goto BB1
BB1   <- [0]
  val?^           %1.0  = LdArg                    1
  val?^           %1.1  = LdArg                    0
  cp              %1.2  = Checkpoint                -> BB2 (default) | BB137 (if assume failed)
BB2   <- [1]
  val?^ | miss    %2.0  = LdVar              eR    is.character, <env 0x5558d398c378>
  lgl$#-          %2.1  = Identical                <blt is.character>, %2.0   <true>
  void                    Assume             D     %2.1, %1.2 (DeadBranchReached@0x5558d5fef220[Test#0])
  env             e2.3  = MkEnv              l     class1=%1.1, class2=%1.0, maybe(miss)=true, fullInfo(miss)=false, parent=<env 0x5558d398c378>, context 1
  val+            %2.4  = Force!<lazy>       !vr   %1.1,    <(str|other)>
  lgl$#-          %2.5  = CallSafeBuiltin    wed   is.character(%2.4)    <lgl$->
  cp              %2.6  = Checkpoint                -> BB4 (default) | BB3 (if assume failed)
BB137   <- [1]
  env             e137.0 = (MkEnv)            l     class1=%1.1, class2=%1.0, maybe(miss)=true, fullInfo(miss)=false, parent=<env 0x5558d398c378>, context 1
  fs              %137.1 = FrameState         R     0x5558d663d740+0: [], env=e137.0
  void                    Deopt              !v    %137.1
BB4   <- [2]
  void                    Branch                   %2.5 -> BB129 (if true) | BB5 (if false)
BB3   <- [2]
  fs              %3.0  = FrameState         R     0x5558d663d740+91: [%2.5], env=e2.3
  void                    Deopt              !v    %3.0
BB129   <- [4]
  val?^ | miss    %129.0 = LdVar              eR    length, <env 0x5558d398c378>
  lgl$#-          %129.1 = Identical                <blt length>, %129.0   <true>
  void                    Assume             D     %129.1, %2.6 (DeadBranchReached@0x5558d5fef220[Test#1])
  (int|real)$-    %129.3 = CallSafeBuiltin    wed   length(%2.4)    <int$->
  lgl$#-          %129.4 = IsType                   %129.3 isA int$-
  cp              %129.5 = Checkpoint                -> BB131 (default) | BB130 (if assume failed)
BB5   <- [4]
  val?^ | miss    %5.0  = LdVar              eR    is, <env 0x5558d398c378>
  lgl$#-          %5.1  = Identical                %5.0, function(object, class2) <(rir::DispatchTable*|...
  void                    Assume             D     %5.1, %2.6 (CallTarget@0x5558d5fef220[Call#1])
  prom-           %5.3  = MkArg                    unboundValue, extends[0x5558d87fa490]_p2 (!refl), e2.3
  val?            %5.4  = Call               !v    function(object, class2) <(rir::DispatchTable*|...(%5.3, "classRepresentation") e2.3   <lgl$->
  lgl$#-          %5.5  = IsType                   %5.4 isA lgl$-
  cp              %5.6  = Checkpoint                -> BB7 (default) | BB6 (if assume failed)
BB131   <- [129]
  void                    Assume             D     %129.4, %129.5 (Typecheck@0x5558d5fef220[Type#11])
  int$-           %131.1 = CastType           d     dn %129.3
  lgl$-           %131.2 = Gt                 d     %131.1, 1L, elided   <lgl$->
  lgl$#-          %131.3 = CheckTrueFalse     e     %131.2
  void                    Branch                   %131.3 -> BB136 (if true) | BB132 (if false)
BB130   <- [129]
  fs              %130.0 = FrameState         R     0x5558d663d740+358: [%129.3], env=e2.3
  void                    Deopt              !v    %130.0
BB7   <- [5]
  void                    Assume             D     %5.5, %5.6 (Typecheck@0x5558d5fef220[Type#4])
  lgl$-           %7.1  = CastType           d     dn %5.4
  lgl$#-          %7.2  = CheckTrueFalse     e     %7.1
  void                    Branch                   %7.2 -> BB9 (if true) | BB8 (if false)
BB6   <- [5]
  fs              %6.0  = FrameState         R     0x5558d663d740+139: [%5.4], env=e2.3
  void                    Deopt              !v    %6.0   !
BB136   <- [131]
  val?            %136.0 = Extract2_1D        wed   %2.4, 1L, elided   <val?_>
  void                    StVar              lW    class1, %136.0, e2.3
  goto BB133
BB132   <- [131]
  goto BB133
BB9   <- [7]
  val?^ | miss    %9.0  = LdVar              eR    class1, e2.3
  val?            %9.1  = Force!<wrapped>    !v    %9.0, e2.3   <other>
  void                    StVar              lW    classDef1, %9.1, e2.3
  (cls|spec|blt)  %9.3  = LdFun              !v    @, <0x5558d3384bd8>, e2.3
  prom-           %9.4  = MkArg                    unboundValue, extends[0x5558d87fa490]_p3, e2.3
  prom-           %9.5  = MkArg                    unboundValue, extends[0x5558d87fa490]_p4, e2.3
  val?            %9.6  = Call               !v    %9.3(%9.4, %9.5) e2.3   <str$+>
  void                    StVar              lW    class1, %9.6, e2.3
  goto BB10
BB8   <- [7]
  (cls|spec|blt)  %8.0  = LdFun              !v    stop, e2.3
  fs              %8.1  = FrameState         R     0x5558d663d740+155: [%8.0], env=e2.3
  void                    Deopt              !v    %8.1, DeadCall@0x5558d5fef220[Call#2], %8.0   !
BB133   <- [132, 136]
  cp              %133.0 = Checkpoint                -> BB135 (default) | BB134 (if assume failed)
BB10   <- [135, 9]
  lgl$-           %10.0 = Missing            eR    class2, e2.3
  lgl$#-          %10.1 = CheckTrueFalse     e     %10.0
  void                    Branch                   %10.1 -> BB77 (if true) | BB11 (if false)
BB135   <- [133]
  val?^ | miss    %135.0 = LdVar              eR    getClassDef, <env 0x5558d398c378>
  lgl$#-          %135.1 = Identical                %135.0, function(Class, where=topenv(parent.frame()), |...
  void                    Assume             D     %135.1, %133.0 (CallTarget@0x5558d5fef220[Call#5])
  prom-           %135.3 = MkArg                    unboundValue, extends[0x5558d87fa490]_p27 (!refl), e2.3
  val?            %135.4 = StaticCall         !v    getClassDef[0x5558da9f4dd0](%135.3) e2.3   <other>
  void                    StVar              lW    classDef1, %135.4, e2.3
  goto BB10
BB134   <- [133]
  fs              %134.0 = FrameState         R     0x5558d663d740+453: [], env=e2.3
  void                    Deopt              !v    %134.0
BB77   <- [10]
  val?^ | miss    %77.0 = LdVar              eR    classDef1, e2.3
  val?            %77.1 = Force!<value>      !v    %77.0, e2.3   <other>
  lgl$-           %77.2 = Is                       %77.1, NULL
  lgl$#-          %77.3 = CheckTrueFalse     e     %77.2
  void                    Branch                   %77.3 -> BB128 (if true) | BB78 (if false)
BB11   <- [10]
  void                    StVar              lW    value, nil, e2.3
  cp              %11.1 = Checkpoint                -> BB13 (default) | BB12 (if assume failed)
BB128   <- [77]
  val?^ | miss    %128.0 = LdVar              eR    class1, e2.3
  void                    Visible            v     
  val?            %128.2 = Force!             !     %128.0, e2.3   <val?_>
  goto BB57
BB78   <- [77]
  (cls|spec|blt)  %78.0 = LdFun              !v    @, <0x5558d3384bd8>, e2.3
  prom-           %78.1 = MkArg                    unboundValue, extends[0x5558d87fa490]_p22, e2.3
  prom-           %78.2 = MkArg                    unboundValue, extends[0x5558d87fa490]_p23, e2.3
  val?            %78.3 = Call               !v    %78.0(%78.1, %78.2) e2.3   <vec+>
  void                    StVar              lW    ext, %78.3, e2.3
  cp              %78.5 = Checkpoint                -> BB80 (default) | BB79 (if assume failed)
BB13   <- [11]
  val?^ | miss    %13.0 = LdVar              eR    is.character, e2.3
  lgl$#-          %13.1 = Identical                <blt is.character>, %13.0   <true>
  void                    Assume             D     %13.1, %11.1 (DeadBranchReached@0x5558d5fef220[Test#7])
  val?^ | miss    %13.3 = LdVar              eR    class2, e2.3
  val?            %13.4 = Force!<lazy>       !v    %13.3, e2.3   <str$+>
  lgl$#-          %13.5 = CallSafeBuiltin    wed   is.character(%13.4)    <lgl$->
  cp              %13.6 = Checkpoint                -> BB15 (default) | BB14 (if assume failed)
BB12   <- [11]
  fs              %12.0 = FrameState         R     0x5558d663d740+1206: [], env=e2.3
  void                    Deopt              !v    %12.0   !
BB57   <- [70, 128, 105, 108, 56]
  val?            %57.0 = Phi                      %56.0:BB56, true:BB70, %105.3:BB105, %108.4:BB108, %128.2:BB128
  void                    Return             l     %57.0
BB80   <- [78]
  val?^ | miss    %80.0 = LdVar              eR    isTRUE, e2.3
  lgl$#-          %80.1 = Identical                %80.0, function(x) <(rir::DispatchTable*)0x5558d52435|...
  void                    Assume             D     %80.1, %78.5 (CallTarget@0x5558d5fef220[Call#7])
  val?^ | miss    %80.3 = LdVar              eR    maybe, e2.3
  val?            %80.4 = Force!<value>      !v    %80.3, e2.3   <lgl$->
  val+            %80.5 = CallSafeBuiltin    wed   is.logical(%80.4)    <lgl$->
  lgl$#-          %80.6 = IsType                   %80.5 isA lgl$-
  cp              %80.7 = Checkpoint                -> BB82 (default) | BB81 (if assume failed)
BB79   <- [78]
  fs              %79.0 = FrameState         R     0x5558d663d740+612: [], env=e2.3
  void                    Deopt              !v    %79.0   !
BB15   <- [13]
  void                    Branch                   %13.5 -> BB72 (if true) | BB16 (if false)
BB14   <- [13]
  fs              %14.0 = FrameState         R     0x5558d663d740+1297: [%13.5], env=e2.3
  void                    Deopt              !v    %14.0   !
BB82   <- [80]
  void                    Assume             D     %80.6, %80.7 (Typecheck@0x5558d493a838[Type#2])
  lgl$-           %82.1 = CastType           d     dn %80.5
  lgl$-           %82.2 = AsLogical                %82.1
  lgl$#-          %82.3 = Identical                %82.2, false
  void                    Branch                   %82.3 -> BB127 (if true) | BB83 (if false)
BB81   <- [80]
  fs              %81.0 = FrameState         R     0x5558d663d740+644: [], env=e2.3
  prom-           %81.1 = MkArg                    %80.4, extends[0x5558d87fa490]_p24 (!refl), e2.3
  val?~           %81.2 = CastType                 up %81.1
  env             e81.3 = (MkEnv)            l     x=%81.2, parent=R_BaseNamespace, context 0
  fs              %81.4 = FrameState         R     0x5558d37d66d0+91: [%80.5], env=e81.3, next=%81.0
  void                    Deopt              !v    %81.4   !
BB72   <- [15]
  val?^ | miss    %72.0 = LdVar              eR    length, e2.3
  lgl$#-          %72.1 = Identical                <blt length>, %72.0   <true>
  void                    Assume             D     %72.1, %13.6 (DeadBranchReached@0x5558d5fef220[Test#8])
  val?^ | miss    %72.3 = LdVar              eR    class2, e2.3
  val?            %72.4 = Force!<wrapped>    !v    %72.3, e2.3   <str$+>
  lgl$#-          %72.5 = IsType                   %72.4 isA val?+
  cp              %72.6 = Checkpoint                -> BB74 (default) | BB73 (if assume failed)
BB16   <- [15]
  goto BB17
BB127   <- [82]
  goto BB84
BB83   <- [82]
  lgl$#-          %83.0 = IsType                   %80.4 isA lgl$-
  void                    Assume             D     %83.0, %80.7 (Typecheck@0x5558d493a838[Type#4])
  lgl$-           %83.2 = AsLogical                %82.2
  goto BB84
BB74   <- [72]
  void                    Assume             D     %72.5, %72.6 (Typecheck@0x5558d5fef220[Type#50])
  val?+           %74.1 = CastType           d     dn %72.4   <str$+>
  (int|real)$-    %74.2 = CallSafeBuiltin    wed   length(%74.1)    <int$->
  lgl$#-          %74.3 = IsType                   %74.2 isA int$-
  cp              %74.4 = Checkpoint                -> BB76 (default) | BB75 (if assume failed)
BB73   <- [72]
  fs              %73.0 = FrameState         R     0x5558d663d740+1378: [%13.5, <blt length>, %72.4], env=e2.3
  void                    Deopt              !v    %73.0   !
BB17   <- [16, 76]
  lgl$-           %17.0 = Phi                      %76.4:BB76, %13.5:BB16
  cp              %17.1 = Checkpoint                -> BB19 (default) | BB18 (if assume failed)
BB84   <- [127, 83]
  lgl$-           %84.0 = Phi                      %83.2:BB83, %82.2:BB127
  lgl$-           %84.1 = AsLogical                %84.0
  lgl$#-          %84.2 = Identical                %84.1, false
  void                    Branch                   %84.2 -> BB126 (if true) | BB85 (if false)
BB76   <- [74]
  void                    Assume             D     %74.3, %74.4 (Typecheck@0x5558d5fef220[Type#51])
  int$-           %76.1 = CastType           d     dn %74.2
  lgl$-           %76.2 = Eq                 d     %76.1, 1L, elided   <lgl$->
  lgl$-           %76.3 = AsLogical                %76.2
  lgl$-           %76.4 = LAnd                     %13.5, %76.3
  goto BB17
BB75   <- [74]
  fs              %75.0 = FrameState         R     0x5558d663d740+1400: [%13.5, %74.2], env=e2.3
  void                    Deopt              !v    %75.0   !
BB19   <- [17]
  lgl$#-          %19.0 = CheckTrueFalse     e     %17.0
  void                    Branch                   %19.0 -> BB21 (if true) | BB20 (if false)
BB18   <- [17]
  fs              %18.0 = FrameState         R     0x5558d663d740+1419: [%17.0], env=e2.3
  void                    Deopt              !v    %18.0   !
BB126   <- [84]
  goto BB86
BB85   <- [84]
  lgl$#-          %85.0 = IsType                   %80.4 isA lgl$-
  void                    Assume             D     %85.0, %80.7 (Typecheck@0x5558d493a838[Type#8])
  lgl$-           %85.2 = CastType           d     dn %80.4
  lgl$-           %85.3 = CallSafeBuiltin    wed   is.na(%85.2)    <lgl$->
  lgl$-           %85.4 = Not                d     %85.3, elided
  lgl$-           %85.5 = AsLogical                %85.4
  lgl$-           %85.6 = LAnd                     %84.1, %85.5
  goto BB86
BB21   <- [19]
  val?^ | miss    %21.0 = LdVar              eR    .identC, e2.3
  lgl$#-          %21.1 = Identical                %21.0, function(c1=NULL, c2=NULL) <(rir::DispatchTabl|...
  void                    Assume             D     %21.1, %17.1 (CallTarget@0x5558d5fef220[Call#18])
  prom-           %21.3 = MkArg                    unboundValue, extends[0x5558d87fa490]_p5, e2.3
  prom-           %21.4 = MkArg                    unboundValue, extends[0x5558d87fa490]_p6, e2.3
  val?            %21.5 = StaticCall         !v    .identC[0x5558d3df9970](%21.3, %21.4) e2.3   <lgl$->
  lgl$#-          %21.6 = IsType                   %21.5 isA lgl$-
  cp              %21.7 = Checkpoint                -> BB23 (default) | BB22 (if assume failed)
BB20   <- [19]
  (cls|spec|blt)  %20.0 = LdFun              !v    is, e2.3
  fs              %20.1 = FrameState         R     0x5558d663d740+1430: [%20.0], env=e2.3
  void                    Deopt              !v    %20.1, DeadCall@0x5558d5fef220[Call#15], %20.0   !
BB86   <- [126, 85]
  lgl$-           %86.0 = Phi                      %85.6:BB85, %84.1:BB126
  lgl$-           %86.1 = AsLogical                %86.0
  lgl$#-          %86.2 = Identical                %86.1, false
  void                    Branch                   %86.2 -> BB125 (if true) | BB87 (if false)
BB23   <- [21]
  void                    Assume             D     %21.6, %21.7 (Typecheck@0x5558d5fef220[Type#62])
  lgl$-           %23.1 = CastType           d     dn %21.5
  lgl$-           %23.2 = AsLogical                %23.1
  lgl$#-          %23.3 = Identical                %23.2, true
  void                    Branch                   %23.3 -> BB71 (if true) | BB24 (if false)
BB22   <- [21]
  fs              %22.0 = FrameState         R     0x5558d663d740+1627: [%21.5], env=e2.3
  void                    Deopt              !v    %22.0   !
BB125   <- [86]
  goto BB88
BB87   <- [86]
  lgl$-           %87.0 = AsLogical          e     %80.4
  lgl$-           %87.1 = LAnd                     %86.1, %87.0
  goto BB88
BB71   <- [23]
  goto BB27
BB24   <- [23]
  val?^ | miss    %24.0 = LdVar              eR    .identC, e2.3
  lgl$#-          %24.1 = Identical                %24.0, function(c1=NULL, c2=NULL) <(rir::DispatchTabl|...
  void                    Assume             D     %24.1, %21.7 (CallTarget@0x5558d5fef220[Call#19])
  prom-           %24.3 = MkArg                    unboundValue, extends[0x5558d87fa490]_p7, e2.3
  val?            %24.4 = StaticCall         !v    .identC[0x5558daf78e70](%24.3, "ANY") e2.3   <lgl$->
  lgl$#-          %24.5 = IsType                   %24.4 isA lgl$-
  cp              %24.6 = Checkpoint                -> BB26 (default) | BB25 (if assume failed)
BB88   <- [125, 87]
  lgl$-           %88.0 = Phi                      %87.1:BB87, %86.1:BB125
  cp              %88.1 = Checkpoint                -> BB90 (default) | BB89 (if assume failed)
BB27   <- [26, 71]
  lgl$-           %27.0 = Phi                      %26.3:BB26, %23.2:BB71
  lgl$#-          %27.1 = CheckTrueFalse     e     %27.0
  void                    Branch                   %27.1 -> BB70 (if true) | BB28 (if false)
BB26   <- [24]
  void                    Assume             D     %24.5, %24.6 (Typecheck@0x5558d5fef220[Type#64])
  lgl$-           %26.1 = CastType           d     dn %24.4
  lgl$-           %26.2 = AsLogical                %26.1
  lgl$-           %26.3 = LOr                      %23.2, %26.2
  goto BB27
BB25   <- [24]
  fs              %25.0 = FrameState         R     0x5558d663d740+1676: [%23.2, %24.4], env=e2.3
  void                    Deopt              !v    %25.0   !
BB90   <- [88]
  lgl$-           %90.0 = Not                d     %88.0, elided
  lgl$-           %90.1 = AsLogical                %90.0
  lgl$#-          %90.2 = Identical                %90.1, false
  void                    Branch                   %90.2 -> BB124 (if true) | BB91 (if false)
BB89   <- [88]
  fs              %89.0 = FrameState         R     0x5558d663d740+644: [], env=e2.3
  prom-           %89.1 = MkArg                    %80.4, extends[0x5558d87fa490]_p24 (!refl), e2.3
  val?~           %89.2 = CastType                 up %89.1
  env             e89.3 = (MkEnv)            l     x=%89.2, parent=R_BaseNamespace, context 0
  fs              %89.4 = FrameState         R     0x5558d37d66d0+342: [%88.0], env=e89.3, next=%89.0
  void                    Deopt              !v    %89.4   !
BB70   <- [27]
  void                    Visible            v     
  goto BB57
BB28   <- [27]
  val?^ | miss    %28.0 = LdVar              eR    classDef1, e2.3
  val?            %28.1 = Force!<value>      !v    %28.0, e2.3   <other>
  lgl$-           %28.2 = Is                       %28.1, NULL
  cp              %28.3 = Checkpoint                -> BB30 (default) | BB29 (if assume failed)
BB124   <- [90]
  goto BB94
BB91   <- [90]
  val?^ | miss    %91.0 = LdVar              eR    length, e2.3
  lgl$#-          %91.1 = Identical                <blt length>, %91.0   <true>
  void                    Assume             D     %91.1, %88.1 (DeadBranchReached@0x5558d5fef220[Test#3])
  val?^ | miss    %91.3 = LdVar              eR    ext, e2.3
  lgl$#-          %91.4 = IsType                   %91.3 isA val?~+ | miss
  void                    Assume             D     %91.4, %88.1 (Typecheck@0x5558d5fef220[Type#25])
  val?~+ | miss   %91.6 = CastType           d     dn %91.3
  val?+           %91.7 = Force!<value>            %91.6,    <vec+>
  (int|real)$-    %91.8 = CallSafeBuiltin    wed   length(%91.7)    <int$->
  lgl$#-          %91.9 = IsType                   %91.8 isA int$-
  cp              %91.10 = Checkpoint                -> BB93 (default) | BB92 (if assume failed)
BB30   <- [28]
  lgl$-           %30.0 = Not                d     %28.2, elided
  lgl$-           %30.1 = AsLogical                %30.0
  lgl$#-          %30.2 = Identical                %30.1, false
  void                    Branch                   %30.2 -> BB69 (if true) | BB31 (if false)
BB29   <- [28]
  fs              %29.0 = FrameState         R     0x5558d663d740+1710: [%28.1], env=e2.3
  void                    Deopt              !v    %29.0   !
BB94   <- [124, 93]
  lgl$-           %94.0 = Phi                      %93.4:BB93, %90.1:BB124
  cp              %94.1 = Checkpoint                -> BB96 (default) | BB95 (if assume failed)
BB93   <- [91]
  void                    Assume             D     %91.9, %91.10 (Typecheck@0x5558d5fef220[Type#26])
  int$-           %93.1 = CastType           d     dn %91.8
  lgl$-           %93.2 = Gt                 d     %93.1, 0, elided   <lgl$->
  lgl$-           %93.3 = AsLogical                %93.2
  lgl$-           %93.4 = LAnd                     %90.1, %93.3
  goto BB94
BB92   <- [91]
  fs              %92.0 = FrameState         R     0x5558d663d740+748: [%90.1, %91.8], env=e2.3
  void                    Deopt              !v    %92.0   !
BB69   <- [30]
  goto BB34
BB31   <- [30]
  val?^ | miss    %31.0 = LdVar              eR    %in%, e2.3
  lgl$#-          %31.1 = Identical                %31.0, function(x, table) <(rir::DispatchTable*)0x555|...
  void                    Assume             D     %31.1, %28.3 (CallTarget@0x5558d5fef220[Call#20])
  prom-           %31.3 = MkArg                    unboundValue, extends[0x5558d87fa490]_p9, e2.3
  val?^ | miss    %31.4 = LdVar              eR    class2, e2.3
  val?            %31.5 = Force!<wrapped>    !v    %31.4, e2.3   <str$+>
  prom-           %31.6 = MkArg                    %31.5, extends[0x5558d87fa490]_p8 (!refl), 
  val?            %31.7 = StaticCall         !v    %in%[0x5558d880d930](%31.6, %31.3) e2.3   <lgl$->
  lgl$#-          %31.8 = IsType                   %31.7 isA lgl$-
  cp              %31.9 = Checkpoint                -> BB33 (default) | BB32 (if assume failed)
BB96   <- [94]
  lgl$#-          %96.0 = CheckTrueFalse     e     %94.0
  void                    Branch                   %96.0 -> BB109 (if true) | BB97 (if false)
BB95   <- [94]
  fs              %95.0 = FrameState         R     0x5558d663d740+767: [%94.0], env=e2.3
  void                    Deopt              !v    %95.0   !
BB34   <- [33, 69]
  lgl$-           %34.0 = Phi                      %33.3:BB33, %30.1:BB69
  cp              %34.1 = Checkpoint                -> BB36 (default) | BB35 (if assume failed)
BB33   <- [31]
  void                    Assume             D     %31.8, %31.9 (Typecheck@0x5558d5fef220[Type#71])
  lgl$-           %33.1 = CastType           d     dn %31.7
  lgl$-           %33.2 = AsLogical                %33.1
  lgl$-           %33.3 = LAnd                     %30.1, %33.2
  goto BB34
BB32   <- [31]
  fs              %32.0 = FrameState         R     0x5558d663d740+1765: [%30.1, %31.7], env=e2.3
  void                    Deopt              !v    %32.0   !
BB109   <- [96]
  val?^ | miss    %109.0 = LdVar              eR    vapply, e2.3
  lgl$#-          %109.1 = Identical                %109.0, function(X, FUN, FUN.VALUE, ..., USE.NAMES=TRU|...
  void                    Assume             D     %109.1, %94.1 (CallTarget@0x5558d5fef220[Call#9])
  prom-           %109.3 = MkArg                    unboundValue, extends[0x5558d87fa490]_p25, e2.3
  cls             %109.4 = MkCls                    extends@Prom(26)0, e2.3
  prom-           %109.5 = MkArg                    %109.4, extends[0x5558d87fa490]_p26 (!refl), e2.3
  ct              %109.6 = PushContext        lCL   %109.3, %109.5, na-lgl, vapply(ext, function(<lst obj=R_MissingArg>, i|..., function(X, FUN, FUN.VALUE, ..., USE.NAMES=TRU|..., e2.3
  cls~            %109.7 = CastType                 up %109.5
  val?^           %109.8 = CastType                 up %109.3
  env             e109.9 = MkEnv              l     X=%109.8, FUN=%109.7, FUN.VALUE=na-lgl, ...(miss)=missingArg, USE.NAMES(miss)=true, parent=R_BaseNamespace, context 1
  prom-           %109.10 = MkArg                    unboundValue, extends[0x5558d87fa490]_p29 (!refl), e109.9
  val?            %109.11 = StaticCall         !v    match.fun[0x5558da9fc6c0](%109.10) e109.9   <val?->
  void                    StVar              lW    FUN, %109.11, e109.9
  cp              %109.13 = Checkpoint                -> BB111 (default) | BB110 (if assume failed)
BB97   <- [96]
  goto BB98
BB36   <- [34]
  lgl$#-          %36.0 = CheckTrueFalse     e     %34.0
  void                    Branch                   %36.0 -> BB64 (if true) | BB37 (if false)
BB35   <- [34]
  fs              %35.0 = FrameState         R     0x5558d663d740+1772: [%34.0], env=e2.3
  void                    Deopt              !v    %35.0   !
BB111   <- [109]
  val?^ | miss    %111.0 = LdVar              eR    is.vector, e109.9
  lgl$#-          %111.1 = Identical                %111.0, function(x, mode="any") <(rir::DispatchTable*)|...
  void                    Assume             D     %111.1, %109.13 (CallTarget@0x5558d5289c70[Call#1])
  val?^ | miss    %111.3 = LdVar              eR    X, e109.9
  val?            %111.4 = Force!<lazy>       !v    %111.3, e109.9   <val?>
  lgl$#-          %111.5 = CallSafeBuiltin    wed   is.vector(%111.4, "any")    <lgl$->
  cp              %111.6 = Checkpoint                -> BB113 (default) | BB112 (if assume failed)
BB110   <- [109]
  fs              %110.0 = FrameState         R     0x5558d663d740+820: [], env=e2.3
  fs              %110.1 = FrameState         R     0x5558d34a2000+46: [], env=e109.9, next=%110.0
  void                    Deopt              !v    %110.1   !
BB98   <- [97, 121]
  val?^ | miss    %98.0 = LdVar              eR    fullInfo, e2.3
  val?            %98.1 = Force!<lazy>       !v    %98.0, e2.3   <lgl$->
  lgl$#-          %98.2 = CheckTrueFalse     we    %98.1
  cp              %98.3 = Checkpoint                -> BB100 (default) | BB99 (if assume failed)
BB64   <- [36]
  (cls|spec|blt)  %64.0 = LdFun              !v    @, <0x5558d3384bd8>, e2.3
  prom-           %64.1 = MkArg                    unboundValue, extends[0x5558d87fa490]_p20, e2.3
  prom-           %64.2 = MkArg                    unboundValue, extends[0x5558d87fa490]_p21, e2.3
  val?            %64.3 = Call               !v    %64.0(%64.1, %64.2) e2.3   <vec+>
  lgl$#-          %64.4 = IsType                   %64.3 isA val+   <true>
  cp              %64.5 = Checkpoint                -> BB66 (default) | BB65 (if assume failed)
BB37   <- [36]
  val?^ | miss    %37.0 = LdVar              eR    getClassDef, e2.3
  lgl$#-          %37.1 = Identical                %37.0, function(Class, where=topenv(parent.frame()), |...
  void                    Assume             D     %37.1, %34.1 (CallTarget@0x5558d5fef220[Call#23])
  prom-           %37.3 = MkArg                    unboundValue, extends[0x5558d87fa490]_p13, e2.3
  val?            %37.4 = StaticCall         !v    getClassDef[0x5558da9f4dd0](%37.3) e2.3   <other>
  void                    StVar              lW    classDef2, %37.4, e2.3
  goto BB38
BB113   <- [111]
  lgl$#-          %113.0 = Not                d     %111.5, elided
  void                    Branch                   %111.5 -> BB123 (if true) | BB114 (if false)
BB112   <- [111]
  fs              %112.0 = FrameState         R     0x5558d663d740+820: [], env=e2.3
  fs              %112.1 = FrameState         R     0x5558d34a2000+78: [], env=e109.9, next=%112.0
  prom-           %112.2 = MkArg                    %111.4, extends[0x5558d87fa490]_p32 (!refl), e109.9
  val?~           %112.3 = CastType                 up %112.2
  env             e112.4 = (MkEnv)            l     mode(miss)="any", x=%112.3, parent=R_BaseNamespace, context 0
  fs              %112.5 = FrameState         R     0x5558d522c4a0+41: [%111.5], env=e112.4, next=%112.1
  void                    Deopt              !v    %112.5   !
BB100   <- [98]
  void                    Branch                   %98.2 -> BB106 (if true) | BB101 (if false)
BB99   <- [98]
  fs              %99.0 = FrameState         R     0x5558d663d740+924: [%98.2], env=e2.3
  void                    Deopt              !v    %99.0   !
BB66   <- [64]
  void                    Assume             D     %64.4, %64.5 (DeadBranchReached@0x5558d5fef220[Test#10])
  val?^ | miss    %66.1 = LdVar              eR    class2, e2.3
  val?            %66.2 = Force!<wrapped>    !v    %66.1, e2.3   <str$+>
  lgl$#-          %66.3 = IsType                   %66.2 isA val?+
  cp              %66.4 = Checkpoint                -> BB68 (default) | BB67 (if assume failed)
BB65   <- [64]
  fs              %65.0 = FrameState         R     0x5558d663d740+1866: [%64.3], env=e2.3
  void                    Deopt              !v    %65.0   !
BB38   <- [37, 68]
  val?^ | miss    %38.0 = LdVar              eR    value, e2.3
  val?            %38.1 = Force!<value>      !v    %38.0, e2.3   <(nil|other)>
  lgl$-           %38.2 = Is                       %38.1, NULL
  cp              %38.3 = Checkpoint                -> BB40 (default) | BB39 (if assume failed)
BB123   <- [113]
  val?^ | miss    %123.0 = LdVar              eR    is.object, e109.9
  lgl$#-          %123.1 = Identical                <blt is.object>, %123.0   <true>
  void                    Assume             D     %123.1, %111.6 (DeadBranchReached@0x5558d5289c70[Test#0])
  val?^ | miss    %123.3 = LdVar              eR    X, e109.9
  val?            %123.4 = Force!<wrapped>    !v    %123.3, e109.9   <val?+>
  lgl$#-          %123.5 = CallSafeBuiltin    wed   is.object(%123.4)    <lgl$->
  lgl$-           %123.6 = LOr                      %113.0, %123.5
  goto BB115
BB114   <- [113]
  goto BB115
BB106   <- [100]
  val?^ | miss    %106.0 = LdVar              eR    ext !upd, e2.3
  val?            %106.1 = Force!             !v    %106.0, e2.3   <val?_>
  val?^ | miss    %106.2 = LdVar              eR    class1, e2.3
  val?            %106.3 = Force!             !v    %106.2, e2.3   <val?_>
  lgl$#-          %106.4 = IsType                   %106.3 isA val?+
  lgl$#-          %106.5 = IsType                   %106.1 isA val?+
  cp              %106.6 = Checkpoint                -> BB108 (default) | BB107 (if assume failed)
BB101   <- [100]
  val?^ | miss    %101.0 = LdVar              eR    c, e2.3
  lgl$#-          %101.1 = Identical                <blt c>, %101.0   <true>
  void                    Assume             D     %101.1, %98.3 (DeadBranchReached@0x5558d5fef220[Test#5])
  val?^ | miss    %101.3 = LdVar              eR    class1, e2.3
  val?            %101.4 = Force!<wrapped>    !v    %101.3, e2.3   <str$+>
  cp              %101.5 = Checkpoint                -> BB103 (default) | BB102 (if assume failed)
BB68   <- [66]
  lgl$#-          %68.0 = IsType                   %64.3 isA val?+
  void                    Assume             D     %68.0, %66.4 (Typecheck@0x5558d5fef220[Type#76])
  val?+           %68.2 = CastType           d     dn %64.3   <vec+>
  void                    Assume             D     %66.3, %66.4 (Typecheck@0x5558d5fef220[Type#78])
  val?+           %68.4 = CastType           d     dn %66.2   <str$+>
  val?            %68.5 = Extract2_1D        wed   %68.2, %68.4, elided   <other>
  void                    StVar              lW    value, %68.5, e2.3
  goto BB38
BB67   <- [66]
  fs              %67.0 = FrameState         R     0x5558d663d740+1911: [%64.3, %66.2], env=e2.3
  void                    Deopt              !v    %67.0   !
BB40   <- [38]
  lgl$#-          %40.0 = CheckTrueFalse     e     %38.2
  void                    Branch                   %40.0 -> BB61 (if true) | BB41 (if false)
BB39   <- [38]
  fs              %39.0 = FrameState         R     0x5558d663d740+1941: [%38.1], env=e2.3
  void                    Deopt              !v    %39.0   !
BB115   <- [114, 123]
  lgl$-           %115.0 = Phi                      %123.6:BB123, %113.0:BB114
  cp              %115.1 = Checkpoint                -> BB117 (default) | BB116 (if assume failed)
BB108   <- [106]
  void                    Assume             D     %106.5, %106.6 (Typecheck@0x5558d5fef220[Type#43])
  val?+           %108.1 = CastType           d     dn %106.1   <val?_>
  void                    Assume             D     %106.4, %106.6 (Typecheck@0x5558d5fef220[Type#44])
  val?+           %108.3 = CastType           d     dn %106.3   <val?_>
  val?+           %108.4 = Subassign2_1D      wed   true, %108.1, %108.3, elided   <val?_>
  void                    StVar              lW    ext, %108.4, e2.3
  val+            %108.6 = ChkMissing         e     %108.4
  void                    Visible            v     
  goto BB57
BB107   <- [106]
  fs              %107.0 = FrameState         R     0x5558d663d740+1161: [true, %106.1, %106.3], env=e2.3
  void                    Deopt              !v    %107.0   !
BB103   <- [101]
  val?^ | miss    %103.0 = LdVar              eR    names, e2.3
  lgl$#-          %103.1 = Identical                <blt names>, %103.0   <true>
  void                    Assume             D     %103.1, %101.5 (DeadBranchReached@0x5558d5fef220[Test#6])
  val?^ | miss    %103.3 = LdVar              eR    ext, e2.3
  lgl$#-          %103.4 = IsType                   %103.3 isA val?~+ | miss
  void                    Assume             D     %103.4, %101.5 (Typecheck@0x5558d5fef220[Type#40])
  val?~+ | miss   %103.6 = CastType           d     dn %103.3
  val?+           %103.7 = Force!<value>            %103.6,    <vec+>
  val+            %103.8 = CallSafeBuiltin    wed   names(%103.7)    <str->
  cp              %103.9 = Checkpoint                -> BB105 (default) | BB104 (if assume failed)
BB102   <- [101]
  fs              %102.0 = FrameState         R     0x5558d663d740+1003: [<blt c>, %101.4], env=e2.3
  void                    Deopt              !v    %102.0   !
BB61   <- [40]
  val?^ | miss    %61.0 = LdVar              eR    possibleExtends, e2.3
  lgl$#-          %61.1 = Identical                %61.0, function(class1, class2, ClassDef1=getClassDef|...
  void                    Assume             D     %61.1, %38.3 (CallTarget@0x5558d5fef220[Call#25])
  prom-           %61.3 = MkArg                    unboundValue, extends[0x5558d87fa490]_p16, e2.3
  prom-           %61.4 = MkArg                    unboundValue, extends[0x5558d87fa490]_p17, e2.3
  prom-           %61.5 = MkArg                    unboundValue, extends[0x5558d87fa490]_p18, e2.3
  prom-           %61.6 = MkArg                    unboundValue, extends[0x5558d87fa490]_p19, e2.3
  val?            %61.7 = StaticCall         !v    possibleExtends[0x5558da7ab2a0](%61.3, %61.4, %61.5, %61.6) e2.3   <lgl$->
  lgl$#-          %61.8 = IsType                   %61.7 isA lgl$-
  cp              %61.9 = Checkpoint                -> BB63 (default) | BB62 (if assume failed)
BB41   <- [40]
  goto BB42
BB117   <- [115]
  lgl$#-          %117.0 = CheckTrueFalse     e     %115.0
  void                    Branch                   %117.0 -> BB122 (if true) | BB118 (if false)
BB116   <- [115]
  fs              %116.0 = FrameState         R     0x5558d663d740+820: [], env=e2.3
  fs              %116.1 = FrameState         R     0x5558d34a2000+189: [%115.0], env=e109.9, next=%116.0
  void                    Deopt              !v    %116.1   !
BB105   <- [103]
  lgl$#-          %105.0 = IsType                   %101.4 isA val?+
  void                    Assume             D     %105.0, %103.9 (Typecheck@0x5558d5fef220[Type#38])
  val?+           %105.2 = CastType           d     dn %101.4   <str$+>
  val+            %105.3 = CallSafeBuiltin    vwed  c(%105.2, %103.8)    <str->
  goto BB57
BB104   <- [103]
  fs              %104.0 = FrameState         R     0x5558d663d740+1099: [<blt c>, %101.4, %103.8], env=e2.3
  void                    Deopt              !v    %104.0   !
BB63   <- [61]
  void                    Assume             D     %61.8, %61.9 (Typecheck@0x5558d5fef220[Type#85])
  lgl$-           %63.1 = CastType           d     dn %61.7
  void                    StVar              lW    value, %63.1, e2.3
  goto BB42
BB62   <- [61]
  fs              %62.0 = FrameState         R     0x5558d663d740+2009: [%61.7], env=e2.3
  void                    Deopt              !v    %62.0   !
BB42   <- [41, 63]
  val?^ | miss    %42.0 = LdVar              eR    fullInfo, e2.3
  val?            %42.1 = Force!<lazy>       !v    %42.0, e2.3   <lgl$->
  lgl$#-          %42.2 = CheckTrueFalse     we    %42.1
  cp              %42.3 = Checkpoint                -> BB44 (default) | BB43 (if assume failed)
BB122   <- [117]
  val?^ | miss    %122.0 = LdVar              eR    as.list, e109.9
  lgl$#-          %122.1 = Identical                %122.0, function(x, ...) <(rir::DispatchTable*)0x5558d|...
  void                    Assume             D     %122.1, %115.1 (CallTarget@0x5558d5289c70[Call#3])
  val?^ | miss    %122.3 = LdVar              eR    X, e109.9
  val?            %122.4 = Force!<wrapped>    !v    %122.3, e109.9   <vec>
  val?            %122.5 = StaticCall         !v    as.list[0x5558daf96be0](%122.4) { 0 } e109.9   <vec>
  void                    StVar              lW    X, %122.5, e109.9
  goto BB119
BB118   <- [117]
  goto BB119
BB44   <- [42]
  void                    Branch                   %42.2 -> BB60 (if true) | BB45 (if false)
BB43   <- [42]
  fs              %43.0 = FrameState         R     0x5558d663d740+2038: [%42.2], env=e2.3
  void                    Deopt              !v    %43.0   !
BB119   <- [118, 122]
  (cls|spec|blt)  %119.0 = LdFun              !v    .Internal, <0x5558d3384698>, e109.9
  prom-           %119.1 = MkArg                    unboundValue, extends[0x5558d87fa490]_p33, e109.9
  val?            %119.2 = Call               !v    %119.0(%119.1) e109.9   <val?+>
  val?            %119.3 = PopContext         C     %119.2, %109.6   <lgl+>
  void                    StVar              lW    noTest, %119.3, e2.3
  cp              %119.5 = Checkpoint                -> BB121 (default) | BB120 (if assume failed)
BB60   <- [44]
  val?^ | miss    %60.0 = LdVar              eR    value, e2.3
  void                    Visible            v     
  val?            %60.2 = Force!<value>      !     %60.0, e2.3   <other>
  goto BB56
BB45   <- [44]
  val?^ | miss    %45.0 = LdVar              eR    is.logical, e2.3
  lgl$#-          %45.1 = Identical                <blt is.logical>, %45.0   <true>
  void                    Assume             D     %45.1, %42.3 (DeadBranchReached@0x5558d5fef220[Test#11])
  val?^ | miss    %45.3 = LdVar              eR    value, e2.3
  val?            %45.4 = Force!<value>      !v    %45.3, e2.3   <(lgl|other)>
  val+            %45.5 = CallSafeBuiltin    wed   is.logical(%45.4)    <lgl$->
  lgl$#-          %45.6 = IsType                   %45.5 isA lgl$-
  cp              %45.7 = Checkpoint                -> BB47 (default) | BB46 (if assume failed)
BB121   <- [119]
  val?^ | miss    %121.0 = LdVar              eR    ext, e2.3
  lgl$#-          %121.1 = IsType                   %121.0 isA val?~+ | miss
  void                    Assume             D     %121.1, %119.5 (Typecheck@0x5558d5fef220[Type#30])
  val?~+ | miss   %121.3 = CastType           d     dn %121.0
  val?+           %121.4 = Force!<value>            %121.3,    <vec+>
  lgl$#-          %121.5 = IsType                   %121.4 isA val+   <true>
  void                    Assume             D     %121.5, %119.5 (DeadBranchReached@0x5558d5fef220[Test#4])
  val             %121.7 = ChkMissing         e     %119.3
  lgl$#-          %121.8 = IsType                   %121.7 isA lgl+
  void                    Assume             D     %121.8, %119.5 (Typecheck@0x5558d5fef220[Type#32])
  lgl+            %121.10 = CastType           d     dn %121.7
  val?            %121.11 = Extract1_1D        wed   %121.4, %121.10, elided   <vec+>
  void                    StVar              lW    ext, %121.11, e2.3
  goto BB98
BB120   <- [119]
  fs              %120.0 = FrameState         R     0x5558d663d740+834: [], env=e2.3
  void                    Deopt              !v    %120.0   !
BB56   <- [60, 55]
  val?            %56.0 = Phi                      %55.0:BB55, %60.2:BB60
  goto BB57
BB47   <- [45]
  void                    Assume             D     %45.6, %45.7 (Typecheck@0x5558d5fef220[Type#89])
  lgl$-           %47.1 = CastType           d     dn %45.5
  lgl$#-          %47.2 = CheckTrueFalse     e     %47.1
  void                    Branch                   %47.2 -> BB59 (if true) | BB48 (if false)
BB46   <- [45]
  fs              %46.0 = FrameState         R     0x5558d663d740+2134: [%45.5], env=e2.3
  void                    Deopt              !v    %46.0   !
BB59   <- [47]
  val?^ | miss    %59.0 = LdVar              eR    value, e2.3
  lgl$#-          %59.1 = IsType                   %59.0 isA lgl$-
  void                    Assume             D     %59.1, %45.7 (Typecheck@0x5558d5fef220[Type#99])
  lgl$-           %59.3 = CastType           d     dn %59.0
  void                    Visible            v     
  goto BB55
BB48   <- [47]
  (cls|spec|blt)  %48.0 = LdFun              !v    @, <0x5558d3384bd8>, e2.3
  prom-           %48.1 = MkArg                    unboundValue, extends[0x5558d87fa490]_p14, e2.3
  prom-           %48.2 = MkArg                    unboundValue, extends[0x5558d87fa490]_p15, e2.3
  val?            %48.3 = Call               !v    %48.0(%48.1, %48.2) e2.3   <lgl$->
  lgl$#-          %48.4 = IsType                   %48.3 isA lgl$-
  cp              %48.5 = Checkpoint                -> BB50 (default) | BB49 (if assume failed)
BB55   <- [59, 54]
  val?            %55.0 = Phi                      %54.0:BB54, %59.3:BB59
  goto BB56
BB50   <- [48]
  void                    Assume             D     %48.4, %48.5 (Typecheck@0x5558d5fef220[Type#92])
  lgl$-           %50.1 = CastType           d     dn %48.3
  lgl$-           %50.2 = AsLogical                %50.1
  lgl$#-          %50.3 = Identical                %50.2, true
  void                    Branch                   %50.3 -> BB52 (if true) | BB51 (if false)
BB49   <- [48]
  fs              %49.0 = FrameState         R     0x5558d663d740+2182: [%48.3], env=e2.3
  void                    Deopt              !v    %49.0   !
BB52   <- [50]
  lgl$#-          %52.0 = CheckTrueFalse     e     %50.2
  void                    Branch                   %52.0 -> BB58 (if true) | BB53 (if false)
BB51   <- [50]
  (cls|spec|blt)  %51.0 = LdFun              !v    isTRUE, e2.3
  fs              %51.1 = FrameState         R     0x5558d663d740+2199: [%50.2, %51.0], env=e2.3
  void                    Deopt              !v    %51.1, DeadCall@0x5558d5fef220[Call#28], %51.0   !
BB58   <- [52]
  void                    Visible            v     
  goto BB54
BB53   <- [52]
  val?^ | miss    %53.0 = LdVar              eR    maybe, e2.3
  void                    Visible            v     
  val?            %53.2 = Force!             !     %53.0, e2.3   <val?_>
  goto BB54
BB54   <- [58, 53]
  val?            %54.0 = Phi                      %53.2:BB53, true:BB58
  goto BB55
Prom 2:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    class1, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <other>
  void                    Return             l     %1.3
Prom 3:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    classDef1, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 4:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    className, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 5:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    class1, e1.0
  val?            %1.2  = Force<wrapped>     !v    %1.1, e1.0   <str$+>
  val?            %1.3  = Extract2_1D        !v    %1.2, 1L, e1.0   <str$->
  void                    Visible            v     
  void                    Return             l     %1.3
Prom 6:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    class2, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <str$+>
  void                    Return             l     %1.3
Prom 7:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    class2, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <str$+>
  void                    Return             l     %1.3
Prom 8:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    class2, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <str$+>
  void                    Return             l     %1.3
Prom 9:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     names, <0x5558d3385470>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, extends[0x5558d87fa490]_p10, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <str->
  void                    Return             l     %1.3
Prom 10:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     @, <0x5558d3384bd8>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, extends[0x5558d87fa490]_p11, e1.0
  prom-           %1.3  = MkArg                    unboundValue, extends[0x5558d87fa490]_p12, e1.0
  val?            %1.4  = Call               !     %1.1(%1.2, %1.3) e1.0   <vec+>
  void                    Return             l     %1.4
Prom 11:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    classDef1, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 12:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    contains, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 13:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    class2, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <str$+>
  void                    Return             l     %1.3
Prom 14:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    value, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 15:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    simple, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 16:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    class1, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <str$+>
  void                    Return             l     %1.3
Prom 17:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    class2, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <str$+>
  void                    Return             l     %1.3
Prom 18:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    classDef1, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <other>
  void                    Return             l     %1.3
Prom 19:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    classDef2, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <other>
  void                    Return             l     %1.3
Prom 20:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    classDef1, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 21:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    contains, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 22:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    classDef1, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 23:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    contains, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 24:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    maybe, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <lgl$->
  void                    Return             l     %1.3
Prom 25:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    ext, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 26:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  cls             %1.1  = MkCls                    extends@Prom(26)0, e1.0
  void                    Return             l     %1.1
Prom 27:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    class1, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <str$+>
  void                    Return             l     %1.3
Prom 29:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    FUN, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <val?->
  void                    Return             l     %1.3
Prom 32:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    X, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <val?>
  void                    Return             l     %1.3
Prom 33:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     vapply, e1.0
  prom-           %1.2  = MkArg                    unboundValue, extends[0x5558d87fa490]_p34, e1.0
  prom-           %1.3  = MkArg                    unboundValue, extends[0x5558d87fa490]_p35, e1.0
  prom-           %1.4  = MkArg                    unboundValue, extends[0x5558d87fa490]_p36, e1.0
  prom-           %1.5  = MkArg                    unboundValue, extends[0x5558d87fa490]_p37, e1.0
  val?            %1.6  = Call               !     %1.1(%1.2, %1.3, %1.4, %1.5) e1.0   <val?_>
  void                    Return             l     %1.6
Prom 34:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    X, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 35:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    FUN, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 36:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    FUN.VALUE, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 37:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    USE.NAMES, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3

│ extends[0x5558d87fa490]                                                      │
└──────────────────────────────────────────────────────────────────────────────┘
