
┌──────────────────────────────────────────────────────────────────────────────┐
│ as[0x5558da5af350]                                                           │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;NonRefl0,NonRefl1,!Obj1 miss: 2      │
│ Properties:                                                                  │
├────── PIR Version After Optimizations
as[0x5558da5af350]
BB0
  goto BB1
BB1   <- [0]
  val?^           %1.0  = LdArg                    1
  val?^           %1.1  = LdArg                    0
  env             e1.2  = MkEnv              l     object=%1.1, Class=%1.0, strict(miss)=true, ext(miss)=missingArg, parent=<env 0x5558d398c378>, context 1
  prom-           %1.3  = MkArg                    unboundValue, as[0x5558da5af350]_p1, e1.2
  val?^ | miss    %1.4  = CastType                 up %1.3
  void                    StArg              lW    ext, %1.4, e1.2
  cp              %1.6  = Checkpoint                -> BB2 (default) | BB108 (if assume failed)
BB2   <- [1]
  val?^ | miss    %2.0  = LdVar              eR    .class1, <env 0x5558d398c378>
  lgl$#-          %2.1  = Identical                %2.0, function(x) <(rir::DispatchTable*)0x5558d395ed|...
  void                    Assume             D     %2.1, %1.6 (CallTarget@0x5558d575ed30[Call#1])
  prom-           %2.3  = MkArg                    unboundValue, as[0x5558da5af350]_p4 (!refl), e1.2
  ct              %2.4  = PushContext        lCL   %2.3, .class1(object), function(x) <(rir::DispatchTable*)0x5558d395ed|..., e1.2
  val?^           %2.5  = CastType                 up %2.3
  val?^ | miss    %2.6  = LdVar              eR    class, <env 0x5558d398c378>
  lgl$#-          %2.7  = Identical                <blt class>, %2.6   <true>
  cp              %2.8  = Checkpoint                -> BB4 (default) | BB3 (if assume failed)
BB108   <- [1]
  fs              %108.0 = FrameState         R     0x5558d6b0a7c0+0: [], env=e1.2
  void                    Deopt              !v    %108.0
BB4   <- [2]
  void                    Assume             D     %2.7, %2.8 (DeadBranchReached@0x5558d711c498[Test#0])
  env             e4.1  = MkEnv              l     x=%2.5, parent=<env 0x5558d398c378>, context 1
  val?            %4.2  = Force!<lazy>       !vr   %2.5,    <(str|cls)>
  val?            %4.3  = CallBuiltin        !v    class(%4.2) e4.1   <str$+>
  void                    StVar              lW    cl, %4.3, e4.1
  lgl$#-          %4.5  = IsType                   %4.3 isA val?+
  cp              %4.6  = Checkpoint                -> BB6 (default) | BB5 (if assume failed)
BB3   <- [2]
  fs              %3.0  = FrameState         R     0x5558d6b0a7c0+32: [], env=e1.2
  env             e3.1  = (MkEnv)            l     x=%2.5, parent=<env 0x5558d398c378>, context 1
  fs              %3.2  = FrameState         R     0x5558d395eb70+17: [<blt class>, %2.7], env=e3.1, next=%3.0
  void                    Deopt              !v    %3.2   !
BB6   <- [4]
  val?^ | miss    %6.0  = LdVar              eR    length, e4.1
  lgl$#-          %6.1  = Identical                <blt length>, %6.0   <true>
  void                    Assume             D     %6.1, %4.6 (DeadBranchReached@0x5558d711c498[Test#1])
  val             %6.3  = ChkMissing         e     %4.3
  void                    Assume             D     %4.5, %4.6 (Typecheck@0x5558d711c498[Type#2])
  val?+           %6.5  = CastType           d     dn %4.3   <str$+>
  (int|real)$-    %6.6  = CallSafeBuiltin    wed   length(%6.5)    <int$->
  lgl$#-          %6.7  = IsType                   %6.6 isA int$-
  cp              %6.8  = Checkpoint                -> BB8 (default) | BB7 (if assume failed)
BB5   <- [4]
  fs              %5.0  = FrameState         R     0x5558d6b0a7c0+32: [], env=e1.2
  fs              %5.1  = FrameState         R     0x5558d395eb70+105: [], env=e4.1, next=%5.0
  void                    Deopt              !v    %5.1   !
BB8   <- [6]
  void                    Assume             D     %6.7, %6.8 (Typecheck@0x5558d711c498[Type#5])
  int$-           %8.1  = CastType           d     dn %6.6
  lgl$-           %8.2  = Gt                 d     %8.1, 1L, elided   <lgl$->
  lgl$#-          %8.3  = CheckTrueFalse     e     %8.2
  void                    Branch                   %8.3 -> BB107 (if true) | BB9 (if false)
BB7   <- [6]
  fs              %7.0  = FrameState         R     0x5558d6b0a7c0+32: [], env=e1.2
  fs              %7.1  = FrameState         R     0x5558d395eb70+196: [%6.6], env=e4.1, next=%7.0
  void                    Deopt              !v    %7.1   !
BB107   <- [8]
  val?            %107.0 = Extract2_1D        wed   %6.5, 1L, elided   <val?_>
  goto BB10
BB9   <- [8]
  goto BB10
BB10   <- [9, 107]
  val?            %10.0 = Phi                      %6.5:BB9, %107.0:BB107
  val?            %10.1 = PopContext         C     %10.0, %2.4   <str$+>
  void                    StVar              lW    thisClass, %10.1, e1.2
  cp              %10.3 = Checkpoint                -> BB12 (default) | BB11 (if assume failed)
BB12   <- [10]
  val?^ | miss    %12.0 = LdVar              eR    .identC, e1.2
  lgl$#-          %12.1 = Identical                %12.0, function(c1=NULL, c2=NULL) <(rir::DispatchTabl|...
  void                    Assume             D     %12.1, %10.3 (CallTarget@0x5558d575ed30[Call#2])
  prom-           %12.3 = MkArg                    unboundValue, as[0x5558da5af350]_p5 (!refl), e1.2
  prom-           %12.4 = MkArg                    unboundValue, as[0x5558da5af350]_p6, e1.2
  val?            %12.5 = StaticCall         !v    .identC[0x5558ddd8c4e0](%12.3, %12.4) e1.2   <lgl$->
  lgl$#-          %12.6 = IsType                   %12.5 isA lgl$-
  cp              %12.7 = Checkpoint                -> BB14 (default) | BB13 (if assume failed)
BB11   <- [10]
  fs              %11.0 = FrameState         R     0x5558d6b0a7c0+46: [], env=e1.2
  void                    Deopt              !v    %11.0   !
BB14   <- [12]
  void                    Assume             D     %12.6, %12.7 (Typecheck@0x5558d575ed30[Type#7])
  lgl$-           %14.1 = CastType           d     dn %12.5
  lgl$-           %14.2 = AsLogical                %14.1
  lgl$#-          %14.3 = Identical                %14.2, true
  void                    Branch                   %14.3 -> BB106 (if true) | BB15 (if false)
BB13   <- [12]
  fs              %13.0 = FrameState         R     0x5558d6b0a7c0+83: [%12.5], env=e1.2
  void                    Deopt              !v    %13.0   !
BB106   <- [14]
  goto BB18
BB15   <- [14]
  val?^ | miss    %15.0 = LdVar              eR    .identC, e1.2
  lgl$#-          %15.1 = Identical                %15.0, function(c1=NULL, c2=NULL) <(rir::DispatchTabl|...
  void                    Assume             D     %15.1, %12.7 (CallTarget@0x5558d575ed30[Call#3])
  prom-           %15.3 = MkArg                    unboundValue, as[0x5558da5af350]_p7, e1.2
  val?            %15.4 = StaticCall         !v    .identC[0x5558dae92f00](%15.3, "ANY") e1.2   <lgl$->
  lgl$#-          %15.5 = IsType                   %15.4 isA lgl$-
  cp              %15.6 = Checkpoint                -> BB17 (default) | BB16 (if assume failed)
BB18   <- [17, 106]
  lgl$-           %18.0 = Phi                      %17.3:BB17, %14.2:BB106
  cp              %18.1 = Checkpoint                -> BB20 (default) | BB19 (if assume failed)
BB17   <- [15]
  void                    Assume             D     %15.5, %15.6 (Typecheck@0x5558d575ed30[Type#9])
  lgl$-           %17.1 = CastType           d     dn %15.4
  lgl$-           %17.2 = AsLogical                %17.1
  lgl$-           %17.3 = LOr                      %14.2, %17.2
  goto BB18
BB16   <- [15]
  fs              %16.0 = FrameState         R     0x5558d6b0a7c0+132: [%14.2, %15.4], env=e1.2
  void                    Deopt              !v    %16.0   !
BB20   <- [18]
  lgl$#-          %20.0 = CheckTrueFalse     e     %18.0
  void                    Branch                   %20.0 -> BB105 (if true) | BB21 (if false)
BB19   <- [18]
  fs              %19.0 = FrameState         R     0x5558d6b0a7c0+139: [%18.0], env=e1.2
  void                    Deopt              !v    %19.0   !
BB105   <- [20]
  val?^ | miss    %105.0 = LdVar              eR    object, e1.2
  void                    Visible            v     
  val?            %105.2 = Force!<wrapped>    !     %105.0, e1.2   <(str|cls)->
  goto BB46
BB21   <- [20]
  val?^ | miss    %21.0 = LdVar              eR    .classEnv, e1.2
  lgl$#-          %21.1 = Identical                %21.0, function(Class, default=.requirePackage("metho|...
  void                    Assume             D     %21.1, %18.1 (CallTarget@0x5558d575ed30[Call#4])
  prom-           %21.3 = MkArg                    unboundValue, as[0x5558da5af350]_p8, e1.2
  val?            %21.4 = StaticCall         !v    .classEnv[0x5558da709e30](%21.3, missingArg, false) { 0 2n } e1.2   <env->
  void                    StVar              lW    where, %21.4, e1.2
  cp              %21.6 = Checkpoint                -> BB23 (default) | BB22 (if assume failed)
BB46   <- [105, 45]
  val?            %46.0 = Phi                      %45.0:BB45, %105.2:BB105
  void                    Return             l     %46.0
BB23   <- [21]
  val?^ | miss    %23.0 = LdVar              eR    getGeneric, e1.2
  lgl$#-          %23.1 = Identical                %23.0, function(f, mustFind=FALSE, where, package="")|...
  void                    Assume             D     %23.1, %21.6 (CallTarget@0x5558d575ed30[Call#5])
  prom-           %23.3 = MkArg                    unboundValue, as[0x5558da5af350]_p9 (!refl), e1.2
  val?            %23.4 = StaticCall         !v    getGeneric[0x5558de836570]("coerce", missingArg, %23.3) { 0 2n } e1.2   <cls>
  void                    StVar              lW    coerceFun, %23.4, e1.2
  cp              %23.6 = Checkpoint                -> BB25 (default) | BB24 (if assume failed)
BB22   <- [21]
  fs              %22.0 = FrameState         R     0x5558d6b0a7c0+224: [], env=e1.2
  void                    Deopt              !v    %22.0   !
BB25   <- [23]
  val?^ | miss    %25.0 = LdVar              eR    .getMethodsTable, e1.2
  lgl$#-          %25.1 = Identical                %25.0, function(fdef, env=environment(fdef), check=TR|...
  void                    Assume             D     %25.1, %23.6 (CallTarget@0x5558d575ed30[Call#6])
  prom-           %25.3 = MkArg                    unboundValue, as[0x5558da5af350]_p10 (!refl), e1.2
  prom-           %25.4 = MkArg                    unboundValue, as[0x5558da5af350]_p11, e1.2
  val?            %25.5 = StaticCall         !v    .getMethodsTable[0x5558de6d3670](%25.3, %25.4, missingArg, true) { 0 1 3n } e1.2   <env->
  void                    StVar              lW    coerceMethods, %25.5, e1.2
  lgl$-           %25.7 = Is                       %25.5, NULL
  cp              %25.8 = Checkpoint                -> BB27 (default) | BB26 (if assume failed)
BB24   <- [23]
  fs              %24.0 = FrameState         R     0x5558d6b0a7c0+283: [], env=e1.2
  void                    Deopt              !v    %24.0   !
BB27   <- [25]
  val?^ | miss    %27.0 = LdVar              eR    .quickCoerceSelect, e1.2
  lgl$#-          %27.1 = Identical                %27.0, function(from, to, fdef, methods, where) <(rir|...
  void                    Assume             D     %27.1, %25.8 (CallTarget@0x5558d575ed30[Call#8])
  prom-           %27.3 = MkArg                    unboundValue, as[0x5558da5af350]_p13, e1.2
  prom-           %27.4 = MkArg                    unboundValue, as[0x5558da5af350]_p14, e1.2
  prom-           %27.5 = MkArg                    unboundValue, as[0x5558da5af350]_p15, e1.2
  prom-           %27.6 = MkArg                    unboundValue, as[0x5558da5af350]_p16 (!refl), e1.2
  prom-           %27.7 = MkArg                    unboundValue, as[0x5558da5af350]_p17, e1.2
  ct              %27.8 = PushContext        lCL   %27.3, %27.4, %27.5, %27.6, %27.7, .quickCoerceSelect(thisClass, Class, coerceFun|..., function(from, to, fdef, methods, where) <(rir|..., e1.2
  val?^           %27.9 = CastType                 up %27.7
  val?^           %27.10 = CastType                 up %27.6
  val?^           %27.11 = CastType                 up %27.5
  val?^           %27.12 = CastType                 up %27.4
  val?^           %27.13 = CastType                 up %27.3
  cp              %27.14 = Checkpoint                -> BB29 (default) | BB28 (if assume failed)
BB26   <- [25]
  fs              %26.0 = FrameState         R     0x5558d6b0a7c0+351: [], env=e1.2
  void                    Deopt              !v    %26.0   !
BB29   <- [27]
  lgl$#-          %29.0 = CheckTrueFalse     e     %25.7
  env             e29.1 = MkEnv              l     from=%27.13, to=%27.12, fdef=%27.11, methods=%27.10, where=%27.9, parent=<env 0x5558d398c378>, context 1
  void                    Branch                   %29.0 -> BB104 (if true) | BB30 (if false)
BB28   <- [27]
  fs              %28.0 = FrameState         R     0x5558d6b0a7c0+403: [], env=e1.2
  env             e28.1 = (MkEnv)            l     from=%27.13, to=%27.12, fdef=%27.11, methods=%27.10, where=%27.9, parent=<env 0x5558d398c378>, context 1
  fs              %28.2 = FrameState         R     0x5558d6d4d800+9: [%25.5], env=e28.1, next=%28.0
  void                    Deopt              !v    %28.2   !
BB104   <- [29]
  goto BB39
BB30   <- [29]
  val?^ | miss    %30.0 = LdVar              eR    is.environment, <env 0x5558d398c378>
  lgl$#-          %30.1 = Identical                <blt is.environment>, %30.0   <true>
  void                    Assume             D     %30.1, %27.14 (DeadBranchReached@0x5558d3ae1420[Test#0])
  lgl$#-          %30.3 = CallSafeBuiltin    wed   is.environment(%25.5)    <lgl$->
  cp              %30.4 = Checkpoint                -> BB32 (default) | BB31 (if assume failed)
BB39   <- [104, 38]
  val?            %39.0 = Phi                      %38.0:BB38, nil:BB104
  val?            %39.1 = PopContext         C     %39.0, %27.8   <(nil|cls)>
  lgl$-           %39.2 = Is                       %39.1, NULL
  void                    StVar              lW    asMethod, %39.1, e1.2
  cp              %39.4 = Checkpoint                -> BB41 (default) | BB40 (if assume failed)
BB32   <- [30]
  void                    Branch                   %30.3 -> BB34 (if true) | BB33 (if false)
BB31   <- [30]
  fs              %31.0 = FrameState         R     0x5558d6b0a7c0+403: [], env=e1.2
  fs              %31.1 = FrameState         R     0x5558d6d4d800+116: [%30.3], env=e29.1, next=%31.0
  void                    Deopt              !v    %31.1   !
BB41   <- [39]
  val             %41.0 = ChkMissing         e     %39.1
  lgl$#-          %41.1 = CheckTrueFalse     e     %39.2
  void                    Branch                   %41.1 -> BB48 (if true) | BB42 (if false)
BB40   <- [39]
  fs              %40.0 = FrameState         R     0x5558d6b0a7c0+417: [], env=e1.2
  void                    Deopt              !v    %40.0   !
BB34   <- [32]
  val?^ | miss    %34.0 = LdVar              eR    .findMethodInTable, <env 0x5558d398c378>
  lgl$#-          %34.1 = Identical                %34.0, function(signature, table, fdef=NULL, expdSig=|...
  void                    Assume             D     %34.1, %30.4 (CallTarget@0x5558d3ae1420[Call#8])
  prom-           %34.3 = MkArg                    unboundValue, as[0x5558da5af350]_p57, e29.1
  prom-           %34.4 = MkArg                    unboundValue, as[0x5558da5af350]_p60, e29.1
  val?            %34.5 = StaticCall         !v    .findMethodInTable[0x5558deb63380](%34.3, %34.4) e29.1   <(nil|cls)>
  void                    StVar              lW    method, %34.5, e29.1
  cp              %34.7 = Checkpoint                -> BB36 (default) | BB35 (if assume failed)
BB33   <- [32]
  (cls|spec|blt)  %33.0 = LdFun              !v    @, <env 0x5558d398c378>
  fs              %33.1 = FrameState         R     0x5558d6b0a7c0+403: [], env=e1.2
  fs              %33.2 = FrameState         R     0x5558d6d4d800+132: [%33.0], env=e29.1, next=%33.1
  void                    Deopt              !v    %33.2, DeadCall@0x5558d3ae1420[Call#1], %33.0   !
BB48   <- [41]
  val?^ | miss    %48.0 = LdVar              eR    c, e1.2
  lgl$#-          %48.1 = Identical                <blt c>, %48.0   <true>
  void                    Assume             D     %48.1, %39.4 (DeadBranchReached@0x5558d575ed30[Test#0])
  val?^ | miss    %48.3 = LdVar              eR    thisClass, e1.2
  lgl$#-          %48.4 = IsType                   %48.3 isA val?~+ | miss
  void                    Assume             D     %48.4, %39.4 (Typecheck@0x5558d575ed30[Type#28])
  val?~+ | miss   %48.6 = CastType           d     dn %48.3
  val?+           %48.7 = Force!<value>            %48.6,    <str$+>
  val?^ | miss    %48.8 = LdVar              eR    Class, e1.2
  val?            %48.9 = Force!<wrapped>    !v    %48.8, e1.2   <str$+>
  val?            %48.10 = NamedCall          !v    <blt c>(from=%48.7, to=%48.9) e1.2   <str+>
  void                    StVar              lW    sig, %48.10, e1.2
  (cls|spec|blt)  %48.12 = LdFun              !v    selectMethod, <0x5558d8153998>, e1.2
  prom-           %48.13 = MkArg                    unboundValue, as[0x5558da5af350]_p20, e1.2
  prom-           %48.14 = MkArg                    unboundValue, as[0x5558da5af350]_p21, e1.2
  prom-           %48.15 = MkArg                    unboundValue, as[0x5558da5af350]_p22, e1.2
  val?            %48.16 = NamedCall          !v    %48.12("coerce", %48.13, optional=true, useInherited=false, fdef=%48.14, mlist=%48.15) e1.2   <nil->
  lgl$-           %48.17 = Is                       %48.16, NULL
  void                    StVar              lW    asMethod, %48.16, e1.2
  val             %48.19 = ChkMissing         e     %48.16
  lgl$#-          %48.20 = CheckTrueFalse     e     %48.17
  void                    Branch                   %48.20 -> BB50 (if true) | BB49 (if false)
BB42   <- [41]
  goto BB43
BB36   <- [34]
  val?^ | miss    %36.0 = LdVar              eR    is.environment, e29.1
  lgl$#-          %36.1 = Identical                <blt is.environment>, %36.0   <true>
  void                    Assume             D     %36.1, %34.7 (DeadBranchReached@0x5558d3ae1420[Test#5])
  val             %36.3 = ChkMissing         e     %34.5
  lgl$#-          %36.4 = CallSafeBuiltin    wed   is.environment(%34.5) 
  void                    Branch                   %36.4 -> BB103 (if true) | BB37 (if false)
BB35   <- [34]
  fs              %35.0 = FrameState         R     0x5558d6b0a7c0+403: [], env=e1.2
  fs              %35.1 = FrameState         R     0x5558d6d4d800+703: [], env=e29.1, next=%35.0
  void                    Deopt              !v    %35.1   !
BB50   <- [48]
  void                    StVar              lW    canCache, true, e1.2
  void                    StVar              lW    inherited, false, e1.2
  cp              %50.2 = Checkpoint                -> BB52 (default) | BB51 (if assume failed)
BB49   <- [48]
  goto BB43
BB43   <- [42, 49, 74]
  val?^ | miss    %43.0 = LdVar              eR    strict, e1.2
  void                    Visible            v     
  val?            %43.2 = Force!<lazy>       !     %43.0, e1.2   <lgl$->
  lgl$#-          %43.3 = CheckTrueFalse     we    %43.2
  void                    Branch                   %43.3 -> BB47 (if true) | BB44 (if false)
BB103   <- [36]
  goto BB38
BB37   <- [36]
  goto BB38
BB52   <- [50]
  val?^ | miss    %52.0 = LdVar              eR    is, e1.2
  lgl$#-          %52.1 = Identical                %52.0, function(object, class2) <(rir::DispatchTable*|...
  void                    Assume             D     %52.1, %50.2 (CallTarget@0x5558d575ed30[Call#12])
  prom-           %52.3 = MkArg                    unboundValue, as[0x5558da5af350]_p24, e1.2
  prom-           %52.4 = MkArg                    unboundValue, as[0x5558da5af350]_p25, e1.2
  val?            %52.5 = Call               !v    function(object, class2) <(rir::DispatchTable*|...(%52.3, %52.4) e1.2   <lgl$->
  lgl$#-          %52.6 = IsType                   %52.5 isA lgl$-
  cp              %52.7 = Checkpoint                -> BB54 (default) | BB53 (if assume failed)
BB51   <- [50]
  fs              %51.0 = FrameState         R     0x5558d6b0a7c0+742: [], env=e1.2
  void                    Deopt              !v    %51.0   !
BB47   <- [43]
  (cls|spec|blt)  %47.0 = LdFun              !     asMethod, e1.2
  prom-           %47.1 = MkArg                    unboundValue, as[0x5558da5af350]_p19, e1.2
  val?            %47.2 = Call               !     %47.0(%47.1) e1.2   <val?>
  goto BB45
BB44   <- [43]
  (cls|spec|blt)  %44.0 = LdFun              !     asMethod, e1.2
  prom-           %44.1 = MkArg                    unboundValue, as[0x5558da5af350]_p18, e1.2
  val?            %44.2 = NamedCall          !     %44.0(%44.1, strict=false) e1.2   <(int|cls)>
  goto BB45
BB38   <- [103, 37]
  val?            %38.0 = Phi                      %34.5:BB37, nil:BB103
  goto BB39
BB54   <- [52]
  void                    Assume             D     %52.6, %52.7 (Typecheck@0x5558d575ed30[Type#39])
  lgl$-           %54.1 = CastType           d     dn %52.5
  lgl$#-          %54.2 = CheckTrueFalse     e     %54.1
  void                    Branch                   %54.2 -> BB81 (if true) | BB55 (if false)
BB53   <- [52]
  fs              %53.0 = FrameState         R     0x5558d6b0a7c0+779: [%52.5], env=e1.2
  void                    Deopt              !v    %53.0   !
BB45   <- [44, 47]
  val?            %45.0 = Phi                      %44.2:BB44, %47.2:BB47
  goto BB46
BB81   <- [54]
  val?^ | miss    %81.0 = LdVar              eR    getClassDef, e1.2
  lgl$#-          %81.1 = Identical                %81.0, function(Class, where=topenv(parent.frame()), |...
  void                    Assume             D     %81.1, %52.7 (CallTarget@0x5558d575ed30[Call#13])
  prom-           %81.3 = MkArg                    unboundValue, as[0x5558da5af350]_p40, e1.2
  prom-           %81.4 = MkArg                    unboundValue, as[0x5558da5af350]_p41, e1.2
  val?            %81.5 = StaticCall         !v    getClassDef[0x5558d6df0090](%81.3, %81.4) e1.2   <other>
  void                    StVar              lW    ClassDef, %81.5, e1.2
  cp              %81.7 = Checkpoint                -> BB83 (default) | BB82 (if assume failed)
BB55   <- [54]
  goto BB56
BB83   <- [81]
  val?^ | miss    %83.0 = LdVar              eR    isFALSE, e1.2
  lgl$#-          %83.1 = Identical                %83.0, function(x) <(rir::DispatchTable*)0x5558d63992|...
  void                    Assume             D     %83.1, %81.7 (CallTarget@0x5558d575ed30[Call#14])
  val?^ | miss    %83.3 = LdVar              eR    ext, e1.2
  val?            %83.4 = Force!<lazy>       !v    %83.3, e1.2   <other>
  prom-           %83.5 = MkArg                    %83.4, as[0x5558da5af350]_p42 (!refl), 
  val?            %83.6 = StaticCall         !v    isFALSE[0x5558d5d83500](%83.5) e1.2   <lgl$->
  lgl$#-          %83.7 = IsType                   %83.6 isA lgl$-
  cp              %83.8 = Checkpoint                -> BB85 (default) | BB84 (if assume failed)
BB82   <- [81]
  fs              %82.0 = FrameState         R     0x5558d6b0a7c0+846: [], env=e1.2
  void                    Deopt              !v    %82.0   !
BB56   <- [55, 97]
  cp              %56.0 = Checkpoint                -> BB58 (default) | BB57 (if assume failed)
BB85   <- [83]
  void                    Assume             D     %83.7, %83.8 (Typecheck@0x5558d575ed30[Type#44])
  lgl$-           %85.1 = CastType           d     dn %83.6
  lgl$#-          %85.2 = CheckTrueFalse     e     %85.1
  void                    Branch                   %85.2 -> BB102 (if true) | BB86 (if false)
BB84   <- [83]
  fs              %84.0 = FrameState         R     0x5558d6b0a7c0+878: [%83.6], env=e1.2
  void                    Deopt              !v    %84.0   !
BB58   <- [56]
  val?^ | miss    %58.0 = LdVar              eR    asMethod, e1.2
  lgl$#-          %58.1 = IsType                   %58.0 isA val?~- | miss
  void                    Assume             D     %58.1, %56.0 (Typecheck@0x5558d575ed30[Type#74])
  val?~- | miss   %58.3 = CastType           d     dn %58.0
  val?-           %58.4 = Force!<value>            %58.3,    <(nil|cls)->
  lgl$-           %58.5 = Is                       %58.4, NULL
  lgl$-           %58.6 = AsLogical                %58.5
  lgl$#-          %58.7 = Identical                %58.6, false
  void                    Branch                   %58.7 -> BB80 (if true) | BB59 (if false)
BB57   <- [56]
  fs              %57.0 = FrameState         R     0x5558d6b0a7c0+1324: [], env=e1.2
  void                    Deopt              !v    %57.0   !
BB102   <- [85]
  (cls|spec|blt)  %102.0 = LdFun              !v    stop, e1.2
  fs              %102.1 = FrameState         R     0x5558d6b0a7c0+1283: [%102.0], env=e1.2
  void                    Deopt              !v    %102.1, DeadCall@0x5558d575ed30[Call#24], %102.0   !
BB86   <- [85]
  val?^ | miss    %86.0 = LdVar              eR    isTRUE, e1.2
  lgl$#-          %86.1 = Identical                %86.0, function(x) <(rir::DispatchTable*)0x5558d52435|...
  void                    Assume             D     %86.1, %83.8 (CallTarget@0x5558d575ed30[Call#15])
  val?^ | miss    %86.3 = LdVar              eR    ext, e1.2
  val?            %86.4 = Force!<wrapped>    !v    %86.3, e1.2   <other>
  prom-           %86.5 = MkArg                    %86.4, as[0x5558da5af350]_p43 (!refl), 
  val?            %86.6 = StaticCall         !v    isTRUE[0x5558d7699c90](%86.5) e1.2   <lgl$->
  lgl$#-          %86.7 = IsType                   %86.6 isA lgl$-
  cp              %86.8 = Checkpoint                -> BB88 (default) | BB87 (if assume failed)
BB80   <- [58]
  goto BB62
BB59   <- [58]
  val?^ | miss    %59.0 = LdVar              eR    extends, e1.2
  lgl$#-          %59.1 = Identical                %59.0, function(class1, class2, maybe=TRUE, fullInfo=|...
  void                    Assume             D     %59.1, %56.0 (CallTarget@0x5558d575ed30[Call#27])
  prom-           %59.3 = MkArg                    unboundValue, as[0x5558da5af350]_p26, e1.2
  prom-           %59.4 = MkArg                    unboundValue, as[0x5558da5af350]_p27, e1.2
  val?            %59.5 = Call               !v    function(class1, class2, maybe=TRUE, fullInfo=|...(%59.3, %59.4) e1.2   <lgl$->
  lgl$#-          %59.6 = IsType                   %59.5 isA lgl$-
  cp              %59.7 = Checkpoint                -> BB61 (default) | BB60 (if assume failed)
BB88   <- [86]
  void                    Assume             D     %86.7, %86.8 (Typecheck@0x5558d575ed30[Type#46])
  lgl$-           %88.1 = CastType           d     dn %86.6
  lgl$#-          %88.2 = CheckTrueFalse     e     %88.1
  void                    Branch                   %88.2 -> BB101 (if true) | BB89 (if false)
BB87   <- [86]
  fs              %87.0 = FrameState         R     0x5558d6b0a7c0+921: [%86.6], env=e1.2
  void                    Deopt              !v    %87.0   !
BB62   <- [61, 80]
  lgl$-           %62.0 = Phi                      %61.3:BB61, %58.6:BB80
  cp              %62.1 = Checkpoint                -> BB64 (default) | BB63 (if assume failed)
BB61   <- [59]
  void                    Assume             D     %59.6, %59.7 (Typecheck@0x5558d575ed30[Type#77])
  lgl$-           %61.1 = CastType           d     dn %59.5
  lgl$-           %61.2 = AsLogical                %61.1
  lgl$-           %61.3 = LAnd                     %58.6, %61.2
  goto BB62
BB60   <- [59]
  fs              %60.0 = FrameState         R     0x5558d6b0a7c0+1387: [%58.6, %59.5], env=e1.2
  void                    Deopt              !v    %60.0   !
BB101   <- [88]
  (cls|spec|blt)  %101.0 = LdFun              !v    .makeAsMethod, e1.2
  fs              %101.1 = FrameState         R     0x5558d6b0a7c0+1212: [%101.0], env=e1.2
  void                    Deopt              !v    %101.1, DeadCall@0x5558d575ed30[Call#23], %101.0   !
BB89   <- [88]
  (cls|spec|blt)  %89.0 = LdFun              !v    @, <0x5558d3384bd8>, e1.2
  prom-           %89.1 = MkArg                    unboundValue, as[0x5558da5af350]_p44, e1.2
  prom-           %89.2 = MkArg                    unboundValue, as[0x5558da5af350]_p45, e1.2
  val?            %89.3 = Call               !v    %89.0(%89.1, %89.2) e1.2   <cls->
  void                    StVar              lW    test, %89.3, e1.2
  cp              %89.5 = Checkpoint                -> BB91 (default) | BB90 (if assume failed)
BB64   <- [62]
  lgl$#-          %64.0 = CheckTrueFalse     e     %62.0
  void                    Branch                   %64.0 -> BB79 (if true) | BB65 (if false)
BB63   <- [62]
  fs              %63.0 = FrameState         R     0x5558d6b0a7c0+1394: [%62.0], env=e1.2
  void                    Deopt              !v    %63.0   !
BB91   <- [89]
  val?^ | miss    %91.0 = LdVar              eR    .makeAsMethod, e1.2
  lgl$#-          %91.1 = Identical                %91.0, function(expr, simple, Class, ClassDef, where)|...
  void                    Assume             D     %91.1, %89.5 (CallTarget@0x5558d575ed30[Call#17])
  prom-           %91.3 = MkArg                    unboundValue, as[0x5558da5af350]_p46, e1.2
  prom-           %91.4 = MkArg                    unboundValue, as[0x5558da5af350]_p49, e1.2
  prom-           %91.5 = MkArg                    unboundValue, as[0x5558da5af350]_p52, e1.2
  prom-           %91.6 = MkArg                    unboundValue, as[0x5558da5af350]_p53, e1.2
  prom-           %91.7 = MkArg                    unboundValue, as[0x5558da5af350]_p54, e1.2
  val?            %91.8 = StaticCall         !v    .makeAsMethod[0x5558d8f3c5c0](%91.3, %91.4, %91.5, %91.6, %91.7) e1.2   <cls->
  void                    StVar              lW    asMethod, %91.8, e1.2
  cp              %91.10 = Checkpoint                -> BB93 (default) | BB92 (if assume failed)
BB90   <- [89]
  fs              %90.0 = FrameState         R     0x5558d6b0a7c0+983: [], env=e1.2
  void                    Deopt              !v    %90.0   !
BB79   <- [64]
  (cls|spec|blt)  %79.0 = LdFun              !v    getClassDef, e1.2
  fs              %79.1 = FrameState         R     0x5558d6b0a7c0+1410: [%79.0], env=e1.2
  void                    Deopt              !v    %79.1, DeadCall@0x5558d575ed30[Call#28], %79.0   !
BB65   <- [64]
  val?^ | miss    %65.0 = LdVar              eR    asMethod, e1.2
  lgl$#-          %65.1 = IsType                   %65.0 isA val?~- | miss
  void                    Assume             D     %65.1, %62.1 (Typecheck@0x5558d575ed30[Type#86])
  val?~- | miss   %65.3 = CastType           d     dn %65.0
  val?-           %65.4 = Force!<value>            %65.3,    <(nil|cls)->
  lgl$-           %65.5 = Is                       %65.4, NULL
  lgl$#-          %65.6 = CheckTrueFalse     e     %65.5
  void                    Branch                   %65.6 -> BB78 (if true) | BB66 (if false)
BB93   <- [91]
  val?^ | miss    %93.0 = LdVar              eR    is.function, e1.2
  lgl$#-          %93.1 = Identical                <blt is.function>, %93.0   <true>
  void                    Assume             D     %93.1, %91.10 (DeadBranchReached@0x5558d575ed30[Test#1])
  val?^ | miss    %93.3 = LdVar              eR    test, e1.2
  lgl$#-          %93.4 = IsType                   %93.3 isA val?~- | miss
  void                    Assume             D     %93.4, %91.10 (Typecheck@0x5558d575ed30[Type#61])
  val?~- | miss   %93.6 = CastType           d     dn %93.3
  val?-           %93.7 = Force!<value>            %93.6,    <cls->
  lgl$#-          %93.8 = CallSafeBuiltin    wed   is.function(%93.7)    <lgl$->
  cp              %93.9 = Checkpoint                -> BB95 (default) | BB94 (if assume failed)
BB92   <- [91]
  fs              %92.0 = FrameState         R     0x5558d6b0a7c0+1049: [], env=e1.2
  void                    Deopt              !v    %92.0   !
BB78   <- [65]
  (cls|spec|blt)  %78.0 = LdFun              !v    selectMethod, <0x5558d8153998>, e1.2
  prom-           %78.1 = MkArg                    unboundValue, as[0x5558da5af350]_p36, e1.2
  prom-           %78.2 = MkArg                    unboundValue, as[0x5558da5af350]_p37, e1.2
  prom-           %78.3 = MkArg                    unboundValue, as[0x5558da5af350]_p38, e1.2
  prom-           %78.4 = MkArg                    unboundValue, as[0x5558da5af350]_p39, e1.2
  val?            %78.5 = NamedCall          !v    %78.0("coerce", %78.1, optional=true, %78.2, fdef=%78.3, mlist=%78.4) e1.2   <cls>
  void                    StVar              lW    asMethod, %78.5, e1.2
  void                    StVar              lW    inherited, true, e1.2
  goto BB69
BB66   <- [65]
  val?^ | miss    %66.0 = LdVar              eR    canCache, e1.2
  lgl$#-          %66.1 = IsType                   %66.0 isA lgl$-
  void                    Assume             D     %66.1, %62.1 (Typecheck@0x5558d575ed30[Type#87])
  lgl$-           %66.3 = CastType           d     dn %66.0
  lgl$#-          %66.4 = CheckTrueFalse     e     %66.3
  void                    Branch                   %66.4 -> BB77 (if true) | BB67 (if false)
BB95   <- [93]
  lgl$#-          %95.0 = Not                d     %93.8, elided
  void                    Branch                   %93.8 -> BB98 (if true) | BB96 (if false)
BB94   <- [93]
  fs              %94.0 = FrameState         R     0x5558d6b0a7c0+1140: [%93.8], env=e1.2
  void                    Deopt              !v    %94.0   !
BB69   <- [78, 68]
  val?^ | miss    %69.0 = LdVar              eR    asMethod, e1.2
  val?            %69.1 = Force!<value>      !v    %69.0, e1.2   <cls>
  lgl$-           %69.2 = Is                       %69.1, NULL
  cp              %69.3 = Checkpoint                -> BB71 (default) | BB70 (if assume failed)
BB77   <- [66]
  val?^ | miss    %77.0 = LdVar              eR    .asCoerceMethod, e1.2
  lgl$#-          %77.1 = Identical                %77.0, function(def, thisClass, ClassDef, replace, wh|...
  void                    Assume             D     %77.1, %62.1 (CallTarget@0x5558d575ed30[Call#30])
  prom-           %77.3 = MkArg                    unboundValue, as[0x5558da5af350]_p32, e1.2
  prom-           %77.4 = MkArg                    unboundValue, as[0x5558da5af350]_p33, e1.2
  prom-           %77.5 = MkArg                    unboundValue, as[0x5558da5af350]_p34, e1.2
  prom-           %77.6 = MkArg                    unboundValue, as[0x5558da5af350]_p35, e1.2
  val?            %77.7 = StaticCall         !v    .asCoerceMethod[0x5558d96b2c70](%77.3, %77.4, %77.5, false, %77.6) e1.2   <cls>
  void                    StVar              lW    asMethod, %77.7, e1.2
  goto BB68
BB67   <- [66]
  goto BB68
BB98   <- [95]
  val?^ | miss    %98.0 = LdVar              eR    isTRUE, e1.2
  lgl$#-          %98.1 = Identical                %98.0, function(x) <(rir::DispatchTable*)0x5558d52435|...
  void                    Assume             D     %98.1, %93.9 (CallTarget@0x5558d575ed30[Call#21])
  prom-           %98.3 = MkArg                    unboundValue, as[0x5558da5af350]_p55, e1.2
  val?            %98.4 = StaticCall         !v    isTRUE[0x5558db23ca90](%98.3) e1.2   <lgl$->
  lgl$#-          %98.5 = IsType                   %98.4 isA lgl$-
  cp              %98.6 = Checkpoint                -> BB100 (default) | BB99 (if assume failed)
BB96   <- [95]
  goto BB97
BB71   <- [69]
  lgl$#-          %71.0 = CheckTrueFalse     e     %69.2
  void                    Branch                   %71.0 -> BB76 (if true) | BB72 (if false)
BB70   <- [69]
  fs              %70.0 = FrameState         R     0x5558d6b0a7c0+1757: [%69.1], env=e1.2
  void                    Deopt              !v    %70.0   !
BB68   <- [67, 77]
  goto BB69
BB100   <- [98]
  void                    Assume             D     %98.5, %98.6 (Typecheck@0x5558d575ed30[Type#65])
  lgl$-           %100.1 = CastType           d     dn %98.4
  lgl$-           %100.2 = AsLogical                %100.1
  lgl$-           %100.3 = LOr                      %95.0, %100.2
  goto BB97
BB99   <- [98]
  fs              %99.0 = FrameState         R     0x5558d6b0a7c0+1186: [%95.0, %98.4], env=e1.2
  void                    Deopt              !v    %99.0   !
BB97   <- [100, 96]
  lgl$-           %97.0 = Phi                      %100.3:BB100, %95.0:BB96
  void                    StVar              lW    canCache, %97.0, e1.2
  goto BB56
BB76   <- [71]
  (cls|spec|blt)  %76.0 = LdFun              !v    stop, e1.2
  fs              %76.1 = FrameState         R     0x5558d6b0a7c0+1881: [%76.0], env=e1.2
  void                    Deopt              !v    %76.1, DeadCall@0x5558d575ed30[Call#34], %76.0   !
BB72   <- [71]
  val?^ | miss    %72.0 = LdVar              eR    canCache, e1.2
  lgl$#-          %72.1 = IsType                   %72.0 isA lgl$-
  void                    Assume             D     %72.1, %69.3 (Typecheck@0x5558d575ed30[Type#99])
  lgl$-           %72.3 = CastType           d     dn %72.0
  lgl$#-          %72.4 = CheckTrueFalse     e     %72.3
  void                    Branch                   %72.4 -> BB75 (if true) | BB73 (if false)
BB75   <- [72]
  val?^ | miss    %75.0 = LdVar              eR    cacheMethod, e1.2
  lgl$#-          %75.1 = Identical                %75.0, function(f, sig, def, args=names(sig), fdef, i|...
  void                    Assume             D     %75.1, %69.3 (CallTarget@0x5558d575ed30[Call#33])
  prom-           %75.3 = MkArg                    unboundValue, as[0x5558da5af350]_p28, e1.2
  prom-           %75.4 = MkArg                    unboundValue, as[0x5558da5af350]_p29, e1.2
  prom-           %75.5 = MkArg                    unboundValue, as[0x5558da5af350]_p30, e1.2
  prom-           %75.6 = MkArg                    unboundValue, as[0x5558da5af350]_p31, e1.2
  val?            %75.7 = StaticCall         !v    cacheMethod[0x5558d880d760]("coerce", %75.3, %75.4, missingArg, %75.5, %75.6) { 0 1 2 4n 5n } e1.2
  goto BB74
BB73   <- [72]
  goto BB74
BB74   <- [73, 75]
  goto BB43
Prom 1:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     possibleExtends, <0x5558d8177040>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, as[0x5558da5af350]_p2, e1.0
  prom-           %1.3  = MkArg                    unboundValue, as[0x5558da5af350]_p3, e1.0
  val?            %1.4  = Call               !     %1.1(%1.2, %1.3) e1.0   <other>
  void                    Return             l     %1.4
Prom 2:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    thisClass, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$+>
  void                    Return             l     %1.3
Prom 3:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    Class, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <str$+>
  void                    Return             l     %1.3
Prom 4:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    object, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <val?>
  void                    Return             l     %1.3
Prom 5:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    thisClass, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$+>
  void                    Return             l     %1.3
Prom 6:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    Class, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <str$+>
  void                    Return             l     %1.3
Prom 7:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    Class, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <str$+>
  void                    Return             l     %1.3
Prom 8:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    thisClass, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$+>
  void                    Return             l     %1.3
Prom 9:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    where, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <env->
  void                    Return             l     %1.3
Prom 10:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    coerceFun, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 11:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     environment, <0x5558d372bb68>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, as[0x5558da5af350]_p12, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <env->
  void                    Return             l     %1.3
Prom 12:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    coerceFun, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <cls>
  void                    Return             l     %1.3
Prom 13:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    thisClass, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$+>
  void                    Return             l     %1.3
Prom 14:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    Class, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <str$+>
  void                    Return             l     %1.3
Prom 15:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    coerceFun, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 16:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    coerceMethods, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <env->
  void                    Return             l     %1.3
Prom 17:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    where, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 18:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    object, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <(int|cls)>
  void                    Return             l     %1.3
Prom 19:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    object, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <val?>
  void                    Return             l     %1.3
Prom 20:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    sig, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str+>
  void                    Return             l     %1.3
Prom 21:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    coerceFun, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <cls>
  void                    Return             l     %1.3
Prom 22:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     getMethodsForDispatch, <0x5558d59e9538>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, as[0x5558da5af350]_p23, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <env->
  void                    Return             l     %1.3
Prom 23:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    coerceFun, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <cls>
  void                    Return             l     %1.3
Prom 24:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    object, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <val?>
  void                    Return             l     %1.3
Prom 25:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    Class, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <str$+>
  void                    Return             l     %1.3
Prom 26:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    Class, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 27:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    thisClass, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$+>
  void                    Return             l     %1.3
Prom 28:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    sig, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str+>
  void                    Return             l     %1.3
Prom 29:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    asMethod, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <cls>
  void                    Return             l     %1.3
Prom 30:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    coerceFun, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <cls>
  void                    Return             l     %1.3
Prom 31:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    inherited, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <lgl$->
  void                    Return             l     %1.3
Prom 32:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    asMethod, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <cls->
  void                    Return             l     %1.3
Prom 33:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    thisClass, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$+>
  void                    Return             l     %1.3
Prom 34:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    ClassDef, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <other>
  void                    Return             l     %1.3
Prom 35:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    where, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <env->
  void                    Return             l     %1.3
Prom 36:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    sig, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str+>
  void                    Return             l     %1.3
Prom 37:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     c, <0x5558d3385940>, e1.0
  val?            %1.2  = NamedCall          !     %1.1(from=true, to=false) e1.0   <lgl+>
  void                    Return             l     %1.2
Prom 38:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    coerceFun, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <cls>
  void                    Return             l     %1.3
Prom 39:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    coerceMethods, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <env->
  void                    Return             l     %1.3
Prom 40:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    Class, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <str$+>
  void                    Return             l     %1.3
Prom 41:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    where, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 42:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    ext, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <other>
  void                    Return             l     %1.3
Prom 43:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    ext, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <other>
  void                    Return             l     %1.3
Prom 44:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    ext, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 45:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    test, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 46:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     @, <0x5558d3384bd8>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, as[0x5558da5af350]_p47, e1.0
  prom-           %1.3  = MkArg                    unboundValue, as[0x5558da5af350]_p48, e1.0
  val?            %1.4  = Call               !     %1.1(%1.2, %1.3) e1.0   <cls->
  void                    Return             l     %1.4
Prom 47:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    ext, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 48:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    coerce, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 49:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     @, <0x5558d3384bd8>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, as[0x5558da5af350]_p50, e1.0
  prom-           %1.3  = MkArg                    unboundValue, as[0x5558da5af350]_p51, e1.0
  val?            %1.4  = Call               !     %1.1(%1.2, %1.3) e1.0   <lgl$->
  void                    Return             l     %1.4
Prom 50:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    ext, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 51:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    simple, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 52:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    Class, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 53:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    ClassDef, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 54:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    where, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 55:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     body, <0x5558d663f9c0>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, as[0x5558da5af350]_p56, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <lgl$->
  void                    Return             l     %1.3
Prom 56:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    test, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <cls->
  void                    Return             l     %1.3
Prom 57:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     c, <0x5558d3385940>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, as[0x5558da5af350]_p58, e1.0
  prom-           %1.3  = MkArg                    unboundValue, as[0x5558da5af350]_p59, e1.0
  val?            %1.4  = Call               !     %1.1(%1.2, %1.3) e1.0   <str->
  void                    Return             l     %1.4
Prom 58:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    from, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <str$+>
  void                    Return             l     %1.3
Prom 59:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    to, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <str$+>
  void                    Return             l     %1.3
Prom 60:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    methods, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <env->
  void                    Return             l     %1.3

│ as[0x5558da5af350]                                                           │
└──────────────────────────────────────────────────────────────────────────────┘
