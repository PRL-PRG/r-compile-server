
┌──────────────────────────────────────────────────────────────────────────────┐
│ possibleExtends[0x5558d7004110]                                              │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch                                      │
│ Properties:                                                                  │
├────── PIR Version After Optimizations
possibleExtends[0x5558d7004110]
BB0
  goto BB1
BB1   <- [0]
  val?^           %1.0  = LdArg                    3
  val?^           %1.1  = LdArg                    2
  val?^           %1.2  = LdArg                    1
  val?^           %1.3  = LdArg                    0
  cp              %1.4  = Checkpoint                -> BB2 (default) | BB55 (if assume failed)
BB2   <- [1]
  val?^ | miss    %2.0  = LdVar              eR    .identC, <env 0x5558d398c378>
  lgl$#-          %2.1  = Identical                %2.0, function(c1=NULL, c2=NULL) <(rir::DispatchTabl|...
  void                    Assume             D     %2.1, %1.4 (CallTarget@0x5558d6b73b70[Call#3])
  env             e2.3  = MkEnv              l     class1=%1.3, class2=%1.2, ClassDef1=%1.1, ClassDef2=%1.0, parent=<env 0x5558d398c378>, context 1
  prom-           %2.4  = MkArg                    unboundValue, possibleExtends[0x5558d7004110]_p0, e2.3
  prom-           %2.5  = MkArg                    unboundValue, possibleExtends[0x5558d7004110]_p1, e2.3
  val?            %2.6  = StaticCall         !v    .identC[0x5558d8f2de80](%2.4, %2.5) e2.3   <lgl$->
  lgl$#-          %2.7  = IsType                   %2.6 isA lgl$-
  cp              %2.8  = Checkpoint                -> BB4 (default) | BB3 (if assume failed)
BB55   <- [1]
  env             e55.0 = (MkEnv)            l     class1=%1.3, class2=%1.2, ClassDef1=%1.1, ClassDef2=%1.0, parent=<env 0x5558d398c378>, context 1
  fs              %55.1 = FrameState         R     0x5558d6b91b10+0: [], env=e55.0
  void                    Deopt              !v    %55.1
BB4   <- [2]
  void                    Assume             D     %2.7, %2.8 (Typecheck@0x5558d6b73b70[Type#9])
  lgl$-           %4.1  = CastType           d     dn %2.6
  lgl$-           %4.2  = AsLogical                %4.1
  lgl$#-          %4.3  = Identical                %4.2, true
  void                    Branch                   %4.3 -> BB54 (if true) | BB5 (if false)
BB3   <- [2]
  fs              %3.0  = FrameState         R     0x5558d6b91b10+37: [%2.6], env=e2.3
  void                    Deopt              !v    %3.0   !
BB54   <- [4]
  goto BB8
BB5   <- [4]
  val?^ | miss    %5.0  = LdVar              eR    .identC, e2.3
  lgl$#-          %5.1  = Identical                %5.0, function(c1=NULL, c2=NULL) <(rir::DispatchTabl|...
  void                    Assume             D     %5.1, %2.8 (CallTarget@0x5558d6b73b70[Call#4])
  prom-           %5.3  = MkArg                    unboundValue, possibleExtends[0x5558d7004110]_p2, e2.3
  val?            %5.4  = StaticCall         !v    .identC[0x5558d8840360](%5.3, "ANY") e2.3   <lgl$->
  lgl$#-          %5.5  = IsType                   %5.4 isA lgl$-
  cp              %5.6  = Checkpoint                -> BB7 (default) | BB6 (if assume failed)
BB8   <- [7, 54]
  lgl$-           %8.0  = Phi                      %7.3:BB7, %4.2:BB54
  lgl$#-          %8.1  = CheckTrueFalse     e     %8.0
  void                    Branch                   %8.1 -> BB53 (if true) | BB9 (if false)
BB7   <- [5]
  void                    Assume             D     %5.5, %5.6 (Typecheck@0x5558d6b73b70[Type#11])
  lgl$-           %7.1  = CastType           d     dn %5.4
  lgl$-           %7.2  = AsLogical                %7.1
  lgl$-           %7.3  = LOr                      %4.2, %7.2
  goto BB8
BB6   <- [5]
  fs              %6.0  = FrameState         R     0x5558d6b91b10+86: [%4.2, %5.4], env=e2.3
  void                    Deopt              !v    %6.0   !
BB53   <- [8]
  void                    Visible            v     
  goto BB40
BB9   <- [8]
  val?^ | miss    %9.0  = LdVar              eR    ClassDef1, e2.3
  val?            %9.1  = Force!<lazy>       !v    %9.0, e2.3   <other>
  lgl$-           %9.2  = Is                       %9.1, NULL
  lgl$#-          %9.3  = CheckTrueFalse     e     %9.2
  void                    Branch                   %9.3 -> BB52 (if true) | BB10 (if false)
BB40   <- [52, 53, 39]
  val?            %40.0 = Phi                      %39.0:BB39, false:BB52, true:BB53
  void                    Return             l     %40.0
BB52   <- [9]
  void                    Visible            v     
  goto BB40
BB10   <- [9]
  (cls|spec|blt)  %10.0 = LdFun              !v    @, <0x5558d3384bd8>, e2.3
  prom-           %10.1 = MkArg                    unboundValue, possibleExtends[0x5558d7004110]_p3, e2.3
  prom-           %10.2 = MkArg                    unboundValue, possibleExtends[0x5558d7004110]_p4, e2.3
  val?            %10.3 = Call               !v    %10.0(%10.1, %10.2) e2.3   <vec+>
  void                    StVar              lW    ext, %10.3, e2.3
  lgl$#-          %10.5 = IsType                   %10.3 isA val+   <true>
  cp              %10.6 = Checkpoint                -> BB12 (default) | BB11 (if assume failed)
BB12   <- [10]
  val             %12.0 = ChkMissing         e     %10.3
  void                    Assume             D     %10.5, %10.6 (DeadBranchReached@0x5558d6b73b70[Test#1])
  val?^ | miss    %12.2 = LdVar              eR    class2, e2.3
  val?            %12.3 = Force!<wrapped>    !v    %12.2, e2.3   <str$+>
  lgl$#-          %12.4 = IsType                   %12.3 isA val?+
  cp              %12.5 = Checkpoint                -> BB14 (default) | BB13 (if assume failed)
BB11   <- [10]
  fs              %11.0 = FrameState         R     0x5558d6b91b10+199: [], env=e2.3
  void                    Deopt              !v    %11.0   !
BB14   <- [12]
  lgl$#-          %14.0 = IsType                   %10.3 isA val?+
  void                    Assume             D     %14.0, %12.5 (Typecheck@0x5558d6b73b70[Type#15])
  val?+           %14.2 = CastType           d     dn %10.3   <vec+>
  void                    Assume             D     %12.4, %12.5 (Typecheck@0x5558d6b73b70[Type#18])
  val?+           %14.4 = CastType           d     dn %12.3   <str$+>
  val?            %14.5 = Extract2_1D        wed   %14.2, %14.4, elided   <(nil|other)>
  lgl$-           %14.6 = Is                       %14.5, NULL
  void                    StVar              lW    contained, %14.5, e2.3
  lgl$-           %14.8 = Not                d     %14.6, elided
  lgl$#-          %14.9 = CheckTrueFalse     e     %14.8
  void                    Branch                   %14.9 -> BB51 (if true) | BB15 (if false)
BB13   <- [12]
  fs              %13.0 = FrameState         R     0x5558d6b91b10+253: [%10.3, %12.3], env=e2.3
  void                    Deopt              !v    %13.0   !
BB51   <- [14]
  val             %51.0 = ChkMissing         e     %14.5
  void                    Visible            v     
  goto BB39
BB15   <- [14]
  val?^ | miss    %15.0 = LdVar              eR    ClassDef2, e2.3
  val?            %15.1 = Force!<lazy>       !v    %15.0, e2.3   <other>
  lgl$-           %15.2 = Is                       %15.1, NULL
  lgl$#-          %15.3 = CheckTrueFalse     e     %15.2
  void                    Branch                   %15.3 -> BB50 (if true) | BB16 (if false)
BB39   <- [51, 38]
  val?            %39.0 = Phi                      %38.0:BB38, %14.5:BB51
  goto BB40
BB50   <- [15]
  void                    Visible            v     
  goto BB38
BB16   <- [15]
  (cls|spec|blt)  %16.0 = LdFun              !v    @, <0x5558d3384bd8>, e2.3
  prom-           %16.1 = MkArg                    unboundValue, possibleExtends[0x5558d7004110]_p5, e2.3
  prom-           %16.2 = MkArg                    unboundValue, possibleExtends[0x5558d7004110]_p6, e2.3
  val?            %16.3 = Call               !v    %16.0(%16.1, %16.2) e2.3   <vec$+>
  void                    StVar              lW    subs, %16.3, e2.3
  cp              %16.5 = Checkpoint                -> BB18 (default) | BB17 (if assume failed)
BB38   <- [50, 37]
  val?            %38.0 = Phi                      %37.0:BB37, false:BB50
  goto BB39
BB18   <- [16]
  val?^ | miss    %18.0 = LdVar              eR    .identC, e2.3
  lgl$#-          %18.1 = Identical                %18.0, function(c1=NULL, c2=NULL) <(rir::DispatchTabl|...
  void                    Assume             D     %18.1, %16.5 (CallTarget@0x5558d6b73b70[Call#7])
  prom-           %18.3 = MkArg                    unboundValue, possibleExtends[0x5558d7004110]_p7, e2.3
  val?            %18.4 = StaticCall         !v    .identC[0x5558d8840360](%18.3, "classRepresentation") e2.3   <lgl$->
  lgl$#-          %18.5 = IsType                   %18.4 isA lgl$-
  cp              %18.6 = Checkpoint                -> BB20 (default) | BB19 (if assume failed)
BB17   <- [16]
  fs              %17.0 = FrameState         R     0x5558d6b91b10+364: [], env=e2.3
  void                    Deopt              !v    %17.0   !
BB20   <- [18]
  void                    Assume             D     %18.5, %18.6 (Typecheck@0x5558d6b73b70[Type#26])
  lgl$-           %20.1 = CastType           d     dn %18.4
  lgl$-           %20.2 = Not                d     %20.1, elided
  lgl$-           %20.3 = AsLogical                %20.2
  lgl$#-          %20.4 = Identical                %20.3, false
  void                    Branch                   %20.4 -> BB22 (if true) | BB21 (if false)
BB19   <- [18]
  fs              %19.0 = FrameState         R     0x5558d6b91b10+401: [%18.4], env=e2.3
  void                    Deopt              !v    %19.0   !
BB22   <- [20]
  lgl$#-          %22.0 = CheckTrueFalse     e     %20.3
  void                    Branch                   %22.0 -> BB47 (if true) | BB23 (if false)
BB21   <- [20]
  (cls|spec|blt)  %21.0 = LdFun              !v    isClassUnion, e2.3
  fs              %21.1 = FrameState         R     0x5558d6b91b10+419: [%20.3, %21.0], env=e2.3
  void                    Deopt              !v    %21.1, DeadCall@0x5558d6b73b70[Call#9], %21.0   !
BB47   <- [22]
  val?^ | miss    %47.0 = LdVar              eR    any, e2.3
  lgl$#-          %47.1 = Identical                <blt any>, %47.0   <@?>
  void                    Branch                   %47.1 -> BB49 (if true) | BB48 (if false)
BB23   <- [22]
  val?^ | miss    %23.0 = LdVar              eR    match, e2.3
  lgl$#-          %23.1 = Identical                %23.0, function(x, table, nomatch=NA, incomparables=N|...
  void                    Assume             D     %23.1, %18.6 (CallTarget@0x5558d6b73b70[Call#10])
  val?^ | miss    %23.3 = LdVar              eR    class1, e2.3
  val?            %23.4 = Force!<wrapped>    !v    %23.3, e2.3   <str$+>
  cp              %23.5 = Checkpoint                -> BB25 (default) | BB24 (if assume failed)
BB49   <- [47]
  (cls|spec|blt)  %49.0 = LdFun              !v    %in%, e2.3
  fs              %49.1 = FrameState         R     0x5558d6b91b10+961: [<blt any>, %49.0], env=e2.3
  void                    Deopt              !v    %49.1, DeadCall@0x5558d6b73b70[Call#20], %49.0   !
BB48   <- [47]
  (cls|spec|blt)  %48.0 = LdFun              !v    any, e2.3
  fs              %48.1 = FrameState         R     0x5558d6b91b10+924: [%48.0], env=e2.3
  void                    Deopt              !v    %48.1, DeadCall@0x5558d6b73b70[Call#15], %48.0   !
BB25   <- [23]
  val?^ | miss    %25.0 = LdVar              eR    names, e2.3
  lgl$#-          %25.1 = Identical                %25.0, <blt names>
  void                    Assume             D     %25.1, %23.5 (CallTarget@0x5558d6b73b70[Call#11])
  val?^ | miss    %25.3 = LdVar              eR    subs, e2.3
  val?            %25.4 = Force!<value>      !v    %25.3, e2.3   <vec$+>
  val?            %25.5 = CallBuiltin        !v    names(%25.4) e2.3   <str$->
  lgl$#-          %25.6 = IsType                   %25.5 isA val?+
  cp              %25.7 = Checkpoint                -> BB27 (default) | BB26 (if assume failed)
BB24   <- [23]
  prom-           %24.0 = MkArg                    %23.4, possibleExtends[0x5558d7004110]_p9 (!refl), e2.3
  val?~           %24.1 = CastType                 up %24.0
  prom-           %24.2 = MkArg                    unboundValue, possibleExtends[0x5558d7004110]_p10, e2.3
  val?^           %24.3 = CastType                 up %24.2
  fs              %24.4 = FrameState         R     0x5558d6b91b10+496: [], env=e2.3
  env             e24.5 = (MkEnv)            l     x=%24.1, table=%24.3, nomatch(miss)=NA, incomparables(miss)=nil, parent=R_BaseNamespace, context 0
  fs              %24.6 = FrameState         R     0x5558d3ebad70+9: [%23.4], env=e24.5, next=%24.4
  void                    Deopt              !v    %24.6   !
BB27   <- [25]
  lgl$#-          %27.0 = IsType                   %23.4 isA val?+
  void                    Assume             D     %27.0, %25.7 (Typecheck@0x5558d3692b30[Type#0])
  val?+           %27.2 = CastType           d     dn %23.4   <str$+>
  void                    Assume             D     %25.6, %25.7 (Typecheck@0x5558d3692b30[Type#1])
  val?+           %27.4 = CastType           d     dn %25.5   <str$->
  val+            %27.5 = CallSafeBuiltin    wed   match(%27.2, %27.4, NA, nil)    <int$->
  lgl$#-          %27.6 = IsType                   %27.5 isA int$-
  cp              %27.7 = Checkpoint                -> BB29 (default) | BB28 (if assume failed)
BB26   <- [25]
  prom-           %26.0 = MkArg                    %25.5, possibleExtends[0x5558d7004110]_p10 (!refl), e2.3
  val?~           %26.1 = CastType                 up %26.0
  prom-           %26.2 = MkArg                    %23.4, possibleExtends[0x5558d7004110]_p9 (!refl), e2.3
  val?~           %26.3 = CastType                 up %26.2
  fs              %26.4 = FrameState         R     0x5558d6b91b10+496: [], env=e2.3
  env             e26.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%26.1, x=%26.3, parent=R_BaseNamespace, context 0
  fs              %26.6 = FrameState         R     0x5558d3ebad70+23: [%23.4, %25.5], env=e26.5, next=%26.4
  void                    Deopt              !v    %26.6   !
BB29   <- [27]
  void                    Assume             D     %27.6, %27.7 (Typecheck@0x5558d6b73b70[Type#32])
  int$-           %29.1 = CastType           d     dn %27.5
  void                    StVar              lW    i, %29.1, e2.3
  cp              %29.3 = Checkpoint                -> BB31 (default) | BB30 (if assume failed)
BB28   <- [27]
  prom-           %28.0 = MkArg                    %27.4, possibleExtends[0x5558d7004110]_p10 (!refl), e2.3
  val?~           %28.1 = CastType                 up %28.0
  prom-           %28.2 = MkArg                    %27.2, possibleExtends[0x5558d7004110]_p9 (!refl), e2.3
  val?~           %28.3 = CastType                 up %28.2
  fs              %28.4 = FrameState         R     0x5558d6b91b10+496: [], env=e2.3
  env             e28.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%28.1, x=%28.3, parent=R_BaseNamespace, context 0
  fs              %28.6 = FrameState         R     0x5558d3ebad70+69: [%27.5], env=e28.5, next=%28.4
  void                    Deopt              !v    %28.6   !
BB31   <- [29]
  val?^ | miss    %31.0 = LdVar              eR    is.na, e2.3
  lgl$#-          %31.1 = Identical                <blt is.na>, %31.0   <true>
  void                    Assume             D     %31.1, %29.3 (DeadBranchReached@0x5558d6b73b70[Test#3])
  lgl$-           %31.3 = CallSafeBuiltin    wed   is.na(%29.1)    <lgl$->
  lgl$-           %31.4 = Not                d     %31.3, elided
  int-            %31.5 = Extract1_1D        wed   %29.1, %31.4, elided   <int->
  void                    StVar              lW    i, %31.5, e2.3
  cp              %31.7 = Checkpoint                -> BB33 (default) | BB32 (if assume failed)
BB30   <- [29]
  fs              %30.0 = FrameState         R     0x5558d6b91b10+510: [], env=e2.3
  void                    Deopt              !v    %30.0   !
BB33   <- [31]
  val?^ | miss    %33.0 = LdVar              eR    length, e2.3
  lgl$#-          %33.1 = Identical                <blt length>, %33.0   <true>
  void                    Assume             D     %33.1, %31.7 (DeadBranchReached@0x5558d6b73b70[Test#4])
  (int|real)$-    %33.3 = CallSafeBuiltin    wed   length(%31.5)    <int$->
  lgl$#-          %33.4 = IsType                   %33.3 isA int$-
  cp              %33.5 = Checkpoint                -> BB35 (default) | BB34 (if assume failed)
BB32   <- [31]
  fs              %32.0 = FrameState         R     0x5558d6b91b10+668: [], env=e2.3
  void                    Deopt              !v    %32.0   !
BB35   <- [33]
  void                    Assume             D     %33.4, %33.5 (Typecheck@0x5558d6b73b70[Type#42])
  int$-           %35.1 = CastType           d     dn %33.3
  lgl$#-          %35.2 = CheckTrueFalse     e     %35.1
  void                    Branch                   %35.2 -> BB41 (if true) | BB36 (if false)
BB34   <- [33]
  fs              %34.0 = FrameState         R     0x5558d6b91b10+759: [%33.3], env=e2.3
  void                    Deopt              !v    %34.0   !
BB41   <- [35]
  val?^ | miss    %41.0 = LdVar              eR    subs, e2.3
  val?            %41.1 = Force!             !v    %41.0, e2.3   <val?_>
  lgl$#-          %41.2 = IsType                   %41.1 isA val+   <@?>
  void                    Branch                   %41.2 -> BB44 (if true) | BB42 (if false)
BB36   <- [35]
  void                    Visible            v     
  goto BB37
BB44   <- [41]
  val?^ | miss    %44.0 = LdVar              eR    i, e2.3
  val?            %44.1 = Force!             !v    %44.0, e2.3   <val?_>
  lgl$#-          %44.2 = IsType                   %44.1 isA val?+
  cp              %44.3 = Checkpoint                -> BB46 (default) | BB45 (if assume failed)
BB42   <- [41]
  prom-           %42.0 = MkArg                    unboundValue, possibleExtends[0x5558d7004110]_p12, e2.3
  goto BB43
BB37   <- [36, 43]
  val?            %37.0 = Phi                      false:BB36, %43.1:BB43
  goto BB38
BB46   <- [44]
  void                    Assume             D     %44.2, %44.3 (Typecheck@0x5558d6b73b70[Type#46])
  val?+           %46.1 = CastType           d     dn %44.1   <val?_>
  val?            %46.2 = Extract1_1D        wed   %46.1, 1L, elided   <val?_>
  goto BB43
BB45   <- [44]
  fs              %45.0 = FrameState         R     0x5558d6b91b10+835: [%41.1, %44.1], env=e2.3
  void                    Deopt              !v    %45.0   !
BB43   <- [42, 46]
  val?            %43.0 = Phi                      %46.2:BB46, %42.0:BB42
  val?            %43.1 = Extract2_1D        !v    %41.1, %43.0, e2.3   <val?_>
  void                    Visible            v     
  goto BB37
Prom 0:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    class1, e1.0
  val?            %1.2  = Force<lazy>        !v    %1.1, e1.0   <str$+>
  val?            %1.3  = Extract2_1D        !v    %1.2, 1L, e1.0   <str$->
  void                    Visible            v     
  void                    Return             l     %1.3
Prom 1:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    class2, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <str$+>
  void                    Return             l     %1.3
Prom 2:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    class2, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <str$+>
  void                    Return             l     %1.3
Prom 3:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    ClassDef1, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 4:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    contains, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 5:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    ClassDef2, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 6:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    subclasses, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 7:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     class, <0x5558d3385748>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, possibleExtends[0x5558d7004110]_p8, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <str$+>
  void                    Return             l     %1.3
Prom 8:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    ClassDef2, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <other>
  void                    Return             l     %1.3
Prom 9:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    class1, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <str$+>
  void                    Return             l     %1.3
Prom 10:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     names, <0x5558d3385470>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, possibleExtends[0x5558d7004110]_p11, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <str$->
  void                    Return             l     %1.3
Prom 11:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    subs, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <vec$+>
  void                    Return             l     %1.3
Prom 12:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    i, e1.0
  val?            %1.2  = Force              !v    %1.1, e1.0   <val?_>
  val?            %1.3  = Extract1_1D        !v    %1.2, 1L, e1.0   <val?_>
  void                    Visible            v     
  void                    Return             l     %1.3

│ possibleExtends[0x5558d7004110]                                              │
└──────────────────────────────────────────────────────────────────────────────┘
