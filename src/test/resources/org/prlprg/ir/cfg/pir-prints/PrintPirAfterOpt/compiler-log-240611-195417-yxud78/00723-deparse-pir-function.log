
┌──────────────────────────────────────────────────────────────────────────────┐
│ deparse[0x5558dad3eae0]                                                      │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch miss: 4                              │
│ Properties:  Eager, ForceOrd: 0                                              │
├────── PIR Version After Optimizations
deparse[0x5558dad3eae0]
BB0
  goto BB1
BB1   <- [0]
  val?^           %1.0  = LdArg                    0
  env             e1.1  = MkEnv              l     expr=%1.0, width.cutoff(miss)=60L, backtick(miss)=missingArg, control(miss)=missingArg, nlines(miss)=missingArg, parent=R_BaseNamespace, context 1
  prom-           %1.2  = MkArg                    unboundValue, deparse[0x5558dad3eae0]_p1, e1.1
  val?^ | miss    %1.3  = CastType                 up %1.2
  void                    StArg              lW    backtick, %1.3, e1.1
  prom-           %1.5  = MkArg                    unboundValue, deparse[0x5558dad3eae0]_p5, e1.1
  val?^ | miss    %1.6  = CastType                 up %1.5
  void                    StArg              lW    control, %1.6, e1.1
  prom-           %1.8  = MkArg                    unboundValue, deparse[0x5558dad3eae0]_p6 (!refl), 
  val?^ | miss    %1.9  = CastType                 up %1.8
  void                    StArg              lW    nlines, %1.9, e1.1
  val?            %1.11 = Force!<lazy>       !v    %1.0, e1.1   <(sym|code)->
  lgl$#-          %1.12 = IsType                   %1.11 isA val?-
  cp              %1.13 = Checkpoint                -> BB2 (default) | BB7 (if assume failed)
BB2   <- [1]
  void                    Assume             D     %1.12, %1.13 (Typecheck@0x5558dbf39b30[Type#5])
  val?-           %2.1  = CastType           d     dn %1.11   <(sym|code)->
  val?^ | miss    %2.2  = LdVar              eR    width.cutoff, e1.1
  val?            %2.3  = Force!<lazy>       !v    %2.2, e1.1   <int$->
  val?^ | miss    %2.4  = LdVar              eR    backtick, e1.1
  val?            %2.5  = Force!<lazy>       !v    %2.4, e1.1   <lgl$->
  cp              %2.6  = Checkpoint                -> BB4 (default) | BB3 (if assume failed)
BB7   <- [1]
  fs              %7.0  = FrameState         R     0x5558db45ffe0+9: [%1.11], env=e1.1
  void                    Deopt              !v    %7.0   !
BB4   <- [2]
  val?^ | miss    %4.0  = LdVar              eR    .deparseOpts, e1.1
  lgl$#-          %4.1  = Identical                %4.0, function(control) <(rir::DispatchTable*)0x5558|...
  void                    Assume             D     %4.1, %2.6 (CallTarget@0x5558dbf39b30[Call#4])
  val?^ | miss    %4.3  = LdVar              eR    control, e1.1
  val?            %4.4  = Force!<lazy>       !v    %4.3, e1.1   <str->
  prom-           %4.5  = MkArg                    %4.4, deparse[0x5558dad3eae0]_p7 (!refl), 
  val?            %4.6  = StaticCall         !v    .deparseOpts[0x5558d9f53d90](%4.5) e1.1   <real$->
  lgl$#-          %4.7  = IsType                   %4.6 isA real$-
  cp              %4.8  = Checkpoint                -> BB6 (default) | BB5 (if assume failed)
BB3   <- [2]
  fs              %3.0  = FrameState         R     0x5558db45ffe0+37: [%2.1, %2.3, %2.5], env=e1.1
  void                    Deopt              !v    %3.0   !
BB6   <- [4]
  void                    Assume             D     %4.7, %4.8 (Typecheck@0x5558dbf39b30[Type#9])
  real$-          %6.1  = CastType           d     dn %4.6
  val?^ | miss    %6.2  = LdVar              eR    nlines, e1.1
  val?            %6.3  = Force!<lazy>       !v    %6.2, e1.1   <int$->
  val?            %6.4  = CallBuiltin        !     deparse(%2.1, %2.3, %2.5, %6.1, %6.3) e1.1
  void                    Return             l     %6.4
BB5   <- [4]
  fs              %5.0  = FrameState         R     0x5558db45ffe0+74: [%2.1, %2.3, %2.5, %4.6], env=e1.1
  void                    Deopt              !v    %5.0   !
Prom 1:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     %in%, <0x5558d369bc40>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, deparse[0x5558dad3eae0]_p2, e1.0
  prom-           %1.3  = MkArg                    unboundValue, deparse[0x5558dad3eae0]_p4, e1.0
  val?            %1.4  = Call               !     %1.1(%1.2, %1.3) e1.0   <lgl$->
  void                    Return             l     %1.4
Prom 2:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     mode, <0x5558d4469140>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, deparse[0x5558dad3eae0]_p3, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <str$->
  void                    Return             l     %1.3
Prom 3:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    expr, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <(sym|code)->
  void                    Return             l     %1.3
Prom 4:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     c, <0x5558d3385940>, e1.0
  val?            %1.2  = Call               !     %1.1("call", "expression", "(", "function") e1.0   <str->
  void                    Return             l     %1.2
Prom 5:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     c, <0x5558d3385940>, e1.0
  val?            %1.2  = Call               !     %1.1("keepNA", "keepInteger", "niceNames", "showAttributes") e1.0   <str->
  void                    Return             l     %1.2
Prom 6:
BB0
  goto BB1
BB1   <- [0]
  void                    Visible            v     
  void                    Return             l     -1L
Prom 7:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    control, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <str->
  void                    Return             l     %1.3

│ deparse[0x5558dad3eae0]                                                      │
└──────────────────────────────────────────────────────────────────────────────┘
