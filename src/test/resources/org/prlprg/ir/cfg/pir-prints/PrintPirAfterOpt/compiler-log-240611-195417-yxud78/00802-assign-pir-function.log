
┌──────────────────────────────────────────────────────────────────────────────┐
│ assign[0x5558d9687840]                                                       │
│ Context: CorrOrd,!TMany,Argmatch;Eager2,NonRefl2 miss: 2                     │
│ Properties:  ForceOrd: 0                                                     │
├────── PIR Version After Optimizations
assign[0x5558d9687840]
BB0
  goto BB1
BB1   <- [0]
  val?^ | miss    %1.0  = LdArg                    3
  val?~ | miss    %1.1  = LdArg                    2
  val?^ | miss    %1.2  = LdArg                    1
  val?^ | miss    %1.3  = LdArg                    0
  lgl$#-          %1.4  = Identical                %1.1, missingArg
  lgl$#-          %1.5  = Identical                %1.0, missingArg
  env             e1.6  = MkEnv              l     x=%1.3, value=%1.2, pos=%1.1, envir=%1.0, inherits(miss)=missingArg, immediate(miss)=missingArg, parent=R_BaseNamespace, context 1
  void                    Branch                   %1.4 -> BB2 (if true) | BB9 (if false)
BB2   <- [1]
  prom-           %2.0  = MkArg                    unboundValue, assign[0x5558d9687840]_p0 (!refl), 
  val?^ | miss    %2.1  = CastType                 up %2.0
  void                    StArg              lW    pos, %2.1, e1.6
  goto BB3
BB9   <- [1]
  goto BB3
BB3   <- [2, 9]
  void                    Branch                   %1.5 -> BB8 (if true) | BB4 (if false)
BB8   <- [3]
  prom-           %8.0  = MkArg                    unboundValue, assign[0x5558d9687840]_p1, e1.6
  val?^ | miss    %8.1  = CastType                 up %8.0
  void                    StArg              lW    envir, %8.1, e1.6
  goto BB5
BB4   <- [3]
  goto BB5
BB5   <- [8, 4]
  void                    StArg              lW    inherits, false, e1.6
  void                    StArg              lW    immediate, true, e1.6
  val?^           %5.2  = ChkMissing         e     %1.3
  val?            %5.3  = Force!<lazy>       !v    %5.2, e1.6   <str$->
  lgl$#-          %5.4  = IsType                   %5.3 isA val?-
  cp              %5.5  = Checkpoint                -> BB7 (default) | BB6 (if assume failed)
BB7   <- [5]
  void                    Assume             D     %5.4, %5.5 (Typecheck@0x5558d57d4380[Type#2])
  val?-           %7.1  = CastType           d     dn %5.3   <str$->
  val?^ | miss    %7.2  = LdVar              eR    value, e1.6
  val?            %7.3  = Force!<lazy>       !v    %7.2, e1.6   <val?>
  val?^ | miss    %7.4  = LdVar              eR    envir, e1.6
  val?            %7.5  = Force!<lazy>       !v    %7.4, e1.6   <env->
  val?^ | miss    %7.6  = LdVar              eR    inherits, e1.6
  val?            %7.7  = Force!<lazy>       !v    %7.6, e1.6   <lgl$->
  val?            %7.8  = CallBuiltin        !     assign(%7.1, %7.3, %7.5, %7.7) e1.6
  void                    Return             l     %7.8
BB6   <- [5]
  fs              %6.0  = FrameState         R     0x5558d5a6d230+9: [%5.3], env=e1.6
  void                    Deopt              !v    %6.0   !
Prom 0:
BB0
  goto BB1
BB1   <- [0]
  void                    Visible            v     
  void                    Return             l     -1
Prom 1:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     as.environment, <0x5558d3391b70>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, assign[0x5558d9687840]_p2, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <env->
  void                    Return             l     %1.3
Prom 2:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    pos, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <env->
  void                    Return             l     %1.3

│ assign[0x5558d9687840]                                                       │
└──────────────────────────────────────────────────────────────────────────────┘
