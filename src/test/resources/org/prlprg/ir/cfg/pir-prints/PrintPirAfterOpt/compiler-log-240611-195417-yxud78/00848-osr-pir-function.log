
┌──────────────────────────────────────────────────────────────────────────────┐
│ osr[0x5558db55b0f0]                                                          │
│ Context: CorrOrd,!TMany                                                      │
│ Properties:                                                                  │
├────── PIR Version After Optimizations
osr[0x5558db55b0f0]
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  int-            %1.1  = LdArg                    0
  int$#-          %1.2  = LdArg                    1
  int$#-          %1.3  = LdArg                    2
  goto BB2
BB2   <- [80, 1, 49]
  int$-           %2.0  = Phi                      %1.3:BB1, %2.1:BB49, %2.1:BB80
  int$-           %2.1  = Inc                      %2.0
  lgl$-           %2.2  = Lt                 d     %1.2, %2.1, elided
  lgl$#-          %2.3  = Identical                %2.2, true
  void                    Branch                   %2.3 -> BB3 (if true) | BB36 (if false)
BB3   <- [2]
  goto BB4
BB36   <- [2]
  int$-           %36.0 = Extract2_1D        wed   %1.1, %2.1, elided
  void                    StVar              lW    i, %36.0, e1.0
  cp              %36.2 = Checkpoint                -> BB37 (default) | BB81 (if assume failed)
BB4   <- [72, 3]
  (cls|spec|blt)  %4.0  = LdFun              !v    @, <0x5558d3384bd8>, e1.0
  prom-           %4.1  = MkArg                    unboundValue, osr[0x5558db55b0f0]_p11, e1.0
  prom-           %4.2  = MkArg                    unboundValue, osr[0x5558db55b0f0]_p12, e1.0
  val?            %4.3  = Call               !v    %4.0(%4.1, %4.2) e1.0   <(nil|cls)->
  void                    StVar              lW    validityMethod, %4.3, e1.0
  cp              %4.5  = Checkpoint                -> BB6 (default) | BB5 (if assume failed)
BB37   <- [36]
  val?^ | miss    %37.0 = LdVar              eR    extends, e1.0
  lgl$#-          %37.1 = IsType                   %37.0 isA val?~+ | miss
  void                    Assume             D     %37.1, %36.2 (Typecheck@0x5558d9aac8a0[Type#294])
  val?~+ | miss   %37.3 = CastType           d     dn %37.0
  val?+           %37.4 = Force!<value>            %37.3,    <vec+>
  lgl$#-          %37.5 = IsType                   %37.4 isA val+   <lgl$#->
  void                    Assume             D     %37.5, %36.2 (DeadBranchReached@0x5558d9aac8a0[Test#65])
  val?            %37.7 = Extract2_1D        wed   %37.4, %36.0, elided   <other>
  void                    StVar              lW    exti, %37.7, e1.0
  (cls|spec|blt)  %37.9 = LdFun              !v    @, <0x5558d3384bd8>, e1.0
  prom-           %37.10 = MkArg                    unboundValue, osr[0x5558db55b0f0]_p0, e1.0
  prom-           %37.11 = MkArg                    unboundValue, osr[0x5558db55b0f0]_p1, e1.0
  val?            %37.12 = Call               !v    %37.9(%37.10, %37.11) e1.0   <str$+>
  void                    StVar              lW    superClass, %37.12, e1.0
  (cls|spec|blt)  %37.14 = LdFun              !v    @, <0x5558d3384bd8>, e1.0
  prom-           %37.15 = MkArg                    unboundValue, osr[0x5558db55b0f0]_p2, e1.0
  prom-           %37.16 = MkArg                    unboundValue, osr[0x5558db55b0f0]_p3, e1.0
  val?            %37.17 = Call               !v    %37.14(%37.15, %37.16) e1.0   <lgl$->
  lgl$#-          %37.18 = IsType                   %37.17 isA lgl$-
  cp              %37.19 = Checkpoint                -> BB39 (default) | BB38 (if assume failed)
BB81   <- [36]
  fs              %81.0 = FrameState         R     0x5558daa351a0+5276: [%1.1, %1.2, %2.1], env=e1.0
  void                    Deopt              !v    %81.0   !
BB6   <- [4]
  val?^ | miss    %6.0  = LdVar              eR    length, e1.0
  lgl$#-          %6.1  = Identical                <blt length>, %6.0   <true>
  void                    Assume             D     %6.1, %4.5 (DeadBranchReached@0x5558d9aac8a0[Test#70])
  val?^ | miss    %6.3  = LdVar              eR    errors, e1.0
  lgl$#-          %6.4  = IsType                   %6.3 isA val?~- | miss
  void                    Assume             D     %6.4, %4.5 (Typecheck@0x5558d9aac8a0[Type#343])
  val?~- | miss   %6.6  = CastType           d     dn %6.3
  val?-           %6.7  = Force!<value>            %6.6,    <str->
  (int|real)$-    %6.8  = CallSafeBuiltin    wed   length(%6.7)    <int$->
  lgl$#-          %6.9  = IsType                   %6.8 isA int$-
  cp              %6.10 = Checkpoint                -> BB8 (default) | BB7 (if assume failed)
BB5   <- [4]
  fs              %5.0  = FrameState         R     0x5558daa351a0+6244: [], env=e1.0
  void                    Deopt              !v    %5.0   !
BB39   <- [37]
  void                    Assume             D     %37.18, %37.19 (Typecheck@0x5558d9aac8a0[Type#303])
  lgl$-           %39.1 = CastType           d     dn %37.17
  lgl$-           %39.2 = Not                d     %39.1, elided
  lgl$-           %39.3 = AsLogical                %39.2
  lgl$#-          %39.4 = Identical                %39.3, false
  void                    Branch                   %39.4 -> BB41 (if true) | BB40 (if false)
BB38   <- [37]
  fs              %38.0 = FrameState         R     0x5558daa351a0+5439: [%1.1, %1.2, %2.1, %37.17], env=e1.0
  void                    Deopt              !v    %38.0   !
BB8   <- [6]
  void                    Assume             D     %6.9, %6.10 (Typecheck@0x5558d9aac8a0[Type#344])
  int$-           %8.1  = CastType           d     dn %6.8
  lgl$-           %8.2  = Eq                 d     %8.1, 0L, elided   <lgl$->
  lgl$-           %8.3  = AsLogical                %8.2
  lgl$#-          %8.4  = Identical                %8.3, false
  void                    Branch                   %8.4 -> BB35 (if true) | BB9 (if false)
BB7   <- [6]
  fs              %7.0  = FrameState         R     0x5558daa351a0+6335: [%6.8], env=e1.0
  void                    Deopt              !v    %7.0   !
BB41   <- [39]
  lgl$#-          %41.0 = CheckTrueFalse     e     %39.3
  void                    Branch                   %41.0 -> BB80 (if true) | BB42 (if false)
BB40   <- [39]
  (cls|spec|blt)  %40.0 = LdFun              !v    is, e1.0
  fs              %40.1 = FrameState         R     0x5558daa351a0+5457: [%1.1, %1.2, %2.1, %39.3, %40.0], env=e1.0
  void                    Deopt              !v    %40.1, DeadCall@0x5558d9aac8a0[Call#90], %40.0   !
BB35   <- [8]
  goto BB10
BB9   <- [8]
  val?^ | miss    %9.0  = LdVar              eR    is.function, e1.0
  lgl$#-          %9.1  = Identical                <blt is.function>, %9.0   <true>
  void                    Assume             D     %9.1, %6.10 (DeadBranchReached@0x5558d9aac8a0[Test#71])
  val             %9.3  = ChkMissing         e     %4.3
  lgl$#-          %9.4  = IsType                   %9.3 isA val?~- | miss
  void                    Assume             D     %9.4, %6.10 (Typecheck@0x5558d9aac8a0[Type#347])
  val-            %9.6  = CastType           d     dn %9.3   <(nil|cls)->
  lgl$#-          %9.7  = CallSafeBuiltin    wed   is.function(%9.6)    <lgl$->
  lgl$-           %9.8  = LAnd                     %8.3, %9.7
  goto BB10
BB80   <- [41]
  goto BB2
BB42   <- [41]
  val?^ | miss    %42.0 = LdVar              eR    getClassDef, e1.0
  lgl$#-          %42.1 = Identical                %42.0, function(Class, where=topenv(parent.frame()), |...
  void                    Assume             D     %42.1, %37.19 (CallTarget@0x5558d9aac8a0[Call#91])
  prom-           %42.3 = MkArg                    unboundValue, osr[0x5558db55b0f0]_p4, e1.0
  val?            %42.4 = StaticCall         !v    getClassDef[0x5558d881aa70](%42.3) e1.0   <other>
  lgl$-           %42.5 = Is                       %42.4, NULL
  void                    StVar              lW    superDef, %42.4, e1.0
  val             %42.7 = ChkMissing         e     %42.4
  lgl$#-          %42.8 = CheckTrueFalse     e     %42.5
  void                    Branch                   %42.8 -> BB77 (if true) | BB43 (if false)
BB10   <- [35, 9]
  lgl$-           %10.0 = Phi                      %9.8:BB9, %8.3:BB35
  cp              %10.1 = Checkpoint                -> BB12 (default) | BB11 (if assume failed)
BB77   <- [42]
  val?^ | miss    %77.0 = LdVar              eR    c, e1.0
  lgl$#-          %77.1 = Identical                <blt c>, %77.0   <@?>
  void                    Branch                   %77.1 -> BB79 (if true) | BB78 (if false)
BB43   <- [42]
  (cls|spec|blt)  %43.0 = LdFun              !v    @, <0x5558d3384bd8>, e1.0
  prom-           %43.1 = MkArg                    unboundValue, osr[0x5558db55b0f0]_p5, e1.0
  prom-           %43.2 = MkArg                    unboundValue, osr[0x5558db55b0f0]_p6, e1.0
  val?            %43.3 = Call               !v    %43.0(%43.1, %43.2) e1.0   <(nil|cls)->
  void                    StVar              lW    validityMethod, %43.3, e1.0
  lgl$#-          %43.5 = IsType                   %43.3 isA val?-
  cp              %43.6 = Checkpoint                -> BB45 (default) | BB44 (if assume failed)
BB12   <- [10]
  lgl$#-          %12.0 = CheckTrueFalse     e     %10.0
  void                    Branch                   %12.0 -> BB24 (if true) | BB13 (if false)
BB11   <- [10]
  fs              %11.0 = FrameState         R     0x5558daa351a0+6457: [%10.0], env=e1.0
  void                    Deopt              !v    %11.0   !
BB79   <- [77]
  val?^ | miss    %79.0 = LdVar              eR    errors, e1.0
  val?            %79.1 = Force!             !v    %79.0, e1.0   <val?_>
  (cls|spec|blt)  %79.2 = LdFun              !v    paste0, e1.0
  fs              %79.3 = FrameState         R     0x5558daa351a0+5678: [%1.1, %1.2, %2.1, <blt c>, %79.1, %79.2], env=e1.0
  void                    Deopt              !v    %79.3, DeadCall@0x5558d9aac8a0[Call#94], %79.2   !
BB78   <- [77]
  (cls|spec|blt)  %78.0 = LdFun              !v    c, e1.0
  fs              %78.1 = FrameState         R     0x5558daa351a0+5622: [%1.1, %1.2, %2.1, %78.0], env=e1.0
  void                    Deopt              !v    %78.1, DeadCall@0x5558d9aac8a0[Call#92], %78.0   !
BB45   <- [43]
  val?^ | miss    %45.0 = LdVar              eR    is.function, e1.0
  lgl$#-          %45.1 = Identical                <blt is.function>, %45.0   <true>
  void                    Assume             D     %45.1, %43.6 (DeadBranchReached@0x5558d9aac8a0[Test#67])
  val             %45.3 = ChkMissing         e     %43.3
  void                    Assume             D     %43.5, %43.6 (Typecheck@0x5558d9aac8a0[Type#319])
  val?-           %45.5 = CastType           d     dn %43.3   <(nil|cls)->
  lgl$#-          %45.6 = CallSafeBuiltin    wed   is.function(%45.5)    <lgl$->
  cp              %45.7 = Checkpoint                -> BB47 (default) | BB46 (if assume failed)
BB44   <- [43]
  fs              %44.0 = FrameState         R     0x5558daa351a0+5812: [%1.1, %1.2, %2.1], env=e1.0
  void                    Deopt              !v    %44.0   !
BB24   <- [12]
  val?^ | miss    %24.0 = LdVar              eR    c, e1.0
  lgl$#-          %24.1 = Identical                <blt c>, %24.0   <true>
  void                    Assume             D     %24.1, %10.1 (DeadBranchReached@0x5558d9aac8a0[Test#72])
  val?^ | miss    %24.3 = LdVar              eR    anyStrings, e1.0
  (cls|spec|blt)  %24.4 = CastType                 dn %24.3
  val+            %24.5 = CallSafeBuiltin          bodyCode(%24.4) 
  lgl$#-          %24.6 = Identical                %24.5, <(rir::DispatchTable*)0x5558d564d4b0>
  void                    Assume             D     %24.6, %10.1 (CallTarget@0x5558d9aac8a0[Call#111])
  val?            %24.8 = Force!             d     %24.3, 
  (cls|spec|blt)  %24.9 = ChkFunction        e     %24.8
  env             e24.10 = CallSafeBuiltin          environment(%24.9) 
  val?^ | miss    %24.11 = LdVar              eR    isTRUE, e24.10
  lgl$#-          %24.12 = Identical                %24.11, function(x) <(rir::DispatchTable*)0x5558d52435|...
  void                    Assume             D     %24.12, %10.1 (CallTarget@0x5558dda467c8[Call#0])
  (cls|spec|blt)  %24.14 = LdFun              !v    validityMethod, <%4.3>, e1.0
  prom-           %24.15 = MkArg                    unboundValue, osr[0x5558db55b0f0]_p14, e1.0
  val?            %24.16 = Call               !v    %24.14(%24.15) e1.0   <lgl$->
  lgl$#-          %24.17 = IsType                   %24.16 isA lgl$-
  cp              %24.18 = Checkpoint                -> BB26 (default) | BB25 (if assume failed)
BB13   <- [12]
  goto BB14
BB47   <- [45]
  void                    Branch                   %45.6 -> BB50 (if true) | BB48 (if false)
BB46   <- [45]
  fs              %46.0 = FrameState         R     0x5558daa351a0+5903: [%1.1, %1.2, %2.1, %45.6], env=e1.0
  void                    Deopt              !v    %46.0   !
BB26   <- [24]
  void                    Assume             D     %24.17, %24.18 (Typecheck@0x5558d9aac8a0[Type#355])
  lgl$-           %26.1 = CastType           d     dn %24.16
  prom-           %26.2 = MkArg                    %26.1, osr[0x5558db55b0f0]_p13 (!refl), e1.0
  val?~           %26.3 = CastType                 up %26.2
  lgl$-           %26.4 = CallSafeBuiltin    wed   is.na(%26.1)    <lgl$->
  lgl$-           %26.5 = Not                d     %26.4, elided
  lgl$-           %26.6 = AsLogical                %26.5
  lgl$-           %26.7 = AsLogical                %26.6
  lgl$-           %26.8 = AsLogical                %26.7
  lgl$#-          %26.9 = Identical                %26.8, false
  env             e26.10 = (MkEnv)            l     x=%26.3, parent=e24.10, context 0
  void                    Branch                   %26.9 -> BB34 (if true) | BB27 (if false)
BB25   <- [24]
  prom-           %25.0 = MkArg                    unboundValue, osr[0x5558db55b0f0]_p13, e1.0
  val?^           %25.1 = CastType                 up %25.0
  env             e25.2 = (MkEnv)            l     x=%25.1, parent=e24.10, context 0
  env             e25.3 = MaterializeEnv           , e25.2   <@?>
  fs              %25.4 = FrameState         R     0x5558daa351a0+6579: [<blt c>, %6.7], env=e1.0
  fs              %25.5 = FrameState         R     0x5558db3632d0+32: [], env=e25.3, next=%25.4
  prom-           %25.6 = MkArg                    unboundValue, osr[0x5558db55b0f0]_p15, e25.3
  val?^           %25.7 = CastType                 up %25.6
  env             e25.8 = (MkEnv)            l     x=%25.7, parent=R_BaseNamespace, context -1
  fs              %25.9 = FrameState         R     0x5558d37d66d0+69: [<blt is.logical>], env=e25.8, next=%25.5
  fs              %25.10 = FrameState         R     0x5558dad3f460+5(pr): [], env=e25.3, next=%25.9
  fs              %25.11 = FrameState         R     0x5558db42aac0+32(pr): [%24.16], env=e1.0, next=%25.10
  void                    Deopt              !v    %25.11   !
BB14   <- [13, 32]
  cp              %14.0 = Checkpoint                -> BB16 (default) | BB15 (if assume failed)
BB50   <- [47]
  val?^ | miss    %50.0 = LdVar              eR    c, e1.0
  lgl$#-          %50.1 = Identical                <blt c>, %50.0   <true>
  void                    Assume             D     %50.1, %45.7 (DeadBranchReached@0x5558d9aac8a0[Test#68])
  val?^ | miss    %50.3 = LdVar              eR    errors, e1.0
  lgl$#-          %50.4 = IsType                   %50.3 isA val?~- | miss
  void                    Assume             D     %50.4, %45.7 (Typecheck@0x5558d9aac8a0[Type#329])
  val?~- | miss   %50.6 = CastType           d     dn %50.3
  val?-           %50.7 = Force!<value>            %50.6,    <str->
  val?^ | miss    %50.8 = LdVar              eR    anyStrings, e1.0
  (cls|spec|blt)  %50.9 = CastType                 dn %50.8
  val+            %50.10 = CallSafeBuiltin          bodyCode(%50.9) 
  lgl$#-          %50.11 = Identical                %50.10, <(rir::DispatchTable*)0x5558d564d4b0>
  void                    Assume             D     %50.11, %45.7 (CallTarget@0x5558d9aac8a0[Call#101])
  val?            %50.13 = Force!             d     %50.8, 
  prom-           %50.14 = MkArg                    unboundValue, osr[0x5558db55b0f0]_p7, e1.0
  (cls|spec|blt)  %50.15 = ChkFunction        e     %50.13
  env             e50.16 = CallSafeBuiltin          environment(%50.15) 
  val?^           %50.17 = CastType                 up %50.14
  env             e50.18 = MkEnv              l     x=%50.17, parent=e50.16, context 0
  val?^ | miss    %50.19 = LdVar              eR    isTRUE, e50.18
  lgl$#-          %50.20 = Identical                %50.19, function(x) <(rir::DispatchTable*)0x5558d52435|...
  void                    Assume             D     %50.20, %45.7 (CallTarget@0x5558dda467c8[Call#0])
  prom-           %50.22 = MkArg                    unboundValue, osr[0x5558db55b0f0]_p16, e50.18
  val?^           %50.23 = CastType                 up %50.22
  env             e50.24 = (MkEnv)            l     x=%50.23, parent=R_BaseNamespace, context -1
  val?            %50.25 = Force!<lazy>       !vL   %50.17, e50.24   <lgl$->
  prom-           %50.26 = MkArg                    %50.25, osr[0x5558db55b0f0]_p16 (!refl), e50.18
  val?~           %50.27 = CastType                 up %50.26
  void                    StArg              lWd   x, %50.27, e50.24
  cp              %50.29 = Checkpoint                -> BB52 (default) | BB51 (if assume failed)
BB48   <- [47]
  goto BB49
BB34   <- [26]
  goto BB28
BB27   <- [26]
  lgl$-           %27.0 = AsLogical                %26.1
  lgl$-           %27.1 = LAnd                     %26.8, %27.0
  goto BB28
BB16   <- [14]
  val?^ | miss    %16.0 = LdVar              eR    length, e1.0
  lgl$#-          %16.1 = Identical                <blt length>, %16.0   <true>
  void                    Assume             D     %16.1, %14.0 (DeadBranchReached@0x5558d9aac8a0[Test#73])
  val?^ | miss    %16.3 = LdVar              eR    errors, e1.0
  lgl$#-          %16.4 = IsType                   %16.3 isA val?~- | miss
  void                    Assume             D     %16.4, %14.0 (Typecheck@0x5558d9aac8a0[Type#359])
  val?~- | miss   %16.6 = CastType           d     dn %16.3
  val?-           %16.7 = Force!<value>            %16.6,    <str->
  (int|real)$-    %16.8 = CallSafeBuiltin    wed   length(%16.7)    <int$->
  lgl$#-          %16.9 = IsType                   %16.8 isA int$-
  cp              %16.10 = Checkpoint                -> BB18 (default) | BB17 (if assume failed)
BB15   <- [14]
  fs              %15.0 = FrameState         R     0x5558daa351a0+6615: [], env=e1.0
  void                    Deopt              !v    %15.0   !
BB52   <- [50]
  lgl$#-          %52.0 = IsEnvStub          R     , e50.24
  void                    Assume             D     %52.0, %50.29 (EnvStubMaterialized@0x5558d493a838[Call#unknown])
  val+            %52.2 = CallSafeBuiltin    wed   is.logical(%50.25)    <lgl$->
  lgl$#-          %52.3 = IsType                   %52.2 isA lgl$-
  cp              %52.4 = Checkpoint                -> BB54 (default) | BB53 (if assume failed)
BB51   <- [50]
  fs              %51.0 = FrameState         R     0x5558daa351a0+6030: [%1.1, %1.2, %2.1, <blt c>, %50.7], env=e1.0
  fs              %51.1 = FrameState         R     0x5558db3632d0+32: [], env=e50.18, next=%51.0
  fs              %51.2 = FrameState         R     0x5558d37d66d0+69: [<blt is.logical>, %50.25], env=e50.24, next=%51.1
  void                    Deopt              !v    %51.2   !
BB49   <- [48, 71]
  goto BB2
BB28   <- [34, 27]
  lgl$-           %28.0 = Phi                      %27.1:BB27, %26.8:BB34
  cp              %28.1 = Checkpoint                -> BB30 (default) | BB29 (if assume failed)
BB18   <- [16]
  void                    Assume             D     %16.9, %16.10 (Typecheck@0x5558d9aac8a0[Type#360])
  int$-           %18.1 = CastType           d     dn %16.8
  lgl$#-          %18.2 = CheckTrueFalse     e     %18.1
  void                    Branch                   %18.2 -> BB21 (if true) | BB19 (if false)
BB17   <- [16]
  fs              %17.0 = FrameState         R     0x5558daa351a0+6706: [%16.8], env=e1.0
  void                    Deopt              !v    %17.0   !
BB54   <- [52]
  void                    Assume             D     %52.3, %52.4 (Typecheck@0x5558d493a838[Type#2])
  lgl$-           %54.1 = CastType           d     dn %52.2
  lgl$-           %54.2 = AsLogical                %54.1
  lgl$#-          %54.3 = Identical                %54.2, false
  void                    Branch                   %54.3 -> BB76 (if true) | BB55 (if false)
BB53   <- [52]
  fs              %53.0 = FrameState         R     0x5558daa351a0+6030: [%1.1, %1.2, %2.1, <blt c>, %50.7], env=e1.0
  fs              %53.1 = FrameState         R     0x5558db3632d0+32: [], env=e50.18, next=%53.0
  fs              %53.2 = FrameState         R     0x5558d37d66d0+91: [%52.2], env=e50.24, next=%53.1
  void                    Deopt              !v    %53.2   !
BB30   <- [28]
  lgl$#-          %30.0 = CheckTrueFalse     e     %28.0
  void                    Branch                   %30.0 -> BB33 (if true) | BB31 (if false)
BB29   <- [28]
  env             e29.0 = MaterializeEnv           , e26.10   <@?>
  fs              %29.1 = FrameState         R     0x5558daa351a0+6579: [<blt c>, %6.7], env=e1.0
  fs              %29.2 = FrameState         R     0x5558db3632d0+32: [], env=e29.0, next=%29.1
  prom-           %29.3 = MkArg                    %26.1, osr[0x5558db55b0f0]_p15 (!refl), e29.0
  val?~           %29.4 = CastType                 up %29.3
  env             e29.5 = (MkEnv)            l     x=%29.4, parent=R_BaseNamespace, context -1
  fs              %29.6 = FrameState         R     0x5558d37d66d0+342: [%28.0], env=e29.5, next=%29.2
  void                    Deopt              !v    %29.6   !
BB21   <- [18]
  val?^ | miss    %21.0 = LdVar              eR    test, e1.0
  val?            %21.1 = Force!             !v    %21.0, e1.0   <val?_>
  lgl$#-          %21.2 = CheckTrueFalse     we    %21.1
  void                    Branch                   %21.2 -> BB23 (if true) | BB22 (if false)
BB19   <- [18]
  void                    Visible            v     
  goto BB20
BB76   <- [54]
  goto BB56
BB55   <- [54]
  lgl$#-          %55.0 = IsType                   %50.25 isA lgl$-
  void                    Assume             D     %55.0, %52.4 (Typecheck@0x5558d493a838[Type#4])
  lgl$-           %55.2 = AsLogical                %54.2
  goto BB56
BB33   <- [30]
  val?^ | miss    %33.0 = LdVar              eRd   character, e24.10
  lgl$#-          %33.1 = Identical                %33.0, function(length=0L) <(rir::DispatchTable*)0x55|...
  void                    Assume             D     %33.1, %28.1 (CallTarget@0x5558dda467c8[Call#1])
  str-            %33.3 = CallSafeBuiltin    wed   vector("character", 0L)    <str->
  goto BB32
BB31   <- [30]
  goto BB32
BB23   <- [21]
  val?^ | miss    %23.0 = LdVar              eR    errors, e1.0
  void                    Visible            v     
  val?            %23.2 = Force!             !     %23.0, e1.0   <val?_>
  goto BB20
BB22   <- [21]
  (cls|spec|blt)  %22.0 = LdFun              !v    gettextf, e1.0
  fs              %22.1 = FrameState         R     0x5558daa351a0+6753: [%22.0], env=e1.0
  void                    Deopt              !v    %22.1, DeadCall@0x5558d9aac8a0[Call#114], %22.0   !
BB20   <- [19, 23]
  val?            %20.0 = Phi                      true:BB19, %23.2:BB23
  void                    Return             l     %20.0
BB56   <- [76, 55]
  lgl$-           %56.0 = Phi                      %55.2:BB55, %54.2:BB76
  lgl$-           %56.1 = AsLogical                %56.0
  lgl$#-          %56.2 = Identical                %56.1, false
  void                    Branch                   %56.2 -> BB75 (if true) | BB57 (if false)
BB32   <- [31, 33]
  (lgl|str)-      %32.0 = Phi                      %26.1:BB31, %33.3:BB33   <str->
  (list|sym|char|lgl|int|real|str|vec|complex|raw|cls|spec|blt|prom|_|code|env|ast|expressions|dots|other)+ %32.1 = CallSafeBuiltin    wed   c(%6.7, %32.0)    <str->
  void                    StVar              lW    errors, %32.1, e1.0
  goto BB14
BB75   <- [56]
  goto BB58
BB57   <- [56]
  lgl$#-          %57.0 = IsType                   %50.25 isA lgl$-
  void                    Assume             D     %57.0, %52.4 (Typecheck@0x5558d493a838[Type#8])
  lgl$-           %57.2 = CastType           d     dn %50.25
  lgl$-           %57.3 = CallSafeBuiltin    wed   is.na(%57.2)    <lgl$->
  lgl$-           %57.4 = Not                d     %57.3, elided
  lgl$-           %57.5 = AsLogical                %57.4
  lgl$-           %57.6 = LAnd                     %56.1, %57.5
  goto BB58
BB58   <- [75, 57]
  lgl$-           %58.0 = Phi                      %57.6:BB57, %56.1:BB75
  lgl$-           %58.1 = AsLogical                %58.0
  lgl$#-          %58.2 = Identical                %58.1, false
  void                    Branch                   %58.2 -> BB74 (if true) | BB59 (if false)
BB74   <- [58]
  goto BB60
BB59   <- [58]
  lgl$-           %59.0 = AsLogical          e     %50.25
  lgl$-           %59.1 = LAnd                     %58.1, %59.0
  goto BB60
BB60   <- [74, 59]
  lgl$-           %60.0 = Phi                      %59.1:BB59, %58.1:BB74
  cp              %60.1 = Checkpoint                -> BB62 (default) | BB61 (if assume failed)
BB62   <- [60]
  lgl$#-          %62.0 = CheckTrueFalse     e     %60.0
  void                    Branch                   %62.0 -> BB73 (if true) | BB63 (if false)
BB61   <- [60]
  fs              %61.0 = FrameState         R     0x5558daa351a0+6030: [%1.1, %1.2, %2.1, <blt c>, %50.7], env=e1.0
  fs              %61.1 = FrameState         R     0x5558db3632d0+32: [], env=e50.18, next=%61.0
  fs              %61.2 = FrameState         R     0x5558d37d66d0+342: [%60.0], env=e50.24, next=%61.1
  void                    Deopt              !v    %61.2   !
BB73   <- [62]
  val?^ | miss    %73.0 = LdVar              eR    character, e50.18
  lgl$#-          %73.1 = Identical                %73.0, function(length=0L) <(rir::DispatchTable*)0x55|...
  void                    Assume             D     %73.1, %60.1 (CallTarget@0x5558dda467c8[Call#1])
  str-            %73.3 = CallSafeBuiltin    wed   vector("character", 0L)    <str->
  goto BB64
BB63   <- [62]
  val?^ | miss    %63.0 = LdVar              eR    x, e50.18
  val?            %63.1 = Force!             !v    %63.0, e50.18   <val?_>
  goto BB64
BB64   <- [63, 73]
  val?            %64.0 = Phi                      %63.1:BB63, %73.3:BB73   <str->
  lgl$#-          %64.1 = IsType                   %64.0 isA val?-
  cp              %64.2 = Checkpoint                -> BB66 (default) | BB65 (if assume failed)
BB66   <- [64]
  void                    Assume             D     %64.1, %64.2 (Typecheck@0x5558d9aac8a0[Type#334])
  val?-           %66.1 = CastType           d     dn %64.0   <str->
  val+            %66.2 = CallSafeBuiltin    wed   c(%50.7, %66.1)    <str->
  void                    StVar              lW    errors, %66.2, e1.0
  cp              %66.4 = Checkpoint                -> BB68 (default) | BB67 (if assume failed)
BB65   <- [64]
  fs              %65.0 = FrameState         R     0x5558daa351a0+6030: [%1.1, %1.2, %2.1, <blt c>, %50.7], env=e1.0
  fs              %65.1 = FrameState         R     0x5558db3632d0+94: [%64.0], env=e50.18, next=%65.0
  void                    Deopt              !v    %65.1   !
BB68   <- [66]
  val?^ | miss    %68.0 = LdVar              eR    length, e1.0
  lgl$#-          %68.1 = Identical                <blt length>, %68.0   <true>
  void                    Assume             D     %68.1, %66.4 (DeadBranchReached@0x5558d9aac8a0[Test#69])
  (int|real)$-    %68.3 = CallSafeBuiltin    wed   length(%66.2)    <int$->
  lgl$#-          %68.4 = IsType                   %68.3 isA int$-
  cp              %68.5 = Checkpoint                -> BB70 (default) | BB69 (if assume failed)
BB67   <- [66]
  fs              %67.0 = FrameState         R     0x5558daa351a0+6066: [%1.1, %1.2, %2.1], env=e1.0
  void                    Deopt              !v    %67.0   !
BB70   <- [68]
  void                    Assume             D     %68.4, %68.5 (Typecheck@0x5558d9aac8a0[Type#338])
  int$-           %70.1 = CastType           d     dn %68.3
  lgl$#-          %70.2 = CheckTrueFalse     e     %70.1
  void                    Branch                   %70.2 -> BB72 (if true) | BB71 (if false)
BB69   <- [68]
  fs              %69.0 = FrameState         R     0x5558daa351a0+6157: [%1.1, %1.2, %2.1, %68.3], env=e1.0
  void                    Deopt              !v    %69.0   !
BB72   <- [70]
  goto BB4
BB71   <- [70]
  goto BB49
Prom 0:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    exti, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 1:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    superClass, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 2:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    exti, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 3:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    simple, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 4:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    superClass, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$+>
  void                    Return             l     %1.3
Prom 5:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    superDef, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 6:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    validity, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 7:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     validityMethod, e1.0
  prom-           %1.2  = MkArg                    unboundValue, osr[0x5558db55b0f0]_p8, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <lgl$->
  void                    Return             l     %1.3
Prom 8:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     as, <0x5558d5c7a098>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, osr[0x5558db55b0f0]_p9, e1.0
  prom-           %1.3  = MkArg                    unboundValue, osr[0x5558db55b0f0]_p10, e1.0
  val?            %1.4  = Call               !     %1.1(%1.2, %1.3) e1.0   <other>
  void                    Return             l     %1.4
Prom 9:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    object, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <other>
  void                    Return             l     %1.3
Prom 10:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    superClass, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$+>
  void                    Return             l     %1.3
Prom 11:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    classDef, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 12:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    validity, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 13:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     validityMethod, e1.0
  prom-           %1.2  = MkArg                    unboundValue, osr[0x5558db55b0f0]_p14, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <lgl$->
  void                    Return             l     %1.3
Prom 14:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    object, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <other>
  void                    Return             l     %1.3
Prom 15:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    x, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <lgl$->
  void                    Return             l     %1.3
Prom 16:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    x, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <lgl$->
  void                    Return             l     %1.3

│ osr[0x5558db55b0f0]                                                          │
└──────────────────────────────────────────────────────────────────────────────┘
