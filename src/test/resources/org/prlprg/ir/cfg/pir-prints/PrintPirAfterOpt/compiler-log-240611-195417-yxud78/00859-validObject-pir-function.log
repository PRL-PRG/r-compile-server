
┌──────────────────────────────────────────────────────────────────────────────┐
│ validObject[0x5558db3d7e50]                                                  │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;NonRefl0 miss: 2                     │
│ Properties:                                                                  │
├────── PIR Version After Optimizations
validObject[0x5558db3d7e50]
BB0
  goto BB1
BB1   <- [0]
  val?^           %1.0  = LdArg                    0
  env             e1.1  = MkEnv              l     object=%1.0, test(miss)=false, complete(miss)=false, parent=<env 0x5558d398c378>, context 1
  cls             %1.2  = MkCls                    anyStrings, e1.1
  cp              %1.3  = Checkpoint                -> BB2 (default) | BB307 (if assume failed)
BB2   <- [1]
  val?^ | miss    %2.0  = LdVar              eR    class, <env 0x5558d398c378>
  lgl$#-          %2.1  = Identical                <blt class>, %2.0   <true>
  void                    Assume             D     %2.1, %1.3 (DeadBranchReached@0x5558d9aac8a0[Test#0])
  val?            %2.3  = Force!<lazy>       !vr   %1.0,    <(cls|other)>
  val?            %2.4  = CallBuiltin        !v    class(%2.3) e1.1   <str$+>
  void                    StVar              lW    Class, %2.4, e1.1
  cp              %2.6  = Checkpoint                -> BB4 (default) | BB3 (if assume failed)
BB307   <- [1]
  fs              %307.0 = FrameState         R     0x5558daa351a0+0: [], env=e1.1
  void                    Deopt              !v    %307.0
BB4   <- [2]
  val?^ | miss    %4.0  = LdVar              eR    getClassDef, e1.1
  lgl$#-          %4.1  = Identical                %4.0, function(Class, where=topenv(parent.frame()), |...
  void                    Assume             D     %4.1, %2.6 (CallTarget@0x5558d9aac8a0[Call#1])
  prom-           %4.3  = MkArg                    unboundValue, validObject[0x5558db3d7e50]_p2 (!refl), e1.1
  val?            %4.4  = StaticCall         !v    getClassDef[0x5558d866ae40](%4.3) e1.1   <other>
  void                    StVar              lW    classDef, %4.4, e1.1
  cp              %4.6  = Checkpoint                -> BB6 (default) | BB5 (if assume failed)
BB3   <- [2]
  fs              %3.0  = FrameState         R     0x5558daa351a0+105: [], env=e1.1
  void                    Deopt              !v    %3.0   !
BB6   <- [4]
  val?^ | miss    %6.0  = LdVar              eR    .classEnv, e1.1
  lgl$#-          %6.1  = Identical                %6.0, function(Class, default=.requirePackage("metho|...
  void                    Assume             D     %6.1, %4.6 (CallTarget@0x5558d9aac8a0[Call#2])
  prom-           %6.3  = MkArg                    unboundValue, validObject[0x5558db3d7e50]_p3 (!refl), e1.1
  ct              %6.4  = PushContext        lCL   %6.3, .classEnv(classDef), function(Class, default=.requirePackage("metho|..., e1.1
  val?^           %6.5  = CastType                 up %6.3
  env             e6.6  = MkEnv              l     Class=%6.5, default(miss)=missingArg, mustFind(miss)=missingArg, parent=<env 0x5558d398c378>, context 1
  prom-           %6.7  = MkArg                    unboundValue, validObject[0x5558db3d7e50]_p100, e6.6
  val?^ | miss    %6.8  = CastType                 up %6.7
  void                    StArg              lW    default, %6.8, e6.6
  void                    StArg              lW    mustFind, true, e6.6
  cp              %6.11 = Checkpoint                -> BB8 (default) | BB7 (if assume failed)
BB5   <- [4]
  fs              %5.0  = FrameState         R     0x5558daa351a0+151: [], env=e1.1
  void                    Deopt              !v    %5.0   !
BB8   <- [6]
  val?^ | miss    %8.0  = LdVar              eR    is.character, <env 0x5558d398c378>
  lgl$#-          %8.1  = Identical                <blt is.character>, %8.0   <true>
  void                    Assume             D     %8.1, %6.11 (DeadBranchReached@0x5558d5ca9bc0[Test#0])
  lgl$#-          %8.3  = CallSafeBuiltin    wed   is.character(%4.4)    <lgl$->
  cp              %8.4  = Checkpoint                -> BB10 (default) | BB9 (if assume failed)
BB7   <- [6]
  fs              %7.0  = FrameState         R     0x5558daa351a0+183: [], env=e1.1
  fs              %7.1  = FrameState         R     0x5558d711eee0+0: [], env=e6.6, next=%7.0
  void                    Deopt              !v    %7.1   !
BB10   <- [8]
  void                    Branch                   %8.3 -> BB304 (if true) | BB11 (if false)
BB9   <- [8]
  fs              %9.0  = FrameState         R     0x5558daa351a0+183: [], env=e1.1
  fs              %9.1  = FrameState         R     0x5558d711eee0+91: [%8.3], env=e6.6, next=%9.0
  void                    Deopt              !v    %9.1   !
BB304   <- [10]
  val?^ | miss    %304.0 = LdVar              eR    packageSlot, <env 0x5558d398c378>
  lgl$#-          %304.1 = Identical                %304.0, function(object) <(rir::DispatchTable*)0x5558d|...
  void                    Assume             D     %304.1, %8.4 (CallTarget@0x5558d5ca9bc0[Call#3])
  prom-           %304.3 = MkArg                    unboundValue, validObject[0x5558db3d7e50]_p101, e6.6
  ct              %304.4 = PushContext        lCL   %304.3, packageSlot(Class), function(object) <(rir::DispatchTable*)0x5558d|..., e6.6
  val?^           %304.5 = CastType                 up %304.3
  val?^ | miss    %304.6 = LdVar              eR    attr, <env 0x5558d398c378>
  lgl$#-          %304.7 = Identical                <blt attr>, %304.6   <true>
  cp              %304.8 = Checkpoint                -> BB306 (default) | BB305 (if assume failed)
BB11   <- [10]
  (cls|spec|blt)  %11.0 = LdFun              !v    @, <0x5558d3384bd8>, <env 0x5558d398c378>
  prom-           %11.1 = MkArg                    unboundValue, validObject[0x5558db3d7e50]_p102, e6.6
  prom-           %11.2 = MkArg                    unboundValue, validObject[0x5558db3d7e50]_p103, e6.6
  val?            %11.3 = Call               !v    %11.0(%11.1, %11.2) e6.6   <str$->
  goto BB12
BB306   <- [304]
  void                    Assume             D     %304.7, %304.8 (DeadBranchReached@0x5558d63db7c8[Test#0])
  env             e306.1 = MkEnv              l     object=%304.5, parent=<env 0x5558d398c378>, context 1
  val?            %306.2 = CallBuiltin        !v    attr(%4.4, "package") e306.1   <(nil|str)->
  val?            %306.3 = PopContext         C     %306.2, %304.4   <(nil|str)->
  goto BB12
BB305   <- [304]
  fs              %305.0 = FrameState         R     0x5558daa351a0+183: [], env=e1.1
  fs              %305.1 = FrameState         R     0x5558d711eee0+181: [], env=e6.6, next=%305.0
  env             e305.2 = (MkEnv)            l     object=%304.5, parent=<env 0x5558d398c378>, context 1
  fs              %305.3 = FrameState         R     0x5558d582f630+17: [<blt attr>, %304.7], env=e305.2, next=%305.1
  void                    Deopt              !v    %305.3   !
BB12   <- [11, 306]
  val?            %12.0 = Phi                      %11.3:BB11, %306.3:BB306   <(nil|str)->
  lgl$-           %12.1 = Is                       %12.0, NULL
  void                    StVar              lW    package, %12.0, e6.6
  cp              %12.3 = Checkpoint                -> BB14 (default) | BB13 (if assume failed)
BB14   <- [12]
  val             %14.0 = ChkMissing         e     %12.0
  lgl$#-          %14.1 = CheckTrueFalse     e     %12.1
  void                    Branch                   %14.1 -> BB292 (if true) | BB15 (if false)
BB13   <- [12]
  fs              %13.0 = FrameState         R     0x5558daa351a0+183: [], env=e1.1
  fs              %13.1 = FrameState         R     0x5558d711eee0+195: [], env=e6.6, next=%13.0
  void                    Deopt              !v    %13.1   !
BB292   <- [14]
  val?^ | miss    %292.0 = LdVar              eR    default, e6.6
  val?            %292.1 = Force!<lazy>       !v    %292.0, e6.6   <env->
  void                    StVar              lW    value, %292.1, e6.6
  cp              %292.3 = Checkpoint                -> BB294 (default) | BB293 (if assume failed)
BB15   <- [14]
  val?^ | miss    %15.0 = LdVar              eR    .requirePackage, e6.6
  lgl$#-          %15.1 = Identical                %15.0, function(package, mustFind=TRUE) <(rir::Dispat|...
  void                    Assume             D     %15.1, %12.3 (CallTarget@0x5558d5ca9bc0[Call#4])
  prom-           %15.3 = MkArg                    unboundValue, validObject[0x5558db3d7e50]_p104 (!refl), e6.6
  val?            %15.4 = StaticCall         !v    .requirePackage[0x5558d79809f0](%15.3) e6.6   <env->
  goto BB16
BB294   <- [292]
  val?^ | miss    %294.0 = LdVar              eR    getClassDef, e6.6
  lgl$#-          %294.1 = Identical                %294.0, function(Class, where=topenv(parent.frame()), |...
  void                    Assume             D     %294.1, %292.3 (CallTarget@0x5558d5ca9bc0[Call#5])
  prom-           %294.3 = MkArg                    unboundValue, validObject[0x5558db3d7e50]_p105, e6.6
  prom-           %294.4 = MkArg                    unboundValue, validObject[0x5558db3d7e50]_p106, e6.6
  val?            %294.5 = StaticCall         !v    getClassDef[0x5558d8ee4800](%294.3, %294.4, nil) e6.6   <other>
  lgl$-           %294.6 = Is                       %294.5, NULL
  lgl$-           %294.7 = AsLogical                %294.6
  lgl$#-          %294.8 = Identical                %294.7, false
  void                    StVar              lW    def, %294.5, e6.6
  val             %294.10 = ChkMissing         e     %294.5
  lgl$#-          %294.11 = CheckTrueFalse     e     %294.6
  void                    Branch                   %294.11 -> BB303 (if true) | BB295 (if false)
BB293   <- [292]
  fs              %293.0 = FrameState         R     0x5558daa351a0+183: [], env=e1.1
  fs              %293.1 = FrameState         R     0x5558d711eee0+285: [], env=e6.6, next=%293.0
  void                    Deopt              !v    %293.1   !
BB16   <- [300, 15]
  val?            %16.0 = Phi                      %15.4:BB15, %300.4:BB300
  val?            %16.1 = PopContext         C     %16.0, %6.4   <env->
  void                    StVar              lW    where, %16.1, e1.1
  void                    StVar              lW    anyStrings, %1.2, e1.1
  cp              %16.4 = Checkpoint                -> BB18 (default) | BB17 (if assume failed)
BB303   <- [294]
  fs              %303.0 = FrameState         R     0x5558daa351a0+183: [], env=e1.1
  val?^ | miss    %303.1 = LdVar              eR    .GlobalEnv, e6.6
  val?            %303.2 = Force!             !v    %303.1, e6.6   <val?_>
  void                    StVar              lW    value, %303.2, e6.6
  (cls|spec|blt)  %303.4 = LdFun              !v    getClassDef, e6.6
  fs              %303.5 = FrameState         R     0x5558d711eee0+399: [%303.4], env=e6.6, next=%303.0
  void                    Deopt              !v    %303.5, DeadCall@0x5558d5ca9bc0[Call#6], %303.4   !
BB295   <- [294]
  void                    Branch                   %294.8 -> BB302 (if true) | BB296 (if false)
BB18   <- [16]
  val?^ | miss    %18.0 = LdVar              eR    character, e1.1
  lgl$#-          %18.1 = Identical                %18.0, function(length=0L) <(rir::DispatchTable*)0x55|...
  void                    Assume             D     %18.1, %16.4 (CallTarget@0x5558d9aac8a0[Call#3])
  str-            %18.3 = CallSafeBuiltin    wed   vector("character", 0L)    <str->
  void                    StVar              lW    errors, %18.3, e1.1
  (cls|spec|blt)  %18.5 = LdFun              !v    @, <0x5558d3384bd8>, e1.1
  prom-           %18.6 = MkArg                    unboundValue, validObject[0x5558db3d7e50]_p4, e1.1
  prom-           %18.7 = MkArg                    unboundValue, validObject[0x5558db3d7e50]_p5, e1.1
  val?            %18.8 = Call               !v    %18.5(%18.6, %18.7) e1.1   <vec+>
  void                    StVar              lW    slotTypes, %18.8, e1.1
  lgl$#-          %18.10 = IsType                   %18.8 isA val?+
  cp              %18.11 = Checkpoint                -> BB20 (default) | BB19 (if assume failed)
BB17   <- [16]
  fs              %17.0 = FrameState         R     0x5558daa351a0+222: [], env=e1.1
  void                    Deopt              !v    %17.0   !
BB302   <- [295]
  goto BB297
BB296   <- [295]
  val?^ | miss    %296.0 = LdVar              eR    mustFind, e6.6
  val?            %296.1 = Force!             !v    %296.0, e6.6   <val?_>
  lgl$-           %296.2 = AsLogical          e     %296.1
  lgl$-           %296.3 = LAnd                     %294.7, %296.2
  goto BB297
BB20   <- [18]
  val?^ | miss    %20.0 = LdVar              eR    names, e1.1
  lgl$#-          %20.1 = Identical                <blt names>, %20.0   <true>
  void                    Assume             D     %20.1, %18.11 (DeadBranchReached@0x5558d9aac8a0[Test#1])
  val             %20.3 = ChkMissing         e     %18.8
  void                    Assume             D     %18.10, %18.11 (Typecheck@0x5558d9aac8a0[Type#10])
  val?+           %20.5 = CastType           d     dn %18.8   <vec+>
  val+            %20.6 = CallSafeBuiltin    wed   names(%20.5)    <str->
  void                    StVar              lW    slotNames, %20.6, e1.1
  cp              %20.8 = Checkpoint                -> BB22 (default) | BB21 (if assume failed)
BB19   <- [18]
  fs              %19.0 = FrameState         R     0x5558daa351a0+314: [], env=e1.1
  void                    Deopt              !v    %19.0   !
BB297   <- [302, 296]
  lgl$-           %297.0 = Phi                      %296.3:BB296, %294.7:BB302
  cp              %297.1 = Checkpoint                -> BB299 (default) | BB298 (if assume failed)
BB22   <- [20]
  val?^ | miss    %22.0 = LdVar              eR    c, e1.1
  lgl$#-          %22.1 = Identical                <blt c>, %22.0   <true>
  void                    Assume             D     %22.1, %20.8 (DeadBranchReached@0x5558d9aac8a0[Test#2])
  val?^ | miss    %22.3 = LdVar              eR    attributes, e1.1
  lgl$#-          %22.4 = Identical                <blt attributes>, %22.3   <true>
  void                    Assume             D     %22.4, %20.8 (DeadBranchReached@0x5558d9aac8a0[Test#4])
  val?^ | miss    %22.6 = LdVar              eR    object, e1.1
  val?            %22.7 = Force!<wrapped>    !v    %22.6, e1.1   <(cls|other)>
  val?            %22.8 = CallBuiltin        !v    attributes(%22.7) e1.1   <vec+>
  lgl$#-          %22.9 = IsType                   %22.8 isA val?+
  cp              %22.10 = Checkpoint                -> BB24 (default) | BB23 (if assume failed)
BB21   <- [20]
  fs              %21.0 = FrameState         R     0x5558daa351a0+419: [], env=e1.1
  void                    Deopt              !v    %21.0   !
BB299   <- [297]
  lgl$#-          %299.0 = CheckTrueFalse     e     %297.0
  void                    Branch                   %299.0 -> BB301 (if true) | BB300 (if false)
BB298   <- [297]
  fs              %298.0 = FrameState         R     0x5558daa351a0+183: [], env=e1.1
  fs              %298.1 = FrameState         R     0x5558d711eee0+678: [%297.0], env=e6.6, next=%298.0
  void                    Deopt              !v    %298.1   !
BB24   <- [22]
  void                    Assume             D     %22.9, %22.10 (Typecheck@0x5558d9aac8a0[Type#21])
  val?+           %24.1 = CastType           d     dn %22.8   <vec+>
  val+            %24.2 = CallSafeBuiltin    wed   names(%24.1)    <str->
  (list|sym|char|lgl|int|real|str|vec|complex|raw|cls|spec|blt|prom|_|code|env|ast|expressions|dots|other)+ %24.3 = CallSafeBuiltin    wed   c(".Data", ".S3Class", %24.2)    <str->
  void                    StVar              lW    attrNames, %24.3, e1.1
  cp              %24.5 = Checkpoint                -> BB26 (default) | BB25 (if assume failed)
BB23   <- [22]
  fs              %23.0 = FrameState         R     0x5558daa351a0+652: [<blt c>, ".Data", ".S3Class", <blt names>, %22.8], env=e1.1
  void                    Deopt              !v    %23.0   !
BB301   <- [299]
  fs              %301.0 = FrameState         R     0x5558daa351a0+183: [], env=e1.1
  (cls|spec|blt)  %301.1 = LdFun              !v    stop, e6.6
  fs              %301.2 = FrameState         R     0x5558d711eee0+694: [%301.1], env=e6.6, next=%301.0
  void                    Deopt              !v    %301.2, DeadCall@0x5558d5ca9bc0[Call#10], %301.1   !
BB300   <- [299]
  val?^ | miss    %300.0 = LdVar              eR    value, e6.6
  lgl$#-          %300.1 = IsType                   %300.0 isA val?~- | miss
  void                    Assume             D     %300.1, %297.1 (Typecheck@0x5558d5ca9bc0[Type#34])
  val?~- | miss   %300.3 = CastType           d     dn %300.0
  val?-           %300.4 = Force!<value>            %300.3,    <env->
  goto BB16
BB26   <- [24]
  val?^ | miss    %26.0 = LdVar              eR    anyNA, e1.1
  lgl$#-          %26.1 = Identical                <blt anyNA>, %26.0   <true>
  void                    Assume             D     %26.1, %24.5 (DeadBranchReached@0x5558d9aac8a0[Test#5])
  val?^ | miss    %26.3 = LdVar              eR    match, e1.1
  lgl$#-          %26.4 = Identical                %26.3, function(x, table, nomatch=NA, incomparables=N|...
  void                    Assume             D     %26.4, %24.5 (CallTarget@0x5558d9aac8a0[Call#14])
  val?^ | miss    %26.6 = LdVar              eR    slotNames, e1.1
  lgl$#-          %26.7 = IsType                   %26.6 isA val?~- | miss
  void                    Assume             D     %26.7, %24.5 (Typecheck@0x5558d9aac8a0[Type#27])
  val?~- | miss   %26.9 = CastType           d     dn %26.6
  val?-           %26.10 = Force!<value>            %26.9,    <str->
  val+            %26.11 = CallSafeBuiltin    wed   match(%26.10, %24.3, NA, nil)    <int->
  void                    StVar              lW    idx, %26.11, e1.1
  lgl$#-          %26.13 = IsType                   %26.11 isA int-
  cp              %26.14 = Checkpoint                -> BB28 (default) | BB27 (if assume failed)
BB25   <- [24]
  fs              %25.0 = FrameState         R     0x5558daa351a0+710: [], env=e1.1
  void                    Deopt              !v    %25.0   !
BB28   <- [26]
  void                    Assume             D     %26.13, %26.14 (Typecheck@0x5558d9aac8a0[Type#29])
  int-            %28.1 = CastType           d     dn %26.11
  val+            %28.2 = CallSafeBuiltin    wed   anyNA(%28.1)    <lgl$->
  lgl$#-          %28.3 = IsType                   %28.2 isA lgl$-
  cp              %28.4 = Checkpoint                -> BB30 (default) | BB29 (if assume failed)
BB27   <- [26]
  fs              %27.0 = FrameState         R     0x5558daa351a0+823: [<blt anyNA>, %26.11], env=e1.1
  void                    Deopt              !v    %27.0   !
BB30   <- [28]
  void                    Assume             D     %28.3, %28.4 (Typecheck@0x5558d9aac8a0[Type#30])
  lgl$-           %30.1 = CastType           d     dn %28.2
  lgl$#-          %30.2 = CheckTrueFalse     e     %30.1
  void                    Branch                   %30.2 -> BB287 (if true) | BB31 (if false)
BB29   <- [28]
  fs              %29.0 = FrameState         R     0x5558daa351a0+840: [%28.2], env=e1.1
  void                    Deopt              !v    %29.0   !
BB287   <- [30]
  val?^ | miss    %287.0 = LdVar              eR    is.na, e1.1
  lgl$#-          %287.1 = Identical                <blt is.na>, %287.0   <@?>
  void                    Branch                   %287.1 -> BB289 (if true) | BB288 (if false)
BB31   <- [30]
  val?^ | miss    %31.0 = LdVar              eR    seq_along, e1.1
  lgl$#-          %31.1 = Identical                <blt seq_along>, %31.0   <true>
  void                    Assume             D     %31.1, %28.4 (DeadBranchReached@0x5558d9aac8a0[Test#12])
  val?^ | miss    %31.3 = LdVar              eR    slotTypes, e1.1
  lgl$#-          %31.4 = IsType                   %31.3 isA val?~+ | miss
  void                    Assume             D     %31.4, %28.4 (Typecheck@0x5558d9aac8a0[Type#58])
  val?~+ | miss   %31.6 = CastType           d     dn %31.3
  val?+           %31.7 = Force!<value>            %31.6,    <vec+>
  val?            %31.8 = CallBuiltin        !v    seq_along(%31.7) e1.1   <int->
  cp              %31.9 = Checkpoint                -> BB33 (default) | BB32 (if assume failed)
BB289   <- [287]
  lgl-            %289.0 = CallSafeBuiltin    wed   is.na(%28.1)    <val?_>
  void                    StVar              lW    badSlots, %289.0, e1.1
  val?^ | miss    %289.2 = LdVar              eR    c, e1.1
  lgl$#-          %289.3 = Identical                <blt c>, %289.2   <@?>
  void                    Branch                   %289.3 -> BB291 (if true) | BB290 (if false)
BB288   <- [287]
  (cls|spec|blt)  %288.0 = LdFun              !v    is.na, e1.1
  fs              %288.1 = FrameState         R     0x5558daa351a0+884: [%288.0], env=e1.1
  void                    Deopt              !v    %288.1, DeadCall@0x5558d9aac8a0[Call#15], %288.0   !
BB33   <- [31]
  val?+           %33.0 = ToForSeq           e     %31.8
  int$-           %33.1 = Length                   %33.0
  int$-           %33.2 = Inc                      0L
  lgl$-           %33.3 = Lt                 d     %33.1, %33.2, elided   <false>
  lgl$#-          %33.4 = Identical                %33.3, true
  void                    AssumeNot          D     %33.4, %31.9 (DeadBranchReached@0x5558d9aac8a0[Test#13])
  val?            %33.6 = Extract2_1D        wed   %33.0, %33.2, elided
  void                    StVar              lW    i, %33.6, e1.1
  cp              %33.8 = Checkpoint                -> BB35 (default) | BB34 (if assume failed)
BB32   <- [31]
  fs              %32.0 = FrameState         R     0x5558daa351a0+1356: [%31.8], env=e1.1
  void                    Deopt              !v    %32.0   !
BB291   <- [289]
  val?^ | miss    %291.0 = LdVar              eR    errors, e1.1
  val?            %291.1 = Force!             !v    %291.0, e1.1   <val?_>
  (cls|spec|blt)  %291.2 = LdFun              !v    paste, e1.1
  fs              %291.3 = FrameState         R     0x5558daa351a0+1045: [<blt c>, %291.1, %291.2], env=e1.1
  void                    Deopt              !v    %291.3, DeadCall@0x5558d9aac8a0[Call#19], %291.2   !
BB290   <- [289]
  (cls|spec|blt)  %290.0 = LdFun              !v    c, e1.1
  fs              %290.1 = FrameState         R     0x5558daa351a0+989: [%290.0], env=e1.1
  void                    Deopt              !v    %290.1, DeadCall@0x5558d9aac8a0[Call#16], %290.0   !
BB35   <- [33]
  val?^ | miss    %35.0 = LdVar              eR    slotTypes, e1.1
  lgl$#-          %35.1 = IsType                   %35.0 isA val?~+ | miss
  void                    Assume             D     %35.1, %33.8 (Typecheck@0x5558d9aac8a0[Type#60])
  val?~+ | miss   %35.3 = CastType           d     dn %35.0
  val?+           %35.4 = Force!<value>            %35.3,    <vec+>
  lgl$#-          %35.5 = IsType                   %35.4 isA val+   <true>
  void                    Assume             D     %35.5, %33.8 (DeadBranchReached@0x5558d9aac8a0[Test#14])
  val             %35.7 = ChkMissing         e     %33.6
  lgl$#-          %35.8 = IsType                   %35.7 isA int$-
  void                    Assume             D     %35.8, %33.8 (Typecheck@0x5558d9aac8a0[Type#62])
  int$-           %35.10 = CastType           d     dn %35.7
  val?            %35.11 = Extract2_1D        wed   %35.4, %35.10, elided   <str$+>
  void                    StVar              lW    classi, %35.11, e1.1
  cp              %35.13 = Checkpoint                -> BB37 (default) | BB36 (if assume failed)
BB34   <- [33]
  fs              %34.0 = FrameState         R     0x5558daa351a0+1401: [%33.0, %33.1, %33.2], env=e1.1
  void                    Deopt              !v    %34.0   !
BB37   <- [35]
  val?^ | miss    %37.0 = LdVar              eR    getClassDef, e1.1
  lgl$#-          %37.1 = Identical                %37.0, function(Class, where=topenv(parent.frame()), |...
  void                    Assume             D     %37.1, %35.13 (CallTarget@0x5558d9aac8a0[Call#22])
  prom-           %37.3 = MkArg                    unboundValue, validObject[0x5558db3d7e50]_p8 (!refl), e1.1
  prom-           %37.4 = MkArg                    unboundValue, validObject[0x5558db3d7e50]_p9, e1.1
  val?            %37.5 = StaticCall         !v    getClassDef[0x5558ddedd310](%37.3, %37.4) { 0 1n } e1.1   <other>
  lgl$-           %37.6 = Is                       %37.5, NULL
  void                    StVar              lW    classDefi, %37.5, e1.1
  cp              %37.8 = Checkpoint                -> BB39 (default) | BB38 (if assume failed)
BB36   <- [35]
  fs              %36.0 = FrameState         R     0x5558daa351a0+1476: [%33.0, %33.1, %33.2], env=e1.1
  void                    Deopt              !v    %36.0   !
BB39   <- [37]
  val             %39.0 = ChkMissing         e     %37.5
  lgl$#-          %39.1 = CheckTrueFalse     e     %37.6
  void                    Branch                   %39.1 -> BB284 (if true) | BB40 (if false)
BB38   <- [37]
  fs              %38.0 = FrameState         R     0x5558daa351a0+1535: [%33.0, %33.1, %33.2], env=e1.1
  void                    Deopt              !v    %38.0   !
BB284   <- [39]
  val?^ | miss    %284.0 = LdVar              eR    c, e1.1
  lgl$#-          %284.1 = Identical                <blt c>, %284.0   <@?>
  void                    Branch                   %284.1 -> BB286 (if true) | BB285 (if false)
BB40   <- [39]
  val?^ | miss    %40.0 = LdVar              eR    slotNames, e1.1
  lgl$#-          %40.1 = IsType                   %40.0 isA val?~- | miss
  void                    Assume             D     %40.1, %37.8 (Typecheck@0x5558d9aac8a0[Type#83])
  val?~- | miss   %40.3 = CastType           d     dn %40.0
  val?-           %40.4 = Force!<value>            %40.3,    <str->
  lgl$#-          %40.5 = IsType                   %40.4 isA val+   <true>
  void                    Assume             D     %40.5, %37.8 (DeadBranchReached@0x5558d9aac8a0[Test#18])
  val?^ | miss    %40.7 = LdVar              eR    i, e1.1
  lgl$#-          %40.8 = IsType                   %40.7 isA int$-
  void                    Assume             D     %40.8, %37.8 (Typecheck@0x5558d9aac8a0[Type#85])
  int$-           %40.10 = CastType           d     dn %40.7
  val?            %40.11 = Extract2_1D        wed   %40.4, %40.10, elided   <str$->
  void                    StVar              lW    namei, %40.11, e1.1
  cp              %40.13 = Checkpoint                -> BB42 (default) | BB41 (if assume failed)
BB286   <- [284]
  val?^ | miss    %286.0 = LdVar              eR    errors, e1.1
  val?            %286.1 = Force!             !v    %286.0, e1.1   <val?_>
  (cls|spec|blt)  %286.2 = LdFun              !v    paste0, e1.1
  fs              %286.3 = FrameState         R     0x5558daa351a0+1649: [%33.0, %33.1, %33.2, <blt c>, %286.1, %286.2], env=e1.1
  void                    Deopt              !v    %286.3, DeadCall@0x5558d9aac8a0[Call#25], %286.2   !
BB285   <- [284]
  (cls|spec|blt)  %285.0 = LdFun              !v    c, e1.1
  fs              %285.1 = FrameState         R     0x5558daa351a0+1593: [%33.0, %33.1, %33.2, %285.0], env=e1.1
  void                    Deopt              !v    %285.1, DeadCall@0x5558d9aac8a0[Call#23], %285.0   !
BB42   <- [40]
  val?^ | miss    %42.0 = LdVar              eR    try, e1.1
  lgl$#-          %42.1 = Identical                %42.0, function(expr, silent=FALSE, outFile=getOption|...
  void                    Assume             D     %42.1, %40.13 (CallTarget@0x5558d9aac8a0[Call#26])
  prom-           %42.3 = MkArg                    unboundValue, validObject[0x5558db3d7e50]_p10, e1.1
  ct              %42.4 = PushContext        lCL   %42.3, true, try(switch(namei, .S3Class=S3Class(object), sl|..., function(expr, silent=FALSE, outFile=getOption|..., e1.1
  val?^           %42.5 = CastType                 up %42.3
  env             e42.6 = MkEnv              l     expr=%42.5, silent=true, outFile(miss)=missingArg, parent=R_BaseNamespace, context 1
  prom-           %42.7 = MkArg                    unboundValue, validObject[0x5558db3d7e50]_p65, e42.6
  val?^ | miss    %42.8 = CastType                 up %42.7
  void                    StArg              lW    outFile, %42.8, e42.6
  cls             %42.10 = MkCls                    try@Prom(3)0, e42.6
  prom-           %42.11 = MkArg                    unboundValue, validObject[0x5558db3d7e50]_p67, e42.6
  prom-           %42.12 = MkArg                    %42.10, validObject[0x5558db3d7e50]_p68 (!refl), e42.6
  dots-           %42.13 = DotsList           l     error=%42.12
  val?            %42.14 = StaticCall         !v    tryCatch[0x5558dafe5b80](%42.11, %42.13) { 0 1n } e42.6   <val?>
  val?            %42.15 = PopContext         C     %42.14, %42.4   <val?->
  void                    StVar              lW    sloti, %42.15, e1.1
  lgl$#-          %42.17 = IsType                   %42.15 isA val?-
  cp              %42.18 = Checkpoint                -> BB44 (default) | BB43 (if assume failed)
BB41   <- [40]
  fs              %41.0 = FrameState         R     0x5558daa351a0+1817: [%33.0, %33.1, %33.2], env=e1.1
  void                    Deopt              !v    %41.0   !
BB44   <- [42]
  val?^ | miss    %44.0 = LdVar              eR    inherits, e1.1
  lgl$#-          %44.1 = Identical                %44.0, function(x, what, which=FALSE) <(rir::Dispatch|...
  void                    Assume             D     %44.1, %42.18 (CallTarget@0x5558d9aac8a0[Call#29])
  void                    Assume             D     %42.17, %42.18 (Typecheck@0x5558d9aac8a0[Type#93])
  val?-           %44.4 = CastType           d     dn %42.15
  val+            %44.5 = CallSafeBuiltin    wed   inherits(%44.4, "try-error", false)    <lgl$->
  lgl$#-          %44.6 = IsType                   %44.5 isA lgl$-
  cp              %44.7 = Checkpoint                -> BB46 (default) | BB45 (if assume failed)
BB43   <- [42]
  fs              %43.0 = FrameState         R     0x5558daa351a0+1876: [%33.0, %33.1, %33.2], env=e1.1
  void                    Deopt              !v    %43.0   !
BB46   <- [44]
  void                    Assume             D     %44.6, %44.7 (Typecheck@0x5558d9aac8a0[Type#95])
  lgl$-           %46.1 = CastType           d     dn %44.5
  lgl$#-          %46.2 = CheckTrueFalse     e     %46.1
  void                    Branch                   %46.2 -> BB279 (if true) | BB47 (if false)
BB45   <- [44]
  prom-           %45.0 = MkArg                    unboundValue, validObject[0x5558db3d7e50]_p14 (!refl), e1.1
  val?^           %45.1 = CastType                 up %45.0
  fs              %45.2 = FrameState         R     0x5558daa351a0+1913: [%33.0, %33.1, %33.2], env=e1.1
  env             e45.3 = (MkEnv)            l     which(miss)=false, what="try-error", x=%45.1, parent=R_BaseNamespace, context 0
  fs              %45.4 = FrameState         R     0x5558d52561e0+55: [%44.5], env=e45.3, next=%45.2
  void                    Deopt              !v    %45.4   !
BB279   <- [46]
  val?^ | miss    %279.0 = LdVar              eR    c, e1.1
  lgl$#-          %279.1 = Identical                <blt c>, %279.0   <@?>
  void                    Branch                   %279.1 -> BB281 (if true) | BB280 (if false)
BB47   <- [46]
  val?^ | miss    %47.0 = LdVar              eR    possibleExtends, e1.1
  lgl$#-          %47.1 = Identical                %47.0, function(class1, class2, ClassDef1=getClassDef|...
  void                    Assume             D     %47.1, %44.7 (CallTarget@0x5558d9aac8a0[Call#31])
  prom-           %47.3 = MkArg                    unboundValue, validObject[0x5558db3d7e50]_p15, e1.1
  prom-           %47.4 = MkArg                    unboundValue, validObject[0x5558db3d7e50]_p17, e1.1
  prom-           %47.5 = MkArg                    unboundValue, validObject[0x5558db3d7e50]_p18, e1.1
  val?            %47.6 = StaticCall         !v    possibleExtends[0x5558db33a020](%47.3, %47.4, missingArg, %47.5) { 0 1 3n } e1.1   <lgl$->
  lgl$#-          %47.7 = IsType                   %47.6 isA lgl$-
  cp              %47.8 = Checkpoint                -> BB49 (default) | BB48 (if assume failed)
BB281   <- [279]
  val?^ | miss    %281.0 = LdVar              eR    errors, e1.1
  val?            %281.1 = Force!             !v    %281.0, e1.1   <val?_>
  val?^ | miss    %281.2 = LdVar              eR    sloti, e1.1
  val?            %281.3 = Force!             !v    %281.2, e1.1   <val?_>
  lgl$#-          %281.4 = IsType                   %281.3 isA val?+
  lgl$#-          %281.5 = IsType                   %281.1 isA val?+
  cp              %281.6 = Checkpoint                -> BB283 (default) | BB282 (if assume failed)
BB280   <- [279]
  (cls|spec|blt)  %280.0 = LdFun              !v    c, e1.1
  fs              %280.1 = FrameState         R     0x5558daa351a0+1957: [%33.0, %33.1, %33.2, %280.0], env=e1.1
  void                    Deopt              !v    %280.1, DeadCall@0x5558d9aac8a0[Call#30], %280.0   !
BB49   <- [47]
  void                    Assume             D     %47.7, %47.8 (Typecheck@0x5558d9aac8a0[Type#105])
  lgl$-           %49.1 = CastType           d     dn %47.6
  void                    StVar              lW    ok, %49.1, e1.1
  cp              %49.3 = Checkpoint                -> BB51 (default) | BB50 (if assume failed)
BB48   <- [47]
  fs              %48.0 = FrameState         R     0x5558daa351a0+2117: [%33.0, %33.1, %33.2, %47.6], env=e1.1
  void                    Deopt              !v    %48.0   !
BB283   <- [281]
  void                    Assume             D     %281.5, %281.6 (Typecheck@0x5558d9aac8a0[Type#98])
  val?+           %283.1 = CastType           d     dn %281.1   <val?_>
  void                    Assume             D     %281.4, %281.6 (Typecheck@0x5558d9aac8a0[Type#99])
  val?+           %283.3 = CastType           d     dn %281.3   <val?_>
  val+            %283.4 = CallSafeBuiltin    wed   c(%283.1, %283.3)    <val?_>
  void                    StVar              lW    errors, %283.4, e1.1
  goto BB59
BB282   <- [281]
  fs              %282.0 = FrameState         R     0x5558daa351a0+2017: [%33.0, %33.1, %33.2, <blt c>, %281.1, %281.3], env=e1.1
  void                    Deopt              !v    %282.0   !
BB51   <- [49]
  val?^ | miss    %51.0 = LdVar              eR    isFALSE, e1.1
  lgl$#-          %51.1 = Identical                %51.0, function(x) <(rir::DispatchTable*)0x5558d63992|...
  void                    Assume             D     %51.1, %49.3 (CallTarget@0x5558d9aac8a0[Call#33])
  lgl$-           %51.3 = CallSafeBuiltin    wed   is.na(%49.1)    <lgl$->
  lgl$-           %51.4 = Not                d     %51.3, elided
  lgl$-           %51.5 = AsLogical                %51.4
  lgl$-           %51.6 = AsLogical                %51.5
  lgl$-           %51.7 = AsLogical                %51.6
  lgl$#-          %51.8 = Identical                %51.7, false
  void                    Branch                   %51.8 -> BB278 (if true) | BB52 (if false)
BB50   <- [49]
  fs              %50.0 = FrameState         R     0x5558daa351a0+2131: [%33.0, %33.1, %33.2], env=e1.1
  void                    Deopt              !v    %50.0   !
BB59   <- [58, 135, 283, 160]
  int$-           %59.0 = Phi                      %33.2:BB58, %59.1:BB135, %59.1:BB160, %33.2:BB283
  int$-           %59.1 = Inc                      %59.0
  cp              %59.2 = Checkpoint                -> BB61 (default) | BB60 (if assume failed)
BB278   <- [51]
  goto BB53
BB52   <- [51]
  lgl$-           %52.0 = Not                d     %49.1, elided
  lgl$-           %52.1 = AsLogical                %52.0
  lgl$-           %52.2 = LAnd                     %51.7, %52.1
  goto BB53
BB61   <- [59]
  lgl$-           %61.0 = Lt                 d     %33.1, %59.1, elided
  lgl$#-          %61.1 = Identical                %61.0, true
  void                    Branch                   %61.1 -> BB164 (if true) | BB62 (if false)
BB60   <- [59]
  fs              %60.0 = FrameState         R     0x5558daa351a0+2760: [%33.0, %33.1, %59.0], env=e1.1
  void                    Deopt              !v    %60.0   !
BB53   <- [278, 52]
  lgl$-           %53.0 = Phi                      %52.2:BB52, %51.7:BB278
  lgl$#-          %53.1 = CheckTrueFalse     e     %53.0
  void                    Branch                   %53.1 -> BB275 (if true) | BB54 (if false)
BB164   <- [61]
  val?^ | miss    %164.0 = LdVar              eR    rev, e1.1
  lgl$#-          %164.1 = Identical                %164.0, function(x) <(rir::DispatchTable*)0x5558db1c17|...
  void                    Assume             D     %164.1, %59.2 (CallTarget@0x5558d9aac8a0[Call#68])
  (cls|spec|blt)  %164.3 = LdFun              !v    @, <0x5558d3384bd8>, e1.1
  prom-           %164.4 = MkArg                    unboundValue, validObject[0x5558db3d7e50]_p38, e1.1
  prom-           %164.5 = MkArg                    unboundValue, validObject[0x5558db3d7e50]_p39, e1.1
  val?            %164.6 = Call               !v    %164.3(%164.4, %164.5) e1.1   <vec+>
  val?            %164.7 = StaticCall         !v    rev[0x5558db380fe0](%164.6) e1.1   <vec+>
  void                    StVar              lW    extends, %164.7, e1.1
  cp              %164.9 = Checkpoint                -> BB166 (default) | BB165 (if assume failed)
BB62   <- [61]
  val?            %62.0 = Extract2_1D        wed   %33.0, %59.1, elided
  void                    StVar              lW    i, %62.0, e1.1
  cp              %62.2 = Checkpoint                -> BB64 (default) | BB63 (if assume failed)
BB275   <- [53]
  val?^ | miss    %275.0 = LdVar              eR    c, e1.1
  lgl$#-          %275.1 = Identical                <blt c>, %275.0   <@?>
  void                    Branch                   %275.1 -> BB277 (if true) | BB276 (if false)
BB54   <- [53]
  val?^ | miss    %54.0 = LdVar              eR    complete, e1.1
  val?            %54.1 = Force!<lazy>       !v    %54.0, e1.1   <lgl$->
  lgl$#-          %54.2 = IsType                   %54.1 isA lgl$-
  cp              %54.3 = Checkpoint                -> BB56 (default) | BB55 (if assume failed)
BB166   <- [164]
  val?^ | miss    %166.0 = LdVar              eR    seq_along, e1.1
  lgl$#-          %166.1 = Identical                <blt seq_along>, %166.0   <true>
  void                    Assume             D     %166.1, %164.9 (DeadBranchReached@0x5558d9aac8a0[Test#58])
  val             %166.3 = ChkMissing         e     %164.7
  val?            %166.4 = CallBuiltin        !v    seq_along(%164.7) e1.1   <int->
  cp              %166.5 = Checkpoint                -> BB168 (default) | BB167 (if assume failed)
BB165   <- [164]
  fs              %165.0 = FrameState         R     0x5558daa351a0+4204: [], env=e1.1
  void                    Deopt              !v    %165.0   !
BB64   <- [62]
  val?^ | miss    %64.0 = LdVar              eR    slotTypes, e1.1
  lgl$#-          %64.1 = IsType                   %64.0 isA val?~+ | miss
  void                    Assume             D     %64.1, %62.2 (Typecheck@0x5558d9aac8a0[Type#151])
  val?~+ | miss   %64.3 = CastType           d     dn %64.0
  val?+           %64.4 = Force!<value>            %64.3,    <vec+>
  lgl$#-          %64.5 = IsType                   %64.4 isA val+   <true>
  void                    Assume             D     %64.5, %62.2 (DeadBranchReached@0x5558d9aac8a0[Test#36])
  val             %64.7 = ChkMissing         e     %62.0
  lgl$#-          %64.8 = IsType                   %64.7 isA int$-
  void                    Assume             D     %64.8, %62.2 (Typecheck@0x5558d9aac8a0[Type#153])
  int$-           %64.10 = CastType           d     dn %64.7
  val?            %64.11 = Extract2_1D        wed   %64.4, %64.10, elided   <str$+>
  void                    StVar              lW    classi, %64.11, e1.1
  cp              %64.13 = Checkpoint                -> BB66 (default) | BB65 (if assume failed)
BB63   <- [62]
  fs              %63.0 = FrameState         R     0x5558daa351a0+2789: [%33.0, %33.1, %59.1], env=e1.1
  void                    Deopt              !v    %63.0   !
BB277   <- [275]
  val?^ | miss    %277.0 = LdVar              eR    errors, e1.1
  val?            %277.1 = Force!             !v    %277.0, e1.1   <val?_>
  (cls|spec|blt)  %277.2 = LdFun              !v    paste0, e1.1
  fs              %277.3 = FrameState         R     0x5558daa351a0+2263: [%33.0, %33.1, %33.2, <blt c>, %277.1, %277.2], env=e1.1
  void                    Deopt              !v    %277.3, DeadCall@0x5558d9aac8a0[Call#37], %277.2   !
BB276   <- [275]
  (cls|spec|blt)  %276.0 = LdFun              !v    c, e1.1
  fs              %276.1 = FrameState         R     0x5558daa351a0+2207: [%33.0, %33.1, %33.2, %276.0], env=e1.1
  void                    Deopt              !v    %276.1, DeadCall@0x5558d9aac8a0[Call#34], %276.0   !
BB56   <- [54]
  void                    Assume             D     %54.2, %54.3 (Typecheck@0x5558d9aac8a0[Type#131])
  lgl$-           %56.1 = CastType           d     dn %54.1
  lgl$-           %56.2 = Not                d     %56.1, elided
  lgl$#-          %56.3 = CheckTrueFalse     e     %56.2
  void                    Branch                   %56.3 -> BB58 (if true) | BB57 (if false)
BB55   <- [54]
  fs              %55.0 = FrameState         R     0x5558daa351a0+2385: [%33.0, %33.1, %33.2, %54.1], env=e1.1
  void                    Deopt              !v    %55.0   !
BB168   <- [166]
  val?+           %168.0 = ToForSeq           e     %166.4
  int$-           %168.1 = Length                   %168.0
  lgl$-           %168.2 = Lt                 d     %168.1, %33.2, elided   <false>
  lgl$#-          %168.3 = Identical                %168.2, true
  void                    AssumeNot          D     %168.3, %166.5 (DeadBranchReached@0x5558d9aac8a0[Test#59])
  val?            %168.5 = Extract2_1D        wed   %168.0, %33.2, elided
  void                    StVar              lW    i, %168.5, e1.1
  cp              %168.7 = Checkpoint                -> BB170 (default) | BB169 (if assume failed)
BB167   <- [166]
  fs              %167.0 = FrameState         R     0x5558daa351a0+4295: [%166.4], env=e1.1
  void                    Deopt              !v    %167.0   !
BB66   <- [64]
  val?^ | miss    %66.0 = LdVar              eR    getClassDef, e1.1
  lgl$#-          %66.1 = Identical                %66.0, function(Class, where=topenv(parent.frame()), |...
  void                    Assume             D     %66.1, %64.13 (CallTarget@0x5558d9aac8a0[Call#45])
  prom-           %66.3 = MkArg                    unboundValue, validObject[0x5558db3d7e50]_p20 (!refl), e1.1
  prom-           %66.4 = MkArg                    unboundValue, validObject[0x5558db3d7e50]_p21, e1.1
  val?            %66.5 = StaticCall         !v    getClassDef[0x5558ddedd310](%66.3, %66.4) { 0 1n } e1.1   <other>
  lgl$-           %66.6 = Is                       %66.5, NULL
  void                    StVar              lW    classDefi, %66.5, e1.1
  cp              %66.8 = Checkpoint                -> BB68 (default) | BB67 (if assume failed)
BB65   <- [64]
  fs              %65.0 = FrameState         R     0x5558daa351a0+2864: [%33.0, %33.1, %59.1], env=e1.1
  void                    Deopt              !v    %65.0   !
BB58   <- [56]
  goto BB59
BB57   <- [56]
  (cls|spec|blt)  %57.0 = LdFun              !v    anyStrings, e1.1
  fs              %57.1 = FrameState         R     0x5558daa351a0+2417: [%33.0, %33.1, %33.2, %57.0], env=e1.1
  void                    Deopt              !v    %57.1, DeadCall@0x5558d9aac8a0[Call#39], %57.0   !
BB170   <- [168]
  val?^ | miss    %170.0 = LdVar              eR    extends, e1.1
  lgl$#-          %170.1 = IsType                   %170.0 isA val?~+ | miss
  void                    Assume             D     %170.1, %168.7 (Typecheck@0x5558d9aac8a0[Type#249])
  val?~+ | miss   %170.3 = CastType           d     dn %170.0
  val?+           %170.4 = Force!<value>            %170.3,    <vec+>
  lgl$#-          %170.5 = IsType                   %170.4 isA val+   <true>
  void                    Assume             D     %170.5, %168.7 (DeadBranchReached@0x5558d9aac8a0[Test#60])
  val             %170.7 = ChkMissing         e     %168.5
  lgl$#-          %170.8 = IsType                   %170.7 isA int$-
  void                    Assume             D     %170.8, %168.7 (Typecheck@0x5558d9aac8a0[Type#251])
  int$-           %170.10 = CastType           d     dn %170.7
  val?            %170.11 = Extract2_1D        wed   %170.4, %170.10, elided   <other>
  void                    StVar              lW    exti, %170.11, e1.1
  (cls|spec|blt)  %170.13 = LdFun              !v    @, <0x5558d3384bd8>, e1.1
  prom-           %170.14 = MkArg                    unboundValue, validObject[0x5558db3d7e50]_p40, e1.1
  prom-           %170.15 = MkArg                    unboundValue, validObject[0x5558db3d7e50]_p41, e1.1
  val?            %170.16 = Call               !v    %170.13(%170.14, %170.15) e1.1   <str$+>
  void                    StVar              lW    superClass, %170.16, e1.1
  (cls|spec|blt)  %170.18 = LdFun              !v    @, <0x5558d3384bd8>, e1.1
  prom-           %170.19 = MkArg                    unboundValue, validObject[0x5558db3d7e50]_p42, e1.1
  prom-           %170.20 = MkArg                    unboundValue, validObject[0x5558db3d7e50]_p43, e1.1
  val?            %170.21 = Call               !v    %170.18(%170.19, %170.20) e1.1   <lgl$->
  lgl$#-          %170.22 = IsType                   %170.21 isA lgl$-
  cp              %170.23 = Checkpoint                -> BB172 (default) | BB171 (if assume failed)
BB169   <- [168]
  fs              %169.0 = FrameState         R     0x5558daa351a0+4340: [%168.0, %168.1, %33.2], env=e1.1
  void                    Deopt              !v    %169.0   !
BB68   <- [66]
  val             %68.0 = ChkMissing         e     %66.5
  lgl$#-          %68.1 = CheckTrueFalse     e     %66.6
  void                    Branch                   %68.1 -> BB161 (if true) | BB69 (if false)
BB67   <- [66]
  fs              %67.0 = FrameState         R     0x5558daa351a0+2923: [%33.0, %33.1, %59.1], env=e1.1
  void                    Deopt              !v    %67.0   !
BB172   <- [170]
  void                    Assume             D     %170.22, %170.23 (Typecheck@0x5558d9aac8a0[Type#258])
  lgl$-           %172.1 = CastType           d     dn %170.21
  lgl$-           %172.2 = Not                d     %172.1, elided
  lgl$-           %172.3 = AsLogical                %172.2
  lgl$#-          %172.4 = Identical                %172.3, false
  void                    Branch                   %172.4 -> BB174 (if true) | BB173 (if false)
BB171   <- [170]
  fs              %171.0 = FrameState         R     0x5558daa351a0+4503: [%168.0, %168.1, %33.2, %170.21], env=e1.1
  void                    Deopt              !v    %171.0   !
BB161   <- [68]
  val?^ | miss    %161.0 = LdVar              eR    c, e1.1
  lgl$#-          %161.1 = Identical                <blt c>, %161.0   <@?>
  void                    Branch                   %161.1 -> BB163 (if true) | BB162 (if false)
BB69   <- [68]
  val?^ | miss    %69.0 = LdVar              eR    slotNames, e1.1
  lgl$#-          %69.1 = IsType                   %69.0 isA val?~- | miss
  void                    Assume             D     %69.1, %66.8 (Typecheck@0x5558d9aac8a0[Type#174])
  val?~- | miss   %69.3 = CastType           d     dn %69.0
  val?-           %69.4 = Force!<value>            %69.3,    <str->
  lgl$#-          %69.5 = IsType                   %69.4 isA val+   <true>
  void                    Assume             D     %69.5, %66.8 (DeadBranchReached@0x5558d9aac8a0[Test#40])
  val?^ | miss    %69.7 = LdVar              eR    i, e1.1
  lgl$#-          %69.8 = IsType                   %69.7 isA int$-
  void                    Assume             D     %69.8, %66.8 (Typecheck@0x5558d9aac8a0[Type#176])
  int$-           %69.10 = CastType           d     dn %69.7
  val?            %69.11 = Extract2_1D        wed   %69.4, %69.10, elided   <str$->
  void                    StVar              lW    namei, %69.11, e1.1
  cp              %69.13 = Checkpoint                -> BB71 (default) | BB70 (if assume failed)
BB174   <- [172]
  lgl$#-          %174.0 = CheckTrueFalse     e     %172.3
  void                    Branch                   %174.0 -> BB274 (if true) | BB175 (if false)
BB173   <- [172]
  (cls|spec|blt)  %173.0 = LdFun              !v    is, e1.1
  fs              %173.1 = FrameState         R     0x5558daa351a0+4521: [%168.0, %168.1, %33.2, %172.3, %173.0], env=e1.1
  void                    Deopt              !v    %173.1, DeadCall@0x5558d9aac8a0[Call#73], %173.0   !
BB163   <- [161]
  val?^ | miss    %163.0 = LdVar              eR    errors, e1.1
  val?            %163.1 = Force!             !v    %163.0, e1.1   <val?_>
  (cls|spec|blt)  %163.2 = LdFun              !v    paste0, e1.1
  fs              %163.3 = FrameState         R     0x5558daa351a0+3037: [%33.0, %33.1, %59.1, <blt c>, %163.1, %163.2], env=e1.1
  void                    Deopt              !v    %163.3, DeadCall@0x5558d9aac8a0[Call#48], %163.2   !
BB162   <- [161]
  (cls|spec|blt)  %162.0 = LdFun              !v    c, e1.1
  fs              %162.1 = FrameState         R     0x5558daa351a0+2981: [%33.0, %33.1, %59.1, %162.0], env=e1.1
  void                    Deopt              !v    %162.1, DeadCall@0x5558d9aac8a0[Call#46], %162.0   !
BB71   <- [69]
  val?^ | miss    %71.0 = LdVar              eR    try, e1.1
  lgl$#-          %71.1 = Identical                %71.0, function(expr, silent=FALSE, outFile=getOption|...
  void                    Assume             D     %71.1, %69.13 (CallTarget@0x5558d9aac8a0[Call#49])
  prom-           %71.3 = MkArg                    unboundValue, validObject[0x5558db3d7e50]_p22, e1.1
  ct              %71.4 = PushContext        lCL   %71.3, true, try(switch(namei, .S3Class=S3Class(object), sl|..., function(expr, silent=FALSE, outFile=getOption|..., e1.1
  val?^           %71.5 = CastType                 up %71.3
  env             e71.6 = MkEnv              l     expr=%71.5, silent=true, outFile(miss)=missingArg, parent=R_BaseNamespace, context 1
  prom-           %71.7 = MkArg                    unboundValue, validObject[0x5558db3d7e50]_p70, e71.6
  val?^ | miss    %71.8 = CastType                 up %71.7
  void                    StArg              lW    outFile, %71.8, e71.6
  cls             %71.10 = MkCls                    try@Prom(3)0, e71.6
  cp              %71.11 = Checkpoint                -> BB73 (default) | BB72 (if assume failed)
BB70   <- [69]
  fs              %70.0 = FrameState         R     0x5558daa351a0+3205: [%33.0, %33.1, %59.1], env=e1.1
  void                    Deopt              !v    %70.0   !
BB274   <- [174]
  goto BB180
BB175   <- [174]
  val?^ | miss    %175.0 = LdVar              eR    getClassDef, e1.1
  lgl$#-          %175.1 = Identical                %175.0, function(Class, where=topenv(parent.frame()), |...
  void                    Assume             D     %175.1, %170.23 (CallTarget@0x5558d9aac8a0[Call#74])
  prom-           %175.3 = MkArg                    unboundValue, validObject[0x5558db3d7e50]_p44, e1.1
  val?            %175.4 = StaticCall         !v    getClassDef[0x5558d866ae40](%175.3) e1.1   <other>
  lgl$-           %175.5 = Is                       %175.4, NULL
  void                    StVar              lW    superDef, %175.4, e1.1
  val             %175.7 = ChkMissing         e     %175.4
  lgl$#-          %175.8 = CheckTrueFalse     e     %175.5
  void                    Branch                   %175.8 -> BB271 (if true) | BB176 (if false)
BB73   <- [71]
  val?^ | miss    %73.0 = LdVar              eR    tryCatch, e71.6
  lgl$#-          %73.1 = Identical                %73.0, function(expr, ..., finally) <(rir::DispatchTa|...
  void                    Assume             D     %73.1, %71.11 (CallTarget@0x5558d53528b0[Call#2])
  prom-           %73.3 = MkArg                    unboundValue, validObject[0x5558db3d7e50]_p72, e71.6
  prom-           %73.4 = MkArg                    %71.10, validObject[0x5558db3d7e50]_p73 (!refl), e71.6
  dots-           %73.5 = DotsList           l     error=%73.4
  val?            %73.6 = StaticCall         !v    tryCatch[0x5558dafe5b80](%73.3, %73.5) { 0 1n } e71.6   <val?>
  val?            %73.7 = PopContext         C     %73.6, %71.4
  void                    StVar              lW    sloti, %73.7, e1.1
  cp              %73.9 = Checkpoint                -> BB75 (default) | BB74 (if assume failed)
BB72   <- [71]
  fs              %72.0 = FrameState         R     0x5558daa351a0+3250: [%33.0, %33.1, %59.1], env=e1.1
  fs              %72.1 = FrameState         R     0x5558d5428e10+0: [], env=e71.6, next=%72.0
  void                    Deopt              !v    %72.1   !
BB180   <- [179, 266, 274, 195]
  int$-           %180.0 = Phi                      %33.2:BB179, %180.1:BB195, %180.1:BB266, %33.2:BB274
  int$-           %180.1 = Inc                      %180.0
  lgl$-           %180.2 = Lt                 d     %168.1, %180.1, elided
  lgl$#-          %180.3 = Identical                %180.2, true
  void                    Branch                   %180.3 -> BB267 (if true) | BB181 (if false)
BB271   <- [175]
  val?^ | miss    %271.0 = LdVar              eR    c, e1.1
  lgl$#-          %271.1 = Identical                <blt c>, %271.0   <@?>
  void                    Branch                   %271.1 -> BB273 (if true) | BB272 (if false)
BB176   <- [175]
  (cls|spec|blt)  %176.0 = LdFun              !v    @, <0x5558d3384bd8>, e1.1
  prom-           %176.1 = MkArg                    unboundValue, validObject[0x5558db3d7e50]_p45, e1.1
  prom-           %176.2 = MkArg                    unboundValue, validObject[0x5558db3d7e50]_p46, e1.1
  val?            %176.3 = Call               !v    %176.0(%176.1, %176.2) e1.1   <nil->
  void                    StVar              lW    validityMethod, %176.3, e1.1
  lgl$#-          %176.5 = IsType                   %176.3 isA val?-
  cp              %176.6 = Checkpoint                -> BB178 (default) | BB177 (if assume failed)
BB75   <- [73]
  val?^ | miss    %75.0 = LdVar              eR    inherits, e1.1
  lgl$#-          %75.1 = Identical                %75.0, function(x, what, which=FALSE) <(rir::Dispatch|...
  void                    Assume             D     %75.1, %73.9 (CallTarget@0x5558d9aac8a0[Call#52])
  prom-           %75.3 = MkArg                    unboundValue, validObject[0x5558db3d7e50]_p26 (!refl), e1.1
  ct              %75.4 = PushContext        lCL   %75.3, "try-error", inherits(sloti, "try-error"), function(x, what, which=FALSE) <(rir::Dispatch|..., e1.1
  val?^           %75.5 = CastType                 up %75.3
  env             e75.6 = MkEnv              l     x=%75.5, what="try-error", which(miss)=false, parent=R_BaseNamespace, context 1
  val?            %75.7 = Force!<lazy>       !vr   %75.5, e75.6   <val?>
  val?^ | miss    %75.8 = LdVar              eR    what, e75.6
  val?            %75.9 = Force!<value>      !v    %75.8, e75.6   <str$->
  val?^ | miss    %75.10 = LdVar              eR    which, e75.6
  val?            %75.11 = Force!<lazy>       !v    %75.10, e75.6   <lgl$->
  lgl$#-          %75.12 = IsType                   %75.11 isA lgl$-
  lgl$#-          %75.13 = IsType                   %75.9 isA val?-
  cp              %75.14 = Checkpoint                -> BB77 (default) | BB76 (if assume failed)
BB74   <- [73]
  fs              %74.0 = FrameState         R     0x5558daa351a0+3264: [%33.0, %33.1, %59.1], env=e1.1
  void                    Deopt              !v    %74.0   !
BB267   <- [180]
  goto BB219
BB181   <- [180]
  val?            %181.0 = Extract2_1D        wed   %168.0, %180.1, elided
  void                    StVar              lW    i, %181.0, e1.1
  cp              %181.2 = Checkpoint                -> BB183 (default) | BB182 (if assume failed)
BB273   <- [271]
  val?^ | miss    %273.0 = LdVar              eR    errors, e1.1
  val?            %273.1 = Force!             !v    %273.0, e1.1   <val?_>
  (cls|spec|blt)  %273.2 = LdFun              !v    paste0, e1.1
  fs              %273.3 = FrameState         R     0x5558daa351a0+4742: [%168.0, %168.1, %33.2, <blt c>, %273.1, %273.2], env=e1.1
  void                    Deopt              !v    %273.3, DeadCall@0x5558d9aac8a0[Call#77], %273.2   !
BB272   <- [271]
  (cls|spec|blt)  %272.0 = LdFun              !v    c, e1.1
  fs              %272.1 = FrameState         R     0x5558daa351a0+4686: [%168.0, %168.1, %33.2, %272.0], env=e1.1
  void                    Deopt              !v    %272.1, DeadCall@0x5558d9aac8a0[Call#75], %272.0   !
BB178   <- [176]
  val?^ | miss    %178.0 = LdVar              eR    is.function, e1.1
  lgl$#-          %178.1 = Identical                <blt is.function>, %178.0   <true>
  void                    Assume             D     %178.1, %176.6 (DeadBranchReached@0x5558d9aac8a0[Test#62])
  val             %178.3 = ChkMissing         e     %176.3
  void                    Assume             D     %176.5, %176.6 (Typecheck@0x5558d9aac8a0[Type#274])
  val?-           %178.5 = CastType           d     dn %176.3   <nil->
  lgl$#-          %178.6 = CallSafeBuiltin    wed   is.function(%178.5)    <lgl$->
  void                    Branch                   %178.6 -> BB268 (if true) | BB179 (if false)
BB177   <- [176]
  fs              %177.0 = FrameState         R     0x5558daa351a0+4876: [%168.0, %168.1, %33.2], env=e1.1
  void                    Deopt              !v    %177.0   !
BB77   <- [75]
  void                    Assume             D     %75.13, %75.14 (Typecheck@0x5558d3c57b00[Type#1])
  val?-           %77.1 = CastType           d     dn %75.9   <str$->
  void                    Assume             D     %75.12, %75.14 (Typecheck@0x5558d3c57b00[Type#2])
  lgl$-           %77.3 = CastType           d     dn %75.11
  val?            %77.4 = CallBuiltin        !v    inherits(%75.7, %77.1, %77.3) e75.6
  val?            %77.5 = PopContext         C     %77.4, %75.4   <lgl$->
  lgl$#-          %77.6 = IsType                   %77.5 isA lgl$-
  cp              %77.7 = Checkpoint                -> BB79 (default) | BB78 (if assume failed)
BB76   <- [75]
  fs              %76.0 = FrameState         R     0x5558daa351a0+3301: [%33.0, %33.1, %59.1], env=e1.1
  fs              %76.1 = FrameState         R     0x5558d52561e0+37: [%75.7, %75.9, %75.11], env=e75.6, next=%76.0
  void                    Deopt              !v    %76.1   !
BB219   <- [218, 267]
  (cls|spec|blt)  %219.0 = LdFun              !v    @, <0x5558d3384bd8>, e1.1
  prom-           %219.1 = MkArg                    unboundValue, validObject[0x5558db3d7e50]_p58, e1.1
  prom-           %219.2 = MkArg                    unboundValue, validObject[0x5558db3d7e50]_p59, e1.1
  val?            %219.3 = Call               !v    %219.0(%219.1, %219.2) e1.1   <(nil|cls)->
  void                    StVar              lW    validityMethod, %219.3, e1.1
  cp              %219.5 = Checkpoint                -> BB221 (default) | BB220 (if assume failed)
BB183   <- [181]
  val?^ | miss    %183.0 = LdVar              eR    extends, e1.1
  lgl$#-          %183.1 = IsType                   %183.0 isA val?~+ | miss
  void                    Assume             D     %183.1, %181.2 (Typecheck@0x5558d9aac8a0[Type#294])
  val?~+ | miss   %183.3 = CastType           d     dn %183.0
  val?+           %183.4 = Force!<value>            %183.3,    <vec+>
  lgl$#-          %183.5 = IsType                   %183.4 isA val+   <true>
  void                    Assume             D     %183.5, %181.2 (DeadBranchReached@0x5558d9aac8a0[Test#65])
  val             %183.7 = ChkMissing         e     %181.0
  lgl$#-          %183.8 = IsType                   %183.7 isA int$-
  void                    Assume             D     %183.8, %181.2 (Typecheck@0x5558d9aac8a0[Type#296])
  int$-           %183.10 = CastType           d     dn %183.7
  val?            %183.11 = Extract2_1D        wed   %183.4, %183.10, elided   <other>
  void                    StVar              lW    exti, %183.11, e1.1
  (cls|spec|blt)  %183.13 = LdFun              !v    @, <0x5558d3384bd8>, e1.1
  prom-           %183.14 = MkArg                    unboundValue, validObject[0x5558db3d7e50]_p47, e1.1
  prom-           %183.15 = MkArg                    unboundValue, validObject[0x5558db3d7e50]_p48, e1.1
  val?            %183.16 = Call               !v    %183.13(%183.14, %183.15) e1.1   <str$+>
  void                    StVar              lW    superClass, %183.16, e1.1
  (cls|spec|blt)  %183.18 = LdFun              !v    @, <0x5558d3384bd8>, e1.1
  prom-           %183.19 = MkArg                    unboundValue, validObject[0x5558db3d7e50]_p49, e1.1
  prom-           %183.20 = MkArg                    unboundValue, validObject[0x5558db3d7e50]_p50, e1.1
  val?            %183.21 = Call               !v    %183.18(%183.19, %183.20) e1.1   <lgl$->
  lgl$#-          %183.22 = IsType                   %183.21 isA lgl$-
  cp              %183.23 = Checkpoint                -> BB185 (default) | BB184 (if assume failed)
BB182   <- [181]
  fs              %182.0 = FrameState         R     0x5558daa351a0+5276: [%168.0, %168.1, %180.1], env=e1.1
  void                    Deopt              !v    %182.0   !
BB268   <- [178]
  val?^ | miss    %268.0 = LdVar              eR    c, e1.1
  lgl$#-          %268.1 = Identical                <blt c>, %268.0   <@?>
  void                    Branch                   %268.1 -> BB270 (if true) | BB269 (if false)
BB179   <- [178]
  goto BB180
BB79   <- [77]
  void                    Assume             D     %77.6, %77.7 (Typecheck@0x5558d9aac8a0[Type#186])
  lgl$-           %79.1 = CastType           d     dn %77.5
  lgl$#-          %79.2 = CheckTrueFalse     e     %79.1
  void                    Branch                   %79.2 -> BB156 (if true) | BB80 (if false)
BB78   <- [77]
  fs              %78.0 = FrameState         R     0x5558daa351a0+3301: [%33.0, %33.1, %59.1, %77.5], env=e1.1
  void                    Deopt              !v    %78.0   !
BB221   <- [219]
  val?^ | miss    %221.0 = LdVar              eR    length, e1.1
  lgl$#-          %221.1 = Identical                <blt length>, %221.0   <true>
  void                    Assume             D     %221.1, %219.5 (DeadBranchReached@0x5558d9aac8a0[Test#70])
  val?^ | miss    %221.3 = LdVar              eR    errors, e1.1
  lgl$#-          %221.4 = IsType                   %221.3 isA val?~- | miss
  void                    Assume             D     %221.4, %219.5 (Typecheck@0x5558d9aac8a0[Type#343])
  val?~- | miss   %221.6 = CastType           d     dn %221.3
  val?-           %221.7 = Force!<value>            %221.6,    <str->
  (int|real)$-    %221.8 = CallSafeBuiltin    wed   length(%221.7)    <int$->
  lgl$#-          %221.9 = IsType                   %221.8 isA int$-
  cp              %221.10 = Checkpoint                -> BB223 (default) | BB222 (if assume failed)
BB220   <- [219]
  fs              %220.0 = FrameState         R     0x5558daa351a0+6244: [], env=e1.1
  void                    Deopt              !v    %220.0   !
BB185   <- [183]
  void                    Assume             D     %183.22, %183.23 (Typecheck@0x5558d9aac8a0[Type#303])
  lgl$-           %185.1 = CastType           d     dn %183.21
  lgl$-           %185.2 = Not                d     %185.1, elided
  lgl$-           %185.3 = AsLogical                %185.2
  lgl$#-          %185.4 = Identical                %185.3, false
  void                    Branch                   %185.4 -> BB187 (if true) | BB186 (if false)
BB184   <- [183]
  fs              %184.0 = FrameState         R     0x5558daa351a0+5439: [%168.0, %168.1, %180.1, %183.21], env=e1.1
  void                    Deopt              !v    %184.0   !
BB270   <- [268]
  val?^ | miss    %270.0 = LdVar              eR    errors, e1.1
  val?            %270.1 = Force!             !v    %270.0, e1.1   <val?_>
  (cls|spec|blt)  %270.2 = LdFun              !v    anyStrings, e1.1
  fs              %270.3 = FrameState         R     0x5558daa351a0+5067: [%168.0, %168.1, %33.2, <blt c>, %270.1, %270.2], env=e1.1
  void                    Deopt              !v    %270.3, DeadCall@0x5558d9aac8a0[Call#84], %270.2   !
BB269   <- [268]
  (cls|spec|blt)  %269.0 = LdFun              !v    c, e1.1
  fs              %269.1 = FrameState         R     0x5558daa351a0+5011: [%168.0, %168.1, %33.2, %269.0], env=e1.1
  void                    Deopt              !v    %269.1, DeadCall@0x5558d9aac8a0[Call#80], %269.0   !
BB156   <- [79]
  val?^ | miss    %156.0 = LdVar              eR    c, e1.1
  lgl$#-          %156.1 = Identical                <blt c>, %156.0   <@?>
  void                    Branch                   %156.1 -> BB158 (if true) | BB157 (if false)
BB80   <- [79]
  val?^ | miss    %80.0 = LdVar              eR    possibleExtends, e1.1
  lgl$#-          %80.1 = Identical                %80.0, function(class1, class2, ClassDef1=getClassDef|...
  void                    Assume             D     %80.1, %77.7 (CallTarget@0x5558d9aac8a0[Call#54])
  prom-           %80.3 = MkArg                    unboundValue, validObject[0x5558db3d7e50]_p27, e1.1
  prom-           %80.4 = MkArg                    unboundValue, validObject[0x5558db3d7e50]_p29, e1.1
  prom-           %80.5 = MkArg                    unboundValue, validObject[0x5558db3d7e50]_p30, e1.1
  ct              %80.6 = PushContext        lCL   %80.3, %80.4, missingArg, %80.5, possibleExtends(class(sloti), classi, ClassDef|..., function(class1, class2, ClassDef1=getClassDef|..., e1.1
  val?^           %80.7 = CastType                 up %80.5
  val?^           %80.8 = CastType                 up %80.4
  val?^           %80.9 = CastType                 up %80.3
  env             e80.10 = MkEnv              l     class1=%80.9, class2=%80.8, ClassDef1(miss)=missingArg, ClassDef2=%80.7, parent=<env 0x5558d398c378>, context 1
  prom-           %80.11 = MkArg                    unboundValue, validObject[0x5558db3d7e50]_p75, e80.10
  val?^ | miss    %80.12 = CastType                 up %80.11
  void                    StArg              lW    ClassDef1, %80.12, e80.10
  cp              %80.14 = Checkpoint                -> BB82 (default) | BB81 (if assume failed)
BB223   <- [221]
  void                    Assume             D     %221.9, %221.10 (Typecheck@0x5558d9aac8a0[Type#344])
  int$-           %223.1 = CastType           d     dn %221.8
  lgl$-           %223.2 = Eq                 d     %223.1, 0L, elided   <lgl$->
  lgl$-           %223.3 = AsLogical                %223.2
  lgl$#-          %223.4 = Identical                %223.3, false
  void                    Branch                   %223.4 -> BB258 (if true) | BB224 (if false)
BB222   <- [221]
  fs              %222.0 = FrameState         R     0x5558daa351a0+6335: [%221.8], env=e1.1
  void                    Deopt              !v    %222.0   !
BB187   <- [185]
  lgl$#-          %187.0 = CheckTrueFalse     e     %185.3
  void                    Branch                   %187.0 -> BB266 (if true) | BB188 (if false)
BB186   <- [185]
  (cls|spec|blt)  %186.0 = LdFun              !v    is, e1.1
  fs              %186.1 = FrameState         R     0x5558daa351a0+5457: [%168.0, %168.1, %180.1, %185.3, %186.0], env=e1.1
  void                    Deopt              !v    %186.1, DeadCall@0x5558d9aac8a0[Call#90], %186.0   !
BB158   <- [156]
  val?^ | miss    %158.0 = LdVar              eR    errors, e1.1
  val?            %158.1 = Force!             !v    %158.0, e1.1   <val?_>
  val?^ | miss    %158.2 = LdVar              eR    sloti, e1.1
  val?            %158.3 = Force!             !v    %158.2, e1.1   <val?_>
  lgl$#-          %158.4 = IsType                   %158.3 isA val?+
  lgl$#-          %158.5 = IsType                   %158.1 isA val?+
  cp              %158.6 = Checkpoint                -> BB160 (default) | BB159 (if assume failed)
BB157   <- [156]
  (cls|spec|blt)  %157.0 = LdFun              !v    c, e1.1
  fs              %157.1 = FrameState         R     0x5558daa351a0+3345: [%33.0, %33.1, %59.1, %157.0], env=e1.1
  void                    Deopt              !v    %157.1, DeadCall@0x5558d9aac8a0[Call#53], %157.0   !
BB82   <- [80]
  val?^ | miss    %82.0 = LdVar              eR    .identC, e80.10
  lgl$#-          %82.1 = Identical                %82.0, function(c1=NULL, c2=NULL) <(rir::DispatchTabl|...
  void                    Assume             D     %82.1, %80.14 (CallTarget@0x5558d6b73b70[Call#3])
  prom-           %82.3 = MkArg                    unboundValue, validObject[0x5558db3d7e50]_p81, e80.10
  prom-           %82.4 = MkArg                    unboundValue, validObject[0x5558db3d7e50]_p82, e80.10
  val?            %82.5 = StaticCall         !v    .identC[0x5558dee2b800](%82.3, %82.4) e80.10   <lgl$->
  lgl$#-          %82.6 = IsType                   %82.5 isA lgl$-
  cp              %82.7 = Checkpoint                -> BB84 (default) | BB83 (if assume failed)
BB81   <- [80]
  fs              %81.0 = FrameState         R     0x5558daa351a0+3505: [%33.0, %33.1, %59.1], env=e1.1
  fs              %81.1 = FrameState         R     0x5558d6b91b10+0: [], env=e80.10, next=%81.0
  void                    Deopt              !v    %81.1   !
BB258   <- [223]
  goto BB225
BB224   <- [223]
  val?^ | miss    %224.0 = LdVar              eR    is.function, e1.1
  lgl$#-          %224.1 = Identical                <blt is.function>, %224.0   <true>
  void                    Assume             D     %224.1, %221.10 (DeadBranchReached@0x5558d9aac8a0[Test#71])
  val             %224.3 = ChkMissing         e     %219.3
  lgl$#-          %224.4 = IsType                   %224.3 isA val?~- | miss
  void                    Assume             D     %224.4, %221.10 (Typecheck@0x5558d9aac8a0[Type#347])
  val-            %224.6 = CastType           d     dn %224.3   <(nil|cls)->
  lgl$#-          %224.7 = CallSafeBuiltin    wed   is.function(%224.6)    <lgl$->
  lgl$-           %224.8 = LAnd                     %223.3, %224.7
  goto BB225
BB266   <- [187]
  goto BB180
BB188   <- [187]
  val?^ | miss    %188.0 = LdVar              eR    getClassDef, e1.1
  lgl$#-          %188.1 = Identical                %188.0, function(Class, where=topenv(parent.frame()), |...
  void                    Assume             D     %188.1, %183.23 (CallTarget@0x5558d9aac8a0[Call#91])
  prom-           %188.3 = MkArg                    unboundValue, validObject[0x5558db3d7e50]_p51, e1.1
  val?            %188.4 = StaticCall         !v    getClassDef[0x5558d866ae40](%188.3) e1.1   <other>
  lgl$-           %188.5 = Is                       %188.4, NULL
  void                    StVar              lW    superDef, %188.4, e1.1
  val             %188.7 = ChkMissing         e     %188.4
  lgl$#-          %188.8 = CheckTrueFalse     e     %188.5
  void                    Branch                   %188.8 -> BB263 (if true) | BB189 (if false)
BB160   <- [158]
  void                    Assume             D     %158.5, %158.6 (Typecheck@0x5558d9aac8a0[Type#189])
  val?+           %160.1 = CastType           d     dn %158.1   <val?_>
  void                    Assume             D     %158.4, %158.6 (Typecheck@0x5558d9aac8a0[Type#190])
  val?+           %160.3 = CastType           d     dn %158.3   <val?_>
  val+            %160.4 = CallSafeBuiltin    wed   c(%160.1, %160.3)    <val?_>
  void                    StVar              lW    errors, %160.4, e1.1
  goto BB59
BB159   <- [158]
  fs              %159.0 = FrameState         R     0x5558daa351a0+3405: [%33.0, %33.1, %59.1, <blt c>, %158.1, %158.3], env=e1.1
  void                    Deopt              !v    %159.0   !
BB84   <- [82]
  void                    Assume             D     %82.6, %82.7 (Typecheck@0x5558d6b73b70[Type#9])
  lgl$-           %84.1 = CastType           d     dn %82.5
  lgl$-           %84.2 = AsLogical                %84.1
  lgl$#-          %84.3 = Identical                %84.2, true
  void                    Branch                   %84.3 -> BB155 (if true) | BB85 (if false)
BB83   <- [82]
  fs              %83.0 = FrameState         R     0x5558daa351a0+3505: [%33.0, %33.1, %59.1], env=e1.1
  fs              %83.1 = FrameState         R     0x5558d6b91b10+37: [%82.5], env=e80.10, next=%83.0
  void                    Deopt              !v    %83.1   !
BB225   <- [258, 224]
  lgl$-           %225.0 = Phi                      %224.8:BB224, %223.3:BB258
  cp              %225.1 = Checkpoint                -> BB227 (default) | BB226 (if assume failed)
BB263   <- [188]
  val?^ | miss    %263.0 = LdVar              eR    c, e1.1
  lgl$#-          %263.1 = Identical                <blt c>, %263.0   <@?>
  void                    Branch                   %263.1 -> BB265 (if true) | BB264 (if false)
BB189   <- [188]
  (cls|spec|blt)  %189.0 = LdFun              !v    @, <0x5558d3384bd8>, e1.1
  prom-           %189.1 = MkArg                    unboundValue, validObject[0x5558db3d7e50]_p52, e1.1
  prom-           %189.2 = MkArg                    unboundValue, validObject[0x5558db3d7e50]_p53, e1.1
  val?            %189.3 = Call               !v    %189.0(%189.1, %189.2) e1.1   <(nil|cls)->
  void                    StVar              lW    validityMethod, %189.3, e1.1
  lgl$#-          %189.5 = IsType                   %189.3 isA val?-
  cp              %189.6 = Checkpoint                -> BB191 (default) | BB190 (if assume failed)
BB155   <- [84]
  goto BB88
BB85   <- [84]
  val?^ | miss    %85.0 = LdVar              eR    .identC, e80.10
  lgl$#-          %85.1 = Identical                %85.0, function(c1=NULL, c2=NULL) <(rir::DispatchTabl|...
  void                    Assume             D     %85.1, %82.7 (CallTarget@0x5558d6b73b70[Call#4])
  prom-           %85.3 = MkArg                    unboundValue, validObject[0x5558db3d7e50]_p83, e80.10
  val?            %85.4 = StaticCall         !v    .identC[0x5558d56351d0](%85.3, "ANY") e80.10   <lgl$->
  lgl$#-          %85.5 = IsType                   %85.4 isA lgl$-
  cp              %85.6 = Checkpoint                -> BB87 (default) | BB86 (if assume failed)
BB227   <- [225]
  lgl$#-          %227.0 = CheckTrueFalse     e     %225.0
  void                    Branch                   %227.0 -> BB239 (if true) | BB228 (if false)
BB226   <- [225]
  fs              %226.0 = FrameState         R     0x5558daa351a0+6457: [%225.0], env=e1.1
  void                    Deopt              !v    %226.0   !
BB265   <- [263]
  val?^ | miss    %265.0 = LdVar              eR    errors, e1.1
  val?            %265.1 = Force!             !v    %265.0, e1.1   <val?_>
  (cls|spec|blt)  %265.2 = LdFun              !v    paste0, e1.1
  fs              %265.3 = FrameState         R     0x5558daa351a0+5678: [%168.0, %168.1, %180.1, <blt c>, %265.1, %265.2], env=e1.1
  void                    Deopt              !v    %265.3, DeadCall@0x5558d9aac8a0[Call#94], %265.2   !
BB264   <- [263]
  (cls|spec|blt)  %264.0 = LdFun              !v    c, e1.1
  fs              %264.1 = FrameState         R     0x5558daa351a0+5622: [%168.0, %168.1, %180.1, %264.0], env=e1.1
  void                    Deopt              !v    %264.1, DeadCall@0x5558d9aac8a0[Call#92], %264.0   !
BB191   <- [189]
  val?^ | miss    %191.0 = LdVar              eR    is.function, e1.1
  lgl$#-          %191.1 = Identical                <blt is.function>, %191.0   <true>
  void                    Assume             D     %191.1, %189.6 (DeadBranchReached@0x5558d9aac8a0[Test#67])
  val             %191.3 = ChkMissing         e     %189.3
  void                    Assume             D     %189.5, %189.6 (Typecheck@0x5558d9aac8a0[Type#319])
  val?-           %191.5 = CastType           d     dn %189.3   <(nil|cls)->
  lgl$#-          %191.6 = CallSafeBuiltin    wed   is.function(%191.5)    <lgl$->
  cp              %191.7 = Checkpoint                -> BB193 (default) | BB192 (if assume failed)
BB190   <- [189]
  fs              %190.0 = FrameState         R     0x5558daa351a0+5812: [%168.0, %168.1, %180.1], env=e1.1
  void                    Deopt              !v    %190.0   !
BB88   <- [155, 87]
  lgl$-           %88.0 = Phi                      %87.3:BB87, %84.2:BB155
  lgl$#-          %88.1 = CheckTrueFalse     e     %88.0
  void                    Branch                   %88.1 -> BB154 (if true) | BB89 (if false)
BB87   <- [85]
  void                    Assume             D     %85.5, %85.6 (Typecheck@0x5558d6b73b70[Type#11])
  lgl$-           %87.1 = CastType           d     dn %85.4
  lgl$-           %87.2 = AsLogical                %87.1
  lgl$-           %87.3 = LOr                      %84.2, %87.2
  goto BB88
BB86   <- [85]
  fs              %86.0 = FrameState         R     0x5558daa351a0+3505: [%33.0, %33.1, %59.1], env=e1.1
  fs              %86.1 = FrameState         R     0x5558d6b91b10+86: [%84.2, %85.4], env=e80.10, next=%86.0
  void                    Deopt              !v    %86.1   !
BB239   <- [227]
  val?^ | miss    %239.0 = LdVar              eR    c, e1.1
  lgl$#-          %239.1 = Identical                <blt c>, %239.0   <true>
  void                    Assume             D     %239.1, %225.1 (DeadBranchReached@0x5558d9aac8a0[Test#72])
  val?^ | miss    %239.3 = LdVar              eR    anyStrings, e1.1
  lgl$#-          %239.4 = Identical                %239.3, %1.2
  void                    Assume             D     %239.4, %225.1 (CallTarget@0x5558d9aac8a0[Call#111])
  prom-           %239.6 = MkArg                    unboundValue, validObject[0x5558db3d7e50]_p60, e1.1
  val?^           %239.7 = CastType                 up %239.6
  env             e239.8 = MkEnv              l     x=%239.7, parent=e1.1, context 0
  val?^ | miss    %239.9 = LdVar              eR    isTRUE, e239.8
  lgl$#-          %239.10 = Identical                %239.9, function(x) <(rir::DispatchTable*)0x5558d52435|...
  void                    Assume             D     %239.10, %225.1 (CallTarget@0x5558dda467c8[Call#0])
  val?            %239.12 = Force!<lazy>       !vL   %239.7, e239.8   <lgl$->
  val+            %239.13 = CallSafeBuiltin    wed   is.logical(%239.12)    <lgl$->
  lgl$#-          %239.14 = IsType                   %239.13 isA lgl$-
  cp              %239.15 = Checkpoint                -> BB241 (default) | BB240 (if assume failed)
BB228   <- [227]
  goto BB229
BB193   <- [191]
  void                    Branch                   %191.6 -> BB196 (if true) | BB194 (if false)
BB192   <- [191]
  fs              %192.0 = FrameState         R     0x5558daa351a0+5903: [%168.0, %168.1, %180.1, %191.6], env=e1.1
  void                    Deopt              !v    %192.0   !
BB154   <- [88]
  goto BB120
BB89   <- [88]
  val?^ | miss    %89.0 = LdVar              eR    ClassDef1, e80.10
  val?            %89.1 = Force!<lazy>       !v    %89.0, e80.10   <other>
  lgl$-           %89.2 = Is                       %89.1, NULL
  lgl$#-          %89.3 = CheckTrueFalse     e     %89.2
  void                    Branch                   %89.3 -> BB153 (if true) | BB90 (if false)
BB241   <- [239]
  void                    Assume             D     %239.14, %239.15 (Typecheck@0x5558d493a838[Type#2])
  lgl$-           %241.1 = CastType           d     dn %239.13
  lgl$-           %241.2 = AsLogical                %241.1
  lgl$#-          %241.3 = Identical                %241.2, false
  void                    Branch                   %241.3 -> BB257 (if true) | BB242 (if false)
BB240   <- [239]
  fs              %240.0 = FrameState         R     0x5558daa351a0+6579: [<blt c>, %221.7], env=e1.1
  fs              %240.1 = FrameState         R     0x5558db3632d0+32: [], env=e239.8, next=%240.0
  prom-           %240.2 = MkArg                    %239.12, validObject[0x5558db3d7e50]_p94 (!refl), e239.8
  val?~           %240.3 = CastType                 up %240.2
  env             e240.4 = (MkEnv)            l     x=%240.3, parent=R_BaseNamespace, context -1
  fs              %240.5 = FrameState         R     0x5558d37d66d0+91: [%239.13], env=e240.4, next=%240.1
  void                    Deopt              !v    %240.5   !
BB229   <- [228, 253]
  cp              %229.0 = Checkpoint                -> BB231 (default) | BB230 (if assume failed)
BB196   <- [193]
  val?^ | miss    %196.0 = LdVar              eR    c, e1.1
  lgl$#-          %196.1 = Identical                <blt c>, %196.0   <true>
  void                    Assume             D     %196.1, %191.7 (DeadBranchReached@0x5558d9aac8a0[Test#68])
  val?^ | miss    %196.3 = LdVar              eR    errors, e1.1
  lgl$#-          %196.4 = IsType                   %196.3 isA val?~- | miss
  void                    Assume             D     %196.4, %191.7 (Typecheck@0x5558d9aac8a0[Type#329])
  val?~- | miss   %196.6 = CastType           d     dn %196.3
  val?-           %196.7 = Force!<value>            %196.6,    <str->
  val?^ | miss    %196.8 = LdVar              eR    anyStrings, e1.1
  lgl$#-          %196.9 = Identical                %196.8, %1.2
  void                    Assume             D     %196.9, %191.7 (CallTarget@0x5558d9aac8a0[Call#101])
  prom-           %196.11 = MkArg                    unboundValue, validObject[0x5558db3d7e50]_p54, e1.1
  val?^           %196.12 = CastType                 up %196.11
  env             e196.13 = MkEnv              l     x=%196.12, parent=e1.1, context 0
  val?^ | miss    %196.14 = LdVar              eR    isTRUE, e196.13
  lgl$#-          %196.15 = Identical                %196.14, function(x) <(rir::DispatchTable*)0x5558d52435|...
  void                    Assume             D     %196.15, %191.7 (CallTarget@0x5558dda467c8[Call#0])
  prom-           %196.17 = MkArg                    unboundValue, validObject[0x5558db3d7e50]_p95, e196.13
  val?^           %196.18 = CastType                 up %196.17
  env             e196.19 = (MkEnv)            l     x=%196.18, parent=R_BaseNamespace, context -1
  val?            %196.20 = Force!<lazy>       !vL   %196.12, e196.19   <lgl$->
  prom-           %196.21 = MkArg                    %196.20, validObject[0x5558db3d7e50]_p95 (!refl), e196.13
  val?~           %196.22 = CastType                 up %196.21
  void                    StArg              lWd   x, %196.22, e196.19
  cp              %196.24 = Checkpoint                -> BB198 (default) | BB197 (if assume failed)
BB194   <- [193]
  goto BB195
BB120   <- [154, 153, 119]
  val?            %120.0 = Phi                      %119.0:BB119, false:BB153, true:BB154
  val?            %120.1 = PopContext         C     %120.0, %80.6   <(lgl|other)>
  void                    StVar              lW    ok, %120.1, e1.1
  cp              %120.3 = Checkpoint                -> BB122 (default) | BB121 (if assume failed)
BB153   <- [89]
  goto BB120
BB90   <- [89]
  (cls|spec|blt)  %90.0 = LdFun              !v    @, <0x5558d3384bd8>, e80.10
  prom-           %90.1 = MkArg                    unboundValue, validObject[0x5558db3d7e50]_p84, e80.10
  prom-           %90.2 = MkArg                    unboundValue, validObject[0x5558db3d7e50]_p85, e80.10
  val?            %90.3 = Call               !v    %90.0(%90.1, %90.2) e80.10   <vec+>
  void                    StVar              lW    ext, %90.3, e80.10
  lgl$#-          %90.5 = IsType                   %90.3 isA val+   <true>
  cp              %90.6 = Checkpoint                -> BB92 (default) | BB91 (if assume failed)
BB257   <- [241]
  goto BB243
BB242   <- [241]
  lgl$#-          %242.0 = IsType                   %239.12 isA lgl$-
  void                    Assume             D     %242.0, %239.15 (Typecheck@0x5558d493a838[Type#4])
  lgl$-           %242.2 = AsLogical                %241.2
  goto BB243
BB231   <- [229]
  val?^ | miss    %231.0 = LdVar              eR    length, e1.1
  lgl$#-          %231.1 = Identical                <blt length>, %231.0   <true>
  void                    Assume             D     %231.1, %229.0 (DeadBranchReached@0x5558d9aac8a0[Test#73])
  val?^ | miss    %231.3 = LdVar              eR    errors, e1.1
  lgl$#-          %231.4 = IsType                   %231.3 isA val?~- | miss
  void                    Assume             D     %231.4, %229.0 (Typecheck@0x5558d9aac8a0[Type#359])
  val?~- | miss   %231.6 = CastType           d     dn %231.3
  val?-           %231.7 = Force!<value>            %231.6,    <str->
  (int|real)$-    %231.8 = CallSafeBuiltin    wed   length(%231.7)    <int$->
  lgl$#-          %231.9 = IsType                   %231.8 isA int$-
  cp              %231.10 = Checkpoint                -> BB233 (default) | BB232 (if assume failed)
BB230   <- [229]
  fs              %230.0 = FrameState         R     0x5558daa351a0+6615: [], env=e1.1
  void                    Deopt              !v    %230.0   !
BB198   <- [196]
  lgl$#-          %198.0 = IsEnvStub          R     , e196.19
  void                    Assume             D     %198.0, %196.24 (EnvStubMaterialized@0x5558d493a838[Call#unknown])
  val+            %198.2 = CallSafeBuiltin    wed   is.logical(%196.20)    <lgl$->
  lgl$#-          %198.3 = IsType                   %198.2 isA lgl$-
  cp              %198.4 = Checkpoint                -> BB200 (default) | BB199 (if assume failed)
BB197   <- [196]
  fs              %197.0 = FrameState         R     0x5558daa351a0+6030: [%168.0, %168.1, %180.1, <blt c>, %196.7], env=e1.1
  fs              %197.1 = FrameState         R     0x5558db3632d0+32: [], env=e196.13, next=%197.0
  fs              %197.2 = FrameState         R     0x5558d37d66d0+69: [<blt is.logical>, %196.20], env=e196.19, next=%197.1
  void                    Deopt              !v    %197.2   !
BB195   <- [194, 217]
  goto BB180
BB122   <- [120]
  val?^ | miss    %122.0 = LdVar              eR    isFALSE, e1.1
  lgl$#-          %122.1 = Identical                %122.0, function(x) <(rir::DispatchTable*)0x5558d63992|...
  void                    Assume             D     %122.1, %120.3 (CallTarget@0x5558d9aac8a0[Call#56])
  val             %122.3 = ChkMissing         e     %120.1
  val+            %122.4 = CallSafeBuiltin    wed   is.logical(%120.1)    <lgl$->
  lgl$#-          %122.5 = IsType                   %122.4 isA lgl$-
  cp              %122.6 = Checkpoint                -> BB124 (default) | BB123 (if assume failed)
BB121   <- [120]
  fs              %121.0 = FrameState         R     0x5558daa351a0+3519: [%33.0, %33.1, %59.1], env=e1.1
  void                    Deopt              !v    %121.0   !
BB92   <- [90]
  val             %92.0 = ChkMissing         e     %90.3
  void                    Assume             D     %90.5, %90.6 (DeadBranchReached@0x5558d6b73b70[Test#1])
  val?^ | miss    %92.2 = LdVar              eR    class2, e80.10
  val?            %92.3 = Force!<wrapped>    !v    %92.2, e80.10   <str$+>
  lgl$#-          %92.4 = IsType                   %92.3 isA val?+
  cp              %92.5 = Checkpoint                -> BB94 (default) | BB93 (if assume failed)
BB91   <- [90]
  fs              %91.0 = FrameState         R     0x5558daa351a0+3505: [%33.0, %33.1, %59.1], env=e1.1
  fs              %91.1 = FrameState         R     0x5558d6b91b10+199: [], env=e80.10, next=%91.0
  void                    Deopt              !v    %91.1   !
BB243   <- [257, 242]
  lgl$-           %243.0 = Phi                      %242.2:BB242, %241.2:BB257
  lgl$-           %243.1 = AsLogical                %243.0
  lgl$#-          %243.2 = Identical                %243.1, false
  void                    Branch                   %243.2 -> BB256 (if true) | BB244 (if false)
BB233   <- [231]
  void                    Assume             D     %231.9, %231.10 (Typecheck@0x5558d9aac8a0[Type#360])
  int$-           %233.1 = CastType           d     dn %231.8
  lgl$#-          %233.2 = CheckTrueFalse     e     %233.1
  void                    Branch                   %233.2 -> BB236 (if true) | BB234 (if false)
BB232   <- [231]
  fs              %232.0 = FrameState         R     0x5558daa351a0+6706: [%231.8], env=e1.1
  void                    Deopt              !v    %232.0   !
BB200   <- [198]
  void                    Assume             D     %198.3, %198.4 (Typecheck@0x5558d493a838[Type#2])
  lgl$-           %200.1 = CastType           d     dn %198.2
  lgl$-           %200.2 = AsLogical                %200.1
  lgl$#-          %200.3 = Identical                %200.2, false
  void                    Branch                   %200.3 -> BB262 (if true) | BB201 (if false)
BB199   <- [198]
  fs              %199.0 = FrameState         R     0x5558daa351a0+6030: [%168.0, %168.1, %180.1, <blt c>, %196.7], env=e1.1
  fs              %199.1 = FrameState         R     0x5558db3632d0+32: [], env=e196.13, next=%199.0
  fs              %199.2 = FrameState         R     0x5558d37d66d0+91: [%198.2], env=e196.19, next=%199.1
  void                    Deopt              !v    %199.2   !
BB124   <- [122]
  void                    Assume             D     %122.5, %122.6 (Typecheck@0x5558d638d658[Type#2])
  lgl$-           %124.1 = CastType           d     dn %122.4
  lgl$-           %124.2 = AsLogical                %124.1
  lgl$#-          %124.3 = Identical                %124.2, false
  void                    Branch                   %124.3 -> BB141 (if true) | BB125 (if false)
BB123   <- [122]
  prom-           %123.0 = MkArg                    %120.1, validObject[0x5558db3d7e50]_p31 (!refl), e1.1
  val?~           %123.1 = CastType                 up %123.0
  fs              %123.2 = FrameState         R     0x5558daa351a0+3551: [%33.0, %33.1, %59.1], env=e1.1
  env             e123.3 = (MkEnv)            l     x=%123.1, parent=R_BaseNamespace, context 0
  fs              %123.4 = FrameState         R     0x5558d5ccd890+91: [%122.4], env=e123.3, next=%123.2
  void                    Deopt              !v    %123.4   !
BB94   <- [92]
  lgl$#-          %94.0 = IsType                   %90.3 isA val?+
  void                    Assume             D     %94.0, %92.5 (Typecheck@0x5558d6b73b70[Type#15])
  val?+           %94.2 = CastType           d     dn %90.3   <vec+>
  void                    Assume             D     %92.4, %92.5 (Typecheck@0x5558d6b73b70[Type#18])
  val?+           %94.4 = CastType           d     dn %92.3   <str$+>
  val?            %94.5 = Extract2_1D        wed   %94.2, %94.4, elided   <(nil|other)>
  lgl$-           %94.6 = Is                       %94.5, NULL
  void                    StVar              lW    contained, %94.5, e80.10
  lgl$-           %94.8 = Not                d     %94.6, elided
  lgl$#-          %94.9 = CheckTrueFalse     e     %94.8
  void                    Branch                   %94.9 -> BB152 (if true) | BB95 (if false)
BB93   <- [92]
  fs              %93.0 = FrameState         R     0x5558daa351a0+3505: [%33.0, %33.1, %59.1], env=e1.1
  fs              %93.1 = FrameState         R     0x5558d6b91b10+253: [%90.3, %92.3], env=e80.10, next=%93.0
  void                    Deopt              !v    %93.1   !
BB256   <- [243]
  goto BB245
BB244   <- [243]
  lgl$#-          %244.0 = IsType                   %239.12 isA lgl$-
  void                    Assume             D     %244.0, %239.15 (Typecheck@0x5558d493a838[Type#8])
  lgl$-           %244.2 = CastType           d     dn %239.12
  lgl$-           %244.3 = CallSafeBuiltin    wed   is.na(%244.2)    <lgl$->
  lgl$-           %244.4 = Not                d     %244.3, elided
  lgl$-           %244.5 = AsLogical                %244.4
  lgl$-           %244.6 = LAnd                     %243.1, %244.5
  goto BB245
BB236   <- [233]
  val?^ | miss    %236.0 = LdVar              eR    test, e1.1
  val?            %236.1 = Force!             !v    %236.0, e1.1   <val?_>
  lgl$#-          %236.2 = CheckTrueFalse     we    %236.1
  void                    Branch                   %236.2 -> BB238 (if true) | BB237 (if false)
BB234   <- [233]
  void                    Visible            v     
  goto BB235
BB262   <- [200]
  goto BB202
BB201   <- [200]
  lgl$#-          %201.0 = IsType                   %196.20 isA lgl$-
  void                    Assume             D     %201.0, %198.4 (Typecheck@0x5558d493a838[Type#4])
  lgl$-           %201.2 = AsLogical                %200.2
  goto BB202
BB141   <- [124]
  goto BB126
BB125   <- [124]
  lgl$#-          %125.0 = IsType                   %120.1 isA lgl$-
  void                    Assume             D     %125.0, %122.6 (Typecheck@0x5558d638d658[Type#4])
  lgl$-           %125.2 = AsLogical                %124.2
  goto BB126
BB152   <- [94]
  val             %152.0 = ChkMissing         e     %94.5
  goto BB119
BB95   <- [94]
  val?^ | miss    %95.0 = LdVar              eR    ClassDef2, e80.10
  val?            %95.1 = Force!<lazy>       !v    %95.0, e80.10   <other>
  lgl$-           %95.2 = Is                       %95.1, NULL
  lgl$#-          %95.3 = CheckTrueFalse     e     %95.2
  void                    Branch                   %95.3 -> BB151 (if true) | BB96 (if false)
BB245   <- [256, 244]
  lgl$-           %245.0 = Phi                      %244.6:BB244, %243.1:BB256
  lgl$-           %245.1 = AsLogical                %245.0
  lgl$#-          %245.2 = Identical                %245.1, false
  void                    Branch                   %245.2 -> BB255 (if true) | BB246 (if false)
BB238   <- [236]
  val?^ | miss    %238.0 = LdVar              eR    errors, e1.1
  void                    Visible            v     
  val?            %238.2 = Force!             !     %238.0, e1.1   <val?_>
  goto BB235
BB237   <- [236]
  (cls|spec|blt)  %237.0 = LdFun              !v    gettextf, e1.1
  fs              %237.1 = FrameState         R     0x5558daa351a0+6753: [%237.0], env=e1.1
  void                    Deopt              !v    %237.1, DeadCall@0x5558d9aac8a0[Call#114], %237.0   !
BB235   <- [234, 238]
  val?            %235.0 = Phi                      true:BB234, %238.2:BB238
  void                    Return             l     %235.0
BB202   <- [262, 201]
  lgl$-           %202.0 = Phi                      %201.2:BB201, %200.2:BB262
  lgl$-           %202.1 = AsLogical                %202.0
  lgl$#-          %202.2 = Identical                %202.1, false
  void                    Branch                   %202.2 -> BB261 (if true) | BB203 (if false)
BB126   <- [141, 125]
  lgl$-           %126.0 = Phi                      %125.2:BB125, %124.2:BB141
  lgl$-           %126.1 = AsLogical                %126.0
  lgl$#-          %126.2 = Identical                %126.1, false
  void                    Branch                   %126.2 -> BB140 (if true) | BB127 (if false)
BB119   <- [152, 118]
  val?            %119.0 = Phi                      %118.0:BB118, %94.5:BB152
  goto BB120
BB151   <- [95]
  goto BB118
BB96   <- [95]
  (cls|spec|blt)  %96.0 = LdFun              !v    @, <0x5558d3384bd8>, e80.10
  prom-           %96.1 = MkArg                    unboundValue, validObject[0x5558db3d7e50]_p86, e80.10
  prom-           %96.2 = MkArg                    unboundValue, validObject[0x5558db3d7e50]_p87, e80.10
  val?            %96.3 = Call               !v    %96.0(%96.1, %96.2) e80.10   <vec$+>
  void                    StVar              lW    subs, %96.3, e80.10
  cp              %96.5 = Checkpoint                -> BB98 (default) | BB97 (if assume failed)
BB255   <- [245]
  goto BB247
BB246   <- [245]
  lgl$-           %246.0 = AsLogical          e     %239.12
  lgl$-           %246.1 = LAnd                     %245.1, %246.0
  goto BB247
BB261   <- [202]
  goto BB204
BB203   <- [202]
  lgl$#-          %203.0 = IsType                   %196.20 isA lgl$-
  void                    Assume             D     %203.0, %198.4 (Typecheck@0x5558d493a838[Type#8])
  lgl$-           %203.2 = CastType           d     dn %196.20
  lgl$-           %203.3 = CallSafeBuiltin    wed   is.na(%203.2)    <lgl$->
  lgl$-           %203.4 = Not                d     %203.3, elided
  lgl$-           %203.5 = AsLogical                %203.4
  lgl$-           %203.6 = LAnd                     %202.1, %203.5
  goto BB204
BB140   <- [126]
  goto BB128
BB127   <- [126]
  lgl$#-          %127.0 = IsType                   %120.1 isA lgl$-
  void                    Assume             D     %127.0, %122.6 (Typecheck@0x5558d638d658[Type#8])
  lgl$-           %127.2 = CastType           d     dn %120.1
  lgl$-           %127.3 = CallSafeBuiltin    wed   is.na(%127.2)    <lgl$->
  lgl$-           %127.4 = Not                d     %127.3, elided
  lgl$-           %127.5 = AsLogical                %127.4
  lgl$-           %127.6 = LAnd                     %126.1, %127.5
  goto BB128
BB118   <- [151, 117]
  val?            %118.0 = Phi                      %117.0:BB117, false:BB151
  goto BB119
BB98   <- [96]
  val?^ | miss    %98.0 = LdVar              eR    .identC, e80.10
  lgl$#-          %98.1 = Identical                %98.0, function(c1=NULL, c2=NULL) <(rir::DispatchTabl|...
  void                    Assume             D     %98.1, %96.5 (CallTarget@0x5558d6b73b70[Call#7])
  prom-           %98.3 = MkArg                    unboundValue, validObject[0x5558db3d7e50]_p88, e80.10
  val?            %98.4 = StaticCall         !v    .identC[0x5558d56351d0](%98.3, "classRepresentation") e80.10   <lgl$->
  lgl$#-          %98.5 = IsType                   %98.4 isA lgl$-
  cp              %98.6 = Checkpoint                -> BB100 (default) | BB99 (if assume failed)
BB97   <- [96]
  fs              %97.0 = FrameState         R     0x5558daa351a0+3505: [%33.0, %33.1, %59.1], env=e1.1
  fs              %97.1 = FrameState         R     0x5558d6b91b10+364: [], env=e80.10, next=%97.0
  void                    Deopt              !v    %97.1   !
BB247   <- [255, 246]
  lgl$-           %247.0 = Phi                      %246.1:BB246, %245.1:BB255
  cp              %247.1 = Checkpoint                -> BB249 (default) | BB248 (if assume failed)
BB204   <- [261, 203]
  lgl$-           %204.0 = Phi                      %203.6:BB203, %202.1:BB261
  lgl$-           %204.1 = AsLogical                %204.0
  lgl$#-          %204.2 = Identical                %204.1, false
  void                    Branch                   %204.2 -> BB260 (if true) | BB205 (if false)
BB128   <- [140, 127]
  lgl$-           %128.0 = Phi                      %127.6:BB127, %126.1:BB140
  lgl$-           %128.1 = AsLogical                %128.0
  lgl$#-          %128.2 = Identical                %128.1, false
  cp              %128.3 = Checkpoint                -> BB130 (default) | BB129 (if assume failed)
BB100   <- [98]
  void                    Assume             D     %98.5, %98.6 (Typecheck@0x5558d6b73b70[Type#26])
  lgl$-           %100.1 = CastType           d     dn %98.4
  lgl$-           %100.2 = Not                d     %100.1, elided
  lgl$-           %100.3 = AsLogical                %100.2
  lgl$#-          %100.4 = Identical                %100.3, false
  void                    Branch                   %100.4 -> BB102 (if true) | BB101 (if false)
BB99   <- [98]
  fs              %99.0 = FrameState         R     0x5558daa351a0+3505: [%33.0, %33.1, %59.1], env=e1.1
  fs              %99.1 = FrameState         R     0x5558d6b91b10+401: [%98.4], env=e80.10, next=%99.0
  void                    Deopt              !v    %99.1   !
BB249   <- [247]
  lgl$#-          %249.0 = CheckTrueFalse     e     %247.0
  void                    Branch                   %249.0 -> BB254 (if true) | BB250 (if false)
BB248   <- [247]
  fs              %248.0 = FrameState         R     0x5558daa351a0+6579: [<blt c>, %221.7], env=e1.1
  fs              %248.1 = FrameState         R     0x5558db3632d0+32: [], env=e239.8, next=%248.0
  prom-           %248.2 = MkArg                    %239.12, validObject[0x5558db3d7e50]_p94 (!refl), e239.8
  val?~           %248.3 = CastType                 up %248.2
  env             e248.4 = (MkEnv)            l     x=%248.3, parent=R_BaseNamespace, context -1
  fs              %248.5 = FrameState         R     0x5558d37d66d0+342: [%247.0], env=e248.4, next=%248.1
  void                    Deopt              !v    %248.5   !
BB260   <- [204]
  goto BB206
BB205   <- [204]
  lgl$-           %205.0 = AsLogical          e     %196.20
  lgl$-           %205.1 = LAnd                     %204.1, %205.0
  goto BB206
BB130   <- [128]
  void                    Branch                   %128.2 -> BB139 (if true) | BB131 (if false)
BB129   <- [128]
  prom-           %129.0 = MkArg                    %120.1, validObject[0x5558db3d7e50]_p31 (!refl), e1.1
  val?~           %129.1 = CastType                 up %129.0
  fs              %129.2 = FrameState         R     0x5558daa351a0+3551: [%33.0, %33.1, %59.1], env=e1.1
  env             e129.3 = (MkEnv)            l     x=%129.1, parent=R_BaseNamespace, context 0
  fs              %129.4 = FrameState         R     0x5558d5ccd890+319: [%128.0], env=e129.3, next=%129.2
  void                    Deopt              !v    %129.4   !
BB102   <- [100]
  lgl$#-          %102.0 = CheckTrueFalse     e     %100.3
  void                    Branch                   %102.0 -> BB148 (if true) | BB103 (if false)
BB101   <- [100]
  (cls|spec|blt)  %101.0 = LdFun              !v    isClassUnion, e80.10
  fs              %101.1 = FrameState         R     0x5558daa351a0+3505: [%33.0, %33.1, %59.1], env=e1.1
  fs              %101.2 = FrameState         R     0x5558d6b91b10+419: [%100.3, %101.0], env=e80.10, next=%101.1
  void                    Deopt              !v    %101.2, DeadCall@0x5558d6b73b70[Call#9], %101.0   !
BB254   <- [249]
  val?^ | miss    %254.0 = LdVar              eR    character, e239.8
  lgl$#-          %254.1 = Identical                %254.0, function(length=0L) <(rir::DispatchTable*)0x55|...
  void                    Assume             D     %254.1, %247.1 (CallTarget@0x5558dda467c8[Call#1])
  str-            %254.3 = CallSafeBuiltin    wed   vector("character", 0L)    <str->
  goto BB251
BB250   <- [249]
  goto BB251
BB206   <- [260, 205]
  lgl$-           %206.0 = Phi                      %205.1:BB205, %204.1:BB260
  lgl$#-          %206.1 = CheckTrueFalse     e     %206.0
  cp              %206.2 = Checkpoint                -> BB208 (default) | BB207 (if assume failed)
BB139   <- [130]
  goto BB132
BB131   <- [130]
  lgl$#-          %131.0 = IsType                   %120.1 isA lgl$-
  void                    Assume             D     %131.0, %128.3 (Typecheck@0x5558d638d658[Type#10])
  lgl$-           %131.2 = CastType           d     dn %120.1
  lgl$-           %131.3 = Not                d     %131.2, elided
  lgl$-           %131.4 = AsLogical                %131.3
  lgl$-           %131.5 = LAnd                     %128.1, %131.4
  goto BB132
BB148   <- [102]
  val?^ | miss    %148.0 = LdVar              eR    any, e80.10
  lgl$#-          %148.1 = Identical                <blt any>, %148.0   <@?>
  void                    Branch                   %148.1 -> BB150 (if true) | BB149 (if false)
BB103   <- [102]
  val?^ | miss    %103.0 = LdVar              eR    match, e80.10
  lgl$#-          %103.1 = Identical                %103.0, function(x, table, nomatch=NA, incomparables=N|...
  void                    Assume             D     %103.1, %98.6 (CallTarget@0x5558d6b73b70[Call#10])
  prom-           %103.3 = MkArg                    unboundValue, validObject[0x5558db3d7e50]_p91, e80.10
  val?^           %103.4 = CastType                 up %103.3
  val?^ | miss    %103.5 = LdVar              eR    class1, e80.10
  val?            %103.6 = Force!<wrapped>    !v    %103.5, e80.10   <str$+>
  prom-           %103.7 = MkArg                    %103.6, validObject[0x5558db3d7e50]_p90 (!refl), e80.10
  val?~           %103.8 = CastType                 up %103.7
  cp              %103.9 = Checkpoint                -> BB105 (default) | BB104 (if assume failed)
BB251   <- [250, 254]
  val?            %251.0 = Phi                      %239.12:BB250, %254.3:BB254   <str->
  lgl$#-          %251.1 = IsType                   %251.0 isA val?-
  cp              %251.2 = Checkpoint                -> BB253 (default) | BB252 (if assume failed)
BB208   <- [206]
  void                    Branch                   %206.1 -> BB259 (if true) | BB209 (if false)
BB207   <- [206]
  fs              %207.0 = FrameState         R     0x5558daa351a0+6030: [%168.0, %168.1, %180.1, <blt c>, %196.7], env=e1.1
  fs              %207.1 = FrameState         R     0x5558db3632d0+38: [%206.1], env=e196.13, next=%207.0
  void                    Deopt              !v    %207.1   !
BB132   <- [139, 131]
  lgl$-           %132.0 = Phi                      %131.5:BB131, %128.1:BB139
  lgl$#-          %132.1 = CheckTrueFalse     e     %132.0
  void                    Branch                   %132.1 -> BB136 (if true) | BB133 (if false)
BB150   <- [148]
  (cls|spec|blt)  %150.0 = LdFun              !v    %in%, e80.10
  fs              %150.1 = FrameState         R     0x5558daa351a0+3505: [%33.0, %33.1, %59.1], env=e1.1
  fs              %150.2 = FrameState         R     0x5558d6b91b10+961: [<blt any>, %150.0], env=e80.10, next=%150.1
  void                    Deopt              !v    %150.2, DeadCall@0x5558d6b73b70[Call#20], %150.0   !
BB149   <- [148]
  (cls|spec|blt)  %149.0 = LdFun              !v    any, e80.10
  fs              %149.1 = FrameState         R     0x5558daa351a0+3505: [%33.0, %33.1, %59.1], env=e1.1
  fs              %149.2 = FrameState         R     0x5558d6b91b10+924: [%149.0], env=e80.10, next=%149.1
  void                    Deopt              !v    %149.2, DeadCall@0x5558d6b73b70[Call#15], %149.0   !
BB105   <- [103]
  env             e105.0 = (MkEnv)            l     x=%103.8, table=%103.4, nomatch(miss)=NA, incomparables(miss)=nil, parent=R_BaseNamespace, context 0
  lgl$#-          %105.1 = IsEnvStub          R     , e105.0
  void                    Assume             D     %105.1, %103.9 (EnvStubMaterialized@0x5558d3692b30[Call#unknown])
  val?            %105.3 = Force!<lazy>       !vL   %103.4, e105.0   <val?+>
  lgl$#-          %105.4 = IsType                   %105.3 isA val?+
  cp              %105.5 = Checkpoint                -> BB107 (default) | BB106 (if assume failed)
BB104   <- [103]
  fs              %104.0 = FrameState         R     0x5558daa351a0+3505: [%33.0, %33.1, %59.1], env=e1.1
  fs              %104.1 = FrameState         R     0x5558d6b91b10+496: [], env=e80.10, next=%104.0
  env             e104.2 = (MkEnv)            l     x=%103.8, table=%103.4, nomatch(miss)=NA, incomparables(miss)=nil, parent=R_BaseNamespace, context 0
  fs              %104.3 = FrameState         R     0x5558d3ebad70+9: [%103.6], env=e104.2, next=%104.1
  void                    Deopt              !v    %104.3   !
BB253   <- [251]
  void                    Assume             D     %251.1, %251.2 (Typecheck@0x5558d9aac8a0[Type#356])
  val?-           %253.1 = CastType           d     dn %251.0   <str->
  val+            %253.2 = CallSafeBuiltin    wed   c(%221.7, %253.1)    <str->
  void                    StVar              lW    errors, %253.2, e1.1
  goto BB229
BB252   <- [251]
  fs              %252.0 = FrameState         R     0x5558daa351a0+6579: [<blt c>, %221.7], env=e1.1
  fs              %252.1 = FrameState         R     0x5558db3632d0+94: [%251.0], env=e239.8, next=%252.0
  void                    Deopt              !v    %252.1   !
BB259   <- [208]
  val?^ | miss    %259.0 = LdVar              eR    character, e196.13
  lgl$#-          %259.1 = Identical                %259.0, function(length=0L) <(rir::DispatchTable*)0x55|...
  void                    Assume             D     %259.1, %206.2 (CallTarget@0x5558dda467c8[Call#1])
  str-            %259.3 = CallSafeBuiltin    wed   vector("character", 0L)    <str->
  goto BB210
BB209   <- [208]
  goto BB210
BB136   <- [132]
  val?^ | miss    %136.0 = LdVar              eR    c, e1.1
  lgl$#-          %136.1 = Identical                <blt c>, %136.0   <@?>
  void                    Branch                   %136.1 -> BB138 (if true) | BB137 (if false)
BB133   <- [132]
  val?^ | miss    %133.0 = LdVar              eR    complete, e1.1
  lgl$#-          %133.1 = IsType                   %133.0 isA lgl$~-
  void                    Assume             D     %133.1, %128.3 (Typecheck@0x5558d9aac8a0[Type#222])
  lgl$~-          %133.3 = CastType           d     dn %133.0
  lgl$-           %133.4 = Force!<wrapped>          %133.3,    <lgl$->
  lgl$-           %133.5 = Not                d     %133.4, elided
  lgl$#-          %133.6 = CheckTrueFalse     e     %133.5
  void                    Branch                   %133.6 -> BB135 (if true) | BB134 (if false)
BB107   <- [105]
  lgl$#-          %107.0 = IsEnvStub          R     , e105.0
  void                    Assume             D     %107.0, %105.5 (EnvStubMaterialized@0x5558d3692b30[Call#unknown])
  lgl$#-          %107.2 = IsType                   %103.6 isA val?+
  void                    Assume             D     %107.2, %105.5 (Typecheck@0x5558d3692b30[Type#0])
  val?+           %107.4 = CastType           d     dn %103.6   <str$+>
  void                    Assume             D     %105.4, %105.5 (Typecheck@0x5558d3692b30[Type#1])
  val?+           %107.6 = CastType           d     dn %105.3
  val+            %107.7 = CallSafeBuiltin    wed   match(%107.4, %107.6, NA, nil)    <int$->
  lgl$#-          %107.8 = IsType                   %107.7 isA int$-
  cp              %107.9 = Checkpoint                -> BB109 (default) | BB108 (if assume failed)
BB106   <- [105]
  fs              %106.0 = FrameState         R     0x5558daa351a0+3505: [%33.0, %33.1, %59.1], env=e1.1
  fs              %106.1 = FrameState         R     0x5558d6b91b10+496: [], env=e80.10, next=%106.0
  fs              %106.2 = FrameState         R     0x5558d3ebad70+23: [%103.6, %105.3], env=e105.0, next=%106.1
  void                    Deopt              !v    %106.2   !
BB210   <- [209, 259]
  val?            %210.0 = Phi                      %196.20:BB209, %259.3:BB259   <str->
  lgl$#-          %210.1 = IsType                   %210.0 isA val?-
  cp              %210.2 = Checkpoint                -> BB212 (default) | BB211 (if assume failed)
BB138   <- [136]
  val?^ | miss    %138.0 = LdVar              eR    errors, e1.1
  val?            %138.1 = Force!             !v    %138.0, e1.1   <val?_>
  (cls|spec|blt)  %138.2 = LdFun              !v    paste0, e1.1
  fs              %138.3 = FrameState         R     0x5558daa351a0+3651: [%33.0, %33.1, %59.1, <blt c>, %138.1, %138.2], env=e1.1
  void                    Deopt              !v    %138.3, DeadCall@0x5558d9aac8a0[Call#60], %138.2   !
BB137   <- [136]
  (cls|spec|blt)  %137.0 = LdFun              !v    c, e1.1
  fs              %137.1 = FrameState         R     0x5558daa351a0+3595: [%33.0, %33.1, %59.1, %137.0], env=e1.1
  void                    Deopt              !v    %137.1, DeadCall@0x5558d9aac8a0[Call#57], %137.0   !
BB135   <- [133]
  goto BB59
BB134   <- [133]
  (cls|spec|blt)  %134.0 = LdFun              !v    anyStrings, e1.1
  fs              %134.1 = FrameState         R     0x5558daa351a0+3805: [%33.0, %33.1, %59.1, %134.0], env=e1.1
  void                    Deopt              !v    %134.1, DeadCall@0x5558d9aac8a0[Call#62], %134.0   !
BB109   <- [107]
  void                    Assume             D     %107.8, %107.9 (Typecheck@0x5558d6b73b70[Type#32])
  int$-           %109.1 = CastType           d     dn %107.7
  void                    StVar              lW    i, %109.1, e80.10
  cp              %109.3 = Checkpoint                -> BB111 (default) | BB110 (if assume failed)
BB108   <- [107]
  fs              %108.0 = FrameState         R     0x5558daa351a0+3505: [%33.0, %33.1, %59.1], env=e1.1
  fs              %108.1 = FrameState         R     0x5558d6b91b10+496: [], env=e80.10, next=%108.0
  fs              %108.2 = FrameState         R     0x5558d3ebad70+69: [%107.7], env=e105.0, next=%108.1
  void                    Deopt              !v    %108.2   !
BB212   <- [210]
  void                    Assume             D     %210.1, %210.2 (Typecheck@0x5558d9aac8a0[Type#334])
  val?-           %212.1 = CastType           d     dn %210.0   <str->
  val+            %212.2 = CallSafeBuiltin    wed   c(%196.7, %212.1)    <str->
  void                    StVar              lW    errors, %212.2, e1.1
  cp              %212.4 = Checkpoint                -> BB214 (default) | BB213 (if assume failed)
BB211   <- [210]
  fs              %211.0 = FrameState         R     0x5558daa351a0+6030: [%168.0, %168.1, %180.1, <blt c>, %196.7], env=e1.1
  fs              %211.1 = FrameState         R     0x5558db3632d0+94: [%210.0], env=e196.13, next=%211.0
  void                    Deopt              !v    %211.1   !
BB111   <- [109]
  val?^ | miss    %111.0 = LdVar              eR    is.na, e80.10
  lgl$#-          %111.1 = Identical                <blt is.na>, %111.0   <true>
  void                    Assume             D     %111.1, %109.3 (DeadBranchReached@0x5558d6b73b70[Test#3])
  lgl$-           %111.3 = CallSafeBuiltin    wed   is.na(%109.1)    <lgl$->
  lgl$-           %111.4 = Not                d     %111.3, elided
  int-            %111.5 = Extract1_1D        wed   %109.1, %111.4, elided   <int->
  void                    StVar              lW    i, %111.5, e80.10
  cp              %111.7 = Checkpoint                -> BB113 (default) | BB112 (if assume failed)
BB110   <- [109]
  fs              %110.0 = FrameState         R     0x5558daa351a0+3505: [%33.0, %33.1, %59.1], env=e1.1
  fs              %110.1 = FrameState         R     0x5558d6b91b10+510: [], env=e80.10, next=%110.0
  void                    Deopt              !v    %110.1   !
BB214   <- [212]
  val?^ | miss    %214.0 = LdVar              eR    length, e1.1
  lgl$#-          %214.1 = Identical                <blt length>, %214.0   <true>
  void                    Assume             D     %214.1, %212.4 (DeadBranchReached@0x5558d9aac8a0[Test#69])
  (int|real)$-    %214.3 = CallSafeBuiltin    wed   length(%212.2)    <int$->
  lgl$#-          %214.4 = IsType                   %214.3 isA int$-
  cp              %214.5 = Checkpoint                -> BB216 (default) | BB215 (if assume failed)
BB213   <- [212]
  fs              %213.0 = FrameState         R     0x5558daa351a0+6066: [%168.0, %168.1, %180.1], env=e1.1
  void                    Deopt              !v    %213.0   !
BB113   <- [111]
  val?^ | miss    %113.0 = LdVar              eR    length, e80.10
  lgl$#-          %113.1 = Identical                <blt length>, %113.0   <true>
  void                    Assume             D     %113.1, %111.7 (DeadBranchReached@0x5558d6b73b70[Test#4])
  (int|real)$-    %113.3 = CallSafeBuiltin    wed   length(%111.5)    <int$->
  lgl$#-          %113.4 = IsType                   %113.3 isA int$-
  cp              %113.5 = Checkpoint                -> BB115 (default) | BB114 (if assume failed)
BB112   <- [111]
  fs              %112.0 = FrameState         R     0x5558daa351a0+3505: [%33.0, %33.1, %59.1], env=e1.1
  fs              %112.1 = FrameState         R     0x5558d6b91b10+668: [], env=e80.10, next=%112.0
  void                    Deopt              !v    %112.1   !
BB216   <- [214]
  void                    Assume             D     %214.4, %214.5 (Typecheck@0x5558d9aac8a0[Type#338])
  int$-           %216.1 = CastType           d     dn %214.3
  lgl$#-          %216.2 = CheckTrueFalse     e     %216.1
  void                    Branch                   %216.2 -> BB218 (if true) | BB217 (if false)
BB215   <- [214]
  fs              %215.0 = FrameState         R     0x5558daa351a0+6157: [%168.0, %168.1, %180.1, %214.3], env=e1.1
  void                    Deopt              !v    %215.0   !
BB115   <- [113]
  void                    Assume             D     %113.4, %113.5 (Typecheck@0x5558d6b73b70[Type#42])
  int$-           %115.1 = CastType           d     dn %113.3
  lgl$#-          %115.2 = CheckTrueFalse     e     %115.1
  void                    Branch                   %115.2 -> BB142 (if true) | BB116 (if false)
BB114   <- [113]
  fs              %114.0 = FrameState         R     0x5558daa351a0+3505: [%33.0, %33.1, %59.1], env=e1.1
  fs              %114.1 = FrameState         R     0x5558d6b91b10+759: [%113.3], env=e80.10, next=%114.0
  void                    Deopt              !v    %114.1   !
BB218   <- [216]
  goto BB219
BB217   <- [216]
  goto BB195
BB142   <- [115]
  val?^ | miss    %142.0 = LdVar              eR    subs, e80.10
  val?            %142.1 = Force!             !v    %142.0, e80.10   <val?_>
  lgl$#-          %142.2 = IsType                   %142.1 isA val+   <@?>
  void                    Branch                   %142.2 -> BB145 (if true) | BB143 (if false)
BB116   <- [115]
  goto BB117
BB145   <- [142]
  val?^ | miss    %145.0 = LdVar              eR    i, e80.10
  val?            %145.1 = Force!             !v    %145.0, e80.10   <val?_>
  lgl$#-          %145.2 = IsType                   %145.1 isA val?+
  cp              %145.3 = Checkpoint                -> BB147 (default) | BB146 (if assume failed)
BB143   <- [142]
  prom-           %143.0 = MkArg                    unboundValue, validObject[0x5558db3d7e50]_p93, e80.10
  goto BB144
BB117   <- [116, 144]
  val?            %117.0 = Phi                      false:BB116, %144.1:BB144
  goto BB118
BB147   <- [145]
  void                    Assume             D     %145.2, %145.3 (Typecheck@0x5558d6b73b70[Type#46])
  val?+           %147.1 = CastType           d     dn %145.1   <val?_>
  val?            %147.2 = Extract1_1D        wed   %147.1, 1L, elided   <val?_>
  goto BB144
BB146   <- [145]
  fs              %146.0 = FrameState         R     0x5558daa351a0+3505: [%33.0, %33.1, %59.1], env=e1.1
  fs              %146.1 = FrameState         R     0x5558d6b91b10+835: [%142.1, %145.1], env=e80.10, next=%146.0
  void                    Deopt              !v    %146.1   !
BB144   <- [143, 147]
  val?            %144.0 = Phi                      %147.2:BB147, %143.0:BB143
  val?            %144.1 = Extract2_1D        !v    %142.1, %144.0, e80.10   <val?_>
  goto BB117
Prom 2:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    Class, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$+>
  void                    Return             l     %1.3
Prom 3:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    classDef, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <other>
  void                    Return             l     %1.3
Prom 4:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    classDef, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 5:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    slots, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 8:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    classi, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$+>
  void                    Return             l     %1.3
Prom 9:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    where, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 10:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    namei, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$->
  lgl$-           %1.4  = Is                       %1.3, logical
  lgl$-           %1.5  = Is                       %1.3, integer
  lgl$-           %1.6  = Is                       %1.3, double
  lgl$-           %1.7  = Is                       %1.3, complex
  lgl$-           %1.8  = Is                       %1.3, character   <true>
  lgl$-           %1.9  = Is                       %1.3, raw
  lgl$-           %1.10 = Is                       %1.3, list
  lgl$-           %1.11 = Is                       %1.3, expression
  lgl$-           %1.12 = LOr                      %1.11, %1.10
  lgl$-           %1.13 = LOr                      %1.12, %1.9
  lgl$-           %1.14 = LOr                      %1.13, %1.8
  lgl$-           %1.15 = LOr                      %1.14, %1.7
  lgl$-           %1.16 = LOr                      %1.15, %1.6
  lgl$-           %1.17 = LOr                      %1.16, %1.5
  lgl$-           %1.18 = LOr                      %1.17, %1.4   <true>
  lgl$#-          %1.19 = Identical                %1.18, true
  void                    Branch                   %1.19 -> BB2 (if true) | BB23 (if false)
BB2   <- [1]
  int$-           %2.0  = Length                   %1.3
  lgl$-           %2.1  = Eq                 vd    %2.0, 1L, elided   <true>
  lgl$#-          %2.2  = Identical                %2.1, true
  void                    Branch                   %2.2 -> BB5 (if true) | BB3 (if false)
BB23   <- [1]
  goto BB4
BB5   <- [2]
  lgl$-           %5.0  = Is                       %1.3, Factor   <false>
  lgl$#-          %5.1  = Identical                %5.0, false
  void                    Branch                   %5.1 -> BB22 (if true) | BB6 (if false)
BB3   <- [2]
  goto BB4
BB4   <- [23, 3]
  val?            %4.0  = CallBuiltin        !     stop(true, "EXPR must be a length 1 vector") e1.0
  void                    Unreachable              
BB22   <- [5]
  goto BB7
BB6   <- [5]
  val?            %6.0  = CallBuiltin        !     warning(true, false, false, "EXPR is a "factor", treated as integer.
 Cons|...) e1.0
  goto BB7
BB7   <- [22, 6]
  lgl$#-          %7.0  = Identical                %1.8, true
  void                    Branch                   %7.0 -> BB16 (if true) | BB8 (if false)
BB16   <- [7]
  val?            %16.0 = CallBuiltin        !     is.na(%1.3) e1.0
  lgl$#-          %16.1 = CheckTrueFalse     we    %16.0   <false>
  void                    Branch                   %16.1 -> BB21 (if true) | BB17 (if false)
BB8   <- [7]
  int$-           %8.0  = AsSwitchIdx              %1.3
  lgl$-           %8.1  = Eq                 vd    %8.0, 1L, elided
  lgl$#-          %8.2  = CheckTrueFalse     e     %8.1   <@?>
  void                    Branch                   %8.2 -> BB14 (if true) | BB9 (if false)
BB21   <- [16]
  goto BB18
BB17   <- [16]
  goto BB18
BB14   <- [8]
  goto BB15
BB9   <- [8]
  lgl$-           %9.0  = Eq                 vd    %8.0, 2L, elided
  lgl$#-          %9.1  = CheckTrueFalse     e     %9.0   <@?>
  void                    Branch                   %9.1 -> BB12 (if true) | BB10 (if false)
BB18   <- [21, 17]
  val?            %18.0 = Phi                      "NA":BB21, %1.3:BB17
  val?            %18.1 = Eq                 !     %18.0, .S3Class, e1.0
  lgl$#-          %18.2 = CheckTrueFalse     we    %18.1   <false>
  void                    Branch                   %18.2 -> BB20 (if true) | BB19 (if false)
BB15   <- [14, 20]
  (cls|spec|blt)  %15.0 = LdFun              !     S3Class, e1.0
  prom-           %15.1 = MkArg                    unboundValue, validObject[0x5558db3d7e50]_p13, e1.0
  val?            %15.2 = Call               !     %15.0(%15.1) e1.0   <val?_>
  goto BB11
BB12   <- [9]
  goto BB13
BB10   <- [9]
  goto BB11
BB20   <- [18]
  goto BB15
BB19   <- [18]
  goto BB13
BB11   <- [10, 15, 13]
  val?            %11.0 = Phi                      nil:BB10, %13.3:BB13, %15.2:BB15
  void                    Return             l     %11.0
BB13   <- [12, 19]
  (cls|spec|blt)  %13.0 = LdFun              !     slot, <0x5558dd9c9e78>, e1.0
  prom-           %13.1 = MkArg                    unboundValue, validObject[0x5558db3d7e50]_p11, e1.0
  prom-           %13.2 = MkArg                    unboundValue, validObject[0x5558db3d7e50]_p12, e1.0
  val?            %13.3 = Call               !     %13.0(%13.1, %13.2) e1.0   <val?->
  goto BB11
Prom 11:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    object, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <(cls|other)>
  void                    Return             l     %1.3
Prom 12:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    namei, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 13:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    object, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 14:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    sloti, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <val?->
  void                    Return             l     %1.3
Prom 15:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     class, <0x5558d3385748>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, validObject[0x5558db3d7e50]_p16, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <str$->
  void                    Return             l     %1.3
Prom 16:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    sloti, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <val?->
  void                    Return             l     %1.3
Prom 17:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    classi, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$+>
  void                    Return             l     %1.3
Prom 18:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    classDefi, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 20:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    classi, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$+>
  void                    Return             l     %1.3
Prom 21:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    where, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 22:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    namei, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$->
  lgl$-           %1.4  = Is                       %1.3, logical
  lgl$-           %1.5  = Is                       %1.3, integer
  lgl$-           %1.6  = Is                       %1.3, double
  lgl$-           %1.7  = Is                       %1.3, complex
  lgl$-           %1.8  = Is                       %1.3, character   <true>
  lgl$-           %1.9  = Is                       %1.3, raw
  lgl$-           %1.10 = Is                       %1.3, list
  lgl$-           %1.11 = Is                       %1.3, expression
  lgl$-           %1.12 = LOr                      %1.11, %1.10
  lgl$-           %1.13 = LOr                      %1.12, %1.9
  lgl$-           %1.14 = LOr                      %1.13, %1.8
  lgl$-           %1.15 = LOr                      %1.14, %1.7
  lgl$-           %1.16 = LOr                      %1.15, %1.6
  lgl$-           %1.17 = LOr                      %1.16, %1.5
  lgl$-           %1.18 = LOr                      %1.17, %1.4   <true>
  lgl$#-          %1.19 = Identical                %1.18, true
  void                    Branch                   %1.19 -> BB2 (if true) | BB23 (if false)
BB2   <- [1]
  int$-           %2.0  = Length                   %1.3
  lgl$-           %2.1  = Eq                 vd    %2.0, 1L, elided   <true>
  lgl$#-          %2.2  = Identical                %2.1, true
  void                    Branch                   %2.2 -> BB5 (if true) | BB3 (if false)
BB23   <- [1]
  goto BB4
BB5   <- [2]
  lgl$-           %5.0  = Is                       %1.3, Factor   <false>
  lgl$#-          %5.1  = Identical                %5.0, false
  void                    Branch                   %5.1 -> BB22 (if true) | BB6 (if false)
BB3   <- [2]
  goto BB4
BB4   <- [23, 3]
  val?            %4.0  = CallBuiltin        !     stop(true, "EXPR must be a length 1 vector") e1.0
  void                    Unreachable              
BB22   <- [5]
  goto BB7
BB6   <- [5]
  val?            %6.0  = CallBuiltin        !     warning(true, false, false, "EXPR is a "factor", treated as integer.
 Cons|...) e1.0
  goto BB7
BB7   <- [22, 6]
  lgl$#-          %7.0  = Identical                %1.8, true
  void                    Branch                   %7.0 -> BB16 (if true) | BB8 (if false)
BB16   <- [7]
  val?            %16.0 = CallBuiltin        !     is.na(%1.3) e1.0
  lgl$#-          %16.1 = CheckTrueFalse     we    %16.0   <false>
  void                    Branch                   %16.1 -> BB21 (if true) | BB17 (if false)
BB8   <- [7]
  int$-           %8.0  = AsSwitchIdx              %1.3
  lgl$-           %8.1  = Eq                 vd    %8.0, 1L, elided
  lgl$#-          %8.2  = CheckTrueFalse     e     %8.1   <@?>
  void                    Branch                   %8.2 -> BB14 (if true) | BB9 (if false)
BB21   <- [16]
  goto BB18
BB17   <- [16]
  goto BB18
BB14   <- [8]
  goto BB15
BB9   <- [8]
  lgl$-           %9.0  = Eq                 vd    %8.0, 2L, elided
  lgl$#-          %9.1  = CheckTrueFalse     e     %9.0   <@?>
  void                    Branch                   %9.1 -> BB12 (if true) | BB10 (if false)
BB18   <- [21, 17]
  val?            %18.0 = Phi                      "NA":BB21, %1.3:BB17
  val?            %18.1 = Eq                 !     %18.0, .S3Class, e1.0
  lgl$#-          %18.2 = CheckTrueFalse     we    %18.1   <false>
  void                    Branch                   %18.2 -> BB20 (if true) | BB19 (if false)
BB15   <- [14, 20]
  (cls|spec|blt)  %15.0 = LdFun              !     S3Class, e1.0
  prom-           %15.1 = MkArg                    unboundValue, validObject[0x5558db3d7e50]_p25, e1.0
  val?            %15.2 = Call               !     %15.0(%15.1) e1.0   <val?_>
  goto BB11
BB12   <- [9]
  goto BB13
BB10   <- [9]
  goto BB11
BB20   <- [18]
  goto BB15
BB19   <- [18]
  goto BB13
BB11   <- [10, 15, 13]
  val?            %11.0 = Phi                      nil:BB10, %13.3:BB13, %15.2:BB15
  void                    Return             l     %11.0
BB13   <- [12, 19]
  (cls|spec|blt)  %13.0 = LdFun              !     slot, <0x5558dd9c9e78>, e1.0
  prom-           %13.1 = MkArg                    unboundValue, validObject[0x5558db3d7e50]_p23, e1.0
  prom-           %13.2 = MkArg                    unboundValue, validObject[0x5558db3d7e50]_p24, e1.0
  val?            %13.3 = Call               !     %13.0(%13.1, %13.2) e1.0   <val?>
  goto BB11
Prom 23:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    object, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <(cls|other)>
  void                    Return             l     %1.3
Prom 24:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    namei, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 25:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    object, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 26:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    sloti, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <val?>
  void                    Return             l     %1.3
Prom 27:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     class, <0x5558d3385748>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, validObject[0x5558db3d7e50]_p28, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <str$+>
  void                    Return             l     %1.3
Prom 28:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    sloti, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <val?>
  void                    Return             l     %1.3
Prom 29:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    classi, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$+>
  void                    Return             l     %1.3
Prom 30:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    classDefi, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 31:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    ok, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <(lgl|other)>
  void                    Return             l     %1.3
Prom 38:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    classDef, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 39:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    contains, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 40:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    exti, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 41:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    superClass, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 42:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    exti, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 43:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    simple, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 44:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    superClass, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$+>
  void                    Return             l     %1.3
Prom 45:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    superDef, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 46:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    validity, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 47:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    exti, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 48:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    superClass, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 49:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    exti, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 50:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    simple, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 51:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    superClass, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$+>
  void                    Return             l     %1.3
Prom 52:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    superDef, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 53:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    validity, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 54:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     validityMethod, e1.0
  prom-           %1.2  = MkArg                    unboundValue, validObject[0x5558db3d7e50]_p55, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <lgl$->
  void                    Return             l     %1.3
Prom 55:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     as, <0x5558d5c7a098>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, validObject[0x5558db3d7e50]_p56, e1.0
  prom-           %1.3  = MkArg                    unboundValue, validObject[0x5558db3d7e50]_p57, e1.0
  val?            %1.4  = Call               !     %1.1(%1.2, %1.3) e1.0   <other>
  void                    Return             l     %1.4
Prom 56:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    object, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <other>
  void                    Return             l     %1.3
Prom 57:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    superClass, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$+>
  void                    Return             l     %1.3
Prom 58:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    classDef, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 59:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    validity, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 60:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     validityMethod, e1.0
  prom-           %1.2  = MkArg                    unboundValue, validObject[0x5558db3d7e50]_p61, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <lgl$->
  void                    Return             l     %1.3
Prom 61:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    object, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <other>
  void                    Return             l     %1.3
Prom 65:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     getOption, e1.0
  prom-           %1.2  = MkArg                    unboundValue, validObject[0x5558db3d7e50]_p66, e1.0
  val?            %1.3  = NamedCall          !     %1.1("try.outFile", default=%1.2) e1.0   <val?_>
  void                    Return             l     %1.3
Prom 66:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     stderr, e1.0
  val?            %1.2  = Call               !     %1.1() e1.0   <val?_>
  void                    Return             l     %1.2
Prom 67:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    expr, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <val?>
  void                    Return             l     %1.3
Prom 68:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  cls             %1.1  = MkCls                    try@Prom(3)0, e1.0
  void                    Return             l     %1.1
Prom 70:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     getOption, e1.0
  prom-           %1.2  = MkArg                    unboundValue, validObject[0x5558db3d7e50]_p71, e1.0
  val?            %1.3  = NamedCall          !     %1.1("try.outFile", default=%1.2) e1.0   <val?_>
  void                    Return             l     %1.3
Prom 71:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     stderr, e1.0
  val?            %1.2  = Call               !     %1.1() e1.0   <val?_>
  void                    Return             l     %1.2
Prom 72:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    expr, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <val?>
  void                    Return             l     %1.3
Prom 73:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  cls             %1.1  = MkCls                    try@Prom(3)0, e1.0
  void                    Return             l     %1.1
Prom 75:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     getClassDef, <0x5558d452ecd0>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, validObject[0x5558db3d7e50]_p76, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <other>
  void                    Return             l     %1.3
Prom 76:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    class1, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <str$+>
  void                    Return             l     %1.3
Prom 81:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    class1, e1.0
  val?            %1.2  = Force<lazy>        !v    %1.1, e1.0   <str$+>
  val?            %1.3  = Extract2_1D        !v    %1.2, 1L, e1.0   <str$->
  void                    Visible            v     
  void                    Return             l     %1.3
Prom 82:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    class2, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <str$+>
  void                    Return             l     %1.3
Prom 83:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    class2, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <str$+>
  void                    Return             l     %1.3
Prom 84:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    ClassDef1, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 85:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    contains, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 86:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    ClassDef2, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 87:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    subclasses, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 88:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     class, <0x5558d3385748>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, validObject[0x5558db3d7e50]_p89, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <str$+>
  void                    Return             l     %1.3
Prom 89:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    ClassDef2, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <other>
  void                    Return             l     %1.3
Prom 90:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    class1, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <str$+>
  void                    Return             l     %1.3
Prom 91:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     names, <0x5558d3385470>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, validObject[0x5558db3d7e50]_p92, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <str$->
  void                    Return             l     %1.3
Prom 92:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    subs, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <vec$+>
  void                    Return             l     %1.3
Prom 93:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    i, e1.0
  val?            %1.2  = Force              !v    %1.1, e1.0   <val?_>
  val?            %1.3  = Extract1_1D        !v    %1.2, 1L, e1.0   <val?_>
  void                    Visible            v     
  void                    Return             l     %1.3
Prom 94:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    x, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <lgl$->
  void                    Return             l     %1.3
Prom 95:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    x, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <lgl$->
  void                    Return             l     %1.3
Prom 100:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     .requirePackage, <0x5558d3bb2ab0>, e1.0
  val?            %1.2  = Call               !     %1.1("methods") e1.0   <env->
  void                    Return             l     %1.2
Prom 101:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    Class, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <str$+>
  void                    Return             l     %1.3
Prom 102:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    Class, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 103:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    package, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 104:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    package, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 105:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    Class, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 106:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    value, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3

│ validObject[0x5558db3d7e50]                                                  │
└──────────────────────────────────────────────────────────────────────────────┘
