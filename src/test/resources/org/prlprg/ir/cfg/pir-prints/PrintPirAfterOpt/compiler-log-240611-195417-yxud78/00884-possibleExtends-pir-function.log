
┌──────────────────────────────────────────────────────────────────────────────┐
│ possibleExtends[0x5558db33a020]                                              │
│ Context: CorrOrd,!TMany,Argmatch;Eager2,NonRefl2                             │
│ Properties:                                                                  │
├────── PIR Version After Optimizations
possibleExtends[0x5558db33a020]
BB0
  goto BB1
BB1   <- [0]
  val?^ | miss    %1.0  = LdArg                    3
  val?~ | miss    %1.1  = LdArg                    2
  val?^ | miss    %1.2  = LdArg                    1
  val?^ | miss    %1.3  = LdArg                    0
  lgl$#-          %1.4  = Identical                %1.1, missingArg
  lgl$#-          %1.5  = Identical                %1.0, missingArg
  env             e1.6  = MkEnv              l     class1=%1.3, class2=%1.2, ClassDef1=%1.1, ClassDef2=%1.0, parent=<env 0x5558d398c378>, context 1
  void                    Branch                   %1.4 -> BB2 (if true) | BB61 (if false)
BB2   <- [1]
  prom-           %2.0  = MkArg                    unboundValue, possibleExtends[0x5558db33a020]_p0, e1.6
  val?^ | miss    %2.1  = CastType                 up %2.0
  void                    StArg              lW    ClassDef1, %2.1, e1.6
  goto BB3
BB61   <- [1]
  goto BB3
BB3   <- [2, 61]
  void                    Branch                   %1.5 -> BB60 (if true) | BB4 (if false)
BB60   <- [3]
  prom-           %60.0 = MkArg                    unboundValue, possibleExtends[0x5558db33a020]_p2, e1.6
  val?^ | miss    %60.1 = CastType                 up %60.0
  void                    StArg              lW    ClassDef2, %60.1, e1.6
  goto BB5
BB4   <- [3]
  goto BB5
BB5   <- [60, 4]
  cp              %5.0  = Checkpoint                -> BB7 (default) | BB6 (if assume failed)
BB7   <- [5]
  val?^ | miss    %7.0  = LdVar              eR    .identC, <env 0x5558d398c378>
  lgl$#-          %7.1  = Identical                %7.0, function(c1=NULL, c2=NULL) <(rir::DispatchTabl|...
  void                    Assume             D     %7.1, %5.0 (CallTarget@0x5558d6b73b70[Call#3])
  prom-           %7.3  = MkArg                    unboundValue, possibleExtends[0x5558db33a020]_p6, e1.6
  prom-           %7.4  = MkArg                    unboundValue, possibleExtends[0x5558db33a020]_p7, e1.6
  val?            %7.5  = StaticCall         !v    .identC[0x5558dee2b800](%7.3, %7.4) e1.6   <lgl$->
  lgl$#-          %7.6  = IsType                   %7.5 isA lgl$-
  cp              %7.7  = Checkpoint                -> BB9 (default) | BB8 (if assume failed)
BB6   <- [5]
  fs              %6.0  = FrameState         R     0x5558d6b91b10+0: [], env=e1.6
  void                    Deopt              !v    %6.0
BB9   <- [7]
  void                    Assume             D     %7.6, %7.7 (Typecheck@0x5558d6b73b70[Type#9])
  lgl$-           %9.1  = CastType           d     dn %7.5
  lgl$-           %9.2  = AsLogical                %9.1
  lgl$#-          %9.3  = Identical                %9.2, true
  void                    Branch                   %9.3 -> BB59 (if true) | BB10 (if false)
BB8   <- [7]
  fs              %8.0  = FrameState         R     0x5558d6b91b10+37: [%7.5], env=e1.6
  void                    Deopt              !v    %8.0   !
BB59   <- [9]
  goto BB13
BB10   <- [9]
  val?^ | miss    %10.0 = LdVar              eR    .identC, e1.6
  lgl$#-          %10.1 = Identical                %10.0, function(c1=NULL, c2=NULL) <(rir::DispatchTabl|...
  void                    Assume             D     %10.1, %7.7 (CallTarget@0x5558d6b73b70[Call#4])
  prom-           %10.3 = MkArg                    unboundValue, possibleExtends[0x5558db33a020]_p8, e1.6
  val?            %10.4 = StaticCall         !v    .identC[0x5558d56351d0](%10.3, "ANY") e1.6   <lgl$->
  lgl$#-          %10.5 = IsType                   %10.4 isA lgl$-
  cp              %10.6 = Checkpoint                -> BB12 (default) | BB11 (if assume failed)
BB13   <- [12, 59]
  lgl$-           %13.0 = Phi                      %12.3:BB12, %9.2:BB59
  lgl$#-          %13.1 = CheckTrueFalse     e     %13.0
  void                    Branch                   %13.1 -> BB58 (if true) | BB14 (if false)
BB12   <- [10]
  void                    Assume             D     %10.5, %10.6 (Typecheck@0x5558d6b73b70[Type#11])
  lgl$-           %12.1 = CastType           d     dn %10.4
  lgl$-           %12.2 = AsLogical                %12.1
  lgl$-           %12.3 = LOr                      %9.2, %12.2
  goto BB13
BB11   <- [10]
  fs              %11.0 = FrameState         R     0x5558d6b91b10+86: [%9.2, %10.4], env=e1.6
  void                    Deopt              !v    %11.0   !
BB58   <- [13]
  void                    Visible            v     
  goto BB45
BB14   <- [13]
  val?^ | miss    %14.0 = LdVar              eR    ClassDef1, e1.6
  val?            %14.1 = Force!<lazy>       !v    %14.0, e1.6   <other>
  lgl$-           %14.2 = Is                       %14.1, NULL
  lgl$#-          %14.3 = CheckTrueFalse     e     %14.2
  void                    Branch                   %14.3 -> BB57 (if true) | BB15 (if false)
BB45   <- [57, 58, 44]
  val?            %45.0 = Phi                      %44.0:BB44, false:BB57, true:BB58
  void                    Return             l     %45.0
BB57   <- [14]
  void                    Visible            v     
  goto BB45
BB15   <- [14]
  (cls|spec|blt)  %15.0 = LdFun              !v    @, <0x5558d3384bd8>, e1.6
  prom-           %15.1 = MkArg                    unboundValue, possibleExtends[0x5558db33a020]_p9, e1.6
  prom-           %15.2 = MkArg                    unboundValue, possibleExtends[0x5558db33a020]_p10, e1.6
  val?            %15.3 = Call               !v    %15.0(%15.1, %15.2) e1.6   <vec+>
  void                    StVar              lW    ext, %15.3, e1.6
  lgl$#-          %15.5 = IsType                   %15.3 isA val+   <true>
  cp              %15.6 = Checkpoint                -> BB17 (default) | BB16 (if assume failed)
BB17   <- [15]
  val             %17.0 = ChkMissing         e     %15.3
  void                    Assume             D     %15.5, %15.6 (DeadBranchReached@0x5558d6b73b70[Test#1])
  val?^ | miss    %17.2 = LdVar              eR    class2, e1.6
  val?            %17.3 = Force!<wrapped>    !v    %17.2, e1.6   <str$+>
  lgl$#-          %17.4 = IsType                   %17.3 isA val?+
  cp              %17.5 = Checkpoint                -> BB19 (default) | BB18 (if assume failed)
BB16   <- [15]
  fs              %16.0 = FrameState         R     0x5558d6b91b10+199: [], env=e1.6
  void                    Deopt              !v    %16.0   !
BB19   <- [17]
  lgl$#-          %19.0 = IsType                   %15.3 isA val?+
  void                    Assume             D     %19.0, %17.5 (Typecheck@0x5558d6b73b70[Type#15])
  val?+           %19.2 = CastType           d     dn %15.3   <vec+>
  void                    Assume             D     %17.4, %17.5 (Typecheck@0x5558d6b73b70[Type#18])
  val?+           %19.4 = CastType           d     dn %17.3   <str$+>
  val?            %19.5 = Extract2_1D        wed   %19.2, %19.4, elided   <(nil|other)>
  lgl$-           %19.6 = Is                       %19.5, NULL
  void                    StVar              lW    contained, %19.5, e1.6
  lgl$-           %19.8 = Not                d     %19.6, elided
  lgl$#-          %19.9 = CheckTrueFalse     e     %19.8
  void                    Branch                   %19.9 -> BB56 (if true) | BB20 (if false)
BB18   <- [17]
  fs              %18.0 = FrameState         R     0x5558d6b91b10+253: [%15.3, %17.3], env=e1.6
  void                    Deopt              !v    %18.0   !
BB56   <- [19]
  val             %56.0 = ChkMissing         e     %19.5
  void                    Visible            v     
  goto BB44
BB20   <- [19]
  val?^ | miss    %20.0 = LdVar              eR    ClassDef2, e1.6
  val?            %20.1 = Force!<lazy>       !v    %20.0, e1.6   <other>
  lgl$-           %20.2 = Is                       %20.1, NULL
  lgl$#-          %20.3 = CheckTrueFalse     e     %20.2
  void                    Branch                   %20.3 -> BB55 (if true) | BB21 (if false)
BB44   <- [56, 43]
  val?            %44.0 = Phi                      %43.0:BB43, %19.5:BB56
  goto BB45
BB55   <- [20]
  void                    Visible            v     
  goto BB43
BB21   <- [20]
  (cls|spec|blt)  %21.0 = LdFun              !v    @, <0x5558d3384bd8>, e1.6
  prom-           %21.1 = MkArg                    unboundValue, possibleExtends[0x5558db33a020]_p11, e1.6
  prom-           %21.2 = MkArg                    unboundValue, possibleExtends[0x5558db33a020]_p12, e1.6
  val?            %21.3 = Call               !v    %21.0(%21.1, %21.2) e1.6   <vec$+>
  void                    StVar              lW    subs, %21.3, e1.6
  cp              %21.5 = Checkpoint                -> BB23 (default) | BB22 (if assume failed)
BB43   <- [55, 42]
  val?            %43.0 = Phi                      %42.0:BB42, false:BB55
  goto BB44
BB23   <- [21]
  val?^ | miss    %23.0 = LdVar              eR    .identC, e1.6
  lgl$#-          %23.1 = Identical                %23.0, function(c1=NULL, c2=NULL) <(rir::DispatchTabl|...
  void                    Assume             D     %23.1, %21.5 (CallTarget@0x5558d6b73b70[Call#7])
  prom-           %23.3 = MkArg                    unboundValue, possibleExtends[0x5558db33a020]_p13, e1.6
  val?            %23.4 = StaticCall         !v    .identC[0x5558d56351d0](%23.3, "classRepresentation") e1.6   <lgl$->
  lgl$#-          %23.5 = IsType                   %23.4 isA lgl$-
  cp              %23.6 = Checkpoint                -> BB25 (default) | BB24 (if assume failed)
BB22   <- [21]
  fs              %22.0 = FrameState         R     0x5558d6b91b10+364: [], env=e1.6
  void                    Deopt              !v    %22.0   !
BB25   <- [23]
  void                    Assume             D     %23.5, %23.6 (Typecheck@0x5558d6b73b70[Type#26])
  lgl$-           %25.1 = CastType           d     dn %23.4
  lgl$-           %25.2 = Not                d     %25.1, elided
  lgl$-           %25.3 = AsLogical                %25.2
  lgl$#-          %25.4 = Identical                %25.3, false
  void                    Branch                   %25.4 -> BB27 (if true) | BB26 (if false)
BB24   <- [23]
  fs              %24.0 = FrameState         R     0x5558d6b91b10+401: [%23.4], env=e1.6
  void                    Deopt              !v    %24.0   !
BB27   <- [25]
  lgl$#-          %27.0 = CheckTrueFalse     e     %25.3
  void                    Branch                   %27.0 -> BB52 (if true) | BB28 (if false)
BB26   <- [25]
  (cls|spec|blt)  %26.0 = LdFun              !v    isClassUnion, e1.6
  fs              %26.1 = FrameState         R     0x5558d6b91b10+419: [%25.3, %26.0], env=e1.6
  void                    Deopt              !v    %26.1, DeadCall@0x5558d6b73b70[Call#9], %26.0   !
BB52   <- [27]
  val?^ | miss    %52.0 = LdVar              eR    any, e1.6
  lgl$#-          %52.1 = Identical                <blt any>, %52.0   <@?>
  void                    Branch                   %52.1 -> BB54 (if true) | BB53 (if false)
BB28   <- [27]
  val?^ | miss    %28.0 = LdVar              eR    match, e1.6
  lgl$#-          %28.1 = Identical                %28.0, function(x, table, nomatch=NA, incomparables=N|...
  void                    Assume             D     %28.1, %23.6 (CallTarget@0x5558d6b73b70[Call#10])
  val?^ | miss    %28.3 = LdVar              eR    class1, e1.6
  val?            %28.4 = Force!<wrapped>    !v    %28.3, e1.6   <str$+>
  cp              %28.5 = Checkpoint                -> BB30 (default) | BB29 (if assume failed)
BB54   <- [52]
  (cls|spec|blt)  %54.0 = LdFun              !v    %in%, e1.6
  fs              %54.1 = FrameState         R     0x5558d6b91b10+961: [<blt any>, %54.0], env=e1.6
  void                    Deopt              !v    %54.1, DeadCall@0x5558d6b73b70[Call#20], %54.0   !
BB53   <- [52]
  (cls|spec|blt)  %53.0 = LdFun              !v    any, e1.6
  fs              %53.1 = FrameState         R     0x5558d6b91b10+924: [%53.0], env=e1.6
  void                    Deopt              !v    %53.1, DeadCall@0x5558d6b73b70[Call#15], %53.0   !
BB30   <- [28]
  val?^ | miss    %30.0 = LdVar              eR    names, e1.6
  lgl$#-          %30.1 = Identical                %30.0, <blt names>
  void                    Assume             D     %30.1, %28.5 (CallTarget@0x5558d6b73b70[Call#11])
  val?^ | miss    %30.3 = LdVar              eR    subs, e1.6
  val?            %30.4 = Force!<value>      !v    %30.3, e1.6   <vec$+>
  val?            %30.5 = CallBuiltin        !v    names(%30.4) e1.6   <str$->
  lgl$#-          %30.6 = IsType                   %30.5 isA val?+
  cp              %30.7 = Checkpoint                -> BB32 (default) | BB31 (if assume failed)
BB29   <- [28]
  prom-           %29.0 = MkArg                    %28.4, possibleExtends[0x5558db33a020]_p15 (!refl), e1.6
  val?~           %29.1 = CastType                 up %29.0
  prom-           %29.2 = MkArg                    unboundValue, possibleExtends[0x5558db33a020]_p16, e1.6
  val?^           %29.3 = CastType                 up %29.2
  fs              %29.4 = FrameState         R     0x5558d6b91b10+496: [], env=e1.6
  env             e29.5 = (MkEnv)            l     x=%29.1, table=%29.3, nomatch(miss)=NA, incomparables(miss)=nil, parent=R_BaseNamespace, context 0
  fs              %29.6 = FrameState         R     0x5558d3ebad70+9: [%28.4], env=e29.5, next=%29.4
  void                    Deopt              !v    %29.6   !
BB32   <- [30]
  lgl$#-          %32.0 = IsType                   %28.4 isA val?+
  void                    Assume             D     %32.0, %30.7 (Typecheck@0x5558d3692b30[Type#0])
  val?+           %32.2 = CastType           d     dn %28.4   <str$+>
  void                    Assume             D     %30.6, %30.7 (Typecheck@0x5558d3692b30[Type#1])
  val?+           %32.4 = CastType           d     dn %30.5   <str$->
  val+            %32.5 = CallSafeBuiltin    wed   match(%32.2, %32.4, NA, nil)    <int$->
  lgl$#-          %32.6 = IsType                   %32.5 isA int$-
  cp              %32.7 = Checkpoint                -> BB34 (default) | BB33 (if assume failed)
BB31   <- [30]
  prom-           %31.0 = MkArg                    %30.5, possibleExtends[0x5558db33a020]_p16 (!refl), e1.6
  val?~           %31.1 = CastType                 up %31.0
  prom-           %31.2 = MkArg                    %28.4, possibleExtends[0x5558db33a020]_p15 (!refl), e1.6
  val?~           %31.3 = CastType                 up %31.2
  fs              %31.4 = FrameState         R     0x5558d6b91b10+496: [], env=e1.6
  env             e31.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%31.1, x=%31.3, parent=R_BaseNamespace, context 0
  fs              %31.6 = FrameState         R     0x5558d3ebad70+23: [%28.4, %30.5], env=e31.5, next=%31.4
  void                    Deopt              !v    %31.6   !
BB34   <- [32]
  void                    Assume             D     %32.6, %32.7 (Typecheck@0x5558d6b73b70[Type#32])
  int$-           %34.1 = CastType           d     dn %32.5
  void                    StVar              lW    i, %34.1, e1.6
  cp              %34.3 = Checkpoint                -> BB36 (default) | BB35 (if assume failed)
BB33   <- [32]
  prom-           %33.0 = MkArg                    %32.4, possibleExtends[0x5558db33a020]_p16 (!refl), e1.6
  val?~           %33.1 = CastType                 up %33.0
  prom-           %33.2 = MkArg                    %32.2, possibleExtends[0x5558db33a020]_p15 (!refl), e1.6
  val?~           %33.3 = CastType                 up %33.2
  fs              %33.4 = FrameState         R     0x5558d6b91b10+496: [], env=e1.6
  env             e33.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%33.1, x=%33.3, parent=R_BaseNamespace, context 0
  fs              %33.6 = FrameState         R     0x5558d3ebad70+69: [%32.5], env=e33.5, next=%33.4
  void                    Deopt              !v    %33.6   !
BB36   <- [34]
  val?^ | miss    %36.0 = LdVar              eR    is.na, e1.6
  lgl$#-          %36.1 = Identical                <blt is.na>, %36.0   <true>
  void                    Assume             D     %36.1, %34.3 (DeadBranchReached@0x5558d6b73b70[Test#3])
  lgl$-           %36.3 = CallSafeBuiltin    wed   is.na(%34.1)    <lgl$->
  lgl$-           %36.4 = Not                d     %36.3, elided
  int-            %36.5 = Extract1_1D        wed   %34.1, %36.4, elided   <int->
  void                    StVar              lW    i, %36.5, e1.6
  cp              %36.7 = Checkpoint                -> BB38 (default) | BB37 (if assume failed)
BB35   <- [34]
  fs              %35.0 = FrameState         R     0x5558d6b91b10+510: [], env=e1.6
  void                    Deopt              !v    %35.0   !
BB38   <- [36]
  val?^ | miss    %38.0 = LdVar              eR    length, e1.6
  lgl$#-          %38.1 = Identical                <blt length>, %38.0   <true>
  void                    Assume             D     %38.1, %36.7 (DeadBranchReached@0x5558d6b73b70[Test#4])
  (int|real)$-    %38.3 = CallSafeBuiltin    wed   length(%36.5)    <int$->
  lgl$#-          %38.4 = IsType                   %38.3 isA int$-
  cp              %38.5 = Checkpoint                -> BB40 (default) | BB39 (if assume failed)
BB37   <- [36]
  fs              %37.0 = FrameState         R     0x5558d6b91b10+668: [], env=e1.6
  void                    Deopt              !v    %37.0   !
BB40   <- [38]
  void                    Assume             D     %38.4, %38.5 (Typecheck@0x5558d6b73b70[Type#42])
  int$-           %40.1 = CastType           d     dn %38.3
  lgl$#-          %40.2 = CheckTrueFalse     e     %40.1
  void                    Branch                   %40.2 -> BB46 (if true) | BB41 (if false)
BB39   <- [38]
  fs              %39.0 = FrameState         R     0x5558d6b91b10+759: [%38.3], env=e1.6
  void                    Deopt              !v    %39.0   !
BB46   <- [40]
  val?^ | miss    %46.0 = LdVar              eR    subs, e1.6
  val?            %46.1 = Force!             !v    %46.0, e1.6   <val?_>
  lgl$#-          %46.2 = IsType                   %46.1 isA val+   <@?>
  void                    Branch                   %46.2 -> BB49 (if true) | BB47 (if false)
BB41   <- [40]
  void                    Visible            v     
  goto BB42
BB49   <- [46]
  val?^ | miss    %49.0 = LdVar              eR    i, e1.6
  val?            %49.1 = Force!             !v    %49.0, e1.6   <val?_>
  lgl$#-          %49.2 = IsType                   %49.1 isA val?+
  cp              %49.3 = Checkpoint                -> BB51 (default) | BB50 (if assume failed)
BB47   <- [46]
  prom-           %47.0 = MkArg                    unboundValue, possibleExtends[0x5558db33a020]_p18, e1.6
  goto BB48
BB42   <- [41, 48]
  val?            %42.0 = Phi                      false:BB41, %48.1:BB48
  goto BB43
BB51   <- [49]
  void                    Assume             D     %49.2, %49.3 (Typecheck@0x5558d6b73b70[Type#46])
  val?+           %51.1 = CastType           d     dn %49.1   <val?_>
  val?            %51.2 = Extract1_1D        wed   %51.1, 1L, elided   <val?_>
  goto BB48
BB50   <- [49]
  fs              %50.0 = FrameState         R     0x5558d6b91b10+835: [%46.1, %49.1], env=e1.6
  void                    Deopt              !v    %50.0   !
BB48   <- [47, 51]
  val?            %48.0 = Phi                      %51.2:BB51, %47.0:BB47
  val?            %48.1 = Extract2_1D        !v    %46.1, %48.0, e1.6   <val?_>
  void                    Visible            v     
  goto BB42
Prom 0:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     getClassDef, <0x5558d452ecd0>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, possibleExtends[0x5558db33a020]_p1, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <other>
  void                    Return             l     %1.3
Prom 1:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    class1, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <str$+>
  void                    Return             l     %1.3
Prom 2:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     getClassDef, e1.0
  prom-           %1.2  = MkArg                    unboundValue, possibleExtends[0x5558db33a020]_p3, e1.0
  prom-           %1.3  = MkArg                    unboundValue, possibleExtends[0x5558db33a020]_p4, e1.0
  val?            %1.4  = NamedCall          !     %1.1(%1.2, where=%1.3) e1.0   <val?_>
  void                    Return             l     %1.4
Prom 3:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    class2, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 4:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     .classEnv, e1.0
  prom-           %1.2  = MkArg                    unboundValue, possibleExtends[0x5558db33a020]_p5, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <val?_>
  void                    Return             l     %1.3
Prom 5:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    ClassDef1, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 6:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    class1, e1.0
  val?            %1.2  = Force<lazy>        !v    %1.1, e1.0   <str$+>
  val?            %1.3  = Extract2_1D        !v    %1.2, 1L, e1.0   <str$->
  void                    Visible            v     
  void                    Return             l     %1.3
Prom 7:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    class2, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <str$+>
  void                    Return             l     %1.3
Prom 8:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    class2, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <str$+>
  void                    Return             l     %1.3
Prom 9:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    ClassDef1, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 10:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    contains, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 11:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    ClassDef2, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 12:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    subclasses, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 13:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     class, <0x5558d3385748>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, possibleExtends[0x5558db33a020]_p14, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <str$+>
  void                    Return             l     %1.3
Prom 14:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    ClassDef2, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <other>
  void                    Return             l     %1.3
Prom 15:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    class1, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <str$+>
  void                    Return             l     %1.3
Prom 16:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     names, <0x5558d3385470>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, possibleExtends[0x5558db33a020]_p17, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <str$->
  void                    Return             l     %1.3
Prom 17:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    subs, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <vec$+>
  void                    Return             l     %1.3
Prom 18:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    i, e1.0
  val?            %1.2  = Force              !v    %1.1, e1.0   <val?_>
  val?            %1.3  = Extract1_1D        !v    %1.2, 1L, e1.0   <val?_>
  void                    Visible            v     
  void                    Return             l     %1.3

│ possibleExtends[0x5558db33a020]                                              │
└──────────────────────────────────────────────────────────────────────────────┘
