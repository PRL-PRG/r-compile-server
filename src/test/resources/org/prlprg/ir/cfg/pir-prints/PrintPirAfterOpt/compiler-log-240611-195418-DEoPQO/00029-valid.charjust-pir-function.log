
┌──────────────────────────────────────────────────────────────────────────────┐
│ valid.charjust[0x55c18db0fca0]                                               │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;NonRefl0,!Obj0                       │
│ Properties:                                                                  │
├────── PIR Version After Optimizations
valid.charjust[0x55c18db0fca0]
BB0
  goto BB1
BB1   <- [0]
  val?^           %1.0  = LdArg                    0
  val?^ | miss    %1.1  = LdVar              eR    length, <env 0x55c18d083160>
  lgl$#-          %1.2  = Identical                <blt length>, %1.1   <true>
  cp              %1.3  = Checkpoint                -> BB2 (default) | BB89 (if assume failed)
BB2   <- [1]
  void                    Assume             D     %1.2, %1.3 (DeadBranchReached@0x55c18d8fc498[Test#0])
  env             e2.1  = MkEnv              l     just=%1.0, parent=<env 0x55c18d083160>, context 1
  val+            %2.2  = Force!<lazy>       !vr   %1.0,    <str->
  (int|real)$-    %2.3  = CallSafeBuiltin    wed   length(%2.2)    <int$->
  lgl$#-          %2.4  = IsType                   %2.3 isA int$-
  cp              %2.5  = Checkpoint                -> BB4 (default) | BB3 (if assume failed)
BB89   <- [1]
  env             e89.0 = (MkEnv)            l     just=%1.0, parent=<env 0x55c18d083160>, context 1
  fs              %89.1 = FrameState         R     0x55c18d42ae40+17: [<blt length>, %1.2], env=e89.0
  void                    Deopt              !v    %89.1
BB4   <- [2]
  void                    Assume             D     %2.4, %2.5 (Typecheck@0x55c18d8fc498[Type#2])
  int$-           %4.1  = CastType           d     dn %2.3
  lgl$-           %4.2  = Eq                 d     %4.1, 1, elided   <lgl$->
  lgl$#-          %4.3  = CheckTrueFalse     e     %4.2
  void                    Branch                   %4.3 -> BB78 (if true) | BB5 (if false)
BB3   <- [2]
  fs              %3.0  = FrameState         R     0x55c18d42ae40+91: [%2.3], env=e2.1
  void                    Deopt              !v    %3.0
BB78   <- [4]
  val?^ | miss    %78.0 = LdVar              eR    as.integer, <env 0x55c18d083160>
  lgl$#-          %78.1 = Identical                <blt as.integer>, %78.0   <true>
  void                    Assume             D     %78.1, %2.5 (DeadBranchReached@0x55c18d8fc498[Test#11])
  val?^ | miss    %78.3 = LdVar              eR    match, <env 0x55c18d083160>
  lgl$#-          %78.4 = Identical                %78.3, function(x, table, nomatch=NA, incomparables=N|...
  void                    Assume             D     %78.4, %2.5 (CallTarget@0x55c18d8fc498[Call#22])
  lgl$#-          %78.6 = IsType                   %2.2 isA val?-
  void                    Assume             D     %78.6, %2.5 (Typecheck@0x55c18d8fc498[Type#48])
  val-            %78.8 = CastType           d     dn %2.2   <str$->
  val?            %78.9 = Extract1_1D        wed   %78.8, 1L, elided   <str$->
  (cls|spec|blt)  %78.10 = LdFun              !v    c, <0x55c18aee5940>, <env 0x55c18d083160>
  val?            %78.11 = Call               !v    %78.10("left", "right", "bottom", "top", "centre", "center") e2.1   <str->
  lgl$#-          %78.12 = IsType                   %78.11 isA val?-
  lgl$#-          %78.13 = IsType                   %78.9 isA val?+
  cp              %78.14 = Checkpoint                -> BB80 (default) | BB79 (if assume failed)
BB5   <- [4]
  lgl$#-          %5.0  = IsType                   %2.2 isA val?-
  void                    Assume             D     %5.0, %2.5 (Typecheck@0x55c18d8fc498[Type#5])
  val-            %5.2  = CastType           d     dn %2.2   <str->
  (int|real)$-    %5.3  = CallSafeBuiltin    wed   length(%5.2)    <int$->
  lgl$#-          %5.4  = IsType                   %5.3 isA int$-
  cp              %5.5  = Checkpoint                -> BB7 (default) | BB6 (if assume failed)
BB80   <- [78]
  void                    Assume             D     %78.13, %78.14 (Typecheck@0x55c18b1f2b30[Type#0])
  val?+           %80.1 = CastType           d     dn %78.9   <str$->
  void                    Assume             D     %78.12, %78.14 (Typecheck@0x55c18b1f2b30[Type#1])
  val?-           %80.3 = CastType           d     dn %78.11   <str->
  val+            %80.4 = CallSafeBuiltin    wed   match(%80.1, %80.3, NA, nil)    <int$->
  lgl$#-          %80.5 = IsType                   %80.4 isA int$-
  cp              %80.6 = Checkpoint                -> BB82 (default) | BB81 (if assume failed)
BB79   <- [78]
  prom-           %79.0 = MkArg                    %78.11, valid.charjust[0x55c18db0fca0]_p9 (!refl), e2.1
  val?~           %79.1 = CastType                 up %79.0
  prom-           %79.2 = MkArg                    %78.9, valid.charjust[0x55c18db0fca0]_p8 (!refl), e2.1
  val?~           %79.3 = CastType                 up %79.2
  fs              %79.4 = FrameState         R     0x55c18d42ae40+970: [<blt as.integer>], env=e2.1
  env             e79.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%79.1, x=%79.3, parent=R_BaseNamespace, context 0
  fs              %79.6 = FrameState         R     0x55c18ba1ad70+23: [%78.9, %78.11], env=e79.5, next=%79.4
  void                    Deopt              !v    %79.6   !
BB7   <- [5]
  void                    Assume             D     %5.4, %5.5 (Typecheck@0x55c18d8fc498[Type#6])
  int$-           %7.1  = CastType           d     dn %5.3
  lgl$-           %7.2  = Gt                 d     %7.1, 1, elided   <lgl$->
  lgl$#-          %7.3  = CheckTrueFalse     e     %7.2
  void                    Branch                   %7.3 -> BB45 (if true) | BB8 (if false)
BB6   <- [5]
  fs              %6.0  = FrameState         R     0x55c18d42ae40+205: [%5.3], env=e2.1
  void                    Deopt              !v    %6.0
BB82   <- [80]
  void                    Assume             D     %80.5, %80.6 (Typecheck@0x55c18d8fc498[Type#51])
  int$-           %82.1 = CastType           d     dn %80.4
  real$-          %82.2 = Sub                d     %82.1, 1, elided   <real$->
  int$-           %82.3 = CallSafeBuiltin    wed   as.integer(%82.2)    <int$->
  void                    StVar              lW    just, %82.3, e2.1
  cp              %82.5 = Checkpoint                -> BB84 (default) | BB83 (if assume failed)
BB81   <- [80]
  prom-           %81.0 = MkArg                    %80.3, valid.charjust[0x55c18db0fca0]_p9 (!refl), e2.1
  val?~           %81.1 = CastType                 up %81.0
  prom-           %81.2 = MkArg                    %80.1, valid.charjust[0x55c18db0fca0]_p8 (!refl), e2.1
  val?~           %81.3 = CastType                 up %81.2
  fs              %81.4 = FrameState         R     0x55c18d42ae40+970: [<blt as.integer>], env=e2.1
  env             e81.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%81.1, x=%81.3, parent=R_BaseNamespace, context 0
  fs              %81.6 = FrameState         R     0x55c18ba1ad70+69: [%80.4], env=e81.5, next=%81.4
  void                    Deopt              !v    %81.6   !
BB45   <- [7]
  val?^ | miss    %45.0 = LdVar              eR    as.integer, <env 0x55c18d083160>
  lgl$#-          %45.1 = Identical                <blt as.integer>, %45.0   <true>
  void                    Assume             D     %45.1, %5.5 (DeadBranchReached@0x55c18d8fc498[Test#2])
  val?^ | miss    %45.3 = LdVar              eR    match, <env 0x55c18d083160>
  lgl$#-          %45.4 = Identical                %45.3, function(x, table, nomatch=NA, incomparables=N|...
  void                    Assume             D     %45.4, %5.5 (CallTarget@0x55c18d8fc498[Call#5])
  val?            %45.6 = Extract1_1D        wed   %5.2, 1L, elided   <str$->
  cp              %45.7 = Checkpoint                -> BB47 (default) | BB46 (if assume failed)
BB8   <- [7]
  goto BB9
BB84   <- [82]
  val?^ | miss    %84.0 = LdVar              eR    anyNA, e2.1
  lgl$#-          %84.1 = Identical                <blt anyNA>, %84.0   <true>
  void                    Assume             D     %84.1, %82.5 (DeadBranchReached@0x55c18d8fc498[Test#14])
  val+            %84.3 = CallSafeBuiltin    wed   anyNA(%82.3)    <lgl$->
  lgl$#-          %84.4 = IsType                   %84.3 isA lgl$-
  cp              %84.5 = Checkpoint                -> BB86 (default) | BB85 (if assume failed)
BB83   <- [82]
  fs              %83.0 = FrameState         R     0x55c18d42ae40+1018: [], env=e2.1
  void                    Deopt              !v    %83.0   !
BB47   <- [45]
  (cls|spec|blt)  %47.0 = LdFun              !v    c, <0x55c18aee5940>, <env 0x55c18d083160>
  lgl$#-          %47.1 = Identical                %47.0, <blt c>
  void                    Assume             D     %47.1, %45.7 (CallTarget@0x55c18d8fc498[Call#6])
  str-            %47.3 = CallSafeBuiltin    wed   c("left", "right", "bottom", "top", "centre", "center")    <str->
  cp              %47.4 = Checkpoint                -> BB49 (default) | BB48 (if assume failed)
BB46   <- [45]
  prom-           %46.0 = MkArg                    %45.6, valid.charjust[0x55c18db0fca0]_p0 (!refl), e2.1
  val?~           %46.1 = CastType                 up %46.0
  prom-           %46.2 = MkArg                    unboundValue, valid.charjust[0x55c18db0fca0]_p1, e2.1
  val?^           %46.3 = CastType                 up %46.2
  fs              %46.4 = FrameState         R     0x55c18d42ae40+341: [<blt as.integer>], env=e2.1
  env             e46.5 = (MkEnv)            l     x=%46.1, table=%46.3, nomatch(miss)=NA, incomparables(miss)=nil, parent=R_BaseNamespace, context 0
  fs              %46.6 = FrameState         R     0x55c18ba1ad70+9: [%45.6], env=e46.5, next=%46.4
  void                    Deopt              !v    %46.6
BB9   <- [8, 75]
  val?^           %9.0  = Phi                      %75.2:BB75, %1.0:BB8
  goto BB10
BB86   <- [84]
  void                    Assume             D     %84.4, %84.5 (Typecheck@0x55c18d8fc498[Type#56])
  lgl$-           %86.1 = CastType           d     dn %84.3
  lgl$#-          %86.2 = CheckTrueFalse     e     %86.1
  void                    Branch                   %86.2 -> BB88 (if true) | BB87 (if false)
BB85   <- [84]
  fs              %85.0 = FrameState         R     0x55c18d42ae40+1109: [%84.3], env=e2.1
  void                    Deopt              !v    %85.0   !
BB49   <- [47]
  lgl$#-          %49.0 = IsType                   %45.6 isA val?+
  void                    Assume             D     %49.0, %47.4 (Typecheck@0x55c18b1f2b30[Type#0])
  val?+           %49.2 = CastType           d     dn %45.6   <str$->
  val+            %49.3 = CallSafeBuiltin    wed   match(%49.2, %47.3, NA, nil)    <int$->
  lgl$#-          %49.4 = IsType                   %49.3 isA int$-
  cp              %49.5 = Checkpoint                -> BB51 (default) | BB50 (if assume failed)
BB48   <- [47]
  prom-           %48.0 = MkArg                    %47.3, valid.charjust[0x55c18db0fca0]_p1 (!refl), e2.1
  val?~           %48.1 = CastType                 up %48.0
  prom-           %48.2 = MkArg                    %45.6, valid.charjust[0x55c18db0fca0]_p0 (!refl), e2.1
  val?~           %48.3 = CastType                 up %48.2
  fs              %48.4 = FrameState         R     0x55c18d42ae40+341: [<blt as.integer>], env=e2.1
  env             e48.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%48.1, x=%48.3, parent=R_BaseNamespace, context 0
  fs              %48.6 = FrameState         R     0x55c18ba1ad70+23: [%45.6, %47.3], env=e48.5, next=%48.4
  void                    Deopt              !v    %48.6
BB10   <- [87, 9]
  val?^           %10.0 = Phi                      %82.3:BB87, %9.0:BB9
  lgl$#-          %10.1 = IsType                   %10.0 isA int-
  cp              %10.2 = Checkpoint                -> BB12 (default) | BB11 (if assume failed)
BB88   <- [86]
  (cls|spec|blt)  %88.0 = LdFun              !v    stop, e2.1
  fs              %88.1 = FrameState         R     0x55c18d42ae40+1130: [%88.0], env=e2.1
  void                    Deopt              !v    %88.1, DeadCall@0x55c18d8fc498[Call#25], %88.0   !
BB87   <- [86]
  goto BB10
BB51   <- [49]
  void                    Assume             D     %49.4, %49.5 (Typecheck@0x55c18d8fc498[Type#16])
  int$-           %51.1 = CastType           d     dn %49.3
  real$-          %51.2 = Sub                d     %51.1, 1, elided   <real$->
  int$-           %51.3 = CallSafeBuiltin    wed   as.integer(%51.2)    <int$->
  val+            %51.4 = Force!<wrapped>    !vr   %1.0,    <str->
  lgl$#-          %51.5 = IsType                   %51.4 isA val?-
  cp              %51.6 = Checkpoint                -> BB53 (default) | BB52 (if assume failed)
BB50   <- [49]
  prom-           %50.0 = MkArg                    %47.3, valid.charjust[0x55c18db0fca0]_p1 (!refl), e2.1
  val?~           %50.1 = CastType                 up %50.0
  prom-           %50.2 = MkArg                    %49.2, valid.charjust[0x55c18db0fca0]_p0 (!refl), e2.1
  val?~           %50.3 = CastType                 up %50.2
  fs              %50.4 = FrameState         R     0x55c18d42ae40+341: [<blt as.integer>], env=e2.1
  env             e50.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%50.1, x=%50.3, parent=R_BaseNamespace, context 0
  fs              %50.6 = FrameState         R     0x55c18ba1ad70+69: [%49.3], env=e50.5, next=%50.4
  void                    Deopt              !v    %50.6
BB12   <- [10]
  val?^ | miss    %12.0 = LdVar              eR    length, e2.1
  lgl$#-          %12.1 = Identical                <blt length>, %12.0   <true>
  void                    Assume             D     %12.1, %10.2 (DeadBranchReached@0x55c18d8fc498[Test#15])
  void                    Assume             D     %10.1, %10.2 (Typecheck@0x55c18d8fc498[Type#58])
  int-            %12.4 = CastType           d     dn %10.0
  (int|real)$-    %12.5 = CallSafeBuiltin    wed   length(%12.4)    <int$->
  lgl$#-          %12.6 = IsType                   %12.5 isA int$-
  cp              %12.7 = Checkpoint                -> BB14 (default) | BB13 (if assume failed)
BB11   <- [10]
  fs              %11.0 = FrameState         R     0x55c18d42ae40+1158: [], env=e2.1
  void                    Deopt              !v    %11.0   !
BB53   <- [51]
  void                    Assume             D     %51.5, %51.6 (Typecheck@0x55c18d8fc498[Type#19])
  val-            %53.1 = CastType           d     dn %51.4   <str->
  val-            %53.2 = Subassign1_1D      wed   %51.3, %53.1, 1L, elided
  void                    StVar              lW    just, %53.2, e2.1
  cp              %53.4 = Checkpoint                -> BB55 (default) | BB54 (if assume failed)
BB52   <- [51]
  fs              %52.0 = FrameState         R     0x55c18d42ae40+389: [%51.3, %51.4], env=e2.1
  void                    Deopt              !v    %52.0
BB14   <- [12]
  void                    Assume             D     %12.6, %12.7 (Typecheck@0x55c18d8fc498[Type#59])
  int$-           %14.1 = CastType           d     dn %12.5
  lgl$-           %14.2 = Lt                 d     %14.1, 2, elided   <lgl$->
  lgl$#-          %14.3 = CheckTrueFalse     e     %14.2
  void                    Branch                   %14.3 -> BB39 (if true) | BB15 (if false)
BB13   <- [12]
  fs              %13.0 = FrameState         R     0x55c18d42ae40+1249: [%12.5], env=e2.1
  void                    Deopt              !v    %13.0   !
BB55   <- [53]
  val?^ | miss    %55.0 = LdVar              eR    %in%, e2.1
  lgl$#-          %55.1 = Identical                %55.0, function(x, table) <(rir::DispatchTable*)0x55c|...
  void                    Assume             D     %55.1, %53.4 (CallTarget@0x55c18d8fc498[Call#7])
  prom-           %55.3 = MkArg                    unboundValue, valid.charjust[0x55c18db0fca0]_p2, e2.1
  prom-           %55.4 = MkArg                    unboundValue, valid.charjust[0x55c18db0fca0]_p3, e2.1
  val?            %55.5 = StaticCall         !v    %in%[0x55c18d51be30](%55.3, %55.4) e2.1   <lgl$->
  lgl$#-          %55.6 = IsType                   %55.5 isA lgl$-
  cp              %55.7 = Checkpoint                -> BB57 (default) | BB56 (if assume failed)
BB54   <- [53]
  fs              %54.0 = FrameState         R     0x55c18d42ae40+410: [], env=e2.1
  void                    Deopt              !v    %54.0
BB39   <- [14]
  lgl$#-          %39.0 = IsType                   %12.4 isA int$-
  void                    Assume             D     %39.0, %12.7 (Typecheck@0x55c18d8fc498[Type#62])
  int$-           %39.2 = CastType           d     dn %12.4
  int$-           %39.3 = Extract1_1D        wed   %39.2, 1L, elided   <int$->
  cp              %39.4 = Checkpoint                -> BB41 (default) | BB40 (if assume failed)
BB15   <- [14]
  goto BB16
BB57   <- [55]
  void                    Assume             D     %55.6, %55.7 (Typecheck@0x55c18d8fc498[Type#23])
  lgl$-           %57.1 = CastType           d     dn %55.5
  lgl$-           %57.2 = Not                d     %57.1, elided
  lgl$#-          %57.3 = CheckTrueFalse     e     %57.2
  void                    Branch                   %57.3 -> BB77 (if true) | BB58 (if false)
BB56   <- [55]
  fs              %56.0 = FrameState         R     0x55c18d42ae40+447: [%55.5], env=e2.1
  void                    Deopt              !v    %56.0   !
BB41   <- [39]
  real$-          %41.0 = Add                d     %39.3, 1, elided   <real$->
  int$-           %41.1 = AsSwitchIdx              %41.0
  lgl$-           %41.2 = Eq                 d     %41.1, 1L, elided
  lgl$#-          %41.3 = CheckTrueFalse     e     %41.2
  void                    Branch                   %41.3 -> BB44 (if true) | BB42 (if false)
BB40   <- [39]
  fs              %40.0 = FrameState         R     0x55c18d42ae40+1443: [%39.3], env=e2.1
  void                    Deopt              !v    %40.0   !
BB16   <- [15, 43]
  (int|real)-     %16.0 = Phi                      %43.0:BB43, %12.4:BB15
  cp              %16.1 = Checkpoint                -> BB18 (default) | BB17 (if assume failed)
BB77   <- [57]
  (cls|spec|blt)  %77.0 = LdFun              !v    stop, e2.1
  fs              %77.1 = FrameState         R     0x55c18d42ae40+470: [%77.0], env=e2.1
  void                    Deopt              !v    %77.1, DeadCall@0x55c18d8fc498[Call#9], %77.0   !
BB58   <- [57]
  val?^ | miss    %58.0 = LdVar              eR    just !upd, e2.1
  val?            %58.1 = Force!             !v    %58.0, e2.1
  cp              %58.2 = Checkpoint                -> BB60 (default) | BB59 (if assume failed)
BB44   <- [41]
  val?^ | miss    %44.0 = LdVar              eR    c, e2.1
  lgl$#-          %44.1 = Identical                <blt c>, %44.0   <true>
  void                    Assume             D     %44.1, %39.4 (DeadBranchReached@0x55c18d8fc498[Test#28])
  real-           %44.3 = CallSafeBuiltin    wed   c(0, 4)    <real->
  goto BB43
BB42   <- [41]
  lgl$-           %42.0 = Eq                 d     %41.1, 2L, elided
  lgl$#-          %42.1 = CheckTrueFalse     e     %42.0   <false>
  void                    AssumeNot          D     %42.1, %39.4 (DeadBranchReached@0x55c18d8fc498[Test#23])
  lgl$-           %42.3 = Eq                 d     %41.1, 3L, elided
  lgl$#-          %42.4 = CheckTrueFalse     e     %42.3   <false>
  void                    AssumeNot          D     %42.4, %39.4 (DeadBranchReached@0x55c18d8fc498[Test#24])
  lgl$-           %42.6 = Eq                 d     %41.1, 4L, elided
  lgl$#-          %42.7 = CheckTrueFalse     e     %42.6   <false>
  void                    AssumeNot          D     %42.7, %39.4 (DeadBranchReached@0x55c18d8fc498[Test#25])
  lgl$-           %42.9 = Eq                 d     %41.1, 5L, elided
  lgl$#-          %42.10 = CheckTrueFalse     e     %42.9   <true>
  void                    Assume             D     %42.10, %39.4 (DeadBranchReached@0x55c18d8fc498[Test#26])
  val?^ | miss    %42.12 = LdVar              eR    c, e2.1
  lgl$#-          %42.13 = Identical                <blt c>, %42.12   <true>
  void                    Assume             D     %42.13, %39.4 (DeadBranchReached@0x55c18d8fc498[Test#32])
  real-           %42.15 = CallSafeBuiltin    wed   c(4, 4)    <real->
  goto BB43
BB18   <- [16]
  val?^ | miss    %18.0 = LdVar              eR    c, e2.1
  lgl$#-          %18.1 = Identical                <blt c>, %18.0   <true>
  void                    Assume             D     %18.1, %16.1 (DeadBranchReached@0x55c18d8fc498[Test#35])
  (int|real)$-    %18.3 = Extract1_1D        wed   %16.0, 1L, elided   <(int|real)$->
  cp              %18.4 = Checkpoint                -> BB20 (default) | BB19 (if assume failed)
BB17   <- [16]
  fs              %17.0 = FrameState         R     0x55c18d42ae40+2486: [], env=e2.1
  void                    Deopt              !v    %17.0   !
BB60   <- [58]
  val?^ | miss    %60.0 = LdVar              eR    as.integer, e2.1
  lgl$#-          %60.1 = Identical                <blt as.integer>, %60.0   <true>
  void                    Assume             D     %60.1, %58.2 (DeadBranchReached@0x55c18d8fc498[Test#6])
  val?^ | miss    %60.3 = LdVar              eR    match, e2.1
  lgl$#-          %60.4 = Identical                %60.3, function(x, table, nomatch=NA, incomparables=N|...
  void                    Assume             D     %60.4, %58.2 (CallTarget@0x55c18d8fc498[Call#13])
  val?^ | miss    %60.6 = LdVar              eR    just, e2.1
  val?            %60.7 = Force!<value>      !v    %60.6, e2.1   <str->
  lgl$#-          %60.8 = IsType                   %60.7 isA val?-
  cp              %60.9 = Checkpoint                -> BB62 (default) | BB61 (if assume failed)
BB59   <- [58]
  fs              %59.0 = FrameState         R     0x55c18d42ae40+507: [%58.1], env=e2.1
  void                    Deopt              !v    %59.0   !
BB43   <- [42, 44]
  real-           %43.0 = Phi                      %42.15:BB42, %44.3:BB44
  void                    StVar              lW    just, %43.0, e2.1
  goto BB16
BB20   <- [18]
  real$-          %20.0 = Add                d     %18.3, 1, elided   <real$->
  int$-           %20.1 = AsSwitchIdx              %20.0
  lgl$-           %20.2 = Eq                 d     %20.1, 1L, elided
  lgl$#-          %20.3 = CheckTrueFalse     e     %20.2
  void                    Branch                   %20.3 -> BB38 (if true) | BB21 (if false)
BB19   <- [18]
  fs              %19.0 = FrameState         R     0x55c18d42ae40+2603: [<blt c>, %18.3], env=e2.1
  void                    Deopt              !v    %19.0   !
BB62   <- [60]
  void                    Assume             D     %60.8, %60.9 (Typecheck@0x55c18d8fc498[Type#29])
  val?-           %62.1 = CastType           d     dn %60.7   <str->
  val?            %62.2 = Extract1_1D        wed   %62.1, 2L, elided   <str$->
  (cls|spec|blt)  %62.3 = LdFun              !v    c, <0x55c18aee5940>, e2.1
  val?            %62.4 = Call               !v    %62.3("left", "right", "bottom", "top", "centre", "center") e2.1   <str->
  lgl$#-          %62.5 = IsType                   %62.4 isA val?-
  lgl$#-          %62.6 = IsType                   %62.2 isA val?+
  cp              %62.7 = Checkpoint                -> BB64 (default) | BB63 (if assume failed)
BB61   <- [60]
  prom-           %61.0 = MkArg                    unboundValue, valid.charjust[0x55c18db0fca0]_p5, e2.1
  val?^           %61.1 = CastType                 up %61.0
  prom-           %61.2 = MkArg                    unboundValue, valid.charjust[0x55c18db0fca0]_p4, e2.1
  val?^           %61.3 = CastType                 up %61.2
  fs              %61.4 = FrameState         R     0x55c18d42ae40+606: [<blt as.integer>], env=e2.1
  env             e61.5 = (MkEnv)            l     x=%61.3, table=%61.1, nomatch(miss)=NA, incomparables(miss)=nil, parent=R_BaseNamespace, context 0
  fs              %61.6 = FrameState         R     0x55c18ba1ad70+9: [], env=e61.5, next=%61.4
  fs              %61.7 = FrameState         R     0x55c18d4ddaf0+5(pr): [%60.7], env=e2.1, next=%61.6
  void                    Deopt              !v    %61.7   !
BB38   <- [20]
  goto BB23
BB21   <- [20]
  lgl$-           %21.0 = Eq                 d     %20.1, 2L, elided
  lgl$#-          %21.1 = CheckTrueFalse     e     %21.0
  void                    Branch                   %21.1 -> BB37 (if true) | BB22 (if false)
BB64   <- [62]
  void                    Assume             D     %62.6, %62.7 (Typecheck@0x55c18b1f2b30[Type#0])
  val?+           %64.1 = CastType           d     dn %62.2   <str$->
  void                    Assume             D     %62.5, %62.7 (Typecheck@0x55c18b1f2b30[Type#1])
  val?-           %64.3 = CastType           d     dn %62.4   <str->
  val+            %64.4 = CallSafeBuiltin    wed   match(%64.1, %64.3, NA, nil)    <int$->
  lgl$#-          %64.5 = IsType                   %64.4 isA int$-
  cp              %64.6 = Checkpoint                -> BB66 (default) | BB65 (if assume failed)
BB63   <- [62]
  prom-           %63.0 = MkArg                    %62.4, valid.charjust[0x55c18db0fca0]_p5 (!refl), e2.1
  val?~           %63.1 = CastType                 up %63.0
  prom-           %63.2 = MkArg                    %62.2, valid.charjust[0x55c18db0fca0]_p4 (!refl), e2.1
  val?~           %63.3 = CastType                 up %63.2
  fs              %63.4 = FrameState         R     0x55c18d42ae40+606: [<blt as.integer>], env=e2.1
  env             e63.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%63.1, x=%63.3, parent=R_BaseNamespace, context 0
  fs              %63.6 = FrameState         R     0x55c18ba1ad70+23: [%62.2, %62.4], env=e63.5, next=%63.4
  void                    Deopt              !v    %63.6   !
BB23   <- [37, 38, 22]
  real$#-         %23.0 = Phi                      0.5:BB22, 1:BB37, 0:BB38
  (int|real)$-    %23.1 = Extract1_1D        wed   %16.0, 2L, elided   <(int|real)$->
  cp              %23.2 = Checkpoint                -> BB25 (default) | BB24 (if assume failed)
BB37   <- [21]
  goto BB23
BB22   <- [21]
  lgl$-           %22.0 = Eq                 d     %20.1, 3L, elided
  lgl$#-          %22.1 = CheckTrueFalse     e     %22.0   <false>
  void                    AssumeNot          D     %22.1, %18.4 (DeadBranchReached@0x55c18d8fc498[Test#65])
  lgl$-           %22.3 = Eq                 d     %20.1, 4L, elided
  lgl$#-          %22.4 = CheckTrueFalse     e     %22.3   <false>
  void                    AssumeNot          D     %22.4, %18.4 (DeadBranchReached@0x55c18d8fc498[Test#66])
  lgl$-           %22.6 = Eq                 d     %20.1, 5L, elided
  lgl$#-          %22.7 = CheckTrueFalse     e     %22.6   <true>
  void                    Assume             D     %22.7, %18.4 (DeadBranchReached@0x55c18d8fc498[Test#67])
  goto BB23
BB66   <- [64]
  void                    Assume             D     %64.5, %64.6 (Typecheck@0x55c18d8fc498[Type#32])
  int$-           %66.1 = CastType           d     dn %64.4
  real$-          %66.2 = Sub                d     %66.1, 1, elided   <real$->
  int$-           %66.3 = CallSafeBuiltin    wed   as.integer(%66.2)    <int$->
  val?^ | miss    %66.4 = LdVar              eR    just !upd, e2.1
  val?            %66.5 = Force!<value>      !v    %66.4, e2.1   <str->
  lgl$#-          %66.6 = IsType                   %66.5 isA val?-
  cp              %66.7 = Checkpoint                -> BB68 (default) | BB67 (if assume failed)
BB65   <- [64]
  prom-           %65.0 = MkArg                    %64.3, valid.charjust[0x55c18db0fca0]_p5 (!refl), e2.1
  val?~           %65.1 = CastType                 up %65.0
  prom-           %65.2 = MkArg                    %64.1, valid.charjust[0x55c18db0fca0]_p4 (!refl), e2.1
  val?~           %65.3 = CastType                 up %65.2
  fs              %65.4 = FrameState         R     0x55c18d42ae40+606: [<blt as.integer>], env=e2.1
  env             e65.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%65.1, x=%65.3, parent=R_BaseNamespace, context 0
  fs              %65.6 = FrameState         R     0x55c18ba1ad70+69: [%64.4], env=e65.5, next=%65.4
  void                    Deopt              !v    %65.6   !
BB25   <- [23]
  real$-          %25.0 = Add                d     %23.1, 1, elided   <real$->
  int$-           %25.1 = AsSwitchIdx              %25.0
  lgl$-           %25.2 = Eq                 d     %25.1, 1L, elided
  lgl$#-          %25.3 = CheckTrueFalse     e     %25.2   <false>
  void                    AssumeNot          D     %25.3, %23.2 (DeadBranchReached@0x55c18d8fc498[Test#74])
  lgl$-           %25.5 = Eq                 d     %25.1, 2L, elided
  lgl$#-          %25.6 = CheckTrueFalse     e     %25.5   <false>
  void                    AssumeNot          D     %25.6, %23.2 (DeadBranchReached@0x55c18d8fc498[Test#75])
  lgl$-           %25.8 = Eq                 d     %25.1, 3L, elided
  lgl$#-          %25.9 = CheckTrueFalse     e     %25.8
  void                    Branch                   %25.9 -> BB36 (if true) | BB26 (if false)
BB24   <- [23]
  fs              %24.0 = FrameState         R     0x55c18d42ae40+3018: [<blt c>, %23.0, %23.1], env=e2.1
  void                    Deopt              !v    %24.0   !
BB68   <- [66]
  void                    Assume             D     %66.6, %66.7 (Typecheck@0x55c18d8fc498[Type#35])
  val?-           %68.1 = CastType           d     dn %66.5   <str->
  val?-           %68.2 = Subassign1_1D      wed   %66.3, %68.1, 2L, elided
  void                    StVar              lW    just, %68.2, e2.1
  cp              %68.4 = Checkpoint                -> BB70 (default) | BB69 (if assume failed)
BB67   <- [66]
  fs              %67.0 = FrameState         R     0x55c18d42ae40+654: [%66.3, %66.5], env=e2.1
  void                    Deopt              !v    %67.0   !
BB36   <- [25]
  goto BB28
BB26   <- [25]
  lgl$-           %26.0 = Eq                 d     %25.1, 4L, elided
  lgl$#-          %26.1 = CheckTrueFalse     e     %26.0
  void                    Branch                   %26.1 -> BB35 (if true) | BB27 (if false)
BB70   <- [68]
  val?^ | miss    %70.0 = LdVar              eR    %in%, e2.1
  lgl$#-          %70.1 = Identical                %70.0, function(x, table) <(rir::DispatchTable*)0x55c|...
  void                    Assume             D     %70.1, %68.4 (CallTarget@0x55c18d8fc498[Call#15])
  prom-           %70.3 = MkArg                    unboundValue, valid.charjust[0x55c18db0fca0]_p6, e2.1
  prom-           %70.4 = MkArg                    unboundValue, valid.charjust[0x55c18db0fca0]_p7, e2.1
  val?            %70.5 = StaticCall         !v    %in%[0x55c18d51be30](%70.3, %70.4) e2.1   <lgl$->
  lgl$#-          %70.6 = IsType                   %70.5 isA lgl$-
  cp              %70.7 = Checkpoint                -> BB72 (default) | BB71 (if assume failed)
BB69   <- [68]
  fs              %69.0 = FrameState         R     0x55c18d42ae40+675: [], env=e2.1
  void                    Deopt              !v    %69.0   !
BB28   <- [35, 36, 27]
  real$#-         %28.0 = Phi                      0.5:BB27, 1:BB35, 0:BB36
  real-           %28.1 = CallSafeBuiltin    wed   c(%23.0, %28.0)    <real->
  void                    StVar              lW    just, %28.1, e2.1
  cp              %28.3 = Checkpoint                -> BB30 (default) | BB29 (if assume failed)
BB35   <- [26]
  goto BB28
BB27   <- [26]
  lgl$-           %27.0 = Eq                 d     %25.1, 5L, elided
  lgl$#-          %27.1 = CheckTrueFalse     e     %27.0   <true>
  void                    Assume             D     %27.1, %23.2 (DeadBranchReached@0x55c18d8fc498[Test#78])
  goto BB28
BB72   <- [70]
  void                    Assume             D     %70.6, %70.7 (Typecheck@0x55c18d8fc498[Type#39])
  lgl$-           %72.1 = CastType           d     dn %70.5
  lgl$-           %72.2 = Not                d     %72.1, elided
  lgl$#-          %72.3 = CheckTrueFalse     e     %72.2
  void                    Branch                   %72.3 -> BB76 (if true) | BB73 (if false)
BB71   <- [70]
  fs              %71.0 = FrameState         R     0x55c18d42ae40+712: [%70.5], env=e2.1
  void                    Deopt              !v    %71.0   !
BB30   <- [28]
  val?^ | miss    %30.0 = LdVar              eR    anyNA, e2.1
  lgl$#-          %30.1 = Identical                <blt anyNA>, %30.0   <true>
  void                    Assume             D     %30.1, %28.3 (DeadBranchReached@0x55c18d8fc498[Test#80])
  val+            %30.3 = CallSafeBuiltin    wed   anyNA(%28.1)    <lgl$->
  lgl$#-          %30.4 = IsType                   %30.3 isA lgl$-
  cp              %30.5 = Checkpoint                -> BB32 (default) | BB31 (if assume failed)
BB29   <- [28]
  fs              %29.0 = FrameState         R     0x55c18d42ae40+3412: [], env=e2.1
  void                    Deopt              !v    %29.0   !
BB76   <- [72]
  (cls|spec|blt)  %76.0 = LdFun              !v    stop, e2.1
  fs              %76.1 = FrameState         R     0x55c18d42ae40+735: [%76.0], env=e2.1
  void                    Deopt              !v    %76.1, DeadCall@0x55c18d8fc498[Call#17], %76.0   !
BB73   <- [72]
  val?^ | miss    %73.0 = LdVar              eR    as.integer, e2.1
  lgl$#-          %73.1 = Identical                <blt as.integer>, %73.0   <true>
  void                    Assume             D     %73.1, %70.7 (DeadBranchReached@0x55c18d8fc498[Test#10])
  val?^ | miss    %73.3 = LdVar              eR    just, e2.1
  val?            %73.4 = Force!<value>      !v    %73.3, e2.1   <str->
  lgl$#-          %73.5 = IsType                   %73.4 isA val?-
  cp              %73.6 = Checkpoint                -> BB75 (default) | BB74 (if assume failed)
BB32   <- [30]
  void                    Assume             D     %30.4, %30.5 (Typecheck@0x55c18d8fc498[Type#90])
  lgl$-           %32.1 = CastType           d     dn %30.3
  lgl$#-          %32.2 = CheckTrueFalse     e     %32.1
  void                    Branch                   %32.2 -> BB34 (if true) | BB33 (if false)
BB31   <- [30]
  fs              %31.0 = FrameState         R     0x55c18d42ae40+3503: [%30.3], env=e2.1
  void                    Deopt              !v    %31.0   !
BB75   <- [73]
  void                    Assume             D     %73.5, %73.6 (Typecheck@0x55c18d8fc498[Type#41])
  val?-           %75.1 = CastType           d     dn %73.4   <str->
  int-            %75.2 = CallSafeBuiltin    wed   as.integer(%75.1)    <int->
  void                    StVar              lW    just, %75.2, e2.1
  goto BB9
BB74   <- [73]
  fs              %74.0 = FrameState         R     0x55c18d42ae40+832: [<blt as.integer>, %73.4], env=e2.1
  void                    Deopt              !v    %74.0   !
BB34   <- [32]
  (cls|spec|blt)  %34.0 = LdFun              !v    stop, e2.1
  fs              %34.1 = FrameState         R     0x55c18d42ae40+3524: [%34.0], env=e2.1
  void                    Deopt              !v    %34.1, DeadCall@0x55c18d8fc498[Call#37], %34.0   !
BB33   <- [32]
  void                    Visible            v     
  void                    Return             l     %28.1
Prom 0:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    just, e1.0
  val?            %1.2  = Force<wrapped>     !v    %1.1, e1.0   <str->
  val?            %1.3  = Extract1_1D        !v    %1.2, 1L, e1.0   <str$->
  void                    Visible            v     
  void                    Return             l     %1.3
Prom 1:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     c, <0x55c18aee5940>, e1.0
  val?            %1.2  = Call               !     %1.1("left", "right", "bottom", "top", "centre", "center") e1.0   <str->
  void                    Return             l     %1.2
Prom 2:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    just, e1.0
  val?            %1.2  = Force<value>       !v    %1.1, e1.0   <str->
  val?            %1.3  = Extract1_1D        !v    %1.2, 1L, e1.0   <str$->
  void                    Visible            v     
  void                    Return             l     %1.3
Prom 3:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     c, <0x55c18aee5940>, e1.0
  val?            %1.2  = Call               !     %1.1(0, 1, 4, 5) e1.0   <real->
  void                    Return             l     %1.2
Prom 4:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    just, e1.0
  val?            %1.2  = Force<value>       !v    %1.1, e1.0   <str->
  val?            %1.3  = Extract1_1D        !v    %1.2, 2L, e1.0   <str$->
  void                    Visible            v     
  void                    Return             l     %1.3
Prom 5:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     c, <0x55c18aee5940>, e1.0
  val?            %1.2  = Call               !     %1.1("left", "right", "bottom", "top", "centre", "center") e1.0   <str->
  void                    Return             l     %1.2
Prom 6:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    just, e1.0
  val?            %1.2  = Force<value>       !v    %1.1, e1.0   <str->
  val?            %1.3  = Extract1_1D        !v    %1.2, 2L, e1.0   <str$->
  void                    Visible            v     
  void                    Return             l     %1.3
Prom 7:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     c, <0x55c18aee5940>, e1.0
  val?            %1.2  = Call               !     %1.1(2, 3, 4, 5) e1.0   <real->
  void                    Return             l     %1.2
Prom 8:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    just, e1.0
  val?            %1.2  = Force<wrapped>     !v    %1.1, e1.0   <str$->
  val?            %1.3  = Extract1_1D        !v    %1.2, 1L, e1.0   <str$->
  void                    Visible            v     
  void                    Return             l     %1.3
Prom 9:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     c, <0x55c18aee5940>, e1.0
  val?            %1.2  = Call               !     %1.1("left", "right", "bottom", "top", "centre", "center") e1.0   <str->
  void                    Return             l     %1.2

│ valid.charjust[0x55c18db0fca0]                                               │
└──────────────────────────────────────────────────────────────────────────────┘
