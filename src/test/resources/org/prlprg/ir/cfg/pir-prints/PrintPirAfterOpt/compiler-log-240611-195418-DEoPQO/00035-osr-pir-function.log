
┌──────────────────────────────────────────────────────────────────────────────┐
│ osr[0x55c18c164620]                                                          │
│ Context: CorrOrd,!TMany                                                      │
│ Properties:                                                                  │
├────── PIR Version After Optimizations
osr[0x55c18c164620]
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  lgl$#-          %1.1  = LdArg                    0   <lgl$->
  cp              %1.2  = Checkpoint                -> BB2 (default) | BB154 (if assume failed)
BB2   <- [1]
  void                    Branch                   %1.1 -> BB153 (if true) | BB3 (if false)
BB154   <- [1]
  fs              %154.0 = FrameState         R     0x55c18d4512d0+382: [%1.1], env=e1.0
  void                    Deopt              !v    %154.0   !
BB153   <- [2]
  (cls|spec|blt)  %153.0 = LdFun              !v    warning, e1.0
  fs              %153.1 = FrameState         R     0x55c18d4512d0+397: [%153.0], env=e1.0
  void                    Deopt              !v    %153.1, DeadCall@0x55c18d02d458[Call#10], %153.0   !
BB3   <- [2]
  val?^ | miss    %3.0  = LdVar              eR    numnotnull, e1.0
  (cls|spec|blt)  %3.1  = CastType                 dn %3.0
  val+            %3.2  = CallSafeBuiltin          bodyCode(%3.1) 
  lgl$#-          %3.3  = Identical                %3.2, <(rir::DispatchTable*)0x55c18d4e8c60>
  void                    Assume             D     %3.3, %1.2 (CallTarget@0x55c18d02d458[Call#13])
  val?            %3.5  = Force!             d     %3.0, 
  (cls|spec|blt)  %3.6  = ChkFunction        e     %3.5
  env             e3.7  = CallSafeBuiltin          environment(%3.6) 
  ct              %3.8  = PushContext        lCL   "alpha", numnotnull("alpha"), %3.6, e1.0
  val?^ | miss    %3.9  = LdVar              eR    is.na, e3.7
  lgl$#-          %3.10 = Identical                <blt is.na>, %3.9   <true>
  void                    Assume             D     %3.10, %1.2 (DeadBranchReached@0x55c18d8fc288[Test#0])
  cp              %3.12 = Checkpoint                -> BB5 (default) | BB4 (if assume failed)
BB5   <- [3]
  val?^ | miss    %5.0  = LdVar              eR    match, e3.7
  lgl$#-          %5.1  = Identical                %5.0, function(x, table, nomatch=NA, incomparables=N|...
  void                    Assume             D     %5.1, %3.12 (CallTarget@0x55c18d8fc288[Call#3])
  val?^ | miss    %5.3  = LdVar              eR    names, e3.7
  lgl$#-          %5.4  = Identical                %5.3, <blt names>
  void                    Assume             D     %5.4, %3.12 (CallTarget@0x55c18d8fc288[Call#4])
  val?^ | miss    %5.6  = LdVar              eR    gpars, e3.7
  env             e5.7  = MkEnv              l     gparname="alpha", parent=e3.7, context 1
  val?            %5.8  = Force!<lazy>       !v    %5.6, e5.7   <vec+>
  val?            %5.9  = CallBuiltin        !v    names(%5.8) e5.7   <(nil|str)->
  lgl$#-          %5.10 = IsType                   %5.9 isA val?-
  cp              %5.11 = Checkpoint                -> BB7 (default) | BB6 (if assume failed)
BB4   <- [3]
  fs              %4.0  = FrameState         R     0x55c18d4512d0+495: [], env=e1.0
  env             e4.1  = (MkEnv)            l     gparname="alpha", parent=e3.7, context 1
  fs              %4.2  = FrameState         R     0x55c18d1d7fc0+60: [<blt is.na>], env=e4.1, next=%4.0
  void                    Deopt              !v    %4.2   !
BB7   <- [5]
  void                    Assume             D     %5.10, %5.11 (Typecheck@0x55c18b1f2b30[Type#1])
  val?-           %7.1  = CastType           d     dn %5.9   <(nil|str)->
  val+            %7.2  = CallSafeBuiltin    wed   match("alpha", %7.1, NA, nil)    <int$->
  lgl$#-          %7.3  = IsType                   %7.2 isA int$-
  cp              %7.4  = Checkpoint                -> BB9 (default) | BB8 (if assume failed)
BB6   <- [5]
  fs              %6.0  = FrameState         R     0x55c18d4512d0+495: [], env=e1.0
  prom-           %6.1  = MkArg                    unboundValue, osr[0x55c18c164620]_p31, e5.7
  val?^           %6.2  = CastType                 up %6.1
  prom-           %6.3  = MkArg                    unboundValue, osr[0x55c18c164620]_p30, e5.7
  val?^           %6.4  = CastType                 up %6.3
  fs              %6.5  = FrameState         R     0x55c18d1d7fc0+97: [<blt is.na>], env=e5.7, next=%6.0
  env             e6.6  = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%6.2, x=%6.4, parent=R_BaseNamespace, context 0
  fs              %6.7  = FrameState         R     0x55c18ba1ad70+23: ["alpha"], env=e6.6, next=%6.5
  fs              %6.8  = FrameState         R     0x55c18d178990+32(pr): [%5.9], env=e5.7, next=%6.7
  void                    Deopt              !v    %6.8   !
BB9   <- [7]
  void                    Assume             D     %7.3, %7.4 (Typecheck@0x55c18d8fc288[Type#7])
  int$-           %9.1  = CastType           d     dn %7.2
  lgl$-           %9.2  = CallSafeBuiltin    wed   is.na(%9.1)    <lgl$->
  lgl$-           %9.3  = Not                d     %9.2, elided
  lgl$#-          %9.4  = CheckTrueFalse     e     %9.3
  void                    Branch                   %9.4 -> BB145 (if true) | BB10 (if false)
BB8   <- [7]
  fs              %8.0  = FrameState         R     0x55c18d4512d0+495: [], env=e1.0
  prom-           %8.1  = MkArg                    unboundValue, osr[0x55c18c164620]_p30, e5.7
  val?^           %8.2  = CastType                 up %8.1
  prom-           %8.3  = MkArg                    %7.1, osr[0x55c18c164620]_p31 (!refl), e5.7
  val?~           %8.4  = CastType                 up %8.3
  fs              %8.5  = FrameState         R     0x55c18d1d7fc0+97: [<blt is.na>], env=e5.7, next=%8.0
  env             e8.6  = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%8.4, x=%8.2, parent=R_BaseNamespace, context 0
  fs              %8.7  = FrameState         R     0x55c18ba1ad70+69: [%7.2], env=e8.6, next=%8.5
  void                    Deopt              !v    %8.7   !
BB145   <- [9]
  val?^ | miss    %145.0 = LdVar              eR    gpars, e5.7
  val?            %145.1 = Force!             !v    %145.0, e5.7   <val?_>
  lgl$#-          %145.2 = IsType                   %145.1 isA val+   <lgl$#-@?>
  void                    Branch                   %145.2 -> BB152 (if true) | BB146 (if false)
BB10   <- [9]
  goto BB11
BB152   <- [145]
  val?^ | miss    %152.0 = LdVar              eR    gparname, e5.7
  val?            %152.1 = Force!             !v    %152.0, e5.7   <val?_>
  goto BB147
BB146   <- [145]
  prom-           %146.0 = MkArg                    unboundValue, osr[0x55c18c164620]_p33, e5.7
  goto BB147
BB11   <- [10, 151]
  val?            %11.0 = PopContext         C     nil, %3.8
  cp              %11.1 = Checkpoint                -> BB13 (default) | BB12 (if assume failed)
BB147   <- [146, 152]
  val?            %147.0 = Phi                      %152.1:BB152, %146.0:BB146
  val?            %147.1 = Extract2_1D        !v    %145.1, %147.0, e5.7   <val?_>
  lgl$-           %147.2 = Is                       %147.1, NULL
  lgl$#-          %147.3 = CheckTrueFalse     e     %147.2
  void                    Branch                   %147.3 -> BB149 (if true) | BB148 (if false)
BB13   <- [11]
  val?^ | miss    %13.0 = LdVar              eR    is.na, e1.0
  lgl$#-          %13.1 = Identical                <blt is.na>, %13.0   <true>
  void                    Assume             D     %13.1, %11.1 (DeadBranchReached@0x55c18d02d458[Test#0])
  val?^ | miss    %13.3 = LdVar              eR    match, e1.0
  lgl$#-          %13.4 = Identical                %13.3, function(x, table, nomatch=NA, incomparables=N|...
  void                    Assume             D     %13.4, %11.1 (CallTarget@0x55c18d02d458[Call#17])
  val?^ | miss    %13.6 = LdVar              eR    names, e1.0
  lgl$#-          %13.7 = Identical                %13.6, <blt names>
  void                    Assume             D     %13.7, %11.1 (CallTarget@0x55c18d02d458[Call#18])
  val?^ | miss    %13.9 = LdVar              eR    gpars, e1.0
  val?            %13.10 = Force!<wrapped>    !v    %13.9, e1.0   <vec+>
  val?            %13.11 = CallBuiltin        !v    names(%13.10) e1.0   <(nil|str)->
  lgl$#-          %13.12 = IsType                   %13.11 isA val?-
  cp              %13.13 = Checkpoint                -> BB15 (default) | BB14 (if assume failed)
BB12   <- [11]
  fs              %12.0 = FrameState         R     0x55c18d4512d0+495: [%11.0], env=e1.0
  void                    Deopt              !v    %12.0   !
BB149   <- [147]
  val?^ | miss    %149.0 = LdVar              eR    gpars, e3.7   <val?_>
  val?^ | miss    %149.1 = LdVar              eR    gparname, e5.7
  val?            %149.2 = Force!             !v    %149.1, e5.7   <val?_>
  val?            %149.3 = Force!             !v    %149.0, e5.7
  lgl$#-          %149.4 = IsType                   %149.3 isA val?+
  lgl$#-          %149.5 = IsType                   %149.2 isA val?+
  cp              %149.6 = Checkpoint                -> BB151 (default) | BB150 (if assume failed)
BB148   <- [147]
  fs              %148.0 = FrameState         R     0x55c18d4512d0+495: [], env=e1.0
  (cls|spec|blt)  %148.1 = LdFun              !v    check.length, e5.7
  fs              %148.2 = FrameState         R     0x55c18d1d7fc0+224: [%148.1], env=e5.7, next=%148.0
  void                    Deopt              !v    %148.2, DeadCall@0x55c18d8fc288[Call#5], %148.1   !
BB15   <- [13]
  void                    Assume             D     %13.12, %13.13 (Typecheck@0x55c18b1f2b30[Type#1])
  val?-           %15.1 = CastType           d     dn %13.11   <(nil|str)->
  val+            %15.2 = CallSafeBuiltin    wed   match("col", %15.1, NA, nil)    <int$->
  lgl$#-          %15.3 = IsType                   %15.2 isA int$-
  cp              %15.4 = Checkpoint                -> BB17 (default) | BB16 (if assume failed)
BB14   <- [13]
  fs              %14.0 = FrameState         R     0x55c18d4512d0+593: [<blt is.na>], env=e1.0
  prom-           %14.1 = MkArg                    unboundValue, osr[0x55c18c164620]_p0, e1.0
  val?^           %14.2 = CastType                 up %14.1
  env             e14.3 = (MkEnv)            l     x="col", table=%14.2, nomatch(miss)=NA, incomparables(miss)=nil, parent=R_BaseNamespace, context 0
  fs              %14.4 = FrameState         R     0x55c18ba1ad70+23: ["col"], env=e14.3, next=%14.0
  fs              %14.5 = FrameState         R     0x55c18d5cabe0+32(pr): [%13.11], env=e1.0, next=%14.4
  void                    Deopt              !v    %14.5   !
BB151   <- [149]
  void                    Assume             D     %149.4, %149.6 (Typecheck@0x55c18d8fc288[Type#25])
  val?+           %151.1 = CastType           d     dn %149.3
  void                    Assume             D     %149.5, %149.6 (Typecheck@0x55c18d8fc288[Type#26])
  val?+           %151.3 = CastType           d     dn %149.2   <val?_>
  val?+           %151.4 = Subassign2_1D      wed   nil, %151.1, %151.3, elided
  void                    StVarSuper         lRW   gpars, %151.4, e5.7
  goto BB11
BB150   <- [149]
  fs              %150.0 = FrameState         R     0x55c18d4512d0+495: [], env=e1.0
  fs              %150.1 = FrameState         R     0x55c18d1d7fc0+480: [nil, nil, %149.3, %149.2], env=e5.7, next=%150.0
  void                    Deopt              !v    %150.1   !
BB17   <- [15]
  void                    Assume             D     %15.3, %15.4 (Typecheck@0x55c18d02d458[Type#11])
  int$-           %17.1 = CastType           d     dn %15.2
  lgl$-           %17.2 = CallSafeBuiltin    wed   is.na(%17.1)    <lgl$->
  lgl$-           %17.3 = Not                d     %17.2, elided
  lgl$#-          %17.4 = CheckTrueFalse     e     %17.3
  void                    Branch                   %17.4 -> BB132 (if true) | BB18 (if false)
BB16   <- [15]
  prom-           %16.0 = MkArg                    %15.1, osr[0x55c18c164620]_p0 (!refl), e1.0
  val?~           %16.1 = CastType                 up %16.0
  fs              %16.2 = FrameState         R     0x55c18d4512d0+593: [<blt is.na>], env=e1.0
  env             e16.3 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%16.1, x="col", parent=R_BaseNamespace, context 0
  fs              %16.4 = FrameState         R     0x55c18ba1ad70+69: [%15.2], env=e16.3, next=%16.2
  void                    Deopt              !v    %16.4   !
BB132   <- [17]
  (cls|spec|blt)  %132.0 = LdFun              !v    $, <0x55c18aee4c10>, e1.0
  prom-           %132.1 = MkArg                    unboundValue, osr[0x55c18c164620]_p25, e1.0
  prom-           %132.2 = MkArg                    unboundValue, osr[0x55c18c164620]_p26, e1.0
  val?            %132.3 = Call               !v    %132.0(%132.1, %132.2) e1.0   <(nil|str)->
  lgl$-           %132.4 = Is                       %132.3, NULL
  cp              %132.5 = Checkpoint                -> BB134 (default) | BB133 (if assume failed)
BB18   <- [17]
  goto BB19
BB134   <- [132]
  lgl$#-          %134.0 = CheckTrueFalse     e     %132.4
  void                    Branch                   %134.0 -> BB144 (if true) | BB135 (if false)
BB133   <- [132]
  fs              %133.0 = FrameState         R     0x55c18d4512d0+669: [%132.3], env=e1.0
  void                    Deopt              !v    %133.0   !
BB19   <- [18, 142, 144]
  cp              %19.0 = Checkpoint                -> BB21 (default) | BB20 (if assume failed)
BB144   <- [134]
  (cls|spec|blt)  %144.0 = LdFun              !v    <-, <0x55c18aed9da8>, e1.0
  prom-           %144.1 = MkArg                    unboundValue, osr[0x55c18c164620]_p27, e1.0
  val?            %144.2 = Call               !v    %144.0(%144.1, nil) e1.0
  goto BB19
BB135   <- [134]
  val?^ | miss    %135.0 = LdVar              eR    check.length, e1.0
  (cls|spec|blt)  %135.1 = CastType                 dn %135.0
  val+            %135.2 = CallSafeBuiltin          bodyCode(%135.1) 
  lgl$#-          %135.3 = Identical                %135.2, <(rir::DispatchTable*)0x55c18d22ba60>
  void                    Assume             D     %135.3, %132.5 (CallTarget@0x55c18d02d458[Call#20])
  val?            %135.5 = Force!             d     %135.0, 
  (cls|spec|blt)  %135.6 = ChkFunction        e     %135.5
  env             e135.7 = CallSafeBuiltin          environment(%135.6) 
  val?^ | miss    %135.8 = LdVar              eR    length, e135.7
  lgl$#-          %135.9 = Identical                <blt length>, %135.8   <true>
  void                    Assume             D     %135.9, %132.5 (DeadBranchReached@0x55c18d8fc338[Test#0])
  val?^ | miss    %135.11 = LdVar              eR    gpars, e135.7
  env             e135.12 = (MkEnv)            l     gparname="col", parent=e135.7, context 0
  val?            %135.13 = Force!<wrapped>    !vL   %135.11, e135.12   <vec+>
  lgl$#-          %135.14 = IsType                   %135.13 isA val+   <lgl$#->
  lgl$#-          %135.15 = IsType                   %135.13 isA val?+
  cp              %135.16 = Checkpoint                -> BB137 (default) | BB136 (if assume failed)
BB21   <- [19]
  val?^ | miss    %21.0 = LdVar              eR    is.na, e1.0
  lgl$#-          %21.1 = Identical                <blt is.na>, %21.0   <true>
  void                    Assume             D     %21.1, %19.0 (DeadBranchReached@0x55c18d02d458[Test#1])
  val?^ | miss    %21.3 = LdVar              eR    match, e1.0
  lgl$#-          %21.4 = Identical                %21.3, function(x, table, nomatch=NA, incomparables=N|...
  void                    Assume             D     %21.4, %19.0 (CallTarget@0x55c18d02d458[Call#26])
  val?^ | miss    %21.6 = LdVar              eR    names, e1.0
  lgl$#-          %21.7 = Identical                %21.6, <blt names>
  void                    Assume             D     %21.7, %19.0 (CallTarget@0x55c18d02d458[Call#27])
  val?^ | miss    %21.9 = LdVar              eR    gpars, e1.0
  val?            %21.10 = Force!<wrapped>    !v    %21.9, e1.0   <vec+>
  val?            %21.11 = CallBuiltin        !v    names(%21.10) e1.0   <(nil|str)->
  lgl$#-          %21.12 = IsType                   %21.11 isA val?-
  cp              %21.13 = Checkpoint                -> BB23 (default) | BB22 (if assume failed)
BB20   <- [19]
  fs              %20.0 = FrameState         R     0x55c18d4512d0+761: [], env=e1.0
  void                    Deopt              !v    %20.0   !
BB137   <- [135]
  lgl$#-          %137.0 = IsEnvStub          R     , e135.12
  void                    Assume             D     %137.0, %135.16 (EnvStubMaterialized@0x55c18d8fc338[Call#unknown])
  void                    Assume             D     %135.14, %135.16 (DeadBranchReached@0x55c18d8fc338[Test#2])
  void                    Assume             D     %135.15, %135.16 (Typecheck@0x55c18d8fc338[Type#4])
  val?+           %137.4 = CastType           d     dn %135.13   <vec+>
  val?            %137.5 = Extract2_1D        wed   %137.4, "col", elided   <str$->
  lgl$#-          %137.6 = IsType                   %137.5 isA val?-
  cp              %137.7 = Checkpoint                -> BB139 (default) | BB138 (if assume failed)
BB136   <- [135]
  fs              %136.0 = FrameState         R     0x55c18d4512d0+717: [], env=e1.0
  fs              %136.1 = FrameState         R     0x55c18dbfd750+69: [<blt length>, %135.13], env=e135.12, next=%136.0
  void                    Deopt              !v    %136.1   !
BB23   <- [21]
  void                    Assume             D     %21.12, %21.13 (Typecheck@0x55c18b1f2b30[Type#1])
  val?-           %23.1 = CastType           d     dn %21.11   <(nil|str)->
  val+            %23.2 = CallSafeBuiltin    wed   match("fill", %23.1, NA, nil)    <int$->
  lgl$#-          %23.3 = IsType                   %23.2 isA int$-
  cp              %23.4 = Checkpoint                -> BB25 (default) | BB24 (if assume failed)
BB22   <- [21]
  fs              %22.0 = FrameState         R     0x55c18d4512d0+858: [<blt is.na>], env=e1.0
  prom-           %22.1 = MkArg                    unboundValue, osr[0x55c18c164620]_p2, e1.0
  val?^           %22.2 = CastType                 up %22.1
  env             e22.3 = (MkEnv)            l     x="fill", table=%22.2, nomatch(miss)=NA, incomparables(miss)=nil, parent=R_BaseNamespace, context 0
  fs              %22.4 = FrameState         R     0x55c18ba1ad70+23: ["fill"], env=e22.3, next=%22.0
  fs              %22.5 = FrameState         R     0x55c18d5238f0+32(pr): [%21.11], env=e1.0, next=%22.4
  void                    Deopt              !v    %22.5   !
BB139   <- [137]
  void                    Assume             D     %137.6, %137.7 (Typecheck@0x55c18d8fc338[Type#7])
  val?-           %139.1 = CastType           d     dn %137.5   <str$->
  (int|real)$-    %139.2 = CallSafeBuiltin    wed   length(%139.1)    <int$->
  lgl$#-          %139.3 = IsType                   %139.2 isA int$-
  cp              %139.4 = Checkpoint                -> BB141 (default) | BB140 (if assume failed)
BB138   <- [137]
  fs              %138.0 = FrameState         R     0x55c18d4512d0+717: [], env=e1.0
  fs              %138.1 = FrameState         R     0x55c18dbfd750+120: [<blt length>, %137.5], env=e135.12, next=%138.0
  void                    Deopt              !v    %138.1   !
BB25   <- [23]
  void                    Assume             D     %23.3, %23.4 (Typecheck@0x55c18d02d458[Type#24])
  int$-           %25.1 = CastType           d     dn %23.2
  lgl$-           %25.2 = CallSafeBuiltin    wed   is.na(%25.1)    <lgl$->
  lgl$-           %25.3 = Not                d     %25.2, elided
  lgl$#-          %25.4 = CheckTrueFalse     e     %25.3
  void                    Branch                   %25.4 -> BB118 (if true) | BB26 (if false)
BB24   <- [23]
  prom-           %24.0 = MkArg                    %23.1, osr[0x55c18c164620]_p2 (!refl), e1.0
  val?~           %24.1 = CastType                 up %24.0
  fs              %24.2 = FrameState         R     0x55c18d4512d0+858: [<blt is.na>], env=e1.0
  env             e24.3 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%24.1, x="fill", parent=R_BaseNamespace, context 0
  fs              %24.4 = FrameState         R     0x55c18ba1ad70+69: [%23.2], env=e24.3, next=%24.2
  void                    Deopt              !v    %24.4   !
BB141   <- [139]
  void                    Assume             D     %139.3, %139.4 (Typecheck@0x55c18d8fc338[Type#8])
  int$-           %141.1 = CastType           d     dn %139.2
  lgl$-           %141.2 = Eq                 d     %141.1, 0, elided   <lgl$->
  lgl$#-          %141.3 = CheckTrueFalse     e     %141.2
  void                    Branch                   %141.3 -> BB143 (if true) | BB142 (if false)
BB140   <- [139]
  fs              %140.0 = FrameState         R     0x55c18d4512d0+717: [], env=e1.0
  fs              %140.1 = FrameState         R     0x55c18dbfd750+143: [%139.2], env=e135.12, next=%140.0
  void                    Deopt              !v    %140.1   !
BB118   <- [25]
  (cls|spec|blt)  %118.0 = LdFun              !v    $, <0x55c18aee4c10>, e1.0
  prom-           %118.1 = MkArg                    unboundValue, osr[0x55c18c164620]_p20, e1.0
  prom-           %118.2 = MkArg                    unboundValue, osr[0x55c18c164620]_p21, e1.0
  val?            %118.3 = Call               !v    %118.0(%118.1, %118.2) e1.0   <str$->
  lgl$-           %118.4 = Is                       %118.3, NULL
  cp              %118.5 = Checkpoint                -> BB120 (default) | BB119 (if assume failed)
BB26   <- [25]
  goto BB27
BB143   <- [141]
  fs              %143.0 = FrameState         R     0x55c18d4512d0+717: [], env=e1.0
  env             e143.1 = MaterializeEnv           , e135.12   <@?>
  (cls|spec|blt)  %143.2 = LdFun              !v    stop, e143.1
  fs              %143.3 = FrameState         R     0x55c18dbfd750+182: [%143.2], env=e143.1, next=%143.0
  void                    Deopt              !v    %143.3, DeadCall@0x55c18d8fc338[Call#1], %143.2   !
BB142   <- [141]
  goto BB19
BB120   <- [118]
  lgl$#-          %120.0 = CheckTrueFalse     e     %118.4
  void                    Branch                   %120.0 -> BB131 (if true) | BB121 (if false)
BB119   <- [118]
  fs              %119.0 = FrameState         R     0x55c18d4512d0+934: [%118.3], env=e1.0
  void                    Deopt              !v    %119.0   !
BB27   <- [26, 129]
  cp              %27.0 = Checkpoint                -> BB29 (default) | BB28 (if assume failed)
BB131   <- [120]
  (cls|spec|blt)  %131.0 = LdFun              !v    <-, e1.0
  fs              %131.1 = FrameState         R     0x55c18d4512d0+1042: [%131.0], env=e1.0
  void                    Deopt              !v    %131.1, DeadCall@0x55c18d02d458[Call#32], %131.0   !
BB121   <- [120]
  val?^ | miss    %121.0 = LdVar              eR    is.pattern, e1.0
  lgl$#-          %121.1 = Identical                %121.0, function(x) <(rir::DispatchTable*)0x55c18d504d|...
  void                    Assume             D     %121.1, %118.5 (CallTarget@0x55c18d02d458[Call#29])
  prom-           %121.3 = MkArg                    unboundValue, osr[0x55c18c164620]_p22, e1.0
  ct              %121.4 = PushContext        lCL   %121.3, is.pattern($(gpars, fill)), function(x) <(rir::DispatchTable*)0x55c18d504d|..., e1.0
  val?^           %121.5 = CastType                 up %121.3
  cp              %121.6 = Checkpoint                -> BB123 (default) | BB122 (if assume failed)
BB29   <- [27]
  val?^ | miss    %29.0 = LdVar              eR    is.na, e1.0
  lgl$#-          %29.1 = Identical                <blt is.na>, %29.0   <true>
  void                    Assume             D     %29.1, %27.0 (DeadBranchReached@0x55c18d02d458[Test#2])
  val?^ | miss    %29.3 = LdVar              eR    match, e1.0
  lgl$#-          %29.4 = Identical                %29.3, function(x, table, nomatch=NA, incomparables=N|...
  void                    Assume             D     %29.4, %27.0 (CallTarget@0x55c18d02d458[Call#37])
  val?^ | miss    %29.6 = LdVar              eR    names, e1.0
  lgl$#-          %29.7 = Identical                %29.6, <blt names>
  void                    Assume             D     %29.7, %27.0 (CallTarget@0x55c18d02d458[Call#38])
  val?^ | miss    %29.9 = LdVar              eR    gpars, e1.0
  val?            %29.10 = Force!<wrapped>    !v    %29.9, e1.0   <vec+>
  val?            %29.11 = CallBuiltin        !v    names(%29.10) e1.0   <(nil|str)->
  lgl$#-          %29.12 = IsType                   %29.11 isA val?-
  cp              %29.13 = Checkpoint                -> BB31 (default) | BB30 (if assume failed)
BB28   <- [27]
  fs              %28.0 = FrameState         R     0x55c18d4512d0+1075: [], env=e1.0
  void                    Deopt              !v    %28.0   !
BB123   <- [121]
  val?^ | miss    %123.0 = LdVar              eR    inherits, <env 0x55c18d083160>
  lgl$#-          %123.1 = Identical                %123.0, function(x, what, which=FALSE) <(rir::Dispatch|...
  void                    Assume             D     %123.1, %121.6 (CallTarget@0x55c18d858158[Call#0])
  env             e123.3 = MkEnv              l     x=%121.5, parent=<env 0x55c18d083160>, context 1
  prom-           %123.4 = MkArg                    unboundValue, osr[0x55c18c164620]_p40, e123.3
  ct              %123.5 = PushContext        lCL   %123.4, "GridPattern", inherits(x, "GridPattern"), function(x, what, which=FALSE) <(rir::Dispatch|..., e123.3
  val?^           %123.6 = CastType                 up %123.4
  env             e123.7 = MkEnv              l     x=%123.6, what="GridPattern", which(miss)=false, parent=R_BaseNamespace, context 1
  val?            %123.8 = Force!<lazy>       !vL   %123.6, e123.7   <val?>
  val?            %123.9 = CallBuiltin        !v    inherits(%123.8, "GridPattern", false) e123.7
  val?            %123.10 = PopContext         C     %123.9, %123.5   <lgl$->
  lgl$#-          %123.11 = IsType                   %123.10 isA lgl$-
  cp              %123.12 = Checkpoint                -> BB125 (default) | BB124 (if assume failed)
BB122   <- [121]
  fs              %122.0 = FrameState         R     0x55c18d4512d0+982: [], env=e1.0
  env             e122.1 = (MkEnv)            l     x=%121.5, parent=<env 0x55c18d083160>, context 1
  fs              %122.2 = FrameState         R     0x55c18d504c20+0: [], env=e122.1, next=%122.0
  void                    Deopt              !v    %122.2   !
BB31   <- [29]
  void                    Assume             D     %29.12, %29.13 (Typecheck@0x55c18b1f2b30[Type#1])
  val?-           %31.1 = CastType           d     dn %29.11   <(nil|str)->
  val+            %31.2 = CallSafeBuiltin    wed   match("lty", %31.1, NA, nil)    <int$->
  lgl$#-          %31.3 = IsType                   %31.2 isA int$-
  cp              %31.4 = Checkpoint                -> BB33 (default) | BB32 (if assume failed)
BB30   <- [29]
  fs              %30.0 = FrameState         R     0x55c18d4512d0+1172: [<blt is.na>], env=e1.0
  prom-           %30.1 = MkArg                    unboundValue, osr[0x55c18c164620]_p4, e1.0
  val?^           %30.2 = CastType                 up %30.1
  env             e30.3 = (MkEnv)            l     x="lty", table=%30.2, nomatch(miss)=NA, incomparables(miss)=nil, parent=R_BaseNamespace, context 0
  fs              %30.4 = FrameState         R     0x55c18ba1ad70+23: ["lty"], env=e30.3, next=%30.0
  fs              %30.5 = FrameState         R     0x55c18d4bac60+32(pr): [%29.11], env=e1.0, next=%30.4
  void                    Deopt              !v    %30.5   !
BB125   <- [123]
  void                    Assume             D     %123.11, %123.12 (Typecheck@0x55c18d858158[Type#1])
  lgl$-           %125.1 = CastType           d     dn %123.10
  val?            %125.2 = PopContext         C     %125.1, %121.4   <lgl$->
  lgl$#-          %125.3 = IsType                   %125.2 isA lgl$-
  cp              %125.4 = Checkpoint                -> BB127 (default) | BB126 (if assume failed)
BB124   <- [123]
  fs              %124.0 = FrameState         R     0x55c18d4512d0+982: [], env=e1.0
  fs              %124.1 = FrameState         R     0x55c18d504c20+37: [%123.10], env=e123.3, next=%124.0
  void                    Deopt              !v    %124.1   !
BB33   <- [31]
  void                    Assume             D     %31.3, %31.4 (Typecheck@0x55c18d02d458[Type#41])
  int$-           %33.1 = CastType           d     dn %31.2
  lgl$-           %33.2 = CallSafeBuiltin    wed   is.na(%33.1)    <lgl$->
  cp              %33.3 = Checkpoint                -> BB35 (default) | BB34 (if assume failed)
BB32   <- [31]
  prom-           %32.0 = MkArg                    %31.1, osr[0x55c18c164620]_p4 (!refl), e1.0
  val?~           %32.1 = CastType                 up %32.0
  fs              %32.2 = FrameState         R     0x55c18d4512d0+1172: [<blt is.na>], env=e1.0
  env             e32.3 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%32.1, x="lty", parent=R_BaseNamespace, context 0
  fs              %32.4 = FrameState         R     0x55c18ba1ad70+69: [%31.2], env=e32.3, next=%32.2
  void                    Deopt              !v    %32.4   !
BB127   <- [125]
  void                    Assume             D     %125.3, %125.4 (Typecheck@0x55c18d02d458[Type#32])
  lgl$-           %127.1 = CastType           d     dn %125.2
  lgl$-           %127.2 = Not                d     %127.1, elided
  lgl$#-          %127.3 = CheckTrueFalse     e     %127.2
  void                    Branch                   %127.3 -> BB130 (if true) | BB128 (if false)
BB126   <- [125]
  fs              %126.0 = FrameState         R     0x55c18d4512d0+982: [%125.2], env=e1.0
  void                    Deopt              !v    %126.0   !
BB35   <- [33]
  lgl$-           %35.0 = Not                d     %33.2, elided
  lgl$#-          %35.1 = CheckTrueFalse     e     %35.0
  void                    Branch                   %35.1 -> BB117 (if true) | BB36 (if false)
BB34   <- [33]
  fs              %34.0 = FrameState         R     0x55c18d4512d0+1194: [%33.2], env=e1.0
  void                    Deopt              !v    %34.0   !
BB130   <- [127]
  val?^ | miss    %130.0 = LdVar              eR    check.length, e1.0
  (cls|spec|blt)  %130.1 = CastType                 dn %130.0
  val+            %130.2 = CallSafeBuiltin          bodyCode(%130.1) 
  lgl$#-          %130.3 = Identical                %130.2, <(rir::DispatchTable*)0x55c18d22ba60>
  void                    Assume             D     %130.3, %125.4 (CallTarget@0x55c18d02d458[Call#31])
  val?            %130.5 = Force!             d     %130.0, 
  (cls|spec|blt)  %130.6 = ChkFunction        e     %130.5
  val?            %130.7 = StaticCall         !v    check.length[0x55c18e16e730]("fill") from %130.6 e1.0
  goto BB129
BB128   <- [127]
  goto BB129
BB117   <- [35]
  (cls|spec|blt)  %117.0 = LdFun              !v    $, e1.0
  fs              %117.1 = FrameState         R     0x55c18d4512d0+1216: [%117.0], env=e1.0
  void                    Deopt              !v    %117.1, DeadCall@0x55c18d02d458[Call#39], %117.0   !
BB36   <- [35]
  val?^ | miss    %36.0 = LdVar              eR    is.na, e1.0
  lgl$#-          %36.1 = Identical                <blt is.na>, %36.0   <true>
  void                    Assume             D     %36.1, %33.3 (DeadBranchReached@0x55c18d02d458[Test#3])
  val?^ | miss    %36.3 = LdVar              eR    match, e1.0
  lgl$#-          %36.4 = Identical                %36.3, function(x, table, nomatch=NA, incomparables=N|...
  void                    Assume             D     %36.4, %33.3 (CallTarget@0x55c18d02d458[Call#46])
  val?^ | miss    %36.6 = LdVar              eR    names, e1.0
  lgl$#-          %36.7 = Identical                %36.6, <blt names>
  void                    Assume             D     %36.7, %33.3 (CallTarget@0x55c18d02d458[Call#47])
  val?^ | miss    %36.9 = LdVar              eR    gpars, e1.0
  val?            %36.10 = Force!<wrapped>    !v    %36.9, e1.0   <vec+>
  val?            %36.11 = CallBuiltin        !v    names(%36.10) e1.0   <(nil|str)->
  lgl$#-          %36.12 = IsType                   %36.11 isA val?-
  cp              %36.13 = Checkpoint                -> BB38 (default) | BB37 (if assume failed)
BB129   <- [128, 130]
  goto BB27
BB38   <- [36]
  void                    Assume             D     %36.12, %36.13 (Typecheck@0x55c18b1f2b30[Type#1])
  val?-           %38.1 = CastType           d     dn %36.11   <(nil|str)->
  val+            %38.2 = CallSafeBuiltin    wed   match("lineend", %38.1, NA, nil)    <int$->
  lgl$#-          %38.3 = IsType                   %38.2 isA int$-
  cp              %38.4 = Checkpoint                -> BB40 (default) | BB39 (if assume failed)
BB37   <- [36]
  fs              %37.0 = FrameState         R     0x55c18d4512d0+1437: [<blt is.na>], env=e1.0
  prom-           %37.1 = MkArg                    unboundValue, osr[0x55c18c164620]_p6, e1.0
  val?^           %37.2 = CastType                 up %37.1
  env             e37.3 = (MkEnv)            l     x="lineend", table=%37.2, nomatch(miss)=NA, incomparables(miss)=nil, parent=R_BaseNamespace, context 0
  fs              %37.4 = FrameState         R     0x55c18ba1ad70+23: ["lineend"], env=e37.3, next=%37.0
  fs              %37.5 = FrameState         R     0x55c18d5b5ec0+32(pr): [%36.11], env=e1.0, next=%37.4
  void                    Deopt              !v    %37.5   !
BB40   <- [38]
  void                    Assume             D     %38.3, %38.4 (Typecheck@0x55c18d02d458[Type#54])
  int$-           %40.1 = CastType           d     dn %38.2
  lgl$-           %40.2 = CallSafeBuiltin    wed   is.na(%40.1)    <lgl$->
  cp              %40.3 = Checkpoint                -> BB42 (default) | BB41 (if assume failed)
BB39   <- [38]
  prom-           %39.0 = MkArg                    %38.1, osr[0x55c18c164620]_p6 (!refl), e1.0
  val?~           %39.1 = CastType                 up %39.0
  fs              %39.2 = FrameState         R     0x55c18d4512d0+1437: [<blt is.na>], env=e1.0
  env             e39.3 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%39.1, x="lineend", parent=R_BaseNamespace, context 0
  fs              %39.4 = FrameState         R     0x55c18ba1ad70+69: [%38.2], env=e39.3, next=%39.2
  void                    Deopt              !v    %39.4   !
BB42   <- [40]
  lgl$-           %42.0 = Not                d     %40.2, elided
  lgl$#-          %42.1 = CheckTrueFalse     e     %42.0
  void                    Branch                   %42.1 -> BB116 (if true) | BB43 (if false)
BB41   <- [40]
  fs              %41.0 = FrameState         R     0x55c18d4512d0+1459: [%40.2], env=e1.0
  void                    Deopt              !v    %41.0   !
BB116   <- [42]
  (cls|spec|blt)  %116.0 = LdFun              !v    $, e1.0
  fs              %116.1 = FrameState         R     0x55c18d4512d0+1481: [%116.0], env=e1.0
  void                    Deopt              !v    %116.1, DeadCall@0x55c18d02d458[Call#48], %116.0   !
BB43   <- [42]
  val?^ | miss    %43.0 = LdVar              eR    is.na, e1.0
  lgl$#-          %43.1 = Identical                <blt is.na>, %43.0   <true>
  void                    Assume             D     %43.1, %40.3 (DeadBranchReached@0x55c18d02d458[Test#4])
  val?^ | miss    %43.3 = LdVar              eR    match, e1.0
  lgl$#-          %43.4 = Identical                %43.3, function(x, table, nomatch=NA, incomparables=N|...
  void                    Assume             D     %43.4, %40.3 (CallTarget@0x55c18d02d458[Call#55])
  val?^ | miss    %43.6 = LdVar              eR    names, e1.0
  lgl$#-          %43.7 = Identical                %43.6, <blt names>
  void                    Assume             D     %43.7, %40.3 (CallTarget@0x55c18d02d458[Call#56])
  val?^ | miss    %43.9 = LdVar              eR    gpars, e1.0
  val?            %43.10 = Force!<wrapped>    !v    %43.9, e1.0   <vec+>
  val?            %43.11 = CallBuiltin        !v    names(%43.10) e1.0   <(nil|str)->
  lgl$#-          %43.12 = IsType                   %43.11 isA val?-
  cp              %43.13 = Checkpoint                -> BB45 (default) | BB44 (if assume failed)
BB45   <- [43]
  void                    Assume             D     %43.12, %43.13 (Typecheck@0x55c18b1f2b30[Type#1])
  val?-           %45.1 = CastType           d     dn %43.11   <(nil|str)->
  val+            %45.2 = CallSafeBuiltin    wed   match("linejoin", %45.1, NA, nil)    <int$->
  lgl$#-          %45.3 = IsType                   %45.2 isA int$-
  cp              %45.4 = Checkpoint                -> BB47 (default) | BB46 (if assume failed)
BB44   <- [43]
  fs              %44.0 = FrameState         R     0x55c18d4512d0+1702: [<blt is.na>], env=e1.0
  prom-           %44.1 = MkArg                    unboundValue, osr[0x55c18c164620]_p8, e1.0
  val?^           %44.2 = CastType                 up %44.1
  env             e44.3 = (MkEnv)            l     x="linejoin", table=%44.2, nomatch(miss)=NA, incomparables(miss)=nil, parent=R_BaseNamespace, context 0
  fs              %44.4 = FrameState         R     0x55c18ba1ad70+23: ["linejoin"], env=e44.3, next=%44.0
  fs              %44.5 = FrameState         R     0x55c18d576a40+32(pr): [%43.11], env=e1.0, next=%44.4
  void                    Deopt              !v    %44.5   !
BB47   <- [45]
  void                    Assume             D     %45.3, %45.4 (Typecheck@0x55c18d02d458[Type#67])
  int$-           %47.1 = CastType           d     dn %45.2
  lgl$-           %47.2 = CallSafeBuiltin    wed   is.na(%47.1)    <lgl$->
  cp              %47.3 = Checkpoint                -> BB49 (default) | BB48 (if assume failed)
BB46   <- [45]
  prom-           %46.0 = MkArg                    %45.1, osr[0x55c18c164620]_p8 (!refl), e1.0
  val?~           %46.1 = CastType                 up %46.0
  fs              %46.2 = FrameState         R     0x55c18d4512d0+1702: [<blt is.na>], env=e1.0
  env             e46.3 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%46.1, x="linejoin", parent=R_BaseNamespace, context 0
  fs              %46.4 = FrameState         R     0x55c18ba1ad70+69: [%45.2], env=e46.3, next=%46.2
  void                    Deopt              !v    %46.4   !
BB49   <- [47]
  lgl$-           %49.0 = Not                d     %47.2, elided
  lgl$#-          %49.1 = CheckTrueFalse     e     %49.0
  cp              %49.2 = Checkpoint                -> BB51 (default) | BB50 (if assume failed)
BB48   <- [47]
  fs              %48.0 = FrameState         R     0x55c18d4512d0+1724: [%47.2], env=e1.0
  void                    Deopt              !v    %48.0   !
BB51   <- [49]
  void                    Branch                   %49.1 -> BB115 (if true) | BB52 (if false)
BB50   <- [49]
  fs              %50.0 = FrameState         R     0x55c18d4512d0+1731: [%49.1], env=e1.0
  void                    Deopt              !v    %50.0   !
BB115   <- [51]
  (cls|spec|blt)  %115.0 = LdFun              !v    $, e1.0
  fs              %115.1 = FrameState         R     0x55c18d4512d0+1746: [%115.0], env=e1.0
  void                    Deopt              !v    %115.1, DeadCall@0x55c18d02d458[Call#57], %115.0   !
BB52   <- [51]
  val?^ | miss    %52.0 = LdVar              eR    numnotnull, e1.0
  (cls|spec|blt)  %52.1 = CastType                 dn %52.0
  val+            %52.2 = CallSafeBuiltin          bodyCode(%52.1) 
  lgl$#-          %52.3 = Identical                %52.2, <(rir::DispatchTable*)0x55c18d4e8c60>
  void                    Assume             D     %52.3, %47.3 (CallTarget@0x55c18d02d458[Call#61])
  val?            %52.5 = Force!             d     %52.0, 
  (cls|spec|blt)  %52.6 = ChkFunction        e     %52.5
  env             e52.7 = CallSafeBuiltin          environment(%52.6) 
  ct              %52.8 = PushContext        lCL   "linemitre", numnotnull("linemitre"), %52.6, e1.0
  val?^ | miss    %52.9 = LdVar              eR    is.na, e52.7
  lgl$#-          %52.10 = Identical                <blt is.na>, %52.9   <true>
  void                    Assume             D     %52.10, %49.2 (DeadBranchReached@0x55c18d8fc288[Test#0])
  cp              %52.12 = Checkpoint                -> BB54 (default) | BB53 (if assume failed)
BB54   <- [52]
  val?^ | miss    %54.0 = LdVar              eR    match, e52.7
  lgl$#-          %54.1 = Identical                %54.0, function(x, table, nomatch=NA, incomparables=N|...
  void                    Assume             D     %54.1, %52.12 (CallTarget@0x55c18d8fc288[Call#3])
  val?^ | miss    %54.3 = LdVar              eR    names, e52.7
  lgl$#-          %54.4 = Identical                %54.3, <blt names>
  void                    Assume             D     %54.4, %52.12 (CallTarget@0x55c18d8fc288[Call#4])
  val?^ | miss    %54.6 = LdVar              eR    gpars, e52.7
  env             e54.7 = MkEnv              l     gparname="linemitre", parent=e52.7, context 1
  val?            %54.8 = Force!<lazy>       !v    %54.6, e54.7   <vec+>
  val?            %54.9 = CallBuiltin        !v    names(%54.8) e54.7   <(nil|str)->
  lgl$#-          %54.10 = IsType                   %54.9 isA val?-
  cp              %54.11 = Checkpoint                -> BB56 (default) | BB55 (if assume failed)
BB53   <- [52]
  fs              %53.0 = FrameState         R     0x55c18d4512d0+1902: [], env=e1.0
  env             e53.1 = (MkEnv)            l     gparname="linemitre", parent=e52.7, context 1
  fs              %53.2 = FrameState         R     0x55c18d1d7fc0+60: [<blt is.na>], env=e53.1, next=%53.0
  void                    Deopt              !v    %53.2   !
BB56   <- [54]
  void                    Assume             D     %54.10, %54.11 (Typecheck@0x55c18b1f2b30[Type#1])
  val?-           %56.1 = CastType           d     dn %54.9   <(nil|str)->
  val+            %56.2 = CallSafeBuiltin    wed   match("linemitre", %56.1, NA, nil)    <int$->
  lgl$#-          %56.3 = IsType                   %56.2 isA int$-
  cp              %56.4 = Checkpoint                -> BB58 (default) | BB57 (if assume failed)
BB55   <- [54]
  fs              %55.0 = FrameState         R     0x55c18d4512d0+1902: [], env=e1.0
  prom-           %55.1 = MkArg                    unboundValue, osr[0x55c18c164620]_p46, e54.7
  val?^           %55.2 = CastType                 up %55.1
  prom-           %55.3 = MkArg                    unboundValue, osr[0x55c18c164620]_p45, e54.7
  val?^           %55.4 = CastType                 up %55.3
  fs              %55.5 = FrameState         R     0x55c18d1d7fc0+97: [<blt is.na>], env=e54.7, next=%55.0
  env             e55.6 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%55.2, x=%55.4, parent=R_BaseNamespace, context 0
  fs              %55.7 = FrameState         R     0x55c18ba1ad70+23: ["linemitre"], env=e55.6, next=%55.5
  fs              %55.8 = FrameState         R     0x55c18d178990+32(pr): [%54.9], env=e54.7, next=%55.7
  void                    Deopt              !v    %55.8   !
BB58   <- [56]
  void                    Assume             D     %56.3, %56.4 (Typecheck@0x55c18d8fc288[Type#7])
  int$-           %58.1 = CastType           d     dn %56.2
  lgl$-           %58.2 = CallSafeBuiltin    wed   is.na(%58.1)    <lgl$->
  lgl$-           %58.3 = Not                d     %58.2, elided
  lgl$#-          %58.4 = CheckTrueFalse     e     %58.3
  void                    Branch                   %58.4 -> BB107 (if true) | BB59 (if false)
BB57   <- [56]
  fs              %57.0 = FrameState         R     0x55c18d4512d0+1902: [], env=e1.0
  prom-           %57.1 = MkArg                    %56.1, osr[0x55c18c164620]_p46 (!refl), e54.7
  val?~           %57.2 = CastType                 up %57.1
  prom-           %57.3 = MkArg                    unboundValue, osr[0x55c18c164620]_p45, e54.7
  val?^           %57.4 = CastType                 up %57.3
  fs              %57.5 = FrameState         R     0x55c18d1d7fc0+97: [<blt is.na>], env=e54.7, next=%57.0
  env             e57.6 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%57.2, x=%57.4, parent=R_BaseNamespace, context 0
  fs              %57.7 = FrameState         R     0x55c18ba1ad70+69: [%56.2], env=e57.6, next=%57.5
  void                    Deopt              !v    %57.7   !
BB107   <- [58]
  val?^ | miss    %107.0 = LdVar              eR    gpars, e54.7
  val?            %107.1 = Force!             !v    %107.0, e54.7   <val?_>
  lgl$#-          %107.2 = IsType                   %107.1 isA val+   <lgl$#-@?>
  void                    Branch                   %107.2 -> BB114 (if true) | BB108 (if false)
BB59   <- [58]
  goto BB60
BB114   <- [107]
  val?^ | miss    %114.0 = LdVar              eR    gparname, e54.7
  val?            %114.1 = Force!             !v    %114.0, e54.7   <val?_>
  goto BB109
BB108   <- [107]
  prom-           %108.0 = MkArg                    unboundValue, osr[0x55c18c164620]_p48, e54.7
  goto BB109
BB60   <- [59, 113]
  val?            %60.0 = PopContext         C     nil, %52.8
  cp              %60.1 = Checkpoint                -> BB62 (default) | BB61 (if assume failed)
BB109   <- [108, 114]
  val?            %109.0 = Phi                      %114.1:BB114, %108.0:BB108
  val?            %109.1 = Extract2_1D        !v    %107.1, %109.0, e54.7   <val?_>
  lgl$-           %109.2 = Is                       %109.1, NULL
  lgl$#-          %109.3 = CheckTrueFalse     e     %109.2
  void                    Branch                   %109.3 -> BB111 (if true) | BB110 (if false)
BB62   <- [60]
  val?^ | miss    %62.0 = LdVar              eR    is.na, e1.0
  lgl$#-          %62.1 = Identical                <blt is.na>, %62.0   <true>
  void                    Assume             D     %62.1, %60.1 (DeadBranchReached@0x55c18d02d458[Test#5])
  val?^ | miss    %62.3 = LdVar              eR    match, e1.0
  lgl$#-          %62.4 = Identical                %62.3, function(x, table, nomatch=NA, incomparables=N|...
  void                    Assume             D     %62.4, %60.1 (CallTarget@0x55c18d02d458[Call#65])
  val?^ | miss    %62.6 = LdVar              eR    names, e1.0
  lgl$#-          %62.7 = Identical                %62.6, <blt names>
  void                    Assume             D     %62.7, %60.1 (CallTarget@0x55c18d02d458[Call#66])
  val?^ | miss    %62.9 = LdVar              eR    gpars, e1.0
  val?            %62.10 = Force!<wrapped>    !v    %62.9, e1.0   <vec+>
  val?            %62.11 = CallBuiltin        !v    names(%62.10) e1.0   <(nil|str)->
  lgl$#-          %62.12 = IsType                   %62.11 isA val?-
  cp              %62.13 = Checkpoint                -> BB64 (default) | BB63 (if assume failed)
BB61   <- [60]
  fs              %61.0 = FrameState         R     0x55c18d4512d0+1902: [%60.0], env=e1.0
  void                    Deopt              !v    %61.0   !
BB111   <- [109]
  val?^ | miss    %111.0 = LdVar              eR    gpars, e52.7   <val?_>
  val?^ | miss    %111.1 = LdVar              eR    gparname, e54.7
  val?            %111.2 = Force!             !v    %111.1, e54.7   <val?_>
  val?            %111.3 = Force!             !v    %111.0, e54.7
  lgl$#-          %111.4 = IsType                   %111.3 isA val?+
  lgl$#-          %111.5 = IsType                   %111.2 isA val?+
  cp              %111.6 = Checkpoint                -> BB113 (default) | BB112 (if assume failed)
BB110   <- [109]
  fs              %110.0 = FrameState         R     0x55c18d4512d0+1902: [], env=e1.0
  (cls|spec|blt)  %110.1 = LdFun              !v    check.length, e54.7
  fs              %110.2 = FrameState         R     0x55c18d1d7fc0+224: [%110.1], env=e54.7, next=%110.0
  void                    Deopt              !v    %110.2, DeadCall@0x55c18d8fc288[Call#5], %110.1   !
BB64   <- [62]
  void                    Assume             D     %62.12, %62.13 (Typecheck@0x55c18b1f2b30[Type#1])
  val?-           %64.1 = CastType           d     dn %62.11   <(nil|str)->
  val+            %64.2 = CallSafeBuiltin    wed   match("linemitre", %64.1, NA, nil)    <int$->
  lgl$#-          %64.3 = IsType                   %64.2 isA int$-
  cp              %64.4 = Checkpoint                -> BB66 (default) | BB65 (if assume failed)
BB63   <- [62]
  fs              %63.0 = FrameState         R     0x55c18d4512d0+2000: [<blt is.na>], env=e1.0
  prom-           %63.1 = MkArg                    unboundValue, osr[0x55c18c164620]_p10, e1.0
  val?^           %63.2 = CastType                 up %63.1
  env             e63.3 = (MkEnv)            l     x="linemitre", table=%63.2, nomatch(miss)=NA, incomparables(miss)=nil, parent=R_BaseNamespace, context 0
  fs              %63.4 = FrameState         R     0x55c18ba1ad70+23: ["linemitre"], env=e63.3, next=%63.0
  fs              %63.5 = FrameState         R     0x55c18d516ea0+32(pr): [%62.11], env=e1.0, next=%63.4
  void                    Deopt              !v    %63.5   !
BB113   <- [111]
  void                    Assume             D     %111.4, %111.6 (Typecheck@0x55c18d8fc288[Type#25])
  val?+           %113.1 = CastType           d     dn %111.3
  void                    Assume             D     %111.5, %111.6 (Typecheck@0x55c18d8fc288[Type#26])
  val?+           %113.3 = CastType           d     dn %111.2   <val?_>
  val?+           %113.4 = Subassign2_1D      wed   nil, %113.1, %113.3, elided
  void                    StVarSuper         lRW   gpars, %113.4, e54.7
  goto BB60
BB112   <- [111]
  fs              %112.0 = FrameState         R     0x55c18d4512d0+1902: [], env=e1.0
  fs              %112.1 = FrameState         R     0x55c18d1d7fc0+480: [nil, nil, %111.3, %111.2], env=e54.7, next=%112.0
  void                    Deopt              !v    %112.1   !
BB66   <- [64]
  void                    Assume             D     %64.3, %64.4 (Typecheck@0x55c18d02d458[Type#80])
  int$-           %66.1 = CastType           d     dn %64.2
  lgl$-           %66.2 = CallSafeBuiltin    wed   is.na(%66.1)    <lgl$->
  cp              %66.3 = Checkpoint                -> BB68 (default) | BB67 (if assume failed)
BB65   <- [64]
  prom-           %65.0 = MkArg                    %64.1, osr[0x55c18c164620]_p10 (!refl), e1.0
  val?~           %65.1 = CastType                 up %65.0
  fs              %65.2 = FrameState         R     0x55c18d4512d0+2000: [<blt is.na>], env=e1.0
  env             e65.3 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%65.1, x="linemitre", parent=R_BaseNamespace, context 0
  fs              %65.4 = FrameState         R     0x55c18ba1ad70+69: [%64.2], env=e65.3, next=%65.2
  void                    Deopt              !v    %65.4   !
BB68   <- [66]
  lgl$-           %68.0 = Not                d     %66.2, elided
  lgl$#-          %68.1 = CheckTrueFalse     e     %68.0
  void                    Branch                   %68.1 -> BB104 (if true) | BB69 (if false)
BB67   <- [66]
  fs              %67.0 = FrameState         R     0x55c18d4512d0+2022: [%66.2], env=e1.0
  void                    Deopt              !v    %67.0   !
BB104   <- [68]
  val?^ | miss    %104.0 = LdVar              eR    any, e1.0
  lgl$#-          %104.1 = Identical                <blt any>, %104.0   <@?>
  void                    Branch                   %104.1 -> BB106 (if true) | BB105 (if false)
BB69   <- [68]
  val?^ | miss    %69.0 = LdVar              eR    is.na, e1.0
  lgl$#-          %69.1 = Identical                <blt is.na>, %69.0   <true>
  void                    Assume             D     %69.1, %66.3 (DeadBranchReached@0x55c18d02d458[Test#7])
  val?^ | miss    %69.3 = LdVar              eR    match, e1.0
  lgl$#-          %69.4 = Identical                %69.3, function(x, table, nomatch=NA, incomparables=N|...
  void                    Assume             D     %69.4, %66.3 (CallTarget@0x55c18d02d458[Call#74])
  val?^ | miss    %69.6 = LdVar              eR    names, e1.0
  lgl$#-          %69.7 = Identical                %69.6, <blt names>
  void                    Assume             D     %69.7, %66.3 (CallTarget@0x55c18d02d458[Call#75])
  val?^ | miss    %69.9 = LdVar              eR    gpars, e1.0
  val?            %69.10 = Force!<wrapped>    !v    %69.9, e1.0   <vec+>
  val?            %69.11 = CallBuiltin        !v    names(%69.10) e1.0   <(nil|str)->
  lgl$#-          %69.12 = IsType                   %69.11 isA val?-
  cp              %69.13 = Checkpoint                -> BB71 (default) | BB70 (if assume failed)
BB106   <- [104]
  (cls|spec|blt)  %106.0 = LdFun              !v    $, e1.0
  fs              %106.1 = FrameState         R     0x55c18d4512d0+2104: [<blt any>, %106.0], env=e1.0
  void                    Deopt              !v    %106.1, DeadCall@0x55c18d02d458[Call#69], %106.0   !
BB105   <- [104]
  (cls|spec|blt)  %105.0 = LdFun              !v    any, e1.0
  fs              %105.1 = FrameState         R     0x55c18d4512d0+2067: [%105.0], env=e1.0
  void                    Deopt              !v    %105.1, DeadCall@0x55c18d02d458[Call#67], %105.0   !
BB71   <- [69]
  void                    Assume             D     %69.12, %69.13 (Typecheck@0x55c18b1f2b30[Type#1])
  val?-           %71.1 = CastType           d     dn %69.11   <(nil|str)->
  val+            %71.2 = CallSafeBuiltin    wed   match("alpha", %71.1, NA, nil)    <int$->
  lgl$#-          %71.3 = IsType                   %71.2 isA int$-
  cp              %71.4 = Checkpoint                -> BB73 (default) | BB72 (if assume failed)
BB70   <- [69]
  fs              %70.0 = FrameState         R     0x55c18d4512d0+2316: [<blt is.na>], env=e1.0
  prom-           %70.1 = MkArg                    unboundValue, osr[0x55c18c164620]_p12, e1.0
  val?^           %70.2 = CastType                 up %70.1
  env             e70.3 = (MkEnv)            l     x="alpha", table=%70.2, nomatch(miss)=NA, incomparables(miss)=nil, parent=R_BaseNamespace, context 0
  fs              %70.4 = FrameState         R     0x55c18ba1ad70+23: ["alpha"], env=e70.3, next=%70.0
  fs              %70.5 = FrameState         R     0x55c18d4341e0+32(pr): [%69.11], env=e1.0, next=%70.4
  void                    Deopt              !v    %70.5   !
BB73   <- [71]
  void                    Assume             D     %71.3, %71.4 (Typecheck@0x55c18d02d458[Type#96])
  int$-           %73.1 = CastType           d     dn %71.2
  lgl$-           %73.2 = CallSafeBuiltin    wed   is.na(%73.1)    <lgl$->
  cp              %73.3 = Checkpoint                -> BB75 (default) | BB74 (if assume failed)
BB72   <- [71]
  prom-           %72.0 = MkArg                    %71.1, osr[0x55c18c164620]_p12 (!refl), e1.0
  val?~           %72.1 = CastType                 up %72.0
  fs              %72.2 = FrameState         R     0x55c18d4512d0+2316: [<blt is.na>], env=e1.0
  env             e72.3 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%72.1, x="alpha", parent=R_BaseNamespace, context 0
  fs              %72.4 = FrameState         R     0x55c18ba1ad70+69: [%71.2], env=e72.3, next=%72.2
  void                    Deopt              !v    %72.4   !
BB75   <- [73]
  lgl$-           %75.0 = Not                d     %73.2, elided
  lgl$#-          %75.1 = CheckTrueFalse     e     %75.0
  void                    Branch                   %75.1 -> BB101 (if true) | BB76 (if false)
BB74   <- [73]
  fs              %74.0 = FrameState         R     0x55c18d4512d0+2338: [%73.2], env=e1.0
  void                    Deopt              !v    %74.0   !
BB101   <- [75]
  val?^ | miss    %101.0 = LdVar              eR    any, e1.0
  lgl$#-          %101.1 = Identical                <blt any>, %101.0   <@?>
  void                    Branch                   %101.1 -> BB103 (if true) | BB102 (if false)
BB76   <- [75]
  val?^ | miss    %76.0 = LdVar              eR    is.na, e1.0
  lgl$#-          %76.1 = Identical                <blt is.na>, %76.0   <true>
  void                    Assume             D     %76.1, %73.3 (DeadBranchReached@0x55c18d02d458[Test#10])
  val?^ | miss    %76.3 = LdVar              eR    match, e1.0
  lgl$#-          %76.4 = Identical                %76.3, function(x, table, nomatch=NA, incomparables=N|...
  void                    Assume             D     %76.4, %73.3 (CallTarget@0x55c18d02d458[Call#86])
  val?^ | miss    %76.6 = LdVar              eR    names, e1.0
  lgl$#-          %76.7 = Identical                %76.6, <blt names>
  void                    Assume             D     %76.7, %73.3 (CallTarget@0x55c18d02d458[Call#87])
  val?^ | miss    %76.9 = LdVar              eR    gpars, e1.0
  val?            %76.10 = Force!<wrapped>    !v    %76.9, e1.0   <vec+>
  val?            %76.11 = CallBuiltin        !v    names(%76.10) e1.0   <(nil|str)->
  lgl$#-          %76.12 = IsType                   %76.11 isA val?-
  cp              %76.13 = Checkpoint                -> BB78 (default) | BB77 (if assume failed)
BB103   <- [101]
  (cls|spec|blt)  %103.0 = LdFun              !v    $, e1.0
  fs              %103.1 = FrameState         R     0x55c18d4512d0+2420: [<blt any>, %103.0], env=e1.0
  void                    Deopt              !v    %103.1, DeadCall@0x55c18d02d458[Call#78], %103.0   !
BB102   <- [101]
  (cls|spec|blt)  %102.0 = LdFun              !v    any, e1.0
  fs              %102.1 = FrameState         R     0x55c18d4512d0+2383: [%102.0], env=e1.0
  void                    Deopt              !v    %102.1, DeadCall@0x55c18d02d458[Call#76], %102.0   !
BB78   <- [76]
  void                    Assume             D     %76.12, %76.13 (Typecheck@0x55c18b1f2b30[Type#1])
  val?-           %78.1 = CastType           d     dn %76.11   <(nil|str)->
  val+            %78.2 = CallSafeBuiltin    wed   match("font", %78.1, NA, nil)    <int$->
  lgl$#-          %78.3 = IsType                   %78.2 isA int$-
  cp              %78.4 = Checkpoint                -> BB80 (default) | BB79 (if assume failed)
BB77   <- [76]
  fs              %77.0 = FrameState         R     0x55c18d4512d0+2777: [<blt is.na>], env=e1.0
  prom-           %77.1 = MkArg                    unboundValue, osr[0x55c18c164620]_p14, e1.0
  val?^           %77.2 = CastType                 up %77.1
  env             e77.3 = (MkEnv)            l     x="font", table=%77.2, nomatch(miss)=NA, incomparables(miss)=nil, parent=R_BaseNamespace, context 0
  fs              %77.4 = FrameState         R     0x55c18ba1ad70+23: ["font"], env=e77.3, next=%77.0
  fs              %77.5 = FrameState         R     0x55c18d5d3ea0+32(pr): [%76.11], env=e1.0, next=%77.4
  void                    Deopt              !v    %77.5   !
BB80   <- [78]
  void                    Assume             D     %78.3, %78.4 (Typecheck@0x55c18d02d458[Type#121])
  int$-           %80.1 = CastType           d     dn %78.2
  lgl$-           %80.2 = CallSafeBuiltin    wed   is.na(%80.1)    <lgl$->
  cp              %80.3 = Checkpoint                -> BB82 (default) | BB81 (if assume failed)
BB79   <- [78]
  prom-           %79.0 = MkArg                    %78.1, osr[0x55c18c164620]_p14 (!refl), e1.0
  val?~           %79.1 = CastType                 up %79.0
  fs              %79.2 = FrameState         R     0x55c18d4512d0+2777: [<blt is.na>], env=e1.0
  env             e79.3 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%79.1, x="font", parent=R_BaseNamespace, context 0
  fs              %79.4 = FrameState         R     0x55c18ba1ad70+69: [%78.2], env=e79.3, next=%79.2
  void                    Deopt              !v    %79.4   !
BB82   <- [80]
  lgl$-           %82.0 = Not                d     %80.2, elided
  lgl$#-          %82.1 = CheckTrueFalse     e     %82.0
  void                    Branch                   %82.1 -> BB100 (if true) | BB83 (if false)
BB81   <- [80]
  fs              %81.0 = FrameState         R     0x55c18d4512d0+2799: [%80.2], env=e1.0
  void                    Deopt              !v    %81.0   !
BB100   <- [82]
  (cls|spec|blt)  %100.0 = LdFun              !v    $, e1.0
  fs              %100.1 = FrameState         R     0x55c18d4512d0+2821: [%100.0], env=e1.0
  void                    Deopt              !v    %100.1, DeadCall@0x55c18d02d458[Call#88], %100.0   !
BB83   <- [82]
  val?^ | miss    %83.0 = LdVar              eR    is.na, e1.0
  lgl$#-          %83.1 = Identical                <blt is.na>, %83.0   <true>
  void                    Assume             D     %83.1, %80.3 (DeadBranchReached@0x55c18d02d458[Test#11])
  val?^ | miss    %83.3 = LdVar              eR    match, e1.0
  lgl$#-          %83.4 = Identical                %83.3, function(x, table, nomatch=NA, incomparables=N|...
  void                    Assume             D     %83.4, %80.3 (CallTarget@0x55c18d02d458[Call#99])
  val?^ | miss    %83.6 = LdVar              eR    names, e1.0
  lgl$#-          %83.7 = Identical                %83.6, <blt names>
  void                    Assume             D     %83.7, %80.3 (CallTarget@0x55c18d02d458[Call#100])
  val?^ | miss    %83.9 = LdVar              eR    gpars, e1.0
  val?            %83.10 = Force!<wrapped>    !v    %83.9, e1.0   <vec+>
  val?            %83.11 = CallBuiltin        !v    names(%83.10) e1.0   <(nil|str)->
  lgl$#-          %83.12 = IsType                   %83.11 isA val?-
  cp              %83.13 = Checkpoint                -> BB85 (default) | BB84 (if assume failed)
BB85   <- [83]
  void                    Assume             D     %83.12, %83.13 (Typecheck@0x55c18b1f2b30[Type#1])
  val?-           %85.1 = CastType           d     dn %83.11   <(nil|str)->
  val+            %85.2 = CallSafeBuiltin    wed   match("fontfamily", %85.1, NA, nil)    <int$->
  lgl$#-          %85.3 = IsType                   %85.2 isA int$-
  cp              %85.4 = Checkpoint                -> BB87 (default) | BB86 (if assume failed)
BB84   <- [83]
  fs              %84.0 = FrameState         R     0x55c18d4512d0+3080: [<blt is.na>], env=e1.0
  prom-           %84.1 = MkArg                    unboundValue, osr[0x55c18c164620]_p16, e1.0
  val?^           %84.2 = CastType                 up %84.1
  env             e84.3 = (MkEnv)            l     x="fontfamily", table=%84.2, nomatch(miss)=NA, incomparables(miss)=nil, parent=R_BaseNamespace, context 0
  fs              %84.4 = FrameState         R     0x55c18ba1ad70+23: ["fontfamily"], env=e84.3, next=%84.0
  fs              %84.5 = FrameState         R     0x55c18d2303b0+32(pr): [%83.11], env=e1.0, next=%84.4
  void                    Deopt              !v    %84.5   !
BB87   <- [85]
  void                    Assume             D     %85.3, %85.4 (Typecheck@0x55c18d02d458[Type#141])
  int$-           %87.1 = CastType           d     dn %85.2
  lgl$-           %87.2 = CallSafeBuiltin    wed   is.na(%87.1)    <lgl$->
  cp              %87.3 = Checkpoint                -> BB89 (default) | BB88 (if assume failed)
BB86   <- [85]
  prom-           %86.0 = MkArg                    %85.1, osr[0x55c18c164620]_p16 (!refl), e1.0
  val?~           %86.1 = CastType                 up %86.0
  fs              %86.2 = FrameState         R     0x55c18d4512d0+3080: [<blt is.na>], env=e1.0
  env             e86.3 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%86.1, x="fontfamily", parent=R_BaseNamespace, context 0
  fs              %86.4 = FrameState         R     0x55c18ba1ad70+69: [%85.2], env=e86.3, next=%86.2
  void                    Deopt              !v    %86.4   !
BB89   <- [87]
  lgl$-           %89.0 = Not                d     %87.2, elided
  lgl$#-          %89.1 = CheckTrueFalse     e     %89.0
  void                    Branch                   %89.1 -> BB99 (if true) | BB90 (if false)
BB88   <- [87]
  fs              %88.0 = FrameState         R     0x55c18d4512d0+3102: [%87.2], env=e1.0
  void                    Deopt              !v    %88.0   !
BB99   <- [89]
  (cls|spec|blt)  %99.0 = LdFun              !v    $, e1.0
  fs              %99.1 = FrameState         R     0x55c18d4512d0+3124: [%99.0], env=e1.0
  void                    Deopt              !v    %99.1, DeadCall@0x55c18d02d458[Call#101], %99.0   !
BB90   <- [89]
  val?^ | miss    %90.0 = LdVar              eR    is.na, e1.0
  lgl$#-          %90.1 = Identical                <blt is.na>, %90.0   <true>
  void                    Assume             D     %90.1, %87.3 (DeadBranchReached@0x55c18d02d458[Test#12])
  val?^ | miss    %90.3 = LdVar              eR    match, e1.0
  lgl$#-          %90.4 = Identical                %90.3, function(x, table, nomatch=NA, incomparables=N|...
  void                    Assume             D     %90.4, %87.3 (CallTarget@0x55c18d02d458[Call#113])
  val?^ | miss    %90.6 = LdVar              eR    names, e1.0
  lgl$#-          %90.7 = Identical                %90.6, <blt names>
  void                    Assume             D     %90.7, %87.3 (CallTarget@0x55c18d02d458[Call#114])
  val?^ | miss    %90.9 = LdVar              eR    gpars, e1.0
  val?            %90.10 = Force!<wrapped>    !v    %90.9, e1.0   <vec+>
  val?            %90.11 = CallBuiltin        !v    names(%90.10) e1.0   <(nil|str)->
  lgl$#-          %90.12 = IsType                   %90.11 isA val?-
  cp              %90.13 = Checkpoint                -> BB92 (default) | BB91 (if assume failed)
BB92   <- [90]
  void                    Assume             D     %90.12, %90.13 (Typecheck@0x55c18b1f2b30[Type#1])
  val?-           %92.1 = CastType           d     dn %90.11   <(nil|str)->
  val+            %92.2 = CallSafeBuiltin    wed   match("fontface", %92.1, NA, nil)    <int$->
  lgl$#-          %92.3 = IsType                   %92.2 isA int$-
  cp              %92.4 = Checkpoint                -> BB94 (default) | BB93 (if assume failed)
BB91   <- [90]
  fs              %91.0 = FrameState         R     0x55c18d4512d0+3416: [<blt is.na>], env=e1.0
  prom-           %91.1 = MkArg                    unboundValue, osr[0x55c18c164620]_p18, e1.0
  val?^           %91.2 = CastType                 up %91.1
  env             e91.3 = (MkEnv)            l     x="fontface", table=%91.2, nomatch(miss)=NA, incomparables(miss)=nil, parent=R_BaseNamespace, context 0
  fs              %91.4 = FrameState         R     0x55c18ba1ad70+23: ["fontface"], env=e91.3, next=%91.0
  fs              %91.5 = FrameState         R     0x55c18d6f3560+32(pr): [%90.11], env=e1.0, next=%91.4
  void                    Deopt              !v    %91.5   !
BB94   <- [92]
  void                    Assume             D     %92.3, %92.4 (Typecheck@0x55c18d02d458[Type#161])
  int$-           %94.1 = CastType           d     dn %92.2
  lgl$-           %94.2 = CallSafeBuiltin    wed   is.na(%94.1)    <lgl$->
  lgl$-           %94.3 = Not                d     %94.2, elided
  lgl$#-          %94.4 = CheckTrueFalse     e     %94.3
  void                    Branch                   %94.4 -> BB96 (if true) | BB95 (if false)
BB93   <- [92]
  prom-           %93.0 = MkArg                    %92.1, osr[0x55c18c164620]_p18 (!refl), e1.0
  val?~           %93.1 = CastType                 up %93.0
  fs              %93.2 = FrameState         R     0x55c18d4512d0+3416: [<blt is.na>], env=e1.0
  env             e93.3 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%93.1, x="fontface", parent=R_BaseNamespace, context 0
  fs              %93.4 = FrameState         R     0x55c18ba1ad70+69: [%92.2], env=e93.3, next=%93.2
  void                    Deopt              !v    %93.4   !
BB96   <- [94]
  val?^ | miss    %96.0 = LdVar              eR    is.na, e1.0
  lgl$#-          %96.1 = Identical                <blt is.na>, %96.0   <@?>
  void                    Branch                   %96.1 -> BB98 (if true) | BB97 (if false)
BB95   <- [94]
  val?^ | miss    %95.0 = LdVar              eR    gpars, e1.0
  void                    Visible            v     
  val?            %95.2 = Force!<wrapped>    !     %95.0, e1.0   <vec+>
  void                    Return             l     %95.2
BB98   <- [96]
  (cls|spec|blt)  %98.0 = LdFun              !v    match, e1.0
  fs              %98.1 = FrameState         R     0x55c18d4512d0+3520: [<blt is.na>, %98.0], env=e1.0
  void                    Deopt              !v    %98.1, DeadCall@0x55c18d02d458[Call#118], %98.0   !
BB97   <- [96]
  (cls|spec|blt)  %97.0 = LdFun              !v    is.na, e1.0
  fs              %97.1 = FrameState         R     0x55c18d4512d0+3483: [%97.0], env=e1.0
  void                    Deopt              !v    %97.1, DeadCall@0x55c18d02d458[Call#115], %97.0   !
Prom 0:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     names, <0x55c18aee5470>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, osr[0x55c18c164620]_p1, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <(nil|str)->
  void                    Return             l     %1.3
Prom 1:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    gpars, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 2:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     names, <0x55c18aee5470>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, osr[0x55c18c164620]_p3, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <(nil|str)->
  void                    Return             l     %1.3
Prom 3:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    gpars, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 4:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     names, <0x55c18aee5470>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, osr[0x55c18c164620]_p5, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <(nil|str)->
  void                    Return             l     %1.3
Prom 5:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    gpars, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 6:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     names, <0x55c18aee5470>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, osr[0x55c18c164620]_p7, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <(nil|str)->
  void                    Return             l     %1.3
Prom 7:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    gpars, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 8:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     names, <0x55c18aee5470>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, osr[0x55c18c164620]_p9, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <(nil|str)->
  void                    Return             l     %1.3
Prom 9:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    gpars, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 10:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     names, <0x55c18aee5470>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, osr[0x55c18c164620]_p11, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <(nil|str)->
  void                    Return             l     %1.3
Prom 11:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    gpars, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 12:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     names, <0x55c18aee5470>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, osr[0x55c18c164620]_p13, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <(nil|str)->
  void                    Return             l     %1.3
Prom 13:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    gpars, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 14:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     names, <0x55c18aee5470>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, osr[0x55c18c164620]_p15, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <(nil|str)->
  void                    Return             l     %1.3
Prom 15:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    gpars, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 16:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     names, <0x55c18aee5470>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, osr[0x55c18c164620]_p17, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <(nil|str)->
  void                    Return             l     %1.3
Prom 17:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    gpars, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 18:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     names, <0x55c18aee5470>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, osr[0x55c18c164620]_p19, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <(nil|str)->
  void                    Return             l     %1.3
Prom 19:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    gpars, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 20:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    gpars, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 21:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    fill, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 22:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     $, <0x55c18aee4c10>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, osr[0x55c18c164620]_p23, e1.0
  prom-           %1.3  = MkArg                    unboundValue, osr[0x55c18c164620]_p24, e1.0
  val?            %1.4  = Call               !     %1.1(%1.2, %1.3) e1.0   <str$->
  void                    Return             l     %1.4
Prom 23:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    gpars, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 24:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    fill, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 25:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    gpars, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 26:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    col, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 27:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     $, e1.0
  prom-           %1.2  = MkArg                    unboundValue, osr[0x55c18c164620]_p28, e1.0
  prom-           %1.3  = MkArg                    unboundValue, osr[0x55c18c164620]_p29, e1.0
  val?            %1.4  = Call               !     %1.1(%1.2, %1.3) e1.0   <val?_>
  void                    Return             l     %1.4
Prom 28:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    gpars, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 29:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    col, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 30:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    gparname, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 31:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     names, <0x55c18aee5470>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, osr[0x55c18c164620]_p32, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <(nil|str)->
  void                    Return             l     %1.3
Prom 32:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    gpars, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 33:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    gparname, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 40:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    x, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <(nil|str)->
  void                    Return             l     %1.3
Prom 45:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    gparname, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 46:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     names, <0x55c18aee5470>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, osr[0x55c18c164620]_p47, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <(nil|str)->
  void                    Return             l     %1.3
Prom 47:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    gpars, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 48:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    gparname, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3

│ osr[0x55c18c164620]                                                          │
└──────────────────────────────────────────────────────────────────────────────┘
