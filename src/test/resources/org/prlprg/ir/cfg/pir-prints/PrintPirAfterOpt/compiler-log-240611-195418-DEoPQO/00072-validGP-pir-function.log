
┌──────────────────────────────────────────────────────────────────────────────┐
│ validGP[0x55c18b8d28b0]                                                      │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch                                      │
│ Properties:                                                                  │
├────── PIR Version After Optimizations
validGP[0x55c18b8d28b0]
BB0
  goto BB1
BB1   <- [0]
  val?^           %1.0  = LdArg                    0
  env             e1.1  = MkEnv              l     gpars=%1.0, parent=<env 0x55c18d083160>, context 1
  cls             %1.2  = MkCls                    check.length, e1.1
  cls             %1.3  = MkCls                    numnotnull, e1.1
  cls             %1.4  = MkCls                    checkNA, e1.1
  void                    StVar              lW    check.length, %1.2, e1.1
  void                    StVar              lW    numnotnull, %1.3, e1.1
  void                    StVar              lW    checkNA, %1.4, e1.1
  cp              %1.8  = Checkpoint                -> BB2 (default) | BB251 (if assume failed)
BB2   <- [1]
  ct              %2.0  = PushContext        lCL   "fontsize", numnotnull("fontsize"), %1.3, e1.1
  val?^ | miss    %2.1  = LdVar              eR    is.na, <env 0x55c18d083160>
  lgl$#-          %2.2  = Identical                <blt is.na>, %2.1   <true>
  void                    Assume             D     %2.2, %1.8 (DeadBranchReached@0x55c18d8fc288[Test#0])
  cp              %2.4  = Checkpoint                -> BB4 (default) | BB3 (if assume failed)
BB251   <- [1]
  fs              %251.0 = FrameState         R     0x55c18d4512d0+75: [], env=e1.1
  void                    Deopt              !v    %251.0
BB4   <- [2]
  val?^ | miss    %4.0  = LdVar              eR    match, <env 0x55c18d083160>
  lgl$#-          %4.1  = Identical                %4.0, function(x, table, nomatch=NA, incomparables=N|...
  void                    Assume             D     %4.1, %2.4 (CallTarget@0x55c18d8fc288[Call#3])
  val?^ | miss    %4.3  = LdVar              eR    names, <env 0x55c18d083160>
  lgl$#-          %4.4  = Identical                %4.3, <blt names>
  void                    Assume             D     %4.4, %2.4 (CallTarget@0x55c18d8fc288[Call#4])
  env             e4.6  = MkEnv              l     gparname="fontsize", parent=e1.1, context 1
  val?            %4.7  = Force!<lazy>       !v    %1.0, e4.6   <vec+>
  val?            %4.8  = CallBuiltin        !v    names(%4.7) e4.6   <(nil|str)->
  lgl$#-          %4.9  = IsType                   %4.8 isA val?-
  cp              %4.10 = Checkpoint                -> BB6 (default) | BB5 (if assume failed)
BB3   <- [2]
  fs              %3.0  = FrameState         R     0x55c18d4512d0+107: [], env=e1.1
  env             e3.1  = (MkEnv)            l     gparname="fontsize", parent=e1.1, context 1
  fs              %3.2  = FrameState         R     0x55c18d1d7fc0+60: [<blt is.na>], env=e3.1, next=%3.0
  void                    Deopt              !v    %3.2   !
BB6   <- [4]
  void                    Assume             D     %4.9, %4.10 (Typecheck@0x55c18b1f2b30[Type#1])
  val?-           %6.1  = CastType           d     dn %4.8   <(nil|str)->
  val+            %6.2  = CallSafeBuiltin    wed   match("fontsize", %6.1, NA, nil)    <int$->
  lgl$#-          %6.3  = IsType                   %6.2 isA int$-
  cp              %6.4  = Checkpoint                -> BB8 (default) | BB7 (if assume failed)
BB5   <- [4]
  fs              %5.0  = FrameState         R     0x55c18d4512d0+107: [], env=e1.1
  fs              %5.1  = FrameState         R     0x55c18d1d7fc0+97: [<blt is.na>], env=e4.6, next=%5.0
  prom-           %5.2  = MkArg                    unboundValue, validGP[0x55c18b8d28b0]_p35, e4.6
  val?^           %5.3  = CastType                 up %5.2
  prom-           %5.4  = MkArg                    unboundValue, validGP[0x55c18b8d28b0]_p34, e4.6
  val?^           %5.5  = CastType                 up %5.4
  env             e5.6  = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%5.3, x=%5.5, parent=R_BaseNamespace, context 0
  fs              %5.7  = FrameState         R     0x55c18ba1ad70+23: ["fontsize"], env=e5.6, next=%5.1
  fs              %5.8  = FrameState         R     0x55c18d178990+32(pr): [%4.8], env=e4.6, next=%5.7
  void                    Deopt              !v    %5.8   !
BB8   <- [6]
  void                    Assume             D     %6.3, %6.4 (Typecheck@0x55c18d8fc288[Type#7])
  int$-           %8.1  = CastType           d     dn %6.2
  lgl$-           %8.2  = CallSafeBuiltin    wed   is.na(%8.1)    <lgl$->
  lgl$-           %8.3  = Not                d     %8.2, elided
  lgl$#-          %8.4  = CheckTrueFalse     e     %8.3
  void                    Branch                   %8.4 -> BB243 (if true) | BB9 (if false)
BB7   <- [6]
  fs              %7.0  = FrameState         R     0x55c18d4512d0+107: [], env=e1.1
  prom-           %7.1  = MkArg                    %6.1, validGP[0x55c18b8d28b0]_p35 (!refl), e4.6
  val?~           %7.2  = CastType                 up %7.1
  fs              %7.3  = FrameState         R     0x55c18d1d7fc0+97: [<blt is.na>], env=e4.6, next=%7.0
  prom-           %7.4  = MkArg                    unboundValue, validGP[0x55c18b8d28b0]_p34, e4.6
  val?^           %7.5  = CastType                 up %7.4
  env             e7.6  = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%7.2, x=%7.5, parent=R_BaseNamespace, context 0
  fs              %7.7  = FrameState         R     0x55c18ba1ad70+69: [%6.2], env=e7.6, next=%7.3
  void                    Deopt              !v    %7.7   !
BB243   <- [8]
  val?^ | miss    %243.0 = LdVar              eR    gpars, e4.6
  val?            %243.1 = Force!             !v    %243.0, e4.6   <val?_>
  lgl$#-          %243.2 = IsType                   %243.1 isA val+   <@?>
  void                    Branch                   %243.2 -> BB250 (if true) | BB244 (if false)
BB9   <- [8]
  goto BB10
BB250   <- [243]
  val?^ | miss    %250.0 = LdVar              eR    gparname, e4.6
  val?            %250.1 = Force!             !v    %250.0, e4.6   <val?_>
  goto BB245
BB244   <- [243]
  prom-           %244.0 = MkArg                    unboundValue, validGP[0x55c18b8d28b0]_p37, e4.6
  goto BB245
BB10   <- [9, 249]
  val?            %10.0 = PopContext         C     nil, %2.0
  cp              %10.1 = Checkpoint                -> BB12 (default) | BB11 (if assume failed)
BB245   <- [244, 250]
  val?            %245.0 = Phi                      %250.1:BB250, %244.0:BB244
  val?            %245.1 = Extract2_1D        !v    %243.1, %245.0, e4.6   <val?_>
  lgl$-           %245.2 = Is                       %245.1, NULL
  lgl$#-          %245.3 = CheckTrueFalse     e     %245.2
  void                    Branch                   %245.3 -> BB247 (if true) | BB246 (if false)
BB12   <- [10]
  val?^ | miss    %12.0 = LdVar              eR    checkNA, e1.1
  lgl$#-          %12.1 = Identical                %12.0, %1.4
  void                    Assume             D     %12.1, %10.1 (CallTarget@0x55c18d02d458[Call#1])
  val?            %12.3 = StaticCall         !v    checkNA[0x55c18e2fcf10]("fontsize") from %1.4 e1.1
  cp              %12.4 = Checkpoint                -> BB14 (default) | BB13 (if assume failed)
BB11   <- [10]
  fs              %11.0 = FrameState         R     0x55c18d4512d0+107: [%10.0], env=e1.1
  void                    Deopt              !v    %11.0   !
BB247   <- [245]
  val?^ | miss    %247.0 = LdVar              eR    gpars, e1.1   <val?_>
  val?^ | miss    %247.1 = LdVar              eR    gparname, e4.6
  val?            %247.2 = Force!             !v    %247.1, e4.6   <val?_>
  val?            %247.3 = Force!             !v    %247.0, e4.6
  lgl$#-          %247.4 = IsType                   %247.3 isA val?+
  lgl$#-          %247.5 = IsType                   %247.2 isA val?+
  cp              %247.6 = Checkpoint                -> BB249 (default) | BB248 (if assume failed)
BB246   <- [245]
  fs              %246.0 = FrameState         R     0x55c18d4512d0+107: [], env=e1.1
  (cls|spec|blt)  %246.1 = LdFun              !v    check.length, e4.6
  fs              %246.2 = FrameState         R     0x55c18d1d7fc0+224: [%246.1], env=e4.6, next=%246.0
  void                    Deopt              !v    %246.2, DeadCall@0x55c18d8fc288[Call#5], %246.1   !
BB14   <- [12]
  val?^ | miss    %14.0 = LdVar              eR    numnotnull, e1.1
  lgl$#-          %14.1 = Identical                %14.0, %1.3
  void                    Assume             D     %14.1, %12.4 (CallTarget@0x55c18d02d458[Call#2])
  ct              %14.3 = PushContext        lCL   "lineheight", numnotnull("lineheight"), %1.3, e1.1
  val?^ | miss    %14.4 = LdVar              eR    is.na, e1.1
  lgl$#-          %14.5 = Identical                <blt is.na>, %14.4   <true>
  void                    Assume             D     %14.5, %12.4 (DeadBranchReached@0x55c18d8fc288[Test#0])
  cp              %14.7 = Checkpoint                -> BB16 (default) | BB15 (if assume failed)
BB13   <- [12]
  fs              %13.0 = FrameState         R     0x55c18d4512d0+140: [%12.3], env=e1.1
  void                    Deopt              !v    %13.0   !
BB249   <- [247]
  void                    Assume             D     %247.4, %247.6 (Typecheck@0x55c18d8fc288[Type#25])
  val?+           %249.1 = CastType           d     dn %247.3
  void                    Assume             D     %247.5, %247.6 (Typecheck@0x55c18d8fc288[Type#26])
  val?+           %249.3 = CastType           d     dn %247.2   <val?_>
  val?+           %249.4 = Subassign2_1D      wed   nil, %249.1, %249.3, elided
  void                    StVarSuper         lRW   gpars, %249.4, e4.6
  goto BB10
BB248   <- [247]
  fs              %248.0 = FrameState         R     0x55c18d4512d0+107: [], env=e1.1
  fs              %248.1 = FrameState         R     0x55c18d1d7fc0+480: [nil, nil, %247.3, %247.2], env=e4.6, next=%248.0
  void                    Deopt              !v    %248.1   !
BB16   <- [14]
  env             e16.0 = MkEnv              l     gparname="lineheight", parent=e1.1, context 1
  val?^ | miss    %16.1 = LdVar              eR    match, e16.0
  lgl$#-          %16.2 = Identical                %16.1, function(x, table, nomatch=NA, incomparables=N|...
  void                    Assume             D     %16.2, %14.7 (CallTarget@0x55c18d8fc288[Call#3])
  val?^ | miss    %16.4 = LdVar              eR    names, e1.1
  lgl$#-          %16.5 = Identical                %16.4, <blt names>
  void                    Assume             D     %16.5, %14.7 (CallTarget@0x55c18d8fc288[Call#4])
  val?^ | miss    %16.7 = LdVar              eR    gpars, e16.0
  val?            %16.8 = Force!<lazy>       !v    %16.7, e16.0   <vec+>
  val?            %16.9 = CallBuiltin        !v    names(%16.8) e16.0   <(nil|str)->
  lgl$#-          %16.10 = IsType                   %16.9 isA val?-
  cp              %16.11 = Checkpoint                -> BB18 (default) | BB17 (if assume failed)
BB15   <- [14]
  fs              %15.0 = FrameState         R     0x55c18d4512d0+173: [], env=e1.1
  env             e15.1 = (MkEnv)            l     gparname="lineheight", parent=e1.1, context 1
  fs              %15.2 = FrameState         R     0x55c18d1d7fc0+60: [<blt is.na>], env=e15.1, next=%15.0
  void                    Deopt              !v    %15.2   !
BB18   <- [16]
  void                    Assume             D     %16.10, %16.11 (Typecheck@0x55c18b1f2b30[Type#1])
  val?-           %18.1 = CastType           d     dn %16.9   <(nil|str)->
  val+            %18.2 = CallSafeBuiltin    wed   match("lineheight", %18.1, NA, nil)    <int$->
  lgl$#-          %18.3 = IsType                   %18.2 isA int$-
  cp              %18.4 = Checkpoint                -> BB20 (default) | BB19 (if assume failed)
BB17   <- [16]
  fs              %17.0 = FrameState         R     0x55c18d4512d0+173: [], env=e1.1
  fs              %17.1 = FrameState         R     0x55c18d1d7fc0+97: [<blt is.na>], env=e16.0, next=%17.0
  prom-           %17.2 = MkArg                    unboundValue, validGP[0x55c18b8d28b0]_p39, e16.0
  val?^           %17.3 = CastType                 up %17.2
  prom-           %17.4 = MkArg                    unboundValue, validGP[0x55c18b8d28b0]_p38, e16.0
  val?^           %17.5 = CastType                 up %17.4
  env             e17.6 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%17.3, x=%17.5, parent=R_BaseNamespace, context 0
  fs              %17.7 = FrameState         R     0x55c18ba1ad70+23: ["lineheight"], env=e17.6, next=%17.1
  fs              %17.8 = FrameState         R     0x55c18d178990+32(pr): [%16.9], env=e16.0, next=%17.7
  void                    Deopt              !v    %17.8   !
BB20   <- [18]
  void                    Assume             D     %18.3, %18.4 (Typecheck@0x55c18d8fc288[Type#7])
  int$-           %20.1 = CastType           d     dn %18.2
  lgl$-           %20.2 = CallSafeBuiltin    wed   is.na(%20.1)    <lgl$->
  lgl$-           %20.3 = Not                d     %20.2, elided
  lgl$#-          %20.4 = CheckTrueFalse     e     %20.3
  void                    Branch                   %20.4 -> BB235 (if true) | BB21 (if false)
BB19   <- [18]
  fs              %19.0 = FrameState         R     0x55c18d4512d0+173: [], env=e1.1
  prom-           %19.1 = MkArg                    %18.1, validGP[0x55c18b8d28b0]_p39 (!refl), e16.0
  val?~           %19.2 = CastType                 up %19.1
  fs              %19.3 = FrameState         R     0x55c18d1d7fc0+97: [<blt is.na>], env=e16.0, next=%19.0
  prom-           %19.4 = MkArg                    unboundValue, validGP[0x55c18b8d28b0]_p38, e16.0
  val?^           %19.5 = CastType                 up %19.4
  env             e19.6 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%19.2, x=%19.5, parent=R_BaseNamespace, context 0
  fs              %19.7 = FrameState         R     0x55c18ba1ad70+69: [%18.2], env=e19.6, next=%19.3
  void                    Deopt              !v    %19.7   !
BB235   <- [20]
  val?^ | miss    %235.0 = LdVar              eR    gpars, e16.0
  val?            %235.1 = Force!             !v    %235.0, e16.0   <val?_>
  lgl$#-          %235.2 = IsType                   %235.1 isA val+   <@?>
  void                    Branch                   %235.2 -> BB242 (if true) | BB236 (if false)
BB21   <- [20]
  goto BB22
BB242   <- [235]
  val?^ | miss    %242.0 = LdVar              eR    gparname, e16.0
  val?            %242.1 = Force!             !v    %242.0, e16.0   <val?_>
  goto BB237
BB236   <- [235]
  prom-           %236.0 = MkArg                    unboundValue, validGP[0x55c18b8d28b0]_p41, e16.0
  goto BB237
BB22   <- [21, 241]
  val?            %22.0 = PopContext         C     nil, %14.3
  cp              %22.1 = Checkpoint                -> BB24 (default) | BB23 (if assume failed)
BB237   <- [236, 242]
  val?            %237.0 = Phi                      %242.1:BB242, %236.0:BB236
  val?            %237.1 = Extract2_1D        !v    %235.1, %237.0, e16.0   <val?_>
  lgl$-           %237.2 = Is                       %237.1, NULL
  lgl$#-          %237.3 = CheckTrueFalse     e     %237.2
  void                    Branch                   %237.3 -> BB239 (if true) | BB238 (if false)
BB24   <- [22]
  val?^ | miss    %24.0 = LdVar              eR    checkNA, e1.1
  lgl$#-          %24.1 = Identical                %24.0, %1.4
  void                    Assume             D     %24.1, %22.1 (CallTarget@0x55c18d02d458[Call#3])
  val?            %24.3 = StaticCall         !v    checkNA[0x55c18e2fcf10]("lineheight") from %1.4 e1.1
  cp              %24.4 = Checkpoint                -> BB26 (default) | BB25 (if assume failed)
BB23   <- [22]
  fs              %23.0 = FrameState         R     0x55c18d4512d0+173: [%22.0], env=e1.1
  void                    Deopt              !v    %23.0   !
BB239   <- [237]
  val?^ | miss    %239.0 = LdVar              eR    gpars, e1.1   <val?_>
  val?^ | miss    %239.1 = LdVar              eR    gparname, e16.0
  val?            %239.2 = Force!             !v    %239.1, e16.0   <val?_>
  val?            %239.3 = Force!             !v    %239.0, e16.0
  lgl$#-          %239.4 = IsType                   %239.3 isA val?+
  lgl$#-          %239.5 = IsType                   %239.2 isA val?+
  cp              %239.6 = Checkpoint                -> BB241 (default) | BB240 (if assume failed)
BB238   <- [237]
  fs              %238.0 = FrameState         R     0x55c18d4512d0+173: [], env=e1.1
  (cls|spec|blt)  %238.1 = LdFun              !v    check.length, e16.0
  fs              %238.2 = FrameState         R     0x55c18d1d7fc0+224: [%238.1], env=e16.0, next=%238.0
  void                    Deopt              !v    %238.2, DeadCall@0x55c18d8fc288[Call#5], %238.1   !
BB26   <- [24]
  val?^ | miss    %26.0 = LdVar              eR    numnotnull, e1.1
  lgl$#-          %26.1 = Identical                %26.0, %1.3
  void                    Assume             D     %26.1, %24.4 (CallTarget@0x55c18d02d458[Call#4])
  ct              %26.3 = PushContext        lCL   "cex", numnotnull("cex"), %1.3, e1.1
  val?^ | miss    %26.4 = LdVar              eR    is.na, e1.1
  lgl$#-          %26.5 = Identical                <blt is.na>, %26.4   <true>
  void                    Assume             D     %26.5, %24.4 (DeadBranchReached@0x55c18d8fc288[Test#0])
  cp              %26.7 = Checkpoint                -> BB28 (default) | BB27 (if assume failed)
BB25   <- [24]
  fs              %25.0 = FrameState         R     0x55c18d4512d0+206: [%24.3], env=e1.1
  void                    Deopt              !v    %25.0   !
BB241   <- [239]
  void                    Assume             D     %239.4, %239.6 (Typecheck@0x55c18d8fc288[Type#25])
  val?+           %241.1 = CastType           d     dn %239.3
  void                    Assume             D     %239.5, %239.6 (Typecheck@0x55c18d8fc288[Type#26])
  val?+           %241.3 = CastType           d     dn %239.2   <val?_>
  val?+           %241.4 = Subassign2_1D      wed   nil, %241.1, %241.3, elided
  void                    StVarSuper         lRW   gpars, %241.4, e16.0
  goto BB22
BB240   <- [239]
  fs              %240.0 = FrameState         R     0x55c18d4512d0+173: [], env=e1.1
  fs              %240.1 = FrameState         R     0x55c18d1d7fc0+480: [nil, nil, %239.3, %239.2], env=e16.0, next=%240.0
  void                    Deopt              !v    %240.1   !
BB28   <- [26]
  env             e28.0 = MkEnv              l     gparname="cex", parent=e1.1, context 1
  val?^ | miss    %28.1 = LdVar              eR    match, e28.0
  lgl$#-          %28.2 = Identical                %28.1, function(x, table, nomatch=NA, incomparables=N|...
  void                    Assume             D     %28.2, %26.7 (CallTarget@0x55c18d8fc288[Call#3])
  val?^ | miss    %28.4 = LdVar              eR    names, e1.1
  lgl$#-          %28.5 = Identical                %28.4, <blt names>
  void                    Assume             D     %28.5, %26.7 (CallTarget@0x55c18d8fc288[Call#4])
  val?^ | miss    %28.7 = LdVar              eR    gpars, e28.0
  val?            %28.8 = Force!<lazy>       !v    %28.7, e28.0   <vec+>
  val?            %28.9 = CallBuiltin        !v    names(%28.8) e28.0   <(nil|str)->
  lgl$#-          %28.10 = IsType                   %28.9 isA val?-
  cp              %28.11 = Checkpoint                -> BB30 (default) | BB29 (if assume failed)
BB27   <- [26]
  fs              %27.0 = FrameState         R     0x55c18d4512d0+239: [], env=e1.1
  env             e27.1 = (MkEnv)            l     gparname="cex", parent=e1.1, context 1
  fs              %27.2 = FrameState         R     0x55c18d1d7fc0+60: [<blt is.na>], env=e27.1, next=%27.0
  void                    Deopt              !v    %27.2   !
BB30   <- [28]
  void                    Assume             D     %28.10, %28.11 (Typecheck@0x55c18b1f2b30[Type#1])
  val?-           %30.1 = CastType           d     dn %28.9   <(nil|str)->
  val+            %30.2 = CallSafeBuiltin    wed   match("cex", %30.1, NA, nil)    <int$->
  lgl$#-          %30.3 = IsType                   %30.2 isA int$-
  cp              %30.4 = Checkpoint                -> BB32 (default) | BB31 (if assume failed)
BB29   <- [28]
  fs              %29.0 = FrameState         R     0x55c18d4512d0+239: [], env=e1.1
  fs              %29.1 = FrameState         R     0x55c18d1d7fc0+97: [<blt is.na>], env=e28.0, next=%29.0
  prom-           %29.2 = MkArg                    unboundValue, validGP[0x55c18b8d28b0]_p43, e28.0
  val?^           %29.3 = CastType                 up %29.2
  prom-           %29.4 = MkArg                    unboundValue, validGP[0x55c18b8d28b0]_p42, e28.0
  val?^           %29.5 = CastType                 up %29.4
  env             e29.6 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%29.3, x=%29.5, parent=R_BaseNamespace, context 0
  fs              %29.7 = FrameState         R     0x55c18ba1ad70+23: ["cex"], env=e29.6, next=%29.1
  fs              %29.8 = FrameState         R     0x55c18d178990+32(pr): [%28.9], env=e28.0, next=%29.7
  void                    Deopt              !v    %29.8   !
BB32   <- [30]
  void                    Assume             D     %30.3, %30.4 (Typecheck@0x55c18d8fc288[Type#7])
  int$-           %32.1 = CastType           d     dn %30.2
  lgl$-           %32.2 = CallSafeBuiltin    wed   is.na(%32.1)    <lgl$->
  lgl$-           %32.3 = Not                d     %32.2, elided
  lgl$#-          %32.4 = CheckTrueFalse     e     %32.3
  void                    Branch                   %32.4 -> BB227 (if true) | BB33 (if false)
BB31   <- [30]
  fs              %31.0 = FrameState         R     0x55c18d4512d0+239: [], env=e1.1
  prom-           %31.1 = MkArg                    %30.1, validGP[0x55c18b8d28b0]_p43 (!refl), e28.0
  val?~           %31.2 = CastType                 up %31.1
  fs              %31.3 = FrameState         R     0x55c18d1d7fc0+97: [<blt is.na>], env=e28.0, next=%31.0
  prom-           %31.4 = MkArg                    unboundValue, validGP[0x55c18b8d28b0]_p42, e28.0
  val?^           %31.5 = CastType                 up %31.4
  env             e31.6 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%31.2, x=%31.5, parent=R_BaseNamespace, context 0
  fs              %31.7 = FrameState         R     0x55c18ba1ad70+69: [%30.2], env=e31.6, next=%31.3
  void                    Deopt              !v    %31.7   !
BB227   <- [32]
  val?^ | miss    %227.0 = LdVar              eR    gpars, e28.0
  val?            %227.1 = Force!             !v    %227.0, e28.0   <val?_>
  lgl$#-          %227.2 = IsType                   %227.1 isA val+   <@?>
  void                    Branch                   %227.2 -> BB234 (if true) | BB228 (if false)
BB33   <- [32]
  goto BB34
BB234   <- [227]
  val?^ | miss    %234.0 = LdVar              eR    gparname, e28.0
  val?            %234.1 = Force!             !v    %234.0, e28.0   <val?_>
  goto BB229
BB228   <- [227]
  prom-           %228.0 = MkArg                    unboundValue, validGP[0x55c18b8d28b0]_p45, e28.0
  goto BB229
BB34   <- [33, 233]
  val?            %34.0 = PopContext         C     nil, %26.3
  cp              %34.1 = Checkpoint                -> BB36 (default) | BB35 (if assume failed)
BB229   <- [228, 234]
  val?            %229.0 = Phi                      %234.1:BB234, %228.0:BB228
  val?            %229.1 = Extract2_1D        !v    %227.1, %229.0, e28.0   <val?_>
  lgl$-           %229.2 = Is                       %229.1, NULL
  lgl$#-          %229.3 = CheckTrueFalse     e     %229.2
  void                    Branch                   %229.3 -> BB231 (if true) | BB230 (if false)
BB36   <- [34]
  val?^ | miss    %36.0 = LdVar              eR    checkNA, e1.1
  lgl$#-          %36.1 = Identical                %36.0, %1.4
  void                    Assume             D     %36.1, %34.1 (CallTarget@0x55c18d02d458[Call#5])
  val?            %36.3 = StaticCall         !v    checkNA[0x55c18e2fcf10]("cex") from %1.4 e1.1
  cp              %36.4 = Checkpoint                -> BB38 (default) | BB37 (if assume failed)
BB35   <- [34]
  fs              %35.0 = FrameState         R     0x55c18d4512d0+239: [%34.0], env=e1.1
  void                    Deopt              !v    %35.0   !
BB231   <- [229]
  val?^ | miss    %231.0 = LdVar              eR    gpars, e1.1   <val?_>
  val?^ | miss    %231.1 = LdVar              eR    gparname, e28.0
  val?            %231.2 = Force!             !v    %231.1, e28.0   <val?_>
  val?            %231.3 = Force!             !v    %231.0, e28.0
  lgl$#-          %231.4 = IsType                   %231.3 isA val?+
  lgl$#-          %231.5 = IsType                   %231.2 isA val?+
  cp              %231.6 = Checkpoint                -> BB233 (default) | BB232 (if assume failed)
BB230   <- [229]
  fs              %230.0 = FrameState         R     0x55c18d4512d0+239: [], env=e1.1
  (cls|spec|blt)  %230.1 = LdFun              !v    check.length, e28.0
  fs              %230.2 = FrameState         R     0x55c18d1d7fc0+224: [%230.1], env=e28.0, next=%230.0
  void                    Deopt              !v    %230.2, DeadCall@0x55c18d8fc288[Call#5], %230.1   !
BB38   <- [36]
  val?^ | miss    %38.0 = LdVar              eR    numnotnull, e1.1
  lgl$#-          %38.1 = Identical                %38.0, %1.3
  void                    Assume             D     %38.1, %36.4 (CallTarget@0x55c18d02d458[Call#6])
  ct              %38.3 = PushContext        lCL   "lwd", numnotnull("lwd"), %1.3, e1.1
  val?^ | miss    %38.4 = LdVar              eR    is.na, e1.1
  lgl$#-          %38.5 = Identical                <blt is.na>, %38.4   <true>
  void                    Assume             D     %38.5, %36.4 (DeadBranchReached@0x55c18d8fc288[Test#0])
  cp              %38.7 = Checkpoint                -> BB40 (default) | BB39 (if assume failed)
BB37   <- [36]
  fs              %37.0 = FrameState         R     0x55c18d4512d0+272: [%36.3], env=e1.1
  void                    Deopt              !v    %37.0   !
BB233   <- [231]
  void                    Assume             D     %231.4, %231.6 (Typecheck@0x55c18d8fc288[Type#25])
  val?+           %233.1 = CastType           d     dn %231.3
  void                    Assume             D     %231.5, %231.6 (Typecheck@0x55c18d8fc288[Type#26])
  val?+           %233.3 = CastType           d     dn %231.2   <val?_>
  val?+           %233.4 = Subassign2_1D      wed   nil, %233.1, %233.3, elided
  void                    StVarSuper         lRW   gpars, %233.4, e28.0
  goto BB34
BB232   <- [231]
  fs              %232.0 = FrameState         R     0x55c18d4512d0+239: [], env=e1.1
  fs              %232.1 = FrameState         R     0x55c18d1d7fc0+480: [nil, nil, %231.3, %231.2], env=e28.0, next=%232.0
  void                    Deopt              !v    %232.1   !
BB40   <- [38]
  env             e40.0 = MkEnv              l     gparname="lwd", parent=e1.1, context 1
  val?^ | miss    %40.1 = LdVar              eR    match, e40.0
  lgl$#-          %40.2 = Identical                %40.1, function(x, table, nomatch=NA, incomparables=N|...
  void                    Assume             D     %40.2, %38.7 (CallTarget@0x55c18d8fc288[Call#3])
  val?^ | miss    %40.4 = LdVar              eR    names, e1.1
  lgl$#-          %40.5 = Identical                %40.4, <blt names>
  void                    Assume             D     %40.5, %38.7 (CallTarget@0x55c18d8fc288[Call#4])
  val?^ | miss    %40.7 = LdVar              eR    gpars, e40.0
  val?            %40.8 = Force!<lazy>       !v    %40.7, e40.0   <vec+>
  val?            %40.9 = CallBuiltin        !v    names(%40.8) e40.0   <(nil|str)->
  lgl$#-          %40.10 = IsType                   %40.9 isA val?-
  cp              %40.11 = Checkpoint                -> BB42 (default) | BB41 (if assume failed)
BB39   <- [38]
  fs              %39.0 = FrameState         R     0x55c18d4512d0+305: [], env=e1.1
  env             e39.1 = (MkEnv)            l     gparname="lwd", parent=e1.1, context 1
  fs              %39.2 = FrameState         R     0x55c18d1d7fc0+60: [<blt is.na>], env=e39.1, next=%39.0
  void                    Deopt              !v    %39.2   !
BB42   <- [40]
  void                    Assume             D     %40.10, %40.11 (Typecheck@0x55c18b1f2b30[Type#1])
  val?-           %42.1 = CastType           d     dn %40.9   <(nil|str)->
  val+            %42.2 = CallSafeBuiltin    wed   match("lwd", %42.1, NA, nil)    <int$->
  lgl$#-          %42.3 = IsType                   %42.2 isA int$-
  cp              %42.4 = Checkpoint                -> BB44 (default) | BB43 (if assume failed)
BB41   <- [40]
  fs              %41.0 = FrameState         R     0x55c18d4512d0+305: [], env=e1.1
  fs              %41.1 = FrameState         R     0x55c18d1d7fc0+97: [<blt is.na>], env=e40.0, next=%41.0
  prom-           %41.2 = MkArg                    unboundValue, validGP[0x55c18b8d28b0]_p47, e40.0
  val?^           %41.3 = CastType                 up %41.2
  prom-           %41.4 = MkArg                    unboundValue, validGP[0x55c18b8d28b0]_p46, e40.0
  val?^           %41.5 = CastType                 up %41.4
  env             e41.6 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%41.3, x=%41.5, parent=R_BaseNamespace, context 0
  fs              %41.7 = FrameState         R     0x55c18ba1ad70+23: ["lwd"], env=e41.6, next=%41.1
  fs              %41.8 = FrameState         R     0x55c18d178990+32(pr): [%40.9], env=e40.0, next=%41.7
  void                    Deopt              !v    %41.8   !
BB44   <- [42]
  void                    Assume             D     %42.3, %42.4 (Typecheck@0x55c18d8fc288[Type#7])
  int$-           %44.1 = CastType           d     dn %42.2
  lgl$-           %44.2 = CallSafeBuiltin    wed   is.na(%44.1)    <lgl$->
  lgl$-           %44.3 = Not                d     %44.2, elided
  lgl$#-          %44.4 = CheckTrueFalse     e     %44.3
  void                    Branch                   %44.4 -> BB219 (if true) | BB45 (if false)
BB43   <- [42]
  fs              %43.0 = FrameState         R     0x55c18d4512d0+305: [], env=e1.1
  prom-           %43.1 = MkArg                    %42.1, validGP[0x55c18b8d28b0]_p47 (!refl), e40.0
  val?~           %43.2 = CastType                 up %43.1
  fs              %43.3 = FrameState         R     0x55c18d1d7fc0+97: [<blt is.na>], env=e40.0, next=%43.0
  prom-           %43.4 = MkArg                    unboundValue, validGP[0x55c18b8d28b0]_p46, e40.0
  val?^           %43.5 = CastType                 up %43.4
  env             e43.6 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%43.2, x=%43.5, parent=R_BaseNamespace, context 0
  fs              %43.7 = FrameState         R     0x55c18ba1ad70+69: [%42.2], env=e43.6, next=%43.3
  void                    Deopt              !v    %43.7   !
BB219   <- [44]
  val?^ | miss    %219.0 = LdVar              eR    gpars, e40.0
  val?            %219.1 = Force!             !v    %219.0, e40.0   <val?_>
  lgl$#-          %219.2 = IsType                   %219.1 isA val+   <@?>
  void                    Branch                   %219.2 -> BB226 (if true) | BB220 (if false)
BB45   <- [44]
  goto BB46
BB226   <- [219]
  val?^ | miss    %226.0 = LdVar              eR    gparname, e40.0
  val?            %226.1 = Force!             !v    %226.0, e40.0   <val?_>
  goto BB221
BB220   <- [219]
  prom-           %220.0 = MkArg                    unboundValue, validGP[0x55c18b8d28b0]_p49, e40.0
  goto BB221
BB46   <- [45, 225]
  val?            %46.0 = PopContext         C     nil, %38.3
  cp              %46.1 = Checkpoint                -> BB48 (default) | BB47 (if assume failed)
BB221   <- [220, 226]
  val?            %221.0 = Phi                      %226.1:BB226, %220.0:BB220
  val?            %221.1 = Extract2_1D        !v    %219.1, %221.0, e40.0   <val?_>
  lgl$-           %221.2 = Is                       %221.1, NULL
  lgl$#-          %221.3 = CheckTrueFalse     e     %221.2
  void                    Branch                   %221.3 -> BB223 (if true) | BB222 (if false)
BB48   <- [46]
  val?^ | miss    %48.0 = LdVar              eR    numnotnull, e1.1
  lgl$#-          %48.1 = Identical                %48.0, %1.3
  void                    Assume             D     %48.1, %46.1 (CallTarget@0x55c18d02d458[Call#7])
  ct              %48.3 = PushContext        lCL   "lex", numnotnull("lex"), %1.3, e1.1
  val?^ | miss    %48.4 = LdVar              eR    is.na, e1.1
  lgl$#-          %48.5 = Identical                <blt is.na>, %48.4   <true>
  void                    Assume             D     %48.5, %46.1 (DeadBranchReached@0x55c18d8fc288[Test#0])
  cp              %48.7 = Checkpoint                -> BB50 (default) | BB49 (if assume failed)
BB47   <- [46]
  fs              %47.0 = FrameState         R     0x55c18d4512d0+305: [%46.0], env=e1.1
  void                    Deopt              !v    %47.0   !
BB223   <- [221]
  val?^ | miss    %223.0 = LdVar              eR    gpars, e1.1   <val?_>
  val?^ | miss    %223.1 = LdVar              eR    gparname, e40.0
  val?            %223.2 = Force!             !v    %223.1, e40.0   <val?_>
  val?            %223.3 = Force!             !v    %223.0, e40.0
  lgl$#-          %223.4 = IsType                   %223.3 isA val?+
  lgl$#-          %223.5 = IsType                   %223.2 isA val?+
  cp              %223.6 = Checkpoint                -> BB225 (default) | BB224 (if assume failed)
BB222   <- [221]
  fs              %222.0 = FrameState         R     0x55c18d4512d0+305: [], env=e1.1
  (cls|spec|blt)  %222.1 = LdFun              !v    check.length, e40.0
  fs              %222.2 = FrameState         R     0x55c18d1d7fc0+224: [%222.1], env=e40.0, next=%222.0
  void                    Deopt              !v    %222.2, DeadCall@0x55c18d8fc288[Call#5], %222.1   !
BB50   <- [48]
  env             e50.0 = MkEnv              l     gparname="lex", parent=e1.1, context 1
  val?^ | miss    %50.1 = LdVar              eR    match, e50.0
  lgl$#-          %50.2 = Identical                %50.1, function(x, table, nomatch=NA, incomparables=N|...
  void                    Assume             D     %50.2, %48.7 (CallTarget@0x55c18d8fc288[Call#3])
  val?^ | miss    %50.4 = LdVar              eR    names, e1.1
  lgl$#-          %50.5 = Identical                %50.4, <blt names>
  void                    Assume             D     %50.5, %48.7 (CallTarget@0x55c18d8fc288[Call#4])
  val?^ | miss    %50.7 = LdVar              eR    gpars, e50.0
  val?            %50.8 = Force!<lazy>       !v    %50.7, e50.0   <vec+>
  val?            %50.9 = CallBuiltin        !v    names(%50.8) e50.0   <(nil|str)->
  lgl$#-          %50.10 = IsType                   %50.9 isA val?-
  cp              %50.11 = Checkpoint                -> BB52 (default) | BB51 (if assume failed)
BB49   <- [48]
  fs              %49.0 = FrameState         R     0x55c18d4512d0+338: [], env=e1.1
  env             e49.1 = (MkEnv)            l     gparname="lex", parent=e1.1, context 1
  fs              %49.2 = FrameState         R     0x55c18d1d7fc0+60: [<blt is.na>], env=e49.1, next=%49.0
  void                    Deopt              !v    %49.2   !
BB225   <- [223]
  void                    Assume             D     %223.4, %223.6 (Typecheck@0x55c18d8fc288[Type#25])
  val?+           %225.1 = CastType           d     dn %223.3
  void                    Assume             D     %223.5, %223.6 (Typecheck@0x55c18d8fc288[Type#26])
  val?+           %225.3 = CastType           d     dn %223.2   <val?_>
  val?+           %225.4 = Subassign2_1D      wed   nil, %225.1, %225.3, elided
  void                    StVarSuper         lRW   gpars, %225.4, e40.0
  goto BB46
BB224   <- [223]
  fs              %224.0 = FrameState         R     0x55c18d4512d0+305: [], env=e1.1
  fs              %224.1 = FrameState         R     0x55c18d1d7fc0+480: [nil, nil, %223.3, %223.2], env=e40.0, next=%224.0
  void                    Deopt              !v    %224.1   !
BB52   <- [50]
  void                    Assume             D     %50.10, %50.11 (Typecheck@0x55c18b1f2b30[Type#1])
  val?-           %52.1 = CastType           d     dn %50.9   <(nil|str)->
  val+            %52.2 = CallSafeBuiltin    wed   match("lex", %52.1, NA, nil)    <int$->
  lgl$#-          %52.3 = IsType                   %52.2 isA int$-
  cp              %52.4 = Checkpoint                -> BB54 (default) | BB53 (if assume failed)
BB51   <- [50]
  fs              %51.0 = FrameState         R     0x55c18d4512d0+338: [], env=e1.1
  prom-           %51.1 = MkArg                    unboundValue, validGP[0x55c18b8d28b0]_p51, e50.0
  val?^           %51.2 = CastType                 up %51.1
  prom-           %51.3 = MkArg                    unboundValue, validGP[0x55c18b8d28b0]_p50, e50.0
  val?^           %51.4 = CastType                 up %51.3
  fs              %51.5 = FrameState         R     0x55c18d1d7fc0+97: [<blt is.na>], env=e50.0, next=%51.0
  env             e51.6 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%51.2, x=%51.4, parent=R_BaseNamespace, context 0
  fs              %51.7 = FrameState         R     0x55c18ba1ad70+23: ["lex"], env=e51.6, next=%51.5
  fs              %51.8 = FrameState         R     0x55c18d178990+32(pr): [%50.9], env=e50.0, next=%51.7
  void                    Deopt              !v    %51.8   !
BB54   <- [52]
  void                    Assume             D     %52.3, %52.4 (Typecheck@0x55c18d8fc288[Type#7])
  int$-           %54.1 = CastType           d     dn %52.2
  lgl$-           %54.2 = CallSafeBuiltin    wed   is.na(%54.1)    <lgl$->
  lgl$-           %54.3 = Not                d     %54.2, elided
  lgl$#-          %54.4 = CheckTrueFalse     e     %54.3
  void                    Branch                   %54.4 -> BB211 (if true) | BB55 (if false)
BB53   <- [52]
  fs              %53.0 = FrameState         R     0x55c18d4512d0+338: [], env=e1.1
  prom-           %53.1 = MkArg                    unboundValue, validGP[0x55c18b8d28b0]_p50, e50.0
  val?^           %53.2 = CastType                 up %53.1
  prom-           %53.3 = MkArg                    %52.1, validGP[0x55c18b8d28b0]_p51 (!refl), e50.0
  val?~           %53.4 = CastType                 up %53.3
  fs              %53.5 = FrameState         R     0x55c18d1d7fc0+97: [<blt is.na>], env=e50.0, next=%53.0
  env             e53.6 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%53.4, x=%53.2, parent=R_BaseNamespace, context 0
  fs              %53.7 = FrameState         R     0x55c18ba1ad70+69: [%52.2], env=e53.6, next=%53.5
  void                    Deopt              !v    %53.7   !
BB211   <- [54]
  val?^ | miss    %211.0 = LdVar              eR    gpars, e50.0
  val?            %211.1 = Force!             !v    %211.0, e50.0   <val?_>
  lgl$#-          %211.2 = IsType                   %211.1 isA val+   <@?>
  void                    Branch                   %211.2 -> BB218 (if true) | BB212 (if false)
BB55   <- [54]
  goto BB56
BB218   <- [211]
  val?^ | miss    %218.0 = LdVar              eR    gparname, e50.0
  val?            %218.1 = Force!             !v    %218.0, e50.0   <val?_>
  goto BB213
BB212   <- [211]
  prom-           %212.0 = MkArg                    unboundValue, validGP[0x55c18b8d28b0]_p53, e50.0
  goto BB213
BB56   <- [55, 217]
  val?            %56.0 = PopContext         C     nil, %48.3
  cp              %56.1 = Checkpoint                -> BB58 (default) | BB57 (if assume failed)
BB213   <- [212, 218]
  val?            %213.0 = Phi                      %218.1:BB218, %212.0:BB212
  val?            %213.1 = Extract2_1D        !v    %211.1, %213.0, e50.0   <val?_>
  lgl$-           %213.2 = Is                       %213.1, NULL
  lgl$#-          %213.3 = CheckTrueFalse     e     %213.2
  void                    Branch                   %213.3 -> BB215 (if true) | BB214 (if false)
BB58   <- [56]
  val?^ | miss    %58.0 = LdVar              eR    %in%, e1.1
  lgl$#-          %58.1 = Identical                %58.0, function(x, table) <(rir::DispatchTable*)0x55c|...
  void                    Assume             D     %58.1, %56.1 (CallTarget@0x55c18d02d458[Call#8])
  prom-           %58.3 = MkArg                    unboundValue, validGP[0x55c18b8d28b0]_p0, e1.1
  val?            %58.4 = StaticCall         !v    %in%[0x55c18e9996a0]("gamma", %58.3) e1.1   <lgl$->
  lgl$#-          %58.5 = IsType                   %58.4 isA lgl$-
  cp              %58.6 = Checkpoint                -> BB60 (default) | BB59 (if assume failed)
BB57   <- [56]
  fs              %57.0 = FrameState         R     0x55c18d4512d0+338: [%56.0], env=e1.1
  void                    Deopt              !v    %57.0   !
BB215   <- [213]
  val?^ | miss    %215.0 = LdVar              eR    gpars, e1.1   <val?_>
  val?^ | miss    %215.1 = LdVar              eR    gparname, e50.0
  val?            %215.2 = Force!             !v    %215.1, e50.0   <val?_>
  val?            %215.3 = Force!             !v    %215.0, e50.0
  lgl$#-          %215.4 = IsType                   %215.3 isA val?+
  lgl$#-          %215.5 = IsType                   %215.2 isA val?+
  cp              %215.6 = Checkpoint                -> BB217 (default) | BB216 (if assume failed)
BB214   <- [213]
  fs              %214.0 = FrameState         R     0x55c18d4512d0+338: [], env=e1.1
  (cls|spec|blt)  %214.1 = LdFun              !v    check.length, e50.0
  fs              %214.2 = FrameState         R     0x55c18d1d7fc0+224: [%214.1], env=e50.0, next=%214.0
  void                    Deopt              !v    %214.2, DeadCall@0x55c18d8fc288[Call#5], %214.1   !
BB60   <- [58]
  void                    Assume             D     %58.5, %58.6 (Typecheck@0x55c18d02d458[Type#2])
  lgl$-           %60.1 = CastType           d     dn %58.4
  lgl$#-          %60.2 = CheckTrueFalse     e     %60.1
  cp              %60.3 = Checkpoint                -> BB62 (default) | BB61 (if assume failed)
BB59   <- [58]
  fs              %59.0 = FrameState         R     0x55c18d4512d0+376: [%58.4], env=e1.1
  void                    Deopt              !v    %59.0   !
BB217   <- [215]
  void                    Assume             D     %215.4, %215.6 (Typecheck@0x55c18d8fc288[Type#25])
  val?+           %217.1 = CastType           d     dn %215.3
  void                    Assume             D     %215.5, %215.6 (Typecheck@0x55c18d8fc288[Type#26])
  val?+           %217.3 = CastType           d     dn %215.2   <val?_>
  val?+           %217.4 = Subassign2_1D      wed   nil, %217.1, %217.3, elided
  void                    StVarSuper         lRW   gpars, %217.4, e50.0
  goto BB56
BB216   <- [215]
  fs              %216.0 = FrameState         R     0x55c18d4512d0+338: [], env=e1.1
  fs              %216.1 = FrameState         R     0x55c18d1d7fc0+480: [nil, nil, %215.3, %215.2], env=e50.0, next=%216.0
  void                    Deopt              !v    %216.1   !
BB62   <- [60]
  void                    Branch                   %60.2 -> BB210 (if true) | BB63 (if false)
BB61   <- [60]
  fs              %61.0 = FrameState         R     0x55c18d4512d0+382: [%60.2], env=e1.1
  void                    Deopt              !v    %61.0   !
BB210   <- [62]
  (cls|spec|blt)  %210.0 = LdFun              !v    warning, e1.1
  fs              %210.1 = FrameState         R     0x55c18d4512d0+397: [%210.0], env=e1.1
  void                    Deopt              !v    %210.1, DeadCall@0x55c18d02d458[Call#10], %210.0   !
BB63   <- [62]
  val?^ | miss    %63.0 = LdVar              eR    numnotnull, e1.1
  lgl$#-          %63.1 = Identical                %63.0, %1.3
  void                    Assume             D     %63.1, %58.6 (CallTarget@0x55c18d02d458[Call#13])
  ct              %63.3 = PushContext        lCL   "alpha", numnotnull("alpha"), %1.3, e1.1
  val?^ | miss    %63.4 = LdVar              eR    is.na, e1.1
  lgl$#-          %63.5 = Identical                <blt is.na>, %63.4   <true>
  void                    Assume             D     %63.5, %60.3 (DeadBranchReached@0x55c18d8fc288[Test#0])
  cp              %63.7 = Checkpoint                -> BB65 (default) | BB64 (if assume failed)
BB65   <- [63]
  env             e65.0 = MkEnv              l     gparname="alpha", parent=e1.1, context 1
  val?^ | miss    %65.1 = LdVar              eR    match, e65.0
  lgl$#-          %65.2 = Identical                %65.1, function(x, table, nomatch=NA, incomparables=N|...
  void                    Assume             D     %65.2, %63.7 (CallTarget@0x55c18d8fc288[Call#3])
  val?^ | miss    %65.4 = LdVar              eR    names, e1.1
  lgl$#-          %65.5 = Identical                %65.4, <blt names>
  void                    Assume             D     %65.5, %63.7 (CallTarget@0x55c18d8fc288[Call#4])
  val?^ | miss    %65.7 = LdVar              eR    gpars, e65.0
  val?            %65.8 = Force!<lazy>       !v    %65.7, e65.0   <vec+>
  val?            %65.9 = CallBuiltin        !v    names(%65.8) e65.0   <(nil|str)->
  lgl$#-          %65.10 = IsType                   %65.9 isA val?-
  cp              %65.11 = Checkpoint                -> BB67 (default) | BB66 (if assume failed)
BB64   <- [63]
  fs              %64.0 = FrameState         R     0x55c18d4512d0+495: [], env=e1.1
  env             e64.1 = (MkEnv)            l     gparname="alpha", parent=e1.1, context 1
  fs              %64.2 = FrameState         R     0x55c18d1d7fc0+60: [<blt is.na>], env=e64.1, next=%64.0
  void                    Deopt              !v    %64.2   !
BB67   <- [65]
  void                    Assume             D     %65.10, %65.11 (Typecheck@0x55c18b1f2b30[Type#1])
  val?-           %67.1 = CastType           d     dn %65.9   <(nil|str)->
  val+            %67.2 = CallSafeBuiltin    wed   match("alpha", %67.1, NA, nil)    <int$->
  lgl$#-          %67.3 = IsType                   %67.2 isA int$-
  cp              %67.4 = Checkpoint                -> BB69 (default) | BB68 (if assume failed)
BB66   <- [65]
  fs              %66.0 = FrameState         R     0x55c18d4512d0+495: [], env=e1.1
  fs              %66.1 = FrameState         R     0x55c18d1d7fc0+97: [<blt is.na>], env=e65.0, next=%66.0
  prom-           %66.2 = MkArg                    unboundValue, validGP[0x55c18b8d28b0]_p55, e65.0
  val?^           %66.3 = CastType                 up %66.2
  prom-           %66.4 = MkArg                    unboundValue, validGP[0x55c18b8d28b0]_p54, e65.0
  val?^           %66.5 = CastType                 up %66.4
  env             e66.6 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%66.3, x=%66.5, parent=R_BaseNamespace, context 0
  fs              %66.7 = FrameState         R     0x55c18ba1ad70+23: ["alpha"], env=e66.6, next=%66.1
  fs              %66.8 = FrameState         R     0x55c18d178990+32(pr): [%65.9], env=e65.0, next=%66.7
  void                    Deopt              !v    %66.8   !
BB69   <- [67]
  void                    Assume             D     %67.3, %67.4 (Typecheck@0x55c18d8fc288[Type#7])
  int$-           %69.1 = CastType           d     dn %67.2
  lgl$-           %69.2 = CallSafeBuiltin    wed   is.na(%69.1)    <lgl$->
  lgl$-           %69.3 = Not                d     %69.2, elided
  lgl$#-          %69.4 = CheckTrueFalse     e     %69.3
  void                    Branch                   %69.4 -> BB202 (if true) | BB70 (if false)
BB68   <- [67]
  fs              %68.0 = FrameState         R     0x55c18d4512d0+495: [], env=e1.1
  prom-           %68.1 = MkArg                    %67.1, validGP[0x55c18b8d28b0]_p55 (!refl), e65.0
  val?~           %68.2 = CastType                 up %68.1
  fs              %68.3 = FrameState         R     0x55c18d1d7fc0+97: [<blt is.na>], env=e65.0, next=%68.0
  prom-           %68.4 = MkArg                    unboundValue, validGP[0x55c18b8d28b0]_p54, e65.0
  val?^           %68.5 = CastType                 up %68.4
  env             e68.6 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%68.2, x=%68.5, parent=R_BaseNamespace, context 0
  fs              %68.7 = FrameState         R     0x55c18ba1ad70+69: [%67.2], env=e68.6, next=%68.3
  void                    Deopt              !v    %68.7   !
BB202   <- [69]
  val?^ | miss    %202.0 = LdVar              eR    gpars, e65.0
  val?            %202.1 = Force!             !v    %202.0, e65.0   <val?_>
  lgl$#-          %202.2 = IsType                   %202.1 isA val+   <@?>
  void                    Branch                   %202.2 -> BB209 (if true) | BB203 (if false)
BB70   <- [69]
  goto BB71
BB209   <- [202]
  val?^ | miss    %209.0 = LdVar              eR    gparname, e65.0
  val?            %209.1 = Force!             !v    %209.0, e65.0   <val?_>
  goto BB204
BB203   <- [202]
  prom-           %203.0 = MkArg                    unboundValue, validGP[0x55c18b8d28b0]_p57, e65.0
  goto BB204
BB71   <- [70, 208]
  val?            %71.0 = PopContext         C     nil, %63.3
  cp              %71.1 = Checkpoint                -> BB73 (default) | BB72 (if assume failed)
BB204   <- [203, 209]
  val?            %204.0 = Phi                      %209.1:BB209, %203.0:BB203
  val?            %204.1 = Extract2_1D        !v    %202.1, %204.0, e65.0   <val?_>
  lgl$-           %204.2 = Is                       %204.1, NULL
  lgl$#-          %204.3 = CheckTrueFalse     e     %204.2
  void                    Branch                   %204.3 -> BB206 (if true) | BB205 (if false)
BB73   <- [71]
  val?^ | miss    %73.0 = LdVar              eR    is.na, e1.1
  lgl$#-          %73.1 = Identical                <blt is.na>, %73.0   <true>
  void                    Assume             D     %73.1, %71.1 (DeadBranchReached@0x55c18d02d458[Test#0])
  val?^ | miss    %73.3 = LdVar              eR    match, e1.1
  lgl$#-          %73.4 = Identical                %73.3, function(x, table, nomatch=NA, incomparables=N|...
  void                    Assume             D     %73.4, %71.1 (CallTarget@0x55c18d02d458[Call#17])
  val?^ | miss    %73.6 = LdVar              eR    names, e1.1
  lgl$#-          %73.7 = Identical                %73.6, <blt names>
  void                    Assume             D     %73.7, %71.1 (CallTarget@0x55c18d02d458[Call#18])
  val?^ | miss    %73.9 = LdVar              eR    gpars, e1.1
  val?            %73.10 = Force!<wrapped>    !v    %73.9, e1.1   <vec+>
  val?            %73.11 = CallBuiltin        !v    names(%73.10) e1.1   <(nil|str)->
  lgl$#-          %73.12 = IsType                   %73.11 isA val?-
  cp              %73.13 = Checkpoint                -> BB75 (default) | BB74 (if assume failed)
BB72   <- [71]
  fs              %72.0 = FrameState         R     0x55c18d4512d0+495: [%71.0], env=e1.1
  void                    Deopt              !v    %72.0   !
BB206   <- [204]
  val?^ | miss    %206.0 = LdVar              eR    gpars, e1.1   <val?_>
  val?^ | miss    %206.1 = LdVar              eR    gparname, e65.0
  val?            %206.2 = Force!             !v    %206.1, e65.0   <val?_>
  val?            %206.3 = Force!             !v    %206.0, e65.0
  lgl$#-          %206.4 = IsType                   %206.3 isA val?+
  lgl$#-          %206.5 = IsType                   %206.2 isA val?+
  cp              %206.6 = Checkpoint                -> BB208 (default) | BB207 (if assume failed)
BB205   <- [204]
  fs              %205.0 = FrameState         R     0x55c18d4512d0+495: [], env=e1.1
  (cls|spec|blt)  %205.1 = LdFun              !v    check.length, e65.0
  fs              %205.2 = FrameState         R     0x55c18d1d7fc0+224: [%205.1], env=e65.0, next=%205.0
  void                    Deopt              !v    %205.2, DeadCall@0x55c18d8fc288[Call#5], %205.1   !
BB75   <- [73]
  void                    Assume             D     %73.12, %73.13 (Typecheck@0x55c18b1f2b30[Type#1])
  val?-           %75.1 = CastType           d     dn %73.11   <(nil|str)->
  val+            %75.2 = CallSafeBuiltin    wed   match("col", %75.1, NA, nil)    <int$->
  lgl$#-          %75.3 = IsType                   %75.2 isA int$-
  cp              %75.4 = Checkpoint                -> BB77 (default) | BB76 (if assume failed)
BB74   <- [73]
  fs              %74.0 = FrameState         R     0x55c18d4512d0+593: [<blt is.na>], env=e1.1
  prom-           %74.1 = MkArg                    unboundValue, validGP[0x55c18b8d28b0]_p2, e1.1
  val?^           %74.2 = CastType                 up %74.1
  env             e74.3 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%74.2, x="col", parent=R_BaseNamespace, context 0
  fs              %74.4 = FrameState         R     0x55c18ba1ad70+23: ["col"], env=e74.3, next=%74.0
  fs              %74.5 = FrameState         R     0x55c18d5cabe0+32(pr): [%73.11], env=e1.1, next=%74.4
  void                    Deopt              !v    %74.5   !
BB208   <- [206]
  void                    Assume             D     %206.4, %206.6 (Typecheck@0x55c18d8fc288[Type#25])
  val?+           %208.1 = CastType           d     dn %206.3
  void                    Assume             D     %206.5, %206.6 (Typecheck@0x55c18d8fc288[Type#26])
  val?+           %208.3 = CastType           d     dn %206.2   <val?_>
  val?+           %208.4 = Subassign2_1D      wed   nil, %208.1, %208.3, elided
  void                    StVarSuper         lRW   gpars, %208.4, e65.0
  goto BB71
BB207   <- [206]
  fs              %207.0 = FrameState         R     0x55c18d4512d0+495: [], env=e1.1
  fs              %207.1 = FrameState         R     0x55c18d1d7fc0+480: [nil, nil, %206.3, %206.2], env=e65.0, next=%207.0
  void                    Deopt              !v    %207.1   !
BB77   <- [75]
  void                    Assume             D     %75.3, %75.4 (Typecheck@0x55c18d02d458[Type#11])
  int$-           %77.1 = CastType           d     dn %75.2
  lgl$-           %77.2 = CallSafeBuiltin    wed   is.na(%77.1)    <lgl$->
  lgl$-           %77.3 = Not                d     %77.2, elided
  lgl$#-          %77.4 = CheckTrueFalse     e     %77.3
  void                    Branch                   %77.4 -> BB197 (if true) | BB78 (if false)
BB76   <- [75]
  prom-           %76.0 = MkArg                    %75.1, validGP[0x55c18b8d28b0]_p2 (!refl), e1.1
  val?~           %76.1 = CastType                 up %76.0
  fs              %76.2 = FrameState         R     0x55c18d4512d0+593: [<blt is.na>], env=e1.1
  env             e76.3 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%76.1, x="col", parent=R_BaseNamespace, context 0
  fs              %76.4 = FrameState         R     0x55c18ba1ad70+69: [%75.2], env=e76.3, next=%76.2
  void                    Deopt              !v    %76.4   !
BB197   <- [77]
  (cls|spec|blt)  %197.0 = LdFun              !v    $, <0x55c18aee4c10>, e1.1
  prom-           %197.1 = MkArg                    unboundValue, validGP[0x55c18b8d28b0]_p29, e1.1
  prom-           %197.2 = MkArg                    unboundValue, validGP[0x55c18b8d28b0]_p30, e1.1
  val?            %197.3 = Call               !v    %197.0(%197.1, %197.2) e1.1   <(nil|str)->
  lgl$-           %197.4 = Is                       %197.3, NULL
  cp              %197.5 = Checkpoint                -> BB199 (default) | BB198 (if assume failed)
BB78   <- [77]
  goto BB79
BB199   <- [197]
  lgl$#-          %199.0 = CheckTrueFalse     e     %197.4
  void                    Branch                   %199.0 -> BB201 (if true) | BB200 (if false)
BB198   <- [197]
  fs              %198.0 = FrameState         R     0x55c18d4512d0+669: [%197.3], env=e1.1
  void                    Deopt              !v    %198.0   !
BB79   <- [78, 200, 201]
  cp              %79.0 = Checkpoint                -> BB81 (default) | BB80 (if assume failed)
BB201   <- [199]
  (cls|spec|blt)  %201.0 = LdFun              !v    <-, <0x55c18aed9da8>, e1.1
  prom-           %201.1 = MkArg                    unboundValue, validGP[0x55c18b8d28b0]_p31, e1.1
  val?            %201.2 = Call               !v    %201.0(%201.1, nil) e1.1
  goto BB79
BB200   <- [199]
  val?^ | miss    %200.0 = LdVar              eR    check.length, e1.1
  lgl$#-          %200.1 = Identical                %200.0, %1.2
  void                    Assume             D     %200.1, %197.5 (CallTarget@0x55c18d02d458[Call#20])
  val?            %200.3 = StaticCall         !v    check.length[0x55c18b0be6b0]("col") from %1.2 e1.1
  goto BB79
BB81   <- [79]
  val?^ | miss    %81.0 = LdVar              eR    is.na, e1.1
  lgl$#-          %81.1 = Identical                <blt is.na>, %81.0   <true>
  void                    Assume             D     %81.1, %79.0 (DeadBranchReached@0x55c18d02d458[Test#1])
  val?^ | miss    %81.3 = LdVar              eR    match, e1.1
  lgl$#-          %81.4 = Identical                %81.3, function(x, table, nomatch=NA, incomparables=N|...
  void                    Assume             D     %81.4, %79.0 (CallTarget@0x55c18d02d458[Call#26])
  val?^ | miss    %81.6 = LdVar              eR    names, e1.1
  lgl$#-          %81.7 = Identical                %81.6, <blt names>
  void                    Assume             D     %81.7, %79.0 (CallTarget@0x55c18d02d458[Call#27])
  val?^ | miss    %81.9 = LdVar              eR    gpars, e1.1
  val?            %81.10 = Force!<wrapped>    !v    %81.9, e1.1   <vec+>
  val?            %81.11 = CallBuiltin        !v    names(%81.10) e1.1   <(nil|str)->
  lgl$#-          %81.12 = IsType                   %81.11 isA val?-
  cp              %81.13 = Checkpoint                -> BB83 (default) | BB82 (if assume failed)
BB80   <- [79]
  fs              %80.0 = FrameState         R     0x55c18d4512d0+761: [], env=e1.1
  void                    Deopt              !v    %80.0   !
BB83   <- [81]
  void                    Assume             D     %81.12, %81.13 (Typecheck@0x55c18b1f2b30[Type#1])
  val?-           %83.1 = CastType           d     dn %81.11   <(nil|str)->
  val+            %83.2 = CallSafeBuiltin    wed   match("fill", %83.1, NA, nil)    <int$->
  lgl$#-          %83.3 = IsType                   %83.2 isA int$-
  cp              %83.4 = Checkpoint                -> BB85 (default) | BB84 (if assume failed)
BB82   <- [81]
  prom-           %82.0 = MkArg                    unboundValue, validGP[0x55c18b8d28b0]_p4, e1.1
  val?^           %82.1 = CastType                 up %82.0
  fs              %82.2 = FrameState         R     0x55c18d4512d0+858: [<blt is.na>], env=e1.1
  env             e82.3 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%82.1, x="fill", parent=R_BaseNamespace, context 0
  fs              %82.4 = FrameState         R     0x55c18ba1ad70+23: ["fill"], env=e82.3, next=%82.2
  fs              %82.5 = FrameState         R     0x55c18d5238f0+32(pr): [%81.11], env=e1.1, next=%82.4
  void                    Deopt              !v    %82.5   !
BB85   <- [83]
  void                    Assume             D     %83.3, %83.4 (Typecheck@0x55c18d02d458[Type#24])
  int$-           %85.1 = CastType           d     dn %83.2
  lgl$-           %85.2 = CallSafeBuiltin    wed   is.na(%85.1)    <lgl$->
  lgl$-           %85.3 = Not                d     %85.2, elided
  lgl$#-          %85.4 = CheckTrueFalse     e     %85.3
  void                    Branch                   %85.4 -> BB183 (if true) | BB86 (if false)
BB84   <- [83]
  prom-           %84.0 = MkArg                    %83.1, validGP[0x55c18b8d28b0]_p4 (!refl), e1.1
  val?~           %84.1 = CastType                 up %84.0
  fs              %84.2 = FrameState         R     0x55c18d4512d0+858: [<blt is.na>], env=e1.1
  env             e84.3 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%84.1, x="fill", parent=R_BaseNamespace, context 0
  fs              %84.4 = FrameState         R     0x55c18ba1ad70+69: [%83.2], env=e84.3, next=%84.2
  void                    Deopt              !v    %84.4   !
BB183   <- [85]
  (cls|spec|blt)  %183.0 = LdFun              !v    $, <0x55c18aee4c10>, e1.1
  prom-           %183.1 = MkArg                    unboundValue, validGP[0x55c18b8d28b0]_p24, e1.1
  prom-           %183.2 = MkArg                    unboundValue, validGP[0x55c18b8d28b0]_p25, e1.1
  val?            %183.3 = Call               !v    %183.0(%183.1, %183.2) e1.1   <str$->
  lgl$-           %183.4 = Is                       %183.3, NULL
  cp              %183.5 = Checkpoint                -> BB185 (default) | BB184 (if assume failed)
BB86   <- [85]
  goto BB87
BB185   <- [183]
  lgl$#-          %185.0 = CheckTrueFalse     e     %183.4
  void                    Branch                   %185.0 -> BB196 (if true) | BB186 (if false)
BB184   <- [183]
  fs              %184.0 = FrameState         R     0x55c18d4512d0+934: [%183.3], env=e1.1
  void                    Deopt              !v    %184.0   !
BB87   <- [86, 194]
  cp              %87.0 = Checkpoint                -> BB89 (default) | BB88 (if assume failed)
BB196   <- [185]
  (cls|spec|blt)  %196.0 = LdFun              !v    <-, e1.1
  fs              %196.1 = FrameState         R     0x55c18d4512d0+1042: [%196.0], env=e1.1
  void                    Deopt              !v    %196.1, DeadCall@0x55c18d02d458[Call#32], %196.0   !
BB186   <- [185]
  val?^ | miss    %186.0 = LdVar              eR    is.pattern, e1.1
  lgl$#-          %186.1 = Identical                %186.0, function(x) <(rir::DispatchTable*)0x55c18d504d|...
  void                    Assume             D     %186.1, %183.5 (CallTarget@0x55c18d02d458[Call#29])
  prom-           %186.3 = MkArg                    unboundValue, validGP[0x55c18b8d28b0]_p26, e1.1
  ct              %186.4 = PushContext        lCL   %186.3, is.pattern($(gpars, fill)), function(x) <(rir::DispatchTable*)0x55c18d504d|..., e1.1
  val?^           %186.5 = CastType                 up %186.3
  cp              %186.6 = Checkpoint                -> BB188 (default) | BB187 (if assume failed)
BB89   <- [87]
  val?^ | miss    %89.0 = LdVar              eR    is.na, e1.1
  lgl$#-          %89.1 = Identical                <blt is.na>, %89.0   <true>
  void                    Assume             D     %89.1, %87.0 (DeadBranchReached@0x55c18d02d458[Test#2])
  val?^ | miss    %89.3 = LdVar              eR    match, e1.1
  lgl$#-          %89.4 = Identical                %89.3, function(x, table, nomatch=NA, incomparables=N|...
  void                    Assume             D     %89.4, %87.0 (CallTarget@0x55c18d02d458[Call#37])
  val?^ | miss    %89.6 = LdVar              eR    names, e1.1
  lgl$#-          %89.7 = Identical                %89.6, <blt names>
  void                    Assume             D     %89.7, %87.0 (CallTarget@0x55c18d02d458[Call#38])
  val?^ | miss    %89.9 = LdVar              eR    gpars, e1.1
  val?            %89.10 = Force!<wrapped>    !v    %89.9, e1.1   <vec+>
  val?            %89.11 = CallBuiltin        !v    names(%89.10) e1.1   <(nil|str)->
  lgl$#-          %89.12 = IsType                   %89.11 isA val?-
  cp              %89.13 = Checkpoint                -> BB91 (default) | BB90 (if assume failed)
BB88   <- [87]
  fs              %88.0 = FrameState         R     0x55c18d4512d0+1075: [], env=e1.1
  void                    Deopt              !v    %88.0   !
BB188   <- [186]
  val?^ | miss    %188.0 = LdVar              eR    inherits, <env 0x55c18d083160>
  lgl$#-          %188.1 = Identical                %188.0, function(x, what, which=FALSE) <(rir::Dispatch|...
  void                    Assume             D     %188.1, %186.6 (CallTarget@0x55c18d858158[Call#0])
  env             e188.3 = MkEnv              l     x=%186.5, parent=<env 0x55c18d083160>, context 1
  prom-           %188.4 = MkArg                    unboundValue, validGP[0x55c18b8d28b0]_p62, e188.3
  ct              %188.5 = PushContext        lCL   %188.4, "GridPattern", inherits(x, "GridPattern"), function(x, what, which=FALSE) <(rir::Dispatch|..., e188.3
  val?^           %188.6 = CastType                 up %188.4
  env             e188.7 = MkEnv              l     x=%188.6, what="GridPattern", which(miss)=false, parent=R_BaseNamespace, context 1
  val?            %188.8 = Force!<lazy>       !vL   %188.6, e188.7   <val?>
  val?            %188.9 = CallBuiltin        !v    inherits(%188.8, "GridPattern", false) e188.7
  val?            %188.10 = PopContext         C     %188.9, %188.5   <lgl$->
  lgl$#-          %188.11 = IsType                   %188.10 isA lgl$-
  cp              %188.12 = Checkpoint                -> BB190 (default) | BB189 (if assume failed)
BB187   <- [186]
  fs              %187.0 = FrameState         R     0x55c18d4512d0+982: [], env=e1.1
  env             e187.1 = (MkEnv)            l     x=%186.5, parent=<env 0x55c18d083160>, context 1
  fs              %187.2 = FrameState         R     0x55c18d504c20+0: [], env=e187.1, next=%187.0
  void                    Deopt              !v    %187.2   !
BB91   <- [89]
  void                    Assume             D     %89.12, %89.13 (Typecheck@0x55c18b1f2b30[Type#1])
  val?-           %91.1 = CastType           d     dn %89.11   <(nil|str)->
  val+            %91.2 = CallSafeBuiltin    wed   match("lty", %91.1, NA, nil)    <int$->
  lgl$#-          %91.3 = IsType                   %91.2 isA int$-
  cp              %91.4 = Checkpoint                -> BB93 (default) | BB92 (if assume failed)
BB90   <- [89]
  prom-           %90.0 = MkArg                    unboundValue, validGP[0x55c18b8d28b0]_p6, e1.1
  val?^           %90.1 = CastType                 up %90.0
  fs              %90.2 = FrameState         R     0x55c18d4512d0+1172: [<blt is.na>], env=e1.1
  env             e90.3 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%90.1, x="lty", parent=R_BaseNamespace, context 0
  fs              %90.4 = FrameState         R     0x55c18ba1ad70+23: ["lty"], env=e90.3, next=%90.2
  fs              %90.5 = FrameState         R     0x55c18d4bac60+32(pr): [%89.11], env=e1.1, next=%90.4
  void                    Deopt              !v    %90.5   !
BB190   <- [188]
  void                    Assume             D     %188.11, %188.12 (Typecheck@0x55c18d858158[Type#1])
  lgl$-           %190.1 = CastType           d     dn %188.10
  val?            %190.2 = PopContext         C     %190.1, %186.4   <lgl$->
  lgl$#-          %190.3 = IsType                   %190.2 isA lgl$-
  cp              %190.4 = Checkpoint                -> BB192 (default) | BB191 (if assume failed)
BB189   <- [188]
  fs              %189.0 = FrameState         R     0x55c18d4512d0+982: [], env=e1.1
  fs              %189.1 = FrameState         R     0x55c18d504c20+37: [%188.10], env=e188.3, next=%189.0
  void                    Deopt              !v    %189.1   !
BB93   <- [91]
  void                    Assume             D     %91.3, %91.4 (Typecheck@0x55c18d02d458[Type#41])
  int$-           %93.1 = CastType           d     dn %91.2
  lgl$-           %93.2 = CallSafeBuiltin    wed   is.na(%93.1)    <lgl$->
  lgl$-           %93.3 = Not                d     %93.2, elided
  lgl$#-          %93.4 = CheckTrueFalse     e     %93.3
  void                    Branch                   %93.4 -> BB178 (if true) | BB94 (if false)
BB92   <- [91]
  prom-           %92.0 = MkArg                    %91.1, validGP[0x55c18b8d28b0]_p6 (!refl), e1.1
  val?~           %92.1 = CastType                 up %92.0
  fs              %92.2 = FrameState         R     0x55c18d4512d0+1172: [<blt is.na>], env=e1.1
  env             e92.3 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%92.1, x="lty", parent=R_BaseNamespace, context 0
  fs              %92.4 = FrameState         R     0x55c18ba1ad70+69: [%91.2], env=e92.3, next=%92.2
  void                    Deopt              !v    %92.4   !
BB192   <- [190]
  void                    Assume             D     %190.3, %190.4 (Typecheck@0x55c18d02d458[Type#32])
  lgl$-           %192.1 = CastType           d     dn %190.2
  lgl$-           %192.2 = Not                d     %192.1, elided
  lgl$#-          %192.3 = CheckTrueFalse     e     %192.2
  void                    Branch                   %192.3 -> BB195 (if true) | BB193 (if false)
BB191   <- [190]
  fs              %191.0 = FrameState         R     0x55c18d4512d0+982: [%190.2], env=e1.1
  void                    Deopt              !v    %191.0   !
BB178   <- [93]
  (cls|spec|blt)  %178.0 = LdFun              !v    $, <0x55c18aee4c10>, e1.1
  prom-           %178.1 = MkArg                    unboundValue, validGP[0x55c18b8d28b0]_p22, e1.1
  prom-           %178.2 = MkArg                    unboundValue, validGP[0x55c18b8d28b0]_p23, e1.1
  val?            %178.3 = Call               !v    %178.0(%178.1, %178.2) e1.1   <str$->
  lgl$-           %178.4 = Is                       %178.3, NULL
  cp              %178.5 = Checkpoint                -> BB180 (default) | BB179 (if assume failed)
BB94   <- [93]
  goto BB95
BB195   <- [192]
  val?^ | miss    %195.0 = LdVar              eR    check.length, e1.1
  lgl$#-          %195.1 = Identical                %195.0, %1.2
  void                    Assume             D     %195.1, %190.4 (CallTarget@0x55c18d02d458[Call#31])
  val?            %195.3 = StaticCall         !v    check.length[0x55c18b0be6b0]("fill") from %1.2 e1.1
  goto BB194
BB193   <- [192]
  goto BB194
BB180   <- [178]
  lgl$#-          %180.0 = CheckTrueFalse     e     %178.4
  void                    Branch                   %180.0 -> BB182 (if true) | BB181 (if false)
BB179   <- [178]
  fs              %179.0 = FrameState         R     0x55c18d4512d0+1248: [%178.3], env=e1.1
  void                    Deopt              !v    %179.0   !
BB95   <- [94, 181]
  cp              %95.0 = Checkpoint                -> BB97 (default) | BB96 (if assume failed)
BB194   <- [193, 195]
  goto BB87
BB182   <- [180]
  (cls|spec|blt)  %182.0 = LdFun              !v    <-, e1.1
  fs              %182.1 = FrameState         R     0x55c18d4512d0+1307: [%182.0], env=e1.1
  void                    Deopt              !v    %182.1, DeadCall@0x55c18d02d458[Call#41], %182.0   !
BB181   <- [180]
  val?^ | miss    %181.0 = LdVar              eR    check.length, e1.1
  lgl$#-          %181.1 = Identical                %181.0, %1.2
  void                    Assume             D     %181.1, %178.5 (CallTarget@0x55c18d02d458[Call#40])
  val?            %181.3 = StaticCall         !v    check.length[0x55c18b0be6b0]("lty") from %1.2 e1.1
  goto BB95
BB97   <- [95]
  val?^ | miss    %97.0 = LdVar              eR    is.na, e1.1
  lgl$#-          %97.1 = Identical                <blt is.na>, %97.0   <true>
  void                    Assume             D     %97.1, %95.0 (DeadBranchReached@0x55c18d02d458[Test#3])
  val?^ | miss    %97.3 = LdVar              eR    match, e1.1
  lgl$#-          %97.4 = Identical                %97.3, function(x, table, nomatch=NA, incomparables=N|...
  void                    Assume             D     %97.4, %95.0 (CallTarget@0x55c18d02d458[Call#46])
  val?^ | miss    %97.6 = LdVar              eR    names, e1.1
  lgl$#-          %97.7 = Identical                %97.6, <blt names>
  void                    Assume             D     %97.7, %95.0 (CallTarget@0x55c18d02d458[Call#47])
  val?^ | miss    %97.9 = LdVar              eR    gpars, e1.1
  val?            %97.10 = Force!<wrapped>    !v    %97.9, e1.1   <vec+>
  val?            %97.11 = CallBuiltin        !v    names(%97.10) e1.1   <(nil|str)->
  lgl$#-          %97.12 = IsType                   %97.11 isA val?-
  cp              %97.13 = Checkpoint                -> BB99 (default) | BB98 (if assume failed)
BB96   <- [95]
  fs              %96.0 = FrameState         R     0x55c18d4512d0+1340: [], env=e1.1
  void                    Deopt              !v    %96.0   !
BB99   <- [97]
  void                    Assume             D     %97.12, %97.13 (Typecheck@0x55c18b1f2b30[Type#1])
  val?-           %99.1 = CastType           d     dn %97.11   <(nil|str)->
  val+            %99.2 = CallSafeBuiltin    wed   match("lineend", %99.1, NA, nil)    <int$->
  lgl$#-          %99.3 = IsType                   %99.2 isA int$-
  cp              %99.4 = Checkpoint                -> BB101 (default) | BB100 (if assume failed)
BB98   <- [97]
  prom-           %98.0 = MkArg                    unboundValue, validGP[0x55c18b8d28b0]_p8, e1.1
  val?^           %98.1 = CastType                 up %98.0
  fs              %98.2 = FrameState         R     0x55c18d4512d0+1437: [<blt is.na>], env=e1.1
  env             e98.3 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%98.1, x="lineend", parent=R_BaseNamespace, context 0
  fs              %98.4 = FrameState         R     0x55c18ba1ad70+23: ["lineend"], env=e98.3, next=%98.2
  fs              %98.5 = FrameState         R     0x55c18d5b5ec0+32(pr): [%97.11], env=e1.1, next=%98.4
  void                    Deopt              !v    %98.5   !
BB101   <- [99]
  void                    Assume             D     %99.3, %99.4 (Typecheck@0x55c18d02d458[Type#54])
  int$-           %101.1 = CastType           d     dn %99.2
  lgl$-           %101.2 = CallSafeBuiltin    wed   is.na(%101.1)    <lgl$->
  cp              %101.3 = Checkpoint                -> BB103 (default) | BB102 (if assume failed)
BB100   <- [99]
  prom-           %100.0 = MkArg                    %99.1, validGP[0x55c18b8d28b0]_p8 (!refl), e1.1
  val?~           %100.1 = CastType                 up %100.0
  fs              %100.2 = FrameState         R     0x55c18d4512d0+1437: [<blt is.na>], env=e1.1
  env             e100.3 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%100.1, x="lineend", parent=R_BaseNamespace, context 0
  fs              %100.4 = FrameState         R     0x55c18ba1ad70+69: [%99.2], env=e100.3, next=%100.2
  void                    Deopt              !v    %100.4   !
BB103   <- [101]
  lgl$-           %103.0 = Not                d     %101.2, elided
  lgl$#-          %103.1 = CheckTrueFalse     e     %103.0
  void                    Branch                   %103.1 -> BB177 (if true) | BB104 (if false)
BB102   <- [101]
  fs              %102.0 = FrameState         R     0x55c18d4512d0+1459: [%101.2], env=e1.1
  void                    Deopt              !v    %102.0   !
BB177   <- [103]
  (cls|spec|blt)  %177.0 = LdFun              !v    $, e1.1
  fs              %177.1 = FrameState         R     0x55c18d4512d0+1481: [%177.0], env=e1.1
  void                    Deopt              !v    %177.1, DeadCall@0x55c18d02d458[Call#48], %177.0   !
BB104   <- [103]
  val?^ | miss    %104.0 = LdVar              eR    is.na, e1.1
  lgl$#-          %104.1 = Identical                <blt is.na>, %104.0   <true>
  void                    Assume             D     %104.1, %101.3 (DeadBranchReached@0x55c18d02d458[Test#4])
  val?^ | miss    %104.3 = LdVar              eR    match, e1.1
  lgl$#-          %104.4 = Identical                %104.3, function(x, table, nomatch=NA, incomparables=N|...
  void                    Assume             D     %104.4, %101.3 (CallTarget@0x55c18d02d458[Call#55])
  val?^ | miss    %104.6 = LdVar              eR    names, e1.1
  lgl$#-          %104.7 = Identical                %104.6, <blt names>
  void                    Assume             D     %104.7, %101.3 (CallTarget@0x55c18d02d458[Call#56])
  val?^ | miss    %104.9 = LdVar              eR    gpars, e1.1
  val?            %104.10 = Force!<wrapped>    !v    %104.9, e1.1   <vec+>
  val?            %104.11 = CallBuiltin        !v    names(%104.10) e1.1   <(nil|str)->
  lgl$#-          %104.12 = IsType                   %104.11 isA val?-
  cp              %104.13 = Checkpoint                -> BB106 (default) | BB105 (if assume failed)
BB106   <- [104]
  void                    Assume             D     %104.12, %104.13 (Typecheck@0x55c18b1f2b30[Type#1])
  val?-           %106.1 = CastType           d     dn %104.11   <(nil|str)->
  val+            %106.2 = CallSafeBuiltin    wed   match("linejoin", %106.1, NA, nil)    <int$->
  lgl$#-          %106.3 = IsType                   %106.2 isA int$-
  cp              %106.4 = Checkpoint                -> BB108 (default) | BB107 (if assume failed)
BB105   <- [104]
  prom-           %105.0 = MkArg                    unboundValue, validGP[0x55c18b8d28b0]_p10, e1.1
  val?^           %105.1 = CastType                 up %105.0
  fs              %105.2 = FrameState         R     0x55c18d4512d0+1702: [<blt is.na>], env=e1.1
  env             e105.3 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%105.1, x="linejoin", parent=R_BaseNamespace, context 0
  fs              %105.4 = FrameState         R     0x55c18ba1ad70+23: ["linejoin"], env=e105.3, next=%105.2
  fs              %105.5 = FrameState         R     0x55c18d576a40+32(pr): [%104.11], env=e1.1, next=%105.4
  void                    Deopt              !v    %105.5   !
BB108   <- [106]
  void                    Assume             D     %106.3, %106.4 (Typecheck@0x55c18d02d458[Type#67])
  int$-           %108.1 = CastType           d     dn %106.2
  lgl$-           %108.2 = CallSafeBuiltin    wed   is.na(%108.1)    <lgl$->
  cp              %108.3 = Checkpoint                -> BB110 (default) | BB109 (if assume failed)
BB107   <- [106]
  prom-           %107.0 = MkArg                    %106.1, validGP[0x55c18b8d28b0]_p10 (!refl), e1.1
  val?~           %107.1 = CastType                 up %107.0
  fs              %107.2 = FrameState         R     0x55c18d4512d0+1702: [<blt is.na>], env=e1.1
  env             e107.3 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%107.1, x="linejoin", parent=R_BaseNamespace, context 0
  fs              %107.4 = FrameState         R     0x55c18ba1ad70+69: [%106.2], env=e107.3, next=%107.2
  void                    Deopt              !v    %107.4   !
BB110   <- [108]
  lgl$-           %110.0 = Not                d     %108.2, elided
  lgl$#-          %110.1 = CheckTrueFalse     e     %110.0
  cp              %110.2 = Checkpoint                -> BB112 (default) | BB111 (if assume failed)
BB109   <- [108]
  fs              %109.0 = FrameState         R     0x55c18d4512d0+1724: [%108.2], env=e1.1
  void                    Deopt              !v    %109.0   !
BB112   <- [110]
  void                    Branch                   %110.1 -> BB176 (if true) | BB113 (if false)
BB111   <- [110]
  fs              %111.0 = FrameState         R     0x55c18d4512d0+1731: [%110.1], env=e1.1
  void                    Deopt              !v    %111.0   !
BB176   <- [112]
  (cls|spec|blt)  %176.0 = LdFun              !v    $, e1.1
  fs              %176.1 = FrameState         R     0x55c18d4512d0+1746: [%176.0], env=e1.1
  void                    Deopt              !v    %176.1, DeadCall@0x55c18d02d458[Call#57], %176.0   !
BB113   <- [112]
  val?^ | miss    %113.0 = LdVar              eR    numnotnull, e1.1
  lgl$#-          %113.1 = Identical                %113.0, %1.3
  void                    Assume             D     %113.1, %108.3 (CallTarget@0x55c18d02d458[Call#61])
  ct              %113.3 = PushContext        lCL   "linemitre", numnotnull("linemitre"), %1.3, e1.1
  val?^ | miss    %113.4 = LdVar              eR    is.na, e1.1
  lgl$#-          %113.5 = Identical                <blt is.na>, %113.4   <true>
  void                    Assume             D     %113.5, %110.2 (DeadBranchReached@0x55c18d8fc288[Test#0])
  cp              %113.7 = Checkpoint                -> BB115 (default) | BB114 (if assume failed)
BB115   <- [113]
  env             e115.0 = MkEnv              l     gparname="linemitre", parent=e1.1, context 1
  val?^ | miss    %115.1 = LdVar              eR    match, e115.0
  lgl$#-          %115.2 = Identical                %115.1, function(x, table, nomatch=NA, incomparables=N|...
  void                    Assume             D     %115.2, %113.7 (CallTarget@0x55c18d8fc288[Call#3])
  val?^ | miss    %115.4 = LdVar              eR    names, e1.1
  lgl$#-          %115.5 = Identical                %115.4, <blt names>
  void                    Assume             D     %115.5, %113.7 (CallTarget@0x55c18d8fc288[Call#4])
  val?^ | miss    %115.7 = LdVar              eR    gpars, e115.0
  val?            %115.8 = Force!<lazy>       !v    %115.7, e115.0   <vec+>
  val?            %115.9 = CallBuiltin        !v    names(%115.8) e115.0   <(nil|str)->
  lgl$#-          %115.10 = IsType                   %115.9 isA val?-
  cp              %115.11 = Checkpoint                -> BB117 (default) | BB116 (if assume failed)
BB114   <- [113]
  fs              %114.0 = FrameState         R     0x55c18d4512d0+1902: [], env=e1.1
  env             e114.1 = (MkEnv)            l     gparname="linemitre", parent=e1.1, context 1
  fs              %114.2 = FrameState         R     0x55c18d1d7fc0+60: [<blt is.na>], env=e114.1, next=%114.0
  void                    Deopt              !v    %114.2   !
BB117   <- [115]
  void                    Assume             D     %115.10, %115.11 (Typecheck@0x55c18b1f2b30[Type#1])
  val?-           %117.1 = CastType           d     dn %115.9   <(nil|str)->
  val+            %117.2 = CallSafeBuiltin    wed   match("linemitre", %117.1, NA, nil)    <int$->
  lgl$#-          %117.3 = IsType                   %117.2 isA int$-
  cp              %117.4 = Checkpoint                -> BB119 (default) | BB118 (if assume failed)
BB116   <- [115]
  fs              %116.0 = FrameState         R     0x55c18d4512d0+1902: [], env=e1.1
  prom-           %116.1 = MkArg                    unboundValue, validGP[0x55c18b8d28b0]_p70, e115.0
  val?^           %116.2 = CastType                 up %116.1
  prom-           %116.3 = MkArg                    unboundValue, validGP[0x55c18b8d28b0]_p69, e115.0
  val?^           %116.4 = CastType                 up %116.3
  fs              %116.5 = FrameState         R     0x55c18d1d7fc0+97: [<blt is.na>], env=e115.0, next=%116.0
  env             e116.6 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%116.2, x=%116.4, parent=R_BaseNamespace, context 0
  fs              %116.7 = FrameState         R     0x55c18ba1ad70+23: ["linemitre"], env=e116.6, next=%116.5
  fs              %116.8 = FrameState         R     0x55c18d178990+32(pr): [%115.9], env=e115.0, next=%116.7
  void                    Deopt              !v    %116.8   !
BB119   <- [117]
  void                    Assume             D     %117.3, %117.4 (Typecheck@0x55c18d8fc288[Type#7])
  int$-           %119.1 = CastType           d     dn %117.2
  lgl$-           %119.2 = CallSafeBuiltin    wed   is.na(%119.1)    <lgl$->
  lgl$-           %119.3 = Not                d     %119.2, elided
  lgl$#-          %119.4 = CheckTrueFalse     e     %119.3
  void                    Branch                   %119.4 -> BB168 (if true) | BB120 (if false)
BB118   <- [117]
  fs              %118.0 = FrameState         R     0x55c18d4512d0+1902: [], env=e1.1
  prom-           %118.1 = MkArg                    unboundValue, validGP[0x55c18b8d28b0]_p69, e115.0
  val?^           %118.2 = CastType                 up %118.1
  prom-           %118.3 = MkArg                    %117.1, validGP[0x55c18b8d28b0]_p70 (!refl), e115.0
  val?~           %118.4 = CastType                 up %118.3
  fs              %118.5 = FrameState         R     0x55c18d1d7fc0+97: [<blt is.na>], env=e115.0, next=%118.0
  env             e118.6 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%118.4, x=%118.2, parent=R_BaseNamespace, context 0
  fs              %118.7 = FrameState         R     0x55c18ba1ad70+69: [%117.2], env=e118.6, next=%118.5
  void                    Deopt              !v    %118.7   !
BB168   <- [119]
  val?^ | miss    %168.0 = LdVar              eR    gpars, e115.0
  val?            %168.1 = Force!             !v    %168.0, e115.0   <val?_>
  lgl$#-          %168.2 = IsType                   %168.1 isA val+   <@?>
  void                    Branch                   %168.2 -> BB175 (if true) | BB169 (if false)
BB120   <- [119]
  goto BB121
BB175   <- [168]
  val?^ | miss    %175.0 = LdVar              eR    gparname, e115.0
  val?            %175.1 = Force!             !v    %175.0, e115.0   <val?_>
  goto BB170
BB169   <- [168]
  prom-           %169.0 = MkArg                    unboundValue, validGP[0x55c18b8d28b0]_p72, e115.0
  goto BB170
BB121   <- [120, 174]
  val?            %121.0 = PopContext         C     nil, %113.3
  cp              %121.1 = Checkpoint                -> BB123 (default) | BB122 (if assume failed)
BB170   <- [169, 175]
  val?            %170.0 = Phi                      %175.1:BB175, %169.0:BB169
  val?            %170.1 = Extract2_1D        !v    %168.1, %170.0, e115.0   <val?_>
  lgl$-           %170.2 = Is                       %170.1, NULL
  lgl$#-          %170.3 = CheckTrueFalse     e     %170.2
  void                    Branch                   %170.3 -> BB172 (if true) | BB171 (if false)
BB123   <- [121]
  val?^ | miss    %123.0 = LdVar              eR    is.na, e1.1
  lgl$#-          %123.1 = Identical                <blt is.na>, %123.0   <true>
  void                    Assume             D     %123.1, %121.1 (DeadBranchReached@0x55c18d02d458[Test#5])
  val?^ | miss    %123.3 = LdVar              eR    match, e1.1
  lgl$#-          %123.4 = Identical                %123.3, function(x, table, nomatch=NA, incomparables=N|...
  void                    Assume             D     %123.4, %121.1 (CallTarget@0x55c18d02d458[Call#65])
  val?^ | miss    %123.6 = LdVar              eR    names, e1.1
  lgl$#-          %123.7 = Identical                %123.6, <blt names>
  void                    Assume             D     %123.7, %121.1 (CallTarget@0x55c18d02d458[Call#66])
  val?^ | miss    %123.9 = LdVar              eR    gpars, e1.1
  val?            %123.10 = Force!<wrapped>    !v    %123.9, e1.1   <vec+>
  val?            %123.11 = CallBuiltin        !v    names(%123.10) e1.1   <(nil|str)->
  lgl$#-          %123.12 = IsType                   %123.11 isA val?-
  cp              %123.13 = Checkpoint                -> BB125 (default) | BB124 (if assume failed)
BB122   <- [121]
  fs              %122.0 = FrameState         R     0x55c18d4512d0+1902: [%121.0], env=e1.1
  void                    Deopt              !v    %122.0   !
BB172   <- [170]
  val?^ | miss    %172.0 = LdVar              eR    gpars, e1.1   <val?_>
  val?^ | miss    %172.1 = LdVar              eR    gparname, e115.0
  val?            %172.2 = Force!             !v    %172.1, e115.0   <val?_>
  val?            %172.3 = Force!             !v    %172.0, e115.0
  lgl$#-          %172.4 = IsType                   %172.3 isA val?+
  lgl$#-          %172.5 = IsType                   %172.2 isA val?+
  cp              %172.6 = Checkpoint                -> BB174 (default) | BB173 (if assume failed)
BB171   <- [170]
  fs              %171.0 = FrameState         R     0x55c18d4512d0+1902: [], env=e1.1
  (cls|spec|blt)  %171.1 = LdFun              !v    check.length, e115.0
  fs              %171.2 = FrameState         R     0x55c18d1d7fc0+224: [%171.1], env=e115.0, next=%171.0
  void                    Deopt              !v    %171.2, DeadCall@0x55c18d8fc288[Call#5], %171.1   !
BB125   <- [123]
  void                    Assume             D     %123.12, %123.13 (Typecheck@0x55c18b1f2b30[Type#1])
  val?-           %125.1 = CastType           d     dn %123.11   <(nil|str)->
  val+            %125.2 = CallSafeBuiltin    wed   match("linemitre", %125.1, NA, nil)    <int$->
  lgl$#-          %125.3 = IsType                   %125.2 isA int$-
  cp              %125.4 = Checkpoint                -> BB127 (default) | BB126 (if assume failed)
BB124   <- [123]
  prom-           %124.0 = MkArg                    unboundValue, validGP[0x55c18b8d28b0]_p12, e1.1
  val?^           %124.1 = CastType                 up %124.0
  fs              %124.2 = FrameState         R     0x55c18d4512d0+2000: [<blt is.na>], env=e1.1
  env             e124.3 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%124.1, x="linemitre", parent=R_BaseNamespace, context 0
  fs              %124.4 = FrameState         R     0x55c18ba1ad70+23: ["linemitre"], env=e124.3, next=%124.2
  fs              %124.5 = FrameState         R     0x55c18d516ea0+32(pr): [%123.11], env=e1.1, next=%124.4
  void                    Deopt              !v    %124.5   !
BB174   <- [172]
  void                    Assume             D     %172.4, %172.6 (Typecheck@0x55c18d8fc288[Type#25])
  val?+           %174.1 = CastType           d     dn %172.3
  void                    Assume             D     %172.5, %172.6 (Typecheck@0x55c18d8fc288[Type#26])
  val?+           %174.3 = CastType           d     dn %172.2   <val?_>
  val?+           %174.4 = Subassign2_1D      wed   nil, %174.1, %174.3, elided
  void                    StVarSuper         lRW   gpars, %174.4, e115.0
  goto BB121
BB173   <- [172]
  fs              %173.0 = FrameState         R     0x55c18d4512d0+1902: [], env=e1.1
  fs              %173.1 = FrameState         R     0x55c18d1d7fc0+480: [nil, nil, %172.3, %172.2], env=e115.0, next=%173.0
  void                    Deopt              !v    %173.1   !
BB127   <- [125]
  void                    Assume             D     %125.3, %125.4 (Typecheck@0x55c18d02d458[Type#80])
  int$-           %127.1 = CastType           d     dn %125.2
  lgl$-           %127.2 = CallSafeBuiltin    wed   is.na(%127.1)    <lgl$->
  cp              %127.3 = Checkpoint                -> BB129 (default) | BB128 (if assume failed)
BB126   <- [125]
  prom-           %126.0 = MkArg                    %125.1, validGP[0x55c18b8d28b0]_p12 (!refl), e1.1
  val?~           %126.1 = CastType                 up %126.0
  fs              %126.2 = FrameState         R     0x55c18d4512d0+2000: [<blt is.na>], env=e1.1
  env             e126.3 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%126.1, x="linemitre", parent=R_BaseNamespace, context 0
  fs              %126.4 = FrameState         R     0x55c18ba1ad70+69: [%125.2], env=e126.3, next=%126.2
  void                    Deopt              !v    %126.4   !
BB129   <- [127]
  lgl$-           %129.0 = Not                d     %127.2, elided
  lgl$#-          %129.1 = CheckTrueFalse     e     %129.0
  void                    Branch                   %129.1 -> BB165 (if true) | BB130 (if false)
BB128   <- [127]
  fs              %128.0 = FrameState         R     0x55c18d4512d0+2022: [%127.2], env=e1.1
  void                    Deopt              !v    %128.0   !
BB165   <- [129]
  val?^ | miss    %165.0 = LdVar              eR    any, e1.1
  lgl$#-          %165.1 = Identical                <blt any>, %165.0   <@?>
  void                    Branch                   %165.1 -> BB167 (if true) | BB166 (if false)
BB130   <- [129]
  val?^ | miss    %130.0 = LdVar              eR    is.na, e1.1
  lgl$#-          %130.1 = Identical                <blt is.na>, %130.0   <true>
  void                    Assume             D     %130.1, %127.3 (DeadBranchReached@0x55c18d02d458[Test#7])
  val?^ | miss    %130.3 = LdVar              eR    match, e1.1
  lgl$#-          %130.4 = Identical                %130.3, function(x, table, nomatch=NA, incomparables=N|...
  void                    Assume             D     %130.4, %127.3 (CallTarget@0x55c18d02d458[Call#74])
  val?^ | miss    %130.6 = LdVar              eR    names, e1.1
  lgl$#-          %130.7 = Identical                %130.6, <blt names>
  void                    Assume             D     %130.7, %127.3 (CallTarget@0x55c18d02d458[Call#75])
  val?^ | miss    %130.9 = LdVar              eR    gpars, e1.1
  val?            %130.10 = Force!<wrapped>    !v    %130.9, e1.1   <vec+>
  val?            %130.11 = CallBuiltin        !v    names(%130.10) e1.1   <(nil|str)->
  lgl$#-          %130.12 = IsType                   %130.11 isA val?-
  cp              %130.13 = Checkpoint                -> BB132 (default) | BB131 (if assume failed)
BB167   <- [165]
  (cls|spec|blt)  %167.0 = LdFun              !v    $, e1.1
  fs              %167.1 = FrameState         R     0x55c18d4512d0+2104: [<blt any>, %167.0], env=e1.1
  void                    Deopt              !v    %167.1, DeadCall@0x55c18d02d458[Call#69], %167.0   !
BB166   <- [165]
  (cls|spec|blt)  %166.0 = LdFun              !v    any, e1.1
  fs              %166.1 = FrameState         R     0x55c18d4512d0+2067: [%166.0], env=e1.1
  void                    Deopt              !v    %166.1, DeadCall@0x55c18d02d458[Call#67], %166.0   !
BB132   <- [130]
  void                    Assume             D     %130.12, %130.13 (Typecheck@0x55c18b1f2b30[Type#1])
  val?-           %132.1 = CastType           d     dn %130.11   <(nil|str)->
  val+            %132.2 = CallSafeBuiltin    wed   match("alpha", %132.1, NA, nil)    <int$->
  lgl$#-          %132.3 = IsType                   %132.2 isA int$-
  cp              %132.4 = Checkpoint                -> BB134 (default) | BB133 (if assume failed)
BB131   <- [130]
  prom-           %131.0 = MkArg                    unboundValue, validGP[0x55c18b8d28b0]_p14, e1.1
  val?^           %131.1 = CastType                 up %131.0
  fs              %131.2 = FrameState         R     0x55c18d4512d0+2316: [<blt is.na>], env=e1.1
  env             e131.3 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%131.1, x="alpha", parent=R_BaseNamespace, context 0
  fs              %131.4 = FrameState         R     0x55c18ba1ad70+23: ["alpha"], env=e131.3, next=%131.2
  fs              %131.5 = FrameState         R     0x55c18d4341e0+32(pr): [%130.11], env=e1.1, next=%131.4
  void                    Deopt              !v    %131.5   !
BB134   <- [132]
  void                    Assume             D     %132.3, %132.4 (Typecheck@0x55c18d02d458[Type#96])
  int$-           %134.1 = CastType           d     dn %132.2
  lgl$-           %134.2 = CallSafeBuiltin    wed   is.na(%134.1)    <lgl$->
  cp              %134.3 = Checkpoint                -> BB136 (default) | BB135 (if assume failed)
BB133   <- [132]
  prom-           %133.0 = MkArg                    %132.1, validGP[0x55c18b8d28b0]_p14 (!refl), e1.1
  val?~           %133.1 = CastType                 up %133.0
  fs              %133.2 = FrameState         R     0x55c18d4512d0+2316: [<blt is.na>], env=e1.1
  env             e133.3 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%133.1, x="alpha", parent=R_BaseNamespace, context 0
  fs              %133.4 = FrameState         R     0x55c18ba1ad70+69: [%132.2], env=e133.3, next=%133.2
  void                    Deopt              !v    %133.4   !
BB136   <- [134]
  lgl$-           %136.0 = Not                d     %134.2, elided
  lgl$#-          %136.1 = CheckTrueFalse     e     %136.0
  void                    Branch                   %136.1 -> BB162 (if true) | BB137 (if false)
BB135   <- [134]
  fs              %135.0 = FrameState         R     0x55c18d4512d0+2338: [%134.2], env=e1.1
  void                    Deopt              !v    %135.0   !
BB162   <- [136]
  val?^ | miss    %162.0 = LdVar              eR    any, e1.1
  lgl$#-          %162.1 = Identical                <blt any>, %162.0   <@?>
  void                    Branch                   %162.1 -> BB164 (if true) | BB163 (if false)
BB137   <- [136]
  val?^ | miss    %137.0 = LdVar              eR    is.na, e1.1
  lgl$#-          %137.1 = Identical                <blt is.na>, %137.0   <true>
  void                    Assume             D     %137.1, %134.3 (DeadBranchReached@0x55c18d02d458[Test#10])
  val?^ | miss    %137.3 = LdVar              eR    match, e1.1
  lgl$#-          %137.4 = Identical                %137.3, function(x, table, nomatch=NA, incomparables=N|...
  void                    Assume             D     %137.4, %134.3 (CallTarget@0x55c18d02d458[Call#86])
  val?^ | miss    %137.6 = LdVar              eR    names, e1.1
  lgl$#-          %137.7 = Identical                %137.6, <blt names>
  void                    Assume             D     %137.7, %134.3 (CallTarget@0x55c18d02d458[Call#87])
  val?^ | miss    %137.9 = LdVar              eR    gpars, e1.1
  val?            %137.10 = Force!<wrapped>    !v    %137.9, e1.1   <vec+>
  val?            %137.11 = CallBuiltin        !v    names(%137.10) e1.1   <(nil|str)->
  lgl$#-          %137.12 = IsType                   %137.11 isA val?-
  cp              %137.13 = Checkpoint                -> BB139 (default) | BB138 (if assume failed)
BB164   <- [162]
  (cls|spec|blt)  %164.0 = LdFun              !v    $, e1.1
  fs              %164.1 = FrameState         R     0x55c18d4512d0+2420: [<blt any>, %164.0], env=e1.1
  void                    Deopt              !v    %164.1, DeadCall@0x55c18d02d458[Call#78], %164.0   !
BB163   <- [162]
  (cls|spec|blt)  %163.0 = LdFun              !v    any, e1.1
  fs              %163.1 = FrameState         R     0x55c18d4512d0+2383: [%163.0], env=e1.1
  void                    Deopt              !v    %163.1, DeadCall@0x55c18d02d458[Call#76], %163.0   !
BB139   <- [137]
  void                    Assume             D     %137.12, %137.13 (Typecheck@0x55c18b1f2b30[Type#1])
  val?-           %139.1 = CastType           d     dn %137.11   <(nil|str)->
  val+            %139.2 = CallSafeBuiltin    wed   match("font", %139.1, NA, nil)    <int$->
  lgl$#-          %139.3 = IsType                   %139.2 isA int$-
  cp              %139.4 = Checkpoint                -> BB141 (default) | BB140 (if assume failed)
BB138   <- [137]
  fs              %138.0 = FrameState         R     0x55c18d4512d0+2777: [<blt is.na>], env=e1.1
  prom-           %138.1 = MkArg                    unboundValue, validGP[0x55c18b8d28b0]_p16, e1.1
  val?^           %138.2 = CastType                 up %138.1
  env             e138.3 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%138.2, x="font", parent=R_BaseNamespace, context 0
  fs              %138.4 = FrameState         R     0x55c18ba1ad70+23: ["font"], env=e138.3, next=%138.0
  fs              %138.5 = FrameState         R     0x55c18d5d3ea0+32(pr): [%137.11], env=e1.1, next=%138.4
  void                    Deopt              !v    %138.5   !
BB141   <- [139]
  void                    Assume             D     %139.3, %139.4 (Typecheck@0x55c18d02d458[Type#121])
  int$-           %141.1 = CastType           d     dn %139.2
  lgl$-           %141.2 = CallSafeBuiltin    wed   is.na(%141.1)    <lgl$->
  cp              %141.3 = Checkpoint                -> BB143 (default) | BB142 (if assume failed)
BB140   <- [139]
  prom-           %140.0 = MkArg                    %139.1, validGP[0x55c18b8d28b0]_p16 (!refl), e1.1
  val?~           %140.1 = CastType                 up %140.0
  fs              %140.2 = FrameState         R     0x55c18d4512d0+2777: [<blt is.na>], env=e1.1
  env             e140.3 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%140.1, x="font", parent=R_BaseNamespace, context 0
  fs              %140.4 = FrameState         R     0x55c18ba1ad70+69: [%139.2], env=e140.3, next=%140.2
  void                    Deopt              !v    %140.4   !
BB143   <- [141]
  lgl$-           %143.0 = Not                d     %141.2, elided
  lgl$#-          %143.1 = CheckTrueFalse     e     %143.0
  void                    Branch                   %143.1 -> BB161 (if true) | BB144 (if false)
BB142   <- [141]
  fs              %142.0 = FrameState         R     0x55c18d4512d0+2799: [%141.2], env=e1.1
  void                    Deopt              !v    %142.0   !
BB161   <- [143]
  (cls|spec|blt)  %161.0 = LdFun              !v    $, e1.1
  fs              %161.1 = FrameState         R     0x55c18d4512d0+2821: [%161.0], env=e1.1
  void                    Deopt              !v    %161.1, DeadCall@0x55c18d02d458[Call#88], %161.0   !
BB144   <- [143]
  val?^ | miss    %144.0 = LdVar              eR    is.na, e1.1
  lgl$#-          %144.1 = Identical                <blt is.na>, %144.0   <true>
  void                    Assume             D     %144.1, %141.3 (DeadBranchReached@0x55c18d02d458[Test#11])
  val?^ | miss    %144.3 = LdVar              eR    match, e1.1
  lgl$#-          %144.4 = Identical                %144.3, function(x, table, nomatch=NA, incomparables=N|...
  void                    Assume             D     %144.4, %141.3 (CallTarget@0x55c18d02d458[Call#99])
  val?^ | miss    %144.6 = LdVar              eR    names, e1.1
  lgl$#-          %144.7 = Identical                %144.6, <blt names>
  void                    Assume             D     %144.7, %141.3 (CallTarget@0x55c18d02d458[Call#100])
  val?^ | miss    %144.9 = LdVar              eR    gpars, e1.1
  val?            %144.10 = Force!<wrapped>    !v    %144.9, e1.1   <vec+>
  val?            %144.11 = CallBuiltin        !v    names(%144.10) e1.1   <(nil|str)->
  lgl$#-          %144.12 = IsType                   %144.11 isA val?-
  cp              %144.13 = Checkpoint                -> BB146 (default) | BB145 (if assume failed)
BB146   <- [144]
  void                    Assume             D     %144.12, %144.13 (Typecheck@0x55c18b1f2b30[Type#1])
  val?-           %146.1 = CastType           d     dn %144.11   <(nil|str)->
  val+            %146.2 = CallSafeBuiltin    wed   match("fontfamily", %146.1, NA, nil)    <int$->
  lgl$#-          %146.3 = IsType                   %146.2 isA int$-
  cp              %146.4 = Checkpoint                -> BB148 (default) | BB147 (if assume failed)
BB145   <- [144]
  prom-           %145.0 = MkArg                    unboundValue, validGP[0x55c18b8d28b0]_p18, e1.1
  val?^           %145.1 = CastType                 up %145.0
  fs              %145.2 = FrameState         R     0x55c18d4512d0+3080: [<blt is.na>], env=e1.1
  env             e145.3 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%145.1, x="fontfamily", parent=R_BaseNamespace, context 0
  fs              %145.4 = FrameState         R     0x55c18ba1ad70+23: ["fontfamily"], env=e145.3, next=%145.2
  fs              %145.5 = FrameState         R     0x55c18d2303b0+32(pr): [%144.11], env=e1.1, next=%145.4
  void                    Deopt              !v    %145.5   !
BB148   <- [146]
  void                    Assume             D     %146.3, %146.4 (Typecheck@0x55c18d02d458[Type#141])
  int$-           %148.1 = CastType           d     dn %146.2
  lgl$-           %148.2 = CallSafeBuiltin    wed   is.na(%148.1)    <lgl$->
  cp              %148.3 = Checkpoint                -> BB150 (default) | BB149 (if assume failed)
BB147   <- [146]
  prom-           %147.0 = MkArg                    %146.1, validGP[0x55c18b8d28b0]_p18 (!refl), e1.1
  val?~           %147.1 = CastType                 up %147.0
  fs              %147.2 = FrameState         R     0x55c18d4512d0+3080: [<blt is.na>], env=e1.1
  env             e147.3 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%147.1, x="fontfamily", parent=R_BaseNamespace, context 0
  fs              %147.4 = FrameState         R     0x55c18ba1ad70+69: [%146.2], env=e147.3, next=%147.2
  void                    Deopt              !v    %147.4   !
BB150   <- [148]
  lgl$-           %150.0 = Not                d     %148.2, elided
  lgl$#-          %150.1 = CheckTrueFalse     e     %150.0
  void                    Branch                   %150.1 -> BB160 (if true) | BB151 (if false)
BB149   <- [148]
  fs              %149.0 = FrameState         R     0x55c18d4512d0+3102: [%148.2], env=e1.1
  void                    Deopt              !v    %149.0   !
BB160   <- [150]
  (cls|spec|blt)  %160.0 = LdFun              !v    $, e1.1
  fs              %160.1 = FrameState         R     0x55c18d4512d0+3124: [%160.0], env=e1.1
  void                    Deopt              !v    %160.1, DeadCall@0x55c18d02d458[Call#101], %160.0   !
BB151   <- [150]
  val?^ | miss    %151.0 = LdVar              eR    is.na, e1.1
  lgl$#-          %151.1 = Identical                <blt is.na>, %151.0   <true>
  void                    Assume             D     %151.1, %148.3 (DeadBranchReached@0x55c18d02d458[Test#12])
  val?^ | miss    %151.3 = LdVar              eR    match, e1.1
  lgl$#-          %151.4 = Identical                %151.3, function(x, table, nomatch=NA, incomparables=N|...
  void                    Assume             D     %151.4, %148.3 (CallTarget@0x55c18d02d458[Call#113])
  val?^ | miss    %151.6 = LdVar              eR    names, e1.1
  lgl$#-          %151.7 = Identical                %151.6, <blt names>
  void                    Assume             D     %151.7, %148.3 (CallTarget@0x55c18d02d458[Call#114])
  val?^ | miss    %151.9 = LdVar              eR    gpars, e1.1
  val?            %151.10 = Force!<wrapped>    !v    %151.9, e1.1   <vec+>
  val?            %151.11 = CallBuiltin        !v    names(%151.10) e1.1   <(nil|str)->
  lgl$#-          %151.12 = IsType                   %151.11 isA val?-
  cp              %151.13 = Checkpoint                -> BB153 (default) | BB152 (if assume failed)
BB153   <- [151]
  void                    Assume             D     %151.12, %151.13 (Typecheck@0x55c18b1f2b30[Type#1])
  val?-           %153.1 = CastType           d     dn %151.11   <(nil|str)->
  val+            %153.2 = CallSafeBuiltin    wed   match("fontface", %153.1, NA, nil)    <int$->
  lgl$#-          %153.3 = IsType                   %153.2 isA int$-
  cp              %153.4 = Checkpoint                -> BB155 (default) | BB154 (if assume failed)
BB152   <- [151]
  prom-           %152.0 = MkArg                    unboundValue, validGP[0x55c18b8d28b0]_p20, e1.1
  val?^           %152.1 = CastType                 up %152.0
  fs              %152.2 = FrameState         R     0x55c18d4512d0+3416: [<blt is.na>], env=e1.1
  env             e152.3 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%152.1, x="fontface", parent=R_BaseNamespace, context 0
  fs              %152.4 = FrameState         R     0x55c18ba1ad70+23: ["fontface"], env=e152.3, next=%152.2
  fs              %152.5 = FrameState         R     0x55c18d6f3560+32(pr): [%151.11], env=e1.1, next=%152.4
  void                    Deopt              !v    %152.5   !
BB155   <- [153]
  void                    Assume             D     %153.3, %153.4 (Typecheck@0x55c18d02d458[Type#161])
  int$-           %155.1 = CastType           d     dn %153.2
  lgl$-           %155.2 = CallSafeBuiltin    wed   is.na(%155.1)    <lgl$->
  lgl$-           %155.3 = Not                d     %155.2, elided
  lgl$#-          %155.4 = CheckTrueFalse     e     %155.3
  void                    Branch                   %155.4 -> BB157 (if true) | BB156 (if false)
BB154   <- [153]
  prom-           %154.0 = MkArg                    %153.1, validGP[0x55c18b8d28b0]_p20 (!refl), e1.1
  val?~           %154.1 = CastType                 up %154.0
  fs              %154.2 = FrameState         R     0x55c18d4512d0+3416: [<blt is.na>], env=e1.1
  env             e154.3 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%154.1, x="fontface", parent=R_BaseNamespace, context 0
  fs              %154.4 = FrameState         R     0x55c18ba1ad70+69: [%153.2], env=e154.3, next=%154.2
  void                    Deopt              !v    %154.4   !
BB157   <- [155]
  val?^ | miss    %157.0 = LdVar              eR    is.na, e1.1
  lgl$#-          %157.1 = Identical                <blt is.na>, %157.0   <@?>
  void                    Branch                   %157.1 -> BB159 (if true) | BB158 (if false)
BB156   <- [155]
  val?^ | miss    %156.0 = LdVar              eR    gpars, e1.1
  void                    Visible            v     
  val?            %156.2 = Force!<wrapped>    !     %156.0, e1.1   <vec+>
  void                    Return             l     %156.2
BB159   <- [157]
  (cls|spec|blt)  %159.0 = LdFun              !v    match, e1.1
  fs              %159.1 = FrameState         R     0x55c18d4512d0+3520: [<blt is.na>, %159.0], env=e1.1
  void                    Deopt              !v    %159.1, DeadCall@0x55c18d02d458[Call#118], %159.0   !
BB158   <- [157]
  (cls|spec|blt)  %158.0 = LdFun              !v    is.na, e1.1
  fs              %158.1 = FrameState         R     0x55c18d4512d0+3483: [%158.0], env=e1.1
  void                    Deopt              !v    %158.1, DeadCall@0x55c18d02d458[Call#115], %158.0   !
Prom 0:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     names, <0x55c18aee5470>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, validGP[0x55c18b8d28b0]_p1, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <(nil|str)->
  void                    Return             l     %1.3
Prom 1:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    gpars, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 2:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     names, <0x55c18aee5470>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, validGP[0x55c18b8d28b0]_p3, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <(nil|str)->
  void                    Return             l     %1.3
Prom 3:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    gpars, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 4:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     names, <0x55c18aee5470>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, validGP[0x55c18b8d28b0]_p5, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <(nil|str)->
  void                    Return             l     %1.3
Prom 5:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    gpars, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 6:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     names, <0x55c18aee5470>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, validGP[0x55c18b8d28b0]_p7, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <(nil|str)->
  void                    Return             l     %1.3
Prom 7:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    gpars, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 8:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     names, <0x55c18aee5470>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, validGP[0x55c18b8d28b0]_p9, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <(nil|str)->
  void                    Return             l     %1.3
Prom 9:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    gpars, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 10:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     names, <0x55c18aee5470>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, validGP[0x55c18b8d28b0]_p11, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <(nil|str)->
  void                    Return             l     %1.3
Prom 11:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    gpars, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 12:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     names, <0x55c18aee5470>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, validGP[0x55c18b8d28b0]_p13, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <(nil|str)->
  void                    Return             l     %1.3
Prom 13:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    gpars, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 14:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     names, <0x55c18aee5470>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, validGP[0x55c18b8d28b0]_p15, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <(nil|str)->
  void                    Return             l     %1.3
Prom 15:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    gpars, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 16:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     names, <0x55c18aee5470>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, validGP[0x55c18b8d28b0]_p17, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <(nil|str)->
  void                    Return             l     %1.3
Prom 17:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    gpars, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 18:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     names, <0x55c18aee5470>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, validGP[0x55c18b8d28b0]_p19, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <(nil|str)->
  void                    Return             l     %1.3
Prom 19:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    gpars, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 20:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     names, <0x55c18aee5470>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, validGP[0x55c18b8d28b0]_p21, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <(nil|str)->
  void                    Return             l     %1.3
Prom 21:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    gpars, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 22:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    gpars, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 23:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    lty, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 24:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    gpars, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 25:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    fill, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 26:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     $, <0x55c18aee4c10>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, validGP[0x55c18b8d28b0]_p27, e1.0
  prom-           %1.3  = MkArg                    unboundValue, validGP[0x55c18b8d28b0]_p28, e1.0
  val?            %1.4  = Call               !     %1.1(%1.2, %1.3) e1.0   <str$->
  void                    Return             l     %1.4
Prom 27:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    gpars, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 28:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    fill, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 29:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    gpars, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 30:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    col, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 31:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     $, e1.0
  prom-           %1.2  = MkArg                    unboundValue, validGP[0x55c18b8d28b0]_p32, e1.0
  prom-           %1.3  = MkArg                    unboundValue, validGP[0x55c18b8d28b0]_p33, e1.0
  val?            %1.4  = Call               !     %1.1(%1.2, %1.3) e1.0   <val?_>
  void                    Return             l     %1.4
Prom 32:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    gpars, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 33:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    col, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 34:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    gparname, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 35:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     names, <0x55c18aee5470>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, validGP[0x55c18b8d28b0]_p36, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <(nil|str)->
  void                    Return             l     %1.3
Prom 36:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    gpars, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 37:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    gparname, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 38:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    gparname, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 39:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     names, <0x55c18aee5470>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, validGP[0x55c18b8d28b0]_p40, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <(nil|str)->
  void                    Return             l     %1.3
Prom 40:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    gpars, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 41:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    gparname, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 42:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    gparname, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 43:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     names, <0x55c18aee5470>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, validGP[0x55c18b8d28b0]_p44, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <(nil|str)->
  void                    Return             l     %1.3
Prom 44:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    gpars, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 45:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    gparname, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 46:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    gparname, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 47:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     names, <0x55c18aee5470>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, validGP[0x55c18b8d28b0]_p48, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <(nil|str)->
  void                    Return             l     %1.3
Prom 48:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    gpars, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 49:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    gparname, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 50:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    gparname, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 51:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     names, <0x55c18aee5470>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, validGP[0x55c18b8d28b0]_p52, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <(nil|str)->
  void                    Return             l     %1.3
Prom 52:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    gpars, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 53:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    gparname, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 54:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    gparname, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 55:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     names, <0x55c18aee5470>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, validGP[0x55c18b8d28b0]_p56, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <(nil|str)->
  void                    Return             l     %1.3
Prom 56:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    gpars, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 57:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    gparname, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 62:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    x, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <(nil|str)->
  void                    Return             l     %1.3
Prom 69:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    gparname, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <str$->
  void                    Return             l     %1.3
Prom 70:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     names, <0x55c18aee5470>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, validGP[0x55c18b8d28b0]_p71, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <(nil|str)->
  void                    Return             l     %1.3
Prom 71:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    gpars, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <vec+>
  void                    Return             l     %1.3
Prom 72:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    gparname, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3

│ validGP[0x55c18b8d28b0]                                                      │
└──────────────────────────────────────────────────────────────────────────────┘
