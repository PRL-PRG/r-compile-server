
┌──────────────────────────────────────────────────────────────────────────────┐
│ lapply[0x55c18d5b7670]                                                       │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;NonRefl0,!Obj0 miss: 1               │
│ Properties:                                                                  │
├────── PIR Version After Optimizations
lapply[0x55c18d5b7670]
BB0
  goto BB1
BB1   <- [0]
  val?^           %1.0  = LdArg                    1
  val?^           %1.1  = LdArg                    0
  env             e1.2  = MkEnv              l     X=%1.1, FUN=%1.0, ...(miss)=missingArg, parent=R_BaseNamespace, context 1
  prom-           %1.3  = MkArg                    unboundValue, lapply[0x55c18d5b7670]_p0, e1.2
  val?            %1.4  = StaticCall         !v    match.fun[0x55c18d2cdc20](%1.3) e1.2   <(cls|blt)->
  void                    StVar              lW    FUN, %1.4, e1.2
  cp              %1.6  = Checkpoint                -> BB2 (default) | BB16 (if assume failed)
BB2   <- [1]
  val?^ | miss    %2.0  = LdVar              eR    is.vector, e1.2
  lgl$#-          %2.1  = Identical                %2.0, function(x, mode="any") <(rir::DispatchTable*)|...
  void                    Assume             D     %2.1, %1.6 (CallTarget@0x55c18c083f20[Call#1])
  val?^ | miss    %2.3  = LdVar              eR    X, e1.2
  val?            %2.4  = Force!<lazy>       !v    %2.3, e1.2   <vec>
  lgl$#-          %2.5  = CallSafeBuiltin    wed   is.vector(%2.4, "any")    <lgl$->
  cp              %2.6  = Checkpoint                -> BB4 (default) | BB3 (if assume failed)
BB16   <- [1]
  fs              %16.0 = FrameState         R     0x55c18b1d13e0+46: [], env=e1.2
  void                    Deopt              !v    %16.0   !
BB4   <- [2]
  lgl$#-          %4.0  = Not                d     %2.5, elided
  void                    Branch                   %2.5 -> BB15 (if true) | BB5 (if false)
BB3   <- [2]
  fs              %3.0  = FrameState         R     0x55c18b1d13e0+78: [], env=e1.2
  prom-           %3.1  = MkArg                    %2.4, lapply[0x55c18d5b7670]_p1 (!refl), e1.2
  val?~           %3.2  = CastType                 up %3.1
  env             e3.3  = (MkEnv)            l     mode(miss)="any", x=%3.2, parent=R_BaseNamespace, context 0
  fs              %3.4  = FrameState         R     0x55c18cf61b50+41: [%2.5], env=e3.3, next=%3.0
  void                    Deopt              !v    %3.4   !
BB15   <- [4]
  val?^ | miss    %15.0 = LdVar              eR    is.object, e1.2
  lgl$#-          %15.1 = Identical                <blt is.object>, %15.0   <true>
  void                    Assume             D     %15.1, %2.6 (DeadBranchReached@0x55c18c083f20[Test#0])
  val?^ | miss    %15.3 = LdVar              eR    X, e1.2
  val?            %15.4 = Force!<wrapped>    !v    %15.3, e1.2   <vec+>
  lgl$#-          %15.5 = CallSafeBuiltin    wed   is.object(%15.4)    <lgl$->
  lgl$-           %15.6 = LOr                      %4.0, %15.5
  goto BB6
BB5   <- [4]
  goto BB6
BB6   <- [5, 15]
  lgl$-           %6.0  = Phi                      %15.6:BB15, %4.0:BB5
  cp              %6.1  = Checkpoint                -> BB8 (default) | BB7 (if assume failed)
BB8   <- [6]
  lgl$#-          %8.0  = CheckTrueFalse     e     %6.0
  void                    Branch                   %8.0 -> BB14 (if true) | BB9 (if false)
BB7   <- [6]
  fs              %7.0  = FrameState         R     0x55c18b1d13e0+189: [%6.0], env=e1.2
  void                    Deopt              !v    %7.0   !
BB14   <- [8]
  val?^ | miss    %14.0 = LdVar              eR    as.list, e1.2
  lgl$#-          %14.1 = Identical                %14.0, function(x, ...) <(rir::DispatchTable*)0x55c18|...
  void                    Assume             D     %14.1, %6.1 (CallTarget@0x55c18c083f20[Call#3])
  val?^ | miss    %14.3 = LdVar              eR    X, e1.2
  val?            %14.4 = Force!<wrapped>    !v    %14.3, e1.2   <vec>
  val?            %14.5 = StaticCall         !v    as.list[0x55c18dd8a3d0](%14.4) { 0 } e1.2   <vec>
  void                    StVar              lW    X, %14.5, e1.2
  goto BB10
BB9   <- [8]
  goto BB10
BB10   <- [9, 14]
  val?^ | miss    %10.0 = LdVar              eR    X, e1.2
  val?            %10.1 = Force!<wrapped>    !v    %10.0, e1.2   <vec>
  (nil|str)-      %10.2 = Names                    %10.1
  int$-           %10.3 = Length                   %10.1
  vec-            %10.4 = CallSafeBuiltin    wed   vector("list", %10.3) 
  val+            %10.5 = SetNames           e     %10.4, %10.2
  goto BB11
BB11   <- [10, 12]
  int$-           %11.0 = Phi                      0L:BB10, %11.2:BB12
  val?            %11.1 = Phi                      %10.5:BB10, %12.6:BB12
  int$-           %11.2 = Inc                      %11.0
  lgl$-           %11.3 = Lt                 d     %10.3, %11.2, elided
  lgl$#-          %11.4 = Identical                %11.3, true
  void                    Branch                   %11.4 -> BB13 (if true) | BB12 (if false)
BB13   <- [11]
  void                    Visible            v     
  void                    Return             l     %11.1
BB12   <- [11]
  void                    StVar              lW    i, %11.2, e1.2
  (cls|spec|blt)  %12.1 = LdFun              !v    FUN, e1.2
  prom-           %12.2 = MkArg                    unboundValue, lapply[0x55c18d5b7670]_p2, e1.2
  (miss|dots)     %12.3 = LdDots             R     , e1.2
  *dots-          %12.4 = ExpandDots               %12.3
  val?            %12.5 = NamedCall          !v    %12.1(%12.2, .xpandDotsTrigger=%12.4) e1.2   <val?>
  val?            %12.6 = SetVecElt          e     %12.5, %11.1, %11.2
  goto BB11
Prom 0:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    FUN, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <(cls|blt)->
  void                    Return             l     %1.3
Prom 1:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    X, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <vec>
  void                    Return             l     %1.3
Prom 2:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    X, e1.0
  val?            %1.2  = Force<wrapped>     !v    %1.1, e1.0   <vec>
  lgl$#-          %1.3  = IsType                   %1.2 isA val+
  void                    Branch                   %1.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [1]
  val?^ | miss    %2.0  = LdVar              eR    i, e1.0
  val?            %2.1  = Force<value>       !v    %2.0, e1.0   <int$->
  goto BB3
BB4   <- [1]
  prom-           %4.0  = MkArg                    unboundValue, lapply[0x55c18d5b7670]_p3, e1.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.1:BB2, %4.0:BB4
  val?            %3.1  = Extract2_1D        !v    %1.2, %3.0, e1.0   <val?>
  void                    Visible            v     
  void                    Return             l     %3.1
Prom 3:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    i, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <int$->
  void                    Return             l     %1.3

│ lapply[0x55c18d5b7670]                                                       │
└──────────────────────────────────────────────────────────────────────────────┘
