
┌──────────────────────────────────────────────────────────────────────────────┐
│ valid.charjust[0x55c18cb806d0]                                               │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;NonRefl0,!Obj0                       │
│ Properties:                                                                  │
├────── PIR Version After Optimizations
valid.charjust[0x55c18cb806d0]
BB0
  goto BB1
BB1   <- [0]
  val?^           %1.0  = LdArg                    0
  val?^ | miss    %1.1  = LdVar              eR    length, <env 0x55c18d083160>
  lgl$#-          %1.2  = Identical                <blt length>, %1.1   <true>
  cp              %1.3  = Checkpoint                -> BB2 (default) | BB95 (if assume failed)
BB2   <- [1]
  void                    Assume             D     %1.2, %1.3 (DeadBranchReached@0x55c18d8fc498[Test#0])
  env             e2.1  = MkEnv              l     just=%1.0, parent=<env 0x55c18d083160>, context 1
  val+            %2.2  = Force!<lazy>       !vr   %1.0,    <str->
  (int|real)$-    %2.3  = CallSafeBuiltin    wed   length(%2.2)    <int$->
  lgl$#-          %2.4  = IsType                   %2.3 isA int$-
  cp              %2.5  = Checkpoint                -> BB4 (default) | BB3 (if assume failed)
BB95   <- [1]
  env             e95.0 = (MkEnv)            l     just=%1.0, parent=<env 0x55c18d083160>, context 1
  fs              %95.1 = FrameState         R     0x55c18d42ae40+17: [<blt length>, %1.2], env=e95.0
  void                    Deopt              !v    %95.1
BB4   <- [2]
  void                    Assume             D     %2.4, %2.5 (Typecheck@0x55c18d8fc498[Type#2])
  int$-           %4.1  = CastType           d     dn %2.3
  lgl$-           %4.2  = Eq                 d     %4.1, 1, elided   <lgl$->
  lgl$#-          %4.3  = CheckTrueFalse     e     %4.2
  void                    Branch                   %4.3 -> BB84 (if true) | BB5 (if false)
BB3   <- [2]
  fs              %3.0  = FrameState         R     0x55c18d42ae40+91: [%2.3], env=e2.1
  void                    Deopt              !v    %3.0
BB84   <- [4]
  val?^ | miss    %84.0 = LdVar              eR    as.integer, <env 0x55c18d083160>
  lgl$#-          %84.1 = Identical                <blt as.integer>, %84.0   <true>
  void                    Assume             D     %84.1, %2.5 (DeadBranchReached@0x55c18d8fc498[Test#11])
  val?^ | miss    %84.3 = LdVar              eR    match, <env 0x55c18d083160>
  lgl$#-          %84.4 = Identical                %84.3, function(x, table, nomatch=NA, incomparables=N|...
  void                    Assume             D     %84.4, %2.5 (CallTarget@0x55c18d8fc498[Call#22])
  lgl$#-          %84.6 = IsType                   %2.2 isA val?-
  void                    Assume             D     %84.6, %2.5 (Typecheck@0x55c18d8fc498[Type#48])
  val-            %84.8 = CastType           d     dn %2.2   <str$->
  val?            %84.9 = Extract1_1D        wed   %84.8, 1L, elided   <str$->
  (cls|spec|blt)  %84.10 = LdFun              !v    c, <0x55c18aee5940>, <env 0x55c18d083160>
  val?            %84.11 = Call               !v    %84.10("left", "right", "bottom", "top", "centre", "center") e2.1   <str->
  lgl$#-          %84.12 = IsType                   %84.11 isA val?-
  lgl$#-          %84.13 = IsType                   %84.9 isA val?+
  cp              %84.14 = Checkpoint                -> BB86 (default) | BB85 (if assume failed)
BB5   <- [4]
  lgl$#-          %5.0  = IsType                   %2.2 isA val?-
  void                    Assume             D     %5.0, %2.5 (Typecheck@0x55c18d8fc498[Type#5])
  val-            %5.2  = CastType           d     dn %2.2   <str->
  (int|real)$-    %5.3  = CallSafeBuiltin    wed   length(%5.2)    <int$->
  lgl$#-          %5.4  = IsType                   %5.3 isA int$-
  cp              %5.5  = Checkpoint                -> BB7 (default) | BB6 (if assume failed)
BB86   <- [84]
  void                    Assume             D     %84.13, %84.14 (Typecheck@0x55c18b1f2b30[Type#0])
  val?+           %86.1 = CastType           d     dn %84.9   <str$->
  void                    Assume             D     %84.12, %84.14 (Typecheck@0x55c18b1f2b30[Type#1])
  val?-           %86.3 = CastType           d     dn %84.11   <str->
  val+            %86.4 = CallSafeBuiltin    wed   match(%86.1, %86.3, NA, nil)    <int$->
  lgl$#-          %86.5 = IsType                   %86.4 isA int$-
  cp              %86.6 = Checkpoint                -> BB88 (default) | BB87 (if assume failed)
BB85   <- [84]
  prom-           %85.0 = MkArg                    %84.11, valid.charjust[0x55c18cb806d0]_p9 (!refl), e2.1
  val?~           %85.1 = CastType                 up %85.0
  prom-           %85.2 = MkArg                    %84.9, valid.charjust[0x55c18cb806d0]_p8 (!refl), e2.1
  val?~           %85.3 = CastType                 up %85.2
  fs              %85.4 = FrameState         R     0x55c18d42ae40+970: [<blt as.integer>], env=e2.1
  env             e85.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%85.1, x=%85.3, parent=R_BaseNamespace, context 0
  fs              %85.6 = FrameState         R     0x55c18ba1ad70+23: [%84.9, %84.11], env=e85.5, next=%85.4
  void                    Deopt              !v    %85.6   !
BB7   <- [5]
  void                    Assume             D     %5.4, %5.5 (Typecheck@0x55c18d8fc498[Type#6])
  int$-           %7.1  = CastType           d     dn %5.3
  lgl$-           %7.2  = Gt                 d     %7.1, 1, elided   <lgl$->
  lgl$#-          %7.3  = CheckTrueFalse     e     %7.2
  void                    Branch                   %7.3 -> BB51 (if true) | BB8 (if false)
BB6   <- [5]
  fs              %6.0  = FrameState         R     0x55c18d42ae40+205: [%5.3], env=e2.1
  void                    Deopt              !v    %6.0
BB88   <- [86]
  void                    Assume             D     %86.5, %86.6 (Typecheck@0x55c18d8fc498[Type#51])
  int$-           %88.1 = CastType           d     dn %86.4
  real$-          %88.2 = Sub                d     %88.1, 1, elided   <real$->
  int$-           %88.3 = CallSafeBuiltin    wed   as.integer(%88.2)    <int$->
  void                    StVar              lW    just, %88.3, e2.1
  cp              %88.5 = Checkpoint                -> BB90 (default) | BB89 (if assume failed)
BB87   <- [86]
  prom-           %87.0 = MkArg                    %86.3, valid.charjust[0x55c18cb806d0]_p9 (!refl), e2.1
  val?~           %87.1 = CastType                 up %87.0
  prom-           %87.2 = MkArg                    %86.1, valid.charjust[0x55c18cb806d0]_p8 (!refl), e2.1
  val?~           %87.3 = CastType                 up %87.2
  fs              %87.4 = FrameState         R     0x55c18d42ae40+970: [<blt as.integer>], env=e2.1
  env             e87.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%87.1, x=%87.3, parent=R_BaseNamespace, context 0
  fs              %87.6 = FrameState         R     0x55c18ba1ad70+69: [%86.4], env=e87.5, next=%87.4
  void                    Deopt              !v    %87.6   !
BB51   <- [7]
  val?^ | miss    %51.0 = LdVar              eR    as.integer, <env 0x55c18d083160>
  lgl$#-          %51.1 = Identical                <blt as.integer>, %51.0   <true>
  void                    Assume             D     %51.1, %5.5 (DeadBranchReached@0x55c18d8fc498[Test#2])
  val?^ | miss    %51.3 = LdVar              eR    match, <env 0x55c18d083160>
  lgl$#-          %51.4 = Identical                %51.3, function(x, table, nomatch=NA, incomparables=N|...
  void                    Assume             D     %51.4, %5.5 (CallTarget@0x55c18d8fc498[Call#5])
  val?            %51.6 = Extract1_1D        wed   %5.2, 1L, elided   <str$->
  cp              %51.7 = Checkpoint                -> BB53 (default) | BB52 (if assume failed)
BB8   <- [7]
  goto BB9
BB90   <- [88]
  val?^ | miss    %90.0 = LdVar              eR    anyNA, e2.1
  lgl$#-          %90.1 = Identical                <blt anyNA>, %90.0   <true>
  void                    Assume             D     %90.1, %88.5 (DeadBranchReached@0x55c18d8fc498[Test#14])
  val+            %90.3 = CallSafeBuiltin    wed   anyNA(%88.3)    <lgl$->
  lgl$#-          %90.4 = IsType                   %90.3 isA lgl$-
  cp              %90.5 = Checkpoint                -> BB92 (default) | BB91 (if assume failed)
BB89   <- [88]
  fs              %89.0 = FrameState         R     0x55c18d42ae40+1018: [], env=e2.1
  void                    Deopt              !v    %89.0   !
BB53   <- [51]
  (cls|spec|blt)  %53.0 = LdFun              !v    c, <0x55c18aee5940>, <env 0x55c18d083160>
  lgl$#-          %53.1 = Identical                %53.0, <blt c>
  void                    Assume             D     %53.1, %51.7 (CallTarget@0x55c18d8fc498[Call#6])
  str-            %53.3 = CallSafeBuiltin    wed   c("left", "right", "bottom", "top", "centre", "center")    <str->
  cp              %53.4 = Checkpoint                -> BB55 (default) | BB54 (if assume failed)
BB52   <- [51]
  prom-           %52.0 = MkArg                    %51.6, valid.charjust[0x55c18cb806d0]_p0 (!refl), e2.1
  val?~           %52.1 = CastType                 up %52.0
  prom-           %52.2 = MkArg                    unboundValue, valid.charjust[0x55c18cb806d0]_p1, e2.1
  val?^           %52.3 = CastType                 up %52.2
  fs              %52.4 = FrameState         R     0x55c18d42ae40+341: [<blt as.integer>], env=e2.1
  env             e52.5 = (MkEnv)            l     x=%52.1, table=%52.3, nomatch(miss)=NA, incomparables(miss)=nil, parent=R_BaseNamespace, context 0
  fs              %52.6 = FrameState         R     0x55c18ba1ad70+9: [%51.6], env=e52.5, next=%52.4
  void                    Deopt              !v    %52.6
BB9   <- [8, 81]
  val?^           %9.0  = Phi                      %81.2:BB81, %1.0:BB8
  goto BB10
BB92   <- [90]
  void                    Assume             D     %90.4, %90.5 (Typecheck@0x55c18d8fc498[Type#56])
  lgl$-           %92.1 = CastType           d     dn %90.3
  lgl$#-          %92.2 = CheckTrueFalse     e     %92.1
  void                    Branch                   %92.2 -> BB94 (if true) | BB93 (if false)
BB91   <- [90]
  fs              %91.0 = FrameState         R     0x55c18d42ae40+1109: [%90.3], env=e2.1
  void                    Deopt              !v    %91.0   !
BB55   <- [53]
  lgl$#-          %55.0 = IsType                   %51.6 isA val?+
  void                    Assume             D     %55.0, %53.4 (Typecheck@0x55c18b1f2b30[Type#0])
  val?+           %55.2 = CastType           d     dn %51.6   <str$->
  val+            %55.3 = CallSafeBuiltin    wed   match(%55.2, %53.3, NA, nil)    <int$->
  lgl$#-          %55.4 = IsType                   %55.3 isA int$-
  cp              %55.5 = Checkpoint                -> BB57 (default) | BB56 (if assume failed)
BB54   <- [53]
  prom-           %54.0 = MkArg                    %53.3, valid.charjust[0x55c18cb806d0]_p1 (!refl), e2.1
  val?~           %54.1 = CastType                 up %54.0
  prom-           %54.2 = MkArg                    %51.6, valid.charjust[0x55c18cb806d0]_p0 (!refl), e2.1
  val?~           %54.3 = CastType                 up %54.2
  fs              %54.4 = FrameState         R     0x55c18d42ae40+341: [<blt as.integer>], env=e2.1
  env             e54.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%54.1, x=%54.3, parent=R_BaseNamespace, context 0
  fs              %54.6 = FrameState         R     0x55c18ba1ad70+23: [%51.6, %53.3], env=e54.5, next=%54.4
  void                    Deopt              !v    %54.6
BB10   <- [93, 9]
  val?^           %10.0 = Phi                      %88.3:BB93, %9.0:BB9
  lgl$#-          %10.1 = IsType                   %10.0 isA int-
  cp              %10.2 = Checkpoint                -> BB12 (default) | BB11 (if assume failed)
BB94   <- [92]
  (cls|spec|blt)  %94.0 = LdFun              !v    stop, e2.1
  fs              %94.1 = FrameState         R     0x55c18d42ae40+1130: [%94.0], env=e2.1
  void                    Deopt              !v    %94.1, DeadCall@0x55c18d8fc498[Call#25], %94.0   !
BB93   <- [92]
  goto BB10
BB57   <- [55]
  void                    Assume             D     %55.4, %55.5 (Typecheck@0x55c18d8fc498[Type#16])
  int$-           %57.1 = CastType           d     dn %55.3
  real$-          %57.2 = Sub                d     %57.1, 1, elided   <real$->
  int$-           %57.3 = CallSafeBuiltin    wed   as.integer(%57.2)    <int$->
  val+            %57.4 = Force!<wrapped>    !vr   %1.0,    <str->
  lgl$#-          %57.5 = IsType                   %57.4 isA val?-
  cp              %57.6 = Checkpoint                -> BB59 (default) | BB58 (if assume failed)
BB56   <- [55]
  prom-           %56.0 = MkArg                    %53.3, valid.charjust[0x55c18cb806d0]_p1 (!refl), e2.1
  val?~           %56.1 = CastType                 up %56.0
  prom-           %56.2 = MkArg                    %55.2, valid.charjust[0x55c18cb806d0]_p0 (!refl), e2.1
  val?~           %56.3 = CastType                 up %56.2
  fs              %56.4 = FrameState         R     0x55c18d42ae40+341: [<blt as.integer>], env=e2.1
  env             e56.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%56.1, x=%56.3, parent=R_BaseNamespace, context 0
  fs              %56.6 = FrameState         R     0x55c18ba1ad70+69: [%55.3], env=e56.5, next=%56.4
  void                    Deopt              !v    %56.6
BB12   <- [10]
  val?^ | miss    %12.0 = LdVar              eR    length, e2.1
  lgl$#-          %12.1 = Identical                <blt length>, %12.0   <true>
  void                    Assume             D     %12.1, %10.2 (DeadBranchReached@0x55c18d8fc498[Test#15])
  void                    Assume             D     %10.1, %10.2 (Typecheck@0x55c18d8fc498[Type#58])
  int-            %12.4 = CastType           d     dn %10.0
  (int|real)$-    %12.5 = CallSafeBuiltin    wed   length(%12.4)    <int$->
  lgl$#-          %12.6 = IsType                   %12.5 isA int$-
  cp              %12.7 = Checkpoint                -> BB14 (default) | BB13 (if assume failed)
BB11   <- [10]
  fs              %11.0 = FrameState         R     0x55c18d42ae40+1158: [], env=e2.1
  void                    Deopt              !v    %11.0   !
BB59   <- [57]
  void                    Assume             D     %57.5, %57.6 (Typecheck@0x55c18d8fc498[Type#19])
  val-            %59.1 = CastType           d     dn %57.4   <str->
  val-            %59.2 = Subassign1_1D      wed   %57.3, %59.1, 1L, elided
  void                    StVar              lW    just, %59.2, e2.1
  cp              %59.4 = Checkpoint                -> BB61 (default) | BB60 (if assume failed)
BB58   <- [57]
  fs              %58.0 = FrameState         R     0x55c18d42ae40+389: [%57.3, %57.4], env=e2.1
  void                    Deopt              !v    %58.0
BB14   <- [12]
  void                    Assume             D     %12.6, %12.7 (Typecheck@0x55c18d8fc498[Type#59])
  int$-           %14.1 = CastType           d     dn %12.5
  lgl$-           %14.2 = Lt                 d     %14.1, 2, elided   <lgl$->
  lgl$#-          %14.3 = CheckTrueFalse     e     %14.2
  void                    Branch                   %14.3 -> BB39 (if true) | BB15 (if false)
BB13   <- [12]
  fs              %13.0 = FrameState         R     0x55c18d42ae40+1249: [%12.5], env=e2.1
  void                    Deopt              !v    %13.0   !
BB61   <- [59]
  val?^ | miss    %61.0 = LdVar              eR    %in%, e2.1
  lgl$#-          %61.1 = Identical                %61.0, function(x, table) <(rir::DispatchTable*)0x55c|...
  void                    Assume             D     %61.1, %59.4 (CallTarget@0x55c18d8fc498[Call#7])
  prom-           %61.3 = MkArg                    unboundValue, valid.charjust[0x55c18cb806d0]_p2, e2.1
  prom-           %61.4 = MkArg                    unboundValue, valid.charjust[0x55c18cb806d0]_p3, e2.1
  val?            %61.5 = StaticCall         !v    %in%[0x55c18b5e1140](%61.3, %61.4) e2.1   <lgl$->
  lgl$#-          %61.6 = IsType                   %61.5 isA lgl$-
  cp              %61.7 = Checkpoint                -> BB63 (default) | BB62 (if assume failed)
BB60   <- [59]
  fs              %60.0 = FrameState         R     0x55c18d42ae40+410: [], env=e2.1
  void                    Deopt              !v    %60.0
BB39   <- [14]
  lgl$#-          %39.0 = IsType                   %12.4 isA int$-
  void                    Assume             D     %39.0, %12.7 (Typecheck@0x55c18d8fc498[Type#62])
  int$-           %39.2 = CastType           d     dn %12.4
  int$-           %39.3 = Extract1_1D        wed   %39.2, 1L, elided   <int$->
  cp              %39.4 = Checkpoint                -> BB41 (default) | BB40 (if assume failed)
BB15   <- [14]
  goto BB16
BB63   <- [61]
  void                    Assume             D     %61.6, %61.7 (Typecheck@0x55c18d8fc498[Type#23])
  lgl$-           %63.1 = CastType           d     dn %61.5
  lgl$-           %63.2 = Not                d     %63.1, elided
  lgl$#-          %63.3 = CheckTrueFalse     e     %63.2
  void                    Branch                   %63.3 -> BB83 (if true) | BB64 (if false)
BB62   <- [61]
  fs              %62.0 = FrameState         R     0x55c18d42ae40+447: [%61.5], env=e2.1
  void                    Deopt              !v    %62.0   !
BB41   <- [39]
  real$-          %41.0 = Add                d     %39.3, 1, elided   <real$->
  int$-           %41.1 = AsSwitchIdx              %41.0
  lgl$-           %41.2 = Eq                 d     %41.1, 1L, elided
  lgl$#-          %41.3 = CheckTrueFalse     e     %41.2
  void                    Branch                   %41.3 -> BB50 (if true) | BB42 (if false)
BB40   <- [39]
  fs              %40.0 = FrameState         R     0x55c18d42ae40+1443: [%39.3], env=e2.1
  void                    Deopt              !v    %40.0   !
BB16   <- [15, 46]
  (int|real)-     %16.0 = Phi                      %46.0:BB46, %12.4:BB15
  cp              %16.1 = Checkpoint                -> BB18 (default) | BB17 (if assume failed)
BB83   <- [63]
  (cls|spec|blt)  %83.0 = LdFun              !v    stop, e2.1
  fs              %83.1 = FrameState         R     0x55c18d42ae40+470: [%83.0], env=e2.1
  void                    Deopt              !v    %83.1, DeadCall@0x55c18d8fc498[Call#9], %83.0   !
BB64   <- [63]
  val?^ | miss    %64.0 = LdVar              eR    just !upd, e2.1
  val?            %64.1 = Force!             !v    %64.0, e2.1
  cp              %64.2 = Checkpoint                -> BB66 (default) | BB65 (if assume failed)
BB50   <- [41]
  val?^ | miss    %50.0 = LdVar              eR    c, e2.1
  lgl$#-          %50.1 = Identical                <blt c>, %50.0   <true>
  void                    Assume             D     %50.1, %39.4 (DeadBranchReached@0x55c18d8fc498[Test#28])
  real-           %50.3 = CallSafeBuiltin    wed   c(0, 4)    <real->
  goto BB46
BB42   <- [41]
  lgl$-           %42.0 = Eq                 d     %41.1, 2L, elided
  lgl$#-          %42.1 = CheckTrueFalse     e     %42.0   <false>
  void                    AssumeNot          D     %42.1, %39.4 (DeadBranchReached@0x55c18d8fc498[Test#23])
  lgl$-           %42.3 = Eq                 d     %41.1, 3L, elided
  lgl$#-          %42.4 = CheckTrueFalse     e     %42.3
  void                    Branch                   %42.4 -> BB49 (if true) | BB43 (if false)
BB18   <- [16]
  val?^ | miss    %18.0 = LdVar              eR    c, e2.1
  lgl$#-          %18.1 = Identical                <blt c>, %18.0   <true>
  void                    Assume             D     %18.1, %16.1 (DeadBranchReached@0x55c18d8fc498[Test#35])
  (int|real)$-    %18.3 = Extract1_1D        wed   %16.0, 1L, elided   <(int|real)$->
  cp              %18.4 = Checkpoint                -> BB20 (default) | BB19 (if assume failed)
BB17   <- [16]
  fs              %17.0 = FrameState         R     0x55c18d42ae40+2486: [], env=e2.1
  void                    Deopt              !v    %17.0   !
BB66   <- [64]
  val?^ | miss    %66.0 = LdVar              eR    as.integer, e2.1
  lgl$#-          %66.1 = Identical                <blt as.integer>, %66.0   <true>
  void                    Assume             D     %66.1, %64.2 (DeadBranchReached@0x55c18d8fc498[Test#6])
  val?^ | miss    %66.3 = LdVar              eR    match, e2.1
  lgl$#-          %66.4 = Identical                %66.3, function(x, table, nomatch=NA, incomparables=N|...
  void                    Assume             D     %66.4, %64.2 (CallTarget@0x55c18d8fc498[Call#13])
  val?^ | miss    %66.6 = LdVar              eR    just, e2.1
  val?            %66.7 = Force!<value>      !v    %66.6, e2.1   <str->
  lgl$#-          %66.8 = IsType                   %66.7 isA val?-
  cp              %66.9 = Checkpoint                -> BB68 (default) | BB67 (if assume failed)
BB65   <- [64]
  fs              %65.0 = FrameState         R     0x55c18d42ae40+507: [%64.1], env=e2.1
  void                    Deopt              !v    %65.0   !
BB46   <- [50, 49, 48, 47, 45]
  real-           %46.0 = Phi                      %45.6:BB45, %47.3:BB47, %48.3:BB48, %49.3:BB49, %50.3:BB50
  void                    StVar              lW    just, %46.0, e2.1
  goto BB16
BB49   <- [42]
  val?^ | miss    %49.0 = LdVar              eR    c, e2.1
  lgl$#-          %49.1 = Identical                <blt c>, %49.0   <true>
  void                    Assume             D     %49.1, %39.4 (DeadBranchReached@0x55c18d8fc498[Test#30])
  real-           %49.3 = CallSafeBuiltin    wed   c(4, 2)    <real->
  goto BB46
BB43   <- [42]
  lgl$-           %43.0 = Eq                 d     %41.1, 4L, elided
  lgl$#-          %43.1 = CheckTrueFalse     e     %43.0
  void                    Branch                   %43.1 -> BB48 (if true) | BB44 (if false)
BB20   <- [18]
  real$-          %20.0 = Add                d     %18.3, 1, elided   <real$->
  int$-           %20.1 = AsSwitchIdx              %20.0
  lgl$-           %20.2 = Eq                 d     %20.1, 1L, elided
  lgl$#-          %20.3 = CheckTrueFalse     e     %20.2
  void                    Branch                   %20.3 -> BB38 (if true) | BB21 (if false)
BB19   <- [18]
  fs              %19.0 = FrameState         R     0x55c18d42ae40+2603: [<blt c>, %18.3], env=e2.1
  void                    Deopt              !v    %19.0   !
BB68   <- [66]
  void                    Assume             D     %66.8, %66.9 (Typecheck@0x55c18d8fc498[Type#29])
  val?-           %68.1 = CastType           d     dn %66.7   <str->
  val?            %68.2 = Extract1_1D        wed   %68.1, 2L, elided   <str$->
  (cls|spec|blt)  %68.3 = LdFun              !v    c, <0x55c18aee5940>, e2.1
  val?            %68.4 = Call               !v    %68.3("left", "right", "bottom", "top", "centre", "center") e2.1   <str->
  lgl$#-          %68.5 = IsType                   %68.4 isA val?-
  lgl$#-          %68.6 = IsType                   %68.2 isA val?+
  cp              %68.7 = Checkpoint                -> BB70 (default) | BB69 (if assume failed)
BB67   <- [66]
  prom-           %67.0 = MkArg                    unboundValue, valid.charjust[0x55c18cb806d0]_p5, e2.1
  val?^           %67.1 = CastType                 up %67.0
  prom-           %67.2 = MkArg                    unboundValue, valid.charjust[0x55c18cb806d0]_p4, e2.1
  val?^           %67.3 = CastType                 up %67.2
  fs              %67.4 = FrameState         R     0x55c18d42ae40+606: [<blt as.integer>], env=e2.1
  env             e67.5 = (MkEnv)            l     x=%67.3, table=%67.1, nomatch(miss)=NA, incomparables(miss)=nil, parent=R_BaseNamespace, context 0
  fs              %67.6 = FrameState         R     0x55c18ba1ad70+9: [], env=e67.5, next=%67.4
  fs              %67.7 = FrameState         R     0x55c18d4ddaf0+5(pr): [%66.7], env=e2.1, next=%67.6
  void                    Deopt              !v    %67.7   !
BB48   <- [43]
  val?^ | miss    %48.0 = LdVar              eR    c, e2.1
  lgl$#-          %48.1 = Identical                <blt c>, %48.0   <true>
  void                    Assume             D     %48.1, %39.4 (DeadBranchReached@0x55c18d8fc498[Test#31])
  real-           %48.3 = CallSafeBuiltin    wed   c(4, 3)    <real->
  goto BB46
BB44   <- [43]
  lgl$-           %44.0 = Eq                 d     %41.1, 5L, elided
  lgl$#-          %44.1 = CheckTrueFalse     e     %44.0
  void                    Branch                   %44.1 -> BB47 (if true) | BB45 (if false)
BB38   <- [20]
  goto BB23
BB21   <- [20]
  lgl$-           %21.0 = Eq                 d     %20.1, 2L, elided
  lgl$#-          %21.1 = CheckTrueFalse     e     %21.0
  void                    Branch                   %21.1 -> BB37 (if true) | BB22 (if false)
BB70   <- [68]
  void                    Assume             D     %68.6, %68.7 (Typecheck@0x55c18b1f2b30[Type#0])
  val?+           %70.1 = CastType           d     dn %68.2   <str$->
  void                    Assume             D     %68.5, %68.7 (Typecheck@0x55c18b1f2b30[Type#1])
  val?-           %70.3 = CastType           d     dn %68.4   <str->
  val+            %70.4 = CallSafeBuiltin    wed   match(%70.1, %70.3, NA, nil)    <int$->
  lgl$#-          %70.5 = IsType                   %70.4 isA int$-
  cp              %70.6 = Checkpoint                -> BB72 (default) | BB71 (if assume failed)
BB69   <- [68]
  prom-           %69.0 = MkArg                    %68.4, valid.charjust[0x55c18cb806d0]_p5 (!refl), e2.1
  val?~           %69.1 = CastType                 up %69.0
  prom-           %69.2 = MkArg                    %68.2, valid.charjust[0x55c18cb806d0]_p4 (!refl), e2.1
  val?~           %69.3 = CastType                 up %69.2
  fs              %69.4 = FrameState         R     0x55c18d42ae40+606: [<blt as.integer>], env=e2.1
  env             e69.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%69.1, x=%69.3, parent=R_BaseNamespace, context 0
  fs              %69.6 = FrameState         R     0x55c18ba1ad70+23: [%68.2, %68.4], env=e69.5, next=%69.4
  void                    Deopt              !v    %69.6   !
BB47   <- [44]
  val?^ | miss    %47.0 = LdVar              eR    c, e2.1
  lgl$#-          %47.1 = Identical                <blt c>, %47.0   <true>
  void                    Assume             D     %47.1, %39.4 (DeadBranchReached@0x55c18d8fc498[Test#32])
  real-           %47.3 = CallSafeBuiltin    wed   c(4, 4)    <real->
  goto BB46
BB45   <- [44]
  lgl$-           %45.0 = Eq                 d     %41.1, 6L, elided
  lgl$#-          %45.1 = CheckTrueFalse     e     %45.0   <true>
  void                    Assume             D     %45.1, %39.4 (DeadBranchReached@0x55c18d8fc498[Test#27])
  val?^ | miss    %45.3 = LdVar              eR    c, e2.1
  lgl$#-          %45.4 = Identical                <blt c>, %45.3   <true>
  void                    Assume             D     %45.4, %39.4 (DeadBranchReached@0x55c18d8fc498[Test#33])
  real-           %45.6 = CallSafeBuiltin    wed   c(4, 4)    <real->
  goto BB46
BB23   <- [37, 38, 22]
  real$#-         %23.0 = Phi                      0.5:BB22, 1:BB37, 0:BB38
  (int|real)$-    %23.1 = Extract1_1D        wed   %16.0, 2L, elided   <(int|real)$->
  cp              %23.2 = Checkpoint                -> BB25 (default) | BB24 (if assume failed)
BB37   <- [21]
  goto BB23
BB22   <- [21]
  lgl$-           %22.0 = Eq                 d     %20.1, 3L, elided
  lgl$#-          %22.1 = CheckTrueFalse     e     %22.0   <false>
  void                    AssumeNot          D     %22.1, %18.4 (DeadBranchReached@0x55c18d8fc498[Test#65])
  lgl$-           %22.3 = Eq                 d     %20.1, 4L, elided
  lgl$#-          %22.4 = CheckTrueFalse     e     %22.3   <false>
  void                    AssumeNot          D     %22.4, %18.4 (DeadBranchReached@0x55c18d8fc498[Test#66])
  lgl$-           %22.6 = Eq                 d     %20.1, 5L, elided
  lgl$#-          %22.7 = CheckTrueFalse     e     %22.6   <true>
  void                    Assume             D     %22.7, %18.4 (DeadBranchReached@0x55c18d8fc498[Test#67])
  goto BB23
BB72   <- [70]
  void                    Assume             D     %70.5, %70.6 (Typecheck@0x55c18d8fc498[Type#32])
  int$-           %72.1 = CastType           d     dn %70.4
  real$-          %72.2 = Sub                d     %72.1, 1, elided   <real$->
  int$-           %72.3 = CallSafeBuiltin    wed   as.integer(%72.2)    <int$->
  val?^ | miss    %72.4 = LdVar              eR    just !upd, e2.1
  val?            %72.5 = Force!<value>      !v    %72.4, e2.1   <str->
  lgl$#-          %72.6 = IsType                   %72.5 isA val?-
  cp              %72.7 = Checkpoint                -> BB74 (default) | BB73 (if assume failed)
BB71   <- [70]
  prom-           %71.0 = MkArg                    %70.3, valid.charjust[0x55c18cb806d0]_p5 (!refl), e2.1
  val?~           %71.1 = CastType                 up %71.0
  prom-           %71.2 = MkArg                    %70.1, valid.charjust[0x55c18cb806d0]_p4 (!refl), e2.1
  val?~           %71.3 = CastType                 up %71.2
  fs              %71.4 = FrameState         R     0x55c18d42ae40+606: [<blt as.integer>], env=e2.1
  env             e71.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%71.1, x=%71.3, parent=R_BaseNamespace, context 0
  fs              %71.6 = FrameState         R     0x55c18ba1ad70+69: [%70.4], env=e71.5, next=%71.4
  void                    Deopt              !v    %71.6   !
BB25   <- [23]
  real$-          %25.0 = Add                d     %23.1, 1, elided   <real$->
  int$-           %25.1 = AsSwitchIdx              %25.0
  lgl$-           %25.2 = Eq                 d     %25.1, 1L, elided
  lgl$#-          %25.3 = CheckTrueFalse     e     %25.2   <false>
  void                    AssumeNot          D     %25.3, %23.2 (DeadBranchReached@0x55c18d8fc498[Test#74])
  lgl$-           %25.5 = Eq                 d     %25.1, 2L, elided
  lgl$#-          %25.6 = CheckTrueFalse     e     %25.5   <false>
  void                    AssumeNot          D     %25.6, %23.2 (DeadBranchReached@0x55c18d8fc498[Test#75])
  lgl$-           %25.8 = Eq                 d     %25.1, 3L, elided
  lgl$#-          %25.9 = CheckTrueFalse     e     %25.8
  void                    Branch                   %25.9 -> BB36 (if true) | BB26 (if false)
BB24   <- [23]
  fs              %24.0 = FrameState         R     0x55c18d42ae40+3018: [<blt c>, %23.0, %23.1], env=e2.1
  void                    Deopt              !v    %24.0   !
BB74   <- [72]
  void                    Assume             D     %72.6, %72.7 (Typecheck@0x55c18d8fc498[Type#35])
  val?-           %74.1 = CastType           d     dn %72.5   <str->
  val?-           %74.2 = Subassign1_1D      wed   %72.3, %74.1, 2L, elided
  void                    StVar              lW    just, %74.2, e2.1
  cp              %74.4 = Checkpoint                -> BB76 (default) | BB75 (if assume failed)
BB73   <- [72]
  fs              %73.0 = FrameState         R     0x55c18d42ae40+654: [%72.3, %72.5], env=e2.1
  void                    Deopt              !v    %73.0   !
BB36   <- [25]
  goto BB28
BB26   <- [25]
  lgl$-           %26.0 = Eq                 d     %25.1, 4L, elided
  lgl$#-          %26.1 = CheckTrueFalse     e     %26.0
  void                    Branch                   %26.1 -> BB35 (if true) | BB27 (if false)
BB76   <- [74]
  val?^ | miss    %76.0 = LdVar              eR    %in%, e2.1
  lgl$#-          %76.1 = Identical                %76.0, function(x, table) <(rir::DispatchTable*)0x55c|...
  void                    Assume             D     %76.1, %74.4 (CallTarget@0x55c18d8fc498[Call#15])
  prom-           %76.3 = MkArg                    unboundValue, valid.charjust[0x55c18cb806d0]_p6, e2.1
  prom-           %76.4 = MkArg                    unboundValue, valid.charjust[0x55c18cb806d0]_p7, e2.1
  val?            %76.5 = StaticCall         !v    %in%[0x55c18b5e1140](%76.3, %76.4) e2.1   <lgl$->
  lgl$#-          %76.6 = IsType                   %76.5 isA lgl$-
  cp              %76.7 = Checkpoint                -> BB78 (default) | BB77 (if assume failed)
BB75   <- [74]
  fs              %75.0 = FrameState         R     0x55c18d42ae40+675: [], env=e2.1
  void                    Deopt              !v    %75.0   !
BB28   <- [35, 36, 27]
  real$#-         %28.0 = Phi                      0.5:BB27, 1:BB35, 0:BB36
  real-           %28.1 = CallSafeBuiltin    wed   c(%23.0, %28.0)    <real->
  void                    StVar              lW    just, %28.1, e2.1
  cp              %28.3 = Checkpoint                -> BB30 (default) | BB29 (if assume failed)
BB35   <- [26]
  goto BB28
BB27   <- [26]
  lgl$-           %27.0 = Eq                 d     %25.1, 5L, elided
  lgl$#-          %27.1 = CheckTrueFalse     e     %27.0   <true>
  void                    Assume             D     %27.1, %23.2 (DeadBranchReached@0x55c18d8fc498[Test#78])
  goto BB28
BB78   <- [76]
  void                    Assume             D     %76.6, %76.7 (Typecheck@0x55c18d8fc498[Type#39])
  lgl$-           %78.1 = CastType           d     dn %76.5
  lgl$-           %78.2 = Not                d     %78.1, elided
  lgl$#-          %78.3 = CheckTrueFalse     e     %78.2
  void                    Branch                   %78.3 -> BB82 (if true) | BB79 (if false)
BB77   <- [76]
  fs              %77.0 = FrameState         R     0x55c18d42ae40+712: [%76.5], env=e2.1
  void                    Deopt              !v    %77.0   !
BB30   <- [28]
  val?^ | miss    %30.0 = LdVar              eR    anyNA, e2.1
  lgl$#-          %30.1 = Identical                <blt anyNA>, %30.0   <true>
  void                    Assume             D     %30.1, %28.3 (DeadBranchReached@0x55c18d8fc498[Test#80])
  val+            %30.3 = CallSafeBuiltin    wed   anyNA(%28.1)    <lgl$->
  lgl$#-          %30.4 = IsType                   %30.3 isA lgl$-
  cp              %30.5 = Checkpoint                -> BB32 (default) | BB31 (if assume failed)
BB29   <- [28]
  fs              %29.0 = FrameState         R     0x55c18d42ae40+3412: [], env=e2.1
  void                    Deopt              !v    %29.0   !
BB82   <- [78]
  (cls|spec|blt)  %82.0 = LdFun              !v    stop, e2.1
  fs              %82.1 = FrameState         R     0x55c18d42ae40+735: [%82.0], env=e2.1
  void                    Deopt              !v    %82.1, DeadCall@0x55c18d8fc498[Call#17], %82.0   !
BB79   <- [78]
  val?^ | miss    %79.0 = LdVar              eR    as.integer, e2.1
  lgl$#-          %79.1 = Identical                <blt as.integer>, %79.0   <true>
  void                    Assume             D     %79.1, %76.7 (DeadBranchReached@0x55c18d8fc498[Test#10])
  val?^ | miss    %79.3 = LdVar              eR    just, e2.1
  val?            %79.4 = Force!<value>      !v    %79.3, e2.1   <str->
  lgl$#-          %79.5 = IsType                   %79.4 isA val?-
  cp              %79.6 = Checkpoint                -> BB81 (default) | BB80 (if assume failed)
BB32   <- [30]
  void                    Assume             D     %30.4, %30.5 (Typecheck@0x55c18d8fc498[Type#90])
  lgl$-           %32.1 = CastType           d     dn %30.3
  lgl$#-          %32.2 = CheckTrueFalse     e     %32.1
  void                    Branch                   %32.2 -> BB34 (if true) | BB33 (if false)
BB31   <- [30]
  fs              %31.0 = FrameState         R     0x55c18d42ae40+3503: [%30.3], env=e2.1
  void                    Deopt              !v    %31.0   !
BB81   <- [79]
  void                    Assume             D     %79.5, %79.6 (Typecheck@0x55c18d8fc498[Type#41])
  val?-           %81.1 = CastType           d     dn %79.4   <str->
  int-            %81.2 = CallSafeBuiltin    wed   as.integer(%81.1)    <int->
  void                    StVar              lW    just, %81.2, e2.1
  goto BB9
BB80   <- [79]
  fs              %80.0 = FrameState         R     0x55c18d42ae40+832: [<blt as.integer>, %79.4], env=e2.1
  void                    Deopt              !v    %80.0   !
BB34   <- [32]
  (cls|spec|blt)  %34.0 = LdFun              !v    stop, e2.1
  fs              %34.1 = FrameState         R     0x55c18d42ae40+3524: [%34.0], env=e2.1
  void                    Deopt              !v    %34.1, DeadCall@0x55c18d8fc498[Call#37], %34.0   !
BB33   <- [32]
  void                    Visible            v     
  void                    Return             l     %28.1
Prom 0:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    just, e1.0
  val?            %1.2  = Force<wrapped>     !v    %1.1, e1.0   <str->
  val?            %1.3  = Extract1_1D        !v    %1.2, 1L, e1.0   <str$->
  void                    Visible            v     
  void                    Return             l     %1.3
Prom 1:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     c, <0x55c18aee5940>, e1.0
  val?            %1.2  = Call               !     %1.1("left", "right", "bottom", "top", "centre", "center") e1.0   <str->
  void                    Return             l     %1.2
Prom 2:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    just, e1.0
  val?            %1.2  = Force<value>       !v    %1.1, e1.0   <str->
  val?            %1.3  = Extract1_1D        !v    %1.2, 1L, e1.0   <str$->
  void                    Visible            v     
  void                    Return             l     %1.3
Prom 3:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     c, <0x55c18aee5940>, e1.0
  val?            %1.2  = Call               !     %1.1(0, 1, 4, 5) e1.0   <real->
  void                    Return             l     %1.2
Prom 4:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    just, e1.0
  val?            %1.2  = Force<value>       !v    %1.1, e1.0   <str->
  val?            %1.3  = Extract1_1D        !v    %1.2, 2L, e1.0   <str$->
  void                    Visible            v     
  void                    Return             l     %1.3
Prom 5:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     c, <0x55c18aee5940>, e1.0
  val?            %1.2  = Call               !     %1.1("left", "right", "bottom", "top", "centre", "center") e1.0   <str->
  void                    Return             l     %1.2
Prom 6:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    just, e1.0
  val?            %1.2  = Force<value>       !v    %1.1, e1.0   <str->
  val?            %1.3  = Extract1_1D        !v    %1.2, 2L, e1.0   <str$->
  void                    Visible            v     
  void                    Return             l     %1.3
Prom 7:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     c, <0x55c18aee5940>, e1.0
  val?            %1.2  = Call               !     %1.1(2, 3, 4, 5) e1.0   <real->
  void                    Return             l     %1.2
Prom 8:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    just, e1.0
  val?            %1.2  = Force<wrapped>     !v    %1.1, e1.0   <str$->
  val?            %1.3  = Extract1_1D        !v    %1.2, 1L, e1.0   <str$->
  void                    Visible            v     
  void                    Return             l     %1.3
Prom 9:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     c, <0x55c18aee5940>, e1.0
  val?            %1.2  = Call               !     %1.1("left", "right", "bottom", "top", "centre", "center") e1.0   <str->
  void                    Return             l     %1.2

│ valid.charjust[0x55c18cb806d0]                                               │
└──────────────────────────────────────────────────────────────────────────────┘
