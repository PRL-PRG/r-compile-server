
┌──────────────────────────────────────────────────────────────────────────────┐
│ sort.list[0x558469662d80]                                                    │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;NonRefl0,!Obj0 miss: 4               │
│ Properties:  Eager, ForceOrd: 0                                              │
├────── PIR Version After Optimizations
sort.list[0x558469662d80]
BB0
  goto BB1
BB1   <- [0]
  val?^           %1.0  = LdArg                    0
  env             e1.1  = MkEnv              l     x=%1.0, partial(miss)=nil, na.last(miss)=true, decreasing(miss)=false, method(miss)=missingArg, parent=R_BaseNamespace, context 1
  prom-           %1.2  = MkArg                    unboundValue, sort.list[0x558469662d80]_p3, e1.1
  val?^ | miss    %1.3  = CastType                 up %1.2
  void                    StArg              lW    method, %1.3, e1.1
  void                    StVar              lW    decreasing, false, e1.1
  val+            %1.6  = Force!<lazy>       !vr   %1.0,    <real->
  lgl$#-          %1.7  = IsType                   %1.6 isA real-
  cp              %1.8  = Checkpoint                -> BB2 (default) | BB69 (if assume failed)
BB2   <- [1]
  void                    Assume             D     %1.7, %1.8 (Typecheck@0x55846afdde80[Type#6])
  real-           %2.1  = CastType           d     dn %1.6
  lgl$#-          %2.2  = CallSafeBuiltin    wed   is.numeric(%2.1)    <lgl$->
  cp              %2.3  = Checkpoint                -> BB4 (default) | BB3 (if assume failed)
BB69   <- [1]
  fs              %69.0 = FrameState         R     0x55846b0eae50+200: [true, <blt is.numeric>, %1.6], env=e1.1
  void                    Deopt              !v    %69.0
BB4   <- [2]
  void                    Branch                   %2.2 -> BB66 (if true) | BB5 (if false)
BB3   <- [2]
  fs              %3.0  = FrameState         R     0x55846b0eae50+335: [%2.2], env=e1.1
  void                    Deopt              !v    %3.0
BB66   <- [4]
  lgl$#-          %66.0 = IsType                   %1.0 isA real~-
  void                    Assume             D     %66.0, %2.3 (Typecheck@0x55846afdde80[Type#12])
  (int|real)$-    %66.2 = CallSafeBuiltin    wed   length(%2.1)    <int$->
  lgl$#-          %66.3 = IsType                   %66.2 isA int$-
  cp              %66.4 = Checkpoint                -> BB68 (default) | BB67 (if assume failed)
BB5   <- [4]
  goto BB6
BB68   <- [66]
  void                    Assume             D     %66.3, %66.4 (Typecheck@0x55846afdde80[Type#13])
  int$-           %68.1 = CastType           d     dn %66.2
  lgl$-           %68.2 = Gt                 d     %68.1, 0, elided   <lgl$->
  lgl$-           %68.3 = AsLogical                %68.2
  lgl$-           %68.4 = LAnd                     %2.2, %68.3
  goto BB6
BB67   <- [66]
  fs              %67.0 = FrameState         R     0x55846b0eae50+433: [%2.2, %66.2], env=e1.1
  void                    Deopt              !v    %67.0
BB6   <- [5, 68]
  lgl$-           %6.0  = Phi                      %68.4:BB68, %2.2:BB5
  lgl$#-          %6.1  = CheckTrueFalse     e     %6.0
  void                    Branch                   %6.1 -> BB61 (if true) | BB7 (if false)
BB61   <- [6]
  val?            %61.0 = CallBuiltin        !v    sorted_fpass(%2.1, false, true) e1.1
  lgl$#-          %61.1 = CheckTrueFalse     we    %61.0
  void                    Branch                   %61.1 -> BB63 (if true) | BB62 (if false)
BB7   <- [6]
  goto BB8
BB63   <- [61]
  val?^ | miss    %63.0 = LdVar              eR    seq_along, e1.1
  lgl$#-          %63.1 = Identical                <blt seq_along>, %63.0   <@?>
  void                    Branch                   %63.1 -> BB65 (if true) | BB64 (if false)
BB62   <- [61]
  goto BB8
BB8   <- [7, 62]
  cp              %8.0  = Checkpoint                -> BB10 (default) | BB9 (if assume failed)
BB65   <- [63]
  val?^ | miss    %65.0 = LdVar              eR    x, e1.1
  val?            %65.1 = Force!             !v    %65.0, e1.1   <val?_>
  val?            %65.2 = CallBuiltin        !     seq_along(%65.1) e1.1   <val?_>
  goto BB46
BB64   <- [63]
  (cls|spec|blt)  %64.0 = LdFun              !v    seq_along, e1.1
  fs              %64.1 = FrameState         R     0x55846b0eae50+557: [%64.0], env=e1.1
  void                    Deopt              !v    %64.1, DeadCall@0x55846afdde80[Call#5], %64.0   !
BB10   <- [8]
  val?^ | miss    %10.0 = LdVar              eR    match.arg, e1.1
  lgl$#-          %10.1 = Identical                %10.0, function(arg, choices, several.ok=FALSE) <(rir|...
  void                    Assume             D     %10.1, %8.0 (CallTarget@0x55846afdde80[Call#6])
  prom-           %10.3 = MkArg                    unboundValue, sort.list[0x558469662d80]_p4, e1.1
  val?            %10.4 = StaticCall         !v    match.arg[0x558469981510](%10.3, <str [1] "auto" "shell" "quick" "radix">) e1.1   <str$->
  void                    StVar              lW    method, %10.4, e1.1
  lgl$#-          %10.6 = IsType                   %10.4 isA val?-
  cp              %10.7 = Checkpoint                -> BB12 (default) | BB11 (if assume failed)
BB9   <- [8]
  fs              %9.0  = FrameState         R     0x55846b0eae50+626: [], env=e1.1
  void                    Deopt              !v    %9.0   !
BB46   <- [65, 47, 45]
  val?            %46.0 = Phi                      %45.6:BB45, %47.4:BB47, %65.2:BB65
  void                    Return             l     %46.0
BB12   <- [10]
  val             %12.0 = ChkMissing         e     %10.4
  void                    Assume             D     %10.6, %10.7 (Typecheck@0x55846afdde80[Type#22])
  val?-           %12.2 = CastType           d     dn %10.4   <str$->
  lgl-            %12.3 = Eq                 wed   %12.2, "auto", elided   <lgl$->
  lgl$#-          %12.4 = IsType                   %12.3 isA lgl$-
  cp              %12.5 = Checkpoint                -> BB14 (default) | BB13 (if assume failed)
BB11   <- [10]
  fs              %11.0 = FrameState         R     0x55846b0eae50+672: [], env=e1.1
  void                    Deopt              !v    %11.0   !
BB14   <- [12]
  void                    Assume             D     %12.4, %12.5 (Typecheck@0x55846afdde80[Type#24])
  lgl$-           %14.1 = CastType           d     dn %12.3
  lgl$-           %14.2 = AsLogical                %14.1
  lgl$#-          %14.3 = Identical                %14.2, false
  void                    Branch                   %14.3 -> BB60 (if true) | BB15 (if false)
BB13   <- [12]
  fs              %13.0 = FrameState         R     0x55846b0eae50+693: [%12.3], env=e1.1
  void                    Deopt              !v    %13.0   !
BB60   <- [14]
  goto BB18
BB15   <- [14]
  val?^ | miss    %15.0 = LdVar              eR    is.numeric, e1.1
  lgl$#-          %15.1 = Identical                <blt is.numeric>, %15.0   <true>
  void                    Assume             D     %15.1, %12.5 (DeadBranchReached@0x55846afdde80[Test#5])
  val?^ | miss    %15.3 = LdVar              eR    x, e1.1
  lgl$#-          %15.4 = IsType                   %15.3 isA real~-
  void                    Assume             D     %15.4, %12.5 (Typecheck@0x55846afdde80[Type#26])
  real~-          %15.6 = CastType           d     dn %15.3
  real-           %15.7 = Force!<wrapped>          %15.6,    <real->
  lgl$#-          %15.8 = CallSafeBuiltin    wed   is.numeric(%15.7)    <lgl$->
  lgl$-           %15.9 = LAnd                     %14.2, %15.8
  void                    Branch                   %15.8 -> BB17 (if true) | BB16 (if false)
BB18   <- [60, 17]
  lgl$-           %18.0 = Phi                      %15.9:BB17, %14.2:BB60
  lgl$-           %18.1 = AsLogical                %18.0
  lgl$#-          %18.2 = Identical                %18.1, false
  cp              %18.3 = Checkpoint                -> BB20 (default) | BB19 (if assume failed)
BB17   <- [15]
  goto BB18
BB16   <- [15]
  (cls|spec|blt)  %16.0 = LdFun              !v    is.factor, e1.1
  fs              %16.1 = FrameState         R     0x55846b0eae50+813: [%14.2, %15.8, %16.0], env=e1.1
  void                    Deopt              !v    %16.1, DeadCall@0x55846afdde80[Call#8], %16.0   !
BB20   <- [18]
  void                    Branch                   %18.2 -> BB59 (if true) | BB21 (if false)
BB19   <- [18]
  fs              %19.0 = FrameState         R     0x55846b0eae50+1167: [%18.0], env=e1.1
  void                    Deopt              !v    %19.0   !
BB59   <- [20]
  goto BB24
BB21   <- [20]
  val?^ | miss    %21.0 = LdVar              eR    is.integer, e1.1
  lgl$#-          %21.1 = Identical                <blt is.integer>, %21.0   <true>
  void                    Assume             D     %21.1, %18.3 (DeadBranchReached@0x55846afdde80[Test#9])
  val?^ | miss    %21.3 = LdVar              eR    length, e1.1
  lgl$#-          %21.4 = Identical                <blt length>, %21.3   <true>
  void                    Assume             D     %21.4, %18.3 (DeadBranchReached@0x55846afdde80[Test#10])
  val?^ | miss    %21.6 = LdVar              eR    x, e1.1
  lgl$#-          %21.7 = IsType                   %21.6 isA real~-
  void                    Assume             D     %21.7, %18.3 (Typecheck@0x55846afdde80[Type#42])
  real~-          %21.9 = CastType           d     dn %21.6
  real-           %21.10 = Force!<wrapped>          %21.9,    <real->
  (int|real)$-    %21.11 = CallSafeBuiltin    wed   length(%21.10)    <int$->
  lgl$#-          %21.12 = IsType                   %21.11 isA int$-
  cp              %21.13 = Checkpoint                -> BB23 (default) | BB22 (if assume failed)
BB24   <- [59, 23]
  lgl$-           %24.0 = Phi                      %23.1:BB23, %18.1:BB59
  lgl$#-          %24.1 = CheckTrueFalse     e     %24.0
  void                    Branch                   %24.1 -> BB58 (if true) | BB25 (if false)
BB23   <- [21]
  void                    Assume             D     %21.12, %21.13 (Typecheck@0x55846afdde80[Type#43])
  lgl$-           %23.1 = AsLogical                %18.1
  goto BB24
BB22   <- [21]
  fs              %22.0 = FrameState         R     0x55846b0eae50+1325: [%18.1, <blt is.integer>, %21.11], env=e1.1
  void                    Deopt              !v    %22.0   !
BB58   <- [24]
  void                    StVar              lW    method, "radix", e1.1
  goto BB26
BB25   <- [24]
  goto BB26
BB26   <- [25, 58]
  val?^ | miss    %26.0 = LdVar              eR    partial, e1.1
  val?            %26.1 = Force!<wrapped>    !v    %26.0, e1.1   <nil->
  lgl$-           %26.2 = Is                       %26.1, NULL
  lgl$-           %26.3 = Not                d     %26.2, elided
  lgl$#-          %26.4 = CheckTrueFalse     e     %26.3
  void                    Branch                   %26.4 -> BB57 (if true) | BB27 (if false)
BB57   <- [26]
  (cls|spec|blt)  %57.0 = LdFun              !v    .NotYetUsed, e1.1
  fs              %57.1 = FrameState         R     0x55846b0eae50+1416: [%57.0], env=e1.1
  void                    Deopt              !v    %57.1, DeadCall@0x55846afdde80[Call#15], %57.0   !
BB27   <- [26]
  val?^ | miss    %27.0 = LdVar              eR    method, e1.1
  val?            %27.1 = Force!<value>      !v    %27.0, e1.1   <str$->
  lgl$#-          %27.2 = IsType                   %27.1 isA val?-
  cp              %27.3 = Checkpoint                -> BB29 (default) | BB28 (if assume failed)
BB29   <- [27]
  void                    Assume             D     %27.2, %27.3 (Typecheck@0x55846afdde80[Type#46])
  val?-           %29.1 = CastType           d     dn %27.1   <str$->
  lgl-            %29.2 = Eq                 wed   %29.1, "quick", elided   <lgl$->
  lgl$#-          %29.3 = IsType                   %29.2 isA lgl$-
  cp              %29.4 = Checkpoint                -> BB31 (default) | BB30 (if assume failed)
BB28   <- [27]
  fs              %28.0 = FrameState         R     0x55846b0eae50+1453: [%27.1], env=e1.1
  void                    Deopt              !v    %28.0   !
BB31   <- [29]
  void                    Assume             D     %29.3, %29.4 (Typecheck@0x55846afdde80[Type#47])
  lgl$-           %31.1 = CastType           d     dn %29.2
  lgl$#-          %31.2 = CheckTrueFalse     e     %31.1
  void                    Branch                   %31.2 -> BB56 (if true) | BB32 (if false)
BB30   <- [29]
  fs              %30.0 = FrameState         R     0x55846b0eae50+1465: [%29.2], env=e1.1
  void                    Deopt              !v    %30.0   !
BB56   <- [31]
  (cls|spec|blt)  %56.0 = LdFun              !v    is.factor, e1.1
  fs              %56.1 = FrameState         R     0x55846b0eae50+1486: [%56.0], env=e1.1
  void                    Deopt              !v    %56.1, DeadCall@0x55846afdde80[Call#16], %56.0   !
BB32   <- [31]
  val?^ | miss    %32.0 = LdVar              eR    is.na, e1.1
  lgl$#-          %32.1 = Identical                <blt is.na>, %32.0   <true>
  void                    Assume             D     %32.1, %29.4 (DeadBranchReached@0x55846afdde80[Test#13])
  val?^ | miss    %32.3 = LdVar              eR    na.last, e1.1
  lgl$#-          %32.4 = IsType                   %32.3 isA lgl$~-
  void                    Assume             D     %32.4, %29.4 (Typecheck@0x55846afdde80[Type#63])
  lgl$~-          %32.6 = CastType           d     dn %32.3
  lgl$-           %32.7 = Force!<wrapped>          %32.6,    <lgl$->
  lgl$-           %32.8 = CallSafeBuiltin    wed   is.na(%32.7)    <lgl$->
  lgl$#-          %32.9 = CheckTrueFalse     e     %32.8
  void                    Branch                   %32.9 -> BB48 (if true) | BB33 (if false)
BB48   <- [32]
  val?^ | miss    %48.0 = LdVar              eR    x, e1.1
  val?            %48.1 = Force!             !v    %48.0, e1.1   <val?_>
  lgl$#-          %48.2 = IsType                   %48.1 isA val+   <@?>
  void                    Branch                   %48.2 -> BB51 (if true) | BB49 (if false)
BB33   <- [32]
  goto BB34
BB51   <- [48]
  val?^ | miss    %51.0 = LdVar              eR    is.na, e1.1
  lgl$#-          %51.1 = Identical                <blt is.na>, %51.0   <@?>
  void                    Branch                   %51.1 -> BB53 (if true) | BB52 (if false)
BB49   <- [48]
  prom-           %49.0 = MkArg                    unboundValue, sort.list[0x558469662d80]_p8, e1.1
  goto BB50
BB34   <- [33, 50]
  val?^ | miss    %34.0 = LdVar              eR    method, e1.1
  val?            %34.1 = Force!<value>      !v    %34.0, e1.1   <str$->
  lgl$#-          %34.2 = IsType                   %34.1 isA val?-
  cp              %34.3 = Checkpoint                -> BB36 (default) | BB35 (if assume failed)
BB53   <- [51]
  val?^ | miss    %53.0 = LdVar              eR    x, e1.1
  val?            %53.1 = Force!             !v    %53.0, e1.1   <val?_>
  lgl$#-          %53.2 = IsType                   %53.1 isA val?+
  cp              %53.3 = Checkpoint                -> BB55 (default) | BB54 (if assume failed)
BB52   <- [51]
  (cls|spec|blt)  %52.0 = LdFun              !v    is.na, e1.1
  fs              %52.1 = FrameState         R     0x55846b0eae50+1997: [%48.1, %52.0], env=e1.1
  void                    Deopt              !v    %52.1, DeadCall@0x55846afdde80[Call#24], %52.0   !
BB50   <- [49, 55]
  (lgl|prom)      %50.0 = Phi                      %55.3:BB55, %49.0:BB49
  val?            %50.1 = Extract1_1D        !v    %48.1, %50.0, e1.1   <val?_>
  void                    StVar              lW    x, %50.1, e1.1
  void                    StVar              lW    na.last, true, e1.1
  goto BB34
BB36   <- [34]
  void                    Visible            v     
  void                    Assume             D     %34.2, %34.3 (Typecheck@0x55846afdde80[Type#72])
  val?-           %36.2 = CastType           d     dn %34.1   <str$->
  lgl-            %36.3 = Eq                 vwed  %36.2, "radix", elided   <lgl$->
  lgl$#-          %36.4 = IsType                   %36.3 isA lgl$-
  cp              %36.5 = Checkpoint                -> BB38 (default) | BB37 (if assume failed)
BB35   <- [34]
  fs              %35.0 = FrameState         R     0x55846b0eae50+2106: [%34.1], env=e1.1
  void                    Deopt              !v    %35.0   !
BB55   <- [53]
  void                    Assume             D     %53.2, %53.3 (Typecheck@0x55846afdde80[Type#69])
  val?+           %55.1 = CastType           d     dn %53.1   <val?_>
  lgl+            %55.2 = CallSafeBuiltin    wed   is.na(%55.1)    <val?_>
  lgl             %55.3 = Not                wed   %55.2, elided
  goto BB50
BB54   <- [53]
  fs              %54.0 = FrameState         R     0x55846b0eae50+2038: [%48.1, <blt is.na>, %53.1], env=e1.1
  void                    Deopt              !v    %54.0   !
BB38   <- [36]
  void                    Assume             D     %36.4, %36.5 (Typecheck@0x55846afdde80[Type#73])
  lgl$-           %38.1 = CastType           d     dn %36.3
  lgl$#-          %38.2 = CheckTrueFalse     e     %38.1
  void                    Branch                   %38.2 -> BB47 (if true) | BB39 (if false)
BB37   <- [36]
  fs              %37.0 = FrameState         R     0x55846b0eae50+2118: [%36.3], env=e1.1
  void                    Deopt              !v    %37.0   !
BB47   <- [38]
  (cls|spec|blt)  %47.0 = LdFun              !     order, <0x558468b1ebf8>, e1.1
  prom-           %47.1 = MkArg                    unboundValue, sort.list[0x558469662d80]_p5, e1.1
  prom-           %47.2 = MkArg                    unboundValue, sort.list[0x558469662d80]_p6, e1.1
  prom-           %47.3 = MkArg                    unboundValue, sort.list[0x558469662d80]_p7, e1.1
  val?            %47.4 = NamedCall          !     %47.0(%47.1, na.last=%47.2, decreasing=%47.3, method="radix") e1.1   <int->
  goto BB46
BB39   <- [38]
  val?^ | miss    %39.0 = LdVar              eR    is.atomic, e1.1
  lgl$#-          %39.1 = Identical                <blt is.atomic>, %39.0   <@?>
  void                    Branch                   %39.1 -> BB41 (if true) | BB40 (if false)
BB41   <- [39]
  val?^ | miss    %41.0 = LdVar              eR    x, e1.1
  val?            %41.1 = Force!             !v    %41.0, e1.1   <val?_>
  lgl$#-          %41.2 = IsType                   %41.1 isA val?+
  cp              %41.3 = Checkpoint                -> BB43 (default) | BB42 (if assume failed)
BB40   <- [39]
  (cls|spec|blt)  %40.0 = LdFun              !v    is.atomic, e1.1
  fs              %40.1 = FrameState         R     0x55846b0eae50+2231: [%40.0], env=e1.1
  void                    Deopt              !v    %40.1, DeadCall@0x55846afdde80[Call#26], %40.0   !
BB43   <- [41]
  void                    Assume             D     %41.2, %41.3 (Typecheck@0x55846afdde80[Type#79])
  val?+           %43.1 = CastType           d     dn %41.1   <val?_>
  lgl$#-          %43.2 = CallSafeBuiltin    wed   is.atomic(%43.1)    <val?_>
  void                    Branch                   %43.2 -> BB45 (if true) | BB44 (if false)
BB42   <- [41]
  fs              %42.0 = FrameState         R     0x55846b0eae50+2272: [<blt is.atomic>, %41.1], env=e1.1
  void                    Deopt              !v    %42.0   !
BB45   <- [43]
  val?^ | miss    %45.0 = LdVar              eR    na.last, e1.1
  val?            %45.1 = Force!             !v    %45.0, e1.1   <val?_>
  val?^ | miss    %45.2 = LdVar              eR    decreasing, e1.1
  val?            %45.3 = Force!             !v    %45.2, e1.1   <val?_>
  val?^ | miss    %45.4 = LdVar              eR    x, e1.1
  val?            %45.5 = Force!             !v    %45.4, e1.1   <val?_>
  val?            %45.6 = CallBuiltin        !     order(%45.1, %45.3, %45.5) e1.1
  goto BB46
BB44   <- [43]
  (cls|spec|blt)  %44.0 = LdFun              !v    stop, e1.1
  fs              %44.1 = FrameState         R     0x55846b0eae50+2316: [%44.0], env=e1.1
  void                    Deopt              !v    %44.1, DeadCall@0x55846afdde80[Call#27], %44.0   !
Prom 3:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     c, <0x558466cd0940>, e1.0
  val?            %1.2  = Call               !     %1.1("auto", "shell", "quick", "radix") e1.0   <str->
  void                    Return             l     %1.2
Prom 4:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    method, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <str->
  void                    Return             l     %1.3
Prom 5:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    x, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <real->
  void                    Return             l     %1.3
Prom 6:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    na.last, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <lgl$->
  void                    Return             l     %1.3
Prom 7:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    decreasing, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <lgl$->
  void                    Return             l     %1.3
Prom 8:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     is.na, e1.0
  prom-           %1.2  = MkArg                    unboundValue, sort.list[0x558469662d80]_p9, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2) e1.0   <val?_>
  val?            %1.4  = Not                !     %1.3, e1.0
  void                    Return             l     %1.4
Prom 9:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    x, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3

│ sort.list[0x558469662d80]                                                    │
└──────────────────────────────────────────────────────────────────────────────┘
