
┌──────────────────────────────────────────────────────────────────────────────┐
│ .memberDend[0x55846ba21bb0]                                                  │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch                                      │
│ Properties:                                                                  │
├────── PIR Version After Optimizations
.memberDend[0x55846ba21bb0]
BB0
  goto BB1
BB1   <- [0]
  val?^           %1.0  = LdArg                    0
  cp              %1.1  = Checkpoint                -> BB2 (default) | BB10 (if assume failed)
BB2   <- [1]
  val?^ | miss    %2.0  = LdVar              eR    %||%, <env 0x55846731fb50>
  lgl$#-          %2.1  = Identical                %2.0, function(L, R) <(rir::DispatchTable*)0x5584670|...
  void                    Assume             D     %2.1, %1.1 (CallTarget@0x55846b7a66e8[Call#0])
  env             e2.3  = MkEnv              l     x=%1.0, parent=<env 0x55846731fb50>, context 1
  prom-           %2.4  = MkArg                    unboundValue, .memberDend[0x55846ba21bb0]_p2, e2.3
  val?^           %2.5  = CastType                 up %2.4
  val?^ | miss    %2.6  = LdVar              eR    attr, <env 0x55846731fb50>
  lgl$#-          %2.7  = Identical                %2.6, <blt attr>
  void                    Assume             D     %2.7, %1.1 (CallTarget@0x55846b7a66e8[Call#1])
  val?            %2.9  = Force!<lazy>       !v    %1.0, e2.3   <int$->
  val?            %2.10 = CallBuiltin        !v    attr(%2.9, "x.member") e2.3   <nil->
  lgl$-           %2.11 = Is                       %2.10, NULL
  prom-           %2.12 = MkArg                    %2.10, .memberDend[0x55846ba21bb0]_p0 (!refl), e2.3
  val?~           %2.13 = CastType                 up %2.12
  lgl$#-          %2.14 = CheckTrueFalse     e     %2.11
  env             e2.15 = (MkEnv)            l     L=%2.13, R=%2.5, parent=<env 0x55846731fb50>, context 0
  void                    Branch                   %2.14 -> BB7 (if true) | BB3 (if false)
BB10   <- [1]
  env             e10.0 = (MkEnv)            l     x=%1.0, parent=<env 0x55846731fb50>, context 1
  fs              %10.1 = FrameState         R     0x55846762eb70+0: [], env=e10.0
  void                    Deopt              !v    %10.1
BB7   <- [2]
  void                    Visible            v     
  val?            %7.1  = Force!<lazy>       !L    %2.5, e2.15   <int$->
  cp              %7.2  = Checkpoint                -> BB9 (default) | BB8 (if assume failed)
BB3   <- [2]
  void                    Visible            v     
  goto BB4
BB9   <- [7]
  lgl$#-          %9.0  = IsEnvStub          R     , e2.15
  void                    Assume             D     %9.0, %7.2 (EnvStubMaterialized@0x55846b7a6848[Call#unknown])
  goto BB4
BB8   <- [7]
  fs              %8.0  = FrameState         R     0x55846762eb70+37: [], env=e2.3
  fs              %8.1  = FrameState         R     0x5584670b9890+53: [%7.1], env=e2.15, next=%8.0
  void                    Deopt              !v    %8.1   !
BB4   <- [9, 3]
  val?            %4.0  = Phi                      %2.10:BB3, %7.1:BB9   <int$->
  lgl$#-          %4.1  = IsType                   %4.0 isA int$-
  cp              %4.2  = Checkpoint                -> BB6 (default) | BB5 (if assume failed)
BB6   <- [4]
  void                    Assume             D     %4.1, %4.2 (Typecheck@0x55846b7a66e8[Type#5])
  int$-           %6.1  = CastType           d     dn %4.0
  void                    Return             l     %6.1
BB5   <- [4]
  fs              %5.0  = FrameState         R     0x55846762eb70+37: [], env=e2.3
  fs              %5.1  = FrameState         R     0x5584670b9890+58: [%4.0], env=e2.15, next=%5.0
  void                    Deopt              !v    %5.1   !
Prom 0:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     attr, <0x558466cd0080>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, .memberDend[0x55846ba21bb0]_p1, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2, "x.member") e1.0   <nil->
  void                    Return             l     %1.3
Prom 1:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    x, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <int$->
  void                    Return             l     %1.3
Prom 2:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !v    %||%, <0x558468b0c558>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, .memberDend[0x55846ba21bb0]_p3, e1.0
  val?            %1.3  = Call               !v    %1.1(%1.2, 1L) e1.0   <int$->
  void                    Visible            v     
  void                    Return             l     %1.3
Prom 3:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     attr, <0x558466cd0080>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, .memberDend[0x55846ba21bb0]_p4, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2, "members") e1.0   <nil->
  void                    Return             l     %1.3
Prom 4:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    x, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <int$->
  void                    Return             l     %1.3

│ .memberDend[0x55846ba21bb0]                                                  │
└──────────────────────────────────────────────────────────────────────────────┘
