
┌──────────────────────────────────────────────────────────────────────────────┐
│ osr[0x55846845b430]                                                          │
│ Context: CorrOrd,!TMany                                                      │
│ Properties:                                                                  │
├────── PIR Version After Optimizations
osr[0x55846845b430]
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  goto BB2
BB2   <- [1, 129, 92]
  cp              %2.0  = Checkpoint                -> BB3 (default) | BB133 (if assume failed)
BB3   <- [2]
  val?^ | miss    %3.0  = LdVar              eR    depth, e1.0
  lgl$#-          %3.1  = IsType                   %3.0 isA int$-
  void                    Assume             D     %3.1, %2.0 (Typecheck@0x558467ed4398[Type#76])
  int$-           %3.3  = CastType           d     dn %3.0
  lgl$#-          %3.4  = CheckTrueFalse     e     %3.3
  void                    Branch                   %3.4 -> BB98 (if true) | BB4 (if false)
BB133   <- [2]
  fs              %133.0 = FrameState         R     0x55846b9b3aa0+1750: [], env=e1.0
  void                    Deopt              !v    %133.0   !
BB98   <- [3]
  val?^ | miss    %98.0 = LdVar              eR    x, e1.0
  val?            %98.1 = Force!<value>      !v    %98.0, e1.0   <vec>
  void                    StVar              lW    b, %98.1, e1.0
  cp              %98.3 = Checkpoint                -> BB100 (default) | BB99 (if assume failed)
BB4   <- [3]
  goto BB5
BB100   <- [98]
  val?^ | miss    %100.0 = LdVar              eR    xx, e1.0
  lgl$#-          %100.1 = IsType                   %100.0 isA val?~- | miss
  void                    Assume             D     %100.1, %98.3 (Typecheck@0x558467ed4398[Type#78])
  val?~- | miss   %100.3 = CastType           d     dn %100.0
  val?-           %100.4 = Force!<value>            %100.3,    <vec->
  lgl$#-          %100.5 = IsType                   %100.4 isA val+   <lgl$#->
  void                    Assume             D     %100.5, %98.3 (DeadBranchReached@0x558467ed4398[Test#12])
  val?^ | miss    %100.7 = LdVar              eR    depth, e1.0
  lgl$#-          %100.8 = IsType                   %100.7 isA int$-
  void                    Assume             D     %100.8, %98.3 (Typecheck@0x558467ed4398[Type#80])
  int$-           %100.10 = CastType           d     dn %100.7
  val?            %100.11 = Extract2_1D        wed   %100.4, %100.10, elided   <vec>
  void                    StVar              lW    x, %100.11, e1.0
  cp              %100.13 = Checkpoint                -> BB102 (default) | BB101 (if assume failed)
BB99   <- [98]
  fs              %99.0 = FrameState         R     0x55846b9b3aa0+1793: [], env=e1.0
  void                    Deopt              !v    %99.0   !
BB5   <- [132, 95, 4]
  cp              %5.0  = Checkpoint                -> BB7 (default) | BB6 (if assume failed)
BB102   <- [100]
  val?^ | miss    %102.0 = LdVar              eR    jj, e1.0
  lgl$#-          %102.1 = IsType                   %102.0 isA int-
  void                    Assume             D     %102.1, %100.13 (Typecheck@0x558467ed4398[Type#82])
  int-            %102.3 = CastType           d     dn %102.0
  int-            %102.4 = Extract1_1D        wed   %102.3, %100.10, elided   <int$->
  lgl$#-          %102.5 = IsType                   %102.4 isA int$-
  cp              %102.6 = Checkpoint                -> BB104 (default) | BB103 (if assume failed)
BB101   <- [100]
  fs              %101.0 = FrameState         R     0x55846b9b3aa0+1868: [], env=e1.0
  void                    Deopt              !v    %101.0   !
BB7   <- [5]
  val?^ | miss    %7.0  = LdVar              eR    depth, e1.0
  lgl$#-          %7.1  = IsType                   %7.0 isA int$-
  void                    Assume             D     %7.1, %5.0 (Typecheck@0x558467ed4398[Type#114])
  int$-           %7.3  = CastType           d     dn %7.0
  lgl$-           %7.4  = Not                d     %7.3, elided
  lgl$#-          %7.5  = CheckTrueFalse     e     %7.4
  void                    Branch                   %7.5 -> BB97 (if true) | BB8 (if false)
BB6   <- [5]
  fs              %6.0  = FrameState         R     0x55846b9b3aa0+2485: [], env=e1.0
  void                    Deopt              !v    %6.0   !
BB104   <- [102]
  void                    Assume             D     %102.5, %102.6 (Typecheck@0x558467ed4398[Type#85])
  int$-           %104.1 = CastType           d     dn %102.4
  void                    StVar              lW    j, %104.1, e1.0
  val             %104.3 = ChkMissing         e     %98.1
  val             %104.4 = ChkMissing         e     %100.11
  val?            %104.5 = Subassign2_1D      !v    %98.1, %100.11, %104.1, e1.0
  void                    StVar              lW    x, %104.5, e1.0
  cp              %104.7 = Checkpoint                -> BB106 (default) | BB105 (if assume failed)
BB103   <- [102]
  fs              %103.0 = FrameState         R     0x55846b9b3aa0+1928: [%102.4], env=e1.0
  void                    Deopt              !v    %103.0   !
BB97   <- [7]
  val?^ | miss    %97.0 = LdVar              eR    x, e1.0
  void                    Visible            v     
  val?            %97.2 = Force!             !     %97.0, e1.0   <val?_>
  void                    Return             l     %97.2
BB8   <- [7]
  val?^ | miss    %8.0  = LdVar              eR    x, e1.0
  val?            %8.1  = Force!<value>      !v    %8.0, e1.0   <vec>
  cp              %8.2  = Checkpoint                -> BB10 (default) | BB9 (if assume failed)
BB106   <- [104]
  val?^ | miss    %106.0 = LdVar              eR    j, e1.0
  lgl$#-          %106.1 = IsType                   %106.0 isA int$-
  void                    Assume             D     %106.1, %104.7 (Typecheck@0x558467ed4398[Type#89])
  int$-           %106.3 = CastType           d     dn %106.0
  val?^ | miss    %106.4 = LdVar              eR    kk, e1.0
  lgl$#-          %106.5 = IsType                   %106.4 isA int-
  void                    Assume             D     %106.5, %104.7 (Typecheck@0x558467ed4398[Type#90])
  int-            %106.7 = CastType           d     dn %106.4
  val?^ | miss    %106.8 = LdVar              eR    depth, e1.0
  lgl$#-          %106.9 = IsType                   %106.8 isA int$-
  void                    Assume             D     %106.9, %104.7 (Typecheck@0x558467ed4398[Type#92])
  int$-           %106.11 = CastType           d     dn %106.8
  int-            %106.12 = Extract1_1D        wed   %106.7, %106.11, elided   <int$->
  lgl$#-          %106.13 = IsType                   %106.12 isA int$-
  cp              %106.14 = Checkpoint                -> BB108 (default) | BB107 (if assume failed)
BB105   <- [104]
  fs              %105.0 = FrameState         R     0x55846b9b3aa0+1995: [], env=e1.0
  void                    Deopt              !v    %105.0   !
BB10   <- [8]
  val?^ | miss    %10.0 = LdVar              eR    xx !upd, e1.0
  lgl$#-          %10.1 = IsType                   %10.0 isA val?~- | miss
  void                    Assume             D     %10.1, %8.2 (Typecheck@0x558467ed4398[Type#116])
  val?~- | miss   %10.3 = CastType           d     dn %10.0
  val?-           %10.4 = Force!<value>            %10.3,    <vec->
  val?^ | miss    %10.5 = LdVar              eR    depth, e1.0
  lgl$#-          %10.6 = IsType                   %10.5 isA int$-
  void                    Assume             D     %10.6, %8.2 (Typecheck@0x558467ed4398[Type#117])
  int$-           %10.8 = CastType           d     dn %10.5
  val?            %10.9 = Subassign2_1D      !v    %8.1, %10.4, %10.8, e1.0
  void                    StVar              lW    xx, %10.9, e1.0
  val?^ | miss    %10.11 = LdVar              eR    x, e1.0
  val?            %10.12 = Force!<value>      !v    %10.11, e1.0   <vec>
  lgl$#-          %10.13 = IsType                   %10.12 isA val+   <lgl$#->
  cp              %10.14 = Checkpoint                -> BB12 (default) | BB11 (if assume failed)
BB9   <- [8]
  fs              %9.0  = FrameState         R     0x55846b9b3aa0+2530: [%8.1], env=e1.0
  void                    Deopt              !v    %9.0   !
BB108   <- [106]
  void                    Assume             D     %106.13, %106.14 (Typecheck@0x558467ed4398[Type#93])
  int$-           %108.1 = CastType           d     dn %106.12
  lgl$-           %108.2 = Lt                 d     %106.3, %108.1, elided   <lgl$->
  lgl$#-          %108.3 = CheckTrueFalse     e     %108.2
  void                    Branch                   %108.3 -> BB132 (if true) | BB109 (if false)
BB107   <- [106]
  fs              %107.0 = FrameState         R     0x55846b9b3aa0+2069: [%106.3, %106.12], env=e1.0
  void                    Deopt              !v    %107.0   !
BB12   <- [10]
  void                    AssumeNot          D     %10.13, %10.14 (DeadBranchReached@0x558467ed4398[Test#17])
  prom-           %12.1 = MkArg                    unboundValue, osr[0x55846845b430]_p11, e1.0
  val?            %12.2 = Extract2_1D        !v    %10.12, %12.1, e1.0   <(int|vec)>
  void                    StVar              lW    x, %12.2, e1.0
  goto BB13
BB11   <- [10]
  fs              %11.0 = FrameState         R     0x55846b9b3aa0+2582: [%10.12], env=e1.0
  void                    Deopt              !v    %11.0   !
BB132   <- [108]
  goto BB5
BB109   <- [108]
  int$-           %109.0 = Sub                d     %106.11, 1L, elided   <int$->
  void                    StVar              lW    depth, %109.0, e1.0
  cp              %109.2 = Checkpoint                -> BB111 (default) | BB110 (if assume failed)
BB13   <- [12, 48]
  cp              %13.0 = Checkpoint                -> BB15 (default) | BB14 (if assume failed)
BB111   <- [109]
  val?^ | miss    %111.0 = LdVar              eR    vapply, e1.0
  lgl$#-          %111.1 = Identical                %111.0, function(X, FUN, FUN.VALUE, ..., USE.NAMES=TRU|...
  void                    Assume             D     %111.1, %109.2 (CallTarget@0x558467ed4398[Call#15])
  prom-           %111.3 = MkArg                    unboundValue, osr[0x55846845b430]_p0 (!refl), e1.0
  prom-           %111.4 = MkArg                    unboundValue, osr[0x55846845b430]_p1, e1.0
  prom-           %111.5 = MkArg                    unboundValue, osr[0x55846845b430]_p2, e1.0
  dots-           %111.6 = DotsList           l     which="value"
  ct              %111.7 = PushContext        lCL   %111.3, %111.4, %111.5, %111.6, vapply(x, attr, numeric(1L), which="value"), function(X, FUN, FUN.VALUE, ..., USE.NAMES=TRU|..., e1.0
  val?^           %111.8 = CastType                 up %111.5
  val?^           %111.9 = CastType                 up %111.4
  val?^           %111.10 = CastType                 up %111.3
  cp              %111.11 = Checkpoint                -> BB113 (default) | BB112 (if assume failed)
BB110   <- [109]
  fs              %110.0 = FrameState         R     0x55846b9b3aa0+2137: [], env=e1.0
  void                    Deopt              !v    %110.0   !
BB15   <- [13]
  val?^ | miss    %15.0 = LdVar              eR    is.leaf, e1.0
  lgl$#-          %15.1 = Identical                %15.0, function(object) <(rir::DispatchTable*)0x55846|...
  void                    Assume             D     %15.1, %13.0 (CallTarget@0x558467ed4398[Call#2])
  prom-           %15.3 = MkArg                    unboundValue, osr[0x55846845b430]_p12 (!refl), e1.0
  ct              %15.4 = PushContext        lCL   %15.3, is.leaf(x), function(object) <(rir::DispatchTable*)0x55846|..., e1.0
  val?^           %15.5 = CastType                 up %15.3
  val?^ | miss    %15.6 = LdVar              eR    is.logical, <env 0x55846731fb50>
  lgl$#-          %15.7 = Identical                <blt is.logical>, %15.6   <true>
  cp              %15.8 = Checkpoint                -> BB17 (default) | BB16 (if assume failed)
BB14   <- [13]
  fs              %14.0 = FrameState         R     0x55846b9b3aa0+153: [], env=e1.0
  void                    Deopt              !v    %14.0   !
BB113   <- [111]
  env             e113.0 = MkEnv              l     X=%111.10, FUN=%111.9, FUN.VALUE=%111.8, ...=%111.6, USE.NAMES(miss)=true, parent=R_BaseNamespace, context 1
  val?^ | miss    %113.1 = LdVar              eR    match.fun, e113.0
  lgl$#-          %113.2 = Identical                %113.1, function(FUN, descend=TRUE) <(rir::DispatchTab|...
  void                    Assume             D     %113.2, %111.11 (CallTarget@0x55846af82080[Call#0])
  prom-           %113.4 = MkArg                    unboundValue, osr[0x55846845b430]_p31, e113.0
  val?            %113.5 = StaticCall         !v    match.fun[0x558467f33aa0](%113.4) e113.0   <(cls|blt)->
  void                    StVar              lW    FUN, %113.5, e113.0
  cp              %113.7 = Checkpoint                -> BB115 (default) | BB114 (if assume failed)
BB112   <- [111]
  fs              %112.0 = FrameState         R     0x55846b9b3aa0+2200: [], env=e1.0
  env             e112.1 = (MkEnv)            l     X=%111.10, FUN=%111.9, FUN.VALUE=%111.8, ...=%111.6, USE.NAMES(miss)=true, parent=R_BaseNamespace, context 1
  fs              %112.2 = FrameState         R     0x55846afea720+0: [], env=e112.1, next=%112.0
  void                    Deopt              !v    %112.2   !
BB17   <- [15]
  void                    Assume             D     %15.7, %15.8 (DeadBranchReached@0x558467ed4b28[Test#0])
  val?^ | miss    %17.1 = LdVar              eR    attr, <env 0x55846731fb50>
  lgl$#-          %17.2 = Identical                <blt attr>, %17.1   <true>
  void                    Assume             D     %17.2, %15.8 (DeadBranchReached@0x558467ed4b28[Test#1])
  env             e17.4 = MkEnv              l     object=%15.5, parent=<env 0x55846731fb50>, context 1
  val?            %17.5 = Force!<lazy>       !vr   %15.5, e17.4   <(int|vec)>
  val?            %17.6 = CallBuiltin        !v    attr(%17.5, "leaf") e17.4   <(nil|lgl)->
  void                    StVar              lW    L, %17.6, e17.4
  val+            %17.8 = CallSafeBuiltin    wed   is.logical(%17.6)    <lgl$->
  lgl$#-          %17.9 = IsType                   %17.8 isA lgl$-
  cp              %17.10 = Checkpoint                -> BB19 (default) | BB18 (if assume failed)
BB16   <- [15]
  fs              %16.0 = FrameState         R     0x55846b9b3aa0+185: [], env=e1.0
  env             e16.1 = (MkEnv)            l     object=%15.5, parent=<env 0x55846731fb50>, context 1
  fs              %16.2 = FrameState         R     0x55846b624450+17: [<blt is.logical>, %15.7], env=e16.1, next=%16.0
  void                    Deopt              !v    %16.2   !
BB115   <- [113]
  val?^ | miss    %115.0 = LdVar              eR    is.vector, e113.0
  lgl$#-          %115.1 = Identical                %115.0, function(x, mode="any") <(rir::DispatchTable*)|...
  void                    Assume             D     %115.1, %113.7 (CallTarget@0x55846af82080[Call#1])
  val?^ | miss    %115.3 = LdVar              eR    X, e113.0
  val?            %115.4 = Force!<lazy>       !v    %115.3, e113.0   <vec>
  lgl$#-          %115.5 = CallSafeBuiltin    wed   is.vector(%115.4, "any")    <lgl$->
  cp              %115.6 = Checkpoint                -> BB117 (default) | BB116 (if assume failed)
BB114   <- [113]
  fs              %114.0 = FrameState         R     0x55846b9b3aa0+2200: [], env=e1.0
  fs              %114.1 = FrameState         R     0x55846afea720+46: [], env=e113.0, next=%114.0
  void                    Deopt              !v    %114.1   !
BB19   <- [17]
  void                    Assume             D     %17.9, %17.10 (Typecheck@0x558467ed4b28[Type#5])
  lgl$-           %19.1 = CastType           d     dn %17.8
  lgl$-           %19.2 = AsLogical                %19.1
  lgl$#-          %19.3 = Identical                %19.2, false
  void                    Branch                   %19.3 -> BB96 (if true) | BB20 (if false)
BB18   <- [17]
  fs              %18.0 = FrameState         R     0x55846b9b3aa0+185: [], env=e1.0
  fs              %18.1 = FrameState         R     0x55846b624450+195: [%17.8], env=e17.4, next=%18.0
  void                    Deopt              !v    %18.1   !
BB117   <- [115]
  lgl$#-          %117.0 = Not                d     %115.5, elided
  void                    Branch                   %115.5 -> BB131 (if true) | BB118 (if false)
BB116   <- [115]
  fs              %116.0 = FrameState         R     0x55846b9b3aa0+2200: [], env=e1.0
  fs              %116.1 = FrameState         R     0x55846afea720+78: [], env=e113.0, next=%116.0
  prom-           %116.2 = MkArg                    %115.4, osr[0x55846845b430]_p32 (!refl), e113.0
  val?~           %116.3 = CastType                 up %116.2
  env             e116.4 = (MkEnv)            l     mode(miss)="any", x=%116.3, parent=R_BaseNamespace, context 0
  fs              %116.5 = FrameState         R     0x55846b1097d0+41: [%115.5], env=e116.4, next=%116.1
  void                    Deopt              !v    %116.5   !
BB96   <- [19]
  goto BB21
BB20   <- [19]
  val             %20.0 = ChkMissing         e     %17.6
  lgl$-           %20.1 = AsLogical          e     %17.6
  lgl$-           %20.2 = LAnd                     %19.2, %20.1
  goto BB21
BB131   <- [117]
  val?^ | miss    %131.0 = LdVar              eR    is.object, e113.0
  lgl$#-          %131.1 = Identical                <blt is.object>, %131.0   <true>
  void                    Assume             D     %131.1, %115.6 (DeadBranchReached@0x55846af82080[Test#0])
  val?^ | miss    %131.3 = LdVar              eR    X, e113.0
  val?            %131.4 = Force!<wrapped>    !v    %131.3, e113.0   <vec$->
  lgl$#-          %131.5 = CallSafeBuiltin    wed   is.object(%131.4)    <lgl$->
  lgl$-           %131.6 = LOr                      %117.0, %131.5
  goto BB119
BB118   <- [117]
  goto BB119
BB21   <- [96, 20]
  lgl$-           %21.0 = Phi                      %20.2:BB20, %19.2:BB96
  val?            %21.1 = PopContext         C     %21.0, %15.4   <lgl$->
  lgl$#-          %21.2 = IsType                   %21.1 isA lgl$-
  cp              %21.3 = Checkpoint                -> BB23 (default) | BB22 (if assume failed)
BB119   <- [118, 131]
  lgl$-           %119.0 = Phi                      %131.6:BB131, %117.0:BB118
  cp              %119.1 = Checkpoint                -> BB121 (default) | BB120 (if assume failed)
BB23   <- [21]
  void                    Assume             D     %21.2, %21.3 (Typecheck@0x558467ed4398[Type#3])
  lgl$-           %23.1 = CastType           d     dn %21.1
  lgl$#-          %23.2 = CheckTrueFalse     e     %23.1
  void                    Branch                   %23.2 -> BB51 (if true) | BB24 (if false)
BB22   <- [21]
  fs              %22.0 = FrameState         R     0x55846b9b3aa0+185: [%21.1], env=e1.0
  void                    Deopt              !v    %22.0   !
BB121   <- [119]
  lgl$#-          %121.0 = CheckTrueFalse     e     %119.0
  void                    Branch                   %121.0 -> BB130 (if true) | BB122 (if false)
BB120   <- [119]
  fs              %120.0 = FrameState         R     0x55846b9b3aa0+2200: [], env=e1.0
  fs              %120.1 = FrameState         R     0x55846afea720+189: [%119.0], env=e113.0, next=%120.0
  void                    Deopt              !v    %120.1   !
BB51   <- [23]
  val?^ | miss    %51.0 = LdVar              eR    wts, e1.0
  val?            %51.1 = Force!<lazy>       !v    %51.0, e1.0   <int->
  lgl$#-          %51.2 = IsType                   %51.1 isA val+   <lgl$#->
  cp              %51.3 = Checkpoint                -> BB53 (default) | BB52 (if assume failed)
BB24   <- [23]
  val?^ | miss    %24.0 = LdVar              eR    length, e1.0
  lgl$#-          %24.1 = Identical                <blt length>, %24.0   <true>
  void                    Assume             D     %24.1, %21.3 (DeadBranchReached@0x558467ed4398[Test#1])
  val?^ | miss    %24.3 = LdVar              eR    x, e1.0
  val?            %24.4 = Force!<wrapped>    !v    %24.3, e1.0   <vec>
  val?            %24.5 = CallBuiltin        !v    length(%24.4) e1.0   <int$->
  lgl$#-          %24.6 = IsType                   %24.5 isA int$-
  cp              %24.7 = Checkpoint                -> BB26 (default) | BB25 (if assume failed)
BB130   <- [121]
  val?^ | miss    %130.0 = LdVar              eR    as.list, e113.0
  lgl$#-          %130.1 = Identical                %130.0, function(x, ...) <(rir::DispatchTable*)0x55846|...
  void                    Assume             D     %130.1, %119.1 (CallTarget@0x55846af82080[Call#3])
  val?^ | miss    %130.3 = LdVar              eR    X, e113.0
  val?            %130.4 = Force!<wrapped>    !v    %130.3, e113.0   <vec>
  val?            %130.5 = StaticCall         !v    as.list[0x5584698d9c80](%130.4) { 0 } e113.0   <vec>
  void                    StVar              lW    X, %130.5, e113.0
  goto BB123
BB122   <- [121]
  goto BB123
BB53   <- [51]
  void                    Assume             D     %51.2, %51.3 (DeadBranchReached@0x558467ed4398[Test#3])
  val?^ | miss    %53.1 = LdVar              eR    x, e1.0
  val?            %53.2 = Force!<value>      !v    %53.1, e1.0   <int$>
  lgl$#-          %53.3 = IsType                   %53.2 isA val+   <lgl$#->
  cp              %53.4 = Checkpoint                -> BB55 (default) | BB54 (if assume failed)
BB52   <- [51]
  fs              %52.0 = FrameState         R     0x55846b9b3aa0+837: [%51.1], env=e1.0
  void                    Deopt              !v    %52.0   !
BB26   <- [24]
  void                    Assume             D     %24.6, %24.7 (Typecheck@0x558467ed4398[Type#6])
  int$-           %26.1 = CastType           d     dn %24.5
  void                    StVar              lW    k, %26.1, e1.0
  lgl$-           %26.3 = Eq                 d     %26.1, 0L, elided   <lgl$->
  lgl$#-          %26.4 = CheckTrueFalse     e     %26.3
  void                    Branch                   %26.4 -> BB50 (if true) | BB27 (if false)
BB25   <- [24]
  fs              %25.0 = FrameState         R     0x55846b9b3aa0+287: [%24.5], env=e1.0
  void                    Deopt              !v    %25.0   !
BB123   <- [122, 130]
  (cls|spec|blt)  %123.0 = LdFun              !v    .Internal, <0x558466ccf698>, e113.0
  prom-           %123.1 = MkArg                    unboundValue, osr[0x55846845b430]_p33, e113.0
  val?            %123.2 = Call               !v    %123.0(%123.1) e113.0   <(lgl|real)->
  val?            %123.3 = PopContext         C     %123.2, %111.7   <real->
  void                    StVar              lW    vals, %123.3, e1.0
  cp              %123.5 = Checkpoint                -> BB125 (default) | BB124 (if assume failed)
BB55   <- [53]
  void                    AssumeNot          D     %53.3, %53.4 (DeadBranchReached@0x558467ed4398[Test#5])
  val?            %55.1 = Extract1_1D        !v    %53.2, 1L, e1.0   <int$->
  lgl$#-          %55.2 = IsType                   %55.1 isA int$-
  cp              %55.3 = Checkpoint                -> BB57 (default) | BB56 (if assume failed)
BB54   <- [53]
  fs              %54.0 = FrameState         R     0x55846b9b3aa0+882: [%51.1, %53.2], env=e1.0
  void                    Deopt              !v    %54.0   !
BB50   <- [26]
  (cls|spec|blt)  %50.0 = LdFun              !v    stop, e1.0
  val?            %50.1 = Call               !v    %50.0("invalid (length 0) node in dendrogram") e1.0
  goto BB28
BB27   <- [26]
  goto BB28
BB125   <- [123]
  val?^ | miss    %125.0 = LdVar              eR    sort.list, e1.0
  lgl$#-          %125.1 = Identical                %125.0, function(x, partial=NULL, na.last=TRUE, decrea|...
  void                    Assume             D     %125.1, %123.5 (CallTarget@0x558467ed4398[Call#17])
  prom-           %125.3 = MkArg                    unboundValue, osr[0x55846845b430]_p3 (!refl), e1.0
  val?            %125.4 = Call               !v    function(x, partial=NULL, na.last=TRUE, decrea|...(%125.3) e1.0   <int->
  void                    StVar              lW    iOrd, %125.4, e1.0
  cp              %125.6 = Checkpoint                -> BB127 (default) | BB126 (if assume failed)
BB124   <- [123]
  fs              %124.0 = FrameState         R     0x55846b9b3aa0+2214: [], env=e1.0
  void                    Deopt              !v    %124.0   !
BB57   <- [55]
  void                    Assume             D     %55.2, %55.3 (Typecheck@0x558467ed4398[Type#35])
  int$-           %57.1 = CastType           d     dn %55.1
  lgl$#-          %57.2 = IsType                   %51.1 isA int-
  void                    Assume             D     %57.2, %55.3 (Typecheck@0x558467ed4398[Type#31])
  int-            %57.4 = CastType           d     dn %51.1
  int-            %57.5 = Extract1_1D        wed   %57.4, %57.1, elided   <int$->
  lgl$#-          %57.6 = IsType                   %57.5 isA int$-
  cp              %57.7 = Checkpoint                -> BB59 (default) | BB58 (if assume failed)
BB56   <- [55]
  fs              %56.0 = FrameState         R     0x55846b9b3aa0+925: [%51.1, %55.1], env=e1.0
  void                    Deopt              !v    %56.0   !
BB28   <- [27, 50]
  cp              %28.0 = Checkpoint                -> BB30 (default) | BB29 (if assume failed)
BB127   <- [125]
  val?^ | miss    %127.0 = LdVar              eR    agglo.FUN, e1.0
  lgl$#-          %127.1 = Identical                %127.0, <blt sum>
  void                    Assume             D     %127.1, %125.6 (CallTarget@0x558467ed4398[Call#18])
  val?^ | miss    %127.3 = LdVar              eR    vals, e1.0
  lgl$#-          %127.4 = IsType                   %127.3 isA real-
  void                    Assume             D     %127.4, %125.6 (Typecheck@0x558467ed4398[Type#103])
  real-           %127.6 = CastType           d     dn %127.3
  val             %127.7 = ChkMissing         e     %125.4
  real-           %127.8 = Extract1_1D        wed   %127.6, %125.4, e1.0   <real->
  real$-          %127.9 = CallSafeBuiltin    wed   sum(%127.8)    <real$->
  (cls|spec|blt)  %127.10 = LdFun              !v    attr<-, <0x558466cd3e08>, e1.0
  val?^ | miss    %127.11 = LdVar              eR    x, e1.0
  val?            %127.12 = Force!<value>      !v    %127.11, e1.0   <vec>
  val?            %127.13 = NamedCall          !v    %127.10(%127.12, "value", value=%127.9) e1.0   <vec>
  void                    StVar              lW    x, %127.13, e1.0
  lgl$#-          %127.15 = IsType                   %127.13 isA val+   <lgl$#->
  cp              %127.16 = Checkpoint                -> BB129 (default) | BB128 (if assume failed)
BB126   <- [125]
  fs              %126.0 = FrameState         R     0x55846b9b3aa0+2260: [], env=e1.0
  void                    Deopt              !v    %126.0   !
BB59   <- [57]
  void                    Assume             D     %57.6, %57.7 (Typecheck@0x558467ed4398[Type#36])
  int$-           %59.1 = CastType           d     dn %57.5
  (cls|spec|blt)  %59.2 = LdFun              !v    attr<-, <0x558466cd3e08>, e1.0
  val?^ | miss    %59.3 = LdVar              eR    x, e1.0
  val?            %59.4 = Force!<value>      !v    %59.3, e1.0   <int$>
  val?            %59.5 = NamedCall          !v    %59.2(%59.4, "value", value=%59.1) e1.0   <int$>
  void                    StVar              lW    x, %59.5, e1.0
  cp              %59.7 = Checkpoint                -> BB61 (default) | BB60 (if assume failed)
BB58   <- [57]
  fs              %58.0 = FrameState         R     0x55846b9b3aa0+932: [%57.5], env=e1.0
  void                    Deopt              !v    %58.0   !
BB30   <- [28]
  val?^ | miss    %30.0 = LdVar              eR    depth, e1.0
  lgl$#-          %30.1 = IsType                   %30.0 isA int$-
  void                    Assume             D     %30.1, %28.0 (Typecheck@0x558467ed4398[Type#9])
  int$-           %30.3 = CastType           d     dn %30.0
  int$-           %30.4 = Add                d     %30.3, 1L, elided   <int$->
  void                    StVar              lW    depth, %30.4, e1.0
  cp              %30.6 = Checkpoint                -> BB32 (default) | BB31 (if assume failed)
BB29   <- [28]
  fs              %29.0 = FrameState         R     0x55846b9b3aa0+371: [], env=e1.0
  void                    Deopt              !v    %29.0   !
BB129   <- [127]
  val             %129.0 = ChkMissing         e     %127.13
  void                    AssumeNot          D     %127.15, %127.16 (DeadBranchReached@0x558467ed4398[Test#16])
  prom-           %129.2 = MkArg                    unboundValue, osr[0x55846845b430]_p10, e1.0
  val?            %129.3 = Extract1_1D        !v    %127.13, %129.2, e1.0   <vec->
  val?^ | miss    %129.4 = LdVar              eR    x !upd, e1.0
  val?            %129.5 = Force!<value>      !v    %129.4, e1.0   <vec>
  val?            %129.6 = Subassign1_1D      !v    %129.3, %129.5, missingArg, e1.0
  void                    StVar              lW    x, %129.6, e1.0
  goto BB2
BB128   <- [127]
  fs              %128.0 = FrameState         R     0x55846b9b3aa0+2374: [], env=e1.0
  void                    Deopt              !v    %128.0   !
BB61   <- [59]
  val?^ | miss    %61.0 = LdVar              eR    depth, e1.0
  lgl$#-          %61.1 = IsType                   %61.0 isA int$-
  void                    Assume             D     %61.1, %59.7 (Typecheck@0x558467ed4398[Type#38])
  int$-           %61.3 = CastType           d     dn %61.0
  lgl$#-          %61.4 = CheckTrueFalse     e     %61.3   <lgl$#->
  void                    Assume             D     %61.4, %59.7 (DeadBranchReached@0x558467ed4398[Test#6])
  val             %61.6 = ChkMissing         e     %59.5
  void                    StVar              lW    b, %59.5, e1.0
  cp              %61.8 = Checkpoint                -> BB63 (default) | BB62 (if assume failed)
BB60   <- [59]
  fs              %60.0 = FrameState         R     0x55846b9b3aa0+1015: [], env=e1.0
  void                    Deopt              !v    %60.0   !
BB32   <- [30]
  val?^ | miss    %32.0 = LdVar              eR    k, e1.0
  lgl$#-          %32.1 = IsType                   %32.0 isA int$-
  void                    Assume             D     %32.1, %30.6 (Typecheck@0x558467ed4398[Type#11])
  int$-           %32.3 = CastType           d     dn %32.0
  val?^ | miss    %32.4 = LdVar              eR    kk !upd, e1.0
  lgl$#-          %32.5 = IsType                   %32.4 isA int-
  void                    Assume             D     %32.5, %30.6 (Typecheck@0x558467ed4398[Type#12])
  int-            %32.7 = CastType           d     dn %32.4
  int-            %32.8 = Subassign1_1D      wed   %32.3, %32.7, %30.4, elided
  void                    StVar              lW    kk, %32.8, e1.0
  cp              %32.10 = Checkpoint                -> BB34 (default) | BB33 (if assume failed)
BB31   <- [30]
  fs              %31.0 = FrameState         R     0x55846b9b3aa0+406: [], env=e1.0
  void                    Deopt              !v    %31.0   !
BB63   <- [61]
  val?^ | miss    %63.0 = LdVar              eR    xx, e1.0
  lgl$#-          %63.1 = IsType                   %63.0 isA val?~- | miss
  void                    Assume             D     %63.1, %61.8 (Typecheck@0x558467ed4398[Type#40])
  val?~- | miss   %63.3 = CastType           d     dn %63.0
  val?-           %63.4 = Force!<value>            %63.3,    <vec->
  lgl$#-          %63.5 = IsType                   %63.4 isA val+   <lgl$#->
  void                    Assume             D     %63.5, %61.8 (DeadBranchReached@0x558467ed4398[Test#7])
  val?            %63.7 = Extract2_1D        wed   %63.4, %61.3, elided   <vec>
  void                    StVar              lW    x, %63.7, e1.0
  cp              %63.9 = Checkpoint                -> BB65 (default) | BB64 (if assume failed)
BB62   <- [61]
  fs              %62.0 = FrameState         R     0x55846b9b3aa0+1063: [], env=e1.0
  void                    Deopt              !v    %62.0   !
BB34   <- [32]
  val?^ | miss    %34.0 = LdVar              eR    storage.mode, e1.0
  lgl$#-          %34.1 = Identical                %34.0, function(x) <(rir::DispatchTable*)0x558469780f|...
  void                    Assume             D     %34.1, %32.10 (CallTarget@0x558467ed4398[Call#5])
  prom-           %34.3 = MkArg                    unboundValue, osr[0x55846845b430]_p13, e1.0
  val?^           %34.4 = CastType                 up %34.3
  env             e34.5 = MkEnv              l     x=%34.4, parent=R_BaseNamespace, context 0
  val?^ | miss    %34.6 = LdVar              eR    typeof, e34.5
  lgl$#-          %34.7 = Identical                %34.6, function(x) <(rir::DispatchTable*)0x55846b51e9|...
  void                    Assume             D     %34.7, %32.10 (CallTarget@0x558467ed4e98[Call#0])
  val?            %34.9 = Force!<lazy>       !v    %34.4, e34.5   <int->
  str$-           %34.10 = CallSafeBuiltin    wed   typeof(%34.9)    <str$->
  int$-           %34.11 = Length                   %34.10
  void                    StVar              lW    tx, %34.10, e34.5
  cp              %34.13 = Checkpoint                -> BB36 (default) | BB35 (if assume failed)
BB33   <- [32]
  fs              %33.0 = FrameState         R     0x55846b9b3aa0+458: [], env=e1.0
  void                    Deopt              !v    %33.0   !
BB65   <- [63]
  val?^ | miss    %65.0 = LdVar              eR    jj, e1.0
  lgl$#-          %65.1 = IsType                   %65.0 isA int-
  void                    Assume             D     %65.1, %63.9 (Typecheck@0x558467ed4398[Type#44])
  int-            %65.3 = CastType           d     dn %65.0
  int-            %65.4 = Extract1_1D        wed   %65.3, %61.3, elided   <int$->
  lgl$#-          %65.5 = IsType                   %65.4 isA int$-
  cp              %65.6 = Checkpoint                -> BB67 (default) | BB66 (if assume failed)
BB64   <- [63]
  fs              %64.0 = FrameState         R     0x55846b9b3aa0+1138: [], env=e1.0
  void                    Deopt              !v    %64.0   !
BB36   <- [34]
  lgl$-           %36.0 = Eq                 d     %34.11, 1L, elided   <true>
  lgl$#-          %36.1 = Identical                %36.0, true
  void                    Assume             D     %36.1, %34.13 (DeadBranchReached@0x558467ed4e98[Test#1])
  lgl$-           %36.3 = CallSafeBuiltin    wed   is.na(%34.10) 
  cp              %36.4 = Checkpoint                -> BB38 (default) | BB37 (if assume failed)
BB35   <- [34]
  fs              %35.0 = FrameState         R     0x55846b9b3aa0+490: [], env=e1.0
  fs              %35.1 = FrameState         R     0x558467621800+48: [%34.10], env=e34.5, next=%35.0
  void                    Deopt              !v    %35.1   !
BB67   <- [65]
  void                    Assume             D     %65.5, %65.6 (Typecheck@0x558467ed4398[Type#47])
  int$-           %67.1 = CastType           d     dn %65.4
  void                    StVar              lW    j, %67.1, e1.0
  val             %67.3 = ChkMissing         e     %63.7
  val?            %67.4 = Subassign2_1D      !v    %59.5, %63.7, %67.1, e1.0
  void                    StVar              lW    x, %67.4, e1.0
  cp              %67.6 = Checkpoint                -> BB69 (default) | BB68 (if assume failed)
BB66   <- [65]
  fs              %66.0 = FrameState         R     0x55846b9b3aa0+1198: [%65.4], env=e1.0
  void                    Deopt              !v    %66.0   !
BB38   <- [36]
  lgl$#-          %38.0 = CheckTrueFalse     e     %36.3   <false>
  void                    AssumeNot          D     %38.0, %36.4 (DeadBranchReached@0x558467ed4e98[Test#8])
  lgl$-           %38.2 = Eq                 d     %34.10, closure, elided
  lgl$#-          %38.3 = CheckTrueFalse     e     %38.2   <false>
  void                    AssumeNot          D     %38.3, %36.4 (DeadBranchReached@0x558467ed4e98[Test#9])
  lgl$-           %38.5 = Eq                 d     %34.10, builtin, elided
  lgl$#-          %38.6 = CheckTrueFalse     e     %38.5   <false>
  void                    AssumeNot          D     %38.6, %36.4 (DeadBranchReached@0x558467ed4e98[Test#10])
  lgl$-           %38.8 = Eq                 d     %34.10, special, elided
  lgl$#-          %38.9 = CheckTrueFalse     e     %38.8   <false>
  void                    AssumeNot          D     %38.9, %36.4 (DeadBranchReached@0x558467ed4e98[Test#11])
  val?^ | miss    %38.11 = LdVar              eR    storage.mode, e1.0
  lgl$#-          %38.12 = Identical                %38.11, function(x) <(rir::DispatchTable*)0x558469780f|...
  void                    Assume             D     %38.12, %36.4 (CallTarget@0x558467ed4398[Call#6])
  prom-           %38.14 = MkArg                    unboundValue, osr[0x55846845b430]_p14, e1.0
  val?^           %38.15 = CastType                 up %38.14
  env             e38.16 = MkEnv              l     x=%38.15, parent=R_BaseNamespace, context 0
  val?^ | miss    %38.17 = LdVar              eR    typeof, e38.16
  lgl$#-          %38.18 = Identical                %38.17, function(x) <(rir::DispatchTable*)0x55846b51e9|...
  void                    Assume             D     %38.18, %36.4 (CallTarget@0x558467ed4e98[Call#0])
  val?            %38.20 = Force!<lazy>       !v    %38.15, e38.16   <int->
  str$-           %38.21 = CallSafeBuiltin    wed   typeof(%38.20)    <str$->
  int$-           %38.22 = Length                   %38.21
  void                    StVar              lW    tx, %38.21, e38.16
  cp              %38.24 = Checkpoint                -> BB40 (default) | BB39 (if assume failed)
BB37   <- [36]
  fs              %37.0 = FrameState         R     0x55846b9b3aa0+490: [], env=e1.0
  fs              %37.1 = FrameState         R     0x558467621800+269: [%34.10, %36.3], env=e34.5, next=%37.0
  void                    Deopt              !v    %37.1   !
BB69   <- [67]
  val?^ | miss    %69.0 = LdVar              eR    j, e1.0
  lgl$#-          %69.1 = IsType                   %69.0 isA int$-
  void                    Assume             D     %69.1, %67.6 (Typecheck@0x558467ed4398[Type#51])
  int$-           %69.3 = CastType           d     dn %69.0
  val?^ | miss    %69.4 = LdVar              eR    kk, e1.0
  lgl$#-          %69.5 = IsType                   %69.4 isA int-
  void                    Assume             D     %69.5, %67.6 (Typecheck@0x558467ed4398[Type#52])
  int-            %69.7 = CastType           d     dn %69.4
  val?^ | miss    %69.8 = LdVar              eR    depth, e1.0
  lgl$#-          %69.9 = IsType                   %69.8 isA int$-
  void                    Assume             D     %69.9, %67.6 (Typecheck@0x558467ed4398[Type#54])
  int$-           %69.11 = CastType           d     dn %69.8
  int-            %69.12 = Extract1_1D        wed   %69.7, %69.11, elided   <int$->
  lgl$#-          %69.13 = IsType                   %69.12 isA int$-
  cp              %69.14 = Checkpoint                -> BB71 (default) | BB70 (if assume failed)
BB68   <- [67]
  fs              %68.0 = FrameState         R     0x55846b9b3aa0+1265: [], env=e1.0
  void                    Deopt              !v    %68.0   !
BB40   <- [38]
  lgl$-           %40.0 = Eq                 d     %38.22, 1L, elided   <true>
  lgl$#-          %40.1 = Identical                %40.0, true
  void                    Assume             D     %40.1, %38.24 (DeadBranchReached@0x558467ed4e98[Test#1])
  lgl$-           %40.3 = CallSafeBuiltin    wed   is.na(%38.21) 
  cp              %40.4 = Checkpoint                -> BB42 (default) | BB41 (if assume failed)
BB39   <- [38]
  fs              %39.0 = FrameState         R     0x55846b9b3aa0+527: [%34.10], env=e1.0
  fs              %39.1 = FrameState         R     0x558467621800+48: [%38.21], env=e38.16, next=%39.0
  void                    Deopt              !v    %39.1   !
BB71   <- [69]
  void                    Assume             D     %69.13, %69.14 (Typecheck@0x558467ed4398[Type#55])
  int$-           %71.1 = CastType           d     dn %69.12
  lgl$-           %71.2 = Lt                 d     %69.3, %71.1, elided   <lgl$->
  lgl$#-          %71.3 = CheckTrueFalse     e     %71.2
  void                    Branch                   %71.3 -> BB95 (if true) | BB72 (if false)
BB70   <- [69]
  fs              %70.0 = FrameState         R     0x55846b9b3aa0+1339: [%69.3, %69.12], env=e1.0
  void                    Deopt              !v    %70.0   !
BB42   <- [40]
  lgl$#-          %42.0 = CheckTrueFalse     e     %40.3   <false>
  void                    AssumeNot          D     %42.0, %40.4 (DeadBranchReached@0x558467ed4e98[Test#8])
  lgl$-           %42.2 = Eq                 d     %38.21, closure, elided
  lgl$#-          %42.3 = CheckTrueFalse     e     %42.2   <false>
  void                    AssumeNot          D     %42.3, %40.4 (DeadBranchReached@0x558467ed4e98[Test#9])
  lgl$-           %42.5 = Eq                 d     %38.21, builtin, elided
  lgl$#-          %42.6 = CheckTrueFalse     e     %42.5   <false>
  void                    AssumeNot          D     %42.6, %40.4 (DeadBranchReached@0x558467ed4e98[Test#10])
  lgl$-           %42.8 = Eq                 d     %38.21, special, elided
  lgl$#-          %42.9 = CheckTrueFalse     e     %42.8   <false>
  void                    AssumeNot          D     %42.9, %40.4 (DeadBranchReached@0x558467ed4e98[Test#11])
  lgl$-           %42.11 = Neq                d     %34.10, %38.21, elided   <lgl$->
  lgl$#-          %42.12 = CheckTrueFalse     e     %42.11
  void                    Branch                   %42.12 -> BB49 (if true) | BB43 (if false)
BB41   <- [40]
  fs              %41.0 = FrameState         R     0x55846b9b3aa0+527: [%34.10], env=e1.0
  fs              %41.1 = FrameState         R     0x558467621800+269: [%38.21, %40.3], env=e38.16, next=%41.0
  void                    Deopt              !v    %41.1   !
BB95   <- [71]
  goto BB5
BB72   <- [71]
  int$-           %72.0 = Sub                d     %69.11, 1L, elided   <int$->
  void                    StVar              lW    depth, %72.0, e1.0
  cp              %72.2 = Checkpoint                -> BB74 (default) | BB73 (if assume failed)
BB49   <- [42]
  (cls|spec|blt)  %49.0 = LdFun              !v    storage.mode, e1.0
  prom-           %49.1 = MkArg                    unboundValue, osr[0x55846845b430]_p16, e1.0
  val?            %49.2 = Call               !v    %49.0(%49.1) e1.0   <val?_>
  (cls|spec|blt)  %49.3 = LdFun              !v    storage.mode<-, e1.0
  val?^ | miss    %49.4 = LdVar              eR    jj, e1.0
  val?            %49.5 = Force!             !v    %49.4, e1.0   <val?_>
  val?            %49.6 = NamedCall          !v    %49.3(%49.5, value=%49.2) e1.0
  void                    StVar              lW    jj, %49.6, e1.0
  goto BB44
BB43   <- [42]
  goto BB44
BB74   <- [72]
  val?^ | miss    %74.0 = LdVar              eR    vapply, e1.0
  lgl$#-          %74.1 = Identical                %74.0, function(X, FUN, FUN.VALUE, ..., USE.NAMES=TRU|...
  void                    Assume             D     %74.1, %72.2 (CallTarget@0x558467ed4398[Call#10])
  prom-           %74.3 = MkArg                    unboundValue, osr[0x55846845b430]_p19 (!refl), e1.0
  prom-           %74.4 = MkArg                    unboundValue, osr[0x55846845b430]_p20, e1.0
  prom-           %74.5 = MkArg                    unboundValue, osr[0x55846845b430]_p21, e1.0
  dots-           %74.6 = DotsList           l     which="value"
  ct              %74.7 = PushContext        lCL   %74.3, %74.4, %74.5, %74.6, vapply(x, attr, numeric(1L), which="value"), function(X, FUN, FUN.VALUE, ..., USE.NAMES=TRU|..., e1.0
  val?^           %74.8 = CastType                 up %74.5
  val?^           %74.9 = CastType                 up %74.4
  val?^           %74.10 = CastType                 up %74.3
  cp              %74.11 = Checkpoint                -> BB76 (default) | BB75 (if assume failed)
BB73   <- [72]
  fs              %73.0 = FrameState         R     0x55846b9b3aa0+1407: [], env=e1.0
  void                    Deopt              !v    %73.0   !
BB44   <- [43, 49]
  val?^ | miss    %44.0 = LdVar              eR    x, e1.0
  val?            %44.1 = Force!<wrapped>    !v    %44.0, e1.0   <vec>
  cp              %44.2 = Checkpoint                -> BB46 (default) | BB45 (if assume failed)
BB76   <- [74]
  env             e76.0 = MkEnv              l     X=%74.10, FUN=%74.9, FUN.VALUE=%74.8, ...=%74.6, USE.NAMES(miss)=true, parent=R_BaseNamespace, context 1
  val?^ | miss    %76.1 = LdVar              eR    match.fun, e76.0
  lgl$#-          %76.2 = Identical                %76.1, function(FUN, descend=TRUE) <(rir::DispatchTab|...
  void                    Assume             D     %76.2, %74.11 (CallTarget@0x55846af82080[Call#0])
  prom-           %76.4 = MkArg                    unboundValue, osr[0x55846845b430]_p41, e76.0
  val?            %76.5 = StaticCall         !v    match.fun[0x558467f33aa0](%76.4) e76.0   <(cls|blt)->
  void                    StVar              lW    FUN, %76.5, e76.0
  cp              %76.7 = Checkpoint                -> BB78 (default) | BB77 (if assume failed)
BB75   <- [74]
  fs              %75.0 = FrameState         R     0x55846b9b3aa0+1470: [], env=e1.0
  env             e75.1 = (MkEnv)            l     X=%74.10, FUN=%74.9, FUN.VALUE=%74.8, ...=%74.6, USE.NAMES(miss)=true, parent=R_BaseNamespace, context 1
  fs              %75.2 = FrameState         R     0x55846afea720+0: [], env=e75.1, next=%75.0
  void                    Deopt              !v    %75.2   !
BB46   <- [44]
  val?^ | miss    %46.0 = LdVar              eR    xx !upd, e1.0
  lgl$#-          %46.1 = IsType                   %46.0 isA val?~- | miss
  void                    Assume             D     %46.1, %44.2 (Typecheck@0x558467ed4398[Type#23])
  val?~- | miss   %46.3 = CastType           d     dn %46.0
  val?-           %46.4 = Force!<value>            %46.3,    <vec->
  val?^ | miss    %46.5 = LdVar              eR    depth, e1.0
  lgl$#-          %46.6 = IsType                   %46.5 isA int$-
  void                    Assume             D     %46.6, %44.2 (Typecheck@0x558467ed4398[Type#24])
  int$-           %46.8 = CastType           d     dn %46.5
  val?            %46.9 = Subassign2_1D      !v    %44.1, %46.4, %46.8, e1.0
  void                    StVar              lW    xx, %46.9, e1.0
  val?^ | miss    %46.11 = LdVar              eR    x, e1.0
  val?            %46.12 = Force!<wrapped>    !v    %46.11, e1.0   <vec>
  lgl$#-          %46.13 = IsType                   %46.12 isA val+   <lgl$#->
  cp              %46.14 = Checkpoint                -> BB48 (default) | BB47 (if assume failed)
BB45   <- [44]
  fs              %45.0 = FrameState         R     0x55846b9b3aa0+663: [%44.1], env=e1.0
  void                    Deopt              !v    %45.0   !
BB78   <- [76]
  val?^ | miss    %78.0 = LdVar              eR    is.vector, e76.0
  lgl$#-          %78.1 = Identical                %78.0, function(x, mode="any") <(rir::DispatchTable*)|...
  void                    Assume             D     %78.1, %76.7 (CallTarget@0x55846af82080[Call#1])
  val?^ | miss    %78.3 = LdVar              eR    X, e76.0
  val?            %78.4 = Force!<lazy>       !v    %78.3, e76.0   <vec>
  lgl$#-          %78.5 = CallSafeBuiltin    wed   is.vector(%78.4, "any")    <lgl$->
  cp              %78.6 = Checkpoint                -> BB80 (default) | BB79 (if assume failed)
BB77   <- [76]
  fs              %77.0 = FrameState         R     0x55846b9b3aa0+1470: [], env=e1.0
  fs              %77.1 = FrameState         R     0x55846afea720+46: [], env=e76.0, next=%77.0
  void                    Deopt              !v    %77.1   !
BB48   <- [46]
  void                    AssumeNot          D     %46.13, %46.14 (DeadBranchReached@0x558467ed4398[Test#2])
  prom-           %48.1 = MkArg                    unboundValue, osr[0x55846845b430]_p15, e1.0
  val?            %48.2 = Extract2_1D        !v    %46.12, %48.1, e1.0   <(int|vec)>
  void                    StVar              lW    x, %48.2, e1.0
  goto BB13
BB47   <- [46]
  fs              %47.0 = FrameState         R     0x55846b9b3aa0+715: [%46.12], env=e1.0
  void                    Deopt              !v    %47.0   !
BB80   <- [78]
  lgl$#-          %80.0 = Not                d     %78.5, elided
  void                    Branch                   %78.5 -> BB94 (if true) | BB81 (if false)
BB79   <- [78]
  fs              %79.0 = FrameState         R     0x55846b9b3aa0+1470: [], env=e1.0
  fs              %79.1 = FrameState         R     0x55846afea720+78: [], env=e76.0, next=%79.0
  prom-           %79.2 = MkArg                    %78.4, osr[0x55846845b430]_p42 (!refl), e76.0
  val?~           %79.3 = CastType                 up %79.2
  env             e79.4 = (MkEnv)            l     mode(miss)="any", x=%79.3, parent=R_BaseNamespace, context 0
  fs              %79.5 = FrameState         R     0x55846b1097d0+41: [%78.5], env=e79.4, next=%79.1
  void                    Deopt              !v    %79.5   !
BB94   <- [80]
  val?^ | miss    %94.0 = LdVar              eR    is.object, e76.0
  lgl$#-          %94.1 = Identical                <blt is.object>, %94.0   <true>
  void                    Assume             D     %94.1, %78.6 (DeadBranchReached@0x55846af82080[Test#0])
  val?^ | miss    %94.3 = LdVar              eR    X, e76.0
  val?            %94.4 = Force!<wrapped>    !v    %94.3, e76.0   <vec$->
  lgl$#-          %94.5 = CallSafeBuiltin    wed   is.object(%94.4)    <lgl$->
  lgl$-           %94.6 = LOr                      %80.0, %94.5
  goto BB82
BB81   <- [80]
  goto BB82
BB82   <- [81, 94]
  lgl$-           %82.0 = Phi                      %94.6:BB94, %80.0:BB81
  cp              %82.1 = Checkpoint                -> BB84 (default) | BB83 (if assume failed)
BB84   <- [82]
  lgl$#-          %84.0 = CheckTrueFalse     e     %82.0
  void                    Branch                   %84.0 -> BB93 (if true) | BB85 (if false)
BB83   <- [82]
  fs              %83.0 = FrameState         R     0x55846b9b3aa0+1470: [], env=e1.0
  fs              %83.1 = FrameState         R     0x55846afea720+189: [%82.0], env=e76.0, next=%83.0
  void                    Deopt              !v    %83.1   !
BB93   <- [84]
  val?^ | miss    %93.0 = LdVar              eR    as.list, e76.0
  lgl$#-          %93.1 = Identical                %93.0, function(x, ...) <(rir::DispatchTable*)0x55846|...
  void                    Assume             D     %93.1, %82.1 (CallTarget@0x55846af82080[Call#3])
  val?^ | miss    %93.3 = LdVar              eR    X, e76.0
  val?            %93.4 = Force!<wrapped>    !v    %93.3, e76.0   <vec>
  val?            %93.5 = StaticCall         !v    as.list[0x5584698d9c80](%93.4) { 0 } e76.0   <vec>
  void                    StVar              lW    X, %93.5, e76.0
  goto BB86
BB85   <- [84]
  goto BB86
BB86   <- [85, 93]
  (cls|spec|blt)  %86.0 = LdFun              !v    .Internal, <0x558466ccf698>, e76.0
  prom-           %86.1 = MkArg                    unboundValue, osr[0x55846845b430]_p43, e76.0
  val?            %86.2 = Call               !v    %86.0(%86.1) e76.0   <(lgl|real)->
  val?            %86.3 = PopContext         C     %86.2, %74.7   <real->
  void                    StVar              lW    vals, %86.3, e1.0
  cp              %86.5 = Checkpoint                -> BB88 (default) | BB87 (if assume failed)
BB88   <- [86]
  val?^ | miss    %88.0 = LdVar              eR    sort.list, e1.0
  lgl$#-          %88.1 = Identical                %88.0, function(x, partial=NULL, na.last=TRUE, decrea|...
  void                    Assume             D     %88.1, %86.5 (CallTarget@0x558467ed4398[Call#12])
  prom-           %88.3 = MkArg                    unboundValue, osr[0x55846845b430]_p22 (!refl), e1.0
  val?            %88.4 = Call               !v    function(x, partial=NULL, na.last=TRUE, decrea|...(%88.3) e1.0   <int->
  void                    StVar              lW    iOrd, %88.4, e1.0
  cp              %88.6 = Checkpoint                -> BB90 (default) | BB89 (if assume failed)
BB87   <- [86]
  fs              %87.0 = FrameState         R     0x55846b9b3aa0+1484: [], env=e1.0
  void                    Deopt              !v    %87.0   !
BB90   <- [88]
  val?^ | miss    %90.0 = LdVar              eR    agglo.FUN, e1.0
  lgl$#-          %90.1 = Identical                %90.0, <blt sum>
  void                    Assume             D     %90.1, %88.6 (CallTarget@0x558467ed4398[Call#13])
  val?^ | miss    %90.3 = LdVar              eR    vals, e1.0
  lgl$#-          %90.4 = IsType                   %90.3 isA real-
  void                    Assume             D     %90.4, %88.6 (Typecheck@0x558467ed4398[Type#65])
  real-           %90.6 = CastType           d     dn %90.3
  val             %90.7 = ChkMissing         e     %88.4
  real-           %90.8 = Extract1_1D        wed   %90.6, %88.4, e1.0   <real->
  real$-          %90.9 = CallSafeBuiltin    wed   sum(%90.8)    <real$->
  (cls|spec|blt)  %90.10 = LdFun              !v    attr<-, <0x558466cd3e08>, e1.0
  val?^ | miss    %90.11 = LdVar              eR    x, e1.0
  val?            %90.12 = Force!<value>      !v    %90.11, e1.0   <vec>
  val?            %90.13 = NamedCall          !v    %90.10(%90.12, "value", value=%90.9) e1.0   <vec>
  void                    StVar              lW    x, %90.13, e1.0
  lgl$#-          %90.15 = IsType                   %90.13 isA val+   <lgl$#->
  cp              %90.16 = Checkpoint                -> BB92 (default) | BB91 (if assume failed)
BB89   <- [88]
  fs              %89.0 = FrameState         R     0x55846b9b3aa0+1530: [], env=e1.0
  void                    Deopt              !v    %89.0   !
BB92   <- [90]
  val             %92.0 = ChkMissing         e     %90.13
  void                    AssumeNot          D     %90.15, %90.16 (DeadBranchReached@0x558467ed4398[Test#11])
  prom-           %92.2 = MkArg                    unboundValue, osr[0x55846845b430]_p29, e1.0
  val?            %92.3 = Extract1_1D        !v    %90.13, %92.2, e1.0   <vec->
  val?^ | miss    %92.4 = LdVar              eR    x !upd, e1.0
  val?            %92.5 = Force!<value>      !v    %92.4, e1.0   <vec>
  val?            %92.6 = Subassign1_1D      !v    %92.3, %92.5, missingArg, e1.0
  void                    StVar              lW    x, %92.6, e1.0
  goto BB2
BB91   <- [90]
  fs              %91.0 = FrameState         R     0x55846b9b3aa0+1644: [], env=e1.0
  void                    Deopt              !v    %91.0   !
Prom 0:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    x, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <vec>
  void                    Return             l     %1.3
Prom 1:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    attr, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <blt->
  void                    Return             l     %1.3
Prom 2:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     numeric, <0x55846b1935e0>, e1.0
  val?            %1.2  = Call               !     %1.1(1L) e1.0   <real$->
  void                    Return             l     %1.2
Prom 3:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    vals, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <real->
  void                    Return             l     %1.3
Prom 10:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    iOrd, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <int->
  void                    Return             l     %1.3
Prom 11:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    j, e1.0
  val?            %1.2  = Force<value>       !v    %1.1, e1.0   <int$->
  val?            %1.3  = Add                !v    %1.2, 1L, e1.0   <int$->
  val?^ | miss    %1.4  = LdVar              eR    jj !upd, e1.0
  val?            %1.5  = Force<value>       !v    %1.4, e1.0   <int->
  val?^ | miss    %1.6  = LdVar              eR    depth, e1.0
  val?            %1.7  = Force<value>       !v    %1.6, e1.0   <int$->
  val?            %1.8  = Subassign1_1D      !v    %1.3, %1.5, %1.7, e1.0
  void                    StVar              lW    jj, %1.8, e1.0
  void                    Invisible          v     
  void                    Return             l     %1.3
Prom 12:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    x, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <(int|vec)>
  void                    Return             l     %1.3
Prom 13:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    jj, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <int->
  void                    Return             l     %1.3
Prom 14:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    kk, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <int->
  void                    Return             l     %1.3
Prom 15:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    jj !upd, e1.0
  val?            %1.2  = Force<value>       !v    %1.1, e1.0   <int->
  val?^ | miss    %1.3  = LdVar              eR    depth, e1.0
  val?            %1.4  = Force<value>       !v    %1.3, e1.0   <int$->
  val?            %1.5  = Subassign1_1D      wed   1L, %1.2, %1.4, e1.0
  void                    StVar              lW    jj, %1.5, e1.0
  void                    Invisible          v     
  void                    Return             l     1L
Prom 16:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    kk, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 19:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    x, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <vec>
  void                    Return             l     %1.3
Prom 20:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    attr, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <blt->
  void                    Return             l     %1.3
Prom 21:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     numeric, <0x55846b1935e0>, e1.0
  val?            %1.2  = Call               !     %1.1(1L) e1.0   <real$->
  void                    Return             l     %1.2
Prom 22:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    vals, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <real->
  void                    Return             l     %1.3
Prom 29:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    iOrd, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <int->
  void                    Return             l     %1.3
Prom 31:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    FUN, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <(cls|blt)->
  void                    Return             l     %1.3
Prom 32:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    X, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <vec>
  void                    Return             l     %1.3
Prom 33:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     vapply, e1.0
  prom-           %1.2  = MkArg                    unboundValue, osr[0x55846845b430]_p34, e1.0
  prom-           %1.3  = MkArg                    unboundValue, osr[0x55846845b430]_p35, e1.0
  prom-           %1.4  = MkArg                    unboundValue, osr[0x55846845b430]_p36, e1.0
  prom-           %1.5  = MkArg                    unboundValue, osr[0x55846845b430]_p37, e1.0
  val?            %1.6  = Call               !     %1.1(%1.2, %1.3, %1.4, %1.5) e1.0   <val?_>
  void                    Return             l     %1.6
Prom 34:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    X, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 35:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    FUN, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 36:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    FUN.VALUE, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 37:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    USE.NAMES, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 41:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    FUN, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <(cls|blt)->
  void                    Return             l     %1.3
Prom 42:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    X, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <vec>
  void                    Return             l     %1.3
Prom 43:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     vapply, e1.0
  prom-           %1.2  = MkArg                    unboundValue, osr[0x55846845b430]_p44, e1.0
  prom-           %1.3  = MkArg                    unboundValue, osr[0x55846845b430]_p45, e1.0
  prom-           %1.4  = MkArg                    unboundValue, osr[0x55846845b430]_p46, e1.0
  prom-           %1.5  = MkArg                    unboundValue, osr[0x55846845b430]_p47, e1.0
  val?            %1.6  = Call               !     %1.1(%1.2, %1.3, %1.4, %1.5) e1.0   <val?_>
  void                    Return             l     %1.6
Prom 44:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    X, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 45:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    FUN, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 46:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    FUN.VALUE, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 47:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    USE.NAMES, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3

│ osr[0x55846845b430]                                                          │
└──────────────────────────────────────────────────────────────────────────────┘
