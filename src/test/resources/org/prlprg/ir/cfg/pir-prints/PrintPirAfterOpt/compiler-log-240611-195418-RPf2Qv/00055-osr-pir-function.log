
┌──────────────────────────────────────────────────────────────────────────────┐
│ osr[0x558468448d30]                                                          │
│ Context: CorrOrd,!TMany                                                      │
│ Properties:                                                                  │
├────── PIR Version After Optimizations
osr[0x558468448d30]
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  goto BB2
BB2   <- [1, 164, 73]
  cp              %2.0  = Checkpoint                -> BB3 (default) | BB175 (if assume failed)
BB3   <- [2]
  val?^ | miss    %3.0  = LdVar              eR    depth, e1.0
  lgl$#-          %3.1  = IsType                   %3.0 isA int$-
  void                    Assume             D     %3.1, %2.0 (Typecheck@0x558467ed49c8[Type#83])
  int$-           %3.3  = CastType           d     dn %3.0
  lgl$#-          %3.4  = CheckTrueFalse     e     %3.3
  void                    Branch                   %3.4 -> BB113 (if true) | BB4 (if false)
BB175   <- [2]
  fs              %175.0 = FrameState         R     0x558467c55970+1886: [], env=e1.0
  void                    Deopt              !v    %175.0   !
BB113   <- [3]
  val?^ | miss    %113.0 = LdVar              eR    kk, e1.0
  lgl$#-          %113.1 = IsType                   %113.0 isA int-
  void                    Assume             D     %113.1, %2.0 (Typecheck@0x558467ed49c8[Type#84])
  int-            %113.3 = CastType           d     dn %113.0
  int-            %113.4 = Extract1_1D        wed   %113.3, %3.3, elided   <int$->
  lgl$#-          %113.5 = IsType                   %113.4 isA int$-
  cp              %113.6 = Checkpoint                -> BB115 (default) | BB114 (if assume failed)
BB4   <- [3]
  goto BB5
BB115   <- [113]
  void                    Assume             D     %113.5, %113.6 (Typecheck@0x558467ed49c8[Type#87])
  int$-           %115.1 = CastType           d     dn %113.4
  void                    StVar              lW    k, %115.1, e1.0
  cp              %115.3 = Checkpoint                -> BB117 (default) | BB116 (if assume failed)
BB114   <- [113]
  fs              %114.0 = FrameState         R     0x558467c55970+1966: [%113.4], env=e1.0
  void                    Deopt              !v    %114.0   !
BB5   <- [174, 83, 4]
  cp              %5.0  = Checkpoint                -> BB7 (default) | BB6 (if assume failed)
BB117   <- [115]
  val?^ | miss    %117.0 = LdVar              eR    jj, e1.0
  lgl$#-          %117.1 = IsType                   %117.0 isA int-
  void                    Assume             D     %117.1, %115.3 (Typecheck@0x558467ed49c8[Type#88])
  int-            %117.3 = CastType           d     dn %117.0
  int-            %117.4 = Extract1_1D        wed   %117.3, %3.3, elided   <int$->
  lgl$#-          %117.5 = IsType                   %117.4 isA int$-
  cp              %117.6 = Checkpoint                -> BB119 (default) | BB118 (if assume failed)
BB116   <- [115]
  fs              %116.0 = FrameState         R     0x558467c55970+1981: [], env=e1.0
  void                    Deopt              !v    %116.0   !
BB7   <- [5]
  val?^ | miss    %7.0  = LdVar              eR    depth, e1.0
  lgl$#-          %7.1  = IsType                   %7.0 isA int$-
  void                    Assume             D     %7.1, %5.0 (Typecheck@0x558467ed49c8[Type#130])
  int$-           %7.3  = CastType           d     dn %7.0
  lgl$-           %7.4  = Not                d     %7.3, elided
  lgl$#-          %7.5  = CheckTrueFalse     e     %7.4
  void                    Branch                   %7.5 -> BB112 (if true) | BB8 (if false)
BB6   <- [5]
  fs              %6.0  = FrameState         R     0x558467c55970+2855: [], env=e1.0
  void                    Deopt              !v    %6.0   !
BB119   <- [117]
  void                    Assume             D     %117.5, %117.6 (Typecheck@0x558467ed49c8[Type#91])
  int$-           %119.1 = CastType           d     dn %117.4
  void                    StVar              lW    j, %119.1, e1.0
  cp              %119.3 = Checkpoint                -> BB121 (default) | BB120 (if assume failed)
BB118   <- [117]
  fs              %118.0 = FrameState         R     0x558467c55970+2041: [%117.4], env=e1.0
  void                    Deopt              !v    %118.0   !
BB112   <- [7]
  val?^ | miss    %112.0 = LdVar              eR    d, e1.0
  void                    Visible            v     
  val?            %112.2 = Force!<value>      !     %112.0, e1.0   <vec>
  void                    Return             l     %112.2
BB8   <- [7]
  val?^ | miss    %8.0  = LdVar              eR    r, e1.0
  val?            %8.1  = Force!<value>      !v    %8.0, e1.0   <vec>
  cp              %8.2  = Checkpoint                -> BB10 (default) | BB9 (if assume failed)
BB121   <- [119]
  val?^ | miss    %121.0 = LdVar              eR    dd, e1.0
  lgl$#-          %121.1 = IsType                   %121.0 isA val?~- | miss
  void                    Assume             D     %121.1, %119.3 (Typecheck@0x558467ed49c8[Type#92])
  val?~- | miss   %121.3 = CastType           d     dn %121.0
  val?-           %121.4 = Force!<value>            %121.3,    <vec->
  lgl$#-          %121.5 = IsType                   %121.4 isA val+   <lgl$#->
  void                    Assume             D     %121.5, %119.3 (DeadBranchReached@0x558467ed49c8[Test#12])
  val?            %121.7 = Extract2_1D        wed   %121.4, %3.3, elided   <vec>
  void                    StVar              lW    r, %121.7, e1.0
  cp              %121.9 = Checkpoint                -> BB123 (default) | BB122 (if assume failed)
BB120   <- [119]
  fs              %120.0 = FrameState         R     0x558467c55970+2056: [], env=e1.0
  void                    Deopt              !v    %120.0   !
BB10   <- [8]
  val?^ | miss    %10.0 = LdVar              eR    dd !upd, e1.0
  lgl$#-          %10.1 = IsType                   %10.0 isA val?~- | miss
  void                    Assume             D     %10.1, %8.2 (Typecheck@0x558467ed49c8[Type#132])
  val?~- | miss   %10.3 = CastType           d     dn %10.0
  val?-           %10.4 = Force!<value>            %10.3,    <vec->
  val?^ | miss    %10.5 = LdVar              eR    depth, e1.0
  lgl$#-          %10.6 = IsType                   %10.5 isA int$-
  void                    Assume             D     %10.6, %8.2 (Typecheck@0x558467ed49c8[Type#133])
  int$-           %10.8 = CastType           d     dn %10.5
  val?            %10.9 = Subassign2_1D      !v    %8.1, %10.4, %10.8, e1.0
  void                    StVar              lW    dd, %10.9, e1.0
  val?^ | miss    %10.11 = LdVar              eR    r, e1.0
  val?            %10.12 = Force!<value>      !v    %10.11, e1.0   <vec>
  lgl$#-          %10.13 = IsType                   %10.12 isA val+   <lgl$#->
  cp              %10.14 = Checkpoint                -> BB12 (default) | BB11 (if assume failed)
BB9   <- [8]
  fs              %9.0  = FrameState         R     0x558467c55970+2900: [%8.1], env=e1.0
  void                    Deopt              !v    %9.0   !
BB123   <- [121]
  val?^ | miss    %123.0 = LdVar              eR    unclass, e1.0
  lgl$#-          %123.1 = Identical                <blt unclass>, %123.0   <true>
  void                    Assume             D     %123.1, %121.9 (DeadBranchReached@0x558467ed49c8[Test#13])
  val?^ | miss    %123.3 = LdVar              eR    d, e1.0
  val?            %123.4 = Force!<value>      !v    %123.3, e1.0   <vec>
  val?            %123.5 = CallBuiltin        !v    unclass(%123.4) e1.0   <vec+>
  val?^ | miss    %123.6 = LdVar              eR    r !upd, e1.0
  val?            %123.7 = Force!<value>      !v    %123.6, e1.0   <vec>
  cp              %123.8 = Checkpoint                -> BB125 (default) | BB124 (if assume failed)
BB122   <- [121]
  fs              %122.0 = FrameState         R     0x558467c55970+2131: [], env=e1.0
  void                    Deopt              !v    %122.0   !
BB12   <- [10]
  void                    AssumeNot          D     %10.13, %10.14 (DeadBranchReached@0x558467ed49c8[Test#16])
  prom-           %12.1 = MkArg                    unboundValue, osr[0x558468448d30]_p4, e1.0
  val?            %12.2 = Extract2_1D        !v    %10.12, %12.1, e1.0   <(int|vec)>
  void                    StVar              lW    d, %12.2, e1.0
  goto BB13
BB11   <- [10]
  fs              %11.0 = FrameState         R     0x558467c55970+2952: [%10.12], env=e1.0
  void                    Deopt              !v    %11.0   !
BB125   <- [123]
  val?^ | miss    %125.0 = LdVar              eR    j, e1.0
  lgl$#-          %125.1 = IsType                   %125.0 isA int$-
  void                    Assume             D     %125.1, %123.8 (Typecheck@0x558467ed49c8[Type#100])
  int$-           %125.3 = CastType           d     dn %125.0
  val?            %125.4 = Subassign2_1D      !v    %123.5, %123.7, %125.3, e1.0
  void                    StVar              lW    r, %125.4, e1.0
  cp              %125.6 = Checkpoint                -> BB127 (default) | BB126 (if assume failed)
BB124   <- [123]
  fs              %124.0 = FrameState         R     0x558467c55970+2236: [%123.5, %123.7], env=e1.0
  void                    Deopt              !v    %124.0   !
BB13   <- [12, 107]
  cp              %13.0 = Checkpoint                -> BB15 (default) | BB14 (if assume failed)
BB127   <- [125]
  val?^ | miss    %127.0 = LdVar              eR    j, e1.0
  lgl$#-          %127.1 = IsType                   %127.0 isA int$-
  void                    Assume             D     %127.1, %125.6 (Typecheck@0x558467ed49c8[Type#101])
  int$-           %127.3 = CastType           d     dn %127.0
  val?^ | miss    %127.4 = LdVar              eR    k, e1.0
  lgl$#-          %127.5 = IsType                   %127.4 isA int$-
  void                    Assume             D     %127.5, %125.6 (Typecheck@0x558467ed49c8[Type#102])
  int$-           %127.7 = CastType           d     dn %127.4
  lgl$-           %127.8 = Lt                 d     %127.3, %127.7, elided   <lgl$->
  lgl$#-          %127.9 = CheckTrueFalse     e     %127.8
  void                    Branch                   %127.9 -> BB174 (if true) | BB128 (if false)
BB126   <- [125]
  fs              %126.0 = FrameState         R     0x558467c55970+2265: [], env=e1.0
  void                    Deopt              !v    %126.0   !
BB15   <- [13]
  val?^ | miss    %15.0 = LdVar              eR    is.leaf, e1.0
  lgl$#-          %15.1 = Identical                %15.0, function(object) <(rir::DispatchTable*)0x55846|...
  void                    Assume             D     %15.1, %13.0 (CallTarget@0x558467ed49c8[Call#3])
  prom-           %15.3 = MkArg                    unboundValue, osr[0x558468448d30]_p5 (!refl), e1.0
  ct              %15.4 = PushContext        lCL   %15.3, is.leaf(d), function(object) <(rir::DispatchTable*)0x55846|..., e1.0
  val?^           %15.5 = CastType                 up %15.3
  val?^ | miss    %15.6 = LdVar              eR    is.logical, <env 0x55846731fb50>
  lgl$#-          %15.7 = Identical                <blt is.logical>, %15.6   <true>
  cp              %15.8 = Checkpoint                -> BB17 (default) | BB16 (if assume failed)
BB14   <- [13]
  fs              %14.0 = FrameState         R     0x558467c55970+183: [], env=e1.0
  void                    Deopt              !v    %14.0   !
BB174   <- [127]
  goto BB5
BB128   <- [127]
  val?^ | miss    %128.0 = LdVar              eR    depth, e1.0
  lgl$#-          %128.1 = IsType                   %128.0 isA int$-
  void                    Assume             D     %128.1, %125.6 (Typecheck@0x558467ed49c8[Type#104])
  int$-           %128.3 = CastType           d     dn %128.0
  int$-           %128.4 = Sub                d     %128.3, 1L, elided   <int$->
  void                    StVar              lW    depth, %128.4, e1.0
  cp              %128.6 = Checkpoint                -> BB130 (default) | BB129 (if assume failed)
BB17   <- [15]
  void                    Assume             D     %15.7, %15.8 (DeadBranchReached@0x558467ed4b28[Test#0])
  val?^ | miss    %17.1 = LdVar              eR    attr, <env 0x55846731fb50>
  lgl$#-          %17.2 = Identical                <blt attr>, %17.1   <true>
  void                    Assume             D     %17.2, %15.8 (DeadBranchReached@0x558467ed4b28[Test#1])
  env             e17.4 = MkEnv              l     object=%15.5, parent=<env 0x55846731fb50>, context 1
  val?            %17.5 = Force!<lazy>       !vr   %15.5, e17.4   <(int|vec)>
  val?            %17.6 = CallBuiltin        !v    attr(%17.5, "leaf") e17.4   <(nil|lgl)->
  void                    StVar              lW    L, %17.6, e17.4
  val+            %17.8 = CallSafeBuiltin    wed   is.logical(%17.6)    <lgl$->
  lgl$#-          %17.9 = IsType                   %17.8 isA lgl$-
  cp              %17.10 = Checkpoint                -> BB19 (default) | BB18 (if assume failed)
BB16   <- [15]
  fs              %16.0 = FrameState         R     0x558467c55970+215: [], env=e1.0
  env             e16.1 = (MkEnv)            l     object=%15.5, parent=<env 0x55846731fb50>, context 1
  fs              %16.2 = FrameState         R     0x55846b624450+17: [<blt is.logical>, %15.7], env=e16.1, next=%16.0
  void                    Deopt              !v    %16.2   !
BB130   <- [128]
  val?^ | miss    %130.0 = LdVar              eR    verbose, e1.0
  lgl$#-          %130.1 = IsType                   %130.0 isA lgl$-
  void                    Assume             D     %130.1, %128.6 (Typecheck@0x558467ed49c8[Type#106])
  lgl$-           %130.3 = CastType           d     dn %130.0
  lgl$#-          %130.4 = CheckTrueFalse     e     %130.3
  void                    Branch                   %130.4 -> BB173 (if true) | BB131 (if false)
BB129   <- [128]
  fs              %129.0 = FrameState         R     0x558467c55970+2355: [], env=e1.0
  void                    Deopt              !v    %129.0   !
BB19   <- [17]
  void                    Assume             D     %17.9, %17.10 (Typecheck@0x558467ed4b28[Type#5])
  lgl$-           %19.1 = CastType           d     dn %17.8
  lgl$-           %19.2 = AsLogical                %19.1
  lgl$#-          %19.3 = Identical                %19.2, false
  void                    Branch                   %19.3 -> BB111 (if true) | BB20 (if false)
BB18   <- [17]
  fs              %18.0 = FrameState         R     0x558467c55970+215: [], env=e1.0
  fs              %18.1 = FrameState         R     0x55846b624450+195: [%17.8], env=e17.4, next=%18.0
  void                    Deopt              !v    %18.1   !
BB173   <- [130]
  (cls|spec|blt)  %173.0 = LdFun              !v    cat, e1.0
  fs              %173.1 = FrameState         R     0x558467c55970+2385: [%173.0], env=e1.0
  void                    Deopt              !v    %173.1, DeadCall@0x558467ed49c8[Call#22], %173.0   !
BB131   <- [130]
  val?^ | miss    %131.0 = LdVar              eR    sum, e1.0
  lgl$#-          %131.1 = Identical                <blt sum>, %131.0   <true>
  void                    Assume             D     %131.1, %128.6 (DeadBranchReached@0x558467ed49c8[Test#14])
  val?^ | miss    %131.3 = LdVar              eR    vapply, e1.0
  lgl$#-          %131.4 = Identical                %131.3, function(X, FUN, FUN.VALUE, ..., USE.NAMES=TRU|...
  void                    Assume             D     %131.4, %128.6 (CallTarget@0x558467ed49c8[Call#26])
  prom-           %131.6 = MkArg                    unboundValue, osr[0x558468448d30]_p0 (!refl), e1.0
  prom-           %131.7 = MkArg                    unboundValue, osr[0x558468448d30]_p1, e1.0
  ct              %131.8 = PushContext        lCL   %131.6, %131.7, 0, vapply(r, .midDend, 0), function(X, FUN, FUN.VALUE, ..., USE.NAMES=TRU|..., e1.0
  val?^           %131.9 = CastType                 up %131.7
  val?^           %131.10 = CastType                 up %131.6
  cp              %131.11 = Checkpoint                -> BB133 (default) | BB132 (if assume failed)
BB111   <- [19]
  goto BB21
BB20   <- [19]
  val             %20.0 = ChkMissing         e     %17.6
  lgl$-           %20.1 = AsLogical          e     %17.6
  lgl$-           %20.2 = LAnd                     %19.2, %20.1
  goto BB21
BB133   <- [131]
  env             e133.0 = MkEnv              l     X=%131.10, FUN=%131.9, FUN.VALUE=0, ...(miss)=missingArg, USE.NAMES(miss)=true, parent=R_BaseNamespace, context 1
  val?^ | miss    %133.1 = LdVar              eR    match.fun, e133.0
  lgl$#-          %133.2 = Identical                %133.1, function(FUN, descend=TRUE) <(rir::DispatchTab|...
  void                    Assume             D     %133.2, %131.11 (CallTarget@0x55846af82080[Call#0])
  prom-           %133.4 = MkArg                    unboundValue, osr[0x558468448d30]_p16, e133.0
  val?            %133.5 = StaticCall         !v    match.fun[0x558469ab74f0](%133.4) e133.0   <(cls|blt)->
  void                    StVar              lW    FUN, %133.5, e133.0
  cp              %133.7 = Checkpoint                -> BB135 (default) | BB134 (if assume failed)
BB132   <- [131]
  fs              %132.0 = FrameState         R     0x558467c55970+2515: [<blt sum>], env=e1.0
  env             e132.1 = (MkEnv)            l     X=%131.10, FUN=%131.9, FUN.VALUE=0, ...(miss)=missingArg, USE.NAMES(miss)=true, parent=R_BaseNamespace, context 1
  fs              %132.2 = FrameState         R     0x55846afea720+0: [], env=e132.1, next=%132.0
  void                    Deopt              !v    %132.2   !
BB21   <- [111, 20]
  lgl$-           %21.0 = Phi                      %20.2:BB20, %19.2:BB111
  val?            %21.1 = PopContext         C     %21.0, %15.4   <lgl$->
  lgl$#-          %21.2 = IsType                   %21.1 isA lgl$-
  cp              %21.3 = Checkpoint                -> BB23 (default) | BB22 (if assume failed)
BB135   <- [133]
  val?^ | miss    %135.0 = LdVar              eR    is.vector, e133.0
  lgl$#-          %135.1 = Identical                %135.0, function(x, mode="any") <(rir::DispatchTable*)|...
  void                    Assume             D     %135.1, %133.7 (CallTarget@0x55846af82080[Call#1])
  val?^ | miss    %135.3 = LdVar              eR    X, e133.0
  val?            %135.4 = Force!<lazy>       !v    %135.3, e133.0   <vec>
  lgl$#-          %135.5 = CallSafeBuiltin    wed   is.vector(%135.4, "any")    <lgl$->
  cp              %135.6 = Checkpoint                -> BB137 (default) | BB136 (if assume failed)
BB134   <- [133]
  fs              %134.0 = FrameState         R     0x558467c55970+2515: [<blt sum>], env=e1.0
  fs              %134.1 = FrameState         R     0x55846afea720+46: [], env=e133.0, next=%134.0
  void                    Deopt              !v    %134.1   !
BB23   <- [21]
  void                    Assume             D     %21.2, %21.3 (Typecheck@0x558467ed49c8[Type#4])
  lgl$-           %23.1 = CastType           d     dn %21.1
  lgl$-           %23.2 = Not                d     %23.1, elided
  lgl$#-          %23.3 = CheckTrueFalse     e     %23.2
  void                    Branch                   %23.3 -> BB84 (if true) | BB24 (if false)
BB22   <- [21]
  fs              %22.0 = FrameState         R     0x558467c55970+215: [%21.1], env=e1.0
  void                    Deopt              !v    %22.0   !
BB137   <- [135]
  lgl$#-          %137.0 = Not                d     %135.5, elided
  void                    Branch                   %135.5 -> BB172 (if true) | BB138 (if false)
BB136   <- [135]
  fs              %136.0 = FrameState         R     0x558467c55970+2515: [<blt sum>], env=e1.0
  fs              %136.1 = FrameState         R     0x55846afea720+78: [], env=e133.0, next=%136.0
  prom-           %136.2 = MkArg                    %135.4, osr[0x558468448d30]_p17 (!refl), e133.0
  val?~           %136.3 = CastType                 up %136.2
  env             e136.4 = (MkEnv)            l     mode(miss)="any", x=%136.3, parent=R_BaseNamespace, context 0
  fs              %136.5 = FrameState         R     0x55846b1097d0+41: [%135.5], env=e136.4, next=%136.1
  void                    Deopt              !v    %136.5   !
BB84   <- [23]
  val?^ | miss    %84.0 = LdVar              eR    length, e1.0
  lgl$#-          %84.1 = Identical                <blt length>, %84.0   <true>
  void                    Assume             D     %84.1, %21.3 (DeadBranchReached@0x558467ed49c8[Test#1])
  val?^ | miss    %84.3 = LdVar              eR    d, e1.0
  val?            %84.4 = Force!<wrapped>    !v    %84.3, e1.0   <vec>
  val?            %84.5 = CallBuiltin        !v    length(%84.4) e1.0   <int$->
  lgl$#-          %84.6 = IsType                   %84.5 isA int$-
  cp              %84.7 = Checkpoint                -> BB86 (default) | BB85 (if assume failed)
BB24   <- [23]
  val?^ | miss    %24.0 = LdVar              eR    depth, e1.0
  lgl$#-          %24.1 = IsType                   %24.0 isA int$-
  void                    Assume             D     %24.1, %21.3 (Typecheck@0x558467ed49c8[Type#36])
  int$-           %24.3 = CastType           d     dn %24.0
  lgl$#-          %24.4 = CheckTrueFalse     e     %24.3   <lgl$#->
  void                    Assume             D     %24.4, %21.3 (DeadBranchReached@0x558467ed49c8[Test#3])
  val?^ | miss    %24.6 = LdVar              eR    kk, e1.0
  lgl$#-          %24.7 = IsType                   %24.6 isA int-
  void                    Assume             D     %24.7, %21.3 (Typecheck@0x558467ed49c8[Type#37])
  int-            %24.9 = CastType           d     dn %24.6
  int-            %24.10 = Extract1_1D        wed   %24.9, %24.3, elided   <int$->
  lgl$#-          %24.11 = IsType                   %24.10 isA int$-
  cp              %24.12 = Checkpoint                -> BB26 (default) | BB25 (if assume failed)
BB172   <- [137]
  val?^ | miss    %172.0 = LdVar              eR    is.object, e133.0
  lgl$#-          %172.1 = Identical                <blt is.object>, %172.0   <true>
  void                    Assume             D     %172.1, %135.6 (DeadBranchReached@0x55846af82080[Test#0])
  val?^ | miss    %172.3 = LdVar              eR    X, e133.0
  val?            %172.4 = Force!<wrapped>    !v    %172.3, e133.0   <vec$->
  lgl$#-          %172.5 = CallSafeBuiltin    wed   is.object(%172.4)    <lgl$->
  lgl$-           %172.6 = LOr                      %137.0, %172.5
  goto BB139
BB138   <- [137]
  goto BB139
BB86   <- [84]
  void                    Assume             D     %84.6, %84.7 (Typecheck@0x558467ed49c8[Type#7])
  int$-           %86.1 = CastType           d     dn %84.5
  void                    StVar              lW    k, %86.1, e1.0
  cp              %86.3 = Checkpoint                -> BB88 (default) | BB87 (if assume failed)
BB85   <- [84]
  fs              %85.0 = FrameState         R     0x558467c55970+323: [%84.5], env=e1.0
  void                    Deopt              !v    %85.0   !
BB26   <- [24]
  void                    Assume             D     %24.11, %24.12 (Typecheck@0x558467ed49c8[Type#40])
  int$-           %26.1 = CastType           d     dn %24.10
  void                    StVar              lW    k, %26.1, e1.0
  cp              %26.3 = Checkpoint                -> BB28 (default) | BB27 (if assume failed)
BB25   <- [24]
  fs              %25.0 = FrameState         R     0x558467c55970+1002: [%24.10], env=e1.0
  void                    Deopt              !v    %25.0   !
BB139   <- [138, 172]
  lgl$-           %139.0 = Phi                      %172.6:BB172, %137.0:BB138
  cp              %139.1 = Checkpoint                -> BB141 (default) | BB140 (if assume failed)
BB88   <- [86]
  lgl$-           %88.0 = Lt                 d     %86.1, 1, elided   <lgl$->
  lgl$#-          %88.1 = CheckTrueFalse     e     %88.0
  void                    Branch                   %88.1 -> BB110 (if true) | BB89 (if false)
BB87   <- [86]
  fs              %87.0 = FrameState         R     0x558467c55970+337: [], env=e1.0
  void                    Deopt              !v    %87.0   !
BB28   <- [26]
  val?^ | miss    %28.0 = LdVar              eR    jj, e1.0
  lgl$#-          %28.1 = IsType                   %28.0 isA int-
  void                    Assume             D     %28.1, %26.3 (Typecheck@0x558467ed49c8[Type#41])
  int-            %28.3 = CastType           d     dn %28.0
  int-            %28.4 = Extract1_1D        wed   %28.3, %24.3, elided   <int$->
  lgl$#-          %28.5 = IsType                   %28.4 isA int$-
  cp              %28.6 = Checkpoint                -> BB30 (default) | BB29 (if assume failed)
BB27   <- [26]
  fs              %27.0 = FrameState         R     0x558467c55970+1017: [], env=e1.0
  void                    Deopt              !v    %27.0   !
BB141   <- [139]
  lgl$#-          %141.0 = CheckTrueFalse     e     %139.0
  void                    Branch                   %141.0 -> BB171 (if true) | BB142 (if false)
BB140   <- [139]
  fs              %140.0 = FrameState         R     0x558467c55970+2515: [<blt sum>], env=e1.0
  fs              %140.1 = FrameState         R     0x55846afea720+189: [%139.0], env=e133.0, next=%140.0
  void                    Deopt              !v    %140.1   !
BB110   <- [88]
  (cls|spec|blt)  %110.0 = LdFun              !v    stop, e1.0
  fs              %110.1 = FrameState         R     0x558467c55970+379: [%110.0], env=e1.0
  void                    Deopt              !v    %110.1, DeadCall@0x558467ed49c8[Call#5], %110.0   !
BB89   <- [88]
  val?^ | miss    %89.0 = LdVar              eR    depth, e1.0
  lgl$#-          %89.1 = IsType                   %89.0 isA int$-
  void                    Assume             D     %89.1, %86.3 (Typecheck@0x558467ed49c8[Type#10])
  int$-           %89.3 = CastType           d     dn %89.0
  int$-           %89.4 = Add                d     %89.3, 1L, elided   <int$->
  void                    StVar              lW    depth, %89.4, e1.0
  cp              %89.6 = Checkpoint                -> BB91 (default) | BB90 (if assume failed)
BB30   <- [28]
  void                    Assume             D     %28.5, %28.6 (Typecheck@0x558467ed49c8[Type#44])
  int$-           %30.1 = CastType           d     dn %28.4
  void                    StVar              lW    j, %30.1, e1.0
  cp              %30.3 = Checkpoint                -> BB32 (default) | BB31 (if assume failed)
BB29   <- [28]
  fs              %29.0 = FrameState         R     0x558467c55970+1077: [%28.4], env=e1.0
  void                    Deopt              !v    %29.0   !
BB171   <- [141]
  val?^ | miss    %171.0 = LdVar              eR    as.list, e133.0
  lgl$#-          %171.1 = Identical                %171.0, function(x, ...) <(rir::DispatchTable*)0x55846|...
  void                    Assume             D     %171.1, %139.1 (CallTarget@0x55846af82080[Call#3])
  val?^ | miss    %171.3 = LdVar              eR    X, e133.0
  val?            %171.4 = Force!<wrapped>    !v    %171.3, e133.0   <vec>
  val?            %171.5 = StaticCall         !v    as.list[0x55846bbba4c0](%171.4) { 0 } e133.0   <vec>
  void                    StVar              lW    X, %171.5, e133.0
  goto BB143
BB142   <- [141]
  goto BB143
BB91   <- [89]
  val?^ | miss    %91.0 = LdVar              eR    verbose, e1.0
  lgl$#-          %91.1 = IsType                   %91.0 isA lgl$-
  void                    Assume             D     %91.1, %89.6 (Typecheck@0x558467ed49c8[Type#12])
  lgl$-           %91.3 = CastType           d     dn %91.0
  lgl$#-          %91.4 = CheckTrueFalse     e     %91.3
  void                    Branch                   %91.4 -> BB109 (if true) | BB92 (if false)
BB90   <- [89]
  fs              %90.0 = FrameState         R     0x558467c55970+442: [], env=e1.0
  void                    Deopt              !v    %90.0   !
BB32   <- [30]
  val?^ | miss    %32.0 = LdVar              eR    dd, e1.0
  lgl$#-          %32.1 = IsType                   %32.0 isA val?~- | miss
  void                    Assume             D     %32.1, %30.3 (Typecheck@0x558467ed49c8[Type#45])
  val?~- | miss   %32.3 = CastType           d     dn %32.0
  val?-           %32.4 = Force!<value>            %32.3,    <vec->
  lgl$#-          %32.5 = IsType                   %32.4 isA val+   <lgl$#->
  void                    Assume             D     %32.5, %30.3 (DeadBranchReached@0x558467ed49c8[Test#6])
  val?            %32.7 = Extract2_1D        wed   %32.4, %24.3, elided   <vec>
  void                    StVar              lW    r, %32.7, e1.0
  cp              %32.9 = Checkpoint                -> BB34 (default) | BB33 (if assume failed)
BB31   <- [30]
  fs              %31.0 = FrameState         R     0x558467c55970+1092: [], env=e1.0
  void                    Deopt              !v    %31.0   !
BB143   <- [142, 171]
  (cls|spec|blt)  %143.0 = LdFun              !v    .Internal, <0x558466ccf698>, e133.0
  prom-           %143.1 = MkArg                    unboundValue, osr[0x558468448d30]_p18, e133.0
  val?            %143.2 = Call               !v    %143.0(%143.1) e133.0   <(lgl|real)->
  val?            %143.3 = PopContext         C     %143.2, %131.8   <real->
  lgl$#-          %143.4 = IsType                   %143.3 isA real-
  cp              %143.5 = Checkpoint                -> BB145 (default) | BB144 (if assume failed)
BB109   <- [91]
  (cls|spec|blt)  %109.0 = LdFun              !v    cat, e1.0
  fs              %109.1 = FrameState         R     0x558467c55970+472: [%109.0], env=e1.0
  void                    Deopt              !v    %109.1, DeadCall@0x558467ed49c8[Call#6], %109.0   !
BB92   <- [91]
  val?^ | miss    %92.0 = LdVar              eR    kk !upd, e1.0
  lgl$#-          %92.1 = IsType                   %92.0 isA int-
  void                    Assume             D     %92.1, %89.6 (Typecheck@0x558467ed49c8[Type#17])
  int-            %92.3 = CastType           d     dn %92.0
  int-            %92.4 = Subassign1_1D      wed   %86.1, %92.3, %89.4, elided
  void                    StVar              lW    kk, %92.4, e1.0
  cp              %92.6 = Checkpoint                -> BB94 (default) | BB93 (if assume failed)
BB34   <- [32]
  val?^ | miss    %34.0 = LdVar              eR    unclass, e1.0
  lgl$#-          %34.1 = Identical                <blt unclass>, %34.0   <true>
  void                    Assume             D     %34.1, %32.9 (DeadBranchReached@0x558467ed49c8[Test#7])
  val?^ | miss    %34.3 = LdVar              eR    d, e1.0
  val?            %34.4 = Force!<value>      !v    %34.3, e1.0   <int$>
  val?            %34.5 = CallBuiltin        !v    unclass(%34.4) e1.0   <int$+>
  val?^ | miss    %34.6 = LdVar              eR    r !upd, e1.0
  val?            %34.7 = Force!<value>      !v    %34.6, e1.0   <vec>
  cp              %34.8 = Checkpoint                -> BB36 (default) | BB35 (if assume failed)
BB33   <- [32]
  fs              %33.0 = FrameState         R     0x558467c55970+1167: [], env=e1.0
  void                    Deopt              !v    %33.0   !
BB145   <- [143]
  void                    Assume             D     %143.4, %143.5 (Typecheck@0x558467ed49c8[Type#115])
  real-           %145.1 = CastType           d     dn %143.3
  real$-          %145.2 = CallSafeBuiltin    wed   sum(%145.1)    <real$->
  void                    StVar              lW    midS, %145.2, e1.0
  val?^ | miss    %145.4 = LdVar              eR    quiet, e1.0
  val?            %145.5 = Force!<wrapped>    !v    %145.4, e1.0   <lgl$->
  lgl$#-          %145.6 = IsType                   %145.5 isA lgl$-
  cp              %145.7 = Checkpoint                -> BB147 (default) | BB146 (if assume failed)
BB144   <- [143]
  fs              %144.0 = FrameState         R     0x558467c55970+2515: [<blt sum>, %143.3], env=e1.0
  void                    Deopt              !v    %144.0   !
BB94   <- [92]
  val?^ | miss    %94.0 = LdVar              eR    storage.mode, e1.0
  lgl$#-          %94.1 = Identical                %94.0, function(x) <(rir::DispatchTable*)0x558469780f|...
  void                    Assume             D     %94.1, %92.6 (CallTarget@0x558467ed49c8[Call#8])
  prom-           %94.3 = MkArg                    unboundValue, osr[0x558468448d30]_p10, e1.0
  val?^           %94.4 = CastType                 up %94.3
  env             e94.5 = MkEnv              l     x=%94.4, parent=R_BaseNamespace, context 0
  val?^ | miss    %94.6 = LdVar              eR    typeof, e94.5
  lgl$#-          %94.7 = Identical                %94.6, function(x) <(rir::DispatchTable*)0x55846b51e9|...
  void                    Assume             D     %94.7, %92.6 (CallTarget@0x558467ed4e98[Call#0])
  val?            %94.9 = Force!<lazy>       !v    %94.4, e94.5   <int->
  str$-           %94.10 = CallSafeBuiltin    wed   typeof(%94.9)    <str$->
  int$-           %94.11 = Length                   %94.10
  void                    StVar              lW    tx, %94.10, e94.5
  cp              %94.13 = Checkpoint                -> BB96 (default) | BB95 (if assume failed)
BB93   <- [92]
  fs              %93.0 = FrameState         R     0x558467c55970+552: [], env=e1.0
  void                    Deopt              !v    %93.0   !
BB36   <- [34]
  val?^ | miss    %36.0 = LdVar              eR    j, e1.0
  lgl$#-          %36.1 = IsType                   %36.0 isA int$-
  void                    Assume             D     %36.1, %34.8 (Typecheck@0x558467ed49c8[Type#53])
  int$-           %36.3 = CastType           d     dn %36.0
  val?            %36.4 = Subassign2_1D      !v    %34.5, %34.7, %36.3, e1.0
  void                    StVar              lW    r, %36.4, e1.0
  cp              %36.6 = Checkpoint                -> BB38 (default) | BB37 (if assume failed)
BB35   <- [34]
  fs              %35.0 = FrameState         R     0x558467c55970+1272: [%34.5, %34.7], env=e1.0
  void                    Deopt              !v    %35.0   !
BB147   <- [145]
  void                    Assume             D     %145.6, %145.7 (Typecheck@0x558467ed49c8[Type#117])
  lgl$-           %147.1 = CastType           d     dn %145.5
  lgl$-           %147.2 = Not                d     %147.1, elided
  lgl$-           %147.3 = AsLogical                %147.2
  lgl$#-          %147.4 = Identical                %147.3, false
  void                    Branch                   %147.4 -> BB170 (if true) | BB148 (if false)
BB146   <- [145]
  fs              %146.0 = FrameState         R     0x558467c55970+2560: [%145.5], env=e1.0
  void                    Deopt              !v    %146.0   !
BB96   <- [94]
  lgl$-           %96.0 = Eq                 d     %94.11, 1L, elided   <true>
  lgl$#-          %96.1 = Identical                %96.0, true
  void                    Assume             D     %96.1, %94.13 (DeadBranchReached@0x558467ed4e98[Test#1])
  lgl$-           %96.3 = CallSafeBuiltin    wed   is.na(%94.10) 
  cp              %96.4 = Checkpoint                -> BB98 (default) | BB97 (if assume failed)
BB95   <- [94]
  fs              %95.0 = FrameState         R     0x558467c55970+584: [], env=e1.0
  fs              %95.1 = FrameState         R     0x558467621800+48: [%94.10], env=e94.5, next=%95.0
  void                    Deopt              !v    %95.1   !
BB38   <- [36]
  val?^ | miss    %38.0 = LdVar              eR    j, e1.0
  lgl$#-          %38.1 = IsType                   %38.0 isA int$-
  void                    Assume             D     %38.1, %36.6 (Typecheck@0x558467ed49c8[Type#54])
  int$-           %38.3 = CastType           d     dn %38.0
  val?^ | miss    %38.4 = LdVar              eR    k, e1.0
  lgl$#-          %38.5 = IsType                   %38.4 isA int$-
  void                    Assume             D     %38.5, %36.6 (Typecheck@0x558467ed49c8[Type#55])
  int$-           %38.7 = CastType           d     dn %38.4
  lgl$-           %38.8 = Lt                 d     %38.3, %38.7, elided   <lgl$->
  lgl$#-          %38.9 = CheckTrueFalse     e     %38.8
  void                    Branch                   %38.9 -> BB83 (if true) | BB39 (if false)
BB37   <- [36]
  fs              %37.0 = FrameState         R     0x558467c55970+1301: [], env=e1.0
  void                    Deopt              !v    %37.0   !
BB170   <- [147]
  goto BB153
BB148   <- [147]
  val?^ | miss    %148.0 = LdVar              eR    type, e1.0
  val?            %148.1 = Force!<wrapped>    !v    %148.0, e1.0   <str$->
  lgl$#-          %148.2 = IsType                   %148.1 isA val?-
  cp              %148.3 = Checkpoint                -> BB150 (default) | BB149 (if assume failed)
BB98   <- [96]
  lgl$#-          %98.0 = CheckTrueFalse     e     %96.3   <false>
  void                    AssumeNot          D     %98.0, %96.4 (DeadBranchReached@0x558467ed4e98[Test#8])
  lgl$-           %98.2 = Eq                 d     %94.10, closure, elided
  lgl$#-          %98.3 = CheckTrueFalse     e     %98.2   <false>
  void                    AssumeNot          D     %98.3, %96.4 (DeadBranchReached@0x558467ed4e98[Test#9])
  lgl$-           %98.5 = Eq                 d     %94.10, builtin, elided
  lgl$#-          %98.6 = CheckTrueFalse     e     %98.5   <false>
  void                    AssumeNot          D     %98.6, %96.4 (DeadBranchReached@0x558467ed4e98[Test#10])
  lgl$-           %98.8 = Eq                 d     %94.10, special, elided
  lgl$#-          %98.9 = CheckTrueFalse     e     %98.8   <false>
  void                    AssumeNot          D     %98.9, %96.4 (DeadBranchReached@0x558467ed4e98[Test#11])
  val?^ | miss    %98.11 = LdVar              eR    storage.mode, e1.0
  lgl$#-          %98.12 = Identical                %98.11, function(x) <(rir::DispatchTable*)0x558469780f|...
  void                    Assume             D     %98.12, %96.4 (CallTarget@0x558467ed49c8[Call#9])
  prom-           %98.14 = MkArg                    unboundValue, osr[0x558468448d30]_p11, e1.0
  val?^           %98.15 = CastType                 up %98.14
  env             e98.16 = MkEnv              l     x=%98.15, parent=R_BaseNamespace, context 0
  val?^ | miss    %98.17 = LdVar              eR    typeof, e98.16
  lgl$#-          %98.18 = Identical                %98.17, function(x) <(rir::DispatchTable*)0x55846b51e9|...
  void                    Assume             D     %98.18, %96.4 (CallTarget@0x558467ed4e98[Call#0])
  val?            %98.20 = Force!<lazy>       !v    %98.15, e98.16   <int->
  str$-           %98.21 = CallSafeBuiltin    wed   typeof(%98.20)    <str$->
  int$-           %98.22 = Length                   %98.21
  void                    StVar              lW    tx, %98.21, e98.16
  cp              %98.24 = Checkpoint                -> BB100 (default) | BB99 (if assume failed)
BB97   <- [96]
  fs              %97.0 = FrameState         R     0x558467c55970+584: [], env=e1.0
  fs              %97.1 = FrameState         R     0x558467621800+269: [%94.10, %96.3], env=e94.5, next=%97.0
  void                    Deopt              !v    %97.1   !
BB83   <- [38]
  goto BB5
BB39   <- [38]
  val?^ | miss    %39.0 = LdVar              eR    depth, e1.0
  lgl$#-          %39.1 = IsType                   %39.0 isA int$-
  void                    Assume             D     %39.1, %36.6 (Typecheck@0x558467ed49c8[Type#57])
  int$-           %39.3 = CastType           d     dn %39.0
  int$-           %39.4 = Sub                d     %39.3, 1L, elided   <int$->
  void                    StVar              lW    depth, %39.4, e1.0
  cp              %39.6 = Checkpoint                -> BB41 (default) | BB40 (if assume failed)
BB153   <- [152, 170]
  lgl$-           %153.0 = Phi                      %152.3:BB152, %147.3:BB170
  lgl$-           %153.1 = AsLogical                %153.0
  lgl$#-          %153.2 = Identical                %153.1, false
  cp              %153.3 = Checkpoint                -> BB155 (default) | BB154 (if assume failed)
BB150   <- [148]
  void                    Assume             D     %148.2, %148.3 (Typecheck@0x558467ed49c8[Type#118])
  val?-           %150.1 = CastType           d     dn %148.1   <str$->
  lgl-            %150.2 = Eq                 wed   %150.1, "hclust", elided   <lgl$->
  lgl$#-          %150.3 = IsType                   %150.2 isA lgl$-
  cp              %150.4 = Checkpoint                -> BB152 (default) | BB151 (if assume failed)
BB149   <- [148]
  fs              %149.0 = FrameState         R     0x558467c55970+2582: [%147.3, %148.1], env=e1.0
  void                    Deopt              !v    %149.0   !
BB100   <- [98]
  lgl$-           %100.0 = Eq                 d     %98.22, 1L, elided   <true>
  lgl$#-          %100.1 = Identical                %100.0, true
  void                    Assume             D     %100.1, %98.24 (DeadBranchReached@0x558467ed4e98[Test#1])
  lgl$-           %100.3 = CallSafeBuiltin    wed   is.na(%98.21) 
  cp              %100.4 = Checkpoint                -> BB102 (default) | BB101 (if assume failed)
BB99   <- [98]
  fs              %99.0 = FrameState         R     0x558467c55970+621: [%94.10], env=e1.0
  fs              %99.1 = FrameState         R     0x558467621800+48: [%98.21], env=e98.16, next=%99.0
  void                    Deopt              !v    %99.1   !
BB41   <- [39]
  val?^ | miss    %41.0 = LdVar              eR    verbose, e1.0
  lgl$#-          %41.1 = IsType                   %41.0 isA lgl$-
  void                    Assume             D     %41.1, %39.6 (Typecheck@0x558467ed49c8[Type#59])
  lgl$-           %41.3 = CastType           d     dn %41.0
  lgl$#-          %41.4 = CheckTrueFalse     e     %41.3
  void                    Branch                   %41.4 -> BB82 (if true) | BB42 (if false)
BB40   <- [39]
  fs              %40.0 = FrameState         R     0x558467c55970+1391: [], env=e1.0
  void                    Deopt              !v    %40.0   !
BB155   <- [153]
  void                    Branch                   %153.2 -> BB169 (if true) | BB156 (if false)
BB154   <- [153]
  fs              %154.0 = FrameState         R     0x558467c55970+2601: [%153.0], env=e1.0
  void                    Deopt              !v    %154.0   !
BB152   <- [150]
  void                    Assume             D     %150.3, %150.4 (Typecheck@0x558467ed49c8[Type#119])
  lgl$-           %152.1 = CastType           d     dn %150.2
  lgl$-           %152.2 = AsLogical                %152.1
  lgl$-           %152.3 = LAnd                     %147.3, %152.2
  goto BB153
BB151   <- [150]
  fs              %151.0 = FrameState         R     0x558467c55970+2594: [%147.3, %150.2], env=e1.0
  void                    Deopt              !v    %151.0   !
BB102   <- [100]
  lgl$#-          %102.0 = CheckTrueFalse     e     %100.3   <false>
  void                    AssumeNot          D     %102.0, %100.4 (DeadBranchReached@0x558467ed4e98[Test#8])
  lgl$-           %102.2 = Eq                 d     %98.21, closure, elided
  lgl$#-          %102.3 = CheckTrueFalse     e     %102.2   <false>
  void                    AssumeNot          D     %102.3, %100.4 (DeadBranchReached@0x558467ed4e98[Test#9])
  lgl$-           %102.5 = Eq                 d     %98.21, builtin, elided
  lgl$#-          %102.6 = CheckTrueFalse     e     %102.5   <false>
  void                    AssumeNot          D     %102.6, %100.4 (DeadBranchReached@0x558467ed4e98[Test#10])
  lgl$-           %102.8 = Eq                 d     %98.21, special, elided
  lgl$#-          %102.9 = CheckTrueFalse     e     %102.8   <false>
  void                    AssumeNot          D     %102.9, %100.4 (DeadBranchReached@0x558467ed4e98[Test#11])
  lgl$-           %102.11 = Neq                d     %94.10, %98.21, elided   <lgl$->
  lgl$#-          %102.12 = CheckTrueFalse     e     %102.11
  void                    Branch                   %102.12 -> BB108 (if true) | BB103 (if false)
BB101   <- [100]
  fs              %101.0 = FrameState         R     0x558467c55970+621: [%94.10], env=e1.0
  fs              %101.1 = FrameState         R     0x558467621800+269: [%98.21, %100.3], env=e98.16, next=%101.0
  void                    Deopt              !v    %101.1   !
BB82   <- [41]
  (cls|spec|blt)  %82.0 = LdFun              !v    cat, e1.0
  fs              %82.1 = FrameState         R     0x558467c55970+1421: [%82.0], env=e1.0
  void                    Deopt              !v    %82.1, DeadCall@0x558467ed49c8[Call#13], %82.0   !
BB42   <- [41]
  val?^ | miss    %42.0 = LdVar              eR    sum, e1.0
  lgl$#-          %42.1 = Identical                <blt sum>, %42.0   <true>
  void                    Assume             D     %42.1, %39.6 (DeadBranchReached@0x558467ed49c8[Test#8])
  val?^ | miss    %42.3 = LdVar              eR    vapply, e1.0
  lgl$#-          %42.4 = Identical                %42.3, function(X, FUN, FUN.VALUE, ..., USE.NAMES=TRU|...
  void                    Assume             D     %42.4, %39.6 (CallTarget@0x558467ed49c8[Call#17])
  prom-           %42.6 = MkArg                    unboundValue, osr[0x558468448d30]_p6 (!refl), e1.0
  prom-           %42.7 = MkArg                    unboundValue, osr[0x558468448d30]_p7, e1.0
  ct              %42.8 = PushContext        lCL   %42.6, %42.7, 0, vapply(r, .midDend, 0), function(X, FUN, FUN.VALUE, ..., USE.NAMES=TRU|..., e1.0
  val?^           %42.9 = CastType                 up %42.7
  val?^           %42.10 = CastType                 up %42.6
  cp              %42.11 = Checkpoint                -> BB44 (default) | BB43 (if assume failed)
BB169   <- [155]
  goto BB157
BB156   <- [155]
  val?^ | miss    %156.0 = LdVar              eR    k, e1.0
  lgl$#-          %156.1 = IsType                   %156.0 isA int$-
  void                    Assume             D     %156.1, %153.3 (Typecheck@0x558467ed49c8[Type#120])
  int$-           %156.3 = CastType           d     dn %156.0
  lgl$-           %156.4 = Neq                d     %156.3, 2, elided   <lgl$->
  lgl$-           %156.5 = AsLogical                %156.4
  lgl$-           %156.6 = LAnd                     %153.1, %156.5
  goto BB157
BB108   <- [102]
  (cls|spec|blt)  %108.0 = LdFun              !v    storage.mode, e1.0
  fs              %108.1 = FrameState         R     0x558467c55970+648: [%108.0], env=e1.0
  void                    Deopt              !v    %108.1, DeadCall@0x558467ed49c8[Call#10], %108.0   !
BB103   <- [102]
  val?^ | miss    %103.0 = LdVar              eR    d, e1.0
  val?            %103.1 = Force!<wrapped>    !v    %103.0, e1.0   <vec>
  cp              %103.2 = Checkpoint                -> BB105 (default) | BB104 (if assume failed)
BB44   <- [42]
  env             e44.0 = MkEnv              l     X=%42.10, FUN=%42.9, FUN.VALUE=0, ...(miss)=missingArg, USE.NAMES(miss)=true, parent=R_BaseNamespace, context 1
  val?^ | miss    %44.1 = LdVar              eR    match.fun, e44.0
  lgl$#-          %44.2 = Identical                %44.1, function(FUN, descend=TRUE) <(rir::DispatchTab|...
  void                    Assume             D     %44.2, %42.11 (CallTarget@0x55846af82080[Call#0])
  prom-           %44.4 = MkArg                    unboundValue, osr[0x558468448d30]_p29, e44.0
  val?            %44.5 = StaticCall         !v    match.fun[0x558469ab74f0](%44.4) e44.0   <(cls|blt)->
  void                    StVar              lW    FUN, %44.5, e44.0
  cp              %44.7 = Checkpoint                -> BB46 (default) | BB45 (if assume failed)
BB43   <- [42]
  fs              %43.0 = FrameState         R     0x558467c55970+1551: [<blt sum>], env=e1.0
  env             e43.1 = (MkEnv)            l     X=%42.10, FUN=%42.9, FUN.VALUE=0, ...(miss)=missingArg, USE.NAMES(miss)=true, parent=R_BaseNamespace, context 1
  fs              %43.2 = FrameState         R     0x55846afea720+0: [], env=e43.1, next=%43.0
  void                    Deopt              !v    %43.2   !
BB157   <- [169, 156]
  lgl$-           %157.0 = Phi                      %156.6:BB156, %153.1:BB169
  cp              %157.1 = Checkpoint                -> BB159 (default) | BB158 (if assume failed)
BB105   <- [103]
  val?^ | miss    %105.0 = LdVar              eR    dd !upd, e1.0
  lgl$#-          %105.1 = IsType                   %105.0 isA val?~- | miss
  void                    Assume             D     %105.1, %103.2 (Typecheck@0x558467ed49c8[Type#28])
  val?~- | miss   %105.3 = CastType           d     dn %105.0
  val?-           %105.4 = Force!<value>            %105.3,    <vec->
  val?^ | miss    %105.5 = LdVar              eR    depth, e1.0
  lgl$#-          %105.6 = IsType                   %105.5 isA int$-
  void                    Assume             D     %105.6, %103.2 (Typecheck@0x558467ed49c8[Type#29])
  int$-           %105.8 = CastType           d     dn %105.5
  val?            %105.9 = Subassign2_1D      !v    %103.1, %105.4, %105.8, e1.0
  void                    StVar              lW    dd, %105.9, e1.0
  val?^ | miss    %105.11 = LdVar              eR    d, e1.0
  val?            %105.12 = Force!<wrapped>    !v    %105.11, e1.0   <vec>
  lgl$#-          %105.13 = IsType                   %105.12 isA val+   <lgl$#->
  cp              %105.14 = Checkpoint                -> BB107 (default) | BB106 (if assume failed)
BB104   <- [103]
  fs              %104.0 = FrameState         R     0x558467c55970+757: [%103.1], env=e1.0
  void                    Deopt              !v    %104.0   !
BB46   <- [44]
  val?^ | miss    %46.0 = LdVar              eR    is.vector, e44.0
  lgl$#-          %46.1 = Identical                %46.0, function(x, mode="any") <(rir::DispatchTable*)|...
  void                    Assume             D     %46.1, %44.7 (CallTarget@0x55846af82080[Call#1])
  val?^ | miss    %46.3 = LdVar              eR    X, e44.0
  val?            %46.4 = Force!<lazy>       !v    %46.3, e44.0   <vec>
  lgl$#-          %46.5 = CallSafeBuiltin    wed   is.vector(%46.4, "any")    <lgl$->
  cp              %46.6 = Checkpoint                -> BB48 (default) | BB47 (if assume failed)
BB45   <- [44]
  fs              %45.0 = FrameState         R     0x558467c55970+1551: [<blt sum>], env=e1.0
  fs              %45.1 = FrameState         R     0x55846afea720+46: [], env=e44.0, next=%45.0
  void                    Deopt              !v    %45.1   !
BB159   <- [157]
  lgl$#-          %159.0 = CheckTrueFalse     e     %157.0
  void                    Branch                   %159.0 -> BB168 (if true) | BB160 (if false)
BB158   <- [157]
  fs              %158.0 = FrameState         R     0x558467c55970+2636: [%157.0], env=e1.0
  void                    Deopt              !v    %158.0   !
BB107   <- [105]
  void                    AssumeNot          D     %105.13, %105.14 (DeadBranchReached@0x558467ed49c8[Test#2])
  prom-           %107.1 = MkArg                    unboundValue, osr[0x558468448d30]_p12, e1.0
  val?            %107.2 = Extract2_1D        !v    %105.12, %107.1, e1.0   <(int|vec)>
  void                    StVar              lW    d, %107.2, e1.0
  goto BB13
BB106   <- [105]
  fs              %106.0 = FrameState         R     0x558467c55970+809: [%105.12], env=e1.0
  void                    Deopt              !v    %106.0   !
BB48   <- [46]
  lgl$#-          %48.0 = Not                d     %46.5, elided
  void                    Branch                   %46.5 -> BB81 (if true) | BB49 (if false)
BB47   <- [46]
  fs              %47.0 = FrameState         R     0x558467c55970+1551: [<blt sum>], env=e1.0
  fs              %47.1 = FrameState         R     0x55846afea720+78: [], env=e44.0, next=%47.0
  prom-           %47.2 = MkArg                    %46.4, osr[0x558468448d30]_p30 (!refl), e44.0
  val?~           %47.3 = CastType                 up %47.2
  env             e47.4 = (MkEnv)            l     mode(miss)="any", x=%47.3, parent=R_BaseNamespace, context 0
  fs              %47.5 = FrameState         R     0x55846b1097d0+41: [%46.5], env=e47.4, next=%47.1
  void                    Deopt              !v    %47.5   !
BB168   <- [159]
  (cls|spec|blt)  %168.0 = LdFun              !v    warning, e1.0
  fs              %168.1 = FrameState         R     0x558467c55970+2652: [%168.0], env=e1.0
  void                    Deopt              !v    %168.1, DeadCall@0x558467ed49c8[Call#27], %168.0   !
BB160   <- [159]
  val?^ | miss    %160.0 = LdVar              eR    .memberDend, e1.0
  lgl$#-          %160.1 = Identical                %160.0, function(x) <(rir::DispatchTable*)0x55846762ec|...
  void                    Assume             D     %160.1, %157.1 (CallTarget@0x558467ed49c8[Call#28])
  prom-           %160.3 = MkArg                    unboundValue, osr[0x558468448d30]_p2, e1.0
  val?^           %160.4 = CastType                 up %160.3
  env             e160.5 = MkEnv              l     x=%160.4, parent=<env 0x55846731fb50>, context 0
  val?^ | miss    %160.6 = LdVar              eR    %||%, e160.5
  lgl$#-          %160.7 = Identical                %160.6, function(L, R) <(rir::DispatchTable*)0x5584670|...
  void                    Assume             D     %160.7, %157.1 (CallTarget@0x55846b7a66e8[Call#0])
  prom-           %160.9 = MkArg                    unboundValue, osr[0x558468448d30]_p25, e160.5
  val?^           %160.10 = CastType                 up %160.9
  val?^ | miss    %160.11 = LdVar              eR    attr, e160.5
  lgl$#-          %160.12 = Identical                %160.11, <blt attr>
  void                    Assume             D     %160.12, %157.1 (CallTarget@0x55846b7a66e8[Call#1])
  val?            %160.14 = Force!<lazy>       !v    %160.4, e160.5   <int$->
  val?            %160.15 = CallBuiltin        !v    attr(%160.14, "x.member") e160.5   <nil->
  lgl$-           %160.16 = Is                       %160.15, NULL
  prom-           %160.17 = MkArg                    %160.15, osr[0x558468448d30]_p23 (!refl), e160.5
  val?~           %160.18 = CastType                 up %160.17
  lgl$#-          %160.19 = CheckTrueFalse     e     %160.16
  env             e160.20 = (MkEnv)            l     L=%160.18, R=%160.10, parent=<env 0x55846731fb50>, context -1
  void                    Branch                   %160.19 -> BB165 (if true) | BB161 (if false)
BB81   <- [48]
  val?^ | miss    %81.0 = LdVar              eR    is.object, e44.0
  lgl$#-          %81.1 = Identical                <blt is.object>, %81.0   <true>
  void                    Assume             D     %81.1, %46.6 (DeadBranchReached@0x55846af82080[Test#0])
  val?^ | miss    %81.3 = LdVar              eR    X, e44.0
  val?            %81.4 = Force!<wrapped>    !v    %81.3, e44.0   <vec$->
  lgl$#-          %81.5 = CallSafeBuiltin    wed   is.object(%81.4)    <lgl$->
  lgl$-           %81.6 = LOr                      %48.0, %81.5
  goto BB50
BB49   <- [48]
  goto BB50
BB165   <- [160]
  val?            %165.0 = Force!<lazy>       !vL   %160.10, e160.20   <(int|real)$->
  cp              %165.1 = Checkpoint                -> BB167 (default) | BB166 (if assume failed)
BB161   <- [160]
  goto BB162
BB50   <- [49, 81]
  lgl$-           %50.0 = Phi                      %81.6:BB81, %48.0:BB49
  cp              %50.1 = Checkpoint                -> BB52 (default) | BB51 (if assume failed)
BB167   <- [165]
  lgl$#-          %167.0 = IsEnvStub          R     , e160.20
  void                    Assume             D     %167.0, %165.1 (EnvStubMaterialized@0x55846b7a6848[Call#unknown])
  goto BB162
BB166   <- [165]
  fs              %166.0 = FrameState         R     0x558467c55970+2712: [], env=e1.0
  fs              %166.1 = FrameState         R     0x55846762eb70+37: [], env=e160.5, next=%166.0
  fs              %166.2 = FrameState         R     0x5584670b9890+53: [%165.0], env=e160.20, next=%166.1
  void                    Deopt              !v    %166.2   !
BB162   <- [167, 161]
  val?            %162.0 = Phi                      %160.15:BB161, %165.0:BB167   <int$->
  lgl$#-          %162.1 = IsType                   %162.0 isA int$-
  cp              %162.2 = Checkpoint                -> BB164 (default) | BB163 (if assume failed)
BB52   <- [50]
  lgl$#-          %52.0 = CheckTrueFalse     e     %50.0
  void                    Branch                   %52.0 -> BB80 (if true) | BB53 (if false)
BB51   <- [50]
  fs              %51.0 = FrameState         R     0x558467c55970+1551: [<blt sum>], env=e1.0
  fs              %51.1 = FrameState         R     0x55846afea720+189: [%50.0], env=e44.0, next=%51.0
  void                    Deopt              !v    %51.1   !
BB164   <- [162]
  void                    Assume             D     %162.1, %162.2 (Typecheck@0x55846b7a66e8[Type#5])
  int$-           %164.1 = CastType           d     dn %162.0
  val?^ | miss    %164.2 = LdVar              eR    midS, e1.0
  lgl$#-          %164.3 = IsType                   %164.2 isA real$-
  void                    Assume             D     %164.3, %162.2 (Typecheck@0x558467ed49c8[Type#125])
  real$-          %164.5 = CastType           d     dn %164.2
  real$-          %164.6 = Add                d     %164.1, %164.5, elided   <real$->
  real$-          %164.7 = Div                d     %164.6, 2, elided   <real$->
  (cls|spec|blt)  %164.8 = LdFun              !v    attr<-, <0x558466cd3e08>, e1.0
  val?^ | miss    %164.9 = LdVar              eR    r, e1.0
  val?            %164.10 = Force!<value>      !v    %164.9, e1.0   <vec>
  val?            %164.11 = NamedCall          !v    %164.8(%164.10, "midpoint", value=%164.7) e1.0   <vec>
  void                    StVar              lW    r, %164.11, e1.0
  val             %164.13 = ChkMissing         e     %164.11
  void                    StVar              lW    d, %164.11, e1.0
  goto BB2
BB163   <- [162]
  fs              %163.0 = FrameState         R     0x558467c55970+2712: [], env=e1.0
  fs              %163.1 = FrameState         R     0x55846762eb70+37: [], env=e160.5, next=%163.0
  fs              %163.2 = FrameState         R     0x5584670b9890+58: [%162.0], env=e160.20, next=%163.1
  void                    Deopt              !v    %163.2   !
BB80   <- [52]
  val?^ | miss    %80.0 = LdVar              eR    as.list, e44.0
  lgl$#-          %80.1 = Identical                %80.0, function(x, ...) <(rir::DispatchTable*)0x55846|...
  void                    Assume             D     %80.1, %50.1 (CallTarget@0x55846af82080[Call#3])
  val?^ | miss    %80.3 = LdVar              eR    X, e44.0
  val?            %80.4 = Force!<wrapped>    !v    %80.3, e44.0   <vec>
  val?            %80.5 = StaticCall         !v    as.list[0x55846bbba4c0](%80.4) { 0 } e44.0   <vec>
  void                    StVar              lW    X, %80.5, e44.0
  goto BB54
BB53   <- [52]
  goto BB54
BB54   <- [53, 80]
  (cls|spec|blt)  %54.0 = LdFun              !v    .Internal, <0x558466ccf698>, e44.0
  prom-           %54.1 = MkArg                    unboundValue, osr[0x558468448d30]_p31, e44.0
  val?            %54.2 = Call               !v    %54.0(%54.1) e44.0   <(lgl|real)->
  val?            %54.3 = PopContext         C     %54.2, %42.8   <real->
  lgl$#-          %54.4 = IsType                   %54.3 isA real-
  cp              %54.5 = Checkpoint                -> BB56 (default) | BB55 (if assume failed)
BB56   <- [54]
  void                    Assume             D     %54.4, %54.5 (Typecheck@0x558467ed49c8[Type#68])
  real-           %56.1 = CastType           d     dn %54.3
  real$-          %56.2 = CallSafeBuiltin    wed   sum(%56.1)    <real$->
  void                    StVar              lW    midS, %56.2, e1.0
  val?^ | miss    %56.4 = LdVar              eR    quiet, e1.0
  val?            %56.5 = Force!<lazy>       !v    %56.4, e1.0   <lgl$->
  lgl$#-          %56.6 = IsType                   %56.5 isA lgl$-
  cp              %56.7 = Checkpoint                -> BB58 (default) | BB57 (if assume failed)
BB55   <- [54]
  fs              %55.0 = FrameState         R     0x558467c55970+1551: [<blt sum>, %54.3], env=e1.0
  void                    Deopt              !v    %55.0   !
BB58   <- [56]
  void                    Assume             D     %56.6, %56.7 (Typecheck@0x558467ed49c8[Type#70])
  lgl$-           %58.1 = CastType           d     dn %56.5
  lgl$-           %58.2 = Not                d     %58.1, elided
  lgl$-           %58.3 = AsLogical                %58.2
  lgl$#-          %58.4 = Identical                %58.3, false
  void                    Branch                   %58.4 -> BB79 (if true) | BB59 (if false)
BB57   <- [56]
  fs              %57.0 = FrameState         R     0x558467c55970+1596: [%56.5], env=e1.0
  void                    Deopt              !v    %57.0   !
BB79   <- [58]
  goto BB64
BB59   <- [58]
  val?^ | miss    %59.0 = LdVar              eR    type, e1.0
  val?            %59.1 = Force!<lazy>       !v    %59.0, e1.0   <str$->
  lgl$#-          %59.2 = IsType                   %59.1 isA val?-
  cp              %59.3 = Checkpoint                -> BB61 (default) | BB60 (if assume failed)
BB64   <- [63, 79]
  lgl$-           %64.0 = Phi                      %63.3:BB63, %58.3:BB79
  lgl$-           %64.1 = AsLogical                %64.0
  lgl$#-          %64.2 = Identical                %64.1, false
  cp              %64.3 = Checkpoint                -> BB66 (default) | BB65 (if assume failed)
BB61   <- [59]
  void                    Assume             D     %59.2, %59.3 (Typecheck@0x558467ed49c8[Type#71])
  val?-           %61.1 = CastType           d     dn %59.1   <str$->
  lgl-            %61.2 = Eq                 wed   %61.1, "hclust", elided   <lgl$->
  lgl$#-          %61.3 = IsType                   %61.2 isA lgl$-
  cp              %61.4 = Checkpoint                -> BB63 (default) | BB62 (if assume failed)
BB60   <- [59]
  fs              %60.0 = FrameState         R     0x558467c55970+1618: [%58.3, %59.1], env=e1.0
  void                    Deopt              !v    %60.0   !
BB66   <- [64]
  void                    Branch                   %64.2 -> BB78 (if true) | BB67 (if false)
BB65   <- [64]
  fs              %65.0 = FrameState         R     0x558467c55970+1637: [%64.0], env=e1.0
  void                    Deopt              !v    %65.0   !
BB63   <- [61]
  void                    Assume             D     %61.3, %61.4 (Typecheck@0x558467ed49c8[Type#72])
  lgl$-           %63.1 = CastType           d     dn %61.2
  lgl$-           %63.2 = AsLogical                %63.1
  lgl$-           %63.3 = LAnd                     %58.3, %63.2
  goto BB64
BB62   <- [61]
  fs              %62.0 = FrameState         R     0x558467c55970+1630: [%58.3, %61.2], env=e1.0
  void                    Deopt              !v    %62.0   !
BB78   <- [66]
  goto BB68
BB67   <- [66]
  val?^ | miss    %67.0 = LdVar              eR    k, e1.0
  lgl$#-          %67.1 = IsType                   %67.0 isA int$-
  void                    Assume             D     %67.1, %64.3 (Typecheck@0x558467ed49c8[Type#73])
  int$-           %67.3 = CastType           d     dn %67.0
  lgl$-           %67.4 = Neq                d     %67.3, 2, elided   <lgl$->
  lgl$-           %67.5 = AsLogical                %67.4
  lgl$-           %67.6 = LAnd                     %64.1, %67.5
  goto BB68
BB68   <- [78, 67]
  lgl$-           %68.0 = Phi                      %67.6:BB67, %64.1:BB78
  lgl$#-          %68.1 = CheckTrueFalse     e     %68.0
  void                    Branch                   %68.1 -> BB77 (if true) | BB69 (if false)
BB77   <- [68]
  (cls|spec|blt)  %77.0 = LdFun              !v    warning, e1.0
  fs              %77.1 = FrameState         R     0x558467c55970+1688: [%77.0], env=e1.0
  void                    Deopt              !v    %77.1, DeadCall@0x558467ed49c8[Call#18], %77.0   !
BB69   <- [68]
  val?^ | miss    %69.0 = LdVar              eR    .memberDend, e1.0
  lgl$#-          %69.1 = Identical                %69.0, function(x) <(rir::DispatchTable*)0x55846762ec|...
  void                    Assume             D     %69.1, %64.3 (CallTarget@0x558467ed49c8[Call#19])
  prom-           %69.3 = MkArg                    unboundValue, osr[0x558468448d30]_p8, e1.0
  val?^           %69.4 = CastType                 up %69.3
  env             e69.5 = MkEnv              l     x=%69.4, parent=<env 0x55846731fb50>, context 0
  val?^ | miss    %69.6 = LdVar              eR    %||%, e69.5
  lgl$#-          %69.7 = Identical                %69.6, function(L, R) <(rir::DispatchTable*)0x5584670|...
  void                    Assume             D     %69.7, %64.3 (CallTarget@0x55846b7a66e8[Call#0])
  prom-           %69.9 = MkArg                    unboundValue, osr[0x558468448d30]_p38, e69.5
  val?^           %69.10 = CastType                 up %69.9
  val?^ | miss    %69.11 = LdVar              eR    attr, e69.5
  lgl$#-          %69.12 = Identical                %69.11, <blt attr>
  void                    Assume             D     %69.12, %64.3 (CallTarget@0x55846b7a66e8[Call#1])
  val?            %69.14 = Force!<lazy>       !v    %69.4, e69.5   <int$->
  val?            %69.15 = CallBuiltin        !v    attr(%69.14, "x.member") e69.5   <nil->
  lgl$-           %69.16 = Is                       %69.15, NULL
  prom-           %69.17 = MkArg                    %69.15, osr[0x558468448d30]_p36 (!refl), e69.5
  val?~           %69.18 = CastType                 up %69.17
  lgl$#-          %69.19 = CheckTrueFalse     e     %69.16
  env             e69.20 = (MkEnv)            l     L=%69.18, R=%69.10, parent=<env 0x55846731fb50>, context -1
  void                    Branch                   %69.19 -> BB74 (if true) | BB70 (if false)
BB74   <- [69]
  val?            %74.0 = Force!<lazy>       !vL   %69.10, e69.20   <(int|real)$->
  cp              %74.1 = Checkpoint                -> BB76 (default) | BB75 (if assume failed)
BB70   <- [69]
  goto BB71
BB76   <- [74]
  lgl$#-          %76.0 = IsEnvStub          R     , e69.20
  void                    Assume             D     %76.0, %74.1 (EnvStubMaterialized@0x55846b7a6848[Call#unknown])
  goto BB71
BB75   <- [74]
  fs              %75.0 = FrameState         R     0x558467c55970+1748: [], env=e1.0
  fs              %75.1 = FrameState         R     0x55846762eb70+37: [], env=e69.5, next=%75.0
  fs              %75.2 = FrameState         R     0x5584670b9890+53: [%74.0], env=e69.20, next=%75.1
  void                    Deopt              !v    %75.2   !
BB71   <- [76, 70]
  val?            %71.0 = Phi                      %69.15:BB70, %74.0:BB76   <int$->
  lgl$#-          %71.1 = IsType                   %71.0 isA int$-
  cp              %71.2 = Checkpoint                -> BB73 (default) | BB72 (if assume failed)
BB73   <- [71]
  void                    Assume             D     %71.1, %71.2 (Typecheck@0x55846b7a66e8[Type#5])
  int$-           %73.1 = CastType           d     dn %71.0
  val?^ | miss    %73.2 = LdVar              eR    midS, e1.0
  lgl$#-          %73.3 = IsType                   %73.2 isA real$-
  void                    Assume             D     %73.3, %71.2 (Typecheck@0x558467ed49c8[Type#78])
  real$-          %73.5 = CastType           d     dn %73.2
  real$-          %73.6 = Add                d     %73.1, %73.5, elided   <real$->
  real$-          %73.7 = Div                d     %73.6, 2, elided   <real$->
  (cls|spec|blt)  %73.8 = LdFun              !v    attr<-, <0x558466cd3e08>, e1.0
  val?^ | miss    %73.9 = LdVar              eR    r, e1.0
  val?            %73.10 = Force!<value>      !v    %73.9, e1.0   <vec>
  val?            %73.11 = NamedCall          !v    %73.8(%73.10, "midpoint", value=%73.7) e1.0   <vec>
  void                    StVar              lW    r, %73.11, e1.0
  val             %73.13 = ChkMissing         e     %73.11
  void                    StVar              lW    d, %73.11, e1.0
  goto BB2
BB72   <- [71]
  fs              %72.0 = FrameState         R     0x558467c55970+1748: [], env=e1.0
  fs              %72.1 = FrameState         R     0x55846762eb70+37: [], env=e69.5, next=%72.0
  fs              %72.2 = FrameState         R     0x5584670b9890+58: [%71.0], env=e69.20, next=%72.1
  void                    Deopt              !v    %72.2   !
Prom 0:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    r, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <vec>
  void                    Return             l     %1.3
Prom 1:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    .midDend, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <cls->
  void                    Return             l     %1.3
Prom 2:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    r, e1.0
  val?            %1.2  = Force<value>       !v    %1.1, e1.0   <vec>
  val?            %1.3  = Extract2_1D        !v    %1.2, 1L, e1.0   <(int|vec)>
  void                    Visible            v     
  void                    Return             l     %1.3
Prom 4:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    j, e1.0
  val?            %1.2  = Force<value>       !v    %1.1, e1.0   <int$->
  val?            %1.3  = Add                !v    %1.2, 1L, e1.0   <int$->
  val?^ | miss    %1.4  = LdVar              eR    jj !upd, e1.0
  val?            %1.5  = Force<value>       !v    %1.4, e1.0   <int->
  val?^ | miss    %1.6  = LdVar              eR    depth, e1.0
  val?            %1.7  = Force<value>       !v    %1.6, e1.0   <int$->
  val?            %1.8  = Subassign1_1D      !v    %1.3, %1.5, %1.7, e1.0
  void                    StVar              lW    jj, %1.8, e1.0
  void                    Invisible          v     
  void                    Return             l     %1.3
Prom 5:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    d, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <(int|vec)>
  void                    Return             l     %1.3
Prom 6:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    r, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <vec>
  void                    Return             l     %1.3
Prom 7:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    .midDend, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <cls->
  void                    Return             l     %1.3
Prom 8:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    r, e1.0
  val?            %1.2  = Force<value>       !v    %1.1, e1.0   <vec>
  val?            %1.3  = Extract2_1D        !v    %1.2, 1L, e1.0   <int$>
  void                    Visible            v     
  void                    Return             l     %1.3
Prom 10:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    jj, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <int->
  void                    Return             l     %1.3
Prom 11:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    kk, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <int->
  void                    Return             l     %1.3
Prom 12:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    jj !upd, e1.0
  val?            %1.2  = Force<value>       !v    %1.1, e1.0   <int->
  val?^ | miss    %1.3  = LdVar              eR    depth, e1.0
  val?            %1.4  = Force<value>       !v    %1.3, e1.0   <int$->
  val?            %1.5  = Subassign1_1D      wed   1L, %1.2, %1.4, e1.0
  void                    StVar              lW    jj, %1.5, e1.0
  void                    Invisible          v     
  void                    Return             l     1L
Prom 16:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    FUN, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <(cls|blt)->
  void                    Return             l     %1.3
Prom 17:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    X, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <vec>
  void                    Return             l     %1.3
Prom 18:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     vapply, e1.0
  prom-           %1.2  = MkArg                    unboundValue, osr[0x558468448d30]_p19, e1.0
  prom-           %1.3  = MkArg                    unboundValue, osr[0x558468448d30]_p20, e1.0
  prom-           %1.4  = MkArg                    unboundValue, osr[0x558468448d30]_p21, e1.0
  prom-           %1.5  = MkArg                    unboundValue, osr[0x558468448d30]_p22, e1.0
  val?            %1.6  = Call               !     %1.1(%1.2, %1.3, %1.4, %1.5) e1.0   <val?_>
  void                    Return             l     %1.6
Prom 19:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    X, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 20:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    FUN, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 21:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    FUN.VALUE, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 22:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    USE.NAMES, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 23:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     attr, <0x558466cd0080>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, osr[0x558468448d30]_p24, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2, "x.member") e1.0   <nil->
  void                    Return             l     %1.3
Prom 24:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    x, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <int$->
  void                    Return             l     %1.3
Prom 25:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !v    %||%, <0x558468b0c558>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, osr[0x558468448d30]_p26, e1.0
  val?            %1.3  = Call               !v    %1.1(%1.2, 1L) e1.0   <int$->
  void                    Visible            v     
  void                    Return             l     %1.3
Prom 26:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     attr, <0x558466cd0080>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, osr[0x558468448d30]_p27, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2, "members") e1.0   <nil->
  void                    Return             l     %1.3
Prom 27:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    x, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <int$->
  void                    Return             l     %1.3
Prom 29:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    FUN, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <(cls|blt)->
  void                    Return             l     %1.3
Prom 30:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    X, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <vec>
  void                    Return             l     %1.3
Prom 31:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     vapply, e1.0
  prom-           %1.2  = MkArg                    unboundValue, osr[0x558468448d30]_p32, e1.0
  prom-           %1.3  = MkArg                    unboundValue, osr[0x558468448d30]_p33, e1.0
  prom-           %1.4  = MkArg                    unboundValue, osr[0x558468448d30]_p34, e1.0
  prom-           %1.5  = MkArg                    unboundValue, osr[0x558468448d30]_p35, e1.0
  val?            %1.6  = Call               !     %1.1(%1.2, %1.3, %1.4, %1.5) e1.0   <val?_>
  void                    Return             l     %1.6
Prom 32:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    X, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 33:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    FUN, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 34:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    FUN.VALUE, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 35:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    USE.NAMES, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 36:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     attr, <0x558466cd0080>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, osr[0x558468448d30]_p37, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2, "x.member") e1.0   <nil->
  void                    Return             l     %1.3
Prom 37:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    x, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <int$->
  void                    Return             l     %1.3
Prom 38:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !v    %||%, <0x558468b0c558>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, osr[0x558468448d30]_p39, e1.0
  val?            %1.3  = Call               !v    %1.1(%1.2, 1L) e1.0   <int$->
  void                    Visible            v     
  void                    Return             l     %1.3
Prom 39:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     attr, <0x558466cd0080>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, osr[0x558468448d30]_p40, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2, "members") e1.0   <nil->
  void                    Return             l     %1.3
Prom 40:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    x, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <int$->
  void                    Return             l     %1.3

│ osr[0x558468448d30]                                                          │
└──────────────────────────────────────────────────────────────────────────────┘
