
┌──────────────────────────────────────────────────────────────────────────────┐
│ setmid[0x55846defe0a0]                                                       │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;NonRefl0,NonRefl1,!Obj1              │
│ Properties:                                                                  │
├────── PIR Version After Optimizations
setmid[0x55846defe0a0]
BB0
  goto BB1
BB1   <- [0]
  val?^           %1.0  = LdArg                    1
  val?^           %1.1  = LdArg                    0
  cp              %1.2  = Checkpoint                -> BB2 (default) | BB177 (if assume failed)
BB2   <- [1]
  val?^ | miss    %2.0  = LdVar              eR    integer, ?
  lgl$#-          %2.1  = Identical                %2.0, function(length=0L) <(rir::DispatchTable*)0x55|...
  void                    Assume             D     %2.1, %1.2 (CallTarget@0x558467ed49c8[Call#0])
  int-            %2.3  = CallSafeBuiltin    wed   vector("integer", 0L)    <int->
  int-            %2.4  = CallSafeBuiltin    wed   vector("integer", 0L)    <int->
  cp              %2.5  = Checkpoint                -> BB4 (default) | BB3 (if assume failed)
BB177   <- [1]
  env             e177.0 = (MkEnv)            l     d=%1.1, type=%1.0, depth=0L, parent=?, context 1
  fs              %177.1 = FrameState         R     0x558467c55970+15: [], env=e177.0
  void                    Deopt              !v    %177.1
BB4   <- [2]
  val?^ | miss    %4.0  = LdVar              eR    list, ?
  lgl$#-          %4.1  = Identical                <blt list>, %4.0   <true>
  void                    Assume             D     %4.1, %2.5 (DeadBranchReached@0x558467ed49c8[Test#0])
  env             e4.3  = MkEnv              l     d=%1.1, type=%1.0, depth=0L, kk=%2.3, jj=%2.4, dd=list(), parent=?, context 1
  goto BB5
BB3   <- [2]
  env             e3.0  = (MkEnv)            l     d=%1.1, type=%1.0, depth=0L, kk=%2.3, parent=?, context 1
  fs              %3.1  = FrameState         R     0x558467c55970+83: [], env=e3.0
  env             e3.2  = (MkEnv)            l     length=0L, parent=R_BaseNamespace, context 0
  fs              %3.3  = FrameState         R     0x558468693c90+33: [%2.4], env=e3.2, next=%3.1
  void                    Deopt              !v    %3.3
BB5   <- [4, 172, 77]
  cp              %5.0  = Checkpoint                -> BB7 (default) | BB6 (if assume failed)
BB7   <- [5]
  val?^ | miss    %7.0  = LdVar              eR    is.leaf, e4.3
  lgl$#-          %7.1  = Identical                %7.0, function(object) <(rir::DispatchTable*)0x55846|...
  void                    Assume             D     %7.1, %5.0 (CallTarget@0x558467ed49c8[Call#3])
  prom-           %7.3  = MkArg                    unboundValue, setmid[0x55846defe0a0]_p0 (!refl), e4.3
  ct              %7.4  = PushContext        lCL   %7.3, is.leaf(d), function(object) <(rir::DispatchTable*)0x55846|..., e4.3
  val?^           %7.5  = CastType                 up %7.3
  val?^ | miss    %7.6  = LdVar              eR    is.logical, <env 0x55846731fb50>
  lgl$#-          %7.7  = Identical                <blt is.logical>, %7.6   <true>
  cp              %7.8  = Checkpoint                -> BB9 (default) | BB8 (if assume failed)
BB6   <- [5]
  fs              %6.0  = FrameState         R     0x558467c55970+183: [], env=e4.3
  void                    Deopt              !v    %6.0   !
BB9   <- [7]
  void                    Assume             D     %7.7, %7.8 (DeadBranchReached@0x558467ed4b28[Test#0])
  val?^ | miss    %9.1  = LdVar              eR    attr, <env 0x55846731fb50>
  lgl$#-          %9.2  = Identical                <blt attr>, %9.1   <true>
  void                    Assume             D     %9.2, %7.8 (DeadBranchReached@0x558467ed4b28[Test#1])
  env             e9.4  = MkEnv              l     object=%7.5, parent=<env 0x55846731fb50>, context 1
  val?            %9.5  = Force!<lazy>       !vr   %7.5, e9.4   <(int|vec)>
  val?            %9.6  = CallBuiltin        !v    attr(%9.5, "leaf") e9.4   <(nil|lgl)->
  void                    StVar              lW    L, %9.6, e9.4
  val+            %9.8  = CallSafeBuiltin    wed   is.logical(%9.6)    <lgl$->
  lgl$#-          %9.9  = IsType                   %9.8 isA lgl$-
  cp              %9.10 = Checkpoint                -> BB11 (default) | BB10 (if assume failed)
BB8   <- [7]
  fs              %8.0  = FrameState         R     0x558467c55970+215: [], env=e4.3
  env             e8.1  = (MkEnv)            l     object=%7.5, parent=<env 0x55846731fb50>, context 1
  fs              %8.2  = FrameState         R     0x55846b624450+17: [<blt is.logical>, %7.7], env=e8.1, next=%8.0
  void                    Deopt              !v    %8.2   !
BB11   <- [9]
  void                    Assume             D     %9.9, %9.10 (Typecheck@0x558467ed4b28[Type#5])
  lgl$-           %11.1 = CastType           d     dn %9.8
  lgl$-           %11.2 = AsLogical                %11.1
  lgl$#-          %11.3 = Identical                %11.2, false
  void                    Branch                   %11.3 -> BB176 (if true) | BB12 (if false)
BB10   <- [9]
  fs              %10.0 = FrameState         R     0x558467c55970+215: [], env=e4.3
  fs              %10.1 = FrameState         R     0x55846b624450+195: [%9.8], env=e9.4, next=%10.0
  void                    Deopt              !v    %10.1   !
BB176   <- [11]
  goto BB13
BB12   <- [11]
  val             %12.0 = ChkMissing         e     %9.6
  lgl$-           %12.1 = AsLogical          e     %9.6
  lgl$-           %12.2 = LAnd                     %11.2, %12.1
  goto BB13
BB13   <- [176, 12]
  lgl$-           %13.0 = Phi                      %12.2:BB12, %11.2:BB176
  val?            %13.1 = PopContext         C     %13.0, %7.4   <lgl$->
  lgl$#-          %13.2 = IsType                   %13.1 isA lgl$-
  cp              %13.3 = Checkpoint                -> BB15 (default) | BB14 (if assume failed)
BB15   <- [13]
  void                    Assume             D     %13.2, %13.3 (Typecheck@0x558467ed49c8[Type#4])
  lgl$-           %15.1 = CastType           d     dn %13.1
  lgl$-           %15.2 = Not                d     %15.1, elided
  lgl$#-          %15.3 = CheckTrueFalse     e     %15.2
  void                    Branch                   %15.3 -> BB151 (if true) | BB16 (if false)
BB14   <- [13]
  fs              %14.0 = FrameState         R     0x558467c55970+215: [%13.1], env=e4.3
  void                    Deopt              !v    %14.0   !
BB151   <- [15]
  val?^ | miss    %151.0 = LdVar              eR    length, e4.3
  lgl$#-          %151.1 = Identical                <blt length>, %151.0   <true>
  void                    Assume             D     %151.1, %13.3 (DeadBranchReached@0x558467ed49c8[Test#1])
  val?^ | miss    %151.3 = LdVar              eR    d, e4.3
  val?            %151.4 = Force!<wrapped>    !v    %151.3, e4.3   <vec>
  val?            %151.5 = CallBuiltin        !v    length(%151.4) e4.3   <int$->
  lgl$#-          %151.6 = IsType                   %151.5 isA int$-
  cp              %151.7 = Checkpoint                -> BB153 (default) | BB152 (if assume failed)
BB16   <- [15]
  val?^ | miss    %16.0 = LdVar              eR    depth, e4.3
  val?            %16.1 = Force!<value>      !v    %16.0, e4.3   <int$->
  lgl$#-          %16.2 = CheckTrueFalse     we    %16.1   <true>
  cp              %16.3 = Checkpoint                -> BB18 (default) | BB17 (if assume failed)
BB153   <- [151]
  void                    Assume             D     %151.6, %151.7 (Typecheck@0x558467ed49c8[Type#7])
  int$-           %153.1 = CastType           d     dn %151.5
  void                    StVar              lW    k, %153.1, e4.3
  lgl$-           %153.3 = Lt                 d     %153.1, 1, elided   <lgl$->
  lgl$#-          %153.4 = CheckTrueFalse     e     %153.3
  void                    Branch                   %153.4 -> BB175 (if true) | BB154 (if false)
BB152   <- [151]
  fs              %152.0 = FrameState         R     0x558467c55970+323: [%151.5], env=e4.3
  void                    Deopt              !v    %152.0   !
BB18   <- [16]
  void                    Assume             D     %16.2, %16.3 (DeadBranchReached@0x558467ed49c8[Test#3])
  val?^ | miss    %18.1 = LdVar              eR    kk, e4.3
  val?            %18.2 = Force!<value>      !v    %18.1, e4.3   <int->
  lgl$#-          %18.3 = IsType                   %18.2 isA val+   <true>
  lgl$#-          %18.4 = IsType                   %18.2 isA int-
  cp              %18.5 = Checkpoint                -> BB20 (default) | BB19 (if assume failed)
BB17   <- [16]
  fs              %17.0 = FrameState         R     0x558467c55970+932: [%16.2], env=e4.3
  void                    Deopt              !v    %17.0   !
BB175   <- [153]
  (cls|spec|blt)  %175.0 = LdFun              !v    stop, e4.3
  fs              %175.1 = FrameState         R     0x558467c55970+379: [%175.0], env=e4.3
  void                    Deopt              !v    %175.1, DeadCall@0x558467ed49c8[Call#5], %175.0   !
BB154   <- [153]
  val?^ | miss    %154.0 = LdVar              eR    depth, e4.3
  val?            %154.1 = Force!<value>      !v    %154.0, e4.3   <int$->
  lgl$#-          %154.2 = IsType                   %154.1 isA int$-
  cp              %154.3 = Checkpoint                -> BB156 (default) | BB155 (if assume failed)
BB20   <- [18]
  void                    Assume             D     %18.3, %18.5 (DeadBranchReached@0x558467ed49c8[Test#4])
  val?^ | miss    %20.1 = LdVar              eR    depth, e4.3
  lgl$#-          %20.2 = IsType                   %20.1 isA int$-
  void                    Assume             D     %20.2, %18.5 (Typecheck@0x558467ed49c8[Type#39])
  int$-           %20.4 = CastType           d     dn %20.1
  void                    Assume             D     %18.4, %18.5 (Typecheck@0x558467ed49c8[Type#37])
  int-            %20.6 = CastType           d     dn %18.2
  int-            %20.7 = Extract1_1D        wed   %20.6, %20.4, elided   <int$->
  lgl$#-          %20.8 = IsType                   %20.7 isA int$-
  cp              %20.9 = Checkpoint                -> BB22 (default) | BB21 (if assume failed)
BB19   <- [18]
  fs              %19.0 = FrameState         R     0x558467c55970+951: [%18.2], env=e4.3
  void                    Deopt              !v    %19.0   !
BB156   <- [154]
  void                    Assume             D     %154.2, %154.3 (Typecheck@0x558467ed49c8[Type#10])
  int$-           %156.1 = CastType           d     dn %154.1
  int$-           %156.2 = Add                d     %156.1, 1L, elided   <int$->
  void                    StVar              lW    depth, %156.2, e4.3
  cp              %156.4 = Checkpoint                -> BB158 (default) | BB157 (if assume failed)
BB155   <- [154]
  fs              %155.0 = FrameState         R     0x558467c55970+416: [%154.1], env=e4.3
  void                    Deopt              !v    %155.0   !
BB22   <- [20]
  void                    Assume             D     %20.8, %20.9 (Typecheck@0x558467ed49c8[Type#40])
  int$-           %22.1 = CastType           d     dn %20.7
  void                    StVar              lW    k, %22.1, e4.3
  val?^ | miss    %22.3 = LdVar              eR    jj, e4.3
  val?            %22.4 = Force!<value>      !v    %22.3, e4.3   <int->
  lgl$#-          %22.5 = IsType                   %22.4 isA val+   <true>
  lgl$#-          %22.6 = IsType                   %22.4 isA int-
  cp              %22.7 = Checkpoint                -> BB24 (default) | BB23 (if assume failed)
BB21   <- [20]
  fs              %21.0 = FrameState         R     0x558467c55970+1002: [%20.7], env=e4.3
  void                    Deopt              !v    %21.0   !
BB158   <- [156]
  val?^ | miss    %158.0 = LdVar              eR    verbose, e4.3
  lgl$#-          %158.1 = IsType                   %158.0 isA lgl$-
  void                    Assume             D     %158.1, %156.4 (Typecheck@0x558467ed49c8[Type#12])
  lgl$-           %158.3 = CastType           d     dn %158.0
  lgl$#-          %158.4 = CheckTrueFalse     e     %158.3
  void                    Branch                   %158.4 -> BB174 (if true) | BB159 (if false)
BB157   <- [156]
  fs              %157.0 = FrameState         R     0x558467c55970+442: [], env=e4.3
  void                    Deopt              !v    %157.0   !
BB24   <- [22]
  void                    Assume             D     %22.5, %22.7 (DeadBranchReached@0x558467ed49c8[Test#5])
  val?^ | miss    %24.1 = LdVar              eR    depth, e4.3
  lgl$#-          %24.2 = IsType                   %24.1 isA int$-
  void                    Assume             D     %24.2, %22.7 (Typecheck@0x558467ed49c8[Type#43])
  int$-           %24.4 = CastType           d     dn %24.1
  void                    Assume             D     %22.6, %22.7 (Typecheck@0x558467ed49c8[Type#41])
  int-            %24.6 = CastType           d     dn %22.4
  int-            %24.7 = Extract1_1D        wed   %24.6, %24.4, elided   <int$->
  lgl$#-          %24.8 = IsType                   %24.7 isA int$-
  cp              %24.9 = Checkpoint                -> BB26 (default) | BB25 (if assume failed)
BB23   <- [22]
  fs              %23.0 = FrameState         R     0x558467c55970+1026: [%22.4], env=e4.3
  void                    Deopt              !v    %23.0   !
BB174   <- [158]
  (cls|spec|blt)  %174.0 = LdFun              !v    cat, e4.3
  fs              %174.1 = FrameState         R     0x558467c55970+472: [%174.0], env=e4.3
  void                    Deopt              !v    %174.1, DeadCall@0x558467ed49c8[Call#6], %174.0   !
BB159   <- [158]
  val?^ | miss    %159.0 = LdVar              eR    k, e4.3
  lgl$#-          %159.1 = IsType                   %159.0 isA int$-
  void                    Assume             D     %159.1, %156.4 (Typecheck@0x558467ed49c8[Type#16])
  int$-           %159.3 = CastType           d     dn %159.0
  val?^ | miss    %159.4 = LdVar              eR    kk !upd, e4.3
  lgl$#-          %159.5 = IsType                   %159.4 isA int-
  void                    Assume             D     %159.5, %156.4 (Typecheck@0x558467ed49c8[Type#17])
  int-            %159.7 = CastType           d     dn %159.4
  int-            %159.8 = Subassign1_1D      wed   %159.3, %159.7, %156.2, elided
  void                    StVar              lW    kk, %159.8, e4.3
  cp              %159.10 = Checkpoint                -> BB161 (default) | BB160 (if assume failed)
BB26   <- [24]
  void                    Assume             D     %24.8, %24.9 (Typecheck@0x558467ed49c8[Type#44])
  int$-           %26.1 = CastType           d     dn %24.7
  void                    StVar              lW    j, %26.1, e4.3
  val?^ | miss    %26.3 = LdVar              eR    dd, e4.3
  val?            %26.4 = Force!<value>      !v    %26.3, e4.3   <vec->
  lgl$#-          %26.5 = IsType                   %26.4 isA val+   <true>
  lgl$#-          %26.6 = IsType                   %26.4 isA val?-
  cp              %26.7 = Checkpoint                -> BB28 (default) | BB27 (if assume failed)
BB25   <- [24]
  fs              %25.0 = FrameState         R     0x558467c55970+1077: [%24.7], env=e4.3
  void                    Deopt              !v    %25.0   !
BB161   <- [159]
  val?^ | miss    %161.0 = LdVar              eR    storage.mode, e4.3
  lgl$#-          %161.1 = Identical                %161.0, function(x) <(rir::DispatchTable*)0x558469780f|...
  void                    Assume             D     %161.1, %159.10 (CallTarget@0x558467ed49c8[Call#8])
  prom-           %161.3 = MkArg                    unboundValue, setmid[0x55846defe0a0]_p10, e4.3
  val?^           %161.4 = CastType                 up %161.3
  env             e161.5 = MkEnv              l     x=%161.4, parent=R_BaseNamespace, context 0
  val?^ | miss    %161.6 = LdVar              eR    typeof, e161.5
  lgl$#-          %161.7 = Identical                %161.6, function(x) <(rir::DispatchTable*)0x55846b51e9|...
  void                    Assume             D     %161.7, %159.10 (CallTarget@0x558467ed4e98[Call#0])
  val?            %161.9 = Force!<lazy>       !vL   %161.4, e161.5   <int->
  str$-           %161.10 = CallSafeBuiltin    wed   typeof(%161.9)    <str$->
  int$-           %161.11 = Length                   %161.10
  void                    StVar              lW    tx, %161.10, e161.5
  cp              %161.13 = Checkpoint                -> BB163 (default) | BB162 (if assume failed)
BB160   <- [159]
  fs              %160.0 = FrameState         R     0x558467c55970+552: [], env=e4.3
  void                    Deopt              !v    %160.0   !
BB28   <- [26]
  void                    Assume             D     %26.5, %26.7 (DeadBranchReached@0x558467ed49c8[Test#6])
  val?^ | miss    %28.1 = LdVar              eR    depth, e4.3
  lgl$#-          %28.2 = IsType                   %28.1 isA int$-
  void                    Assume             D     %28.2, %26.7 (Typecheck@0x558467ed49c8[Type#47])
  int$-           %28.4 = CastType           d     dn %28.1
  void                    Assume             D     %26.6, %26.7 (Typecheck@0x558467ed49c8[Type#45])
  val?-           %28.6 = CastType           d     dn %26.4   <vec->
  val?            %28.7 = Extract2_1D        wed   %28.6, %28.4, elided   <vec>
  void                    StVar              lW    r, %28.7, e4.3
  cp              %28.9 = Checkpoint                -> BB30 (default) | BB29 (if assume failed)
BB27   <- [26]
  fs              %27.0 = FrameState         R     0x558467c55970+1101: [%26.4], env=e4.3
  void                    Deopt              !v    %27.0   !
BB163   <- [161]
  lgl$-           %163.0 = Eq                 d     %161.11, 1L, elided   <true>
  lgl$#-          %163.1 = Identical                %163.0, true
  void                    Assume             D     %163.1, %161.13 (DeadBranchReached@0x558467ed4e98[Test#1])
  lgl$-           %163.3 = CallSafeBuiltin    wed   is.na(%161.10) 
  cp              %163.4 = Checkpoint                -> BB165 (default) | BB164 (if assume failed)
BB162   <- [161]
  fs              %162.0 = FrameState         R     0x558467c55970+584: [], env=e4.3
  fs              %162.1 = FrameState         R     0x558467621800+48: [%161.10], env=e161.5, next=%162.0
  void                    Deopt              !v    %162.1   !
BB30   <- [28]
  val?^ | miss    %30.0 = LdVar              eR    unclass, e4.3
  lgl$#-          %30.1 = Identical                <blt unclass>, %30.0   <true>
  void                    Assume             D     %30.1, %28.9 (DeadBranchReached@0x558467ed49c8[Test#7])
  val?^ | miss    %30.3 = LdVar              eR    d, e4.3
  val?            %30.4 = Force!<value>      !v    %30.3, e4.3   <int$>
  val?            %30.5 = CallBuiltin        !v    unclass(%30.4) e4.3   <int$+>
  val?^ | miss    %30.6 = LdVar              eR    r !upd, e4.3
  val?            %30.7 = Force!<value>      !v    %30.6, e4.3   <vec>
  cp              %30.8 = Checkpoint                -> BB32 (default) | BB31 (if assume failed)
BB29   <- [28]
  fs              %29.0 = FrameState         R     0x558467c55970+1167: [], env=e4.3
  void                    Deopt              !v    %29.0   !
BB165   <- [163]
  lgl$#-          %165.0 = CheckTrueFalse     e     %163.3   <false>
  void                    AssumeNot          D     %165.0, %163.4 (DeadBranchReached@0x558467ed4e98[Test#8])
  lgl$-           %165.2 = Eq                 d     %161.10, closure, elided
  lgl$#-          %165.3 = CheckTrueFalse     e     %165.2   <false>
  void                    AssumeNot          D     %165.3, %163.4 (DeadBranchReached@0x558467ed4e98[Test#9])
  lgl$-           %165.5 = Eq                 d     %161.10, builtin, elided
  lgl$#-          %165.6 = CheckTrueFalse     e     %165.5   <false>
  void                    AssumeNot          D     %165.6, %163.4 (DeadBranchReached@0x558467ed4e98[Test#10])
  lgl$-           %165.8 = Eq                 d     %161.10, special, elided
  lgl$#-          %165.9 = CheckTrueFalse     e     %165.8   <false>
  void                    AssumeNot          D     %165.9, %163.4 (DeadBranchReached@0x558467ed4e98[Test#11])
  val?^ | miss    %165.11 = LdVar              eR    storage.mode, e4.3
  lgl$#-          %165.12 = Identical                %165.11, function(x) <(rir::DispatchTable*)0x558469780f|...
  void                    Assume             D     %165.12, %163.4 (CallTarget@0x558467ed49c8[Call#9])
  prom-           %165.14 = MkArg                    unboundValue, setmid[0x55846defe0a0]_p11, e4.3
  val?^           %165.15 = CastType                 up %165.14
  env             e165.16 = MkEnv              l     x=%165.15, parent=R_BaseNamespace, context 0
  val?^ | miss    %165.17 = LdVar              eR    typeof, e165.16
  lgl$#-          %165.18 = Identical                %165.17, function(x) <(rir::DispatchTable*)0x55846b51e9|...
  void                    Assume             D     %165.18, %163.4 (CallTarget@0x558467ed4e98[Call#0])
  val?            %165.20 = Force!<lazy>       !vL   %165.15, e165.16   <int->
  str$-           %165.21 = CallSafeBuiltin    wed   typeof(%165.20)    <str$->
  int$-           %165.22 = Length                   %165.21
  void                    StVar              lW    tx, %165.21, e165.16
  cp              %165.24 = Checkpoint                -> BB167 (default) | BB166 (if assume failed)
BB164   <- [163]
  fs              %164.0 = FrameState         R     0x558467c55970+584: [], env=e4.3
  fs              %164.1 = FrameState         R     0x558467621800+269: [%161.10, %163.3], env=e161.5, next=%164.0
  void                    Deopt              !v    %164.1   !
BB32   <- [30]
  val?^ | miss    %32.0 = LdVar              eR    j, e4.3
  lgl$#-          %32.1 = IsType                   %32.0 isA int$-
  void                    Assume             D     %32.1, %30.8 (Typecheck@0x558467ed49c8[Type#53])
  int$-           %32.3 = CastType           d     dn %32.0
  val?            %32.4 = Subassign2_1D      !v    %30.5, %30.7, %32.3, e4.3
  void                    StVar              lW    r, %32.4, e4.3
  cp              %32.6 = Checkpoint                -> BB34 (default) | BB33 (if assume failed)
BB31   <- [30]
  fs              %31.0 = FrameState         R     0x558467c55970+1272: [%30.5, %30.7], env=e4.3
  void                    Deopt              !v    %31.0   !
BB167   <- [165]
  lgl$-           %167.0 = Eq                 d     %165.22, 1L, elided   <true>
  lgl$#-          %167.1 = Identical                %167.0, true
  void                    Assume             D     %167.1, %165.24 (DeadBranchReached@0x558467ed4e98[Test#1])
  lgl$-           %167.3 = CallSafeBuiltin    wed   is.na(%165.21) 
  cp              %167.4 = Checkpoint                -> BB169 (default) | BB168 (if assume failed)
BB166   <- [165]
  fs              %166.0 = FrameState         R     0x558467c55970+621: [%161.10], env=e4.3
  fs              %166.1 = FrameState         R     0x558467621800+48: [%165.21], env=e165.16, next=%166.0
  void                    Deopt              !v    %166.1   !
BB34   <- [32]
  val?^ | miss    %34.0 = LdVar              eR    j, e4.3
  lgl$#-          %34.1 = IsType                   %34.0 isA int$-
  void                    Assume             D     %34.1, %32.6 (Typecheck@0x558467ed49c8[Type#54])
  int$-           %34.3 = CastType           d     dn %34.0
  val?^ | miss    %34.4 = LdVar              eR    k, e4.3
  lgl$#-          %34.5 = IsType                   %34.4 isA int$-
  void                    Assume             D     %34.5, %32.6 (Typecheck@0x558467ed49c8[Type#55])
  int$-           %34.7 = CastType           d     dn %34.4
  lgl$-           %34.8 = Lt                 d     %34.3, %34.7, elided   <lgl$->
  lgl$#-          %34.9 = CheckTrueFalse     e     %34.8
  void                    Branch                   %34.9 -> BB150 (if true) | BB35 (if false)
BB33   <- [32]
  fs              %33.0 = FrameState         R     0x558467c55970+1301: [], env=e4.3
  void                    Deopt              !v    %33.0   !
BB169   <- [167]
  lgl$#-          %169.0 = CheckTrueFalse     e     %167.3   <false>
  void                    AssumeNot          D     %169.0, %167.4 (DeadBranchReached@0x558467ed4e98[Test#8])
  lgl$-           %169.2 = Eq                 d     %165.21, closure, elided
  lgl$#-          %169.3 = CheckTrueFalse     e     %169.2   <false>
  void                    AssumeNot          D     %169.3, %167.4 (DeadBranchReached@0x558467ed4e98[Test#9])
  lgl$-           %169.5 = Eq                 d     %165.21, builtin, elided
  lgl$#-          %169.6 = CheckTrueFalse     e     %169.5   <false>
  void                    AssumeNot          D     %169.6, %167.4 (DeadBranchReached@0x558467ed4e98[Test#10])
  lgl$-           %169.8 = Eq                 d     %165.21, special, elided
  lgl$#-          %169.9 = CheckTrueFalse     e     %169.8   <false>
  void                    AssumeNot          D     %169.9, %167.4 (DeadBranchReached@0x558467ed4e98[Test#11])
  lgl$-           %169.11 = Neq                d     %161.10, %165.21, elided   <lgl$->
  lgl$#-          %169.12 = CheckTrueFalse     e     %169.11
  void                    Branch                   %169.12 -> BB173 (if true) | BB170 (if false)
BB168   <- [167]
  fs              %168.0 = FrameState         R     0x558467c55970+621: [%161.10], env=e4.3
  fs              %168.1 = FrameState         R     0x558467621800+269: [%165.21, %167.3], env=e165.16, next=%168.0
  void                    Deopt              !v    %168.1   !
BB150   <- [34]
  goto BB72
BB35   <- [34]
  val?^ | miss    %35.0 = LdVar              eR    depth, e4.3
  lgl$#-          %35.1 = IsType                   %35.0 isA int$-
  void                    Assume             D     %35.1, %32.6 (Typecheck@0x558467ed49c8[Type#57])
  int$-           %35.3 = CastType           d     dn %35.0
  int$-           %35.4 = Sub                d     %35.3, 1L, elided   <int$->
  void                    StVar              lW    depth, %35.4, e4.3
  cp              %35.6 = Checkpoint                -> BB37 (default) | BB36 (if assume failed)
BB173   <- [169]
  (cls|spec|blt)  %173.0 = LdFun              !v    storage.mode, e4.3
  fs              %173.1 = FrameState         R     0x558467c55970+648: [%173.0], env=e4.3
  void                    Deopt              !v    %173.1, DeadCall@0x558467ed49c8[Call#10], %173.0   !
BB170   <- [169]
  val?^ | miss    %170.0 = LdVar              eR    d, e4.3
  val?            %170.1 = Force!<wrapped>    !v    %170.0, e4.3   <vec>
  val?^ | miss    %170.2 = LdVar              eR    dd !upd, e4.3
  val?            %170.3 = Force!<value>      !v    %170.2, e4.3   <vec->
  val?^ | miss    %170.4 = LdVar              eR    depth, e4.3
  val?            %170.5 = Force!<value>      !v    %170.4, e4.3   <int$->
  val?            %170.6 = Subassign2_1D      !v    %170.1, %170.3, %170.5, e4.3
  void                    StVar              lW    dd, %170.6, e4.3
  val?^ | miss    %170.8 = LdVar              eR    d, e4.3
  val?            %170.9 = Force!<wrapped>    !v    %170.8, e4.3   <vec>
  lgl$#-          %170.10 = IsType                   %170.9 isA val+   <false>
  cp              %170.11 = Checkpoint                -> BB172 (default) | BB171 (if assume failed)
BB72   <- [140, 71, 150]
  val?^ | miss    %72.0 = LdVar              eR    depth, e4.3
  val?            %72.1 = Force!<value>      !v    %72.0, e4.3   <int$->
  lgl$#-          %72.2 = IsType                   %72.1 isA int$-
  cp              %72.3 = Checkpoint                -> BB74 (default) | BB73 (if assume failed)
BB37   <- [35]
  val?^ | miss    %37.0 = LdVar              eR    verbose, e4.3
  lgl$#-          %37.1 = IsType                   %37.0 isA lgl$-
  void                    Assume             D     %37.1, %35.6 (Typecheck@0x558467ed49c8[Type#59])
  lgl$-           %37.3 = CastType           d     dn %37.0
  lgl$#-          %37.4 = CheckTrueFalse     e     %37.3
  void                    Branch                   %37.4 -> BB149 (if true) | BB38 (if false)
BB36   <- [35]
  fs              %36.0 = FrameState         R     0x558467c55970+1391: [], env=e4.3
  void                    Deopt              !v    %36.0   !
BB172   <- [170]
  void                    AssumeNot          D     %170.10, %170.11 (DeadBranchReached@0x558467ed49c8[Test#2])
  prom-           %172.1 = MkArg                    unboundValue, setmid[0x55846defe0a0]_p12, e4.3
  val?            %172.2 = Extract2_1D        !v    %170.9, %172.1, e4.3   <(int|vec)>
  void                    StVar              lW    d, %172.2, e4.3
  goto BB5
BB171   <- [170]
  fs              %171.0 = FrameState         R     0x558467c55970+809: [%170.9], env=e4.3
  void                    Deopt              !v    %171.0   !
BB74   <- [72]
  void                    Assume             D     %72.2, %72.3 (Typecheck@0x558467ed49c8[Type#130])
  int$-           %74.1 = CastType           d     dn %72.1
  lgl$-           %74.2 = Not                d     %74.1, elided
  lgl$#-          %74.3 = CheckTrueFalse     e     %74.2
  void                    Branch                   %74.3 -> BB78 (if true) | BB75 (if false)
BB73   <- [72]
  fs              %73.0 = FrameState         R     0x558467c55970+2864: [%72.1], env=e4.3
  void                    Deopt              !v    %73.0   !
BB149   <- [37]
  (cls|spec|blt)  %149.0 = LdFun              !v    cat, e4.3
  fs              %149.1 = FrameState         R     0x558467c55970+1421: [%149.0], env=e4.3
  void                    Deopt              !v    %149.1, DeadCall@0x558467ed49c8[Call#13], %149.0   !
BB38   <- [37]
  val?^ | miss    %38.0 = LdVar              eR    sum, e4.3
  lgl$#-          %38.1 = Identical                <blt sum>, %38.0   <true>
  void                    Assume             D     %38.1, %35.6 (DeadBranchReached@0x558467ed49c8[Test#8])
  val?^ | miss    %38.3 = LdVar              eR    vapply, e4.3
  lgl$#-          %38.4 = Identical                %38.3, function(X, FUN, FUN.VALUE, ..., USE.NAMES=TRU|...
  void                    Assume             D     %38.4, %35.6 (CallTarget@0x558467ed49c8[Call#17])
  prom-           %38.6 = MkArg                    unboundValue, setmid[0x55846defe0a0]_p1 (!refl), e4.3
  prom-           %38.7 = MkArg                    unboundValue, setmid[0x55846defe0a0]_p2, e4.3
  ct              %38.8 = PushContext        lCL   %38.6, %38.7, 0, vapply(r, .midDend, 0), function(X, FUN, FUN.VALUE, ..., USE.NAMES=TRU|..., e4.3
  val?^           %38.9 = CastType                 up %38.7
  val?^           %38.10 = CastType                 up %38.6
  cp              %38.11 = Checkpoint                -> BB40 (default) | BB39 (if assume failed)
BB78   <- [74]
  val?^ | miss    %78.0 = LdVar              eR    d, e4.3
  void                    Visible            v     
  val?            %78.2 = Force!<value>      !     %78.0, e4.3   <vec>
  void                    Return             l     %78.2
BB75   <- [74]
  val?^ | miss    %75.0 = LdVar              eR    r, e4.3
  val?            %75.1 = Force!<value>      !v    %75.0, e4.3   <vec>
  val?^ | miss    %75.2 = LdVar              eR    dd !upd, e4.3
  val?            %75.3 = Force!<value>      !v    %75.2, e4.3   <vec->
  val?^ | miss    %75.4 = LdVar              eR    depth, e4.3
  val?            %75.5 = Force!<value>      !v    %75.4, e4.3   <int$->
  val?            %75.6 = Subassign2_1D      !v    %75.1, %75.3, %75.5, e4.3
  void                    StVar              lW    dd, %75.6, e4.3
  val?^ | miss    %75.8 = LdVar              eR    r, e4.3
  val?            %75.9 = Force!<value>      !v    %75.8, e4.3   <vec>
  lgl$#-          %75.10 = IsType                   %75.9 isA val+   <false>
  cp              %75.11 = Checkpoint                -> BB77 (default) | BB76 (if assume failed)
BB40   <- [38]
  env             e40.0 = MkEnv              l     X=%38.10, FUN=%38.9, FUN.VALUE=0, ...(miss)=missingArg, USE.NAMES(miss)=true, parent=R_BaseNamespace, context 1
  val?^ | miss    %40.1 = LdVar              eR    match.fun, e40.0
  lgl$#-          %40.2 = Identical                %40.1, function(FUN, descend=TRUE) <(rir::DispatchTab|...
  void                    Assume             D     %40.2, %38.11 (CallTarget@0x55846af82080[Call#0])
  prom-           %40.4 = MkArg                    unboundValue, setmid[0x55846defe0a0]_p18, e40.0
  val?            %40.5 = StaticCall         !v    match.fun[0x55846973fe90](%40.4) e40.0   <(cls|blt)->
  void                    StVar              lW    FUN, %40.5, e40.0
  cp              %40.7 = Checkpoint                -> BB42 (default) | BB41 (if assume failed)
BB39   <- [38]
  fs              %39.0 = FrameState         R     0x558467c55970+1551: [<blt sum>], env=e4.3
  env             e39.1 = (MkEnv)            l     X=%38.10, FUN=%38.9, FUN.VALUE=0, ...(miss)=missingArg, USE.NAMES(miss)=true, parent=R_BaseNamespace, context 1
  fs              %39.2 = FrameState         R     0x55846afea720+0: [], env=e39.1, next=%39.0
  void                    Deopt              !v    %39.2   !
BB77   <- [75]
  void                    AssumeNot          D     %75.10, %75.11 (DeadBranchReached@0x558467ed49c8[Test#16])
  prom-           %77.1 = MkArg                    unboundValue, setmid[0x55846defe0a0]_p9, e4.3
  val?            %77.2 = Extract2_1D        !v    %75.9, %77.1, e4.3   <(int|vec)>
  void                    StVar              lW    d, %77.2, e4.3
  goto BB5
BB76   <- [75]
  fs              %76.0 = FrameState         R     0x558467c55970+2952: [%75.9], env=e4.3
  void                    Deopt              !v    %76.0   !
BB42   <- [40]
  val?^ | miss    %42.0 = LdVar              eR    is.vector, e40.0
  lgl$#-          %42.1 = Identical                %42.0, function(x, mode="any") <(rir::DispatchTable*)|...
  void                    Assume             D     %42.1, %40.7 (CallTarget@0x55846af82080[Call#1])
  val?^ | miss    %42.3 = LdVar              eR    X, e40.0
  val?            %42.4 = Force!<lazy>       !v    %42.3, e40.0   <vec>
  lgl$#-          %42.5 = CallSafeBuiltin    wed   is.vector(%42.4, "any")    <lgl$->
  cp              %42.6 = Checkpoint                -> BB44 (default) | BB43 (if assume failed)
BB41   <- [40]
  fs              %41.0 = FrameState         R     0x558467c55970+1551: [<blt sum>], env=e4.3
  fs              %41.1 = FrameState         R     0x55846afea720+46: [], env=e40.0, next=%41.0
  void                    Deopt              !v    %41.1   !
BB44   <- [42]
  lgl$#-          %44.0 = Not                d     %42.5, elided
  void                    Branch                   %42.5 -> BB148 (if true) | BB45 (if false)
BB43   <- [42]
  fs              %43.0 = FrameState         R     0x558467c55970+1551: [<blt sum>], env=e4.3
  fs              %43.1 = FrameState         R     0x55846afea720+78: [], env=e40.0, next=%43.0
  prom-           %43.2 = MkArg                    %42.4, setmid[0x55846defe0a0]_p19 (!refl), e40.0
  val?~           %43.3 = CastType                 up %43.2
  env             e43.4 = (MkEnv)            l     mode(miss)="any", x=%43.3, parent=R_BaseNamespace, context 0
  fs              %43.5 = FrameState         R     0x55846b1097d0+41: [%42.5], env=e43.4, next=%43.1
  void                    Deopt              !v    %43.5   !
BB148   <- [44]
  val?^ | miss    %148.0 = LdVar              eR    is.object, e40.0
  lgl$#-          %148.1 = Identical                <blt is.object>, %148.0   <true>
  void                    Assume             D     %148.1, %42.6 (DeadBranchReached@0x55846af82080[Test#0])
  val?^ | miss    %148.3 = LdVar              eR    X, e40.0
  val?            %148.4 = Force!<wrapped>    !v    %148.3, e40.0   <vec$->
  lgl$#-          %148.5 = CallSafeBuiltin    wed   is.object(%148.4)    <lgl$->
  lgl$-           %148.6 = LOr                      %44.0, %148.5
  goto BB46
BB45   <- [44]
  goto BB46
BB46   <- [45, 148]
  lgl$-           %46.0 = Phi                      %148.6:BB148, %44.0:BB45
  cp              %46.1 = Checkpoint                -> BB48 (default) | BB47 (if assume failed)
BB48   <- [46]
  lgl$#-          %48.0 = CheckTrueFalse     e     %46.0
  void                    Branch                   %48.0 -> BB147 (if true) | BB49 (if false)
BB47   <- [46]
  fs              %47.0 = FrameState         R     0x558467c55970+1551: [<blt sum>], env=e4.3
  fs              %47.1 = FrameState         R     0x55846afea720+189: [%46.0], env=e40.0, next=%47.0
  void                    Deopt              !v    %47.1   !
BB147   <- [48]
  val?^ | miss    %147.0 = LdVar              eR    as.list, e40.0
  lgl$#-          %147.1 = Identical                %147.0, function(x, ...) <(rir::DispatchTable*)0x55846|...
  void                    Assume             D     %147.1, %46.1 (CallTarget@0x55846af82080[Call#3])
  val?^ | miss    %147.3 = LdVar              eR    X, e40.0
  val?            %147.4 = Force!<wrapped>    !v    %147.3, e40.0   <vec>
  val?            %147.5 = StaticCall         !v    as.list[0x5584697d7490](%147.4) { 0 } e40.0   <vec>
  void                    StVar              lW    X, %147.5, e40.0
  goto BB50
BB49   <- [48]
  goto BB50
BB50   <- [49, 147]
  (cls|spec|blt)  %50.0 = LdFun              !v    .Internal, <0x558466ccf698>, e40.0
  prom-           %50.1 = MkArg                    unboundValue, setmid[0x55846defe0a0]_p20, e40.0
  val?            %50.2 = Call               !v    %50.0(%50.1) e40.0   <(lgl|real)->
  val?            %50.3 = PopContext         C     %50.2, %38.8   <real->
  lgl$#-          %50.4 = IsType                   %50.3 isA real-
  cp              %50.5 = Checkpoint                -> BB52 (default) | BB51 (if assume failed)
BB52   <- [50]
  void                    Assume             D     %50.4, %50.5 (Typecheck@0x558467ed49c8[Type#68])
  real-           %52.1 = CastType           d     dn %50.3
  real$-          %52.2 = CallSafeBuiltin    wed   sum(%52.1)    <real$->
  void                    StVar              lW    midS, %52.2, e4.3
  val?^ | miss    %52.4 = LdVar              eR    quiet, e4.3
  val?            %52.5 = Force!<lazy>       !v    %52.4, e4.3   <lgl$->
  lgl$#-          %52.6 = IsType                   %52.5 isA lgl$-
  cp              %52.7 = Checkpoint                -> BB54 (default) | BB53 (if assume failed)
BB51   <- [50]
  fs              %51.0 = FrameState         R     0x558467c55970+1551: [<blt sum>, %50.3], env=e4.3
  void                    Deopt              !v    %51.0   !
BB54   <- [52]
  void                    Assume             D     %52.6, %52.7 (Typecheck@0x558467ed49c8[Type#70])
  lgl$-           %54.1 = CastType           d     dn %52.5
  lgl$-           %54.2 = Not                d     %54.1, elided
  lgl$-           %54.3 = AsLogical                %54.2
  lgl$#-          %54.4 = Identical                %54.3, false
  void                    Branch                   %54.4 -> BB146 (if true) | BB55 (if false)
BB53   <- [52]
  fs              %53.0 = FrameState         R     0x558467c55970+1596: [%52.5], env=e4.3
  void                    Deopt              !v    %53.0   !
BB146   <- [54]
  goto BB60
BB55   <- [54]
  val?^ | miss    %55.0 = LdVar              eR    type, e4.3
  val?            %55.1 = Force!<lazy>       !v    %55.0, e4.3   <str$->
  lgl$#-          %55.2 = IsType                   %55.1 isA val?-
  cp              %55.3 = Checkpoint                -> BB57 (default) | BB56 (if assume failed)
BB60   <- [59, 146]
  lgl$-           %60.0 = Phi                      %59.3:BB59, %54.3:BB146
  lgl$-           %60.1 = AsLogical                %60.0
  lgl$#-          %60.2 = Identical                %60.1, false
  cp              %60.3 = Checkpoint                -> BB62 (default) | BB61 (if assume failed)
BB57   <- [55]
  void                    Assume             D     %55.2, %55.3 (Typecheck@0x558467ed49c8[Type#71])
  val?-           %57.1 = CastType           d     dn %55.1   <str$->
  lgl-            %57.2 = Eq                 wed   %57.1, "hclust", elided   <lgl$->
  lgl$#-          %57.3 = IsType                   %57.2 isA lgl$-
  cp              %57.4 = Checkpoint                -> BB59 (default) | BB58 (if assume failed)
BB56   <- [55]
  fs              %56.0 = FrameState         R     0x558467c55970+1618: [%54.3, %55.1], env=e4.3
  void                    Deopt              !v    %56.0   !
BB62   <- [60]
  void                    Branch                   %60.2 -> BB145 (if true) | BB63 (if false)
BB61   <- [60]
  fs              %61.0 = FrameState         R     0x558467c55970+1637: [%60.0], env=e4.3
  void                    Deopt              !v    %61.0   !
BB59   <- [57]
  void                    Assume             D     %57.3, %57.4 (Typecheck@0x558467ed49c8[Type#72])
  lgl$-           %59.1 = CastType           d     dn %57.2
  lgl$-           %59.2 = AsLogical                %59.1
  lgl$-           %59.3 = LAnd                     %54.3, %59.2
  goto BB60
BB58   <- [57]
  fs              %58.0 = FrameState         R     0x558467c55970+1630: [%54.3, %57.2], env=e4.3
  void                    Deopt              !v    %58.0   !
BB145   <- [62]
  goto BB64
BB63   <- [62]
  val?^ | miss    %63.0 = LdVar              eR    k, e4.3
  lgl$#-          %63.1 = IsType                   %63.0 isA int$-
  void                    Assume             D     %63.1, %60.3 (Typecheck@0x558467ed49c8[Type#73])
  int$-           %63.3 = CastType           d     dn %63.0
  lgl$-           %63.4 = Neq                d     %63.3, 2, elided   <lgl$->
  lgl$-           %63.5 = AsLogical                %63.4
  lgl$-           %63.6 = LAnd                     %60.1, %63.5
  goto BB64
BB64   <- [145, 63]
  lgl$-           %64.0 = Phi                      %63.6:BB63, %60.1:BB145
  lgl$#-          %64.1 = CheckTrueFalse     e     %64.0
  void                    Branch                   %64.1 -> BB144 (if true) | BB65 (if false)
BB144   <- [64]
  (cls|spec|blt)  %144.0 = LdFun              !v    warning, e4.3
  fs              %144.1 = FrameState         R     0x558467c55970+1688: [%144.0], env=e4.3
  void                    Deopt              !v    %144.1, DeadCall@0x558467ed49c8[Call#18], %144.0   !
BB65   <- [64]
  val?^ | miss    %65.0 = LdVar              eR    .memberDend, e4.3
  lgl$#-          %65.1 = Identical                %65.0, function(x) <(rir::DispatchTable*)0x55846762ec|...
  void                    Assume             D     %65.1, %60.3 (CallTarget@0x558467ed49c8[Call#19])
  prom-           %65.3 = MkArg                    unboundValue, setmid[0x55846defe0a0]_p3, e4.3
  val?^           %65.4 = CastType                 up %65.3
  val?^ | miss    %65.5 = LdVar              eR    %||%, <env 0x55846731fb50>
  lgl$#-          %65.6 = Identical                %65.5, function(L, R) <(rir::DispatchTable*)0x5584670|...
  void                    Assume             D     %65.6, %60.3 (CallTarget@0x55846b7a66e8[Call#0])
  env             e65.8 = MkEnv              l     x=%65.4, parent=<env 0x55846731fb50>, context 0
  prom-           %65.9 = MkArg                    unboundValue, setmid[0x55846defe0a0]_p27, e65.8
  val?^           %65.10 = CastType                 up %65.9
  val?^ | miss    %65.11 = LdVar              eR    attr, <env 0x55846731fb50>
  lgl$#-          %65.12 = Identical                %65.11, <blt attr>
  void                    Assume             D     %65.12, %60.3 (CallTarget@0x55846b7a66e8[Call#1])
  val?            %65.14 = Force!<lazy>       !vL   %65.4, e65.8   <(int|vec)>
  val?            %65.15 = CallBuiltin        !v    attr(%65.14, "x.member") e65.8   <nil->
  lgl$-           %65.16 = Is                       %65.15, NULL
  prom-           %65.17 = MkArg                    %65.15, setmid[0x55846defe0a0]_p25 (!refl), e65.8
  val?~           %65.18 = CastType                 up %65.17
  lgl$#-          %65.19 = CheckTrueFalse     e     %65.16
  env             e65.20 = (MkEnv)            l     L=%65.18, R=%65.10, parent=<env 0x55846731fb50>, context -1
  void                    Branch                   %65.19 -> BB141 (if true) | BB66 (if false)
BB141   <- [65]
  val?            %141.0 = Force!<lazy>       !vL   %65.10, e65.20   <(int|real)$->
  cp              %141.1 = Checkpoint                -> BB143 (default) | BB142 (if assume failed)
BB66   <- [65]
  goto BB67
BB143   <- [141]
  lgl$#-          %143.0 = IsEnvStub          R     , e65.20
  void                    Assume             D     %143.0, %141.1 (EnvStubMaterialized@0x55846b7a6848[Call#unknown])
  goto BB67
BB142   <- [141]
  fs              %142.0 = FrameState         R     0x558467c55970+1748: [], env=e4.3
  fs              %142.1 = FrameState         R     0x55846762eb70+37: [], env=e65.8, next=%142.0
  fs              %142.2 = FrameState         R     0x5584670b9890+53: [%141.0], env=e65.20, next=%142.1
  void                    Deopt              !v    %142.2   !
BB67   <- [143, 66]
  val?            %67.0 = Phi                      %65.15:BB66, %141.0:BB143   <int$->
  lgl$#-          %67.1 = IsType                   %67.0 isA int$-
  cp              %67.2 = Checkpoint                -> BB69 (default) | BB68 (if assume failed)
BB69   <- [67]
  void                    Assume             D     %67.1, %67.2 (Typecheck@0x55846b7a66e8[Type#5])
  int$-           %69.1 = CastType           d     dn %67.0
  val?^ | miss    %69.2 = LdVar              eR    midS, e4.3
  lgl$#-          %69.3 = IsType                   %69.2 isA real$-
  void                    Assume             D     %69.3, %67.2 (Typecheck@0x558467ed49c8[Type#78])
  real$-          %69.5 = CastType           d     dn %69.2
  real$-          %69.6 = Add                d     %69.1, %69.5, elided   <real$->
  real$-          %69.7 = Div                d     %69.6, 2, elided   <real$->
  (cls|spec|blt)  %69.8 = LdFun              !v    attr<-, <0x558466cd3e08>, e4.3
  val?^ | miss    %69.9 = LdVar              eR    r, e4.3
  val?            %69.10 = Force!<value>      !v    %69.9, e4.3   <vec>
  val?            %69.11 = NamedCall          !v    %69.8(%69.10, "midpoint", value=%69.7) e4.3   <vec>
  void                    StVar              lW    r, %69.11, e4.3
  val             %69.13 = ChkMissing         e     %69.11
  void                    StVar              lW    d, %69.11, e4.3
  goto BB70
BB68   <- [67]
  fs              %68.0 = FrameState         R     0x558467c55970+1748: [], env=e4.3
  fs              %68.1 = FrameState         R     0x55846762eb70+37: [], env=e65.8, next=%68.0
  fs              %68.2 = FrameState         R     0x5584670b9890+58: [%67.0], env=e65.20, next=%68.1
  void                    Deopt              !v    %68.2   !
BB70   <- [69, 130]
  val?^ | miss    %70.0 = LdVar              eR    depth, e4.3
  val?            %70.1 = Force!<value>      !v    %70.0, e4.3   <int$->
  lgl$#-          %70.2 = CheckTrueFalse     we    %70.1
  void                    Branch                   %70.2 -> BB79 (if true) | BB71 (if false)
BB79   <- [70]
  val?^ | miss    %79.0 = LdVar              eR    kk, e4.3
  val?            %79.1 = Force!<value>      !v    %79.0, e4.3   <int->
  lgl$#-          %79.2 = IsType                   %79.1 isA val+   <true>
  lgl$#-          %79.3 = IsType                   %79.1 isA int-
  cp              %79.4 = Checkpoint                -> BB81 (default) | BB80 (if assume failed)
BB71   <- [70]
  goto BB72
BB81   <- [79]
  void                    Assume             D     %79.2, %79.4 (DeadBranchReached@0x558467ed49c8[Test#10])
  val?^ | miss    %81.1 = LdVar              eR    depth, e4.3
  lgl$#-          %81.2 = IsType                   %81.1 isA int$-
  void                    Assume             D     %81.2, %79.4 (Typecheck@0x558467ed49c8[Type#86])
  int$-           %81.4 = CastType           d     dn %81.1
  void                    Assume             D     %79.3, %79.4 (Typecheck@0x558467ed49c8[Type#84])
  int-            %81.6 = CastType           d     dn %79.1
  int-            %81.7 = Extract1_1D        wed   %81.6, %81.4, elided   <int$->
  lgl$#-          %81.8 = IsType                   %81.7 isA int$-
  cp              %81.9 = Checkpoint                -> BB83 (default) | BB82 (if assume failed)
BB80   <- [79]
  fs              %80.0 = FrameState         R     0x558467c55970+1915: [%79.1], env=e4.3
  void                    Deopt              !v    %80.0   !
BB83   <- [81]
  void                    Assume             D     %81.8, %81.9 (Typecheck@0x558467ed49c8[Type#87])
  int$-           %83.1 = CastType           d     dn %81.7
  void                    StVar              lW    k, %83.1, e4.3
  val?^ | miss    %83.3 = LdVar              eR    jj, e4.3
  val?            %83.4 = Force!<value>      !v    %83.3, e4.3   <int->
  lgl$#-          %83.5 = IsType                   %83.4 isA val+   <true>
  lgl$#-          %83.6 = IsType                   %83.4 isA int-
  cp              %83.7 = Checkpoint                -> BB85 (default) | BB84 (if assume failed)
BB82   <- [81]
  fs              %82.0 = FrameState         R     0x558467c55970+1966: [%81.7], env=e4.3
  void                    Deopt              !v    %82.0   !
BB85   <- [83]
  void                    Assume             D     %83.5, %83.7 (DeadBranchReached@0x558467ed49c8[Test#11])
  val?^ | miss    %85.1 = LdVar              eR    depth, e4.3
  lgl$#-          %85.2 = IsType                   %85.1 isA int$-
  void                    Assume             D     %85.2, %83.7 (Typecheck@0x558467ed49c8[Type#90])
  int$-           %85.4 = CastType           d     dn %85.1
  void                    Assume             D     %83.6, %83.7 (Typecheck@0x558467ed49c8[Type#88])
  int-            %85.6 = CastType           d     dn %83.4
  int-            %85.7 = Extract1_1D        wed   %85.6, %85.4, elided   <int$->
  lgl$#-          %85.8 = IsType                   %85.7 isA int$-
  cp              %85.9 = Checkpoint                -> BB87 (default) | BB86 (if assume failed)
BB84   <- [83]
  fs              %84.0 = FrameState         R     0x558467c55970+1990: [%83.4], env=e4.3
  void                    Deopt              !v    %84.0   !
BB87   <- [85]
  void                    Assume             D     %85.8, %85.9 (Typecheck@0x558467ed49c8[Type#91])
  int$-           %87.1 = CastType           d     dn %85.7
  void                    StVar              lW    j, %87.1, e4.3
  val?^ | miss    %87.3 = LdVar              eR    dd, e4.3
  val?            %87.4 = Force!<value>      !v    %87.3, e4.3   <vec->
  lgl$#-          %87.5 = IsType                   %87.4 isA val+   <true>
  lgl$#-          %87.6 = IsType                   %87.4 isA val?-
  cp              %87.7 = Checkpoint                -> BB89 (default) | BB88 (if assume failed)
BB86   <- [85]
  fs              %86.0 = FrameState         R     0x558467c55970+2041: [%85.7], env=e4.3
  void                    Deopt              !v    %86.0   !
BB89   <- [87]
  void                    Assume             D     %87.5, %87.7 (DeadBranchReached@0x558467ed49c8[Test#12])
  val?^ | miss    %89.1 = LdVar              eR    depth, e4.3
  lgl$#-          %89.2 = IsType                   %89.1 isA int$-
  void                    Assume             D     %89.2, %87.7 (Typecheck@0x558467ed49c8[Type#94])
  int$-           %89.4 = CastType           d     dn %89.1
  void                    Assume             D     %87.6, %87.7 (Typecheck@0x558467ed49c8[Type#92])
  val?-           %89.6 = CastType           d     dn %87.4   <vec->
  val?            %89.7 = Extract2_1D        wed   %89.6, %89.4, elided   <vec>
  void                    StVar              lW    r, %89.7, e4.3
  cp              %89.9 = Checkpoint                -> BB91 (default) | BB90 (if assume failed)
BB88   <- [87]
  fs              %88.0 = FrameState         R     0x558467c55970+2065: [%87.4], env=e4.3
  void                    Deopt              !v    %88.0   !
BB91   <- [89]
  val?^ | miss    %91.0 = LdVar              eR    unclass, e4.3
  lgl$#-          %91.1 = Identical                <blt unclass>, %91.0   <true>
  void                    Assume             D     %91.1, %89.9 (DeadBranchReached@0x558467ed49c8[Test#13])
  val?^ | miss    %91.3 = LdVar              eR    d, e4.3
  val?            %91.4 = Force!<value>      !v    %91.3, e4.3   <vec>
  val?            %91.5 = CallBuiltin        !v    unclass(%91.4) e4.3   <vec+>
  val?^ | miss    %91.6 = LdVar              eR    r !upd, e4.3
  val?            %91.7 = Force!<value>      !v    %91.6, e4.3   <vec>
  cp              %91.8 = Checkpoint                -> BB93 (default) | BB92 (if assume failed)
BB90   <- [89]
  fs              %90.0 = FrameState         R     0x558467c55970+2131: [], env=e4.3
  void                    Deopt              !v    %90.0   !
BB93   <- [91]
  val?^ | miss    %93.0 = LdVar              eR    j, e4.3
  lgl$#-          %93.1 = IsType                   %93.0 isA int$-
  void                    Assume             D     %93.1, %91.8 (Typecheck@0x558467ed49c8[Type#100])
  int$-           %93.3 = CastType           d     dn %93.0
  val?            %93.4 = Subassign2_1D      !v    %91.5, %91.7, %93.3, e4.3
  void                    StVar              lW    r, %93.4, e4.3
  cp              %93.6 = Checkpoint                -> BB95 (default) | BB94 (if assume failed)
BB92   <- [91]
  fs              %92.0 = FrameState         R     0x558467c55970+2236: [%91.5, %91.7], env=e4.3
  void                    Deopt              !v    %92.0   !
BB95   <- [93]
  val?^ | miss    %95.0 = LdVar              eR    j, e4.3
  lgl$#-          %95.1 = IsType                   %95.0 isA int$-
  void                    Assume             D     %95.1, %93.6 (Typecheck@0x558467ed49c8[Type#101])
  int$-           %95.3 = CastType           d     dn %95.0
  val?^ | miss    %95.4 = LdVar              eR    k, e4.3
  lgl$#-          %95.5 = IsType                   %95.4 isA int$-
  void                    Assume             D     %95.5, %93.6 (Typecheck@0x558467ed49c8[Type#102])
  int$-           %95.7 = CastType           d     dn %95.4
  lgl$-           %95.8 = Lt                 d     %95.3, %95.7, elided   <lgl$->
  lgl$#-          %95.9 = CheckTrueFalse     e     %95.8
  void                    Branch                   %95.9 -> BB140 (if true) | BB96 (if false)
BB94   <- [93]
  fs              %94.0 = FrameState         R     0x558467c55970+2265: [], env=e4.3
  void                    Deopt              !v    %94.0   !
BB140   <- [95]
  goto BB72
BB96   <- [95]
  val?^ | miss    %96.0 = LdVar              eR    depth, e4.3
  lgl$#-          %96.1 = IsType                   %96.0 isA int$-
  void                    Assume             D     %96.1, %93.6 (Typecheck@0x558467ed49c8[Type#104])
  int$-           %96.3 = CastType           d     dn %96.0
  int$-           %96.4 = Sub                d     %96.3, 1L, elided   <int$->
  void                    StVar              lW    depth, %96.4, e4.3
  cp              %96.6 = Checkpoint                -> BB98 (default) | BB97 (if assume failed)
BB98   <- [96]
  val?^ | miss    %98.0 = LdVar              eR    verbose, e4.3
  lgl$#-          %98.1 = IsType                   %98.0 isA lgl$-
  void                    Assume             D     %98.1, %96.6 (Typecheck@0x558467ed49c8[Type#106])
  lgl$-           %98.3 = CastType           d     dn %98.0
  lgl$#-          %98.4 = CheckTrueFalse     e     %98.3
  void                    Branch                   %98.4 -> BB139 (if true) | BB99 (if false)
BB97   <- [96]
  fs              %97.0 = FrameState         R     0x558467c55970+2355: [], env=e4.3
  void                    Deopt              !v    %97.0   !
BB139   <- [98]
  (cls|spec|blt)  %139.0 = LdFun              !v    cat, e4.3
  fs              %139.1 = FrameState         R     0x558467c55970+2385: [%139.0], env=e4.3
  void                    Deopt              !v    %139.1, DeadCall@0x558467ed49c8[Call#22], %139.0   !
BB99   <- [98]
  val?^ | miss    %99.0 = LdVar              eR    sum, e4.3
  lgl$#-          %99.1 = Identical                <blt sum>, %99.0   <true>
  void                    Assume             D     %99.1, %96.6 (DeadBranchReached@0x558467ed49c8[Test#14])
  val?^ | miss    %99.3 = LdVar              eR    vapply, e4.3
  lgl$#-          %99.4 = Identical                %99.3, function(X, FUN, FUN.VALUE, ..., USE.NAMES=TRU|...
  void                    Assume             D     %99.4, %96.6 (CallTarget@0x558467ed49c8[Call#26])
  prom-           %99.6 = MkArg                    unboundValue, setmid[0x55846defe0a0]_p5 (!refl), e4.3
  prom-           %99.7 = MkArg                    unboundValue, setmid[0x55846defe0a0]_p6, e4.3
  ct              %99.8 = PushContext        lCL   %99.6, %99.7, 0, vapply(r, .midDend, 0), function(X, FUN, FUN.VALUE, ..., USE.NAMES=TRU|..., e4.3
  val?^           %99.9 = CastType                 up %99.7
  val?^           %99.10 = CastType                 up %99.6
  cp              %99.11 = Checkpoint                -> BB101 (default) | BB100 (if assume failed)
BB101   <- [99]
  env             e101.0 = MkEnv              l     X=%99.10, FUN=%99.9, FUN.VALUE=0, ...(miss)=missingArg, USE.NAMES(miss)=true, parent=R_BaseNamespace, context 1
  val?^ | miss    %101.1 = LdVar              eR    match.fun, e101.0
  lgl$#-          %101.2 = Identical                %101.1, function(FUN, descend=TRUE) <(rir::DispatchTab|...
  void                    Assume             D     %101.2, %99.11 (CallTarget@0x55846af82080[Call#0])
  prom-           %101.4 = MkArg                    unboundValue, setmid[0x55846defe0a0]_p31, e101.0
  val?            %101.5 = StaticCall         !v    match.fun[0x55846973fe90](%101.4) e101.0   <(cls|blt)->
  void                    StVar              lW    FUN, %101.5, e101.0
  cp              %101.7 = Checkpoint                -> BB103 (default) | BB102 (if assume failed)
BB100   <- [99]
  fs              %100.0 = FrameState         R     0x558467c55970+2515: [<blt sum>], env=e4.3
  env             e100.1 = (MkEnv)            l     X=%99.10, FUN=%99.9, FUN.VALUE=0, ...(miss)=missingArg, USE.NAMES(miss)=true, parent=R_BaseNamespace, context 1
  fs              %100.2 = FrameState         R     0x55846afea720+0: [], env=e100.1, next=%100.0
  void                    Deopt              !v    %100.2   !
BB103   <- [101]
  val?^ | miss    %103.0 = LdVar              eR    is.vector, e101.0
  lgl$#-          %103.1 = Identical                %103.0, function(x, mode="any") <(rir::DispatchTable*)|...
  void                    Assume             D     %103.1, %101.7 (CallTarget@0x55846af82080[Call#1])
  val?^ | miss    %103.3 = LdVar              eR    X, e101.0
  val?            %103.4 = Force!<lazy>       !v    %103.3, e101.0   <vec>
  lgl$#-          %103.5 = CallSafeBuiltin    wed   is.vector(%103.4, "any")    <lgl$->
  cp              %103.6 = Checkpoint                -> BB105 (default) | BB104 (if assume failed)
BB102   <- [101]
  fs              %102.0 = FrameState         R     0x558467c55970+2515: [<blt sum>], env=e4.3
  fs              %102.1 = FrameState         R     0x55846afea720+46: [], env=e101.0, next=%102.0
  void                    Deopt              !v    %102.1   !
BB105   <- [103]
  lgl$#-          %105.0 = Not                d     %103.5, elided
  void                    Branch                   %103.5 -> BB138 (if true) | BB106 (if false)
BB104   <- [103]
  fs              %104.0 = FrameState         R     0x558467c55970+2515: [<blt sum>], env=e4.3
  fs              %104.1 = FrameState         R     0x55846afea720+78: [], env=e101.0, next=%104.0
  prom-           %104.2 = MkArg                    %103.4, setmid[0x55846defe0a0]_p32 (!refl), e101.0
  val?~           %104.3 = CastType                 up %104.2
  env             e104.4 = (MkEnv)            l     mode(miss)="any", x=%104.3, parent=R_BaseNamespace, context 0
  fs              %104.5 = FrameState         R     0x55846b1097d0+41: [%103.5], env=e104.4, next=%104.1
  void                    Deopt              !v    %104.5   !
BB138   <- [105]
  val?^ | miss    %138.0 = LdVar              eR    is.object, e101.0
  lgl$#-          %138.1 = Identical                <blt is.object>, %138.0   <true>
  void                    Assume             D     %138.1, %103.6 (DeadBranchReached@0x55846af82080[Test#0])
  val?^ | miss    %138.3 = LdVar              eR    X, e101.0
  val?            %138.4 = Force!<wrapped>    !v    %138.3, e101.0   <vec$->
  lgl$#-          %138.5 = CallSafeBuiltin    wed   is.object(%138.4)    <lgl$->
  lgl$-           %138.6 = LOr                      %105.0, %138.5
  goto BB107
BB106   <- [105]
  goto BB107
BB107   <- [106, 138]
  lgl$-           %107.0 = Phi                      %138.6:BB138, %105.0:BB106
  cp              %107.1 = Checkpoint                -> BB109 (default) | BB108 (if assume failed)
BB109   <- [107]
  lgl$#-          %109.0 = CheckTrueFalse     e     %107.0
  void                    Branch                   %109.0 -> BB137 (if true) | BB110 (if false)
BB108   <- [107]
  fs              %108.0 = FrameState         R     0x558467c55970+2515: [<blt sum>], env=e4.3
  fs              %108.1 = FrameState         R     0x55846afea720+189: [%107.0], env=e101.0, next=%108.0
  void                    Deopt              !v    %108.1   !
BB137   <- [109]
  val?^ | miss    %137.0 = LdVar              eR    as.list, e101.0
  lgl$#-          %137.1 = Identical                %137.0, function(x, ...) <(rir::DispatchTable*)0x55846|...
  void                    Assume             D     %137.1, %107.1 (CallTarget@0x55846af82080[Call#3])
  val?^ | miss    %137.3 = LdVar              eR    X, e101.0
  val?            %137.4 = Force!<wrapped>    !v    %137.3, e101.0   <vec>
  val?            %137.5 = StaticCall         !v    as.list[0x5584697d7490](%137.4) { 0 } e101.0   <vec>
  void                    StVar              lW    X, %137.5, e101.0
  goto BB111
BB110   <- [109]
  goto BB111
BB111   <- [110, 137]
  (cls|spec|blt)  %111.0 = LdFun              !v    .Internal, <0x558466ccf698>, e101.0
  prom-           %111.1 = MkArg                    unboundValue, setmid[0x55846defe0a0]_p33, e101.0
  val?            %111.2 = Call               !v    %111.0(%111.1) e101.0   <(lgl|real)->
  val?            %111.3 = PopContext         C     %111.2, %99.8   <real->
  lgl$#-          %111.4 = IsType                   %111.3 isA real-
  cp              %111.5 = Checkpoint                -> BB113 (default) | BB112 (if assume failed)
BB113   <- [111]
  void                    Assume             D     %111.4, %111.5 (Typecheck@0x558467ed49c8[Type#115])
  real-           %113.1 = CastType           d     dn %111.3
  real$-          %113.2 = CallSafeBuiltin    wed   sum(%113.1)    <real$->
  void                    StVar              lW    midS, %113.2, e4.3
  val?^ | miss    %113.4 = LdVar              eR    quiet, e4.3
  val?            %113.5 = Force!<wrapped>    !v    %113.4, e4.3   <lgl$->
  lgl$#-          %113.6 = IsType                   %113.5 isA lgl$-
  cp              %113.7 = Checkpoint                -> BB115 (default) | BB114 (if assume failed)
BB112   <- [111]
  fs              %112.0 = FrameState         R     0x558467c55970+2515: [<blt sum>, %111.3], env=e4.3
  void                    Deopt              !v    %112.0   !
BB115   <- [113]
  void                    Assume             D     %113.6, %113.7 (Typecheck@0x558467ed49c8[Type#117])
  lgl$-           %115.1 = CastType           d     dn %113.5
  lgl$-           %115.2 = Not                d     %115.1, elided
  lgl$-           %115.3 = AsLogical                %115.2
  lgl$#-          %115.4 = Identical                %115.3, false
  void                    Branch                   %115.4 -> BB136 (if true) | BB116 (if false)
BB114   <- [113]
  fs              %114.0 = FrameState         R     0x558467c55970+2560: [%113.5], env=e4.3
  void                    Deopt              !v    %114.0   !
BB136   <- [115]
  goto BB121
BB116   <- [115]
  val?^ | miss    %116.0 = LdVar              eR    type, e4.3
  val?            %116.1 = Force!<wrapped>    !v    %116.0, e4.3   <str$->
  lgl$#-          %116.2 = IsType                   %116.1 isA val?-
  cp              %116.3 = Checkpoint                -> BB118 (default) | BB117 (if assume failed)
BB121   <- [120, 136]
  lgl$-           %121.0 = Phi                      %120.3:BB120, %115.3:BB136
  lgl$-           %121.1 = AsLogical                %121.0
  lgl$#-          %121.2 = Identical                %121.1, false
  cp              %121.3 = Checkpoint                -> BB123 (default) | BB122 (if assume failed)
BB118   <- [116]
  void                    Assume             D     %116.2, %116.3 (Typecheck@0x558467ed49c8[Type#118])
  val?-           %118.1 = CastType           d     dn %116.1   <str$->
  lgl-            %118.2 = Eq                 wed   %118.1, "hclust", elided   <lgl$->
  lgl$#-          %118.3 = IsType                   %118.2 isA lgl$-
  cp              %118.4 = Checkpoint                -> BB120 (default) | BB119 (if assume failed)
BB117   <- [116]
  fs              %117.0 = FrameState         R     0x558467c55970+2582: [%115.3, %116.1], env=e4.3
  void                    Deopt              !v    %117.0   !
BB123   <- [121]
  void                    Branch                   %121.2 -> BB135 (if true) | BB124 (if false)
BB122   <- [121]
  fs              %122.0 = FrameState         R     0x558467c55970+2601: [%121.0], env=e4.3
  void                    Deopt              !v    %122.0   !
BB120   <- [118]
  void                    Assume             D     %118.3, %118.4 (Typecheck@0x558467ed49c8[Type#119])
  lgl$-           %120.1 = CastType           d     dn %118.2
  lgl$-           %120.2 = AsLogical                %120.1
  lgl$-           %120.3 = LAnd                     %115.3, %120.2
  goto BB121
BB119   <- [118]
  fs              %119.0 = FrameState         R     0x558467c55970+2594: [%115.3, %118.2], env=e4.3
  void                    Deopt              !v    %119.0   !
BB135   <- [123]
  goto BB125
BB124   <- [123]
  val?^ | miss    %124.0 = LdVar              eR    k, e4.3
  lgl$#-          %124.1 = IsType                   %124.0 isA int$-
  void                    Assume             D     %124.1, %121.3 (Typecheck@0x558467ed49c8[Type#120])
  int$-           %124.3 = CastType           d     dn %124.0
  lgl$-           %124.4 = Neq                d     %124.3, 2, elided   <lgl$->
  lgl$-           %124.5 = AsLogical                %124.4
  lgl$-           %124.6 = LAnd                     %121.1, %124.5
  goto BB125
BB125   <- [135, 124]
  lgl$-           %125.0 = Phi                      %124.6:BB124, %121.1:BB135
  lgl$#-          %125.1 = CheckTrueFalse     e     %125.0
  void                    Branch                   %125.1 -> BB134 (if true) | BB126 (if false)
BB134   <- [125]
  (cls|spec|blt)  %134.0 = LdFun              !v    warning, e4.3
  fs              %134.1 = FrameState         R     0x558467c55970+2652: [%134.0], env=e4.3
  void                    Deopt              !v    %134.1, DeadCall@0x558467ed49c8[Call#27], %134.0   !
BB126   <- [125]
  val?^ | miss    %126.0 = LdVar              eR    .memberDend, e4.3
  lgl$#-          %126.1 = Identical                %126.0, function(x) <(rir::DispatchTable*)0x55846762ec|...
  void                    Assume             D     %126.1, %121.3 (CallTarget@0x558467ed49c8[Call#28])
  prom-           %126.3 = MkArg                    unboundValue, setmid[0x55846defe0a0]_p7, e4.3
  val?^           %126.4 = CastType                 up %126.3
  env             e126.5 = MkEnv              l     x=%126.4, parent=<env 0x55846731fb50>, context 0
  val?^ | miss    %126.6 = LdVar              eR    %||%, e126.5
  lgl$#-          %126.7 = Identical                %126.6, function(L, R) <(rir::DispatchTable*)0x5584670|...
  void                    Assume             D     %126.7, %121.3 (CallTarget@0x55846b7a66e8[Call#0])
  prom-           %126.9 = MkArg                    unboundValue, setmid[0x55846defe0a0]_p40, e126.5
  val?^           %126.10 = CastType                 up %126.9
  val?^ | miss    %126.11 = LdVar              eR    attr, e126.5
  lgl$#-          %126.12 = Identical                %126.11, <blt attr>
  void                    Assume             D     %126.12, %121.3 (CallTarget@0x55846b7a66e8[Call#1])
  val?            %126.14 = Force!<lazy>       !v    %126.4, e126.5   <(int|vec)>
  val?            %126.15 = CallBuiltin        !v    attr(%126.14, "x.member") e126.5   <nil->
  lgl$-           %126.16 = Is                       %126.15, NULL
  prom-           %126.17 = MkArg                    %126.15, setmid[0x55846defe0a0]_p38 (!refl), e126.5
  val?~           %126.18 = CastType                 up %126.17
  lgl$#-          %126.19 = CheckTrueFalse     e     %126.16
  env             e126.20 = (MkEnv)            l     L=%126.18, R=%126.10, parent=<env 0x55846731fb50>, context -1
  void                    Branch                   %126.19 -> BB131 (if true) | BB127 (if false)
BB131   <- [126]
  val?            %131.0 = Force!<lazy>       !vL   %126.10, e126.20   <(int|real)$->
  cp              %131.1 = Checkpoint                -> BB133 (default) | BB132 (if assume failed)
BB127   <- [126]
  goto BB128
BB133   <- [131]
  lgl$#-          %133.0 = IsEnvStub          R     , e126.20
  void                    Assume             D     %133.0, %131.1 (EnvStubMaterialized@0x55846b7a6848[Call#unknown])
  goto BB128
BB132   <- [131]
  fs              %132.0 = FrameState         R     0x558467c55970+2712: [], env=e4.3
  fs              %132.1 = FrameState         R     0x55846762eb70+37: [], env=e126.5, next=%132.0
  fs              %132.2 = FrameState         R     0x5584670b9890+53: [%131.0], env=e126.20, next=%132.1
  void                    Deopt              !v    %132.2   !
BB128   <- [133, 127]
  val?            %128.0 = Phi                      %126.15:BB127, %131.0:BB133   <int$->
  lgl$#-          %128.1 = IsType                   %128.0 isA int$-
  cp              %128.2 = Checkpoint                -> BB130 (default) | BB129 (if assume failed)
BB130   <- [128]
  void                    Assume             D     %128.1, %128.2 (Typecheck@0x55846b7a66e8[Type#5])
  int$-           %130.1 = CastType           d     dn %128.0
  val?^ | miss    %130.2 = LdVar              eR    midS, e4.3
  lgl$#-          %130.3 = IsType                   %130.2 isA real$-
  void                    Assume             D     %130.3, %128.2 (Typecheck@0x558467ed49c8[Type#125])
  real$-          %130.5 = CastType           d     dn %130.2
  real$-          %130.6 = Add                d     %130.1, %130.5, elided   <real$->
  real$-          %130.7 = Div                d     %130.6, 2, elided   <real$->
  (cls|spec|blt)  %130.8 = LdFun              !v    attr<-, <0x558466cd3e08>, e4.3
  val?^ | miss    %130.9 = LdVar              eR    r, e4.3
  val?            %130.10 = Force!<value>      !v    %130.9, e4.3   <vec>
  val?            %130.11 = NamedCall          !v    %130.8(%130.10, "midpoint", value=%130.7) e4.3   <vec>
  void                    StVar              lW    r, %130.11, e4.3
  val             %130.13 = ChkMissing         e     %130.11
  void                    StVar              lW    d, %130.11, e4.3
  goto BB70
BB129   <- [128]
  fs              %129.0 = FrameState         R     0x558467c55970+2712: [], env=e4.3
  fs              %129.1 = FrameState         R     0x55846762eb70+37: [], env=e126.5, next=%129.0
  fs              %129.2 = FrameState         R     0x5584670b9890+58: [%128.0], env=e126.20, next=%129.1
  void                    Deopt              !v    %129.2   !
Prom 0:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    d, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <(int|vec)>
  void                    Return             l     %1.3
Prom 1:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    r, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <vec>
  void                    Return             l     %1.3
Prom 2:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    .midDend, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <cls->
  void                    Return             l     %1.3
Prom 3:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    r, e1.0
  val?            %1.2  = Force<value>       !v    %1.1, e1.0   <vec>
  val?            %1.3  = Extract2_1D        !v    %1.2, 1L, e1.0   <int$>
  void                    Visible            v     
  void                    Return             l     %1.3
Prom 5:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    r, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <vec>
  void                    Return             l     %1.3
Prom 6:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    .midDend, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <cls->
  void                    Return             l     %1.3
Prom 7:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    r, e1.0
  val?            %1.2  = Force<value>       !v    %1.1, e1.0   <vec>
  val?            %1.3  = Extract2_1D        !v    %1.2, 1L, e1.0   <(int|vec)>
  void                    Visible            v     
  void                    Return             l     %1.3
Prom 9:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    j, e1.0
  val?            %1.2  = Force<value>       !v    %1.1, e1.0   <int$->
  val?            %1.3  = Add                !v    %1.2, 1L, e1.0   <int$->
  val?^ | miss    %1.4  = LdVar              eR    jj !upd, e1.0
  val?            %1.5  = Force<value>       !v    %1.4, e1.0   <int->
  val?^ | miss    %1.6  = LdVar              eR    depth, e1.0
  val?            %1.7  = Force<value>       !v    %1.6, e1.0   <int$->
  val?            %1.8  = Subassign1_1D      !v    %1.3, %1.5, %1.7, e1.0
  void                    StVar              lW    jj, %1.8, e1.0
  void                    Invisible          v     
  void                    Return             l     %1.3
Prom 10:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    jj, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <int->
  void                    Return             l     %1.3
Prom 11:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    kk, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<value>       !     %1.1, e1.0   <int->
  void                    Return             l     %1.3
Prom 12:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    jj !upd, e1.0
  val?            %1.2  = Force<value>       !v    %1.1, e1.0   <int->
  val?^ | miss    %1.3  = LdVar              eR    depth, e1.0
  val?            %1.4  = Force<value>       !v    %1.3, e1.0   <int$->
  val?            %1.5  = Subassign1_1D      wed   1L, %1.2, %1.4, e1.0
  void                    StVar              lW    jj, %1.5, e1.0
  void                    Invisible          v     
  void                    Return             l     1L
Prom 18:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    FUN, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <(cls|blt)->
  void                    Return             l     %1.3
Prom 19:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    X, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <vec>
  void                    Return             l     %1.3
Prom 20:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     vapply, e1.0
  prom-           %1.2  = MkArg                    unboundValue, setmid[0x55846defe0a0]_p21, e1.0
  prom-           %1.3  = MkArg                    unboundValue, setmid[0x55846defe0a0]_p22, e1.0
  prom-           %1.4  = MkArg                    unboundValue, setmid[0x55846defe0a0]_p23, e1.0
  prom-           %1.5  = MkArg                    unboundValue, setmid[0x55846defe0a0]_p24, e1.0
  val?            %1.6  = Call               !     %1.1(%1.2, %1.3, %1.4, %1.5) e1.0   <val?_>
  void                    Return             l     %1.6
Prom 21:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    X, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 22:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    FUN, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 23:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    FUN.VALUE, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 24:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    USE.NAMES, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 25:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     attr, <0x558466cd0080>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, setmid[0x55846defe0a0]_p26, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2, "x.member") e1.0   <nil->
  void                    Return             l     %1.3
Prom 26:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    x, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <(int|vec)>
  void                    Return             l     %1.3
Prom 27:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !v    %||%, <0x558468b0c558>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, setmid[0x55846defe0a0]_p28, e1.0
  val?            %1.3  = Call               !v    %1.1(%1.2, 1L) e1.0   <int$->
  void                    Visible            v     
  void                    Return             l     %1.3
Prom 28:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     attr, <0x558466cd0080>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, setmid[0x55846defe0a0]_p29, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2, "members") e1.0   <(nil|int)->
  void                    Return             l     %1.3
Prom 29:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    x, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <(int|vec)>
  void                    Return             l     %1.3
Prom 31:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    FUN, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <(cls|blt)->
  void                    Return             l     %1.3
Prom 32:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    X, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <vec>
  void                    Return             l     %1.3
Prom 33:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     vapply, e1.0
  prom-           %1.2  = MkArg                    unboundValue, setmid[0x55846defe0a0]_p34, e1.0
  prom-           %1.3  = MkArg                    unboundValue, setmid[0x55846defe0a0]_p35, e1.0
  prom-           %1.4  = MkArg                    unboundValue, setmid[0x55846defe0a0]_p36, e1.0
  prom-           %1.5  = MkArg                    unboundValue, setmid[0x55846defe0a0]_p37, e1.0
  val?            %1.6  = Call               !     %1.1(%1.2, %1.3, %1.4, %1.5) e1.0   <val?_>
  void                    Return             l     %1.6
Prom 34:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    X, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 35:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    FUN, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 36:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    FUN.VALUE, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 37:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    USE.NAMES, e1.0
  void                    Visible            v     
  val?            %1.3  = Force              !     %1.1, e1.0   <val?_>
  void                    Return             l     %1.3
Prom 38:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     attr, <0x558466cd0080>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, setmid[0x55846defe0a0]_p39, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2, "x.member") e1.0   <nil->
  void                    Return             l     %1.3
Prom 39:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    x, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<lazy>        !     %1.1, e1.0   <(int|vec)>
  void                    Return             l     %1.3
Prom 40:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !v    %||%, <0x558468b0c558>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, setmid[0x55846defe0a0]_p41, e1.0
  val?            %1.3  = Call               !v    %1.1(%1.2, 1L) e1.0   <int$->
  void                    Visible            v     
  void                    Return             l     %1.3
Prom 41:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  (cls|spec|blt)  %1.1  = LdFun              !     attr, <0x558466cd0080>, e1.0
  prom-           %1.2  = MkArg                    unboundValue, setmid[0x55846defe0a0]_p42, e1.0
  val?            %1.3  = Call               !     %1.1(%1.2, "members") e1.0   <(nil|int)->
  void                    Return             l     %1.3
Prom 42:
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = LdFunctionEnv            
  val?^ | miss    %1.1  = LdVar              eR    x, e1.0
  void                    Visible            v     
  val?            %1.3  = Force<wrapped>     !     %1.1, e1.0   <(int|vec)>
  void                    Return             l     %1.3

│ setmid[0x55846defe0a0]                                                       │
└──────────────────────────────────────────────────────────────────────────────┘
