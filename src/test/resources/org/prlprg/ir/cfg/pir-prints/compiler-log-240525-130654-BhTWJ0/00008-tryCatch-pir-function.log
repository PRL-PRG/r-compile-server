
┌──────────────────────────────────────────────────────────────────────────────┐
│ tryCatch[0x55c7c42e27a0]                                                     │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;Eager1,NonRefl1,!Obj1 miss: 1        │
│ Properties:                                                                  │
├────── Final PIR Version
tryCatch[0x55c7c42e27a0]
BB0
  dots+           %0.0  = LdArg                    1
  val?^           %0.1  = LdArg                    0
  env             e0.2  = MkEnv              l     expr=%0.1, ...=%0.0, finally(miss)=missingArg, parent=R_BaseNamespace, context 1
  cls             %0.3  = MkCls                    tryCatchList, e0.2
  cls             %0.4  = MkCls                    tryCatchOne, e0.2
  *dots-          %0.5  = ExpandDots               %0.0
  void                    StVar              lW    tryCatchList, %0.3, e0.2
  void                    StVar              lW    tryCatchOne, %0.4, e0.2
  val?            %0.8  = NamedCall          !v    <blt list>(.xpandDotsTrigger=%0.5) e0.2   <vec+>
  void                    StVar              lW    handlers, %0.8, e0.2
  lgl$#-          %0.10 = IsType                   %0.8 isA val?+
  val?^ | miss    %0.11 = LdVar              eR    names, e0.2
  lgl$#-          %0.12 = Identical                <blt names>, %0.11   <true>
  void                    Branch                   %0.12 -> BB40 (if true) | BB41 (if false)
BB40   <- [0]
  val             %40.0 = ChkMissing         e     %0.8
  void                    Branch                   %0.10 -> BB42 (if true) | BB43 (if false)
BB41   <- [0]
  void                    Nop                !     
  lgl$#-          %41.1 = %0.12
  dr              %41.2 = DeadBranchReached@0x55c7c2d18c70[Test#0]
  goto BB39
BB42   <- [40]
  val?+           %42.0 = CastType           d     dn %0.8   <vec+>
  val+            %42.1 = CallSafeBuiltin    wed   names(%42.0)    <str->
  void                    StVar              lW    classes, %42.1, e0.2
  val?^ | miss    %42.3 = LdVar              eR    parent.frame, e0.2
  lgl$#-          %42.4 = Identical                %42.3, function(n=1) <(rir::DispatchTable*)0x55c7c338|...>
  void                    Branch                   %42.4 -> BB44 (if true) | BB45 (if false)
BB43   <- [40]
  void                    Nop                !     
  val?            %43.1 = %0.8
  dr              %43.2 = Typecheck@0x55c7c2d18c70[Type#1]
  goto BB39
BB39   <- [41, 43]
  val?^ | miss    %39.0 = Phi                      %41.1:BB41, %43.1:BB43
  val?^ | miss    %39.1 = %39.0
  dr              %39.2 = Phi                      %41.2:BB41, %43.2:BB43
  dr              %39.3 = %39.2
  fs              %39.4 = FrameState         R     0x55c7c456c3a0+151: [], env=e0.2
  void                    Deopt              !v    %39.4, %39.3, %39.1   !
BB44   <- [42]
  val?            %44.0 = StaticCall         !v    parent.frame[0x55c7c4356b40]() e0.2   <env->
  void                    StVar              lW    parentenv, %44.0, e0.2
  val?^ | miss    %44.2 = LdVar              eR    length, e0.2
  lgl$#-          %44.3 = Identical                <blt length>, %44.2   <true>
  void                    Branch                   %44.3 -> BB46 (if true) | BB47 (if false)
BB45   <- [42]
  fs              %45.0 = FrameState         R     0x55c7c456c3a0+256: [], env=e0.2
  void                    Deopt              !v    %45.0, CallTarget@0x55c7c2d18c70[Call#3], %42.3   !
BB46   <- [44]
  val?^ | miss    %46.0 = LdVar              eR    classes, e0.2
  lgl$#-          %46.1 = IsType                   %46.0 isA val?~- | miss
  void                    Branch                   %46.1 -> BB48 (if true) | BB49 (if false)
BB47   <- [44]
  void                    Nop                !     
  lgl$#-          %47.1 = %44.3
  dr              %47.2 = DeadBranchReached@0x55c7c2d18c70[Test#1]
  goto BB5
BB48   <- [46]
  val?~- | miss   %48.0 = CastType           d     dn %46.0
  val?-           %48.1 = Force!<value>            %48.0,    <str->
  (int|real)$-    %48.2 = CallSafeBuiltin    wed   length(%48.1)    <int$->
  lgl$#-          %48.3 = IsType                   %48.2 isA int$-
  void                    Branch                   %48.3 -> BB50 (if true) | BB51 (if false)
BB49   <- [46]
  void                    Nop                !     
  val?^ | miss    %49.1 = %46.0
  dr              %49.2 = Typecheck@0x55c7c2d18c70[Type#7]
  goto BB5
BB5   <- [47, 49]
  val?^ | miss    %5.0  = Phi                      %47.1:BB47, %49.1:BB49
  val?^ | miss    %5.1  = %5.0
  dr              %5.2  = Phi                      %47.2:BB47, %49.2:BB49
  dr              %5.3  = %5.2
  fs              %5.4  = FrameState         R     0x55c7c456c3a0+297: [], env=e0.2
  void                    Deopt              !v    %5.4, %5.3, %5.1   !
BB50   <- [48]
  int$-           %50.0 = CastType           d     dn %48.2
  val?^ | miss    %50.1 = LdVar              eR    handlers, e0.2
  lgl$#-          %50.2 = IsType                   %50.1 isA val?~+ | miss
  void                    Branch                   %50.2 -> BB52 (if true) | BB53 (if false)
BB51   <- [48]
  void                    Nop                !     
  (int|real)$-    %51.1 = %48.2
  dr              %51.2 = Typecheck@0x55c7c2d18c70[Type#8]
  goto BB7
BB52   <- [50]
  val?~+ | miss   %52.0 = CastType           d     dn %50.1
  val?+           %52.1 = Force!<value>            %52.0,    <vec+>
  (int|real)$-    %52.2 = CallSafeBuiltin    wed   length(%52.1)    <int$->
  lgl$#-          %52.3 = IsType                   %52.2 isA int$-
  void                    Branch                   %52.3 -> BB54 (if true) | BB55 (if false)
BB53   <- [50]
  void                    Nop                !     
  val?^ | miss    %53.1 = %50.1
  dr              %53.2 = Typecheck@0x55c7c2d18c70[Type#10]
  goto BB7
BB7   <- [51, 53]
  val?^ | miss    %7.0  = Phi                      %51.1:BB51, %53.1:BB53
  val?^ | miss    %7.1  = %7.0
  dr              %7.2  = Phi                      %51.2:BB51, %53.2:BB53
  dr              %7.3  = %7.2
  fs              %7.4  = FrameState         R     0x55c7c456c3a0+388: [%48.2], env=e0.2
  void                    Deopt              !v    %7.4, %7.3, %7.1   !
BB54   <- [52]
  int$-           %54.0 = CastType           d     dn %52.2
  lgl$-           %54.1 = Neq                d     %50.0, %54.0, elided   <lgl$->
  lgl$#-          %54.2 = CheckTrueFalse     e     %54.1
  void                    Branch                   %54.2 -> BB38 (if true) | BB11 (if false)
BB55   <- [52]
  void                    Nop                !     
  (int|real)$-    %55.1 = %52.2
  dr              %55.2 = Typecheck@0x55c7c2d18c70[Type#11]
  goto BB9
BB38   <- [54]
  (cls|spec|blt)  %38.0 = LdFun              !v    stop, e0.2
  fs              %38.1 = FrameState         R     0x55c7c456c3a0+511: [%38.0], env=e0.2
  void                    Deopt              !v    %38.1, DeadCall@0x55c7c2d18c70[Call#6], %38.0   !
BB11   <- [54]
  val?^ | miss    %11.0 = LdVar              eR    tryCatchList, e0.2
  lgl$#-          %11.1 = Identical                %11.0, %0.3
  void                    Branch                   %11.1 -> BB56 (if true) | BB57 (if false)
BB9   <- [55, 57]
  val?^ | miss    %9.0  = Phi                      %55.1:BB55, %57.1:BB57
  val?^ | miss    %9.1  = %9.0
  dr              %9.2  = Phi                      %55.2:BB55, %57.2:BB57
  dr              %9.3  = %9.2
  fs              %9.4  = FrameState         R     0x55c7c456c3a0+484: [%50.0, %52.2], env=e0.2
  void                    Deopt              !v    %9.4, %9.3, %9.1   !
BB56   <- [11]
  prom-           %56.0 = MkArg                    unboundValue, tryCatch[0x55c7c42e27a0]_p0, e0.2
  prom-           %56.1 = MkArg                    unboundValue, tryCatch[0x55c7c42e27a0]_p1, e0.2
  prom-           %56.2 = MkArg                    unboundValue, tryCatch[0x55c7c42e27a0]_p2 (!refl), e0.2
  prom-           %56.3 = MkArg                    unboundValue, tryCatch[0x55c7c42e27a0]_p3, e0.2
  ct              %56.4 = PushContext        lCL   %56.0, %56.1, %56.2, %56.3, tryCatchList(expr, classes, parentenv, handlers), %0.3, e0.2
  val?^           %56.5 = CastType                 up %56.3
  val?^           %56.6 = CastType                 up %56.2
  val?^           %56.7 = CastType                 up %56.1
  val?^           %56.8 = CastType                 up %56.0
  env             e56.9 = MkEnv              l     expr=%56.8, names=%56.7, parentenv=%56.6, handlers=%56.5, parent=e0.2, context 1
  val?            %56.10 = Force!<lazy>       !vL   %56.7, e56.9   <str->
  lgl$#-          %56.11 = IsType                   %56.10 isA val?-
  void                    Branch                   %56.11 -> BB58 (if true) | BB59 (if false)
BB57   <- [11]
  void                    Nop                !     
  val?^ | miss    %57.1 = %11.0
  dr              %57.2 = CallTarget@0x55c7c2d18c70[Call#7]
  goto BB9
BB58   <- [56]
  val?-           %58.0 = CastType           d     dn %56.10   <str->
  (int|real)$-    %58.1 = CallSafeBuiltin    wed   length(%58.0)    <int$->
  lgl$#-          %58.2 = IsType                   %58.1 isA int$-
  void                    Branch                   %58.2 -> BB60 (if true) | BB61 (if false)
BB59   <- [56]
  fs              %59.0 = FrameState         R     0x55c7c456c3a0+586: [], env=e0.2
  fs              %59.1 = FrameState         R     0x55c7c4383200+69: [<blt length>, %56.10], env=e56.9, next=%59.0
  void                    Deopt              !v    %59.1, Typecheck@0x55c7c432b4a0[Type#1], %56.10   !
BB60   <- [58]
  int$-           %60.0 = CastType           d     dn %58.1
  void                    StVar              lW    nh, %60.0, e56.9
  void                    Visible            v     
  lgl$-           %60.3 = Gt                 vd    %60.0, 1L, elided   <lgl$->
  lgl$#-          %60.4 = CheckTrueFalse     e     %60.3
  void                    Branch                   %60.4 -> BB37 (if true) | BB18 (if false)
BB61   <- [58]
  fs              %61.0 = FrameState         R     0x55c7c456c3a0+586: [], env=e0.2
  fs              %61.1 = FrameState         R     0x55c7c4383200+91: [%58.1], env=e56.9, next=%61.0
  void                    Deopt              !v    %61.1, Typecheck@0x55c7c432b4a0[Type#2], %58.1   !
BB37   <- [60]
  val?^ | miss    %37.0 = LdVar              eR    tryCatchOne, e56.9
  (cls|spec|blt)  %37.1 = CastType                 dn %37.0
  val+            %37.2 = CallSafeBuiltin          bodyCode(%37.1) 
  lgl$#-          %37.3 = Identical                %37.2, <(rir::DispatchTable*)0x55c7c4525a10>
  void                    Branch                   %37.3 -> BB62 (if true) | BB63 (if false)
BB18   <- [60]
  lgl$-           %18.0 = Eq                 d     %60.0, 1L, elided   <lgl$->
  lgl$#-          %18.1 = CheckTrueFalse     e     %18.0
  void                    Branch                   %18.1 -> BB22 (if true) | BB19 (if false)
BB62   <- [37]
  val?            %62.0 = Force!             d     %37.0, 
  prom-           %62.1 = MkArg                    unboundValue, tryCatch[0x55c7c42e27a0]_p4, e56.9
  prom-           %62.2 = MkArg                    unboundValue, tryCatch[0x55c7c42e27a0]_p11, e56.9
  prom-           %62.3 = MkArg                    unboundValue, tryCatch[0x55c7c42e27a0]_p13, e56.9
  prom-           %62.4 = MkArg                    unboundValue, tryCatch[0x55c7c42e27a0]_p14, e56.9
  (cls|spec|blt)  %62.5 = ChkFunction        e     %62.0
  val?            %62.6 = StaticCall         !     tryCatchOne[0x55c7c433d310](%62.1, %62.2, %62.3, %62.4) from %62.5 e56.9   <(str|vec)->
  val?            %62.7 = %62.6
  goto BB21
BB63   <- [37]
  void                    Nop                !     
  val+            %63.1 = %37.2
  dr              %63.2 = CallTarget@0x55c7c432b4a0[Call#2]
  goto BB16
BB22   <- [18]
  val?^ | miss    %22.0 = LdVar              eR    tryCatchOne, e56.9
  (cls|spec|blt)  %22.1 = CastType                 dn %22.0
  val+            %22.2 = CallSafeBuiltin          bodyCode(%22.1) 
  lgl$#-          %22.3 = Identical                %22.2, <(rir::DispatchTable*)0x55c7c4525a10>
  void                    Branch                   %22.3 -> BB64 (if true) | BB65 (if false)
BB19   <- [18]
  void                    Visible            v     
  val?            %19.1 = Force!             !L    %56.8, e56.9   <val?_>
  val?            %19.2 = %19.1
  goto BB20
BB21   <- [20, 62]
  val?            %21.0 = Phi                      %20.2:BB20, %62.7:BB62
  val?            %21.1 = %21.0
  val?            %21.2 = PopContext         C     %21.1, %56.4   <(str|vec)->
  void                    Return             l     %21.2
BB16   <- [63, 65]
  val?^ | miss    %16.0 = Phi                      %63.1:BB63, %65.1:BB65
  val?^ | miss    %16.1 = %16.0
  dr              %16.2 = Phi                      %63.2:BB63, %65.2:BB65
  dr              %16.3 = %16.2
  fs              %16.4 = FrameState         R     0x55c7c456c3a0+586: [], env=e0.2
  fs              %16.5 = FrameState         R     0x55c7c4383200+105: [], env=e56.9, next=%16.4
  void                    Deopt              !v    %16.5, %16.3, %16.1   !
BB64   <- [22]
  val?            %64.0 = Force!             d     %22.0, 
  prom-           %64.1 = MkArg                    unboundValue, tryCatch[0x55c7c42e27a0]_p16, e56.9
  prom-           %64.2 = MkArg                    unboundValue, tryCatch[0x55c7c42e27a0]_p17, e56.9
  prom-           %64.3 = MkArg                    unboundValue, tryCatch[0x55c7c42e27a0]_p18, e56.9
  prom-           %64.4 = MkArg                    unboundValue, tryCatch[0x55c7c42e27a0]_p19, e56.9
  (cls|spec|blt)  %64.5 = ChkFunction        e     %64.0
  env             e64.6 = CallSafeBuiltin          environment(%64.5) 
  ct              %64.7 = PushContext        lCL   %64.1, %64.2, %64.3, %64.4, tryCatchOne(expr, names, parentenv, [[(handler|...>, %64.5, e56.9
  val?^           %64.8 = CastType                 up %64.4
  val?^           %64.9 = CastType                 up %64.3
  val?^           %64.10 = CastType                 up %64.2
  val?^           %64.11 = CastType                 up %64.1
  env             e64.12 = MkEnv              l     expr=%64.11, name=%64.10, parentenv=%64.9, handler=%64.8, parent=e64.6, context 1
  cls             %64.13 = MkCls                    doTryCatch, e64.12
  void                    StVar              lW    doTryCatch, %64.13, e64.12
  prom-           %64.15 = MkArg                    unboundValue, tryCatch[0x55c7c42e27a0]_p20, e64.12
  prom-           %64.16 = MkArg                    unboundValue, tryCatch[0x55c7c42e27a0]_p21, e64.12
  prom-           %64.17 = MkArg                    unboundValue, tryCatch[0x55c7c42e27a0]_p22, e64.12
  prom-           %64.18 = MkArg                    unboundValue, tryCatch[0x55c7c42e27a0]_p23, e64.12
  val?            %64.19 = StaticCall         !v    doTryCatch[0x55c7c443b8f0](%64.15, %64.16, %64.17, %64.18) from %64.13 e64.12   <vec->
  void                    StVar              lW    value, %64.19, e64.12
  lgl$#-          %64.21 = IsType                   %64.19 isA val+   <true>
  lgl$#-          %64.22 = IsType                   %64.19 isA val?-
  val             %64.23 = ChkMissing         e     %64.19
  void                    Branch                   %64.21 -> BB66 (if true) | BB67 (if false)
BB65   <- [22]
  void                    Nop                !     
  val+            %65.1 = %22.2
  dr              %65.2 = CallTarget@0x55c7c432b4a0[Call#1]
  goto BB16
BB20   <- [19, 76]
  val?            %20.0 = Phi                      %19.2:BB19, %76.8:BB76
  val?            %20.1 = %20.0
  val?            %20.2 = %20.1
  goto BB21
BB66   <- [64]
  void                    Branch                   %64.22 -> BB68 (if true) | BB69 (if false)
BB67   <- [64]
  void                    Nop                !     
  lgl$#-          %67.1 = %64.21
  dr              %67.2 = DeadBranchReached@0x55c7c4462f70[Test#0]
  goto BB23
BB68   <- [66]
  val?-           %68.0 = CastType           d     dn %64.19   <vec->
  val?            %68.1 = Extract2_1D        wed   %68.0, 1L, elided   <vec>
  lgl$-           %68.2 = Is                       %68.1, NULL
  lgl$#-          %68.3 = CheckTrueFalse     e     %68.2
  void                    Branch                   %68.3 -> BB34 (if true) | BB27 (if false)
BB69   <- [66]
  void                    Nop                !     
  val?            %69.1 = %64.19
  dr              %69.2 = Typecheck@0x55c7c4462f70[Type#4]
  goto BB23
BB23   <- [67, 69]
  val?^ | miss    %23.0 = Phi                      %67.1:BB67, %69.1:BB69
  val?^ | miss    %23.1 = %23.0
  dr              %23.2 = Phi                      %67.2:BB67, %69.2:BB69
  dr              %23.3 = %23.2
  fs              %23.4 = FrameState         R     0x55c7c456c3a0+586: [], env=e0.2
  fs              %23.5 = FrameState         R     0x55c7c4383200+235: [], env=e56.9, next=%23.4
  fs              %23.6 = FrameState         R     0x55c7c4318da0+86: [], env=e64.12, next=%23.5
  void                    Deopt              !v    %23.6, %23.3, %23.1   !
BB34   <- [68]
  val?            %34.0 = CallBuiltin        !v    geterrmessage() e64.12
  void                    StVar              lW    msg, %34.0, e64.12
  val?^ | miss    %34.2 = LdVar              eR    value, e64.12
  val?            %34.3 = Force!             !v    %34.2, e64.12   <val?_>
  lgl$#-          %34.4 = IsType                   %34.3 isA val?+
  fs              %34.5 = FrameState         R     0x55c7c456c3a0+586: [], env=e0.2
  fs              %34.6 = FrameState         R     0x55c7c4383200+235: [], env=e56.9, next=%34.5
  void                    Branch                   %34.4 -> BB74 (if true) | BB75 (if false)
BB27   <- [68]
  val?^ | miss    %27.0 = LdVar              eR    is.character, e64.12
  lgl$#-          %27.1 = Identical                <blt is.character>, %27.0   <true>
  void                    Branch                   %27.1 -> BB70 (if true) | BB71 (if false)
BB74   <- [34]
  val?+           %74.0 = CastType           d     dn %34.3   <val?_>
  val?            %74.1 = Extract2_1D        wed   %74.0, 2L, elided   <val?_>
  void                    StVar              lW    call, %74.1, e64.12
  (cls|spec|blt)  %74.3 = LdFun              !v    simpleError, e64.12
  fs              %74.4 = FrameState         R     0x55c7c4318da0+657: [%74.3], env=e64.12, next=%34.6
  void                    Deopt              !v    %74.4, DeadCall@0x55c7c4462f70[Call#3], %74.3   !
BB75   <- [34]
  fs              %75.0 = FrameState         R     0x55c7c456c3a0+586: [], env=e0.2
  fs              %75.1 = FrameState         R     0x55c7c4383200+235: [], env=e56.9, next=%75.0
  fs              %75.2 = FrameState         R     0x55c7c4318da0+594: [%34.3], env=e64.12, next=%75.1
  void                    Deopt              !v    %75.2, Typecheck@0x55c7c4462f70[Type#21], %34.3   !
BB70   <- [27]
  lgl$#-          %70.0 = CallSafeBuiltin    wed   is.character(%68.1)    <lgl$->
  void                    Branch                   %70.0 -> BB33 (if true) | BB28 (if false)
BB71   <- [27]
  fs              %71.0 = FrameState         R     0x55c7c456c3a0+586: [], env=e0.2
  fs              %71.1 = FrameState         R     0x55c7c4383200+235: [], env=e56.9, next=%71.0
  fs              %71.2 = FrameState         R     0x55c7c4318da0+138: [%68.1], env=e64.12, next=%71.1
  void                    Deopt              !v    %71.2, DeadBranchReached@0x55c7c4462f70[Test#1], %27.1   !
BB33   <- [70]
  fs              %33.0 = FrameState         R     0x55c7c456c3a0+586: [], env=e0.2
  fs              %33.1 = FrameState         R     0x55c7c4383200+235: [], env=e56.9, next=%33.0
  void                    StVar              lW    msg, %68.1, e64.12
  val?            %33.3 = Extract2_1D        wed   %68.0, 2L, elided   <val?_>
  void                    StVar              lW    call, %33.3, e64.12
  (cls|spec|blt)  %33.5 = LdFun              !v    simpleError, e64.12
  fs              %33.6 = FrameState         R     0x55c7c4318da0+512: [%33.5], env=e64.12, next=%33.1
  void                    Deopt              !v    %33.6, DeadCall@0x55c7c4462f70[Call#2], %33.5   !
BB28   <- [70]
  void                    StVar              lW    cond, %68.1, e64.12
  val?            %28.1 = Extract2_1D        wed   %68.0, 3L, elided   <cls->
  void                    Visible            v     
  (cls|spec|blt)  %28.3 = ChkFunction        e     %28.1
  prom-           %28.4 = MkArg                    unboundValue, tryCatch[0x55c7c42e27a0]_p24 (!refl), e64.12
  val+            %28.5 = CallSafeBuiltin          bodyCode(%28.3) 
  lgl$#-          %28.6 = Identical                %28.5, <(rir::DispatchTable*)0x55c7c433b250>
  env             e28.7 = CallSafeBuiltin          environment(%28.3) 
  val?^           %28.8 = CastType                 up %28.4
  void                    Branch                   %28.6 -> BB72 (if true) | BB73 (if false)
BB72   <- [28]
  ct              %72.0 = PushContext        lCL   %28.4, [[(value, 3L)(cond), %28.3, e64.12
  val?^ | miss    %72.1 = LdVar              eR    tryCatch, e28.7
  lgl$#-          %72.2 = Identical                %72.1, function(expr, ..., finally) <(rir::DispatchTa|...>
  void                    Branch                   %72.2 -> BB76 (if true) | BB77 (if false)
BB73   <- [28]
  void                    Visible            v     
  fs              %73.1 = FrameState         R     0x55c7c456c3a0+586: [], env=e0.2
  fs              %73.2 = FrameState         R     0x55c7c4383200+235: [], env=e56.9, next=%73.1
  fs              %73.3 = FrameState         R     0x55c7c4318da0+755: [%28.1], env=e64.12, next=%73.2
  void                    Deopt              !v    %73.3, CallTarget@0x55c7c4462f70[Call#4], %28.5   !
BB76   <- [72]
  env             e76.0 = MkEnv              l     warning=%28.8, parent=e28.7, context 1
  prom-           %76.1 = MkArg                    unboundValue, tryCatch[0x55c7c42e27a0]_p25, e76.0
  cls             %76.2 = MkCls                    g@Prom(4)0@Prom(6)0, e76.0
  prom-           %76.3 = MkArg                    %76.2, tryCatch[0x55c7c42e27a0]_p31 (!refl), e76.0
  dots-           %76.4 = DotsList           l     error=%76.3
  val?            %76.5 = StaticCall         !     tryCatch[0x55c7c42e27a0](%76.1, %76.4) { 0 1n } e76.0   <str$->
  val?            %76.6 = PopContext         C     %76.5, %72.0   <str$->
  val?            %76.7 = PopContext         C     %76.6, %64.7   <(str|vec)->
  val?            %76.8 = %76.7
  goto BB20
BB77   <- [72]
  fs              %77.0 = FrameState         R     0x55c7c456c3a0+586: [], env=e0.2
  fs              %77.1 = FrameState         R     0x55c7c4383200+235: [], env=e56.9, next=%77.0
  fs              %77.2 = FrameState         R     0x55c7c4318da0+789: [], env=e64.12, next=%77.1
  env             e77.3 = (MkEnv)            l     warning=%28.8, parent=e28.7, context 1
  fs              %77.4 = FrameState         R     0x55c7c4331e20+0: [], env=e77.3, next=%77.2
  void                    Deopt              !v    %77.4, CallTarget@0x55c7c3a2d2f8[Call#0], %72.1   !
Prom 0:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    expr, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <(str|vec)->
  void                    Return             l     %0.3
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    classes, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    parentenv, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 3:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    handlers, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 4:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     tryCatchList, <0x55c7c44665f0>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, tryCatch[0x55c7c42e27a0]_p5, e0.0
  prom-           %0.3  = MkArg                    unboundValue, tryCatch[0x55c7c42e27a0]_p6, e0.0
  prom-           %0.4  = MkArg                    unboundValue, tryCatch[0x55c7c42e27a0]_p8, e0.0
  prom-           %0.5  = MkArg                    unboundValue, tryCatch[0x55c7c42e27a0]_p9, e0.0
  val?            %0.6  = Call               !     %0.1(%0.2, %0.3, %0.4, %0.5) e0.0   <vec->
  void                    Return             l     %0.6
Prom 5:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    expr, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <vec->
  void                    Return             l     %0.3
Prom 6:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    names, e0.0
  val?            %0.2  = Force<wrapped>     !v    %0.1, e0.0   <str->
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <true>
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    nh, e0.0
  val?            %2.1  = Force<value>       !v    %2.0, e0.0   <int$->
  val?            %2.2  = Minus              !v    %2.1, e0.0
  val?            %2.3  = %2.2
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, tryCatch[0x55c7c42e27a0]_p7, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.3:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract1_1D        !v    %0.2, %3.1, e0.0   <str$->
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 7:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    nh, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  val?            %0.4  = Minus              !     %0.3, e0.0
  void                    Return             l     %0.4
Prom 8:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    parentenv, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 9:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    handlers, e0.0
  val?            %0.2  = Force<wrapped>     !v    %0.1, e0.0   <vec+>
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <true>
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    nh, e0.0
  val?            %2.1  = Force<value>       !v    %2.0, e0.0   <int$->
  val?            %2.2  = Minus              !v    %2.1, e0.0
  val?            %2.3  = %2.2
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, tryCatch[0x55c7c42e27a0]_p10, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.3:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract1_1D        !v    %0.2, %3.1, e0.0   <vec$+>
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 10:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    nh, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  val?            %0.4  = Minus              !     %0.3, e0.0
  void                    Return             l     %0.4
Prom 11:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    names, e0.0
  val?            %0.2  = Force<wrapped>     !v    %0.1, e0.0   <str->
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <true>
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    nh, e0.0
  val?            %2.1  = Force<value>       !v    %2.0, e0.0   <int$->
  val?            %2.2  = %2.1
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, tryCatch[0x55c7c42e27a0]_p12, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.2:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract1_1D        !v    %0.2, %3.1, e0.0   <str$->
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 12:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    nh, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 13:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    parentenv, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 14:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    handlers, e0.0
  val?            %0.2  = Force<lazy>        !v    %0.1, e0.0   <vec+>
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <true>
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    nh, e0.0
  val?            %2.1  = Force<value>       !v    %2.0, e0.0   <int$->
  val?            %2.2  = %2.1
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, tryCatch[0x55c7c42e27a0]_p15, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.2:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract2_1D        !v    %0.2, %3.1, e0.0   <cls->
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 15:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    nh, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 16:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    expr, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <(str|vec)->
  void                    Return             l     %0.3
Prom 17:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    names, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 18:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    parentenv, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 19:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    handlers, e0.0
  val?            %0.2  = Force<lazy>        !v    %0.1, e0.0   <vec$+>
  val?            %0.3  = Extract2_1D        !v    %0.2, 1L, e0.0   <cls->
  void                    Visible            v     
  void                    Return             l     %0.3
Prom 20:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    expr, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <(str|vec)->
  void                    NonLocalReturn     !     %0.3, e0.0
Prom 21:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    name, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 22:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    parentenv, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 23:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    handler, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <cls->
  void                    Return             l     %0.3
Prom 24:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    cond, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <vec>
  void                    Return             l     %0.3
Prom 25:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     suppressWarnings, <0x55c7c3e532f0>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, tryCatch[0x55c7c42e27a0]_p26, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0
  (cls|spec|blt)  %0.4  = LdFun              !     paste, <0x55c7c273bda8>, e0.0
  prom-           %0.5  = MkArg                    unboundValue, tryCatch[0x55c7c42e27a0]_p29, e0.0
  val?            %0.6  = Call               !     %0.4("warning:", %0.5) e0.0   <str$->
  void                    Return             l     %0.6
Prom 26:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     f, <0x55c7c442c770>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, tryCatch[0x55c7c42e27a0]_p27, e0.0
  prom-           %0.3  = MkArg                    unboundValue, tryCatch[0x55c7c42e27a0]_p28, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <vec->
  void                    Return             l     %0.4
Prom 27:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    lhs, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <real->
  void                    Return             l     %0.3
Prom 28:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    rhs, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <real$->
  void                    Return             l     %0.3
Prom 29:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     conditionMessage, <0x55c7c44b5010>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, tryCatch[0x55c7c42e27a0]_p30, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <str$->
  void                    Return             l     %0.3
Prom 30:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    warning, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <vec>
  void                    Return             l     %0.3
Prom 31:
BB0
  env             e0.0  = LdFunctionEnv            
  cls             %0.1  = MkCls                    g@Prom(4)0@Prom(6)0, e0.0
  void                    Return             l     %0.1

│ tryCatch[0x55c7c42e27a0]                                                     │
└──────────────────────────────────────────────────────────────────────────────┘
