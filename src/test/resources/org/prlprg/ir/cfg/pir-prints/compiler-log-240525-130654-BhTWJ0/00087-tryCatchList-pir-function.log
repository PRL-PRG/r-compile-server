
┌──────────────────────────────────────────────────────────────────────────────┐
│ tryCatchList[0x55c7c459b320]                                                 │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;NonRefl1,NonRefl2,NonRefl3,!Obj1,!Obj2,!Obj3│
│ Properties:                                                                  │
├────── Final PIR Version
tryCatchList[0x55c7c459b320]
BB0
  val?^           %0.0  = LdArg                    3
  val?^           %0.1  = LdArg                    2
  val?^           %0.2  = LdArg                    1
  val?^           %0.3  = LdArg                    0
  val?^ | miss    %0.4  = LdVar              eR    length, ?
  lgl$#-          %0.5  = Identical                <blt length>, %0.4   <true>
  void                    Branch                   %0.5 -> BB14 (if true) | BB15 (if false)
BB14   <- [0]
  env             e14.0 = MkEnv              l     expr=%0.3, names=%0.2, parentenv=%0.1, handlers=%0.0, parent=?, context 1
  val+            %14.1 = Force!<lazy>       !vr   %0.2,    <str->
  (int|real)$-    %14.2 = CallSafeBuiltin    wed   length(%14.1)    <int$->
  lgl$#-          %14.3 = IsType                   %14.2 isA int$-
  void                    Branch                   %14.3 -> BB16 (if true) | BB17 (if false)
BB15   <- [0]
  env             e15.0 = (MkEnv)            l     expr=%0.3, names=%0.2, parentenv=%0.1, handlers=%0.0, parent=?, context 1
  fs              %15.1 = FrameState         R     0x55c7c4383200+0: [], env=e15.0
  void                    Deopt              !v    %15.1, DeadBranchReached@0x55c7c432b4a0[Test#0], %0.5
BB16   <- [14]
  int$-           %16.0 = CastType           d     dn %14.2
  void                    StVar              lW    nh, %16.0, e14.0
  void                    Visible            v     
  lgl$-           %16.3 = Gt                 vd    %16.0, 1L, elided   <lgl$->
  lgl$#-          %16.4 = CheckTrueFalse     e     %16.3
  void                    Branch                   %16.4 -> BB12 (if true) | BB7 (if false)
BB17   <- [14]
  fs              %17.0 = FrameState         R     0x55c7c4383200+91: [%14.2], env=e14.0
  void                    Deopt              !v    %17.0, Typecheck@0x55c7c432b4a0[Type#2], %14.2
BB12   <- [16]
  val?^ | miss    %12.0 = LdVar              eR    tryCatchOne, ?
  (cls|spec|blt)  %12.1 = CastType                 dn %12.0
  val+            %12.2 = CallSafeBuiltin          bodyCode(%12.1) 
  lgl$#-          %12.3 = Identical                %12.2, <(rir::DispatchTable*)0x55c7c4525a10>
  void                    Branch                   %12.3 -> BB18 (if true) | BB19 (if false)
BB7   <- [16]
  void                    Visible            v     
  lgl$-           %7.1  = Eq                 vd    %16.0, 1L, elided   <lgl$->
  lgl$#-          %7.2  = CheckTrueFalse     e     %7.1
  void                    Branch                   %7.2 -> BB11 (if true) | BB8 (if false)
BB18   <- [12]
  val?            %18.0 = Force!             d     %12.0, 
  prom-           %18.1 = MkArg                    unboundValue, tryCatchList[0x55c7c459b320]_p4, e14.0
  prom-           %18.2 = MkArg                    unboundValue, tryCatchList[0x55c7c459b320]_p11, e14.0
  prom-           %18.3 = MkArg                    unboundValue, tryCatchList[0x55c7c459b320]_p13 (!refl), e14.0
  prom-           %18.4 = MkArg                    unboundValue, tryCatchList[0x55c7c459b320]_p14, e14.0
  (cls|spec|blt)  %18.5 = ChkFunction        e     %18.0
  val?            %18.6 = StaticCall         !     tryCatchOne[0x55c7c45a43d0](%18.1, %18.2, %18.3, %18.4) from %18.5 e14.0   <(str|vec)->
  val?            %18.7 = %18.6
  goto BB10
BB19   <- [12]
  void                    Nop                !     
  val+            %19.1 = %12.2
  dr              %19.2 = CallTarget@0x55c7c432b4a0[Call#2]
  goto BB5
BB11   <- [7]
  val?^ | miss    %11.0 = LdVar              eR    tryCatchOne, ?
  (cls|spec|blt)  %11.1 = CastType                 dn %11.0
  val+            %11.2 = CallSafeBuiltin          bodyCode(%11.1) 
  lgl$#-          %11.3 = Identical                %11.2, <(rir::DispatchTable*)0x55c7c4525a10>
  void                    Branch                   %11.3 -> BB20 (if true) | BB21 (if false)
BB8   <- [7]
  void                    Visible            v     
  val?            %8.1  = Force!             !     %0.3, e14.0   <val?_>
  val?            %8.2  = %8.1
  goto BB9
BB10   <- [9, 18]
  val?            %10.0 = Phi                      %9.2:BB9, %18.7:BB18
  val?            %10.1 = %10.0
  void                    Return             l     %10.1
BB5   <- [19, 21]
  val?^ | miss    %5.0  = Phi                      %19.1:BB19, %21.1:BB21
  val?^ | miss    %5.1  = %5.0
  dr              %5.2  = Phi                      %19.2:BB19, %21.2:BB21
  dr              %5.3  = %5.2
  fs              %5.4  = FrameState         R     0x55c7c4383200+105: [], env=e14.0
  void                    Deopt              !v    %5.4, %5.3, %5.1
BB20   <- [11]
  val?            %20.0 = Force!             d     %11.0, 
  prom-           %20.1 = MkArg                    unboundValue, tryCatchList[0x55c7c459b320]_p0, e14.0
  prom-           %20.2 = MkArg                    unboundValue, tryCatchList[0x55c7c459b320]_p1 (!refl), e14.0
  prom-           %20.3 = MkArg                    unboundValue, tryCatchList[0x55c7c459b320]_p2 (!refl), e14.0
  prom-           %20.4 = MkArg                    unboundValue, tryCatchList[0x55c7c459b320]_p3, e14.0
  (cls|spec|blt)  %20.5 = ChkFunction        e     %20.0
  val?            %20.6 = StaticCall         !     tryCatchOne[0x55c7c4473490](%20.1, %20.2, %20.3, %20.4) from %20.5 e14.0   <(str|vec)->
  val?            %20.7 = %20.6
  goto BB9
BB21   <- [11]
  void                    Nop                !     
  val+            %21.1 = %11.2
  dr              %21.2 = CallTarget@0x55c7c432b4a0[Call#1]
  goto BB5
BB9   <- [8, 20]
  val?            %9.0  = Phi                      %8.2:BB8, %20.7:BB20
  val?            %9.1  = %9.0
  val?            %9.2  = %9.1
  goto BB10
Prom 0:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    expr, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <(str|vec)->
  void                    Return             l     %0.3
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    names, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    parentenv, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 3:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    handlers, e0.0
  val?            %0.2  = Force<lazy>        !v    %0.1, e0.0   <vec$+>
  val?            %0.3  = Extract2_1D        !v    %0.2, 1L, e0.0   <cls->
  void                    Visible            v     
  void                    Return             l     %0.3
Prom 4:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     tryCatchList, <0x55c7c44665f0>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, tryCatchList[0x55c7c459b320]_p5, e0.0
  prom-           %0.3  = MkArg                    unboundValue, tryCatchList[0x55c7c459b320]_p6, e0.0
  prom-           %0.4  = MkArg                    unboundValue, tryCatchList[0x55c7c459b320]_p8, e0.0
  prom-           %0.5  = MkArg                    unboundValue, tryCatchList[0x55c7c459b320]_p9, e0.0
  val?            %0.6  = Call               !     %0.1(%0.2, %0.3, %0.4, %0.5) e0.0   <vec->
  void                    Return             l     %0.6
Prom 5:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    expr, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <vec->
  void                    Return             l     %0.3
Prom 6:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    names, e0.0
  val?            %0.2  = Force<wrapped>     !v    %0.1, e0.0   <str->
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <true>
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    nh, e0.0
  val?            %2.1  = Force<value>       !v    %2.0, e0.0   <int$->
  val?            %2.2  = Minus              !v    %2.1, e0.0
  val?            %2.3  = %2.2
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, tryCatchList[0x55c7c459b320]_p7, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.3:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract1_1D        !v    %0.2, %3.1, e0.0   <str$->
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 7:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    nh, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  val?            %0.4  = Minus              !     %0.3, e0.0
  void                    Return             l     %0.4
Prom 8:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    parentenv, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 9:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    handlers, e0.0
  val?            %0.2  = Force<wrapped>     !v    %0.1, e0.0   <vec+>
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <true>
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    nh, e0.0
  val?            %2.1  = Force<value>       !v    %2.0, e0.0   <int$->
  val?            %2.2  = Minus              !v    %2.1, e0.0
  val?            %2.3  = %2.2
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, tryCatchList[0x55c7c459b320]_p10, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.3:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract1_1D        !v    %0.2, %3.1, e0.0   <vec$+>
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 10:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    nh, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  val?            %0.4  = Minus              !     %0.3, e0.0
  void                    Return             l     %0.4
Prom 11:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    names, e0.0
  val?            %0.2  = Force<wrapped>     !v    %0.1, e0.0   <str->
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <true>
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    nh, e0.0
  val?            %2.1  = Force<value>       !v    %2.0, e0.0   <int$->
  val?            %2.2  = %2.1
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, tryCatchList[0x55c7c459b320]_p12, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.2:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract1_1D        !v    %0.2, %3.1, e0.0   <str$->
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 12:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    nh, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 13:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    parentenv, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 14:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    handlers, e0.0
  val?            %0.2  = Force<lazy>        !v    %0.1, e0.0   <vec+>
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <true>
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    nh, e0.0
  val?            %2.1  = Force<value>       !v    %2.0, e0.0   <int$->
  val?            %2.2  = %2.1
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, tryCatchList[0x55c7c459b320]_p15, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.2:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract2_1D        !v    %0.2, %3.1, e0.0   <cls->
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 15:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    nh, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3

│ tryCatchList[0x55c7c459b320]                                                 │
└──────────────────────────────────────────────────────────────────────────────┘
