
┌──────────────────────────────────────────────────────────────────────────────┐
│ genericForBasic[0x55de2a702480]                                              │
│ Context: CorrOrd,!TMany,Argmatch;Eager1,Eager2,NonRefl1,NonRefl2,!Obj2       │
│ Properties:                                                                  │
├────── Final PIR Version
genericForBasic[0x55de2a702480]
BB0
  val?~+          %0.0  = LdArg                    2
  val?~ | miss    %0.1  = LdArg                    1
  val?^ | miss    %0.2  = LdArg                    0
  lgl$#-          %0.3  = Identical                %0.1, missingArg
  env             e0.4  = MkEnv              l     f=%0.2, where=%0.1, mustFind=%0.0, parent=<env 0x55de28b56378>, context 1
  void                    Branch                   %0.3 -> BB2 (if true) | BB14 (if false)
BB2   <- [0]
  prom-           %2.0  = MkArg                    unboundValue, genericForBasic[0x55de2a702480]_p0, e0.4
  val?^ | miss    %2.1  = CastType                 up %2.0
  void                    StArg              lW    where, %2.1, e0.4
  goto BB3
BB14   <- [0]
  void                    Nop                !     
  goto BB3
BB3   <- [2, 14]
  val?^ | miss    %3.0  = LdVar              eR    .BasicFunsList, <env 0x55de28b56378>
  val?            %3.1  = Force!<wrapped>    !v    %3.0, e0.4   <vec+>
  lgl$#-          %3.2  = IsType                   %3.1 isA val+   <true>
  void                    Branch                   %3.2 -> BB15 (if true) | BB16 (if false)
BB15   <- [3]
  val?^ | miss    %15.0 = LdVar              eR    f, e0.4
  val?            %15.1 = Force!<lazy>       !v    %15.0, e0.4   <str$->
  lgl$#-          %15.2 = IsType                   %15.1 isA val?-
  lgl$#-          %15.3 = IsType                   %3.1 isA val?+
  void                    Branch                   %15.3 -> BB17 (if true) | BB18 (if false)
BB16   <- [3]
  fs              %16.0 = FrameState         R     0x55de2ccd4b80+9: [%3.1], env=e0.4
  void                    Deopt              !v    %16.0, DeadBranchReached@0x55de2b1cf2e0[Test#0], %3.2   !
BB17   <- [15]
  val?+           %17.0 = CastType           d     dn %3.1   <vec+>
  void                    Branch                   %15.2 -> BB19 (if true) | BB20 (if false)
BB18   <- [15]
  void                    Nop                !     
  val?            %18.1 = %3.1
  dr              %18.2 = Typecheck@0x55de2b1cf2e0[Type#2]
  goto BB6
BB19   <- [17]
  val?-           %19.0 = CastType           d     dn %15.1   <str$->
  val?            %19.1 = Extract2_1D        wed   %17.0, %19.0, elided   <cls>
  void                    StVar              lW    ans, %19.1, e0.4
  val?^ | miss    %19.3 = LdVar              eR    mustFind, e0.4
  val?            %19.4 = Force!<value>      !v    %19.3, e0.4   <lgl$->
  lgl$-           %19.5 = AsLogical          e     %19.4
  lgl$#-          %19.6 = Identical                %19.5, false
  void                    Branch                   %19.6 -> BB13 (if true) | BB8 (if false)
BB20   <- [17]
  void                    Nop                !     
  val?            %20.1 = %15.1
  dr              %20.2 = Typecheck@0x55de2b1cf2e0[Type#4]
  goto BB6
BB6   <- [18, 20]
  val?^ | miss    %6.0  = Phi                      %18.1:BB18, %20.1:BB20
  val?^ | miss    %6.1  = %6.0
  dr              %6.2  = Phi                      %18.2:BB18, %20.2:BB20
  dr              %6.3  = %6.2
  fs              %6.4  = FrameState         R     0x55de2ccd4b80+54: [%3.1, %15.1], env=e0.4
  void                    Deopt              !v    %6.4, %6.3, %6.1   !
BB13   <- [19]
  void                    Nop                !     
  lgl$-           %13.1 = %19.5
  goto BB9
BB8   <- [19]
  (cls|spec|blt)  %8.0  = LdFun              !v    isFALSE, e0.4
  prom-           %8.1  = MkArg                    unboundValue, genericForBasic[0x55de2a702480]_p3, e0.4
  val?            %8.2  = Call               !v    %8.0(%8.1) e0.4   <val?_>
  lgl$-           %8.3  = AsLogical          e     %8.2
  lgl$-           %8.4  = LAnd                     %19.5, %8.3
  lgl$-           %8.5  = %8.4
  goto BB9
BB9   <- [13, 8]
  lgl$-           %9.0  = Phi                      %8.5:BB8, %13.1:BB13
  lgl$-           %9.1  = %9.0
  lgl$#-          %9.2  = CheckTrueFalse     e     %9.1
  void                    Branch                   %9.2 -> BB12 (if true) | BB10 (if false)
BB12   <- [9]
  (cls|spec|blt)  %12.0 = LdFun              !v    stop, e0.4
  prom-           %12.1 = MkArg                    unboundValue, genericForBasic[0x55de2a702480]_p4, e0.4
  val?            %12.2 = NamedCall          !v    %12.0(%12.1, domain=na-lgl) e0.4
  goto BB11
BB10   <- [9]
  void                    Nop                !     
  goto BB11
BB11   <- [10, 12]
  val?^ | miss    %11.0 = LdVar              eR    ans, e0.4
  void                    Visible            v     
  val?            %11.2 = Force!<value>      !     %11.0, e0.4   <cls>
  void                    Return             l     %11.2
Prom 0:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     topenv, e0.0
  prom-           %0.2  = MkArg                    unboundValue, genericForBasic[0x55de2a702480]_p1, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     parent.frame, e0.0
  val?            %0.2  = Call               !     %0.1() e0.0   <val?_>
  void                    Return             l     %0.2
Prom 3:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    ans, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 4:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     gettextf, e0.0
  prom-           %0.2  = MkArg                    unboundValue, genericForBasic[0x55de2a702480]_p5, e0.0
  val?            %0.3  = Call               !     %0.1("methods may not be defined for primitive func|...>, %0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 5:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     sQuote, e0.0
  prom-           %0.2  = MkArg                    unboundValue, genericForBasic[0x55de2a702480]_p6, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 6:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    f, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3

│ genericForBasic[0x55de2a702480]                                              │
└──────────────────────────────────────────────────────────────────────────────┘
