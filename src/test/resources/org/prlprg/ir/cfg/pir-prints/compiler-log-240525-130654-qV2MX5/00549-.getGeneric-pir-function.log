
┌──────────────────────────────────────────────────────────────────────────────┐
│ .getGeneric[0x55de2a51b930]                                                  │
│ Context: CorrOrd,!TMany,Argmatch;Eager1,NonRefl1                             │
│ Properties:                                                                  │
├────── Final PIR Version
.getGeneric[0x55de2a51b930]
BB0
  val?^ | miss    %0.0  = LdArg                    2
  val?~ | miss    %0.1  = LdArg                    1
  val?^ | miss    %0.2  = LdArg                    0
  lgl$#-          %0.3  = Identical                %0.1, missingArg
  lgl$#-          %0.4  = Identical                %0.0, missingArg
  env             e0.5  = MkEnv              l     f=%0.2, where=%0.1, package=%0.0, parent=<env 0x55de28b56378>, context 1
  void                    Branch                   %0.3 -> BB2 (if true) | BB59 (if false)
BB2   <- [0]
  prom-           %2.0  = MkArg                    unboundValue, .getGeneric[0x55de2a51b930]_p0, e0.5
  val?^ | miss    %2.1  = CastType                 up %2.0
  void                    StArg              lW    where, %2.1, e0.5
  goto BB3
BB59   <- [0]
  void                    Nop                !     
  goto BB3
BB3   <- [2, 59]
  void                    Branch                   %0.4 -> BB58 (if true) | BB4 (if false)
BB58   <- [3]
  void                    StArg              lW    package, "", e0.5
  goto BB5
BB4   <- [3]
  void                    Nop                !     
  goto BB5
BB5   <- [4, 58]
  lgl$-           %5.0  = Missing            eR    where, e0.5
  lgl$#-          %5.1  = CheckTrueFalse     e     %5.0
  void                    Branch                   %5.1 -> BB55 (if true) | BB8 (if false)
BB55   <- [5]
  val?^ | miss    %55.0 = LdVar              eR    .getGenericFromCache, <env 0x55de28b56378>
  lgl$#-          %55.1 = Identical                %55.0, function(name, where, pkg="") <(rir::DispatchT|...>
  void                    Branch                   %55.1 -> BB60 (if true) | BB61 (if false)
BB8   <- [5]
  void                    Nop                !     
  nil-            %8.1  = nil
  goto BB9
BB60   <- [55]
  prom-           %60.0 = MkArg                    unboundValue, .getGeneric[0x55de2a51b930]_p8, e0.5
  prom-           %60.1 = MkArg                    unboundValue, .getGeneric[0x55de2a51b930]_p9, e0.5
  prom-           %60.2 = MkArg                    unboundValue, .getGeneric[0x55de2a51b930]_p10, e0.5
  ct              %60.3 = PushContext        lCL   %60.0, %60.1, %60.2, .getGenericFromCache(f, where, package), function(name, where, pkg="") <(rir::DispatchT|...>, e0.5
  val?^           %60.4 = CastType                 up %60.2
  val?^           %60.5 = CastType                 up %60.1
  val?^           %60.6 = CastType                 up %60.0
  val?^ | miss    %60.7 = LdVar              eR    .getGenericFromCacheTable, <env 0x55de28b56378>
  lgl$#-          %60.8 = Identical                %60.7, function(name, where, pkg="", table) <(rir::Di|...>
  void                    Branch                   %60.8 -> BB62 (if true) | BB63 (if false)
BB61   <- [55]
  fs              %61.0 = FrameState         R     0x55de2a85cfc0+0: [], env=e0.5
  void                    Deopt              !v    %61.0, CallTarget@0x55de2b85f8f0[Call#0], %55.0
BB9   <- [8, 62]
  val?            %9.0  = Phi                      %8.1:BB8, %62.7:BB62   <(nil|cls)>
  val?            %9.1  = %9.0
  lgl$-           %9.2  = Is                       %9.1, NULL
  void                    StVar              lW    value, %9.1, e0.5
  val             %9.4  = ChkMissing         e     %9.1
  lgl$#-          %9.5  = CheckTrueFalse     e     %9.2
  void                    Branch                   %9.5 -> BB14 (if true) | BB12 (if false)
BB62   <- [60]
  env             e62.0 = MkEnv              l     name=%60.6, where=%60.5, pkg=%60.4, parent=<env 0x55de28b56378>, context 1
  prom-           %62.1 = MkArg                    unboundValue, .getGeneric[0x55de2a51b930]_p11, e62.0
  prom-           %62.2 = MkArg                    unboundValue, .getGeneric[0x55de2a51b930]_p12, e62.0
  prom-           %62.3 = MkArg                    unboundValue, .getGeneric[0x55de2a51b930]_p13, e62.0
  prom-           %62.4 = MkArg                    unboundValue, .getGeneric[0x55de2a51b930]_p14, e62.0
  val?            %62.5 = StaticCall         !v    .getGenericFromCacheTable[0x55de2b55b9a0](%62.1, %62.2, %62.3, %62.4) e62.0   <cls>
  val?            %62.6 = PopContext         C     %62.5, %60.3   <cls>
  val?            %62.7 = %62.6
  goto BB9
BB63   <- [60]
  fs              %63.0 = FrameState         R     0x55de2a85cfc0+65: [], env=e0.5
  env             e63.1 = (MkEnv)            l     name=%60.6, where=%60.5, pkg=%60.4, parent=<env 0x55de28b56378>, context 1
  fs              %63.2 = FrameState         R     0x55de2af3d150+0: [], env=e63.1, next=%63.0
  void                    Deopt              !v    %63.2, CallTarget@0x55de2af215f0[Call#0], %60.7   !
BB14   <- [9]
  val?^ | miss    %14.0 = LdVar              eR    is.character, e0.5
  lgl$#-          %14.1 = Identical                <blt is.character>, %14.0   <true>
  void                    Branch                   %14.1 -> BB64 (if true) | BB65 (if false)
BB12   <- [9]
  void                    Nop                !     
  goto BB13
BB64   <- [14]
  val?^ | miss    %64.0 = LdVar              eR    f, e0.5
  val?            %64.1 = Force!<lazy>       !v    %64.0, e0.5   <str$->
  lgl$#-          %64.2 = CallSafeBuiltin    wed   is.character(%64.1)    <lgl$->
  void                    Branch                   %64.2 -> BB50 (if true) | BB17 (if false)
BB65   <- [14]
  fs              %65.0 = FrameState         R     0x55de2a85cfc0+79: [], env=e0.5
  void                    Deopt              !v    %65.0, DeadBranchReached@0x55de2b85f8f0[Test#0], %14.1   !
BB13   <- [12, 41, 42]
  val?^ | miss    %13.0 = LdVar              eR    value, e0.5
  void                    Visible            v     
  val?            %13.2 = Force!<value>      !     %13.0, e0.5   <(nil|cls)>
  void                    Return             l     %13.2
BB50   <- [64]
  val?^ | miss    %50.0 = LdVar              eR    %in%, e0.5
  lgl$#-          %50.1 = Identical                %50.0, function(x, table) <(rir::DispatchTable*)0x55d|...>
  void                    Branch                   %50.1 -> BB66 (if true) | BB67 (if false)
BB17   <- [64]
  void                    Nop                !     
  lgl$#-          %17.1 = %64.2
  goto BB18
BB66   <- [50]
  val?^ | miss    %66.0 = LdVar              eR    f, e0.5
  val?            %66.1 = Force!<wrapped>    !v    %66.0, e0.5   <str$->
  lgl$#-          %66.2 = IsType                   %66.1 isA val?+
  void                    Branch                   %66.2 -> BB68 (if true) | BB69 (if false)
BB67   <- [50]
  fs              %67.0 = FrameState         R     0x55de2a85cfc0+200: [%64.2], env=e0.5
  void                    Deopt              !v    %67.0, CallTarget@0x55de2b85f8f0[Call#2], %50.0   !
BB18   <- [17, 70]
  lgl$-           %18.0 = Phi                      %70.4:BB70, %17.1:BB17
  lgl$-           %18.1 = %18.0
  lgl$#-          %18.2 = CheckTrueFalse     e     %18.1
  void                    Branch                   %18.2 -> BB49 (if true) | BB19 (if false)
BB68   <- [66]
  val?+           %68.0 = CastType           d     dn %66.1   <(int|str)+>
  val+            %68.1 = CallSafeBuiltin    wed   match(%68.0, "as.double", 0L, nil)    <int->
  lgl$#-          %68.2 = IsType                   %68.1 isA int-
  void                    Branch                   %68.2 -> BB70 (if true) | BB71 (if false)
BB69   <- [66]
  prom-           %69.0 = MkArg                    %66.1, .getGeneric[0x55de2a51b930]_p2 (!refl), e0.5
  val?~           %69.1 = CastType                 up %69.0
  env             e69.2 = (MkEnv)            l     x=%69.1, table="as.double", parent=R_BaseNamespace, context 0
  env             e69.3 = MaterializeEnv           , e69.2   <@?>
  prom-           %69.4 = MkArg                    %66.1, .getGeneric[0x55de2a51b930]_p15 (!refl), e69.3
  val?~           %69.5 = CastType                 up %69.4
  prom-           %69.6 = MkArg                    unboundValue, .getGeneric[0x55de2a51b930]_p16 (!refl), e69.3
  val?^           %69.7 = CastType                 up %69.6
  fs              %69.8 = FrameState         R     0x55de2a85cfc0+249: [%64.2], env=e0.5
  fs              %69.9 = FrameState         R     0x55de28b7c320+54: [], env=e69.3, next=%69.8
  env             e69.10 = (MkEnv)            l     x=%69.5, table=%69.7, nomatch=0L, incomparables(miss)=nil, parent=R_BaseNamespace, context -1
  fs              %69.11 = FrameState         R     0x55de28d63d40+9: [%66.1], env=e69.10, next=%69.9
  void                    Deopt              !v    %69.11, Typecheck@0x55de28db6cb0[Type#0], %66.1   !
BB49   <- [18]
  void                    StVar              lW    f, "as.numeric", e0.5
  goto BB20
BB19   <- [18]
  void                    Nop                !     
  goto BB20
BB70   <- [68]
  int-            %70.0 = CastType           d     dn %68.1
  lgl-            %70.1 = Gt                 wed   %70.0, 0L, elided   <lgl->
  lgl$-           %70.2 = AsLogical                %70.1
  lgl$-           %70.3 = LAnd                     %64.2, %70.2
  lgl$-           %70.4 = %70.3
  goto BB18
BB71   <- [68]
  prom-           %71.0 = MkArg                    %68.0, .getGeneric[0x55de2a51b930]_p2 (!refl), e0.5
  val?~           %71.1 = CastType                 up %71.0
  env             e71.2 = (MkEnv)            l     x=%71.1, table="as.double", parent=R_BaseNamespace, context 0
  env             e71.3 = MaterializeEnv           , e71.2   <@?>
  prom-           %71.4 = MkArg                    "as.double", .getGeneric[0x55de2a51b930]_p16 (!refl), e71.3
  val?~           %71.5 = CastType                 up %71.4
  prom-           %71.6 = MkArg                    %68.0, .getGeneric[0x55de2a51b930]_p15 (!refl), e71.3
  val?~           %71.7 = CastType                 up %71.6
  fs              %71.8 = FrameState         R     0x55de2a85cfc0+249: [%64.2], env=e0.5
  fs              %71.9 = FrameState         R     0x55de28b7c320+54: [], env=e71.3, next=%71.8
  env             e71.10 = (MkEnv)            l     incomparables(miss)=nil, nomatch=0L, table=%71.5, x=%71.7, parent=R_BaseNamespace, context -1
  fs              %71.11 = FrameState         R     0x55de28d63d40+69: [%68.1], env=e71.10, next=%71.9
  void                    Deopt              !v    %71.11, Typecheck@0x55de29bae688[Type#2], %68.1   !
BB20   <- [19, 49]
  val?^ | miss    %20.0 = LdVar              eR    is.character, e0.5
  lgl$#-          %20.1 = Identical                <blt is.character>, %20.0   <true>
  void                    Branch                   %20.1 -> BB72 (if true) | BB73 (if false)
BB72   <- [20]
  val?^ | miss    %72.0 = LdVar              eR    f, e0.5
  val?            %72.1 = Force!<wrapped>    !v    %72.0, e0.5   <str$->
  lgl$#-          %72.2 = CallSafeBuiltin    wed   is.character(%72.1)    <lgl$->
  void                    Branch                   %72.2 -> BB46 (if true) | BB25 (if false)
BB73   <- [20]
  fs              %73.0 = FrameState         R     0x55de2a85cfc0+282: [], env=e0.5
  void                    Deopt              !v    %73.0, DeadBranchReached@0x55de2b85f8f0[Test#1], %20.1   !
BB46   <- [72]
  val?^ | miss    %46.0 = LdVar              eR    nzchar, e0.5
  lgl$#-          %46.1 = Identical                <blt nzchar>, %46.0   <true>
  void                    Branch                   %46.1 -> BB74 (if true) | BB75 (if false)
BB25   <- [72]
  void                    Nop                !     
  lgl$#-          %25.1 = %72.2
  goto BB26
BB74   <- [46]
  val?^ | miss    %74.0 = LdVar              eR    f, e0.5
  val?            %74.1 = Force!<wrapped>    !v    %74.0, e0.5   <str$->
  val?            %74.2 = CallBuiltin        !v    nzchar(%74.1) e0.5   <lgl$->
  lgl$#-          %74.3 = IsType                   %74.2 isA lgl$-
  void                    Branch                   %74.3 -> BB76 (if true) | BB77 (if false)
BB75   <- [46]
  fs              %75.0 = FrameState         R     0x55de2a85cfc0+373: [%72.2], env=e0.5
  void                    Deopt              !v    %75.0, DeadBranchReached@0x55de2b85f8f0[Test#2], %46.1   !
BB26   <- [25, 76]
  lgl$-           %26.0 = Phi                      %76.4:BB76, %25.1:BB25
  lgl$-           %26.1 = %26.0
  lgl$#-          %26.2 = CheckTrueFalse     e     %26.1
  void                    Branch                   %26.2 -> BB45 (if true) | BB27 (if false)
BB76   <- [74]
  lgl$-           %76.0 = CastType           d     dn %74.2
  lgl$-           %76.1 = Not                d     %76.0, elided
  lgl$-           %76.2 = AsLogical                %76.1
  lgl$-           %76.3 = LAnd                     %72.2, %76.2
  lgl$-           %76.4 = %76.3
  goto BB26
BB77   <- [74]
  fs              %77.0 = FrameState         R     0x55de2a85cfc0+476: [%72.2, %74.2], env=e0.5
  void                    Deopt              !v    %77.0, Typecheck@0x55de2b85f8f0[Type#16], %74.2   !
BB45   <- [26]
  (cls|spec|blt)  %45.0 = LdFun              !v    message, e0.5
  val?            %45.1 = Call               !v    %45.0("Empty function name in .getGeneric") e0.5
  (cls|spec|blt)  %45.2 = LdFun              !v    dput, e0.5
  prom-           %45.3 = MkArg                    unboundValue, .getGeneric[0x55de2a51b930]_p7, e0.5
  val?            %45.4 = Call               !v    %45.2(%45.3) e0.5
  goto BB28
BB27   <- [26]
  void                    Nop                !     
  goto BB28
BB28   <- [27, 45]
  val?^ | miss    %28.0 = LdVar              eR    .Call, e0.5
  lgl$#-          %28.1 = Identical                <blt .Call>, %28.0   <true>
  void                    Branch                   %28.1 -> BB78 (if true) | BB79 (if false)
BB78   <- [28]
  val?^ | miss    %78.0 = LdVar              eR    C_R_getGeneric, e0.5
  val?            %78.1 = Force!<value>      !v    %78.0, e0.5   <vec>
  val?^ | miss    %78.2 = LdVar              eR    f, e0.5
  val?            %78.3 = Force!<wrapped>    !v    %78.2, e0.5   <str$->
  val?^ | miss    %78.4 = LdVar              eR    as.environment, e0.5
  lgl$#-          %78.5 = Identical                <blt as.environment>, %78.4   <true>
  void                    Branch                   %78.5 -> BB80 (if true) | BB81 (if false)
BB79   <- [28]
  fs              %79.0 = FrameState         R     0x55de2a85cfc0+561: [], env=e0.5
  void                    Deopt              !v    %79.0, DeadBranchReached@0x55de2b85f8f0[Test#3], %28.1   !
BB80   <- [78]
  val?^ | miss    %80.0 = LdVar              eR    where, e0.5
  val?            %80.1 = Force!<lazy>       !v    %80.0, e0.5   <env->
  val?            %80.2 = CallBuiltin        !v    as.environment(%80.1) e0.5   <env->
  val?^ | miss    %80.3 = LdVar              eR    package, e0.5
  val?            %80.4 = Force!<lazy>       !v    %80.3, e0.5   <str$->
  val?            %80.5 = CallBuiltin        !v    .Call(%78.1, %78.3, false, %80.2, %80.4) e0.5   <(nil|cls)>
  lgl$-           %80.6 = Is                       %80.5, NULL
  void                    StVar              lW    value, %80.5, e0.5
  val             %80.8 = ChkMissing         e     %80.5
  lgl$-           %80.9 = Not                d     %80.6, elided
  lgl$-           %80.10 = AsLogical                %80.9
  lgl$#-          %80.11 = Identical                %80.10, false
  void                    Branch                   %80.11 -> BB44 (if true) | BB35 (if false)
BB81   <- [78]
  fs              %81.0 = FrameState         R     0x55de2a85cfc0+664: [<blt .Call>, %78.1, %78.3], env=e0.5
  void                    Deopt              !v    %81.0, DeadBranchReached@0x55de2b85f8f0[Test#4], %78.5   !
BB44   <- [80]
  void                    Nop                !     
  lgl$-           %44.1 = %80.10
  goto BB38
BB35   <- [80]
  val?^ | miss    %35.0 = LdVar              eR    .GlobalEnv, e0.5
  lgl$#-          %35.1 = IsType                   %35.0 isA val?~- | miss
  void                    Branch                   %35.1 -> BB82 (if true) | BB83 (if false)
BB38   <- [44, 86]
  lgl$-           %38.0 = Phi                      %86.7:BB86, %44.1:BB44
  lgl$-           %38.1 = %38.0
  lgl$-           %38.2 = AsLogical                %38.1
  lgl$#-          %38.3 = Identical                %38.2, false
  void                    Branch                   %38.3 -> BB43 (if true) | BB39 (if false)
BB82   <- [35]
  val?~- | miss   %82.0 = CastType           d     dn %35.0
  val?-           %82.1 = Force!<value>            %82.0,    <env->
  lgl$#-          %82.2 = IsType                   %82.1 isA val+   <true>
  void                    Branch                   %82.2 -> BB84 (if true) | BB85 (if false)
BB83   <- [35]
  void                    Nop                !     
  val?^ | miss    %83.1 = %35.0
  dr              %83.2 = Typecheck@0x55de2b85f8f0[Type#31]
  goto BB33
BB43   <- [38]
  void                    Nop                !     
  lgl$-           %43.1 = %38.2
  goto BB40
BB39   <- [38]
  (cls|spec|blt)  %39.0 = LdFun              !v    identical, e0.5
  prom-           %39.1 = MkArg                    unboundValue, .getGeneric[0x55de2a51b930]_p3, e0.5
  prom-           %39.2 = MkArg                    unboundValue, .getGeneric[0x55de2a51b930]_p4, e0.5
  val?            %39.3 = Call               !v    %39.0(%39.1, %39.2) e0.5   <val?_>
  lgl$-           %39.4 = AsLogical          e     %39.3
  lgl$-           %39.5 = LAnd                     %38.2, %39.4
  lgl$-           %39.6 = %39.5
  goto BB40
BB84   <- [82]
  val?^ | miss    %84.0 = LdVar              eR    f, e0.5
  val?            %84.1 = Force!<wrapped>    !v    %84.0, e0.5   <str$->
  lgl$#-          %84.2 = IsType                   %84.1 isA val?-
  void                    Branch                   %84.2 -> BB86 (if true) | BB87 (if false)
BB85   <- [82]
  void                    Nop                !     
  lgl$#-          %85.1 = %82.2
  dr              %85.2 = DeadBranchReached@0x55de2b85f8f0[Test#5]
  goto BB33
BB33   <- [83, 85]
  val?^ | miss    %33.0 = Phi                      %83.1:BB83, %85.1:BB85
  val?^ | miss    %33.1 = %33.0
  dr              %33.2 = Phi                      %83.2:BB83, %85.2:BB85
  dr              %33.3 = %33.2
  fs              %33.4 = FrameState         R     0x55de2a85cfc0+816: [], env=e0.5
  void                    Deopt              !v    %33.4, %33.3, %33.1   !
BB40   <- [43, 39]
  lgl$-           %40.0 = Phi                      %39.6:BB39, %43.1:BB43
  lgl$-           %40.1 = %40.0
  lgl$#-          %40.2 = CheckTrueFalse     e     %40.1
  void                    Branch                   %40.2 -> BB42 (if true) | BB41 (if false)
BB86   <- [84]
  val?-           %86.0 = CastType           d     dn %84.1   <str$->
  val?            %86.1 = Extract2_1D        wed   %82.1, %86.0, elided   <nil->
  lgl$-           %86.2 = Is                       %86.1, NULL
  void                    StVar              lW    vv, %86.1, e0.5
  lgl$-           %86.4 = Not                d     %86.2, elided
  lgl$-           %86.5 = AsLogical                %86.4
  lgl$-           %86.6 = LAnd                     %80.10, %86.5
  lgl$-           %86.7 = %86.6
  goto BB38
BB87   <- [84]
  fs              %87.0 = FrameState         R     0x55de2a85cfc0+897: [%80.10, %82.1, %84.1], env=e0.5
  void                    Deopt              !v    %87.0, Typecheck@0x55de2b85f8f0[Type#33], %84.1   !
BB42   <- [40]
  (cls|spec|blt)  %42.0 = LdFun              !v    .cacheGeneric, e0.5
  prom-           %42.1 = MkArg                    unboundValue, .getGeneric[0x55de2a51b930]_p5, e0.5
  prom-           %42.2 = MkArg                    unboundValue, .getGeneric[0x55de2a51b930]_p6, e0.5
  val?            %42.3 = Call               !v    %42.0(%42.1, %42.2) e0.5
  goto BB13
BB41   <- [40]
  void                    Nop                !     
  goto BB13
Prom 0:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    .GlobalEnv, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    f, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 3:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    vv, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 4:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    value, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 5:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    f, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 6:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    value, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 7:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     sys.calls, e0.0
  val?            %0.2  = Call               !     %0.1() e0.0   <val?_>
  void                    Return             l     %0.2
Prom 8:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    f, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 9:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 10:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    package, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 11:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    name, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 12:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 13:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    pkg, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 14:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    .genericTable, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 15:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    x, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <(int|str)+>
  void                    Return             l     %0.3
Prom 16:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    table, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <val?->
  void                    Return             l     %0.3

│ .getGeneric[0x55de2a51b930]                                                  │
└──────────────────────────────────────────────────────────────────────────────┘
