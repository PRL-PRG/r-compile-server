
┌──────────────────────────────────────────────────────────────────────────────┐
│ .getGeneric[0x55de2aad9540]                                                  │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;NonRefl0,NonRefl2                    │
│ Properties:                                                                  │
├────── Final PIR Version
.getGeneric[0x55de2aad9540]
BB0
  val?^           %0.0  = LdArg                    2
  val?^           %0.1  = LdArg                    1
  val?^           %0.2  = LdArg                    0
  env             e0.3  = MkEnv              l     f=%0.2, where=%0.1, package=%0.0, parent=<env 0x55de28b56378>, context 1
  lgl$-           %0.4  = Missing            eR    where, e0.3
  lgl$#-          %0.5  = CheckTrueFalse     e     %0.4
  void                    Branch                   %0.5 -> BB46 (if true) | BB3 (if false)
BB46   <- [0]
  val?^ | miss    %46.0 = LdVar              eR    .getGenericFromCache, <env 0x55de28b56378>
  lgl$#-          %46.1 = Identical                %46.0, function(name, where, pkg="") <(rir::DispatchT|...>
  void                    Branch                   %46.1 -> BB50 (if true) | BB51 (if false)
BB3   <- [0]
  void                    Nop                !     
  nil-            %3.1  = nil
  goto BB4
BB50   <- [46]
  prom-           %50.0 = MkArg                    unboundValue, .getGeneric[0x55de2aad9540]_p0 (!refl), e0.3
  prom-           %50.1 = MkArg                    unboundValue, .getGeneric[0x55de2aad9540]_p1, e0.3
  prom-           %50.2 = MkArg                    unboundValue, .getGeneric[0x55de2aad9540]_p2 (!refl), e0.3
  ct              %50.3 = PushContext        lCL   %50.0, %50.1, %50.2, .getGenericFromCache(f, where, package), function(name, where, pkg="") <(rir::DispatchT|...>, e0.3
  val?^           %50.4 = CastType                 up %50.2
  val?^           %50.5 = CastType                 up %50.1
  val?^           %50.6 = CastType                 up %50.0
  val?^ | miss    %50.7 = LdVar              eR    .getGenericFromCacheTable, <env 0x55de28b56378>
  lgl$#-          %50.8 = Identical                %50.7, function(name, where, pkg="", table) <(rir::Di|...>
  void                    Branch                   %50.8 -> BB56 (if true) | BB57 (if false)
BB51   <- [46]
  env             e51.0 = (MkEnv)            l     f=%0.2, where=%0.1, package=%0.0, parent=<env 0x55de28b56378>, context 1
  fs              %51.1 = FrameState         R     0x55de2a85cfc0+0: [], env=e51.0
  void                    Deopt              !v    %51.1, CallTarget@0x55de2b85f8f0[Call#0], %46.0
BB4   <- [3, 56]
  val?            %4.0  = Phi                      %3.1:BB3, %56.7:BB56   <(nil|cls)>
  val?            %4.1  = %4.0
  lgl$-           %4.2  = Is                       %4.1, NULL
  void                    StVar              lW    value, %4.1, e0.3
  val             %4.4  = ChkMissing         e     %4.1
  lgl$#-          %4.5  = CheckTrueFalse     e     %4.2
  void                    Branch                   %4.5 -> BB9 (if true) | BB7 (if false)
BB56   <- [50]
  env             e56.0 = MkEnv              l     name=%50.6, where=%50.5, pkg=%50.4, parent=<env 0x55de28b56378>, context 1
  prom-           %56.1 = MkArg                    unboundValue, .getGeneric[0x55de2aad9540]_p3, e56.0
  prom-           %56.2 = MkArg                    unboundValue, .getGeneric[0x55de2aad9540]_p4, e56.0
  prom-           %56.3 = MkArg                    unboundValue, .getGeneric[0x55de2aad9540]_p5, e56.0
  prom-           %56.4 = MkArg                    unboundValue, .getGeneric[0x55de2aad9540]_p6, e56.0
  val?            %56.5 = StaticCall         !v    .getGenericFromCacheTable[0x55de2b14f140](%56.1, %56.2, %56.3, %56.4) e56.0   <(nil|cls)>
  val?            %56.6 = PopContext         C     %56.5, %50.3   <cls>
  val?            %56.7 = %56.6
  goto BB4
BB57   <- [50]
  fs              %57.0 = FrameState         R     0x55de2a85cfc0+65: [], env=e0.3
  env             e57.1 = (MkEnv)            l     name=%50.6, where=%50.5, pkg=%50.4, parent=<env 0x55de28b56378>, context 1
  fs              %57.2 = FrameState         R     0x55de2af3d150+0: [], env=e57.1, next=%57.0
  void                    Deopt              !v    %57.2, CallTarget@0x55de2af215f0[Call#0], %50.7   !
BB9   <- [4]
  val?^ | miss    %9.0  = LdVar              eR    is.character, e0.3
  lgl$#-          %9.1  = Identical                <blt is.character>, %9.0   <true>
  void                    Branch                   %9.1 -> BB52 (if true) | BB53 (if false)
BB7   <- [4]
  void                    Nop                !     
  goto BB8
BB52   <- [9]
  val?^ | miss    %52.0 = LdVar              eR    f, e0.3
  val?            %52.1 = Force!<lazy>       !v    %52.0, e0.3   <str$->
  lgl$#-          %52.2 = CallSafeBuiltin    wed   is.character(%52.1)    <lgl$->
  void                    Branch                   %52.2 -> BB43 (if true) | BB12 (if false)
BB53   <- [9]
  fs              %53.0 = FrameState         R     0x55de2a85cfc0+79: [], env=e0.3
  void                    Deopt              !v    %53.0, DeadBranchReached@0x55de2b85f8f0[Test#0], %9.1   !
BB8   <- [7, 35]
  val?^ | miss    %8.0  = LdVar              eR    value, e0.3
  void                    Visible            v     
  val?            %8.2  = Force!<value>      !     %8.0, e0.3   <(nil|cls)>
  void                    Return             l     %8.2
BB43   <- [52]
  val?^ | miss    %43.0 = LdVar              eR    %in%, e0.3
  lgl$#-          %43.1 = Identical                %43.0, function(x, table) <(rir::DispatchTable*)0x55d|...>
  void                    Branch                   %43.1 -> BB54 (if true) | BB55 (if false)
BB12   <- [52]
  void                    Nop                !     
  lgl$#-          %12.1 = %52.2
  goto BB13
BB54   <- [43]
  val?^ | miss    %54.0 = LdVar              eR    f, e0.3
  val?            %54.1 = Force!<wrapped>    !v    %54.0, e0.3   <str$->
  prom-           %54.2 = MkArg                    %54.1, .getGeneric[0x55de2aad9540]_p7 (!refl), 
  val?            %54.3 = StaticCall         !v    %in%[0x55de28f877c0](%54.2, "as.double") e0.3   <lgl$->
  lgl$#-          %54.4 = IsType                   %54.3 isA lgl$-
  void                    Branch                   %54.4 -> BB58 (if true) | BB59 (if false)
BB55   <- [43]
  fs              %55.0 = FrameState         R     0x55de2a85cfc0+200: [%52.2], env=e0.3
  void                    Deopt              !v    %55.0, CallTarget@0x55de2b85f8f0[Call#2], %43.0   !
BB13   <- [12, 58]
  lgl$-           %13.0 = Phi                      %58.3:BB58, %12.1:BB12
  lgl$-           %13.1 = %13.0
  lgl$#-          %13.2 = CheckTrueFalse     e     %13.1
  void                    Branch                   %13.2 -> BB42 (if true) | BB14 (if false)
BB58   <- [54]
  lgl$-           %58.0 = CastType           d     dn %54.3
  lgl$-           %58.1 = AsLogical                %58.0
  lgl$-           %58.2 = LAnd                     %52.2, %58.1
  lgl$-           %58.3 = %58.2
  goto BB13
BB59   <- [54]
  fs              %59.0 = FrameState         R     0x55de2a85cfc0+249: [%52.2, %54.3], env=e0.3
  void                    Deopt              !v    %59.0, Typecheck@0x55de2b85f8f0[Type#10], %54.3   !
BB42   <- [13]
  void                    StVar              lW    f, "as.numeric", e0.3
  goto BB15
BB14   <- [13]
  void                    Nop                !     
  goto BB15
BB15   <- [42, 14]
  val?^ | miss    %15.0 = LdVar              eR    is.character, e0.3
  lgl$#-          %15.1 = Identical                <blt is.character>, %15.0   <true>
  void                    Branch                   %15.1 -> BB60 (if true) | BB61 (if false)
BB60   <- [15]
  val?^ | miss    %60.0 = LdVar              eR    f, e0.3
  val?            %60.1 = Force!<wrapped>    !v    %60.0, e0.3   <str$->
  lgl$#-          %60.2 = CallSafeBuiltin    wed   is.character(%60.1)    <lgl$->
  void                    Branch                   %60.2 -> BB39 (if true) | BB20 (if false)
BB61   <- [15]
  fs              %61.0 = FrameState         R     0x55de2a85cfc0+282: [], env=e0.3
  void                    Deopt              !v    %61.0, DeadBranchReached@0x55de2b85f8f0[Test#1], %15.1   !
BB39   <- [60]
  val?^ | miss    %39.0 = LdVar              eR    nzchar, e0.3
  lgl$#-          %39.1 = Identical                <blt nzchar>, %39.0   <true>
  void                    Branch                   %39.1 -> BB62 (if true) | BB63 (if false)
BB20   <- [60]
  void                    Nop                !     
  lgl$#-          %20.1 = %60.2
  goto BB21
BB62   <- [39]
  val?^ | miss    %62.0 = LdVar              eR    f, e0.3
  val?            %62.1 = Force!<wrapped>    !v    %62.0, e0.3   <str$->
  val?            %62.2 = CallBuiltin        !v    nzchar(%62.1) e0.3   <lgl$->
  lgl$#-          %62.3 = IsType                   %62.2 isA lgl$-
  void                    Branch                   %62.3 -> BB64 (if true) | BB65 (if false)
BB63   <- [39]
  fs              %63.0 = FrameState         R     0x55de2a85cfc0+373: [%60.2], env=e0.3
  void                    Deopt              !v    %63.0, DeadBranchReached@0x55de2b85f8f0[Test#2], %39.1   !
BB21   <- [20, 64]
  lgl$-           %21.0 = Phi                      %64.4:BB64, %20.1:BB20
  lgl$-           %21.1 = %21.0
  lgl$#-          %21.2 = CheckTrueFalse     e     %21.1
  void                    Branch                   %21.2 -> BB38 (if true) | BB24 (if false)
BB64   <- [62]
  lgl$-           %64.0 = CastType           d     dn %62.2
  lgl$-           %64.1 = Not                d     %64.0, elided
  lgl$-           %64.2 = AsLogical                %64.1
  lgl$-           %64.3 = LAnd                     %60.2, %64.2
  lgl$-           %64.4 = %64.3
  goto BB21
BB65   <- [62]
  fs              %65.0 = FrameState         R     0x55de2a85cfc0+476: [%60.2, %62.2], env=e0.3
  void                    Deopt              !v    %65.0, Typecheck@0x55de2b85f8f0[Type#16], %62.2   !
BB38   <- [21]
  (cls|spec|blt)  %38.0 = LdFun              !v    message, e0.3
  fs              %38.1 = FrameState         R     0x55de2a85cfc0+500: [%38.0], env=e0.3
  void                    Deopt              !v    %38.1, DeadCall@0x55de2b85f8f0[Call#5], %38.0   !
BB24   <- [21]
  val?^ | miss    %24.0 = LdVar              eR    .Call, e0.3
  lgl$#-          %24.1 = Identical                <blt .Call>, %24.0   <true>
  void                    Branch                   %24.1 -> BB66 (if true) | BB67 (if false)
BB66   <- [24]
  val?^ | miss    %66.0 = LdVar              eR    C_R_getGeneric, e0.3
  val?            %66.1 = Force!<value>      !v    %66.0, e0.3   <vec>
  val?^ | miss    %66.2 = LdVar              eR    f, e0.3
  val?            %66.3 = Force!<wrapped>    !v    %66.2, e0.3   <str$->
  val?^ | miss    %66.4 = LdVar              eR    as.environment, e0.3
  lgl$#-          %66.5 = Identical                <blt as.environment>, %66.4   <true>
  void                    Branch                   %66.5 -> BB68 (if true) | BB69 (if false)
BB67   <- [24]
  fs              %67.0 = FrameState         R     0x55de2a85cfc0+484: [%21.1], env=e0.3
  void                    Deopt              !v    %67.0, DeadBranchReached@0x55de2b85f8f0[Test#3], %24.1   !
BB68   <- [66]
  val?^ | miss    %68.0 = LdVar              eR    where, e0.3
  val?            %68.1 = Force!<lazy>       !v    %68.0, e0.3   <env->
  val?            %68.2 = CallBuiltin        !v    as.environment(%68.1) e0.3   <env->
  val?^ | miss    %68.3 = LdVar              eR    package, e0.3
  val?            %68.4 = Force!<lazy>       !v    %68.3, e0.3   <str$->
  val?            %68.5 = CallBuiltin        !v    .Call(%66.1, %66.3, false, %68.2, %68.4) e0.3   <(nil|cls)>
  lgl$-           %68.6 = Is                       %68.5, NULL
  void                    StVar              lW    value, %68.5, e0.3
  val             %68.8 = ChkMissing         e     %68.5
  lgl$-           %68.9 = Not                d     %68.6, elided
  lgl$-           %68.10 = AsLogical                %68.9
  lgl$#-          %68.11 = Identical                %68.10, false
  void                    Branch                   %68.11 -> BB37 (if true) | BB29 (if false)
BB69   <- [66]
  fs              %69.0 = FrameState         R     0x55de2a85cfc0+664: [<blt .Call>, %66.1, %66.3], env=e0.3
  void                    Deopt              !v    %69.0, DeadBranchReached@0x55de2b85f8f0[Test#4], %66.5   !
BB37   <- [68]
  void                    Nop                !     
  lgl$-           %37.1 = %68.10
  goto BB32
BB29   <- [68]
  val?^ | miss    %29.0 = LdVar              eR    .GlobalEnv, e0.3
  lgl$#-          %29.1 = IsType                   %29.0 isA val?~- | miss
  void                    Branch                   %29.1 -> BB70 (if true) | BB71 (if false)
BB32   <- [37, 74]
  lgl$-           %32.0 = Phi                      %74.7:BB74, %37.1:BB37
  lgl$-           %32.1 = %32.0
  lgl$-           %32.2 = AsLogical                %32.1
  lgl$#-          %32.3 = Identical                %32.2, false
  void                    Branch                   %32.3 -> BB34 (if true) | BB33 (if false)
BB70   <- [29]
  val?~- | miss   %70.0 = CastType           d     dn %29.0
  val?-           %70.1 = Force!<value>            %70.0,    <env->
  lgl$#-          %70.2 = IsType                   %70.1 isA val+   <true>
  void                    Branch                   %70.2 -> BB72 (if true) | BB73 (if false)
BB71   <- [29]
  void                    Nop                !     
  val?^ | miss    %71.1 = %29.0
  dr              %71.2 = Typecheck@0x55de2b85f8f0[Type#31]
  goto BB27
BB34   <- [32]
  lgl$#-          %34.0 = CheckTrueFalse     e     %32.2
  void                    Branch                   %34.0 -> BB36 (if true) | BB35 (if false)
BB33   <- [32]
  (cls|spec|blt)  %33.0 = LdFun              !v    identical, e0.3
  fs              %33.1 = FrameState         R     0x55de2a85cfc0+940: [%32.2, %33.0], env=e0.3
  void                    Deopt              !v    %33.1, DeadCall@0x55de2b85f8f0[Call#11], %33.0   !
BB72   <- [70]
  val?^ | miss    %72.0 = LdVar              eR    f, e0.3
  val?            %72.1 = Force!<wrapped>    !v    %72.0, e0.3   <str$->
  lgl$#-          %72.2 = IsType                   %72.1 isA val?-
  void                    Branch                   %72.2 -> BB74 (if true) | BB75 (if false)
BB73   <- [70]
  void                    Nop                !     
  lgl$#-          %73.1 = %70.2
  dr              %73.2 = DeadBranchReached@0x55de2b85f8f0[Test#5]
  goto BB27
BB27   <- [71, 73]
  val?^ | miss    %27.0 = Phi                      %71.1:BB71, %73.1:BB73
  val?^ | miss    %27.1 = %27.0
  dr              %27.2 = Phi                      %71.2:BB71, %73.2:BB73
  dr              %27.3 = %27.2
  fs              %27.4 = FrameState         R     0x55de2a85cfc0+816: [], env=e0.3
  void                    Deopt              !v    %27.4, %27.3, %27.1   !
BB36   <- [34]
  (cls|spec|blt)  %36.0 = LdFun              !v    .cacheGeneric, e0.3
  fs              %36.1 = FrameState         R     0x55de2a85cfc0+995: [%36.0], env=e0.3
  void                    Deopt              !v    %36.1, DeadCall@0x55de2b85f8f0[Call#12], %36.0   !
BB35   <- [34]
  void                    Nop                !     
  goto BB8
BB74   <- [72]
  val?-           %74.0 = CastType           d     dn %72.1   <str$->
  val?            %74.1 = Extract2_1D        wed   %70.1, %74.0, elided   <nil->
  lgl$-           %74.2 = Is                       %74.1, NULL
  void                    StVar              lW    vv, %74.1, e0.3
  lgl$-           %74.4 = Not                d     %74.2, elided
  lgl$-           %74.5 = AsLogical                %74.4
  lgl$-           %74.6 = LAnd                     %68.10, %74.5
  lgl$-           %74.7 = %74.6
  goto BB32
BB75   <- [72]
  fs              %75.0 = FrameState         R     0x55de2a85cfc0+897: [%68.10, %70.1, %72.1], env=e0.3
  void                    Deopt              !v    %75.0, Typecheck@0x55de2b85f8f0[Type#33], %72.1   !
Prom 0:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    f, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    package, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 3:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    name, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 4:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 5:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    pkg, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 6:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    .genericTable, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 7:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    f, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3

│ .getGeneric[0x55de2aad9540]                                                  │
└──────────────────────────────────────────────────────────────────────────────┘
