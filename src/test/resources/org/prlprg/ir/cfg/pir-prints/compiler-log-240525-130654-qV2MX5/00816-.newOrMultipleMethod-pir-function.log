
┌──────────────────────────────────────────────────────────────────────────────┐
│ .newOrMultipleMethod[0x55de2ac73790]                                         │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch                                      │
│ Properties:                                                                  │
├────── Final PIR Version
.newOrMultipleMethod[0x55de2ac73790]
BB0
  val?^           %0.0  = LdArg                    2
  val?^           %0.1  = LdArg                    1
  val?^           %0.2  = LdArg                    0
  val?^ | miss    %0.3  = LdVar              eR    .duplicateClassesExist, <env 0x55de28b56378>
  lgl$#-          %0.4  = Identical                %0.3, function(on) <(rir::DispatchTable*)0x55de2cdf4|...>
  void                    Branch                   %0.4 -> BB59 (if true) | BB60 (if false)
BB59   <- [0]
  env             e59.0 = MkEnv              l     obj=%0.2, what=%0.1, table=%0.0, parent=<env 0x55de28b56378>, context 1
  val?            %59.1 = StaticCall         !v    .duplicateClassesExist[0x55de2b9fa7b0]() e59.0   <lgl$->
  lgl$#-          %59.2 = IsType                   %59.1 isA lgl$-
  void                    Branch                   %59.2 -> BB61 (if true) | BB62 (if false)
BB60   <- [0]
  env             e60.0 = (MkEnv)            l     obj=%0.2, what=%0.1, table=%0.0, parent=<env 0x55de28b56378>, context 1
  fs              %60.1 = FrameState         R     0x55de2e14da90+0: [], env=e60.0
  void                    Deopt              !v    %60.1, CallTarget@0x55de2ab46460[Call#0], %0.3
BB61   <- [59]
  lgl$-           %61.0 = CastType           d     dn %59.1
  lgl$-           %61.1 = Not                d     %61.0, elided
  lgl$#-          %61.2 = CheckTrueFalse     e     %61.1
  void                    Branch                   %61.2 -> BB57 (if true) | BB5 (if false)
BB62   <- [59]
  fs              %62.0 = FrameState         R     0x55de2e14da90+27: [%59.1], env=e59.0
  void                    Deopt              !v    %62.0, Typecheck@0x55de2ab46460[Type#0], %59.1   !
BB57   <- [61]
  val?^ | miss    %57.0 = LdVar              eR    obj, e59.0
  void                    Visible            v     
  val?            %57.2 = Force!<lazy>       !     %57.0, e59.0   <cls>
  val?            %57.3 = %57.2
  goto BB12
BB5   <- [61]
  (cls|spec|blt)  %5.0  = LdFun              !v    get, e59.0
  prom-           %5.1  = MkArg                    unboundValue, .newOrMultipleMethod[0x55de2ac73790]_p0, e59.0
  prom-           %5.2  = MkArg                    unboundValue, .newOrMultipleMethod[0x55de2ac73790]_p1, e59.0
  val?            %5.3  = NamedCall          !v    %5.0(%5.1, envir=%5.2) e59.0   <val?_>
  void                    StVar              lW    current, %5.3, e59.0
  val?^ | miss    %5.5  = LdVar              eR    is.environment, e59.0
  lgl$#-          %5.6  = Identical                <blt is.environment>, %5.5   <@?>
  void                    Branch                   %5.6 -> BB56 (if true) | BB6 (if false)
BB12   <- [57, 38, 18, 11, 33]
  val?            %12.0 = Phi                      %11.2:BB11, %18.15:BB18, %33.3:BB33, %38.3:BB38, %57.3:BB57
  val?            %12.1 = %12.0
  void                    Return             l     %12.1
BB56   <- [5]
  val             %56.0 = ChkMissing         e     %5.3
  lgl$#-          %56.1 = CallSafeBuiltin    wed   is.environment(%5.3) 
  lgl$#-          %56.2 = true
  lgl$#-          %56.3 = %56.1
  goto BB7
BB6   <- [5]
  val             %6.0  = ChkMissing         e     %5.3
  lgl$#-          %6.1  = CallSafeBuiltin    wed   is.environment(%5.3) 
  lgl$#-          %6.2  = false
  lgl$#-          %6.3  = %6.1
  goto BB7
BB7   <- [56, 6]
  lgl$#-          %7.0  = Phi                      %56.2:BB56, %6.2:BB6
  lgl$#-          %7.1  = %7.0
  lgl$#-          %7.2  = Phi                      %6.3:BB6, %56.3:BB56   <val?_>
  lgl$#-          %7.3  = %7.2
  void                    Branch                   %7.3 -> BB41 (if true) | BB8 (if false)
BB41   <- [7]
  void                    Branch                   %7.1 -> BB55 (if true) | BB42 (if false)
BB8   <- [7]
  (cls|spec|blt)  %8.0  = LdFun              !v    is, e59.0
  prom-           %8.1  = MkArg                    unboundValue, .newOrMultipleMethod[0x55de2ac73790]_p3, e59.0
  val?            %8.2  = Call               !v    %8.0(%8.1, "MethodDefinition") e59.0   <val?_>
  lgl$#-          %8.3  = CheckTrueFalse     we    %8.2
  void                    Branch                   %8.3 -> BB13 (if true) | BB9 (if false)
BB55   <- [41]
  val?^ | miss    %55.0 = LdVar              eR    obj, e59.0
  val?            %55.1 = Force!             !v    %55.0, e59.0   <val?_>
  lgl$#-          %55.2 = CallSafeBuiltin    wed   is.environment(%55.1) 
  lgl$#-          %55.3 = %55.2
  goto BB43
BB42   <- [41]
  val?^ | miss    %42.0 = LdVar              eR    obj, e59.0
  val?            %42.1 = Force!             !v    %42.0, e59.0   <val?_>
  lgl$#-          %42.2 = CallSafeBuiltin    wed   is.environment(%42.1) 
  lgl$#-          %42.3 = %42.2
  goto BB43
BB13   <- [8]
  (cls|spec|blt)  %13.0 = LdFun              !v    packageSlot, e59.0
  prom-           %13.1 = MkArg                    unboundValue, .newOrMultipleMethod[0x55de2ac73790]_p4, e59.0
  val?            %13.2 = Call               !v    %13.0(%13.1) e59.0   <val?_>
  void                    StVar              lW    curPkg, %13.2, e59.0
  (cls|spec|blt)  %13.4 = LdFun              !v    is, e59.0
  prom-           %13.5 = MkArg                    unboundValue, .newOrMultipleMethod[0x55de2ac73790]_p7, e59.0
  val?            %13.6 = Call               !v    %13.4(%13.5, "MethodDefinition") e59.0   <val?_>
  lgl$#-          %13.7 = CheckTrueFalse     we    %13.6
  void                    Branch                   %13.7 -> BB20 (if true) | BB14 (if false)
BB9   <- [8]
  void                    Invisible          v     
  nil-            %9.1  = nil
  goto BB10
BB43   <- [55, 42]
  lgl$#-          %43.0 = Phi                      %42.3:BB42, %55.3:BB55   <val?_>
  lgl$#-          %43.1 = %43.0
  void                    Branch                   %43.1 -> BB54 (if true) | BB44 (if false)
BB20   <- [13]
  (cls|spec|blt)  %20.0 = LdFun              !v    packageSlot, e59.0
  prom-           %20.1 = MkArg                    unboundValue, .newOrMultipleMethod[0x55de2ac73790]_p16, e59.0
  val?            %20.2 = Call               !v    %20.0(%20.1) e59.0   <val?_>
  void                    StVar              lW    objPkg, %20.2, e59.0
  val?^ | miss    %20.4 = LdVar              eR    curPkg, e59.0
  val?            %20.5 = Force!             !v    %20.4, e59.0   <val?_>
  lgl$-           %20.6 = Is                       %20.5, NULL
  lgl$-           %20.7 = AsLogical                %20.6
  lgl$#-          %20.8 = Identical                %20.7, true
  void                    Branch                   %20.8 -> BB40 (if true) | BB21 (if false)
BB14   <- [13]
  val?^ | miss    %14.0 = LdVar              eR    is.environment, e59.0
  lgl$#-          %14.1 = Identical                <blt is.environment>, %14.0   <@?>
  void                    Branch                   %14.1 -> BB19 (if true) | BB15 (if false)
BB10   <- [9, 17]
  val?            %10.0 = Phi                      %9.1:BB9, %17.3:BB17
  val?            %10.1 = %10.0
  val?            %10.2 = %10.1
  goto BB11
BB54   <- [43]
  (cls|spec|blt)  %54.0 = LdFun              !v    list2env, e59.0
  prom-           %54.1 = MkArg                    unboundValue, .newOrMultipleMethod[0x55de2ac73790]_p38, e59.0
  prom-           %54.2 = MkArg                    unboundValue, .newOrMultipleMethod[0x55de2ac73790]_p40, e59.0
  val?            %54.3 = Call               !v    %54.0(%54.1, %54.2) e59.0
  goto BB47
BB44   <- [43]
  (cls|spec|blt)  %44.0 = LdFun              !v    is, e59.0
  prom-           %44.1 = MkArg                    unboundValue, .newOrMultipleMethod[0x55de2ac73790]_p32, e59.0
  val?            %44.2 = Call               !v    %44.0(%44.1, "MethdodDefinition") e59.0   <val?_>
  lgl$#-          %44.3 = CheckTrueFalse     we    %44.2
  void                    Branch                   %44.3 -> BB48 (if true) | BB45 (if false)
BB40   <- [20]
  void                    Nop                !     
  lgl$-           %40.1 = %20.7
  goto BB22
BB21   <- [20]
  val?^ | miss    %21.0 = LdVar              eR    objPkg, e59.0
  val?            %21.1 = Force!             !v    %21.0, e59.0   <val?_>
  lgl$-           %21.2 = Is                       %21.1, NULL
  lgl$-           %21.3 = AsLogical                %21.2
  lgl$-           %21.4 = LOr                      %20.7, %21.3
  lgl$-           %21.5 = %21.4
  goto BB22
BB19   <- [14]
  val?^ | miss    %19.0 = LdVar              eR    obj, e59.0
  val?            %19.1 = Force!             !v    %19.0, e59.0   <val?_>
  lgl$#-          %19.2 = CallSafeBuiltin    wed   is.environment(%19.1) 
  lgl$#-          %19.3 = %19.2
  goto BB16
BB15   <- [14]
  val?^ | miss    %15.0 = LdVar              eR    obj, e59.0
  val?            %15.1 = Force!             !v    %15.0, e59.0   <val?_>
  lgl$#-          %15.2 = CallSafeBuiltin    wed   is.environment(%15.1) 
  lgl$#-          %15.3 = %15.2
  goto BB16
BB11   <- [10, 47]
  val?            %11.0 = Phi                      %10.2:BB10, %47.3:BB47
  val?            %11.1 = %11.0
  val?            %11.2 = %11.1
  goto BB12
BB47   <- [54, 46]
  val?^ | miss    %47.0 = LdVar              eR    current, e59.0
  void                    Visible            v     
  val?            %47.2 = Force!             !     %47.0, e59.0   <val?_>
  val?            %47.3 = %47.2
  goto BB11
BB48   <- [44]
  (cls|spec|blt)  %48.0 = LdFun              !v    .pkgMethodLabel, e59.0
  prom-           %48.1 = MkArg                    unboundValue, .newOrMultipleMethod[0x55de2ac73790]_p33, e59.0
  val?            %48.2 = Call               !v    %48.0(%48.1) e59.0   <val?_>
  void                    StVar              lW    var, %48.2, e59.0
  val?^ | miss    %48.4 = LdVar              eR    nzchar, e59.0
  lgl$#-          %48.5 = Identical                <blt nzchar>, %48.4   <@?>
  void                    Branch                   %48.5 -> BB53 (if true) | BB49 (if false)
BB45   <- [44]
  void                    Nop                !     
  goto BB46
BB22   <- [40, 21]
  lgl$-           %22.0 = Phi                      %21.5:BB21, %40.1:BB40
  lgl$-           %22.1 = %22.0
  lgl$-           %22.2 = AsLogical                %22.1
  lgl$#-          %22.3 = Identical                %22.2, true
  void                    Branch                   %22.3 -> BB39 (if true) | BB23 (if false)
BB16   <- [19, 15]
  lgl$#-          %16.0 = Phi                      %15.3:BB15, %19.3:BB19   <val?_>
  lgl$#-          %16.1 = %16.0
  void                    Branch                   %16.1 -> BB18 (if true) | BB17 (if false)
BB53   <- [48]
  val             %53.0 = ChkMissing         e     %48.2
  val?            %53.1 = CallBuiltin        !v    nzchar(%48.2) e59.0
  val?            %53.2 = %53.1
  goto BB50
BB49   <- [48]
  val             %49.0 = ChkMissing         e     %48.2
  val?            %49.1 = CallBuiltin        !v    nzchar(%48.2) e59.0
  val?            %49.2 = %49.1
  goto BB50
BB46   <- [45, 51, 52]
  void                    Nop                !     
  goto BB47
BB39   <- [22]
  void                    Nop                !     
  lgl$-           %39.1 = %22.2
  goto BB24
BB23   <- [22]
  (cls|spec|blt)  %23.0 = LdFun              !v    identical, e59.0
  prom-           %23.1 = MkArg                    unboundValue, .newOrMultipleMethod[0x55de2ac73790]_p19, e59.0
  prom-           %23.2 = MkArg                    unboundValue, .newOrMultipleMethod[0x55de2ac73790]_p20, e59.0
  val?            %23.3 = Call               !v    %23.0(%23.1, %23.2) e59.0   <val?_>
  lgl$-           %23.4 = AsLogical          e     %23.3
  lgl$-           %23.5 = LOr                      %22.2, %23.4
  lgl$-           %23.6 = %23.5
  goto BB24
BB18   <- [16]
  (cls|spec|blt)  %18.0 = LdFun              !v    new.env, e59.0
  val?            %18.1 = Call               !v    %18.0() e59.0   <val?_>
  void                    StVar              lW    merge, %18.1, e59.0
  (cls|spec|blt)  %18.3 = LdFun              !v    assign, e59.0
  prom-           %18.4 = MkArg                    unboundValue, .newOrMultipleMethod[0x55de2ac73790]_p9, e59.0
  prom-           %18.5 = MkArg                    unboundValue, .newOrMultipleMethod[0x55de2ac73790]_p11, e59.0
  prom-           %18.6 = MkArg                    unboundValue, .newOrMultipleMethod[0x55de2ac73790]_p12, e59.0
  val?            %18.7 = NamedCall          !v    %18.3(%18.4, %18.5, envir=%18.6) e59.0
  (cls|spec|blt)  %18.8 = LdFun              !v    list2env, e59.0
  prom-           %18.9 = MkArg                    unboundValue, .newOrMultipleMethod[0x55de2ac73790]_p13, e59.0
  prom-           %18.10 = MkArg                    unboundValue, .newOrMultipleMethod[0x55de2ac73790]_p15, e59.0
  val?            %18.11 = Call               !v    %18.8(%18.9, %18.10) e59.0
  val?^ | miss    %18.12 = LdVar              eR    merge, e59.0
  void                    Visible            v     
  val?            %18.14 = Force!             !     %18.12, e59.0   <val?_>
  val?            %18.15 = %18.14
  goto BB12
BB17   <- [16]
  val?^ | miss    %17.0 = LdVar              eR    current, e59.0
  void                    Visible            v     
  val?            %17.2 = Force!             !     %17.0, e59.0   <val?_>
  val?            %17.3 = %17.2
  goto BB10
BB50   <- [49, 53]
  val?            %50.0 = Phi                      %49.2:BB49, %53.2:BB53   <val?_>
  val?            %50.1 = %50.0
  lgl$#-          %50.2 = CheckTrueFalse     we    %50.1
  void                    Branch                   %50.2 -> BB52 (if true) | BB51 (if false)
BB24   <- [39, 23]
  lgl$-           %24.0 = Phi                      %23.6:BB23, %39.1:BB39
  lgl$-           %24.1 = %24.0
  lgl$#-          %24.2 = CheckTrueFalse     e     %24.1
  void                    Branch                   %24.2 -> BB38 (if true) | BB25 (if false)
BB52   <- [50]
  (cls|spec|blt)  %52.0 = LdFun              !v    assign, e59.0
  prom-           %52.1 = MkArg                    unboundValue, .newOrMultipleMethod[0x55de2ac73790]_p35, e59.0
  prom-           %52.2 = MkArg                    unboundValue, .newOrMultipleMethod[0x55de2ac73790]_p36, e59.0
  prom-           %52.3 = MkArg                    unboundValue, .newOrMultipleMethod[0x55de2ac73790]_p37, e59.0
  val?            %52.4 = NamedCall          !v    %52.0(%52.1, %52.2, envir=%52.3) e59.0
  goto BB46
BB51   <- [50]
  void                    Nop                !     
  goto BB46
BB38   <- [24]
  val?^ | miss    %38.0 = LdVar              eR    obj, e59.0
  void                    Visible            v     
  val?            %38.2 = Force!             !     %38.0, e59.0   <val?_>
  val?            %38.3 = %38.2
  goto BB12
BB25   <- [24]
  (cls|spec|blt)  %25.0 = LdFun              !v    new.env, e59.0
  val?            %25.1 = Call               !v    %25.0() e59.0   <val?_>
  void                    StVar              lW    merge, %25.1, e59.0
  (cls|spec|blt)  %25.3 = LdFun              !v    .pkgMethodLabel, e59.0
  prom-           %25.4 = MkArg                    unboundValue, .newOrMultipleMethod[0x55de2ac73790]_p21, e59.0
  val?            %25.5 = Call               !v    %25.3(%25.4) e59.0   <val?_>
  void                    StVar              lW    var, %25.5, e59.0
  val?^ | miss    %25.7 = LdVar              eR    nzchar, e59.0
  lgl$#-          %25.8 = Identical                <blt nzchar>, %25.7   <@?>
  void                    Branch                   %25.8 -> BB37 (if true) | BB26 (if false)
BB37   <- [25]
  val             %37.0 = ChkMissing         e     %25.5
  val?            %37.1 = CallBuiltin        !v    nzchar(%25.5) e59.0
  val?            %37.2 = %37.1
  goto BB27
BB26   <- [25]
  val             %26.0 = ChkMissing         e     %25.5
  val?            %26.1 = CallBuiltin        !v    nzchar(%25.5) e59.0
  val?            %26.2 = %26.1
  goto BB27
BB27   <- [37, 26]
  val?            %27.0 = Phi                      %26.2:BB26, %37.2:BB37   <val?_>
  val?            %27.1 = %27.0
  lgl$#-          %27.2 = CheckTrueFalse     we    %27.1
  void                    Branch                   %27.2 -> BB36 (if true) | BB28 (if false)
BB36   <- [27]
  (cls|spec|blt)  %36.0 = LdFun              !v    assign, e59.0
  prom-           %36.1 = MkArg                    unboundValue, .newOrMultipleMethod[0x55de2ac73790]_p28, e59.0
  prom-           %36.2 = MkArg                    unboundValue, .newOrMultipleMethod[0x55de2ac73790]_p29, e59.0
  prom-           %36.3 = MkArg                    unboundValue, .newOrMultipleMethod[0x55de2ac73790]_p30, e59.0
  val?            %36.4 = NamedCall          !v    %36.0(%36.1, %36.2, envir=%36.3) e59.0
  goto BB29
BB28   <- [27]
  void                    Nop                !     
  goto BB29
BB29   <- [28, 36]
  (cls|spec|blt)  %29.0 = LdFun              !v    .pkgMethodLabel, e59.0
  prom-           %29.1 = MkArg                    unboundValue, .newOrMultipleMethod[0x55de2ac73790]_p23, e59.0
  val?            %29.2 = Call               !v    %29.0(%29.1) e59.0   <val?_>
  void                    StVar              lW    var, %29.2, e59.0
  val?^ | miss    %29.4 = LdVar              eR    nzchar, e59.0
  lgl$#-          %29.5 = Identical                <blt nzchar>, %29.4   <@?>
  void                    Branch                   %29.5 -> BB35 (if true) | BB30 (if false)
BB35   <- [29]
  val             %35.0 = ChkMissing         e     %29.2
  val?            %35.1 = CallBuiltin        !v    nzchar(%29.2) e59.0
  val?            %35.2 = %35.1
  goto BB31
BB30   <- [29]
  val             %30.0 = ChkMissing         e     %29.2
  val?            %30.1 = CallBuiltin        !v    nzchar(%29.2) e59.0
  val?            %30.2 = %30.1
  goto BB31
BB31   <- [35, 30]
  val?            %31.0 = Phi                      %30.2:BB30, %35.2:BB35   <val?_>
  val?            %31.1 = %31.0
  lgl$#-          %31.2 = CheckTrueFalse     we    %31.1
  void                    Branch                   %31.2 -> BB34 (if true) | BB32 (if false)
BB34   <- [31]
  (cls|spec|blt)  %34.0 = LdFun              !v    assign, e59.0
  prom-           %34.1 = MkArg                    unboundValue, .newOrMultipleMethod[0x55de2ac73790]_p25, e59.0
  prom-           %34.2 = MkArg                    unboundValue, .newOrMultipleMethod[0x55de2ac73790]_p26, e59.0
  prom-           %34.3 = MkArg                    unboundValue, .newOrMultipleMethod[0x55de2ac73790]_p27, e59.0
  val?            %34.4 = NamedCall          !v    %34.0(%34.1, %34.2, envir=%34.3) e59.0
  goto BB33
BB32   <- [31]
  void                    Nop                !     
  goto BB33
BB33   <- [32, 34]
  val?^ | miss    %33.0 = LdVar              eR    merge, e59.0
  void                    Visible            v     
  val?            %33.2 = Force!             !     %33.0, e59.0   <val?_>
  val?            %33.3 = %33.2
  goto BB12
Prom 0:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    what, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    table, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 3:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    current, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 4:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .newOrMultipleMethod[0x55de2ac73790]_p5, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .newOrMultipleMethod[0x55de2ac73790]_p6, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 5:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    current, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 6:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    defined, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 7:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    obj, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 9:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     .pkgMethodLabel, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .newOrMultipleMethod[0x55de2ac73790]_p10, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 10:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    current, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 11:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    current, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 12:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    merge, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 13:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     as.list, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .newOrMultipleMethod[0x55de2ac73790]_p14, e0.0
  val?            %0.3  = NamedCall          !     %0.1(%0.2, all.names=true) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 14:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    obj, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 15:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    merge, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 16:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .newOrMultipleMethod[0x55de2ac73790]_p17, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .newOrMultipleMethod[0x55de2ac73790]_p18, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 17:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    obj, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 18:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    defined, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 19:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    curPkg, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 20:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    objPkg, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 21:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    obj, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 23:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    current, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 25:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    var, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 26:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    current, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 27:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    merge, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 28:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    var, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 29:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    obj, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 30:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    merge, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 32:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    obj, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 33:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    obj, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 35:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    var, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 36:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    obj, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 37:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    current, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 38:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     as.list, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .newOrMultipleMethod[0x55de2ac73790]_p39, e0.0
  val?            %0.3  = NamedCall          !     %0.1(%0.2, all.names=true) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 39:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    obj, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 40:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    current, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3

│ .newOrMultipleMethod[0x55de2ac73790]                                         │
└──────────────────────────────────────────────────────────────────────────────┘
