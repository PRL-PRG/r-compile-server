
┌──────────────────────────────────────────────────────────────────────────────┐
│ .updateMethodsInTable[0x55de2f561bb0]                                        │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;NonRefl1,NonRefl2,!Obj1,!Obj2        │
│ Properties:                                                                  │
├────── Final PIR Version
.updateMethodsInTable[0x55de2f561bb0]
BB0
  val?^           %0.0  = LdArg                    2
  val?^           %0.1  = LdArg                    1
  val?^           %0.2  = LdArg                    0
  val?^ | miss    %0.3  = LdVar              eR    environment, <env 0x55de28b56378>
  lgl$#-          %0.4  = Identical                %0.3, function(fun=NULL) <(rir::DispatchTable*)0x55d|...>
  void                    Branch                   %0.4 -> BB74 (if true) | BB75 (if false)
BB74   <- [0]
  env             e74.0 = MkEnv              l     generic=%0.2, where=%0.1, attach=%0.0, parent=<env 0x55de28b56378>, context 1
  val?            %74.1 = Force!<lazy>       !v    %0.2, e74.0   <cls>
  prom-           %74.2 = MkArg                    %74.1, .updateMethodsInTable[0x55de2f561bb0]_p0 (!refl), 
  val?            %74.3 = StaticCall         !v    environment[0x55de30d015a0](%74.2) e74.0   <env->
  void                    StVar              lW    fenv, %74.3, e74.0
  val?^ | miss    %74.5 = LdVar              eR    identical, e74.0
  lgl$#-          %74.6 = Identical                %74.5, function(x, y, num.eq=TRUE, single.NA=TRUE, at|...>
  void                    Branch                   %74.6 -> BB76 (if true) | BB77 (if false)
BB75   <- [0]
  env             e75.0 = (MkEnv)            l     generic=%0.2, where=%0.1, attach=%0.0, parent=<env 0x55de28b56378>, context 1
  fs              %75.1 = FrameState         R     0x55de292e1ef0+0: [], env=e75.0
  void                    Deopt              !v    %75.1, CallTarget@0x55de2bdb4570[Call#0], %0.3
BB76   <- [74]
  prom-           %76.0 = MkArg                    unboundValue, .updateMethodsInTable[0x55de2f561bb0]_p1, e74.0
  ct              %76.1 = PushContext        lCL   %76.0, "reset", identical(attach, "reset"), function(x, y, num.eq=TRUE, single.NA=TRUE, at|...>, e74.0
  val?^           %76.2 = CastType                 up %76.0
  env             e76.3 = MkEnv              l     x=%76.2, y="reset", num.eq(miss)=true, single.NA(miss)=true, attrib.as.set(miss)=true, ignore.bytecode(miss)=true, ignore.environment(miss)=false, ignore.srcref(miss)=true, parent=R_BaseNamespace, context 1
  val?            %76.4 = Force!<lazy>       !vL   %76.2, e76.3   <val?>
  val?            %76.5 = CallBuiltin        !v    identical(%76.4, "reset", true, true, true, true, false, true) e76.3
  val?            %76.6 = PopContext         C     %76.5, %76.1   <lgl$->
  lgl$#-          %76.7 = IsType                   %76.6 isA lgl$-
  void                    Branch                   %76.7 -> BB78 (if true) | BB79 (if false)
BB77   <- [74]
  fs              %77.0 = FrameState         R     0x55de292e1ef0+46: [], env=e74.0
  void                    Deopt              !v    %77.0, CallTarget@0x55de2bdb4570[Call#1], %74.5   !
BB78   <- [76]
  lgl$-           %78.0 = CastType           d     dn %76.6
  void                    StVar              lW    reset, %78.0, e74.0
  (cls|spec|blt)  %78.2 = LdFun              !v    $, <0x55de2854ec10>, e74.0
  prom-           %78.3 = MkArg                    unboundValue, .updateMethodsInTable[0x55de2f561bb0]_p2, e74.0
  prom-           %78.4 = MkArg                    unboundValue, .updateMethodsInTable[0x55de2f561bb0]_p3, e74.0
  val?            %78.5 = Call               !v    %78.2(%78.3, %78.4) e74.0   <env->
  lgl$-           %78.6 = Is                       %78.5, NULL
  void                    StVar              lW    mtable, %78.5, e74.0
  lgl$#-          %78.8 = CheckTrueFalse     e     %78.6
  void                    Branch                   %78.8 -> BB72 (if true) | BB9 (if false)
BB79   <- [76]
  fs              %79.0 = FrameState         R     0x55de292e1ef0+83: [%76.6], env=e74.0
  void                    Deopt              !v    %79.0, Typecheck@0x55de2bdb4570[Type#3], %76.6   !
BB72   <- [78]
  (cls|spec|blt)  %72.0 = LdFun              !v    .setupMethodsTables, e74.0
  fs              %72.1 = FrameState         R     0x55de292e1ef0+171: [%72.0], env=e74.0
  void                    Deopt              !v    %72.1, DeadCall@0x55de2bdb4570[Call#3], %72.0   !
BB9   <- [78]
  val?^ | miss    %9.0  = LdVar              eR    reset, e74.0
  lgl$#-          %9.1  = IsType                   %9.0 isA lgl$-
  void                    Branch                   %9.1 -> BB80 (if true) | BB81 (if false)
BB80   <- [9]
  lgl$-           %80.0 = CastType           d     dn %9.0
  lgl$-           %80.1 = Not                d     %80.0, elided
  lgl$#-          %80.2 = CheckTrueFalse     e     %80.1
  void                    Branch                   %80.2 -> BB59 (if true) | BB10 (if false)
BB81   <- [9]
  void                    Nop                !     
  val?^ | miss    %81.1 = %9.0
  dr              %81.2 = Typecheck@0x55de2bdb4570[Type#10]
  goto BB7
BB59   <- [80]
  val?^ | miss    %59.0 = LdVar              eR    as.environment, e74.0
  lgl$#-          %59.1 = Identical                <blt as.environment>, %59.0   <true>
  void                    Branch                   %59.1 -> BB82 (if true) | BB83 (if false)
BB10   <- [80]
  void                    Nop                !     
  goto BB11
BB7   <- [81, 83]
  val?^ | miss    %7.0  = Phi                      %81.1:BB81, %83.1:BB83
  val?^ | miss    %7.1  = %7.0
  dr              %7.2  = Phi                      %81.2:BB81, %83.2:BB83
  dr              %7.3  = %7.2
  fs              %7.4  = FrameState         R     0x55de292e1ef0+150: [%78.5], env=e74.0
  void                    Deopt              !v    %7.4, %7.3, %7.1   !
BB82   <- [59]
  val?^ | miss    %82.0 = LdVar              eR    where, e74.0
  val?            %82.1 = Force!<lazy>       !v    %82.0, e74.0   <env->
  val?            %82.2 = CallBuiltin        !v    as.environment(%82.1) e74.0   <env->
  void                    StVar              lW    env, %82.2, e74.0
  val?^ | miss    %82.4 = LdVar              eR    .TableMetaName, e74.0
  lgl$#-          %82.5 = Identical                %82.4, function(name, package) <(rir::DispatchTable*)|...>
  void                    Branch                   %82.5 -> BB92 (if true) | BB93 (if false)
BB83   <- [59]
  void                    Nop                !     
  lgl$#-          %83.1 = %59.1
  dr              %83.2 = DeadBranchReached@0x55de2bdb4570[Test#0]
  goto BB7
BB11   <- [10, 70, 130]
  val?^ | miss    %11.0 = LdVar              eR    length, e74.0
  lgl$#-          %11.1 = Identical                <blt length>, %11.0   <true>
  void                    Branch                   %11.1 -> BB84 (if true) | BB85 (if false)
BB92   <- [82]
  prom-           %92.0 = MkArg                    unboundValue, .updateMethodsInTable[0x55de2f561bb0]_p38, e74.0
  prom-           %92.1 = MkArg                    unboundValue, .updateMethodsInTable[0x55de2f561bb0]_p41, e74.0
  ct              %92.2 = PushContext        lCL   %92.0, %92.1, .TableMetaName(@(generic, generic), @(generic,|...>, function(name, package) <(rir::DispatchTable*)|...>, e74.0
  val?^           %92.3 = CastType                 up %92.1
  val?^           %92.4 = CastType                 up %92.0
  val?^ | miss    %92.5 = LdVar              eR    methodsPackageMetaName, <env 0x55de28b56378>
  lgl$#-          %92.6 = Identical                %92.5, function(prefix, name, package="") <(rir::Disp|...>
  void                    Branch                   %92.6 -> BB94 (if true) | BB95 (if false)
BB93   <- [82]
  fs              %93.0 = FrameState         R     0x55de292e1ef0+389: [], env=e74.0
  void                    Deopt              !v    %93.0, CallTarget@0x55de2bdb4570[Call#6], %82.4   !
BB84   <- [11]
  (cls|spec|blt)  %84.0 = LdFun              !v    @, <0x55de2854ebd8>, e74.0
  prom-           %84.1 = MkArg                    unboundValue, .updateMethodsInTable[0x55de2f561bb0]_p4, e74.0
  prom-           %84.2 = MkArg                    unboundValue, .updateMethodsInTable[0x55de2f561bb0]_p5, e74.0
  val?            %84.3 = Call               !v    %84.0(%84.1, %84.2) e74.0   <vec->
  lgl$#-          %84.4 = IsType                   %84.3 isA val?-
  void                    Branch                   %84.4 -> BB86 (if true) | BB87 (if false)
BB85   <- [11]
  fs              %85.0 = FrameState         R     0x55de292e1ef0+582: [], env=e74.0
  void                    Deopt              !v    %85.0, DeadBranchReached@0x55de2bdb4570[Test#2], %11.1   !
BB94   <- [92]
  env             e94.0 = MkEnv              l     name=%92.4, package=%92.3, parent=<env 0x55de28b56378>, context 1
  prom-           %94.1 = MkArg                    unboundValue, .updateMethodsInTable[0x55de2f561bb0]_p54, e94.0
  ct              %94.2 = PushContext        lCL   "T", %94.1, methodsPackageMetaName("T", paste(name, packag|...>, function(prefix, name, package="") <(rir::Disp|...>, e94.0
  val?^           %94.3 = CastType                 up %94.1
  val?^ | miss    %94.4 = LdVar              eR    .Call, <env 0x55de28b56378>
  lgl$#-          %94.5 = Identical                <blt .Call>, %94.4   <true>
  void                    Branch                   %94.5 -> BB112 (if true) | BB113 (if false)
BB95   <- [92]
  fs              %95.0 = FrameState         R     0x55de292e1ef0+426: [], env=e74.0
  env             e95.1 = (MkEnv)            l     name=%92.4, package=%92.3, parent=<env 0x55de28b56378>, context 1
  fs              %95.2 = FrameState         R     0x55de2cadbb30+0: [], env=e95.1, next=%95.0
  void                    Deopt              !v    %95.2, CallTarget@0x55de2c7614c8[Call#0], %92.5   !
BB86   <- [84]
  val?-           %86.0 = CastType           d     dn %84.3   <vec->
  (int|real)$-    %86.1 = CallSafeBuiltin    wed   length(%86.0)    <int$->
  lgl$#-          %86.2 = IsType                   %86.1 isA int$-
  void                    Branch                   %86.2 -> BB88 (if true) | BB89 (if false)
BB87   <- [84]
  fs              %87.0 = FrameState         R     0x55de292e1ef0+679: [<blt length>, %84.3], env=e74.0
  void                    Deopt              !v    %87.0, Typecheck@0x55de2bdb4570[Type#34], %84.3   !
BB112   <- [94]
  val?^ | miss    %112.0 = LdVar              eR    C_R_methodsPackageMetaName, <env 0x55de28b56378>
  env             e112.1 = MkEnv              l     prefix="T", name=%94.3, package(miss)="", parent=<env 0x55de28b56378>, context 1
  val?            %112.2 = Force!<value>      !v    %112.0, e112.1   <vec>
  val?^ | miss    %112.3 = LdVar              eR    prefix, e112.1
  val?            %112.4 = Force!<value>      !v    %112.3, e112.1   <str$->
  val?^ | miss    %112.5 = LdVar              eR    name, e112.1
  val?            %112.6 = Force!<lazy>       !v    %112.5, e112.1   <str$->
  val?^ | miss    %112.7 = LdVar              eR    package, e112.1
  val?            %112.8 = Force!<lazy>       !v    %112.7, e112.1   <str$->
  val?            %112.9 = CallBuiltin        !v    .Call(%112.2, %112.4, %112.6, %112.8) e112.1   <str$->
  val?            %112.10 = PopContext         C     %112.9, %94.2   <str$->
  val?            %112.11 = PopContext         C     %112.10, %92.2   <str$->
  void                    StVar              lW    tname, %112.11, e74.0
  val?^ | miss    %112.13 = LdVar              eR    env, e74.0
  lgl$#-          %112.14 = IsType                   %112.13 isA val?~- | miss
  void                    Branch                   %112.14 -> BB114 (if true) | BB115 (if false)
BB113   <- [94]
  fs              %113.0 = FrameState         R     0x55de292e1ef0+426: [], env=e74.0
  fs              %113.1 = FrameState         R     0x55de2cadbb30+37: [], env=e94.0, next=%113.0
  env             e113.2 = (MkEnv)            l     prefix="T", name=%94.3, package(miss)="", parent=<env 0x55de28b56378>, context 1
  fs              %113.3 = FrameState         R     0x55de2bd88ed0+0: [], env=e113.2, next=%113.1
  void                    Deopt              !v    %113.3, DeadBranchReached@0x55de2b9c1e50[Test#0], %94.5   !
BB88   <- [86]
  int$-           %88.0 = CastType           d     dn %86.1
  lgl$#-          %88.1 = CheckTrueFalse     e     %88.0
  void                    Branch                   %88.1 -> BB42 (if true) | BB18 (if false)
BB89   <- [86]
  void                    Nop                !     
  (int|real)$-    %89.1 = %86.1
  dr              %89.2 = Typecheck@0x55de2bdb4570[Type#35]
  goto BB16
BB114   <- [112]
  val?~- | miss   %114.0 = CastType           d     dn %112.13
  val?-           %114.1 = Force!<value>            %114.0,    <env->
  lgl$#-          %114.2 = IsType                   %114.1 isA val+   <true>
  void                    Branch                   %114.2 -> BB124 (if true) | BB125 (if false)
BB115   <- [112]
  void                    Nop                !     
  val?^ | miss    %115.1 = %112.13
  dr              %115.2 = Typecheck@0x55de2bdb4570[Type#21]
  goto BB66
BB42   <- [88]
  val?^ | miss    %42.0 = LdVar              eR    as.list, e74.0
  lgl$#-          %42.1 = Identical                %42.0, function(x, ...) <(rir::DispatchTable*)0x55de2|...>
  void                    Branch                   %42.1 -> BB90 (if true) | BB91 (if false)
BB18   <- [88]
  void                    Nop                !     
  goto BB19
BB16   <- [89, 91]
  val?^ | miss    %16.0 = Phi                      %89.1:BB89, %91.1:BB91
  val?^ | miss    %16.1 = %16.0
  dr              %16.2 = Phi                      %89.2:BB89, %91.2:BB91
  dr              %16.3 = %16.2
  fs              %16.4 = FrameState         R     0x55de292e1ef0+701: [%86.1], env=e74.0
  void                    Deopt              !v    %16.4, %16.3, %16.1   !
BB124   <- [114]
  val             %124.0 = ChkMissing         e     %112.11
  lgl$#-          %124.1 = IsType                   %124.0 isA val?~- | miss
  void                    Branch                   %124.1 -> BB126 (if true) | BB127 (if false)
BB125   <- [114]
  void                    Nop                !     
  lgl$#-          %125.1 = %114.2
  dr              %125.2 = DeadBranchReached@0x55de2bdb4570[Test#1]
  goto BB66
BB66   <- [115, 125, 127]
  val?^ | miss    %66.0 = Phi                      %115.1:BB115, %125.1:BB125, %127.1:BB127
  val?^ | miss    %66.1 = %66.0
  dr              %66.2 = Phi                      %115.2:BB115, %125.2:BB125, %127.2:BB127
  dr              %66.3 = %66.2
  fs              %66.4 = FrameState         R     0x55de292e1ef0+440: [], env=e74.0
  void                    Deopt              !v    %66.4, %66.3, %66.1   !
BB90   <- [42]
  (cls|spec|blt)  %90.0 = LdFun              !v    @, <0x55de2854ebd8>, e74.0
  prom-           %90.1 = MkArg                    unboundValue, .updateMethodsInTable[0x55de2f561bb0]_p30, e74.0
  prom-           %90.2 = MkArg                    unboundValue, .updateMethodsInTable[0x55de2f561bb0]_p31, e74.0
  val?            %90.3 = Call               !v    %90.0(%90.1, %90.2) e74.0   <vec$->
  val?            %90.4 = StaticCall         !v    as.list[0x55de2cdccfb0](%90.3) { 0 } e74.0   <vec$->
  void                    StVar              lW    groups, %90.4, e74.0
  val?^ | miss    %90.6 = LdVar              eR    vector, e74.0
  lgl$#-          %90.7 = Identical                %90.6, function(mode="logical", length=0L) <(rir::Dis|...>
  void                    Branch                   %90.7 -> BB106 (if true) | BB107 (if false)
BB91   <- [42]
  void                    Nop                !     
  val?^ | miss    %91.1 = %42.0
  dr              %91.2 = CallTarget@0x55de2bdb4570[Call#13]
  goto BB16
BB19   <- [18, 144]
  val?^ | miss    %19.0 = LdVar              eR    is, e74.0
  lgl$#-          %19.1 = Identical                %19.0, function(object, class2) <(rir::DispatchTable*|...>
  void                    Branch                   %19.1 -> BB96 (if true) | BB97 (if false)
BB126   <- [124]
  val-            %126.0 = CastType           d     dn %124.0   <str$->
  val?            %126.1 = Extract2_1D        wed   %114.1, %126.0, elided   <env->
  lgl$-           %126.2 = Is                       %126.1, NULL
  void                    StVar              lW    tt, %126.1, e74.0
  lgl$-           %126.4 = Not                d     %126.2, elided
  lgl$#-          %126.5 = CheckTrueFalse     e     %126.4
  void                    Branch                   %126.5 -> BB71 (if true) | BB70 (if false)
BB127   <- [124]
  void                    Nop                !     
  val             %127.1 = %124.0
  dr              %127.2 = Typecheck@0x55de2bdb4570[Type#23]
  goto BB66
BB106   <- [90]
  val?^ | miss    %106.0 = LdVar              eR    length, e74.0
  lgl$#-          %106.1 = Identical                %106.0, <blt length>
  void                    Branch                   %106.1 -> BB108 (if true) | BB109 (if false)
BB107   <- [90]
  void                    Nop                !     
  val?^ | miss    %107.1 = %90.6
  dr              %107.2 = CallTarget@0x55de2bdb4570[Call#15]
  goto BB43
BB96   <- [19]
  prom-           %96.0 = MkArg                    unboundValue, .updateMethodsInTable[0x55de2f561bb0]_p6, e74.0
  val?            %96.1 = Call               !v    function(object, class2) <(rir::DispatchTable*|...>(%96.0, "groupGenericFunction") e74.0   <lgl$->
  lgl$#-          %96.2 = IsType                   %96.1 isA lgl$-
  void                    Branch                   %96.2 -> BB98 (if true) | BB99 (if false)
BB97   <- [19]
  fs              %97.0 = FrameState         R     0x55de292e1ef0+1177: [], env=e74.0
  void                    Deopt              !v    %97.0, CallTarget@0x55de2bdb4570[Call#21], %19.0   !
BB71   <- [126]
  val?^ | miss    %71.0 = LdVar              eR    .mergeMethodsTable, e74.0
  lgl$#-          %71.1 = Identical                %71.0, function(generic, table, newtable, add=TRUE) <|...>
  void                    Branch                   %71.1 -> BB130 (if true) | BB131 (if false)
BB70   <- [126]
  void                    Nop                !     
  goto BB11
BB108   <- [106]
  val             %108.0 = ChkMissing         e     %90.4
  lgl$#-          %108.1 = IsType                   %108.0 isA val?~- | miss
  void                    Branch                   %108.1 -> BB110 (if true) | BB111 (if false)
BB109   <- [106]
  void                    Nop                !     
  val?^ | miss    %109.1 = %106.0
  dr              %109.2 = CallTarget@0x55de2bdb4570[Call#16]
  goto BB43
BB43   <- [107, 109, 111]
  val?^ | miss    %43.0 = Phi                      %107.1:BB107, %109.1:BB109, %111.1:BB111
  val?^ | miss    %43.1 = %43.0
  dr              %43.2 = Phi                      %107.2:BB107, %109.2:BB109, %111.2:BB111
  dr              %43.3 = %43.2
  fs              %43.4 = FrameState         R     0x55de292e1ef0+763: [], env=e74.0
  void                    Deopt              !v    %43.4, %43.3, %43.1   !
BB98   <- [96]
  lgl$-           %98.0 = CastType           d     dn %96.1
  lgl$#-          %98.1 = CheckTrueFalse     e     %98.0
  void                    Branch                   %98.1 -> BB30 (if true) | BB24 (if false)
BB99   <- [96]
  void                    Nop                !     
  val?            %99.1 = %96.1
  dr              %99.2 = Typecheck@0x55de2bdb4570[Type#63]
  goto BB22
BB130   <- [71]
  prom-           %130.0 = MkArg                    unboundValue, .updateMethodsInTable[0x55de2f561bb0]_p44, e74.0
  prom-           %130.1 = MkArg                    unboundValue, .updateMethodsInTable[0x55de2f561bb0]_p45, e74.0
  prom-           %130.2 = MkArg                    unboundValue, .updateMethodsInTable[0x55de2f561bb0]_p46 (!refl), e74.0
  prom-           %130.3 = MkArg                    unboundValue, .updateMethodsInTable[0x55de2f561bb0]_p47, e74.0
  val?            %130.4 = Call               !v    function(generic, table, newtable, add=TRUE) <|...>(%130.0, %130.1, %130.2, %130.3) e74.0
  goto BB11
BB131   <- [71]
  fs              %131.0 = FrameState         R     0x55de292e1ef0+517: [%126.1], env=e74.0
  void                    Deopt              !v    %131.0, CallTarget@0x55de2bdb4570[Call#9], %71.0   !
BB110   <- [108]
  val-            %110.0 = CastType           d     dn %108.0   <vec$->
  (int|real)$-    %110.1 = CallSafeBuiltin    wed   length(%110.0)    <int$->
  lgl$#-          %110.2 = IsType                   %110.1 isA int$-
  void                    Branch                   %110.2 -> BB120 (if true) | BB121 (if false)
BB111   <- [108]
  void                    Nop                !     
  val             %111.1 = %108.0
  dr              %111.2 = Typecheck@0x55de2bdb4570[Type#40]
  goto BB43
BB30   <- [98]
  val?^ | miss    %30.0 = LdVar              eR    .checkGroupSigLength, e74.0
  lgl$#-          %30.1 = Identical                %30.0, function(gnames, generics=lapply(gnames, getGe|...>
  void                    Branch                   %30.1 -> BB100 (if true) | BB101 (if false)
BB24   <- [98]
  void                    Nop                !     
  goto BB25
BB22   <- [99, 101]
  val?^ | miss    %22.0 = Phi                      %99.1:BB99, %101.1:BB101
  val?^ | miss    %22.1 = %22.0
  dr              %22.2 = Phi                      %99.2:BB99, %101.2:BB101
  dr              %22.3 = %22.2
  fs              %22.4 = FrameState         R     0x55de292e1ef0+1214: [%96.1], env=e74.0
  void                    Deopt              !v    %22.4, %22.3, %22.1   !
BB120   <- [110]
  int$-           %120.0 = CastType           d     dn %110.1
  vec-            %120.1 = CallSafeBuiltin    wed   vector("list", %120.0)    <vec$->
  void                    StVar              lW    generics, %120.1, e74.0
  val?^ | miss    %120.3 = LdVar              eR    seq_along, e74.0
  lgl$#-          %120.4 = Identical                <blt seq_along>, %120.3   <true>
  void                    Branch                   %120.4 -> BB122 (if true) | BB123 (if false)
BB121   <- [110]
  fs              %121.0 = FrameState         R     0x55de292e1ef0+800: [], env=e74.0
  prom-           %121.1 = MkArg                    unboundValue, .updateMethodsInTable[0x55de2f561bb0]_p32, e74.0
  val?^           %121.2 = CastType                 up %121.1
  env             e121.3 = (MkEnv)            l     length=%121.2, mode="list", parent=R_BaseNamespace, context 0
  fs              %121.4 = FrameState         R     0x55de2a406800+23: ["list"], env=e121.3, next=%121.0
  fs              %121.5 = FrameState         R     0x55de28d2f470+32(pr): [%110.1], env=e74.0, next=%121.4
  void                    Deopt              !v    %121.5, Typecheck@0x55de2bdb4570[Type#41], %110.1   !
BB100   <- [30]
  prom-           %100.0 = MkArg                    unboundValue, .updateMethodsInTable[0x55de2f561bb0]_p9, e74.0
  prom-           %100.1 = MkArg                    unboundValue, .updateMethodsInTable[0x55de2f561bb0]_p13, e74.0
  val?            %100.2 = Call               !v    function(gnames, generics=lapply(gnames, getGe|...>(%100.0, %100.1) e74.0
  val?^ | miss    %100.3 = LdVar              eR    getGroupMembers, e74.0
  lgl$#-          %100.4 = Identical                %100.3, function(group, recursive=FALSE, character=TRU|...>
  void                    Branch                   %100.4 -> BB104 (if true) | BB105 (if false)
BB101   <- [30]
  void                    Nop                !     
  val?^ | miss    %101.1 = %30.0
  dr              %101.2 = CallTarget@0x55de2bdb4570[Call#22]
  goto BB22
BB25   <- [24, 41]
  val?^ | miss    %25.0 = LdVar              eR    .resetInheritedMethods, e74.0
  lgl$#-          %25.1 = Identical                %25.0, function(fenv, mtable) <(rir::DispatchTable*)0|...>
  void                    Branch                   %25.1 -> BB102 (if true) | BB103 (if false)
BB122   <- [120]
  val?            %122.0 = CallBuiltin        !v    seq_along(%110.0) e74.0   <int$->
  lgl$#-          %122.1 = IsType                   %122.0 isA int$-
  void                    Branch                   %122.1 -> BB128 (if true) | BB129 (if false)
BB123   <- [120]
  fs              %123.0 = FrameState         R     0x55de292e1ef0+814: [], env=e74.0
  void                    Deopt              !v    %123.0, DeadBranchReached@0x55de2bdb4570[Test#3], %120.4   !
BB104   <- [100]
  prom-           %104.0 = MkArg                    unboundValue, .updateMethodsInTable[0x55de2f561bb0]_p15, e74.0
  val?            %104.1 = StaticCall         !v    getGroupMembers[0x55de2c5f15a0](%104.0) e74.0   <str->
  val?+           %104.2 = ToForSeq           e     %104.1
  int$-           %104.3 = Length                   %104.2
  int$-           %104.4 = Inc                      0L
  lgl$-           %104.5 = Lt                 d     %104.3, %104.4, elided   <false>
  lgl$#-          %104.6 = Identical                %104.5, true
  void                    Branch                   %104.6 -> BB119 (if true) | BB118 (if false)
BB105   <- [100]
  fs              %105.0 = FrameState         R     0x55de292e1ef0+1267: [%100.2], env=e74.0
  void                    Deopt              !v    %105.0, CallTarget@0x55de2bdb4570[Call#26], %100.3   !
BB102   <- [25]
  prom-           %102.0 = MkArg                    unboundValue, .updateMethodsInTable[0x55de2f561bb0]_p7, e74.0
  prom-           %102.1 = MkArg                    unboundValue, .updateMethodsInTable[0x55de2f561bb0]_p8, e74.0
  val?            %102.2 = StaticCall         !v    .resetInheritedMethods[0x55de2cae6d20](%102.0, %102.1) e74.0
  val?^ | miss    %102.3 = LdVar              eR    mtable, e74.0
  lgl$#-          %102.4 = IsType                   %102.3 isA val?~- | miss
  void                    Branch                   %102.4 -> BB116 (if true) | BB117 (if false)
BB103   <- [25]
  fs              %103.0 = FrameState         R     0x55de292e1ef0+1470: [], env=e74.0
  void                    Deopt              !v    %103.0, CallTarget@0x55de2bdb4570[Call#31], %25.0   !
BB128   <- [122]
  int$-           %128.0 = CastType           d     dn %122.0
  int$-           %128.1 = Inc                      0L
  lgl$-           %128.2 = Lt                 d     1L, %128.1, elided   <false>
  lgl$#-          %128.3 = Identical                %128.2, true
  void                    Branch                   %128.3 -> BB135 (if true) | BB134 (if false)
BB129   <- [122]
  void                    Nop                !     
  val?            %129.1 = %122.0
  dr              %129.2 = Typecheck@0x55de2bdb4570[Type#45]
  goto BB49
BB119   <- [104]
  fs              %119.0 = FrameState         R     0x55de292e1ef0+1300: [%104.1], env=e74.0
  void                    Deopt              !v    %119.0, DeadBranchReached@0x55de2bdb4570[Test#7], %104.6   !
BB118   <- [104]
  val?            %118.0 = Extract2_1D        wed   %104.2, %104.4, elided
  void                    StVar              lW    g, %118.0, e74.0
  val?^ | miss    %118.2 = LdVar              eR    .updateMethodsInTable, e74.0
  lgl$#-          %118.3 = Identical                %118.2, function(generic, where, attach) <(rir::Dispat|...>
  void                    Branch                   %118.3 -> BB132 (if true) | BB133 (if false)
BB116   <- [102]
  val?~- | miss   %116.0 = CastType           d     dn %102.3
  void                    Visible            v     
  val?-           %116.2 = Force!<value>            %116.0,    <env->
  void                    Return             l     %116.2
BB117   <- [102]
  fs              %117.0 = FrameState         R     0x55de292e1ef0+1507: [%102.2], env=e74.0
  void                    Deopt              !v    %117.0, Typecheck@0x55de2bdb4570[Type#82], %102.3   !
BB135   <- [128]
  void                    Nop                !     
  lgl$#-          %135.1 = %128.3
  dr              %135.2 = DeadBranchReached@0x55de2bdb4570[Test#4]
  goto BB49
BB134   <- [128]
  int$-           %134.0 = Extract2_1D        wed   %128.0, %128.1, elided
  void                    StVar              lW    i, %134.0, e74.0
  val?^ | miss    %134.2 = LdVar              eR    getGeneric, e74.0
  lgl$#-          %134.3 = Identical                %134.2, function(f, mustFind=FALSE, where, package="")|...>
  void                    Branch                   %134.3 -> BB136 (if true) | BB137 (if false)
BB49   <- [129, 135]
  val?^ | miss    %49.0 = Phi                      %129.1:BB129, %135.1:BB135
  val?^ | miss    %49.1 = %49.0
  dr              %49.2 = Phi                      %129.2:BB129, %135.2:BB135
  dr              %49.3 = %49.2
  fs              %49.4 = FrameState         R     0x55de292e1ef0+905: [%122.0], env=e74.0
  void                    Deopt              !v    %49.4, %49.3, %49.1   !
BB132   <- [118]
  prom-           %132.0 = MkArg                    unboundValue, .updateMethodsInTable[0x55de2f561bb0]_p16, e74.0
  prom-           %132.1 = MkArg                    unboundValue, .updateMethodsInTable[0x55de2f561bb0]_p18, e74.0
  prom-           %132.2 = MkArg                    unboundValue, .updateMethodsInTable[0x55de2f561bb0]_p19, e74.0
  val?            %132.3 = StaticCall         !v    .updateMethodsInTable[0x55de29f3d510](%132.0, %132.1, %132.2) e74.0
  int$-           %132.4 = %104.4
  goto BB37
BB133   <- [118]
  fs              %133.0 = FrameState         R     0x55de292e1ef0+1345: [%104.2, %104.3, %104.4], env=e74.0
  void                    Deopt              !v    %133.0, CallTarget@0x55de2bdb4570[Call#27], %118.2   !
BB136   <- [134]
  prom-           %136.0 = MkArg                    unboundValue, .updateMethodsInTable[0x55de2f561bb0]_p34, e74.0
  val?            %136.1 = StaticCall         !v    getGeneric[0x55de2e8c84c0](%136.0) e74.0   <cls>
  val?^ | miss    %136.2 = LdVar              eR    generics !upd, e74.0
  lgl$#-          %136.3 = IsType                   %136.2 isA val?~- | miss
  void                    Branch                   %136.3 -> BB138 (if true) | BB139 (if false)
BB137   <- [134]
  fs              %137.0 = FrameState         R     0x55de292e1ef0+950: [%128.0, 1L, %128.1], env=e74.0
  void                    Deopt              !v    %137.0, CallTarget@0x55de2bdb4570[Call#18], %134.2   !
BB37   <- [132, 140]
  int$-           %37.0 = Phi                      %132.4:BB132, %140.4:BB140
  int$-           %37.1 = %37.0
  int$-           %37.2 = Inc                      %37.1
  lgl$-           %37.3 = Lt                 d     %104.3, %37.2, elided
  lgl$#-          %37.4 = Identical                %37.3, true
  void                    Branch                   %37.4 -> BB41 (if true) | BB38 (if false)
BB138   <- [136]
  val?~- | miss   %138.0 = CastType           d     dn %136.2
  val?-           %138.1 = Force!<value>            %138.0,    <vec$->
  val?^ | miss    %138.2 = LdVar              eR    i, e74.0
  lgl$#-          %138.3 = IsType                   %138.2 isA int$-
  void                    Branch                   %138.3 -> BB142 (if true) | BB143 (if false)
BB139   <- [136]
  void                    Nop                !     
  val?^ | miss    %139.1 = %136.2
  dr              %139.2 = Typecheck@0x55de2bdb4570[Type#51]
  goto BB53
BB41   <- [37]
  void                    Nop                !     
  goto BB25
BB38   <- [37]
  val?            %38.0 = Extract2_1D        wed   %104.2, %37.2, elided
  void                    StVar              lW    g, %38.0, e74.0
  val?^ | miss    %38.2 = LdVar              eR    .updateMethodsInTable, e74.0
  lgl$#-          %38.3 = Identical                %38.2, function(generic, where, attach) <(rir::Dispat|...>
  void                    Branch                   %38.3 -> BB140 (if true) | BB141 (if false)
BB142   <- [138]
  int$-           %142.0 = CastType           d     dn %138.2
  val?            %142.1 = Subassign2_1D      !v    %136.1, %138.1, %142.0, e74.0
  void                    StVar              lW    generics, %142.1, e74.0
  int$-           %142.3 = Inc                      %128.1
  lgl$-           %142.4 = Lt                 d     1L, %142.3, elided
  lgl$#-          %142.5 = Identical                %142.4, true
  void                    Branch                   %142.5 -> BB58 (if true) | BB57 (if false)
BB143   <- [138]
  void                    Nop                !     
  val?^ | miss    %143.1 = %138.2
  dr              %143.2 = Typecheck@0x55de2bdb4570[Type#52]
  goto BB53
BB53   <- [139, 143]
  val?^ | miss    %53.0 = Phi                      %139.1:BB139, %143.1:BB143
  val?^ | miss    %53.1 = %53.0
  dr              %53.2 = Phi                      %139.2:BB139, %143.2:BB143
  dr              %53.3 = %53.2
  fs              %53.4 = FrameState         R     0x55de292e1ef0+982: [%128.0, 1L, %128.1, %136.1], env=e74.0
  void                    Deopt              !v    %53.4, %53.3, %53.1   !
BB140   <- [38]
  prom-           %140.0 = MkArg                    unboundValue, .updateMethodsInTable[0x55de2f561bb0]_p20, e74.0
  prom-           %140.1 = MkArg                    unboundValue, .updateMethodsInTable[0x55de2f561bb0]_p22, e74.0
  prom-           %140.2 = MkArg                    unboundValue, .updateMethodsInTable[0x55de2f561bb0]_p23, e74.0
  val?            %140.3 = StaticCall         !v    .updateMethodsInTable[0x55de29f3d510](%140.0, %140.1, %140.2) e74.0
  int$-           %140.4 = %37.2
  goto BB37
BB141   <- [38]
  fs              %141.0 = FrameState         R     0x55de292e1ef0+1417: [%104.2, %104.3, %37.2], env=e74.0
  void                    Deopt              !v    %141.0, CallTarget@0x55de2bdb4570[Call#29], %38.2   !
BB58   <- [142]
  val?^ | miss    %58.0 = LdVar              eR    .checkGroupSigLength, e74.0
  lgl$#-          %58.1 = Identical                %58.0, function(gnames, generics=lapply(gnames, getGe|...>
  void                    Branch                   %58.1 -> BB144 (if true) | BB145 (if false)
BB57   <- [142]
  int$-           %57.0 = Extract2_1D        wed   %128.0, %142.3, elided
  void                    StVar              lW    i, %57.0, e74.0
  (cls|spec|blt)  %57.2 = LdFun              !v    getGeneric, e74.0
  fs              %57.3 = FrameState         R     0x55de292e1ef0+1059: [%128.0, 1L, %142.3, %57.2], env=e74.0
  void                    Deopt              !v    %57.3, DeadCall@0x55de2bdb4570[Call#19], %57.2   !
BB144   <- [58]
  prom-           %144.0 = MkArg                    unboundValue, .updateMethodsInTable[0x55de2f561bb0]_p36, e74.0
  prom-           %144.1 = MkArg                    unboundValue, .updateMethodsInTable[0x55de2f561bb0]_p37 (!refl), e74.0
  val?            %144.2 = Call               !v    function(gnames, generics=lapply(gnames, getGe|...>(%144.0, %144.1) e74.0
  goto BB19
BB145   <- [58]
  fs              %145.0 = FrameState         R     0x55de292e1ef0+1025: [%128.0, 1L, %128.1], env=e74.0
  void                    Deopt              !v    %145.0, CallTarget@0x55de2bdb4570[Call#20], %58.0   !
Prom 0:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    generic, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    attach, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <lgl$->
  void                    Return             l     %0.3
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fenv, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 3:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    .MTable, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 4:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    generic, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 5:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    group, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 6:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    generic, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 7:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fenv, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 8:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    mtable, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 9:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     list, <0x55de285635c0>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .updateMethodsInTable[0x55de2f561bb0]_p10, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <vec$->
  void                    Return             l     %0.3
Prom 10:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, <0x55de2854ebd8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .updateMethodsInTable[0x55de2f561bb0]_p11, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .updateMethodsInTable[0x55de2f561bb0]_p12, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <str$+>
  void                    Return             l     %0.4
Prom 11:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    generic, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 12:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    generic, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 13:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     list, <0x55de285635c0>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .updateMethodsInTable[0x55de2f561bb0]_p14, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <vec$->
  void                    Return             l     %0.3
Prom 14:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    generic, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 15:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    generic, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 16:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     getGeneric, <0x55de28d2f8d8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .updateMethodsInTable[0x55de2f561bb0]_p17, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <cls>
  void                    Return             l     %0.3
Prom 17:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    g, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 18:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 19:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    attach, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <lgl$->
  void                    Return             l     %0.3
Prom 20:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     getGeneric, <0x55de28d2f8d8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .updateMethodsInTable[0x55de2f561bb0]_p21, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <cls>
  void                    Return             l     %0.3
Prom 21:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    g, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 22:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 23:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    attach, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <lgl$->
  void                    Return             l     %0.3
Prom 30:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    generic, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 31:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    group, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 32:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     length, <0x55de2854fa90>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .updateMethodsInTable[0x55de2f561bb0]_p33, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <int$->
  void                    Return             l     %0.3
Prom 33:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    groups, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <vec$->
  void                    Return             l     %0.3
Prom 34:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    groups, e0.0
  val?            %0.2  = Force<value>       !v    %0.1, e0.0   <vec$->
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <true>
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    i, e0.0
  val?            %2.1  = Force<value>       !v    %2.0, e0.0   <int$->
  val?            %2.2  = %2.1
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, .updateMethodsInTable[0x55de2f561bb0]_p35, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.2:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract2_1D        !v    %0.2, %3.1, e0.0   <str$->
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 35:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    i, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 36:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    groups, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <vec$->
  void                    Return             l     %0.3
Prom 37:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    generics, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <vec$->
  void                    Return             l     %0.3
Prom 38:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, <0x55de2854ebd8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .updateMethodsInTable[0x55de2f561bb0]_p39, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .updateMethodsInTable[0x55de2f561bb0]_p40, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <str$+>
  void                    Return             l     %0.4
Prom 39:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    generic, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 40:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    generic, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 41:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, <0x55de2854ebd8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .updateMethodsInTable[0x55de2f561bb0]_p42, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .updateMethodsInTable[0x55de2f561bb0]_p43, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <str$->
  void                    Return             l     %0.4
Prom 42:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    generic, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 43:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    package, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 44:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    generic, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 45:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    mtable, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 46:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    tt, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 47:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    attach, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <lgl$->
  void                    Return             l     %0.3
Prom 54:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     paste, <0x55de28845da8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .updateMethodsInTable[0x55de2f561bb0]_p55, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .updateMethodsInTable[0x55de2f561bb0]_p56, e0.0
  val?            %0.4  = NamedCall          !     %0.1(%0.2, %0.3, sep=":") e0.0   <str$->
  void                    Return             l     %0.4
Prom 55:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    name, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str$+>
  void                    Return             l     %0.3
Prom 56:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    package, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3

│ .updateMethodsInTable[0x55de2f561bb0]                                        │
└──────────────────────────────────────────────────────────────────────────────┘
