
┌──────────────────────────────────────────────────────────────────────────────┐
│ mode[0x55de2968b770]                                                         │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;NonRefl0,!Obj0                       │
│ Properties:  Eager, ForceOrd: 0                                              │
├────── Final PIR Version
mode[0x55de2968b770]
BB0
  val?^           %0.0  = LdArg                    0
  env             e0.1  = MkEnv              l     x=%0.0, parent=R_BaseNamespace, context 1
  val+            %0.2  = Force!<lazy>       !vr   %0.0,    <(sym|code)->
  lgl$#-          %0.3  = CallSafeBuiltin    wed   is.expression(%0.2)    <lgl$->
  lgl$#-          %0.4  = IsType                   %0.2 isA val?-
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  void                    Visible            v     
  str$#-          %2.1  = "expression"
  goto BB3
BB4   <- [0]
  void                    Branch                   %0.4 -> BB23 (if true) | BB24 (if false)
BB3   <- [2, 8, 45]
  str$#-          %3.0  = Phi                      %8.1:BB8, %45.1:BB45, %2.1:BB2
  str$#-          %3.1  = %3.0
  void                    Return             l     %3.1
BB23   <- [4]
  val-            %23.0 = CastType           d     dn %0.2   <(sym|code)->
  lgl$#-          %23.1 = CallSafeBuiltin    wed   is.call(%23.0)    <lgl$->
  void                    Branch                   %23.1 -> BB9 (if true) | BB6 (if false)
BB24   <- [4]
  fs              %24.0 = FrameState         R     0x55de2e118020+183: [<blt is.call>, %0.2], env=e0.1
  void                    Deopt              !v    %24.0, Typecheck@0x55de34550038[Type#4], %0.2
BB9   <- [23]
  prom-           %9.0  = MkArg                    unboundValue, mode[0x55de2968b770]_p0, e0.1
  ct              %9.1  = PushContext        lCL   %9.0, deparse([[(x, 1L)), function(expr, width.cutoff=60L, backtick=%in%|...>, e0.1
  val?^           %9.2  = CastType                 up %9.0
  env             e9.3  = MkEnv              l     expr=%9.2, width.cutoff(miss)=60L, backtick(miss)=missingArg, control(miss)=missingArg, nlines(miss)=missingArg, parent=R_BaseNamespace, context 1
  prom-           %9.4  = MkArg                    unboundValue, mode[0x55de2968b770]_p2, e9.3
  val?^ | miss    %9.5  = CastType                 up %9.4
  void                    StArg              lW    backtick, %9.5, e9.3
  prom-           %9.7  = MkArg                    unboundValue, mode[0x55de2968b770]_p6, e9.3
  val?^ | miss    %9.8  = CastType                 up %9.7
  void                    StArg              lW    control, %9.8, e9.3
  prom-           %9.10 = MkArg                    unboundValue, mode[0x55de2968b770]_p7 (!refl), 
  val?^ | miss    %9.11 = CastType                 up %9.10
  void                    StArg              lW    nlines, %9.11, e9.3
  val?            %9.13 = Force!<lazy>       !vL   %9.2, e9.3   <sym->
  val?            %9.14 = Force!<lazy>       !v    %9.5, e9.3   <lgl$->
  val?^ | miss    %9.15 = LdVar              eR    .deparseOpts, e9.3
  lgl$#-          %9.16 = Identical                %9.15, function(control) <(rir::DispatchTable*)0x55de|...>
  void                    Branch                   %9.16 -> BB25 (if true) | BB26 (if false)
BB6   <- [23]
  lgl$#-          %6.0  = CallSafeBuiltin    wed   is.symbol(%0.2)    <lgl$->
  void                    Branch                   %6.0 -> BB8 (if true) | BB7 (if false)
BB25   <- [9]
  val?^ | miss    %25.0 = LdVar              eR    control, e9.3
  val?            %25.1 = Force!<lazy>       !v    %25.0, e9.3   <str->
  prom-           %25.2 = MkArg                    %25.1, mode[0x55de2968b770]_p8 (!refl), 
  val?            %25.3 = StaticCall         !v    .deparseOpts[0x55de2bb1acd0](%25.2) e9.3   <real$->
  lgl$#-          %25.4 = IsType                   %25.3 isA real$-
  void                    Branch                   %25.4 -> BB27 (if true) | BB28 (if false)
BB26   <- [9]
  fs              %26.0 = FrameState         R     0x55de2e118020+253: [], env=e0.1
  fs              %26.1 = FrameState         R     0x55de3465b090+37: [%9.13, 60L, %9.14], env=e9.3, next=%26.0
  void                    Deopt              !v    %26.1, CallTarget@0x55de289a54a0[Call#4], %9.15   !
BB8   <- [6]
  void                    Visible            v     
  str$#-          %8.1  = "name"
  goto BB3
BB7   <- [6]
  (cls|spec|blt)  %7.0  = LdFun              !v    typeof, R_BaseNamespace
  fs              %7.1  = FrameState         R     0x55de2e118020+665: [%7.0], env=e0.1
  void                    Deopt              !v    %7.1, DeadCall@0x55de34550038[Call#4], %7.0
BB27   <- [25]
  real$-          %27.0 = CastType           d     dn %25.3
  val?^ | miss    %27.1 = LdVar              eR    nlines, e9.3
  val?            %27.2 = Force!<lazy>       !v    %27.1, e9.3   <int$->
  val?            %27.3 = CallBuiltin        !v    deparse(%9.13, 60L, %9.14, %27.0, %27.2) e9.3
  val?            %27.4 = PopContext         C     %27.3, %9.1   <str$->
  lgl$#-          %27.5 = IsType                   %27.4 isA val+   <true>
  lgl$#-          %27.6 = IsType                   %27.4 isA val?-
  void                    Branch                   %27.5 -> BB29 (if true) | BB30 (if false)
BB28   <- [25]
  fs              %28.0 = FrameState         R     0x55de2e118020+253: [], env=e0.1
  fs              %28.1 = FrameState         R     0x55de3465b090+74: [%9.13, 60L, %9.14, %25.3], env=e9.3, next=%28.0
  void                    Deopt              !v    %28.1, Typecheck@0x55de289a54a0[Type#9], %25.3   !
BB29   <- [27]
  void                    Branch                   %27.6 -> BB31 (if true) | BB32 (if false)
BB30   <- [27]
  void                    Nop                !     
  lgl$#-          %30.1 = %27.5
  dr              %30.2 = DeadBranchReached@0x55de34550038[Test#3]
  goto BB14
BB31   <- [29]
  val?-           %31.0 = CastType           d     dn %27.4   <str$->
  val?            %31.1 = Extract1_1D        wed   %31.0, 1L, elided   <str$->
  lgl$-           %31.2 = Is                       %31.1, logical
  lgl$-           %31.3 = Is                       %31.1, integer
  lgl$-           %31.4 = Is                       %31.1, double
  lgl$-           %31.5 = Is                       %31.1, complex
  lgl$-           %31.6 = Is                       %31.1, character   <true>
  lgl$-           %31.7 = Is                       %31.1, raw
  lgl$-           %31.8 = Is                       %31.1, list
  lgl$-           %31.9 = Is                       %31.1, expression
  lgl$-           %31.10 = LOr                      %31.9, %31.8
  lgl$-           %31.11 = LOr                      %31.10, %31.7
  lgl$-           %31.12 = LOr                      %31.11, %31.6
  lgl$-           %31.13 = LOr                      %31.12, %31.5
  lgl$-           %31.14 = LOr                      %31.13, %31.4
  lgl$-           %31.15 = LOr                      %31.14, %31.3
  lgl$-           %31.16 = LOr                      %31.15, %31.2   <true>
  lgl$#-          %31.17 = Identical                %31.16, true
  int$-           %31.18 = Length                   %31.1
  lgl$-           %31.19 = Is                       %31.1, Factor   <false>
  lgl$#-          %31.20 = Identical                %31.19, false
  lgl$#-          %31.21 = Identical                %31.6, true
  lgl$#-          %31.22 = IsType                   %31.1 isA val?-
  void                    Branch                   %31.17 -> BB33 (if true) | BB34 (if false)
BB32   <- [29]
  void                    Nop                !     
  val?            %32.1 = %27.4
  dr              %32.2 = Typecheck@0x55de34550038[Type#8]
  goto BB14
BB14   <- [30, 32]
  val?^ | miss    %14.0 = Phi                      %30.1:BB30, %32.1:BB32
  val?^ | miss    %14.1 = %14.0
  dr              %14.2 = Phi                      %30.2:BB30, %32.2:BB32
  dr              %14.3 = %14.2
  fs              %14.4 = FrameState         R     0x55de2e118020+253: [%27.4], env=e0.1
  void                    Deopt              !v    %14.4, %14.3, %14.1   !
BB33   <- [31]
  lgl$-           %33.0 = Eq                 d     %31.18, 1L, elided   <true>
  lgl$#-          %33.1 = Identical                %33.0, true
  void                    Branch                   %33.1 -> BB35 (if true) | BB36 (if false)
BB34   <- [31]
  void                    Nop                !     
  lgl$#-          %34.1 = %31.17
  dr              %34.2 = DeadBranchReached@0x55de34550038[Test#4]
  goto BB16
BB35   <- [33]
  void                    Branch                   %31.20 -> BB37 (if true) | BB38 (if false)
BB36   <- [33]
  void                    Nop                !     
  lgl$#-          %36.1 = %33.1
  dr              %36.2 = DeadBranchReached@0x55de34550038[Test#5]
  goto BB16
BB16   <- [34, 36, 38, 40, 42]
  val?^ | miss    %16.0 = Phi                      %34.1:BB34, %36.1:BB36, %38.1:BB38, %40.1:BB40, %42.1:BB42
  val?^ | miss    %16.1 = %16.0
  dr              %16.2 = Phi                      %34.2:BB34, %36.2:BB36, %38.2:BB38, %40.2:BB40, %42.2:BB42
  dr              %16.3 = %16.2
  fs              %16.4 = FrameState         R     0x55de2e118020+296: [%31.1], env=e0.1
  void                    Deopt              !v    %16.4, %16.3, %16.1   !
BB37   <- [35]
  void                    Branch                   %31.21 -> BB39 (if true) | BB40 (if false)
BB38   <- [35]
  void                    Nop                !     
  lgl$#-          %38.1 = %31.20
  dr              %38.2 = DeadBranchReached@0x55de34550038[Test#6]
  goto BB16
BB39   <- [37]
  void                    Branch                   %31.22 -> BB41 (if true) | BB42 (if false)
BB40   <- [37]
  void                    Nop                !     
  lgl$#-          %40.1 = %31.21
  dr              %40.2 = DeadBranchReached@0x55de34550038[Test#7]
  goto BB16
BB41   <- [39]
  val?-           %41.0 = CastType           d     dn %31.1   <str$->
  lgl-            %41.1 = CallSafeBuiltin    wed   is.na(%41.0) 
  lgl$#-          %41.2 = CheckTrueFalse     we    %41.1   <false>
  void                    Branch                   %41.2 -> BB44 (if true) | BB43 (if false)
BB42   <- [39]
  void                    Nop                !     
  val?            %42.1 = %31.1
  dr              %42.2 = Typecheck@0x55de34550038[Type#9]
  goto BB16
BB44   <- [41]
  fs              %44.0 = FrameState         R     0x55de2e118020+488: [%41.0, %41.2], env=e0.1
  void                    Deopt              !v    %44.0, DeadBranchReached@0x55de34550038[Test#10], %41.2   !
BB43   <- [41]
  lgl-            %43.0 = Eq                 wed   %41.0, (, elided
  lgl$#-          %43.1 = CheckTrueFalse     we    %43.0   <false>
  void                    Branch                   %43.1 -> BB46 (if true) | BB45 (if false)
BB46   <- [43]
  fs              %46.0 = FrameState         R     0x55de2e118020+512: [%41.0, %43.1], env=e0.1
  void                    Deopt              !v    %46.0, DeadBranchReached@0x55de34550038[Test#11], %43.1   !
BB45   <- [43]
  void                    Visible            v     
  str$#-          %45.1 = "call"
  goto BB3
Prom 0:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    x, e0.0
  val?            %0.2  = Force<wrapped>     !v    %0.1, e0.0   <code->
  val?            %0.3  = Extract2_1D        !v    %0.2, 1L, e0.0   <sym->
  void                    Visible            v     
  void                    Return             l     %0.3
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     %in%, <0x55de28865c40>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, mode[0x55de2968b770]_p3, e0.0
  prom-           %0.3  = MkArg                    unboundValue, mode[0x55de2968b770]_p5, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <lgl$->
  void                    Return             l     %0.4
Prom 3:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     mode, <0x55de29633140>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, mode[0x55de2968b770]_p4, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <str$->
  void                    Return             l     %0.3
Prom 4:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    expr, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <sym->
  void                    Return             l     %0.3
Prom 5:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     c, <0x55de2854f940>, e0.0
  val?            %0.2  = Call               !     %0.1("call", "expression", "(", "function") e0.0   <str->
  void                    Return             l     %0.2
Prom 6:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     c, <0x55de2854f940>, e0.0
  val?            %0.2  = Call               !     %0.1("keepNA", "keepInteger", "niceNames", "showAttributes") e0.0   <str->
  void                    Return             l     %0.2
Prom 7:
BB0
  void                    Visible            v     
  void                    Return             l     -1L
Prom 8:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    control, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str->
  void                    Return             l     %0.3

│ mode[0x55de2968b770]                                                         │
└──────────────────────────────────────────────────────────────────────────────┘
