
┌──────────────────────────────────────────────────────────────────────────────┐
│ .make_numeric_version[0x55de28d7a610]                                        │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;NonRefl0,!Obj0 miss: 1               │
│ Properties:  ForceOrd: 0                                                     │
├────── Final PIR Version
.make_numeric_version[0x55de28d7a610]
BB0
  val?^           %0.0  = LdArg                    2
  val?^           %0.1  = LdArg                    1
  val?^           %0.2  = LdArg                    0
  env             e0.3  = MkEnv              l     x=%0.2, strict=%0.1, regexp=%0.0, classes(miss)=nil, parent=R_BaseNamespace, context 1
  val+            %0.4  = Force!<lazy>       !vr   %0.2,    <str$+>
  val+            %0.5  = CallSafeBuiltin    wed   names(%0.4)    <(nil|str)->
  void                    StVar              lW    nms, %0.5, e0.3
  val+            %0.7  = CallSafeBuiltin    wed   as.character(%0.4)    <str$->
  void                    StVar              lW    x, %0.7, e0.3
  int-            %0.9  = StaticCall         !vr   unknown--fromConstant[0x55de2fe84500]() from function(length=0L) <(rir::DispatchTable*)0x55|...>    <int->
  val+            %0.10 = CallSafeBuiltin    wed   list(%0.9)    <vec$->
  (int|real)$-    %0.11 = CallSafeBuiltin    wed   length(%0.7)    <int$->
  lgl$#-          %0.12 = IsType                   %0.11 isA int-
  lgl$#-          %0.13 = IsType                   %0.10 isA val?-
  void                    Branch                   %0.13 -> BB53 (if true) | BB54 (if false)
BB53   <- [0]
  val-            %53.0 = CastType           d     dn %0.10   <(int|vec)->
  void                    Branch                   %0.12 -> BB55 (if true) | BB56 (if false)
BB54   <- [0]
  void                    Nop                !     
  val+            %54.1 = %0.10
  dr              %54.2 = Typecheck@0x55de29ae4498[Type#0]
  goto BB52
BB55   <- [53]
  int$-           %55.0 = CastType           d     dn %0.11   <int$->
  val+            %55.1 = CallSafeBuiltin    wed   rep.int(%53.0, %55.0)    <vec$->
  void                    StVar              lW    y, %55.1, e0.3
  prom-           %55.3 = MkArg                    unboundValue, .make_numeric_version[0x55de28d7a610]_p5, e0.3
  dots-           %55.4 = DotsList           l     %55.3
  ct              %55.5 = PushContext        lCL   "^%s$", %55.4, sprintf("^%s$", regexp), function(fmt, ...) <(rir::DispatchTable*)0x55d|...>, e0.3
  val?^ | miss    %55.6 = CastType                 up %55.3
  env             e55.7 = MkEnv              l     fmt="^%s$", ...=%55.4, parent=R_BaseNamespace, context 1
  val?            %55.8 = Force!             !vL   %55.6, e55.7
  val?            %55.9 = CallBuiltin        !v    sprintf("^%s$", %55.8) e55.7
  val?            %55.10 = PopContext         C     %55.9, %55.5   <str$->
  void                    StVar              lW    valid_numeric_version_regexp, %55.10, e0.3
  val?^ | miss    %55.12 = LdVar              eR    length, e0.3
  lgl$#-          %55.13 = Identical                <blt length>, %55.12   <true>
  void                    Branch                   %55.13 -> BB57 (if true) | BB58 (if false)
BB56   <- [53]
  void                    Nop                !     
  (int|real)$-    %56.1 = %0.11
  dr              %56.2 = Typecheck@0x55de29ae4498[Type#1]
  goto BB52
BB52   <- [54, 56]
  val?^ | miss    %52.0 = Phi                      %54.1:BB54, %56.1:BB56
  val?^ | miss    %52.1 = %52.0
  dr              %52.2 = Phi                      %54.2:BB54, %56.2:BB56
  dr              %52.3 = %52.2
  prom-           %52.4 = MkArg                    %0.10, .make_numeric_version[0x55de28d7a610]_p1 (!refl), e0.3
  val?~           %52.5 = CastType                 up %52.4
  fs              %52.6 = FrameState         R     0x55de2a43f390+247: [], env=e0.3
  prom-           %52.7 = MkArg                    %0.11, .make_numeric_version[0x55de28d7a610]_p3 (!refl), e0.3
  val?~           %52.8 = CastType                 up %52.7
  env             e52.9 = (MkEnv)            l     times=%52.8, x=%52.5, parent=R_BaseNamespace, context 0
  fs              %52.10 = FrameState         R     0x55de2a43c520+23: [%0.10, %0.11], env=e52.9, next=%52.6
  void                    Deopt              !v    %52.10, %52.3, %52.1
BB57   <- [55]
  val?^ | miss    %57.0 = LdVar              eR    x, e0.3
  val?            %57.1 = Force!<value>      !v    %57.0, e0.3   <str$->
  lgl$#-          %57.2 = IsType                   %57.1 isA val?-
  void                    Branch                   %57.2 -> BB59 (if true) | BB60 (if false)
BB58   <- [55]
  fs              %58.0 = FrameState         R     0x55de2a43f390+312: [], env=e0.3
  void                    Deopt              !v    %58.0, DeadBranchReached@0x55de2a4017c0[Test#2], %55.13   !
BB59   <- [57]
  val?-           %59.0 = CastType           d     dn %57.1   <str$->
  (int|real)$-    %59.1 = CallSafeBuiltin    wed   length(%59.0)    <int$->
  lgl$#-          %59.2 = IsType                   %59.1 isA int$-
  void                    Branch                   %59.2 -> BB61 (if true) | BB62 (if false)
BB60   <- [57]
  fs              %60.0 = FrameState         R     0x55de2a43f390+381: [<blt length>, %57.1], env=e0.3
  void                    Deopt              !v    %60.0, Typecheck@0x55de2a4017c0[Type#14], %57.1   !
BB61   <- [59]
  int$-           %61.0 = CastType           d     dn %59.1
  lgl$#-          %61.1 = CheckTrueFalse     e     %61.0
  void                    Branch                   %61.1 -> BB15 (if true) | BB9 (if false)
BB62   <- [59]
  void                    Nop                !     
  (int|real)$-    %62.1 = %59.1
  dr              %62.2 = Typecheck@0x55de2a4017c0[Type#15]
  goto BB7
BB15   <- [61]
  val?^ | miss    %15.0 = LdVar              eR    grepl, e0.3
  lgl$#-          %15.1 = Identical                %15.0, function(pattern, x, ignore.case=FALSE, perl=F|...>
  void                    Branch                   %15.1 -> BB63 (if true) | BB64 (if false)
BB9   <- [61]
  void                    Nop                !     
  goto BB10
BB7   <- [62, 64]
  val?^ | miss    %7.0  = Phi                      %62.1:BB62, %64.1:BB64
  val?^ | miss    %7.1  = %7.0
  dr              %7.2  = Phi                      %62.2:BB62, %64.2:BB64
  dr              %7.3  = %7.2
  fs              %7.4  = FrameState         R     0x55de2a43f390+403: [%59.1], env=e0.3
  void                    Deopt              !v    %7.4, %7.3, %7.1   !
BB63   <- [15]
  prom-           %63.0 = MkArg                    unboundValue, .make_numeric_version[0x55de28d7a610]_p12, e0.3
  prom-           %63.1 = MkArg                    unboundValue, .make_numeric_version[0x55de28d7a610]_p13, e0.3
  ct              %63.2 = PushContext        lCL   %63.0, %63.1, grepl(valid_numeric_version_regexp, x), function(pattern, x, ignore.case=FALSE, perl=F|...>, e0.3
  val?^           %63.3 = CastType                 up %63.1
  val?^           %63.4 = CastType                 up %63.0
  env             e63.5 = MkEnv              l     pattern=%63.4, x=%63.3, ignore.case(miss)=false, perl(miss)=false, fixed(miss)=false, useBytes(miss)=false, parent=R_BaseNamespace, context 1
  prom-           %63.6 = MkArg                    unboundValue, .make_numeric_version[0x55de28d7a610]_p18, e63.5
  ct              %63.7 = PushContext        lCL   %63.6, is.factor(x), function(x) <(rir::DispatchTable*)0x55de2a4215|...>, e63.5
  val?^           %63.8 = CastType                 up %63.6
  env             e63.9 = MkEnv              l     x=%63.8, parent=R_BaseNamespace, context 1
  prom-           %63.10 = MkArg                    unboundValue, .make_numeric_version[0x55de28d7a610]_p19, e63.9
  ct              %63.11 = PushContext        lCL   %63.10, "factor", inherits(x, "factor"), function(x, what, which=FALSE) <(rir::Dispatch|...>, e63.9
  val?^           %63.12 = CastType                 up %63.10
  env             e63.13 = MkEnv              l     x=%63.12, what="factor", which(miss)=false, parent=R_BaseNamespace, context 1
  val?            %63.14 = Force!<lazy>       !vr   %63.12,    <val?>
  val?            %63.15 = CallBuiltin        !v    inherits(%63.14, "factor", false) e63.13
  val?            %63.16 = PopContext         C     %63.15, %63.11   <lgl$->
  lgl$#-          %63.17 = IsType                   %63.16 isA lgl$-
  void                    Branch                   %63.17 -> BB67 (if true) | BB68 (if false)
BB64   <- [15]
  void                    Nop                !     
  val?^ | miss    %64.1 = %15.0
  dr              %64.2 = CallTarget@0x55de2a4017c0[Call#8]
  goto BB7
BB10   <- [9, 93]
  val?^ | miss    %10.0 = LdVar              eR    nms, e0.3
  lgl$#-          %10.1 = IsType                   %10.0 isA val?~- | miss
  void                    Branch                   %10.1 -> BB65 (if true) | BB66 (if false)
BB67   <- [63]
  lgl$-           %67.0 = CastType           d     dn %63.16
  val?            %67.1 = PopContext         C     %67.0, %63.7   <lgl$->
  lgl$#-          %67.2 = IsType                   %67.1 isA lgl$-
  void                    Branch                   %67.2 -> BB71 (if true) | BB72 (if false)
BB68   <- [63]
  fs              %68.0 = FrameState         R     0x55de2a43f390+456: [], env=e0.3
  fs              %68.1 = FrameState         R     0x55de2a4219f0+32: [], env=e63.5, next=%68.0
  fs              %68.2 = FrameState         R     0x55de2a412ab0+37: [%63.16], env=e63.9, next=%68.1
  void                    Deopt              !v    %68.2, Typecheck@0x55de29ae3208[Type#1], %63.16   !
BB65   <- [10]
  val?~- | miss   %65.0 = CastType           d     dn %10.0
  val?-           %65.1 = Force!<value>            %65.0,    <(nil|str)->
  (cls|spec|blt)  %65.2 = LdFun              !v    names<-, <0x55de2854f438>, e0.3
  val?^ | miss    %65.3 = LdVar              eR    y, e0.3
  lgl$#-          %65.4 = IsType                   %65.3 isA val?~- | miss
  void                    Branch                   %65.4 -> BB69 (if true) | BB70 (if false)
BB66   <- [10]
  fs              %66.0 = FrameState         R     0x55de2a43f390+736: [], env=e0.3
  void                    Deopt              !v    %66.0, Typecheck@0x55de2a4017c0[Type#40], %10.0   !
BB71   <- [67]
  lgl$-           %71.0 = CastType           d     dn %67.1
  lgl$-           %71.1 = AsLogical                %71.0
  lgl$#-          %71.2 = Identical                %71.1, false
  void                    Branch                   %71.2 -> BB23 (if true) | BB20 (if false)
BB72   <- [67]
  void                    Nop                !     
  val?            %72.1 = %67.1
  dr              %72.2 = Typecheck@0x55de29bdb760[Type#1]
  goto BB18
BB69   <- [65]
  val?~- | miss   %69.0 = CastType           d     dn %65.3
  val?-           %69.1 = Force!<value>            %69.0,    <vec$->
  val?            %69.2 = NamedCall          !v    %65.2(%69.1, value=%65.1) e0.3
  void                    StVar              lW    y, %69.2, e0.3
  (cls|spec|blt)  %69.4 = LdFun              !v    <-, <0x55de28543da8>, e0.3
  prom-           %69.5 = MkArg                    unboundValue, .make_numeric_version[0x55de28d7a610]_p7, e0.3
  prom-           %69.6 = MkArg                    unboundValue, .make_numeric_version[0x55de28d7a610]_p9, e0.3
  val?            %69.7 = Call               !v    %69.4(%69.5, %69.6) e0.3
  val?^ | miss    %69.8 = LdVar              eR    y, e0.3
  void                    Visible            v     
  val?            %69.10 = Force!<value>      !     %69.8, e0.3   <vec$>
  void                    Return             l     %69.10
BB70   <- [65]
  fs              %70.0 = FrameState         R     0x55de2a43f390+750: [%65.1], env=e0.3
  void                    Deopt              !v    %70.0, Typecheck@0x55de2a4017c0[Type#41], %65.3   !
BB23   <- [71]
  lgl$#-          %23.0 = CheckTrueFalse     e     %71.1
  void                    Branch                   %23.0 -> BB51 (if true) | BB24 (if false)
BB20   <- [71]
  val?^ | miss    %20.0 = LdVar              eR    length, e63.5
  lgl$#-          %20.1 = Identical                <blt length>, %20.0   <@?>
  void                    Branch                   %20.1 -> BB22 (if true) | BB21 (if false)
BB18   <- [72, 74]
  val?^ | miss    %18.0 = Phi                      %72.1:BB72, %74.1:BB74
  val?^ | miss    %18.1 = %18.0
  dr              %18.2 = Phi                      %72.2:BB72, %74.2:BB74
  dr              %18.3 = %18.2
  fs              %18.4 = FrameState         R     0x55de2a43f390+456: [], env=e0.3
  fs              %18.5 = FrameState         R     0x55de2a4219f0+32: [%67.1], env=e63.5, next=%18.4
  void                    Deopt              !v    %18.5, %18.3, %18.1   !
BB51   <- [23]
  fs              %51.0 = FrameState         R     0x55de2a43f390+456: [], env=e0.3
  (cls|spec|blt)  %51.1 = LdFun              !v    grepl, e63.5
  fs              %51.2 = FrameState         R     0x55de2a4219f0+687: [%51.1], env=e63.5, next=%51.0
  void                    Deopt              !v    %51.2, DeadCall@0x55de29bdb760[Call#8], %51.1   !
BB24   <- [23]
  val?^ | miss    %24.0 = LdVar              eR    is.character, e63.5
  lgl$#-          %24.1 = Identical                <blt is.character>, %24.0   <true>
  void                    Branch                   %24.1 -> BB73 (if true) | BB74 (if false)
BB22   <- [20]
  fs              %22.0 = FrameState         R     0x55de2a43f390+456: [], env=e0.3
  (cls|spec|blt)  %22.1 = LdFun              !v    levels, e63.5
  fs              %22.2 = FrameState         R     0x55de2a4219f0+109: [%71.1, <blt length>, %22.1], env=e63.5, next=%22.0
  void                    Deopt              !v    %22.2, DeadCall@0x55de29bdb760[Call#3], %22.1   !
BB21   <- [20]
  fs              %21.0 = FrameState         R     0x55de2a43f390+456: [], env=e0.3
  (cls|spec|blt)  %21.1 = LdFun              !v    length, e63.5
  fs              %21.2 = FrameState         R     0x55de2a4219f0+72: [%71.1, %21.1], env=e63.5, next=%21.0
  void                    Deopt              !v    %21.2, DeadCall@0x55de29bdb760[Call#1], %21.1   !
BB73   <- [24]
  val?^ | miss    %73.0 = LdVar              eR    x, e63.5
  val?            %73.1 = Force!<wrapped>    !v    %73.0, e63.5   <str$+>
  lgl$#-          %73.2 = CallSafeBuiltin    wed   is.character(%73.1)    <lgl$->
  void                    Branch                   %73.2 -> BB50 (if true) | BB25 (if false)
BB74   <- [24]
  void                    Nop                !     
  lgl$#-          %74.1 = %24.1
  dr              %74.2 = DeadBranchReached@0x55de29bdb760[Test#2]
  goto BB18
BB50   <- [73]
  void                    Nop                !     
  goto BB30
BB25   <- [73]
  val?^ | miss    %25.0 = LdVar              eR    as.character, e63.5
  lgl$#-          %25.1 = Identical                <blt as.character>, %25.0   <@?>
  void                    Branch                   %25.1 -> BB27 (if true) | BB26 (if false)
BB30   <- [50, 79]
  val?^ | miss    %30.0 = LdVar              eR    as.character, e63.5
  lgl$#-          %30.1 = Identical                <blt as.character>, %30.0   <true>
  void                    Branch                   %30.1 -> BB75 (if true) | BB76 (if false)
BB27   <- [25]
  val?^ | miss    %27.0 = LdVar              eR    x, e63.5
  val?            %27.1 = Force!             !v    %27.0, e63.5   <val?_>
  lgl$#-          %27.2 = IsType                   %27.1 isA val?+
  void                    Branch                   %27.2 -> BB79 (if true) | BB80 (if false)
BB26   <- [25]
  fs              %26.0 = FrameState         R     0x55de2a43f390+456: [], env=e0.3
  (cls|spec|blt)  %26.1 = LdFun              !v    as.character, e63.5
  fs              %26.2 = FrameState         R     0x55de2a4219f0+409: [%26.1], env=e63.5, next=%26.0
  void                    Deopt              !v    %26.2, DeadCall@0x55de29bdb760[Call#6], %26.1   !
BB75   <- [30]
  val?^ | miss    %75.0 = LdVar              eR    pattern, e63.5
  val?            %75.1 = Force!<lazy>       !v    %75.0, e63.5   <str$->
  lgl$#-          %75.2 = IsType                   %75.1 isA val?-
  void                    Branch                   %75.2 -> BB77 (if true) | BB78 (if false)
BB76   <- [30]
  fs              %76.0 = FrameState         R     0x55de2a43f390+456: [], env=e0.3
  fs              %76.1 = FrameState         R     0x55de2a4219f0+486: [], env=e63.5, next=%76.0
  void                    Deopt              !v    %76.1, DeadBranchReached@0x55de29bdb760[Test#4], %30.1   !
BB79   <- [27]
  val?+           %79.0 = CastType           d     dn %27.1   <val?_>
  val+            %79.1 = CallSafeBuiltin    wed   as.character(%79.0)    <val?_>
  void                    StVar              lW    x, %79.1, e63.5
  goto BB30
BB80   <- [27]
  fs              %80.0 = FrameState         R     0x55de2a43f390+456: [], env=e0.3
  fs              %80.1 = FrameState         R     0x55de2a4219f0+450: [<blt as.character>, %27.1], env=e63.5, next=%80.0
  void                    Deopt              !v    %80.1, Typecheck@0x55de29bdb760[Type#15], %27.1   !
BB77   <- [75]
  val?-           %77.0 = CastType           d     dn %75.1   <str$->
  val+            %77.1 = CallSafeBuiltin    wed   as.character(%77.0)    <str$->
  val?^ | miss    %77.2 = LdVar              eR    x, e63.5
  val?            %77.3 = Force!<wrapped>    !v    %77.2, e63.5   <str$+>
  val?^ | miss    %77.4 = LdVar              eR    ignore.case, e63.5
  val?            %77.5 = Force!<lazy>       !v    %77.4, e63.5   <lgl$->
  val?^ | miss    %77.6 = LdVar              eR    perl, e63.5
  val?            %77.7 = Force!<lazy>       !v    %77.6, e63.5   <lgl$->
  val?^ | miss    %77.8 = LdVar              eR    fixed, e63.5
  val?            %77.9 = Force!<lazy>       !v    %77.8, e63.5   <lgl$->
  val?^ | miss    %77.10 = LdVar              eR    useBytes, e63.5
  val?            %77.11 = Force!<lazy>       !v    %77.10, e63.5   <lgl$->
  val?            %77.12 = CallBuiltin        !v    grepl(%77.1, %77.3, %77.5, false, %77.7, %77.9, %77.11, false) e63.5
  val?            %77.13 = PopContext         C     %77.12, %63.2   <lgl$->
  lgl$#-          %77.14 = IsType                   %77.13 isA lgl$-
  void                    Branch                   %77.14 -> BB81 (if true) | BB82 (if false)
BB78   <- [75]
  fs              %78.0 = FrameState         R     0x55de2a43f390+456: [], env=e0.3
  fs              %78.1 = FrameState         R     0x55de2a4219f0+555: [<blt as.character>, %75.1], env=e63.5, next=%78.0
  void                    Deopt              !v    %78.1, Typecheck@0x55de29bdb760[Type#18], %75.1   !
BB81   <- [77]
  lgl$-           %81.0 = CastType           d     dn %77.13
  void                    StVar              lW    ok, %81.0, e0.3
  val?^ | miss    %81.2 = LdVar              eR    all, e0.3
  lgl$#-          %81.3 = Identical                <blt all>, %81.2   <true>
  void                    Branch                   %81.3 -> BB83 (if true) | BB84 (if false)
BB82   <- [77]
  fs              %82.0 = FrameState         R     0x55de2a43f390+456: [%77.13], env=e0.3
  void                    Deopt              !v    %82.0, Typecheck@0x55de2a4017c0[Type#18], %77.13   !
BB83   <- [81]
  val?            %83.0 = CallBuiltin        !v    all(%81.0) e0.3   <lgl$->
  lgl$#-          %83.1 = IsType                   %83.0 isA lgl$-
  void                    Branch                   %83.1 -> BB85 (if true) | BB86 (if false)
BB84   <- [81]
  fs              %84.0 = FrameState         R     0x55de2a43f390+470: [], env=e0.3
  void                    Deopt              !v    %84.0, DeadBranchReached@0x55de2a4017c0[Test#3], %81.3   !
BB85   <- [83]
  lgl$-           %85.0 = CastType           d     dn %83.0
  lgl$-           %85.1 = Not                d     %85.0, elided
  lgl$-           %85.2 = AsLogical                %85.1
  lgl$#-          %85.3 = Identical                %85.2, false
  void                    Branch                   %85.3 -> BB49 (if true) | BB41 (if false)
BB86   <- [83]
  fs              %86.0 = FrameState         R     0x55de2a43f390+561: [%83.0], env=e0.3
  void                    Deopt              !v    %86.0, Typecheck@0x55de2a4017c0[Type#21], %83.0   !
BB49   <- [85]
  void                    Nop                !     
  lgl$-           %49.1 = %85.2
  goto BB42
BB41   <- [85]
  val?^ | miss    %41.0 = LdVar              eR    strict, e0.3
  val?            %41.1 = Force!             !v    %41.0, e0.3   <val?_>
  lgl$-           %41.2 = AsLogical          e     %41.1
  lgl$-           %41.3 = LAnd                     %85.2, %41.2
  lgl$-           %41.4 = %41.3
  goto BB42
BB42   <- [49, 41]
  lgl$-           %42.0 = Phi                      %41.4:BB41, %49.1:BB49
  lgl$-           %42.1 = %42.0
  lgl$#-          %42.2 = CheckTrueFalse     e     %42.1
  void                    Branch                   %42.2 -> BB48 (if true) | BB45 (if false)
BB48   <- [42]
  (cls|spec|blt)  %48.0 = LdFun              !v    stop, e0.3
  fs              %48.1 = FrameState         R     0x55de2a43f390+606: [%48.0], env=e0.3
  void                    Deopt              !v    %48.1, DeadCall@0x55de2a4017c0[Call#10], %48.0   !
BB45   <- [42]
  val?^ | miss    %45.0 = LdVar              eR    lapply, e0.3
  lgl$#-          %45.1 = Identical                %45.0, function(X, FUN, ...) <(rir::DispatchTable*)0x|...>
  void                    Branch                   %45.1 -> BB87 (if true) | BB88 (if false)
BB87   <- [45]
  prom-           %87.0 = MkArg                    unboundValue, .make_numeric_version[0x55de28d7a610]_p14, e0.3
  prom-           %87.1 = MkArg                    unboundValue, .make_numeric_version[0x55de28d7a610]_p17, e0.3
  val?            %87.2 = StaticCall         !v    lapply[0x55de2f994570](%87.0, %87.1) { 0 1 } e0.3   <vec$->
  lgl$#-          %87.3 = IsType                   %87.2 isA val?-
  val?^ | miss    %87.4 = LdVar              eR    y !upd, e0.3
  lgl$#-          %87.5 = IsType                   %87.4 isA val?~- | miss
  void                    Branch                   %87.5 -> BB89 (if true) | BB90 (if false)
BB88   <- [45]
  fs              %88.0 = FrameState         R     0x55de2a43f390+590: [%42.1], env=e0.3
  void                    Deopt              !v    %88.0, CallTarget@0x55de2a4017c0[Call#15], %45.0   !
BB89   <- [87]
  val?~- | miss   %89.0 = CastType           d     dn %87.4
  val?-           %89.1 = Force!<value>            %89.0,    <vec$->
  val?^ | miss    %89.2 = LdVar              eR    ok, e0.3
  lgl$#-          %89.3 = IsType                   %89.2 isA lgl$-
  void                    Branch                   %89.3 -> BB91 (if true) | BB92 (if false)
BB90   <- [87]
  void                    Nop                !     
  val?^ | miss    %90.1 = %87.4
  dr              %90.2 = Typecheck@0x55de2a4017c0[Type#38]
  goto BB46
BB91   <- [89]
  lgl$-           %91.0 = CastType           d     dn %89.2
  void                    Branch                   %87.3 -> BB93 (if true) | BB94 (if false)
BB92   <- [89]
  void                    Nop                !     
  val?^ | miss    %92.1 = %89.2
  dr              %92.2 = Typecheck@0x55de2a4017c0[Type#39]
  goto BB46
BB46   <- [90, 92, 94]
  val?^ | miss    %46.0 = Phi                      %90.1:BB90, %92.1:BB92, %94.1:BB94
  val?^ | miss    %46.1 = %46.0
  dr              %46.2 = Phi                      %90.2:BB90, %92.2:BB92, %94.2:BB94
  dr              %46.3 = %46.2
  fs              %46.4 = FrameState         R     0x55de2a43f390+693: [%87.2], env=e0.3
  void                    Deopt              !v    %46.4, %46.3, %46.1   !
BB93   <- [91]
  val?-           %93.0 = CastType           d     dn %87.2   <vec$->
  val?-           %93.1 = Subassign1_1D      wed   %93.0, %89.1, %91.0, elided
  void                    StVar              lW    y, %93.1, e0.3
  goto BB10
BB94   <- [91]
  void                    Nop                !     
  val?            %94.1 = %87.2
  dr              %94.2 = Typecheck@0x55de2a4017c0[Type#37]
  goto BB46
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     list, <0x55de285635c0>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .make_numeric_version[0x55de28d7a610]_p2, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <vec$->
  void                    Return             l     %0.3
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     integer, <0x55de289c3710>, e0.0
  val?            %0.2  = Call               !     %0.1() e0.0   <int->
  void                    Return             l     %0.2
Prom 3:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     length, <0x55de2854fa90>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .make_numeric_version[0x55de28d7a610]_p4, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <int$->
  void                    Return             l     %0.3
Prom 4:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    x, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 5:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    regexp, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 7:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     class, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .make_numeric_version[0x55de28d7a610]_p8, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 8:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    y, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 9:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     unique, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .make_numeric_version[0x55de28d7a610]_p10, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 10:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     c, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .make_numeric_version[0x55de28d7a610]_p11, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2, "numeric_version") e0.0   <val?_>
  void                    Return             l     %0.3
Prom 11:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    classes, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 12:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    valid_numeric_version_regexp, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 13:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    x, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 14:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     strsplit, <0x55de28899588>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .make_numeric_version[0x55de28d7a610]_p15, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2, "[.-]") e0.0   <vec$->
  void                    Return             l     %0.3
Prom 15:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    x, e0.0
  val?            %0.2  = Force<value>       !v    %0.1, e0.0   <str$->
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <true>
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    ok, e0.0
  val?            %2.1  = Force<value>       !v    %2.0, e0.0   <lgl$->
  val?            %2.2  = %2.1
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, .make_numeric_version[0x55de28d7a610]_p16, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.2:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract1_1D        !v    %0.2, %3.1, e0.0   <str$->
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 16:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    ok, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 17:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    as.integer, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <blt->
  void                    Return             l     %0.3
Prom 18:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    x, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str$+>
  void                    Return             l     %0.3
Prom 19:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    x, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <(int|str)+>
  void                    Return             l     %0.3

│ .make_numeric_version[0x55de28d7a610]                                        │
└──────────────────────────────────────────────────────────────────────────────┘
