
┌──────────────────────────────────────────────────────────────────────────────┐
│ .make_numeric_version[0x55de3453baa0]                                        │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch miss: 1                              │
│ Properties:  ForceOrd: 0                                                     │
├────── Final PIR Version
.make_numeric_version[0x55de3453baa0]
BB0
  val?^           %0.0  = LdArg                    2
  val?^           %0.1  = LdArg                    1
  val?^           %0.2  = LdArg                    0
  env             e0.3  = MkEnv              l     x=%0.2, strict=%0.1, regexp=%0.0, classes(miss)=nil, parent=R_BaseNamespace, context 1
  val?            %0.4  = Force!<lazy>       !v    %0.2, e0.3   <str$+>
  lgl$#-          %0.5  = IsType                   %0.4 isA val?+
  void                    Branch                   %0.5 -> BB65 (if true) | BB66 (if false)
BB65   <- [0]
  val?+           %65.0 = CastType           d     dn %0.4   <str$+>
  val+            %65.1 = CallSafeBuiltin    wed   names(%65.0)    <(nil|str)->
  void                    StVar              lW    nms, %65.1, e0.3
  val?^ | miss    %65.3 = LdVar              eR    as.character, e0.3
  lgl$#-          %65.4 = Identical                <blt as.character>, %65.3   <true>
  void                    Branch                   %65.4 -> BB67 (if true) | BB68 (if false)
BB66   <- [0]
  fs              %66.0 = FrameState         R     0x55de2a43f390+69: [<blt names>, %0.4], env=e0.3
  void                    Deopt              !v    %66.0, Typecheck@0x55de2a4017c0[Type#1], %0.4   !
BB67   <- [65]
  val?^ | miss    %67.0 = LdVar              eR    x, e0.3
  val?            %67.1 = Force!<wrapped>    !v    %67.0, e0.3   <str$+>
  lgl$#-          %67.2 = IsType                   %67.1 isA val?+
  void                    Branch                   %67.2 -> BB69 (if true) | BB70 (if false)
BB68   <- [65]
  fs              %68.0 = FrameState         R     0x55de2a43f390+105: [], env=e0.3
  void                    Deopt              !v    %68.0, DeadBranchReached@0x55de2a4017c0[Test#1], %65.4   !
BB69   <- [67]
  val?+           %69.0 = CastType           d     dn %67.1   <str$+>
  val+            %69.1 = CallSafeBuiltin    wed   as.character(%69.0)    <str$->
  void                    StVar              lW    x, %69.1, e0.3
  val?^ | miss    %69.3 = LdVar              eR    rep.int, e0.3
  lgl$#-          %69.4 = Identical                %69.3, function(x, times) <(rir::DispatchTable*)0x55d|...>
  void                    Branch                   %69.4 -> BB71 (if true) | BB72 (if false)
BB70   <- [67]
  fs              %70.0 = FrameState         R     0x55de2a43f390+174: [<blt as.character>, %67.1], env=e0.3
  void                    Deopt              !v    %70.0, Typecheck@0x55de2a4017c0[Type#4], %67.1   !
BB71   <- [69]
  val?^ | miss    %71.0 = LdVar              eR    list, e0.3
  lgl$#-          %71.1 = Identical                %71.0, <blt list>
  void                    Branch                   %71.1 -> BB73 (if true) | BB74 (if false)
BB72   <- [69]
  void                    Nop                !     
  val?^ | miss    %72.1 = %69.3
  dr              %72.2 = CallTarget@0x55de2a4017c0[Call#2]
  goto BB7
BB73   <- [71]
  val?^ | miss    %73.0 = LdVar              eR    integer, e0.3
  lgl$#-          %73.1 = Identical                %73.0, function(length=0L) <(rir::DispatchTable*)0x55|...>
  void                    Branch                   %73.1 -> BB75 (if true) | BB76 (if false)
BB74   <- [71]
  void                    Nop                !     
  val?^ | miss    %74.1 = %71.0
  dr              %74.2 = CallTarget@0x55de2a4017c0[Call#3]
  goto BB7
BB7   <- [72, 74, 76]
  val?^ | miss    %7.0  = Phi                      %72.1:BB72, %74.1:BB74, %76.1:BB76
  val?^ | miss    %7.1  = %7.0
  dr              %7.2  = Phi                      %72.2:BB72, %74.2:BB74, %76.2:BB76
  dr              %7.3  = %7.2
  fs              %7.4  = FrameState         R     0x55de2a43f390+210: [], env=e0.3
  void                    Deopt              !v    %7.4, %7.3, %7.1   !
BB75   <- [73]
  int-            %75.0 = StaticCall         !vr   unknown--fromConstant[0x55de2b1b0b70]() from function(length=0L) <(rir::DispatchTable*)0x55|...> e0.3   <int->
  val+            %75.1 = CallSafeBuiltin    wed   list(%75.0)    <vec$->
  val?^ | miss    %75.2 = LdVar              eR    length, e0.3
  lgl$#-          %75.3 = Identical                %75.2, <blt length>
  void                    Branch                   %75.3 -> BB77 (if true) | BB78 (if false)
BB76   <- [73]
  void                    Nop                !     
  val?^ | miss    %76.1 = %73.0
  dr              %76.2 = CallTarget@0x55de2a4017c0[Call#4]
  goto BB7
BB77   <- [75]
  val?^ | miss    %77.0 = LdVar              eR    x, e0.3
  val?            %77.1 = Force!<value>      !v    %77.0, e0.3   <str$->
  val?            %77.2 = CallBuiltin        !v    length(%77.1) e0.3   <int$->
  lgl$#-          %77.3 = IsType                   %77.2 isA int-
  lgl$#-          %77.4 = IsType                   %75.1 isA val?-
  void                    Branch                   %77.4 -> BB79 (if true) | BB80 (if false)
BB78   <- [75]
  fs              %78.0 = FrameState         R     0x55de2a43f390+247: [], env=e0.3
  prom-           %78.1 = MkArg                    unboundValue, .make_numeric_version[0x55de3453baa0]_p3, e0.3
  val?^           %78.2 = CastType                 up %78.1
  prom-           %78.3 = MkArg                    unboundValue, .make_numeric_version[0x55de3453baa0]_p1, e0.3
  val?^           %78.4 = CastType                 up %78.3
  env             e78.5 = (MkEnv)            l     x=%78.4, times=%78.2, parent=R_BaseNamespace, context 0
  fs              %78.6 = FrameState         R     0x55de2a43c520+9: [], env=e78.5, next=%78.0
  fs              %78.7 = FrameState         R     0x55de2a436500+32(pr): [%75.1], env=e0.3, next=%78.6
  void                    Deopt              !v    %78.7, CallTarget@0x55de2a4017c0[Call#5], %75.2   !
BB79   <- [77]
  val-            %79.0 = CastType           d     dn %75.1   <(int|vec)->
  void                    Branch                   %77.3 -> BB81 (if true) | BB82 (if false)
BB80   <- [77]
  void                    Nop                !     
  val+            %80.1 = %75.1
  dr              %80.2 = Typecheck@0x55de29ae4498[Type#0]
  goto BB11
BB81   <- [79]
  int-            %81.0 = CastType           d     dn %77.2   <int$->
  val+            %81.1 = CallSafeBuiltin    wed   rep.int(%79.0, %81.0)    <vec$->
  void                    StVar              lW    y, %81.1, e0.3
  val?^ | miss    %81.3 = LdVar              eR    sprintf, e0.3
  lgl$#-          %81.4 = Identical                %81.3, function(fmt, ...) <(rir::DispatchTable*)0x55d|...>
  void                    Branch                   %81.4 -> BB83 (if true) | BB84 (if false)
BB82   <- [79]
  void                    Nop                !     
  val?            %82.1 = %77.2
  dr              %82.2 = Typecheck@0x55de29ae4498[Type#1]
  goto BB11
BB11   <- [80, 82]
  val?^ | miss    %11.0 = Phi                      %80.1:BB80, %82.1:BB82
  val?^ | miss    %11.1 = %11.0
  dr              %11.2 = Phi                      %80.2:BB80, %82.2:BB82
  dr              %11.3 = %11.2
  prom-           %11.4 = MkArg                    %75.1, .make_numeric_version[0x55de3453baa0]_p1 (!refl), e0.3
  val?~           %11.5 = CastType                 up %11.4
  fs              %11.6 = FrameState         R     0x55de2a43f390+247: [], env=e0.3
  prom-           %11.7 = MkArg                    %77.2, .make_numeric_version[0x55de3453baa0]_p3 (!refl), e0.3
  val?~           %11.8 = CastType                 up %11.7
  env             e11.9 = (MkEnv)            l     times=%11.8, x=%11.5, parent=R_BaseNamespace, context 0
  fs              %11.10 = FrameState         R     0x55de2a43c520+23: [%75.1, %77.2], env=e11.9, next=%11.6
  void                    Deopt              !v    %11.10, %11.3, %11.1   !
BB83   <- [81]
  prom-           %83.0 = MkArg                    unboundValue, .make_numeric_version[0x55de3453baa0]_p5, e0.3
  dots-           %83.1 = DotsList           l     %83.0
  ct              %83.2 = PushContext        lCL   "^%s$", %83.1, sprintf("^%s$", regexp), function(fmt, ...) <(rir::DispatchTable*)0x55d|...>, e0.3
  val?^ | miss    %83.3 = CastType                 up %83.0
  env             e83.4 = MkEnv              l     fmt="^%s$", ...=%83.1, parent=R_BaseNamespace, context 1
  val?            %83.5 = Force!             !vL   %83.3, e83.4
  val?            %83.6 = CallBuiltin        !v    sprintf("^%s$", %83.5) e83.4
  val?            %83.7 = PopContext         C     %83.6, %83.2   <str$->
  void                    StVar              lW    valid_numeric_version_regexp, %83.7, e0.3
  val?^ | miss    %83.9 = LdVar              eR    length, e0.3
  lgl$#-          %83.10 = Identical                <blt length>, %83.9   <true>
  void                    Branch                   %83.10 -> BB85 (if true) | BB86 (if false)
BB84   <- [81]
  fs              %84.0 = FrameState         R     0x55de2a43f390+261: [], env=e0.3
  void                    Deopt              !v    %84.0, CallTarget@0x55de2a4017c0[Call#6], %81.3   !
BB85   <- [83]
  val?^ | miss    %85.0 = LdVar              eR    x, e0.3
  val?            %85.1 = Force!<value>      !v    %85.0, e0.3   <str$->
  lgl$#-          %85.2 = IsType                   %85.1 isA val?-
  void                    Branch                   %85.2 -> BB87 (if true) | BB88 (if false)
BB86   <- [83]
  fs              %86.0 = FrameState         R     0x55de2a43f390+312: [], env=e0.3
  void                    Deopt              !v    %86.0, DeadBranchReached@0x55de2a4017c0[Test#2], %83.10   !
BB87   <- [85]
  val?-           %87.0 = CastType           d     dn %85.1   <str$->
  (int|real)$-    %87.1 = CallSafeBuiltin    wed   length(%87.0)    <int$->
  lgl$#-          %87.2 = IsType                   %87.1 isA int$-
  void                    Branch                   %87.2 -> BB89 (if true) | BB90 (if false)
BB88   <- [85]
  fs              %88.0 = FrameState         R     0x55de2a43f390+381: [<blt length>, %85.1], env=e0.3
  void                    Deopt              !v    %88.0, Typecheck@0x55de2a4017c0[Type#14], %85.1   !
BB89   <- [87]
  int$-           %89.0 = CastType           d     dn %87.1
  lgl$#-          %89.1 = CheckTrueFalse     e     %89.0
  void                    Branch                   %89.1 -> BB27 (if true) | BB21 (if false)
BB90   <- [87]
  void                    Nop                !     
  (int|real)$-    %90.1 = %87.1
  dr              %90.2 = Typecheck@0x55de2a4017c0[Type#15]
  goto BB19
BB27   <- [89]
  val?^ | miss    %27.0 = LdVar              eR    grepl, e0.3
  lgl$#-          %27.1 = Identical                %27.0, function(pattern, x, ignore.case=FALSE, perl=F|...>
  void                    Branch                   %27.1 -> BB91 (if true) | BB92 (if false)
BB21   <- [89]
  void                    Nop                !     
  goto BB22
BB19   <- [90, 92]
  val?^ | miss    %19.0 = Phi                      %90.1:BB90, %92.1:BB92
  val?^ | miss    %19.1 = %19.0
  dr              %19.2 = Phi                      %90.2:BB90, %92.2:BB92
  dr              %19.3 = %19.2
  fs              %19.4 = FrameState         R     0x55de2a43f390+403: [%87.1], env=e0.3
  void                    Deopt              !v    %19.4, %19.3, %19.1   !
BB91   <- [27]
  prom-           %91.0 = MkArg                    unboundValue, .make_numeric_version[0x55de3453baa0]_p12, e0.3
  prom-           %91.1 = MkArg                    unboundValue, .make_numeric_version[0x55de3453baa0]_p13, e0.3
  ct              %91.2 = PushContext        lCL   %91.0, %91.1, grepl(valid_numeric_version_regexp, x), function(pattern, x, ignore.case=FALSE, perl=F|...>, e0.3
  val?^           %91.3 = CastType                 up %91.1
  val?^           %91.4 = CastType                 up %91.0
  env             e91.5 = MkEnv              l     pattern=%91.4, x=%91.3, ignore.case(miss)=false, perl(miss)=false, fixed(miss)=false, useBytes(miss)=false, parent=R_BaseNamespace, context 1
  prom-           %91.6 = MkArg                    unboundValue, .make_numeric_version[0x55de3453baa0]_p18, e91.5
  ct              %91.7 = PushContext        lCL   %91.6, is.factor(x), function(x) <(rir::DispatchTable*)0x55de2a4215|...>, e91.5
  val?^           %91.8 = CastType                 up %91.6
  env             e91.9 = MkEnv              l     x=%91.8, parent=R_BaseNamespace, context 1
  prom-           %91.10 = MkArg                    unboundValue, .make_numeric_version[0x55de3453baa0]_p19, e91.9
  ct              %91.11 = PushContext        lCL   %91.10, "factor", inherits(x, "factor"), function(x, what, which=FALSE) <(rir::Dispatch|...>, e91.9
  val?^           %91.12 = CastType                 up %91.10
  env             e91.13 = MkEnv              l     x=%91.12, what="factor", which(miss)=false, parent=R_BaseNamespace, context 1
  val?            %91.14 = Force!<lazy>       !vr   %91.12,    <val?>
  val?            %91.15 = CallBuiltin        !v    inherits(%91.14, "factor", false) e91.13
  val?            %91.16 = PopContext         C     %91.15, %91.11   <lgl$->
  lgl$#-          %91.17 = IsType                   %91.16 isA lgl$-
  void                    Branch                   %91.17 -> BB93 (if true) | BB94 (if false)
BB92   <- [27]
  void                    Nop                !     
  val?^ | miss    %92.1 = %27.0
  dr              %92.2 = CallTarget@0x55de2a4017c0[Call#8]
  goto BB19
BB22   <- [21, 121]
  val?^ | miss    %22.0 = LdVar              eR    nms, e0.3
  lgl$#-          %22.1 = IsType                   %22.0 isA val?~- | miss
  void                    Branch                   %22.1 -> BB101 (if true) | BB102 (if false)
BB93   <- [91]
  lgl$-           %93.0 = CastType           d     dn %91.16
  val?            %93.1 = PopContext         C     %93.0, %91.7   <lgl$->
  lgl$#-          %93.2 = IsType                   %93.1 isA lgl$-
  void                    Branch                   %93.2 -> BB95 (if true) | BB96 (if false)
BB94   <- [91]
  fs              %94.0 = FrameState         R     0x55de2a43f390+456: [], env=e0.3
  fs              %94.1 = FrameState         R     0x55de2a4219f0+32: [], env=e91.5, next=%94.0
  fs              %94.2 = FrameState         R     0x55de2a412ab0+37: [%91.16], env=e91.9, next=%94.1
  void                    Deopt              !v    %94.2, Typecheck@0x55de29ae3208[Type#1], %91.16   !
BB101   <- [22]
  val?~- | miss   %101.0 = CastType           d     dn %22.0
  val?-           %101.1 = Force!<value>            %101.0,    <(nil|str)->
  (cls|spec|blt)  %101.2 = LdFun              !v    names<-, <0x55de2854f438>, e0.3
  val?^ | miss    %101.3 = LdVar              eR    y, e0.3
  lgl$#-          %101.4 = IsType                   %101.3 isA val?~- | miss
  void                    Branch                   %101.4 -> BB103 (if true) | BB104 (if false)
BB102   <- [22]
  fs              %102.0 = FrameState         R     0x55de2a43f390+736: [], env=e0.3
  void                    Deopt              !v    %102.0, Typecheck@0x55de2a4017c0[Type#40], %22.0   !
BB95   <- [93]
  lgl$-           %95.0 = CastType           d     dn %93.1
  lgl$-           %95.1 = AsLogical                %95.0
  lgl$#-          %95.2 = Identical                %95.1, false
  void                    Branch                   %95.2 -> BB35 (if true) | BB32 (if false)
BB96   <- [93]
  void                    Nop                !     
  val?            %96.1 = %93.1
  dr              %96.2 = Typecheck@0x55de29bdb760[Type#1]
  goto BB30
BB103   <- [101]
  val?~- | miss   %103.0 = CastType           d     dn %101.3
  val?-           %103.1 = Force!<value>            %103.0,    <vec$->
  val?            %103.2 = NamedCall          !v    %101.2(%103.1, value=%101.1) e0.3
  void                    StVar              lW    y, %103.2, e0.3
  (cls|spec|blt)  %103.4 = LdFun              !v    <-, <0x55de28543da8>, e0.3
  prom-           %103.5 = MkArg                    unboundValue, .make_numeric_version[0x55de3453baa0]_p7, e0.3
  prom-           %103.6 = MkArg                    unboundValue, .make_numeric_version[0x55de3453baa0]_p9, e0.3
  val?            %103.7 = Call               !v    %103.4(%103.5, %103.6) e0.3
  val?^ | miss    %103.8 = LdVar              eR    y, e0.3
  void                    Visible            v     
  val?            %103.10 = Force!<value>      !     %103.8, e0.3   <vec$>
  void                    Return             l     %103.10
BB104   <- [101]
  fs              %104.0 = FrameState         R     0x55de2a43f390+750: [%101.1], env=e0.3
  void                    Deopt              !v    %104.0, Typecheck@0x55de2a4017c0[Type#41], %101.3   !
BB35   <- [95]
  lgl$#-          %35.0 = CheckTrueFalse     e     %95.1
  void                    Branch                   %35.0 -> BB63 (if true) | BB36 (if false)
BB32   <- [95]
  val?^ | miss    %32.0 = LdVar              eR    length, e91.5
  lgl$#-          %32.1 = Identical                <blt length>, %32.0   <@?>
  void                    Branch                   %32.1 -> BB34 (if true) | BB33 (if false)
BB30   <- [96, 98]
  val?^ | miss    %30.0 = Phi                      %96.1:BB96, %98.1:BB98
  val?^ | miss    %30.1 = %30.0
  dr              %30.2 = Phi                      %96.2:BB96, %98.2:BB98
  dr              %30.3 = %30.2
  fs              %30.4 = FrameState         R     0x55de2a43f390+456: [], env=e0.3
  fs              %30.5 = FrameState         R     0x55de2a4219f0+32: [%93.1], env=e91.5, next=%30.4
  void                    Deopt              !v    %30.5, %30.3, %30.1   !
BB63   <- [35]
  fs              %63.0 = FrameState         R     0x55de2a43f390+456: [], env=e0.3
  (cls|spec|blt)  %63.1 = LdFun              !v    grepl, e91.5
  fs              %63.2 = FrameState         R     0x55de2a4219f0+687: [%63.1], env=e91.5, next=%63.0
  void                    Deopt              !v    %63.2, DeadCall@0x55de29bdb760[Call#8], %63.1   !
BB36   <- [35]
  val?^ | miss    %36.0 = LdVar              eR    is.character, e91.5
  lgl$#-          %36.1 = Identical                <blt is.character>, %36.0   <true>
  void                    Branch                   %36.1 -> BB97 (if true) | BB98 (if false)
BB34   <- [32]
  fs              %34.0 = FrameState         R     0x55de2a43f390+456: [], env=e0.3
  (cls|spec|blt)  %34.1 = LdFun              !v    levels, e91.5
  fs              %34.2 = FrameState         R     0x55de2a4219f0+109: [%95.1, <blt length>, %34.1], env=e91.5, next=%34.0
  void                    Deopt              !v    %34.2, DeadCall@0x55de29bdb760[Call#3], %34.1   !
BB33   <- [32]
  fs              %33.0 = FrameState         R     0x55de2a43f390+456: [], env=e0.3
  (cls|spec|blt)  %33.1 = LdFun              !v    length, e91.5
  fs              %33.2 = FrameState         R     0x55de2a4219f0+72: [%95.1, %33.1], env=e91.5, next=%33.0
  void                    Deopt              !v    %33.2, DeadCall@0x55de29bdb760[Call#1], %33.1   !
BB97   <- [36]
  val?^ | miss    %97.0 = LdVar              eR    x, e91.5
  val?            %97.1 = Force!<wrapped>    !v    %97.0, e91.5   <str$+>
  lgl$#-          %97.2 = CallSafeBuiltin    wed   is.character(%97.1)    <lgl$->
  void                    Branch                   %97.2 -> BB62 (if true) | BB37 (if false)
BB98   <- [36]
  void                    Nop                !     
  lgl$#-          %98.1 = %36.1
  dr              %98.2 = DeadBranchReached@0x55de29bdb760[Test#2]
  goto BB30
BB62   <- [97]
  void                    Nop                !     
  goto BB42
BB37   <- [97]
  val?^ | miss    %37.0 = LdVar              eR    as.character, e91.5
  lgl$#-          %37.1 = Identical                <blt as.character>, %37.0   <@?>
  void                    Branch                   %37.1 -> BB39 (if true) | BB38 (if false)
BB42   <- [62, 105]
  val?^ | miss    %42.0 = LdVar              eR    as.character, e91.5
  lgl$#-          %42.1 = Identical                <blt as.character>, %42.0   <true>
  void                    Branch                   %42.1 -> BB99 (if true) | BB100 (if false)
BB39   <- [37]
  val?^ | miss    %39.0 = LdVar              eR    x, e91.5
  val?            %39.1 = Force!             !v    %39.0, e91.5   <val?_>
  lgl$#-          %39.2 = IsType                   %39.1 isA val?+
  void                    Branch                   %39.2 -> BB105 (if true) | BB106 (if false)
BB38   <- [37]
  fs              %38.0 = FrameState         R     0x55de2a43f390+456: [], env=e0.3
  (cls|spec|blt)  %38.1 = LdFun              !v    as.character, e91.5
  fs              %38.2 = FrameState         R     0x55de2a4219f0+409: [%38.1], env=e91.5, next=%38.0
  void                    Deopt              !v    %38.2, DeadCall@0x55de29bdb760[Call#6], %38.1   !
BB99   <- [42]
  val?^ | miss    %99.0 = LdVar              eR    pattern, e91.5
  val?            %99.1 = Force!<lazy>       !v    %99.0, e91.5   <str$->
  lgl$#-          %99.2 = IsType                   %99.1 isA val?-
  void                    Branch                   %99.2 -> BB107 (if true) | BB108 (if false)
BB100   <- [42]
  fs              %100.0 = FrameState         R     0x55de2a43f390+456: [], env=e0.3
  fs              %100.1 = FrameState         R     0x55de2a4219f0+486: [], env=e91.5, next=%100.0
  void                    Deopt              !v    %100.1, DeadBranchReached@0x55de29bdb760[Test#4], %42.1   !
BB105   <- [39]
  val?+           %105.0 = CastType           d     dn %39.1   <val?_>
  val+            %105.1 = CallSafeBuiltin    wed   as.character(%105.0)    <val?_>
  void                    StVar              lW    x, %105.1, e91.5
  goto BB42
BB106   <- [39]
  fs              %106.0 = FrameState         R     0x55de2a43f390+456: [], env=e0.3
  fs              %106.1 = FrameState         R     0x55de2a4219f0+450: [<blt as.character>, %39.1], env=e91.5, next=%106.0
  void                    Deopt              !v    %106.1, Typecheck@0x55de29bdb760[Type#15], %39.1   !
BB107   <- [99]
  val?-           %107.0 = CastType           d     dn %99.1   <str$->
  val+            %107.1 = CallSafeBuiltin    wed   as.character(%107.0)    <str$->
  val?^ | miss    %107.2 = LdVar              eR    x, e91.5
  val?            %107.3 = Force!<wrapped>    !v    %107.2, e91.5   <str$+>
  val?^ | miss    %107.4 = LdVar              eR    ignore.case, e91.5
  val?            %107.5 = Force!<lazy>       !v    %107.4, e91.5   <lgl$->
  val?^ | miss    %107.6 = LdVar              eR    perl, e91.5
  val?            %107.7 = Force!<lazy>       !v    %107.6, e91.5   <lgl$->
  val?^ | miss    %107.8 = LdVar              eR    fixed, e91.5
  val?            %107.9 = Force!<lazy>       !v    %107.8, e91.5   <lgl$->
  val?^ | miss    %107.10 = LdVar              eR    useBytes, e91.5
  val?            %107.11 = Force!<lazy>       !v    %107.10, e91.5   <lgl$->
  val?            %107.12 = CallBuiltin        !v    grepl(%107.1, %107.3, %107.5, false, %107.7, %107.9, %107.11, false) e91.5
  val?            %107.13 = PopContext         C     %107.12, %91.2   <lgl$->
  lgl$#-          %107.14 = IsType                   %107.13 isA lgl$-
  void                    Branch                   %107.14 -> BB109 (if true) | BB110 (if false)
BB108   <- [99]
  fs              %108.0 = FrameState         R     0x55de2a43f390+456: [], env=e0.3
  fs              %108.1 = FrameState         R     0x55de2a4219f0+555: [<blt as.character>, %99.1], env=e91.5, next=%108.0
  void                    Deopt              !v    %108.1, Typecheck@0x55de29bdb760[Type#18], %99.1   !
BB109   <- [107]
  lgl$-           %109.0 = CastType           d     dn %107.13
  void                    StVar              lW    ok, %109.0, e0.3
  val?^ | miss    %109.2 = LdVar              eR    all, e0.3
  lgl$#-          %109.3 = Identical                <blt all>, %109.2   <true>
  void                    Branch                   %109.3 -> BB111 (if true) | BB112 (if false)
BB110   <- [107]
  fs              %110.0 = FrameState         R     0x55de2a43f390+456: [%107.13], env=e0.3
  void                    Deopt              !v    %110.0, Typecheck@0x55de2a4017c0[Type#18], %107.13   !
BB111   <- [109]
  val?            %111.0 = CallBuiltin        !v    all(%109.0) e0.3   <lgl$->
  lgl$#-          %111.1 = IsType                   %111.0 isA lgl$-
  void                    Branch                   %111.1 -> BB113 (if true) | BB114 (if false)
BB112   <- [109]
  fs              %112.0 = FrameState         R     0x55de2a43f390+470: [], env=e0.3
  void                    Deopt              !v    %112.0, DeadBranchReached@0x55de2a4017c0[Test#3], %109.3   !
BB113   <- [111]
  lgl$-           %113.0 = CastType           d     dn %111.0
  lgl$-           %113.1 = Not                d     %113.0, elided
  lgl$-           %113.2 = AsLogical                %113.1
  lgl$#-          %113.3 = Identical                %113.2, false
  void                    Branch                   %113.3 -> BB61 (if true) | BB53 (if false)
BB114   <- [111]
  fs              %114.0 = FrameState         R     0x55de2a43f390+561: [%111.0], env=e0.3
  void                    Deopt              !v    %114.0, Typecheck@0x55de2a4017c0[Type#21], %111.0   !
BB61   <- [113]
  void                    Nop                !     
  lgl$-           %61.1 = %113.2
  goto BB54
BB53   <- [113]
  val?^ | miss    %53.0 = LdVar              eR    strict, e0.3
  val?            %53.1 = Force!             !v    %53.0, e0.3   <val?_>
  lgl$-           %53.2 = AsLogical          e     %53.1
  lgl$-           %53.3 = LAnd                     %113.2, %53.2
  lgl$-           %53.4 = %53.3
  goto BB54
BB54   <- [61, 53]
  lgl$-           %54.0 = Phi                      %53.4:BB53, %61.1:BB61
  lgl$-           %54.1 = %54.0
  lgl$#-          %54.2 = CheckTrueFalse     e     %54.1
  void                    Branch                   %54.2 -> BB60 (if true) | BB57 (if false)
BB60   <- [54]
  (cls|spec|blt)  %60.0 = LdFun              !v    stop, e0.3
  fs              %60.1 = FrameState         R     0x55de2a43f390+606: [%60.0], env=e0.3
  void                    Deopt              !v    %60.1, DeadCall@0x55de2a4017c0[Call#10], %60.0   !
BB57   <- [54]
  val?^ | miss    %57.0 = LdVar              eR    lapply, e0.3
  lgl$#-          %57.1 = Identical                %57.0, function(X, FUN, ...) <(rir::DispatchTable*)0x|...>
  void                    Branch                   %57.1 -> BB115 (if true) | BB116 (if false)
BB115   <- [57]
  prom-           %115.0 = MkArg                    unboundValue, .make_numeric_version[0x55de3453baa0]_p14, e0.3
  prom-           %115.1 = MkArg                    unboundValue, .make_numeric_version[0x55de3453baa0]_p17, e0.3
  val?            %115.2 = StaticCall         !v    lapply[0x55de2b416d80](%115.0, %115.1) { 0 1 } e0.3   <vec$->
  lgl$#-          %115.3 = IsType                   %115.2 isA val?-
  val?^ | miss    %115.4 = LdVar              eR    y !upd, e0.3
  lgl$#-          %115.5 = IsType                   %115.4 isA val?~- | miss
  void                    Branch                   %115.5 -> BB117 (if true) | BB118 (if false)
BB116   <- [57]
  fs              %116.0 = FrameState         R     0x55de2a43f390+590: [%54.1], env=e0.3
  void                    Deopt              !v    %116.0, CallTarget@0x55de2a4017c0[Call#15], %57.0   !
BB117   <- [115]
  val?~- | miss   %117.0 = CastType           d     dn %115.4
  val?-           %117.1 = Force!<value>            %117.0,    <vec$->
  val?^ | miss    %117.2 = LdVar              eR    ok, e0.3
  lgl$#-          %117.3 = IsType                   %117.2 isA lgl$-
  void                    Branch                   %117.3 -> BB119 (if true) | BB120 (if false)
BB118   <- [115]
  void                    Nop                !     
  val?^ | miss    %118.1 = %115.4
  dr              %118.2 = Typecheck@0x55de2a4017c0[Type#38]
  goto BB58
BB119   <- [117]
  lgl$-           %119.0 = CastType           d     dn %117.2
  void                    Branch                   %115.3 -> BB121 (if true) | BB122 (if false)
BB120   <- [117]
  void                    Nop                !     
  val?^ | miss    %120.1 = %117.2
  dr              %120.2 = Typecheck@0x55de2a4017c0[Type#39]
  goto BB58
BB58   <- [118, 120, 122]
  val?^ | miss    %58.0 = Phi                      %118.1:BB118, %120.1:BB120, %122.1:BB122
  val?^ | miss    %58.1 = %58.0
  dr              %58.2 = Phi                      %118.2:BB118, %120.2:BB120, %122.2:BB122
  dr              %58.3 = %58.2
  fs              %58.4 = FrameState         R     0x55de2a43f390+693: [%115.2], env=e0.3
  void                    Deopt              !v    %58.4, %58.3, %58.1   !
BB121   <- [119]
  val?-           %121.0 = CastType           d     dn %115.2   <vec$->
  val?-           %121.1 = Subassign1_1D      wed   %121.0, %117.1, %119.0, elided
  void                    StVar              lW    y, %121.1, e0.3
  goto BB22
BB122   <- [119]
  void                    Nop                !     
  val?            %122.1 = %115.2
  dr              %122.2 = Typecheck@0x55de2a4017c0[Type#37]
  goto BB58
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     list, <0x55de285635c0>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .make_numeric_version[0x55de3453baa0]_p2, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <vec$->
  void                    Return             l     %0.3
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     integer, <0x55de289c3710>, e0.0
  val?            %0.2  = Call               !     %0.1() e0.0   <int->
  void                    Return             l     %0.2
Prom 3:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     length, <0x55de2854fa90>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .make_numeric_version[0x55de3453baa0]_p4, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <int$->
  void                    Return             l     %0.3
Prom 4:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    x, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 5:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    regexp, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 7:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     class, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .make_numeric_version[0x55de3453baa0]_p8, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 8:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    y, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 9:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     unique, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .make_numeric_version[0x55de3453baa0]_p10, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 10:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     c, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .make_numeric_version[0x55de3453baa0]_p11, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2, "numeric_version") e0.0   <val?_>
  void                    Return             l     %0.3
Prom 11:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    classes, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 12:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    valid_numeric_version_regexp, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 13:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    x, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 14:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     strsplit, <0x55de28899588>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .make_numeric_version[0x55de3453baa0]_p15, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2, "[.-]") e0.0   <vec$->
  void                    Return             l     %0.3
Prom 15:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    x, e0.0
  val?            %0.2  = Force<value>       !v    %0.1, e0.0   <str$->
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <true>
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    ok, e0.0
  val?            %2.1  = Force<value>       !v    %2.0, e0.0   <lgl$->
  val?            %2.2  = %2.1
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, .make_numeric_version[0x55de3453baa0]_p16, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.2:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract1_1D        !v    %0.2, %3.1, e0.0   <str$->
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 16:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    ok, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 17:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    as.integer, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <blt->
  void                    Return             l     %0.3
Prom 18:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    x, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <str$+>
  void                    Return             l     %0.3
Prom 19:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    x, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <(int|str)+>
  void                    Return             l     %0.3

│ .make_numeric_version[0x55de3453baa0]                                        │
└──────────────────────────────────────────────────────────────────────────────┘
