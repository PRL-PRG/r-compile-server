
┌──────────────────────────────────────────────────────────────────────────────┐
│ .findInheritedMethods[0x55de34f8f4b0]                                        │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch miss: 7                              │
│ Properties:                                                                  │
├────── Final PIR Version
.findInheritedMethods[0x55de34f8f4b0]
BB0
  val?^           %0.0  = LdArg                    2
  val?^           %0.1  = LdArg                    1
  val?^           %0.2  = LdArg                    0
  env             e0.3  = MkEnv              l     classes=%0.2, fdef=%0.1, mtable=%0.0, table(miss)=missingArg, excluded(miss)=missingArg, useInherited(miss)=missingArg, simpleOnly(miss)=missingArg, verbose(miss)=missingArg, doCache(miss)=missingArg, where(miss)=missingArg, parent=<env 0x55de28b56378>, context 1
  prom-           %0.4  = MkArg                    unboundValue, .findInheritedMethods[0x55de34f8f4b0]_p0, e0.3
  val?^ | miss    %0.5  = CastType                 up %0.4
  void                    StArg              lW    table, %0.5, e0.3
  void                    StArg              lW    excluded, nil, e0.3
  prom-           %0.8  = MkArg                    unboundValue, .findInheritedMethods[0x55de34f8f4b0]_p4, e0.3
  val?^ | miss    %0.9  = CastType                 up %0.8
  void                    StArg              lW    simpleOnly, %0.9, e0.3
  void                    StArg              lW    verbose, false, e0.3
  prom-           %0.12 = MkArg                    unboundValue, .findInheritedMethods[0x55de34f8f4b0]_p7, e0.3
  val?^ | miss    %0.13 = CastType                 up %0.12
  void                    StArg              lW    doCache, %0.13, e0.3
  prom-           %0.15 = MkArg                    unboundValue, .findInheritedMethods[0x55de34f8f4b0]_p9, e0.3
  val?^ | miss    %0.16 = CastType                 up %0.15
  void                    StArg              lW    where, %0.16, e0.3
  cls             %0.18 = MkCls                    .findInheritedMethods>plist@677, e0.3
  val?^ | miss    %0.19 = LdVar              eR    .allowPrimitiveMethods, <env 0x55de28b56378>
  lgl$#-          %0.20 = Identical                %0.19, function(onOff) <(rir::DispatchTable*)0x55de2c|...>
  void                    Branch                   %0.20 -> BB261 (if true) | BB262 (if false)
BB261   <- [0]
  ct              %261.0 = PushContext        lCL   false, .allowPrimitiveMethods(FALSE), function(onOff) <(rir::DispatchTable*)0x55de2c|...>, e0.3
  val?^ | miss    %261.1 = LdVar              eR    .Call, <env 0x55de28b56378>
  lgl$#-          %261.2 = Identical                <blt .Call>, %261.1   <true>
  void                    Branch                   %261.2 -> BB263 (if true) | BB264 (if false)
BB262   <- [0]
  fs              %262.0 = FrameState         R     0x55de2dc4ca10+0: [], env=e0.3
  void                    Deopt              !v    %262.0, CallTarget@0x55de2d7bb0f0[Call#5], %0.19
BB263   <- [261]
  val?^ | miss    %263.0 = LdVar              eR    C_R_M_setPrimitiveMethods, <env 0x55de28b56378>
  env             e263.1 = MkEnv              l     onOff=false, code="CLEAR", parent=<env 0x55de28b56378>, context 1
  val?            %263.2 = Force!<value>      !v    %263.0, e263.1   <vec>
  val?^ | miss    %263.3 = LdVar              eR    code, e263.1
  val?            %263.4 = Force!<value>      !v    %263.3, e263.1   <str$->
  val?            %263.5 = CallBuiltin        !v    .Call(%263.2, "", nil, %263.4, nil, nil) e263.1   <lgl$->
  lgl$#-          %263.6 = IsType                   %263.5 isA lgl$-
  void                    Branch                   %263.6 -> BB265 (if true) | BB266 (if false)
BB264   <- [261]
  fs              %264.0 = FrameState         R     0x55de2dc4ca10+32: [], env=e0.3
  env             e264.1 = (MkEnv)            l     onOff=false, parent=<env 0x55de28b56378>, context 1
  fs              %264.2 = FrameState         R     0x55de2ba62e00+15: [false], env=e264.1, next=%264.0
  void                    Deopt              !v    %264.2, DeadBranchReached@0x55de2c1bd198[Test#0], %261.2   !
BB265   <- [263]
  lgl$-           %265.0 = CastType           d     dn %263.5
  val?            %265.1 = PopContext         C     %265.0, %261.0   <lgl$->
  lgl$#-          %265.2 = IsType                   %265.1 isA lgl$-
  void                    Branch                   %265.2 -> BB267 (if true) | BB268 (if false)
BB266   <- [263]
  fs              %266.0 = FrameState         R     0x55de2dc4ca10+32: [], env=e0.3
  fs              %266.1 = FrameState         R     0x55de2ba62e00+200: [%263.5], env=e263.1, next=%266.0
  void                    Deopt              !v    %266.1, Typecheck@0x55de2c1bd198[Type#5], %263.5   !
BB267   <- [265]
  lgl$-           %267.0 = CastType           d     dn %265.1
  void                    StVar              lW    primMethods, %267.0, e0.3
  (cls|spec|blt)  %267.2 = LdFun              !v    on.exit, <0x55de2854e270>, e0.3
  prom-           %267.3 = MkArg                    unboundValue, .findInheritedMethods[0x55de34f8f4b0]_p11, e0.3
  val?            %267.4 = Call               !v    %267.2(%267.3) e0.3
  val?^ | miss    %267.5 = LdVar              eR    is.environment, e0.3
  lgl$#-          %267.6 = Identical                <blt is.environment>, %267.5   <true>
  void                    Branch                   %267.6 -> BB269 (if true) | BB270 (if false)
BB268   <- [265]
  fs              %268.0 = FrameState         R     0x55de2dc4ca10+32: [%265.1], env=e0.3
  void                    Deopt              !v    %268.0, Typecheck@0x55de2d7bb0f0[Type#9], %265.1   !
BB269   <- [267]
  val?^ | miss    %269.0 = LdVar              eR    table, e0.3
  val?            %269.1 = Force!<lazy>       !v    %269.0, e0.3   <env->
  lgl$#-          %269.2 = CallSafeBuiltin    wed   is.environment(%269.1)    <lgl$->
  void                    Branch                   %269.2 -> BB14 (if true) | BB13 (if false)
BB270   <- [267]
  fs              %270.0 = FrameState         R     0x55de2dc4ca10+78: [%267.4], env=e0.3
  void                    Deopt              !v    %270.0, DeadBranchReached@0x55de2d7bb0f0[Test#0], %267.6   !
BB14   <- [269]
  val?^ | miss    %14.0 = LdVar              eR    length, e0.3
  lgl$#-          %14.1 = Identical                <blt length>, %14.0   <true>
  void                    Branch                   %14.1 -> BB271 (if true) | BB272 (if false)
BB13   <- [269]
  (cls|spec|blt)  %13.0 = LdFun              !v    is, e0.3
  fs              %13.1 = FrameState         R     0x55de2dc4ca10+192: [%13.0], env=e0.3
  void                    Deopt              !v    %13.1, DeadCall@0x55de2d7bb0f0[Call#9], %13.0   !
BB271   <- [14]
  (cls|spec|blt)  %271.0 = LdFun              !v    @, <0x55de2854ebd8>, e0.3
  prom-           %271.1 = MkArg                    unboundValue, .findInheritedMethods[0x55de34f8f4b0]_p13, e0.3
  prom-           %271.2 = MkArg                    unboundValue, .findInheritedMethods[0x55de34f8f4b0]_p14, e0.3
  val?            %271.3 = Call               !v    %271.0(%271.1, %271.2) e0.3   <vec->
  lgl$#-          %271.4 = IsType                   %271.3 isA val?-
  void                    Branch                   %271.4 -> BB273 (if true) | BB274 (if false)
BB272   <- [14]
  fs              %272.0 = FrameState         R     0x55de2dc4ca10+170: [%269.2], env=e0.3
  void                    Deopt              !v    %272.0, DeadBranchReached@0x55de2d7bb0f0[Test#1], %14.1   !
BB273   <- [271]
  val?-           %273.0 = CastType           d     dn %271.3   <vec->
  (int|real)$-    %273.1 = CallSafeBuiltin    wed   length(%273.0)    <int$->
  lgl$#-          %273.2 = IsType                   %273.1 isA int$-
  void                    Branch                   %273.2 -> BB275 (if true) | BB276 (if false)
BB274   <- [271]
  fs              %274.0 = FrameState         R     0x55de2dc4ca10+416: [<blt length>, %271.3], env=e0.3
  void                    Deopt              !v    %274.0, Typecheck@0x55de2d7bb0f0[Type#27], %271.3   !
BB275   <- [273]
  int$-           %275.0 = CastType           d     dn %273.1
  lgl$-           %275.1 = Gt                 d     %275.0, 0L, elided   <lgl$->
  void                    StVar              lW    hasGroup, %275.1, e0.3
  lgl$#-          %275.3 = CheckTrueFalse     e     %275.1
  void                    Branch                   %275.3 -> BB259 (if true) | BB21 (if false)
BB276   <- [273]
  fs              %276.0 = FrameState         R     0x55de2dc4ca10+438: [%273.1], env=e0.3
  void                    Deopt              !v    %276.0, Typecheck@0x55de2d7bb0f0[Type#28], %273.1   !
BB259   <- [275]
  (cls|spec|blt)  %259.0 = LdFun              !v    .getAllGroups, e0.3
  fs              %259.1 = FrameState         R     0x55de2dc4ca10+494: [%259.0], env=e0.3
  void                    Deopt              !v    %259.1, DeadCall@0x55de2d7bb0f0[Call#18], %259.0   !
BB21   <- [275]
  val?^ | miss    %21.0 = LdVar              eR    length, e0.3
  lgl$#-          %21.1 = Identical                <blt length>, %21.0   <true>
  void                    Branch                   %21.1 -> BB277 (if true) | BB278 (if false)
BB277   <- [21]
  val?^ | miss    %277.0 = LdVar              eR    excluded, e0.3
  val?            %277.1 = Force!<lazy>       !v    %277.0, e0.3   <(nil|str)->
  lgl$#-          %277.2 = IsType                   %277.1 isA val?-
  void                    Branch                   %277.2 -> BB279 (if true) | BB280 (if false)
BB278   <- [21]
  fs              %278.0 = FrameState         R     0x55de2dc4ca10+464: [], env=e0.3
  void                    Deopt              !v    %278.0, DeadBranchReached@0x55de2d7bb0f0[Test#2], %21.1   !
BB279   <- [277]
  val?-           %279.0 = CastType           d     dn %277.1   <(nil|str)->
  (int|real)$-    %279.1 = CallSafeBuiltin    wed   length(%279.0)    <int$->
  lgl$#-          %279.2 = IsType                   %279.1 isA int$-
  void                    Branch                   %279.2 -> BB281 (if true) | BB282 (if false)
BB280   <- [277]
  fs              %280.0 = FrameState         R     0x55de2dc4ca10+604: [<blt length>, %277.1], env=e0.3
  void                    Deopt              !v    %280.0, Typecheck@0x55de2d7bb0f0[Type#35], %277.1   !
BB281   <- [279]
  int$-           %281.0 = CastType           d     dn %279.1
  lgl$-           %281.1 = Gt                 d     %281.0, 0L, elided   <lgl$->
  void                    StVar              lW    doExcluded, %281.1, e0.3
  val?^ | miss    %281.3 = LdVar              eR    verbose, e0.3
  val?            %281.4 = Force!<lazy>       !v    %281.3, e0.3   <lgl$->
  lgl$#-          %281.5 = CheckTrueFalse     we    %281.4
  void                    Branch                   %281.5 -> BB258 (if true) | BB28 (if false)
BB282   <- [279]
  fs              %282.0 = FrameState         R     0x55de2dc4ca10+626: [%279.1], env=e0.3
  void                    Deopt              !v    %282.0, Typecheck@0x55de2d7bb0f0[Type#36], %279.1   !
BB258   <- [281]
  void                    StVar              lW    plist, %0.18, e0.3
  (cls|spec|blt)  %258.1 = LdFun              !v    cat, e0.3
  fs              %258.2 = FrameState         R     0x55de2dc4ca10+707: [%258.1], env=e0.3
  void                    Deopt              !v    %258.2, DeadCall@0x55de2d7bb0f0[Call#21], %258.1   !
BB28   <- [281]
  val?^ | miss    %28.0 = LdVar              eR    length, e0.3
  lgl$#-          %28.1 = Identical                <blt length>, %28.0   <true>
  void                    Branch                   %28.1 -> BB283 (if true) | BB284 (if false)
BB283   <- [28]
  val?^ | miss    %283.0 = LdVar              eR    classes, e0.3
  val?            %283.1 = Force!<lazy>       !v    %283.0, e0.3   <(str|vec)>
  val?            %283.2 = CallBuiltin        !v    length(%283.1) e0.3   <int$->
  lgl$#-          %283.3 = IsType                   %283.2 isA int$-
  void                    Branch                   %283.3 -> BB285 (if true) | BB286 (if false)
BB284   <- [28]
  fs              %284.0 = FrameState         R     0x55de2dc4ca10+667: [%281.5], env=e0.3
  void                    Deopt              !v    %284.0, DeadBranchReached@0x55de2d7bb0f0[Test#4], %28.1   !
BB285   <- [283]
  int$-           %285.0 = CastType           d     dn %283.2
  void                    StVar              lW    nargs, %285.0, e0.3
  lgl$-           %285.2 = Missing            eR    useInherited, e0.3
  lgl$-           %285.3 = Not                d     %285.2, elided
  lgl$-           %285.4 = AsLogical                %285.3
  lgl$#-          %285.5 = Identical                %285.4, false
  void                    Branch                   %285.5 -> BB257 (if true) | BB33 (if false)
BB286   <- [283]
  fs              %286.0 = FrameState         R     0x55de2dc4ca10+866: [%283.2], env=e0.3
  void                    Deopt              !v    %286.0, Typecheck@0x55de2d7bb0f0[Type#61], %283.2   !
BB257   <- [285]
  void                    Nop                !     
  lgl$-           %257.1 = %285.4
  goto BB38
BB33   <- [285]
  val?^ | miss    %33.0 = LdVar              eR    length, e0.3
  lgl$#-          %33.1 = Identical                <blt length>, %33.0   <true>
  void                    Branch                   %33.1 -> BB287 (if true) | BB288 (if false)
BB38   <- [257, 297]
  lgl$-           %38.0 = Phi                      %297.4:BB297, %257.1:BB257
  lgl$-           %38.1 = %38.0
  lgl$#-          %38.2 = CheckTrueFalse     e     %38.1
  void                    Branch                   %38.2 -> BB256 (if true) | BB41 (if false)
BB287   <- [33]
  val?^ | miss    %287.0 = LdVar              eR    useInherited, e0.3
  val?            %287.1 = Force!<lazy>       !v    %287.0, e0.3   <lgl+>
  lgl$#-          %287.2 = IsType                   %287.1 isA lgl+
  void                    Branch                   %287.2 -> BB289 (if true) | BB290 (if false)
BB288   <- [33]
  fs              %288.0 = FrameState         R     0x55de2dc4ca10+880: [], env=e0.3
  void                    Deopt              !v    %288.0, DeadBranchReached@0x55de2d7bb0f0[Test#5], %33.1   !
BB256   <- [38]
  (cls|spec|blt)  %256.0 = LdFun              !v    rep, e0.3
  fs              %256.1 = FrameState         R     0x55de2dc4ca10+1028: [%256.0], env=e0.3
  void                    Deopt              !v    %256.1, DeadCall@0x55de2d7bb0f0[Call#32], %256.0   !
BB41   <- [38]
  val?^ | miss    %41.0 = LdVar              eR    hasGroup, e0.3
  lgl$#-          %41.1 = IsType                   %41.0 isA lgl$-
  void                    Branch                   %41.1 -> BB291 (if true) | BB292 (if false)
BB289   <- [287]
  lgl+            %289.0 = CastType           d     dn %287.1
  (int|real)$-    %289.1 = CallSafeBuiltin    wed   length(%289.0)    <int$->
  lgl$#-          %289.2 = IsType                   %289.1 isA int$-
  void                    Branch                   %289.2 -> BB295 (if true) | BB296 (if false)
BB290   <- [287]
  fs              %290.0 = FrameState         R     0x55de2dc4ca10+963: [%285.4, <blt length>, %287.1], env=e0.3
  void                    Deopt              !v    %290.0, Typecheck@0x55de2d7bb0f0[Type#63], %287.1   !
BB291   <- [41]
  lgl$-           %291.0 = CastType           d     dn %41.0
  lgl$-           %291.1 = AsLogical                %291.0
  lgl$#-          %291.2 = Identical                %291.1, false
  void                    Branch                   %291.2 -> BB255 (if true) | BB42 (if false)
BB292   <- [41]
  fs              %292.0 = FrameState         R     0x55de2dc4ca10+1012: [%38.1], env=e0.3
  void                    Deopt              !v    %292.0, Typecheck@0x55de2d7bb0f0[Type#70], %41.0   !
BB295   <- [289]
  int$-           %295.0 = CastType           d     dn %289.1
  val?^ | miss    %295.1 = LdVar              eR    nargs, e0.3
  lgl$#-          %295.2 = IsType                   %295.1 isA int$-
  void                    Branch                   %295.2 -> BB297 (if true) | BB298 (if false)
BB296   <- [289]
  void                    Nop                !     
  (int|real)$-    %296.1 = %289.1
  dr              %296.2 = Typecheck@0x55de2d7bb0f0[Type#64]
  goto BB36
BB255   <- [291]
  void                    Nop                !     
  lgl$-           %255.1 = %291.1
  goto BB45
BB42   <- [291]
  val?^ | miss    %42.0 = LdVar              eR    doExcluded, e0.3
  val?            %42.1 = Force!             !v    %42.0, e0.3   <val?_>
  lgl$#-          %42.2 = IsType                   %42.1 isA val?+
  void                    Branch                   %42.2 -> BB293 (if true) | BB294 (if false)
BB297   <- [295]
  int$-           %297.0 = CastType           d     dn %295.1
  lgl$-           %297.1 = Lt                 d     %295.0, %297.0, elided   <lgl$->
  lgl$-           %297.2 = AsLogical                %297.1
  lgl$-           %297.3 = LAnd                     %285.4, %297.2
  lgl$-           %297.4 = %297.3
  goto BB38
BB298   <- [295]
  void                    Nop                !     
  val?^ | miss    %298.1 = %295.1
  dr              %298.2 = Typecheck@0x55de2d7bb0f0[Type#65]
  goto BB36
BB36   <- [296, 298]
  val?^ | miss    %36.0 = Phi                      %296.1:BB296, %298.1:BB298
  val?^ | miss    %36.1 = %36.0
  dr              %36.2 = Phi                      %296.2:BB296, %298.2:BB298
  dr              %36.3 = %36.2
  fs              %36.4 = FrameState         R     0x55de2dc4ca10+985: [%285.4, %289.1], env=e0.3
  void                    Deopt              !v    %36.4, %36.3, %36.1   !
BB45   <- [255, 293]
  lgl$-           %45.0 = Phi                      %293.4:BB293, %255.1:BB255
  lgl$-           %45.1 = %45.0
  lgl$#-          %45.2 = CheckTrueFalse     e     %45.1
  void                    Branch                   %45.2 -> BB254 (if true) | BB46 (if false)
BB293   <- [42]
  val?+           %293.0 = CastType           d     dn %42.1   <val?_>
  lgl             %293.1 = Not                wed   %293.0, elided
  lgl$-           %293.2 = AsLogical          e     %293.1
  lgl$-           %293.3 = LAnd                     %291.1, %293.2
  lgl$-           %293.4 = %293.3
  goto BB45
BB294   <- [42]
  fs              %294.0 = FrameState         R     0x55de2dc4ca10+1112: [%291.1, %42.1], env=e0.3
  void                    Deopt              !v    %294.0, Typecheck@0x55de2d7bb0f0[Type#71], %42.1   !
BB254   <- [45]
  (cls|spec|blt)  %254.0 = LdFun              !v    .sigLabel, e0.3
  fs              %254.1 = FrameState         R     0x55de2dc4ca10+1136: [%254.0], env=e0.3
  void                    Deopt              !v    %254.1, DeadCall@0x55de2d7bb0f0[Call#33], %254.0   !
BB46   <- [45]
  val?^ | miss    %46.0 = LdVar              eR    classes, e0.3
  val?            %46.1 = Force!<wrapped>    !v    %46.0, e0.3   <(str|vec)>
  val?            %46.2 = Extract2_1D        !v    %46.1, 1L, e0.3   <str$+>
  void                    StVar              lW    cl1, %46.2, e0.3
  val?^ | miss    %46.4 = LdVar              eR    getClass, e0.3
  lgl$#-          %46.5 = Identical                %46.4, function(Class, .Force=FALSE, where=.classEnv(|...>
  void                    Branch                   %46.5 -> BB299 (if true) | BB300 (if false)
BB299   <- [46]
  prom-           %299.0 = MkArg                    unboundValue, .findInheritedMethods[0x55de34f8f4b0]_p15 (!refl), e0.3
  prom-           %299.1 = MkArg                    unboundValue, .findInheritedMethods[0x55de34f8f4b0]_p16, e0.3
  val?            %299.2 = StaticCall         !v    getClass[0x55de34cb3cc0](%299.0, true, %299.1) { 0 2n 1n } e0.3   <other>
  void                    StVar              lW    def, %299.2, e0.3
  lgl$-           %299.4 = Missing            eR    useInherited, e0.3
  lgl$-           %299.5 = AsLogical                %299.4
  lgl$#-          %299.6 = Identical                %299.5, true
  void                    Branch                   %299.6 -> BB253 (if true) | BB49 (if false)
BB300   <- [46]
  fs              %300.0 = FrameState         R     0x55de2dc4ca10+1502: [], env=e0.3
  void                    Deopt              !v    %300.0, CallTarget@0x55de2d7bb0f0[Call#37], %46.4   !
BB253   <- [299]
  void                    Nop                !     
  lgl$-           %253.1 = %299.5
  goto BB52
BB49   <- [299]
  val?^ | miss    %49.0 = LdVar              eR    useInherited, e0.3
  val?            %49.1 = Force!<wrapped>    !v    %49.0, e0.3   <lgl+>
  lgl$#-          %49.2 = IsType                   %49.1 isA val+   <true>
  lgl$#-          %49.3 = IsType                   %49.1 isA lgl+
  void                    Branch                   %49.2 -> BB305 (if true) | BB306 (if false)
BB52   <- [253, 307]
  lgl$-           %52.0 = Phi                      %307.4:BB307, %253.1:BB253
  lgl$-           %52.1 = %52.0
  lgl$#-          %52.2 = CheckTrueFalse     e     %52.1
  void                    Branch                   %52.2 -> BB237 (if true) | BB55 (if false)
BB305   <- [49]
  void                    Branch                   %49.3 -> BB307 (if true) | BB308 (if false)
BB306   <- [49]
  void                    Nop                !     
  lgl$#-          %306.1 = %49.2
  dr              %306.2 = DeadBranchReached@0x55de2d7bb0f0[Test#9]
  goto BB50
BB237   <- [52]
  val?^ | miss    %237.0 = LdVar              eR    c, e0.3
  lgl$#-          %237.1 = Identical                <blt c>, %237.0   <true>
  void                    Branch                   %237.1 -> BB301 (if true) | BB302 (if false)
BB55   <- [52]
  val?^ | miss    %55.0 = LdVar              eR    cl1, e0.3
  val?            %55.1 = Force!             !v    %55.0, e0.3   <val?_>
  val?            %55.2 = %55.1
  goto BB56
BB307   <- [305]
  lgl+            %307.0 = CastType           d     dn %49.1
  lgl$-           %307.1 = Extract2_1D        wed   %307.0, 1L, elided   <lgl$->
  lgl$-           %307.2 = AsLogical                %307.1
  lgl$-           %307.3 = LOr                      %299.5, %307.2
  lgl$-           %307.4 = %307.3
  goto BB52
BB308   <- [305]
  void                    Nop                !     
  val?            %308.1 = %49.1
  dr              %308.2 = Typecheck@0x55de2d7bb0f0[Type#91]
  goto BB50
BB50   <- [306, 308]
  val?^ | miss    %50.0 = Phi                      %306.1:BB306, %308.1:BB308
  val?^ | miss    %50.1 = %50.0
  dr              %50.2 = Phi                      %306.2:BB306, %308.2:BB308
  dr              %50.3 = %50.2
  fs              %50.4 = FrameState         R     0x55de2dc4ca10+1592: [%299.5, %49.1], env=e0.3
  void                    Deopt              !v    %50.4, %50.3, %50.1   !
BB301   <- [237]
  val?^ | miss    %301.0 = LdVar              eR    cl1, e0.3
  lgl$#-          %301.1 = IsType                   %301.0 isA val?~+ | miss
  void                    Branch                   %301.1 -> BB303 (if true) | BB304 (if false)
BB302   <- [237]
  void                    Nop                !     
  lgl$#-          %302.1 = %237.1
  dr              %302.2 = DeadBranchReached@0x55de2d7bb0f0[Test#10]
  goto BB53
BB56   <- [55, 351]
  val?            %56.0 = Phi                      %55.2:BB55, %351.2:BB351   <str->
  val?            %56.1 = %56.0
  void                    StVar              lW    labels, %56.1, e0.3
  val?^ | miss    %56.3 = LdVar              eR    list, e0.3
  lgl$#-          %56.4 = Identical                <blt list>, %56.3   <true>
  void                    Branch                   %56.4 -> BB311 (if true) | BB312 (if false)
BB303   <- [301]
  val?~+ | miss   %303.0 = CastType           d     dn %301.0
  val?+           %303.1 = Force!<value>            %303.0,    <str$+>
  val?^ | miss    %303.2 = LdVar              eR    .eligibleSuperClasses, e0.3
  lgl$#-          %303.3 = Identical                %303.2, function(contains, simpleOnly) <(rir::Dispatch|...>
  void                    Branch                   %303.3 -> BB309 (if true) | BB310 (if false)
BB304   <- [301]
  void                    Nop                !     
  val?^ | miss    %304.1 = %301.0
  dr              %304.2 = Typecheck@0x55de2d7bb0f0[Type#100]
  goto BB53
BB53   <- [302, 304, 310]
  val?^ | miss    %53.0 = Phi                      %302.1:BB302, %304.1:BB304, %310.1:BB310
  val?^ | miss    %53.1 = %53.0
  dr              %53.2 = Phi                      %302.2:BB302, %304.2:BB304, %310.2:BB310
  dr              %53.3 = %53.2
  fs              %53.4 = FrameState         R     0x55de2dc4ca10+1643: [%52.1], env=e0.3
  void                    Deopt              !v    %53.4, %53.3, %53.1   !
BB311   <- [56]
  val             %311.0 = ChkMissing         e     %56.1
  val+            %311.1 = CallSafeBuiltin    wed   list(%56.1)    <vec$->
  void                    StVar              lW    supersList, %311.1, e0.3
  val?^ | miss    %311.3 = LdVar              eR    vector, e0.3
  lgl$#-          %311.4 = Identical                %311.3, function(mode="logical", length=0L) <(rir::Dis|...>
  void                    Branch                   %311.4 -> BB313 (if true) | BB314 (if false)
BB312   <- [56]
  fs              %312.0 = FrameState         R     0x55de2dc4ca10+1831: [], env=e0.3
  void                    Deopt              !v    %312.0, DeadBranchReached@0x55de2d7bb0f0[Test#11], %56.4   !
BB309   <- [303]
  prom-           %309.0 = MkArg                    unboundValue, .findInheritedMethods[0x55de34f8f4b0]_p91, e0.3
  prom-           %309.1 = MkArg                    unboundValue, .findInheritedMethods[0x55de34f8f4b0]_p94, e0.3
  ct              %309.2 = PushContext        lCL   %309.0, %309.1, .eligibleSuperClasses(@(def, contains), simple|...>, function(contains, simpleOnly) <(rir::Dispatch|...>, e0.3
  val?^           %309.3 = CastType                 up %309.1
  val?^           %309.4 = CastType                 up %309.0
  val?^ | miss    %309.5 = LdVar              eR    names, <env 0x55de28b56378>
  lgl$#-          %309.6 = Identical                <blt names>, %309.5   <true>
  void                    Branch                   %309.6 -> BB315 (if true) | BB316 (if false)
BB310   <- [303]
  void                    Nop                !     
  val?^ | miss    %310.1 = %303.2
  dr              %310.2 = CallTarget@0x55de2d7bb0f0[Call#41]
  goto BB53
BB313   <- [311]
  val?^ | miss    %313.0 = LdVar              eR    nargs, e0.3
  lgl$#-          %313.1 = IsType                   %313.0 isA int$-
  void                    Branch                   %313.1 -> BB317 (if true) | BB318 (if false)
BB314   <- [311]
  void                    Nop                !     
  val?^ | miss    %314.1 = %311.3
  dr              %314.2 = CallTarget@0x55de2d7bb0f0[Call#44]
  goto BB59
BB315   <- [309]
  env             e315.0 = MkEnv              l     contains=%309.4, simpleOnly=%309.3, parent=<env 0x55de28b56378>, context 1
  val?            %315.1 = Force!<lazy>       !vL   %309.4, e315.0   <vec+>
  lgl$#-          %315.2 = IsType                   %315.1 isA val?+
  void                    Branch                   %315.2 -> BB319 (if true) | BB320 (if false)
BB316   <- [309]
  fs              %316.0 = FrameState         R     0x55de2dc4ca10+1789: [<blt c>, %303.1], env=e0.3
  env             e316.1 = (MkEnv)            l     contains=%309.4, simpleOnly=%309.3, parent=<env 0x55de28b56378>, context 1
  fs              %316.2 = FrameState         R     0x55de2c01f0f0+17: [<blt names>, %309.6], env=e316.1, next=%316.0
  void                    Deopt              !v    %316.2, DeadBranchReached@0x55de2e403808[Test#0], %309.6   !
BB317   <- [313]
  int$-           %317.0 = CastType           d     dn %313.0
  vec-            %317.1 = CallSafeBuiltin    wed   vector("list", %317.0)    <vec->
  void                    StVar              lW    classDefs, %317.1, e0.3
  val?^ | miss    %317.3 = LdVar              eR    def, e0.3
  val?            %317.4 = Force!<value>      !v    %317.3, e0.3   <other>
  val?^ | miss    %317.5 = LdVar              eR    classDefs !upd, e0.3
  lgl$#-          %317.6 = IsType                   %317.5 isA val?~- | miss
  void                    Branch                   %317.6 -> BB321 (if true) | BB322 (if false)
BB318   <- [313]
  void                    Nop                !     
  val?^ | miss    %318.1 = %313.0
  dr              %318.2 = Typecheck@0x55de2d7bb0f0[Type#110]
  goto BB59
BB59   <- [314, 318]
  val?^ | miss    %59.0 = Phi                      %314.1:BB314, %318.1:BB318
  val?^ | miss    %59.1 = %59.0
  dr              %59.2 = Phi                      %314.2:BB314, %318.2:BB318
  dr              %59.3 = %59.2
  fs              %59.4 = FrameState         R     0x55de2dc4ca10+1936: [], env=e0.3
  void                    Deopt              !v    %59.4, %59.3, %59.1   !
BB319   <- [315]
  val?+           %319.0 = CastType           d     dn %315.1   <vec+>
  val+            %319.1 = CallSafeBuiltin    wed   names(%319.0)    <(nil|str)->
  void                    StVar              lW    what, %319.1, e315.0
  val?^ | miss    %319.3 = LdVar              eR    length, <env 0x55de28b56378>
  lgl$#-          %319.4 = Identical                <blt length>, %319.3   <true>
  void                    Branch                   %319.4 -> BB327 (if true) | BB328 (if false)
BB320   <- [315]
  fs              %320.0 = FrameState         R     0x55de2dc4ca10+1789: [<blt c>, %303.1], env=e0.3
  fs              %320.1 = FrameState         R     0x55de2c01f0f0+69: [<blt names>, %315.1], env=e315.0, next=%320.0
  void                    Deopt              !v    %320.1, Typecheck@0x55de2e403808[Type#1], %315.1   !
BB321   <- [317]
  val?~- | miss   %321.0 = CastType           d     dn %317.5
  val?-           %321.1 = Force!<value>            %321.0,    <vec->
  val?            %321.2 = Subassign2_1D      !v    %317.4, %321.1, 1L, e0.3
  void                    StVar              lW    classDefs, %321.2, e0.3
  val?^ | miss    %321.4 = LdVar              eR    nargs, e0.3
  lgl$#-          %321.5 = IsType                   %321.4 isA int$-
  void                    Branch                   %321.5 -> BB323 (if true) | BB324 (if false)
BB322   <- [317]
  fs              %322.0 = FrameState         R     0x55de2dc4ca10+1996: [%317.4], env=e0.3
  void                    Deopt              !v    %322.0, Typecheck@0x55de2d7bb0f0[Type#113], %317.5   !
BB327   <- [319]
  (int|real)$-    %327.0 = CallSafeBuiltin    wed   length(%319.1)    <int$->
  lgl$#-          %327.1 = IsType                   %327.0 isA int$-
  void                    Branch                   %327.1 -> BB335 (if true) | BB336 (if false)
BB328   <- [319]
  fs              %328.0 = FrameState         R     0x55de2dc4ca10+1789: [<blt c>, %303.1], env=e0.3
  fs              %328.1 = FrameState         R     0x55de2c01f0f0+105: [], env=e315.0, next=%328.0
  void                    Deopt              !v    %328.1, DeadBranchReached@0x55de2e403808[Test#1], %319.4   !
BB323   <- [321]
  int$-           %323.0 = CastType           d     dn %321.4
  lgl$-           %323.1 = Gt                 d     %323.0, 1, elided   <lgl$->
  lgl$#-          %323.2 = CheckTrueFalse     e     %323.1
  void                    Branch                   %323.2 -> BB179 (if true) | BB65 (if false)
BB324   <- [321]
  void                    Nop                !     
  val?^ | miss    %324.1 = %321.4
  dr              %324.2 = Typecheck@0x55de2d7bb0f0[Type#114]
  goto BB63
BB335   <- [327]
  int$-           %335.0 = CastType           d     dn %327.0
  lgl$-           %335.1 = Not                d     %335.0, elided
  lgl$#-          %335.2 = CheckTrueFalse     e     %335.1
  void                    Branch                   %335.2 -> BB252 (if true) | BB246 (if false)
BB336   <- [327]
  void                    Nop                !     
  (int|real)$-    %336.1 = %327.0
  dr              %336.2 = Typecheck@0x55de2e403808[Type#5]
  goto BB244
BB179   <- [323]
  lgl$#-          %179.0 = ColonInputEffects        2, %323.0   <true>
  void                    Branch                   %179.0 -> BB325 (if true) | BB326 (if false)
BB65   <- [323]
  void                    Nop                !     
  goto BB66
BB63   <- [324, 326, 334, 340]
  val?^ | miss    %63.0 = Phi                      %324.1:BB324, %326.1:BB326, %334.1:BB334, %340.1:BB340
  val?^ | miss    %63.1 = %63.0
  dr              %63.2 = Phi                      %324.2:BB324, %326.2:BB326, %334.2:BB334, %340.2:BB340
  dr              %63.3 = %63.2
  fs              %63.4 = FrameState         R     0x55de2dc4ca10+2031: [], env=e0.3
  void                    Deopt              !v    %63.4, %63.3, %63.1   !
BB252   <- [335]
  void                    Nop                !     
  val+            %252.1 = %319.1
  goto BB249
BB246   <- [335]
  val?^ | miss    %246.0 = LdVar              eR    vapply, <env 0x55de28b56378>
  lgl$#-          %246.1 = Identical                %246.0, function(X, FUN, FUN.VALUE, ..., USE.NAMES=TRU|...>
  void                    Branch                   %246.1 -> BB341 (if true) | BB342 (if false)
BB244   <- [336, 342]
  val?^ | miss    %244.0 = Phi                      %336.1:BB336, %342.1:BB342
  val?^ | miss    %244.1 = %244.0
  dr              %244.2 = Phi                      %336.2:BB336, %342.2:BB342
  dr              %244.3 = %244.2
  fs              %244.4 = FrameState         R     0x55de2dc4ca10+1789: [<blt c>, %303.1], env=e0.3
  fs              %244.5 = FrameState         R     0x55de2c01f0f0+196: [%327.0], env=e315.0, next=%244.4
  void                    Deopt              !v    %244.5, %244.3, %244.1   !
BB325   <- [179]
  int$#-          %325.0 = ColonCastRhs       e     2L, %323.0   <int$->
  lgl$#-          %325.1 = Lte                d     2L, %325.0, elided   <true>
  void                    Branch                   %325.1 -> BB333 (if true) | BB334 (if false)
BB326   <- [179]
  void                    Nop                !     
  lgl$#-          %326.1 = %179.0
  dr              %326.2 = DeadBranchReached@0x55de2d7bb0f0[Test#12]
  goto BB63
BB66   <- [65, 197]
  val?^ | miss    %66.0 = LdVar              eR    labels, e0.3
  lgl$#-          %66.1 = IsType                   %66.0 isA val?~- | miss
  void                    Branch                   %66.1 -> BB329 (if true) | BB330 (if false)
BB249   <- [252, 349]
  val?            %249.0 = Phi                      %349.2:BB349, %252.1:BB252
  val?            %249.1 = %249.0
  val?            %249.2 = PopContext         C     %249.1, %309.2   <str->
  lgl$#-          %249.3 = IsType                   %249.2 isA val?-
  void                    Branch                   %249.3 -> BB351 (if true) | BB352 (if false)
BB341   <- [246]
  prom-           %341.0 = MkArg                    unboundValue, .findInheritedMethods[0x55de34f8f4b0]_p95, e315.0
  prom-           %341.1 = MkArg                    unboundValue, .findInheritedMethods[0x55de34f8f4b0]_p96, e315.0
  val?            %341.2 = StaticCall         !v    vapply[0x55de2f519ab0](%341.0, %341.1, na-lgl) { 0 1 2 } e315.0   <lgl+>
  void                    StVar              lW    eligible, %341.2, e315.0
  val?^ | miss    %341.4 = LdVar              eR    what, e315.0
  lgl$#-          %341.5 = IsType                   %341.4 isA val?~- | miss
  void                    Branch                   %341.5 -> BB343 (if true) | BB344 (if false)
BB342   <- [246]
  void                    Nop                !     
  val?^ | miss    %342.1 = %246.0
  dr              %342.2 = CallTarget@0x55de2e403808[Call#2]
  goto BB244
BB333   <- [325]
  lgl$#-          %333.0 = Neq                d     %325.0, 2L, elided   <true>
  void                    Branch                   %333.0 -> BB339 (if true) | BB340 (if false)
BB334   <- [325]
  void                    Nop                !     
  lgl$#-          %334.1 = %325.1
  dr              %334.2 = DeadBranchReached@0x55de2d7bb0f0[Test#15]
  goto BB63
BB329   <- [66]
  val?~- | miss   %329.0 = CastType           d     dn %66.0
  val?-           %329.1 = Force!<value>            %329.0,    <str->
  lgl$#-          %329.2 = IsType                   %329.1 isA val+   <true>
  void                    Branch                   %329.2 -> BB331 (if true) | BB332 (if false)
BB330   <- [66]
  void                    Nop                !     
  val?^ | miss    %330.1 = %66.0
  dr              %330.2 = Typecheck@0x55de2d7bb0f0[Type#238]
  goto BB67
BB351   <- [249]
  val?-           %351.0 = CastType           d     dn %249.2   <str->
  (list|sym|char|lgl|int|real|str|vec|complex|raw|cls|spec|blt|prom|_|code|env|ast|expressions|dots|other)+ %351.1 = CallSafeBuiltin    wed   c(%303.1, %351.0, "ANY")    <str->
  (list|sym|char|lgl|int|real|str|vec|complex|raw|cls|spec|blt|prom|_|code|env|ast|expressions|dots|other)+ %351.2 = %351.1
  goto BB56
BB352   <- [249]
  fs              %352.0 = FrameState         R     0x55de2dc4ca10+1789: [<blt c>, %303.1, %249.2], env=e0.3
  void                    Deopt              !v    %352.0, Typecheck@0x55de2d7bb0f0[Type#105], %249.2   !
BB343   <- [341]
  val?~- | miss   %343.0 = CastType           d     dn %341.4
  val?-           %343.1 = Force!<value>            %343.0,    <str->
  lgl$#-          %343.2 = IsType                   %343.1 isA val+   <true>
  void                    Branch                   %343.2 -> BB347 (if true) | BB348 (if false)
BB344   <- [341]
  void                    Nop                !     
  val?^ | miss    %344.1 = %341.4
  dr              %344.2 = Typecheck@0x55de2e403808[Type#9]
  goto BB247
BB339   <- [333]
  void                    StVar              lW    i, 2L, e0.3
  val?^ | miss    %339.1 = LdVar              eR    getClass, e0.3
  lgl$#-          %339.2 = Identical                %339.1, function(Class, .Force=FALSE, where=.classEnv(|...>
  void                    Branch                   %339.2 -> BB355 (if true) | BB356 (if false)
BB340   <- [333]
  void                    Nop                !     
  lgl$#-          %340.1 = %333.0
  dr              %340.2 = DeadBranchReached@0x55de2d7bb0f0[Test#16]
  goto BB63
BB331   <- [329]
  val?            %331.0 = Extract1_1D        wed   %329.1, -1L, elided   <str->
  void                    StVar              lW    labels, %331.0, e0.3
  val?^ | miss    %331.2 = LdVar              eR    unique, e0.3
  lgl$#-          %331.3 = Identical                %331.2, function(x, incomparables=FALSE, ...) <(rir::D|...>
  void                    Branch                   %331.3 -> BB337 (if true) | BB338 (if false)
BB332   <- [329]
  void                    Nop                !     
  lgl$#-          %332.1 = %329.2
  dr              %332.2 = DeadBranchReached@0x55de2d7bb0f0[Test#27]
  goto BB67
BB67   <- [330, 332]
  val?^ | miss    %67.0 = Phi                      %330.1:BB330, %332.1:BB332
  val?^ | miss    %67.1 = %67.0
  dr              %67.2 = Phi                      %330.2:BB330, %332.2:BB332
  dr              %67.3 = %67.2
  fs              %67.4 = FrameState         R     0x55de2dc4ca10+3635: [], env=e0.3
  void                    Deopt              !v    %67.4, %67.3, %67.1   !
BB347   <- [343]
  val             %347.0 = ChkMissing         e     %341.2
  lgl$#-          %347.1 = IsType                   %347.0 isA lgl+
  void                    Branch                   %347.1 -> BB349 (if true) | BB350 (if false)
BB348   <- [343]
  void                    Nop                !     
  lgl$#-          %348.1 = %343.2
  dr              %348.2 = DeadBranchReached@0x55de2e403808[Test#2]
  goto BB247
BB247   <- [344, 348, 350]
  val?^ | miss    %247.0 = Phi                      %344.1:BB344, %348.1:BB348, %350.1:BB350
  val?^ | miss    %247.1 = %247.0
  dr              %247.2 = Phi                      %344.2:BB344, %348.2:BB348, %350.2:BB350
  dr              %247.3 = %247.2
  fs              %247.4 = FrameState         R     0x55de2dc4ca10+1789: [<blt c>, %303.1], env=e0.3
  fs              %247.5 = FrameState         R     0x55de2c01f0f0+264: [], env=e315.0, next=%247.4
  void                    Deopt              !v    %247.5, %247.3, %247.1   !
BB355   <- [339]
  prom-           %355.0 = MkArg                    unboundValue, .findInheritedMethods[0x55de34f8f4b0]_p66, e0.3
  prom-           %355.1 = MkArg                    unboundValue, .findInheritedMethods[0x55de34f8f4b0]_p68, e0.3
  val?            %355.2 = StaticCall         !v    getClass[0x55de355c39c0](%355.0, true, %355.1) { 0 2n 1n } e0.3   <other>
  val?^ | miss    %355.3 = LdVar              eR    classDefs !upd, e0.3
  lgl$#-          %355.4 = IsType                   %355.3 isA val?~- | miss
  void                    Branch                   %355.4 -> BB363 (if true) | BB364 (if false)
BB356   <- [339]
  fs              %356.0 = FrameState         R     0x55de2dc4ca10+2212: [1L, %325.0, 2L], env=e0.3
  void                    Deopt              !v    %356.0, CallTarget@0x55de2d7bb0f0[Call#54], %339.1   !
BB337   <- [331]
  val             %337.0 = ChkMissing         e     %331.0
  val?            %337.1 = StaticCall         !v    unique[0x55de2f4fe760](%331.0) { 0 } e0.3   <str->
  void                    StVar              lW    labels, %337.1, e0.3
  val?^ | miss    %337.3 = LdVar              eR    verbose, e0.3
  val?            %337.4 = Force!<wrapped>    !v    %337.3, e0.3   <lgl$->
  lgl$#-          %337.5 = CheckTrueFalse     we    %337.4
  void                    Branch                   %337.5 -> BB178 (if true) | BB73 (if false)
BB338   <- [331]
  fs              %338.0 = FrameState         R     0x55de2dc4ca10+3703: [], env=e0.3
  void                    Deopt              !v    %338.0, CallTarget@0x55de2d7bb0f0[Call#80], %331.2   !
BB349   <- [347]
  lgl+            %349.0 = CastType           d     dn %347.0
  val?            %349.1 = Extract1_1D        wed   %343.1, %349.0, elided   <str->
  val?            %349.2 = %349.1
  goto BB249
BB350   <- [347]
  void                    Nop                !     
  val             %350.1 = %347.0
  dr              %350.2 = Typecheck@0x55de2e403808[Type#11]
  goto BB247
BB363   <- [355]
  val?~- | miss   %363.0 = CastType           d     dn %355.3
  val?-           %363.1 = Force!<value>            %363.0,    <vec->
  val?^ | miss    %363.2 = LdVar              eR    i, e0.3
  lgl$#-          %363.3 = IsType                   %363.2 isA int$-
  void                    Branch                   %363.3 -> BB367 (if true) | BB368 (if false)
BB364   <- [355]
  void                    Nop                !     
  val?^ | miss    %364.1 = %355.3
  dr              %364.2 = Typecheck@0x55de2d7bb0f0[Type#158]
  goto BB182
BB178   <- [337]
  (cls|spec|blt)  %178.0 = LdFun              !v    cat, e0.3
  fs              %178.1 = FrameState         R     0x55de2dc4ca10+3779: [%178.0], env=e0.3
  void                    Deopt              !v    %178.1, DeadCall@0x55de2d7bb0f0[Call#81], %178.0   !
BB73   <- [337]
  val?^ | miss    %73.0 = LdVar              eR    names, e0.3
  lgl$#-          %73.1 = Identical                <blt names>, %73.0   <true>
  void                    Branch                   %73.1 -> BB345 (if true) | BB346 (if false)
BB367   <- [363]
  int$-           %367.0 = CastType           d     dn %363.2
  val?            %367.1 = Subassign2_1D      !v    %355.2, %363.1, %367.0, e0.3
  void                    StVar              lW    classDefs, %367.1, e0.3
  void                    StVar              lW    cc, %355.2, e0.3
  lgl$-           %367.4 = Missing            eR    useInherited, e0.3
  lgl$-           %367.5 = AsLogical                %367.4
  lgl$#-          %367.6 = Identical                %367.5, true
  void                    Branch                   %367.6 -> BB236 (if true) | BB184 (if false)
BB368   <- [363]
  void                    Nop                !     
  val?^ | miss    %368.1 = %363.2
  dr              %368.2 = Typecheck@0x55de2d7bb0f0[Type#159]
  goto BB182
BB182   <- [364, 368]
  val?^ | miss    %182.0 = Phi                      %364.1:BB364, %368.1:BB368
  val?^ | miss    %182.1 = %182.0
  dr              %182.2 = Phi                      %364.2:BB364, %368.2:BB368
  dr              %182.3 = %182.2
  fs              %182.4 = FrameState         R     0x55de2dc4ca10+2273: [1L, %325.0, 3L, %355.2], env=e0.3
  void                    Deopt              !v    %182.4, %182.3, %182.1   !
BB345   <- [73]
  val?^ | miss    %345.0 = LdVar              eR    table, e0.3
  val?            %345.1 = Force!<wrapped>    !v    %345.0, e0.3   <env->
  lgl$#-          %345.2 = IsType                   %345.1 isA val?-
  void                    Branch                   %345.2 -> BB353 (if true) | BB354 (if false)
BB346   <- [73]
  fs              %346.0 = FrameState         R     0x55de2dc4ca10+3764: [%337.5], env=e0.3
  void                    Deopt              !v    %346.0, DeadBranchReached@0x55de2d7bb0f0[Test#28], %73.1   !
BB236   <- [367]
  void                    Nop                !     
  lgl$-           %236.1 = %367.5
  goto BB187
BB184   <- [367]
  val?^ | miss    %184.0 = LdVar              eR    useInherited, e0.3
  val?            %184.1 = Force!<wrapped>    !v    %184.0, e0.3   <lgl+>
  lgl$#-          %184.2 = IsType                   %184.1 isA val+   <true>
  lgl$#-          %184.3 = IsType                   %184.1 isA lgl+
  void                    Branch                   %184.2 -> BB371 (if true) | BB372 (if false)
BB353   <- [345]
  val?-           %353.0 = CastType           d     dn %345.1   <env->
  val+            %353.1 = CallSafeBuiltin    wed   names(%353.0)    <str->
  void                    StVar              lW    allMethods, %353.1, e0.3
  val?^ | miss    %353.3 = LdVar              eR    match, e0.3
  lgl$#-          %353.4 = Identical                %353.3, function(x, table, nomatch=NA, incomparables=N|...>
  void                    Branch                   %353.4 -> BB357 (if true) | BB358 (if false)
BB354   <- [345]
  fs              %354.0 = FrameState         R     0x55de2dc4ca10+3984: [<blt names>, %345.1], env=e0.3
  void                    Deopt              !v    %354.0, Typecheck@0x55de2d7bb0f0[Type#249], %345.1   !
BB187   <- [236, 377]
  lgl$-           %187.0 = Phi                      %377.4:BB377, %236.1:BB236
  lgl$-           %187.1 = %187.0
  lgl$#-          %187.2 = CheckTrueFalse     e     %187.1
  void                    Branch                   %187.2 -> BB231 (if true) | BB190 (if false)
BB371   <- [184]
  val?^ | miss    %371.0 = LdVar              eR    i, e0.3
  lgl$#-          %371.1 = IsType                   %371.0 isA int$-
  void                    Branch                   %371.1 -> BB375 (if true) | BB376 (if false)
BB372   <- [184]
  void                    Nop                !     
  lgl$#-          %372.1 = %184.2
  dr              %372.2 = DeadBranchReached@0x55de2d7bb0f0[Test#18]
  goto BB185
BB357   <- [353]
  val?^ | miss    %357.0 = LdVar              eR    labels, e0.3
  lgl$#-          %357.1 = IsType                   %357.0 isA val?~- | miss
  void                    Branch                   %357.1 -> BB359 (if true) | BB360 (if false)
BB358   <- [353]
  void                    Nop                !     
  val?^ | miss    %358.1 = %353.3
  dr              %358.2 = CallTarget@0x55de2d7bb0f0[Call#86]
  goto BB76
BB231   <- [187]
  val?^ | miss    %231.0 = LdVar              eR    c, e0.3
  lgl$#-          %231.1 = Identical                <blt c>, %231.0   <true>
  void                    Branch                   %231.1 -> BB381 (if true) | BB382 (if false)
BB190   <- [187]
  (cls|spec|blt)  %190.0 = LdFun              !v    @, <0x55de2854ebd8>, e0.3
  prom-           %190.1 = MkArg                    unboundValue, .findInheritedMethods[0x55de34f8f4b0]_p69, e0.3
  prom-           %190.2 = MkArg                    unboundValue, .findInheritedMethods[0x55de34f8f4b0]_p70, e0.3
  val?            %190.3 = Call               !v    %190.0(%190.1, %190.2) e0.3   <str$+>
  val?            %190.4 = %190.3
  goto BB191
BB375   <- [371]
  int$-           %375.0 = CastType           d     dn %371.0
  void                    Branch                   %184.3 -> BB377 (if true) | BB378 (if false)
BB376   <- [371]
  void                    Nop                !     
  val?^ | miss    %376.1 = %371.0
  dr              %376.2 = Typecheck@0x55de2d7bb0f0[Type#162]
  goto BB185
BB185   <- [372, 376, 378]
  val?^ | miss    %185.0 = Phi                      %372.1:BB372, %376.1:BB376, %378.1:BB378
  val?^ | miss    %185.1 = %185.0
  dr              %185.2 = Phi                      %372.2:BB372, %376.2:BB376, %378.2:BB378
  dr              %185.3 = %185.2
  fs              %185.4 = FrameState         R     0x55de2dc4ca10+2350: [1L, %325.0, 3L, %367.5, %184.1], env=e0.3
  void                    Deopt              !v    %185.4, %185.3, %185.1   !
BB359   <- [357]
  val?~- | miss   %359.0 = CastType           d     dn %357.0
  val?-           %359.1 = Force!<value>            %359.0,    <str->
  val?^ | miss    %359.2 = LdVar              eR    .fillSignatures, e0.3
  lgl$#-          %359.3 = Identical                %359.2, function(sigs, n) <(rir::DispatchTable*)0x55de|...>
  void                    Branch                   %359.3 -> BB361 (if true) | BB362 (if false)
BB360   <- [357]
  void                    Nop                !     
  val?^ | miss    %360.1 = %357.0
  dr              %360.2 = Typecheck@0x55de2d7bb0f0[Type#251]
  goto BB76
BB76   <- [358, 360, 362]
  val?^ | miss    %76.0 = Phi                      %358.1:BB358, %360.1:BB360, %362.1:BB362
  val?^ | miss    %76.1 = %76.0
  dr              %76.2 = Phi                      %358.2:BB358, %360.2:BB360, %362.2:BB362
  dr              %76.3 = %76.2
  fs              %76.4 = FrameState         R     0x55de2dc4ca10+4020: [], env=e0.3
  void                    Deopt              !v    %76.4, %76.3, %76.1   !
BB381   <- [231]
  (cls|spec|blt)  %381.0 = LdFun              !v    @, <0x55de2854ebd8>, e0.3
  prom-           %381.1 = MkArg                    unboundValue, .findInheritedMethods[0x55de34f8f4b0]_p85, e0.3
  prom-           %381.2 = MkArg                    unboundValue, .findInheritedMethods[0x55de34f8f4b0]_p86, e0.3
  val?            %381.3 = Call               !v    %381.0(%381.1, %381.2) e0.3   <str$+>
  val?^ | miss    %381.4 = LdVar              eR    .eligibleSuperClasses, e0.3
  lgl$#-          %381.5 = Identical                %381.4, function(contains, simpleOnly) <(rir::Dispatch|...>
  void                    Branch                   %381.5 -> BB385 (if true) | BB386 (if false)
BB382   <- [231]
  fs              %382.0 = FrameState         R     0x55de2dc4ca10+2409: [1L, %325.0, 3L, %187.1], env=e0.3
  void                    Deopt              !v    %382.0, DeadBranchReached@0x55de2d7bb0f0[Test#19], %231.1   !
BB191   <- [190, 393]
  val?            %191.0 = Phi                      %190.4:BB190, %393.2:BB393
  val?            %191.1 = %191.0
  void                    StVar              lW    allLabels, %191.1, e0.3
  val?^ | miss    %191.3 = LdVar              eR    outerLabels, e0.3
  lgl$#-          %191.4 = Identical                %191.3, function(labels, new) <(rir::DispatchTable*)0x|...>
  void                    Branch                   %191.4 -> BB387 (if true) | BB388 (if false)
BB377   <- [375]
  lgl+            %377.0 = CastType           d     dn %184.1
  lgl$-           %377.1 = Extract2_1D        wed   %377.0, %375.0, elided   <lgl$->
  lgl$-           %377.2 = AsLogical                %377.1
  lgl$-           %377.3 = LOr                      %367.5, %377.2
  lgl$-           %377.4 = %377.3
  goto BB187
BB378   <- [375]
  void                    Nop                !     
  val?            %378.1 = %184.1
  dr              %378.2 = Typecheck@0x55de2d7bb0f0[Type#160]
  goto BB185
BB361   <- [359]
  prom-           %361.0 = MkArg                    unboundValue, .findInheritedMethods[0x55de34f8f4b0]_p22 (!refl), e0.3
  prom-           %361.1 = MkArg                    unboundValue, .findInheritedMethods[0x55de34f8f4b0]_p23, e0.3
  val?            %361.2 = StaticCall         !v    unknown--fromConstant[0x55de2ecae060](%361.0, %361.1) from function(sigs, n) <(rir::DispatchTable*)0x55de|...> { 0 1 } e0.3   <str->
  lgl$#-          %361.3 = IsType                   %361.2 isA val?+
  void                    Branch                   %361.3 -> BB365 (if true) | BB366 (if false)
BB362   <- [359]
  void                    Nop                !     
  val?^ | miss    %362.1 = %359.2
  dr              %362.2 = CallTarget@0x55de2d7bb0f0[Call#87]
  goto BB76
BB385   <- [381]
  prom-           %385.0 = MkArg                    unboundValue, .findInheritedMethods[0x55de34f8f4b0]_p87, e0.3
  prom-           %385.1 = MkArg                    unboundValue, .findInheritedMethods[0x55de34f8f4b0]_p90, e0.3
  val?            %385.2 = StaticCall         !v    .eligibleSuperClasses[0x55de2ec3e800](%385.0, %385.1) e0.3   <(nil|str)->
  lgl$#-          %385.3 = IsType                   %385.2 isA val?-
  lgl$#-          %385.4 = IsType                   %381.3 isA val?+
  void                    Branch                   %385.4 -> BB391 (if true) | BB392 (if false)
BB386   <- [381]
  fs              %386.0 = FrameState         R     0x55de2dc4ca10+2569: [1L, %325.0, 3L, <blt c>, %381.3], env=e0.3
  void                    Deopt              !v    %386.0, CallTarget@0x55de2d7bb0f0[Call#61], %381.4   !
BB387   <- [191]
  prom-           %387.0 = MkArg                    unboundValue, .findInheritedMethods[0x55de34f8f4b0]_p71, e0.3
  prom-           %387.1 = MkArg                    unboundValue, .findInheritedMethods[0x55de34f8f4b0]_p72 (!refl), e0.3
  val?            %387.2 = StaticCall         !v    outerLabels[0x55de2ac30d30](%387.0, %387.1) e0.3   <str->
  void                    StVar              lW    labels, %387.2, e0.3
  val?^ | miss    %387.4 = LdVar              eR    c, e0.3
  lgl$#-          %387.5 = Identical                <blt c>, %387.4   <true>
  void                    Branch                   %387.5 -> BB397 (if true) | BB398 (if false)
BB388   <- [191]
  fs              %388.0 = FrameState         R     0x55de2dc4ca10+2653: [1L, %325.0, 3L], env=e0.3
  void                    Deopt              !v    %388.0, CallTarget@0x55de2d7bb0f0[Call#63], %191.3   !
BB365   <- [361]
  val?+           %365.0 = CastType           d     dn %361.2   <str->
  val+            %365.1 = CallSafeBuiltin    wed   match(%359.1, %365.0, NA, nil)    <int->
  void                    StVar              lW    m, %365.1, e0.3
  lgl$#-          %365.3 = IsType                   %365.1 isA int-
  val?^ | miss    %365.4 = LdVar              eR    is.na, e0.3
  lgl$#-          %365.5 = Identical                <blt is.na>, %365.4   <true>
  void                    Branch                   %365.5 -> BB369 (if true) | BB370 (if false)
BB366   <- [361]
  fs              %366.0 = FrameState         R     0x55de2dc4ca10+4057: [], env=e0.3
  prom-           %366.1 = MkArg                    unboundValue, .findInheritedMethods[0x55de34f8f4b0]_p21, e0.3
  val?^           %366.2 = CastType                 up %366.1
  prom-           %366.3 = MkArg                    %359.1, .findInheritedMethods[0x55de34f8f4b0]_p20 (!refl), e0.3
  val?~           %366.4 = CastType                 up %366.3
  env             e366.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%366.2, x=%366.4, parent=R_BaseNamespace, context 0
  fs              %366.6 = FrameState         R     0x55de28d63d40+23: [%359.1], env=e366.5, next=%366.0
  fs              %366.7 = FrameState         R     0x55de28fbea10+37(pr): [%361.2], env=e0.3, next=%366.6
  void                    Deopt              !v    %366.7, Typecheck@0x55de28db6cb0[Type#1], %361.2   !
BB391   <- [385]
  val?+           %391.0 = CastType           d     dn %381.3   <str$+>
  void                    Branch                   %385.3 -> BB393 (if true) | BB394 (if false)
BB392   <- [385]
  void                    Nop                !     
  val?            %392.1 = %381.3
  dr              %392.2 = Typecheck@0x55de2d7bb0f0[Type#177]
  goto BB234
BB397   <- [387]
  val?^ | miss    %397.0 = LdVar              eR    supersList, e0.3
  lgl$#-          %397.1 = IsType                   %397.0 isA val?~- | miss
  void                    Branch                   %397.1 -> BB399 (if true) | BB400 (if false)
BB398   <- [387]
  void                    Nop                !     
  lgl$#-          %398.1 = %387.5
  dr              %398.2 = DeadBranchReached@0x55de2d7bb0f0[Test#20]
  goto BB194
BB369   <- [365]
  void                    Branch                   %365.3 -> BB373 (if true) | BB374 (if false)
BB370   <- [365]
  void                    Nop                !     
  lgl$#-          %370.1 = %365.5
  dr              %370.2 = DeadBranchReached@0x55de2d7bb0f0[Test#29]
  goto BB80
BB393   <- [391]
  val?-           %393.0 = CastType           d     dn %385.2   <(nil|str)->
  (list|sym|char|lgl|int|real|str|vec|complex|raw|cls|spec|blt|prom|_|code|env|ast|expressions|dots|other)+ %393.1 = CallSafeBuiltin    wed   c(%391.0, %393.0, "ANY")    <str->
  (list|sym|char|lgl|int|real|str|vec|complex|raw|cls|spec|blt|prom|_|code|env|ast|expressions|dots|other)+ %393.2 = %393.1
  goto BB191
BB394   <- [391]
  void                    Nop                !     
  val?            %394.1 = %385.2
  dr              %394.2 = Typecheck@0x55de2d7bb0f0[Type#182]
  goto BB234
BB234   <- [392, 394]
  val?^ | miss    %234.0 = Phi                      %392.1:BB392, %394.1:BB394
  val?^ | miss    %234.1 = %234.0
  dr              %234.2 = Phi                      %392.2:BB392, %394.2:BB394
  dr              %234.3 = %234.2
  fs              %234.4 = FrameState         R     0x55de2dc4ca10+2611: [1L, %325.0, 3L, <blt c>, %381.3, %385.2], env=e0.3
  void                    Deopt              !v    %234.4, %234.3, %234.1   !
BB399   <- [397]
  val?~- | miss   %399.0 = CastType           d     dn %397.0
  val?-           %399.1 = Force!<value>            %399.0,    <vec$->
  val?^ | miss    %399.2 = LdVar              eR    list, e0.3
  lgl$#-          %399.3 = Identical                <blt list>, %399.2   <true>
  void                    Branch                   %399.3 -> BB401 (if true) | BB402 (if false)
BB400   <- [397]
  void                    Nop                !     
  val?^ | miss    %400.1 = %397.0
  dr              %400.2 = Typecheck@0x55de2d7bb0f0[Type#190]
  goto BB194
BB194   <- [398, 400, 402, 406]
  val?^ | miss    %194.0 = Phi                      %398.1:BB398, %400.1:BB400, %402.1:BB402, %406.1:BB406
  val?^ | miss    %194.1 = %194.0
  dr              %194.2 = Phi                      %398.2:BB398, %400.2:BB400, %402.2:BB402, %406.2:BB406
  dr              %194.3 = %194.2
  fs              %194.4 = FrameState         R     0x55de2dc4ca10+2704: [1L, %325.0, 3L], env=e0.3
  void                    Deopt              !v    %194.4, %194.3, %194.1   !
BB373   <- [369]
  int-            %373.0 = CastType           d     dn %365.1
  lgl-            %373.1 = CallSafeBuiltin    wed   is.na(%373.0)    <lgl->
  lgl-            %373.2 = Not                wed   %373.1, elided
  void                    StVar              lW    found, %373.2, e0.3
  val?^ | miss    %373.4 = LdVar              eR    mget, e0.3
  lgl$#-          %373.5 = Identical                %373.4, function(x, envir=as.environment(-(1L)), mode=|...>
  void                    Branch                   %373.5 -> BB379 (if true) | BB380 (if false)
BB374   <- [369]
  void                    Nop                !     
  val+            %374.1 = %365.1
  dr              %374.2 = Typecheck@0x55de2d7bb0f0[Type#256]
  goto BB80
BB80   <- [370, 374]
  val?^ | miss    %80.0 = Phi                      %370.1:BB370, %374.1:BB374
  val?^ | miss    %80.1 = %80.0
  dr              %80.2 = Phi                      %370.2:BB370, %374.2:BB374
  dr              %80.3 = %80.2
  fs              %80.4 = FrameState         R     0x55de2dc4ca10+4071: [], env=e0.3
  void                    Deopt              !v    %80.4, %80.3, %80.1   !
BB401   <- [399]
  val?^ | miss    %401.0 = LdVar              eR    allLabels, e0.3
  lgl$#-          %401.1 = IsType                   %401.0 isA val?~+ | miss
  void                    Branch                   %401.1 -> BB405 (if true) | BB406 (if false)
BB402   <- [399]
  void                    Nop                !     
  lgl$#-          %402.1 = %399.3
  dr              %402.2 = DeadBranchReached@0x55de2d7bb0f0[Test#21]
  goto BB194
BB379   <- [373]
  prom-           %379.0 = MkArg                    unboundValue, .findInheritedMethods[0x55de34f8f4b0]_p25, e0.3
  prom-           %379.1 = MkArg                    unboundValue, .findInheritedMethods[0x55de34f8f4b0]_p29, e0.3
  ct              %379.2 = PushContext        lCL   %379.0, %379.1, mget([(allMethods, [(m, found)), table), function(x, envir=as.environment(-(1L)), mode=|...>, e0.3
  val?^           %379.3 = CastType                 up %379.1
  val?^           %379.4 = CastType                 up %379.0
  env             e379.5 = MkEnv              l     x=%379.4, envir=%379.3, mode(miss)="any", ifnotfound(miss)=missingArg, inherits(miss)=false, parent=R_BaseNamespace, context 1
  cls             %379.6 = MkCls                    mget@133, e379.5
  val?            %379.7 = Force!<lazy>       !vL   %379.4, e379.5   <str+>
  val?            %379.8 = Force!<lazy>       !vL   %379.3, e379.5   <env->
  val?^ | miss    %379.9 = LdVar              eR    list, e379.5
  lgl$#-          %379.10 = Identical                <blt list>, %379.9   <true>
  void                    Branch                   %379.10 -> BB383 (if true) | BB384 (if false)
BB380   <- [373]
  fs              %380.0 = FrameState         R     0x55de2dc4ca10+4177: [], env=e0.3
  void                    Deopt              !v    %380.0, CallTarget@0x55de2d7bb0f0[Call#90], %373.4   !
BB405   <- [401]
  val?~+ | miss   %405.0 = CastType           d     dn %401.0
  val?+           %405.1 = Force!<value>            %405.0,    <str+>
  val+            %405.2 = CallSafeBuiltin    wed   list(%405.1)    <vec$->
  val+            %405.3 = CallSafeBuiltin    wed   c(%399.1, %405.2)    <vec->
  void                    StVar              lW    supersList, %405.3, e0.3
  int$#-          %405.5 = 3L
  goto BB196
BB406   <- [401]
  void                    Nop                !     
  val?^ | miss    %406.1 = %401.0
  dr              %406.2 = Typecheck@0x55de2d7bb0f0[Type#192]
  goto BB194
BB383   <- [379]
  val+            %383.0 = CallSafeBuiltin    wed   list(%379.6)    <vec$->
  val?            %383.1 = CallBuiltin        !v    mget(%379.7, %379.8, "any", %383.0, false) e379.5
  val?            %383.2 = PopContext         C     %383.1, %379.2   <vec+>
  void                    StVar              lW    methods, %383.2, e0.3
  val?^ | miss    %383.4 = LdVar              eR    verbose, e0.3
  val?            %383.5 = Force!<wrapped>    !v    %383.4, e0.3   <lgl$->
  lgl$#-          %383.6 = CheckTrueFalse     we    %383.5
  void                    Branch                   %383.6 -> BB177 (if true) | BB88 (if false)
BB384   <- [379]
  fs              %384.0 = FrameState         R     0x55de2dc4ca10+4214: [], env=e0.3
  fs              %384.1 = FrameState         R     0x55de2a88b970+37: [%379.7, %379.8, "any"], env=e379.5, next=%384.0
  void                    Deopt              !v    %384.1, DeadBranchReached@0x55de2a45bee0[Test#0], %379.10   !
BB196   <- [405, 507]
  int$#-          %196.0 = Phi                      %405.5:BB405, %507.5:BB507
  int$#-          %196.1 = %196.0
  lgl$#-          %196.2 = Neq                d     %325.0, %196.1, elided
  void                    Branch                   %196.2 -> BB198 (if true) | BB197 (if false)
BB177   <- [383]
  (cls|spec|blt)  %177.0 = LdFun              !v    cat, e0.3
  fs              %177.1 = FrameState         R     0x55de2dc4ca10+4258: [%177.0], env=e0.3
  void                    Deopt              !v    %177.1, DeadCall@0x55de2d7bb0f0[Call#91], %177.0   !
BB88   <- [383]
  val?^ | miss    %88.0 = LdVar              eR    hasGroup, e0.3
  lgl$#-          %88.1 = IsType                   %88.0 isA lgl$-
  void                    Branch                   %88.1 -> BB389 (if true) | BB390 (if false)
BB198   <- [196]
  void                    StVar              lW    i, %196.1, e0.3
  int$#-          %198.1 = Add                d     %196.1, 1L, elided
  val?^ | miss    %198.2 = LdVar              eR    getClass, e0.3
  lgl$#-          %198.3 = Identical                %198.2, function(Class, .Force=FALSE, where=.classEnv(|...>
  void                    Branch                   %198.3 -> BB413 (if true) | BB414 (if false)
BB197   <- [196]
  void                    Nop                !     
  goto BB66
BB389   <- [88]
  lgl$-           %389.0 = CastType           d     dn %88.0
  lgl$#-          %389.1 = CheckTrueFalse     e     %389.0
  void                    Branch                   %389.1 -> BB176 (if true) | BB89 (if false)
BB390   <- [88]
  fs              %390.0 = FrameState         R     0x55de2dc4ca10+4243: [%383.6], env=e0.3
  void                    Deopt              !v    %390.0, Typecheck@0x55de2d7bb0f0[Type#275], %88.0   !
BB413   <- [198]
  prom-           %413.0 = MkArg                    unboundValue, .findInheritedMethods[0x55de34f8f4b0]_p73, e0.3
  prom-           %413.1 = MkArg                    unboundValue, .findInheritedMethods[0x55de34f8f4b0]_p75, e0.3
  val?            %413.2 = StaticCall         !v    getClass[0x55de355c39c0](%413.0, true, %413.1) { 0 2n 1n } e0.3   <other>
  val?^ | miss    %413.3 = LdVar              eR    classDefs !upd, e0.3
  lgl$#-          %413.4 = IsType                   %413.3 isA val?~- | miss
  void                    Branch                   %413.4 -> BB415 (if true) | BB416 (if false)
BB414   <- [198]
  fs              %414.0 = FrameState         R     0x55de2dc4ca10+2927: [1L, %325.0, %196.1], env=e0.3
  void                    Deopt              !v    %414.0, CallTarget@0x55de2d7bb0f0[Call#67], %198.2   !
BB176   <- [389]
  (cls|spec|blt)  %176.0 = LdFun              !v    .getGroupMethods, e0.3
  fs              %176.1 = FrameState         R     0x55de2dc4ca10+4377: [%176.0], env=e0.3
  void                    Deopt              !v    %176.1, DeadCall@0x55de2d7bb0f0[Call#95], %176.0   !
BB89   <- [389]
  (cls|spec|blt)  %89.0 = LdFun              !v    rep, <0x55de285639b0>, e0.3
  prom-           %89.1 = MkArg                    unboundValue, .findInheritedMethods[0x55de34f8f4b0]_p30, e0.3
  val?            %89.2 = Call               !v    %89.0(false, %89.1) e0.3   <lgl->
  void                    StVar              lW    fromGroup, %89.2, e0.3
  val?^ | miss    %89.4 = LdVar              eR    .duplicateClassesExist, e0.3
  lgl$#-          %89.5 = Identical                %89.4, function(on) <(rir::DispatchTable*)0x55de2cdf4|...>
  void                    Branch                   %89.5 -> BB395 (if true) | BB396 (if false)
BB415   <- [413]
  val?~- | miss   %415.0 = CastType           d     dn %413.3
  val?-           %415.1 = Force!<value>            %415.0,    <vec->
  val?^ | miss    %415.2 = LdVar              eR    i, e0.3
  lgl$#-          %415.3 = IsType                   %415.2 isA int$-
  void                    Branch                   %415.3 -> BB419 (if true) | BB420 (if false)
BB416   <- [413]
  void                    Nop                !     
  val?^ | miss    %416.1 = %413.3
  dr              %416.2 = Typecheck@0x55de2d7bb0f0[Type#201]
  goto BB201
BB395   <- [89]
  val?            %395.0 = StaticCall         !v    .duplicateClassesExist[0x55de30809760]() e0.3   <lgl$->
  lgl$#-          %395.1 = IsType                   %395.0 isA lgl$-
  void                    Branch                   %395.1 -> BB403 (if true) | BB404 (if false)
BB396   <- [89]
  fs              %396.0 = FrameState         R     0x55de2dc4ca10+4367: [], env=e0.3
  void                    Deopt              !v    %396.0, CallTarget@0x55de2d7bb0f0[Call#108], %89.4   !
BB419   <- [415]
  int$-           %419.0 = CastType           d     dn %415.2
  val?            %419.1 = Subassign2_1D      !v    %413.2, %415.1, %419.0, e0.3
  void                    StVar              lW    classDefs, %419.1, e0.3
  void                    StVar              lW    cc, %413.2, e0.3
  lgl$-           %419.4 = Missing            eR    useInherited, e0.3
  lgl$-           %419.5 = AsLogical                %419.4
  lgl$#-          %419.6 = Identical                %419.5, true
  void                    Branch                   %419.6 -> BB230 (if true) | BB203 (if false)
BB420   <- [415]
  void                    Nop                !     
  val?^ | miss    %420.1 = %415.2
  dr              %420.2 = Typecheck@0x55de2d7bb0f0[Type#202]
  goto BB201
BB201   <- [416, 420]
  val?^ | miss    %201.0 = Phi                      %416.1:BB416, %420.1:BB420
  val?^ | miss    %201.1 = %201.0
  dr              %201.2 = Phi                      %416.2:BB416, %420.2:BB420
  dr              %201.3 = %201.2
  fs              %201.4 = FrameState         R     0x55de2dc4ca10+2988: [1L, %325.0, %198.1, %413.2], env=e0.3
  void                    Deopt              !v    %201.4, %201.3, %201.1   !
BB403   <- [395]
  lgl$-           %403.0 = CastType           d     dn %395.0
  lgl$#-          %403.1 = CheckTrueFalse     e     %403.0
  void                    Branch                   %403.1 -> BB175 (if true) | BB94 (if false)
BB404   <- [395]
  void                    Nop                !     
  val?            %404.1 = %395.0
  dr              %404.2 = Typecheck@0x55de2d7bb0f0[Type#304]
  goto BB92
BB230   <- [419]
  void                    Nop                !     
  lgl$-           %230.1 = %419.5
  goto BB206
BB203   <- [419]
  val?^ | miss    %203.0 = LdVar              eR    useInherited, e0.3
  val?            %203.1 = Force!             !v    %203.0, e0.3   <val?_>
  lgl$#-          %203.2 = IsType                   %203.1 isA val+   <@?>
  void                    Branch                   %203.2 -> BB229 (if true) | BB204 (if false)
BB175   <- [403]
  (cls|spec|blt)  %175.0 = LdFun              !v    integer, e0.3
  fs              %175.1 = FrameState         R     0x55de2dc4ca10+4848: [%175.0], env=e0.3
  void                    Deopt              !v    %175.1, DeadCall@0x55de2d7bb0f0[Call#109], %175.0   !
BB94   <- [403]
  val?^ | miss    %94.0 = LdVar              eR    doExcluded, e0.3
  lgl$#-          %94.1 = IsType                   %94.0 isA lgl$-
  void                    Branch                   %94.1 -> BB407 (if true) | BB408 (if false)
BB92   <- [404, 408, 410, 412, 418, 422, 424]
  val?^ | miss    %92.0 = Phi                      %404.1:BB404, %408.1:BB408, %410.1:BB410, %412.1:BB412, %418.1:BB418, %422.1:BB422, %424.1:BB424
  val?^ | miss    %92.1 = %92.0
  dr              %92.2 = Phi                      %404.2:BB404, %408.2:BB408, %410.2:BB410, %412.2:BB412, %418.2:BB418, %422.2:BB422, %424.2:BB424
  dr              %92.3 = %92.2
  fs              %92.4 = FrameState         R     0x55de2dc4ca10+4827: [%395.0], env=e0.3
  void                    Deopt              !v    %92.4, %92.3, %92.1   !
BB206   <- [230, 205]
  lgl$-           %206.0 = Phi                      %205.5:BB205, %230.1:BB230
  lgl$-           %206.1 = %206.0
  lgl$#-          %206.2 = CheckTrueFalse     e     %206.1
  void                    Branch                   %206.2 -> BB210 (if true) | BB209 (if false)
BB229   <- [203]
  val?^ | miss    %229.0 = LdVar              eR    i, e0.3
  val?            %229.1 = Force!             !v    %229.0, e0.3   <val?_>
  val?            %229.2 = %229.1
  goto BB205
BB204   <- [203]
  prom-           %204.0 = MkArg                    unboundValue, .findInheritedMethods[0x55de34f8f4b0]_p84, e0.3
  prom-           %204.1 = %204.0
  goto BB205
BB407   <- [94]
  lgl$-           %407.0 = CastType           d     dn %94.0
  lgl$#-          %407.1 = CheckTrueFalse     e     %407.0
  void                    Branch                   %407.1 -> BB168 (if true) | BB95 (if false)
BB408   <- [94]
  void                    Nop                !     
  val?^ | miss    %408.1 = %94.0
  dr              %408.2 = Typecheck@0x55de2d7bb0f0[Type#363]
  goto BB92
BB210   <- [206]
  val?^ | miss    %210.0 = LdVar              eR    c, e0.3
  lgl$#-          %210.1 = Identical                <blt c>, %210.0   <true>
  void                    Branch                   %210.1 -> BB429 (if true) | BB430 (if false)
BB209   <- [206]
  (cls|spec|blt)  %209.0 = LdFun              !v    @, e0.3
  fs              %209.1 = FrameState         R     0x55de2dc4ca10+3135: [1L, %325.0, %198.1, %209.0], env=e0.3
  void                    Deopt              !v    %209.1, DeadCall@0x55de2d7bb0f0[Call#68], %209.0   !
BB205   <- [204, 229]
  val?            %205.0 = Phi                      %229.2:BB229, %204.1:BB204
  val?            %205.1 = %205.0
  val?            %205.2 = Extract2_1D        !v    %203.1, %205.1, e0.3   <val?_>
  lgl$-           %205.3 = AsLogical          e     %205.2
  lgl$-           %205.4 = LOr                      %419.5, %205.3
  lgl$-           %205.5 = %205.4
  goto BB206
BB168   <- [407]
  val?^ | miss    %168.0 = LdVar              eR    methods, e0.3
  lgl$#-          %168.1 = IsType                   %168.0 isA val?~+ | miss
  void                    Branch                   %168.1 -> BB409 (if true) | BB410 (if false)
BB95   <- [407]
  void                    Nop                !     
  goto BB96
BB429   <- [210]
  (cls|spec|blt)  %429.0 = LdFun              !v    @, <0x55de2854ebd8>, e0.3
  prom-           %429.1 = MkArg                    unboundValue, .findInheritedMethods[0x55de34f8f4b0]_p76, e0.3
  prom-           %429.2 = MkArg                    unboundValue, .findInheritedMethods[0x55de34f8f4b0]_p77, e0.3
  val?            %429.3 = Call               !v    %429.0(%429.1, %429.2) e0.3   <str$+>
  val?^ | miss    %429.4 = LdVar              eR    .eligibleSuperClasses, e0.3
  lgl$#-          %429.5 = Identical                %429.4, function(contains, simpleOnly) <(rir::Dispatch|...>
  void                    Branch                   %429.5 -> BB431 (if true) | BB432 (if false)
BB430   <- [210]
  fs              %430.0 = FrameState         R     0x55de2dc4ca10+3124: [1L, %325.0, %198.1, %206.1], env=e0.3
  void                    Deopt              !v    %430.0, DeadBranchReached@0x55de2d7bb0f0[Test#24], %210.1   !
BB409   <- [168]
  val?~+ | miss   %409.0 = CastType           d     dn %168.0
  val?+           %409.1 = Force!<value>            %409.0,    <vec+>
  lgl$#-          %409.2 = IsType                   %409.1 isA val+   <true>
  void                    Branch                   %409.2 -> BB411 (if true) | BB412 (if false)
BB410   <- [168]
  void                    Nop                !     
  val?^ | miss    %410.1 = %168.0
  dr              %410.2 = Typecheck@0x55de2d7bb0f0[Type#376]
  goto BB92
BB96   <- [95, 455]
  val?^ | miss    %96.0 = LdVar              eR    length, e0.3
  lgl$#-          %96.1 = Identical                <blt length>, %96.0   <true>
  void                    Branch                   %96.1 -> BB425 (if true) | BB426 (if false)
BB431   <- [429]
  prom-           %431.0 = MkArg                    unboundValue, .findInheritedMethods[0x55de34f8f4b0]_p78, e0.3
  prom-           %431.1 = MkArg                    unboundValue, .findInheritedMethods[0x55de34f8f4b0]_p81, e0.3
  val?            %431.2 = StaticCall         !v    .eligibleSuperClasses[0x55de2ec3e800](%431.0, %431.1) e0.3   <(nil|str)->
  lgl$#-          %431.3 = IsType                   %431.2 isA val?-
  lgl$#-          %431.4 = IsType                   %429.3 isA val?+
  void                    Branch                   %431.4 -> BB441 (if true) | BB442 (if false)
BB432   <- [429]
  fs              %432.0 = FrameState         R     0x55de2dc4ca10+3284: [1L, %325.0, %198.1, <blt c>, %429.3], env=e0.3
  void                    Deopt              !v    %432.0, CallTarget@0x55de2d7bb0f0[Call#74], %429.4   !
BB411   <- [409]
  val?^ | miss    %411.0 = LdVar              eR    is.na, e0.3
  lgl$#-          %411.1 = Identical                <blt is.na>, %411.0   <true>
  void                    Branch                   %411.1 -> BB417 (if true) | BB418 (if false)
BB412   <- [409]
  void                    Nop                !     
  lgl$#-          %412.1 = %409.2
  dr              %412.2 = DeadBranchReached@0x55de2d7bb0f0[Test#48]
  goto BB92
BB425   <- [96]
  val?^ | miss    %425.0 = LdVar              eR    methods, e0.3
  lgl$#-          %425.1 = IsType                   %425.0 isA val?~+ | miss
  void                    Branch                   %425.1 -> BB427 (if true) | BB428 (if false)
BB426   <- [96]
  void                    Nop                !     
  lgl$#-          %426.1 = %96.1
  dr              %426.2 = DeadBranchReached@0x55de2d7bb0f0[Test#50]
  goto BB97
BB441   <- [431]
  val?+           %441.0 = CastType           d     dn %429.3   <str$+>
  void                    Branch                   %431.3 -> BB449 (if true) | BB450 (if false)
BB442   <- [431]
  void                    Nop                !     
  val?            %442.1 = %429.3
  dr              %442.2 = Typecheck@0x55de2d7bb0f0[Type#220]
  goto BB213
BB417   <- [411]
  val?^ | miss    %417.0 = LdVar              eR    match, e0.3
  lgl$#-          %417.1 = Identical                %417.0, function(x, table, nomatch=NA, incomparables=N|...>
  void                    Branch                   %417.1 -> BB421 (if true) | BB422 (if false)
BB418   <- [411]
  void                    Nop                !     
  lgl$#-          %418.1 = %411.1
  dr              %418.2 = DeadBranchReached@0x55de2d7bb0f0[Test#49]
  goto BB92
BB427   <- [425]
  val?~+ | miss   %427.0 = CastType           d     dn %425.0
  val?+           %427.1 = Force!<value>            %427.0,    <vec+>
  (int|real)$-    %427.2 = CallSafeBuiltin    wed   length(%427.1)    <int$->
  lgl$#-          %427.3 = IsType                   %427.2 isA int$-
  void                    Branch                   %427.3 -> BB435 (if true) | BB436 (if false)
BB428   <- [425]
  void                    Nop                !     
  val?^ | miss    %428.1 = %425.0
  dr              %428.2 = Typecheck@0x55de2d7bb0f0[Type#384]
  goto BB97
BB97   <- [426, 428]
  val?^ | miss    %97.0 = Phi                      %426.1:BB426, %428.1:BB428
  val?^ | miss    %97.1 = %97.0
  dr              %97.2 = Phi                      %426.2:BB426, %428.2:BB428
  dr              %97.3 = %97.2
  fs              %97.4 = FrameState         R     0x55de2dc4ca10+6458: [], env=e0.3
  void                    Deopt              !v    %97.4, %97.3, %97.1   !
BB449   <- [441]
  val?-           %449.0 = CastType           d     dn %431.2   <(nil|str)->
  (list|sym|char|lgl|int|real|str|vec|complex|raw|cls|spec|blt|prom|_|code|env|ast|expressions|dots|other)+ %449.1 = CallSafeBuiltin    wed   c(%441.0, %449.0, "ANY")    <str->
  void                    StVar              lW    allLabels, %449.1, e0.3
  val?^ | miss    %449.3 = LdVar              eR    outerLabels, e0.3
  lgl$#-          %449.4 = Identical                %449.3, function(labels, new) <(rir::DispatchTable*)0x|...>
  void                    Branch                   %449.4 -> BB451 (if true) | BB452 (if false)
BB450   <- [441]
  void                    Nop                !     
  val?            %450.1 = %431.2
  dr              %450.2 = Typecheck@0x55de2d7bb0f0[Type#225]
  goto BB213
BB213   <- [442, 450]
  val?^ | miss    %213.0 = Phi                      %442.1:BB442, %450.1:BB450
  val?^ | miss    %213.1 = %213.0
  dr              %213.2 = Phi                      %442.2:BB442, %450.2:BB450
  dr              %213.3 = %213.2
  fs              %213.4 = FrameState         R     0x55de2dc4ca10+3326: [1L, %325.0, %198.1, <blt c>, %429.3, %431.2], env=e0.3
  void                    Deopt              !v    %213.4, %213.3, %213.1   !
BB421   <- [417]
  val?^ | miss    %421.0 = LdVar              eR    names, e0.3
  lgl$#-          %421.1 = Identical                %421.0, <blt names>
  void                    Branch                   %421.1 -> BB423 (if true) | BB424 (if false)
BB422   <- [417]
  void                    Nop                !     
  val?^ | miss    %422.1 = %417.0
  dr              %422.2 = CallTarget@0x55de2d7bb0f0[Call#129]
  goto BB92
BB435   <- [427]
  int$-           %435.0 = CastType           d     dn %427.2
  lgl$-           %435.1 = Gt                 d     %435.0, 1L, elided   <lgl$->
  lgl$#-          %435.2 = CheckTrueFalse     e     %435.1
  void                    Branch                   %435.2 -> BB155 (if true) | BB101 (if false)
BB436   <- [427]
  void                    Nop                !     
  (int|real)$-    %436.1 = %427.2
  dr              %436.2 = Typecheck@0x55de2d7bb0f0[Type#385]
  goto BB99
BB451   <- [449]
  prom-           %451.0 = MkArg                    unboundValue, .findInheritedMethods[0x55de34f8f4b0]_p83 (!refl), e0.3
  val?^           %451.1 = CastType                 up %451.0
  val?^ | miss    %451.2 = LdVar              eR    length, <env 0x55de28b56378>
  lgl$#-          %451.3 = Identical                <blt length>, %451.2   <true>
  void                    Branch                   %451.3 -> BB453 (if true) | BB454 (if false)
BB452   <- [449]
  void                    Nop                !     
  val?^ | miss    %452.1 = %449.3
  dr              %452.2 = CallTarget@0x55de2d7bb0f0[Call#76]
  goto BB215
BB423   <- [421]
  val+            %423.0 = CallSafeBuiltin    wed   names(%409.1)    <str->
  val?^ | miss    %423.1 = LdVar              eR    as.character, e0.3
  lgl$#-          %423.2 = Identical                %423.1, <blt as.character>
  void                    Branch                   %423.2 -> BB433 (if true) | BB434 (if false)
BB424   <- [421]
  void                    Nop                !     
  val?^ | miss    %424.1 = %421.0
  dr              %424.2 = CallTarget@0x55de2d7bb0f0[Call#130]
  goto BB92
BB155   <- [435]
  val?^ | miss    %155.0 = LdVar              eR    paste, e0.3
  lgl$#-          %155.1 = Identical                %155.0, function(..., sep=" ", collapse=NULL, recycle0|...>
  void                    Branch                   %155.1 -> BB437 (if true) | BB438 (if false)
BB101   <- [435]
  void                    Nop                !     
  goto BB102
BB99   <- [436, 438]
  val?^ | miss    %99.0 = Phi                      %436.1:BB436, %438.1:BB438
  val?^ | miss    %99.1 = %99.0
  dr              %99.2 = Phi                      %436.2:BB436, %438.2:BB438
  dr              %99.3 = %99.2
  fs              %99.4 = FrameState         R     0x55de2dc4ca10+6549: [%427.2], env=e0.3
  void                    Deopt              !v    %99.4, %99.3, %99.1   !
BB453   <- [451]
  val?^ | miss    %453.0 = LdVar              eR    labels, e0.3
  val?            %453.1 = Force!<value>      !v    %453.0, e0.3   <str->
  prom-           %453.2 = MkArg                    %453.1, .findInheritedMethods[0x55de34f8f4b0]_p82 (!refl), e0.3
  val?~           %453.3 = CastType                 up %453.2
  lgl$#-          %453.4 = IsType                   %453.1 isA val?-
  void                    Branch                   %453.4 -> BB459 (if true) | BB460 (if false)
BB454   <- [451]
  void                    Nop                !     
  lgl$#-          %454.1 = %451.3
  dr              %454.2 = DeadBranchReached@0x55de3502fb78[Test#0]
  goto BB215
BB215   <- [452, 454]
  val?^ | miss    %215.0 = Phi                      %452.1:BB452, %454.1:BB454
  val?^ | miss    %215.1 = %215.0
  dr              %215.2 = Phi                      %452.2:BB452, %454.2:BB454
  dr              %215.3 = %215.2
  fs              %215.4 = FrameState         R     0x55de2dc4ca10+3368: [1L, %325.0, %198.1], env=e0.3
  void                    Deopt              !v    %215.4, %215.3, %215.1   !
BB433   <- [423]
  val?^ | miss    %433.0 = LdVar              eR    excluded, e0.3
  val?            %433.1 = Force!<wrapped>    !v    %433.0, e0.3   <str$->
  val?            %433.2 = CallBuiltin        !v    as.character(%433.1) e0.3   <str$->
  lgl$#-          %433.3 = IsType                   %433.2 isA val?+
  void                    Branch                   %433.3 -> BB443 (if true) | BB444 (if false)
BB434   <- [423]
  fs              %434.0 = FrameState         R     0x55de2dc4ca10+6415: [%409.1, <blt is.na>], env=e0.3
  prom-           %434.1 = MkArg                    unboundValue, .findInheritedMethods[0x55de34f8f4b0]_p64, e0.3
  val?^           %434.2 = CastType                 up %434.1
  prom-           %434.3 = MkArg                    unboundValue, .findInheritedMethods[0x55de34f8f4b0]_p62, e0.3
  val?^           %434.4 = CastType                 up %434.3
  env             e434.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%434.2, x=%434.4, parent=R_BaseNamespace, context 0
  fs              %434.6 = FrameState         R     0x55de28d63d40+9: [], env=e434.5, next=%434.0
  fs              %434.7 = FrameState         R     0x55de2bf2c6f0+32(pr): [%423.0], env=e0.3, next=%434.6
  void                    Deopt              !v    %434.7, CallTarget@0x55de2d7bb0f0[Call#131], %423.1   !
BB437   <- [155]
  prom-           %437.0 = MkArg                    unboundValue, .findInheritedMethods[0x55de34f8f4b0]_p57, e0.3
  dots-           %437.1 = DotsList           l     %437.0
  val?^ | miss    %437.2 = CastType                 up %437.0
  env             e437.3 = MkEnv              l     ...=%437.1, sep(miss)=" ", collapse="#", recycle0(miss)=false, parent=R_BaseNamespace, context 0
  val?            %437.4 = Force!             !vL   %437.2, e437.3
  val+            %437.5 = CallSafeBuiltin    wed   list(%437.4)    <vec->
  val+            %437.6 = CallSafeBuiltin    wed   paste(%437.5, " ", "#", false)    <str$->
  void                    StVar              lW    defaultLabel, %437.6, e0.3
  val?^ | miss    %437.8 = LdVar              eR    match, e0.3
  lgl$#-          %437.9 = Identical                %437.8, function(x, table, nomatch=NA, incomparables=N|...>
  void                    Branch                   %437.9 -> BB439 (if true) | BB440 (if false)
BB438   <- [155]
  void                    Nop                !     
  val?^ | miss    %438.1 = %155.0
  dr              %438.2 = CallTarget@0x55de2d7bb0f0[Call#133]
  goto BB99
BB102   <- [101, 164, 503]
  val?^ | miss    %102.0 = LdVar              eR    length, e0.3
  lgl$#-          %102.1 = Identical                <blt length>, %102.0   <true>
  void                    Branch                   %102.1 -> BB457 (if true) | BB458 (if false)
BB459   <- [453]
  val?-           %459.0 = CastType           d     dn %453.1   <str->
  (int|real)$-    %459.1 = CallSafeBuiltin    wed   length(%459.0)    <int$->
  lgl$#-          %459.2 = IsType                   %459.1 isA int$-
  void                    Branch                   %459.2 -> BB465 (if true) | BB466 (if false)
BB460   <- [453]
  fs              %460.0 = FrameState         R     0x55de2dc4ca10+3405: [1L, %325.0, %198.1], env=e0.3
  env             e460.1 = (MkEnv)            l     labels=%453.3, new=%451.1, parent=<env 0x55de28b56378>, context 0
  fs              %460.2 = FrameState         R     0x55de350e06e0+69: [<blt length>, %453.1], env=e460.1, next=%460.0
  void                    Deopt              !v    %460.2, Typecheck@0x55de3502fb78[Type#1], %453.1   !
BB443   <- [433]
  val?+           %443.0 = CastType           d     dn %433.2   <str$->
  val+            %443.1 = CallSafeBuiltin    wed   match(%423.0, %443.0, NA, nil)    <int->
  lgl$#-          %443.2 = IsType                   %443.1 isA int-
  void                    Branch                   %443.2 -> BB455 (if true) | BB456 (if false)
BB444   <- [433]
  fs              %444.0 = FrameState         R     0x55de2dc4ca10+6415: [%409.1, <blt is.na>], env=e0.3
  prom-           %444.1 = MkArg                    unboundValue, .findInheritedMethods[0x55de34f8f4b0]_p64, e0.3
  val?^           %444.2 = CastType                 up %444.1
  prom-           %444.3 = MkArg                    %423.0, .findInheritedMethods[0x55de34f8f4b0]_p62 (!refl), e0.3
  val?~           %444.4 = CastType                 up %444.3
  env             e444.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%444.2, x=%444.4, parent=R_BaseNamespace, context 0
  fs              %444.6 = FrameState         R     0x55de28d63d40+23: [%423.0], env=e444.5, next=%444.0
  fs              %444.7 = FrameState         R     0x55de2e62ddd0+32(pr): [%433.2], env=e0.3, next=%444.6
  void                    Deopt              !v    %444.7, Typecheck@0x55de28db6cb0[Type#1], %433.2   !
BB439   <- [437]
  val?^ | miss    %439.0 = LdVar              eR    names, e0.3
  lgl$#-          %439.1 = Identical                %439.0, <blt names>
  void                    Branch                   %439.1 -> BB445 (if true) | BB446 (if false)
BB440   <- [437]
  void                    Nop                !     
  val?^ | miss    %440.1 = %437.8
  dr              %440.2 = CallTarget@0x55de2d7bb0f0[Call#135]
  goto BB156
BB457   <- [102]
  val?^ | miss    %457.0 = LdVar              eR    methods, e0.3
  lgl$#-          %457.1 = IsType                   %457.0 isA val?~+ | miss
  void                    Branch                   %457.1 -> BB461 (if true) | BB462 (if false)
BB458   <- [102]
  void                    Nop                !     
  lgl$#-          %458.1 = %102.1
  dr              %458.2 = DeadBranchReached@0x55de2d7bb0f0[Test#53]
  goto BB103
BB465   <- [459]
  int$-           %465.0 = CastType           d     dn %459.1
  env             e465.1 = MkEnv              l     labels=%453.3, new=%451.1, n=%465.0, parent=<env 0x55de28b56378>, context 0
  val?^ | miss    %465.2 = LdVar              eR    length, e465.1
  lgl$#-          %465.3 = Identical                <blt length>, %465.2   <true>
  void                    Branch                   %465.3 -> BB467 (if true) | BB468 (if false)
BB466   <- [459]
  void                    Nop                !     
  (int|real)$-    %466.1 = %459.1
  dr              %466.2 = Typecheck@0x55de3502fb78[Type#2]
  goto BB219
BB455   <- [443]
  int-            %455.0 = CastType           d     dn %443.1
  lgl-            %455.1 = CallSafeBuiltin    wed   is.na(%455.0)    <lgl->
  val?            %455.2 = Extract1_1D        wed   %409.1, %455.1, elided   <vec+>
  void                    StVar              lW    methods, %455.2, e0.3
  goto BB96
BB456   <- [443]
  fs              %456.0 = FrameState         R     0x55de2dc4ca10+6415: [%409.1, <blt is.na>], env=e0.3
  prom-           %456.1 = MkArg                    %443.0, .findInheritedMethods[0x55de34f8f4b0]_p64 (!refl), e0.3
  val?~           %456.2 = CastType                 up %456.1
  prom-           %456.3 = MkArg                    %423.0, .findInheritedMethods[0x55de34f8f4b0]_p62 (!refl), e0.3
  val?~           %456.4 = CastType                 up %456.3
  env             e456.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch(miss)=NA, table=%456.2, x=%456.4, parent=R_BaseNamespace, context 0
  fs              %456.6 = FrameState         R     0x55de28d63d40+69: [%443.1], env=e456.5, next=%456.0
  void                    Deopt              !v    %456.6, Typecheck@0x55de2d7bb0f0[Type#380], %443.1   !
BB445   <- [439]
  val?^ | miss    %445.0 = LdVar              eR    methods, e0.3
  lgl$#-          %445.1 = IsType                   %445.0 isA val?~+ | miss
  void                    Branch                   %445.1 -> BB447 (if true) | BB448 (if false)
BB446   <- [439]
  void                    Nop                !     
  val?^ | miss    %446.1 = %439.0
  dr              %446.2 = CallTarget@0x55de2d7bb0f0[Call#136]
  goto BB156
BB156   <- [440, 446, 448]
  val?^ | miss    %156.0 = Phi                      %440.1:BB440, %446.1:BB446, %448.1:BB448
  val?^ | miss    %156.1 = %156.0
  dr              %156.2 = Phi                      %440.2:BB440, %446.2:BB446, %448.2:BB448
  dr              %156.3 = %156.2
  fs              %156.4 = FrameState         R     0x55de2dc4ca10+6636: [], env=e0.3
  void                    Deopt              !v    %156.4, %156.3, %156.1   !
BB461   <- [457]
  val?~+ | miss   %461.0 = CastType           d     dn %457.0
  val?+           %461.1 = Force!<value>            %461.0,    <vec+>
  (int|real)$-    %461.2 = CallSafeBuiltin    wed   length(%461.1)    <int$->
  lgl$#-          %461.3 = IsType                   %461.2 isA int$-
  void                    Branch                   %461.3 -> BB473 (if true) | BB474 (if false)
BB462   <- [457]
  void                    Nop                !     
  val?^ | miss    %462.1 = %457.0
  dr              %462.2 = Typecheck@0x55de2d7bb0f0[Type#405]
  goto BB103
BB103   <- [458, 462]
  val?^ | miss    %103.0 = Phi                      %458.1:BB458, %462.1:BB462
  val?^ | miss    %103.1 = %103.0
  dr              %103.2 = Phi                      %458.2:BB458, %462.2:BB462
  dr              %103.3 = %103.2
  fs              %103.4 = FrameState         R     0x55de2dc4ca10+6881: [], env=e0.3
  void                    Deopt              !v    %103.4, %103.3, %103.1   !
BB467   <- [465]
  val?            %467.0 = Force!<lazy>       !vr   %451.1, e465.1   <str+>
  lgl$#-          %467.1 = IsType                   %467.0 isA val?+
  void                    Branch                   %467.1 -> BB469 (if true) | BB470 (if false)
BB468   <- [465]
  void                    Nop                !     
  lgl$#-          %468.1 = %465.3
  dr              %468.2 = DeadBranchReached@0x55de3502fb78[Test#1]
  goto BB219
BB219   <- [466, 468]
  val?^ | miss    %219.0 = Phi                      %466.1:BB466, %468.1:BB468
  val?^ | miss    %219.1 = %219.0
  dr              %219.2 = Phi                      %466.2:BB466, %468.2:BB468
  dr              %219.3 = %219.2
  fs              %219.4 = FrameState         R     0x55de2dc4ca10+3405: [1L, %325.0, %198.1], env=e0.3
  env             e219.5 = (MkEnv)            l     labels=%453.3, new=%451.1, parent=<env 0x55de28b56378>, context 0
  fs              %219.6 = FrameState         R     0x55de350e06e0+91: [%459.1], env=e219.5, next=%219.4
  void                    Deopt              !v    %219.6, %219.3, %219.1   !
BB447   <- [445]
  val?~+ | miss   %447.0 = CastType           d     dn %445.0
  val?+           %447.1 = Force!<value>            %447.0,    <vec+>
  val+            %447.2 = CallSafeBuiltin    wed   names(%447.1)    <str->
  lgl$#-          %447.3 = IsType                   %437.6 isA val?-
  void                    Branch                   %447.3 -> BB463 (if true) | BB464 (if false)
BB448   <- [445]
  void                    Nop                !     
  val?^ | miss    %448.1 = %445.0
  dr              %448.2 = Typecheck@0x55de2d7bb0f0[Type#391]
  goto BB156
BB473   <- [461]
  int$-           %473.0 = CastType           d     dn %461.2
  lgl$-           %473.1 = Gt                 d     %473.0, 1L, elided   <lgl$->
  lgl$#-          %473.2 = CheckTrueFalse     e     %473.1
  void                    Branch                   %473.2 -> BB148 (if true) | BB107 (if false)
BB474   <- [461]
  fs              %474.0 = FrameState         R     0x55de2dc4ca10+6972: [%461.2], env=e0.3
  void                    Deopt              !v    %474.0, Typecheck@0x55de2d7bb0f0[Type#406], %461.2   !
BB469   <- [467]
  val?+           %469.0 = CastType           d     dn %467.0   <str+>
  (int|real)$-    %469.1 = CallSafeBuiltin    wed   length(%469.0)    <int$->
  lgl$#-          %469.2 = IsType                   %469.1 isA int$-
  void                    Branch                   %469.2 -> BB471 (if true) | BB472 (if false)
BB470   <- [467]
  fs              %470.0 = FrameState         R     0x55de2dc4ca10+3405: [1L, %325.0, %198.1], env=e0.3
  fs              %470.1 = FrameState         R     0x55de350e06e0+174: [<blt length>, %467.0], env=e465.1, next=%470.0
  void                    Deopt              !v    %470.1, Typecheck@0x55de3502fb78[Type#4], %467.0   !
BB463   <- [447]
  val-            %463.0 = CastType           d     dn %437.6   <str$->
  val+            %463.1 = CallSafeBuiltin    wed   match(%463.0, %447.2, 0L, nil)    <int$->
  lgl$#-          %463.2 = IsType                   %463.1 isA int$-
  void                    Branch                   %463.2 -> BB475 (if true) | BB476 (if false)
BB464   <- [447]
  prom-           %464.0 = MkArg                    unboundValue, .findInheritedMethods[0x55de34f8f4b0]_p60, e0.3
  val?^           %464.1 = CastType                 up %464.0
  prom-           %464.2 = MkArg                    unboundValue, .findInheritedMethods[0x55de34f8f4b0]_p59 (!refl), e0.3
  val?^           %464.3 = CastType                 up %464.2
  fs              %464.4 = FrameState         R     0x55de2dc4ca10+6678: [], env=e0.3
  env             e464.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch=0L, table=%464.1, x=%464.3, parent=R_BaseNamespace, context 0
  fs              %464.6 = FrameState         R     0x55de28d63d40+23: [%437.6], env=e464.5, next=%464.4
  fs              %464.7 = FrameState         R     0x55de2bb33550+32(pr): [%447.2], env=e0.3, next=%464.6
  void                    Deopt              !v    %464.7, Typecheck@0x55de2d7bb0f0[Type#389], %437.6   !
BB148   <- [473]
  val?^ | miss    %148.0 = LdVar              eR    verbose, e0.3
  val?            %148.1 = Force!<wrapped>    !v    %148.0, e0.3   <lgl$->
  lgl$#-          %148.2 = CheckTrueFalse     we    %148.1
  void                    Branch                   %148.2 -> BB154 (if true) | BB149 (if false)
BB107   <- [473]
  void                    Nop                !     
  goto BB108
BB471   <- [469]
  int$-           %471.0 = CastType           d     dn %469.1
  void                    StVar              lW    m, %471.0, e465.1
  val?^ | miss    %471.2 = LdVar              eR    paste, e465.1
  lgl$#-          %471.3 = Identical                %471.2, function(..., sep=" ", collapse=NULL, recycle0|...>
  void                    Branch                   %471.3 -> BB477 (if true) | BB478 (if false)
BB472   <- [469]
  fs              %472.0 = FrameState         R     0x55de2dc4ca10+3405: [1L, %325.0, %198.1], env=e0.3
  fs              %472.1 = FrameState         R     0x55de350e06e0+196: [%469.1], env=e465.1, next=%472.0
  void                    Deopt              !v    %472.1, Typecheck@0x55de3502fb78[Type#5], %469.1   !
BB475   <- [463]
  int$-           %475.0 = CastType           d     dn %463.1
  void                    StVar              lW    i, %475.0, e0.3
  lgl$-           %475.2 = Gt                 d     %475.0, 0L, elided   <lgl$->
  lgl$#-          %475.3 = CheckTrueFalse     e     %475.2
  void                    Branch                   %475.3 -> BB165 (if true) | BB164 (if false)
BB476   <- [463]
  prom-           %476.0 = MkArg                    unboundValue, .findInheritedMethods[0x55de34f8f4b0]_p59 (!refl), e0.3
  val?^           %476.1 = CastType                 up %476.0
  prom-           %476.2 = MkArg                    %447.2, .findInheritedMethods[0x55de34f8f4b0]_p60 (!refl), e0.3
  val?~           %476.3 = CastType                 up %476.2
  fs              %476.4 = FrameState         R     0x55de2dc4ca10+6678: [], env=e0.3
  env             e476.5 = (MkEnv)            l     incomparables(miss)=nil, nomatch=0L, table=%476.3, x=%476.1, parent=R_BaseNamespace, context 0
  fs              %476.6 = FrameState         R     0x55de28d63d40+69: [%463.1], env=e476.5, next=%476.4
  void                    Deopt              !v    %476.6, Typecheck@0x55de2d7bb0f0[Type#393], %463.1   !
BB154   <- [148]
  (cls|spec|blt)  %154.0 = LdFun              !v    cat, e0.3
  fs              %154.1 = FrameState         R     0x55de2dc4ca10+7030: [%154.0], env=e0.3
  void                    Deopt              !v    %154.1, DeadCall@0x55de2d7bb0f0[Call#138], %154.0   !
BB149   <- [148]
  (cls|spec|blt)  %149.0 = LdFun              !v    .getBestMethods, <0x55de34dd0520>, e0.3
  prom-           %149.1 = MkArg                    unboundValue, .findInheritedMethods[0x55de34f8f4b0]_p53, e0.3
  prom-           %149.2 = MkArg                    unboundValue, .findInheritedMethods[0x55de34f8f4b0]_p54, e0.3
  prom-           %149.3 = MkArg                    unboundValue, .findInheritedMethods[0x55de34f8f4b0]_p55, e0.3
  prom-           %149.4 = MkArg                    unboundValue, .findInheritedMethods[0x55de34f8f4b0]_p56, e0.3
  val?            %149.5 = NamedCall          !v    %149.0(%149.1, %149.2, %149.3, verbose=%149.4) e0.3   <int$->
  lgl$#-          %149.6 = IsType                   %149.5 isA int$-
  void                    Branch                   %149.6 -> BB479 (if true) | BB480 (if false)
BB108   <- [107, 485]
  val?^ | miss    %108.0 = LdVar              eR    simpleOnly, e0.3
  val?            %108.1 = Force!<wrapped>    !v    %108.0, e0.3   <lgl$->
  lgl$-           %108.2 = AsLogical          e     %108.1
  lgl$#-          %108.3 = Identical                %108.2, false
  void                    Branch                   %108.3 -> BB147 (if true) | BB111 (if false)
BB477   <- [471]
  prom-           %477.0 = MkArg                    unboundValue, .findInheritedMethods[0x55de34f8f4b0]_p101, e465.1
  prom-           %477.1 = MkArg                    unboundValue, .findInheritedMethods[0x55de34f8f4b0]_p111, e465.1
  dots-           %477.2 = DotsList           l     %477.0, %477.1
  val?^ | miss    %477.3 = CastType                 up %477.0
  val?^ | miss    %477.4 = CastType                 up %477.1
  env             e477.5 = MkEnv              l     ...=%477.2, sep="#", collapse(miss)=nil, recycle0(miss)=false, parent=R_BaseNamespace, context -1
  val?            %477.6 = Force!             !vL   %477.3, e477.5
  val?            %477.7 = Force!             !vL   %477.4, e477.5
  val+            %477.8 = CallSafeBuiltin    wed   list(%477.6, %477.7)    <vec->
  val+            %477.9 = CallSafeBuiltin    wed   paste(%477.8, "#", nil, false)    <str->
  void                    StVar              lW    labels, %477.9, e0.3
  val?^ | miss    %477.11 = LdVar              eR    c, e0.3
  lgl$#-          %477.12 = Identical                <blt c>, %477.11   <true>
  void                    Branch                   %477.12 -> BB497 (if true) | BB498 (if false)
BB478   <- [471]
  fs              %478.0 = FrameState         R     0x55de2dc4ca10+3405: [1L, %325.0, %198.1], env=e0.3
  fs              %478.1 = FrameState         R     0x55de350e06e0+210: [], env=e465.1, next=%478.0
  void                    Deopt              !v    %478.1, CallTarget@0x55de3502fb78[Call#2], %471.2   !
BB165   <- [475]
  lgl$#-          %165.0 = IsType                   %447.1 isA val+   <true>
  void                    Branch                   %165.0 -> BB495 (if true) | BB496 (if false)
BB164   <- [475]
  void                    Nop                !     
  goto BB102
BB479   <- [149]
  int$-           %479.0 = CastType           d     dn %149.5
  void                    StVar              lW    select, %479.0, e0.3
  val?^ | miss    %479.2 = LdVar              eR    length, e0.3
  lgl$#-          %479.3 = Identical                <blt length>, %479.2   <true>
  void                    Branch                   %479.3 -> BB481 (if true) | BB482 (if false)
BB480   <- [149]
  fs              %480.0 = FrameState         R     0x55de2dc4ca10+7131: [%149.5], env=e0.3
  void                    Deopt              !v    %480.0, Typecheck@0x55de2d7bb0f0[Type#415], %149.5   !
BB147   <- [108]
  void                    Nop                !     
  lgl$-           %147.1 = %108.2
  goto BB114
BB111   <- [108]
  val?^ | miss    %111.0 = LdVar              eR    length, e0.3
  lgl$#-          %111.1 = Identical                <blt length>, %111.0   <true>
  void                    Branch                   %111.1 -> BB487 (if true) | BB488 (if false)
BB497   <- [477]
  val?^ | miss    %497.0 = LdVar              eR    supersList, e0.3
  lgl$#-          %497.1 = IsType                   %497.0 isA val?~- | miss
  void                    Branch                   %497.1 -> BB499 (if true) | BB500 (if false)
BB498   <- [477]
  void                    Nop                !     
  lgl$#-          %498.1 = %477.12
  dr              %498.2 = DeadBranchReached@0x55de2d7bb0f0[Test#25]
  goto BB227
BB495   <- [165]
  int$-           %495.0 = Minus              d     %475.0, elided
  val?            %495.1 = Extract1_1D        wed   %447.1, %495.0, elided   <vec+>
  void                    StVar              lW    methods, %495.1, e0.3
  val?^ | miss    %495.3 = LdVar              eR    fromGroup, e0.3
  lgl$#-          %495.4 = IsType                   %495.3 isA lgl-
  void                    Branch                   %495.4 -> BB503 (if true) | BB504 (if false)
BB496   <- [165]
  fs              %496.0 = FrameState         R     0x55de2dc4ca10+6692: [], env=e0.3
  void                    Deopt              !v    %496.0, DeadBranchReached@0x55de2d7bb0f0[Test#51], %165.0   !
BB481   <- [479]
  val?^ | miss    %481.0 = LdVar              eR    methods, e0.3
  lgl$#-          %481.1 = IsType                   %481.0 isA val?~+ | miss
  void                    Branch                   %481.1 -> BB483 (if true) | BB484 (if false)
BB482   <- [479]
  void                    Nop                !     
  lgl$#-          %482.1 = %479.3
  dr              %482.2 = DeadBranchReached@0x55de2d7bb0f0[Test#54]
  goto BB152
BB114   <- [147, 491]
  lgl$-           %114.0 = Phi                      %491.4:BB491, %147.1:BB147
  lgl$-           %114.1 = %114.0
  lgl$#-          %114.2 = CheckTrueFalse     e     %114.1
  void                    Branch                   %114.2 -> BB146 (if true) | BB117 (if false)
BB487   <- [111]
  val?^ | miss    %487.0 = LdVar              eR    methods, e0.3
  lgl$#-          %487.1 = IsType                   %487.0 isA val?~+ | miss
  void                    Branch                   %487.1 -> BB489 (if true) | BB490 (if false)
BB488   <- [111]
  void                    Nop                !     
  lgl$#-          %488.1 = %111.1
  dr              %488.2 = DeadBranchReached@0x55de2d7bb0f0[Test#57]
  goto BB109
BB499   <- [497]
  val?~- | miss   %499.0 = CastType           d     dn %497.0
  val?-           %499.1 = Force!<value>            %499.0,    <vec->
  val?^ | miss    %499.2 = LdVar              eR    list, e0.3
  lgl$#-          %499.3 = Identical                <blt list>, %499.2   <true>
  void                    Branch                   %499.3 -> BB505 (if true) | BB506 (if false)
BB500   <- [497]
  void                    Nop                !     
  val?^ | miss    %500.1 = %497.0
  dr              %500.2 = Typecheck@0x55de2d7bb0f0[Type#233]
  goto BB227
BB227   <- [498, 500, 506, 508]
  val?^ | miss    %227.0 = Phi                      %498.1:BB498, %500.1:BB500, %506.1:BB506, %508.1:BB508
  val?^ | miss    %227.1 = %227.0
  dr              %227.2 = Phi                      %498.2:BB498, %500.2:BB500, %506.2:BB506, %508.2:BB508
  dr              %227.3 = %227.2
  fs              %227.4 = FrameState         R     0x55de2dc4ca10+3419: [1L, %325.0, %198.1], env=e0.3
  void                    Deopt              !v    %227.4, %227.3, %227.1   !
BB503   <- [495]
  lgl-            %503.0 = CastType           d     dn %495.3
  lgl-            %503.1 = Extract1_1D        wed   %503.0, %495.0, elided   <lgl->
  void                    StVar              lW    fromGroup, %503.1, e0.3
  goto BB102
BB504   <- [495]
  fs              %504.0 = FrameState         R     0x55de2dc4ca10+6805: [], env=e0.3
  void                    Deopt              !v    %504.0, Typecheck@0x55de2d7bb0f0[Type#400], %495.3   !
BB483   <- [481]
  val?~+ | miss   %483.0 = CastType           d     dn %481.0
  val?+           %483.1 = Force!<value>            %483.0,    <vec+>
  lgl$#-          %483.2 = IsType                   %483.1 isA val+   <true>
  void                    Branch                   %483.2 -> BB485 (if true) | BB486 (if false)
BB484   <- [481]
  void                    Nop                !     
  val?^ | miss    %484.1 = %481.0
  dr              %484.2 = Typecheck@0x55de2d7bb0f0[Type#446]
  goto BB152
BB152   <- [482, 484, 486]
  val?^ | miss    %152.0 = Phi                      %482.1:BB482, %484.1:BB484, %486.1:BB486
  val?^ | miss    %152.1 = %152.0
  dr              %152.2 = Phi                      %482.2:BB482, %484.2:BB484, %486.2:BB486
  dr              %152.3 = %152.2
  fs              %152.4 = FrameState         R     0x55de2dc4ca10+7145: [], env=e0.3
  void                    Deopt              !v    %152.4, %152.3, %152.1   !
BB146   <- [114]
  (cls|spec|blt)  %146.0 = LdFun              !v    Recall, e0.3
  fs              %146.1 = FrameState         R     0x55de2dc4ca10+7866: [%146.0], env=e0.3
  void                    Deopt              !v    %146.1, DeadCall@0x55de2d7bb0f0[Call#154], %146.0   !
BB117   <- [114]
  val?^ | miss    %117.0 = LdVar              eR    length, e0.3
  lgl$#-          %117.1 = Identical                <blt length>, %117.0   <true>
  void                    Branch                   %117.1 -> BB493 (if true) | BB494 (if false)
BB489   <- [487]
  val?~+ | miss   %489.0 = CastType           d     dn %487.0
  val?+           %489.1 = Force!<value>            %489.0,    <vec$+>
  (int|real)$-    %489.2 = CallSafeBuiltin    wed   length(%489.1)    <int$->
  lgl$#-          %489.3 = IsType                   %489.2 isA int$-
  void                    Branch                   %489.3 -> BB491 (if true) | BB492 (if false)
BB490   <- [487]
  void                    Nop                !     
  val?^ | miss    %490.1 = %487.0
  dr              %490.2 = Typecheck@0x55de2d7bb0f0[Type#452]
  goto BB109
BB109   <- [488, 490]
  val?^ | miss    %109.0 = Phi                      %488.1:BB488, %490.1:BB490
  val?^ | miss    %109.1 = %109.0
  dr              %109.2 = Phi                      %488.2:BB488, %490.2:BB490
  dr              %109.3 = %109.2
  fs              %109.4 = FrameState         R     0x55de2dc4ca10+7728: [%108.1], env=e0.3
  void                    Deopt              !v    %109.4, %109.3, %109.1   !
BB505   <- [499]
  val?^ | miss    %505.0 = LdVar              eR    allLabels, e0.3
  lgl$#-          %505.1 = IsType                   %505.0 isA val?~- | miss
  void                    Branch                   %505.1 -> BB507 (if true) | BB508 (if false)
BB506   <- [499]
  void                    Nop                !     
  lgl$#-          %506.1 = %499.3
  dr              %506.2 = DeadBranchReached@0x55de2d7bb0f0[Test#26]
  goto BB227
BB485   <- [483]
  val?            %485.0 = Extract1_1D        wed   %483.1, %479.0, elided   <vec$+>
  void                    StVar              lW    methods, %485.0, e0.3
  goto BB108
BB486   <- [483]
  void                    Nop                !     
  lgl$#-          %486.1 = %483.2
  dr              %486.2 = DeadBranchReached@0x55de2d7bb0f0[Test#56]
  goto BB152
BB493   <- [117]
  val?^ | miss    %493.0 = LdVar              eR    methods, e0.3
  lgl$#-          %493.1 = IsType                   %493.0 isA val?~+ | miss
  void                    Branch                   %493.1 -> BB501 (if true) | BB502 (if false)
BB494   <- [117]
  void                    Nop                !     
  lgl$#-          %494.1 = %117.1
  dr              %494.2 = DeadBranchReached@0x55de2d7bb0f0[Test#59]
  goto BB115
BB491   <- [489]
  int$-           %491.0 = CastType           d     dn %489.2
  lgl$-           %491.1 = Eq                 d     %491.0, 0L, elided   <lgl$->
  lgl$-           %491.2 = AsLogical                %491.1
  lgl$-           %491.3 = LAnd                     %108.2, %491.2
  lgl$-           %491.4 = %491.3
  goto BB114
BB492   <- [489]
  fs              %492.0 = FrameState         R     0x55de2dc4ca10+7831: [%108.2, %489.2], env=e0.3
  void                    Deopt              !v    %492.0, Typecheck@0x55de2d7bb0f0[Type#453], %489.2   !
BB507   <- [505]
  val?~- | miss   %507.0 = CastType           d     dn %505.0
  val?-           %507.1 = Force!<value>            %507.0,    <str->
  val+            %507.2 = CallSafeBuiltin    wed   list(%507.1)    <vec$->
  val+            %507.3 = CallSafeBuiltin    wed   c(%499.1, %507.2)    <vec->
  void                    StVar              lW    supersList, %507.3, e0.3
  int$#-          %507.5 = %198.1
  goto BB196
BB508   <- [505]
  void                    Nop                !     
  val?^ | miss    %508.1 = %505.0
  dr              %508.2 = Typecheck@0x55de2d7bb0f0[Type#235]
  goto BB227
BB501   <- [493]
  val?~+ | miss   %501.0 = CastType           d     dn %493.0
  val?+           %501.1 = Force!<value>            %501.0,    <vec$+>
  (int|real)$-    %501.2 = CallSafeBuiltin    wed   length(%501.1)    <int$->
  lgl$#-          %501.3 = IsType                   %501.2 isA int$-
  void                    Branch                   %501.3 -> BB509 (if true) | BB510 (if false)
BB502   <- [493]
  void                    Nop                !     
  val?^ | miss    %502.1 = %493.0
  dr              %502.2 = Typecheck@0x55de2d7bb0f0[Type#474]
  goto BB115
BB115   <- [494, 502]
  val?^ | miss    %115.0 = Phi                      %494.1:BB494, %502.1:BB502
  val?^ | miss    %115.1 = %115.0
  dr              %115.2 = Phi                      %494.2:BB494, %502.2:BB502
  dr              %115.3 = %115.2
  fs              %115.4 = FrameState         R     0x55de2dc4ca10+7850: [%114.1], env=e0.3
  void                    Deopt              !v    %115.4, %115.3, %115.1   !
BB509   <- [501]
  int$-           %509.0 = CastType           d     dn %501.2
  lgl$#-          %509.1 = CheckTrueFalse     e     %509.0
  void                    Branch                   %509.1 -> BB124 (if true) | BB120 (if false)
BB510   <- [501]
  void                    Nop                !     
  (int|real)$-    %510.1 = %501.2
  dr              %510.2 = Typecheck@0x55de2d7bb0f0[Type#475]
  goto BB118
BB124   <- [509]
  val?^ | miss    %124.0 = LdVar              eR    .sigLabel, e0.3
  lgl$#-          %124.1 = Identical                %124.0, function(sig) <(rir::DispatchTable*)0x55de2b41|...>
  void                    Branch                   %124.1 -> BB511 (if true) | BB512 (if false)
BB120   <- [509]
  void                    Nop                !     
  goto BB121
BB118   <- [510, 512, 514]
  val?^ | miss    %118.0 = Phi                      %510.1:BB510, %512.1:BB512, %514.1:BB514
  val?^ | miss    %118.1 = %118.0
  dr              %118.2 = Phi                      %510.2:BB510, %512.2:BB512, %514.2:BB514
  dr              %118.3 = %118.2
  fs              %118.4 = FrameState         R     0x55de2dc4ca10+8203: [%501.2], env=e0.3
  void                    Deopt              !v    %118.4, %118.3, %118.1   !
BB511   <- [124]
  prom-           %511.0 = MkArg                    unboundValue, .findInheritedMethods[0x55de34f8f4b0]_p32, e0.3
  val?^           %511.1 = CastType                 up %511.0
  val?^ | miss    %511.2 = LdVar              eR    paste, <env 0x55de28b56378>
  lgl$#-          %511.3 = Identical                %511.2, function(..., sep=" ", collapse=NULL, recycle0|...>
  void                    Branch                   %511.3 -> BB513 (if true) | BB514 (if false)
BB512   <- [124]
  void                    Nop                !     
  val?^ | miss    %512.1 = %124.0
  dr              %512.2 = CallTarget@0x55de2d7bb0f0[Call#161]
  goto BB118
BB121   <- [120, 133, 529]
  val?^ | miss    %121.0 = LdVar              eR    methods, e0.3
  lgl$#-          %121.1 = IsType                   %121.0 isA val?~+ | miss
  void                    Branch                   %121.1 -> BB515 (if true) | BB516 (if false)
BB513   <- [511]
  env             e513.0 = MkEnv              l     sig=%511.1, parent=<env 0x55de28b56378>, context 0
  prom-           %513.1 = MkArg                    unboundValue, .findInheritedMethods[0x55de34f8f4b0]_p123, e513.0
  dots-           %513.2 = DotsList           l     %513.1
  val?^ | miss    %513.3 = CastType                 up %513.1
  env             e513.4 = MkEnv              l     ...=%513.2, sep(miss)=" ", collapse="#", recycle0(miss)=false, parent=R_BaseNamespace, context -1
  val?            %513.5 = Force!             !vL   %513.3, e513.4
  val+            %513.6 = CallSafeBuiltin    wed   list(%513.5)    <vec->
  val+            %513.7 = CallSafeBuiltin    wed   paste(%513.6, " ", "#", false)    <str$->
  void                    StVar              lW    tlabel, %513.7, e0.3
  val?^ | miss    %513.9 = LdVar              eR    methods, e0.3
  lgl$#-          %513.10 = IsType                   %513.9 isA val?~+ | miss
  void                    Branch                   %513.10 -> BB517 (if true) | BB518 (if false)
BB514   <- [511]
  void                    Nop                !     
  val?^ | miss    %514.1 = %511.2
  dr              %514.2 = CallTarget@0x55de2b0fcef8[Call#0]
  goto BB118
BB515   <- [121]
  val?~+ | miss   %515.0 = CastType           d     dn %121.0
  void                    Visible            v     
  val?+           %515.2 = Force!<value>            %515.0,    <vec$+>
  void                    Return             l     %515.2
BB516   <- [121]
  fs              %516.0 = FrameState         R     0x55de2dc4ca10+8774: [], env=e0.3
  void                    Deopt              !v    %516.0, Typecheck@0x55de2d7bb0f0[Type#509], %121.0   !
BB517   <- [513]
  val?~+ | miss   %517.0 = CastType           d     dn %513.9
  val?+           %517.1 = Force!<value>            %517.0,    <vec$+>
  lgl$#-          %517.2 = IsType                   %517.1 isA val+   <true>
  void                    Branch                   %517.2 -> BB519 (if true) | BB520 (if false)
BB518   <- [513]
  void                    Nop                !     
  val?^ | miss    %518.1 = %513.9
  dr              %518.2 = Typecheck@0x55de2d7bb0f0[Type#478]
  goto BB125
BB519   <- [517]
  val?            %519.0 = Extract2_1D        wed   %517.1, 1L, elided   <cls>
  void                    StVar              lW    m, %519.0, e0.3
  val?^ | miss    %519.2 = LdVar              eR    is, e0.3
  lgl$#-          %519.3 = Identical                %519.2, function(object, class2) <(rir::DispatchTable*|...>
  void                    Branch                   %519.3 -> BB521 (if true) | BB522 (if false)
BB520   <- [517]
  void                    Nop                !     
  lgl$#-          %520.1 = %517.2
  dr              %520.2 = DeadBranchReached@0x55de2d7bb0f0[Test#60]
  goto BB125
BB125   <- [518, 520]
  val?^ | miss    %125.0 = Phi                      %518.1:BB518, %520.1:BB520
  val?^ | miss    %125.1 = %125.0
  dr              %125.2 = Phi                      %518.2:BB518, %520.2:BB520
  dr              %125.3 = %125.2
  fs              %125.4 = FrameState         R     0x55de2dc4ca10+8265: [], env=e0.3
  void                    Deopt              !v    %125.4, %125.3, %125.1   !
BB521   <- [519]
  prom-           %521.0 = MkArg                    unboundValue, .findInheritedMethods[0x55de34f8f4b0]_p33 (!refl), e0.3
  val?            %521.1 = Call               !v    function(object, class2) <(rir::DispatchTable*|...>(%521.0, "MethodDefinition") e0.3   <lgl$->
  lgl$#-          %521.2 = IsType                   %521.1 isA lgl$-
  void                    Branch                   %521.2 -> BB523 (if true) | BB524 (if false)
BB522   <- [519]
  fs              %522.0 = FrameState         R     0x55de2dc4ca10+8332: [], env=e0.3
  void                    Deopt              !v    %522.0, CallTarget@0x55de2d7bb0f0[Call#162], %519.2   !
BB523   <- [521]
  lgl$-           %523.0 = CastType           d     dn %521.1
  lgl$#-          %523.1 = CheckTrueFalse     e     %523.0
  void                    Branch                   %523.1 -> BB139 (if true) | BB131 (if false)
BB524   <- [521]
  fs              %524.0 = FrameState         R     0x55de2dc4ca10+8369: [%521.1], env=e0.3
  void                    Deopt              !v    %524.0, Typecheck@0x55de2d7bb0f0[Type#481], %521.1   !
BB139   <- [523]
  (cls|spec|blt)  %139.0 = LdFun              !v    <-, <0x55de28543da8>, e0.3
  prom-           %139.1 = MkArg                    unboundValue, .findInheritedMethods[0x55de34f8f4b0]_p37, e0.3
  prom-           %139.2 = MkArg                    unboundValue, .findInheritedMethods[0x55de34f8f4b0]_p40, e0.3
  val?            %139.3 = Call               !v    %139.0(%139.1, %139.2) e0.3
  val?^ | miss    %139.4 = LdVar              eR    .inheritedArgsExpression, e0.3
  lgl$#-          %139.5 = Identical                %139.4, function(target, defined, body) <(rir::Dispatc|...>
  void                    Branch                   %139.5 -> BB525 (if true) | BB526 (if false)
BB131   <- [523]
  void                    Nop                !     
  goto BB132
BB525   <- [139]
  prom-           %525.0 = MkArg                    unboundValue, .findInheritedMethods[0x55de34f8f4b0]_p45, e0.3
  prom-           %525.1 = MkArg                    unboundValue, .findInheritedMethods[0x55de34f8f4b0]_p48, e0.3
  prom-           %525.2 = MkArg                    unboundValue, .findInheritedMethods[0x55de34f8f4b0]_p51, e0.3
  val?            %525.3 = StaticCall         !v    .inheritedArgsExpression[0x55de350cdba0](%525.0, %525.1, %525.2) e0.3   <nil->
  lgl$-           %525.4 = Is                       %525.3, NULL
  void                    StVar              lW    coerce, %525.3, e0.3
  val             %525.6 = ChkMissing         e     %525.3
  lgl$-           %525.7 = Not                d     %525.4, elided
  lgl$#-          %525.8 = CheckTrueFalse     e     %525.7
  void                    Branch                   %525.8 -> BB145 (if true) | BB142 (if false)
BB526   <- [139]
  fs              %526.0 = FrameState         R     0x55de2dc4ca10+8422: [%139.3], env=e0.3
  void                    Deopt              !v    %526.0, CallTarget@0x55de2d7bb0f0[Call#167], %139.4   !
BB132   <- [131, 527]
  val?^ | miss    %132.0 = LdVar              eR    doCache, e0.3
  val?            %132.1 = Force!<lazy>       !v    %132.0, e0.3   <lgl$->
  lgl$#-          %132.2 = CheckTrueFalse     we    %132.1
  void                    Branch                   %132.2 -> BB134 (if true) | BB133 (if false)
BB145   <- [525]
  (cls|spec|blt)  %145.0 = LdFun              !v    body<-, e0.3
  fs              %145.1 = FrameState         R     0x55de2dc4ca10+8529: [%525.3, %145.0], env=e0.3
  void                    Deopt              !v    %145.1, DeadCall@0x55de2d7bb0f0[Call#171], %145.0   !
BB142   <- [525]
  val?^ | miss    %142.0 = LdVar              eR    m, e0.3
  val?            %142.1 = Force!<value>      !v    %142.0, e0.3   <cls>
  val?^ | miss    %142.2 = LdVar              eR    methods !upd, e0.3
  lgl$#-          %142.3 = IsType                   %142.2 isA val?~+ | miss
  void                    Branch                   %142.3 -> BB527 (if true) | BB528 (if false)
BB134   <- [132]
  val?^ | miss    %134.0 = LdVar              eR    verbose, e0.3
  val?            %134.1 = Force!<wrapped>    !v    %134.0, e0.3   <lgl$->
  lgl$#-          %134.2 = CheckTrueFalse     we    %134.1
  void                    Branch                   %134.2 -> BB138 (if true) | BB137 (if false)
BB133   <- [132]
  void                    Nop                !     
  goto BB121
BB527   <- [142]
  val?~+ | miss   %527.0 = CastType           d     dn %142.2
  val?+           %527.1 = Force!<value>            %527.0,    <vec$+>
  val?            %527.2 = Subassign2_1D      !v    %142.1, %527.1, 1L, e0.3
  void                    StVar              lW    methods, %527.2, e0.3
  goto BB132
BB528   <- [142]
  fs              %528.0 = FrameState         R     0x55de2dc4ca10+8601: [%142.1], env=e0.3
  void                    Deopt              !v    %528.0, Typecheck@0x55de2d7bb0f0[Type#503], %142.2   !
BB138   <- [134]
  (cls|spec|blt)  %138.0 = LdFun              !v    cat, e0.3
  fs              %138.1 = FrameState         R     0x55de2dc4ca10+8691: [%138.0], env=e0.3
  void                    Deopt              !v    %138.1, DeadCall@0x55de2d7bb0f0[Call#172], %138.0   !
BB137   <- [134]
  val?^ | miss    %137.0 = LdVar              eR    assign, e0.3
  lgl$#-          %137.1 = Identical                %137.0, function(x, value, pos=-(1), envir=as.environm|...>
  void                    Branch                   %137.1 -> BB529 (if true) | BB530 (if false)
BB529   <- [137]
  prom-           %529.0 = MkArg                    unboundValue, .findInheritedMethods[0x55de34f8f4b0]_p34, e0.3
  prom-           %529.1 = MkArg                    unboundValue, .findInheritedMethods[0x55de34f8f4b0]_p35, e0.3
  prom-           %529.2 = MkArg                    unboundValue, .findInheritedMethods[0x55de34f8f4b0]_p36, e0.3
  val?            %529.3 = StaticCall         !v    assign[0x55de2a8c4c20](%529.0, %529.1, missingArg, %529.2) { 0 1 3n } e0.3
  goto BB121
BB530   <- [137]
  fs              %530.0 = FrameState         R     0x55de2dc4ca10+8676: [%134.2], env=e0.3
  void                    Deopt              !v    %530.0, CallTarget@0x55de2d7bb0f0[Call#173], %137.0   !
Prom 0:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     get, <0x55de29474e78>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de34f8f4b0]_p1, e0.0
  val?            %0.3  = NamedCall          !     %0.1(".MTable", envir=%0.2) e0.0   <env->
  void                    Return             l     %0.3
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     environment, <0x55de288f5b68>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de34f8f4b0]_p2, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <env->
  void                    Return             l     %0.3
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fdef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 4:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     .simpleInheritanceGeneric, <0x55de2e251700>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de34f8f4b0]_p5, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <lgl$->
  void                    Return             l     %0.3
Prom 5:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fdef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 7:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     is.environment, <0x55de2855ee18>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de34f8f4b0]_p8, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <lgl$->
  void                    Return             l     %0.3
Prom 8:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    mtable, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <(nil|env)->
  void                    Return             l     %0.3
Prom 9:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     environment, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de34f8f4b0]_p10, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 10:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fdef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 11:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     .allowPrimitiveMethods, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de34f8f4b0]_p12, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 12:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    primMethods, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 13:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fdef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 14:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    group, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 15:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    cl1, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$+>
  void                    Return             l     %0.3
Prom 16:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 20:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    labels, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 21:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     .fillSignatures, <0x55de2e2533b8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de34f8f4b0]_p22, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x55de34f8f4b0]_p23, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <str->
  void                    Return             l     %0.4
Prom 22:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    allMethods, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 23:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     length, <0x55de2854fa90>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de34f8f4b0]_p24, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <int$->
  void                    Return             l     %0.3
Prom 24:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    classes, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <(str|vec)>
  void                    Return             l     %0.3
Prom 25:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    allMethods, e0.0
  val?            %0.2  = Force<value>       !v    %0.1, e0.0   <str->
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <true>
  void                    Branch                   %0.3 -> BB2 (if true) | BB7 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    m, e0.0
  val?            %2.1  = Force<value>       !v    %2.0, e0.0   <int->
  lgl$#-          %2.2  = IsType                   %2.1 isA val+   <true>
  void                    Branch                   %2.2 -> BB6 (if true) | BB3 (if false)
BB7   <- [0]
  prom-           %7.0  = MkArg                    unboundValue, .findInheritedMethods[0x55de34f8f4b0]_p27, e0.0
  prom-           %7.1  = %7.0
  goto BB5
BB6   <- [2]
  val?^ | miss    %6.0  = LdVar              eR    found, e0.0
  val?            %6.1  = Force<value>       !v    %6.0, e0.0   <lgl->
  val?            %6.2  = %6.1
  goto BB4
BB3   <- [2]
  prom-           %3.0  = MkArg                    unboundValue, .findInheritedMethods[0x55de34f8f4b0]_p26, e0.0
  prom-           %3.1  = %3.0
  goto BB4
BB5   <- [7, 4]
  val?            %5.0  = Phi                      %4.3:BB4, %7.1:BB7
  val?            %5.1  = %5.0
  val?            %5.2  = Extract1_1D        !v    %0.2, %5.1, e0.0   <str->
  void                    Visible            v     
  void                    Return             l     %5.2
BB4   <- [3, 6]
  val?            %4.0  = Phi                      %6.2:BB6, %3.1:BB3
  val?            %4.1  = %4.0
  val?            %4.2  = Extract1_1D        !v    %2.1, %4.1, e0.0   <int->
  val?            %4.3  = %4.2
  goto BB5
Prom 26:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    found, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 27:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    m, e0.0
  val?            %0.2  = Force              !v    %0.1, e0.0   <val?_>
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <@?>
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    found, e0.0
  val?            %2.1  = Force              !v    %2.0, e0.0   <val?_>
  val?            %2.2  = %2.1
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, .findInheritedMethods[0x55de34f8f4b0]_p28, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.2:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract1_1D        !v    %0.2, %3.1, e0.0   <val?_>
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 28:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    found, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 29:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    table, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 30:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     length, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de34f8f4b0]_p31, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 31:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    methods, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 32:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    classes, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <(str|vec)>
  void                    Return             l     %0.3
Prom 33:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    m, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 34:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    tlabel, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 35:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    m, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <cls>
  void                    Return             l     %0.3
Prom 36:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    mtable, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <env->
  void                    Return             l     %0.3
Prom 37:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de34f8f4b0]_p38, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x55de34f8f4b0]_p39, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 38:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    m, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 39:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    target, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 40:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     .newSignature, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de34f8f4b0]_p41, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x55de34f8f4b0]_p42, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 41:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    classes, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 42:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de34f8f4b0]_p43, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x55de34f8f4b0]_p44, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 43:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fdef, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 44:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    signature, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 45:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, <0x55de2854ebd8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de34f8f4b0]_p46, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x55de34f8f4b0]_p47, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <str>
  void                    Return             l     %0.4
Prom 46:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    m, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 47:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    target, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 48:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, <0x55de2854ebd8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de34f8f4b0]_p49, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x55de34f8f4b0]_p50, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <str>
  void                    Return             l     %0.4
Prom 49:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    m, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 50:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    defined, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 51:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     body, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de34f8f4b0]_p52, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <val?_>
  void                    Return             l     %0.3
Prom 52:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    m, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 53:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    methods, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 54:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    supersList, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <vec->
  void                    Return             l     %0.3
Prom 55:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    fromGroup, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 56:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    verbose, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <lgl$->
  void                    Return             l     %0.3
Prom 57:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     rep.int, <0x55de2a441488>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de34f8f4b0]_p58, e0.0
  val?            %0.3  = Call               !     %0.1("ANY", %0.2) e0.0   <str->
  void                    Return             l     %0.3
Prom 58:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    nargs, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <int$->
  void                    Return             l     %0.3
Prom 59:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    defaultLabel, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 60:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     names, <0x55de2854f470>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de34f8f4b0]_p61, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <str->
  void                    Return             l     %0.3
Prom 61:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    methods, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 62:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     names, <0x55de2854f470>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de34f8f4b0]_p63, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <str->
  void                    Return             l     %0.3
Prom 63:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    methods, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 64:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     as.character, <0x55de2855c040>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de34f8f4b0]_p65, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <str$->
  void                    Return             l     %0.3
Prom 65:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    excluded, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 66:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    classes, e0.0
  val?            %0.2  = Force<wrapped>     !v    %0.1, e0.0   <(str|vec)+>
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <true>
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    i, e0.0
  val?            %2.1  = Force<value>       !v    %2.0, e0.0   <int$->
  val?            %2.2  = %2.1
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, .findInheritedMethods[0x55de34f8f4b0]_p67, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.2:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract2_1D        !v    %0.2, %3.1, e0.0   <str$+>
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 67:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    i, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 68:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 69:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    cc, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 70:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    className, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 71:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    labels, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 72:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    allLabels, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str+>
  void                    Return             l     %0.3
Prom 73:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    classes, e0.0
  val?            %0.2  = Force<wrapped>     !v    %0.1, e0.0   <vec->
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <true>
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    i, e0.0
  val?            %2.1  = Force<value>       !v    %2.0, e0.0   <int$->
  val?            %2.2  = %2.1
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, .findInheritedMethods[0x55de34f8f4b0]_p74, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.2:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract2_1D        !v    %0.2, %3.1, e0.0   <str$+>
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 74:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    i, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 75:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    where, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 76:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    cc, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 77:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    className, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 78:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, <0x55de2854ebd8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de34f8f4b0]_p79, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x55de34f8f4b0]_p80, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <vec+>
  void                    Return             l     %0.4
Prom 79:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    cc, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 80:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    contains, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 81:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    simpleOnly, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <lgl$->
  void                    Return             l     %0.3
Prom 82:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    labels, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 83:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    allLabels, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str->
  void                    Return             l     %0.3
Prom 84:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    i, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 85:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    cc, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 86:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    className, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 87:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, <0x55de2854ebd8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de34f8f4b0]_p88, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x55de34f8f4b0]_p89, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <vec+>
  void                    Return             l     %0.4
Prom 88:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    cc, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 89:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    contains, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 90:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    simpleOnly, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <lgl$->
  void                    Return             l     %0.3
Prom 91:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, <0x55de2854ebd8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de34f8f4b0]_p92, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x55de34f8f4b0]_p93, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <vec+>
  void                    Return             l     %0.4
Prom 92:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    def, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 93:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    contains, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 94:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    simpleOnly, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <lgl$->
  void                    Return             l     %0.3
Prom 95:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    contains, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <vec+>
  void                    Return             l     %0.3
Prom 96:
BB0
  env             e0.0  = LdFunctionEnv            
  cls             %0.1  = MkCls                    .eligibleSuperClasses@Prom(1)16, e0.0
  cls             %0.2  = MkCls                    .eligibleSuperClasses@Prom(1)37, e0.0
  val?^ | miss    %0.3  = LdVar              eR    simpleOnly, e0.0
  void                    Visible            v     
  val?            %0.5  = Force<lazy>        !     %0.3, e0.0   <lgl$->
  lgl$#-          %0.6  = CheckTrueFalse     we    %0.5
  void                    Branch                   %0.6 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  void                    Nop                !     
  cls             %2.1  = %0.2
  goto BB3
BB4   <- [0]
  void                    Nop                !     
  cls             %4.1  = %0.1
  goto BB3
BB3   <- [4, 2]
  cls             %3.0  = Phi                      %4.1:BB4, %2.1:BB2
  cls             %3.1  = %3.0
  void                    Return             l     %3.1
Prom 101:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    labels, e0.0
  val?            %0.2  = Force<wrapped>     !v    %0.1, e0.0   <str->
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <true>
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  (cls|spec|blt)  %2.0  = LdFun              !v    rep.int, <0x55de2a441488>, e0.0
  prom-           %2.1  = MkArg                    unboundValue, .findInheritedMethods[0x55de34f8f4b0]_p102, e0.0
  prom-           %2.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de34f8f4b0]_p103, e0.0
  val?            %2.3  = Call               !v    %2.0(%2.1, %2.2) e0.0   <int->
  val?            %2.4  = %2.3
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, .findInheritedMethods[0x55de34f8f4b0]_p106, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.4:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract1_1D        !v    %0.2, %3.1, e0.0   <str->
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 102:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    n, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <int$->
  val?            %0.4  = Colon              !     1L, %0.3, e0.0   <int->
  void                    Return             l     %0.4
Prom 103:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     rep.int, <0x55de2a441488>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de34f8f4b0]_p104, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x55de34f8f4b0]_p105, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <int->
  void                    Return             l     %0.4
Prom 104:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    m, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <int$->
  void                    Return             l     %0.3
Prom 105:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    n, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <int$->
  void                    Return             l     %0.3
Prom 106:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     rep.int, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de34f8f4b0]_p107, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x55de34f8f4b0]_p108, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 107:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    n, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  val?            %0.4  = Colon              !     1L, %0.3, e0.0   <val?_>
  void                    Return             l     %0.4
Prom 108:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     rep.int, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de34f8f4b0]_p109, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x55de34f8f4b0]_p110, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 109:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    m, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 110:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    n, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 111:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    new, e0.0
  val?            %0.2  = Force<wrapped>     !v    %0.1, e0.0   <str+>
  lgl$#-          %0.3  = IsType                   %0.2 isA val+   <true>
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  (cls|spec|blt)  %2.0  = LdFun              !v    rep.int, <0x55de2a441488>, e0.0
  prom-           %2.1  = MkArg                    unboundValue, .findInheritedMethods[0x55de34f8f4b0]_p112, e0.0
  prom-           %2.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de34f8f4b0]_p113, e0.0
  val?            %2.3  = Call               !v    %2.0(%2.1, %2.2) e0.0   <int->
  val?            %2.4  = %2.3
  goto BB3
BB4   <- [0]
  prom-           %4.0  = MkArg                    unboundValue, .findInheritedMethods[0x55de34f8f4b0]_p114, e0.0
  prom-           %4.1  = %4.0
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %2.4:BB2, %4.1:BB4
  val?            %3.1  = %3.0
  val?            %3.2  = Extract1_1D        !v    %0.2, %3.1, e0.0   <str->
  void                    Visible            v     
  void                    Return             l     %3.2
Prom 112:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    m, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <int$->
  val?            %0.4  = Colon              !     1L, %0.3, e0.0   <int->
  void                    Return             l     %0.4
Prom 113:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    n, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <int$->
  void                    Return             l     %0.3
Prom 114:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     rep.int, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .findInheritedMethods[0x55de34f8f4b0]_p115, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .findInheritedMethods[0x55de34f8f4b0]_p116, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <val?_>
  void                    Return             l     %0.4
Prom 115:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    m, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  val?            %0.4  = Colon              !     1L, %0.3, e0.0   <val?_>
  void                    Return             l     %0.4
Prom 116:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    n, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 123:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    sig, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <(str|vec)>
  void                    Return             l     %0.3

│ .findInheritedMethods[0x55de34f8f4b0]                                        │
└──────────────────────────────────────────────────────────────────────────────┘
