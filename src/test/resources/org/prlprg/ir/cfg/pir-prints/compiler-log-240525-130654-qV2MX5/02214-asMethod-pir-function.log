
┌──────────────────────────────────────────────────────────────────────────────┐
│ asMethod[0x55de352e6240]                                                     │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;NonRefl0 miss: 2                     │
│ Properties:                                                                  │
├────── Final PIR Version
asMethod[0x55de352e6240]
BB0
  val?^           %0.0  = LdArg                    0
  val?^ | miss    %0.1  = LdVar              eR    dim, <env 0x55de2a7fa958>
  lgl$#-          %0.2  = Identical                <blt dim>, %0.1   <true>
  void                    Branch                   %0.2 -> BB39 (if true) | BB40 (if false)
BB39   <- [0]
  env             e39.0 = MkEnv              l     from=%0.0, to(miss)="diagonalMatrix", strict(miss)=true, parent=<env 0x55de2a7fa958>, context 1
  val?            %39.1 = Force!<lazy>       !vr   %0.0,    <other>
  val?            %39.2 = CallBuiltin        !v    dim(%39.1) e39.0   <int->
  void                    StVar              lW    d, %39.2, e39.0
  lgl$#-          %39.4 = IsType                   %39.2 isA val+   <true>
  lgl$#-          %39.5 = IsType                   %39.2 isA int-
  val             %39.6 = ChkMissing         e     %39.2
  void                    Branch                   %39.4 -> BB41 (if true) | BB42 (if false)
BB40   <- [0]
  env             e40.0 = (MkEnv)            l     from=%0.0, to(miss)="diagonalMatrix", strict(miss)=true, parent=<env 0x55de2a7fa958>, context 1
  fs              %40.1 = FrameState         R     0x55de2fb92130+0: [], env=e40.0
  void                    Deopt              !v    %40.1, DeadBranchReached@0x55de2f5864a0[Test#0], %0.2
BB41   <- [39]
  void                    Branch                   %39.5 -> BB43 (if true) | BB44 (if false)
BB42   <- [39]
  void                    Nop                !     
  lgl$#-          %42.1 = %39.4
  dr              %42.2 = DeadBranchReached@0x55de2f5864a0[Test#1]
  goto BB3
BB43   <- [41]
  int-            %43.0 = CastType           d     dn %39.2
  int$-           %43.1 = Extract1_1D        wed   %43.0, 1, elided   <int$->
  int$-           %43.2 = Extract1_1D        wed   %43.0, 2, elided   <int$->
  void                    StVar              lW    n, %43.2, e39.0
  lgl$-           %43.4 = Neq                d     %43.1, %43.2, elided   <lgl$->
  lgl$#-          %43.5 = CheckTrueFalse     e     %43.4
  void                    Branch                   %43.5 -> BB37 (if true) | BB7 (if false)
BB44   <- [41]
  void                    Nop                !     
  val?            %44.1 = %39.2
  dr              %44.2 = Typecheck@0x55de2f5864a0[Type#2]
  goto BB3
BB3   <- [42, 44]
  val?^ | miss    %3.0  = Phi                      %42.1:BB42, %44.1:BB44
  val?^ | miss    %3.1  = %3.0
  dr              %3.2  = Phi                      %42.2:BB42, %44.2:BB44
  dr              %3.3  = %3.2
  fs              %3.4  = FrameState         R     0x55de2fb92130+105: [], env=e39.0
  void                    Deopt              !v    %3.4, %3.3, %3.1   !
BB37   <- [43]
  (cls|spec|blt)  %37.0 = LdFun              !v    stop, e39.0
  fs              %37.1 = FrameState         R     0x55de2fb92130+255: [%37.0], env=e39.0
  void                    Deopt              !v    %37.1, DeadCall@0x55de2f5864a0[Call#1], %37.0   !
BB7   <- [43]
  val?^ | miss    %7.0  = LdVar              eR    isDiagonal, e39.0
  lgl$#-          %7.1  = Identical                %7.0, function(object) <(rir::DispatchTable*)0x55de2|...>
  void                    Branch                   %7.1 -> BB45 (if true) | BB46 (if false)
BB45   <- [7]
  prom-           %45.0 = MkArg                    unboundValue, asMethod[0x55de352e6240]_p2, e39.0
  val?            %45.1 = StaticCall         !v    isDiagonal[0x55de33860b10](%45.0) e39.0   <lgl$->
  lgl$#-          %45.2 = IsType                   %45.1 isA lgl$-
  void                    Branch                   %45.2 -> BB47 (if true) | BB48 (if false)
BB46   <- [7]
  fs              %46.0 = FrameState         R     0x55de2fb92130+232: [%43.1, %43.2], env=e39.0
  void                    Deopt              !v    %46.0, CallTarget@0x55de2f5864a0[Call#2], %7.0   !
BB47   <- [45]
  lgl$-           %47.0 = CastType           d     dn %45.1
  lgl$-           %47.1 = Not                d     %47.0, elided
  lgl$#-          %47.2 = CheckTrueFalse     e     %47.1
  void                    Branch                   %47.2 -> BB36 (if true) | BB10 (if false)
BB48   <- [45]
  void                    Nop                !     
  val?            %48.1 = %45.1
  dr              %48.2 = Typecheck@0x55de2f5864a0[Type#9]
  goto BB8
BB36   <- [47]
  (cls|spec|blt)  %36.0 = LdFun              !v    stop, e39.0
  fs              %36.1 = FrameState         R     0x55de2fb92130+337: [%36.0], env=e39.0
  void                    Deopt              !v    %36.1, DeadCall@0x55de2f5864a0[Call#3], %36.0   !
BB10   <- [47]
  val?^ | miss    %10.0 = LdVar              eR    diag, e39.0
  lgl$#-          %10.1 = Identical                %10.0, function(x=1, nrow, ncol, names=TRUE) <(rir::D|...>
  void                    Branch                   %10.1 -> BB49 (if true) | BB50 (if false)
BB8   <- [48, 50]
  val?^ | miss    %8.0  = Phi                      %48.1:BB48, %50.1:BB50
  val?^ | miss    %8.1  = %8.0
  dr              %8.2  = Phi                      %48.2:BB48, %50.2:BB50
  dr              %8.3  = %8.2
  fs              %8.4  = FrameState         R     0x55de2fb92130+315: [%45.1], env=e39.0
  void                    Deopt              !v    %8.4, %8.3, %8.1   !
BB49   <- [10]
  prom-           %49.0 = MkArg                    unboundValue, asMethod[0x55de352e6240]_p3, e39.0
  val?            %49.1 = StaticCall         !v    diag[0x55de28a6f560](%49.0) e39.0   <real$->
  lgl$#-          %49.2 = IsType                   %49.1 isA real$-
  void                    Branch                   %49.2 -> BB51 (if true) | BB52 (if false)
BB50   <- [10]
  void                    Nop                !     
  val?^ | miss    %50.1 = %10.0
  dr              %50.2 = CallTarget@0x55de2f5864a0[Call#4]
  goto BB8
BB51   <- [49]
  real$-          %51.0 = CastType           d     dn %49.1
  void                    StVar              lW    x, %51.0, e39.0
  (cls|spec|blt)  %51.2 = LdFun              !v    names<-, <0x55de2854f438>, e39.0
  val?^ | miss    %51.3 = LdVar              eR    x, e39.0
  lgl$#-          %51.4 = IsType                   %51.3 isA real$-
  void                    Branch                   %51.4 -> BB53 (if true) | BB54 (if false)
BB52   <- [49]
  fs              %52.0 = FrameState         R     0x55de2fb92130+397: [%49.1], env=e39.0
  void                    Deopt              !v    %52.0, Typecheck@0x55de2f5864a0[Type#11], %49.1   !
BB53   <- [51]
  real$-          %53.0 = CastType           d     dn %51.3
  val?            %53.1 = NamedCall          !v    %51.2(%53.0, value=nil) e39.0   <real$->
  lgl$#-          %53.2 = IsType                   %53.1 isA real$-
  void                    Branch                   %53.2 -> BB55 (if true) | BB56 (if false)
BB54   <- [51]
  fs              %54.0 = FrameState         R     0x55de2fb92130+417: [nil], env=e39.0
  void                    Deopt              !v    %54.0, Typecheck@0x55de2f5864a0[Type#12], %51.3   !
BB55   <- [53]
  real$-          %55.0 = CastType           d     dn %53.1
  void                    StVar              lW    x, %55.0, e39.0
  val?^ | miss    %55.2 = LdVar              eR    is.logical, e39.0
  lgl$#-          %55.3 = Identical                <blt is.logical>, %55.2   <true>
  void                    Branch                   %55.3 -> BB57 (if true) | BB58 (if false)
BB56   <- [53]
  fs              %56.0 = FrameState         R     0x55de2fb92130+476: [%53.1], env=e39.0
  void                    Deopt              !v    %56.0, Typecheck@0x55de2f5864a0[Type#14], %53.1   !
BB57   <- [55]
  void                    StVar              lW    cl, "ddiMatrix", e39.0
  val?^ | miss    %57.1 = LdVar              eR    allTrue, e39.0
  lgl$#-          %57.2 = Identical                %57.1, function(x) <(rir::DispatchTable*)0x55de2b49f3|...>
  void                    Branch                   %57.2 -> BB59 (if true) | BB60 (if false)
BB58   <- [55]
  fs              %58.0 = FrameState         R     0x55de2fb92130+485: [], env=e39.0
  void                    Deopt              !v    %58.0, DeadBranchReached@0x55de2f5864a0[Test#3], %55.3   !
BB59   <- [57]
  prom-           %59.0 = MkArg                    unboundValue, asMethod[0x55de352e6240]_p5, e39.0
  ct              %59.1 = PushContext        lCL   %59.0, allTrue(==(x, 1)), function(x) <(rir::DispatchTable*)0x55de2b49f3|...>, e39.0
  val?^           %59.2 = CastType                 up %59.0
  val?^ | miss    %59.3 = LdVar              eR    all, <env 0x55de2a7fa958>
  lgl$#-          %59.4 = Identical                <blt all>, %59.3   <true>
  void                    Branch                   %59.4 -> BB61 (if true) | BB62 (if false)
BB60   <- [57]
  fs              %60.0 = FrameState         R     0x55de2fb92130+602: [], env=e39.0
  void                    Deopt              !v    %60.0, CallTarget@0x55de2f5864a0[Call#7], %57.1   !
BB61   <- [59]
  env             e61.0 = MkEnv              l     x=%59.2, parent=<env 0x55de2a7fa958>, context 1
  val?            %61.1 = Force!<lazy>       !vL   %59.2, e61.0   <lgl$->
  val?            %61.2 = CallBuiltin        !v    all(%61.1) e61.0   <lgl$->
  lgl$#-          %61.3 = IsType                   %61.2 isA lgl$-
  void                    Branch                   %61.3 -> BB63 (if true) | BB64 (if false)
BB62   <- [59]
  fs              %62.0 = FrameState         R     0x55de2fb92130+634: [], env=e39.0
  env             e62.1 = MkEnv              l     x=%59.2, parent=<env 0x55de2a7fa958>, context 1
  fs              %62.2 = FrameState         R     0x55de345d0b50+17: [<blt all>, %59.4], env=e62.1, next=%62.0
  void                    Deopt              !v    %62.2, DeadBranchReached@0x55de2f70bbe8[Test#0], %59.4   !
BB63   <- [61]
  lgl$-           %63.0 = CastType           d     dn %61.2
  lgl$-           %63.1 = AsLogical                %63.0
  lgl$#-          %63.2 = Identical                %63.1, false
  void                    Branch                   %63.2 -> BB35 (if true) | BB25 (if false)
BB64   <- [61]
  void                    Nop                !     
  val?            %64.1 = %61.2
  dr              %64.2 = Typecheck@0x55de2f70bbe8[Type#2]
  goto BB23
BB35   <- [63]
  void                    Nop                !     
  lgl$-           %35.1 = %63.1
  goto BB28
BB25   <- [63]
  val?^ | miss    %25.0 = LdVar              eR    anyNA, e61.0
  lgl$#-          %25.1 = Identical                <blt anyNA>, %25.0   <true>
  void                    Branch                   %25.1 -> BB65 (if true) | BB66 (if false)
BB23   <- [64, 66, 68]
  val?^ | miss    %23.0 = Phi                      %64.1:BB64, %66.1:BB66, %68.1:BB68
  val?^ | miss    %23.1 = %23.0
  dr              %23.2 = Phi                      %64.2:BB64, %66.2:BB66, %68.2:BB68
  dr              %23.3 = %23.2
  fs              %23.4 = FrameState         R     0x55de2fb92130+634: [], env=e39.0
  fs              %23.5 = FrameState         R     0x55de345d0b50+91: [%61.2], env=e61.0, next=%23.4
  void                    Deopt              !v    %23.5, %23.3, %23.1   !
BB28   <- [35, 69]
  lgl$-           %28.0 = Phi                      %69.4:BB69, %35.1:BB35
  lgl$-           %28.1 = %28.0
  val?            %28.2 = PopContext         C     %28.1, %59.1   <lgl$->
  lgl$#-          %28.3 = IsType                   %28.2 isA lgl$-
  void                    Branch                   %28.3 -> BB71 (if true) | BB72 (if false)
BB65   <- [25]
  val?^ | miss    %65.0 = LdVar              eR    x, e61.0
  lgl$#-          %65.1 = IsType                   %65.0 isA lgl$~-
  void                    Branch                   %65.1 -> BB67 (if true) | BB68 (if false)
BB66   <- [25]
  void                    Nop                !     
  lgl$#-          %66.1 = %25.1
  dr              %66.2 = DeadBranchReached@0x55de2f70bbe8[Test#1]
  goto BB23
BB71   <- [28]
  lgl$-           %71.0 = CastType           d     dn %28.2
  void                    StVar              lW    uni, %71.0, e39.0
  (cls|spec|blt)  %71.2 = LdFun              !v    storage.mode<-, <0x55de2855bac8>, e39.0
  val?^ | miss    %71.3 = LdVar              eR    x, e39.0
  lgl$#-          %71.4 = IsType                   %71.3 isA real$-
  void                    Branch                   %71.4 -> BB73 (if true) | BB74 (if false)
BB72   <- [28]
  fs              %72.0 = FrameState         R     0x55de2fb92130+634: [%28.2], env=e39.0
  void                    Deopt              !v    %72.0, Typecheck@0x55de2f5864a0[Type#18], %28.2   !
BB67   <- [65]
  lgl$~-          %67.0 = CastType           d     dn %65.0
  lgl$-           %67.1 = Force!<wrapped>          %67.0,    <lgl$->
  val+            %67.2 = CallSafeBuiltin    wed   anyNA(%67.1)    <lgl$->
  lgl$#-          %67.3 = IsType                   %67.2 isA lgl$-
  void                    Branch                   %67.3 -> BB69 (if true) | BB70 (if false)
BB68   <- [65]
  void                    Nop                !     
  val?^ | miss    %68.1 = %65.0
  dr              %68.2 = Typecheck@0x55de2f70bbe8[Type#4]
  goto BB23
BB73   <- [71]
  real$-          %73.0 = CastType           d     dn %71.3
  void                    Visible            v     
  val?            %73.2 = NamedCall          !     %71.2(%73.0, value="double") e39.0
  void                    StVar              lW    x, %73.2, e39.0
  val?^ | miss    %73.4 = LdVar              eR    new, e39.0
  lgl$#-          %73.5 = Identical                %73.4, function(Class, ...) <(rir::DispatchTable*)0x5|...>
  void                    Branch                   %73.5 -> BB75 (if true) | BB76 (if false)
BB74   <- [71]
  fs              %74.0 = FrameState         R     0x55de2fb92130+654: ["double"], env=e39.0
  void                    Deopt              !v    %74.0, Typecheck@0x55de2f5864a0[Type#19], %71.3   !
BB69   <- [67]
  lgl$-           %69.0 = CastType           d     dn %67.2
  lgl$-           %69.1 = Not                d     %69.0, elided
  lgl$-           %69.2 = AsLogical                %69.1
  lgl$-           %69.3 = LAnd                     %63.1, %69.2
  lgl$-           %69.4 = %69.3
  goto BB28
BB70   <- [67]
  fs              %70.0 = FrameState         R     0x55de2fb92130+634: [], env=e39.0
  fs              %70.1 = FrameState         R     0x55de345d0b50+194: [%63.1, %67.2], env=e61.0, next=%70.0
  void                    Deopt              !v    %70.1, Typecheck@0x55de2f70bbe8[Type#5], %67.2   !
BB75   <- [73]
  prom-           %75.0 = MkArg                    unboundValue, asMethod[0x55de352e6240]_p7, e39.0
  prom-           %75.1 = MkArg                    unboundValue, asMethod[0x55de352e6240]_p8, e39.0
  prom-           %75.2 = MkArg                    unboundValue, asMethod[0x55de352e6240]_p11, e39.0
  prom-           %75.3 = MkArg                    unboundValue, asMethod[0x55de352e6240]_p12, e39.0
  prom-           %75.4 = MkArg                    unboundValue, asMethod[0x55de352e6240]_p13, e39.0
  dots-           %75.5 = DotsList           l     Dim=%75.1, diag=%75.2, x=%75.3, Dimnames=%75.4
  val?            %75.6 = StaticCall         !     new[0x55de2aa09740](%75.0, %75.5) { 0 1n 2n 3n 4n } e39.0   <other>
  void                    Return             l     %75.6
BB76   <- [73]
  fs              %76.0 = FrameState         R     0x55de2fb92130+722: [], env=e39.0
  void                    Deopt              !v    %76.0, CallTarget@0x55de2f5864a0[Call#10], %73.4   !
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    from, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <other>
  void                    Return             l     %0.3
Prom 3:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    from, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <other>
  void                    Return             l     %0.3
Prom 5:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    x, e0.0
  val?            %0.2  = Force<value>       !v    %0.1, e0.0   <real$->
  void                    Visible            v     
  val?            %0.4  = Eq                 !     %0.2, 1, e0.0   <lgl$->
  void                    Return             l     %0.4
Prom 7:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    cl, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <str$->
  void                    Return             l     %0.3
Prom 8:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     c, <0x55de2854f940>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, asMethod[0x55de352e6240]_p9, e0.0
  prom-           %0.3  = MkArg                    unboundValue, asMethod[0x55de352e6240]_p10, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <int->
  void                    Return             l     %0.4
Prom 9:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    n, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <int$->
  void                    Return             l     %0.3
Prom 10:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    n, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<value>       !     %0.1, e0.0   <int$->
  void                    Return             l     %0.3
Prom 11:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    uni, e0.0
  val?            %0.2  = Force<value>       !v    %0.1, e0.0   <lgl$->
  lgl$#-          %0.3  = CheckTrueFalse     we    %0.2
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  void                    Visible            v     
  str$#-          %2.1  = "U"
  goto BB3
BB4   <- [0]
  void                    Visible            v     
  str$#-          %4.1  = "N"
  goto BB3
BB3   <- [4, 2]
  str$#-          %3.0  = Phi                      %4.1:BB4, %2.1:BB2
  str$#-          %3.1  = %3.0
  void                    Return             l     %3.1
Prom 12:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    uni, e0.0
  val?            %0.2  = Force<value>       !v    %0.1, e0.0   <lgl$->
  lgl$#-          %0.3  = CheckTrueFalse     we    %0.2
  void                    Branch                   %0.3 -> BB2 (if true) | BB4 (if false)
BB2   <- [0]
  val?^ | miss    %2.0  = LdVar              eR    x, e0.0
  val?            %2.1  = Force              !v    %2.0, e0.0   <val?_>
  val?            %2.2  = Extract1_1D        !v    %2.1, false, e0.0   <val?_>
  void                    Visible            v     
  val?            %2.4  = %2.2
  goto BB3
BB4   <- [0]
  val?^ | miss    %4.0  = LdVar              eR    x, e0.0
  void                    Visible            v     
  val?            %4.2  = Force<value>       !     %4.0, e0.0   <real$->
  val?            %4.3  = %4.2
  goto BB3
BB3   <- [4, 2]
  val?            %3.0  = Phi                      %4.3:BB4, %2.4:BB2
  val?            %3.1  = %3.0
  void                    Return             l     %3.1
Prom 13:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     @, <0x55de2854ebd8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, asMethod[0x55de352e6240]_p14, e0.0
  prom-           %0.3  = MkArg                    unboundValue, asMethod[0x55de352e6240]_p15, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <vec->
  void                    Return             l     %0.4
Prom 14:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    from, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 15:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    Dimnames, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3

│ asMethod[0x55de352e6240]                                                     │
└──────────────────────────────────────────────────────────────────────────────┘
