
┌──────────────────────────────────────────────────────────────────────────────┐
│ .validity.hclust[0x558f3ada9130]                                             │
│ Context: !ExpMi,CorrOrd,!TMany,Argmatch;NonRefl0,NonRefl1,NonRefl2,!Obj1,!Obj2│
│ Properties:                                                                  │
├────── Final PIR Version
.validity.hclust[0x558f3ada9130]
BB0
  val?^           %0.0  = LdArg                    2
  val?^           %0.1  = LdArg                    1
  val?^           %0.2  = LdArg                    0
  val?^ | miss    %0.3  = LdVar              eR    is.matrix, <env 0x558f3a3ecb50>
  lgl$#-          %0.4  = Identical                <blt is.matrix>, %0.3   <true>
  void                    Branch                   %0.4 -> BB47 (if true) | BB48 (if false)
BB47   <- [0]
  env             e47.0 = MkEnv              l     x=%0.2, merge=%0.1, order=%0.0, parent=<env 0x558f3a3ecb50>, context 1
  val+            %47.1 = Force!<lazy>       !vr   %0.1,    <int_>
  lgl$#-          %47.2 = IsType                   %47.1 isA int_
  void                    Branch                   %47.2 -> BB49 (if true) | BB50 (if false)
BB48   <- [0]
  env             e48.0 = (MkEnv)            l     x=%0.2, merge=%0.1, order=%0.0, parent=<env 0x558f3a3ecb50>, context 1
  fs              %48.1 = FrameState         R     0x558f3a0ab2f0+17: [<blt is.matrix>, %0.4], env=e48.0
  void                    Deopt              !v    %48.1, DeadBranchReached@0x558f3e46af00[Test#0], %0.4
BB49   <- [47]
  int_            %49.0 = CastType           d     dn %47.1
  lgl$#-          %49.1 = CallSafeBuiltin    wed   is.matrix(%49.0)    <lgl$->
  lgl$#-          %49.2 = Not                d     %49.1, elided
  void                    Branch                   %49.1 -> BB43 (if true) | BB7 (if false)
BB50   <- [47]
  fs              %50.0 = FrameState         R     0x558f3a0ab2f0+69: [<blt is.matrix>, %47.1], env=e47.0
  void                    Deopt              !v    %50.0, Typecheck@0x558f3e46af00[Type#4], %47.1
BB43   <- [49]
  val?^ | miss    %43.0 = LdVar              eR    ncol, <env 0x558f3a3ecb50>
  lgl$#-          %43.1 = Identical                %43.0, function(x) <(rir::DispatchTable*)0x558f3dfb37|...>
  void                    Branch                   %43.1 -> BB51 (if true) | BB52 (if false)
BB7   <- [49]
  void                    Nop                !     
  lgl$#-          %7.1  = %49.2
  goto BB8
BB51   <- [43]
  val+            %51.0 = CallSafeBuiltin    wed   dim(%49.0)    <int->
  val?            %51.1 = Extract1_1D        wed   %51.0, 2L, elided   <int$->
  lgl$#-          %51.2 = IsType                   %51.1 isA int$-
  void                    Branch                   %51.2 -> BB53 (if true) | BB54 (if false)
BB52   <- [43]
  fs              %52.0 = FrameState         R     0x558f3a0ab2f0+91: [%49.1], env=e47.0
  void                    Deopt              !v    %52.0, CallTarget@0x558f3e46af00[Call#2], %43.0
BB8   <- [7, 53]
  lgl$-           %8.0  = Phi                      %53.4:BB53, %7.1:BB7
  lgl$-           %8.1  = %8.0
  lgl$#-          %8.2  = CheckTrueFalse     e     %8.1
  void                    Branch                   %8.2 -> BB42 (if true) | BB11 (if false)
BB53   <- [51]
  int$-           %53.0 = CastType           d     dn %51.1
  lgl$-           %53.1 = Neq                d     %53.0, 2, elided   <lgl$->
  lgl$-           %53.2 = AsLogical                %53.1
  lgl$-           %53.3 = LOr                      %49.2, %53.2
  lgl$-           %53.4 = %53.3
  goto BB8
BB54   <- [51]
  fs              %54.0 = FrameState         R     0x558f3a0ab2f0+136: [%49.2], env=e47.0
  prom-           %54.1 = MkArg                    %49.0, .validity.hclust[0x558f3ada9130]_p0 (!refl), e47.0
  val?~           %54.2 = CastType                 up %54.1
  env             e54.3 = (MkEnv)            l     x=%54.2, parent=R_BaseNamespace, context 0
  fs              %54.4 = FrameState         R     0x558f3e48fa70+134: [%51.1], env=e54.3, next=%54.0
  void                    Deopt              !v    %54.4, Typecheck@0x558f3eaee1b8[Type#3], %51.1
BB42   <- [8]
  void                    Visible            v     
  str$#-          %42.1 = "invalid dendrogram"
  goto BB37
BB11   <- [8]
  val?^ | miss    %11.0 = LdVar              eR    any, <env 0x558f3a3ecb50>
  lgl$#-          %11.1 = Identical                <blt any>, %11.0   <true>
  void                    Branch                   %11.1 -> BB55 (if true) | BB56 (if false)
BB37   <- [39, 40, 41, 42, 36]
  (lgl|str)$#-    %37.0 = Phi                      %36.2:BB36, %39.1:BB39, %40.1:BB40, %41.1:BB41, %42.1:BB42
  (lgl|str)$#-    %37.1 = %37.0
  void                    Return             l     %37.1
BB55   <- [11]
  val?^ | miss    %55.0 = LdVar              eR    as.integer, <env 0x558f3a3ecb50>
  lgl$#-          %55.1 = Identical                <blt as.integer>, %55.0   <true>
  void                    Branch                   %55.1 -> BB57 (if true) | BB58 (if false)
BB56   <- [11]
  void                    Nop                !     
  lgl$#-          %56.1 = %11.1
  dr              %56.2 = DeadBranchReached@0x558f3e46af00[Test#1]
  goto BB9
BB57   <- [55]
  lgl$#-          %57.0 = IsType                   %0.1 isA int~_
  void                    Branch                   %57.0 -> BB59 (if true) | BB60 (if false)
BB58   <- [55]
  void                    Nop                !     
  lgl$#-          %58.1 = %55.1
  dr              %58.2 = DeadBranchReached@0x558f3e46af00[Test#2]
  goto BB9
BB9   <- [56, 58, 60]
  val?^ | miss    %9.0  = Phi                      %56.1:BB56, %58.1:BB58, %60.1:BB60
  val?^ | miss    %9.1  = %9.0
  dr              %9.2  = Phi                      %56.2:BB56, %58.2:BB58, %60.2:BB60
  dr              %9.3  = %9.2
  fs              %9.4  = FrameState         R     0x558f3a0ab2f0+155: [%8.1], env=e47.0
  void                    Deopt              !v    %9.4, %9.3, %9.1
BB59   <- [57]
  int-            %59.0 = CallSafeBuiltin    wed   as.integer(%49.0)    <int->
  lgl             %59.1 = Neq                wed   %59.0, %49.0, elided   <lgl_>
  val?            %59.2 = CallBuiltin        !v    any(%59.1) e47.0   <lgl$->
  lgl$#-          %59.3 = IsType                   %59.2 isA lgl$-
  void                    Branch                   %59.3 -> BB61 (if true) | BB62 (if false)
BB60   <- [57]
  void                    Nop                !     
  val?^           %60.1 = %0.1
  dr              %60.2 = Typecheck@0x558f3e46af00[Type#14]
  goto BB9
BB61   <- [59]
  lgl$-           %61.0 = CastType           d     dn %59.2
  lgl$#-          %61.1 = CheckTrueFalse     e     %61.0
  void                    Branch                   %61.1 -> BB41 (if true) | BB14 (if false)
BB62   <- [59]
  void                    Nop                !     
  val?            %62.1 = %59.2
  dr              %62.2 = Typecheck@0x558f3e46af00[Type#18]
  goto BB12
BB41   <- [61]
  void                    Visible            v     
  str$#-          %41.1 = "'merge' component in dendrogram must be integer"
  goto BB37
BB14   <- [61]
  val?^ | miss    %14.0 = LdVar              eR    nrow, e47.0
  lgl$#-          %14.1 = Identical                %14.0, function(x) <(rir::DispatchTable*)0x558f3e1bf3|...>
  void                    Branch                   %14.1 -> BB63 (if true) | BB64 (if false)
BB12   <- [62, 64]
  val?^ | miss    %12.0 = Phi                      %62.1:BB62, %64.1:BB64
  val?^ | miss    %12.1 = %12.0
  dr              %12.2 = Phi                      %62.2:BB62, %64.2:BB64
  dr              %12.3 = %12.2
  fs              %12.4 = FrameState         R     0x558f3a0ab2f0+366: [%59.2], env=e47.0
  void                    Deopt              !v    %12.4, %12.3, %12.1   !
BB63   <- [14]
  val?^ | miss    %63.0 = LdVar              eR    merge, e47.0
  val?            %63.1 = Force!<wrapped>    !v    %63.0, e47.0   <int_>
  lgl$#-          %63.2 = IsType                   %63.1 isA val?+
  void                    Branch                   %63.2 -> BB65 (if true) | BB66 (if false)
BB64   <- [14]
  void                    Nop                !     
  val?^ | miss    %64.1 = %14.0
  dr              %64.2 = CallTarget@0x558f3e46af00[Call#6]
  goto BB12
BB65   <- [63]
  val?+           %65.0 = CastType           d     dn %63.1   <(int|real)+>
  val+            %65.1 = CallSafeBuiltin    wed   dim(%65.0)    <int->
  val?            %65.2 = Extract1_1D        wed   %65.1, 1L, elided   <int$->
  lgl$#-          %65.3 = IsType                   %65.2 isA int$-
  void                    Branch                   %65.3 -> BB67 (if true) | BB68 (if false)
BB66   <- [63]
  fs              %66.0 = FrameState         R     0x558f3a0ab2f0+421: [], env=e47.0
  prom-           %66.1 = MkArg                    unboundValue, .validity.hclust[0x558f3ada9130]_p1, e47.0
  val?^           %66.2 = CastType                 up %66.1
  env             e66.3 = (MkEnv)            l     x=%66.2, parent=R_BaseNamespace, context 0
  fs              %66.4 = FrameState         R     0x558f3e4b5110+69: [<blt dim>], env=e66.3, next=%66.0
  fs              %66.5 = FrameState         R     0x558f3cb4e900+5(pr): [%63.1], env=e47.0, next=%66.4
  void                    Deopt              !v    %66.5, Typecheck@0x558f3eaee318[Type#1], %63.1   !
BB67   <- [65]
  int$-           %67.0 = CastType           d     dn %65.2
  void                    StVar              lW    n1, %67.0, e47.0
  int$-           %67.2 = Add                d     %67.0, 1L, elided   <int$->
  void                    StVar              lW    n, %67.2, e47.0
  val?^ | miss    %67.4 = LdVar              eR    length, e47.0
  lgl$#-          %67.5 = Identical                <blt length>, %67.4   <true>
  void                    Branch                   %67.5 -> BB69 (if true) | BB70 (if false)
BB68   <- [65]
  fs              %68.0 = FrameState         R     0x558f3a0ab2f0+421: [], env=e47.0
  prom-           %68.1 = MkArg                    %65.0, .validity.hclust[0x558f3ada9130]_p1 (!refl), e47.0
  val?~           %68.2 = CastType                 up %68.1
  env             e68.3 = (MkEnv)            l     x=%68.2, parent=R_BaseNamespace, context 0
  fs              %68.4 = FrameState         R     0x558f3e4b5110+134: [%65.2], env=e68.3, next=%68.0
  void                    Deopt              !v    %68.4, Typecheck@0x558f3eaee318[Type#3], %65.2   !
BB69   <- [67]
  (cls|spec|blt)  %69.0 = LdFun              !v    $, <0x558f39d9cc10>, e47.0
  prom-           %69.1 = MkArg                    unboundValue, .validity.hclust[0x558f3ada9130]_p2, e47.0
  prom-           %69.2 = MkArg                    unboundValue, .validity.hclust[0x558f3ada9130]_p3, e47.0
  val?            %69.3 = Call               !v    %69.0(%69.1, %69.2) e47.0   <real->
  lgl$#-          %69.4 = IsType                   %69.3 isA real-
  void                    Branch                   %69.4 -> BB71 (if true) | BB72 (if false)
BB70   <- [67]
  fs              %70.0 = FrameState         R     0x558f3a0ab2f0+470: [], env=e47.0
  void                    Deopt              !v    %70.0, DeadBranchReached@0x558f3e46af00[Test#3], %67.5   !
BB71   <- [69]
  real-           %71.0 = CastType           d     dn %69.3
  (int|real)$-    %71.1 = CallSafeBuiltin    wed   length(%71.0)    <int$->
  lgl$#-          %71.2 = IsType                   %71.1 isA int$-
  void                    Branch                   %71.2 -> BB73 (if true) | BB74 (if false)
BB72   <- [69]
  fs              %72.0 = FrameState         R     0x558f3a0ab2f0+567: [<blt length>, %69.3], env=e47.0
  void                    Deopt              !v    %72.0, Typecheck@0x558f3e46af00[Type#28], %69.3   !
BB73   <- [71]
  int$-           %73.0 = CastType           d     dn %71.1
  val?^ | miss    %73.1 = LdVar              eR    n1, e47.0
  lgl$#-          %73.2 = IsType                   %73.1 isA int$-
  void                    Branch                   %73.2 -> BB75 (if true) | BB76 (if false)
BB74   <- [71]
  void                    Nop                !     
  (int|real)$-    %74.1 = %71.1
  dr              %74.2 = Typecheck@0x558f3e46af00[Type#29]
  goto BB23
BB75   <- [73]
  int$-           %75.0 = CastType           d     dn %73.1
  lgl$-           %75.1 = Neq                d     %73.0, %75.0, elided   <lgl$->
  lgl$#-          %75.2 = CheckTrueFalse     e     %75.1
  void                    Branch                   %75.2 -> BB40 (if true) | BB25 (if false)
BB76   <- [73]
  void                    Nop                !     
  val?^ | miss    %76.1 = %73.1
  dr              %76.2 = Typecheck@0x558f3e46af00[Type#30]
  goto BB23
BB23   <- [74, 76]
  val?^ | miss    %23.0 = Phi                      %74.1:BB74, %76.1:BB76
  val?^ | miss    %23.1 = %23.0
  dr              %23.2 = Phi                      %74.2:BB74, %76.2:BB76
  dr              %23.3 = %23.2
  fs              %23.4 = FrameState         R     0x558f3a0ab2f0+589: [%71.1], env=e47.0
  void                    Deopt              !v    %23.4, %23.3, %23.1   !
BB40   <- [75]
  void                    Visible            v     
  str$#-          %40.1 = "'height' is of wrong length"
  goto BB37
BB25   <- [75]
  val?^ | miss    %25.0 = LdVar              eR    order, e47.0
  val?            %25.1 = Force!<lazy>       !v    %25.0, e47.0   <lgl$->
  lgl$-           %25.2 = AsLogical          e     %25.1
  lgl$#-          %25.3 = Identical                %25.2, false
  void                    Branch                   %25.3 -> BB31 (if true) | BB28 (if false)
BB31   <- [25]
  lgl$#-          %31.0 = CheckTrueFalse     e     %25.2
  void                    Branch                   %31.0 -> BB39 (if true) | BB32 (if false)
BB28   <- [25]
  val?^ | miss    %28.0 = LdVar              eR    length, e47.0
  lgl$#-          %28.1 = Identical                <blt length>, %28.0   <@?>
  void                    Branch                   %28.1 -> BB30 (if true) | BB29 (if false)
BB39   <- [31]
  void                    Visible            v     
  str$#-          %39.1 = "'order' is of wrong length"
  goto BB37
BB32   <- [31]
  val?^ | miss    %32.0 = LdVar              eR    identical, e47.0
  lgl$#-          %32.1 = Identical                %32.0, function(x, y, num.eq=TRUE, single.NA=TRUE, at|...>
  void                    Branch                   %32.1 -> BB77 (if true) | BB78 (if false)
BB30   <- [28]
  (cls|spec|blt)  %30.0 = LdFun              !v    $, e47.0
  fs              %30.1 = FrameState         R     0x558f3a0ab2f0+718: [%25.2, <blt length>, %30.0], env=e47.0
  void                    Deopt              !v    %30.1, DeadCall@0x558f3e46af00[Call#12], %30.0   !
BB29   <- [28]
  (cls|spec|blt)  %29.0 = LdFun              !v    length, e47.0
  fs              %29.1 = FrameState         R     0x558f3a0ab2f0+681: [%25.2, %29.0], env=e47.0
  void                    Deopt              !v    %29.1, DeadCall@0x558f3e46af00[Call#10], %29.0   !
BB77   <- [32]
  prom-           %77.0 = MkArg                    unboundValue, .validity.hclust[0x558f3ada9130]_p4, e47.0
  prom-           %77.1 = MkArg                    unboundValue, .validity.hclust[0x558f3ada9130]_p7, e47.0
  ct              %77.2 = PushContext        lCL   %77.0, %77.1, identical(sort(as.integer(merge)), c(-(((:(n, |...>, function(x, y, num.eq=TRUE, single.NA=TRUE, at|...>, e47.0
  val?^           %77.3 = CastType                 up %77.1
  val?^           %77.4 = CastType                 up %77.0
  env             e77.5 = MkEnv              l     x=%77.4, y=%77.3, num.eq(miss)=true, single.NA(miss)=true, attrib.as.set(miss)=true, ignore.bytecode(miss)=true, ignore.environment(miss)=false, ignore.srcref(miss)=true, parent=R_BaseNamespace, context 1
  val?            %77.6 = Force!<lazy>       !vL   %77.4, e77.5   <(int|str)->
  val?            %77.7 = Force!<lazy>       !vL   %77.3, e77.5   <(int|str)->
  val?            %77.8 = CallBuiltin        !v    identical(%77.6, %77.7, true, true, true, true, false, true) e77.5
  val?            %77.9 = PopContext         C     %77.8, %77.2   <lgl$->
  lgl$#-          %77.10 = IsType                   %77.9 isA lgl$-
  void                    Branch                   %77.10 -> BB79 (if true) | BB80 (if false)
BB78   <- [32]
  fs              %78.0 = FrameState         R     0x558f3a0ab2f0+641: [%25.1], env=e47.0
  void                    Deopt              !v    %78.0, CallTarget@0x558f3e46af00[Call#13], %32.0   !
BB79   <- [77]
  lgl$-           %79.0 = CastType           d     dn %77.9
  lgl$#-          %79.1 = CheckTrueFalse     e     %79.0
  void                    Branch                   %79.1 -> BB38 (if true) | BB35 (if false)
BB80   <- [77]
  fs              %80.0 = FrameState         R     0x558f3a0ab2f0+854: [%77.9], env=e47.0
  void                    Deopt              !v    %80.0, Typecheck@0x558f3e46af00[Type#51], %77.9   !
BB38   <- [79]
  void                    Visible            v     
  lgl$#-          %38.1 = true
  goto BB36
BB35   <- [79]
  void                    Visible            v     
  str$#-          %35.1 = "'merge' matrix has invalid contents"
  goto BB36
BB36   <- [35, 38]
  (lgl|str)$#-    %36.0 = Phi                      %35.1:BB35, %38.1:BB38
  (lgl|str)$#-    %36.1 = %36.0
  (lgl|str)$#-    %36.2 = %36.1
  goto BB37
Prom 0:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    merge, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <int_>
  void                    Return             l     %0.3
Prom 1:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    merge, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <int_>
  void                    Return             l     %0.3
Prom 2:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    x, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<lazy>        !     %0.1, e0.0   <vec>
  void                    Return             l     %0.3
Prom 3:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    height, e0.0
  void                    Visible            v     
  val?            %0.3  = Force              !     %0.1, e0.0   <val?_>
  void                    Return             l     %0.3
Prom 4:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     sort, <0x558f3b7255f8>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .validity.hclust[0x558f3ada9130]_p5, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <int->
  void                    Return             l     %0.3
Prom 5:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     as.integer, <0x558f39daa008>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .validity.hclust[0x558f3ada9130]_p6, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <int->
  void                    Return             l     %0.3
Prom 6:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    merge, e0.0
  void                    Visible            v     
  val?            %0.3  = Force<wrapped>     !     %0.1, e0.0   <int_>
  void                    Return             l     %0.3
Prom 7:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     c, <0x558f39d9d940>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .validity.hclust[0x558f3ada9130]_p8, e0.0
  prom-           %0.3  = MkArg                    unboundValue, .validity.hclust[0x558f3ada9130]_p9, e0.0
  val?            %0.4  = Call               !     %0.1(%0.2, %0.3) e0.0   <int->
  void                    Return             l     %0.4
Prom 8:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    n, e0.0
  val?            %0.2  = Force<value>       !v    %0.1, e0.0   <int$->
  val?            %0.3  = Colon              !v    %0.2, 1L, e0.0   <int->
  void                    Visible            v     
  val?            %0.5  = Minus              !     %0.3, e0.0
  void                    Return             l     %0.5
Prom 9:
BB0
  env             e0.0  = LdFunctionEnv            
  (cls|spec|blt)  %0.1  = LdFun              !     seq_len, <0x558f39db1710>, e0.0
  prom-           %0.2  = MkArg                    unboundValue, .validity.hclust[0x558f3ada9130]_p10, e0.0
  val?            %0.3  = Call               !     %0.1(%0.2) e0.0   <int->
  val?            %0.4  = Plus               !     %0.3, e0.0
  void                    Return             l     %0.4
Prom 10:
BB0
  env             e0.0  = LdFunctionEnv            
  val?^ | miss    %0.1  = LdVar              eR    n, e0.0
  val?            %0.2  = Force<value>       !v    %0.1, e0.0   <int$->
  void                    Visible            v     
  val?            %0.4  = Sub                !     %0.2, 2L, e0.0   <int$->
  void                    Return             l     %0.4

│ .validity.hclust[0x558f3ada9130]                                             │
└──────────────────────────────────────────────────────────────────────────────┘
