#!/bin/bash

set -Eeuo pipefail

# Get path and OS

SCRIPT_DIR=$(cd "$(dirname "$0")" && pwd)
BASE_DIR=$(cd "$SCRIPT_DIR/.." && pwd)

if [ ! -d "$BASE_DIR" ]; then
  echo "Could not determine absolute dir of $0"
  echo "Maybe accessed with symlink"
  exit 1
fi

if [[ "$OSTYPE" == "darwin"* ]]; then
  USING_OSX=1
else
  USING_OSX=0
fi

# Get command arguments

function usage() {
  echo "Usage: $0 [-d] <R sources path>"
}

R_DEBUG=0
R_DIR=""
while [[ $# -gt 0 ]]; do
  case $1 in
  -d | --debug)
    echo "Building a debug version of R"
    R_DEBUG=1
    shift
    ;;
  -*)
    echo "Unknown option $1"
    usage
    exit 1
    ;;
  *)
    if [[ -z "$R_DIR" ]]; then
      R_DIR="$1"
      shift
    else
      echo "Unknown options $*"
      usage
      exit 1
    fi
    ;;
  esac
done

if [[ -z "$R_DIR" ]]; then
  usage
  exit 1
fi

# Set compilation options

if [[ $R_DEBUG -eq 1 ]]; then
  if [[ $USING_OSX -eq 1 ]]; then
    OPT="-g -O0"
  else
    OPT="-ggdb3 -O0"
  fi
else
  OPT="-g -O2"
fi

if [[ $USING_OSX -eq 1 ]]; then
  HOMEBREW_DIR="/opt/homebrew"
  if [[ ! -d "$HOMEBREW_DIR" ]]; then
    HOMEBREW_DIR="/usr/local"
  fi

  # From https://groups.google.com/g/r-sig-mac/c/4smMULZWKPc?pli=1
  export CC="clang -arch arm64"
  export CXX="clang++ -arch arm64"
  export OBJC="clang -arch arm64"
  export FC="gfortran -arch arm64"
  export CFLAGS="-falign-functions=64 -Wall $OPT"
  export CXXFLAGS="falign-functions=64 -Wall $OPT"
  export OBJCFLAGS="-falign-functions=64 -Wall $OPT"
  export FCFLAGS="-Wall $OPT"
  export F77FLAGS="-Wall $OPT"
  export LDFLAGS="-L$HOMEBREW_DIR/lib"
  export CPPFLAGS="-I$HOMEBREW_DIR/include"
  CONFIGURE_ARGS="
    --enable-R-shlib
    --with-internal-tzcode
    --with-ICU=no
    --with-x=no
    --enable-memory-profiling
    --enable-R-framework
    --with-2025blas
    --build=aarch64-apple-darwin20"
else
  export CFLAGS="$OPT"
  export CXXFLAGS="$OPT"
  export CPPFLAGS="$OPT"
  CONFIGURE_ARGS=""
fi

# Run

echo "Building in $R_DIR"

# Fix repo

if [[ ! -f ${R_DIR}/.git ]]; then
  echo "-> update submodules"
  git submodule update --init
fi

cd "$R_DIR"

if [[ $(git diff --shortstat 2>/dev/null | tail -n1) != "" ]]; then
  echo "** warning: $R_DIR repo is dirty"
fi

# Download base ("recommended") R packages (only if necessary)

tools/rsync-recommended

# Configure (only if necessary)

if [[ ! -f Makefile ]]; then
  echo "-> configure"
  ./configure $CONFIGURE_ARGS
fi

# Patch config files (only if necessary)

if [ ! -f doc/FAQ ]; then
  touch doc/FAQ
fi

if [ ! -f "$R_DIR/SVN-REVISION" ]; then
  # R must either be built from a svn checkout, or from the tarball generated by make dist
  # this is a workaround to build it from a git mirror
  # see https://github.com/wch/r-source/wiki/Home/6d35777dcb772f86371bf221c194ca0aa7874016#building-r-from-source
  echo "Revision: 1
Last Changed Date: 2000-01-01" >SVN-REVISION
  rm -f non-tarball
fi

# Make (regardless if necessary, but `Makefile` skips most of what's already done)

echo "-> make"
make -j8